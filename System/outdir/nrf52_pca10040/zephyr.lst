
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

#include <crc16.h>

u16_t crc16(const u8_t *src, size_t len, u16_t polynomial,
	    u16_t initial_value, bool pad)
{
       0:	2000b108 	.word	0x2000b108
       4:	00027ca9 	.word	0x00027ca9
	u16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
       8:	00027d09 	.word	0x00027d09
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
       c:	00027b3d 	.word	0x00027b3d
	size_t padding = pad ? sizeof(crc) : 0;
      10:	00027b3d 	.word	0x00027b3d
      14:	00027b3d 	.word	0x00027b3d
			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80 >> b));
			}

			if (divide) {
      18:	00027b3d 	.word	0x00027b3d
		for (b = 0; b < 8; b++) {
      1c:	00027b3d 	.word	0x00027b3d
      20:	00027b3d 	.word	0x00027b3d
			crc = (crc << 1);
      24:	00027b3d 	.word	0x00027b3d
			if (i < len) {
      28:	00027b3d 	.word	0x00027b3d
				crc |= !!(src[i] & (0x80 >> b));
      2c:	0002768d 	.word	0x0002768d
      30:	00027b3d 	.word	0x00027b3d
      34:	00027b3d 	.word	0x00027b3d
      38:	00027649 	.word	0x00027649
      3c:	00027b3d 	.word	0x00027b3d

00000040 <_irq_vector_table>:
				crc = crc ^ polynomial;
      40:	00027c6d 000193b5 00027c6d 00027c6d     m|......m|..m|..
	for (i = 0; i < len + padding; i++) {
      50:	00027c6d 00027c6d 00027c6d 00027c6d     m|..m|..m|..m|..
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
      60:	00027c6d 00027c6d 00027c6d 00027c6d     m|..m|..m|..m|..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
      70:	00027c6d 00027c6d 00027c6d 00027c6d     m|..m|..m|..m|..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
      80:	00027c6d 00027c6d 00027c6d 00027c6d     m|..m|..m|..m|..
      90:	00027c6d 00027c6d 00027c6d 00027c6d     m|..m|..m|..m|..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
      a0:	00027c6d 00027c6d 00027c6d 00027c6d     m|..m|..m|..m|..
      b0:	00027c6d 00027c6d 00027c6d 00027c6d     m|..m|..m|..m|..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
      c0:	00027c6d 00027c6d 00027c6d 00027c6d     m|..m|..m|..m|..
      d0:	00027c6d 00027c6d 00027c6d              m|..m|..m|..

000000dc <_sw_isr_table>:
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
      dc:	00000000 000029a9 00000000 00027aa9     .....).......z..
      ec:	2000d540 000022e3 00000000 00027aa9     @.. .".......z..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
      fc:	00000000 00027aa9 00000000 00027aa9     .....z.......z..

	(void)_copy(state, sizeof(state), in, sizeof(state));

	add_round_key(state, s->words + Nb*Nr);

	for (i = Nr - 1; i > 0; --i) {
     10c:	2000d57c 000026b7 00000000 00027aa9     |.. .&.......z..
	for (i = 0; i < (Nb*Nk); ++i) {
     11c:	00000000 00027aa9 00000000 00027aa9     .....z.......z..
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     12c:	00000000 00027aa9 00000000 000193d5     .....z..........
     13c:	00000000 00027aa9 00000000 00019417     .....z..........
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     14c:	00000000 00027aa9 00000000 00027aa9     .....z.......z..
     15c:	00000000 00027aa9 00000000 00002429     .....z......)$..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     16c:	00000000 00027aa9 00000000 00027aa9     .....z.......z..
     17c:	00000000 00027aa9 00000000 00027aa9     .....z.......z..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     18c:	00000000 00027aa9 00000000 00027aa9     .....z.......z..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     19c:	00000000 0001940d 00000000 00027aa9     .............z..
     1ac:	00000000 00027aa9 00000000 00027aa9     .....z.......z..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     1bc:	00000000 00027aa9 00000000 00027aa9     .....z.......z..
     1cc:	00000000 00027aa9 00000000 00027aa9     .....z.......z..
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     1dc:	00000000 00027aa9 00000000 00027aa9     .....z.......z..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     1ec:	00000000 00027aa9 00000000 00027aa9     .....z.......z..
     1fc:	00000000 00027aa9 00000000 00027aa9     .....z.......z..
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     20c:	00000000 00027aa9                       .....z..

00000214 <_image_text_start>:
	...

00000220 <memchr>:
     220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     224:	2a10      	cmp	r2, #16
     226:	db2b      	blt.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     228:	f010 0f07 	tst.w	r0, #7
     22c:	d008      	beq.n	240 <memchr+0x20>
     22e:	f810 3b01 	ldrb.w	r3, [r0], #1
     232:	3a01      	subs	r2, #1
     234:	428b      	cmp	r3, r1
     236:	d02d      	beq.n	294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     238:	f010 0f07 	tst.w	r0, #7
     23c:	b342      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     23e:	d1f6      	bne.n	22e <memchr+0xe>
     240:	b4f0      	push	{r4, r5, r6, r7}
     242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     24a:	f022 0407 	bic.w	r4, r2, #7
     24e:	f07f 0700 	mvns.w	r7, #0
     252:	2300      	movs	r3, #0
     254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     258:	3c08      	subs	r4, #8
     25a:	ea85 0501 	eor.w	r5, r5, r1
     25e:	ea86 0601 	eor.w	r6, r6, r1
     262:	fa85 f547 	uadd8	r5, r5, r7
     266:	faa3 f587 	sel	r5, r3, r7
     26a:	fa86 f647 	uadd8	r6, r6, r7
     26e:	faa5 f687 	sel	r6, r5, r7
     272:	b98e      	cbnz	r6, 298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     274:	d1ee      	bne.n	254 <memchr+0x34>
     276:	bcf0      	pop	{r4, r5, r6, r7}
     278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     27c:	f002 0207 	and.w	r2, r2, #7
     280:	b132      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     282:	f810 3b01 	ldrb.w	r3, [r0], #1
     286:	3a01      	subs	r2, #1
     288:	ea83 0301 	eor.w	r3, r3, r1
     28c:	b113      	cbz	r3, 294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     28e:	d1f8      	bne.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     290:	2000      	movs	r0, #0
     292:	4770      	bx	lr
     294:	3801      	subs	r0, #1
     296:	4770      	bx	lr
     298:	2d00      	cmp	r5, #0
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     29a:	bf06      	itte	eq
     29c:	4635      	moveq	r5, r6
     29e:	3803      	subeq	r0, #3
     2a0:	3807      	subne	r0, #7
     2a2:	f015 0f01 	tst.w	r5, #1
     2a6:	d107      	bne.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     2a8:	3001      	adds	r0, #1
     2aa:	f415 7f80 	tst.w	r5, #256	; 0x100
     2ae:	bf02      	ittt	eq
     2b0:	3001      	addeq	r0, #1
     2b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     2b6:	3001      	addeq	r0, #1
     2b8:	bcf0      	pop	{r4, r5, r6, r7}
     2ba:	3801      	subs	r0, #1
     2bc:	4770      	bx	lr
     2be:	bf00      	nop

000002c0 <memcpy>:
     2c0:	4684      	mov	ip, r0
     2c2:	ea41 0300 	orr.w	r3, r1, r0
     2c6:	f013 0303 	ands.w	r3, r3, #3
     2ca:	d16d      	bne.n	3a8 <memcpy+0xe8>
     2cc:	3a40      	subs	r2, #64	; 0x40
     2ce:	d341      	bcc.n	354 <memcpy+0x94>
     2d0:	f851 3b04 	ldr.w	r3, [r1], #4
     2d4:	f840 3b04 	str.w	r3, [r0], #4
     2d8:	f851 3b04 	ldr.w	r3, [r1], #4
     2dc:	f840 3b04 	str.w	r3, [r0], #4
     2e0:	f851 3b04 	ldr.w	r3, [r1], #4
     2e4:	f840 3b04 	str.w	r3, [r0], #4
     2e8:	f851 3b04 	ldr.w	r3, [r1], #4
     2ec:	f840 3b04 	str.w	r3, [r0], #4
     2f0:	f851 3b04 	ldr.w	r3, [r1], #4
     2f4:	f840 3b04 	str.w	r3, [r0], #4
     2f8:	f851 3b04 	ldr.w	r3, [r1], #4
     2fc:	f840 3b04 	str.w	r3, [r0], #4
     300:	f851 3b04 	ldr.w	r3, [r1], #4
     304:	f840 3b04 	str.w	r3, [r0], #4
     308:	f851 3b04 	ldr.w	r3, [r1], #4
     30c:	f840 3b04 	str.w	r3, [r0], #4
     310:	f851 3b04 	ldr.w	r3, [r1], #4
     314:	f840 3b04 	str.w	r3, [r0], #4
     318:	f851 3b04 	ldr.w	r3, [r1], #4
     31c:	f840 3b04 	str.w	r3, [r0], #4
     320:	f851 3b04 	ldr.w	r3, [r1], #4
     324:	f840 3b04 	str.w	r3, [r0], #4
     328:	f851 3b04 	ldr.w	r3, [r1], #4
     32c:	f840 3b04 	str.w	r3, [r0], #4
     330:	f851 3b04 	ldr.w	r3, [r1], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     334:	f840 3b04 	str.w	r3, [r0], #4
     338:	f851 3b04 	ldr.w	r3, [r1], #4
     33c:	f840 3b04 	str.w	r3, [r0], #4
     340:	f851 3b04 	ldr.w	r3, [r1], #4
     344:	f840 3b04 	str.w	r3, [r0], #4
     348:	f851 3b04 	ldr.w	r3, [r1], #4
     34c:	f840 3b04 	str.w	r3, [r0], #4
     350:	3a40      	subs	r2, #64	; 0x40
     352:	d2bd      	bcs.n	2d0 <memcpy+0x10>
     354:	3230      	adds	r2, #48	; 0x30
     356:	d311      	bcc.n	37c <memcpy+0xbc>
     358:	f851 3b04 	ldr.w	r3, [r1], #4
     35c:	f840 3b04 	str.w	r3, [r0], #4
     360:	f851 3b04 	ldr.w	r3, [r1], #4
     364:	f840 3b04 	str.w	r3, [r0], #4
     368:	f851 3b04 	ldr.w	r3, [r1], #4
     36c:	f840 3b04 	str.w	r3, [r0], #4
     370:	f851 3b04 	ldr.w	r3, [r1], #4
     374:	f840 3b04 	str.w	r3, [r0], #4
     378:	3a10      	subs	r2, #16
     37a:	d2ed      	bcs.n	358 <memcpy+0x98>
     37c:	320c      	adds	r2, #12
     37e:	d305      	bcc.n	38c <memcpy+0xcc>
     380:	f851 3b04 	ldr.w	r3, [r1], #4
     384:	f840 3b04 	str.w	r3, [r0], #4
     388:	3a04      	subs	r2, #4
     38a:	d2f9      	bcs.n	380 <memcpy+0xc0>
     38c:	3204      	adds	r2, #4
     38e:	d008      	beq.n	3a2 <memcpy+0xe2>
     390:	07d2      	lsls	r2, r2, #31
     392:	bf1c      	itt	ne
     394:	f811 3b01 	ldrbne.w	r3, [r1], #1
     398:	f800 3b01 	strbne.w	r3, [r0], #1
     39c:	d301      	bcc.n	3a2 <memcpy+0xe2>
     39e:	880b      	ldrh	r3, [r1, #0]
     3a0:	8003      	strh	r3, [r0, #0]
     3a2:	4660      	mov	r0, ip
     3a4:	4770      	bx	lr
     3a6:	bf00      	nop
     3a8:	2a08      	cmp	r2, #8
     3aa:	d313      	bcc.n	3d4 <memcpy+0x114>
     3ac:	078b      	lsls	r3, r1, #30
     3ae:	d08d      	beq.n	2cc <memcpy+0xc>
     3b0:	f010 0303 	ands.w	r3, r0, #3
     3b4:	d08a      	beq.n	2cc <memcpy+0xc>
     3b6:	f1c3 0304 	rsb	r3, r3, #4
     3ba:	1ad2      	subs	r2, r2, r3
     3bc:	07db      	lsls	r3, r3, #31
     3be:	bf1c      	itt	ne
     3c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
     3c4:	f800 3b01 	strbne.w	r3, [r0], #1
     3c8:	d380      	bcc.n	2cc <memcpy+0xc>
     3ca:	f831 3b02 	ldrh.w	r3, [r1], #2
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     3ce:	f820 3b02 	strh.w	r3, [r0], #2
     3d2:	e77b      	b.n	2cc <memcpy+0xc>
     3d4:	3a04      	subs	r2, #4
     3d6:	d3d9      	bcc.n	38c <memcpy+0xcc>
     3d8:	3a01      	subs	r2, #1
     3da:	f811 3b01 	ldrb.w	r3, [r1], #1
     3de:	f800 3b01 	strb.w	r3, [r0], #1
     3e2:	d2f9      	bcs.n	3d8 <memcpy+0x118>
     3e4:	780b      	ldrb	r3, [r1, #0]
     3e6:	7003      	strb	r3, [r0, #0]
     3e8:	784b      	ldrb	r3, [r1, #1]
     3ea:	7043      	strb	r3, [r0, #1]
     3ec:	788b      	ldrb	r3, [r1, #2]
     3ee:	7083      	strb	r3, [r0, #2]
     3f0:	4660      	mov	r0, ip
     3f2:	4770      	bx	lr
	...
     400:	eba2 0003 	sub.w	r0, r2, r3
     404:	4770      	bx	lr
     406:	bf00      	nop

00000408 <strcmp>:
     408:	7802      	ldrb	r2, [r0, #0]
     40a:	780b      	ldrb	r3, [r1, #0]
     40c:	2a01      	cmp	r2, #1
     40e:	bf28      	it	cs
     410:	429a      	cmpcs	r2, r3
     412:	d1f5      	bne.n	400 <CONFIG_BT_RX_STACK_SIZE>
     414:	e96d 4504 	strd	r4, r5, [sp, #-16]!
     418:	ea40 0401 	orr.w	r4, r0, r1
     41c:	e9cd 6702 	strd	r6, r7, [sp, #8]
     420:	f06f 0c00 	mvn.w	ip, #0
     424:	ea4f 7244 	mov.w	r2, r4, lsl #29
     428:	b312      	cbz	r2, 470 <strcmp+0x68>
     42a:	ea80 0401 	eor.w	r4, r0, r1
     42e:	f014 0f07 	tst.w	r4, #7
     432:	d16a      	bne.n	50a <CONFIG_NET_TX_STACK_SIZE+0x5a>
     434:	f000 0407 	and.w	r4, r0, #7
     438:	f020 0007 	bic.w	r0, r0, #7
     43c:	f004 0503 	and.w	r5, r4, #3
     440:	f021 0107 	bic.w	r1, r1, #7
     444:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     448:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     44c:	f014 0f04 	tst.w	r4, #4
     450:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     454:	fa0c f405 	lsl.w	r4, ip, r5
     458:	ea62 0204 	orn	r2, r2, r4
     45c:	ea66 0604 	orn	r6, r6, r4
     460:	d00a      	beq.n	478 <strcmp+0x70>
     462:	ea63 0304 	orn	r3, r3, r4
     466:	4662      	mov	r2, ip
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     468:	ea67 0704 	orn	r7, r7, r4
     46c:	4666      	mov	r6, ip
     46e:	e003      	b.n	478 <strcmp+0x70>
     470:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     474:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     478:	fa82 f54c 	uadd8	r5, r2, ip
     47c:	ea82 0406 	eor.w	r4, r2, r6
     480:	faa4 f48c 	sel	r4, r4, ip
     484:	bb6c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     486:	fa83 f54c 	uadd8	r5, r3, ip
     48a:	ea83 0507 	eor.w	r5, r3, r7
     48e:	faa5 f58c 	sel	r5, r5, ip
     492:	b995      	cbnz	r5, 4ba <CONFIG_NET_TX_STACK_SIZE+0xa>
     494:	e950 2302 	ldrd	r2, r3, [r0, #-8]
     498:	e951 6702 	ldrd	r6, r7, [r1, #-8]
     49c:	fa82 f54c 	uadd8	r5, r2, ip
     4a0:	ea82 0406 	eor.w	r4, r2, r6
     4a4:	faa4 f48c 	sel	r4, r4, ip
     4a8:	fa83 f54c 	uadd8	r5, r3, ip
     4ac:	ea83 0507 	eor.w	r5, r3, r7
     4b0:	faa5 f58c 	sel	r5, r5, ip
     4b4:	4325      	orrs	r5, r4
     4b6:	d0db      	beq.n	470 <strcmp+0x68>
     4b8:	b99c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     4ba:	ba2d      	rev	r5, r5
     4bc:	fab5 f485 	clz	r4, r5
     4c0:	f024 0407 	bic.w	r4, r4, #7
     4c4:	fa27 f104 	lsr.w	r1, r7, r4
     4c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4cc:	fa23 f304 	lsr.w	r3, r3, r4
     4d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     4d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     4d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     4dc:	eba0 0001 	sub.w	r0, r0, r1
     4e0:	4770      	bx	lr
     4e2:	ba24      	rev	r4, r4
     4e4:	fab4 f484 	clz	r4, r4
     4e8:	f024 0407 	bic.w	r4, r4, #7
     4ec:	fa26 f104 	lsr.w	r1, r6, r4
     4f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4f4:	fa22 f204 	lsr.w	r2, r2, r4
     4f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     4fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     500:	e8fd 4504 	ldrd	r4, r5, [sp], #16
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     504:	eba0 0001 	sub.w	r0, r0, r1
     508:	4770      	bx	lr
     50a:	f014 0f03 	tst.w	r4, #3
     50e:	d13c      	bne.n	58a <CONFIG_NET_TX_STACK_SIZE+0xda>
     510:	f010 0403 	ands.w	r4, r0, #3
     514:	d128      	bne.n	568 <CONFIG_NET_TX_STACK_SIZE+0xb8>
     516:	f850 2b08 	ldr.w	r2, [r0], #8
     51a:	f851 3b08 	ldr.w	r3, [r1], #8
     51e:	fa82 f54c 	uadd8	r5, r2, ip
     522:	ea82 0503 	eor.w	r5, r2, r3
     526:	faa5 f58c 	sel	r5, r5, ip
     52a:	b95d      	cbnz	r5, 544 <CONFIG_NET_TX_STACK_SIZE+0x94>
     52c:	f850 2c04 	ldr.w	r2, [r0, #-4]
     530:	f851 3c04 	ldr.w	r3, [r1, #-4]
     534:	fa82 f54c 	uadd8	r5, r2, ip
     538:	ea82 0503 	eor.w	r5, r2, r3
     53c:	faa5 f58c 	sel	r5, r5, ip
     540:	2d00      	cmp	r5, #0
     542:	d0e8      	beq.n	516 <CONFIG_NET_TX_STACK_SIZE+0x66>
     544:	ba2d      	rev	r5, r5
     546:	fab5 f485 	clz	r4, r5
     54a:	f024 0407 	bic.w	r4, r4, #7
     54e:	fa23 f104 	lsr.w	r1, r3, r4
     552:	fa22 f204 	lsr.w	r2, r2, r4
     556:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     55a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     55e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     562:	eba0 0001 	sub.w	r0, r0, r1
     566:	4770      	bx	lr
     568:	ea4f 04c4 	mov.w	r4, r4, lsl #3
     56c:	f020 0003 	bic.w	r0, r0, #3
     570:	f850 2b08 	ldr.w	r2, [r0], #8
     574:	f021 0103 	bic.w	r1, r1, #3
     578:	f851 3b08 	ldr.w	r3, [r1], #8
     57c:	fa0c f404 	lsl.w	r4, ip, r4
     580:	ea62 0204 	orn	r2, r2, r4
     584:	ea63 0304 	orn	r3, r3, r4
     588:	e7c9      	b.n	51e <CONFIG_NET_TX_STACK_SIZE+0x6e>
     58a:	f010 0403 	ands.w	r4, r0, #3
     58e:	d01a      	beq.n	5c6 <CONFIG_NET_TX_STACK_SIZE+0x116>
     590:	eba1 0104 	sub.w	r1, r1, r4
     594:	f020 0003 	bic.w	r0, r0, #3
     598:	07e4      	lsls	r4, r4, #31
     59a:	f850 2b04 	ldr.w	r2, [r0], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     59e:	d006      	beq.n	5ae <CONFIG_NET_TX_STACK_SIZE+0xfe>
     5a0:	d20f      	bcs.n	5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5a2:	788b      	ldrb	r3, [r1, #2]
     5a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
     5a8:	1ae4      	subs	r4, r4, r3
     5aa:	d106      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ac:	b12b      	cbz	r3, 5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ae:	78cb      	ldrb	r3, [r1, #3]
     5b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
     5b4:	1ae4      	subs	r4, r4, r3
     5b6:	d100      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5b8:	b91b      	cbnz	r3, 5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5ba:	4620      	mov	r0, r4
     5bc:	f85d 4b10 	ldr.w	r4, [sp], #16
     5c0:	4770      	bx	lr
     5c2:	f101 0104 	add.w	r1, r1, #4
     5c6:	f850 2b04 	ldr.w	r2, [r0], #4
     5ca:	07cc      	lsls	r4, r1, #31
     5cc:	f021 0103 	bic.w	r1, r1, #3
     5d0:	f851 3b04 	ldr.w	r3, [r1], #4
     5d4:	d848      	bhi.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     5d6:	d224      	bcs.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     5d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
     5dc:	fa82 f54c 	uadd8	r5, r2, ip
     5e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
     5e4:	faa5 f58c 	sel	r5, r5, ip
     5e8:	d10a      	bne.n	600 <CONFIG_NET_RX_STACK_SIZE+0x24>
     5ea:	b965      	cbnz	r5, 606 <CONFIG_NET_RX_STACK_SIZE+0x2a>
     5ec:	f851 3b04 	ldr.w	r3, [r1], #4
     5f0:	ea84 0402 	eor.w	r4, r4, r2
     5f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
     5f8:	d10e      	bne.n	618 <CONFIG_NET_RX_STACK_SIZE+0x3c>
     5fa:	f850 2b04 	ldr.w	r2, [r0], #4
     5fe:	e7eb      	b.n	5d8 <CONFIG_NET_TX_STACK_SIZE+0x128>
     600:	ea4f 2313 	mov.w	r3, r3, lsr #8
     604:	e055      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     606:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
     60a:	d14d      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     60c:	7808      	ldrb	r0, [r1, #0]
     60e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     612:	f1c0 0000 	rsb	r0, r0, #0
     616:	4770      	bx	lr
     618:	ea4f 6212 	mov.w	r2, r2, lsr #24
     61c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     620:	e047      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     622:	ea02 441c 	and.w	r4, r2, ip, lsr #16
     626:	fa82 f54c 	uadd8	r5, r2, ip
     62a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
     62e:	faa5 f58c 	sel	r5, r5, ip
     632:	d10a      	bne.n	64a <CONFIG_NET_RX_STACK_SIZE+0x6e>
     634:	b965      	cbnz	r5, 650 <CONFIG_NET_RX_STACK_SIZE+0x74>
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     636:	f851 3b04 	ldr.w	r3, [r1], #4
     63a:	ea84 0402 	eor.w	r4, r4, r2
     63e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
     642:	d10c      	bne.n	65e <CONFIG_NET_RX_STACK_SIZE+0x82>
     644:	f850 2b04 	ldr.w	r2, [r0], #4
     648:	e7eb      	b.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     64a:	ea4f 4313 	mov.w	r3, r3, lsr #16
     64e:	e030      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     650:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
     654:	d128      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     656:	880b      	ldrh	r3, [r1, #0]
     658:	ea4f 4212 	mov.w	r2, r2, lsr #16
     65c:	e029      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     65e:	ea4f 4212 	mov.w	r2, r2, lsr #16
     662:	ea03 431c 	and.w	r3, r3, ip, lsr #16
     666:	e024      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     668:	f002 04ff 	and.w	r4, r2, #255	; 0xff
     66c:	fa82 f54c 	uadd8	r5, r2, ip
     670:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
     674:	faa5 f58c 	sel	r5, r5, ip
     678:	d10a      	bne.n	690 <CONFIG_NET_RX_STACK_SIZE+0xb4>
     67a:	b965      	cbnz	r5, 696 <CONFIG_NET_RX_STACK_SIZE+0xba>
     67c:	f851 3b04 	ldr.w	r3, [r1], #4
     680:	ea84 0402 	eor.w	r4, r4, r2
     684:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
     688:	d109      	bne.n	69e <CONFIG_NET_RX_STACK_SIZE+0xc2>
     68a:	f850 2b04 	ldr.w	r2, [r0], #4
     68e:	e7eb      	b.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     690:	ea4f 6313 	mov.w	r3, r3, lsr #24
     694:	e00d      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     696:	f015 0fff 	tst.w	r5, #255	; 0xff
     69a:	d105      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     69c:	680b      	ldr	r3, [r1, #0]
     69e:	ea4f 2212 	mov.w	r2, r2, lsr #8
     6a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     6a6:	e004      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     6a8:	f04f 0000 	mov.w	r0, #0
     6ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6b0:	4770      	bx	lr
     6b2:	ba12      	rev	r2, r2
     6b4:	ba1b      	rev	r3, r3
     6b6:	fa82 f44c 	uadd8	r4, r2, ip
     6ba:	ea82 0403 	eor.w	r4, r2, r3
     6be:	faa4 f58c 	sel	r5, r4, ip
     6c2:	fab5 f485 	clz	r4, r5
     6c6:	fa02 f204 	lsl.w	r2, r2, r4
     6ca:	fa03 f304 	lsl.w	r3, r3, r4
     6ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     6d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
     6da:	4770      	bx	lr
	...

00000700 <strlen>:
     700:	f890 f000 	pld	[r0]
     704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
     708:	f020 0107 	bic.w	r1, r0, #7
     70c:	f06f 0c00 	mvn.w	ip, #0
     710:	f010 0407 	ands.w	r4, r0, #7
     714:	f891 f020 	pld	[r1, #32]
     718:	f040 8049 	bne.w	7ae <strlen+0xae>
     71c:	f04f 0400 	mov.w	r4, #0
     720:	f06f 0007 	mvn.w	r0, #7
     724:	e9d1 2300 	ldrd	r2, r3, [r1]
     728:	f891 f040 	pld	[r1, #64]	; 0x40
     72c:	f100 0008 	add.w	r0, r0, #8
     730:	fa82 f24c 	uadd8	r2, r2, ip
     734:	faa4 f28c 	sel	r2, r4, ip
     738:	fa83 f34c 	uadd8	r3, r3, ip
     73c:	faa2 f38c 	sel	r3, r2, ip
     740:	bb4b      	cbnz	r3, 796 <strlen+0x96>
     742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
     746:	fa82 f24c 	uadd8	r2, r2, ip
     74a:	f100 0008 	add.w	r0, r0, #8
     74e:	faa4 f28c 	sel	r2, r4, ip
     752:	fa83 f34c 	uadd8	r3, r3, ip
     756:	faa2 f38c 	sel	r3, r2, ip
     75a:	b9e3      	cbnz	r3, 796 <strlen+0x96>
     75c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     760:	fa82 f24c 	uadd8	r2, r2, ip
     764:	f100 0008 	add.w	r0, r0, #8
     768:	faa4 f28c 	sel	r2, r4, ip
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     76c:	fa83 f34c 	uadd8	r3, r3, ip
     770:	faa2 f38c 	sel	r3, r2, ip
     774:	b97b      	cbnz	r3, 796 <strlen+0x96>
     776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
     77a:	f101 0120 	add.w	r1, r1, #32
     77e:	fa82 f24c 	uadd8	r2, r2, ip
     782:	f100 0008 	add.w	r0, r0, #8
     786:	faa4 f28c 	sel	r2, r4, ip
     78a:	fa83 f34c 	uadd8	r3, r3, ip
     78e:	faa2 f38c 	sel	r3, r2, ip
     792:	2b00      	cmp	r3, #0
     794:	d0c6      	beq.n	724 <strlen+0x24>
     796:	2a00      	cmp	r2, #0
     798:	bf04      	itt	eq
     79a:	3004      	addeq	r0, #4
     79c:	461a      	moveq	r2, r3
     79e:	ba12      	rev	r2, r2
     7a0:	fab2 f282 	clz	r2, r2
     7a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
     7a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
     7ac:	4770      	bx	lr
     7ae:	e9d1 2300 	ldrd	r2, r3, [r1]
     7b2:	f004 0503 	and.w	r5, r4, #3
     7b6:	f1c4 0000 	rsb	r0, r4, #0
     7ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     7be:	f014 0f04 	tst.w	r4, #4
     7c2:	f891 f040 	pld	[r1, #64]	; 0x40
     7c6:	fa0c f505 	lsl.w	r5, ip, r5
     7ca:	ea62 0205 	orn	r2, r2, r5
     7ce:	bf1c      	itt	ne
     7d0:	ea63 0305 	ornne	r3, r3, r5
     7d4:	4662      	movne	r2, ip
     7d6:	f04f 0400 	mov.w	r4, #0
     7da:	e7a9      	b.n	730 <strlen+0x30>

000007dc <__aeabi_drsub>:
     7dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     7e0:	e002      	b.n	7e8 <__adddf3>
     7e2:	bf00      	nop

000007e4 <__aeabi_dsub>:
     7e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000007e8 <__adddf3>:
     7e8:	b530      	push	{r4, r5, lr}
     7ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
     7ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
     7f2:	ea94 0f05 	teq	r4, r5
     7f6:	bf08      	it	eq
     7f8:	ea90 0f02 	teqeq	r0, r2
     7fc:	bf1f      	itttt	ne
     7fe:	ea54 0c00 	orrsne.w	ip, r4, r0
     802:	ea55 0c02 	orrsne.w	ip, r5, r2
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     806:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     80a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     80e:	f000 80e2 	beq.w	9d6 <CONFIG_ISR_STACK_SIZE+0x1d6>
     812:	ea4f 5454 	mov.w	r4, r4, lsr #21
     816:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     81a:	bfb8      	it	lt
     81c:	426d      	neglt	r5, r5
     81e:	dd0c      	ble.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     820:	442c      	add	r4, r5
     822:	ea80 0202 	eor.w	r2, r0, r2
     826:	ea81 0303 	eor.w	r3, r1, r3
     82a:	ea82 0000 	eor.w	r0, r2, r0
     82e:	ea83 0101 	eor.w	r1, r3, r1
     832:	ea80 0202 	eor.w	r2, r0, r2
     836:	ea81 0303 	eor.w	r3, r1, r3
     83a:	2d36      	cmp	r5, #54	; 0x36
     83c:	bf88      	it	hi
     83e:	bd30      	pophi	{r4, r5, pc}
     840:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     844:	ea4f 3101 	mov.w	r1, r1, lsl #12
     848:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     84c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     850:	d002      	beq.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     852:	4240      	negs	r0, r0
     854:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     858:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     85c:	ea4f 3303 	mov.w	r3, r3, lsl #12
     860:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     864:	d002      	beq.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     866:	4252      	negs	r2, r2
     868:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     86c:	ea94 0f05 	teq	r4, r5
     870:	f000 80a7 	beq.w	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
     874:	f1a4 0401 	sub.w	r4, r4, #1
     878:	f1d5 0e20 	rsbs	lr, r5, #32
     87c:	db0d      	blt.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
     87e:	fa02 fc0e 	lsl.w	ip, r2, lr
     882:	fa22 f205 	lsr.w	r2, r2, r5
     886:	1880      	adds	r0, r0, r2
     888:	f141 0100 	adc.w	r1, r1, #0
     88c:	fa03 f20e 	lsl.w	r2, r3, lr
     890:	1880      	adds	r0, r0, r2
     892:	fa43 f305 	asr.w	r3, r3, r5
     896:	4159      	adcs	r1, r3
     898:	e00e      	b.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     89a:	f1a5 0520 	sub.w	r5, r5, #32
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     89e:	f10e 0e20 	add.w	lr, lr, #32
     8a2:	2a01      	cmp	r2, #1
     8a4:	fa03 fc0e 	lsl.w	ip, r3, lr
     8a8:	bf28      	it	cs
     8aa:	f04c 0c02 	orrcs.w	ip, ip, #2
     8ae:	fa43 f305 	asr.w	r3, r3, r5
     8b2:	18c0      	adds	r0, r0, r3
     8b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     8b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     8bc:	d507      	bpl.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     8be:	f04f 0e00 	mov.w	lr, #0
     8c2:	f1dc 0c00 	rsbs	ip, ip, #0
     8c6:	eb7e 0000 	sbcs.w	r0, lr, r0
     8ca:	eb6e 0101 	sbc.w	r1, lr, r1
     8ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     8d2:	d31b      	bcc.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
     8d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     8d8:	d30c      	bcc.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8da:	0849      	lsrs	r1, r1, #1
     8dc:	ea5f 0030 	movs.w	r0, r0, rrx
     8e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
     8e4:	f104 0401 	add.w	r4, r4, #1
     8e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
     8ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     8f0:	f080 809a 	bcs.w	a28 <CONFIG_ISR_STACK_SIZE+0x228>
     8f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     8f8:	bf08      	it	eq
     8fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8fe:	f150 0000 	adcs.w	r0, r0, #0
     902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     906:	ea41 0105 	orr.w	r1, r1, r5
     90a:	bd30      	pop	{r4, r5, pc}
     90c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     910:	4140      	adcs	r0, r0
     912:	eb41 0101 	adc.w	r1, r1, r1
     916:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     91a:	f1a4 0401 	sub.w	r4, r4, #1
     91e:	d1e9      	bne.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     920:	f091 0f00 	teq	r1, #0
     924:	bf04      	itt	eq
     926:	4601      	moveq	r1, r0
     928:	2000      	moveq	r0, #0
     92a:	fab1 f381 	clz	r3, r1
     92e:	bf08      	it	eq
     930:	3320      	addeq	r3, #32
     932:	f1a3 030b 	sub.w	r3, r3, #11
     936:	f1b3 0220 	subs.w	r2, r3, #32
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     93a:	da0c      	bge.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
     93c:	320c      	adds	r2, #12
     93e:	dd08      	ble.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
     940:	f102 0c14 	add.w	ip, r2, #20
     944:	f1c2 020c 	rsb	r2, r2, #12
     948:	fa01 f00c 	lsl.w	r0, r1, ip
     94c:	fa21 f102 	lsr.w	r1, r1, r2
     950:	e00c      	b.n	96c <CONFIG_ISR_STACK_SIZE+0x16c>
     952:	f102 0214 	add.w	r2, r2, #20
     956:	bfd8      	it	le
     958:	f1c2 0c20 	rsble	ip, r2, #32
     95c:	fa01 f102 	lsl.w	r1, r1, r2
     960:	fa20 fc0c 	lsr.w	ip, r0, ip
     964:	bfdc      	itt	le
     966:	ea41 010c 	orrle.w	r1, r1, ip
     96a:	4090      	lslle	r0, r2
     96c:	1ae4      	subs	r4, r4, r3
     96e:	bfa2      	ittt	ge
     970:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     974:	4329      	orrge	r1, r5
     976:	bd30      	popge	{r4, r5, pc}
     978:	ea6f 0404 	mvn.w	r4, r4
     97c:	3c1f      	subs	r4, #31
     97e:	da1c      	bge.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
     980:	340c      	adds	r4, #12
     982:	dc0e      	bgt.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
     984:	f104 0414 	add.w	r4, r4, #20
     988:	f1c4 0220 	rsb	r2, r4, #32
     98c:	fa20 f004 	lsr.w	r0, r0, r4
     990:	fa01 f302 	lsl.w	r3, r1, r2
     994:	ea40 0003 	orr.w	r0, r0, r3
     998:	fa21 f304 	lsr.w	r3, r1, r4
     99c:	ea45 0103 	orr.w	r1, r5, r3
     9a0:	bd30      	pop	{r4, r5, pc}
     9a2:	f1c4 040c 	rsb	r4, r4, #12
     9a6:	f1c4 0220 	rsb	r2, r4, #32
     9aa:	fa20 f002 	lsr.w	r0, r0, r2
     9ae:	fa01 f304 	lsl.w	r3, r1, r4
     9b2:	ea40 0003 	orr.w	r0, r0, r3
     9b6:	4629      	mov	r1, r5
     9b8:	bd30      	pop	{r4, r5, pc}
     9ba:	fa21 f004 	lsr.w	r0, r1, r4
     9be:	4629      	mov	r1, r5
     9c0:	bd30      	pop	{r4, r5, pc}
     9c2:	f094 0f00 	teq	r4, #0
     9c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     9ca:	bf06      	itte	eq
     9cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     9d0:	3401      	addeq	r4, #1
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     9d2:	3d01      	subne	r5, #1
     9d4:	e74e      	b.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
     9d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     9da:	bf18      	it	ne
     9dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     9e0:	d029      	beq.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
     9e2:	ea94 0f05 	teq	r4, r5
     9e6:	bf08      	it	eq
     9e8:	ea90 0f02 	teqeq	r0, r2
     9ec:	d005      	beq.n	9fa <CONFIG_ISR_STACK_SIZE+0x1fa>
     9ee:	ea54 0c00 	orrs.w	ip, r4, r0
     9f2:	bf04      	itt	eq
     9f4:	4619      	moveq	r1, r3
     9f6:	4610      	moveq	r0, r2
     9f8:	bd30      	pop	{r4, r5, pc}
     9fa:	ea91 0f03 	teq	r1, r3
     9fe:	bf1e      	ittt	ne
     a00:	2100      	movne	r1, #0
     a02:	2000      	movne	r0, #0
     a04:	bd30      	popne	{r4, r5, pc}
     a06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     a0a:	d105      	bne.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
     a0c:	0040      	lsls	r0, r0, #1
     a0e:	4149      	adcs	r1, r1
     a10:	bf28      	it	cs
     a12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     a16:	bd30      	pop	{r4, r5, pc}
     a18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     a1c:	bf3c      	itt	cc
     a1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     a22:	bd30      	popcc	{r4, r5, pc}
     a24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     a28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     a2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     a30:	f04f 0000 	mov.w	r0, #0
     a34:	bd30      	pop	{r4, r5, pc}
     a36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     a3a:	bf1a      	itte	ne
     a3c:	4619      	movne	r1, r3
     a3e:	4610      	movne	r0, r2
     a40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     a44:	bf1c      	itt	ne
     a46:	460b      	movne	r3, r1
     a48:	4602      	movne	r2, r0
     a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     a4e:	bf06      	itte	eq
     a50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     a54:	ea91 0f03 	teqeq	r1, r3
     a58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     a5c:	bd30      	pop	{r4, r5, pc}
     a5e:	bf00      	nop

00000a60 <__aeabi_ui2d>:
     a60:	f090 0f00 	teq	r0, #0
     a64:	bf04      	itt	eq
     a66:	2100      	moveq	r1, #0
     a68:	4770      	bxeq	lr
     a6a:	b530      	push	{r4, r5, lr}
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     a6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a70:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a74:	f04f 0500 	mov.w	r5, #0
     a78:	f04f 0100 	mov.w	r1, #0
     a7c:	e750      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     a7e:	bf00      	nop

00000a80 <__aeabi_i2d>:
     a80:	f090 0f00 	teq	r0, #0
     a84:	bf04      	itt	eq
     a86:	2100      	moveq	r1, #0
     a88:	4770      	bxeq	lr
     a8a:	b530      	push	{r4, r5, lr}
     a8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a90:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     a98:	bf48      	it	mi
     a9a:	4240      	negmi	r0, r0
     a9c:	f04f 0100 	mov.w	r1, #0
     aa0:	e73e      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     aa2:	bf00      	nop

00000aa4 <__aeabi_f2d>:
     aa4:	0042      	lsls	r2, r0, #1
     aa6:	ea4f 01e2 	mov.w	r1, r2, asr #3
     aaa:	ea4f 0131 	mov.w	r1, r1, rrx
     aae:	ea4f 7002 	mov.w	r0, r2, lsl #28
     ab2:	bf1f      	itttt	ne
     ab4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     ab8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     abc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     ac0:	4770      	bxne	lr
     ac2:	f092 0f00 	teq	r2, #0
     ac6:	bf14      	ite	ne
     ac8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     acc:	4770      	bxeq	lr
     ace:	b530      	push	{r4, r5, lr}
     ad0:	f44f 7460 	mov.w	r4, #896	; 0x380
     ad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     adc:	e720      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     ade:	bf00      	nop

00000ae0 <__aeabi_ul2d>:
     ae0:	ea50 0201 	orrs.w	r2, r0, r1
     ae4:	bf08      	it	eq
     ae6:	4770      	bxeq	lr
     ae8:	b530      	push	{r4, r5, lr}
     aea:	f04f 0500 	mov.w	r5, #0
     aee:	e00a      	b.n	b06 <__aeabi_l2d+0x16>

00000af0 <__aeabi_l2d>:
     af0:	ea50 0201 	orrs.w	r2, r0, r1
     af4:	bf08      	it	eq
     af6:	4770      	bxeq	lr
     af8:	b530      	push	{r4, r5, lr}
     afa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     afe:	d502      	bpl.n	b06 <__aeabi_l2d+0x16>
     b00:	4240      	negs	r0, r0
     b02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     b06:	f44f 6480 	mov.w	r4, #1024	; 0x400
     b0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
     b0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     b12:	f43f aedc 	beq.w	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b16:	f04f 0203 	mov.w	r2, #3
     b1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b1e:	bf18      	it	ne
     b20:	3203      	addne	r2, #3
     b22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b26:	bf18      	it	ne
     b28:	3203      	addne	r2, #3
     b2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     b2e:	f1c2 0320 	rsb	r3, r2, #32
     b32:	fa00 fc03 	lsl.w	ip, r0, r3
     b36:	fa20 f002 	lsr.w	r0, r0, r2
     b3a:	fa01 fe03 	lsl.w	lr, r1, r3
     b3e:	ea40 000e 	orr.w	r0, r0, lr
     b42:	fa21 f102 	lsr.w	r1, r1, r2
     b46:	4414      	add	r4, r2
     b48:	e6c1      	b.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b4a:	bf00      	nop

00000b4c <__aeabi_dmul>:
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     b56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     b5a:	bf1d      	ittte	ne
     b5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     b60:	ea94 0f0c 	teqne	r4, ip
     b64:	ea95 0f0c 	teqne	r5, ip
     b68:	f000 f8de 	bleq	d28 <__aeabi_dmul+0x1dc>
     b6c:	442c      	add	r4, r5
     b6e:	ea81 0603 	eor.w	r6, r1, r3
     b72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     b76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     b7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     b7e:	bf18      	it	ne
     b80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     b8c:	d038      	beq.n	c00 <__aeabi_dmul+0xb4>
     b8e:	fba0 ce02 	umull	ip, lr, r0, r2
     b92:	f04f 0500 	mov.w	r5, #0
     b96:	fbe1 e502 	umlal	lr, r5, r1, r2
     b9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     b9e:	fbe0 e503 	umlal	lr, r5, r0, r3
	(void)_copy(s, sizeof(t), t, sizeof(t));
     ba2:	f04f 0600 	mov.w	r6, #0
     ba6:	fbe1 5603 	umlal	r5, r6, r1, r3
     baa:	f09c 0f00 	teq	ip, #0
	for (i = Nr - 1; i > 0; --i) {
     bae:	bf18      	it	ne
     bb0:	f04e 0e01 	orrne.w	lr, lr, #1
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     bb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     bb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     bbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     bc0:	d204      	bcs.n	bcc <__aeabi_dmul+0x80>
     bc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     bc6:	416d      	adcs	r5, r5
     bc8:	eb46 0606 	adc.w	r6, r6, r6
     bcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     bd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     bd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     bd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     bdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     be0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     be4:	bf88      	it	hi
     be6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     bea:	d81e      	bhi.n	c2a <__aeabi_dmul+0xde>
     bec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     bf0:	bf08      	it	eq
     bf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     bf6:	f150 0000 	adcs.w	r0, r0, #0
     bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     bfe:	bd70      	pop	{r4, r5, r6, pc}
     c00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     c04:	ea46 0101 	orr.w	r1, r6, r1
     c08:	ea40 0002 	orr.w	r0, r0, r2
     c0c:	ea81 0103 	eor.w	r1, r1, r3
     c10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     c14:	bfc2      	ittt	gt
     c16:	ebd4 050c 	rsbsgt	r5, r4, ip
     c1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     c1e:	bd70      	popgt	{r4, r5, r6, pc}
     c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     c24:	f04f 0e00 	mov.w	lr, #0
     c28:	3c01      	subs	r4, #1
     c2a:	f300 80ab 	bgt.w	d84 <__aeabi_dmul+0x238>
     c2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
     c32:	bfde      	ittt	le
	(void)_copy(s, sizeof(t), t, sizeof(t));
     c34:	2000      	movle	r0, #0
     c36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     c3a:	bd70      	pople	{r4, r5, r6, pc}
     c3c:	f1c4 0400 	rsb	r4, r4, #0
     c40:	3c20      	subs	r4, #32
	for (i = 0; i < (Nb*Nk); ++i) {
     c42:	da35      	bge.n	cb0 <__aeabi_dmul+0x164>
     c44:	340c      	adds	r4, #12
     c46:	dc1b      	bgt.n	c80 <__aeabi_dmul+0x134>
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     c48:	f104 0414 	add.w	r4, r4, #20
     c4c:	f1c4 0520 	rsb	r5, r4, #32
     c50:	fa00 f305 	lsl.w	r3, r0, r5
     c54:	fa20 f004 	lsr.w	r0, r0, r4
     c58:	fa01 f205 	lsl.w	r2, r1, r5
     c5c:	ea40 0002 	orr.w	r0, r0, r2
     c60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     c64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     c68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     c6c:	fa21 f604 	lsr.w	r6, r1, r4
     c70:	eb42 0106 	adc.w	r1, r2, r6
     c74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     c78:	bf08      	it	eq
     c7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     c7e:	bd70      	pop	{r4, r5, r6, pc}
     c80:	f1c4 040c 	rsb	r4, r4, #12
     c84:	f1c4 0520 	rsb	r5, r4, #32
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     c88:	fa00 f304 	lsl.w	r3, r0, r4
     c8c:	fa20 f005 	lsr.w	r0, r0, r5
     c90:	fa01 f204 	lsl.w	r2, r1, r4
     c94:	ea40 0002 	orr.w	r0, r0, r2
     c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     c9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     ca0:	f141 0100 	adc.w	r1, r1, #0
     ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     ca8:	bf08      	it	eq
     caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     cae:	bd70      	pop	{r4, r5, r6, pc}
     cb0:	f1c4 0520 	rsb	r5, r4, #32
     cb4:	fa00 f205 	lsl.w	r2, r0, r5
     cb8:	ea4e 0e02 	orr.w	lr, lr, r2
     cbc:	fa20 f304 	lsr.w	r3, r0, r4
     cc0:	fa01 f205 	lsl.w	r2, r1, r5
     cc4:	ea43 0302 	orr.w	r3, r3, r2
	(void)_copy(s, sizeof(t), t, sizeof(t));
     cc8:	fa21 f004 	lsr.w	r0, r1, r4
     ccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     cd0:	fa21 f204 	lsr.w	r2, r1, r4
     cd4:	ea20 0002 	bic.w	r0, r0, r2
		s[i] = inv_sbox[s[i]];
     cd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     ce0:	bf08      	it	eq
	for (i = 0; i < (Nb*Nk); ++i) {
     ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     ce6:	bd70      	pop	{r4, r5, r6, pc}
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     ce8:	f094 0f00 	teq	r4, #0
     cec:	d10f      	bne.n	d0e <__aeabi_dmul+0x1c2>
     cee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     cf2:	0040      	lsls	r0, r0, #1
     cf4:	eb41 0101 	adc.w	r1, r1, r1
     cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     cfc:	bf08      	it	eq
     cfe:	3c01      	subeq	r4, #1
     d00:	d0f7      	beq.n	cf2 <__aeabi_dmul+0x1a6>
     d02:	ea41 0106 	orr.w	r1, r1, r6
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     d06:	f095 0f00 	teq	r5, #0
     d0a:	bf18      	it	ne
     d0c:	4770      	bxne	lr
     d0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     d12:	0052      	lsls	r2, r2, #1
     d14:	eb43 0303 	adc.w	r3, r3, r3
     d18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     d1c:	bf08      	it	eq
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     d1e:	3d01      	subeq	r5, #1
     d20:	d0f7      	beq.n	d12 <__aeabi_dmul+0x1c6>
     d22:	ea43 0306 	orr.w	r3, r3, r6
     d26:	4770      	bx	lr
     d28:	ea94 0f0c 	teq	r4, ip
     d2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     d30:	bf18      	it	ne
     d32:	ea95 0f0c 	teqne	r5, ip
     d36:	d00c      	beq.n	d52 <__aeabi_dmul+0x206>
     d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     d3c:	bf18      	it	ne
     d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d42:	d1d1      	bne.n	ce8 <__aeabi_dmul+0x19c>
     d44:	ea81 0103 	eor.w	r1, r1, r3
     d48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d4c:	f04f 0000 	mov.w	r0, #0
     d50:	bd70      	pop	{r4, r5, r6, pc}
     d52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     d56:	bf06      	itte	eq
     d58:	4610      	moveq	r0, r2
     d5a:	4619      	moveq	r1, r3
     d5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d60:	d019      	beq.n	d96 <__aeabi_dmul+0x24a>
     d62:	ea94 0f0c 	teq	r4, ip
     d66:	d102      	bne.n	d6e <__aeabi_dmul+0x222>
     d68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     d6c:	d113      	bne.n	d96 <__aeabi_dmul+0x24a>
     d6e:	ea95 0f0c 	teq	r5, ip
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     d72:	d105      	bne.n	d80 <__aeabi_dmul+0x234>
     d74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     d78:	bf1c      	itt	ne
     d7a:	4610      	movne	r0, r2
     d7c:	4619      	movne	r1, r3
     d7e:	d10a      	bne.n	d96 <__aeabi_dmul+0x24a>
     d80:	ea81 0103 	eor.w	r1, r1, r3
     d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     d90:	f04f 0000 	mov.w	r0, #0
     d94:	bd70      	pop	{r4, r5, r6, pc}
     d96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     d9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     d9e:	bd70      	pop	{r4, r5, r6, pc}

00000da0 <__aeabi_ddiv>:
     da0:	b570      	push	{r4, r5, r6, lr}
     da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     da6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     daa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     dae:	bf1d      	ittte	ne
     db0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     db4:	ea94 0f0c 	teqne	r4, ip
     db8:	ea95 0f0c 	teqne	r5, ip
     dbc:	f000 f8a7 	bleq	f0e <__aeabi_ddiv+0x16e>

	inv_shift_rows(state);
	inv_sub_bytes(state);
	add_round_key(state, s->words);

	(void)_copy(out, sizeof(state), state, sizeof(state));
     dc0:	eba4 0405 	sub.w	r4, r4, r5
     dc4:	ea81 0e03 	eor.w	lr, r1, r3
     dc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12

	/*zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
     dd0:	f000 8088 	beq.w	ee4 <__aeabi_ddiv+0x144>
     dd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
     dd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000


	return TC_CRYPTO_SUCCESS;
}
     ddc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     de0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
		return TC_CRYPTO_FAIL;
     de4:	ea4f 2202 	mov.w	r2, r2, lsl #8
		return TC_CRYPTO_FAIL;
     de8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
		return TC_CRYPTO_FAIL;
     dec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     df0:	ea4f 2600 	mov.w	r6, r0, lsl #8
     df4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     df8:	429d      	cmp	r5, r3
     dfa:	bf08      	it	eq
     dfc:	4296      	cmpeq	r6, r2
     dfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     e02:	f504 7440 	add.w	r4, r4, #768	; 0x300
     e06:	d202      	bcs.n	e0e <__aeabi_ddiv+0x6e>
     e08:	085b      	lsrs	r3, r3, #1
     e0a:	ea4f 0232 	mov.w	r2, r2, rrx
     e0e:	1ab6      	subs	r6, r6, r2
     e10:	eb65 0503 	sbc.w	r5, r5, r3
     e14:	085b      	lsrs	r3, r3, #1
     e16:	ea4f 0232 	mov.w	r2, r2, rrx
     e1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     e1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     e22:	ebb6 0e02 	subs.w	lr, r6, r2
     e26:	eb75 0e03 	sbcs.w	lr, r5, r3
     e2a:	bf22      	ittt	cs
     e2c:	1ab6      	subcs	r6, r6, r2
     e2e:	4675      	movcs	r5, lr
     e30:	ea40 000c 	orrcs.w	r0, r0, ip
     e34:	085b      	lsrs	r3, r3, #1
     e36:	ea4f 0232 	mov.w	r2, r2, rrx
     e3a:	ebb6 0e02 	subs.w	lr, r6, r2
     e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e42:	bf22      	ittt	cs
     e44:	1ab6      	subcs	r6, r6, r2
     e46:	4675      	movcs	r5, lr
     e48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     e4c:	085b      	lsrs	r3, r3, #1
     e4e:	ea4f 0232 	mov.w	r2, r2, rrx
     e52:	ebb6 0e02 	subs.w	lr, r6, r2
     e56:	eb75 0e03 	sbcs.w	lr, r5, r3
     e5a:	bf22      	ittt	cs
     e5c:	1ab6      	subcs	r6, r6, r2
     e5e:	4675      	movcs	r5, lr
     e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     e64:	085b      	lsrs	r3, r3, #1
     e66:	ea4f 0232 	mov.w	r2, r2, rrx
     e6a:	ebb6 0e02 	subs.w	lr, r6, r2
     e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e72:	bf22      	ittt	cs
     e74:	1ab6      	subcs	r6, r6, r2
     e76:	4675      	movcs	r5, lr
     e78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     e7c:	ea55 0e06 	orrs.w	lr, r5, r6
     e80:	d018      	beq.n	eb4 <__aeabi_ddiv+0x114>
     e82:	ea4f 1505 	mov.w	r5, r5, lsl #4
     e86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     e8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
     e8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     e92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     e96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     e9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     e9e:	d1c0      	bne.n	e22 <__aeabi_ddiv+0x82>
     ea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     ea4:	d10b      	bne.n	ebe <__aeabi_ddiv+0x11e>
     ea6:	ea41 0100 	orr.w	r1, r1, r0
     eaa:	f04f 0000 	mov.w	r0, #0
     eae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     eb2:	e7b6      	b.n	e22 <__aeabi_ddiv+0x82>
     eb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     eb8:	bf04      	itt	eq
     eba:	4301      	orreq	r1, r0
     ebc:	2000      	moveq	r0, #0
     ebe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     ec2:	bf88      	it	hi
     ec4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     ec8:	f63f aeaf 	bhi.w	c2a <__aeabi_dmul+0xde>
     ecc:	ebb5 0c03 	subs.w	ip, r5, r3
     ed0:	bf04      	itt	eq
     ed2:	ebb6 0c02 	subseq.w	ip, r6, r2
     ed6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     eda:	f150 0000 	adcs.w	r0, r0, #0
     ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     ee2:	bd70      	pop	{r4, r5, r6, pc}
     ee4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     ee8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     eec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     ef0:	bfc2      	ittt	gt
     ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
     ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     efa:	bd70      	popgt	{r4, r5, r6, pc}
     efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     f00:	f04f 0e00 	mov.w	lr, #0
     f04:	3c01      	subs	r4, #1
     f06:	e690      	b.n	c2a <__aeabi_dmul+0xde>
     f08:	ea45 0e06 	orr.w	lr, r5, r6
     f0c:	e68d      	b.n	c2a <__aeabi_dmul+0xde>
     f0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     f12:	ea94 0f0c 	teq	r4, ip
     f16:	bf08      	it	eq
     f18:	ea95 0f0c 	teqeq	r5, ip
     f1c:	f43f af3b 	beq.w	d96 <__aeabi_dmul+0x24a>
     f20:	ea94 0f0c 	teq	r4, ip
     f24:	d10a      	bne.n	f3c <__aeabi_ddiv+0x19c>
     f26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     f2a:	f47f af34 	bne.w	d96 <__aeabi_dmul+0x24a>
     f2e:	ea95 0f0c 	teq	r5, ip
     f32:	f47f af25 	bne.w	d80 <__aeabi_dmul+0x234>
     f36:	4610      	mov	r0, r2
     f38:	4619      	mov	r1, r3
     f3a:	e72c      	b.n	d96 <__aeabi_dmul+0x24a>
     f3c:	ea95 0f0c 	teq	r5, ip
     f40:	d106      	bne.n	f50 <__aeabi_ddiv+0x1b0>
     f42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     f46:	f43f aefd 	beq.w	d44 <__aeabi_dmul+0x1f8>
     f4a:	4610      	mov	r0, r2
     f4c:	4619      	mov	r1, r3
     f4e:	e722      	b.n	d96 <__aeabi_dmul+0x24a>
     f50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     f54:	bf18      	it	ne
     f56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     f5a:	f47f aec5 	bne.w	ce8 <__aeabi_dmul+0x19c>
     f5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     f62:	f47f af0d 	bne.w	d80 <__aeabi_dmul+0x234>
     f66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     f6a:	f47f aeeb 	bne.w	d44 <__aeabi_dmul+0x1f8>
     f6e:	e712      	b.n	d96 <__aeabi_dmul+0x24a>

00000f70 <__gedf2>:
     f70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     f74:	e006      	b.n	f84 <__cmpdf2+0x4>
     f76:	bf00      	nop

00000f78 <__ledf2>:
     f78:	f04f 0c01 	mov.w	ip, #1
     f7c:	e002      	b.n	f84 <__cmpdf2+0x4>
     f7e:	bf00      	nop

00000f80 <__cmpdf2>:
     f80:	f04f 0c01 	mov.w	ip, #1
     f84:	f84d cd04 	str.w	ip, [sp, #-4]!
     f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     f90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     f94:	bf18      	it	ne
     f96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     f9a:	d01b      	beq.n	fd4 <__cmpdf2+0x54>
     f9c:	b001      	add	sp, #4
     f9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     fa2:	bf0c      	ite	eq
     fa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     fa8:	ea91 0f03 	teqne	r1, r3
     fac:	bf02      	ittt	eq
     fae:	ea90 0f02 	teqeq	r0, r2
     fb2:	2000      	moveq	r0, #0
     fb4:	4770      	bxeq	lr
     fb6:	f110 0f00 	cmn.w	r0, #0
     fba:	ea91 0f03 	teq	r1, r3
     fbe:	bf58      	it	pl
     fc0:	4299      	cmppl	r1, r3
     fc2:	bf08      	it	eq
     fc4:	4290      	cmpeq	r0, r2
     fc6:	bf2c      	ite	cs
     fc8:	17d8      	asrcs	r0, r3, #31
     fca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     fce:	f040 0001 	orr.w	r0, r0, #1
     fd2:	4770      	bx	lr
     fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fdc:	d102      	bne.n	fe4 <__cmpdf2+0x64>
     fde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     fe2:	d107      	bne.n	ff4 <__cmpdf2+0x74>
     fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fec:	d1d6      	bne.n	f9c <__cmpdf2+0x1c>
     fee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     ff2:	d0d3      	beq.n	f9c <__cmpdf2+0x1c>
     ff4:	f85d 0b04 	ldr.w	r0, [sp], #4
     ff8:	4770      	bx	lr
     ffa:	bf00      	nop

00000ffc <__aeabi_cdrcmple>:
     ffc:	4684      	mov	ip, r0
     ffe:	4610      	mov	r0, r2
    1000:	4662      	mov	r2, ip
    1002:	468c      	mov	ip, r1
    1004:	4619      	mov	r1, r3
    1006:	4663      	mov	r3, ip
    1008:	e000      	b.n	100c <__aeabi_cdcmpeq>
    100a:	bf00      	nop

0000100c <__aeabi_cdcmpeq>:
    100c:	b501      	push	{r0, lr}
    100e:	f7ff ffb7 	bl	f80 <__cmpdf2>
    1012:	2800      	cmp	r0, #0
    1014:	bf48      	it	mi
    1016:	f110 0f00 	cmnmi.w	r0, #0
    101a:	bd01      	pop	{r0, pc}

0000101c <__aeabi_dcmpeq>:
    101c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1020:	f7ff fff4 	bl	100c <__aeabi_cdcmpeq>
    1024:	bf0c      	ite	eq
    1026:	2001      	moveq	r0, #1
    1028:	2000      	movne	r0, #0
    102a:	f85d fb08 	ldr.w	pc, [sp], #8
    102e:	bf00      	nop

00001030 <__aeabi_dcmplt>:
    1030:	f84d ed08 	str.w	lr, [sp, #-8]!
    1034:	f7ff ffea 	bl	100c <__aeabi_cdcmpeq>
    1038:	bf34      	ite	cc
    103a:	2001      	movcc	r0, #1
    103c:	2000      	movcs	r0, #0
    103e:	f85d fb08 	ldr.w	pc, [sp], #8
    1042:	bf00      	nop

00001044 <__aeabi_dcmple>:
    1044:	f84d ed08 	str.w	lr, [sp, #-8]!
    1048:	f7ff ffe0 	bl	100c <__aeabi_cdcmpeq>
    104c:	bf94      	ite	ls
    104e:	2001      	movls	r0, #1
    1050:	2000      	movhi	r0, #0
    1052:	f85d fb08 	ldr.w	pc, [sp], #8
    1056:	bf00      	nop

00001058 <__aeabi_dcmpge>:
    1058:	f84d ed08 	str.w	lr, [sp, #-8]!
    105c:	f7ff ffce 	bl	ffc <__aeabi_cdrcmple>
    1060:	bf94      	ite	ls
    1062:	2001      	movls	r0, #1
    1064:	2000      	movhi	r0, #0
    1066:	f85d fb08 	ldr.w	pc, [sp], #8
    106a:	bf00      	nop

0000106c <__aeabi_dcmpgt>:
    106c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1070:	f7ff ffc4 	bl	ffc <__aeabi_cdrcmple>
    1074:	bf34      	ite	cc
    1076:	2001      	movcc	r0, #1
    1078:	2000      	movcs	r0, #0
    107a:	f85d fb08 	ldr.w	pc, [sp], #8
    107e:	bf00      	nop

00001080 <__aeabi_dcmpun>:
    1080:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1088:	d102      	bne.n	1090 <__aeabi_dcmpun+0x10>
    108a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    108e:	d10a      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    1090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1098:	d102      	bne.n	10a0 <__aeabi_dcmpun+0x20>
    109a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    109e:	d102      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    10a0:	f04f 0000 	mov.w	r0, #0
    10a4:	4770      	bx	lr
    10a6:	f04f 0001 	mov.w	r0, #1
    10aa:	4770      	bx	lr

000010ac <__aeabi_d2iz>:
    10ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
    10b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    10b4:	d215      	bcs.n	10e2 <__aeabi_d2iz+0x36>
    10b6:	d511      	bpl.n	10dc <__aeabi_d2iz+0x30>
    10b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    10bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    10c0:	d912      	bls.n	10e8 <__aeabi_d2iz+0x3c>
    10c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    10c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    10ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    10d2:	fa23 f002 	lsr.w	r0, r3, r2
    10d6:	bf18      	it	ne
    10d8:	4240      	negne	r0, r0
    10da:	4770      	bx	lr
    10dc:	f04f 0000 	mov.w	r0, #0
    10e0:	4770      	bx	lr
    10e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    10e6:	d105      	bne.n	10f4 <__aeabi_d2iz+0x48>
    10e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    10ec:	bf08      	it	eq
    10ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10f2:	4770      	bx	lr
    10f4:	f04f 0000 	mov.w	r0, #0
    10f8:	4770      	bx	lr
    10fa:	bf00      	nop

000010fc <__aeabi_uldivmod>:
    10fc:	b953      	cbnz	r3, 1114 <__aeabi_uldivmod+0x18>
    10fe:	b94a      	cbnz	r2, 1114 <__aeabi_uldivmod+0x18>
    1100:	2900      	cmp	r1, #0
    1102:	bf08      	it	eq
    1104:	2800      	cmpeq	r0, #0
    1106:	bf1c      	itt	ne
    1108:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    110c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1110:	f000 b98e 	b.w	1430 <__aeabi_idiv0>
    1114:	f1ad 0c08 	sub.w	ip, sp, #8
    1118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    111c:	f000 f81a 	bl	1154 <__udivmoddi4>
    1120:	f8dd e004 	ldr.w	lr, [sp, #4]
    1124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1128:	b004      	add	sp, #16
    112a:	4770      	bx	lr

0000112c <__popcountsi2>:
    112c:	0843      	lsrs	r3, r0, #1
    112e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    1132:	1ac0      	subs	r0, r0, r3
    1134:	0883      	lsrs	r3, r0, #2
    1136:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
    113a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    113e:	4418      	add	r0, r3
    1140:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    1144:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    1148:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    114c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
    1150:	0e00      	lsrs	r0, r0, #24
    1152:	4770      	bx	lr

00001154 <__udivmoddi4>:
    1154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1158:	468c      	mov	ip, r1
    115a:	460d      	mov	r5, r1
    115c:	4604      	mov	r4, r0
    115e:	9e08      	ldr	r6, [sp, #32]
    1160:	2b00      	cmp	r3, #0
    1162:	d151      	bne.n	1208 <__udivmoddi4+0xb4>
    1164:	428a      	cmp	r2, r1
    1166:	4617      	mov	r7, r2
    1168:	d96d      	bls.n	1246 <__udivmoddi4+0xf2>
    116a:	fab2 fe82 	clz	lr, r2
    116e:	f1be 0f00 	cmp.w	lr, #0
    1172:	d00b      	beq.n	118c <__udivmoddi4+0x38>
    1174:	f1ce 0c20 	rsb	ip, lr, #32
    1178:	fa01 f50e 	lsl.w	r5, r1, lr
    117c:	fa20 fc0c 	lsr.w	ip, r0, ip
    1180:	fa02 f70e 	lsl.w	r7, r2, lr
    1184:	ea4c 0c05 	orr.w	ip, ip, r5
    1188:	fa00 f40e 	lsl.w	r4, r0, lr
    118c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    1190:	0c25      	lsrs	r5, r4, #16
    1192:	fbbc f8fa 	udiv	r8, ip, sl
    1196:	fa1f f987 	uxth.w	r9, r7
    119a:	fb0a cc18 	mls	ip, sl, r8, ip
    119e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    11a2:	fb08 f309 	mul.w	r3, r8, r9
    11a6:	42ab      	cmp	r3, r5
    11a8:	d90a      	bls.n	11c0 <__udivmoddi4+0x6c>
    11aa:	19ed      	adds	r5, r5, r7
    11ac:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    11b0:	f080 8123 	bcs.w	13fa <__udivmoddi4+0x2a6>
    11b4:	42ab      	cmp	r3, r5
    11b6:	f240 8120 	bls.w	13fa <__udivmoddi4+0x2a6>
    11ba:	f1a8 0802 	sub.w	r8, r8, #2
    11be:	443d      	add	r5, r7
    11c0:	1aed      	subs	r5, r5, r3
    11c2:	b2a4      	uxth	r4, r4
    11c4:	fbb5 f0fa 	udiv	r0, r5, sl
    11c8:	fb0a 5510 	mls	r5, sl, r0, r5
    11cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    11d0:	fb00 f909 	mul.w	r9, r0, r9
    11d4:	45a1      	cmp	r9, r4
    11d6:	d909      	bls.n	11ec <__udivmoddi4+0x98>
    11d8:	19e4      	adds	r4, r4, r7
    11da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    11de:	f080 810a 	bcs.w	13f6 <__udivmoddi4+0x2a2>
    11e2:	45a1      	cmp	r9, r4
    11e4:	f240 8107 	bls.w	13f6 <__udivmoddi4+0x2a2>
    11e8:	3802      	subs	r0, #2
    11ea:	443c      	add	r4, r7
    11ec:	eba4 0409 	sub.w	r4, r4, r9
    11f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    11f4:	2100      	movs	r1, #0
    11f6:	2e00      	cmp	r6, #0
    11f8:	d061      	beq.n	12be <__udivmoddi4+0x16a>
    11fa:	fa24 f40e 	lsr.w	r4, r4, lr
    11fe:	2300      	movs	r3, #0
    1200:	6034      	str	r4, [r6, #0]
    1202:	6073      	str	r3, [r6, #4]
    1204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1208:	428b      	cmp	r3, r1
    120a:	d907      	bls.n	121c <__udivmoddi4+0xc8>
    120c:	2e00      	cmp	r6, #0
    120e:	d054      	beq.n	12ba <__udivmoddi4+0x166>
    1210:	2100      	movs	r1, #0
    1212:	e886 0021 	stmia.w	r6, {r0, r5}
    1216:	4608      	mov	r0, r1
    1218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    121c:	fab3 f183 	clz	r1, r3
    1220:	2900      	cmp	r1, #0
    1222:	f040 808e 	bne.w	1342 <__udivmoddi4+0x1ee>
    1226:	42ab      	cmp	r3, r5
    1228:	d302      	bcc.n	1230 <__udivmoddi4+0xdc>
    122a:	4282      	cmp	r2, r0
    122c:	f200 80fa 	bhi.w	1424 <__udivmoddi4+0x2d0>
    1230:	1a84      	subs	r4, r0, r2
    1232:	eb65 0503 	sbc.w	r5, r5, r3
    1236:	2001      	movs	r0, #1
    1238:	46ac      	mov	ip, r5
    123a:	2e00      	cmp	r6, #0
    123c:	d03f      	beq.n	12be <__udivmoddi4+0x16a>
    123e:	e886 1010 	stmia.w	r6, {r4, ip}
    1242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1246:	b912      	cbnz	r2, 124e <__udivmoddi4+0xfa>
    1248:	2701      	movs	r7, #1
    124a:	fbb7 f7f2 	udiv	r7, r7, r2
    124e:	fab7 fe87 	clz	lr, r7
    1252:	f1be 0f00 	cmp.w	lr, #0
    1256:	d134      	bne.n	12c2 <__udivmoddi4+0x16e>
    1258:	1beb      	subs	r3, r5, r7
    125a:	0c3a      	lsrs	r2, r7, #16
    125c:	fa1f fc87 	uxth.w	ip, r7
    1260:	2101      	movs	r1, #1
    1262:	fbb3 f8f2 	udiv	r8, r3, r2
    1266:	0c25      	lsrs	r5, r4, #16
    1268:	fb02 3318 	mls	r3, r2, r8, r3
    126c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1270:	fb0c f308 	mul.w	r3, ip, r8
    1274:	42ab      	cmp	r3, r5
    1276:	d907      	bls.n	1288 <__udivmoddi4+0x134>
    1278:	19ed      	adds	r5, r5, r7
    127a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    127e:	d202      	bcs.n	1286 <__udivmoddi4+0x132>
    1280:	42ab      	cmp	r3, r5
    1282:	f200 80d1 	bhi.w	1428 <__udivmoddi4+0x2d4>
    1286:	4680      	mov	r8, r0
    1288:	1aed      	subs	r5, r5, r3
    128a:	b2a3      	uxth	r3, r4
    128c:	fbb5 f0f2 	udiv	r0, r5, r2
    1290:	fb02 5510 	mls	r5, r2, r0, r5
    1294:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1298:	fb0c fc00 	mul.w	ip, ip, r0
    129c:	45a4      	cmp	ip, r4
    129e:	d907      	bls.n	12b0 <__udivmoddi4+0x15c>
    12a0:	19e4      	adds	r4, r4, r7
    12a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    12a6:	d202      	bcs.n	12ae <__udivmoddi4+0x15a>
    12a8:	45a4      	cmp	ip, r4
    12aa:	f200 80b8 	bhi.w	141e <__udivmoddi4+0x2ca>
    12ae:	4618      	mov	r0, r3
    12b0:	eba4 040c 	sub.w	r4, r4, ip
    12b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    12b8:	e79d      	b.n	11f6 <__udivmoddi4+0xa2>
    12ba:	4631      	mov	r1, r6
    12bc:	4630      	mov	r0, r6
    12be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12c2:	f1ce 0420 	rsb	r4, lr, #32
    12c6:	fa05 f30e 	lsl.w	r3, r5, lr
    12ca:	fa07 f70e 	lsl.w	r7, r7, lr
    12ce:	fa20 f804 	lsr.w	r8, r0, r4
    12d2:	0c3a      	lsrs	r2, r7, #16
    12d4:	fa25 f404 	lsr.w	r4, r5, r4
    12d8:	ea48 0803 	orr.w	r8, r8, r3
    12dc:	fbb4 f1f2 	udiv	r1, r4, r2
    12e0:	ea4f 4518 	mov.w	r5, r8, lsr #16
    12e4:	fb02 4411 	mls	r4, r2, r1, r4
    12e8:	fa1f fc87 	uxth.w	ip, r7
    12ec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    12f0:	fb01 f30c 	mul.w	r3, r1, ip
    12f4:	42ab      	cmp	r3, r5
    12f6:	fa00 f40e 	lsl.w	r4, r0, lr
    12fa:	d909      	bls.n	1310 <__udivmoddi4+0x1bc>
    12fc:	19ed      	adds	r5, r5, r7
    12fe:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
    1302:	f080 808a 	bcs.w	141a <__udivmoddi4+0x2c6>
    1306:	42ab      	cmp	r3, r5
    1308:	f240 8087 	bls.w	141a <__udivmoddi4+0x2c6>
    130c:	3902      	subs	r1, #2
    130e:	443d      	add	r5, r7
    1310:	1aeb      	subs	r3, r5, r3
    1312:	fa1f f588 	uxth.w	r5, r8
    1316:	fbb3 f0f2 	udiv	r0, r3, r2
    131a:	fb02 3310 	mls	r3, r2, r0, r3
    131e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1322:	fb00 f30c 	mul.w	r3, r0, ip
    1326:	42ab      	cmp	r3, r5
    1328:	d907      	bls.n	133a <__udivmoddi4+0x1e6>
    132a:	19ed      	adds	r5, r5, r7
    132c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    1330:	d26f      	bcs.n	1412 <__udivmoddi4+0x2be>
    1332:	42ab      	cmp	r3, r5
    1334:	d96d      	bls.n	1412 <__udivmoddi4+0x2be>
    1336:	3802      	subs	r0, #2
    1338:	443d      	add	r5, r7
    133a:	1aeb      	subs	r3, r5, r3
    133c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1340:	e78f      	b.n	1262 <__udivmoddi4+0x10e>
    1342:	f1c1 0720 	rsb	r7, r1, #32
    1346:	fa22 f807 	lsr.w	r8, r2, r7
    134a:	408b      	lsls	r3, r1
    134c:	fa05 f401 	lsl.w	r4, r5, r1
    1350:	ea48 0303 	orr.w	r3, r8, r3
    1354:	fa20 fe07 	lsr.w	lr, r0, r7
    1358:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    135c:	40fd      	lsrs	r5, r7
    135e:	ea4e 0e04 	orr.w	lr, lr, r4
    1362:	fbb5 f9fc 	udiv	r9, r5, ip
    1366:	ea4f 441e 	mov.w	r4, lr, lsr #16
    136a:	fb0c 5519 	mls	r5, ip, r9, r5
    136e:	fa1f f883 	uxth.w	r8, r3
    1372:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1376:	fb09 f408 	mul.w	r4, r9, r8
    137a:	42ac      	cmp	r4, r5
    137c:	fa02 f201 	lsl.w	r2, r2, r1
    1380:	fa00 fa01 	lsl.w	sl, r0, r1
    1384:	d908      	bls.n	1398 <__udivmoddi4+0x244>
    1386:	18ed      	adds	r5, r5, r3
    1388:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    138c:	d243      	bcs.n	1416 <__udivmoddi4+0x2c2>
    138e:	42ac      	cmp	r4, r5
    1390:	d941      	bls.n	1416 <__udivmoddi4+0x2c2>
    1392:	f1a9 0902 	sub.w	r9, r9, #2
    1396:	441d      	add	r5, r3
    1398:	1b2d      	subs	r5, r5, r4
    139a:	fa1f fe8e 	uxth.w	lr, lr
    139e:	fbb5 f0fc 	udiv	r0, r5, ip
    13a2:	fb0c 5510 	mls	r5, ip, r0, r5
    13a6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    13aa:	fb00 f808 	mul.w	r8, r0, r8
    13ae:	45a0      	cmp	r8, r4
    13b0:	d907      	bls.n	13c2 <__udivmoddi4+0x26e>
    13b2:	18e4      	adds	r4, r4, r3
    13b4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    13b8:	d229      	bcs.n	140e <__udivmoddi4+0x2ba>
    13ba:	45a0      	cmp	r8, r4
    13bc:	d927      	bls.n	140e <__udivmoddi4+0x2ba>
    13be:	3802      	subs	r0, #2
    13c0:	441c      	add	r4, r3
    13c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    13c6:	eba4 0408 	sub.w	r4, r4, r8
    13ca:	fba0 8902 	umull	r8, r9, r0, r2
    13ce:	454c      	cmp	r4, r9
    13d0:	46c6      	mov	lr, r8
    13d2:	464d      	mov	r5, r9
    13d4:	d315      	bcc.n	1402 <__udivmoddi4+0x2ae>
    13d6:	d012      	beq.n	13fe <__udivmoddi4+0x2aa>
    13d8:	b156      	cbz	r6, 13f0 <__udivmoddi4+0x29c>
    13da:	ebba 030e 	subs.w	r3, sl, lr
    13de:	eb64 0405 	sbc.w	r4, r4, r5
    13e2:	fa04 f707 	lsl.w	r7, r4, r7
    13e6:	40cb      	lsrs	r3, r1
    13e8:	431f      	orrs	r7, r3
    13ea:	40cc      	lsrs	r4, r1
    13ec:	6037      	str	r7, [r6, #0]
    13ee:	6074      	str	r4, [r6, #4]
    13f0:	2100      	movs	r1, #0
    13f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13f6:	4618      	mov	r0, r3
    13f8:	e6f8      	b.n	11ec <__udivmoddi4+0x98>
    13fa:	4690      	mov	r8, r2
    13fc:	e6e0      	b.n	11c0 <__udivmoddi4+0x6c>
    13fe:	45c2      	cmp	sl, r8
    1400:	d2ea      	bcs.n	13d8 <__udivmoddi4+0x284>
    1402:	ebb8 0e02 	subs.w	lr, r8, r2
    1406:	eb69 0503 	sbc.w	r5, r9, r3
    140a:	3801      	subs	r0, #1
    140c:	e7e4      	b.n	13d8 <__udivmoddi4+0x284>
    140e:	4628      	mov	r0, r5
    1410:	e7d7      	b.n	13c2 <__udivmoddi4+0x26e>
    1412:	4640      	mov	r0, r8
    1414:	e791      	b.n	133a <__udivmoddi4+0x1e6>
    1416:	4681      	mov	r9, r0
    1418:	e7be      	b.n	1398 <__udivmoddi4+0x244>
    141a:	4601      	mov	r1, r0
    141c:	e778      	b.n	1310 <__udivmoddi4+0x1bc>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e745      	b.n	12b0 <__udivmoddi4+0x15c>
    1424:	4608      	mov	r0, r1
    1426:	e708      	b.n	123a <__udivmoddi4+0xe6>
    1428:	f1a8 0802 	sub.w	r8, r8, #2
    142c:	443d      	add	r5, r7
    142e:	e72b      	b.n	1288 <__udivmoddi4+0x134>

00001430 <__aeabi_idiv0>:
    1430:	4770      	bx	lr
    1432:	bf00      	nop

00001434 <publish_cb>:
 * unknown pkt_id, this routine must return an error, for example -EINVAL or
 * any negative value.
 */
static int publish_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_id,
		      enum mqtt_packet type)
{
    1434:	b530      	push	{r4, r5, lr}
    1436:	b083      	sub	sp, #12
    1438:	4605      	mov	r5, r0
	const char *str;
	int rc = 0;

	client_ctx = CONTAINER_OF(mqtt_ctx, struct mqtt_client_ctx, mqtt_ctx);

	switch (type) {
    143a:	2a05      	cmp	r2, #5
    143c:	d01b      	beq.n	1476 <publish_cb+0x42>
    143e:	2a07      	cmp	r2, #7
    1440:	d01c      	beq.n	147c <publish_cb+0x48>
    1442:	2a04      	cmp	r2, #4
    1444:	d003      	beq.n	144e <publish_cb+0x1a>
		break;
	case MQTT_PUBREC:
		str = "MQTT_PUBREC";
		break;
	default:
		rc = -EINVAL;
    1446:	f06f 0415 	mvn.w	r4, #21
		str = "Invalid MQTT packet";
    144a:	4b0e      	ldr	r3, [pc, #56]	; (1484 <publish_cb+0x50>)
    144c:	e001      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    144e:	2400      	movs	r4, #0
		str = "MQTT_PUBACK";
    1450:	4b0d      	ldr	r3, [pc, #52]	; (1488 <publish_cb+0x54>)
	}

	printk("[%s:%d] <%s> packet id: %u", __func__, __LINE__, str, pkt_id);
    1452:	9100      	str	r1, [sp, #0]
    1454:	22ed      	movs	r2, #237	; 0xed
    1456:	490d      	ldr	r1, [pc, #52]	; (148c <publish_cb+0x58>)
    1458:	480d      	ldr	r0, [pc, #52]	; (1490 <publish_cb+0x5c>)
    145a:	f001 fd7b 	bl	2f54 <printk>

	if (client_ctx->publish_data) {
    145e:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
    1462:	b111      	cbz	r1, 146a <publish_cb+0x36>
		printk(", user_data: %s",
    1464:	480b      	ldr	r0, [pc, #44]	; (1494 <publish_cb+0x60>)
    1466:	f001 fd75 	bl	2f54 <printk>
		       (const char *)client_ctx->publish_data);
	}

	printk("\n");
    146a:	480b      	ldr	r0, [pc, #44]	; (1498 <publish_cb+0x64>)
    146c:	f001 fd72 	bl	2f54 <printk>

	return rc;
}
    1470:	4620      	mov	r0, r4
    1472:	b003      	add	sp, #12
    1474:	bd30      	pop	{r4, r5, pc}
	int rc = 0;
    1476:	2400      	movs	r4, #0
		str = "MQTT_PUBREC";
    1478:	4b08      	ldr	r3, [pc, #32]	; (149c <publish_cb+0x68>)
		break;
    147a:	e7ea      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    147c:	2400      	movs	r4, #0
		str = "MQTT_PUBCOMP";
    147e:	4b08      	ldr	r3, [pc, #32]	; (14a0 <publish_cb+0x6c>)
    1480:	e7e7      	b.n	1452 <publish_cb+0x1e>
    1482:	bf00      	nop
    1484:	0002e7e0 	.word	0x0002e7e0
    1488:	0002e7b8 	.word	0x0002e7b8
    148c:	0002e738 	.word	0x0002e738
    1490:	0002e7f4 	.word	0x0002e7f4
    1494:	0002e810 	.word	0x0002e810
    1498:	000322f0 	.word	0x000322f0
    149c:	0002e7d4 	.word	0x0002e7d4
    14a0:	0002e7c4 	.word	0x0002e7c4

000014a4 <malformed_cb>:
/**
 * The signature of this routine must match the malformed callback declared at
 * the mqtt.h header.
 */
static void malformed_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_type)
{
    14a4:	b508      	push	{r3, lr}
	printk("[%s:%d] pkt_type: %u\n", __func__, __LINE__, pkt_type);
    14a6:	460b      	mov	r3, r1
    14a8:	22ff      	movs	r2, #255	; 0xff
    14aa:	4902      	ldr	r1, [pc, #8]	; (14b4 <malformed_cb+0x10>)
    14ac:	4802      	ldr	r0, [pc, #8]	; (14b8 <malformed_cb+0x14>)
    14ae:	f001 fd51 	bl	2f54 <printk>
    14b2:	bd08      	pop	{r3, pc}
    14b4:	0002e744 	.word	0x0002e744
    14b8:	0002e78c 	.word	0x0002e78c

000014bc <disconnect_cb>:
{
    14bc:	b510      	push	{r4, lr}
    14be:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    14c0:	22be      	movs	r2, #190	; 0xbe
    14c2:	4907      	ldr	r1, [pc, #28]	; (14e0 <disconnect_cb+0x24>)
    14c4:	4807      	ldr	r0, [pc, #28]	; (14e4 <disconnect_cb+0x28>)
    14c6:	f001 fd45 	bl	2f54 <printk>
	if (client_ctx->disconnect_data) {
    14ca:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    14ce:	b111      	cbz	r1, 14d6 <disconnect_cb+0x1a>
		printk(" user_data: %s",
    14d0:	4805      	ldr	r0, [pc, #20]	; (14e8 <disconnect_cb+0x2c>)
    14d2:	f001 fd3f 	bl	2f54 <printk>
	printk("\n");
    14d6:	4805      	ldr	r0, [pc, #20]	; (14ec <disconnect_cb+0x30>)
    14d8:	f001 fd3c 	bl	2f54 <printk>
    14dc:	bd10      	pop	{r4, pc}
    14de:	bf00      	nop
    14e0:	0002e728 	.word	0x0002e728
    14e4:	0002e768 	.word	0x0002e768
    14e8:	0002e770 	.word	0x0002e770
    14ec:	000322f0 	.word	0x000322f0

000014f0 <connect_cb>:
{
    14f0:	b510      	push	{r4, lr}
    14f2:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    14f4:	22ab      	movs	r2, #171	; 0xab
    14f6:	4907      	ldr	r1, [pc, #28]	; (1514 <connect_cb+0x24>)
    14f8:	4807      	ldr	r0, [pc, #28]	; (1518 <connect_cb+0x28>)
    14fa:	f001 fd2b 	bl	2f54 <printk>
	if (client_ctx->connect_data) {
    14fe:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    1502:	b111      	cbz	r1, 150a <connect_cb+0x1a>
		printk(" user_data: %s",
    1504:	4805      	ldr	r0, [pc, #20]	; (151c <connect_cb+0x2c>)
    1506:	f001 fd25 	bl	2f54 <printk>
	printk("\n");
    150a:	4805      	ldr	r0, [pc, #20]	; (1520 <connect_cb+0x30>)
    150c:	f001 fd22 	bl	2f54 <printk>
    1510:	bd10      	pop	{r4, pc}
    1512:	bf00      	nop
    1514:	0002e71c 	.word	0x0002e71c
    1518:	0002e768 	.word	0x0002e768
    151c:	0002e770 	.word	0x0002e770
    1520:	000322f0 	.word	0x000322f0

00001524 <rand_string>:
{
    1524:	b570      	push	{r4, r5, r6, lr}
    1526:	b092      	sub	sp, #72	; 0x48
    1528:	4606      	mov	r6, r0
    152a:	460d      	mov	r5, r1
    const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,.-#'?!";
    152c:	2246      	movs	r2, #70	; 0x46
    152e:	4911      	ldr	r1, [pc, #68]	; (1574 <rand_string+0x50>)
    1530:	4668      	mov	r0, sp
    1532:	f7fe fec5 	bl	2c0 <memcpy>
    if (size) {
    1536:	b1cd      	cbz	r5, 156c <rand_string+0x48>
        --size;
    1538:	3d01      	subs	r5, #1
        for (size_t n = 0; n < size; n++) {
    153a:	2400      	movs	r4, #0
    153c:	e012      	b.n	1564 <rand_string+0x40>
            int key = rand() % (int) (sizeof charset - 1);
    153e:	f029 fa15 	bl	2a96c <rand>
    1542:	4a0d      	ldr	r2, [pc, #52]	; (1578 <rand_string+0x54>)
    1544:	fb82 3200 	smull	r3, r2, r2, r0
    1548:	17c3      	asrs	r3, r0, #31
    154a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
    154e:	eb03 1203 	add.w	r2, r3, r3, lsl #4
    1552:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1556:	1ac3      	subs	r3, r0, r3
            str[n] = charset[key];
    1558:	aa12      	add	r2, sp, #72	; 0x48
    155a:	4413      	add	r3, r2
    155c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
    1560:	5533      	strb	r3, [r6, r4]
        for (size_t n = 0; n < size; n++) {
    1562:	3401      	adds	r4, #1
    1564:	42ac      	cmp	r4, r5
    1566:	d3ea      	bcc.n	153e <rand_string+0x1a>
        str[size] = '\0';
    1568:	2300      	movs	r3, #0
    156a:	5573      	strb	r3, [r6, r5]
}
    156c:	4630      	mov	r0, r6
    156e:	b012      	add	sp, #72	; 0x48
    1570:	bd70      	pop	{r4, r5, r6, pc}
    1572:	bf00      	nop
    1574:	0002e914 	.word	0x0002e914
    1578:	76b981db 	.word	0x76b981db

0000157c <encrypt_aes_ctr>:
static void encrypt_aes_ctr() {
    157c:	b510      	push	{r4, lr}
    157e:	b0d0      	sub	sp, #320	; 0x140
    size_t nc_offset = 0;
    1580:	2300      	movs	r3, #0
    1582:	934f      	str	r3, [sp, #316]	; 0x13c
    rand_string(nonce_counter, sizeof(nonce_counter));
    1584:	4c14      	ldr	r4, [pc, #80]	; (15d8 <encrypt_aes_ctr+0x5c>)
    1586:	2110      	movs	r1, #16
    1588:	4620      	mov	r0, r4
    158a:	f7ff ffcb 	bl	1524 <rand_string>
    printk("\nnonce:%s\n", nonce_counter);
    158e:	4621      	mov	r1, r4
    1590:	4812      	ldr	r0, [pc, #72]	; (15dc <encrypt_aes_ctr+0x60>)
    1592:	f001 fcdf 	bl	2f54 <printk>
    mbedtls_aes_init( &ctr );
    1596:	a805      	add	r0, sp, #20
    1598:	f002 fadb 	bl	3b52 <mbedtls_aes_init>
	mbedtls_aes_setkey_enc( &ctr, keys[2], 256 );
    159c:	f44f 7280 	mov.w	r2, #256	; 0x100
    15a0:	4b0f      	ldr	r3, [pc, #60]	; (15e0 <encrypt_aes_ctr+0x64>)
    15a2:	6899      	ldr	r1, [r3, #8]
    15a4:	a805      	add	r0, sp, #20
    15a6:	f002 fae3 	bl	3b70 <mbedtls_aes_setkey_enc>
	mbedtls_aes_crypt_ctr( &ctr, BUFSIZE, &nc_offset, nonce_counter, stream_block, curr_msg, encrypted_msg );
    15aa:	4b0e      	ldr	r3, [pc, #56]	; (15e4 <encrypt_aes_ctr+0x68>)
    15ac:	9302      	str	r3, [sp, #8]
    15ae:	4b0e      	ldr	r3, [pc, #56]	; (15e8 <encrypt_aes_ctr+0x6c>)
    15b0:	9301      	str	r3, [sp, #4]
    15b2:	ab4b      	add	r3, sp, #300	; 0x12c
    15b4:	9300      	str	r3, [sp, #0]
    15b6:	4623      	mov	r3, r4
    15b8:	aa4f      	add	r2, sp, #316	; 0x13c
    15ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    15be:	a805      	add	r0, sp, #20
    15c0:	f002 ff88 	bl	44d4 <mbedtls_aes_crypt_ctr>
	mbedtls_aes_free( &ctr );
    15c4:	a805      	add	r0, sp, #20
    15c6:	f002 facb 	bl	3b60 <mbedtls_aes_free>
    memset(nonce_counter, "", sizeof(nonce_counter));
    15ca:	2210      	movs	r2, #16
    15cc:	4907      	ldr	r1, [pc, #28]	; (15ec <encrypt_aes_ctr+0x70>)
    15ce:	4620      	mov	r0, r4
    15d0:	f029 f972 	bl	2a8b8 <memset>
}
    15d4:	b050      	add	sp, #320	; 0x140
    15d6:	bd10      	pop	{r4, pc}
    15d8:	200005a0 	.word	0x200005a0
    15dc:	0002e780 	.word	0x0002e780
    15e0:	2000be48 	.word	0x2000be48
    15e4:	2000040c 	.word	0x2000040c
    15e8:	2000000c 	.word	0x2000000c
    15ec:	0002f064 	.word	0x0002f064

000015f0 <get_message_payload>:
}

static char *get_message_payload(enum mqtt_qos qos) 
{
    15f0:	b510      	push	{r4, lr}
	static char payload[450];
	snprintf(payload, sizeof(payload), "%s\n", encrypted_msg);
    15f2:	4c07      	ldr	r4, [pc, #28]	; (1610 <get_message_payload+0x20>)
    15f4:	4b07      	ldr	r3, [pc, #28]	; (1614 <get_message_payload+0x24>)
    15f6:	4a08      	ldr	r2, [pc, #32]	; (1618 <get_message_payload+0x28>)
    15f8:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
    15fc:	4620      	mov	r0, r4
    15fe:	f029 f9e7 	bl	2a9d0 <snprintf>
	loop_count++;
    1602:	4a06      	ldr	r2, [pc, #24]	; (161c <get_message_payload+0x2c>)
    1604:	6813      	ldr	r3, [r2, #0]
    1606:	3301      	adds	r3, #1
    1608:	6013      	str	r3, [r2, #0]
	return payload;
}
    160a:	4620      	mov	r0, r4
    160c:	bd10      	pop	{r4, pc}
    160e:	bf00      	nop
    1610:	200005b0 	.word	0x200005b0
    1614:	2000040c 	.word	0x2000040c
    1618:	00031d98 	.word	0x00031d98
    161c:	2000be54 	.word	0x2000be54

00001620 <prepare_msg>:

static void prepare_msg(struct mqtt_publish_msg *pub_msg,
				     enum mqtt_qos qos)
{
    1620:	b538      	push	{r3, r4, r5, lr}
    1622:	4604      	mov	r4, r0
    1624:	460d      	mov	r5, r1
	/* MQTT message payload may be anything, we we use C strings */
	pub_msg->msg = get_message_payload(qos);
    1626:	4608      	mov	r0, r1
    1628:	f7ff ffe2 	bl	15f0 <get_message_payload>
    162c:	6120      	str	r0, [r4, #16]
	/* Payload's length */
	pub_msg->msg_len = strlen(pub_msg->msg);
    162e:	f7ff f867 	bl	700 <strlen>
    1632:	82a0      	strh	r0, [r4, #20]
	/* MQTT Quality of Service */
	pub_msg->qos = qos;
    1634:	7065      	strb	r5, [r4, #1]
	/* Message's topic */
	pub_msg->topic = TOPIC;
    1636:	4804      	ldr	r0, [pc, #16]	; (1648 <prepare_msg+0x28>)
    1638:	60a0      	str	r0, [r4, #8]
	pub_msg->topic_len = strlen(pub_msg->topic);
    163a:	f7ff f861 	bl	700 <strlen>
    163e:	81a0      	strh	r0, [r4, #12]
	/* Packet Identifier, always use different values */
	pub_msg->pkt_id = sys_rand32_get();
    1640:	f000 fcee 	bl	2020 <sys_rand32_get>
    1644:	80a0      	strh	r0, [r4, #4]
    1646:	bd38      	pop	{r3, r4, r5, pc}
    1648:	0002e7b0 	.word	0x0002e7b0

0000164c <message_thread>:
{
    164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    164e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1652:	f027 fd3f 	bl	290d4 <_impl_k_sleep>

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex);

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    1656:	4c16      	ldr	r4, [pc, #88]	; (16b0 <message_thread+0x64>)
    1658:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    165c:	4620      	mov	r0, r4
    165e:	f026 fe55 	bl	2830c <_impl_k_mutex_lock>
		memset( curr_msg, ++num, sizeof( curr_msg ) );
    1662:	4b14      	ldr	r3, [pc, #80]	; (16b4 <message_thread+0x68>)
    1664:	6819      	ldr	r1, [r3, #0]
    1666:	3101      	adds	r1, #1
    1668:	6019      	str	r1, [r3, #0]
    166a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    166e:	4812      	ldr	r0, [pc, #72]	; (16b8 <message_thread+0x6c>)
    1670:	f029 f922 	bl	2a8b8 <memset>
		encrypt_aes_ctr();
    1674:	f7ff ff82 	bl	157c <encrypt_aes_ctr>
		size_t msg_size = strlen(encrypted_msg);
    1678:	4d10      	ldr	r5, [pc, #64]	; (16bc <message_thread+0x70>)
    167a:	4628      	mov	r0, r5
    167c:	f7ff f840 	bl	700 <strlen>
		prepare_msg(&pub_ctx.pub_msg, MQTT_QoS0);
    1680:	4e0f      	ldr	r6, [pc, #60]	; (16c0 <message_thread+0x74>)
    1682:	f106 0730 	add.w	r7, r6, #48	; 0x30
    1686:	2100      	movs	r1, #0
    1688:	4638      	mov	r0, r7
    168a:	f7ff ffc9 	bl	1620 <prepare_msg>
	 	int rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
    168e:	4639      	mov	r1, r7
    1690:	f106 0048 	add.w	r0, r6, #72	; 0x48
    1694:	f024 fd08 	bl	260a8 <mqtt_tx_publish>
	 	printk("\nmsg:%s\n", encrypted_msg);
    1698:	4629      	mov	r1, r5
    169a:	480a      	ldr	r0, [pc, #40]	; (16c4 <message_thread+0x78>)
    169c:	f001 fc5a 	bl	2f54 <printk>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    16a0:	4620      	mov	r0, r4
    16a2:	f026 fe9d 	bl	283e0 <_impl_k_mutex_unlock>

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    16a6:	4808      	ldr	r0, [pc, #32]	; (16c8 <message_thread+0x7c>)
    16a8:	f027 fe53 	bl	29352 <_impl_k_sem_give>
    16ac:	e7cf      	b.n	164e <message_thread+0x2>
    16ae:	bf00      	nop
    16b0:	2000d6c4 	.word	0x2000d6c4
    16b4:	2000be58 	.word	0x2000be58
    16b8:	2000000c 	.word	0x2000000c
    16bc:	2000040c 	.word	0x2000040c
    16c0:	20000774 	.word	0x20000774
    16c4:	0002e7a4 	.word	0x0002e7a4
    16c8:	2000d650 	.word	0x2000d650

000016cc <publisher_thread>:

K_THREAD_STACK_DEFINE(pub_stack_area, PUB_STACK_SIZE);
struct k_thread pub_thread;

void publisher_thread(void * unused1, void * unused2, void * unused3)
{
    16cc:	b530      	push	{r4, r5, lr}
    16ce:	b083      	sub	sp, #12
	ARG_UNUSED(unused3);

	int i, rc;

	/* Set everything to 0 and later just assign the required fields. */
	memset(&pub_ctx, 0x00, sizeof(pub_ctx));
    16d0:	4c7c      	ldr	r4, [pc, #496]	; (18c4 <publisher_thread+0x1f8>)
    16d2:	f44f 7280 	mov.w	r2, #256	; 0x100
    16d6:	2100      	movs	r1, #0
    16d8:	4620      	mov	r0, r4
    16da:	f029 f8ed 	bl	2a8b8 <memset>

	/* connect, disconnect and malformed may be set to NULL */
	pub_ctx.mqtt_ctx.connect = connect_cb;
    16de:	4b7a      	ldr	r3, [pc, #488]	; (18c8 <publisher_thread+0x1fc>)
    16e0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	pub_ctx.mqtt_ctx.disconnect = disconnect_cb;
    16e4:	4b79      	ldr	r3, [pc, #484]	; (18cc <publisher_thread+0x200>)
    16e6:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	pub_ctx.mqtt_ctx.malformed = malformed_cb;
    16ea:	4b79      	ldr	r3, [pc, #484]	; (18d0 <publisher_thread+0x204>)
    16ec:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8

	pub_ctx.mqtt_ctx.net_init_timeout = APP_NET_INIT_TIMEOUT;
    16f0:	f242 7310 	movw	r3, #10000	; 0x2710
    16f4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	pub_ctx.mqtt_ctx.net_timeout = APP_TX_RX_TIMEOUT;
    16f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    16fc:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

	pub_ctx.mqtt_ctx.peer_addr_str = SERVER_ADDR;
    1700:	4b74      	ldr	r3, [pc, #464]	; (18d4 <publisher_thread+0x208>)
    1702:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	pub_ctx.mqtt_ctx.peer_port = SERVER_PORT;
    1706:	f240 735b 	movw	r3, #1883	; 0x75b
    170a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc

	/* Publisher apps TX the MQTT PUBLISH msg */
	pub_ctx.mqtt_ctx.publish_tx = publish_cb;
    170e:	4b72      	ldr	r3, [pc, #456]	; (18d8 <publisher_thread+0x20c>)
    1710:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	/* The connect message will be sent to the MQTT server (broker).
	 * If clean_session here is 0, the mqtt_ctx clean_session variable
	 * will be set to 0 also. Please don't do that, set always to 1.
	 * Clean session = 0 is not yet supported.
	 */
	pub_ctx.connect_msg.user_name = TB_ACCESS_TOKEN;
    1714:	4871      	ldr	r0, [pc, #452]	; (18dc <publisher_thread+0x210>)
    1716:	6220      	str	r0, [r4, #32]
	pub_ctx.connect_msg.user_name_len = strlen(TB_ACCESS_TOKEN);
    1718:	f7fe fff2 	bl	700 <strlen>
    171c:	84a0      	strh	r0, [r4, #36]	; 0x24
	pub_ctx.connect_msg.clean_session = 1;
    171e:	7823      	ldrb	r3, [r4, #0]
    1720:	f043 0301 	orr.w	r3, r3, #1
    1724:	7023      	strb	r3, [r4, #0]

	pub_ctx.connect_data = "CONNECTED";
    1726:	4b6e      	ldr	r3, [pc, #440]	; (18e0 <publisher_thread+0x214>)
    1728:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	pub_ctx.disconnect_data = "DISCONNECTED";
    172c:	4b6d      	ldr	r3, [pc, #436]	; (18e4 <publisher_thread+0x218>)
    172e:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	pub_ctx.publish_data = "PUBLISH";
    1732:	4b6d      	ldr	r3, [pc, #436]	; (18e8 <publisher_thread+0x21c>)
    1734:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc

	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    1738:	e0a0      	b.n	187c <publisher_thread+0x1b0>

		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
		PRINT_RESULT("mqtt_init", rc);
    173a:	4b6c      	ldr	r3, [pc, #432]	; (18ec <publisher_thread+0x220>)
    173c:	e0ad      	b.n	189a <publisher_thread+0x1ce>
		}

		i = 0;
		do {
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
			PRINT_RESULT("mqtt_connect", rc);
    173e:	4b6b      	ldr	r3, [pc, #428]	; (18ec <publisher_thread+0x220>)
    1740:	9301      	str	r3, [sp, #4]
    1742:	9400      	str	r4, [sp, #0]
    1744:	4b6a      	ldr	r3, [pc, #424]	; (18f0 <publisher_thread+0x224>)
    1746:	f240 1259 	movw	r2, #345	; 0x159
    174a:	496a      	ldr	r1, [pc, #424]	; (18f4 <publisher_thread+0x228>)
    174c:	486a      	ldr	r0, [pc, #424]	; (18f8 <publisher_thread+0x22c>)
    174e:	f001 fc01 	bl	2f54 <printk>
		} while (rc != 0 && i++ < APP_CONN_TRIES);
    1752:	b15c      	cbz	r4, 176c <publisher_thread+0xa0>
    1754:	1c6b      	adds	r3, r5, #1
    1756:	2d63      	cmp	r5, #99	; 0x63
    1758:	dc08      	bgt.n	176c <publisher_thread+0xa0>
    175a:	461d      	mov	r5, r3
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
    175c:	4867      	ldr	r0, [pc, #412]	; (18fc <publisher_thread+0x230>)
    175e:	f024 fde9 	bl	26334 <mqtt_connect>
			PRINT_RESULT("mqtt_connect", rc);
    1762:	4604      	mov	r4, r0
    1764:	2800      	cmp	r0, #0
    1766:	d1ea      	bne.n	173e <publisher_thread+0x72>
    1768:	4b65      	ldr	r3, [pc, #404]	; (1900 <publisher_thread+0x234>)
    176a:	e7e9      	b.n	1740 <publisher_thread+0x74>

		if (rc != 0) {
    176c:	b1cc      	cbz	r4, 17a2 <publisher_thread+0xd6>
    176e:	e0a0      	b.n	18b2 <publisher_thread+0x1e6>
		}

		i = 0;
		do {
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
			PRINT_RESULT("mqtt_tx_connect", rc);
    1770:	4b5e      	ldr	r3, [pc, #376]	; (18ec <publisher_thread+0x220>)
    1772:	9301      	str	r3, [sp, #4]
    1774:	9500      	str	r5, [sp, #0]
    1776:	4b63      	ldr	r3, [pc, #396]	; (1904 <publisher_thread+0x238>)
    1778:	f240 1263 	movw	r2, #355	; 0x163
    177c:	495d      	ldr	r1, [pc, #372]	; (18f4 <publisher_thread+0x228>)
    177e:	485e      	ldr	r0, [pc, #376]	; (18f8 <publisher_thread+0x22c>)
    1780:	f001 fbe8 	bl	2f54 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1788:	f027 fca4 	bl	290d4 <_impl_k_sleep>
			k_sleep(APP_TX_CONN_WAIT_MSECS);
		} while (rc == 0 && i++ < APP_TX_CONN_TRIES && !pub_ctx.mqtt_ctx.connected);
    178c:	b99d      	cbnz	r5, 17b6 <publisher_thread+0xea>
    178e:	1c63      	adds	r3, r4, #1
    1790:	2c13      	cmp	r4, #19
    1792:	dc10      	bgt.n	17b6 <publisher_thread+0xea>
    1794:	4a4b      	ldr	r2, [pc, #300]	; (18c4 <publisher_thread+0x1f8>)
    1796:	f892 20f1 	ldrb.w	r2, [r2, #241]	; 0xf1
    179a:	f012 0f02 	tst.w	r2, #2
    179e:	d10a      	bne.n	17b6 <publisher_thread+0xea>
    17a0:	461c      	mov	r4, r3
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
    17a2:	4848      	ldr	r0, [pc, #288]	; (18c4 <publisher_thread+0x1f8>)
    17a4:	4601      	mov	r1, r0
    17a6:	3048      	adds	r0, #72	; 0x48
    17a8:	f024 fbf2 	bl	25f90 <mqtt_tx_connect>
			PRINT_RESULT("mqtt_tx_connect", rc);
    17ac:	4605      	mov	r5, r0
    17ae:	2800      	cmp	r0, #0
    17b0:	d1de      	bne.n	1770 <publisher_thread+0xa4>
    17b2:	4b53      	ldr	r3, [pc, #332]	; (1900 <publisher_thread+0x234>)
    17b4:	e7dd      	b.n	1772 <publisher_thread+0xa6>

		if (!pub_ctx.mqtt_ctx.connected) {
    17b6:	4b43      	ldr	r3, [pc, #268]	; (18c4 <publisher_thread+0x1f8>)
    17b8:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
    17bc:	f013 0f02 	tst.w	r3, #2
    17c0:	d11b      	bne.n	17fa <publisher_thread+0x12e>
			mqtt_close(&pub_ctx.mqtt_ctx);
    17c2:	484e      	ldr	r0, [pc, #312]	; (18fc <publisher_thread+0x230>)
    17c4:	f024 fdfc 	bl	263c0 <mqtt_close>
			goto exit_pub;
    17c8:	e073      	b.n	18b2 <publisher_thread+0x1e6>
		do {
			bool data_changed = false;
			k_mutex_lock(&pub_data, K_FOREVER);

			if (message_changed) {
				prepare_msg(&pub_ctx.pub_msg, MQTT_QoS0);
    17ca:	2100      	movs	r1, #0
    17cc:	484e      	ldr	r0, [pc, #312]	; (1908 <publisher_thread+0x23c>)
    17ce:	f7ff ff27 	bl	1620 <prepare_msg>
				message_changed=false;
    17d2:	2200      	movs	r2, #0
    17d4:	4b4d      	ldr	r3, [pc, #308]	; (190c <publisher_thread+0x240>)
    17d6:	701a      	strb	r2, [r3, #0]
    17d8:	e018      	b.n	180c <publisher_thread+0x140>

			k_mutex_unlock(&pub_data);

			if (data_changed) {
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
				PRINT_RESULT("mqtt_tx_publish", rc);
    17da:	4a44      	ldr	r2, [pc, #272]	; (18ec <publisher_thread+0x220>)
    17dc:	9201      	str	r2, [sp, #4]
    17de:	9300      	str	r3, [sp, #0]
    17e0:	4b4b      	ldr	r3, [pc, #300]	; (1910 <publisher_thread+0x244>)
    17e2:	f44f 72bd 	mov.w	r2, #378	; 0x17a
    17e6:	4943      	ldr	r1, [pc, #268]	; (18f4 <publisher_thread+0x228>)
    17e8:	4843      	ldr	r0, [pc, #268]	; (18f8 <publisher_thread+0x22c>)
    17ea:	f001 fbb3 	bl	2f54 <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    17ee:	f242 7110 	movw	r1, #10000	; 0x2710
    17f2:	4848      	ldr	r0, [pc, #288]	; (1914 <publisher_thread+0x248>)
    17f4:	f027 fdc0 	bl	29378 <_impl_k_sem_take>
			}
		} while ((rc = k_sem_take(&pub_sem, APP_CONN_IDLE_TIMEOUT)) == 0);
    17f8:	b9c0      	cbnz	r0, 182c <publisher_thread+0x160>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    17fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    17fe:	4846      	ldr	r0, [pc, #280]	; (1918 <publisher_thread+0x24c>)
    1800:	f026 fd84 	bl	2830c <_impl_k_mutex_lock>
			if (message_changed) {
    1804:	4b41      	ldr	r3, [pc, #260]	; (190c <publisher_thread+0x240>)
    1806:	781c      	ldrb	r4, [r3, #0]
    1808:	2c00      	cmp	r4, #0
    180a:	d1de      	bne.n	17ca <publisher_thread+0xfe>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    180c:	4842      	ldr	r0, [pc, #264]	; (1918 <publisher_thread+0x24c>)
    180e:	f026 fde7 	bl	283e0 <_impl_k_mutex_unlock>
			if (data_changed) {
    1812:	2c00      	cmp	r4, #0
    1814:	d0eb      	beq.n	17ee <publisher_thread+0x122>
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
    1816:	482b      	ldr	r0, [pc, #172]	; (18c4 <publisher_thread+0x1f8>)
    1818:	f100 0130 	add.w	r1, r0, #48	; 0x30
    181c:	3048      	adds	r0, #72	; 0x48
    181e:	f024 fc43 	bl	260a8 <mqtt_tx_publish>
				PRINT_RESULT("mqtt_tx_publish", rc);
    1822:	4603      	mov	r3, r0
    1824:	2800      	cmp	r0, #0
    1826:	d1d8      	bne.n	17da <publisher_thread+0x10e>
    1828:	4a35      	ldr	r2, [pc, #212]	; (1900 <publisher_thread+0x234>)
    182a:	e7d7      	b.n	17dc <publisher_thread+0x110>

		rc = mqtt_tx_disconnect(&pub_ctx.mqtt_ctx);
    182c:	4833      	ldr	r0, [pc, #204]	; (18fc <publisher_thread+0x230>)
    182e:	f024 fbf1 	bl	26014 <mqtt_tx_disconnect>
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    1832:	4603      	mov	r3, r0
    1834:	2800      	cmp	r0, #0
    1836:	d141      	bne.n	18bc <publisher_thread+0x1f0>
    1838:	4a31      	ldr	r2, [pc, #196]	; (1900 <publisher_thread+0x234>)
    183a:	9201      	str	r2, [sp, #4]
    183c:	9300      	str	r3, [sp, #0]
    183e:	4b37      	ldr	r3, [pc, #220]	; (191c <publisher_thread+0x250>)
    1840:	f240 127f 	movw	r2, #383	; 0x17f
    1844:	492b      	ldr	r1, [pc, #172]	; (18f4 <publisher_thread+0x228>)
    1846:	482c      	ldr	r0, [pc, #176]	; (18f8 <publisher_thread+0x22c>)
    1848:	f001 fb84 	bl	2f54 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    184c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1850:	f027 fc40 	bl	290d4 <_impl_k_sleep>

		k_sleep(APP_TX_RX_TIMEOUT);

		rc = mqtt_close(&pub_ctx.mqtt_ctx);
    1854:	4829      	ldr	r0, [pc, #164]	; (18fc <publisher_thread+0x230>)
    1856:	f024 fdb3 	bl	263c0 <mqtt_close>
		PRINT_RESULT("mqtt_close", rc);
    185a:	4603      	mov	r3, r0
    185c:	2800      	cmp	r0, #0
    185e:	d12f      	bne.n	18c0 <publisher_thread+0x1f4>
    1860:	4a27      	ldr	r2, [pc, #156]	; (1900 <publisher_thread+0x234>)
    1862:	9201      	str	r2, [sp, #4]
    1864:	9300      	str	r3, [sp, #0]
    1866:	4b2e      	ldr	r3, [pc, #184]	; (1920 <publisher_thread+0x254>)
    1868:	f44f 72c2 	mov.w	r2, #388	; 0x184
    186c:	4921      	ldr	r1, [pc, #132]	; (18f4 <publisher_thread+0x228>)
    186e:	4822      	ldr	r0, [pc, #136]	; (18f8 <publisher_thread+0x22c>)
    1870:	f001 fb70 	bl	2f54 <printk>
    1874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1878:	f027 fc2c 	bl	290d4 <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    187c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1880:	4824      	ldr	r0, [pc, #144]	; (1914 <publisher_thread+0x248>)
    1882:	f027 fd79 	bl	29378 <_impl_k_sem_take>
	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    1886:	b9a0      	cbnz	r0, 18b2 <publisher_thread+0x1e6>
		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
    1888:	2101      	movs	r1, #1
    188a:	481c      	ldr	r0, [pc, #112]	; (18fc <publisher_thread+0x230>)
    188c:	f024 fd86 	bl	2639c <mqtt_init>
		PRINT_RESULT("mqtt_init", rc);
    1890:	4605      	mov	r5, r0
    1892:	2800      	cmp	r0, #0
    1894:	f47f af51 	bne.w	173a <publisher_thread+0x6e>
    1898:	4b19      	ldr	r3, [pc, #100]	; (1900 <publisher_thread+0x234>)
    189a:	9301      	str	r3, [sp, #4]
    189c:	9500      	str	r5, [sp, #0]
    189e:	4b21      	ldr	r3, [pc, #132]	; (1924 <publisher_thread+0x258>)
    18a0:	f44f 72a8 	mov.w	r2, #336	; 0x150
    18a4:	4913      	ldr	r1, [pc, #76]	; (18f4 <publisher_thread+0x228>)
    18a6:	4814      	ldr	r0, [pc, #80]	; (18f8 <publisher_thread+0x22c>)
    18a8:	f001 fb54 	bl	2f54 <printk>
		if (rc != 0) {
    18ac:	2d00      	cmp	r5, #0
    18ae:	f43f af55 	beq.w	175c <publisher_thread+0x90>
		k_sleep(APP_TX_RX_TIMEOUT);
	}

exit_pub:

	printk("\nPublisher terminated!!\n");
    18b2:	481d      	ldr	r0, [pc, #116]	; (1928 <publisher_thread+0x25c>)
    18b4:	f001 fb4e 	bl	2f54 <printk>
}
    18b8:	b003      	add	sp, #12
    18ba:	bd30      	pop	{r4, r5, pc}
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    18bc:	4a0b      	ldr	r2, [pc, #44]	; (18ec <publisher_thread+0x220>)
    18be:	e7bc      	b.n	183a <publisher_thread+0x16e>
		PRINT_RESULT("mqtt_close", rc);
    18c0:	4a0a      	ldr	r2, [pc, #40]	; (18ec <publisher_thread+0x220>)
    18c2:	e7ce      	b.n	1862 <publisher_thread+0x196>
    18c4:	20000774 	.word	0x20000774
    18c8:	000014f1 	.word	0x000014f1
    18cc:	000014bd 	.word	0x000014bd
    18d0:	000014a5 	.word	0x000014a5
    18d4:	0002e82c 	.word	0x0002e82c
    18d8:	00001435 	.word	0x00001435
    18dc:	0002e848 	.word	0x0002e848
    18e0:	0002e860 	.word	0x0002e860
    18e4:	0002e86c 	.word	0x0002e86c
    18e8:	0002e87c 	.word	0x0002e87c
    18ec:	0002e824 	.word	0x0002e824
    18f0:	0002e8a8 	.word	0x0002e8a8
    18f4:	0002e754 	.word	0x0002e754
    18f8:	0002e890 	.word	0x0002e890
    18fc:	200007bc 	.word	0x200007bc
    1900:	0002e820 	.word	0x0002e820
    1904:	0002e8b8 	.word	0x0002e8b8
    1908:	200007a4 	.word	0x200007a4
    190c:	2000059c 	.word	0x2000059c
    1910:	0002e8c8 	.word	0x0002e8c8
    1914:	2000d650 	.word	0x2000d650
    1918:	2000d6c4 	.word	0x2000d6c4
    191c:	0002e8d8 	.word	0x0002e8d8
    1920:	0002e8ec 	.word	0x0002e8ec
    1924:	0002e884 	.word	0x0002e884
    1928:	0002e8f8 	.word	0x0002e8f8

0000192c <start_publisher>:


static void start_publisher()
{
    192c:	b500      	push	{lr}
    192e:	b087      	sub	sp, #28
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    1930:	2300      	movs	r3, #0
    1932:	9305      	str	r3, [sp, #20]
    1934:	9304      	str	r3, [sp, #16]
    1936:	2205      	movs	r2, #5
    1938:	9203      	str	r2, [sp, #12]
    193a:	9302      	str	r3, [sp, #8]
    193c:	9301      	str	r3, [sp, #4]
    193e:	9300      	str	r3, [sp, #0]
    1940:	4b04      	ldr	r3, [pc, #16]	; (1954 <start_publisher+0x28>)
    1942:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1946:	4904      	ldr	r1, [pc, #16]	; (1958 <start_publisher+0x2c>)
    1948:	4804      	ldr	r0, [pc, #16]	; (195c <start_publisher+0x30>)
    194a:	f027 ff81 	bl	29850 <_impl_k_thread_create>
	k_tid_t tt_tid = k_thread_create(&pub_thread, pub_stack_area,
                                 K_THREAD_STACK_SIZEOF(pub_stack_area),
                                 publisher_thread,
                                 NULL, NULL, NULL,
                                 PUB_PRIORITY, 0, K_NO_WAIT);
}
    194e:	b007      	add	sp, #28
    1950:	f85d fb04 	ldr.w	pc, [sp], #4
    1954:	000016cd 	.word	0x000016cd
    1958:	200039f8 	.word	0x200039f8
    195c:	20002f28 	.word	0x20002f28

00001960 <start_message_thread>:
{
    1960:	b500      	push	{lr}
    1962:	b087      	sub	sp, #28
    1964:	2300      	movs	r3, #0
    1966:	9305      	str	r3, [sp, #20]
    1968:	9304      	str	r3, [sp, #16]
    196a:	2205      	movs	r2, #5
    196c:	9203      	str	r2, [sp, #12]
    196e:	9302      	str	r3, [sp, #8]
    1970:	9301      	str	r3, [sp, #4]
    1972:	9300      	str	r3, [sp, #0]
    1974:	4b04      	ldr	r3, [pc, #16]	; (1988 <start_message_thread+0x28>)
    1976:	f44f 6200 	mov.w	r2, #2048	; 0x800
    197a:	4904      	ldr	r1, [pc, #16]	; (198c <start_message_thread+0x2c>)
    197c:	4804      	ldr	r0, [pc, #16]	; (1990 <start_message_thread+0x30>)
    197e:	f027 ff67 	bl	29850 <_impl_k_thread_create>
}
    1982:	b007      	add	sp, #28
    1984:	f85d fb04 	ldr.w	pc, [sp], #4
    1988:	0000164d 	.word	0x0000164d
    198c:	200031f8 	.word	0x200031f8
    1990:	20002ec0 	.word	0x20002ec0

00001994 <event_iface_up>:


static void event_iface_up(struct net_mgmt_event_callback *cb,
			   u32_t mgmt_event, struct net_if *iface)
{
    1994:	b508      	push	{r3, lr}
	start_publisher();
    1996:	f7ff ffc9 	bl	192c <start_publisher>
	start_message_thread();
    199a:	f7ff ffe1 	bl	1960 <start_message_thread>
    199e:	bd08      	pop	{r3, pc}

000019a0 <main>:
}


void main(void)
{
    19a0:	b508      	push	{r3, lr}
	struct net_if *iface = net_if_get_default();
    19a2:	f019 fd1b 	bl	1b3dc <net_if_get_default>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    19a6:	f3bf 8f5b 	dmb	ish
    19aa:	68c3      	ldr	r3, [r0, #12]
    19ac:	f3bf 8f5b 	dmb	ish

#if defined(CONFIG_NET_MGMT_EVENT)
	/* Subscribe to NET_IF_UP if interface is not ready */
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
    19b0:	f013 0f01 	tst.w	r3, #1
    19b4:	d000      	beq.n	19b8 <main+0x18>
    19b6:	bd08      	pop	{r3, pc}
				  u32_t mgmt_event_mask)
{
	__ASSERT(cb, "Callback pointer should not be NULL");
	__ASSERT(handler, "Handler pointer should not be NULL");

	cb->handler = handler;
    19b8:	4803      	ldr	r0, [pc, #12]	; (19c8 <main+0x28>)
    19ba:	4b04      	ldr	r3, [pc, #16]	; (19cc <main+0x2c>)
    19bc:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
    19be:	4b04      	ldr	r3, [pc, #16]	; (19d0 <main+0x30>)
    19c0:	6083      	str	r3, [r0, #8]
		net_mgmt_init_event_callback(&cb, event_iface_up, NET_EVENT_IF_UP);
		net_mgmt_add_event_callback(&cb);
    19c2:	f021 fb49 	bl	23058 <net_mgmt_add_event_callback>
	}
#else
	event_iface_up(NULL, NET_EVENT_IF_UP, iface);
#endif

	return;
    19c6:	e7f6      	b.n	19b6 <main+0x16>
    19c8:	20000000 	.word	0x20000000
    19cc:	00001995 	.word	0x00001995
    19d0:	d0010002 	.word	0xd0010002

000019d4 <_sbrk>:
}
FUNC_ALIAS(_lseek, lseek, int);

void *_sbrk(int count)
{
	void *ptr = heap_base + heap_sz;
    19d4:	4b08      	ldr	r3, [pc, #32]	; (19f8 <_sbrk+0x24>)
    19d6:	681a      	ldr	r2, [r3, #0]
    19d8:	4b08      	ldr	r3, [pc, #32]	; (19fc <_sbrk+0x28>)
    19da:	18d1      	adds	r1, r2, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    19dc:	4410      	add	r0, r2
    19de:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    19e2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    19e6:	4298      	cmp	r0, r3
    19e8:	d203      	bcs.n	19f2 <_sbrk+0x1e>
		heap_sz += count;
    19ea:	4b03      	ldr	r3, [pc, #12]	; (19f8 <_sbrk+0x24>)
    19ec:	6018      	str	r0, [r3, #0]
		return ptr;
	} else {
		return (void *)-1;
	}
}
    19ee:	4608      	mov	r0, r1
    19f0:	4770      	bx	lr
		return (void *)-1;
    19f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    19f6:	e7fa      	b.n	19ee <_sbrk+0x1a>
    19f8:	20000874 	.word	0x20000874
    19fc:	2000dab4 	.word	0x2000dab4

00001a00 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1a00:	b510      	push	{r4, lr}
    1a02:	4604      	mov	r4, r0
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1a04:	280a      	cmp	r0, #10
    1a06:	d007      	beq.n	1a18 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1a08:	4b07      	ldr	r3, [pc, #28]	; (1a28 <console_out+0x28>)
    1a0a:	6818      	ldr	r0, [r3, #0]
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a0c:	6843      	ldr	r3, [r0, #4]

	return api->poll_out(dev, out_char);
    1a0e:	685b      	ldr	r3, [r3, #4]
    1a10:	b2e1      	uxtb	r1, r4
    1a12:	4798      	blx	r3

	return c;
}
    1a14:	4620      	mov	r0, r4
    1a16:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    1a18:	4b03      	ldr	r3, [pc, #12]	; (1a28 <console_out+0x28>)
    1a1a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a1c:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1a1e:	685b      	ldr	r3, [r3, #4]
    1a20:	210d      	movs	r1, #13
    1a22:	4798      	blx	r3
    1a24:	e7f0      	b.n	1a08 <console_out+0x8>
    1a26:	bf00      	nop
    1a28:	20000898 	.word	0x20000898

00001a2c <read_uart>:
#define ANSI_END           'F'
#define ANSI_HOME          'H'
#define ANSI_DEL           '~'

static int read_uart(struct device *uart, u8_t *buf, unsigned int size)
{
    1a2c:	b510      	push	{r4, lr}
    1a2e:	4604      	mov	r4, r0
 * @return Number of bytes read.
 */
static inline int uart_fifo_read(struct device *dev, u8_t *rx_data,
				 const int size)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a30:	6843      	ldr	r3, [r0, #4]

	if (api->fifo_read) {
    1a32:	691b      	ldr	r3, [r3, #16]
    1a34:	b11b      	cbz	r3, 1a3e <read_uart+0x12>
		return api->fifo_read(dev, rx_data, size);
    1a36:	4798      	blx	r3
	int rx;

	rx = uart_fifo_read(uart, buf, size);
	if (rx < 0) {
    1a38:	2800      	cmp	r0, #0
    1a3a:	db02      	blt.n	1a42 <read_uart+0x16>

		return -EIO;
	}

	return rx;
}
    1a3c:	bd10      	pop	{r4, pc}
	}

	return 0;
    1a3e:	2000      	movs	r0, #0
    1a40:	e7fa      	b.n	1a38 <read_uart+0xc>
 *
 * @return N/A
 */
static inline void uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a42:	6863      	ldr	r3, [r4, #4]

	if (api->irq_rx_disable) {
    1a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a46:	b123      	cbz	r3, 1a52 <read_uart+0x26>
		api->irq_rx_disable(dev);
    1a48:	4620      	mov	r0, r4
    1a4a:	4798      	blx	r3
		return -EIO;
    1a4c:	f06f 0004 	mvn.w	r0, #4
    1a50:	bd10      	pop	{r4, pc}
    1a52:	f06f 0004 	mvn.w	r0, #4
    1a56:	e7f1      	b.n	1a3c <read_uart+0x10>

00001a58 <console_input_init>:
		}
	}
}

static void console_input_init(void)
{
    1a58:	b500      	push	{lr}
    1a5a:	b083      	sub	sp, #12
	u8_t c;

	uart_irq_rx_disable(uart_console_dev);
    1a5c:	4b19      	ldr	r3, [pc, #100]	; (1ac4 <console_input_init+0x6c>)
    1a5e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a60:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_disable) {
    1a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a64:	b103      	cbz	r3, 1a68 <console_input_init+0x10>
		api->irq_rx_disable(dev);
    1a66:	4798      	blx	r3
	uart_irq_tx_disable(uart_console_dev);
    1a68:	4b16      	ldr	r3, [pc, #88]	; (1ac4 <console_input_init+0x6c>)
    1a6a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a6c:	6843      	ldr	r3, [r0, #4]
	if (api->irq_tx_disable) {
    1a6e:	699b      	ldr	r3, [r3, #24]
    1a70:	b103      	cbz	r3, 1a74 <console_input_init+0x1c>
		api->irq_tx_disable(dev);
    1a72:	4798      	blx	r3

	uart_irq_callback_set(uart_console_dev, uart_console_isr);
    1a74:	4b13      	ldr	r3, [pc, #76]	; (1ac4 <console_input_init+0x6c>)
    1a76:	6818      	ldr	r0, [r3, #0]
 * @return N/A
 */
static inline void uart_irq_callback_set(struct device *dev,
					 uart_irq_callback_t cb)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a78:	6843      	ldr	r3, [r0, #4]

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1a7a:	b18b      	cbz	r3, 1aa0 <console_input_init+0x48>
    1a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1a7e:	b17b      	cbz	r3, 1aa0 <console_input_init+0x48>
		api->irq_callback_set(dev, cb);
    1a80:	4911      	ldr	r1, [pc, #68]	; (1ac8 <console_input_init+0x70>)
    1a82:	4798      	blx	r3
    1a84:	e00c      	b.n	1aa0 <console_input_init+0x48>
		return api->fifo_read(dev, rx_data, size);
    1a86:	2201      	movs	r2, #1
    1a88:	f10d 0107 	add.w	r1, sp, #7
    1a8c:	4798      	blx	r3
    1a8e:	e007      	b.n	1aa0 <console_input_init+0x48>
	return 0;
    1a90:	2000      	movs	r0, #0

	/* Drain the fifo */
	while (uart_irq_rx_ready(uart_console_dev)) {
    1a92:	b168      	cbz	r0, 1ab0 <console_input_init+0x58>
		uart_fifo_read(uart_console_dev, &c, 1);
    1a94:	4b0b      	ldr	r3, [pc, #44]	; (1ac4 <console_input_init+0x6c>)
    1a96:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a98:	6843      	ldr	r3, [r0, #4]
	if (api->fifo_read) {
    1a9a:	691b      	ldr	r3, [r3, #16]
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d1f2      	bne.n	1a86 <console_input_init+0x2e>
	while (uart_irq_rx_ready(uart_console_dev)) {
    1aa0:	4b08      	ldr	r3, [pc, #32]	; (1ac4 <console_input_init+0x6c>)
    1aa2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1aa4:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	d0f1      	beq.n	1a90 <console_input_init+0x38>
		return api->irq_rx_ready(dev);
    1aac:	4798      	blx	r3
    1aae:	e7f0      	b.n	1a92 <console_input_init+0x3a>
	}

	uart_irq_rx_enable(uart_console_dev);
    1ab0:	4b04      	ldr	r3, [pc, #16]	; (1ac4 <console_input_init+0x6c>)
    1ab2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ab4:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_enable) {
    1ab6:	6a1b      	ldr	r3, [r3, #32]
    1ab8:	b103      	cbz	r3, 1abc <console_input_init+0x64>
		api->irq_rx_enable(dev);
    1aba:	4798      	blx	r3
}
    1abc:	b003      	add	sp, #12
    1abe:	f85d fb04 	ldr.w	pc, [sp], #4
    1ac2:	bf00      	nop
    1ac4:	20000898 	.word	0x20000898
    1ac8:	00001dc5 	.word	0x00001dc5

00001acc <del_char>:
{
    1acc:	b570      	push	{r4, r5, r6, lr}
    1ace:	4606      	mov	r6, r0
    1ad0:	460d      	mov	r5, r1
	uart_poll_out(uart_console_dev, '\b');
    1ad2:	4b17      	ldr	r3, [pc, #92]	; (1b30 <del_char+0x64>)
    1ad4:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ad6:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1ad8:	685b      	ldr	r3, [r3, #4]
    1ada:	2108      	movs	r1, #8
    1adc:	4798      	blx	r3
	if (end == 0) {
    1ade:	b11d      	cbz	r5, 1ae8 <del_char+0x1c>
	printk("\x1b[s");
    1ae0:	4814      	ldr	r0, [pc, #80]	; (1b34 <del_char+0x68>)
    1ae2:	f001 fa37 	bl	2f54 <printk>
    1ae6:	e014      	b.n	1b12 <del_char+0x46>
		uart_poll_out(uart_console_dev, ' ');
    1ae8:	4c11      	ldr	r4, [pc, #68]	; (1b30 <del_char+0x64>)
    1aea:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1aec:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1aee:	685b      	ldr	r3, [r3, #4]
    1af0:	2120      	movs	r1, #32
    1af2:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\b');
    1af4:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1af6:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1af8:	685b      	ldr	r3, [r3, #4]
    1afa:	2108      	movs	r1, #8
    1afc:	4798      	blx	r3
    1afe:	bd70      	pop	{r4, r5, r6, pc}
		*pos = *(pos + 1);
    1b00:	7871      	ldrb	r1, [r6, #1]
    1b02:	f806 1b01 	strb.w	r1, [r6], #1
		uart_poll_out(uart_console_dev, *(pos++));
    1b06:	4b0a      	ldr	r3, [pc, #40]	; (1b30 <del_char+0x64>)
    1b08:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b0a:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b0c:	685b      	ldr	r3, [r3, #4]
    1b0e:	4798      	blx	r3
	while (end-- > 0) {
    1b10:	4625      	mov	r5, r4
    1b12:	1e6b      	subs	r3, r5, #1
    1b14:	b2dc      	uxtb	r4, r3
    1b16:	2d00      	cmp	r5, #0
    1b18:	d1f2      	bne.n	1b00 <del_char+0x34>
	uart_poll_out(uart_console_dev, ' ');
    1b1a:	4b05      	ldr	r3, [pc, #20]	; (1b30 <del_char+0x64>)
    1b1c:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b1e:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b20:	685b      	ldr	r3, [r3, #4]
    1b22:	2120      	movs	r1, #32
    1b24:	4798      	blx	r3
	printk("\x1b[u");
    1b26:	4804      	ldr	r0, [pc, #16]	; (1b38 <del_char+0x6c>)
    1b28:	f001 fa14 	bl	2f54 <printk>
    1b2c:	bd70      	pop	{r4, r5, r6, pc}
    1b2e:	bf00      	nop
    1b30:	20000898 	.word	0x20000898
    1b34:	0002e9a4 	.word	0x0002e9a4
    1b38:	0002e9a8 	.word	0x0002e9a8

00001b3c <insert_char>:
{
    1b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b40:	4605      	mov	r5, r0
    1b42:	4688      	mov	r8, r1
    1b44:	4614      	mov	r4, r2
	uart_poll_out(uart_console_dev, c);
    1b46:	4b14      	ldr	r3, [pc, #80]	; (1b98 <insert_char+0x5c>)
    1b48:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b4a:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b4c:	685b      	ldr	r3, [r3, #4]
    1b4e:	4798      	blx	r3
	if (end == 0) {
    1b50:	b91c      	cbnz	r4, 1b5a <insert_char+0x1e>
		*pos = c;
    1b52:	f885 8000 	strb.w	r8, [r5]
		return;
    1b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tmp = *pos;
    1b5a:	462e      	mov	r6, r5
    1b5c:	f816 7b01 	ldrb.w	r7, [r6], #1
	*(pos++) = c;
    1b60:	f885 8000 	strb.w	r8, [r5]
	printk("\x1b[s");
    1b64:	480d      	ldr	r0, [pc, #52]	; (1b9c <insert_char+0x60>)
    1b66:	f001 f9f5 	bl	2f54 <printk>
    1b6a:	e00c      	b.n	1b86 <insert_char+0x4a>
		uart_poll_out(uart_console_dev, tmp);
    1b6c:	4b0a      	ldr	r3, [pc, #40]	; (1b98 <insert_char+0x5c>)
    1b6e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b70:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b72:	685b      	ldr	r3, [r3, #4]
    1b74:	4639      	mov	r1, r7
    1b76:	4798      	blx	r3
		c = *pos;
    1b78:	4633      	mov	r3, r6
    1b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
		*(pos++) = tmp;
    1b7e:	7037      	strb	r7, [r6, #0]
		tmp = c;
    1b80:	4617      	mov	r7, r2
	while (end-- > 0) {
    1b82:	462c      	mov	r4, r5
		*(pos++) = tmp;
    1b84:	461e      	mov	r6, r3
	while (end-- > 0) {
    1b86:	1e63      	subs	r3, r4, #1
    1b88:	b2dd      	uxtb	r5, r3
    1b8a:	2c00      	cmp	r4, #0
    1b8c:	d1ee      	bne.n	1b6c <insert_char+0x30>
	printk("\x1b[u");
    1b8e:	4804      	ldr	r0, [pc, #16]	; (1ba0 <insert_char+0x64>)
    1b90:	f001 f9e0 	bl	2f54 <printk>
    1b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b98:	20000898 	.word	0x20000898
    1b9c:	0002e9a4 	.word	0x0002e9a4
    1ba0:	0002e9a8 	.word	0x0002e9a8

00001ba4 <handle_ansi>:
{
    1ba4:	b538      	push	{r3, r4, r5, lr}
    1ba6:	4604      	mov	r4, r0
    1ba8:	460d      	mov	r5, r1
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1baa:	4b7f      	ldr	r3, [pc, #508]	; (1da8 <handle_ansi+0x204>)
    1bac:	f3bf 8f5b 	dmb	ish
    1bb0:	e853 2f00 	ldrex	r2, [r3]
    1bb4:	f022 0104 	bic.w	r1, r2, #4
    1bb8:	e843 1000 	strex	r0, r1, [r3]
    1bbc:	2800      	cmp	r0, #0
    1bbe:	d1f7      	bne.n	1bb0 <handle_ansi+0xc>
    1bc0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
    1bc4:	f012 0f04 	tst.w	r2, #4
    1bc8:	d03c      	beq.n	1c44 <handle_ansi+0xa0>
		if (!isdigit(byte)) {
    1bca:	f028 fb0d 	bl	2a1e8 <__locale_ctype_ptr>
    1bce:	4420      	add	r0, r4
    1bd0:	7843      	ldrb	r3, [r0, #1]
    1bd2:	f013 0f04 	tst.w	r3, #4
    1bd6:	d121      	bne.n	1c1c <handle_ansi+0x78>
			ansi_val = 1;
    1bd8:	2201      	movs	r2, #1
    1bda:	4b74      	ldr	r3, [pc, #464]	; (1dac <handle_ansi+0x208>)
    1bdc:	601a      	str	r2, [r3, #0]
	switch (byte) {
    1bde:	2c46      	cmp	r4, #70	; 0x46
    1be0:	f000 80d0 	beq.w	1d84 <handle_ansi+0x1e0>
    1be4:	f200 8086 	bhi.w	1cf4 <handle_ansi+0x150>
    1be8:	2c43      	cmp	r4, #67	; 0x43
    1bea:	f000 80a7 	beq.w	1d3c <handle_ansi+0x198>
    1bee:	2c44      	cmp	r4, #68	; 0x44
    1bf0:	d106      	bne.n	1c00 <handle_ansi+0x5c>
		if (ansi_val > cur) {
    1bf2:	4b6f      	ldr	r3, [pc, #444]	; (1db0 <handle_ansi+0x20c>)
    1bf4:	781b      	ldrb	r3, [r3, #0]
    1bf6:	4a6d      	ldr	r2, [pc, #436]	; (1dac <handle_ansi+0x208>)
    1bf8:	6811      	ldr	r1, [r2, #0]
    1bfa:	428b      	cmp	r3, r1
    1bfc:	f080 8092 	bcs.w	1d24 <handle_ansi+0x180>
    1c00:	4b69      	ldr	r3, [pc, #420]	; (1da8 <handle_ansi+0x204>)
    1c02:	f3bf 8f5b 	dmb	ish
    1c06:	e853 2f00 	ldrex	r2, [r3]
    1c0a:	f022 0202 	bic.w	r2, r2, #2
    1c0e:	e843 2100 	strex	r1, r2, [r3]
    1c12:	2900      	cmp	r1, #0
    1c14:	d1f7      	bne.n	1c06 <handle_ansi+0x62>
    1c16:	f3bf 8f5b 	dmb	ish
    1c1a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1c1c:	4b62      	ldr	r3, [pc, #392]	; (1da8 <handle_ansi+0x204>)
    1c1e:	f3bf 8f5b 	dmb	ish
    1c22:	e853 2f00 	ldrex	r2, [r3]
    1c26:	f042 0208 	orr.w	r2, r2, #8
    1c2a:	e843 2100 	strex	r1, r2, [r3]
    1c2e:	2900      	cmp	r1, #0
    1c30:	d1f7      	bne.n	1c22 <handle_ansi+0x7e>
    1c32:	f3bf 8f5b 	dmb	ish
		ansi_val = byte - '0';
    1c36:	3c30      	subs	r4, #48	; 0x30
    1c38:	4b5c      	ldr	r3, [pc, #368]	; (1dac <handle_ansi+0x208>)
    1c3a:	601c      	str	r4, [r3, #0]
		ansi_val_2 = 0;
    1c3c:	2200      	movs	r2, #0
    1c3e:	4b5d      	ldr	r3, [pc, #372]	; (1db4 <handle_ansi+0x210>)
    1c40:	601a      	str	r2, [r3, #0]
		return;
    1c42:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1c44:	f3bf 8f5b 	dmb	ish
    1c48:	4b57      	ldr	r3, [pc, #348]	; (1da8 <handle_ansi+0x204>)
    1c4a:	681b      	ldr	r3, [r3, #0]
    1c4c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
    1c50:	f013 0f08 	tst.w	r3, #8
    1c54:	d0c3      	beq.n	1bde <handle_ansi+0x3a>
		if (isdigit(byte)) {
    1c56:	f028 fac7 	bl	2a1e8 <__locale_ctype_ptr>
    1c5a:	4420      	add	r0, r4
    1c5c:	7843      	ldrb	r3, [r0, #1]
    1c5e:	f013 0f04 	tst.w	r3, #4
    1c62:	d11b      	bne.n	1c9c <handle_ansi+0xf8>
		if (byte == ';' &&
    1c64:	2c3b      	cmp	r4, #59	; 0x3b
    1c66:	d034      	beq.n	1cd2 <handle_ansi+0x12e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1c68:	4b4f      	ldr	r3, [pc, #316]	; (1da8 <handle_ansi+0x204>)
    1c6a:	f3bf 8f5b 	dmb	ish
    1c6e:	e853 2f00 	ldrex	r2, [r3]
    1c72:	f022 0208 	bic.w	r2, r2, #8
    1c76:	e843 2100 	strex	r1, r2, [r3]
    1c7a:	2900      	cmp	r1, #0
    1c7c:	d1f7      	bne.n	1c6e <handle_ansi+0xca>
    1c7e:	f3bf 8f5b 	dmb	ish
    1c82:	f3bf 8f5b 	dmb	ish
    1c86:	e853 2f00 	ldrex	r2, [r3]
    1c8a:	f022 0210 	bic.w	r2, r2, #16
    1c8e:	e843 2100 	strex	r1, r2, [r3]
    1c92:	2900      	cmp	r1, #0
    1c94:	d1f7      	bne.n	1c86 <handle_ansi+0xe2>
    1c96:	f3bf 8f5b 	dmb	ish
    1c9a:	e7a0      	b.n	1bde <handle_ansi+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1c9c:	f3bf 8f5b 	dmb	ish
    1ca0:	4b41      	ldr	r3, [pc, #260]	; (1da8 <handle_ansi+0x204>)
    1ca2:	681b      	ldr	r3, [r3, #0]
    1ca4:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
    1ca8:	f013 0f10 	tst.w	r3, #16
    1cac:	d008      	beq.n	1cc0 <handle_ansi+0x11c>
				ansi_val_2 *= 10;
    1cae:	4941      	ldr	r1, [pc, #260]	; (1db4 <handle_ansi+0x210>)
    1cb0:	680a      	ldr	r2, [r1, #0]
    1cb2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1cb6:	0053      	lsls	r3, r2, #1
				ansi_val_2 += byte - '0';
    1cb8:	4423      	add	r3, r4
    1cba:	3b30      	subs	r3, #48	; 0x30
    1cbc:	600b      	str	r3, [r1, #0]
    1cbe:	bd38      	pop	{r3, r4, r5, pc}
				ansi_val *= 10;
    1cc0:	493a      	ldr	r1, [pc, #232]	; (1dac <handle_ansi+0x208>)
    1cc2:	680a      	ldr	r2, [r1, #0]
    1cc4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1cc8:	0053      	lsls	r3, r2, #1
				ansi_val += byte - '0';
    1cca:	4423      	add	r3, r4
    1ccc:	3b30      	subs	r3, #48	; 0x30
    1cce:	600b      	str	r3, [r1, #0]
    1cd0:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1cd2:	4b35      	ldr	r3, [pc, #212]	; (1da8 <handle_ansi+0x204>)
    1cd4:	f3bf 8f5b 	dmb	ish
    1cd8:	e853 2f00 	ldrex	r2, [r3]
    1cdc:	f042 0110 	orr.w	r1, r2, #16
    1ce0:	e843 1000 	strex	r0, r1, [r3]
    1ce4:	2800      	cmp	r0, #0
    1ce6:	d1f7      	bne.n	1cd8 <handle_ansi+0x134>
    1ce8:	f3bf 8f5b 	dmb	ish
		if (byte == ';' &&
    1cec:	f012 0f10 	tst.w	r2, #16
    1cf0:	d1ba      	bne.n	1c68 <handle_ansi+0xc4>
    1cf2:	e792      	b.n	1c1a <handle_ansi+0x76>
	switch (byte) {
    1cf4:	2c48      	cmp	r4, #72	; 0x48
    1cf6:	d034      	beq.n	1d62 <handle_ansi+0x1be>
    1cf8:	2c7e      	cmp	r4, #126	; 0x7e
    1cfa:	d181      	bne.n	1c00 <handle_ansi+0x5c>
		if (!end) {
    1cfc:	4b2e      	ldr	r3, [pc, #184]	; (1db8 <handle_ansi+0x214>)
    1cfe:	781b      	ldrb	r3, [r3, #0]
    1d00:	2b00      	cmp	r3, #0
    1d02:	f43f af7d 	beq.w	1c00 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1d06:	2101      	movs	r1, #1
    1d08:	482c      	ldr	r0, [pc, #176]	; (1dbc <handle_ansi+0x218>)
    1d0a:	f001 f923 	bl	2f54 <printk>
		del_char(&line[cur], --end);
    1d0e:	4b28      	ldr	r3, [pc, #160]	; (1db0 <handle_ansi+0x20c>)
    1d10:	7818      	ldrb	r0, [r3, #0]
    1d12:	4b29      	ldr	r3, [pc, #164]	; (1db8 <handle_ansi+0x214>)
    1d14:	7819      	ldrb	r1, [r3, #0]
    1d16:	3901      	subs	r1, #1
    1d18:	b2c9      	uxtb	r1, r1
    1d1a:	7019      	strb	r1, [r3, #0]
    1d1c:	4428      	add	r0, r5
    1d1e:	f7ff fed5 	bl	1acc <del_char>
		break;
    1d22:	e76d      	b.n	1c00 <handle_ansi+0x5c>
		end += ansi_val;
    1d24:	b2c8      	uxtb	r0, r1
    1d26:	4c24      	ldr	r4, [pc, #144]	; (1db8 <handle_ansi+0x214>)
    1d28:	7822      	ldrb	r2, [r4, #0]
    1d2a:	4402      	add	r2, r0
    1d2c:	7022      	strb	r2, [r4, #0]
		cur -= ansi_val;
    1d2e:	1a1b      	subs	r3, r3, r0
    1d30:	4a1f      	ldr	r2, [pc, #124]	; (1db0 <handle_ansi+0x20c>)
    1d32:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uD", count);
    1d34:	4822      	ldr	r0, [pc, #136]	; (1dc0 <handle_ansi+0x21c>)
    1d36:	f001 f90d 	bl	2f54 <printk>
    1d3a:	e761      	b.n	1c00 <handle_ansi+0x5c>
		if (ansi_val > end) {
    1d3c:	4b1e      	ldr	r3, [pc, #120]	; (1db8 <handle_ansi+0x214>)
    1d3e:	781b      	ldrb	r3, [r3, #0]
    1d40:	4a1a      	ldr	r2, [pc, #104]	; (1dac <handle_ansi+0x208>)
    1d42:	6811      	ldr	r1, [r2, #0]
    1d44:	428b      	cmp	r3, r1
    1d46:	f4ff af5b 	bcc.w	1c00 <handle_ansi+0x5c>
		end -= ansi_val;
    1d4a:	b2ca      	uxtb	r2, r1
    1d4c:	1a9b      	subs	r3, r3, r2
    1d4e:	481a      	ldr	r0, [pc, #104]	; (1db8 <handle_ansi+0x214>)
    1d50:	7003      	strb	r3, [r0, #0]
		cur += ansi_val;
    1d52:	4b17      	ldr	r3, [pc, #92]	; (1db0 <handle_ansi+0x20c>)
    1d54:	7818      	ldrb	r0, [r3, #0]
    1d56:	4402      	add	r2, r0
    1d58:	701a      	strb	r2, [r3, #0]
	printk("\x1b[%uC", count);
    1d5a:	4818      	ldr	r0, [pc, #96]	; (1dbc <handle_ansi+0x218>)
    1d5c:	f001 f8fa 	bl	2f54 <printk>
    1d60:	e74e      	b.n	1c00 <handle_ansi+0x5c>
		if (!cur) {
    1d62:	4b13      	ldr	r3, [pc, #76]	; (1db0 <handle_ansi+0x20c>)
    1d64:	7819      	ldrb	r1, [r3, #0]
    1d66:	2900      	cmp	r1, #0
    1d68:	f43f af4a 	beq.w	1c00 <handle_ansi+0x5c>
	printk("\x1b[%uD", count);
    1d6c:	4814      	ldr	r0, [pc, #80]	; (1dc0 <handle_ansi+0x21c>)
    1d6e:	f001 f8f1 	bl	2f54 <printk>
		end += cur;
    1d72:	4911      	ldr	r1, [pc, #68]	; (1db8 <handle_ansi+0x214>)
    1d74:	4a0e      	ldr	r2, [pc, #56]	; (1db0 <handle_ansi+0x20c>)
    1d76:	780b      	ldrb	r3, [r1, #0]
    1d78:	7810      	ldrb	r0, [r2, #0]
    1d7a:	4403      	add	r3, r0
    1d7c:	700b      	strb	r3, [r1, #0]
		cur = 0;
    1d7e:	2300      	movs	r3, #0
    1d80:	7013      	strb	r3, [r2, #0]
		break;
    1d82:	e73d      	b.n	1c00 <handle_ansi+0x5c>
		if (!end) {
    1d84:	4b0c      	ldr	r3, [pc, #48]	; (1db8 <handle_ansi+0x214>)
    1d86:	7819      	ldrb	r1, [r3, #0]
    1d88:	2900      	cmp	r1, #0
    1d8a:	f43f af39 	beq.w	1c00 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1d8e:	480b      	ldr	r0, [pc, #44]	; (1dbc <handle_ansi+0x218>)
    1d90:	f001 f8e0 	bl	2f54 <printk>
		cur += end;
    1d94:	4906      	ldr	r1, [pc, #24]	; (1db0 <handle_ansi+0x20c>)
    1d96:	4a08      	ldr	r2, [pc, #32]	; (1db8 <handle_ansi+0x214>)
    1d98:	780b      	ldrb	r3, [r1, #0]
    1d9a:	7810      	ldrb	r0, [r2, #0]
    1d9c:	4403      	add	r3, r0
    1d9e:	700b      	strb	r3, [r1, #0]
		end = 0;
    1da0:	2300      	movs	r3, #0
    1da2:	7013      	strb	r3, [r2, #0]
		break;
    1da4:	e72c      	b.n	1c00 <handle_ansi+0x5c>
    1da6:	bf00      	nop
    1da8:	20000890 	.word	0x20000890
    1dac:	20000878 	.word	0x20000878
    1db0:	2000088c 	.word	0x2000088c
    1db4:	2000087c 	.word	0x2000087c
    1db8:	2000088d 	.word	0x2000088d
    1dbc:	0002e9b4 	.word	0x0002e9b4
    1dc0:	0002e9ac 	.word	0x0002e9ac

00001dc4 <uart_console_isr>:
{
    1dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1dc8:	b082      	sub	sp, #8
	while (uart_irq_update(uart_console_dev) &&
    1dca:	e001      	b.n	1dd0 <uart_console_isr+0xc>
	return 0;
    1dcc:	2000      	movs	r0, #0
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1dce:	b9d8      	cbnz	r0, 1e08 <uart_console_isr+0x44>
	while (uart_irq_update(uart_console_dev) &&
    1dd0:	4b78      	ldr	r3, [pc, #480]	; (1fb4 <uart_console_isr+0x1f0>)
    1dd2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1dd4:	6843      	ldr	r3, [r0, #4]
	if (api->irq_update) {
    1dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1dd8:	2b00      	cmp	r3, #0
    1dda:	f000 80e7 	beq.w	1fac <uart_console_isr+0x1e8>
		return api->irq_update(dev);
    1dde:	4798      	blx	r3
    1de0:	2800      	cmp	r0, #0
    1de2:	d037      	beq.n	1e54 <uart_console_isr+0x90>
	       uart_irq_is_pending(uart_console_dev)) {
    1de4:	4b73      	ldr	r3, [pc, #460]	; (1fb4 <uart_console_isr+0x1f0>)
    1de6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1de8:	6843      	ldr	r3, [r0, #4]
	if (api->irq_is_pending)	{
    1dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1dec:	2b00      	cmp	r3, #0
    1dee:	f000 80df 	beq.w	1fb0 <uart_console_isr+0x1ec>
		return api->irq_is_pending(dev);
    1df2:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
    1df4:	2800      	cmp	r0, #0
    1df6:	d02d      	beq.n	1e54 <uart_console_isr+0x90>
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1df8:	4b6e      	ldr	r3, [pc, #440]	; (1fb4 <uart_console_isr+0x1f0>)
    1dfa:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1dfc:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e00:	2b00      	cmp	r3, #0
    1e02:	d0e3      	beq.n	1dcc <uart_console_isr+0x8>
		return api->irq_rx_ready(dev);
    1e04:	4798      	blx	r3
    1e06:	e7e2      	b.n	1dce <uart_console_isr+0xa>
		rx = read_uart(uart_console_dev, &byte, 1);
    1e08:	2201      	movs	r2, #1
    1e0a:	f10d 0107 	add.w	r1, sp, #7
    1e0e:	4b69      	ldr	r3, [pc, #420]	; (1fb4 <uart_console_isr+0x1f0>)
    1e10:	6818      	ldr	r0, [r3, #0]
    1e12:	f7ff fe0b 	bl	1a2c <read_uart>
		if (rx < 0) {
    1e16:	2800      	cmp	r0, #0
    1e18:	db1c      	blt.n	1e54 <uart_console_isr+0x90>
		if (!cmd) {
    1e1a:	4b67      	ldr	r3, [pc, #412]	; (1fb8 <uart_console_isr+0x1f4>)
    1e1c:	681b      	ldr	r3, [r3, #0]
    1e1e:	b183      	cbz	r3, 1e42 <uart_console_isr+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1e20:	f3bf 8f5b 	dmb	ish
    1e24:	4b65      	ldr	r3, [pc, #404]	; (1fbc <uart_console_isr+0x1f8>)
    1e26:	681b      	ldr	r3, [r3, #0]
    1e28:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
    1e2c:	f013 0f02 	tst.w	r3, #2
    1e30:	d013      	beq.n	1e5a <uart_console_isr+0x96>
			handle_ansi(byte, cmd->line);
    1e32:	4b61      	ldr	r3, [pc, #388]	; (1fb8 <uart_console_isr+0x1f4>)
    1e34:	6819      	ldr	r1, [r3, #0]
    1e36:	3104      	adds	r1, #4
    1e38:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1e3c:	f7ff feb2 	bl	1ba4 <handle_ansi>
			continue;
    1e40:	e7c6      	b.n	1dd0 <uart_console_isr+0xc>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
    1e42:	2100      	movs	r1, #0
    1e44:	4b5e      	ldr	r3, [pc, #376]	; (1fc0 <uart_console_isr+0x1fc>)
    1e46:	6818      	ldr	r0, [r3, #0]
    1e48:	f026 ff14 	bl	28c74 <k_queue_get>
    1e4c:	4b5a      	ldr	r3, [pc, #360]	; (1fb8 <uart_console_isr+0x1f4>)
    1e4e:	6018      	str	r0, [r3, #0]
			if (!cmd) {
    1e50:	2800      	cmp	r0, #0
    1e52:	d1e5      	bne.n	1e20 <uart_console_isr+0x5c>
}
    1e54:	b002      	add	sp, #8
    1e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1e5a:	4b58      	ldr	r3, [pc, #352]	; (1fbc <uart_console_isr+0x1f8>)
    1e5c:	f3bf 8f5b 	dmb	ish
    1e60:	e853 2f00 	ldrex	r2, [r3]
    1e64:	f022 0101 	bic.w	r1, r2, #1
    1e68:	e843 1000 	strex	r0, r1, [r3]
    1e6c:	2800      	cmp	r0, #0
    1e6e:	d1f7      	bne.n	1e60 <uart_console_isr+0x9c>
    1e70:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
    1e74:	f012 0f01 	tst.w	r2, #1
    1e78:	d01d      	beq.n	1eb6 <uart_console_isr+0xf2>
			if (byte == ANSI_ESC) {
    1e7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1e7e:	2b5b      	cmp	r3, #91	; 0x5b
    1e80:	d1a6      	bne.n	1dd0 <uart_console_isr+0xc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1e82:	4b4e      	ldr	r3, [pc, #312]	; (1fbc <uart_console_isr+0x1f8>)
    1e84:	f3bf 8f5b 	dmb	ish
    1e88:	e853 2f00 	ldrex	r2, [r3]
    1e8c:	f042 0202 	orr.w	r2, r2, #2
    1e90:	e843 2100 	strex	r1, r2, [r3]
    1e94:	2900      	cmp	r1, #0
    1e96:	d1f7      	bne.n	1e88 <uart_console_isr+0xc4>
    1e98:	f3bf 8f5b 	dmb	ish
    1e9c:	f3bf 8f5b 	dmb	ish
    1ea0:	e853 2f00 	ldrex	r2, [r3]
    1ea4:	f042 0204 	orr.w	r2, r2, #4
    1ea8:	e843 2100 	strex	r1, r2, [r3]
    1eac:	2900      	cmp	r1, #0
    1eae:	d1f7      	bne.n	1ea0 <uart_console_isr+0xdc>
    1eb0:	f3bf 8f5b 	dmb	ish
			continue;
    1eb4:	e78c      	b.n	1dd0 <uart_console_isr+0xc>
		if (!isprint(byte)) {
    1eb6:	f028 f997 	bl	2a1e8 <__locale_ctype_ptr>
    1eba:	f89d 1007 	ldrb.w	r1, [sp, #7]
    1ebe:	4408      	add	r0, r1
    1ec0:	7843      	ldrb	r3, [r0, #1]
    1ec2:	f013 0f97 	tst.w	r3, #151	; 0x97
    1ec6:	d15f      	bne.n	1f88 <uart_console_isr+0x1c4>
			switch (byte) {
    1ec8:	290d      	cmp	r1, #13
    1eca:	d03c      	beq.n	1f46 <uart_console_isr+0x182>
    1ecc:	d916      	bls.n	1efc <uart_console_isr+0x138>
    1ece:	291b      	cmp	r1, #27
    1ed0:	d02b      	beq.n	1f2a <uart_console_isr+0x166>
    1ed2:	297f      	cmp	r1, #127	; 0x7f
    1ed4:	f47f af7c 	bne.w	1dd0 <uart_console_isr+0xc>
				if (cur > 0) {
    1ed8:	4b3a      	ldr	r3, [pc, #232]	; (1fc4 <uart_console_isr+0x200>)
    1eda:	781b      	ldrb	r3, [r3, #0]
    1edc:	2b00      	cmp	r3, #0
    1ede:	f43f af77 	beq.w	1dd0 <uart_console_isr+0xc>
					del_char(&cmd->line[--cur], end);
    1ee2:	4a35      	ldr	r2, [pc, #212]	; (1fb8 <uart_console_isr+0x1f4>)
    1ee4:	6812      	ldr	r2, [r2, #0]
    1ee6:	3b01      	subs	r3, #1
    1ee8:	b2db      	uxtb	r3, r3
    1eea:	4936      	ldr	r1, [pc, #216]	; (1fc4 <uart_console_isr+0x200>)
    1eec:	700b      	strb	r3, [r1, #0]
    1eee:	4413      	add	r3, r2
    1ef0:	4a35      	ldr	r2, [pc, #212]	; (1fc8 <uart_console_isr+0x204>)
    1ef2:	7811      	ldrb	r1, [r2, #0]
    1ef4:	1d18      	adds	r0, r3, #4
    1ef6:	f7ff fde9 	bl	1acc <del_char>
    1efa:	e769      	b.n	1dd0 <uart_console_isr+0xc>
			switch (byte) {
    1efc:	2909      	cmp	r1, #9
    1efe:	f47f af67 	bne.w	1dd0 <uart_console_isr+0xc>
				if (completion_cb && !end) {
    1f02:	4b32      	ldr	r3, [pc, #200]	; (1fcc <uart_console_isr+0x208>)
    1f04:	681b      	ldr	r3, [r3, #0]
    1f06:	2b00      	cmp	r3, #0
    1f08:	f43f af62 	beq.w	1dd0 <uart_console_isr+0xc>
    1f0c:	4a2e      	ldr	r2, [pc, #184]	; (1fc8 <uart_console_isr+0x204>)
    1f0e:	7812      	ldrb	r2, [r2, #0]
    1f10:	2a00      	cmp	r2, #0
    1f12:	f47f af5d 	bne.w	1dd0 <uart_console_isr+0xc>
					cur += completion_cb(cmd->line, cur);
    1f16:	4a28      	ldr	r2, [pc, #160]	; (1fb8 <uart_console_isr+0x1f4>)
    1f18:	6810      	ldr	r0, [r2, #0]
    1f1a:	4c2a      	ldr	r4, [pc, #168]	; (1fc4 <uart_console_isr+0x200>)
    1f1c:	7821      	ldrb	r1, [r4, #0]
    1f1e:	3004      	adds	r0, #4
    1f20:	4798      	blx	r3
    1f22:	7823      	ldrb	r3, [r4, #0]
    1f24:	4403      	add	r3, r0
    1f26:	7023      	strb	r3, [r4, #0]
			continue;
    1f28:	e752      	b.n	1dd0 <uart_console_isr+0xc>
    1f2a:	4b24      	ldr	r3, [pc, #144]	; (1fbc <uart_console_isr+0x1f8>)
    1f2c:	f3bf 8f5b 	dmb	ish
    1f30:	e853 2f00 	ldrex	r2, [r3]
    1f34:	f042 0201 	orr.w	r2, r2, #1
    1f38:	e843 2100 	strex	r1, r2, [r3]
    1f3c:	2900      	cmp	r1, #0
    1f3e:	d1f7      	bne.n	1f30 <uart_console_isr+0x16c>
    1f40:	f3bf 8f5b 	dmb	ish
    1f44:	e744      	b.n	1dd0 <uart_console_isr+0xc>
				cmd->line[cur + end] = '\0';
    1f46:	4d1c      	ldr	r5, [pc, #112]	; (1fb8 <uart_console_isr+0x1f4>)
    1f48:	682b      	ldr	r3, [r5, #0]
    1f4a:	4f1e      	ldr	r7, [pc, #120]	; (1fc4 <uart_console_isr+0x200>)
    1f4c:	783a      	ldrb	r2, [r7, #0]
    1f4e:	4e1e      	ldr	r6, [pc, #120]	; (1fc8 <uart_console_isr+0x204>)
    1f50:	7831      	ldrb	r1, [r6, #0]
    1f52:	440a      	add	r2, r1
    1f54:	4413      	add	r3, r2
    1f56:	2400      	movs	r4, #0
    1f58:	711c      	strb	r4, [r3, #4]
				uart_poll_out(uart_console_dev, '\r');
    1f5a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1fb4 <uart_console_isr+0x1f0>
    1f5e:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    1f62:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1f64:	685b      	ldr	r3, [r3, #4]
    1f66:	210d      	movs	r1, #13
    1f68:	4798      	blx	r3
				uart_poll_out(uart_console_dev, '\n');
    1f6a:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    1f6e:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1f70:	685b      	ldr	r3, [r3, #4]
    1f72:	210a      	movs	r1, #10
    1f74:	4798      	blx	r3
				cur = 0;
    1f76:	703c      	strb	r4, [r7, #0]
				end = 0;
    1f78:	7034      	strb	r4, [r6, #0]
				k_fifo_put(lines_queue, cmd);
    1f7a:	6829      	ldr	r1, [r5, #0]
    1f7c:	4b14      	ldr	r3, [pc, #80]	; (1fd0 <uart_console_isr+0x20c>)
    1f7e:	6818      	ldr	r0, [r3, #0]
    1f80:	f026 fe50 	bl	28c24 <k_queue_append>
				cmd = NULL;
    1f84:	602c      	str	r4, [r5, #0]
				break;
    1f86:	e723      	b.n	1dd0 <uart_console_isr+0xc>
		if (cur + end < sizeof(cmd->line) - 1) {
    1f88:	4b0e      	ldr	r3, [pc, #56]	; (1fc4 <uart_console_isr+0x200>)
    1f8a:	781b      	ldrb	r3, [r3, #0]
    1f8c:	4a0e      	ldr	r2, [pc, #56]	; (1fc8 <uart_console_isr+0x204>)
    1f8e:	7812      	ldrb	r2, [r2, #0]
    1f90:	18d0      	adds	r0, r2, r3
    1f92:	287e      	cmp	r0, #126	; 0x7e
    1f94:	f63f af1c 	bhi.w	1dd0 <uart_console_isr+0xc>
			insert_char(&cmd->line[cur++], byte, end);
    1f98:	4807      	ldr	r0, [pc, #28]	; (1fb8 <uart_console_isr+0x1f4>)
    1f9a:	6800      	ldr	r0, [r0, #0]
    1f9c:	1c5d      	adds	r5, r3, #1
    1f9e:	4c09      	ldr	r4, [pc, #36]	; (1fc4 <uart_console_isr+0x200>)
    1fa0:	7025      	strb	r5, [r4, #0]
    1fa2:	4418      	add	r0, r3
    1fa4:	3004      	adds	r0, #4
    1fa6:	f7ff fdc9 	bl	1b3c <insert_char>
    1faa:	e711      	b.n	1dd0 <uart_console_isr+0xc>
	return 0;
    1fac:	2000      	movs	r0, #0
    1fae:	e717      	b.n	1de0 <uart_console_isr+0x1c>
	return 0;
    1fb0:	2000      	movs	r0, #0
    1fb2:	e71f      	b.n	1df4 <uart_console_isr+0x30>
    1fb4:	20000898 	.word	0x20000898
    1fb8:	20000884 	.word	0x20000884
    1fbc:	20000890 	.word	0x20000890
    1fc0:	20000880 	.word	0x20000880
    1fc4:	2000088c 	.word	0x2000088c
    1fc8:	2000088d 	.word	0x2000088d
    1fcc:	20000888 	.word	0x20000888
    1fd0:	20000894 	.word	0x20000894

00001fd4 <uart_register_input>:

void uart_register_input(struct k_fifo *avail, struct k_fifo *lines,
			 u8_t (*completion)(char *str, u8_t len))
{
    1fd4:	b508      	push	{r3, lr}
	avail_queue = avail;
    1fd6:	4b04      	ldr	r3, [pc, #16]	; (1fe8 <uart_register_input+0x14>)
    1fd8:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
    1fda:	4b04      	ldr	r3, [pc, #16]	; (1fec <uart_register_input+0x18>)
    1fdc:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
    1fde:	4b04      	ldr	r3, [pc, #16]	; (1ff0 <uart_register_input+0x1c>)
    1fe0:	601a      	str	r2, [r3, #0]

	console_input_init();
    1fe2:	f7ff fd39 	bl	1a58 <console_input_init>
    1fe6:	bd08      	pop	{r3, pc}
    1fe8:	20000880 	.word	0x20000880
    1fec:	20000894 	.word	0x20000894
    1ff0:	20000888 	.word	0x20000888

00001ff4 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    1ff4:	b508      	push	{r3, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1ff6:	4802      	ldr	r0, [pc, #8]	; (2000 <uart_console_hook_install+0xc>)
    1ff8:	f000 fe70 	bl	2cdc <__printk_hook_install>
    1ffc:	bd08      	pop	{r3, pc}
    1ffe:	bf00      	nop
    2000:	00001a01 	.word	0x00001a01

00002004 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    2004:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    2006:	4804      	ldr	r0, [pc, #16]	; (2018 <uart_console_init+0x14>)
    2008:	f025 fedc 	bl	27dc4 <device_get_binding>
    200c:	4b03      	ldr	r3, [pc, #12]	; (201c <uart_console_init+0x18>)
    200e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    2010:	f7ff fff0 	bl	1ff4 <uart_console_hook_install>

	return 0;
}
    2014:	2000      	movs	r0, #0
    2016:	bd08      	pop	{r3, pc}
    2018:	0002e9bc 	.word	0x0002e9bc
    201c:	20000898 	.word	0x20000898

00002020 <sys_rand32_get>:
 *
 * @return a 32-bit number
 */

u32_t sys_rand32_get(void)
{
    2020:	b508      	push	{r3, lr}
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
    2022:	f000 fa73 	bl	250c <_timer_cycle_get_32>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2026:	4b08      	ldr	r3, [pc, #32]	; (2048 <sys_rand32_get+0x28>)
    2028:	f3bf 8f5b 	dmb	ish
    202c:	e853 2f00 	ldrex	r2, [r3]
    2030:	4906      	ldr	r1, [pc, #24]	; (204c <sys_rand32_get+0x2c>)
    2032:	1851      	adds	r1, r2, r1
    2034:	e843 1e00 	strex	lr, r1, [r3]
    2038:	f1be 0f00 	cmp.w	lr, #0
    203c:	d1f6      	bne.n	202c <sys_rand32_get+0xc>
    203e:	f3bf 8f5b 	dmb	ish
}
    2042:	4410      	add	r0, r2
    2044:	bd08      	pop	{r3, pc}
    2046:	bf00      	nop
    2048:	2000089c 	.word	0x2000089c
    204c:	3b9aca0d 	.word	0x3b9aca0d

00002050 <baudrate_set>:
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2050:	6803      	ldr	r3, [r0, #0]
    2052:	689b      	ldr	r3, [r3, #8]
    2054:	681b      	ldr	r3, [r3, #0]

	u32_t divisor; /* baud rate divisor */

	/* Use the common nRF5 macros */
	switch (baudrate) {
    2056:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    205a:	d05b      	beq.n	2114 <baudrate_set+0xc4>
    205c:	d910      	bls.n	2080 <baudrate_set+0x30>
    205e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2062:	d05e      	beq.n	2122 <baudrate_set+0xd2>
    2064:	d833      	bhi.n	20ce <baudrate_set+0x7e>
    2066:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    206a:	d055      	beq.n	2118 <baudrate_set+0xc8>
    206c:	d929      	bls.n	20c2 <baudrate_set+0x72>
    206e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    2072:	d054      	beq.n	211e <baudrate_set+0xce>
    2074:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    2078:	d11b      	bne.n	20b2 <baudrate_set+0x62>
		break;
	case 76800:
		divisor = NRF5_UART_BAUDRATE_76800;
		break;
	case 115200:
		divisor = NRF5_UART_BAUDRATE_115200;
    207a:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
		break;
    207e:	e03b      	b.n	20f8 <baudrate_set+0xa8>
	switch (baudrate) {
    2080:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2084:	d03f      	beq.n	2106 <baudrate_set+0xb6>
    2086:	d90b      	bls.n	20a0 <baudrate_set+0x50>
    2088:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    208c:	d03e      	beq.n	210c <baudrate_set+0xbc>
    208e:	d913      	bls.n	20b8 <baudrate_set+0x68>
    2090:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2094:	d03c      	beq.n	2110 <baudrate_set+0xc0>
    2096:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    209a:	d10a      	bne.n	20b2 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_19200;
    209c:	4a27      	ldr	r2, [pc, #156]	; (213c <baudrate_set+0xec>)
		break;
    209e:	e02b      	b.n	20f8 <baudrate_set+0xa8>
	switch (baudrate) {
    20a0:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    20a4:	d046      	beq.n	2134 <baudrate_set+0xe4>
    20a6:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    20aa:	d029      	beq.n	2100 <baudrate_set+0xb0>
    20ac:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    20b0:	d020      	beq.n	20f4 <baudrate_set+0xa4>
		break;
	case 1000000:
		divisor = NRF5_UART_BAUDRATE_1000000;
		break;
	default:
		return -EINVAL;
    20b2:	f06f 0015 	mvn.w	r0, #21
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;

	return 0;
}
    20b6:	4770      	bx	lr
	switch (baudrate) {
    20b8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    20bc:	d1f9      	bne.n	20b2 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_4800;
    20be:	4a20      	ldr	r2, [pc, #128]	; (2140 <baudrate_set+0xf0>)
		break;
    20c0:	e01a      	b.n	20f8 <baudrate_set+0xa8>
	switch (baudrate) {
    20c2:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    20c6:	d1f4      	bne.n	20b2 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_38400;
    20c8:	f44f 021d 	mov.w	r2, #10289152	; 0x9d0000
		break;
    20cc:	e014      	b.n	20f8 <baudrate_set+0xa8>
	switch (baudrate) {
    20ce:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    20d2:	d029      	beq.n	2128 <baudrate_set+0xd8>
    20d4:	d908      	bls.n	20e8 <baudrate_set+0x98>
    20d6:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    20da:	d028      	beq.n	212e <baudrate_set+0xde>
    20dc:	4a19      	ldr	r2, [pc, #100]	; (2144 <baudrate_set+0xf4>)
    20de:	4291      	cmp	r1, r2
    20e0:	d1e7      	bne.n	20b2 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_1000000;
    20e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		break;
    20e6:	e007      	b.n	20f8 <baudrate_set+0xa8>
	switch (baudrate) {
    20e8:	4a17      	ldr	r2, [pc, #92]	; (2148 <baudrate_set+0xf8>)
    20ea:	4291      	cmp	r1, r2
    20ec:	d1e1      	bne.n	20b2 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_250000;
    20ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
		break;
    20f2:	e001      	b.n	20f8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_300;
    20f4:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    20f8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    20fc:	2000      	movs	r0, #0
    20fe:	4770      	bx	lr
		divisor = NRF5_UART_BAUDRATE_1200;
    2100:	f44f 229e 	mov.w	r2, #323584	; 0x4f000
		break;
    2104:	e7f8      	b.n	20f8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_2400;
    2106:	f44f 221d 	mov.w	r2, #643072	; 0x9d000
		break;
    210a:	e7f5      	b.n	20f8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_9600;
    210c:	4a0f      	ldr	r2, [pc, #60]	; (214c <baudrate_set+0xfc>)
		break;
    210e:	e7f3      	b.n	20f8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_14400;
    2110:	4a0f      	ldr	r2, [pc, #60]	; (2150 <baudrate_set+0x100>)
		break;
    2112:	e7f1      	b.n	20f8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_28800;
    2114:	4a0f      	ldr	r2, [pc, #60]	; (2154 <baudrate_set+0x104>)
		break;
    2116:	e7ef      	b.n	20f8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_57600;
    2118:	f44f 026b 	mov.w	r2, #15400960	; 0xeb0000
		break;
    211c:	e7ec      	b.n	20f8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_76800;
    211e:	4a0e      	ldr	r2, [pc, #56]	; (2158 <baudrate_set+0x108>)
		break;
    2120:	e7ea      	b.n	20f8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_230400;
    2122:	f04f 726c 	mov.w	r2, #61865984	; 0x3b00000
		break;
    2126:	e7e7      	b.n	20f8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_460800;
    2128:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
		break;
    212c:	e7e4      	b.n	20f8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_921600;
    212e:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
		break;
    2132:	e7e1      	b.n	20f8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_600;
    2134:	f44f 321c 	mov.w	r2, #159744	; 0x27000
    2138:	e7de      	b.n	20f8 <baudrate_set+0xa8>
    213a:	bf00      	nop
    213c:	004ea000 	.word	0x004ea000
    2140:	0013b000 	.word	0x0013b000
    2144:	000f4240 	.word	0x000f4240
    2148:	0003d090 	.word	0x0003d090
    214c:	00275000 	.word	0x00275000
    2150:	003af000 	.word	0x003af000
    2154:	0075c000 	.word	0x0075c000
    2158:	013a9000 	.word	0x013a9000

0000215c <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    215c:	6803      	ldr	r3, [r0, #0]
    215e:	689b      	ldr	r3, [r3, #8]
    2160:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    2162:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    2166:	b132      	cbz	r2, 2176 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    2168:	2000      	movs	r0, #0
    216a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    216e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2172:	700b      	strb	r3, [r1, #0]

	return 0;
    2174:	4770      	bx	lr
		return -1;
    2176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    217a:	4770      	bx	lr

0000217c <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    217c:	6803      	ldr	r3, [r0, #0]
    217e:	689b      	ldr	r3, [r3, #8]
    2180:	681a      	ldr	r2, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    2182:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    2186:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    218a:	2b00      	cmp	r3, #0
    218c:	d0fb      	beq.n	2186 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    218e:	2300      	movs	r3, #0
    2190:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

	return c;
}
    2194:	4608      	mov	r0, r1
    2196:	4770      	bx	lr

00002198 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2198:	6803      	ldr	r3, [r0, #0]
    219a:	689b      	ldr	r3, [r3, #8]
    219c:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    219e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    21a2:	b132      	cbz	r2, 21b2 <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    21a4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    21a8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    21ac:	f000 000f 	and.w	r0, r0, #15
    21b0:	4770      	bx	lr
	u32_t error = 0;
    21b2:	2000      	movs	r0, #0
    21b4:	e7fa      	b.n	21ac <uart_nrf5_err_check+0x14>

000021b6 <uart_nrf5_fifo_fill>:

#ifdef CONFIG_UART_INTERRUPT_DRIVEN

/** Interrupt driven FIFO fill function */
static int uart_nrf5_fifo_fill(struct device *dev, const u8_t *tx_data, int len)
{
    21b6:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    21b8:	6803      	ldr	r3, [r0, #0]
    21ba:	689b      	ldr	r3, [r3, #8]
    21bc:	681c      	ldr	r4, [r3, #0]
	u8_t num_tx = 0;
    21be:	2300      	movs	r3, #0

	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    21c0:	e007      	b.n	21d2 <uart_nrf5_fifo_fill+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_TXDRDY = 0;
    21c2:	2000      	movs	r0, #0
    21c4:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c

		/* Send a character */
		uart->TXD = (u8_t)tx_data[num_tx++];
    21c8:	1c58      	adds	r0, r3, #1
    21ca:	5ccb      	ldrb	r3, [r1, r3]
    21cc:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    21d0:	b2c3      	uxtb	r3, r0
	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    21d2:	4618      	mov	r0, r3
    21d4:	1ad5      	subs	r5, r2, r3
    21d6:	2d00      	cmp	r5, #0
    21d8:	dd03      	ble.n	21e2 <uart_nrf5_fifo_fill+0x2c>
    21da:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    21de:	2d00      	cmp	r5, #0
    21e0:	d1ef      	bne.n	21c2 <uart_nrf5_fifo_fill+0xc>
	}

	return (int)num_tx;
}
    21e2:	bc30      	pop	{r4, r5}
    21e4:	4770      	bx	lr

000021e6 <uart_nrf5_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrf5_fifo_read(struct device *dev, u8_t *rx_data, const int size)
{
    21e6:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    21e8:	6803      	ldr	r3, [r0, #0]
    21ea:	689b      	ldr	r3, [r3, #8]
    21ec:	681c      	ldr	r4, [r3, #0]
	u8_t num_rx = 0;
    21ee:	2300      	movs	r3, #0

	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    21f0:	e007      	b.n	2202 <uart_nrf5_fifo_read+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_RXDRDY = 0;
    21f2:	2000      	movs	r0, #0
    21f4:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)uart->RXD;
    21f8:	1c58      	adds	r0, r3, #1
    21fa:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    21fe:	54cd      	strb	r5, [r1, r3]
    2200:	b2c3      	uxtb	r3, r0
	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    2202:	4618      	mov	r0, r3
    2204:	1ad5      	subs	r5, r2, r3
    2206:	2d00      	cmp	r5, #0
    2208:	dd03      	ble.n	2212 <uart_nrf5_fifo_read+0x2c>
    220a:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    220e:	2d00      	cmp	r5, #0
    2210:	d1ef      	bne.n	21f2 <uart_nrf5_fifo_read+0xc>
	}

	return num_rx;
}
    2212:	bc30      	pop	{r4, r5}
    2214:	4770      	bx	lr

00002216 <uart_nrf5_irq_tx_enable>:

/** Interrupt driven transfer enabling function */
static void uart_nrf5_irq_tx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2216:	6803      	ldr	r3, [r0, #0]
    2218:	689b      	ldr	r3, [r3, #8]
    221a:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_TX;
    221c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2220:	f043 0308 	orr.w	r3, r3, #8
    2224:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2228:	4770      	bx	lr

0000222a <uart_nrf5_irq_tx_disable>:
}

/** Interrupt driven transfer disabling function */
static void uart_nrf5_irq_tx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    222a:	6803      	ldr	r3, [r0, #0]
    222c:	689b      	ldr	r3, [r3, #8]
    222e:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_TX;
    2230:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2234:	f043 0308 	orr.w	r3, r3, #8
    2238:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    223c:	4770      	bx	lr

0000223e <uart_nrf5_irq_tx_ready>:
}

/** Interrupt driven transfer ready function */
static int uart_nrf5_irq_tx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    223e:	6803      	ldr	r3, [r0, #0]
    2240:	689b      	ldr	r3, [r3, #8]
    2242:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_TXDRDY;
    2244:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    2248:	4770      	bx	lr

0000224a <uart_nrf5_irq_rx_enable>:

/** Interrupt driven receiver enabling function */
static void uart_nrf5_irq_rx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    224a:	6803      	ldr	r3, [r0, #0]
    224c:	689b      	ldr	r3, [r3, #8]
    224e:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_RX;
    2250:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2254:	f043 0304 	orr.w	r3, r3, #4
    2258:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    225c:	4770      	bx	lr

0000225e <uart_nrf5_irq_rx_disable>:
}

/** Interrupt driven receiver disabling function */
static void uart_nrf5_irq_rx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    225e:	6803      	ldr	r3, [r0, #0]
    2260:	689b      	ldr	r3, [r3, #8]
    2262:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_RX;
    2264:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2268:	f043 0304 	orr.w	r3, r3, #4
    226c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2270:	4770      	bx	lr

00002272 <uart_nrf5_irq_tx_complete>:
}

/** Interrupt driven transfer empty function */
static int uart_nrf5_irq_tx_complete(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2272:	6803      	ldr	r3, [r0, #0]
    2274:	689b      	ldr	r3, [r3, #8]
    2276:	681b      	ldr	r3, [r3, #0]

	return !(uart->EVENTS_TXDRDY);
    2278:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    227c:	fab0 f080 	clz	r0, r0
    2280:	0940      	lsrs	r0, r0, #5
    2282:	4770      	bx	lr

00002284 <uart_nrf5_irq_rx_ready>:

/** Interrupt driven receiver ready function */
static int uart_nrf5_irq_rx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2284:	6803      	ldr	r3, [r0, #0]
    2286:	689b      	ldr	r3, [r3, #8]
    2288:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_RXDRDY;
    228a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    228e:	4770      	bx	lr

00002290 <uart_nrf5_irq_err_enable>:

/** Interrupt driven error enabling function */
static void uart_nrf5_irq_err_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2290:	6803      	ldr	r3, [r0, #0]
    2292:	689b      	ldr	r3, [r3, #8]
    2294:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_ERROR;
    2296:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    229a:	f043 0310 	orr.w	r3, r3, #16
    229e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    22a2:	4770      	bx	lr

000022a4 <uart_nrf5_irq_err_disable>:
}

/** Interrupt driven error disabling function */
static void uart_nrf5_irq_err_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    22a4:	6803      	ldr	r3, [r0, #0]
    22a6:	689b      	ldr	r3, [r3, #8]
    22a8:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_ERROR;
    22aa:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    22ae:	f043 0310 	orr.w	r3, r3, #16
    22b2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    22b6:	4770      	bx	lr

000022b8 <uart_nrf5_irq_is_pending>:
}

/** Interrupt driven pending status function */
static int uart_nrf5_irq_is_pending(struct device *dev)
{
    22b8:	b510      	push	{r4, lr}
    22ba:	4604      	mov	r4, r0
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    22bc:	f7ff ffbf 	bl	223e <uart_nrf5_irq_tx_ready>
    22c0:	b110      	cbz	r0, 22c8 <uart_nrf5_irq_is_pending+0x10>
    22c2:	2301      	movs	r3, #1
}
    22c4:	4618      	mov	r0, r3
    22c6:	bd10      	pop	{r4, pc}
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    22c8:	4620      	mov	r0, r4
    22ca:	f7ff ffdb 	bl	2284 <uart_nrf5_irq_rx_ready>
    22ce:	4603      	mov	r3, r0
    22d0:	2800      	cmp	r0, #0
    22d2:	d0f7      	beq.n	22c4 <uart_nrf5_irq_is_pending+0xc>
    22d4:	2301      	movs	r3, #1
    22d6:	e7f5      	b.n	22c4 <uart_nrf5_irq_is_pending+0xc>

000022d8 <uart_nrf5_irq_update>:

/** Interrupt driven interrupt update function */
static int uart_nrf5_irq_update(struct device *dev)
{
	return 1;
}
    22d8:	2001      	movs	r0, #1
    22da:	4770      	bx	lr

000022dc <uart_nrf5_irq_callback_set>:

/** Set the callback function */
static void uart_nrf5_irq_callback_set(struct device *dev, uart_irq_callback_t cb)
{
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    22dc:	6883      	ldr	r3, [r0, #8]

	dev_data->cb = cb;
    22de:	6059      	str	r1, [r3, #4]
    22e0:	4770      	bx	lr

000022e2 <uart_nrf5_isr>:
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
void uart_nrf5_isr(void *arg)
{
    22e2:	b508      	push	{r3, lr}
	struct device *dev = arg;
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    22e4:	6883      	ldr	r3, [r0, #8]

	if (dev_data->cb) {
    22e6:	685b      	ldr	r3, [r3, #4]
    22e8:	b103      	cbz	r3, 22ec <uart_nrf5_isr+0xa>
		dev_data->cb(dev);
    22ea:	4798      	blx	r3
    22ec:	bd08      	pop	{r3, pc}

000022ee <uart_nrf5_irq_config>:
	    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);


#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void uart_nrf5_irq_config(struct device *port)
{
    22ee:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_UART0_IRQn,
    22f0:	2200      	movs	r2, #0
    22f2:	2101      	movs	r1, #1
    22f4:	2002      	movs	r0, #2
    22f6:	f025 fbc1 	bl	27a7c <_irq_priority_set>
		    CONFIG_UART_NRF5_IRQ_PRI,
		    uart_nrf5_isr, DEVICE_GET(uart_nrf5_0),
		    0);
	irq_enable(NRF5_IRQ_UART0_IRQn);
    22fa:	2002      	movs	r0, #2
    22fc:	f025 fb94 	bl	27a28 <_arch_irq_enable>
    2300:	bd08      	pop	{r3, pc}
	...

00002304 <uart_nrf5_init>:
{
    2304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2306:	4604      	mov	r4, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
    2308:	6803      	ldr	r3, [r0, #0]
    230a:	689b      	ldr	r3, [r3, #8]
    230c:	681d      	ldr	r5, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    230e:	481d      	ldr	r0, [pc, #116]	; (2384 <uart_nrf5_init+0x80>)
    2310:	f025 fd58 	bl	27dc4 <device_get_binding>
    2314:	4606      	mov	r6, r0
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
    2316:	6843      	ldr	r3, [r0, #4]

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    2318:	681f      	ldr	r7, [r3, #0]
    231a:	f240 1301 	movw	r3, #257	; 0x101
    231e:	2206      	movs	r2, #6
    2320:	2100      	movs	r1, #0
    2322:	47b8      	blx	r7
	const struct gpio_driver_api *api = port->driver_api;
    2324:	6873      	ldr	r3, [r6, #4]
	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    2326:	681f      	ldr	r7, [r3, #0]
    2328:	2300      	movs	r3, #0
    232a:	2208      	movs	r2, #8
    232c:	4619      	mov	r1, r3
    232e:	4630      	mov	r0, r6
    2330:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    2332:	2306      	movs	r3, #6
    2334:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    2338:	2308      	movs	r3, #8
    233a:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    233e:	68a3      	ldr	r3, [r4, #8]
    2340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    2344:	601a      	str	r2, [r3, #0]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    2346:	68a3      	ldr	r3, [r4, #8]
		     DEV_CFG(dev)->sys_clk_freq);
    2348:	6822      	ldr	r2, [r4, #0]
    234a:	6892      	ldr	r2, [r2, #8]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    234c:	6852      	ldr	r2, [r2, #4]
    234e:	6819      	ldr	r1, [r3, #0]
    2350:	4620      	mov	r0, r4
    2352:	f7ff fe7d 	bl	2050 <baudrate_set>
	if (err) {
    2356:	4606      	mov	r6, r0
    2358:	b108      	cbz	r0, 235e <uart_nrf5_init+0x5a>
}
    235a:	4630      	mov	r0, r6
    235c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    235e:	2304      	movs	r3, #4
    2360:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    2364:	2300      	movs	r3, #0
    2366:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    236a:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    236e:	2301      	movs	r3, #1
    2370:	60ab      	str	r3, [r5, #8]
	uart->TASKS_STARTRX = 1;
    2372:	602b      	str	r3, [r5, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    2374:	4b04      	ldr	r3, [pc, #16]	; (2388 <uart_nrf5_init+0x84>)
    2376:	6063      	str	r3, [r4, #4]
	DEV_CFG(dev)->irq_config_func(dev);
    2378:	6823      	ldr	r3, [r4, #0]
    237a:	689b      	ldr	r3, [r3, #8]
    237c:	689b      	ldr	r3, [r3, #8]
    237e:	4620      	mov	r0, r4
    2380:	4798      	blx	r3
	return 0;
    2382:	e7ea      	b.n	235a <uart_nrf5_init+0x56>
    2384:	0002e9d0 	.word	0x0002e9d0
    2388:	0002e9fc 	.word	0x0002e9fc

0000238c <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    238c:	4b08      	ldr	r3, [pc, #32]	; (23b0 <rtc_compare_set+0x24>)
    238e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    2392:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    2396:	1ac0      	subs	r0, r0, r3
    2398:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    239c:	3802      	subs	r0, #2
    239e:	4b05      	ldr	r3, [pc, #20]	; (23b4 <rtc_compare_set+0x28>)
    23a0:	4298      	cmp	r0, r3
    23a2:	d904      	bls.n	23ae <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    23a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    23a8:	4b03      	ldr	r3, [pc, #12]	; (23b8 <rtc_compare_set+0x2c>)
    23aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    23ae:	4770      	bx	lr
    23b0:	40011000 	.word	0x40011000
    23b4:	007ffffd 	.word	0x007ffffd
    23b8:	e000e100 	.word	0xe000e100

000023bc <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    23bc:	b508      	push	{r3, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    23be:	4b15      	ldr	r3, [pc, #84]	; (2414 <rtc_announce_set_next+0x58>)
    23c0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    23c4:	4a14      	ldr	r2, [pc, #80]	; (2418 <rtc_announce_set_next+0x5c>)
    23c6:	6811      	ldr	r1, [r2, #0]
    23c8:	1a5b      	subs	r3, r3, r1
    23ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    23ce:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
    23d2:	d917      	bls.n	2404 <rtc_announce_set_next+0x48>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    23d4:	4a11      	ldr	r2, [pc, #68]	; (241c <rtc_announce_set_next+0x60>)
    23d6:	fba2 0203 	umull	r0, r2, r2, r3
    23da:	1a9b      	subs	r3, r3, r2
    23dc:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    23e0:	0a1b      	lsrs	r3, r3, #8

		if (sys_elapsed > expected_sys_ticks) {
    23e2:	4a0f      	ldr	r2, [pc, #60]	; (2420 <rtc_announce_set_next+0x64>)
    23e4:	6810      	ldr	r0, [r2, #0]
    23e6:	4283      	cmp	r3, r0
    23e8:	d800      	bhi.n	23ec <rtc_announce_set_next+0x30>
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    23ea:	4618      	mov	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    23ec:	f240 1347 	movw	r3, #327	; 0x147
    23f0:	fb03 1300 	mla	r3, r3, r0, r1
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    23f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    23f8:	4a07      	ldr	r2, [pc, #28]	; (2418 <rtc_announce_set_next+0x5c>)
    23fa:	6013      	str	r3, [r2, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    23fc:	4b09      	ldr	r3, [pc, #36]	; (2424 <rtc_announce_set_next+0x68>)
    23fe:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    2400:	f027 f828 	bl	29454 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    2404:	4b04      	ldr	r3, [pc, #16]	; (2418 <rtc_announce_set_next+0x5c>)
    2406:	6818      	ldr	r0, [r3, #0]
    2408:	f200 1047 	addw	r0, r0, #327	; 0x147
    240c:	f7ff ffbe 	bl	238c <rtc_compare_set>
    2410:	bd08      	pop	{r3, pc}
    2412:	bf00      	nop
    2414:	40011000 	.word	0x40011000
    2418:	200008a4 	.word	0x200008a4
    241c:	90d4f121 	.word	0x90d4f121
    2420:	200008a0 	.word	0x200008a0
    2424:	2000cb68 	.word	0x2000cb68

00002428 <rtc1_nrf5_isr>:
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
    2428:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    242a:	2200      	movs	r2, #0
    242c:	4b02      	ldr	r3, [pc, #8]	; (2438 <rtc1_nrf5_isr+0x10>)
    242e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    2432:	f7ff ffc3 	bl	23bc <rtc_announce_set_next>
    2436:	bd08      	pop	{r3, pc}
    2438:	40011000 	.word	0x40011000

0000243c <_timer_idle_enter>:
{
    243c:	b508      	push	{r3, lr}
	if ((sys_ticks < 0) ||
    243e:	f246 4335 	movw	r3, #25653	; 0x6435
    2442:	4298      	cmp	r0, r3
    2444:	d900      	bls.n	2448 <_timer_idle_enter+0xc>
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    2446:	4618      	mov	r0, r3
	expected_sys_ticks = sys_ticks;
    2448:	4b05      	ldr	r3, [pc, #20]	; (2460 <_timer_idle_enter+0x24>)
    244a:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    244c:	4b05      	ldr	r3, [pc, #20]	; (2464 <_timer_idle_enter+0x28>)
    244e:	681b      	ldr	r3, [r3, #0]
    2450:	f240 1247 	movw	r2, #327	; 0x147
    2454:	fb02 3000 	mla	r0, r2, r0, r3
    2458:	f7ff ff98 	bl	238c <rtc_compare_set>
    245c:	bd08      	pop	{r3, pc}
    245e:	bf00      	nop
    2460:	200008a0 	.word	0x200008a0
    2464:	200008a4 	.word	0x200008a4

00002468 <_timer_idle_exit>:
{
    2468:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    246a:	2200      	movs	r2, #0
    246c:	4b06      	ldr	r3, [pc, #24]	; (2488 <_timer_idle_exit+0x20>)
    246e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2476:	4b05      	ldr	r3, [pc, #20]	; (248c <_timer_idle_exit+0x24>)
    2478:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    247c:	f7ff ff9e 	bl	23bc <rtc_announce_set_next>
	expected_sys_ticks = 1;
    2480:	2201      	movs	r2, #1
    2482:	4b03      	ldr	r3, [pc, #12]	; (2490 <_timer_idle_exit+0x28>)
    2484:	601a      	str	r2, [r3, #0]
    2486:	bd08      	pop	{r3, pc}
    2488:	40011000 	.word	0x40011000
    248c:	e000e100 	.word	0xe000e100
    2490:	200008a0 	.word	0x200008a0

00002494 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    2494:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    2496:	4818      	ldr	r0, [pc, #96]	; (24f8 <_sys_clock_driver_init+0x64>)
    2498:	f025 fc94 	bl	27dc4 <device_get_binding>
	if (!clock) {
    249c:	b348      	cbz	r0, 24f2 <_sys_clock_driver_init+0x5e>
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    249e:	6842      	ldr	r2, [r0, #4]

	return api->on(dev, sys);
    24a0:	6812      	ldr	r2, [r2, #0]
    24a2:	2101      	movs	r1, #1
    24a4:	4790      	blx	r2
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    24a6:	2400      	movs	r4, #0
    24a8:	4b14      	ldr	r3, [pc, #80]	; (24fc <_sys_clock_driver_init+0x68>)
    24aa:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    24ac:	2601      	movs	r6, #1
    24ae:	4b14      	ldr	r3, [pc, #80]	; (2500 <_sys_clock_driver_init+0x6c>)
    24b0:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    24b2:	4d14      	ldr	r5, [pc, #80]	; (2504 <_sys_clock_driver_init+0x70>)
    24b4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    24b8:	f240 1347 	movw	r3, #327	; 0x147
    24bc:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    24c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    24c4:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    24c8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    24cc:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    24d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    24d4:	4b0c      	ldr	r3, [pc, #48]	; (2508 <_sys_clock_driver_init+0x74>)
    24d6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    24da:	4622      	mov	r2, r4
    24dc:	4631      	mov	r1, r6
    24de:	2011      	movs	r0, #17
    24e0:	f025 facc 	bl	27a7c <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    24e4:	2011      	movs	r0, #17
    24e6:	f025 fa9f 	bl	27a28 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    24ea:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;
    24ec:	602e      	str	r6, [r5, #0]

	return 0;
    24ee:	4620      	mov	r0, r4
    24f0:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    24f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    24f6:	bd70      	pop	{r4, r5, r6, pc}
    24f8:	0002e9d8 	.word	0x0002e9d8
    24fc:	200008a4 	.word	0x200008a4
    2500:	200008a0 	.word	0x200008a0
    2504:	40011000 	.word	0x40011000
    2508:	e000e100 	.word	0xe000e100

0000250c <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    250c:	b410      	push	{r4}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    250e:	4b0d      	ldr	r3, [pc, #52]	; (2544 <_timer_cycle_get_32+0x38>)
    2510:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    2514:	e000      	b.n	2518 <_timer_cycle_get_32+0xc>
		sys_clock_tick_count = _sys_clock_tick_count;
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    2516:	4619      	mov	r1, r3
		sys_clock_tick_count = _sys_clock_tick_count;
    2518:	4b0b      	ldr	r3, [pc, #44]	; (2548 <_timer_cycle_get_32+0x3c>)
    251a:	e9d3 2300 	ldrd	r2, r3, [r3]
    251e:	4614      	mov	r4, r2
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    2520:	f240 1047 	movw	r0, #327	; 0x147
    2524:	fb00 1212 	mls	r2, r0, r2, r1
    2528:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		rtc_now = RTC_COUNTER;
    252c:	4b05      	ldr	r3, [pc, #20]	; (2544 <_timer_cycle_get_32+0x38>)
    252e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    2532:	4299      	cmp	r1, r3
    2534:	d1ef      	bne.n	2516 <_timer_cycle_get_32+0xa>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    2536:	4b05      	ldr	r3, [pc, #20]	; (254c <_timer_cycle_get_32+0x40>)
    2538:	6818      	ldr	r0, [r3, #0]
	       elapsed_cycles;
}
    253a:	fb00 2004 	mla	r0, r0, r4, r2
    253e:	bc10      	pop	{r4}
    2540:	4770      	bx	lr
    2542:	bf00      	nop
    2544:	40011000 	.word	0x40011000
    2548:	20003150 	.word	0x20003150
    254c:	2000cb6c 	.word	0x2000cb6c

00002550 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
    2550:	b410      	push	{r4}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2552:	6803      	ldr	r3, [r0, #0]
    2554:	689b      	ldr	r3, [r3, #8]
    2556:	689c      	ldr	r4, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2558:	6882      	ldr	r2, [r0, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    255a:	2000      	movs	r0, #0
    255c:	e000      	b.n	2560 <gpiote_find_channel+0x10>
    255e:	3001      	adds	r0, #1
    2560:	2807      	cmp	r0, #7
    2562:	dc0d      	bgt.n	2580 <gpiote_find_channel+0x30>
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2564:	68d3      	ldr	r3, [r2, #12]
    2566:	40c3      	lsrs	r3, r0
    2568:	f013 0f01 	tst.w	r3, #1
    256c:	d0f7      	beq.n	255e <gpiote_find_channel+0xe>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    256e:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    2572:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    2576:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    257a:	428b      	cmp	r3, r1
    257c:	d1ef      	bne.n	255e <gpiote_find_channel+0xe>
    257e:	e001      	b.n	2584 <gpiote_find_channel+0x34>
			return i;
		}
	}

	return -ENODEV;
    2580:	f06f 0012 	mvn.w	r0, #18
}
    2584:	bc10      	pop	{r4}
    2586:	4770      	bx	lr

00002588 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2588:	6800      	ldr	r0, [r0, #0]
    258a:	6880      	ldr	r0, [r0, #8]
    258c:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    258e:	b121      	cbz	r1, 259a <gpio_nrf5_read+0x12>
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
    2590:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2594:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    2596:	2000      	movs	r0, #0
    2598:	4770      	bx	lr
		*value = (gpio->IN >> pin) & 0x1;
    259a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    259e:	fa21 f202 	lsr.w	r2, r1, r2
    25a2:	f002 0201 	and.w	r2, r2, #1
    25a6:	601a      	str	r2, [r3, #0]
    25a8:	e7f5      	b.n	2596 <gpio_nrf5_read+0xe>

000025aa <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    25aa:	6800      	ldr	r0, [r0, #0]
    25ac:	6880      	ldr	r0, [r0, #8]
    25ae:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    25b0:	b961      	cbnz	r1, 25cc <gpio_nrf5_write+0x22>
		if (value) { /* 1 */
    25b2:	b12b      	cbz	r3, 25c0 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    25b4:	2301      	movs	r3, #1
    25b6:	fa03 f202 	lsl.w	r2, r3, r2
    25ba:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    25be:	e007      	b.n	25d0 <gpio_nrf5_write+0x26>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    25c0:	2301      	movs	r3, #1
    25c2:	fa03 f202 	lsl.w	r2, r3, r2
    25c6:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    25ca:	e001      	b.n	25d0 <gpio_nrf5_write+0x26>
		}
	} else {
		gpio->OUT = value;
    25cc:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
	}
	return 0;
}
    25d0:	2000      	movs	r0, #0
    25d2:	4770      	bx	lr

000025d4 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    25d4:	b410      	push	{r4}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    25d6:	6884      	ldr	r4, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    25d8:	b14a      	cbz	r2, 25ee <gpio_nrf5_manage_callback+0x1a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    25da:	6823      	ldr	r3, [r4, #0]
    25dc:	600b      	str	r3, [r1, #0]
	list->head = node;
    25de:	6021      	str	r1, [r4, #0]

	if (!list->tail) {
    25e0:	6863      	ldr	r3, [r4, #4]
    25e2:	b113      	cbz	r3, 25ea <gpio_nrf5_manage_callback+0x16>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    25e4:	2000      	movs	r0, #0
    25e6:	bc10      	pop	{r4}
    25e8:	4770      	bx	lr
		list->tail = list->head;
    25ea:	6061      	str	r1, [r4, #4]
    25ec:	e7fa      	b.n	25e4 <gpio_nrf5_manage_callback+0x10>
		sys_slist_prepend(callbacks, &callback->node);
	} else {
		sys_slist_find_and_remove(callbacks, &callback->node);
    25ee:	4608      	mov	r0, r1
	return list->head;
    25f0:	6823      	ldr	r3, [r4, #0]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    25f2:	2200      	movs	r2, #0
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    25f4:	2b00      	cmp	r3, #0
    25f6:	d0f5      	beq.n	25e4 <gpio_nrf5_manage_callback+0x10>
		if (test == node) {
    25f8:	4298      	cmp	r0, r3
    25fa:	d002      	beq.n	2602 <gpio_nrf5_manage_callback+0x2e>
			sys_slist_remove(list, prev, node);
			return true;
		}

		prev = test;
    25fc:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    25fe:	681b      	ldr	r3, [r3, #0]
    2600:	e7f8      	b.n	25f4 <gpio_nrf5_manage_callback+0x20>
	if (!prev_node) {
    2602:	b13a      	cbz	r2, 2614 <gpio_nrf5_manage_callback+0x40>
		prev_node->next = node->next;
    2604:	680b      	ldr	r3, [r1, #0]
    2606:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    2608:	6863      	ldr	r3, [r4, #4]
    260a:	4299      	cmp	r1, r3
    260c:	d009      	beq.n	2622 <gpio_nrf5_manage_callback+0x4e>
	node->next = NULL;
    260e:	2300      	movs	r3, #0
    2610:	600b      	str	r3, [r1, #0]
    2612:	e7e7      	b.n	25e4 <gpio_nrf5_manage_callback+0x10>
		list->head = node->next;
    2614:	680b      	ldr	r3, [r1, #0]
    2616:	6023      	str	r3, [r4, #0]
		if (list->tail == node) {
    2618:	6862      	ldr	r2, [r4, #4]
    261a:	4291      	cmp	r1, r2
    261c:	d1f7      	bne.n	260e <gpio_nrf5_manage_callback+0x3a>
			list->tail = list->head;
    261e:	6063      	str	r3, [r4, #4]
    2620:	e7f5      	b.n	260e <gpio_nrf5_manage_callback+0x3a>
			list->tail = prev_node;
    2622:	6062      	str	r2, [r4, #4]
    2624:	e7f3      	b.n	260e <gpio_nrf5_manage_callback+0x3a>

00002626 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    2626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2628:	6803      	ldr	r3, [r0, #0]
    262a:	689b      	ldr	r3, [r3, #8]
    262c:	689e      	ldr	r6, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    262e:	6887      	ldr	r7, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2630:	b9b9      	cbnz	r1, 2662 <gpio_nrf5_enable_callback+0x3c>
    2632:	460d      	mov	r5, r1
    2634:	4614      	mov	r4, r2

		i = gpiote_find_channel(dev, pin);
    2636:	4611      	mov	r1, r2
    2638:	f7ff ff8a 	bl	2550 <gpiote_find_channel>
		if (i < 0) {
    263c:	2800      	cmp	r0, #0
    263e:	db12      	blt.n	2666 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    2640:	2301      	movs	r3, #1
    2642:	fa03 f404 	lsl.w	r4, r3, r4
    2646:	68ba      	ldr	r2, [r7, #8]
    2648:	4314      	orrs	r4, r2
    264a:	60bc      	str	r4, [r7, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    264c:	f100 0240 	add.w	r2, r0, #64	; 0x40
    2650:	2100      	movs	r1, #0
    2652:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    2656:	fa03 f000 	lsl.w	r0, r3, r0
    265a:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    265e:	4628      	mov	r0, r5
    2660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2662:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002668 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    2668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    266a:	6803      	ldr	r3, [r0, #0]
    266c:	689b      	ldr	r3, [r3, #8]
    266e:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2670:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2672:	b991      	cbnz	r1, 269a <gpio_nrf5_disable_callback+0x32>
    2674:	460d      	mov	r5, r1
    2676:	4614      	mov	r4, r2
		i = gpiote_find_channel(dev, pin);
    2678:	4611      	mov	r1, r2
    267a:	f7ff ff69 	bl	2550 <gpiote_find_channel>
		if (i < 0) {
    267e:	2800      	cmp	r0, #0
    2680:	db0d      	blt.n	269e <gpio_nrf5_disable_callback+0x36>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    2682:	2301      	movs	r3, #1
    2684:	fa03 f404 	lsl.w	r4, r3, r4
    2688:	68b2      	ldr	r2, [r6, #8]
    268a:	ea22 0404 	bic.w	r4, r2, r4
    268e:	60b4      	str	r4, [r6, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    2690:	4083      	lsls	r3, r0
    2692:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    2696:	4628      	mov	r0, r5
    2698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    269a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    269e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000026a0 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    26a0:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    26a2:	2200      	movs	r2, #0
    26a4:	2101      	movs	r1, #1
    26a6:	2006      	movs	r0, #6
    26a8:	f025 f9e8 	bl	27a7c <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    26ac:	2006      	movs	r0, #6
    26ae:	f025 f9bb 	bl	27a28 <_arch_irq_enable>

	return 0;
}
    26b2:	2000      	movs	r0, #0
    26b4:	bd08      	pop	{r3, pc}

000026b6 <gpio_nrf5_port_isr>:
{
    26b6:	b570      	push	{r4, r5, r6, lr}
    26b8:	4605      	mov	r5, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    26ba:	6803      	ldr	r3, [r0, #0]
    26bc:	689b      	ldr	r3, [r3, #8]
    26be:	6899      	ldr	r1, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    26c0:	6884      	ldr	r4, [r0, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    26c2:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    26c4:	461e      	mov	r6, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    26c6:	e000      	b.n	26ca <gpio_nrf5_port_isr+0x14>
    26c8:	3301      	adds	r3, #1
    26ca:	2b07      	cmp	r3, #7
    26cc:	dc14      	bgt.n	26f8 <gpio_nrf5_port_isr+0x42>
		if (gpiote->EVENTS_IN[i]) {
    26ce:	f103 0240 	add.w	r2, r3, #64	; 0x40
    26d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    26d6:	2a00      	cmp	r2, #0
    26d8:	d0f6      	beq.n	26c8 <gpio_nrf5_port_isr+0x12>
			gpiote->EVENTS_IN[i] = 0;
    26da:	f103 0240 	add.w	r2, r3, #64	; 0x40
    26de:	2000      	movs	r0, #0
    26e0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    26e4:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    26e8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    26ec:	f3c0 2004 	ubfx	r0, r0, #8, #5
    26f0:	2201      	movs	r2, #1
    26f2:	4082      	lsls	r2, r0
    26f4:	4316      	orrs	r6, r2
    26f6:	e7e7      	b.n	26c8 <gpio_nrf5_port_isr+0x12>
	enabled_int = int_status & data->pin_callback_enables;
    26f8:	68a3      	ldr	r3, [r4, #8]
    26fa:	401e      	ands	r6, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    26fc:	2006      	movs	r0, #6
    26fe:	f025 f9a1 	bl	27a44 <_arch_irq_disable>
	return list->head;
    2702:	6824      	ldr	r4, [r4, #0]
    2704:	e005      	b.n	2712 <gpio_nrf5_port_isr+0x5c>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    2706:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    2708:	b16c      	cbz	r4, 2726 <gpio_nrf5_port_isr+0x70>
	return node->next;
    270a:	6823      	ldr	r3, [r4, #0]
    270c:	b16b      	cbz	r3, 272a <gpio_nrf5_port_isr+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    270e:	b172      	cbz	r2, 272e <gpio_nrf5_port_isr+0x78>
	return node->next;
    2710:	6824      	ldr	r4, [r4, #0]
    2712:	b174      	cbz	r4, 2732 <gpio_nrf5_port_isr+0x7c>
		if (cb->pin_mask & pins) {
    2714:	68a3      	ldr	r3, [r4, #8]
    2716:	421e      	tst	r6, r3
    2718:	d0f5      	beq.n	2706 <gpio_nrf5_port_isr+0x50>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    271a:	6863      	ldr	r3, [r4, #4]
    271c:	4632      	mov	r2, r6
    271e:	4621      	mov	r1, r4
    2720:	4628      	mov	r0, r5
    2722:	4798      	blx	r3
    2724:	e7ef      	b.n	2706 <gpio_nrf5_port_isr+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    2726:	4623      	mov	r3, r4
    2728:	e7f0      	b.n	270c <gpio_nrf5_port_isr+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    272a:	2400      	movs	r4, #0
    272c:	e7f1      	b.n	2712 <gpio_nrf5_port_isr+0x5c>
    272e:	2400      	movs	r4, #0
    2730:	e7ef      	b.n	2712 <gpio_nrf5_port_isr+0x5c>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2732:	2006      	movs	r0, #6
    2734:	f025 f978 	bl	27a28 <_arch_irq_enable>
    2738:	bd70      	pop	{r4, r5, r6, pc}
	...

0000273c <gpio_nrf5_config>:
{
    273c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2740:	6804      	ldr	r4, [r0, #0]
    2742:	68a5      	ldr	r5, [r4, #8]
    2744:	68ae      	ldr	r6, [r5, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2746:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2748:	682d      	ldr	r5, [r5, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    274a:	2900      	cmp	r1, #0
    274c:	d17f      	bne.n	284e <gpio_nrf5_config+0x112>
    274e:	4688      	mov	r8, r1
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    2750:	f3c3 3e01 	ubfx	lr, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    2754:	f3c3 3181 	ubfx	r1, r3, #14, #2
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2758:	f403 7440 	and.w	r4, r3, #768	; 0x300
    275c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    2760:	d025      	beq.n	27ae <gpio_nrf5_config+0x72>
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    2762:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    2766:	d024      	beq.n	27b2 <gpio_nrf5_config+0x76>
		u8_t pull = GPIO_PULL_DISABLE;
    2768:	2400      	movs	r4, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    276a:	f013 0f01 	tst.w	r3, #1
    276e:	d030      	beq.n	27d2 <gpio_nrf5_config+0x96>
			if (pull == GPIO_PULL_UP) {
    2770:	2c0c      	cmp	r4, #12
    2772:	d020      	beq.n	27b6 <gpio_nrf5_config+0x7a>
			} else if (pull == GPIO_PULL_DOWN) {
    2774:	2c04      	cmp	r4, #4
    2776:	d025      	beq.n	27c4 <gpio_nrf5_config+0x88>
					      drive_strength[ds_low][ds_high] |
    2778:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
    277c:	4938      	ldr	r1, [pc, #224]	; (2860 <gpio_nrf5_config+0x124>)
    277e:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
    2782:	4321      	orrs	r1, r4
					      GPIO_INPUT_DISCONNECT |
    2784:	f041 0103 	orr.w	r1, r1, #3
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    2788:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    278c:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
	if (flags & GPIO_INT) {
    2790:	f013 0102 	ands.w	r1, r3, #2
    2794:	d04a      	beq.n	282c <gpio_nrf5_config+0xf0>
		if (flags & GPIO_INT_EDGE) {
    2796:	f013 0f20 	tst.w	r3, #32
    279a:	d05b      	beq.n	2854 <gpio_nrf5_config+0x118>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    279c:	f013 0f40 	tst.w	r3, #64	; 0x40
    27a0:	d123      	bne.n	27ea <gpio_nrf5_config+0xae>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    27a2:	f013 0f04 	tst.w	r3, #4
    27a6:	d044      	beq.n	2832 <gpio_nrf5_config+0xf6>
				config |= GPIOTE_CFG_POL_L2H;
    27a8:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    27ac:	e01f      	b.n	27ee <gpio_nrf5_config+0xb2>
			pull = GPIO_PULL_UP;
    27ae:	240c      	movs	r4, #12
    27b0:	e7db      	b.n	276a <gpio_nrf5_config+0x2e>
			pull = GPIO_PULL_DOWN;
    27b2:	2404      	movs	r4, #4
    27b4:	e7d9      	b.n	276a <gpio_nrf5_config+0x2e>
				gpio->OUTSET = BIT(pin);
    27b6:	f04f 0c01 	mov.w	ip, #1
    27ba:	fa0c fc02 	lsl.w	ip, ip, r2
    27be:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
    27c2:	e7d9      	b.n	2778 <gpio_nrf5_config+0x3c>
				gpio->OUTCLR = BIT(pin);
    27c4:	f04f 0c01 	mov.w	ip, #1
    27c8:	fa0c fc02 	lsl.w	ip, ip, r2
    27cc:	f8c5 c50c 	str.w	ip, [r5, #1292]	; 0x50c
    27d0:	e7d2      	b.n	2778 <gpio_nrf5_config+0x3c>
					      drive_strength[ds_low][ds_high] |
    27d2:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    27d6:	f8df e088 	ldr.w	lr, [pc, #136]	; 2860 <gpio_nrf5_config+0x124>
    27da:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
					      GPIO_INPUT_CONNECT |
    27de:	4321      	orrs	r1, r4
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    27e0:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    27e4:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    27e8:	e7d2      	b.n	2790 <gpio_nrf5_config+0x54>
				config |= GPIOTE_CFG_POL_TOGG;
    27ea:	f44f 3940 	mov.w	r9, #196608	; 0x30000
    27ee:	4614      	mov	r4, r2
    27f0:	4605      	mov	r5, r0
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    27f2:	68f8      	ldr	r0, [r7, #12]
    27f4:	f7fe fc9a 	bl	112c <__popcountsi2>
    27f8:	2808      	cmp	r0, #8
    27fa:	d02e      	beq.n	285a <gpio_nrf5_config+0x11e>
		int i = gpiote_find_channel(dev, pin);
    27fc:	4621      	mov	r1, r4
    27fe:	4628      	mov	r0, r5
    2800:	f7ff fea6 	bl	2550 <gpiote_find_channel>
		if (i < 0) {
    2804:	2800      	cmp	r0, #0
    2806:	db17      	blt.n	2838 <gpio_nrf5_config+0xfc>
		data->gpiote_chan_mask |= BIT(i);
    2808:	2301      	movs	r3, #1
    280a:	fa03 f200 	lsl.w	r2, r3, r0
    280e:	68fb      	ldr	r3, [r7, #12]
    2810:	4313      	orrs	r3, r2
    2812:	60fb      	str	r3, [r7, #12]
		config |= GPIOTE_CFG_EVT;
    2814:	f049 0901 	orr.w	r9, r9, #1
		config |= GPIOTE_CFG_PIN(pin);
    2818:	0224      	lsls	r4, r4, #8
    281a:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    281e:	ea49 0404 	orr.w	r4, r9, r4
		gpiote->CONFIG[i] = config;
    2822:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    2826:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
	return 0;
    282a:	4641      	mov	r1, r8
}
    282c:	4608      	mov	r0, r1
    282e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config |= GPIOTE_CFG_POL_H2L;
    2832:	f44f 3900 	mov.w	r9, #131072	; 0x20000
    2836:	e7da      	b.n	27ee <gpio_nrf5_config+0xb2>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    2838:	68fb      	ldr	r3, [r7, #12]
    283a:	43db      	mvns	r3, r3
    283c:	fa93 f0a3 	rbit	r0, r3
    2840:	fab0 f080 	clz	r0, r0
    2844:	2b00      	cmp	r3, #0
    2846:	d1df      	bne.n	2808 <gpio_nrf5_config+0xcc>
    2848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    284c:	e7dc      	b.n	2808 <gpio_nrf5_config+0xcc>
		return -ENOTSUP;
    284e:	f06f 0185 	mvn.w	r1, #133	; 0x85
    2852:	e7eb      	b.n	282c <gpio_nrf5_config+0xf0>
			return -ENOTSUP;
    2854:	f06f 0185 	mvn.w	r1, #133	; 0x85
    2858:	e7e8      	b.n	282c <gpio_nrf5_config+0xf0>
			return -EIO;
    285a:	f06f 0104 	mvn.w	r1, #4
    285e:	e7e5      	b.n	282c <gpio_nrf5_config+0xf0>
    2860:	0002ea40 	.word	0x0002ea40

00002864 <_m16src_stop>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    2864:	f04f 0320 	mov.w	r3, #32
    2868:	f3ef 8111 	mrs	r1, BASEPRI
    286c:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    2870:	4b12      	ldr	r3, [pc, #72]	; (28bc <_m16src_stop+0x58>)
    2872:	781a      	ldrb	r2, [r3, #0]
    2874:	b192      	cbz	r2, 289c <_m16src_stop+0x38>
		irq_unlock(imask);
		return -EALREADY;
	}

	if (--m16src_ref) {
    2876:	1e53      	subs	r3, r2, #1
    2878:	b2db      	uxtb	r3, r3
    287a:	4810      	ldr	r0, [pc, #64]	; (28bc <_m16src_stop+0x58>)
    287c:	7003      	strb	r3, [r0, #0]
    287e:	b993      	cbnz	r3, 28a6 <_m16src_stop+0x42>
		irq_unlock(imask);
		return 0;
	}

	if (m16src_grd) {
    2880:	4b0f      	ldr	r3, [pc, #60]	; (28c0 <_m16src_stop+0x5c>)
    2882:	781b      	ldrb	r3, [r3, #0]
    2884:	b99b      	cbnz	r3, 28ae <_m16src_stop+0x4a>
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    2886:	4b0e      	ldr	r3, [pc, #56]	; (28c0 <_m16src_stop+0x5c>)
    2888:	2201      	movs	r2, #1
    288a:	701a      	strb	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    288c:	f381 8811 	msr	BASEPRI, r1

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    2890:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2894:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
    2896:	2000      	movs	r0, #0
    2898:	7018      	strb	r0, [r3, #0]

	return 0;
}
    289a:	4770      	bx	lr
    289c:	f381 8811 	msr	BASEPRI, r1
		return -EALREADY;
    28a0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    28a4:	4770      	bx	lr
    28a6:	f381 8811 	msr	BASEPRI, r1
		return 0;
    28aa:	2000      	movs	r0, #0
    28ac:	4770      	bx	lr
		m16src_ref++;
    28ae:	4b03      	ldr	r3, [pc, #12]	; (28bc <_m16src_stop+0x58>)
    28b0:	701a      	strb	r2, [r3, #0]
    28b2:	f381 8811 	msr	BASEPRI, r1
		return -EAGAIN;
    28b6:	f06f 000a 	mvn.w	r0, #10
    28ba:	4770      	bx	lr
    28bc:	200008ba 	.word	0x200008ba
    28c0:	200008b9 	.word	0x200008b9

000028c4 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    28c4:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    28c6:	2200      	movs	r2, #0
    28c8:	2101      	movs	r1, #1
    28ca:	4610      	mov	r0, r2
    28cc:	f025 f8d6 	bl	27a7c <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    28d0:	2000      	movs	r0, #0
    28d2:	f025 f8a9 	bl	27a28 <_arch_irq_enable>

	return 0;
}
    28d6:	2000      	movs	r0, #0
    28d8:	bd08      	pop	{r3, pc}
	...

000028dc <_m16src_start>:
{
    28dc:	b510      	push	{r4, lr}
	__asm__ volatile(
    28de:	f04f 0320 	mov.w	r3, #32
    28e2:	f3ef 8411 	mrs	r4, BASEPRI
    28e6:	f383 8811 	msr	BASEPRI, r3
	if (m16src_ref++) {
    28ea:	4a2c      	ldr	r2, [pc, #176]	; (299c <_m16src_start+0xc0>)
    28ec:	7813      	ldrb	r3, [r2, #0]
    28ee:	1c58      	adds	r0, r3, #1
    28f0:	7010      	strb	r0, [r2, #0]
    28f2:	b153      	cbz	r3, 290a <_m16src_start+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    28f4:	f384 8811 	msr	BASEPRI, r4
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    28f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28fc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2900:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2904:	d047      	beq.n	2996 <_m16src_start+0xba>
		return 0;
    2906:	2000      	movs	r0, #0
    2908:	bd10      	pop	{r4, pc}
	if (m16src_grd) {
    290a:	4a25      	ldr	r2, [pc, #148]	; (29a0 <_m16src_start+0xc4>)
    290c:	7812      	ldrb	r2, [r2, #0]
    290e:	b9a2      	cbnz	r2, 293a <_m16src_start+0x5e>
	m16src_grd = 1;
    2910:	2201      	movs	r2, #1
    2912:	4b23      	ldr	r3, [pc, #140]	; (29a0 <_m16src_start+0xc4>)
    2914:	701a      	strb	r2, [r3, #0]
    2916:	f384 8811 	msr	BASEPRI, r4
	if (blocking) {
    291a:	b3a1      	cbz	r1, 2986 <_m16src_start+0xaa>
		irq_disable(POWER_CLOCK_IRQn);
    291c:	2000      	movs	r0, #0
    291e:	f025 f891 	bl	27a44 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2926:	2200      	movs	r2, #0
    2928:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    292c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2930:	2201      	movs	r2, #1
    2932:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2936:	601a      	str	r2, [r3, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2938:	e009      	b.n	294e <_m16src_start+0x72>
		m16src_ref--;
    293a:	4a18      	ldr	r2, [pc, #96]	; (299c <_m16src_start+0xc0>)
    293c:	7013      	strb	r3, [r2, #0]
    293e:	f384 8811 	msr	BASEPRI, r4
		return -EAGAIN;
    2942:	f06f 000a 	mvn.w	r0, #10
    2946:	bd10      	pop	{r4, pc}
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    2948:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    294a:	bf40      	sev
  __ASM volatile ("wfe");
    294c:	bf20      	wfe
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    294e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2952:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2956:	2b00      	cmp	r3, #0
    2958:	d0f6      	beq.n	2948 <_m16src_start+0x6c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    295a:	2200      	movs	r2, #0
    295c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2960:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2964:	f011 0f01 	tst.w	r1, #1
    2968:	d102      	bne.n	2970 <_m16src_start+0x94>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    296a:	2201      	movs	r2, #1
    296c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    2970:	2201      	movs	r2, #1
    2972:	4b0c      	ldr	r3, [pc, #48]	; (29a4 <_m16src_start+0xc8>)
    2974:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq_enable(POWER_CLOCK_IRQn);
    2978:	2000      	movs	r0, #0
    297a:	f025 f855 	bl	27a28 <_arch_irq_enable>
	m16src_grd = 0;
    297e:	2200      	movs	r2, #0
    2980:	4b07      	ldr	r3, [pc, #28]	; (29a0 <_m16src_start+0xc4>)
    2982:	701a      	strb	r2, [r3, #0]
    2984:	e7b8      	b.n	28f8 <_m16src_start+0x1c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    298a:	2200      	movs	r2, #0
    298c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2990:	2201      	movs	r2, #1
    2992:	601a      	str	r2, [r3, #0]
    2994:	e7f3      	b.n	297e <_m16src_start+0xa2>
		return -EINPROGRESS;
    2996:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    299a:	bd10      	pop	{r4, pc}
    299c:	200008ba 	.word	0x200008ba
    29a0:	200008b9 	.word	0x200008b9
    29a4:	e000e100 	.word	0xe000e100

000029a8 <_power_clock_isr>:
{
    29a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29ac:	4680      	mov	r8, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    29ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29b2:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    29b6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    29ba:	f002 0201 	and.w	r2, r2, #1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    29be:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    29c2:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    29c6:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    29ca:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    29ce:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    29d2:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (pof) {
    29d6:	b11d      	cbz	r5, 29e0 <_power_clock_isr+0x38>
		NRF_POWER->EVENTS_POFWARN = 0;
    29d8:	f04f 0e00 	mov.w	lr, #0
    29dc:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    29e0:	b127      	cbz	r7, 29ec <_power_clock_isr+0x44>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    29e2:	2700      	movs	r7, #0
    29e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29e8:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    29ec:	b132      	cbz	r2, 29fc <_power_clock_isr+0x54>
    29ee:	b129      	cbz	r1, 29fc <_power_clock_isr+0x54>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    29f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29f4:	2201      	movs	r2, #1
    29f6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    29fa:	611a      	str	r2, [r3, #16]
	if (lf) {
    29fc:	b126      	cbz	r6, 2a08 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    29fe:	2200      	movs	r2, #0
    2a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a04:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    2a08:	b910      	cbnz	r0, 2a10 <_power_clock_isr+0x68>
	if (ctto) {
    2a0a:	b964      	cbnz	r4, 2a26 <_power_clock_isr+0x7e>
    2a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NRF_CLOCK->EVENTS_DONE = 0;
    2a10:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    2a14:	2100      	movs	r1, #0
    2a16:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    2a1a:	4640      	mov	r0, r8
    2a1c:	f7ff ff22 	bl	2864 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    2a20:	2301      	movs	r3, #1
    2a22:	6173      	str	r3, [r6, #20]
    2a24:	e7f1      	b.n	2a0a <_power_clock_isr+0x62>
		NRF_CLOCK->EVENTS_CTTO = 0;
    2a26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a2a:	2100      	movs	r1, #0
    2a2c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2a30:	2201      	movs	r2, #1
    2a32:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2a36:	4640      	mov	r0, r8
    2a38:	f7ff ff50 	bl	28dc <_m16src_start>
		if (!err) {
    2a3c:	2800      	cmp	r0, #0
    2a3e:	d1e5      	bne.n	2a0c <_power_clock_isr+0x64>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a40:	2201      	movs	r2, #1
    2a42:	4b02      	ldr	r3, [pc, #8]	; (2a4c <_power_clock_isr+0xa4>)
    2a44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2a48:	e7e0      	b.n	2a0c <_power_clock_isr+0x64>
    2a4a:	bf00      	nop
    2a4c:	e000e100 	.word	0xe000e100

00002a50 <_k32src_start>:
	__asm__ volatile(
    2a50:	f04f 0220 	mov.w	r2, #32
    2a54:	f3ef 8311 	mrs	r3, BASEPRI
    2a58:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    2a5c:	4a38      	ldr	r2, [pc, #224]	; (2b40 <_k32src_start+0xf0>)
    2a5e:	7812      	ldrb	r2, [r2, #0]
    2a60:	b152      	cbz	r2, 2a78 <_k32src_start+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2a62:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a6a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2a6e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a72:	d062      	beq.n	2b3a <_k32src_start+0xea>
		return 0;
    2a74:	2000      	movs	r0, #0
    2a76:	4770      	bx	lr
{
    2a78:	b570      	push	{r4, r5, r6, lr}
    2a7a:	460d      	mov	r5, r1
    2a7c:	4604      	mov	r4, r0
	k32src_initialized = 1;
    2a7e:	2601      	movs	r6, #1
    2a80:	4a2f      	ldr	r2, [pc, #188]	; (2b40 <_k32src_start+0xf0>)
    2a82:	7016      	strb	r6, [r2, #0]
    2a84:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2a88:	2000      	movs	r0, #0
    2a8a:	f024 ffdb 	bl	27a44 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a92:	2200      	movs	r2, #0
    2a94:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2a98:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2a9c:	2102      	movs	r1, #2
    2a9e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2aa2:	f8c3 5518 	str.w	r5, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2aa6:	609e      	str	r6, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2aa8:	e002      	b.n	2ab0 <_k32src_start+0x60>
    2aaa:	bf20      	wfe
  __ASM volatile ("sev");
    2aac:	bf40      	sev
  __ASM volatile ("wfe");
    2aae:	bf20      	wfe
    2ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ab4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2ab8:	2b00      	cmp	r3, #0
    2aba:	d0f6      	beq.n	2aaa <_k32src_start+0x5a>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2abc:	2100      	movs	r1, #0
    2abe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ac2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2ac6:	f012 0f02 	tst.w	r2, #2
    2aca:	d102      	bne.n	2ad2 <_k32src_start+0x82>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2acc:	2202      	movs	r2, #2
    2ace:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2ad2:	2201      	movs	r2, #1
    2ad4:	4b1b      	ldr	r3, [pc, #108]	; (2b44 <_k32src_start+0xf4>)
    2ad6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    2ada:	2000      	movs	r0, #0
    2adc:	f024 ffa4 	bl	27a28 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2ae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ae4:	2218      	movs	r2, #24
    2ae6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2aea:	2200      	movs	r2, #0
    2aec:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2af0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2af4:	f015 0f03 	tst.w	r5, #3
    2af8:	d008      	beq.n	2b0c <_k32src_start+0xbc>
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2afe:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2b02:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2b06:	d015      	beq.n	2b34 <_k32src_start+0xe4>
		return 0;
    2b08:	2000      	movs	r0, #0
    2b0a:	bd70      	pop	{r4, r5, r6, pc}
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2b0c:	2210      	movs	r2, #16
    2b0e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    2b12:	2218      	movs	r2, #24
    2b14:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2b18:	2201      	movs	r2, #1
    2b1a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2b1e:	2100      	movs	r1, #0
    2b20:	4620      	mov	r0, r4
    2b22:	f7ff fedb 	bl	28dc <_m16src_start>
		if (!err) {
    2b26:	2800      	cmp	r0, #0
    2b28:	d1e7      	bne.n	2afa <_k32src_start+0xaa>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b2a:	2201      	movs	r2, #1
    2b2c:	4b05      	ldr	r3, [pc, #20]	; (2b44 <_k32src_start+0xf4>)
    2b2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2b32:	e7e2      	b.n	2afa <_k32src_start+0xaa>
		return -EINPROGRESS;
    2b34:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    2b38:	bd70      	pop	{r4, r5, r6, pc}
		return -EINPROGRESS;
    2b3a:	f06f 0076 	mvn.w	r0, #118	; 0x76
    2b3e:	4770      	bx	lr
    2b40:	200008b8 	.word	0x200008b8
    2b44:	e000e100 	.word	0xe000e100

00002b48 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    2b48:	2000      	movs	r0, #0
    2b4a:	4770      	bx	lr

00002b4c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2b4c:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2b4e:	680b      	ldr	r3, [r1, #0]
    2b50:	3301      	adds	r3, #1
    2b52:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2b54:	4b01      	ldr	r3, [pc, #4]	; (2b5c <char_out+0x10>)
    2b56:	681b      	ldr	r3, [r3, #0]
    2b58:	4798      	blx	r3
}
    2b5a:	bd08      	pop	{r3, pc}
    2b5c:	2000be64 	.word	0x2000be64

00002b60 <_printk_hex_ulong>:
 * @return N/A
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b64:	b083      	sub	sp, #12
    2b66:	4606      	mov	r6, r0
    2b68:	9101      	str	r1, [sp, #4]
    2b6a:	4691      	mov	r9, r2
    2b6c:	461f      	mov	r7, r3
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    2b6e:	2400      	movs	r4, #0
	int remaining = 8; /* 8 digits max */
    2b70:	f04f 0a08 	mov.w	sl, #8
	int found_largest_digit = 0;
    2b74:	46a0      	mov	r8, r4
	int size = sizeof(num) * 2;
    2b76:	4653      	mov	r3, sl

	for (; size; size--) {
    2b78:	e009      	b.n	2b8e <_printk_hex_ulong+0x2e>
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    2b7a:	2809      	cmp	r0, #9
    2b7c:	d91f      	bls.n	2bbe <_printk_hex_ulong+0x5e>
    2b7e:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    2b80:	9901      	ldr	r1, [sp, #4]
    2b82:	4418      	add	r0, r3
    2b84:	47b0      	blx	r6
			digits++;
    2b86:	3401      	adds	r4, #1
			found_largest_digit = 1;
    2b88:	f04f 0801 	mov.w	r8, #1
			continue;
		}

		if (remaining-- <= min_width) {
    2b8c:	462b      	mov	r3, r5
	for (; size; size--) {
    2b8e:	b323      	cbz	r3, 2bda <_printk_hex_ulong+0x7a>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    2b90:	1e5d      	subs	r5, r3, #1
    2b92:	00a8      	lsls	r0, r5, #2
    2b94:	fa29 f000 	lsr.w	r0, r9, r0
		if (nibble || found_largest_digit || size == 1) {
    2b98:	f010 000f 	ands.w	r0, r0, #15
    2b9c:	d1ed      	bne.n	2b7a <_printk_hex_ulong+0x1a>
    2b9e:	f1b8 0f00 	cmp.w	r8, #0
    2ba2:	d1ea      	bne.n	2b7a <_printk_hex_ulong+0x1a>
    2ba4:	2b01      	cmp	r3, #1
    2ba6:	d0e8      	beq.n	2b7a <_printk_hex_ulong+0x1a>
		if (remaining-- <= min_width) {
    2ba8:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
    2bac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2bae:	459a      	cmp	sl, r3
    2bb0:	dc11      	bgt.n	2bd6 <_printk_hex_ulong+0x76>
			if (padding == PAD_ZERO_BEFORE) {
    2bb2:	2f01      	cmp	r7, #1
    2bb4:	d005      	beq.n	2bc2 <_printk_hex_ulong+0x62>
				out('0', ctx);
			} else if (padding == PAD_SPACE_BEFORE) {
    2bb6:	2f02      	cmp	r7, #2
    2bb8:	d008      	beq.n	2bcc <_printk_hex_ulong+0x6c>
		if (remaining-- <= min_width) {
    2bba:	46da      	mov	sl, fp
    2bbc:	e7e6      	b.n	2b8c <_printk_hex_ulong+0x2c>
			nibble += nibble > 9 ? 87 : 48;
    2bbe:	2330      	movs	r3, #48	; 0x30
    2bc0:	e7de      	b.n	2b80 <_printk_hex_ulong+0x20>
				out('0', ctx);
    2bc2:	9901      	ldr	r1, [sp, #4]
    2bc4:	2030      	movs	r0, #48	; 0x30
    2bc6:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2bc8:	46da      	mov	sl, fp
    2bca:	e7df      	b.n	2b8c <_printk_hex_ulong+0x2c>
				out(' ', ctx);
    2bcc:	9901      	ldr	r1, [sp, #4]
    2bce:	2020      	movs	r0, #32
    2bd0:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2bd2:	46da      	mov	sl, fp
    2bd4:	e7da      	b.n	2b8c <_printk_hex_ulong+0x2c>
    2bd6:	46da      	mov	sl, fp
    2bd8:	e7d8      	b.n	2b8c <_printk_hex_ulong+0x2c>
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    2bda:	2f03      	cmp	r7, #3
    2bdc:	d002      	beq.n	2be4 <_printk_hex_ulong+0x84>
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2bde:	b003      	add	sp, #12
    2be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    2be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2be6:	ebc4 0443 	rsb	r4, r4, r3, lsl #1
		while (remaining-- > 0) {
    2bea:	1e65      	subs	r5, r4, #1
    2bec:	2c00      	cmp	r4, #0
    2bee:	ddf6      	ble.n	2bde <_printk_hex_ulong+0x7e>
			out(' ', ctx);
    2bf0:	9901      	ldr	r1, [sp, #4]
    2bf2:	2020      	movs	r0, #32
    2bf4:	47b0      	blx	r6
		while (remaining-- > 0) {
    2bf6:	462c      	mov	r4, r5
    2bf8:	e7f7      	b.n	2bea <_printk_hex_ulong+0x8a>
	...

00002bfc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c00:	b083      	sub	sp, #12
    2c02:	4682      	mov	sl, r0
    2c04:	9101      	str	r1, [sp, #4]
    2c06:	469b      	mov	fp, r3
    2c08:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    2c0a:	2f00      	cmp	r7, #0
    2c0c:	dd07      	ble.n	2c1e <_printk_dec_ulong+0x22>
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    2c0e:	4615      	mov	r5, r2
    2c10:	f04f 0901 	mov.w	r9, #1
    2c14:	260a      	movs	r6, #10
    2c16:	f04f 0800 	mov.w	r8, #0
    2c1a:	4c22      	ldr	r4, [pc, #136]	; (2ca4 <_printk_dec_ulong+0xa8>)
    2c1c:	e015      	b.n	2c4a <_printk_dec_ulong+0x4e>
		min_width = 1;
    2c1e:	2701      	movs	r7, #1
    2c20:	e7f5      	b.n	2c0e <_printk_dec_ulong+0x12>
			out((int)((remainder / (pos + 1)) + 48), ctx);
    2c22:	1c60      	adds	r0, r4, #1
    2c24:	fbb5 f0f0 	udiv	r0, r5, r0
    2c28:	9901      	ldr	r1, [sp, #4]
    2c2a:	3030      	adds	r0, #48	; 0x30
    2c2c:	47d0      	blx	sl
			digits++;
    2c2e:	f109 0901 	add.w	r9, r9, #1
			found_largest_digit = 1;
    2c32:	f04f 0801 	mov.w	r8, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    2c36:	3e01      	subs	r6, #1
		remainder %= (pos + 1);
    2c38:	1c63      	adds	r3, r4, #1
    2c3a:	fbb5 f2f3 	udiv	r2, r5, r3
    2c3e:	fb03 5512 	mls	r5, r3, r2, r5
		pos /= 10;
    2c42:	4b19      	ldr	r3, [pc, #100]	; (2ca8 <_printk_dec_ulong+0xac>)
    2c44:	fba3 3404 	umull	r3, r4, r3, r4
    2c48:	08e4      	lsrs	r4, r4, #3
	while (pos >= 9) {
    2c4a:	2c08      	cmp	r4, #8
    2c4c:	d914      	bls.n	2c78 <_printk_dec_ulong+0x7c>
		if (found_largest_digit || remainder > pos) {
    2c4e:	f1b8 0f00 	cmp.w	r8, #0
    2c52:	d1e6      	bne.n	2c22 <_printk_dec_ulong+0x26>
    2c54:	42ac      	cmp	r4, r5
    2c56:	d3e4      	bcc.n	2c22 <_printk_dec_ulong+0x26>
		} else if (remaining <= min_width
    2c58:	42be      	cmp	r6, r7
    2c5a:	dcec      	bgt.n	2c36 <_printk_dec_ulong+0x3a>
				&& padding < PAD_SPACE_AFTER) {
    2c5c:	f1bb 0f02 	cmp.w	fp, #2
    2c60:	d8e9      	bhi.n	2c36 <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2c62:	f1bb 0f01 	cmp.w	fp, #1
    2c66:	d005      	beq.n	2c74 <_printk_dec_ulong+0x78>
    2c68:	2020      	movs	r0, #32
    2c6a:	9901      	ldr	r1, [sp, #4]
    2c6c:	47d0      	blx	sl
			digits++;
    2c6e:	f109 0901 	add.w	r9, r9, #1
    2c72:	e7e0      	b.n	2c36 <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2c74:	2030      	movs	r0, #48	; 0x30
    2c76:	e7f8      	b.n	2c6a <_printk_dec_ulong+0x6e>
	}
	out((int)(remainder + 48), ctx);
    2c78:	9901      	ldr	r1, [sp, #4]
    2c7a:	f105 0030 	add.w	r0, r5, #48	; 0x30
    2c7e:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    2c80:	f1bb 0f03 	cmp.w	fp, #3
    2c84:	d002      	beq.n	2c8c <_printk_dec_ulong+0x90>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2c86:	b003      	add	sp, #12
    2c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
    2c8c:	eba7 0709 	sub.w	r7, r7, r9
		while (remaining-- > 0) {
    2c90:	e003      	b.n	2c9a <_printk_dec_ulong+0x9e>
			out(' ', ctx);
    2c92:	9901      	ldr	r1, [sp, #4]
    2c94:	2020      	movs	r0, #32
    2c96:	47d0      	blx	sl
		while (remaining-- > 0) {
    2c98:	4627      	mov	r7, r4
    2c9a:	1e7c      	subs	r4, r7, #1
    2c9c:	2f00      	cmp	r7, #0
    2c9e:	dcf8      	bgt.n	2c92 <_printk_dec_ulong+0x96>
    2ca0:	e7f1      	b.n	2c86 <_printk_dec_ulong+0x8a>
    2ca2:	bf00      	nop
    2ca4:	3b9ac9ff 	.word	0x3b9ac9ff
    2ca8:	cccccccd 	.word	0xcccccccd

00002cac <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    2cac:	b410      	push	{r4}
	if (!ctx->str || ctx->count >= ctx->max) {
    2cae:	680c      	ldr	r4, [r1, #0]
    2cb0:	b154      	cbz	r4, 2cc8 <str_out+0x1c>
    2cb2:	688b      	ldr	r3, [r1, #8]
    2cb4:	684a      	ldr	r2, [r1, #4]
    2cb6:	4293      	cmp	r3, r2
    2cb8:	da06      	bge.n	2cc8 <str_out+0x1c>
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
    2cba:	3a01      	subs	r2, #1
    2cbc:	4293      	cmp	r3, r2
    2cbe:	d008      	beq.n	2cd2 <str_out+0x26>
		ctx->str[ctx->count++] = '\0';
	} else {
		ctx->str[ctx->count++] = c;
    2cc0:	1c5a      	adds	r2, r3, #1
    2cc2:	608a      	str	r2, [r1, #8]
    2cc4:	54e0      	strb	r0, [r4, r3]
    2cc6:	e002      	b.n	2cce <str_out+0x22>
		ctx->count++;
    2cc8:	688b      	ldr	r3, [r1, #8]
    2cca:	3301      	adds	r3, #1
    2ccc:	608b      	str	r3, [r1, #8]
	}

	return c;
}
    2cce:	bc10      	pop	{r4}
    2cd0:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    2cd2:	1c5a      	adds	r2, r3, #1
    2cd4:	608a      	str	r2, [r1, #8]
    2cd6:	2200      	movs	r2, #0
    2cd8:	54e2      	strb	r2, [r4, r3]
    2cda:	e7f8      	b.n	2cce <str_out+0x22>

00002cdc <__printk_hook_install>:
	_char_out = fn;
    2cdc:	4b01      	ldr	r3, [pc, #4]	; (2ce4 <__printk_hook_install+0x8>)
    2cde:	6018      	str	r0, [r3, #0]
    2ce0:	4770      	bx	lr
    2ce2:	bf00      	nop
    2ce4:	2000be64 	.word	0x2000be64

00002ce8 <_vprintk>:
{
    2ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2cec:	b084      	sub	sp, #16
    2cee:	4607      	mov	r7, r0
    2cf0:	460e      	mov	r6, r1
    2cf2:	4614      	mov	r4, r2
    2cf4:	9303      	str	r3, [sp, #12]
	int long_ctr = 0;
    2cf6:	f04f 0800 	mov.w	r8, #0
	int min_width = -1;
    2cfa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    2cfe:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
    2d00:	4645      	mov	r5, r8
	while (*fmt) {
    2d02:	e104      	b.n	2f0e <_vprintk+0x226>
			switch (*fmt) {
    2d04:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    2d08:	2b55      	cmp	r3, #85	; 0x55
    2d0a:	f200 80f1 	bhi.w	2ef0 <_vprintk+0x208>
    2d0e:	e8df f013 	tbh	[pc, r3, lsl #1]
    2d12:	00ea      	.short	0x00ea
    2d14:	00ef00ef 	.word	0x00ef00ef
    2d18:	00ef00ef 	.word	0x00ef00ef
    2d1c:	00ef00ef 	.word	0x00ef00ef
    2d20:	010800ef 	.word	0x010800ef
    2d24:	00ef00ef 	.word	0x00ef00ef
    2d28:	00590056 	.word	0x00590056
    2d2c:	00590059 	.word	0x00590059
    2d30:	00590059 	.word	0x00590059
    2d34:	00590059 	.word	0x00590059
    2d38:	00590059 	.word	0x00590059
    2d3c:	00ef00ef 	.word	0x00ef00ef
    2d40:	00ef00ef 	.word	0x00ef00ef
    2d44:	00ef00ef 	.word	0x00ef00ef
    2d48:	00ef00ef 	.word	0x00ef00ef
    2d4c:	00ef00ef 	.word	0x00ef00ef
    2d50:	00ef00ef 	.word	0x00ef00ef
    2d54:	00ef00ef 	.word	0x00ef00ef
    2d58:	00ef00ef 	.word	0x00ef00ef
    2d5c:	00ef00ef 	.word	0x00ef00ef
    2d60:	00ef00ef 	.word	0x00ef00ef
    2d64:	00ef00ef 	.word	0x00ef00ef
    2d68:	00ef00ef 	.word	0x00ef00ef
    2d6c:	00ef00ef 	.word	0x00ef00ef
    2d70:	00ef00ef 	.word	0x00ef00ef
    2d74:	00ef00ef 	.word	0x00ef00ef
    2d78:	00ef00bc 	.word	0x00ef00bc
    2d7c:	00ef00ef 	.word	0x00ef00ef
    2d80:	00ef00ef 	.word	0x00ef00ef
    2d84:	00ef00ef 	.word	0x00ef00ef
    2d88:	00ef00ef 	.word	0x00ef00ef
    2d8c:	00e200ef 	.word	0x00e200ef
    2d90:	00ef0076 	.word	0x00ef0076
    2d94:	00ef00ef 	.word	0x00ef00ef
    2d98:	007600fd 	.word	0x007600fd
    2d9c:	00ef00ef 	.word	0x00ef00ef
    2da0:	00ef0073 	.word	0x00ef0073
    2da4:	00ef00ef 	.word	0x00ef00ef
    2da8:	00ef00b2 	.word	0x00ef00b2
    2dac:	00d500ef 	.word	0x00d500ef
    2db0:	009900ef 	.word	0x009900ef
    2db4:	00ef00ef 	.word	0x00ef00ef
    2db8:	00ef00bc 	.word	0x00ef00bc
    2dbc:	00fd      	.short	0x00fd
				if (min_width < 0 && padding == PAD_NONE) {
    2dbe:	f1ba 0f00 	cmp.w	sl, #0
    2dc2:	db10      	blt.n	2de6 <_vprintk+0xfe>
				if (min_width < 0) {
    2dc4:	f1ba 0f00 	cmp.w	sl, #0
    2dc8:	db13      	blt.n	2df2 <_vprintk+0x10a>
					min_width = 10 * min_width + *fmt - '0';
    2dca:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    2dce:	ea4f 034a 	mov.w	r3, sl, lsl #1
    2dd2:	4418      	add	r0, r3
    2dd4:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
				if (padding == PAD_NONE) {
    2dd8:	f1b9 0f00 	cmp.w	r9, #0
    2ddc:	f040 8096 	bne.w	2f0c <_vprintk+0x224>
					padding = PAD_SPACE_BEFORE;
    2de0:	f04f 0902 	mov.w	r9, #2
    2de4:	e092      	b.n	2f0c <_vprintk+0x224>
				if (min_width < 0 && padding == PAD_NONE) {
    2de6:	f1b9 0f00 	cmp.w	r9, #0
    2dea:	d1eb      	bne.n	2dc4 <_vprintk+0xdc>
					padding = PAD_ZERO_BEFORE;
    2dec:	f04f 0901 	mov.w	r9, #1
    2df0:	e08c      	b.n	2f0c <_vprintk+0x224>
					min_width = *fmt - '0';
    2df2:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
    2df6:	e7ef      	b.n	2dd8 <_vprintk+0xf0>
				long_ctr++;
    2df8:	f108 0801 	add.w	r8, r8, #1
    2dfc:	e086      	b.n	2f0c <_vprintk+0x224>
				if (long_ctr < 2) {
    2dfe:	f1b8 0f01 	cmp.w	r8, #1
    2e02:	dd13      	ble.n	2e2c <_vprintk+0x144>
					d = (long)va_arg(ap, long long);
    2e04:	9b03      	ldr	r3, [sp, #12]
    2e06:	3307      	adds	r3, #7
    2e08:	f023 0307 	bic.w	r3, r3, #7
    2e0c:	f103 0208 	add.w	r2, r3, #8
    2e10:	9203      	str	r2, [sp, #12]
    2e12:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    2e14:	2d00      	cmp	r5, #0
    2e16:	db0e      	blt.n	2e36 <_vprintk+0x14e>
				_printk_dec_ulong(out, ctx, d, padding,
    2e18:	f8cd a000 	str.w	sl, [sp]
    2e1c:	464b      	mov	r3, r9
    2e1e:	462a      	mov	r2, r5
    2e20:	4631      	mov	r1, r6
    2e22:	4638      	mov	r0, r7
    2e24:	f7ff feea 	bl	2bfc <_printk_dec_ulong>
			might_format = 0;
    2e28:	2500      	movs	r5, #0
				break;
    2e2a:	e06f      	b.n	2f0c <_vprintk+0x224>
					d = va_arg(ap, long);
    2e2c:	9b03      	ldr	r3, [sp, #12]
    2e2e:	1d1a      	adds	r2, r3, #4
    2e30:	9203      	str	r2, [sp, #12]
    2e32:	681d      	ldr	r5, [r3, #0]
    2e34:	e7ee      	b.n	2e14 <_vprintk+0x12c>
					out((int)'-', ctx);
    2e36:	4631      	mov	r1, r6
    2e38:	202d      	movs	r0, #45	; 0x2d
    2e3a:	47b8      	blx	r7
					d = -d;
    2e3c:	426d      	negs	r5, r5
					min_width--;
    2e3e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2e42:	e7e9      	b.n	2e18 <_vprintk+0x130>
				if (long_ctr < 2) {
    2e44:	f1b8 0f01 	cmp.w	r8, #1
    2e48:	dd10      	ble.n	2e6c <_vprintk+0x184>
					u = (unsigned long)va_arg(ap,
    2e4a:	9b03      	ldr	r3, [sp, #12]
    2e4c:	3307      	adds	r3, #7
    2e4e:	f023 0307 	bic.w	r3, r3, #7
    2e52:	f103 0208 	add.w	r2, r3, #8
    2e56:	9203      	str	r2, [sp, #12]
    2e58:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    2e5a:	f8cd a000 	str.w	sl, [sp]
    2e5e:	464b      	mov	r3, r9
    2e60:	4631      	mov	r1, r6
    2e62:	4638      	mov	r0, r7
    2e64:	f7ff feca 	bl	2bfc <_printk_dec_ulong>
			might_format = 0;
    2e68:	2500      	movs	r5, #0
				break;
    2e6a:	e04f      	b.n	2f0c <_vprintk+0x224>
					u = va_arg(ap, unsigned long);
    2e6c:	9b03      	ldr	r3, [sp, #12]
    2e6e:	1d1a      	adds	r2, r3, #4
    2e70:	9203      	str	r2, [sp, #12]
    2e72:	681a      	ldr	r2, [r3, #0]
    2e74:	e7f1      	b.n	2e5a <_vprintk+0x172>
				  out('0', ctx);
    2e76:	4631      	mov	r1, r6
    2e78:	2030      	movs	r0, #48	; 0x30
    2e7a:	47b8      	blx	r7
				  out('x', ctx);
    2e7c:	4631      	mov	r1, r6
    2e7e:	2078      	movs	r0, #120	; 0x78
    2e80:	47b8      	blx	r7
				  min_width = 8;
    2e82:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    2e86:	f04f 0901 	mov.w	r9, #1
				if (long_ctr < 2) {
    2e8a:	f1b8 0f01 	cmp.w	r8, #1
    2e8e:	dd10      	ble.n	2eb2 <_vprintk+0x1ca>
					x = (unsigned long)va_arg(ap,
    2e90:	9b03      	ldr	r3, [sp, #12]
    2e92:	3307      	adds	r3, #7
    2e94:	f023 0307 	bic.w	r3, r3, #7
    2e98:	f103 0208 	add.w	r2, r3, #8
    2e9c:	9203      	str	r2, [sp, #12]
    2e9e:	681a      	ldr	r2, [r3, #0]
				_printk_hex_ulong(out, ctx, x, padding,
    2ea0:	f8cd a000 	str.w	sl, [sp]
    2ea4:	464b      	mov	r3, r9
    2ea6:	4631      	mov	r1, r6
    2ea8:	4638      	mov	r0, r7
    2eaa:	f7ff fe59 	bl	2b60 <_printk_hex_ulong>
			might_format = 0;
    2eae:	2500      	movs	r5, #0
				break;
    2eb0:	e02c      	b.n	2f0c <_vprintk+0x224>
					x = va_arg(ap, unsigned long);
    2eb2:	9b03      	ldr	r3, [sp, #12]
    2eb4:	1d1a      	adds	r2, r3, #4
    2eb6:	9203      	str	r2, [sp, #12]
    2eb8:	681a      	ldr	r2, [r3, #0]
    2eba:	e7f1      	b.n	2ea0 <_vprintk+0x1b8>
				char *s = va_arg(ap, char *);
    2ebc:	9b03      	ldr	r3, [sp, #12]
    2ebe:	1d1a      	adds	r2, r3, #4
    2ec0:	9203      	str	r2, [sp, #12]
    2ec2:	681d      	ldr	r5, [r3, #0]
				while (*s)
    2ec4:	e002      	b.n	2ecc <_vprintk+0x1e4>
					out((int)(*s++), ctx);
    2ec6:	3501      	adds	r5, #1
    2ec8:	4631      	mov	r1, r6
    2eca:	47b8      	blx	r7
				while (*s)
    2ecc:	7828      	ldrb	r0, [r5, #0]
    2ece:	2800      	cmp	r0, #0
    2ed0:	d1f9      	bne.n	2ec6 <_vprintk+0x1de>
			might_format = 0;
    2ed2:	2500      	movs	r5, #0
    2ed4:	e01a      	b.n	2f0c <_vprintk+0x224>
				int c = va_arg(ap, int);
    2ed6:	9b03      	ldr	r3, [sp, #12]
    2ed8:	1d1a      	adds	r2, r3, #4
    2eda:	9203      	str	r2, [sp, #12]
				out(c, ctx);
    2edc:	4631      	mov	r1, r6
    2ede:	6818      	ldr	r0, [r3, #0]
    2ee0:	47b8      	blx	r7
			might_format = 0;
    2ee2:	2500      	movs	r5, #0
				break;
    2ee4:	e012      	b.n	2f0c <_vprintk+0x224>
				out((int)'%', ctx);
    2ee6:	4631      	mov	r1, r6
    2ee8:	2025      	movs	r0, #37	; 0x25
    2eea:	47b8      	blx	r7
			might_format = 0;
    2eec:	2500      	movs	r5, #0
				break;
    2eee:	e00d      	b.n	2f0c <_vprintk+0x224>
				out((int)'%', ctx);
    2ef0:	4631      	mov	r1, r6
    2ef2:	2025      	movs	r0, #37	; 0x25
    2ef4:	47b8      	blx	r7
				out((int)*fmt, ctx);
    2ef6:	4631      	mov	r1, r6
    2ef8:	7820      	ldrb	r0, [r4, #0]
    2efa:	47b8      	blx	r7
			might_format = 0;
    2efc:	2500      	movs	r5, #0
				break;
    2efe:	e005      	b.n	2f0c <_vprintk+0x224>
				long_ctr = 0;
    2f00:	46a8      	mov	r8, r5
				min_width = -1;
    2f02:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				padding = PAD_NONE;
    2f06:	f04f 0900 	mov.w	r9, #0
				might_format = 1;
    2f0a:	2501      	movs	r5, #1
		++fmt;
    2f0c:	3401      	adds	r4, #1
	while (*fmt) {
    2f0e:	7820      	ldrb	r0, [r4, #0]
    2f10:	b150      	cbz	r0, 2f28 <_vprintk+0x240>
		if (!might_format) {
    2f12:	2d00      	cmp	r5, #0
    2f14:	f47f aef6 	bne.w	2d04 <_vprintk+0x1c>
			if (*fmt != '%') {
    2f18:	2825      	cmp	r0, #37	; 0x25
    2f1a:	d0f1      	beq.n	2f00 <_vprintk+0x218>
				out((int)*fmt, ctx);
    2f1c:	4631      	mov	r1, r6
    2f1e:	47b8      	blx	r7
    2f20:	e7f4      	b.n	2f0c <_vprintk+0x224>
				padding = PAD_SPACE_AFTER;
    2f22:	f04f 0903 	mov.w	r9, #3
    2f26:	e7f1      	b.n	2f0c <_vprintk+0x224>
}
    2f28:	b004      	add	sp, #16
    2f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00002f30 <vprintk>:
{
    2f30:	b510      	push	{r4, lr}
    2f32:	b082      	sub	sp, #8
	struct out_context ctx = { 0 };
    2f34:	ac02      	add	r4, sp, #8
    2f36:	2300      	movs	r3, #0
    2f38:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    2f3c:	460b      	mov	r3, r1
    2f3e:	4602      	mov	r2, r0
    2f40:	4621      	mov	r1, r4
    2f42:	4803      	ldr	r0, [pc, #12]	; (2f50 <vprintk+0x20>)
    2f44:	f7ff fed0 	bl	2ce8 <_vprintk>
}
    2f48:	9801      	ldr	r0, [sp, #4]
    2f4a:	b002      	add	sp, #8
    2f4c:	bd10      	pop	{r4, pc}
    2f4e:	bf00      	nop
    2f50:	00002b4d 	.word	0x00002b4d

00002f54 <printk>:
{
    2f54:	b40f      	push	{r0, r1, r2, r3}
    2f56:	b500      	push	{lr}
    2f58:	b083      	sub	sp, #12
    2f5a:	a904      	add	r1, sp, #16
    2f5c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    2f60:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    2f62:	f7ff ffe5 	bl	2f30 <vprintk>
}
    2f66:	b003      	add	sp, #12
    2f68:	f85d eb04 	ldr.w	lr, [sp], #4
    2f6c:	b004      	add	sp, #16
    2f6e:	4770      	bx	lr

00002f70 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    2f70:	b40c      	push	{r2, r3}
    2f72:	b510      	push	{r4, lr}
    2f74:	b084      	sub	sp, #16
    2f76:	4604      	mov	r4, r0
    2f78:	ab06      	add	r3, sp, #24
    2f7a:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    2f7e:	9001      	str	r0, [sp, #4]
    2f80:	9102      	str	r1, [sp, #8]
    2f82:	2100      	movs	r1, #0
    2f84:	9103      	str	r1, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
    2f86:	9300      	str	r3, [sp, #0]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    2f88:	a901      	add	r1, sp, #4
    2f8a:	4807      	ldr	r0, [pc, #28]	; (2fa8 <snprintk+0x38>)
    2f8c:	f7ff feac 	bl	2ce8 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    2f90:	9b03      	ldr	r3, [sp, #12]
    2f92:	9a02      	ldr	r2, [sp, #8]
    2f94:	4293      	cmp	r3, r2
    2f96:	da01      	bge.n	2f9c <snprintk+0x2c>
		str[ctx.count] = '\0';
    2f98:	2200      	movs	r2, #0
    2f9a:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    2f9c:	9803      	ldr	r0, [sp, #12]
    2f9e:	b004      	add	sp, #16
    2fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2fa4:	b002      	add	sp, #8
    2fa6:	4770      	bx	lr
    2fa8:	00002cad 	.word	0x00002cad

00002fac <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_IPV6_NBR_CACHE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_HCI_VS_BUILD_INFO, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_CHAN_SEL_2, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_UDP_CHECKSUM, 1);
    2fac:	4770      	bx	lr

00002fae <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    2fae:	428b      	cmp	r3, r1
    2fb0:	d901      	bls.n	2fb6 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
    2fb2:	2000      	movs	r0, #0
    2fb4:	4770      	bx	lr
{
    2fb6:	b510      	push	{r4, lr}
    2fb8:	461c      	mov	r4, r3
    2fba:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
    2fbc:	461a      	mov	r2, r3
    2fbe:	f7fd f97f 	bl	2c0 <memcpy>
		return from_len;
    2fc2:	4620      	mov	r0, r4
    2fc4:	bd10      	pop	{r4, pc}

00002fc6 <_set>:
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
    2fc6:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
    2fc8:	f027 fc76 	bl	2a8b8 <memset>
    2fcc:	bd08      	pop	{r3, pc}

00002fce <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    2fce:	09c3      	lsrs	r3, r0, #7
    2fd0:	005a      	lsls	r2, r3, #1
    2fd2:	4413      	add	r3, r2
    2fd4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    2fd8:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    2fdc:	b2c0      	uxtb	r0, r0
    2fde:	4770      	bx	lr

00002fe0 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    2fe0:	b4f0      	push	{r4, r5, r6, r7}
    2fe2:	b08c      	sub	sp, #48	; 0x30
    2fe4:	4604      	mov	r4, r0
    2fe6:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
    2fe8:	ad01      	add	r5, sp, #4
    2fea:	4e2a      	ldr	r6, [pc, #168]	; (3094 <tc_aes128_set_encrypt_key+0xb4>)
    2fec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2fee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2ff0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2ff4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2ff8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    2ffc:	2c00      	cmp	r4, #0
    2ffe:	d044      	beq.n	308a <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    3000:	2f00      	cmp	r7, #0
    3002:	d044      	beq.n	308e <tc_aes128_set_encrypt_key+0xae>
    3004:	2200      	movs	r2, #0
    3006:	e00f      	b.n	3028 <tc_aes128_set_encrypt_key+0x48>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3008:	f817 0022 	ldrb.w	r0, [r7, r2, lsl #2]
    300c:	eb07 0182 	add.w	r1, r7, r2, lsl #2
    3010:	784b      	ldrb	r3, [r1, #1]
    3012:	041b      	lsls	r3, r3, #16
    3014:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3018:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    301a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    301e:	78c9      	ldrb	r1, [r1, #3]
    3020:	430b      	orrs	r3, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3022:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (i = 0; i < Nk; ++i) {
    3026:	3201      	adds	r2, #1
    3028:	2a03      	cmp	r2, #3
    302a:	d9ed      	bls.n	3008 <tc_aes128_set_encrypt_key+0x28>
    302c:	e006      	b.n	303c <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    302e:	1f11      	subs	r1, r2, #4
    3030:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    3034:	404b      	eors	r3, r1
    3036:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
    303a:	3201      	adds	r2, #1
    303c:	2a2b      	cmp	r2, #43	; 0x2b
    303e:	d820      	bhi.n	3082 <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
    3040:	1e53      	subs	r3, r2, #1
    3042:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
		if ((i % Nk) == 0) {
    3046:	f012 0f03 	tst.w	r2, #3
    304a:	d1f0      	bne.n	302e <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
    304c:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3050:	0e19      	lsrs	r1, r3, #24
    3052:	4811      	ldr	r0, [pc, #68]	; (3098 <tc_aes128_set_encrypt_key+0xb8>)
    3054:	5c45      	ldrb	r5, [r0, r1]
    3056:	f3c3 4107 	ubfx	r1, r3, #16, #8
    305a:	5c41      	ldrb	r1, [r0, r1]
    305c:	0409      	lsls	r1, r1, #16
    305e:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
    3062:	f3c3 2507 	ubfx	r5, r3, #8, #8
    3066:	5d45      	ldrb	r5, [r0, r5]
    3068:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    306c:	b2db      	uxtb	r3, r3
    306e:	5cc3      	ldrb	r3, [r0, r3]
    3070:	4319      	orrs	r1, r3
    3072:	f022 0303 	bic.w	r3, r2, #3
    3076:	a80c      	add	r0, sp, #48	; 0x30
    3078:	4403      	add	r3, r0
    307a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    307e:	404b      	eors	r3, r1
    3080:	e7d5      	b.n	302e <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    3082:	2001      	movs	r0, #1
}
    3084:	b00c      	add	sp, #48	; 0x30
    3086:	bcf0      	pop	{r4, r5, r6, r7}
    3088:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    308a:	2000      	movs	r0, #0
    308c:	e7fa      	b.n	3084 <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
    308e:	2000      	movs	r0, #0
    3090:	e7f8      	b.n	3084 <tc_aes128_set_encrypt_key+0xa4>
    3092:	bf00      	nop
    3094:	0002e6a0 	.word	0x0002e6a0
    3098:	0002eac0 	.word	0x0002eac0

0000309c <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    309c:	2800      	cmp	r0, #0
    309e:	f000 8367 	beq.w	3770 <tc_aes_encrypt+0x6d4>
{
    30a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30a6:	b088      	sub	sp, #32
    30a8:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    30aa:	2900      	cmp	r1, #0
    30ac:	f000 8362 	beq.w	3774 <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    30b0:	2a00      	cmp	r2, #0
    30b2:	f000 8361 	beq.w	3778 <tc_aes_encrypt+0x6dc>
    30b6:	4617      	mov	r7, r2
    30b8:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    30ba:	2310      	movs	r3, #16
    30bc:	4619      	mov	r1, r3
    30be:	eb0d 0003 	add.w	r0, sp, r3
    30c2:	f7ff ff74 	bl	2fae <_copy>
	add_round_key(state, s->words);
    30c6:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    30c8:	683b      	ldr	r3, [r7, #0]
    30ca:	f89d 2010 	ldrb.w	r2, [sp, #16]
    30ce:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    30d2:	f88d 2010 	strb.w	r2, [sp, #16]
    30d6:	f3c3 4207 	ubfx	r2, r3, #16, #8
    30da:	f89d 1011 	ldrb.w	r1, [sp, #17]
    30de:	404a      	eors	r2, r1
    30e0:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    30e4:	f3c3 2207 	ubfx	r2, r3, #8, #8
    30e8:	f89d 1012 	ldrb.w	r1, [sp, #18]
    30ec:	404a      	eors	r2, r1
    30ee:	f88d 2012 	strb.w	r2, [sp, #18]
    30f2:	b2db      	uxtb	r3, r3
    30f4:	f89d 2013 	ldrb.w	r2, [sp, #19]
    30f8:	4053      	eors	r3, r2
    30fa:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3104:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3108:	f88d 2014 	strb.w	r2, [sp, #20]
    310c:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3110:	f89d 1015 	ldrb.w	r1, [sp, #21]
    3114:	404a      	eors	r2, r1
    3116:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    311a:	f3c3 2207 	ubfx	r2, r3, #8, #8
    311e:	f89d 1016 	ldrb.w	r1, [sp, #22]
    3122:	404a      	eors	r2, r1
    3124:	f88d 2016 	strb.w	r2, [sp, #22]
    3128:	b2db      	uxtb	r3, r3
    312a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    312e:	4053      	eors	r3, r2
    3130:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    3134:	68bb      	ldr	r3, [r7, #8]
    3136:	f89d 2018 	ldrb.w	r2, [sp, #24]
    313a:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    313e:	f88d 2018 	strb.w	r2, [sp, #24]
    3142:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3146:	f89d 1019 	ldrb.w	r1, [sp, #25]
    314a:	404a      	eors	r2, r1
    314c:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    3150:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3154:	f89d 101a 	ldrb.w	r1, [sp, #26]
    3158:	404a      	eors	r2, r1
    315a:	f88d 201a 	strb.w	r2, [sp, #26]
    315e:	b2db      	uxtb	r3, r3
    3160:	f89d 201b 	ldrb.w	r2, [sp, #27]
    3164:	4053      	eors	r3, r2
    3166:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    316a:	68fb      	ldr	r3, [r7, #12]
    316c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3170:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3174:	f88d 201c 	strb.w	r2, [sp, #28]
    3178:	f3c3 4207 	ubfx	r2, r3, #16, #8
    317c:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3180:	404a      	eors	r2, r1
    3182:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3186:	f3c3 2207 	ubfx	r2, r3, #8, #8
    318a:	f89d 101e 	ldrb.w	r1, [sp, #30]
    318e:	404a      	eors	r2, r1
    3190:	f88d 201e 	strb.w	r2, [sp, #30]
    3194:	b2db      	uxtb	r3, r3
    3196:	f89d 201f 	ldrb.w	r2, [sp, #31]
    319a:	4053      	eors	r3, r2
    319c:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
    31a0:	2500      	movs	r5, #0
    31a2:	e210      	b.n	35c6 <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
    31a4:	a904      	add	r1, sp, #16
    31a6:	5ccc      	ldrb	r4, [r1, r3]
    31a8:	4a02      	ldr	r2, [pc, #8]	; (31b4 <tc_aes_encrypt+0x118>)
    31aa:	5d14      	ldrb	r4, [r2, r4]
    31ac:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    31ae:	3301      	adds	r3, #1
    31b0:	e002      	b.n	31b8 <tc_aes_encrypt+0x11c>
    31b2:	bf00      	nop
    31b4:	0002eac0 	.word	0x0002eac0
    31b8:	2b0f      	cmp	r3, #15
    31ba:	d9f3      	bls.n	31a4 <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    31bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
    31c0:	f88d 3000 	strb.w	r3, [sp]
    31c4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    31c8:	f88d 3001 	strb.w	r3, [sp, #1]
    31cc:	f89d 301a 	ldrb.w	r3, [sp, #26]
    31d0:	f88d 3002 	strb.w	r3, [sp, #2]
    31d4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31d8:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    31dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    31e0:	f88d 3004 	strb.w	r3, [sp, #4]
    31e4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    31e8:	f88d 3005 	strb.w	r3, [sp, #5]
    31ec:	f89d 301e 	ldrb.w	r3, [sp, #30]
    31f0:	f88d 3006 	strb.w	r3, [sp, #6]
    31f4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    31f8:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    31fc:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3200:	f88d 3008 	strb.w	r3, [sp, #8]
    3204:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3208:	f88d 3009 	strb.w	r3, [sp, #9]
    320c:	f89d 3012 	ldrb.w	r3, [sp, #18]
    3210:	f88d 300a 	strb.w	r3, [sp, #10]
    3214:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3218:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    321c:	f89d 301c 	ldrb.w	r3, [sp, #28]
    3220:	f88d 300c 	strb.w	r3, [sp, #12]
    3224:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3228:	f88d 300d 	strb.w	r3, [sp, #13]
    322c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    3230:	f88d 300e 	strb.w	r3, [sp, #14]
    3234:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3238:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    323c:	2310      	movs	r3, #16
    323e:	466a      	mov	r2, sp
    3240:	4619      	mov	r1, r3
    3242:	eb0d 0003 	add.w	r0, sp, r3
    3246:	f7ff feb2 	bl	2fae <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    324a:	f89d 0010 	ldrb.w	r0, [sp, #16]
    324e:	f7ff febe 	bl	2fce <_double_byte>
    3252:	4604      	mov	r4, r0
    3254:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3258:	f7ff feb9 	bl	2fce <_double_byte>
    325c:	f89d 1011 	ldrb.w	r1, [sp, #17]
    3260:	f89d 2012 	ldrb.w	r2, [sp, #18]
    3264:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3268:	4048      	eors	r0, r1
    326a:	4044      	eors	r4, r0
    326c:	4062      	eors	r2, r4
    326e:	4053      	eors	r3, r2
    3270:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3274:	f89d 4010 	ldrb.w	r4, [sp, #16]
    3278:	4608      	mov	r0, r1
    327a:	f7ff fea8 	bl	2fce <_double_byte>
    327e:	4044      	eors	r4, r0
    3280:	b2e4      	uxtb	r4, r4
    3282:	f89d 0012 	ldrb.w	r0, [sp, #18]
    3286:	f7ff fea2 	bl	2fce <_double_byte>
    328a:	f89d 2012 	ldrb.w	r2, [sp, #18]
    328e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3292:	4050      	eors	r0, r2
    3294:	4044      	eors	r4, r0
    3296:	405c      	eors	r4, r3
    3298:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    329c:	f89d 4010 	ldrb.w	r4, [sp, #16]
    32a0:	f89d 0011 	ldrb.w	r0, [sp, #17]
    32a4:	4044      	eors	r4, r0
    32a6:	4610      	mov	r0, r2
    32a8:	f7ff fe91 	bl	2fce <_double_byte>
    32ac:	4044      	eors	r4, r0
    32ae:	b2e4      	uxtb	r4, r4
    32b0:	f89d 0013 	ldrb.w	r0, [sp, #19]
    32b4:	f7ff fe8b 	bl	2fce <_double_byte>
    32b8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    32bc:	4058      	eors	r0, r3
    32be:	4044      	eors	r4, r0
    32c0:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    32c4:	f89d 0010 	ldrb.w	r0, [sp, #16]
    32c8:	f7ff fe81 	bl	2fce <_double_byte>
    32cc:	f89d 2010 	ldrb.w	r2, [sp, #16]
    32d0:	f89d 3011 	ldrb.w	r3, [sp, #17]
    32d4:	f89d 4012 	ldrb.w	r4, [sp, #18]
    32d8:	4050      	eors	r0, r2
    32da:	4043      	eors	r3, r0
    32dc:	405c      	eors	r4, r3
    32de:	b2e4      	uxtb	r4, r4
    32e0:	f89d 0013 	ldrb.w	r0, [sp, #19]
    32e4:	f7ff fe73 	bl	2fce <_double_byte>
    32e8:	4060      	eors	r0, r4
    32ea:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    32ee:	f89d 0014 	ldrb.w	r0, [sp, #20]
    32f2:	f7ff fe6c 	bl	2fce <_double_byte>
    32f6:	4604      	mov	r4, r0
    32f8:	f89d 0015 	ldrb.w	r0, [sp, #21]
    32fc:	f7ff fe67 	bl	2fce <_double_byte>
    3300:	f89d 1015 	ldrb.w	r1, [sp, #21]
    3304:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3308:	f89d 3017 	ldrb.w	r3, [sp, #23]
    330c:	4048      	eors	r0, r1
    330e:	4044      	eors	r4, r0
    3310:	4062      	eors	r2, r4
    3312:	4053      	eors	r3, r2
    3314:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3318:	f89d 4014 	ldrb.w	r4, [sp, #20]
    331c:	4608      	mov	r0, r1
    331e:	f7ff fe56 	bl	2fce <_double_byte>
    3322:	4044      	eors	r4, r0
    3324:	b2e4      	uxtb	r4, r4
    3326:	f89d 0016 	ldrb.w	r0, [sp, #22]
    332a:	f7ff fe50 	bl	2fce <_double_byte>
    332e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3332:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3336:	4050      	eors	r0, r2
    3338:	4044      	eors	r4, r0
    333a:	405c      	eors	r4, r3
    333c:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3340:	f89d 4014 	ldrb.w	r4, [sp, #20]
    3344:	f89d 0015 	ldrb.w	r0, [sp, #21]
    3348:	4044      	eors	r4, r0
    334a:	4610      	mov	r0, r2
    334c:	f7ff fe3f 	bl	2fce <_double_byte>
    3350:	4044      	eors	r4, r0
    3352:	b2e4      	uxtb	r4, r4
    3354:	f89d 0017 	ldrb.w	r0, [sp, #23]
    3358:	f7ff fe39 	bl	2fce <_double_byte>
    335c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3360:	4058      	eors	r0, r3
    3362:	4044      	eors	r4, r0
    3364:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3368:	f89d 0014 	ldrb.w	r0, [sp, #20]
    336c:	f7ff fe2f 	bl	2fce <_double_byte>
    3370:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3374:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3378:	f89d 4016 	ldrb.w	r4, [sp, #22]
    337c:	4050      	eors	r0, r2
    337e:	4043      	eors	r3, r0
    3380:	405c      	eors	r4, r3
    3382:	b2e4      	uxtb	r4, r4
    3384:	f89d 0017 	ldrb.w	r0, [sp, #23]
    3388:	f7ff fe21 	bl	2fce <_double_byte>
    338c:	4060      	eors	r0, r4
    338e:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    3392:	f89d 0018 	ldrb.w	r0, [sp, #24]
    3396:	f7ff fe1a 	bl	2fce <_double_byte>
    339a:	4604      	mov	r4, r0
    339c:	f89d 0019 	ldrb.w	r0, [sp, #25]
    33a0:	f7ff fe15 	bl	2fce <_double_byte>
    33a4:	f89d 1019 	ldrb.w	r1, [sp, #25]
    33a8:	f89d 201a 	ldrb.w	r2, [sp, #26]
    33ac:	f89d 301b 	ldrb.w	r3, [sp, #27]
    33b0:	4048      	eors	r0, r1
    33b2:	4044      	eors	r4, r0
    33b4:	4062      	eors	r2, r4
    33b6:	4053      	eors	r3, r2
    33b8:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    33bc:	f89d 4018 	ldrb.w	r4, [sp, #24]
    33c0:	4608      	mov	r0, r1
    33c2:	f7ff fe04 	bl	2fce <_double_byte>
    33c6:	4044      	eors	r4, r0
    33c8:	b2e4      	uxtb	r4, r4
    33ca:	f89d 001a 	ldrb.w	r0, [sp, #26]
    33ce:	f7ff fdfe 	bl	2fce <_double_byte>
    33d2:	f89d 201a 	ldrb.w	r2, [sp, #26]
    33d6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    33da:	4050      	eors	r0, r2
    33dc:	4044      	eors	r4, r0
    33de:	405c      	eors	r4, r3
    33e0:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    33e4:	f89d 4018 	ldrb.w	r4, [sp, #24]
    33e8:	f89d 0019 	ldrb.w	r0, [sp, #25]
    33ec:	4044      	eors	r4, r0
    33ee:	4610      	mov	r0, r2
    33f0:	f7ff fded 	bl	2fce <_double_byte>
    33f4:	4044      	eors	r4, r0
    33f6:	b2e4      	uxtb	r4, r4
    33f8:	f89d 001b 	ldrb.w	r0, [sp, #27]
    33fc:	f7ff fde7 	bl	2fce <_double_byte>
    3400:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3404:	4058      	eors	r0, r3
    3406:	4044      	eors	r4, r0
    3408:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    340c:	f89d 0018 	ldrb.w	r0, [sp, #24]
    3410:	f7ff fddd 	bl	2fce <_double_byte>
    3414:	f89d 2018 	ldrb.w	r2, [sp, #24]
    3418:	f89d 3019 	ldrb.w	r3, [sp, #25]
    341c:	f89d 401a 	ldrb.w	r4, [sp, #26]
    3420:	4050      	eors	r0, r2
    3422:	4043      	eors	r3, r0
    3424:	405c      	eors	r4, r3
    3426:	b2e4      	uxtb	r4, r4
    3428:	f89d 001b 	ldrb.w	r0, [sp, #27]
    342c:	f7ff fdcf 	bl	2fce <_double_byte>
    3430:	4060      	eors	r0, r4
    3432:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    3436:	f89d 001c 	ldrb.w	r0, [sp, #28]
    343a:	f7ff fdc8 	bl	2fce <_double_byte>
    343e:	4604      	mov	r4, r0
    3440:	f89d 001d 	ldrb.w	r0, [sp, #29]
    3444:	f7ff fdc3 	bl	2fce <_double_byte>
    3448:	f89d 101d 	ldrb.w	r1, [sp, #29]
    344c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3450:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3454:	4048      	eors	r0, r1
    3456:	4044      	eors	r4, r0
    3458:	4062      	eors	r2, r4
    345a:	4053      	eors	r3, r2
    345c:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3460:	f89d 401c 	ldrb.w	r4, [sp, #28]
    3464:	4608      	mov	r0, r1
    3466:	f7ff fdb2 	bl	2fce <_double_byte>
    346a:	4044      	eors	r4, r0
    346c:	b2e4      	uxtb	r4, r4
    346e:	f89d 001e 	ldrb.w	r0, [sp, #30]
    3472:	f7ff fdac 	bl	2fce <_double_byte>
    3476:	f89d 201e 	ldrb.w	r2, [sp, #30]
    347a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    347e:	4050      	eors	r0, r2
    3480:	4044      	eors	r4, r0
    3482:	405c      	eors	r4, r3
    3484:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3488:	f89d 401c 	ldrb.w	r4, [sp, #28]
    348c:	f89d 001d 	ldrb.w	r0, [sp, #29]
    3490:	4044      	eors	r4, r0
    3492:	4610      	mov	r0, r2
    3494:	f7ff fd9b 	bl	2fce <_double_byte>
    3498:	4044      	eors	r4, r0
    349a:	b2e4      	uxtb	r4, r4
    349c:	f89d 001f 	ldrb.w	r0, [sp, #31]
    34a0:	f7ff fd95 	bl	2fce <_double_byte>
    34a4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    34a8:	4058      	eors	r0, r3
    34aa:	4044      	eors	r4, r0
    34ac:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    34b0:	f89d 001c 	ldrb.w	r0, [sp, #28]
    34b4:	f7ff fd8b 	bl	2fce <_double_byte>
    34b8:	f89d 201c 	ldrb.w	r2, [sp, #28]
    34bc:	f89d 301d 	ldrb.w	r3, [sp, #29]
    34c0:	f89d 401e 	ldrb.w	r4, [sp, #30]
    34c4:	4050      	eors	r0, r2
    34c6:	4043      	eors	r3, r0
    34c8:	405c      	eors	r4, r3
    34ca:	b2e4      	uxtb	r4, r4
    34cc:	f89d 001f 	ldrb.w	r0, [sp, #31]
    34d0:	f7ff fd7d 	bl	2fce <_double_byte>
    34d4:	4060      	eors	r0, r4
    34d6:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    34da:	2310      	movs	r3, #16
    34dc:	466a      	mov	r2, sp
    34de:	4619      	mov	r1, r3
    34e0:	eb0d 0003 	add.w	r0, sp, r3
    34e4:	f7ff fd63 	bl	2fae <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    34e8:	3501      	adds	r5, #1
    34ea:	012b      	lsls	r3, r5, #4
    34ec:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    34ee:	58f3      	ldr	r3, [r6, r3]
    34f0:	f89d 1010 	ldrb.w	r1, [sp, #16]
    34f4:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    34f8:	f88d 1010 	strb.w	r1, [sp, #16]
    34fc:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3500:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3504:	4041      	eors	r1, r0
    3506:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    350a:	f3c3 2107 	ubfx	r1, r3, #8, #8
    350e:	f89d 0012 	ldrb.w	r0, [sp, #18]
    3512:	4041      	eors	r1, r0
    3514:	f88d 1012 	strb.w	r1, [sp, #18]
    3518:	b2db      	uxtb	r3, r3
    351a:	f89d 1013 	ldrb.w	r1, [sp, #19]
    351e:	404b      	eors	r3, r1
    3520:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    3524:	6853      	ldr	r3, [r2, #4]
    3526:	f89d 1014 	ldrb.w	r1, [sp, #20]
    352a:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    352e:	f88d 1014 	strb.w	r1, [sp, #20]
    3532:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3536:	f89d 0015 	ldrb.w	r0, [sp, #21]
    353a:	4041      	eors	r1, r0
    353c:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    3540:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3544:	f89d 0016 	ldrb.w	r0, [sp, #22]
    3548:	4041      	eors	r1, r0
    354a:	f88d 1016 	strb.w	r1, [sp, #22]
    354e:	b2db      	uxtb	r3, r3
    3550:	f89d 1017 	ldrb.w	r1, [sp, #23]
    3554:	404b      	eors	r3, r1
    3556:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    355a:	6893      	ldr	r3, [r2, #8]
    355c:	f89d 1018 	ldrb.w	r1, [sp, #24]
    3560:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3564:	f88d 1018 	strb.w	r1, [sp, #24]
    3568:	f3c3 4107 	ubfx	r1, r3, #16, #8
    356c:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3570:	4041      	eors	r1, r0
    3572:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    3576:	f3c3 2107 	ubfx	r1, r3, #8, #8
    357a:	f89d 001a 	ldrb.w	r0, [sp, #26]
    357e:	4041      	eors	r1, r0
    3580:	f88d 101a 	strb.w	r1, [sp, #26]
    3584:	b2db      	uxtb	r3, r3
    3586:	f89d 101b 	ldrb.w	r1, [sp, #27]
    358a:	404b      	eors	r3, r1
    358c:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    3590:	68d3      	ldr	r3, [r2, #12]
    3592:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3596:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    359a:	f88d 201c 	strb.w	r2, [sp, #28]
    359e:	f3c3 4207 	ubfx	r2, r3, #16, #8
    35a2:	f89d 101d 	ldrb.w	r1, [sp, #29]
    35a6:	404a      	eors	r2, r1
    35a8:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    35ac:	f3c3 2207 	ubfx	r2, r3, #8, #8
    35b0:	f89d 101e 	ldrb.w	r1, [sp, #30]
    35b4:	404a      	eors	r2, r1
    35b6:	f88d 201e 	strb.w	r2, [sp, #30]
    35ba:	b2db      	uxtb	r3, r3
    35bc:	f89d 201f 	ldrb.w	r2, [sp, #31]
    35c0:	4053      	eors	r3, r2
    35c2:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
    35c6:	2d08      	cmp	r5, #8
    35c8:	d801      	bhi.n	35ce <tc_aes_encrypt+0x532>
    35ca:	2300      	movs	r3, #0
    35cc:	e5f4      	b.n	31b8 <tc_aes_encrypt+0x11c>
    35ce:	2300      	movs	r3, #0
    35d0:	e005      	b.n	35de <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
    35d2:	aa04      	add	r2, sp, #16
    35d4:	5cd1      	ldrb	r1, [r2, r3]
    35d6:	4869      	ldr	r0, [pc, #420]	; (377c <tc_aes_encrypt+0x6e0>)
    35d8:	5c41      	ldrb	r1, [r0, r1]
    35da:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    35dc:	3301      	adds	r3, #1
    35de:	2b0f      	cmp	r3, #15
    35e0:	d9f7      	bls.n	35d2 <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    35e2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    35e6:	f88d 3000 	strb.w	r3, [sp]
    35ea:	f89d 3015 	ldrb.w	r3, [sp, #21]
    35ee:	f88d 3001 	strb.w	r3, [sp, #1]
    35f2:	f89d 301a 	ldrb.w	r3, [sp, #26]
    35f6:	f88d 3002 	strb.w	r3, [sp, #2]
    35fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    35fe:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    3602:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3606:	f88d 3004 	strb.w	r3, [sp, #4]
    360a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    360e:	f88d 3005 	strb.w	r3, [sp, #5]
    3612:	f89d 301e 	ldrb.w	r3, [sp, #30]
    3616:	f88d 3006 	strb.w	r3, [sp, #6]
    361a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    361e:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    3622:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3626:	f88d 3008 	strb.w	r3, [sp, #8]
    362a:	f89d 301d 	ldrb.w	r3, [sp, #29]
    362e:	f88d 3009 	strb.w	r3, [sp, #9]
    3632:	f89d 3012 	ldrb.w	r3, [sp, #18]
    3636:	f88d 300a 	strb.w	r3, [sp, #10]
    363a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    363e:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    3642:	f89d 301c 	ldrb.w	r3, [sp, #28]
    3646:	f88d 300c 	strb.w	r3, [sp, #12]
    364a:	f89d 3011 	ldrb.w	r3, [sp, #17]
    364e:	f88d 300d 	strb.w	r3, [sp, #13]
    3652:	f89d 3016 	ldrb.w	r3, [sp, #22]
    3656:	f88d 300e 	strb.w	r3, [sp, #14]
    365a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    365e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3662:	2310      	movs	r3, #16
    3664:	466a      	mov	r2, sp
    3666:	4619      	mov	r1, r3
    3668:	eb0d 0003 	add.w	r0, sp, r3
    366c:	f7ff fc9f 	bl	2fae <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
    3670:	1c6b      	adds	r3, r5, #1
    3672:	011b      	lsls	r3, r3, #4
    3674:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    3676:	58fb      	ldr	r3, [r7, r3]
    3678:	f89d 1010 	ldrb.w	r1, [sp, #16]
    367c:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3680:	f88d 1010 	strb.w	r1, [sp, #16]
    3684:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3688:	f89d 0011 	ldrb.w	r0, [sp, #17]
    368c:	4041      	eors	r1, r0
    368e:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    3692:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3696:	f89d 0012 	ldrb.w	r0, [sp, #18]
    369a:	4041      	eors	r1, r0
    369c:	f88d 1012 	strb.w	r1, [sp, #18]
    36a0:	b2db      	uxtb	r3, r3
    36a2:	f89d 1013 	ldrb.w	r1, [sp, #19]
    36a6:	404b      	eors	r3, r1
    36a8:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    36ac:	6853      	ldr	r3, [r2, #4]
    36ae:	f89d 1014 	ldrb.w	r1, [sp, #20]
    36b2:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    36b6:	f88d 1014 	strb.w	r1, [sp, #20]
    36ba:	f3c3 4107 	ubfx	r1, r3, #16, #8
    36be:	f89d 0015 	ldrb.w	r0, [sp, #21]
    36c2:	4041      	eors	r1, r0
    36c4:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    36c8:	f3c3 2107 	ubfx	r1, r3, #8, #8
    36cc:	f89d 0016 	ldrb.w	r0, [sp, #22]
    36d0:	4041      	eors	r1, r0
    36d2:	f88d 1016 	strb.w	r1, [sp, #22]
    36d6:	b2db      	uxtb	r3, r3
    36d8:	f89d 1017 	ldrb.w	r1, [sp, #23]
    36dc:	404b      	eors	r3, r1
    36de:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    36e2:	6893      	ldr	r3, [r2, #8]
    36e4:	f89d 1018 	ldrb.w	r1, [sp, #24]
    36e8:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    36ec:	f88d 1018 	strb.w	r1, [sp, #24]
    36f0:	f3c3 4107 	ubfx	r1, r3, #16, #8
    36f4:	f89d 0019 	ldrb.w	r0, [sp, #25]
    36f8:	4041      	eors	r1, r0
    36fa:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    36fe:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3702:	f89d 001a 	ldrb.w	r0, [sp, #26]
    3706:	4041      	eors	r1, r0
    3708:	f88d 101a 	strb.w	r1, [sp, #26]
    370c:	b2db      	uxtb	r3, r3
    370e:	f89d 101b 	ldrb.w	r1, [sp, #27]
    3712:	404b      	eors	r3, r1
    3714:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    3718:	68d3      	ldr	r3, [r2, #12]
    371a:	f89d 201c 	ldrb.w	r2, [sp, #28]
    371e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3722:	f88d 201c 	strb.w	r2, [sp, #28]
    3726:	f3c3 4207 	ubfx	r2, r3, #16, #8
    372a:	f89d 101d 	ldrb.w	r1, [sp, #29]
    372e:	404a      	eors	r2, r1
    3730:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3734:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3738:	f89d 101e 	ldrb.w	r1, [sp, #30]
    373c:	404a      	eors	r2, r1
    373e:	f88d 201e 	strb.w	r2, [sp, #30]
    3742:	b2db      	uxtb	r3, r3
    3744:	f89d 201f 	ldrb.w	r2, [sp, #31]
    3748:	4053      	eors	r3, r2
    374a:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
    374e:	2310      	movs	r3, #16
    3750:	eb0d 0203 	add.w	r2, sp, r3
    3754:	4619      	mov	r1, r3
    3756:	4640      	mov	r0, r8
    3758:	f7ff fc29 	bl	2fae <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    375c:	2210      	movs	r2, #16
    375e:	2100      	movs	r1, #0
    3760:	eb0d 0002 	add.w	r0, sp, r2
    3764:	f7ff fc2f 	bl	2fc6 <_set>

	return TC_CRYPTO_SUCCESS;
    3768:	2001      	movs	r0, #1
}
    376a:	b008      	add	sp, #32
    376c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
    3770:	2000      	movs	r0, #0
    3772:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    3774:	2000      	movs	r0, #0
    3776:	e7f8      	b.n	376a <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
    3778:	2000      	movs	r0, #0
    377a:	e7f6      	b.n	376a <tc_aes_encrypt+0x6ce>
    377c:	0002eac0 	.word	0x0002eac0

00003780 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    3780:	b430      	push	{r4, r5}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    3782:	f101 020f 	add.w	r2, r1, #15

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    3786:	f991 3000 	ldrsb.w	r3, [r1]
    378a:	2b00      	cmp	r3, #0
    378c:	db0d      	blt.n	37aa <gf_double+0x2a>
    378e:	2300      	movs	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    3790:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    3792:	1e45      	subs	r5, r0, #1
    3794:	7814      	ldrb	r4, [r2, #0]
    3796:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    379a:	7003      	strb	r3, [r0, #0]
		if (x == in) {
    379c:	428a      	cmp	r2, r1
    379e:	d006      	beq.n	37ae <gf_double+0x2e>
			break;
		}
		carry = *x-- >> 7;
    37a0:	7813      	ldrb	r3, [r2, #0]
    37a2:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    37a4:	4628      	mov	r0, r5
		carry = *x-- >> 7;
    37a6:	3a01      	subs	r2, #1
		*out-- = (*x << 1) ^ carry;
    37a8:	e7f3      	b.n	3792 <gf_double+0x12>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    37aa:	2387      	movs	r3, #135	; 0x87
    37ac:	e7f0      	b.n	3790 <gf_double+0x10>
	}
}
    37ae:	bc30      	pop	{r4, r5}
    37b0:	4770      	bx	lr

000037b2 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
    37b2:	b130      	cbz	r0, 37c2 <tc_cmac_erase+0x10>
{
    37b4:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    37b6:	2258      	movs	r2, #88	; 0x58
    37b8:	2100      	movs	r1, #0
    37ba:	f7ff fc04 	bl	2fc6 <_set>

	return TC_CRYPTO_SUCCESS;
    37be:	2001      	movs	r0, #1
    37c0:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
    37c2:	2000      	movs	r0, #0
    37c4:	4770      	bx	lr

000037c6 <tc_cmac_init>:
}

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    37c6:	b1a0      	cbz	r0, 37f2 <tc_cmac_init+0x2c>
{
    37c8:	b510      	push	{r4, lr}
    37ca:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    37cc:	2210      	movs	r2, #16
    37ce:	2100      	movs	r1, #0
    37d0:	f7ff fbf9 	bl	2fc6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    37d4:	2210      	movs	r2, #16
    37d6:	2100      	movs	r1, #0
    37d8:	f104 0030 	add.w	r0, r4, #48	; 0x30
    37dc:	f7ff fbf3 	bl	2fc6 <_set>
	s->leftover_offset = 0;
    37e0:	2300      	movs	r3, #0
    37e2:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    37e4:	2200      	movs	r2, #0
    37e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    37ea:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    37ee:	2001      	movs	r0, #1
    37f0:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
    37f2:	2000      	movs	r0, #0
    37f4:	4770      	bx	lr

000037f6 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
    37f6:	b338      	cbz	r0, 3848 <tc_cmac_setup+0x52>
{
    37f8:	b570      	push	{r4, r5, r6, lr}
    37fa:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
    37fc:	b331      	cbz	r1, 384c <tc_cmac_setup+0x56>
    37fe:	4616      	mov	r6, r2
    3800:	460d      	mov	r5, r1
	_set(s, 0, sizeof(*s));
    3802:	2258      	movs	r2, #88	; 0x58
    3804:	2100      	movs	r1, #0
    3806:	f7ff fbde 	bl	2fc6 <_set>
	s->sched = sched;
    380a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    380c:	4629      	mov	r1, r5
    380e:	4630      	mov	r0, r6
    3810:	f7ff fbe6 	bl	2fe0 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    3814:	2210      	movs	r2, #16
    3816:	2100      	movs	r1, #0
    3818:	4620      	mov	r0, r4
    381a:	f7ff fbd4 	bl	2fc6 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    381e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3820:	4621      	mov	r1, r4
    3822:	4620      	mov	r0, r4
    3824:	f7ff fc3a 	bl	309c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    3828:	f104 0510 	add.w	r5, r4, #16
    382c:	4621      	mov	r1, r4
    382e:	4628      	mov	r0, r5
    3830:	f7ff ffa6 	bl	3780 <gf_double>
	gf_double (s->K2, s->K1);
    3834:	4629      	mov	r1, r5
    3836:	f104 0020 	add.w	r0, r4, #32
    383a:	f7ff ffa1 	bl	3780 <gf_double>
	tc_cmac_init(s);
    383e:	4620      	mov	r0, r4
    3840:	f7ff ffc1 	bl	37c6 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    3844:	2001      	movs	r0, #1
    3846:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    3848:	2000      	movs	r0, #0
    384a:	4770      	bx	lr
    384c:	2000      	movs	r0, #0
}
    384e:	bd70      	pop	{r4, r5, r6, pc}

00003850 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    3850:	2800      	cmp	r0, #0
    3852:	d05f      	beq.n	3914 <tc_cmac_update+0xc4>
{
    3854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3856:	460d      	mov	r5, r1
    3858:	4616      	mov	r6, r2
    385a:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    385c:	2a00      	cmp	r2, #0
    385e:	d05b      	beq.n	3918 <tc_cmac_update+0xc8>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
    3860:	2900      	cmp	r1, #0
    3862:	d05b      	beq.n	391c <tc_cmac_update+0xcc>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    3864:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    3868:	ea52 0103 	orrs.w	r1, r2, r3
    386c:	d058      	beq.n	3920 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    386e:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    3872:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    3876:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

	if (s->leftover_offset > 0) {
    387a:	6c40      	ldr	r0, [r0, #68]	; 0x44
    387c:	2800      	cmp	r0, #0
    387e:	d038      	beq.n	38f2 <tc_cmac_update+0xa2>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    3880:	f1c0 0710 	rsb	r7, r0, #16

		if (data_length < remaining_space) {
    3884:	42be      	cmp	r6, r7
    3886:	d30b      	bcc.n	38a0 <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
    3888:	3030      	adds	r0, #48	; 0x30
    388a:	463b      	mov	r3, r7
    388c:	462a      	mov	r2, r5
    388e:	4639      	mov	r1, r7
    3890:	4420      	add	r0, r4
    3892:	f7ff fb8c 	bl	2fae <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
    3896:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    3898:	443d      	add	r5, r7
		s->leftover_offset = 0;
    389a:	2300      	movs	r3, #0
    389c:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    389e:	e012      	b.n	38c6 <tc_cmac_update+0x76>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    38a0:	3030      	adds	r0, #48	; 0x30
    38a2:	4633      	mov	r3, r6
    38a4:	462a      	mov	r2, r5
    38a6:	4631      	mov	r1, r6
    38a8:	4420      	add	r0, r4
    38aa:	f7ff fb80 	bl	2fae <_copy>
			s->leftover_offset += data_length;
    38ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
    38b0:	4433      	add	r3, r6
    38b2:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    38b4:	2001      	movs	r0, #1
    38b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->iv[i] ^= s->leftover[i];
    38b8:	18e2      	adds	r2, r4, r3
    38ba:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    38be:	5ce1      	ldrb	r1, [r4, r3]
    38c0:	404a      	eors	r2, r1
    38c2:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    38c4:	3301      	adds	r3, #1
    38c6:	2b0f      	cmp	r3, #15
    38c8:	d9f6      	bls.n	38b8 <tc_cmac_update+0x68>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    38ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    38cc:	4621      	mov	r1, r4
    38ce:	4620      	mov	r0, r4
    38d0:	f7ff fbe4 	bl	309c <tc_aes_encrypt>
    38d4:	e00d      	b.n	38f2 <tc_cmac_update+0xa2>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
    38d6:	5cea      	ldrb	r2, [r5, r3]
    38d8:	5ce1      	ldrb	r1, [r4, r3]
    38da:	404a      	eors	r2, r1
    38dc:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    38de:	3301      	adds	r3, #1
    38e0:	2b0f      	cmp	r3, #15
    38e2:	d9f8      	bls.n	38d6 <tc_cmac_update+0x86>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    38e4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    38e6:	4621      	mov	r1, r4
    38e8:	4620      	mov	r0, r4
    38ea:	f7ff fbd7 	bl	309c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    38ee:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    38f0:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
    38f2:	2e10      	cmp	r6, #16
    38f4:	d901      	bls.n	38fa <tc_cmac_update+0xaa>
    38f6:	2300      	movs	r3, #0
    38f8:	e7f2      	b.n	38e0 <tc_cmac_update+0x90>
	}

	if (data_length > 0) {
    38fa:	b90e      	cbnz	r6, 3900 <tc_cmac_update+0xb0>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    38fc:	2001      	movs	r0, #1
}
    38fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_copy(s->leftover, data_length, data, data_length);
    3900:	4633      	mov	r3, r6
    3902:	462a      	mov	r2, r5
    3904:	4631      	mov	r1, r6
    3906:	f104 0030 	add.w	r0, r4, #48	; 0x30
    390a:	f7ff fb50 	bl	2fae <_copy>
		s->leftover_offset = data_length;
    390e:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
    3910:	2001      	movs	r0, #1
    3912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3914:	2000      	movs	r0, #0
    3916:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
    3918:	2001      	movs	r0, #1
    391a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    391c:	2000      	movs	r0, #0
    391e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3920:	2000      	movs	r0, #0
    3922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003924 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    3924:	b370      	cbz	r0, 3984 <tc_cmac_final+0x60>
{
    3926:	b570      	push	{r4, r5, r6, lr}
    3928:	4606      	mov	r6, r0
	if (tag == (uint8_t *) 0 ||
    392a:	b369      	cbz	r1, 3988 <tc_cmac_final+0x64>
    392c:	460d      	mov	r5, r1
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    392e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    3930:	2a10      	cmp	r2, #16
    3932:	d010      	beq.n	3956 <tc_cmac_final+0x32>
		k = (uint8_t *) s->K1;
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
    3934:	f102 0030 	add.w	r0, r2, #48	; 0x30
    3938:	f1c2 0210 	rsb	r2, r2, #16
    393c:	2100      	movs	r1, #0
    393e:	4428      	add	r0, r5
    3940:	f7ff fb41 	bl	2fc6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    3944:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    3946:	442b      	add	r3, r5
    3948:	2280      	movs	r2, #128	; 0x80
    394a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    394e:	f105 0120 	add.w	r1, r5, #32
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3952:	2300      	movs	r3, #0
    3954:	e00a      	b.n	396c <tc_cmac_final+0x48>
		k = (uint8_t *) s->K1;
    3956:	3110      	adds	r1, #16
    3958:	e7fb      	b.n	3952 <tc_cmac_final+0x2e>
		s->iv[i] ^= s->leftover[i] ^ k[i];
    395a:	18ea      	adds	r2, r5, r3
    395c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    3960:	5ccc      	ldrb	r4, [r1, r3]
    3962:	4054      	eors	r4, r2
    3964:	5cea      	ldrb	r2, [r5, r3]
    3966:	4062      	eors	r2, r4
    3968:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    396a:	3301      	adds	r3, #1
    396c:	2b0f      	cmp	r3, #15
    396e:	d9f4      	bls.n	395a <tc_cmac_final+0x36>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    3970:	6caa      	ldr	r2, [r5, #72]	; 0x48
    3972:	4629      	mov	r1, r5
    3974:	4630      	mov	r0, r6
    3976:	f7ff fb91 	bl	309c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    397a:	4628      	mov	r0, r5
    397c:	f7ff ff19 	bl	37b2 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    3980:	2001      	movs	r0, #1
    3982:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    3984:	2000      	movs	r0, #0
    3986:	4770      	bx	lr
    3988:	2000      	movs	r0, #0
}
    398a:	bd70      	pop	{r4, r5, r6, pc}

0000398c <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    398c:	2000      	movs	r0, #0
    398e:	4770      	bx	lr

00003990 <mbedtls_zeroize>:

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3990:	e003      	b.n	399a <mbedtls_zeroize+0xa>
    3992:	2200      	movs	r2, #0
    3994:	7002      	strb	r2, [r0, #0]
    3996:	3001      	adds	r0, #1
    3998:	4619      	mov	r1, r3
    399a:	1e4b      	subs	r3, r1, #1
    399c:	2900      	cmp	r1, #0
    399e:	d1f8      	bne.n	3992 <mbedtls_zeroize+0x2>
}
    39a0:	4770      	bx	lr

000039a2 <mbedtls_zeroize>:

#if !defined(MBEDTLS_ARC4_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    39a2:	e003      	b.n	39ac <mbedtls_zeroize+0xa>
    39a4:	2200      	movs	r2, #0
    39a6:	7002      	strb	r2, [r0, #0]
    39a8:	3001      	adds	r0, #1
    39aa:	4619      	mov	r1, r3
    39ac:	1e4b      	subs	r3, r1, #1
    39ae:	2900      	cmp	r1, #0
    39b0:	d1f8      	bne.n	39a4 <mbedtls_zeroize+0x2>
}
    39b2:	4770      	bx	lr

000039b4 <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    39b4:	e003      	b.n	39be <mbedtls_zeroize+0xa>
    39b6:	2200      	movs	r2, #0
    39b8:	7002      	strb	r2, [r0, #0]
    39ba:	3001      	adds	r0, #1
    39bc:	4619      	mov	r1, r3
    39be:	1e4b      	subs	r3, r1, #1
    39c0:	2900      	cmp	r1, #0
    39c2:	d1f8      	bne.n	39b6 <mbedtls_zeroize+0x2>
}
    39c4:	4770      	bx	lr

000039c6 <mbedtls_zeroize>:

#if !defined(MBEDTLS_BLOWFISH_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    39c6:	e003      	b.n	39d0 <mbedtls_zeroize+0xa>
    39c8:	2200      	movs	r2, #0
    39ca:	7002      	strb	r2, [r0, #0]
    39cc:	3001      	adds	r0, #1
    39ce:	4619      	mov	r1, r3
    39d0:	1e4b      	subs	r3, r1, #1
    39d2:	2900      	cmp	r1, #0
    39d4:	d1f8      	bne.n	39c8 <mbedtls_zeroize+0x2>
}
    39d6:	4770      	bx	lr

000039d8 <mbedtls_zeroize>:

#if !defined(MBEDTLS_CAMELLIA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    39d8:	e003      	b.n	39e2 <mbedtls_zeroize+0xa>
    39da:	2200      	movs	r2, #0
    39dc:	7002      	strb	r2, [r0, #0]
    39de:	3001      	adds	r0, #1
    39e0:	4619      	mov	r1, r3
    39e2:	1e4b      	subs	r3, r1, #1
    39e4:	2900      	cmp	r1, #0
    39e6:	d1f8      	bne.n	39da <mbedtls_zeroize+0x2>
}
    39e8:	4770      	bx	lr

000039ea <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    39ea:	e003      	b.n	39f4 <mbedtls_zeroize+0xa>
    39ec:	2200      	movs	r2, #0
    39ee:	7002      	strb	r2, [r0, #0]
    39f0:	3001      	adds	r0, #1
    39f2:	4619      	mov	r1, r3
    39f4:	1e4b      	subs	r3, r1, #1
    39f6:	2900      	cmp	r1, #0
    39f8:	d1f8      	bne.n	39ec <mbedtls_zeroize+0x2>
}
    39fa:	4770      	bx	lr

000039fc <mbedtls_zeroize>:
#define MBEDTLS_CIPHER_MODE_STREAM
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    39fc:	e003      	b.n	3a06 <mbedtls_zeroize+0xa>
    39fe:	2200      	movs	r2, #0
    3a00:	7002      	strb	r2, [r0, #0]
    3a02:	3001      	adds	r0, #1
    3a04:	4619      	mov	r1, r3
    3a06:	1e4b      	subs	r3, r1, #1
    3a08:	2900      	cmp	r1, #0
    3a0a:	d1f8      	bne.n	39fe <mbedtls_zeroize+0x2>
}
    3a0c:	4770      	bx	lr

00003a0e <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3a0e:	e003      	b.n	3a18 <mbedtls_zeroize+0xa>
    3a10:	2200      	movs	r2, #0
    3a12:	7002      	strb	r2, [r0, #0]
    3a14:	3001      	adds	r0, #1
    3a16:	4619      	mov	r1, r3
    3a18:	1e4b      	subs	r3, r1, #1
    3a1a:	2900      	cmp	r1, #0
    3a1c:	d1f8      	bne.n	3a10 <mbedtls_zeroize+0x2>
}
    3a1e:	4770      	bx	lr

00003a20 <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a20:	e003      	b.n	3a2a <mbedtls_zeroize+0xa>
    3a22:	2200      	movs	r2, #0
    3a24:	7002      	strb	r2, [r0, #0]
    3a26:	3001      	adds	r0, #1
    3a28:	4619      	mov	r1, r3
    3a2a:	1e4b      	subs	r3, r1, #1
    3a2c:	2900      	cmp	r1, #0
    3a2e:	d1f8      	bne.n	3a22 <mbedtls_zeroize+0x2>
}
    3a30:	4770      	bx	lr

00003a32 <mbedtls_zeroize>:

#if !defined(MBEDTLS_DES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3a32:	e003      	b.n	3a3c <mbedtls_zeroize+0xa>
    3a34:	2200      	movs	r2, #0
    3a36:	7002      	strb	r2, [r0, #0]
    3a38:	3001      	adds	r0, #1
    3a3a:	4619      	mov	r1, r3
    3a3c:	1e4b      	subs	r3, r1, #1
    3a3e:	2900      	cmp	r1, #0
    3a40:	d1f8      	bne.n	3a34 <mbedtls_zeroize+0x2>
}
    3a42:	4770      	bx	lr

00003a44 <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a44:	e003      	b.n	3a4e <mbedtls_zeroize+0xa>
    3a46:	2200      	movs	r2, #0
    3a48:	7002      	strb	r2, [r0, #0]
    3a4a:	3001      	adds	r0, #1
    3a4c:	4619      	mov	r1, r3
    3a4e:	1e4b      	subs	r3, r1, #1
    3a50:	2900      	cmp	r1, #0
    3a52:	d1f8      	bne.n	3a46 <mbedtls_zeroize+0x2>
}
    3a54:	4770      	bx	lr

00003a56 <mbedtls_zeroize>:
#define inline __inline
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a56:	e003      	b.n	3a60 <mbedtls_zeroize+0xa>
    3a58:	2200      	movs	r2, #0
    3a5a:	7002      	strb	r2, [r0, #0]
    3a5c:	3001      	adds	r0, #1
    3a5e:	4619      	mov	r1, r3
    3a60:	1e4b      	subs	r3, r1, #1
    3a62:	2900      	cmp	r1, #0
    3a64:	d1f8      	bne.n	3a58 <mbedtls_zeroize+0x2>
}
    3a66:	4770      	bx	lr

00003a68 <mbedtls_zeroize>:
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a68:	e003      	b.n	3a72 <mbedtls_zeroize+0xa>
    3a6a:	2200      	movs	r2, #0
    3a6c:	7002      	strb	r2, [r0, #0]
    3a6e:	3001      	adds	r0, #1
    3a70:	4619      	mov	r1, r3
    3a72:	1e4b      	subs	r3, r1, #1
    3a74:	2900      	cmp	r1, #0
    3a76:	d1f8      	bne.n	3a6a <mbedtls_zeroize+0x2>
}
    3a78:	4770      	bx	lr

00003a7a <mbedtls_zeroize>:
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a7a:	e003      	b.n	3a84 <mbedtls_zeroize+0xa>
    3a7c:	2200      	movs	r2, #0
    3a7e:	7002      	strb	r2, [r0, #0]
    3a80:	3001      	adds	r0, #1
    3a82:	4619      	mov	r1, r3
    3a84:	1e4b      	subs	r3, r1, #1
    3a86:	2900      	cmp	r1, #0
    3a88:	d1f8      	bne.n	3a7c <mbedtls_zeroize+0x2>
}
    3a8a:	4770      	bx	lr

00003a8c <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a8c:	e003      	b.n	3a96 <mbedtls_zeroize+0xa>
    3a8e:	2200      	movs	r2, #0
    3a90:	7002      	strb	r2, [r0, #0]
    3a92:	3001      	adds	r0, #1
    3a94:	4619      	mov	r1, r3
    3a96:	1e4b      	subs	r3, r1, #1
    3a98:	2900      	cmp	r1, #0
    3a9a:	d1f8      	bne.n	3a8e <mbedtls_zeroize+0x2>
}
    3a9c:	4770      	bx	lr

00003a9e <mbedtls_zeroize>:
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a9e:	e003      	b.n	3aa8 <mbedtls_zeroize+0xa>
    3aa0:	2200      	movs	r2, #0
    3aa2:	7002      	strb	r2, [r0, #0]
    3aa4:	3001      	adds	r0, #1
    3aa6:	4619      	mov	r1, r3
    3aa8:	1e4b      	subs	r3, r1, #1
    3aaa:	2900      	cmp	r1, #0
    3aac:	d1f8      	bne.n	3aa0 <mbedtls_zeroize+0x2>
}
    3aae:	4770      	bx	lr

00003ab0 <mbedtls_zeroize>:

#if !defined(MBEDTLS_MD5_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3ab0:	e003      	b.n	3aba <mbedtls_zeroize+0xa>
    3ab2:	2200      	movs	r2, #0
    3ab4:	7002      	strb	r2, [r0, #0]
    3ab6:	3001      	adds	r0, #1
    3ab8:	4619      	mov	r1, r3
    3aba:	1e4b      	subs	r3, r1, #1
    3abc:	2900      	cmp	r1, #0
    3abe:	d1f8      	bne.n	3ab2 <mbedtls_zeroize+0x2>
}
    3ac0:	4770      	bx	lr

00003ac2 <mbedtls_zeroize>:
#include "mbedtls/threading.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3ac2:	e003      	b.n	3acc <mbedtls_zeroize+0xa>
    3ac4:	2200      	movs	r2, #0
    3ac6:	7002      	strb	r2, [r0, #0]
    3ac8:	3001      	adds	r0, #1
    3aca:	4619      	mov	r1, r3
    3acc:	1e4b      	subs	r3, r1, #1
    3ace:	2900      	cmp	r1, #0
    3ad0:	d1f8      	bne.n	3ac4 <mbedtls_zeroize+0x2>
}
    3ad2:	4770      	bx	lr

00003ad4 <mbedtls_zeroize>:

#include <limits.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3ad4:	e003      	b.n	3ade <mbedtls_zeroize+0xa>
    3ad6:	2200      	movs	r2, #0
    3ad8:	7002      	strb	r2, [r0, #0]
    3ada:	3001      	adds	r0, #1
    3adc:	4619      	mov	r1, r3
    3ade:	1e4b      	subs	r3, r1, #1
    3ae0:	2900      	cmp	r1, #0
    3ae2:	d1f8      	bne.n	3ad6 <mbedtls_zeroize+0x2>
}
    3ae4:	4770      	bx	lr

00003ae6 <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA1_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3ae6:	e003      	b.n	3af0 <mbedtls_zeroize+0xa>
    3ae8:	2200      	movs	r2, #0
    3aea:	7002      	strb	r2, [r0, #0]
    3aec:	3001      	adds	r0, #1
    3aee:	4619      	mov	r1, r3
    3af0:	1e4b      	subs	r3, r1, #1
    3af2:	2900      	cmp	r1, #0
    3af4:	d1f8      	bne.n	3ae8 <mbedtls_zeroize+0x2>
}
    3af6:	4770      	bx	lr

00003af8 <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3af8:	e003      	b.n	3b02 <mbedtls_zeroize+0xa>
    3afa:	2200      	movs	r2, #0
    3afc:	7002      	strb	r2, [r0, #0]
    3afe:	3001      	adds	r0, #1
    3b00:	4619      	mov	r1, r3
    3b02:	1e4b      	subs	r3, r1, #1
    3b04:	2900      	cmp	r1, #0
    3b06:	d1f8      	bne.n	3afa <mbedtls_zeroize+0x2>
}
    3b08:	4770      	bx	lr

00003b0a <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA512_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b0a:	e003      	b.n	3b14 <mbedtls_zeroize+0xa>
    3b0c:	2200      	movs	r2, #0
    3b0e:	7002      	strb	r2, [r0, #0]
    3b10:	3001      	adds	r0, #1
    3b12:	4619      	mov	r1, r3
    3b14:	1e4b      	subs	r3, r1, #1
    3b16:	2900      	cmp	r1, #0
    3b18:	d1f8      	bne.n	3b0c <mbedtls_zeroize+0x2>
}
    3b1a:	4770      	bx	lr

00003b1c <mbedtls_zeroize>:

#include <string.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b1c:	e003      	b.n	3b26 <mbedtls_zeroize+0xa>
    3b1e:	2200      	movs	r2, #0
    3b20:	7002      	strb	r2, [r0, #0]
    3b22:	3001      	adds	r0, #1
    3b24:	4619      	mov	r1, r3
    3b26:	1e4b      	subs	r3, r1, #1
    3b28:	2900      	cmp	r1, #0
    3b2a:	d1f8      	bne.n	3b1e <mbedtls_zeroize+0x2>
}
    3b2c:	4770      	bx	lr

00003b2e <mbedtls_zeroize>:
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b2e:	e003      	b.n	3b38 <mbedtls_zeroize+0xa>
    3b30:	2200      	movs	r2, #0
    3b32:	7002      	strb	r2, [r0, #0]
    3b34:	3001      	adds	r0, #1
    3b36:	4619      	mov	r1, r3
    3b38:	1e4b      	subs	r3, r1, #1
    3b3a:	2900      	cmp	r1, #0
    3b3c:	d1f8      	bne.n	3b30 <mbedtls_zeroize+0x2>
}
    3b3e:	4770      	bx	lr

00003b40 <mbedtls_zeroize>:

#if !defined(MBEDTLS_XTEA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b40:	e003      	b.n	3b4a <mbedtls_zeroize+0xa>
    3b42:	2200      	movs	r2, #0
    3b44:	7002      	strb	r2, [r0, #0]
    3b46:	3001      	adds	r0, #1
    3b48:	4619      	mov	r1, r3
    3b4a:	1e4b      	subs	r3, r1, #1
    3b4c:	2900      	cmp	r1, #0
    3b4e:	d1f8      	bne.n	3b42 <mbedtls_zeroize+0x2>
}
    3b50:	4770      	bx	lr

00003b52 <mbedtls_aes_init>:
}

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    3b52:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
    3b54:	f44f 728c 	mov.w	r2, #280	; 0x118
    3b58:	2100      	movs	r1, #0
    3b5a:	f026 fead 	bl	2a8b8 <memset>
    3b5e:	bd08      	pop	{r3, pc}

00003b60 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
    3b60:	b128      	cbz	r0, 3b6e <mbedtls_aes_free+0xe>
{
    3b62:	b508      	push	{r3, lr}
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
    3b64:	f44f 718c 	mov.w	r1, #280	; 0x118
    3b68:	f7ff ff12 	bl	3990 <mbedtls_zeroize>
    3b6c:	bd08      	pop	{r3, pc}
    3b6e:	4770      	bx	lr

00003b70 <mbedtls_aes_setkey_enc>:
        aes_init_done = 1;

    }
#endif

    switch( keybits )
    3b70:	2ac0      	cmp	r2, #192	; 0xc0
    3b72:	d00f      	beq.n	3b94 <mbedtls_aes_setkey_enc+0x24>
    3b74:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    3b78:	d00f      	beq.n	3b9a <mbedtls_aes_setkey_enc+0x2a>
    3b7a:	2a80      	cmp	r2, #128	; 0x80
    3b7c:	d002      	beq.n	3b84 <mbedtls_aes_setkey_enc+0x14>
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    3b7e:	f06f 001f 	mvn.w	r0, #31
    3b82:	4770      	bx	lr
        case 128: ctx->nr = 10; break;
    3b84:	230a      	movs	r3, #10
    3b86:	6003      	str	r3, [r0, #0]
{
    3b88:	b4f0      	push	{r4, r5, r6, r7}

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
    3b8a:	f100 0308 	add.w	r3, r0, #8
    3b8e:	6043      	str	r3, [r0, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
    3b90:	2500      	movs	r5, #0
    3b92:	e015      	b.n	3bc0 <mbedtls_aes_setkey_enc+0x50>
        case 192: ctx->nr = 12; break;
    3b94:	230c      	movs	r3, #12
    3b96:	6003      	str	r3, [r0, #0]
    3b98:	e7f6      	b.n	3b88 <mbedtls_aes_setkey_enc+0x18>
        case 256: ctx->nr = 14; break;
    3b9a:	230e      	movs	r3, #14
    3b9c:	6003      	str	r3, [r0, #0]
    3b9e:	e7f3      	b.n	3b88 <mbedtls_aes_setkey_enc+0x18>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    3ba0:	f811 4025 	ldrb.w	r4, [r1, r5, lsl #2]
    3ba4:	eb01 0685 	add.w	r6, r1, r5, lsl #2
    3ba8:	7877      	ldrb	r7, [r6, #1]
    3baa:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    3bae:	78b7      	ldrb	r7, [r6, #2]
    3bb0:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    3bb4:	78f6      	ldrb	r6, [r6, #3]
    3bb6:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
    3bba:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
    for( i = 0; i < ( keybits >> 5 ); i++ )
    3bbe:	3501      	adds	r5, #1
    3bc0:	ebb5 1f52 	cmp.w	r5, r2, lsr #5
    3bc4:	d3ec      	bcc.n	3ba0 <mbedtls_aes_setkey_enc+0x30>
    }

    switch( ctx->nr )
    3bc6:	6802      	ldr	r2, [r0, #0]
    3bc8:	2a0c      	cmp	r2, #12
    3bca:	d05d      	beq.n	3c88 <mbedtls_aes_setkey_enc+0x118>
    3bcc:	2a0e      	cmp	r2, #14
    3bce:	f000 80a0 	beq.w	3d12 <mbedtls_aes_setkey_enc+0x1a2>
    3bd2:	2a0a      	cmp	r2, #10
    3bd4:	d029      	beq.n	3c2a <mbedtls_aes_setkey_enc+0xba>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
    3bd6:	2000      	movs	r0, #0
    3bd8:	e025      	b.n	3c26 <mbedtls_aes_setkey_enc+0xb6>
                RK[4]  = RK[0] ^ RCON[i] ^
    3bda:	681a      	ldr	r2, [r3, #0]
    3bdc:	494e      	ldr	r1, [pc, #312]	; (3d18 <mbedtls_aes_setkey_enc+0x1a8>)
    3bde:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
    3be2:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3be4:	68d9      	ldr	r1, [r3, #12]
    3be6:	f3c1 2507 	ubfx	r5, r1, #8, #8
    3bea:	484c      	ldr	r0, [pc, #304]	; (3d1c <mbedtls_aes_setkey_enc+0x1ac>)
    3bec:	5d45      	ldrb	r5, [r0, r5]
                RK[4]  = RK[0] ^ RCON[i] ^
    3bee:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    3bf0:	f3c1 4507 	ubfx	r5, r1, #16, #8
    3bf4:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3bf6:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    3bfa:	0e0d      	lsrs	r5, r1, #24
    3bfc:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    3bfe:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
    3c02:	b2cd      	uxtb	r5, r1
    3c04:	5d40      	ldrb	r0, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    3c06:	ea82 6200 	eor.w	r2, r2, r0, lsl #24
                RK[4]  = RK[0] ^ RCON[i] ^
    3c0a:	611a      	str	r2, [r3, #16]
                RK[5]  = RK[1] ^ RK[4];
    3c0c:	6858      	ldr	r0, [r3, #4]
    3c0e:	4042      	eors	r2, r0
    3c10:	615a      	str	r2, [r3, #20]
                RK[6]  = RK[2] ^ RK[5];
    3c12:	6898      	ldr	r0, [r3, #8]
    3c14:	4042      	eors	r2, r0
    3c16:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[3] ^ RK[6];
    3c18:	404a      	eors	r2, r1
    3c1a:	61da      	str	r2, [r3, #28]
            for( i = 0; i < 10; i++, RK += 4 )
    3c1c:	3401      	adds	r4, #1
    3c1e:	3310      	adds	r3, #16
    3c20:	2c09      	cmp	r4, #9
    3c22:	d9da      	bls.n	3bda <mbedtls_aes_setkey_enc+0x6a>
    return( 0 );
    3c24:	2000      	movs	r0, #0
}
    3c26:	bcf0      	pop	{r4, r5, r6, r7}
    3c28:	4770      	bx	lr
    switch( ctx->nr )
    3c2a:	2400      	movs	r4, #0
    3c2c:	e7f8      	b.n	3c20 <mbedtls_aes_setkey_enc+0xb0>
                RK[6]  = RK[0] ^ RCON[i] ^
    3c2e:	681a      	ldr	r2, [r3, #0]
    3c30:	4939      	ldr	r1, [pc, #228]	; (3d18 <mbedtls_aes_setkey_enc+0x1a8>)
    3c32:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    3c36:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    3c38:	6959      	ldr	r1, [r3, #20]
    3c3a:	f3c1 2507 	ubfx	r5, r1, #8, #8
    3c3e:	4c37      	ldr	r4, [pc, #220]	; (3d1c <mbedtls_aes_setkey_enc+0x1ac>)
    3c40:	5d65      	ldrb	r5, [r4, r5]
                RK[6]  = RK[0] ^ RCON[i] ^
    3c42:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    3c44:	f3c1 4507 	ubfx	r5, r1, #16, #8
    3c48:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    3c4a:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    3c4e:	0e0d      	lsrs	r5, r1, #24
    3c50:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    3c52:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
    3c56:	b2cd      	uxtb	r5, r1
    3c58:	5d64      	ldrb	r4, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    3c5a:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[6]  = RK[0] ^ RCON[i] ^
    3c5e:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[1] ^ RK[6];
    3c60:	685c      	ldr	r4, [r3, #4]
    3c62:	4062      	eors	r2, r4
    3c64:	61da      	str	r2, [r3, #28]
                RK[8]  = RK[2] ^ RK[7];
    3c66:	689c      	ldr	r4, [r3, #8]
    3c68:	4062      	eors	r2, r4
    3c6a:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[3] ^ RK[8];
    3c6c:	68dc      	ldr	r4, [r3, #12]
    3c6e:	4062      	eors	r2, r4
    3c70:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[4] ^ RK[9];
    3c72:	691c      	ldr	r4, [r3, #16]
    3c74:	4062      	eors	r2, r4
    3c76:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[5] ^ RK[10];
    3c78:	404a      	eors	r2, r1
    3c7a:	62da      	str	r2, [r3, #44]	; 0x2c
            for( i = 0; i < 8; i++, RK += 6 )
    3c7c:	3001      	adds	r0, #1
    3c7e:	3318      	adds	r3, #24
    3c80:	2807      	cmp	r0, #7
    3c82:	d9d4      	bls.n	3c2e <mbedtls_aes_setkey_enc+0xbe>
    return( 0 );
    3c84:	2000      	movs	r0, #0
    3c86:	e7ce      	b.n	3c26 <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    3c88:	2000      	movs	r0, #0
    3c8a:	e7f9      	b.n	3c80 <mbedtls_aes_setkey_enc+0x110>
                RK[8]  = RK[0] ^ RCON[i] ^
    3c8c:	681a      	ldr	r2, [r3, #0]
    3c8e:	4822      	ldr	r0, [pc, #136]	; (3d18 <mbedtls_aes_setkey_enc+0x1a8>)
    3c90:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    3c94:	4042      	eors	r2, r0
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3c96:	69d8      	ldr	r0, [r3, #28]
    3c98:	f3c0 2407 	ubfx	r4, r0, #8, #8
    3c9c:	4d1f      	ldr	r5, [pc, #124]	; (3d1c <mbedtls_aes_setkey_enc+0x1ac>)
    3c9e:	5d2c      	ldrb	r4, [r5, r4]
                RK[8]  = RK[0] ^ RCON[i] ^
    3ca0:	4062      	eors	r2, r4
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3ca2:	f3c0 4407 	ubfx	r4, r0, #16, #8
    3ca6:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3ca8:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    3cac:	0e04      	lsrs	r4, r0, #24
    3cae:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3cb0:	ea82 4204 	eor.w	r2, r2, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
    3cb4:	b2c4      	uxtb	r4, r0
    3cb6:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    3cb8:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[8]  = RK[0] ^ RCON[i] ^
    3cbc:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[1] ^ RK[8];
    3cbe:	685c      	ldr	r4, [r3, #4]
    3cc0:	4062      	eors	r2, r4
    3cc2:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[2] ^ RK[9];
    3cc4:	689c      	ldr	r4, [r3, #8]
    3cc6:	4062      	eors	r2, r4
    3cc8:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[3] ^ RK[10];
    3cca:	68dc      	ldr	r4, [r3, #12]
    3ccc:	4062      	eors	r2, r4
    3cce:	62da      	str	r2, [r3, #44]	; 0x2c
                RK[12] = RK[4] ^
    3cd0:	691c      	ldr	r4, [r3, #16]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    3cd2:	b2d6      	uxtb	r6, r2
    3cd4:	5dae      	ldrb	r6, [r5, r6]
                RK[12] = RK[4] ^
    3cd6:	4074      	eors	r4, r6
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3cd8:	f3c2 2607 	ubfx	r6, r2, #8, #8
    3cdc:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    3cde:	ea84 2406 	eor.w	r4, r4, r6, lsl #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3ce2:	f3c2 4607 	ubfx	r6, r2, #16, #8
    3ce6:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3ce8:	ea84 4406 	eor.w	r4, r4, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
    3cec:	0e12      	lsrs	r2, r2, #24
    3cee:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3cf0:	ea84 6202 	eor.w	r2, r4, r2, lsl #24
                RK[12] = RK[4] ^
    3cf4:	631a      	str	r2, [r3, #48]	; 0x30
                RK[13] = RK[5] ^ RK[12];
    3cf6:	695c      	ldr	r4, [r3, #20]
    3cf8:	4062      	eors	r2, r4
    3cfa:	635a      	str	r2, [r3, #52]	; 0x34
                RK[14] = RK[6] ^ RK[13];
    3cfc:	699c      	ldr	r4, [r3, #24]
    3cfe:	4062      	eors	r2, r4
    3d00:	639a      	str	r2, [r3, #56]	; 0x38
                RK[15] = RK[7] ^ RK[14];
    3d02:	4042      	eors	r2, r0
    3d04:	63da      	str	r2, [r3, #60]	; 0x3c
            for( i = 0; i < 7; i++, RK += 8 )
    3d06:	3101      	adds	r1, #1
    3d08:	3320      	adds	r3, #32
    3d0a:	2906      	cmp	r1, #6
    3d0c:	d9be      	bls.n	3c8c <mbedtls_aes_setkey_enc+0x11c>
    return( 0 );
    3d0e:	2000      	movs	r0, #0
    3d10:	e789      	b.n	3c26 <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    3d12:	2100      	movs	r1, #0
    3d14:	e7f9      	b.n	3d0a <mbedtls_aes_setkey_enc+0x19a>
    3d16:	bf00      	nop
    3d18:	00030360 	.word	0x00030360
    3d1c:	0002f160 	.word	0x0002f160

00003d20 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    3d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d24:	b083      	sub	sp, #12
    3d26:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    3d28:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    3d2a:	f891 9000 	ldrb.w	r9, [r1]
    3d2e:	784b      	ldrb	r3, [r1, #1]
    3d30:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    3d34:	788b      	ldrb	r3, [r1, #2]
    3d36:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    3d3a:	78cb      	ldrb	r3, [r1, #3]
    3d3c:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    3d40:	6813      	ldr	r3, [r2, #0]
    3d42:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    3d46:	f891 a004 	ldrb.w	sl, [r1, #4]
    3d4a:	794b      	ldrb	r3, [r1, #5]
    3d4c:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    3d50:	798b      	ldrb	r3, [r1, #6]
    3d52:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    3d56:	79cb      	ldrb	r3, [r1, #7]
    3d58:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    3d5c:	6853      	ldr	r3, [r2, #4]
    3d5e:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    3d62:	7a0c      	ldrb	r4, [r1, #8]
    3d64:	7a4b      	ldrb	r3, [r1, #9]
    3d66:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    3d6a:	7a8b      	ldrb	r3, [r1, #10]
    3d6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    3d70:	7acb      	ldrb	r3, [r1, #11]
    3d72:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    3d76:	6893      	ldr	r3, [r2, #8]
    3d78:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    3d7a:	7b0b      	ldrb	r3, [r1, #12]
    3d7c:	7b4d      	ldrb	r5, [r1, #13]
    3d7e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    3d82:	7b8d      	ldrb	r5, [r1, #14]
    3d84:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    3d88:	7bc9      	ldrb	r1, [r1, #15]
    3d8a:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    3d8e:	f102 0610 	add.w	r6, r2, #16
    3d92:	68d3      	ldr	r3, [r2, #12]
    3d94:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3d96:	6803      	ldr	r3, [r0, #0]
    3d98:	ea4f 0b63 	mov.w	fp, r3, asr #1
    3d9c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    3da0:	460b      	mov	r3, r1
    3da2:	e0bd      	b.n	3f20 <mbedtls_internal_aes_encrypt+0x200>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    3da4:	6832      	ldr	r2, [r6, #0]
    3da6:	fa5f f089 	uxtb.w	r0, r9
    3daa:	49cb      	ldr	r1, [pc, #812]	; (40d8 <mbedtls_internal_aes_encrypt+0x3b8>)
    3dac:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3db0:	ea82 0c00 	eor.w	ip, r2, r0
    3db4:	f3ca 2207 	ubfx	r2, sl, #8, #8
    3db8:	4dc8      	ldr	r5, [pc, #800]	; (40dc <mbedtls_internal_aes_encrypt+0x3bc>)
    3dba:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    3dbe:	ea8c 0c02 	eor.w	ip, ip, r2
    3dc2:	f3c4 4207 	ubfx	r2, r4, #16, #8
    3dc6:	48c6      	ldr	r0, [pc, #792]	; (40e0 <mbedtls_internal_aes_encrypt+0x3c0>)
    3dc8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    3dcc:	ea8c 0c02 	eor.w	ip, ip, r2
    3dd0:	0e1f      	lsrs	r7, r3, #24
    3dd2:	4ac4      	ldr	r2, [pc, #784]	; (40e4 <mbedtls_internal_aes_encrypt+0x3c4>)
    3dd4:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3dd8:	ea8c 0c07 	eor.w	ip, ip, r7
    3ddc:	fa5f fe8a 	uxtb.w	lr, sl
    3de0:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    3de4:	6877      	ldr	r7, [r6, #4]
    3de6:	ea87 080e 	eor.w	r8, r7, lr
    3dea:	f3c4 2707 	ubfx	r7, r4, #8, #8
    3dee:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    3df2:	ea88 0807 	eor.w	r8, r8, r7
    3df6:	f3c3 4707 	ubfx	r7, r3, #16, #8
    3dfa:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    3dfe:	ea88 0807 	eor.w	r8, r8, r7
    3e02:	ea4f 6719 	mov.w	r7, r9, lsr #24
    3e06:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3e0a:	ea88 0807 	eor.w	r8, r8, r7
    3e0e:	fa5f fe84 	uxtb.w	lr, r4
    3e12:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    3e16:	68b7      	ldr	r7, [r6, #8]
    3e18:	ea87 0e0e 	eor.w	lr, r7, lr
    3e1c:	f3c3 2707 	ubfx	r7, r3, #8, #8
    3e20:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    3e24:	ea8e 0e07 	eor.w	lr, lr, r7
    3e28:	f3c9 4707 	ubfx	r7, r9, #16, #8
    3e2c:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    3e30:	ea8e 0e07 	eor.w	lr, lr, r7
    3e34:	ea4f 671a 	mov.w	r7, sl, lsr #24
    3e38:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3e3c:	ea8e 0e07 	eor.w	lr, lr, r7
    3e40:	68f7      	ldr	r7, [r6, #12]
    3e42:	b2db      	uxtb	r3, r3
    3e44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3e48:	405f      	eors	r7, r3
    3e4a:	f3c9 2907 	ubfx	r9, r9, #8, #8
    3e4e:	f855 3029 	ldr.w	r3, [r5, r9, lsl #2]
    3e52:	405f      	eors	r7, r3
    3e54:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    3e58:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
    3e5c:	405f      	eors	r7, r3
    3e5e:	0e24      	lsrs	r4, r4, #24
    3e60:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    3e64:	405f      	eors	r7, r3
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    3e66:	6933      	ldr	r3, [r6, #16]
    3e68:	fa5f f48c 	uxtb.w	r4, ip
    3e6c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3e70:	ea83 0904 	eor.w	r9, r3, r4
    3e74:	f3c8 2307 	ubfx	r3, r8, #8, #8
    3e78:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3e7c:	ea89 0903 	eor.w	r9, r9, r3
    3e80:	f3ce 4307 	ubfx	r3, lr, #16, #8
    3e84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3e88:	ea89 0903 	eor.w	r9, r9, r3
    3e8c:	0e3b      	lsrs	r3, r7, #24
    3e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3e92:	ea89 0903 	eor.w	r9, r9, r3
    3e96:	6973      	ldr	r3, [r6, #20]
    3e98:	fa5f f488 	uxtb.w	r4, r8
    3e9c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3ea0:	ea83 0a04 	eor.w	sl, r3, r4
    3ea4:	f3ce 2307 	ubfx	r3, lr, #8, #8
    3ea8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3eac:	ea8a 0a03 	eor.w	sl, sl, r3
    3eb0:	f3c7 4307 	ubfx	r3, r7, #16, #8
    3eb4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3eb8:	ea8a 0a03 	eor.w	sl, sl, r3
    3ebc:	ea4f 631c 	mov.w	r3, ip, lsr #24
    3ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3ec4:	ea8a 0a03 	eor.w	sl, sl, r3
    3ec8:	69b3      	ldr	r3, [r6, #24]
    3eca:	fa5f f48e 	uxtb.w	r4, lr
    3ece:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3ed2:	405c      	eors	r4, r3
    3ed4:	f3c7 2307 	ubfx	r3, r7, #8, #8
    3ed8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3edc:	405c      	eors	r4, r3
    3ede:	f3cc 4307 	ubfx	r3, ip, #16, #8
    3ee2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3ee6:	405c      	eors	r4, r3
    3ee8:	ea4f 6318 	mov.w	r3, r8, lsr #24
    3eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3ef0:	405c      	eors	r4, r3
    3ef2:	69f3      	ldr	r3, [r6, #28]
    3ef4:	b2ff      	uxtb	r7, r7
    3ef6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    3efa:	404b      	eors	r3, r1
    3efc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    3f00:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
    3f04:	404b      	eors	r3, r1
    3f06:	f3c8 4807 	ubfx	r8, r8, #16, #8
    3f0a:	f850 1028 	ldr.w	r1, [r0, r8, lsl #2]
    3f0e:	404b      	eors	r3, r1
    3f10:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    3f14:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
    3f18:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3f1a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    3f1e:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3f20:	f1bb 0f00 	cmp.w	fp, #0
    3f24:	f73f af3e 	bgt.w	3da4 <mbedtls_internal_aes_encrypt+0x84>
    3f28:	4619      	mov	r1, r3
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    3f2a:	6833      	ldr	r3, [r6, #0]
    3f2c:	fa5f f289 	uxtb.w	r2, r9
    3f30:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 40d8 <mbedtls_internal_aes_encrypt+0x3b8>
    3f34:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    3f38:	405a      	eors	r2, r3
    3f3a:	f3ca 2307 	ubfx	r3, sl, #8, #8
    3f3e:	4f67      	ldr	r7, [pc, #412]	; (40dc <mbedtls_internal_aes_encrypt+0x3bc>)
    3f40:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    3f44:	405a      	eors	r2, r3
    3f46:	f3c4 4307 	ubfx	r3, r4, #16, #8
    3f4a:	4d65      	ldr	r5, [pc, #404]	; (40e0 <mbedtls_internal_aes_encrypt+0x3c0>)
    3f4c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3f50:	405a      	eors	r2, r3
    3f52:	0e0b      	lsrs	r3, r1, #24
    3f54:	4863      	ldr	r0, [pc, #396]	; (40e4 <mbedtls_internal_aes_encrypt+0x3c4>)
    3f56:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3f5a:	405a      	eors	r2, r3
    3f5c:	fa5f fc8a 	uxtb.w	ip, sl
    3f60:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    3f64:	6873      	ldr	r3, [r6, #4]
    3f66:	ea83 0c0c 	eor.w	ip, r3, ip
    3f6a:	f3c4 2307 	ubfx	r3, r4, #8, #8
    3f6e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    3f72:	ea8c 0c03 	eor.w	ip, ip, r3
    3f76:	f3c1 4307 	ubfx	r3, r1, #16, #8
    3f7a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3f7e:	ea8c 0c03 	eor.w	ip, ip, r3
    3f82:	ea4f 6319 	mov.w	r3, r9, lsr #24
    3f86:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3f8a:	ea8c 0c03 	eor.w	ip, ip, r3
    3f8e:	fa5f f884 	uxtb.w	r8, r4
    3f92:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    3f96:	68b3      	ldr	r3, [r6, #8]
    3f98:	ea83 0808 	eor.w	r8, r3, r8
    3f9c:	f3c1 2307 	ubfx	r3, r1, #8, #8
    3fa0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    3fa4:	ea88 0803 	eor.w	r8, r8, r3
    3fa8:	f3c9 4307 	ubfx	r3, r9, #16, #8
    3fac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3fb0:	ea88 0803 	eor.w	r8, r8, r3
    3fb4:	ea4f 631a 	mov.w	r3, sl, lsr #24
    3fb8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3fbc:	ea88 0803 	eor.w	r8, r8, r3
    3fc0:	68f3      	ldr	r3, [r6, #12]
    3fc2:	b2c9      	uxtb	r1, r1
    3fc4:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    3fc8:	404b      	eors	r3, r1
    3fca:	f3c9 2907 	ubfx	r9, r9, #8, #8
    3fce:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
    3fd2:	405f      	eors	r7, r3
    3fd4:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    3fd8:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
    3fdc:	405f      	eors	r7, r3
    3fde:	0e24      	lsrs	r4, r4, #24
    3fe0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    3fe4:	405f      	eors	r7, r3

    X0 = *RK++ ^ \
    3fe6:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    3fe8:	b2d0      	uxtb	r0, r2
    3fea:	4b3f      	ldr	r3, [pc, #252]	; (40e8 <mbedtls_internal_aes_encrypt+0x3c8>)
    3fec:	5c1c      	ldrb	r4, [r3, r0]
    X0 = *RK++ ^ \
    3fee:	404c      	eors	r4, r1
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    3ff0:	f3cc 2107 	ubfx	r1, ip, #8, #8
    3ff4:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    3ff6:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    3ffa:	f3c8 4107 	ubfx	r1, r8, #16, #8
    3ffe:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    4000:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    4004:	0e39      	lsrs	r1, r7, #24
    4006:	5c59      	ldrb	r1, [r3, r1]
    X0 = *RK++ ^ \
    4008:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    400c:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    400e:	fa5f f08c 	uxtb.w	r0, ip
    4012:	5c18      	ldrb	r0, [r3, r0]
    X1 = *RK++ ^ \
    4014:	4048      	eors	r0, r1
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    4016:	f3c8 2107 	ubfx	r1, r8, #8, #8
    401a:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    401c:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    4020:	f3c7 4107 	ubfx	r1, r7, #16, #8
    4024:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    4026:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    402a:	0e11      	lsrs	r1, r2, #24
    402c:	5c59      	ldrb	r1, [r3, r1]
    X1 = *RK++ ^ \
    402e:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    4032:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    4034:	fa5f f588 	uxtb.w	r5, r8
    4038:	5d5d      	ldrb	r5, [r3, r5]
    X2 = *RK++ ^ \
    403a:	404d      	eors	r5, r1
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    403c:	f3c7 2107 	ubfx	r1, r7, #8, #8
    4040:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    4042:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    4046:	f3c2 4107 	ubfx	r1, r2, #16, #8
    404a:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    404c:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    4050:	ea4f 611c 	mov.w	r1, ip, lsr #24
    4054:	5c59      	ldrb	r1, [r3, r1]
    X2 = *RK++ ^ \
    4056:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    405a:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    405c:	b2ff      	uxtb	r7, r7
    405e:	5dde      	ldrb	r6, [r3, r7]
    X3 = *RK++ ^ \
    4060:	4071      	eors	r1, r6
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    4062:	f3c2 2207 	ubfx	r2, r2, #8, #8
    4066:	5c9a      	ldrb	r2, [r3, r2]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    4068:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    406c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    4070:	f813 100c 	ldrb.w	r1, [r3, ip]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    4074:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    4078:	ea4f 6818 	mov.w	r8, r8, lsr #24
    407c:	f813 3008 	ldrb.w	r3, [r3, r8]
    X3 = *RK++ ^ \
    4080:	ea82 6303 	eor.w	r3, r2, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    4084:	9e01      	ldr	r6, [sp, #4]
    4086:	7034      	strb	r4, [r6, #0]
    4088:	f3c4 2207 	ubfx	r2, r4, #8, #8
    408c:	7072      	strb	r2, [r6, #1]
    408e:	f3c4 4207 	ubfx	r2, r4, #16, #8
    4092:	70b2      	strb	r2, [r6, #2]
    4094:	0e24      	lsrs	r4, r4, #24
    4096:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    4098:	7130      	strb	r0, [r6, #4]
    409a:	f3c0 2207 	ubfx	r2, r0, #8, #8
    409e:	7172      	strb	r2, [r6, #5]
    40a0:	f3c0 4207 	ubfx	r2, r0, #16, #8
    40a4:	71b2      	strb	r2, [r6, #6]
    40a6:	0e00      	lsrs	r0, r0, #24
    40a8:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    40aa:	7235      	strb	r5, [r6, #8]
    40ac:	f3c5 2207 	ubfx	r2, r5, #8, #8
    40b0:	7272      	strb	r2, [r6, #9]
    40b2:	f3c5 4207 	ubfx	r2, r5, #16, #8
    40b6:	72b2      	strb	r2, [r6, #10]
    40b8:	0e2d      	lsrs	r5, r5, #24
    40ba:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    40bc:	7333      	strb	r3, [r6, #12]
    40be:	f3c3 2207 	ubfx	r2, r3, #8, #8
    40c2:	7372      	strb	r2, [r6, #13]
    40c4:	f3c3 4207 	ubfx	r2, r3, #16, #8
    40c8:	73b2      	strb	r2, [r6, #14]
    40ca:	0e1b      	lsrs	r3, r3, #24
    40cc:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    40ce:	2000      	movs	r0, #0
    40d0:	b003      	add	sp, #12
    40d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40d6:	bf00      	nop
    40d8:	0002f360 	.word	0x0002f360
    40dc:	0002f760 	.word	0x0002f760
    40e0:	0002fb60 	.word	0x0002fb60
    40e4:	0002ff60 	.word	0x0002ff60
    40e8:	0002f160 	.word	0x0002f160

000040ec <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    40ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40f0:	b083      	sub	sp, #12
    40f2:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    40f4:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    40f6:	f891 a000 	ldrb.w	sl, [r1]
    40fa:	784b      	ldrb	r3, [r1, #1]
    40fc:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    4100:	788b      	ldrb	r3, [r1, #2]
    4102:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    4106:	78cb      	ldrb	r3, [r1, #3]
    4108:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    410c:	6813      	ldr	r3, [r2, #0]
    410e:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    4112:	f891 9004 	ldrb.w	r9, [r1, #4]
    4116:	794b      	ldrb	r3, [r1, #5]
    4118:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    411c:	798b      	ldrb	r3, [r1, #6]
    411e:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    4122:	79cb      	ldrb	r3, [r1, #7]
    4124:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    4128:	6853      	ldr	r3, [r2, #4]
    412a:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    412e:	7a0c      	ldrb	r4, [r1, #8]
    4130:	7a4b      	ldrb	r3, [r1, #9]
    4132:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    4136:	7a8b      	ldrb	r3, [r1, #10]
    4138:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    413c:	7acb      	ldrb	r3, [r1, #11]
    413e:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    4142:	6893      	ldr	r3, [r2, #8]
    4144:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    4146:	7b0b      	ldrb	r3, [r1, #12]
    4148:	7b4d      	ldrb	r5, [r1, #13]
    414a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    414e:	7b8d      	ldrb	r5, [r1, #14]
    4150:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    4154:	7bc9      	ldrb	r1, [r1, #15]
    4156:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    415a:	f102 0610 	add.w	r6, r2, #16
    415e:	68d3      	ldr	r3, [r2, #12]
    4160:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    4162:	6803      	ldr	r3, [r0, #0]
    4164:	ea4f 0b63 	mov.w	fp, r3, asr #1
    4168:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    416c:	460b      	mov	r3, r1
    416e:	e0bd      	b.n	42ec <mbedtls_internal_aes_decrypt+0x200>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    4170:	6832      	ldr	r2, [r6, #0]
    4172:	fa5f f08a 	uxtb.w	r0, sl
    4176:	49cb      	ldr	r1, [pc, #812]	; (44a4 <mbedtls_internal_aes_decrypt+0x3b8>)
    4178:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    417c:	ea82 0800 	eor.w	r8, r2, r0
    4180:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4184:	4dc8      	ldr	r5, [pc, #800]	; (44a8 <mbedtls_internal_aes_decrypt+0x3bc>)
    4186:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    418a:	ea88 0802 	eor.w	r8, r8, r2
    418e:	f3c4 4207 	ubfx	r2, r4, #16, #8
    4192:	48c6      	ldr	r0, [pc, #792]	; (44ac <mbedtls_internal_aes_decrypt+0x3c0>)
    4194:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4198:	ea88 0802 	eor.w	r8, r8, r2
    419c:	ea4f 6719 	mov.w	r7, r9, lsr #24
    41a0:	4ac3      	ldr	r2, [pc, #780]	; (44b0 <mbedtls_internal_aes_decrypt+0x3c4>)
    41a2:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    41a6:	ea88 0807 	eor.w	r8, r8, r7
    41aa:	fa5f fe89 	uxtb.w	lr, r9
    41ae:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    41b2:	6877      	ldr	r7, [r6, #4]
    41b4:	ea87 0c0e 	eor.w	ip, r7, lr
    41b8:	f3ca 2707 	ubfx	r7, sl, #8, #8
    41bc:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    41c0:	ea8c 0c07 	eor.w	ip, ip, r7
    41c4:	f3c3 4707 	ubfx	r7, r3, #16, #8
    41c8:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    41cc:	ea8c 0c07 	eor.w	ip, ip, r7
    41d0:	0e27      	lsrs	r7, r4, #24
    41d2:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    41d6:	ea8c 0c07 	eor.w	ip, ip, r7
    41da:	fa5f fe84 	uxtb.w	lr, r4
    41de:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    41e2:	68b7      	ldr	r7, [r6, #8]
    41e4:	ea87 0e0e 	eor.w	lr, r7, lr
    41e8:	f3c9 2707 	ubfx	r7, r9, #8, #8
    41ec:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    41f0:	ea8e 0e07 	eor.w	lr, lr, r7
    41f4:	f3ca 4707 	ubfx	r7, sl, #16, #8
    41f8:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    41fc:	ea8e 0e07 	eor.w	lr, lr, r7
    4200:	0e1f      	lsrs	r7, r3, #24
    4202:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    4206:	ea8e 0e07 	eor.w	lr, lr, r7
    420a:	68f7      	ldr	r7, [r6, #12]
    420c:	b2db      	uxtb	r3, r3
    420e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4212:	405f      	eors	r7, r3
    4214:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4218:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    421c:	405f      	eors	r7, r3
    421e:	f3c9 4907 	ubfx	r9, r9, #16, #8
    4222:	f850 3029 	ldr.w	r3, [r0, r9, lsl #2]
    4226:	405f      	eors	r7, r3
    4228:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    422c:	f852 302a 	ldr.w	r3, [r2, sl, lsl #2]
    4230:	405f      	eors	r7, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    4232:	6933      	ldr	r3, [r6, #16]
    4234:	fa5f f488 	uxtb.w	r4, r8
    4238:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    423c:	ea83 0a04 	eor.w	sl, r3, r4
    4240:	f3c7 2307 	ubfx	r3, r7, #8, #8
    4244:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4248:	ea8a 0a03 	eor.w	sl, sl, r3
    424c:	f3ce 4307 	ubfx	r3, lr, #16, #8
    4250:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4254:	ea8a 0a03 	eor.w	sl, sl, r3
    4258:	ea4f 631c 	mov.w	r3, ip, lsr #24
    425c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4260:	ea8a 0a03 	eor.w	sl, sl, r3
    4264:	6973      	ldr	r3, [r6, #20]
    4266:	fa5f f48c 	uxtb.w	r4, ip
    426a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    426e:	ea83 0904 	eor.w	r9, r3, r4
    4272:	f3c8 2307 	ubfx	r3, r8, #8, #8
    4276:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    427a:	ea89 0903 	eor.w	r9, r9, r3
    427e:	f3c7 4307 	ubfx	r3, r7, #16, #8
    4282:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4286:	ea89 0903 	eor.w	r9, r9, r3
    428a:	ea4f 631e 	mov.w	r3, lr, lsr #24
    428e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4292:	ea89 0903 	eor.w	r9, r9, r3
    4296:	69b3      	ldr	r3, [r6, #24]
    4298:	fa5f f48e 	uxtb.w	r4, lr
    429c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    42a0:	405c      	eors	r4, r3
    42a2:	f3cc 2307 	ubfx	r3, ip, #8, #8
    42a6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    42aa:	405c      	eors	r4, r3
    42ac:	f3c8 4307 	ubfx	r3, r8, #16, #8
    42b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    42b4:	405c      	eors	r4, r3
    42b6:	0e3b      	lsrs	r3, r7, #24
    42b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    42bc:	405c      	eors	r4, r3
    42be:	69f3      	ldr	r3, [r6, #28]
    42c0:	b2ff      	uxtb	r7, r7
    42c2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    42c6:	404b      	eors	r3, r1
    42c8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    42cc:	f855 102e 	ldr.w	r1, [r5, lr, lsl #2]
    42d0:	404b      	eors	r3, r1
    42d2:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    42d6:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
    42da:	404b      	eors	r3, r1
    42dc:	ea4f 6818 	mov.w	r8, r8, lsr #24
    42e0:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    42e4:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    42e6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    42ea:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    42ec:	f1bb 0f00 	cmp.w	fp, #0
    42f0:	f73f af3e 	bgt.w	4170 <mbedtls_internal_aes_decrypt+0x84>
    42f4:	4619      	mov	r1, r3
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    42f6:	6833      	ldr	r3, [r6, #0]
    42f8:	fa5f f28a 	uxtb.w	r2, sl
    42fc:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 44a4 <mbedtls_internal_aes_decrypt+0x3b8>
    4300:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    4304:	4053      	eors	r3, r2
    4306:	f3c1 2207 	ubfx	r2, r1, #8, #8
    430a:	4f67      	ldr	r7, [pc, #412]	; (44a8 <mbedtls_internal_aes_decrypt+0x3bc>)
    430c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    4310:	4053      	eors	r3, r2
    4312:	f3c4 4207 	ubfx	r2, r4, #16, #8
    4316:	4d65      	ldr	r5, [pc, #404]	; (44ac <mbedtls_internal_aes_decrypt+0x3c0>)
    4318:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    431c:	4053      	eors	r3, r2
    431e:	ea4f 6219 	mov.w	r2, r9, lsr #24
    4322:	4863      	ldr	r0, [pc, #396]	; (44b0 <mbedtls_internal_aes_decrypt+0x3c4>)
    4324:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4328:	4053      	eors	r3, r2
    432a:	fa5f fc89 	uxtb.w	ip, r9
    432e:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    4332:	6872      	ldr	r2, [r6, #4]
    4334:	ea82 0c0c 	eor.w	ip, r2, ip
    4338:	f3ca 2207 	ubfx	r2, sl, #8, #8
    433c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    4340:	ea8c 0c02 	eor.w	ip, ip, r2
    4344:	f3c1 4207 	ubfx	r2, r1, #16, #8
    4348:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    434c:	ea8c 0c02 	eor.w	ip, ip, r2
    4350:	0e22      	lsrs	r2, r4, #24
    4352:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4356:	ea8c 0c02 	eor.w	ip, ip, r2
    435a:	fa5f f884 	uxtb.w	r8, r4
    435e:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    4362:	68b2      	ldr	r2, [r6, #8]
    4364:	ea82 0808 	eor.w	r8, r2, r8
    4368:	f3c9 2207 	ubfx	r2, r9, #8, #8
    436c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    4370:	ea88 0802 	eor.w	r8, r8, r2
    4374:	f3ca 4207 	ubfx	r2, sl, #16, #8
    4378:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    437c:	ea88 0802 	eor.w	r8, r8, r2
    4380:	0e0a      	lsrs	r2, r1, #24
    4382:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4386:	ea88 0802 	eor.w	r8, r8, r2
    438a:	68f2      	ldr	r2, [r6, #12]
    438c:	b2c9      	uxtb	r1, r1
    438e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    4392:	404a      	eors	r2, r1
    4394:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4398:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
    439c:	4057      	eors	r7, r2
    439e:	f3c9 4907 	ubfx	r9, r9, #16, #8
    43a2:	f855 2029 	ldr.w	r2, [r5, r9, lsl #2]
    43a6:	4057      	eors	r7, r2
    43a8:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    43ac:	f850 202a 	ldr.w	r2, [r0, sl, lsl #2]
    43b0:	4057      	eors	r7, r2

    X0 = *RK++ ^ \
    43b2:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    43b4:	b2d8      	uxtb	r0, r3
    43b6:	4a3f      	ldr	r2, [pc, #252]	; (44b4 <mbedtls_internal_aes_decrypt+0x3c8>)
    43b8:	5c14      	ldrb	r4, [r2, r0]
    X0 = *RK++ ^ \
    43ba:	404c      	eors	r4, r1
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    43bc:	f3c7 2107 	ubfx	r1, r7, #8, #8
    43c0:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    43c2:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    43c6:	f3c8 4107 	ubfx	r1, r8, #16, #8
    43ca:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    43cc:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    43d0:	ea4f 611c 	mov.w	r1, ip, lsr #24
    43d4:	5c51      	ldrb	r1, [r2, r1]
    X0 = *RK++ ^ \
    43d6:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    43da:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    43dc:	fa5f f08c 	uxtb.w	r0, ip
    43e0:	5c10      	ldrb	r0, [r2, r0]
    X1 = *RK++ ^ \
    43e2:	4048      	eors	r0, r1
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    43e4:	f3c3 2107 	ubfx	r1, r3, #8, #8
    43e8:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    43ea:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    43ee:	f3c7 4107 	ubfx	r1, r7, #16, #8
    43f2:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    43f4:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    43f8:	ea4f 6118 	mov.w	r1, r8, lsr #24
    43fc:	5c51      	ldrb	r1, [r2, r1]
    X1 = *RK++ ^ \
    43fe:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    4402:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    4404:	fa5f f588 	uxtb.w	r5, r8
    4408:	5d55      	ldrb	r5, [r2, r5]
    X2 = *RK++ ^ \
    440a:	404d      	eors	r5, r1
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    440c:	f3cc 2107 	ubfx	r1, ip, #8, #8
    4410:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    4412:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    4416:	f3c3 4107 	ubfx	r1, r3, #16, #8
    441a:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    441c:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    4420:	0e39      	lsrs	r1, r7, #24
    4422:	5c51      	ldrb	r1, [r2, r1]
    X2 = *RK++ ^ \
    4424:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    4428:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    442a:	b2ff      	uxtb	r7, r7
    442c:	5dd6      	ldrb	r6, [r2, r7]
    X3 = *RK++ ^ \
    442e:	4071      	eors	r1, r6
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    4430:	f3c8 2807 	ubfx	r8, r8, #8, #8
    4434:	f812 6008 	ldrb.w	r6, [r2, r8]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    4438:	ea81 2106 	eor.w	r1, r1, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    443c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    4440:	f812 600c 	ldrb.w	r6, [r2, ip]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    4444:	ea81 4106 	eor.w	r1, r1, r6, lsl #16
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    4448:	0e1b      	lsrs	r3, r3, #24
    444a:	5cd3      	ldrb	r3, [r2, r3]
    X3 = *RK++ ^ \
    444c:	ea81 6303 	eor.w	r3, r1, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    4450:	9e01      	ldr	r6, [sp, #4]
    4452:	7034      	strb	r4, [r6, #0]
    4454:	f3c4 2207 	ubfx	r2, r4, #8, #8
    4458:	7072      	strb	r2, [r6, #1]
    445a:	f3c4 4207 	ubfx	r2, r4, #16, #8
    445e:	70b2      	strb	r2, [r6, #2]
    4460:	0e24      	lsrs	r4, r4, #24
    4462:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    4464:	7130      	strb	r0, [r6, #4]
    4466:	f3c0 2207 	ubfx	r2, r0, #8, #8
    446a:	7172      	strb	r2, [r6, #5]
    446c:	f3c0 4207 	ubfx	r2, r0, #16, #8
    4470:	71b2      	strb	r2, [r6, #6]
    4472:	0e00      	lsrs	r0, r0, #24
    4474:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    4476:	7235      	strb	r5, [r6, #8]
    4478:	f3c5 2207 	ubfx	r2, r5, #8, #8
    447c:	7272      	strb	r2, [r6, #9]
    447e:	f3c5 4207 	ubfx	r2, r5, #16, #8
    4482:	72b2      	strb	r2, [r6, #10]
    4484:	0e2d      	lsrs	r5, r5, #24
    4486:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    4488:	7333      	strb	r3, [r6, #12]
    448a:	f3c3 2207 	ubfx	r2, r3, #8, #8
    448e:	7372      	strb	r2, [r6, #13]
    4490:	f3c3 4207 	ubfx	r2, r3, #16, #8
    4494:	73b2      	strb	r2, [r6, #14]
    4496:	0e1b      	lsrs	r3, r3, #24
    4498:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    449a:	2000      	movs	r0, #0
    449c:	b003      	add	sp, #12
    449e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44a2:	bf00      	nop
    44a4:	00030488 	.word	0x00030488
    44a8:	00030888 	.word	0x00030888
    44ac:	00030c88 	.word	0x00030c88
    44b0:	00031088 	.word	0x00031088
    44b4:	00030388 	.word	0x00030388

000044b8 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
    44b8:	b510      	push	{r4, lr}
    44ba:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
    44bc:	2901      	cmp	r1, #1
    44be:	d004      	beq.n	44ca <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
    44c0:	461a      	mov	r2, r3
    44c2:	4621      	mov	r1, r4
    44c4:	f7ff fe12 	bl	40ec <mbedtls_internal_aes_decrypt>
}
    44c8:	bd10      	pop	{r4, pc}
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    44ca:	461a      	mov	r2, r3
    44cc:	4621      	mov	r1, r4
    44ce:	f7ff fc27 	bl	3d20 <mbedtls_internal_aes_encrypt>
    44d2:	bd10      	pop	{r4, pc}

000044d4 <mbedtls_aes_crypt_ctr>:
                       size_t *nc_off,
                       unsigned char nonce_counter[16],
                       unsigned char stream_block[16],
                       const unsigned char *input,
                       unsigned char *output )
{
    44d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44d8:	4682      	mov	sl, r0
    44da:	4693      	mov	fp, r2
    44dc:	461d      	mov	r5, r3
    44de:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    44e2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    44e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    int c, i;
    size_t n = *nc_off;
    44e6:	6814      	ldr	r4, [r2, #0]

    while( length-- )
    44e8:	e00a      	b.n	4500 <mbedtls_aes_crypt_ctr+0x2c>

            for( i = 16; i > 0; i-- )
                if( ++nonce_counter[i - 1] != 0 )
                    break;
        }
        c = *input++;
    44ea:	783a      	ldrb	r2, [r7, #0]
        *output++ = (unsigned char)( c ^ stream_block[n] );
    44ec:	f919 3004 	ldrsb.w	r3, [r9, r4]
    44f0:	4053      	eors	r3, r2
    44f2:	7033      	strb	r3, [r6, #0]

        n = ( n + 1 ) & 0x0F;
    44f4:	3401      	adds	r4, #1
    44f6:	f004 040f 	and.w	r4, r4, #15
        *output++ = (unsigned char)( c ^ stream_block[n] );
    44fa:	3601      	adds	r6, #1
        c = *input++;
    44fc:	3701      	adds	r7, #1
    while( length-- )
    44fe:	4641      	mov	r1, r8
    4500:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
    4504:	b199      	cbz	r1, 452e <mbedtls_aes_crypt_ctr+0x5a>
        if( n == 0 ) {
    4506:	2c00      	cmp	r4, #0
    4508:	d1ef      	bne.n	44ea <mbedtls_aes_crypt_ctr+0x16>
            mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, nonce_counter, stream_block );
    450a:	464b      	mov	r3, r9
    450c:	462a      	mov	r2, r5
    450e:	2101      	movs	r1, #1
    4510:	4650      	mov	r0, sl
    4512:	f7ff ffd1 	bl	44b8 <mbedtls_aes_crypt_ecb>
            for( i = 16; i > 0; i-- )
    4516:	2210      	movs	r2, #16
    4518:	2a00      	cmp	r2, #0
    451a:	dde6      	ble.n	44ea <mbedtls_aes_crypt_ctr+0x16>
                if( ++nonce_counter[i - 1] != 0 )
    451c:	1e51      	subs	r1, r2, #1
    451e:	5c6b      	ldrb	r3, [r5, r1]
    4520:	3301      	adds	r3, #1
    4522:	b2db      	uxtb	r3, r3
    4524:	546b      	strb	r3, [r5, r1]
    4526:	2b00      	cmp	r3, #0
    4528:	d1df      	bne.n	44ea <mbedtls_aes_crypt_ctr+0x16>
            for( i = 16; i > 0; i-- )
    452a:	460a      	mov	r2, r1
    452c:	e7f4      	b.n	4518 <mbedtls_aes_crypt_ctr+0x44>
    }

    *nc_off = n;
    452e:	f8cb 4000 	str.w	r4, [fp]

    return( 0 );
}
    4532:	2000      	movs	r0, #0
    4534:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004538 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    4538:	b530      	push	{r4, r5, lr}
    453a:	b085      	sub	sp, #20
    453c:	4604      	mov	r4, r0
    453e:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    4540:	2203      	movs	r2, #3
    4542:	4668      	mov	r0, sp
    4544:	f7fb febc 	bl	2c0 <memcpy>
	memset(res + 3, 0, 13);
    4548:	220d      	movs	r2, #13
    454a:	2100      	movs	r1, #0
    454c:	f10d 0003 	add.w	r0, sp, #3
    4550:	f026 f9b2 	bl	2a8b8 <memset>

	err = bt_encrypt_le(irk, res, res);
    4554:	466a      	mov	r2, sp
    4556:	4669      	mov	r1, sp
    4558:	4620      	mov	r0, r4
    455a:	f00d f8a1 	bl	116a0 <bt_encrypt_le>
	if (err) {
    455e:	4604      	mov	r4, r0
    4560:	b110      	cbz	r0, 4568 <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
    4562:	4620      	mov	r0, r4
    4564:	b005      	add	sp, #20
    4566:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
    4568:	2203      	movs	r2, #3
    456a:	4669      	mov	r1, sp
    456c:	4628      	mov	r0, r5
    456e:	f7fb fea7 	bl	2c0 <memcpy>
	return 0;
    4572:	e7f6      	b.n	4562 <ah+0x2a>

00004574 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    4574:	b510      	push	{r4, lr}
    4576:	b082      	sub	sp, #8
    4578:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    457a:	aa01      	add	r2, sp, #4
    457c:	3103      	adds	r1, #3
    457e:	f7ff ffdb 	bl	4538 <ah>
	if (err) {
    4582:	b110      	cbz	r0, 458a <bt_rpa_irk_matches+0x16>
		return false;
    4584:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
    4586:	b002      	add	sp, #8
    4588:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
    458a:	2203      	movs	r2, #3
    458c:	a901      	add	r1, sp, #4
    458e:	4620      	mov	r0, r4
    4590:	f026 f8fe 	bl	2a790 <memcmp>
    4594:	fab0 f080 	clz	r0, r0
    4598:	0940      	lsrs	r0, r0, #5
    459a:	e7f4      	b.n	4586 <bt_rpa_irk_matches+0x12>

0000459c <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    459c:	b570      	push	{r4, r5, r6, lr}
    459e:	4606      	mov	r6, r0
    45a0:	460c      	mov	r4, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    45a2:	1ccd      	adds	r5, r1, #3
    45a4:	2103      	movs	r1, #3
    45a6:	4628      	mov	r0, r5
    45a8:	f00d f85e 	bl	11668 <bt_rand>
	if (err) {
    45ac:	4603      	mov	r3, r0
    45ae:	b108      	cbz	r0, 45b4 <bt_rpa_create+0x18>
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    45b0:	4618      	mov	r0, r3
    45b2:	bd70      	pop	{r4, r5, r6, pc}
	BT_ADDR_SET_RPA(rpa);
    45b4:	f994 3005 	ldrsb.w	r3, [r4, #5]
    45b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    45bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    45c0:	7163      	strb	r3, [r4, #5]
	err = ah(irk, rpa->val + 3, rpa->val);
    45c2:	4622      	mov	r2, r4
    45c4:	4629      	mov	r1, r5
    45c6:	4630      	mov	r0, r6
    45c8:	f7ff ffb6 	bl	4538 <ah>
    45cc:	4603      	mov	r3, r0
    45ce:	e7ef      	b.n	45b0 <bt_rpa_create+0x14>

000045d0 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    45d0:	b570      	push	{r4, r5, r6, lr}
    45d2:	4605      	mov	r5, r0
    45d4:	460c      	mov	r4, r1
	switch (src->type) {
    45d6:	7803      	ldrb	r3, [r0, #0]
    45d8:	2b01      	cmp	r3, #1
    45da:	d010      	beq.n	45fe <uuid_to_uuid128+0x2e>
    45dc:	b113      	cbz	r3, 45e4 <uuid_to_uuid128+0x14>
    45de:	2b02      	cmp	r3, #2
    45e0:	d01f      	beq.n	4622 <uuid_to_uuid128+0x52>
    45e2:	bd70      	pop	{r4, r5, r6, pc}
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    45e4:	4e12      	ldr	r6, [pc, #72]	; (4630 <uuid_to_uuid128+0x60>)
    45e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    45e8:	6020      	str	r0, [r4, #0]
    45ea:	6061      	str	r1, [r4, #4]
    45ec:	60a2      	str	r2, [r4, #8]
    45ee:	60e3      	str	r3, [r4, #12]
    45f0:	7833      	ldrb	r3, [r6, #0]
    45f2:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
    45f4:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    45f6:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    45f8:	0a1b      	lsrs	r3, r3, #8
    45fa:	73a3      	strb	r3, [r4, #14]
    45fc:	bd70      	pop	{r4, r5, r6, pc}
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    45fe:	4e0c      	ldr	r6, [pc, #48]	; (4630 <uuid_to_uuid128+0x60>)
    4600:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    4602:	6020      	str	r0, [r4, #0]
    4604:	6061      	str	r1, [r4, #4]
    4606:	60a2      	str	r2, [r4, #8]
    4608:	60e3      	str	r3, [r4, #12]
    460a:	7833      	ldrb	r3, [r6, #0]
    460c:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
    460e:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
    4610:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    4612:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4616:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    4618:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    461a:	73e3      	strb	r3, [r4, #15]
	dst[1] = val >> 8;
    461c:	0a1b      	lsrs	r3, r3, #8
    461e:	7423      	strb	r3, [r4, #16]
    4620:	bd70      	pop	{r4, r5, r6, pc}
    4622:	4608      	mov	r0, r1
    4624:	4629      	mov	r1, r5
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    4626:	2211      	movs	r2, #17
    4628:	f7fb fe4a 	bl	2c0 <memcpy>
    462c:	bd70      	pop	{r4, r5, r6, pc}
    462e:	bf00      	nop
    4630:	00031488 	.word	0x00031488

00004634 <uuid128_cmp>:
		return;
	}
}

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    4634:	b510      	push	{r4, lr}
    4636:	b08a      	sub	sp, #40	; 0x28
    4638:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    463a:	a905      	add	r1, sp, #20
    463c:	f7ff ffc8 	bl	45d0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    4640:	4669      	mov	r1, sp
    4642:	4620      	mov	r0, r4
    4644:	f7ff ffc4 	bl	45d0 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    4648:	2210      	movs	r2, #16
    464a:	f10d 0101 	add.w	r1, sp, #1
    464e:	f10d 0015 	add.w	r0, sp, #21
    4652:	f026 f89d 	bl	2a790 <memcmp>
}
    4656:	b00a      	add	sp, #40	; 0x28
    4658:	bd10      	pop	{r4, pc}

0000465a <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    465a:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    465c:	7803      	ldrb	r3, [r0, #0]
    465e:	780a      	ldrb	r2, [r1, #0]
    4660:	4293      	cmp	r3, r2
    4662:	d107      	bne.n	4674 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    4664:	2b01      	cmp	r3, #1
    4666:	d00c      	beq.n	4682 <bt_uuid_cmp+0x28>
    4668:	b13b      	cbz	r3, 467a <bt_uuid_cmp+0x20>
    466a:	2b02      	cmp	r3, #2
    466c:	d00d      	beq.n	468a <bt_uuid_cmp+0x30>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
    466e:	f06f 0015 	mvn.w	r0, #21
}
    4672:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
    4674:	f7ff ffde 	bl	4634 <uuid128_cmp>
    4678:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    467a:	8840      	ldrh	r0, [r0, #2]
    467c:	884b      	ldrh	r3, [r1, #2]
    467e:	1ac0      	subs	r0, r0, r3
    4680:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    4682:	6840      	ldr	r0, [r0, #4]
    4684:	684b      	ldr	r3, [r1, #4]
    4686:	1ac0      	subs	r0, r0, r3
    4688:	bd08      	pop	{r3, pc}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    468a:	2210      	movs	r2, #16
    468c:	3101      	adds	r1, #1
    468e:	3001      	adds	r0, #1
    4690:	f026 f87e 	bl	2a790 <memcmp>
    4694:	bd08      	pop	{r3, pc}
	...

00004698 <le_dhkey_complete>:
		cb->func(evt->status ? NULL : evt->key);
	}
}

static void le_dhkey_complete(struct net_buf *buf)
{
    4698:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    469a:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    469c:	4b06      	ldr	r3, [pc, #24]	; (46b8 <le_dhkey_complete+0x20>)
    469e:	681b      	ldr	r3, [r3, #0]
    46a0:	b133      	cbz	r3, 46b0 <le_dhkey_complete+0x18>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    46a2:	7802      	ldrb	r2, [r0, #0]
    46a4:	b92a      	cbnz	r2, 46b2 <le_dhkey_complete+0x1a>
    46a6:	3001      	adds	r0, #1
    46a8:	4798      	blx	r3
		dh_key_cb = NULL;
    46aa:	2200      	movs	r2, #0
    46ac:	4b02      	ldr	r3, [pc, #8]	; (46b8 <le_dhkey_complete+0x20>)
    46ae:	601a      	str	r2, [r3, #0]
    46b0:	bd08      	pop	{r3, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    46b2:	2000      	movs	r0, #0
    46b4:	e7f8      	b.n	46a8 <le_dhkey_complete+0x10>
    46b6:	bf00      	nop
    46b8:	200008bc 	.word	0x200008bc

000046bc <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    46bc:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    46be:	7851      	ldrb	r1, [r2, #1]
    46c0:	4b06      	ldr	r3, [pc, #24]	; (46dc <read_local_ver_complete+0x20>)
    46c2:	7399      	strb	r1, [r3, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    46c4:	8851      	ldrh	r1, [r2, #2]
    46c6:	8219      	strh	r1, [r3, #16]
	bt_dev.lmp_version = rp->lmp_version;
    46c8:	7911      	ldrb	r1, [r2, #4]
    46ca:	73d9      	strb	r1, [r3, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    46cc:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    46d0:	8259      	strh	r1, [r3, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    46d2:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    46d6:	829a      	strh	r2, [r3, #20]
    46d8:	4770      	bx	lr
    46da:	bf00      	nop
    46dc:	2000be68 	.word	0x2000be68

000046e0 <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
    46e0:	b410      	push	{r4}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    46e2:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    46e4:	7a1a      	ldrb	r2, [r3, #8]
    46e6:	79dc      	ldrb	r4, [r3, #7]
    46e8:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    46ec:	7999      	ldrb	r1, [r3, #6]
    46ee:	795a      	ldrb	r2, [r3, #5]
    46f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    46f4:	2000      	movs	r0, #0
    46f6:	ea42 4104 	orr.w	r1, r2, r4, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    46fa:	791c      	ldrb	r4, [r3, #4]
    46fc:	78da      	ldrb	r2, [r3, #3]
    46fe:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    4702:	789c      	ldrb	r4, [r3, #2]
    4704:	785b      	ldrb	r3, [r3, #1]
    4706:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    470a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    470e:	4318      	orrs	r0, r3

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    4710:	4b02      	ldr	r3, [pc, #8]	; (471c <le_read_supp_states_complete+0x3c>)
    4712:	e9c3 0120 	strd	r0, r1, [r3, #128]	; 0x80
}
    4716:	bc10      	pop	{r4}
    4718:	4770      	bx	lr
    471a:	bf00      	nop
    471c:	2000be68 	.word	0x2000be68

00004720 <valid_adv_param>:
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    4720:	7803      	ldrb	r3, [r0, #0]
    4722:	f013 0f01 	tst.w	r3, #1
    4726:	d106      	bne.n	4736 <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    4728:	4b0c      	ldr	r3, [pc, #48]	; (475c <valid_adv_param+0x3c>)
    472a:	7b9b      	ldrb	r3, [r3, #14]
    472c:	2b08      	cmp	r3, #8
    472e:	d802      	bhi.n	4736 <valid_adv_param+0x16>
		    param->interval_min < 0x00a0) {
    4730:	8843      	ldrh	r3, [r0, #2]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    4732:	2b9f      	cmp	r3, #159	; 0x9f
    4734:	d90c      	bls.n	4750 <valid_adv_param+0x30>
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    4736:	8843      	ldrh	r3, [r0, #2]
    4738:	8882      	ldrh	r2, [r0, #4]
    473a:	4293      	cmp	r3, r2
    473c:	d80a      	bhi.n	4754 <valid_adv_param+0x34>
    473e:	2b1f      	cmp	r3, #31
    4740:	d90a      	bls.n	4758 <valid_adv_param+0x38>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    4742:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    4746:	d801      	bhi.n	474c <valid_adv_param+0x2c>
		return false;
	}

	return true;
    4748:	2001      	movs	r0, #1
}
    474a:	4770      	bx	lr
		return false;
    474c:	2000      	movs	r0, #0
    474e:	4770      	bx	lr
			return false;
    4750:	2000      	movs	r0, #0
    4752:	4770      	bx	lr
		return false;
    4754:	2000      	movs	r0, #0
    4756:	4770      	bx	lr
    4758:	2000      	movs	r0, #0
    475a:	4770      	bx	lr
    475c:	2000be68 	.word	0x2000be68

00004760 <hci_reset_complete>:
	u8_t status = buf->data[0];
    4760:	6883      	ldr	r3, [r0, #8]
    4762:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    4764:	b103      	cbz	r3, 4768 <hci_reset_complete+0x8>
    4766:	4770      	bx	lr
	scan_dev_found_cb = NULL;
    4768:	2200      	movs	r2, #0
    476a:	4b07      	ldr	r3, [pc, #28]	; (4788 <hci_reset_complete+0x28>)
    476c:	601a      	str	r2, [r3, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    476e:	4b07      	ldr	r3, [pc, #28]	; (478c <hci_reset_complete+0x2c>)
    4770:	2201      	movs	r2, #1
    4772:	f3bf 8f5b 	dmb	ish
    4776:	e853 1f00 	ldrex	r1, [r3]
    477a:	e843 2000 	strex	r0, r2, [r3]
    477e:	2800      	cmp	r0, #0
    4780:	d1f9      	bne.n	4776 <hci_reset_complete+0x16>
    4782:	f3bf 8f5b 	dmb	ish
    4786:	e7ee      	b.n	4766 <hci_reset_complete+0x6>
    4788:	20000908 	.word	0x20000908
    478c:	2000bed8 	.word	0x2000bed8

00004790 <read_local_features_complete>:
{
    4790:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    4792:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    4794:	2208      	movs	r2, #8
    4796:	3101      	adds	r1, #1
    4798:	4801      	ldr	r0, [pc, #4]	; (47a0 <read_local_features_complete+0x10>)
    479a:	f7fb fd91 	bl	2c0 <memcpy>
    479e:	bd08      	pop	{r3, pc}
    47a0:	2000be7e 	.word	0x2000be7e

000047a4 <read_bdaddr_complete>:
{
    47a4:	b510      	push	{r4, lr}
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;
    47a6:	6881      	ldr	r1, [r0, #8]
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    47a8:	4c04      	ldr	r4, [pc, #16]	; (47bc <read_bdaddr_complete+0x18>)
    47aa:	2206      	movs	r2, #6
    47ac:	3101      	adds	r1, #1
    47ae:	1c60      	adds	r0, r4, #1
    47b0:	f7fb fd86 	bl	2c0 <memcpy>
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    47b4:	2300      	movs	r3, #0
    47b6:	7023      	strb	r3, [r4, #0]
    47b8:	bd10      	pop	{r4, pc}
    47ba:	bf00      	nop
    47bc:	2000be68 	.word	0x2000be68

000047c0 <read_supported_commands_complete>:
{
    47c0:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    47c2:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    47c4:	2240      	movs	r2, #64	; 0x40
    47c6:	3101      	adds	r1, #1
    47c8:	4801      	ldr	r0, [pc, #4]	; (47d0 <read_supported_commands_complete+0x10>)
    47ca:	f7fb fd79 	bl	2c0 <memcpy>
    47ce:	bd08      	pop	{r3, pc}
    47d0:	2000be86 	.word	0x2000be86

000047d4 <read_le_features_complete>:
{
    47d4:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    47d6:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    47d8:	2208      	movs	r2, #8
    47da:	3101      	adds	r1, #1
    47dc:	4801      	ldr	r0, [pc, #4]	; (47e4 <read_le_features_complete+0x10>)
    47de:	f7fb fd6f 	bl	2c0 <memcpy>
    47e2:	bd08      	pop	{r3, pc}
    47e4:	2000bee0 	.word	0x2000bee0

000047e8 <le_read_buffer_size_complete>:
{
    47e8:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    47ea:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    47ec:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    47f0:	b299      	uxth	r1, r3
    47f2:	4807      	ldr	r0, [pc, #28]	; (4810 <le_read_buffer_size_complete+0x28>)
    47f4:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    47f8:	b901      	cbnz	r1, 47fc <le_read_buffer_size_complete+0x14>
    47fa:	bd08      	pop	{r3, pc}
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    47fc:	78d1      	ldrb	r1, [r2, #3]
    47fe:	2902      	cmp	r1, #2
    4800:	bf28      	it	cs
    4802:	2102      	movcs	r1, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    4804:	460a      	mov	r2, r1
    4806:	308c      	adds	r0, #140	; 0x8c
    4808:	f024 fd9a 	bl	29340 <_impl_k_sem_init>
    480c:	e7f5      	b.n	47fa <le_read_buffer_size_complete+0x12>
    480e:	bf00      	nop
    4810:	2000be68 	.word	0x2000be68

00004814 <read_buffer_size_complete>:
{
    4814:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    4816:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.mtu) {
    4818:	4b09      	ldr	r3, [pc, #36]	; (4840 <read_buffer_size_complete+0x2c>)
    481a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    481e:	b103      	cbz	r3, 4822 <read_buffer_size_complete+0xe>
    4820:	bd08      	pop	{r3, pc}
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    4822:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    4826:	4806      	ldr	r0, [pc, #24]	; (4840 <read_buffer_size_complete+0x2c>)
    4828:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    482c:	8891      	ldrh	r1, [r2, #4]
	pkts = min(pkts, CONFIG_BT_CONN_TX_MAX);
    482e:	2902      	cmp	r1, #2
    4830:	bf28      	it	cs
    4832:	2102      	movcs	r1, #2
    4834:	460a      	mov	r2, r1
    4836:	308c      	adds	r0, #140	; 0x8c
    4838:	f024 fd82 	bl	29340 <_impl_k_sem_init>
    483c:	e7f0      	b.n	4820 <read_buffer_size_complete+0xc>
    483e:	bf00      	nop
    4840:	2000be68 	.word	0x2000be68

00004844 <le_pkey_complete>:
{
    4844:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    4846:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4848:	4b17      	ldr	r3, [pc, #92]	; (48a8 <le_pkey_complete+0x64>)
    484a:	f3bf 8f5b 	dmb	ish
    484e:	e853 2f00 	ldrex	r2, [r3]
    4852:	f022 0210 	bic.w	r2, r2, #16
    4856:	e843 2100 	strex	r1, r2, [r3]
    485a:	2900      	cmp	r1, #0
    485c:	d1f7      	bne.n	484e <le_pkey_complete+0xa>
    485e:	f3bf 8f5b 	dmb	ish
	if (!evt->status) {
    4862:	782b      	ldrb	r3, [r5, #0]
    4864:	b113      	cbz	r3, 486c <le_pkey_complete+0x28>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4866:	4b11      	ldr	r3, [pc, #68]	; (48ac <le_pkey_complete+0x68>)
    4868:	681c      	ldr	r4, [r3, #0]
    486a:	e015      	b.n	4898 <le_pkey_complete+0x54>
		memcpy(pub_key, evt->key, 64);
    486c:	2240      	movs	r2, #64	; 0x40
    486e:	1c69      	adds	r1, r5, #1
    4870:	480f      	ldr	r0, [pc, #60]	; (48b0 <le_pkey_complete+0x6c>)
    4872:	f7fb fd25 	bl	2c0 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4876:	4b0c      	ldr	r3, [pc, #48]	; (48a8 <le_pkey_complete+0x64>)
    4878:	f3bf 8f5b 	dmb	ish
    487c:	e853 2f00 	ldrex	r2, [r3]
    4880:	f042 0208 	orr.w	r2, r2, #8
    4884:	e843 2100 	strex	r1, r2, [r3]
    4888:	2900      	cmp	r1, #0
    488a:	d1f7      	bne.n	487c <le_pkey_complete+0x38>
    488c:	f3bf 8f5b 	dmb	ish
    4890:	e7e9      	b.n	4866 <le_pkey_complete+0x22>
		cb->func(evt->status ? NULL : evt->key);
    4892:	2000      	movs	r0, #0
    4894:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4896:	6864      	ldr	r4, [r4, #4]
    4898:	b12c      	cbz	r4, 48a6 <le_pkey_complete+0x62>
		cb->func(evt->status ? NULL : evt->key);
    489a:	6823      	ldr	r3, [r4, #0]
    489c:	782a      	ldrb	r2, [r5, #0]
    489e:	2a00      	cmp	r2, #0
    48a0:	d1f7      	bne.n	4892 <le_pkey_complete+0x4e>
    48a2:	1c68      	adds	r0, r5, #1
    48a4:	e7f6      	b.n	4894 <le_pkey_complete+0x50>
}
    48a6:	bd38      	pop	{r3, r4, r5, pc}
    48a8:	2000bed8 	.word	0x2000bed8
    48ac:	20000900 	.word	0x20000900
    48b0:	200008c0 	.word	0x200008c0

000048b4 <hci_acl>:
{
    48b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48b6:	4604      	mov	r4, r0
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    48b8:	6883      	ldr	r3, [r0, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    48ba:	885e      	ldrh	r6, [r3, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    48bc:	881a      	ldrh	r2, [r3, #0]
	flags = bt_acl_flags(handle);
    48be:	0b17      	lsrs	r7, r2, #12
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    48c0:	f100 0510 	add.w	r5, r0, #16
    48c4:	89c3      	ldrh	r3, [r0, #14]
    48c6:	442b      	add	r3, r5
    48c8:	3303      	adds	r3, #3
    48ca:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->handle = bt_acl_handle(handle);
    48ce:	f3c2 020b 	ubfx	r2, r2, #0, #12
    48d2:	805a      	strh	r2, [r3, #2]
    48d4:	89c3      	ldrh	r3, [r0, #14]
    48d6:	442b      	add	r3, r5
    48d8:	3303      	adds	r3, #3
    48da:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->id = BT_CONN_ID_INVALID;
    48de:	22ff      	movs	r2, #255	; 0xff
    48e0:	705a      	strb	r2, [r3, #1]
	net_buf_pull(buf, sizeof(*hdr));
    48e2:	2104      	movs	r1, #4
    48e4:	3008      	adds	r0, #8
    48e6:	f016 fa82 	bl	1adee <net_buf_simple_pull>
	if (buf->len != len) {
    48ea:	89a3      	ldrh	r3, [r4, #12]
    48ec:	429e      	cmp	r6, r3
    48ee:	d003      	beq.n	48f8 <hci_acl+0x44>
		net_buf_unref(buf);
    48f0:	4620      	mov	r0, r4
    48f2:	f016 f9e3 	bl	1acbc <net_buf_unref>
		return;
    48f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48f8:	89e3      	ldrh	r3, [r4, #14]
    48fa:	442b      	add	r3, r5
    48fc:	3303      	adds	r3, #3
    48fe:	f023 0303 	bic.w	r3, r3, #3
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    4902:	8858      	ldrh	r0, [r3, #2]
    4904:	f002 fc7e 	bl	7204 <bt_conn_lookup_handle>
	if (!conn) {
    4908:	4606      	mov	r6, r0
    490a:	b180      	cbz	r0, 492e <hci_acl+0x7a>
    490c:	89e3      	ldrh	r3, [r4, #14]
    490e:	441d      	add	r5, r3
    4910:	3503      	adds	r5, #3
    4912:	f025 0503 	bic.w	r5, r5, #3
	acl(buf)->id = bt_conn_get_id(conn);
    4916:	f003 f83b 	bl	7990 <bt_conn_get_id>
    491a:	7068      	strb	r0, [r5, #1]
	bt_conn_recv(conn, buf, flags);
    491c:	463a      	mov	r2, r7
    491e:	4621      	mov	r1, r4
    4920:	4630      	mov	r0, r6
    4922:	f002 fb23 	bl	6f6c <bt_conn_recv>
	bt_conn_unref(conn);
    4926:	4630      	mov	r0, r6
    4928:	f002 fcf0 	bl	730c <bt_conn_unref>
    492c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    492e:	4620      	mov	r0, r4
    4930:	f016 f9c4 	bl	1acbc <net_buf_unref>
		return;
    4934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004936 <update_sec_level>:
{
    4936:	b508      	push	{r3, lr}
	if (!conn->encrypt) {
    4938:	7a83      	ldrb	r3, [r0, #10]
    493a:	b18b      	cbz	r3, 4960 <update_sec_level+0x2a>
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    493c:	6f03      	ldr	r3, [r0, #112]	; 0x70
    493e:	b1ab      	cbz	r3, 496c <update_sec_level+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4940:	f3bf 8f5b 	dmb	ish
    4944:	689b      	ldr	r3, [r3, #8]
    4946:	f3bf 8f5b 	dmb	ish
    494a:	f013 0f01 	tst.w	r3, #1
    494e:	d00d      	beq.n	496c <update_sec_level+0x36>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    4950:	6f03      	ldr	r3, [r0, #112]	; 0x70
    4952:	899b      	ldrh	r3, [r3, #12]
    4954:	f013 0f20 	tst.w	r3, #32
    4958:	d005      	beq.n	4966 <update_sec_level+0x30>
			conn->sec_level = BT_SECURITY_FIPS;
    495a:	2304      	movs	r3, #4
    495c:	7203      	strb	r3, [r0, #8]
    495e:	e007      	b.n	4970 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_LOW;
    4960:	2301      	movs	r3, #1
    4962:	7203      	strb	r3, [r0, #8]
		return;
    4964:	bd08      	pop	{r3, pc}
			conn->sec_level = BT_SECURITY_HIGH;
    4966:	2303      	movs	r3, #3
    4968:	7203      	strb	r3, [r0, #8]
    496a:	e001      	b.n	4970 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_MEDIUM;
    496c:	2302      	movs	r3, #2
    496e:	7203      	strb	r3, [r0, #8]
	if (conn->required_sec_level > conn->sec_level) {
    4970:	7a42      	ldrb	r2, [r0, #9]
    4972:	7a03      	ldrb	r3, [r0, #8]
    4974:	429a      	cmp	r2, r3
    4976:	d800      	bhi.n	497a <update_sec_level+0x44>
    4978:	bd08      	pop	{r3, pc}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    497a:	2105      	movs	r1, #5
    497c:	f002 fe8a 	bl	7694 <bt_conn_disconnect>
    4980:	e7fa      	b.n	4978 <update_sec_level+0x42>

00004982 <hci_encrypt_change>:
{
    4982:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    4984:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    4986:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    498a:	f002 fc3b 	bl	7204 <bt_conn_lookup_handle>
	if (!conn) {
    498e:	b1e0      	cbz	r0, 49ca <hci_encrypt_change+0x48>
    4990:	4604      	mov	r4, r0
	if (evt->status) {
    4992:	782b      	ldrb	r3, [r5, #0]
    4994:	b13b      	cbz	r3, 49a6 <hci_encrypt_change+0x24>
		if (conn->type == BT_CONN_TYPE_LE) {
    4996:	7883      	ldrb	r3, [r0, #2]
    4998:	b90b      	cbnz	r3, 499e <hci_encrypt_change+0x1c>
			conn->required_sec_level = conn->sec_level;
    499a:	7a03      	ldrb	r3, [r0, #8]
    499c:	7243      	strb	r3, [r0, #9]
		bt_conn_unref(conn);
    499e:	4620      	mov	r0, r4
    49a0:	f002 fcb4 	bl	730c <bt_conn_unref>
		return;
    49a4:	bd38      	pop	{r3, r4, r5, pc}
	conn->encrypt = evt->encrypt;
    49a6:	78eb      	ldrb	r3, [r5, #3]
    49a8:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    49aa:	7882      	ldrb	r2, [r0, #2]
    49ac:	b91a      	cbnz	r2, 49b6 <hci_encrypt_change+0x34>
		if (conn->encrypt) {
    49ae:	b96b      	cbnz	r3, 49cc <hci_encrypt_change+0x4a>
		update_sec_level(conn);
    49b0:	4620      	mov	r0, r4
    49b2:	f7ff ffc0 	bl	4936 <update_sec_level>
	bt_l2cap_encrypt_change(conn, evt->status);
    49b6:	7829      	ldrb	r1, [r5, #0]
    49b8:	4620      	mov	r0, r4
    49ba:	f003 fbcb 	bl	8154 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    49be:	4620      	mov	r0, r4
    49c0:	f002 fa9e 	bl	6f00 <bt_conn_security_changed>
	bt_conn_unref(conn);
    49c4:	4620      	mov	r0, r4
    49c6:	f002 fca1 	bl	730c <bt_conn_unref>
    49ca:	bd38      	pop	{r3, r4, r5, pc}
			bt_smp_update_keys(conn);
    49cc:	f008 fafe 	bl	cfcc <bt_smp_update_keys>
    49d0:	e7ee      	b.n	49b0 <hci_encrypt_change+0x2e>

000049d2 <hci_encrypt_key_refresh_complete>:
{
    49d2:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    49d4:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    49d6:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    49da:	f002 fc13 	bl	7204 <bt_conn_lookup_handle>
	if (!conn) {
    49de:	b170      	cbz	r0, 49fe <hci_encrypt_key_refresh_complete+0x2c>
    49e0:	4604      	mov	r4, r0
	if (evt->status) {
    49e2:	7829      	ldrb	r1, [r5, #0]
    49e4:	b961      	cbnz	r1, 4a00 <hci_encrypt_key_refresh_complete+0x2e>
	if (conn->type == BT_CONN_TYPE_LE) {
    49e6:	7883      	ldrb	r3, [r0, #2]
    49e8:	b16b      	cbz	r3, 4a06 <hci_encrypt_key_refresh_complete+0x34>
	bt_l2cap_encrypt_change(conn, evt->status);
    49ea:	7829      	ldrb	r1, [r5, #0]
    49ec:	4620      	mov	r0, r4
    49ee:	f003 fbb1 	bl	8154 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    49f2:	4620      	mov	r0, r4
    49f4:	f002 fa84 	bl	6f00 <bt_conn_security_changed>
	bt_conn_unref(conn);
    49f8:	4620      	mov	r0, r4
    49fa:	f002 fc87 	bl	730c <bt_conn_unref>
    49fe:	bd38      	pop	{r3, r4, r5, pc}
		bt_l2cap_encrypt_change(conn, evt->status);
    4a00:	f003 fba8 	bl	8154 <bt_l2cap_encrypt_change>
		return;
    4a04:	bd38      	pop	{r3, r4, r5, pc}
		bt_smp_update_keys(conn);
    4a06:	f008 fae1 	bl	cfcc <bt_smp_update_keys>
		update_sec_level(conn);
    4a0a:	4620      	mov	r0, r4
    4a0c:	f7ff ff93 	bl	4936 <update_sec_level>
    4a10:	e7eb      	b.n	49ea <hci_encrypt_key_refresh_complete+0x18>

00004a12 <find_id_addr>:
{
    4a12:	b510      	push	{r4, lr}
    4a14:	4604      	mov	r4, r0
		keys = bt_keys_find_irk(addr);
    4a16:	f008 fbe3 	bl	d1e0 <bt_keys_find_irk>
		if (keys) {
    4a1a:	b100      	cbz	r0, 4a1e <find_id_addr+0xc>
			return &keys->addr;
    4a1c:	bd10      	pop	{r4, pc}
	return addr;
    4a1e:	4620      	mov	r0, r4
}
    4a20:	bd10      	pop	{r4, pc}
	...

00004a24 <update_conn_param>:
{
    4a24:	b508      	push	{r3, lr}
	k_delayed_work_submit(&conn->le.update_work,
    4a26:	f100 0174 	add.w	r1, r0, #116	; 0x74
				 conn->role == BT_HCI_ROLE_MASTER ? K_NO_WAIT :
    4a2a:	78c3      	ldrb	r3, [r0, #3]
	k_delayed_work_submit(&conn->le.update_work,
    4a2c:	b12b      	cbz	r3, 4a3a <update_conn_param+0x16>
    4a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    4a32:	4803      	ldr	r0, [pc, #12]	; (4a40 <update_conn_param+0x1c>)
    4a34:	f025 fad6 	bl	29fe4 <k_delayed_work_submit_to_queue>
    4a38:	bd08      	pop	{r3, pc}
    4a3a:	2200      	movs	r2, #0
    4a3c:	e7f9      	b.n	4a32 <update_conn_param+0xe>
    4a3e:	bf00      	nop
    4a40:	20003158 	.word	0x20003158

00004a44 <le_data_len_change>:
{
    4a44:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
    4a46:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    4a48:	8818      	ldrh	r0, [r3, #0]
    4a4a:	f002 fbdb 	bl	7204 <bt_conn_lookup_handle>
	if (!conn) {
    4a4e:	b198      	cbz	r0, 4a78 <le_data_len_change+0x34>
    4a50:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    4a52:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4a54:	f3bf 8f5b 	dmb	ish
    4a58:	e853 2f00 	ldrex	r2, [r3]
    4a5c:	f422 7180 	bic.w	r1, r2, #256	; 0x100
    4a60:	e843 1000 	strex	r0, r1, [r3]
    4a64:	2800      	cmp	r0, #0
    4a66:	d1f7      	bne.n	4a58 <le_data_len_change+0x14>
    4a68:	f3bf 8f5b 	dmb	ish
    4a6c:	f412 7f80 	tst.w	r2, #256	; 0x100
    4a70:	d103      	bne.n	4a7a <le_data_len_change+0x36>
	bt_conn_unref(conn);
    4a72:	4620      	mov	r0, r4
    4a74:	f002 fc4a 	bl	730c <bt_conn_unref>
    4a78:	bd10      	pop	{r4, pc}
	update_conn_param(conn);
    4a7a:	4620      	mov	r0, r4
    4a7c:	f7ff ffd2 	bl	4a24 <update_conn_param>
    4a80:	e7f7      	b.n	4a72 <le_data_len_change+0x2e>
	...

00004a84 <le_data_len_change>:
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
}

static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
    4a84:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4a86:	4b12      	ldr	r3, [pc, #72]	; (4ad0 <le_data_len_change+0x4c>)
    4a88:	e9d3 4500 	ldrd	r4, r5, [r3]
    4a8c:	2400      	movs	r4, #0
    4a8e:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    4a92:	ea54 0305 	orrs.w	r3, r4, r5
    4a96:	d008      	beq.n	4aaa <le_data_len_change+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    4a98:	4b0e      	ldr	r3, [pc, #56]	; (4ad4 <le_data_len_change+0x50>)
    4a9a:	e9d3 4500 	ldrd	r4, r5, [r3]
    4a9e:	f004 0440 	and.w	r4, r4, #64	; 0x40
    4aa2:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4aa4:	ea54 0305 	orrs.w	r3, r4, r5
    4aa8:	d100      	bne.n	4aac <le_data_len_change+0x28>
    4aaa:	bd38      	pop	{r3, r4, r5, pc}
    4aac:	4613      	mov	r3, r2
    4aae:	460d      	mov	r5, r1
    4ab0:	4604      	mov	r4, r0
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    4ab2:	220a      	movs	r2, #10
    4ab4:	2107      	movs	r1, #7
    4ab6:	4618      	mov	r0, r3
    4ab8:	f008 fcf0 	bl	d49c <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    4abc:	8005      	strh	r5, [r0, #0]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    4abe:	8923      	ldrh	r3, [r4, #8]
	sep->max_tx_octets =
    4ac0:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    4ac2:	8963      	ldrh	r3, [r4, #10]
	sep->max_tx_time =
    4ac4:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    4ac6:	88a3      	ldrh	r3, [r4, #4]
	sep->max_rx_octets =
    4ac8:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    4aca:	88e3      	ldrh	r3, [r4, #6]
	sep->max_rx_time =
    4acc:	8103      	strh	r3, [r0, #8]
    4ace:	e7ec      	b.n	4aaa <le_data_len_change+0x26>
    4ad0:	2000c158 	.word	0x2000c158
    4ad4:	2000c160 	.word	0x2000c160

00004ad8 <le_conn_update_complete>:
{
    4ad8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    4ada:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    4adc:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    4ae0:	f002 fb90 	bl	7204 <bt_conn_lookup_handle>
	if (!conn) {
    4ae4:	b128      	cbz	r0, 4af2 <le_conn_update_complete+0x1a>
    4ae6:	4605      	mov	r5, r0
	if (!evt->status) {
    4ae8:	7823      	ldrb	r3, [r4, #0]
    4aea:	b11b      	cbz	r3, 4af4 <le_conn_update_complete+0x1c>
	bt_conn_unref(conn);
    4aec:	4628      	mov	r0, r5
    4aee:	f002 fc0d 	bl	730c <bt_conn_unref>
    4af2:	bd38      	pop	{r3, r4, r5, pc}
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    4af4:	f8b4 3003 	ldrh.w	r3, [r4, #3]
    4af8:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    4afc:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    4b00:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4b04:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    4b08:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    4b0c:	f002 f912 	bl	6d34 <notify_le_param_updated>
    4b10:	e7ec      	b.n	4aec <le_conn_update_complete+0x14>
	...

00004b14 <le_conn_update_complete>:
{
    4b14:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4b16:	4b14      	ldr	r3, [pc, #80]	; (4b68 <le_conn_update_complete+0x54>)
    4b18:	e9d3 4500 	ldrd	r4, r5, [r3]
    4b1c:	2400      	movs	r4, #0
    4b1e:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    4b22:	ea54 0305 	orrs.w	r3, r4, r5
    4b26:	d008      	beq.n	4b3a <le_conn_update_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    4b28:	4b10      	ldr	r3, [pc, #64]	; (4b6c <le_conn_update_complete+0x58>)
    4b2a:	e9d3 4500 	ldrd	r4, r5, [r3]
    4b2e:	f004 0404 	and.w	r4, r4, #4
    4b32:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4b34:	ea54 0305 	orrs.w	r3, r4, r5
    4b38:	d100      	bne.n	4b3c <le_conn_update_complete+0x28>
    4b3a:	bd38      	pop	{r3, r4, r5, pc}
    4b3c:	4613      	mov	r3, r2
    4b3e:	460d      	mov	r5, r1
    4b40:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    4b42:	2209      	movs	r2, #9
    4b44:	2103      	movs	r1, #3
    4b46:	4618      	mov	r0, r3
    4b48:	f008 fca8 	bl	d49c <meta_evt>
	sep->status = radio_cu->status;
    4b4c:	78e3      	ldrb	r3, [r4, #3]
    4b4e:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    4b50:	f8a0 5001 	strh.w	r5, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    4b54:	88a3      	ldrh	r3, [r4, #4]
    4b56:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    4b5a:	88e3      	ldrh	r3, [r4, #6]
    4b5c:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    4b60:	8923      	ldrh	r3, [r4, #8]
    4b62:	f8a0 3007 	strh.w	r3, [r0, #7]
    4b66:	e7e8      	b.n	4b3a <le_conn_update_complete+0x26>
    4b68:	2000c158 	.word	0x2000c158
    4b6c:	2000c160 	.word	0x2000c160

00004b70 <hci_cmd_done>:
{
    4b70:	b538      	push	{r3, r4, r5, lr}
    4b72:	460d      	mov	r5, r1
    4b74:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4b76:	7990      	ldrb	r0, [r2, #6]
    4b78:	f016 f826 	bl	1abc8 <net_buf_pool_get>
    4b7c:	4b0b      	ldr	r3, [pc, #44]	; (4bac <hci_cmd_done+0x3c>)
    4b7e:	4283      	cmp	r3, r0
    4b80:	d000      	beq.n	4b84 <hci_cmd_done+0x14>
    4b82:	bd38      	pop	{r3, r4, r5, pc}
    4b84:	f104 0210 	add.w	r2, r4, #16
    4b88:	89e3      	ldrh	r3, [r4, #14]
    4b8a:	4413      	add	r3, r2
    4b8c:	3303      	adds	r3, #3
    4b8e:	f023 0303 	bic.w	r3, r3, #3
	if (cmd(buf)->sync) {
    4b92:	6859      	ldr	r1, [r3, #4]
    4b94:	2900      	cmp	r1, #0
    4b96:	d0f4      	beq.n	4b82 <hci_cmd_done+0x12>
		cmd(buf)->status = status;
    4b98:	705d      	strb	r5, [r3, #1]
    4b9a:	89e3      	ldrh	r3, [r4, #14]
    4b9c:	441a      	add	r2, r3
    4b9e:	3203      	adds	r2, #3
    4ba0:	f022 0203 	bic.w	r2, r2, #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4ba4:	6850      	ldr	r0, [r2, #4]
    4ba6:	f024 fbd4 	bl	29352 <_impl_k_sem_give>
    4baa:	e7ea      	b.n	4b82 <hci_cmd_done+0x12>
    4bac:	2000d708 	.word	0x2000d708

00004bb0 <hci_cmd_complete>:
{
    4bb0:	b570      	push	{r4, r5, r6, lr}
    4bb2:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    4bb4:	f850 3f08 	ldr.w	r3, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4bb8:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    4bbc:	781d      	ldrb	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    4bbe:	2103      	movs	r1, #3
    4bc0:	f016 f915 	bl	1adee <net_buf_simple_pull>
	status = buf->data[0];
    4bc4:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    4bc6:	4622      	mov	r2, r4
    4bc8:	7819      	ldrb	r1, [r3, #0]
    4bca:	4630      	mov	r0, r6
    4bcc:	f7ff ffd0 	bl	4b70 <hci_cmd_done>
	if (ncmd) {
    4bd0:	b905      	cbnz	r5, 4bd4 <hci_cmd_complete+0x24>
    4bd2:	bd70      	pop	{r4, r5, r6, pc}
    4bd4:	4801      	ldr	r0, [pc, #4]	; (4bdc <hci_cmd_complete+0x2c>)
    4bd6:	f024 fbbc 	bl	29352 <_impl_k_sem_give>
}
    4bda:	e7fa      	b.n	4bd2 <hci_cmd_complete+0x22>
    4bdc:	2000bf10 	.word	0x2000bf10

00004be0 <hci_cmd_status>:
{
    4be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4be2:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    4be4:	f850 4f08 	ldr.w	r4, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4be8:	8867      	ldrh	r7, [r4, #2]
	u8_t ncmd = evt->ncmd;
    4bea:	7866      	ldrb	r6, [r4, #1]
	net_buf_pull(buf, sizeof(*evt));
    4bec:	2104      	movs	r1, #4
    4bee:	f016 f8fe 	bl	1adee <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    4bf2:	462a      	mov	r2, r5
    4bf4:	7821      	ldrb	r1, [r4, #0]
    4bf6:	4638      	mov	r0, r7
    4bf8:	f7ff ffba 	bl	4b70 <hci_cmd_done>
	if (ncmd) {
    4bfc:	b906      	cbnz	r6, 4c00 <hci_cmd_status+0x20>
    4bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c00:	4801      	ldr	r0, [pc, #4]	; (4c08 <hci_cmd_status+0x28>)
    4c02:	f024 fba6 	bl	29352 <_impl_k_sem_give>
}
    4c06:	e7fa      	b.n	4bfe <hci_cmd_status+0x1e>
    4c08:	2000bf10 	.word	0x2000bf10

00004c0c <hci_num_completed_packets>:
{
    4c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    4c10:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
    4c14:	2700      	movs	r7, #0
    4c16:	e026      	b.n	4c66 <hci_num_completed_packets+0x5a>
    4c18:	f386 8811 	msr	BASEPRI, r6
			continue;
    4c1c:	e022      	b.n	4c64 <hci_num_completed_packets+0x58>
    4c1e:	f383 8811 	msr	BASEPRI, r3
			if (!node) {
    4c22:	b1e1      	cbz	r1, 4c5e <hci_num_completed_packets+0x52>
			k_fifo_put(&conn->tx_notify, node);
    4c24:	f104 001c 	add.w	r0, r4, #28
    4c28:	f023 fffc 	bl	28c24 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    4c2c:	4620      	mov	r0, r4
    4c2e:	f002 f85f 	bl	6cf0 <bt_conn_get_pkts>
    4c32:	f024 fb8e 	bl	29352 <_impl_k_sem_give>
		while (count--) {
    4c36:	4635      	mov	r5, r6
    4c38:	1e6b      	subs	r3, r5, #1
    4c3a:	b29e      	uxth	r6, r3
    4c3c:	b17d      	cbz	r5, 4c5e <hci_num_completed_packets+0x52>
	__asm__ volatile(
    4c3e:	f04f 0220 	mov.w	r2, #32
    4c42:	f3ef 8311 	mrs	r3, BASEPRI
    4c46:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    4c4a:	6961      	ldr	r1, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    4c4c:	2900      	cmp	r1, #0
    4c4e:	d0e6      	beq.n	4c1e <hci_num_completed_packets+0x12>
	list->head = node->next;
    4c50:	680a      	ldr	r2, [r1, #0]
    4c52:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    4c54:	69a0      	ldr	r0, [r4, #24]
    4c56:	4281      	cmp	r1, r0
    4c58:	d1e1      	bne.n	4c1e <hci_num_completed_packets+0x12>
		list->tail = list->head;
    4c5a:	61a2      	str	r2, [r4, #24]
    4c5c:	e7df      	b.n	4c1e <hci_num_completed_packets+0x12>
		bt_conn_unref(conn);
    4c5e:	4620      	mov	r0, r4
    4c60:	f002 fb54 	bl	730c <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
    4c64:	3701      	adds	r7, #1
    4c66:	f898 3000 	ldrb.w	r3, [r8]
    4c6a:	429f      	cmp	r7, r3
    4c6c:	da13      	bge.n	4c96 <hci_num_completed_packets+0x8a>
		handle = sys_le16_to_cpu(evt->h[i].handle);
    4c6e:	eb08 0387 	add.w	r3, r8, r7, lsl #2
    4c72:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4c76:	f8b3 5003 	ldrh.w	r5, [r3, #3]
    4c7a:	f04f 0320 	mov.w	r3, #32
    4c7e:	f3ef 8611 	mrs	r6, BASEPRI
    4c82:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    4c86:	f002 fabd 	bl	7204 <bt_conn_lookup_handle>
		if (!conn) {
    4c8a:	4604      	mov	r4, r0
    4c8c:	2800      	cmp	r0, #0
    4c8e:	d0c3      	beq.n	4c18 <hci_num_completed_packets+0xc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4c90:	f386 8811 	msr	BASEPRI, r6
    4c94:	e7d0      	b.n	4c38 <hci_num_completed_packets+0x2c>
}
    4c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00004c9c <bt_hci_cmd_create>:
{
    4c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c9e:	4607      	mov	r7, r0
    4ca0:	460d      	mov	r5, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    4ca2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4ca6:	4812      	ldr	r0, [pc, #72]	; (4cf0 <bt_hci_cmd_create+0x54>)
    4ca8:	f015 ff9a 	bl	1abe0 <net_buf_alloc>
    4cac:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4cae:	2100      	movs	r1, #0
    4cb0:	f015 fff1 	bl	1ac96 <net_buf_reserve>
    4cb4:	f104 0310 	add.w	r3, r4, #16
    4cb8:	89e2      	ldrh	r2, [r4, #14]
    4cba:	441a      	add	r2, r3
    4cbc:	3203      	adds	r2, #3
    4cbe:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->type = BT_BUF_CMD;
    4cc2:	2100      	movs	r1, #0
    4cc4:	7011      	strb	r1, [r2, #0]
    4cc6:	89e2      	ldrh	r2, [r4, #14]
    4cc8:	441a      	add	r2, r3
    4cca:	3203      	adds	r2, #3
    4ccc:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->opcode = opcode;
    4cd0:	8057      	strh	r7, [r2, #2]
    4cd2:	89e2      	ldrh	r2, [r4, #14]
    4cd4:	4413      	add	r3, r2
    4cd6:	3303      	adds	r3, #3
    4cd8:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = NULL;
    4cdc:	6059      	str	r1, [r3, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    4cde:	2103      	movs	r1, #3
    4ce0:	f104 0008 	add.w	r0, r4, #8
    4ce4:	f016 f836 	bl	1ad54 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    4ce8:	8007      	strh	r7, [r0, #0]
	hdr->param_len = param_len;
    4cea:	7085      	strb	r5, [r0, #2]
}
    4cec:	4620      	mov	r0, r4
    4cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4cf0:	2000d708 	.word	0x2000d708

00004cf4 <bt_hci_cmd_send_sync>:
{
    4cf4:	b570      	push	{r4, r5, r6, lr}
    4cf6:	b086      	sub	sp, #24
    4cf8:	4616      	mov	r6, r2
	if (!buf) {
    4cfa:	460d      	mov	r5, r1
    4cfc:	b329      	cbz	r1, 4d4a <bt_hci_cmd_send_sync+0x56>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    4cfe:	2201      	movs	r2, #1
    4d00:	2100      	movs	r1, #0
    4d02:	4668      	mov	r0, sp
    4d04:	f024 fb1c 	bl	29340 <_impl_k_sem_init>
    4d08:	f105 0410 	add.w	r4, r5, #16
    4d0c:	89eb      	ldrh	r3, [r5, #14]
    4d0e:	4423      	add	r3, r4
    4d10:	3303      	adds	r3, #3
    4d12:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = &sync_sem;
    4d16:	f8c3 d004 	str.w	sp, [r3, #4]
	net_buf_ref(buf);
    4d1a:	4628      	mov	r0, r5
    4d1c:	f015 ffea 	bl	1acf4 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4d20:	4629      	mov	r1, r5
    4d22:	4813      	ldr	r0, [pc, #76]	; (4d70 <bt_hci_cmd_send_sync+0x7c>)
    4d24:	f015 ffbc 	bl	1aca0 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4d28:	f242 7110 	movw	r1, #10000	; 0x2710
    4d2c:	4668      	mov	r0, sp
    4d2e:	f024 fb23 	bl	29378 <_impl_k_sem_take>
    4d32:	89eb      	ldrh	r3, [r5, #14]
    4d34:	441c      	add	r4, r3
    4d36:	3403      	adds	r4, #3
    4d38:	f024 0403 	bic.w	r4, r4, #3
	if (cmd(buf)->status) {
    4d3c:	7863      	ldrb	r3, [r4, #1]
    4d3e:	b963      	cbnz	r3, 4d5a <bt_hci_cmd_send_sync+0x66>
		if (rsp) {
    4d40:	b18e      	cbz	r6, 4d66 <bt_hci_cmd_send_sync+0x72>
			*rsp = buf;
    4d42:	6035      	str	r5, [r6, #0]
		err = 0;
    4d44:	2000      	movs	r0, #0
}
    4d46:	b006      	add	sp, #24
    4d48:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    4d4a:	f7ff ffa7 	bl	4c9c <bt_hci_cmd_create>
		if (!buf) {
    4d4e:	4605      	mov	r5, r0
    4d50:	2800      	cmp	r0, #0
    4d52:	d1d4      	bne.n	4cfe <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
    4d54:	f06f 0068 	mvn.w	r0, #104	; 0x68
    4d58:	e7f5      	b.n	4d46 <bt_hci_cmd_send_sync+0x52>
		net_buf_unref(buf);
    4d5a:	4628      	mov	r0, r5
    4d5c:	f015 ffae 	bl	1acbc <net_buf_unref>
		err = -EIO;
    4d60:	f06f 0004 	mvn.w	r0, #4
    4d64:	e7ef      	b.n	4d46 <bt_hci_cmd_send_sync+0x52>
			net_buf_unref(buf);
    4d66:	4628      	mov	r0, r5
    4d68:	f015 ffa8 	bl	1acbc <net_buf_unref>
		err = 0;
    4d6c:	2000      	movs	r0, #0
    4d6e:	e7ea      	b.n	4d46 <bt_hci_cmd_send_sync+0x52>
    4d70:	2000bf3c 	.word	0x2000bf3c

00004d74 <common_init>:
{
    4d74:	b510      	push	{r4, lr}
    4d76:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    4d78:	aa01      	add	r2, sp, #4
    4d7a:	2100      	movs	r1, #0
    4d7c:	f640 4003 	movw	r0, #3075	; 0xc03
    4d80:	f7ff ffb8 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    4d84:	4604      	mov	r4, r0
    4d86:	b110      	cbz	r0, 4d8e <common_init+0x1a>
}
    4d88:	4620      	mov	r0, r4
    4d8a:	b002      	add	sp, #8
    4d8c:	bd10      	pop	{r4, pc}
	hci_reset_complete(rsp);
    4d8e:	9801      	ldr	r0, [sp, #4]
    4d90:	f7ff fce6 	bl	4760 <hci_reset_complete>
	net_buf_unref(rsp);
    4d94:	ac02      	add	r4, sp, #8
    4d96:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4d9a:	f015 ff8f 	bl	1acbc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    4d9e:	4622      	mov	r2, r4
    4da0:	2100      	movs	r1, #0
    4da2:	f241 0003 	movw	r0, #4099	; 0x1003
    4da6:	f7ff ffa5 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    4daa:	4604      	mov	r4, r0
    4dac:	2800      	cmp	r0, #0
    4dae:	d1eb      	bne.n	4d88 <common_init+0x14>
	read_local_features_complete(rsp);
    4db0:	9801      	ldr	r0, [sp, #4]
    4db2:	f7ff fced 	bl	4790 <read_local_features_complete>
	net_buf_unref(rsp);
    4db6:	ac02      	add	r4, sp, #8
    4db8:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4dbc:	f015 ff7e 	bl	1acbc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    4dc0:	4622      	mov	r2, r4
    4dc2:	2100      	movs	r1, #0
    4dc4:	f241 0001 	movw	r0, #4097	; 0x1001
    4dc8:	f7ff ff94 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    4dcc:	4604      	mov	r4, r0
    4dce:	2800      	cmp	r0, #0
    4dd0:	d1da      	bne.n	4d88 <common_init+0x14>
	read_local_ver_complete(rsp);
    4dd2:	9801      	ldr	r0, [sp, #4]
    4dd4:	f7ff fc72 	bl	46bc <read_local_ver_complete>
	net_buf_unref(rsp);
    4dd8:	ac02      	add	r4, sp, #8
    4dda:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4dde:	f015 ff6d 	bl	1acbc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    4de2:	4622      	mov	r2, r4
    4de4:	2100      	movs	r1, #0
    4de6:	f241 0009 	movw	r0, #4105	; 0x1009
    4dea:	f7ff ff83 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    4dee:	4604      	mov	r4, r0
    4df0:	2800      	cmp	r0, #0
    4df2:	d1c9      	bne.n	4d88 <common_init+0x14>
	read_bdaddr_complete(rsp);
    4df4:	9801      	ldr	r0, [sp, #4]
    4df6:	f7ff fcd5 	bl	47a4 <read_bdaddr_complete>
	net_buf_unref(rsp);
    4dfa:	ac02      	add	r4, sp, #8
    4dfc:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4e00:	f015 ff5c 	bl	1acbc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    4e04:	4622      	mov	r2, r4
    4e06:	2100      	movs	r1, #0
    4e08:	f241 0002 	movw	r0, #4098	; 0x1002
    4e0c:	f7ff ff72 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    4e10:	4604      	mov	r4, r0
    4e12:	2800      	cmp	r0, #0
    4e14:	d1b8      	bne.n	4d88 <common_init+0x14>
	read_supported_commands_complete(rsp);
    4e16:	9801      	ldr	r0, [sp, #4]
    4e18:	f7ff fcd2 	bl	47c0 <read_supported_commands_complete>
	net_buf_unref(rsp);
    4e1c:	9801      	ldr	r0, [sp, #4]
    4e1e:	f015 ff4d 	bl	1acbc <net_buf_unref>
	return 0;
    4e22:	e7b1      	b.n	4d88 <common_init+0x14>

00004e24 <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    4e24:	b538      	push	{r3, r4, r5, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    4e26:	4b3a      	ldr	r3, [pc, #232]	; (4f10 <common_init+0xec>)
    4e28:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    4e2c:	2a00      	cmp	r2, #0
    4e2e:	d15e      	bne.n	4eee <common_init+0xca>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    4e30:	2200      	movs	r2, #0
    4e32:	4b37      	ldr	r3, [pc, #220]	; (4f10 <common_init+0xec>)
    4e34:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
    4e38:	4c35      	ldr	r4, [pc, #212]	; (4f10 <common_init+0xec>)
	mem_init(_radio.pkt_rx_data_pool,
    4e3a:	f504 7396 	add.w	r3, r4, #300	; 0x12c
    4e3e:	f894 2136 	ldrb.w	r2, [r4, #310]	; 0x136
    4e42:	f8b4 1134 	ldrh.w	r1, [r4, #308]	; 0x134
    4e46:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    4e4a:	f00a fa47 	bl	f2dc <mem_init>
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    4e4e:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    4e52:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    4e56:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    4e5a:	462b      	mov	r3, r5
    4e5c:	440a      	add	r2, r1
    4e5e:	2108      	movs	r1, #8
    4e60:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    4e64:	f00a fa3a 	bl	f2dc <mem_init>
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    4e68:	f504 73ac 	add.w	r3, r4, #344	; 0x158
    4e6c:	2202      	movs	r2, #2
    4e6e:	2124      	movs	r1, #36	; 0x24
    4e70:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    4e74:	f00a fa32 	bl	f2dc <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    4e78:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    4e7c:	3a01      	subs	r2, #1
    4e7e:	f504 73b0 	add.w	r3, r4, #352	; 0x160
    4e82:	b292      	uxth	r2, r2
    4e84:	f8b4 1164 	ldrh.w	r1, [r4, #356]	; 0x164
    4e88:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    4e8c:	f00a fa26 	bl	f2dc <mem_init>

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    4e90:	4628      	mov	r0, r5
    4e92:	f00a fa48 	bl	f326 <mem_acquire>
	LL_ASSERT(link);
    4e96:	b3a0      	cbz	r0, 4f02 <common_init+0xde>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    4e98:	4c1d      	ldr	r4, [pc, #116]	; (4f10 <common_init+0xec>)
    4e9a:	f504 72a6 	add.w	r2, r4, #332	; 0x14c
    4e9e:	f504 71a4 	add.w	r1, r4, #328	; 0x148
    4ea2:	f00a faa5 	bl	f3f0 <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    4ea6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    4eaa:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    4eae:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    4eb2:	20ff      	movs	r0, #255	; 0xff
    4eb4:	f884 0116 	strb.w	r0, [r4, #278]	; 0x116
	_radio.data_chan_map[1] = 0xFF;
    4eb8:	f884 0117 	strb.w	r0, [r4, #279]	; 0x117
	_radio.data_chan_map[2] = 0xFF;
    4ebc:	f884 0118 	strb.w	r0, [r4, #280]	; 0x118
	_radio.data_chan_map[3] = 0xFF;
    4ec0:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
	_radio.data_chan_map[4] = 0x1F;
    4ec4:	231f      	movs	r3, #31
    4ec6:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_count = 37;
    4eca:	2325      	movs	r3, #37	; 0x25
    4ecc:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    4ed0:	231b      	movs	r3, #27
    4ed2:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    4ed6:	f44f 73a4 	mov.w	r3, #328	; 0x148
    4eda:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
	/* Initialize the PHY defaults */
	_radio.default_phy_tx = BIT(0);
	_radio.default_phy_rx = BIT(0);

#if defined(CONFIG_BT_CTLR_PHY_2M)
	_radio.default_phy_tx |= BIT(1);
    4ede:	2303      	movs	r3, #3
    4ee0:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_phy_rx |= BIT(1);
    4ee4:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#endif /* CONFIG_BT_CTLR_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    4ee8:	f00c ff5a 	bl	11da0 <packet_rx_allocate>
    4eec:	bd38      	pop	{r3, r4, r5, pc}
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    4eee:	4618      	mov	r0, r3
    4ef0:	f503 7384 	add.w	r3, r3, #264	; 0x108
    4ef4:	f44f 71aa 	mov.w	r1, #340	; 0x154
    4ef8:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    4efc:	f00a f9ee 	bl	f2dc <mem_init>
    4f00:	e79a      	b.n	4e38 <common_init+0x14>
	LL_ASSERT(link);
    4f02:	4040      	eors	r0, r0
    4f04:	f380 8811 	msr	BASEPRI, r0
    4f08:	f04f 0004 	mov.w	r0, #4
    4f0c:	df02      	svc	2
    4f0e:	bf00      	nop
    4f10:	200014d4 	.word	0x200014d4

00004f14 <le_set_event_mask>:
{
    4f14:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    4f16:	2108      	movs	r1, #8
    4f18:	f242 0001 	movw	r0, #8193	; 0x2001
    4f1c:	f7ff febe 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    4f20:	2800      	cmp	r0, #0
    4f22:	d042      	beq.n	4faa <le_set_event_mask+0x96>
    4f24:	4604      	mov	r4, r0
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    4f26:	2108      	movs	r1, #8
    4f28:	4408      	add	r0, r1
    4f2a:	f015 ff13 	bl	1ad54 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    4f2e:	4b20      	ldr	r3, [pc, #128]	; (4fb0 <le_set_event_mask+0x9c>)
    4f30:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
    4f34:	f011 0f02 	tst.w	r1, #2
    4f38:	d131      	bne.n	4f9e <le_set_event_mask+0x8a>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    4f3a:	220f      	movs	r2, #15
    4f3c:	2300      	movs	r3, #0
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    4f3e:	f011 0f20 	tst.w	r1, #32
    4f42:	d001      	beq.n	4f48 <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    4f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    4f48:	4d19      	ldr	r5, [pc, #100]	; (4fb0 <le_set_event_mask+0x9c>)
    4f4a:	f895 5079 	ldrb.w	r5, [r5, #121]	; 0x79
    4f4e:	f015 0f09 	tst.w	r5, #9
    4f52:	d001      	beq.n	4f58 <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    4f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    4f58:	f011 0f01 	tst.w	r1, #1
    4f5c:	d001      	beq.n	4f62 <le_set_event_mask+0x4e>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    4f5e:	f042 0210 	orr.w	r2, r2, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    4f62:	4913      	ldr	r1, [pc, #76]	; (4fb0 <le_set_event_mask+0x9c>)
    4f64:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    4f68:	f001 0106 	and.w	r1, r1, #6
    4f6c:	2906      	cmp	r1, #6
    4f6e:	d019      	beq.n	4fa4 <le_set_event_mask+0x90>
	dst[0] = val;
    4f70:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    4f72:	f3c2 2107 	ubfx	r1, r2, #8, #8
    4f76:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    4f78:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    4f7a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    4f7c:	0a12      	lsrs	r2, r2, #8
    4f7e:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    4f80:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    4f82:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4f86:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    4f88:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    4f8a:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    4f8c:	0a1b      	lsrs	r3, r3, #8
    4f8e:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    4f90:	2200      	movs	r2, #0
    4f92:	4621      	mov	r1, r4
    4f94:	f242 0001 	movw	r0, #8193	; 0x2001
    4f98:	f7ff feac 	bl	4cf4 <bt_hci_cmd_send_sync>
    4f9c:	bd38      	pop	{r3, r4, r5, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    4f9e:	222f      	movs	r2, #47	; 0x2f
    4fa0:	2300      	movs	r3, #0
    4fa2:	e7cc      	b.n	4f3e <le_set_event_mask+0x2a>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    4fa4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
    4fa8:	e7e2      	b.n	4f70 <le_set_event_mask+0x5c>
		return -ENOBUFS;
    4faa:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    4fae:	bd38      	pop	{r3, r4, r5, pc}
    4fb0:	2000be68 	.word	0x2000be68

00004fb4 <le_set_event_mask>:
{
    4fb4:	b570      	push	{r4, r5, r6, lr}
    4fb6:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    4fb8:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    4fba:	79da      	ldrb	r2, [r3, #7]
    4fbc:	7999      	ldrb	r1, [r3, #6]
    4fbe:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    4fc2:	7958      	ldrb	r0, [r3, #5]
    4fc4:	791a      	ldrb	r2, [r3, #4]
    4fc6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4fca:	2400      	movs	r4, #0
    4fcc:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    4fd0:	78d9      	ldrb	r1, [r3, #3]
    4fd2:	789a      	ldrb	r2, [r3, #2]
    4fd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4fd8:	7859      	ldrb	r1, [r3, #1]
    4fda:	781b      	ldrb	r3, [r3, #0]
    4fdc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    4fe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4fe4:	ea44 0003 	orr.w	r0, r4, r3
    4fe8:	4629      	mov	r1, r5
	le_event_mask = sys_get_le64(cmd->events);
    4fea:	4b04      	ldr	r3, [pc, #16]	; (4ffc <le_set_event_mask+0x48>)
    4fec:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    4ff0:	2101      	movs	r1, #1
    4ff2:	4630      	mov	r0, r6
    4ff4:	f008 f9b8 	bl	d368 <cmd_complete>
	ccst->status = 0x00;
    4ff8:	7004      	strb	r4, [r0, #0]
    4ffa:	bd70      	pop	{r4, r5, r6, pc}
    4ffc:	2000c160 	.word	0x2000c160

00005000 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
    5000:	4b4c      	ldr	r3, [pc, #304]	; (5134 <le_init+0x134>)
    5002:	7e9b      	ldrb	r3, [r3, #26]
    5004:	f013 0f40 	tst.w	r3, #64	; 0x40
    5008:	f000 808c 	beq.w	5124 <le_init+0x124>
{
    500c:	b570      	push	{r4, r5, r6, lr}
    500e:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    5010:	aa01      	add	r2, sp, #4
    5012:	2100      	movs	r1, #0
    5014:	f242 0003 	movw	r0, #8195	; 0x2003
    5018:	f7ff fe6c 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    501c:	4603      	mov	r3, r0
    501e:	b110      	cbz	r0, 5026 <le_init+0x26>
}
    5020:	4618      	mov	r0, r3
    5022:	b002      	add	sp, #8
    5024:	bd70      	pop	{r4, r5, r6, pc}
	read_le_features_complete(rsp);
    5026:	9801      	ldr	r0, [sp, #4]
    5028:	f7ff fbd4 	bl	47d4 <read_le_features_complete>
	net_buf_unref(rsp);
    502c:	ac02      	add	r4, sp, #8
    502e:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    5032:	f015 fe43 	bl	1acbc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    5036:	4622      	mov	r2, r4
    5038:	2100      	movs	r1, #0
    503a:	f242 0002 	movw	r0, #8194	; 0x2002
    503e:	f7ff fe59 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    5042:	4603      	mov	r3, r0
    5044:	2800      	cmp	r0, #0
    5046:	d1eb      	bne.n	5020 <le_init+0x20>
	le_read_buffer_size_complete(rsp);
    5048:	9801      	ldr	r0, [sp, #4]
    504a:	f7ff fbcd 	bl	47e8 <le_read_buffer_size_complete>
	net_buf_unref(rsp);
    504e:	9801      	ldr	r0, [sp, #4]
    5050:	f015 fe34 	bl	1acbc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    5054:	4b37      	ldr	r3, [pc, #220]	; (5134 <le_init+0x134>)
    5056:	7e9b      	ldrb	r3, [r3, #26]
    5058:	f013 0f20 	tst.w	r3, #32
    505c:	d037      	beq.n	50ce <le_init+0xce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    505e:	4b35      	ldr	r3, [pc, #212]	; (5134 <le_init+0x134>)
    5060:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    5064:	f013 0f08 	tst.w	r3, #8
    5068:	d149      	bne.n	50fe <le_init+0xfe>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    506a:	4b32      	ldr	r3, [pc, #200]	; (5134 <le_init+0x134>)
    506c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    5070:	f013 0f20 	tst.w	r3, #32
    5074:	d027      	beq.n	50c6 <le_init+0xc6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    5076:	466a      	mov	r2, sp
    5078:	2100      	movs	r1, #0
    507a:	f242 002f 	movw	r0, #8239	; 0x202f
    507e:	f7ff fe39 	bl	4cf4 <bt_hci_cmd_send_sync>
		if (err) {
    5082:	4603      	mov	r3, r0
    5084:	2800      	cmp	r0, #0
    5086:	d1cb      	bne.n	5020 <le_init+0x20>
		rp = (void *)rsp->data;
    5088:	9800      	ldr	r0, [sp, #0]
    508a:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    508c:	f8b3 6001 	ldrh.w	r6, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    5090:	f8b3 5003 	ldrh.w	r5, [r3, #3]
		net_buf_unref(rsp);
    5094:	f015 fe12 	bl	1acbc <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    5098:	2104      	movs	r1, #4
    509a:	f242 0024 	movw	r0, #8228	; 0x2024
    509e:	f7ff fdfd 	bl	4c9c <bt_hci_cmd_create>
		if (!buf) {
    50a2:	4604      	mov	r4, r0
    50a4:	2800      	cmp	r0, #0
    50a6:	d03a      	beq.n	511e <le_init+0x11e>
		cp = net_buf_add(buf, sizeof(*cp));
    50a8:	2104      	movs	r1, #4
    50aa:	3008      	adds	r0, #8
    50ac:	f015 fe52 	bl	1ad54 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    50b0:	8006      	strh	r6, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    50b2:	8045      	strh	r5, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    50b4:	2200      	movs	r2, #0
    50b6:	4621      	mov	r1, r4
    50b8:	f242 0024 	movw	r0, #8228	; 0x2024
    50bc:	f7ff fe1a 	bl	4cf4 <bt_hci_cmd_send_sync>
		if (err) {
    50c0:	4603      	mov	r3, r0
    50c2:	2800      	cmp	r0, #0
    50c4:	d1ac      	bne.n	5020 <le_init+0x20>
	return  le_set_event_mask();
    50c6:	f7ff ff25 	bl	4f14 <le_set_event_mask>
    50ca:	4603      	mov	r3, r0
    50cc:	e7a8      	b.n	5020 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    50ce:	2102      	movs	r1, #2
    50d0:	f640 406d 	movw	r0, #3181	; 0xc6d
    50d4:	f7ff fde2 	bl	4c9c <bt_hci_cmd_create>
		if (!buf) {
    50d8:	4604      	mov	r4, r0
    50da:	b338      	cbz	r0, 512c <le_init+0x12c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    50dc:	2102      	movs	r1, #2
    50de:	3008      	adds	r0, #8
    50e0:	f015 fe38 	bl	1ad54 <net_buf_simple_add>
		cp_le->le = 0x01;
    50e4:	2301      	movs	r3, #1
    50e6:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    50e8:	2200      	movs	r2, #0
    50ea:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    50ec:	4621      	mov	r1, r4
    50ee:	f640 406d 	movw	r0, #3181	; 0xc6d
    50f2:	f7ff fdff 	bl	4cf4 <bt_hci_cmd_send_sync>
		if (err) {
    50f6:	4603      	mov	r3, r0
    50f8:	2800      	cmp	r0, #0
    50fa:	d0b0      	beq.n	505e <le_init+0x5e>
    50fc:	e790      	b.n	5020 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    50fe:	aa01      	add	r2, sp, #4
    5100:	2100      	movs	r1, #0
    5102:	f242 001c 	movw	r0, #8220	; 0x201c
    5106:	f7ff fdf5 	bl	4cf4 <bt_hci_cmd_send_sync>
		if (err) {
    510a:	4603      	mov	r3, r0
    510c:	2800      	cmp	r0, #0
    510e:	d187      	bne.n	5020 <le_init+0x20>
		le_read_supp_states_complete(rsp);
    5110:	9801      	ldr	r0, [sp, #4]
    5112:	f7ff fae5 	bl	46e0 <le_read_supp_states_complete>
		net_buf_unref(rsp);
    5116:	9801      	ldr	r0, [sp, #4]
    5118:	f015 fdd0 	bl	1acbc <net_buf_unref>
    511c:	e7a5      	b.n	506a <le_init+0x6a>
			return -ENOBUFS;
    511e:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5122:	e77d      	b.n	5020 <le_init+0x20>
		return -ENODEV;
    5124:	f06f 0312 	mvn.w	r3, #18
}
    5128:	4618      	mov	r0, r3
    512a:	4770      	bx	lr
			return -ENOBUFS;
    512c:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5130:	e776      	b.n	5020 <le_init+0x20>
    5132:	bf00      	nop
    5134:	2000be68 	.word	0x2000be68

00005138 <br_init>:
{
    5138:	b510      	push	{r4, lr}
    513a:	b082      	sub	sp, #8
	if (bt_dev.le.mtu) {
    513c:	4b0b      	ldr	r3, [pc, #44]	; (516c <br_init+0x34>)
    513e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    5142:	b11b      	cbz	r3, 514c <br_init+0x14>
		return 0;
    5144:	2400      	movs	r4, #0
}
    5146:	4620      	mov	r0, r4
    5148:	b002      	add	sp, #8
    514a:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    514c:	aa01      	add	r2, sp, #4
    514e:	2100      	movs	r1, #0
    5150:	f241 0005 	movw	r0, #4101	; 0x1005
    5154:	f7ff fdce 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    5158:	4604      	mov	r4, r0
    515a:	2800      	cmp	r0, #0
    515c:	d1f3      	bne.n	5146 <br_init+0xe>
	read_buffer_size_complete(rsp);
    515e:	9801      	ldr	r0, [sp, #4]
    5160:	f7ff fb58 	bl	4814 <read_buffer_size_complete>
	net_buf_unref(rsp);
    5164:	9801      	ldr	r0, [sp, #4]
    5166:	f015 fda9 	bl	1acbc <net_buf_unref>
	return 0;
    516a:	e7ec      	b.n	5146 <br_init+0xe>
    516c:	2000be68 	.word	0x2000be68

00005170 <set_event_mask>:
{
    5170:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    5172:	2108      	movs	r1, #8
    5174:	f640 4001 	movw	r0, #3073	; 0xc01
    5178:	f7ff fd90 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    517c:	b348      	cbz	r0, 51d2 <set_event_mask+0x62>
    517e:	4604      	mov	r4, r0
	ev = net_buf_add(buf, sizeof(*ev));
    5180:	2108      	movs	r1, #8
    5182:	4408      	add	r0, r1
    5184:	f015 fde6 	bl	1ad54 <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
    5188:	4b13      	ldr	r3, [pc, #76]	; (51d8 <set_event_mask+0x68>)
    518a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    518e:	f013 0f01 	tst.w	r3, #1
    5192:	d11b      	bne.n	51cc <set_event_mask+0x5c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    5194:	4a11      	ldr	r2, [pc, #68]	; (51dc <set_event_mask+0x6c>)
    5196:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
    519a:	b291      	uxth	r1, r2
	dst[0] = val;
    519c:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    519e:	0a09      	lsrs	r1, r1, #8
    51a0:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    51a2:	0c12      	lsrs	r2, r2, #16
    51a4:	b291      	uxth	r1, r2
	dst[0] = val;
    51a6:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    51a8:	0a0a      	lsrs	r2, r1, #8
    51aa:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
    51ac:	b29a      	uxth	r2, r3
	dst[0] = val;
    51ae:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    51b0:	0a12      	lsrs	r2, r2, #8
    51b2:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    51b4:	0c1b      	lsrs	r3, r3, #16
    51b6:	b29a      	uxth	r2, r3
	dst[0] = val;
    51b8:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    51ba:	0a13      	lsrs	r3, r2, #8
    51bc:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    51be:	2200      	movs	r2, #0
    51c0:	4621      	mov	r1, r4
    51c2:	f640 4001 	movw	r0, #3073	; 0xc01
    51c6:	f7ff fd95 	bl	4cf4 <bt_hci_cmd_send_sync>
    51ca:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    51cc:	4a04      	ldr	r2, [pc, #16]	; (51e0 <set_event_mask+0x70>)
    51ce:	4b05      	ldr	r3, [pc, #20]	; (51e4 <set_event_mask+0x74>)
    51d0:	e7e3      	b.n	519a <set_event_mask+0x2a>
		return -ENOBUFS;
    51d2:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    51d6:	bd10      	pop	{r4, pc}
    51d8:	2000be68 	.word	0x2000be68
    51dc:	02008810 	.word	0x02008810
    51e0:	02008890 	.word	0x02008890
    51e4:	20008000 	.word	0x20008000

000051e8 <set_event_mask>:
{
    51e8:	b570      	push	{r4, r5, r6, lr}
    51ea:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    51ec:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    51ee:	79da      	ldrb	r2, [r3, #7]
    51f0:	7999      	ldrb	r1, [r3, #6]
    51f2:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    51f6:	7958      	ldrb	r0, [r3, #5]
    51f8:	791a      	ldrb	r2, [r3, #4]
    51fa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    51fe:	2400      	movs	r4, #0
    5200:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    5204:	78d9      	ldrb	r1, [r3, #3]
    5206:	789a      	ldrb	r2, [r3, #2]
    5208:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    520c:	7859      	ldrb	r1, [r3, #1]
    520e:	781b      	ldrb	r3, [r3, #0]
    5210:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    5214:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    5218:	ea44 0003 	orr.w	r0, r4, r3
    521c:	4629      	mov	r1, r5
	event_mask = sys_get_le64(cmd->events);
    521e:	4b04      	ldr	r3, [pc, #16]	; (5230 <set_event_mask+0x48>)
    5220:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    5224:	2101      	movs	r1, #1
    5226:	4630      	mov	r0, r6
    5228:	f008 f89e 	bl	d368 <cmd_complete>
	ccst->status = 0x00;
    522c:	7004      	strb	r4, [r0, #0]
    522e:	bd70      	pop	{r4, r5, r6, pc}
    5230:	2000c158 	.word	0x2000c158

00005234 <hci_vs_init>:
{
    5234:	b510      	push	{r4, lr}
    5236:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    5238:	aa01      	add	r2, sp, #4
    523a:	2100      	movs	r1, #0
    523c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    5240:	f7ff fd58 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    5244:	b108      	cbz	r0, 524a <hci_vs_init+0x16>
}
    5246:	b002      	add	sp, #8
    5248:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
    524a:	ac02      	add	r4, sp, #8
    524c:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    5250:	f015 fd34 	bl	1acbc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    5254:	4622      	mov	r2, r4
    5256:	2100      	movs	r1, #0
    5258:	f64f 4002 	movw	r0, #64514	; 0xfc02
    525c:	f7ff fd4a 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    5260:	2800      	cmp	r0, #0
    5262:	d1f0      	bne.n	5246 <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
    5264:	9b01      	ldr	r3, [sp, #4]
    5266:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    5268:	2202      	movs	r2, #2
    526a:	3101      	adds	r1, #1
    526c:	480d      	ldr	r0, [pc, #52]	; (52a4 <hci_vs_init+0x70>)
    526e:	f7fb f827 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    5272:	ac02      	add	r4, sp, #8
    5274:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    5278:	f015 fd20 	bl	1acbc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    527c:	4622      	mov	r2, r4
    527e:	2100      	movs	r1, #0
    5280:	f64f 4003 	movw	r0, #64515	; 0xfc03
    5284:	f7ff fd36 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    5288:	2800      	cmp	r0, #0
    528a:	d1dc      	bne.n	5246 <hci_vs_init+0x12>
	rp.feat = (void *)rsp->data;
    528c:	9b01      	ldr	r3, [sp, #4]
    528e:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    5290:	2201      	movs	r2, #1
    5292:	4411      	add	r1, r2
    5294:	4804      	ldr	r0, [pc, #16]	; (52a8 <hci_vs_init+0x74>)
    5296:	f7fb f813 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    529a:	9801      	ldr	r0, [sp, #4]
    529c:	f015 fd0e 	bl	1acbc <net_buf_unref>
    52a0:	e7d1      	b.n	5246 <hci_vs_init+0x12>
    52a2:	bf00      	nop
    52a4:	2000bec7 	.word	0x2000bec7
    52a8:	2000bec6 	.word	0x2000bec6

000052ac <set_random_address>:
{
    52ac:	b570      	push	{r4, r5, r6, lr}
    52ae:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    52b0:	2206      	movs	r2, #6
    52b2:	4914      	ldr	r1, [pc, #80]	; (5304 <set_random_address+0x58>)
    52b4:	f025 fa6c 	bl	2a790 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    52b8:	4604      	mov	r4, r0
    52ba:	b908      	cbnz	r0, 52c0 <set_random_address+0x14>
}
    52bc:	4620      	mov	r0, r4
    52be:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    52c0:	2106      	movs	r1, #6
    52c2:	f242 0005 	movw	r0, #8197	; 0x2005
    52c6:	f7ff fce9 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    52ca:	4604      	mov	r4, r0
    52cc:	b1b8      	cbz	r0, 52fe <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    52ce:	2206      	movs	r2, #6
    52d0:	4629      	mov	r1, r5
    52d2:	3008      	adds	r0, #8
    52d4:	f015 fd44 	bl	1ad60 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    52d8:	2200      	movs	r2, #0
    52da:	4621      	mov	r1, r4
    52dc:	f242 0005 	movw	r0, #8197	; 0x2005
    52e0:	f7ff fd08 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    52e4:	4604      	mov	r4, r0
    52e6:	2800      	cmp	r0, #0
    52e8:	d1e8      	bne.n	52bc <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
    52ea:	4e07      	ldr	r6, [pc, #28]	; (5308 <set_random_address+0x5c>)
    52ec:	2206      	movs	r2, #6
    52ee:	4629      	mov	r1, r5
    52f0:	f106 0008 	add.w	r0, r6, #8
    52f4:	f7fa ffe4 	bl	2c0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    52f8:	2301      	movs	r3, #1
    52fa:	71f3      	strb	r3, [r6, #7]
	return 0;
    52fc:	e7de      	b.n	52bc <set_random_address+0x10>
		return -ENOBUFS;
    52fe:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5302:	e7db      	b.n	52bc <set_random_address+0x10>
    5304:	2000be70 	.word	0x2000be70
    5308:	2000be68 	.word	0x2000be68

0000530c <le_set_private_addr>:
{
    530c:	b500      	push	{lr}
    530e:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    5310:	2106      	movs	r1, #6
    5312:	4668      	mov	r0, sp
    5314:	f00c f9a8 	bl	11668 <bt_rand>
	if (err) {
    5318:	4603      	mov	r3, r0
    531a:	b118      	cbz	r0, 5324 <le_set_private_addr+0x18>
}
    531c:	4618      	mov	r0, r3
    531e:	b003      	add	sp, #12
    5320:	f85d fb04 	ldr.w	pc, [sp], #4
	nrpa.val[5] &= 0x3f;
    5324:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    532c:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    5330:	4668      	mov	r0, sp
    5332:	f7ff ffbb 	bl	52ac <set_random_address>
    5336:	4603      	mov	r3, r0
    5338:	e7f0      	b.n	531c <le_set_private_addr+0x10>
	...

0000533c <bt_hci_stop_scanning>:
{
    533c:	b530      	push	{r4, r5, lr}
    533e:	b083      	sub	sp, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5340:	f3bf 8f5b 	dmb	ish
    5344:	4b26      	ldr	r3, [pc, #152]	; (53e0 <bt_hci_stop_scanning+0xa4>)
    5346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5348:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    534c:	f013 0f80 	tst.w	r3, #128	; 0x80
    5350:	d03f      	beq.n	53d2 <bt_hci_stop_scanning+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    5352:	2102      	movs	r1, #2
    5354:	f242 000c 	movw	r0, #8204	; 0x200c
    5358:	f7ff fca0 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    535c:	4604      	mov	r4, r0
    535e:	2800      	cmp	r0, #0
    5360:	d03a      	beq.n	53d8 <bt_hci_stop_scanning+0x9c>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    5362:	2102      	movs	r1, #2
    5364:	3008      	adds	r0, #8
    5366:	f015 fcf5 	bl	1ad54 <net_buf_simple_add>
    536a:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    536c:	2202      	movs	r2, #2
    536e:	2100      	movs	r1, #0
    5370:	f025 faa2 	bl	2a8b8 <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    5374:	2300      	movs	r3, #0
    5376:	706b      	strb	r3, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    5378:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    537a:	aa01      	add	r2, sp, #4
    537c:	4621      	mov	r1, r4
    537e:	f242 000c 	movw	r0, #8204	; 0x200c
    5382:	f7ff fcb7 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    5386:	4604      	mov	r4, r0
    5388:	b930      	cbnz	r0, 5398 <bt_hci_stop_scanning+0x5c>
	err = rsp->data[0];
    538a:	9b01      	ldr	r3, [sp, #4]
    538c:	689b      	ldr	r3, [r3, #8]
    538e:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    5390:	b12c      	cbz	r4, 539e <bt_hci_stop_scanning+0x62>
	net_buf_unref(rsp);
    5392:	9801      	ldr	r0, [sp, #4]
    5394:	f015 fc92 	bl	1acbc <net_buf_unref>
}
    5398:	4620      	mov	r0, r4
    539a:	b003      	add	sp, #12
    539c:	bd30      	pop	{r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    539e:	4b11      	ldr	r3, [pc, #68]	; (53e4 <bt_hci_stop_scanning+0xa8>)
    53a0:	f3bf 8f5b 	dmb	ish
    53a4:	e853 2f00 	ldrex	r2, [r3]
    53a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    53ac:	e843 2100 	strex	r1, r2, [r3]
    53b0:	2900      	cmp	r1, #0
    53b2:	d1f7      	bne.n	53a4 <bt_hci_stop_scanning+0x68>
    53b4:	f3bf 8f5b 	dmb	ish
    53b8:	f3bf 8f5b 	dmb	ish
    53bc:	e853 2f00 	ldrex	r2, [r3]
    53c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    53c4:	e843 2100 	strex	r1, r2, [r3]
    53c8:	2900      	cmp	r1, #0
    53ca:	d1f7      	bne.n	53bc <bt_hci_stop_scanning+0x80>
    53cc:	f3bf 8f5b 	dmb	ish
    53d0:	e7df      	b.n	5392 <bt_hci_stop_scanning+0x56>
		return -EALREADY;
    53d2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    53d6:	e7df      	b.n	5398 <bt_hci_stop_scanning+0x5c>
		return -ENOBUFS;
    53d8:	f06f 0468 	mvn.w	r4, #104	; 0x68
    53dc:	e7dc      	b.n	5398 <bt_hci_stop_scanning+0x5c>
    53de:	bf00      	nop
    53e0:	2000be68 	.word	0x2000be68
    53e4:	2000bed8 	.word	0x2000bed8

000053e8 <set_advertise_enable>:
{
    53e8:	b538      	push	{r3, r4, r5, lr}
    53ea:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    53ec:	2101      	movs	r1, #1
    53ee:	f242 000a 	movw	r0, #8202	; 0x200a
    53f2:	f7ff fc53 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    53f6:	b380      	cbz	r0, 545a <set_advertise_enable+0x72>
    53f8:	4604      	mov	r4, r0
	if (enable) {
    53fa:	b1dd      	cbz	r5, 5434 <set_advertise_enable+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    53fc:	2101      	movs	r1, #1
    53fe:	3008      	adds	r0, #8
    5400:	f015 fcb9 	bl	1ad76 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    5404:	2200      	movs	r2, #0
    5406:	4621      	mov	r1, r4
    5408:	f242 000a 	movw	r0, #8202	; 0x200a
    540c:	f7ff fc72 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    5410:	4603      	mov	r3, r0
    5412:	b968      	cbnz	r0, 5430 <set_advertise_enable+0x48>
	if (enable) {
    5414:	b99d      	cbnz	r5, 543e <set_advertise_enable+0x56>
    5416:	4a12      	ldr	r2, [pc, #72]	; (5460 <set_advertise_enable+0x78>)
    5418:	f3bf 8f5b 	dmb	ish
    541c:	e852 1f00 	ldrex	r1, [r2]
    5420:	f021 0120 	bic.w	r1, r1, #32
    5424:	e842 1000 	strex	r0, r1, [r2]
    5428:	2800      	cmp	r0, #0
    542a:	d1f7      	bne.n	541c <set_advertise_enable+0x34>
    542c:	f3bf 8f5b 	dmb	ish
}
    5430:	4618      	mov	r0, r3
    5432:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    5434:	2100      	movs	r1, #0
    5436:	3008      	adds	r0, #8
    5438:	f015 fc9d 	bl	1ad76 <net_buf_simple_add_u8>
    543c:	e7e2      	b.n	5404 <set_advertise_enable+0x1c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    543e:	4a08      	ldr	r2, [pc, #32]	; (5460 <set_advertise_enable+0x78>)
    5440:	f3bf 8f5b 	dmb	ish
    5444:	e852 1f00 	ldrex	r1, [r2]
    5448:	f041 0120 	orr.w	r1, r1, #32
    544c:	e842 1000 	strex	r0, r1, [r2]
    5450:	2800      	cmp	r0, #0
    5452:	d1f7      	bne.n	5444 <set_advertise_enable+0x5c>
    5454:	f3bf 8f5b 	dmb	ish
    5458:	e7ea      	b.n	5430 <set_advertise_enable+0x48>
		return -ENOBUFS;
    545a:	f06f 0368 	mvn.w	r3, #104	; 0x68
    545e:	e7e7      	b.n	5430 <set_advertise_enable+0x48>
    5460:	2000bed8 	.word	0x2000bed8

00005464 <hci_le_create_conn>:
{
    5464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5466:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    5468:	2119      	movs	r1, #25
    546a:	f242 000d 	movw	r0, #8205	; 0x200d
    546e:	f7ff fc15 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    5472:	b378      	cbz	r0, 54d4 <hci_le_create_conn+0x70>
    5474:	4607      	mov	r7, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5476:	2119      	movs	r1, #25
    5478:	3008      	adds	r0, #8
    547a:	f015 fc6b 	bl	1ad54 <net_buf_simple_add>
    547e:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    5480:	2219      	movs	r2, #25
    5482:	2100      	movs	r1, #0
    5484:	f025 fa18 	bl	2a8b8 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    5488:	2600      	movs	r6, #0
    548a:	2360      	movs	r3, #96	; 0x60
    548c:	7023      	strb	r3, [r4, #0]
    548e:	7066      	strb	r6, [r4, #1]
	cp->scan_window = cp->scan_interval;
    5490:	70a3      	strb	r3, [r4, #2]
    5492:	70e6      	strb	r6, [r4, #3]
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    5494:	2207      	movs	r2, #7
    5496:	f105 0156 	add.w	r1, r5, #86	; 0x56
    549a:	1d60      	adds	r0, r4, #5
    549c:	f7fa ff10 	bl	2c0 <memcpy>
	cp->own_addr_type = conn->le.init_addr.type;
    54a0:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
    54a4:	7323      	strb	r3, [r4, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    54a6:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
    54aa:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    54ae:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    54b2:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    54b6:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
    54ba:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    54be:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    54c2:	f8a4 3013 	strh.w	r3, [r4, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    54c6:	4632      	mov	r2, r6
    54c8:	4639      	mov	r1, r7
    54ca:	f242 000d 	movw	r0, #8205	; 0x200d
    54ce:	f7ff fc11 	bl	4cf4 <bt_hci_cmd_send_sync>
    54d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    54d4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    54d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000054da <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    54da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    54de:	4682      	mov	sl, r0
    54e0:	460f      	mov	r7, r1
    54e2:	4690      	mov	r8, r2
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    54e4:	2120      	movs	r1, #32
    54e6:	f7ff fbd9 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    54ea:	2800      	cmp	r0, #0
    54ec:	d03c      	beq.n	5568 <set_ad+0x8e>
    54ee:	4681      	mov	r9, r0
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    54f0:	2120      	movs	r1, #32
    54f2:	3008      	adds	r0, #8
    54f4:	f015 fc2e 	bl	1ad54 <net_buf_simple_add>
    54f8:	4604      	mov	r4, r0

	memset(set_data, 0, sizeof(*set_data));
    54fa:	2220      	movs	r2, #32
    54fc:	2100      	movs	r1, #0
    54fe:	f025 f9db 	bl	2a8b8 <memset>

	for (i = 0; i < ad_len; i++) {
    5502:	2600      	movs	r6, #0
    5504:	4546      	cmp	r6, r8
    5506:	d228      	bcs.n	555a <set_ad+0x80>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    5508:	7822      	ldrb	r2, [r4, #0]
    550a:	eb07 05c6 	add.w	r5, r7, r6, lsl #3
    550e:	786b      	ldrb	r3, [r5, #1]
    5510:	4413      	add	r3, r2
    5512:	3302      	adds	r3, #2
    5514:	2b1f      	cmp	r3, #31
    5516:	dc19      	bgt.n	554c <set_ad+0x72>
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    5518:	1c53      	adds	r3, r2, #1
    551a:	b2db      	uxtb	r3, r3
    551c:	7023      	strb	r3, [r4, #0]
    551e:	7869      	ldrb	r1, [r5, #1]
    5520:	3101      	adds	r1, #1
    5522:	4422      	add	r2, r4
    5524:	7051      	strb	r1, [r2, #1]
		set_data->data[set_data->len++] = ad[i].type;
    5526:	1c58      	adds	r0, r3, #1
    5528:	b2c0      	uxtb	r0, r0
    552a:	7020      	strb	r0, [r4, #0]
    552c:	f817 2036 	ldrb.w	r2, [r7, r6, lsl #3]
    5530:	4423      	add	r3, r4
    5532:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    5534:	4420      	add	r0, r4
    5536:	786a      	ldrb	r2, [r5, #1]
    5538:	6869      	ldr	r1, [r5, #4]
    553a:	3001      	adds	r0, #1
    553c:	f7fa fec0 	bl	2c0 <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    5540:	786b      	ldrb	r3, [r5, #1]
    5542:	7822      	ldrb	r2, [r4, #0]
    5544:	4413      	add	r3, r2
    5546:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < ad_len; i++) {
    5548:	3601      	adds	r6, #1
    554a:	e7db      	b.n	5504 <set_ad+0x2a>
			net_buf_unref(buf);
    554c:	4648      	mov	r0, r9
    554e:	f015 fbb5 	bl	1acbc <net_buf_unref>
			return -EINVAL;
    5552:	f06f 0015 	mvn.w	r0, #21
    5556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    555a:	2200      	movs	r2, #0
    555c:	4649      	mov	r1, r9
    555e:	4650      	mov	r0, sl
    5560:	f7ff fbc8 	bl	4cf4 <bt_hci_cmd_send_sync>
    5564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
    5568:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    556c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00005570 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    5570:	8802      	ldrh	r2, [r0, #0]
    5572:	8843      	ldrh	r3, [r0, #2]
    5574:	429a      	cmp	r2, r3
    5576:	d81a      	bhi.n	55ae <bt_le_conn_params_valid+0x3e>
    5578:	2a05      	cmp	r2, #5
    557a:	d91a      	bls.n	55b2 <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
    557c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    5580:	d819      	bhi.n	55b6 <bt_le_conn_params_valid+0x46>
	if (param->latency > 499) {
    5582:	8881      	ldrh	r1, [r0, #4]
    5584:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    5588:	d217      	bcs.n	55ba <bt_le_conn_params_valid+0x4a>
{
    558a:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
    558c:	88c0      	ldrh	r0, [r0, #6]
    558e:	f1a0 020a 	sub.w	r2, r0, #10
    5592:	b292      	uxth	r2, r2
    5594:	f640 4476 	movw	r4, #3190	; 0xc76
    5598:	42a2      	cmp	r2, r4
    559a:	d810      	bhi.n	55be <bt_le_conn_params_valid+0x4e>
	     ((1 + param->latency) * param->interval_max))) {
    559c:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    55a0:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
    55a4:	da01      	bge.n	55aa <bt_le_conn_params_valid+0x3a>
	return true;
    55a6:	2001      	movs	r0, #1
    55a8:	e00a      	b.n	55c0 <bt_le_conn_params_valid+0x50>
		return false;
    55aa:	2000      	movs	r0, #0
    55ac:	e008      	b.n	55c0 <bt_le_conn_params_valid+0x50>
		return false;
    55ae:	2000      	movs	r0, #0
    55b0:	4770      	bx	lr
    55b2:	2000      	movs	r0, #0
    55b4:	4770      	bx	lr
    55b6:	2000      	movs	r0, #0
    55b8:	4770      	bx	lr
		return false;
    55ba:	2000      	movs	r0, #0
    55bc:	4770      	bx	lr
		return false;
    55be:	2000      	movs	r0, #0
}
    55c0:	bc10      	pop	{r4}
    55c2:	4770      	bx	lr

000055c4 <bt_addr_le_create_static>:
{
    55c4:	b510      	push	{r4, lr}
    55c6:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    55c8:	2301      	movs	r3, #1
    55ca:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    55ce:	2106      	movs	r1, #6
    55d0:	f00c f84a 	bl	11668 <bt_rand>
	if (err) {
    55d4:	4602      	mov	r2, r0
    55d6:	b918      	cbnz	r0, 55e0 <bt_addr_le_create_static+0x1c>
	BT_ADDR_SET_STATIC(&addr->a);
    55d8:	79a3      	ldrb	r3, [r4, #6]
    55da:	f063 033f 	orn	r3, r3, #63	; 0x3f
    55de:	71a3      	strb	r3, [r4, #6]
}
    55e0:	4610      	mov	r0, r2
    55e2:	bd10      	pop	{r4, pc}

000055e4 <set_static_addr>:
{
    55e4:	b510      	push	{r4, lr}
    55e6:	b082      	sub	sp, #8
	if (bt_storage) {
    55e8:	4b2e      	ldr	r3, [pc, #184]	; (56a4 <set_static_addr+0xc0>)
    55ea:	681b      	ldr	r3, [r3, #0]
    55ec:	b13b      	cbz	r3, 55fe <set_static_addr+0x1a>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    55ee:	681c      	ldr	r4, [r3, #0]
    55f0:	2307      	movs	r3, #7
    55f2:	4a2d      	ldr	r2, [pc, #180]	; (56a8 <set_static_addr+0xc4>)
    55f4:	2100      	movs	r1, #0
    55f6:	4608      	mov	r0, r1
    55f8:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    55fa:	2807      	cmp	r0, #7
    55fc:	d02c      	beq.n	5658 <set_static_addr+0x74>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    55fe:	4b2a      	ldr	r3, [pc, #168]	; (56a8 <set_static_addr+0xc4>)
    5600:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    5604:	f013 0f01 	tst.w	r3, #1
    5608:	d018      	beq.n	563c <set_static_addr+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    560a:	aa01      	add	r2, sp, #4
    560c:	2100      	movs	r1, #0
    560e:	f64f 4009 	movw	r0, #64521	; 0xfc09
    5612:	f7ff fb6f 	bl	4cf4 <bt_hci_cmd_send_sync>
		if (err) {
    5616:	b988      	cbnz	r0, 563c <set_static_addr+0x58>
		rp = (void *)rsp->data;
    5618:	9801      	ldr	r0, [sp, #4]
    561a:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    561c:	784b      	ldrb	r3, [r1, #1]
    561e:	b15b      	cbz	r3, 5638 <set_static_addr+0x54>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    5620:	4821      	ldr	r0, [pc, #132]	; (56a8 <set_static_addr+0xc4>)
    5622:	2301      	movs	r3, #1
    5624:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(dst, src, sizeof(*dst));
    5628:	2206      	movs	r2, #6
    562a:	3102      	adds	r1, #2
    562c:	f7fa fe48 	bl	2c0 <memcpy>
			net_buf_unref(rsp);
    5630:	9801      	ldr	r0, [sp, #4]
    5632:	f015 fb43 	bl	1acbc <net_buf_unref>
    5636:	e00f      	b.n	5658 <set_static_addr+0x74>
		net_buf_unref(rsp);
    5638:	f015 fb40 	bl	1acbc <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    563c:	481a      	ldr	r0, [pc, #104]	; (56a8 <set_static_addr+0xc4>)
    563e:	f7ff ffc1 	bl	55c4 <bt_addr_le_create_static>
	if (err) {
    5642:	4603      	mov	r3, r0
    5644:	b9b8      	cbnz	r0, 5676 <set_static_addr+0x92>
	if (bt_storage) {
    5646:	4b17      	ldr	r3, [pc, #92]	; (56a4 <set_static_addr+0xc0>)
    5648:	681b      	ldr	r3, [r3, #0]
    564a:	b12b      	cbz	r3, 5658 <set_static_addr+0x74>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    564c:	685c      	ldr	r4, [r3, #4]
    564e:	2307      	movs	r3, #7
    5650:	4a15      	ldr	r2, [pc, #84]	; (56a8 <set_static_addr+0xc4>)
    5652:	2100      	movs	r1, #0
    5654:	4608      	mov	r0, r1
    5656:	47a0      	blx	r4
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    5658:	4b13      	ldr	r3, [pc, #76]	; (56a8 <set_static_addr+0xc4>)
    565a:	781b      	ldrb	r3, [r3, #0]
    565c:	2b01      	cmp	r3, #1
    565e:	d11b      	bne.n	5698 <set_static_addr+0xb4>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
    5660:	4b11      	ldr	r3, [pc, #68]	; (56a8 <set_static_addr+0xc4>)
    5662:	799b      	ldrb	r3, [r3, #6]
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    5664:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5668:	2bc0      	cmp	r3, #192	; 0xc0
    566a:	d118      	bne.n	569e <set_static_addr+0xba>
	err = set_random_address(&bt_dev.id_addr.a);
    566c:	480f      	ldr	r0, [pc, #60]	; (56ac <set_static_addr+0xc8>)
    566e:	f7ff fe1d 	bl	52ac <set_random_address>
	if (err) {
    5672:	4603      	mov	r3, r0
    5674:	b110      	cbz	r0, 567c <set_static_addr+0x98>
}
    5676:	4618      	mov	r0, r3
    5678:	b002      	add	sp, #8
    567a:	bd10      	pop	{r4, pc}
    567c:	4a0c      	ldr	r2, [pc, #48]	; (56b0 <set_static_addr+0xcc>)
    567e:	f3bf 8f5b 	dmb	ish
    5682:	e852 1f00 	ldrex	r1, [r2]
    5686:	f041 0104 	orr.w	r1, r1, #4
    568a:	e842 1000 	strex	r0, r1, [r2]
    568e:	2800      	cmp	r0, #0
    5690:	d1f7      	bne.n	5682 <set_static_addr+0x9e>
    5692:	f3bf 8f5b 	dmb	ish
	return 0;
    5696:	e7ee      	b.n	5676 <set_static_addr+0x92>
		return -EINVAL;
    5698:	f06f 0315 	mvn.w	r3, #21
    569c:	e7eb      	b.n	5676 <set_static_addr+0x92>
    569e:	f06f 0315 	mvn.w	r3, #21
    56a2:	e7e8      	b.n	5676 <set_static_addr+0x92>
    56a4:	20002fa4 	.word	0x20002fa4
    56a8:	2000be68 	.word	0x2000be68
    56ac:	2000be69 	.word	0x2000be69
    56b0:	2000bed8 	.word	0x2000bed8

000056b4 <hci_init>:
{
    56b4:	b510      	push	{r4, lr}
    56b6:	b084      	sub	sp, #16
	err = common_init();
    56b8:	f7ff fb5c 	bl	4d74 <common_init>
	if (err) {
    56bc:	4604      	mov	r4, r0
    56be:	b110      	cbz	r0, 56c6 <hci_init+0x12>
}
    56c0:	4620      	mov	r0, r4
    56c2:	b004      	add	sp, #16
    56c4:	bd10      	pop	{r4, pc}
	err = le_init();
    56c6:	f7ff fc9b 	bl	5000 <le_init>
	if (err) {
    56ca:	4604      	mov	r4, r0
    56cc:	2800      	cmp	r0, #0
    56ce:	d1f7      	bne.n	56c0 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    56d0:	4b17      	ldr	r3, [pc, #92]	; (5730 <hci_init+0x7c>)
    56d2:	7e9b      	ldrb	r3, [r3, #26]
    56d4:	f013 0f20 	tst.w	r3, #32
    56d8:	d104      	bne.n	56e4 <hci_init+0x30>
		err = br_init();
    56da:	f7ff fd2d 	bl	5138 <br_init>
		if (err) {
    56de:	4604      	mov	r4, r0
    56e0:	2800      	cmp	r0, #0
    56e2:	d1ed      	bne.n	56c0 <hci_init+0xc>
	err = set_event_mask();
    56e4:	f7ff fd44 	bl	5170 <set_event_mask>
	if (err) {
    56e8:	4604      	mov	r4, r0
    56ea:	2800      	cmp	r0, #0
    56ec:	d1e8      	bne.n	56c0 <hci_init+0xc>
	hci_vs_init();
    56ee:	f7ff fda1 	bl	5234 <hci_vs_init>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    56f2:	2300      	movs	r3, #0
    56f4:	9300      	str	r3, [sp, #0]
    56f6:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
    56fa:	2207      	movs	r2, #7
    56fc:	4669      	mov	r1, sp
    56fe:	480c      	ldr	r0, [pc, #48]	; (5730 <hci_init+0x7c>)
    5700:	f025 f846 	bl	2a790 <memcmp>
    5704:	b178      	cbz	r0, 5726 <hci_init+0x72>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    5706:	4b0b      	ldr	r3, [pc, #44]	; (5734 <hci_init+0x80>)
    5708:	e893 0003 	ldmia.w	r3, {r0, r1}
    570c:	9002      	str	r0, [sp, #8]
    570e:	f8ad 100c 	strh.w	r1, [sp, #12]
    5712:	0c09      	lsrs	r1, r1, #16
    5714:	f88d 100e 	strb.w	r1, [sp, #14]
    5718:	2207      	movs	r2, #7
    571a:	a902      	add	r1, sp, #8
    571c:	4804      	ldr	r0, [pc, #16]	; (5730 <hci_init+0x7c>)
    571e:	f025 f837 	bl	2a790 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    5722:	2800      	cmp	r0, #0
    5724:	d1cc      	bne.n	56c0 <hci_init+0xc>
		err = set_static_addr();
    5726:	f7ff ff5d 	bl	55e4 <set_static_addr>
    572a:	4604      	mov	r4, r0
    572c:	e7c8      	b.n	56c0 <hci_init+0xc>
    572e:	bf00      	nop
    5730:	2000be68 	.word	0x2000be68
    5734:	0002e6d0 	.word	0x0002e6d0

00005738 <hci_init>:
		return HCI_CLASS_ACL_DATA;
	}
}

void hci_init(struct k_poll_signal *signal_host_buf)
{
    5738:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
    573a:	2100      	movs	r1, #0
    573c:	4608      	mov	r0, r1
    573e:	f007 ffb1 	bl	d6a4 <reset>
    5742:	bd08      	pop	{r3, pc}

00005744 <bt_send>:
{
    5744:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    5746:	4b03      	ldr	r3, [pc, #12]	; (5754 <bt_send+0x10>)
    5748:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    574c:	68db      	ldr	r3, [r3, #12]
    574e:	4798      	blx	r3
}
    5750:	bd08      	pop	{r3, pc}
    5752:	bf00      	nop
    5754:	2000be68 	.word	0x2000be68

00005758 <bt_hci_cmd_send>:
{
    5758:	b538      	push	{r3, r4, r5, lr}
    575a:	4605      	mov	r5, r0
	if (!buf) {
    575c:	460c      	mov	r4, r1
    575e:	b151      	cbz	r1, 5776 <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    5760:	f640 4335 	movw	r3, #3125	; 0xc35
    5764:	429d      	cmp	r5, r3
    5766:	d00e      	beq.n	5786 <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    5768:	4621      	mov	r1, r4
    576a:	480c      	ldr	r0, [pc, #48]	; (579c <bt_hci_cmd_send+0x44>)
    576c:	f015 fa98 	bl	1aca0 <net_buf_put>
	return 0;
    5770:	2500      	movs	r5, #0
}
    5772:	4628      	mov	r0, r5
    5774:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    5776:	f7ff fa91 	bl	4c9c <bt_hci_cmd_create>
		if (!buf) {
    577a:	4604      	mov	r4, r0
    577c:	2800      	cmp	r0, #0
    577e:	d1ef      	bne.n	5760 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
    5780:	f06f 0568 	mvn.w	r5, #104	; 0x68
    5784:	e7f5      	b.n	5772 <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
    5786:	4620      	mov	r0, r4
    5788:	f7ff ffdc 	bl	5744 <bt_send>
		if (err) {
    578c:	4605      	mov	r5, r0
    578e:	2800      	cmp	r0, #0
    5790:	d0ef      	beq.n	5772 <bt_hci_cmd_send+0x1a>
			net_buf_unref(buf);
    5792:	4620      	mov	r0, r4
    5794:	f015 fa92 	bl	1acbc <net_buf_unref>
    5798:	e7eb      	b.n	5772 <bt_hci_cmd_send+0x1a>
    579a:	bf00      	nop
    579c:	2000bf3c 	.word	0x2000bf3c

000057a0 <start_le_scan>:
{
    57a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    57a4:	b083      	sub	sp, #12
    57a6:	4606      	mov	r6, r0
    57a8:	4689      	mov	r9, r1
    57aa:	4615      	mov	r5, r2
    57ac:	4698      	mov	r8, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM,
    57ae:	2107      	movs	r1, #7
    57b0:	f242 000b 	movw	r0, #8203	; 0x200b
    57b4:	f7ff fa72 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    57b8:	2800      	cmp	r0, #0
    57ba:	d072      	beq.n	58a2 <start_le_scan+0x102>
    57bc:	4607      	mov	r7, r0
	set_param = net_buf_add(buf, sizeof(*set_param));
    57be:	2107      	movs	r1, #7
    57c0:	3008      	adds	r0, #8
    57c2:	f015 fac7 	bl	1ad54 <net_buf_simple_add>
    57c6:	4604      	mov	r4, r0
	memset(set_param, 0, sizeof(*set_param));
    57c8:	2207      	movs	r2, #7
    57ca:	2100      	movs	r1, #0
    57cc:	f025 f874 	bl	2a8b8 <memset>
	set_param->scan_type = scan_type;
    57d0:	7026      	strb	r6, [r4, #0]
	set_param->interval = sys_cpu_to_le16(interval);
    57d2:	f8a4 9001 	strh.w	r9, [r4, #1]
	set_param->window = sys_cpu_to_le16(window);
    57d6:	f8a4 5003 	strh.w	r5, [r4, #3]
	set_param->filter_policy = 0x00;
    57da:	2300      	movs	r3, #0
    57dc:	71a3      	strb	r3, [r4, #6]
		set_param->addr_type =  bt_dev.id_addr.type;
    57de:	4b34      	ldr	r3, [pc, #208]	; (58b0 <start_le_scan+0x110>)
    57e0:	781b      	ldrb	r3, [r3, #0]
    57e2:	7163      	strb	r3, [r4, #5]
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    57e4:	2e01      	cmp	r6, #1
    57e6:	d02c      	beq.n	5842 <start_le_scan+0xa2>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    57e8:	4639      	mov	r1, r7
    57ea:	f242 000b 	movw	r0, #8203	; 0x200b
    57ee:	f7ff ffb3 	bl	5758 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    57f2:	2102      	movs	r1, #2
    57f4:	f242 000c 	movw	r0, #8204	; 0x200c
    57f8:	f7ff fa50 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    57fc:	4604      	mov	r4, r0
    57fe:	2800      	cmp	r0, #0
    5800:	d052      	beq.n	58a8 <start_le_scan+0x108>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    5802:	2102      	movs	r1, #2
    5804:	3008      	adds	r0, #8
    5806:	f015 faa5 	bl	1ad54 <net_buf_simple_add>
    580a:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    580c:	2202      	movs	r2, #2
    580e:	2100      	movs	r1, #0
    5810:	f025 f852 	bl	2a8b8 <memset>
	scan_enable->filter_dup = filter_dup;
    5814:	f885 8001 	strb.w	r8, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_ENABLE;
    5818:	2301      	movs	r3, #1
    581a:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    581c:	aa01      	add	r2, sp, #4
    581e:	4621      	mov	r1, r4
    5820:	f242 000c 	movw	r0, #8204	; 0x200c
    5824:	f7ff fa66 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    5828:	4605      	mov	r5, r0
    582a:	b930      	cbnz	r0, 583a <start_le_scan+0x9a>
	err = rsp->data[0];
    582c:	9b01      	ldr	r3, [sp, #4]
    582e:	689b      	ldr	r3, [r3, #8]
    5830:	781d      	ldrb	r5, [r3, #0]
	if (!err) {
    5832:	b1d5      	cbz	r5, 586a <start_le_scan+0xca>
	net_buf_unref(rsp);
    5834:	9801      	ldr	r0, [sp, #4]
    5836:	f015 fa41 	bl	1acbc <net_buf_unref>
}
    583a:	4628      	mov	r0, r5
    583c:	b003      	add	sp, #12
    583e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5842:	f3bf 8f5b 	dmb	ish
    5846:	4b1a      	ldr	r3, [pc, #104]	; (58b0 <start_le_scan+0x110>)
    5848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    584a:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    584e:	f013 0f20 	tst.w	r3, #32
    5852:	d1c9      	bne.n	57e8 <start_le_scan+0x48>
			err = le_set_private_addr();
    5854:	f7ff fd5a 	bl	530c <le_set_private_addr>
			if (err) {
    5858:	4605      	mov	r5, r0
    585a:	b910      	cbnz	r0, 5862 <start_le_scan+0xc2>
			set_param->addr_type = BT_ADDR_LE_RANDOM;
    585c:	2301      	movs	r3, #1
    585e:	7163      	strb	r3, [r4, #5]
    5860:	e7c2      	b.n	57e8 <start_le_scan+0x48>
				net_buf_unref(buf);
    5862:	4638      	mov	r0, r7
    5864:	f015 fa2a 	bl	1acbc <net_buf_unref>
				return err;
    5868:	e7e7      	b.n	583a <start_le_scan+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    586a:	4b12      	ldr	r3, [pc, #72]	; (58b4 <start_le_scan+0x114>)
    586c:	f3bf 8f5b 	dmb	ish
    5870:	e853 2f00 	ldrex	r2, [r3]
    5874:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5878:	e843 2100 	strex	r1, r2, [r3]
    587c:	2900      	cmp	r1, #0
    587e:	d1f7      	bne.n	5870 <start_le_scan+0xd0>
    5880:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    5884:	2e01      	cmp	r6, #1
    5886:	d1d5      	bne.n	5834 <start_le_scan+0x94>
    5888:	f3bf 8f5b 	dmb	ish
    588c:	e853 2f00 	ldrex	r2, [r3]
    5890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    5894:	e843 2100 	strex	r1, r2, [r3]
    5898:	2900      	cmp	r1, #0
    589a:	d1f7      	bne.n	588c <start_le_scan+0xec>
    589c:	f3bf 8f5b 	dmb	ish
    58a0:	e7c8      	b.n	5834 <start_le_scan+0x94>
		return -ENOBUFS;
    58a2:	f06f 0568 	mvn.w	r5, #104	; 0x68
    58a6:	e7c8      	b.n	583a <start_le_scan+0x9a>
		return -ENOBUFS;
    58a8:	f06f 0568 	mvn.w	r5, #104	; 0x68
    58ac:	e7c5      	b.n	583a <start_le_scan+0x9a>
    58ae:	bf00      	nop
    58b0:	2000be68 	.word	0x2000be68
    58b4:	2000bed8 	.word	0x2000bed8

000058b8 <bt_le_scan_update>:
{
    58b8:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    58ba:	f3bf 8f5b 	dmb	ish
    58be:	4b17      	ldr	r3, [pc, #92]	; (591c <bt_le_scan_update+0x64>)
    58c0:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    58c2:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    58c6:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    58ca:	b114      	cbz	r4, 58d2 <bt_le_scan_update+0x1a>
		return 0;
    58cc:	2300      	movs	r3, #0
}
    58ce:	4618      	mov	r0, r3
    58d0:	bd38      	pop	{r3, r4, r5, pc}
    58d2:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    58d4:	f3bf 8f5b 	dmb	ish
    58d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    58da:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    58de:	f013 0f80 	tst.w	r3, #128	; 0x80
    58e2:	d004      	beq.n	58ee <bt_le_scan_update+0x36>
		err = bt_hci_stop_scanning();
    58e4:	f7ff fd2a 	bl	533c <bt_hci_stop_scanning>
		if (err) {
    58e8:	4603      	mov	r3, r0
    58ea:	2800      	cmp	r0, #0
    58ec:	d1ef      	bne.n	58ce <bt_le_scan_update+0x16>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    58ee:	2101      	movs	r1, #1
    58f0:	2000      	movs	r0, #0
    58f2:	f001 fcd9 	bl	72a8 <bt_conn_lookup_state_le>
		if (!conn) {
    58f6:	b170      	cbz	r0, 5916 <bt_le_scan_update+0x5e>
		bt_conn_unref(conn);
    58f8:	f001 fd08 	bl	730c <bt_conn_unref>
		if (fast_scan) {
    58fc:	b13d      	cbz	r5, 590e <bt_le_scan_update+0x56>
			window = BT_GAP_SCAN_FAST_WINDOW;
    58fe:	2230      	movs	r2, #48	; 0x30
			interval = BT_GAP_SCAN_FAST_INTERVAL;
    5900:	2160      	movs	r1, #96	; 0x60
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
    5902:	2301      	movs	r3, #1
    5904:	2000      	movs	r0, #0
    5906:	f7ff ff4b 	bl	57a0 <start_le_scan>
    590a:	4603      	mov	r3, r0
    590c:	e7df      	b.n	58ce <bt_le_scan_update+0x16>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    590e:	2212      	movs	r2, #18
			interval = BT_GAP_SCAN_SLOW_INTERVAL_1;
    5910:	f44f 6100 	mov.w	r1, #2048	; 0x800
    5914:	e7f5      	b.n	5902 <bt_le_scan_update+0x4a>
			return 0;
    5916:	4623      	mov	r3, r4
    5918:	e7d9      	b.n	58ce <bt_le_scan_update+0x16>
    591a:	bf00      	nop
    591c:	2000be68 	.word	0x2000be68

00005920 <bt_init>:
{
    5920:	b510      	push	{r4, lr}
	err = hci_init();
    5922:	f7ff fec7 	bl	56b4 <hci_init>
	if (err) {
    5926:	4604      	mov	r4, r0
    5928:	b108      	cbz	r0, 592e <bt_init+0xe>
}
    592a:	4620      	mov	r0, r4
    592c:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
    592e:	f002 f83b 	bl	79a8 <bt_conn_init>
		if (err) {
    5932:	4604      	mov	r4, r0
    5934:	2800      	cmp	r0, #0
    5936:	d1f8      	bne.n	592a <bt_init+0xa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5938:	4b07      	ldr	r3, [pc, #28]	; (5958 <bt_init+0x38>)
    593a:	f3bf 8f5b 	dmb	ish
    593e:	e853 2f00 	ldrex	r2, [r3]
    5942:	f042 0202 	orr.w	r2, r2, #2
    5946:	e843 2100 	strex	r1, r2, [r3]
    594a:	2900      	cmp	r1, #0
    594c:	d1f7      	bne.n	593e <bt_init+0x1e>
    594e:	f3bf 8f5b 	dmb	ish
	bt_le_scan_update(false);
    5952:	f7ff ffb1 	bl	58b8 <bt_le_scan_update>
	return 0;
    5956:	e7e8      	b.n	592a <bt_init+0xa>
    5958:	2000bed8 	.word	0x2000bed8

0000595c <init_work>:
{
    595c:	b508      	push	{r3, lr}
	err = bt_init();
    595e:	f7ff ffdf 	bl	5920 <bt_init>
	if (ready_cb) {
    5962:	4b02      	ldr	r3, [pc, #8]	; (596c <init_work+0x10>)
    5964:	681b      	ldr	r3, [r3, #0]
    5966:	b103      	cbz	r3, 596a <init_work+0xe>
		ready_cb(err);
    5968:	4798      	blx	r3
    596a:	bd08      	pop	{r3, pc}
    596c:	20000904 	.word	0x20000904

00005970 <hci_disconn_complete>:
{
    5970:	b530      	push	{r4, r5, lr}
    5972:	b085      	sub	sp, #20
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    5974:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5976:	f8b4 0001 	ldrh.w	r0, [r4, #1]
	if (evt->status) {
    597a:	7823      	ldrb	r3, [r4, #0]
    597c:	b10b      	cbz	r3, 5982 <hci_disconn_complete+0x12>
}
    597e:	b005      	add	sp, #20
    5980:	bd30      	pop	{r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
    5982:	f001 fc3f 	bl	7204 <bt_conn_lookup_handle>
	if (!conn) {
    5986:	4605      	mov	r5, r0
    5988:	2800      	cmp	r0, #0
    598a:	d034      	beq.n	59f6 <hci_disconn_complete+0x86>
	conn->err = evt->reason;
    598c:	78e3      	ldrb	r3, [r4, #3]
    598e:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    5990:	f022 fafa 	bl	27f88 <k_call_stacks_analyze>
		} else {
			break;
		}
	}
#else
	for (i = 0; i < size; i++) {
    5994:	2200      	movs	r2, #0
	size_t unused = 0;
    5996:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    5998:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
    599c:	d206      	bcs.n	59ac <hci_disconn_complete+0x3c>
		if ((unsigned char)stack[i] == 0xaa) {
    599e:	4927      	ldr	r1, [pc, #156]	; (5a3c <hci_disconn_complete+0xcc>)
    59a0:	5c89      	ldrb	r1, [r1, r2]
    59a2:	29aa      	cmp	r1, #170	; 0xaa
    59a4:	d102      	bne.n	59ac <hci_disconn_complete+0x3c>
			unused++;
    59a6:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    59a8:	3201      	adds	r2, #1
    59aa:	e7f5      	b.n	5998 <hci_disconn_complete+0x28>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    59ac:	f5c3 7120 	rsb	r1, r3, #640	; 0x280
    59b0:	2264      	movs	r2, #100	; 0x64
    59b2:	fb02 f201 	mul.w	r2, r2, r1
    59b6:	4822      	ldr	r0, [pc, #136]	; (5a40 <hci_disconn_complete+0xd0>)
    59b8:	fba0 0202 	umull	r0, r2, r0, r2
    59bc:	0a52      	lsrs	r2, r2, #9

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    59be:	9202      	str	r2, [sp, #8]
    59c0:	f44f 7220 	mov.w	r2, #640	; 0x280
    59c4:	9201      	str	r2, [sp, #4]
    59c6:	9100      	str	r1, [sp, #0]
    59c8:	491e      	ldr	r1, [pc, #120]	; (5a44 <hci_disconn_complete+0xd4>)
    59ca:	481f      	ldr	r0, [pc, #124]	; (5a48 <hci_disconn_complete+0xd8>)
    59cc:	f7fd fac2 	bl	2f54 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    59d0:	2100      	movs	r1, #0
    59d2:	4628      	mov	r0, r5
    59d4:	f001 fd28 	bl	7428 <bt_conn_set_state>
	conn->handle = 0;
    59d8:	2300      	movs	r3, #0
    59da:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    59dc:	78ab      	ldrb	r3, [r5, #2]
    59de:	bb03      	cbnz	r3, 5a22 <hci_disconn_complete+0xb2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    59e0:	f3bf 8f5b 	dmb	ish
    59e4:	686b      	ldr	r3, [r5, #4]
    59e6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    59ea:	f013 0f01 	tst.w	r3, #1
    59ee:	d11c      	bne.n	5a2a <hci_disconn_complete+0xba>
	bt_conn_unref(conn);
    59f0:	4628      	mov	r0, r5
    59f2:	f001 fc8b 	bl	730c <bt_conn_unref>
    59f6:	f3bf 8f5b 	dmb	ish
    59fa:	4b14      	ldr	r3, [pc, #80]	; (5a4c <hci_disconn_complete+0xdc>)
    59fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    59fe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5a02:	f013 0f40 	tst.w	r3, #64	; 0x40
    5a06:	d0ba      	beq.n	597e <hci_disconn_complete+0xe>
    5a08:	f3bf 8f5b 	dmb	ish
    5a0c:	4b0f      	ldr	r3, [pc, #60]	; (5a4c <hci_disconn_complete+0xdc>)
    5a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5a10:	f3bf 8f5b 	dmb	ish
    5a14:	f013 0f20 	tst.w	r3, #32
    5a18:	d1b1      	bne.n	597e <hci_disconn_complete+0xe>
		set_advertise_enable(true);
    5a1a:	2001      	movs	r0, #1
    5a1c:	f7ff fce4 	bl	53e8 <set_advertise_enable>
    5a20:	e7ad      	b.n	597e <hci_disconn_complete+0xe>
		bt_conn_unref(conn);
    5a22:	4628      	mov	r0, r5
    5a24:	f001 fc72 	bl	730c <bt_conn_unref>
		return;
    5a28:	e7a9      	b.n	597e <hci_disconn_complete+0xe>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5a2a:	2101      	movs	r1, #1
    5a2c:	4628      	mov	r0, r5
    5a2e:	f001 fcfb 	bl	7428 <bt_conn_set_state>
		bt_le_scan_update(false);
    5a32:	2000      	movs	r0, #0
    5a34:	f7ff ff40 	bl	58b8 <bt_le_scan_update>
    5a38:	e7da      	b.n	59f0 <hci_disconn_complete+0x80>
    5a3a:	bf00      	nop
    5a3c:	200041f8 	.word	0x200041f8
    5a40:	cccccccd 	.word	0xcccccccd
    5a44:	0003149c 	.word	0x0003149c
    5a48:	000314a8 	.word	0x000314a8
    5a4c:	2000be68 	.word	0x2000be68

00005a50 <check_pending_conn>:
{
    5a50:	b538      	push	{r3, r4, r5, lr}
    5a52:	f3bf 8f5b 	dmb	ish
    5a56:	4b23      	ldr	r3, [pc, #140]	; (5ae4 <check_pending_conn+0x94>)
    5a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5a5a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5a5e:	f413 7f80 	tst.w	r3, #256	; 0x100
    5a62:	d101      	bne.n	5a68 <check_pending_conn+0x18>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    5a64:	2a01      	cmp	r2, #1
    5a66:	d900      	bls.n	5a6a <check_pending_conn+0x1a>
    5a68:	bd38      	pop	{r3, r4, r5, pc}
    5a6a:	460c      	mov	r4, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    5a6c:	2101      	movs	r1, #1
    5a6e:	f001 fc1b 	bl	72a8 <bt_conn_lookup_state_le>
	if (!conn) {
    5a72:	4605      	mov	r5, r0
    5a74:	2800      	cmp	r0, #0
    5a76:	d0f7      	beq.n	5a68 <check_pending_conn+0x18>
	if (bt_hci_stop_scanning()) {
    5a78:	f7ff fc60 	bl	533c <bt_hci_stop_scanning>
    5a7c:	b9c0      	cbnz	r0, 5ab0 <check_pending_conn+0x60>
    5a7e:	f3bf 8f5b 	dmb	ish
    5a82:	4b18      	ldr	r3, [pc, #96]	; (5ae4 <check_pending_conn+0x94>)
    5a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5a86:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    5a8a:	f013 0f04 	tst.w	r3, #4
    5a8e:	d11c      	bne.n	5aca <check_pending_conn+0x7a>
	memcpy(dst, src, sizeof(*dst));
    5a90:	2207      	movs	r2, #7
    5a92:	4914      	ldr	r1, [pc, #80]	; (5ae4 <check_pending_conn+0x94>)
    5a94:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    5a98:	f7fa fc12 	bl	2c0 <memcpy>
    5a9c:	2207      	movs	r2, #7
    5a9e:	4621      	mov	r1, r4
    5aa0:	f105 0056 	add.w	r0, r5, #86	; 0x56
    5aa4:	f7fa fc0c 	bl	2c0 <memcpy>
	if (hci_le_create_conn(conn)) {
    5aa8:	4628      	mov	r0, r5
    5aaa:	f7ff fcdb 	bl	5464 <hci_le_create_conn>
    5aae:	b180      	cbz	r0, 5ad2 <check_pending_conn+0x82>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    5ab0:	231f      	movs	r3, #31
    5ab2:	72eb      	strb	r3, [r5, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5ab4:	2100      	movs	r1, #0
    5ab6:	4628      	mov	r0, r5
    5ab8:	f001 fcb6 	bl	7428 <bt_conn_set_state>
	bt_conn_unref(conn);
    5abc:	4628      	mov	r0, r5
    5abe:	f001 fc25 	bl	730c <bt_conn_unref>
	bt_le_scan_update(false);
    5ac2:	2000      	movs	r0, #0
    5ac4:	f7ff fef8 	bl	58b8 <bt_le_scan_update>
    5ac8:	e7ce      	b.n	5a68 <check_pending_conn+0x18>
			set_random_address(&bt_dev.id_addr.a);
    5aca:	4807      	ldr	r0, [pc, #28]	; (5ae8 <check_pending_conn+0x98>)
    5acc:	f7ff fbee 	bl	52ac <set_random_address>
    5ad0:	e7de      	b.n	5a90 <check_pending_conn+0x40>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    5ad2:	2102      	movs	r1, #2
    5ad4:	4628      	mov	r0, r5
    5ad6:	f001 fca7 	bl	7428 <bt_conn_set_state>
	bt_conn_unref(conn);
    5ada:	4628      	mov	r0, r5
    5adc:	f001 fc16 	bl	730c <bt_conn_unref>
	return;
    5ae0:	bd38      	pop	{r3, r4, r5, pc}
    5ae2:	bf00      	nop
    5ae4:	2000be68 	.word	0x2000be68
    5ae8:	2000be69 	.word	0x2000be69

00005aec <le_adv_report>:
{
    5aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5af0:	b083      	sub	sp, #12
    5af2:	4605      	mov	r5, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    5af4:	f100 0308 	add.w	r3, r0, #8
    5af8:	9300      	str	r3, [sp, #0]
    5afa:	4618      	mov	r0, r3
    5afc:	f015 f97f 	bl	1adfe <net_buf_simple_pull_u8>
	while (num_reports--) {
    5b00:	e00a      	b.n	5b18 <le_adv_report+0x2c>
		check_pending_conn(addr, &info->addr, info->evt_type);
    5b02:	7822      	ldrb	r2, [r4, #0]
    5b04:	4631      	mov	r1, r6
    5b06:	9801      	ldr	r0, [sp, #4]
    5b08:	f7ff ffa2 	bl	5a50 <check_pending_conn>
		net_buf_pull(buf, info->length + sizeof(rssi));
    5b0c:	7a21      	ldrb	r1, [r4, #8]
    5b0e:	3101      	adds	r1, #1
    5b10:	9800      	ldr	r0, [sp, #0]
    5b12:	f015 f96c 	bl	1adee <net_buf_simple_pull>
	while (num_reports--) {
    5b16:	4638      	mov	r0, r7
    5b18:	1e43      	subs	r3, r0, #1
    5b1a:	b2df      	uxtb	r7, r3
    5b1c:	b368      	cbz	r0, 5b7a <le_adv_report+0x8e>
		info = (void *)buf->data;
    5b1e:	68ac      	ldr	r4, [r5, #8]
		net_buf_pull(buf, sizeof(*info));
    5b20:	2109      	movs	r1, #9
    5b22:	f8dd 9000 	ldr.w	r9, [sp]
    5b26:	4648      	mov	r0, r9
    5b28:	f015 f961 	bl	1adee <net_buf_simple_pull>
		rssi = info->data[info->length];
    5b2c:	7a23      	ldrb	r3, [r4, #8]
    5b2e:	4423      	add	r3, r4
    5b30:	f993 8009 	ldrsb.w	r8, [r3, #9]
		addr = find_id_addr(&info->addr);
    5b34:	1c66      	adds	r6, r4, #1
    5b36:	4630      	mov	r0, r6
    5b38:	f7fe ff6b 	bl	4a12 <find_id_addr>
    5b3c:	9001      	str	r0, [sp, #4]
		if (scan_dev_found_cb) {
    5b3e:	4b10      	ldr	r3, [pc, #64]	; (5b80 <le_adv_report+0x94>)
    5b40:	681b      	ldr	r3, [r3, #0]
    5b42:	2b00      	cmp	r3, #0
    5b44:	d0dd      	beq.n	5b02 <le_adv_report+0x16>
	state->offset = net_buf_simple_headroom(buf);
    5b46:	f8cd 9000 	str.w	r9, [sp]
    5b4a:	4648      	mov	r0, r9
    5b4c:	f015 f967 	bl	1ae1e <net_buf_simple_headroom>
    5b50:	fa1f fa80 	uxth.w	sl, r0
	state->len = buf->len;
    5b54:	f8b5 900c 	ldrh.w	r9, [r5, #12]
			buf->len = info->length;
    5b58:	7a23      	ldrb	r3, [r4, #8]
    5b5a:	81ab      	strh	r3, [r5, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    5b5c:	4b08      	ldr	r3, [pc, #32]	; (5b80 <le_adv_report+0x94>)
    5b5e:	f8d3 b000 	ldr.w	fp, [r3]
    5b62:	9b00      	ldr	r3, [sp, #0]
    5b64:	7822      	ldrb	r2, [r4, #0]
    5b66:	4641      	mov	r1, r8
    5b68:	9801      	ldr	r0, [sp, #4]
    5b6a:	47d8      	blx	fp
	buf->data = buf->__buf + state->offset;
    5b6c:	f105 0310 	add.w	r3, r5, #16
    5b70:	4453      	add	r3, sl
    5b72:	60ab      	str	r3, [r5, #8]
	buf->len = state->len;
    5b74:	f8a5 900c 	strh.w	r9, [r5, #12]
    5b78:	e7c3      	b.n	5b02 <le_adv_report+0x16>
}
    5b7a:	b003      	add	sp, #12
    5b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b80:	20000908 	.word	0x20000908

00005b84 <hci_le_read_remote_features>:
{
    5b84:	b538      	push	{r3, r4, r5, lr}
    5b86:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    5b88:	2102      	movs	r1, #2
    5b8a:	f242 0016 	movw	r0, #8214	; 0x2016
    5b8e:	f7ff f885 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    5b92:	b168      	cbz	r0, 5bb0 <hci_le_read_remote_features+0x2c>
    5b94:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5b96:	2102      	movs	r1, #2
    5b98:	3008      	adds	r0, #8
    5b9a:	f015 f8db 	bl	1ad54 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5b9e:	882b      	ldrh	r3, [r5, #0]
    5ba0:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5ba2:	4621      	mov	r1, r4
    5ba4:	f242 0016 	movw	r0, #8214	; 0x2016
    5ba8:	f7ff fdd6 	bl	5758 <bt_hci_cmd_send>
	return 0;
    5bac:	2000      	movs	r0, #0
    5bae:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5bb0:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5bb4:	bd38      	pop	{r3, r4, r5, pc}

00005bb6 <hci_le_set_phy>:
{
    5bb6:	b538      	push	{r3, r4, r5, lr}
    5bb8:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    5bba:	2107      	movs	r1, #7
    5bbc:	f242 0032 	movw	r0, #8242	; 0x2032
    5bc0:	f7ff f86c 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    5bc4:	b1a0      	cbz	r0, 5bf0 <hci_le_set_phy+0x3a>
    5bc6:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5bc8:	2107      	movs	r1, #7
    5bca:	3008      	adds	r0, #8
    5bcc:	f015 f8c2 	bl	1ad54 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5bd0:	8823      	ldrh	r3, [r4, #0]
    5bd2:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    5bd4:	2400      	movs	r4, #0
    5bd6:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    5bd8:	2302      	movs	r3, #2
    5bda:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    5bdc:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    5bde:	7144      	strb	r4, [r0, #5]
    5be0:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    5be2:	4629      	mov	r1, r5
    5be4:	f242 0032 	movw	r0, #8242	; 0x2032
    5be8:	f7ff fdb6 	bl	5758 <bt_hci_cmd_send>
	return 0;
    5bec:	4620      	mov	r0, r4
    5bee:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5bf0:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5bf4:	bd38      	pop	{r3, r4, r5, pc}

00005bf6 <hci_le_set_data_len>:
{
    5bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bf8:	b083      	sub	sp, #12
    5bfa:	4604      	mov	r4, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    5bfc:	aa01      	add	r2, sp, #4
    5bfe:	2100      	movs	r1, #0
    5c00:	f242 002f 	movw	r0, #8239	; 0x202f
    5c04:	f7ff f876 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    5c08:	4603      	mov	r3, r0
    5c0a:	b110      	cbz	r0, 5c12 <hci_le_set_data_len+0x1c>
}
    5c0c:	4618      	mov	r0, r3
    5c0e:	b003      	add	sp, #12
    5c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    5c12:	9801      	ldr	r0, [sp, #4]
    5c14:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    5c16:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    5c1a:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	net_buf_unref(rsp);
    5c1e:	f015 f84d 	bl	1acbc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    5c22:	2106      	movs	r1, #6
    5c24:	f242 0022 	movw	r0, #8226	; 0x2022
    5c28:	f7ff f838 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    5c2c:	4605      	mov	r5, r0
    5c2e:	b170      	cbz	r0, 5c4e <hci_le_set_data_len+0x58>
	cp = net_buf_add(buf, sizeof(*cp));
    5c30:	2106      	movs	r1, #6
    5c32:	3008      	adds	r0, #8
    5c34:	f015 f88e 	bl	1ad54 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5c38:	8823      	ldrh	r3, [r4, #0]
    5c3a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    5c3c:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    5c3e:	8086      	strh	r6, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    5c40:	4629      	mov	r1, r5
    5c42:	f242 0022 	movw	r0, #8226	; 0x2022
    5c46:	f7ff fd87 	bl	5758 <bt_hci_cmd_send>
    5c4a:	4603      	mov	r3, r0
    5c4c:	e7de      	b.n	5c0c <hci_le_set_data_len+0x16>
		return -ENOBUFS;
    5c4e:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5c52:	e7db      	b.n	5c0c <hci_le_set_data_len+0x16>

00005c54 <le_conn_complete>:
{
    5c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    5c58:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5c5a:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
    5c5e:	7823      	ldrb	r3, [r4, #0]
    5c60:	b17b      	cbz	r3, 5c82 <le_conn_complete+0x2e>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    5c62:	2102      	movs	r1, #2
    5c64:	2000      	movs	r0, #0
    5c66:	f001 fb1f 	bl	72a8 <bt_conn_lookup_state_le>
		if (!conn) {
    5c6a:	4605      	mov	r5, r0
    5c6c:	b3d0      	cbz	r0, 5ce4 <le_conn_complete+0x90>
		conn->err = evt->status;
    5c6e:	7823      	ldrb	r3, [r4, #0]
    5c70:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5c72:	2100      	movs	r1, #0
    5c74:	f001 fbd8 	bl	7428 <bt_conn_set_state>
		bt_conn_unref(conn);
    5c78:	4628      	mov	r0, r5
    5c7a:	f001 fb47 	bl	730c <bt_conn_unref>
		return;
    5c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	id_addr = find_id_addr(&evt->peer_addr);
    5c82:	1d27      	adds	r7, r4, #4
    5c84:	4638      	mov	r0, r7
    5c86:	f7fe fec4 	bl	4a12 <find_id_addr>
    5c8a:	4680      	mov	r8, r0
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    5c8c:	2102      	movs	r1, #2
    5c8e:	f001 fb0b 	bl	72a8 <bt_conn_lookup_state_le>
    5c92:	4605      	mov	r5, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    5c94:	78e3      	ldrb	r3, [r4, #3]
    5c96:	2b01      	cmp	r3, #1
    5c98:	d026      	beq.n	5ce8 <le_conn_complete+0x94>
	if (!conn) {
    5c9a:	b31d      	cbz	r5, 5ce4 <le_conn_complete+0x90>
	conn->handle   = handle;
    5c9c:	4628      	mov	r0, r5
    5c9e:	f820 6b48 	strh.w	r6, [r0], #72
    5ca2:	2207      	movs	r2, #7
    5ca4:	4641      	mov	r1, r8
    5ca6:	f7fa fb0b 	bl	2c0 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    5caa:	f8b4 300b 	ldrh.w	r3, [r4, #11]
    5cae:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    5cb2:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    5cb6:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    5cba:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    5cbe:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
	conn->role = evt->role;
    5cc2:	78e3      	ldrb	r3, [r4, #3]
    5cc4:	70eb      	strb	r3, [r5, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    5cc6:	2b01      	cmp	r3, #1
    5cc8:	d022      	beq.n	5d10 <le_conn_complete+0xbc>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    5cca:	2103      	movs	r1, #3
    5ccc:	4628      	mov	r0, r5
    5cce:	f001 fbab 	bl	7428 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    5cd2:	7b2b      	ldrb	r3, [r5, #12]
    5cd4:	2b03      	cmp	r3, #3
    5cd6:	d03b      	beq.n	5d50 <le_conn_complete+0xfc>
	bt_conn_unref(conn);
    5cd8:	4628      	mov	r0, r5
    5cda:	f001 fb17 	bl	730c <bt_conn_unref>
	bt_le_scan_update(false);
    5cde:	2000      	movs	r0, #0
    5ce0:	f7ff fdea 	bl	58b8 <bt_le_scan_update>
    5ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5ce8:	4b3a      	ldr	r3, [pc, #232]	; (5dd4 <le_conn_complete+0x180>)
    5cea:	f3bf 8f5b 	dmb	ish
    5cee:	e853 2f00 	ldrex	r2, [r3]
    5cf2:	f022 0220 	bic.w	r2, r2, #32
    5cf6:	e843 2100 	strex	r1, r2, [r3]
    5cfa:	2900      	cmp	r1, #0
    5cfc:	d1f7      	bne.n	5cee <le_conn_complete+0x9a>
    5cfe:	f3bf 8f5b 	dmb	ish
		if (!conn) {
    5d02:	2d00      	cmp	r5, #0
    5d04:	d1c9      	bne.n	5c9a <le_conn_complete+0x46>
			conn = bt_conn_add_le(id_addr);
    5d06:	4640      	mov	r0, r8
    5d08:	f001 fa30 	bl	716c <bt_conn_add_le>
    5d0c:	4605      	mov	r5, r0
    5d0e:	e7c4      	b.n	5c9a <le_conn_complete+0x46>
    5d10:	2207      	movs	r2, #7
    5d12:	4639      	mov	r1, r7
    5d14:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    5d18:	f7fa fad2 	bl	2c0 <memcpy>
    5d1c:	4e2e      	ldr	r6, [pc, #184]	; (5dd8 <le_conn_complete+0x184>)
    5d1e:	2207      	movs	r2, #7
    5d20:	4631      	mov	r1, r6
    5d22:	f105 0056 	add.w	r0, r5, #86	; 0x56
    5d26:	f7fa facb 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5d2a:	f3bf 8f5b 	dmb	ish
    5d2e:	6f33      	ldr	r3, [r6, #112]	; 0x70
    5d30:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5d34:	f013 0f40 	tst.w	r3, #64	; 0x40
    5d38:	d0c7      	beq.n	5cca <le_conn_complete+0x76>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    5d3a:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
    5d3e:	2200      	movs	r2, #0
    5d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5d44:	4313      	orrs	r3, r2
    5d46:	d0c0      	beq.n	5cca <le_conn_complete+0x76>
			set_advertise_enable(true);
    5d48:	2001      	movs	r0, #1
    5d4a:	f7ff fb4d 	bl	53e8 <set_advertise_enable>
    5d4e:	e7bc      	b.n	5cca <le_conn_complete+0x76>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    5d50:	78e3      	ldrb	r3, [r4, #3]
    5d52:	b12b      	cbz	r3, 5d60 <le_conn_complete+0x10c>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    5d54:	4b20      	ldr	r3, [pc, #128]	; (5dd8 <le_conn_complete+0x184>)
    5d56:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    5d5a:	f013 0f08 	tst.w	r3, #8
    5d5e:	d004      	beq.n	5d6a <le_conn_complete+0x116>
		err = hci_le_read_remote_features(conn);
    5d60:	4628      	mov	r0, r5
    5d62:	f7ff ff0f 	bl	5b84 <hci_le_read_remote_features>
		if (!err) {
    5d66:	2800      	cmp	r0, #0
    5d68:	d0b6      	beq.n	5cd8 <le_conn_complete+0x84>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    5d6a:	4b1b      	ldr	r3, [pc, #108]	; (5dd8 <le_conn_complete+0x184>)
    5d6c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    5d70:	f013 0f01 	tst.w	r3, #1
    5d74:	d10d      	bne.n	5d92 <le_conn_complete+0x13e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    5d76:	4b18      	ldr	r3, [pc, #96]	; (5dd8 <le_conn_complete+0x184>)
    5d78:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5d7c:	f013 0f20 	tst.w	r3, #32
    5d80:	d003      	beq.n	5d8a <le_conn_complete+0x136>
		err = hci_le_set_data_len(conn);
    5d82:	4628      	mov	r0, r5
    5d84:	f7ff ff37 	bl	5bf6 <hci_le_set_data_len>
		if (!err) {
    5d88:	b1b0      	cbz	r0, 5db8 <le_conn_complete+0x164>
	update_conn_param(conn);
    5d8a:	4628      	mov	r0, r5
    5d8c:	f7fe fe4a 	bl	4a24 <update_conn_param>
    5d90:	e7a2      	b.n	5cd8 <le_conn_complete+0x84>
		err = hci_le_set_phy(conn);
    5d92:	4628      	mov	r0, r5
    5d94:	f7ff ff0f 	bl	5bb6 <hci_le_set_phy>
		if (!err) {
    5d98:	2800      	cmp	r0, #0
    5d9a:	d1ec      	bne.n	5d76 <le_conn_complete+0x122>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    5d9c:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5d9e:	f3bf 8f5b 	dmb	ish
    5da2:	e853 2f00 	ldrex	r2, [r3]
    5da6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5daa:	e843 2100 	strex	r1, r2, [r3]
    5dae:	2900      	cmp	r1, #0
    5db0:	d1f7      	bne.n	5da2 <le_conn_complete+0x14e>
    5db2:	f3bf 8f5b 	dmb	ish
    5db6:	e78f      	b.n	5cd8 <le_conn_complete+0x84>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    5db8:	1d2b      	adds	r3, r5, #4
    5dba:	f3bf 8f5b 	dmb	ish
    5dbe:	e853 2f00 	ldrex	r2, [r3]
    5dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5dc6:	e843 2100 	strex	r1, r2, [r3]
    5dca:	2900      	cmp	r1, #0
    5dcc:	d1f7      	bne.n	5dbe <le_conn_complete+0x16a>
    5dce:	f3bf 8f5b 	dmb	ish
    5dd2:	e781      	b.n	5cd8 <le_conn_complete+0x84>
    5dd4:	2000bed8 	.word	0x2000bed8
    5dd8:	2000be68 	.word	0x2000be68

00005ddc <le_conn_complete>:
{
    5ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5de0:	4604      	mov	r4, r0
    5de2:	460f      	mov	r7, r1
    5de4:	4690      	mov	r8, r2
	ll_rl_crpa_set(radio_cc->peer_addr_type, &radio_cc->peer_addr[0],
    5de6:	1d85      	adds	r5, r0, #6
    5de8:	f100 060c 	add.w	r6, r0, #12
    5dec:	4633      	mov	r3, r6
    5dee:	22ff      	movs	r2, #255	; 0xff
    5df0:	4629      	mov	r1, r5
    5df2:	7940      	ldrb	r0, [r0, #5]
    5df4:	f014 fafa 	bl	1a3ec <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5df8:	4b40      	ldr	r3, [pc, #256]	; (5efc <le_conn_complete+0x120>)
    5dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
    5dfe:	2200      	movs	r2, #0
    5e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    5e04:	4313      	orrs	r3, r2
    5e06:	d077      	beq.n	5ef8 <le_conn_complete+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    5e08:	4b3d      	ldr	r3, [pc, #244]	; (5f00 <le_conn_complete+0x124>)
    5e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e0e:	f002 0001 	and.w	r0, r2, #1
    5e12:	2100      	movs	r1, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5e14:	4301      	orrs	r1, r0
    5e16:	d104      	bne.n	5e22 <le_conn_complete+0x46>
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    5e18:	f402 7000 	and.w	r0, r2, #512	; 0x200
    5e1c:	2100      	movs	r1, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    5e1e:	4301      	orrs	r1, r0
    5e20:	d06a      	beq.n	5ef8 <le_conn_complete+0x11c>
	if (!radio_cc->status) {
    5e22:	78e1      	ldrb	r1, [r4, #3]
    5e24:	b919      	cbnz	r1, 5e2e <le_conn_complete+0x52>
		conn_count++;
    5e26:	4837      	ldr	r0, [pc, #220]	; (5f04 <le_conn_complete+0x128>)
    5e28:	6801      	ldr	r1, [r0, #0]
    5e2a:	3101      	adds	r1, #1
    5e2c:	6001      	str	r1, [r0, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    5e2e:	f402 7200 	and.w	r2, r2, #512	; 0x200
    5e32:	2300      	movs	r3, #0
    5e34:	4313      	orrs	r3, r2
    5e36:	d03e      	beq.n	5eb6 <le_conn_complete+0xda>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    5e38:	221e      	movs	r2, #30
    5e3a:	210a      	movs	r1, #10
    5e3c:	4640      	mov	r0, r8
    5e3e:	f007 fb2d 	bl	d49c <meta_evt>
    5e42:	4680      	mov	r8, r0
		leecc->status = radio_cc->status;
    5e44:	78e3      	ldrb	r3, [r4, #3]
    5e46:	7003      	strb	r3, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    5e48:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = radio_cc->role;
    5e4c:	7923      	ldrb	r3, [r4, #4]
    5e4e:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    5e50:	7963      	ldrb	r3, [r4, #5]
    5e52:	7103      	strb	r3, [r0, #4]
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    5e54:	2206      	movs	r2, #6
    5e56:	4629      	mov	r1, r5
    5e58:	3005      	adds	r0, #5
    5e5a:	f7fa fa31 	bl	2c0 <memcpy>
		if ((radio_cc->own_addr_type) &&
    5e5e:	7ca3      	ldrb	r3, [r4, #18]
    5e60:	b123      	cbz	r3, 5e6c <le_conn_complete+0x90>
		    ((radio_cc->own_addr[5] & 0xc0) == 0x40)) {
    5e62:	7e23      	ldrb	r3, [r4, #24]
		if ((radio_cc->own_addr_type) &&
    5e64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5e68:	2b40      	cmp	r3, #64	; 0x40
    5e6a:	d01c      	beq.n	5ea6 <le_conn_complete+0xca>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    5e6c:	2206      	movs	r2, #6
    5e6e:	2100      	movs	r1, #0
    5e70:	f108 000b 	add.w	r0, r8, #11
    5e74:	f024 fd20 	bl	2a8b8 <memset>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    5e78:	2206      	movs	r2, #6
    5e7a:	4631      	mov	r1, r6
    5e7c:	f108 0011 	add.w	r0, r8, #17
    5e80:	f7fa fa1e 	bl	2c0 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    5e84:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    5e88:	f8a8 3017 	strh.w	r3, [r8, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    5e8c:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    5e90:	f8a8 3019 	strh.w	r3, [r8, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5e94:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    5e98:	f8a8 301b 	strh.w	r3, [r8, #27]
		leecc->clock_accuracy = radio_cc->mca;
    5e9c:	7fe3      	ldrb	r3, [r4, #31]
    5e9e:	f888 301d 	strb.w	r3, [r8, #29]
		return;
    5ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    5ea6:	2206      	movs	r2, #6
    5ea8:	f104 0113 	add.w	r1, r4, #19
    5eac:	f108 000b 	add.w	r0, r8, #11
    5eb0:	f7fa fa06 	bl	2c0 <memcpy>
    5eb4:	e7e0      	b.n	5e78 <le_conn_complete+0x9c>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    5eb6:	2212      	movs	r2, #18
    5eb8:	2101      	movs	r1, #1
    5eba:	4640      	mov	r0, r8
    5ebc:	f007 faee 	bl	d49c <meta_evt>
    5ec0:	4606      	mov	r6, r0
	lecc->status = radio_cc->status;
    5ec2:	78e3      	ldrb	r3, [r4, #3]
    5ec4:	7003      	strb	r3, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    5ec6:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = radio_cc->role;
    5eca:	7923      	ldrb	r3, [r4, #4]
    5ecc:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    5ece:	7963      	ldrb	r3, [r4, #5]
    5ed0:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    5ed2:	2206      	movs	r2, #6
    5ed4:	4629      	mov	r1, r5
    5ed6:	3005      	adds	r0, #5
    5ed8:	f7fa f9f2 	bl	2c0 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    5edc:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    5ee0:	f8a6 300b 	strh.w	r3, [r6, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    5ee4:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    5ee8:	f8a6 300d 	strh.w	r3, [r6, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5eec:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    5ef0:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = radio_cc->mca;
    5ef4:	7fe3      	ldrb	r3, [r4, #31]
    5ef6:	7473      	strb	r3, [r6, #17]
    5ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5efc:	2000c158 	.word	0x2000c158
    5f00:	2000c160 	.word	0x2000c160
    5f04:	20001024 	.word	0x20001024

00005f08 <le_remote_feat_complete>:
{
    5f08:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    5f0a:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5f0c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    5f10:	f001 f978 	bl	7204 <bt_conn_lookup_handle>
	if (!conn) {
    5f14:	b1f0      	cbz	r0, 5f54 <le_remote_feat_complete+0x4c>
    5f16:	4604      	mov	r4, r0
	if (!evt->status) {
    5f18:	782b      	ldrb	r3, [r5, #0]
    5f1a:	b1e3      	cbz	r3, 5f56 <le_remote_feat_complete+0x4e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    5f1c:	4b24      	ldr	r3, [pc, #144]	; (5fb0 <le_remote_feat_complete+0xa8>)
    5f1e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    5f22:	f013 0f01 	tst.w	r3, #1
    5f26:	d004      	beq.n	5f32 <le_remote_feat_complete+0x2a>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
    5f28:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    5f2c:	f013 0f01 	tst.w	r3, #1
    5f30:	d117      	bne.n	5f62 <le_remote_feat_complete+0x5a>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5f32:	4b1f      	ldr	r3, [pc, #124]	; (5fb0 <le_remote_feat_complete+0xa8>)
    5f34:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5f38:	f013 0f20 	tst.w	r3, #32
    5f3c:	d004      	beq.n	5f48 <le_remote_feat_complete+0x40>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    5f3e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5f42:	f013 0f20 	tst.w	r3, #32
    5f46:	d11f      	bne.n	5f88 <le_remote_feat_complete+0x80>
	update_conn_param(conn);
    5f48:	4620      	mov	r0, r4
    5f4a:	f7fe fd6b 	bl	4a24 <update_conn_param>
	bt_conn_unref(conn);
    5f4e:	4620      	mov	r0, r4
    5f50:	f001 f9dc 	bl	730c <bt_conn_unref>
    5f54:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(conn->le.features, evt->features,
    5f56:	2208      	movs	r2, #8
    5f58:	1ce9      	adds	r1, r5, #3
    5f5a:	3068      	adds	r0, #104	; 0x68
    5f5c:	f7fa f9b0 	bl	2c0 <memcpy>
    5f60:	e7dc      	b.n	5f1c <le_remote_feat_complete+0x14>
		err = hci_le_set_phy(conn);
    5f62:	4620      	mov	r0, r4
    5f64:	f7ff fe27 	bl	5bb6 <hci_le_set_phy>
		if (!err) {
    5f68:	2800      	cmp	r0, #0
    5f6a:	d1e2      	bne.n	5f32 <le_remote_feat_complete+0x2a>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    5f6c:	1d23      	adds	r3, r4, #4
    5f6e:	f3bf 8f5b 	dmb	ish
    5f72:	e853 2f00 	ldrex	r2, [r3]
    5f76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5f7a:	e843 2100 	strex	r1, r2, [r3]
    5f7e:	2900      	cmp	r1, #0
    5f80:	d1f7      	bne.n	5f72 <le_remote_feat_complete+0x6a>
    5f82:	f3bf 8f5b 	dmb	ish
    5f86:	e7e2      	b.n	5f4e <le_remote_feat_complete+0x46>
		err = hci_le_set_data_len(conn);
    5f88:	4620      	mov	r0, r4
    5f8a:	f7ff fe34 	bl	5bf6 <hci_le_set_data_len>
		if (!err) {
    5f8e:	2800      	cmp	r0, #0
    5f90:	d1da      	bne.n	5f48 <le_remote_feat_complete+0x40>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    5f92:	1d23      	adds	r3, r4, #4
    5f94:	f3bf 8f5b 	dmb	ish
    5f98:	e853 2f00 	ldrex	r2, [r3]
    5f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5fa0:	e843 2100 	strex	r1, r2, [r3]
    5fa4:	2900      	cmp	r1, #0
    5fa6:	d1f7      	bne.n	5f98 <le_remote_feat_complete+0x90>
    5fa8:	f3bf 8f5b 	dmb	ish
    5fac:	e7cf      	b.n	5f4e <le_remote_feat_complete+0x46>
    5fae:	bf00      	nop
    5fb0:	2000be68 	.word	0x2000be68

00005fb4 <le_remote_feat_complete>:
{
    5fb4:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5fb6:	4c14      	ldr	r4, [pc, #80]	; (6008 <le_remote_feat_complete+0x54>)
    5fb8:	e9d4 4500 	ldrd	r4, r5, [r4]
    5fbc:	2400      	movs	r4, #0
    5fbe:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    5fc2:	432c      	orrs	r4, r5
    5fc4:	d007      	beq.n	5fd6 <le_remote_feat_complete+0x22>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    5fc6:	4c11      	ldr	r4, [pc, #68]	; (600c <le_remote_feat_complete+0x58>)
    5fc8:	e9d4 4500 	ldrd	r4, r5, [r4]
    5fcc:	f004 0408 	and.w	r4, r4, #8
    5fd0:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5fd2:	432c      	orrs	r4, r5
    5fd4:	d100      	bne.n	5fd8 <le_remote_feat_complete+0x24>
    5fd6:	bd70      	pop	{r4, r5, r6, pc}
    5fd8:	4615      	mov	r5, r2
    5fda:	460e      	mov	r6, r1
    5fdc:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    5fde:	220b      	movs	r2, #11
    5fe0:	2104      	movs	r1, #4
    5fe2:	4618      	mov	r0, r3
    5fe4:	f007 fa5a 	bl	d49c <meta_evt>
	sep->status = status;
    5fe8:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    5fea:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    5fee:	b12c      	cbz	r4, 5ffc <le_remote_feat_complete+0x48>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    5ff0:	2208      	movs	r2, #8
    5ff2:	2100      	movs	r1, #0
    5ff4:	3003      	adds	r0, #3
    5ff6:	f024 fc5f 	bl	2a8b8 <memset>
    5ffa:	e7ec      	b.n	5fd6 <le_remote_feat_complete+0x22>
		memcpy(&sep->features[0],
    5ffc:	2208      	movs	r2, #8
    5ffe:	1d31      	adds	r1, r6, #4
    6000:	3003      	adds	r0, #3
    6002:	f7fa f95d 	bl	2c0 <memcpy>
    6006:	bd70      	pop	{r4, r5, r6, pc}
    6008:	2000c158 	.word	0x2000c158
    600c:	2000c160 	.word	0x2000c160

00006010 <le_phy_update_complete>:
{
    6010:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
    6012:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    6014:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    6018:	f001 f8f4 	bl	7204 <bt_conn_lookup_handle>
	if (!conn) {
    601c:	b308      	cbz	r0, 6062 <le_phy_update_complete+0x52>
    601e:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    6020:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6022:	f3bf 8f5b 	dmb	ish
    6026:	e855 3f00 	ldrex	r3, [r5]
    602a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    602e:	e845 2100 	strex	r1, r2, [r5]
    6032:	2900      	cmp	r1, #0
    6034:	d1f7      	bne.n	6026 <le_phy_update_complete+0x16>
    6036:	f3bf 8f5b 	dmb	ish
    603a:	f013 0f80 	tst.w	r3, #128	; 0x80
    603e:	d00d      	beq.n	605c <le_phy_update_complete+0x4c>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    6040:	4b11      	ldr	r3, [pc, #68]	; (6088 <le_phy_update_complete+0x78>)
    6042:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6046:	f013 0f20 	tst.w	r3, #32
    604a:	d004      	beq.n	6056 <le_phy_update_complete+0x46>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    604c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    6050:	f013 0f20 	tst.w	r3, #32
    6054:	d106      	bne.n	6064 <le_phy_update_complete+0x54>
	update_conn_param(conn);
    6056:	4620      	mov	r0, r4
    6058:	f7fe fce4 	bl	4a24 <update_conn_param>
	bt_conn_unref(conn);
    605c:	4620      	mov	r0, r4
    605e:	f001 f955 	bl	730c <bt_conn_unref>
    6062:	bd38      	pop	{r3, r4, r5, pc}
		err = hci_le_set_data_len(conn);
    6064:	4620      	mov	r0, r4
    6066:	f7ff fdc6 	bl	5bf6 <hci_le_set_data_len>
		if (!err) {
    606a:	2800      	cmp	r0, #0
    606c:	d1f3      	bne.n	6056 <le_phy_update_complete+0x46>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    606e:	f3bf 8f5b 	dmb	ish
    6072:	e855 3f00 	ldrex	r3, [r5]
    6076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    607a:	e845 3200 	strex	r2, r3, [r5]
    607e:	2a00      	cmp	r2, #0
    6080:	d1f7      	bne.n	6072 <le_phy_update_complete+0x62>
    6082:	f3bf 8f5b 	dmb	ish
    6086:	e7e9      	b.n	605c <le_phy_update_complete+0x4c>
    6088:	2000be68 	.word	0x2000be68

0000608c <le_conn_param_neg_reply>:
{
    608c:	b570      	push	{r4, r5, r6, lr}
    608e:	4606      	mov	r6, r0
    6090:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    6092:	2103      	movs	r1, #3
    6094:	f242 0021 	movw	r0, #8225	; 0x2021
    6098:	f7fe fe00 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    609c:	b160      	cbz	r0, 60b8 <le_conn_param_neg_reply+0x2c>
    609e:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    60a0:	2103      	movs	r1, #3
    60a2:	3008      	adds	r0, #8
    60a4:	f014 fe56 	bl	1ad54 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    60a8:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    60aa:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    60ac:	4621      	mov	r1, r4
    60ae:	f242 0021 	movw	r0, #8225	; 0x2021
    60b2:	f7ff fb51 	bl	5758 <bt_hci_cmd_send>
    60b6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    60b8:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    60bc:	bd70      	pop	{r4, r5, r6, pc}

000060be <le_conn_param_req_reply>:
{
    60be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60c0:	4607      	mov	r7, r0
    60c2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    60c4:	210e      	movs	r1, #14
    60c6:	f242 0020 	movw	r0, #8224	; 0x2020
    60ca:	f7fe fde7 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    60ce:	b1c0      	cbz	r0, 6102 <le_conn_param_req_reply+0x44>
    60d0:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    60d2:	210e      	movs	r1, #14
    60d4:	3008      	adds	r0, #8
    60d6:	f014 fe3d 	bl	1ad54 <net_buf_simple_add>
    60da:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    60dc:	220e      	movs	r2, #14
    60de:	2100      	movs	r1, #0
    60e0:	f024 fbea 	bl	2a8b8 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    60e4:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    60e6:	882b      	ldrh	r3, [r5, #0]
    60e8:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    60ea:	886b      	ldrh	r3, [r5, #2]
    60ec:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    60ee:	88ab      	ldrh	r3, [r5, #4]
    60f0:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    60f2:	88eb      	ldrh	r3, [r5, #6]
    60f4:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    60f6:	4631      	mov	r1, r6
    60f8:	f242 0020 	movw	r0, #8224	; 0x2020
    60fc:	f7ff fb2c 	bl	5758 <bt_hci_cmd_send>
    6100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    6102:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006108 <le_conn_param_req_reply>:
{
    6108:	b570      	push	{r4, r5, r6, lr}
    610a:	b082      	sub	sp, #8
    610c:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    610e:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    6110:	8814      	ldrh	r4, [r2, #0]
	interval_max = sys_le16_to_cpu(cmd->interval_max);
    6112:	8893      	ldrh	r3, [r2, #4]
	latency = sys_le16_to_cpu(cmd->latency);
    6114:	88d1      	ldrh	r1, [r2, #6]
	timeout = sys_le16_to_cpu(cmd->timeout);
    6116:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    6118:	9201      	str	r2, [sp, #4]
    611a:	9100      	str	r1, [sp, #0]
    611c:	2200      	movs	r2, #0
    611e:	2102      	movs	r1, #2
    6120:	b2a0      	uxth	r0, r4
    6122:	f012 f929 	bl	18378 <ll_conn_update>
    6126:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    6128:	2103      	movs	r1, #3
    612a:	4630      	mov	r0, r6
    612c:	f007 f91c 	bl	d368 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    6130:	b12d      	cbz	r5, 613e <le_conn_param_req_reply+0x36>
    6132:	230c      	movs	r3, #12
    6134:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    6136:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    613a:	b002      	add	sp, #8
    613c:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    613e:	2300      	movs	r3, #0
    6140:	e7f8      	b.n	6134 <le_conn_param_req_reply+0x2c>
	...

00006144 <le_conn_param_req>:
{
    6144:	b530      	push	{r4, r5, lr}
    6146:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    6148:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    614a:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    614c:	885a      	ldrh	r2, [r3, #2]
    614e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    6152:	889a      	ldrh	r2, [r3, #4]
    6154:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    6158:	88da      	ldrh	r2, [r3, #6]
    615a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    615e:	891b      	ldrh	r3, [r3, #8]
    6160:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    6164:	4620      	mov	r0, r4
    6166:	f001 f84d 	bl	7204 <bt_conn_lookup_handle>
	if (!conn) {
    616a:	b178      	cbz	r0, 618c <le_conn_param_req+0x48>
    616c:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
    616e:	4669      	mov	r1, sp
    6170:	f000 fdf6 	bl	6d60 <le_param_req>
    6174:	b980      	cbnz	r0, 6198 <le_conn_param_req+0x54>
		err = le_conn_param_neg_reply(handle,
    6176:	211e      	movs	r1, #30
    6178:	4620      	mov	r0, r4
    617a:	f7ff ff87 	bl	608c <le_conn_param_neg_reply>
    617e:	4604      	mov	r4, r0
	bt_conn_unref(conn);
    6180:	4628      	mov	r0, r5
    6182:	f001 f8c3 	bl	730c <bt_conn_unref>
}
    6186:	4620      	mov	r0, r4
    6188:	b003      	add	sp, #12
    618a:	bd30      	pop	{r4, r5, pc}
		return le_conn_param_neg_reply(handle,
    618c:	2102      	movs	r1, #2
    618e:	4620      	mov	r0, r4
    6190:	f7ff ff7c 	bl	608c <le_conn_param_neg_reply>
    6194:	4604      	mov	r4, r0
    6196:	e7f6      	b.n	6186 <le_conn_param_req+0x42>
		err = le_conn_param_req_reply(handle, &param);
    6198:	4669      	mov	r1, sp
    619a:	4620      	mov	r0, r4
    619c:	f7ff ff8f 	bl	60be <le_conn_param_req_reply>
    61a0:	4604      	mov	r4, r0
    61a2:	e7ed      	b.n	6180 <le_conn_param_req+0x3c>

000061a4 <le_conn_param_req>:
{
    61a4:	b530      	push	{r4, r5, lr}
    61a6:	b083      	sub	sp, #12
    61a8:	4604      	mov	r4, r0
    61aa:	460d      	mov	r5, r1
    61ac:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    61ae:	4b14      	ldr	r3, [pc, #80]	; (6200 <le_conn_param_req+0x5c>)
    61b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    61b4:	2200      	movs	r2, #0
    61b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    61ba:	4313      	orrs	r3, r2
    61bc:	d007      	beq.n	61ce <le_conn_param_req+0x2a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    61be:	4b11      	ldr	r3, [pc, #68]	; (6204 <le_conn_param_req+0x60>)
    61c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    61c4:	f002 0220 	and.w	r2, r2, #32
    61c8:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    61ca:	4313      	orrs	r3, r2
    61cc:	d109      	bne.n	61e2 <le_conn_param_req+0x3e>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    61ce:	2300      	movs	r3, #0
    61d0:	9301      	str	r3, [sp, #4]
    61d2:	9300      	str	r3, [sp, #0]
    61d4:	221a      	movs	r2, #26
    61d6:	2102      	movs	r1, #2
    61d8:	4628      	mov	r0, r5
    61da:	f012 f8cd 	bl	18378 <ll_conn_update>
}
    61de:	b003      	add	sp, #12
    61e0:	bd30      	pop	{r4, r5, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    61e2:	220a      	movs	r2, #10
    61e4:	2106      	movs	r1, #6
    61e6:	f007 f959 	bl	d49c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    61ea:	8005      	strh	r5, [r0, #0]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    61ec:	88a3      	ldrh	r3, [r4, #4]
	sep->interval_min =
    61ee:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    61f0:	88e3      	ldrh	r3, [r4, #6]
	sep->interval_max =
    61f2:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    61f4:	8923      	ldrh	r3, [r4, #8]
    61f6:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    61f8:	8963      	ldrh	r3, [r4, #10]
    61fa:	8103      	strh	r3, [r0, #8]
    61fc:	e7ef      	b.n	61de <le_conn_param_req+0x3a>
    61fe:	bf00      	nop
    6200:	2000c158 	.word	0x2000c158
    6204:	2000c160 	.word	0x2000c160

00006208 <le_ltk_request>:
{
    6208:	b5f0      	push	{r4, r5, r6, r7, lr}
    620a:	b085      	sub	sp, #20
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    620c:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    620e:	8820      	ldrh	r0, [r4, #0]
    6210:	f000 fff8 	bl	7204 <bt_conn_lookup_handle>
	if (!conn) {
    6214:	2800      	cmp	r0, #0
    6216:	d040      	beq.n	629a <le_ltk_request+0x92>
    6218:	4605      	mov	r5, r0
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    621a:	f8d4 2002 	ldr.w	r2, [r4, #2]
    621e:	f8d4 3006 	ldr.w	r3, [r4, #6]
    6222:	4313      	orrs	r3, r2
    6224:	d102      	bne.n	622c <le_ltk_request+0x24>
    6226:	8963      	ldrh	r3, [r4, #10]
    6228:	2b00      	cmp	r3, #0
    622a:	d038      	beq.n	629e <le_ltk_request+0x96>
	if (!conn->le.keys) {
    622c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    622e:	2b00      	cmp	r3, #0
    6230:	d053      	beq.n	62da <le_ltk_request+0xd2>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    6232:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6234:	b16b      	cbz	r3, 6252 <le_ltk_request+0x4a>
    6236:	899a      	ldrh	r2, [r3, #12]
    6238:	f012 0f20 	tst.w	r2, #32
    623c:	d009      	beq.n	6252 <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    623e:	f8d4 0002 	ldr.w	r0, [r4, #2]
    6242:	f8d4 1006 	ldr.w	r1, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    6246:	ea50 0201 	orrs.w	r2, r0, r1
    624a:	d102      	bne.n	6252 <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    624c:	8962      	ldrh	r2, [r4, #10]
    624e:	2a00      	cmp	r2, #0
    6250:	d052      	beq.n	62f8 <le_ltk_request+0xf0>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    6252:	b16b      	cbz	r3, 6270 <le_ltk_request+0x68>
    6254:	899a      	ldrh	r2, [r3, #12]
    6256:	f012 0f01 	tst.w	r2, #1
    625a:	d009      	beq.n	6270 <le_ltk_request+0x68>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    625c:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
    6260:	f8d4 6002 	ldr.w	r6, [r4, #2]
    6264:	f8d4 7006 	ldr.w	r7, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    6268:	42b9      	cmp	r1, r7
    626a:	bf08      	it	eq
    626c:	42b0      	cmpeq	r0, r6
    626e:	d06a      	beq.n	6346 <le_ltk_request+0x13e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    6270:	2102      	movs	r1, #2
    6272:	f242 001b 	movw	r0, #8219	; 0x201b
    6276:	f7fe fd11 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    627a:	4606      	mov	r6, r0
    627c:	b150      	cbz	r0, 6294 <le_ltk_request+0x8c>
	cp = net_buf_add(buf, sizeof(*cp));
    627e:	2102      	movs	r1, #2
    6280:	3008      	adds	r0, #8
    6282:	f014 fd67 	bl	1ad54 <net_buf_simple_add>
	cp->handle = evt->handle;
    6286:	8823      	ldrh	r3, [r4, #0]
    6288:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    628a:	4631      	mov	r1, r6
    628c:	f242 001b 	movw	r0, #8219	; 0x201b
    6290:	f7ff fa62 	bl	5758 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    6294:	4628      	mov	r0, r5
    6296:	f001 f839 	bl	730c <bt_conn_unref>
}
    629a:	b005      	add	sp, #20
    629c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    629e:	4669      	mov	r1, sp
    62a0:	f006 ff14 	bl	d0cc <bt_smp_get_tk>
    62a4:	2800      	cmp	r0, #0
    62a6:	d0c1      	beq.n	622c <le_ltk_request+0x24>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    62a8:	2112      	movs	r1, #18
    62aa:	f242 001a 	movw	r0, #8218	; 0x201a
    62ae:	f7fe fcf5 	bl	4c9c <bt_hci_cmd_create>
		if (!buf) {
    62b2:	4606      	mov	r6, r0
    62b4:	2800      	cmp	r0, #0
    62b6:	d0ed      	beq.n	6294 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    62b8:	2112      	movs	r1, #18
    62ba:	3008      	adds	r0, #8
    62bc:	f014 fd4a 	bl	1ad54 <net_buf_simple_add>
		cp->handle = evt->handle;
    62c0:	8823      	ldrh	r3, [r4, #0]
    62c2:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    62c6:	2210      	movs	r2, #16
    62c8:	4669      	mov	r1, sp
    62ca:	f7f9 fff9 	bl	2c0 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    62ce:	4631      	mov	r1, r6
    62d0:	f242 001a 	movw	r0, #8218	; 0x201a
    62d4:	f7ff fa40 	bl	5758 <bt_hci_cmd_send>
		goto done;
    62d8:	e7dc      	b.n	6294 <le_ltk_request+0x8c>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    62da:	f105 0648 	add.w	r6, r5, #72	; 0x48
    62de:	4631      	mov	r1, r6
    62e0:	2020      	movs	r0, #32
    62e2:	f006 ff59 	bl	d198 <bt_keys_find>
    62e6:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    62e8:	2800      	cmp	r0, #0
    62ea:	d1a2      	bne.n	6232 <le_ltk_request+0x2a>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    62ec:	4631      	mov	r1, r6
    62ee:	2001      	movs	r0, #1
    62f0:	f006 ff52 	bl	d198 <bt_keys_find>
    62f4:	6728      	str	r0, [r5, #112]	; 0x70
    62f6:	e79c      	b.n	6232 <le_ltk_request+0x2a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    62f8:	2112      	movs	r1, #18
    62fa:	f242 001a 	movw	r0, #8218	; 0x201a
    62fe:	f7fe fccd 	bl	4c9c <bt_hci_cmd_create>
		if (!buf) {
    6302:	4606      	mov	r6, r0
    6304:	2800      	cmp	r0, #0
    6306:	d0c5      	beq.n	6294 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    6308:	2112      	movs	r1, #18
    630a:	3008      	adds	r0, #8
    630c:	f014 fd22 	bl	1ad54 <net_buf_simple_add>
		cp->handle = evt->handle;
    6310:	8823      	ldrh	r3, [r4, #0]
    6312:	4604      	mov	r4, r0
    6314:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    6318:	6f29      	ldr	r1, [r5, #112]	; 0x70
    631a:	79ca      	ldrb	r2, [r1, #7]
    631c:	311a      	adds	r1, #26
    631e:	4620      	mov	r0, r4
    6320:	f7f9 ffce 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    6324:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6326:	79d8      	ldrb	r0, [r3, #7]
    6328:	280f      	cmp	r0, #15
    632a:	d905      	bls.n	6338 <le_ltk_request+0x130>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    632c:	4631      	mov	r1, r6
    632e:	f242 001a 	movw	r0, #8218	; 0x201a
    6332:	f7ff fa11 	bl	5758 <bt_hci_cmd_send>
		goto done;
    6336:	e7ad      	b.n	6294 <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    6338:	f1c0 0210 	rsb	r2, r0, #16
    633c:	2100      	movs	r1, #0
    633e:	4420      	add	r0, r4
    6340:	f024 faba 	bl	2a8b8 <memset>
    6344:	e7f2      	b.n	632c <le_ltk_request+0x124>
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
    6346:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
    634a:	8963      	ldrh	r3, [r4, #10]
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    634c:	429a      	cmp	r2, r3
    634e:	d18f      	bne.n	6270 <le_ltk_request+0x68>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    6350:	2112      	movs	r1, #18
    6352:	f242 001a 	movw	r0, #8218	; 0x201a
    6356:	f7fe fca1 	bl	4c9c <bt_hci_cmd_create>
		if (!buf) {
    635a:	4606      	mov	r6, r0
    635c:	2800      	cmp	r0, #0
    635e:	d099      	beq.n	6294 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    6360:	2112      	movs	r1, #18
    6362:	3008      	adds	r0, #8
    6364:	f014 fcf6 	bl	1ad54 <net_buf_simple_add>
		cp->handle = evt->handle;
    6368:	8823      	ldrh	r3, [r4, #0]
    636a:	4604      	mov	r4, r0
    636c:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    6370:	6f29      	ldr	r1, [r5, #112]	; 0x70
    6372:	79ca      	ldrb	r2, [r1, #7]
    6374:	317a      	adds	r1, #122	; 0x7a
    6376:	4620      	mov	r0, r4
    6378:	f7f9 ffa2 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    637c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    637e:	79d8      	ldrb	r0, [r3, #7]
    6380:	280f      	cmp	r0, #15
    6382:	d905      	bls.n	6390 <le_ltk_request+0x188>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    6384:	4631      	mov	r1, r6
    6386:	f242 001a 	movw	r0, #8218	; 0x201a
    638a:	f7ff f9e5 	bl	5758 <bt_hci_cmd_send>
		goto done;
    638e:	e781      	b.n	6294 <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    6390:	f1c0 0210 	rsb	r2, r0, #16
    6394:	2100      	movs	r1, #0
    6396:	4420      	add	r0, r4
    6398:	f024 fa8e 	bl	2a8b8 <memset>
    639c:	e7f2      	b.n	6384 <le_ltk_request+0x17c>
	...

000063a0 <le_ltk_request>:
{
    63a0:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    63a2:	4b15      	ldr	r3, [pc, #84]	; (63f8 <le_ltk_request+0x58>)
    63a4:	e9d3 4500 	ldrd	r4, r5, [r3]
    63a8:	2400      	movs	r4, #0
    63aa:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    63ae:	ea54 0305 	orrs.w	r3, r4, r5
    63b2:	d008      	beq.n	63c6 <le_ltk_request+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    63b4:	4b11      	ldr	r3, [pc, #68]	; (63fc <le_ltk_request+0x5c>)
    63b6:	e9d3 4500 	ldrd	r4, r5, [r3]
    63ba:	f004 0410 	and.w	r4, r4, #16
    63be:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    63c0:	ea54 0305 	orrs.w	r3, r4, r5
    63c4:	d100      	bne.n	63c8 <le_ltk_request+0x28>
    63c6:	bd70      	pop	{r4, r5, r6, pc}
    63c8:	4613      	mov	r3, r2
    63ca:	460d      	mov	r5, r1
    63cc:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    63ce:	220c      	movs	r2, #12
    63d0:	2105      	movs	r1, #5
    63d2:	4618      	mov	r0, r3
    63d4:	f007 f862 	bl	d49c <meta_evt>
    63d8:	4606      	mov	r6, r0
	sep->handle = sys_cpu_to_le16(handle);
    63da:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    63de:	2208      	movs	r2, #8
    63e0:	1d21      	adds	r1, r4, #4
    63e2:	f7f9 ff6d 	bl	2c0 <memcpy>
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    63e6:	2202      	movs	r2, #2
    63e8:	f104 010c 	add.w	r1, r4, #12
    63ec:	f106 000a 	add.w	r0, r6, #10
    63f0:	f7f9 ff66 	bl	2c0 <memcpy>
    63f4:	e7e7      	b.n	63c6 <le_ltk_request+0x26>
    63f6:	bf00      	nop
    63f8:	2000c158 	.word	0x2000c158
    63fc:	2000c160 	.word	0x2000c160

00006400 <hci_le_meta_event>:
{
    6400:	b538      	push	{r3, r4, r5, lr}
    6402:	4604      	mov	r4, r0
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    6404:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*evt));
    6408:	2101      	movs	r1, #1
    640a:	f014 fcf0 	bl	1adee <net_buf_simple_pull>
	switch (evt->subevent) {
    640e:	782b      	ldrb	r3, [r5, #0]
    6410:	3b01      	subs	r3, #1
    6412:	2b0b      	cmp	r3, #11
    6414:	d82e      	bhi.n	6474 <hci_le_meta_event+0x74>
    6416:	e8df f003 	tbb	[pc, r3]
    641a:	2a06      	.short	0x2a06
    641c:	121e0e0a 	.word	0x121e0e0a
    6420:	2d262216 	.word	0x2d262216
    6424:	1a2d      	.short	0x1a2d
		le_conn_complete(buf);
    6426:	4620      	mov	r0, r4
    6428:	f7ff fc14 	bl	5c54 <le_conn_complete>
		break;
    642c:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_update_complete(buf);
    642e:	4620      	mov	r0, r4
    6430:	f7fe fb52 	bl	4ad8 <le_conn_update_complete>
		break;
    6434:	bd38      	pop	{r3, r4, r5, pc}
		le_remote_feat_complete(buf);
    6436:	4620      	mov	r0, r4
    6438:	f7ff fd66 	bl	5f08 <le_remote_feat_complete>
		break;
    643c:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_param_req(buf);
    643e:	4620      	mov	r0, r4
    6440:	f7ff fe80 	bl	6144 <le_conn_param_req>
		break;
    6444:	bd38      	pop	{r3, r4, r5, pc}
		le_data_len_change(buf);
    6446:	4620      	mov	r0, r4
    6448:	f7fe fafc 	bl	4a44 <le_data_len_change>
		break;
    644c:	bd38      	pop	{r3, r4, r5, pc}
		le_phy_update_complete(buf);
    644e:	4620      	mov	r0, r4
    6450:	f7ff fdde 	bl	6010 <le_phy_update_complete>
		break;
    6454:	bd38      	pop	{r3, r4, r5, pc}
		le_ltk_request(buf);
    6456:	4620      	mov	r0, r4
    6458:	f7ff fed6 	bl	6208 <le_ltk_request>
		break;
    645c:	bd38      	pop	{r3, r4, r5, pc}
		le_pkey_complete(buf);
    645e:	4620      	mov	r0, r4
    6460:	f7fe f9f0 	bl	4844 <le_pkey_complete>
		break;
    6464:	bd38      	pop	{r3, r4, r5, pc}
		le_dhkey_complete(buf);
    6466:	4620      	mov	r0, r4
    6468:	f7fe f916 	bl	4698 <le_dhkey_complete>
		break;
    646c:	bd38      	pop	{r3, r4, r5, pc}
		le_adv_report(buf);
    646e:	4620      	mov	r0, r4
    6470:	f7ff fb3c 	bl	5aec <le_adv_report>
    6474:	bd38      	pop	{r3, r4, r5, pc}

00006476 <hci_event>:
{
    6476:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    6478:	6885      	ldr	r5, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    647a:	782b      	ldrb	r3, [r5, #0]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    647c:	2b0e      	cmp	r3, #14
    647e:	d316      	bcc.n	64ae <hci_event+0x38>
    6480:	2b0f      	cmp	r3, #15
    6482:	d901      	bls.n	6488 <hci_event+0x12>
    6484:	2b13      	cmp	r3, #19
    6486:	d112      	bne.n	64ae <hci_event+0x38>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
#endif
		return true;
    6488:	2301      	movs	r3, #1
    648a:	b993      	cbnz	r3, 64b2 <hci_event+0x3c>
    648c:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    648e:	2102      	movs	r1, #2
    6490:	3008      	adds	r0, #8
    6492:	f014 fcac 	bl	1adee <net_buf_simple_pull>
	switch (hdr->evt) {
    6496:	782b      	ldrb	r3, [r5, #0]
    6498:	2b08      	cmp	r3, #8
    649a:	d019      	beq.n	64d0 <hci_event+0x5a>
    649c:	d90f      	bls.n	64be <hci_event+0x48>
    649e:	2b30      	cmp	r3, #48	; 0x30
    64a0:	d01a      	beq.n	64d8 <hci_event+0x62>
    64a2:	2b3e      	cmp	r3, #62	; 0x3e
    64a4:	d110      	bne.n	64c8 <hci_event+0x52>
		hci_le_meta_event(buf);
    64a6:	4620      	mov	r0, r4
    64a8:	f7ff ffaa 	bl	6400 <hci_le_meta_event>
		break;
    64ac:	e00c      	b.n	64c8 <hci_event+0x52>
	default:
		return false;
    64ae:	2300      	movs	r3, #0
    64b0:	e7eb      	b.n	648a <hci_event+0x14>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    64b2:	4040      	eors	r0, r0
    64b4:	f380 8811 	msr	BASEPRI, r0
    64b8:	f04f 0004 	mov.w	r0, #4
    64bc:	df02      	svc	2
	switch (hdr->evt) {
    64be:	2b05      	cmp	r3, #5
    64c0:	d102      	bne.n	64c8 <hci_event+0x52>
		hci_disconn_complete(buf);
    64c2:	4620      	mov	r0, r4
    64c4:	f7ff fa54 	bl	5970 <hci_disconn_complete>
	net_buf_unref(buf);
    64c8:	4620      	mov	r0, r4
    64ca:	f014 fbf7 	bl	1acbc <net_buf_unref>
    64ce:	bd38      	pop	{r3, r4, r5, pc}
		hci_encrypt_change(buf);
    64d0:	4620      	mov	r0, r4
    64d2:	f7fe fa56 	bl	4982 <hci_encrypt_change>
		break;
    64d6:	e7f7      	b.n	64c8 <hci_event+0x52>
		hci_encrypt_key_refresh_complete(buf);
    64d8:	4620      	mov	r0, r4
    64da:	f7fe fa7a 	bl	49d2 <hci_encrypt_key_refresh_complete>
		break;
    64de:	e7f3      	b.n	64c8 <hci_event+0x52>

000064e0 <send_cmd>:
{
    64e0:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    64e2:	2100      	movs	r1, #0
    64e4:	4820      	ldr	r0, [pc, #128]	; (6568 <send_cmd+0x88>)
    64e6:	f014 fbbc 	bl	1ac62 <net_buf_get>
	BT_ASSERT(buf);
    64ea:	b1d0      	cbz	r0, 6522 <send_cmd+0x42>
    64ec:	4604      	mov	r4, r0
    64ee:	4d1f      	ldr	r5, [pc, #124]	; (656c <send_cmd+0x8c>)
    64f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    64f4:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    64f8:	f022 ff3e 	bl	29378 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    64fc:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    6500:	b120      	cbz	r0, 650c <send_cmd+0x2c>
		net_buf_unref(bt_dev.sent_cmd);
    6502:	f014 fbdb 	bl	1acbc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6506:	2200      	movs	r2, #0
    6508:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    650c:	4620      	mov	r0, r4
    650e:	f014 fbf1 	bl	1acf4 <net_buf_ref>
    6512:	4b16      	ldr	r3, [pc, #88]	; (656c <send_cmd+0x8c>)
    6514:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	err = bt_send(buf);
    6518:	4620      	mov	r0, r4
    651a:	f7ff f913 	bl	5744 <bt_send>
	if (err) {
    651e:	b930      	cbnz	r0, 652e <send_cmd+0x4e>
    6520:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    6522:	4040      	eors	r0, r0
    6524:	f380 8811 	msr	BASEPRI, r0
    6528:	f04f 0004 	mov.w	r0, #4
    652c:	df02      	svc	2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    652e:	4d0f      	ldr	r5, [pc, #60]	; (656c <send_cmd+0x8c>)
    6530:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    6534:	f022 ff0d 	bl	29352 <_impl_k_sem_give>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    6538:	f104 0310 	add.w	r3, r4, #16
    653c:	89e2      	ldrh	r2, [r4, #14]
    653e:	4413      	add	r3, r2
    6540:	3303      	adds	r3, #3
    6542:	f023 0303 	bic.w	r3, r3, #3
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    6546:	2200      	movs	r2, #0
    6548:	211f      	movs	r1, #31
    654a:	8858      	ldrh	r0, [r3, #2]
    654c:	f7fe fb10 	bl	4b70 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    6550:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    6554:	f014 fbb2 	bl	1acbc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6558:	2300      	movs	r3, #0
    655a:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    655e:	4620      	mov	r0, r4
    6560:	f014 fbac 	bl	1acbc <net_buf_unref>
}
    6564:	e7dc      	b.n	6520 <send_cmd+0x40>
    6566:	bf00      	nop
    6568:	2000bf3c 	.word	0x2000bf3c
    656c:	2000be68 	.word	0x2000be68

00006570 <process_events>:
{
    6570:	b538      	push	{r3, r4, r5, lr}
    6572:	4604      	mov	r4, r0
    6574:	460d      	mov	r5, r1
	for (; count; ev++, count--) {
    6576:	e003      	b.n	6580 <process_events+0x10>
				send_cmd();
    6578:	f7ff ffb2 	bl	64e0 <send_cmd>
	for (; count; ev++, count--) {
    657c:	3414      	adds	r4, #20
    657e:	3d01      	subs	r5, #1
    6580:	b1a5      	cbz	r5, 65ac <process_events+0x3c>
		switch (ev->state) {
    6582:	7b63      	ldrb	r3, [r4, #13]
    6584:	091b      	lsrs	r3, r3, #4
    6586:	2b04      	cmp	r3, #4
    6588:	d1f8      	bne.n	657c <process_events+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    658a:	7b23      	ldrb	r3, [r4, #12]
    658c:	2b00      	cmp	r3, #0
    658e:	d0f3      	beq.n	6578 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    6590:	2b01      	cmp	r3, #1
    6592:	d006      	beq.n	65a2 <process_events+0x32>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    6594:	2b02      	cmp	r3, #2
    6596:	d1f1      	bne.n	657c <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    6598:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
    659a:	382c      	subs	r0, #44	; 0x2c
    659c:	f001 f9c8 	bl	7930 <bt_conn_process_tx>
    65a0:	e7ec      	b.n	657c <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    65a2:	6920      	ldr	r0, [r4, #16]
					bt_conn_notify_tx(conn);
    65a4:	381c      	subs	r0, #28
    65a6:	f000 fd65 	bl	7074 <bt_conn_notify_tx>
    65aa:	e7e7      	b.n	657c <process_events+0xc>
}
    65ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000065b0 <hci_tx_thread>:
{
    65b0:	b538      	push	{r3, r4, r5, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    65b2:	4c0f      	ldr	r4, [pc, #60]	; (65f0 <hci_tx_thread+0x40>)
    65b4:	7b63      	ldrb	r3, [r4, #13]
    65b6:	f36f 1307 	bfc	r3, #4, #4
    65ba:	7363      	strb	r3, [r4, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    65bc:	f104 0014 	add.w	r0, r4, #20
    65c0:	f000 feca 	bl	7358 <bt_conn_prepare_events>
    65c4:	1c45      	adds	r5, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    65c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    65ca:	4629      	mov	r1, r5
    65cc:	4620      	mov	r0, r4
    65ce:	f022 f81f 	bl	28610 <k_poll>
		BT_ASSERT(err == 0);
    65d2:	b930      	cbnz	r0, 65e2 <hci_tx_thread+0x32>
		process_events(events, ev_count);
    65d4:	4629      	mov	r1, r5
    65d6:	4806      	ldr	r0, [pc, #24]	; (65f0 <hci_tx_thread+0x40>)
    65d8:	f7ff ffca 	bl	6570 <process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    65dc:	f022 fd60 	bl	290a0 <_impl_k_yield>
    65e0:	e7e7      	b.n	65b2 <hci_tx_thread+0x2>
		BT_ASSERT(err == 0);
    65e2:	4040      	eors	r0, r0
    65e4:	f380 8811 	msr	BASEPRI, r0
    65e8:	f04f 0004 	mov.w	r0, #4
    65ec:	df02      	svc	2
    65ee:	bf00      	nop
    65f0:	2000bf50 	.word	0x2000bf50

000065f4 <bt_recv>:
{
    65f4:	b510      	push	{r4, lr}
    65f6:	4604      	mov	r4, r0
	pool = net_buf_pool_get(buf->pool_id);
    65f8:	7980      	ldrb	r0, [r0, #6]
    65fa:	f014 fae5 	bl	1abc8 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    65fe:	8ac3      	ldrh	r3, [r0, #22]
    6600:	2b03      	cmp	r3, #3
    6602:	d910      	bls.n	6626 <bt_recv+0x32>
    6604:	f104 0310 	add.w	r3, r4, #16
    6608:	89e2      	ldrh	r2, [r4, #14]
    660a:	4413      	add	r3, r2
    660c:	3303      	adds	r3, #3
    660e:	f023 0303 	bic.w	r3, r3, #3
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    6612:	781b      	ldrb	r3, [r3, #0]
	switch (bt_buf_get_type(buf)) {
    6614:	2b01      	cmp	r3, #1
    6616:	d00c      	beq.n	6632 <bt_recv+0x3e>
    6618:	2b03      	cmp	r3, #3
    661a:	d10f      	bne.n	663c <bt_recv+0x48>
		hci_acl(buf);
    661c:	4620      	mov	r0, r4
    661e:	f7fe f949 	bl	48b4 <hci_acl>
		return 0;
    6622:	2000      	movs	r0, #0
    6624:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    6626:	4620      	mov	r0, r4
    6628:	f014 fb48 	bl	1acbc <net_buf_unref>
		return -EINVAL;
    662c:	f06f 0015 	mvn.w	r0, #21
    6630:	bd10      	pop	{r4, pc}
		hci_event(buf);
    6632:	4620      	mov	r0, r4
    6634:	f7ff ff1f 	bl	6476 <hci_event>
		return 0;
    6638:	2000      	movs	r0, #0
    663a:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    663c:	4620      	mov	r0, r4
    663e:	f014 fb3d 	bl	1acbc <net_buf_unref>
		return -EINVAL;
    6642:	f06f 0015 	mvn.w	r0, #21
}
    6646:	bd10      	pop	{r4, pc}

00006648 <bt_recv_prio>:
{
    6648:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    664a:	6885      	ldr	r5, [r0, #8]
    664c:	f100 0310 	add.w	r3, r0, #16
    6650:	89c2      	ldrh	r2, [r0, #14]
    6652:	4413      	add	r3, r2
    6654:	3303      	adds	r3, #3
    6656:	f023 0303 	bic.w	r3, r3, #3
    665a:	781b      	ldrb	r3, [r3, #0]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    665c:	2b01      	cmp	r3, #1
    665e:	d120      	bne.n	66a2 <bt_recv_prio+0x5a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6660:	8983      	ldrh	r3, [r0, #12]
    6662:	2b01      	cmp	r3, #1
    6664:	d923      	bls.n	66ae <bt_recv_prio+0x66>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    6666:	782b      	ldrb	r3, [r5, #0]
	switch (evt) {
    6668:	2b0e      	cmp	r3, #14
    666a:	d326      	bcc.n	66ba <bt_recv_prio+0x72>
    666c:	2b0f      	cmp	r3, #15
    666e:	d901      	bls.n	6674 <bt_recv_prio+0x2c>
    6670:	2b13      	cmp	r3, #19
    6672:	d122      	bne.n	66ba <bt_recv_prio+0x72>
		return true;
    6674:	2301      	movs	r3, #1
    6676:	b313      	cbz	r3, 66be <bt_recv_prio+0x76>
    6678:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    667a:	2102      	movs	r1, #2
    667c:	3008      	adds	r0, #8
    667e:	f014 fbb6 	bl	1adee <net_buf_simple_pull>
	switch (hdr->evt) {
    6682:	782b      	ldrb	r3, [r5, #0]
    6684:	2b0f      	cmp	r3, #15
    6686:	d028      	beq.n	66da <bt_recv_prio+0x92>
    6688:	2b13      	cmp	r3, #19
    668a:	d02a      	beq.n	66e2 <bt_recv_prio+0x9a>
    668c:	2b0e      	cmp	r3, #14
    668e:	d01c      	beq.n	66ca <bt_recv_prio+0x82>
		net_buf_unref(buf);
    6690:	4620      	mov	r0, r4
    6692:	f014 fb13 	bl	1acbc <net_buf_unref>
		BT_ASSERT(0);
    6696:	4040      	eors	r0, r0
    6698:	f380 8811 	msr	BASEPRI, r0
    669c:	f04f 0004 	mov.w	r0, #4
    66a0:	df02      	svc	2
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    66a2:	4040      	eors	r0, r0
    66a4:	f380 8811 	msr	BASEPRI, r0
    66a8:	f04f 0004 	mov.w	r0, #4
    66ac:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    66ae:	4040      	eors	r0, r0
    66b0:	f380 8811 	msr	BASEPRI, r0
    66b4:	f04f 0004 	mov.w	r0, #4
    66b8:	df02      	svc	2
		return false;
    66ba:	2300      	movs	r3, #0
    66bc:	e7db      	b.n	6676 <bt_recv_prio+0x2e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    66be:	4040      	eors	r0, r0
    66c0:	f380 8811 	msr	BASEPRI, r0
    66c4:	f04f 0004 	mov.w	r0, #4
    66c8:	df02      	svc	2
		hci_cmd_complete(buf);
    66ca:	4620      	mov	r0, r4
    66cc:	f7fe fa70 	bl	4bb0 <hci_cmd_complete>
	net_buf_unref(buf);
    66d0:	4620      	mov	r0, r4
    66d2:	f014 faf3 	bl	1acbc <net_buf_unref>
}
    66d6:	2000      	movs	r0, #0
    66d8:	bd38      	pop	{r3, r4, r5, pc}
		hci_cmd_status(buf);
    66da:	4620      	mov	r0, r4
    66dc:	f7fe fa80 	bl	4be0 <hci_cmd_status>
		break;
    66e0:	e7f6      	b.n	66d0 <bt_recv_prio+0x88>
		hci_num_completed_packets(buf);
    66e2:	4620      	mov	r0, r4
    66e4:	f7fe fa92 	bl	4c0c <hci_num_completed_packets>
		break;
    66e8:	e7f2      	b.n	66d0 <bt_recv_prio+0x88>
	...

000066ec <bt_hci_driver_register>:
	if (bt_dev.drv) {
    66ec:	4b0a      	ldr	r3, [pc, #40]	; (6718 <bt_hci_driver_register+0x2c>)
    66ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    66f2:	b943      	cbnz	r3, 6706 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    66f4:	6883      	ldr	r3, [r0, #8]
    66f6:	b14b      	cbz	r3, 670c <bt_hci_driver_register+0x20>
    66f8:	68c3      	ldr	r3, [r0, #12]
    66fa:	b153      	cbz	r3, 6712 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    66fc:	4b06      	ldr	r3, [pc, #24]	; (6718 <bt_hci_driver_register+0x2c>)
    66fe:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
	return 0;
    6702:	2000      	movs	r0, #0
    6704:	4770      	bx	lr
		return -EALREADY;
    6706:	f06f 0077 	mvn.w	r0, #119	; 0x77
    670a:	4770      	bx	lr
		return -EINVAL;
    670c:	f06f 0015 	mvn.w	r0, #21
    6710:	4770      	bx	lr
    6712:	f06f 0015 	mvn.w	r0, #21
}
    6716:	4770      	bx	lr
    6718:	2000be68 	.word	0x2000be68

0000671c <bt_enable>:
{
    671c:	b530      	push	{r4, r5, lr}
    671e:	b087      	sub	sp, #28
	if (!bt_dev.drv) {
    6720:	4b29      	ldr	r3, [pc, #164]	; (67c8 <bt_enable+0xac>)
    6722:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    6726:	2b00      	cmp	r3, #0
    6728:	d047      	beq.n	67ba <bt_enable+0x9e>
    672a:	4b28      	ldr	r3, [pc, #160]	; (67cc <bt_enable+0xb0>)
    672c:	f3bf 8f5b 	dmb	ish
    6730:	e853 2f00 	ldrex	r2, [r3]
    6734:	f042 0101 	orr.w	r1, r2, #1
    6738:	e843 1400 	strex	r4, r1, [r3]
    673c:	2c00      	cmp	r4, #0
    673e:	d1f7      	bne.n	6730 <bt_enable+0x14>
    6740:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    6744:	f012 0f01 	tst.w	r2, #1
    6748:	d13a      	bne.n	67c0 <bt_enable+0xa4>
    674a:	4604      	mov	r4, r0
	ready_cb = cb;
    674c:	4b20      	ldr	r3, [pc, #128]	; (67d0 <bt_enable+0xb4>)
    674e:	6018      	str	r0, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    6750:	2300      	movs	r3, #0
    6752:	9305      	str	r3, [sp, #20]
    6754:	9304      	str	r3, [sp, #16]
    6756:	f06f 0208 	mvn.w	r2, #8
    675a:	9203      	str	r2, [sp, #12]
    675c:	9302      	str	r3, [sp, #8]
    675e:	9301      	str	r3, [sp, #4]
    6760:	9300      	str	r3, [sp, #0]
    6762:	4b1c      	ldr	r3, [pc, #112]	; (67d4 <bt_enable+0xb8>)
    6764:	f44f 7220 	mov.w	r2, #640	; 0x280
    6768:	491b      	ldr	r1, [pc, #108]	; (67d8 <bt_enable+0xbc>)
    676a:	481c      	ldr	r0, [pc, #112]	; (67dc <bt_enable+0xc0>)
    676c:	f023 f870 	bl	29850 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    6770:	4b15      	ldr	r3, [pc, #84]	; (67c8 <bt_enable+0xac>)
    6772:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    6776:	689b      	ldr	r3, [r3, #8]
    6778:	4798      	blx	r3
	if (err) {
    677a:	4605      	mov	r5, r0
    677c:	b980      	cbnz	r0, 67a0 <bt_enable+0x84>
	if (!cb) {
    677e:	b194      	cbz	r4, 67a6 <bt_enable+0x8a>
    6780:	4b17      	ldr	r3, [pc, #92]	; (67e0 <bt_enable+0xc4>)
    6782:	f3bf 8f5b 	dmb	ish
    6786:	e853 2f00 	ldrex	r2, [r3]
    678a:	f042 0101 	orr.w	r1, r2, #1
    678e:	e843 1000 	strex	r0, r1, [r3]
    6792:	2800      	cmp	r0, #0
    6794:	d1f7      	bne.n	6786 <bt_enable+0x6a>
    6796:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    679a:	f012 0f01 	tst.w	r2, #1
    679e:	d006      	beq.n	67ae <bt_enable+0x92>
}
    67a0:	4628      	mov	r0, r5
    67a2:	b007      	add	sp, #28
    67a4:	bd30      	pop	{r4, r5, pc}
		return bt_init();
    67a6:	f7ff f8bb 	bl	5920 <bt_init>
    67aa:	4605      	mov	r5, r0
    67ac:	e7f8      	b.n	67a0 <bt_enable+0x84>
		k_queue_append(&work_q->queue, work);
    67ae:	f1a3 0108 	sub.w	r1, r3, #8
    67b2:	480c      	ldr	r0, [pc, #48]	; (67e4 <bt_enable+0xc8>)
    67b4:	f022 fa36 	bl	28c24 <k_queue_append>
    67b8:	e7f2      	b.n	67a0 <bt_enable+0x84>
		return -ENODEV;
    67ba:	f06f 0512 	mvn.w	r5, #18
    67be:	e7ef      	b.n	67a0 <bt_enable+0x84>
		return -EALREADY;
    67c0:	f06f 0577 	mvn.w	r5, #119	; 0x77
    67c4:	e7ec      	b.n	67a0 <bt_enable+0x84>
    67c6:	bf00      	nop
    67c8:	2000be68 	.word	0x2000be68
    67cc:	2000bed8 	.word	0x2000bed8
    67d0:	20000904 	.word	0x20000904
    67d4:	000065b1 	.word	0x000065b1
    67d8:	200041f8 	.word	0x200041f8
    67dc:	2000090c 	.word	0x2000090c
    67e0:	2000bed4 	.word	0x2000bed4
    67e4:	20003158 	.word	0x20003158

000067e8 <bt_addr_le_is_bonded>:
{
    67e8:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    67ea:	f006 fd51 	bl	d290 <bt_keys_find_addr>
		return keys && keys->keys;
    67ee:	b118      	cbz	r0, 67f8 <bt_addr_le_is_bonded+0x10>
    67f0:	8983      	ldrh	r3, [r0, #12]
    67f2:	b91b      	cbnz	r3, 67fc <bt_addr_le_is_bonded+0x14>
    67f4:	2000      	movs	r0, #0
    67f6:	bd08      	pop	{r3, pc}
    67f8:	2000      	movs	r0, #0
    67fa:	bd08      	pop	{r3, pc}
    67fc:	2001      	movs	r0, #1
}
    67fe:	bd08      	pop	{r3, pc}

00006800 <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    6800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6804:	4605      	mov	r5, r0
    6806:	460c      	mov	r4, r1
    6808:	4617      	mov	r7, r2
    680a:	461e      	mov	r6, r3
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
    680c:	f7fd ff88 	bl	4720 <valid_adv_param>
    6810:	2800      	cmp	r0, #0
    6812:	f000 808d 	beq.w	6930 <bt_le_adv_start+0x130>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6816:	f3bf 8f5b 	dmb	ish
    681a:	4b4b      	ldr	r3, [pc, #300]	; (6948 <bt_le_adv_start+0x148>)
    681c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    681e:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    6822:	f013 0f20 	tst.w	r3, #32
    6826:	f040 8086 	bne.w	6936 <bt_le_adv_start+0x136>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    682a:	463a      	mov	r2, r7
    682c:	4621      	mov	r1, r4
    682e:	f242 0008 	movw	r0, #8200	; 0x2008
    6832:	f7fe fe52 	bl	54da <set_ad>
	if (err) {
    6836:	4604      	mov	r4, r0
    6838:	2800      	cmp	r0, #0
    683a:	d13b      	bne.n	68b4 <bt_le_adv_start+0xb4>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    683c:	2e00      	cmp	r6, #0
    683e:	d03c      	beq.n	68ba <bt_le_adv_start+0xba>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    6840:	9a06      	ldr	r2, [sp, #24]
    6842:	4631      	mov	r1, r6
    6844:	f242 0009 	movw	r0, #8201	; 0x2009
    6848:	f7fe fe47 	bl	54da <set_ad>
		if (err) {
    684c:	4604      	mov	r4, r0
    684e:	bb88      	cbnz	r0, 68b4 <bt_le_adv_start+0xb4>
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    6850:	210f      	movs	r1, #15
    6852:	f242 0006 	movw	r0, #8198	; 0x2006
    6856:	f7fe fa21 	bl	4c9c <bt_hci_cmd_create>
				sizeof(*set_param));
	if (!buf) {
    685a:	4680      	mov	r8, r0
    685c:	2800      	cmp	r0, #0
    685e:	d06d      	beq.n	693c <bt_le_adv_start+0x13c>
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    6860:	210f      	movs	r1, #15
    6862:	3008      	adds	r0, #8
    6864:	f014 fa76 	bl	1ad54 <net_buf_simple_add>
    6868:	4607      	mov	r7, r0

	memset(set_param, 0, sizeof(*set_param));
    686a:	220f      	movs	r2, #15
    686c:	2100      	movs	r1, #0
    686e:	f024 f823 	bl	2a8b8 <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    6872:	886b      	ldrh	r3, [r5, #2]
    6874:	803b      	strh	r3, [r7, #0]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    6876:	88ab      	ldrh	r3, [r5, #4]
    6878:	807b      	strh	r3, [r7, #2]
	set_param->channel_map  = 0x07;
    687a:	2307      	movs	r3, #7
    687c:	737b      	strb	r3, [r7, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    687e:	782b      	ldrb	r3, [r5, #0]
    6880:	f013 0f01 	tst.w	r3, #1
    6884:	d11e      	bne.n	68c4 <bt_le_adv_start+0xc4>
			set_param->own_addr_type = bt_dev.id_addr.type;
		}

		set_param->type = BT_LE_ADV_IND;
	} else {
		if (param->own_addr) {
    6886:	68a8      	ldr	r0, [r5, #8]
    6888:	b378      	cbz	r0, 68ea <bt_le_adv_start+0xea>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    688a:	7943      	ldrb	r3, [r0, #5]
    688c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    6890:	d157      	bne.n	6942 <bt_le_adv_start+0x142>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    6892:	f7fe fd0b 	bl	52ac <set_random_address>
    6896:	4604      	mov	r4, r0
		} else {
			err = le_set_private_addr();
		}

		if (err) {
    6898:	bb5c      	cbnz	r4, 68f2 <bt_le_adv_start+0xf2>
			net_buf_unref(buf);
			return err;
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    689a:	2301      	movs	r3, #1
    689c:	717b      	strb	r3, [r7, #5]

		if (sd) {
    689e:	b366      	cbz	r6, 68fa <bt_le_adv_start+0xfa>
			set_param->type = BT_LE_ADV_SCAN_IND;
    68a0:	2302      	movs	r3, #2
    68a2:	713b      	strb	r3, [r7, #4]
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    68a4:	2200      	movs	r2, #0
    68a6:	4641      	mov	r1, r8
    68a8:	f242 0006 	movw	r0, #8198	; 0x2006
    68ac:	f7fe fa22 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    68b0:	4604      	mov	r4, r0
    68b2:	b328      	cbz	r0, 6900 <bt_le_adv_start+0x100>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    68b4:	4620      	mov	r0, r4
    68b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    68ba:	782b      	ldrb	r3, [r5, #0]
    68bc:	f013 0f01 	tst.w	r3, #1
    68c0:	d0c6      	beq.n	6850 <bt_le_adv_start+0x50>
    68c2:	e7bd      	b.n	6840 <bt_le_adv_start+0x40>
    68c4:	f3bf 8f5b 	dmb	ish
    68c8:	4b1f      	ldr	r3, [pc, #124]	; (6948 <bt_le_adv_start+0x148>)
    68ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    68cc:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(bt_dev.flags,
    68d0:	f013 0f04 	tst.w	r3, #4
    68d4:	d105      	bne.n	68e2 <bt_le_adv_start+0xe2>
			set_param->own_addr_type = bt_dev.id_addr.type;
    68d6:	4b1c      	ldr	r3, [pc, #112]	; (6948 <bt_le_adv_start+0x148>)
    68d8:	781b      	ldrb	r3, [r3, #0]
    68da:	717b      	strb	r3, [r7, #5]
		set_param->type = BT_LE_ADV_IND;
    68dc:	2300      	movs	r3, #0
    68de:	713b      	strb	r3, [r7, #4]
    68e0:	e7e0      	b.n	68a4 <bt_le_adv_start+0xa4>
				set_random_address(&bt_dev.id_addr.a);
    68e2:	481a      	ldr	r0, [pc, #104]	; (694c <bt_le_adv_start+0x14c>)
    68e4:	f7fe fce2 	bl	52ac <set_random_address>
    68e8:	e7f5      	b.n	68d6 <bt_le_adv_start+0xd6>
			err = le_set_private_addr();
    68ea:	f7fe fd0f 	bl	530c <le_set_private_addr>
    68ee:	4604      	mov	r4, r0
    68f0:	e7d2      	b.n	6898 <bt_le_adv_start+0x98>
			net_buf_unref(buf);
    68f2:	4640      	mov	r0, r8
    68f4:	f014 f9e2 	bl	1acbc <net_buf_unref>
			return err;
    68f8:	e7dc      	b.n	68b4 <bt_le_adv_start+0xb4>
			set_param->type = BT_LE_ADV_NONCONN_IND;
    68fa:	2303      	movs	r3, #3
    68fc:	713b      	strb	r3, [r7, #4]
    68fe:	e7d1      	b.n	68a4 <bt_le_adv_start+0xa4>
	err = set_advertise_enable(true);
    6900:	2001      	movs	r0, #1
    6902:	f7fe fd71 	bl	53e8 <set_advertise_enable>
	if (err) {
    6906:	4604      	mov	r4, r0
    6908:	2800      	cmp	r0, #0
    690a:	d1d3      	bne.n	68b4 <bt_le_adv_start+0xb4>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    690c:	782b      	ldrb	r3, [r5, #0]
    690e:	f013 0f02 	tst.w	r3, #2
    6912:	d1cf      	bne.n	68b4 <bt_le_adv_start+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6914:	4b0e      	ldr	r3, [pc, #56]	; (6950 <bt_le_adv_start+0x150>)
    6916:	f3bf 8f5b 	dmb	ish
    691a:	e853 2f00 	ldrex	r2, [r3]
    691e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    6922:	e843 2100 	strex	r1, r2, [r3]
    6926:	2900      	cmp	r1, #0
    6928:	d1f7      	bne.n	691a <bt_le_adv_start+0x11a>
    692a:	f3bf 8f5b 	dmb	ish
    692e:	e7c1      	b.n	68b4 <bt_le_adv_start+0xb4>
		return -EINVAL;
    6930:	f06f 0415 	mvn.w	r4, #21
    6934:	e7be      	b.n	68b4 <bt_le_adv_start+0xb4>
		return -EALREADY;
    6936:	f06f 0477 	mvn.w	r4, #119	; 0x77
    693a:	e7bb      	b.n	68b4 <bt_le_adv_start+0xb4>
		return -ENOBUFS;
    693c:	f06f 0468 	mvn.w	r4, #104	; 0x68
    6940:	e7b8      	b.n	68b4 <bt_le_adv_start+0xb4>
				return -EINVAL;
    6942:	f06f 0415 	mvn.w	r4, #21
    6946:	e7b5      	b.n	68b4 <bt_le_adv_start+0xb4>
    6948:	2000be68 	.word	0x2000be68
    694c:	2000be69 	.word	0x2000be69
    6950:	2000bed8 	.word	0x2000bed8

00006954 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    6954:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6956:	4b16      	ldr	r3, [pc, #88]	; (69b0 <bt_le_adv_stop+0x5c>)
    6958:	f103 0270 	add.w	r2, r3, #112	; 0x70
    695c:	f3bf 8f5b 	dmb	ish
    6960:	e852 1f00 	ldrex	r1, [r2]
    6964:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    6968:	e842 1000 	strex	r0, r1, [r2]
    696c:	2800      	cmp	r0, #0
    696e:	d1f7      	bne.n	6960 <bt_le_adv_stop+0xc>
    6970:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6974:	f3bf 8f5b 	dmb	ish
    6978:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    697a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    697e:	f3c4 1440 	ubfx	r4, r4, #5, #1
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    6982:	b90c      	cbnz	r4, 6988 <bt_le_adv_stop+0x34>
			le_set_private_addr();
		}
	}

	return 0;
}
    6984:	4620      	mov	r0, r4
    6986:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    6988:	2000      	movs	r0, #0
    698a:	f7fe fd2d 	bl	53e8 <set_advertise_enable>
	if (err) {
    698e:	4604      	mov	r4, r0
    6990:	2800      	cmp	r0, #0
    6992:	d1f7      	bne.n	6984 <bt_le_adv_stop+0x30>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6994:	f3bf 8f5b 	dmb	ish
    6998:	4b05      	ldr	r3, [pc, #20]	; (69b0 <bt_le_adv_stop+0x5c>)
    699a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    699c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    69a0:	f3c3 2340 	ubfx	r3, r3, #9, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    69a4:	b90b      	cbnz	r3, 69aa <bt_le_adv_stop+0x56>
	return 0;
    69a6:	461c      	mov	r4, r3
    69a8:	e7ec      	b.n	6984 <bt_le_adv_stop+0x30>
			le_set_private_addr();
    69aa:	f7fe fcaf 	bl	530c <le_set_private_addr>
    69ae:	e7e9      	b.n	6984 <bt_le_adv_stop+0x30>
    69b0:	2000be68 	.word	0x2000be68

000069b4 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    69b4:	b538      	push	{r3, r4, r5, lr}
    69b6:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    69b8:	4808      	ldr	r0, [pc, #32]	; (69dc <bt_buf_get_rx+0x28>)
    69ba:	f014 f911 	bl	1abe0 <net_buf_alloc>
#endif

	if (buf) {
    69be:	4604      	mov	r4, r0
    69c0:	b150      	cbz	r0, 69d8 <bt_buf_get_rx+0x24>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    69c2:	2100      	movs	r1, #0
    69c4:	f014 f967 	bl	1ac96 <net_buf_reserve>
    69c8:	f104 0310 	add.w	r3, r4, #16
    69cc:	89e2      	ldrh	r2, [r4, #14]
    69ce:	4413      	add	r3, r2
    69d0:	3303      	adds	r3, #3
    69d2:	f023 0303 	bic.w	r3, r3, #3
	*(u8_t *)net_buf_user_data(buf) = type;
    69d6:	701d      	strb	r5, [r3, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    69d8:	4620      	mov	r0, r4
    69da:	bd38      	pop	{r3, r4, r5, pc}
    69dc:	2000d728 	.word	0x2000d728

000069e0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    69e0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    69e2:	f04f 0320 	mov.w	r3, #32
    69e6:	f3ef 8211 	mrs	r2, BASEPRI
    69ea:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    69ee:	4b0f      	ldr	r3, [pc, #60]	; (6a2c <bt_buf_get_cmd_complete+0x4c>)
    69f0:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    69f4:	2500      	movs	r5, #0
    69f6:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    69fa:	f382 8811 	msr	BASEPRI, r2
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    69fe:	b17c      	cbz	r4, 6a20 <bt_buf_get_cmd_complete+0x40>
    6a00:	f104 0310 	add.w	r3, r4, #16
    6a04:	89e2      	ldrh	r2, [r4, #14]
    6a06:	4413      	add	r3, r2
    6a08:	3303      	adds	r3, #3
    6a0a:	f023 0303 	bic.w	r3, r3, #3
    6a0e:	2201      	movs	r2, #1
    6a10:	701a      	strb	r2, [r3, #0]
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    6a12:	4629      	mov	r1, r5
    6a14:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    6a16:	4620      	mov	r0, r4
    6a18:	f014 f93d 	bl	1ac96 <net_buf_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    6a1c:	4620      	mov	r0, r4
    6a1e:	bd38      	pop	{r3, r4, r5, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6a20:	4601      	mov	r1, r0
    6a22:	2001      	movs	r0, #1
    6a24:	f7ff ffc6 	bl	69b4 <bt_buf_get_rx>
    6a28:	4604      	mov	r4, r0
    6a2a:	e7f7      	b.n	6a1c <bt_buf_get_cmd_complete+0x3c>
    6a2c:	2000be68 	.word	0x2000be68

00006a30 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    6a30:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    6a32:	4b29      	ldr	r3, [pc, #164]	; (6ad8 <bt_pub_key_gen+0xa8>)
    6a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    6a38:	f003 0306 	and.w	r3, r3, #6
    6a3c:	2b06      	cmp	r3, #6
    6a3e:	d148      	bne.n	6ad2 <bt_pub_key_gen+0xa2>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    6a40:	4b26      	ldr	r3, [pc, #152]	; (6adc <bt_pub_key_gen+0xac>)
    6a42:	681a      	ldr	r2, [r3, #0]
    6a44:	6042      	str	r2, [r0, #4]
	pub_key_cb = new_cb;
    6a46:	6018      	str	r0, [r3, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6a48:	4b25      	ldr	r3, [pc, #148]	; (6ae0 <bt_pub_key_gen+0xb0>)
    6a4a:	f3bf 8f5b 	dmb	ish
    6a4e:	e853 2f00 	ldrex	r2, [r3]
    6a52:	f042 0110 	orr.w	r1, r2, #16
    6a56:	e843 1400 	strex	r4, r1, [r3]
    6a5a:	2c00      	cmp	r4, #0
    6a5c:	d1f7      	bne.n	6a4e <bt_pub_key_gen+0x1e>
    6a5e:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6a62:	f012 0f10 	tst.w	r2, #16
    6a66:	d002      	beq.n	6a6e <bt_pub_key_gen+0x3e>
		return 0;
    6a68:	2600      	movs	r6, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    6a6a:	4630      	mov	r0, r6
    6a6c:	bd70      	pop	{r4, r5, r6, pc}
    6a6e:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6a70:	f3bf 8f5b 	dmb	ish
    6a74:	e853 2f00 	ldrex	r2, [r3]
    6a78:	f022 0208 	bic.w	r2, r2, #8
    6a7c:	e843 2100 	strex	r1, r2, [r3]
    6a80:	2900      	cmp	r1, #0
    6a82:	d1f7      	bne.n	6a74 <bt_pub_key_gen+0x44>
    6a84:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    6a88:	2200      	movs	r2, #0
    6a8a:	4611      	mov	r1, r2
    6a8c:	f242 0025 	movw	r0, #8229	; 0x2025
    6a90:	f7fe f930 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    6a94:	4606      	mov	r6, r0
    6a96:	b910      	cbnz	r0, 6a9e <bt_pub_key_gen+0x6e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6a98:	4b10      	ldr	r3, [pc, #64]	; (6adc <bt_pub_key_gen+0xac>)
    6a9a:	681c      	ldr	r4, [r3, #0]
    6a9c:	e011      	b.n	6ac2 <bt_pub_key_gen+0x92>
    6a9e:	4b10      	ldr	r3, [pc, #64]	; (6ae0 <bt_pub_key_gen+0xb0>)
    6aa0:	f3bf 8f5b 	dmb	ish
    6aa4:	e853 2f00 	ldrex	r2, [r3]
    6aa8:	f022 0210 	bic.w	r2, r2, #16
    6aac:	e843 2100 	strex	r1, r2, [r3]
    6ab0:	2900      	cmp	r1, #0
    6ab2:	d1f7      	bne.n	6aa4 <bt_pub_key_gen+0x74>
    6ab4:	f3bf 8f5b 	dmb	ish
		pub_key_cb = NULL;
    6ab8:	2200      	movs	r2, #0
    6aba:	4b08      	ldr	r3, [pc, #32]	; (6adc <bt_pub_key_gen+0xac>)
    6abc:	601a      	str	r2, [r3, #0]
		return err;
    6abe:	e7d4      	b.n	6a6a <bt_pub_key_gen+0x3a>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6ac0:	6864      	ldr	r4, [r4, #4]
    6ac2:	2c00      	cmp	r4, #0
    6ac4:	d0d1      	beq.n	6a6a <bt_pub_key_gen+0x3a>
		if (cb != new_cb) {
    6ac6:	42ac      	cmp	r4, r5
    6ac8:	d0fa      	beq.n	6ac0 <bt_pub_key_gen+0x90>
			cb->func(NULL);
    6aca:	6823      	ldr	r3, [r4, #0]
    6acc:	2000      	movs	r0, #0
    6ace:	4798      	blx	r3
    6ad0:	e7f6      	b.n	6ac0 <bt_pub_key_gen+0x90>
		return -ENOTSUP;
    6ad2:	f06f 0685 	mvn.w	r6, #133	; 0x85
    6ad6:	e7c8      	b.n	6a6a <bt_pub_key_gen+0x3a>
    6ad8:	2000be68 	.word	0x2000be68
    6adc:	20000900 	.word	0x20000900
    6ae0:	2000bed8 	.word	0x2000bed8

00006ae4 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    6ae4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6ae6:	4b21      	ldr	r3, [pc, #132]	; (6b6c <bt_dh_key_gen+0x88>)
    6ae8:	681b      	ldr	r3, [r3, #0]
    6aea:	bbab      	cbnz	r3, 6b58 <bt_dh_key_gen+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6aec:	f3bf 8f5b 	dmb	ish
    6af0:	4b1f      	ldr	r3, [pc, #124]	; (6b70 <bt_dh_key_gen+0x8c>)
    6af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6af4:	f3bf 8f5b 	dmb	ish
    6af8:	f013 0f10 	tst.w	r3, #16
    6afc:	d130      	bne.n	6b60 <bt_dh_key_gen+0x7c>
    6afe:	f3bf 8f5b 	dmb	ish
    6b02:	4b1b      	ldr	r3, [pc, #108]	; (6b70 <bt_dh_key_gen+0x8c>)
    6b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6b06:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    6b0a:	f013 0f08 	tst.w	r3, #8
    6b0e:	d02a      	beq.n	6b66 <bt_dh_key_gen+0x82>
    6b10:	4604      	mov	r4, r0
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
    6b12:	4b16      	ldr	r3, [pc, #88]	; (6b6c <bt_dh_key_gen+0x88>)
    6b14:	6019      	str	r1, [r3, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    6b16:	2140      	movs	r1, #64	; 0x40
    6b18:	f242 0026 	movw	r0, #8230	; 0x2026
    6b1c:	f7fe f8be 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    6b20:	4605      	mov	r5, r0
    6b22:	b198      	cbz	r0, 6b4c <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    6b24:	2140      	movs	r1, #64	; 0x40
    6b26:	3008      	adds	r0, #8
    6b28:	f014 f914 	bl	1ad54 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    6b2c:	2240      	movs	r2, #64	; 0x40
    6b2e:	4621      	mov	r1, r4
    6b30:	f7f9 fbc6 	bl	2c0 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    6b34:	2200      	movs	r2, #0
    6b36:	4629      	mov	r1, r5
    6b38:	f242 0026 	movw	r0, #8230	; 0x2026
    6b3c:	f7fe f8da 	bl	4cf4 <bt_hci_cmd_send_sync>
	if (err) {
    6b40:	4603      	mov	r3, r0
    6b42:	b158      	cbz	r0, 6b5c <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    6b44:	2100      	movs	r1, #0
    6b46:	4a09      	ldr	r2, [pc, #36]	; (6b6c <bt_dh_key_gen+0x88>)
    6b48:	6011      	str	r1, [r2, #0]
		return err;
    6b4a:	e007      	b.n	6b5c <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    6b4c:	2200      	movs	r2, #0
    6b4e:	4b07      	ldr	r3, [pc, #28]	; (6b6c <bt_dh_key_gen+0x88>)
    6b50:	601a      	str	r2, [r3, #0]
		return -ENOBUFS;
    6b52:	f06f 0368 	mvn.w	r3, #104	; 0x68
    6b56:	e001      	b.n	6b5c <bt_dh_key_gen+0x78>
		return -EBUSY;
    6b58:	f06f 030f 	mvn.w	r3, #15
	}

	return 0;
}
    6b5c:	4618      	mov	r0, r3
    6b5e:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    6b60:	f06f 030f 	mvn.w	r3, #15
    6b64:	e7fa      	b.n	6b5c <bt_dh_key_gen+0x78>
		return -EADDRNOTAVAIL;
    6b66:	f06f 037c 	mvn.w	r3, #124	; 0x7c
    6b6a:	e7f7      	b.n	6b5c <bt_dh_key_gen+0x78>
    6b6c:	200008bc 	.word	0x200008bc
    6b70:	2000be68 	.word	0x2000be68

00006b74 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    6b74:	b538      	push	{r3, r4, r5, lr}
    6b76:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    6b78:	4b06      	ldr	r3, [pc, #24]	; (6b94 <notify_connected+0x20>)
    6b7a:	681c      	ldr	r4, [r3, #0]
    6b7c:	e000      	b.n	6b80 <notify_connected+0xc>
    6b7e:	69a4      	ldr	r4, [r4, #24]
    6b80:	b134      	cbz	r4, 6b90 <notify_connected+0x1c>
		if (cb->connected) {
    6b82:	6823      	ldr	r3, [r4, #0]
    6b84:	2b00      	cmp	r3, #0
    6b86:	d0fa      	beq.n	6b7e <notify_connected+0xa>
			cb->connected(conn, conn->err);
    6b88:	7ae9      	ldrb	r1, [r5, #11]
    6b8a:	4628      	mov	r0, r5
    6b8c:	4798      	blx	r3
    6b8e:	e7f6      	b.n	6b7e <notify_connected+0xa>
		}
	}
}
    6b90:	bd38      	pop	{r3, r4, r5, pc}
    6b92:	bf00      	nop
    6b94:	200009dc 	.word	0x200009dc

00006b98 <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
    6b98:	b538      	push	{r3, r4, r5, lr}
    6b9a:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    6b9c:	4b06      	ldr	r3, [pc, #24]	; (6bb8 <notify_disconnected+0x20>)
    6b9e:	681c      	ldr	r4, [r3, #0]
    6ba0:	e000      	b.n	6ba4 <notify_disconnected+0xc>
    6ba2:	69a4      	ldr	r4, [r4, #24]
    6ba4:	b134      	cbz	r4, 6bb4 <notify_disconnected+0x1c>
		if (cb->disconnected) {
    6ba6:	6863      	ldr	r3, [r4, #4]
    6ba8:	2b00      	cmp	r3, #0
    6baa:	d0fa      	beq.n	6ba2 <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
    6bac:	7ae9      	ldrb	r1, [r5, #11]
    6bae:	4628      	mov	r0, r5
    6bb0:	4798      	blx	r3
    6bb2:	e7f6      	b.n	6ba2 <notify_disconnected+0xa>
		}
	}
}
    6bb4:	bd38      	pop	{r3, r4, r5, pc}
    6bb6:	bf00      	nop
    6bb8:	200009dc 	.word	0x200009dc

00006bbc <tx_free>:
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    6bbc:	2300      	movs	r3, #0
    6bbe:	6043      	str	r3, [r0, #4]
	node->next = list->head;
    6bc0:	4b04      	ldr	r3, [pc, #16]	; (6bd4 <tx_free+0x18>)
    6bc2:	681a      	ldr	r2, [r3, #0]
    6bc4:	6002      	str	r2, [r0, #0]
	list->head = node;
    6bc6:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
    6bc8:	685b      	ldr	r3, [r3, #4]
    6bca:	b103      	cbz	r3, 6bce <tx_free+0x12>
    6bcc:	4770      	bx	lr
		list->tail = list->head;
    6bce:	4b01      	ldr	r3, [pc, #4]	; (6bd4 <tx_free+0x18>)
    6bd0:	6058      	str	r0, [r3, #4]
	sys_slist_prepend(&free_tx, &tx->node);
}
    6bd2:	e7fb      	b.n	6bcc <tx_free+0x10>
    6bd4:	20000b7c 	.word	0x20000b7c

00006bd8 <add_pending_tx>:
		}
	}
}

static sys_snode_t *add_pending_tx(struct bt_conn *conn, bt_conn_tx_cb_t cb)
{
    6bd8:	b410      	push	{r4}
	sys_snode_t *node = list->head;
    6bda:	4a0f      	ldr	r2, [pc, #60]	; (6c18 <add_pending_tx+0x40>)
    6bdc:	6813      	ldr	r3, [r2, #0]
	list->head = node->next;
    6bde:	681c      	ldr	r4, [r3, #0]
    6be0:	6014      	str	r4, [r2, #0]
	if (list->tail == node) {
    6be2:	6852      	ldr	r2, [r2, #4]
    6be4:	4293      	cmp	r3, r2
    6be6:	d011      	beq.n	6c0c <add_pending_tx+0x34>
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    6be8:	6059      	str	r1, [r3, #4]
	__asm__ volatile(
    6bea:	f04f 0220 	mov.w	r2, #32
    6bee:	f3ef 8111 	mrs	r1, BASEPRI
    6bf2:	f382 8811 	msr	BASEPRI, r2
	node->next = NULL;
    6bf6:	2200      	movs	r2, #0
    6bf8:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    6bfa:	6982      	ldr	r2, [r0, #24]
    6bfc:	b14a      	cbz	r2, 6c12 <add_pending_tx+0x3a>
		list->tail->next = node;
    6bfe:	6013      	str	r3, [r2, #0]
		list->tail = node;
    6c00:	6183      	str	r3, [r0, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6c02:	f381 8811 	msr	BASEPRI, r1
	key = irq_lock();
	sys_slist_append(&conn->tx_pending, node);
	irq_unlock(key);

	return node;
}
    6c06:	4618      	mov	r0, r3
    6c08:	bc10      	pop	{r4}
    6c0a:	4770      	bx	lr
		list->tail = list->head;
    6c0c:	4a02      	ldr	r2, [pc, #8]	; (6c18 <add_pending_tx+0x40>)
    6c0e:	6054      	str	r4, [r2, #4]
    6c10:	e7ea      	b.n	6be8 <add_pending_tx+0x10>
		list->tail = node;
    6c12:	6183      	str	r3, [r0, #24]
		list->head = node;
    6c14:	6143      	str	r3, [r0, #20]
    6c16:	e7f4      	b.n	6c02 <add_pending_tx+0x2a>
    6c18:	20000b7c 	.word	0x20000b7c

00006c1c <remove_pending_tx>:

static void remove_pending_tx(struct bt_conn *conn, sys_snode_t *node)
{
    6c1c:	b510      	push	{r4, lr}
	__asm__ volatile(
    6c1e:	f04f 0320 	mov.w	r3, #32
    6c22:	f3ef 8411 	mrs	r4, BASEPRI
    6c26:	f383 8811 	msr	BASEPRI, r3
	return list->head;
    6c2a:	6943      	ldr	r3, [r0, #20]
	sys_snode_t *prev = NULL;
    6c2c:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    6c2e:	b163      	cbz	r3, 6c4a <remove_pending_tx+0x2e>
		if (test == node) {
    6c30:	4299      	cmp	r1, r3
    6c32:	d002      	beq.n	6c3a <remove_pending_tx+0x1e>
		prev = test;
    6c34:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    6c36:	681b      	ldr	r3, [r3, #0]
    6c38:	e7f9      	b.n	6c2e <remove_pending_tx+0x12>
	if (!prev_node) {
    6c3a:	b162      	cbz	r2, 6c56 <remove_pending_tx+0x3a>
		prev_node->next = node->next;
    6c3c:	680b      	ldr	r3, [r1, #0]
    6c3e:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    6c40:	6983      	ldr	r3, [r0, #24]
    6c42:	4299      	cmp	r1, r3
    6c44:	d00e      	beq.n	6c64 <remove_pending_tx+0x48>
	node->next = NULL;
    6c46:	2300      	movs	r3, #0
    6c48:	600b      	str	r3, [r1, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6c4a:	f384 8811 	msr	BASEPRI, r4

	key = irq_lock();
	sys_slist_find_and_remove(&conn->tx_pending, node);
	irq_unlock(key);

	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    6c4e:	4608      	mov	r0, r1
    6c50:	f7ff ffb4 	bl	6bbc <tx_free>
    6c54:	bd10      	pop	{r4, pc}
		list->head = node->next;
    6c56:	680b      	ldr	r3, [r1, #0]
    6c58:	6143      	str	r3, [r0, #20]
		if (list->tail == node) {
    6c5a:	6982      	ldr	r2, [r0, #24]
    6c5c:	4291      	cmp	r1, r2
    6c5e:	d1f2      	bne.n	6c46 <remove_pending_tx+0x2a>
			list->tail = list->head;
    6c60:	6183      	str	r3, [r0, #24]
    6c62:	e7f0      	b.n	6c46 <remove_pending_tx+0x2a>
			list->tail = prev_node;
    6c64:	6182      	str	r2, [r0, #24]
    6c66:	e7ee      	b.n	6c46 <remove_pending_tx+0x2a>

00006c68 <bt_conn_set_param_le>:

#if defined(CONFIG_BT_CENTRAL)
static void bt_conn_set_param_le(struct bt_conn *conn,
				 const struct bt_le_conn_param *param)
{
	conn->le.interval_max = param->interval_max;
    6c68:	884b      	ldrh	r3, [r1, #2]
    6c6a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	conn->le.latency = param->latency;
    6c6e:	888b      	ldrh	r3, [r1, #4]
    6c70:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
	conn->le.timeout = param->timeout;
    6c74:	88cb      	ldrh	r3, [r1, #6]
    6c76:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    6c7a:	4770      	bx	lr

00006c7c <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
    6c7c:	89c3      	ldrh	r3, [r0, #14]
    6c7e:	b903      	cbnz	r3, 6c82 <bt_conn_reset_rx_state+0x6>
    6c80:	4770      	bx	lr
{
    6c82:	b510      	push	{r4, lr}
    6c84:	4604      	mov	r4, r0
	net_buf_unref(conn->rx);
    6c86:	6900      	ldr	r0, [r0, #16]
    6c88:	f014 f818 	bl	1acbc <net_buf_unref>
	conn->rx = NULL;
    6c8c:	2300      	movs	r3, #0
    6c8e:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    6c90:	81e3      	strh	r3, [r4, #14]
    6c92:	bd10      	pop	{r4, pc}

00006c94 <conn_new>:
{
    6c94:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6c96:	2300      	movs	r3, #0
    6c98:	b1ab      	cbz	r3, 6cc6 <conn_new+0x32>
	struct bt_conn *conn = NULL;
    6c9a:	2400      	movs	r4, #0
	if (!conn) {
    6c9c:	b18c      	cbz	r4, 6cc2 <conn_new+0x2e>
	memset(conn, 0, sizeof(*conn));
    6c9e:	229c      	movs	r2, #156	; 0x9c
    6ca0:	2100      	movs	r1, #0
    6ca2:	4620      	mov	r0, r4
    6ca4:	f023 fe08 	bl	2a8b8 <memset>
	atomic_set(&conn->ref, 1);
    6ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6cac:	2201      	movs	r2, #1
    6cae:	f3bf 8f5b 	dmb	ish
    6cb2:	e853 1f00 	ldrex	r1, [r3]
    6cb6:	e843 2000 	strex	r0, r2, [r3]
    6cba:	2800      	cmp	r0, #0
    6cbc:	d1f9      	bne.n	6cb2 <conn_new+0x1e>
    6cbe:	f3bf 8f5b 	dmb	ish
}
    6cc2:	4620      	mov	r0, r4
    6cc4:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    6cc6:	229c      	movs	r2, #156	; 0x9c
    6cc8:	fb02 f203 	mul.w	r2, r2, r3
    6ccc:	3240      	adds	r2, #64	; 0x40
    6cce:	4907      	ldr	r1, [pc, #28]	; (6cec <conn_new+0x58>)
    6cd0:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6cd2:	f3bf 8f5b 	dmb	ish
    6cd6:	6852      	ldr	r2, [r2, #4]
    6cd8:	f3bf 8f5b 	dmb	ish
    6cdc:	b10a      	cbz	r2, 6ce2 <conn_new+0x4e>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6cde:	3301      	adds	r3, #1
    6ce0:	e7da      	b.n	6c98 <conn_new+0x4>
			conn = &conns[i];
    6ce2:	229c      	movs	r2, #156	; 0x9c
    6ce4:	fb02 1403 	mla	r4, r2, r3, r1
			break;
    6ce8:	e7d8      	b.n	6c9c <conn_new+0x8>
    6cea:	bf00      	nop
    6cec:	200009f0 	.word	0x200009f0

00006cf0 <bt_conn_get_pkts>:
}
    6cf0:	4800      	ldr	r0, [pc, #0]	; (6cf4 <bt_conn_get_pkts+0x4>)
    6cf2:	4770      	bx	lr
    6cf4:	2000bef4 	.word	0x2000bef4

00006cf8 <process_unack_tx>:
{
    6cf8:	b510      	push	{r4, lr}
    6cfa:	4604      	mov	r4, r0
    6cfc:	e009      	b.n	6d12 <process_unack_tx+0x1a>
    6cfe:	f383 8811 	msr	BASEPRI, r3
		if (!node) {
    6d02:	b1b0      	cbz	r0, 6d32 <process_unack_tx+0x3a>
		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    6d04:	f7ff ff5a 	bl	6bbc <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
    6d08:	4620      	mov	r0, r4
    6d0a:	f7ff fff1 	bl	6cf0 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6d0e:	f022 fb20 	bl	29352 <_impl_k_sem_give>
	__asm__ volatile(
    6d12:	f04f 0220 	mov.w	r2, #32
    6d16:	f3ef 8311 	mrs	r3, BASEPRI
    6d1a:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    6d1e:	6960      	ldr	r0, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    6d20:	2800      	cmp	r0, #0
    6d22:	d0ec      	beq.n	6cfe <process_unack_tx+0x6>
	list->head = node->next;
    6d24:	6802      	ldr	r2, [r0, #0]
    6d26:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    6d28:	69a1      	ldr	r1, [r4, #24]
    6d2a:	4288      	cmp	r0, r1
    6d2c:	d1e7      	bne.n	6cfe <process_unack_tx+0x6>
		list->tail = list->head;
    6d2e:	61a2      	str	r2, [r4, #24]
    6d30:	e7e5      	b.n	6cfe <process_unack_tx+0x6>
    6d32:	bd10      	pop	{r4, pc}

00006d34 <notify_le_param_updated>:
{
    6d34:	b570      	push	{r4, r5, r6, lr}
    6d36:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6d38:	4b08      	ldr	r3, [pc, #32]	; (6d5c <notify_le_param_updated+0x28>)
    6d3a:	681c      	ldr	r4, [r3, #0]
    6d3c:	e000      	b.n	6d40 <notify_le_param_updated+0xc>
    6d3e:	69a4      	ldr	r4, [r4, #24]
    6d40:	b15c      	cbz	r4, 6d5a <notify_le_param_updated+0x26>
		if (cb->le_param_updated) {
    6d42:	68e6      	ldr	r6, [r4, #12]
    6d44:	2e00      	cmp	r6, #0
    6d46:	d0fa      	beq.n	6d3e <notify_le_param_updated+0xa>
			cb->le_param_updated(conn, conn->le.interval,
    6d48:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    6d4c:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    6d50:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    6d54:	4628      	mov	r0, r5
    6d56:	47b0      	blx	r6
    6d58:	e7f1      	b.n	6d3e <notify_le_param_updated+0xa>
}
    6d5a:	bd70      	pop	{r4, r5, r6, pc}
    6d5c:	200009dc 	.word	0x200009dc

00006d60 <le_param_req>:
{
    6d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d62:	4606      	mov	r6, r0
    6d64:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6d66:	4608      	mov	r0, r1
    6d68:	f7fe fc02 	bl	5570 <bt_le_conn_params_valid>
    6d6c:	4607      	mov	r7, r0
    6d6e:	b198      	cbz	r0, 6d98 <le_param_req+0x38>
	for (cb = callback_list; cb; cb = cb->_next) {
    6d70:	4b0a      	ldr	r3, [pc, #40]	; (6d9c <le_param_req+0x3c>)
    6d72:	681c      	ldr	r4, [r3, #0]
    6d74:	e000      	b.n	6d78 <le_param_req+0x18>
    6d76:	69a4      	ldr	r4, [r4, #24]
    6d78:	b174      	cbz	r4, 6d98 <le_param_req+0x38>
		if (!cb->le_param_req) {
    6d7a:	68a3      	ldr	r3, [r4, #8]
    6d7c:	2b00      	cmp	r3, #0
    6d7e:	d0fa      	beq.n	6d76 <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
    6d80:	4629      	mov	r1, r5
    6d82:	4630      	mov	r0, r6
    6d84:	4798      	blx	r3
    6d86:	b130      	cbz	r0, 6d96 <le_param_req+0x36>
		if (!bt_le_conn_params_valid(param)) {
    6d88:	4628      	mov	r0, r5
    6d8a:	f7fe fbf1 	bl	5570 <bt_le_conn_params_valid>
    6d8e:	2800      	cmp	r0, #0
    6d90:	d1f1      	bne.n	6d76 <le_param_req+0x16>
			return false;
    6d92:	4607      	mov	r7, r0
    6d94:	e000      	b.n	6d98 <le_param_req+0x38>
			return false;
    6d96:	4607      	mov	r7, r0
}
    6d98:	4638      	mov	r0, r7
    6d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d9c:	200009dc 	.word	0x200009dc

00006da0 <bt_conn_identity_resolved>:
{
    6da0:	b570      	push	{r4, r5, r6, lr}
    6da2:	4605      	mov	r5, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6da4:	78c3      	ldrb	r3, [r0, #3]
    6da6:	b923      	cbnz	r3, 6db2 <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
    6da8:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    6dac:	4b08      	ldr	r3, [pc, #32]	; (6dd0 <bt_conn_identity_resolved+0x30>)
    6dae:	681c      	ldr	r4, [r3, #0]
    6db0:	e003      	b.n	6dba <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
    6db2:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    6db6:	e7f9      	b.n	6dac <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
    6db8:	69a4      	ldr	r4, [r4, #24]
    6dba:	b144      	cbz	r4, 6dce <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
    6dbc:	6923      	ldr	r3, [r4, #16]
    6dbe:	2b00      	cmp	r3, #0
    6dc0:	d0fa      	beq.n	6db8 <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    6dc2:	f105 0248 	add.w	r2, r5, #72	; 0x48
    6dc6:	4631      	mov	r1, r6
    6dc8:	4628      	mov	r0, r5
    6dca:	4798      	blx	r3
    6dcc:	e7f4      	b.n	6db8 <bt_conn_identity_resolved+0x18>
}
    6dce:	bd70      	pop	{r4, r5, r6, pc}
    6dd0:	200009dc 	.word	0x200009dc

00006dd4 <bt_conn_le_start_encryption>:
{
    6dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6dd8:	4680      	mov	r8, r0
    6dda:	4617      	mov	r7, r2
    6ddc:	461c      	mov	r4, r3
    6dde:	9d08      	ldr	r5, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    6de0:	211c      	movs	r1, #28
    6de2:	f242 0019 	movw	r0, #8217	; 0x2019
    6de6:	f7fd ff59 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    6dea:	b338      	cbz	r0, 6e3c <bt_conn_le_start_encryption+0x68>
    6dec:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    6dee:	211c      	movs	r1, #28
    6df0:	3008      	adds	r0, #8
    6df2:	f013 ffaf 	bl	1ad54 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    6df6:	f8b8 2000 	ldrh.w	r2, [r8]
    6dfa:	4603      	mov	r3, r0
    6dfc:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    6e00:	f8c0 7002 	str.w	r7, [r0, #2]
    6e04:	605c      	str	r4, [r3, #4]
	cp->ediv = ediv;
    6e06:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    6e0a:	8143      	strh	r3, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    6e0c:	f100 040c 	add.w	r4, r0, #12
    6e10:	462a      	mov	r2, r5
    6e12:	9907      	ldr	r1, [sp, #28]
    6e14:	4620      	mov	r0, r4
    6e16:	f7f9 fa53 	bl	2c0 <memcpy>
	if (len < sizeof(cp->ltk)) {
    6e1a:	2d0f      	cmp	r5, #15
    6e1c:	d907      	bls.n	6e2e <bt_conn_le_start_encryption+0x5a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    6e1e:	2200      	movs	r2, #0
    6e20:	4631      	mov	r1, r6
    6e22:	f242 0019 	movw	r0, #8217	; 0x2019
    6e26:	f7fd ff65 	bl	4cf4 <bt_hci_cmd_send_sync>
    6e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    6e2e:	f1c5 0210 	rsb	r2, r5, #16
    6e32:	2100      	movs	r1, #0
    6e34:	1960      	adds	r0, r4, r5
    6e36:	f023 fd3f 	bl	2a8b8 <memset>
    6e3a:	e7f0      	b.n	6e1e <bt_conn_le_start_encryption+0x4a>
		return -ENOBUFS;
    6e3c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006e44 <start_security>:
{
    6e44:	b530      	push	{r4, r5, lr}
    6e46:	b085      	sub	sp, #20
    6e48:	4604      	mov	r4, r0
	switch (conn->role) {
    6e4a:	78c3      	ldrb	r3, [r0, #3]
    6e4c:	b123      	cbz	r3, 6e58 <start_security+0x14>
    6e4e:	2b01      	cmp	r3, #1
    6e50:	d052      	beq.n	6ef8 <start_security+0xb4>
		return -EINVAL;
    6e52:	f06f 0015 	mvn.w	r0, #21
    6e56:	e051      	b.n	6efc <start_security+0xb8>
		if (!conn->le.keys) {
    6e58:	6f03      	ldr	r3, [r0, #112]	; 0x70
    6e5a:	b353      	cbz	r3, 6eb2 <start_security+0x6e>
		if (!conn->le.keys ||
    6e5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6e5e:	2b00      	cmp	r3, #0
    6e60:	d036      	beq.n	6ed0 <start_security+0x8c>
		    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
    6e62:	899a      	ldrh	r2, [r3, #12]
		if (!conn->le.keys ||
    6e64:	f012 0f24 	tst.w	r2, #36	; 0x24
    6e68:	d032      	beq.n	6ed0 <start_security+0x8c>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    6e6a:	7a62      	ldrb	r2, [r4, #9]
    6e6c:	2a02      	cmp	r2, #2
    6e6e:	d833      	bhi.n	6ed8 <start_security+0x94>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    6e70:	7a63      	ldrb	r3, [r4, #9]
    6e72:	2b03      	cmp	r3, #3
    6e74:	d90d      	bls.n	6e92 <start_security+0x4e>
		    !atomic_test_bit(conn->le.keys->flags,
    6e76:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6e78:	f3bf 8f5b 	dmb	ish
    6e7c:	689b      	ldr	r3, [r3, #8]
    6e7e:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    6e82:	f013 0f01 	tst.w	r3, #1
    6e86:	d104      	bne.n	6e92 <start_security+0x4e>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    6e88:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6e8a:	899b      	ldrh	r3, [r3, #12]
				     BT_KEYS_AUTHENTICATED) &&
    6e8c:	f013 0f20 	tst.w	r3, #32
    6e90:	d02e      	beq.n	6ef0 <start_security+0xac>
						   conn->le.keys->ltk.rand,
    6e92:	6f23      	ldr	r3, [r4, #112]	; 0x70
						   conn->le.keys->ltk.val,
    6e94:	f103 021a 	add.w	r2, r3, #26
						   conn->le.keys->enc_size);
    6e98:	79dd      	ldrb	r5, [r3, #7]
		return bt_conn_le_start_encryption(conn,
    6e9a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    6e9e:	9502      	str	r5, [sp, #8]
    6ea0:	9201      	str	r2, [sp, #4]
    6ea2:	8b1b      	ldrh	r3, [r3, #24]
    6ea4:	9300      	str	r3, [sp, #0]
    6ea6:	4602      	mov	r2, r0
    6ea8:	460b      	mov	r3, r1
    6eaa:	4620      	mov	r0, r4
    6eac:	f7ff ff92 	bl	6dd4 <bt_conn_le_start_encryption>
    6eb0:	e024      	b.n	6efc <start_security+0xb8>
						     &conn->le.dst);
    6eb2:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    6eb6:	4629      	mov	r1, r5
    6eb8:	2020      	movs	r0, #32
    6eba:	f006 f96d 	bl	d198 <bt_keys_find>
    6ebe:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    6ec0:	2800      	cmp	r0, #0
    6ec2:	d1cb      	bne.n	6e5c <start_security+0x18>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    6ec4:	4629      	mov	r1, r5
    6ec6:	2004      	movs	r0, #4
    6ec8:	f006 f966 	bl	d198 <bt_keys_find>
    6ecc:	6720      	str	r0, [r4, #112]	; 0x70
    6ece:	e7c5      	b.n	6e5c <start_security+0x18>
			return bt_smp_send_pairing_req(conn);
    6ed0:	4620      	mov	r0, r4
    6ed2:	f005 ff14 	bl	ccfe <bt_smp_send_pairing_req>
    6ed6:	e011      	b.n	6efc <start_security+0xb8>
    6ed8:	f3bf 8f5b 	dmb	ish
    6edc:	689b      	ldr	r3, [r3, #8]
    6ede:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    6ee2:	f013 0f01 	tst.w	r3, #1
    6ee6:	d1c3      	bne.n	6e70 <start_security+0x2c>
			return bt_smp_send_pairing_req(conn);
    6ee8:	4620      	mov	r0, r4
    6eea:	f005 ff08 	bl	ccfe <bt_smp_send_pairing_req>
    6eee:	e005      	b.n	6efc <start_security+0xb8>
			return bt_smp_send_pairing_req(conn);
    6ef0:	4620      	mov	r0, r4
    6ef2:	f005 ff04 	bl	ccfe <bt_smp_send_pairing_req>
    6ef6:	e001      	b.n	6efc <start_security+0xb8>
		return bt_smp_send_security_req(conn);
    6ef8:	f005 feae 	bl	cc58 <bt_smp_send_security_req>
}
    6efc:	b005      	add	sp, #20
    6efe:	bd30      	pop	{r4, r5, pc}

00006f00 <bt_conn_security_changed>:
{
    6f00:	b538      	push	{r3, r4, r5, lr}
    6f02:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6f04:	4b06      	ldr	r3, [pc, #24]	; (6f20 <bt_conn_security_changed+0x20>)
    6f06:	681c      	ldr	r4, [r3, #0]
    6f08:	e000      	b.n	6f0c <bt_conn_security_changed+0xc>
    6f0a:	69a4      	ldr	r4, [r4, #24]
    6f0c:	b134      	cbz	r4, 6f1c <bt_conn_security_changed+0x1c>
		if (cb->security_changed) {
    6f0e:	6963      	ldr	r3, [r4, #20]
    6f10:	2b00      	cmp	r3, #0
    6f12:	d0fa      	beq.n	6f0a <bt_conn_security_changed+0xa>
			cb->security_changed(conn, conn->sec_level);
    6f14:	7a29      	ldrb	r1, [r5, #8]
    6f16:	4628      	mov	r0, r5
    6f18:	4798      	blx	r3
    6f1a:	e7f6      	b.n	6f0a <bt_conn_security_changed+0xa>
}
    6f1c:	bd38      	pop	{r3, r4, r5, pc}
    6f1e:	bf00      	nop
    6f20:	200009dc 	.word	0x200009dc

00006f24 <bt_conn_security>:
	if (conn->state != BT_CONN_CONNECTED) {
    6f24:	7b03      	ldrb	r3, [r0, #12]
    6f26:	2b03      	cmp	r3, #3
    6f28:	d112      	bne.n	6f50 <bt_conn_security+0x2c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    6f2a:	7a03      	ldrb	r3, [r0, #8]
    6f2c:	428b      	cmp	r3, r1
    6f2e:	d212      	bcs.n	6f56 <bt_conn_security+0x32>
    6f30:	7a43      	ldrb	r3, [r0, #9]
    6f32:	4299      	cmp	r1, r3
    6f34:	d801      	bhi.n	6f3a <bt_conn_security+0x16>
		return 0;
    6f36:	2300      	movs	r3, #0
    6f38:	e00e      	b.n	6f58 <bt_conn_security+0x34>
{
    6f3a:	b510      	push	{r4, lr}
    6f3c:	4604      	mov	r4, r0
	conn->required_sec_level = sec;
    6f3e:	7241      	strb	r1, [r0, #9]
	err = start_security(conn);
    6f40:	f7ff ff80 	bl	6e44 <start_security>
	if (err) {
    6f44:	4603      	mov	r3, r0
    6f46:	b108      	cbz	r0, 6f4c <bt_conn_security+0x28>
		conn->required_sec_level = conn->sec_level;
    6f48:	7a22      	ldrb	r2, [r4, #8]
    6f4a:	7262      	strb	r2, [r4, #9]
}
    6f4c:	4618      	mov	r0, r3
    6f4e:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    6f50:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    6f54:	e000      	b.n	6f58 <bt_conn_security+0x34>
		return 0;
    6f56:	2300      	movs	r3, #0
}
    6f58:	4618      	mov	r0, r3
    6f5a:	4770      	bx	lr

00006f5c <bt_conn_cb_register>:
	cb->_next = callback_list;
    6f5c:	4b02      	ldr	r3, [pc, #8]	; (6f68 <bt_conn_cb_register+0xc>)
    6f5e:	681a      	ldr	r2, [r3, #0]
    6f60:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    6f62:	6018      	str	r0, [r3, #0]
    6f64:	4770      	bx	lr
    6f66:	bf00      	nop
    6f68:	200009dc 	.word	0x200009dc

00006f6c <bt_conn_recv>:
{
    6f6c:	b570      	push	{r4, r5, r6, lr}
    6f6e:	4605      	mov	r5, r0
    6f70:	460c      	mov	r4, r1
	switch (flags) {
    6f72:	2a01      	cmp	r2, #1
    6f74:	d01a      	beq.n	6fac <bt_conn_recv+0x40>
    6f76:	2a02      	cmp	r2, #2
    6f78:	d149      	bne.n	700e <bt_conn_recv+0xa2>
		hdr = (void *)buf->data;
    6f7a:	688b      	ldr	r3, [r1, #8]
		len = sys_le16_to_cpu(hdr->len);
    6f7c:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    6f7e:	89c3      	ldrh	r3, [r0, #14]
    6f80:	b97b      	cbnz	r3, 6fa2 <bt_conn_recv+0x36>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    6f82:	89a3      	ldrh	r3, [r4, #12]
    6f84:	1af3      	subs	r3, r6, r3
    6f86:	3304      	adds	r3, #4
    6f88:	b29b      	uxth	r3, r3
    6f8a:	81eb      	strh	r3, [r5, #14]
		if (conn->rx_len) {
    6f8c:	b963      	cbnz	r3, 6fa8 <bt_conn_recv+0x3c>
	hdr = (void *)buf->data;
    6f8e:	68a3      	ldr	r3, [r4, #8]
	len = sys_le16_to_cpu(hdr->len);
    6f90:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    6f92:	3304      	adds	r3, #4
    6f94:	89a2      	ldrh	r2, [r4, #12]
    6f96:	4293      	cmp	r3, r2
    6f98:	d03f      	beq.n	701a <bt_conn_recv+0xae>
		net_buf_unref(buf);
    6f9a:	4620      	mov	r0, r4
    6f9c:	f013 fe8e 	bl	1acbc <net_buf_unref>
		return;
    6fa0:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    6fa2:	f7ff fe6b 	bl	6c7c <bt_conn_reset_rx_state>
    6fa6:	e7ec      	b.n	6f82 <bt_conn_recv+0x16>
			conn->rx = buf;
    6fa8:	612c      	str	r4, [r5, #16]
			return;
    6faa:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    6fac:	89c3      	ldrh	r3, [r0, #14]
    6fae:	b1db      	cbz	r3, 6fe8 <bt_conn_recv+0x7c>
		if (buf->len > conn->rx_len) {
    6fb0:	898e      	ldrh	r6, [r1, #12]
    6fb2:	42b3      	cmp	r3, r6
    6fb4:	d31e      	bcc.n	6ff4 <bt_conn_recv+0x88>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    6fb6:	6900      	ldr	r0, [r0, #16]
    6fb8:	3008      	adds	r0, #8
    6fba:	f013 ff34 	bl	1ae26 <net_buf_simple_tailroom>
    6fbe:	4286      	cmp	r6, r0
    6fc0:	d81e      	bhi.n	7000 <bt_conn_recv+0x94>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    6fc2:	6928      	ldr	r0, [r5, #16]
    6fc4:	89a2      	ldrh	r2, [r4, #12]
    6fc6:	68a1      	ldr	r1, [r4, #8]
    6fc8:	3008      	adds	r0, #8
    6fca:	f013 fec9 	bl	1ad60 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    6fce:	89a2      	ldrh	r2, [r4, #12]
    6fd0:	89eb      	ldrh	r3, [r5, #14]
    6fd2:	1a9b      	subs	r3, r3, r2
    6fd4:	81eb      	strh	r3, [r5, #14]
		net_buf_unref(buf);
    6fd6:	4620      	mov	r0, r4
    6fd8:	f013 fe70 	bl	1acbc <net_buf_unref>
		if (conn->rx_len) {
    6fdc:	89eb      	ldrh	r3, [r5, #14]
    6fde:	bb03      	cbnz	r3, 7022 <bt_conn_recv+0xb6>
		buf = conn->rx;
    6fe0:	692c      	ldr	r4, [r5, #16]
		conn->rx = NULL;
    6fe2:	612b      	str	r3, [r5, #16]
		conn->rx_len = 0;
    6fe4:	81eb      	strh	r3, [r5, #14]
		break;
    6fe6:	e7d2      	b.n	6f8e <bt_conn_recv+0x22>
			bt_conn_reset_rx_state(conn);
    6fe8:	f7ff fe48 	bl	6c7c <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    6fec:	4620      	mov	r0, r4
    6fee:	f013 fe65 	bl	1acbc <net_buf_unref>
			return;
    6ff2:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    6ff4:	f7ff fe42 	bl	6c7c <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    6ff8:	4620      	mov	r0, r4
    6ffa:	f013 fe5f 	bl	1acbc <net_buf_unref>
			return;
    6ffe:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    7000:	4628      	mov	r0, r5
    7002:	f7ff fe3b 	bl	6c7c <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    7006:	4620      	mov	r0, r4
    7008:	f013 fe58 	bl	1acbc <net_buf_unref>
			return;
    700c:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_reset_rx_state(conn);
    700e:	f7ff fe35 	bl	6c7c <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    7012:	4620      	mov	r0, r4
    7014:	f013 fe52 	bl	1acbc <net_buf_unref>
		return;
    7018:	bd70      	pop	{r4, r5, r6, pc}
	bt_l2cap_recv(conn, buf);
    701a:	4621      	mov	r1, r4
    701c:	4628      	mov	r0, r5
    701e:	f001 fd06 	bl	8a2e <bt_l2cap_recv>
    7022:	bd70      	pop	{r4, r5, r6, pc}

00007024 <bt_conn_send_cb>:
{
    7024:	b570      	push	{r4, r5, r6, lr}
    7026:	4605      	mov	r5, r0
    7028:	460c      	mov	r4, r1
    702a:	4616      	mov	r6, r2
	pool = net_buf_pool_get(buf->pool_id);
    702c:	7988      	ldrb	r0, [r1, #6]
    702e:	f013 fdcb 	bl	1abc8 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    7032:	8ac3      	ldrh	r3, [r0, #22]
    7034:	2b03      	cmp	r3, #3
    7036:	d911      	bls.n	705c <bt_conn_send_cb+0x38>
	if (conn->state != BT_CONN_CONNECTED) {
    7038:	7b2b      	ldrb	r3, [r5, #12]
    703a:	2b03      	cmp	r3, #3
    703c:	d114      	bne.n	7068 <bt_conn_send_cb+0x44>
    703e:	f104 0310 	add.w	r3, r4, #16
    7042:	89e2      	ldrh	r2, [r4, #14]
    7044:	4413      	add	r3, r2
    7046:	3303      	adds	r3, #3
    7048:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(buf)->cb = cb;
    704c:	601e      	str	r6, [r3, #0]
	net_buf_put(&conn->tx_queue, buf);
    704e:	4621      	mov	r1, r4
    7050:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    7054:	f013 fe24 	bl	1aca0 <net_buf_put>
	return 0;
    7058:	2000      	movs	r0, #0
}
    705a:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    705c:	4620      	mov	r0, r4
    705e:	f013 fe2d 	bl	1acbc <net_buf_unref>
		return -EINVAL;
    7062:	f06f 0015 	mvn.w	r0, #21
    7066:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    7068:	4620      	mov	r0, r4
    706a:	f013 fe27 	bl	1acbc <net_buf_unref>
		return -ENOTCONN;
    706e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7072:	bd70      	pop	{r4, r5, r6, pc}

00007074 <bt_conn_notify_tx>:
{
    7074:	b538      	push	{r3, r4, r5, lr}
    7076:	4605      	mov	r5, r0
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    7078:	e002      	b.n	7080 <bt_conn_notify_tx+0xc>
		tx_free(tx);
    707a:	4620      	mov	r0, r4
    707c:	f7ff fd9e 	bl	6bbc <tx_free>
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    7080:	2100      	movs	r1, #0
    7082:	f105 001c 	add.w	r0, r5, #28
    7086:	f021 fdf5 	bl	28c74 <k_queue_get>
    708a:	4604      	mov	r4, r0
    708c:	b128      	cbz	r0, 709a <bt_conn_notify_tx+0x26>
		if (tx->cb) {
    708e:	6863      	ldr	r3, [r4, #4]
    7090:	2b00      	cmp	r3, #0
    7092:	d0f2      	beq.n	707a <bt_conn_notify_tx+0x6>
			tx->cb(conn);
    7094:	4628      	mov	r0, r5
    7096:	4798      	blx	r3
    7098:	e7ef      	b.n	707a <bt_conn_notify_tx+0x6>
}
    709a:	bd38      	pop	{r3, r4, r5, pc}

0000709c <notify_tx>:
{
    709c:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    709e:	2400      	movs	r4, #0
    70a0:	b104      	cbz	r4, 70a4 <notify_tx+0x8>
}
    70a2:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    70a4:	239c      	movs	r3, #156	; 0x9c
    70a6:	fb03 f304 	mul.w	r3, r3, r4
    70aa:	3340      	adds	r3, #64	; 0x40
    70ac:	4a0b      	ldr	r2, [pc, #44]	; (70dc <notify_tx+0x40>)
    70ae:	4413      	add	r3, r2
    70b0:	f3bf 8f5b 	dmb	ish
    70b4:	685b      	ldr	r3, [r3, #4]
    70b6:	f3bf 8f5b 	dmb	ish
    70ba:	b13b      	cbz	r3, 70cc <notify_tx+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    70bc:	239c      	movs	r3, #156	; 0x9c
    70be:	fb03 2304 	mla	r3, r3, r4, r2
    70c2:	7b1b      	ldrb	r3, [r3, #12]
    70c4:	3b03      	subs	r3, #3
    70c6:	b2db      	uxtb	r3, r3
    70c8:	2b01      	cmp	r3, #1
    70ca:	d901      	bls.n	70d0 <notify_tx+0x34>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    70cc:	3401      	adds	r4, #1
    70ce:	e7e7      	b.n	70a0 <notify_tx+0x4>
			bt_conn_notify_tx(&conns[i]);
    70d0:	209c      	movs	r0, #156	; 0x9c
    70d2:	fb00 2004 	mla	r0, r0, r4, r2
    70d6:	f7ff ffcd 	bl	7074 <bt_conn_notify_tx>
    70da:	e7f7      	b.n	70cc <notify_tx+0x30>
    70dc:	200009f0 	.word	0x200009f0

000070e0 <send_frag>:
{
    70e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70e4:	4606      	mov	r6, r0
    70e6:	460d      	mov	r5, r1
    70e8:	4690      	mov	r8, r2
    70ea:	461c      	mov	r4, r3
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    70ec:	f7ff fe00 	bl	6cf0 <bt_conn_get_pkts>
    70f0:	4607      	mov	r7, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    70f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    70f6:	f022 f93f 	bl	29378 <_impl_k_sem_take>
	notify_tx();
    70fa:	f7ff ffcf 	bl	709c <notify_tx>
	if (conn->state != BT_CONN_CONNECTED) {
    70fe:	7b33      	ldrb	r3, [r6, #12]
    7100:	2b03      	cmp	r3, #3
    7102:	d006      	beq.n	7112 <send_frag+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    7104:	4638      	mov	r0, r7
    7106:	f022 f924 	bl	29352 <_impl_k_sem_give>
	if (always_consume) {
    710a:	bb4c      	cbnz	r4, 7160 <send_frag+0x80>
}
    710c:	4620      	mov	r0, r4
    710e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_push(buf, sizeof(*hdr));
    7112:	2104      	movs	r1, #4
    7114:	f105 0008 	add.w	r0, r5, #8
    7118:	f013 fe53 	bl	1adc2 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    711c:	f9b6 3000 	ldrsh.w	r3, [r6]
    7120:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
    7124:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7128:	89ab      	ldrh	r3, [r5, #12]
    712a:	3b04      	subs	r3, #4
    712c:	8043      	strh	r3, [r0, #2]
    712e:	f105 0310 	add.w	r3, r5, #16
    7132:	89ea      	ldrh	r2, [r5, #14]
    7134:	4413      	add	r3, r2
    7136:	3303      	adds	r3, #3
    7138:	f023 0303 	bic.w	r3, r3, #3
	cb = conn_tx(buf)->cb;
    713c:	6819      	ldr	r1, [r3, #0]
    713e:	2202      	movs	r2, #2
    7140:	701a      	strb	r2, [r3, #0]
	node = add_pending_tx(conn, cb);
    7142:	4630      	mov	r0, r6
    7144:	f7ff fd48 	bl	6bd8 <add_pending_tx>
    7148:	4680      	mov	r8, r0
	err = bt_send(buf);
    714a:	4628      	mov	r0, r5
    714c:	f7fe fafa 	bl	5744 <bt_send>
	if (err) {
    7150:	b908      	cbnz	r0, 7156 <send_frag+0x76>
	return true;
    7152:	2401      	movs	r4, #1
    7154:	e7da      	b.n	710c <send_frag+0x2c>
		remove_pending_tx(conn, node);
    7156:	4641      	mov	r1, r8
    7158:	4630      	mov	r0, r6
    715a:	f7ff fd5f 	bl	6c1c <remove_pending_tx>
		goto fail;
    715e:	e7d1      	b.n	7104 <send_frag+0x24>
		net_buf_unref(buf);
    7160:	4628      	mov	r0, r5
    7162:	f013 fdab 	bl	1acbc <net_buf_unref>
	return false;
    7166:	2400      	movs	r4, #0
    7168:	e7d0      	b.n	710c <send_frag+0x2c>
	...

0000716c <bt_conn_add_le>:
{
    716c:	b538      	push	{r3, r4, r5, lr}
    716e:	4605      	mov	r5, r0
	struct bt_conn *conn = conn_new();
    7170:	f7ff fd90 	bl	6c94 <conn_new>
	if (!conn) {
    7174:	4604      	mov	r4, r0
    7176:	b1a0      	cbz	r0, 71a2 <bt_conn_add_le+0x36>
    7178:	2207      	movs	r2, #7
    717a:	4629      	mov	r1, r5
    717c:	3048      	adds	r0, #72	; 0x48
    717e:	f7f9 f89f 	bl	2c0 <memcpy>
	conn->sec_level = BT_SECURITY_LOW;
    7182:	2301      	movs	r3, #1
    7184:	7223      	strb	r3, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    7186:	7263      	strb	r3, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    7188:	2300      	movs	r3, #0
    718a:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    718c:	2318      	movs	r3, #24
    718e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    7192:	2328      	movs	r3, #40	; 0x28
    7194:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    7198:	4903      	ldr	r1, [pc, #12]	; (71a8 <bt_conn_add_le+0x3c>)
    719a:	f104 0074 	add.w	r0, r4, #116	; 0x74
    719e:	f022 fea9 	bl	29ef4 <k_delayed_work_init>
}
    71a2:	4620      	mov	r0, r4
    71a4:	bd38      	pop	{r3, r4, r5, pc}
    71a6:	bf00      	nop
    71a8:	000077a9 	.word	0x000077a9

000071ac <bt_conn_addr_le_cmp>:
{
    71ac:	b538      	push	{r3, r4, r5, lr}
    71ae:	4604      	mov	r4, r0
    71b0:	460d      	mov	r5, r1
	return memcmp(a, b, sizeof(*a));
    71b2:	2207      	movs	r2, #7
    71b4:	f100 0148 	add.w	r1, r0, #72	; 0x48
    71b8:	4628      	mov	r0, r5
    71ba:	f023 fae9 	bl	2a790 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    71be:	4603      	mov	r3, r0
    71c0:	b140      	cbz	r0, 71d4 <bt_conn_addr_le_cmp+0x28>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    71c2:	78e3      	ldrb	r3, [r4, #3]
    71c4:	b143      	cbz	r3, 71d8 <bt_conn_addr_le_cmp+0x2c>
    71c6:	2207      	movs	r2, #7
    71c8:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    71cc:	4628      	mov	r0, r5
    71ce:	f023 fadf 	bl	2a790 <memcmp>
    71d2:	4603      	mov	r3, r0
}
    71d4:	4618      	mov	r0, r3
    71d6:	bd38      	pop	{r3, r4, r5, pc}
    71d8:	2207      	movs	r2, #7
    71da:	f104 0156 	add.w	r1, r4, #86	; 0x56
    71de:	4628      	mov	r0, r5
    71e0:	f023 fad6 	bl	2a790 <memcmp>
    71e4:	4603      	mov	r3, r0
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    71e6:	e7f5      	b.n	71d4 <bt_conn_addr_le_cmp+0x28>

000071e8 <bt_conn_ref>:
	atomic_inc(&conn->ref);
    71e8:	f100 0344 	add.w	r3, r0, #68	; 0x44
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    71ec:	f3bf 8f5b 	dmb	ish
    71f0:	e853 2f00 	ldrex	r2, [r3]
    71f4:	3201      	adds	r2, #1
    71f6:	e843 2100 	strex	r1, r2, [r3]
    71fa:	2900      	cmp	r1, #0
    71fc:	d1f8      	bne.n	71f0 <bt_conn_ref+0x8>
    71fe:	f3bf 8f5b 	dmb	ish
}
    7202:	4770      	bx	lr

00007204 <bt_conn_lookup_handle>:
{
    7204:	b508      	push	{r3, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7206:	2300      	movs	r3, #0
    7208:	b10b      	cbz	r3, 720e <bt_conn_lookup_handle+0xa>
	return NULL;
    720a:	2000      	movs	r0, #0
}
    720c:	bd08      	pop	{r3, pc}
		if (!atomic_get(&conns[i].ref)) {
    720e:	229c      	movs	r2, #156	; 0x9c
    7210:	fb02 f203 	mul.w	r2, r2, r3
    7214:	3240      	adds	r2, #64	; 0x40
    7216:	490f      	ldr	r1, [pc, #60]	; (7254 <bt_conn_lookup_handle+0x50>)
    7218:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    721a:	f3bf 8f5b 	dmb	ish
    721e:	6852      	ldr	r2, [r2, #4]
    7220:	f3bf 8f5b 	dmb	ish
    7224:	b13a      	cbz	r2, 7236 <bt_conn_lookup_handle+0x32>
		if (conns[i].state != BT_CONN_CONNECTED &&
    7226:	229c      	movs	r2, #156	; 0x9c
    7228:	fb02 1203 	mla	r2, r2, r3, r1
    722c:	7b12      	ldrb	r2, [r2, #12]
    722e:	3a03      	subs	r2, #3
    7230:	b2d2      	uxtb	r2, r2
    7232:	2a01      	cmp	r2, #1
    7234:	d901      	bls.n	723a <bt_conn_lookup_handle+0x36>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7236:	3301      	adds	r3, #1
    7238:	e7e6      	b.n	7208 <bt_conn_lookup_handle+0x4>
		if (conns[i].handle == handle) {
    723a:	229c      	movs	r2, #156	; 0x9c
    723c:	fb02 f203 	mul.w	r2, r2, r3
    7240:	5a8a      	ldrh	r2, [r1, r2]
    7242:	4282      	cmp	r2, r0
    7244:	d1f7      	bne.n	7236 <bt_conn_lookup_handle+0x32>
			return bt_conn_ref(&conns[i]);
    7246:	209c      	movs	r0, #156	; 0x9c
    7248:	fb00 1003 	mla	r0, r0, r3, r1
    724c:	f7ff ffcc 	bl	71e8 <bt_conn_ref>
    7250:	bd08      	pop	{r3, pc}
    7252:	bf00      	nop
    7254:	200009f0 	.word	0x200009f0

00007258 <bt_conn_lookup_addr_le>:
{
    7258:	b570      	push	{r4, r5, r6, lr}
    725a:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    725c:	2400      	movs	r4, #0
    725e:	b10c      	cbz	r4, 7264 <bt_conn_lookup_addr_le+0xc>
	return NULL;
    7260:	2000      	movs	r0, #0
}
    7262:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    7264:	239c      	movs	r3, #156	; 0x9c
    7266:	fb03 f304 	mul.w	r3, r3, r4
    726a:	3340      	adds	r3, #64	; 0x40
    726c:	4a0d      	ldr	r2, [pc, #52]	; (72a4 <bt_conn_lookup_addr_le+0x4c>)
    726e:	4413      	add	r3, r2
    7270:	f3bf 8f5b 	dmb	ish
    7274:	685b      	ldr	r3, [r3, #4]
    7276:	f3bf 8f5b 	dmb	ish
    727a:	b123      	cbz	r3, 7286 <bt_conn_lookup_addr_le+0x2e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    727c:	239c      	movs	r3, #156	; 0x9c
    727e:	fb03 2304 	mla	r3, r3, r4, r2
    7282:	789b      	ldrb	r3, [r3, #2]
    7284:	b10b      	cbz	r3, 728a <bt_conn_lookup_addr_le+0x32>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7286:	3401      	adds	r4, #1
    7288:	e7e9      	b.n	725e <bt_conn_lookup_addr_le+0x6>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    728a:	269c      	movs	r6, #156	; 0x9c
    728c:	fb06 2604 	mla	r6, r6, r4, r2
    7290:	4629      	mov	r1, r5
    7292:	4630      	mov	r0, r6
    7294:	f7ff ff8a 	bl	71ac <bt_conn_addr_le_cmp>
    7298:	2800      	cmp	r0, #0
    729a:	d1f4      	bne.n	7286 <bt_conn_lookup_addr_le+0x2e>
			return bt_conn_ref(&conns[i]);
    729c:	4630      	mov	r0, r6
    729e:	f7ff ffa3 	bl	71e8 <bt_conn_ref>
    72a2:	bd70      	pop	{r4, r5, r6, pc}
    72a4:	200009f0 	.word	0x200009f0

000072a8 <bt_conn_lookup_state_le>:
{
    72a8:	b570      	push	{r4, r5, r6, lr}
    72aa:	4605      	mov	r5, r0
    72ac:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    72ae:	2400      	movs	r4, #0
    72b0:	b10c      	cbz	r4, 72b6 <bt_conn_lookup_state_le+0xe>
	return NULL;
    72b2:	2000      	movs	r0, #0
}
    72b4:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    72b6:	239c      	movs	r3, #156	; 0x9c
    72b8:	fb03 f304 	mul.w	r3, r3, r4
    72bc:	3340      	adds	r3, #64	; 0x40
    72be:	4a12      	ldr	r2, [pc, #72]	; (7308 <bt_conn_lookup_state_le+0x60>)
    72c0:	4413      	add	r3, r2
    72c2:	f3bf 8f5b 	dmb	ish
    72c6:	685b      	ldr	r3, [r3, #4]
    72c8:	f3bf 8f5b 	dmb	ish
    72cc:	b19b      	cbz	r3, 72f6 <bt_conn_lookup_state_le+0x4e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    72ce:	239c      	movs	r3, #156	; 0x9c
    72d0:	fb03 2304 	mla	r3, r3, r4, r2
    72d4:	789b      	ldrb	r3, [r3, #2]
    72d6:	b973      	cbnz	r3, 72f6 <bt_conn_lookup_state_le+0x4e>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    72d8:	b135      	cbz	r5, 72e8 <bt_conn_lookup_state_le+0x40>
    72da:	4629      	mov	r1, r5
    72dc:	209c      	movs	r0, #156	; 0x9c
    72de:	fb00 2004 	mla	r0, r0, r4, r2
    72e2:	f7ff ff63 	bl	71ac <bt_conn_addr_le_cmp>
    72e6:	b930      	cbnz	r0, 72f6 <bt_conn_lookup_state_le+0x4e>
		if (conns[i].state == state) {
    72e8:	239c      	movs	r3, #156	; 0x9c
    72ea:	4a07      	ldr	r2, [pc, #28]	; (7308 <bt_conn_lookup_state_le+0x60>)
    72ec:	fb03 2304 	mla	r3, r3, r4, r2
    72f0:	7b1b      	ldrb	r3, [r3, #12]
    72f2:	42b3      	cmp	r3, r6
    72f4:	d001      	beq.n	72fa <bt_conn_lookup_state_le+0x52>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    72f6:	3401      	adds	r4, #1
    72f8:	e7da      	b.n	72b0 <bt_conn_lookup_state_le+0x8>
			return bt_conn_ref(&conns[i]);
    72fa:	209c      	movs	r0, #156	; 0x9c
    72fc:	fb00 2004 	mla	r0, r0, r4, r2
    7300:	f7ff ff72 	bl	71e8 <bt_conn_ref>
    7304:	bd70      	pop	{r4, r5, r6, pc}
    7306:	bf00      	nop
    7308:	200009f0 	.word	0x200009f0

0000730c <bt_conn_unref>:
	atomic_dec(&conn->ref);
    730c:	3044      	adds	r0, #68	; 0x44
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    730e:	f3bf 8f5b 	dmb	ish
    7312:	e850 3f00 	ldrex	r3, [r0]
    7316:	3b01      	subs	r3, #1
    7318:	e840 3200 	strex	r2, r3, [r0]
    731c:	2a00      	cmp	r2, #0
    731e:	d1f8      	bne.n	7312 <bt_conn_unref+0x6>
    7320:	f3bf 8f5b 	dmb	ish
    7324:	4770      	bx	lr

00007326 <conn_cleanup>:
{
    7326:	b510      	push	{r4, lr}
    7328:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    732a:	e002      	b.n	7332 <conn_cleanup+0xc>
		net_buf_unref(buf);
    732c:	4618      	mov	r0, r3
    732e:	f013 fcc5 	bl	1acbc <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    7332:	2100      	movs	r1, #0
    7334:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7338:	f013 fc93 	bl	1ac62 <net_buf_get>
    733c:	4603      	mov	r3, r0
    733e:	2800      	cmp	r0, #0
    7340:	d1f4      	bne.n	732c <conn_cleanup+0x6>
	bt_conn_notify_tx(conn);
    7342:	4620      	mov	r0, r4
    7344:	f7ff fe96 	bl	7074 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    7348:	4620      	mov	r0, r4
    734a:	f7ff fc97 	bl	6c7c <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    734e:	4620      	mov	r0, r4
    7350:	f7ff ffdc 	bl	730c <bt_conn_unref>
    7354:	bd10      	pop	{r4, pc}
	...

00007358 <bt_conn_prepare_events>:
{
    7358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    735c:	4606      	mov	r6, r0
	conn_change.signaled = 0;
    735e:	4b30      	ldr	r3, [pc, #192]	; (7420 <bt_conn_prepare_events+0xc8>)
    7360:	2400      	movs	r4, #0
    7362:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7364:	4622      	mov	r2, r4
    7366:	2101      	movs	r1, #1
    7368:	f021 f93e 	bl	285e8 <k_poll_event_init>
    736c:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    736e:	b114      	cbz	r4, 7376 <bt_conn_prepare_events+0x1e>
}
    7370:	4628      	mov	r0, r5
    7372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = &conns[i];
    7376:	4a2b      	ldr	r2, [pc, #172]	; (7424 <bt_conn_prepare_events+0xcc>)
    7378:	239c      	movs	r3, #156	; 0x9c
    737a:	fb03 f304 	mul.w	r3, r3, r4
    737e:	18d0      	adds	r0, r2, r3
		if (!atomic_get(&conn->ref)) {
    7380:	3340      	adds	r3, #64	; 0x40
    7382:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7384:	f3bf 8f5b 	dmb	ish
    7388:	685b      	ldr	r3, [r3, #4]
    738a:	f3bf 8f5b 	dmb	ish
    738e:	b143      	cbz	r3, 73a2 <bt_conn_prepare_events+0x4a>
		if (conn->state == BT_CONN_DISCONNECTED &&
    7390:	7b03      	ldrb	r3, [r0, #12]
    7392:	b143      	cbz	r3, 73a6 <bt_conn_prepare_events+0x4e>
		if (conn->state != BT_CONN_CONNECTED) {
    7394:	239c      	movs	r3, #156	; 0x9c
    7396:	4a23      	ldr	r2, [pc, #140]	; (7424 <bt_conn_prepare_events+0xcc>)
    7398:	fb03 2304 	mla	r3, r3, r4, r2
    739c:	7b1b      	ldrb	r3, [r3, #12]
    739e:	2b03      	cmp	r3, #3
    73a0:	d015      	beq.n	73ce <bt_conn_prepare_events+0x76>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    73a2:	3401      	adds	r4, #1
    73a4:	e7e3      	b.n	736e <bt_conn_prepare_events+0x16>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    73a6:	4603      	mov	r3, r0
    73a8:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    73aa:	f3bf 8f5b 	dmb	ish
    73ae:	e853 2f00 	ldrex	r2, [r3]
    73b2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    73b6:	e843 1700 	strex	r7, r1, [r3]
    73ba:	2f00      	cmp	r7, #0
    73bc:	d1f7      	bne.n	73ae <bt_conn_prepare_events+0x56>
    73be:	f3bf 8f5b 	dmb	ish
		if (conn->state == BT_CONN_DISCONNECTED &&
    73c2:	f012 0f40 	tst.w	r2, #64	; 0x40
    73c6:	d0e5      	beq.n	7394 <bt_conn_prepare_events+0x3c>
			conn_cleanup(conn);
    73c8:	f7ff ffad 	bl	7326 <conn_cleanup>
			continue;
    73cc:	e7e9      	b.n	73a2 <bt_conn_prepare_events+0x4a>
		k_poll_event_init(&events[ev_count],
    73ce:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    73d2:	ea4f 0883 	mov.w	r8, r3, lsl #2
    73d6:	44b0      	add	r8, r6
				  &conn->tx_notify);
    73d8:	4691      	mov	r9, r2
    73da:	279c      	movs	r7, #156	; 0x9c
    73dc:	fb07 f704 	mul.w	r7, r7, r4
    73e0:	f107 0318 	add.w	r3, r7, #24
    73e4:	4413      	add	r3, r2
		k_poll_event_init(&events[ev_count],
    73e6:	3304      	adds	r3, #4
    73e8:	2200      	movs	r2, #0
    73ea:	2104      	movs	r1, #4
    73ec:	4640      	mov	r0, r8
    73ee:	f021 f8fb 	bl	285e8 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    73f2:	1c6b      	adds	r3, r5, #1
    73f4:	2201      	movs	r2, #1
    73f6:	f888 200c 	strb.w	r2, [r8, #12]
		k_poll_event_init(&events[ev_count],
    73fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    73fe:	ea4f 0883 	mov.w	r8, r3, lsl #2
    7402:	44b0      	add	r8, r6
				  &conn->tx_queue);
    7404:	f107 0328 	add.w	r3, r7, #40	; 0x28
    7408:	444b      	add	r3, r9
		k_poll_event_init(&events[ev_count],
    740a:	3304      	adds	r3, #4
    740c:	2200      	movs	r2, #0
    740e:	2104      	movs	r1, #4
    7410:	4640      	mov	r0, r8
    7412:	f021 f8e9 	bl	285e8 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    7416:	3502      	adds	r5, #2
    7418:	2302      	movs	r3, #2
    741a:	f888 300c 	strb.w	r3, [r8, #12]
    741e:	e7c0      	b.n	73a2 <bt_conn_prepare_events+0x4a>
    7420:	2000bfa0 	.word	0x2000bfa0
    7424:	200009f0 	.word	0x200009f0

00007428 <bt_conn_set_state>:
{
    7428:	b538      	push	{r3, r4, r5, lr}
	if (conn->state == state) {
    742a:	7b05      	ldrb	r5, [r0, #12]
    742c:	428d      	cmp	r5, r1
    742e:	d00a      	beq.n	7446 <bt_conn_set_state+0x1e>
    7430:	4604      	mov	r4, r0
	conn->state = state;
    7432:	7301      	strb	r1, [r0, #12]
	switch (old_state) {
    7434:	b145      	cbz	r5, 7448 <bt_conn_set_state+0x20>
    7436:	2d02      	cmp	r5, #2
    7438:	d009      	beq.n	744e <bt_conn_set_state+0x26>
	switch (conn->state) {
    743a:	7b23      	ldrb	r3, [r4, #12]
    743c:	2b02      	cmp	r3, #2
    743e:	d068      	beq.n	7512 <bt_conn_set_state+0xea>
    7440:	2b03      	cmp	r3, #3
    7442:	d00b      	beq.n	745c <bt_conn_set_state+0x34>
    7444:	b31b      	cbz	r3, 748e <bt_conn_set_state+0x66>
    7446:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_ref(conn);
    7448:	f7ff fece 	bl	71e8 <bt_conn_ref>
		break;
    744c:	e7f5      	b.n	743a <bt_conn_set_state+0x12>
		    conn->type == BT_CONN_TYPE_LE) {
    744e:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7450:	2b00      	cmp	r3, #0
    7452:	d1f2      	bne.n	743a <bt_conn_set_state+0x12>
			k_delayed_work_cancel(&conn->le.update_work);
    7454:	3074      	adds	r0, #116	; 0x74
    7456:	f022 fd6b 	bl	29f30 <k_delayed_work_cancel>
    745a:	e7ee      	b.n	743a <bt_conn_set_state+0x12>
		if (conn->type == BT_CONN_TYPE_SCO) {
    745c:	78a3      	ldrb	r3, [r4, #2]
    745e:	2b02      	cmp	r3, #2
    7460:	d0f1      	beq.n	7446 <bt_conn_set_state+0x1e>
		k_fifo_init(&conn->tx_queue);
    7462:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7466:	f021 fbaa 	bl	28bbe <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    746a:	f104 001c 	add.w	r0, r4, #28
    746e:	f021 fba6 	bl	28bbe <k_queue_init>
		k_poll_signal(&conn_change, 0);
    7472:	2100      	movs	r1, #0
    7474:	482d      	ldr	r0, [pc, #180]	; (752c <bt_conn_set_state+0x104>)
    7476:	f021 fb43 	bl	28b00 <k_poll_signal>
	list->head = NULL;
    747a:	2300      	movs	r3, #0
    747c:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    747e:	6423      	str	r3, [r4, #64]	; 0x40
		bt_l2cap_connected(conn);
    7480:	4620      	mov	r0, r4
    7482:	f001 f87d 	bl	8580 <bt_l2cap_connected>
		notify_connected(conn);
    7486:	4620      	mov	r0, r4
    7488:	f7ff fb74 	bl	6b74 <notify_connected>
		break;
    748c:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    748e:	78a3      	ldrb	r3, [r4, #2]
    7490:	2b02      	cmp	r3, #2
    7492:	d00d      	beq.n	74b0 <bt_conn_set_state+0x88>
		if (old_state == BT_CONN_CONNECTED ||
    7494:	1eeb      	subs	r3, r5, #3
    7496:	b2db      	uxtb	r3, r3
    7498:	2b01      	cmp	r3, #1
    749a:	d90d      	bls.n	74b8 <bt_conn_set_state+0x90>
		} else if (old_state == BT_CONN_CONNECT) {
    749c:	2d02      	cmp	r5, #2
    749e:	d02d      	beq.n	74fc <bt_conn_set_state+0xd4>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    74a0:	2d01      	cmp	r5, #1
    74a2:	d1d0      	bne.n	7446 <bt_conn_set_state+0x1e>
			if (conn->err) {
    74a4:	7ae3      	ldrb	r3, [r4, #11]
    74a6:	bb83      	cbnz	r3, 750a <bt_conn_set_state+0xe2>
			bt_conn_unref(conn);
    74a8:	4620      	mov	r0, r4
    74aa:	f7ff ff2f 	bl	730c <bt_conn_unref>
    74ae:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    74b0:	4620      	mov	r0, r4
    74b2:	f7ff ff2b 	bl	730c <bt_conn_unref>
			break;
    74b6:	bd38      	pop	{r3, r4, r5, pc}
			bt_l2cap_disconnected(conn);
    74b8:	4620      	mov	r0, r4
    74ba:	f000 fd21 	bl	7f00 <bt_l2cap_disconnected>
			notify_disconnected(conn);
    74be:	4620      	mov	r0, r4
    74c0:	f7ff fb6a 	bl	6b98 <notify_disconnected>
			process_unack_tx(conn);
    74c4:	4620      	mov	r0, r4
    74c6:	f7ff fc17 	bl	6cf8 <process_unack_tx>
			if (conn->type == BT_CONN_TYPE_LE) {
    74ca:	78a3      	ldrb	r3, [r4, #2]
    74cc:	b18b      	cbz	r3, 74f2 <bt_conn_set_state+0xca>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    74ce:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    74d0:	f3bf 8f5b 	dmb	ish
    74d4:	e854 3f00 	ldrex	r3, [r4]
    74d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    74dc:	e844 3200 	strex	r2, r3, [r4]
    74e0:	2a00      	cmp	r2, #0
    74e2:	d1f7      	bne.n	74d4 <bt_conn_set_state+0xac>
    74e4:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    74e8:	2100      	movs	r1, #0
    74ea:	4810      	ldr	r0, [pc, #64]	; (752c <bt_conn_set_state+0x104>)
    74ec:	f021 fb08 	bl	28b00 <k_poll_signal>
    74f0:	bd38      	pop	{r3, r4, r5, pc}
				k_delayed_work_cancel(&conn->le.update_work);
    74f2:	f104 0074 	add.w	r0, r4, #116	; 0x74
    74f6:	f022 fd1b 	bl	29f30 <k_delayed_work_cancel>
    74fa:	e7e8      	b.n	74ce <bt_conn_set_state+0xa6>
			notify_connected(conn);
    74fc:	4620      	mov	r0, r4
    74fe:	f7ff fb39 	bl	6b74 <notify_connected>
			bt_conn_unref(conn);
    7502:	4620      	mov	r0, r4
    7504:	f7ff ff02 	bl	730c <bt_conn_unref>
    7508:	bd38      	pop	{r3, r4, r5, pc}
				notify_connected(conn);
    750a:	4620      	mov	r0, r4
    750c:	f7ff fb32 	bl	6b74 <notify_connected>
    7510:	e7ca      	b.n	74a8 <bt_conn_set_state+0x80>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7512:	78a3      	ldrb	r3, [r4, #2]
    7514:	2b02      	cmp	r3, #2
    7516:	d096      	beq.n	7446 <bt_conn_set_state+0x1e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7518:	2b00      	cmp	r3, #0
    751a:	d194      	bne.n	7446 <bt_conn_set_state+0x1e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    751c:	f640 32b8 	movw	r2, #3000	; 0xbb8
    7520:	f104 0174 	add.w	r1, r4, #116	; 0x74
    7524:	4802      	ldr	r0, [pc, #8]	; (7530 <bt_conn_set_state+0x108>)
    7526:	f022 fd5d 	bl	29fe4 <k_delayed_work_submit_to_queue>
    752a:	e78c      	b.n	7446 <bt_conn_set_state+0x1e>
    752c:	2000bfa0 	.word	0x2000bfa0
    7530:	20003158 	.word	0x20003158

00007534 <bt_hci_disconnect>:
{
    7534:	b570      	push	{r4, r5, r6, lr}
    7536:	4605      	mov	r5, r0
    7538:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    753a:	2103      	movs	r1, #3
    753c:	f240 4006 	movw	r0, #1030	; 0x406
    7540:	f7fd fbac 	bl	4c9c <bt_hci_cmd_create>
	if (!buf) {
    7544:	b1a8      	cbz	r0, 7572 <bt_hci_disconnect+0x3e>
    7546:	4604      	mov	r4, r0
	disconn = net_buf_add(buf, sizeof(*disconn));
    7548:	2103      	movs	r1, #3
    754a:	3008      	adds	r0, #8
    754c:	f013 fc02 	bl	1ad54 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    7550:	882b      	ldrh	r3, [r5, #0]
    7552:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    7554:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    7556:	4621      	mov	r1, r4
    7558:	f240 4006 	movw	r0, #1030	; 0x406
    755c:	f7fe f8fc 	bl	5758 <bt_hci_cmd_send>
	if (err) {
    7560:	4604      	mov	r4, r0
    7562:	b108      	cbz	r0, 7568 <bt_hci_disconnect+0x34>
}
    7564:	4620      	mov	r0, r4
    7566:	bd70      	pop	{r4, r5, r6, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    7568:	2104      	movs	r1, #4
    756a:	4628      	mov	r0, r5
    756c:	f7ff ff5c 	bl	7428 <bt_conn_set_state>
	return 0;
    7570:	e7f8      	b.n	7564 <bt_hci_disconnect+0x30>
		return -ENOBUFS;
    7572:	f06f 0468 	mvn.w	r4, #104	; 0x68
    7576:	e7f5      	b.n	7564 <bt_hci_disconnect+0x30>

00007578 <bt_conn_get_info>:
	info->type = conn->type;
    7578:	7883      	ldrb	r3, [r0, #2]
    757a:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    757c:	78c3      	ldrb	r3, [r0, #3]
    757e:	704b      	strb	r3, [r1, #1]
	switch (conn->type) {
    7580:	7883      	ldrb	r3, [r0, #2]
    7582:	b9cb      	cbnz	r3, 75b8 <bt_conn_get_info+0x40>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    7584:	78c3      	ldrb	r3, [r0, #3]
    7586:	b983      	cbnz	r3, 75aa <bt_conn_get_info+0x32>
			info->le.src = &conn->le.init_addr;
    7588:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    758c:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.resp_addr;
    758e:	f100 0356 	add.w	r3, r0, #86	; 0x56
    7592:	608b      	str	r3, [r1, #8]
		info->le.interval = conn->le.interval;
    7594:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    7598:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    759a:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    759e:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    75a0:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    75a4:	820b      	strh	r3, [r1, #16]
		return 0;
    75a6:	2000      	movs	r0, #0
    75a8:	4770      	bx	lr
			info->le.src = &conn->le.resp_addr;
    75aa:	f100 0356 	add.w	r3, r0, #86	; 0x56
    75ae:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.init_addr;
    75b0:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    75b4:	608b      	str	r3, [r1, #8]
    75b6:	e7ed      	b.n	7594 <bt_conn_get_info+0x1c>
	return -EINVAL;
    75b8:	f06f 0015 	mvn.w	r0, #21
}
    75bc:	4770      	bx	lr
	...

000075c0 <bt_le_set_auto_conn>:
	return conn;
}

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    75c0:	b570      	push	{r4, r5, r6, lr}
    75c2:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    75c4:	460d      	mov	r5, r1
    75c6:	b121      	cbz	r1, 75d2 <bt_le_set_auto_conn+0x12>
    75c8:	4608      	mov	r0, r1
    75ca:	f7fd ffd1 	bl	5570 <bt_le_conn_params_valid>
    75ce:	2800      	cmp	r0, #0
    75d0:	d05a      	beq.n	7688 <bt_le_set_auto_conn+0xc8>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    75d2:	4630      	mov	r0, r6
    75d4:	f7ff fe40 	bl	7258 <bt_conn_lookup_addr_le>
	if (!conn) {
    75d8:	4604      	mov	r4, r0
    75da:	b1d8      	cbz	r0, 7614 <bt_le_set_auto_conn+0x54>
		if (!conn) {
			return -ENOMEM;
		}
	}

	if (param) {
    75dc:	b33d      	cbz	r5, 762e <bt_le_set_auto_conn+0x6e>
		bt_conn_set_param_le(conn, param);
    75de:	4629      	mov	r1, r5
    75e0:	4620      	mov	r0, r4
    75e2:	f7ff fb41 	bl	6c68 <bt_conn_set_param_le>

		if (!atomic_test_and_set_bit(conn->flags,
    75e6:	1d23      	adds	r3, r4, #4
    75e8:	f3bf 8f5b 	dmb	ish
    75ec:	e853 2f00 	ldrex	r2, [r3]
    75f0:	f042 0101 	orr.w	r1, r2, #1
    75f4:	e843 1000 	strex	r0, r1, [r3]
    75f8:	2800      	cmp	r0, #0
    75fa:	d1f7      	bne.n	75ec <bt_le_set_auto_conn+0x2c>
    75fc:	f3bf 8f5b 	dmb	ish
    7600:	f012 0f01 	tst.w	r2, #1
    7604:	d00f      	beq.n	7626 <bt_le_set_auto_conn+0x66>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    7606:	7b23      	ldrb	r3, [r4, #12]
    7608:	b363      	cbz	r3, 7664 <bt_le_set_auto_conn+0xa4>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
		}
		bt_le_scan_update(false);
	}

	bt_conn_unref(conn);
    760a:	4620      	mov	r0, r4
    760c:	f7ff fe7e 	bl	730c <bt_conn_unref>

	return 0;
    7610:	2000      	movs	r0, #0
    7612:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_add_le(addr);
    7614:	4630      	mov	r0, r6
    7616:	f7ff fda9 	bl	716c <bt_conn_add_le>
		if (!conn) {
    761a:	4604      	mov	r4, r0
    761c:	2800      	cmp	r0, #0
    761e:	d1dd      	bne.n	75dc <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    7620:	f06f 000b 	mvn.w	r0, #11
}
    7624:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_ref(conn);
    7626:	4620      	mov	r0, r4
    7628:	f7ff fdde 	bl	71e8 <bt_conn_ref>
    762c:	e7eb      	b.n	7606 <bt_le_set_auto_conn+0x46>
		if (atomic_test_and_clear_bit(conn->flags,
    762e:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7630:	f3bf 8f5b 	dmb	ish
    7634:	e853 2f00 	ldrex	r2, [r3]
    7638:	f022 0101 	bic.w	r1, r2, #1
    763c:	e843 1000 	strex	r0, r1, [r3]
    7640:	2800      	cmp	r0, #0
    7642:	d1f7      	bne.n	7634 <bt_le_set_auto_conn+0x74>
    7644:	f3bf 8f5b 	dmb	ish
    7648:	f012 0f01 	tst.w	r2, #1
    764c:	d0db      	beq.n	7606 <bt_le_set_auto_conn+0x46>
			bt_conn_unref(conn);
    764e:	4620      	mov	r0, r4
    7650:	f7ff fe5c 	bl	730c <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    7654:	7b23      	ldrb	r3, [r4, #12]
    7656:	2b01      	cmp	r3, #1
    7658:	d1d5      	bne.n	7606 <bt_le_set_auto_conn+0x46>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    765a:	2100      	movs	r1, #0
    765c:	4620      	mov	r0, r4
    765e:	f7ff fee3 	bl	7428 <bt_conn_set_state>
    7662:	e7d0      	b.n	7606 <bt_le_set_auto_conn+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7664:	f3bf 8f5b 	dmb	ish
    7668:	4b09      	ldr	r3, [pc, #36]	; (7690 <bt_le_set_auto_conn+0xd0>)
    766a:	681b      	ldr	r3, [r3, #0]
    766c:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    7670:	f013 0f02 	tst.w	r3, #2
    7674:	d0c9      	beq.n	760a <bt_le_set_auto_conn+0x4a>
		if (param) {
    7676:	b11d      	cbz	r5, 7680 <bt_le_set_auto_conn+0xc0>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7678:	2101      	movs	r1, #1
    767a:	4620      	mov	r0, r4
    767c:	f7ff fed4 	bl	7428 <bt_conn_set_state>
		bt_le_scan_update(false);
    7680:	2000      	movs	r0, #0
    7682:	f7fe f919 	bl	58b8 <bt_le_scan_update>
    7686:	e7c0      	b.n	760a <bt_le_set_auto_conn+0x4a>
		return -EINVAL;
    7688:	f06f 0015 	mvn.w	r0, #21
    768c:	bd70      	pop	{r4, r5, r6, pc}
    768e:	bf00      	nop
    7690:	2000bed8 	.word	0x2000bed8

00007694 <bt_conn_disconnect>:
{
    7694:	b538      	push	{r3, r4, r5, lr}
    7696:	4604      	mov	r4, r0
    7698:	460d      	mov	r5, r1
	    conn->type == BT_CONN_TYPE_LE) {
    769a:	7883      	ldrb	r3, [r0, #2]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    769c:	b13b      	cbz	r3, 76ae <bt_conn_disconnect+0x1a>
	switch (conn->state) {
    769e:	7b23      	ldrb	r3, [r4, #12]
    76a0:	3b01      	subs	r3, #1
    76a2:	2b03      	cmp	r3, #3
    76a4:	d823      	bhi.n	76ee <bt_conn_disconnect+0x5a>
    76a6:	e8df f003 	tbb	[pc, r3]
    76aa:	1309      	.short	0x1309
    76ac:	071d      	.short	0x071d
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    76ae:	2100      	movs	r1, #0
    76b0:	3048      	adds	r0, #72	; 0x48
    76b2:	f7ff ff85 	bl	75c0 <bt_le_set_auto_conn>
    76b6:	e7f2      	b.n	769e <bt_conn_disconnect+0xa>
		return 0;
    76b8:	2000      	movs	r0, #0
    76ba:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    76bc:	72e5      	strb	r5, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    76be:	2100      	movs	r1, #0
    76c0:	4620      	mov	r0, r4
    76c2:	f7ff feb1 	bl	7428 <bt_conn_set_state>
		bt_le_scan_update(false);
    76c6:	2000      	movs	r0, #0
    76c8:	f7fe f8f6 	bl	58b8 <bt_le_scan_update>
		return 0;
    76cc:	2000      	movs	r0, #0
    76ce:	bd38      	pop	{r3, r4, r5, pc}
			k_delayed_work_cancel(&conn->le.update_work);
    76d0:	f104 0074 	add.w	r0, r4, #116	; 0x74
    76d4:	f022 fc2c 	bl	29f30 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    76d8:	2100      	movs	r1, #0
    76da:	f242 000e 	movw	r0, #8206	; 0x200e
    76de:	f7fe f83b 	bl	5758 <bt_hci_cmd_send>
    76e2:	bd38      	pop	{r3, r4, r5, pc}
		return bt_hci_disconnect(conn, reason);
    76e4:	4629      	mov	r1, r5
    76e6:	4620      	mov	r0, r4
    76e8:	f7ff ff24 	bl	7534 <bt_hci_disconnect>
    76ec:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    76ee:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    76f2:	bd38      	pop	{r3, r4, r5, pc}

000076f4 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    76f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76f6:	4607      	mov	r7, r0
    76f8:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    76fa:	210e      	movs	r1, #14
    76fc:	f242 0013 	movw	r0, #8211	; 0x2013
    7700:	f7fd facc 	bl	4c9c <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    7704:	b1c8      	cbz	r0, 773a <bt_conn_le_conn_update+0x46>
    7706:	4606      	mov	r6, r0
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    7708:	210e      	movs	r1, #14
    770a:	3008      	adds	r0, #8
    770c:	f013 fb22 	bl	1ad54 <net_buf_simple_add>
    7710:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    7712:	220e      	movs	r2, #14
    7714:	2100      	movs	r1, #0
    7716:	f023 f8cf 	bl	2a8b8 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    771a:	883b      	ldrh	r3, [r7, #0]
    771c:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    771e:	882b      	ldrh	r3, [r5, #0]
    7720:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    7722:	886b      	ldrh	r3, [r5, #2]
    7724:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    7726:	88ab      	ldrh	r3, [r5, #4]
    7728:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    772a:	88eb      	ldrh	r3, [r5, #6]
    772c:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    772e:	4631      	mov	r1, r6
    7730:	f242 0013 	movw	r0, #8211	; 0x2013
    7734:	f7fe f810 	bl	5758 <bt_hci_cmd_send>
    7738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    773a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    773e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007740 <bt_conn_le_param_update>:
{
    7740:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    7742:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    7746:	880a      	ldrh	r2, [r1, #0]
    7748:	4293      	cmp	r3, r2
    774a:	d307      	bcc.n	775c <bt_conn_le_param_update+0x1c>
	    conn->le.interval <= param->interval_max &&
    774c:	884a      	ldrh	r2, [r1, #2]
	if (conn->le.interval >= param->interval_min &&
    774e:	4293      	cmp	r3, r2
    7750:	d804      	bhi.n	775c <bt_conn_le_param_update+0x1c>
	    conn->le.latency == param->latency &&
    7752:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    7756:	888b      	ldrh	r3, [r1, #4]
	    conn->le.interval <= param->interval_max &&
    7758:	429a      	cmp	r2, r3
    775a:	d016      	beq.n	778a <bt_conn_le_param_update+0x4a>
    775c:	460d      	mov	r5, r1
    775e:	4604      	mov	r4, r0
	k_delayed_work_cancel(&conn->le.update_work);
    7760:	3074      	adds	r0, #116	; 0x74
    7762:	f022 fbe5 	bl	29f30 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    7766:	4b0f      	ldr	r3, [pc, #60]	; (77a4 <bt_conn_le_param_update+0x64>)
    7768:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    776c:	f013 0f02 	tst.w	r3, #2
    7770:	d004      	beq.n	777c <bt_conn_le_param_update+0x3c>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    7772:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    7776:	f013 0f02 	tst.w	r3, #2
    777a:	d101      	bne.n	7780 <bt_conn_le_param_update+0x40>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
    777c:	78e3      	ldrb	r3, [r4, #3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    777e:	b963      	cbnz	r3, 779a <bt_conn_le_param_update+0x5a>
		return bt_conn_le_conn_update(conn, param);
    7780:	4629      	mov	r1, r5
    7782:	4620      	mov	r0, r4
    7784:	f7ff ffb6 	bl	76f4 <bt_conn_le_conn_update>
    7788:	bd38      	pop	{r3, r4, r5, pc}
	    conn->le.timeout == param->timeout) {
    778a:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    778e:	88cb      	ldrh	r3, [r1, #6]
	    conn->le.latency == param->latency &&
    7790:	429a      	cmp	r2, r3
    7792:	d1e3      	bne.n	775c <bt_conn_le_param_update+0x1c>
		return -EALREADY;
    7794:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    7798:	bd38      	pop	{r3, r4, r5, pc}
	return bt_l2cap_update_conn_param(conn, param);
    779a:	4629      	mov	r1, r5
    779c:	4620      	mov	r0, r4
    779e:	f001 f821 	bl	87e4 <bt_l2cap_update_conn_param>
    77a2:	bd38      	pop	{r3, r4, r5, pc}
    77a4:	2000be68 	.word	0x2000be68

000077a8 <le_conn_update>:
{
    77a8:	b500      	push	{lr}
    77aa:	b083      	sub	sp, #12
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    77ac:	f1a0 0274 	sub.w	r2, r0, #116	; 0x74
	    conn->state == BT_CONN_CONNECT) {
    77b0:	f810 3c68 	ldrb.w	r3, [r0, #-104]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    77b4:	2b02      	cmp	r3, #2
    77b6:	d016      	beq.n	77e6 <le_conn_update+0x3e>
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    77b8:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    77bc:	f8ad 3000 	strh.w	r3, [sp]
    77c0:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    77c4:	f8ad 3002 	strh.w	r3, [sp, #2]
    77c8:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    77cc:	f8ad 3004 	strh.w	r3, [sp, #4]
    77d0:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    77d4:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    77d8:	4669      	mov	r1, sp
    77da:	4610      	mov	r0, r2
    77dc:	f7ff ffb0 	bl	7740 <bt_conn_le_param_update>
}
    77e0:	b003      	add	sp, #12
    77e2:	f85d fb04 	ldr.w	pc, [sp], #4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    77e6:	2113      	movs	r1, #19
    77e8:	4610      	mov	r0, r2
    77ea:	f7ff ff53 	bl	7694 <bt_conn_disconnect>
		return;
    77ee:	e7f7      	b.n	77e0 <le_conn_update+0x38>

000077f0 <le_conn_update>:
{
    77f0:	b510      	push	{r4, lr}
    77f2:	b082      	sub	sp, #8
    77f4:	460c      	mov	r4, r1
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    77f6:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    77f8:	8810      	ldrh	r0, [r2, #0]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    77fa:	8893      	ldrh	r3, [r2, #4]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    77fc:	88d1      	ldrh	r1, [r2, #6]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    77fe:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    7800:	9201      	str	r2, [sp, #4]
    7802:	9100      	str	r1, [sp, #0]
    7804:	2200      	movs	r2, #0
    7806:	4611      	mov	r1, r2
    7808:	f010 fdb6 	bl	18378 <ll_conn_update>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    780c:	b100      	cbz	r0, 7810 <le_conn_update+0x20>
    780e:	200c      	movs	r0, #12
    7810:	f005 fd82 	bl	d318 <cmd_status>
    7814:	6020      	str	r0, [r4, #0]
}
    7816:	b002      	add	sp, #8
    7818:	bd10      	pop	{r4, pc}
	...

0000781c <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    781c:	b538      	push	{r3, r4, r5, lr}
    781e:	460d      	mov	r5, r1
	struct net_buf *buf;

	if (!pool) {
    7820:	4603      	mov	r3, r0
    7822:	b150      	cbz	r0, 783a <bt_conn_create_pdu+0x1e>
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    7824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7828:	4618      	mov	r0, r3
    782a:	f013 f9d9 	bl	1abe0 <net_buf_alloc>
    782e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    7830:	1d29      	adds	r1, r5, #4
    7832:	f013 fa30 	bl	1ac96 <net_buf_reserve>

	return buf;
}
    7836:	4620      	mov	r0, r4
    7838:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
    783a:	4b01      	ldr	r3, [pc, #4]	; (7840 <bt_conn_create_pdu+0x24>)
    783c:	e7f2      	b.n	7824 <bt_conn_create_pdu+0x8>
    783e:	bf00      	nop
    7840:	2000d6e8 	.word	0x2000d6e8

00007844 <create_frag>:
{
    7844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7846:	4606      	mov	r6, r0
    7848:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(NULL, 0);
    784a:	2100      	movs	r1, #0
    784c:	4608      	mov	r0, r1
    784e:	f7ff ffe5 	bl	781c <bt_conn_create_pdu>
    7852:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    7854:	7b33      	ldrb	r3, [r6, #12]
    7856:	2b03      	cmp	r3, #3
    7858:	d121      	bne.n	789e <create_frag+0x5a>
    785a:	f100 0310 	add.w	r3, r0, #16
    785e:	89c2      	ldrh	r2, [r0, #14]
    7860:	4413      	add	r3, r2
    7862:	3303      	adds	r3, #3
    7864:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(frag)->cb = NULL;
    7868:	2200      	movs	r2, #0
    786a:	601a      	str	r2, [r3, #0]
	return bt_dev.le.mtu;
    786c:	4b10      	ldr	r3, [pc, #64]	; (78b0 <create_frag+0x6c>)
    786e:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    7872:	f100 0608 	add.w	r6, r0, #8
    7876:	4630      	mov	r0, r6
    7878:	f013 fad5 	bl	1ae26 <net_buf_simple_tailroom>
    787c:	4287      	cmp	r7, r0
    787e:	d212      	bcs.n	78a6 <create_frag+0x62>
	return bt_dev.le.mtu;
    7880:	4b0b      	ldr	r3, [pc, #44]	; (78b0 <create_frag+0x6c>)
    7882:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    7886:	463a      	mov	r2, r7
    7888:	f854 1f08 	ldr.w	r1, [r4, #8]!
    788c:	4630      	mov	r0, r6
    788e:	f013 fa67 	bl	1ad60 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    7892:	4639      	mov	r1, r7
    7894:	4620      	mov	r0, r4
    7896:	f013 faaa 	bl	1adee <net_buf_simple_pull>
}
    789a:	4628      	mov	r0, r5
    789c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
    789e:	f013 fa0d 	bl	1acbc <net_buf_unref>
		return NULL;
    78a2:	2500      	movs	r5, #0
    78a4:	e7f9      	b.n	789a <create_frag+0x56>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    78a6:	4630      	mov	r0, r6
    78a8:	f013 fabd 	bl	1ae26 <net_buf_simple_tailroom>
    78ac:	b287      	uxth	r7, r0
    78ae:	e7ea      	b.n	7886 <create_frag+0x42>
    78b0:	2000be68 	.word	0x2000be68

000078b4 <send_buf>:
{
    78b4:	b538      	push	{r3, r4, r5, lr}
    78b6:	4605      	mov	r5, r0
    78b8:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
    78ba:	898a      	ldrh	r2, [r1, #12]
	return bt_dev.le.mtu;
    78bc:	4b1b      	ldr	r3, [pc, #108]	; (792c <send_buf+0x78>)
    78be:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
	if (buf->len <= conn_mtu(conn)) {
    78c2:	429a      	cmp	r2, r3
    78c4:	d91f      	bls.n	7906 <send_buf+0x52>
	frag = create_frag(conn, buf);
    78c6:	f7ff ffbd 	bl	7844 <create_frag>
	if (!frag) {
    78ca:	4601      	mov	r1, r0
    78cc:	b350      	cbz	r0, 7924 <send_buf+0x70>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    78ce:	2301      	movs	r3, #1
    78d0:	2200      	movs	r2, #0
    78d2:	4628      	mov	r0, r5
    78d4:	f7ff fc04 	bl	70e0 <send_frag>
    78d8:	4603      	mov	r3, r0
    78da:	b1c8      	cbz	r0, 7910 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
    78dc:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.mtu;
    78de:	4a13      	ldr	r2, [pc, #76]	; (792c <send_buf+0x78>)
    78e0:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
	while (buf->len > conn_mtu(conn)) {
    78e4:	429a      	cmp	r2, r3
    78e6:	d215      	bcs.n	7914 <send_buf+0x60>
		frag = create_frag(conn, buf);
    78e8:	4621      	mov	r1, r4
    78ea:	4628      	mov	r0, r5
    78ec:	f7ff ffaa 	bl	7844 <create_frag>
		if (!frag) {
    78f0:	4601      	mov	r1, r0
    78f2:	b1c8      	cbz	r0, 7928 <send_buf+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    78f4:	2301      	movs	r3, #1
    78f6:	461a      	mov	r2, r3
    78f8:	4628      	mov	r0, r5
    78fa:	f7ff fbf1 	bl	70e0 <send_frag>
    78fe:	4603      	mov	r3, r0
    7900:	2800      	cmp	r0, #0
    7902:	d1eb      	bne.n	78dc <send_buf+0x28>
    7904:	e004      	b.n	7910 <send_buf+0x5c>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    7906:	2300      	movs	r3, #0
    7908:	461a      	mov	r2, r3
    790a:	f7ff fbe9 	bl	70e0 <send_frag>
    790e:	4603      	mov	r3, r0
}
    7910:	4618      	mov	r0, r3
    7912:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, BT_ACL_CONT, false);
    7914:	2300      	movs	r3, #0
    7916:	2201      	movs	r2, #1
    7918:	4621      	mov	r1, r4
    791a:	4628      	mov	r0, r5
    791c:	f7ff fbe0 	bl	70e0 <send_frag>
    7920:	4603      	mov	r3, r0
    7922:	e7f5      	b.n	7910 <send_buf+0x5c>
		return false;
    7924:	2300      	movs	r3, #0
    7926:	e7f3      	b.n	7910 <send_buf+0x5c>
			return false;
    7928:	2300      	movs	r3, #0
    792a:	e7f1      	b.n	7910 <send_buf+0x5c>
    792c:	2000be68 	.word	0x2000be68

00007930 <bt_conn_process_tx>:
{
    7930:	b538      	push	{r3, r4, r5, lr}
    7932:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    7934:	7b03      	ldrb	r3, [r0, #12]
    7936:	b97b      	cbnz	r3, 7958 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    7938:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    793a:	f3bf 8f5b 	dmb	ish
    793e:	e853 2f00 	ldrex	r2, [r3]
    7942:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    7946:	e843 1000 	strex	r0, r1, [r3]
    794a:	2800      	cmp	r0, #0
    794c:	d1f7      	bne.n	793e <bt_conn_process_tx+0xe>
    794e:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    7952:	f012 0f40 	tst.w	r2, #64	; 0x40
    7956:	d10c      	bne.n	7972 <bt_conn_process_tx+0x42>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    7958:	2100      	movs	r1, #0
    795a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    795e:	f013 f980 	bl	1ac62 <net_buf_get>
	BT_ASSERT(buf);
    7962:	4605      	mov	r5, r0
    7964:	b148      	cbz	r0, 797a <bt_conn_process_tx+0x4a>
	if (!send_buf(conn, buf)) {
    7966:	4601      	mov	r1, r0
    7968:	4620      	mov	r0, r4
    796a:	f7ff ffa3 	bl	78b4 <send_buf>
    796e:	b150      	cbz	r0, 7986 <bt_conn_process_tx+0x56>
    7970:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
    7972:	4620      	mov	r0, r4
    7974:	f7ff fcd7 	bl	7326 <conn_cleanup>
		return;
    7978:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    797a:	4040      	eors	r0, r0
    797c:	f380 8811 	msr	BASEPRI, r0
    7980:	f04f 0004 	mov.w	r0, #4
    7984:	df02      	svc	2
		net_buf_unref(buf);
    7986:	4628      	mov	r0, r5
    7988:	f013 f998 	bl	1acbc <net_buf_unref>
    798c:	e7f0      	b.n	7970 <bt_conn_process_tx+0x40>
	...

00007990 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    7990:	4b03      	ldr	r3, [pc, #12]	; (79a0 <bt_conn_get_id+0x10>)
    7992:	1ac0      	subs	r0, r0, r3
    7994:	1080      	asrs	r0, r0, #2
    7996:	4b03      	ldr	r3, [pc, #12]	; (79a4 <bt_conn_get_id+0x14>)
    7998:	fb03 f000 	mul.w	r0, r3, r0
}
    799c:	b2c0      	uxtb	r0, r0
    799e:	4770      	bx	lr
    79a0:	200009f0 	.word	0x200009f0
    79a4:	96f96f97 	.word	0x96f96f97

000079a8 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    79a8:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    79aa:	2300      	movs	r3, #0
    79ac:	e000      	b.n	79b0 <bt_conn_init+0x8>
    79ae:	3301      	adds	r3, #1
    79b0:	2b01      	cmp	r3, #1
    79b2:	d80d      	bhi.n	79d0 <bt_conn_init+0x28>
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    79b4:	491a      	ldr	r1, [pc, #104]	; (7a20 <bt_conn_init+0x78>)
    79b6:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
	node->next = list->head;
    79ba:	4a1a      	ldr	r2, [pc, #104]	; (7a24 <bt_conn_init+0x7c>)
    79bc:	6814      	ldr	r4, [r2, #0]
    79be:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
	list->head = node;
    79c2:	6010      	str	r0, [r2, #0]
	if (!list->tail) {
    79c4:	6852      	ldr	r2, [r2, #4]
    79c6:	2a00      	cmp	r2, #0
    79c8:	d1f1      	bne.n	79ae <bt_conn_init+0x6>
		list->tail = list->head;
    79ca:	4a16      	ldr	r2, [pc, #88]	; (7a24 <bt_conn_init+0x7c>)
    79cc:	6050      	str	r0, [r2, #4]
    79ce:	e7ee      	b.n	79ae <bt_conn_init+0x6>
	}

	bt_att_init();
    79d0:	f002 fa68 	bl	9ea4 <bt_att_init>

	err = bt_smp_init();
    79d4:	f005 fba2 	bl	d11c <bt_smp_init>
	if (err) {
    79d8:	4605      	mov	r5, r0
    79da:	b108      	cbz	r0, 79e0 <bt_conn_init+0x38>
			}
		}
	}

	return 0;
}
    79dc:	4628      	mov	r0, r5
    79de:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
    79e0:	f000 ff20 	bl	8824 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    79e4:	462c      	mov	r4, r5
    79e6:	2c00      	cmp	r4, #0
    79e8:	d1f8      	bne.n	79dc <bt_conn_init+0x34>
			struct bt_conn *conn = &conns[i];
    79ea:	4a0f      	ldr	r2, [pc, #60]	; (7a28 <bt_conn_init+0x80>)
    79ec:	239c      	movs	r3, #156	; 0x9c
    79ee:	fb03 f304 	mul.w	r3, r3, r4
    79f2:	18d0      	adds	r0, r2, r3
			if (!atomic_get(&conn->ref)) {
    79f4:	3340      	adds	r3, #64	; 0x40
    79f6:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    79f8:	f3bf 8f5b 	dmb	ish
    79fc:	685b      	ldr	r3, [r3, #4]
    79fe:	f3bf 8f5b 	dmb	ish
    7a02:	b90b      	cbnz	r3, 7a08 <bt_conn_init+0x60>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7a04:	3401      	adds	r4, #1
    7a06:	e7ee      	b.n	79e6 <bt_conn_init+0x3e>
    7a08:	f3bf 8f5b 	dmb	ish
    7a0c:	6843      	ldr	r3, [r0, #4]
    7a0e:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(conn->flags,
    7a12:	f013 0f01 	tst.w	r3, #1
    7a16:	d0f5      	beq.n	7a04 <bt_conn_init+0x5c>
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7a18:	2101      	movs	r1, #1
    7a1a:	f7ff fd05 	bl	7428 <bt_conn_set_state>
    7a1e:	e7f1      	b.n	7a04 <bt_conn_init+0x5c>
    7a20:	200009e0 	.word	0x200009e0
    7a24:	20000b7c 	.word	0x20000b7c
    7a28:	200009f0 	.word	0x200009f0

00007a2c <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    7a2c:	4a05      	ldr	r2, [pc, #20]	; (7a44 <get_ident+0x18>)
    7a2e:	7813      	ldrb	r3, [r2, #0]
    7a30:	3301      	adds	r3, #1
    7a32:	b2db      	uxtb	r3, r3
    7a34:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    7a36:	b90b      	cbnz	r3, 7a3c <get_ident+0x10>
		ident++;
    7a38:	3301      	adds	r3, #1
    7a3a:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
    7a3c:	4b01      	ldr	r3, [pc, #4]	; (7a44 <get_ident+0x18>)
    7a3e:	7818      	ldrb	r0, [r3, #0]
    7a40:	4770      	bx	lr
    7a42:	bf00      	nop
    7a44:	20000c20 	.word	0x20000c20

00007a48 <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    7a48:	b430      	push	{r4, r5}
	return list->head;
    7a4a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7a4c:	b113      	cbz	r3, 7a54 <__l2cap_lookup_ident+0xc>
    7a4e:	3b08      	subs	r3, #8
    7a50:	2400      	movs	r4, #0
    7a52:	e01b      	b.n	7a8c <__l2cap_lookup_ident+0x44>
    7a54:	2300      	movs	r3, #0
    7a56:	e7fb      	b.n	7a50 <__l2cap_lookup_ident+0x8>
		if (chan->ident == ident) {
			if (remove) {
    7a58:	b35a      	cbz	r2, 7ab2 <__l2cap_lookup_ident+0x6a>
				sys_slist_remove(&conn->channels, prev,
    7a5a:	f103 0208 	add.w	r2, r3, #8
	if (!prev_node) {
    7a5e:	b144      	cbz	r4, 7a72 <__l2cap_lookup_ident+0x2a>
		prev_node->next = node->next;
    7a60:	6899      	ldr	r1, [r3, #8]
    7a62:	6021      	str	r1, [r4, #0]
		if (list->tail == node) {
    7a64:	6c01      	ldr	r1, [r0, #64]	; 0x40
    7a66:	428a      	cmp	r2, r1
    7a68:	d00a      	beq.n	7a80 <__l2cap_lookup_ident+0x38>
	node->next = NULL;
    7a6a:	2200      	movs	r2, #0
    7a6c:	609a      	str	r2, [r3, #8]
						 &chan->node);
			}
			return BT_L2CAP_LE_CHAN(chan);
    7a6e:	4618      	mov	r0, r3
    7a70:	e01d      	b.n	7aae <__l2cap_lookup_ident+0x66>
		list->head = node->next;
    7a72:	6899      	ldr	r1, [r3, #8]
    7a74:	63c1      	str	r1, [r0, #60]	; 0x3c
		if (list->tail == node) {
    7a76:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7a78:	4294      	cmp	r4, r2
    7a7a:	d1f6      	bne.n	7a6a <__l2cap_lookup_ident+0x22>
			list->tail = list->head;
    7a7c:	6401      	str	r1, [r0, #64]	; 0x40
    7a7e:	e7f4      	b.n	7a6a <__l2cap_lookup_ident+0x22>
			list->tail = prev_node;
    7a80:	6404      	str	r4, [r0, #64]	; 0x40
    7a82:	e7f2      	b.n	7a6a <__l2cap_lookup_ident+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7a84:	4625      	mov	r5, r4
    7a86:	e00a      	b.n	7a9e <__l2cap_lookup_ident+0x56>
    7a88:	4623      	mov	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7a8a:	3b08      	subs	r3, #8
    7a8c:	b173      	cbz	r3, 7aac <__l2cap_lookup_ident+0x64>
		if (chan->ident == ident) {
    7a8e:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
    7a92:	428d      	cmp	r5, r1
    7a94:	d0e0      	beq.n	7a58 <__l2cap_lookup_ident+0x10>
    7a96:	f113 0408 	adds.w	r4, r3, #8
    7a9a:	d0f3      	beq.n	7a84 <__l2cap_lookup_ident+0x3c>
	return node->next;
    7a9c:	689d      	ldr	r5, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7a9e:	b11d      	cbz	r5, 7aa8 <__l2cap_lookup_ident+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7aa0:	2c00      	cmp	r4, #0
    7aa2:	d0f1      	beq.n	7a88 <__l2cap_lookup_ident+0x40>
	return node->next;
    7aa4:	689b      	ldr	r3, [r3, #8]
    7aa6:	e7f0      	b.n	7a8a <__l2cap_lookup_ident+0x42>
    7aa8:	2300      	movs	r3, #0
    7aaa:	e7ef      	b.n	7a8c <__l2cap_lookup_ident+0x44>
		}

		prev = &chan->node;
	}

	return NULL;
    7aac:	2000      	movs	r0, #0
}
    7aae:	bc30      	pop	{r4, r5}
    7ab0:	4770      	bx	lr
			return BT_L2CAP_LE_CHAN(chan);
    7ab2:	4618      	mov	r0, r3
    7ab4:	e7fb      	b.n	7aae <__l2cap_lookup_ident+0x66>
	...

00007ab8 <l2cap_server_lookup_psm>:
	return list->head;
    7ab8:	4b0d      	ldr	r3, [pc, #52]	; (7af0 <l2cap_server_lookup_psm+0x38>)
    7aba:	681b      	ldr	r3, [r3, #0]
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    7abc:	b10b      	cbz	r3, 7ac2 <l2cap_server_lookup_psm+0xa>
    7abe:	3b08      	subs	r3, #8
    7ac0:	e006      	b.n	7ad0 <l2cap_server_lookup_psm+0x18>
    7ac2:	2300      	movs	r3, #0
    7ac4:	e004      	b.n	7ad0 <l2cap_server_lookup_psm+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7ac6:	4611      	mov	r1, r2
    7ac8:	e00a      	b.n	7ae0 <l2cap_server_lookup_psm+0x28>
	return node->next;
    7aca:	689a      	ldr	r2, [r3, #8]
    7acc:	f1a2 0308 	sub.w	r3, r2, #8
    7ad0:	b163      	cbz	r3, 7aec <l2cap_server_lookup_psm+0x34>
		if (server->psm == psm) {
    7ad2:	881a      	ldrh	r2, [r3, #0]
    7ad4:	4282      	cmp	r2, r0
    7ad6:	d009      	beq.n	7aec <l2cap_server_lookup_psm+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7ad8:	f113 0208 	adds.w	r2, r3, #8
    7adc:	d0f3      	beq.n	7ac6 <l2cap_server_lookup_psm+0xe>
	return node->next;
    7ade:	6899      	ldr	r1, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    7ae0:	b111      	cbz	r1, 7ae8 <l2cap_server_lookup_psm+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7ae2:	2a00      	cmp	r2, #0
    7ae4:	d1f1      	bne.n	7aca <l2cap_server_lookup_psm+0x12>
    7ae6:	e7f1      	b.n	7acc <l2cap_server_lookup_psm+0x14>
    7ae8:	2300      	movs	r3, #0
    7aea:	e7f1      	b.n	7ad0 <l2cap_server_lookup_psm+0x18>
			return server;
		}
	}

	return NULL;
}
    7aec:	4618      	mov	r0, r3
    7aee:	4770      	bx	lr
    7af0:	20000c2c 	.word	0x20000c2c

00007af4 <l2cap_remove_tx_cid>:
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    7af4:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    7af8:	b29b      	uxth	r3, r3
    7afa:	2b3f      	cmp	r3, #63	; 0x3f
    7afc:	d835      	bhi.n	7b6a <l2cap_remove_tx_cid+0x76>
	return list->head;
    7afe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7b00:	b12b      	cbz	r3, 7b0e <l2cap_remove_tx_cid+0x1a>
    7b02:	3b08      	subs	r3, #8
    7b04:	2200      	movs	r2, #0
    7b06:	2b00      	cmp	r3, #0
    7b08:	d031      	beq.n	7b6e <l2cap_remove_tx_cid+0x7a>
{
    7b0a:	b410      	push	{r4}
    7b0c:	e01c      	b.n	7b48 <l2cap_remove_tx_cid+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7b0e:	2300      	movs	r3, #0
    7b10:	e7f8      	b.n	7b04 <l2cap_remove_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
			sys_slist_remove(&conn->channels, prev, &chan->node);
    7b12:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    7b16:	b14a      	cbz	r2, 7b2c <l2cap_remove_tx_cid+0x38>
		prev_node->next = node->next;
    7b18:	689c      	ldr	r4, [r3, #8]
    7b1a:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    7b1c:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7b1e:	42a1      	cmp	r1, r4
    7b20:	d00b      	beq.n	7b3a <l2cap_remove_tx_cid+0x46>
	node->next = NULL;
    7b22:	2200      	movs	r2, #0
    7b24:	609a      	str	r2, [r3, #8]
			return BT_L2CAP_LE_CHAN(chan);
    7b26:	4618      	mov	r0, r3

		prev = &chan->node;
	}

	return NULL;
}
    7b28:	bc10      	pop	{r4}
    7b2a:	4770      	bx	lr
		list->head = node->next;
    7b2c:	689a      	ldr	r2, [r3, #8]
    7b2e:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    7b30:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7b32:	428c      	cmp	r4, r1
    7b34:	d1f5      	bne.n	7b22 <l2cap_remove_tx_cid+0x2e>
			list->tail = list->head;
    7b36:	6402      	str	r2, [r0, #64]	; 0x40
    7b38:	e7f3      	b.n	7b22 <l2cap_remove_tx_cid+0x2e>
			list->tail = prev_node;
    7b3a:	6402      	str	r2, [r0, #64]	; 0x40
    7b3c:	e7f1      	b.n	7b22 <l2cap_remove_tx_cid+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b3e:	4614      	mov	r4, r2
    7b40:	e00a      	b.n	7b58 <l2cap_remove_tx_cid+0x64>
    7b42:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7b44:	3b08      	subs	r3, #8
    7b46:	b173      	cbz	r3, 7b66 <l2cap_remove_tx_cid+0x72>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    7b48:	f8b3 4040 	ldrh.w	r4, [r3, #64]	; 0x40
    7b4c:	42a1      	cmp	r1, r4
    7b4e:	d0e0      	beq.n	7b12 <l2cap_remove_tx_cid+0x1e>
    7b50:	f113 0208 	adds.w	r2, r3, #8
    7b54:	d0f3      	beq.n	7b3e <l2cap_remove_tx_cid+0x4a>
	return node->next;
    7b56:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7b58:	b11c      	cbz	r4, 7b62 <l2cap_remove_tx_cid+0x6e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b5a:	2a00      	cmp	r2, #0
    7b5c:	d0f1      	beq.n	7b42 <l2cap_remove_tx_cid+0x4e>
	return node->next;
    7b5e:	689b      	ldr	r3, [r3, #8]
    7b60:	e7f0      	b.n	7b44 <l2cap_remove_tx_cid+0x50>
    7b62:	2300      	movs	r3, #0
    7b64:	e7ef      	b.n	7b46 <l2cap_remove_tx_cid+0x52>
	return NULL;
    7b66:	2000      	movs	r0, #0
    7b68:	e7de      	b.n	7b28 <l2cap_remove_tx_cid+0x34>
		return NULL;
    7b6a:	2000      	movs	r0, #0
    7b6c:	4770      	bx	lr
	return NULL;
    7b6e:	2000      	movs	r0, #0
}
    7b70:	4770      	bx	lr

00007b72 <l2cap_connected>:

	return 0;
}

static void l2cap_connected(struct bt_l2cap_chan *chan)
{
    7b72:	4770      	bx	lr

00007b74 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    7b74:	4770      	bx	lr
	...

00007b78 <l2cap_accept>:
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    7b78:	2000      	movs	r0, #0
    7b7a:	b110      	cbz	r0, 7b82 <l2cap_accept+0xa>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    7b7c:	f06f 000b 	mvn.w	r0, #11
}
    7b80:	4770      	bx	lr
		if (l2cap->chan.chan.conn) {
    7b82:	239c      	movs	r3, #156	; 0x9c
    7b84:	fb03 f300 	mul.w	r3, r3, r0
    7b88:	4a06      	ldr	r2, [pc, #24]	; (7ba4 <l2cap_accept+0x2c>)
    7b8a:	58d3      	ldr	r3, [r2, r3]
    7b8c:	b10b      	cbz	r3, 7b92 <l2cap_accept+0x1a>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    7b8e:	3001      	adds	r0, #1
    7b90:	e7f3      	b.n	7b7a <l2cap_accept+0x2>
		l2cap->chan.chan.ops = &ops;
    7b92:	239c      	movs	r3, #156	; 0x9c
    7b94:	4a03      	ldr	r2, [pc, #12]	; (7ba4 <l2cap_accept+0x2c>)
    7b96:	fb03 2300 	mla	r3, r3, r0, r2
    7b9a:	4a03      	ldr	r2, [pc, #12]	; (7ba8 <l2cap_accept+0x30>)
    7b9c:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    7b9e:	600b      	str	r3, [r1, #0]
		return 0;
    7ba0:	4770      	bx	lr
    7ba2:	bf00      	nop
    7ba4:	20000b84 	.word	0x20000b84
    7ba8:	2000bfbc 	.word	0x2000bfbc

00007bac <l2cap_alloc_frag>:
{
    7bac:	b538      	push	{r3, r4, r5, lr}
    7bae:	4605      	mov	r5, r0
	frag = chan->chan.ops->alloc_buf(&chan->chan);
    7bb0:	6843      	ldr	r3, [r0, #4]
    7bb2:	68db      	ldr	r3, [r3, #12]
    7bb4:	4798      	blx	r3
	if (!frag) {
    7bb6:	4604      	mov	r4, r0
    7bb8:	b120      	cbz	r0, 7bc4 <l2cap_alloc_frag+0x18>
	net_buf_frag_add(chan->_sdu, frag);
    7bba:	4601      	mov	r1, r0
    7bbc:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    7bc0:	f013 f8ad 	bl	1ad1e <net_buf_frag_add>
}
    7bc4:	4620      	mov	r0, r4
    7bc6:	bd38      	pop	{r3, r4, r5, pc}

00007bc8 <l2cap_chan_rx_give_credits>:
{
    7bc8:	b538      	push	{r3, r4, r5, lr}
    7bca:	4605      	mov	r5, r0
	while (credits--) {
    7bcc:	e004      	b.n	7bd8 <l2cap_chan_rx_give_credits+0x10>
    7bce:	f105 0048 	add.w	r0, r5, #72	; 0x48
    7bd2:	f021 fbbe 	bl	29352 <_impl_k_sem_give>
    7bd6:	4621      	mov	r1, r4
    7bd8:	1e4b      	subs	r3, r1, #1
    7bda:	b29c      	uxth	r4, r3
    7bdc:	2900      	cmp	r1, #0
    7bde:	d1f6      	bne.n	7bce <l2cap_chan_rx_give_credits+0x6>
}
    7be0:	bd38      	pop	{r3, r4, r5, pc}

00007be2 <l2cap_chan_tx_give_credits>:
{
    7be2:	b538      	push	{r3, r4, r5, lr}
    7be4:	4605      	mov	r5, r0
	while (credits--) {
    7be6:	e004      	b.n	7bf2 <l2cap_chan_tx_give_credits+0x10>
    7be8:	f105 0068 	add.w	r0, r5, #104	; 0x68
    7bec:	f021 fbb1 	bl	29352 <_impl_k_sem_give>
    7bf0:	4621      	mov	r1, r4
    7bf2:	1e4b      	subs	r3, r1, #1
    7bf4:	b29c      	uxth	r4, r3
    7bf6:	2900      	cmp	r1, #0
    7bf8:	d1f6      	bne.n	7be8 <l2cap_chan_tx_give_credits+0x6>
}
    7bfa:	bd38      	pop	{r3, r4, r5, pc}

00007bfc <l2cap_chan_destroy>:
{
    7bfc:	b510      	push	{r4, lr}
    7bfe:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    7c00:	3010      	adds	r0, #16
    7c02:	f022 f995 	bl	29f30 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    7c06:	e002      	b.n	7c0e <l2cap_chan_destroy+0x12>
		net_buf_unref(buf);
    7c08:	4618      	mov	r0, r3
    7c0a:	f013 f857 	bl	1acbc <net_buf_unref>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    7c0e:	2100      	movs	r1, #0
    7c10:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7c14:	f013 f825 	bl	1ac62 <net_buf_get>
    7c18:	4603      	mov	r3, r0
    7c1a:	2800      	cmp	r0, #0
    7c1c:	d1f4      	bne.n	7c08 <l2cap_chan_destroy+0xc>
	if (ch->_sdu) {
    7c1e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    7c22:	b130      	cbz	r0, 7c32 <l2cap_chan_destroy+0x36>
		net_buf_unref(ch->_sdu);
    7c24:	f013 f84a 	bl	1acbc <net_buf_unref>
		ch->_sdu = NULL;
    7c28:	2300      	movs	r3, #0
    7c2a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		ch->_sdu_len = 0;
    7c2e:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    7c32:	bd10      	pop	{r4, pc}

00007c34 <l2cap_chan_le_get_tx_buf>:
{
    7c34:	b508      	push	{r3, lr}
    7c36:	4603      	mov	r3, r0
	if (ch->tx_buf) {
    7c38:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    7c3c:	b118      	cbz	r0, 7c46 <l2cap_chan_le_get_tx_buf+0x12>
		ch->tx_buf = NULL;
    7c3e:	2200      	movs	r2, #0
    7c40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return buf;
    7c44:	bd08      	pop	{r3, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    7c46:	2100      	movs	r1, #0
    7c48:	f103 0080 	add.w	r0, r3, #128	; 0x80
    7c4c:	f013 f809 	bl	1ac62 <net_buf_get>
}
    7c50:	bd08      	pop	{r3, pc}

00007c52 <l2cap_chan_tx_init>:
{
    7c52:	b510      	push	{r4, lr}
    7c54:	4604      	mov	r4, r0
	memset(&chan->tx, 0, sizeof(chan->tx));
    7c56:	2220      	movs	r2, #32
    7c58:	2100      	movs	r1, #0
    7c5a:	3060      	adds	r0, #96	; 0x60
    7c5c:	f022 fe2c 	bl	2a8b8 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    7c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7c64:	2100      	movs	r1, #0
    7c66:	f104 0068 	add.w	r0, r4, #104	; 0x68
    7c6a:	f021 fb69 	bl	29340 <_impl_k_sem_init>
	k_fifo_init(&chan->tx_queue);
    7c6e:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7c72:	f020 ffa4 	bl	28bbe <k_queue_init>
    7c76:	bd10      	pop	{r4, pc}

00007c78 <l2cap_chan_rx_init>:
{
    7c78:	b508      	push	{r3, lr}
	if (!chan->rx.mtu) {
    7c7a:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7c7e:	b913      	cbnz	r3, 7c86 <l2cap_chan_rx_init+0xe>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    7c80:	2342      	movs	r3, #66	; 0x42
    7c82:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	if (!chan->rx.init_credits) {
    7c86:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    7c8a:	b96b      	cbnz	r3, 7ca8 <l2cap_chan_rx_init+0x30>
		if (chan->chan.ops->alloc_buf) {
    7c8c:	6843      	ldr	r3, [r0, #4]
    7c8e:	68db      	ldr	r3, [r3, #12]
    7c90:	b1cb      	cbz	r3, 7cc6 <l2cap_chan_rx_init+0x4e>
			chan->rx.init_credits = (chan->rx.mtu +
    7c92:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7c96:	3343      	adds	r3, #67	; 0x43
						 (L2CAP_MAX_LE_MPS - 1)) /
    7c98:	4a0d      	ldr	r2, [pc, #52]	; (7cd0 <l2cap_chan_rx_init+0x58>)
    7c9a:	fb82 1203 	smull	r1, r2, r2, r3
    7c9e:	17db      	asrs	r3, r3, #31
    7ca0:	ebc3 1362 	rsb	r3, r3, r2, asr #5
			chan->rx.init_credits = (chan->rx.mtu +
    7ca4:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    7ca8:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7cac:	3302      	adds	r3, #2
    7cae:	2b44      	cmp	r3, #68	; 0x44
    7cb0:	bfa8      	it	ge
    7cb2:	2344      	movge	r3, #68	; 0x44
    7cb4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    7cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7cbc:	2100      	movs	r1, #0
    7cbe:	3048      	adds	r0, #72	; 0x48
    7cc0:	f021 fb3e 	bl	29340 <_impl_k_sem_init>
    7cc4:	bd08      	pop	{r3, pc}
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    7cc6:	2302      	movs	r3, #2
    7cc8:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    7ccc:	e7ec      	b.n	7ca8 <l2cap_chan_rx_init+0x30>
    7cce:	bf00      	nop
    7cd0:	78787879 	.word	0x78787879

00007cd4 <l2cap_change_security>:
{
    7cd4:	b508      	push	{r3, lr}
	switch (err) {
    7cd6:	2905      	cmp	r1, #5
    7cd8:	d00e      	beq.n	7cf8 <l2cap_change_security+0x24>
    7cda:	2908      	cmp	r1, #8
    7cdc:	d120      	bne.n	7d20 <l2cap_change_security+0x4c>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    7cde:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    7ce2:	2b01      	cmp	r3, #1
    7ce4:	d81f      	bhi.n	7d26 <l2cap_change_security+0x52>
		chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7ce6:	2302      	movs	r3, #2
    7ce8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    7cec:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
    7cf0:	6800      	ldr	r0, [r0, #0]
    7cf2:	f7ff f917 	bl	6f24 <bt_conn_security>
    7cf6:	bd08      	pop	{r3, pc}
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    7cf8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    7cfc:	2b01      	cmp	r3, #1
    7cfe:	d905      	bls.n	7d0c <l2cap_change_security+0x38>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    7d00:	2b02      	cmp	r3, #2
    7d02:	d807      	bhi.n	7d14 <l2cap_change_security+0x40>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    7d04:	2303      	movs	r3, #3
    7d06:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7d0a:	e7ef      	b.n	7cec <l2cap_change_security+0x18>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7d0c:	2302      	movs	r3, #2
    7d0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7d12:	e7eb      	b.n	7cec <l2cap_change_security+0x18>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    7d14:	2b03      	cmp	r3, #3
    7d16:	d809      	bhi.n	7d2c <l2cap_change_security+0x58>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    7d18:	2304      	movs	r3, #4
    7d1a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7d1e:	e7e5      	b.n	7cec <l2cap_change_security+0x18>
		return -EINVAL;
    7d20:	f06f 0015 	mvn.w	r0, #21
    7d24:	bd08      	pop	{r3, pc}
			return -EALREADY;
    7d26:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7d2a:	bd08      	pop	{r3, pc}
			return -EALREADY;
    7d2c:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    7d30:	bd08      	pop	{r3, pc}
	...

00007d34 <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    7d34:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    7d38:	2200      	movs	r2, #0
    7d3a:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    7d3c:	4a05      	ldr	r2, [pc, #20]	; (7d54 <bt_l2cap_le_fixed_chan_register+0x20>)
    7d3e:	6852      	ldr	r2, [r2, #4]
    7d40:	b11a      	cbz	r2, 7d4a <bt_l2cap_le_fixed_chan_register+0x16>
		list->tail->next = node;
    7d42:	6013      	str	r3, [r2, #0]
		list->tail = node;
    7d44:	4a03      	ldr	r2, [pc, #12]	; (7d54 <bt_l2cap_le_fixed_chan_register+0x20>)
    7d46:	6053      	str	r3, [r2, #4]
    7d48:	4770      	bx	lr
		list->tail = node;
    7d4a:	4a02      	ldr	r2, [pc, #8]	; (7d54 <bt_l2cap_le_fixed_chan_register+0x20>)
    7d4c:	6053      	str	r3, [r2, #4]
		list->head = node;
    7d4e:	6013      	str	r3, [r2, #0]
    7d50:	4770      	bx	lr
    7d52:	bf00      	nop
    7d54:	20000c24 	.word	0x20000c24

00007d58 <bt_l2cap_chan_remove>:
	return list->head;
    7d58:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7d5a:	b123      	cbz	r3, 7d66 <bt_l2cap_chan_remove+0xe>
    7d5c:	3b08      	subs	r3, #8
    7d5e:	2200      	movs	r2, #0
    7d60:	b35b      	cbz	r3, 7dba <bt_l2cap_chan_remove+0x62>
{
    7d62:	b410      	push	{r4}
    7d64:	e01c      	b.n	7da0 <bt_l2cap_chan_remove+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7d66:	2300      	movs	r3, #0
    7d68:	e7f9      	b.n	7d5e <bt_l2cap_chan_remove+0x6>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    7d6a:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    7d6e:	b142      	cbz	r2, 7d82 <bt_l2cap_chan_remove+0x2a>
		prev_node->next = node->next;
    7d70:	689c      	ldr	r4, [r3, #8]
    7d72:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    7d74:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7d76:	42a1      	cmp	r1, r4
    7d78:	d00a      	beq.n	7d90 <bt_l2cap_chan_remove+0x38>
	node->next = NULL;
    7d7a:	2200      	movs	r2, #0
    7d7c:	609a      	str	r2, [r3, #8]
}
    7d7e:	bc10      	pop	{r4}
    7d80:	4770      	bx	lr
		list->head = node->next;
    7d82:	689a      	ldr	r2, [r3, #8]
    7d84:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    7d86:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7d88:	428c      	cmp	r4, r1
    7d8a:	d1f6      	bne.n	7d7a <bt_l2cap_chan_remove+0x22>
			list->tail = list->head;
    7d8c:	6402      	str	r2, [r0, #64]	; 0x40
    7d8e:	e7f4      	b.n	7d7a <bt_l2cap_chan_remove+0x22>
			list->tail = prev_node;
    7d90:	6402      	str	r2, [r0, #64]	; 0x40
    7d92:	e7f2      	b.n	7d7a <bt_l2cap_chan_remove+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7d94:	4614      	mov	r4, r2
    7d96:	e009      	b.n	7dac <bt_l2cap_chan_remove+0x54>
    7d98:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7d9a:	3b08      	subs	r3, #8
    7d9c:	2b00      	cmp	r3, #0
    7d9e:	d0ee      	beq.n	7d7e <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
    7da0:	428b      	cmp	r3, r1
    7da2:	d0e2      	beq.n	7d6a <bt_l2cap_chan_remove+0x12>
    7da4:	f113 0208 	adds.w	r2, r3, #8
    7da8:	d0f4      	beq.n	7d94 <bt_l2cap_chan_remove+0x3c>
	return node->next;
    7daa:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7dac:	b11c      	cbz	r4, 7db6 <bt_l2cap_chan_remove+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7dae:	2a00      	cmp	r2, #0
    7db0:	d0f2      	beq.n	7d98 <bt_l2cap_chan_remove+0x40>
	return node->next;
    7db2:	689b      	ldr	r3, [r3, #8]
    7db4:	e7f1      	b.n	7d9a <bt_l2cap_chan_remove+0x42>
    7db6:	2300      	movs	r3, #0
    7db8:	e7f0      	b.n	7d9c <bt_l2cap_chan_remove+0x44>
    7dba:	4770      	bx	lr

00007dbc <bt_l2cap_chan_set_state>:
	chan->state = state;
    7dbc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    7dc0:	4770      	bx	lr

00007dc2 <bt_l2cap_chan_del>:
{
    7dc2:	b510      	push	{r4, lr}
    7dc4:	4604      	mov	r4, r0
	if (!chan->conn) {
    7dc6:	6803      	ldr	r3, [r0, #0]
    7dc8:	b12b      	cbz	r3, 7dd6 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    7dca:	6843      	ldr	r3, [r0, #4]
    7dcc:	685b      	ldr	r3, [r3, #4]
    7dce:	b103      	cbz	r3, 7dd2 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    7dd0:	4798      	blx	r3
	chan->conn = NULL;
    7dd2:	2300      	movs	r3, #0
    7dd4:	6023      	str	r3, [r4, #0]
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
    7dd6:	2100      	movs	r1, #0
    7dd8:	4620      	mov	r0, r4
    7dda:	f7ff ffef 	bl	7dbc <bt_l2cap_chan_set_state>
	chan->psm = 0;
    7dde:	2300      	movs	r3, #0
    7de0:	8763      	strh	r3, [r4, #58]	; 0x3a
	if (chan->destroy) {
    7de2:	68e3      	ldr	r3, [r4, #12]
    7de4:	b10b      	cbz	r3, 7dea <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    7de6:	4620      	mov	r0, r4
    7de8:	4798      	blx	r3
    7dea:	bd10      	pop	{r4, pc}

00007dec <l2cap_rtx_timeout>:
{
    7dec:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    7dee:	f1a0 0410 	sub.w	r4, r0, #16
    7df2:	4621      	mov	r1, r4
    7df4:	f850 0c10 	ldr.w	r0, [r0, #-16]
    7df8:	f7ff ffae 	bl	7d58 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    7dfc:	4620      	mov	r0, r4
    7dfe:	f7ff ffe0 	bl	7dc2 <bt_l2cap_chan_del>
    7e02:	bd10      	pop	{r4, pc}

00007e04 <le_conn_rsp>:
{
    7e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7e08:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    7e0a:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    7e0c:	8992      	ldrh	r2, [r2, #12]
    7e0e:	2a09      	cmp	r2, #9
    7e10:	d927      	bls.n	7e62 <le_conn_rsp+0x5e>
	dcid = sys_le16_to_cpu(rsp->dcid);
    7e12:	f8b3 a000 	ldrh.w	sl, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    7e16:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    7e1a:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    7e1e:	88df      	ldrh	r7, [r3, #6]
	result = sys_le16_to_cpu(rsp->result);
    7e20:	891d      	ldrh	r5, [r3, #8]
	if (result == BT_L2CAP_SUCCESS ||
    7e22:	b14d      	cbz	r5, 7e38 <le_conn_rsp+0x34>
    7e24:	2d05      	cmp	r5, #5
    7e26:	d007      	beq.n	7e38 <le_conn_rsp+0x34>
	    result == BT_L2CAP_ERR_AUTHENTICATION ||
    7e28:	2d08      	cmp	r5, #8
    7e2a:	d005      	beq.n	7e38 <le_conn_rsp+0x34>
		chan = l2cap_remove_ident(conn, ident);
    7e2c:	2201      	movs	r2, #1
    7e2e:	4630      	mov	r0, r6
    7e30:	f7ff fe0a 	bl	7a48 <__l2cap_lookup_ident>
    7e34:	4604      	mov	r4, r0
    7e36:	e004      	b.n	7e42 <le_conn_rsp+0x3e>
		chan = l2cap_lookup_ident(conn, ident);
    7e38:	2200      	movs	r2, #0
    7e3a:	4630      	mov	r0, r6
    7e3c:	f7ff fe04 	bl	7a48 <__l2cap_lookup_ident>
    7e40:	4604      	mov	r4, r0
	if (!chan) {
    7e42:	b174      	cbz	r4, 7e62 <le_conn_rsp+0x5e>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    7e44:	f104 0010 	add.w	r0, r4, #16
    7e48:	f022 f872 	bl	29f30 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    7e4c:	2300      	movs	r3, #0
    7e4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	switch (result) {
    7e52:	2d05      	cmp	r5, #5
    7e54:	d021      	beq.n	7e9a <le_conn_rsp+0x96>
    7e56:	2d08      	cmp	r5, #8
    7e58:	d01f      	beq.n	7e9a <le_conn_rsp+0x96>
    7e5a:	b125      	cbz	r5, 7e66 <le_conn_rsp+0x62>
		bt_l2cap_chan_del(&chan->chan);
    7e5c:	4620      	mov	r0, r4
    7e5e:	f7ff ffb0 	bl	7dc2 <bt_l2cap_chan_del>
    7e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chan->tx.cid = dcid;
    7e66:	f8a4 a060 	strh.w	sl, [r4, #96]	; 0x60
		chan->tx.mtu = mtu;
    7e6a:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
		chan->tx.mps = mps;
    7e6e:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
		bt_l2cap_chan_set_state(&chan->chan, BT_L2CAP_CONNECTED);
    7e72:	2103      	movs	r1, #3
    7e74:	4620      	mov	r0, r4
    7e76:	f7ff ffa1 	bl	7dbc <bt_l2cap_chan_set_state>
		if (chan->chan.ops->connected) {
    7e7a:	6863      	ldr	r3, [r4, #4]
    7e7c:	681b      	ldr	r3, [r3, #0]
    7e7e:	b10b      	cbz	r3, 7e84 <le_conn_rsp+0x80>
			chan->chan.ops->connected(&chan->chan);
    7e80:	4620      	mov	r0, r4
    7e82:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    7e84:	4639      	mov	r1, r7
    7e86:	4620      	mov	r0, r4
    7e88:	f7ff feab 	bl	7be2 <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    7e8c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    7e90:	4620      	mov	r0, r4
    7e92:	f7ff fe99 	bl	7bc8 <l2cap_chan_rx_give_credits>
		break;
    7e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (l2cap_change_security(chan, result) == 0) {
    7e9a:	4629      	mov	r1, r5
    7e9c:	4620      	mov	r0, r4
    7e9e:	f7ff ff19 	bl	7cd4 <l2cap_change_security>
    7ea2:	2800      	cmp	r0, #0
    7ea4:	d0dd      	beq.n	7e62 <le_conn_rsp+0x5e>
		bt_l2cap_chan_remove(conn, &chan->chan);
    7ea6:	4621      	mov	r1, r4
    7ea8:	4630      	mov	r0, r6
    7eaa:	f7ff ff55 	bl	7d58 <bt_l2cap_chan_remove>
    7eae:	e7d5      	b.n	7e5c <le_conn_rsp+0x58>

00007eb0 <le_disconn_rsp>:
{
    7eb0:	b508      	push	{r3, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7eb2:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_disconn_rsp *rsp = (void *)buf->data;
    7eb4:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    7eb6:	8993      	ldrh	r3, [r2, #12]
    7eb8:	2b03      	cmp	r3, #3
    7eba:	d800      	bhi.n	7ebe <le_disconn_rsp+0xe>
    7ebc:	bd08      	pop	{r3, pc}
	chan = l2cap_remove_tx_cid(conn, dcid);
    7ebe:	8809      	ldrh	r1, [r1, #0]
    7ec0:	f7ff fe18 	bl	7af4 <l2cap_remove_tx_cid>
	if (!chan) {
    7ec4:	2800      	cmp	r0, #0
    7ec6:	d0f9      	beq.n	7ebc <le_disconn_rsp+0xc>
	bt_l2cap_chan_del(&chan->chan);
    7ec8:	f7ff ff7b 	bl	7dc2 <bt_l2cap_chan_del>
    7ecc:	e7f6      	b.n	7ebc <le_disconn_rsp+0xc>

00007ece <reject_cmd>:
{
    7ece:	b508      	push	{r3, lr}
	chan = l2cap_remove_ident(conn, ident);
    7ed0:	2201      	movs	r2, #1
    7ed2:	6800      	ldr	r0, [r0, #0]
    7ed4:	f7ff fdb8 	bl	7a48 <__l2cap_lookup_ident>
	if (!chan) {
    7ed8:	b108      	cbz	r0, 7ede <reject_cmd+0x10>
	bt_l2cap_chan_del(&chan->chan);
    7eda:	f7ff ff72 	bl	7dc2 <bt_l2cap_chan_del>
    7ede:	bd08      	pop	{r3, pc}

00007ee0 <bt_l2cap_chan_add>:
{
    7ee0:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
    7ee2:	f101 0308 	add.w	r3, r1, #8
	node->next = NULL;
    7ee6:	2400      	movs	r4, #0
    7ee8:	608c      	str	r4, [r1, #8]
	if (!list->tail) {
    7eea:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7eec:	b12c      	cbz	r4, 7efa <bt_l2cap_chan_add+0x1a>
		list->tail->next = node;
    7eee:	6023      	str	r3, [r4, #0]
		list->tail = node;
    7ef0:	6403      	str	r3, [r0, #64]	; 0x40
	chan->conn = conn;
    7ef2:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
    7ef4:	60ca      	str	r2, [r1, #12]
}
    7ef6:	bc10      	pop	{r4}
    7ef8:	4770      	bx	lr
		list->tail = node;
    7efa:	6403      	str	r3, [r0, #64]	; 0x40
		list->head = node;
    7efc:	63c3      	str	r3, [r0, #60]	; 0x3c
    7efe:	e7f8      	b.n	7ef2 <bt_l2cap_chan_add+0x12>

00007f00 <bt_l2cap_disconnected>:
{
    7f00:	b510      	push	{r4, lr}
	return list->head;
    7f02:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    7f04:	b140      	cbz	r0, 7f18 <bt_l2cap_disconnected+0x18>
    7f06:	3808      	subs	r0, #8
    7f08:	b140      	cbz	r0, 7f1c <bt_l2cap_disconnected+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7f0a:	f110 0408 	adds.w	r4, r0, #8
    7f0e:	d000      	beq.n	7f12 <bt_l2cap_disconnected+0x12>
	return node->next;
    7f10:	6884      	ldr	r4, [r0, #8]
    7f12:	b12c      	cbz	r4, 7f20 <bt_l2cap_disconnected+0x20>
    7f14:	3c08      	subs	r4, #8
    7f16:	e00a      	b.n	7f2e <bt_l2cap_disconnected+0x2e>
    7f18:	2000      	movs	r0, #0
    7f1a:	e7f5      	b.n	7f08 <bt_l2cap_disconnected+0x8>
    7f1c:	4604      	mov	r4, r0
    7f1e:	e006      	b.n	7f2e <bt_l2cap_disconnected+0x2e>
    7f20:	2400      	movs	r4, #0
    7f22:	e004      	b.n	7f2e <bt_l2cap_disconnected+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7f24:	461a      	mov	r2, r3
    7f26:	e00a      	b.n	7f3e <bt_l2cap_disconnected+0x3e>
    7f28:	3b08      	subs	r3, #8
    7f2a:	4620      	mov	r0, r4
    7f2c:	461c      	mov	r4, r3
    7f2e:	b178      	cbz	r0, 7f50 <bt_l2cap_disconnected+0x50>
		bt_l2cap_chan_del(chan);
    7f30:	f7ff ff47 	bl	7dc2 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    7f34:	b144      	cbz	r4, 7f48 <bt_l2cap_disconnected+0x48>
    7f36:	f114 0308 	adds.w	r3, r4, #8
    7f3a:	d0f3      	beq.n	7f24 <bt_l2cap_disconnected+0x24>
	return node->next;
    7f3c:	68a2      	ldr	r2, [r4, #8]
    7f3e:	b12a      	cbz	r2, 7f4c <bt_l2cap_disconnected+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7f40:	2b00      	cmp	r3, #0
    7f42:	d0f1      	beq.n	7f28 <bt_l2cap_disconnected+0x28>
	return node->next;
    7f44:	68a3      	ldr	r3, [r4, #8]
    7f46:	e7ef      	b.n	7f28 <bt_l2cap_disconnected+0x28>
    7f48:	4623      	mov	r3, r4
    7f4a:	e7ee      	b.n	7f2a <bt_l2cap_disconnected+0x2a>
    7f4c:	2300      	movs	r3, #0
    7f4e:	e7ec      	b.n	7f2a <bt_l2cap_disconnected+0x2a>
}
    7f50:	bd10      	pop	{r4, pc}

00007f52 <bt_l2cap_create_pdu>:
{
    7f52:	b508      	push	{r3, lr}
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    7f54:	3104      	adds	r1, #4
    7f56:	f7ff fc61 	bl	781c <bt_conn_create_pdu>
}
    7f5a:	bd08      	pop	{r3, pc}

00007f5c <l2cap_create_le_sig_pdu>:
{
    7f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f5e:	460f      	mov	r7, r1
    7f60:	4616      	mov	r6, r2
    7f62:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu(NULL, 0);
    7f64:	2100      	movs	r1, #0
    7f66:	4608      	mov	r0, r1
    7f68:	f7ff fff3 	bl	7f52 <bt_l2cap_create_pdu>
    7f6c:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7f6e:	2104      	movs	r1, #4
    7f70:	3008      	adds	r0, #8
    7f72:	f012 feef 	bl	1ad54 <net_buf_simple_add>
	hdr->code = code;
    7f76:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    7f78:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    7f7a:	8045      	strh	r5, [r0, #2]
}
    7f7c:	4620      	mov	r0, r4
    7f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007f80 <l2cap_chan_create_seg>:
{
    7f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f84:	4605      	mov	r5, r0
    7f86:	460c      	mov	r4, r1
    7f88:	4690      	mov	r8, r2
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    7f8a:	7988      	ldrb	r0, [r1, #6]
    7f8c:	f012 fe1c 	bl	1abc8 <net_buf_pool_get>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    7f90:	89a3      	ldrh	r3, [r4, #12]
    7f92:	4443      	add	r3, r8
    7f94:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    7f98:	4293      	cmp	r3, r2
    7f9a:	d802      	bhi.n	7fa2 <l2cap_chan_create_seg+0x22>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    7f9c:	8ac3      	ldrh	r3, [r0, #22]
    7f9e:	2b03      	cmp	r3, #3
    7fa0:	d815      	bhi.n	7fce <l2cap_chan_create_seg+0x4e>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    7fa2:	79a0      	ldrb	r0, [r4, #6]
    7fa4:	f012 fe10 	bl	1abc8 <net_buf_pool_get>
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    7fa8:	8ac3      	ldrh	r3, [r0, #22]
    7faa:	2b03      	cmp	r3, #3
    7fac:	d902      	bls.n	7fb4 <l2cap_chan_create_seg+0x34>
	    pool->buf_size >= BT_L2CAP_BUF_SIZE(L2CAP_MAX_LE_MPS)) {
    7fae:	8a83      	ldrh	r3, [r0, #20]
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    7fb0:	2b4b      	cmp	r3, #75	; 0x4b
    7fb2:	d82e      	bhi.n	8012 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12>
	return bt_l2cap_create_pdu(NULL, 0);
    7fb4:	2100      	movs	r1, #0
    7fb6:	4608      	mov	r0, r1
    7fb8:	f7ff ffcb 	bl	7f52 <bt_l2cap_create_pdu>
    7fbc:	4606      	mov	r6, r0
	if (sdu_hdr_len) {
    7fbe:	f1b8 0f00 	cmp.w	r8, #0
    7fc2:	d038      	beq.n	8036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    7fc4:	f106 0008 	add.w	r0, r6, #8
    7fc8:	4623      	mov	r3, r4
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
    7fca:	2100      	movs	r1, #0
    7fcc:	e02e      	b.n	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    7fce:	fa1f f688 	uxth.w	r6, r8
    7fd2:	3608      	adds	r6, #8
    7fd4:	b2b6      	uxth	r6, r6
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    7fd6:	f104 0708 	add.w	r7, r4, #8
    7fda:	4638      	mov	r0, r7
    7fdc:	f012 ff1f 	bl	1ae1e <net_buf_simple_headroom>
    7fe0:	42b0      	cmp	r0, r6
    7fe2:	d3de      	bcc.n	7fa2 <l2cap_chan_create_seg+0x22>
    7fe4:	6823      	ldr	r3, [r4, #0]
    7fe6:	2b00      	cmp	r3, #0
    7fe8:	d1db      	bne.n	7fa2 <l2cap_chan_create_seg+0x22>
		if (sdu_hdr_len) {
    7fea:	f1b8 0f00 	cmp.w	r8, #0
    7fee:	d00b      	beq.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
    7ff0:	4623      	mov	r3, r4
    7ff2:	2100      	movs	r1, #0
    7ff4:	e002      	b.n	7ffc <l2cap_chan_create_seg+0x7c>

	while (buf) {
		bytes += buf->len;
    7ff6:	899a      	ldrh	r2, [r3, #12]
    7ff8:	4411      	add	r1, r2
		buf = buf->frags;
    7ffa:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7ffc:	2b00      	cmp	r3, #0
    7ffe:	d1fa      	bne.n	7ff6 <l2cap_chan_create_seg+0x76>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    8000:	b289      	uxth	r1, r1
    8002:	4638      	mov	r0, r7
    8004:	f012 fee5 	bl	1add2 <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    8008:	4620      	mov	r0, r4
    800a:	f012 fe73 	bl	1acf4 <net_buf_ref>
    800e:	4606      	mov	r6, r0
    8010:	e02f      	b.n	8072 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x72>
		seg = net_buf_alloc(pool, K_NO_WAIT);
    8012:	2100      	movs	r1, #0
    8014:	f012 fde4 	bl	1abe0 <net_buf_alloc>
		if (seg) {
    8018:	4606      	mov	r6, r0
    801a:	2800      	cmp	r0, #0
    801c:	d0ca      	beq.n	7fb4 <l2cap_chan_create_seg+0x34>
			net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    801e:	2108      	movs	r1, #8
    8020:	f012 fe39 	bl	1ac96 <net_buf_reserve>
    8024:	e7cb      	b.n	7fbe <l2cap_chan_create_seg+0x3e>
		bytes += buf->len;
    8026:	899a      	ldrh	r2, [r3, #12]
    8028:	4411      	add	r1, r2
		buf = buf->frags;
    802a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    802c:	2b00      	cmp	r3, #0
    802e:	d1fa      	bne.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    8030:	b289      	uxth	r1, r1
    8032:	f012 fea7 	bl	1ad84 <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    8036:	f106 0708 	add.w	r7, r6, #8
    803a:	4638      	mov	r0, r7
    803c:	f012 fef3 	bl	1ae26 <net_buf_simple_tailroom>
    8040:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
    8044:	eba5 0308 	sub.w	r3, r5, r8
    8048:	4298      	cmp	r0, r3
    804a:	d315      	bcc.n	8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>
    804c:	fa1f f888 	uxth.w	r8, r8
    8050:	eba5 0508 	sub.w	r5, r5, r8
    8054:	b2ad      	uxth	r5, r5
	len = min(buf->len, len);
    8056:	89a0      	ldrh	r0, [r4, #12]
    8058:	4285      	cmp	r5, r0
    805a:	bf28      	it	cs
    805c:	4605      	movcs	r5, r0
	net_buf_add_mem(seg, buf->data, len);
    805e:	462a      	mov	r2, r5
    8060:	f854 1f08 	ldr.w	r1, [r4, #8]!
    8064:	4638      	mov	r0, r7
    8066:	f012 fe7b 	bl	1ad60 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    806a:	4629      	mov	r1, r5
    806c:	4620      	mov	r0, r4
    806e:	f012 febe 	bl	1adee <net_buf_simple_pull>
}
    8072:	4630      	mov	r0, r6
    8074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    8078:	4638      	mov	r0, r7
    807a:	f012 fed4 	bl	1ae26 <net_buf_simple_tailroom>
    807e:	b285      	uxth	r5, r0
    8080:	e7e9      	b.n	8056 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x56>

00008082 <bt_l2cap_send_cb>:
{
    8082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8084:	4605      	mov	r5, r0
    8086:	460f      	mov	r7, r1
    8088:	4614      	mov	r4, r2
    808a:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    808c:	2104      	movs	r1, #4
    808e:	f102 0008 	add.w	r0, r2, #8
    8092:	f012 fe96 	bl	1adc2 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    8096:	89a3      	ldrh	r3, [r4, #12]
    8098:	3b04      	subs	r3, #4
    809a:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    809c:	8047      	strh	r7, [r0, #2]
	bt_conn_send_cb(conn, buf, cb);
    809e:	4632      	mov	r2, r6
    80a0:	4621      	mov	r1, r4
    80a2:	4628      	mov	r0, r5
    80a4:	f7fe ffbe 	bl	7024 <bt_conn_send_cb>
    80a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000080ac <l2cap_chan_send_req>:
{
    80ac:	b538      	push	{r3, r4, r5, lr}
    80ae:	4604      	mov	r4, r0
    80b0:	460d      	mov	r5, r1
	if (timeout) {
    80b2:	b94a      	cbnz	r2, 80c8 <l2cap_chan_send_req+0x1c>
		k_delayed_work_cancel(&chan->chan.rtx_work);
    80b4:	3010      	adds	r0, #16
    80b6:	f021 ff3b 	bl	29f30 <k_delayed_work_cancel>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    80ba:	2300      	movs	r3, #0
    80bc:	462a      	mov	r2, r5
    80be:	2105      	movs	r1, #5
    80c0:	6820      	ldr	r0, [r4, #0]
    80c2:	f7ff ffde 	bl	8082 <bt_l2cap_send_cb>
    80c6:	bd38      	pop	{r3, r4, r5, pc}
    80c8:	f100 0110 	add.w	r1, r0, #16
    80cc:	4801      	ldr	r0, [pc, #4]	; (80d4 <l2cap_chan_send_req+0x28>)
    80ce:	f021 ff89 	bl	29fe4 <k_delayed_work_submit_to_queue>
    80d2:	e7f2      	b.n	80ba <l2cap_chan_send_req+0xe>
    80d4:	20003158 	.word	0x20003158

000080d8 <l2cap_le_conn_req>:
{
    80d8:	b538      	push	{r3, r4, r5, lr}
    80da:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    80dc:	f7ff fca6 	bl	7a2c <get_ident>
    80e0:	4602      	mov	r2, r0
    80e2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    80e6:	230a      	movs	r3, #10
    80e8:	2114      	movs	r1, #20
    80ea:	2000      	movs	r0, #0
    80ec:	f7ff ff36 	bl	7f5c <l2cap_create_le_sig_pdu>
    80f0:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    80f2:	210a      	movs	r1, #10
    80f4:	3008      	adds	r0, #8
    80f6:	f012 fe2d 	bl	1ad54 <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    80fa:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    80fc:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    80fe:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    8102:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    8104:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    8108:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    810a:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    810e:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    8110:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    8114:	8103      	strh	r3, [r0, #8]
	l2cap_chan_send_req(ch, buf, L2CAP_CONN_TIMEOUT);
    8116:	f649 4240 	movw	r2, #40000	; 0x9c40
    811a:	4629      	mov	r1, r5
    811c:	4620      	mov	r0, r4
    811e:	f7ff ffc5 	bl	80ac <l2cap_chan_send_req>
}
    8122:	2000      	movs	r0, #0
    8124:	bd38      	pop	{r3, r4, r5, pc}

00008126 <l2cap_le_encrypt_change>:
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    8126:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    812a:	2b01      	cmp	r3, #1
    812c:	d000      	beq.n	8130 <l2cap_le_encrypt_change+0xa>
    812e:	4770      	bx	lr
    8130:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    8134:	2b00      	cmp	r3, #0
    8136:	d1fa      	bne.n	812e <l2cap_le_encrypt_change+0x8>
{
    8138:	b510      	push	{r4, lr}
    813a:	4604      	mov	r4, r0
	if (status) {
    813c:	b911      	cbnz	r1, 8144 <l2cap_le_encrypt_change+0x1e>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    813e:	f7ff ffcb 	bl	80d8 <l2cap_le_conn_req>
    8142:	bd10      	pop	{r4, pc}
		bt_l2cap_chan_remove(chan->conn, chan);
    8144:	4601      	mov	r1, r0
    8146:	6800      	ldr	r0, [r0, #0]
    8148:	f7ff fe06 	bl	7d58 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    814c:	4620      	mov	r0, r4
    814e:	f7ff fe38 	bl	7dc2 <bt_l2cap_chan_del>
		return;
    8152:	bd10      	pop	{r4, pc}

00008154 <bt_l2cap_encrypt_change>:
{
    8154:	b538      	push	{r3, r4, r5, lr}
    8156:	460d      	mov	r5, r1
	return list->head;
    8158:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    815a:	b10c      	cbz	r4, 8160 <bt_l2cap_encrypt_change+0xc>
    815c:	3c08      	subs	r4, #8
    815e:	e00a      	b.n	8176 <bt_l2cap_encrypt_change+0x22>
    8160:	2400      	movs	r4, #0
    8162:	e008      	b.n	8176 <bt_l2cap_encrypt_change+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8164:	f114 0308 	adds.w	r3, r4, #8
    8168:	d012      	beq.n	8190 <bt_l2cap_encrypt_change+0x3c>
	return node->next;
    816a:	68a2      	ldr	r2, [r4, #8]
    816c:	b192      	cbz	r2, 8194 <bt_l2cap_encrypt_change+0x40>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    816e:	b103      	cbz	r3, 8172 <bt_l2cap_encrypt_change+0x1e>
	return node->next;
    8170:	68a3      	ldr	r3, [r4, #8]
    8172:	f1a3 0408 	sub.w	r4, r3, #8
    8176:	b17c      	cbz	r4, 8198 <bt_l2cap_encrypt_change+0x44>
		l2cap_le_encrypt_change(chan, hci_status);
    8178:	4629      	mov	r1, r5
    817a:	4620      	mov	r0, r4
    817c:	f7ff ffd3 	bl	8126 <l2cap_le_encrypt_change>
		if (chan->ops->encrypt_change) {
    8180:	6863      	ldr	r3, [r4, #4]
    8182:	689b      	ldr	r3, [r3, #8]
    8184:	2b00      	cmp	r3, #0
    8186:	d0ed      	beq.n	8164 <bt_l2cap_encrypt_change+0x10>
			chan->ops->encrypt_change(chan, hci_status);
    8188:	4629      	mov	r1, r5
    818a:	4620      	mov	r0, r4
    818c:	4798      	blx	r3
    818e:	e7e9      	b.n	8164 <bt_l2cap_encrypt_change+0x10>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8190:	461a      	mov	r2, r3
    8192:	e7eb      	b.n	816c <bt_l2cap_encrypt_change+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    8194:	2400      	movs	r4, #0
    8196:	e7ee      	b.n	8176 <bt_l2cap_encrypt_change+0x22>
}
    8198:	bd38      	pop	{r3, r4, r5, pc}

0000819a <l2cap_chan_update_credits>:
{
    819a:	b570      	push	{r4, r5, r6, lr}
 */
__syscall unsigned int k_sem_count_get(struct k_sem *sem);

static inline unsigned int _impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    819c:	6d04      	ldr	r4, [r0, #80]	; 0x50
	    L2CAP_LE_CREDITS_THRESHOLD(chan->rx.init_credits)) {
    819e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	if (k_sem_count_get(&chan->rx.credits) >
    81a2:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    81a6:	d900      	bls.n	81aa <l2cap_chan_update_credits+0x10>
    81a8:	bd70      	pop	{r4, r5, r6, pc}
    81aa:	460e      	mov	r6, r1
    81ac:	4605      	mov	r5, r0
	credits = chan->rx.init_credits - k_sem_count_get(&chan->rx.credits);
    81ae:	b2a4      	uxth	r4, r4
    81b0:	1b1b      	subs	r3, r3, r4
    81b2:	b29c      	uxth	r4, r3
	l2cap_chan_rx_give_credits(chan, credits);
    81b4:	4621      	mov	r1, r4
    81b6:	f7ff fd07 	bl	7bc8 <l2cap_chan_rx_give_credits>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    81ba:	f7ff fc37 	bl	7a2c <get_ident>
    81be:	2304      	movs	r3, #4
    81c0:	4602      	mov	r2, r0
    81c2:	2116      	movs	r1, #22
    81c4:	4630      	mov	r0, r6
    81c6:	f7ff fec9 	bl	7f5c <l2cap_create_le_sig_pdu>
    81ca:	4606      	mov	r6, r0
	ev = net_buf_add(buf, sizeof(*ev));
    81cc:	2104      	movs	r1, #4
    81ce:	3008      	adds	r0, #8
    81d0:	f012 fdc0 	bl	1ad54 <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    81d4:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    81d8:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    81da:	8044      	strh	r4, [r0, #2]
    81dc:	2300      	movs	r3, #0
    81de:	4632      	mov	r2, r6
    81e0:	2105      	movs	r1, #5
    81e2:	6828      	ldr	r0, [r5, #0]
    81e4:	f7ff ff4d 	bl	8082 <bt_l2cap_send_cb>
}
    81e8:	e7de      	b.n	81a8 <l2cap_chan_update_credits+0xe>

000081ea <l2cap_chan_le_send>:
{
    81ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81ec:	4604      	mov	r4, r0
    81ee:	460d      	mov	r5, r1
    81f0:	4616      	mov	r6, r2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    81f2:	2100      	movs	r1, #0
    81f4:	3068      	adds	r0, #104	; 0x68
    81f6:	f021 f8bf 	bl	29378 <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    81fa:	b9b0      	cbnz	r0, 822a <l2cap_chan_le_send+0x40>
	buf = l2cap_chan_create_seg(ch, buf, sdu_hdr_len);
    81fc:	4632      	mov	r2, r6
    81fe:	4629      	mov	r1, r5
    8200:	4620      	mov	r0, r4
    8202:	f7ff febd 	bl	7f80 <l2cap_chan_create_seg>
	if (!ch->chan.conn) {
    8206:	6827      	ldr	r7, [r4, #0]
    8208:	b157      	cbz	r7, 8220 <l2cap_chan_le_send+0x36>
	len = buf->len - sdu_hdr_len;
    820a:	8985      	ldrh	r5, [r0, #12]
    820c:	1bad      	subs	r5, r5, r6
    820e:	2300      	movs	r3, #0
    8210:	4602      	mov	r2, r0
    8212:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    8216:	4638      	mov	r0, r7
    8218:	f7ff ff33 	bl	8082 <bt_l2cap_send_cb>
}
    821c:	4628      	mov	r0, r5
    821e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    8220:	f012 fd4c 	bl	1acbc <net_buf_unref>
		return -ECONNRESET;
    8224:	f06f 0567 	mvn.w	r5, #103	; 0x67
    8228:	e7f8      	b.n	821c <l2cap_chan_le_send+0x32>
		return -EAGAIN;
    822a:	f06f 050a 	mvn.w	r5, #10
    822e:	e7f5      	b.n	821c <l2cap_chan_le_send+0x32>

00008230 <l2cap_chan_le_send_sdu>:
{
    8230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8234:	b082      	sub	sp, #8
    8236:	9201      	str	r2, [sp, #4]
	total_len = net_buf_frags_len(*buf) + sent;
    8238:	680d      	ldr	r5, [r1, #0]
    823a:	462b      	mov	r3, r5
	size_t bytes = 0;
    823c:	2200      	movs	r2, #0
    823e:	e002      	b.n	8246 <l2cap_chan_le_send_sdu+0x16>
		bytes += buf->len;
    8240:	899c      	ldrh	r4, [r3, #12]
    8242:	4422      	add	r2, r4
		buf = buf->frags;
    8244:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    8246:	2b00      	cmp	r3, #0
    8248:	d1fa      	bne.n	8240 <l2cap_chan_le_send_sdu+0x10>
    824a:	9b01      	ldr	r3, [sp, #4]
    824c:	189c      	adds	r4, r3, r2
	if (total_len > ch->tx.mtu) {
    824e:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    8252:	4294      	cmp	r4, r2
    8254:	dc54      	bgt.n	8300 <l2cap_chan_le_send_sdu+0xd0>
	if (!frag->len && frag->frags) {
    8256:	89aa      	ldrh	r2, [r5, #12]
    8258:	b912      	cbnz	r2, 8260 <l2cap_chan_le_send_sdu+0x30>
    825a:	682a      	ldr	r2, [r5, #0]
    825c:	b102      	cbz	r2, 8260 <l2cap_chan_le_send_sdu+0x30>
		frag = frag->frags;
    825e:	4615      	mov	r5, r2
    8260:	4688      	mov	r8, r1
    8262:	4607      	mov	r7, r0
	if (!sent) {
    8264:	b10b      	cbz	r3, 826a <l2cap_chan_le_send_sdu+0x3a>
		frag = frag->frags;
    8266:	2600      	movs	r6, #0
    8268:	e024      	b.n	82b4 <l2cap_chan_le_send_sdu+0x84>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    826a:	2202      	movs	r2, #2
    826c:	4629      	mov	r1, r5
    826e:	f7ff ffbc 	bl	81ea <l2cap_chan_le_send>
		if (ret < 0) {
    8272:	1e06      	subs	r6, r0, #0
    8274:	db01      	blt.n	827a <l2cap_chan_le_send_sdu+0x4a>
		sent = ret;
    8276:	9601      	str	r6, [sp, #4]
    8278:	e7f5      	b.n	8266 <l2cap_chan_le_send_sdu+0x36>
			if (ret == -EAGAIN) {
    827a:	f116 0f0b 	cmn.w	r6, #11
    827e:	d002      	beq.n	8286 <l2cap_chan_le_send_sdu+0x56>
			*buf = frag;
    8280:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    8284:	e038      	b.n	82f8 <l2cap_chan_le_send_sdu+0xc8>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    8286:	f105 0010 	add.w	r0, r5, #16
    828a:	89eb      	ldrh	r3, [r5, #14]
    828c:	4418      	add	r0, r3
    828e:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    8290:	2204      	movs	r2, #4
    8292:	eb0d 0102 	add.w	r1, sp, r2
    8296:	f020 0003 	bic.w	r0, r0, #3
    829a:	f7f8 f811 	bl	2c0 <memcpy>
    829e:	e7ef      	b.n	8280 <l2cap_chan_le_send_sdu+0x50>
		ret = l2cap_chan_le_send(ch, frag, 0);
    82a0:	2200      	movs	r2, #0
    82a2:	4629      	mov	r1, r5
    82a4:	4638      	mov	r0, r7
    82a6:	f7ff ffa0 	bl	81ea <l2cap_chan_le_send>
		if (ret < 0) {
    82aa:	1e06      	subs	r6, r0, #0
    82ac:	db0e      	blt.n	82cc <l2cap_chan_le_send_sdu+0x9c>
	for (ret = 0; sent < total_len; sent += ret) {
    82ae:	9b01      	ldr	r3, [sp, #4]
    82b0:	4433      	add	r3, r6
    82b2:	9301      	str	r3, [sp, #4]
    82b4:	9b01      	ldr	r3, [sp, #4]
    82b6:	429c      	cmp	r4, r3
    82b8:	dd1b      	ble.n	82f2 <l2cap_chan_le_send_sdu+0xc2>
		if (!frag->len) {
    82ba:	89ab      	ldrh	r3, [r5, #12]
    82bc:	2b00      	cmp	r3, #0
    82be:	d1ef      	bne.n	82a0 <l2cap_chan_le_send_sdu+0x70>
			frag = net_buf_frag_del(NULL, frag);
    82c0:	4629      	mov	r1, r5
    82c2:	2000      	movs	r0, #0
    82c4:	f012 fd3a 	bl	1ad3c <net_buf_frag_del>
    82c8:	4605      	mov	r5, r0
    82ca:	e7e9      	b.n	82a0 <l2cap_chan_le_send_sdu+0x70>
			if (ret == -EAGAIN) {
    82cc:	f116 0f0b 	cmn.w	r6, #11
    82d0:	d002      	beq.n	82d8 <l2cap_chan_le_send_sdu+0xa8>
			*buf = frag;
    82d2:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    82d6:	e00f      	b.n	82f8 <l2cap_chan_le_send_sdu+0xc8>
    82d8:	f105 0010 	add.w	r0, r5, #16
    82dc:	89eb      	ldrh	r3, [r5, #14]
    82de:	4418      	add	r0, r3
    82e0:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    82e2:	2204      	movs	r2, #4
    82e4:	eb0d 0102 	add.w	r1, sp, r2
    82e8:	f020 0003 	bic.w	r0, r0, #3
    82ec:	f7f7 ffe8 	bl	2c0 <memcpy>
    82f0:	e7ef      	b.n	82d2 <l2cap_chan_le_send_sdu+0xa2>
	net_buf_unref(frag);
    82f2:	4628      	mov	r0, r5
    82f4:	f012 fce2 	bl	1acbc <net_buf_unref>
}
    82f8:	4630      	mov	r0, r6
    82fa:	b002      	add	sp, #8
    82fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
    8300:	f06f 0679 	mvn.w	r6, #121	; 0x79
    8304:	e7f8      	b.n	82f8 <l2cap_chan_le_send_sdu+0xc8>

00008306 <l2cap_chan_le_send_resume>:
{
    8306:	b510      	push	{r4, lr}
    8308:	b082      	sub	sp, #8
    830a:	4604      	mov	r4, r0
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    830c:	4620      	mov	r0, r4
    830e:	f7ff fc91 	bl	7c34 <l2cap_chan_le_get_tx_buf>
    8312:	9001      	str	r0, [sp, #4]
    8314:	b180      	cbz	r0, 8338 <l2cap_chan_le_send_resume+0x32>
    8316:	f100 0310 	add.w	r3, r0, #16
    831a:	89c2      	ldrh	r2, [r0, #14]
    831c:	4413      	add	r3, r2
    831e:	3303      	adds	r3, #3
    8320:	f023 0303 	bic.w	r3, r3, #3
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    8324:	681a      	ldr	r2, [r3, #0]
    8326:	a901      	add	r1, sp, #4
    8328:	4620      	mov	r0, r4
    832a:	f7ff ff81 	bl	8230 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    832e:	2800      	cmp	r0, #0
    8330:	daec      	bge.n	830c <l2cap_chan_le_send_resume+0x6>
			if (sent == -EAGAIN) {
    8332:	f110 0f0b 	cmn.w	r0, #11
    8336:	d001      	beq.n	833c <l2cap_chan_le_send_resume+0x36>
}
    8338:	b002      	add	sp, #8
    833a:	bd10      	pop	{r4, pc}
				ch->tx_buf = buf;
    833c:	9b01      	ldr	r3, [sp, #4]
    833e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    8342:	e7f9      	b.n	8338 <l2cap_chan_le_send_resume+0x32>

00008344 <l2cap_send_reject>:
{
    8344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8348:	4680      	mov	r8, r0
    834a:	4691      	mov	r9, r2
    834c:	461e      	mov	r6, r3
    834e:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    8352:	1cbb      	adds	r3, r7, #2
    8354:	460a      	mov	r2, r1
    8356:	2101      	movs	r1, #1
    8358:	2000      	movs	r0, #0
    835a:	f7ff fdff 	bl	7f5c <l2cap_create_le_sig_pdu>
    835e:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    8360:	f100 0508 	add.w	r5, r0, #8
    8364:	2102      	movs	r1, #2
    8366:	4628      	mov	r0, r5
    8368:	f012 fcf4 	bl	1ad54 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    836c:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    8370:	b126      	cbz	r6, 837c <l2cap_send_reject+0x38>
		net_buf_add_mem(buf, data, data_len);
    8372:	463a      	mov	r2, r7
    8374:	4631      	mov	r1, r6
    8376:	4628      	mov	r0, r5
    8378:	f012 fcf2 	bl	1ad60 <net_buf_simple_add_mem>
    837c:	2300      	movs	r3, #0
    837e:	4622      	mov	r2, r4
    8380:	2105      	movs	r1, #5
    8382:	4640      	mov	r0, r8
    8384:	f7ff fe7d 	bl	8082 <bt_l2cap_send_cb>
    8388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000838c <le_conn_param_update_req>:
{
    838c:	b570      	push	{r4, r5, r6, lr}
    838e:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    8390:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    8392:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    8394:	8990      	ldrh	r0, [r2, #12]
    8396:	2807      	cmp	r0, #7
    8398:	d908      	bls.n	83ac <le_conn_param_update_req+0x20>
    839a:	4610      	mov	r0, r2
	if (conn->role != BT_HCI_ROLE_MASTER) {
    839c:	78e2      	ldrb	r2, [r4, #3]
    839e:	b13a      	cbz	r2, 83b0 <le_conn_param_update_req+0x24>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    83a0:	2200      	movs	r2, #0
    83a2:	9200      	str	r2, [sp, #0]
    83a4:	4613      	mov	r3, r2
    83a6:	4620      	mov	r0, r4
    83a8:	f7ff ffcc 	bl	8344 <l2cap_send_reject>
}
    83ac:	b004      	add	sp, #16
    83ae:	bd70      	pop	{r4, r5, r6, pc}
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    83b0:	881a      	ldrh	r2, [r3, #0]
    83b2:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    83b6:	885a      	ldrh	r2, [r3, #2]
    83b8:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    83bc:	889a      	ldrh	r2, [r3, #4]
    83be:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    83c2:	88db      	ldrh	r3, [r3, #6]
    83c4:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    83c8:	2302      	movs	r3, #2
    83ca:	460a      	mov	r2, r1
    83cc:	2113      	movs	r1, #19
    83ce:	f7ff fdc5 	bl	7f5c <l2cap_create_le_sig_pdu>
    83d2:	4606      	mov	r6, r0
	accepted = le_param_req(conn, &param);
    83d4:	a902      	add	r1, sp, #8
    83d6:	4620      	mov	r0, r4
    83d8:	f7fe fcc2 	bl	6d60 <le_param_req>
    83dc:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    83de:	2102      	movs	r1, #2
    83e0:	f106 0008 	add.w	r0, r6, #8
    83e4:	f012 fcb6 	bl	1ad54 <net_buf_simple_add>
	if (accepted) {
    83e8:	b17d      	cbz	r5, 840a <le_conn_param_update_req+0x7e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    83ea:	2300      	movs	r3, #0
    83ec:	7003      	strb	r3, [r0, #0]
    83ee:	7043      	strb	r3, [r0, #1]
    83f0:	2300      	movs	r3, #0
    83f2:	4632      	mov	r2, r6
    83f4:	2105      	movs	r1, #5
    83f6:	4620      	mov	r0, r4
    83f8:	f7ff fe43 	bl	8082 <bt_l2cap_send_cb>
	if (accepted) {
    83fc:	2d00      	cmp	r5, #0
    83fe:	d0d5      	beq.n	83ac <le_conn_param_update_req+0x20>
		bt_conn_le_conn_update(conn, &param);
    8400:	a902      	add	r1, sp, #8
    8402:	4620      	mov	r0, r4
    8404:	f7ff f976 	bl	76f4 <bt_conn_le_conn_update>
    8408:	e7d0      	b.n	83ac <le_conn_param_update_req+0x20>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    840a:	2301      	movs	r3, #1
    840c:	7003      	strb	r3, [r0, #0]
    840e:	2300      	movs	r3, #0
    8410:	7043      	strb	r3, [r0, #1]
    8412:	e7ed      	b.n	83f0 <le_conn_param_update_req+0x64>

00008414 <le_disconn_req>:
{
    8414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8418:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    841a:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    841c:	6897      	ldr	r7, [r2, #8]
	if (buf->len < sizeof(*req)) {
    841e:	8993      	ldrh	r3, [r2, #12]
    8420:	2b03      	cmp	r3, #3
    8422:	d802      	bhi.n	842a <le_disconn_req+0x16>
}
    8424:	b004      	add	sp, #16
    8426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    842a:	4614      	mov	r4, r2
    842c:	460d      	mov	r5, r1
	chan = l2cap_remove_tx_cid(conn, scid);
    842e:	8879      	ldrh	r1, [r7, #2]
    8430:	4630      	mov	r0, r6
    8432:	f7ff fb5f 	bl	7af4 <l2cap_remove_tx_cid>
	if (!chan) {
    8436:	4680      	mov	r8, r0
    8438:	b1d0      	cbz	r0, 8470 <le_disconn_req+0x5c>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    843a:	2304      	movs	r3, #4
    843c:	462a      	mov	r2, r5
    843e:	2107      	movs	r1, #7
    8440:	4620      	mov	r0, r4
    8442:	f7ff fd8b 	bl	7f5c <l2cap_create_le_sig_pdu>
    8446:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    8448:	2104      	movs	r1, #4
    844a:	3008      	adds	r0, #8
    844c:	f012 fc82 	bl	1ad54 <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    8450:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
    8454:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    8456:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
    845a:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    845c:	4640      	mov	r0, r8
    845e:	f7ff fcb0 	bl	7dc2 <bt_l2cap_chan_del>
    8462:	2300      	movs	r3, #0
    8464:	4622      	mov	r2, r4
    8466:	2105      	movs	r1, #5
    8468:	4630      	mov	r0, r6
    846a:	f7ff fe0a 	bl	8082 <bt_l2cap_send_cb>
    846e:	e7d9      	b.n	8424 <le_disconn_req+0x10>
		data.scid = req->scid;
    8470:	887b      	ldrh	r3, [r7, #2]
    8472:	f8ad 300c 	strh.w	r3, [sp, #12]
		data.dcid = req->dcid;
    8476:	883b      	ldrh	r3, [r7, #0]
    8478:	f8ad 300e 	strh.w	r3, [sp, #14]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    847c:	2304      	movs	r3, #4
    847e:	9300      	str	r3, [sp, #0]
    8480:	ab03      	add	r3, sp, #12
    8482:	2202      	movs	r2, #2
    8484:	4629      	mov	r1, r5
    8486:	4630      	mov	r0, r6
    8488:	f7ff ff5c 	bl	8344 <l2cap_send_reject>
    848c:	e7ca      	b.n	8424 <le_disconn_req+0x10>

0000848e <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
    848e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    8490:	b108      	cbz	r0, 8496 <bt_l2cap_le_lookup_tx_cid+0x8>
    8492:	3808      	subs	r0, #8
    8494:	e006      	b.n	84a4 <bt_l2cap_le_lookup_tx_cid+0x16>
    8496:	2000      	movs	r0, #0
    8498:	e004      	b.n	84a4 <bt_l2cap_le_lookup_tx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    849a:	461a      	mov	r2, r3
    849c:	e00b      	b.n	84b6 <bt_l2cap_le_lookup_tx_cid+0x28>
	return node->next;
    849e:	6883      	ldr	r3, [r0, #8]
    84a0:	f1a3 0008 	sub.w	r0, r3, #8
    84a4:	b168      	cbz	r0, 84c2 <bt_l2cap_le_lookup_tx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    84a6:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    84aa:	428b      	cmp	r3, r1
    84ac:	d009      	beq.n	84c2 <bt_l2cap_le_lookup_tx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    84ae:	f110 0308 	adds.w	r3, r0, #8
    84b2:	d0f2      	beq.n	849a <bt_l2cap_le_lookup_tx_cid+0xc>
	return node->next;
    84b4:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    84b6:	b112      	cbz	r2, 84be <bt_l2cap_le_lookup_tx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    84b8:	2b00      	cmp	r3, #0
    84ba:	d1f0      	bne.n	849e <bt_l2cap_le_lookup_tx_cid+0x10>
    84bc:	e7f0      	b.n	84a0 <bt_l2cap_le_lookup_tx_cid+0x12>
    84be:	2000      	movs	r0, #0
    84c0:	e7f0      	b.n	84a4 <bt_l2cap_le_lookup_tx_cid+0x16>
}
    84c2:	4770      	bx	lr

000084c4 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
    84c4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    84c6:	b108      	cbz	r0, 84cc <bt_l2cap_le_lookup_rx_cid+0x8>
    84c8:	3808      	subs	r0, #8
    84ca:	e006      	b.n	84da <bt_l2cap_le_lookup_rx_cid+0x16>
    84cc:	2000      	movs	r0, #0
    84ce:	e004      	b.n	84da <bt_l2cap_le_lookup_rx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    84d0:	461a      	mov	r2, r3
    84d2:	e00b      	b.n	84ec <bt_l2cap_le_lookup_rx_cid+0x28>
	return node->next;
    84d4:	6883      	ldr	r3, [r0, #8]
    84d6:	f1a3 0008 	sub.w	r0, r3, #8
    84da:	b168      	cbz	r0, 84f8 <bt_l2cap_le_lookup_rx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    84dc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    84e0:	428b      	cmp	r3, r1
    84e2:	d009      	beq.n	84f8 <bt_l2cap_le_lookup_rx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    84e4:	f110 0308 	adds.w	r3, r0, #8
    84e8:	d0f2      	beq.n	84d0 <bt_l2cap_le_lookup_rx_cid+0xc>
	return node->next;
    84ea:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    84ec:	b112      	cbz	r2, 84f4 <bt_l2cap_le_lookup_rx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    84ee:	2b00      	cmp	r3, #0
    84f0:	d1f0      	bne.n	84d4 <bt_l2cap_le_lookup_rx_cid+0x10>
    84f2:	e7f0      	b.n	84d6 <bt_l2cap_le_lookup_rx_cid+0x12>
    84f4:	2000      	movs	r0, #0
    84f6:	e7f0      	b.n	84da <bt_l2cap_le_lookup_rx_cid+0x16>
}
    84f8:	4770      	bx	lr

000084fa <l2cap_chan_alloc_cid>:
{
    84fa:	b570      	push	{r4, r5, r6, lr}
    84fc:	4606      	mov	r6, r0
	if (ch && ch->rx.cid > 0) {
    84fe:	460d      	mov	r5, r1
    8500:	b1a1      	cbz	r1, 852c <l2cap_chan_alloc_cid+0x32>
    8502:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    8506:	b9ab      	cbnz	r3, 8534 <l2cap_chan_alloc_cid+0x3a>
    8508:	2440      	movs	r4, #64	; 0x40
    850a:	e001      	b.n	8510 <l2cap_chan_alloc_cid+0x16>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    850c:	3401      	adds	r4, #1
    850e:	b2a4      	uxth	r4, r4
    8510:	2c7f      	cmp	r4, #127	; 0x7f
    8512:	d80d      	bhi.n	8530 <l2cap_chan_alloc_cid+0x36>
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    8514:	2d00      	cmp	r5, #0
    8516:	d0f9      	beq.n	850c <l2cap_chan_alloc_cid+0x12>
    8518:	4621      	mov	r1, r4
    851a:	4630      	mov	r0, r6
    851c:	f7ff ffd2 	bl	84c4 <bt_l2cap_le_lookup_rx_cid>
    8520:	2800      	cmp	r0, #0
    8522:	d1f3      	bne.n	850c <l2cap_chan_alloc_cid+0x12>
			ch->rx.cid = cid;
    8524:	f8a5 4040 	strh.w	r4, [r5, #64]	; 0x40
			return ch;
    8528:	4628      	mov	r0, r5
    852a:	bd70      	pop	{r4, r5, r6, pc}
    852c:	2440      	movs	r4, #64	; 0x40
    852e:	e7ef      	b.n	8510 <l2cap_chan_alloc_cid+0x16>
	return NULL;
    8530:	2000      	movs	r0, #0
    8532:	bd70      	pop	{r4, r5, r6, pc}
		return ch;
    8534:	4608      	mov	r0, r1
}
    8536:	bd70      	pop	{r4, r5, r6, pc}

00008538 <l2cap_chan_add>:
{
    8538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    853a:	4606      	mov	r6, r0
    853c:	460c      	mov	r4, r1
    853e:	4617      	mov	r7, r2
	ch = l2cap_chan_alloc_cid(conn, chan);
    8540:	f7ff ffdb 	bl	84fa <l2cap_chan_alloc_cid>
	if (!ch) {
    8544:	b1c0      	cbz	r0, 8578 <l2cap_chan_add+0x40>
    8546:	4605      	mov	r5, r0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    8548:	490c      	ldr	r1, [pc, #48]	; (857c <l2cap_chan_add+0x44>)
    854a:	f104 0010 	add.w	r0, r4, #16
    854e:	f021 fcd1 	bl	29ef4 <k_delayed_work_init>
	bt_l2cap_chan_add(conn, chan, destroy);
    8552:	463a      	mov	r2, r7
    8554:	4621      	mov	r1, r4
    8556:	4630      	mov	r0, r6
    8558:	f7ff fcc2 	bl	7ee0 <bt_l2cap_chan_add>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    855c:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    8560:	3b40      	subs	r3, #64	; 0x40
    8562:	b29b      	uxth	r3, r3
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    8564:	2b3f      	cmp	r3, #63	; 0x3f
    8566:	d901      	bls.n	856c <l2cap_chan_add+0x34>
	return true;
    8568:	2001      	movs	r0, #1
}
    856a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECT);
    856c:	2101      	movs	r1, #1
    856e:	4620      	mov	r0, r4
    8570:	f7ff fc24 	bl	7dbc <bt_l2cap_chan_set_state>
	return true;
    8574:	2001      	movs	r0, #1
    8576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
    8578:	2000      	movs	r0, #0
    857a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    857c:	00007ded 	.word	0x00007ded

00008580 <bt_l2cap_connected>:
{
    8580:	b530      	push	{r4, r5, lr}
    8582:	b083      	sub	sp, #12
    8584:	4605      	mov	r5, r0
	return list->head;
    8586:	4b18      	ldr	r3, [pc, #96]	; (85e8 <bt_l2cap_connected+0x68>)
    8588:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    858a:	b10c      	cbz	r4, 8590 <bt_l2cap_connected+0x10>
    858c:	3c08      	subs	r4, #8
    858e:	e00a      	b.n	85a6 <bt_l2cap_connected+0x26>
    8590:	2400      	movs	r4, #0
    8592:	e008      	b.n	85a6 <bt_l2cap_connected+0x26>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8594:	f114 0308 	adds.w	r3, r4, #8
    8598:	d01f      	beq.n	85da <bt_l2cap_connected+0x5a>
	return node->next;
    859a:	68a2      	ldr	r2, [r4, #8]
    859c:	b1fa      	cbz	r2, 85de <bt_l2cap_connected+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    859e:	b103      	cbz	r3, 85a2 <bt_l2cap_connected+0x22>
	return node->next;
    85a0:	68a3      	ldr	r3, [r4, #8]
    85a2:	f1a3 0408 	sub.w	r4, r3, #8
    85a6:	b1e4      	cbz	r4, 85e2 <bt_l2cap_connected+0x62>
		if (fchan->accept(conn, &chan) < 0) {
    85a8:	6863      	ldr	r3, [r4, #4]
    85aa:	a901      	add	r1, sp, #4
    85ac:	4628      	mov	r0, r5
    85ae:	4798      	blx	r3
    85b0:	2800      	cmp	r0, #0
    85b2:	dbef      	blt.n	8594 <bt_l2cap_connected+0x14>
		ch = BT_L2CAP_LE_CHAN(chan);
    85b4:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    85b6:	8823      	ldrh	r3, [r4, #0]
    85b8:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
		ch->tx.cid = fchan->cid;
    85bc:	8823      	ldrh	r3, [r4, #0]
    85be:	f8a1 3060 	strh.w	r3, [r1, #96]	; 0x60
		if (!l2cap_chan_add(conn, chan, NULL)) {
    85c2:	2200      	movs	r2, #0
    85c4:	4628      	mov	r0, r5
    85c6:	f7ff ffb7 	bl	8538 <l2cap_chan_add>
    85ca:	b150      	cbz	r0, 85e2 <bt_l2cap_connected+0x62>
		if (chan->ops->connected) {
    85cc:	9801      	ldr	r0, [sp, #4]
    85ce:	6843      	ldr	r3, [r0, #4]
    85d0:	681b      	ldr	r3, [r3, #0]
    85d2:	2b00      	cmp	r3, #0
    85d4:	d0de      	beq.n	8594 <bt_l2cap_connected+0x14>
			chan->ops->connected(chan);
    85d6:	4798      	blx	r3
    85d8:	e7dc      	b.n	8594 <bt_l2cap_connected+0x14>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    85da:	461a      	mov	r2, r3
    85dc:	e7de      	b.n	859c <bt_l2cap_connected+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    85de:	2400      	movs	r4, #0
    85e0:	e7e1      	b.n	85a6 <bt_l2cap_connected+0x26>
}
    85e2:	b003      	add	sp, #12
    85e4:	bd30      	pop	{r4, r5, pc}
    85e6:	bf00      	nop
    85e8:	20000c24 	.word	0x20000c24

000085ec <le_conn_req>:
{
    85ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    85f0:	b085      	sub	sp, #20
	struct bt_conn *conn = l2cap->chan.chan.conn;
    85f2:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    85f4:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    85f6:	8990      	ldrh	r0, [r2, #12]
    85f8:	2809      	cmp	r0, #9
    85fa:	d912      	bls.n	8622 <le_conn_req+0x36>
	psm = sys_le16_to_cpu(req->psm);
    85fc:	f8b3 9000 	ldrh.w	r9, [r3]
	scid = sys_le16_to_cpu(req->scid);
    8600:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    8604:	fa1f fa88 	uxth.w	sl, r8
	mtu = sys_le16_to_cpu(req->mtu);
    8608:	889e      	ldrh	r6, [r3, #4]
    860a:	b2b0      	uxth	r0, r6
	mps = sys_le16_to_cpu(req->mps);
    860c:	88df      	ldrh	r7, [r3, #6]
    860e:	fa1f fe87 	uxth.w	lr, r7
	credits = sys_le16_to_cpu(req->credits);
    8612:	891d      	ldrh	r5, [r3, #8]
    8614:	fa1f fb85 	uxth.w	fp, r5
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    8618:	2816      	cmp	r0, #22
    861a:	d902      	bls.n	8622 <le_conn_req+0x36>
    861c:	f1be 0f16 	cmp.w	lr, #22
    8620:	d802      	bhi.n	8628 <le_conn_req+0x3c>
}
    8622:	b005      	add	sp, #20
    8624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8628:	4610      	mov	r0, r2
    862a:	460a      	mov	r2, r1
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    862c:	230a      	movs	r3, #10
    862e:	2115      	movs	r1, #21
    8630:	f7ff fc94 	bl	7f5c <l2cap_create_le_sig_pdu>
    8634:	9000      	str	r0, [sp, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    8636:	210a      	movs	r1, #10
    8638:	3008      	adds	r0, #8
    863a:	f012 fb8b 	bl	1ad54 <net_buf_simple_add>
    863e:	9001      	str	r0, [sp, #4]
	memset(rsp, 0, sizeof(*rsp));
    8640:	220a      	movs	r2, #10
    8642:	2100      	movs	r1, #0
    8644:	f022 f938 	bl	2a8b8 <memset>
	server = l2cap_server_lookup_psm(psm);
    8648:	4648      	mov	r0, r9
    864a:	f7ff fa35 	bl	7ab8 <l2cap_server_lookup_psm>
	if (!server) {
    864e:	4681      	mov	r9, r0
    8650:	b168      	cbz	r0, 866e <le_conn_req+0x82>
	if (conn->sec_level < server->sec_level) {
    8652:	7a22      	ldrb	r2, [r4, #8]
    8654:	7883      	ldrb	r3, [r0, #2]
    8656:	429a      	cmp	r2, r3
    8658:	d20d      	bcs.n	8676 <le_conn_req+0x8a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_AUTHENTICATION);
    865a:	2305      	movs	r3, #5
    865c:	9a01      	ldr	r2, [sp, #4]
    865e:	8113      	strh	r3, [r2, #8]
    8660:	2300      	movs	r3, #0
    8662:	9a00      	ldr	r2, [sp, #0]
    8664:	2105      	movs	r1, #5
    8666:	4620      	mov	r0, r4
    8668:	f7ff fd0b 	bl	8082 <bt_l2cap_send_cb>
    866c:	e7d9      	b.n	8622 <le_conn_req+0x36>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_PSM_NOT_SUPP);
    866e:	2302      	movs	r3, #2
    8670:	9a01      	ldr	r2, [sp, #4]
    8672:	8113      	strh	r3, [r2, #8]
		goto rsp;
    8674:	e7f4      	b.n	8660 <le_conn_req+0x74>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    8676:	f1aa 0340 	sub.w	r3, sl, #64	; 0x40
    867a:	b29b      	uxth	r3, r3
    867c:	2b3f      	cmp	r3, #63	; 0x3f
    867e:	d903      	bls.n	8688 <le_conn_req+0x9c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_INVALID_SCID);
    8680:	2309      	movs	r3, #9
    8682:	9a01      	ldr	r2, [sp, #4]
    8684:	8113      	strh	r3, [r2, #8]
		goto rsp;
    8686:	e7eb      	b.n	8660 <le_conn_req+0x74>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    8688:	4651      	mov	r1, sl
    868a:	4620      	mov	r0, r4
    868c:	f7ff feff 	bl	848e <bt_l2cap_le_lookup_tx_cid>
    8690:	9003      	str	r0, [sp, #12]
	if (chan) {
    8692:	b118      	cbz	r0, 869c <le_conn_req+0xb0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_SCID_IN_USE);
    8694:	230a      	movs	r3, #10
    8696:	9a01      	ldr	r2, [sp, #4]
    8698:	8113      	strh	r3, [r2, #8]
		goto rsp;
    869a:	e7e1      	b.n	8660 <le_conn_req+0x74>
	if (server->accept(conn, &chan) < 0) {
    869c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    86a0:	a903      	add	r1, sp, #12
    86a2:	4620      	mov	r0, r4
    86a4:	4798      	blx	r3
    86a6:	2800      	cmp	r0, #0
    86a8:	da03      	bge.n	86b2 <le_conn_req+0xc6>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    86aa:	2304      	movs	r3, #4
    86ac:	9a01      	ldr	r2, [sp, #4]
    86ae:	8113      	strh	r3, [r2, #8]
		goto rsp;
    86b0:	e7d6      	b.n	8660 <le_conn_req+0x74>
	chan->required_sec_level = server->sec_level;
    86b2:	9903      	ldr	r1, [sp, #12]
    86b4:	f899 3002 	ldrb.w	r3, [r9, #2]
    86b8:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    86bc:	4a1e      	ldr	r2, [pc, #120]	; (8738 <le_conn_req+0x14c>)
    86be:	4620      	mov	r0, r4
    86c0:	f7ff ff3a 	bl	8538 <l2cap_chan_add>
    86c4:	b918      	cbnz	r0, 86ce <le_conn_req+0xe2>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    86c6:	2304      	movs	r3, #4
    86c8:	9a01      	ldr	r2, [sp, #4]
    86ca:	8113      	strh	r3, [r2, #8]
    86cc:	e7c8      	b.n	8660 <le_conn_req+0x74>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    86ce:	f8dd a00c 	ldr.w	sl, [sp, #12]
		l2cap_chan_tx_init(ch);
    86d2:	4650      	mov	r0, sl
    86d4:	f7ff fabd 	bl	7c52 <l2cap_chan_tx_init>
		ch->tx.cid = scid;
    86d8:	f8aa 8060 	strh.w	r8, [sl, #96]	; 0x60
		ch->tx.mps = mps;
    86dc:	f8aa 7064 	strh.w	r7, [sl, #100]	; 0x64
		ch->tx.mtu = mtu;
    86e0:	f8aa 6062 	strh.w	r6, [sl, #98]	; 0x62
		ch->tx.init_credits = credits;
    86e4:	f8aa 5066 	strh.w	r5, [sl, #102]	; 0x66
		l2cap_chan_tx_give_credits(ch, credits);
    86e8:	4659      	mov	r1, fp
    86ea:	4650      	mov	r0, sl
    86ec:	f7ff fa79 	bl	7be2 <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_init(ch);
    86f0:	4650      	mov	r0, sl
    86f2:	f7ff fac1 	bl	7c78 <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    86f6:	f8ba 1046 	ldrh.w	r1, [sl, #70]	; 0x46
    86fa:	4650      	mov	r0, sl
    86fc:	f7ff fa64 	bl	7bc8 <l2cap_chan_rx_give_credits>
		chan->psm = server->psm;
    8700:	9803      	ldr	r0, [sp, #12]
    8702:	f8b9 3000 	ldrh.w	r3, [r9]
    8706:	8743      	strh	r3, [r0, #58]	; 0x3a
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECTED);
    8708:	2103      	movs	r1, #3
    870a:	f7ff fb57 	bl	7dbc <bt_l2cap_chan_set_state>
		if (chan->ops->connected) {
    870e:	9803      	ldr	r0, [sp, #12]
    8710:	6843      	ldr	r3, [r0, #4]
    8712:	681b      	ldr	r3, [r3, #0]
    8714:	b103      	cbz	r3, 8718 <le_conn_req+0x12c>
			chan->ops->connected(chan);
    8716:	4798      	blx	r3
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    8718:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    871c:	9901      	ldr	r1, [sp, #4]
    871e:	800b      	strh	r3, [r1, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    8720:	f8ba 3044 	ldrh.w	r3, [sl, #68]	; 0x44
    8724:	808b      	strh	r3, [r1, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    8726:	f8ba 3042 	ldrh.w	r3, [sl, #66]	; 0x42
    872a:	804b      	strh	r3, [r1, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    872c:	f8ba 3046 	ldrh.w	r3, [sl, #70]	; 0x46
    8730:	80cb      	strh	r3, [r1, #6]
		rsp->result = BT_L2CAP_SUCCESS;
    8732:	2300      	movs	r3, #0
    8734:	810b      	strh	r3, [r1, #8]
    8736:	e793      	b.n	8660 <le_conn_req+0x74>
    8738:	00007bfd 	.word	0x00007bfd

0000873c <l2cap_le_connect>:

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static int l2cap_le_connect(struct bt_conn *conn, struct bt_l2cap_le_chan *ch,
			    u16_t psm)
{
	if (psm < L2CAP_LE_PSM_START || psm > L2CAP_LE_PSM_END) {
    873c:	1e53      	subs	r3, r2, #1
    873e:	b29b      	uxth	r3, r3
    8740:	2bfe      	cmp	r3, #254	; 0xfe
    8742:	d814      	bhi.n	876e <l2cap_le_connect+0x32>
{
    8744:	b570      	push	{r4, r5, r6, lr}
    8746:	4615      	mov	r5, r2
    8748:	460c      	mov	r4, r1
    874a:	4606      	mov	r6, r0
		return -EINVAL;
	}

	l2cap_chan_tx_init(ch);
    874c:	4608      	mov	r0, r1
    874e:	f7ff fa80 	bl	7c52 <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    8752:	4620      	mov	r0, r4
    8754:	f7ff fa90 	bl	7c78 <l2cap_chan_rx_init>

	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    8758:	4a08      	ldr	r2, [pc, #32]	; (877c <l2cap_le_connect+0x40>)
    875a:	4621      	mov	r1, r4
    875c:	4630      	mov	r0, r6
    875e:	f7ff feeb 	bl	8538 <l2cap_chan_add>
    8762:	b138      	cbz	r0, 8774 <l2cap_le_connect+0x38>
		return -ENOMEM;
	}

	ch->chan.psm = psm;
    8764:	8765      	strh	r5, [r4, #58]	; 0x3a

	return l2cap_le_conn_req(ch);
    8766:	4620      	mov	r0, r4
    8768:	f7ff fcb6 	bl	80d8 <l2cap_le_conn_req>
    876c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    876e:	f06f 0015 	mvn.w	r0, #21
    8772:	4770      	bx	lr
		return -ENOMEM;
    8774:	f06f 000b 	mvn.w	r0, #11
}
    8778:	bd70      	pop	{r4, r5, r6, pc}
    877a:	bf00      	nop
    877c:	00007bfd 	.word	0x00007bfd

00008780 <bt_l2cap_server_register>:
	if (server->psm < L2CAP_LE_PSM_START ||
    8780:	8802      	ldrh	r2, [r0, #0]
    8782:	1e53      	subs	r3, r2, #1
    8784:	b29b      	uxth	r3, r3
    8786:	2bfe      	cmp	r3, #254	; 0xfe
    8788:	d81d      	bhi.n	87c6 <bt_l2cap_server_register+0x46>
	    server->psm > L2CAP_LE_PSM_END || !server->accept) {
    878a:	6843      	ldr	r3, [r0, #4]
    878c:	b1f3      	cbz	r3, 87cc <bt_l2cap_server_register+0x4c>
	if (server->sec_level > BT_SECURITY_FIPS) {
    878e:	7883      	ldrb	r3, [r0, #2]
    8790:	2b04      	cmp	r3, #4
    8792:	d81e      	bhi.n	87d2 <bt_l2cap_server_register+0x52>
{
    8794:	b510      	push	{r4, lr}
	} else if (server->sec_level < BT_SECURITY_LOW) {
    8796:	b90b      	cbnz	r3, 879c <bt_l2cap_server_register+0x1c>
		server->sec_level = BT_SECURITY_LOW;
    8798:	2301      	movs	r3, #1
    879a:	7083      	strb	r3, [r0, #2]
    879c:	4604      	mov	r4, r0
	if (l2cap_server_lookup_psm(server->psm)) {
    879e:	4610      	mov	r0, r2
    87a0:	f7ff f98a 	bl	7ab8 <l2cap_server_lookup_psm>
    87a4:	b9c0      	cbnz	r0, 87d8 <bt_l2cap_server_register+0x58>
	sys_slist_append(&servers, &server->node);
    87a6:	f104 0308 	add.w	r3, r4, #8
	node->next = NULL;
    87aa:	2200      	movs	r2, #0
    87ac:	60a2      	str	r2, [r4, #8]
	if (!list->tail) {
    87ae:	4a0c      	ldr	r2, [pc, #48]	; (87e0 <bt_l2cap_server_register+0x60>)
    87b0:	6852      	ldr	r2, [r2, #4]
    87b2:	b122      	cbz	r2, 87be <bt_l2cap_server_register+0x3e>
		list->tail->next = node;
    87b4:	6013      	str	r3, [r2, #0]
		list->tail = node;
    87b6:	4a0a      	ldr	r2, [pc, #40]	; (87e0 <bt_l2cap_server_register+0x60>)
    87b8:	6053      	str	r3, [r2, #4]
	return 0;
    87ba:	2000      	movs	r0, #0
    87bc:	bd10      	pop	{r4, pc}
		list->tail = node;
    87be:	4a08      	ldr	r2, [pc, #32]	; (87e0 <bt_l2cap_server_register+0x60>)
    87c0:	6053      	str	r3, [r2, #4]
		list->head = node;
    87c2:	6013      	str	r3, [r2, #0]
    87c4:	bd10      	pop	{r4, pc}
		return -EINVAL;
    87c6:	f06f 0015 	mvn.w	r0, #21
    87ca:	4770      	bx	lr
    87cc:	f06f 0015 	mvn.w	r0, #21
    87d0:	4770      	bx	lr
		return -EINVAL;
    87d2:	f06f 0015 	mvn.w	r0, #21
    87d6:	4770      	bx	lr
		return -EADDRINUSE;
    87d8:	f06f 006f 	mvn.w	r0, #111	; 0x6f
}
    87dc:	bd10      	pop	{r4, pc}
    87de:	bf00      	nop
    87e0:	20000c2c 	.word	0x20000c2c

000087e4 <bt_l2cap_update_conn_param>:
{
    87e4:	b570      	push	{r4, r5, r6, lr}
    87e6:	4606      	mov	r6, r0
    87e8:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    87ea:	f7ff f91f 	bl	7a2c <get_ident>
    87ee:	2308      	movs	r3, #8
    87f0:	4602      	mov	r2, r0
    87f2:	2112      	movs	r1, #18
    87f4:	2000      	movs	r0, #0
    87f6:	f7ff fbb1 	bl	7f5c <l2cap_create_le_sig_pdu>
    87fa:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    87fc:	2108      	movs	r1, #8
    87fe:	4408      	add	r0, r1
    8800:	f012 faa8 	bl	1ad54 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    8804:	8823      	ldrh	r3, [r4, #0]
    8806:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    8808:	8863      	ldrh	r3, [r4, #2]
    880a:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    880c:	88a3      	ldrh	r3, [r4, #4]
    880e:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    8810:	88e3      	ldrh	r3, [r4, #6]
    8812:	80c3      	strh	r3, [r0, #6]
    8814:	2300      	movs	r3, #0
    8816:	462a      	mov	r2, r5
    8818:	2105      	movs	r1, #5
    881a:	4630      	mov	r0, r6
    881c:	f7ff fc31 	bl	8082 <bt_l2cap_send_cb>
}
    8820:	2000      	movs	r0, #0
    8822:	bd70      	pop	{r4, r5, r6, pc}

00008824 <bt_l2cap_init>:
{
    8824:	b508      	push	{r3, lr}
	bt_l2cap_le_fixed_chan_register(&chan);
    8826:	4802      	ldr	r0, [pc, #8]	; (8830 <bt_l2cap_init+0xc>)
    8828:	f7ff fa84 	bl	7d34 <bt_l2cap_le_fixed_chan_register>
    882c:	bd08      	pop	{r3, pc}
    882e:	bf00      	nop
    8830:	2000bfb0 	.word	0x2000bfb0

00008834 <bt_l2cap_chan_connect>:
int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    8834:	b188      	cbz	r0, 885a <bt_l2cap_chan_connect+0x26>
{
    8836:	b508      	push	{r3, lr}
    8838:	4603      	mov	r3, r0
	if (!conn || conn->state != BT_CONN_CONNECTED) {
    883a:	7b00      	ldrb	r0, [r0, #12]
    883c:	2803      	cmp	r0, #3
    883e:	d10f      	bne.n	8860 <bt_l2cap_chan_connect+0x2c>
		return -ENOTCONN;
	}

	if (!chan) {
    8840:	b189      	cbz	r1, 8866 <bt_l2cap_chan_connect+0x32>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_connect(conn, chan, psm);
	}

	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    8842:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
    8846:	2804      	cmp	r0, #4
    8848:	d810      	bhi.n	886c <bt_l2cap_chan_connect+0x38>
		return -EINVAL;
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    884a:	b910      	cbnz	r0, 8852 <bt_l2cap_chan_connect+0x1e>
		chan->required_sec_level = BT_SECURITY_LOW;
    884c:	2001      	movs	r0, #1
    884e:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
    8852:	4618      	mov	r0, r3
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
    8854:	f7ff ff72 	bl	873c <l2cap_le_connect>
    8858:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
    885a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    885e:	4770      	bx	lr
    8860:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8864:	bd08      	pop	{r3, pc}
		return -EINVAL;
    8866:	f06f 0015 	mvn.w	r0, #21
    886a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    886c:	f06f 0015 	mvn.w	r0, #21
}
    8870:	bd08      	pop	{r3, pc}

00008872 <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    8872:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
    8874:	6803      	ldr	r3, [r0, #0]
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    8876:	b30b      	cbz	r3, 88bc <bt_l2cap_chan_disconnect+0x4a>
    8878:	4604      	mov	r4, r0
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    887a:	f7ff f8d7 	bl	7a2c <get_ident>
    887e:	4602      	mov	r2, r0
    8880:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    8884:	2304      	movs	r3, #4
    8886:	2106      	movs	r1, #6
    8888:	2000      	movs	r0, #0
    888a:	f7ff fb67 	bl	7f5c <l2cap_create_le_sig_pdu>
    888e:	4605      	mov	r5, r0
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    8890:	2104      	movs	r1, #4
    8892:	3008      	adds	r0, #8
    8894:	f012 fa5e 	bl	1ad54 <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    8898:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    889c:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    889e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    88a2:	8043      	strh	r3, [r0, #2]

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
    88a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    88a8:	4629      	mov	r1, r5
    88aa:	4620      	mov	r0, r4
    88ac:	f7ff fbfe 	bl	80ac <l2cap_chan_send_req>
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);
    88b0:	2104      	movs	r1, #4
    88b2:	4620      	mov	r0, r4
    88b4:	f7ff fa82 	bl	7dbc <bt_l2cap_chan_set_state>

	return 0;
    88b8:	2000      	movs	r0, #0
    88ba:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    88bc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    88c0:	bd38      	pop	{r3, r4, r5, pc}

000088c2 <l2cap_chan_le_recv_sdu>:
{
    88c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    88c6:	4681      	mov	r9, r0
    88c8:	460e      	mov	r6, r1
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    88ca:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    88ce:	4603      	mov	r3, r0
	size_t bytes = 0;
    88d0:	2200      	movs	r2, #0
    88d2:	e002      	b.n	88da <l2cap_chan_le_recv_sdu+0x18>
		bytes += buf->len;
    88d4:	8999      	ldrh	r1, [r3, #12]
    88d6:	440a      	add	r2, r1
		buf = buf->frags;
    88d8:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    88da:	2b00      	cmp	r3, #0
    88dc:	d1fa      	bne.n	88d4 <l2cap_chan_le_recv_sdu+0x12>
    88de:	89b3      	ldrh	r3, [r6, #12]
    88e0:	441a      	add	r2, r3
    88e2:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    88e6:	429a      	cmp	r2, r3
    88e8:	d803      	bhi.n	88f2 <l2cap_chan_le_recv_sdu+0x30>
	frag = net_buf_frag_last(chan->_sdu);
    88ea:	f012 fa07 	bl	1acfc <net_buf_frag_last>
    88ee:	4680      	mov	r8, r0
	while (buf->len) {
    88f0:	e017      	b.n	8922 <l2cap_chan_le_recv_sdu+0x60>
		bt_l2cap_chan_disconnect(&chan->chan);
    88f2:	4648      	mov	r0, r9
    88f4:	f7ff ffbd 	bl	8872 <bt_l2cap_chan_disconnect>
		return;
    88f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    88fc:	f108 0708 	add.w	r7, r8, #8
    8900:	4638      	mov	r0, r7
    8902:	f012 fa90 	bl	1ae26 <net_buf_simple_tailroom>
    8906:	89b4      	ldrh	r4, [r6, #12]
    8908:	42a0      	cmp	r0, r4
    890a:	d31d      	bcc.n	8948 <l2cap_chan_le_recv_sdu+0x86>
		net_buf_add_mem(frag, buf->data, len);
    890c:	4635      	mov	r5, r6
    890e:	4622      	mov	r2, r4
    8910:	f855 1f08 	ldr.w	r1, [r5, #8]!
    8914:	4638      	mov	r0, r7
    8916:	f012 fa23 	bl	1ad60 <net_buf_simple_add_mem>
		net_buf_pull(buf, len);
    891a:	4621      	mov	r1, r4
    891c:	4628      	mov	r0, r5
    891e:	f012 fa66 	bl	1adee <net_buf_simple_pull>
	while (buf->len) {
    8922:	89b3      	ldrh	r3, [r6, #12]
    8924:	b1ab      	cbz	r3, 8952 <l2cap_chan_le_recv_sdu+0x90>
		if (!net_buf_tailroom(frag)) {
    8926:	f108 0008 	add.w	r0, r8, #8
    892a:	f012 fa7c 	bl	1ae26 <net_buf_simple_tailroom>
    892e:	2800      	cmp	r0, #0
    8930:	d1e4      	bne.n	88fc <l2cap_chan_le_recv_sdu+0x3a>
			frag = l2cap_alloc_frag(chan);
    8932:	4648      	mov	r0, r9
    8934:	f7ff f93a 	bl	7bac <l2cap_alloc_frag>
			if (!frag) {
    8938:	4680      	mov	r8, r0
    893a:	2800      	cmp	r0, #0
    893c:	d1de      	bne.n	88fc <l2cap_chan_le_recv_sdu+0x3a>
				bt_l2cap_chan_disconnect(&chan->chan);
    893e:	4648      	mov	r0, r9
    8940:	f7ff ff97 	bl	8872 <bt_l2cap_chan_disconnect>
				return;
    8944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    8948:	4638      	mov	r0, r7
    894a:	f012 fa6c 	bl	1ae26 <net_buf_simple_tailroom>
    894e:	b284      	uxth	r4, r0
    8950:	e7dc      	b.n	890c <l2cap_chan_le_recv_sdu+0x4a>
	if (net_buf_frags_len(chan->_sdu) == chan->_sdu_len) {
    8952:	f8d9 1094 	ldr.w	r1, [r9, #148]	; 0x94
    8956:	460b      	mov	r3, r1
	size_t bytes = 0;
    8958:	2200      	movs	r2, #0
    895a:	e002      	b.n	8962 <l2cap_chan_le_recv_sdu+0xa0>
		bytes += buf->len;
    895c:	8998      	ldrh	r0, [r3, #12]
    895e:	4402      	add	r2, r0
		buf = buf->frags;
    8960:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    8962:	2b00      	cmp	r3, #0
    8964:	d1fa      	bne.n	895c <l2cap_chan_le_recv_sdu+0x9a>
    8966:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    896a:	4293      	cmp	r3, r2
    896c:	d005      	beq.n	897a <l2cap_chan_le_recv_sdu+0xb8>
	l2cap_chan_update_credits(chan, buf);
    896e:	4631      	mov	r1, r6
    8970:	4648      	mov	r0, r9
    8972:	f7ff fc12 	bl	819a <l2cap_chan_update_credits>
    8976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chan->chan.ops->recv(&chan->chan, chan->_sdu);
    897a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    897e:	691b      	ldr	r3, [r3, #16]
    8980:	4648      	mov	r0, r9
    8982:	4798      	blx	r3
		net_buf_unref(chan->_sdu);
    8984:	f8d9 0094 	ldr.w	r0, [r9, #148]	; 0x94
    8988:	f012 f998 	bl	1acbc <net_buf_unref>
		chan->_sdu = NULL;
    898c:	2300      	movs	r3, #0
    898e:	f8c9 3094 	str.w	r3, [r9, #148]	; 0x94
		chan->_sdu_len = 0;
    8992:	f8a9 3098 	strh.w	r3, [r9, #152]	; 0x98
    8996:	e7ea      	b.n	896e <l2cap_chan_le_recv_sdu+0xac>

00008998 <l2cap_chan_le_recv>:
{
    8998:	b570      	push	{r4, r5, r6, lr}
    899a:	4604      	mov	r4, r0
    899c:	460d      	mov	r5, r1
    899e:	2100      	movs	r1, #0
    89a0:	3048      	adds	r0, #72	; 0x48
    89a2:	f020 fce9 	bl	29378 <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    89a6:	b938      	cbnz	r0, 89b8 <l2cap_chan_le_recv+0x20>
	if (chan->_sdu) {
    89a8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    89ac:	b143      	cbz	r3, 89c0 <l2cap_chan_le_recv+0x28>
		l2cap_chan_le_recv_sdu(chan, buf);
    89ae:	4629      	mov	r1, r5
    89b0:	4620      	mov	r0, r4
    89b2:	f7ff ff86 	bl	88c2 <l2cap_chan_le_recv_sdu>
		return;
    89b6:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    89b8:	4620      	mov	r0, r4
    89ba:	f7ff ff5a 	bl	8872 <bt_l2cap_chan_disconnect>
		return;
    89be:	bd70      	pop	{r4, r5, r6, pc}
	sdu_len = net_buf_pull_le16(buf);
    89c0:	f105 0008 	add.w	r0, r5, #8
    89c4:	f012 fa23 	bl	1ae0e <net_buf_simple_pull_le16>
    89c8:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    89ca:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    89ce:	4298      	cmp	r0, r3
    89d0:	d80e      	bhi.n	89f0 <l2cap_chan_le_recv+0x58>
	if (chan->chan.ops->alloc_buf) {
    89d2:	6862      	ldr	r2, [r4, #4]
    89d4:	68d3      	ldr	r3, [r2, #12]
    89d6:	b19b      	cbz	r3, 8a00 <l2cap_chan_le_recv+0x68>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    89d8:	4620      	mov	r0, r4
    89da:	4798      	blx	r3
    89dc:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
		if (!chan->_sdu) {
    89e0:	b150      	cbz	r0, 89f8 <l2cap_chan_le_recv+0x60>
		chan->_sdu_len = sdu_len;
    89e2:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
		l2cap_chan_le_recv_sdu(chan, buf);
    89e6:	4629      	mov	r1, r5
    89e8:	4620      	mov	r0, r4
    89ea:	f7ff ff6a 	bl	88c2 <l2cap_chan_le_recv_sdu>
		return;
    89ee:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    89f0:	4620      	mov	r0, r4
    89f2:	f7ff ff3e 	bl	8872 <bt_l2cap_chan_disconnect>
		return;
    89f6:	bd70      	pop	{r4, r5, r6, pc}
			bt_l2cap_chan_disconnect(&chan->chan);
    89f8:	4620      	mov	r0, r4
    89fa:	f7ff ff3a 	bl	8872 <bt_l2cap_chan_disconnect>
			return;
    89fe:	bd70      	pop	{r4, r5, r6, pc}
	chan->chan.ops->recv(&chan->chan, buf);
    8a00:	6913      	ldr	r3, [r2, #16]
    8a02:	4629      	mov	r1, r5
    8a04:	4620      	mov	r0, r4
    8a06:	4798      	blx	r3
	l2cap_chan_update_credits(chan, buf);
    8a08:	4629      	mov	r1, r5
    8a0a:	4620      	mov	r0, r4
    8a0c:	f7ff fbc5 	bl	819a <l2cap_chan_update_credits>
    8a10:	bd70      	pop	{r4, r5, r6, pc}

00008a12 <l2cap_chan_recv>:
{
    8a12:	b508      	push	{r3, lr}
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    8a14:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    8a18:	3b40      	subs	r3, #64	; 0x40
    8a1a:	b29b      	uxth	r3, r3
    8a1c:	2b3f      	cmp	r3, #63	; 0x3f
    8a1e:	d903      	bls.n	8a28 <l2cap_chan_recv+0x16>
	chan->ops->recv(chan, buf);
    8a20:	6843      	ldr	r3, [r0, #4]
    8a22:	691b      	ldr	r3, [r3, #16]
    8a24:	4798      	blx	r3
    8a26:	bd08      	pop	{r3, pc}
		l2cap_chan_le_recv(ch, buf);
    8a28:	f7ff ffb6 	bl	8998 <l2cap_chan_le_recv>
		return;
    8a2c:	bd08      	pop	{r3, pc}

00008a2e <bt_l2cap_recv>:
{
    8a2e:	b570      	push	{r4, r5, r6, lr}
    8a30:	460c      	mov	r4, r1
	struct bt_l2cap_hdr *hdr = (void *)buf->data;
    8a32:	688a      	ldr	r2, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    8a34:	898b      	ldrh	r3, [r1, #12]
    8a36:	2b03      	cmp	r3, #3
    8a38:	d912      	bls.n	8a60 <bt_l2cap_recv+0x32>
    8a3a:	4605      	mov	r5, r0
	cid = sys_le16_to_cpu(hdr->cid);
    8a3c:	8856      	ldrh	r6, [r2, #2]
	net_buf_pull(buf, sizeof(*hdr));
    8a3e:	2104      	movs	r1, #4
    8a40:	f104 0008 	add.w	r0, r4, #8
    8a44:	f012 f9d3 	bl	1adee <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    8a48:	4631      	mov	r1, r6
    8a4a:	4628      	mov	r0, r5
    8a4c:	f7ff fd3a 	bl	84c4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8a50:	b150      	cbz	r0, 8a68 <bt_l2cap_recv+0x3a>
	l2cap_chan_recv(chan, buf);
    8a52:	4621      	mov	r1, r4
    8a54:	f7ff ffdd 	bl	8a12 <l2cap_chan_recv>
	net_buf_unref(buf);
    8a58:	4620      	mov	r0, r4
    8a5a:	f012 f92f 	bl	1acbc <net_buf_unref>
    8a5e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    8a60:	4608      	mov	r0, r1
    8a62:	f012 f92b 	bl	1acbc <net_buf_unref>
		return;
    8a66:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    8a68:	4620      	mov	r0, r4
    8a6a:	f012 f927 	bl	1acbc <net_buf_unref>
		return;
    8a6e:	bd70      	pop	{r4, r5, r6, pc}

00008a70 <le_credits>:
{
    8a70:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    8a72:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    8a74:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*ev)) {
    8a76:	8993      	ldrh	r3, [r2, #12]
    8a78:	2b03      	cmp	r3, #3
    8a7a:	d800      	bhi.n	8a7e <le_credits+0xe>
    8a7c:	bd38      	pop	{r3, r4, r5, pc}
	credits = sys_le16_to_cpu(ev->credits);
    8a7e:	884d      	ldrh	r5, [r1, #2]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    8a80:	8809      	ldrh	r1, [r1, #0]
    8a82:	f7ff fd04 	bl	848e <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    8a86:	4604      	mov	r4, r0
    8a88:	2800      	cmp	r0, #0
    8a8a:	d0f7      	beq.n	8a7c <le_credits+0xc>
    8a8c:	6f03      	ldr	r3, [r0, #112]	; 0x70
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    8a8e:	442b      	add	r3, r5
    8a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8a94:	d206      	bcs.n	8aa4 <le_credits+0x34>
	l2cap_chan_tx_give_credits(ch, credits);
    8a96:	4629      	mov	r1, r5
    8a98:	f7ff f8a3 	bl	7be2 <l2cap_chan_tx_give_credits>
	l2cap_chan_le_send_resume(ch);
    8a9c:	4620      	mov	r0, r4
    8a9e:	f7ff fc32 	bl	8306 <l2cap_chan_le_send_resume>
    8aa2:	e7eb      	b.n	8a7c <le_credits+0xc>
		bt_l2cap_chan_disconnect(chan);
    8aa4:	f7ff fee5 	bl	8872 <bt_l2cap_chan_disconnect>
		return;
    8aa8:	bd38      	pop	{r3, r4, r5, pc}
	...

00008aac <l2cap_recv>:
{
    8aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    8aae:	b083      	sub	sp, #12
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    8ab0:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    8ab2:	898b      	ldrh	r3, [r1, #12]
    8ab4:	2b03      	cmp	r3, #3
    8ab6:	d801      	bhi.n	8abc <l2cap_recv+0x10>
}
    8ab8:	b003      	add	sp, #12
    8aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8abc:	460c      	mov	r4, r1
    8abe:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
    8ac0:	8877      	ldrh	r7, [r6, #2]
	net_buf_pull(buf, sizeof(*hdr));
    8ac2:	2104      	movs	r1, #4
    8ac4:	f104 0008 	add.w	r0, r4, #8
    8ac8:	f012 f991 	bl	1adee <net_buf_simple_pull>
	if (buf->len != len) {
    8acc:	89a3      	ldrh	r3, [r4, #12]
    8ace:	429f      	cmp	r7, r3
    8ad0:	d1f2      	bne.n	8ab8 <l2cap_recv+0xc>
	if (!hdr->ident) {
    8ad2:	7871      	ldrb	r1, [r6, #1]
    8ad4:	2900      	cmp	r1, #0
    8ad6:	d0ef      	beq.n	8ab8 <l2cap_recv+0xc>
	switch (hdr->code) {
    8ad8:	7833      	ldrb	r3, [r6, #0]
    8ada:	3b01      	subs	r3, #1
    8adc:	2b15      	cmp	r3, #21
    8ade:	d852      	bhi.n	8b86 <l2cap_recv+0xda>
    8ae0:	a201      	add	r2, pc, #4	; (adr r2, 8ae8 <l2cap_recv+0x3c>)
    8ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8ae6:	bf00      	nop
    8ae8:	00008b7d 	.word	0x00008b7d
    8aec:	00008b87 	.word	0x00008b87
    8af0:	00008b87 	.word	0x00008b87
    8af4:	00008b87 	.word	0x00008b87
    8af8:	00008b87 	.word	0x00008b87
    8afc:	00008b5f 	.word	0x00008b5f
    8b00:	00008b69 	.word	0x00008b69
    8b04:	00008b87 	.word	0x00008b87
    8b08:	00008b87 	.word	0x00008b87
    8b0c:	00008b87 	.word	0x00008b87
    8b10:	00008b87 	.word	0x00008b87
    8b14:	00008b87 	.word	0x00008b87
    8b18:	00008b87 	.word	0x00008b87
    8b1c:	00008b87 	.word	0x00008b87
    8b20:	00008b87 	.word	0x00008b87
    8b24:	00008b87 	.word	0x00008b87
    8b28:	00008b87 	.word	0x00008b87
    8b2c:	00008b41 	.word	0x00008b41
    8b30:	00008ab9 	.word	0x00008ab9
    8b34:	00008b4b 	.word	0x00008b4b
    8b38:	00008b55 	.word	0x00008b55
    8b3c:	00008b73 	.word	0x00008b73
		le_conn_param_update_req(l2cap, hdr->ident, buf);
    8b40:	4622      	mov	r2, r4
    8b42:	4628      	mov	r0, r5
    8b44:	f7ff fc22 	bl	838c <le_conn_param_update_req>
		break;
    8b48:	e7b6      	b.n	8ab8 <l2cap_recv+0xc>
		le_conn_req(l2cap, hdr->ident, buf);
    8b4a:	4622      	mov	r2, r4
    8b4c:	4628      	mov	r0, r5
    8b4e:	f7ff fd4d 	bl	85ec <le_conn_req>
		break;
    8b52:	e7b1      	b.n	8ab8 <l2cap_recv+0xc>
		le_conn_rsp(l2cap, hdr->ident, buf);
    8b54:	4622      	mov	r2, r4
    8b56:	4628      	mov	r0, r5
    8b58:	f7ff f954 	bl	7e04 <le_conn_rsp>
		break;
    8b5c:	e7ac      	b.n	8ab8 <l2cap_recv+0xc>
		le_disconn_req(l2cap, hdr->ident, buf);
    8b5e:	4622      	mov	r2, r4
    8b60:	4628      	mov	r0, r5
    8b62:	f7ff fc57 	bl	8414 <le_disconn_req>
		break;
    8b66:	e7a7      	b.n	8ab8 <l2cap_recv+0xc>
		le_disconn_rsp(l2cap, hdr->ident, buf);
    8b68:	4622      	mov	r2, r4
    8b6a:	4628      	mov	r0, r5
    8b6c:	f7ff f9a0 	bl	7eb0 <le_disconn_rsp>
		break;
    8b70:	e7a2      	b.n	8ab8 <l2cap_recv+0xc>
		le_credits(l2cap, hdr->ident, buf);
    8b72:	4622      	mov	r2, r4
    8b74:	4628      	mov	r0, r5
    8b76:	f7ff ff7b 	bl	8a70 <le_credits>
		break;
    8b7a:	e79d      	b.n	8ab8 <l2cap_recv+0xc>
		reject_cmd(l2cap, hdr->ident, buf);
    8b7c:	4622      	mov	r2, r4
    8b7e:	4628      	mov	r0, r5
    8b80:	f7ff f9a5 	bl	7ece <reject_cmd>
		break;
    8b84:	e798      	b.n	8ab8 <l2cap_recv+0xc>
		l2cap_send_reject(chan->conn, hdr->ident,
    8b86:	6828      	ldr	r0, [r5, #0]
    8b88:	2200      	movs	r2, #0
    8b8a:	9200      	str	r2, [sp, #0]
    8b8c:	4613      	mov	r3, r2
    8b8e:	f7ff fbd9 	bl	8344 <l2cap_send_reject>
		break;
    8b92:	e791      	b.n	8ab8 <l2cap_recv+0xc>

00008b94 <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    8b94:	b510      	push	{r4, lr}
    8b96:	b082      	sub	sp, #8
    8b98:	9101      	str	r1, [sp, #4]
	int err;

	if (!buf) {
    8b9a:	b1f9      	cbz	r1, 8bdc <bt_l2cap_chan_send+0x48>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    8b9c:	6803      	ldr	r3, [r0, #0]
    8b9e:	b303      	cbz	r3, 8be2 <bt_l2cap_chan_send+0x4e>
    8ba0:	7b1b      	ldrb	r3, [r3, #12]
    8ba2:	2b03      	cmp	r3, #3
    8ba4:	d120      	bne.n	8be8 <bt_l2cap_chan_send+0x54>
    8ba6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    8ba8:	2200      	movs	r2, #0
    8baa:	a901      	add	r1, sp, #4
    8bac:	f7ff fb40 	bl	8230 <l2cap_chan_le_send_sdu>
	if (err < 0) {
    8bb0:	2800      	cmp	r0, #0
    8bb2:	db01      	blt.n	8bb8 <bt_l2cap_chan_send+0x24>
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    8bb4:	b002      	add	sp, #8
    8bb6:	bd10      	pop	{r4, pc}
		if (err == -EAGAIN) {
    8bb8:	f110 0f0b 	cmn.w	r0, #11
    8bbc:	d1fa      	bne.n	8bb4 <bt_l2cap_chan_send+0x20>
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    8bbe:	9901      	ldr	r1, [sp, #4]
    8bc0:	f104 0080 	add.w	r0, r4, #128	; 0x80
    8bc4:	f012 f86c 	bl	1aca0 <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    8bc8:	9a01      	ldr	r2, [sp, #4]
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    8bca:	f102 0310 	add.w	r3, r2, #16
    8bce:	89d2      	ldrh	r2, [r2, #14]
    8bd0:	4413      	add	r3, r2
    8bd2:	3303      	adds	r3, #3
    8bd4:	f023 0303 	bic.w	r3, r3, #3
    8bd8:	6818      	ldr	r0, [r3, #0]
    8bda:	e7eb      	b.n	8bb4 <bt_l2cap_chan_send+0x20>
		return -EINVAL;
    8bdc:	f06f 0015 	mvn.w	r0, #21
    8be0:	e7e8      	b.n	8bb4 <bt_l2cap_chan_send+0x20>
		return -ENOTCONN;
    8be2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8be6:	e7e5      	b.n	8bb4 <bt_l2cap_chan_send+0x20>
    8be8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8bec:	e7e2      	b.n	8bb4 <bt_l2cap_chan_send+0x20>

00008bee <range_is_valid>:
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    8bee:	b100      	cbz	r0, 8bf2 <range_is_valid+0x4>
    8bf0:	b919      	cbnz	r1, 8bfa <range_is_valid+0xc>
		if (err) {
    8bf2:	b142      	cbz	r2, 8c06 <range_is_valid+0x18>
			*err = 0;
    8bf4:	2000      	movs	r0, #0
    8bf6:	8010      	strh	r0, [r2, #0]
    8bf8:	4770      	bx	lr
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    8bfa:	4288      	cmp	r0, r1
    8bfc:	d905      	bls.n	8c0a <range_is_valid+0x1c>
		if (err) {
    8bfe:	b132      	cbz	r2, 8c0e <range_is_valid+0x20>
			*err = start;
    8c00:	8010      	strh	r0, [r2, #0]
		}
		return false;
    8c02:	2000      	movs	r0, #0
    8c04:	4770      	bx	lr
		return false;
    8c06:	2000      	movs	r0, #0
    8c08:	4770      	bx	lr
	}

	return true;
    8c0a:	2001      	movs	r0, #1
    8c0c:	4770      	bx	lr
		return false;
    8c0e:	2000      	movs	r0, #0
}
    8c10:	4770      	bx	lr

00008c12 <check_perm>:
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    8c12:	f012 0f01 	tst.w	r2, #1
    8c16:	d007      	beq.n	8c28 <check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    8c18:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
    8c1a:	f013 0f15 	tst.w	r3, #21
    8c1e:	d101      	bne.n	8c24 <check_perm+0x12>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    8c20:	2002      	movs	r0, #2
    8c22:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    8c24:	684b      	ldr	r3, [r1, #4]
    8c26:	b1eb      	cbz	r3, 8c64 <check_perm+0x52>
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    8c28:	f012 0f02 	tst.w	r2, #2
    8c2c:	d007      	beq.n	8c3e <check_perm+0x2c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    8c2e:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
    8c30:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    8c34:	d101      	bne.n	8c3a <check_perm+0x28>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    8c36:	2003      	movs	r0, #3
    8c38:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    8c3a:	688b      	ldr	r3, [r1, #8]
    8c3c:	b1a3      	cbz	r3, 8c68 <check_perm+0x56>
	}

	mask &= attr->perm;
    8c3e:	7c8b      	ldrb	r3, [r1, #18]
    8c40:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    8c42:	f012 0f30 	tst.w	r2, #48	; 0x30
    8c46:	d004      	beq.n	8c52 <check_perm+0x40>
#if defined(CONFIG_BT_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    8c48:	7a03      	ldrb	r3, [r0, #8]
    8c4a:	2b02      	cmp	r3, #2
    8c4c:	d801      	bhi.n	8c52 <check_perm+0x40>
			return BT_ATT_ERR_AUTHENTICATION;
    8c4e:	2005      	movs	r0, #5
    8c50:	4770      	bx	lr
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BT_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    8c52:	f012 0f0c 	tst.w	r2, #12
    8c56:	d009      	beq.n	8c6c <check_perm+0x5a>
#if defined(CONFIG_BT_SMP)
		if (!conn->encrypt) {
    8c58:	7a83      	ldrb	r3, [r0, #10]
    8c5a:	b90b      	cbnz	r3, 8c60 <check_perm+0x4e>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    8c5c:	200f      	movs	r0, #15
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BT_SMP */
	}

	return 0;
}
    8c5e:	4770      	bx	lr
	return 0;
    8c60:	2000      	movs	r0, #0
    8c62:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    8c64:	2002      	movs	r0, #2
    8c66:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    8c68:	2003      	movs	r0, #3
    8c6a:	4770      	bx	lr
	return 0;
    8c6c:	2000      	movs	r0, #0
    8c6e:	4770      	bx	lr

00008c70 <err_to_att>:

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    8c70:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    8c74:	2bfe      	cmp	r3, #254	; 0xfe
    8c76:	d901      	bls.n	8c7c <err_to_att+0xc>
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    8c78:	200e      	movs	r0, #14
}
    8c7a:	4770      	bx	lr
		return -err;
    8c7c:	4240      	negs	r0, r0
    8c7e:	b2c0      	uxtb	r0, r0
    8c80:	4770      	bx	lr

00008c82 <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    8c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c86:	b082      	sub	sp, #8
    8c88:	4606      	mov	r6, r0
    8c8a:	460c      	mov	r4, r1
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    8c8c:	680f      	ldr	r7, [r1, #0]
    8c8e:	222a      	movs	r2, #42	; 0x2a
    8c90:	4601      	mov	r1, r0
    8c92:	4638      	mov	r0, r7
    8c94:	f7ff ffbd 	bl	8c12 <check_perm>
    8c98:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8c9a:	b120      	cbz	r0, 8ca6 <write_cb+0x24>
		return BT_GATT_ITER_STOP;
    8c9c:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    8c9e:	4628      	mov	r0, r5
    8ca0:	b002      	add	sp, #8
    8ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ca6:	4605      	mov	r5, r0
	write = attr->write(data->conn, attr, data->value, data->len,
    8ca8:	f8d6 8008 	ldr.w	r8, [r6, #8]
    8cac:	7c23      	ldrb	r3, [r4, #16]
    8cae:	8a62      	ldrh	r2, [r4, #18]
    8cb0:	2100      	movs	r1, #0
    8cb2:	9101      	str	r1, [sp, #4]
    8cb4:	9200      	str	r2, [sp, #0]
    8cb6:	68e2      	ldr	r2, [r4, #12]
    8cb8:	4631      	mov	r1, r6
    8cba:	4638      	mov	r0, r7
    8cbc:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    8cbe:	2800      	cmp	r0, #0
    8cc0:	db02      	blt.n	8cc8 <write_cb+0x46>
    8cc2:	7c23      	ldrb	r3, [r4, #16]
    8cc4:	4298      	cmp	r0, r3
    8cc6:	d003      	beq.n	8cd0 <write_cb+0x4e>
		data->err = err_to_att(write);
    8cc8:	f7ff ffd2 	bl	8c70 <err_to_att>
    8ccc:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8cce:	e7e6      	b.n	8c9e <write_cb+0x1c>
	data->err = 0;
    8cd0:	2300      	movs	r3, #0
    8cd2:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    8cd4:	2501      	movs	r5, #1
    8cd6:	e7e2      	b.n	8c9e <write_cb+0x1c>

00008cd8 <att_prepare_write_req>:

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    8cd8:	2006      	movs	r0, #6
    8cda:	4770      	bx	lr

00008cdc <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    8cdc:	2006      	movs	r0, #6
    8cde:	4770      	bx	lr

00008ce0 <att_op_get_type>:
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8ce0:	2300      	movs	r3, #0
    8ce2:	2b1a      	cmp	r3, #26
    8ce4:	d80b      	bhi.n	8cfe <att_op_get_type+0x1e>
		if (op == handlers[i].op) {
    8ce6:	4a09      	ldr	r2, [pc, #36]	; (8d0c <att_op_get_type+0x2c>)
    8ce8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    8cec:	4282      	cmp	r2, r0
    8cee:	d001      	beq.n	8cf4 <att_op_get_type+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8cf0:	3301      	adds	r3, #1
    8cf2:	e7f6      	b.n	8ce2 <att_op_get_type+0x2>
			return handlers[i].type;
    8cf4:	4a05      	ldr	r2, [pc, #20]	; (8d0c <att_op_get_type+0x2c>)
    8cf6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8cfa:	7898      	ldrb	r0, [r3, #2]
    8cfc:	4770      	bx	lr
		}
	}

	if (op & ATT_CMD_MASK) {
    8cfe:	f010 0f40 	tst.w	r0, #64	; 0x40
    8d02:	d101      	bne.n	8d08 <att_op_get_type+0x28>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    8d04:	2006      	movs	r0, #6
}
    8d06:	4770      	bx	lr
		return ATT_COMMAND;
    8d08:	2000      	movs	r0, #0
    8d0a:	4770      	bx	lr
    8d0c:	000314dc 	.word	0x000314dc

00008d10 <att_cb>:
{
    8d10:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    8d12:	6883      	ldr	r3, [r0, #8]
    8d14:	7818      	ldrb	r0, [r3, #0]
    8d16:	f7ff ffe3 	bl	8ce0 <att_op_get_type>
    8d1a:	3801      	subs	r0, #1
    8d1c:	2804      	cmp	r0, #4
    8d1e:	d808      	bhi.n	8d32 <att_cb+0x22>
    8d20:	e8df f000 	tbb	[pc, r0]
    8d24:	09070305 	.word	0x09070305
    8d28:	05          	.byte	0x05
    8d29:	00          	.byte	0x00
		return att_rsp_sent;
    8d2a:	4804      	ldr	r0, [pc, #16]	; (8d3c <att_cb+0x2c>)
    8d2c:	bd08      	pop	{r3, pc}
		return att_req_sent;
    8d2e:	4804      	ldr	r0, [pc, #16]	; (8d40 <att_cb+0x30>)
    8d30:	bd08      	pop	{r3, pc}
		return att_pdu_sent;
    8d32:	4804      	ldr	r0, [pc, #16]	; (8d44 <att_cb+0x34>)
    8d34:	bd08      	pop	{r3, pc}
		return att_cfm_sent;
    8d36:	4804      	ldr	r0, [pc, #16]	; (8d48 <att_cb+0x38>)
}
    8d38:	bd08      	pop	{r3, pc}
    8d3a:	bf00      	nop
    8d3c:	00008e83 	.word	0x00008e83
    8d40:	00008ef5 	.word	0x00008ef5
    8d44:	00008ead 	.word	0x00008ead
    8d48:	00008ebb 	.word	0x00008ebb

00008d4c <read_cb>:
{
    8d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8d50:	b083      	sub	sp, #12
    8d52:	4606      	mov	r6, r0
    8d54:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8d56:	f8d1 8000 	ldr.w	r8, [r1]
	struct bt_conn *conn = att->chan.chan.conn;
    8d5a:	f8d8 7000 	ldr.w	r7, [r8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8d5e:	6888      	ldr	r0, [r1, #8]
    8d60:	2100      	movs	r1, #0
    8d62:	3008      	adds	r0, #8
    8d64:	f011 fff6 	bl	1ad54 <net_buf_simple_add>
    8d68:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    8d6a:	2300      	movs	r3, #0
    8d6c:	7423      	strb	r3, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8d6e:	2215      	movs	r2, #21
    8d70:	4631      	mov	r1, r6
    8d72:	4638      	mov	r0, r7
    8d74:	f7ff ff4d 	bl	8c12 <check_perm>
    8d78:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    8d7a:	b120      	cbz	r0, 8d86 <read_cb+0x3a>
		return BT_GATT_ITER_STOP;
    8d7c:	2500      	movs	r5, #0
}
    8d7e:	4628      	mov	r0, r5
    8d80:	b003      	add	sp, #12
    8d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8d86:	4605      	mov	r5, r0
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8d88:	f8d6 9004 	ldr.w	r9, [r6, #4]
    8d8c:	68a3      	ldr	r3, [r4, #8]
    8d8e:	6899      	ldr	r1, [r3, #8]
    8d90:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, data->offset);
    8d92:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8d96:	1a9b      	subs	r3, r3, r2
    8d98:	88a0      	ldrh	r0, [r4, #4]
    8d9a:	9000      	str	r0, [sp, #0]
    8d9c:	b29b      	uxth	r3, r3
    8d9e:	440a      	add	r2, r1
    8da0:	4631      	mov	r1, r6
    8da2:	4638      	mov	r0, r7
    8da4:	47c8      	blx	r9
	if (read < 0) {
    8da6:	1e01      	subs	r1, r0, #0
    8da8:	db05      	blt.n	8db6 <read_cb+0x6a>
	net_buf_add(data->buf, read);
    8daa:	68a0      	ldr	r0, [r4, #8]
    8dac:	3008      	adds	r0, #8
    8dae:	f011 ffd1 	bl	1ad54 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    8db2:	2501      	movs	r5, #1
    8db4:	e7e3      	b.n	8d7e <read_cb+0x32>
		data->err = err_to_att(read);
    8db6:	4608      	mov	r0, r1
    8db8:	f7ff ff5a 	bl	8c70 <err_to_att>
    8dbc:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
    8dbe:	e7de      	b.n	8d7e <read_cb+0x32>

00008dc0 <att_chan_get>:
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    8dc0:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    8dc2:	7b03      	ldrb	r3, [r0, #12]
    8dc4:	2b03      	cmp	r3, #3
    8dc6:	d10f      	bne.n	8de8 <att_chan_get+0x28>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    8dc8:	2104      	movs	r1, #4
    8dca:	f7ff fb7b 	bl	84c4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8dce:	b168      	cbz	r0, 8dec <att_chan_get+0x2c>
    8dd0:	f3bf 8f5b 	dmb	ish
    8dd4:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    8dd8:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    8ddc:	f012 0f04 	tst.w	r2, #4
    8de0:	d100      	bne.n	8de4 <att_chan_get+0x24>
		BT_WARN("ATT context flagged as disconnected");
		return NULL;
	}

	return att;
}
    8de2:	bd08      	pop	{r3, pc}
		return NULL;
    8de4:	2000      	movs	r0, #0
    8de6:	bd08      	pop	{r3, pc}
		return NULL;
    8de8:	2000      	movs	r0, #0
    8dea:	bd08      	pop	{r3, pc}
		return NULL;
    8dec:	2000      	movs	r0, #0
    8dee:	bd08      	pop	{r3, pc}

00008df0 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    8df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CONFIG_BT_SMP */
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    8df2:	2400      	movs	r4, #0
    8df4:	b11c      	cbz	r4, 8dfe <bt_att_accept+0xe>
		return 0;
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    8df6:	f06f 040b 	mvn.w	r4, #11
}
    8dfa:	4620      	mov	r0, r4
    8dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (att->chan.chan.conn) {
    8dfe:	23ec      	movs	r3, #236	; 0xec
    8e00:	fb03 f304 	mul.w	r3, r3, r4
    8e04:	4a12      	ldr	r2, [pc, #72]	; (8e50 <bt_att_accept+0x60>)
    8e06:	58d3      	ldr	r3, [r2, r3]
    8e08:	b10b      	cbz	r3, 8e0e <bt_att_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    8e0a:	3401      	adds	r4, #1
    8e0c:	e7f2      	b.n	8df4 <bt_att_accept+0x4>
    8e0e:	460d      	mov	r5, r1
		att->chan.chan.ops = &ops;
    8e10:	480f      	ldr	r0, [pc, #60]	; (8e50 <bt_att_accept+0x60>)
    8e12:	23ec      	movs	r3, #236	; 0xec
    8e14:	fb03 f304 	mul.w	r3, r3, r4
    8e18:	18c6      	adds	r6, r0, r3
    8e1a:	4a0e      	ldr	r2, [pc, #56]	; (8e54 <bt_att_accept+0x64>)
    8e1c:	6072      	str	r2, [r6, #4]
		atomic_set(att->flags, 0);
    8e1e:	f103 0298 	add.w	r2, r3, #152	; 0x98
    8e22:	4402      	add	r2, r0
    8e24:	3204      	adds	r2, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8e26:	2100      	movs	r1, #0
    8e28:	f3bf 8f5b 	dmb	ish
    8e2c:	e852 7f00 	ldrex	r7, [r2]
    8e30:	e842 1e00 	strex	lr, r1, [r2]
    8e34:	f1be 0f00 	cmp.w	lr, #0
    8e38:	d1f8      	bne.n	8e2c <bt_att_accept+0x3c>
    8e3a:	f3bf 8f5b 	dmb	ish
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
    8e3e:	33d0      	adds	r3, #208	; 0xd0
    8e40:	4418      	add	r0, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    8e42:	2202      	movs	r2, #2
    8e44:	4611      	mov	r1, r2
    8e46:	3004      	adds	r0, #4
    8e48:	f020 fa7a 	bl	29340 <_impl_k_sem_init>
		*chan = &att->chan.chan;
    8e4c:	602e      	str	r6, [r5, #0]
		return 0;
    8e4e:	e7d4      	b.n	8dfa <bt_att_accept+0xa>
    8e50:	20000c34 	.word	0x20000c34
    8e54:	2000bfdc 	.word	0x2000bfdc

00008e58 <att_req_destroy>:
{
    8e58:	b510      	push	{r4, lr}
    8e5a:	4604      	mov	r4, r0
	if (req->buf) {
    8e5c:	6900      	ldr	r0, [r0, #16]
    8e5e:	b108      	cbz	r0, 8e64 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    8e60:	f011 ff2c 	bl	1acbc <net_buf_unref>
	if (req->destroy) {
    8e64:	68a3      	ldr	r3, [r4, #8]
    8e66:	b10b      	cbz	r3, 8e6c <att_req_destroy+0x14>
		req->destroy(req);
    8e68:	4620      	mov	r0, r4
    8e6a:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    8e6c:	2218      	movs	r2, #24
    8e6e:	2100      	movs	r1, #0
    8e70:	4620      	mov	r0, r4
    8e72:	f021 fd21 	bl	2a8b8 <memset>
    8e76:	bd10      	pop	{r4, pc}

00008e78 <att_get>:
{
    8e78:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8e7a:	2104      	movs	r1, #4
    8e7c:	f7ff fb07 	bl	848e <bt_l2cap_le_lookup_tx_cid>
}
    8e80:	bd08      	pop	{r3, pc}

00008e82 <att_rsp_sent>:
{
    8e82:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8e84:	f7ff fff8 	bl	8e78 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
    8e88:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8e8c:	f3bf 8f5b 	dmb	ish
    8e90:	e853 2f00 	ldrex	r2, [r3]
    8e94:	f022 0201 	bic.w	r2, r2, #1
    8e98:	e843 2100 	strex	r1, r2, [r3]
    8e9c:	2900      	cmp	r1, #0
    8e9e:	d1f7      	bne.n	8e90 <att_rsp_sent+0xe>
    8ea0:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8ea4:	30d4      	adds	r0, #212	; 0xd4
    8ea6:	f020 fa54 	bl	29352 <_impl_k_sem_give>
    8eaa:	bd08      	pop	{r3, pc}

00008eac <att_pdu_sent>:
{
    8eac:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8eae:	f7ff ffe3 	bl	8e78 <att_get>
    8eb2:	30d4      	adds	r0, #212	; 0xd4
    8eb4:	f020 fa4d 	bl	29352 <_impl_k_sem_give>
    8eb8:	bd08      	pop	{r3, pc}

00008eba <att_cfm_sent>:
{
    8eba:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8ebc:	f7ff ffdc 	bl	8e78 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
    8ec0:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    8ec4:	f3bf 8f5b 	dmb	ish
    8ec8:	e853 2f00 	ldrex	r2, [r3]
    8ecc:	f022 0202 	bic.w	r2, r2, #2
    8ed0:	e843 2100 	strex	r1, r2, [r3]
    8ed4:	2900      	cmp	r1, #0
    8ed6:	d1f7      	bne.n	8ec8 <att_cfm_sent+0xe>
    8ed8:	f3bf 8f5b 	dmb	ish
    8edc:	30d4      	adds	r0, #212	; 0xd4
    8ede:	f020 fa38 	bl	29352 <_impl_k_sem_give>
    8ee2:	bd08      	pop	{r3, pc}

00008ee4 <att_notify>:
{
    8ee4:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    8ee6:	f101 0008 	add.w	r0, r1, #8
    8eea:	f011 ff90 	bl	1ae0e <net_buf_simple_pull_le16>
}
    8eee:	2000      	movs	r0, #0
    8ef0:	bd08      	pop	{r3, pc}
	...

00008ef4 <att_req_sent>:
{
    8ef4:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
    8ef6:	f7ff ffbf 	bl	8e78 <att_get>
    8efa:	4604      	mov	r4, r0
    8efc:	30d4      	adds	r0, #212	; 0xd4
    8efe:	f020 fa28 	bl	29352 <_impl_k_sem_give>
	if (att->req) {
    8f02:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8f06:	b133      	cbz	r3, 8f16 <att_req_sent+0x22>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8f08:	f247 5230 	movw	r2, #30000	; 0x7530
    8f0c:	f104 01ac 	add.w	r1, r4, #172	; 0xac
    8f10:	4801      	ldr	r0, [pc, #4]	; (8f18 <att_req_sent+0x24>)
    8f12:	f021 f867 	bl	29fe4 <k_delayed_work_submit_to_queue>
    8f16:	bd10      	pop	{r4, pc}
    8f18:	20003158 	.word	0x20003158

00008f1c <read_group_cb>:
{
    8f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f20:	b084      	sub	sp, #16
    8f22:	4605      	mov	r5, r0
    8f24:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8f26:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    8f28:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8f2a:	2300      	movs	r3, #0
    8f2c:	f88d 3008 	strb.w	r3, [sp, #8]
    8f30:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8f34:	f8ad 300a 	strh.w	r3, [sp, #10]
    8f38:	a902      	add	r1, sp, #8
    8f3a:	6800      	ldr	r0, [r0, #0]
    8f3c:	f7fb fb8d 	bl	465a <bt_uuid_cmp>
    8f40:	b1a8      	cbz	r0, 8f6e <read_group_cb+0x52>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8f42:	2300      	movs	r3, #0
    8f44:	f88d 300c 	strb.w	r3, [sp, #12]
    8f48:	f642 0301 	movw	r3, #10241	; 0x2801
    8f4c:	f8ad 300e 	strh.w	r3, [sp, #14]
    8f50:	a903      	add	r1, sp, #12
    8f52:	6828      	ldr	r0, [r5, #0]
    8f54:	f7fb fb81 	bl	465a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8f58:	b148      	cbz	r0, 8f6e <read_group_cb+0x52>
		if (data->group && attr->handle > data->group->end_handle) {
    8f5a:	6923      	ldr	r3, [r4, #16]
    8f5c:	2b00      	cmp	r3, #0
    8f5e:	d04c      	beq.n	8ffa <read_group_cb+0xde>
    8f60:	8a2a      	ldrh	r2, [r5, #16]
    8f62:	8859      	ldrh	r1, [r3, #2]
    8f64:	428a      	cmp	r2, r1
    8f66:	d94a      	bls.n	8ffe <read_group_cb+0xe2>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    8f68:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    8f6a:	2001      	movs	r0, #1
    8f6c:	e039      	b.n	8fe2 <read_group_cb+0xc6>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8f6e:	6861      	ldr	r1, [r4, #4]
    8f70:	6828      	ldr	r0, [r5, #0]
    8f72:	f7fb fb72 	bl	465a <bt_uuid_cmp>
    8f76:	2800      	cmp	r0, #0
    8f78:	d130      	bne.n	8fdc <read_group_cb+0xc0>
	if (data->rsp->len &&
    8f7a:	68e3      	ldr	r3, [r4, #12]
    8f7c:	781a      	ldrb	r2, [r3, #0]
    8f7e:	b132      	cbz	r2, 8f8e <read_group_cb+0x72>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8f80:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    8f84:	68a1      	ldr	r1, [r4, #8]
    8f86:	8989      	ldrh	r1, [r1, #12]
    8f88:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    8f8a:	4293      	cmp	r3, r2
    8f8c:	db39      	blt.n	9002 <read_group_cb+0xe6>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8f8e:	68a0      	ldr	r0, [r4, #8]
    8f90:	2104      	movs	r1, #4
    8f92:	3008      	adds	r0, #8
    8f94:	f011 fede 	bl	1ad54 <net_buf_simple_add>
    8f98:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    8f9a:	8a2b      	ldrh	r3, [r5, #16]
    8f9c:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    8f9e:	6923      	ldr	r3, [r4, #16]
    8fa0:	8a2a      	ldrh	r2, [r5, #16]
    8fa2:	805a      	strh	r2, [r3, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8fa4:	f8d5 8004 	ldr.w	r8, [r5, #4]
    8fa8:	68a3      	ldr	r3, [r4, #8]
    8faa:	6899      	ldr	r1, [r3, #8]
    8fac:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    8fae:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8fb2:	1a9b      	subs	r3, r3, r2
    8fb4:	2000      	movs	r0, #0
    8fb6:	9000      	str	r0, [sp, #0]
    8fb8:	b29b      	uxth	r3, r3
    8fba:	440a      	add	r2, r1
    8fbc:	4629      	mov	r1, r5
    8fbe:	4638      	mov	r0, r7
    8fc0:	47c0      	blx	r8
	if (read < 0) {
    8fc2:	1e01      	subs	r1, r0, #0
    8fc4:	db1f      	blt.n	9006 <read_group_cb+0xea>
	if (!data->rsp->len) {
    8fc6:	68e2      	ldr	r2, [r4, #12]
    8fc8:	7813      	ldrb	r3, [r2, #0]
    8fca:	b96b      	cbnz	r3, 8fe8 <read_group_cb+0xcc>
		data->rsp->len = read + sizeof(*data->group);
    8fcc:	1d0b      	adds	r3, r1, #4
    8fce:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    8fd0:	68a0      	ldr	r0, [r4, #8]
    8fd2:	3008      	adds	r0, #8
    8fd4:	f011 febe 	bl	1ad54 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    8fd8:	2001      	movs	r0, #1
    8fda:	e002      	b.n	8fe2 <read_group_cb+0xc6>
		data->group = NULL;
    8fdc:	2300      	movs	r3, #0
    8fde:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    8fe0:	2001      	movs	r0, #1
}
    8fe2:	b004      	add	sp, #16
    8fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    8fe8:	1d0a      	adds	r2, r1, #4
    8fea:	4293      	cmp	r3, r2
    8fec:	d0f0      	beq.n	8fd0 <read_group_cb+0xb4>
		data->buf->len -= sizeof(*data->group);
    8fee:	68a2      	ldr	r2, [r4, #8]
    8ff0:	8993      	ldrh	r3, [r2, #12]
    8ff2:	3b04      	subs	r3, #4
    8ff4:	8193      	strh	r3, [r2, #12]
		return false;
    8ff6:	2000      	movs	r0, #0
    8ff8:	e7f3      	b.n	8fe2 <read_group_cb+0xc6>
		return BT_GATT_ITER_CONTINUE;
    8ffa:	2001      	movs	r0, #1
    8ffc:	e7f1      	b.n	8fe2 <read_group_cb+0xc6>
    8ffe:	2001      	movs	r0, #1
    9000:	e7ef      	b.n	8fe2 <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    9002:	2000      	movs	r0, #0
    9004:	e7ed      	b.n	8fe2 <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    9006:	2000      	movs	r0, #0
    9008:	e7eb      	b.n	8fe2 <read_group_cb+0xc6>

0000900a <read_type_cb>:
{
    900a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    900e:	b082      	sub	sp, #8
    9010:	4606      	mov	r6, r0
    9012:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    9014:	680f      	ldr	r7, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    9016:	f8d7 8000 	ldr.w	r8, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    901a:	6849      	ldr	r1, [r1, #4]
    901c:	6800      	ldr	r0, [r0, #0]
    901e:	f7fb fb1c 	bl	465a <bt_uuid_cmp>
    9022:	2800      	cmp	r0, #0
    9024:	d14d      	bne.n	90c2 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    9026:	2215      	movs	r2, #21
    9028:	4631      	mov	r1, r6
    902a:	4640      	mov	r0, r8
    902c:	f7ff fdf1 	bl	8c12 <check_perm>
    9030:	4605      	mov	r5, r0
    9032:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    9034:	b130      	cbz	r0, 9044 <read_type_cb+0x3a>
		if (data->rsp->len) {
    9036:	68e3      	ldr	r3, [r4, #12]
    9038:	781d      	ldrb	r5, [r3, #0]
    903a:	2d00      	cmp	r5, #0
    903c:	d042      	beq.n	90c4 <read_type_cb+0xba>
			data->err = 0x00;
    903e:	2500      	movs	r5, #0
    9040:	7525      	strb	r5, [r4, #20]
    9042:	e03f      	b.n	90c4 <read_type_cb+0xba>
	data->err = 0x00;
    9044:	f04f 0900 	mov.w	r9, #0
    9048:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    904c:	68a0      	ldr	r0, [r4, #8]
    904e:	2102      	movs	r1, #2
    9050:	3008      	adds	r0, #8
    9052:	f011 fe7f 	bl	1ad54 <net_buf_simple_add>
    9056:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    9058:	8a33      	ldrh	r3, [r6, #16]
    905a:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    905c:	f8d6 a004 	ldr.w	sl, [r6, #4]
    9060:	68a3      	ldr	r3, [r4, #8]
    9062:	6899      	ldr	r1, [r3, #8]
    9064:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    9066:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    906a:	1a9b      	subs	r3, r3, r2
    906c:	f8cd 9000 	str.w	r9, [sp]
    9070:	b29b      	uxth	r3, r3
    9072:	440a      	add	r2, r1
    9074:	4631      	mov	r1, r6
    9076:	4640      	mov	r0, r8
    9078:	47d0      	blx	sl
	if (read < 0) {
    907a:	1e01      	subs	r1, r0, #0
    907c:	db14      	blt.n	90a8 <read_type_cb+0x9e>
	if (!data->rsp->len) {
    907e:	68e2      	ldr	r2, [r4, #12]
    9080:	7813      	ldrb	r3, [r2, #0]
    9082:	b9b3      	cbnz	r3, 90b2 <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
    9084:	1c8b      	adds	r3, r1, #2
    9086:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    9088:	68a0      	ldr	r0, [r4, #8]
    908a:	3008      	adds	r0, #8
    908c:	f011 fe62 	bl	1ad54 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    9090:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
    9094:	68a3      	ldr	r3, [r4, #8]
    9096:	899b      	ldrh	r3, [r3, #12]
    9098:	1aed      	subs	r5, r5, r3
    909a:	68e3      	ldr	r3, [r4, #12]
    909c:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    909e:	429d      	cmp	r5, r3
    90a0:	bfd4      	ite	le
    90a2:	2500      	movle	r5, #0
    90a4:	2501      	movgt	r5, #1
    90a6:	e00d      	b.n	90c4 <read_type_cb+0xba>
		data->err = err_to_att(read);
    90a8:	4608      	mov	r0, r1
    90aa:	f7ff fde1 	bl	8c70 <err_to_att>
    90ae:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    90b0:	e008      	b.n	90c4 <read_type_cb+0xba>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    90b2:	1c8a      	adds	r2, r1, #2
    90b4:	4293      	cmp	r3, r2
    90b6:	d0e7      	beq.n	9088 <read_type_cb+0x7e>
		data->buf->len -= sizeof(*data->item);
    90b8:	68a2      	ldr	r2, [r4, #8]
    90ba:	8993      	ldrh	r3, [r2, #12]
    90bc:	3b02      	subs	r3, #2
    90be:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    90c0:	e000      	b.n	90c4 <read_type_cb+0xba>
		return BT_GATT_ITER_CONTINUE;
    90c2:	2501      	movs	r5, #1
}
    90c4:	4628      	mov	r0, r5
    90c6:	b002      	add	sp, #8
    90c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000090cc <uuid_create>:
{
    90cc:	b510      	push	{r4, lr}
    90ce:	4604      	mov	r4, r0
	switch (buf->len) {
    90d0:	898b      	ldrh	r3, [r1, #12]
    90d2:	2b02      	cmp	r3, #2
    90d4:	d003      	beq.n	90de <uuid_create+0x12>
    90d6:	2b10      	cmp	r3, #16
    90d8:	d00a      	beq.n	90f0 <uuid_create+0x24>
	return false;
    90da:	2000      	movs	r0, #0
}
    90dc:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    90de:	2300      	movs	r3, #0
    90e0:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    90e2:	f101 0008 	add.w	r0, r1, #8
    90e6:	f011 fe92 	bl	1ae0e <net_buf_simple_pull_le16>
    90ea:	8060      	strh	r0, [r4, #2]
		return true;
    90ec:	2001      	movs	r0, #1
    90ee:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    90f0:	2302      	movs	r3, #2
    90f2:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    90f6:	898a      	ldrh	r2, [r1, #12]
    90f8:	6889      	ldr	r1, [r1, #8]
    90fa:	f7f7 f8e1 	bl	2c0 <memcpy>
		return true;
    90fe:	2001      	movs	r0, #1
    9100:	bd10      	pop	{r4, pc}

00009102 <find_info_cb>:
{
    9102:	b570      	push	{r4, r5, r6, lr}
    9104:	4605      	mov	r5, r0
    9106:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    9108:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    910a:	688b      	ldr	r3, [r1, #8]
    910c:	b13b      	cbz	r3, 911e <find_info_cb+0x1c>
	switch (data->rsp->format) {
    910e:	68a3      	ldr	r3, [r4, #8]
    9110:	781b      	ldrb	r3, [r3, #0]
    9112:	2b01      	cmp	r3, #1
    9114:	d011      	beq.n	913a <find_info_cb+0x38>
    9116:	2b02      	cmp	r3, #2
    9118:	d02b      	beq.n	9172 <find_info_cb+0x70>
	return BT_GATT_ITER_STOP;
    911a:	2000      	movs	r0, #0
    911c:	bd70      	pop	{r4, r5, r6, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    911e:	6848      	ldr	r0, [r1, #4]
    9120:	2101      	movs	r1, #1
    9122:	3008      	adds	r0, #8
    9124:	f011 fe16 	bl	1ad54 <net_buf_simple_add>
    9128:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    912a:	682b      	ldr	r3, [r5, #0]
    912c:	781b      	ldrb	r3, [r3, #0]
    912e:	b913      	cbnz	r3, 9136 <find_info_cb+0x34>
    9130:	2301      	movs	r3, #1
    9132:	7003      	strb	r3, [r0, #0]
    9134:	e7eb      	b.n	910e <find_info_cb+0xc>
    9136:	2302      	movs	r3, #2
    9138:	e7fb      	b.n	9132 <find_info_cb+0x30>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    913a:	682b      	ldr	r3, [r5, #0]
    913c:	781b      	ldrb	r3, [r3, #0]
    913e:	b10b      	cbz	r3, 9144 <find_info_cb+0x42>
			return BT_GATT_ITER_STOP;
    9140:	2000      	movs	r0, #0
    9142:	bd70      	pop	{r4, r5, r6, pc}
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    9144:	6860      	ldr	r0, [r4, #4]
    9146:	2104      	movs	r1, #4
    9148:	3008      	adds	r0, #8
    914a:	f011 fe03 	bl	1ad54 <net_buf_simple_add>
    914e:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    9150:	8a2b      	ldrh	r3, [r5, #16]
    9152:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    9154:	68e3      	ldr	r3, [r4, #12]
    9156:	682a      	ldr	r2, [r5, #0]
    9158:	8852      	ldrh	r2, [r2, #2]
    915a:	805a      	strh	r2, [r3, #2]
		if (att->chan.tx.mtu - data->buf->len >
    915c:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    9160:	6862      	ldr	r2, [r4, #4]
    9162:	8992      	ldrh	r2, [r2, #12]
    9164:	1a9b      	subs	r3, r3, r2
    9166:	2b04      	cmp	r3, #4
    9168:	d801      	bhi.n	916e <find_info_cb+0x6c>
	return BT_GATT_ITER_STOP;
    916a:	2000      	movs	r0, #0
    916c:	bd70      	pop	{r4, r5, r6, pc}
			return BT_GATT_ITER_CONTINUE;
    916e:	2001      	movs	r0, #1
    9170:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    9172:	682b      	ldr	r3, [r5, #0]
    9174:	781b      	ldrb	r3, [r3, #0]
    9176:	2b02      	cmp	r3, #2
    9178:	d001      	beq.n	917e <find_info_cb+0x7c>
			return BT_GATT_ITER_STOP;
    917a:	2000      	movs	r0, #0
    917c:	bd70      	pop	{r4, r5, r6, pc}
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    917e:	6860      	ldr	r0, [r4, #4]
    9180:	2112      	movs	r1, #18
    9182:	3008      	adds	r0, #8
    9184:	f011 fde6 	bl	1ad54 <net_buf_simple_add>
    9188:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    918a:	8a2b      	ldrh	r3, [r5, #16]
    918c:	8003      	strh	r3, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    918e:	68e0      	ldr	r0, [r4, #12]
    9190:	6829      	ldr	r1, [r5, #0]
    9192:	2210      	movs	r2, #16
    9194:	3101      	adds	r1, #1
    9196:	3002      	adds	r0, #2
    9198:	f7f7 f892 	bl	2c0 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    919c:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    91a0:	6862      	ldr	r2, [r4, #4]
    91a2:	8992      	ldrh	r2, [r2, #12]
    91a4:	1a9b      	subs	r3, r3, r2
    91a6:	2b12      	cmp	r3, #18
    91a8:	d901      	bls.n	91ae <find_info_cb+0xac>
			return BT_GATT_ITER_CONTINUE;
    91aa:	2001      	movs	r0, #1
    91ac:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_STOP;
    91ae:	2000      	movs	r0, #0
}
    91b0:	bd70      	pop	{r4, r5, r6, pc}

000091b2 <find_type_cb>:
{
    91b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    91b4:	b089      	sub	sp, #36	; 0x24
    91b6:	4605      	mov	r5, r0
    91b8:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    91ba:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    91bc:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    91be:	2300      	movs	r3, #0
    91c0:	f88d 3018 	strb.w	r3, [sp, #24]
    91c4:	f642 0301 	movw	r3, #10241	; 0x2801
    91c8:	f8ad 301a 	strh.w	r3, [sp, #26]
    91cc:	a906      	add	r1, sp, #24
    91ce:	6800      	ldr	r0, [r0, #0]
    91d0:	f7fb fa43 	bl	465a <bt_uuid_cmp>
    91d4:	b920      	cbnz	r0, 91e0 <find_type_cb+0x2e>
		data->group = NULL;
    91d6:	2300      	movs	r3, #0
    91d8:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    91da:	2001      	movs	r0, #1
}
    91dc:	b009      	add	sp, #36	; 0x24
    91de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    91e0:	2300      	movs	r3, #0
    91e2:	f88d 301c 	strb.w	r3, [sp, #28]
    91e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    91ea:	f8ad 301e 	strh.w	r3, [sp, #30]
    91ee:	a907      	add	r1, sp, #28
    91f0:	6828      	ldr	r0, [r5, #0]
    91f2:	f7fb fa32 	bl	465a <bt_uuid_cmp>
    91f6:	b148      	cbz	r0, 920c <find_type_cb+0x5a>
		if (data->group && attr->handle > data->group->end_handle) {
    91f8:	68a3      	ldr	r3, [r4, #8]
    91fa:	2b00      	cmp	r3, #0
    91fc:	d039      	beq.n	9272 <find_type_cb+0xc0>
    91fe:	8a2a      	ldrh	r2, [r5, #16]
    9200:	8859      	ldrh	r1, [r3, #2]
    9202:	428a      	cmp	r2, r1
    9204:	d937      	bls.n	9276 <find_type_cb+0xc4>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    9206:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    9208:	2001      	movs	r0, #1
    920a:	e7e7      	b.n	91dc <find_type_cb+0x2a>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    920c:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    9210:	6862      	ldr	r2, [r4, #4]
    9212:	8992      	ldrh	r2, [r2, #12]
    9214:	1a9b      	subs	r3, r3, r2
    9216:	2b03      	cmp	r3, #3
    9218:	d801      	bhi.n	921e <find_type_cb+0x6c>
		return BT_GATT_ITER_STOP;
    921a:	2000      	movs	r0, #0
    921c:	e7de      	b.n	91dc <find_type_cb+0x2a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    921e:	686e      	ldr	r6, [r5, #4]
    9220:	2300      	movs	r3, #0
    9222:	9300      	str	r3, [sp, #0]
    9224:	2310      	movs	r3, #16
    9226:	aa02      	add	r2, sp, #8
    9228:	4629      	mov	r1, r5
    922a:	4638      	mov	r0, r7
    922c:	47b0      	blx	r6
	if (read < 0) {
    922e:	1e02      	subs	r2, r0, #0
    9230:	db06      	blt.n	9240 <find_type_cb+0x8e>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    9232:	7c23      	ldrb	r3, [r4, #16]
    9234:	429a      	cmp	r2, r3
    9236:	d007      	beq.n	9248 <find_type_cb+0x96>
		data->group = NULL;
    9238:	2300      	movs	r3, #0
    923a:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    923c:	2001      	movs	r0, #1
    923e:	e7cd      	b.n	91dc <find_type_cb+0x2a>
		data->group = NULL;
    9240:	2300      	movs	r3, #0
    9242:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    9244:	2001      	movs	r0, #1
    9246:	e7c9      	b.n	91dc <find_type_cb+0x2a>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    9248:	a902      	add	r1, sp, #8
    924a:	68e0      	ldr	r0, [r4, #12]
    924c:	f021 faa0 	bl	2a790 <memcmp>
    9250:	2800      	cmp	r0, #0
    9252:	d1f1      	bne.n	9238 <find_type_cb+0x86>
	data->err = 0x00;
    9254:	2300      	movs	r3, #0
    9256:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    9258:	6860      	ldr	r0, [r4, #4]
    925a:	2104      	movs	r1, #4
    925c:	3008      	adds	r0, #8
    925e:	f011 fd79 	bl	1ad54 <net_buf_simple_add>
    9262:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    9264:	8a2b      	ldrh	r3, [r5, #16]
    9266:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    9268:	68a3      	ldr	r3, [r4, #8]
    926a:	8a2a      	ldrh	r2, [r5, #16]
    926c:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    926e:	2001      	movs	r0, #1
    9270:	e7b4      	b.n	91dc <find_type_cb+0x2a>
		return BT_GATT_ITER_CONTINUE;
    9272:	2001      	movs	r0, #1
    9274:	e7b2      	b.n	91dc <find_type_cb+0x2a>
    9276:	2001      	movs	r0, #1
    9278:	e7b0      	b.n	91dc <find_type_cb+0x2a>

0000927a <att_change_security>:
{
    927a:	b508      	push	{r3, lr}
	switch (err) {
    927c:	2905      	cmp	r1, #5
    927e:	d008      	beq.n	9292 <att_change_security+0x18>
    9280:	290f      	cmp	r1, #15
    9282:	d113      	bne.n	92ac <att_change_security+0x32>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    9284:	7a03      	ldrb	r3, [r0, #8]
    9286:	2b01      	cmp	r3, #1
    9288:	d813      	bhi.n	92b2 <att_change_security+0x38>
		sec = BT_SECURITY_MEDIUM;
    928a:	2102      	movs	r1, #2
	return bt_conn_security(conn, sec);
    928c:	f7fd fe4a 	bl	6f24 <bt_conn_security>
    9290:	bd08      	pop	{r3, pc}
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    9292:	7a03      	ldrb	r3, [r0, #8]
    9294:	2b01      	cmp	r3, #1
    9296:	d905      	bls.n	92a4 <att_change_security+0x2a>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    9298:	2b02      	cmp	r3, #2
    929a:	d905      	bls.n	92a8 <att_change_security+0x2e>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    929c:	2b03      	cmp	r3, #3
    929e:	d80b      	bhi.n	92b8 <att_change_security+0x3e>
			sec = BT_SECURITY_FIPS;
    92a0:	2104      	movs	r1, #4
    92a2:	e7f3      	b.n	928c <att_change_security+0x12>
			sec = BT_SECURITY_MEDIUM;
    92a4:	2102      	movs	r1, #2
    92a6:	e7f1      	b.n	928c <att_change_security+0x12>
			sec = BT_SECURITY_HIGH;
    92a8:	2103      	movs	r1, #3
    92aa:	e7ef      	b.n	928c <att_change_security+0x12>
		return -EINVAL;
    92ac:	f06f 0015 	mvn.w	r0, #21
    92b0:	bd08      	pop	{r3, pc}
			return -EALREADY;
    92b2:	f06f 0077 	mvn.w	r0, #119	; 0x77
    92b6:	bd08      	pop	{r3, pc}
			return -EALREADY;
    92b8:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    92bc:	bd08      	pop	{r3, pc}
	...

000092c0 <bt_att_connected>:
{
    92c0:	b510      	push	{r4, lr}
    92c2:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    92c4:	2317      	movs	r3, #23
    92c6:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    92ca:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	k_delayed_work_init(&att->timeout_work, att_timeout);
    92ce:	4906      	ldr	r1, [pc, #24]	; (92e8 <bt_att_connected+0x28>)
    92d0:	30ac      	adds	r0, #172	; 0xac
    92d2:	f020 fe0f 	bl	29ef4 <k_delayed_work_init>
	list->head = NULL;
    92d6:	2300      	movs	r3, #0
    92d8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	list->tail = NULL;
    92dc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	bt_gatt_connected(ch->chan.conn);
    92e0:	6820      	ldr	r0, [r4, #0]
    92e2:	f001 fadd 	bl	a8a0 <bt_gatt_connected>
    92e6:	bd10      	pop	{r4, pc}
    92e8:	00009647 	.word	0x00009647

000092ec <att_send_req>:
{
    92ec:	b570      	push	{r4, r5, r6, lr}
    92ee:	4605      	mov	r5, r0
    92f0:	460c      	mov	r4, r1
	att->req = req;
    92f2:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
	k_sem_take(&att->tx_sem, K_FOREVER);
    92f6:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    92fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    92fe:	4630      	mov	r0, r6
    9300:	f020 f83a 	bl	29378 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9304:	682b      	ldr	r3, [r5, #0]
    9306:	7b1b      	ldrb	r3, [r3, #12]
    9308:	2b03      	cmp	r3, #3
    930a:	d019      	beq.n	9340 <att_send_req+0x54>
    930c:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    930e:	b323      	cbz	r3, 935a <att_send_req+0x6e>
	net_buf_simple_save(&req->buf->b, &req->state);
    9310:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    9312:	f106 0008 	add.w	r0, r6, #8
    9316:	f011 fd82 	bl	1ae1e <net_buf_simple_headroom>
    931a:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    931c:	89b3      	ldrh	r3, [r6, #12]
    931e:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    9320:	682d      	ldr	r5, [r5, #0]
    9322:	6920      	ldr	r0, [r4, #16]
    9324:	f011 fce6 	bl	1acf4 <net_buf_ref>
    9328:	4606      	mov	r6, r0
    932a:	6920      	ldr	r0, [r4, #16]
    932c:	f7ff fcf0 	bl	8d10 <att_cb>
    9330:	4603      	mov	r3, r0
    9332:	4632      	mov	r2, r6
    9334:	2104      	movs	r1, #4
    9336:	4628      	mov	r0, r5
    9338:	f7fe fea3 	bl	8082 <bt_l2cap_send_cb>
	return 0;
    933c:	2000      	movs	r0, #0
}
    933e:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9340:	f3bf 8f5b 	dmb	ish
    9344:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    9348:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    934c:	f013 0f04 	tst.w	r3, #4
    9350:	d101      	bne.n	9356 <att_send_req+0x6a>
    9352:	2301      	movs	r3, #1
    9354:	e7db      	b.n	930e <att_send_req+0x22>
    9356:	2300      	movs	r3, #0
    9358:	e7d9      	b.n	930e <att_send_req+0x22>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    935a:	4630      	mov	r0, r6
    935c:	f01f fff9 	bl	29352 <_impl_k_sem_give>
		return -ENOTCONN;
    9360:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9364:	bd70      	pop	{r4, r5, r6, pc}

00009366 <att_process>:
{
    9366:	b508      	push	{r3, lr}
	return (!list->head);
    9368:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    936c:	b131      	cbz	r1, 937c <att_process+0x16>
	list->head = node->next;
    936e:	680b      	ldr	r3, [r1, #0]
    9370:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	if (list->tail == node) {
    9374:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    9378:	4291      	cmp	r1, r2
    937a:	d003      	beq.n	9384 <att_process+0x1e>
	if (!node) {
    937c:	b109      	cbz	r1, 9382 <att_process+0x1c>
	att_send_req(att, ATT_REQ(node));
    937e:	f7ff ffb5 	bl	92ec <att_send_req>
    9382:	bd08      	pop	{r3, pc}
		list->tail = list->head;
    9384:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    9388:	e7f8      	b.n	937c <att_process+0x16>

0000938a <att_handle_rsp>:
{
    938a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    938e:	b082      	sub	sp, #8
    9390:	4604      	mov	r4, r0
    9392:	460e      	mov	r6, r1
    9394:	4617      	mov	r7, r2
    9396:	461d      	mov	r5, r3
	k_delayed_work_cancel(&att->timeout_work);
    9398:	30ac      	adds	r0, #172	; 0xac
    939a:	f020 fdc9 	bl	29f30 <k_delayed_work_cancel>
	if (!att->req) {
    939e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    93a2:	b1e3      	cbz	r3, 93de <att_handle_rsp+0x54>
	if (att->req->buf) {
    93a4:	6918      	ldr	r0, [r3, #16]
    93a6:	b128      	cbz	r0, 93b4 <att_handle_rsp+0x2a>
		net_buf_unref(att->req->buf);
    93a8:	f011 fc88 	bl	1acbc <net_buf_unref>
		att->req->buf = NULL;
    93ac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    93b0:	2200      	movs	r2, #0
    93b2:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    93b4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    93b8:	f8d3 8004 	ldr.w	r8, [r3, #4]
	att->req->func = NULL;
    93bc:	2200      	movs	r2, #0
    93be:	605a      	str	r2, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    93c0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    93c4:	9300      	str	r3, [sp, #0]
    93c6:	463b      	mov	r3, r7
    93c8:	4632      	mov	r2, r6
    93ca:	4629      	mov	r1, r5
    93cc:	6820      	ldr	r0, [r4, #0]
    93ce:	47c0      	blx	r8
	if (!att->req->func) {
    93d0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    93d4:	6843      	ldr	r3, [r0, #4]
    93d6:	b14b      	cbz	r3, 93ec <att_handle_rsp+0x62>
	att->req = NULL;
    93d8:	2300      	movs	r3, #0
    93da:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	att_process(att);
    93de:	4620      	mov	r0, r4
    93e0:	f7ff ffc1 	bl	9366 <att_process>
}
    93e4:	2000      	movs	r0, #0
    93e6:	b002      	add	sp, #8
    93e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		att_req_destroy(att->req);
    93ec:	f7ff fd34 	bl	8e58 <att_req_destroy>
    93f0:	e7f2      	b.n	93d8 <att_handle_rsp+0x4e>

000093f2 <att_confirm>:
{
    93f2:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    93f4:	2300      	movs	r3, #0
    93f6:	898a      	ldrh	r2, [r1, #12]
    93f8:	6889      	ldr	r1, [r1, #8]
    93fa:	f7ff ffc6 	bl	938a <att_handle_rsp>
}
    93fe:	bd08      	pop	{r3, pc}

00009400 <att_handle_exec_write_rsp>:
{
    9400:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9402:	2300      	movs	r3, #0
    9404:	898a      	ldrh	r2, [r1, #12]
    9406:	6889      	ldr	r1, [r1, #8]
    9408:	f7ff ffbf 	bl	938a <att_handle_rsp>
}
    940c:	bd08      	pop	{r3, pc}

0000940e <att_handle_prepare_write_rsp>:
{
    940e:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9410:	2300      	movs	r3, #0
    9412:	898a      	ldrh	r2, [r1, #12]
    9414:	6889      	ldr	r1, [r1, #8]
    9416:	f7ff ffb8 	bl	938a <att_handle_rsp>
}
    941a:	bd08      	pop	{r3, pc}

0000941c <att_handle_write_rsp>:
{
    941c:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    941e:	2300      	movs	r3, #0
    9420:	898a      	ldrh	r2, [r1, #12]
    9422:	6889      	ldr	r1, [r1, #8]
    9424:	f7ff ffb1 	bl	938a <att_handle_rsp>
}
    9428:	bd08      	pop	{r3, pc}

0000942a <att_handle_read_mult_rsp>:
{
    942a:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    942c:	2300      	movs	r3, #0
    942e:	898a      	ldrh	r2, [r1, #12]
    9430:	6889      	ldr	r1, [r1, #8]
    9432:	f7ff ffaa 	bl	938a <att_handle_rsp>
}
    9436:	bd08      	pop	{r3, pc}

00009438 <att_handle_read_blob_rsp>:
{
    9438:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    943a:	2300      	movs	r3, #0
    943c:	898a      	ldrh	r2, [r1, #12]
    943e:	6889      	ldr	r1, [r1, #8]
    9440:	f7ff ffa3 	bl	938a <att_handle_rsp>
}
    9444:	bd08      	pop	{r3, pc}

00009446 <att_handle_read_rsp>:
{
    9446:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9448:	2300      	movs	r3, #0
    944a:	898a      	ldrh	r2, [r1, #12]
    944c:	6889      	ldr	r1, [r1, #8]
    944e:	f7ff ff9c 	bl	938a <att_handle_rsp>
}
    9452:	bd08      	pop	{r3, pc}

00009454 <att_handle_read_type_rsp>:
{
    9454:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9456:	2300      	movs	r3, #0
    9458:	898a      	ldrh	r2, [r1, #12]
    945a:	6889      	ldr	r1, [r1, #8]
    945c:	f7ff ff95 	bl	938a <att_handle_rsp>
}
    9460:	bd08      	pop	{r3, pc}

00009462 <att_handle_find_type_rsp>:
{
    9462:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9464:	2300      	movs	r3, #0
    9466:	898a      	ldrh	r2, [r1, #12]
    9468:	6889      	ldr	r1, [r1, #8]
    946a:	f7ff ff8e 	bl	938a <att_handle_rsp>
}
    946e:	bd08      	pop	{r3, pc}

00009470 <att_handle_find_info_rsp>:
{
    9470:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9472:	2300      	movs	r3, #0
    9474:	898a      	ldrh	r2, [r1, #12]
    9476:	6889      	ldr	r1, [r1, #8]
    9478:	f7ff ff87 	bl	938a <att_handle_rsp>
}
    947c:	bd08      	pop	{r3, pc}

0000947e <att_mtu_rsp>:
	if (!att) {
    947e:	b1b8      	cbz	r0, 94b0 <att_mtu_rsp+0x32>
{
    9480:	b508      	push	{r3, lr}
    9482:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
    9484:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    9486:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    9488:	2b16      	cmp	r3, #22
    948a:	d90b      	bls.n	94a4 <att_mtu_rsp+0x26>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    948c:	2b41      	cmp	r3, #65	; 0x41
    948e:	bf28      	it	cs
    9490:	2341      	movcs	r3, #65	; 0x41
    9492:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    9496:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	return att_handle_rsp(att, rsp, buf->len, 0);
    949a:	2300      	movs	r3, #0
    949c:	8992      	ldrh	r2, [r2, #12]
    949e:	f7ff ff74 	bl	938a <att_handle_rsp>
    94a2:	bd08      	pop	{r3, pc}
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    94a4:	2304      	movs	r3, #4
    94a6:	2200      	movs	r2, #0
    94a8:	4611      	mov	r1, r2
    94aa:	f7ff ff6e 	bl	938a <att_handle_rsp>
    94ae:	bd08      	pop	{r3, pc}
		return 0;
    94b0:	2000      	movs	r0, #0
    94b2:	4770      	bx	lr

000094b4 <bt_att_encrypt_change>:
{
    94b4:	b570      	push	{r4, r5, r6, lr}
    94b6:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
    94b8:	6805      	ldr	r5, [r0, #0]
	if (hci_status) {
    94ba:	b941      	cbnz	r1, 94ce <bt_att_encrypt_change+0x1a>
	if (conn->sec_level == BT_SECURITY_LOW) {
    94bc:	7a2b      	ldrb	r3, [r5, #8]
    94be:	2b01      	cmp	r3, #1
    94c0:	d004      	beq.n	94cc <bt_att_encrypt_change+0x18>
	if (!att->req || !att->req->retrying) {
    94c2:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    94c6:	b10b      	cbz	r3, 94cc <bt_att_encrypt_change+0x18>
    94c8:	7d1b      	ldrb	r3, [r3, #20]
    94ca:	b933      	cbnz	r3, 94da <bt_att_encrypt_change+0x26>
    94cc:	bd70      	pop	{r4, r5, r6, pc}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    94ce:	2305      	movs	r3, #5
    94d0:	2200      	movs	r2, #0
    94d2:	4611      	mov	r1, r2
    94d4:	f7ff ff59 	bl	938a <att_handle_rsp>
		return;
    94d8:	bd70      	pop	{r4, r5, r6, pc}
	k_sem_take(&att->tx_sem, K_FOREVER);
    94da:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    94de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    94e2:	4630      	mov	r0, r6
    94e4:	f01f ff48 	bl	29378 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    94e8:	6823      	ldr	r3, [r4, #0]
    94ea:	7b1b      	ldrb	r3, [r3, #12]
    94ec:	2b03      	cmp	r3, #3
    94ee:	d012      	beq.n	9516 <bt_att_encrypt_change+0x62>
    94f0:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    94f2:	b1eb      	cbz	r3, 9530 <bt_att_encrypt_change+0x7c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    94f4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    94f8:	691e      	ldr	r6, [r3, #16]
    94fa:	4630      	mov	r0, r6
    94fc:	f7ff fc08 	bl	8d10 <att_cb>
    9500:	4603      	mov	r3, r0
    9502:	4632      	mov	r2, r6
    9504:	2104      	movs	r1, #4
    9506:	4628      	mov	r0, r5
    9508:	f7fe fdbb 	bl	8082 <bt_l2cap_send_cb>
	att->req->buf = NULL;
    950c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9510:	2200      	movs	r2, #0
    9512:	611a      	str	r2, [r3, #16]
    9514:	e7da      	b.n	94cc <bt_att_encrypt_change+0x18>
    9516:	f3bf 8f5b 	dmb	ish
    951a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    951e:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9522:	f013 0f04 	tst.w	r3, #4
    9526:	d101      	bne.n	952c <bt_att_encrypt_change+0x78>
    9528:	2301      	movs	r3, #1
    952a:	e7e2      	b.n	94f2 <bt_att_encrypt_change+0x3e>
    952c:	2300      	movs	r3, #0
    952e:	e7e0      	b.n	94f2 <bt_att_encrypt_change+0x3e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9530:	4630      	mov	r0, r6
    9532:	f01f ff0e 	bl	29352 <_impl_k_sem_give>
    9536:	bd70      	pop	{r4, r5, r6, pc}

00009538 <att_error_rsp>:
{
    9538:	b538      	push	{r3, r4, r5, lr}
    953a:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    953c:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    953e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9542:	b1fb      	cbz	r3, 9584 <att_error_rsp+0x4c>
	if (att->req->buf) {
    9544:	691a      	ldr	r2, [r3, #16]
    9546:	b132      	cbz	r2, 9556 <att_error_rsp+0x1e>
	buf->data = buf->__buf + state->offset;
    9548:	f102 0110 	add.w	r1, r2, #16
    954c:	899d      	ldrh	r5, [r3, #12]
    954e:	4429      	add	r1, r5
    9550:	6091      	str	r1, [r2, #8]
	buf->len = state->len;
    9552:	89db      	ldrh	r3, [r3, #14]
    9554:	8193      	strh	r3, [r2, #12]
	err = rsp->error;
    9556:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    9558:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    955c:	7d1b      	ldrb	r3, [r3, #20]
    955e:	b133      	cbz	r3, 956e <att_error_rsp+0x36>
	return att_handle_rsp(att, NULL, 0, err);
    9560:	462b      	mov	r3, r5
    9562:	2200      	movs	r2, #0
    9564:	4611      	mov	r1, r2
    9566:	4620      	mov	r0, r4
    9568:	f7ff ff0f 	bl	938a <att_handle_rsp>
}
    956c:	bd38      	pop	{r3, r4, r5, pc}
	if (!att_change_security(att->chan.chan.conn, err)) {
    956e:	4629      	mov	r1, r5
    9570:	6820      	ldr	r0, [r4, #0]
    9572:	f7ff fe82 	bl	927a <att_change_security>
    9576:	2800      	cmp	r0, #0
    9578:	d1f2      	bne.n	9560 <att_error_rsp+0x28>
		att->req->retrying = true;
    957a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    957e:	2201      	movs	r2, #1
    9580:	751a      	strb	r2, [r3, #20]
		return 0;
    9582:	bd38      	pop	{r3, r4, r5, pc}
		err = BT_ATT_ERR_UNLIKELY;
    9584:	250e      	movs	r5, #14
    9586:	e7eb      	b.n	9560 <att_error_rsp+0x28>

00009588 <att_reset>:
{
    9588:	b5f0      	push	{r4, r5, r6, r7, lr}
    958a:	b083      	sub	sp, #12
    958c:	4607      	mov	r7, r0
	atomic_set_bit(att->flags, ATT_DISCONNECTED);
    958e:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9592:	f3bf 8f5b 	dmb	ish
    9596:	e853 2f00 	ldrex	r2, [r3]
    959a:	f042 0204 	orr.w	r2, r2, #4
    959e:	e843 2100 	strex	r1, r2, [r3]
    95a2:	2900      	cmp	r1, #0
    95a4:	d1f7      	bne.n	9596 <att_reset+0xe>
    95a6:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    95aa:	2400      	movs	r4, #0
    95ac:	e004      	b.n	95b8 <att_reset+0x30>
    95ae:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
    95b2:	f01f fece 	bl	29352 <_impl_k_sem_give>
    95b6:	3401      	adds	r4, #1
    95b8:	2c01      	cmp	r4, #1
    95ba:	ddf8      	ble.n	95ae <att_reset+0x26>
	return list->head;
    95bc:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    95c0:	b11d      	cbz	r5, 95ca <att_reset+0x42>
    95c2:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    95c4:	b145      	cbz	r5, 95d8 <att_reset+0x50>
	return node->next;
    95c6:	682c      	ldr	r4, [r5, #0]
    95c8:	e006      	b.n	95d8 <att_reset+0x50>
    95ca:	462c      	mov	r4, r5
    95cc:	e004      	b.n	95d8 <att_reset+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    95ce:	4623      	mov	r3, r4
    95d0:	e014      	b.n	95fc <att_reset+0x74>
    95d2:	4623      	mov	r3, r4
    95d4:	4625      	mov	r5, r4
    95d6:	461c      	mov	r4, r3
    95d8:	b1c5      	cbz	r5, 960c <att_reset+0x84>
		if (req->func) {
    95da:	686e      	ldr	r6, [r5, #4]
    95dc:	b12e      	cbz	r6, 95ea <att_reset+0x62>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    95de:	9500      	str	r5, [sp, #0]
    95e0:	2300      	movs	r3, #0
    95e2:	461a      	mov	r2, r3
    95e4:	210e      	movs	r1, #14
    95e6:	4618      	mov	r0, r3
    95e8:	47b0      	blx	r6
		att_req_destroy(req);
    95ea:	4628      	mov	r0, r5
    95ec:	f7ff fc34 	bl	8e58 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    95f0:	2c00      	cmp	r4, #0
    95f2:	d0ee      	beq.n	95d2 <att_reset+0x4a>
    95f4:	4622      	mov	r2, r4
    95f6:	2c00      	cmp	r4, #0
    95f8:	d0e9      	beq.n	95ce <att_reset+0x46>
	return node->next;
    95fa:	6823      	ldr	r3, [r4, #0]
    95fc:	b113      	cbz	r3, 9604 <att_reset+0x7c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    95fe:	b11a      	cbz	r2, 9608 <att_reset+0x80>
	return node->next;
    9600:	6823      	ldr	r3, [r4, #0]
    9602:	e7e7      	b.n	95d4 <att_reset+0x4c>
    9604:	2300      	movs	r3, #0
    9606:	e7e5      	b.n	95d4 <att_reset+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9608:	2300      	movs	r3, #0
    960a:	e7e3      	b.n	95d4 <att_reset+0x4c>
	list->head = NULL;
    960c:	2300      	movs	r3, #0
    960e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	list->tail = NULL;
    9612:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	if (!att->req) {
    9616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    961a:	b12b      	cbz	r3, 9628 <att_reset+0xa0>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    961c:	230e      	movs	r3, #14
    961e:	2200      	movs	r2, #0
    9620:	4611      	mov	r1, r2
    9622:	4638      	mov	r0, r7
    9624:	f7ff feb1 	bl	938a <att_handle_rsp>
}
    9628:	b003      	add	sp, #12
    962a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000962c <bt_att_disconnected>:
{
    962c:	b510      	push	{r4, lr}
    962e:	4604      	mov	r4, r0
	att_reset(att);
    9630:	f7ff ffaa 	bl	9588 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    9634:	6820      	ldr	r0, [r4, #0]
    9636:	f001 f93f 	bl	a8b8 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    963a:	22ec      	movs	r2, #236	; 0xec
    963c:	2100      	movs	r1, #0
    963e:	4620      	mov	r0, r4
    9640:	f021 f93a 	bl	2a8b8 <memset>
    9644:	bd10      	pop	{r4, pc}

00009646 <att_timeout>:
{
    9646:	b510      	push	{r4, lr}
    9648:	4604      	mov	r4, r0
	att_reset(att);
    964a:	38ac      	subs	r0, #172	; 0xac
    964c:	f7ff ff9c 	bl	9588 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    9650:	f854 0cac 	ldr.w	r0, [r4, #-172]
    9654:	f001 f930 	bl	a8b8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    9658:	2300      	movs	r3, #0
    965a:	f844 3cac 	str.w	r3, [r4, #-172]
    965e:	bd10      	pop	{r4, pc}

00009660 <bt_att_create_pdu>:
{
    9660:	b538      	push	{r3, r4, r5, lr}
    9662:	460d      	mov	r5, r1
    9664:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    9666:	f7ff fbab 	bl	8dc0 <att_chan_get>
	if (!att) {
    966a:	b180      	cbz	r0, 968e <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    966c:	3401      	adds	r4, #1
    966e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
    9672:	429c      	cmp	r4, r3
    9674:	d80d      	bhi.n	9692 <bt_att_create_pdu+0x32>
	buf = bt_l2cap_create_pdu(NULL, 0);
    9676:	2100      	movs	r1, #0
    9678:	4608      	mov	r0, r1
    967a:	f7fe fc6a 	bl	7f52 <bt_l2cap_create_pdu>
    967e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    9680:	2101      	movs	r1, #1
    9682:	3008      	adds	r0, #8
    9684:	f011 fb66 	bl	1ad54 <net_buf_simple_add>
	hdr->code = op;
    9688:	7005      	strb	r5, [r0, #0]
}
    968a:	4620      	mov	r0, r4
    968c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    968e:	2400      	movs	r4, #0
    9690:	e7fb      	b.n	968a <bt_att_create_pdu+0x2a>
		return NULL;
    9692:	2400      	movs	r4, #0
    9694:	e7f9      	b.n	968a <bt_att_create_pdu+0x2a>
	...

00009698 <att_indicate>:
{
    9698:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    969a:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    969c:	f101 0008 	add.w	r0, r1, #8
    96a0:	f011 fbb5 	bl	1ae0e <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    96a4:	2200      	movs	r2, #0
    96a6:	211e      	movs	r1, #30
    96a8:	4620      	mov	r0, r4
    96aa:	f7ff ffd9 	bl	9660 <bt_att_create_pdu>
	if (!buf) {
    96ae:	b128      	cbz	r0, 96bc <att_indicate+0x24>
    96b0:	4602      	mov	r2, r0
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    96b2:	4b03      	ldr	r3, [pc, #12]	; (96c0 <att_indicate+0x28>)
    96b4:	2104      	movs	r1, #4
    96b6:	4620      	mov	r0, r4
    96b8:	f7fe fce3 	bl	8082 <bt_l2cap_send_cb>
}
    96bc:	2000      	movs	r0, #0
    96be:	bd10      	pop	{r4, pc}
    96c0:	00008ebb 	.word	0x00008ebb

000096c4 <att_mtu_req>:
{
    96c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    96c8:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    96ca:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
    96cc:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    96ce:	2d16      	cmp	r5, #22
    96d0:	d802      	bhi.n	96d8 <att_mtu_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    96d2:	2004      	movs	r0, #4
    96d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    96d8:	4604      	mov	r4, r0
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    96da:	2202      	movs	r2, #2
    96dc:	2103      	movs	r1, #3
    96de:	4638      	mov	r0, r7
    96e0:	f7ff ffbe 	bl	9660 <bt_att_create_pdu>
	if (!pdu) {
    96e4:	4680      	mov	r8, r0
    96e6:	b1b8      	cbz	r0, 9718 <att_mtu_req+0x54>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    96e8:	2102      	movs	r1, #2
    96ea:	3008      	adds	r0, #8
    96ec:	f011 fb32 	bl	1ad54 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    96f0:	2600      	movs	r6, #0
    96f2:	2341      	movs	r3, #65	; 0x41
    96f4:	7003      	strb	r3, [r0, #0]
    96f6:	7046      	strb	r6, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    96f8:	4b09      	ldr	r3, [pc, #36]	; (9720 <att_mtu_req+0x5c>)
    96fa:	4642      	mov	r2, r8
    96fc:	2104      	movs	r1, #4
    96fe:	4638      	mov	r0, r7
    9700:	f7fe fcbf 	bl	8082 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    9704:	2d41      	cmp	r5, #65	; 0x41
    9706:	bf28      	it	cs
    9708:	2541      	movcs	r5, #65	; 0x41
    970a:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    970e:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	return 0;
    9712:	4630      	mov	r0, r6
    9714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    9718:	200e      	movs	r0, #14
}
    971a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    971e:	bf00      	nop
    9720:	00008e83 	.word	0x00008e83

00009724 <send_err_rsp>:
	if (!req) {
    9724:	b901      	cbnz	r1, 9728 <send_err_rsp+0x4>
    9726:	4770      	bx	lr
{
    9728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    972c:	460f      	mov	r7, r1
    972e:	461d      	mov	r5, r3
    9730:	4616      	mov	r6, r2
    9732:	4604      	mov	r4, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    9734:	2204      	movs	r2, #4
    9736:	2101      	movs	r1, #1
    9738:	f7ff ff92 	bl	9660 <bt_att_create_pdu>
	if (!buf) {
    973c:	4680      	mov	r8, r0
    973e:	b168      	cbz	r0, 975c <send_err_rsp+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    9740:	2104      	movs	r1, #4
    9742:	3008      	adds	r0, #8
    9744:	f011 fb06 	bl	1ad54 <net_buf_simple_add>
	rsp->request = req;
    9748:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
    974a:	f8a0 6001 	strh.w	r6, [r0, #1]
	rsp->error = err;
    974e:	70c5      	strb	r5, [r0, #3]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    9750:	4b03      	ldr	r3, [pc, #12]	; (9760 <send_err_rsp+0x3c>)
    9752:	4642      	mov	r2, r8
    9754:	2104      	movs	r1, #4
    9756:	4620      	mov	r0, r4
    9758:	f7fe fc93 	bl	8082 <bt_l2cap_send_cb>
    975c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9760:	00008e83 	.word	0x00008e83

00009764 <bt_att_recv>:
{
    9764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
    9766:	688d      	ldr	r5, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    9768:	898b      	ldrh	r3, [r1, #12]
    976a:	b903      	cbnz	r3, 976e <bt_att_recv+0xa>
    976c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    976e:	460e      	mov	r6, r1
    9770:	4607      	mov	r7, r0
	net_buf_pull(buf, sizeof(*hdr));
    9772:	2101      	movs	r1, #1
    9774:	f106 0008 	add.w	r0, r6, #8
    9778:	f011 fb39 	bl	1adee <net_buf_simple_pull>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    977c:	2300      	movs	r3, #0
    977e:	2b1a      	cmp	r3, #26
    9780:	d822      	bhi.n	97c8 <bt_att_recv+0x64>
		if (hdr->code == handlers[i].op) {
    9782:	782c      	ldrb	r4, [r5, #0]
    9784:	4a2c      	ldr	r2, [pc, #176]	; (9838 <bt_att_recv+0xd4>)
    9786:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    978a:	4294      	cmp	r4, r2
    978c:	d001      	beq.n	9792 <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    978e:	3301      	adds	r3, #1
    9790:	e7f5      	b.n	977e <bt_att_recv+0x1a>
			handler = &handlers[i];
    9792:	4c29      	ldr	r4, [pc, #164]	; (9838 <bt_att_recv+0xd4>)
    9794:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (!handler) {
    9798:	b1c4      	cbz	r4, 97cc <bt_att_recv+0x68>
		if (handler->type == ATT_REQUEST &&
    979a:	78a3      	ldrb	r3, [r4, #2]
    979c:	2b01      	cmp	r3, #1
    979e:	d022      	beq.n	97e6 <bt_att_recv+0x82>
		} else if (handler->type == ATT_INDICATION &&
    97a0:	78a3      	ldrb	r3, [r4, #2]
    97a2:	2b05      	cmp	r3, #5
    97a4:	d031      	beq.n	980a <bt_att_recv+0xa6>
	if (buf->len < handler->expect_len) {
    97a6:	89b2      	ldrh	r2, [r6, #12]
    97a8:	7863      	ldrb	r3, [r4, #1]
    97aa:	429a      	cmp	r2, r3
    97ac:	d23f      	bcs.n	982e <bt_att_recv+0xca>
		err = BT_ATT_ERR_INVALID_PDU;
    97ae:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
    97b0:	78a2      	ldrb	r2, [r4, #2]
    97b2:	2a01      	cmp	r2, #1
    97b4:	d1da      	bne.n	976c <bt_att_recv+0x8>
    97b6:	2800      	cmp	r0, #0
    97b8:	d0d8      	beq.n	976c <bt_att_recv+0x8>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    97ba:	4603      	mov	r3, r0
    97bc:	2200      	movs	r2, #0
    97be:	7829      	ldrb	r1, [r5, #0]
    97c0:	6838      	ldr	r0, [r7, #0]
    97c2:	f7ff ffaf 	bl	9724 <send_err_rsp>
    97c6:	e7d1      	b.n	976c <bt_att_recv+0x8>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    97c8:	2400      	movs	r4, #0
    97ca:	e7e5      	b.n	9798 <bt_att_recv+0x34>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    97cc:	782c      	ldrb	r4, [r5, #0]
    97ce:	4620      	mov	r0, r4
    97d0:	f7ff fa86 	bl	8ce0 <att_op_get_type>
    97d4:	2800      	cmp	r0, #0
    97d6:	d0c9      	beq.n	976c <bt_att_recv+0x8>
			send_err_rsp(chan->conn, hdr->code, 0,
    97d8:	2306      	movs	r3, #6
    97da:	2200      	movs	r2, #0
    97dc:	4621      	mov	r1, r4
    97de:	6838      	ldr	r0, [r7, #0]
    97e0:	f7ff ffa0 	bl	9724 <send_err_rsp>
    97e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
    97e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    97ea:	f3bf 8f5b 	dmb	ish
    97ee:	e853 2f00 	ldrex	r2, [r3]
    97f2:	f042 0101 	orr.w	r1, r2, #1
    97f6:	e843 1000 	strex	r0, r1, [r3]
    97fa:	2800      	cmp	r0, #0
    97fc:	d1f7      	bne.n	97ee <bt_att_recv+0x8a>
    97fe:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    9802:	f012 0f01 	tst.w	r2, #1
    9806:	d0cb      	beq.n	97a0 <bt_att_recv+0x3c>
    9808:	e7b0      	b.n	976c <bt_att_recv+0x8>
			   atomic_test_and_set_bit(att->flags,
    980a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    980e:	f3bf 8f5b 	dmb	ish
    9812:	e853 2f00 	ldrex	r2, [r3]
    9816:	f042 0102 	orr.w	r1, r2, #2
    981a:	e843 1000 	strex	r0, r1, [r3]
    981e:	2800      	cmp	r0, #0
    9820:	d1f7      	bne.n	9812 <bt_att_recv+0xae>
    9822:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
    9826:	f012 0f02 	tst.w	r2, #2
    982a:	d0bc      	beq.n	97a6 <bt_att_recv+0x42>
    982c:	e79e      	b.n	976c <bt_att_recv+0x8>
		err = handler->func(att, buf);
    982e:	6863      	ldr	r3, [r4, #4]
    9830:	4631      	mov	r1, r6
    9832:	4638      	mov	r0, r7
    9834:	4798      	blx	r3
    9836:	e7bb      	b.n	97b0 <bt_att_recv+0x4c>
    9838:	000314dc 	.word	0x000314dc

0000983c <att_write_rsp>:
{
    983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9840:	b086      	sub	sp, #24
	if (!handle) {
    9842:	b923      	cbnz	r3, 984e <att_write_rsp+0x12>
		return BT_ATT_ERR_INVALID_HANDLE;
    9844:	2401      	movs	r4, #1
}
    9846:	4620      	mov	r0, r4
    9848:	b006      	add	sp, #24
    984a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    984e:	4698      	mov	r8, r3
    9850:	4617      	mov	r7, r2
    9852:	460e      	mov	r6, r1
    9854:	4605      	mov	r5, r0
	memset(&data, 0, sizeof(data));
    9856:	2218      	movs	r2, #24
    9858:	2100      	movs	r1, #0
    985a:	4668      	mov	r0, sp
    985c:	f021 f82c 	bl	2a8b8 <memset>
	if (rsp) {
    9860:	b137      	cbz	r7, 9870 <att_write_rsp+0x34>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    9862:	2200      	movs	r2, #0
    9864:	4639      	mov	r1, r7
    9866:	4628      	mov	r0, r5
    9868:	f7ff fefa 	bl	9660 <bt_att_create_pdu>
    986c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    986e:	b3a0      	cbz	r0, 98da <att_write_rsp+0x9e>
	data.conn = conn;
    9870:	9500      	str	r5, [sp, #0]
	data.op = op;
    9872:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    9876:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    987a:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    987e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9880:	9303      	str	r3, [sp, #12]
	data.len = len;
    9882:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    9886:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    988a:	2301      	movs	r3, #1
    988c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9890:	466b      	mov	r3, sp
    9892:	4a13      	ldr	r2, [pc, #76]	; (98e0 <att_write_rsp+0xa4>)
    9894:	4641      	mov	r1, r8
    9896:	4640      	mov	r0, r8
    9898:	f000 ff26 	bl	a6e8 <bt_gatt_foreach_attr>
	if (data.err) {
    989c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    98a0:	b194      	cbz	r4, 98c8 <att_write_rsp+0x8c>
		if (rsp) {
    98a2:	b91f      	cbnz	r7, 98ac <att_write_rsp+0x70>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    98a4:	2e18      	cmp	r6, #24
    98a6:	d00c      	beq.n	98c2 <att_write_rsp+0x86>
    98a8:	2400      	movs	r4, #0
    98aa:	e7cc      	b.n	9846 <att_write_rsp+0xa>
			net_buf_unref(data.buf);
    98ac:	9801      	ldr	r0, [sp, #4]
    98ae:	f011 fa05 	bl	1acbc <net_buf_unref>
			send_err_rsp(conn, op, handle, data.err);
    98b2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    98b6:	4642      	mov	r2, r8
    98b8:	4631      	mov	r1, r6
    98ba:	4628      	mov	r0, r5
    98bc:	f7ff ff32 	bl	9724 <send_err_rsp>
    98c0:	e7f0      	b.n	98a4 <att_write_rsp+0x68>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    98c2:	f89d 4014 	ldrb.w	r4, [sp, #20]
    98c6:	e7be      	b.n	9846 <att_write_rsp+0xa>
	if (data.buf) {
    98c8:	9a01      	ldr	r2, [sp, #4]
    98ca:	2a00      	cmp	r2, #0
    98cc:	d0bb      	beq.n	9846 <att_write_rsp+0xa>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    98ce:	4b05      	ldr	r3, [pc, #20]	; (98e4 <att_write_rsp+0xa8>)
    98d0:	2104      	movs	r1, #4
    98d2:	4628      	mov	r0, r5
    98d4:	f7fe fbd5 	bl	8082 <bt_l2cap_send_cb>
    98d8:	e7b5      	b.n	9846 <att_write_rsp+0xa>
			return BT_ATT_ERR_UNLIKELY;
    98da:	240e      	movs	r4, #14
    98dc:	e7b3      	b.n	9846 <att_write_rsp+0xa>
    98de:	bf00      	nop
    98e0:	00008c83 	.word	0x00008c83
    98e4:	00008e83 	.word	0x00008e83

000098e8 <att_signed_write_cmd>:
{
    98e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    98ea:	b085      	sub	sp, #20
    98ec:	460d      	mov	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
    98ee:	6806      	ldr	r6, [r0, #0]
	req = (void *)buf->data;
    98f0:	460c      	mov	r4, r1
    98f2:	f854 3f08 	ldr.w	r3, [r4, #8]!
	handle = sys_le16_to_cpu(req->handle);
    98f6:	881f      	ldrh	r7, [r3, #0]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    98f8:	2101      	movs	r1, #1
    98fa:	4620      	mov	r0, r4
    98fc:	f011 fa61 	bl	1adc2 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    9900:	4629      	mov	r1, r5
    9902:	4630      	mov	r0, r6
    9904:	f003 faf2 	bl	ceec <bt_smp_sign_verify>
	if (err) {
    9908:	b110      	cbz	r0, 9910 <att_signed_write_cmd+0x28>
		return 0;
    990a:	2000      	movs	r0, #0
}
    990c:	b005      	add	sp, #20
    990e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    9910:	2101      	movs	r1, #1
    9912:	4620      	mov	r0, r4
    9914:	f011 fa6b 	bl	1adee <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    9918:	2102      	movs	r1, #2
    991a:	4620      	mov	r0, r4
    991c:	f011 fa67 	bl	1adee <net_buf_simple_pull>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    9920:	68aa      	ldr	r2, [r5, #8]
			     buf->len - sizeof(struct bt_att_signature));
    9922:	89ab      	ldrh	r3, [r5, #12]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    9924:	3b0c      	subs	r3, #12
    9926:	b2db      	uxtb	r3, r3
    9928:	9302      	str	r3, [sp, #8]
    992a:	9201      	str	r2, [sp, #4]
    992c:	2100      	movs	r1, #0
    992e:	9100      	str	r1, [sp, #0]
    9930:	463b      	mov	r3, r7
    9932:	460a      	mov	r2, r1
    9934:	4630      	mov	r0, r6
    9936:	f7ff ff81 	bl	983c <att_write_rsp>
    993a:	e7e7      	b.n	990c <att_signed_write_cmd+0x24>

0000993c <att_write_cmd>:
{
    993c:	b530      	push	{r4, r5, lr}
    993e:	b085      	sub	sp, #20
    9940:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9942:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    9944:	f101 0008 	add.w	r0, r1, #8
    9948:	f011 fa61 	bl	1ae0e <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    994c:	68a3      	ldr	r3, [r4, #8]
    994e:	7b22      	ldrb	r2, [r4, #12]
    9950:	9202      	str	r2, [sp, #8]
    9952:	9301      	str	r3, [sp, #4]
    9954:	2100      	movs	r1, #0
    9956:	9100      	str	r1, [sp, #0]
    9958:	4603      	mov	r3, r0
    995a:	460a      	mov	r2, r1
    995c:	4628      	mov	r0, r5
    995e:	f7ff ff6d 	bl	983c <att_write_rsp>
}
    9962:	b005      	add	sp, #20
    9964:	bd30      	pop	{r4, r5, pc}

00009966 <att_write_req>:
{
    9966:	b530      	push	{r4, r5, lr}
    9968:	b085      	sub	sp, #20
    996a:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    996c:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    996e:	f101 0008 	add.w	r0, r1, #8
    9972:	f011 fa4c 	bl	1ae0e <net_buf_simple_pull_le16>
			     handle, 0, buf->data, buf->len);
    9976:	68a3      	ldr	r3, [r4, #8]
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    9978:	7b22      	ldrb	r2, [r4, #12]
    997a:	9202      	str	r2, [sp, #8]
    997c:	9301      	str	r3, [sp, #4]
    997e:	2300      	movs	r3, #0
    9980:	9300      	str	r3, [sp, #0]
    9982:	4603      	mov	r3, r0
    9984:	2213      	movs	r2, #19
    9986:	2112      	movs	r1, #18
    9988:	4628      	mov	r0, r5
    998a:	f7ff ff57 	bl	983c <att_write_rsp>
}
    998e:	b005      	add	sp, #20
    9990:	bd30      	pop	{r4, r5, pc}
	...

00009994 <att_read_group_rsp>:
{
    9994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9998:	b086      	sub	sp, #24
    999a:	4604      	mov	r4, r0
    999c:	4688      	mov	r8, r1
    999e:	4616      	mov	r6, r2
    99a0:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    99a2:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    99a4:	2214      	movs	r2, #20
    99a6:	2100      	movs	r1, #0
    99a8:	a801      	add	r0, sp, #4
    99aa:	f020 ff85 	bl	2a8b8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    99ae:	2201      	movs	r2, #1
    99b0:	2111      	movs	r1, #17
    99b2:	4628      	mov	r0, r5
    99b4:	f7ff fe54 	bl	9660 <bt_att_create_pdu>
    99b8:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    99ba:	b328      	cbz	r0, 9a08 <att_read_group_rsp+0x74>
	data.att = att;
    99bc:	9401      	str	r4, [sp, #4]
	data.uuid = uuid;
    99be:	f8cd 8008 	str.w	r8, [sp, #8]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    99c2:	2101      	movs	r1, #1
    99c4:	3008      	adds	r0, #8
    99c6:	f011 f9c5 	bl	1ad54 <net_buf_simple_add>
    99ca:	9004      	str	r0, [sp, #16]
	data.rsp->len = 0;
    99cc:	2300      	movs	r3, #0
    99ce:	7003      	strb	r3, [r0, #0]
	data.group = NULL;
    99d0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    99d2:	ab01      	add	r3, sp, #4
    99d4:	4a0f      	ldr	r2, [pc, #60]	; (9a14 <att_read_group_rsp+0x80>)
    99d6:	4639      	mov	r1, r7
    99d8:	4630      	mov	r0, r6
    99da:	f000 fe85 	bl	a6e8 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    99de:	9b04      	ldr	r3, [sp, #16]
    99e0:	781c      	ldrb	r4, [r3, #0]
    99e2:	b13c      	cbz	r4, 99f4 <att_read_group_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    99e4:	4b0c      	ldr	r3, [pc, #48]	; (9a18 <att_read_group_rsp+0x84>)
    99e6:	9a03      	ldr	r2, [sp, #12]
    99e8:	2104      	movs	r1, #4
    99ea:	4628      	mov	r0, r5
    99ec:	f7fe fb49 	bl	8082 <bt_l2cap_send_cb>
	return 0;
    99f0:	2400      	movs	r4, #0
    99f2:	e00a      	b.n	9a0a <att_read_group_rsp+0x76>
		net_buf_unref(data.buf);
    99f4:	9803      	ldr	r0, [sp, #12]
    99f6:	f011 f961 	bl	1acbc <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    99fa:	230a      	movs	r3, #10
    99fc:	4632      	mov	r2, r6
    99fe:	2110      	movs	r1, #16
    9a00:	4628      	mov	r0, r5
    9a02:	f7ff fe8f 	bl	9724 <send_err_rsp>
		return 0;
    9a06:	e000      	b.n	9a0a <att_read_group_rsp+0x76>
		return BT_ATT_ERR_UNLIKELY;
    9a08:	240e      	movs	r4, #14
}
    9a0a:	4620      	mov	r0, r4
    9a0c:	b006      	add	sp, #24
    9a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a12:	bf00      	nop
    9a14:	00008f1d 	.word	0x00008f1d
    9a18:	00008e83 	.word	0x00008e83

00009a1c <att_read_group_req>:
{
    9a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a20:	b088      	sub	sp, #32
	struct bt_conn *conn = att->chan.chan.conn;
    9a22:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    9a24:	898b      	ldrh	r3, [r1, #12]
    9a26:	2b06      	cmp	r3, #6
    9a28:	d005      	beq.n	9a36 <att_read_group_req+0x1a>
    9a2a:	2b14      	cmp	r3, #20
    9a2c:	d003      	beq.n	9a36 <att_read_group_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    9a2e:	2004      	movs	r0, #4
}
    9a30:	b008      	add	sp, #32
    9a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a36:	460c      	mov	r4, r1
    9a38:	4605      	mov	r5, r0
	req = (void *)buf->data;
    9a3a:	4608      	mov	r0, r1
    9a3c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9a40:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9a42:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    9a46:	2104      	movs	r1, #4
    9a48:	f011 f9d1 	bl	1adee <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    9a4c:	4621      	mov	r1, r4
    9a4e:	a801      	add	r0, sp, #4
    9a50:	f7ff fb3c 	bl	90cc <uuid_create>
    9a54:	b908      	cbnz	r0, 9a5a <att_read_group_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    9a56:	200e      	movs	r0, #14
    9a58:	e7ea      	b.n	9a30 <att_read_group_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9a5a:	f10d 0216 	add.w	r2, sp, #22
    9a5e:	4641      	mov	r1, r8
    9a60:	4638      	mov	r0, r7
    9a62:	f7ff f8c4 	bl	8bee <range_is_valid>
    9a66:	b1f0      	cbz	r0, 9aa6 <att_read_group_req+0x8a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9a68:	2300      	movs	r3, #0
    9a6a:	f88d 3018 	strb.w	r3, [sp, #24]
    9a6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9a72:	f8ad 301a 	strh.w	r3, [sp, #26]
    9a76:	a906      	add	r1, sp, #24
    9a78:	a801      	add	r0, sp, #4
    9a7a:	f7fa fdee 	bl	465a <bt_uuid_cmp>
    9a7e:	b158      	cbz	r0, 9a98 <att_read_group_req+0x7c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    9a80:	2300      	movs	r3, #0
    9a82:	f88d 301c 	strb.w	r3, [sp, #28]
    9a86:	f642 0301 	movw	r3, #10241	; 0x2801
    9a8a:	f8ad 301e 	strh.w	r3, [sp, #30]
    9a8e:	a907      	add	r1, sp, #28
    9a90:	a801      	add	r0, sp, #4
    9a92:	f7fa fde2 	bl	465a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9a96:	b978      	cbnz	r0, 9ab8 <att_read_group_req+0x9c>
	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
    9a98:	4643      	mov	r3, r8
    9a9a:	463a      	mov	r2, r7
    9a9c:	a901      	add	r1, sp, #4
    9a9e:	4628      	mov	r0, r5
    9aa0:	f7ff ff78 	bl	9994 <att_read_group_rsp>
    9aa4:	e7c4      	b.n	9a30 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
    9aa6:	2301      	movs	r3, #1
    9aa8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9aac:	2110      	movs	r1, #16
    9aae:	4630      	mov	r0, r6
    9ab0:	f7ff fe38 	bl	9724 <send_err_rsp>
		return 0;
    9ab4:	2000      	movs	r0, #0
    9ab6:	e7bb      	b.n	9a30 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    9ab8:	2310      	movs	r3, #16
    9aba:	463a      	mov	r2, r7
    9abc:	4619      	mov	r1, r3
    9abe:	4630      	mov	r0, r6
    9ac0:	f7ff fe30 	bl	9724 <send_err_rsp>
		return 0;
    9ac4:	2000      	movs	r0, #0
    9ac6:	e7b3      	b.n	9a30 <att_read_group_req+0x14>

00009ac8 <att_read_mult_req>:
{
    9ac8:	b570      	push	{r4, r5, r6, lr}
    9aca:	b086      	sub	sp, #24
    9acc:	4605      	mov	r5, r0
    9ace:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9ad0:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    9ad2:	2214      	movs	r2, #20
    9ad4:	2100      	movs	r1, #0
    9ad6:	a801      	add	r0, sp, #4
    9ad8:	f020 feee 	bl	2a8b8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    9adc:	2200      	movs	r2, #0
    9ade:	210f      	movs	r1, #15
    9ae0:	4630      	mov	r0, r6
    9ae2:	f7ff fdbd 	bl	9660 <bt_att_create_pdu>
    9ae6:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9ae8:	b348      	cbz	r0, 9b3e <att_read_mult_req+0x76>
	data.att = att;
    9aea:	9501      	str	r5, [sp, #4]
	while (buf->len >= sizeof(u16_t)) {
    9aec:	89a3      	ldrh	r3, [r4, #12]
    9aee:	2b01      	cmp	r3, #1
    9af0:	d91c      	bls.n	9b2c <att_read_mult_req+0x64>
		handle = net_buf_pull_le16(buf);
    9af2:	f104 0008 	add.w	r0, r4, #8
    9af6:	f011 f98a 	bl	1ae0e <net_buf_simple_pull_le16>
    9afa:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    9afc:	2301      	movs	r3, #1
    9afe:	f88d 3014 	strb.w	r3, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9b02:	ab01      	add	r3, sp, #4
    9b04:	4a0f      	ldr	r2, [pc, #60]	; (9b44 <att_read_mult_req+0x7c>)
    9b06:	4601      	mov	r1, r0
    9b08:	f000 fdee 	bl	a6e8 <bt_gatt_foreach_attr>
		if (data.err) {
    9b0c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9b10:	2b00      	cmp	r3, #0
    9b12:	d0eb      	beq.n	9aec <att_read_mult_req+0x24>
			net_buf_unref(data.buf);
    9b14:	9803      	ldr	r0, [sp, #12]
    9b16:	f011 f8d1 	bl	1acbc <net_buf_unref>
			send_err_rsp(conn, BT_ATT_OP_READ_MULT_REQ, handle,
    9b1a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9b1e:	462a      	mov	r2, r5
    9b20:	210e      	movs	r1, #14
    9b22:	4630      	mov	r0, r6
    9b24:	f7ff fdfe 	bl	9724 <send_err_rsp>
			return 0;
    9b28:	2000      	movs	r0, #0
    9b2a:	e006      	b.n	9b3a <att_read_mult_req+0x72>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9b2c:	4b06      	ldr	r3, [pc, #24]	; (9b48 <att_read_mult_req+0x80>)
    9b2e:	9a03      	ldr	r2, [sp, #12]
    9b30:	2104      	movs	r1, #4
    9b32:	4630      	mov	r0, r6
    9b34:	f7fe faa5 	bl	8082 <bt_l2cap_send_cb>
	return 0;
    9b38:	2000      	movs	r0, #0
}
    9b3a:	b006      	add	sp, #24
    9b3c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
    9b3e:	200e      	movs	r0, #14
    9b40:	e7fb      	b.n	9b3a <att_read_mult_req+0x72>
    9b42:	bf00      	nop
    9b44:	00008d4d 	.word	0x00008d4d
    9b48:	00008e83 	.word	0x00008e83

00009b4c <att_read_rsp>:
{
    9b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b50:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    9b52:	6807      	ldr	r7, [r0, #0]
	if (!handle) {
    9b54:	b923      	cbnz	r3, 9b60 <att_read_rsp+0x14>
		return BT_ATT_ERR_INVALID_HANDLE;
    9b56:	2401      	movs	r4, #1
}
    9b58:	4620      	mov	r0, r4
    9b5a:	b006      	add	sp, #24
    9b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b60:	461d      	mov	r5, r3
    9b62:	4616      	mov	r6, r2
    9b64:	4688      	mov	r8, r1
    9b66:	4604      	mov	r4, r0
	memset(&data, 0, sizeof(data));
    9b68:	2214      	movs	r2, #20
    9b6a:	2100      	movs	r1, #0
    9b6c:	a801      	add	r0, sp, #4
    9b6e:	f020 fea3 	bl	2a8b8 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    9b72:	2200      	movs	r2, #0
    9b74:	4631      	mov	r1, r6
    9b76:	4638      	mov	r0, r7
    9b78:	f7ff fd72 	bl	9660 <bt_att_create_pdu>
    9b7c:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9b7e:	b318      	cbz	r0, 9bc8 <att_read_rsp+0x7c>
	data.att = att;
    9b80:	9401      	str	r4, [sp, #4]
	data.offset = offset;
    9b82:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    9b86:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9b8a:	2301      	movs	r3, #1
    9b8c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9b90:	ab01      	add	r3, sp, #4
    9b92:	4a0e      	ldr	r2, [pc, #56]	; (9bcc <att_read_rsp+0x80>)
    9b94:	4629      	mov	r1, r5
    9b96:	4628      	mov	r0, r5
    9b98:	f000 fda6 	bl	a6e8 <bt_gatt_foreach_attr>
	if (data.err) {
    9b9c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9ba0:	b934      	cbnz	r4, 9bb0 <att_read_rsp+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9ba2:	4b0b      	ldr	r3, [pc, #44]	; (9bd0 <att_read_rsp+0x84>)
    9ba4:	9a03      	ldr	r2, [sp, #12]
    9ba6:	2104      	movs	r1, #4
    9ba8:	4638      	mov	r0, r7
    9baa:	f7fe fa6a 	bl	8082 <bt_l2cap_send_cb>
	return 0;
    9bae:	e7d3      	b.n	9b58 <att_read_rsp+0xc>
		net_buf_unref(data.buf);
    9bb0:	9803      	ldr	r0, [sp, #12]
    9bb2:	f011 f883 	bl	1acbc <net_buf_unref>
		send_err_rsp(conn, op, handle, data.err);
    9bb6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9bba:	462a      	mov	r2, r5
    9bbc:	4641      	mov	r1, r8
    9bbe:	4638      	mov	r0, r7
    9bc0:	f7ff fdb0 	bl	9724 <send_err_rsp>
		return 0;
    9bc4:	2400      	movs	r4, #0
    9bc6:	e7c7      	b.n	9b58 <att_read_rsp+0xc>
		return BT_ATT_ERR_UNLIKELY;
    9bc8:	240e      	movs	r4, #14
    9bca:	e7c5      	b.n	9b58 <att_read_rsp+0xc>
    9bcc:	00008d4d 	.word	0x00008d4d
    9bd0:	00008e83 	.word	0x00008e83

00009bd4 <att_read_blob_req>:
{
    9bd4:	b500      	push	{lr}
    9bd6:	b083      	sub	sp, #12
	req = (void *)buf->data;
    9bd8:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    9bda:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
    9bdc:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    9bde:	9200      	str	r2, [sp, #0]
    9be0:	220d      	movs	r2, #13
    9be2:	210c      	movs	r1, #12
    9be4:	f7ff ffb2 	bl	9b4c <att_read_rsp>
}
    9be8:	b003      	add	sp, #12
    9bea:	f85d fb04 	ldr.w	pc, [sp], #4

00009bee <att_read_req>:
{
    9bee:	b500      	push	{lr}
    9bf0:	b083      	sub	sp, #12
	req = (void *)buf->data;
    9bf2:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    9bf4:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    9bf6:	2200      	movs	r2, #0
    9bf8:	9200      	str	r2, [sp, #0]
    9bfa:	220b      	movs	r2, #11
    9bfc:	210a      	movs	r1, #10
    9bfe:	f7ff ffa5 	bl	9b4c <att_read_rsp>
}
    9c02:	b003      	add	sp, #12
    9c04:	f85d fb04 	ldr.w	pc, [sp], #4

00009c08 <att_read_type_rsp>:
{
    9c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c0c:	b086      	sub	sp, #24
    9c0e:	4604      	mov	r4, r0
    9c10:	4688      	mov	r8, r1
    9c12:	4616      	mov	r6, r2
    9c14:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    9c16:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    9c18:	2218      	movs	r2, #24
    9c1a:	2100      	movs	r1, #0
    9c1c:	4668      	mov	r0, sp
    9c1e:	f020 fe4b 	bl	2a8b8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    9c22:	2201      	movs	r2, #1
    9c24:	2109      	movs	r1, #9
    9c26:	4628      	mov	r0, r5
    9c28:	f7ff fd1a 	bl	9660 <bt_att_create_pdu>
    9c2c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9c2e:	b340      	cbz	r0, 9c82 <att_read_type_rsp+0x7a>
	data.att = att;
    9c30:	9400      	str	r4, [sp, #0]
	data.uuid = uuid;
    9c32:	f8cd 8004 	str.w	r8, [sp, #4]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9c36:	2101      	movs	r1, #1
    9c38:	3008      	adds	r0, #8
    9c3a:	f011 f88b 	bl	1ad54 <net_buf_simple_add>
    9c3e:	9003      	str	r0, [sp, #12]
	data.rsp->len = 0;
    9c40:	2300      	movs	r3, #0
    9c42:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9c44:	230a      	movs	r3, #10
    9c46:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9c4a:	466b      	mov	r3, sp
    9c4c:	4a0f      	ldr	r2, [pc, #60]	; (9c8c <att_read_type_rsp+0x84>)
    9c4e:	4639      	mov	r1, r7
    9c50:	4630      	mov	r0, r6
    9c52:	f000 fd49 	bl	a6e8 <bt_gatt_foreach_attr>
	if (data.err) {
    9c56:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9c5a:	b934      	cbnz	r4, 9c6a <att_read_type_rsp+0x62>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9c5c:	4b0c      	ldr	r3, [pc, #48]	; (9c90 <att_read_type_rsp+0x88>)
    9c5e:	9a02      	ldr	r2, [sp, #8]
    9c60:	2104      	movs	r1, #4
    9c62:	4628      	mov	r0, r5
    9c64:	f7fe fa0d 	bl	8082 <bt_l2cap_send_cb>
	return 0;
    9c68:	e00c      	b.n	9c84 <att_read_type_rsp+0x7c>
		net_buf_unref(data.buf);
    9c6a:	9802      	ldr	r0, [sp, #8]
    9c6c:	f011 f826 	bl	1acbc <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
    9c70:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9c74:	4632      	mov	r2, r6
    9c76:	2108      	movs	r1, #8
    9c78:	4628      	mov	r0, r5
    9c7a:	f7ff fd53 	bl	9724 <send_err_rsp>
		return 0;
    9c7e:	2400      	movs	r4, #0
    9c80:	e000      	b.n	9c84 <att_read_type_rsp+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    9c82:	240e      	movs	r4, #14
}
    9c84:	4620      	mov	r0, r4
    9c86:	b006      	add	sp, #24
    9c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c8c:	0000900b 	.word	0x0000900b
    9c90:	00008e83 	.word	0x00008e83

00009c94 <att_read_type_req>:
{
    9c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c98:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    9c9a:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    9c9c:	898b      	ldrh	r3, [r1, #12]
    9c9e:	2b06      	cmp	r3, #6
    9ca0:	d005      	beq.n	9cae <att_read_type_req+0x1a>
    9ca2:	2b14      	cmp	r3, #20
    9ca4:	d003      	beq.n	9cae <att_read_type_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    9ca6:	2004      	movs	r0, #4
}
    9ca8:	b006      	add	sp, #24
    9caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9cae:	460c      	mov	r4, r1
    9cb0:	4605      	mov	r5, r0
	req = (void *)buf->data;
    9cb2:	4608      	mov	r0, r1
    9cb4:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9cb8:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9cba:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    9cbe:	2104      	movs	r1, #4
    9cc0:	f011 f895 	bl	1adee <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    9cc4:	4621      	mov	r1, r4
    9cc6:	a801      	add	r0, sp, #4
    9cc8:	f7ff fa00 	bl	90cc <uuid_create>
    9ccc:	b908      	cbnz	r0, 9cd2 <att_read_type_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    9cce:	200e      	movs	r0, #14
    9cd0:	e7ea      	b.n	9ca8 <att_read_type_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9cd2:	f10d 0216 	add.w	r2, sp, #22
    9cd6:	4641      	mov	r1, r8
    9cd8:	4638      	mov	r0, r7
    9cda:	f7fe ff88 	bl	8bee <range_is_valid>
    9cde:	b130      	cbz	r0, 9cee <att_read_type_req+0x5a>
	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
    9ce0:	4643      	mov	r3, r8
    9ce2:	463a      	mov	r2, r7
    9ce4:	a901      	add	r1, sp, #4
    9ce6:	4628      	mov	r0, r5
    9ce8:	f7ff ff8e 	bl	9c08 <att_read_type_rsp>
    9cec:	e7dc      	b.n	9ca8 <att_read_type_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
    9cee:	2301      	movs	r3, #1
    9cf0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9cf4:	2108      	movs	r1, #8
    9cf6:	4630      	mov	r0, r6
    9cf8:	f7ff fd14 	bl	9724 <send_err_rsp>
		return 0;
    9cfc:	2000      	movs	r0, #0
    9cfe:	e7d3      	b.n	9ca8 <att_read_type_req+0x14>

00009d00 <att_find_type_rsp>:
{
    9d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d04:	b086      	sub	sp, #24
    9d06:	4604      	mov	r4, r0
    9d08:	460e      	mov	r6, r1
    9d0a:	4617      	mov	r7, r2
    9d0c:	4698      	mov	r8, r3
	struct bt_conn *conn = att->chan.chan.conn;
    9d0e:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    9d10:	2214      	movs	r2, #20
    9d12:	2100      	movs	r1, #0
    9d14:	a801      	add	r0, sp, #4
    9d16:	f020 fdcf 	bl	2a8b8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    9d1a:	2200      	movs	r2, #0
    9d1c:	2107      	movs	r1, #7
    9d1e:	4628      	mov	r0, r5
    9d20:	f7ff fc9e 	bl	9660 <bt_att_create_pdu>
    9d24:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9d26:	b338      	cbz	r0, 9d78 <att_find_type_rsp+0x78>
	data.att = att;
    9d28:	9401      	str	r4, [sp, #4]
	data.group = NULL;
    9d2a:	2300      	movs	r3, #0
    9d2c:	9303      	str	r3, [sp, #12]
	data.value = value;
    9d2e:	f8cd 8010 	str.w	r8, [sp, #16]
	data.value_len = value_len;
    9d32:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    9d36:	f88d 3014 	strb.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9d3a:	230a      	movs	r3, #10
    9d3c:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9d40:	ab01      	add	r3, sp, #4
    9d42:	4a10      	ldr	r2, [pc, #64]	; (9d84 <att_find_type_rsp+0x84>)
    9d44:	4639      	mov	r1, r7
    9d46:	4630      	mov	r0, r6
    9d48:	f000 fcce 	bl	a6e8 <bt_gatt_foreach_attr>
	if (data.err) {
    9d4c:	f89d 4015 	ldrb.w	r4, [sp, #21]
    9d50:	b934      	cbnz	r4, 9d60 <att_find_type_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9d52:	4b0d      	ldr	r3, [pc, #52]	; (9d88 <att_find_type_rsp+0x88>)
    9d54:	9a02      	ldr	r2, [sp, #8]
    9d56:	2104      	movs	r1, #4
    9d58:	4628      	mov	r0, r5
    9d5a:	f7fe f992 	bl	8082 <bt_l2cap_send_cb>
	return 0;
    9d5e:	e00c      	b.n	9d7a <att_find_type_rsp+0x7a>
		net_buf_unref(data.buf);
    9d60:	9802      	ldr	r0, [sp, #8]
    9d62:	f010 ffab 	bl	1acbc <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    9d66:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9d6a:	4632      	mov	r2, r6
    9d6c:	2106      	movs	r1, #6
    9d6e:	4628      	mov	r0, r5
    9d70:	f7ff fcd8 	bl	9724 <send_err_rsp>
		return 0;
    9d74:	2400      	movs	r4, #0
    9d76:	e000      	b.n	9d7a <att_find_type_rsp+0x7a>
		return BT_ATT_ERR_UNLIKELY;
    9d78:	240e      	movs	r4, #14
}
    9d7a:	4620      	mov	r0, r4
    9d7c:	b006      	add	sp, #24
    9d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9d82:	bf00      	nop
    9d84:	000091b3 	.word	0x000091b3
    9d88:	00008e83 	.word	0x00008e83

00009d8c <att_find_type_req>:
{
    9d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9d90:	b084      	sub	sp, #16
    9d92:	4605      	mov	r5, r0
    9d94:	460f      	mov	r7, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9d96:	f8d0 9000 	ldr.w	r9, [r0]
	req = (void *)buf->data;
    9d9a:	4608      	mov	r0, r1
    9d9c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9da0:	881c      	ldrh	r4, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9da2:	885e      	ldrh	r6, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    9da4:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    9da8:	2106      	movs	r1, #6
    9daa:	f011 f820 	bl	1adee <net_buf_simple_pull>
    9dae:	4682      	mov	sl, r0
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9db0:	f10d 020e 	add.w	r2, sp, #14
    9db4:	4631      	mov	r1, r6
    9db6:	4620      	mov	r0, r4
    9db8:	f7fe ff19 	bl	8bee <range_is_valid>
    9dbc:	b160      	cbz	r0, 9dd8 <att_find_type_req+0x4c>
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    9dbe:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
    9dc2:	d012      	beq.n	9dea <att_find_type_req+0x5e>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    9dc4:	230a      	movs	r3, #10
    9dc6:	4622      	mov	r2, r4
    9dc8:	2106      	movs	r1, #6
    9dca:	4648      	mov	r0, r9
    9dcc:	f7ff fcaa 	bl	9724 <send_err_rsp>
		return 0;
    9dd0:	2000      	movs	r0, #0
}
    9dd2:	b004      	add	sp, #16
    9dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
    9dd8:	2301      	movs	r3, #1
    9dda:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9dde:	2106      	movs	r1, #6
    9de0:	4648      	mov	r0, r9
    9de2:	f7ff fc9f 	bl	9724 <send_err_rsp>
		return 0;
    9de6:	2000      	movs	r0, #0
    9de8:	e7f3      	b.n	9dd2 <att_find_type_req+0x46>
	return att_find_type_rsp(att, start_handle, end_handle, value,
    9dea:	7b3b      	ldrb	r3, [r7, #12]
    9dec:	9300      	str	r3, [sp, #0]
    9dee:	4653      	mov	r3, sl
    9df0:	4632      	mov	r2, r6
    9df2:	4621      	mov	r1, r4
    9df4:	4628      	mov	r0, r5
    9df6:	f7ff ff83 	bl	9d00 <att_find_type_rsp>
    9dfa:	e7ea      	b.n	9dd2 <att_find_type_req+0x46>

00009dfc <att_find_info_rsp>:
{
    9dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dfe:	b085      	sub	sp, #20
    9e00:	4605      	mov	r5, r0
    9e02:	460e      	mov	r6, r1
    9e04:	4617      	mov	r7, r2
	struct bt_conn *conn = att->chan.chan.conn;
    9e06:	6804      	ldr	r4, [r0, #0]
	memset(&data, 0, sizeof(data));
    9e08:	2210      	movs	r2, #16
    9e0a:	2100      	movs	r1, #0
    9e0c:	4668      	mov	r0, sp
    9e0e:	f020 fd53 	bl	2a8b8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    9e12:	2200      	movs	r2, #0
    9e14:	2105      	movs	r1, #5
    9e16:	4620      	mov	r0, r4
    9e18:	f7ff fc22 	bl	9660 <bt_att_create_pdu>
    9e1c:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    9e1e:	b1e8      	cbz	r0, 9e5c <att_find_info_rsp+0x60>
	data.att = att;
    9e20:	ab04      	add	r3, sp, #16
    9e22:	f843 5d10 	str.w	r5, [r3, #-16]!
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9e26:	4a0e      	ldr	r2, [pc, #56]	; (9e60 <att_find_info_rsp+0x64>)
    9e28:	4639      	mov	r1, r7
    9e2a:	4630      	mov	r0, r6
    9e2c:	f000 fc5c 	bl	a6e8 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    9e30:	9b02      	ldr	r3, [sp, #8]
    9e32:	b143      	cbz	r3, 9e46 <att_find_info_rsp+0x4a>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9e34:	4b0b      	ldr	r3, [pc, #44]	; (9e64 <att_find_info_rsp+0x68>)
    9e36:	9a01      	ldr	r2, [sp, #4]
    9e38:	2104      	movs	r1, #4
    9e3a:	4620      	mov	r0, r4
    9e3c:	f7fe f921 	bl	8082 <bt_l2cap_send_cb>
	return 0;
    9e40:	2000      	movs	r0, #0
}
    9e42:	b005      	add	sp, #20
    9e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
    9e46:	9801      	ldr	r0, [sp, #4]
    9e48:	f010 ff38 	bl	1acbc <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
    9e4c:	230a      	movs	r3, #10
    9e4e:	4632      	mov	r2, r6
    9e50:	2104      	movs	r1, #4
    9e52:	4620      	mov	r0, r4
    9e54:	f7ff fc66 	bl	9724 <send_err_rsp>
		return 0;
    9e58:	2000      	movs	r0, #0
    9e5a:	e7f2      	b.n	9e42 <att_find_info_rsp+0x46>
		return BT_ATT_ERR_UNLIKELY;
    9e5c:	200e      	movs	r0, #14
    9e5e:	e7f0      	b.n	9e42 <att_find_info_rsp+0x46>
    9e60:	00009103 	.word	0x00009103
    9e64:	00008e83 	.word	0x00008e83

00009e68 <att_find_info_req>:
{
    9e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e6a:	b083      	sub	sp, #12
    9e6c:	4604      	mov	r4, r0
	struct bt_conn *conn = att->chan.chan.conn;
    9e6e:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    9e70:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    9e72:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9e74:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9e76:	f10d 0206 	add.w	r2, sp, #6
    9e7a:	4631      	mov	r1, r6
    9e7c:	4628      	mov	r0, r5
    9e7e:	f7fe feb6 	bl	8bee <range_is_valid>
    9e82:	b130      	cbz	r0, 9e92 <att_find_info_req+0x2a>
	return att_find_info_rsp(att, start_handle, end_handle);
    9e84:	4632      	mov	r2, r6
    9e86:	4629      	mov	r1, r5
    9e88:	4620      	mov	r0, r4
    9e8a:	f7ff ffb7 	bl	9dfc <att_find_info_rsp>
}
    9e8e:	b003      	add	sp, #12
    9e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
    9e92:	2301      	movs	r3, #1
    9e94:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9e98:	2104      	movs	r1, #4
    9e9a:	4638      	mov	r0, r7
    9e9c:	f7ff fc42 	bl	9724 <send_err_rsp>
		return 0;
    9ea0:	2000      	movs	r0, #0
    9ea2:	e7f4      	b.n	9e8e <att_find_info_req+0x26>

00009ea4 <bt_att_init>:

void bt_att_init(void)
{
    9ea4:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    9ea6:	4803      	ldr	r0, [pc, #12]	; (9eb4 <bt_att_init+0x10>)
    9ea8:	f7fd ff44 	bl	7d34 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
    9eac:	f000 fb3c 	bl	a528 <bt_gatt_init>
    9eb0:	bd08      	pop	{r3, pc}
    9eb2:	bf00      	nop
    9eb4:	2000bfd0 	.word	0x2000bfd0

00009eb8 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    9eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    9eba:	2800      	cmp	r0, #0
    9ebc:	d043      	beq.n	9f46 <bt_att_send+0x8e>
    9ebe:	4606      	mov	r6, r0
    9ec0:	2900      	cmp	r1, #0
    9ec2:	d043      	beq.n	9f4c <bt_att_send+0x94>
    9ec4:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    9ec6:	f7fe ff7b 	bl	8dc0 <att_chan_get>
	if (!att) {
    9eca:	4605      	mov	r5, r0
    9ecc:	2800      	cmp	r0, #0
    9ece:	d040      	beq.n	9f52 <bt_att_send+0x9a>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    9ed0:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    9ed4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9ed8:	4638      	mov	r0, r7
    9eda:	f01f fa4d 	bl	29378 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9ede:	682b      	ldr	r3, [r5, #0]
    9ee0:	7b1b      	ldrb	r3, [r3, #12]
    9ee2:	2b03      	cmp	r3, #3
    9ee4:	d011      	beq.n	9f0a <bt_att_send+0x52>
    9ee6:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    9ee8:	b1e3      	cbz	r3, 9f24 <bt_att_send+0x6c>
		BT_WARN("Disconnected");
		k_sem_give(&att->tx_sem);
		return -ENOTCONN;
	}

	hdr = (void *)buf->data;
    9eea:	68a3      	ldr	r3, [r4, #8]

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9eec:	781b      	ldrb	r3, [r3, #0]
    9eee:	2bd2      	cmp	r3, #210	; 0xd2
    9ef0:	d01e      	beq.n	9f30 <bt_att_send+0x78>
			k_sem_give(&att->tx_sem);
			return err;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    9ef2:	4620      	mov	r0, r4
    9ef4:	f7fe ff0c 	bl	8d10 <att_cb>
    9ef8:	4603      	mov	r3, r0
    9efa:	4622      	mov	r2, r4
    9efc:	2104      	movs	r1, #4
    9efe:	4630      	mov	r0, r6
    9f00:	f7fe f8bf 	bl	8082 <bt_l2cap_send_cb>

	return 0;
    9f04:	2500      	movs	r5, #0
}
    9f06:	4628      	mov	r0, r5
    9f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9f0a:	f3bf 8f5b 	dmb	ish
    9f0e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    9f12:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9f16:	f013 0f04 	tst.w	r3, #4
    9f1a:	d101      	bne.n	9f20 <bt_att_send+0x68>
    9f1c:	2301      	movs	r3, #1
    9f1e:	e7e3      	b.n	9ee8 <bt_att_send+0x30>
    9f20:	2300      	movs	r3, #0
    9f22:	e7e1      	b.n	9ee8 <bt_att_send+0x30>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9f24:	4638      	mov	r0, r7
    9f26:	f01f fa14 	bl	29352 <_impl_k_sem_give>
		return -ENOTCONN;
    9f2a:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    9f2e:	e7ea      	b.n	9f06 <bt_att_send+0x4e>
		err = bt_smp_sign(conn, buf);
    9f30:	4621      	mov	r1, r4
    9f32:	4630      	mov	r0, r6
    9f34:	f003 f81a 	bl	cf6c <bt_smp_sign>
		if (err) {
    9f38:	4605      	mov	r5, r0
    9f3a:	2800      	cmp	r0, #0
    9f3c:	d0d9      	beq.n	9ef2 <bt_att_send+0x3a>
    9f3e:	4638      	mov	r0, r7
    9f40:	f01f fa07 	bl	29352 <_impl_k_sem_give>
			return err;
    9f44:	e7df      	b.n	9f06 <bt_att_send+0x4e>
		return -EINVAL;
    9f46:	f06f 0515 	mvn.w	r5, #21
    9f4a:	e7dc      	b.n	9f06 <bt_att_send+0x4e>
    9f4c:	f06f 0515 	mvn.w	r5, #21
    9f50:	e7d9      	b.n	9f06 <bt_att_send+0x4e>
		return -ENOTCONN;
    9f52:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    9f56:	e7d6      	b.n	9f06 <bt_att_send+0x4e>

00009f58 <bt_att_req_send>:
{
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    9f58:	b1e0      	cbz	r0, 9f94 <bt_att_req_send+0x3c>
    9f5a:	b1f1      	cbz	r1, 9f9a <bt_att_req_send+0x42>
{
    9f5c:	b510      	push	{r4, lr}
    9f5e:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    9f60:	f7fe ff2e 	bl	8dc0 <att_chan_get>
	if (!att) {
    9f64:	b1e0      	cbz	r0, 9fa0 <bt_att_req_send+0x48>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    9f66:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    9f6a:	b17a      	cbz	r2, 9f8c <bt_att_req_send+0x34>
	node->next = NULL;
    9f6c:	2200      	movs	r2, #0
    9f6e:	6022      	str	r2, [r4, #0]
	if (!list->tail) {
    9f70:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    9f74:	b122      	cbz	r2, 9f80 <bt_att_req_send+0x28>
		list->tail->next = node;
    9f76:	6014      	str	r4, [r2, #0]
		list->tail = node;
    9f78:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    9f7c:	2000      	movs	r0, #0
    9f7e:	bd10      	pop	{r4, pc}
		list->tail = node;
    9f80:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		list->head = node;
    9f84:	f8c0 40a4 	str.w	r4, [r0, #164]	; 0xa4
    9f88:	2000      	movs	r0, #0
    9f8a:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    9f8c:	4621      	mov	r1, r4
    9f8e:	f7ff f9ad 	bl	92ec <att_send_req>
    9f92:	bd10      	pop	{r4, pc}
		return -EINVAL;
    9f94:	f06f 0015 	mvn.w	r0, #21
    9f98:	4770      	bx	lr
    9f9a:	f06f 0015 	mvn.w	r0, #21
    9f9e:	4770      	bx	lr
		return -ENOTCONN;
    9fa0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    9fa4:	bd10      	pop	{r4, pc}

00009fa6 <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    9fa6:	4770      	bx	lr

00009fa8 <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    9fa8:	b430      	push	{r4, r5}
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    9faa:	6804      	ldr	r4, [r0, #0]
	u16_t count = svc->attr_count;
    9fac:	8883      	ldrh	r3, [r0, #4]
	return (!list->head);
    9fae:	4a1c      	ldr	r2, [pc, #112]	; (a020 <gatt_register+0x78>)
    9fb0:	6812      	ldr	r2, [r2, #0]

	if (sys_slist_is_empty(&db)) {
    9fb2:	b172      	cbz	r2, 9fd2 <gatt_register+0x2a>
	return list->tail;
    9fb4:	4a1a      	ldr	r2, [pc, #104]	; (a020 <gatt_register+0x78>)
    9fb6:	6852      	ldr	r2, [r2, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    9fb8:	b14a      	cbz	r2, 9fce <gatt_register+0x26>
    9fba:	3a08      	subs	r2, #8
	handle = last->attrs[last->attr_count - 1].handle;
    9fbc:	6815      	ldr	r5, [r2, #0]
    9fbe:	8892      	ldrh	r2, [r2, #4]
    9fc0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9fc4:	0091      	lsls	r1, r2, #2
    9fc6:	3914      	subs	r1, #20
    9fc8:	4429      	add	r1, r5
    9fca:	8a0a      	ldrh	r2, [r1, #16]
    9fcc:	e009      	b.n	9fe2 <gatt_register+0x3a>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    9fce:	2200      	movs	r2, #0
    9fd0:	e7f4      	b.n	9fbc <gatt_register+0x14>
		handle = 0;
    9fd2:	2200      	movs	r2, #0
    9fd4:	e005      	b.n	9fe2 <gatt_register+0x3a>
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
		if (!attrs->handle) {
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
		} else if (attrs->handle > handle) {
    9fd6:	428a      	cmp	r2, r1
    9fd8:	d21e      	bcs.n	a018 <gatt_register+0x70>
			/* Use existing handle if valid */
			handle = attrs->handle;
    9fda:	460a      	mov	r2, r1
	for (; attrs && count; attrs++, count--) {
    9fdc:	3414      	adds	r4, #20
    9fde:	3b01      	subs	r3, #1
    9fe0:	b29b      	uxth	r3, r3
    9fe2:	b13c      	cbz	r4, 9ff4 <gatt_register+0x4c>
    9fe4:	b133      	cbz	r3, 9ff4 <gatt_register+0x4c>
		if (!attrs->handle) {
    9fe6:	8a21      	ldrh	r1, [r4, #16]
    9fe8:	2900      	cmp	r1, #0
    9fea:	d1f4      	bne.n	9fd6 <gatt_register+0x2e>
			attrs->handle = ++handle;
    9fec:	3201      	adds	r2, #1
    9fee:	b292      	uxth	r2, r2
    9ff0:	8222      	strh	r2, [r4, #16]
    9ff2:	e7f3      	b.n	9fdc <gatt_register+0x34>
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    9ff4:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    9ff8:	2200      	movs	r2, #0
    9ffa:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    9ffc:	4a08      	ldr	r2, [pc, #32]	; (a020 <gatt_register+0x78>)
    9ffe:	6852      	ldr	r2, [r2, #4]
    a000:	b12a      	cbz	r2, a00e <gatt_register+0x66>
		list->tail->next = node;
    a002:	6013      	str	r3, [r2, #0]
		list->tail = node;
    a004:	4a06      	ldr	r2, [pc, #24]	; (a020 <gatt_register+0x78>)
    a006:	6053      	str	r3, [r2, #4]

	return 0;
    a008:	2000      	movs	r0, #0
}
    a00a:	bc30      	pop	{r4, r5}
    a00c:	4770      	bx	lr
		list->tail = node;
    a00e:	4a04      	ldr	r2, [pc, #16]	; (a020 <gatt_register+0x78>)
    a010:	6053      	str	r3, [r2, #4]
		list->head = node;
    a012:	6013      	str	r3, [r2, #0]
	return 0;
    a014:	2000      	movs	r0, #0
    a016:	e7f8      	b.n	a00a <gatt_register+0x62>
			return -EINVAL;
    a018:	f06f 0015 	mvn.w	r0, #21
    a01c:	e7f5      	b.n	a00a <gatt_register+0x62>
    a01e:	bf00      	nop
    a020:	20000d20 	.word	0x20000d20

0000a024 <update_range>:
	k_delayed_work_init(&gatt_sc.work, sc_process);
}

static bool update_range(u16_t *start, u16_t *end, u16_t new_start,
			 u16_t new_end)
{
    a024:	b430      	push	{r4, r5}
	BT_DBG("start 0x%04x end 0x%04x new_start 0x%04x new_end 0x%04x",
	       *start, *end, new_start, new_end);

	/* Check if inside existing range */
	if (new_start >= *start && new_end <= *end) {
    a026:	8804      	ldrh	r4, [r0, #0]
    a028:	4294      	cmp	r4, r2
    a02a:	d802      	bhi.n	a032 <update_range+0xe>
    a02c:	880d      	ldrh	r5, [r1, #0]
    a02e:	429d      	cmp	r5, r3
    a030:	d209      	bcs.n	a046 <update_range+0x22>
		return false;
	}

	/* Update range */
	if (*start > new_start) {
    a032:	4294      	cmp	r4, r2
    a034:	d900      	bls.n	a038 <update_range+0x14>
		*start = new_start;
    a036:	8002      	strh	r2, [r0, #0]
	}

	if (*end < new_end) {
    a038:	880a      	ldrh	r2, [r1, #0]
    a03a:	4293      	cmp	r3, r2
    a03c:	d905      	bls.n	a04a <update_range+0x26>
		*end = new_end;
    a03e:	800b      	strh	r3, [r1, #0]
	}

	return true;
    a040:	2001      	movs	r0, #1
}
    a042:	bc30      	pop	{r4, r5}
    a044:	4770      	bx	lr
		return false;
    a046:	2000      	movs	r0, #0
    a048:	e7fb      	b.n	a042 <update_range+0x1e>
	return true;
    a04a:	2001      	movs	r0, #1
    a04c:	e7f9      	b.n	a042 <update_range+0x1e>

0000a04e <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    a04e:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    a050:	2000      	movs	r0, #0
    a052:	4770      	bx	lr

0000a054 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    a054:	b510      	push	{r4, lr}
	int i;
	u16_t value = 0x0000;
    a056:	2400      	movs	r4, #0

	for (i = 0; i < ccc->cfg_len; i++) {
    a058:	4623      	mov	r3, r4
    a05a:	e000      	b.n	a05e <gatt_ccc_changed+0xa>
    a05c:	3301      	adds	r3, #1
    a05e:	684a      	ldr	r2, [r1, #4]
    a060:	429a      	cmp	r2, r3
    a062:	d907      	bls.n	a074 <gatt_ccc_changed+0x20>
		if (ccc->cfg[i].value > value) {
    a064:	680a      	ldr	r2, [r1, #0]
    a066:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    a06a:	8912      	ldrh	r2, [r2, #8]
    a06c:	4294      	cmp	r4, r2
    a06e:	d2f5      	bcs.n	a05c <gatt_ccc_changed+0x8>
			value = ccc->cfg[i].value;
    a070:	4614      	mov	r4, r2
    a072:	e7f3      	b.n	a05c <gatt_ccc_changed+0x8>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    a074:	890b      	ldrh	r3, [r1, #8]
    a076:	429c      	cmp	r4, r3
    a078:	d003      	beq.n	a082 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    a07a:	810c      	strh	r4, [r1, #8]
		ccc->cfg_changed(attr, value);
    a07c:	68cb      	ldr	r3, [r1, #12]
    a07e:	4621      	mov	r1, r4
    a080:	4798      	blx	r3
    a082:	bd10      	pop	{r4, pc}

0000a084 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    a084:	b510      	push	{r4, lr}
    a086:	9b02      	ldr	r3, [sp, #8]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    a088:	69dc      	ldr	r4, [r3, #28]
    a08a:	460a      	mov	r2, r1
    a08c:	6999      	ldr	r1, [r3, #24]
    a08e:	47a0      	blx	r4
    a090:	bd10      	pop	{r4, pc}
	...

0000a094 <sc_indicate_rsp>:
{
    a094:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a096:	4b0f      	ldr	r3, [pc, #60]	; (a0d4 <sc_indicate_rsp+0x40>)
    a098:	f103 0254 	add.w	r2, r3, #84	; 0x54
    a09c:	f3bf 8f5b 	dmb	ish
    a0a0:	e852 1f00 	ldrex	r1, [r2]
    a0a4:	f021 0102 	bic.w	r1, r1, #2
    a0a8:	e842 1000 	strex	r0, r1, [r2]
    a0ac:	2800      	cmp	r0, #0
    a0ae:	d1f7      	bne.n	a0a0 <sc_indicate_rsp+0xc>
    a0b0:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a0b4:	f3bf 8f5b 	dmb	ish
    a0b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    a0ba:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a0be:	f013 0f01 	tst.w	r3, #1
    a0c2:	d100      	bne.n	a0c6 <sc_indicate_rsp+0x32>
    a0c4:	bd08      	pop	{r3, pc}
    a0c6:	2200      	movs	r2, #0
    a0c8:	4903      	ldr	r1, [pc, #12]	; (a0d8 <sc_indicate_rsp+0x44>)
    a0ca:	4804      	ldr	r0, [pc, #16]	; (a0dc <sc_indicate_rsp+0x48>)
    a0cc:	f01f ff8a 	bl	29fe4 <k_delayed_work_submit_to_queue>
}
    a0d0:	e7f8      	b.n	a0c4 <sc_indicate_rsp+0x30>
    a0d2:	bf00      	nop
    a0d4:	20000d28 	.word	0x20000d28
    a0d8:	20000d54 	.word	0x20000d54
    a0dc:	20003158 	.word	0x20003158

0000a0e0 <sc_indicate>:
{
    a0e0:	b510      	push	{r4, lr}
    a0e2:	4604      	mov	r4, r0
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    a0e4:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a0e6:	f3bf 8f5b 	dmb	ish
    a0ea:	e850 3f00 	ldrex	r3, [r0]
    a0ee:	f043 0e01 	orr.w	lr, r3, #1
    a0f2:	e840 ec00 	strex	ip, lr, [r0]
    a0f6:	f1bc 0f00 	cmp.w	ip, #0
    a0fa:	d1f6      	bne.n	a0ea <sc_indicate+0xa>
    a0fc:	f3bf 8f5b 	dmb	ish
    a100:	f013 0f01 	tst.w	r3, #1
    a104:	d10a      	bne.n	a11c <sc_indicate+0x3c>
		sc->start = start;
    a106:	8521      	strh	r1, [r4, #40]	; 0x28
		sc->end = end;
    a108:	8562      	strh	r2, [r4, #42]	; 0x2a
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a10a:	f3bf 8f5b 	dmb	ish
    a10e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a110:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    a114:	f013 0f02 	tst.w	r3, #2
    a118:	d00b      	beq.n	a132 <sc_indicate+0x52>
    a11a:	bd10      	pop	{r4, pc}
	if (!update_range(&sc->start, &sc->end, start, end)) {
    a11c:	4613      	mov	r3, r2
    a11e:	460a      	mov	r2, r1
    a120:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    a124:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a128:	f7ff ff7c 	bl	a024 <update_range>
    a12c:	2800      	cmp	r0, #0
    a12e:	d1ec      	bne.n	a10a <sc_indicate+0x2a>
    a130:	e7f3      	b.n	a11a <sc_indicate+0x3a>
    a132:	220a      	movs	r2, #10
    a134:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    a138:	4801      	ldr	r0, [pc, #4]	; (a140 <sc_indicate+0x60>)
    a13a:	f01f ff53 	bl	29fe4 <k_delayed_work_submit_to_queue>
    a13e:	e7ec      	b.n	a11a <sc_indicate+0x3a>
    a140:	20003158 	.word	0x20003158

0000a144 <sc_save>:
	u16_t end;
};

static void sc_save(struct bt_gatt_ccc_cfg *cfg,
		    struct bt_gatt_indicate_params *params)
{
    a144:	b510      	push	{r4, lr}
    a146:	b082      	sub	sp, #8
    a148:	4604      	mov	r4, r0
	struct sc_data data;
	struct sc_data *stored;

	memcpy(&data, params->data, params->len);
    a14a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    a14c:	6a09      	ldr	r1, [r1, #32]
    a14e:	a801      	add	r0, sp, #4
    a150:	f7f6 f8b6 	bl	2c0 <memcpy>

	data.start = sys_le16_to_cpu(data.start);
    a154:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	data.end = sys_le16_to_cpu(data.end);
    a158:	f8bd 3006 	ldrh.w	r3, [sp, #6]

	/* Load data stored */
	stored = (struct sc_data *)cfg->data;

	/* Check if there is any change stored */
	if (!stored->start && !stored->end) {
    a15c:	89a1      	ldrh	r1, [r4, #12]
    a15e:	b909      	cbnz	r1, a164 <sc_save+0x20>
    a160:	89e1      	ldrh	r1, [r4, #14]
    a162:	b139      	cbz	r1, a174 <sc_save+0x30>
		*stored = data;
		goto done;
	}

	update_range(&stored->start, &stored->end,
    a164:	f104 010e 	add.w	r1, r4, #14
    a168:	f104 000c 	add.w	r0, r4, #12
    a16c:	f7ff ff5a 	bl	a024 <update_range>
		     data.start, data.end);

done:
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       stored->start, stored->end);
}
    a170:	b002      	add	sp, #8
    a172:	bd10      	pop	{r4, pc}
		*stored = data;
    a174:	9801      	ldr	r0, [sp, #4]
    a176:	60e0      	str	r0, [r4, #12]
		goto done;
    a178:	e7fa      	b.n	a170 <sc_save+0x2c>

0000a17a <bt_gatt_attr_write_ccc>:
{
    a17a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a17e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    a182:	68cd      	ldr	r5, [r1, #12]
	if (offset > sizeof(u16_t)) {
    a184:	2c02      	cmp	r4, #2
    a186:	d84f      	bhi.n	a228 <bt_gatt_attr_write_ccc+0xae>
	if (offset + len > sizeof(u16_t)) {
    a188:	4698      	mov	r8, r3
    a18a:	441c      	add	r4, r3
    a18c:	2c02      	cmp	r4, #2
    a18e:	d84e      	bhi.n	a22e <bt_gatt_attr_write_ccc+0xb4>
    a190:	460f      	mov	r7, r1
    a192:	4681      	mov	r9, r0
	return ((u16_t)src[1] << 8) | src[0];
    a194:	7853      	ldrb	r3, [r2, #1]
    a196:	7816      	ldrb	r6, [r2, #0]
    a198:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	for (i = 0; i < ccc->cfg_len; i++) {
    a19c:	2400      	movs	r4, #0
    a19e:	686b      	ldr	r3, [r5, #4]
    a1a0:	429c      	cmp	r4, r3
    a1a2:	d209      	bcs.n	a1b8 <bt_gatt_attr_write_ccc+0x3e>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a1a4:	6829      	ldr	r1, [r5, #0]
    a1a6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    a1aa:	3101      	adds	r1, #1
    a1ac:	4648      	mov	r0, r9
    a1ae:	f7fc fffd 	bl	71ac <bt_conn_addr_le_cmp>
    a1b2:	b108      	cbz	r0, a1b8 <bt_gatt_attr_write_ccc+0x3e>
	for (i = 0; i < ccc->cfg_len; i++) {
    a1b4:	3401      	adds	r4, #1
    a1b6:	e7f2      	b.n	a19e <bt_gatt_attr_write_ccc+0x24>
	if (i == ccc->cfg_len) {
    a1b8:	686b      	ldr	r3, [r5, #4]
    a1ba:	429c      	cmp	r4, r3
    a1bc:	d026      	beq.n	a20c <bt_gatt_attr_write_ccc+0x92>
	} else if (!value) {
    a1be:	b91e      	cbnz	r6, a1c8 <bt_gatt_attr_write_ccc+0x4e>
		ccc->cfg[i].valid = false;
    a1c0:	682a      	ldr	r2, [r5, #0]
    a1c2:	0123      	lsls	r3, r4, #4
    a1c4:	2100      	movs	r1, #0
    a1c6:	54d1      	strb	r1, [r2, r3]
	ccc->cfg[i].value = value;
    a1c8:	682b      	ldr	r3, [r5, #0]
    a1ca:	0124      	lsls	r4, r4, #4
    a1cc:	4423      	add	r3, r4
    a1ce:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    a1d0:	682b      	ldr	r3, [r5, #0]
    a1d2:	441c      	add	r4, r3
    a1d4:	8922      	ldrh	r2, [r4, #8]
    a1d6:	892b      	ldrh	r3, [r5, #8]
    a1d8:	429a      	cmp	r2, r3
    a1da:	d003      	beq.n	a1e4 <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
    a1dc:	4629      	mov	r1, r5
    a1de:	4638      	mov	r0, r7
    a1e0:	f7ff ff38 	bl	a054 <gatt_ccc_changed>
}
    a1e4:	4640      	mov	r0, r8
    a1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	memcpy(dst, src, sizeof(*dst));
    a1ea:	2207      	movs	r2, #7
    a1ec:	f109 0148 	add.w	r1, r9, #72	; 0x48
    a1f0:	3001      	adds	r0, #1
    a1f2:	f7f6 f865 	bl	2c0 <memcpy>
			if (value) {
    a1f6:	b11e      	cbz	r6, a200 <bt_gatt_attr_write_ccc+0x86>
				ccc->cfg[i].valid = true;
    a1f8:	682b      	ldr	r3, [r5, #0]
    a1fa:	2201      	movs	r2, #1
    a1fc:	f803 200a 	strb.w	r2, [r3, sl]
		if (i == ccc->cfg_len) {
    a200:	686b      	ldr	r3, [r5, #4]
    a202:	429c      	cmp	r4, r3
    a204:	d1e0      	bne.n	a1c8 <bt_gatt_attr_write_ccc+0x4e>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    a206:	f06f 0810 	mvn.w	r8, #16
    a20a:	e7eb      	b.n	a1e4 <bt_gatt_attr_write_ccc+0x6a>
    a20c:	2400      	movs	r4, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    a20e:	429c      	cmp	r4, r3
    a210:	d2f6      	bcs.n	a200 <bt_gatt_attr_write_ccc+0x86>
			if (ccc->cfg[i].valid) {
    a212:	682a      	ldr	r2, [r5, #0]
    a214:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    a218:	eb02 000a 	add.w	r0, r2, sl
    a21c:	f812 200a 	ldrb.w	r2, [r2, sl]
    a220:	2a00      	cmp	r2, #0
    a222:	d0e2      	beq.n	a1ea <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    a224:	3401      	adds	r4, #1
    a226:	e7f2      	b.n	a20e <bt_gatt_attr_write_ccc+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a228:	f06f 0806 	mvn.w	r8, #6
    a22c:	e7da      	b.n	a1e4 <bt_gatt_attr_write_ccc+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    a22e:	f06f 080c 	mvn.w	r8, #12
    a232:	e7d7      	b.n	a1e4 <bt_gatt_attr_write_ccc+0x6a>

0000a234 <gatt_send>:
{
    a234:	b538      	push	{r3, r4, r5, lr}
    a236:	460d      	mov	r5, r1
	if (params) {
    a238:	b153      	cbz	r3, a250 <gatt_send+0x1c>
    a23a:	4619      	mov	r1, r3
		req->buf = buf;
    a23c:	611d      	str	r5, [r3, #16]
		req->func = func;
    a23e:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    a240:	9b04      	ldr	r3, [sp, #16]
    a242:	608b      	str	r3, [r1, #8]
		err = bt_att_req_send(conn, req);
    a244:	f7ff fe88 	bl	9f58 <bt_att_req_send>
    a248:	4604      	mov	r4, r0
	if (err) {
    a24a:	b92c      	cbnz	r4, a258 <gatt_send+0x24>
}
    a24c:	4620      	mov	r0, r4
    a24e:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_att_send(conn, buf);
    a250:	f7ff fe32 	bl	9eb8 <bt_att_send>
    a254:	4604      	mov	r4, r0
    a256:	e7f8      	b.n	a24a <gatt_send+0x16>
		net_buf_unref(buf);
    a258:	4628      	mov	r0, r5
    a25a:	f010 fd2f 	bl	1acbc <net_buf_unref>
	return err;
    a25e:	e7f5      	b.n	a24c <gatt_send+0x18>

0000a260 <gatt_indicate>:
{
    a260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a264:	b082      	sub	sp, #8
    a266:	4680      	mov	r8, r0
    a268:	460c      	mov	r4, r1
				sizeof(*ind) + params->len);
    a26a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    a26c:	3202      	adds	r2, #2
    a26e:	211d      	movs	r1, #29
    a270:	f7ff f9f6 	bl	9660 <bt_att_create_pdu>
	if (!buf) {
    a274:	b1f8      	cbz	r0, a2b6 <gatt_indicate+0x56>
    a276:	4606      	mov	r6, r0
	ind = net_buf_add(buf, sizeof(*ind));
    a278:	f100 0708 	add.w	r7, r0, #8
    a27c:	2102      	movs	r1, #2
    a27e:	4638      	mov	r0, r7
    a280:	f010 fd68 	bl	1ad54 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    a284:	69a3      	ldr	r3, [r4, #24]
    a286:	8a1b      	ldrh	r3, [r3, #16]
    a288:	4605      	mov	r5, r0
    a28a:	f825 3b02 	strh.w	r3, [r5], #2
	net_buf_add(buf, params->len);
    a28e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    a290:	4638      	mov	r0, r7
    a292:	f010 fd5f 	bl	1ad54 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    a296:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    a298:	6a21      	ldr	r1, [r4, #32]
    a29a:	4628      	mov	r0, r5
    a29c:	f7f6 f810 	bl	2c0 <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    a2a0:	2300      	movs	r3, #0
    a2a2:	9300      	str	r3, [sp, #0]
    a2a4:	4623      	mov	r3, r4
    a2a6:	4a05      	ldr	r2, [pc, #20]	; (a2bc <gatt_indicate+0x5c>)
    a2a8:	4631      	mov	r1, r6
    a2aa:	4640      	mov	r0, r8
    a2ac:	f7ff ffc2 	bl	a234 <gatt_send>
}
    a2b0:	b002      	add	sp, #8
    a2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
    a2b6:	f06f 000b 	mvn.w	r0, #11
    a2ba:	e7f9      	b.n	a2b0 <gatt_indicate+0x50>
    a2bc:	0000a085 	.word	0x0000a085

0000a2c0 <gatt_notify>:
{
    a2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a2c4:	4680      	mov	r8, r0
    a2c6:	468a      	mov	sl, r1
    a2c8:	4691      	mov	r9, r2
    a2ca:	461c      	mov	r4, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    a2cc:	1c9a      	adds	r2, r3, #2
    a2ce:	211b      	movs	r1, #27
    a2d0:	f7ff f9c6 	bl	9660 <bt_att_create_pdu>
	if (!buf) {
    a2d4:	b1d8      	cbz	r0, a30e <gatt_notify+0x4e>
    a2d6:	4606      	mov	r6, r0
	nfy = net_buf_add(buf, sizeof(*nfy));
    a2d8:	f100 0708 	add.w	r7, r0, #8
    a2dc:	2102      	movs	r1, #2
    a2de:	4638      	mov	r0, r7
    a2e0:	f010 fd38 	bl	1ad54 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    a2e4:	4605      	mov	r5, r0
    a2e6:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    a2ea:	4621      	mov	r1, r4
    a2ec:	4638      	mov	r0, r7
    a2ee:	f010 fd31 	bl	1ad54 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    a2f2:	4622      	mov	r2, r4
    a2f4:	4649      	mov	r1, r9
    a2f6:	4628      	mov	r0, r5
    a2f8:	f7f5 ffe2 	bl	2c0 <memcpy>
    a2fc:	2300      	movs	r3, #0
    a2fe:	4632      	mov	r2, r6
    a300:	2104      	movs	r1, #4
    a302:	4640      	mov	r0, r8
    a304:	f7fd febd 	bl	8082 <bt_l2cap_send_cb>
	return 0;
    a308:	2000      	movs	r0, #0
    a30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    a30e:	f06f 000b 	mvn.w	r0, #11
}
    a312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000a318 <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    a318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a31c:	b082      	sub	sp, #8
    a31e:	4604      	mov	r4, r0
    a320:	460f      	mov	r7, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    a322:	2300      	movs	r3, #0
    a324:	f88d 3000 	strb.w	r3, [sp]
    a328:	f642 1302 	movw	r3, #10498	; 0x2902
    a32c:	f8ad 3002 	strh.w	r3, [sp, #2]
    a330:	4669      	mov	r1, sp
    a332:	6800      	ldr	r0, [r0, #0]
    a334:	f7fa f991 	bl	465a <bt_uuid_cmp>
    a338:	b938      	cbnz	r0, a34a <notify_cb+0x32>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a33a:	68a2      	ldr	r2, [r4, #8]
    a33c:	4b29      	ldr	r3, [pc, #164]	; (a3e4 <notify_cb+0xcc>)
    a33e:	429a      	cmp	r2, r3
    a340:	d012      	beq.n	a368 <notify_cb+0x50>
		return BT_GATT_ITER_CONTINUE;
    a342:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    a344:	b002      	add	sp, #8
    a346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    a34a:	6820      	ldr	r0, [r4, #0]
    a34c:	2300      	movs	r3, #0
    a34e:	f88d 3004 	strb.w	r3, [sp, #4]
    a352:	f642 0303 	movw	r3, #10243	; 0x2803
    a356:	f8ad 3006 	strh.w	r3, [sp, #6]
    a35a:	a901      	add	r1, sp, #4
    a35c:	f7fa f97d 	bl	465a <bt_uuid_cmp>
    a360:	2800      	cmp	r0, #0
    a362:	d0ef      	beq.n	a344 <notify_cb+0x2c>
		return BT_GATT_ITER_CONTINUE;
    a364:	2001      	movs	r0, #1
    a366:	e7ed      	b.n	a344 <notify_cb+0x2c>
	ccc = attr->user_data;
    a368:	68e5      	ldr	r5, [r4, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a36a:	2400      	movs	r4, #0
    a36c:	e01a      	b.n	a3a4 <notify_cb+0x8c>
			if (ccc->cfg == sc_ccc_cfg) {
    a36e:	6828      	ldr	r0, [r5, #0]
    a370:	4b1d      	ldr	r3, [pc, #116]	; (a3e8 <notify_cb+0xd0>)
    a372:	4298      	cmp	r0, r3
    a374:	d115      	bne.n	a3a2 <notify_cb+0x8a>
				sc_save(&ccc->cfg[i], data->params);
    a376:	6979      	ldr	r1, [r7, #20]
    a378:	4430      	add	r0, r6
    a37a:	f7ff fee3 	bl	a144 <sc_save>
			continue;
    a37e:	e010      	b.n	a3a2 <notify_cb+0x8a>
		if (data->type == BT_GATT_CCC_INDICATE) {
    a380:	88bb      	ldrh	r3, [r7, #4]
    a382:	2b02      	cmp	r3, #2
    a384:	d024      	beq.n	a3d0 <notify_cb+0xb8>
			err = gatt_notify(conn, data->attr->handle, data->data,
    a386:	68b9      	ldr	r1, [r7, #8]
    a388:	8a3b      	ldrh	r3, [r7, #16]
    a38a:	68fa      	ldr	r2, [r7, #12]
    a38c:	8a09      	ldrh	r1, [r1, #16]
    a38e:	f7ff ff97 	bl	a2c0 <gatt_notify>
    a392:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    a394:	4640      	mov	r0, r8
    a396:	f7fc ffb9 	bl	730c <bt_conn_unref>
		if (err < 0) {
    a39a:	2e00      	cmp	r6, #0
    a39c:	db1f      	blt.n	a3de <notify_cb+0xc6>
		data->err = 0;
    a39e:	2300      	movs	r3, #0
    a3a0:	603b      	str	r3, [r7, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    a3a2:	3401      	adds	r4, #1
    a3a4:	686b      	ldr	r3, [r5, #4]
    a3a6:	429c      	cmp	r4, r3
    a3a8:	d217      	bcs.n	a3da <notify_cb+0xc2>
		if (ccc->cfg[i].value != data->type) {
    a3aa:	6828      	ldr	r0, [r5, #0]
    a3ac:	0126      	lsls	r6, r4, #4
    a3ae:	4430      	add	r0, r6
    a3b0:	8902      	ldrh	r2, [r0, #8]
    a3b2:	88bb      	ldrh	r3, [r7, #4]
    a3b4:	429a      	cmp	r2, r3
    a3b6:	d1f4      	bne.n	a3a2 <notify_cb+0x8a>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    a3b8:	3001      	adds	r0, #1
    a3ba:	f7fc ff4d 	bl	7258 <bt_conn_lookup_addr_le>
		if (!conn) {
    a3be:	4680      	mov	r8, r0
    a3c0:	2800      	cmp	r0, #0
    a3c2:	d0d4      	beq.n	a36e <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
    a3c4:	7b03      	ldrb	r3, [r0, #12]
    a3c6:	2b03      	cmp	r3, #3
    a3c8:	d0da      	beq.n	a380 <notify_cb+0x68>
			bt_conn_unref(conn);
    a3ca:	f7fc ff9f 	bl	730c <bt_conn_unref>
			continue;
    a3ce:	e7e8      	b.n	a3a2 <notify_cb+0x8a>
			err = gatt_indicate(conn, data->params);
    a3d0:	6979      	ldr	r1, [r7, #20]
    a3d2:	f7ff ff45 	bl	a260 <gatt_indicate>
    a3d6:	4606      	mov	r6, r0
    a3d8:	e7dc      	b.n	a394 <notify_cb+0x7c>
	return BT_GATT_ITER_CONTINUE;
    a3da:	2001      	movs	r0, #1
    a3dc:	e7b2      	b.n	a344 <notify_cb+0x2c>
			return BT_GATT_ITER_STOP;
    a3de:	2000      	movs	r0, #0
    a3e0:	e7b0      	b.n	a344 <notify_cb+0x2c>
    a3e2:	bf00      	nop
    a3e4:	0000a17b 	.word	0x0000a17b
    a3e8:	20000d80 	.word	0x20000d80

0000a3ec <sc_restore>:

static void sc_restore(struct bt_gatt_ccc_cfg *cfg)
{
	struct sc_data *data = (struct sc_data *)cfg->data;

	if (!data->start && !data->end) {
    a3ec:	8981      	ldrh	r1, [r0, #12]
    a3ee:	b909      	cbnz	r1, a3f4 <sc_restore+0x8>
    a3f0:	89c3      	ldrh	r3, [r0, #14]
    a3f2:	b163      	cbz	r3, a40e <sc_restore+0x22>
{
    a3f4:	b510      	push	{r4, lr}
    a3f6:	4604      	mov	r4, r0
	}

	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       data->start, data->end);

	sc_indicate(&gatt_sc, data->start, data->end);
    a3f8:	89c2      	ldrh	r2, [r0, #14]
    a3fa:	4805      	ldr	r0, [pc, #20]	; (a410 <sc_restore+0x24>)
    a3fc:	f7ff fe70 	bl	a0e0 <sc_indicate>

	/* Reset config data */
	memset(cfg->data, 0, sizeof(cfg->data));
    a400:	2204      	movs	r2, #4
    a402:	2100      	movs	r1, #0
    a404:	f104 000c 	add.w	r0, r4, #12
    a408:	f020 fa56 	bl	2a8b8 <memset>
    a40c:	bd10      	pop	{r4, pc}
    a40e:	4770      	bx	lr
    a410:	20000d28 	.word	0x20000d28

0000a414 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a414:	6882      	ldr	r2, [r0, #8]
    a416:	4b16      	ldr	r3, [pc, #88]	; (a470 <connected_cb+0x5c>)
    a418:	429a      	cmp	r2, r3
    a41a:	d001      	beq.n	a420 <connected_cb+0xc>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    a41c:	2001      	movs	r0, #1
    a41e:	4770      	bx	lr
{
    a420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a424:	460f      	mov	r7, r1
    a426:	4680      	mov	r8, r0
	ccc = attr->user_data;
    a428:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a42a:	2400      	movs	r4, #0
    a42c:	e004      	b.n	a438 <connected_cb+0x24>
				sc_restore(&ccc->cfg[i]);
    a42e:	4430      	add	r0, r6
    a430:	f7ff ffdc 	bl	a3ec <sc_restore>
    a434:	e019      	b.n	a46a <connected_cb+0x56>
	for (i = 0; i < ccc->cfg_len; i++) {
    a436:	3401      	adds	r4, #1
    a438:	686b      	ldr	r3, [r5, #4]
    a43a:	429c      	cmp	r4, r3
    a43c:	d215      	bcs.n	a46a <connected_cb+0x56>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a43e:	6829      	ldr	r1, [r5, #0]
    a440:	0126      	lsls	r6, r4, #4
    a442:	4431      	add	r1, r6
    a444:	3101      	adds	r1, #1
    a446:	4638      	mov	r0, r7
    a448:	f7fc feb0 	bl	71ac <bt_conn_addr_le_cmp>
    a44c:	2800      	cmp	r0, #0
    a44e:	d1f2      	bne.n	a436 <connected_cb+0x22>
		if (ccc->cfg[i].value) {
    a450:	682b      	ldr	r3, [r5, #0]
    a452:	4433      	add	r3, r6
    a454:	891b      	ldrh	r3, [r3, #8]
    a456:	2b00      	cmp	r3, #0
    a458:	d0ed      	beq.n	a436 <connected_cb+0x22>
			gatt_ccc_changed(attr, ccc);
    a45a:	4629      	mov	r1, r5
    a45c:	4640      	mov	r0, r8
    a45e:	f7ff fdf9 	bl	a054 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    a462:	6828      	ldr	r0, [r5, #0]
    a464:	4b03      	ldr	r3, [pc, #12]	; (a474 <connected_cb+0x60>)
    a466:	4298      	cmp	r0, r3
    a468:	d0e1      	beq.n	a42e <connected_cb+0x1a>
}
    a46a:	2001      	movs	r0, #1
    a46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a470:	0000a17b 	.word	0x0000a17b
    a474:	20000d80 	.word	0x20000d80

0000a478 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    a478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a47c:	6882      	ldr	r2, [r0, #8]
    a47e:	4b29      	ldr	r3, [pc, #164]	; (a524 <disconnected_cb+0xac>)
    a480:	429a      	cmp	r2, r3
    a482:	d002      	beq.n	a48a <disconnected_cb+0x12>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    a484:	2001      	movs	r0, #1
    a486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
    a48a:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    a48c:	892b      	ldrh	r3, [r5, #8]
    a48e:	2b00      	cmp	r3, #0
    a490:	d0f8      	beq.n	a484 <disconnected_cb+0xc>
    a492:	4688      	mov	r8, r1
    a494:	4607      	mov	r7, r0
    a496:	2400      	movs	r4, #0
    a498:	e012      	b.n	a4c0 <disconnected_cb+0x48>
					bt_conn_unref(tmp);
    a49a:	f7fc ff37 	bl	730c <bt_conn_unref>
					return BT_GATT_ITER_CONTINUE;
    a49e:	e7f1      	b.n	a484 <disconnected_cb+0xc>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    a4a0:	f108 0948 	add.w	r9, r8, #72	; 0x48
    a4a4:	4648      	mov	r0, r9
    a4a6:	f7fc f99f 	bl	67e8 <bt_addr_le_is_bonded>
    a4aa:	bb28      	cbnz	r0, a4f8 <disconnected_cb+0x80>
				ccc->cfg[i].valid = false;
    a4ac:	682b      	ldr	r3, [r5, #0]
    a4ae:	2100      	movs	r1, #0
    a4b0:	5599      	strb	r1, [r3, r6]
				memset(&ccc->cfg[i].value, 0,
    a4b2:	6828      	ldr	r0, [r5, #0]
    a4b4:	4430      	add	r0, r6
    a4b6:	2202      	movs	r2, #2
    a4b8:	3008      	adds	r0, #8
    a4ba:	f020 f9fd 	bl	2a8b8 <memset>
	for (i = 0; i < ccc->cfg_len; i++) {
    a4be:	3401      	adds	r4, #1
    a4c0:	686b      	ldr	r3, [r5, #4]
    a4c2:	429c      	cmp	r4, r3
    a4c4:	d220      	bcs.n	a508 <disconnected_cb+0x90>
		if (!ccc->cfg[i].value) {
    a4c6:	6829      	ldr	r1, [r5, #0]
    a4c8:	0126      	lsls	r6, r4, #4
    a4ca:	4431      	add	r1, r6
    a4cc:	890b      	ldrh	r3, [r1, #8]
    a4ce:	2b00      	cmp	r3, #0
    a4d0:	d0f5      	beq.n	a4be <disconnected_cb+0x46>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a4d2:	3101      	adds	r1, #1
    a4d4:	4640      	mov	r0, r8
    a4d6:	f7fc fe69 	bl	71ac <bt_conn_addr_le_cmp>
    a4da:	2800      	cmp	r0, #0
    a4dc:	d0e0      	beq.n	a4a0 <disconnected_cb+0x28>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    a4de:	6828      	ldr	r0, [r5, #0]
    a4e0:	4430      	add	r0, r6
    a4e2:	3001      	adds	r0, #1
    a4e4:	f7fc feb8 	bl	7258 <bt_conn_lookup_addr_le>
			if (tmp) {
    a4e8:	2800      	cmp	r0, #0
    a4ea:	d0e8      	beq.n	a4be <disconnected_cb+0x46>
				if (tmp->state == BT_CONN_CONNECTED) {
    a4ec:	7b02      	ldrb	r2, [r0, #12]
    a4ee:	2a03      	cmp	r2, #3
    a4f0:	d0d3      	beq.n	a49a <disconnected_cb+0x22>
				bt_conn_unref(tmp);
    a4f2:	f7fc ff0b 	bl	730c <bt_conn_unref>
    a4f6:	e7e2      	b.n	a4be <disconnected_cb+0x46>
				bt_addr_le_copy(&ccc->cfg[i].peer,
    a4f8:	6828      	ldr	r0, [r5, #0]
    a4fa:	4430      	add	r0, r6
    a4fc:	2207      	movs	r2, #7
    a4fe:	4649      	mov	r1, r9
    a500:	3001      	adds	r0, #1
    a502:	f7f5 fedd 	bl	2c0 <memcpy>
    a506:	e7da      	b.n	a4be <disconnected_cb+0x46>
	memset(&ccc->value, 0, sizeof(ccc->value));
    a508:	2202      	movs	r2, #2
    a50a:	2100      	movs	r1, #0
    a50c:	f105 0008 	add.w	r0, r5, #8
    a510:	f020 f9d2 	bl	2a8b8 <memset>
	if (ccc->cfg_changed) {
    a514:	68eb      	ldr	r3, [r5, #12]
    a516:	2b00      	cmp	r3, #0
    a518:	d0b4      	beq.n	a484 <disconnected_cb+0xc>
		ccc->cfg_changed(attr, ccc->value);
    a51a:	8929      	ldrh	r1, [r5, #8]
    a51c:	4638      	mov	r0, r7
    a51e:	4798      	blx	r3
    a520:	e7b0      	b.n	a484 <disconnected_cb+0xc>
    a522:	bf00      	nop
    a524:	0000a17b 	.word	0x0000a17b

0000a528 <bt_gatt_init>:
{
    a528:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    a52a:	4805      	ldr	r0, [pc, #20]	; (a540 <bt_gatt_init+0x18>)
    a52c:	f7ff fd3c 	bl	9fa8 <gatt_register>
	gatt_register(&gatt_svc);
    a530:	4804      	ldr	r0, [pc, #16]	; (a544 <bt_gatt_init+0x1c>)
    a532:	f7ff fd39 	bl	9fa8 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    a536:	4904      	ldr	r1, [pc, #16]	; (a548 <bt_gatt_init+0x20>)
    a538:	4804      	ldr	r0, [pc, #16]	; (a54c <bt_gatt_init+0x24>)
    a53a:	f01f fcdb 	bl	29ef4 <k_delayed_work_init>
    a53e:	bd08      	pop	{r3, pc}
    a540:	2000c0c4 	.word	0x2000c0c4
    a544:	2000c120 	.word	0x2000c120
    a548:	0000a81d 	.word	0x0000a81d
    a54c:	20000d54 	.word	0x20000d54

0000a550 <bt_gatt_service_register>:
{
    a550:	b510      	push	{r4, lr}
    a552:	b082      	sub	sp, #8
    a554:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    a556:	6803      	ldr	r3, [r0, #0]
    a558:	6818      	ldr	r0, [r3, #0]
    a55a:	2300      	movs	r3, #0
    a55c:	f88d 3000 	strb.w	r3, [sp]
    a560:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    a564:	f8ad 3002 	strh.w	r3, [sp, #2]
    a568:	4669      	mov	r1, sp
    a56a:	f7fa f876 	bl	465a <bt_uuid_cmp>
    a56e:	b300      	cbz	r0, a5b2 <bt_gatt_service_register+0x62>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    a570:	6823      	ldr	r3, [r4, #0]
    a572:	6818      	ldr	r0, [r3, #0]
    a574:	2300      	movs	r3, #0
    a576:	f88d 3004 	strb.w	r3, [sp, #4]
    a57a:	f641 0301 	movw	r3, #6145	; 0x1801
    a57e:	f8ad 3006 	strh.w	r3, [sp, #6]
    a582:	a901      	add	r1, sp, #4
    a584:	f7fa f869 	bl	465a <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    a588:	b1b0      	cbz	r0, a5b8 <bt_gatt_service_register+0x68>
	err = gatt_register(svc);
    a58a:	4620      	mov	r0, r4
    a58c:	f7ff fd0c 	bl	9fa8 <gatt_register>
	if (err < 0) {
    a590:	2800      	cmp	r0, #0
    a592:	db0c      	blt.n	a5ae <bt_gatt_service_register+0x5e>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    a594:	6821      	ldr	r1, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    a596:	88a2      	ldrh	r2, [r4, #4]
    a598:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    a59c:	0093      	lsls	r3, r2, #2
    a59e:	3b14      	subs	r3, #20
    a5a0:	440b      	add	r3, r1
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    a5a2:	8a1a      	ldrh	r2, [r3, #16]
    a5a4:	8a09      	ldrh	r1, [r1, #16]
    a5a6:	4806      	ldr	r0, [pc, #24]	; (a5c0 <bt_gatt_service_register+0x70>)
    a5a8:	f7ff fd9a 	bl	a0e0 <sc_indicate>
	return 0;
    a5ac:	2000      	movs	r0, #0
}
    a5ae:	b002      	add	sp, #8
    a5b0:	bd10      	pop	{r4, pc}
		return -EALREADY;
    a5b2:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a5b6:	e7fa      	b.n	a5ae <bt_gatt_service_register+0x5e>
    a5b8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a5bc:	e7f7      	b.n	a5ae <bt_gatt_service_register+0x5e>
    a5be:	bf00      	nop
    a5c0:	20000d28 	.word	0x20000d28

0000a5c4 <bt_gatt_attr_read>:
{
    a5c4:	b510      	push	{r4, lr}
    a5c6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a5ca:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
    a5ce:	42a1      	cmp	r1, r4
    a5d0:	d80c      	bhi.n	a5ec <bt_gatt_attr_read+0x28>
    a5d2:	4610      	mov	r0, r2
	len = min(buf_len, value_len - offset);
    a5d4:	1a64      	subs	r4, r4, r1
    a5d6:	42a3      	cmp	r3, r4
    a5d8:	bfa8      	it	ge
    a5da:	4623      	movge	r3, r4
    a5dc:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    a5de:	4622      	mov	r2, r4
    a5e0:	9b03      	ldr	r3, [sp, #12]
    a5e2:	4419      	add	r1, r3
    a5e4:	f7f5 fe6c 	bl	2c0 <memcpy>
}
    a5e8:	4620      	mov	r0, r4
    a5ea:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a5ec:	f06f 0406 	mvn.w	r4, #6
    a5f0:	e7fa      	b.n	a5e8 <bt_gatt_attr_read+0x24>

0000a5f2 <read_appearance>:
{
    a5f2:	b530      	push	{r4, r5, lr}
    a5f4:	b087      	sub	sp, #28
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    a5f6:	ac06      	add	r4, sp, #24
    a5f8:	2500      	movs	r5, #0
    a5fa:	f824 5d02 	strh.w	r5, [r4, #-2]!
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    a5fe:	2502      	movs	r5, #2
    a600:	9502      	str	r5, [sp, #8]
    a602:	9401      	str	r4, [sp, #4]
    a604:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    a608:	9400      	str	r4, [sp, #0]
    a60a:	f7ff ffdb 	bl	a5c4 <bt_gatt_attr_read>
}
    a60e:	b007      	add	sp, #28
    a610:	bd30      	pop	{r4, r5, pc}
	...

0000a614 <read_name>:
{
    a614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a618:	b084      	sub	sp, #16
    a61a:	4605      	mov	r5, r0
    a61c:	460e      	mov	r6, r1
    a61e:	4617      	mov	r7, r2
    a620:	4698      	mov	r8, r3
				 strlen(gap_name));
    a622:	4c09      	ldr	r4, [pc, #36]	; (a648 <read_name+0x34>)
    a624:	4620      	mov	r0, r4
    a626:	f7f6 f86b 	bl	700 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    a62a:	b280      	uxth	r0, r0
    a62c:	9002      	str	r0, [sp, #8]
    a62e:	9401      	str	r4, [sp, #4]
    a630:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a634:	9300      	str	r3, [sp, #0]
    a636:	4643      	mov	r3, r8
    a638:	463a      	mov	r2, r7
    a63a:	4631      	mov	r1, r6
    a63c:	4628      	mov	r0, r5
    a63e:	f7ff ffc1 	bl	a5c4 <bt_gatt_attr_read>
}
    a642:	b004      	add	sp, #16
    a644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a648:	00031624 	.word	0x00031624

0000a64c <bt_gatt_attr_read_service>:
{
    a64c:	b570      	push	{r4, r5, r6, lr}
    a64e:	b086      	sub	sp, #24
    a650:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
    a654:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
    a656:	7826      	ldrb	r6, [r4, #0]
    a658:	b146      	cbz	r6, a66c <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
    a65a:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    a65c:	2610      	movs	r6, #16
    a65e:	9602      	str	r6, [sp, #8]
    a660:	9401      	str	r4, [sp, #4]
    a662:	9500      	str	r5, [sp, #0]
    a664:	f7ff ffae 	bl	a5c4 <bt_gatt_attr_read>
}
    a668:	b006      	add	sp, #24
    a66a:	bd70      	pop	{r4, r5, r6, pc}
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    a66c:	8866      	ldrh	r6, [r4, #2]
    a66e:	ac06      	add	r4, sp, #24
    a670:	f824 6d02 	strh.w	r6, [r4, #-2]!
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    a674:	2602      	movs	r6, #2
    a676:	9602      	str	r6, [sp, #8]
    a678:	9401      	str	r4, [sp, #4]
    a67a:	9500      	str	r5, [sp, #0]
    a67c:	f7ff ffa2 	bl	a5c4 <bt_gatt_attr_read>
    a680:	e7f2      	b.n	a668 <bt_gatt_attr_read_service+0x1c>

0000a682 <bt_gatt_attr_read_ccc>:
{
    a682:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a686:	b086      	sub	sp, #24
    a688:	4607      	mov	r7, r0
    a68a:	4688      	mov	r8, r1
    a68c:	4691      	mov	r9, r2
    a68e:	469a      	mov	sl, r3
	struct _bt_gatt_ccc *ccc = attr->user_data;
    a690:	68cd      	ldr	r5, [r1, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a692:	2400      	movs	r4, #0
    a694:	686b      	ldr	r3, [r5, #4]
    a696:	429c      	cmp	r4, r3
    a698:	d20e      	bcs.n	a6b8 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a69a:	6829      	ldr	r1, [r5, #0]
    a69c:	0126      	lsls	r6, r4, #4
    a69e:	4431      	add	r1, r6
    a6a0:	3101      	adds	r1, #1
    a6a2:	4638      	mov	r0, r7
    a6a4:	f7fc fd82 	bl	71ac <bt_conn_addr_le_cmp>
    a6a8:	b108      	cbz	r0, a6ae <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    a6aa:	3401      	adds	r4, #1
    a6ac:	e7f2      	b.n	a694 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    a6ae:	682b      	ldr	r3, [r5, #0]
    a6b0:	441e      	add	r6, r3
    a6b2:	8933      	ldrh	r3, [r6, #8]
    a6b4:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (i == ccc->cfg_len) {
    a6b8:	686b      	ldr	r3, [r5, #4]
    a6ba:	429c      	cmp	r4, r3
    a6bc:	d010      	beq.n	a6e0 <bt_gatt_attr_read_ccc+0x5e>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    a6be:	2302      	movs	r3, #2
    a6c0:	9302      	str	r3, [sp, #8]
    a6c2:	f10d 0316 	add.w	r3, sp, #22
    a6c6:	9301      	str	r3, [sp, #4]
    a6c8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    a6cc:	9300      	str	r3, [sp, #0]
    a6ce:	4653      	mov	r3, sl
    a6d0:	464a      	mov	r2, r9
    a6d2:	4641      	mov	r1, r8
    a6d4:	4638      	mov	r0, r7
    a6d6:	f7ff ff75 	bl	a5c4 <bt_gatt_attr_read>
}
    a6da:	b006      	add	sp, #24
    a6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		value = 0x0000;
    a6e0:	2300      	movs	r3, #0
    a6e2:	f8ad 3016 	strh.w	r3, [sp, #22]
    a6e6:	e7ea      	b.n	a6be <bt_gatt_attr_read_ccc+0x3c>

0000a6e8 <bt_gatt_foreach_attr>:
{
    a6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a6ec:	4606      	mov	r6, r0
    a6ee:	460f      	mov	r7, r1
    a6f0:	4690      	mov	r8, r2
    a6f2:	4699      	mov	r9, r3
	return list->head;
    a6f4:	4b15      	ldr	r3, [pc, #84]	; (a74c <bt_gatt_foreach_attr+0x64>)
    a6f6:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a6f8:	b10d      	cbz	r5, a6fe <bt_gatt_foreach_attr+0x16>
    a6fa:	3d08      	subs	r5, #8
    a6fc:	e01e      	b.n	a73c <bt_gatt_foreach_attr+0x54>
    a6fe:	2500      	movs	r5, #0
    a700:	e01c      	b.n	a73c <bt_gatt_foreach_attr+0x54>
		for (i = 0; i < svc->attr_count; i++) {
    a702:	3401      	adds	r4, #1
    a704:	88ab      	ldrh	r3, [r5, #4]
    a706:	429c      	cmp	r4, r3
    a708:	da0f      	bge.n	a72a <bt_gatt_foreach_attr+0x42>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    a70a:	6828      	ldr	r0, [r5, #0]
    a70c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    a710:	0093      	lsls	r3, r2, #2
    a712:	4418      	add	r0, r3
			if (attr->handle < start_handle ||
    a714:	8a03      	ldrh	r3, [r0, #16]
    a716:	42b3      	cmp	r3, r6
    a718:	d3f3      	bcc.n	a702 <bt_gatt_foreach_attr+0x1a>
    a71a:	42bb      	cmp	r3, r7
    a71c:	d8f1      	bhi.n	a702 <bt_gatt_foreach_attr+0x1a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    a71e:	4649      	mov	r1, r9
    a720:	47c0      	blx	r8
    a722:	2800      	cmp	r0, #0
    a724:	d1ed      	bne.n	a702 <bt_gatt_foreach_attr+0x1a>
    a726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    a72a:	f115 0308 	adds.w	r3, r5, #8
    a72e:	d009      	beq.n	a744 <bt_gatt_foreach_attr+0x5c>
	return node->next;
    a730:	68aa      	ldr	r2, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a732:	b14a      	cbz	r2, a748 <bt_gatt_foreach_attr+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    a734:	b103      	cbz	r3, a738 <bt_gatt_foreach_attr+0x50>
	return node->next;
    a736:	68ab      	ldr	r3, [r5, #8]
    a738:	f1a3 0508 	sub.w	r5, r3, #8
    a73c:	2d00      	cmp	r5, #0
    a73e:	d0f2      	beq.n	a726 <bt_gatt_foreach_attr+0x3e>
    a740:	2400      	movs	r4, #0
    a742:	e7df      	b.n	a704 <bt_gatt_foreach_attr+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    a744:	461a      	mov	r2, r3
    a746:	e7f4      	b.n	a732 <bt_gatt_foreach_attr+0x4a>
    a748:	2500      	movs	r5, #0
    a74a:	e7f7      	b.n	a73c <bt_gatt_foreach_attr+0x54>
    a74c:	20000d20 	.word	0x20000d20

0000a750 <bt_gatt_attr_next>:
{
    a750:	b500      	push	{lr}
    a752:	b083      	sub	sp, #12
	struct bt_gatt_attr *next = NULL;
    a754:	ab02      	add	r3, sp, #8
    a756:	2200      	movs	r2, #0
    a758:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    a75c:	8a00      	ldrh	r0, [r0, #16]
    a75e:	3001      	adds	r0, #1
    a760:	b280      	uxth	r0, r0
    a762:	4a04      	ldr	r2, [pc, #16]	; (a774 <bt_gatt_attr_next+0x24>)
    a764:	4601      	mov	r1, r0
    a766:	f7ff ffbf 	bl	a6e8 <bt_gatt_foreach_attr>
}
    a76a:	9801      	ldr	r0, [sp, #4]
    a76c:	b003      	add	sp, #12
    a76e:	f85d fb04 	ldr.w	pc, [sp], #4
    a772:	bf00      	nop
    a774:	0000a04f 	.word	0x0000a04f

0000a778 <bt_gatt_attr_read_chrc>:
{
    a778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a77c:	b08a      	sub	sp, #40	; 0x28
    a77e:	4606      	mov	r6, r0
    a780:	460c      	mov	r4, r1
    a782:	4617      	mov	r7, r2
    a784:	4698      	mov	r8, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
    a786:	68cd      	ldr	r5, [r1, #12]
	pdu.properties = chrc->properties;
    a788:	792b      	ldrb	r3, [r5, #4]
    a78a:	f88d 3014 	strb.w	r3, [sp, #20]
	next = bt_gatt_attr_next(attr);
    a78e:	4608      	mov	r0, r1
    a790:	f7ff ffde 	bl	a750 <bt_gatt_attr_next>
	if (!next) {
    a794:	b1c0      	cbz	r0, a7c8 <bt_gatt_attr_read_chrc+0x50>
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    a796:	8a03      	ldrh	r3, [r0, #16]
    a798:	f8ad 3015 	strh.w	r3, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    a79c:	6829      	ldr	r1, [r5, #0]
    a79e:	780b      	ldrb	r3, [r1, #0]
    a7a0:	b9c3      	cbnz	r3, a7d4 <bt_gatt_attr_read_chrc+0x5c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    a7a2:	884b      	ldrh	r3, [r1, #2]
    a7a4:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    a7a8:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    a7aa:	9302      	str	r3, [sp, #8]
    a7ac:	ab05      	add	r3, sp, #20
    a7ae:	9301      	str	r3, [sp, #4]
    a7b0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    a7b4:	9300      	str	r3, [sp, #0]
    a7b6:	4643      	mov	r3, r8
    a7b8:	463a      	mov	r2, r7
    a7ba:	4621      	mov	r1, r4
    a7bc:	4630      	mov	r0, r6
    a7be:	f7ff ff01 	bl	a5c4 <bt_gatt_attr_read>
}
    a7c2:	b00a      	add	sp, #40	; 0x28
    a7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu.value_handle = 0x0000;
    a7c8:	2300      	movs	r3, #0
    a7ca:	f88d 3015 	strb.w	r3, [sp, #21]
    a7ce:	f88d 3016 	strb.w	r3, [sp, #22]
    a7d2:	e7e3      	b.n	a79c <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    a7d4:	2210      	movs	r2, #16
    a7d6:	3101      	adds	r1, #1
    a7d8:	f10d 0017 	add.w	r0, sp, #23
    a7dc:	f7f5 fd70 	bl	2c0 <memcpy>
		value_len += 16;
    a7e0:	2313      	movs	r3, #19
    a7e2:	e7e2      	b.n	a7aa <bt_gatt_attr_read_chrc+0x32>

0000a7e4 <bt_gatt_indicate>:
{
    a7e4:	b500      	push	{lr}
    a7e6:	b087      	sub	sp, #28
	if (conn) {
    a7e8:	b120      	cbz	r0, a7f4 <bt_gatt_indicate+0x10>
		return gatt_indicate(conn, params);
    a7ea:	f7ff fd39 	bl	a260 <gatt_indicate>
}
    a7ee:	b007      	add	sp, #28
    a7f0:	f85d fb04 	ldr.w	pc, [sp], #4
	nfy.err = -ENOTCONN;
    a7f4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    a7f8:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    a7fa:	2302      	movs	r3, #2
    a7fc:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.params = params;
    a800:	9105      	str	r1, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    a802:	6988      	ldr	r0, [r1, #24]
    a804:	466b      	mov	r3, sp
    a806:	4a04      	ldr	r2, [pc, #16]	; (a818 <bt_gatt_indicate+0x34>)
    a808:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a80c:	8a00      	ldrh	r0, [r0, #16]
    a80e:	f7ff ff6b 	bl	a6e8 <bt_gatt_foreach_attr>
	return nfy.err;
    a812:	9800      	ldr	r0, [sp, #0]
    a814:	e7eb      	b.n	a7ee <bt_gatt_indicate+0xa>
    a816:	bf00      	nop
    a818:	0000a319 	.word	0x0000a319

0000a81c <sc_process>:
{
    a81c:	b510      	push	{r4, lr}
    a81e:	b082      	sub	sp, #8
    a820:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    a822:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    a826:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    a82a:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    a82e:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    a832:	f1a0 012c 	sub.w	r1, r0, #44	; 0x2c
    a836:	f100 0428 	add.w	r4, r0, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a83a:	f3bf 8f5b 	dmb	ish
    a83e:	e854 2f00 	ldrex	r2, [r4]
    a842:	f022 0201 	bic.w	r2, r2, #1
    a846:	e844 2000 	strex	r0, r2, [r4]
    a84a:	2800      	cmp	r0, #0
    a84c:	d1f7      	bne.n	a83e <sc_process+0x22>
    a84e:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    a852:	2000      	movs	r0, #0
    a854:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0;
    a858:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    a85c:	4a0e      	ldr	r2, [pc, #56]	; (a898 <sc_process+0x7c>)
    a85e:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    a862:	4a0e      	ldr	r2, [pc, #56]	; (a89c <sc_process+0x80>)
    a864:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    a868:	aa01      	add	r2, sp, #4
    a86a:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    a86e:	2204      	movs	r2, #4
    a870:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    a874:	f7ff ffb6 	bl	a7e4 <bt_gatt_indicate>
    a878:	b108      	cbz	r0, a87e <sc_process+0x62>
}
    a87a:	b002      	add	sp, #8
    a87c:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a87e:	f3bf 8f5b 	dmb	ish
    a882:	e854 3f00 	ldrex	r3, [r4]
    a886:	f043 0302 	orr.w	r3, r3, #2
    a88a:	e844 3200 	strex	r2, r3, [r4]
    a88e:	2a00      	cmp	r2, #0
    a890:	d1f7      	bne.n	a882 <sc_process+0x66>
    a892:	f3bf 8f5b 	dmb	ish
    a896:	e7f0      	b.n	a87a <sc_process+0x5e>
    a898:	2000c0f8 	.word	0x2000c0f8
    a89c:	0000a095 	.word	0x0000a095

0000a8a0 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    a8a0:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    a8a2:	4603      	mov	r3, r0
    a8a4:	4a03      	ldr	r2, [pc, #12]	; (a8b4 <bt_gatt_connected+0x14>)
    a8a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a8aa:	2001      	movs	r0, #1
    a8ac:	f7ff ff1c 	bl	a6e8 <bt_gatt_foreach_attr>
    a8b0:	bd08      	pop	{r3, pc}
    a8b2:	bf00      	nop
    a8b4:	0000a415 	.word	0x0000a415

0000a8b8 <bt_gatt_disconnected>:
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    a8b8:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    a8ba:	4603      	mov	r3, r0
    a8bc:	4a03      	ldr	r2, [pc, #12]	; (a8cc <bt_gatt_disconnected+0x14>)
    a8be:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a8c2:	2001      	movs	r0, #1
    a8c4:	f7ff ff10 	bl	a6e8 <bt_gatt_foreach_attr>
    a8c8:	bd08      	pop	{r3, pc}
    a8ca:	bf00      	nop
    a8cc:	0000a479 	.word	0x0000a479

0000a8d0 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    a8d0:	4b11      	ldr	r3, [pc, #68]	; (a918 <get_io_capa+0x48>)
    a8d2:	681b      	ldr	r3, [r3, #0]
    a8d4:	b1db      	cbz	r3, a90e <get_io_capa+0x3e>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    a8d6:	681a      	ldr	r2, [r3, #0]
    a8d8:	b152      	cbz	r2, a8f0 <get_io_capa+0x20>
    a8da:	6859      	ldr	r1, [r3, #4]
    a8dc:	b141      	cbz	r1, a8f0 <get_io_capa+0x20>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    a8de:	6899      	ldr	r1, [r3, #8]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    a8e0:	b109      	cbz	r1, a8e6 <get_io_capa+0x16>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    a8e2:	2004      	movs	r0, #4
    a8e4:	4770      	bx	lr
	    (bt_auth->passkey_confirm || !sc_supported)) {
    a8e6:	490d      	ldr	r1, [pc, #52]	; (a91c <get_io_capa+0x4c>)
    a8e8:	7809      	ldrb	r1, [r1, #0]
    a8ea:	b909      	cbnz	r1, a8f0 <get_io_capa+0x20>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    a8ec:	2004      	movs	r0, #4
    a8ee:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    a8f0:	490a      	ldr	r1, [pc, #40]	; (a91c <get_io_capa+0x4c>)
    a8f2:	7809      	ldrb	r1, [r1, #0]
    a8f4:	b121      	cbz	r1, a900 <get_io_capa+0x30>
    a8f6:	b11a      	cbz	r2, a900 <get_io_capa+0x30>
	    bt_auth->passkey_confirm) {
    a8f8:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && bt_auth->passkey_display &&
    a8fa:	b109      	cbz	r1, a900 <get_io_capa+0x30>
		return BT_SMP_IO_DISPLAY_YESNO;
    a8fc:	2001      	movs	r0, #1
    a8fe:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
    a900:	685b      	ldr	r3, [r3, #4]
    a902:	b10b      	cbz	r3, a908 <get_io_capa+0x38>
		return BT_SMP_IO_KEYBOARD_ONLY;
    a904:	2002      	movs	r0, #2
    a906:	4770      	bx	lr
	}

	if (bt_auth->passkey_display) {
    a908:	b11a      	cbz	r2, a912 <get_io_capa+0x42>
		return BT_SMP_IO_DISPLAY_ONLY;
    a90a:	2000      	movs	r0, #0
    a90c:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    a90e:	2003      	movs	r0, #3
    a910:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    a912:	2003      	movs	r0, #3
}
    a914:	4770      	bx	lr
    a916:	bf00      	nop
    a918:	20002f90 	.word	0x20002f90
    a91c:	20000f88 	.word	0x20000f88

0000a920 <get_pair_method>:

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    a920:	2904      	cmp	r1, #4
    a922:	d811      	bhi.n	a948 <get_pair_method+0x28>

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a924:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    a928:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    a92c:	4313      	orrs	r3, r2
    a92e:	f013 0f04 	tst.w	r3, #4
    a932:	d00b      	beq.n	a94c <get_pair_method+0x2c>
{
    a934:	b510      	push	{r4, lr}
    a936:	460c      	mov	r4, r1
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
    a938:	f7ff ffca 	bl	a8d0 <get_io_capa>
    a93c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    a940:	4c03      	ldr	r4, [pc, #12]	; (a950 <get_pair_method+0x30>)
    a942:	4421      	add	r1, r4
    a944:	5c08      	ldrb	r0, [r1, r0]
    a946:	bd10      	pop	{r4, pc}
		return JUST_WORKS;
    a948:	2000      	movs	r0, #0
    a94a:	4770      	bx	lr
		return JUST_WORKS;
    a94c:	2000      	movs	r0, #0
    a94e:	4770      	bx	lr
    a950:	00031648 	.word	0x00031648

0000a954 <get_encryption_key_size>:
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    a954:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    a958:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
}
    a95c:	4290      	cmp	r0, r2
    a95e:	bf28      	it	cs
    a960:	4610      	movcs	r0, r2
    a962:	4770      	bx	lr

0000a964 <xor_128>:
	return 0;
}

#if !defined(CONFIG_BT_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
    a964:	b430      	push	{r4, r5}
	size_t len = 16;
    a966:	2310      	movs	r3, #16

	while (len--) {
    a968:	e007      	b.n	a97a <xor_128+0x16>
		*r++ = *p++ ^ *q++;
    a96a:	7803      	ldrb	r3, [r0, #0]
    a96c:	780d      	ldrb	r5, [r1, #0]
    a96e:	406b      	eors	r3, r5
    a970:	7013      	strb	r3, [r2, #0]
	while (len--) {
    a972:	4623      	mov	r3, r4
		*r++ = *p++ ^ *q++;
    a974:	3201      	adds	r2, #1
    a976:	3101      	adds	r1, #1
    a978:	3001      	adds	r0, #1
	while (len--) {
    a97a:	1e5c      	subs	r4, r3, #1
    a97c:	2b00      	cmp	r3, #0
    a97e:	d1f4      	bne.n	a96a <xor_128+0x6>
	}
}
    a980:	bc30      	pop	{r4, r5}
    a982:	4770      	bx	lr

0000a984 <legacy_get_pair_method>:
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    a984:	2904      	cmp	r1, #4
    a986:	d819      	bhi.n	a9bc <legacy_get_pair_method+0x38>
{
    a988:	b538      	push	{r3, r4, r5, lr}

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a98a:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    a98e:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    a992:	4313      	orrs	r3, r2
    a994:	f013 0f04 	tst.w	r3, #4
    a998:	d012      	beq.n	a9c0 <legacy_get_pair_method+0x3c>
    a99a:	460c      	mov	r4, r1
    a99c:	4605      	mov	r5, r0
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
    a99e:	f7ff ff97 	bl	a8d0 <get_io_capa>
    a9a2:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    a9a6:	4c08      	ldr	r4, [pc, #32]	; (a9c8 <legacy_get_pair_method+0x44>)
    a9a8:	4421      	add	r1, r4
    a9aa:	5c08      	ldrb	r0, [r1, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
    a9ac:	2804      	cmp	r0, #4
    a9ae:	d000      	beq.n	a9b2 <legacy_get_pair_method+0x2e>
			method = PASSKEY_INPUT;
		}
	}

	return method;
}
    a9b0:	bd38      	pop	{r3, r4, r5, pc}
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a9b2:	682b      	ldr	r3, [r5, #0]
    a9b4:	78db      	ldrb	r3, [r3, #3]
    a9b6:	b92b      	cbnz	r3, a9c4 <legacy_get_pair_method+0x40>
			method = PASSKEY_DISPLAY;
    a9b8:	2002      	movs	r0, #2
    a9ba:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    a9bc:	2000      	movs	r0, #0
    a9be:	4770      	bx	lr
		return JUST_WORKS;
    a9c0:	2000      	movs	r0, #0
    a9c2:	bd38      	pop	{r3, r4, r5, pc}
			method = PASSKEY_INPUT;
    a9c4:	2001      	movs	r0, #1
    a9c6:	e7f3      	b.n	a9b0 <legacy_get_pair_method+0x2c>
    a9c8:	0003162c 	.word	0x0003162c

0000a9cc <get_auth>:

	return 0;
}

static u8_t get_auth(u8_t auth)
{
    a9cc:	b510      	push	{r4, lr}
	if (sc_supported) {
    a9ce:	4b09      	ldr	r3, [pc, #36]	; (a9f4 <get_auth+0x28>)
    a9d0:	781b      	ldrb	r3, [r3, #0]
    a9d2:	b143      	cbz	r3, a9e6 <get_auth+0x1a>
		auth &= BT_SMP_AUTH_MASK_SC;
    a9d4:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    a9d8:	f7ff ff7a 	bl	a8d0 <get_io_capa>
    a9dc:	2803      	cmp	r0, #3
    a9de:	d005      	beq.n	a9ec <get_auth+0x20>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    a9e0:	f044 0004 	orr.w	r0, r4, #4
	}

	return auth;
}
    a9e4:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    a9e6:	f000 0407 	and.w	r4, r0, #7
    a9ea:	e7f5      	b.n	a9d8 <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
    a9ec:	f004 000b 	and.w	r0, r4, #11
    a9f0:	bd10      	pop	{r4, pc}
    a9f2:	bf00      	nop
    a9f4:	20000f88 	.word	0x20000f88

0000a9f8 <sec_level_reachable>:

static bool sec_level_reachable(struct bt_conn *conn)
{
    a9f8:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    a9fa:	7a43      	ldrb	r3, [r0, #9]
    a9fc:	3b01      	subs	r3, #1
    a9fe:	2b03      	cmp	r3, #3
    aa00:	d818      	bhi.n	aa34 <sec_level_reachable+0x3c>
    aa02:	e8df f003 	tbb	[pc, r3]
    aa06:	0202      	.short	0x0202
    aa08:	0a04      	.short	0x0a04
	case BT_SECURITY_LOW:
	case BT_SECURITY_MEDIUM:
		return true;
    aa0a:	2001      	movs	r0, #1
    aa0c:	bd08      	pop	{r3, pc}
	case BT_SECURITY_HIGH:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    aa0e:	f7ff ff5f 	bl	a8d0 <get_io_capa>
    aa12:	3803      	subs	r0, #3
    aa14:	bf18      	it	ne
    aa16:	2001      	movne	r0, #1
    aa18:	bd08      	pop	{r3, pc}
	case BT_SECURITY_FIPS:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    aa1a:	f7ff ff59 	bl	a8d0 <get_io_capa>
    aa1e:	2803      	cmp	r0, #3
    aa20:	d004      	beq.n	aa2c <sec_level_reachable+0x34>
    aa22:	4b05      	ldr	r3, [pc, #20]	; (aa38 <sec_level_reachable+0x40>)
    aa24:	781b      	ldrb	r3, [r3, #0]
    aa26:	b91b      	cbnz	r3, aa30 <sec_level_reachable+0x38>
    aa28:	2000      	movs	r0, #0
    aa2a:	bd08      	pop	{r3, pc}
    aa2c:	2000      	movs	r0, #0
    aa2e:	bd08      	pop	{r3, pc}
    aa30:	2001      	movs	r0, #1
    aa32:	bd08      	pop	{r3, pc}
		       sc_supported;
	default:
		return false;
    aa34:	2000      	movs	r0, #0
	}
}
    aa36:	bd08      	pop	{r3, pc}
    aa38:	20000f88 	.word	0x20000f88

0000aa3c <bt_smp_accept>:
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    aa3c:	2000      	movs	r0, #0
    aa3e:	b110      	cbz	r0, aa46 <bt_smp_accept+0xa>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    aa40:	f06f 000b 	mvn.w	r0, #11
}
    aa44:	4770      	bx	lr
		if (smp->chan.chan.conn) {
    aa46:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    aa4a:	fb03 f300 	mul.w	r3, r3, r0
    aa4e:	4a07      	ldr	r2, [pc, #28]	; (aa6c <bt_smp_accept+0x30>)
    aa50:	58d3      	ldr	r3, [r2, r3]
    aa52:	b10b      	cbz	r3, aa58 <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    aa54:	3001      	adds	r0, #1
    aa56:	e7f2      	b.n	aa3e <bt_smp_accept+0x2>
		smp->chan.chan.ops = &ops;
    aa58:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    aa5c:	4a03      	ldr	r2, [pc, #12]	; (aa6c <bt_smp_accept+0x30>)
    aa5e:	fb03 2300 	mla	r3, r3, r0, r2
    aa62:	4a03      	ldr	r2, [pc, #12]	; (aa70 <bt_smp_accept+0x34>)
    aa64:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
    aa66:	600b      	str	r3, [r1, #0]
		return 0;
    aa68:	4770      	bx	lr
    aa6a:	bf00      	nop
    aa6c:	20000da0 	.word	0x20000da0
    aa70:	2000c138 	.word	0x2000c138

0000aa74 <le_sc_supported>:
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    aa74:	4b04      	ldr	r3, [pc, #16]	; (aa88 <le_sc_supported+0x14>)
    aa76:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    aa7a:	f000 0006 	and.w	r0, r0, #6
	       (bt_dev.supported_commands[34] & 0x04);
}
    aa7e:	2806      	cmp	r0, #6
    aa80:	bf14      	ite	ne
    aa82:	2000      	movne	r0, #0
    aa84:	2001      	moveq	r0, #1
    aa86:	4770      	bx	lr
    aa88:	2000be68 	.word	0x2000be68

0000aa8c <smp_chan_get>:
{
    aa8c:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    aa8e:	2106      	movs	r1, #6
    aa90:	f7fd fd18 	bl	84c4 <bt_l2cap_le_lookup_rx_cid>
}
    aa94:	bd08      	pop	{r3, pc}

0000aa96 <smp_create_pdu>:
{
    aa96:	b538      	push	{r3, r4, r5, lr}
    aa98:	460d      	mov	r5, r1
	buf = bt_l2cap_create_pdu(NULL, 0);
    aa9a:	2100      	movs	r1, #0
    aa9c:	4608      	mov	r0, r1
    aa9e:	f7fd fa58 	bl	7f52 <bt_l2cap_create_pdu>
    aaa2:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    aaa4:	2101      	movs	r1, #1
    aaa6:	3008      	adds	r0, #8
    aaa8:	f010 f954 	bl	1ad54 <net_buf_simple_add>
	hdr->code = op;
    aaac:	7005      	strb	r5, [r0, #0]
}
    aaae:	4620      	mov	r0, r4
    aab0:	bd38      	pop	{r3, r4, r5, pc}

0000aab2 <smp_init>:
{
    aab2:	b510      	push	{r4, lr}
    aab4:	4604      	mov	r4, r0
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    aab6:	22e0      	movs	r2, #224	; 0xe0
    aab8:	2100      	movs	r1, #0
    aaba:	309c      	adds	r0, #156	; 0x9c
    aabc:	f01f fefc 	bl	2a8b8 <memset>
	if (bt_rand(smp->prnd, 16)) {
    aac0:	2110      	movs	r1, #16
    aac2:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    aac6:	f006 fdcf 	bl	11668 <bt_rand>
    aaca:	b110      	cbz	r0, aad2 <smp_init+0x20>
		return BT_SMP_ERR_UNSPECIFIED;
    aacc:	2308      	movs	r3, #8
}
    aace:	4618      	mov	r0, r3
    aad0:	bd10      	pop	{r4, pc}
    aad2:	4603      	mov	r3, r0
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    aad4:	349c      	adds	r4, #156	; 0x9c
    aad6:	f3bf 8f5b 	dmb	ish
    aada:	e854 2f00 	ldrex	r2, [r4]
    aade:	f042 0220 	orr.w	r2, r2, #32
    aae2:	e844 2100 	strex	r1, r2, [r4]
    aae6:	2900      	cmp	r1, #0
    aae8:	d1f7      	bne.n	aada <smp_init+0x28>
    aaea:	f3bf 8f5b 	dmb	ish
	return 0;
    aaee:	e7ee      	b.n	aace <smp_init+0x1c>

0000aaf0 <display_passkey>:
{
    aaf0:	b538      	push	{r3, r4, r5, lr}
    aaf2:	4604      	mov	r4, r0
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    aaf4:	2104      	movs	r1, #4
    aaf6:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    aafa:	f006 fdb5 	bl	11668 <bt_rand>
    aafe:	b108      	cbz	r0, ab04 <display_passkey+0x14>
		return BT_SMP_ERR_UNSPECIFIED;
    ab00:	2008      	movs	r0, #8
}
    ab02:	bd38      	pop	{r3, r4, r5, pc}
	smp->passkey %= 1000000;
    ab04:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
    ab08:	4909      	ldr	r1, [pc, #36]	; (ab30 <display_passkey+0x40>)
    ab0a:	fba1 2103 	umull	r2, r1, r1, r3
    ab0e:	0c89      	lsrs	r1, r1, #18
    ab10:	4a08      	ldr	r2, [pc, #32]	; (ab34 <display_passkey+0x44>)
    ab12:	fb02 3111 	mls	r1, r2, r1, r3
    ab16:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
	smp->passkey_round = 0;
    ab1a:	2500      	movs	r5, #0
    ab1c:	f884 5178 	strb.w	r5, [r4, #376]	; 0x178
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    ab20:	4b05      	ldr	r3, [pc, #20]	; (ab38 <display_passkey+0x48>)
    ab22:	681b      	ldr	r3, [r3, #0]
    ab24:	681b      	ldr	r3, [r3, #0]
    ab26:	6820      	ldr	r0, [r4, #0]
    ab28:	4798      	blx	r3
	return 0;
    ab2a:	4628      	mov	r0, r5
    ab2c:	bd38      	pop	{r3, r4, r5, pc}
    ab2e:	bf00      	nop
    ab30:	431bde83 	.word	0x431bde83
    ab34:	000f4240 	.word	0x000f4240
    ab38:	20002f90 	.word	0x20002f90

0000ab3c <smp_send>:
{
    ab3c:	b510      	push	{r4, lr}
    ab3e:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    ab40:	4613      	mov	r3, r2
    ab42:	460a      	mov	r2, r1
    ab44:	2106      	movs	r1, #6
    ab46:	6800      	ldr	r0, [r0, #0]
    ab48:	f7fd fa9b 	bl	8082 <bt_l2cap_send_cb>
    ab4c:	f247 5230 	movw	r2, #30000	; 0x7530
    ab50:	f504 71be 	add.w	r1, r4, #380	; 0x17c
    ab54:	4801      	ldr	r0, [pc, #4]	; (ab5c <smp_send+0x20>)
    ab56:	f01f fa45 	bl	29fe4 <k_delayed_work_submit_to_queue>
    ab5a:	bd10      	pop	{r4, pc}
    ab5c:	20003158 	.word	0x20003158

0000ab60 <sc_smp_send_dhkey_check>:
{
    ab60:	b570      	push	{r4, r5, r6, lr}
    ab62:	4604      	mov	r4, r0
    ab64:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    ab66:	2210      	movs	r2, #16
    ab68:	210d      	movs	r1, #13
    ab6a:	6800      	ldr	r0, [r0, #0]
    ab6c:	f7ff ff93 	bl	aa96 <smp_create_pdu>
	if (!buf) {
    ab70:	b178      	cbz	r0, ab92 <sc_smp_send_dhkey_check+0x32>
    ab72:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    ab74:	2110      	movs	r1, #16
    ab76:	3008      	adds	r0, #8
    ab78:	f010 f8ec 	bl	1ad54 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    ab7c:	2210      	movs	r2, #16
    ab7e:	4631      	mov	r1, r6
    ab80:	f7f5 fb9e 	bl	2c0 <memcpy>
	smp_send(smp, buf, NULL);
    ab84:	2200      	movs	r2, #0
    ab86:	4629      	mov	r1, r5
    ab88:	4620      	mov	r0, r4
    ab8a:	f7ff ffd7 	bl	ab3c <smp_send>
	return 0;
    ab8e:	2000      	movs	r0, #0
    ab90:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ab92:	2008      	movs	r0, #8
}
    ab94:	bd70      	pop	{r4, r5, r6, pc}
	...

0000ab98 <sc_send_public_key>:
{
    ab98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab9a:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    ab9c:	2240      	movs	r2, #64	; 0x40
    ab9e:	210c      	movs	r1, #12
    aba0:	6800      	ldr	r0, [r0, #0]
    aba2:	f7ff ff78 	bl	aa96 <smp_create_pdu>
	if (!req_buf) {
    aba6:	b1b0      	cbz	r0, abd6 <sc_send_public_key+0x3e>
    aba8:	4605      	mov	r5, r0
	req = net_buf_add(req_buf, sizeof(*req));
    abaa:	2140      	movs	r1, #64	; 0x40
    abac:	3008      	adds	r0, #8
    abae:	f010 f8d1 	bl	1ad54 <net_buf_simple_add>
    abb2:	4607      	mov	r7, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    abb4:	4e09      	ldr	r6, [pc, #36]	; (abdc <sc_send_public_key+0x44>)
    abb6:	2220      	movs	r2, #32
    abb8:	4631      	mov	r1, r6
    abba:	f7f5 fb81 	bl	2c0 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    abbe:	2220      	movs	r2, #32
    abc0:	18b1      	adds	r1, r6, r2
    abc2:	18b8      	adds	r0, r7, r2
    abc4:	f7f5 fb7c 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    abc8:	2200      	movs	r2, #0
    abca:	4629      	mov	r1, r5
    abcc:	4620      	mov	r0, r4
    abce:	f7ff ffb5 	bl	ab3c <smp_send>
	return 0;
    abd2:	2000      	movs	r0, #0
    abd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    abd6:	2008      	movs	r0, #8
}
    abd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    abda:	bf00      	nop
    abdc:	20000f48 	.word	0x20000f48

0000abe0 <send_pairing_rsp>:
{
    abe0:	b538      	push	{r3, r4, r5, lr}
    abe2:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    abe4:	2206      	movs	r2, #6
    abe6:	2102      	movs	r1, #2
    abe8:	6800      	ldr	r0, [r0, #0]
    abea:	f7ff ff54 	bl	aa96 <smp_create_pdu>
	if (!rsp_buf) {
    abee:	b180      	cbz	r0, ac12 <send_pairing_rsp+0x32>
    abf0:	4605      	mov	r5, r0
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    abf2:	2106      	movs	r1, #6
    abf4:	3008      	adds	r0, #8
    abf6:	f010 f8ad 	bl	1ad54 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    abfa:	2206      	movs	r2, #6
    abfc:	f104 01ad 	add.w	r1, r4, #173	; 0xad
    ac00:	f7f5 fb5e 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    ac04:	2200      	movs	r2, #0
    ac06:	4629      	mov	r1, r5
    ac08:	4620      	mov	r0, r4
    ac0a:	f7ff ff97 	bl	ab3c <smp_send>
	return 0;
    ac0e:	2000      	movs	r0, #0
    ac10:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ac12:	2008      	movs	r0, #8
}
    ac14:	bd38      	pop	{r3, r4, r5, pc}

0000ac16 <smp_send_pairing_random>:
{
    ac16:	b538      	push	{r3, r4, r5, lr}
    ac18:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    ac1a:	2210      	movs	r2, #16
    ac1c:	2104      	movs	r1, #4
    ac1e:	6800      	ldr	r0, [r0, #0]
    ac20:	f7ff ff39 	bl	aa96 <smp_create_pdu>
	if (!rsp_buf) {
    ac24:	b180      	cbz	r0, ac48 <smp_send_pairing_random+0x32>
    ac26:	4605      	mov	r5, r0
	req = net_buf_add(rsp_buf, sizeof(*req));
    ac28:	2110      	movs	r1, #16
    ac2a:	3008      	adds	r0, #8
    ac2c:	f010 f892 	bl	1ad54 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    ac30:	2210      	movs	r2, #16
    ac32:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    ac36:	f7f5 fb43 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    ac3a:	2200      	movs	r2, #0
    ac3c:	4629      	mov	r1, r5
    ac3e:	4620      	mov	r0, r4
    ac40:	f7ff ff7c 	bl	ab3c <smp_send>
	return 0;
    ac44:	2000      	movs	r0, #0
    ac46:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ac48:	2008      	movs	r0, #8
}
    ac4a:	bd38      	pop	{r3, r4, r5, pc}

0000ac4c <bt_smp_aes_cmac>:
{
    ac4c:	b570      	push	{r4, r5, r6, lr}
    ac4e:	b0c2      	sub	sp, #264	; 0x108
    ac50:	460c      	mov	r4, r1
    ac52:	4615      	mov	r5, r2
    ac54:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    ac56:	aa16      	add	r2, sp, #88	; 0x58
    ac58:	4601      	mov	r1, r0
    ac5a:	4668      	mov	r0, sp
    ac5c:	f7f8 fdcb 	bl	37f6 <tc_cmac_setup>
    ac60:	b180      	cbz	r0, ac84 <bt_smp_aes_cmac+0x38>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    ac62:	462a      	mov	r2, r5
    ac64:	4621      	mov	r1, r4
    ac66:	4668      	mov	r0, sp
    ac68:	f7f8 fdf2 	bl	3850 <tc_cmac_update>
    ac6c:	b168      	cbz	r0, ac8a <bt_smp_aes_cmac+0x3e>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    ac6e:	4669      	mov	r1, sp
    ac70:	4630      	mov	r0, r6
    ac72:	f7f8 fe57 	bl	3924 <tc_cmac_final>
    ac76:	b110      	cbz	r0, ac7e <bt_smp_aes_cmac+0x32>
	return 0;
    ac78:	2000      	movs	r0, #0
}
    ac7a:	b042      	add	sp, #264	; 0x108
    ac7c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    ac7e:	f06f 0004 	mvn.w	r0, #4
    ac82:	e7fa      	b.n	ac7a <bt_smp_aes_cmac+0x2e>
		return -EIO;
    ac84:	f06f 0004 	mvn.w	r0, #4
    ac88:	e7f7      	b.n	ac7a <bt_smp_aes_cmac+0x2e>
		return -EIO;
    ac8a:	f06f 0004 	mvn.w	r0, #4
    ac8e:	e7f4      	b.n	ac7a <bt_smp_aes_cmac+0x2e>

0000ac90 <smp_sign_buf>:
{
    ac90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ac94:	b08b      	sub	sp, #44	; 0x2c
    ac96:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    ac98:	188f      	adds	r7, r1, r2
    ac9a:	683b      	ldr	r3, [r7, #0]
    ac9c:	9309      	str	r3, [sp, #36]	; 0x24
	sys_mem_swap(m, len + sizeof(cnt));
    ac9e:	1d16      	adds	r6, r2, #4
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    aca0:	2300      	movs	r3, #0
    aca2:	e006      	b.n	acb2 <smp_sign_buf+0x22>
		u8_t tmp = ((u8_t *)buf)[i];
    aca4:	5cea      	ldrb	r2, [r5, r3]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    aca6:	1af1      	subs	r1, r6, r3
    aca8:	3901      	subs	r1, #1
    acaa:	5c6c      	ldrb	r4, [r5, r1]
    acac:	54ec      	strb	r4, [r5, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    acae:	546a      	strb	r2, [r5, r1]
	for (i = 0; i < (length/2); i++) {
    acb0:	3301      	adds	r3, #1
    acb2:	ea4f 0856 	mov.w	r8, r6, lsr #1
    acb6:	4543      	cmp	r3, r8
    acb8:	d3f4      	bcc.n	aca4 <smp_sign_buf+0x14>
	src += length - 1;
    acba:	300f      	adds	r0, #15
    acbc:	2410      	movs	r4, #16
    acbe:	ab05      	add	r3, sp, #20
    acc0:	e004      	b.n	accc <smp_sign_buf+0x3c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    acc2:	7802      	ldrb	r2, [r0, #0]
    acc4:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    acc6:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    acc8:	3801      	subs	r0, #1
    acca:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    accc:	2c00      	cmp	r4, #0
    acce:	d1f8      	bne.n	acc2 <smp_sign_buf+0x32>
	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    acd0:	ab01      	add	r3, sp, #4
    acd2:	4632      	mov	r2, r6
    acd4:	4629      	mov	r1, r5
    acd6:	a805      	add	r0, sp, #20
    acd8:	f7ff ffb8 	bl	ac4c <bt_smp_aes_cmac>
	if (err) {
    acdc:	4681      	mov	r9, r0
    acde:	bb08      	cbnz	r0, ad24 <smp_sign_buf+0x94>
    ace0:	4623      	mov	r3, r4
    ace2:	e009      	b.n	acf8 <smp_sign_buf+0x68>
		u8_t tmp = ((u8_t *)buf)[i];
    ace4:	aa01      	add	r2, sp, #4
    ace6:	5cd0      	ldrb	r0, [r2, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ace8:	f1c3 010f 	rsb	r1, r3, #15
    acec:	f812 e001 	ldrb.w	lr, [r2, r1]
    acf0:	f802 e003 	strb.w	lr, [r2, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    acf4:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
    acf6:	3301      	adds	r3, #1
    acf8:	2b07      	cmp	r3, #7
    acfa:	d9f3      	bls.n	ace4 <smp_sign_buf+0x54>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    acfc:	2204      	movs	r2, #4
    acfe:	a909      	add	r1, sp, #36	; 0x24
    ad00:	a802      	add	r0, sp, #8
    ad02:	f7f5 fadd 	bl	2c0 <memcpy>
    ad06:	e006      	b.n	ad16 <smp_sign_buf+0x86>
		u8_t tmp = ((u8_t *)buf)[i];
    ad08:	5d2a      	ldrb	r2, [r5, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ad0a:	1b33      	subs	r3, r6, r4
    ad0c:	3b01      	subs	r3, #1
    ad0e:	5ce9      	ldrb	r1, [r5, r3]
    ad10:	5529      	strb	r1, [r5, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    ad12:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
    ad14:	3401      	adds	r4, #1
    ad16:	45a0      	cmp	r8, r4
    ad18:	d8f6      	bhi.n	ad08 <smp_sign_buf+0x78>
	memcpy(sig, tmp + 4, 12);
    ad1a:	220c      	movs	r2, #12
    ad1c:	a902      	add	r1, sp, #8
    ad1e:	4638      	mov	r0, r7
    ad20:	f7f5 face 	bl	2c0 <memcpy>
}
    ad24:	4648      	mov	r0, r9
    ad26:	b00b      	add	sp, #44	; 0x2c
    ad28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000ad2c <smp_f4>:
{
    ad2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad2e:	b097      	sub	sp, #92	; 0x5c
    ad30:	9e1c      	ldr	r6, [sp, #112]	; 0x70
	src += length - 1;
    ad32:	301f      	adds	r0, #31
    ad34:	2420      	movs	r4, #32
    ad36:	ad01      	add	r5, sp, #4
    ad38:	e004      	b.n	ad44 <smp_f4+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad3a:	7807      	ldrb	r7, [r0, #0]
    ad3c:	702f      	strb	r7, [r5, #0]
	for (; length > 0; length--) {
    ad3e:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad40:	3801      	subs	r0, #1
    ad42:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    ad44:	2c00      	cmp	r4, #0
    ad46:	d1f8      	bne.n	ad3a <smp_f4+0xe>
	src += length - 1;
    ad48:	311f      	adds	r1, #31
    ad4a:	2020      	movs	r0, #32
    ad4c:	ac09      	add	r4, sp, #36	; 0x24
    ad4e:	e004      	b.n	ad5a <smp_f4+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad50:	780d      	ldrb	r5, [r1, #0]
    ad52:	7025      	strb	r5, [r4, #0]
	for (; length > 0; length--) {
    ad54:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad56:	3901      	subs	r1, #1
    ad58:	3401      	adds	r4, #1
	for (; length > 0; length--) {
    ad5a:	2800      	cmp	r0, #0
    ad5c:	d1f8      	bne.n	ad50 <smp_f4+0x24>
	m[64] = z;
    ad5e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	src += length - 1;
    ad62:	320f      	adds	r2, #15
    ad64:	2410      	movs	r4, #16
    ad66:	ab12      	add	r3, sp, #72	; 0x48
    ad68:	e004      	b.n	ad74 <smp_f4+0x48>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad6a:	7811      	ldrb	r1, [r2, #0]
    ad6c:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
    ad6e:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad70:	3a01      	subs	r2, #1
    ad72:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    ad74:	2c00      	cmp	r4, #0
    ad76:	d1f8      	bne.n	ad6a <smp_f4+0x3e>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    ad78:	4633      	mov	r3, r6
    ad7a:	2241      	movs	r2, #65	; 0x41
    ad7c:	a901      	add	r1, sp, #4
    ad7e:	a812      	add	r0, sp, #72	; 0x48
    ad80:	f7ff ff64 	bl	ac4c <bt_smp_aes_cmac>
	if (err) {
    ad84:	4605      	mov	r5, r0
    ad86:	b138      	cbz	r0, ad98 <smp_f4+0x6c>
    ad88:	e008      	b.n	ad9c <smp_f4+0x70>
		u8_t tmp = ((u8_t *)buf)[i];
    ad8a:	5d32      	ldrb	r2, [r6, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ad8c:	f1c4 030f 	rsb	r3, r4, #15
    ad90:	5cf1      	ldrb	r1, [r6, r3]
    ad92:	5531      	strb	r1, [r6, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    ad94:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < (length/2); i++) {
    ad96:	3401      	adds	r4, #1
    ad98:	2c07      	cmp	r4, #7
    ad9a:	d9f6      	bls.n	ad8a <smp_f4+0x5e>
}
    ad9c:	4628      	mov	r0, r5
    ad9e:	b017      	add	sp, #92	; 0x5c
    ada0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000ada4 <sc_smp_check_confirm>:
	switch (smp->method) {
    ada4:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    ada8:	2b03      	cmp	r3, #3
    adaa:	d827      	bhi.n	adfc <sc_smp_check_confirm+0x58>
    adac:	e8df f003 	tbb	[pc, r3]
    adb0:	0d02020d 	.word	0x0d02020d
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    adb4:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
    adb8:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
    adbc:	40d3      	lsrs	r3, r2
    adbe:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    adc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    adc6:	b2db      	uxtb	r3, r3
		break;
    adc8:	e000      	b.n	adcc <sc_smp_check_confirm+0x28>
		r = 0;
    adca:	2300      	movs	r3, #0
{
    adcc:	b510      	push	{r4, lr}
    adce:	b086      	sub	sp, #24
    add0:	4604      	mov	r4, r0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    add2:	aa02      	add	r2, sp, #8
    add4:	9200      	str	r2, [sp, #0]
    add6:	f100 02d3 	add.w	r2, r0, #211	; 0xd3
    adda:	490a      	ldr	r1, [pc, #40]	; (ae04 <sc_smp_check_confirm+0x60>)
    addc:	30f3      	adds	r0, #243	; 0xf3
    adde:	f7ff ffa5 	bl	ad2c <smp_f4>
    ade2:	b110      	cbz	r0, adea <sc_smp_check_confirm+0x46>
		return BT_SMP_ERR_UNSPECIFIED;
    ade4:	2008      	movs	r0, #8
}
    ade6:	b006      	add	sp, #24
    ade8:	bd10      	pop	{r4, pc}
	if (memcmp(smp->pcnf, cfm, 16)) {
    adea:	2210      	movs	r2, #16
    adec:	a902      	add	r1, sp, #8
    adee:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    adf2:	f01f fccd 	bl	2a790 <memcmp>
    adf6:	b118      	cbz	r0, ae00 <sc_smp_check_confirm+0x5c>
		return BT_SMP_ERR_CONFIRM_FAILED;
    adf8:	2004      	movs	r0, #4
    adfa:	e7f4      	b.n	ade6 <sc_smp_check_confirm+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    adfc:	2008      	movs	r0, #8
    adfe:	4770      	bx	lr
	return 0;
    ae00:	2000      	movs	r0, #0
    ae02:	e7f0      	b.n	ade6 <sc_smp_check_confirm+0x42>
    ae04:	20000f48 	.word	0x20000f48

0000ae08 <smp_f5>:
{
    ae08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ae0c:	b09b      	sub	sp, #108	; 0x6c
    ae0e:	4604      	mov	r4, r0
    ae10:	460e      	mov	r6, r1
    ae12:	4615      	mov	r5, r2
    ae14:	461f      	mov	r7, r3
    ae16:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    ae1a:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	u8_t m[53] = { 0x00, /* counter */
    ae1e:	2235      	movs	r2, #53	; 0x35
    ae20:	2100      	movs	r1, #0
    ae22:	a80c      	add	r0, sp, #48	; 0x30
    ae24:	f01f fd48 	bl	2a8b8 <memset>
    ae28:	2362      	movs	r3, #98	; 0x62
    ae2a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    ae2e:	2374      	movs	r3, #116	; 0x74
    ae30:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    ae34:	236c      	movs	r3, #108	; 0x6c
    ae36:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    ae3a:	2365      	movs	r3, #101	; 0x65
    ae3c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    ae40:	2301      	movs	r3, #1
    ae42:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
	src += length - 1;
    ae46:	f104 001f 	add.w	r0, r4, #31
    ae4a:	2320      	movs	r3, #32
    ae4c:	466a      	mov	r2, sp
    ae4e:	e004      	b.n	ae5a <smp_f5+0x52>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae50:	7801      	ldrb	r1, [r0, #0]
    ae52:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    ae54:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae56:	3801      	subs	r0, #1
    ae58:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    ae5a:	2b00      	cmp	r3, #0
    ae5c:	d1f8      	bne.n	ae50 <smp_f5+0x48>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    ae5e:	ab08      	add	r3, sp, #32
    ae60:	2220      	movs	r2, #32
    ae62:	4669      	mov	r1, sp
    ae64:	4838      	ldr	r0, [pc, #224]	; (af48 <smp_f5+0x140>)
    ae66:	f7ff fef1 	bl	ac4c <bt_smp_aes_cmac>
	if (err) {
    ae6a:	4686      	mov	lr, r0
    ae6c:	2800      	cmp	r0, #0
    ae6e:	d166      	bne.n	af3e <smp_f5+0x136>
	src += length - 1;
    ae70:	360f      	adds	r6, #15
    ae72:	2310      	movs	r3, #16
    ae74:	f10d 0235 	add.w	r2, sp, #53	; 0x35
    ae78:	e004      	b.n	ae84 <smp_f5+0x7c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae7a:	7831      	ldrb	r1, [r6, #0]
    ae7c:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    ae7e:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae80:	3e01      	subs	r6, #1
    ae82:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    ae84:	2b00      	cmp	r3, #0
    ae86:	d1f8      	bne.n	ae7a <smp_f5+0x72>
	src += length - 1;
    ae88:	350f      	adds	r5, #15
    ae8a:	2310      	movs	r3, #16
    ae8c:	f10d 0245 	add.w	r2, sp, #69	; 0x45
    ae90:	e004      	b.n	ae9c <smp_f5+0x94>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae92:	7829      	ldrb	r1, [r5, #0]
    ae94:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    ae96:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae98:	3d01      	subs	r5, #1
    ae9a:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    ae9c:	2b00      	cmp	r3, #0
    ae9e:	d1f8      	bne.n	ae92 <smp_f5+0x8a>
	m[37] = a1->type;
    aea0:	f817 3b06 	ldrb.w	r3, [r7], #6
    aea4:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	src += length - 1;
    aea8:	2306      	movs	r3, #6
    aeaa:	f10d 0256 	add.w	r2, sp, #86	; 0x56
    aeae:	e004      	b.n	aeba <smp_f5+0xb2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    aeb0:	7839      	ldrb	r1, [r7, #0]
    aeb2:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    aeb4:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    aeb6:	3f01      	subs	r7, #1
    aeb8:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    aeba:	2b00      	cmp	r3, #0
    aebc:	d1f8      	bne.n	aeb0 <smp_f5+0xa8>
	m[44] = a2->type;
    aebe:	9b22      	ldr	r3, [sp, #136]	; 0x88
    aec0:	f813 2b06 	ldrb.w	r2, [r3], #6
    aec4:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
	src += length - 1;
    aec8:	2406      	movs	r4, #6
    aeca:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
    aece:	e004      	b.n	aeda <smp_f5+0xd2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    aed0:	7819      	ldrb	r1, [r3, #0]
    aed2:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    aed4:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    aed6:	3b01      	subs	r3, #1
    aed8:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    aeda:	2c00      	cmp	r4, #0
    aedc:	d1f8      	bne.n	aed0 <smp_f5+0xc8>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    aede:	4643      	mov	r3, r8
    aee0:	2235      	movs	r2, #53	; 0x35
    aee2:	a90c      	add	r1, sp, #48	; 0x30
    aee4:	a808      	add	r0, sp, #32
    aee6:	f7ff feb1 	bl	ac4c <bt_smp_aes_cmac>
	if (err) {
    aeea:	4686      	mov	lr, r0
    aeec:	bb38      	cbnz	r0, af3e <smp_f5+0x136>
    aeee:	4623      	mov	r3, r4
    aef0:	e00a      	b.n	af08 <smp_f5+0x100>
		u8_t tmp = ((u8_t *)buf)[i];
    aef2:	f818 1003 	ldrb.w	r1, [r8, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    aef6:	f1c3 020f 	rsb	r2, r3, #15
    aefa:	f818 0002 	ldrb.w	r0, [r8, r2]
    aefe:	f808 0003 	strb.w	r0, [r8, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    af02:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
    af06:	3301      	adds	r3, #1
    af08:	2b07      	cmp	r3, #7
    af0a:	d9f2      	bls.n	aef2 <smp_f5+0xea>
	m[0] = 0x01;
    af0c:	a91a      	add	r1, sp, #104	; 0x68
    af0e:	2301      	movs	r3, #1
    af10:	f801 3d38 	strb.w	r3, [r1, #-56]!
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    af14:	464b      	mov	r3, r9
    af16:	2235      	movs	r2, #53	; 0x35
    af18:	a808      	add	r0, sp, #32
    af1a:	f7ff fe97 	bl	ac4c <bt_smp_aes_cmac>
	if (err) {
    af1e:	4686      	mov	lr, r0
    af20:	b158      	cbz	r0, af3a <smp_f5+0x132>
    af22:	e00c      	b.n	af3e <smp_f5+0x136>
		u8_t tmp = ((u8_t *)buf)[i];
    af24:	f819 2004 	ldrb.w	r2, [r9, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    af28:	f1c4 030f 	rsb	r3, r4, #15
    af2c:	f819 1003 	ldrb.w	r1, [r9, r3]
    af30:	f809 1004 	strb.w	r1, [r9, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    af34:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
    af38:	3401      	adds	r4, #1
    af3a:	2c07      	cmp	r4, #7
    af3c:	d9f2      	bls.n	af24 <smp_f5+0x11c>
}
    af3e:	4670      	mov	r0, lr
    af40:	b01b      	add	sp, #108	; 0x6c
    af42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    af46:	bf00      	nop
    af48:	00031664 	.word	0x00031664

0000af4c <smp_f6>:
{
    af4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    af4e:	b097      	sub	sp, #92	; 0x5c
    af50:	4604      	mov	r4, r0
    af52:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    af54:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    af56:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	src += length - 1;
    af58:	310f      	adds	r1, #15
    af5a:	2010      	movs	r0, #16
    af5c:	f10d 0e04 	add.w	lr, sp, #4
    af60:	e007      	b.n	af72 <smp_f6+0x26>
		*((u8_t *)dst++) = *((u8_t *)src--);
    af62:	f891 c000 	ldrb.w	ip, [r1]
    af66:	f88e c000 	strb.w	ip, [lr]
	for (; length > 0; length--) {
    af6a:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    af6c:	3901      	subs	r1, #1
    af6e:	f10e 0e01 	add.w	lr, lr, #1
	for (; length > 0; length--) {
    af72:	2800      	cmp	r0, #0
    af74:	d1f5      	bne.n	af62 <smp_f6+0x16>
	src += length - 1;
    af76:	320f      	adds	r2, #15
    af78:	2110      	movs	r1, #16
    af7a:	a805      	add	r0, sp, #20
    af7c:	e006      	b.n	af8c <smp_f6+0x40>
		*((u8_t *)dst++) = *((u8_t *)src--);
    af7e:	f892 e000 	ldrb.w	lr, [r2]
    af82:	f880 e000 	strb.w	lr, [r0]
	for (; length > 0; length--) {
    af86:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    af88:	3a01      	subs	r2, #1
    af8a:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    af8c:	2900      	cmp	r1, #0
    af8e:	d1f6      	bne.n	af7e <smp_f6+0x32>
	src += length - 1;
    af90:	330f      	adds	r3, #15
    af92:	2210      	movs	r2, #16
    af94:	a909      	add	r1, sp, #36	; 0x24
    af96:	e004      	b.n	afa2 <smp_f6+0x56>
		*((u8_t *)dst++) = *((u8_t *)src--);
    af98:	7818      	ldrb	r0, [r3, #0]
    af9a:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    af9c:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    af9e:	3b01      	subs	r3, #1
    afa0:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    afa2:	2a00      	cmp	r2, #0
    afa4:	d1f8      	bne.n	af98 <smp_f6+0x4c>
	src += length - 1;
    afa6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    afa8:	3302      	adds	r3, #2
    afaa:	2203      	movs	r2, #3
    afac:	a90d      	add	r1, sp, #52	; 0x34
    afae:	e004      	b.n	afba <smp_f6+0x6e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    afb0:	7818      	ldrb	r0, [r3, #0]
    afb2:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    afb4:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    afb6:	3b01      	subs	r3, #1
    afb8:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    afba:	2a00      	cmp	r2, #0
    afbc:	d1f8      	bne.n	afb0 <smp_f6+0x64>
	m[51] = a1->type;
    afbe:	4631      	mov	r1, r6
    afc0:	f811 3b01 	ldrb.w	r3, [r1], #1
    afc4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
    afc8:	2206      	movs	r2, #6
    afca:	a80e      	add	r0, sp, #56	; 0x38
    afcc:	f7f5 f978 	bl	2c0 <memcpy>
	src += length - 1;
    afd0:	3606      	adds	r6, #6
    afd2:	2306      	movs	r3, #6
    afd4:	aa0e      	add	r2, sp, #56	; 0x38
    afd6:	e004      	b.n	afe2 <smp_f6+0x96>
		*((u8_t *)dst++) = *((u8_t *)src--);
    afd8:	7831      	ldrb	r1, [r6, #0]
    afda:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    afdc:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    afde:	3e01      	subs	r6, #1
    afe0:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    afe2:	2b00      	cmp	r3, #0
    afe4:	d1f8      	bne.n	afd8 <smp_f6+0x8c>
	m[58] = a2->type;
    afe6:	4629      	mov	r1, r5
    afe8:	f811 3b01 	ldrb.w	r3, [r1], #1
    afec:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
    aff0:	2206      	movs	r2, #6
    aff2:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
    aff6:	f7f5 f963 	bl	2c0 <memcpy>
	src += length - 1;
    affa:	3506      	adds	r5, #6
    affc:	2306      	movs	r3, #6
    affe:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
    b002:	e004      	b.n	b00e <smp_f6+0xc2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b004:	7829      	ldrb	r1, [r5, #0]
    b006:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    b008:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b00a:	3d01      	subs	r5, #1
    b00c:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    b00e:	2b00      	cmp	r3, #0
    b010:	d1f8      	bne.n	b004 <smp_f6+0xb8>
	src += length - 1;
    b012:	f104 000f 	add.w	r0, r4, #15
    b016:	2410      	movs	r4, #16
    b018:	ab12      	add	r3, sp, #72	; 0x48
    b01a:	e004      	b.n	b026 <smp_f6+0xda>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b01c:	7802      	ldrb	r2, [r0, #0]
    b01e:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    b020:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b022:	3801      	subs	r0, #1
    b024:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    b026:	2c00      	cmp	r4, #0
    b028:	d1f8      	bne.n	b01c <smp_f6+0xd0>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    b02a:	463b      	mov	r3, r7
    b02c:	2241      	movs	r2, #65	; 0x41
    b02e:	a901      	add	r1, sp, #4
    b030:	a812      	add	r0, sp, #72	; 0x48
    b032:	f7ff fe0b 	bl	ac4c <bt_smp_aes_cmac>
	if (err) {
    b036:	4605      	mov	r5, r0
    b038:	b138      	cbz	r0, b04a <smp_f6+0xfe>
    b03a:	e008      	b.n	b04e <smp_f6+0x102>
		u8_t tmp = ((u8_t *)buf)[i];
    b03c:	5d3a      	ldrb	r2, [r7, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    b03e:	f1c4 030f 	rsb	r3, r4, #15
    b042:	5cf9      	ldrb	r1, [r7, r3]
    b044:	5539      	strb	r1, [r7, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    b046:	54fa      	strb	r2, [r7, r3]
	for (i = 0; i < (length/2); i++) {
    b048:	3401      	adds	r4, #1
    b04a:	2c07      	cmp	r4, #7
    b04c:	d9f6      	bls.n	b03c <smp_f6+0xf0>
}
    b04e:	4628      	mov	r0, r5
    b050:	b017      	add	sp, #92	; 0x5c
    b052:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b054 <compute_and_send_master_dhcheck>:
{
    b054:	b5f0      	push	{r4, r5, r6, r7, lr}
    b056:	b08d      	sub	sp, #52	; 0x34
    b058:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    b05a:	2210      	movs	r2, #16
    b05c:	2100      	movs	r1, #0
    b05e:	eb0d 0002 	add.w	r0, sp, r2
    b062:	f01f fc29 	bl	2a8b8 <memset>
	switch (smp->method) {
    b066:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b06a:	2b03      	cmp	r3, #3
    b06c:	d84a      	bhi.n	b104 <compute_and_send_master_dhcheck+0xb0>
    b06e:	e8df f003 	tbb	[pc, r3]
    b072:	0208      	.short	0x0208
    b074:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b076:	2204      	movs	r2, #4
    b078:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    b07c:	a804      	add	r0, sp, #16
    b07e:	f7f5 f91f 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    b082:	f104 06c3 	add.w	r6, r4, #195	; 0xc3
    b086:	f104 07d3 	add.w	r7, r4, #211	; 0xd3
		   &smp->chan.chan.conn->le.init_addr,
    b08a:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    b08c:	f103 0256 	add.w	r2, r3, #86	; 0x56
    b090:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    b094:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    b098:	9102      	str	r1, [sp, #8]
    b09a:	9501      	str	r5, [sp, #4]
    b09c:	9200      	str	r2, [sp, #0]
    b09e:	334f      	adds	r3, #79	; 0x4f
    b0a0:	463a      	mov	r2, r7
    b0a2:	4631      	mov	r1, r6
    b0a4:	f204 1033 	addw	r0, r4, #307	; 0x133
    b0a8:	f7ff feae 	bl	ae08 <smp_f5>
    b0ac:	b110      	cbz	r0, b0b4 <compute_and_send_master_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    b0ae:	2008      	movs	r0, #8
}
    b0b0:	b00d      	add	sp, #52	; 0x34
    b0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    b0b4:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    b0b8:	6823      	ldr	r3, [r4, #0]
    b0ba:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    b0be:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    b0c0:	a808      	add	r0, sp, #32
    b0c2:	9003      	str	r0, [sp, #12]
    b0c4:	9302      	str	r3, [sp, #8]
    b0c6:	9101      	str	r1, [sp, #4]
    b0c8:	9200      	str	r2, [sp, #0]
    b0ca:	ab04      	add	r3, sp, #16
    b0cc:	463a      	mov	r2, r7
    b0ce:	4631      	mov	r1, r6
    b0d0:	4628      	mov	r0, r5
    b0d2:	f7ff ff3b 	bl	af4c <smp_f6>
    b0d6:	b108      	cbz	r0, b0dc <compute_and_send_master_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    b0d8:	2008      	movs	r0, #8
    b0da:	e7e9      	b.n	b0b0 <compute_and_send_master_dhcheck+0x5c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    b0dc:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b0e0:	f3bf 8f5b 	dmb	ish
    b0e4:	e853 2f00 	ldrex	r2, [r3]
    b0e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    b0ec:	e843 2100 	strex	r1, r2, [r3]
    b0f0:	2900      	cmp	r1, #0
    b0f2:	d1f7      	bne.n	b0e4 <compute_and_send_master_dhcheck+0x90>
    b0f4:	f3bf 8f5b 	dmb	ish
	sc_smp_send_dhkey_check(smp, e);
    b0f8:	a908      	add	r1, sp, #32
    b0fa:	4620      	mov	r0, r4
    b0fc:	f7ff fd30 	bl	ab60 <sc_smp_send_dhkey_check>
	return 0;
    b100:	2000      	movs	r0, #0
    b102:	e7d5      	b.n	b0b0 <compute_and_send_master_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    b104:	2008      	movs	r0, #8
    b106:	e7d3      	b.n	b0b0 <compute_and_send_master_dhcheck+0x5c>

0000b108 <compute_and_check_and_send_slave_dhcheck>:
{
    b108:	b5f0      	push	{r4, r5, r6, r7, lr}
    b10a:	b091      	sub	sp, #68	; 0x44
    b10c:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    b10e:	2210      	movs	r2, #16
    b110:	2100      	movs	r1, #0
    b112:	eb0d 0002 	add.w	r0, sp, r2
    b116:	f01f fbcf 	bl	2a8b8 <memset>
	switch (smp->method) {
    b11a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b11e:	2b03      	cmp	r3, #3
    b120:	d866      	bhi.n	b1f0 <compute_and_check_and_send_slave_dhcheck+0xe8>
    b122:	e8df f003 	tbb	[pc, r3]
    b126:	0208      	.short	0x0208
    b128:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b12a:	2204      	movs	r2, #4
    b12c:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    b130:	a804      	add	r0, sp, #16
    b132:	f7f5 f8c5 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b136:	f104 06d3 	add.w	r6, r4, #211	; 0xd3
    b13a:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
		   &smp->chan.chan.conn->le.init_addr,
    b13e:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    b140:	f103 0256 	add.w	r2, r3, #86	; 0x56
    b144:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    b148:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b14c:	9102      	str	r1, [sp, #8]
    b14e:	9501      	str	r5, [sp, #4]
    b150:	9200      	str	r2, [sp, #0]
    b152:	334f      	adds	r3, #79	; 0x4f
    b154:	463a      	mov	r2, r7
    b156:	4631      	mov	r1, r6
    b158:	f204 1033 	addw	r0, r4, #307	; 0x133
    b15c:	f7ff fe54 	bl	ae08 <smp_f5>
    b160:	b110      	cbz	r0, b168 <compute_and_check_and_send_slave_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    b162:	2008      	movs	r0, #8
}
    b164:	b011      	add	sp, #68	; 0x44
    b166:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b168:	f104 02ad 	add.w	r2, r4, #173	; 0xad
		   &smp->chan.chan.conn->le.resp_addr,
    b16c:	6823      	ldr	r3, [r4, #0]
    b16e:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr, e)) {
    b172:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b174:	a808      	add	r0, sp, #32
    b176:	9003      	str	r0, [sp, #12]
    b178:	9302      	str	r3, [sp, #8]
    b17a:	9101      	str	r1, [sp, #4]
    b17c:	9200      	str	r2, [sp, #0]
    b17e:	ab04      	add	r3, sp, #16
    b180:	4632      	mov	r2, r6
    b182:	4639      	mov	r1, r7
    b184:	4628      	mov	r0, r5
    b186:	f7ff fee1 	bl	af4c <smp_f6>
    b18a:	b108      	cbz	r0, b190 <compute_and_check_and_send_slave_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    b18c:	2008      	movs	r0, #8
    b18e:	e7e9      	b.n	b164 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b190:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    b194:	6823      	ldr	r3, [r4, #0]
    b196:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    b19a:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b19c:	a80c      	add	r0, sp, #48	; 0x30
    b19e:	9003      	str	r0, [sp, #12]
    b1a0:	9302      	str	r3, [sp, #8]
    b1a2:	9101      	str	r1, [sp, #4]
    b1a4:	9200      	str	r2, [sp, #0]
    b1a6:	ab04      	add	r3, sp, #16
    b1a8:	463a      	mov	r2, r7
    b1aa:	4631      	mov	r1, r6
    b1ac:	4628      	mov	r0, r5
    b1ae:	f7ff fecd 	bl	af4c <smp_f6>
    b1b2:	b108      	cbz	r0, b1b8 <compute_and_check_and_send_slave_dhcheck+0xb0>
		return BT_SMP_ERR_UNSPECIFIED;
    b1b4:	2008      	movs	r0, #8
    b1b6:	e7d5      	b.n	b164 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
    b1b8:	2210      	movs	r2, #16
    b1ba:	a90c      	add	r1, sp, #48	; 0x30
    b1bc:	f204 1053 	addw	r0, r4, #339	; 0x153
    b1c0:	f01f fae6 	bl	2a790 <memcmp>
    b1c4:	b108      	cbz	r0, b1ca <compute_and_check_and_send_slave_dhcheck+0xc2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    b1c6:	200b      	movs	r0, #11
    b1c8:	e7cc      	b.n	b164 <compute_and_check_and_send_slave_dhcheck+0x5c>
	sc_smp_send_dhkey_check(smp, e);
    b1ca:	a908      	add	r1, sp, #32
    b1cc:	4620      	mov	r0, r4
    b1ce:	f7ff fcc7 	bl	ab60 <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b1d2:	34a0      	adds	r4, #160	; 0xa0
    b1d4:	f3bf 8f5b 	dmb	ish
    b1d8:	e854 3f00 	ldrex	r3, [r4]
    b1dc:	f043 0302 	orr.w	r3, r3, #2
    b1e0:	e844 3200 	strex	r2, r3, [r4]
    b1e4:	2a00      	cmp	r2, #0
    b1e6:	d1f7      	bne.n	b1d8 <compute_and_check_and_send_slave_dhcheck+0xd0>
    b1e8:	f3bf 8f5b 	dmb	ish
	return 0;
    b1ec:	2000      	movs	r0, #0
    b1ee:	e7b9      	b.n	b164 <compute_and_check_and_send_slave_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    b1f0:	2008      	movs	r0, #8
    b1f2:	e7b7      	b.n	b164 <compute_and_check_and_send_slave_dhcheck+0x5c>

0000b1f4 <smp_g2>:
{
    b1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1f6:	b099      	sub	sp, #100	; 0x64
    b1f8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	src += length - 1;
    b1fa:	301f      	adds	r0, #31
    b1fc:	2520      	movs	r5, #32
    b1fe:	ae04      	add	r6, sp, #16
    b200:	e004      	b.n	b20c <smp_g2+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b202:	7807      	ldrb	r7, [r0, #0]
    b204:	7037      	strb	r7, [r6, #0]
	for (; length > 0; length--) {
    b206:	3d01      	subs	r5, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b208:	3801      	subs	r0, #1
    b20a:	3601      	adds	r6, #1
	for (; length > 0; length--) {
    b20c:	2d00      	cmp	r5, #0
    b20e:	d1f8      	bne.n	b202 <smp_g2+0xe>
	src += length - 1;
    b210:	311f      	adds	r1, #31
    b212:	2020      	movs	r0, #32
    b214:	ad0c      	add	r5, sp, #48	; 0x30
    b216:	e004      	b.n	b222 <smp_g2+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b218:	780e      	ldrb	r6, [r1, #0]
    b21a:	702e      	strb	r6, [r5, #0]
	for (; length > 0; length--) {
    b21c:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b21e:	3901      	subs	r1, #1
    b220:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    b222:	2800      	cmp	r0, #0
    b224:	d1f8      	bne.n	b218 <smp_g2+0x24>
	src += length - 1;
    b226:	330f      	adds	r3, #15
    b228:	2110      	movs	r1, #16
    b22a:	a814      	add	r0, sp, #80	; 0x50
    b22c:	e004      	b.n	b238 <smp_g2+0x44>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b22e:	781d      	ldrb	r5, [r3, #0]
    b230:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
    b232:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b234:	3b01      	subs	r3, #1
    b236:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    b238:	2900      	cmp	r1, #0
    b23a:	d1f8      	bne.n	b22e <smp_g2+0x3a>
	src += length - 1;
    b23c:	320f      	adds	r2, #15
    b23e:	2310      	movs	r3, #16
    b240:	4669      	mov	r1, sp
    b242:	e004      	b.n	b24e <smp_g2+0x5a>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b244:	7810      	ldrb	r0, [r2, #0]
    b246:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    b248:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b24a:	3a01      	subs	r2, #1
    b24c:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    b24e:	2b00      	cmp	r3, #0
    b250:	d1f8      	bne.n	b244 <smp_g2+0x50>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    b252:	466b      	mov	r3, sp
    b254:	2250      	movs	r2, #80	; 0x50
    b256:	a904      	add	r1, sp, #16
    b258:	4668      	mov	r0, sp
    b25a:	f7ff fcf7 	bl	ac4c <bt_smp_aes_cmac>
	if (err) {
    b25e:	4605      	mov	r5, r0
    b260:	b110      	cbz	r0, b268 <smp_g2+0x74>
}
    b262:	4628      	mov	r0, r5
    b264:	b019      	add	sp, #100	; 0x64
    b266:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
    b268:	2204      	movs	r2, #4
    b26a:	a903      	add	r1, sp, #12
    b26c:	4620      	mov	r0, r4
    b26e:	f7f5 f827 	bl	2c0 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    b272:	6822      	ldr	r2, [r4, #0]
    b274:	0a13      	lsrs	r3, r2, #8
    b276:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    b27a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b27e:	0211      	lsls	r1, r2, #8
    b280:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    b284:	430b      	orrs	r3, r1
    b286:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    b28a:	4a04      	ldr	r2, [pc, #16]	; (b29c <smp_g2+0xa8>)
    b28c:	fba2 1203 	umull	r1, r2, r2, r3
    b290:	0c92      	lsrs	r2, r2, #18
    b292:	4903      	ldr	r1, [pc, #12]	; (b2a0 <smp_g2+0xac>)
    b294:	fb01 3212 	mls	r2, r1, r2, r3
    b298:	6022      	str	r2, [r4, #0]
	return 0;
    b29a:	e7e2      	b.n	b262 <smp_g2+0x6e>
    b29c:	431bde83 	.word	0x431bde83
    b2a0:	000f4240 	.word	0x000f4240

0000b2a4 <smp_send_pairing_confirm>:
{
    b2a4:	b570      	push	{r4, r5, r6, lr}
    b2a6:	b082      	sub	sp, #8
	struct bt_conn *conn = smp->chan.chan.conn;
    b2a8:	6806      	ldr	r6, [r0, #0]
	switch (smp->method) {
    b2aa:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    b2ae:	2b03      	cmp	r3, #3
    b2b0:	d83f      	bhi.n	b332 <smp_send_pairing_confirm+0x8e>
    b2b2:	e8df f003 	tbb	[pc, r3]
    b2b6:	020d      	.short	0x020d
    b2b8:	0d02      	.short	0x0d02
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    b2ba:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
    b2be:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    b2c2:	40dd      	lsrs	r5, r3
    b2c4:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    b2c8:	f065 057f 	orn	r5, r5, #127	; 0x7f
    b2cc:	b2ed      	uxtb	r5, r5
		break;
    b2ce:	e000      	b.n	b2d2 <smp_send_pairing_confirm+0x2e>
		r = 0;
    b2d0:	2500      	movs	r5, #0
    b2d2:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    b2d4:	2210      	movs	r2, #16
    b2d6:	2103      	movs	r1, #3
    b2d8:	4630      	mov	r0, r6
    b2da:	f7ff fbdc 	bl	aa96 <smp_create_pdu>
	if (!buf) {
    b2de:	4606      	mov	r6, r0
    b2e0:	b348      	cbz	r0, b336 <smp_send_pairing_confirm+0x92>
	req = net_buf_add(buf, sizeof(*req));
    b2e2:	2110      	movs	r1, #16
    b2e4:	3008      	adds	r0, #8
    b2e6:	f00f fd35 	bl	1ad54 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    b2ea:	9000      	str	r0, [sp, #0]
    b2ec:	462b      	mov	r3, r5
    b2ee:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    b2f2:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    b2f6:	4811      	ldr	r0, [pc, #68]	; (b33c <smp_send_pairing_confirm+0x98>)
    b2f8:	f7ff fd18 	bl	ad2c <smp_f4>
    b2fc:	b120      	cbz	r0, b308 <smp_send_pairing_confirm+0x64>
		net_buf_unref(buf);
    b2fe:	4630      	mov	r0, r6
    b300:	f00f fcdc 	bl	1acbc <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    b304:	2008      	movs	r0, #8
    b306:	e017      	b.n	b338 <smp_send_pairing_confirm+0x94>
	smp_send(smp, buf, NULL);
    b308:	2200      	movs	r2, #0
    b30a:	4631      	mov	r1, r6
    b30c:	4620      	mov	r0, r4
    b30e:	f7ff fc15 	bl	ab3c <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    b312:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b316:	f3bf 8f5b 	dmb	ish
    b31a:	e850 3f00 	ldrex	r3, [r0]
    b31e:	f023 0301 	bic.w	r3, r3, #1
    b322:	e840 3200 	strex	r2, r3, [r0]
    b326:	2a00      	cmp	r2, #0
    b328:	d1f7      	bne.n	b31a <smp_send_pairing_confirm+0x76>
    b32a:	f3bf 8f5b 	dmb	ish
	return 0;
    b32e:	2000      	movs	r0, #0
    b330:	e002      	b.n	b338 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    b332:	2008      	movs	r0, #8
    b334:	e000      	b.n	b338 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    b336:	2008      	movs	r0, #8
}
    b338:	b002      	add	sp, #8
    b33a:	bd70      	pop	{r4, r5, r6, pc}
    b33c:	20000f48 	.word	0x20000f48

0000b340 <smp_c1>:
{
    b340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b344:	b088      	sub	sp, #32
    b346:	4604      	mov	r4, r0
    b348:	460f      	mov	r7, r1
    b34a:	4611      	mov	r1, r2
    b34c:	4698      	mov	r8, r3
    b34e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b350:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	p1[0] = ia->type;
    b352:	782b      	ldrb	r3, [r5, #0]
    b354:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
    b358:	7833      	ldrb	r3, [r6, #0]
    b35a:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
    b35e:	2207      	movs	r2, #7
    b360:	f10d 0012 	add.w	r0, sp, #18
    b364:	f7f4 ffac 	bl	2c0 <memcpy>
	memcpy(p1 + 9, pres, 7);
    b368:	2207      	movs	r2, #7
    b36a:	4641      	mov	r1, r8
    b36c:	f10d 0019 	add.w	r0, sp, #25
    b370:	f7f4 ffa6 	bl	2c0 <memcpy>
	xor_128(r, p1, enc_data);
    b374:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b376:	a904      	add	r1, sp, #16
    b378:	4638      	mov	r0, r7
    b37a:	f7ff faf3 	bl	a964 <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
    b37e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b380:	4611      	mov	r1, r2
    b382:	4620      	mov	r0, r4
    b384:	f006 f98c 	bl	116a0 <bt_encrypt_le>
	if (err) {
    b388:	4603      	mov	r3, r0
    b38a:	b118      	cbz	r0, b394 <smp_c1+0x54>
}
    b38c:	4618      	mov	r0, r3
    b38e:	b008      	add	sp, #32
    b390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(p2, ra->a.val, 6);
    b394:	2206      	movs	r2, #6
    b396:	1c71      	adds	r1, r6, #1
    b398:	4668      	mov	r0, sp
    b39a:	f7f4 ff91 	bl	2c0 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    b39e:	2206      	movs	r2, #6
    b3a0:	1c69      	adds	r1, r5, #1
    b3a2:	eb0d 0002 	add.w	r0, sp, r2
    b3a6:	f7f4 ff8b 	bl	2c0 <memcpy>
	memset(p2 + 12, 0, 4);
    b3aa:	2204      	movs	r2, #4
    b3ac:	2100      	movs	r1, #0
    b3ae:	a803      	add	r0, sp, #12
    b3b0:	f01f fa82 	bl	2a8b8 <memset>
	xor_128(enc_data, p2, enc_data);
    b3b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b3b6:	4669      	mov	r1, sp
    b3b8:	4610      	mov	r0, r2
    b3ba:	f7ff fad3 	bl	a964 <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
    b3be:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b3c0:	4611      	mov	r1, r2
    b3c2:	4620      	mov	r0, r4
    b3c4:	f006 f96c 	bl	116a0 <bt_encrypt_le>
    b3c8:	4603      	mov	r3, r0
    b3ca:	e7df      	b.n	b38c <smp_c1+0x4c>

0000b3cc <legacy_send_pairing_confirm>:
{
    b3cc:	b570      	push	{r4, r5, r6, lr}
    b3ce:	b084      	sub	sp, #16
    b3d0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b3d2:	6805      	ldr	r5, [r0, #0]
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    b3d4:	2210      	movs	r2, #16
    b3d6:	2103      	movs	r1, #3
    b3d8:	4628      	mov	r0, r5
    b3da:	f7ff fb5c 	bl	aa96 <smp_create_pdu>
	if (!buf) {
    b3de:	b370      	cbz	r0, b43e <legacy_send_pairing_confirm+0x72>
    b3e0:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    b3e2:	2110      	movs	r1, #16
    b3e4:	3008      	adds	r0, #8
    b3e6:	f00f fcb5 	bl	1ad54 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    b3ea:	f105 034f 	add.w	r3, r5, #79	; 0x4f
    b3ee:	3556      	adds	r5, #86	; 0x56
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    b3f0:	9002      	str	r0, [sp, #8]
    b3f2:	9501      	str	r5, [sp, #4]
    b3f4:	9300      	str	r3, [sp, #0]
    b3f6:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    b3fa:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    b3fe:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    b402:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    b406:	f7ff ff9b 	bl	b340 <smp_c1>
    b40a:	b120      	cbz	r0, b416 <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
    b40c:	4630      	mov	r0, r6
    b40e:	f00f fc55 	bl	1acbc <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    b412:	2008      	movs	r0, #8
    b414:	e014      	b.n	b440 <legacy_send_pairing_confirm+0x74>
	smp_send(smp, buf, NULL);
    b416:	2200      	movs	r2, #0
    b418:	4631      	mov	r1, r6
    b41a:	4620      	mov	r0, r4
    b41c:	f7ff fb8e 	bl	ab3c <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    b420:	34a0      	adds	r4, #160	; 0xa0
    b422:	f3bf 8f5b 	dmb	ish
    b426:	e854 3f00 	ldrex	r3, [r4]
    b42a:	f023 0301 	bic.w	r3, r3, #1
    b42e:	e844 3200 	strex	r2, r3, [r4]
    b432:	2a00      	cmp	r2, #0
    b434:	d1f7      	bne.n	b426 <legacy_send_pairing_confirm+0x5a>
    b436:	f3bf 8f5b 	dmb	ish
	return 0;
    b43a:	2000      	movs	r0, #0
    b43c:	e000      	b.n	b440 <legacy_send_pairing_confirm+0x74>
		return BT_SMP_ERR_UNSPECIFIED;
    b43e:	2008      	movs	r0, #8
}
    b440:	b004      	add	sp, #16
    b442:	bd70      	pop	{r4, r5, r6, pc}

0000b444 <legacy_pairing_confirm>:
{
    b444:	b508      	push	{r3, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b446:	6803      	ldr	r3, [r0, #0]
    b448:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b44a:	b1c3      	cbz	r3, b47e <legacy_pairing_confirm+0x3a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b44c:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b450:	f3bf 8f5b 	dmb	ish
    b454:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    b458:	f3bf 8f5b 	dmb	ish
    b45c:	f412 7f00 	tst.w	r2, #512	; 0x200
    b460:	d01e      	beq.n	b4a0 <legacy_pairing_confirm+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b462:	f3bf 8f5b 	dmb	ish
    b466:	e853 2f00 	ldrex	r2, [r3]
    b46a:	f042 0201 	orr.w	r2, r2, #1
    b46e:	e843 2100 	strex	r1, r2, [r3]
    b472:	2900      	cmp	r1, #0
    b474:	d1f7      	bne.n	b466 <legacy_pairing_confirm+0x22>
    b476:	f3bf 8f5b 	dmb	ish
	return 0;
    b47a:	2000      	movs	r0, #0
}
    b47c:	bd08      	pop	{r3, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b47e:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    b482:	f3bf 8f5b 	dmb	ish
    b486:	e853 2f00 	ldrex	r2, [r3]
    b48a:	f042 0208 	orr.w	r2, r2, #8
    b48e:	e843 2100 	strex	r1, r2, [r3]
    b492:	2900      	cmp	r1, #0
    b494:	d1f7      	bne.n	b486 <legacy_pairing_confirm+0x42>
    b496:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    b49a:	f7ff ff97 	bl	b3cc <legacy_send_pairing_confirm>
    b49e:	bd08      	pop	{r3, pc}
			atomic_set_bit(&smp->allowed_cmds,
    b4a0:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    b4a4:	f3bf 8f5b 	dmb	ish
    b4a8:	e853 2f00 	ldrex	r2, [r3]
    b4ac:	f042 0210 	orr.w	r2, r2, #16
    b4b0:	e843 2100 	strex	r1, r2, [r3]
    b4b4:	2900      	cmp	r1, #0
    b4b6:	d1f7      	bne.n	b4a8 <legacy_pairing_confirm+0x64>
    b4b8:	f3bf 8f5b 	dmb	ish
			return legacy_send_pairing_confirm(smp);
    b4bc:	f7ff ff86 	bl	b3cc <legacy_send_pairing_confirm>
    b4c0:	bd08      	pop	{r3, pc}

0000b4c2 <smp_pairing_confirm>:
{
    b4c2:	b510      	push	{r4, lr}
    b4c4:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    b4c6:	2210      	movs	r2, #16
    b4c8:	6889      	ldr	r1, [r1, #8]
    b4ca:	30b3      	adds	r0, #179	; 0xb3
    b4cc:	f7f4 fef8 	bl	2c0 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b4d0:	6823      	ldr	r3, [r4, #0]
    b4d2:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b4d4:	b313      	cbz	r3, b51c <smp_pairing_confirm+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b4d6:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b4da:	f3bf 8f5b 	dmb	ish
    b4de:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b4e2:	f3bf 8f5b 	dmb	ish
    b4e6:	f013 0f20 	tst.w	r3, #32
    b4ea:	d029      	beq.n	b540 <smp_pairing_confirm+0x7e>
	switch (smp->method) {
    b4ec:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b4f0:	2b01      	cmp	r3, #1
    b4f2:	d029      	beq.n	b548 <smp_pairing_confirm+0x86>
    b4f4:	2b02      	cmp	r3, #2
    b4f6:	d150      	bne.n	b59a <smp_pairing_confirm+0xd8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b4f8:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b4fc:	f3bf 8f5b 	dmb	ish
    b500:	e853 2f00 	ldrex	r2, [r3]
    b504:	f042 0210 	orr.w	r2, r2, #16
    b508:	e843 2100 	strex	r1, r2, [r3]
    b50c:	2900      	cmp	r1, #0
    b50e:	d1f7      	bne.n	b500 <smp_pairing_confirm+0x3e>
    b510:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    b514:	4620      	mov	r0, r4
    b516:	f7ff fec5 	bl	b2a4 <smp_send_pairing_confirm>
    b51a:	bd10      	pop	{r4, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b51c:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b520:	f3bf 8f5b 	dmb	ish
    b524:	e853 2f00 	ldrex	r2, [r3]
    b528:	f042 0210 	orr.w	r2, r2, #16
    b52c:	e843 2100 	strex	r1, r2, [r3]
    b530:	2900      	cmp	r1, #0
    b532:	d1f7      	bne.n	b524 <smp_pairing_confirm+0x62>
    b534:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
    b538:	4620      	mov	r0, r4
    b53a:	f7ff fb6c 	bl	ac16 <smp_send_pairing_random>
    b53e:	bd10      	pop	{r4, pc}
		return legacy_pairing_confirm(smp);
    b540:	4620      	mov	r0, r4
    b542:	f7ff ff7f 	bl	b444 <legacy_pairing_confirm>
    b546:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b548:	f3bf 8f5b 	dmb	ish
    b54c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b550:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b554:	f413 7f00 	tst.w	r3, #512	; 0x200
    b558:	d111      	bne.n	b57e <smp_pairing_confirm+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b55a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b55e:	f3bf 8f5b 	dmb	ish
    b562:	e853 2f00 	ldrex	r2, [r3]
    b566:	f042 0210 	orr.w	r2, r2, #16
    b56a:	e843 2100 	strex	r1, r2, [r3]
    b56e:	2900      	cmp	r1, #0
    b570:	d1f7      	bne.n	b562 <smp_pairing_confirm+0xa0>
    b572:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    b576:	4620      	mov	r0, r4
    b578:	f7ff fe94 	bl	b2a4 <smp_send_pairing_confirm>
    b57c:	bd10      	pop	{r4, pc}
    b57e:	f3bf 8f5b 	dmb	ish
    b582:	e852 3f00 	ldrex	r3, [r2]
    b586:	f043 0301 	orr.w	r3, r3, #1
    b58a:	e842 3100 	strex	r1, r3, [r2]
    b58e:	2900      	cmp	r1, #0
    b590:	d1f7      	bne.n	b582 <smp_pairing_confirm+0xc0>
    b592:	f3bf 8f5b 	dmb	ish
			return 0;
    b596:	2000      	movs	r0, #0
    b598:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b59a:	2008      	movs	r0, #8
}
    b59c:	bd10      	pop	{r4, pc}

0000b59e <smp_s1>:
{
    b59e:	b570      	push	{r4, r5, r6, lr}
    b5a0:	4605      	mov	r5, r0
    b5a2:	460e      	mov	r6, r1
    b5a4:	4611      	mov	r1, r2
    b5a6:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
    b5a8:	2208      	movs	r2, #8
    b5aa:	4618      	mov	r0, r3
    b5ac:	f7f4 fe88 	bl	2c0 <memcpy>
	memcpy(out + 8, r1, 8);
    b5b0:	2208      	movs	r2, #8
    b5b2:	4631      	mov	r1, r6
    b5b4:	18a0      	adds	r0, r4, r2
    b5b6:	f7f4 fe83 	bl	2c0 <memcpy>
	return bt_encrypt_le(k, out, out);
    b5ba:	4622      	mov	r2, r4
    b5bc:	4621      	mov	r1, r4
    b5be:	4628      	mov	r0, r5
    b5c0:	f006 f86e 	bl	116a0 <bt_encrypt_le>
}
    b5c4:	bd70      	pop	{r4, r5, r6, pc}

0000b5c6 <smp_reset>:
{
    b5c6:	b538      	push	{r3, r4, r5, lr}
    b5c8:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b5ca:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    b5cc:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    b5d0:	f01e fcae 	bl	29f30 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    b5d4:	2200      	movs	r2, #0
    b5d6:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
	atomic_set(&smp->allowed_cmds, 0);
    b5da:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b5de:	f3bf 8f5b 	dmb	ish
    b5e2:	e853 1f00 	ldrex	r1, [r3]
    b5e6:	e843 2000 	strex	r0, r2, [r3]
    b5ea:	2800      	cmp	r0, #0
    b5ec:	d1f9      	bne.n	b5e2 <smp_reset+0x1c>
    b5ee:	f3bf 8f5b 	dmb	ish
	atomic_set(smp->flags, 0);
    b5f2:	34a0      	adds	r4, #160	; 0xa0
    b5f4:	f3bf 8f5b 	dmb	ish
    b5f8:	e854 1f00 	ldrex	r1, [r4]
    b5fc:	e844 2000 	strex	r0, r2, [r4]
    b600:	2800      	cmp	r0, #0
    b602:	d1f9      	bne.n	b5f8 <smp_reset+0x32>
    b604:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    b608:	7a69      	ldrb	r1, [r5, #9]
    b60a:	7a2a      	ldrb	r2, [r5, #8]
    b60c:	4291      	cmp	r1, r2
    b60e:	d000      	beq.n	b612 <smp_reset+0x4c>
		conn->required_sec_level = conn->sec_level;
    b610:	726a      	strb	r2, [r5, #9]
	    conn->role == BT_HCI_ROLE_MASTER) {
    b612:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b614:	b162      	cbz	r2, b630 <smp_reset+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b616:	f3bf 8f5b 	dmb	ish
    b61a:	e853 2f00 	ldrex	r2, [r3]
    b61e:	f042 0202 	orr.w	r2, r2, #2
    b622:	e843 2100 	strex	r1, r2, [r3]
    b626:	2900      	cmp	r1, #0
    b628:	d1f7      	bne.n	b61a <smp_reset+0x54>
    b62a:	f3bf 8f5b 	dmb	ish
    b62e:	bd38      	pop	{r3, r4, r5, pc}
    b630:	f3bf 8f5b 	dmb	ish
    b634:	e853 2f00 	ldrex	r2, [r3]
    b638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b63c:	e843 2100 	strex	r1, r2, [r3]
    b640:	2900      	cmp	r1, #0
    b642:	d1f7      	bne.n	b634 <smp_reset+0x6e>
    b644:	f3bf 8f5b 	dmb	ish
    b648:	bd38      	pop	{r3, r4, r5, pc}

0000b64a <smp_pairing_complete>:
{
    b64a:	b508      	push	{r3, lr}
	smp_reset(smp);
    b64c:	f7ff ffbb 	bl	b5c6 <smp_reset>
    b650:	bd08      	pop	{r3, pc}

0000b652 <smp_error>:
{
    b652:	b570      	push	{r4, r5, r6, lr}
    b654:	4604      	mov	r4, r0
    b656:	460e      	mov	r6, r1
	smp_pairing_complete(smp, reason);
    b658:	f7ff fff7 	bl	b64a <smp_pairing_complete>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    b65c:	2201      	movs	r2, #1
    b65e:	2105      	movs	r1, #5
    b660:	6820      	ldr	r0, [r4, #0]
    b662:	f7ff fa18 	bl	aa96 <smp_create_pdu>
	if (!buf) {
    b666:	b168      	cbz	r0, b684 <smp_error+0x32>
    b668:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    b66a:	2101      	movs	r1, #1
    b66c:	3008      	adds	r0, #8
    b66e:	f00f fb71 	bl	1ad54 <net_buf_simple_add>
	rsp->reason = reason;
    b672:	7006      	strb	r6, [r0, #0]
    b674:	2300      	movs	r3, #0
    b676:	462a      	mov	r2, r5
    b678:	2106      	movs	r1, #6
    b67a:	6820      	ldr	r0, [r4, #0]
    b67c:	f7fc fd01 	bl	8082 <bt_l2cap_send_cb>
	return 0;
    b680:	2000      	movs	r0, #0
    b682:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    b684:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    b688:	bd70      	pop	{r4, r5, r6, pc}
	...

0000b68c <bt_smp_dhkey_ready>:
{
    b68c:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b68e:	2400      	movs	r4, #0
    b690:	b384      	cbz	r4, b6f4 <bt_smp_dhkey_ready+0x68>
	struct bt_smp *smp = NULL;
    b692:	2400      	movs	r4, #0
	if (!smp) {
    b694:	b36c      	cbz	r4, b6f2 <bt_smp_dhkey_ready+0x66>
    b696:	4601      	mov	r1, r0
	if (!dhkey) {
    b698:	2800      	cmp	r0, #0
    b69a:	d04b      	beq.n	b734 <bt_smp_dhkey_ready+0xa8>
	memcpy(smp->dhkey, dhkey, 32);
    b69c:	2220      	movs	r2, #32
    b69e:	f204 1033 	addw	r0, r4, #307	; 0x133
    b6a2:	f7f4 fe0d 	bl	2c0 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b6a6:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b6aa:	f3bf 8f5b 	dmb	ish
    b6ae:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    b6b2:	f3bf 8f5b 	dmb	ish
    b6b6:	f412 7f00 	tst.w	r2, #512	; 0x200
    b6ba:	d140      	bne.n	b73e <bt_smp_dhkey_ready+0xb2>
    b6bc:	f3bf 8f5b 	dmb	ish
    b6c0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    b6c4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    b6c8:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    b6cc:	d144      	bne.n	b758 <bt_smp_dhkey_ready+0xcc>
    b6ce:	f3bf 8f5b 	dmb	ish
    b6d2:	681b      	ldr	r3, [r3, #0]
    b6d4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    b6d8:	f413 7f80 	tst.w	r3, #256	; 0x100
    b6dc:	d009      	beq.n	b6f2 <bt_smp_dhkey_ready+0x66>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b6de:	6823      	ldr	r3, [r4, #0]
    b6e0:	78db      	ldrb	r3, [r3, #3]
    b6e2:	2b00      	cmp	r3, #0
    b6e4:	d149      	bne.n	b77a <bt_smp_dhkey_ready+0xee>
			err = compute_and_send_master_dhcheck(smp);
    b6e6:	4620      	mov	r0, r4
    b6e8:	f7ff fcb4 	bl	b054 <compute_and_send_master_dhcheck>
			if (err) {
    b6ec:	4601      	mov	r1, r0
    b6ee:	2800      	cmp	r0, #0
    b6f0:	d13f      	bne.n	b772 <bt_smp_dhkey_ready+0xe6>
    b6f2:	bd10      	pop	{r4, pc}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    b6f4:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b6f8:	fb03 f304 	mul.w	r3, r3, r4
    b6fc:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
    b700:	4b23      	ldr	r3, [pc, #140]	; (b790 <bt_smp_dhkey_ready+0x104>)
    b702:	4413      	add	r3, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b704:	f3bf 8f5b 	dmb	ish
    b708:	e853 2f00 	ldrex	r2, [r3]
    b70c:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    b710:	e843 1e00 	strex	lr, r1, [r3]
    b714:	f1be 0f00 	cmp.w	lr, #0
    b718:	d1f6      	bne.n	b708 <bt_smp_dhkey_ready+0x7c>
    b71a:	f3bf 8f5b 	dmb	ish
    b71e:	f012 0f80 	tst.w	r2, #128	; 0x80
    b722:	d101      	bne.n	b728 <bt_smp_dhkey_ready+0x9c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b724:	3401      	adds	r4, #1
    b726:	e7b3      	b.n	b690 <bt_smp_dhkey_ready+0x4>
			smp = &bt_smp_pool[i];
    b728:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    b72c:	4b18      	ldr	r3, [pc, #96]	; (b790 <bt_smp_dhkey_ready+0x104>)
    b72e:	fb02 3404 	mla	r4, r2, r4, r3
			break;
    b732:	e7af      	b.n	b694 <bt_smp_dhkey_ready+0x8>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    b734:	210b      	movs	r1, #11
    b736:	4620      	mov	r0, r4
    b738:	f7ff ff8b 	bl	b652 <smp_error>
		return;
    b73c:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b73e:	f3bf 8f5b 	dmb	ish
    b742:	e853 2f00 	ldrex	r2, [r3]
    b746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b74a:	e843 2100 	strex	r1, r2, [r3]
    b74e:	2900      	cmp	r1, #0
    b750:	d1f7      	bne.n	b742 <bt_smp_dhkey_ready+0xb6>
    b752:	f3bf 8f5b 	dmb	ish
    b756:	bd10      	pop	{r4, pc}
    b758:	f3bf 8f5b 	dmb	ish
    b75c:	e853 2f00 	ldrex	r2, [r3]
    b760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b764:	e843 2100 	strex	r1, r2, [r3]
    b768:	2900      	cmp	r1, #0
    b76a:	d1f7      	bne.n	b75c <bt_smp_dhkey_ready+0xd0>
    b76c:	f3bf 8f5b 	dmb	ish
    b770:	bd10      	pop	{r4, pc}
				smp_error(smp, err);
    b772:	4620      	mov	r0, r4
    b774:	f7ff ff6d 	bl	b652 <smp_error>
    b778:	bd10      	pop	{r4, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    b77a:	4620      	mov	r0, r4
    b77c:	f7ff fcc4 	bl	b108 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    b780:	4601      	mov	r1, r0
    b782:	2800      	cmp	r0, #0
    b784:	d0b5      	beq.n	b6f2 <bt_smp_dhkey_ready+0x66>
			smp_error(smp, err);
    b786:	4620      	mov	r0, r4
    b788:	f7ff ff63 	bl	b652 <smp_error>
    b78c:	e7b1      	b.n	b6f2 <bt_smp_dhkey_ready+0x66>
    b78e:	bf00      	nop
    b790:	20000da0 	.word	0x20000da0

0000b794 <smp_pairing_failed>:
{
    b794:	b538      	push	{r3, r4, r5, lr}
    b796:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b798:	6800      	ldr	r0, [r0, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    b79a:	688d      	ldr	r5, [r1, #8]
	switch (smp->method) {
    b79c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b7a0:	3b01      	subs	r3, #1
    b7a2:	2b02      	cmp	r3, #2
    b7a4:	d913      	bls.n	b7ce <smp_pairing_failed+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b7a6:	f3bf 8f5b 	dmb	ish
    b7aa:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b7ae:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b7b2:	f013 0f04 	tst.w	r3, #4
    b7b6:	d004      	beq.n	b7c2 <smp_pairing_failed+0x2e>
	    smp->chan.chan.conn->le.keys) {
    b7b8:	6823      	ldr	r3, [r4, #0]
    b7ba:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b7bc:	b108      	cbz	r0, b7c2 <smp_pairing_failed+0x2e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    b7be:	f001 fd98 	bl	d2f2 <bt_keys_clear>
	smp_pairing_complete(smp, req->reason);
    b7c2:	7829      	ldrb	r1, [r5, #0]
    b7c4:	4620      	mov	r0, r4
    b7c6:	f7ff ff40 	bl	b64a <smp_pairing_complete>
}
    b7ca:	2000      	movs	r0, #0
    b7cc:	bd38      	pop	{r3, r4, r5, pc}
		bt_auth->cancel(conn);
    b7ce:	4b02      	ldr	r3, [pc, #8]	; (b7d8 <smp_pairing_failed+0x44>)
    b7d0:	681b      	ldr	r3, [r3, #0]
    b7d2:	68db      	ldr	r3, [r3, #12]
    b7d4:	4798      	blx	r3
		break;
    b7d6:	e7e6      	b.n	b7a6 <smp_pairing_failed+0x12>
    b7d8:	20002f90 	.word	0x20002f90

0000b7dc <bt_smp_disconnected>:
{
    b7dc:	b538      	push	{r3, r4, r5, lr}
    b7de:	4605      	mov	r5, r0
	struct bt_keys *keys = chan->conn->le.keys;
    b7e0:	6803      	ldr	r3, [r0, #0]
    b7e2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	k_delayed_work_cancel(&smp->work);
    b7e4:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    b7e8:	f01e fba2 	bl	29f30 <k_delayed_work_cancel>
	if (keys) {
    b7ec:	b164      	cbz	r4, b808 <bt_smp_disconnected+0x2c>
		if (!keys->keys ||
    b7ee:	89a3      	ldrh	r3, [r4, #12]
    b7f0:	b13b      	cbz	r3, b802 <bt_smp_disconnected+0x26>
    b7f2:	f3bf 8f5b 	dmb	ish
    b7f6:	68a3      	ldr	r3, [r4, #8]
    b7f8:	f3bf 8f5b 	dmb	ish
    b7fc:	f013 0f02 	tst.w	r3, #2
    b800:	d002      	beq.n	b808 <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    b802:	4620      	mov	r0, r4
    b804:	f001 fd75 	bl	d2f2 <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    b808:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    b80c:	2100      	movs	r1, #0
    b80e:	4628      	mov	r0, r5
    b810:	f01f f852 	bl	2a8b8 <memset>
    b814:	bd38      	pop	{r3, r4, r5, pc}

0000b816 <smp_timeout>:
{
    b816:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    b818:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b81c:	f1a0 04dc 	sub.w	r4, r0, #220	; 0xdc
    b820:	f3bf 8f5b 	dmb	ish
    b824:	f850 3cdc 	ldr.w	r3, [r0, #-220]
    b828:	f3bf 8f5b 	dmb	ish
    b82c:	f013 0f04 	tst.w	r3, #4
    b830:	d004      	beq.n	b83c <smp_timeout+0x26>
	    smp->chan.chan.conn->le.keys) {
    b832:	682b      	ldr	r3, [r5, #0]
    b834:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b836:	b108      	cbz	r0, b83c <smp_timeout+0x26>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    b838:	f001 fd5b 	bl	d2f2 <bt_keys_clear>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    b83c:	2108      	movs	r1, #8
    b83e:	4628      	mov	r0, r5
    b840:	f7ff ff03 	bl	b64a <smp_pairing_complete>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b844:	f3bf 8f5b 	dmb	ish
    b848:	e854 3f00 	ldrex	r3, [r4]
    b84c:	f043 0310 	orr.w	r3, r3, #16
    b850:	e844 3200 	strex	r2, r3, [r4]
    b854:	2a00      	cmp	r2, #0
    b856:	d1f7      	bne.n	b848 <smp_timeout+0x32>
    b858:	f3bf 8f5b 	dmb	ish
    b85c:	bd38      	pop	{r3, r4, r5, pc}
	...

0000b860 <legacy_distribute_keys>:
{
    b860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b864:	b088      	sub	sp, #32
	struct bt_conn *conn = smp->chan.chan.conn;
    b866:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    b868:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    b86a:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
    b86e:	f013 0f01 	tst.w	r3, #1
    b872:	d102      	bne.n	b87a <legacy_distribute_keys+0x1a>
}
    b874:	b008      	add	sp, #32
    b876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b87a:	4604      	mov	r4, r0
		bt_rand(key, sizeof(key));
    b87c:	2110      	movs	r1, #16
    b87e:	eb0d 0001 	add.w	r0, sp, r1
    b882:	f005 fef1 	bl	11668 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    b886:	2108      	movs	r1, #8
    b888:	eb0d 0001 	add.w	r0, sp, r1
    b88c:	f005 feec 	bl	11668 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    b890:	2102      	movs	r1, #2
    b892:	f10d 0006 	add.w	r0, sp, #6
    b896:	f005 fee7 	bl	11668 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    b89a:	2210      	movs	r2, #16
    b89c:	2106      	movs	r1, #6
    b89e:	4628      	mov	r0, r5
    b8a0:	f7ff f8f9 	bl	aa96 <smp_create_pdu>
		if (!buf) {
    b8a4:	4607      	mov	r7, r0
    b8a6:	2800      	cmp	r0, #0
    b8a8:	d0e4      	beq.n	b874 <legacy_distribute_keys+0x14>
		info = net_buf_add(buf, sizeof(*info));
    b8aa:	2110      	movs	r1, #16
    b8ac:	3008      	adds	r0, #8
    b8ae:	f00f fa51 	bl	1ad54 <net_buf_simple_add>
    b8b2:	4680      	mov	r8, r0
		memcpy(info->ltk, key, keys->enc_size);
    b8b4:	79f2      	ldrb	r2, [r6, #7]
    b8b6:	a904      	add	r1, sp, #16
    b8b8:	f7f4 fd02 	bl	2c0 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    b8bc:	79f0      	ldrb	r0, [r6, #7]
    b8be:	280f      	cmp	r0, #15
    b8c0:	d93b      	bls.n	b93a <legacy_distribute_keys+0xda>
		smp_send(smp, buf, NULL);
    b8c2:	2200      	movs	r2, #0
    b8c4:	4639      	mov	r1, r7
    b8c6:	4620      	mov	r0, r4
    b8c8:	f7ff f938 	bl	ab3c <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    b8cc:	220a      	movs	r2, #10
    b8ce:	2107      	movs	r1, #7
    b8d0:	4628      	mov	r0, r5
    b8d2:	f7ff f8e0 	bl	aa96 <smp_create_pdu>
		if (!buf) {
    b8d6:	4605      	mov	r5, r0
    b8d8:	2800      	cmp	r0, #0
    b8da:	d0cb      	beq.n	b874 <legacy_distribute_keys+0x14>
		ident = net_buf_add(buf, sizeof(*ident));
    b8dc:	210a      	movs	r1, #10
    b8de:	3008      	adds	r0, #8
    b8e0:	f00f fa38 	bl	1ad54 <net_buf_simple_add>
		ident->rand = rand;
    b8e4:	9b03      	ldr	r3, [sp, #12]
    b8e6:	9a02      	ldr	r2, [sp, #8]
    b8e8:	f8c0 2002 	str.w	r2, [r0, #2]
    b8ec:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    b8f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b8f4:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    b8f6:	4a14      	ldr	r2, [pc, #80]	; (b948 <legacy_distribute_keys+0xe8>)
    b8f8:	4629      	mov	r1, r5
    b8fa:	4620      	mov	r0, r4
    b8fc:	f7ff f91e 	bl	ab3c <smp_send>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b900:	f3bf 8f5b 	dmb	ish
    b904:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b908:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b90c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b910:	d0b0      	beq.n	b874 <legacy_distribute_keys+0x14>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    b912:	2101      	movs	r1, #1
    b914:	4630      	mov	r0, r6
    b916:	f001 fcd5 	bl	d2c4 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    b91a:	2210      	movs	r2, #16
    b91c:	eb0d 0102 	add.w	r1, sp, r2
    b920:	f106 007a 	add.w	r0, r6, #122	; 0x7a
    b924:	f7f4 fccc 	bl	2c0 <memcpy>
			keys->slave_ltk.rand = rand;
    b928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b92c:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
			keys->slave_ltk.ediv = ediv;
    b930:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b934:	f8a6 3078 	strh.w	r3, [r6, #120]	; 0x78
    b938:	e79c      	b.n	b874 <legacy_distribute_keys+0x14>
			memset(info->ltk + keys->enc_size, 0,
    b93a:	f1c0 0210 	rsb	r2, r0, #16
    b93e:	2100      	movs	r1, #0
    b940:	4440      	add	r0, r8
    b942:	f01e ffb9 	bl	2a8b8 <memset>
    b946:	e7bc      	b.n	b8c2 <legacy_distribute_keys+0x62>
    b948:	0000c57b 	.word	0x0000c57b

0000b94c <bt_smp_distribute_keys>:
{
    b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    b94e:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    b950:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (!keys) {
    b952:	b176      	cbz	r6, b972 <bt_smp_distribute_keys+0x26>
    b954:	4604      	mov	r4, r0
    b956:	f3bf 8f5b 	dmb	ish
    b95a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b95e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b962:	f013 0f20 	tst.w	r3, #32
    b966:	d005      	beq.n	b974 <bt_smp_distribute_keys+0x28>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    b968:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    b96c:	f013 0f04 	tst.w	r3, #4
    b970:	d103      	bne.n	b97a <bt_smp_distribute_keys+0x2e>
    b972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		legacy_distribute_keys(smp);
    b974:	f7ff ff74 	bl	b860 <legacy_distribute_keys>
    b978:	e7f6      	b.n	b968 <bt_smp_distribute_keys+0x1c>
		buf = smp_create_pdu(conn, BT_SMP_CMD_SIGNING_INFO,
    b97a:	2210      	movs	r2, #16
    b97c:	210a      	movs	r1, #10
    b97e:	4628      	mov	r0, r5
    b980:	f7ff f889 	bl	aa96 <smp_create_pdu>
		if (!buf) {
    b984:	4605      	mov	r5, r0
    b986:	2800      	cmp	r0, #0
    b988:	d0f3      	beq.n	b972 <bt_smp_distribute_keys+0x26>
		info = net_buf_add(buf, sizeof(*info));
    b98a:	2110      	movs	r1, #16
    b98c:	3008      	adds	r0, #8
    b98e:	f00f f9e1 	bl	1ad54 <net_buf_simple_add>
    b992:	4607      	mov	r7, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    b994:	2110      	movs	r1, #16
    b996:	f005 fe67 	bl	11668 <bt_rand>
    b99a:	f3bf 8f5b 	dmb	ish
    b99e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b9a2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b9a6:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b9aa:	d105      	bne.n	b9b8 <bt_smp_distribute_keys+0x6c>
		smp_send(smp, buf, sign_info_sent);
    b9ac:	4a09      	ldr	r2, [pc, #36]	; (b9d4 <bt_smp_distribute_keys+0x88>)
    b9ae:	4629      	mov	r1, r5
    b9b0:	4620      	mov	r0, r4
    b9b2:	f7ff f8c3 	bl	ab3c <smp_send>
    b9b6:	e7dc      	b.n	b972 <bt_smp_distribute_keys+0x26>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    b9b8:	2108      	movs	r1, #8
    b9ba:	4630      	mov	r0, r6
    b9bc:	f001 fc82 	bl	d2c4 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    b9c0:	2210      	movs	r2, #16
    b9c2:	4639      	mov	r1, r7
    b9c4:	f106 0048 	add.w	r0, r6, #72	; 0x48
    b9c8:	f7f4 fc7a 	bl	2c0 <memcpy>
			keys->local_csrk.cnt = 0;
    b9cc:	2300      	movs	r3, #0
    b9ce:	65b3      	str	r3, [r6, #88]	; 0x58
    b9d0:	e7ec      	b.n	b9ac <bt_smp_distribute_keys+0x60>
    b9d2:	bf00      	nop
    b9d4:	0000c571 	.word	0x0000c571

0000b9d8 <bt_smp_encrypt_change>:
	struct bt_conn *conn = chan->conn;
    b9d8:	6803      	ldr	r3, [r0, #0]
	if (hci_status) {
    b9da:	b911      	cbnz	r1, b9e2 <bt_smp_encrypt_change+0xa>
	if (!smp || !conn->encrypt) {
    b9dc:	b108      	cbz	r0, b9e2 <bt_smp_encrypt_change+0xa>
    b9de:	7a9a      	ldrb	r2, [r3, #10]
    b9e0:	b902      	cbnz	r2, b9e4 <bt_smp_encrypt_change+0xc>
    b9e2:	4770      	bx	lr
{
    b9e4:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    b9e6:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b9ea:	f3bf 8f5b 	dmb	ish
    b9ee:	e852 1f00 	ldrex	r1, [r2]
    b9f2:	f021 0402 	bic.w	r4, r1, #2
    b9f6:	e842 4e00 	strex	lr, r4, [r2]
    b9fa:	f1be 0f00 	cmp.w	lr, #0
    b9fe:	d1f6      	bne.n	b9ee <bt_smp_encrypt_change+0x16>
    ba00:	f3bf 8f5b 	dmb	ish
    ba04:	f011 0f02 	tst.w	r1, #2
    ba08:	d100      	bne.n	ba0c <bt_smp_encrypt_change+0x34>
    ba0a:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ba0c:	f3bf 8f5b 	dmb	ish
    ba10:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    ba14:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    ba18:	f011 0f08 	tst.w	r1, #8
    ba1c:	d04b      	beq.n	bab6 <bt_smp_encrypt_change+0xde>
    ba1e:	f3bf 8f5b 	dmb	ish
    ba22:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    ba26:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ba2a:	f011 0f20 	tst.w	r1, #32
    ba2e:	d015      	beq.n	ba5c <bt_smp_encrypt_change+0x84>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    ba30:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    ba34:	f011 0f08 	tst.w	r1, #8
    ba38:	d004      	beq.n	ba44 <bt_smp_encrypt_change+0x6c>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
    ba3a:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    ba3e:	f011 0f08 	tst.w	r1, #8
    ba42:	d146      	bne.n	bad2 <bt_smp_encrypt_change+0xfa>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    ba44:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    ba48:	f021 0108 	bic.w	r1, r1, #8
    ba4c:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    ba50:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    ba54:	f021 0108 	bic.w	r1, r1, #8
    ba58:	f880 117a 	strb.w	r1, [r0, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    ba5c:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    ba60:	f011 0f01 	tst.w	r1, #1
    ba64:	d142      	bne.n	baec <bt_smp_encrypt_change+0x114>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    ba66:	f011 0f02 	tst.w	r1, #2
    ba6a:	d14f      	bne.n	bb0c <bt_smp_encrypt_change+0x134>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ba6c:	f011 0f04 	tst.w	r1, #4
    ba70:	d15c      	bne.n	bb2c <bt_smp_encrypt_change+0x154>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ba72:	f3bf 8f5b 	dmb	ish
    ba76:	e852 1f00 	ldrex	r1, [r2]
    ba7a:	f041 0104 	orr.w	r1, r1, #4
    ba7e:	e842 1400 	strex	r4, r1, [r2]
    ba82:	2c00      	cmp	r4, #0
    ba84:	d1f7      	bne.n	ba76 <bt_smp_encrypt_change+0x9e>
    ba86:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    ba8a:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ba8c:	b91b      	cbnz	r3, ba96 <bt_smp_encrypt_change+0xbe>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    ba8e:	f890 317a 	ldrb.w	r3, [r0, #378]	; 0x17a
    ba92:	2b00      	cmp	r3, #0
    ba94:	d1b9      	bne.n	ba0a <bt_smp_encrypt_change+0x32>
    ba96:	4604      	mov	r4, r0
	bt_smp_distribute_keys(smp);
    ba98:	f7ff ff58 	bl	b94c <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    ba9c:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    baa0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    baa4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    baa8:	2b00      	cmp	r3, #0
    baaa:	d1ae      	bne.n	ba0a <bt_smp_encrypt_change+0x32>
		smp_pairing_complete(smp, 0);
    baac:	2100      	movs	r1, #0
    baae:	4620      	mov	r0, r4
    bab0:	f7ff fdcb 	bl	b64a <smp_pairing_complete>
    bab4:	e7a9      	b.n	ba0a <bt_smp_encrypt_change+0x32>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    bab6:	309c      	adds	r0, #156	; 0x9c
    bab8:	f3bf 8f5b 	dmb	ish
    babc:	e850 3f00 	ldrex	r3, [r0]
    bac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    bac4:	e840 3200 	strex	r2, r3, [r0]
    bac8:	2a00      	cmp	r2, #0
    baca:	d1f7      	bne.n	babc <bt_smp_encrypt_change+0xe4>
    bacc:	f3bf 8f5b 	dmb	ish
    bad0:	bd10      	pop	{r4, pc}
    bad2:	f3bf 8f5b 	dmb	ish
    bad6:	e852 1f00 	ldrex	r1, [r2]
    bada:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
    bade:	e842 1400 	strex	r4, r1, [r2]
    bae2:	2c00      	cmp	r4, #0
    bae4:	d1f7      	bne.n	bad6 <bt_smp_encrypt_change+0xfe>
    bae6:	f3bf 8f5b 	dmb	ish
    baea:	e7ab      	b.n	ba44 <bt_smp_encrypt_change+0x6c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    baec:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    baf0:	f3bf 8f5b 	dmb	ish
    baf4:	e851 4f00 	ldrex	r4, [r1]
    baf8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    bafc:	e841 4e00 	strex	lr, r4, [r1]
    bb00:	f1be 0f00 	cmp.w	lr, #0
    bb04:	d1f6      	bne.n	baf4 <bt_smp_encrypt_change+0x11c>
    bb06:	f3bf 8f5b 	dmb	ish
    bb0a:	e7b2      	b.n	ba72 <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    bb0c:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    bb10:	f3bf 8f5b 	dmb	ish
    bb14:	e851 4f00 	ldrex	r4, [r1]
    bb18:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    bb1c:	e841 4e00 	strex	lr, r4, [r1]
    bb20:	f1be 0f00 	cmp.w	lr, #0
    bb24:	d1f6      	bne.n	bb14 <bt_smp_encrypt_change+0x13c>
    bb26:	f3bf 8f5b 	dmb	ish
    bb2a:	e7a2      	b.n	ba72 <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    bb2c:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    bb30:	f3bf 8f5b 	dmb	ish
    bb34:	e851 4f00 	ldrex	r4, [r1]
    bb38:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    bb3c:	e841 4e00 	strex	lr, r4, [r1]
    bb40:	f1be 0f00 	cmp.w	lr, #0
    bb44:	d1f6      	bne.n	bb34 <bt_smp_encrypt_change+0x15c>
    bb46:	f3bf 8f5b 	dmb	ish
    bb4a:	e792      	b.n	ba72 <bt_smp_encrypt_change+0x9a>

0000bb4c <bt_smp_recv>:
{
    bb4c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    bb4e:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    bb50:	898b      	ldrh	r3, [r1, #12]
    bb52:	b903      	cbnz	r3, bb56 <bt_smp_recv+0xa>
    bb54:	bd70      	pop	{r4, r5, r6, pc}
    bb56:	460c      	mov	r4, r1
    bb58:	4605      	mov	r5, r0
	net_buf_pull(buf, sizeof(*hdr));
    bb5a:	2101      	movs	r1, #1
    bb5c:	f104 0008 	add.w	r0, r4, #8
    bb60:	f00f f945 	bl	1adee <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bb64:	f3bf 8f5b 	dmb	ish
    bb68:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bb6c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    bb70:	f013 0f10 	tst.w	r3, #16
    bb74:	d1ee      	bne.n	bb54 <bt_smp_recv+0x8>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    bb76:	7833      	ldrb	r3, [r6, #0]
    bb78:	2b0d      	cmp	r3, #13
    bb7a:	d824      	bhi.n	bbc6 <bt_smp_recv+0x7a>
    bb7c:	4a21      	ldr	r2, [pc, #132]	; (bc04 <bt_smp_recv+0xb8>)
    bb7e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    bb82:	b302      	cbz	r2, bbc6 <bt_smp_recv+0x7a>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    bb84:	f105 029c 	add.w	r2, r5, #156	; 0x9c
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    bb88:	f003 001f 	and.w	r0, r3, #31
    bb8c:	2101      	movs	r1, #1
    bb8e:	4081      	lsls	r1, r0
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bb90:	095b      	lsrs	r3, r3, #5
    bb92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    bb96:	43c8      	mvns	r0, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bb98:	f3bf 8f5b 	dmb	ish
    bb9c:	e853 2f00 	ldrex	r2, [r3]
    bba0:	ea02 0e00 	and.w	lr, r2, r0
    bba4:	e843 ec00 	strex	ip, lr, [r3]
    bba8:	f1bc 0f00 	cmp.w	ip, #0
    bbac:	d1f6      	bne.n	bb9c <bt_smp_recv+0x50>
    bbae:	f3bf 8f5b 	dmb	ish
    bbb2:	4211      	tst	r1, r2
    bbb4:	d10c      	bne.n	bbd0 <bt_smp_recv+0x84>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    bbb6:	7833      	ldrb	r3, [r6, #0]
    bbb8:	2b05      	cmp	r3, #5
    bbba:	d0cb      	beq.n	bb54 <bt_smp_recv+0x8>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    bbbc:	2108      	movs	r1, #8
    bbbe:	4628      	mov	r0, r5
    bbc0:	f7ff fd47 	bl	b652 <smp_error>
    bbc4:	bd70      	pop	{r4, r5, r6, pc}
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    bbc6:	2107      	movs	r1, #7
    bbc8:	4628      	mov	r0, r5
    bbca:	f7ff fd42 	bl	b652 <smp_error>
		return;
    bbce:	bd70      	pop	{r4, r5, r6, pc}
	if (buf->len != handlers[hdr->code].expect_len) {
    bbd0:	89a1      	ldrh	r1, [r4, #12]
    bbd2:	7832      	ldrb	r2, [r6, #0]
    bbd4:	4b0b      	ldr	r3, [pc, #44]	; (bc04 <bt_smp_recv+0xb8>)
    bbd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    bbda:	791b      	ldrb	r3, [r3, #4]
    bbdc:	4299      	cmp	r1, r3
    bbde:	d004      	beq.n	bbea <bt_smp_recv+0x9e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    bbe0:	210a      	movs	r1, #10
    bbe2:	4628      	mov	r0, r5
    bbe4:	f7ff fd35 	bl	b652 <smp_error>
		return;
    bbe8:	bd70      	pop	{r4, r5, r6, pc}
	err = handlers[hdr->code].func(smp, buf);
    bbea:	4b06      	ldr	r3, [pc, #24]	; (bc04 <bt_smp_recv+0xb8>)
    bbec:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    bbf0:	4621      	mov	r1, r4
    bbf2:	4628      	mov	r0, r5
    bbf4:	4798      	blx	r3
	if (err) {
    bbf6:	4601      	mov	r1, r0
    bbf8:	2800      	cmp	r0, #0
    bbfa:	d0ab      	beq.n	bb54 <bt_smp_recv+0x8>
		smp_error(smp, err);
    bbfc:	4628      	mov	r0, r5
    bbfe:	f7ff fd28 	bl	b652 <smp_error>
    bc02:	e7a7      	b.n	bb54 <bt_smp_recv+0x8>
    bc04:	000315b4 	.word	0x000315b4

0000bc08 <smp_dhkey_check>:
{
    bc08:	b570      	push	{r4, r5, r6, lr}
    bc0a:	b08c      	sub	sp, #48	; 0x30
    bc0c:	4605      	mov	r5, r0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    bc0e:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    bc10:	6803      	ldr	r3, [r0, #0]
    bc12:	78dc      	ldrb	r4, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bc14:	b12c      	cbz	r4, bc22 <smp_dhkey_check+0x1a>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    bc16:	2c01      	cmp	r4, #1
    bc18:	d058      	beq.n	bccc <smp_dhkey_check+0xc4>
	return 0;
    bc1a:	2400      	movs	r4, #0
}
    bc1c:	4620      	mov	r0, r4
    bc1e:	b00c      	add	sp, #48	; 0x30
    bc20:	bd70      	pop	{r4, r5, r6, pc}
		memset(r, 0, sizeof(r));
    bc22:	2210      	movs	r2, #16
    bc24:	2100      	movs	r1, #0
    bc26:	a808      	add	r0, sp, #32
    bc28:	f01e fe46 	bl	2a8b8 <memset>
		switch (smp->method) {
    bc2c:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    bc30:	2b03      	cmp	r3, #3
    bc32:	d847      	bhi.n	bcc4 <smp_dhkey_check+0xbc>
    bc34:	e8df f003 	tbb	[pc, r3]
    bc38:	08020208 	.word	0x08020208
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    bc3c:	2204      	movs	r2, #4
    bc3e:	f505 71ba 	add.w	r1, r5, #372	; 0x174
    bc42:	a808      	add	r0, sp, #32
    bc44:	f7f4 fb3c 	bl	2c0 <memcpy>
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    bc48:	f105 02ad 	add.w	r2, r5, #173	; 0xad
			   &smp->chan.chan.conn->le.resp_addr,
    bc4c:	682b      	ldr	r3, [r5, #0]
    bc4e:	f103 0156 	add.w	r1, r3, #86	; 0x56
			   &smp->chan.chan.conn->le.init_addr, e)) {
    bc52:	334f      	adds	r3, #79	; 0x4f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    bc54:	a804      	add	r0, sp, #16
    bc56:	9003      	str	r0, [sp, #12]
    bc58:	9302      	str	r3, [sp, #8]
    bc5a:	9101      	str	r1, [sp, #4]
    bc5c:	9200      	str	r2, [sp, #0]
    bc5e:	ab08      	add	r3, sp, #32
    bc60:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
    bc64:	f105 01d3 	add.w	r1, r5, #211	; 0xd3
    bc68:	f205 1063 	addw	r0, r5, #355	; 0x163
    bc6c:	f7ff f96e 	bl	af4c <smp_f6>
    bc70:	b108      	cbz	r0, bc76 <smp_dhkey_check+0x6e>
			return BT_SMP_ERR_UNSPECIFIED;
    bc72:	2408      	movs	r4, #8
    bc74:	e7d2      	b.n	bc1c <smp_dhkey_check+0x14>
		if (memcmp(e, req->e, 16)) {
    bc76:	2210      	movs	r2, #16
    bc78:	4631      	mov	r1, r6
    bc7a:	eb0d 0002 	add.w	r0, sp, r2
    bc7e:	f01e fd87 	bl	2a790 <memcmp>
    bc82:	b108      	cbz	r0, bc88 <smp_dhkey_check+0x80>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    bc84:	240b      	movs	r4, #11
    bc86:	e7c9      	b.n	bc1c <smp_dhkey_check+0x14>
		enc_size = get_encryption_key_size(smp);
    bc88:	4628      	mov	r0, r5
    bc8a:	f7fe fe63 	bl	a954 <get_encryption_key_size>
						smp->tk, enc_size) < 0) {
    bc8e:	f105 03e3 	add.w	r3, r5, #227	; 0xe3
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    bc92:	9002      	str	r0, [sp, #8]
    bc94:	9301      	str	r3, [sp, #4]
    bc96:	2300      	movs	r3, #0
    bc98:	9300      	str	r3, [sp, #0]
    bc9a:	2200      	movs	r2, #0
    bc9c:	2300      	movs	r3, #0
    bc9e:	6828      	ldr	r0, [r5, #0]
    bca0:	f7fb f898 	bl	6dd4 <bt_conn_le_start_encryption>
    bca4:	2800      	cmp	r0, #0
    bca6:	db0f      	blt.n	bcc8 <smp_dhkey_check+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    bca8:	35a0      	adds	r5, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bcaa:	f3bf 8f5b 	dmb	ish
    bcae:	e855 3f00 	ldrex	r3, [r5]
    bcb2:	f043 0302 	orr.w	r3, r3, #2
    bcb6:	e845 3200 	strex	r2, r3, [r5]
    bcba:	2a00      	cmp	r2, #0
    bcbc:	d1f7      	bne.n	bcae <smp_dhkey_check+0xa6>
    bcbe:	f3bf 8f5b 	dmb	ish
		return 0;
    bcc2:	e7ab      	b.n	bc1c <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    bcc4:	2408      	movs	r4, #8
    bcc6:	e7a9      	b.n	bc1c <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    bcc8:	2408      	movs	r4, #8
    bcca:	e7a7      	b.n	bc1c <smp_dhkey_check+0x14>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    bccc:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bcd0:	f3bf 8f5b 	dmb	ish
    bcd4:	e854 3f00 	ldrex	r3, [r4]
    bcd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    bcdc:	e844 3200 	strex	r2, r3, [r4]
    bce0:	2a00      	cmp	r2, #0
    bce2:	d1f7      	bne.n	bcd4 <smp_dhkey_check+0xcc>
    bce4:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    bce8:	2210      	movs	r2, #16
    bcea:	4631      	mov	r1, r6
    bcec:	f205 1053 	addw	r0, r5, #339	; 0x153
    bcf0:	f7f4 fae6 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bcf4:	f3bf 8f5b 	dmb	ish
    bcf8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bcfc:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    bd00:	f013 0f80 	tst.w	r3, #128	; 0x80
    bd04:	d10d      	bne.n	bd22 <smp_dhkey_check+0x11a>
    bd06:	f3bf 8f5b 	dmb	ish
    bd0a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bd0e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    bd12:	f413 7f00 	tst.w	r3, #512	; 0x200
    bd16:	d112      	bne.n	bd3e <smp_dhkey_check+0x136>
		return compute_and_check_and_send_slave_dhcheck(smp);
    bd18:	4628      	mov	r0, r5
    bd1a:	f7ff f9f5 	bl	b108 <compute_and_check_and_send_slave_dhcheck>
    bd1e:	4604      	mov	r4, r0
    bd20:	e77c      	b.n	bc1c <smp_dhkey_check+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bd22:	f3bf 8f5b 	dmb	ish
    bd26:	e854 3f00 	ldrex	r3, [r4]
    bd2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bd2e:	e844 3200 	strex	r2, r3, [r4]
    bd32:	2a00      	cmp	r2, #0
    bd34:	d1f7      	bne.n	bd26 <smp_dhkey_check+0x11e>
    bd36:	f3bf 8f5b 	dmb	ish
			return 0;
    bd3a:	2400      	movs	r4, #0
    bd3c:	e76e      	b.n	bc1c <smp_dhkey_check+0x14>
    bd3e:	f3bf 8f5b 	dmb	ish
    bd42:	e854 3f00 	ldrex	r3, [r4]
    bd46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bd4a:	e844 3200 	strex	r2, r3, [r4]
    bd4e:	2a00      	cmp	r2, #0
    bd50:	d1f7      	bne.n	bd42 <smp_dhkey_check+0x13a>
    bd52:	f3bf 8f5b 	dmb	ish
			return 0;
    bd56:	2400      	movs	r4, #0
    bd58:	e760      	b.n	bc1c <smp_dhkey_check+0x14>

0000bd5a <legacy_pairing_random>:
{
    bd5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd5e:	b088      	sub	sp, #32
    bd60:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    bd62:	4605      	mov	r5, r0
    bd64:	f855 6be3 	ldr.w	r6, [r5], #227
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    bd68:	f100 08d3 	add.w	r8, r0, #211	; 0xd3
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    bd6c:	f106 034f 	add.w	r3, r6, #79	; 0x4f
    bd70:	f106 0256 	add.w	r2, r6, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    bd74:	a904      	add	r1, sp, #16
    bd76:	9102      	str	r1, [sp, #8]
    bd78:	9201      	str	r2, [sp, #4]
    bd7a:	9300      	str	r3, [sp, #0]
    bd7c:	f100 03ac 	add.w	r3, r0, #172	; 0xac
    bd80:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
    bd84:	4641      	mov	r1, r8
    bd86:	4628      	mov	r0, r5
    bd88:	f7ff fada 	bl	b340 <smp_c1>
	if (err) {
    bd8c:	b120      	cbz	r0, bd98 <legacy_pairing_random+0x3e>
		return BT_SMP_ERR_UNSPECIFIED;
    bd8e:	2708      	movs	r7, #8
}
    bd90:	4638      	mov	r0, r7
    bd92:	b008      	add	sp, #32
    bd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    bd98:	2210      	movs	r2, #16
    bd9a:	eb0d 0102 	add.w	r1, sp, r2
    bd9e:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    bda2:	f01e fcf5 	bl	2a790 <memcmp>
    bda6:	b108      	cbz	r0, bdac <legacy_pairing_random+0x52>
		return BT_SMP_ERR_CONFIRM_FAILED;
    bda8:	2704      	movs	r7, #4
    bdaa:	e7f1      	b.n	bd90 <legacy_pairing_random+0x36>
	    conn->role == BT_HCI_ROLE_MASTER) {
    bdac:	78f7      	ldrb	r7, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bdae:	bb3f      	cbnz	r7, be00 <legacy_pairing_random+0xa6>
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
    bdb0:	ab04      	add	r3, sp, #16
    bdb2:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    bdb6:	4641      	mov	r1, r8
    bdb8:	4628      	mov	r0, r5
    bdba:	f7ff fbf0 	bl	b59e <smp_s1>
		if (err) {
    bdbe:	b108      	cbz	r0, bdc4 <legacy_pairing_random+0x6a>
			return BT_SMP_ERR_UNSPECIFIED;
    bdc0:	2708      	movs	r7, #8
    bdc2:	e7e5      	b.n	bd90 <legacy_pairing_random+0x36>
						get_encryption_key_size(smp))) {
    bdc4:	4620      	mov	r0, r4
    bdc6:	f7fe fdc5 	bl	a954 <get_encryption_key_size>
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    bdca:	9002      	str	r0, [sp, #8]
    bdcc:	ab04      	add	r3, sp, #16
    bdce:	9301      	str	r3, [sp, #4]
    bdd0:	2300      	movs	r3, #0
    bdd2:	9300      	str	r3, [sp, #0]
    bdd4:	2200      	movs	r2, #0
    bdd6:	2300      	movs	r3, #0
    bdd8:	4630      	mov	r0, r6
    bdda:	f7fa fffb 	bl	6dd4 <bt_conn_le_start_encryption>
    bdde:	b108      	cbz	r0, bde4 <legacy_pairing_random+0x8a>
			return BT_SMP_ERR_UNSPECIFIED;
    bde0:	2708      	movs	r7, #8
    bde2:	e7d5      	b.n	bd90 <legacy_pairing_random+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    bde4:	34a0      	adds	r4, #160	; 0xa0
    bde6:	f3bf 8f5b 	dmb	ish
    bdea:	e854 3f00 	ldrex	r3, [r4]
    bdee:	f043 0302 	orr.w	r3, r3, #2
    bdf2:	e844 3200 	strex	r2, r3, [r4]
    bdf6:	2a00      	cmp	r2, #0
    bdf8:	d1f7      	bne.n	bdea <legacy_pairing_random+0x90>
    bdfa:	f3bf 8f5b 	dmb	ish
		return 0;
    bdfe:	e7c7      	b.n	bd90 <legacy_pairing_random+0x36>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
    be00:	ab04      	add	r3, sp, #16
    be02:	4642      	mov	r2, r8
    be04:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    be08:	4628      	mov	r0, r5
    be0a:	f7ff fbc8 	bl	b59e <smp_s1>
		if (err) {
    be0e:	b108      	cbz	r0, be14 <legacy_pairing_random+0xba>
			return BT_SMP_ERR_UNSPECIFIED;
    be10:	2708      	movs	r7, #8
    be12:	e7bd      	b.n	bd90 <legacy_pairing_random+0x36>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    be14:	2210      	movs	r2, #16
    be16:	eb0d 0102 	add.w	r1, sp, r2
    be1a:	4628      	mov	r0, r5
    be1c:	f7f4 fa50 	bl	2c0 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    be20:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    be24:	f3bf 8f5b 	dmb	ish
    be28:	e853 2f00 	ldrex	r2, [r3]
    be2c:	f042 0202 	orr.w	r2, r2, #2
    be30:	e843 2100 	strex	r1, r2, [r3]
    be34:	2900      	cmp	r1, #0
    be36:	d1f7      	bne.n	be28 <legacy_pairing_random+0xce>
    be38:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    be3c:	4620      	mov	r0, r4
    be3e:	f7fe feea 	bl	ac16 <smp_send_pairing_random>
	return 0;
    be42:	2700      	movs	r7, #0
    be44:	e7a4      	b.n	bd90 <legacy_pairing_random+0x36>
	...

0000be48 <smp_pairing_random>:
{
    be48:	b5f0      	push	{r4, r5, r6, r7, lr}
    be4a:	b085      	sub	sp, #20
    be4c:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    be4e:	f100 05d3 	add.w	r5, r0, #211	; 0xd3
    be52:	2210      	movs	r2, #16
    be54:	6889      	ldr	r1, [r1, #8]
    be56:	4628      	mov	r0, r5
    be58:	f7f4 fa32 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    be5c:	f3bf 8f5b 	dmb	ish
    be60:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    be64:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    be68:	f013 0f20 	tst.w	r3, #32
    be6c:	d00d      	beq.n	be8a <smp_pairing_random+0x42>
    be6e:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    be72:	6823      	ldr	r3, [r4, #0]
    be74:	78db      	ldrb	r3, [r3, #3]
    be76:	b17b      	cbz	r3, be98 <smp_pairing_random+0x50>
	switch (smp->method) {
    be78:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    be7c:	2b03      	cmp	r3, #3
    be7e:	f200 8106 	bhi.w	c08e <smp_pairing_random+0x246>
    be82:	e8df f003 	tbb	[pc, r3]
    be86:	bfa0      	.short	0xbfa0
    be88:	81bf      	.short	0x81bf
		return legacy_pairing_random(smp);
    be8a:	4620      	mov	r0, r4
    be8c:	f7ff ff65 	bl	bd5a <legacy_pairing_random>
    be90:	4606      	mov	r6, r0
}
    be92:	4630      	mov	r0, r6
    be94:	b005      	add	sp, #20
    be96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sc_smp_check_confirm(smp);
    be98:	4620      	mov	r0, r4
    be9a:	f7fe ff83 	bl	ada4 <sc_smp_check_confirm>
		if (err) {
    be9e:	4606      	mov	r6, r0
    bea0:	2800      	cmp	r0, #0
    bea2:	d1f6      	bne.n	be92 <smp_pairing_random+0x4a>
		switch (smp->method) {
    bea4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bea8:	2b03      	cmp	r3, #3
    beaa:	f200 80ee 	bhi.w	c08a <smp_pairing_random+0x242>
    beae:	e8df f003 	tbb	[pc, r3]
    beb2:	2e50      	.short	0x2e50
    beb4:	022e      	.short	0x022e
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    beb6:	ab03      	add	r3, sp, #12
    beb8:	9300      	str	r3, [sp, #0]
    beba:	462b      	mov	r3, r5
    bebc:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    bec0:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    bec4:	4873      	ldr	r0, [pc, #460]	; (c094 <smp_pairing_random+0x24c>)
    bec6:	f7ff f995 	bl	b1f4 <smp_g2>
    beca:	b108      	cbz	r0, bed0 <smp_pairing_random+0x88>
				return BT_SMP_ERR_UNSPECIFIED;
    becc:	2608      	movs	r6, #8
    bece:	e7e0      	b.n	be92 <smp_pairing_random+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bed0:	f3bf 8f5b 	dmb	ish
    bed4:	e857 3f00 	ldrex	r3, [r7]
    bed8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bedc:	e847 3200 	strex	r2, r3, [r7]
    bee0:	2a00      	cmp	r2, #0
    bee2:	d1f7      	bne.n	bed4 <smp_pairing_random+0x8c>
    bee4:	f3bf 8f5b 	dmb	ish
    bee8:	f3bf 8f5b 	dmb	ish
    beec:	e857 3f00 	ldrex	r3, [r7]
    bef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bef4:	e847 3200 	strex	r2, r3, [r7]
    bef8:	2a00      	cmp	r2, #0
    befa:	d1f7      	bne.n	beec <smp_pairing_random+0xa4>
    befc:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    bf00:	4b65      	ldr	r3, [pc, #404]	; (c098 <smp_pairing_random+0x250>)
    bf02:	681b      	ldr	r3, [r3, #0]
    bf04:	689b      	ldr	r3, [r3, #8]
    bf06:	9903      	ldr	r1, [sp, #12]
    bf08:	6820      	ldr	r0, [r4, #0]
    bf0a:	4798      	blx	r3
			return 0;
    bf0c:	e7c1      	b.n	be92 <smp_pairing_random+0x4a>
			smp->passkey_round++;
    bf0e:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    bf12:	3301      	adds	r3, #1
    bf14:	b2db      	uxtb	r3, r3
    bf16:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			if (smp->passkey_round == 20) {
    bf1a:	2b14      	cmp	r3, #20
    bf1c:	d019      	beq.n	bf52 <smp_pairing_random+0x10a>
			if (bt_rand(smp->prnd, 16)) {
    bf1e:	2110      	movs	r1, #16
    bf20:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    bf24:	f005 fba0 	bl	11668 <bt_rand>
    bf28:	b108      	cbz	r0, bf2e <smp_pairing_random+0xe6>
				return BT_SMP_ERR_UNSPECIFIED;
    bf2a:	2608      	movs	r6, #8
    bf2c:	e7b1      	b.n	be92 <smp_pairing_random+0x4a>
			atomic_set_bit(&smp->allowed_cmds,
    bf2e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    bf32:	f3bf 8f5b 	dmb	ish
    bf36:	e853 2f00 	ldrex	r2, [r3]
    bf3a:	f042 0208 	orr.w	r2, r2, #8
    bf3e:	e843 2100 	strex	r1, r2, [r3]
    bf42:	2900      	cmp	r1, #0
    bf44:	d1f7      	bne.n	bf36 <smp_pairing_random+0xee>
    bf46:	f3bf 8f5b 	dmb	ish
			smp_send_pairing_confirm(smp);
    bf4a:	4620      	mov	r0, r4
    bf4c:	f7ff f9aa 	bl	b2a4 <smp_send_pairing_confirm>
			return 0;
    bf50:	e79f      	b.n	be92 <smp_pairing_random+0x4a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bf52:	f3bf 8f5b 	dmb	ish
    bf56:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bf5a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    bf5e:	f013 0f80 	tst.w	r3, #128	; 0x80
    bf62:	d00c      	beq.n	bf7e <smp_pairing_random+0x136>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bf64:	f3bf 8f5b 	dmb	ish
    bf68:	e857 3f00 	ldrex	r3, [r7]
    bf6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bf70:	e847 3200 	strex	r2, r3, [r7]
    bf74:	2a00      	cmp	r2, #0
    bf76:	d1f7      	bne.n	bf68 <smp_pairing_random+0x120>
    bf78:	f3bf 8f5b 	dmb	ish
			return 0;
    bf7c:	e789      	b.n	be92 <smp_pairing_random+0x4a>
		return compute_and_send_master_dhcheck(smp);
    bf7e:	4620      	mov	r0, r4
    bf80:	f7ff f868 	bl	b054 <compute_and_send_master_dhcheck>
    bf84:	4606      	mov	r6, r0
    bf86:	e784      	b.n	be92 <smp_pairing_random+0x4a>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    bf88:	ab03      	add	r3, sp, #12
    bf8a:	9300      	str	r3, [sp, #0]
    bf8c:	f104 03c3 	add.w	r3, r4, #195	; 0xc3
    bf90:	462a      	mov	r2, r5
    bf92:	4940      	ldr	r1, [pc, #256]	; (c094 <smp_pairing_random+0x24c>)
    bf94:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    bf98:	f7ff f92c 	bl	b1f4 <smp_g2>
    bf9c:	b108      	cbz	r0, bfa2 <smp_pairing_random+0x15a>
			return BT_SMP_ERR_UNSPECIFIED;
    bf9e:	2608      	movs	r6, #8
    bfa0:	e777      	b.n	be92 <smp_pairing_random+0x4a>
    bfa2:	f3bf 8f5b 	dmb	ish
    bfa6:	e857 3f00 	ldrex	r3, [r7]
    bfaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bfae:	e847 3200 	strex	r2, r3, [r7]
    bfb2:	2a00      	cmp	r2, #0
    bfb4:	d1f7      	bne.n	bfa6 <smp_pairing_random+0x15e>
    bfb6:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    bfba:	4b37      	ldr	r3, [pc, #220]	; (c098 <smp_pairing_random+0x250>)
    bfbc:	681b      	ldr	r3, [r3, #0]
    bfbe:	689b      	ldr	r3, [r3, #8]
    bfc0:	9903      	ldr	r1, [sp, #12]
    bfc2:	6820      	ldr	r0, [r4, #0]
    bfc4:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    bfc6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    bfca:	f3bf 8f5b 	dmb	ish
    bfce:	e853 2f00 	ldrex	r2, [r3]
    bfd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    bfd6:	e843 2100 	strex	r1, r2, [r3]
    bfda:	2900      	cmp	r1, #0
    bfdc:	d1f7      	bne.n	bfce <smp_pairing_random+0x186>
    bfde:	f3bf 8f5b 	dmb	ish
    bfe2:	f3bf 8f5b 	dmb	ish
    bfe6:	e857 3f00 	ldrex	r3, [r7]
    bfea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    bfee:	e847 3200 	strex	r2, r3, [r7]
    bff2:	2a00      	cmp	r2, #0
    bff4:	d1f7      	bne.n	bfe6 <smp_pairing_random+0x19e>
    bff6:	f3bf 8f5b 	dmb	ish
	smp_send_pairing_random(smp);
    bffa:	4620      	mov	r0, r4
    bffc:	f7fe fe0b 	bl	ac16 <smp_send_pairing_random>
	return 0;
    c000:	2600      	movs	r6, #0
    c002:	e746      	b.n	be92 <smp_pairing_random+0x4a>
		err = sc_smp_check_confirm(smp);
    c004:	4620      	mov	r0, r4
    c006:	f7fe fecd 	bl	ada4 <sc_smp_check_confirm>
		if (err) {
    c00a:	4606      	mov	r6, r0
    c00c:	2800      	cmp	r0, #0
    c00e:	f47f af40 	bne.w	be92 <smp_pairing_random+0x4a>
		atomic_set_bit(&smp->allowed_cmds,
    c012:	f104 059c 	add.w	r5, r4, #156	; 0x9c
    c016:	f3bf 8f5b 	dmb	ish
    c01a:	e855 3f00 	ldrex	r3, [r5]
    c01e:	f043 0308 	orr.w	r3, r3, #8
    c022:	e845 3200 	strex	r2, r3, [r5]
    c026:	2a00      	cmp	r2, #0
    c028:	d1f7      	bne.n	c01a <smp_pairing_random+0x1d2>
    c02a:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    c02e:	4620      	mov	r0, r4
    c030:	f7fe fdf1 	bl	ac16 <smp_send_pairing_random>
		smp->passkey_round++;
    c034:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    c038:	3301      	adds	r3, #1
    c03a:	b2db      	uxtb	r3, r3
    c03c:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		if (smp->passkey_round == 20) {
    c040:	2b14      	cmp	r3, #20
    c042:	d009      	beq.n	c058 <smp_pairing_random+0x210>
		if (bt_rand(smp->prnd, 16)) {
    c044:	2110      	movs	r1, #16
    c046:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    c04a:	f005 fb0d 	bl	11668 <bt_rand>
    c04e:	2800      	cmp	r0, #0
    c050:	f43f af1f 	beq.w	be92 <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    c054:	2608      	movs	r6, #8
    c056:	e71c      	b.n	be92 <smp_pairing_random+0x4a>
    c058:	f3bf 8f5b 	dmb	ish
    c05c:	e855 3f00 	ldrex	r3, [r5]
    c060:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c064:	e845 3200 	strex	r2, r3, [r5]
    c068:	2a00      	cmp	r2, #0
    c06a:	d1f7      	bne.n	c05c <smp_pairing_random+0x214>
    c06c:	f3bf 8f5b 	dmb	ish
    c070:	f3bf 8f5b 	dmb	ish
    c074:	e857 3f00 	ldrex	r3, [r7]
    c078:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c07c:	e847 3200 	strex	r2, r3, [r7]
    c080:	2a00      	cmp	r2, #0
    c082:	d1f7      	bne.n	c074 <smp_pairing_random+0x22c>
    c084:	f3bf 8f5b 	dmb	ish
			return 0;
    c088:	e703      	b.n	be92 <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    c08a:	2608      	movs	r6, #8
    c08c:	e701      	b.n	be92 <smp_pairing_random+0x4a>
		return BT_SMP_ERR_UNSPECIFIED;
    c08e:	2608      	movs	r6, #8
    c090:	e6ff      	b.n	be92 <smp_pairing_random+0x4a>
    c092:	bf00      	nop
    c094:	20000f48 	.word	0x20000f48
    c098:	20002f90 	.word	0x20002f90

0000c09c <generate_dhkey>:
{
    c09c:	b510      	push	{r4, lr}
    c09e:	4604      	mov	r4, r0
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    c0a0:	490a      	ldr	r1, [pc, #40]	; (c0cc <generate_dhkey+0x30>)
    c0a2:	30f3      	adds	r0, #243	; 0xf3
    c0a4:	f7fa fd1e 	bl	6ae4 <bt_dh_key_gen>
    c0a8:	b108      	cbz	r0, c0ae <generate_dhkey+0x12>
		return BT_SMP_ERR_UNSPECIFIED;
    c0aa:	2008      	movs	r0, #8
}
    c0ac:	bd10      	pop	{r4, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    c0ae:	34a0      	adds	r4, #160	; 0xa0
    c0b0:	f3bf 8f5b 	dmb	ish
    c0b4:	e854 3f00 	ldrex	r3, [r4]
    c0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c0bc:	e844 3200 	strex	r2, r3, [r4]
    c0c0:	2a00      	cmp	r2, #0
    c0c2:	d1f7      	bne.n	c0b4 <generate_dhkey+0x18>
    c0c4:	f3bf 8f5b 	dmb	ish
	return 0;
    c0c8:	bd10      	pop	{r4, pc}
    c0ca:	bf00      	nop
    c0cc:	0000b68d 	.word	0x0000b68d

0000c0d0 <smp_public_key_slave>:
{
    c0d0:	b510      	push	{r4, lr}
    c0d2:	4604      	mov	r4, r0
	err = sc_send_public_key(smp);
    c0d4:	f7fe fd60 	bl	ab98 <sc_send_public_key>
	if (err) {
    c0d8:	4603      	mov	r3, r0
    c0da:	2800      	cmp	r0, #0
    c0dc:	d154      	bne.n	c188 <smp_public_key_slave+0xb8>
	switch (smp->method) {
    c0de:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c0e2:	2b03      	cmp	r3, #3
    c0e4:	d852      	bhi.n	c18c <smp_public_key_slave+0xbc>
    c0e6:	e8df f003 	tbb	[pc, r3]
    c0ea:	2a02      	.short	0x2a02
    c0ec:	0216      	.short	0x0216
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    c0ee:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c0f2:	f3bf 8f5b 	dmb	ish
    c0f6:	e853 2f00 	ldrex	r2, [r3]
    c0fa:	f042 0210 	orr.w	r2, r2, #16
    c0fe:	e843 2100 	strex	r1, r2, [r3]
    c102:	2900      	cmp	r1, #0
    c104:	d1f7      	bne.n	c0f6 <smp_public_key_slave+0x26>
    c106:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
    c10a:	4620      	mov	r0, r4
    c10c:	f7ff f8ca 	bl	b2a4 <smp_send_pairing_confirm>
		if (err) {
    c110:	4603      	mov	r3, r0
    c112:	b3a8      	cbz	r0, c180 <smp_public_key_slave+0xb0>
    c114:	e038      	b.n	c188 <smp_public_key_slave+0xb8>
		err = display_passkey(smp);
    c116:	4620      	mov	r0, r4
    c118:	f7fe fcea 	bl	aaf0 <display_passkey>
		if (err) {
    c11c:	4603      	mov	r3, r0
    c11e:	bb98      	cbnz	r0, c188 <smp_public_key_slave+0xb8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c120:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c124:	f3bf 8f5b 	dmb	ish
    c128:	e853 2f00 	ldrex	r2, [r3]
    c12c:	f042 0208 	orr.w	r2, r2, #8
    c130:	e843 2100 	strex	r1, r2, [r3]
    c134:	2900      	cmp	r1, #0
    c136:	d1f7      	bne.n	c128 <smp_public_key_slave+0x58>
    c138:	f3bf 8f5b 	dmb	ish
    c13c:	e020      	b.n	c180 <smp_public_key_slave+0xb0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c13e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c142:	f3bf 8f5b 	dmb	ish
    c146:	e853 2f00 	ldrex	r2, [r3]
    c14a:	f042 0208 	orr.w	r2, r2, #8
    c14e:	e843 2100 	strex	r1, r2, [r3]
    c152:	2900      	cmp	r1, #0
    c154:	d1f7      	bne.n	c146 <smp_public_key_slave+0x76>
    c156:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c15a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c15e:	f3bf 8f5b 	dmb	ish
    c162:	e853 2f00 	ldrex	r2, [r3]
    c166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    c16a:	e843 2100 	strex	r1, r2, [r3]
    c16e:	2900      	cmp	r1, #0
    c170:	d1f7      	bne.n	c162 <smp_public_key_slave+0x92>
    c172:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(smp->chan.chan.conn);
    c176:	4b06      	ldr	r3, [pc, #24]	; (c190 <smp_public_key_slave+0xc0>)
    c178:	681b      	ldr	r3, [r3, #0]
    c17a:	685b      	ldr	r3, [r3, #4]
    c17c:	6820      	ldr	r0, [r4, #0]
    c17e:	4798      	blx	r3
	return generate_dhkey(smp);
    c180:	4620      	mov	r0, r4
    c182:	f7ff ff8b 	bl	c09c <generate_dhkey>
    c186:	4603      	mov	r3, r0
}
    c188:	4618      	mov	r0, r3
    c18a:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    c18c:	2308      	movs	r3, #8
    c18e:	e7fb      	b.n	c188 <smp_public_key_slave+0xb8>
    c190:	20002f90 	.word	0x20002f90

0000c194 <bt_smp_pkey_ready>:
{
    c194:	b538      	push	{r3, r4, r5, lr}
	if (!pkey) {
    c196:	b150      	cbz	r0, c1ae <bt_smp_pkey_ready+0x1a>
    c198:	4601      	mov	r1, r0
	memcpy(sc_public_key, pkey, 64);
    c19a:	2240      	movs	r2, #64	; 0x40
    c19c:	4826      	ldr	r0, [pc, #152]	; (c238 <bt_smp_pkey_ready+0xa4>)
    c19e:	f7f4 f88f 	bl	2c0 <memcpy>
	sc_local_pkey_valid = true;
    c1a2:	2201      	movs	r2, #1
    c1a4:	4b25      	ldr	r3, [pc, #148]	; (c23c <bt_smp_pkey_ready+0xa8>)
    c1a6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    c1a8:	2400      	movs	r4, #0
    c1aa:	b124      	cbz	r4, c1b6 <bt_smp_pkey_ready+0x22>
    c1ac:	bd38      	pop	{r3, r4, r5, pc}
		sc_local_pkey_valid = false;
    c1ae:	2200      	movs	r2, #0
    c1b0:	4b22      	ldr	r3, [pc, #136]	; (c23c <bt_smp_pkey_ready+0xa8>)
    c1b2:	701a      	strb	r2, [r3, #0]
		return;
    c1b4:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_smp *smp = &bt_smp_pool[i];
    c1b6:	4a22      	ldr	r2, [pc, #136]	; (c240 <bt_smp_pkey_ready+0xac>)
    c1b8:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c1bc:	fb03 f304 	mul.w	r3, r3, r4
    c1c0:	18d5      	adds	r5, r2, r3
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    c1c2:	33a0      	adds	r3, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c1c4:	f3bf 8f5b 	dmb	ish
    c1c8:	58d3      	ldr	r3, [r2, r3]
    c1ca:	f3bf 8f5b 	dmb	ish
    c1ce:	f013 0f40 	tst.w	r3, #64	; 0x40
    c1d2:	d020      	beq.n	c216 <bt_smp_pkey_ready+0x82>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c1d4:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c1d8:	fb03 f304 	mul.w	r3, r3, r4
    c1dc:	58d3      	ldr	r3, [r2, r3]
    c1de:	78db      	ldrb	r3, [r3, #3]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c1e0:	b9fb      	cbnz	r3, c222 <bt_smp_pkey_ready+0x8e>
			err = sc_send_public_key(smp);
    c1e2:	4628      	mov	r0, r5
    c1e4:	f7fe fcd8 	bl	ab98 <sc_send_public_key>
			if (err) {
    c1e8:	4601      	mov	r1, r0
    c1ea:	b9b0      	cbnz	r0, c21a <bt_smp_pkey_ready+0x86>
			atomic_set_bit(&smp->allowed_cmds,
    c1ec:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c1f0:	fb03 f304 	mul.w	r3, r3, r4
    c1f4:	f103 0298 	add.w	r2, r3, #152	; 0x98
    c1f8:	4b11      	ldr	r3, [pc, #68]	; (c240 <bt_smp_pkey_ready+0xac>)
    c1fa:	4413      	add	r3, r2
    c1fc:	3304      	adds	r3, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c1fe:	f3bf 8f5b 	dmb	ish
    c202:	e853 2f00 	ldrex	r2, [r3]
    c206:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c20a:	e843 2100 	strex	r1, r2, [r3]
    c20e:	2900      	cmp	r1, #0
    c210:	d1f7      	bne.n	c202 <bt_smp_pkey_ready+0x6e>
    c212:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    c216:	3401      	adds	r4, #1
    c218:	e7c7      	b.n	c1aa <bt_smp_pkey_ready+0x16>
				smp_error(smp, err);
    c21a:	4628      	mov	r0, r5
    c21c:	f7ff fa19 	bl	b652 <smp_error>
    c220:	e7e4      	b.n	c1ec <bt_smp_pkey_ready+0x58>
		err = smp_public_key_slave(smp);
    c222:	4628      	mov	r0, r5
    c224:	f7ff ff54 	bl	c0d0 <smp_public_key_slave>
		if (err) {
    c228:	4601      	mov	r1, r0
    c22a:	2800      	cmp	r0, #0
    c22c:	d0f3      	beq.n	c216 <bt_smp_pkey_ready+0x82>
			smp_error(smp, err);
    c22e:	4628      	mov	r0, r5
    c230:	f7ff fa0f 	bl	b652 <smp_error>
    c234:	e7ef      	b.n	c216 <bt_smp_pkey_ready+0x82>
    c236:	bf00      	nop
    c238:	20000f48 	.word	0x20000f48
    c23c:	20000f44 	.word	0x20000f44
    c240:	20000da0 	.word	0x20000da0

0000c244 <smp_public_key>:
{
    c244:	b570      	push	{r4, r5, r6, lr}
    c246:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
    c248:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    c24a:	f100 05f3 	add.w	r5, r0, #243	; 0xf3
    c24e:	2220      	movs	r2, #32
    c250:	4631      	mov	r1, r6
    c252:	4628      	mov	r0, r5
    c254:	f7f4 f834 	bl	2c0 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    c258:	2220      	movs	r2, #32
    c25a:	18b1      	adds	r1, r6, r2
    c25c:	f204 1013 	addw	r0, r4, #275	; 0x113
    c260:	f7f4 f82e 	bl	2c0 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    c264:	2240      	movs	r2, #64	; 0x40
    c266:	493d      	ldr	r1, [pc, #244]	; (c35c <smp_public_key+0x118>)
    c268:	4628      	mov	r0, r5
    c26a:	f01e fa91 	bl	2a790 <memcmp>
    c26e:	b158      	cbz	r0, c288 <smp_public_key+0x44>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c270:	6823      	ldr	r3, [r4, #0]
    c272:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c274:	2b00      	cmp	r3, #0
    c276:	d156      	bne.n	c326 <smp_public_key+0xe2>
		switch (smp->method) {
    c278:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c27c:	2b03      	cmp	r3, #3
    c27e:	d86a      	bhi.n	c356 <smp_public_key+0x112>
    c280:	e8df f003 	tbb	[pc, r3]
    c284:	11243d11 	.word	0x11243d11
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    c288:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c28c:	f3bf 8f5b 	dmb	ish
    c290:	e853 2f00 	ldrex	r2, [r3]
    c294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    c298:	e843 2100 	strex	r1, r2, [r3]
    c29c:	2900      	cmp	r1, #0
    c29e:	d1f7      	bne.n	c290 <smp_public_key+0x4c>
    c2a0:	f3bf 8f5b 	dmb	ish
    c2a4:	e7e4      	b.n	c270 <smp_public_key+0x2c>
			atomic_set_bit(&smp->allowed_cmds,
    c2a6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c2aa:	f3bf 8f5b 	dmb	ish
    c2ae:	e853 2f00 	ldrex	r2, [r3]
    c2b2:	f042 0208 	orr.w	r2, r2, #8
    c2b6:	e843 2100 	strex	r1, r2, [r3]
    c2ba:	2900      	cmp	r1, #0
    c2bc:	d1f7      	bne.n	c2ae <smp_public_key+0x6a>
    c2be:	f3bf 8f5b 	dmb	ish
		return generate_dhkey(smp);
    c2c2:	4620      	mov	r0, r4
    c2c4:	f7ff feea 	bl	c09c <generate_dhkey>
    c2c8:	4603      	mov	r3, r0
    c2ca:	e033      	b.n	c334 <smp_public_key+0xf0>
			err = display_passkey(smp);
    c2cc:	4620      	mov	r0, r4
    c2ce:	f7fe fc0f 	bl	aaf0 <display_passkey>
			if (err) {
    c2d2:	4603      	mov	r3, r0
    c2d4:	bb70      	cbnz	r0, c334 <smp_public_key+0xf0>
			atomic_set_bit(&smp->allowed_cmds,
    c2d6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c2da:	f3bf 8f5b 	dmb	ish
    c2de:	e853 2f00 	ldrex	r2, [r3]
    c2e2:	f042 0208 	orr.w	r2, r2, #8
    c2e6:	e843 2100 	strex	r1, r2, [r3]
    c2ea:	2900      	cmp	r1, #0
    c2ec:	d1f7      	bne.n	c2de <smp_public_key+0x9a>
    c2ee:	f3bf 8f5b 	dmb	ish
			err = smp_send_pairing_confirm(smp);
    c2f2:	4620      	mov	r0, r4
    c2f4:	f7fe ffd6 	bl	b2a4 <smp_send_pairing_confirm>
			if (err) {
    c2f8:	4603      	mov	r3, r0
    c2fa:	b9d8      	cbnz	r0, c334 <smp_public_key+0xf0>
    c2fc:	e7e1      	b.n	c2c2 <smp_public_key+0x7e>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c2fe:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c302:	f3bf 8f5b 	dmb	ish
    c306:	e853 2f00 	ldrex	r2, [r3]
    c30a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    c30e:	e843 2100 	strex	r1, r2, [r3]
    c312:	2900      	cmp	r1, #0
    c314:	d1f7      	bne.n	c306 <smp_public_key+0xc2>
    c316:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_entry(smp->chan.chan.conn);
    c31a:	4b11      	ldr	r3, [pc, #68]	; (c360 <smp_public_key+0x11c>)
    c31c:	681b      	ldr	r3, [r3, #0]
    c31e:	685b      	ldr	r3, [r3, #4]
    c320:	6820      	ldr	r0, [r4, #0]
    c322:	4798      	blx	r3
			break;
    c324:	e7cd      	b.n	c2c2 <smp_public_key+0x7e>
	if (!sc_local_pkey_valid) {
    c326:	4b0f      	ldr	r3, [pc, #60]	; (c364 <smp_public_key+0x120>)
    c328:	781b      	ldrb	r3, [r3, #0]
    c32a:	b12b      	cbz	r3, c338 <smp_public_key+0xf4>
	err = smp_public_key_slave(smp);
    c32c:	4620      	mov	r0, r4
    c32e:	f7ff fecf 	bl	c0d0 <smp_public_key_slave>
    c332:	4603      	mov	r3, r0
}
    c334:	4618      	mov	r0, r3
    c336:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    c338:	34a0      	adds	r4, #160	; 0xa0
    c33a:	f3bf 8f5b 	dmb	ish
    c33e:	e854 3f00 	ldrex	r3, [r4]
    c342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c346:	e844 3200 	strex	r2, r3, [r4]
    c34a:	2a00      	cmp	r2, #0
    c34c:	d1f7      	bne.n	c33e <smp_public_key+0xfa>
    c34e:	f3bf 8f5b 	dmb	ish
		return 0;
    c352:	2300      	movs	r3, #0
    c354:	e7ee      	b.n	c334 <smp_public_key+0xf0>
			return BT_SMP_ERR_UNSPECIFIED;
    c356:	2308      	movs	r3, #8
    c358:	e7ec      	b.n	c334 <smp_public_key+0xf0>
    c35a:	bf00      	nop
    c35c:	00031674 	.word	0x00031674
    c360:	20002f90 	.word	0x20002f90
    c364:	20000f44 	.word	0x20000f44

0000c368 <smp_signing_info>:
{
    c368:	b570      	push	{r4, r5, r6, lr}
    c36a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c36c:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c36e:	f3bf 8f5b 	dmb	ish
    c372:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c376:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c37a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c37e:	d111      	bne.n	c3a4 <smp_signing_info+0x3c>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    c380:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c384:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    c388:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c38c:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c38e:	b902      	cbnz	r2, c392 <smp_signing_info+0x2a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c390:	b1ab      	cbz	r3, c3be <smp_signing_info+0x56>
	if (!smp->local_dist && !smp->remote_dist) {
    c392:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c396:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c39a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c39e:	b193      	cbz	r3, c3c6 <smp_signing_info+0x5e>
	return 0;
    c3a0:	2000      	movs	r0, #0
}
    c3a2:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_signing_info *req = (void *)buf->data;
    c3a4:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    c3a6:	f105 0148 	add.w	r1, r5, #72	; 0x48
    c3aa:	2010      	movs	r0, #16
    c3ac:	f000 ff8e 	bl	d2cc <bt_keys_get_type>
		if (!keys) {
    c3b0:	b178      	cbz	r0, c3d2 <smp_signing_info+0x6a>
		memcpy(keys->remote_csrk.val, req->csrk,
    c3b2:	2210      	movs	r2, #16
    c3b4:	4631      	mov	r1, r6
    c3b6:	305c      	adds	r0, #92	; 0x5c
    c3b8:	f7f3 ff82 	bl	2c0 <memcpy>
    c3bc:	e7e0      	b.n	c380 <smp_signing_info+0x18>
		bt_smp_distribute_keys(smp);
    c3be:	4620      	mov	r0, r4
    c3c0:	f7ff fac4 	bl	b94c <bt_smp_distribute_keys>
    c3c4:	e7e5      	b.n	c392 <smp_signing_info+0x2a>
		smp_pairing_complete(smp, 0);
    c3c6:	2100      	movs	r1, #0
    c3c8:	4620      	mov	r0, r4
    c3ca:	f7ff f93e 	bl	b64a <smp_pairing_complete>
	return 0;
    c3ce:	2000      	movs	r0, #0
    c3d0:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c3d2:	2008      	movs	r0, #8
    c3d4:	bd70      	pop	{r4, r5, r6, pc}

0000c3d6 <smp_ident_info>:
{
    c3d6:	b538      	push	{r3, r4, r5, lr}
    c3d8:	4604      	mov	r4, r0
    c3da:	f3bf 8f5b 	dmb	ish
    c3de:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c3e2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c3e6:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c3ea:	d00b      	beq.n	c404 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
    c3ec:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    c3ee:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    c3f0:	3148      	adds	r1, #72	; 0x48
    c3f2:	2002      	movs	r0, #2
    c3f4:	f000 ff6a 	bl	d2cc <bt_keys_get_type>
		if (!keys) {
    c3f8:	b198      	cbz	r0, c422 <smp_ident_info+0x4c>
		memcpy(keys->irk.val, req->irk, 16);
    c3fa:	2210      	movs	r2, #16
    c3fc:	4629      	mov	r1, r5
    c3fe:	3030      	adds	r0, #48	; 0x30
    c400:	f7f3 ff5e 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    c404:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c406:	f3bf 8f5b 	dmb	ish
    c40a:	e854 3f00 	ldrex	r3, [r4]
    c40e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c412:	e844 3200 	strex	r2, r3, [r4]
    c416:	2a00      	cmp	r2, #0
    c418:	d1f7      	bne.n	c40a <smp_ident_info+0x34>
    c41a:	f3bf 8f5b 	dmb	ish
	return 0;
    c41e:	2000      	movs	r0, #0
    c420:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c422:	2008      	movs	r0, #8
}
    c424:	bd38      	pop	{r3, r4, r5, pc}

0000c426 <smp_master_ident>:
{
    c426:	b570      	push	{r4, r5, r6, lr}
    c428:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c42a:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c42c:	f3bf 8f5b 	dmb	ish
    c430:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c434:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c438:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c43c:	d116      	bne.n	c46c <smp_master_ident+0x46>
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    c43e:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c442:	f013 0f02 	tst.w	r3, #2
    c446:	d127      	bne.n	c498 <smp_master_ident+0x72>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c448:	f013 0f04 	tst.w	r3, #4
    c44c:	d133      	bne.n	c4b6 <smp_master_ident+0x90>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c44e:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c450:	b91b      	cbnz	r3, c45a <smp_master_ident+0x34>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c452:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c456:	2b00      	cmp	r3, #0
    c458:	d03c      	beq.n	c4d4 <smp_master_ident+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
    c45a:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c45e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c462:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c466:	b3cb      	cbz	r3, c4dc <smp_master_ident+0xb6>
	return 0;
    c468:	2000      	movs	r0, #0
}
    c46a:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_master_ident *req = (void *)buf->data;
    c46c:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    c46e:	f105 0148 	add.w	r1, r5, #72	; 0x48
    c472:	2004      	movs	r0, #4
    c474:	f000 ff2a 	bl	d2cc <bt_keys_get_type>
		if (!keys) {
    c478:	b3b0      	cbz	r0, c4e8 <smp_master_ident+0xc2>
		keys->ltk.ediv = req->ediv;
    c47a:	8832      	ldrh	r2, [r6, #0]
    c47c:	8302      	strh	r2, [r0, #24]
		keys->ltk.rand = req->rand;
    c47e:	f8d6 1002 	ldr.w	r1, [r6, #2]
    c482:	f8d6 2006 	ldr.w	r2, [r6, #6]
    c486:	6101      	str	r1, [r0, #16]
    c488:	6142      	str	r2, [r0, #20]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    c48a:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c48e:	f023 0301 	bic.w	r3, r3, #1
    c492:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
    c496:	e7d2      	b.n	c43e <smp_master_ident+0x18>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    c498:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c49c:	f3bf 8f5b 	dmb	ish
    c4a0:	e853 2f00 	ldrex	r2, [r3]
    c4a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    c4a8:	e843 2100 	strex	r1, r2, [r3]
    c4ac:	2900      	cmp	r1, #0
    c4ae:	d1f7      	bne.n	c4a0 <smp_master_ident+0x7a>
    c4b0:	f3bf 8f5b 	dmb	ish
    c4b4:	e7cb      	b.n	c44e <smp_master_ident+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c4b6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c4ba:	f3bf 8f5b 	dmb	ish
    c4be:	e853 2f00 	ldrex	r2, [r3]
    c4c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c4c6:	e843 2100 	strex	r1, r2, [r3]
    c4ca:	2900      	cmp	r1, #0
    c4cc:	d1f7      	bne.n	c4be <smp_master_ident+0x98>
    c4ce:	f3bf 8f5b 	dmb	ish
    c4d2:	e7bc      	b.n	c44e <smp_master_ident+0x28>
		bt_smp_distribute_keys(smp);
    c4d4:	4620      	mov	r0, r4
    c4d6:	f7ff fa39 	bl	b94c <bt_smp_distribute_keys>
    c4da:	e7be      	b.n	c45a <smp_master_ident+0x34>
		smp_pairing_complete(smp, 0);
    c4dc:	2100      	movs	r1, #0
    c4de:	4620      	mov	r0, r4
    c4e0:	f7ff f8b3 	bl	b64a <smp_pairing_complete>
	return 0;
    c4e4:	2000      	movs	r0, #0
    c4e6:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c4e8:	2008      	movs	r0, #8
    c4ea:	bd70      	pop	{r4, r5, r6, pc}

0000c4ec <smp_encrypt_info>:
{
    c4ec:	b538      	push	{r3, r4, r5, lr}
    c4ee:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c4f0:	f3bf 8f5b 	dmb	ish
    c4f4:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c4f8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c4fc:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c500:	d00b      	beq.n	c51a <smp_encrypt_info+0x2e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    c502:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    c504:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    c506:	3148      	adds	r1, #72	; 0x48
    c508:	2004      	movs	r0, #4
    c50a:	f000 fedf 	bl	d2cc <bt_keys_get_type>
		if (!keys) {
    c50e:	b198      	cbz	r0, c538 <smp_encrypt_info+0x4c>
		memcpy(keys->ltk.val, req->ltk, 16);
    c510:	2210      	movs	r2, #16
    c512:	4629      	mov	r1, r5
    c514:	301a      	adds	r0, #26
    c516:	f7f3 fed3 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    c51a:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c51c:	f3bf 8f5b 	dmb	ish
    c520:	e854 3f00 	ldrex	r3, [r4]
    c524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c528:	e844 3200 	strex	r2, r3, [r4]
    c52c:	2a00      	cmp	r2, #0
    c52e:	d1f7      	bne.n	c520 <smp_encrypt_info+0x34>
    c530:	f3bf 8f5b 	dmb	ish
	return 0;
    c534:	2000      	movs	r0, #0
    c536:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c538:	2008      	movs	r0, #8
}
    c53a:	bd38      	pop	{r3, r4, r5, pc}

0000c53c <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
    c53c:	7883      	ldrb	r3, [r0, #2]
    c53e:	b103      	cbz	r3, c542 <smp_check_complete+0x6>
    c540:	4770      	bx	lr
{
    c542:	b510      	push	{r4, lr}
    c544:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    c546:	2106      	movs	r1, #6
    c548:	f7fb ffa1 	bl	848e <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    c54c:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    c550:	ea21 0104 	bic.w	r1, r1, r4
    c554:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		if (!smp->local_dist && !smp->remote_dist) {
    c558:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
    c55c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c560:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c564:	b103      	cbz	r3, c568 <smp_check_complete+0x2c>
    c566:	bd10      	pop	{r4, pc}
			smp_pairing_complete(smp, 0);
    c568:	2100      	movs	r1, #0
    c56a:	f7ff f86e 	bl	b64a <smp_pairing_complete>
    c56e:	e7fa      	b.n	c566 <smp_check_complete+0x2a>

0000c570 <sign_info_sent>:
{
    c570:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
    c572:	2104      	movs	r1, #4
    c574:	f7ff ffe2 	bl	c53c <smp_check_complete>
    c578:	bd08      	pop	{r3, pc}

0000c57a <ident_sent>:
{
    c57a:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
    c57c:	2101      	movs	r1, #1
    c57e:	f7ff ffdd 	bl	c53c <smp_check_complete>
    c582:	bd08      	pop	{r3, pc}

0000c584 <smp_ident_addr_info>:
{
    c584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    c588:	6806      	ldr	r6, [r0, #0]
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    c58a:	688d      	ldr	r5, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c58c:	782b      	ldrb	r3, [r5, #0]
    c58e:	b153      	cbz	r3, c5a6 <smp_ident_addr_info+0x22>
		return true;
	}

	return BT_ADDR_IS_STATIC(&addr->a);
    c590:	79ab      	ldrb	r3, [r5, #6]
    c592:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c596:	2bc0      	cmp	r3, #192	; 0xc0
    c598:	bf14      	ite	ne
    c59a:	2300      	movne	r3, #0
    c59c:	2301      	moveq	r3, #1
	if (!bt_addr_le_is_identity(&req->addr)) {
    c59e:	b923      	cbnz	r3, c5aa <smp_ident_addr_info+0x26>
		return BT_SMP_ERR_INVALID_PARAMS;
    c5a0:	200a      	movs	r0, #10
    c5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    c5a6:	2301      	movs	r3, #1
    c5a8:	e7f9      	b.n	c59e <smp_ident_addr_info+0x1a>
    c5aa:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c5ac:	f3bf 8f5b 	dmb	ish
    c5b0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c5b4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c5b8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c5bc:	d119      	bne.n	c5f2 <smp_ident_addr_info+0x6e>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    c5be:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c5c2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    c5c6:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c5ca:	f013 0f04 	tst.w	r3, #4
    c5ce:	d14f      	bne.n	c670 <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c5d0:	78f3      	ldrb	r3, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c5d2:	b91b      	cbnz	r3, c5dc <smp_ident_addr_info+0x58>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c5d4:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c5d8:	2b00      	cmp	r3, #0
    c5da:	d058      	beq.n	c68e <smp_ident_addr_info+0x10a>
	if (!smp->local_dist && !smp->remote_dist) {
    c5dc:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c5e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c5e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c5e8:	2b00      	cmp	r3, #0
    c5ea:	d054      	beq.n	c696 <smp_ident_addr_info+0x112>
	return 0;
    c5ec:	2000      	movs	r0, #0
}
    c5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    c5f2:	f106 0848 	add.w	r8, r6, #72	; 0x48
    c5f6:	4641      	mov	r1, r8
    c5f8:	2002      	movs	r0, #2
    c5fa:	f000 fe67 	bl	d2cc <bt_keys_get_type>
		if (!keys) {
    c5fe:	4681      	mov	r9, r0
    c600:	2800      	cmp	r0, #0
    c602:	d04f      	beq.n	c6a4 <smp_ident_addr_info+0x120>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    c604:	78f3      	ldrb	r3, [r6, #3]
    c606:	bb43      	cbnz	r3, c65a <smp_ident_addr_info+0xd6>
			dst = &conn->le.resp_addr;
    c608:	f106 0156 	add.w	r1, r6, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    c60c:	780b      	ldrb	r3, [r1, #0]
    c60e:	2b01      	cmp	r3, #1
    c610:	d026      	beq.n	c660 <smp_ident_addr_info+0xdc>
		return false;
    c612:	2700      	movs	r7, #0
		if (bt_addr_le_is_rpa(dst)) {
    c614:	2f00      	cmp	r7, #0
    c616:	d0d2      	beq.n	c5be <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    c618:	2206      	movs	r2, #6
    c61a:	3101      	adds	r1, #1
    c61c:	f109 0040 	add.w	r0, r9, #64	; 0x40
    c620:	f7f3 fe4e 	bl	2c0 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c624:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    c628:	b13b      	cbz	r3, c63a <smp_ident_addr_info+0xb6>
	return BT_ADDR_IS_STATIC(&addr->a);
    c62a:	f896 704e 	ldrb.w	r7, [r6, #78]	; 0x4e
    c62e:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    c632:	2fc0      	cmp	r7, #192	; 0xc0
    c634:	bf14      	ite	ne
    c636:	2700      	movne	r7, #0
    c638:	2701      	moveq	r7, #1
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    c63a:	2f00      	cmp	r7, #0
    c63c:	d1bf      	bne.n	c5be <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    c63e:	2207      	movs	r2, #7
    c640:	4629      	mov	r1, r5
    c642:	4648      	mov	r0, r9
    c644:	f7f3 fe3c 	bl	2c0 <memcpy>
    c648:	2207      	movs	r2, #7
    c64a:	4629      	mov	r1, r5
    c64c:	4640      	mov	r0, r8
    c64e:	f7f3 fe37 	bl	2c0 <memcpy>
				bt_conn_identity_resolved(conn);
    c652:	4630      	mov	r0, r6
    c654:	f7fa fba4 	bl	6da0 <bt_conn_identity_resolved>
    c658:	e7b1      	b.n	c5be <smp_ident_addr_info+0x3a>
			dst = &conn->le.init_addr;
    c65a:	f106 014f 	add.w	r1, r6, #79	; 0x4f
    c65e:	e7d5      	b.n	c60c <smp_ident_addr_info+0x88>
	return BT_ADDR_IS_RPA(&addr->a);
    c660:	798f      	ldrb	r7, [r1, #6]
    c662:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    c666:	2f40      	cmp	r7, #64	; 0x40
    c668:	bf14      	ite	ne
    c66a:	2700      	movne	r7, #0
    c66c:	2701      	moveq	r7, #1
    c66e:	e7d1      	b.n	c614 <smp_ident_addr_info+0x90>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c670:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c674:	f3bf 8f5b 	dmb	ish
    c678:	e853 2f00 	ldrex	r2, [r3]
    c67c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c680:	e843 2100 	strex	r1, r2, [r3]
    c684:	2900      	cmp	r1, #0
    c686:	d1f7      	bne.n	c678 <smp_ident_addr_info+0xf4>
    c688:	f3bf 8f5b 	dmb	ish
    c68c:	e7a0      	b.n	c5d0 <smp_ident_addr_info+0x4c>
		bt_smp_distribute_keys(smp);
    c68e:	4620      	mov	r0, r4
    c690:	f7ff f95c 	bl	b94c <bt_smp_distribute_keys>
    c694:	e7a2      	b.n	c5dc <smp_ident_addr_info+0x58>
		smp_pairing_complete(smp, 0);
    c696:	2100      	movs	r1, #0
    c698:	4620      	mov	r0, r4
    c69a:	f7fe ffd6 	bl	b64a <smp_pairing_complete>
	return 0;
    c69e:	2000      	movs	r0, #0
    c6a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c6a4:	2008      	movs	r0, #8
    c6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000c6ac <legacy_request_tk>:
{
    c6ac:	b570      	push	{r4, r5, r6, lr}
    c6ae:	b082      	sub	sp, #8
    c6b0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c6b2:	6805      	ldr	r5, [r0, #0]
	keys = bt_keys_find_addr(&conn->le.dst);
    c6b4:	f105 0048 	add.w	r0, r5, #72	; 0x48
    c6b8:	f000 fdea 	bl	d290 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    c6bc:	b168      	cbz	r0, c6da <legacy_request_tk+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c6be:	f3bf 8f5b 	dmb	ish
    c6c2:	6883      	ldr	r3, [r0, #8]
    c6c4:	f3bf 8f5b 	dmb	ish
    c6c8:	f013 0f01 	tst.w	r3, #1
    c6cc:	d005      	beq.n	c6da <legacy_request_tk+0x2e>
	    smp->method == JUST_WORKS) {
    c6ce:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    c6d2:	b913      	cbnz	r3, c6da <legacy_request_tk+0x2e>
		return BT_SMP_ERR_UNSPECIFIED;
    c6d4:	2008      	movs	r0, #8
}
    c6d6:	b002      	add	sp, #8
    c6d8:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
    c6da:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c6de:	2b01      	cmp	r3, #1
    c6e0:	d025      	beq.n	c72e <legacy_request_tk+0x82>
    c6e2:	2b00      	cmp	r3, #0
    c6e4:	d037      	beq.n	c756 <legacy_request_tk+0xaa>
    c6e6:	2b02      	cmp	r3, #2
    c6e8:	d001      	beq.n	c6ee <legacy_request_tk+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    c6ea:	2008      	movs	r0, #8
    c6ec:	e7f3      	b.n	c6d6 <legacy_request_tk+0x2a>
		if (bt_rand(&passkey, sizeof(passkey))) {
    c6ee:	2104      	movs	r1, #4
    c6f0:	eb0d 0001 	add.w	r0, sp, r1
    c6f4:	f004 ffb8 	bl	11668 <bt_rand>
    c6f8:	b108      	cbz	r0, c6fe <legacy_request_tk+0x52>
			return BT_SMP_ERR_UNSPECIFIED;
    c6fa:	2008      	movs	r0, #8
    c6fc:	e7eb      	b.n	c6d6 <legacy_request_tk+0x2a>
		passkey %= 1000000;
    c6fe:	9b01      	ldr	r3, [sp, #4]
    c700:	4916      	ldr	r1, [pc, #88]	; (c75c <legacy_request_tk+0xb0>)
    c702:	fba1 2103 	umull	r2, r1, r1, r3
    c706:	0c89      	lsrs	r1, r1, #18
    c708:	4a15      	ldr	r2, [pc, #84]	; (c760 <legacy_request_tk+0xb4>)
    c70a:	fb02 3111 	mls	r1, r2, r1, r3
    c70e:	ae02      	add	r6, sp, #8
    c710:	f846 1d04 	str.w	r1, [r6, #-4]!
		bt_auth->passkey_display(conn, passkey);
    c714:	4b13      	ldr	r3, [pc, #76]	; (c764 <legacy_request_tk+0xb8>)
    c716:	681b      	ldr	r3, [r3, #0]
    c718:	681b      	ldr	r3, [r3, #0]
    c71a:	4628      	mov	r0, r5
    c71c:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    c71e:	2204      	movs	r2, #4
    c720:	4631      	mov	r1, r6
    c722:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    c726:	f7f3 fdcb 	bl	2c0 <memcpy>
	return 0;
    c72a:	2000      	movs	r0, #0
		break;
    c72c:	e7d3      	b.n	c6d6 <legacy_request_tk+0x2a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c72e:	34a0      	adds	r4, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c730:	f3bf 8f5b 	dmb	ish
    c734:	e854 3f00 	ldrex	r3, [r4]
    c738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c73c:	e844 3200 	strex	r2, r3, [r4]
    c740:	2a00      	cmp	r2, #0
    c742:	d1f7      	bne.n	c734 <legacy_request_tk+0x88>
    c744:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(conn);
    c748:	4b06      	ldr	r3, [pc, #24]	; (c764 <legacy_request_tk+0xb8>)
    c74a:	681b      	ldr	r3, [r3, #0]
    c74c:	685b      	ldr	r3, [r3, #4]
    c74e:	4628      	mov	r0, r5
    c750:	4798      	blx	r3
	return 0;
    c752:	2000      	movs	r0, #0
		break;
    c754:	e7bf      	b.n	c6d6 <legacy_request_tk+0x2a>
	return 0;
    c756:	2000      	movs	r0, #0
    c758:	e7bd      	b.n	c6d6 <legacy_request_tk+0x2a>
    c75a:	bf00      	nop
    c75c:	431bde83 	.word	0x431bde83
    c760:	000f4240 	.word	0x000f4240
    c764:	20002f90 	.word	0x20002f90

0000c768 <legacy_pairing_rsp>:
{
    c768:	b538      	push	{r3, r4, r5, lr}
    c76a:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    c76c:	f7fe f90a 	bl	a984 <legacy_get_pair_method>
    c770:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    c774:	bb10      	cbnz	r0, c7bc <legacy_pairing_rsp+0x54>
    c776:	4604      	mov	r4, r0
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c778:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c77c:	f3bf 8f5b 	dmb	ish
    c780:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c784:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    c788:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c78c:	d016      	beq.n	c7bc <legacy_pairing_rsp+0x54>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c78e:	4b24      	ldr	r3, [pc, #144]	; (c820 <legacy_pairing_rsp+0xb8>)
    c790:	681b      	ldr	r3, [r3, #0]
    c792:	b19b      	cbz	r3, c7bc <legacy_pairing_rsp+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    c794:	691b      	ldr	r3, [r3, #16]
    c796:	b18b      	cbz	r3, c7bc <legacy_pairing_rsp+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c798:	f3bf 8f5b 	dmb	ish
    c79c:	e852 3f00 	ldrex	r3, [r2]
    c7a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c7a4:	e842 3100 	strex	r1, r3, [r2]
    c7a8:	2900      	cmp	r1, #0
    c7aa:	d1f7      	bne.n	c79c <legacy_pairing_rsp+0x34>
    c7ac:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    c7b0:	4b1b      	ldr	r3, [pc, #108]	; (c820 <legacy_pairing_rsp+0xb8>)
    c7b2:	681b      	ldr	r3, [r3, #0]
    c7b4:	691b      	ldr	r3, [r3, #16]
    c7b6:	6828      	ldr	r0, [r5, #0]
    c7b8:	4798      	blx	r3
		return 0;
    c7ba:	e004      	b.n	c7c6 <legacy_pairing_rsp+0x5e>
	ret = legacy_request_tk(smp);
    c7bc:	4628      	mov	r0, r5
    c7be:	f7ff ff75 	bl	c6ac <legacy_request_tk>
	if (ret) {
    c7c2:	4604      	mov	r4, r0
    c7c4:	b108      	cbz	r0, c7ca <legacy_pairing_rsp+0x62>
}
    c7c6:	4620      	mov	r0, r4
    c7c8:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    c7ca:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c7ce:	f3bf 8f5b 	dmb	ish
    c7d2:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    c7d6:	f3bf 8f5b 	dmb	ish
    c7da:	f412 7f00 	tst.w	r2, #512	; 0x200
    c7de:	d00c      	beq.n	c7fa <legacy_pairing_rsp+0x92>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c7e0:	f3bf 8f5b 	dmb	ish
    c7e4:	e853 2f00 	ldrex	r2, [r3]
    c7e8:	f042 0201 	orr.w	r2, r2, #1
    c7ec:	e843 2100 	strex	r1, r2, [r3]
    c7f0:	2900      	cmp	r1, #0
    c7f2:	d1f7      	bne.n	c7e4 <legacy_pairing_rsp+0x7c>
    c7f4:	f3bf 8f5b 	dmb	ish
	return 0;
    c7f8:	e7e5      	b.n	c7c6 <legacy_pairing_rsp+0x5e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c7fa:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    c7fe:	f3bf 8f5b 	dmb	ish
    c802:	e853 2f00 	ldrex	r2, [r3]
    c806:	f042 0208 	orr.w	r2, r2, #8
    c80a:	e843 2100 	strex	r1, r2, [r3]
    c80e:	2900      	cmp	r1, #0
    c810:	d1f7      	bne.n	c802 <legacy_pairing_rsp+0x9a>
    c812:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    c816:	4628      	mov	r0, r5
    c818:	f7fe fdd8 	bl	b3cc <legacy_send_pairing_confirm>
    c81c:	4604      	mov	r4, r0
    c81e:	e7d2      	b.n	c7c6 <legacy_pairing_rsp+0x5e>
    c820:	20002f90 	.word	0x20002f90

0000c824 <smp_pairing_rsp>:
{
    c824:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    c826:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    c828:	78eb      	ldrb	r3, [r5, #3]
    c82a:	3b07      	subs	r3, #7
    c82c:	b2db      	uxtb	r3, r3
    c82e:	2b09      	cmp	r3, #9
    c830:	d902      	bls.n	c838 <smp_pairing_rsp+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    c832:	2506      	movs	r5, #6
}
    c834:	4628      	mov	r0, r5
    c836:	bd70      	pop	{r4, r5, r6, pc}
    c838:	4604      	mov	r4, r0
	smp->local_dist &= rsp->init_key_dist;
    c83a:	792b      	ldrb	r3, [r5, #4]
    c83c:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
    c840:	4013      	ands	r3, r2
    c842:	f880 3179 	strb.w	r3, [r0, #377]	; 0x179
	smp->remote_dist &= rsp->resp_key_dist;
    c846:	796b      	ldrb	r3, [r5, #5]
    c848:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    c84c:	4013      	ands	r3, r2
    c84e:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    c852:	2302      	movs	r3, #2
    c854:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    c858:	2206      	movs	r2, #6
    c85a:	4629      	mov	r1, r5
    c85c:	30ad      	adds	r0, #173	; 0xad
    c85e:	f7f3 fd2f 	bl	2c0 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c862:	78ab      	ldrb	r3, [r5, #2]
    c864:	f013 0f08 	tst.w	r3, #8
    c868:	d004      	beq.n	c874 <smp_pairing_rsp+0x50>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    c86a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c86e:	f013 0f08 	tst.w	r3, #8
    c872:	d148      	bne.n	c906 <smp_pairing_rsp+0xe2>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c874:	78ab      	ldrb	r3, [r5, #2]
    c876:	f013 0f20 	tst.w	r3, #32
    c87a:	d004      	beq.n	c886 <smp_pairing_rsp+0x62>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    c87c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c880:	f013 0f20 	tst.w	r3, #32
    c884:	d14e      	bne.n	c924 <smp_pairing_rsp+0x100>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c886:	78ab      	ldrb	r3, [r5, #2]
    c888:	f013 0f01 	tst.w	r3, #1
    c88c:	d004      	beq.n	c898 <smp_pairing_rsp+0x74>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    c88e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c892:	f013 0f01 	tst.w	r3, #1
    c896:	d154      	bne.n	c942 <smp_pairing_rsp+0x11e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c898:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c89c:	f3bf 8f5b 	dmb	ish
    c8a0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c8a4:	f3bf 8f5b 	dmb	ish
    c8a8:	f013 0f20 	tst.w	r3, #32
    c8ac:	d058      	beq.n	c960 <smp_pairing_rsp+0x13c>
	smp->method = get_pair_method(smp, rsp->io_capability);
    c8ae:	7829      	ldrb	r1, [r5, #0]
    c8b0:	4620      	mov	r0, r4
    c8b2:	f7fe f835 	bl	a920 <get_pair_method>
    c8b6:	4605      	mov	r5, r0
    c8b8:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	smp->local_dist &= SEND_KEYS_SC;
    c8bc:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    c8c0:	f003 0304 	and.w	r3, r3, #4
    c8c4:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist &= RECV_KEYS_SC;
    c8c8:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c8cc:	f003 0306 	and.w	r3, r3, #6
    c8d0:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->method == JUST_WORKS) {
    c8d4:	2800      	cmp	r0, #0
    c8d6:	d049      	beq.n	c96c <smp_pairing_rsp+0x148>
	if (!sc_local_pkey_valid) {
    c8d8:	4b3c      	ldr	r3, [pc, #240]	; (c9cc <smp_pairing_rsp+0x1a8>)
    c8da:	781b      	ldrb	r3, [r3, #0]
    c8dc:	2b00      	cmp	r3, #0
    c8de:	d067      	beq.n	c9b0 <smp_pairing_rsp+0x18c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    c8e0:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c8e4:	f3bf 8f5b 	dmb	ish
    c8e8:	e853 2f00 	ldrex	r2, [r3]
    c8ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c8f0:	e843 2100 	strex	r1, r2, [r3]
    c8f4:	2900      	cmp	r1, #0
    c8f6:	d1f7      	bne.n	c8e8 <smp_pairing_rsp+0xc4>
    c8f8:	f3bf 8f5b 	dmb	ish
	return sc_send_public_key(smp);
    c8fc:	4620      	mov	r0, r4
    c8fe:	f7fe f94b 	bl	ab98 <sc_send_public_key>
    c902:	4605      	mov	r5, r0
    c904:	e796      	b.n	c834 <smp_pairing_rsp+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    c906:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c90a:	f3bf 8f5b 	dmb	ish
    c90e:	e853 2f00 	ldrex	r2, [r3]
    c912:	f042 0220 	orr.w	r2, r2, #32
    c916:	e843 2100 	strex	r1, r2, [r3]
    c91a:	2900      	cmp	r1, #0
    c91c:	d1f7      	bne.n	c90e <smp_pairing_rsp+0xea>
    c91e:	f3bf 8f5b 	dmb	ish
    c922:	e7a7      	b.n	c874 <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    c924:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c928:	f3bf 8f5b 	dmb	ish
    c92c:	e853 2f00 	ldrex	r2, [r3]
    c930:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    c934:	e843 2100 	strex	r1, r2, [r3]
    c938:	2900      	cmp	r1, #0
    c93a:	d1f7      	bne.n	c92c <smp_pairing_rsp+0x108>
    c93c:	f3bf 8f5b 	dmb	ish
    c940:	e7a1      	b.n	c886 <smp_pairing_rsp+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    c942:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c946:	f3bf 8f5b 	dmb	ish
    c94a:	e853 2f00 	ldrex	r2, [r3]
    c94e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c952:	e843 2100 	strex	r1, r2, [r3]
    c956:	2900      	cmp	r1, #0
    c958:	d1f7      	bne.n	c94a <smp_pairing_rsp+0x126>
    c95a:	f3bf 8f5b 	dmb	ish
    c95e:	e79b      	b.n	c898 <smp_pairing_rsp+0x74>
		return legacy_pairing_rsp(smp, rsp->io_capability);
    c960:	7829      	ldrb	r1, [r5, #0]
    c962:	4620      	mov	r0, r4
    c964:	f7ff ff00 	bl	c768 <legacy_pairing_rsp>
    c968:	4605      	mov	r5, r0
    c96a:	e763      	b.n	c834 <smp_pairing_rsp+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c96c:	f3bf 8f5b 	dmb	ish
    c970:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c974:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c978:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c97c:	d0ac      	beq.n	c8d8 <smp_pairing_rsp+0xb4>
    c97e:	4b14      	ldr	r3, [pc, #80]	; (c9d0 <smp_pairing_rsp+0x1ac>)
    c980:	681b      	ldr	r3, [r3, #0]
    c982:	2b00      	cmp	r3, #0
    c984:	d0a8      	beq.n	c8d8 <smp_pairing_rsp+0xb4>
		    bt_auth && bt_auth->pairing_confirm) {
    c986:	691b      	ldr	r3, [r3, #16]
    c988:	2b00      	cmp	r3, #0
    c98a:	d0a5      	beq.n	c8d8 <smp_pairing_rsp+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c98c:	f3bf 8f5b 	dmb	ish
    c990:	e856 3f00 	ldrex	r3, [r6]
    c994:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c998:	e846 3200 	strex	r2, r3, [r6]
    c99c:	2a00      	cmp	r2, #0
    c99e:	d1f7      	bne.n	c990 <smp_pairing_rsp+0x16c>
    c9a0:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    c9a4:	4b0a      	ldr	r3, [pc, #40]	; (c9d0 <smp_pairing_rsp+0x1ac>)
    c9a6:	681b      	ldr	r3, [r3, #0]
    c9a8:	691b      	ldr	r3, [r3, #16]
    c9aa:	6820      	ldr	r0, [r4, #0]
    c9ac:	4798      	blx	r3
			return 0;
    c9ae:	e741      	b.n	c834 <smp_pairing_rsp+0x10>
    c9b0:	f3bf 8f5b 	dmb	ish
    c9b4:	e856 3f00 	ldrex	r3, [r6]
    c9b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c9bc:	e846 3200 	strex	r2, r3, [r6]
    c9c0:	2a00      	cmp	r2, #0
    c9c2:	d1f7      	bne.n	c9b4 <smp_pairing_rsp+0x190>
    c9c4:	f3bf 8f5b 	dmb	ish
		return 0;
    c9c8:	2500      	movs	r5, #0
    c9ca:	e733      	b.n	c834 <smp_pairing_rsp+0x10>
    c9cc:	20000f44 	.word	0x20000f44
    c9d0:	20002f90 	.word	0x20002f90

0000c9d4 <legacy_pairing_req>:
{
    c9d4:	b538      	push	{r3, r4, r5, lr}
    c9d6:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    c9d8:	f7fd ffd4 	bl	a984 <legacy_get_pair_method>
    c9dc:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    c9e0:	bb10      	cbnz	r0, ca28 <legacy_pairing_req+0x54>
    c9e2:	4604      	mov	r4, r0
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c9e4:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c9e8:	f3bf 8f5b 	dmb	ish
    c9ec:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c9f0:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    c9f4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c9f8:	d116      	bne.n	ca28 <legacy_pairing_req+0x54>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c9fa:	4b18      	ldr	r3, [pc, #96]	; (ca5c <legacy_pairing_req+0x88>)
    c9fc:	681b      	ldr	r3, [r3, #0]
    c9fe:	b19b      	cbz	r3, ca28 <legacy_pairing_req+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    ca00:	691b      	ldr	r3, [r3, #16]
    ca02:	b18b      	cbz	r3, ca28 <legacy_pairing_req+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ca04:	f3bf 8f5b 	dmb	ish
    ca08:	e852 3f00 	ldrex	r3, [r2]
    ca0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ca10:	e842 3100 	strex	r1, r3, [r2]
    ca14:	2900      	cmp	r1, #0
    ca16:	d1f7      	bne.n	ca08 <legacy_pairing_req+0x34>
    ca18:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    ca1c:	4b0f      	ldr	r3, [pc, #60]	; (ca5c <legacy_pairing_req+0x88>)
    ca1e:	681b      	ldr	r3, [r3, #0]
    ca20:	691b      	ldr	r3, [r3, #16]
    ca22:	6828      	ldr	r0, [r5, #0]
    ca24:	4798      	blx	r3
		return 0;
    ca26:	e004      	b.n	ca32 <legacy_pairing_req+0x5e>
	ret = send_pairing_rsp(smp);
    ca28:	4628      	mov	r0, r5
    ca2a:	f7fe f8d9 	bl	abe0 <send_pairing_rsp>
	if (ret) {
    ca2e:	4604      	mov	r4, r0
    ca30:	b108      	cbz	r0, ca36 <legacy_pairing_req+0x62>
}
    ca32:	4620      	mov	r0, r4
    ca34:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ca36:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    ca3a:	f3bf 8f5b 	dmb	ish
    ca3e:	e853 2f00 	ldrex	r2, [r3]
    ca42:	f042 0208 	orr.w	r2, r2, #8
    ca46:	e843 2100 	strex	r1, r2, [r3]
    ca4a:	2900      	cmp	r1, #0
    ca4c:	d1f7      	bne.n	ca3e <legacy_pairing_req+0x6a>
    ca4e:	f3bf 8f5b 	dmb	ish
	return legacy_request_tk(smp);
    ca52:	4628      	mov	r0, r5
    ca54:	f7ff fe2a 	bl	c6ac <legacy_request_tk>
    ca58:	4604      	mov	r4, r0
    ca5a:	e7ea      	b.n	ca32 <legacy_pairing_req+0x5e>
    ca5c:	20002f90 	.word	0x20002f90

0000ca60 <smp_pairing_req>:
{
    ca60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    ca62:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    ca64:	78f3      	ldrb	r3, [r6, #3]
    ca66:	3b07      	subs	r3, #7
    ca68:	b2db      	uxtb	r3, r3
    ca6a:	2b09      	cmp	r3, #9
    ca6c:	d902      	bls.n	ca74 <smp_pairing_req+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    ca6e:	2506      	movs	r5, #6
}
    ca70:	4628      	mov	r0, r5
    ca72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca74:	4604      	mov	r4, r0
	ret = smp_init(smp);
    ca76:	f7fe f81c 	bl	aab2 <smp_init>
	if (ret) {
    ca7a:	b108      	cbz	r0, ca80 <smp_pairing_req+0x20>
		return ret;
    ca7c:	b2c5      	uxtb	r5, r0
    ca7e:	e7f7      	b.n	ca70 <smp_pairing_req+0x10>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    ca80:	2301      	movs	r3, #1
    ca82:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    ca86:	2206      	movs	r2, #6
    ca88:	4631      	mov	r1, r6
    ca8a:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    ca8e:	f7f3 fc17 	bl	2c0 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    ca92:	2302      	movs	r3, #2
    ca94:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	rsp->auth_req = get_auth(req->auth_req);
    ca98:	78b0      	ldrb	r0, [r6, #2]
    ca9a:	f7fd ff97 	bl	a9cc <get_auth>
    ca9e:	4605      	mov	r5, r0
    caa0:	f884 00af 	strb.w	r0, [r4, #175]	; 0xaf
	rsp->io_capability = get_io_capa();
    caa4:	f7fd ff14 	bl	a8d0 <get_io_capa>
    caa8:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    caac:	2300      	movs	r3, #0
    caae:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    cab2:	2310      	movs	r3, #16
    cab4:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    cab8:	7933      	ldrb	r3, [r6, #4]
    caba:	f003 0307 	and.w	r3, r3, #7
    cabe:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    cac2:	7973      	ldrb	r3, [r6, #5]
    cac4:	f003 0305 	and.w	r3, r3, #5
    cac8:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    cacc:	f015 0f08 	tst.w	r5, #8
    cad0:	d003      	beq.n	cada <smp_pairing_req+0x7a>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    cad2:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    cad4:	f013 0f08 	tst.w	r3, #8
    cad8:	d15b      	bne.n	cb92 <smp_pairing_req+0x132>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    cada:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    cade:	f013 0f20 	tst.w	r3, #32
    cae2:	d003      	beq.n	caec <smp_pairing_req+0x8c>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    cae4:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    cae6:	f013 0f20 	tst.w	r3, #32
    caea:	d16d      	bne.n	cbc8 <smp_pairing_req+0x168>
	smp->local_dist = rsp->resp_key_dist;
    caec:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    caf0:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist = rsp->init_key_dist;
    caf4:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    caf8:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    cafc:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    cb00:	f013 0f01 	tst.w	r3, #1
    cb04:	d003      	beq.n	cb0e <smp_pairing_req+0xae>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    cb06:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    cb08:	f013 0f01 	tst.w	r3, #1
    cb0c:	d16b      	bne.n	cbe6 <smp_pairing_req+0x186>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    cb0e:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
    cb12:	f3bf 8f5b 	dmb	ish
    cb16:	e857 3f00 	ldrex	r3, [r7]
    cb1a:	f043 0308 	orr.w	r3, r3, #8
    cb1e:	e847 3200 	strex	r2, r3, [r7]
    cb22:	2a00      	cmp	r2, #0
    cb24:	d1f7      	bne.n	cb16 <smp_pairing_req+0xb6>
    cb26:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cb2a:	f3bf 8f5b 	dmb	ish
    cb2e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    cb32:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    cb36:	f013 0f20 	tst.w	r3, #32
    cb3a:	d063      	beq.n	cc04 <smp_pairing_req+0x1a4>
	smp->method = get_pair_method(smp, req->io_capability);
    cb3c:	7831      	ldrb	r1, [r6, #0]
    cb3e:	4620      	mov	r0, r4
    cb40:	f7fd feee 	bl	a920 <get_pair_method>
    cb44:	4605      	mov	r5, r0
    cb46:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS) {
    cb4a:	2800      	cmp	r0, #0
    cb4c:	d160      	bne.n	cc10 <smp_pairing_req+0x1b0>
    cb4e:	f3bf 8f5b 	dmb	ish
    cb52:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    cb56:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    cb5a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    cb5e:	d157      	bne.n	cc10 <smp_pairing_req+0x1b0>
    cb60:	4b35      	ldr	r3, [pc, #212]	; (cc38 <smp_pairing_req+0x1d8>)
    cb62:	681b      	ldr	r3, [r3, #0]
    cb64:	2b00      	cmp	r3, #0
    cb66:	d053      	beq.n	cc10 <smp_pairing_req+0x1b0>
		    bt_auth && bt_auth->pairing_confirm) {
    cb68:	691b      	ldr	r3, [r3, #16]
    cb6a:	2b00      	cmp	r3, #0
    cb6c:	d050      	beq.n	cc10 <smp_pairing_req+0x1b0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cb6e:	f3bf 8f5b 	dmb	ish
    cb72:	e857 3f00 	ldrex	r3, [r7]
    cb76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    cb7a:	e847 3200 	strex	r2, r3, [r7]
    cb7e:	2a00      	cmp	r2, #0
    cb80:	d1f7      	bne.n	cb72 <smp_pairing_req+0x112>
    cb82:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    cb86:	4b2c      	ldr	r3, [pc, #176]	; (cc38 <smp_pairing_req+0x1d8>)
    cb88:	681b      	ldr	r3, [r3, #0]
    cb8a:	691b      	ldr	r3, [r3, #16]
    cb8c:	6820      	ldr	r0, [r4, #0]
    cb8e:	4798      	blx	r3
			return 0;
    cb90:	e76e      	b.n	ca70 <smp_pairing_req+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    cb92:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    cb96:	f3bf 8f5b 	dmb	ish
    cb9a:	e853 2f00 	ldrex	r2, [r3]
    cb9e:	f042 0220 	orr.w	r2, r2, #32
    cba2:	e843 2100 	strex	r1, r2, [r3]
    cba6:	2900      	cmp	r1, #0
    cba8:	d1f7      	bne.n	cb9a <smp_pairing_req+0x13a>
    cbaa:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
    cbae:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    cbb2:	f003 0306 	and.w	r3, r3, #6
    cbb6:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    cbba:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    cbbe:	f003 0304 	and.w	r3, r3, #4
    cbc2:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    cbc6:	e788      	b.n	cada <smp_pairing_req+0x7a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    cbc8:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    cbcc:	f3bf 8f5b 	dmb	ish
    cbd0:	e853 2f00 	ldrex	r2, [r3]
    cbd4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    cbd8:	e843 2100 	strex	r1, r2, [r3]
    cbdc:	2900      	cmp	r1, #0
    cbde:	d1f7      	bne.n	cbd0 <smp_pairing_req+0x170>
    cbe0:	f3bf 8f5b 	dmb	ish
    cbe4:	e782      	b.n	caec <smp_pairing_req+0x8c>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    cbe6:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    cbea:	f3bf 8f5b 	dmb	ish
    cbee:	e853 2f00 	ldrex	r2, [r3]
    cbf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    cbf6:	e843 2100 	strex	r1, r2, [r3]
    cbfa:	2900      	cmp	r1, #0
    cbfc:	d1f7      	bne.n	cbee <smp_pairing_req+0x18e>
    cbfe:	f3bf 8f5b 	dmb	ish
    cc02:	e784      	b.n	cb0e <smp_pairing_req+0xae>
		return legacy_pairing_req(smp, req->io_capability);
    cc04:	7831      	ldrb	r1, [r6, #0]
    cc06:	4620      	mov	r0, r4
    cc08:	f7ff fee4 	bl	c9d4 <legacy_pairing_req>
    cc0c:	4605      	mov	r5, r0
    cc0e:	e72f      	b.n	ca70 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    cc10:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    cc14:	f3bf 8f5b 	dmb	ish
    cc18:	e853 2f00 	ldrex	r2, [r3]
    cc1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    cc20:	e843 2100 	strex	r1, r2, [r3]
    cc24:	2900      	cmp	r1, #0
    cc26:	d1f7      	bne.n	cc18 <smp_pairing_req+0x1b8>
    cc28:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
    cc2c:	4620      	mov	r0, r4
    cc2e:	f7fd ffd7 	bl	abe0 <send_pairing_rsp>
    cc32:	4605      	mov	r5, r0
    cc34:	e71c      	b.n	ca70 <smp_pairing_req+0x10>
    cc36:	bf00      	nop
    cc38:	20002f90 	.word	0x20002f90

0000cc3c <bt_smp_connected>:
{
    cc3c:	b510      	push	{r4, lr}
    cc3e:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    cc40:	4904      	ldr	r1, [pc, #16]	; (cc54 <bt_smp_connected+0x18>)
    cc42:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    cc46:	f01d f955 	bl	29ef4 <k_delayed_work_init>
	smp_reset(smp);
    cc4a:	4620      	mov	r0, r4
    cc4c:	f7fe fcbb 	bl	b5c6 <smp_reset>
    cc50:	bd10      	pop	{r4, pc}
    cc52:	bf00      	nop
    cc54:	0000b817 	.word	0x0000b817

0000cc58 <bt_smp_send_security_req>:
{
    cc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc5c:	4606      	mov	r6, r0
	smp = smp_chan_get(conn);
    cc5e:	f7fd ff15 	bl	aa8c <smp_chan_get>
	if (!smp) {
    cc62:	b3e8      	cbz	r0, cce0 <bt_smp_send_security_req+0x88>
    cc64:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cc66:	f3bf 8f5b 	dmb	ish
    cc6a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cc6e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    cc72:	f013 0f10 	tst.w	r3, #16
    cc76:	d136      	bne.n	cce6 <bt_smp_send_security_req+0x8e>
    cc78:	f3bf 8f5b 	dmb	ish
    cc7c:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    cc80:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    cc84:	f3c5 05c0 	ubfx	r5, r5, #3, #1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cc88:	bb85      	cbnz	r5, ccec <bt_smp_send_security_req+0x94>
	if (!sec_level_reachable(conn)) {
    cc8a:	4630      	mov	r0, r6
    cc8c:	f7fd feb4 	bl	a9f8 <sec_level_reachable>
    cc90:	b378      	cbz	r0, ccf2 <bt_smp_send_security_req+0x9a>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    cc92:	2201      	movs	r2, #1
    cc94:	210b      	movs	r1, #11
    cc96:	4630      	mov	r0, r6
    cc98:	f7fd fefd 	bl	aa96 <smp_create_pdu>
	if (!req_buf) {
    cc9c:	4607      	mov	r7, r0
    cc9e:	b358      	cbz	r0, ccf8 <bt_smp_send_security_req+0xa0>
	req = net_buf_add(req_buf, sizeof(*req));
    cca0:	2101      	movs	r1, #1
    cca2:	3008      	adds	r0, #8
    cca4:	f00e f856 	bl	1ad54 <net_buf_simple_add>
    cca8:	4680      	mov	r8, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    ccaa:	2009      	movs	r0, #9
    ccac:	f7fd fe8e 	bl	a9cc <get_auth>
    ccb0:	f888 0000 	strb.w	r0, [r8]
    ccb4:	2300      	movs	r3, #0
    ccb6:	463a      	mov	r2, r7
    ccb8:	2106      	movs	r1, #6
    ccba:	4630      	mov	r0, r6
    ccbc:	f7fb f9e1 	bl	8082 <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    ccc0:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ccc2:	f3bf 8f5b 	dmb	ish
    ccc6:	e854 3f00 	ldrex	r3, [r4]
    ccca:	f043 0320 	orr.w	r3, r3, #32
    ccce:	e844 3200 	strex	r2, r3, [r4]
    ccd2:	2a00      	cmp	r2, #0
    ccd4:	d1f7      	bne.n	ccc6 <bt_smp_send_security_req+0x6e>
    ccd6:	f3bf 8f5b 	dmb	ish
}
    ccda:	4628      	mov	r0, r5
    ccdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    cce0:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    cce4:	e7f9      	b.n	ccda <bt_smp_send_security_req+0x82>
		return -EIO;
    cce6:	f06f 0504 	mvn.w	r5, #4
    ccea:	e7f6      	b.n	ccda <bt_smp_send_security_req+0x82>
		return -EBUSY;
    ccec:	f06f 050f 	mvn.w	r5, #15
    ccf0:	e7f3      	b.n	ccda <bt_smp_send_security_req+0x82>
		return -EINVAL;
    ccf2:	f06f 0515 	mvn.w	r5, #21
    ccf6:	e7f0      	b.n	ccda <bt_smp_send_security_req+0x82>
		return -ENOBUFS;
    ccf8:	f06f 0568 	mvn.w	r5, #104	; 0x68
    ccfc:	e7ed      	b.n	ccda <bt_smp_send_security_req+0x82>

0000ccfe <bt_smp_send_pairing_req>:
{
    ccfe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd02:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    cd04:	f7fd fec2 	bl	aa8c <smp_chan_get>
	if (!smp) {
    cd08:	2800      	cmp	r0, #0
    cd0a:	d06b      	beq.n	cde4 <bt_smp_send_pairing_req+0xe6>
    cd0c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    cd0e:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cd12:	f3bf 8f5b 	dmb	ish
    cd16:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cd1a:	f3bf 8f5b 	dmb	ish
    cd1e:	f013 0f10 	tst.w	r3, #16
    cd22:	d162      	bne.n	cdea <bt_smp_send_pairing_req+0xec>
    cd24:	f3bf 8f5b 	dmb	ish
    cd28:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cd2c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cd30:	f013 0f08 	tst.w	r3, #8
    cd34:	d15c      	bne.n	cdf0 <bt_smp_send_pairing_req+0xf2>
	if (!sec_level_reachable(conn)) {
    cd36:	4628      	mov	r0, r5
    cd38:	f7fd fe5e 	bl	a9f8 <sec_level_reachable>
    cd3c:	2800      	cmp	r0, #0
    cd3e:	d05a      	beq.n	cdf6 <bt_smp_send_pairing_req+0xf8>
	if (smp_init(smp)) {
    cd40:	4620      	mov	r0, r4
    cd42:	f7fd feb6 	bl	aab2 <smp_init>
    cd46:	4680      	mov	r8, r0
    cd48:	2800      	cmp	r0, #0
    cd4a:	d157      	bne.n	cdfc <bt_smp_send_pairing_req+0xfe>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    cd4c:	2206      	movs	r2, #6
    cd4e:	2101      	movs	r1, #1
    cd50:	4628      	mov	r0, r5
    cd52:	f7fd fea0 	bl	aa96 <smp_create_pdu>
	if (!req_buf) {
    cd56:	4607      	mov	r7, r0
    cd58:	2800      	cmp	r0, #0
    cd5a:	d052      	beq.n	ce02 <bt_smp_send_pairing_req+0x104>
	req = net_buf_add(req_buf, sizeof(*req));
    cd5c:	2106      	movs	r1, #6
    cd5e:	3008      	adds	r0, #8
    cd60:	f00d fff8 	bl	1ad54 <net_buf_simple_add>
    cd64:	4605      	mov	r5, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    cd66:	2009      	movs	r0, #9
    cd68:	f7fd fe30 	bl	a9cc <get_auth>
    cd6c:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
    cd6e:	f7fd fdaf 	bl	a8d0 <get_io_capa>
    cd72:	7028      	strb	r0, [r5, #0]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    cd74:	f04f 0900 	mov.w	r9, #0
    cd78:	f885 9001 	strb.w	r9, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    cd7c:	2310      	movs	r3, #16
    cd7e:	70eb      	strb	r3, [r5, #3]
	req->init_key_dist = SEND_KEYS;
    cd80:	2205      	movs	r2, #5
    cd82:	712a      	strb	r2, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
    cd84:	2307      	movs	r3, #7
    cd86:	716b      	strb	r3, [r5, #5]
	smp->local_dist = SEND_KEYS;
    cd88:	f884 2179 	strb.w	r2, [r4, #377]	; 0x179
	smp->remote_dist = RECV_KEYS;
    cd8c:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    cd90:	2301      	movs	r3, #1
    cd92:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    cd96:	2206      	movs	r2, #6
    cd98:	4629      	mov	r1, r5
    cd9a:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    cd9e:	f7f3 fa8f 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    cda2:	464a      	mov	r2, r9
    cda4:	4639      	mov	r1, r7
    cda6:	4620      	mov	r0, r4
    cda8:	f7fd fec8 	bl	ab3c <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    cdac:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cdae:	f3bf 8f5b 	dmb	ish
    cdb2:	e854 3f00 	ldrex	r3, [r4]
    cdb6:	f043 0304 	orr.w	r3, r3, #4
    cdba:	e844 3200 	strex	r2, r3, [r4]
    cdbe:	2a00      	cmp	r2, #0
    cdc0:	d1f7      	bne.n	cdb2 <bt_smp_send_pairing_req+0xb4>
    cdc2:	f3bf 8f5b 	dmb	ish
    cdc6:	f3bf 8f5b 	dmb	ish
    cdca:	e856 3f00 	ldrex	r3, [r6]
    cdce:	f043 0308 	orr.w	r3, r3, #8
    cdd2:	e846 3200 	strex	r2, r3, [r6]
    cdd6:	2a00      	cmp	r2, #0
    cdd8:	d1f7      	bne.n	cdca <bt_smp_send_pairing_req+0xcc>
    cdda:	f3bf 8f5b 	dmb	ish
}
    cdde:	4640      	mov	r0, r8
    cde0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOTCONN;
    cde4:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    cde8:	e7f9      	b.n	cdde <bt_smp_send_pairing_req+0xe0>
		return -EIO;
    cdea:	f06f 0804 	mvn.w	r8, #4
    cdee:	e7f6      	b.n	cdde <bt_smp_send_pairing_req+0xe0>
		return -EBUSY;
    cdf0:	f06f 080f 	mvn.w	r8, #15
    cdf4:	e7f3      	b.n	cdde <bt_smp_send_pairing_req+0xe0>
		return -EINVAL;
    cdf6:	f06f 0815 	mvn.w	r8, #21
    cdfa:	e7f0      	b.n	cdde <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    cdfc:	f06f 0868 	mvn.w	r8, #104	; 0x68
    ce00:	e7ed      	b.n	cdde <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    ce02:	f06f 0868 	mvn.w	r8, #104	; 0x68
    ce06:	e7ea      	b.n	cdde <bt_smp_send_pairing_req+0xe0>

0000ce08 <smp_security_request>:
{
    ce08:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce0a:	b085      	sub	sp, #20
    ce0c:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    ce0e:	6804      	ldr	r4, [r0, #0]
	struct bt_smp_security_request *req = (void *)buf->data;
    ce10:	688b      	ldr	r3, [r1, #8]
	if (sc_supported) {
    ce12:	4a35      	ldr	r2, [pc, #212]	; (cee8 <smp_security_request+0xe0>)
    ce14:	7812      	ldrb	r2, [r2, #0]
    ce16:	b332      	cbz	r2, ce66 <smp_security_request+0x5e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    ce18:	781d      	ldrb	r5, [r3, #0]
    ce1a:	f005 050f 	and.w	r5, r5, #15
	if (!conn->le.keys) {
    ce1e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    ce20:	b32b      	cbz	r3, ce6e <smp_security_request+0x66>
	if (!conn->le.keys) {
    ce22:	6f23      	ldr	r3, [r4, #112]	; 0x70
    ce24:	2b00      	cmp	r3, #0
    ce26:	d039      	beq.n	ce9c <smp_security_request+0x94>
	if ((auth & BT_SMP_AUTH_MITM) &&
    ce28:	f015 0f04 	tst.w	r5, #4
    ce2c:	d12e      	bne.n	ce8c <smp_security_request+0x84>
	if ((auth & BT_SMP_AUTH_SC) &&
    ce2e:	f015 0f08 	tst.w	r5, #8
    ce32:	d004      	beq.n	ce3e <smp_security_request+0x36>
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    ce34:	6f23      	ldr	r3, [r4, #112]	; 0x70
    ce36:	899b      	ldrh	r3, [r3, #12]
	if ((auth & BT_SMP_AUTH_SC) &&
    ce38:	f013 0f20 	tst.w	r3, #32
    ce3c:	d02e      	beq.n	ce9c <smp_security_request+0x94>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    ce3e:	6f23      	ldr	r3, [r4, #112]	; 0x70
					conn->le.keys->ltk.val,
    ce40:	f103 021a 	add.w	r2, r3, #26
					conn->le.keys->enc_size) < 0) {
    ce44:	79dd      	ldrb	r5, [r3, #7]
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    ce46:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    ce4a:	9502      	str	r5, [sp, #8]
    ce4c:	9201      	str	r2, [sp, #4]
    ce4e:	8b1b      	ldrh	r3, [r3, #24]
    ce50:	9300      	str	r3, [sp, #0]
    ce52:	4602      	mov	r2, r0
    ce54:	460b      	mov	r3, r1
    ce56:	4620      	mov	r0, r4
    ce58:	f7f9 ffbc 	bl	6dd4 <bt_conn_le_start_encryption>
    ce5c:	2800      	cmp	r0, #0
    ce5e:	da24      	bge.n	ceaa <smp_security_request+0xa2>
		return BT_SMP_ERR_UNSPECIFIED;
    ce60:	2008      	movs	r0, #8
}
    ce62:	b005      	add	sp, #20
    ce64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    ce66:	781d      	ldrb	r5, [r3, #0]
    ce68:	f005 0507 	and.w	r5, r5, #7
    ce6c:	e7d7      	b.n	ce1e <smp_security_request+0x16>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    ce6e:	f104 0748 	add.w	r7, r4, #72	; 0x48
    ce72:	4639      	mov	r1, r7
    ce74:	2020      	movs	r0, #32
    ce76:	f000 f98f 	bl	d198 <bt_keys_find>
    ce7a:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys) {
    ce7c:	2800      	cmp	r0, #0
    ce7e:	d1d0      	bne.n	ce22 <smp_security_request+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    ce80:	4639      	mov	r1, r7
    ce82:	2004      	movs	r0, #4
    ce84:	f000 f988 	bl	d198 <bt_keys_find>
    ce88:	6720      	str	r0, [r4, #112]	; 0x70
    ce8a:	e7ca      	b.n	ce22 <smp_security_request+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ce8c:	f3bf 8f5b 	dmb	ish
    ce90:	689b      	ldr	r3, [r3, #8]
    ce92:	f3bf 8f5b 	dmb	ish
	if ((auth & BT_SMP_AUTH_MITM) &&
    ce96:	f013 0f01 	tst.w	r3, #1
    ce9a:	d1c8      	bne.n	ce2e <smp_security_request+0x26>
	if (bt_smp_send_pairing_req(conn) < 0) {
    ce9c:	4620      	mov	r0, r4
    ce9e:	f7ff ff2e 	bl	ccfe <bt_smp_send_pairing_req>
    cea2:	2800      	cmp	r0, #0
    cea4:	da10      	bge.n	cec8 <smp_security_request+0xc0>
		return BT_SMP_ERR_UNSPECIFIED;
    cea6:	2008      	movs	r0, #8
    cea8:	e7db      	b.n	ce62 <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    ceaa:	36a0      	adds	r6, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ceac:	f3bf 8f5b 	dmb	ish
    ceb0:	e856 3f00 	ldrex	r3, [r6]
    ceb4:	f043 0302 	orr.w	r3, r3, #2
    ceb8:	e846 3200 	strex	r2, r3, [r6]
    cebc:	2a00      	cmp	r2, #0
    cebe:	d1f7      	bne.n	ceb0 <smp_security_request+0xa8>
    cec0:	f3bf 8f5b 	dmb	ish
	return 0;
    cec4:	2000      	movs	r0, #0
    cec6:	e7cc      	b.n	ce62 <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    cec8:	36a0      	adds	r6, #160	; 0xa0
    ceca:	f3bf 8f5b 	dmb	ish
    cece:	e856 3f00 	ldrex	r3, [r6]
    ced2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    ced6:	e846 3200 	strex	r2, r3, [r6]
    ceda:	2a00      	cmp	r2, #0
    cedc:	d1f7      	bne.n	cece <smp_security_request+0xc6>
    cede:	f3bf 8f5b 	dmb	ish
	return 0;
    cee2:	2000      	movs	r0, #0
    cee4:	e7bd      	b.n	ce62 <smp_security_request+0x5a>
    cee6:	bf00      	nop
    cee8:	20000f88 	.word	0x20000f88

0000ceec <bt_smp_sign_verify>:
{
    ceec:	b530      	push	{r4, r5, lr}
    ceee:	b085      	sub	sp, #20
    cef0:	4605      	mov	r5, r0
    cef2:	460c      	mov	r4, r1
	return buf->data + buf->len;
    cef4:	6889      	ldr	r1, [r1, #8]
    cef6:	89a3      	ldrh	r3, [r4, #12]
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    cef8:	3b0c      	subs	r3, #12
    cefa:	220c      	movs	r2, #12
    cefc:	4419      	add	r1, r3
    cefe:	a801      	add	r0, sp, #4
    cf00:	f7f3 f9de 	bl	2c0 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    cf04:	f105 0148 	add.w	r1, r5, #72	; 0x48
    cf08:	2010      	movs	r0, #16
    cf0a:	f000 f945 	bl	d198 <bt_keys_find>
	if (!keys) {
    cf0e:	b320      	cbz	r0, cf5a <bt_smp_sign_verify+0x6e>
    cf10:	4605      	mov	r5, r0
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    cf12:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    cf14:	a904      	add	r1, sp, #16
    cf16:	f841 3d10 	str.w	r3, [r1, #-16]!
    cf1a:	68a0      	ldr	r0, [r4, #8]
    cf1c:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    cf1e:	3b0c      	subs	r3, #12
    cf20:	2204      	movs	r2, #4
    cf22:	4418      	add	r0, r3
    cf24:	f7f3 f9cc 	bl	2c0 <memcpy>
			   buf->len - sizeof(sig));
    cf28:	89a2      	ldrh	r2, [r4, #12]
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    cf2a:	3a0c      	subs	r2, #12
    cf2c:	b292      	uxth	r2, r2
    cf2e:	68a1      	ldr	r1, [r4, #8]
    cf30:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    cf34:	f7fd feac 	bl	ac90 <smp_sign_buf>
	if (err) {
    cf38:	b990      	cbnz	r0, cf60 <bt_smp_sign_verify+0x74>
    cf3a:	68a1      	ldr	r1, [r4, #8]
    cf3c:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    cf3e:	3b0c      	subs	r3, #12
    cf40:	220c      	movs	r2, #12
    cf42:	4419      	add	r1, r3
    cf44:	a801      	add	r0, sp, #4
    cf46:	f01d fc23 	bl	2a790 <memcmp>
    cf4a:	4602      	mov	r2, r0
    cf4c:	b958      	cbnz	r0, cf66 <bt_smp_sign_verify+0x7a>
	keys->remote_csrk.cnt++;
    cf4e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    cf50:	3301      	adds	r3, #1
    cf52:	66eb      	str	r3, [r5, #108]	; 0x6c
}
    cf54:	4610      	mov	r0, r2
    cf56:	b005      	add	sp, #20
    cf58:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    cf5a:	f06f 0201 	mvn.w	r2, #1
    cf5e:	e7f9      	b.n	cf54 <bt_smp_sign_verify+0x68>
		return -EIO;
    cf60:	f06f 0204 	mvn.w	r2, #4
    cf64:	e7f6      	b.n	cf54 <bt_smp_sign_verify+0x68>
		return -EBADMSG;
    cf66:	f06f 024c 	mvn.w	r2, #76	; 0x4c
    cf6a:	e7f3      	b.n	cf54 <bt_smp_sign_verify+0x68>

0000cf6c <bt_smp_sign>:
{
    cf6c:	b530      	push	{r4, r5, lr}
    cf6e:	b083      	sub	sp, #12
    cf70:	460c      	mov	r4, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, &conn->le.dst);
    cf72:	f100 0148 	add.w	r1, r0, #72	; 0x48
    cf76:	2008      	movs	r0, #8
    cf78:	f000 f90e 	bl	d198 <bt_keys_find>
	if (!keys) {
    cf7c:	b300      	cbz	r0, cfc0 <bt_smp_sign+0x54>
    cf7e:	4605      	mov	r5, r0
	net_buf_add(buf, 12);
    cf80:	210c      	movs	r1, #12
    cf82:	f104 0008 	add.w	r0, r4, #8
    cf86:	f00d fee5 	bl	1ad54 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    cf8a:	6dab      	ldr	r3, [r5, #88]	; 0x58
    cf8c:	a902      	add	r1, sp, #8
    cf8e:	f841 3d04 	str.w	r3, [r1, #-4]!
    cf92:	68a0      	ldr	r0, [r4, #8]
    cf94:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    cf96:	3b0c      	subs	r3, #12
    cf98:	2204      	movs	r2, #4
    cf9a:	4418      	add	r0, r3
    cf9c:	f7f3 f990 	bl	2c0 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    cfa0:	89a2      	ldrh	r2, [r4, #12]
    cfa2:	3a0c      	subs	r2, #12
    cfa4:	b292      	uxth	r2, r2
    cfa6:	68a1      	ldr	r1, [r4, #8]
    cfa8:	f105 0048 	add.w	r0, r5, #72	; 0x48
    cfac:	f7fd fe70 	bl	ac90 <smp_sign_buf>
	if (err) {
    cfb0:	4602      	mov	r2, r0
    cfb2:	b940      	cbnz	r0, cfc6 <bt_smp_sign+0x5a>
	keys->local_csrk.cnt++;
    cfb4:	6dab      	ldr	r3, [r5, #88]	; 0x58
    cfb6:	3301      	adds	r3, #1
    cfb8:	65ab      	str	r3, [r5, #88]	; 0x58
}
    cfba:	4610      	mov	r0, r2
    cfbc:	b003      	add	sp, #12
    cfbe:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    cfc0:	f06f 0201 	mvn.w	r2, #1
    cfc4:	e7f9      	b.n	cfba <bt_smp_sign+0x4e>
		return -EIO;
    cfc6:	f06f 0204 	mvn.w	r2, #4
    cfca:	e7f6      	b.n	cfba <bt_smp_sign+0x4e>

0000cfcc <bt_smp_update_keys>:
{
    cfcc:	b570      	push	{r4, r5, r6, lr}
    cfce:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    cfd0:	f7fd fd5c 	bl	aa8c <smp_chan_get>
	if (!smp) {
    cfd4:	2800      	cmp	r0, #0
    cfd6:	d03d      	beq.n	d054 <bt_smp_update_keys+0x88>
    cfd8:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cfda:	f3bf 8f5b 	dmb	ish
    cfde:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cfe2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cfe6:	f013 0f08 	tst.w	r3, #8
    cfea:	d033      	beq.n	d054 <bt_smp_update_keys+0x88>
	if (conn->le.keys) {
    cfec:	6f20      	ldr	r0, [r4, #112]	; 0x70
    cfee:	b108      	cbz	r0, cff4 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    cff0:	f000 f97f 	bl	d2f2 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    cff4:	f104 0048 	add.w	r0, r4, #72	; 0x48
    cff8:	f000 f8a4 	bl	d144 <bt_keys_get_addr>
    cffc:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    cffe:	b348      	cbz	r0, d054 <bt_smp_update_keys+0x88>
    d000:	f3bf 8f5b 	dmb	ish
    d004:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d008:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    d00c:	f413 6f00 	tst.w	r3, #2048	; 0x800
    d010:	d121      	bne.n	d056 <bt_smp_update_keys+0x8a>
	switch (smp->method) {
    d012:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    d016:	3b01      	subs	r3, #1
    d018:	2b02      	cmp	r3, #2
    d01a:	d82b      	bhi.n	d074 <bt_smp_update_keys+0xa8>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    d01c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d01e:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d020:	f3bf 8f5b 	dmb	ish
    d024:	e853 2f00 	ldrex	r2, [r3]
    d028:	f042 0201 	orr.w	r2, r2, #1
    d02c:	e843 2100 	strex	r1, r2, [r3]
    d030:	2900      	cmp	r1, #0
    d032:	d1f7      	bne.n	d024 <bt_smp_update_keys+0x58>
    d034:	f3bf 8f5b 	dmb	ish
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    d038:	6f26      	ldr	r6, [r4, #112]	; 0x70
    d03a:	4628      	mov	r0, r5
    d03c:	f7fd fc8a 	bl	a954 <get_encryption_key_size>
    d040:	71f0      	strb	r0, [r6, #7]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d042:	f3bf 8f5b 	dmb	ish
    d046:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d04a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    d04e:	f013 0f20 	tst.w	r3, #32
    d052:	d11e      	bne.n	d092 <bt_smp_update_keys+0xc6>
    d054:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    d056:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d058:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d05a:	f3bf 8f5b 	dmb	ish
    d05e:	e853 2f00 	ldrex	r2, [r3]
    d062:	f042 0202 	orr.w	r2, r2, #2
    d066:	e843 2100 	strex	r1, r2, [r3]
    d06a:	2900      	cmp	r1, #0
    d06c:	d1f7      	bne.n	d05e <bt_smp_update_keys+0x92>
    d06e:	f3bf 8f5b 	dmb	ish
    d072:	e7ce      	b.n	d012 <bt_smp_update_keys+0x46>
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    d074:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d076:	3308      	adds	r3, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d078:	f3bf 8f5b 	dmb	ish
    d07c:	e853 2f00 	ldrex	r2, [r3]
    d080:	f022 0201 	bic.w	r2, r2, #1
    d084:	e843 2100 	strex	r1, r2, [r3]
    d088:	2900      	cmp	r1, #0
    d08a:	d1f7      	bne.n	d07c <bt_smp_update_keys+0xb0>
    d08c:	f3bf 8f5b 	dmb	ish
    d090:	e7d2      	b.n	d038 <bt_smp_update_keys+0x6c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d092:	f3bf 8f5b 	dmb	ish
    d096:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d09a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    d09e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    d0a2:	d0d7      	beq.n	d054 <bt_smp_update_keys+0x88>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    d0a4:	2120      	movs	r1, #32
    d0a6:	6f20      	ldr	r0, [r4, #112]	; 0x70
    d0a8:	f000 f90c 	bl	d2c4 <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    d0ac:	6f20      	ldr	r0, [r4, #112]	; 0x70
    d0ae:	2210      	movs	r2, #16
    d0b0:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    d0b4:	301a      	adds	r0, #26
    d0b6:	f7f3 f903 	bl	2c0 <memcpy>
		conn->le.keys->ltk.rand = 0;
    d0ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d0bc:	2000      	movs	r0, #0
    d0be:	2100      	movs	r1, #0
    d0c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    d0c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d0c6:	2200      	movs	r2, #0
    d0c8:	831a      	strh	r2, [r3, #24]
    d0ca:	e7c3      	b.n	d054 <bt_smp_update_keys+0x88>

0000d0cc <bt_smp_get_tk>:
{
    d0cc:	b570      	push	{r4, r5, r6, lr}
    d0ce:	460d      	mov	r5, r1
	smp = smp_chan_get(conn);
    d0d0:	f7fd fcdc 	bl	aa8c <smp_chan_get>
	if (!smp) {
    d0d4:	b300      	cbz	r0, d118 <bt_smp_get_tk+0x4c>
    d0d6:	4604      	mov	r4, r0
    d0d8:	f3bf 8f5b 	dmb	ish
    d0dc:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    d0e0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    d0e4:	f013 0f08 	tst.w	r3, #8
    d0e8:	d101      	bne.n	d0ee <bt_smp_get_tk+0x22>
		return false;
    d0ea:	2000      	movs	r0, #0
    d0ec:	bd70      	pop	{r4, r5, r6, pc}
	enc_size = get_encryption_key_size(smp);
    d0ee:	f7fd fc31 	bl	a954 <get_encryption_key_size>
    d0f2:	4606      	mov	r6, r0
	memcpy(tk, smp->tk, enc_size);
    d0f4:	4602      	mov	r2, r0
    d0f6:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
    d0fa:	4628      	mov	r0, r5
    d0fc:	f7f3 f8e0 	bl	2c0 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    d100:	2e0f      	cmp	r6, #15
    d102:	d901      	bls.n	d108 <bt_smp_get_tk+0x3c>
	return true;
    d104:	2001      	movs	r0, #1
}
    d106:	bd70      	pop	{r4, r5, r6, pc}
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    d108:	f1c6 0210 	rsb	r2, r6, #16
    d10c:	2100      	movs	r1, #0
    d10e:	19a8      	adds	r0, r5, r6
    d110:	f01d fbd2 	bl	2a8b8 <memset>
	return true;
    d114:	2001      	movs	r0, #1
    d116:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    d118:	2000      	movs	r0, #0
    d11a:	bd70      	pop	{r4, r5, r6, pc}

0000d11c <bt_smp_init>:

int bt_smp_init(void)
{
    d11c:	b508      	push	{r3, lr}
	};
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
    d11e:	f7fd fca9 	bl	aa74 <le_sc_supported>
    d122:	4b05      	ldr	r3, [pc, #20]	; (d138 <bt_smp_init+0x1c>)
    d124:	7018      	strb	r0, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    d126:	4805      	ldr	r0, [pc, #20]	; (d13c <bt_smp_init+0x20>)
    d128:	f7fa fe04 	bl	7d34 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    d12c:	4804      	ldr	r0, [pc, #16]	; (d140 <bt_smp_init+0x24>)
    d12e:	f7f9 fc7f 	bl	6a30 <bt_pub_key_gen>

	return smp_self_test();
}
    d132:	2000      	movs	r0, #0
    d134:	bd08      	pop	{r3, pc}
    d136:	bf00      	nop
    d138:	20000f88 	.word	0x20000f88
    d13c:	2000c12c 	.word	0x2000c12c
    d140:	2000c14c 	.word	0x2000c14c

0000d144 <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BT_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(const bt_addr_le_t *addr)
{
    d144:	b5f0      	push	{r4, r5, r6, r7, lr}
    d146:	b083      	sub	sp, #12
    d148:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d14a:	2500      	movs	r5, #0
    d14c:	b11d      	cbz	r5, d156 <bt_keys_get_addr+0x12>
		}
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    d14e:	2400      	movs	r4, #0
}
    d150:	4620      	mov	r0, r4
    d152:	b003      	add	sp, #12
    d154:	bdf0      	pop	{r4, r5, r6, r7, pc}
		keys = &key_pool[i];
    d156:	00eb      	lsls	r3, r5, #3
    d158:	442b      	add	r3, r5
    d15a:	011a      	lsls	r2, r3, #4
    d15c:	4c0d      	ldr	r4, [pc, #52]	; (d194 <bt_keys_get_addr+0x50>)
    d15e:	4414      	add	r4, r2
	return memcmp(a, b, sizeof(*a));
    d160:	2207      	movs	r2, #7
    d162:	4631      	mov	r1, r6
    d164:	4620      	mov	r0, r4
    d166:	f01d fb13 	bl	2a790 <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    d16a:	2800      	cmp	r0, #0
    d16c:	d0f0      	beq.n	d150 <bt_keys_get_addr+0xc>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    d16e:	2300      	movs	r3, #0
    d170:	9300      	str	r3, [sp, #0]
    d172:	f8cd 3003 	str.w	r3, [sp, #3]
    d176:	2207      	movs	r2, #7
    d178:	4669      	mov	r1, sp
    d17a:	4620      	mov	r0, r4
    d17c:	f01d fb08 	bl	2a790 <memcmp>
    d180:	b108      	cbz	r0, d186 <bt_keys_get_addr+0x42>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d182:	3501      	adds	r5, #1
    d184:	e7e2      	b.n	d14c <bt_keys_get_addr+0x8>
	memcpy(dst, src, sizeof(*dst));
    d186:	2207      	movs	r2, #7
    d188:	4631      	mov	r1, r6
    d18a:	4620      	mov	r0, r4
    d18c:	f7f3 f898 	bl	2c0 <memcpy>
			return keys;
    d190:	e7de      	b.n	d150 <bt_keys_get_addr+0xc>
    d192:	bf00      	nop
    d194:	20000f90 	.word	0x20000f90

0000d198 <bt_keys_find>:
		}
	}
}

struct bt_keys *bt_keys_find(int type, const bt_addr_le_t *addr)
{
    d198:	b570      	push	{r4, r5, r6, lr}
    d19a:	4605      	mov	r5, r0
    d19c:	460e      	mov	r6, r1
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d19e:	2400      	movs	r4, #0
    d1a0:	b10c      	cbz	r4, d1a6 <bt_keys_find+0xe>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    d1a2:	2000      	movs	r0, #0
}
    d1a4:	bd70      	pop	{r4, r5, r6, pc}
		if ((key_pool[i].keys & type) &&
    d1a6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d1aa:	011a      	lsls	r2, r3, #4
    d1ac:	4b0b      	ldr	r3, [pc, #44]	; (d1dc <bt_keys_find+0x44>)
    d1ae:	4413      	add	r3, r2
    d1b0:	899b      	ldrh	r3, [r3, #12]
    d1b2:	422b      	tst	r3, r5
    d1b4:	d101      	bne.n	d1ba <bt_keys_find+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d1b6:	3401      	adds	r4, #1
    d1b8:	e7f2      	b.n	d1a0 <bt_keys_find+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    d1ba:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    d1be:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    d1c0:	2207      	movs	r2, #7
    d1c2:	4631      	mov	r1, r6
    d1c4:	4805      	ldr	r0, [pc, #20]	; (d1dc <bt_keys_find+0x44>)
    d1c6:	4418      	add	r0, r3
    d1c8:	f01d fae2 	bl	2a790 <memcmp>
		if ((key_pool[i].keys & type) &&
    d1cc:	2800      	cmp	r0, #0
    d1ce:	d1f2      	bne.n	d1b6 <bt_keys_find+0x1e>
			return &key_pool[i];
    d1d0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d1d4:	0123      	lsls	r3, r4, #4
    d1d6:	4801      	ldr	r0, [pc, #4]	; (d1dc <bt_keys_find+0x44>)
    d1d8:	4418      	add	r0, r3
    d1da:	bd70      	pop	{r4, r5, r6, pc}
    d1dc:	20000f90 	.word	0x20000f90

0000d1e0 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(const bt_addr_le_t *addr)
{
    d1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    d1e2:	7803      	ldrb	r3, [r0, #0]
    d1e4:	2b01      	cmp	r3, #1
    d1e6:	d004      	beq.n	d1f2 <bt_keys_find_irk+0x12>
		return false;
    d1e8:	2300      	movs	r3, #0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
    d1ea:	b153      	cbz	r3, d202 <bt_keys_find_irk+0x22>
    d1ec:	4605      	mov	r5, r0
    d1ee:	2400      	movs	r4, #0
    d1f0:	e00a      	b.n	d208 <bt_keys_find_irk+0x28>
	return BT_ADDR_IS_RPA(&addr->a);
    d1f2:	7983      	ldrb	r3, [r0, #6]
    d1f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d1f8:	2b40      	cmp	r3, #64	; 0x40
    d1fa:	bf14      	ite	ne
    d1fc:	2300      	movne	r3, #0
    d1fe:	2301      	moveq	r3, #1
    d200:	e7f3      	b.n	d1ea <bt_keys_find_irk+0xa>
		return NULL;
    d202:	2000      	movs	r0, #0
    d204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d206:	3401      	adds	r4, #1
    d208:	b9c4      	cbnz	r4, d23c <bt_keys_find_irk+0x5c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    d20a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d20e:	011a      	lsls	r2, r3, #4
    d210:	4b1e      	ldr	r3, [pc, #120]	; (d28c <bt_keys_find_irk+0xac>)
    d212:	4413      	add	r3, r2
    d214:	899b      	ldrh	r3, [r3, #12]
    d216:	f013 0f02 	tst.w	r3, #2
    d21a:	d0f4      	beq.n	d206 <bt_keys_find_irk+0x26>
			continue;
		}

		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    d21c:	4611      	mov	r1, r2
    d21e:	3140      	adds	r1, #64	; 0x40
	return memcmp(a, b, sizeof(*a));
    d220:	2206      	movs	r2, #6
    d222:	4b1a      	ldr	r3, [pc, #104]	; (d28c <bt_keys_find_irk+0xac>)
    d224:	4419      	add	r1, r3
    d226:	1c68      	adds	r0, r5, #1
    d228:	f01d fab2 	bl	2a790 <memcmp>
    d22c:	2800      	cmp	r0, #0
    d22e:	d1ea      	bne.n	d206 <bt_keys_find_irk+0x26>
			BT_DBG("cached RPA %s for %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));
			return &key_pool[i];
    d230:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d234:	0123      	lsls	r3, r4, #4
    d236:	4815      	ldr	r0, [pc, #84]	; (d28c <bt_keys_find_irk+0xac>)
    d238:	4418      	add	r0, r3
    d23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d23c:	2400      	movs	r4, #0
    d23e:	e000      	b.n	d242 <bt_keys_find_irk+0x62>
		}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d240:	3401      	adds	r4, #1
    d242:	bb04      	cbnz	r4, d286 <bt_keys_find_irk+0xa6>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    d244:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d248:	011a      	lsls	r2, r3, #4
    d24a:	4b10      	ldr	r3, [pc, #64]	; (d28c <bt_keys_find_irk+0xac>)
    d24c:	4413      	add	r3, r2
    d24e:	899b      	ldrh	r3, [r3, #12]
    d250:	f013 0f02 	tst.w	r3, #2
    d254:	d0f4      	beq.n	d240 <bt_keys_find_irk+0x60>
			continue;
		}

		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    d256:	4610      	mov	r0, r2
    d258:	3030      	adds	r0, #48	; 0x30
    d25a:	1c6e      	adds	r6, r5, #1
    d25c:	4631      	mov	r1, r6
    d25e:	4b0b      	ldr	r3, [pc, #44]	; (d28c <bt_keys_find_irk+0xac>)
    d260:	4418      	add	r0, r3
    d262:	f7f7 f987 	bl	4574 <bt_rpa_irk_matches>
    d266:	2800      	cmp	r0, #0
    d268:	d0ea      	beq.n	d240 <bt_keys_find_irk+0x60>
			BT_DBG("RPA %s matches %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));

			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
    d26a:	4d08      	ldr	r5, [pc, #32]	; (d28c <bt_keys_find_irk+0xac>)
    d26c:	00e7      	lsls	r7, r4, #3
    d26e:	193a      	adds	r2, r7, r4
    d270:	0113      	lsls	r3, r2, #4
    d272:	3340      	adds	r3, #64	; 0x40
	memcpy(dst, src, sizeof(*dst));
    d274:	2206      	movs	r2, #6
    d276:	4631      	mov	r1, r6
    d278:	18e8      	adds	r0, r5, r3
    d27a:	f7f3 f821 	bl	2c0 <memcpy>

			return &key_pool[i];
    d27e:	443c      	add	r4, r7
    d280:	0120      	lsls	r0, r4, #4
    d282:	4428      	add	r0, r5
    d284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
    d286:	2000      	movs	r0, #0
}
    d288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d28a:	bf00      	nop
    d28c:	20000f90 	.word	0x20000f90

0000d290 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(const bt_addr_le_t *addr)
{
    d290:	b538      	push	{r3, r4, r5, lr}
    d292:	4605      	mov	r5, r0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d294:	2400      	movs	r4, #0
    d296:	b10c      	cbz	r4, d29c <bt_keys_find_addr+0xc>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    d298:	2000      	movs	r0, #0
}
    d29a:	bd38      	pop	{r3, r4, r5, pc}
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    d29c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    d2a0:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    d2a2:	2207      	movs	r2, #7
    d2a4:	4629      	mov	r1, r5
    d2a6:	4806      	ldr	r0, [pc, #24]	; (d2c0 <bt_keys_find_addr+0x30>)
    d2a8:	4418      	add	r0, r3
    d2aa:	f01d fa71 	bl	2a790 <memcmp>
    d2ae:	b108      	cbz	r0, d2b4 <bt_keys_find_addr+0x24>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d2b0:	3401      	adds	r4, #1
    d2b2:	e7f0      	b.n	d296 <bt_keys_find_addr+0x6>
			return &key_pool[i];
    d2b4:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d2b8:	0123      	lsls	r3, r4, #4
    d2ba:	4801      	ldr	r0, [pc, #4]	; (d2c0 <bt_keys_find_addr+0x30>)
    d2bc:	4418      	add	r0, r3
    d2be:	bd38      	pop	{r3, r4, r5, pc}
    d2c0:	20000f90 	.word	0x20000f90

0000d2c4 <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    d2c4:	8983      	ldrh	r3, [r0, #12]
    d2c6:	4319      	orrs	r1, r3
    d2c8:	8181      	strh	r1, [r0, #12]
    d2ca:	4770      	bx	lr

0000d2cc <bt_keys_get_type>:
{
    d2cc:	b570      	push	{r4, r5, r6, lr}
    d2ce:	4606      	mov	r6, r0
    d2d0:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    d2d2:	f7ff ff61 	bl	d198 <bt_keys_find>
	if (keys) {
    d2d6:	4604      	mov	r4, r0
    d2d8:	b108      	cbz	r0, d2de <bt_keys_get_type+0x12>
}
    d2da:	4620      	mov	r0, r4
    d2dc:	bd70      	pop	{r4, r5, r6, pc}
	keys = bt_keys_get_addr(addr);
    d2de:	4628      	mov	r0, r5
    d2e0:	f7ff ff30 	bl	d144 <bt_keys_get_addr>
	if (!keys) {
    d2e4:	4604      	mov	r4, r0
    d2e6:	2800      	cmp	r0, #0
    d2e8:	d0f7      	beq.n	d2da <bt_keys_get_type+0xe>
	bt_keys_add_type(keys, type);
    d2ea:	4631      	mov	r1, r6
    d2ec:	f7ff ffea 	bl	d2c4 <bt_keys_add_type>
	return keys;
    d2f0:	e7f3      	b.n	d2da <bt_keys_get_type+0xe>

0000d2f2 <bt_keys_clear>:
}

void bt_keys_clear(struct bt_keys *keys)
{
    d2f2:	b508      	push	{r3, lr}
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	memset(keys, 0, sizeof(*keys));
    d2f4:	2290      	movs	r2, #144	; 0x90
    d2f6:	2100      	movs	r1, #0
    d2f8:	f01d fade 	bl	2a8b8 <memset>
    d2fc:	bd08      	pop	{r3, pc}

0000d2fe <status_cmd_handle>:
}
    d2fe:	f06f 0015 	mvn.w	r0, #21
    d302:	4770      	bx	lr

0000d304 <evt_create>:
{
    d304:	b538      	push	{r3, r4, r5, lr}
    d306:	460d      	mov	r5, r1
    d308:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    d30a:	2102      	movs	r1, #2
    d30c:	3008      	adds	r0, #8
    d30e:	f00d fd21 	bl	1ad54 <net_buf_simple_add>
	hdr->evt = evt;
    d312:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    d314:	7044      	strb	r4, [r0, #1]
    d316:	bd38      	pop	{r3, r4, r5, pc}

0000d318 <cmd_status>:
{
    d318:	b538      	push	{r3, r4, r5, lr}
    d31a:	4605      	mov	r5, r0
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    d31c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d320:	f7f9 fb5e 	bl	69e0 <bt_buf_get_cmd_complete>
    d324:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    d326:	2204      	movs	r2, #4
    d328:	210f      	movs	r1, #15
    d32a:	f7ff ffeb 	bl	d304 <evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
    d32e:	2104      	movs	r1, #4
    d330:	f104 0008 	add.w	r0, r4, #8
    d334:	f00d fd0e 	bl	1ad54 <net_buf_simple_add>
	cs->status = status;
    d338:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
    d33a:	2301      	movs	r3, #1
    d33c:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    d33e:	4b02      	ldr	r3, [pc, #8]	; (d348 <cmd_status+0x30>)
    d340:	881b      	ldrh	r3, [r3, #0]
    d342:	8043      	strh	r3, [r0, #2]
}
    d344:	4620      	mov	r0, r4
    d346:	bd38      	pop	{r3, r4, r5, pc}
    d348:	20001020 	.word	0x20001020

0000d34c <disconnect>:
{
    d34c:	b510      	push	{r4, lr}
    d34e:	460c      	mov	r4, r1
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    d350:	6883      	ldr	r3, [r0, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    d352:	7899      	ldrb	r1, [r3, #2]
    d354:	8818      	ldrh	r0, [r3, #0]
    d356:	f00b f966 	bl	18626 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d35a:	b100      	cbz	r0, d35e <disconnect+0x12>
    d35c:	200c      	movs	r0, #12
    d35e:	f7ff ffdb 	bl	d318 <cmd_status>
    d362:	6020      	str	r0, [r4, #0]
    d364:	bd10      	pop	{r4, pc}
	...

0000d368 <cmd_complete>:
{
    d368:	b538      	push	{r3, r4, r5, lr}
    d36a:	4604      	mov	r4, r0
    d36c:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    d36e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d372:	f7f9 fb35 	bl	69e0 <bt_buf_get_cmd_complete>
    d376:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    d378:	1cea      	adds	r2, r5, #3
    d37a:	b2d2      	uxtb	r2, r2
    d37c:	210e      	movs	r1, #14
    d37e:	f7ff ffc1 	bl	d304 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    d382:	6820      	ldr	r0, [r4, #0]
    d384:	2103      	movs	r1, #3
    d386:	3008      	adds	r0, #8
    d388:	f00d fce4 	bl	1ad54 <net_buf_simple_add>
	cc->ncmd = 1;
    d38c:	2301      	movs	r3, #1
    d38e:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    d390:	4b04      	ldr	r3, [pc, #16]	; (d3a4 <cmd_complete+0x3c>)
    d392:	881b      	ldrh	r3, [r3, #0]
    d394:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    d398:	6820      	ldr	r0, [r4, #0]
    d39a:	4629      	mov	r1, r5
    d39c:	3008      	adds	r0, #8
    d39e:	f00d fcd9 	bl	1ad54 <net_buf_simple_add>
}
    d3a2:	bd38      	pop	{r3, r4, r5, pc}
    d3a4:	20001020 	.word	0x20001020

0000d3a8 <set_event_mask_page_2>:
{
    d3a8:	b570      	push	{r4, r5, r6, lr}
    d3aa:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask_page_2 *cmd = (void *)buf->data;
    d3ac:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    d3ae:	79da      	ldrb	r2, [r3, #7]
    d3b0:	7999      	ldrb	r1, [r3, #6]
    d3b2:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    d3b6:	7958      	ldrb	r0, [r3, #5]
    d3b8:	791a      	ldrb	r2, [r3, #4]
    d3ba:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d3be:	2400      	movs	r4, #0
    d3c0:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    d3c4:	78d9      	ldrb	r1, [r3, #3]
    d3c6:	789a      	ldrb	r2, [r3, #2]
    d3c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d3cc:	7859      	ldrb	r1, [r3, #1]
    d3ce:	781b      	ldrb	r3, [r3, #0]
    d3d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    d3d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d3d8:	ea44 0003 	orr.w	r0, r4, r3
    d3dc:	4629      	mov	r1, r5
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    d3de:	4b04      	ldr	r3, [pc, #16]	; (d3f0 <set_event_mask_page_2+0x48>)
    d3e0:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    d3e4:	2101      	movs	r1, #1
    d3e6:	4630      	mov	r0, r6
    d3e8:	f7ff ffbe 	bl	d368 <cmd_complete>
	ccst->status = 0x00;
    d3ec:	7004      	strb	r4, [r0, #0]
    d3ee:	bd70      	pop	{r4, r5, r6, pc}
    d3f0:	200010b0 	.word	0x200010b0

0000d3f4 <read_local_version_info>:
{
    d3f4:	b508      	push	{r3, lr}
    d3f6:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d3f8:	2109      	movs	r1, #9
    d3fa:	f7ff ffb5 	bl	d368 <cmd_complete>
	rp->status = 0x00;
    d3fe:	2300      	movs	r3, #0
    d400:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
    d402:	2209      	movs	r2, #9
    d404:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    d406:	7083      	strb	r3, [r0, #2]
    d408:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    d40a:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    d40c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d410:	7143      	strb	r3, [r0, #5]
    d412:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    d414:	71c3      	strb	r3, [r0, #7]
    d416:	7203      	strb	r3, [r0, #8]
    d418:	bd08      	pop	{r3, pc}

0000d41a <le_read_buffer_size>:
{
    d41a:	b508      	push	{r3, lr}
    d41c:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d41e:	2104      	movs	r1, #4
    d420:	f7ff ffa2 	bl	d368 <cmd_complete>
	rp->status = 0x00;
    d424:	2300      	movs	r3, #0
    d426:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    d428:	221b      	movs	r2, #27
    d42a:	7042      	strb	r2, [r0, #1]
    d42c:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    d42e:	2302      	movs	r3, #2
    d430:	70c3      	strb	r3, [r0, #3]
    d432:	bd08      	pop	{r3, pc}

0000d434 <le_read_supp_states>:
{
    d434:	b508      	push	{r3, lr}
    d436:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d438:	2109      	movs	r1, #9
    d43a:	f7ff ff95 	bl	d368 <cmd_complete>
	rp->status = 0x00;
    d43e:	2200      	movs	r2, #0
    d440:	7002      	strb	r2, [r0, #0]
	dst[0] = val;
    d442:	23ff      	movs	r3, #255	; 0xff
    d444:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    d446:	7083      	strb	r3, [r0, #2]
	dst[0] = val;
    d448:	213f      	movs	r1, #63	; 0x3f
    d44a:	70c1      	strb	r1, [r0, #3]
	dst[1] = val >> 8;
    d44c:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    d44e:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    d450:	2303      	movs	r3, #3
    d452:	7183      	strb	r3, [r0, #6]
	dst[0] = val;
    d454:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    d456:	7202      	strb	r2, [r0, #8]
    d458:	bd08      	pop	{r3, pc}

0000d45a <le_read_adv_chan_tx_power>:
{
    d45a:	b508      	push	{r3, lr}
    d45c:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d45e:	2102      	movs	r1, #2
    d460:	f7ff ff82 	bl	d368 <cmd_complete>
	rp->status = 0x00;
    d464:	2300      	movs	r3, #0
    d466:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    d468:	7043      	strb	r3, [r0, #1]
    d46a:	bd08      	pop	{r3, pc}

0000d46c <vs_read_version_info>:
{
    d46c:	b508      	push	{r3, lr}
    d46e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d470:	210d      	movs	r1, #13
    d472:	f7ff ff79 	bl	d368 <cmd_complete>
	rp->status = 0x00;
    d476:	2300      	movs	r3, #0
    d478:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    d47a:	2202      	movs	r2, #2
    d47c:	7042      	strb	r2, [r0, #1]
    d47e:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    d480:	70c2      	strb	r2, [r0, #3]
    d482:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    d484:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    d486:	2201      	movs	r2, #1
    d488:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    d48a:	2209      	movs	r2, #9
    d48c:	71c2      	strb	r2, [r0, #7]
    d48e:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    d490:	2263      	movs	r2, #99	; 0x63
    d492:	7242      	strb	r2, [r0, #9]
    d494:	7283      	strb	r3, [r0, #10]
    d496:	72c3      	strb	r3, [r0, #11]
    d498:	7303      	strb	r3, [r0, #12]
    d49a:	bd08      	pop	{r3, pc}

0000d49c <meta_evt>:
{
    d49c:	b570      	push	{r4, r5, r6, lr}
    d49e:	4604      	mov	r4, r0
    d4a0:	460e      	mov	r6, r1
    d4a2:	4615      	mov	r5, r2
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    d4a4:	3201      	adds	r2, #1
    d4a6:	b2d2      	uxtb	r2, r2
    d4a8:	213e      	movs	r1, #62	; 0x3e
    d4aa:	f7ff ff2b 	bl	d304 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    d4ae:	3408      	adds	r4, #8
    d4b0:	2101      	movs	r1, #1
    d4b2:	4620      	mov	r0, r4
    d4b4:	f00d fc4e 	bl	1ad54 <net_buf_simple_add>
	me->subevent = subevt;
    d4b8:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
    d4ba:	4629      	mov	r1, r5
    d4bc:	4620      	mov	r0, r4
    d4be:	f00d fc49 	bl	1ad54 <net_buf_simple_add>
}
    d4c2:	bd70      	pop	{r4, r5, r6, pc}

0000d4c4 <le_chan_sel_algo>:
{
    d4c4:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d4c6:	4b0f      	ldr	r3, [pc, #60]	; (d504 <le_chan_sel_algo+0x40>)
    d4c8:	e9d3 4500 	ldrd	r4, r5, [r3]
    d4cc:	2400      	movs	r4, #0
    d4ce:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    d4d2:	ea54 0305 	orrs.w	r3, r4, r5
    d4d6:	d008      	beq.n	d4ea <le_chan_sel_algo+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    d4d8:	4b0b      	ldr	r3, [pc, #44]	; (d508 <le_chan_sel_algo+0x44>)
    d4da:	e9d3 4500 	ldrd	r4, r5, [r3]
    d4de:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
    d4e2:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d4e4:	ea54 0305 	orrs.w	r3, r4, r5
    d4e8:	d100      	bne.n	d4ec <le_chan_sel_algo+0x28>
    d4ea:	bd38      	pop	{r3, r4, r5, pc}
    d4ec:	4613      	mov	r3, r2
    d4ee:	460d      	mov	r5, r1
    d4f0:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    d4f2:	2203      	movs	r2, #3
    d4f4:	2114      	movs	r1, #20
    d4f6:	4618      	mov	r0, r3
    d4f8:	f7ff ffd0 	bl	d49c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    d4fc:	8005      	strh	r5, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    d4fe:	78e3      	ldrb	r3, [r4, #3]
    d500:	7083      	strb	r3, [r0, #2]
    d502:	e7f2      	b.n	d4ea <le_chan_sel_algo+0x26>
    d504:	2000c158 	.word	0x2000c158
    d508:	2000c160 	.word	0x2000c160

0000d50c <disconn_complete>:
{
    d50c:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    d50e:	4b11      	ldr	r3, [pc, #68]	; (d554 <disconn_complete+0x48>)
    d510:	e9d3 4500 	ldrd	r4, r5, [r3]
    d514:	f004 0410 	and.w	r4, r4, #16
    d518:	2500      	movs	r5, #0
    d51a:	ea54 0305 	orrs.w	r3, r4, r5
    d51e:	d100      	bne.n	d522 <disconn_complete+0x16>
    d520:	bd70      	pop	{r4, r5, r6, pc}
    d522:	4614      	mov	r4, r2
    d524:	460e      	mov	r6, r1
    d526:	4605      	mov	r5, r0
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    d528:	2204      	movs	r2, #4
    d52a:	2105      	movs	r1, #5
    d52c:	4620      	mov	r0, r4
    d52e:	f7ff fee9 	bl	d304 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d532:	2104      	movs	r1, #4
    d534:	f104 0008 	add.w	r0, r4, #8
    d538:	f00d fc0c 	bl	1ad54 <net_buf_simple_add>
	ep->status = 0x00;
    d53c:	2300      	movs	r3, #0
    d53e:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d540:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    d544:	782b      	ldrb	r3, [r5, #0]
    d546:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    d548:	4a03      	ldr	r2, [pc, #12]	; (d558 <disconn_complete+0x4c>)
    d54a:	6813      	ldr	r3, [r2, #0]
    d54c:	3b01      	subs	r3, #1
    d54e:	6013      	str	r3, [r2, #0]
    d550:	e7e6      	b.n	d520 <disconn_complete+0x14>
    d552:	bf00      	nop
    d554:	2000c158 	.word	0x2000c158
    d558:	20001024 	.word	0x20001024

0000d55c <enc_refresh_complete>:
{
    d55c:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    d55e:	4b0d      	ldr	r3, [pc, #52]	; (d594 <enc_refresh_complete+0x38>)
    d560:	e9d3 4500 	ldrd	r4, r5, [r3]
    d564:	2400      	movs	r4, #0
    d566:	f405 4500 	and.w	r5, r5, #32768	; 0x8000
    d56a:	ea54 0305 	orrs.w	r3, r4, r5
    d56e:	d100      	bne.n	d572 <enc_refresh_complete+0x16>
    d570:	bd38      	pop	{r3, r4, r5, pc}
    d572:	4614      	mov	r4, r2
    d574:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    d576:	2203      	movs	r2, #3
    d578:	2130      	movs	r1, #48	; 0x30
    d57a:	4620      	mov	r0, r4
    d57c:	f7ff fec2 	bl	d304 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d580:	2103      	movs	r1, #3
    d582:	f104 0008 	add.w	r0, r4, #8
    d586:	f00d fbe5 	bl	1ad54 <net_buf_simple_add>
	ep->status = 0x00;
    d58a:	2300      	movs	r3, #0
    d58c:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d58e:	f8a0 5001 	strh.w	r5, [r0, #1]
    d592:	e7ed      	b.n	d570 <enc_refresh_complete+0x14>
    d594:	2000c158 	.word	0x2000c158

0000d598 <auth_payload_timeout_exp>:
{
    d598:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    d59a:	4b0c      	ldr	r3, [pc, #48]	; (d5cc <auth_payload_timeout_exp+0x34>)
    d59c:	e9d3 4500 	ldrd	r4, r5, [r3]
    d5a0:	f404 0400 	and.w	r4, r4, #8388608	; 0x800000
    d5a4:	2500      	movs	r5, #0
    d5a6:	ea54 0305 	orrs.w	r3, r4, r5
    d5aa:	d100      	bne.n	d5ae <auth_payload_timeout_exp+0x16>
    d5ac:	bd38      	pop	{r3, r4, r5, pc}
    d5ae:	4614      	mov	r4, r2
    d5b0:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    d5b2:	2202      	movs	r2, #2
    d5b4:	2157      	movs	r1, #87	; 0x57
    d5b6:	4620      	mov	r0, r4
    d5b8:	f7ff fea4 	bl	d304 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d5bc:	2102      	movs	r1, #2
    d5be:	f104 0008 	add.w	r0, r4, #8
    d5c2:	f00d fbc7 	bl	1ad54 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    d5c6:	8005      	strh	r5, [r0, #0]
    d5c8:	e7f0      	b.n	d5ac <auth_payload_timeout_exp+0x14>
    d5ca:	bf00      	nop
    d5cc:	200010b0 	.word	0x200010b0

0000d5d0 <remote_version_info>:
{
    d5d0:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    d5d2:	4b11      	ldr	r3, [pc, #68]	; (d618 <remote_version_info+0x48>)
    d5d4:	e9d3 4500 	ldrd	r4, r5, [r3]
    d5d8:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    d5dc:	2500      	movs	r5, #0
    d5de:	ea54 0305 	orrs.w	r3, r4, r5
    d5e2:	d100      	bne.n	d5e6 <remote_version_info+0x16>
    d5e4:	bd70      	pop	{r4, r5, r6, pc}
    d5e6:	4615      	mov	r5, r2
    d5e8:	460e      	mov	r6, r1
    d5ea:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    d5ec:	2208      	movs	r2, #8
    d5ee:	210c      	movs	r1, #12
    d5f0:	4628      	mov	r0, r5
    d5f2:	f7ff fe87 	bl	d304 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d5f6:	2108      	movs	r1, #8
    d5f8:	1868      	adds	r0, r5, r1
    d5fa:	f00d fbab 	bl	1ad54 <net_buf_simple_add>
	ep->status = 0x00;
    d5fe:	2300      	movs	r3, #0
    d600:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d602:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    d606:	7923      	ldrb	r3, [r4, #4]
    d608:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    d60a:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    d60e:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    d610:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    d614:	80c3      	strh	r3, [r0, #6]
    d616:	e7e5      	b.n	d5e4 <remote_version_info+0x14>
    d618:	2000c158 	.word	0x2000c158

0000d61c <encrypt_change>:
{
    d61c:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    d61e:	4b0f      	ldr	r3, [pc, #60]	; (d65c <encrypt_change+0x40>)
    d620:	e9d3 4500 	ldrd	r4, r5, [r3]
    d624:	f004 0480 	and.w	r4, r4, #128	; 0x80
    d628:	2500      	movs	r5, #0
    d62a:	ea54 0305 	orrs.w	r3, r4, r5
    d62e:	d100      	bne.n	d632 <encrypt_change+0x16>
    d630:	bd70      	pop	{r4, r5, r6, pc}
    d632:	4615      	mov	r5, r2
    d634:	460e      	mov	r6, r1
    d636:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    d638:	2204      	movs	r2, #4
    d63a:	2108      	movs	r1, #8
    d63c:	4628      	mov	r0, r5
    d63e:	f7ff fe61 	bl	d304 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d642:	2104      	movs	r1, #4
    d644:	f105 0008 	add.w	r0, r5, #8
    d648:	f00d fb84 	bl	1ad54 <net_buf_simple_add>
	ep->status = err;
    d64c:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d64e:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    d652:	fab4 f384 	clz	r3, r4
    d656:	095b      	lsrs	r3, r3, #5
    d658:	70c3      	strb	r3, [r0, #3]
    d65a:	e7e9      	b.n	d630 <encrypt_change+0x14>
    d65c:	2000c158 	.word	0x2000c158

0000d660 <read_remote_ver_info>:
{
    d660:	b510      	push	{r4, lr}
    d662:	460c      	mov	r4, r1
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
    d664:	6883      	ldr	r3, [r0, #8]
	status = ll_version_ind_send(handle);
    d666:	8818      	ldrh	r0, [r3, #0]
    d668:	f00a ffc7 	bl	185fa <ll_version_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d66c:	b100      	cbz	r0, d670 <read_remote_ver_info+0x10>
    d66e:	200c      	movs	r0, #12
    d670:	f7ff fe52 	bl	d318 <cmd_status>
    d674:	6020      	str	r0, [r4, #0]
    d676:	bd10      	pop	{r4, pc}

0000d678 <link_control_cmd_handle>:
{
    d678:	b508      	push	{r3, lr}
    d67a:	460b      	mov	r3, r1
	switch (ocf) {
    d67c:	2806      	cmp	r0, #6
    d67e:	d004      	beq.n	d68a <link_control_cmd_handle+0x12>
    d680:	281d      	cmp	r0, #29
    d682:	d008      	beq.n	d696 <link_control_cmd_handle+0x1e>
		return -EINVAL;
    d684:	f06f 0015 	mvn.w	r0, #21
}
    d688:	bd08      	pop	{r3, pc}
		disconnect(cmd, evt);
    d68a:	4611      	mov	r1, r2
    d68c:	4618      	mov	r0, r3
    d68e:	f7ff fe5d 	bl	d34c <disconnect>
	return 0;
    d692:	2000      	movs	r0, #0
		break;
    d694:	bd08      	pop	{r3, pc}
		read_remote_ver_info(cmd, evt);
    d696:	4611      	mov	r1, r2
    d698:	4618      	mov	r0, r3
    d69a:	f7ff ffe1 	bl	d660 <read_remote_ver_info>
	return 0;
    d69e:	2000      	movs	r0, #0
		break;
    d6a0:	bd08      	pop	{r3, pc}
	...

0000d6a4 <reset>:
{
    d6a4:	b538      	push	{r3, r4, r5, lr}
	dup_count = -1;
    d6a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d6aa:	4b0f      	ldr	r3, [pc, #60]	; (d6e8 <reset+0x44>)
    d6ac:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    d6ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d6b2:	f641 75ff 	movw	r5, #8191	; 0x1fff
    d6b6:	4b0d      	ldr	r3, [pc, #52]	; (d6ec <reset+0x48>)
    d6b8:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d6bc:	2400      	movs	r4, #0
    d6be:	2500      	movs	r5, #0
    d6c0:	4b0b      	ldr	r3, [pc, #44]	; (d6f0 <reset+0x4c>)
    d6c2:	e9c3 4500 	strd	r4, r5, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d6c6:	241f      	movs	r4, #31
    d6c8:	2500      	movs	r5, #0
    d6ca:	4b0a      	ldr	r3, [pc, #40]	; (d6f4 <reset+0x50>)
    d6cc:	e9c3 4500 	strd	r4, r5, [r3]
	if (buf) {
    d6d0:	b140      	cbz	r0, d6e4 <reset+0x40>
    d6d2:	460c      	mov	r4, r1
		ll_reset();
    d6d4:	f00a fc8c 	bl	17ff0 <ll_reset>
		ccst = cmd_complete(evt, sizeof(*ccst));
    d6d8:	2101      	movs	r1, #1
    d6da:	4620      	mov	r0, r4
    d6dc:	f7ff fe44 	bl	d368 <cmd_complete>
		ccst->status = 0x00;
    d6e0:	2300      	movs	r3, #0
    d6e2:	7003      	strb	r3, [r0, #0]
    d6e4:	bd38      	pop	{r3, r4, r5, pc}
    d6e6:	bf00      	nop
    d6e8:	20001028 	.word	0x20001028
    d6ec:	2000c158 	.word	0x2000c158
    d6f0:	200010b0 	.word	0x200010b0
    d6f4:	2000c160 	.word	0x2000c160

0000d6f8 <read_tx_power_level>:
{
    d6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d6fa:	460a      	mov	r2, r1
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    d6fc:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d6fe:	881d      	ldrh	r5, [r3, #0]
    d700:	b2ae      	uxth	r6, r5
	type = cmd->type;
    d702:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    d704:	2104      	movs	r1, #4
    d706:	4610      	mov	r0, r2
    d708:	f7ff fe2e 	bl	d368 <cmd_complete>
    d70c:	4604      	mov	r4, r0
	status = ll_tx_power_level_get(handle, type, &rp->tx_power_level);
    d70e:	1cc2      	adds	r2, r0, #3
    d710:	4639      	mov	r1, r7
    d712:	4630      	mov	r0, r6
    d714:	f00a ff9d 	bl	18652 <ll_tx_power_level_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d718:	b120      	cbz	r0, d724 <read_tx_power_level+0x2c>
    d71a:	2302      	movs	r3, #2
    d71c:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d71e:	f8a4 5001 	strh.w	r5, [r4, #1]
    d722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d724:	2300      	movs	r3, #0
    d726:	e7f9      	b.n	d71c <read_tx_power_level+0x24>

0000d728 <read_auth_payload_timeout>:
{
    d728:	b570      	push	{r4, r5, r6, lr}
    d72a:	b082      	sub	sp, #8
    d72c:	460e      	mov	r6, r1
	struct bt_hci_cp_read_auth_payload_timeout *cmd = (void *)buf->data;
    d72e:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d730:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    d732:	f10d 0106 	add.w	r1, sp, #6
    d736:	b2a0      	uxth	r0, r4
    d738:	f00a ff9a 	bl	18670 <ll_apto_get>
    d73c:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d73e:	2105      	movs	r1, #5
    d740:	4630      	mov	r0, r6
    d742:	f7ff fe11 	bl	d368 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d746:	b14d      	cbz	r5, d75c <read_auth_payload_timeout+0x34>
    d748:	230c      	movs	r3, #12
    d74a:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d74c:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    d750:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d754:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    d758:	b002      	add	sp, #8
    d75a:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d75c:	2300      	movs	r3, #0
    d75e:	e7f4      	b.n	d74a <read_auth_payload_timeout+0x22>

0000d760 <write_auth_payload_timeout>:
{
    d760:	b570      	push	{r4, r5, r6, lr}
    d762:	460e      	mov	r6, r1
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    d764:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d766:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    d768:	8859      	ldrh	r1, [r3, #2]
    d76a:	b2a0      	uxth	r0, r4
    d76c:	f00a ff9c 	bl	186a8 <ll_apto_set>
    d770:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d772:	2103      	movs	r1, #3
    d774:	4630      	mov	r0, r6
    d776:	f7ff fdf7 	bl	d368 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d77a:	b125      	cbz	r5, d786 <write_auth_payload_timeout+0x26>
    d77c:	230c      	movs	r3, #12
    d77e:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d780:	f8a0 4001 	strh.w	r4, [r0, #1]
    d784:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d786:	2300      	movs	r3, #0
    d788:	e7f9      	b.n	d77e <write_auth_payload_timeout+0x1e>

0000d78a <ctrl_bb_cmd_handle>:
{
    d78a:	b508      	push	{r3, lr}
    d78c:	460b      	mov	r3, r1
	switch (ocf) {
    d78e:	282d      	cmp	r0, #45	; 0x2d
    d790:	d01f      	beq.n	d7d2 <ctrl_bb_cmd_handle+0x48>
    d792:	d908      	bls.n	d7a6 <ctrl_bb_cmd_handle+0x1c>
    d794:	287b      	cmp	r0, #123	; 0x7b
    d796:	d022      	beq.n	d7de <ctrl_bb_cmd_handle+0x54>
    d798:	287c      	cmp	r0, #124	; 0x7c
    d79a:	d026      	beq.n	d7ea <ctrl_bb_cmd_handle+0x60>
    d79c:	2863      	cmp	r0, #99	; 0x63
    d79e:	d012      	beq.n	d7c6 <ctrl_bb_cmd_handle+0x3c>
		return -EINVAL;
    d7a0:	f06f 0015 	mvn.w	r0, #21
}
    d7a4:	bd08      	pop	{r3, pc}
	switch (ocf) {
    d7a6:	2801      	cmp	r0, #1
    d7a8:	d007      	beq.n	d7ba <ctrl_bb_cmd_handle+0x30>
    d7aa:	2803      	cmp	r0, #3
    d7ac:	d1f8      	bne.n	d7a0 <ctrl_bb_cmd_handle+0x16>
		reset(cmd, evt);
    d7ae:	4611      	mov	r1, r2
    d7b0:	4618      	mov	r0, r3
    d7b2:	f7ff ff77 	bl	d6a4 <reset>
	return 0;
    d7b6:	2000      	movs	r0, #0
		break;
    d7b8:	bd08      	pop	{r3, pc}
		set_event_mask(cmd, evt);
    d7ba:	4611      	mov	r1, r2
    d7bc:	4618      	mov	r0, r3
    d7be:	f7f7 fd13 	bl	51e8 <set_event_mask>
	return 0;
    d7c2:	2000      	movs	r0, #0
		break;
    d7c4:	bd08      	pop	{r3, pc}
		set_event_mask_page_2(cmd, evt);
    d7c6:	4611      	mov	r1, r2
    d7c8:	4618      	mov	r0, r3
    d7ca:	f7ff fded 	bl	d3a8 <set_event_mask_page_2>
	return 0;
    d7ce:	2000      	movs	r0, #0
		break;
    d7d0:	bd08      	pop	{r3, pc}
		read_tx_power_level(cmd, evt);
    d7d2:	4611      	mov	r1, r2
    d7d4:	4618      	mov	r0, r3
    d7d6:	f7ff ff8f 	bl	d6f8 <read_tx_power_level>
	return 0;
    d7da:	2000      	movs	r0, #0
		break;
    d7dc:	bd08      	pop	{r3, pc}
		read_auth_payload_timeout(cmd, evt);
    d7de:	4611      	mov	r1, r2
    d7e0:	4618      	mov	r0, r3
    d7e2:	f7ff ffa1 	bl	d728 <read_auth_payload_timeout>
	return 0;
    d7e6:	2000      	movs	r0, #0
		break;
    d7e8:	bd08      	pop	{r3, pc}
		write_auth_payload_timeout(cmd, evt);
    d7ea:	4611      	mov	r1, r2
    d7ec:	4618      	mov	r0, r3
    d7ee:	f7ff ffb7 	bl	d760 <write_auth_payload_timeout>
	return 0;
    d7f2:	2000      	movs	r0, #0
		break;
    d7f4:	bd08      	pop	{r3, pc}

0000d7f6 <read_supported_commands>:
{
    d7f6:	b510      	push	{r4, lr}
    d7f8:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d7fa:	2141      	movs	r1, #65	; 0x41
    d7fc:	f7ff fdb4 	bl	d368 <cmd_complete>
    d800:	4604      	mov	r4, r0
	rp->status = 0x00;
    d802:	2100      	movs	r1, #0
    d804:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d808:	2240      	movs	r2, #64	; 0x40
    d80a:	f01d f855 	bl	2a8b8 <memset>
	rp->commands[2] |= BIT(7);
    d80e:	78e3      	ldrb	r3, [r4, #3]
    d810:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d814:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    d816:	79a3      	ldrb	r3, [r4, #6]
    d818:	f063 033f 	orn	r3, r3, #63	; 0x3f
    d81c:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    d81e:	7ae3      	ldrb	r3, [r4, #11]
    d820:	f043 0304 	orr.w	r3, r3, #4
    d824:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    d826:	7be3      	ldrb	r3, [r4, #15]
    d828:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    d82c:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    d82e:	7c23      	ldrb	r3, [r4, #16]
    d830:	f043 0302 	orr.w	r3, r3, #2
    d834:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    d836:	7de3      	ldrb	r3, [r4, #23]
    d838:	f043 0304 	orr.w	r3, r3, #4
    d83c:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    d83e:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[28] |= BIT(3);
    d840:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d842:	f062 0208 	orn	r2, r2, #8
    d846:	76a2      	strb	r2, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
    d848:	22ff      	movs	r2, #255	; 0xff
    d84a:	76e2      	strb	r2, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
    d84c:	f043 030f 	orr.w	r3, r3, #15
    d850:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    d852:	7863      	ldrb	r3, [r4, #1]
    d854:	f043 0320 	orr.w	r3, r3, #32
    d858:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    d85a:	7722      	strb	r2, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    d85c:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    d860:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    d864:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    d868:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d86c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d870:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    d874:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    d878:	f040 0004 	orr.w	r0, r0, #4
    d87c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
    d880:	f061 010f 	orn	r1, r1, #15
    d884:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(0);
    d888:	f042 02f9 	orr.w	r2, r2, #249	; 0xf9
    d88c:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    d890:	f043 030f 	orr.w	r3, r3, #15
    d894:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    d898:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    d89c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d8a0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    d8a4:	bd10      	pop	{r4, pc}

0000d8a6 <read_local_features>:
{
    d8a6:	b510      	push	{r4, lr}
    d8a8:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d8aa:	2109      	movs	r1, #9
    d8ac:	f7ff fd5c 	bl	d368 <cmd_complete>
    d8b0:	4604      	mov	r4, r0
	rp->status = 0x00;
    d8b2:	2100      	movs	r1, #0
    d8b4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d8b8:	2208      	movs	r2, #8
    d8ba:	f01c fffd 	bl	2a8b8 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    d8be:	2360      	movs	r3, #96	; 0x60
    d8c0:	7163      	strb	r3, [r4, #5]
    d8c2:	bd10      	pop	{r4, pc}

0000d8c4 <le_read_local_features>:
{
    d8c4:	b510      	push	{r4, lr}
    d8c6:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d8c8:	2109      	movs	r1, #9
    d8ca:	f7ff fd4d 	bl	d368 <cmd_complete>
    d8ce:	4604      	mov	r4, r0
	rp->status = 0x00;
    d8d0:	2100      	movs	r1, #0
    d8d2:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d8d6:	2208      	movs	r2, #8
    d8d8:	f01c ffee 	bl	2a8b8 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    d8dc:	23ff      	movs	r3, #255	; 0xff
    d8de:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    d8e0:	2341      	movs	r3, #65	; 0x41
    d8e2:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    d8e4:	2301      	movs	r3, #1
    d8e6:	70e3      	strb	r3, [r4, #3]
    d8e8:	bd10      	pop	{r4, pc}

0000d8ea <vs_read_supported_commands>:
{
    d8ea:	b510      	push	{r4, lr}
    d8ec:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d8ee:	2141      	movs	r1, #65	; 0x41
    d8f0:	f7ff fd3a 	bl	d368 <cmd_complete>
    d8f4:	4604      	mov	r4, r0
	rp->status = 0x00;
    d8f6:	2100      	movs	r1, #0
    d8f8:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d8fc:	2240      	movs	r2, #64	; 0x40
    d8fe:	f01c ffdb 	bl	2a8b8 <memset>
	rp->commands[0] |= BIT(0) | BIT(1) | BIT(2);
    d902:	7863      	ldrb	r3, [r4, #1]
	rp->commands[0] |= BIT(5) | BIT(7);
    d904:	f063 0358 	orn	r3, r3, #88	; 0x58
    d908:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    d90a:	78a3      	ldrb	r3, [r4, #2]
    d90c:	f043 0303 	orr.w	r3, r3, #3
    d910:	70a3      	strb	r3, [r4, #2]
    d912:	bd10      	pop	{r4, pc}

0000d914 <vs_read_supported_features>:
{
    d914:	b508      	push	{r3, lr}
    d916:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d918:	2109      	movs	r1, #9
    d91a:	f7ff fd25 	bl	d368 <cmd_complete>
	rp->status = 0x00;
    d91e:	2100      	movs	r1, #0
    d920:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d924:	2208      	movs	r2, #8
    d926:	f01c ffc7 	bl	2a8b8 <memset>
    d92a:	bd08      	pop	{r3, pc}

0000d92c <vs_read_static_addrs>:
{
    d92c:	b510      	push	{r4, lr}
    d92e:	4608      	mov	r0, r1
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d930:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d934:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    d938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d93c:	d00d      	beq.n	d95a <vs_read_static_addrs+0x2e>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    d93e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d942:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    d946:	f013 0f01 	tst.w	r3, #1
    d94a:	d110      	bne.n	d96e <vs_read_static_addrs+0x42>
	rp = cmd_complete(evt, sizeof(*rp));
    d94c:	2102      	movs	r1, #2
    d94e:	f7ff fd0b 	bl	d368 <cmd_complete>
	rp->status = 0x00;
    d952:	2300      	movs	r3, #0
    d954:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    d956:	7043      	strb	r3, [r0, #1]
    d958:	bd10      	pop	{r4, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    d95a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d95e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    d962:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d964:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d968:	4293      	cmp	r3, r2
    d96a:	d1e8      	bne.n	d93e <vs_read_static_addrs+0x12>
    d96c:	e7ee      	b.n	d94c <vs_read_static_addrs+0x20>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    d96e:	2118      	movs	r1, #24
    d970:	f7ff fcfa 	bl	d368 <cmd_complete>
		rp->status = 0x00;
    d974:	2100      	movs	r1, #0
    d976:	7001      	strb	r1, [r0, #0]
		rp->num_addrs = 1;
    d978:	2301      	movs	r3, #1
    d97a:	7043      	strb	r3, [r0, #1]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    d97c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d980:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
    d984:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
    d986:	f3c3 2407 	ubfx	r4, r3, #8, #8
    d98a:	70c4      	strb	r4, [r0, #3]
	sys_put_le16(val >> 16, &dst[2]);
    d98c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d98e:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    d990:	0a1b      	lsrs	r3, r3, #8
    d992:	7143      	strb	r3, [r0, #5]
		sys_put_le16(NRF_FICR->DEVICEADDR[1] | 0x0200, &addr->bdaddr.val[4]);
    d994:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    d998:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d99c:	b29b      	uxth	r3, r3
	dst[0] = val;
    d99e:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    d9a0:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    d9a2:	f063 033f 	orn	r3, r3, #63	; 0x3f
    d9a6:	71c3      	strb	r3, [r0, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    d9a8:	2210      	movs	r2, #16
    d9aa:	3008      	adds	r0, #8
    d9ac:	f01c ff84 	bl	2a8b8 <memset>
		return;
    d9b0:	bd10      	pop	{r4, pc}

0000d9b2 <vs_read_key_hierarchy_roots>:
{
    d9b2:	b510      	push	{r4, lr}
    d9b4:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d9b6:	2121      	movs	r1, #33	; 0x21
    d9b8:	f7ff fcd6 	bl	d368 <cmd_complete>
    d9bc:	4604      	mov	r4, r0
	rp->status = 0x00;
    d9be:	2300      	movs	r3, #0
    d9c0:	7003      	strb	r3, [r0, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    d9c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d9c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d9ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d9ce:	d03f      	beq.n	da50 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    d9d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d9d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    d9d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d9dc:	d038      	beq.n	da50 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    d9de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d9e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    d9e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d9ea:	d031      	beq.n	da50 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    d9ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d9f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    d9f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d9f8:	d02a      	beq.n	da50 <vs_read_key_hierarchy_roots+0x9e>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    d9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d9fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
    da02:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    da04:	f3c3 2107 	ubfx	r1, r3, #8, #8
    da08:	7081      	strb	r1, [r0, #2]
	sys_put_le16(val >> 16, &dst[2]);
    da0a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    da0c:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    da0e:	0a1b      	lsrs	r3, r3, #8
    da10:	7103      	strb	r3, [r0, #4]
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    da12:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
    da16:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    da18:	f3c3 2107 	ubfx	r1, r3, #8, #8
    da1c:	7181      	strb	r1, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
    da1e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    da20:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    da22:	0a1b      	lsrs	r3, r3, #8
    da24:	7203      	strb	r3, [r0, #8]
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    da26:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
    da2a:	7243      	strb	r3, [r0, #9]
	dst[1] = val >> 8;
    da2c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    da30:	7281      	strb	r1, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
    da32:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    da34:	72c3      	strb	r3, [r0, #11]
	dst[1] = val >> 8;
    da36:	0a1b      	lsrs	r3, r3, #8
    da38:	7303      	strb	r3, [r0, #12]
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    da3a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
    da3e:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    da40:	f3c3 2207 	ubfx	r2, r3, #8, #8
    da44:	7382      	strb	r2, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
    da46:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    da48:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    da4a:	0a1b      	lsrs	r3, r3, #8
    da4c:	7403      	strb	r3, [r0, #16]
    da4e:	e004      	b.n	da5a <vs_read_key_hierarchy_roots+0xa8>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    da50:	2210      	movs	r2, #16
    da52:	2100      	movs	r1, #0
    da54:	1c60      	adds	r0, r4, #1
    da56:	f01c ff2f 	bl	2a8b8 <memset>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    da5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    da5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    da62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    da66:	d040      	beq.n	daea <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    da68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    da6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    da70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    da74:	d039      	beq.n	daea <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    da76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    da7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    da7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    da82:	d032      	beq.n	daea <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    da84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    da88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    da8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    da90:	d02b      	beq.n	daea <vs_read_key_hierarchy_roots+0x138>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    da92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    da96:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
    da9a:	7463      	strb	r3, [r4, #17]
	dst[1] = val >> 8;
    da9c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    daa0:	74a1      	strb	r1, [r4, #18]
	sys_put_le16(val >> 16, &dst[2]);
    daa2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    daa4:	74e3      	strb	r3, [r4, #19]
	dst[1] = val >> 8;
    daa6:	0a1b      	lsrs	r3, r3, #8
    daa8:	7523      	strb	r3, [r4, #20]
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    daaa:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
    daae:	7563      	strb	r3, [r4, #21]
	dst[1] = val >> 8;
    dab0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    dab4:	75a1      	strb	r1, [r4, #22]
	sys_put_le16(val >> 16, &dst[2]);
    dab6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    dab8:	75e3      	strb	r3, [r4, #23]
	dst[1] = val >> 8;
    daba:	0a1b      	lsrs	r3, r3, #8
    dabc:	7623      	strb	r3, [r4, #24]
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    dabe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
    dac2:	7663      	strb	r3, [r4, #25]
	dst[1] = val >> 8;
    dac4:	f3c3 2107 	ubfx	r1, r3, #8, #8
    dac8:	76a1      	strb	r1, [r4, #26]
	sys_put_le16(val >> 16, &dst[2]);
    daca:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    dacc:	76e3      	strb	r3, [r4, #27]
	dst[1] = val >> 8;
    dace:	0a1b      	lsrs	r3, r3, #8
    dad0:	7723      	strb	r3, [r4, #28]
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    dad2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
    dad6:	7763      	strb	r3, [r4, #29]
	dst[1] = val >> 8;
    dad8:	f3c3 2207 	ubfx	r2, r3, #8, #8
    dadc:	77a2      	strb	r2, [r4, #30]
	sys_put_le16(val >> 16, &dst[2]);
    dade:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    dae0:	77e3      	strb	r3, [r4, #31]
	dst[1] = val >> 8;
    dae2:	0a1b      	lsrs	r3, r3, #8
    dae4:	f884 3020 	strb.w	r3, [r4, #32]
    dae8:	bd10      	pop	{r4, pc}
		memset(rp->er, 0x00, sizeof(rp->er));
    daea:	2210      	movs	r2, #16
    daec:	2100      	movs	r1, #0
    daee:	f104 0011 	add.w	r0, r4, #17
    daf2:	f01c fee1 	bl	2a8b8 <memset>
    daf6:	bd10      	pop	{r4, pc}

0000daf8 <read_bd_addr>:
{
    daf8:	b508      	push	{r3, lr}
    dafa:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    dafc:	2107      	movs	r1, #7
    dafe:	f7ff fc33 	bl	d368 <cmd_complete>
	rp->status = 0x00;
    db02:	2300      	movs	r3, #0
    db04:	4601      	mov	r1, r0
    db06:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    db0a:	4618      	mov	r0, r3
    db0c:	f00b fd64 	bl	195d8 <ll_addr_get>
    db10:	bd08      	pop	{r3, pc}

0000db12 <info_cmd_handle>:
{
    db12:	b508      	push	{r3, lr}
    db14:	460b      	mov	r3, r1
	switch (ocf) {
    db16:	3801      	subs	r0, #1
    db18:	2808      	cmp	r0, #8
    db1a:	d81e      	bhi.n	db5a <info_cmd_handle+0x48>
    db1c:	e8df f000 	tbb	[pc, r0]
    db20:	1d110b05 	.word	0x1d110b05
    db24:	1d1d1d1d 	.word	0x1d1d1d1d
    db28:	17          	.byte	0x17
    db29:	00          	.byte	0x00
		read_local_version_info(cmd, evt);
    db2a:	4611      	mov	r1, r2
    db2c:	4618      	mov	r0, r3
    db2e:	f7ff fc61 	bl	d3f4 <read_local_version_info>
	return 0;
    db32:	2000      	movs	r0, #0
		break;
    db34:	bd08      	pop	{r3, pc}
		read_supported_commands(cmd, evt);
    db36:	4611      	mov	r1, r2
    db38:	4618      	mov	r0, r3
    db3a:	f7ff fe5c 	bl	d7f6 <read_supported_commands>
	return 0;
    db3e:	2000      	movs	r0, #0
		break;
    db40:	bd08      	pop	{r3, pc}
		read_local_features(cmd, evt);
    db42:	4611      	mov	r1, r2
    db44:	4618      	mov	r0, r3
    db46:	f7ff feae 	bl	d8a6 <read_local_features>
	return 0;
    db4a:	2000      	movs	r0, #0
		break;
    db4c:	bd08      	pop	{r3, pc}
		read_bd_addr(cmd, evt);
    db4e:	4611      	mov	r1, r2
    db50:	4618      	mov	r0, r3
    db52:	f7ff ffd1 	bl	daf8 <read_bd_addr>
	return 0;
    db56:	2000      	movs	r0, #0
		break;
    db58:	bd08      	pop	{r3, pc}
		return -EINVAL;
    db5a:	f06f 0015 	mvn.w	r0, #21
}
    db5e:	bd08      	pop	{r3, pc}

0000db60 <le_set_random_address>:
{
    db60:	b510      	push	{r4, lr}
    db62:	460c      	mov	r4, r1
	ll_addr_set(1, &cmd->bdaddr.val[0]);
    db64:	6881      	ldr	r1, [r0, #8]
    db66:	2001      	movs	r0, #1
    db68:	f00b fd58 	bl	1961c <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    db6c:	2101      	movs	r1, #1
    db6e:	4620      	mov	r0, r4
    db70:	f7ff fbfa 	bl	d368 <cmd_complete>
	ccst->status = 0x00;
    db74:	2300      	movs	r3, #0
    db76:	7003      	strb	r3, [r0, #0]
    db78:	bd10      	pop	{r4, pc}

0000db7a <vs_write_bd_addr>:
{
    db7a:	b510      	push	{r4, lr}
    db7c:	460c      	mov	r4, r1
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    db7e:	6881      	ldr	r1, [r0, #8]
    db80:	2000      	movs	r0, #0
    db82:	f00b fd4b 	bl	1961c <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    db86:	2101      	movs	r1, #1
    db88:	4620      	mov	r0, r4
    db8a:	f7ff fbed 	bl	d368 <cmd_complete>
	ccst->status = 0x00;
    db8e:	2300      	movs	r3, #0
    db90:	7003      	strb	r3, [r0, #0]
    db92:	bd10      	pop	{r4, pc}

0000db94 <le_read_wl_size>:
{
    db94:	b510      	push	{r4, lr}
    db96:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    db98:	2102      	movs	r1, #2
    db9a:	f7ff fbe5 	bl	d368 <cmd_complete>
    db9e:	4604      	mov	r4, r0
	rp->status = 0x00;
    dba0:	2300      	movs	r3, #0
    dba2:	7003      	strb	r3, [r0, #0]
	rp->wl_size = ll_wl_size_get();
    dba4:	f00b ff3a 	bl	19a1c <ll_wl_size_get>
    dba8:	7060      	strb	r0, [r4, #1]
    dbaa:	bd10      	pop	{r4, pc}

0000dbac <le_clear_wl>:
{
    dbac:	b510      	push	{r4, lr}
    dbae:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    dbb0:	2101      	movs	r1, #1
    dbb2:	f7ff fbd9 	bl	d368 <cmd_complete>
    dbb6:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    dbb8:	f00b ff32 	bl	19a20 <ll_wl_clear>
    dbbc:	7020      	strb	r0, [r4, #0]
    dbbe:	bd10      	pop	{r4, pc}

0000dbc0 <le_add_dev_to_wl>:
{
    dbc0:	b538      	push	{r3, r4, r5, lr}
    dbc2:	460d      	mov	r5, r1
	status = ll_wl_add(&cmd->addr);
    dbc4:	6880      	ldr	r0, [r0, #8]
    dbc6:	f00c f81d 	bl	19c04 <ll_wl_add>
    dbca:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dbcc:	2101      	movs	r1, #1
    dbce:	4628      	mov	r0, r5
    dbd0:	f7ff fbca 	bl	d368 <cmd_complete>
	ccst->status = status;
    dbd4:	7004      	strb	r4, [r0, #0]
    dbd6:	bd38      	pop	{r3, r4, r5, pc}

0000dbd8 <le_rem_dev_from_wl>:
{
    dbd8:	b538      	push	{r3, r4, r5, lr}
    dbda:	460d      	mov	r5, r1
	status = ll_wl_remove(&cmd->addr);
    dbdc:	6880      	ldr	r0, [r0, #8]
    dbde:	f00b ff35 	bl	19a4c <ll_wl_remove>
    dbe2:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dbe4:	2101      	movs	r1, #1
    dbe6:	4628      	mov	r0, r5
    dbe8:	f7ff fbbe 	bl	d368 <cmd_complete>
	ccst->status = status;
    dbec:	7004      	strb	r4, [r0, #0]
    dbee:	bd38      	pop	{r3, r4, r5, pc}

0000dbf0 <le_encrypt>:
{
    dbf0:	b510      	push	{r4, lr}
    dbf2:	b084      	sub	sp, #16
    dbf4:	460c      	mov	r4, r1
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    dbf6:	6880      	ldr	r0, [r0, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    dbf8:	2300      	movs	r3, #0
    dbfa:	466a      	mov	r2, sp
    dbfc:	f100 0110 	add.w	r1, r0, #16
    dc00:	f001 fc9e 	bl	f540 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    dc04:	2111      	movs	r1, #17
    dc06:	4620      	mov	r0, r4
    dc08:	f7ff fbae 	bl	d368 <cmd_complete>
	rp->status = 0x00;
    dc0c:	2300      	movs	r3, #0
    dc0e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    dc12:	2210      	movs	r2, #16
    dc14:	4669      	mov	r1, sp
    dc16:	f7f2 fb53 	bl	2c0 <memcpy>
}
    dc1a:	b004      	add	sp, #16
    dc1c:	bd10      	pop	{r4, pc}
	...

0000dc20 <vs_read_build_info>:
{
    dc20:	b570      	push	{r4, r5, r6, lr}
    dc22:	b08a      	sub	sp, #40	; 0x28
    dc24:	460e      	mov	r6, r1
	const char build_info[] = HCI_VS_BUILD_INFO;
    dc26:	466c      	mov	r4, sp
    dc28:	4d0c      	ldr	r5, [pc, #48]	; (dc5c <vs_read_build_info+0x3c>)
    dc2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    dc2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    dc2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    dc30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    dc32:	e895 0003 	ldmia.w	r5, {r0, r1}
    dc36:	f844 0b04 	str.w	r0, [r4], #4
    dc3a:	f824 1b02 	strh.w	r1, [r4], #2
    dc3e:	0c09      	lsrs	r1, r1, #16
    dc40:	7021      	strb	r1, [r4, #0]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    dc42:	2128      	movs	r1, #40	; 0x28
    dc44:	4630      	mov	r0, r6
    dc46:	f7ff fb8f 	bl	d368 <cmd_complete>
	rp->status = 0x00;
    dc4a:	2300      	movs	r3, #0
    dc4c:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    dc50:	2227      	movs	r2, #39	; 0x27
    dc52:	4669      	mov	r1, sp
    dc54:	f7f2 fb34 	bl	2c0 <memcpy>
}
    dc58:	b00a      	add	sp, #40	; 0x28
    dc5a:	bd70      	pop	{r4, r5, r6, pc}
    dc5c:	00031708 	.word	0x00031708

0000dc60 <vendor_cmd_handle>:
{
    dc60:	b508      	push	{r3, lr}
    dc62:	460b      	mov	r3, r1
	switch (ocf) {
    dc64:	3801      	subs	r0, #1
    dc66:	2809      	cmp	r0, #9
    dc68:	d830      	bhi.n	dccc <vendor_cmd_handle+0x6c>
    dc6a:	e8df f000 	tbb	[pc, r0]
    dc6e:	0b05      	.short	0x0b05
    dc70:	1d2f2f11 	.word	0x1d2f2f11
    dc74:	2923172f 	.word	0x2923172f
		vs_read_version_info(cmd, evt);
    dc78:	4611      	mov	r1, r2
    dc7a:	4618      	mov	r0, r3
    dc7c:	f7ff fbf6 	bl	d46c <vs_read_version_info>
	return 0;
    dc80:	2000      	movs	r0, #0
		break;
    dc82:	bd08      	pop	{r3, pc}
		vs_read_supported_commands(cmd, evt);
    dc84:	4611      	mov	r1, r2
    dc86:	4618      	mov	r0, r3
    dc88:	f7ff fe2f 	bl	d8ea <vs_read_supported_commands>
	return 0;
    dc8c:	2000      	movs	r0, #0
		break;
    dc8e:	bd08      	pop	{r3, pc}
		vs_read_supported_features(cmd, evt);
    dc90:	4611      	mov	r1, r2
    dc92:	4618      	mov	r0, r3
    dc94:	f7ff fe3e 	bl	d914 <vs_read_supported_features>
	return 0;
    dc98:	2000      	movs	r0, #0
		break;
    dc9a:	bd08      	pop	{r3, pc}
		vs_read_build_info(cmd, evt);
    dc9c:	4611      	mov	r1, r2
    dc9e:	4618      	mov	r0, r3
    dca0:	f7ff ffbe 	bl	dc20 <vs_read_build_info>
	return 0;
    dca4:	2000      	movs	r0, #0
		break;
    dca6:	bd08      	pop	{r3, pc}
		vs_write_bd_addr(cmd, evt);
    dca8:	4611      	mov	r1, r2
    dcaa:	4618      	mov	r0, r3
    dcac:	f7ff ff65 	bl	db7a <vs_write_bd_addr>
	return 0;
    dcb0:	2000      	movs	r0, #0
		break;
    dcb2:	bd08      	pop	{r3, pc}
		vs_read_static_addrs(cmd, evt);
    dcb4:	4611      	mov	r1, r2
    dcb6:	4618      	mov	r0, r3
    dcb8:	f7ff fe38 	bl	d92c <vs_read_static_addrs>
	return 0;
    dcbc:	2000      	movs	r0, #0
		break;
    dcbe:	bd08      	pop	{r3, pc}
		vs_read_key_hierarchy_roots(cmd, evt);
    dcc0:	4611      	mov	r1, r2
    dcc2:	4618      	mov	r0, r3
    dcc4:	f7ff fe75 	bl	d9b2 <vs_read_key_hierarchy_roots>
	return 0;
    dcc8:	2000      	movs	r0, #0
		break;
    dcca:	bd08      	pop	{r3, pc}
		return -EINVAL;
    dccc:	f06f 0015 	mvn.w	r0, #21
}
    dcd0:	bd08      	pop	{r3, pc}

0000dcd2 <le_unknown_rsp>:
{
    dcd2:	b508      	push	{r3, lr}
	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    dcd4:	7903      	ldrb	r3, [r0, #4]
    dcd6:	2b0e      	cmp	r3, #14
    dcd8:	d000      	beq.n	dcdc <le_unknown_rsp+0xa>
    dcda:	bd08      	pop	{r3, pc}
    dcdc:	4613      	mov	r3, r2
    dcde:	460a      	mov	r2, r1
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    dce0:	2100      	movs	r1, #0
    dce2:	201a      	movs	r0, #26
    dce4:	f7f8 f966 	bl	5fb4 <le_remote_feat_complete>
}
    dce8:	e7f7      	b.n	dcda <le_unknown_rsp+0x8>

0000dcea <le_rand>:
{
    dcea:	b508      	push	{r3, lr}
    dcec:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    dcee:	2109      	movs	r1, #9
    dcf0:	f7ff fb3a 	bl	d368 <cmd_complete>
	rp->status = 0x00;
    dcf4:	2300      	movs	r3, #0
    dcf6:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    dcfa:	2108      	movs	r1, #8
    dcfc:	f003 fcb4 	bl	11668 <bt_rand>
    dd00:	bd08      	pop	{r3, pc}

0000dd02 <le_set_adv_param>:
{
    dd02:	b570      	push	{r4, r5, r6, lr}
    dd04:	b08c      	sub	sp, #48	; 0x30
    dd06:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    dd08:	6881      	ldr	r1, [r0, #8]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    dd0a:	460c      	mov	r4, r1
    dd0c:	f834 2b07 	ldrh.w	r2, [r4], #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    dd10:	790b      	ldrb	r3, [r1, #4]
    dd12:	2000      	movs	r0, #0
    dd14:	900a      	str	r0, [sp, #40]	; 0x28
    dd16:	9009      	str	r0, [sp, #36]	; 0x24
    dd18:	9008      	str	r0, [sp, #32]
    dd1a:	9007      	str	r0, [sp, #28]
    dd1c:	9006      	str	r0, [sp, #24]
    dd1e:	9005      	str	r0, [sp, #20]
    dd20:	7b8e      	ldrb	r6, [r1, #14]
    dd22:	9604      	str	r6, [sp, #16]
    dd24:	7b4e      	ldrb	r6, [r1, #13]
    dd26:	9603      	str	r6, [sp, #12]
    dd28:	9402      	str	r4, [sp, #8]
    dd2a:	798c      	ldrb	r4, [r1, #6]
    dd2c:	9401      	str	r4, [sp, #4]
    dd2e:	7949      	ldrb	r1, [r1, #5]
    dd30:	9100      	str	r1, [sp, #0]
    dd32:	4601      	mov	r1, r0
    dd34:	f00c fc42 	bl	1a5bc <ll_adv_params_set>
    dd38:	b2c4      	uxtb	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dd3a:	2101      	movs	r1, #1
    dd3c:	4628      	mov	r0, r5
    dd3e:	f7ff fb13 	bl	d368 <cmd_complete>
	ccst->status = status;
    dd42:	7004      	strb	r4, [r0, #0]
}
    dd44:	b00c      	add	sp, #48	; 0x30
    dd46:	bd70      	pop	{r4, r5, r6, pc}

0000dd48 <le_set_adv_data>:
{
    dd48:	b510      	push	{r4, lr}
    dd4a:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
    dd4c:	6883      	ldr	r3, [r0, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    dd4e:	1c59      	adds	r1, r3, #1
    dd50:	7818      	ldrb	r0, [r3, #0]
    dd52:	f00c fd57 	bl	1a804 <ll_adv_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    dd56:	2101      	movs	r1, #1
    dd58:	4620      	mov	r0, r4
    dd5a:	f7ff fb05 	bl	d368 <cmd_complete>
	ccst->status = 0x00;
    dd5e:	2300      	movs	r3, #0
    dd60:	7003      	strb	r3, [r0, #0]
    dd62:	bd10      	pop	{r4, pc}

0000dd64 <le_set_scan_rsp_data>:
{
    dd64:	b510      	push	{r4, lr}
    dd66:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
    dd68:	6883      	ldr	r3, [r0, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    dd6a:	1c59      	adds	r1, r3, #1
    dd6c:	7818      	ldrb	r0, [r3, #0]
    dd6e:	f00c fda2 	bl	1a8b6 <ll_scan_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    dd72:	2101      	movs	r1, #1
    dd74:	4620      	mov	r0, r4
    dd76:	f7ff faf7 	bl	d368 <cmd_complete>
	ccst->status = 0x00;
    dd7a:	2300      	movs	r3, #0
    dd7c:	7003      	strb	r3, [r0, #0]
    dd7e:	bd10      	pop	{r4, pc}

0000dd80 <le_set_adv_enable>:
{
    dd80:	b538      	push	{r3, r4, r5, lr}
    dd82:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
    dd84:	6883      	ldr	r3, [r0, #8]
	status = ll_adv_enable(cmd->enable);
    dd86:	7818      	ldrb	r0, [r3, #0]
    dd88:	f00c fdda 	bl	1a940 <ll_adv_enable>
    dd8c:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dd8e:	2101      	movs	r1, #1
    dd90:	4628      	mov	r0, r5
    dd92:	f7ff fae9 	bl	d368 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dd96:	b114      	cbz	r4, dd9e <le_set_adv_enable+0x1e>
    dd98:	230c      	movs	r3, #12
    dd9a:	7003      	strb	r3, [r0, #0]
    dd9c:	bd38      	pop	{r3, r4, r5, pc}
    dd9e:	2300      	movs	r3, #0
    dda0:	e7fb      	b.n	dd9a <le_set_adv_enable+0x1a>

0000dda2 <le_set_scan_param>:
{
    dda2:	b530      	push	{r4, r5, lr}
    dda4:	b083      	sub	sp, #12
    dda6:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    dda8:	6884      	ldr	r4, [r0, #8]
	interval = sys_le16_to_cpu(cmd->interval);
    ddaa:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	window = sys_le16_to_cpu(cmd->window);
    ddae:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    ddb2:	7820      	ldrb	r0, [r4, #0]
    ddb4:	7963      	ldrb	r3, [r4, #5]
    ddb6:	79a4      	ldrb	r4, [r4, #6]
    ddb8:	9400      	str	r4, [sp, #0]
    ddba:	f00c fe53 	bl	1aa64 <ll_scan_params_set>
    ddbe:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    ddc0:	2101      	movs	r1, #1
    ddc2:	4628      	mov	r0, r5
    ddc4:	f7ff fad0 	bl	d368 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    ddc8:	b11c      	cbz	r4, ddd2 <le_set_scan_param+0x30>
    ddca:	230c      	movs	r3, #12
    ddcc:	7003      	strb	r3, [r0, #0]
}
    ddce:	b003      	add	sp, #12
    ddd0:	bd30      	pop	{r4, r5, pc}
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    ddd2:	2300      	movs	r3, #0
    ddd4:	e7fa      	b.n	ddcc <le_set_scan_param+0x2a>
	...

0000ddd8 <le_set_scan_enable>:
{
    ddd8:	b538      	push	{r3, r4, r5, lr}
    ddda:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    dddc:	6883      	ldr	r3, [r0, #8]
	if (cmd->enable && cmd->filter_dup) {
    ddde:	781a      	ldrb	r2, [r3, #0]
    dde0:	b13a      	cbz	r2, ddf2 <le_set_scan_enable+0x1a>
    dde2:	785a      	ldrb	r2, [r3, #1]
    dde4:	b12a      	cbz	r2, ddf2 <le_set_scan_enable+0x1a>
		dup_count = 0;
    dde6:	2200      	movs	r2, #0
    dde8:	490b      	ldr	r1, [pc, #44]	; (de18 <le_set_scan_enable+0x40>)
    ddea:	600a      	str	r2, [r1, #0]
		dup_curr = 0;
    ddec:	490b      	ldr	r1, [pc, #44]	; (de1c <le_set_scan_enable+0x44>)
    ddee:	600a      	str	r2, [r1, #0]
    ddf0:	e003      	b.n	ddfa <le_set_scan_enable+0x22>
		dup_count = -1;
    ddf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ddf6:	4a08      	ldr	r2, [pc, #32]	; (de18 <le_set_scan_enable+0x40>)
    ddf8:	6011      	str	r1, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    ddfa:	7818      	ldrb	r0, [r3, #0]
    ddfc:	f00c fe4e 	bl	1aa9c <ll_scan_enable>
    de00:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    de02:	2101      	movs	r1, #1
    de04:	4628      	mov	r0, r5
    de06:	f7ff faaf 	bl	d368 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de0a:	b114      	cbz	r4, de12 <le_set_scan_enable+0x3a>
    de0c:	230c      	movs	r3, #12
    de0e:	7003      	strb	r3, [r0, #0]
    de10:	bd38      	pop	{r3, r4, r5, pc}
    de12:	2300      	movs	r3, #0
    de14:	e7fb      	b.n	de0e <le_set_scan_enable+0x36>
    de16:	bf00      	nop
    de18:	20001028 	.word	0x20001028
    de1c:	2000102c 	.word	0x2000102c

0000de20 <le_create_connection>:
{
    de20:	b5f0      	push	{r4, r5, r6, r7, lr}
    de22:	b087      	sub	sp, #28
    de24:	460d      	mov	r5, r1
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
    de26:	6884      	ldr	r4, [r0, #8]
	scan_interval = sys_le16_to_cpu(cmd->scan_interval);
    de28:	8820      	ldrh	r0, [r4, #0]
	scan_window = sys_le16_to_cpu(cmd->scan_window);
    de2a:	8861      	ldrh	r1, [r4, #2]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    de2c:	f8b4 700f 	ldrh.w	r7, [r4, #15]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    de30:	f8b4 e011 	ldrh.w	lr, [r4, #17]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    de34:	f8b4 c013 	ldrh.w	ip, [r4, #19]
	status = ll_create_connection(scan_interval, scan_window,
    de38:	7922      	ldrb	r2, [r4, #4]
    de3a:	7963      	ldrb	r3, [r4, #5]
    de3c:	1da6      	adds	r6, r4, #6
    de3e:	7b24      	ldrb	r4, [r4, #12]
    de40:	f8cd c010 	str.w	ip, [sp, #16]
    de44:	f8cd e00c 	str.w	lr, [sp, #12]
    de48:	9702      	str	r7, [sp, #8]
    de4a:	9401      	str	r4, [sp, #4]
    de4c:	9600      	str	r6, [sp, #0]
    de4e:	f00c fe65 	bl	1ab1c <ll_create_connection>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    de52:	b100      	cbz	r0, de56 <le_create_connection+0x36>
    de54:	200c      	movs	r0, #12
    de56:	f7ff fa5f 	bl	d318 <cmd_status>
    de5a:	6028      	str	r0, [r5, #0]
}
    de5c:	b007      	add	sp, #28
    de5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000de60 <le_create_conn_cancel>:
{
    de60:	b538      	push	{r3, r4, r5, lr}
    de62:	460d      	mov	r5, r1
	status = ll_connect_disable();
    de64:	f00b fa00 	bl	19268 <ll_connect_disable>
    de68:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    de6a:	2101      	movs	r1, #1
    de6c:	4628      	mov	r0, r5
    de6e:	f7ff fa7b 	bl	d368 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de72:	b114      	cbz	r4, de7a <le_create_conn_cancel+0x1a>
    de74:	230c      	movs	r3, #12
    de76:	7003      	strb	r3, [r0, #0]
    de78:	bd38      	pop	{r3, r4, r5, pc}
    de7a:	2300      	movs	r3, #0
    de7c:	e7fb      	b.n	de76 <le_create_conn_cancel+0x16>

0000de7e <le_set_host_chan_classif>:
{
    de7e:	b538      	push	{r3, r4, r5, lr}
    de80:	460d      	mov	r5, r1
	status = ll_chm_update(&cmd->ch_map[0]);
    de82:	6880      	ldr	r0, [r0, #8]
    de84:	f00a fb08 	bl	18498 <ll_chm_update>
    de88:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    de8a:	2101      	movs	r1, #1
    de8c:	4628      	mov	r0, r5
    de8e:	f7ff fa6b 	bl	d368 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de92:	b114      	cbz	r4, de9a <le_set_host_chan_classif+0x1c>
    de94:	230c      	movs	r3, #12
    de96:	7003      	strb	r3, [r0, #0]
    de98:	bd38      	pop	{r3, r4, r5, pc}
    de9a:	2300      	movs	r3, #0
    de9c:	e7fb      	b.n	de96 <le_set_host_chan_classif+0x18>

0000de9e <le_start_encryption>:
{
    de9e:	b510      	push	{r4, lr}
    dea0:	460c      	mov	r4, r1
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
    dea2:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    dea4:	4611      	mov	r1, r2
    dea6:	f831 0b02 	ldrh.w	r0, [r1], #2
	status = ll_enc_req_send(handle,
    deaa:	f102 030c 	add.w	r3, r2, #12
    deae:	320a      	adds	r2, #10
    deb0:	f00a fe2c 	bl	18b0c <ll_enc_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    deb4:	b100      	cbz	r0, deb8 <le_start_encryption+0x1a>
    deb6:	200c      	movs	r0, #12
    deb8:	f7ff fa2e 	bl	d318 <cmd_status>
    debc:	6020      	str	r0, [r4, #0]
    debe:	bd10      	pop	{r4, pc}

0000dec0 <le_ltk_req_reply>:
{
    dec0:	b570      	push	{r4, r5, r6, lr}
    dec2:	460e      	mov	r6, r1
	handle = sys_le16_to_cpu(cmd->handle);
    dec4:	6882      	ldr	r2, [r0, #8]
    dec6:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    deca:	2100      	movs	r1, #0
    decc:	b2a0      	uxth	r0, r4
    dece:	f00a fb36 	bl	1853e <ll_start_enc_req_send>
    ded2:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    ded4:	2103      	movs	r1, #3
    ded6:	4630      	mov	r0, r6
    ded8:	f7ff fa46 	bl	d368 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dedc:	b125      	cbz	r5, dee8 <le_ltk_req_reply+0x28>
    dede:	230c      	movs	r3, #12
    dee0:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    dee2:	f8a0 4001 	strh.w	r4, [r0, #1]
    dee6:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dee8:	2300      	movs	r3, #0
    deea:	e7f9      	b.n	dee0 <le_ltk_req_reply+0x20>

0000deec <le_ltk_req_neg_reply>:
{
    deec:	b570      	push	{r4, r5, r6, lr}
    deee:	460e      	mov	r6, r1
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
    def0:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    def2:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    def4:	2200      	movs	r2, #0
    def6:	2106      	movs	r1, #6
    def8:	b2a0      	uxth	r0, r4
    defa:	f00a fb20 	bl	1853e <ll_start_enc_req_send>
    defe:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    df00:	2103      	movs	r1, #3
    df02:	4630      	mov	r0, r6
    df04:	f7ff fa30 	bl	d368 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    df08:	b125      	cbz	r5, df14 <le_ltk_req_neg_reply+0x28>
    df0a:	230c      	movs	r3, #12
    df0c:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_le16_to_cpu(handle);
    df0e:	f8a0 4001 	strh.w	r4, [r0, #1]
    df12:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    df14:	2300      	movs	r3, #0
    df16:	e7f9      	b.n	df0c <le_ltk_req_neg_reply+0x20>

0000df18 <le_read_chan_map>:
{
    df18:	b570      	push	{r4, r5, r6, lr}
    df1a:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_chan_map *cmd = (void *)buf->data;
    df1c:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    df1e:	8815      	ldrh	r5, [r2, #0]
    df20:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    df22:	2108      	movs	r1, #8
    df24:	4618      	mov	r0, r3
    df26:	f7ff fa1f 	bl	d368 <cmd_complete>
    df2a:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    df2c:	1cc1      	adds	r1, r0, #3
    df2e:	4630      	mov	r0, r6
    df30:	f00a faf0 	bl	18514 <ll_chm_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    df34:	b120      	cbz	r0, df40 <le_read_chan_map+0x28>
    df36:	2302      	movs	r3, #2
    df38:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    df3a:	f8a4 5001 	strh.w	r5, [r4, #1]
    df3e:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    df40:	2300      	movs	r3, #0
    df42:	e7f9      	b.n	df38 <le_read_chan_map+0x20>

0000df44 <le_read_remote_features>:
{
    df44:	b510      	push	{r4, lr}
    df46:	460c      	mov	r4, r1
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
    df48:	6883      	ldr	r3, [r0, #8]
	status = ll_feature_req_send(handle);
    df4a:	8818      	ldrh	r0, [r3, #0]
    df4c:	f00a fb3f 	bl	185ce <ll_feature_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    df50:	b100      	cbz	r0, df54 <le_read_remote_features+0x10>
    df52:	200c      	movs	r0, #12
    df54:	f7ff f9e0 	bl	d318 <cmd_status>
    df58:	6020      	str	r0, [r4, #0]
    df5a:	bd10      	pop	{r4, pc}

0000df5c <le_conn_param_req_neg_reply>:
{
    df5c:	b570      	push	{r4, r5, r6, lr}
    df5e:	b082      	sub	sp, #8
    df60:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    df62:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    df64:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    df66:	789a      	ldrb	r2, [r3, #2]
    df68:	2300      	movs	r3, #0
    df6a:	9301      	str	r3, [sp, #4]
    df6c:	9300      	str	r3, [sp, #0]
    df6e:	2102      	movs	r1, #2
    df70:	b2a0      	uxth	r0, r4
    df72:	f00a fa01 	bl	18378 <ll_conn_update>
    df76:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    df78:	2103      	movs	r1, #3
    df7a:	4630      	mov	r0, r6
    df7c:	f7ff f9f4 	bl	d368 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    df80:	b12d      	cbz	r5, df8e <le_conn_param_req_neg_reply+0x32>
    df82:	230c      	movs	r3, #12
    df84:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    df86:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    df8a:	b002      	add	sp, #8
    df8c:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    df8e:	2300      	movs	r3, #0
    df90:	e7f8      	b.n	df84 <le_conn_param_req_neg_reply+0x28>

0000df92 <le_set_data_len>:
{
    df92:	b570      	push	{r4, r5, r6, lr}
    df94:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    df96:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    df98:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    df9a:	889a      	ldrh	r2, [r3, #4]
    df9c:	8859      	ldrh	r1, [r3, #2]
    df9e:	b2a0      	uxth	r0, r4
    dfa0:	f00a fb99 	bl	186d6 <ll_length_req_send>
    dfa4:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    dfa6:	2103      	movs	r1, #3
    dfa8:	4630      	mov	r0, r6
    dfaa:	f7ff f9dd 	bl	d368 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dfae:	b125      	cbz	r5, dfba <le_set_data_len+0x28>
    dfb0:	230c      	movs	r3, #12
    dfb2:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    dfb4:	f8a0 4001 	strh.w	r4, [r0, #1]
    dfb8:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dfba:	2300      	movs	r3, #0
    dfbc:	e7f9      	b.n	dfb2 <le_set_data_len+0x20>

0000dfbe <le_read_default_data_len>:
{
    dfbe:	b510      	push	{r4, lr}
    dfc0:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    dfc2:	2105      	movs	r1, #5
    dfc4:	f7ff f9d0 	bl	d368 <cmd_complete>
    dfc8:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    dfca:	1cc1      	adds	r1, r0, #3
    dfcc:	3001      	adds	r0, #1
    dfce:	f00a fba9 	bl	18724 <ll_length_default_get>
	rp->status = 0x00;
    dfd2:	2300      	movs	r3, #0
    dfd4:	7023      	strb	r3, [r4, #0]
    dfd6:	bd10      	pop	{r4, pc}

0000dfd8 <le_write_default_data_len>:
{
    dfd8:	b538      	push	{r3, r4, r5, lr}
    dfda:	460d      	mov	r5, r1
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    dfdc:	6883      	ldr	r3, [r0, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    dfde:	8859      	ldrh	r1, [r3, #2]
    dfe0:	8818      	ldrh	r0, [r3, #0]
    dfe2:	f00a fba9 	bl	18738 <ll_length_default_set>
    dfe6:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dfe8:	2101      	movs	r1, #1
    dfea:	4628      	mov	r0, r5
    dfec:	f7ff f9bc 	bl	d368 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    dff0:	b114      	cbz	r4, dff8 <le_write_default_data_len+0x20>
    dff2:	231e      	movs	r3, #30
    dff4:	7003      	strb	r3, [r0, #0]
    dff6:	bd38      	pop	{r3, r4, r5, pc}
    dff8:	2300      	movs	r3, #0
    dffa:	e7fb      	b.n	dff4 <le_write_default_data_len+0x1c>

0000dffc <le_read_max_data_len>:
{
    dffc:	b510      	push	{r4, lr}
    dffe:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e000:	2109      	movs	r1, #9
    e002:	f7ff f9b1 	bl	d368 <cmd_complete>
    e006:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    e008:	1dc3      	adds	r3, r0, #7
    e00a:	1d42      	adds	r2, r0, #5
    e00c:	1cc1      	adds	r1, r0, #3
    e00e:	3001      	adds	r0, #1
    e010:	f00a fb9c 	bl	1874c <ll_length_max_get>
	rp->status = 0x00;
    e014:	2300      	movs	r3, #0
    e016:	7023      	strb	r3, [r4, #0]
    e018:	bd10      	pop	{r4, pc}
	...

0000e01c <le_phy_upd_complete>:
{
    e01c:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e01e:	4b1a      	ldr	r3, [pc, #104]	; (e088 <le_phy_upd_complete+0x6c>)
    e020:	e9d3 4500 	ldrd	r4, r5, [r3]
    e024:	2400      	movs	r4, #0
    e026:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    e02a:	ea54 0305 	orrs.w	r3, r4, r5
    e02e:	d008      	beq.n	e042 <le_phy_upd_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    e030:	4b16      	ldr	r3, [pc, #88]	; (e08c <le_phy_upd_complete+0x70>)
    e032:	e9d3 4500 	ldrd	r4, r5, [r3]
    e036:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    e03a:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e03c:	ea54 0305 	orrs.w	r3, r4, r5
    e040:	d100      	bne.n	e044 <le_phy_upd_complete+0x28>
    e042:	bd38      	pop	{r3, r4, r5, pc}
    e044:	4613      	mov	r3, r2
    e046:	460c      	mov	r4, r1
    e048:	4605      	mov	r5, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    e04a:	2205      	movs	r2, #5
    e04c:	210c      	movs	r1, #12
    e04e:	4618      	mov	r0, r3
    e050:	f7ff fa24 	bl	d49c <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    e054:	78eb      	ldrb	r3, [r5, #3]
    e056:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    e058:	f8a0 4001 	strh.w	r4, [r0, #1]
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    e05c:	792a      	ldrb	r2, [r5, #4]
	return __builtin_ffs(op);
    e05e:	fa92 f3a2 	rbit	r3, r2
    e062:	fab3 f383 	clz	r3, r3
    e066:	b90a      	cbnz	r2, e06c <le_phy_upd_complete+0x50>
    e068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e06c:	3301      	adds	r3, #1
    e06e:	70c3      	strb	r3, [r0, #3]
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    e070:	796a      	ldrb	r2, [r5, #5]
    e072:	fa92 f3a2 	rbit	r3, r2
    e076:	fab3 f383 	clz	r3, r3
    e07a:	b90a      	cbnz	r2, e080 <le_phy_upd_complete+0x64>
    e07c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e080:	3301      	adds	r3, #1
    e082:	7103      	strb	r3, [r0, #4]
    e084:	e7dd      	b.n	e042 <le_phy_upd_complete+0x26>
    e086:	bf00      	nop
    e088:	2000c158 	.word	0x2000c158
    e08c:	2000c160 	.word	0x2000c160

0000e090 <le_read_phy>:
{
    e090:	b570      	push	{r4, r5, r6, lr}
    e092:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
    e094:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    e096:	8815      	ldrh	r5, [r2, #0]
    e098:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    e09a:	2105      	movs	r1, #5
    e09c:	4618      	mov	r0, r3
    e09e:	f7ff f963 	bl	d368 <cmd_complete>
    e0a2:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    e0a4:	1d02      	adds	r2, r0, #4
    e0a6:	1cc1      	adds	r1, r0, #3
    e0a8:	4630      	mov	r0, r6
    e0aa:	f00a fb59 	bl	18760 <ll_phy_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e0ae:	b1c0      	cbz	r0, e0e2 <le_read_phy+0x52>
    e0b0:	230c      	movs	r3, #12
    e0b2:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    e0b4:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    e0b8:	78e2      	ldrb	r2, [r4, #3]
    e0ba:	fa92 f3a2 	rbit	r3, r2
    e0be:	fab3 f383 	clz	r3, r3
    e0c2:	b90a      	cbnz	r2, e0c8 <le_read_phy+0x38>
    e0c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e0c8:	3301      	adds	r3, #1
    e0ca:	70e3      	strb	r3, [r4, #3]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    e0cc:	7922      	ldrb	r2, [r4, #4]
    e0ce:	fa92 f3a2 	rbit	r3, r2
    e0d2:	fab3 f383 	clz	r3, r3
    e0d6:	b90a      	cbnz	r2, e0dc <le_read_phy+0x4c>
    e0d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e0dc:	3301      	adds	r3, #1
    e0de:	7123      	strb	r3, [r4, #4]
    e0e0:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e0e2:	2300      	movs	r3, #0
    e0e4:	e7e5      	b.n	e0b2 <le_read_phy+0x22>

0000e0e6 <le_set_default_phy>:
{
    e0e6:	b538      	push	{r3, r4, r5, lr}
    e0e8:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    e0ea:	6883      	ldr	r3, [r0, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    e0ec:	781a      	ldrb	r2, [r3, #0]
    e0ee:	f012 0f01 	tst.w	r2, #1
    e0f2:	d001      	beq.n	e0f8 <le_set_default_phy+0x12>
		cmd->tx_phys = 0x07;
    e0f4:	2107      	movs	r1, #7
    e0f6:	7059      	strb	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    e0f8:	f012 0f02 	tst.w	r2, #2
    e0fc:	d001      	beq.n	e102 <le_set_default_phy+0x1c>
		cmd->rx_phys = 0x07;
    e0fe:	2207      	movs	r2, #7
    e100:	709a      	strb	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    e102:	7899      	ldrb	r1, [r3, #2]
    e104:	7858      	ldrb	r0, [r3, #1]
    e106:	f00a fb3f 	bl	18788 <ll_phy_default_set>
    e10a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e10c:	2101      	movs	r1, #1
    e10e:	4628      	mov	r0, r5
    e110:	f7ff f92a 	bl	d368 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    e114:	b114      	cbz	r4, e11c <le_set_default_phy+0x36>
    e116:	231e      	movs	r3, #30
    e118:	7003      	strb	r3, [r0, #0]
    e11a:	bd38      	pop	{r3, r4, r5, pc}
    e11c:	2300      	movs	r3, #0
    e11e:	e7fb      	b.n	e118 <le_set_default_phy+0x32>

0000e120 <le_set_phy>:
{
    e120:	b538      	push	{r3, r4, r5, lr}
    e122:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    e124:	6881      	ldr	r1, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    e126:	8808      	ldrh	r0, [r1, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    e128:	f8b1 2005 	ldrh.w	r2, [r1, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    e12c:	788b      	ldrb	r3, [r1, #2]
    e12e:	f013 0f01 	tst.w	r3, #1
    e132:	d001      	beq.n	e138 <le_set_phy+0x18>
		cmd->tx_phys = 0x07;
    e134:	2507      	movs	r5, #7
    e136:	70cd      	strb	r5, [r1, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    e138:	f013 0f02 	tst.w	r3, #2
    e13c:	d001      	beq.n	e142 <le_set_phy+0x22>
		cmd->rx_phys = 0x07;
    e13e:	2307      	movs	r3, #7
    e140:	710b      	strb	r3, [r1, #4]
	if (phy_opts & 0x03) {
    e142:	f012 0f03 	tst.w	r2, #3
    e146:	d00c      	beq.n	e162 <le_set_phy+0x42>
		phy_opts -= 1;
    e148:	3a01      	subs	r2, #1
		phy_opts &= 1;
    e14a:	f002 0201 	and.w	r2, r2, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    e14e:	790b      	ldrb	r3, [r1, #4]
    e150:	78c9      	ldrb	r1, [r1, #3]
    e152:	f00a fb23 	bl	1879c <ll_phy_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    e156:	b100      	cbz	r0, e15a <le_set_phy+0x3a>
    e158:	200c      	movs	r0, #12
    e15a:	f7ff f8dd 	bl	d318 <cmd_status>
    e15e:	6020      	str	r0, [r4, #0]
    e160:	bd38      	pop	{r3, r4, r5, pc}
		phy_opts = 0;
    e162:	2200      	movs	r2, #0
    e164:	e7f3      	b.n	e14e <le_set_phy+0x2e>

0000e166 <le_add_dev_to_rl>:
{
    e166:	b538      	push	{r3, r4, r5, lr}
    e168:	460d      	mov	r5, r1
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
    e16a:	6880      	ldr	r0, [r0, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    e16c:	f100 0217 	add.w	r2, r0, #23
    e170:	1dc1      	adds	r1, r0, #7
    e172:	f00b fffd 	bl	1a170 <ll_rl_add>
    e176:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e178:	2101      	movs	r1, #1
    e17a:	4628      	mov	r0, r5
    e17c:	f7ff f8f4 	bl	d368 <cmd_complete>
	ccst->status = status;
    e180:	7004      	strb	r4, [r0, #0]
    e182:	bd38      	pop	{r3, r4, r5, pc}

0000e184 <le_rem_dev_from_rl>:
{
    e184:	b538      	push	{r3, r4, r5, lr}
    e186:	460d      	mov	r5, r1
	status = ll_rl_remove(&cmd->peer_id_addr);
    e188:	6880      	ldr	r0, [r0, #8]
    e18a:	f00c f8af 	bl	1a2ec <ll_rl_remove>
    e18e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e190:	2101      	movs	r1, #1
    e192:	4628      	mov	r0, r5
    e194:	f7ff f8e8 	bl	d368 <cmd_complete>
	ccst->status = status;
    e198:	7004      	strb	r4, [r0, #0]
    e19a:	bd38      	pop	{r3, r4, r5, pc}

0000e19c <le_clear_rl>:
{
    e19c:	b510      	push	{r4, lr}
    e19e:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    e1a0:	2101      	movs	r1, #1
    e1a2:	f7ff f8e1 	bl	d368 <cmd_complete>
    e1a6:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    e1a8:	f00b ffd6 	bl	1a158 <ll_rl_clear>
    e1ac:	7020      	strb	r0, [r4, #0]
    e1ae:	bd10      	pop	{r4, pc}

0000e1b0 <le_read_rl_size>:
{
    e1b0:	b510      	push	{r4, lr}
    e1b2:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e1b4:	2102      	movs	r1, #2
    e1b6:	f7ff f8d7 	bl	d368 <cmd_complete>
    e1ba:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    e1bc:	f00b ffca 	bl	1a154 <ll_rl_size_get>
    e1c0:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    e1c2:	2300      	movs	r3, #0
    e1c4:	7023      	strb	r3, [r4, #0]
    e1c6:	bd10      	pop	{r4, pc}

0000e1c8 <le_read_peer_rpa>:
{
    e1c8:	b510      	push	{r4, lr}
    e1ca:	b082      	sub	sp, #8
    e1cc:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
    e1ce:	2207      	movs	r2, #7
    e1d0:	6881      	ldr	r1, [r0, #8]
    e1d2:	4668      	mov	r0, sp
    e1d4:	f7f2 f874 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    e1d8:	2107      	movs	r1, #7
    e1da:	4620      	mov	r0, r4
    e1dc:	f7ff f8c4 	bl	d368 <cmd_complete>
    e1e0:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    e1e2:	1c41      	adds	r1, r0, #1
    e1e4:	4668      	mov	r0, sp
    e1e6:	f00c f925 	bl	1a434 <ll_rl_crpa_get>
    e1ea:	7020      	strb	r0, [r4, #0]
}
    e1ec:	b002      	add	sp, #8
    e1ee:	bd10      	pop	{r4, pc}

0000e1f0 <le_read_local_rpa>:
{
    e1f0:	b510      	push	{r4, lr}
    e1f2:	b082      	sub	sp, #8
    e1f4:	460c      	mov	r4, r1
    e1f6:	2207      	movs	r2, #7
    e1f8:	6881      	ldr	r1, [r0, #8]
    e1fa:	4668      	mov	r0, sp
    e1fc:	f7f2 f860 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    e200:	2107      	movs	r1, #7
    e202:	4620      	mov	r0, r4
    e204:	f7ff f8b0 	bl	d368 <cmd_complete>
    e208:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    e20a:	1c41      	adds	r1, r0, #1
    e20c:	4668      	mov	r0, sp
    e20e:	f00c f939 	bl	1a484 <ll_rl_lrpa_get>
    e212:	7020      	strb	r0, [r4, #0]
}
    e214:	b002      	add	sp, #8
    e216:	bd10      	pop	{r4, pc}

0000e218 <le_set_addr_res_enable>:
{
    e218:	b538      	push	{r3, r4, r5, lr}
    e21a:	460b      	mov	r3, r1
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
    e21c:	6882      	ldr	r2, [r0, #8]
	u8_t enable = cmd->enable;
    e21e:	7815      	ldrb	r5, [r2, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    e220:	2101      	movs	r1, #1
    e222:	4618      	mov	r0, r3
    e224:	f7ff f8a0 	bl	d368 <cmd_complete>
    e228:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    e22a:	4628      	mov	r0, r5
    e22c:	f00c f944 	bl	1a4b8 <ll_rl_enable>
    e230:	7020      	strb	r0, [r4, #0]
    e232:	bd38      	pop	{r3, r4, r5, pc}

0000e234 <le_set_rpa_timeout>:
{
    e234:	b510      	push	{r4, lr}
    e236:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
    e238:	6883      	ldr	r3, [r0, #8]
	ll_rl_timeout_set(timeout);
    e23a:	8818      	ldrh	r0, [r3, #0]
    e23c:	f00c f954 	bl	1a4e8 <ll_rl_timeout_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    e240:	2101      	movs	r1, #1
    e242:	4620      	mov	r0, r4
    e244:	f7ff f890 	bl	d368 <cmd_complete>
	ccst->status = 0x00;
    e248:	2300      	movs	r3, #0
    e24a:	7003      	strb	r3, [r0, #0]
    e24c:	bd10      	pop	{r4, pc}

0000e24e <le_set_privacy_mode>:
{
    e24e:	b538      	push	{r3, r4, r5, lr}
    e250:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
    e252:	6880      	ldr	r0, [r0, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    e254:	79c1      	ldrb	r1, [r0, #7]
    e256:	f00c f951 	bl	1a4fc <ll_priv_mode_set>
    e25a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e25c:	2101      	movs	r1, #1
    e25e:	4628      	mov	r0, r5
    e260:	f7ff f882 	bl	d368 <cmd_complete>
	ccst->status = status;
    e264:	7004      	strb	r4, [r0, #0]
    e266:	bd38      	pop	{r3, r4, r5, pc}

0000e268 <le_read_tx_power>:
{
    e268:	b508      	push	{r3, lr}
    e26a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e26c:	2103      	movs	r1, #3
    e26e:	f7ff f87b 	bl	d368 <cmd_complete>
	rp->status = 0x00;
    e272:	4601      	mov	r1, r0
    e274:	2300      	movs	r3, #0
    e276:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_power_get(&rp->min_tx_power, &rp->max_tx_power);
    e27a:	3001      	adds	r0, #1
    e27c:	f00a f9f3 	bl	18666 <ll_tx_power_get>
    e280:	bd08      	pop	{r3, pc}

0000e282 <controller_cmd_handle>:
{
    e282:	b508      	push	{r3, lr}
    e284:	460b      	mov	r3, r1
	switch (ocf) {
    e286:	3801      	subs	r0, #1
    e288:	284d      	cmp	r0, #77	; 0x4d
    e28a:	f200 8164 	bhi.w	e556 <controller_cmd_handle+0x2d4>
    e28e:	e8df f010 	tbh	[pc, r0, lsl #1]
    e292:	004e      	.short	0x004e
    e294:	005a0054 	.word	0x005a0054
    e298:	00600162 	.word	0x00600162
    e29c:	00960090 	.word	0x00960090
    e2a0:	00a2009c 	.word	0x00a2009c
    e2a4:	00ae00a8 	.word	0x00ae00a8
    e2a8:	00ba00b4 	.word	0x00ba00b4
    e2ac:	006600c0 	.word	0x006600c0
    e2b0:	0072006c 	.word	0x0072006c
    e2b4:	00ea0078 	.word	0x00ea0078
    e2b8:	00de00c6 	.word	0x00de00c6
    e2bc:	007e00e4 	.word	0x007e00e4
    e2c0:	00cc0084 	.word	0x00cc0084
    e2c4:	00d800d2 	.word	0x00d800d2
    e2c8:	0162008a 	.word	0x0162008a
    e2cc:	01620162 	.word	0x01620162
    e2d0:	00f600f0 	.word	0x00f600f0
    e2d4:	010200fc 	.word	0x010200fc
    e2d8:	01620108 	.word	0x01620108
    e2dc:	01260162 	.word	0x01260162
    e2e0:	0132012c 	.word	0x0132012c
    e2e4:	013e0138 	.word	0x013e0138
    e2e8:	014a0144 	.word	0x014a0144
    e2ec:	010e0150 	.word	0x010e0150
    e2f0:	011a0114 	.word	0x011a0114
    e2f4:	01620120 	.word	0x01620120
    e2f8:	01620162 	.word	0x01620162
    e2fc:	01620162 	.word	0x01620162
    e300:	01620162 	.word	0x01620162
    e304:	01620162 	.word	0x01620162
    e308:	01620162 	.word	0x01620162
    e30c:	01620162 	.word	0x01620162
    e310:	01620162 	.word	0x01620162
    e314:	01620162 	.word	0x01620162
    e318:	01620162 	.word	0x01620162
    e31c:	01620162 	.word	0x01620162
    e320:	01620162 	.word	0x01620162
    e324:	015c0162 	.word	0x015c0162
    e328:	01620162 	.word	0x01620162
    e32c:	0156      	.short	0x0156
		le_set_event_mask(cmd, evt);
    e32e:	4611      	mov	r1, r2
    e330:	4618      	mov	r0, r3
    e332:	f7f6 fe3f 	bl	4fb4 <le_set_event_mask>
	return 0;
    e336:	2000      	movs	r0, #0
		break;
    e338:	bd08      	pop	{r3, pc}
		le_read_buffer_size(cmd, evt);
    e33a:	4611      	mov	r1, r2
    e33c:	4618      	mov	r0, r3
    e33e:	f7ff f86c 	bl	d41a <le_read_buffer_size>
	return 0;
    e342:	2000      	movs	r0, #0
		break;
    e344:	bd08      	pop	{r3, pc}
		le_read_local_features(cmd, evt);
    e346:	4611      	mov	r1, r2
    e348:	4618      	mov	r0, r3
    e34a:	f7ff fabb 	bl	d8c4 <le_read_local_features>
	return 0;
    e34e:	2000      	movs	r0, #0
		break;
    e350:	bd08      	pop	{r3, pc}
		le_set_random_address(cmd, evt);
    e352:	4611      	mov	r1, r2
    e354:	4618      	mov	r0, r3
    e356:	f7ff fc03 	bl	db60 <le_set_random_address>
	return 0;
    e35a:	2000      	movs	r0, #0
		break;
    e35c:	bd08      	pop	{r3, pc}
		le_read_wl_size(cmd, evt);
    e35e:	4611      	mov	r1, r2
    e360:	4618      	mov	r0, r3
    e362:	f7ff fc17 	bl	db94 <le_read_wl_size>
	return 0;
    e366:	2000      	movs	r0, #0
		break;
    e368:	bd08      	pop	{r3, pc}
		le_clear_wl(cmd, evt);
    e36a:	4611      	mov	r1, r2
    e36c:	4618      	mov	r0, r3
    e36e:	f7ff fc1d 	bl	dbac <le_clear_wl>
	return 0;
    e372:	2000      	movs	r0, #0
		break;
    e374:	bd08      	pop	{r3, pc}
		le_add_dev_to_wl(cmd, evt);
    e376:	4611      	mov	r1, r2
    e378:	4618      	mov	r0, r3
    e37a:	f7ff fc21 	bl	dbc0 <le_add_dev_to_wl>
	return 0;
    e37e:	2000      	movs	r0, #0
		break;
    e380:	bd08      	pop	{r3, pc}
		le_rem_dev_from_wl(cmd, evt);
    e382:	4611      	mov	r1, r2
    e384:	4618      	mov	r0, r3
    e386:	f7ff fc27 	bl	dbd8 <le_rem_dev_from_wl>
	return 0;
    e38a:	2000      	movs	r0, #0
		break;
    e38c:	bd08      	pop	{r3, pc}
		le_encrypt(cmd, evt);
    e38e:	4611      	mov	r1, r2
    e390:	4618      	mov	r0, r3
    e392:	f7ff fc2d 	bl	dbf0 <le_encrypt>
	return 0;
    e396:	2000      	movs	r0, #0
		break;
    e398:	bd08      	pop	{r3, pc}
		le_rand(cmd, evt);
    e39a:	4611      	mov	r1, r2
    e39c:	4618      	mov	r0, r3
    e39e:	f7ff fca4 	bl	dcea <le_rand>
	return 0;
    e3a2:	2000      	movs	r0, #0
		break;
    e3a4:	bd08      	pop	{r3, pc}
		le_read_supp_states(cmd, evt);
    e3a6:	4611      	mov	r1, r2
    e3a8:	4618      	mov	r0, r3
    e3aa:	f7ff f843 	bl	d434 <le_read_supp_states>
	return 0;
    e3ae:	2000      	movs	r0, #0
		break;
    e3b0:	bd08      	pop	{r3, pc}
		le_set_adv_param(cmd, evt);
    e3b2:	4611      	mov	r1, r2
    e3b4:	4618      	mov	r0, r3
    e3b6:	f7ff fca4 	bl	dd02 <le_set_adv_param>
	return 0;
    e3ba:	2000      	movs	r0, #0
		break;
    e3bc:	bd08      	pop	{r3, pc}
		le_read_adv_chan_tx_power(cmd, evt);
    e3be:	4611      	mov	r1, r2
    e3c0:	4618      	mov	r0, r3
    e3c2:	f7ff f84a 	bl	d45a <le_read_adv_chan_tx_power>
	return 0;
    e3c6:	2000      	movs	r0, #0
		break;
    e3c8:	bd08      	pop	{r3, pc}
		le_set_adv_data(cmd, evt);
    e3ca:	4611      	mov	r1, r2
    e3cc:	4618      	mov	r0, r3
    e3ce:	f7ff fcbb 	bl	dd48 <le_set_adv_data>
	return 0;
    e3d2:	2000      	movs	r0, #0
		break;
    e3d4:	bd08      	pop	{r3, pc}
		le_set_scan_rsp_data(cmd, evt);
    e3d6:	4611      	mov	r1, r2
    e3d8:	4618      	mov	r0, r3
    e3da:	f7ff fcc3 	bl	dd64 <le_set_scan_rsp_data>
	return 0;
    e3de:	2000      	movs	r0, #0
		break;
    e3e0:	bd08      	pop	{r3, pc}
		le_set_adv_enable(cmd, evt);
    e3e2:	4611      	mov	r1, r2
    e3e4:	4618      	mov	r0, r3
    e3e6:	f7ff fccb 	bl	dd80 <le_set_adv_enable>
	return 0;
    e3ea:	2000      	movs	r0, #0
		break;
    e3ec:	bd08      	pop	{r3, pc}
		le_set_scan_param(cmd, evt);
    e3ee:	4611      	mov	r1, r2
    e3f0:	4618      	mov	r0, r3
    e3f2:	f7ff fcd6 	bl	dda2 <le_set_scan_param>
	return 0;
    e3f6:	2000      	movs	r0, #0
		break;
    e3f8:	bd08      	pop	{r3, pc}
		le_set_scan_enable(cmd, evt);
    e3fa:	4611      	mov	r1, r2
    e3fc:	4618      	mov	r0, r3
    e3fe:	f7ff fceb 	bl	ddd8 <le_set_scan_enable>
	return 0;
    e402:	2000      	movs	r0, #0
		break;
    e404:	bd08      	pop	{r3, pc}
		le_create_connection(cmd, evt);
    e406:	4611      	mov	r1, r2
    e408:	4618      	mov	r0, r3
    e40a:	f7ff fd09 	bl	de20 <le_create_connection>
	return 0;
    e40e:	2000      	movs	r0, #0
		break;
    e410:	bd08      	pop	{r3, pc}
		le_create_conn_cancel(cmd, evt);
    e412:	4611      	mov	r1, r2
    e414:	4618      	mov	r0, r3
    e416:	f7ff fd23 	bl	de60 <le_create_conn_cancel>
	return 0;
    e41a:	2000      	movs	r0, #0
		break;
    e41c:	bd08      	pop	{r3, pc}
		le_set_host_chan_classif(cmd, evt);
    e41e:	4611      	mov	r1, r2
    e420:	4618      	mov	r0, r3
    e422:	f7ff fd2c 	bl	de7e <le_set_host_chan_classif>
	return 0;
    e426:	2000      	movs	r0, #0
		break;
    e428:	bd08      	pop	{r3, pc}
		le_start_encryption(cmd, evt);
    e42a:	4611      	mov	r1, r2
    e42c:	4618      	mov	r0, r3
    e42e:	f7ff fd36 	bl	de9e <le_start_encryption>
	return 0;
    e432:	2000      	movs	r0, #0
		break;
    e434:	bd08      	pop	{r3, pc}
		le_ltk_req_reply(cmd, evt);
    e436:	4611      	mov	r1, r2
    e438:	4618      	mov	r0, r3
    e43a:	f7ff fd41 	bl	dec0 <le_ltk_req_reply>
	return 0;
    e43e:	2000      	movs	r0, #0
		break;
    e440:	bd08      	pop	{r3, pc}
		le_ltk_req_neg_reply(cmd, evt);
    e442:	4611      	mov	r1, r2
    e444:	4618      	mov	r0, r3
    e446:	f7ff fd51 	bl	deec <le_ltk_req_neg_reply>
	return 0;
    e44a:	2000      	movs	r0, #0
		break;
    e44c:	bd08      	pop	{r3, pc}
		le_read_chan_map(cmd, evt);
    e44e:	4611      	mov	r1, r2
    e450:	4618      	mov	r0, r3
    e452:	f7ff fd61 	bl	df18 <le_read_chan_map>
	return 0;
    e456:	2000      	movs	r0, #0
		break;
    e458:	bd08      	pop	{r3, pc}
		le_read_remote_features(cmd, evt);
    e45a:	4611      	mov	r1, r2
    e45c:	4618      	mov	r0, r3
    e45e:	f7ff fd71 	bl	df44 <le_read_remote_features>
	return 0;
    e462:	2000      	movs	r0, #0
		break;
    e464:	bd08      	pop	{r3, pc}
		le_conn_update(cmd, evt);
    e466:	4611      	mov	r1, r2
    e468:	4618      	mov	r0, r3
    e46a:	f7f9 f9c1 	bl	77f0 <le_conn_update>
	return 0;
    e46e:	2000      	movs	r0, #0
		break;
    e470:	bd08      	pop	{r3, pc}
		le_conn_param_req_reply(cmd, evt);
    e472:	4611      	mov	r1, r2
    e474:	4618      	mov	r0, r3
    e476:	f7f7 fe47 	bl	6108 <le_conn_param_req_reply>
	return 0;
    e47a:	2000      	movs	r0, #0
		break;
    e47c:	bd08      	pop	{r3, pc}
		le_conn_param_req_neg_reply(cmd, evt);
    e47e:	4611      	mov	r1, r2
    e480:	4618      	mov	r0, r3
    e482:	f7ff fd6b 	bl	df5c <le_conn_param_req_neg_reply>
	return 0;
    e486:	2000      	movs	r0, #0
		break;
    e488:	bd08      	pop	{r3, pc}
		le_set_data_len(cmd, evt);
    e48a:	4611      	mov	r1, r2
    e48c:	4618      	mov	r0, r3
    e48e:	f7ff fd80 	bl	df92 <le_set_data_len>
	return 0;
    e492:	2000      	movs	r0, #0
		break;
    e494:	bd08      	pop	{r3, pc}
		le_read_default_data_len(cmd, evt);
    e496:	4611      	mov	r1, r2
    e498:	4618      	mov	r0, r3
    e49a:	f7ff fd90 	bl	dfbe <le_read_default_data_len>
	return 0;
    e49e:	2000      	movs	r0, #0
		break;
    e4a0:	bd08      	pop	{r3, pc}
		le_write_default_data_len(cmd, evt);
    e4a2:	4611      	mov	r1, r2
    e4a4:	4618      	mov	r0, r3
    e4a6:	f7ff fd97 	bl	dfd8 <le_write_default_data_len>
	return 0;
    e4aa:	2000      	movs	r0, #0
		break;
    e4ac:	bd08      	pop	{r3, pc}
		le_read_max_data_len(cmd, evt);
    e4ae:	4611      	mov	r1, r2
    e4b0:	4618      	mov	r0, r3
    e4b2:	f7ff fda3 	bl	dffc <le_read_max_data_len>
	return 0;
    e4b6:	2000      	movs	r0, #0
		break;
    e4b8:	bd08      	pop	{r3, pc}
		le_read_phy(cmd, evt);
    e4ba:	4611      	mov	r1, r2
    e4bc:	4618      	mov	r0, r3
    e4be:	f7ff fde7 	bl	e090 <le_read_phy>
	return 0;
    e4c2:	2000      	movs	r0, #0
		break;
    e4c4:	bd08      	pop	{r3, pc}
		le_set_default_phy(cmd, evt);
    e4c6:	4611      	mov	r1, r2
    e4c8:	4618      	mov	r0, r3
    e4ca:	f7ff fe0c 	bl	e0e6 <le_set_default_phy>
	return 0;
    e4ce:	2000      	movs	r0, #0
		break;
    e4d0:	bd08      	pop	{r3, pc}
		le_set_phy(cmd, evt);
    e4d2:	4611      	mov	r1, r2
    e4d4:	4618      	mov	r0, r3
    e4d6:	f7ff fe23 	bl	e120 <le_set_phy>
	return 0;
    e4da:	2000      	movs	r0, #0
		break;
    e4dc:	bd08      	pop	{r3, pc}
		le_add_dev_to_rl(cmd, evt);
    e4de:	4611      	mov	r1, r2
    e4e0:	4618      	mov	r0, r3
    e4e2:	f7ff fe40 	bl	e166 <le_add_dev_to_rl>
	return 0;
    e4e6:	2000      	movs	r0, #0
		break;
    e4e8:	bd08      	pop	{r3, pc}
		le_rem_dev_from_rl(cmd, evt);
    e4ea:	4611      	mov	r1, r2
    e4ec:	4618      	mov	r0, r3
    e4ee:	f7ff fe49 	bl	e184 <le_rem_dev_from_rl>
	return 0;
    e4f2:	2000      	movs	r0, #0
		break;
    e4f4:	bd08      	pop	{r3, pc}
		le_clear_rl(cmd, evt);
    e4f6:	4611      	mov	r1, r2
    e4f8:	4618      	mov	r0, r3
    e4fa:	f7ff fe4f 	bl	e19c <le_clear_rl>
	return 0;
    e4fe:	2000      	movs	r0, #0
		break;
    e500:	bd08      	pop	{r3, pc}
		le_read_rl_size(cmd, evt);
    e502:	4611      	mov	r1, r2
    e504:	4618      	mov	r0, r3
    e506:	f7ff fe53 	bl	e1b0 <le_read_rl_size>
	return 0;
    e50a:	2000      	movs	r0, #0
		break;
    e50c:	bd08      	pop	{r3, pc}
		le_read_peer_rpa(cmd, evt);
    e50e:	4611      	mov	r1, r2
    e510:	4618      	mov	r0, r3
    e512:	f7ff fe59 	bl	e1c8 <le_read_peer_rpa>
	return 0;
    e516:	2000      	movs	r0, #0
		break;
    e518:	bd08      	pop	{r3, pc}
		le_read_local_rpa(cmd, evt);
    e51a:	4611      	mov	r1, r2
    e51c:	4618      	mov	r0, r3
    e51e:	f7ff fe67 	bl	e1f0 <le_read_local_rpa>
	return 0;
    e522:	2000      	movs	r0, #0
		break;
    e524:	bd08      	pop	{r3, pc}
		le_set_addr_res_enable(cmd, evt);
    e526:	4611      	mov	r1, r2
    e528:	4618      	mov	r0, r3
    e52a:	f7ff fe75 	bl	e218 <le_set_addr_res_enable>
	return 0;
    e52e:	2000      	movs	r0, #0
		break;
    e530:	bd08      	pop	{r3, pc}
		le_set_rpa_timeout(cmd, evt);
    e532:	4611      	mov	r1, r2
    e534:	4618      	mov	r0, r3
    e536:	f7ff fe7d 	bl	e234 <le_set_rpa_timeout>
	return 0;
    e53a:	2000      	movs	r0, #0
		break;
    e53c:	bd08      	pop	{r3, pc}
		le_set_privacy_mode(cmd, evt);
    e53e:	4611      	mov	r1, r2
    e540:	4618      	mov	r0, r3
    e542:	f7ff fe84 	bl	e24e <le_set_privacy_mode>
	return 0;
    e546:	2000      	movs	r0, #0
		break;
    e548:	bd08      	pop	{r3, pc}
		le_read_tx_power(cmd, evt);
    e54a:	4611      	mov	r1, r2
    e54c:	4618      	mov	r0, r3
    e54e:	f7ff fe8b 	bl	e268 <le_read_tx_power>
	return 0;
    e552:	2000      	movs	r0, #0
		break;
    e554:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e556:	f06f 0015 	mvn.w	r0, #21
}
    e55a:	bd08      	pop	{r3, pc}

0000e55c <data_buf_overflow>:
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    e55c:	4b0e      	ldr	r3, [pc, #56]	; (e598 <data_buf_overflow+0x3c>)
    e55e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e562:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    e566:	2300      	movs	r3, #0
    e568:	4313      	orrs	r3, r2
    e56a:	d100      	bne.n	e56e <data_buf_overflow+0x12>
    e56c:	4770      	bx	lr
{
    e56e:	b510      	push	{r4, lr}
    e570:	4604      	mov	r4, r0
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e572:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e576:	2001      	movs	r0, #1
    e578:	f7f8 fa1c 	bl	69b4 <bt_buf_get_rx>
    e57c:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    e57e:	2201      	movs	r2, #1
    e580:	211a      	movs	r1, #26
    e582:	f7fe febf 	bl	d304 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    e586:	6820      	ldr	r0, [r4, #0]
    e588:	2101      	movs	r1, #1
    e58a:	3008      	adds	r0, #8
    e58c:	f00c fbe2 	bl	1ad54 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    e590:	2301      	movs	r3, #1
    e592:	7003      	strb	r3, [r0, #0]
    e594:	bd10      	pop	{r4, pc}
    e596:	bf00      	nop
    e598:	2000c158 	.word	0x2000c158

0000e59c <encode_data_ctrl>:
{
    e59c:	b510      	push	{r4, lr}
    e59e:	460c      	mov	r4, r1
	u16_t handle = node_rx->hdr.handle;
    e5a0:	88c1      	ldrh	r1, [r0, #6]
	switch (pdu_data->payload.llctrl.opcode) {
    e5a2:	78e0      	ldrb	r0, [r4, #3]
    e5a4:	3803      	subs	r0, #3
    e5a6:	2812      	cmp	r0, #18
    e5a8:	d82e      	bhi.n	e608 <encode_data_ctrl+0x6c>
    e5aa:	e8df f000 	tbb	[pc, r0]
    e5ae:	2d0a      	.short	0x2d0a
    e5b0:	2d290e2d 	.word	0x2d290e2d
    e5b4:	192d2d12 	.word	0x192d2d12
    e5b8:	2d212d1d 	.word	0x2d212d1d
    e5bc:	252d2d2d 	.word	0x252d2d2d
    e5c0:	25          	.byte	0x25
    e5c1:	00          	.byte	0x00
		le_ltk_request(pdu_data, handle, buf);
    e5c2:	4620      	mov	r0, r4
    e5c4:	f7f7 feec 	bl	63a0 <le_ltk_request>
		break;
    e5c8:	bd10      	pop	{r4, pc}
		encrypt_change(0x00, handle, buf);
    e5ca:	2000      	movs	r0, #0
    e5cc:	f7ff f826 	bl	d61c <encrypt_change>
		break;
    e5d0:	bd10      	pop	{r4, pc}
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    e5d2:	4613      	mov	r3, r2
    e5d4:	460a      	mov	r2, r1
    e5d6:	4621      	mov	r1, r4
    e5d8:	2000      	movs	r0, #0
    e5da:	f7f7 fceb 	bl	5fb4 <le_remote_feat_complete>
		break;
    e5de:	bd10      	pop	{r4, pc}
		remote_version_info(pdu_data, handle, buf);
    e5e0:	4620      	mov	r0, r4
    e5e2:	f7fe fff5 	bl	d5d0 <remote_version_info>
		break;
    e5e6:	bd10      	pop	{r4, pc}
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    e5e8:	7920      	ldrb	r0, [r4, #4]
    e5ea:	f7ff f817 	bl	d61c <encrypt_change>
		break;
    e5ee:	bd10      	pop	{r4, pc}
		le_conn_param_req(pdu_data, handle, buf);
    e5f0:	4620      	mov	r0, r4
    e5f2:	f7f7 fdd7 	bl	61a4 <le_conn_param_req>
		break;
    e5f6:	bd10      	pop	{r4, pc}
		le_data_len_change(pdu_data, handle, buf);
    e5f8:	4620      	mov	r0, r4
    e5fa:	f7f6 fa43 	bl	4a84 <le_data_len_change>
		break;
    e5fe:	bd10      	pop	{r4, pc}
		le_unknown_rsp(pdu_data, handle, buf);
    e600:	4620      	mov	r0, r4
    e602:	f7ff fb66 	bl	dcd2 <le_unknown_rsp>
		break;
    e606:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    e608:	4040      	eors	r0, r0
    e60a:	f380 8811 	msr	BASEPRI, r0
    e60e:	f04f 0004 	mov.w	r0, #4
    e612:	df02      	svc	2

0000e614 <le_advertising_report>:
{
    e614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e618:	b082      	sub	sp, #8
    e61a:	4605      	mov	r5, r0
    e61c:	460e      	mov	r6, r1
    e61e:	4691      	mov	r9, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    e620:	4b90      	ldr	r3, [pc, #576]	; (e864 <le_advertising_report+0x250>)
    e622:	e893 0003 	ldmia.w	r3, {r0, r1}
    e626:	9000      	str	r0, [sp, #0]
    e628:	f8ad 1004 	strh.w	r1, [sp, #4]
    e62c:	0c09      	lsrs	r1, r1, #16
    e62e:	f88d 1006 	strb.w	r1, [sp, #6]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    e632:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e634:	330b      	adds	r3, #11
    e636:	f816 8003 	ldrb.w	r8, [r6, r3]
	if (adv->tx_addr) {
    e63a:	782b      	ldrb	r3, [r5, #0]
    e63c:	f013 0f40 	tst.w	r3, #64	; 0x40
    e640:	d125      	bne.n	e68e <le_advertising_report+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    e642:	4b89      	ldr	r3, [pc, #548]	; (e868 <le_advertising_report+0x254>)
    e644:	e9d3 2300 	ldrd	r2, r3, [r3]
    e648:	2200      	movs	r2, #0
    e64a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e64e:	4313      	orrs	r3, r2
    e650:	f000 80b0 	beq.w	e7b4 <le_advertising_report+0x1a0>
		   offsetof(struct pdu_adv, payload) + adv->len + 2];
    e654:	786b      	ldrb	r3, [r5, #1]
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e656:	330c      	adds	r3, #12
    e658:	5cf7      	ldrb	r7, [r6, r3]
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    e65a:	b947      	cbnz	r7, e66e <le_advertising_report+0x5a>
    e65c:	4b83      	ldr	r3, [pc, #524]	; (e86c <le_advertising_report+0x258>)
    e65e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e662:	f002 0202 	and.w	r2, r2, #2
    e666:	2300      	movs	r3, #0
    e668:	4313      	orrs	r3, r2
    e66a:	f000 80a3 	beq.w	e7b4 <le_advertising_report+0x1a0>
    e66e:	b147      	cbz	r7, e682 <le_advertising_report+0x6e>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    e670:	4b7e      	ldr	r3, [pc, #504]	; (e86c <le_advertising_report+0x258>)
    e672:	e9d3 2300 	ldrd	r2, r3, [r3]
    e676:	f002 020b 	and.w	r2, r2, #11
    e67a:	2300      	movs	r3, #0
    e67c:	4313      	orrs	r3, r2
    e67e:	f000 8099 	beq.w	e7b4 <le_advertising_report+0x1a0>
	if (dup_count >= 0) {
    e682:	4b7b      	ldr	r3, [pc, #492]	; (e870 <le_advertising_report+0x25c>)
    e684:	681b      	ldr	r3, [r3, #0]
    e686:	2b00      	cmp	r3, #0
    e688:	db08      	blt.n	e69c <le_advertising_report+0x88>
    e68a:	2400      	movs	r4, #0
    e68c:	e009      	b.n	e6a2 <le_advertising_report+0x8e>
		ll_rl_crpa_set(0x00, NULL, rl_idx,
    e68e:	1cab      	adds	r3, r5, #2
    e690:	4642      	mov	r2, r8
    e692:	2100      	movs	r1, #0
    e694:	4608      	mov	r0, r1
    e696:	f00b fea9 	bl	1a3ec <ll_rl_crpa_set>
    e69a:	e7d2      	b.n	e642 <le_advertising_report+0x2e>
	return false;
    e69c:	2300      	movs	r3, #0
    e69e:	e054      	b.n	e74a <le_advertising_report+0x136>
		for (i = 0; i < dup_count; i++) {
    e6a0:	3401      	adds	r4, #1
    e6a2:	4b73      	ldr	r3, [pc, #460]	; (e870 <le_advertising_report+0x25c>)
    e6a4:	681b      	ldr	r3, [r3, #0]
    e6a6:	429c      	cmp	r4, r3
    e6a8:	da26      	bge.n	e6f8 <le_advertising_report+0xe4>
				    &dup_filter[i].addr.a.val[0],
    e6aa:	4972      	ldr	r1, [pc, #456]	; (e874 <le_advertising_report+0x260>)
    e6ac:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
			if (!memcmp(&adv->payload.adv_ind.addr[0],
    e6b0:	2206      	movs	r2, #6
    e6b2:	3102      	adds	r1, #2
    e6b4:	1ca8      	adds	r0, r5, #2
    e6b6:	f01c f86b 	bl	2a790 <memcmp>
    e6ba:	2800      	cmp	r0, #0
    e6bc:	d1f0      	bne.n	e6a0 <le_advertising_report+0x8c>
			    adv->tx_addr == dup_filter[i].addr.type) {
    e6be:	782b      	ldrb	r3, [r5, #0]
    e6c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e6c4:	4a6b      	ldr	r2, [pc, #428]	; (e874 <le_advertising_report+0x260>)
    e6c6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    e6ca:	7852      	ldrb	r2, [r2, #1]
				    sizeof(bt_addr_t)) &&
    e6cc:	4293      	cmp	r3, r2
    e6ce:	d1e7      	bne.n	e6a0 <le_advertising_report+0x8c>
				if (dup_filter[i].mask & BIT(adv->type)) {
    e6d0:	4b68      	ldr	r3, [pc, #416]	; (e874 <le_advertising_report+0x260>)
    e6d2:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
    e6d6:	782b      	ldrb	r3, [r5, #0]
    e6d8:	f003 030f 	and.w	r3, r3, #15
    e6dc:	fa22 f103 	lsr.w	r1, r2, r3
    e6e0:	f011 0f01 	tst.w	r1, #1
    e6e4:	d171      	bne.n	e7ca <le_advertising_report+0x1b6>
				dup_filter[i].mask |= BIT(adv->type);
    e6e6:	2101      	movs	r1, #1
    e6e8:	fa01 f303 	lsl.w	r3, r1, r3
    e6ec:	431a      	orrs	r2, r3
    e6ee:	4b61      	ldr	r3, [pc, #388]	; (e874 <le_advertising_report+0x260>)
    e6f0:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
				return false;
    e6f4:	2300      	movs	r3, #0
    e6f6:	e028      	b.n	e74a <le_advertising_report+0x136>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    e6f8:	f8df a17c 	ldr.w	sl, [pc, #380]	; e878 <le_advertising_report+0x264>
    e6fc:	f8da 0000 	ldr.w	r0, [sl]
    e700:	4c5c      	ldr	r4, [pc, #368]	; (e874 <le_advertising_report+0x260>)
    e702:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    e706:	2206      	movs	r2, #6
    e708:	1ca9      	adds	r1, r5, #2
    e70a:	3002      	adds	r0, #2
    e70c:	f7f1 fdd8 	bl	2c0 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    e710:	f8da 3000 	ldr.w	r3, [sl]
    e714:	782a      	ldrb	r2, [r5, #0]
    e716:	f3c2 1280 	ubfx	r2, r2, #6, #1
    e71a:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    e71e:	704a      	strb	r2, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    e720:	782a      	ldrb	r2, [r5, #0]
    e722:	f002 010f 	and.w	r1, r2, #15
    e726:	2201      	movs	r2, #1
    e728:	408a      	lsls	r2, r1
    e72a:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    e72e:	4a50      	ldr	r2, [pc, #320]	; (e870 <le_advertising_report+0x25c>)
    e730:	6812      	ldr	r2, [r2, #0]
    e732:	2a0f      	cmp	r2, #15
    e734:	dc41      	bgt.n	e7ba <le_advertising_report+0x1a6>
			dup_count++;
    e736:	3201      	adds	r2, #1
    e738:	4b4d      	ldr	r3, [pc, #308]	; (e870 <le_advertising_report+0x25c>)
    e73a:	601a      	str	r2, [r3, #0]
			dup_curr = dup_count;
    e73c:	f8ca 2000 	str.w	r2, [sl]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    e740:	4b4d      	ldr	r3, [pc, #308]	; (e878 <le_advertising_report+0x264>)
    e742:	681b      	ldr	r3, [r3, #0]
    e744:	2b10      	cmp	r3, #16
    e746:	d03c      	beq.n	e7c2 <le_advertising_report+0x1ae>
	return false;
    e748:	2300      	movs	r3, #0
	if (dup_found(adv)) {
    e74a:	bb9b      	cbnz	r3, e7b4 <le_advertising_report+0x1a0>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    e74c:	782b      	ldrb	r3, [r5, #0]
    e74e:	f003 030f 	and.w	r3, r3, #15
    e752:	2b01      	cmp	r3, #1
    e754:	d03b      	beq.n	e7ce <le_advertising_report+0x1ba>
		data_len = (adv->len - BDADDR_SIZE);
    e756:	786c      	ldrb	r4, [r5, #1]
    e758:	3c06      	subs	r4, #6
    e75a:	b2e4      	uxtb	r4, r4
		  offsetof(struct pdu_adv, payload) + adv->len];
    e75c:	786a      	ldrb	r2, [r5, #1]
    e75e:	320a      	adds	r2, #10
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e760:	f816 a002 	ldrb.w	sl, [r6, r2]
    e764:	f1ca 0a00 	rsb	sl, sl, #0
    e768:	fa4f fa8a 	sxtb.w	sl, sl
	if (direct) {
    e76c:	2f00      	cmp	r7, #0
    e76e:	d041      	beq.n	e7f4 <le_advertising_report+0x1e0>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    e770:	2b01      	cmp	r3, #1
    e772:	d12e      	bne.n	e7d2 <le_advertising_report+0x1be>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    e774:	2211      	movs	r2, #17
    e776:	210b      	movs	r1, #11
    e778:	4648      	mov	r0, r9
    e77a:	f7fe fe8f 	bl	d49c <meta_evt>
    e77e:	4604      	mov	r4, r0
		drp->num_reports = 1;
    e780:	2301      	movs	r3, #1
    e782:	7003      	strb	r3, [r0, #0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    e784:	7043      	strb	r3, [r0, #1]
		if (rl_idx < ll_rl_size_get()) {
    e786:	f00b fce5 	bl	1a154 <ll_rl_size_get>
    e78a:	4580      	cmp	r8, r0
    e78c:	d227      	bcs.n	e7de <le_advertising_report+0x1ca>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    e78e:	1ce2      	adds	r2, r4, #3
    e790:	1ca1      	adds	r1, r4, #2
    e792:	4640      	mov	r0, r8
    e794:	f00b fa86 	bl	19ca4 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    e798:	78a3      	ldrb	r3, [r4, #2]
    e79a:	3302      	adds	r3, #2
    e79c:	70a3      	strb	r3, [r4, #2]
		dir_info->dir_addr.type = 0x1;
    e79e:	2301      	movs	r3, #1
    e7a0:	7263      	strb	r3, [r4, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    e7a2:	2206      	movs	r2, #6
    e7a4:	f105 0108 	add.w	r1, r5, #8
    e7a8:	f104 000a 	add.w	r0, r4, #10
    e7ac:	f7f1 fd88 	bl	2c0 <memcpy>
		dir_info->rssi = rssi;
    e7b0:	f884 a010 	strb.w	sl, [r4, #16]
}
    e7b4:	b002      	add	sp, #8
    e7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
    e7ba:	3301      	adds	r3, #1
    e7bc:	4a2e      	ldr	r2, [pc, #184]	; (e878 <le_advertising_report+0x264>)
    e7be:	6013      	str	r3, [r2, #0]
    e7c0:	e7be      	b.n	e740 <le_advertising_report+0x12c>
			dup_curr = 0;
    e7c2:	2300      	movs	r3, #0
    e7c4:	4a2c      	ldr	r2, [pc, #176]	; (e878 <le_advertising_report+0x264>)
    e7c6:	6013      	str	r3, [r2, #0]
    e7c8:	e7bf      	b.n	e74a <le_advertising_report+0x136>
					return true;
    e7ca:	2301      	movs	r3, #1
    e7cc:	e7bd      	b.n	e74a <le_advertising_report+0x136>
		data_len = 0;
    e7ce:	2400      	movs	r4, #0
    e7d0:	e7c4      	b.n	e75c <le_advertising_report+0x148>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    e7d2:	4040      	eors	r0, r0
    e7d4:	f380 8811 	msr	BASEPRI, r0
    e7d8:	f04f 0004 	mov.w	r0, #4
    e7dc:	df02      	svc	2
			dir_info->addr.type = adv->tx_addr;
    e7de:	4629      	mov	r1, r5
    e7e0:	f811 3b02 	ldrb.w	r3, [r1], #2
    e7e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e7e8:	70a3      	strb	r3, [r4, #2]
			memcpy(&dir_info->addr.a.val[0],
    e7ea:	2206      	movs	r2, #6
    e7ec:	1ce0      	adds	r0, r4, #3
    e7ee:	f7f1 fd67 	bl	2c0 <memcpy>
    e7f2:	e7d4      	b.n	e79e <le_advertising_report+0x18a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    e7f4:	f104 020b 	add.w	r2, r4, #11
    e7f8:	b2d2      	uxtb	r2, r2
    e7fa:	2102      	movs	r1, #2
    e7fc:	4648      	mov	r0, r9
    e7fe:	f7fe fe4d 	bl	d49c <meta_evt>
    e802:	4607      	mov	r7, r0
	sep->num_reports = 1;
    e804:	2301      	movs	r3, #1
    e806:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    e808:	782b      	ldrb	r3, [r5, #0]
    e80a:	f003 030f 	and.w	r3, r3, #15
    e80e:	aa02      	add	r2, sp, #8
    e810:	4413      	add	r3, r2
    e812:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    e816:	7043      	strb	r3, [r0, #1]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    e818:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e81a:	330b      	adds	r3, #11
    e81c:	5cf6      	ldrb	r6, [r6, r3]
	if (rl_idx < ll_rl_size_get()) {
    e81e:	f00b fc99 	bl	1a154 <ll_rl_size_get>
    e822:	4286      	cmp	r6, r0
    e824:	d212      	bcs.n	e84c <le_advertising_report+0x238>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    e826:	1cfa      	adds	r2, r7, #3
    e828:	1cb9      	adds	r1, r7, #2
    e82a:	4630      	mov	r0, r6
    e82c:	f00b fa3a 	bl	19ca4 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    e830:	78bb      	ldrb	r3, [r7, #2]
    e832:	3302      	adds	r3, #2
    e834:	70bb      	strb	r3, [r7, #2]
	adv_info->length = data_len;
    e836:	727c      	strb	r4, [r7, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    e838:	370a      	adds	r7, #10
    e83a:	4622      	mov	r2, r4
    e83c:	f105 0108 	add.w	r1, r5, #8
    e840:	4638      	mov	r0, r7
    e842:	f7f1 fd3d 	bl	2c0 <memcpy>
	*prssi = rssi;
    e846:	f807 a004 	strb.w	sl, [r7, r4]
    e84a:	e7b3      	b.n	e7b4 <le_advertising_report+0x1a0>
		adv_info->addr.type = adv->tx_addr;
    e84c:	4629      	mov	r1, r5
    e84e:	f811 3b02 	ldrb.w	r3, [r1], #2
    e852:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e856:	70bb      	strb	r3, [r7, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    e858:	2206      	movs	r2, #6
    e85a:	1cf8      	adds	r0, r7, #3
    e85c:	f7f1 fd30 	bl	2c0 <memcpy>
    e860:	e7e9      	b.n	e836 <le_advertising_report+0x222>
    e862:	bf00      	nop
    e864:	0002e6d8 	.word	0x0002e6d8
    e868:	2000c158 	.word	0x2000c158
    e86c:	2000c160 	.word	0x2000c160
    e870:	20001028 	.word	0x20001028
    e874:	20001030 	.word	0x20001030
    e878:	2000102c 	.word	0x2000102c

0000e87c <le_adv_ext_report>:
		  offsetof(struct pdu_adv, payload) + adv->len];
    e87c:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    e87e:	7803      	ldrb	r3, [r0, #0]
    e880:	f003 030f 	and.w	r3, r3, #15
    e884:	2b07      	cmp	r3, #7
    e886:	d000      	beq.n	e88a <le_adv_ext_report+0xe>
    e888:	4770      	bx	lr
    e88a:	2a00      	cmp	r2, #0
    e88c:	d0fc      	beq.n	e888 <le_adv_ext_report+0xc>
		ptr = (u8_t *)h + sizeof(*h);
    e88e:	1d01      	adds	r1, r0, #4
		if (!p->ext_hdr_len) {
    e890:	7883      	ldrb	r3, [r0, #2]
    e892:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    e896:	d0f7      	beq.n	e888 <le_adv_ext_report+0xc>
		if (h->adv_addr) {
    e898:	78c3      	ldrb	r3, [r0, #3]
    e89a:	f013 0f01 	tst.w	r3, #1
    e89e:	d0f3      	beq.n	e888 <le_adv_ext_report+0xc>
{
    e8a0:	b570      	push	{r4, r5, r6, lr}
    e8a2:	b092      	sub	sp, #72	; 0x48
			addr.type = adv->tx_addr;
    e8a4:	7803      	ldrb	r3, [r0, #0]
    e8a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e8aa:	f88d 3018 	strb.w	r3, [sp, #24]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    e8ae:	2206      	movs	r2, #6
    e8b0:	f10d 0019 	add.w	r0, sp, #25
    e8b4:	f7f1 fd04 	bl	2c0 <memcpy>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    e8b8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e8bc:	2b03      	cmp	r3, #3
    e8be:	d830      	bhi.n	e922 <le_adv_ext_report+0xa6>
    e8c0:	e8df f003 	tbb	[pc, r3]
    e8c4:	2a252002 	.word	0x2a252002
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    e8c8:	4919      	ldr	r1, [pc, #100]	; (e930 <le_adv_ext_report+0xb4>)
    e8ca:	a808      	add	r0, sp, #32
    e8cc:	f01c f960 	bl	2ab90 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    e8d0:	f89d 301e 	ldrb.w	r3, [sp, #30]
    e8d4:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e8d8:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    e8dc:	f89d 001b 	ldrb.w	r0, [sp, #27]
    e8e0:	f89d 401a 	ldrb.w	r4, [sp, #26]
    e8e4:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e8e8:	ae08      	add	r6, sp, #32
    e8ea:	9605      	str	r6, [sp, #20]
    e8ec:	9504      	str	r5, [sp, #16]
    e8ee:	9403      	str	r4, [sp, #12]
    e8f0:	9002      	str	r0, [sp, #8]
    e8f2:	9101      	str	r1, [sp, #4]
    e8f4:	9200      	str	r2, [sp, #0]
    e8f6:	4a0f      	ldr	r2, [pc, #60]	; (e934 <le_adv_ext_report+0xb8>)
    e8f8:	211b      	movs	r1, #27
    e8fa:	a80b      	add	r0, sp, #44	; 0x2c
    e8fc:	f7f4 fb38 	bl	2f70 <snprintk>
}
    e900:	b012      	add	sp, #72	; 0x48
    e902:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    e904:	490c      	ldr	r1, [pc, #48]	; (e938 <le_adv_ext_report+0xbc>)
    e906:	a808      	add	r0, sp, #32
    e908:	f01c f942 	bl	2ab90 <strcpy>
    e90c:	e7e0      	b.n	e8d0 <le_adv_ext_report+0x54>
		strcpy(type, "public id");
    e90e:	490b      	ldr	r1, [pc, #44]	; (e93c <le_adv_ext_report+0xc0>)
    e910:	a808      	add	r0, sp, #32
    e912:	f01c f93d 	bl	2ab90 <strcpy>
    e916:	e7db      	b.n	e8d0 <le_adv_ext_report+0x54>
		strcpy(type, "random id");
    e918:	4909      	ldr	r1, [pc, #36]	; (e940 <le_adv_ext_report+0xc4>)
    e91a:	a808      	add	r0, sp, #32
    e91c:	f01c f938 	bl	2ab90 <strcpy>
    e920:	e7d6      	b.n	e8d0 <le_adv_ext_report+0x54>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e922:	4a08      	ldr	r2, [pc, #32]	; (e944 <le_adv_ext_report+0xc8>)
    e924:	210a      	movs	r1, #10
    e926:	a808      	add	r0, sp, #32
    e928:	f7f4 fb22 	bl	2f70 <snprintk>
    e92c:	e7d0      	b.n	e8d0 <le_adv_ext_report+0x54>
    e92e:	bf00      	nop
    e930:	000316b4 	.word	0x000316b4
    e934:	000316e4 	.word	0x000316e4
    e938:	000316bc 	.word	0x000316bc
    e93c:	000316c4 	.word	0x000316c4
    e940:	000316d0 	.word	0x000316d0
    e944:	000316dc 	.word	0x000316dc

0000e948 <le_adv_ext_1M_report>:
{
    e948:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    e94a:	2301      	movs	r3, #1
    e94c:	f7ff ff96 	bl	e87c <le_adv_ext_report>
    e950:	bd08      	pop	{r3, pc}

0000e952 <le_adv_ext_coded_report>:
{
    e952:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    e954:	2304      	movs	r3, #4
    e956:	f7ff ff91 	bl	e87c <le_adv_ext_report>
    e95a:	bd08      	pop	{r3, pc}

0000e95c <le_scan_req_received>:
{
    e95c:	b570      	push	{r4, r5, r6, lr}
    e95e:	b092      	sub	sp, #72	; 0x48
    e960:	4604      	mov	r4, r0
    e962:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e964:	4b33      	ldr	r3, [pc, #204]	; (ea34 <le_scan_req_received+0xd8>)
    e966:	e9d3 2300 	ldrd	r2, r3, [r3]
    e96a:	2200      	movs	r2, #0
    e96c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e970:	4313      	orrs	r3, r2
    e972:	d007      	beq.n	e984 <le_scan_req_received+0x28>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    e974:	4b30      	ldr	r3, [pc, #192]	; (ea38 <le_scan_req_received+0xdc>)
    e976:	e9d3 2300 	ldrd	r2, r3, [r3]
    e97a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    e97e:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e980:	4313      	orrs	r3, r2
    e982:	d146      	bne.n	ea12 <le_scan_req_received+0xb6>
		addr.type = adv->tx_addr;
    e984:	4621      	mov	r1, r4
    e986:	f811 3b02 	ldrb.w	r3, [r1], #2
    e98a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e98e:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    e992:	2206      	movs	r2, #6
    e994:	f10d 0019 	add.w	r0, sp, #25
    e998:	f7f1 fc92 	bl	2c0 <memcpy>
	switch (addr->type) {
    e99c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e9a0:	2b03      	cmp	r3, #3
    e9a2:	d830      	bhi.n	ea06 <le_scan_req_received+0xaa>
    e9a4:	e8df f003 	tbb	[pc, r3]
    e9a8:	2a252002 	.word	0x2a252002
		strcpy(type, "public");
    e9ac:	4923      	ldr	r1, [pc, #140]	; (ea3c <le_scan_req_received+0xe0>)
    e9ae:	a808      	add	r0, sp, #32
    e9b0:	f01c f8ee 	bl	2ab90 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    e9b4:	f89d 301e 	ldrb.w	r3, [sp, #30]
    e9b8:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e9bc:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    e9c0:	f89d 001b 	ldrb.w	r0, [sp, #27]
    e9c4:	f89d 401a 	ldrb.w	r4, [sp, #26]
    e9c8:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e9cc:	ae08      	add	r6, sp, #32
    e9ce:	9605      	str	r6, [sp, #20]
    e9d0:	9504      	str	r5, [sp, #16]
    e9d2:	9403      	str	r4, [sp, #12]
    e9d4:	9002      	str	r0, [sp, #8]
    e9d6:	9101      	str	r1, [sp, #4]
    e9d8:	9200      	str	r2, [sp, #0]
    e9da:	4a19      	ldr	r2, [pc, #100]	; (ea40 <le_scan_req_received+0xe4>)
    e9dc:	211b      	movs	r1, #27
    e9de:	a80b      	add	r0, sp, #44	; 0x2c
    e9e0:	f7f4 fac6 	bl	2f70 <snprintk>
}
    e9e4:	b012      	add	sp, #72	; 0x48
    e9e6:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    e9e8:	4916      	ldr	r1, [pc, #88]	; (ea44 <le_scan_req_received+0xe8>)
    e9ea:	a808      	add	r0, sp, #32
    e9ec:	f01c f8d0 	bl	2ab90 <strcpy>
    e9f0:	e7e0      	b.n	e9b4 <le_scan_req_received+0x58>
		strcpy(type, "public id");
    e9f2:	4915      	ldr	r1, [pc, #84]	; (ea48 <le_scan_req_received+0xec>)
    e9f4:	a808      	add	r0, sp, #32
    e9f6:	f01c f8cb 	bl	2ab90 <strcpy>
    e9fa:	e7db      	b.n	e9b4 <le_scan_req_received+0x58>
		strcpy(type, "random id");
    e9fc:	4913      	ldr	r1, [pc, #76]	; (ea4c <le_scan_req_received+0xf0>)
    e9fe:	a808      	add	r0, sp, #32
    ea00:	f01c f8c6 	bl	2ab90 <strcpy>
    ea04:	e7d6      	b.n	e9b4 <le_scan_req_received+0x58>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    ea06:	4a12      	ldr	r2, [pc, #72]	; (ea50 <le_scan_req_received+0xf4>)
    ea08:	210a      	movs	r1, #10
    ea0a:	a808      	add	r0, sp, #32
    ea0c:	f7f4 fab0 	bl	2f70 <snprintk>
    ea10:	e7d0      	b.n	e9b4 <le_scan_req_received+0x58>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    ea12:	2208      	movs	r2, #8
    ea14:	2113      	movs	r1, #19
    ea16:	f7fe fd41 	bl	d49c <meta_evt>
	sep->handle = 0;
    ea1a:	2300      	movs	r3, #0
    ea1c:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    ea1e:	4621      	mov	r1, r4
    ea20:	f811 3b02 	ldrb.w	r3, [r1], #2
    ea24:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ea28:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    ea2a:	2206      	movs	r2, #6
    ea2c:	3002      	adds	r0, #2
    ea2e:	f7f1 fc47 	bl	2c0 <memcpy>
    ea32:	e7d7      	b.n	e9e4 <le_scan_req_received+0x88>
    ea34:	2000c158 	.word	0x2000c158
    ea38:	2000c160 	.word	0x2000c160
    ea3c:	000316b4 	.word	0x000316b4
    ea40:	000316e4 	.word	0x000316e4
    ea44:	000316bc 	.word	0x000316bc
    ea48:	000316c4 	.word	0x000316c4
    ea4c:	000316d0 	.word	0x000316d0
    ea50:	000316dc 	.word	0x000316dc

0000ea54 <encode_control>:
{
    ea54:	b510      	push	{r4, lr}
    ea56:	460c      	mov	r4, r1
	handle = node_rx->hdr.handle;
    ea58:	88c1      	ldrh	r1, [r0, #6]
	switch (node_rx->hdr.type) {
    ea5a:	7903      	ldrb	r3, [r0, #4]
    ea5c:	3b02      	subs	r3, #2
    ea5e:	2b0a      	cmp	r3, #10
    ea60:	d837      	bhi.n	ead2 <encode_control+0x7e>
    ea62:	e8df f003 	tbb	[pc, r3]
    ea66:	0b06      	.short	0x0b06
    ea68:	1e1a1510 	.word	0x1e1a1510
    ea6c:	2e2a2622 	.word	0x2e2a2622
    ea70:	32          	.byte	0x32
    ea71:	00          	.byte	0x00
		le_advertising_report(pdu_data, b, buf);
    ea72:	4601      	mov	r1, r0
    ea74:	4620      	mov	r0, r4
    ea76:	f7ff fdcd 	bl	e614 <le_advertising_report>
		break;
    ea7a:	bd10      	pop	{r4, pc}
		le_adv_ext_1M_report(pdu_data, b, buf);
    ea7c:	4601      	mov	r1, r0
    ea7e:	4620      	mov	r0, r4
    ea80:	f7ff ff62 	bl	e948 <le_adv_ext_1M_report>
		break;
    ea84:	bd10      	pop	{r4, pc}
		le_adv_ext_coded_report(pdu_data, b, buf);
    ea86:	4601      	mov	r1, r0
    ea88:	4620      	mov	r0, r4
    ea8a:	f7ff ff62 	bl	e952 <le_adv_ext_coded_report>
		break;
    ea8e:	bd10      	pop	{r4, pc}
		le_scan_req_received(pdu_data, b, buf);
    ea90:	4601      	mov	r1, r0
    ea92:	4620      	mov	r0, r4
    ea94:	f7ff ff62 	bl	e95c <le_scan_req_received>
		break;
    ea98:	bd10      	pop	{r4, pc}
		le_conn_complete(pdu_data, handle, buf);
    ea9a:	4620      	mov	r0, r4
    ea9c:	f7f7 f99e 	bl	5ddc <le_conn_complete>
		break;
    eaa0:	bd10      	pop	{r4, pc}
		disconn_complete(pdu_data, handle, buf);
    eaa2:	4620      	mov	r0, r4
    eaa4:	f7fe fd32 	bl	d50c <disconn_complete>
		break;
    eaa8:	bd10      	pop	{r4, pc}
		le_conn_update_complete(pdu_data, handle, buf);
    eaaa:	4620      	mov	r0, r4
    eaac:	f7f6 f832 	bl	4b14 <le_conn_update_complete>
		break;
    eab0:	bd10      	pop	{r4, pc}
		enc_refresh_complete(pdu_data, handle, buf);
    eab2:	4620      	mov	r0, r4
    eab4:	f7fe fd52 	bl	d55c <enc_refresh_complete>
		break;
    eab8:	bd10      	pop	{r4, pc}
		auth_payload_timeout_exp(pdu_data, handle, buf);
    eaba:	4620      	mov	r0, r4
    eabc:	f7fe fd6c 	bl	d598 <auth_payload_timeout_exp>
		break;
    eac0:	bd10      	pop	{r4, pc}
		le_chan_sel_algo(pdu_data, handle, buf);
    eac2:	4620      	mov	r0, r4
    eac4:	f7fe fcfe 	bl	d4c4 <le_chan_sel_algo>
		break;
    eac8:	bd10      	pop	{r4, pc}
		le_phy_upd_complete(pdu_data, handle, buf);
    eaca:	4620      	mov	r0, r4
    eacc:	f7ff faa6 	bl	e01c <le_phy_upd_complete>
		return;
    ead0:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    ead2:	4040      	eors	r0, r0
    ead4:	f380 8811 	msr	BASEPRI, r0
    ead8:	f04f 0004 	mov.w	r0, #4
    eadc:	df02      	svc	2
	...

0000eae0 <hci_cmd_handle>:
{
    eae0:	b510      	push	{r4, lr}
    eae2:	b082      	sub	sp, #8
	struct net_buf *evt = NULL;
    eae4:	2300      	movs	r3, #0
    eae6:	9301      	str	r3, [sp, #4]
	if (cmd->len < sizeof(*chdr)) {
    eae8:	8983      	ldrh	r3, [r0, #12]
    eaea:	2b02      	cmp	r3, #2
    eaec:	d94a      	bls.n	eb84 <hci_cmd_handle+0xa4>
	chdr = (void *)cmd->data;
    eaee:	6882      	ldr	r2, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    eaf0:	8814      	ldrh	r4, [r2, #0]
    eaf2:	4926      	ldr	r1, [pc, #152]	; (eb8c <hci_cmd_handle+0xac>)
    eaf4:	800c      	strh	r4, [r1, #0]
	if (cmd->len < chdr->param_len) {
    eaf6:	7892      	ldrb	r2, [r2, #2]
    eaf8:	4293      	cmp	r3, r2
    eafa:	d345      	bcc.n	eb88 <hci_cmd_handle+0xa8>
    eafc:	4604      	mov	r4, r0
	net_buf_pull(cmd, sizeof(*chdr));
    eafe:	2103      	movs	r1, #3
    eb00:	3008      	adds	r0, #8
    eb02:	f00c f974 	bl	1adee <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    eb06:	4b21      	ldr	r3, [pc, #132]	; (eb8c <hci_cmd_handle+0xac>)
    eb08:	881b      	ldrh	r3, [r3, #0]
    eb0a:	f3c3 0009 	ubfx	r0, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    eb0e:	0a9b      	lsrs	r3, r3, #10
    eb10:	2b04      	cmp	r3, #4
    eb12:	d01c      	beq.n	eb4e <hci_cmd_handle+0x6e>
    eb14:	d908      	bls.n	eb28 <hci_cmd_handle+0x48>
    eb16:	2b08      	cmp	r3, #8
    eb18:	d023      	beq.n	eb62 <hci_cmd_handle+0x82>
    eb1a:	2b3f      	cmp	r3, #63	; 0x3f
    eb1c:	d026      	beq.n	eb6c <hci_cmd_handle+0x8c>
    eb1e:	2b05      	cmp	r3, #5
    eb20:	d01a      	beq.n	eb58 <hci_cmd_handle+0x78>
		err = -EINVAL;
    eb22:	f06f 0015 	mvn.w	r0, #21
    eb26:	e00c      	b.n	eb42 <hci_cmd_handle+0x62>
	switch (BT_OGF(_opcode)) {
    eb28:	2b01      	cmp	r3, #1
    eb2a:	d006      	beq.n	eb3a <hci_cmd_handle+0x5a>
    eb2c:	2b03      	cmp	r3, #3
    eb2e:	d1f8      	bne.n	eb22 <hci_cmd_handle+0x42>
		err = ctrl_bb_cmd_handle(ocf, cmd, &evt);
    eb30:	aa01      	add	r2, sp, #4
    eb32:	4621      	mov	r1, r4
    eb34:	f7fe fe29 	bl	d78a <ctrl_bb_cmd_handle>
		break;
    eb38:	e003      	b.n	eb42 <hci_cmd_handle+0x62>
		err = link_control_cmd_handle(ocf, cmd, &evt);
    eb3a:	aa01      	add	r2, sp, #4
    eb3c:	4621      	mov	r1, r4
    eb3e:	f7fe fd9b 	bl	d678 <link_control_cmd_handle>
	if (err == -EINVAL) {
    eb42:	f110 0f16 	cmn.w	r0, #22
    eb46:	d016      	beq.n	eb76 <hci_cmd_handle+0x96>
	return evt;
    eb48:	9801      	ldr	r0, [sp, #4]
}
    eb4a:	b002      	add	sp, #8
    eb4c:	bd10      	pop	{r4, pc}
		err = info_cmd_handle(ocf, cmd, &evt);
    eb4e:	aa01      	add	r2, sp, #4
    eb50:	4621      	mov	r1, r4
    eb52:	f7fe ffde 	bl	db12 <info_cmd_handle>
		break;
    eb56:	e7f4      	b.n	eb42 <hci_cmd_handle+0x62>
		err = status_cmd_handle(ocf, cmd, &evt);
    eb58:	aa01      	add	r2, sp, #4
    eb5a:	4621      	mov	r1, r4
    eb5c:	f7fe fbcf 	bl	d2fe <status_cmd_handle>
		break;
    eb60:	e7ef      	b.n	eb42 <hci_cmd_handle+0x62>
		err = controller_cmd_handle(ocf, cmd, &evt);
    eb62:	aa01      	add	r2, sp, #4
    eb64:	4621      	mov	r1, r4
    eb66:	f7ff fb8c 	bl	e282 <controller_cmd_handle>
		break;
    eb6a:	e7ea      	b.n	eb42 <hci_cmd_handle+0x62>
		err = vendor_cmd_handle(ocf, cmd, &evt);
    eb6c:	aa01      	add	r2, sp, #4
    eb6e:	4621      	mov	r1, r4
    eb70:	f7ff f876 	bl	dc60 <vendor_cmd_handle>
		break;
    eb74:	e7e5      	b.n	eb42 <hci_cmd_handle+0x62>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    eb76:	2101      	movs	r1, #1
    eb78:	a801      	add	r0, sp, #4
    eb7a:	f7fe fbf5 	bl	d368 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    eb7e:	2301      	movs	r3, #1
    eb80:	7003      	strb	r3, [r0, #0]
    eb82:	e7e1      	b.n	eb48 <hci_cmd_handle+0x68>
		return NULL;
    eb84:	2000      	movs	r0, #0
    eb86:	e7e0      	b.n	eb4a <hci_cmd_handle+0x6a>
		return NULL;
    eb88:	2000      	movs	r0, #0
    eb8a:	e7de      	b.n	eb4a <hci_cmd_handle+0x6a>
    eb8c:	20001020 	.word	0x20001020

0000eb90 <hci_acl_handle>:
{
    eb90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    eb94:	2300      	movs	r3, #0
    eb96:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    eb98:	8983      	ldrh	r3, [r0, #12]
    eb9a:	2b03      	cmp	r3, #3
    eb9c:	d93e      	bls.n	ec1c <hci_acl_handle+0x8c>
    eb9e:	4689      	mov	r9, r1
    eba0:	4604      	mov	r4, r0
	acl = (void *)buf->data;
    eba2:	f850 3f08 	ldr.w	r3, [r0, #8]!
	len = sys_le16_to_cpu(acl->len);
    eba6:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    ebaa:	881e      	ldrh	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    ebac:	2104      	movs	r1, #4
    ebae:	f00c f91e 	bl	1adee <net_buf_simple_pull>
	if (buf->len < len) {
    ebb2:	89a3      	ldrh	r3, [r4, #12]
    ebb4:	4598      	cmp	r8, r3
    ebb6:	d835      	bhi.n	ec24 <hci_acl_handle+0x94>
	flags = bt_acl_flags(handle);
    ebb8:	0b37      	lsrs	r7, r6, #12
	handle = bt_acl_handle(handle);
    ebba:	f3c6 060b 	ubfx	r6, r6, #0, #12
	radio_pdu_node_tx = radio_tx_mem_acquire();
    ebbe:	f009 ff1f 	bl	18a00 <radio_tx_mem_acquire>
	if (!radio_pdu_node_tx) {
    ebc2:	4605      	mov	r5, r0
    ebc4:	b140      	cbz	r0, ebd8 <hci_acl_handle+0x48>
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    ebc6:	b177      	cbz	r7, ebe6 <hci_acl_handle+0x56>
    ebc8:	2f02      	cmp	r7, #2
    ebca:	d00c      	beq.n	ebe6 <hci_acl_handle+0x56>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ebcc:	7903      	ldrb	r3, [r0, #4]
    ebce:	2201      	movs	r2, #1
    ebd0:	f362 0301 	bfi	r3, r2, #0, #2
    ebd4:	7103      	strb	r3, [r0, #4]
    ebd6:	e00b      	b.n	ebf0 <hci_acl_handle+0x60>
		data_buf_overflow(evt);
    ebd8:	4648      	mov	r0, r9
    ebda:	f7ff fcbf 	bl	e55c <data_buf_overflow>
		return -ENOBUFS;
    ebde:	f06f 0068 	mvn.w	r0, #104	; 0x68
    ebe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    ebe6:	792b      	ldrb	r3, [r5, #4]
    ebe8:	2202      	movs	r2, #2
    ebea:	f362 0301 	bfi	r3, r2, #0, #2
    ebee:	712b      	strb	r3, [r5, #4]
	pdu_data->len = len;
    ebf0:	f885 8005 	strb.w	r8, [r5, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    ebf4:	4642      	mov	r2, r8
    ebf6:	68a1      	ldr	r1, [r4, #8]
    ebf8:	1de8      	adds	r0, r5, #7
    ebfa:	f7f1 fb61 	bl	2c0 <memcpy>
	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    ebfe:	4629      	mov	r1, r5
    ec00:	4630      	mov	r0, r6
    ec02:	f009 ff0d 	bl	18a20 <radio_tx_mem_enqueue>
    ec06:	b910      	cbnz	r0, ec0e <hci_acl_handle+0x7e>
	return 0;
    ec08:	2000      	movs	r0, #0
}
    ec0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		radio_tx_mem_release(radio_pdu_node_tx);
    ec0e:	4628      	mov	r0, r5
    ec10:	f009 fefe 	bl	18a10 <radio_tx_mem_release>
		return -EINVAL;
    ec14:	f06f 0015 	mvn.w	r0, #21
    ec18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    ec1c:	f06f 0015 	mvn.w	r0, #21
    ec20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    ec24:	f06f 0015 	mvn.w	r0, #21
    ec28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ec2c <hci_acl_encode>:
{
    ec2c:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
    ec2e:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
    ec30:	7a03      	ldrb	r3, [r0, #8]
    ec32:	f003 0303 	and.w	r3, r3, #3
    ec36:	3b01      	subs	r3, #1
    ec38:	2b01      	cmp	r3, #1
    ec3a:	d81d      	bhi.n	ec78 <hci_acl_encode+0x4c>
    ec3c:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    ec3e:	f101 0508 	add.w	r5, r1, #8
    ec42:	2104      	movs	r1, #4
    ec44:	4628      	mov	r0, r5
    ec46:	f00c f885 	bl	1ad54 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    ec4a:	7a23      	ldrb	r3, [r4, #8]
    ec4c:	f003 0303 	and.w	r3, r3, #3
    ec50:	2b02      	cmp	r3, #2
    ec52:	d00e      	beq.n	ec72 <hci_acl_encode+0x46>
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    ec54:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    ec58:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    ec5a:	7a63      	ldrb	r3, [r4, #9]
    ec5c:	8043      	strh	r3, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    ec5e:	7a61      	ldrb	r1, [r4, #9]
    ec60:	4628      	mov	r0, r5
    ec62:	f00c f877 	bl	1ad54 <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    ec66:	7a62      	ldrb	r2, [r4, #9]
    ec68:	f104 010b 	add.w	r1, r4, #11
    ec6c:	f7f1 fb28 	bl	2c0 <memcpy>
}
    ec70:	bd70      	pop	{r4, r5, r6, pc}
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    ec72:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    ec76:	e7ef      	b.n	ec58 <hci_acl_encode+0x2c>
		LL_ASSERT(0);
    ec78:	4040      	eors	r0, r0
    ec7a:	f380 8811 	msr	BASEPRI, r0
    ec7e:	f04f 0004 	mov.w	r0, #4
    ec82:	df02      	svc	2

0000ec84 <hci_evt_encode>:
{
    ec84:	b510      	push	{r4, lr}
	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    ec86:	f100 0408 	add.w	r4, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    ec8a:	7903      	ldrb	r3, [r0, #4]
    ec8c:	2b01      	cmp	r3, #1
    ec8e:	d004      	beq.n	ec9a <hci_evt_encode+0x16>
		encode_control(node_rx, pdu_data, buf);
    ec90:	460a      	mov	r2, r1
    ec92:	4621      	mov	r1, r4
    ec94:	f7ff fede 	bl	ea54 <encode_control>
    ec98:	bd10      	pop	{r4, pc}
		encode_data_ctrl(node_rx, pdu_data, buf);
    ec9a:	460a      	mov	r2, r1
    ec9c:	4621      	mov	r1, r4
    ec9e:	f7ff fc7d 	bl	e59c <encode_data_ctrl>
    eca2:	bd10      	pop	{r4, pc}

0000eca4 <hci_num_cmplt_encode>:
{
    eca4:	b570      	push	{r4, r5, r6, lr}
    eca6:	4606      	mov	r6, r0
    eca8:	460d      	mov	r5, r1
    ecaa:	4614      	mov	r4, r2
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    ecac:	2205      	movs	r2, #5
    ecae:	2113      	movs	r1, #19
    ecb0:	f7fe fb28 	bl	d304 <evt_create>
	ep = net_buf_add(buf, len);
    ecb4:	2105      	movs	r1, #5
    ecb6:	f106 0008 	add.w	r0, r6, #8
    ecba:	f00c f84b 	bl	1ad54 <net_buf_simple_add>
	ep->num_handles = num_handles;
    ecbe:	2301      	movs	r3, #1
    ecc0:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
    ecc2:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    ecc6:	f8a0 4003 	strh.w	r4, [r0, #3]
    ecca:	bd70      	pop	{r4, r5, r6, pc}

0000eccc <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    eccc:	7903      	ldrb	r3, [r0, #4]
    ecce:	2b01      	cmp	r3, #1
    ecd0:	d011      	beq.n	ecf6 <hci_get_class+0x2a>
		switch (node_rx->hdr.type) {
    ecd2:	3b02      	subs	r3, #2
    ecd4:	2b0a      	cmp	r3, #10
    ecd6:	d80b      	bhi.n	ecf0 <hci_get_class+0x24>
    ecd8:	e8df f003 	tbb	[pc, r3]
    ecdc:	06060606 	.word	0x06060606
    ece0:	08080816 	.word	0x08080816
    ece4:	0808      	.short	0x0808
    ece6:	08          	.byte	0x08
    ece7:	00          	.byte	0x00
			return HCI_CLASS_EVT_DISCARDABLE;
    ece8:	2001      	movs	r0, #1
    ecea:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    ecec:	2002      	movs	r0, #2
    ecee:	4770      	bx	lr
			return -1;
    ecf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ecf4:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    ecf6:	7a03      	ldrb	r3, [r0, #8]
    ecf8:	f003 0303 	and.w	r3, r3, #3
    ecfc:	2b03      	cmp	r3, #3
    ecfe:	d001      	beq.n	ed04 <hci_get_class+0x38>
		return HCI_CLASS_ACL_DATA;
    ed00:	2003      	movs	r0, #3
}
    ed02:	4770      	bx	lr
		return HCI_CLASS_EVT_CONNECTION;
    ed04:	2002      	movs	r0, #2
    ed06:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    ed08:	2000      	movs	r0, #0
    ed0a:	4770      	bx	lr

0000ed0c <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    ed0c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    ed0e:	4802      	ldr	r0, [pc, #8]	; (ed18 <_hci_driver_init+0xc>)
    ed10:	f7f7 fcec 	bl	66ec <bt_hci_driver_register>

	return 0;
}
    ed14:	2000      	movs	r0, #0
    ed16:	bd08      	pop	{r3, pc}
    ed18:	00031730 	.word	0x00031730

0000ed1c <acl_handle>:
{
    ed1c:	b510      	push	{r4, lr}
    ed1e:	b082      	sub	sp, #8
	err = hci_acl_handle(buf, &evt);
    ed20:	a901      	add	r1, sp, #4
    ed22:	f7ff ff35 	bl	eb90 <hci_acl_handle>
    ed26:	4604      	mov	r4, r0
	if (evt) {
    ed28:	9801      	ldr	r0, [sp, #4]
    ed2a:	b108      	cbz	r0, ed30 <acl_handle+0x14>
		bt_recv_prio(evt);
    ed2c:	f7f7 fc8c 	bl	6648 <bt_recv_prio>
}
    ed30:	4620      	mov	r0, r4
    ed32:	b002      	add	sp, #8
    ed34:	bd10      	pop	{r4, pc}

0000ed36 <cmd_handle>:
{
    ed36:	b508      	push	{r3, lr}
	evt = hci_cmd_handle(buf);
    ed38:	f7ff fed2 	bl	eae0 <hci_cmd_handle>
	if (evt) {
    ed3c:	b108      	cbz	r0, ed42 <cmd_handle+0xc>
		bt_recv_prio(evt);
    ed3e:	f7f7 fc83 	bl	6648 <bt_recv_prio>
}
    ed42:	2000      	movs	r0, #0
    ed44:	bd08      	pop	{r3, pc}

0000ed46 <hci_driver_send>:
{
    ed46:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
    ed48:	8983      	ldrh	r3, [r0, #12]
    ed4a:	b1cb      	cbz	r3, ed80 <hci_driver_send+0x3a>
    ed4c:	4604      	mov	r4, r0
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    ed4e:	f100 0310 	add.w	r3, r0, #16
    ed52:	89c2      	ldrh	r2, [r0, #14]
    ed54:	4413      	add	r3, r2
    ed56:	3303      	adds	r3, #3
    ed58:	f023 0303 	bic.w	r3, r3, #3
	return *(u8_t *)net_buf_user_data(buf);
    ed5c:	781b      	ldrb	r3, [r3, #0]
	switch (type) {
    ed5e:	b13b      	cbz	r3, ed70 <hci_driver_send+0x2a>
    ed60:	2b02      	cmp	r3, #2
    ed62:	d110      	bne.n	ed86 <hci_driver_send+0x40>
		err = acl_handle(buf);
    ed64:	f7ff ffda 	bl	ed1c <acl_handle>
    ed68:	4605      	mov	r5, r0
	if (!err) {
    ed6a:	b12d      	cbz	r5, ed78 <hci_driver_send+0x32>
}
    ed6c:	4628      	mov	r0, r5
    ed6e:	bd38      	pop	{r3, r4, r5, pc}
		err = cmd_handle(buf);
    ed70:	f7ff ffe1 	bl	ed36 <cmd_handle>
    ed74:	4605      	mov	r5, r0
		break;
    ed76:	e7f8      	b.n	ed6a <hci_driver_send+0x24>
		net_buf_unref(buf);
    ed78:	4620      	mov	r0, r4
    ed7a:	f00b ff9f 	bl	1acbc <net_buf_unref>
    ed7e:	e7f5      	b.n	ed6c <hci_driver_send+0x26>
		return -EINVAL;
    ed80:	f06f 0515 	mvn.w	r5, #21
    ed84:	e7f2      	b.n	ed6c <hci_driver_send+0x26>
		return -EINVAL;
    ed86:	f06f 0515 	mvn.w	r5, #21
    ed8a:	e7ef      	b.n	ed6c <hci_driver_send+0x26>

0000ed8c <prio_recv_thread>:
{
    ed8c:	b530      	push	{r4, r5, lr}
    ed8e:	b087      	sub	sp, #28
    ed90:	e00f      	b.n	edb2 <prio_recv_thread+0x26>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ed92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ed96:	2001      	movs	r0, #1
    ed98:	f7f7 fe0c 	bl	69b4 <bt_buf_get_rx>
    ed9c:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    ed9e:	4622      	mov	r2, r4
    eda0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    eda4:	f7ff ff7e 	bl	eca4 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    eda8:	4628      	mov	r0, r5
    edaa:	f7f7 fc4d 	bl	6648 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    edae:	f01a f977 	bl	290a0 <_impl_k_yield>
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    edb2:	f10d 0112 	add.w	r1, sp, #18
    edb6:	a805      	add	r0, sp, #20
    edb8:	f009 fd22 	bl	18800 <radio_rx_get>
    edbc:	4604      	mov	r4, r0
    edbe:	2800      	cmp	r0, #0
    edc0:	d1e7      	bne.n	ed92 <prio_recv_thread+0x6>
		if (node_rx) {
    edc2:	9b05      	ldr	r3, [sp, #20]
    edc4:	b133      	cbz	r3, edd4 <prio_recv_thread+0x48>
			radio_rx_dequeue();
    edc6:	f00a fa5b 	bl	19280 <radio_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    edca:	9905      	ldr	r1, [sp, #20]
    edcc:	481a      	ldr	r0, [pc, #104]	; (ee38 <prio_recv_thread+0xac>)
    edce:	f019 ff29 	bl	28c24 <k_queue_append>
    edd2:	e7ee      	b.n	edb2 <prio_recv_thread+0x26>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    edd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    edd8:	4818      	ldr	r0, [pc, #96]	; (ee3c <prio_recv_thread+0xb0>)
    edda:	f01a facd 	bl	29378 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    edde:	f01a fb17 	bl	29410 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    ede2:	4b17      	ldr	r3, [pc, #92]	; (ee40 <prio_recv_thread+0xb4>)
    ede4:	681b      	ldr	r3, [r3, #0]
    ede6:	1ac3      	subs	r3, r0, r3
    ede8:	f241 3288 	movw	r2, #5000	; 0x1388
    edec:	4293      	cmp	r3, r2
    edee:	d9e0      	bls.n	edb2 <prio_recv_thread+0x26>
	for (i = 0; i < size; i++) {
    edf0:	2200      	movs	r2, #0
	size_t unused = 0;
    edf2:	4613      	mov	r3, r2
    edf4:	e001      	b.n	edfa <prio_recv_thread+0x6e>
			unused++;
    edf6:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    edf8:	3201      	adds	r2, #1
    edfa:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
    edfe:	d203      	bcs.n	ee08 <prio_recv_thread+0x7c>
		if ((unsigned char)stack[i] == 0xaa) {
    ee00:	4910      	ldr	r1, [pc, #64]	; (ee44 <prio_recv_thread+0xb8>)
    ee02:	5c89      	ldrb	r1, [r1, r2]
    ee04:	29aa      	cmp	r1, #170	; 0xaa
    ee06:	d0f6      	beq.n	edf6 <prio_recv_thread+0x6a>
	pcnt = ((size - unused) * 100) / size;
    ee08:	f5c3 71e0 	rsb	r1, r3, #448	; 0x1c0
    ee0c:	2264      	movs	r2, #100	; 0x64
    ee0e:	fb02 f201 	mul.w	r2, r2, r1
    ee12:	0992      	lsrs	r2, r2, #6
    ee14:	480c      	ldr	r0, [pc, #48]	; (ee48 <prio_recv_thread+0xbc>)
    ee16:	fba0 0202 	umull	r0, r2, r0, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    ee1a:	9202      	str	r2, [sp, #8]
    ee1c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    ee20:	9201      	str	r2, [sp, #4]
    ee22:	9100      	str	r1, [sp, #0]
    ee24:	4909      	ldr	r1, [pc, #36]	; (ee4c <prio_recv_thread+0xc0>)
    ee26:	480a      	ldr	r0, [pc, #40]	; (ee50 <prio_recv_thread+0xc4>)
    ee28:	f7f4 f894 	bl	2f54 <printk>
    ee2c:	f01a faf0 	bl	29410 <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
    ee30:	4b03      	ldr	r3, [pc, #12]	; (ee40 <prio_recv_thread+0xb4>)
    ee32:	6018      	str	r0, [r3, #0]
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    ee34:	e7bd      	b.n	edb2 <prio_recv_thread+0x26>
    ee36:	bf00      	nop
    ee38:	2000d6d8 	.word	0x2000d6d8
    ee3c:	2000d668 	.word	0x2000d668
    ee40:	200010b8 	.word	0x200010b8
    ee44:	20004780 	.word	0x20004780
    ee48:	2492492d 	.word	0x2492492d
    ee4c:	00031740 	.word	0x00031740
    ee50:	000314a8 	.word	0x000314a8

0000ee54 <hci_driver_open>:
{
    ee54:	b530      	push	{r4, r5, lr}
    ee56:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    ee58:	4814      	ldr	r0, [pc, #80]	; (eeac <hci_driver_open+0x58>)
    ee5a:	f00a fb39 	bl	194d0 <ll_init>
	if (err) {
    ee5e:	4605      	mov	r5, r0
    ee60:	b110      	cbz	r0, ee68 <hci_driver_open+0x14>
}
    ee62:	4628      	mov	r0, r5
    ee64:	b007      	add	sp, #28
    ee66:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
    ee68:	f7f6 fc66 	bl	5738 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    ee6c:	2400      	movs	r4, #0
    ee6e:	9405      	str	r4, [sp, #20]
    ee70:	9404      	str	r4, [sp, #16]
    ee72:	f06f 0309 	mvn.w	r3, #9
    ee76:	9303      	str	r3, [sp, #12]
    ee78:	9402      	str	r4, [sp, #8]
    ee7a:	9401      	str	r4, [sp, #4]
    ee7c:	9400      	str	r4, [sp, #0]
    ee7e:	4b0c      	ldr	r3, [pc, #48]	; (eeb0 <hci_driver_open+0x5c>)
    ee80:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    ee84:	490b      	ldr	r1, [pc, #44]	; (eeb4 <hci_driver_open+0x60>)
    ee86:	480c      	ldr	r0, [pc, #48]	; (eeb8 <hci_driver_open+0x64>)
    ee88:	f01a fce2 	bl	29850 <_impl_k_thread_create>
    ee8c:	9405      	str	r4, [sp, #20]
    ee8e:	9404      	str	r4, [sp, #16]
    ee90:	f06f 0307 	mvn.w	r3, #7
    ee94:	9303      	str	r3, [sp, #12]
    ee96:	9402      	str	r4, [sp, #8]
    ee98:	9401      	str	r4, [sp, #4]
    ee9a:	9400      	str	r4, [sp, #0]
    ee9c:	4b07      	ldr	r3, [pc, #28]	; (eebc <hci_driver_open+0x68>)
    ee9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    eea2:	4907      	ldr	r1, [pc, #28]	; (eec0 <hci_driver_open+0x6c>)
    eea4:	4807      	ldr	r0, [pc, #28]	; (eec4 <hci_driver_open+0x70>)
    eea6:	f01a fcd3 	bl	29850 <_impl_k_thread_create>
	return 0;
    eeaa:	e7da      	b.n	ee62 <hci_driver_open+0xe>
    eeac:	2000d668 	.word	0x2000d668
    eeb0:	0000ed8d 	.word	0x0000ed8d
    eeb4:	20004780 	.word	0x20004780
    eeb8:	200030dc 	.word	0x200030dc
    eebc:	0000eec9 	.word	0x0000eec9
    eec0:	20004940 	.word	0x20004940
    eec4:	20002fa8 	.word	0x20002fa8

0000eec8 <recv_thread>:
{
    eec8:	b510      	push	{r4, lr}
    eeca:	b086      	sub	sp, #24
    eecc:	e029      	b.n	ef22 <recv_thread+0x5a>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    eece:	2801      	cmp	r0, #1
    eed0:	d042      	beq.n	ef58 <recv_thread+0x90>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    eed2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    eed6:	2001      	movs	r0, #1
    eed8:	f7f7 fd6c 	bl	69b4 <bt_buf_get_rx>
    eedc:	4604      	mov	r4, r0
		if (buf) {
    eede:	b11c      	cbz	r4, eee8 <recv_thread+0x20>
			hci_evt_encode(node_rx, buf);
    eee0:	4621      	mov	r1, r4
    eee2:	9805      	ldr	r0, [sp, #20]
    eee4:	f7ff fece 	bl	ec84 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    eee8:	2100      	movs	r1, #0
    eeea:	9b05      	ldr	r3, [sp, #20]
    eeec:	88d8      	ldrh	r0, [r3, #6]
    eeee:	f009 fd4b 	bl	18988 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    eef2:	a806      	add	r0, sp, #24
    eef4:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    eef8:	2200      	movs	r2, #0
    eefa:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
    eefc:	f009 fcc0 	bl	18880 <radio_rx_mem_release>
		if (buf) {
    ef00:	b124      	cbz	r4, ef0c <recv_thread+0x44>
			if (buf->len) {
    ef02:	89a3      	ldrh	r3, [r4, #12]
    ef04:	b3ab      	cbz	r3, ef72 <recv_thread+0xaa>
				bt_recv(buf);
    ef06:	4620      	mov	r0, r4
    ef08:	f7f7 fb74 	bl	65f4 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    ef0c:	f01a f8c8 	bl	290a0 <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    ef10:	f01a fa7e 	bl	29410 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    ef14:	4b29      	ldr	r3, [pc, #164]	; (efbc <recv_thread+0xf4>)
    ef16:	681b      	ldr	r3, [r3, #0]
    ef18:	1ac0      	subs	r0, r0, r3
    ef1a:	f241 3388 	movw	r3, #5000	; 0x1388
    ef1e:	4298      	cmp	r0, r3
    ef20:	d82b      	bhi.n	ef7a <recv_thread+0xb2>
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    ef22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ef26:	4826      	ldr	r0, [pc, #152]	; (efc0 <recv_thread+0xf8>)
    ef28:	f019 fea4 	bl	28c74 <k_queue_get>
		if (node_rx && !buf) {
    ef2c:	b1f8      	cbz	r0, ef6e <recv_thread+0xa6>
    ef2e:	4604      	mov	r4, r0
	s8_t class = hci_get_class(node_rx);
    ef30:	f7ff fecc 	bl	eccc <hci_get_class>
    ef34:	9405      	str	r4, [sp, #20]
	switch (class) {
    ef36:	2800      	cmp	r0, #0
    ef38:	db13      	blt.n	ef62 <recv_thread+0x9a>
    ef3a:	2802      	cmp	r0, #2
    ef3c:	ddc7      	ble.n	eece <recv_thread+0x6>
    ef3e:	2803      	cmp	r0, #3
    ef40:	d10f      	bne.n	ef62 <recv_thread+0x9a>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    ef42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ef46:	2003      	movs	r0, #3
    ef48:	f7f7 fd34 	bl	69b4 <bt_buf_get_rx>
    ef4c:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    ef4e:	4601      	mov	r1, r0
    ef50:	9805      	ldr	r0, [sp, #20]
    ef52:	f7ff fe6b 	bl	ec2c <hci_acl_encode>
    ef56:	e7c7      	b.n	eee8 <recv_thread+0x20>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    ef58:	2100      	movs	r1, #0
    ef5a:	f7f7 fd2b 	bl	69b4 <bt_buf_get_rx>
    ef5e:	4604      	mov	r4, r0
    ef60:	e7bd      	b.n	eede <recv_thread+0x16>
		LL_ASSERT(0);
    ef62:	4040      	eors	r0, r0
    ef64:	f380 8811 	msr	BASEPRI, r0
    ef68:	f04f 0004 	mov.w	r0, #4
    ef6c:	df02      	svc	2
		struct net_buf *buf = NULL;
    ef6e:	2400      	movs	r4, #0
    ef70:	e7c6      	b.n	ef00 <recv_thread+0x38>
				net_buf_unref(buf);
    ef72:	4620      	mov	r0, r4
    ef74:	f00b fea2 	bl	1acbc <net_buf_unref>
    ef78:	e7c8      	b.n	ef0c <recv_thread+0x44>
	for (i = 0; i < size; i++) {
    ef7a:	2200      	movs	r2, #0
	size_t unused = 0;
    ef7c:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    ef7e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    ef82:	d206      	bcs.n	ef92 <recv_thread+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
    ef84:	490f      	ldr	r1, [pc, #60]	; (efc4 <recv_thread+0xfc>)
    ef86:	5c89      	ldrb	r1, [r1, r2]
    ef88:	29aa      	cmp	r1, #170	; 0xaa
    ef8a:	d102      	bne.n	ef92 <recv_thread+0xca>
			unused++;
    ef8c:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    ef8e:	3201      	adds	r2, #1
    ef90:	e7f5      	b.n	ef7e <recv_thread+0xb6>
	pcnt = ((size - unused) * 100) / size;
    ef92:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
    ef96:	2264      	movs	r2, #100	; 0x64
    ef98:	fb02 f201 	mul.w	r2, r2, r1
    ef9c:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    ef9e:	9202      	str	r2, [sp, #8]
    efa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    efa4:	9201      	str	r2, [sp, #4]
    efa6:	9100      	str	r1, [sp, #0]
    efa8:	4907      	ldr	r1, [pc, #28]	; (efc8 <recv_thread+0x100>)
    efaa:	4808      	ldr	r0, [pc, #32]	; (efcc <recv_thread+0x104>)
    efac:	f7f3 ffd2 	bl	2f54 <printk>
    efb0:	f01a fa2e 	bl	29410 <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
    efb4:	4b01      	ldr	r3, [pc, #4]	; (efbc <recv_thread+0xf4>)
    efb6:	6018      	str	r0, [r3, #0]
    efb8:	e7b3      	b.n	ef22 <recv_thread+0x5a>
    efba:	bf00      	nop
    efbc:	200010bc 	.word	0x200010bc
    efc0:	2000d6d8 	.word	0x2000d6d8
    efc4:	20004940 	.word	0x20004940
    efc8:	00031758 	.word	0x00031758
    efcc:	000314a8 	.word	0x000314a8

0000efd0 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    efd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    efd2:	2304      	movs	r3, #4
	while (callee_id--) {
    efd4:	e01d      	b.n	f012 <mayfly_init+0x42>
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    efd6:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    efda:	4911      	ldr	r1, [pc, #68]	; (f020 <mayfly_init+0x50>)
    efdc:	0065      	lsls	r5, r4, #1
    efde:	192b      	adds	r3, r5, r4
    efe0:	009a      	lsls	r2, r3, #2
    efe2:	0073      	lsls	r3, r6, #1
    efe4:	eb03 0e06 	add.w	lr, r3, r6
    efe8:	ea4f 170e 	mov.w	r7, lr, lsl #4
    efec:	46be      	mov	lr, r7
    efee:	443a      	add	r2, r7
    eff0:	440a      	add	r2, r1
    eff2:	4425      	add	r5, r4
    eff4:	00af      	lsls	r7, r5, #2
    eff6:	4477      	add	r7, lr
    eff8:	3204      	adds	r2, #4
    effa:	4439      	add	r1, r7
    effc:	4b09      	ldr	r3, [pc, #36]	; (f024 <mayfly_init+0x54>)
    effe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    f002:	f000 f9f5 	bl	f3f0 <memq_init>
		while (caller_id--) {
    f006:	4623      	mov	r3, r4
    f008:	1e5c      	subs	r4, r3, #1
    f00a:	b2e4      	uxtb	r4, r4
    f00c:	2b00      	cmp	r3, #0
    f00e:	d1e2      	bne.n	efd6 <mayfly_init+0x6>
	while (callee_id--) {
    f010:	4633      	mov	r3, r6
    f012:	1e5e      	subs	r6, r3, #1
    f014:	b2f6      	uxtb	r6, r6
    f016:	b10b      	cbz	r3, f01c <mayfly_init+0x4c>
    f018:	2304      	movs	r3, #4
    f01a:	e7f5      	b.n	f008 <mayfly_init+0x38>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    f01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f01e:	bf00      	nop
    f020:	20001140 	.word	0x20001140
    f024:	200010c0 	.word	0x200010c0

0000f028 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    f028:	b570      	push	{r4, r5, r6, lr}
	if (enable) {
    f02a:	b1ea      	cbz	r2, f068 <mayfly_enable+0x40>
    f02c:	4615      	mov	r5, r2
		if (mft[callee_id][caller_id].enable_req ==
    f02e:	0042      	lsls	r2, r0, #1
    f030:	4402      	add	r2, r0
    f032:	0093      	lsls	r3, r2, #2
    f034:	004c      	lsls	r4, r1, #1
    f036:	440c      	add	r4, r1
    f038:	0122      	lsls	r2, r4, #4
    f03a:	441a      	add	r2, r3
    f03c:	4b18      	ldr	r3, [pc, #96]	; (f0a0 <mayfly_enable+0x78>)
    f03e:	4413      	add	r3, r2
    f040:	7a1a      	ldrb	r2, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    f042:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req ==
    f044:	429a      	cmp	r2, r3
    f046:	d003      	beq.n	f050 <mayfly_enable+0x28>
			mft[callee_id][caller_id].enable_req++;
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    f048:	462a      	mov	r2, r5
    f04a:	f00a f9e8 	bl	1941e <mayfly_enable_cb>
    f04e:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].enable_req++;
    f050:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    f054:	00a3      	lsls	r3, r4, #2
    f056:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    f05a:	0134      	lsls	r4, r6, #4
    f05c:	4423      	add	r3, r4
    f05e:	4c10      	ldr	r4, [pc, #64]	; (f0a0 <mayfly_enable+0x78>)
    f060:	4423      	add	r3, r4
    f062:	3201      	adds	r2, #1
    f064:	721a      	strb	r2, [r3, #8]
    f066:	e7ef      	b.n	f048 <mayfly_enable+0x20>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    f068:	0042      	lsls	r2, r0, #1
    f06a:	4402      	add	r2, r0
    f06c:	0093      	lsls	r3, r2, #2
    f06e:	004c      	lsls	r4, r1, #1
    f070:	440c      	add	r4, r1
    f072:	0122      	lsls	r2, r4, #4
    f074:	441a      	add	r2, r3
    f076:	4b0a      	ldr	r3, [pc, #40]	; (f0a0 <mayfly_enable+0x78>)
    f078:	4413      	add	r3, r2
    f07a:	7a9a      	ldrb	r2, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    f07c:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req ==
    f07e:	429a      	cmp	r2, r3
    f080:	d000      	beq.n	f084 <mayfly_enable+0x5c>
    f082:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].disable_req++;
    f084:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    f088:	00a3      	lsls	r3, r4, #2
    f08a:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    f08e:	012c      	lsls	r4, r5, #4
    f090:	4423      	add	r3, r4
    f092:	4c03      	ldr	r4, [pc, #12]	; (f0a0 <mayfly_enable+0x78>)
    f094:	4423      	add	r3, r4
    f096:	3201      	adds	r2, #1
    f098:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
    f09a:	f00a f9f7 	bl	1948c <mayfly_pend>
		}
	}
}
    f09e:	e7f0      	b.n	f082 <mayfly_enable+0x5a>
    f0a0:	20001140 	.word	0x20001140

0000f0a4 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    f0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0a6:	4605      	mov	r5, r0
    f0a8:	460e      	mov	r6, r1
    f0aa:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    f0ac:	b19a      	cbz	r2, f0d6 <mayfly_enqueue+0x32>
    f0ae:	2101      	movs	r1, #1
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f0b0:	b2c9      	uxtb	r1, r1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    f0b2:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    f0b4:	7823      	ldrb	r3, [r4, #0]
    f0b6:	1a9b      	subs	r3, r3, r2
	if (state != 0) {
    f0b8:	f013 0303 	ands.w	r3, r3, #3
    f0bc:	d032      	beq.n	f124 <mayfly_enqueue+0x80>
		if (chain) {
    f0be:	b371      	cbz	r1, f11e <mayfly_enqueue+0x7a>
			if (state != 1) {
    f0c0:	2b01      	cmp	r3, #1
    f0c2:	d04c      	beq.n	f15e <mayfly_enqueue+0xba>
				/* mark as ready in queue */
				m->_req = ack + 1;
    f0c4:	3201      	adds	r2, #1
    f0c6:	b2d2      	uxtb	r2, r2
    f0c8:	7022      	strb	r2, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
    f0ca:	4631      	mov	r1, r6
    f0cc:	4628      	mov	r0, r5
    f0ce:	f00a f9dd 	bl	1948c <mayfly_pend>

				return 0;
    f0d2:	2000      	movs	r0, #0
    f0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f0d6:	f00a f9c6 	bl	19466 <mayfly_prio_is_equal>
    f0da:	b908      	cbnz	r0, f0e0 <mayfly_enqueue+0x3c>
		!mayfly_is_enabled(caller_id, callee_id) ||
    f0dc:	2101      	movs	r1, #1
    f0de:	e7e7      	b.n	f0b0 <mayfly_enqueue+0xc>
    f0e0:	4631      	mov	r1, r6
    f0e2:	4628      	mov	r0, r5
    f0e4:	f00a f9ad 	bl	19442 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f0e8:	b1b8      	cbz	r0, f11a <mayfly_enqueue+0x76>
		(mft[callee_id][caller_id].disable_req !=
    f0ea:	481e      	ldr	r0, [pc, #120]	; (f164 <mayfly_enqueue+0xc0>)
    f0ec:	0069      	lsls	r1, r5, #1
    f0ee:	194a      	adds	r2, r1, r5
    f0f0:	0093      	lsls	r3, r2, #2
    f0f2:	0072      	lsls	r2, r6, #1
    f0f4:	eb02 0e06 	add.w	lr, r2, r6
    f0f8:	ea4f 170e 	mov.w	r7, lr, lsl #4
    f0fc:	46be      	mov	lr, r7
    f0fe:	443b      	add	r3, r7
    f100:	4403      	add	r3, r0
    f102:	7a9f      	ldrb	r7, [r3, #10]
		 mft[callee_id][caller_id].disable_ack);
    f104:	194b      	adds	r3, r1, r5
    f106:	0099      	lsls	r1, r3, #2
    f108:	4471      	add	r1, lr
    f10a:	4408      	add	r0, r1
    f10c:	7ac3      	ldrb	r3, [r0, #11]
		!mayfly_is_enabled(caller_id, callee_id) ||
    f10e:	429f      	cmp	r7, r3
    f110:	d001      	beq.n	f116 <mayfly_enqueue+0x72>
    f112:	2101      	movs	r1, #1
    f114:	e7cc      	b.n	f0b0 <mayfly_enqueue+0xc>
    f116:	2100      	movs	r1, #0
    f118:	e7ca      	b.n	f0b0 <mayfly_enqueue+0xc>
    f11a:	2101      	movs	r1, #1
    f11c:	e7c8      	b.n	f0b0 <mayfly_enqueue+0xc>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    f11e:	1c93      	adds	r3, r2, #2
    f120:	b2db      	uxtb	r3, r3
    f122:	7023      	strb	r3, [r4, #0]
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    f124:	b1b1      	cbz	r1, f154 <mayfly_enqueue+0xb0>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    f126:	3201      	adds	r2, #1
    f128:	b2d2      	uxtb	r2, r2
    f12a:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    f12c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    f130:	009a      	lsls	r2, r3, #2
    f132:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    f136:	010b      	lsls	r3, r1, #4
    f138:	441a      	add	r2, r3
    f13a:	4b0a      	ldr	r3, [pc, #40]	; (f164 <mayfly_enqueue+0xc0>)
    f13c:	441a      	add	r2, r3
    f13e:	3204      	adds	r2, #4
    f140:	6861      	ldr	r1, [r4, #4]
    f142:	4620      	mov	r0, r4
    f144:	f000 f957 	bl	f3f6 <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    f148:	4631      	mov	r1, r6
    f14a:	4628      	mov	r0, r5
    f14c:	f00a f99e 	bl	1948c <mayfly_pend>

	return 0;
    f150:	2000      	movs	r0, #0
    f152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		m->fp(m->param);
    f154:	68e3      	ldr	r3, [r4, #12]
    f156:	68a0      	ldr	r0, [r4, #8]
    f158:	4798      	blx	r3
		return 0;
    f15a:	2000      	movs	r0, #0
    f15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return 1;
    f15e:	2001      	movs	r0, #1
}
    f160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f162:	bf00      	nop
    f164:	20001140 	.word	0x20001140

0000f168 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    f168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f16c:	b085      	sub	sp, #20
    f16e:	4682      	mov	sl, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    f170:	2304      	movs	r3, #4
	u8_t enable = 0;
    f172:	f04f 0b00 	mov.w	fp, #0
	u8_t disable = 0;
    f176:	f8cd b004 	str.w	fp, [sp, #4]
	while (caller_id--) {
    f17a:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    f17e:	fa5f f989 	uxtb.w	r9, r9
    f182:	2b00      	cmp	r3, #0
    f184:	f000 809b 	beq.w	f2be <mayfly_run+0x156>
		void *link;
		struct mayfly *m = 0;
    f188:	aa04      	add	r2, sp, #16
    f18a:	2300      	movs	r3, #0
    f18c:	f842 3d04 	str.w	r3, [r2, #-4]!

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    f190:	4657      	mov	r7, sl
    f192:	464e      	mov	r6, r9
    f194:	4850      	ldr	r0, [pc, #320]	; (f2d8 <mayfly_run+0x170>)
    f196:	ea4f 0149 	mov.w	r1, r9, lsl #1
    f19a:	4449      	add	r1, r9
    f19c:	008b      	lsls	r3, r1, #2
    f19e:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f1a2:	4451      	add	r1, sl
    f1a4:	010c      	lsls	r4, r1, #4
    f1a6:	4423      	add	r3, r4
    f1a8:	18c4      	adds	r4, r0, r3
    f1aa:	58c1      	ldr	r1, [r0, r3]
    f1ac:	6860      	ldr	r0, [r4, #4]
    f1ae:	f000 f929 	bl	f404 <memq_peek>
    f1b2:	4680      	mov	r8, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    f1b4:	e017      	b.n	f1e6 <mayfly_run+0x7e>
			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
			if (state == 1) {
				/* mark mayfly as ran */
				m->_ack--;
    f1b6:	3a01      	subs	r2, #1
    f1b8:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    f1ba:	9b03      	ldr	r3, [sp, #12]
    f1bc:	68da      	ldr	r2, [r3, #12]
    f1be:	6898      	ldr	r0, [r3, #8]
    f1c0:	4790      	blx	r2
    f1c2:	e01b      	b.n	f1fc <mayfly_run+0x94>
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    f1c4:	4944      	ldr	r1, [pc, #272]	; (f2d8 <mayfly_run+0x170>)
    f1c6:	0072      	lsls	r2, r6, #1
    f1c8:	4432      	add	r2, r6
    f1ca:	0093      	lsls	r3, r2, #2
    f1cc:	007a      	lsls	r2, r7, #1
    f1ce:	443a      	add	r2, r7
    f1d0:	0110      	lsls	r0, r2, #4
    f1d2:	4403      	add	r3, r0
    f1d4:	18c8      	adds	r0, r1, r3
    f1d6:	aa03      	add	r2, sp, #12
    f1d8:	58c9      	ldr	r1, [r1, r3]
    f1da:	6840      	ldr	r0, [r0, #4]
    f1dc:	f000 f912 	bl	f404 <memq_peek>
    f1e0:	4680      	mov	r8, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    f1e2:	2c01      	cmp	r4, #1
    f1e4:	d026      	beq.n	f234 <mayfly_run+0xcc>
		while (link) {
    f1e6:	f1b8 0f00 	cmp.w	r8, #0
    f1ea:	d030      	beq.n	f24e <mayfly_run+0xe6>
			req = m->_req;
    f1ec:	9b03      	ldr	r3, [sp, #12]
    f1ee:	781c      	ldrb	r4, [r3, #0]
			state = (req - m->_ack) & 0x03;
    f1f0:	785a      	ldrb	r2, [r3, #1]
    f1f2:	1aa4      	subs	r4, r4, r2
    f1f4:	f004 0403 	and.w	r4, r4, #3
			if (state == 1) {
    f1f8:	2c01      	cmp	r4, #1
    f1fa:	d0dc      	beq.n	f1b6 <mayfly_run+0x4e>
			req = m->_req;
    f1fc:	9b03      	ldr	r3, [sp, #12]
    f1fe:	781d      	ldrb	r5, [r3, #0]
    f200:	b2ed      	uxtb	r5, r5
			if (((req - m->_ack) & 0x03) != 1) {
    f202:	785b      	ldrb	r3, [r3, #1]
    f204:	1aeb      	subs	r3, r5, r3
    f206:	f003 0303 	and.w	r3, r3, #3
    f20a:	2b01      	cmp	r3, #1
    f20c:	d0da      	beq.n	f1c4 <mayfly_run+0x5c>
				memq_dequeue(mft[callee_id][caller_id].tail,
    f20e:	0072      	lsls	r2, r6, #1
    f210:	4432      	add	r2, r6
    f212:	0093      	lsls	r3, r2, #2
    f214:	0079      	lsls	r1, r7, #1
    f216:	4439      	add	r1, r7
    f218:	010a      	lsls	r2, r1, #4
    f21a:	441a      	add	r2, r3
    f21c:	4b2e      	ldr	r3, [pc, #184]	; (f2d8 <mayfly_run+0x170>)
    f21e:	4413      	add	r3, r2
    f220:	2200      	movs	r2, #0
    f222:	4619      	mov	r1, r3
    f224:	6858      	ldr	r0, [r3, #4]
    f226:	f000 f8f6 	bl	f416 <memq_dequeue>
				m->_link = link;
    f22a:	9b03      	ldr	r3, [sp, #12]
    f22c:	f8c3 8004 	str.w	r8, [r3, #4]
				m->_ack = req;
    f230:	705d      	strb	r5, [r3, #1]
    f232:	e7c7      	b.n	f1c4 <mayfly_run+0x5c>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    f234:	f1b9 0f00 	cmp.w	r9, #0
    f238:	d006      	beq.n	f248 <mayfly_run+0xe0>
					mayfly_pend(callee_id, callee_id);
    f23a:	4651      	mov	r1, sl
    f23c:	4650      	mov	r0, sl
    f23e:	f00a f925 	bl	1948c <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
    f242:	b005      	add	sp, #20
    f244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (caller_id || link) {
    f248:	2800      	cmp	r0, #0
    f24a:	d0cc      	beq.n	f1e6 <mayfly_run+0x7e>
    f24c:	e7f5      	b.n	f23a <mayfly_run+0xd2>
		if (mft[callee_id][caller_id].disable_req !=
    f24e:	ea4f 0249 	mov.w	r2, r9, lsl #1
    f252:	444a      	add	r2, r9
    f254:	0093      	lsls	r3, r2, #2
    f256:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f25a:	4451      	add	r1, sl
    f25c:	010a      	lsls	r2, r1, #4
    f25e:	441a      	add	r2, r3
    f260:	4b1d      	ldr	r3, [pc, #116]	; (f2d8 <mayfly_run+0x170>)
    f262:	4413      	add	r3, r2
    f264:	7a99      	ldrb	r1, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    f266:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req !=
    f268:	4299      	cmp	r1, r3
    f26a:	d00b      	beq.n	f284 <mayfly_run+0x11c>
			mft[callee_id][caller_id].disable_ack =
    f26c:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    f270:	0093      	lsls	r3, r2, #2
    f272:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    f276:	0102      	lsls	r2, r0, #4
    f278:	4413      	add	r3, r2
    f27a:	4a17      	ldr	r2, [pc, #92]	; (f2d8 <mayfly_run+0x170>)
    f27c:	4413      	add	r3, r2
    f27e:	72d9      	strb	r1, [r3, #11]
			disable = 1;
    f280:	2301      	movs	r3, #1
    f282:	9301      	str	r3, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    f284:	ea4f 0249 	mov.w	r2, r9, lsl #1
    f288:	444a      	add	r2, r9
    f28a:	0093      	lsls	r3, r2, #2
    f28c:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f290:	4451      	add	r1, sl
    f292:	010a      	lsls	r2, r1, #4
    f294:	441a      	add	r2, r3
    f296:	4b10      	ldr	r3, [pc, #64]	; (f2d8 <mayfly_run+0x170>)
    f298:	4413      	add	r3, r2
    f29a:	7a19      	ldrb	r1, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    f29c:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req !=
    f29e:	4299      	cmp	r1, r3
    f2a0:	d00b      	beq.n	f2ba <mayfly_run+0x152>
			mft[callee_id][caller_id].enable_ack =
    f2a2:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    f2a6:	0093      	lsls	r3, r2, #2
    f2a8:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    f2ac:	0102      	lsls	r2, r0, #4
    f2ae:	4413      	add	r3, r2
    f2b0:	4a09      	ldr	r2, [pc, #36]	; (f2d8 <mayfly_run+0x170>)
    f2b2:	4413      	add	r3, r2
    f2b4:	7259      	strb	r1, [r3, #9]
			enable = 1;
    f2b6:	f04f 0b01 	mov.w	fp, #1
	while (caller_id--) {
    f2ba:	464b      	mov	r3, r9
    f2bc:	e75d      	b.n	f17a <mayfly_run+0x12>
	if (disable && !enable) {
    f2be:	9b01      	ldr	r3, [sp, #4]
    f2c0:	2b00      	cmp	r3, #0
    f2c2:	d0be      	beq.n	f242 <mayfly_run+0xda>
    f2c4:	f1bb 0f00 	cmp.w	fp, #0
    f2c8:	d1bb      	bne.n	f242 <mayfly_run+0xda>
		mayfly_enable_cb(callee_id, callee_id, 0);
    f2ca:	2200      	movs	r2, #0
    f2cc:	4651      	mov	r1, sl
    f2ce:	4650      	mov	r0, sl
    f2d0:	f00a f8a5 	bl	1941e <mayfly_enable_cb>
    f2d4:	e7b5      	b.n	f242 <mayfly_run+0xda>
    f2d6:	bf00      	nop
    f2d8:	20001140 	.word	0x20001140

0000f2dc <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    f2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2de:	b083      	sub	sp, #12
    f2e0:	4607      	mov	r7, r0
    f2e2:	4608      	mov	r0, r1
	*mem_head = mem_pool;
    f2e4:	601f      	str	r7, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    f2e6:	1dfb      	adds	r3, r7, #7
    f2e8:	f023 0303 	bic.w	r3, r3, #3
    f2ec:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    f2ee:	460e      	mov	r6, r1
    f2f0:	3a01      	subs	r2, #1
    f2f2:	b295      	uxth	r5, r2
    f2f4:	2204      	movs	r2, #4
    f2f6:	2100      	movs	r1, #0
    f2f8:	fb05 7000 	mla	r0, r5, r0, r7
    f2fc:	f01b fadc 	bl	2a8b8 <memset>
	       sizeof(mem_pool));
	while (mem_count--) {
    f300:	e00b      	b.n	f31a <mem_init+0x3e>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    f302:	fb04 6306 	mla	r3, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    f306:	443b      	add	r3, r7
    f308:	a902      	add	r1, sp, #8
    f30a:	f841 3d04 	str.w	r3, [r1, #-4]!
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    f30e:	2204      	movs	r2, #4
    f310:	fb04 7006 	mla	r0, r4, r6, r7
    f314:	f7f0 ffd4 	bl	2c0 <memcpy>
	while (mem_count--) {
    f318:	4625      	mov	r5, r4
    f31a:	1e6c      	subs	r4, r5, #1
    f31c:	b2a4      	uxth	r4, r4
    f31e:	2d00      	cmp	r5, #0
    f320:	d1ef      	bne.n	f302 <mem_init+0x26>
		       (void *)&next, sizeof(next));
	}
}
    f322:	b003      	add	sp, #12
    f324:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f326 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    f326:	b570      	push	{r4, r5, r6, lr}
    f328:	b082      	sub	sp, #8
	if (*mem_head) {
    f32a:	6805      	ldr	r5, [r0, #0]
    f32c:	b1a5      	cbz	r5, f358 <mem_acquire+0x32>
    f32e:	4606      	mov	r6, r0
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    f330:	1deb      	adds	r3, r5, #7
    f332:	f023 0303 	bic.w	r3, r3, #3
    f336:	881b      	ldrh	r3, [r3, #0]
					       sizeof(mem_head)));
		free_count--;
    f338:	3b01      	subs	r3, #1
    f33a:	b29c      	uxth	r4, r3

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    f33c:	2204      	movs	r2, #4
    f33e:	4629      	mov	r1, r5
    f340:	eb0d 0002 	add.w	r0, sp, r2
    f344:	f7f0 ffbc 	bl	2c0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    f348:	9b01      	ldr	r3, [sp, #4]
    f34a:	b11b      	cbz	r3, f354 <mem_acquire+0x2e>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    f34c:	3307      	adds	r3, #7
    f34e:	f023 0303 	bic.w	r3, r3, #3
    f352:	801c      	strh	r4, [r3, #0]
				free_count;
		}

		*mem_head = head;
    f354:	9b01      	ldr	r3, [sp, #4]
    f356:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    f358:	4628      	mov	r0, r5
    f35a:	b002      	add	sp, #8
    f35c:	bd70      	pop	{r4, r5, r6, pc}

0000f35e <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    f35e:	b570      	push	{r4, r5, r6, lr}
    f360:	4606      	mov	r6, r0
    f362:	460d      	mov	r5, r1
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    f364:	680b      	ldr	r3, [r1, #0]
    f366:	b183      	cbz	r3, f38a <mem_release+0x2c>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    f368:	3307      	adds	r3, #7
    f36a:	f023 0303 	bic.w	r3, r3, #3
    f36e:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;
    f370:	3401      	adds	r4, #1
    f372:	b2a4      	uxth	r4, r4

	memcpy(mem, mem_head, sizeof(mem));
    f374:	2204      	movs	r2, #4
    f376:	4629      	mov	r1, r5
    f378:	4630      	mov	r0, r6
    f37a:	f7f0 ffa1 	bl	2c0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    f37e:	1df3      	adds	r3, r6, #7
    f380:	f023 0303 	bic.w	r3, r3, #3
    f384:	801c      	strh	r4, [r3, #0]

	*mem_head = mem;
    f386:	602e      	str	r6, [r5, #0]
    f388:	bd70      	pop	{r4, r5, r6, pc}
	u16_t free_count = 0;
    f38a:	2400      	movs	r4, #0
    f38c:	e7f0      	b.n	f370 <mem_release+0x12>

0000f38e <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    f38e:	4603      	mov	r3, r0
    f390:	b120      	cbz	r0, f39c <mem_free_count_get+0xe>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    f392:	3307      	adds	r3, #7
    f394:	f023 0303 	bic.w	r3, r3, #3
    f398:	8818      	ldrh	r0, [r3, #0]
    f39a:	4770      	bx	lr
	u16_t free_count = 0;
    f39c:	2000      	movs	r0, #0
					       sizeof(mem_head)));
	}

	return free_count;
}
    f39e:	4770      	bx	lr

0000f3a0 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    f3a0:	fb02 0001 	mla	r0, r2, r1, r0
    f3a4:	4770      	bx	lr

0000f3a6 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    f3a6:	1a40      	subs	r0, r0, r1
    f3a8:	b280      	uxth	r0, r0
}
    f3aa:	fbb0 f0f2 	udiv	r0, r0, r2
    f3ae:	4770      	bx	lr

0000f3b0 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    f3b0:	4411      	add	r1, r2
	while (len--) {
    f3b2:	e004      	b.n	f3be <mem_rcopy+0xe>
		*dst++ = *--src;
    f3b4:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    f3b8:	7002      	strb	r2, [r0, #0]
	while (len--) {
    f3ba:	461a      	mov	r2, r3
		*dst++ = *--src;
    f3bc:	3001      	adds	r0, #1
	while (len--) {
    f3be:	1e53      	subs	r3, r2, #1
    f3c0:	b29b      	uxth	r3, r3
    f3c2:	2a00      	cmp	r2, #0
    f3c4:	d1f6      	bne.n	f3b4 <mem_rcopy+0x4>
	}
}
    f3c6:	4770      	bx	lr

0000f3c8 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
    f3c8:	1e4b      	subs	r3, r1, #1
    f3ca:	b29b      	uxth	r3, r3
    f3cc:	b171      	cbz	r1, f3ec <mem_nz+0x24>
{
    f3ce:	b410      	push	{r4}
		if (*src++) {
    f3d0:	1c44      	adds	r4, r0, #1
    f3d2:	7802      	ldrb	r2, [r0, #0]
	while (len--) {
    f3d4:	4619      	mov	r1, r3
		if (*src++) {
    f3d6:	b93a      	cbnz	r2, f3e8 <mem_nz+0x20>
    f3d8:	4620      	mov	r0, r4
	while (len--) {
    f3da:	3b01      	subs	r3, #1
    f3dc:	b29b      	uxth	r3, r3
    f3de:	2900      	cmp	r1, #0
    f3e0:	d1f6      	bne.n	f3d0 <mem_nz+0x8>
			return 1;
		}
	}

	return 0;
    f3e2:	2000      	movs	r0, #0
}
    f3e4:	bc10      	pop	{r4}
    f3e6:	4770      	bx	lr
			return 1;
    f3e8:	2001      	movs	r0, #1
    f3ea:	e7fb      	b.n	f3e4 <mem_nz+0x1c>
	return 0;
    f3ec:	2000      	movs	r0, #0
}
    f3ee:	4770      	bx	lr

0000f3f0 <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    f3f0:	6010      	str	r0, [r2, #0]
    f3f2:	6008      	str	r0, [r1, #0]

	return link;
}
    f3f4:	4770      	bx	lr

0000f3f6 <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    f3f6:	6813      	ldr	r3, [r2, #0]
    f3f8:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    f3fa:	6813      	ldr	r3, [r2, #0]
    f3fc:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;
    f3fe:	6011      	str	r1, [r2, #0]

	return link;
}
    f400:	4608      	mov	r0, r1
    f402:	4770      	bx	lr

0000f404 <memq_peek>:
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    f404:	4281      	cmp	r1, r0
    f406:	d004      	beq.n	f412 <memq_peek+0xe>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    f408:	b10a      	cbz	r2, f40e <memq_peek+0xa>
		*mem = *((void **)link + 1);
    f40a:	684b      	ldr	r3, [r1, #4]
    f40c:	6013      	str	r3, [r2, #0]
	}

	return link;
}
    f40e:	4608      	mov	r0, r1
    f410:	4770      	bx	lr
		return 0;
    f412:	2100      	movs	r1, #0
    f414:	e7fb      	b.n	f40e <memq_peek+0xa>

0000f416 <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    f416:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    f418:	4283      	cmp	r3, r0
    f41a:	d006      	beq.n	f42a <memq_dequeue+0x14>
	if (mem) {
    f41c:	b10a      	cbz	r2, f422 <memq_dequeue+0xc>
		*mem = *((void **)link + 1);
    f41e:	6858      	ldr	r0, [r3, #4]
    f420:	6010      	str	r0, [r2, #0]

	/* increment the head to next link node */
	*head = *((void **)link);
    f422:	681a      	ldr	r2, [r3, #0]
    f424:	600a      	str	r2, [r1, #0]

	return link;
}
    f426:	4618      	mov	r0, r3
    f428:	4770      	bx	lr
		return 0;
    f42a:	2300      	movs	r3, #0
    f42c:	e7f9      	b.n	f422 <memq_dequeue+0xc>

0000f42e <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    f42e:	b410      	push	{r4}
	u8_t one_count = 0;
    f430:	2200      	movs	r2, #0

	while (octets_len--) {
    f432:	e008      	b.n	f446 <util_ones_count_get+0x18>
		u8_t bite;

		bite = *octets;
		while (bite) {
			bite &= (bite - 1);
    f434:	1e59      	subs	r1, r3, #1
    f436:	b249      	sxtb	r1, r1
    f438:	400b      	ands	r3, r1
			one_count++;
    f43a:	3201      	adds	r2, #1
    f43c:	b2d2      	uxtb	r2, r2
		while (bite) {
    f43e:	2b00      	cmp	r3, #0
    f440:	d1f8      	bne.n	f434 <util_ones_count_get+0x6>
		}
		octets++;
    f442:	3001      	adds	r0, #1
	while (octets_len--) {
    f444:	4621      	mov	r1, r4
    f446:	1e4b      	subs	r3, r1, #1
    f448:	b2dc      	uxtb	r4, r3
    f44a:	b109      	cbz	r1, f450 <util_ones_count_get+0x22>
		bite = *octets;
    f44c:	7803      	ldrb	r3, [r0, #0]
		while (bite) {
    f44e:	e7f6      	b.n	f43e <util_ones_count_get+0x10>
	}

	return one_count;
}
    f450:	4610      	mov	r0, r2
    f452:	bc10      	pop	{r4}
    f454:	4770      	bx	lr
	...

0000f458 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    f458:	4b05      	ldr	r3, [pc, #20]	; (f470 <cntr_init+0x18>)
    f45a:	2200      	movs	r2, #0
    f45c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    f460:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    f464:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    f468:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    f46c:	4770      	bx	lr
    f46e:	bf00      	nop
    f470:	4000b000 	.word	0x4000b000

0000f474 <cntr_start>:
			     RTC_INTENSET_COMPARE1_Msk);
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    f474:	4a05      	ldr	r2, [pc, #20]	; (f48c <cntr_start+0x18>)
    f476:	7813      	ldrb	r3, [r2, #0]
    f478:	1c59      	adds	r1, r3, #1
    f47a:	7011      	strb	r1, [r2, #0]
    f47c:	b923      	cbnz	r3, f488 <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    f47e:	2201      	movs	r2, #1
    f480:	4b03      	ldr	r3, [pc, #12]	; (f490 <cntr_start+0x1c>)
    f482:	601a      	str	r2, [r3, #0]

	return 0;
    f484:	2000      	movs	r0, #0
    f486:	4770      	bx	lr
		return 1;
    f488:	2001      	movs	r0, #1
}
    f48a:	4770      	bx	lr
    f48c:	20001200 	.word	0x20001200
    f490:	4000b000 	.word	0x4000b000

0000f494 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    f494:	4b0a      	ldr	r3, [pc, #40]	; (f4c0 <cntr_stop+0x2c>)
    f496:	781b      	ldrb	r3, [r3, #0]
    f498:	b14b      	cbz	r3, f4ae <cntr_stop+0x1a>

	if (--_refcount) {
    f49a:	3b01      	subs	r3, #1
    f49c:	b2db      	uxtb	r3, r3
    f49e:	4a08      	ldr	r2, [pc, #32]	; (f4c0 <cntr_stop+0x2c>)
    f4a0:	7013      	strb	r3, [r2, #0]
    f4a2:	b953      	cbnz	r3, f4ba <cntr_stop+0x26>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    f4a4:	2201      	movs	r2, #1
    f4a6:	4b07      	ldr	r3, [pc, #28]	; (f4c4 <cntr_stop+0x30>)
    f4a8:	605a      	str	r2, [r3, #4]

	return 0;
    f4aa:	2000      	movs	r0, #0
    f4ac:	4770      	bx	lr
	LL_ASSERT(_refcount);
    f4ae:	4040      	eors	r0, r0
    f4b0:	f380 8811 	msr	BASEPRI, r0
    f4b4:	f04f 0004 	mov.w	r0, #4
    f4b8:	df02      	svc	2
		return 1;
    f4ba:	2001      	movs	r0, #1
}
    f4bc:	4770      	bx	lr
    f4be:	bf00      	nop
    f4c0:	20001200 	.word	0x20001200
    f4c4:	4000b000 	.word	0x4000b000

0000f4c8 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    f4c8:	4b01      	ldr	r3, [pc, #4]	; (f4d0 <cntr_cnt_get+0x8>)
    f4ca:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    f4ce:	4770      	bx	lr
    f4d0:	4000b000 	.word	0x4000b000

0000f4d4 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    f4d4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    f4d8:	4b01      	ldr	r3, [pc, #4]	; (f4e0 <cntr_cmp_set+0xc>)
    f4da:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    f4de:	4770      	bx	lr
    f4e0:	4000b000 	.word	0x4000b000

0000f4e4 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    f4e4:	e009      	b.n	f4fa <do_ecb+0x16>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    f4e6:	4b15      	ldr	r3, [pc, #84]	; (f53c <do_ecb+0x58>)
    f4e8:	2201      	movs	r2, #1
    f4ea:	605a      	str	r2, [r3, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    f4ec:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    f4f0:	b91b      	cbnz	r3, f4fa <do_ecb+0x16>
    f4f2:	4b12      	ldr	r3, [pc, #72]	; (f53c <do_ecb+0x58>)
    f4f4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    f4f8:	b9d3      	cbnz	r3, f530 <do_ecb+0x4c>
		NRF_ECB->TASKS_STOPECB = 1;
    f4fa:	4b10      	ldr	r3, [pc, #64]	; (f53c <do_ecb+0x58>)
    f4fc:	2201      	movs	r2, #1
    f4fe:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    f500:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    f504:	2100      	movs	r1, #0
    f506:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    f50a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    f50e:	601a      	str	r2, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    f510:	4b0a      	ldr	r3, [pc, #40]	; (f53c <do_ecb+0x58>)
    f512:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    f516:	2b00      	cmp	r3, #0
    f518:	d1e5      	bne.n	f4e6 <do_ecb+0x2>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    f51a:	4b08      	ldr	r3, [pc, #32]	; (f53c <do_ecb+0x58>)
    f51c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    f520:	2b00      	cmp	r3, #0
    f522:	d1e0      	bne.n	f4e6 <do_ecb+0x2>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    f524:	4b05      	ldr	r3, [pc, #20]	; (f53c <do_ecb+0x58>)
    f526:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    f52a:	2b00      	cmp	r3, #0
    f52c:	d1f0      	bne.n	f510 <do_ecb+0x2c>
    f52e:	e7da      	b.n	f4e6 <do_ecb+0x2>

	NRF_ECB->ECBDATAPTR = 0;
    f530:	2200      	movs	r2, #0
    f532:	4b02      	ldr	r3, [pc, #8]	; (f53c <do_ecb+0x58>)
    f534:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f538:	4770      	bx	lr
    f53a:	bf00      	nop
    f53c:	4000e000 	.word	0x4000e000

0000f540 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    f540:	b570      	push	{r4, r5, r6, lr}
    f542:	b08c      	sub	sp, #48	; 0x30
    f544:	460e      	mov	r6, r1
    f546:	4615      	mov	r5, r2
    f548:	461c      	mov	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    f54a:	2210      	movs	r2, #16
    f54c:	4601      	mov	r1, r0
    f54e:	4668      	mov	r0, sp
    f550:	f7ff ff2e 	bl	f3b0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    f554:	2210      	movs	r2, #16
    f556:	4631      	mov	r1, r6
    f558:	eb0d 0002 	add.w	r0, sp, r2
    f55c:	f7ff ff28 	bl	f3b0 <mem_rcopy>

	do_ecb(&ecb);
    f560:	4668      	mov	r0, sp
    f562:	f7ff ffbf 	bl	f4e4 <do_ecb>

	if (cipher_text_le) {
    f566:	b125      	cbz	r5, f572 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    f568:	2210      	movs	r2, #16
    f56a:	a908      	add	r1, sp, #32
    f56c:	4628      	mov	r0, r5
    f56e:	f7ff ff1f 	bl	f3b0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    f572:	b124      	cbz	r4, f57e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    f574:	2210      	movs	r2, #16
    f576:	a908      	add	r1, sp, #32
    f578:	4620      	mov	r0, r4
    f57a:	f7f0 fea1 	bl	2c0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    f57e:	b00c      	add	sp, #48	; 0x30
    f580:	bd70      	pop	{r4, r5, r6, pc}
	...

0000f584 <isr_radio>:
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
    f584:	b508      	push	{r3, lr}
	if (sfp_radio_isr) {
    f586:	4b02      	ldr	r3, [pc, #8]	; (f590 <isr_radio+0xc>)
    f588:	681b      	ldr	r3, [r3, #0]
    f58a:	b103      	cbz	r3, f58e <isr_radio+0xa>
		sfp_radio_isr();
    f58c:	4798      	blx	r3
    f58e:	bd08      	pop	{r3, pc}
    f590:	20001420 	.word	0x20001420

0000f594 <radio_isr_set>:
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    f594:	b508      	push	{r3, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    f596:	4b07      	ldr	r3, [pc, #28]	; (f5b4 <radio_isr_set+0x20>)
    f598:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    f59a:	2210      	movs	r2, #16
    f59c:	4b06      	ldr	r3, [pc, #24]	; (f5b8 <radio_isr_set+0x24>)
    f59e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    f5a2:	2202      	movs	r2, #2
    f5a4:	4b05      	ldr	r3, [pc, #20]	; (f5bc <radio_isr_set+0x28>)
    f5a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    f5aa:	2001      	movs	r0, #1
    f5ac:	f018 fa3c 	bl	27a28 <_arch_irq_enable>
    f5b0:	bd08      	pop	{r3, pc}
    f5b2:	bf00      	nop
    f5b4:	20001420 	.word	0x20001420
    f5b8:	40001000 	.word	0x40001000
    f5bc:	e000e100 	.word	0xe000e100

0000f5c0 <radio_setup>:
			u32_t volatile PDM;
			u32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    f5c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f5c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f5c8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    f5cc:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    f5d0:	2100      	movs	r1, #0
    f5d2:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    f5d6:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    f5da:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    f5de:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    f5e2:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    f5e6:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    f5ea:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    f5ee:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    f5f2:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    f5f6:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    f5fa:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    f5fe:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    f602:	4770      	bx	lr

0000f604 <radio_reset>:
#endif /* CONFIG_SOC_SERIES_NRF52X */
}

void radio_reset(void)
{
    f604:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    f606:	2001      	movs	r0, #1
    f608:	f018 fa1c 	bl	27a44 <_arch_irq_disable>

	NRF_RADIO->POWER =
    f60c:	4b03      	ldr	r3, [pc, #12]	; (f61c <radio_reset+0x18>)
    f60e:	2200      	movs	r2, #0
    f610:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    f614:	2201      	movs	r2, #1
    f616:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    f61a:	bd08      	pop	{r3, pc}
    f61c:	40001000 	.word	0x40001000

0000f620 <radio_phy_set>:

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    f620:	2802      	cmp	r0, #2
    f622:	d106      	bne.n	f632 <radio_phy_set+0x12>
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
		break;

#elif defined(CONFIG_SOC_SERIES_NRF52X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
    f624:	2304      	movs	r3, #4
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    f626:	f003 030f 	and.w	r3, r3, #15
    f62a:	4a03      	ldr	r2, [pc, #12]	; (f638 <radio_phy_set+0x18>)
    f62c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    f630:	4770      	bx	lr
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    f632:	2303      	movs	r3, #3
    f634:	e7f7      	b.n	f626 <radio_phy_set+0x6>
    f636:	bf00      	nop
    f638:	40001000 	.word	0x40001000

0000f63c <radio_tx_power_set>:
}

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    f63c:	4b01      	ldr	r3, [pc, #4]	; (f644 <radio_tx_power_set+0x8>)
    f63e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    f642:	4770      	bx	lr
    f644:	40001000 	.word	0x40001000

0000f648 <radio_freq_chan_set>:
}

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    f648:	4b01      	ldr	r3, [pc, #4]	; (f650 <radio_freq_chan_set+0x8>)
    f64a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    f64e:	4770      	bx	lr
    f650:	40001000 	.word	0x40001000

0000f654 <radio_whiten_iv_set>:
}

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    f654:	4b07      	ldr	r3, [pc, #28]	; (f674 <radio_whiten_iv_set+0x20>)
    f656:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    f65a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    f65e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    f662:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    f666:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    f66a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    f66e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    f672:	4770      	bx	lr
    f674:	40001000 	.word	0x40001000

0000f678 <radio_aa_set>:
			    RADIO_PCNF1_WHITEEN_Msk;
}

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    f678:	4a0a      	ldr	r2, [pc, #40]	; (f6a4 <radio_aa_set+0x2c>)
    f67a:	2300      	movs	r3, #0
    f67c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    f680:	2301      	movs	r3, #1
    f682:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    f686:	78c3      	ldrb	r3, [r0, #3]
    f688:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    f68c:	7881      	ldrb	r1, [r0, #2]
    f68e:	7843      	ldrb	r3, [r0, #1]
    f690:	041b      	lsls	r3, r3, #16
    f692:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    f696:	7801      	ldrb	r1, [r0, #0]
    f698:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    f69c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    f6a0:	4770      	bx	lr
    f6a2:	bf00      	nop
    f6a4:	40001000 	.word	0x40001000

0000f6a8 <radio_pkt_configure>:
}

void radio_pkt_configure(u8_t bits_len, u8_t max_len, u8_t flags)
{
    f6a8:	b410      	push	{r4}
	u8_t dc = flags & 0x01; /* Adv or Data channel */
    f6aa:	f002 0401 	and.w	r4, r2, #1
		bits_len = 5;
	}
#elif defined(CONFIG_SOC_SERIES_NRF52X)
	extra = 0;

	phy = (flags >> 1) & 0x07; /* phy */
    f6ae:	f3c2 0242 	ubfx	r2, r2, #1, #3
	switch (phy) {
    f6b2:	2a02      	cmp	r2, #2
    f6b4:	d020      	beq.n	f6f8 <radio_pkt_configure+0x50>
	case BIT(0):
	default:
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    f6b6:	2300      	movs	r3, #0
	}

	/* To use same Data Channel PDU structure with nRF5 specific overhead
	 * byte, include the S1 field in radio packet configuration.
	 */
	if (dc) {
    f6b8:	b10c      	cbz	r4, f6be <radio_pkt_configure+0x16>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    f6ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    f6be:	f000 020f 	and.w	r2, r0, #15
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    f6c2:	f1c0 0008 	rsb	r0, r0, #8
    f6c6:	0400      	lsls	r0, r0, #16
    f6c8:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
			    RADIO_PCNF0_LFLEN_Msk) |
    f6cc:	4310      	orrs	r0, r2
			    RADIO_PCNF0_S1LEN_Msk) |
    f6ce:	4303      	orrs	r3, r0
    f6d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    f6d4:	4a0a      	ldr	r2, [pc, #40]	; (f700 <radio_pkt_configure+0x58>)
    f6d6:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   extra;

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    f6da:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    f6de:	4b09      	ldr	r3, [pc, #36]	; (f704 <radio_pkt_configure+0x5c>)
    f6e0:	4003      	ands	r3, r0
    f6e2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    f6e6:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    f6ea:	4319      	orrs	r1, r3
    f6ec:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
    f6f0:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
			    (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			     RADIO_PCNF1_BALEN_Msk) |
			    (((RADIO_PCNF1_ENDIAN_Little) <<
			      RADIO_PCNF1_ENDIAN_Pos) &
			     RADIO_PCNF1_ENDIAN_Msk);
}
    f6f4:	bc10      	pop	{r4}
    f6f6:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
    f6f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    f6fc:	e7dc      	b.n	f6b8 <radio_pkt_configure+0x10>
    f6fe:	bf00      	nop
    f700:	40001000 	.word	0x40001000
    f704:	fef80000 	.word	0xfef80000

0000f708 <radio_pkt_rx_set>:

void radio_pkt_rx_set(void *rx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
    f708:	4b01      	ldr	r3, [pc, #4]	; (f710 <radio_pkt_rx_set+0x8>)
    f70a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    f70e:	4770      	bx	lr
    f710:	40001000 	.word	0x40001000

0000f714 <radio_pkt_tx_set>:
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    f714:	4b01      	ldr	r3, [pc, #4]	; (f71c <radio_pkt_tx_set+0x8>)
    f716:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    f71a:	4770      	bx	lr
    f71c:	40001000 	.word	0x40001000

0000f720 <radio_tx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f720:	208c      	movs	r0, #140	; 0x8c
    f722:	4770      	bx	lr

0000f724 <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f724:	2001      	movs	r0, #1
    f726:	4770      	bx	lr

0000f728 <radio_rx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f728:	208c      	movs	r0, #140	; 0x8c
    f72a:	4770      	bx	lr

0000f72c <radio_rx_chain_delay_get>:
		} else {
			return 20; /* ciel(19.6) */
		}
	}
#else /* !CONFIG_SOC_NRF52840 */
	switch (phy) {
    f72c:	2802      	cmp	r0, #2
    f72e:	d101      	bne.n	f734 <radio_rx_chain_delay_get+0x8>
	default:
	case BIT(0):
		return 10; /* ceil(9.4) */
	case BIT(1):
		return 5; /* ceil(5) */
    f730:	2005      	movs	r0, #5
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f732:	4770      	bx	lr
		return 10; /* ceil(9.4) */
    f734:	200a      	movs	r0, #10
    f736:	4770      	bx	lr

0000f738 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    f738:	2201      	movs	r2, #1
    f73a:	4b01      	ldr	r3, [pc, #4]	; (f740 <radio_rx_enable+0x8>)
    f73c:	605a      	str	r2, [r3, #4]
    f73e:	4770      	bx	lr
    f740:	40001000 	.word	0x40001000

0000f744 <radio_tx_enable>:
}

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    f744:	2201      	movs	r2, #1
    f746:	4b01      	ldr	r3, [pc, #4]	; (f74c <radio_tx_enable+0x8>)
    f748:	601a      	str	r2, [r3, #0]
    f74a:	4770      	bx	lr
    f74c:	40001000 	.word	0x40001000

0000f750 <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH9_Msk | PPI_CHEN_CH12_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    f750:	4b03      	ldr	r3, [pc, #12]	; (f760 <radio_disable+0x10>)
    f752:	2200      	movs	r2, #0
    f754:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    f758:	2201      	movs	r2, #1
    f75a:	611a      	str	r2, [r3, #16]
    f75c:	4770      	bx	lr
    f75e:	bf00      	nop
    f760:	40001000 	.word	0x40001000

0000f764 <radio_status_reset>:
}

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    f764:	4b06      	ldr	r3, [pc, #24]	; (f780 <radio_status_reset+0x1c>)
    f766:	2200      	movs	r2, #0
    f768:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_ADDRESS = 0;
    f76c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    f770:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NRF_RADIO->EVENTS_END = 0;
    f774:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    f778:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    f77c:	4770      	bx	lr
    f77e:	bf00      	nop
    f780:	40001000 	.word	0x40001000

0000f784 <radio_is_ready>:
}

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    f784:	4b03      	ldr	r3, [pc, #12]	; (f794 <radio_is_ready+0x10>)
    f786:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    f78a:	3000      	adds	r0, #0
    f78c:	bf18      	it	ne
    f78e:	2001      	movne	r0, #1
    f790:	4770      	bx	lr
    f792:	bf00      	nop
    f794:	40001000 	.word	0x40001000

0000f798 <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    f798:	4b03      	ldr	r3, [pc, #12]	; (f7a8 <radio_is_done+0x10>)
    f79a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    f79e:	3000      	adds	r0, #0
    f7a0:	bf18      	it	ne
    f7a2:	2001      	movne	r0, #1
    f7a4:	4770      	bx	lr
    f7a6:	bf00      	nop
    f7a8:	40001000 	.word	0x40001000

0000f7ac <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    f7ac:	4b03      	ldr	r3, [pc, #12]	; (f7bc <radio_is_idle+0x10>)
    f7ae:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    f7b2:	fab0 f080 	clz	r0, r0
    f7b6:	0940      	lsrs	r0, r0, #5
    f7b8:	4770      	bx	lr
    f7ba:	bf00      	nop
    f7bc:	40001000 	.word	0x40001000

0000f7c0 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
	NRF_RADIO->CRCCNF =
    f7c0:	4b04      	ldr	r3, [pc, #16]	; (f7d4 <radio_crc_configure+0x14>)
    f7c2:	f240 1203 	movw	r2, #259	; 0x103
    f7c6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    f7ca:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    f7ce:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    f7d2:	4770      	bx	lr
    f7d4:	40001000 	.word	0x40001000

0000f7d8 <radio_crc_is_valid>:
}

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    f7d8:	4b03      	ldr	r3, [pc, #12]	; (f7e8 <radio_crc_is_valid+0x10>)
    f7da:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    f7de:	3000      	adds	r0, #0
    f7e0:	bf18      	it	ne
    f7e2:	2001      	movne	r0, #1
    f7e4:	4770      	bx	lr
    f7e6:	bf00      	nop
    f7e8:	40001000 	.word	0x40001000

0000f7ec <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    f7ec:	4800      	ldr	r0, [pc, #0]	; (f7f0 <radio_pkt_empty_get+0x4>)
    f7ee:	4770      	bx	lr
    f7f0:	20001314 	.word	0x20001314

0000f7f4 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    f7f4:	4800      	ldr	r0, [pc, #0]	; (f7f8 <radio_pkt_scratch_get+0x4>)
    f7f6:	4770      	bx	lr
    f7f8:	20001318 	.word	0x20001318

0000f7fc <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy_rx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    f7fc:	220b      	movs	r2, #11
    f7fe:	4b02      	ldr	r3, [pc, #8]	; (f808 <radio_switch_complete_and_rx+0xc>)
    f800:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f804:	4770      	bx	lr
    f806:	bf00      	nop
    f808:	40001000 	.word	0x40001000

0000f80c <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy_rx, u8_t flags_rx, u8_t phy_tx,
				  u8_t flags_tx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    f80c:	2207      	movs	r2, #7
    f80e:	4b02      	ldr	r3, [pc, #8]	; (f818 <radio_switch_complete_and_tx+0xc>)
    f810:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f814:	4770      	bx	lr
    f816:	bf00      	nop
    f818:	40001000 	.word	0x40001000

0000f81c <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    f81c:	2203      	movs	r2, #3
    f81e:	4b02      	ldr	r3, [pc, #8]	; (f828 <radio_switch_complete_and_disable+0xc>)
    f820:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f824:	4770      	bx	lr
    f826:	bf00      	nop
    f828:	40001000 	.word	0x40001000

0000f82c <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    f82c:	4a03      	ldr	r2, [pc, #12]	; (f83c <radio_rssi_measure+0x10>)
    f82e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    f832:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    f836:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    f83a:	4770      	bx	lr
    f83c:	40001000 	.word	0x40001000

0000f840 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    f840:	4b01      	ldr	r3, [pc, #4]	; (f848 <radio_rssi_get+0x8>)
    f842:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    f846:	4770      	bx	lr
    f848:	40001000 	.word	0x40001000

0000f84c <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    f84c:	2200      	movs	r2, #0
    f84e:	4b02      	ldr	r3, [pc, #8]	; (f858 <radio_rssi_status_reset+0xc>)
    f850:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    f854:	4770      	bx	lr
    f856:	bf00      	nop
    f858:	40001000 	.word	0x40001000

0000f85c <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    f85c:	4b03      	ldr	r3, [pc, #12]	; (f86c <radio_rssi_is_ready+0x10>)
    f85e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    f862:	3000      	adds	r0, #0
    f864:	bf18      	it	ne
    f866:	2001      	movne	r0, #1
    f868:	4770      	bx	lr
    f86a:	bf00      	nop
    f86c:	40001000 	.word	0x40001000

0000f870 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    f870:	b470      	push	{r4, r5, r6}
	u8_t index;

	for (index = 0; index < 8; index++) {
    f872:	2400      	movs	r4, #0
    f874:	e019      	b.n	f8aa <radio_filter_configure+0x3a>
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f876:	78d5      	ldrb	r5, [r2, #3]
			((u32_t)bdaddr[2] << 16) |
    f878:	7893      	ldrb	r3, [r2, #2]
    f87a:	041b      	lsls	r3, r3, #16
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f87c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
			((u32_t)bdaddr[1] << 8) |
    f880:	7855      	ldrb	r5, [r2, #1]
			((u32_t)bdaddr[2] << 16) |
    f882:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
			bdaddr[0];
    f886:	7815      	ldrb	r5, [r2, #0]
			((u32_t)bdaddr[1] << 8) |
    f888:	432b      	orrs	r3, r5
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f88a:	4d0c      	ldr	r5, [pc, #48]	; (f8bc <radio_filter_configure+0x4c>)
    f88c:	f504 76c0 	add.w	r6, r4, #384	; 0x180
    f890:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    f894:	7956      	ldrb	r6, [r2, #5]
    f896:	7913      	ldrb	r3, [r2, #4]
    f898:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    f89c:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    f8a0:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		bdaddr += 6;
    f8a4:	3206      	adds	r2, #6
	for (index = 0; index < 8; index++) {
    f8a6:	3401      	adds	r4, #1
    f8a8:	b2e4      	uxtb	r4, r4
    f8aa:	2c07      	cmp	r4, #7
    f8ac:	d9e3      	bls.n	f876 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    f8ae:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    f8b2:	4b02      	ldr	r3, [pc, #8]	; (f8bc <radio_filter_configure+0x4c>)
    f8b4:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
    f8b8:	bc70      	pop	{r4, r5, r6}
    f8ba:	4770      	bx	lr
    f8bc:	40001000 	.word	0x40001000

0000f8c0 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    f8c0:	4a03      	ldr	r2, [pc, #12]	; (f8d0 <radio_filter_disable+0x10>)
    f8c2:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    f8c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    f8ca:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    f8ce:	4770      	bx	lr
    f8d0:	40001000 	.word	0x40001000

0000f8d4 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    f8d4:	4b03      	ldr	r3, [pc, #12]	; (f8e4 <radio_filter_status_reset+0x10>)
    f8d6:	2200      	movs	r2, #0
    f8d8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	NRF_RADIO->EVENTS_DEVMISS = 0;
    f8dc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    f8e0:	4770      	bx	lr
    f8e2:	bf00      	nop
    f8e4:	40001000 	.word	0x40001000

0000f8e8 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    f8e8:	4b03      	ldr	r3, [pc, #12]	; (f8f8 <radio_filter_has_match+0x10>)
    f8ea:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    f8ee:	3000      	adds	r0, #0
    f8f0:	bf18      	it	ne
    f8f2:	2001      	movne	r0, #1
    f8f4:	4770      	bx	lr
    f8f6:	bf00      	nop
    f8f8:	40001000 	.word	0x40001000

0000f8fc <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    f8fc:	4b01      	ldr	r3, [pc, #4]	; (f904 <radio_filter_match_get+0x8>)
    f8fe:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    f902:	4770      	bx	lr
    f904:	40001000 	.word	0x40001000

0000f908 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    f908:	4b04      	ldr	r3, [pc, #16]	; (f91c <radio_bc_configure+0x14>)
    f90a:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    f90e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f916:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f91a:	4770      	bx	lr
    f91c:	40001000 	.word	0x40001000

0000f920 <radio_bc_status_reset>:
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    f920:	2200      	movs	r2, #0
    f922:	4b02      	ldr	r3, [pc, #8]	; (f92c <radio_bc_status_reset+0xc>)
    f924:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    f928:	4770      	bx	lr
    f92a:	bf00      	nop
    f92c:	40001000 	.word	0x40001000

0000f930 <radio_bc_has_match>:
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    f930:	4b03      	ldr	r3, [pc, #12]	; (f940 <radio_bc_has_match+0x10>)
    f932:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
}
    f936:	3000      	adds	r0, #0
    f938:	bf18      	it	ne
    f93a:	2001      	movne	r0, #1
    f93c:	4770      	bx	lr
    f93e:	bf00      	nop
    f940:	40001000 	.word	0x40001000

0000f944 <radio_tmr_status_reset>:

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    f944:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    f948:	4b04      	ldr	r3, [pc, #16]	; (f95c <radio_tmr_status_reset+0x18>)
    f94a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	NRF_PPI->CHENCLR =
    f94e:	f248 027f 	movw	r2, #32895	; 0x807f
    f952:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    f956:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    f95a:	4770      	bx	lr
    f95c:	4000b000 	.word	0x4000b000

0000f960 <radio_tmr_tifs_set>:
}

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    f960:	4b01      	ldr	r3, [pc, #4]	; (f968 <radio_tmr_tifs_set+0x8>)
    f962:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    f966:	4770      	bx	lr
    f968:	40001000 	.word	0x40001000

0000f96c <radio_tmr_start>:
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    f96c:	b470      	push	{r4, r5, r6}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    f96e:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    f972:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    f976:	4c21      	ldr	r4, [pc, #132]	; (f9fc <radio_tmr_start+0x90>)
    f978:	42a3      	cmp	r3, r4
    f97a:	d906      	bls.n	f98a <radio_tmr_start+0x1e>
		ticks_start--;
    f97c:	3901      	subs	r1, #1
		remainder += 30517578UL;
    f97e:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
    f982:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
    f986:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
	}
	remainder /= 1000000UL;
    f98a:	4b1d      	ldr	r3, [pc, #116]	; (fa00 <radio_tmr_start+0x94>)
    f98c:	fba3 3202 	umull	r3, r2, r3, r2
    f990:	0c92      	lsrs	r2, r2, #18

	NRF_TIMER0->TASKS_CLEAR = 1;
    f992:	4b1c      	ldr	r3, [pc, #112]	; (fa04 <radio_tmr_start+0x98>)
    f994:	2401      	movs	r4, #1
    f996:	60dc      	str	r4, [r3, #12]
	NRF_TIMER0->MODE = 0;
    f998:	2500      	movs	r5, #0
    f99a:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	NRF_TIMER0->PRESCALER = 4;
    f99e:	2404      	movs	r4, #4
    f9a0:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    f9a4:	2602      	movs	r6, #2
    f9a6:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508

	NRF_TIMER0->CC[0] = remainder;
    f9aa:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    f9ae:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140

	NRF_RTC0->CC[2] = ticks_start;
    f9b2:	4c15      	ldr	r4, [pc, #84]	; (fa08 <radio_tmr_start+0x9c>)
    f9b4:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    f9b8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    f9bc:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    f9c0:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    f9c4:	4911      	ldr	r1, [pc, #68]	; (fa0c <radio_tmr_start+0xa0>)
    f9c6:	f504 74a4 	add.w	r4, r4, #328	; 0x148
    f9ca:	f8c1 4518 	str.w	r4, [r1, #1304]	; 0x518
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    f9ce:	f8c1 351c 	str.w	r3, [r1, #1308]	; 0x51c
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    f9d2:	f8c1 6504 	str.w	r6, [r1, #1284]	; 0x504

	NRF_PPI->CH[0].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
    f9d6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    f9da:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    f9de:	b948      	cbnz	r0, f9f4 <radio_tmr_start+0x88>
    f9e0:	490b      	ldr	r1, [pc, #44]	; (fa10 <radio_tmr_start+0xa4>)
    f9e2:	4b0a      	ldr	r3, [pc, #40]	; (fa0c <radio_tmr_start+0xa0>)
    f9e4:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
				     (u32_t)&(NRF_RADIO->TASKS_RXEN);
	NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    f9e8:	2101      	movs	r1, #1
    f9ea:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_PPI->CHG[0] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH11_Msk | PPI_CHG_CH14_Msk;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
    f9ee:	4610      	mov	r0, r2
    f9f0:	bc70      	pop	{r4, r5, r6}
    f9f2:	4770      	bx	lr
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    f9f4:	f5a1 31f0 	sub.w	r1, r1, #122880	; 0x1e000
    f9f8:	e7f3      	b.n	f9e2 <radio_tmr_start+0x76>
    f9fa:	bf00      	nop
    f9fc:	7ff0bdbf 	.word	0x7ff0bdbf
    fa00:	431bde83 	.word	0x431bde83
    fa04:	40008000 	.word	0x40008000
    fa08:	4000b000 	.word	0x4000b000
    fa0c:	4001f000 	.word	0x4001f000
    fa10:	40001004 	.word	0x40001004

0000fa14 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
    fa14:	4b02      	ldr	r3, [pc, #8]	; (fa20 <radio_tmr_stop+0xc>)
    fa16:	2201      	movs	r2, #1
    fa18:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    fa1a:	611a      	str	r2, [r3, #16]
    fa1c:	4770      	bx	lr
    fa1e:	bf00      	nop
    fa20:	40008000 	.word	0x40008000

0000fa24 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[1] = hcto;
    fa24:	4b0e      	ldr	r3, [pc, #56]	; (fa60 <radio_tmr_hcto_configure+0x3c>)
    fa26:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	NRF_TIMER0->EVENTS_COMPARE[1] = 0;
    fa2a:	2200      	movs	r2, #0
    fa2c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    fa30:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    fa34:	4a0b      	ldr	r2, [pc, #44]	; (fa64 <radio_tmr_hcto_configure+0x40>)
    fa36:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    fa3a:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    fa3e:	3240      	adds	r2, #64	; 0x40
    fa40:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[1]);
    fa44:	f502 7280 	add.w	r2, r2, #256	; 0x100
    fa48:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
    fa4c:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    fa50:	3a34      	subs	r2, #52	; 0x34
    fa52:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_PPI->CHENSET = (PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk);
    fa56:	2218      	movs	r2, #24
    fa58:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fa5c:	4770      	bx	lr
    fa5e:	bf00      	nop
    fa60:	40008000 	.word	0x40008000
    fa64:	40001104 	.word	0x40001104

0000fa68 <radio_tmr_aa_capture>:
}

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
    fa68:	4b0b      	ldr	r3, [pc, #44]	; (fa98 <radio_tmr_aa_capture+0x30>)
    fa6a:	4a0c      	ldr	r2, [pc, #48]	; (fa9c <radio_tmr_aa_capture+0x34>)
    fa6c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    fa70:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    fa74:	3240      	adds	r2, #64	; 0x40
    fa76:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    fa7a:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    fa7e:	3a3c      	subs	r2, #60	; 0x3c
    fa80:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    fa84:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    fa88:	3240      	adds	r2, #64	; 0x40
    fa8a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    fa8e:	220c      	movs	r2, #12
    fa90:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fa94:	4770      	bx	lr
    fa96:	bf00      	nop
    fa98:	4001f000 	.word	0x4001f000
    fa9c:	40001100 	.word	0x40001100

0000faa0 <radio_tmr_aa_get>:
}

u32_t radio_tmr_aa_get(void)
{
	return NRF_TIMER0->CC[1];
    faa0:	4b01      	ldr	r3, [pc, #4]	; (faa8 <radio_tmr_aa_get+0x8>)
    faa2:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    faa6:	4770      	bx	lr
    faa8:	40008000 	.word	0x40008000

0000faac <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    faac:	4b01      	ldr	r3, [pc, #4]	; (fab4 <radio_tmr_aa_save+0x8>)
    faae:	6018      	str	r0, [r3, #0]
    fab0:	4770      	bx	lr
    fab2:	bf00      	nop
    fab4:	2000141c 	.word	0x2000141c

0000fab8 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    fab8:	4b01      	ldr	r3, [pc, #4]	; (fac0 <radio_tmr_aa_restore+0x8>)
    faba:	6818      	ldr	r0, [r3, #0]
    fabc:	4770      	bx	lr
    fabe:	bf00      	nop
    fac0:	2000141c 	.word	0x2000141c

0000fac4 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return NRF_TIMER0->CC[0];
    fac4:	4b01      	ldr	r3, [pc, #4]	; (facc <radio_tmr_ready_get+0x8>)
    fac6:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    faca:	4770      	bx	lr
    facc:	40008000 	.word	0x40008000

0000fad0 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
    fad0:	4b06      	ldr	r3, [pc, #24]	; (faec <radio_tmr_end_capture+0x1c>)
    fad2:	4a07      	ldr	r2, [pc, #28]	; (faf0 <radio_tmr_end_capture+0x20>)
    fad4:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    fad8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    fadc:	323c      	adds	r2, #60	; 0x3c
    fade:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	NRF_PPI->CHENSET = PPI_CHEN_CH5_Msk;
    fae2:	2220      	movs	r2, #32
    fae4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fae8:	4770      	bx	lr
    faea:	bf00      	nop
    faec:	4001f000 	.word	0x4001f000
    faf0:	4000110c 	.word	0x4000110c

0000faf4 <radio_tmr_end_get>:
}

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
    faf4:	4b01      	ldr	r3, [pc, #4]	; (fafc <radio_tmr_end_get+0x8>)
    faf6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    fafa:	4770      	bx	lr
    fafc:	40008000 	.word	0x40008000

0000fb00 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
    fb00:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    fb02:	4b18      	ldr	r3, [pc, #96]	; (fb64 <radio_ccm_rx_pkt_set+0x64>)
    fb04:	2400      	movs	r4, #0
    fb06:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    fb0a:	2402      	movs	r4, #2
    fb0c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
    fb10:	42a1      	cmp	r1, r4
    fb12:	d125      	bne.n	fb60 <radio_ccm_rx_pkt_set+0x60>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
    fb14:	4914      	ldr	r1, [pc, #80]	; (fb68 <radio_ccm_rx_pkt_set+0x68>)
		NRF_PPI->CHENSET = PPI_CHEN_CH15_Msk;
		break;
#endif /* CONFIG_SOC_NRF52840 */
	}
#endif
	NRF_CCM->MODE = mode;
    fb16:	4b13      	ldr	r3, [pc, #76]	; (fb64 <radio_ccm_rx_pkt_set+0x64>)
    fb18:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    fb1c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    fb20:	4812      	ldr	r0, [pc, #72]	; (fb6c <radio_ccm_rx_pkt_set+0x6c>)
    fb22:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    fb26:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    fb2a:	4a11      	ldr	r2, [pc, #68]	; (fb70 <radio_ccm_rx_pkt_set+0x70>)
    fb2c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
    fb30:	2200      	movs	r2, #0
    fb32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    fb36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    fb3a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    fb3e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    fb42:	4a0c      	ldr	r2, [pc, #48]	; (fb74 <radio_ccm_rx_pkt_set+0x74>)
    fb44:	490c      	ldr	r1, [pc, #48]	; (fb78 <radio_ccm_rx_pkt_set+0x78>)
    fb46:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
    fb4a:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    fb4e:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    fb52:	2140      	movs	r1, #64	; 0x40
    fb54:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504

	NRF_CCM->TASKS_KSGEN = 1;
    fb58:	2201      	movs	r2, #1
    fb5a:	601a      	str	r2, [r3, #0]

	return _pkt_scratch;
}
    fb5c:	bc10      	pop	{r4}
    fb5e:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    fb60:	4906      	ldr	r1, [pc, #24]	; (fb7c <radio_ccm_rx_pkt_set+0x7c>)
    fb62:	e7d8      	b.n	fb16 <radio_ccm_rx_pkt_set+0x16>
    fb64:	4000f000 	.word	0x4000f000
    fb68:	01010001 	.word	0x01010001
    fb6c:	20001318 	.word	0x20001318
    fb70:	20001208 	.word	0x20001208
    fb74:	4001f000 	.word	0x4001f000
    fb78:	40001104 	.word	0x40001104
    fb7c:	01000001 	.word	0x01000001

0000fb80 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    fb80:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    fb82:	4b10      	ldr	r3, [pc, #64]	; (fbc4 <radio_ccm_tx_pkt_set+0x44>)
    fb84:	2200      	movs	r2, #0
    fb86:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    fb8a:	2402      	movs	r4, #2
    fb8c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    fb90:	4c0d      	ldr	r4, [pc, #52]	; (fbc8 <radio_ccm_tx_pkt_set+0x48>)
    fb92:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    fb96:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    fb9a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    fb9e:	480b      	ldr	r0, [pc, #44]	; (fbcc <radio_ccm_tx_pkt_set+0x4c>)
    fba0:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    fba4:	490a      	ldr	r1, [pc, #40]	; (fbd0 <radio_ccm_tx_pkt_set+0x50>)
    fba6:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    fbaa:	2101      	movs	r1, #1
    fbac:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    fbb0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    fbb4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    fbb8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    fbbc:	6019      	str	r1, [r3, #0]

	return _pkt_scratch;
}
    fbbe:	bc10      	pop	{r4}
    fbc0:	4770      	bx	lr
    fbc2:	bf00      	nop
    fbc4:	4000f000 	.word	0x4000f000
    fbc8:	01010000 	.word	0x01010000
    fbcc:	20001318 	.word	0x20001318
    fbd0:	20001208 	.word	0x20001208

0000fbd4 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    fbd4:	2202      	movs	r2, #2
    fbd6:	4b0d      	ldr	r3, [pc, #52]	; (fc0c <radio_ccm_is_done+0x38>)
    fbd8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    fbdc:	e002      	b.n	fbe4 <radio_ccm_is_done+0x10>
    fbde:	bf20      	wfe
  __ASM volatile ("sev");
    fbe0:	bf40      	sev
  __ASM volatile ("wfe");
    fbe2:	bf20      	wfe
    fbe4:	4b09      	ldr	r3, [pc, #36]	; (fc0c <radio_ccm_is_done+0x38>)
    fbe6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    fbea:	2b00      	cmp	r3, #0
    fbec:	d0f7      	beq.n	fbde <radio_ccm_is_done+0xa>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    fbee:	4b07      	ldr	r3, [pc, #28]	; (fc0c <radio_ccm_is_done+0x38>)
    fbf0:	2202      	movs	r2, #2
    fbf2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    fbf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    fbfa:	4a05      	ldr	r2, [pc, #20]	; (fc10 <radio_ccm_is_done+0x3c>)
    fbfc:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    fc00:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    fc04:	fab0 f080 	clz	r0, r0
    fc08:	0940      	lsrs	r0, r0, #5
    fc0a:	4770      	bx	lr
    fc0c:	4000f000 	.word	0x4000f000
    fc10:	e000e100 	.word	0xe000e100

0000fc14 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    fc14:	4b03      	ldr	r3, [pc, #12]	; (fc24 <radio_ccm_mic_is_valid+0x10>)
    fc16:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    fc1a:	3000      	adds	r0, #0
    fc1c:	bf18      	it	ne
    fc1e:	2001      	movne	r0, #1
    fc20:	4770      	bx	lr
    fc22:	bf00      	nop
    fc24:	4000f000 	.word	0x4000f000

0000fc28 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    fc28:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
    fc2a:	4c13      	ldr	r4, [pc, #76]	; (fc78 <radio_ar_configure+0x50>)
    fc2c:	2303      	movs	r3, #3
    fc2e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
    fc32:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
    fc36:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
    fc3a:	4b10      	ldr	r3, [pc, #64]	; (fc7c <radio_ar_configure+0x54>)
    fc3c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    fc40:	3b01      	subs	r3, #1
    fc42:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
    fc46:	4b0e      	ldr	r3, [pc, #56]	; (fc80 <radio_ar_configure+0x58>)
    fc48:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	NRF_AAR->EVENTS_END = 0;
    fc4c:	2300      	movs	r3, #0
    fc4e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
    fc52:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
    fc56:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

	radio_bc_configure(64);
    fc5a:	2040      	movs	r0, #64	; 0x40
    fc5c:	f7ff fe54 	bl	f908 <radio_bc_configure>
	radio_bc_status_reset();
    fc60:	f7ff fe5e 	bl	f920 <radio_bc_status_reset>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    fc64:	4b07      	ldr	r3, [pc, #28]	; (fc84 <radio_ar_configure+0x5c>)
    fc66:	4a08      	ldr	r2, [pc, #32]	; (fc88 <radio_ar_configure+0x60>)
    fc68:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
    fc6c:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    fc70:	2240      	movs	r2, #64	; 0x40
    fc72:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fc76:	bd10      	pop	{r4, pc}
    fc78:	4000f000 	.word	0x4000f000
    fc7c:	40001000 	.word	0x40001000
    fc80:	20001204 	.word	0x20001204
    fc84:	4001f000 	.word	0x4001f000
    fc88:	40001128 	.word	0x40001128

0000fc8c <radio_ar_match_get>:
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    fc8c:	4b01      	ldr	r3, [pc, #4]	; (fc94 <radio_ar_match_get+0x8>)
    fc8e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    fc92:	4770      	bx	lr
    fc94:	4000f000 	.word	0x4000f000

0000fc98 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
    fc98:	b508      	push	{r3, lr}
	radio_bc_status_reset();
    fc9a:	f7ff fe41 	bl	f920 <radio_bc_status_reset>

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    fc9e:	2200      	movs	r2, #0
    fca0:	4b01      	ldr	r3, [pc, #4]	; (fca8 <radio_ar_status_reset+0x10>)
    fca2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    fca6:	bd08      	pop	{r3, pc}
    fca8:	4000f000 	.word	0x4000f000

0000fcac <radio_ar_has_match>:
			  AAR_ENABLE_ENABLE_Msk;
}

u32_t radio_ar_has_match(void)
{
    fcac:	b508      	push	{r3, lr}
	return (radio_bc_has_match() &&
    fcae:	f7ff fe3f 	bl	f930 <radio_bc_has_match>
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    fcb2:	b168      	cbz	r0, fcd0 <radio_ar_has_match+0x24>
		NRF_AAR->EVENTS_END &&
    fcb4:	4b0a      	ldr	r3, [pc, #40]	; (fce0 <radio_ar_has_match+0x34>)
    fcb6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    fcba:	b15b      	cbz	r3, fcd4 <radio_ar_has_match+0x28>
		NRF_AAR->EVENTS_RESOLVED &&
    fcbc:	4b08      	ldr	r3, [pc, #32]	; (fce0 <radio_ar_has_match+0x34>)
    fcbe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    fcc2:	b14b      	cbz	r3, fcd8 <radio_ar_has_match+0x2c>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    fcc4:	4b06      	ldr	r3, [pc, #24]	; (fce0 <radio_ar_has_match+0x34>)
    fcc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    fcca:	b13b      	cbz	r3, fcdc <radio_ar_has_match+0x30>
    fccc:	2000      	movs	r0, #0
    fcce:	bd08      	pop	{r3, pc}
    fcd0:	2000      	movs	r0, #0
    fcd2:	bd08      	pop	{r3, pc}
    fcd4:	2000      	movs	r0, #0
    fcd6:	bd08      	pop	{r3, pc}
    fcd8:	2000      	movs	r0, #0
    fcda:	bd08      	pop	{r3, pc}
    fcdc:	2001      	movs	r0, #1
}
    fcde:	bd08      	pop	{r3, pc}
    fce0:	4000f000 	.word	0x4000f000
    fce4:	00000000 	.word	0x00000000

0000fce8 <isr>:

static int isr(struct rand *rng, bool store)
{
	u8_t last;

	if (!rng) {
    fce8:	b1f0      	cbz	r0, fd28 <isr+0x40>
{
    fcea:	b430      	push	{r4, r5}
    fcec:	4602      	mov	r2, r0
		return -ENOBUFS;
	}

	last = rng->last + 1;
    fcee:	78c0      	ldrb	r0, [r0, #3]
    fcf0:	1c43      	adds	r3, r0, #1
    fcf2:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    fcf4:	7815      	ldrb	r5, [r2, #0]
    fcf6:	42ab      	cmp	r3, r5
    fcf8:	d012      	beq.n	fd20 <isr+0x38>
		last = 0;
	}

	if (last == rng->first) {
    fcfa:	7894      	ldrb	r4, [r2, #2]
    fcfc:	42a3      	cmp	r3, r4
    fcfe:	d016      	beq.n	fd2e <isr+0x46>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    fd00:	b1c1      	cbz	r1, fd34 <isr+0x4c>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    fd02:	490f      	ldr	r1, [pc, #60]	; (fd40 <isr+0x58>)
    fd04:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    fd08:	4410      	add	r0, r2
    fd0a:	7101      	strb	r1, [r0, #4]
	rng->last = last;
    fd0c:	70d3      	strb	r3, [r2, #3]

	last = rng->last + 1;
    fd0e:	3301      	adds	r3, #1
    fd10:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    fd12:	429d      	cmp	r5, r3
    fd14:	d006      	beq.n	fd24 <isr+0x3c>
		last = 0;
	}

	if (last == rng->first) {
    fd16:	42a3      	cmp	r3, r4
    fd18:	d10f      	bne.n	fd3a <isr+0x52>
		return 0;
    fd1a:	2000      	movs	r0, #0
	}

	return -EBUSY;
}
    fd1c:	bc30      	pop	{r4, r5}
    fd1e:	4770      	bx	lr
		last = 0;
    fd20:	2300      	movs	r3, #0
    fd22:	e7ea      	b.n	fcfa <isr+0x12>
		last = 0;
    fd24:	2300      	movs	r3, #0
    fd26:	e7f6      	b.n	fd16 <isr+0x2e>
		return -ENOBUFS;
    fd28:	f06f 0068 	mvn.w	r0, #104	; 0x68
    fd2c:	4770      	bx	lr
		return -ENOBUFS;
    fd2e:	f06f 0068 	mvn.w	r0, #104	; 0x68
    fd32:	e7f3      	b.n	fd1c <isr+0x34>
		return -EBUSY;
    fd34:	f06f 000f 	mvn.w	r0, #15
    fd38:	e7f0      	b.n	fd1c <isr+0x34>
	return -EBUSY;
    fd3a:	f06f 000f 	mvn.w	r0, #15
    fd3e:	e7ed      	b.n	fd1c <isr+0x34>
    fd40:	4000d000 	.word	0x4000d000
    fd44:	00000000 	.word	0x00000000

0000fd48 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    fd48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fd4c:	b08a      	sub	sp, #40	; 0x28
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    fd4e:	f7ff fd23 	bl	f798 <radio_is_done>
    fd52:	b2c4      	uxtb	r4, r0
	if (trx_done) {
    fd54:	b9e4      	cbnz	r4, fd90 <isr+0x48>
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    fd56:	46a0      	mov	r8, r4
    fd58:	46a1      	mov	r9, r4
    fd5a:	4627      	mov	r7, r4
    fd5c:	4626      	mov	r6, r4
		devmatch_id = irkmatch_id = 0xFF;
    fd5e:	25ff      	movs	r5, #255	; 0xff
    fd60:	46aa      	mov	sl, r5
	}

	/* Clear radio status and events */
	radio_status_reset();
    fd62:	f7ff fcff 	bl	f764 <radio_status_reset>
	radio_tmr_status_reset();
    fd66:	f7ff fded 	bl	f944 <radio_tmr_status_reset>
	radio_filter_status_reset();
    fd6a:	f7ff fdb3 	bl	f8d4 <radio_filter_status_reset>
	radio_ar_status_reset();
    fd6e:	f7ff ff93 	bl	fc98 <radio_ar_status_reset>
	radio_rssi_status_reset();
    fd72:	f7ff fd6b 	bl	f84c <radio_rssi_status_reset>
#if defined(CONFIG_BT_CTLR_GPIO_PA_PIN) || \
    defined(CONFIG_BT_CTLR_GPIO_LNA_PIN)
	radio_gpio_pa_lna_disable();
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

	switch (_radio.state) {
    fd76:	4bb6      	ldr	r3, [pc, #728]	; (10050 <__kernel_ram_size+0x50>)
    fd78:	7c1b      	ldrb	r3, [r3, #16]
    fd7a:	2b05      	cmp	r3, #5
    fd7c:	f200 8456 	bhi.w	1062c <__kernel_ram_size+0x62c>
    fd80:	e8df f013 	tbh	[pc, r3, lsl #1]
    fd84:	00e801f3 	.word	0x00e801f3
    fd88:	016e001c 	.word	0x016e001c
    fd8c:	016e016e 	.word	0x016e016e
		crc_ok = radio_crc_is_valid();
    fd90:	f7ff fd22 	bl	f7d8 <radio_crc_is_valid>
    fd94:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
    fd96:	f7ff fda7 	bl	f8e8 <radio_filter_has_match>
    fd9a:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
    fd9c:	f7ff fdae 	bl	f8fc <radio_filter_match_get>
    fda0:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_ok = radio_ar_has_match();
    fda4:	f7ff ff82 	bl	fcac <radio_ar_has_match>
    fda8:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_id = radio_ar_match_get();
    fdac:	f7ff ff6e 	bl	fc8c <radio_ar_match_get>
    fdb0:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
    fdb2:	f7ff fd53 	bl	f85c <radio_rssi_is_ready>
    fdb6:	fa5f f880 	uxtb.w	r8, r0
    fdba:	e7d2      	b.n	fd62 <isr+0x1a>
	_radio.state = STATE_RX;
    fdbc:	4da4      	ldr	r5, [pc, #656]	; (10050 <__kernel_ram_size+0x50>)
    fdbe:	2301      	movs	r3, #1
    fdc0:	742b      	strb	r3, [r5, #16]
	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    fdc2:	f7ff fe97 	bl	faf4 <radio_tmr_end_get>
    fdc6:	f100 049b 	add.w	r4, r0, #155	; 0x9b
	radio_tmr_tifs_set(RADIO_TIFS);
    fdca:	2096      	movs	r0, #150	; 0x96
    fdcc:	f7ff fdc8 	bl	f960 <radio_tmr_tifs_set>
	switch (_radio.role) {
    fdd0:	7beb      	ldrb	r3, [r5, #15]
    fdd2:	3b01      	subs	r3, #1
    fdd4:	2b03      	cmp	r3, #3
    fdd6:	f200 80b7 	bhi.w	ff48 <isr+0x200>
    fdda:	e8df f003 	tbb	[pc, r3]
    fdde:	3202      	.short	0x3202
    fde0:	6868      	.short	0x6868
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fde2:	2300      	movs	r3, #0
    fde4:	461a      	mov	r2, r3
    fde6:	4619      	mov	r1, r3
    fde8:	4618      	mov	r0, r3
    fdea:	f7ff fd0f 	bl	f80c <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    fdee:	f7ff fd01 	bl	f7f4 <radio_pkt_scratch_get>
    fdf2:	f7ff fc89 	bl	f708 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    fdf6:	f7ff fcc5 	bl	f784 <radio_is_ready>
    fdfa:	b990      	cbnz	r0, fe22 <isr+0xda>
		if (ctrl_rl_enabled()) {
    fdfc:	f00a f802 	bl	19e04 <ctrl_rl_enabled>
    fe00:	b9a8      	cbnz	r0, fe2e <isr+0xe6>
		hcto += radio_rx_chain_delay_get(0, 0);
    fe02:	2100      	movs	r1, #0
    fe04:	4608      	mov	r0, r1
    fe06:	f7ff fc91 	bl	f72c <radio_rx_chain_delay_get>
    fe0a:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    fe0c:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    fe0e:	2100      	movs	r1, #0
    fe10:	4608      	mov	r0, r1
    fe12:	f7ff fc87 	bl	f724 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    fe16:	1a20      	subs	r0, r4, r0
    fe18:	f7ff fe04 	bl	fa24 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    fe1c:	f7ff fe58 	bl	fad0 <radio_tmr_end_capture>
    fe20:	e1a3      	b.n	1016a <__kernel_ram_size+0x16a>
		LL_ASSERT(!radio_is_ready());
    fe22:	4040      	eors	r0, r0
    fe24:	f380 8811 	msr	BASEPRI, r0
    fe28:	f04f 0004 	mov.w	r0, #4
    fe2c:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    fe2e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    fe32:	f009 fd63 	bl	198fc <ctrl_irks_get>
			radio_ar_configure(count, irks);
    fe36:	4601      	mov	r1, r0
    fe38:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    fe3c:	f7ff fef4 	bl	fc28 <radio_ar_configure>
    fe40:	e7df      	b.n	fe02 <isr+0xba>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fe42:	2300      	movs	r3, #0
    fe44:	461a      	mov	r2, r3
    fe46:	4619      	mov	r1, r3
    fe48:	4618      	mov	r0, r3
    fe4a:	f7ff fcdf 	bl	f80c <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    fe4e:	4b80      	ldr	r3, [pc, #512]	; (10050 <__kernel_ram_size+0x50>)
    fe50:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    fe54:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    fe58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    fe5c:	3008      	adds	r0, #8
    fe5e:	f7ff fc53 	bl	f708 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    fe62:	f7ff fc8f 	bl	f784 <radio_is_ready>
    fe66:	b990      	cbnz	r0, fe8e <isr+0x146>
		if (ctrl_rl_enabled()) {
    fe68:	f009 ffcc 	bl	19e04 <ctrl_rl_enabled>
    fe6c:	b9a8      	cbnz	r0, fe9a <isr+0x152>
		hcto += radio_rx_chain_delay_get(0, 0);
    fe6e:	2100      	movs	r1, #0
    fe70:	4608      	mov	r0, r1
    fe72:	f7ff fc5b 	bl	f72c <radio_rx_chain_delay_get>
    fe76:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    fe78:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    fe7a:	2100      	movs	r1, #0
    fe7c:	4608      	mov	r0, r1
    fe7e:	f7ff fc51 	bl	f724 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    fe82:	1a20      	subs	r0, r4, r0
    fe84:	f7ff fdce 	bl	fa24 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    fe88:	f7ff fcd0 	bl	f82c <radio_rssi_measure>
    fe8c:	e16d      	b.n	1016a <__kernel_ram_size+0x16a>
		LL_ASSERT(!radio_is_ready());
    fe8e:	4040      	eors	r0, r0
    fe90:	f380 8811 	msr	BASEPRI, r0
    fe94:	f04f 0004 	mov.w	r0, #4
    fe98:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    fe9a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    fe9e:	f009 fd2d 	bl	198fc <ctrl_irks_get>
			radio_ar_configure(count, irks);
    fea2:	4601      	mov	r1, r0
    fea4:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    fea8:	f7ff febe 	bl	fc28 <radio_ar_configure>
    feac:	e7df      	b.n	fe6e <isr+0x126>
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    feae:	4d68      	ldr	r5, [pc, #416]	; (10050 <__kernel_ram_size+0x50>)
    feb0:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    feb4:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
					     _radio.conn_curr->phy_tx,
    feb8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    febc:	09d3      	lsrs	r3, r2, #7
    febe:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    fec2:	2100      	movs	r1, #0
    fec4:	f000 0007 	and.w	r0, r0, #7
    fec8:	f7ff fca0 	bl	f80c <radio_switch_complete_and_tx>
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    fecc:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    fed0:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
    fed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    fed8:	3108      	adds	r1, #8
    feda:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    fede:	f002 fad3 	bl	12488 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    fee2:	f7ff fc4f 	bl	f784 <radio_is_ready>
    fee6:	bb20      	cbnz	r0, ff32 <isr+0x1ea>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    fee8:	4d59      	ldr	r5, [pc, #356]	; (10050 <__kernel_ram_size+0x50>)
    feea:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    feee:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    fef2:	2101      	movs	r1, #1
    fef4:	f000 0007 	and.w	r0, r0, #7
    fef8:	f7ff fc18 	bl	f72c <radio_rx_chain_delay_get>
    fefc:	4420      	add	r0, r4
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    fefe:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    ff02:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
    ff06:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
    ff0a:	2b02      	cmp	r3, #2
    ff0c:	d01a      	beq.n	ff44 <isr+0x1fc>
    ff0e:	2b04      	cmp	r3, #4
    ff10:	d015      	beq.n	ff3e <isr+0x1f6>
		return 40;
    ff12:	2428      	movs	r4, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    ff14:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    ff16:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
    ff1a:	09c1      	lsrs	r1, r0, #7
    ff1c:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    ff20:	f7ff fc00 	bl	f724 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    ff24:	1a20      	subs	r0, r4, r0
    ff26:	f7ff fd7d 	bl	fa24 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    ff2a:	2001      	movs	r0, #1
    ff2c:	f002 fb0a 	bl	12544 <packet_tx_enqueue>
    ff30:	e11b      	b.n	1016a <__kernel_ram_size+0x16a>
		LL_ASSERT(!radio_is_ready());
    ff32:	4040      	eors	r0, r0
    ff34:	f380 8811 	msr	BASEPRI, r0
    ff38:	f04f 0004 	mov.w	r0, #4
    ff3c:	df02      	svc	2
		return 376;
    ff3e:	f44f 74bc 	mov.w	r4, #376	; 0x178
    ff42:	e7e7      	b.n	ff14 <isr+0x1cc>
		return 24;
    ff44:	2418      	movs	r4, #24
    ff46:	e7e5      	b.n	ff14 <isr+0x1cc>
		LL_ASSERT(0);
    ff48:	4040      	eors	r0, r0
    ff4a:	f380 8811 	msr	BASEPRI, r0
    ff4e:	f04f 0004 	mov.w	r0, #4
    ff52:	df02      	svc	2
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    ff54:	b144      	cbz	r4, ff68 <isr+0x220>
	switch (_radio.role) {
    ff56:	4b3e      	ldr	r3, [pc, #248]	; (10050 <__kernel_ram_size+0x50>)
    ff58:	7bdb      	ldrb	r3, [r3, #15]
    ff5a:	3b01      	subs	r3, #1
    ff5c:	2b03      	cmp	r3, #3
    ff5e:	d879      	bhi.n	10054 <__kernel_ram_size+0x54>
    ff60:	e8df f003 	tbb	[pc, r3]
    ff64:	70701c08 	.word	0x70701c08
		_radio.state = STATE_CLOSE;
    ff68:	2203      	movs	r2, #3
    ff6a:	4b39      	ldr	r3, [pc, #228]	; (10050 <__kernel_ram_size+0x50>)
    ff6c:	741a      	strb	r2, [r3, #16]
		radio_disable();
    ff6e:	f7ff fbef 	bl	f750 <radio_disable>
    ff72:	e0fa      	b.n	1016a <__kernel_ram_size+0x16a>
		if (crc_ok) {
    ff74:	b94e      	cbnz	r6, ff8a <isr+0x242>
			err = 1;
    ff76:	2001      	movs	r0, #1
		if (err) {
    ff78:	2800      	cmp	r0, #0
    ff7a:	f000 80f6 	beq.w	1016a <__kernel_ram_size+0x16a>
			_radio.state = STATE_CLOSE;
    ff7e:	2203      	movs	r2, #3
    ff80:	4b33      	ldr	r3, [pc, #204]	; (10050 <__kernel_ram_size+0x50>)
    ff82:	741a      	strb	r2, [r3, #16]
			radio_disable();
    ff84:	f7ff fbe4 	bl	f750 <radio_disable>
    ff88:	e0ef      	b.n	1016a <__kernel_ram_size+0x16a>
			err = isr_rx_adv(devmatch_ok, devmatch_id, irkmatch_ok,
    ff8a:	f8cd 8000 	str.w	r8, [sp]
    ff8e:	462b      	mov	r3, r5
    ff90:	464a      	mov	r2, r9
    ff92:	4651      	mov	r1, sl
    ff94:	4638      	mov	r0, r7
    ff96:	f007 fc37 	bl	17808 <isr_rx_adv>
    ff9a:	e7ed      	b.n	ff78 <isr+0x230>
		rl_idx = devmatch_ok ?
    ff9c:	b9a7      	cbnz	r7, ffc8 <isr+0x280>
    ff9e:	f1b9 0f00 	cmp.w	r9, #0
    ffa2:	d11b      	bne.n	ffdc <isr+0x294>
    ffa4:	24ff      	movs	r4, #255	; 0xff
		if (crc_ok &&
    ffa6:	b9f6      	cbnz	r6, ffe6 <isr+0x29e>
			err = 1;
    ffa8:	2001      	movs	r0, #1
		if (err) {
    ffaa:	2800      	cmp	r0, #0
    ffac:	f000 80dd 	beq.w	1016a <__kernel_ram_size+0x16a>
			_radio.state = STATE_CLOSE;
    ffb0:	4c27      	ldr	r4, [pc, #156]	; (10050 <__kernel_ram_size+0x50>)
    ffb2:	2303      	movs	r3, #3
    ffb4:	7423      	strb	r3, [r4, #16]
			radio_disable();
    ffb6:	f7ff fbcb 	bl	f750 <radio_disable>
			_radio.scanner.state = 0;
    ffba:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    ffbe:	f36f 0341 	bfc	r3, #1, #1
    ffc2:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    ffc6:	e0d0      	b.n	1016a <__kernel_ram_size+0x16a>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    ffc8:	4b21      	ldr	r3, [pc, #132]	; (10050 <__kernel_ram_size+0x50>)
    ffca:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		rl_idx = devmatch_ok ?
    ffce:	4651      	mov	r1, sl
    ffd0:	f3c0 1000 	ubfx	r0, r0, #4, #1
    ffd4:	f009 fc9c 	bl	19910 <ctrl_rl_idx>
    ffd8:	4604      	mov	r4, r0
    ffda:	e7e4      	b.n	ffa6 <isr+0x25e>
    ffdc:	4628      	mov	r0, r5
    ffde:	f009 fccd 	bl	1997c <ctrl_rl_irk_idx>
    ffe2:	4604      	mov	r4, r0
    ffe4:	e7df      	b.n	ffa6 <isr+0x25e>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    ffe6:	4b1a      	ldr	r3, [pc, #104]	; (10050 <__kernel_ram_size+0x50>)
    ffe8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ffec:	f013 0f10 	tst.w	r3, #16
    fff0:	d109      	bne.n	10006 <__kernel_ram_size+0x6>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    fff2:	b91f      	cbnz	r7, fffc <isr+0x2b4>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fff4:	2301      	movs	r3, #1
		if (crc_ok &&
    fff6:	b9db      	cbnz	r3, 10030 <__kernel_ram_size+0x30>
			err = 1;
    fff8:	2001      	movs	r0, #1
    fffa:	e7d6      	b.n	ffaa <isr+0x262>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fffc:	4621      	mov	r1, r4
    fffe:	4648      	mov	r0, r9
   10000:	f009 fe1c 	bl	19c3c <ctrl_rl_idx_allowed>
   10004:	b980      	cbnz	r0, 10028 <__kernel_ram_size+0x28>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   10006:	4b12      	ldr	r3, [pc, #72]	; (10050 <__kernel_ram_size+0x50>)
   10008:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   1000c:	f013 0f10 	tst.w	r3, #16
   10010:	d00c      	beq.n	1002c <__kernel_ram_size+0x2c>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   10012:	b10f      	cbz	r7, 10018 <__kernel_ram_size+0x18>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   10014:	2301      	movs	r3, #1
   10016:	e7ee      	b.n	fff6 <isr+0x2ae>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
   10018:	4620      	mov	r0, r4
   1001a:	f009 fcd9 	bl	199d0 <ctrl_irk_whitelisted>
   1001e:	b108      	cbz	r0, 10024 <__kernel_ram_size+0x24>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   10020:	2301      	movs	r3, #1
   10022:	e7e8      	b.n	fff6 <isr+0x2ae>
   10024:	2300      	movs	r3, #0
   10026:	e7e6      	b.n	fff6 <isr+0x2ae>
   10028:	2301      	movs	r3, #1
   1002a:	e7e4      	b.n	fff6 <isr+0x2ae>
   1002c:	2300      	movs	r3, #0
   1002e:	e7e2      	b.n	fff6 <isr+0x2ae>
			err = isr_rx_scan(devmatch_ok, devmatch_id, irkmatch_ok,
   10030:	f8cd 8004 	str.w	r8, [sp, #4]
   10034:	9400      	str	r4, [sp, #0]
   10036:	462b      	mov	r3, r5
   10038:	464a      	mov	r2, r9
   1003a:	4651      	mov	r1, sl
   1003c:	4638      	mov	r0, r7
   1003e:	f006 ffb7 	bl	16fb0 <isr_rx_scan>
   10042:	e7b2      	b.n	ffaa <isr+0x262>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
   10044:	4642      	mov	r2, r8
   10046:	4621      	mov	r1, r4
   10048:	4630      	mov	r0, r6
   1004a:	f004 fabb 	bl	145c4 <isr_rx_conn>
   1004e:	e08c      	b.n	1016a <__kernel_ram_size+0x16a>
   10050:	200014d4 	.word	0x200014d4
		LL_ASSERT(0);
   10054:	4040      	eors	r0, r0
   10056:	f380 8811 	msr	BASEPRI, r0
   1005a:	f04f 0004 	mov.w	r0, #4
   1005e:	df02      	svc	2
	switch (_radio.role) {
   10060:	4bb3      	ldr	r3, [pc, #716]	; (10330 <__kernel_ram_size+0x330>)
   10062:	7bdb      	ldrb	r3, [r3, #15]
   10064:	b2db      	uxtb	r3, r3
   10066:	2b04      	cmp	r3, #4
   10068:	f200 82b2 	bhi.w	105d0 <__kernel_ram_size+0x5d0>
   1006c:	e8df f013 	tbh	[pc, r3, lsl #1]
   10070:	000502a0 	.word	0x000502a0
   10074:	00b5006f 	.word	0x00b5006f
   10078:	00b5      	.short	0x00b5
	if ((_radio.state == STATE_CLOSE) &&
   1007a:	4bad      	ldr	r3, [pc, #692]	; (10330 <__kernel_ram_size+0x330>)
   1007c:	7c1b      	ldrb	r3, [r3, #16]
   1007e:	2b03      	cmp	r3, #3
   10080:	d00f      	beq.n	100a2 <__kernel_ram_size+0xa2>
		radio_filter_disable();
   10082:	f7ff fc1d 	bl	f8c0 <radio_filter_disable>
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
   10086:	4aaa      	ldr	r2, [pc, #680]	; (10330 <__kernel_ram_size+0x330>)
   10088:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
		pdu_adv = (struct pdu_adv *)
   1008c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   10090:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
   10094:	3320      	adds	r3, #32
   10096:	4413      	add	r3, r2
		if ((_radio.state == STATE_CLOSE) &&
   10098:	7c12      	ldrb	r2, [r2, #16]
   1009a:	2a03      	cmp	r2, #3
   1009c:	d00f      	beq.n	100be <__kernel_ram_size+0xbe>
	u32_t dont_close = 0;
   1009e:	2300      	movs	r3, #0
   100a0:	e060      	b.n	10164 <__kernel_ram_size+0x164>
	    (_radio.advertiser.chan_map_current != 0)) {
   100a2:	4ba3      	ldr	r3, [pc, #652]	; (10330 <__kernel_ram_size+0x330>)
   100a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if ((_radio.state == STATE_CLOSE) &&
   100a8:	f013 0f0e 	tst.w	r3, #14
   100ac:	d0e9      	beq.n	10082 <__kernel_ram_size+0x82>
		adv_setup();
   100ae:	f002 fca5 	bl	129fc <adv_setup>
		radio_tx_enable();
   100b2:	f7ff fb47 	bl	f744 <radio_tx_enable>
		radio_tmr_end_capture();
   100b6:	f7ff fd0b 	bl	fad0 <radio_tmr_end_capture>
		dont_close = 1;
   100ba:	2301      	movs	r3, #1
   100bc:	e052      	b.n	10164 <__kernel_ram_size+0x164>
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
   100be:	79db      	ldrb	r3, [r3, #7]
   100c0:	f003 030f 	and.w	r3, r3, #15
		if ((_radio.state == STATE_CLOSE) &&
   100c4:	2b01      	cmp	r3, #1
   100c6:	d040      	beq.n	1014a <__kernel_ram_size+0x14a>
			rand_isr_get(sizeof(random_delay), &random_delay);
   100c8:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   100cc:	2001      	movs	r0, #1
   100ce:	f000 fb7d 	bl	107cc <rand_isr_get>
			random_delay %= 10;
   100d2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   100d6:	4a97      	ldr	r2, [pc, #604]	; (10334 <__kernel_ram_size+0x334>)
   100d8:	fba2 1203 	umull	r1, r2, r2, r3
   100dc:	08d2      	lsrs	r2, r2, #3
   100de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   100e2:	0051      	lsls	r1, r2, #1
   100e4:	1a5a      	subs	r2, r3, r1
   100e6:	b2d2      	uxtb	r2, r2
			random_delay += 1;
   100e8:	3201      	adds	r2, #1
   100ea:	b2d2      	uxtb	r2, r2
   100ec:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
					      TICKER_US_TO_TICKS(random_delay *
   100f0:	b2d2      	uxtb	r2, r2
   100f2:	4891      	ldr	r0, [pc, #580]	; (10338 <__kernel_ram_size+0x338>)
   100f4:	fba2 0100 	umull	r0, r1, r2, r0
   100f8:	23e8      	movs	r3, #232	; 0xe8
   100fa:	fb03 1102 	mla	r1, r3, r2, r1
   100fe:	a38a      	add	r3, pc, #552	; (adr r3, 10328 <__kernel_ram_size+0x328>)
   10100:	e9d3 2300 	ldrd	r2, r3, [r3]
   10104:	f7f0 fffa 	bl	10fc <__aeabi_uldivmod>
			ticker_status =
   10108:	f640 63a2 	movw	r3, #3746	; 0xea2
   1010c:	9306      	str	r3, [sp, #24]
   1010e:	4b8b      	ldr	r3, [pc, #556]	; (1033c <__kernel_ram_size+0x33c>)
   10110:	9305      	str	r3, [sp, #20]
   10112:	2400      	movs	r4, #0
   10114:	9404      	str	r4, [sp, #16]
   10116:	9403      	str	r4, [sp, #12]
   10118:	9402      	str	r4, [sp, #8]
   1011a:	9401      	str	r4, [sp, #4]
   1011c:	9400      	str	r4, [sp, #0]
   1011e:	b283      	uxth	r3, r0
   10120:	2205      	movs	r2, #5
   10122:	4621      	mov	r1, r4
   10124:	4620      	mov	r0, r4
   10126:	f000 fe1d 	bl	10d64 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1012a:	b130      	cbz	r0, 1013a <__kernel_ram_size+0x13a>
   1012c:	2802      	cmp	r0, #2
   1012e:	d004      	beq.n	1013a <__kernel_ram_size+0x13a>
   10130:	4b7f      	ldr	r3, [pc, #508]	; (10330 <__kernel_ram_size+0x330>)
   10132:	7b9b      	ldrb	r3, [r3, #14]
   10134:	b2db      	uxtb	r3, r3
   10136:	2b05      	cmp	r3, #5
   10138:	d101      	bne.n	1013e <__kernel_ram_size+0x13e>
	u32_t dont_close = 0;
   1013a:	2300      	movs	r3, #0
   1013c:	e012      	b.n	10164 <__kernel_ram_size+0x164>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1013e:	4040      	eors	r0, r0
   10140:	f380 8811 	msr	BASEPRI, r0
   10144:	f04f 0004 	mov.w	r0, #4
   10148:	df02      	svc	2
	u32_t dont_close = 0;
   1014a:	2300      	movs	r3, #0
   1014c:	e00a      	b.n	10164 <__kernel_ram_size+0x164>
	if (_radio.state == STATE_CLOSE) {
   1014e:	4b78      	ldr	r3, [pc, #480]	; (10330 <__kernel_ram_size+0x330>)
   10150:	7c1b      	ldrb	r3, [r3, #16]
   10152:	2b03      	cmp	r3, #3
   10154:	d00c      	beq.n	10170 <__kernel_ram_size+0x170>
		radio_filter_disable();
   10156:	f7ff fbb3 	bl	f8c0 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   1015a:	4b75      	ldr	r3, [pc, #468]	; (10330 <__kernel_ram_size+0x330>)
   1015c:	7c1b      	ldrb	r3, [r3, #16]
   1015e:	2b05      	cmp	r3, #5
   10160:	d031      	beq.n	101c6 <__kernel_ram_size+0x1c6>
	u32_t dont_close = 0;
   10162:	2300      	movs	r3, #0
	if (dont_close) {
   10164:	2b00      	cmp	r3, #0
   10166:	f000 8249 	beq.w	105fc <__kernel_ram_size+0x5fc>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
   1016a:	b00a      	add	sp, #40	; 0x28
   1016c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		radio_tmr_tifs_set(RADIO_TIFS);
   10170:	2096      	movs	r0, #150	; 0x96
   10172:	f7ff fbf5 	bl	f960 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   10176:	2300      	movs	r3, #0
   10178:	461a      	mov	r2, r3
   1017a:	4619      	mov	r1, r3
   1017c:	4618      	mov	r0, r3
   1017e:	f7ff fb45 	bl	f80c <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
   10182:	4b6b      	ldr	r3, [pc, #428]	; (10330 <__kernel_ram_size+0x330>)
   10184:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   10188:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1018c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   10190:	3008      	adds	r0, #8
   10192:	f7ff fab9 	bl	f708 <radio_pkt_rx_set>
		radio_rssi_measure();
   10196:	f7ff fb49 	bl	f82c <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   1019a:	f009 fe33 	bl	19e04 <ctrl_rl_enabled>
   1019e:	b940      	cbnz	r0, 101b2 <__kernel_ram_size+0x1b2>
		_radio.state = STATE_RX;
   101a0:	2401      	movs	r4, #1
   101a2:	4b63      	ldr	r3, [pc, #396]	; (10330 <__kernel_ram_size+0x330>)
   101a4:	741c      	strb	r4, [r3, #16]
		radio_rx_enable();
   101a6:	f7ff fac7 	bl	f738 <radio_rx_enable>
		radio_tmr_end_capture();
   101aa:	f7ff fc91 	bl	fad0 <radio_tmr_end_capture>
		dont_close = 1;
   101ae:	4623      	mov	r3, r4
   101b0:	e7d8      	b.n	10164 <__kernel_ram_size+0x164>
			u8_t count, *irks = ctrl_irks_get(&count);
   101b2:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   101b6:	f009 fba1 	bl	198fc <ctrl_irks_get>
			radio_ar_configure(count, irks);
   101ba:	4601      	mov	r1, r0
   101bc:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   101c0:	f7ff fd32 	bl	fc28 <radio_ar_configure>
   101c4:	e7ec      	b.n	101a0 <__kernel_ram_size+0x1a0>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   101c6:	2400      	movs	r4, #0
   101c8:	9400      	str	r4, [sp, #0]
   101ca:	4623      	mov	r3, r4
   101cc:	2204      	movs	r2, #4
   101ce:	4621      	mov	r1, r4
   101d0:	4620      	mov	r0, r4
   101d2:	f000 fe15 	bl	10e00 <ticker_stop>
	u32_t dont_close = 0;
   101d6:	4623      	mov	r3, r4
   101d8:	e7c4      	b.n	10164 <__kernel_ram_size+0x164>
	if (_radio.conn_curr == 0) {
   101da:	4b55      	ldr	r3, [pc, #340]	; (10330 <__kernel_ram_size+0x330>)
   101dc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   101e0:	2800      	cmp	r0, #0
   101e2:	f000 81fb 	beq.w	105dc <__kernel_ram_size+0x5dc>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   101e6:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   101ea:	b141      	cbz	r1, 101fe <__kernel_ram_size+0x1fe>
   101ec:	7bdb      	ldrb	r3, [r3, #15]
   101ee:	b2db      	uxtb	r3, r3
   101f0:	2b03      	cmp	r3, #3
   101f2:	d046      	beq.n	10282 <__kernel_ram_size+0x282>
   101f4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   101f8:	f013 0f01 	tst.w	r3, #1
   101fc:	d141      	bne.n	10282 <__kernel_ram_size+0x282>
	latency_event = _radio.conn_curr->latency_event;
   101fe:	f8b0 802a 	ldrh.w	r8, [r0, #42]	; 0x2a
	elapsed_event = latency_event + 1;
   10202:	f108 0401 	add.w	r4, r8, #1
   10206:	b2a4      	uxth	r4, r4
	if (_radio.packet_counter &&
   10208:	4b49      	ldr	r3, [pc, #292]	; (10330 <__kernel_ram_size+0x330>)
   1020a:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
   1020e:	2b00      	cmp	r3, #0
   10210:	f000 80b8 	beq.w	10384 <__kernel_ram_size+0x384>
		if (_radio.role == ROLE_SLAVE) {
   10214:	4b46      	ldr	r3, [pc, #280]	; (10330 <__kernel_ram_size+0x330>)
   10216:	7bdb      	ldrb	r3, [r3, #15]
   10218:	b2db      	uxtb	r3, r3
   1021a:	2b03      	cmp	r3, #3
   1021c:	d03c      	beq.n	10298 <__kernel_ram_size+0x298>
		} else if (reason_peer) {
   1021e:	2900      	cmp	r1, #0
   10220:	f000 80ad 	beq.w	1037e <__kernel_ram_size+0x37e>
			_radio.conn_curr->master.terminate_ack = 1;
   10224:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   10228:	f043 0301 	orr.w	r3, r3, #1
   1022c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   10230:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
   10232:	4635      	mov	r5, r6
		_radio.conn_curr->connect_expire = 0;
   10234:	4b3e      	ldr	r3, [pc, #248]	; (10330 <__kernel_ram_size+0x330>)
   10236:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1023a:	2200      	movs	r2, #0
   1023c:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   1023e:	4b3c      	ldr	r3, [pc, #240]	; (10330 <__kernel_ram_size+0x330>)
   10240:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   10244:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   10248:	2b00      	cmp	r3, #0
   1024a:	f000 80d8 	beq.w	103fe <__kernel_ram_size+0x3fe>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   1024e:	429c      	cmp	r4, r3
   10250:	f080 80c9 	bcs.w	103e6 <__kernel_ram_size+0x3e6>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   10254:	1b1b      	subs	r3, r3, r4
   10256:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   1025a:	4b35      	ldr	r3, [pc, #212]	; (10330 <__kernel_ram_size+0x330>)
   1025c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10260:	2100      	movs	r1, #0
   10262:	8551      	strh	r1, [r2, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   10264:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10268:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   1026c:	2a06      	cmp	r2, #6
   1026e:	f240 8130 	bls.w	104d2 <__kernel_ram_size+0x4d2>
			else if (_radio.role == ROLE_SLAVE) {
   10272:	4a2f      	ldr	r2, [pc, #188]	; (10330 <__kernel_ram_size+0x330>)
   10274:	7bd2      	ldrb	r2, [r2, #15]
   10276:	b2d2      	uxtb	r2, r2
   10278:	2a03      	cmp	r2, #3
   1027a:	f000 80a2 	beq.w	103c2 <__kernel_ram_size+0x3c2>
	force = 0;
   1027e:	2700      	movs	r7, #0
   10280:	e0be      	b.n	10400 <__kernel_ram_size+0x400>
		terminate_ind_rx_enqueue(_radio.conn_curr, reason_peer);
   10282:	f004 f90b 	bl	1449c <terminate_ind_rx_enqueue>
		connection_release(_radio.conn_curr);
   10286:	4c2a      	ldr	r4, [pc, #168]	; (10330 <__kernel_ram_size+0x330>)
   10288:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   1028c:	f002 f9b2 	bl	125f4 <connection_release>
		_radio.conn_curr = NULL;
   10290:	2300      	movs	r3, #0
   10292:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10296:	e765      	b.n	10164 <__kernel_ram_size+0x164>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10298:	f7ff fc0e 	bl	fab8 <radio_tmr_aa_restore>
   1029c:	4682      	mov	sl, r0
						     radio_tmr_ready_get();
   1029e:	f7ff fc11 	bl	fac4 <radio_tmr_ready_get>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   102a2:	ebaa 0a00 	sub.w	sl, sl, r0
				_radio.conn_curr->slave.window_widening_event_us;
   102a6:	4b22      	ldr	r3, [pc, #136]	; (10330 <__kernel_ram_size+0x330>)
   102a8:	f8d3 9110 	ldr.w	r9, [r3, #272]	; 0x110
			window_widening_event_us =
   102ac:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
				addr_us_get(_radio.conn_curr->phy_rx);
   102b0:	f899 303a 	ldrb.w	r3, [r9, #58]	; 0x3a
   102b4:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
   102b8:	2b02      	cmp	r3, #2
   102ba:	d031      	beq.n	10320 <__kernel_ram_size+0x320>
   102bc:	2b04      	cmp	r3, #4
   102be:	d02c      	beq.n	1031a <__kernel_ram_size+0x31a>
		return 40;
   102c0:	2628      	movs	r6, #40	; 0x28
				preamble_to_addr_us +
   102c2:	1987      	adds	r7, r0, r6
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   102c4:	3730      	adds	r7, #48	; 0x30
			if (start_to_address_actual_us <=
   102c6:	45ba      	cmp	sl, r7
   102c8:	d83c      	bhi.n	10344 <__kernel_ram_size+0x344>
					TICKER_US_TO_TICKS(window_widening_event_us);
   102ca:	4e1d      	ldr	r6, [pc, #116]	; (10340 <__kernel_ram_size+0x340>)
   102cc:	a316      	add	r3, pc, #88	; (adr r3, 10328 <__kernel_ram_size+0x328>)
   102ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   102d2:	fba0 0106 	umull	r0, r1, r0, r6
   102d6:	f7f0 ff11 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
   102da:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
   102dc:	eba7 000a 	sub.w	r0, r7, sl
   102e0:	a311      	add	r3, pc, #68	; (adr r3, 10328 <__kernel_ram_size+0x328>)
   102e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   102e6:	fba0 0106 	umull	r0, r1, r0, r6
   102ea:	f7f0 ff07 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
   102ee:	b286      	uxth	r6, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
   102f0:	2200      	movs	r2, #0
   102f2:	f8c9 2060 	str.w	r2, [r9, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   102f6:	4b0e      	ldr	r3, [pc, #56]	; (10330 <__kernel_ram_size+0x330>)
   102f8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   102fc:	668a      	str	r2, [r1, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   102fe:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10302:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   10306:	b38a      	cbz	r2, 1036c <__kernel_ram_size+0x36c>
				if (pdu_data_tx->len ||
   10308:	7952      	ldrb	r2, [r2, #5]
   1030a:	b91a      	cbnz	r2, 10314 <__kernel_ram_size+0x314>
				    _radio.conn_curr->packet_tx_head_offset) {
   1030c:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
				if (pdu_data_tx->len ||
   10310:	2a00      	cmp	r2, #0
   10312:	d08f      	beq.n	10234 <__kernel_ram_size+0x234>
					_radio.conn_curr->latency_event = 0;
   10314:	2200      	movs	r2, #0
   10316:	855a      	strh	r2, [r3, #42]	; 0x2a
   10318:	e78c      	b.n	10234 <__kernel_ram_size+0x234>
		return 376;
   1031a:	f44f 76bc 	mov.w	r6, #376	; 0x178
   1031e:	e7d0      	b.n	102c2 <__kernel_ram_size+0x2c2>
		return 24;
   10320:	2618      	movs	r6, #24
   10322:	e7ce      	b.n	102c2 <__kernel_ram_size+0x2c2>
   10324:	f3af 8000 	nop.w
   10328:	1afd498d 	.word	0x1afd498d
   1032c:	00000007 	.word	0x00000007
   10330:	200014d4 	.word	0x200014d4
   10334:	cccccccd 	.word	0xcccccccd
   10338:	d4a51000 	.word	0xd4a51000
   1033c:	00011d45 	.word	0x00011d45
   10340:	3b9aca00 	.word	0x3b9aca00
					TICKER_US_TO_TICKS(start_to_address_actual_us);
   10344:	4faa      	ldr	r7, [pc, #680]	; (105f0 <__kernel_ram_size+0x5f0>)
   10346:	a3a8      	add	r3, pc, #672	; (adr r3, 105e8 <__kernel_ram_size+0x5e8>)
   10348:	e9d3 2300 	ldrd	r2, r3, [r3]
   1034c:	fbaa 0107 	umull	r0, r1, sl, r7
   10350:	f7f0 fed4 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
   10354:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US +
   10356:	f106 0030 	add.w	r0, r6, #48	; 0x30
   1035a:	a3a3      	add	r3, pc, #652	; (adr r3, 105e8 <__kernel_ram_size+0x5e8>)
   1035c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10360:	fba0 0107 	umull	r0, r1, r0, r7
   10364:	f7f0 feca 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
   10368:	b286      	uxth	r6, r0
   1036a:	e7c1      	b.n	102f0 <__kernel_ram_size+0x2f0>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   1036c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   10370:	f012 0f01 	tst.w	r2, #1
   10374:	f43f af5e 	beq.w	10234 <__kernel_ram_size+0x234>
					_radio.conn_curr->latency;
   10378:	8cda      	ldrh	r2, [r3, #38]	; 0x26
				_radio.conn_curr->latency_event =
   1037a:	855a      	strh	r2, [r3, #42]	; 0x2a
   1037c:	e75a      	b.n	10234 <__kernel_ram_size+0x234>
	ticks_drift_minus = 0;
   1037e:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
   10380:	4635      	mov	r5, r6
   10382:	e757      	b.n	10234 <__kernel_ram_size+0x234>
	else if (_radio.conn_curr->connect_expire) {
   10384:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   10386:	b195      	cbz	r5, 103ae <__kernel_ram_size+0x3ae>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   10388:	42ac      	cmp	r4, r5
   1038a:	d204      	bcs.n	10396 <__kernel_ram_size+0x396>
			_radio.conn_curr->connect_expire -= elapsed_event;
   1038c:	1b2d      	subs	r5, r5, r4
   1038e:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   10390:	2500      	movs	r5, #0
	ticks_drift_plus = 0;
   10392:	462e      	mov	r6, r5
   10394:	e753      	b.n	1023e <__kernel_ram_size+0x23e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   10396:	213e      	movs	r1, #62	; 0x3e
   10398:	f004 f880 	bl	1449c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   1039c:	4c95      	ldr	r4, [pc, #596]	; (105f4 <__kernel_ram_size+0x5f4>)
   1039e:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   103a2:	f002 f927 	bl	125f4 <connection_release>
			_radio.conn_curr = NULL;
   103a6:	2300      	movs	r3, #0
   103a8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   103ac:	e6da      	b.n	10164 <__kernel_ram_size+0x164>
		if (!_radio.conn_curr->supervision_expire) {
   103ae:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
   103b2:	b926      	cbnz	r6, 103be <__kernel_ram_size+0x3be>
				_radio.conn_curr->supervision_reload;
   103b4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   103b6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   103ba:	4635      	mov	r5, r6
   103bc:	e73f      	b.n	1023e <__kernel_ram_size+0x23e>
	ticks_drift_minus = 0;
   103be:	462e      	mov	r6, r5
   103c0:	e73d      	b.n	1023e <__kernel_ram_size+0x23e>
				if (latency_event != 0) {
   103c2:	f1b8 0f00 	cmp.w	r8, #0
   103c6:	f040 8086 	bne.w	104d6 <__kernel_ram_size+0x4d6>
					force = _radio.conn_curr->slave.force & 0x01;
   103ca:	6edf      	ldr	r7, [r3, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   103cc:	087a      	lsrs	r2, r7, #1
   103ce:	66da      	str	r2, [r3, #108]	; 0x6c
					if (force) {
   103d0:	f017 0701 	ands.w	r7, r7, #1
   103d4:	d014      	beq.n	10400 <__kernel_ram_size+0x400>
						_radio.conn_curr->slave.force |=
   103d6:	4b87      	ldr	r3, [pc, #540]	; (105f4 <__kernel_ram_size+0x5f4>)
   103d8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   103dc:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   103de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   103e2:	66d3      	str	r3, [r2, #108]	; 0x6c
   103e4:	e00c      	b.n	10400 <__kernel_ram_size+0x400>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   103e6:	2108      	movs	r1, #8
   103e8:	f004 f858 	bl	1449c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   103ec:	4c81      	ldr	r4, [pc, #516]	; (105f4 <__kernel_ram_size+0x5f4>)
   103ee:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   103f2:	f002 f8ff 	bl	125f4 <connection_release>
			_radio.conn_curr = NULL;
   103f6:	2300      	movs	r3, #0
   103f8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   103fc:	e6b2      	b.n	10164 <__kernel_ram_size+0x164>
	force = 0;
   103fe:	2700      	movs	r7, #0
	if (_radio.conn_curr->procedure_expire != 0) {
   10400:	4b7c      	ldr	r3, [pc, #496]	; (105f4 <__kernel_ram_size+0x5f4>)
   10402:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   10406:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   1040a:	b123      	cbz	r3, 10416 <__kernel_ram_size+0x416>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   1040c:	429c      	cmp	r4, r3
   1040e:	d264      	bcs.n	104da <__kernel_ram_size+0x4da>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   10410:	1b1b      	subs	r3, r3, r4
   10412:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   10416:	4b77      	ldr	r3, [pc, #476]	; (105f4 <__kernel_ram_size+0x5f4>)
   10418:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1041c:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   10420:	b123      	cbz	r3, 1042c <__kernel_ram_size+0x42c>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   10422:	429c      	cmp	r4, r3
   10424:	d265      	bcs.n	104f2 <__kernel_ram_size+0x4f2>
			_radio.conn_curr->apto_expire -= elapsed_event;
   10426:	1b1b      	subs	r3, r3, r4
   10428:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   1042c:	4b71      	ldr	r3, [pc, #452]	; (105f4 <__kernel_ram_size+0x5f4>)
   1042e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10432:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   10436:	b12b      	cbz	r3, 10444 <__kernel_ram_size+0x444>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   10438:	429c      	cmp	r4, r3
   1043a:	f080 8090 	bcs.w	1055e <__kernel_ram_size+0x55e>
			_radio.conn_curr->appto_expire -= elapsed_event;
   1043e:	1b1b      	subs	r3, r3, r4
   10440:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   10444:	4b6b      	ldr	r3, [pc, #428]	; (105f4 <__kernel_ram_size+0x5f4>)
   10446:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1044a:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   1044e:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   10452:	4299      	cmp	r1, r3
   10454:	d006      	beq.n	10464 <__kernel_ram_size+0x464>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   10456:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
   1045a:	3b01      	subs	r3, #1
   1045c:	b2db      	uxtb	r3, r3
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   1045e:	2b01      	cmp	r3, #1
   10460:	f240 809b 	bls.w	1059a <__kernel_ram_size+0x59a>
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   10464:	b937      	cbnz	r7, 10474 <__kernel_ram_size+0x474>
   10466:	4b63      	ldr	r3, [pc, #396]	; (105f4 <__kernel_ram_size+0x5f4>)
   10468:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1046c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   1046e:	4598      	cmp	r8, r3
   10470:	f000 8096 	beq.w	105a0 <__kernel_ram_size+0x5a0>
		lazy = _radio.conn_curr->latency_event + 1;
   10474:	4b5f      	ldr	r3, [pc, #380]	; (105f4 <__kernel_ram_size+0x5f4>)
   10476:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1047a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   1047c:	3301      	adds	r3, #1
   1047e:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   10480:	b925      	cbnz	r5, 1048c <__kernel_ram_size+0x48c>
   10482:	b91e      	cbnz	r6, 1048c <__kernel_ram_size+0x48c>
   10484:	b913      	cbnz	r3, 1048c <__kernel_ram_size+0x48c>
	    (lazy != 0) || (force != 0)) {
   10486:	2f00      	cmp	r7, #0
   10488:	f000 80aa 	beq.w	105e0 <__kernel_ram_size+0x5e0>
				    _radio.conn_curr->handle;
   1048c:	4a59      	ldr	r2, [pc, #356]	; (105f4 <__kernel_ram_size+0x5f4>)
   1048e:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   10492:	f892 4020 	ldrb.w	r4, [r2, #32]
   10496:	3407      	adds	r4, #7
   10498:	b2e4      	uxtb	r4, r4
		ticker_status =
   1049a:	9406      	str	r4, [sp, #24]
   1049c:	4a56      	ldr	r2, [pc, #344]	; (105f8 <__kernel_ram_size+0x5f8>)
   1049e:	9205      	str	r2, [sp, #20]
   104a0:	9704      	str	r7, [sp, #16]
   104a2:	9303      	str	r3, [sp, #12]
   104a4:	2000      	movs	r0, #0
   104a6:	9002      	str	r0, [sp, #8]
   104a8:	9001      	str	r0, [sp, #4]
   104aa:	9600      	str	r6, [sp, #0]
   104ac:	462b      	mov	r3, r5
   104ae:	4622      	mov	r2, r4
   104b0:	4601      	mov	r1, r0
   104b2:	f000 fc57 	bl	10d64 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   104b6:	4603      	mov	r3, r0
   104b8:	2800      	cmp	r0, #0
   104ba:	f43f ae53 	beq.w	10164 <__kernel_ram_size+0x164>
   104be:	2802      	cmp	r0, #2
   104c0:	f000 8090 	beq.w	105e4 <__kernel_ram_size+0x5e4>
   104c4:	4b4b      	ldr	r3, [pc, #300]	; (105f4 <__kernel_ram_size+0x5f4>)
   104c6:	7b9b      	ldrb	r3, [r3, #14]
   104c8:	b2db      	uxtb	r3, r3
   104ca:	429c      	cmp	r4, r3
   104cc:	d16a      	bne.n	105a4 <__kernel_ram_size+0x5a4>
	u32_t dont_close = 0;
   104ce:	2300      	movs	r3, #0
   104d0:	e648      	b.n	10164 <__kernel_ram_size+0x164>
				force = 1;
   104d2:	2701      	movs	r7, #1
   104d4:	e794      	b.n	10400 <__kernel_ram_size+0x400>
					force = 1;
   104d6:	2701      	movs	r7, #1
   104d8:	e792      	b.n	10400 <__kernel_ram_size+0x400>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   104da:	2122      	movs	r1, #34	; 0x22
   104dc:	f003 ffde 	bl	1449c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   104e0:	4c44      	ldr	r4, [pc, #272]	; (105f4 <__kernel_ram_size+0x5f4>)
   104e2:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   104e6:	f002 f885 	bl	125f4 <connection_release>
			_radio.conn_curr = NULL;
   104ea:	2300      	movs	r3, #0
   104ec:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   104f0:	e638      	b.n	10164 <__kernel_ram_size+0x164>
			_radio.conn_curr->apto_expire = 0;
   104f2:	2300      	movs	r3, #0
   104f4:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
   104f8:	4b3e      	ldr	r3, [pc, #248]	; (105f4 <__kernel_ram_size+0x5f4>)
   104fa:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   104fe:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   10502:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   10504:	429a      	cmp	r2, r3
   10506:	d318      	bcc.n	1053a <__kernel_ram_size+0x53a>
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
   10508:	4b3a      	ldr	r3, [pc, #232]	; (105f4 <__kernel_ram_size+0x5f4>)
   1050a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1050e:	1ad3      	subs	r3, r2, r3
   10510:	b2db      	uxtb	r3, r3
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	if (count > packet_rx_acquired_count_get()) {
   10512:	2b01      	cmp	r3, #1
   10514:	d91b      	bls.n	1054e <__kernel_ram_size+0x54e>
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
   10516:	4b37      	ldr	r3, [pc, #220]	; (105f4 <__kernel_ram_size+0x5f4>)
   10518:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1051c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   10520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   10524:	b1ab      	cbz	r3, 10552 <__kernel_ram_size+0x552>
			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   10526:	4a33      	ldr	r2, [pc, #204]	; (105f4 <__kernel_ram_size+0x5f4>)
   10528:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
   1052c:	8c12      	ldrh	r2, [r2, #32]
   1052e:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
   10530:	220a      	movs	r2, #10
   10532:	711a      	strb	r2, [r3, #4]
			packet_rx_enqueue();
   10534:	f003 ff3e 	bl	143b4 <packet_rx_enqueue>
   10538:	e778      	b.n	1042c <__kernel_ram_size+0x42c>
		return (_radio.packet_rx_count -
   1053a:	492e      	ldr	r1, [pc, #184]	; (105f4 <__kernel_ram_size+0x5f4>)
   1053c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   10540:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   10544:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   10546:	fa52 f383 	uxtab	r3, r2, r3
   1054a:	b2db      	uxtb	r3, r3
   1054c:	e7e1      	b.n	10512 <__kernel_ram_size+0x512>
		return 0;
   1054e:	2300      	movs	r3, #0
   10550:	e7e8      	b.n	10524 <__kernel_ram_size+0x524>
			LL_ASSERT(radio_pdu_node_rx);
   10552:	4040      	eors	r0, r0
   10554:	f380 8811 	msr	BASEPRI, r0
   10558:	f04f 0004 	mov.w	r0, #4
   1055c:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   1055e:	2300      	movs	r3, #0
   10560:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   10564:	4b23      	ldr	r3, [pc, #140]	; (105f4 <__kernel_ram_size+0x5f4>)
   10566:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1056a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   1056e:	2a00      	cmp	r2, #0
   10570:	f47f af68 	bne.w	10444 <__kernel_ram_size+0x444>
			    (_radio.conn_curr->llcp_req ==
   10574:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
			     _radio.conn_curr->llcp_ack)) {
   10578:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
			if ((_radio.conn_curr->procedure_expire == 0) &&
   1057c:	4291      	cmp	r1, r2
   1057e:	f47f af61 	bne.w	10444 <__kernel_ram_size+0x444>
				_radio.conn_curr->llcp_type = LLCP_PING;
   10582:	2207      	movs	r2, #7
   10584:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   10588:	4b1a      	ldr	r3, [pc, #104]	; (105f4 <__kernel_ram_size+0x5f4>)
   1058a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1058e:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   10592:	3b01      	subs	r3, #1
   10594:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   10598:	e754      	b.n	10444 <__kernel_ram_size+0x444>
		_radio.conn_curr->latency_event = 0;
   1059a:	2300      	movs	r3, #0
   1059c:	8553      	strh	r3, [r2, #42]	; 0x2a
   1059e:	e761      	b.n	10464 <__kernel_ram_size+0x464>
	lazy = 0;
   105a0:	2300      	movs	r3, #0
   105a2:	e76d      	b.n	10480 <__kernel_ram_size+0x480>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   105a4:	4040      	eors	r0, r0
   105a6:	f380 8811 	msr	BASEPRI, r0
   105aa:	f04f 0004 	mov.w	r0, #4
   105ae:	df02      	svc	2
		LL_ASSERT((_radio.state == STATE_STOP) ||
   105b0:	4b10      	ldr	r3, [pc, #64]	; (105f4 <__kernel_ram_size+0x5f4>)
   105b2:	7c1b      	ldrb	r3, [r3, #16]
   105b4:	3b04      	subs	r3, #4
   105b6:	b2db      	uxtb	r3, r3
   105b8:	2b01      	cmp	r3, #1
   105ba:	d803      	bhi.n	105c4 <__kernel_ram_size+0x5c4>
		_radio.state = STATE_NONE;
   105bc:	2200      	movs	r2, #0
   105be:	4b0d      	ldr	r3, [pc, #52]	; (105f4 <__kernel_ram_size+0x5f4>)
   105c0:	741a      	strb	r2, [r3, #16]
   105c2:	e5d2      	b.n	1016a <__kernel_ram_size+0x16a>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   105c4:	4040      	eors	r0, r0
   105c6:	f380 8811 	msr	BASEPRI, r0
   105ca:	f04f 0004 	mov.w	r0, #4
   105ce:	df02      	svc	2
		LL_ASSERT(0);
   105d0:	4040      	eors	r0, r0
   105d2:	f380 8811 	msr	BASEPRI, r0
   105d6:	f04f 0004 	mov.w	r0, #4
   105da:	df02      	svc	2
	u32_t dont_close = 0;
   105dc:	2300      	movs	r3, #0
   105de:	e5c1      	b.n	10164 <__kernel_ram_size+0x164>
   105e0:	2300      	movs	r3, #0
   105e2:	e5bf      	b.n	10164 <__kernel_ram_size+0x164>
   105e4:	2300      	movs	r3, #0
   105e6:	e5bd      	b.n	10164 <__kernel_ram_size+0x164>
   105e8:	1afd498d 	.word	0x1afd498d
   105ec:	00000007 	.word	0x00000007
   105f0:	3b9aca00 	.word	0x3b9aca00
   105f4:	200014d4 	.word	0x200014d4
   105f8:	00011d65 	.word	0x00011d65
	_radio.role = ROLE_NONE;
   105fc:	4d0e      	ldr	r5, [pc, #56]	; (10638 <__kernel_ram_size+0x638>)
   105fe:	2400      	movs	r4, #0
   10600:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
   10602:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
   10604:	736c      	strb	r4, [r5, #13]
	radio_tmr_stop();
   10606:	f7ff fa05 	bl	fa14 <radio_tmr_stop>
	event_inactive(0, 0, 0, NULL);
   1060a:	4623      	mov	r3, r4
   1060c:	4622      	mov	r2, r4
   1060e:	4621      	mov	r1, r4
   10610:	4620      	mov	r0, r4
   10612:	f001 fe29 	bl	12268 <event_inactive>
	clock_control_off(_radio.hf_clock, NULL);
   10616:	6828      	ldr	r0, [r5, #0]
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
   10618:	6843      	ldr	r3, [r0, #4]

	return api->off(dev, sys);
   1061a:	685b      	ldr	r3, [r3, #4]
   1061c:	4621      	mov	r1, r4
   1061e:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   10620:	2201      	movs	r2, #1
   10622:	4611      	mov	r1, r2
   10624:	4620      	mov	r0, r4
   10626:	f7fe fcff 	bl	f028 <mayfly_enable>
   1062a:	e59e      	b.n	1016a <__kernel_ram_size+0x16a>
		LL_ASSERT(0);
   1062c:	4040      	eors	r0, r0
   1062e:	f380 8811 	msr	BASEPRI, r0
   10632:	f04f 0004 	mov.w	r0, #4
   10636:	df02      	svc	2
   10638:	200014d4 	.word	0x200014d4

0001063c <init>:
{
   1063c:	b410      	push	{r4}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
   1063e:	1d1c      	adds	r4, r3, #4
   10640:	42a2      	cmp	r2, r4
   10642:	d90e      	bls.n	10662 <init+0x26>
	*rng = (struct rand *)context;
   10644:	6001      	str	r1, [r0, #0]
	p->count = len - offsetof(struct rand, rand);
   10646:	3a04      	subs	r2, #4
   10648:	700a      	strb	r2, [r1, #0]
	p->threshold = threshold;
   1064a:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
   1064c:	2300      	movs	r3, #0
   1064e:	70cb      	strb	r3, [r1, #3]
   10650:	708b      	strb	r3, [r1, #2]
	if (!rng_isr || !rng_thr) {
   10652:	4b0c      	ldr	r3, [pc, #48]	; (10684 <init+0x48>)
   10654:	681b      	ldr	r3, [r3, #0]
   10656:	b153      	cbz	r3, 1066e <init+0x32>
   10658:	4b0b      	ldr	r3, [pc, #44]	; (10688 <init+0x4c>)
   1065a:	681b      	ldr	r3, [r3, #0]
   1065c:	b13b      	cbz	r3, 1066e <init+0x32>
}
   1065e:	bc10      	pop	{r4}
   10660:	4770      	bx	lr
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
   10662:	4040      	eors	r0, r0
   10664:	f380 8811 	msr	BASEPRI, r0
   10668:	f04f 0004 	mov.w	r0, #4
   1066c:	df02      	svc	2
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
   1066e:	4b07      	ldr	r3, [pc, #28]	; (1068c <init+0x50>)
   10670:	2201      	movs	r2, #1
   10672:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_RNG->EVENTS_VALRDY = 0;
   10676:	2100      	movs	r1, #0
   10678:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   1067c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_RNG->TASKS_START = 1;
   10680:	601a      	str	r2, [r3, #0]
}
   10682:	e7ec      	b.n	1065e <init+0x22>
   10684:	20001424 	.word	0x20001424
   10688:	20001428 	.word	0x20001428
   1068c:	4000d000 	.word	0x4000d000

00010690 <get>:
	LL_ASSERT(rng);
   10690:	b1d0      	cbz	r0, 106c8 <get+0x38>
{
   10692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10696:	4607      	mov	r7, r0
	first = rng->first;
   10698:	f890 e002 	ldrb.w	lr, [r0, #2]
	last = rng->last;
   1069c:	78c5      	ldrb	r5, [r0, #3]
	if (first <= last) {
   1069e:	45ae      	cmp	lr, r5
   106a0:	d82e      	bhi.n	10700 <get+0x70>
		d = &rand[octets];
   106a2:	440a      	add	r2, r1
		s = &rng->rand[first];
   106a4:	eb00 060e 	add.w	r6, r0, lr
   106a8:	3604      	adds	r6, #4
		avail = last - first;
   106aa:	eba5 040e 	sub.w	r4, r5, lr
   106ae:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   106b0:	42a1      	cmp	r1, r4
   106b2:	d20f      	bcs.n	106d4 <get+0x44>
			remaining = avail - octets;
   106b4:	b2cb      	uxtb	r3, r1
   106b6:	1ae4      	subs	r4, r4, r3
   106b8:	fa5f fc84 	uxtb.w	ip, r4
			avail = octets;
   106bc:	461c      	mov	r4, r3
		first += avail;
   106be:	44a6      	add	lr, r4
   106c0:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
   106c4:	1b08      	subs	r0, r1, r4
		while (avail--) {
   106c6:	e00d      	b.n	106e4 <get+0x54>
	LL_ASSERT(rng);
   106c8:	4040      	eors	r0, r0
   106ca:	f380 8811 	msr	BASEPRI, r0
   106ce:	f04f 0004 	mov.w	r0, #4
   106d2:	df02      	svc	2
			remaining = 0;
   106d4:	f04f 0c00 	mov.w	ip, #0
   106d8:	e7f1      	b.n	106be <get+0x2e>
			*(--d) = *s++;
   106da:	7835      	ldrb	r5, [r6, #0]
   106dc:	f802 5d01 	strb.w	r5, [r2, #-1]!
		while (avail--) {
   106e0:	461c      	mov	r4, r3
			*(--d) = *s++;
   106e2:	3601      	adds	r6, #1
		while (avail--) {
   106e4:	1e63      	subs	r3, r4, #1
   106e6:	b2db      	uxtb	r3, r3
   106e8:	2c00      	cmp	r4, #0
   106ea:	d1f6      	bne.n	106da <get+0x4a>
		rng->first = first;
   106ec:	f887 e002 	strb.w	lr, [r7, #2]
	if (remaining < rng->threshold) {
   106f0:	787b      	ldrb	r3, [r7, #1]
   106f2:	459c      	cmp	ip, r3
   106f4:	d202      	bcs.n	106fc <get+0x6c>
		NRF_RNG->TASKS_START = 1;
   106f6:	2201      	movs	r2, #1
   106f8:	4b24      	ldr	r3, [pc, #144]	; (1078c <get+0xfc>)
   106fa:	601a      	str	r2, [r3, #0]
}
   106fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		d = &rand[octets];
   10700:	440a      	add	r2, r1
		s = &rng->rand[first];
   10702:	eb00 080e 	add.w	r8, r0, lr
   10706:	f108 0804 	add.w	r8, r8, #4
		avail = rng->count - first;
   1070a:	7804      	ldrb	r4, [r0, #0]
   1070c:	eba4 040e 	sub.w	r4, r4, lr
   10710:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   10712:	42a1      	cmp	r1, r4
   10714:	d20d      	bcs.n	10732 <get+0xa2>
			remaining = avail + last - octets;
   10716:	eb05 0c04 	add.w	ip, r5, r4
   1071a:	fa5f fc8c 	uxtb.w	ip, ip
   1071e:	b2cc      	uxtb	r4, r1
   10720:	ebac 0c04 	sub.w	ip, ip, r4
   10724:	fa5f fc8c 	uxtb.w	ip, ip
			first += avail;
   10728:	44a6      	add	lr, r4
   1072a:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
   1072e:	1b08      	subs	r0, r1, r4
		while (avail--) {
   10730:	e00a      	b.n	10748 <get+0xb8>
			remaining = last;
   10732:	46ac      	mov	ip, r5
			first = 0;
   10734:	f04f 0e00 	mov.w	lr, #0
   10738:	e7f9      	b.n	1072e <get+0x9e>
			*(--d) = *s++;
   1073a:	f898 6000 	ldrb.w	r6, [r8]
   1073e:	f802 6d01 	strb.w	r6, [r2, #-1]!
		while (avail--) {
   10742:	461c      	mov	r4, r3
			*(--d) = *s++;
   10744:	f108 0801 	add.w	r8, r8, #1
		while (avail--) {
   10748:	1e63      	subs	r3, r4, #1
   1074a:	b2db      	uxtb	r3, r3
   1074c:	2c00      	cmp	r4, #0
   1074e:	d1f4      	bne.n	1073a <get+0xaa>
		if (octets && last) {
   10750:	b1c8      	cbz	r0, 10786 <get+0xf6>
   10752:	b1c5      	cbz	r5, 10786 <get+0xf6>
			s = &rng->rand[0];
   10754:	1d3e      	adds	r6, r7, #4
			if (octets < last) {
   10756:	42a8      	cmp	r0, r5
   10758:	d206      	bcs.n	10768 <get+0xd8>
				remaining = last - octets;
   1075a:	fa5f fe80 	uxtb.w	lr, r0
   1075e:	eba5 040e 	sub.w	r4, r5, lr
   10762:	fa5f fc84 	uxtb.w	ip, r4
   10766:	e001      	b.n	1076c <get+0xdc>
				remaining = 0;
   10768:	46a4      	mov	ip, r4
	last = rng->last;
   1076a:	46ae      	mov	lr, r5
			octets -= last;
   1076c:	eba0 000e 	sub.w	r0, r0, lr
			while (last--) {
   10770:	4671      	mov	r1, lr
   10772:	e004      	b.n	1077e <get+0xee>
				*(--d) = *s++;
   10774:	7831      	ldrb	r1, [r6, #0]
   10776:	f802 1d01 	strb.w	r1, [r2, #-1]!
   1077a:	3601      	adds	r6, #1
			while (last--) {
   1077c:	4619      	mov	r1, r3
   1077e:	1e4b      	subs	r3, r1, #1
   10780:	b2db      	uxtb	r3, r3
   10782:	2900      	cmp	r1, #0
   10784:	d1f6      	bne.n	10774 <get+0xe4>
		rng->first = first;
   10786:	f887 e002 	strb.w	lr, [r7, #2]
   1078a:	e7b1      	b.n	106f0 <get+0x60>
   1078c:	4000d000 	.word	0x4000d000

00010790 <rand_init>:
{
   10790:	b508      	push	{r3, lr}
	init(&rng_thr, context, context_len, threshold);
   10792:	4613      	mov	r3, r2
   10794:	460a      	mov	r2, r1
   10796:	4601      	mov	r1, r0
   10798:	4801      	ldr	r0, [pc, #4]	; (107a0 <rand_init+0x10>)
   1079a:	f7ff ff4f 	bl	1063c <init>
   1079e:	bd08      	pop	{r3, pc}
   107a0:	20001428 	.word	0x20001428

000107a4 <rand_isr_init>:
{
   107a4:	b508      	push	{r3, lr}
	init(&rng_isr, context, context_len, threshold);
   107a6:	4613      	mov	r3, r2
   107a8:	460a      	mov	r2, r1
   107aa:	4601      	mov	r1, r0
   107ac:	4801      	ldr	r0, [pc, #4]	; (107b4 <rand_isr_init+0x10>)
   107ae:	f7ff ff45 	bl	1063c <init>
   107b2:	bd08      	pop	{r3, pc}
   107b4:	20001424 	.word	0x20001424

000107b8 <rand_get>:
{
   107b8:	b508      	push	{r3, lr}
	return get(rng_thr, octets, rand);
   107ba:	460a      	mov	r2, r1
   107bc:	4601      	mov	r1, r0
   107be:	4b02      	ldr	r3, [pc, #8]	; (107c8 <rand_get+0x10>)
   107c0:	6818      	ldr	r0, [r3, #0]
   107c2:	f7ff ff65 	bl	10690 <get>
}
   107c6:	bd08      	pop	{r3, pc}
   107c8:	20001428 	.word	0x20001428

000107cc <rand_isr_get>:
{
   107cc:	b508      	push	{r3, lr}
	return get(rng_isr, octets, rand);
   107ce:	460a      	mov	r2, r1
   107d0:	4601      	mov	r1, r0
   107d2:	4b02      	ldr	r3, [pc, #8]	; (107dc <rand_isr_get+0x10>)
   107d4:	6818      	ldr	r0, [r3, #0]
   107d6:	f7ff ff5b 	bl	10690 <get>
}
   107da:	bd08      	pop	{r3, pc}
   107dc:	20001424 	.word	0x20001424

000107e0 <isr_rand>:

void isr_rand(void *param)
{
   107e0:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
   107e2:	4b10      	ldr	r3, [pc, #64]	; (10824 <isr_rand+0x44>)
   107e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   107e8:	b903      	cbnz	r3, 107ec <isr_rand+0xc>
   107ea:	bd08      	pop	{r3, pc}
		int ret;

		ret = isr(rng_isr, true);
   107ec:	2101      	movs	r1, #1
   107ee:	4b0e      	ldr	r3, [pc, #56]	; (10828 <isr_rand+0x48>)
   107f0:	6818      	ldr	r0, [r3, #0]
   107f2:	f7ff fa79 	bl	fce8 <isr>
		if (ret != -EBUSY) {
   107f6:	f110 0f10 	cmn.w	r0, #16
   107fa:	d008      	beq.n	1080e <isr_rand+0x2e>
			ret = isr(rng_thr, (ret == -ENOBUFS));
   107fc:	f110 0f69 	cmn.w	r0, #105	; 0x69
   10800:	bf14      	ite	ne
   10802:	2100      	movne	r1, #0
   10804:	2101      	moveq	r1, #1
   10806:	4b09      	ldr	r3, [pc, #36]	; (1082c <isr_rand+0x4c>)
   10808:	6818      	ldr	r0, [r3, #0]
   1080a:	f7ff fa6d 	bl	fce8 <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
   1080e:	2200      	movs	r2, #0
   10810:	4b04      	ldr	r3, [pc, #16]	; (10824 <isr_rand+0x44>)
   10812:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (ret != -EBUSY) {
   10816:	f110 0f10 	cmn.w	r0, #16
   1081a:	d0e6      	beq.n	107ea <isr_rand+0xa>
			NRF_RNG->TASKS_STOP = 1;
   1081c:	2201      	movs	r2, #1
   1081e:	605a      	str	r2, [r3, #4]
		}
	}
}
   10820:	e7e3      	b.n	107ea <isr_rand+0xa>
   10822:	bf00      	nop
   10824:	4000d000 	.word	0x4000d000
   10828:	20001424 	.word	0x20001424
   1082c:	20001428 	.word	0x20001428

00010830 <ticker_by_slot_get>:
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
   10830:	29ff      	cmp	r1, #255	; 0xff
   10832:	d012      	beq.n	1085a <ticker_by_slot_get+0x2a>
{
   10834:	b430      	push	{r4, r5}
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
   10836:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   1083a:	00a3      	lsls	r3, r4, #2
   1083c:	18c4      	adds	r4, r0, r3
		ticks_to_expire = ticker->ticks_to_expire;
   1083e:	68a5      	ldr	r5, [r4, #8]

		if (ticks_slot <= ticks_to_expire) {
   10840:	42aa      	cmp	r2, r5
   10842:	d906      	bls.n	10852 <ticker_by_slot_get+0x22>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
   10844:	8ae4      	ldrh	r4, [r4, #22]
   10846:	b92c      	cbnz	r4, 10854 <ticker_by_slot_get+0x24>
			break;
		}

		ticks_slot -= ticks_to_expire;
   10848:	1b52      	subs	r2, r2, r5
		ticker_id_head = ticker->next;
   1084a:	5cc1      	ldrb	r1, [r0, r3]
	while (ticker_id_head != TICKER_NULL) {
   1084c:	29ff      	cmp	r1, #255	; 0xff
   1084e:	d1f2      	bne.n	10836 <ticker_by_slot_get+0x6>
   10850:	e000      	b.n	10854 <ticker_by_slot_get+0x24>
			return TICKER_NULL;
   10852:	21ff      	movs	r1, #255	; 0xff
	}

	return ticker_id_head;
}
   10854:	4608      	mov	r0, r1
   10856:	bc30      	pop	{r4, r5}
   10858:	4770      	bx	lr
   1085a:	4608      	mov	r0, r1
   1085c:	4770      	bx	lr

0001085e <ticker_by_next_slot_get>:

static void ticker_by_next_slot_get(struct ticker_instance *instance,
				    u8_t *ticker_id_head, u32_t *ticks_current,
				    u32_t *ticks_to_expire)
{
   1085e:	b5f0      	push	{r4, r5, r6, r7, lr}
   10860:	4694      	mov	ip, r2
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
   10862:	6807      	ldr	r7, [r0, #0]

	_ticker_id_head = *ticker_id_head;
   10864:	f891 e000 	ldrb.w	lr, [r1]
	_ticks_to_expire = *ticks_to_expire;
   10868:	681e      	ldr	r6, [r3, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
   1086a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   1086e:	d004      	beq.n	1087a <ticker_by_next_slot_get+0x1c>
	    (*ticks_current != instance->ticks_current)) {
   10870:	6942      	ldr	r2, [r0, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   10872:	f8dc 4000 	ldr.w	r4, [ip]
   10876:	4294      	cmp	r4, r2
   10878:	d005      	beq.n	10886 <ticker_by_next_slot_get+0x28>
		_ticker_id_head = instance->ticker_id_head;
   1087a:	7e04      	ldrb	r4, [r0, #24]
		*ticks_current = instance->ticks_current;
   1087c:	6940      	ldr	r0, [r0, #20]
   1087e:	f8cc 0000 	str.w	r0, [ip]
		_ticks_to_expire = 0;
   10882:	2600      	movs	r6, #0
   10884:	e00a      	b.n	1089c <ticker_by_next_slot_get+0x3e>
	} else {
		ticker = &node[_ticker_id_head];
   10886:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
   1088a:	ea4f 028e 	mov.w	r2, lr, lsl #2
   1088e:	4696      	mov	lr, r2
   10890:	18bd      	adds	r5, r7, r2
		_ticker_id_head = ticker->next;
   10892:	5cbc      	ldrb	r4, [r7, r2]
   10894:	e002      	b.n	1089c <ticker_by_next_slot_get+0x3e>
	}

	while ((_ticker_id_head != TICKER_NULL) &&
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
		_ticks_to_expire += ticker->ticks_to_expire;
   10896:	68a8      	ldr	r0, [r5, #8]
   10898:	4406      	add	r6, r0
		_ticker_id_head = ticker->next;
   1089a:	5cbc      	ldrb	r4, [r7, r2]
	while ((_ticker_id_head != TICKER_NULL) &&
   1089c:	2cff      	cmp	r4, #255	; 0xff
   1089e:	d006      	beq.n	108ae <ticker_by_next_slot_get+0x50>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
   108a0:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
   108a4:	0082      	lsls	r2, r0, #2
   108a6:	18bd      	adds	r5, r7, r2
   108a8:	8ae8      	ldrh	r0, [r5, #22]
	while ((_ticker_id_head != TICKER_NULL) &&
   108aa:	2800      	cmp	r0, #0
   108ac:	d0f3      	beq.n	10896 <ticker_by_next_slot_get+0x38>
	}

	if (_ticker_id_head != TICKER_NULL) {
   108ae:	2cff      	cmp	r4, #255	; 0xff
   108b0:	d001      	beq.n	108b6 <ticker_by_next_slot_get+0x58>
		_ticks_to_expire += ticker->ticks_to_expire;
   108b2:	68aa      	ldr	r2, [r5, #8]
   108b4:	4416      	add	r6, r2
	}

	*ticker_id_head = _ticker_id_head;
   108b6:	700c      	strb	r4, [r1, #0]
	*ticks_to_expire = _ticks_to_expire;
   108b8:	601e      	str	r6, [r3, #0]
   108ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000108bc <ticker_enqueue>:
}

static u8_t ticker_enqueue(struct ticker_instance *instance, u8_t id)
{
   108bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108c0:	b085      	sub	sp, #20
   108c2:	4681      	mov	r9, r0
   108c4:	9102      	str	r1, [sp, #8]
	u32_t ticks_to_expire;
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
   108c6:	6806      	ldr	r6, [r0, #0]
	ticker_new = &node[id];
   108c8:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   108cc:	009b      	lsls	r3, r3, #2
   108ce:	9303      	str	r3, [sp, #12]
   108d0:	eb06 0a03 	add.w	sl, r6, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
   108d4:	f8da 5008 	ldr.w	r5, [sl, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
   108d8:	f890 8018 	ldrb.w	r8, [r0, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
   108dc:	8b47      	ldrh	r7, [r0, #26]
	current = instance->ticker_id_head;
   108de:	4644      	mov	r4, r8
	collide = ticker_id_slot_previous = TICKER_NULL;
   108e0:	23ff      	movs	r3, #255	; 0xff
   108e2:	9301      	str	r3, [sp, #4]
	while ((current != TICKER_NULL) &&
   108e4:	e004      	b.n	108f0 <ticker_enqueue+0x34>

		if (ticker_current->ticks_slot != 0) {
			ticks_slot_previous = ticker_current->ticks_slot;
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
   108e6:	4297      	cmp	r7, r2
   108e8:	d912      	bls.n	10910 <ticker_enqueue+0x54>
				ticks_slot_previous -= ticks_to_expire_current;
   108ea:	1abf      	subs	r7, r7, r2
			} else {
				ticks_slot_previous = 0;
			}
		}
		previous = current;
   108ec:	46a0      	mov	r8, r4
		current = ticker_current->next;
   108ee:	5cf4      	ldrb	r4, [r6, r3]
	while ((current != TICKER_NULL) &&
   108f0:	2cff      	cmp	r4, #255	; 0xff
   108f2:	d00f      	beq.n	10914 <ticker_enqueue+0x58>
		 (ticker_current = &node[current])->ticks_to_expire))) {
   108f4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   108f8:	0093      	lsls	r3, r2, #2
   108fa:	18f1      	adds	r1, r6, r3
		(ticks_to_expire_current =
   108fc:	688a      	ldr	r2, [r1, #8]
	while ((current != TICKER_NULL) &&
   108fe:	4295      	cmp	r5, r2
   10900:	d908      	bls.n	10914 <ticker_enqueue+0x58>
		ticks_to_expire -= ticks_to_expire_current;
   10902:	1aad      	subs	r5, r5, r2
		if (ticker_current->ticks_slot != 0) {
   10904:	8ac9      	ldrh	r1, [r1, #22]
   10906:	2900      	cmp	r1, #0
   10908:	d0ed      	beq.n	108e6 <ticker_enqueue+0x2a>
			ticks_slot_previous = ticker_current->ticks_slot;
   1090a:	460f      	mov	r7, r1
			ticker_id_slot_previous = current;
   1090c:	9401      	str	r4, [sp, #4]
   1090e:	e7ed      	b.n	108ec <ticker_enqueue+0x30>
				ticks_slot_previous = 0;
   10910:	2700      	movs	r7, #0
   10912:	e7eb      	b.n	108ec <ticker_enqueue+0x30>
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);
   10914:	f8ba b016 	ldrh.w	fp, [sl, #22]
	collide = ticker_by_slot_get(&node[0], current,
   10918:	eb05 020b 	add.w	r2, r5, fp
   1091c:	4621      	mov	r1, r4
   1091e:	4630      	mov	r0, r6
   10920:	f7ff ff86 	bl	10830 <ticker_by_slot_get>

	if ((ticker_new->ticks_slot == 0) ||
   10924:	f1bb 0f00 	cmp.w	fp, #0
   10928:	d007      	beq.n	1093a <ticker_enqueue+0x7e>
   1092a:	42af      	cmp	r7, r5
   1092c:	d801      	bhi.n	10932 <ticker_enqueue+0x76>
	    ((ticks_slot_previous <= ticks_to_expire) &&
   1092e:	28ff      	cmp	r0, #255	; 0xff
   10930:	d003      	beq.n	1093a <ticker_enqueue+0x7e>

		if (current != TICKER_NULL) {
			node[current].ticks_to_expire -= ticks_to_expire;
		}
	} else {
		if (ticks_slot_previous > ticks_to_expire) {
   10932:	42af      	cmp	r7, r5
   10934:	d918      	bls.n	10968 <ticker_enqueue+0xac>
			id = ticker_id_slot_previous;
   10936:	9801      	ldr	r0, [sp, #4]
   10938:	e016      	b.n	10968 <ticker_enqueue+0xac>
		ticker_new->ticks_to_expire = ticks_to_expire;
   1093a:	f8ca 5008 	str.w	r5, [sl, #8]
		ticker_new->next = current;
   1093e:	9b03      	ldr	r3, [sp, #12]
   10940:	54f4      	strb	r4, [r6, r3]
		if (previous == current) {
   10942:	45a0      	cmp	r8, r4
   10944:	d013      	beq.n	1096e <ticker_enqueue+0xb2>
			node[previous].next = id;
   10946:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
   1094a:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1094e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10952:	54f2      	strb	r2, [r6, r3]
		if (current != TICKER_NULL) {
   10954:	2cff      	cmp	r4, #255	; 0xff
   10956:	d00f      	beq.n	10978 <ticker_enqueue+0xbc>
			node[current].ticks_to_expire -= ticks_to_expire;
   10958:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1095c:	00a3      	lsls	r3, r4, #2
   1095e:	441e      	add	r6, r3
   10960:	68b3      	ldr	r3, [r6, #8]
   10962:	1b5d      	subs	r5, r3, r5
   10964:	60b5      	str	r5, [r6, #8]
   10966:	9802      	ldr	r0, [sp, #8]
			id = collide;
		}
	}

	return id;
}
   10968:	b005      	add	sp, #20
   1096a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			instance->ticker_id_head = id;
   1096e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10972:	f889 3018 	strb.w	r3, [r9, #24]
   10976:	e7ed      	b.n	10954 <ticker_enqueue+0x98>
   10978:	9802      	ldr	r0, [sp, #8]
   1097a:	e7f5      	b.n	10968 <ticker_enqueue+0xac>

0001097c <ticker_dequeue>:

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
   1097c:	b4f0      	push	{r4, r5, r6, r7}
	u32_t timeout;
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
   1097e:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
   10980:	7e07      	ldrb	r7, [r0, #24]
	current = previous;
   10982:	463b      	mov	r3, r7
	total = 0;
   10984:	2500      	movs	r5, #0
	ticker_current = 0;
   10986:	462c      	mov	r4, r5
	while (current != TICKER_NULL) {
   10988:	2bff      	cmp	r3, #255	; 0xff
   1098a:	d00a      	beq.n	109a2 <ticker_dequeue+0x26>

		ticker_current = &node[current];
   1098c:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
   10990:	00a2      	lsls	r2, r4, #2
   10992:	18b4      	adds	r4, r6, r2

		if (current == id) {
   10994:	428b      	cmp	r3, r1
   10996:	d004      	beq.n	109a2 <ticker_dequeue+0x26>
			break;
		}

		total += ticker_current->ticks_to_expire;
   10998:	68a7      	ldr	r7, [r4, #8]
   1099a:	443d      	add	r5, r7
		previous = current;
   1099c:	461f      	mov	r7, r3
		current = ticker_current->next;
   1099e:	5cb3      	ldrb	r3, [r6, r2]
   109a0:	e7f2      	b.n	10988 <ticker_dequeue+0xc>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
   109a2:	2bff      	cmp	r3, #255	; 0xff
   109a4:	d017      	beq.n	109d6 <ticker_dequeue+0x5a>
		return 0;
	}

	/* ticker is the first in the list */
	if (previous == current) {
   109a6:	429f      	cmp	r7, r3
   109a8:	d012      	beq.n	109d0 <ticker_dequeue+0x54>
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
   109aa:	68a0      	ldr	r0, [r4, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
   109ac:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
   109b0:	00bb      	lsls	r3, r7, #2
   109b2:	7822      	ldrb	r2, [r4, #0]
   109b4:	54f2      	strb	r2, [r6, r3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
   109b6:	7823      	ldrb	r3, [r4, #0]
   109b8:	2bff      	cmp	r3, #255	; 0xff
   109ba:	d006      	beq.n	109ca <ticker_dequeue+0x4e>
		node[ticker_current->next].ticks_to_expire += timeout;
   109bc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   109c0:	009a      	lsls	r2, r3, #2
   109c2:	4416      	add	r6, r2
   109c4:	68b3      	ldr	r3, [r6, #8]
   109c6:	4403      	add	r3, r0
   109c8:	60b3      	str	r3, [r6, #8]
	}

	return (total + timeout);
   109ca:	4428      	add	r0, r5
}
   109cc:	bcf0      	pop	{r4, r5, r6, r7}
   109ce:	4770      	bx	lr
		instance->ticker_id_head = ticker_current->next;
   109d0:	7823      	ldrb	r3, [r4, #0]
   109d2:	7603      	strb	r3, [r0, #24]
   109d4:	e7e9      	b.n	109aa <ticker_dequeue+0x2e>
		return 0;
   109d6:	2000      	movs	r0, #0
   109d8:	e7f8      	b.n	109cc <ticker_dequeue+0x50>
	...

000109dc <ticker_remainder_inc>:
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
   109dc:	69c3      	ldr	r3, [r0, #28]
   109de:	6a02      	ldr	r2, [r0, #32]
   109e0:	4413      	add	r3, r2
   109e2:	6203      	str	r3, [r0, #32]
	if ((ticker->remainder_current < BIT(31)) &&
   109e4:	4a05      	ldr	r2, [pc, #20]	; (109fc <ticker_remainder_inc+0x20>)
   109e6:	441a      	add	r2, r3
   109e8:	4905      	ldr	r1, [pc, #20]	; (10a00 <ticker_remainder_inc+0x24>)
   109ea:	428a      	cmp	r2, r1
   109ec:	d804      	bhi.n	109f8 <ticker_remainder_inc+0x1c>
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
   109ee:	4a05      	ldr	r2, [pc, #20]	; (10a04 <ticker_remainder_inc+0x28>)
   109f0:	441a      	add	r2, r3
   109f2:	6202      	str	r2, [r0, #32]
		return 1;
   109f4:	2001      	movs	r0, #1
   109f6:	4770      	bx	lr
	}
	return 0;
   109f8:	2000      	movs	r0, #0
}
   109fa:	4770      	bx	lr
   109fc:	ff172b5a 	.word	0xff172b5a
   10a00:	7f172b59 	.word	0x7f172b59
   10a04:	fe2e56b6 	.word	0xfe2e56b6

00010a08 <ticker_remainder_dec>:

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
   10a08:	4603      	mov	r3, r0
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
   10a0a:	6a01      	ldr	r1, [r0, #32]
   10a0c:	4a07      	ldr	r2, [pc, #28]	; (10a2c <ticker_remainder_dec+0x24>)
   10a0e:	440a      	add	r2, r1
   10a10:	4807      	ldr	r0, [pc, #28]	; (10a30 <ticker_remainder_dec+0x28>)
   10a12:	4282      	cmp	r2, r0
   10a14:	d908      	bls.n	10a28 <ticker_remainder_dec+0x20>
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
   10a16:	4a07      	ldr	r2, [pc, #28]	; (10a34 <ticker_remainder_dec+0x2c>)
   10a18:	440a      	add	r2, r1
   10a1a:	621a      	str	r2, [r3, #32]
		decrement++;
   10a1c:	2001      	movs	r0, #1
	}
	ticker->remainder_current -= ticker->remainder_periodic;
   10a1e:	69d9      	ldr	r1, [r3, #28]
   10a20:	6a1a      	ldr	r2, [r3, #32]
   10a22:	1a52      	subs	r2, r2, r1
   10a24:	621a      	str	r2, [r3, #32]

	return decrement;
}
   10a26:	4770      	bx	lr
	u8_t decrement = 0;
   10a28:	2000      	movs	r0, #0
   10a2a:	e7f8      	b.n	10a1e <ticker_remainder_dec+0x16>
   10a2c:	ff172b5a 	.word	0xff172b5a
   10a30:	7f172b59 	.word	0x7f172b59
   10a34:	01d1a94a 	.word	0x01d1a94a

00010a38 <ticker_job_op_cb>:

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
   10a38:	b510      	push	{r4, lr}
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10a3a:	2300      	movs	r3, #0
   10a3c:	7003      	strb	r3, [r0, #0]
	user_op->status = status;
   10a3e:	6201      	str	r1, [r0, #32]
	if (user_op->fp_op_func) {
   10a40:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10a42:	b11c      	cbz	r4, 10a4c <ticker_job_op_cb+0x14>
   10a44:	460a      	mov	r2, r1
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10a46:	6a81      	ldr	r1, [r0, #40]	; 0x28
   10a48:	4610      	mov	r0, r2
   10a4a:	47a0      	blx	r4
   10a4c:	bd10      	pop	{r4, pc}

00010a4e <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
   10a4e:	b508      	push	{r3, lr}
	cntr_cmp_set(1, value);
   10a50:	4601      	mov	r1, r0
   10a52:	2001      	movs	r0, #1
   10a54:	f7fe fd3e 	bl	f4d4 <cntr_cmp_set>
   10a58:	bd08      	pop	{r3, pc}

00010a5a <ticker_instance0_cmp_set>:
{
   10a5a:	b508      	push	{r3, lr}
	cntr_cmp_set(0, value);
   10a5c:	4601      	mov	r1, r0
   10a5e:	2000      	movs	r0, #0
   10a60:	f7fe fd38 	bl	f4d4 <cntr_cmp_set>
   10a64:	bd08      	pop	{r3, pc}
	...

00010a68 <ticker_instance1_sched>:
{
   10a68:	b508      	push	{r3, lr}
	switch (caller_id) {
   10a6a:	2803      	cmp	r0, #3
   10a6c:	d841      	bhi.n	10af2 <ticker_instance1_sched+0x8a>
   10a6e:	e8df f000 	tbb	[pc, r0]
   10a72:	1002      	.short	0x1002
   10a74:	331d      	.short	0x331d
		switch (callee_id) {
   10a76:	2901      	cmp	r1, #1
   10a78:	d105      	bne.n	10a86 <ticker_instance1_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   10a7a:	4b21      	ldr	r3, [pc, #132]	; (10b00 <ticker_instance1_sched+0x98>)
   10a7c:	2102      	movs	r1, #2
   10a7e:	2000      	movs	r0, #0
   10a80:	f7fe fb10 	bl	f0a4 <mayfly_enqueue>
		break;
   10a84:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10a86:	4040      	eors	r0, r0
   10a88:	f380 8811 	msr	BASEPRI, r0
   10a8c:	f04f 0004 	mov.w	r0, #4
   10a90:	df02      	svc	2
		switch (callee_id) {
   10a92:	2902      	cmp	r1, #2
   10a94:	d104      	bne.n	10aa0 <ticker_instance1_sched+0x38>
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10a96:	4b1b      	ldr	r3, [pc, #108]	; (10b04 <ticker_instance1_sched+0x9c>)
   10a98:	4608      	mov	r0, r1
   10a9a:	f7fe fb03 	bl	f0a4 <mayfly_enqueue>
		break;
   10a9e:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10aa0:	4040      	eors	r0, r0
   10aa2:	f380 8811 	msr	BASEPRI, r0
   10aa6:	f04f 0004 	mov.w	r0, #4
   10aaa:	df02      	svc	2
		switch (callee_id) {
   10aac:	2901      	cmp	r1, #1
   10aae:	d007      	beq.n	10ac0 <ticker_instance1_sched+0x58>
   10ab0:	2902      	cmp	r1, #2
   10ab2:	d00b      	beq.n	10acc <ticker_instance1_sched+0x64>
			LL_ASSERT(0);
   10ab4:	4040      	eors	r0, r0
   10ab6:	f380 8811 	msr	BASEPRI, r0
   10aba:	f04f 0004 	mov.w	r0, #4
   10abe:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10ac0:	4b11      	ldr	r3, [pc, #68]	; (10b08 <ticker_instance1_sched+0xa0>)
   10ac2:	2102      	movs	r1, #2
   10ac4:	4608      	mov	r0, r1
   10ac6:	f7fe faed 	bl	f0a4 <mayfly_enqueue>
		break;
   10aca:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10acc:	4b0f      	ldr	r3, [pc, #60]	; (10b0c <ticker_instance1_sched+0xa4>)
   10ace:	2102      	movs	r1, #2
   10ad0:	4608      	mov	r0, r1
   10ad2:	f7fe fae7 	bl	f0a4 <mayfly_enqueue>
		break;
   10ad6:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   10ad8:	2902      	cmp	r1, #2
   10ada:	d104      	bne.n	10ae6 <ticker_instance1_sched+0x7e>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   10adc:	4b0c      	ldr	r3, [pc, #48]	; (10b10 <ticker_instance1_sched+0xa8>)
   10ade:	2003      	movs	r0, #3
   10ae0:	f7fe fae0 	bl	f0a4 <mayfly_enqueue>
		break;
   10ae4:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10ae6:	4040      	eors	r0, r0
   10ae8:	f380 8811 	msr	BASEPRI, r0
   10aec:	f04f 0004 	mov.w	r0, #4
   10af0:	df02      	svc	2
		LL_ASSERT(0);
   10af2:	4040      	eors	r0, r0
   10af4:	f380 8811 	msr	BASEPRI, r0
   10af8:	f04f 0004 	mov.w	r0, #4
   10afc:	df02      	svc	2
   10afe:	bf00      	nop
   10b00:	2000c1b8 	.word	0x2000c1b8
   10b04:	2000c1c8 	.word	0x2000c1c8
   10b08:	2000c1d8 	.word	0x2000c1d8
   10b0c:	2000c1e8 	.word	0x2000c1e8
   10b10:	2000c1f8 	.word	0x2000c1f8

00010b14 <ticker_instance1_caller_id_get>:
	switch (user_id) {
   10b14:	1e83      	subs	r3, r0, #2
   10b16:	2b01      	cmp	r3, #1
   10b18:	d800      	bhi.n	10b1c <ticker_instance1_caller_id_get+0x8>
}
   10b1a:	4770      	bx	lr
		LL_ASSERT(0);
   10b1c:	4040      	eors	r0, r0
   10b1e:	f380 8811 	msr	BASEPRI, r0
   10b22:	f04f 0004 	mov.w	r0, #4
   10b26:	df02      	svc	2

00010b28 <ticker_instance0_sched>:
{
   10b28:	b508      	push	{r3, lr}
	switch (caller_id) {
   10b2a:	2803      	cmp	r0, #3
   10b2c:	d843      	bhi.n	10bb6 <ticker_instance0_sched+0x8e>
   10b2e:	e8df f000 	tbb	[pc, r0]
   10b32:	1002      	.short	0x1002
   10b34:	341e      	.short	0x341e
		switch (callee_id) {
   10b36:	2901      	cmp	r1, #1
   10b38:	d105      	bne.n	10b46 <ticker_instance0_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   10b3a:	4b22      	ldr	r3, [pc, #136]	; (10bc4 <ticker_instance0_sched+0x9c>)
   10b3c:	2100      	movs	r1, #0
   10b3e:	4608      	mov	r0, r1
   10b40:	f7fe fab0 	bl	f0a4 <mayfly_enqueue>
		break;
   10b44:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10b46:	4040      	eors	r0, r0
   10b48:	f380 8811 	msr	BASEPRI, r0
   10b4c:	f04f 0004 	mov.w	r0, #4
   10b50:	df02      	svc	2
		switch (callee_id) {
   10b52:	2902      	cmp	r1, #2
   10b54:	d105      	bne.n	10b62 <ticker_instance0_sched+0x3a>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   10b56:	4b1c      	ldr	r3, [pc, #112]	; (10bc8 <ticker_instance0_sched+0xa0>)
   10b58:	2101      	movs	r1, #1
   10b5a:	2000      	movs	r0, #0
   10b5c:	f7fe faa2 	bl	f0a4 <mayfly_enqueue>
		break;
   10b60:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10b62:	4040      	eors	r0, r0
   10b64:	f380 8811 	msr	BASEPRI, r0
   10b68:	f04f 0004 	mov.w	r0, #4
   10b6c:	df02      	svc	2
		switch (callee_id) {
   10b6e:	2901      	cmp	r1, #1
   10b70:	d007      	beq.n	10b82 <ticker_instance0_sched+0x5a>
   10b72:	2902      	cmp	r1, #2
   10b74:	d00b      	beq.n	10b8e <ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   10b76:	4040      	eors	r0, r0
   10b78:	f380 8811 	msr	BASEPRI, r0
   10b7c:	f04f 0004 	mov.w	r0, #4
   10b80:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   10b82:	4b12      	ldr	r3, [pc, #72]	; (10bcc <ticker_instance0_sched+0xa4>)
   10b84:	2100      	movs	r1, #0
   10b86:	2001      	movs	r0, #1
   10b88:	f7fe fa8c 	bl	f0a4 <mayfly_enqueue>
		break;
   10b8c:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   10b8e:	4b10      	ldr	r3, [pc, #64]	; (10bd0 <ticker_instance0_sched+0xa8>)
   10b90:	2101      	movs	r1, #1
   10b92:	4608      	mov	r0, r1
   10b94:	f7fe fa86 	bl	f0a4 <mayfly_enqueue>
		break;
   10b98:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   10b9a:	2902      	cmp	r1, #2
   10b9c:	d105      	bne.n	10baa <ticker_instance0_sched+0x82>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   10b9e:	4b0d      	ldr	r3, [pc, #52]	; (10bd4 <ticker_instance0_sched+0xac>)
   10ba0:	2101      	movs	r1, #1
   10ba2:	2003      	movs	r0, #3
   10ba4:	f7fe fa7e 	bl	f0a4 <mayfly_enqueue>
		break;
   10ba8:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10baa:	4040      	eors	r0, r0
   10bac:	f380 8811 	msr	BASEPRI, r0
   10bb0:	f04f 0004 	mov.w	r0, #4
   10bb4:	df02      	svc	2
		LL_ASSERT(0);
   10bb6:	4040      	eors	r0, r0
   10bb8:	f380 8811 	msr	BASEPRI, r0
   10bbc:	f04f 0004 	mov.w	r0, #4
   10bc0:	df02      	svc	2
   10bc2:	bf00      	nop
   10bc4:	2000c168 	.word	0x2000c168
   10bc8:	2000c178 	.word	0x2000c178
   10bcc:	2000c188 	.word	0x2000c188
   10bd0:	2000c198 	.word	0x2000c198
   10bd4:	2000c1a8 	.word	0x2000c1a8

00010bd8 <ticker_instance0_caller_id_get>:
	switch (user_id) {
   10bd8:	2801      	cmp	r0, #1
   10bda:	d00a      	beq.n	10bf2 <ticker_instance0_caller_id_get+0x1a>
   10bdc:	b138      	cbz	r0, 10bee <ticker_instance0_caller_id_get+0x16>
   10bde:	2803      	cmp	r0, #3
   10be0:	d008      	beq.n	10bf4 <ticker_instance0_caller_id_get+0x1c>
		LL_ASSERT(0);
   10be2:	4040      	eors	r0, r0
   10be4:	f380 8811 	msr	BASEPRI, r0
   10be8:	f04f 0004 	mov.w	r0, #4
   10bec:	df02      	svc	2
		return CALL_ID_WORKER;
   10bee:	2001      	movs	r0, #1
   10bf0:	4770      	bx	lr
		return CALL_ID_JOB;
   10bf2:	2002      	movs	r0, #2
}
   10bf4:	4770      	bx	lr
	...

00010bf8 <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
   10bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bfa:	9d05      	ldr	r5, [sp, #20]
   10bfc:	f89d 4018 	ldrb.w	r4, [sp, #24]
	    (sizeof(struct ticker_user) != TICKER_USER_T_SIZE) ||
	    (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
   10c00:	4606      	mov	r6, r0
   10c02:	b118      	cbz	r0, 10c0c <ticker_init+0x14>
   10c04:	2801      	cmp	r0, #1
   10c06:	d019      	beq.n	10c3c <ticker_init+0x44>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
   10c08:	2001      	movs	r0, #1
   10c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
   10c0c:	202c      	movs	r0, #44	; 0x2c
   10c0e:	4f20      	ldr	r7, [pc, #128]	; (10c90 <ticker_init+0x98>)
   10c10:	fb00 7006 	mla	r0, r0, r6, r7
   10c14:	4f1f      	ldr	r7, [pc, #124]	; (10c94 <ticker_init+0x9c>)
   10c16:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
   10c18:	4f1f      	ldr	r7, [pc, #124]	; (10c98 <ticker_init+0xa0>)
   10c1a:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
   10c1c:	4f1f      	ldr	r7, [pc, #124]	; (10c9c <ticker_init+0xa4>)
   10c1e:	6287      	str	r7, [r0, #40]	; 0x28
	}

	instance->count_node = count_node;
   10c20:	f8df e06c 	ldr.w	lr, [pc, #108]	; 10c90 <ticker_init+0x98>
   10c24:	202c      	movs	r0, #44	; 0x2c
   10c26:	fb00 f006 	mul.w	r0, r0, r6
   10c2a:	eb0e 0700 	add.w	r7, lr, r0
   10c2e:	7239      	strb	r1, [r7, #8]
	instance->node = node;
   10c30:	f84e 2000 	str.w	r2, [lr, r0]

	instance->count_user = count_user;
   10c34:	727b      	strb	r3, [r7, #9]
	instance->user = user;
   10c36:	607d      	str	r5, [r7, #4]
	struct ticker_user_op *user_op_ = (void *)user_op;
   10c38:	9907      	ldr	r1, [sp, #28]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
   10c3a:	e015      	b.n	10c68 <ticker_init+0x70>
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
   10c3c:	202c      	movs	r0, #44	; 0x2c
   10c3e:	4f14      	ldr	r7, [pc, #80]	; (10c90 <ticker_init+0x98>)
   10c40:	fb00 7006 	mla	r0, r0, r6, r7
   10c44:	4f16      	ldr	r7, [pc, #88]	; (10ca0 <ticker_init+0xa8>)
   10c46:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance1_sched;
   10c48:	4f16      	ldr	r7, [pc, #88]	; (10ca4 <ticker_init+0xac>)
   10c4a:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance1_cmp_set;
   10c4c:	4f16      	ldr	r7, [pc, #88]	; (10ca8 <ticker_init+0xb0>)
   10c4e:	6287      	str	r7, [r0, #40]	; 0x28
		break;
   10c50:	e7e6      	b.n	10c20 <ticker_init+0x28>
		users[count_user].user_op = user_op_;
   10c52:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   10c56:	6059      	str	r1, [r3, #4]
		user_op_ += users[count_user].count_user_op;
   10c58:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   10c5c:	202c      	movs	r0, #44	; 0x2c
   10c5e:	fb00 1103 	mla	r1, r0, r3, r1
		count_op -= users[count_user].count_user_op;
   10c62:	1ae3      	subs	r3, r4, r3
   10c64:	b2dc      	uxtb	r4, r3
	while (count_user--) {
   10c66:	4613      	mov	r3, r2
   10c68:	1e5a      	subs	r2, r3, #1
   10c6a:	b2d2      	uxtb	r2, r2
   10c6c:	2b00      	cmp	r3, #0
   10c6e:	d1f0      	bne.n	10c52 <ticker_init+0x5a>
	}

	if (count_op) {
   10c70:	b964      	cbnz	r4, 10c8c <ticker_init+0x94>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
   10c72:	222c      	movs	r2, #44	; 0x2c
   10c74:	4b06      	ldr	r3, [pc, #24]	; (10c90 <ticker_init+0x98>)
   10c76:	fb02 3606 	mla	r6, r2, r6, r3
   10c7a:	23ff      	movs	r3, #255	; 0xff
   10c7c:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
   10c7e:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
   10c80:	2000      	movs	r0, #0
   10c82:	8370      	strh	r0, [r6, #26]
	instance->ticks_current = 0;
   10c84:	6170      	str	r0, [r6, #20]
	instance->ticks_elapsed_first = 0;
   10c86:	72b0      	strb	r0, [r6, #10]
	instance->ticks_elapsed_last = 0;
   10c88:	72f0      	strb	r0, [r6, #11]

	return TICKER_STATUS_SUCCESS;
   10c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
   10c8c:	2001      	movs	r0, #1
}
   10c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c90:	2000142c 	.word	0x2000142c
   10c94:	00010bd9 	.word	0x00010bd9
   10c98:	00010b29 	.word	0x00010b29
   10c9c:	00010a5b 	.word	0x00010a5b
   10ca0:	00010b15 	.word	0x00010b15
   10ca4:	00010a69 	.word	0x00010a69
   10ca8:	00010a4f 	.word	0x00010a4f

00010cac <ticker_trigger>:
{
	return !!(_instance[instance_index].count_node);
}

void ticker_trigger(u8_t instance_index)
{
   10cac:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
   10cae:	232c      	movs	r3, #44	; 0x2c
   10cb0:	4a04      	ldr	r2, [pc, #16]	; (10cc4 <ticker_trigger+0x18>)
   10cb2:	fb03 2000 	mla	r0, r3, r0, r2
   10cb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10cb8:	b11b      	cbz	r3, 10cc2 <ticker_trigger+0x16>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
   10cba:	2201      	movs	r2, #1
   10cbc:	4611      	mov	r1, r2
   10cbe:	2000      	movs	r0, #0
   10cc0:	4798      	blx	r3
   10cc2:	bd08      	pop	{r3, pc}
   10cc4:	2000142c 	.word	0x2000142c

00010cc8 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
   10cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10ccc:	242c      	movs	r4, #44	; 0x2c
   10cce:	4d24      	ldr	r5, [pc, #144]	; (10d60 <ticker_start+0x98>)
   10cd0:	fb04 5400 	mla	r4, r4, r0, r5
   10cd4:	6866      	ldr	r6, [r4, #4]
   10cd6:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10cda:	f89e 4003 	ldrb.w	r4, [lr, #3]
   10cde:	1c65      	adds	r5, r4, #1
   10ce0:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   10ce2:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10ce6:	42b5      	cmp	r5, r6
   10ce8:	d300      	bcc.n	10cec <ticker_start+0x24>
		last = 0;
   10cea:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   10cec:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10cf0:	42b5      	cmp	r5, r6
   10cf2:	d032      	beq.n	10d5a <ticker_start+0x92>
   10cf4:	469c      	mov	ip, r3
   10cf6:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10cf8:	f8de 3004 	ldr.w	r3, [lr, #4]
   10cfc:	f04f 082c 	mov.w	r8, #44	; 0x2c
   10d00:	fb08 f604 	mul.w	r6, r8, r4
   10d04:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_START;
   10d06:	2003      	movs	r0, #3
   10d08:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   10d0a:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
   10d0c:	f8c4 c004 	str.w	ip, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   10d10:	9b06      	ldr	r3, [sp, #24]
   10d12:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   10d14:	9b07      	ldr	r3, [sp, #28]
   10d16:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   10d18:	9b08      	ldr	r3, [sp, #32]
   10d1a:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   10d1c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   10d20:	82e3      	strh	r3, [r4, #22]
	user_op->params.start.lazy = lazy;
   10d22:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10d26:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
   10d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d2a:	61a3      	str	r3, [r4, #24]
	user_op->params.start.context = context;
   10d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10d2e:	61e3      	str	r3, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
   10d30:	2602      	movs	r6, #2
   10d32:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10d36:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   10d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10d3a:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   10d3c:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10d40:	4b07      	ldr	r3, [pc, #28]	; (10d60 <ticker_start+0x98>)
   10d42:	fb08 3307 	mla	r3, r8, r7, r3
   10d46:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   10d48:	6a1b      	ldr	r3, [r3, #32]
   10d4a:	4608      	mov	r0, r1
   10d4c:	4798      	blx	r3
   10d4e:	2200      	movs	r2, #0
   10d50:	4631      	mov	r1, r6
   10d52:	47a8      	blx	r5

	return user_op->status;
   10d54:	6a20      	ldr	r0, [r4, #32]
   10d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10d5a:	2001      	movs	r0, #1
}
   10d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d60:	2000142c 	.word	0x2000142c

00010d64 <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
   10d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10d68:	242c      	movs	r4, #44	; 0x2c
   10d6a:	4d24      	ldr	r5, [pc, #144]	; (10dfc <ticker_update+0x98>)
   10d6c:	fb04 5400 	mla	r4, r4, r0, r5
   10d70:	6866      	ldr	r6, [r4, #4]
   10d72:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10d76:	f89e 4003 	ldrb.w	r4, [lr, #3]
   10d7a:	1c65      	adds	r5, r4, #1
   10d7c:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   10d7e:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10d82:	42b5      	cmp	r5, r6
   10d84:	d300      	bcc.n	10d88 <ticker_update+0x24>
		last = 0;
   10d86:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   10d88:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10d8c:	42b5      	cmp	r5, r6
   10d8e:	d031      	beq.n	10df4 <ticker_update+0x90>
   10d90:	469c      	mov	ip, r3
   10d92:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10d94:	f8de 3004 	ldr.w	r3, [lr, #4]
   10d98:	f04f 082c 	mov.w	r8, #44	; 0x2c
   10d9c:	fb08 f604 	mul.w	r6, r8, r4
   10da0:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   10da2:	2004      	movs	r0, #4
   10da4:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   10da6:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   10da8:	f8a4 c004 	strh.w	ip, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   10dac:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10db0:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   10db2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   10db6:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   10db8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   10dbc:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
   10dbe:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10dc2:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
   10dc4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   10dc8:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
   10dca:	2602      	movs	r6, #2
   10dcc:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10dd0:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   10dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10dd4:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   10dd6:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10dda:	4b08      	ldr	r3, [pc, #32]	; (10dfc <ticker_update+0x98>)
   10ddc:	fb08 3307 	mla	r3, r8, r7, r3
   10de0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   10de2:	6a1b      	ldr	r3, [r3, #32]
   10de4:	4608      	mov	r0, r1
   10de6:	4798      	blx	r3
   10de8:	2200      	movs	r2, #0
   10dea:	4631      	mov	r1, r6
   10dec:	47a8      	blx	r5

	return user_op->status;
   10dee:	6a20      	ldr	r0, [r4, #32]
   10df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10df4:	2001      	movs	r0, #1
}
   10df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10dfa:	bf00      	nop
   10dfc:	2000142c 	.word	0x2000142c

00010e00 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
   10e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10e04:	242c      	movs	r4, #44	; 0x2c
   10e06:	4d1b      	ldr	r5, [pc, #108]	; (10e74 <ticker_stop+0x74>)
   10e08:	fb04 5400 	mla	r4, r4, r0, r5
   10e0c:	6866      	ldr	r6, [r4, #4]
   10e0e:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10e12:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10e16:	1c6c      	adds	r4, r5, #1
   10e18:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10e1a:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10e1e:	42b4      	cmp	r4, r6
   10e20:	d300      	bcc.n	10e24 <ticker_stop+0x24>
		last = 0;
   10e22:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10e24:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10e28:	42b4      	cmp	r4, r6
   10e2a:	d020      	beq.n	10e6e <ticker_stop+0x6e>
   10e2c:	4698      	mov	r8, r3
   10e2e:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10e30:	f8de 3004 	ldr.w	r3, [lr, #4]
   10e34:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   10e38:	fb0c f505 	mul.w	r5, ip, r5
   10e3c:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   10e3e:	2005      	movs	r0, #5
   10e40:	5558      	strb	r0, [r3, r5]
	user_op->id = ticker_id;
   10e42:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10e44:	2502      	movs	r5, #2
   10e46:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   10e48:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   10e4c:	9b06      	ldr	r3, [sp, #24]
   10e4e:	62b3      	str	r3, [r6, #40]	; 0x28

	user->last = last;
   10e50:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10e54:	4b07      	ldr	r3, [pc, #28]	; (10e74 <ticker_stop+0x74>)
   10e56:	fb0c 3307 	mla	r3, ip, r7, r3
   10e5a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10e5c:	6a1b      	ldr	r3, [r3, #32]
   10e5e:	4608      	mov	r0, r1
   10e60:	4798      	blx	r3
   10e62:	2200      	movs	r2, #0
   10e64:	4629      	mov	r1, r5
   10e66:	47a0      	blx	r4

	return user_op->status;
   10e68:	6a30      	ldr	r0, [r6, #32]
   10e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10e6e:	2001      	movs	r0, #1
}
   10e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e74:	2000142c 	.word	0x2000142c

00010e78 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
   10e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10e7c:	242c      	movs	r4, #44	; 0x2c
   10e7e:	4d1f      	ldr	r5, [pc, #124]	; (10efc <ticker_next_slot_get+0x84>)
   10e80:	fb04 5400 	mla	r4, r4, r0, r5
   10e84:	6866      	ldr	r6, [r4, #4]
   10e86:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10e8a:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10e8e:	1c6c      	adds	r4, r5, #1
   10e90:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10e92:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10e96:	42b4      	cmp	r4, r6
   10e98:	d300      	bcc.n	10e9c <ticker_next_slot_get+0x24>
		last = 0;
   10e9a:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10e9c:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10ea0:	42b4      	cmp	r4, r6
   10ea2:	d027      	beq.n	10ef4 <ticker_next_slot_get+0x7c>
   10ea4:	469c      	mov	ip, r3
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10ea6:	f8de 3004 	ldr.w	r3, [lr, #4]
   10eaa:	f04f 092c 	mov.w	r9, #44	; 0x2c
   10eae:	fb09 f605 	mul.w	r6, r9, r5
   10eb2:	199d      	adds	r5, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   10eb4:	f04f 0802 	mov.w	r8, #2
   10eb8:	f803 8006 	strb.w	r8, [r3, r6]
	user_op->id = TICKER_NULL;
   10ebc:	23ff      	movs	r3, #255	; 0xff
   10ebe:	706b      	strb	r3, [r5, #1]
	user_op->params.slot_get.ticker_id = ticker_id;
   10ec0:	606a      	str	r2, [r5, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
   10ec2:	f8c5 c008 	str.w	ip, [r5, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   10ec6:	9b08      	ldr	r3, [sp, #32]
   10ec8:	60eb      	str	r3, [r5, #12]
	user_op->status = TICKER_STATUS_BUSY;
   10eca:	f8c5 8020 	str.w	r8, [r5, #32]
	user_op->fp_op_func = fp_op_func;
   10ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10ed0:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->op_context = op_context;
   10ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10ed4:	62ab      	str	r3, [r5, #40]	; 0x28

	user->last = last;
   10ed6:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10eda:	4b08      	ldr	r3, [pc, #32]	; (10efc <ticker_next_slot_get+0x84>)
   10edc:	fb09 3300 	mla	r3, r9, r0, r3
   10ee0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10ee2:	6a1b      	ldr	r3, [r3, #32]
   10ee4:	4608      	mov	r0, r1
   10ee6:	4798      	blx	r3
   10ee8:	2200      	movs	r2, #0
   10eea:	4641      	mov	r1, r8
   10eec:	47a0      	blx	r4

	return user_op->status;
   10eee:	6a28      	ldr	r0, [r5, #32]
   10ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   10ef4:	2001      	movs	r0, #1
}
   10ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10efa:	bf00      	nop
   10efc:	2000142c 	.word	0x2000142c

00010f00 <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
   10f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10f04:	242c      	movs	r4, #44	; 0x2c
   10f06:	4d1b      	ldr	r5, [pc, #108]	; (10f74 <ticker_job_idle_get+0x74>)
   10f08:	fb04 5400 	mla	r4, r4, r0, r5
   10f0c:	6866      	ldr	r6, [r4, #4]
   10f0e:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10f12:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10f16:	1c6c      	adds	r4, r5, #1
   10f18:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10f1a:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10f1e:	42b4      	cmp	r4, r6
   10f20:	d300      	bcc.n	10f24 <ticker_job_idle_get+0x24>
		last = 0;
   10f22:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10f24:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10f28:	42b4      	cmp	r4, r6
   10f2a:	d020      	beq.n	10f6e <ticker_job_idle_get+0x6e>
   10f2c:	4698      	mov	r8, r3
   10f2e:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10f30:	f8de 3004 	ldr.w	r3, [lr, #4]
   10f34:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   10f38:	fb0c f505 	mul.w	r5, ip, r5
   10f3c:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   10f3e:	2001      	movs	r0, #1
   10f40:	5558      	strb	r0, [r3, r5]
	user_op->id = TICKER_NULL;
   10f42:	23ff      	movs	r3, #255	; 0xff
   10f44:	7073      	strb	r3, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10f46:	2502      	movs	r5, #2
   10f48:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   10f4a:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   10f4c:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28

	user->last = last;
   10f50:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10f54:	4b07      	ldr	r3, [pc, #28]	; (10f74 <ticker_job_idle_get+0x74>)
   10f56:	fb0c 3307 	mla	r3, ip, r7, r3
   10f5a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10f5c:	6a1b      	ldr	r3, [r3, #32]
   10f5e:	4608      	mov	r0, r1
   10f60:	4798      	blx	r3
   10f62:	2200      	movs	r2, #0
   10f64:	4629      	mov	r1, r5
   10f66:	47a0      	blx	r4

	return user_op->status;
   10f68:	6a30      	ldr	r0, [r6, #32]
   10f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10f6e:	2001      	movs	r0, #1
}
   10f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10f74:	2000142c 	.word	0x2000142c

00010f78 <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
   10f78:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10f7a:	232c      	movs	r3, #44	; 0x2c
   10f7c:	4a05      	ldr	r2, [pc, #20]	; (10f94 <ticker_job_sched+0x1c>)
   10f7e:	fb03 2000 	mla	r0, r3, r0, r2
   10f82:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10f84:	6a03      	ldr	r3, [r0, #32]
   10f86:	4608      	mov	r0, r1
   10f88:	4798      	blx	r3
   10f8a:	2200      	movs	r2, #0
   10f8c:	2102      	movs	r1, #2
   10f8e:	47a0      	blx	r4
   10f90:	bd10      	pop	{r4, pc}
   10f92:	bf00      	nop
   10f94:	2000142c 	.word	0x2000142c

00010f98 <ticker_ticks_now_get>:
}

u32_t ticker_ticks_now_get(void)
{
   10f98:	b508      	push	{r3, lr}
	return cntr_cnt_get();
   10f9a:	f7fe fa95 	bl	f4c8 <cntr_cnt_get>
}
   10f9e:	bd08      	pop	{r3, pc}

00010fa0 <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   10fa0:	1a40      	subs	r0, r0, r1
}
   10fa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10fa6:	4770      	bx	lr

00010fa8 <ticker_worker>:
{
   10fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->worker_trigger = 1;
   10fac:	2301      	movs	r3, #1
   10fae:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
   10fb0:	f890 901c 	ldrb.w	r9, [r0, #28]
   10fb4:	f1b9 0f00 	cmp.w	r9, #0
   10fb8:	d147      	bne.n	1104a <ticker_worker+0xa2>
	if (instance->ticker_id_head == TICKER_NULL) {
   10fba:	7e03      	ldrb	r3, [r0, #24]
   10fbc:	2bff      	cmp	r3, #255	; 0xff
   10fbe:	d030      	beq.n	11022 <ticker_worker+0x7a>
   10fc0:	4607      	mov	r7, r0
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   10fc2:	f7fe fa81 	bl	f4c8 <cntr_cnt_get>
   10fc6:	6979      	ldr	r1, [r7, #20]
   10fc8:	f7ff ffea 	bl	10fa0 <ticker_ticks_diff_get>
   10fcc:	4605      	mov	r5, r0
	ticker_id_head = instance->ticker_id_head;
   10fce:	7e3c      	ldrb	r4, [r7, #24]
	node = &instance->node[0];
   10fd0:	f8d7 8000 	ldr.w	r8, [r7]
	ticks_expired = 0;
   10fd4:	2600      	movs	r6, #0
	while (ticker_id_head != TICKER_NULL) {
   10fd6:	2cff      	cmp	r4, #255	; 0xff
   10fd8:	d027      	beq.n	1102a <ticker_worker+0x82>
		ticker = &node[ticker_id_head];
   10fda:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   10fde:	00a3      	lsls	r3, r4, #2
   10fe0:	eb08 0103 	add.w	r1, r8, r3
		ticks_to_expire = ticker->ticks_to_expire;
   10fe4:	688a      	ldr	r2, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10fe6:	4295      	cmp	r5, r2
   10fe8:	d31f      	bcc.n	1102a <ticker_worker+0x82>
		ticks_elapsed -= ticks_to_expire;
   10fea:	1aad      	subs	r5, r5, r2
		ticks_expired += ticks_to_expire;
   10fec:	4416      	add	r6, r2
		ticker_id_head = ticker->next;
   10fee:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   10ff2:	784b      	ldrb	r3, [r1, #1]
   10ff4:	788a      	ldrb	r2, [r1, #2]
   10ff6:	1a9b      	subs	r3, r3, r2
   10ff8:	b2db      	uxtb	r3, r3
   10ffa:	2b01      	cmp	r3, #1
   10ffc:	d1eb      	bne.n	10fd6 <ticker_worker+0x2e>
		ticker->ack--;
   10ffe:	3a01      	subs	r2, #1
   11000:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   11002:	f8d1 a00c 	ldr.w	sl, [r1, #12]
   11006:	f1ba 0f00 	cmp.w	sl, #0
   1100a:	d0e4      	beq.n	10fd6 <ticker_worker+0x2e>
			ticks_at_expire = (instance->ticks_current +
   1100c:	6978      	ldr	r0, [r7, #20]
   1100e:	4430      	add	r0, r6
					   ticker->ticks_to_expire_minus) &
   11010:	8a8b      	ldrh	r3, [r1, #20]
					   ticks_expired -
   11012:	1ac0      	subs	r0, r0, r3
			ticker->timeout_func(ticks_at_expire,
   11014:	690b      	ldr	r3, [r1, #16]
   11016:	8b4a      	ldrh	r2, [r1, #26]
   11018:	6a09      	ldr	r1, [r1, #32]
   1101a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1101e:	47d0      	blx	sl
   11020:	e7d9      	b.n	10fd6 <ticker_worker+0x2e>
		instance->worker_trigger = 0;
   11022:	2300      	movs	r3, #0
   11024:	7743      	strb	r3, [r0, #29]
		return;
   11026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1102a:	7aba      	ldrb	r2, [r7, #10]
   1102c:	7afb      	ldrb	r3, [r7, #11]
   1102e:	429a      	cmp	r2, r3
   11030:	d00d      	beq.n	1104e <ticker_worker+0xa6>
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   11032:	7afb      	ldrb	r3, [r7, #11]
   11034:	3302      	adds	r3, #2
   11036:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   1103a:	605e      	str	r6, [r3, #4]
	instance->worker_trigger = 0;
   1103c:	2300      	movs	r3, #0
   1103e:	777b      	strb	r3, [r7, #29]
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
   11040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11042:	2201      	movs	r2, #1
   11044:	2102      	movs	r1, #2
   11046:	4610      	mov	r0, r2
   11048:	4798      	blx	r3
   1104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		last = instance->ticks_elapsed_last + 1;
   1104e:	3301      	adds	r3, #1
   11050:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   11052:	2b02      	cmp	r3, #2
   11054:	d001      	beq.n	1105a <ticker_worker+0xb2>
		instance->ticks_elapsed_last = last;
   11056:	72fb      	strb	r3, [r7, #11]
   11058:	e7eb      	b.n	11032 <ticker_worker+0x8a>
			last = 0;
   1105a:	464b      	mov	r3, r9
   1105c:	e7fb      	b.n	11056 <ticker_worker+0xae>

0001105e <ticks_to_expire_prep>:
{
   1105e:	b570      	push	{r4, r5, r6, lr}
   11060:	4606      	mov	r6, r0
   11062:	4608      	mov	r0, r1
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   11064:	68b4      	ldr	r4, [r6, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   11066:	8ab5      	ldrh	r5, [r6, #20]
	if (((ticks_at_start - ticks_current) & BIT(23)) == 0) {
   11068:	1a51      	subs	r1, r2, r1
   1106a:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
   1106e:	d10c      	bne.n	1108a <ticks_to_expire_prep+0x2c>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   11070:	4601      	mov	r1, r0
   11072:	4610      	mov	r0, r2
   11074:	f7ff ff94 	bl	10fa0 <ticker_ticks_diff_get>
   11078:	4420      	add	r0, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
   1107a:	42a8      	cmp	r0, r5
   1107c:	d812      	bhi.n	110a4 <ticks_to_expire_prep+0x46>
		ticks_to_expire_minus -= ticks_to_expire;
   1107e:	1a28      	subs	r0, r5, r0
   11080:	b285      	uxth	r5, r0
		ticks_to_expire = 0;
   11082:	2000      	movs	r0, #0
	ticker->ticks_to_expire = ticks_to_expire;
   11084:	60b0      	str	r0, [r6, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   11086:	82b5      	strh	r5, [r6, #20]
   11088:	bd70      	pop	{r4, r5, r6, pc}
		delta_current_start = ticker_ticks_diff_get(ticks_current,
   1108a:	4611      	mov	r1, r2
   1108c:	f7ff ff88 	bl	10fa0 <ticker_ticks_diff_get>
		if (ticks_to_expire > delta_current_start) {
   11090:	4284      	cmp	r4, r0
   11092:	d901      	bls.n	11098 <ticks_to_expire_prep+0x3a>
			ticks_to_expire -= delta_current_start;
   11094:	1a20      	subs	r0, r4, r0
   11096:	e7f0      	b.n	1107a <ticks_to_expire_prep+0x1c>
			    (delta_current_start - ticks_to_expire);
   11098:	1b00      	subs	r0, r0, r4
			ticks_to_expire_minus +=
   1109a:	fa15 f080 	uxtah	r0, r5, r0
   1109e:	b285      	uxth	r5, r0
			ticks_to_expire = 0;
   110a0:	2000      	movs	r0, #0
   110a2:	e7ea      	b.n	1107a <ticks_to_expire_prep+0x1c>
		ticks_to_expire -= ticks_to_expire_minus;
   110a4:	1b40      	subs	r0, r0, r5
		ticks_to_expire_minus = 0;
   110a6:	2500      	movs	r5, #0
   110a8:	e7ec      	b.n	11084 <ticks_to_expire_prep+0x26>

000110aa <ticker_job>:
{
   110aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110ae:	b08d      	sub	sp, #52	; 0x34
	if (instance->worker_trigger) {
   110b0:	7f43      	ldrb	r3, [r0, #29]
   110b2:	9301      	str	r3, [sp, #4]
   110b4:	2b00      	cmp	r3, #0
   110b6:	f040 8254 	bne.w	11562 <ticker_job+0x4b8>
	instance->job_guard = 1;
   110ba:	2301      	movs	r3, #1
   110bc:	7703      	strb	r3, [r0, #28]
	ticks_previous = instance->ticks_current;
   110be:	6943      	ldr	r3, [r0, #20]
   110c0:	930b      	str	r3, [sp, #44]	; 0x2c
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   110c2:	7a83      	ldrb	r3, [r0, #10]
   110c4:	7ac2      	ldrb	r2, [r0, #11]
   110c6:	4293      	cmp	r3, r2
   110c8:	d021      	beq.n	1110e <ticker_job+0x64>
		first = instance->ticks_elapsed_first + 1;
   110ca:	3301      	adds	r3, #1
   110cc:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   110ce:	2b02      	cmp	r3, #2
   110d0:	d100      	bne.n	110d4 <ticker_job+0x2a>
			first = 0;
   110d2:	9b01      	ldr	r3, [sp, #4]
		instance->ticks_elapsed_first = first;
   110d4:	7283      	strb	r3, [r0, #10]
		ticks_elapsed =
   110d6:	3302      	adds	r3, #2
   110d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   110dc:	685b      	ldr	r3, [r3, #4]
   110de:	9303      	str	r3, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   110e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   110e2:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= 0x00FFFFFF;
   110e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   110e8:	6143      	str	r3, [r0, #20]
		flag_elapsed = 1;
   110ea:	2301      	movs	r3, #1
   110ec:	9304      	str	r3, [sp, #16]
   110ee:	9000      	str	r0, [sp, #0]
	ticker_id_old_head = instance->ticker_id_head;
   110f0:	7e03      	ldrb	r3, [r0, #24]
   110f2:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->node[0];
   110f4:	6803      	ldr	r3, [r0, #0]
   110f6:	4619      	mov	r1, r3
	users = &instance->user[0];
   110f8:	6843      	ldr	r3, [r0, #4]
   110fa:	9305      	str	r3, [sp, #20]
	count_user = instance->count_user;
   110fc:	7a43      	ldrb	r3, [r0, #9]
	pending = 0;
   110fe:	9a01      	ldr	r2, [sp, #4]
   11100:	920a      	str	r2, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   11102:	f04f 0bff 	mov.w	fp, #255	; 0xff
   11106:	f8cd b01c 	str.w	fp, [sp, #28]
   1110a:	468b      	mov	fp, r1
   1110c:	e0cc      	b.n	112a8 <ticker_job+0x1fe>
		flag_elapsed = 0;
   1110e:	9b01      	ldr	r3, [sp, #4]
   11110:	9304      	str	r3, [sp, #16]
		ticks_elapsed = 0;
   11112:	2300      	movs	r3, #0
   11114:	9303      	str	r3, [sp, #12]
   11116:	e7ea      	b.n	110ee <ticker_job+0x44>
				middle = 0;
   11118:	9b01      	ldr	r3, [sp, #4]
   1111a:	e01d      	b.n	11158 <ticker_job+0xae>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   1111c:	6872      	ldr	r2, [r6, #4]
   1111e:	bb82      	cbnz	r2, 11182 <ticker_job+0xd8>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   11120:	68b2      	ldr	r2, [r6, #8]
   11122:	bb72      	cbnz	r2, 11182 <ticker_job+0xd8>
			     (user_op->params.update.lazy == 0) &&
   11124:	68f2      	ldr	r2, [r6, #12]
   11126:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1112a:	d12a      	bne.n	11182 <ticker_job+0xd8>
				ticker_job_op_cb(user_op,
   1112c:	2101      	movs	r1, #1
   1112e:	4630      	mov	r0, r6
   11130:	f7ff fc82 	bl	10a38 <ticker_job_op_cb>
		while (user->middle != user->last) {
   11134:	f894 a002 	ldrb.w	sl, [r4, #2]
   11138:	78e3      	ldrb	r3, [r4, #3]
   1113a:	459a      	cmp	sl, r3
   1113c:	f000 80b3 	beq.w	112a6 <ticker_job+0x1fc>
			user_op = &user_ops[user->middle];
   11140:	f04f 092c 	mov.w	r9, #44	; 0x2c
   11144:	fb09 f90a 	mul.w	r9, r9, sl
   11148:	eb08 0609 	add.w	r6, r8, r9
			middle = user->middle + 1;
   1114c:	f10a 0301 	add.w	r3, sl, #1
   11150:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
   11152:	7822      	ldrb	r2, [r4, #0]
   11154:	4293      	cmp	r3, r2
   11156:	d0df      	beq.n	11118 <ticker_job+0x6e>
			user->middle = middle;
   11158:	70a3      	strb	r3, [r4, #2]
			ticker = &node[user_op->id];
   1115a:	7873      	ldrb	r3, [r6, #1]
   1115c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   11160:	009f      	lsls	r7, r3, #2
   11162:	eb0b 0507 	add.w	r5, fp, r7
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   11166:	f818 2009 	ldrb.w	r2, [r8, r9]
   1116a:	2a03      	cmp	r2, #3
   1116c:	d9e2      	bls.n	11134 <ticker_job+0x8a>
			state = (ticker->req - ticker->ack) & 0xff;
   1116e:	786b      	ldrb	r3, [r5, #1]
   11170:	78a9      	ldrb	r1, [r5, #2]
   11172:	1a5b      	subs	r3, r3, r1
   11174:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   11176:	2a05      	cmp	r2, #5
   11178:	d8d8      	bhi.n	1112c <ticker_job+0x82>
   1117a:	2b00      	cmp	r3, #0
   1117c:	d0d6      	beq.n	1112c <ticker_job+0x82>
			    (state == 0) ||
   1117e:	2a04      	cmp	r2, #4
   11180:	d0cc      	beq.n	1111c <ticker_job+0x72>
			if (state == 1) {
   11182:	2b01      	cmp	r3, #1
   11184:	f040 8085 	bne.w	11292 <ticker_job+0x1e8>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   11188:	7871      	ldrb	r1, [r6, #1]
   1118a:	9800      	ldr	r0, [sp, #0]
   1118c:	f7ff fbf6 	bl	1097c <ticker_dequeue>
   11190:	60a8      	str	r0, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   11192:	f818 3009 	ldrb.w	r3, [r8, r9]
   11196:	2b04      	cmp	r3, #4
   11198:	d00b      	beq.n	111b2 <ticker_job+0x108>
		ticker->req = ticker->ack;
   1119a:	78ab      	ldrb	r3, [r5, #2]
   1119c:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   1119e:	9b00      	ldr	r3, [sp, #0]
   111a0:	7e5a      	ldrb	r2, [r3, #25]
   111a2:	7873      	ldrb	r3, [r6, #1]
   111a4:	429a      	cmp	r2, r3
   111a6:	d06e      	beq.n	11286 <ticker_job+0x1dc>
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   111a8:	2100      	movs	r1, #0
   111aa:	4630      	mov	r0, r6
   111ac:	f7ff fc44 	bl	10a38 <ticker_job_op_cb>
   111b0:	e7c0      	b.n	11134 <ticker_job+0x8a>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   111b2:	9b00      	ldr	r3, [sp, #0]
   111b4:	695b      	ldr	r3, [r3, #20]
   111b6:	9306      	str	r3, [sp, #24]
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   111b8:	4681      	mov	r9, r0
	ticks_now = cntr_cnt_get();
   111ba:	f7fe f985 	bl	f4c8 <cntr_cnt_get>
   111be:	9008      	str	r0, [sp, #32]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   111c0:	9906      	ldr	r1, [sp, #24]
   111c2:	f7ff feed 	bl	10fa0 <ticker_ticks_diff_get>
   111c6:	9b03      	ldr	r3, [sp, #12]
   111c8:	4418      	add	r0, r3
	if (ticks_to_expire > ticks_elapsed) {
   111ca:	4581      	cmp	r9, r0
   111cc:	d909      	bls.n	111e2 <ticker_job+0x138>
		ticks_to_expire -= ticks_elapsed;
   111ce:	eba9 0900 	sub.w	r9, r9, r0
	if ((ticker->ticks_periodic != 0) &&
   111d2:	686b      	ldr	r3, [r5, #4]
   111d4:	b37b      	cbz	r3, 11236 <ticker_job+0x18c>
	    (user_op->params.update.lazy != 0)) {
   111d6:	89b3      	ldrh	r3, [r6, #12]
	if ((ticker->ticks_periodic != 0) &&
   111d8:	b36b      	cbz	r3, 11236 <ticker_job+0x18c>
		user_op->params.update.lazy--;
   111da:	3b01      	subs	r3, #1
   111dc:	81b3      	strh	r3, [r6, #12]
   111de:	46a2      	mov	sl, r4
   111e0:	e011      	b.n	11206 <ticker_job+0x15c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   111e2:	eba0 0909 	sub.w	r9, r0, r9
   111e6:	8aab      	ldrh	r3, [r5, #20]
   111e8:	fa13 f389 	uxtah	r3, r3, r9
   111ec:	82ab      	strh	r3, [r5, #20]
		ticks_to_expire = 0;
   111ee:	f04f 0900 	mov.w	r9, #0
   111f2:	e7ee      	b.n	111d2 <ticker_job+0x128>
					   ticker_remainder_dec(ticker);
   111f4:	4628      	mov	r0, r5
   111f6:	f7ff fc07 	bl	10a08 <ticker_remainder_dec>
			ticks_to_expire -= ticker->ticks_periodic +
   111fa:	4420      	add	r0, r4
   111fc:	eba9 0900 	sub.w	r9, r9, r0
			ticker->lazy_current--;
   11200:	8b6b      	ldrh	r3, [r5, #26]
   11202:	3b01      	subs	r3, #1
   11204:	836b      	strh	r3, [r5, #26]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11206:	686c      	ldr	r4, [r5, #4]
   11208:	454c      	cmp	r4, r9
   1120a:	d237      	bcs.n	1127c <ticker_job+0x1d2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   1120c:	8b6a      	ldrh	r2, [r5, #26]
   1120e:	89b3      	ldrh	r3, [r6, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11210:	429a      	cmp	r2, r3
   11212:	d8ef      	bhi.n	111f4 <ticker_job+0x14a>
   11214:	4654      	mov	r4, sl
   11216:	e009      	b.n	1122c <ticker_job+0x182>
			ticks_to_expire += ticker->ticks_periodic +
   11218:	f8d5 a004 	ldr.w	sl, [r5, #4]
					   ticker_remainder_inc(ticker);
   1121c:	4628      	mov	r0, r5
   1121e:	f7ff fbdd 	bl	109dc <ticker_remainder_inc>
			ticks_to_expire += ticker->ticks_periodic +
   11222:	4450      	add	r0, sl
   11224:	4481      	add	r9, r0
			ticker->lazy_current++;
   11226:	8b6b      	ldrh	r3, [r5, #26]
   11228:	3301      	adds	r3, #1
   1122a:	836b      	strh	r3, [r5, #26]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1122c:	8b6a      	ldrh	r2, [r5, #26]
   1122e:	89b3      	ldrh	r3, [r6, #12]
   11230:	429a      	cmp	r2, r3
   11232:	d3f1      	bcc.n	11218 <ticker_job+0x16e>
		ticker->lazy_periodic = user_op->params.update.lazy;
   11234:	832b      	strh	r3, [r5, #24]
				  user_op->params.update.ticks_drift_plus;
   11236:	88b3      	ldrh	r3, [r6, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   11238:	444b      	add	r3, r9
   1123a:	60ab      	str	r3, [r5, #8]
				user_op->params.update.ticks_drift_minus;
   1123c:	88f3      	ldrh	r3, [r6, #6]
	ticker->ticks_to_expire_minus +=
   1123e:	8aaa      	ldrh	r2, [r5, #20]
   11240:	4413      	add	r3, r2
   11242:	82ab      	strh	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   11244:	9a08      	ldr	r2, [sp, #32]
   11246:	9906      	ldr	r1, [sp, #24]
   11248:	4628      	mov	r0, r5
   1124a:	f7ff ff08 	bl	1105e <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   1124e:	8933      	ldrh	r3, [r6, #8]
   11250:	8aea      	ldrh	r2, [r5, #22]
   11252:	4413      	add	r3, r2
   11254:	b29b      	uxth	r3, r3
   11256:	82eb      	strh	r3, [r5, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   11258:	8972      	ldrh	r2, [r6, #10]
   1125a:	4293      	cmp	r3, r2
   1125c:	d910      	bls.n	11280 <ticker_job+0x1d6>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   1125e:	1a9b      	subs	r3, r3, r2
   11260:	82eb      	strh	r3, [r5, #22]
	if (user_op->params.update.force != 0) {
   11262:	7bb3      	ldrb	r3, [r6, #14]
   11264:	b103      	cbz	r3, 11268 <ticker_job+0x1be>
		ticker->force = user_op->params.update.force;
   11266:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
   11268:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1126c:	f80b 3007 	strb.w	r3, [fp, r7]
	*insert_head = user_op->id;
   11270:	7873      	ldrb	r3, [r6, #1]
   11272:	9307      	str	r3, [sp, #28]
		ticker->req++;
   11274:	786b      	ldrb	r3, [r5, #1]
   11276:	3301      	adds	r3, #1
   11278:	706b      	strb	r3, [r5, #1]
   1127a:	e795      	b.n	111a8 <ticker_job+0xfe>
   1127c:	4654      	mov	r4, sl
   1127e:	e7d5      	b.n	1122c <ticker_job+0x182>
		ticker->ticks_slot = 0;
   11280:	2300      	movs	r3, #0
   11282:	82eb      	strh	r3, [r5, #22]
   11284:	e7ed      	b.n	11262 <ticker_job+0x1b8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   11286:	23ff      	movs	r3, #255	; 0xff
   11288:	9900      	ldr	r1, [sp, #0]
   1128a:	764b      	strb	r3, [r1, #25]
			instance->ticks_slot_previous = 0;
   1128c:	2300      	movs	r3, #0
   1128e:	834b      	strh	r3, [r1, #26]
   11290:	e78a      	b.n	111a8 <ticker_job+0xfe>
				instance->fp_sched(CALL_ID_JOB, CALL_ID_JOB, 1);
   11292:	9b00      	ldr	r3, [sp, #0]
   11294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11296:	2201      	movs	r2, #1
   11298:	2102      	movs	r1, #2
   1129a:	4608      	mov	r0, r1
   1129c:	4798      	blx	r3
				user->middle = prev;
   1129e:	f884 a002 	strb.w	sl, [r4, #2]
				pending = 1;
   112a2:	2301      	movs	r3, #1
   112a4:	930a      	str	r3, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   112a6:	9b02      	ldr	r3, [sp, #8]
	while (count_user--) {
   112a8:	1e5a      	subs	r2, r3, #1
   112aa:	b2d2      	uxtb	r2, r2
   112ac:	9202      	str	r2, [sp, #8]
   112ae:	b133      	cbz	r3, 112be <ticker_job+0x214>
		user = &users[count_user];
   112b0:	9b05      	ldr	r3, [sp, #20]
   112b2:	9a02      	ldr	r2, [sp, #8]
   112b4:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   112b8:	f8d4 8004 	ldr.w	r8, [r4, #4]
   112bc:	e73a      	b.n	11134 <ticker_job+0x8a>
   112be:	9306      	str	r3, [sp, #24]
   112c0:	f8dd b01c 	ldr.w	fp, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
   112c4:	9b00      	ldr	r3, [sp, #0]
   112c6:	7e1b      	ldrb	r3, [r3, #24]
   112c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   112ca:	429a      	cmp	r2, r3
   112cc:	d00a      	beq.n	112e4 <ticker_job+0x23a>
		flag_compare_update = 1;
   112ce:	2301      	movs	r3, #1
   112d0:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   112d2:	9b04      	ldr	r3, [sp, #16]
   112d4:	b94b      	cbnz	r3, 112ea <ticker_job+0x240>
	node = &instance->node[0];
   112d6:	9a00      	ldr	r2, [sp, #0]
   112d8:	6813      	ldr	r3, [r2, #0]
   112da:	9302      	str	r3, [sp, #8]
	users = &instance->user[0];
   112dc:	6853      	ldr	r3, [r2, #4]
   112de:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
   112e0:	7a53      	ldrb	r3, [r2, #9]
   112e2:	e117      	b.n	11514 <ticker_job+0x46a>
	flag_compare_update = 0;
   112e4:	9b06      	ldr	r3, [sp, #24]
   112e6:	9308      	str	r3, [sp, #32]
   112e8:	e7f3      	b.n	112d2 <ticker_job+0x228>
	node = &instance->node[0];
   112ea:	9e00      	ldr	r6, [sp, #0]
   112ec:	f8d6 9000 	ldr.w	r9, [r6]
	ticks_expired = 0;
   112f0:	f04f 0a00 	mov.w	sl, #0
   112f4:	f8cd b004 	str.w	fp, [sp, #4]
   112f8:	e02f      	b.n	1135a <ticker_job+0x2b0>
   112fa:	f8dd b004 	ldr.w	fp, [sp, #4]
			ticker->ticks_to_expire -= ticks_elapsed;
   112fe:	1a9b      	subs	r3, r3, r2
   11300:	60ab      	str	r3, [r5, #8]
		if (instance->ticker_id_head != ticker_id_old_head) {
   11302:	9b00      	ldr	r3, [sp, #0]
   11304:	7e1b      	ldrb	r3, [r3, #24]
   11306:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11308:	429a      	cmp	r2, r3
   1130a:	d0e4      	beq.n	112d6 <ticker_job+0x22c>
			flag_compare_update = 1;
   1130c:	9b04      	ldr	r3, [sp, #16]
   1130e:	9308      	str	r3, [sp, #32]
   11310:	e7e1      	b.n	112d6 <ticker_job+0x22c>
			instance->ticker_id_slot_previous = TICKER_NULL;
   11312:	23ff      	movs	r3, #255	; 0xff
   11314:	7673      	strb	r3, [r6, #25]
			instance->ticks_slot_previous = 0;
   11316:	2300      	movs	r3, #0
   11318:	8373      	strh	r3, [r6, #26]
   1131a:	e036      	b.n	1138a <ticker_job+0x2e0>
				ticks_to_expire += ticker->ticks_periodic;
   1131c:	686c      	ldr	r4, [r5, #4]
   1131e:	4404      	add	r4, r0
				ticks_to_expire += ticker_remainder_inc(ticker);
   11320:	4628      	mov	r0, r5
   11322:	f7ff fb5b 	bl	109dc <ticker_remainder_inc>
   11326:	4420      	add	r0, r4
			while (count--) {
   11328:	463b      	mov	r3, r7
   1132a:	1e5f      	subs	r7, r3, #1
   1132c:	2b00      	cmp	r3, #0
   1132e:	d1f5      	bne.n	1131c <ticker_job+0x272>
			ticker->ticks_to_expire = ticks_to_expire;
   11330:	60a8      	str	r0, [r5, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   11332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11334:	eb03 020a 	add.w	r2, r3, sl
   11338:	6971      	ldr	r1, [r6, #20]
   1133a:	4628      	mov	r0, r5
   1133c:	f7ff fe8f 	bl	1105e <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   11340:	8b2b      	ldrh	r3, [r5, #24]
   11342:	836b      	strh	r3, [r5, #26]
			ticker->force = 0;
   11344:	2300      	movs	r3, #0
   11346:	70eb      	strb	r3, [r5, #3]
			ticker->next = *insert_head;
   11348:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1134c:	f809 300b 	strb.w	r3, [r9, fp]
			ticker->req++;
   11350:	786b      	ldrb	r3, [r5, #1]
   11352:	3301      	adds	r3, #1
   11354:	706b      	strb	r3, [r5, #1]
			*insert_head = id_expired;
   11356:	f8cd 8004 	str.w	r8, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   1135a:	f896 8018 	ldrb.w	r8, [r6, #24]
   1135e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   11362:	d026      	beq.n	113b2 <ticker_job+0x308>
		ticker = &node[id_expired];
   11364:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
   11368:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   1136c:	eb09 050b 	add.w	r5, r9, fp
		ticks_to_expire = ticker->ticks_to_expire;
   11370:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   11372:	9a03      	ldr	r2, [sp, #12]
   11374:	4293      	cmp	r3, r2
   11376:	d8c0      	bhi.n	112fa <ticker_job+0x250>
		ticks_elapsed -= ticks_to_expire;
   11378:	9a03      	ldr	r2, [sp, #12]
   1137a:	1ad2      	subs	r2, r2, r3
   1137c:	9203      	str	r2, [sp, #12]
		ticks_expired += ticks_to_expire;
   1137e:	449a      	add	sl, r3
		if (instance->ticks_slot_previous > ticks_to_expire) {
   11380:	8b72      	ldrh	r2, [r6, #26]
   11382:	4293      	cmp	r3, r2
   11384:	d2c5      	bcs.n	11312 <ticker_job+0x268>
			instance->ticks_slot_previous -= ticks_to_expire;
   11386:	1ad3      	subs	r3, r2, r3
   11388:	8373      	strh	r3, [r6, #26]
		if (ticker->ticks_slot != 0) {
   1138a:	8aeb      	ldrh	r3, [r5, #22]
   1138c:	b11b      	cbz	r3, 11396 <ticker_job+0x2ec>
			instance->ticker_id_slot_previous = id_expired;
   1138e:	f886 8019 	strb.w	r8, [r6, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
   11392:	8aeb      	ldrh	r3, [r5, #22]
   11394:	8373      	strh	r3, [r6, #26]
		ticker->ticks_to_expire = 0;
   11396:	2300      	movs	r3, #0
   11398:	60ab      	str	r3, [r5, #8]
		instance->ticker_id_head = ticker->next;
   1139a:	f819 300b 	ldrb.w	r3, [r9, fp]
   1139e:	7633      	strb	r3, [r6, #24]
		if (ticker->ticks_periodic != 0) {
   113a0:	686b      	ldr	r3, [r5, #4]
   113a2:	b11b      	cbz	r3, 113ac <ticker_job+0x302>
			count = 1 + ticker->lazy_periodic;
   113a4:	8b2b      	ldrh	r3, [r5, #24]
   113a6:	3301      	adds	r3, #1
			ticks_to_expire = 0;
   113a8:	2000      	movs	r0, #0
   113aa:	e7be      	b.n	1132a <ticker_job+0x280>
			ticker->req = ticker->ack;
   113ac:	78ab      	ldrb	r3, [r5, #2]
   113ae:	706b      	strb	r3, [r5, #1]
   113b0:	e7d3      	b.n	1135a <ticker_job+0x2b0>
   113b2:	f8dd b004 	ldr.w	fp, [sp, #4]
   113b6:	e7a4      	b.n	11302 <ticker_job+0x258>
				user_op = &user_ops[user_ops_first];
   113b8:	232c      	movs	r3, #44	; 0x2c
   113ba:	9a03      	ldr	r2, [sp, #12]
   113bc:	fb03 f302 	mul.w	r3, r3, r2
   113c0:	9905      	ldr	r1, [sp, #20]
   113c2:	4419      	add	r1, r3
   113c4:	9101      	str	r1, [sp, #4]
				first = user_ops_first + 1;
   113c6:	3201      	adds	r2, #1
   113c8:	b2d2      	uxtb	r2, r2
   113ca:	4611      	mov	r1, r2
   113cc:	9203      	str	r2, [sp, #12]
				if (first == user->count_user_op) {
   113ce:	9a04      	ldr	r2, [sp, #16]
   113d0:	7812      	ldrb	r2, [r2, #0]
   113d2:	4291      	cmp	r1, r2
   113d4:	d013      	beq.n	113fe <ticker_job+0x354>
				id_insert = user_op->id;
   113d6:	9a01      	ldr	r2, [sp, #4]
   113d8:	7857      	ldrb	r7, [r2, #1]
				ticker = &node[id_insert];
   113da:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
   113de:	0094      	lsls	r4, r2, #2
   113e0:	9a02      	ldr	r2, [sp, #8]
   113e2:	4414      	add	r4, r2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   113e4:	9a05      	ldr	r2, [sp, #20]
   113e6:	5cd3      	ldrb	r3, [r2, r3]
   113e8:	2b03      	cmp	r3, #3
   113ea:	d16b      	bne.n	114c4 <ticker_job+0x41a>
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   113ec:	7862      	ldrb	r2, [r4, #1]
   113ee:	78a3      	ldrb	r3, [r4, #2]
   113f0:	429a      	cmp	r2, r3
   113f2:	d007      	beq.n	11404 <ticker_job+0x35a>
					ticker_job_op_cb(user_op,
   113f4:	2101      	movs	r1, #1
   113f6:	9801      	ldr	r0, [sp, #4]
   113f8:	f7ff fb1e 	bl	10a38 <ticker_job_op_cb>
   113fc:	e062      	b.n	114c4 <ticker_job+0x41a>
					first = 0;
   113fe:	9a06      	ldr	r2, [sp, #24]
   11400:	9203      	str	r2, [sp, #12]
   11402:	e7e8      	b.n	113d6 <ticker_job+0x32c>
				ticker_job_op_start(ticker, user_op,
   11404:	9b00      	ldr	r3, [sp, #0]
   11406:	6959      	ldr	r1, [r3, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   11408:	9801      	ldr	r0, [sp, #4]
   1140a:	68c3      	ldr	r3, [r0, #12]
   1140c:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1140e:	6903      	ldr	r3, [r0, #16]
   11410:	61e3      	str	r3, [r4, #28]
	ticker->lazy_periodic = start->lazy;
   11412:	8a83      	ldrh	r3, [r0, #20]
   11414:	8323      	strh	r3, [r4, #24]
	ticker->ticks_slot = start->ticks_slot;
   11416:	8ac3      	ldrh	r3, [r0, #22]
   11418:	82e3      	strh	r3, [r4, #22]
	ticker->timeout_func = start->fp_timeout_func;
   1141a:	6983      	ldr	r3, [r0, #24]
   1141c:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   1141e:	69c3      	ldr	r3, [r0, #28]
   11420:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   11422:	6883      	ldr	r3, [r0, #8]
   11424:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
   11426:	2500      	movs	r5, #0
   11428:	82a5      	strh	r5, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1142a:	6842      	ldr	r2, [r0, #4]
   1142c:	4620      	mov	r0, r4
   1142e:	f7ff fe16 	bl	1105e <ticks_to_expire_prep>
	ticker->remainder_current = 0;
   11432:	6225      	str	r5, [r4, #32]
	ticker->lazy_current = 0;
   11434:	8365      	strh	r5, [r4, #26]
	ticker->force = 1;
   11436:	2301      	movs	r3, #1
   11438:	70e3      	strb	r3, [r4, #3]
   1143a:	e054      	b.n	114e6 <ticker_job+0x43c>
		skip = 0;
   1143c:	f04f 0a00 	mov.w	sl, #0
   11440:	e00e      	b.n	11460 <ticker_job+0x3b6>
				skip_collide = 0;
   11442:	2300      	movs	r3, #0
   11444:	e021      	b.n	1148a <ticker_job+0x3e0>
		if (ticker->ticks_periodic != 0) {
   11446:	6865      	ldr	r5, [r4, #4]
   11448:	2d00      	cmp	r5, #0
   1144a:	d05b      	beq.n	11504 <ticker_job+0x45a>
						   ticker_remainder_inc(ticker);
   1144c:	4620      	mov	r0, r4
   1144e:	f7ff fac5 	bl	109dc <ticker_remainder_inc>
			ticker->ticks_to_expire += ticker->ticks_periodic +
   11452:	4428      	add	r0, r5
   11454:	68a5      	ldr	r5, [r4, #8]
   11456:	4405      	add	r5, r0
   11458:	60a5      	str	r5, [r4, #8]
			ticker->lazy_current++;
   1145a:	8b63      	ldrh	r3, [r4, #26]
   1145c:	3301      	adds	r3, #1
   1145e:	8363      	strh	r3, [r4, #26]
	while (id_insert !=
   11460:	4639      	mov	r1, r7
   11462:	9800      	ldr	r0, [sp, #0]
   11464:	f7ff fa2a 	bl	108bc <ticker_enqueue>
   11468:	4605      	mov	r5, r0
   1146a:	4287      	cmp	r7, r0
   1146c:	d021      	beq.n	114b2 <ticker_job+0x408>
		if (id_collide != TICKER_NULL) {
   1146e:	2dff      	cmp	r5, #255	; 0xff
   11470:	d0e9      	beq.n	11446 <ticker_job+0x39c>
			struct ticker_node *ticker_collide = &node[id_collide];
   11472:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   11476:	ea4f 0883 	mov.w	r8, r3, lsl #2
   1147a:	eb09 0608 	add.w	r6, r9, r8
			if (ticker_collide->lazy_current >
   1147e:	8b73      	ldrh	r3, [r6, #26]
			    ticker_collide->lazy_periodic) {
   11480:	8b32      	ldrh	r2, [r6, #24]
			if (ticker_collide->lazy_current >
   11482:	4293      	cmp	r3, r2
   11484:	d9dd      	bls.n	11442 <ticker_job+0x398>
				skip_collide = ticker_collide->lazy_current -
   11486:	1a9b      	subs	r3, r3, r2
   11488:	b29b      	uxth	r3, r3
			if (ticker_collide->ticks_periodic &&
   1148a:	6872      	ldr	r2, [r6, #4]
   1148c:	2a00      	cmp	r2, #0
   1148e:	d0da      	beq.n	11446 <ticker_job+0x39c>
   11490:	4553      	cmp	r3, sl
   11492:	d8d8      	bhi.n	11446 <ticker_job+0x39c>
			    ticker_collide->force < ticker->force) {
   11494:	78f2      	ldrb	r2, [r6, #3]
   11496:	78e3      	ldrb	r3, [r4, #3]
			    skip_collide <= skip &&
   11498:	429a      	cmp	r2, r3
   1149a:	d2d4      	bcs.n	11446 <ticker_job+0x39c>
					ticker_dequeue(instance, id_collide);
   1149c:	4629      	mov	r1, r5
   1149e:	9800      	ldr	r0, [sp, #0]
   114a0:	f7ff fa6c 	bl	1097c <ticker_dequeue>
				ticker_collide->ticks_to_expire =
   114a4:	60b0      	str	r0, [r6, #8]
				ticker_collide->req = ticker_collide->ack;
   114a6:	78b3      	ldrb	r3, [r6, #2]
   114a8:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
   114aa:	f809 b008 	strb.w	fp, [r9, r8]
				*insert_head = id_collide;
   114ae:	46ab      	mov	fp, r5
   114b0:	e7d6      	b.n	11460 <ticker_job+0x3b6>
	ticker->req = ticker->ack + 1;
   114b2:	78a3      	ldrb	r3, [r4, #2]
   114b4:	3301      	adds	r3, #1
   114b6:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   114b8:	2100      	movs	r1, #0
			if (user_op) {
   114ba:	9b01      	ldr	r3, [sp, #4]
   114bc:	b113      	cbz	r3, 114c4 <ticker_job+0x41a>
				ticker_job_op_cb(user_op, status);
   114be:	4618      	mov	r0, r3
   114c0:	f7ff faba 	bl	10a38 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   114c4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   114c8:	d01e      	beq.n	11508 <ticker_job+0x45e>
			if (insert_head != TICKER_NULL) {
   114ca:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   114ce:	f43f af73 	beq.w	113b8 <ticker_job+0x30e>
				ticker = &node[id_insert];
   114d2:	eb0b 02cb 	add.w	r2, fp, fp, lsl #3
   114d6:	0093      	lsls	r3, r2, #2
   114d8:	9a02      	ldr	r2, [sp, #8]
   114da:	18d4      	adds	r4, r2, r3
				id_insert = insert_head;
   114dc:	465f      	mov	r7, fp
				insert_head = ticker->next;
   114de:	f812 b003 	ldrb.w	fp, [r2, r3]
				user_op = NULL;
   114e2:	2300      	movs	r3, #0
   114e4:	9301      	str	r3, [sp, #4]
	struct ticker_node *node = &instance->node[0];
   114e6:	9b00      	ldr	r3, [sp, #0]
   114e8:	f8d3 9000 	ldr.w	r9, [r3]
	ticker->next = TICKER_NULL;
   114ec:	23ff      	movs	r3, #255	; 0xff
   114ee:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   114f0:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
   114f4:	8b23      	ldrh	r3, [r4, #24]
   114f6:	459a      	cmp	sl, r3
   114f8:	d9a0      	bls.n	1143c <ticker_job+0x392>
		skip = ticker->lazy_current -
   114fa:	ebaa 0a03 	sub.w	sl, sl, r3
   114fe:	fa1f fa8a 	uxth.w	sl, sl
   11502:	e7ad      	b.n	11460 <ticker_job+0x3b6>
			return TICKER_STATUS_FAILURE;
   11504:	2101      	movs	r1, #1
   11506:	e7d8      	b.n	114ba <ticker_job+0x410>
		       (user_ops_first != user->middle)) {
   11508:	9b04      	ldr	r3, [sp, #16]
   1150a:	789b      	ldrb	r3, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   1150c:	9a03      	ldr	r2, [sp, #12]
   1150e:	429a      	cmp	r2, r3
   11510:	d1db      	bne.n	114ca <ticker_job+0x420>
	while (count_user--) {
   11512:	9b07      	ldr	r3, [sp, #28]
   11514:	1e5a      	subs	r2, r3, #1
   11516:	b2d2      	uxtb	r2, r2
   11518:	9207      	str	r2, [sp, #28]
   1151a:	b153      	cbz	r3, 11532 <ticker_job+0x488>
		user = &users[count_user];
   1151c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1151e:	9a07      	ldr	r2, [sp, #28]
   11520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11524:	461a      	mov	r2, r3
   11526:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
   11528:	685b      	ldr	r3, [r3, #4]
   1152a:	9305      	str	r3, [sp, #20]
		user_ops_first = user->first;
   1152c:	7853      	ldrb	r3, [r2, #1]
   1152e:	9303      	str	r3, [sp, #12]
   11530:	e7c8      	b.n	114c4 <ticker_job+0x41a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11532:	9b00      	ldr	r3, [sp, #0]
   11534:	7e1b      	ldrb	r3, [r3, #24]
   11536:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11538:	429a      	cmp	r2, r3
   1153a:	d001      	beq.n	11540 <ticker_job+0x496>
		flag_compare_update = 1;
   1153c:	2301      	movs	r3, #1
   1153e:	9308      	str	r3, [sp, #32]
	if (!pending) {
   11540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11542:	b18b      	cbz	r3, 11568 <ticker_job+0x4be>
	instance->job_guard = 0;
   11544:	2300      	movs	r3, #0
   11546:	9a00      	ldr	r2, [sp, #0]
   11548:	7713      	strb	r3, [r2, #28]
	if (flag_compare_update) {
   1154a:	9b08      	ldr	r3, [sp, #32]
   1154c:	2b00      	cmp	r3, #0
   1154e:	d13f      	bne.n	115d0 <ticker_job+0x526>
	if (instance->worker_trigger) {
   11550:	9b00      	ldr	r3, [sp, #0]
   11552:	7f5b      	ldrb	r3, [r3, #29]
   11554:	b12b      	cbz	r3, 11562 <ticker_job+0x4b8>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
   11556:	9b00      	ldr	r3, [sp, #0]
   11558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1155a:	2201      	movs	r2, #1
   1155c:	4611      	mov	r1, r2
   1155e:	2002      	movs	r0, #2
   11560:	4798      	blx	r3
}
   11562:	b00d      	add	sp, #52	; 0x34
   11564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	users = &instance->user[0];
   11568:	9a00      	ldr	r2, [sp, #0]
   1156a:	f8d2 8004 	ldr.w	r8, [r2, #4]
	count_user = instance->count_user;
   1156e:	7a53      	ldrb	r3, [r2, #9]
   11570:	e026      	b.n	115c0 <ticker_job+0x516>
		uop->status = TICKER_STATUS_SUCCESS;
   11572:	2300      	movs	r3, #0
   11574:	623b      	str	r3, [r7, #32]
		fp_op_func = uop->fp_op_func;
   11576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (fp_op_func) {
   11578:	b113      	cbz	r3, 11580 <ticker_job+0x4d6>
		fp_op_func(uop->status, uop->op_context);
   1157a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1157c:	6a38      	ldr	r0, [r7, #32]
   1157e:	4798      	blx	r3
			first = user->first + 1;
   11580:	7863      	ldrb	r3, [r4, #1]
   11582:	3301      	adds	r3, #1
   11584:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
   11586:	7822      	ldrb	r2, [r4, #0]
   11588:	4293      	cmp	r3, r2
   1158a:	d016      	beq.n	115ba <ticker_job+0x510>
			user->first = first;
   1158c:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   1158e:	7862      	ldrb	r2, [r4, #1]
   11590:	78e3      	ldrb	r3, [r4, #3]
   11592:	429a      	cmp	r2, r3
   11594:	d013      	beq.n	115be <ticker_job+0x514>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   11596:	232c      	movs	r3, #44	; 0x2c
   11598:	fb03 f302 	mul.w	r3, r3, r2
   1159c:	18ef      	adds	r7, r5, r3
	switch (uop->op) {
   1159e:	5ceb      	ldrb	r3, [r5, r3]
   115a0:	2b01      	cmp	r3, #1
   115a2:	d0e6      	beq.n	11572 <ticker_job+0x4c8>
   115a4:	2b02      	cmp	r3, #2
   115a6:	d106      	bne.n	115b6 <ticker_job+0x50c>
		ticker_by_next_slot_get(instance,
   115a8:	68fb      	ldr	r3, [r7, #12]
   115aa:	68ba      	ldr	r2, [r7, #8]
   115ac:	6879      	ldr	r1, [r7, #4]
   115ae:	9800      	ldr	r0, [sp, #0]
   115b0:	f7ff f955 	bl	1085e <ticker_by_next_slot_get>
   115b4:	e7dd      	b.n	11572 <ticker_job+0x4c8>
	fp_op_func = NULL;
   115b6:	2300      	movs	r3, #0
   115b8:	e7de      	b.n	11578 <ticker_job+0x4ce>
				first = 0;
   115ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   115bc:	e7e6      	b.n	1158c <ticker_job+0x4e2>
	while (count_user--) {
   115be:	4633      	mov	r3, r6
   115c0:	1e5e      	subs	r6, r3, #1
   115c2:	b2f6      	uxtb	r6, r6
   115c4:	2b00      	cmp	r3, #0
   115c6:	d0bd      	beq.n	11544 <ticker_job+0x49a>
		user = &users[count_user];
   115c8:	eb08 04c6 	add.w	r4, r8, r6, lsl #3
		user_op = &user->user_op[0];
   115cc:	6865      	ldr	r5, [r4, #4]
   115ce:	e7de      	b.n	1158e <ticker_job+0x4e4>
	if (instance->ticker_id_head == TICKER_NULL) {
   115d0:	7e13      	ldrb	r3, [r2, #24]
   115d2:	2bff      	cmp	r3, #255	; 0xff
   115d4:	d02f      	beq.n	11636 <ticker_job+0x58c>
	if (ticker_id_old_head == TICKER_NULL) {
   115d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   115d8:	2bff      	cmp	r3, #255	; 0xff
   115da:	d034      	beq.n	11646 <ticker_job+0x59c>
	ticker = &instance->node[instance->ticker_id_head];
   115dc:	9800      	ldr	r0, [sp, #0]
   115de:	6802      	ldr	r2, [r0, #0]
   115e0:	7e03      	ldrb	r3, [r0, #24]
   115e2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   115e6:	0099      	lsls	r1, r3, #2
   115e8:	440a      	add	r2, r1
	ticks_to_expire = ticker->ticks_to_expire;
   115ea:	6897      	ldr	r7, [r2, #8]
	i = 10;
   115ec:	250a      	movs	r5, #10
   115ee:	4680      	mov	r8, r0
		LL_ASSERT(i);
   115f0:	b39d      	cbz	r5, 1165a <ticker_job+0x5b0>
		i--;
   115f2:	3d01      	subs	r5, #1
		ctr = cntr_cnt_get();
   115f4:	f7fd ff68 	bl	f4c8 <cntr_cnt_get>
   115f8:	4606      	mov	r6, r0
		cc = instance->ticks_current;
   115fa:	f8d8 4014 	ldr.w	r4, [r8, #20]
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   115fe:	4621      	mov	r1, r4
   11600:	f7ff fcce 	bl	10fa0 <ticker_ticks_diff_get>
   11604:	3003      	adds	r0, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
   11606:	4287      	cmp	r7, r0
   11608:	bf2c      	ite	cs
   1160a:	19e4      	addcs	r4, r4, r7
   1160c:	1824      	addcc	r4, r4, r0
		cc &= 0x00FFFFFF;
   1160e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->fp_cmp_set(cc);
   11612:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   11616:	4620      	mov	r0, r4
   11618:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   1161a:	f7fd ff55 	bl	f4c8 <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   1161e:	4631      	mov	r1, r6
   11620:	f7ff fcbe 	bl	10fa0 <ticker_ticks_diff_get>
   11624:	f100 0903 	add.w	r9, r0, #3
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
   11628:	4631      	mov	r1, r6
   1162a:	4620      	mov	r0, r4
   1162c:	f7ff fcb8 	bl	10fa0 <ticker_ticks_diff_get>
   11630:	4581      	cmp	r9, r0
   11632:	d8dd      	bhi.n	115f0 <ticker_job+0x546>
   11634:	e78c      	b.n	11550 <ticker_job+0x4a6>
		if (cntr_stop() == 0) {
   11636:	f7fd ff2d 	bl	f494 <cntr_stop>
   1163a:	2800      	cmp	r0, #0
   1163c:	d188      	bne.n	11550 <ticker_job+0x4a6>
			instance->ticks_slot_previous = 0;
   1163e:	2300      	movs	r3, #0
   11640:	9a00      	ldr	r2, [sp, #0]
   11642:	8353      	strh	r3, [r2, #26]
   11644:	e784      	b.n	11550 <ticker_job+0x4a6>
		ticks_current = cntr_cnt_get();
   11646:	f7fd ff3f 	bl	f4c8 <cntr_cnt_get>
   1164a:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   1164c:	f7fd ff12 	bl	f474 <cntr_start>
   11650:	2800      	cmp	r0, #0
   11652:	d1c3      	bne.n	115dc <ticker_job+0x532>
			instance->ticks_current = ticks_current;
   11654:	9b00      	ldr	r3, [sp, #0]
   11656:	615c      	str	r4, [r3, #20]
   11658:	e7c0      	b.n	115dc <ticker_job+0x532>
		LL_ASSERT(i);
   1165a:	4040      	eors	r0, r0
   1165c:	f380 8811 	msr	BASEPRI, r0
   11660:	f04f 0004 	mov.w	r0, #4
   11664:	df02      	svc	2
	...

00011668 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
   11668:	b570      	push	{r4, r5, r6, lr}
   1166a:	4606      	mov	r6, r0
   1166c:	460c      	mov	r4, r1
	while (len) {
   1166e:	b19c      	cbz	r4, 11698 <bt_rand+0x30>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
   11670:	4d0a      	ldr	r5, [pc, #40]	; (1169c <bt_rand+0x34>)
   11672:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11676:	4628      	mov	r0, r5
   11678:	f016 fe48 	bl	2830c <_impl_k_mutex_lock>
		k_mutex_lock(&mutex_rand, K_FOREVER);
		len = rand_get(len, buf);
   1167c:	4631      	mov	r1, r6
   1167e:	4620      	mov	r0, r4
   11680:	f7ff f89a 	bl	107b8 <rand_get>
   11684:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
   11686:	4628      	mov	r0, r5
   11688:	f016 feaa 	bl	283e0 <_impl_k_mutex_unlock>
		k_mutex_unlock(&mutex_rand);
		if (len) {
   1168c:	2c00      	cmp	r4, #0
   1168e:	d0ee      	beq.n	1166e <bt_rand+0x6>
   11690:	bf20      	wfe
  __ASM volatile ("sev");
   11692:	bf40      	sev
  __ASM volatile ("wfe");
   11694:	bf20      	wfe
   11696:	e7ea      	b.n	1166e <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
   11698:	2000      	movs	r0, #0
   1169a:	bd70      	pop	{r4, r5, r6, pc}
   1169c:	2000d6b0 	.word	0x2000d6b0

000116a0 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   116a0:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   116a2:	2300      	movs	r3, #0
   116a4:	f7fd ff4c 	bl	f540 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   116a8:	2000      	movs	r0, #0
   116aa:	bd08      	pop	{r3, pc}

000116ac <ticker_if_done>:
	*((u32_t volatile *)ops_context) = status;
   116ac:	6008      	str	r0, [r1, #0]
   116ae:	4770      	bx	lr

000116b0 <mayfly_xtal_start>:
{
   116b0:	b508      	push	{r3, lr}
	clock_control_on(_radio.hf_clock, NULL);
   116b2:	4b03      	ldr	r3, [pc, #12]	; (116c0 <mayfly_xtal_start+0x10>)
   116b4:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   116b6:	6843      	ldr	r3, [r0, #4]
	return api->on(dev, sys);
   116b8:	681b      	ldr	r3, [r3, #0]
   116ba:	2100      	movs	r1, #0
   116bc:	4798      	blx	r3
   116be:	bd08      	pop	{r3, pc}
   116c0:	200014d4 	.word	0x200014d4

000116c4 <mayfly_xtal_stop>:
{
   116c4:	b508      	push	{r3, lr}
	clock_control_off(_radio.hf_clock, NULL);
   116c6:	4b03      	ldr	r3, [pc, #12]	; (116d4 <mayfly_xtal_stop+0x10>)
   116c8:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   116ca:	6843      	ldr	r3, [r0, #4]
	return api->off(dev, sys);
   116cc:	685b      	ldr	r3, [r3, #4]
   116ce:	2100      	movs	r1, #0
   116d0:	4798      	blx	r3
   116d2:	bd08      	pop	{r3, pc}
   116d4:	200014d4 	.word	0x200014d4

000116d8 <prepare_reduced>:
	if (status == 0) {
   116d8:	b918      	cbnz	r0, 116e2 <prepare_reduced+0xa>
		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
   116da:	680b      	ldr	r3, [r1, #0]
   116dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   116e0:	600b      	str	r3, [r1, #0]
   116e2:	4770      	bx	lr

000116e4 <prepare_normal>:
	if (status == 0) {
   116e4:	b918      	cbnz	r0, 116ee <prepare_normal+0xa>
		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
   116e6:	680b      	ldr	r3, [r1, #0]
   116e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   116ec:	600b      	str	r3, [r1, #0]
   116ee:	4770      	bx	lr

000116f0 <chan_sel_remap>:
{
   116f0:	b470      	push	{r4, r5, r6}
	byte_count = 5;
   116f2:	2405      	movs	r4, #5
	chan_next = 0;
   116f4:	2200      	movs	r2, #0
	while (byte_count--) {
   116f6:	e011      	b.n	1171c <chan_sel_remap+0x2c>
			chan_next++;
   116f8:	3201      	adds	r2, #1
   116fa:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   116fc:	086d      	lsrs	r5, r5, #1
		while (bit_count--) {
   116fe:	461c      	mov	r4, r3
   11700:	1e63      	subs	r3, r4, #1
   11702:	b2db      	uxtb	r3, r3
   11704:	b134      	cbz	r4, 11714 <chan_sel_remap+0x24>
			if (bite & 0x01) {
   11706:	f015 0f01 	tst.w	r5, #1
   1170a:	d0f5      	beq.n	116f8 <chan_sel_remap+0x8>
				if (chan_index == 0) {
   1170c:	b111      	cbz	r1, 11714 <chan_sel_remap+0x24>
				chan_index--;
   1170e:	3901      	subs	r1, #1
   11710:	b2c9      	uxtb	r1, r1
   11712:	e7f1      	b.n	116f8 <chan_sel_remap+0x8>
		if (bit_count < 8) {
   11714:	2b07      	cmp	r3, #7
   11716:	d907      	bls.n	11728 <chan_sel_remap+0x38>
		chan_map++;
   11718:	3001      	adds	r0, #1
	while (byte_count--) {
   1171a:	4634      	mov	r4, r6
   1171c:	1e63      	subs	r3, r4, #1
   1171e:	b2de      	uxtb	r6, r3
   11720:	b114      	cbz	r4, 11728 <chan_sel_remap+0x38>
		bite = *chan_map;
   11722:	7805      	ldrb	r5, [r0, #0]
		bit_count = 8;
   11724:	2408      	movs	r4, #8
		while (bit_count--) {
   11726:	e7eb      	b.n	11700 <chan_sel_remap+0x10>
}
   11728:	4610      	mov	r0, r2
   1172a:	bc70      	pop	{r4, r5, r6}
   1172c:	4770      	bx	lr
	...

00011730 <chan_sel_1>:
{
   11730:	b570      	push	{r4, r5, r6, lr}
   11732:	4605      	mov	r5, r0
   11734:	f89d 6010 	ldrb.w	r6, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   11738:	7804      	ldrb	r4, [r0, #0]
   1173a:	fb02 1101 	mla	r1, r2, r1, r1
   1173e:	4421      	add	r1, r4
   11740:	4c0f      	ldr	r4, [pc, #60]	; (11780 <chan_sel_1+0x50>)
   11742:	fb84 2401 	smull	r2, r4, r4, r1
   11746:	1862      	adds	r2, r4, r1
   11748:	17cc      	asrs	r4, r1, #31
   1174a:	ebc4 1462 	rsb	r4, r4, r2, asr #5
   1174e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   11752:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   11756:	1b0c      	subs	r4, r1, r4
   11758:	b2e0      	uxtb	r0, r4
	*chan_use = chan_next;
   1175a:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   1175c:	08c2      	lsrs	r2, r0, #3
   1175e:	5c9a      	ldrb	r2, [r3, r2]
   11760:	f004 0407 	and.w	r4, r4, #7
   11764:	fa42 f404 	asr.w	r4, r2, r4
   11768:	f014 0f01 	tst.w	r4, #1
   1176c:	d107      	bne.n	1177e <chan_sel_1+0x4e>
		chan_index = chan_next % chan_count;
   1176e:	fbb0 f1f6 	udiv	r1, r0, r6
   11772:	fb06 0111 	mls	r1, r6, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   11776:	b2c9      	uxtb	r1, r1
   11778:	4618      	mov	r0, r3
   1177a:	f7ff ffb9 	bl	116f0 <chan_sel_remap>
}
   1177e:	bd70      	pop	{r4, r5, r6, pc}
   11780:	dd67c8a7 	.word	0xdd67c8a7

00011784 <chan_rev_8>:
	o = 0;
   11784:	2300      	movs	r3, #0
	for (iterate = 0; iterate < 8; iterate++) {
   11786:	461a      	mov	r2, r3
   11788:	e007      	b.n	1179a <chan_rev_8+0x16>
		o <<= 1;
   1178a:	005b      	lsls	r3, r3, #1
   1178c:	b2db      	uxtb	r3, r3
		o |= (i & 1);
   1178e:	f000 0101 	and.w	r1, r0, #1
   11792:	430b      	orrs	r3, r1
		i >>= 1;
   11794:	0840      	lsrs	r0, r0, #1
	for (iterate = 0; iterate < 8; iterate++) {
   11796:	3201      	adds	r2, #1
   11798:	b2d2      	uxtb	r2, r2
   1179a:	2a07      	cmp	r2, #7
   1179c:	d9f5      	bls.n	1178a <chan_rev_8+0x6>
}
   1179e:	4618      	mov	r0, r3
   117a0:	4770      	bx	lr

000117a2 <chan_perm>:
{
   117a2:	b538      	push	{r3, r4, r5, lr}
   117a4:	4604      	mov	r4, r0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   117a6:	0a00      	lsrs	r0, r0, #8
   117a8:	f7ff ffec 	bl	11784 <chan_rev_8>
   117ac:	0205      	lsls	r5, r0, #8
   117ae:	b2e0      	uxtb	r0, r4
   117b0:	f7ff ffe8 	bl	11784 <chan_rev_8>
   117b4:	b200      	sxth	r0, r0
   117b6:	4328      	orrs	r0, r5
}
   117b8:	b280      	uxth	r0, r0
   117ba:	bd38      	pop	{r3, r4, r5, pc}

000117bc <chan_mam>:
	return ((u32_t)a * 17 + b) & 0xFFFF;
   117bc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   117c0:	fa11 f080 	uxtah	r0, r1, r0
}
   117c4:	b280      	uxth	r0, r0
   117c6:	4770      	bx	lr

000117c8 <chan_prn>:
{
   117c8:	b538      	push	{r3, r4, r5, lr}
   117ca:	460d      	mov	r5, r1
	prn_e = counter ^ chan_id;
   117cc:	4048      	eors	r0, r1
	for (iterate = 0; iterate < 3; iterate++) {
   117ce:	2400      	movs	r4, #0
   117d0:	e006      	b.n	117e0 <chan_prn+0x18>
		prn_e = chan_perm(prn_e);
   117d2:	f7ff ffe6 	bl	117a2 <chan_perm>
		prn_e = chan_mam(prn_e, chan_id);
   117d6:	4629      	mov	r1, r5
   117d8:	f7ff fff0 	bl	117bc <chan_mam>
	for (iterate = 0; iterate < 3; iterate++) {
   117dc:	3401      	adds	r4, #1
   117de:	b2e4      	uxtb	r4, r4
   117e0:	2c02      	cmp	r4, #2
   117e2:	d9f6      	bls.n	117d2 <chan_prn+0xa>
	prn_e ^= chan_id;
   117e4:	4068      	eors	r0, r5
}
   117e6:	b280      	uxth	r0, r0
   117e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000117ec <chan_sel_2>:
{
   117ec:	b538      	push	{r3, r4, r5, lr}
   117ee:	4615      	mov	r5, r2
   117f0:	461c      	mov	r4, r3
	prn_e = chan_prn(counter, chan_id);
   117f2:	f7ff ffe9 	bl	117c8 <chan_prn>
   117f6:	4601      	mov	r1, r0
	chan_next = prn_e % 37;
   117f8:	4a0e      	ldr	r2, [pc, #56]	; (11834 <chan_sel_2+0x48>)
   117fa:	fba2 3200 	umull	r3, r2, r2, r0
   117fe:	1a80      	subs	r0, r0, r2
   11800:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   11804:	0952      	lsrs	r2, r2, #5
   11806:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   1180a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   1180e:	1a8a      	subs	r2, r1, r2
   11810:	b2d0      	uxtb	r0, r2
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   11812:	08c3      	lsrs	r3, r0, #3
   11814:	5ceb      	ldrb	r3, [r5, r3]
   11816:	f000 0207 	and.w	r2, r0, #7
   1181a:	4113      	asrs	r3, r2
   1181c:	f013 0f01 	tst.w	r3, #1
   11820:	d106      	bne.n	11830 <chan_sel_2+0x44>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   11822:	fb04 f101 	mul.w	r1, r4, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
   11826:	f3c1 4107 	ubfx	r1, r1, #16, #8
   1182a:	4628      	mov	r0, r5
   1182c:	f7ff ff60 	bl	116f0 <chan_sel_remap>
}
   11830:	bd38      	pop	{r3, r4, r5, pc}
   11832:	bf00      	nop
   11834:	bacf914d 	.word	0xbacf914d

00011838 <ctrl_tx_last_enqueue>:
}

static void ctrl_tx_last_enqueue(struct connection *conn,
				 struct radio_pdu_node_tx *node_tx)
{
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   11838:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   1183c:	681b      	ldr	r3, [r3, #0]
   1183e:	600b      	str	r3, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   11840:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   11844:	6019      	str	r1, [r3, #0]
	conn->pkt_tx_ctrl_last = node_tx;
   11846:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   1184a:	4770      	bx	lr

0001184c <ctrl_tx_enqueue>:
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
   1184c:	b538      	push	{r3, r4, r5, lr}
   1184e:	4604      	mov	r4, r0
   11850:	460d      	mov	r5, r1
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    !conn->empty &&
   11852:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
	if (
   11856:	f013 0f80 	tst.w	r3, #128	; 0x80
   1185a:	d11f      	bne.n	1189c <ctrl_tx_enqueue+0x50>
	    /* and data/ctrl packet is in the head */
	    conn->pkt_tx_head &&
   1185c:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
	    !conn->empty &&
   11860:	b1e2      	cbz	r2, 1189c <ctrl_tx_enqueue+0x50>
	    conn->pkt_tx_head &&
   11862:	f013 0f08 	tst.w	r3, #8
   11866:	d119      	bne.n	1189c <ctrl_tx_enqueue+0x50>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   11868:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   1186c:	429a      	cmp	r2, r3
   1186e:	d007      	beq.n	11880 <ctrl_tx_enqueue+0x34>
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
   11870:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   11874:	b143      	cbz	r3, 11888 <ctrl_tx_enqueue+0x3c>
			node_tx->next = conn->pkt_tx_head->next;
			conn->pkt_tx_head->next = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   11876:	4629      	mov	r1, r5
   11878:	4620      	mov	r0, r4
   1187a:	f7ff ffdd 	bl	11838 <ctrl_tx_last_enqueue>
   1187e:	e014      	b.n	118aa <ctrl_tx_enqueue+0x5e>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   11880:	681b      	ldr	r3, [r3, #0]
   11882:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
   11886:	e7f3      	b.n	11870 <ctrl_tx_enqueue+0x24>
			node_tx->next = conn->pkt_tx_head->next;
   11888:	6813      	ldr	r3, [r2, #0]
   1188a:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head->next = node_tx;
   1188c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11890:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   11892:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   11896:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   1189a:	e006      	b.n	118aa <ctrl_tx_enqueue+0x5e>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
   1189c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   118a0:	b133      	cbz	r3, 118b0 <ctrl_tx_enqueue+0x64>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   118a2:	4629      	mov	r1, r5
   118a4:	4620      	mov	r0, r4
   118a6:	f7ff ffc7 	bl	11838 <ctrl_tx_last_enqueue>
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
   118aa:	682b      	ldr	r3, [r5, #0]
   118ac:	b153      	cbz	r3, 118c4 <ctrl_tx_enqueue+0x78>
   118ae:	bd38      	pop	{r3, r4, r5, pc}
			node_tx->next = conn->pkt_tx_head;
   118b0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   118b4:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head = node_tx;
   118b6:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
			conn->pkt_tx_ctrl = node_tx;
   118ba:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   118be:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   118c2:	e7f2      	b.n	118aa <ctrl_tx_enqueue+0x5e>
		conn->pkt_tx_last = node_tx;
   118c4:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
	}
}
   118c8:	e7f1      	b.n	118ae <ctrl_tx_enqueue+0x62>

000118ca <ctrl_tx_sec_enqueue>:

static void ctrl_tx_sec_enqueue(struct connection *conn,
				  struct radio_pdu_node_tx *node_tx)
{
   118ca:	b508      	push	{r3, lr}
	if (conn->pause_tx) {
   118cc:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   118d0:	f013 0f08 	tst.w	r3, #8
   118d4:	d010      	beq.n	118f8 <ctrl_tx_sec_enqueue+0x2e>
		if (!conn->pkt_tx_ctrl) {
   118d6:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   118da:	b13b      	cbz	r3, 118ec <ctrl_tx_sec_enqueue+0x22>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
		} else {
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   118dc:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   118e0:	681b      	ldr	r3, [r3, #0]
   118e2:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   118e4:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   118e8:	6019      	str	r1, [r3, #0]
   118ea:	bd08      	pop	{r3, pc}
			node_tx->next = conn->pkt_tx_head;
   118ec:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   118f0:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   118f2:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
   118f6:	bd08      	pop	{r3, pc}
		}
	} else {
		ctrl_tx_enqueue(conn, node_tx);
   118f8:	f7ff ffa8 	bl	1184c <ctrl_tx_enqueue>
   118fc:	bd08      	pop	{r3, pc}
	...

00011900 <conn_update_req>:
}

#if defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
   11900:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   11904:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   11908:	428b      	cmp	r3, r1
   1190a:	d001      	beq.n	11910 <conn_update_req+0x10>
		return 1;
   1190c:	2001      	movs	r0, #1
   1190e:	4770      	bx	lr
{
   11910:	b530      	push	{r4, r5, lr}
	}

	if (!conn->role) {
   11912:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11916:	2b00      	cmp	r3, #0
   11918:	db2a      	blt.n	11970 <conn_update_req+0x70>
		conn->llcp.conn_upd.win_size = 1;
   1191a:	2401      	movs	r4, #1
   1191c:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   11920:	2200      	movs	r2, #0
   11922:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->conn_interval;
   11926:	8c85      	ldrh	r5, [r0, #36]	; 0x24
   11928:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->latency;
   1192c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   1192e:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
   11932:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   11934:	fb03 f305 	mul.w	r3, r3, r5
					      conn->supervision_reload *
   11938:	ebc3 1543 	rsb	r5, r3, r3, lsl #5
   1193c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
					      125 / 1000;
   11940:	4d26      	ldr	r5, [pc, #152]	; (119dc <conn_update_req+0xdc>)
   11942:	fb85 e503 	smull	lr, r5, r5, r3
   11946:	17db      	asrs	r3, r3, #31
   11948:	ebc3 13a5 	rsb	r3, r3, r5, asr #6
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   1194c:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   11950:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   11954:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
   11958:	b2db      	uxtb	r3, r3
   1195a:	f043 0304 	orr.w	r3, r3, #4
   1195e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78

		conn->llcp_type = LLCP_CONN_UPD;
   11962:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_ack--;
   11966:	3901      	subs	r1, #1
   11968:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75

		return 0;
   1196c:	4610      	mov	r0, r2
   1196e:	bd30      	pop	{r4, r5, pc}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	} else if (conn->common.fex_valid &&
   11970:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   11974:	f013 0f20 	tst.w	r3, #32
   11978:	d101      	bne.n	1197e <conn_update_req+0x7e>
		return 0;
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
   1197a:	2002      	movs	r0, #2
   1197c:	bd30      	pop	{r4, r5, pc}
		   (conn->llcp_features &
   1197e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
	} else if (conn->common.fex_valid &&
   11982:	f013 0f02 	tst.w	r3, #2
   11986:	d101      	bne.n	1198c <conn_update_req+0x8c>
	return 2;
   11988:	2002      	movs	r0, #2
}
   1198a:	bd30      	pop	{r4, r5, pc}
		conn->llcp_conn_param.status = 0;
   1198c:	2300      	movs	r3, #0
   1198e:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.interval = conn->conn_interval;
   11992:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   11994:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
		conn->llcp_conn_param.latency = conn->latency;
   11998:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
   1199a:	f8a0 20c6 	strh.w	r2, [r0, #198]	; 0xc6
						conn->supervision_reload *
   1199e:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
		conn->llcp_conn_param.timeout = conn->conn_interval *
   119a0:	fb02 f201 	mul.w	r2, r2, r1
						conn->supervision_reload *
   119a4:	ebc2 1142 	rsb	r1, r2, r2, lsl #5
   119a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
						125 / 1000;
   119ac:	490b      	ldr	r1, [pc, #44]	; (119dc <conn_update_req+0xdc>)
   119ae:	fb81 4102 	smull	r4, r1, r1, r2
   119b2:	17d2      	asrs	r2, r2, #31
   119b4:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
		conn->llcp_conn_param.timeout = conn->conn_interval *
   119b8:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   119bc:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.cmd = 0;
   119c0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   119c4:	f363 02c3 	bfi	r2, r3, #3, #1
   119c8:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
   119cc:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   119d0:	3a01      	subs	r2, #1
   119d2:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
		return 0;
   119d6:	4618      	mov	r0, r3
   119d8:	bd30      	pop	{r4, r5, pc}
   119da:	bf00      	nop
   119dc:	10624dd3 	.word	0x10624dd3

000119e0 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   119e0:	4a0d      	ldr	r2, [pc, #52]	; (11a18 <rx_fc_lock+0x38>)
   119e2:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   119e6:	b2db      	uxtb	r3, r3
   119e8:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   119ec:	4293      	cmp	r3, r2
   119ee:	d000      	beq.n	119f2 <rx_fc_lock+0x12>
   119f0:	4770      	bx	lr
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   119f2:	4a09      	ldr	r2, [pc, #36]	; (11a18 <rx_fc_lock+0x38>)
   119f4:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   119f8:	33b8      	adds	r3, #184	; 0xb8
   119fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   119fe:	80d8      	strh	r0, [r3, #6]
		req = _radio.fc_req + 1;
   11a00:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   11a04:	3301      	adds	r3, #1
   11a06:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
   11a08:	2b03      	cmp	r3, #3
   11a0a:	d003      	beq.n	11a14 <rx_fc_lock+0x34>
			req = 0;
		}
		_radio.fc_req = req;
   11a0c:	4a02      	ldr	r2, [pc, #8]	; (11a18 <rx_fc_lock+0x38>)
   11a0e:	f882 317c 	strb.w	r3, [r2, #380]	; 0x17c
	}
}
   11a12:	e7ed      	b.n	119f0 <rx_fc_lock+0x10>
			req = 0;
   11a14:	2300      	movs	r3, #0
   11a16:	e7f9      	b.n	11a0c <rx_fc_lock+0x2c>
   11a18:	200014d4 	.word	0x200014d4

00011a1c <ticker_success_assert>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11a1c:	b900      	cbnz	r0, 11a20 <ticker_success_assert+0x4>
   11a1e:	4770      	bx	lr
   11a20:	4040      	eors	r0, r0
   11a22:	f380 8811 	msr	BASEPRI, r0
   11a26:	f04f 0004 	mov.w	r0, #4
   11a2a:	df02      	svc	2

00011a2c <start_enc_rsp_send>:
{
   11a2c:	b510      	push	{r4, lr}
   11a2e:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   11a30:	b171      	cbz	r1, 11a50 <start_enc_rsp_send+0x24>
   11a32:	460b      	mov	r3, r1
	struct radio_pdu_node_tx *node_tx = NULL;
   11a34:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11a36:	781a      	ldrb	r2, [r3, #0]
   11a38:	f042 0203 	orr.w	r2, r2, #3
   11a3c:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11a3e:	2201      	movs	r2, #1
   11a40:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11a42:	2206      	movs	r2, #6
   11a44:	70da      	strb	r2, [r3, #3]
	if (node_tx) {
   11a46:	b111      	cbz	r1, 11a4e <start_enc_rsp_send+0x22>
		ctrl_tx_enqueue(conn, node_tx);
   11a48:	4620      	mov	r0, r4
   11a4a:	f7ff feff 	bl	1184c <ctrl_tx_enqueue>
   11a4e:	bd10      	pop	{r4, pc}
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11a50:	4806      	ldr	r0, [pc, #24]	; (11a6c <start_enc_rsp_send+0x40>)
   11a52:	f7fd fc68 	bl	f326 <mem_acquire>
		LL_ASSERT(node_tx);
   11a56:	4601      	mov	r1, r0
   11a58:	b108      	cbz	r0, 11a5e <start_enc_rsp_send+0x32>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   11a5a:	1d03      	adds	r3, r0, #4
   11a5c:	e7eb      	b.n	11a36 <start_enc_rsp_send+0xa>
		LL_ASSERT(node_tx);
   11a5e:	4040      	eors	r0, r0
   11a60:	f380 8811 	msr	BASEPRI, r0
   11a64:	f04f 0004 	mov.w	r0, #4
   11a68:	df02      	svc	2
   11a6a:	bf00      	nop
   11a6c:	2000162c 	.word	0x2000162c

00011a70 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   11a70:	2801      	cmp	r0, #1
   11a72:	d005      	beq.n	11a80 <ticker_stop_adv_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   11a74:	4b0d      	ldr	r3, [pc, #52]	; (11aac <ticker_stop_adv_assert+0x3c>)
   11a76:	7b1b      	ldrb	r3, [r3, #12]
   11a78:	b2db      	uxtb	r3, r3
   11a7a:	2b05      	cmp	r3, #5
   11a7c:	d00f      	beq.n	11a9e <ticker_stop_adv_assert+0x2e>
   11a7e:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   11a80:	4b0a      	ldr	r3, [pc, #40]	; (11aac <ticker_stop_adv_assert+0x3c>)
   11a82:	7b9b      	ldrb	r3, [r3, #14]
   11a84:	b2db      	uxtb	r3, r3
   11a86:	2b05      	cmp	r3, #5
   11a88:	d103      	bne.n	11a92 <ticker_stop_adv_assert+0x22>
			_radio.ticker_id_stop = 0;
   11a8a:	2200      	movs	r2, #0
   11a8c:	4b07      	ldr	r3, [pc, #28]	; (11aac <ticker_stop_adv_assert+0x3c>)
   11a8e:	739a      	strb	r2, [r3, #14]
   11a90:	4770      	bx	lr
			LL_ASSERT(0);
   11a92:	4040      	eors	r0, r0
   11a94:	f380 8811 	msr	BASEPRI, r0
   11a98:	f04f 0004 	mov.w	r0, #4
   11a9c:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   11a9e:	4040      	eors	r0, r0
   11aa0:	f380 8811 	msr	BASEPRI, r0
   11aa4:	f04f 0004 	mov.w	r0, #4
   11aa8:	df02      	svc	2
   11aaa:	bf00      	nop
   11aac:	200014d4 	.word	0x200014d4

00011ab0 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   11ab0:	2801      	cmp	r0, #1
   11ab2:	d005      	beq.n	11ac0 <ticker_stop_scan_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   11ab4:	4b0d      	ldr	r3, [pc, #52]	; (11aec <ticker_stop_scan_assert+0x3c>)
   11ab6:	7b1b      	ldrb	r3, [r3, #12]
   11ab8:	b2db      	uxtb	r3, r3
   11aba:	2b06      	cmp	r3, #6
   11abc:	d00f      	beq.n	11ade <ticker_stop_scan_assert+0x2e>
   11abe:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
   11ac0:	4b0a      	ldr	r3, [pc, #40]	; (11aec <ticker_stop_scan_assert+0x3c>)
   11ac2:	7b9b      	ldrb	r3, [r3, #14]
   11ac4:	b2db      	uxtb	r3, r3
   11ac6:	2b06      	cmp	r3, #6
   11ac8:	d103      	bne.n	11ad2 <ticker_stop_scan_assert+0x22>
			_radio.ticker_id_stop = 0;
   11aca:	2200      	movs	r2, #0
   11acc:	4b07      	ldr	r3, [pc, #28]	; (11aec <ticker_stop_scan_assert+0x3c>)
   11ace:	739a      	strb	r2, [r3, #14]
   11ad0:	4770      	bx	lr
			LL_ASSERT(0);
   11ad2:	4040      	eors	r0, r0
   11ad4:	f380 8811 	msr	BASEPRI, r0
   11ad8:	f04f 0004 	mov.w	r0, #4
   11adc:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   11ade:	4040      	eors	r0, r0
   11ae0:	f380 8811 	msr	BASEPRI, r0
   11ae4:	f04f 0004 	mov.w	r0, #4
   11ae8:	df02      	svc	2
   11aea:	bf00      	nop
   11aec:	200014d4 	.word	0x200014d4

00011af0 <conn_update>:
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   11af0:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   11af4:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   11af6:	1a9b      	subs	r3, r3, r2
   11af8:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   11afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11afe:	da5b      	bge.n	11bb8 <conn_update+0xc8>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11b00:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11b04:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11b08:	429a      	cmp	r2, r3
   11b0a:	d13d      	bne.n	11b88 <conn_update+0x98>
	if (_radio.conn_upd == 0) {
   11b0c:	4b2c      	ldr	r3, [pc, #176]	; (11bc0 <conn_update+0xd0>)
   11b0e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   11b12:	2b00      	cmp	r3, #0
   11b14:	d03e      	beq.n	11b94 <conn_update+0xa4>
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
   11b16:	790b      	ldrb	r3, [r1, #4]
	conn->llcp.conn_upd.win_size =
   11b18:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
   11b1c:	f8b1 2005 	ldrh.w	r2, [r1, #5]
   11b20:	f240 43e2 	movw	r3, #1250	; 0x4e2
   11b24:	fb03 f302 	mul.w	r3, r3, r2
	conn->llcp.conn_upd.win_offset_us =
   11b28:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
   11b2c:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	conn->llcp.conn_upd.interval =
   11b30:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
   11b34:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	conn->llcp.conn_upd.latency =
   11b38:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
   11b3c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
	conn->llcp.conn_upd.timeout =
   11b40:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
   11b44:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	conn->llcp.conn_upd.instant =
   11b48:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   11b4c:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   11b50:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   11b54:	f36f 0382 	bfc	r3, #2, #1
   11b58:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   11b5c:	2301      	movs	r3, #1
   11b5e:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
	conn->llcp_ack--;
   11b62:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11b66:	3b01      	subs	r3, #1
   11b68:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11b6c:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
   11b70:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   11b74:	429a      	cmp	r2, r3
   11b76:	d021      	beq.n	11bbc <conn_update+0xcc>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   11b78:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   11b7c:	f003 0307 	and.w	r3, r3, #7
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11b80:	2b04      	cmp	r3, #4
   11b82:	d015      	beq.n	11bb0 <conn_update+0xc0>
	return 0;
   11b84:	2000      	movs	r0, #0
}
   11b86:	4770      	bx	lr
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11b88:	4040      	eors	r0, r0
   11b8a:	f380 8811 	msr	BASEPRI, r0
   11b8e:	f04f 0004 	mov.w	r0, #4
   11b92:	df02      	svc	2
		LL_ASSERT(conn->role);
   11b94:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11b98:	2b00      	cmp	r3, #0
   11b9a:	da03      	bge.n	11ba4 <conn_update+0xb4>
		_radio.conn_upd = conn;
   11b9c:	4b08      	ldr	r3, [pc, #32]	; (11bc0 <conn_update+0xd0>)
   11b9e:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
   11ba2:	e7b8      	b.n	11b16 <conn_update+0x26>
		LL_ASSERT(conn->role);
   11ba4:	4040      	eors	r0, r0
   11ba6:	f380 8811 	msr	BASEPRI, r0
   11baa:	f04f 0004 	mov.w	r0, #4
   11bae:	df02      	svc	2
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11bb0:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
	return 0;
   11bb4:	2000      	movs	r0, #0
   11bb6:	4770      	bx	lr
		return 1;
   11bb8:	2001      	movs	r0, #1
   11bba:	4770      	bx	lr
	return 0;
   11bbc:	2000      	movs	r0, #0
   11bbe:	4770      	bx	lr
   11bc0:	200014d4 	.word	0x200014d4

00011bc4 <pause_enc_rsp_send>:
{
   11bc4:	b510      	push	{r4, lr}
   11bc6:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11bc8:	480b      	ldr	r0, [pc, #44]	; (11bf8 <pause_enc_rsp_send+0x34>)
   11bca:	f7fd fbac 	bl	f326 <mem_acquire>
	LL_ASSERT(node_tx);
   11bce:	b160      	cbz	r0, 11bea <pause_enc_rsp_send+0x26>
   11bd0:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11bd2:	7903      	ldrb	r3, [r0, #4]
   11bd4:	f043 0303 	orr.w	r3, r3, #3
   11bd8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11bda:	2301      	movs	r3, #1
   11bdc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11bde:	230b      	movs	r3, #11
   11be0:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11be2:	4620      	mov	r0, r4
   11be4:	f7ff fe32 	bl	1184c <ctrl_tx_enqueue>
   11be8:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11bea:	4040      	eors	r0, r0
   11bec:	f380 8811 	msr	BASEPRI, r0
   11bf0:	f04f 0004 	mov.w	r0, #4
   11bf4:	df02      	svc	2
   11bf6:	bf00      	nop
   11bf8:	2000162c 	.word	0x2000162c

00011bfc <ping_resp_send>:
{
   11bfc:	b510      	push	{r4, lr}
   11bfe:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11c00:	480b      	ldr	r0, [pc, #44]	; (11c30 <ping_resp_send+0x34>)
   11c02:	f7fd fb90 	bl	f326 <mem_acquire>
	LL_ASSERT(node_tx);
   11c06:	b160      	cbz	r0, 11c22 <ping_resp_send+0x26>
   11c08:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11c0a:	7903      	ldrb	r3, [r0, #4]
   11c0c:	f043 0303 	orr.w	r3, r3, #3
   11c10:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11c12:	2301      	movs	r3, #1
   11c14:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   11c16:	2313      	movs	r3, #19
   11c18:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11c1a:	4620      	mov	r0, r4
   11c1c:	f7ff fe16 	bl	1184c <ctrl_tx_enqueue>
   11c20:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11c22:	4040      	eors	r0, r0
   11c24:	f380 8811 	msr	BASEPRI, r0
   11c28:	f04f 0004 	mov.w	r0, #4
   11c2c:	df02      	svc	2
   11c2e:	bf00      	nop
   11c30:	2000162c 	.word	0x2000162c

00011c34 <length_resp_send>:
{
   11c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c36:	4604      	mov	r4, r0
   11c38:	460f      	mov	r7, r1
   11c3a:	4615      	mov	r5, r2
   11c3c:	461e      	mov	r6, r3
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11c3e:	480e      	ldr	r0, [pc, #56]	; (11c78 <length_resp_send+0x44>)
   11c40:	f7fd fb71 	bl	f326 <mem_acquire>
	LL_ASSERT(node_tx);
   11c44:	b190      	cbz	r0, 11c6c <length_resp_send+0x38>
   11c46:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11c48:	7903      	ldrb	r3, [r0, #4]
   11c4a:	f043 0303 	orr.w	r3, r3, #3
   11c4e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11c50:	2309      	movs	r3, #9
   11c52:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11c54:	2315      	movs	r3, #21
   11c56:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
   11c58:	8107      	strh	r7, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
   11c5a:	8186      	strh	r6, [r0, #12]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
   11c5c:	8145      	strh	r5, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
   11c5e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   11c62:	81c3      	strh	r3, [r0, #14]
	ctrl_tx_enqueue(conn, node_tx);
   11c64:	4620      	mov	r0, r4
   11c66:	f7ff fdf1 	bl	1184c <ctrl_tx_enqueue>
   11c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(node_tx);
   11c6c:	4040      	eors	r0, r0
   11c6e:	f380 8811 	msr	BASEPRI, r0
   11c72:	f04f 0004 	mov.w	r0, #4
   11c76:	df02      	svc	2
   11c78:	2000162c 	.word	0x2000162c

00011c7c <reject_ext_ind_send>:
{
   11c7c:	b570      	push	{r4, r5, r6, lr}
   11c7e:	4604      	mov	r4, r0
   11c80:	460e      	mov	r6, r1
   11c82:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11c84:	480c      	ldr	r0, [pc, #48]	; (11cb8 <reject_ext_ind_send+0x3c>)
   11c86:	f7fd fb4e 	bl	f326 <mem_acquire>
	LL_ASSERT(node_tx);
   11c8a:	b170      	cbz	r0, 11caa <reject_ext_ind_send+0x2e>
   11c8c:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11c8e:	7903      	ldrb	r3, [r0, #4]
   11c90:	f043 0303 	orr.w	r3, r3, #3
   11c94:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11c96:	2303      	movs	r3, #3
   11c98:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11c9a:	2311      	movs	r3, #17
   11c9c:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
   11c9e:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
   11ca0:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11ca2:	4620      	mov	r0, r4
   11ca4:	f7ff fdd2 	bl	1184c <ctrl_tx_enqueue>
   11ca8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(node_tx);
   11caa:	4040      	eors	r0, r0
   11cac:	f380 8811 	msr	BASEPRI, r0
   11cb0:	f04f 0004 	mov.w	r0, #4
   11cb4:	df02      	svc	2
   11cb6:	bf00      	nop
   11cb8:	2000162c 	.word	0x2000162c

00011cbc <phy_rsp_send>:
{
   11cbc:	b510      	push	{r4, lr}
   11cbe:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11cc0:	4810      	ldr	r0, [pc, #64]	; (11d04 <phy_rsp_send+0x48>)
   11cc2:	f7fd fb30 	bl	f326 <mem_acquire>
	LL_ASSERT(node_tx);
   11cc6:	b1b0      	cbz	r0, 11cf6 <phy_rsp_send+0x3a>
   11cc8:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11cca:	7903      	ldrb	r3, [r0, #4]
   11ccc:	f043 0303 	orr.w	r3, r3, #3
   11cd0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11cd2:	2303      	movs	r3, #3
   11cd4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11cd6:	2317      	movs	r3, #23
   11cd8:	71c3      	strb	r3, [r0, #7]
		conn->phy_pref_tx;
   11cda:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   11cde:	f3c3 0302 	ubfx	r3, r3, #0, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
   11ce2:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_rx;
   11ce4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   11ce8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
   11cec:	7243      	strb	r3, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11cee:	4620      	mov	r0, r4
   11cf0:	f7ff fdac 	bl	1184c <ctrl_tx_enqueue>
   11cf4:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11cf6:	4040      	eors	r0, r0
   11cf8:	f380 8811 	msr	BASEPRI, r0
   11cfc:	f04f 0004 	mov.w	r0, #4
   11d00:	df02      	svc	2
   11d02:	bf00      	nop
   11d04:	2000162c 	.word	0x2000162c

00011d08 <unknown_rsp_send>:
{
   11d08:	b538      	push	{r3, r4, r5, lr}
   11d0a:	4604      	mov	r4, r0
   11d0c:	460d      	mov	r5, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11d0e:	480c      	ldr	r0, [pc, #48]	; (11d40 <unknown_rsp_send+0x38>)
   11d10:	f7fd fb09 	bl	f326 <mem_acquire>
	LL_ASSERT(node_tx);
   11d14:	b168      	cbz	r0, 11d32 <unknown_rsp_send+0x2a>
   11d16:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d18:	7903      	ldrb	r3, [r0, #4]
   11d1a:	f043 0303 	orr.w	r3, r3, #3
   11d1e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   11d20:	2302      	movs	r3, #2
   11d22:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   11d24:	2307      	movs	r3, #7
   11d26:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
   11d28:	7205      	strb	r5, [r0, #8]
	ctrl_tx_enqueue(conn, node_tx);
   11d2a:	4620      	mov	r0, r4
   11d2c:	f7ff fd8e 	bl	1184c <ctrl_tx_enqueue>
   11d30:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   11d32:	4040      	eors	r0, r0
   11d34:	f380 8811 	msr	BASEPRI, r0
   11d38:	f04f 0004 	mov.w	r0, #4
   11d3c:	df02      	svc	2
   11d3e:	bf00      	nop
   11d40:	2000162c 	.word	0x2000162c

00011d44 <ticker_update_adv_assert>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11d44:	b120      	cbz	r0, 11d50 <ticker_update_adv_assert+0xc>
   11d46:	4b06      	ldr	r3, [pc, #24]	; (11d60 <ticker_update_adv_assert+0x1c>)
   11d48:	7b9b      	ldrb	r3, [r3, #14]
   11d4a:	b2db      	uxtb	r3, r3
   11d4c:	2b05      	cmp	r3, #5
   11d4e:	d100      	bne.n	11d52 <ticker_update_adv_assert+0xe>
   11d50:	4770      	bx	lr
   11d52:	4040      	eors	r0, r0
   11d54:	f380 8811 	msr	BASEPRI, r0
   11d58:	f04f 0004 	mov.w	r0, #4
   11d5c:	df02      	svc	2
   11d5e:	bf00      	nop
   11d60:	200014d4 	.word	0x200014d4

00011d64 <ticker_update_slave_assert>:
	u8_t ticker_id = (u32_t)params & 0xFF;
   11d64:	b2c9      	uxtb	r1, r1
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11d66:	b120      	cbz	r0, 11d72 <ticker_update_slave_assert+0xe>
   11d68:	4b05      	ldr	r3, [pc, #20]	; (11d80 <ticker_update_slave_assert+0x1c>)
   11d6a:	7b9b      	ldrb	r3, [r3, #14]
   11d6c:	b2db      	uxtb	r3, r3
   11d6e:	4299      	cmp	r1, r3
   11d70:	d100      	bne.n	11d74 <ticker_update_slave_assert+0x10>
   11d72:	4770      	bx	lr
   11d74:	4040      	eors	r0, r0
   11d76:	f380 8811 	msr	BASEPRI, r0
   11d7a:	f04f 0004 	mov.w	r0, #4
   11d7e:	df02      	svc	2
   11d80:	200014d4 	.word	0x200014d4

00011d84 <ticker_op_latency_cancelled>:

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11d84:	b930      	cbnz	r0, 11d94 <ticker_op_latency_cancelled+0x10>

	conn = (struct connection *)params;
	conn->slave.latency_cancel = 0;
   11d86:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   11d8a:	f36f 0341 	bfc	r3, #1, #1
   11d8e:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
   11d92:	4770      	bx	lr
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11d94:	4040      	eors	r0, r0
   11d96:	f380 8811 	msr	BASEPRI, r0
   11d9a:	f04f 0004 	mov.w	r0, #4
   11d9e:	df02      	svc	2

00011da0 <packet_rx_allocate>:
{
   11da0:	b570      	push	{r4, r5, r6, lr}
	if (max > _radio.link_rx_data_quota) {
   11da2:	4b22      	ldr	r3, [pc, #136]	; (11e2c <packet_rx_allocate+0x8c>)
   11da4:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
   11da8:	4283      	cmp	r3, r0
   11daa:	d300      	bcc.n	11dae <packet_rx_allocate+0xe>
   11dac:	4603      	mov	r3, r0
	acquire = _radio.packet_rx_acquire + 1;
   11dae:	4a1f      	ldr	r2, [pc, #124]	; (11e2c <packet_rx_allocate+0x8c>)
   11db0:	f892 413e 	ldrb.w	r4, [r2, #318]	; 0x13e
   11db4:	3401      	adds	r4, #1
   11db6:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
   11db8:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   11dbc:	4294      	cmp	r4, r2
   11dbe:	d10d      	bne.n	11ddc <packet_rx_allocate+0x3c>
		acquire = 0;
   11dc0:	2400      	movs	r4, #0
   11dc2:	e00b      	b.n	11ddc <packet_rx_allocate+0x3c>
			mem_release(link, &_radio.link_rx_free);
   11dc4:	491a      	ldr	r1, [pc, #104]	; (11e30 <packet_rx_allocate+0x90>)
   11dc6:	4630      	mov	r0, r6
   11dc8:	f7fd fac9 	bl	f35e <mem_release>
			break;
   11dcc:	bd70      	pop	{r4, r5, r6, pc}
		_radio.link_rx_data_quota--;
   11dce:	4a17      	ldr	r2, [pc, #92]	; (11e2c <packet_rx_allocate+0x8c>)
   11dd0:	f892 3150 	ldrb.w	r3, [r2, #336]	; 0x150
   11dd4:	3b01      	subs	r3, #1
   11dd6:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   11dda:	462b      	mov	r3, r5
   11ddc:	1e5d      	subs	r5, r3, #1
   11dde:	b2ed      	uxtb	r5, r5
   11de0:	b313      	cbz	r3, 11e28 <packet_rx_allocate+0x88>
   11de2:	4b12      	ldr	r3, [pc, #72]	; (11e2c <packet_rx_allocate+0x8c>)
   11de4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   11de8:	b2db      	uxtb	r3, r3
   11dea:	429c      	cmp	r4, r3
   11dec:	d01c      	beq.n	11e28 <packet_rx_allocate+0x88>
		link = mem_acquire(&_radio.link_rx_free);
   11dee:	4810      	ldr	r0, [pc, #64]	; (11e30 <packet_rx_allocate+0x90>)
   11df0:	f7fd fa99 	bl	f326 <mem_acquire>
		if (!link) {
   11df4:	4606      	mov	r6, r0
   11df6:	b1b8      	cbz	r0, 11e28 <packet_rx_allocate+0x88>
		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   11df8:	480e      	ldr	r0, [pc, #56]	; (11e34 <packet_rx_allocate+0x94>)
   11dfa:	f7fd fa94 	bl	f326 <mem_acquire>
		if (!radio_pdu_node_rx) {
   11dfe:	4602      	mov	r2, r0
   11e00:	2800      	cmp	r0, #0
   11e02:	d0df      	beq.n	11dc4 <packet_rx_allocate+0x24>
		radio_pdu_node_rx->hdr.onion.link = link;
   11e04:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
   11e06:	4b09      	ldr	r3, [pc, #36]	; (11e2c <packet_rx_allocate+0x8c>)
   11e08:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   11e0c:	f893 013e 	ldrb.w	r0, [r3, #318]	; 0x13e
   11e10:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		_radio.packet_rx_acquire = acquire;
   11e14:	f883 413e 	strb.w	r4, [r3, #318]	; 0x13e
		acquire = _radio.packet_rx_acquire + 1;
   11e18:	3401      	adds	r4, #1
   11e1a:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
   11e1c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
   11e20:	429c      	cmp	r4, r3
   11e22:	d1d4      	bne.n	11dce <packet_rx_allocate+0x2e>
			acquire = 0;
   11e24:	2400      	movs	r4, #0
   11e26:	e7d2      	b.n	11dce <packet_rx_allocate+0x2e>
   11e28:	bd70      	pop	{r4, r5, r6, pc}
   11e2a:	bf00      	nop
   11e2c:	200014d4 	.word	0x200014d4
   11e30:	20001618 	.word	0x20001618
   11e34:	20001600 	.word	0x20001600

00011e38 <tx_cmplt_get>:
{
   11e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_first = *first;
   11e3c:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   11e3e:	4294      	cmp	r4, r2
   11e40:	d043      	beq.n	11eca <tx_cmplt_get+0x92>
   11e42:	4690      	mov	r8, r2
   11e44:	4689      	mov	r9, r1
   11e46:	4607      	mov	r7, r0
	*handle = _radio.pkt_release[_first].handle;
   11e48:	4b21      	ldr	r3, [pc, #132]	; (11ed0 <tx_cmplt_get+0x98>)
   11e4a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   11e4e:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   11e52:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
   11e54:	2600      	movs	r6, #0
   11e56:	e00f      	b.n	11e78 <tx_cmplt_get+0x40>
			_radio.pkt_release[_first].node_tx =
   11e58:	2301      	movs	r3, #1
   11e5a:	606b      	str	r3, [r5, #4]
			cmplt++;
   11e5c:	441e      	add	r6, r3
   11e5e:	b2f6      	uxtb	r6, r6
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   11e60:	f030 0303 	bics.w	r3, r0, #3
   11e64:	d126      	bne.n	11eb4 <tx_cmplt_get+0x7c>
		_first = _first + 1;
   11e66:	3401      	adds	r4, #1
   11e68:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
   11e6a:	4b19      	ldr	r3, [pc, #100]	; (11ed0 <tx_cmplt_get+0x98>)
   11e6c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   11e70:	429c      	cmp	r4, r3
   11e72:	d023      	beq.n	11ebc <tx_cmplt_get+0x84>
	} while (_first != last);
   11e74:	4544      	cmp	r4, r8
   11e76:	d023      	beq.n	11ec0 <tx_cmplt_get+0x88>
		if (*handle != _radio.pkt_release[_first].handle) {
   11e78:	883a      	ldrh	r2, [r7, #0]
   11e7a:	4b15      	ldr	r3, [pc, #84]	; (11ed0 <tx_cmplt_get+0x98>)
   11e7c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   11e80:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   11e84:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   11e88:	429a      	cmp	r2, r3
   11e8a:	d119      	bne.n	11ec0 <tx_cmplt_get+0x88>
		node_tx = _radio.pkt_release[_first].node_tx;
   11e8c:	6868      	ldr	r0, [r5, #4]
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
   11e8e:	1d03      	adds	r3, r0, #4
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
   11e90:	2801      	cmp	r0, #1
   11e92:	d9e1      	bls.n	11e58 <tx_cmplt_get+0x20>
   11e94:	f030 0203 	bics.w	r2, r0, #3
   11e98:	d009      	beq.n	11eae <tx_cmplt_get+0x76>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   11e9a:	b143      	cbz	r3, 11eae <tx_cmplt_get+0x76>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   11e9c:	7943      	ldrb	r3, [r0, #5]
   11e9e:	b133      	cbz	r3, 11eae <tx_cmplt_get+0x76>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   11ea0:	7903      	ldrb	r3, [r0, #4]
   11ea2:	f003 0303 	and.w	r3, r3, #3
   11ea6:	3b01      	subs	r3, #1
   11ea8:	b2db      	uxtb	r3, r3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   11eaa:	2b01      	cmp	r3, #1
   11eac:	d9d4      	bls.n	11e58 <tx_cmplt_get+0x20>
			_radio.pkt_release[_first].node_tx =
   11eae:	2302      	movs	r3, #2
   11eb0:	606b      	str	r3, [r5, #4]
   11eb2:	e7d5      	b.n	11e60 <tx_cmplt_get+0x28>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   11eb4:	4907      	ldr	r1, [pc, #28]	; (11ed4 <tx_cmplt_get+0x9c>)
   11eb6:	f7fd fa52 	bl	f35e <mem_release>
   11eba:	e7d4      	b.n	11e66 <tx_cmplt_get+0x2e>
			_first = 0;
   11ebc:	2400      	movs	r4, #0
   11ebe:	e7d9      	b.n	11e74 <tx_cmplt_get+0x3c>
	*first = _first;
   11ec0:	f889 4000 	strb.w	r4, [r9]
}
   11ec4:	4630      	mov	r0, r6
   11ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
   11eca:	2600      	movs	r6, #0
   11ecc:	e7fa      	b.n	11ec4 <tx_cmplt_get+0x8c>
   11ece:	bf00      	nop
   11ed0:	200014d4 	.word	0x200014d4
   11ed4:	20001634 	.word	0x20001634

00011ed8 <ticker_job_disable>:
{
   11ed8:	b508      	push	{r3, lr}
	if (_radio.state != STATE_NONE) {
   11eda:	4b05      	ldr	r3, [pc, #20]	; (11ef0 <ticker_job_disable+0x18>)
   11edc:	7c1b      	ldrb	r3, [r3, #16]
   11ede:	b903      	cbnz	r3, 11ee2 <ticker_job_disable+0xa>
   11ee0:	bd08      	pop	{r3, pc}
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   11ee2:	2200      	movs	r2, #0
   11ee4:	2101      	movs	r1, #1
   11ee6:	4608      	mov	r0, r1
   11ee8:	f7fd f89e 	bl	f028 <mayfly_enable>
}
   11eec:	e7f8      	b.n	11ee0 <ticker_job_disable+0x8>
   11eee:	bf00      	nop
   11ef0:	200014d4 	.word	0x200014d4

00011ef4 <connection_get>:
	if (handle < _radio.connection_count) {
   11ef4:	4b0d      	ldr	r3, [pc, #52]	; (11f2c <connection_get+0x38>)
   11ef6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   11efa:	4283      	cmp	r3, r0
   11efc:	d910      	bls.n	11f20 <connection_get+0x2c>
{
   11efe:	b510      	push	{r4, lr}
   11f00:	4604      	mov	r4, r0
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   11f02:	4602      	mov	r2, r0
   11f04:	f44f 71aa 	mov.w	r1, #340	; 0x154
   11f08:	4b08      	ldr	r3, [pc, #32]	; (11f2c <connection_get+0x38>)
   11f0a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   11f0e:	f7fd fa47 	bl	f3a0 <mem_get>
		if ((conn) && (conn->handle == handle)) {
   11f12:	4603      	mov	r3, r0
   11f14:	b110      	cbz	r0, 11f1c <connection_get+0x28>
   11f16:	8c02      	ldrh	r2, [r0, #32]
   11f18:	4294      	cmp	r4, r2
   11f1a:	d104      	bne.n	11f26 <connection_get+0x32>
}
   11f1c:	4618      	mov	r0, r3
   11f1e:	bd10      	pop	{r4, pc}
	return 0;
   11f20:	2300      	movs	r3, #0
}
   11f22:	4618      	mov	r0, r3
   11f24:	4770      	bx	lr
	return 0;
   11f26:	2300      	movs	r3, #0
   11f28:	e7f8      	b.n	11f1c <connection_get+0x28>
   11f2a:	bf00      	nop
   11f2c:	200014d4 	.word	0x200014d4

00011f30 <role_disable>:
{
   11f30:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f32:	b087      	sub	sp, #28
   11f34:	4604      	mov	r4, r0
   11f36:	460d      	mov	r5, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11f38:	2302      	movs	r3, #2
   11f3a:	9305      	str	r3, [sp, #20]
	switch (ticker_id_primary) {
   11f3c:	2805      	cmp	r0, #5
   11f3e:	d00d      	beq.n	11f5c <role_disable+0x2c>
   11f40:	2806      	cmp	r0, #6
   11f42:	d02a      	beq.n	11f9a <role_disable+0x6a>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   11f44:	2806      	cmp	r0, #6
   11f46:	d957      	bls.n	11ff8 <role_disable+0xc8>
			conn_handle = ticker_id_primary -
   11f48:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   11f4a:	b280      	uxth	r0, r0
   11f4c:	f7ff ffd2 	bl	11ef4 <connection_get>
			if (!conn) {
   11f50:	2800      	cmp	r0, #0
   11f52:	f000 8153 	beq.w	121fc <role_disable+0x2cc>
			ticks_xtal_to_start =
   11f56:	6806      	ldr	r6, [r0, #0]
			ticks_active_to_start =
   11f58:	6847      	ldr	r7, [r0, #4]
		break;
   11f5a:	e023      	b.n	11fa4 <role_disable+0x74>
		ticks_xtal_to_start =
   11f5c:	4b9f      	ldr	r3, [pc, #636]	; (121dc <role_disable+0x2ac>)
   11f5e:	695e      	ldr	r6, [r3, #20]
		ticks_active_to_start =
   11f60:	699f      	ldr	r7, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11f62:	ab05      	add	r3, sp, #20
   11f64:	9300      	str	r3, [sp, #0]
   11f66:	4b9e      	ldr	r3, [pc, #632]	; (121e0 <role_disable+0x2b0>)
   11f68:	460a      	mov	r2, r1
   11f6a:	2103      	movs	r1, #3
   11f6c:	2000      	movs	r0, #0
   11f6e:	f7fe ff47 	bl	10e00 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11f72:	2802      	cmp	r0, #2
   11f74:	d00d      	beq.n	11f92 <role_disable+0x62>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   11f76:	9b05      	ldr	r3, [sp, #20]
   11f78:	b1a3      	cbz	r3, 11fa4 <role_disable+0x74>
   11f7a:	9b05      	ldr	r3, [sp, #20]
   11f7c:	2b01      	cmp	r3, #1
   11f7e:	d011      	beq.n	11fa4 <role_disable+0x74>
   11f80:	4040      	eors	r0, r0
   11f82:	f380 8811 	msr	BASEPRI, r0
   11f86:	f04f 0004 	mov.w	r0, #4
   11f8a:	df02      	svc	2
   11f8c:	bf20      	wfe
  __ASM volatile ("sev");
   11f8e:	bf40      	sev
  __ASM volatile ("wfe");
   11f90:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   11f92:	9b05      	ldr	r3, [sp, #20]
   11f94:	2b02      	cmp	r3, #2
   11f96:	d0f9      	beq.n	11f8c <role_disable+0x5c>
   11f98:	e7ed      	b.n	11f76 <role_disable+0x46>
		ticks_xtal_to_start =
   11f9a:	4b90      	ldr	r3, [pc, #576]	; (121dc <role_disable+0x2ac>)
   11f9c:	f8d3 60cc 	ldr.w	r6, [r3, #204]	; 0xcc
		ticks_active_to_start =
   11fa0:	f8d3 70d0 	ldr.w	r7, [r3, #208]	; 0xd0
	LL_ASSERT(!_radio.ticker_id_stop);
   11fa4:	4b8d      	ldr	r3, [pc, #564]	; (121dc <role_disable+0x2ac>)
   11fa6:	7b9b      	ldrb	r3, [r3, #14]
   11fa8:	2b00      	cmp	r3, #0
   11faa:	d12b      	bne.n	12004 <role_disable+0xd4>
	_radio.ticker_id_stop = ticker_id_primary;
   11fac:	4b8b      	ldr	r3, [pc, #556]	; (121dc <role_disable+0x2ac>)
   11fae:	739c      	strb	r4, [r3, #14]
	ret_cb = TICKER_STATUS_BUSY;
   11fb0:	ab06      	add	r3, sp, #24
   11fb2:	2202      	movs	r2, #2
   11fb4:	f843 2d04 	str.w	r2, [r3, #-4]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11fb8:	9300      	str	r3, [sp, #0]
   11fba:	4b89      	ldr	r3, [pc, #548]	; (121e0 <role_disable+0x2b0>)
   11fbc:	4622      	mov	r2, r4
   11fbe:	2103      	movs	r1, #3
   11fc0:	2000      	movs	r0, #0
   11fc2:	f7fe ff1d 	bl	10e00 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   11fc6:	2802      	cmp	r0, #2
   11fc8:	d022      	beq.n	12010 <role_disable+0xe0>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   11fca:	9b05      	ldr	r3, [sp, #20]
   11fcc:	b973      	cbnz	r3, 11fec <role_disable+0xbc>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   11fce:	4b83      	ldr	r3, [pc, #524]	; (121dc <role_disable+0x2ac>)
   11fd0:	7b1b      	ldrb	r3, [r3, #12]
   11fd2:	b2db      	uxtb	r3, r3
   11fd4:	429c      	cmp	r4, r3
   11fd6:	d02d      	beq.n	12034 <role_disable+0x104>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   11fd8:	4b80      	ldr	r3, [pc, #512]	; (121dc <role_disable+0x2ac>)
   11fda:	7b5b      	ldrb	r3, [r3, #13]
   11fdc:	b2db      	uxtb	r3, r3
   11fde:	429c      	cmp	r4, r3
   11fe0:	d028      	beq.n	12034 <role_disable+0x104>
	if (!_radio.ticker_id_stop) {
   11fe2:	4b7e      	ldr	r3, [pc, #504]	; (121dc <role_disable+0x2ac>)
   11fe4:	7b9b      	ldrb	r3, [r3, #14]
   11fe6:	b90b      	cbnz	r3, 11fec <role_disable+0xbc>
		ret_cb = TICKER_STATUS_FAILURE;
   11fe8:	2301      	movs	r3, #1
   11fea:	9305      	str	r3, [sp, #20]
	_radio.ticker_id_stop = 0;
   11fec:	2200      	movs	r2, #0
   11fee:	4b7b      	ldr	r3, [pc, #492]	; (121dc <role_disable+0x2ac>)
   11ff0:	739a      	strb	r2, [r3, #14]
	return ret_cb;
   11ff2:	9805      	ldr	r0, [sp, #20]
}
   11ff4:	b007      	add	sp, #28
   11ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LL_ASSERT(0);
   11ff8:	4040      	eors	r0, r0
   11ffa:	f380 8811 	msr	BASEPRI, r0
   11ffe:	f04f 0004 	mov.w	r0, #4
   12002:	df02      	svc	2
	LL_ASSERT(!_radio.ticker_id_stop);
   12004:	4040      	eors	r0, r0
   12006:	f380 8811 	msr	BASEPRI, r0
   1200a:	f04f 0004 	mov.w	r0, #4
   1200e:	df02      	svc	2
		if (_radio.ticker_id_event == ticker_id_primary) {
   12010:	4b72      	ldr	r3, [pc, #456]	; (121dc <role_disable+0x2ac>)
   12012:	7b5b      	ldrb	r3, [r3, #13]
   12014:	b2db      	uxtb	r3, r3
   12016:	429c      	cmp	r4, r3
   12018:	d108      	bne.n	1202c <role_disable+0xfc>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1201a:	2201      	movs	r2, #1
   1201c:	4611      	mov	r1, r2
   1201e:	2003      	movs	r0, #3
   12020:	f7fd f802 	bl	f028 <mayfly_enable>
   12024:	e002      	b.n	1202c <role_disable+0xfc>
   12026:	bf20      	wfe
  __ASM volatile ("sev");
   12028:	bf40      	sev
  __ASM volatile ("wfe");
   1202a:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   1202c:	9b05      	ldr	r3, [sp, #20]
   1202e:	2b02      	cmp	r3, #2
   12030:	d0f9      	beq.n	12026 <role_disable+0xf6>
   12032:	e7ca      	b.n	11fca <role_disable+0x9a>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12034:	ab06      	add	r3, sp, #24
   12036:	2202      	movs	r2, #2
   12038:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1203c:	9300      	str	r3, [sp, #0]
   1203e:	4b68      	ldr	r3, [pc, #416]	; (121e0 <role_disable+0x2b0>)
   12040:	2200      	movs	r2, #0
   12042:	2103      	movs	r1, #3
   12044:	4610      	mov	r0, r2
   12046:	f7fe fedb 	bl	10e00 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   1204a:	2802      	cmp	r0, #2
   1204c:	d029      	beq.n	120a2 <role_disable+0x172>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   1204e:	9b02      	ldr	r3, [sp, #8]
   12050:	2b00      	cmp	r3, #0
   12052:	d17c      	bne.n	1214e <role_disable+0x21e>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12054:	2302      	movs	r3, #2
   12056:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   12058:	4b60      	ldr	r3, [pc, #384]	; (121dc <role_disable+0x2ac>)
   1205a:	7b1b      	ldrb	r3, [r3, #12]
   1205c:	2b00      	cmp	r3, #0
   1205e:	d02e      	beq.n	120be <role_disable+0x18e>
		_radio.ticker_id_prepare = 0;
   12060:	2000      	movs	r0, #0
   12062:	4b5e      	ldr	r3, [pc, #376]	; (121dc <role_disable+0x2ac>)
   12064:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12066:	ab03      	add	r3, sp, #12
   12068:	9300      	str	r3, [sp, #0]
   1206a:	4b5d      	ldr	r3, [pc, #372]	; (121e0 <role_disable+0x2b0>)
   1206c:	2201      	movs	r2, #1
   1206e:	2103      	movs	r1, #3
   12070:	f7fe fec6 	bl	10e00 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   12074:	2802      	cmp	r0, #2
   12076:	d028      	beq.n	120ca <role_disable+0x19a>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   12078:	9b03      	ldr	r3, [sp, #12]
   1207a:	2b00      	cmp	r3, #0
   1207c:	d142      	bne.n	12104 <role_disable+0x1d4>
			ticks_xtal_to_start &= ~BIT(31);
   1207e:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   12082:	42b7      	cmp	r7, r6
   12084:	d92f      	bls.n	120e6 <role_disable+0x1b6>
				retval = mayfly_enqueue(
   12086:	4b57      	ldr	r3, [pc, #348]	; (121e4 <role_disable+0x2b4>)
   12088:	2200      	movs	r2, #0
   1208a:	4611      	mov	r1, r2
   1208c:	2003      	movs	r0, #3
   1208e:	f7fd f809 	bl	f0a4 <mayfly_enqueue>
				LL_ASSERT(!retval);
   12092:	2800      	cmp	r0, #0
   12094:	d0a5      	beq.n	11fe2 <role_disable+0xb2>
   12096:	4040      	eors	r0, r0
   12098:	f380 8811 	msr	BASEPRI, r0
   1209c:	f04f 0004 	mov.w	r0, #4
   120a0:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   120a2:	2201      	movs	r2, #1
   120a4:	4611      	mov	r1, r2
   120a6:	2003      	movs	r0, #3
   120a8:	f7fc ffbe 	bl	f028 <mayfly_enable>
		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   120ac:	9b02      	ldr	r3, [sp, #8]
   120ae:	2b02      	cmp	r3, #2
   120b0:	d1cd      	bne.n	1204e <role_disable+0x11e>
   120b2:	4040      	eors	r0, r0
   120b4:	f380 8811 	msr	BASEPRI, r0
   120b8:	f04f 0004 	mov.w	r0, #4
   120bc:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare);
   120be:	4040      	eors	r0, r0
   120c0:	f380 8811 	msr	BASEPRI, r0
   120c4:	f04f 0004 	mov.w	r0, #4
   120c8:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   120ca:	2201      	movs	r2, #1
   120cc:	4611      	mov	r1, r2
   120ce:	2003      	movs	r0, #3
   120d0:	f7fc ffaa 	bl	f028 <mayfly_enable>
			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   120d4:	9b03      	ldr	r3, [sp, #12]
   120d6:	2b02      	cmp	r3, #2
   120d8:	d1ce      	bne.n	12078 <role_disable+0x148>
   120da:	4040      	eors	r0, r0
   120dc:	f380 8811 	msr	BASEPRI, r0
   120e0:	f04f 0004 	mov.w	r0, #4
   120e4:	df02      	svc	2
				retval = mayfly_enqueue(
   120e6:	4b40      	ldr	r3, [pc, #256]	; (121e8 <role_disable+0x2b8>)
   120e8:	2200      	movs	r2, #0
   120ea:	4611      	mov	r1, r2
   120ec:	2003      	movs	r0, #3
   120ee:	f7fc ffd9 	bl	f0a4 <mayfly_enqueue>
				LL_ASSERT(!retval);
   120f2:	2800      	cmp	r0, #0
   120f4:	f43f af75 	beq.w	11fe2 <role_disable+0xb2>
   120f8:	4040      	eors	r0, r0
   120fa:	f380 8811 	msr	BASEPRI, r0
   120fe:	f04f 0004 	mov.w	r0, #4
   12102:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12104:	9b03      	ldr	r3, [sp, #12]
   12106:	2b01      	cmp	r3, #1
   12108:	d11b      	bne.n	12142 <role_disable+0x212>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   1210a:	4b36      	ldr	r3, [pc, #216]	; (121e4 <role_disable+0x2b4>)
   1210c:	2200      	movs	r2, #0
   1210e:	4611      	mov	r1, r2
   12110:	2003      	movs	r0, #3
   12112:	f7fc ffc7 	bl	f0a4 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12116:	b970      	cbnz	r0, 12136 <role_disable+0x206>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   12118:	4b33      	ldr	r3, [pc, #204]	; (121e8 <role_disable+0x2b8>)
   1211a:	2200      	movs	r2, #0
   1211c:	4611      	mov	r1, r2
   1211e:	2003      	movs	r0, #3
   12120:	f7fc ffc0 	bl	f0a4 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12124:	2800      	cmp	r0, #0
   12126:	f43f af5c 	beq.w	11fe2 <role_disable+0xb2>
   1212a:	4040      	eors	r0, r0
   1212c:	f380 8811 	msr	BASEPRI, r0
   12130:	f04f 0004 	mov.w	r0, #4
   12134:	df02      	svc	2
			LL_ASSERT(!retval);
   12136:	4040      	eors	r0, r0
   12138:	f380 8811 	msr	BASEPRI, r0
   1213c:	f04f 0004 	mov.w	r0, #4
   12140:	df02      	svc	2
			LL_ASSERT(0);
   12142:	4040      	eors	r0, r0
   12144:	f380 8811 	msr	BASEPRI, r0
   12148:	f04f 0004 	mov.w	r0, #4
   1214c:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   1214e:	9b02      	ldr	r3, [sp, #8]
   12150:	2b01      	cmp	r3, #1
   12152:	d14d      	bne.n	121f0 <role_disable+0x2c0>
		if (ticker_id_stop != TICKER_NULL) {
   12154:	2dff      	cmp	r5, #255	; 0xff
   12156:	d011      	beq.n	1217c <role_disable+0x24c>
			u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12158:	ab06      	add	r3, sp, #24
   1215a:	2202      	movs	r2, #2
   1215c:	f843 2d08 	str.w	r2, [r3, #-8]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12160:	9300      	str	r3, [sp, #0]
   12162:	4b1f      	ldr	r3, [pc, #124]	; (121e0 <role_disable+0x2b0>)
   12164:	462a      	mov	r2, r5
   12166:	2103      	movs	r1, #3
   12168:	2000      	movs	r0, #0
   1216a:	f7fe fe49 	bl	10e00 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   1216e:	2802      	cmp	r0, #2
   12170:	d018      	beq.n	121a4 <role_disable+0x274>
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   12172:	9b04      	ldr	r3, [sp, #16]
   12174:	b113      	cbz	r3, 1217c <role_disable+0x24c>
   12176:	9b04      	ldr	r3, [sp, #16]
   12178:	2b01      	cmp	r3, #1
   1217a:	d121      	bne.n	121c0 <role_disable+0x290>
		if (_radio.role != ROLE_NONE) {
   1217c:	4b17      	ldr	r3, [pc, #92]	; (121dc <role_disable+0x2ac>)
   1217e:	7bdb      	ldrb	r3, [r3, #15]
   12180:	2b00      	cmp	r3, #0
   12182:	f43f af2e 	beq.w	11fe2 <role_disable+0xb2>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   12186:	4b19      	ldr	r3, [pc, #100]	; (121ec <role_disable+0x2bc>)
   12188:	2204      	movs	r2, #4
   1218a:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   1218c:	2200      	movs	r2, #0
   1218e:	4611      	mov	r1, r2
   12190:	2003      	movs	r0, #3
   12192:	f7fc ff87 	bl	f0a4 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12196:	b1e0      	cbz	r0, 121d2 <role_disable+0x2a2>
   12198:	4040      	eors	r0, r0
   1219a:	f380 8811 	msr	BASEPRI, r0
   1219e:	f04f 0004 	mov.w	r0, #4
   121a2:	df02      	svc	2
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   121a4:	2201      	movs	r2, #1
   121a6:	4611      	mov	r1, r2
   121a8:	2003      	movs	r0, #3
   121aa:	f7fc ff3d 	bl	f028 <mayfly_enable>
				LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   121ae:	9b04      	ldr	r3, [sp, #16]
   121b0:	2b02      	cmp	r3, #2
   121b2:	d1de      	bne.n	12172 <role_disable+0x242>
   121b4:	4040      	eors	r0, r0
   121b6:	f380 8811 	msr	BASEPRI, r0
   121ba:	f04f 0004 	mov.w	r0, #4
   121be:	df02      	svc	2
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   121c0:	4040      	eors	r0, r0
   121c2:	f380 8811 	msr	BASEPRI, r0
   121c6:	f04f 0004 	mov.w	r0, #4
   121ca:	df02      	svc	2
   121cc:	bf20      	wfe
  __ASM volatile ("sev");
   121ce:	bf40      	sev
  __ASM volatile ("wfe");
   121d0:	bf20      	wfe
			while (_radio.role != ROLE_NONE) {
   121d2:	4b02      	ldr	r3, [pc, #8]	; (121dc <role_disable+0x2ac>)
   121d4:	7bdb      	ldrb	r3, [r3, #15]
   121d6:	2b00      	cmp	r3, #0
   121d8:	d1f8      	bne.n	121cc <role_disable+0x29c>
   121da:	e702      	b.n	11fe2 <role_disable+0xb2>
   121dc:	200014d4 	.word	0x200014d4
   121e0:	000116ad 	.word	0x000116ad
   121e4:	2000c248 	.word	0x2000c248
   121e8:	2000c308 	.word	0x2000c308
   121ec:	2000c278 	.word	0x2000c278
		LL_ASSERT(0);
   121f0:	4040      	eors	r0, r0
   121f2:	f380 8811 	msr	BASEPRI, r0
   121f6:	f04f 0004 	mov.w	r0, #4
   121fa:	df02      	svc	2
				return 1;
   121fc:	2001      	movs	r0, #1
   121fe:	e6f9      	b.n	11ff4 <role_disable+0xc4>

00012200 <event_stop>:
{
   12200:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   12202:	4a08      	ldr	r2, [pc, #32]	; (12224 <event_stop+0x24>)
   12204:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12206:	4613      	mov	r3, r2
   12208:	2200      	movs	r2, #0
   1220a:	4611      	mov	r1, r2
   1220c:	4610      	mov	r0, r2
   1220e:	f7fc ff49 	bl	f0a4 <mayfly_enqueue>
	LL_ASSERT(!retval);
   12212:	b900      	cbnz	r0, 12216 <event_stop+0x16>
   12214:	bd08      	pop	{r3, pc}
   12216:	4040      	eors	r0, r0
   12218:	f380 8811 	msr	BASEPRI, r0
   1221c:	f04f 0004 	mov.w	r0, #4
   12220:	df02      	svc	2
   12222:	bf00      	nop
   12224:	2000c258 	.word	0x2000c258

00012228 <event_adv_stop>:
{
   12228:	b500      	push	{lr}
   1222a:	b083      	sub	sp, #12
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   1222c:	2305      	movs	r3, #5
   1222e:	2200      	movs	r2, #0
   12230:	4611      	mov	r1, r2
   12232:	4610      	mov	r0, r2
   12234:	f7ff ffe4 	bl	12200 <event_stop>
	ticker_status =
   12238:	f241 73e4 	movw	r3, #6116	; 0x17e4
   1223c:	9300      	str	r3, [sp, #0]
   1223e:	4b09      	ldr	r3, [pc, #36]	; (12264 <event_adv_stop+0x3c>)
   12240:	2205      	movs	r2, #5
   12242:	2100      	movs	r1, #0
   12244:	4608      	mov	r0, r1
   12246:	f7fe fddb 	bl	10e00 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1224a:	b108      	cbz	r0, 12250 <event_adv_stop+0x28>
   1224c:	2802      	cmp	r0, #2
   1224e:	d102      	bne.n	12256 <event_adv_stop+0x2e>
}
   12250:	b003      	add	sp, #12
   12252:	f85d fb04 	ldr.w	pc, [sp], #4
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12256:	4040      	eors	r0, r0
   12258:	f380 8811 	msr	BASEPRI, r0
   1225c:	f04f 0004 	mov.w	r0, #4
   12260:	df02      	svc	2
   12262:	bf00      	nop
   12264:	00012ae9 	.word	0x00012ae9

00012268 <event_inactive>:
{
   12268:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1226a:	4b07      	ldr	r3, [pc, #28]	; (12288 <event_inactive+0x20>)
   1226c:	2200      	movs	r2, #0
   1226e:	4611      	mov	r1, r2
   12270:	4610      	mov	r0, r2
   12272:	f7fc ff17 	bl	f0a4 <mayfly_enqueue>
	LL_ASSERT(!retval);
   12276:	b900      	cbnz	r0, 1227a <event_inactive+0x12>
   12278:	bd08      	pop	{r3, pc}
   1227a:	4040      	eors	r0, r0
   1227c:	f380 8811 	msr	BASEPRI, r0
   12280:	f04f 0004 	mov.w	r0, #4
   12284:	df02      	svc	2
   12286:	bf00      	nop
   12288:	2000c228 	.word	0x2000c228

0001228c <mayfly_xtal_retain>:
{
   1228c:	b508      	push	{r3, lr}
	if (retain) {
   1228e:	b1d1      	cbz	r1, 122c6 <mayfly_xtal_retain+0x3a>
		if (!s_xtal_retained) {
   12290:	4b1c      	ldr	r3, [pc, #112]	; (12304 <mayfly_xtal_retain+0x78>)
   12292:	781b      	ldrb	r3, [r3, #0]
   12294:	b953      	cbnz	r3, 122ac <mayfly_xtal_retain+0x20>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   12296:	2801      	cmp	r0, #1
   12298:	d109      	bne.n	122ae <mayfly_xtal_retain+0x22>
			s_xtal_retained = 1;
   1229a:	2201      	movs	r2, #1
   1229c:	4b19      	ldr	r3, [pc, #100]	; (12304 <mayfly_xtal_retain+0x78>)
   1229e:	701a      	strb	r2, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   122a0:	4b19      	ldr	r3, [pc, #100]	; (12308 <mayfly_xtal_retain+0x7c>)
   122a2:	2200      	movs	r2, #0
   122a4:	4611      	mov	r1, r2
   122a6:	f7fc fefd 	bl	f0a4 <mayfly_enqueue>
			LL_ASSERT(!retval);
   122aa:	b930      	cbnz	r0, 122ba <mayfly_xtal_retain+0x2e>
   122ac:	bd08      	pop	{r3, pc}
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   122ae:	4040      	eors	r0, r0
   122b0:	f380 8811 	msr	BASEPRI, r0
   122b4:	f04f 0004 	mov.w	r0, #4
   122b8:	df02      	svc	2
			LL_ASSERT(!retval);
   122ba:	4040      	eors	r0, r0
   122bc:	f380 8811 	msr	BASEPRI, r0
   122c0:	f04f 0004 	mov.w	r0, #4
   122c4:	df02      	svc	2
		if (s_xtal_retained) {
   122c6:	4b0f      	ldr	r3, [pc, #60]	; (12304 <mayfly_xtal_retain+0x78>)
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	2b00      	cmp	r3, #0
   122cc:	d0ee      	beq.n	122ac <mayfly_xtal_retain+0x20>
			s_xtal_retained = 0;
   122ce:	2200      	movs	r2, #0
   122d0:	4b0c      	ldr	r3, [pc, #48]	; (12304 <mayfly_xtal_retain+0x78>)
   122d2:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
   122d4:	b138      	cbz	r0, 122e6 <mayfly_xtal_retain+0x5a>
   122d6:	2801      	cmp	r0, #1
   122d8:	d012      	beq.n	12300 <mayfly_xtal_retain+0x74>
				LL_ASSERT(0);
   122da:	4040      	eors	r0, r0
   122dc:	f380 8811 	msr	BASEPRI, r0
   122e0:	f04f 0004 	mov.w	r0, #4
   122e4:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
   122e6:	4b09      	ldr	r3, [pc, #36]	; (1230c <mayfly_xtal_retain+0x80>)
			retval = mayfly_enqueue(caller_id,
   122e8:	2200      	movs	r2, #0
   122ea:	4611      	mov	r1, r2
   122ec:	f7fc feda 	bl	f0a4 <mayfly_enqueue>
			LL_ASSERT(!retval);
   122f0:	2800      	cmp	r0, #0
   122f2:	d0db      	beq.n	122ac <mayfly_xtal_retain+0x20>
   122f4:	4040      	eors	r0, r0
   122f6:	f380 8811 	msr	BASEPRI, r0
   122fa:	f04f 0004 	mov.w	r0, #4
   122fe:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
   12300:	4b03      	ldr	r3, [pc, #12]	; (12310 <mayfly_xtal_retain+0x84>)
   12302:	e7f1      	b.n	122e8 <mayfly_xtal_retain+0x5c>
   12304:	20001a4c 	.word	0x20001a4c
   12308:	2000c2c8 	.word	0x2000c2c8
   1230c:	2000c2d8 	.word	0x2000c2d8
   12310:	2000c2e8 	.word	0x2000c2e8

00012314 <event_active>:
{
   12314:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12316:	4b07      	ldr	r3, [pc, #28]	; (12334 <event_active+0x20>)
   12318:	2200      	movs	r2, #0
   1231a:	4611      	mov	r1, r2
   1231c:	4610      	mov	r0, r2
   1231e:	f7fc fec1 	bl	f0a4 <mayfly_enqueue>
	LL_ASSERT(!retval);
   12322:	b900      	cbnz	r0, 12326 <event_active+0x12>
   12324:	bd08      	pop	{r3, pc}
   12326:	4040      	eors	r0, r0
   12328:	f380 8811 	msr	BASEPRI, r0
   1232c:	f04f 0004 	mov.w	r0, #4
   12330:	df02      	svc	2
   12332:	bf00      	nop
   12334:	2000c218 	.word	0x2000c218

00012338 <event_xtal>:
{
   12338:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1233a:	4b07      	ldr	r3, [pc, #28]	; (12358 <event_xtal+0x20>)
   1233c:	2200      	movs	r2, #0
   1233e:	4611      	mov	r1, r2
   12340:	4610      	mov	r0, r2
   12342:	f7fc feaf 	bl	f0a4 <mayfly_enqueue>
	LL_ASSERT(!retval);
   12346:	b900      	cbnz	r0, 1234a <event_xtal+0x12>
   12348:	bd08      	pop	{r3, pc}
   1234a:	4040      	eors	r0, r0
   1234c:	f380 8811 	msr	BASEPRI, r0
   12350:	f04f 0004 	mov.w	r0, #4
   12354:	df02      	svc	2
   12356:	bf00      	nop
   12358:	2000c2b8 	.word	0x2000c2b8

0001235c <mayfly_radio_active>:
{
   1235c:	b508      	push	{r3, lr}
	if ((u32_t)params) {
   1235e:	b148      	cbz	r0, 12374 <mayfly_radio_active+0x18>
		if (s_active++) {
   12360:	4a0e      	ldr	r2, [pc, #56]	; (1239c <mayfly_radio_active+0x40>)
   12362:	7813      	ldrb	r3, [r2, #0]
   12364:	1c59      	adds	r1, r3, #1
   12366:	7011      	strb	r1, [r2, #0]
   12368:	b103      	cbz	r3, 1236c <mayfly_radio_active+0x10>
   1236a:	bd08      	pop	{r3, pc}
		radio_active_callback(1);
   1236c:	2001      	movs	r0, #1
   1236e:	f007 f8a5 	bl	194bc <radio_active_callback>
   12372:	bd08      	pop	{r3, pc}
		LL_ASSERT(s_active);
   12374:	4b09      	ldr	r3, [pc, #36]	; (1239c <mayfly_radio_active+0x40>)
   12376:	781b      	ldrb	r3, [r3, #0]
   12378:	b14b      	cbz	r3, 1238e <mayfly_radio_active+0x32>
		if (--s_active) {
   1237a:	3b01      	subs	r3, #1
   1237c:	b2db      	uxtb	r3, r3
   1237e:	4a07      	ldr	r2, [pc, #28]	; (1239c <mayfly_radio_active+0x40>)
   12380:	7013      	strb	r3, [r2, #0]
   12382:	2b00      	cmp	r3, #0
   12384:	d1f1      	bne.n	1236a <mayfly_radio_active+0xe>
		radio_active_callback(0);
   12386:	2000      	movs	r0, #0
   12388:	f007 f898 	bl	194bc <radio_active_callback>
   1238c:	e7ed      	b.n	1236a <mayfly_radio_active+0xe>
		LL_ASSERT(s_active);
   1238e:	4040      	eors	r0, r0
   12390:	f380 8811 	msr	BASEPRI, r0
   12394:	f04f 0004 	mov.w	r0, #4
   12398:	df02      	svc	2
   1239a:	bf00      	nop
   1239c:	200019b8 	.word	0x200019b8

000123a0 <mayfly_radio_inactive>:
{
   123a0:	b508      	push	{r3, lr}
	mayfly_radio_active(0);
   123a2:	2000      	movs	r0, #0
   123a4:	f7ff ffda 	bl	1235c <mayfly_radio_active>
   123a8:	bd08      	pop	{r3, pc}
	...

000123ac <mayfly_radio_stop>:
{
   123ac:	b538      	push	{r3, r4, r5, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
   123ae:	b2c4      	uxtb	r4, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   123b0:	1f23      	subs	r3, r4, #4
   123b2:	b2db      	uxtb	r3, r3
   123b4:	2b01      	cmp	r3, #1
   123b6:	d808      	bhi.n	123ca <mayfly_radio_stop+0x1e>
	radio_used = ((_radio.state != STATE_NONE) &&
   123b8:	4b10      	ldr	r3, [pc, #64]	; (123fc <mayfly_radio_stop+0x50>)
   123ba:	7c1b      	ldrb	r3, [r3, #16]
		      (_radio.state != STATE_STOP) &&
   123bc:	b16b      	cbz	r3, 123da <mayfly_radio_stop+0x2e>
	radio_used = ((_radio.state != STATE_NONE) &&
   123be:	2b04      	cmp	r3, #4
   123c0:	d014      	beq.n	123ec <mayfly_radio_stop+0x40>
		      (_radio.state != STATE_STOP) &&
   123c2:	2b05      	cmp	r3, #5
   123c4:	d007      	beq.n	123d6 <mayfly_radio_stop+0x2a>
   123c6:	2301      	movs	r3, #1
   123c8:	e008      	b.n	123dc <mayfly_radio_stop+0x30>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   123ca:	4040      	eors	r0, r0
   123cc:	f380 8811 	msr	BASEPRI, r0
   123d0:	f04f 0004 	mov.w	r0, #4
   123d4:	df02      	svc	2
		      (_radio.state != STATE_STOP) &&
   123d6:	2300      	movs	r3, #0
   123d8:	e000      	b.n	123dc <mayfly_radio_stop+0x30>
   123da:	2300      	movs	r3, #0
	radio_used = ((_radio.state != STATE_NONE) &&
   123dc:	461d      	mov	r5, r3
	if (radio_used || !radio_is_idle()) {
   123de:	b13b      	cbz	r3, 123f0 <mayfly_radio_stop+0x44>
		if (radio_used) {
   123e0:	b10d      	cbz	r5, 123e6 <mayfly_radio_stop+0x3a>
			_radio.state = state;
   123e2:	4b06      	ldr	r3, [pc, #24]	; (123fc <mayfly_radio_stop+0x50>)
   123e4:	741c      	strb	r4, [r3, #16]
		radio_disable();
   123e6:	f7fd f9b3 	bl	f750 <radio_disable>
   123ea:	bd38      	pop	{r3, r4, r5, pc}
		      (_radio.state != STATE_STOP) &&
   123ec:	2300      	movs	r3, #0
   123ee:	e7f5      	b.n	123dc <mayfly_radio_stop+0x30>
	if (radio_used || !radio_is_idle()) {
   123f0:	f7fd f9dc 	bl	f7ac <radio_is_idle>
   123f4:	2800      	cmp	r0, #0
   123f6:	d0f3      	beq.n	123e0 <mayfly_radio_stop+0x34>
   123f8:	e7f7      	b.n	123ea <mayfly_radio_stop+0x3e>
   123fa:	bf00      	nop
   123fc:	200014d4 	.word	0x200014d4

00012400 <adv_scan_conn_configure>:
{
   12400:	b508      	push	{r3, lr}
	radio_reset();
   12402:	f7fd f8ff 	bl	f604 <radio_reset>
	radio_tx_power_set(0);
   12406:	2000      	movs	r0, #0
   12408:	f7fd f918 	bl	f63c <radio_tx_power_set>
	radio_isr_set(isr);
   1240c:	4801      	ldr	r0, [pc, #4]	; (12414 <adv_scan_conn_configure+0x14>)
   1240e:	f7fd f8c1 	bl	f594 <radio_isr_set>
   12412:	bd08      	pop	{r3, pc}
   12414:	0000fd49 	.word	0x0000fd49

00012418 <adv_scan_configure>:
{
   12418:	b570      	push	{r4, r5, r6, lr}
   1241a:	b082      	sub	sp, #8
   1241c:	4604      	mov	r4, r0
   1241e:	460e      	mov	r6, r1
	u32_t aa = 0x8e89bed6;
   12420:	ad02      	add	r5, sp, #8
   12422:	4b0d      	ldr	r3, [pc, #52]	; (12458 <adv_scan_configure+0x40>)
   12424:	f845 3d04 	str.w	r3, [r5, #-4]!
	adv_scan_conn_configure();
   12428:	f7ff ffea 	bl	12400 <adv_scan_conn_configure>
	radio_phy_set(phy, flags);
   1242c:	4631      	mov	r1, r6
   1242e:	4620      	mov	r0, r4
   12430:	f7fd f8f6 	bl	f620 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   12434:	4628      	mov	r0, r5
   12436:	f7fd f91f 	bl	f678 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   1243a:	0062      	lsls	r2, r4, #1
   1243c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   12440:	2125      	movs	r1, #37	; 0x25
   12442:	2008      	movs	r0, #8
   12444:	f7fd f930 	bl	f6a8 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   12448:	4904      	ldr	r1, [pc, #16]	; (1245c <adv_scan_configure+0x44>)
   1244a:	f240 605b 	movw	r0, #1627	; 0x65b
   1244e:	f7fd f9b7 	bl	f7c0 <radio_crc_configure>
}
   12452:	b002      	add	sp, #8
   12454:	bd70      	pop	{r4, r5, r6, pc}
   12456:	bf00      	nop
   12458:	8e89bed6 	.word	0x8e89bed6
   1245c:	00555555 	.word	0x00555555

00012460 <connection_configure>:
{
   12460:	b510      	push	{r4, lr}
   12462:	4604      	mov	r4, r0
	adv_scan_conn_configure();
   12464:	f7ff ffcc 	bl	12400 <adv_scan_conn_configure>
	radio_aa_set(conn->access_addr);
   12468:	f104 0010 	add.w	r0, r4, #16
   1246c:	f7fd f904 	bl	f678 <radio_aa_set>
			    (((u32_t)conn->crc_init[2] << 16) |
   12470:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   12472:	7d63      	ldrb	r3, [r4, #21]
   12474:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   12476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   1247a:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1247c:	4319      	orrs	r1, r3
   1247e:	f240 605b 	movw	r0, #1627	; 0x65b
   12482:	f7fd f99d 	bl	f7c0 <radio_crc_configure>
   12486:	bd10      	pop	{r4, pc}

00012488 <rx_packet_set>:
{
   12488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1248a:	4605      	mov	r5, r0
   1248c:	460f      	mov	r7, r1
	max_rx_octets = conn->max_rx_octets;
   1248e:	8e06      	ldrh	r6, [r0, #48]	; 0x30
	phy = conn->phy_rx;
   12490:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
   12494:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   12498:	2100      	movs	r1, #0
   1249a:	4620      	mov	r0, r4
   1249c:	f7fd f8c0 	bl	f620 <radio_phy_set>
	if (conn->enc_rx) {
   124a0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   124a4:	f013 0f10 	tst.w	r3, #16
   124a8:	d10a      	bne.n	124c0 <rx_packet_set+0x38>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   124aa:	0062      	lsls	r2, r4, #1
   124ac:	f042 0201 	orr.w	r2, r2, #1
   124b0:	b2f1      	uxtb	r1, r6
   124b2:	2008      	movs	r0, #8
   124b4:	f7fd f8f8 	bl	f6a8 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   124b8:	4638      	mov	r0, r7
   124ba:	f7fd f925 	bl	f708 <radio_pkt_rx_set>
   124be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   124c0:	0062      	lsls	r2, r4, #1
   124c2:	1d31      	adds	r1, r6, #4
   124c4:	f042 0201 	orr.w	r2, r2, #1
   124c8:	b2c9      	uxtb	r1, r1
   124ca:	2008      	movs	r0, #8
   124cc:	f7fd f8ec 	bl	f6a8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   124d0:	463a      	mov	r2, r7
   124d2:	4621      	mov	r1, r4
   124d4:	f105 00f9 	add.w	r0, r5, #249	; 0xf9
   124d8:	f7fd fb12 	bl	fb00 <radio_ccm_rx_pkt_set>
   124dc:	f7fd f914 	bl	f708 <radio_pkt_rx_set>
   124e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000124e2 <packet_rx_callback>:
{
   124e2:	b508      	push	{r3, lr}
	radio_event_callback();
   124e4:	f006 ffec 	bl	194c0 <radio_event_callback>
   124e8:	bd08      	pop	{r3, pc}
	...

000124ec <pdu_node_tx_release>:
{
   124ec:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   124ee:	4a14      	ldr	r2, [pc, #80]	; (12540 <pdu_node_tx_release+0x54>)
   124f0:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
   124f4:	3301      	adds	r3, #1
   124f6:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
   124f8:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   124fc:	4293      	cmp	r3, r2
   124fe:	d017      	beq.n	12530 <pdu_node_tx_release+0x44>
	LL_ASSERT(last != _radio.packet_release_first);
   12500:	4a0f      	ldr	r2, [pc, #60]	; (12540 <pdu_node_tx_release+0x54>)
   12502:	f892 2173 	ldrb.w	r2, [r2, #371]	; 0x173
   12506:	4293      	cmp	r3, r2
   12508:	d014      	beq.n	12534 <pdu_node_tx_release+0x48>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   1250a:	4a0d      	ldr	r2, [pc, #52]	; (12540 <pdu_node_tx_release+0x54>)
   1250c:	f8d2 416c 	ldr.w	r4, [r2, #364]	; 0x16c
   12510:	f892 5174 	ldrb.w	r5, [r2, #372]	; 0x174
   12514:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   12518:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   1251c:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
   12520:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   12524:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
   12526:	f882 3174 	strb.w	r3, [r2, #372]	; 0x174
	packet_rx_callback();
   1252a:	f7ff ffda 	bl	124e2 <packet_rx_callback>
   1252e:	bd38      	pop	{r3, r4, r5, pc}
		last = 0;
   12530:	2300      	movs	r3, #0
   12532:	e7e5      	b.n	12500 <pdu_node_tx_release+0x14>
	LL_ASSERT(last != _radio.packet_release_first);
   12534:	4040      	eors	r0, r0
   12536:	f380 8811 	msr	BASEPRI, r0
   1253a:	f04f 0004 	mov.w	r0, #4
   1253e:	df02      	svc	2
   12540:	200014d4 	.word	0x200014d4

00012544 <packet_tx_enqueue>:
{
   12544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   12546:	e016      	b.n	12576 <packet_tx_enqueue+0x32>
			if (conn->pkt_tx_data == 0) {
   12548:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   1254c:	2b00      	cmp	r3, #0
   1254e:	d040      	beq.n	125d2 <packet_tx_enqueue+0x8e>
			if (conn->pkt_tx_last) {
   12550:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
   12554:	b103      	cbz	r3, 12558 <packet_tx_enqueue+0x14>
				conn->pkt_tx_last->next = node_tx_new;
   12556:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
   12558:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
   1255c:	4a24      	ldr	r2, [pc, #144]	; (125f0 <packet_tx_enqueue+0xac>)
   1255e:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   12562:	3301      	adds	r3, #1
   12564:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
   12566:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   1256a:	4293      	cmp	r3, r2
   1256c:	d03c      	beq.n	125e8 <packet_tx_enqueue+0xa4>
		_radio.packet_tx_first = first;
   1256e:	4a20      	ldr	r2, [pc, #128]	; (125f0 <packet_tx_enqueue+0xac>)
   12570:	f882 3171 	strb.w	r3, [r2, #369]	; 0x171
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   12574:	4638      	mov	r0, r7
   12576:	1e47      	subs	r7, r0, #1
   12578:	b2ff      	uxtb	r7, r7
   1257a:	2800      	cmp	r0, #0
   1257c:	d036      	beq.n	125ec <packet_tx_enqueue+0xa8>
   1257e:	4a1c      	ldr	r2, [pc, #112]	; (125f0 <packet_tx_enqueue+0xac>)
   12580:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   12584:	b2db      	uxtb	r3, r3
   12586:	f892 2172 	ldrb.w	r2, [r2, #370]	; 0x172
   1258a:	4293      	cmp	r3, r2
   1258c:	d02e      	beq.n	125ec <packet_tx_enqueue+0xa8>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   1258e:	4b18      	ldr	r3, [pc, #96]	; (125f0 <packet_tx_enqueue+0xac>)
   12590:	f8d3 6168 	ldr.w	r6, [r3, #360]	; 0x168
   12594:	f893 4171 	ldrb.w	r4, [r3, #369]	; 0x171
   12598:	b2e4      	uxtb	r4, r4
   1259a:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
		node_tx_new = pdu_data_q_tx->node_tx;
   1259e:	6855      	ldr	r5, [r2, #4]
		node_tx_new->next = NULL;
   125a0:	2200      	movs	r2, #0
   125a2:	602a      	str	r2, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   125a4:	f836 2034 	ldrh.w	r2, [r6, r4, lsl #3]
   125a8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   125ac:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   125b0:	f7fc fef6 	bl	f3a0 <mem_get>
		if (conn->handle == pdu_data_q_tx->handle) {
   125b4:	8c02      	ldrh	r2, [r0, #32]
   125b6:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
   125ba:	429a      	cmp	r2, r3
   125bc:	d0c4      	beq.n	12548 <packet_tx_enqueue+0x4>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   125be:	792b      	ldrb	r3, [r5, #4]
   125c0:	f36f 0301 	bfc	r3, #0, #2
   125c4:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   125c6:	4629      	mov	r1, r5
   125c8:	f836 0034 	ldrh.w	r0, [r6, r4, lsl #3]
   125cc:	f7ff ff8e 	bl	124ec <pdu_node_tx_release>
   125d0:	e7c4      	b.n	1255c <packet_tx_enqueue+0x18>
				conn->pkt_tx_data = node_tx_new;
   125d2:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
   125d6:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   125da:	2b00      	cmp	r3, #0
   125dc:	d1b8      	bne.n	12550 <packet_tx_enqueue+0xc>
					conn->pkt_tx_head = node_tx_new;
   125de:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
   125e2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
   125e6:	e7b3      	b.n	12550 <packet_tx_enqueue+0xc>
			first = 0;
   125e8:	2300      	movs	r3, #0
   125ea:	e7c0      	b.n	1256e <packet_tx_enqueue+0x2a>
   125ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   125ee:	bf00      	nop
   125f0:	200014d4 	.word	0x200014d4

000125f4 <connection_release>:
{
   125f4:	b510      	push	{r4, lr}
   125f6:	b082      	sub	sp, #8
   125f8:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   125fa:	2201      	movs	r2, #1
   125fc:	4611      	mov	r1, r2
   125fe:	2000      	movs	r0, #0
   12600:	f7fc fd12 	bl	f028 <mayfly_enable>
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   12604:	8c22      	ldrh	r2, [r4, #32]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12606:	3207      	adds	r2, #7
	ticker_status =
   12608:	f242 2345 	movw	r3, #8773	; 0x2245
   1260c:	9300      	str	r3, [sp, #0]
   1260e:	4b46      	ldr	r3, [pc, #280]	; (12728 <connection_release+0x134>)
   12610:	b2d2      	uxtb	r2, r2
   12612:	2100      	movs	r1, #0
   12614:	4608      	mov	r0, r1
   12616:	f7fe fbf3 	bl	10e00 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1261a:	b108      	cbz	r0, 12620 <connection_release+0x2c>
   1261c:	2802      	cmp	r0, #2
   1261e:	d12a      	bne.n	12676 <connection_release+0x82>
	if ((_radio.state == STATE_ABORT) &&
   12620:	4b42      	ldr	r3, [pc, #264]	; (1272c <connection_release+0x138>)
   12622:	7c1b      	ldrb	r3, [r3, #16]
   12624:	2b05      	cmp	r3, #5
   12626:	d13e      	bne.n	126a6 <connection_release+0xb2>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   12628:	4b40      	ldr	r3, [pc, #256]	; (1272c <connection_release+0x138>)
   1262a:	7b1a      	ldrb	r2, [r3, #12]
   1262c:	b2d2      	uxtb	r2, r2
					  conn->handle))) {
   1262e:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   12630:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
   12632:	429a      	cmp	r2, r3
   12634:	d137      	bne.n	126a6 <connection_release+0xb2>
		_radio.ticker_id_prepare = 0;
   12636:	2000      	movs	r0, #0
   12638:	4b3c      	ldr	r3, [pc, #240]	; (1272c <connection_release+0x138>)
   1263a:	7318      	strb	r0, [r3, #12]
		ticker_status =
   1263c:	f242 2356 	movw	r3, #8790	; 0x2256
   12640:	9300      	str	r3, [sp, #0]
   12642:	4b39      	ldr	r3, [pc, #228]	; (12728 <connection_release+0x134>)
   12644:	2201      	movs	r2, #1
   12646:	4601      	mov	r1, r0
   12648:	f7fe fbda 	bl	10e00 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1264c:	b108      	cbz	r0, 12652 <connection_release+0x5e>
   1264e:	2802      	cmp	r0, #2
   12650:	d117      	bne.n	12682 <connection_release+0x8e>
		ticker_status =
   12652:	f242 235d 	movw	r3, #8797	; 0x225d
   12656:	9300      	str	r3, [sp, #0]
   12658:	4b33      	ldr	r3, [pc, #204]	; (12728 <connection_release+0x134>)
   1265a:	2200      	movs	r2, #0
   1265c:	4611      	mov	r1, r2
   1265e:	4610      	mov	r0, r2
   12660:	f7fe fbce 	bl	10e00 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12664:	b1f8      	cbz	r0, 126a6 <connection_release+0xb2>
   12666:	2802      	cmp	r0, #2
   12668:	d01d      	beq.n	126a6 <connection_release+0xb2>
   1266a:	4040      	eors	r0, r0
   1266c:	f380 8811 	msr	BASEPRI, r0
   12670:	f04f 0004 	mov.w	r0, #4
   12674:	df02      	svc	2
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12676:	4040      	eors	r0, r0
   12678:	f380 8811 	msr	BASEPRI, r0
   1267c:	f04f 0004 	mov.w	r0, #4
   12680:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12682:	4040      	eors	r0, r0
   12684:	f380 8811 	msr	BASEPRI, r0
   12688:	f04f 0004 	mov.w	r0, #4
   1268c:	df02      	svc	2
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   1268e:	790b      	ldrb	r3, [r1, #4]
   12690:	f36f 0301 	bfc	r3, #0, #2
   12694:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   12696:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1269a:	681b      	ldr	r3, [r3, #0]
   1269c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
   126a0:	8c20      	ldrh	r0, [r4, #32]
   126a2:	f7ff ff23 	bl	124ec <pdu_node_tx_release>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   126a6:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   126aa:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   126ae:	4299      	cmp	r1, r3
   126b0:	d00c      	beq.n	126cc <connection_release+0xd8>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   126b2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   126b6:	4299      	cmp	r1, r3
   126b8:	d1e9      	bne.n	1268e <connection_release+0x9a>
   126ba:	e007      	b.n	126cc <connection_release+0xd8>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   126bc:	6803      	ldr	r3, [r0, #0]
   126be:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   126c2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   126c6:	491a      	ldr	r1, [pc, #104]	; (12730 <connection_release+0x13c>)
   126c8:	f7fc fe49 	bl	f35e <mem_release>
	while ((conn->pkt_tx_head) &&
   126cc:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   126d0:	b118      	cbz	r0, 126da <connection_release+0xe6>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   126d2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head) &&
   126d6:	4298      	cmp	r0, r3
   126d8:	d1f0      	bne.n	126bc <connection_release+0xc8>
	conn->pkt_tx_ctrl = NULL;
   126da:	2300      	movs	r3, #0
   126dc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   126e0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
   126e4:	e00d      	b.n	12702 <connection_release+0x10e>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   126e6:	790b      	ldrb	r3, [r1, #4]
   126e8:	f36f 0301 	bfc	r3, #0, #2
   126ec:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   126ee:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   126f2:	681b      	ldr	r3, [r3, #0]
   126f4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
   126f8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
   126fc:	8c20      	ldrh	r0, [r4, #32]
   126fe:	f7ff fef5 	bl	124ec <pdu_node_tx_release>
	while (conn->pkt_tx_head) {
   12702:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   12706:	2900      	cmp	r1, #0
   12708:	d1ed      	bne.n	126e6 <connection_release+0xf2>
	conn->handle = 0xffff;
   1270a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1270e:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   12710:	4b06      	ldr	r3, [pc, #24]	; (1272c <connection_release+0x138>)
   12712:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   12716:	429c      	cmp	r4, r3
   12718:	d001      	beq.n	1271e <connection_release+0x12a>
}
   1271a:	b002      	add	sp, #8
   1271c:	bd10      	pop	{r4, pc}
		_radio.conn_upd = NULL;
   1271e:	2200      	movs	r2, #0
   12720:	4b02      	ldr	r3, [pc, #8]	; (1272c <connection_release+0x138>)
   12722:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
}
   12726:	e7f8      	b.n	1271a <connection_release+0x126>
   12728:	00011a1d 	.word	0x00011a1d
   1272c:	200014d4 	.word	0x200014d4
   12730:	2000162c 	.word	0x2000162c

00012734 <chan_map_update>:
{
   12734:	b538      	push	{r3, r4, r5, lr}
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   12736:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   1273a:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   1273c:	1a9b      	subs	r3, r3, r2
   1273e:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   12740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12744:	da22      	bge.n	1278c <chan_map_update+0x58>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12746:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1274a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1274e:	429a      	cmp	r2, r3
   12750:	d116      	bne.n	12780 <chan_map_update+0x4c>
   12752:	460d      	mov	r5, r1
   12754:	4604      	mov	r4, r0
	memcpy(&conn->llcp.chan_map.chm[0],
   12756:	2205      	movs	r2, #5
   12758:	3104      	adds	r1, #4
   1275a:	3079      	adds	r0, #121	; 0x79
   1275c:	f7ed fdb0 	bl	2c0 <memcpy>
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
   12760:	f8b5 3009 	ldrh.w	r3, [r5, #9]
	conn->llcp.chan_map.instant =
   12764:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
	conn->llcp.chan_map.initiate = 0;
   12768:	2000      	movs	r0, #0
   1276a:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	conn->llcp_type = LLCP_CHAN_MAP;
   1276e:	2302      	movs	r3, #2
   12770:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	conn->llcp_ack--;
   12774:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   12778:	3b01      	subs	r3, #1
   1277a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	return 0;
   1277e:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12780:	4040      	eors	r0, r0
   12782:	f380 8811 	msr	BASEPRI, r0
   12786:	f04f 0004 	mov.w	r0, #4
   1278a:	df02      	svc	2
		return 1;
   1278c:	2001      	movs	r0, #1
}
   1278e:	bd38      	pop	{r3, r4, r5, pc}

00012790 <feature_rsp_send>:
{
   12790:	b538      	push	{r3, r4, r5, lr}
   12792:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12794:	4812      	ldr	r0, [pc, #72]	; (127e0 <feature_rsp_send+0x50>)
   12796:	f7fc fdc6 	bl	f326 <mem_acquire>
	LL_ASSERT(node_tx);
   1279a:	b1d8      	cbz	r0, 127d4 <feature_rsp_send+0x44>
   1279c:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1279e:	7903      	ldrb	r3, [r0, #4]
   127a0:	f043 0303 	orr.w	r3, r3, #3
   127a4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   127a6:	2309      	movs	r3, #9
   127a8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   127aa:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   127ac:	2208      	movs	r2, #8
   127ae:	2100      	movs	r1, #0
   127b0:	4410      	add	r0, r2
   127b2:	f018 f881 	bl	2a8b8 <memset>
		conn->llcp_features & 0xFF;
   127b6:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   127ba:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   127bc:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   127c0:	0a1b      	lsrs	r3, r3, #8
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   127c2:	7263      	strb	r3, [r4, #9]
		(conn->llcp_features >> 16) & 0xFF;
   127c4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   127c8:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   127ca:	4621      	mov	r1, r4
   127cc:	4628      	mov	r0, r5
   127ce:	f7ff f87c 	bl	118ca <ctrl_tx_sec_enqueue>
   127d2:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   127d4:	4040      	eors	r0, r0
   127d6:	f380 8811 	msr	BASEPRI, r0
   127da:	f04f 0004 	mov.w	r0, #4
   127de:	df02      	svc	2
   127e0:	2000162c 	.word	0x2000162c

000127e4 <empty_tx_enqueue>:
{
   127e4:	b510      	push	{r4, lr}
   127e6:	4604      	mov	r4, r0
	conn->empty = 1;
   127e8:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   127ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   127f0:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
   127f4:	f7fc fffa 	bl	f7ec <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   127f8:	7803      	ldrb	r3, [r0, #0]
   127fa:	2201      	movs	r2, #1
   127fc:	f362 0301 	bfi	r3, r2, #0, #2
   12800:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   12802:	2300      	movs	r3, #0
   12804:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
   12806:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1280a:	b123      	cbz	r3, 12816 <empty_tx_enqueue+0x32>
		pdu_data_tx->md = 1;
   1280c:	7803      	ldrb	r3, [r0, #0]
   1280e:	f043 0310 	orr.w	r3, r3, #16
   12812:	7003      	strb	r3, [r0, #0]
   12814:	bd10      	pop	{r4, pc}
		pdu_data_tx->md = 0;
   12816:	7803      	ldrb	r3, [r0, #0]
   12818:	f36f 1304 	bfc	r3, #4, #1
   1281c:	7003      	strb	r3, [r0, #0]
}
   1281e:	bd10      	pop	{r4, pc}

00012820 <prepare_pdu_data_tx>:
{
   12820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12822:	460c      	mov	r4, r1
	    conn->empty ||
   12824:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
	if (/* empty packet */
   12828:	f012 0f80 	tst.w	r2, #128	; 0x80
   1282c:	d109      	bne.n	12842 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   1282e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    conn->empty ||
   12832:	b133      	cbz	r3, 12842 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   12834:	f012 0f08 	tst.w	r2, #8
   12838:	d00e      	beq.n	12858 <prepare_pdu_data_tx+0x38>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   1283a:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
   1283e:	4293      	cmp	r3, r2
   12840:	d00a      	beq.n	12858 <prepare_pdu_data_tx+0x38>
			_pdu_data_tx = empty_tx_enqueue(conn);
   12842:	f7ff ffcf 	bl	127e4 <empty_tx_enqueue>
   12846:	4602      	mov	r2, r0
	_pdu_data_tx->rfu = 0;
   12848:	7813      	ldrb	r3, [r2, #0]
   1284a:	f36f 1347 	bfc	r3, #5, #3
   1284e:	7013      	strb	r3, [r2, #0]
	_pdu_data_tx->resv = 0;
   12850:	2300      	movs	r3, #0
   12852:	7093      	strb	r3, [r2, #2]
	*pdu_data_tx = _pdu_data_tx;
   12854:	6022      	str	r2, [r4, #0]
   12856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   12858:	3304      	adds	r3, #4
					conn->packet_tx_head_offset);
   1285a:	f890 6151 	ldrb.w	r6, [r0, #337]	; 0x151
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   1285e:	199a      	adds	r2, r3, r6
		if (!conn->packet_tx_head_len) {
   12860:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
   12864:	b911      	cbnz	r1, 1286c <prepare_pdu_data_tx+0x4c>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   12866:	7851      	ldrb	r1, [r2, #1]
   12868:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   1286c:	b126      	cbz	r6, 12878 <prepare_pdu_data_tx+0x58>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1286e:	5d99      	ldrb	r1, [r3, r6]
   12870:	2501      	movs	r5, #1
   12872:	f365 0101 	bfi	r1, r5, #0, #2
   12876:	5599      	strb	r1, [r3, r6]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   12878:	f890 5150 	ldrb.w	r5, [r0, #336]	; 0x150
				    conn->packet_tx_head_offset;
   1287c:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
		_pdu_data_tx->len = conn->packet_tx_head_len -
   12880:	1a6d      	subs	r5, r5, r1
   12882:	b2ed      	uxtb	r5, r5
   12884:	7055      	strb	r5, [r2, #1]
		_pdu_data_tx->md = 0;
   12886:	5d99      	ldrb	r1, [r3, r6]
   12888:	f36f 1104 	bfc	r1, #4, #1
   1288c:	5599      	strb	r1, [r3, r6]
		switch (conn->phy_tx_time) {
   1288e:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   12892:	f001 0107 	and.w	r1, r1, #7
   12896:	2902      	cmp	r1, #2
   12898:	d02d      	beq.n	128f6 <prepare_pdu_data_tx+0xd6>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   1289a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   1289c:	08c9      	lsrs	r1, r1, #3
   1289e:	390a      	subs	r1, #10
   128a0:	b289      	uxth	r1, r1
		if (conn->enc_tx) {
   128a2:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
   128a6:	f017 0f20 	tst.w	r7, #32
   128aa:	d001      	beq.n	128b0 <prepare_pdu_data_tx+0x90>
			max_tx_octets -= 4;
   128ac:	3904      	subs	r1, #4
   128ae:	b289      	uxth	r1, r1
		if (max_tx_octets > conn->max_tx_octets) {
   128b0:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
   128b2:	42b9      	cmp	r1, r7
   128b4:	d800      	bhi.n	128b8 <prepare_pdu_data_tx+0x98>
   128b6:	460f      	mov	r7, r1
		if (_pdu_data_tx->len > max_tx_octets) {
   128b8:	b2ad      	uxth	r5, r5
   128ba:	42af      	cmp	r7, r5
   128bc:	d204      	bcs.n	128c8 <prepare_pdu_data_tx+0xa8>
			_pdu_data_tx->len = max_tx_octets;
   128be:	7057      	strb	r7, [r2, #1]
			_pdu_data_tx->md = 1;
   128c0:	5d99      	ldrb	r1, [r3, r6]
   128c2:	f041 0110 	orr.w	r1, r1, #16
   128c6:	5599      	strb	r1, [r3, r6]
		if (conn->pkt_tx_head->next) {
   128c8:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   128cc:	6809      	ldr	r1, [r1, #0]
   128ce:	b119      	cbz	r1, 128d8 <prepare_pdu_data_tx+0xb8>
			_pdu_data_tx->md = 1;
   128d0:	5d99      	ldrb	r1, [r3, r6]
   128d2:	f041 0110 	orr.w	r1, r1, #16
   128d6:	5599      	strb	r1, [r3, r6]
		if (!conn->pkt_tx_ctrl &&
   128d8:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   128dc:	2b00      	cmp	r3, #0
   128de:	d1b3      	bne.n	12848 <prepare_pdu_data_tx+0x28>
		    (conn->pkt_tx_head != conn->pkt_tx_data)) {
   128e0:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   128e4:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl &&
   128e8:	428b      	cmp	r3, r1
   128ea:	d0ad      	beq.n	12848 <prepare_pdu_data_tx+0x28>
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   128ec:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   128f0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
   128f4:	e7a8      	b.n	12848 <prepare_pdu_data_tx+0x28>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   128f6:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   128f8:	0889      	lsrs	r1, r1, #2
   128fa:	390b      	subs	r1, #11
   128fc:	b289      	uxth	r1, r1
			break;
   128fe:	e7d0      	b.n	128a2 <prepare_pdu_data_tx+0x82>

00012900 <version_ind_send>:
{
   12900:	b510      	push	{r4, lr}
   12902:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12904:	4810      	ldr	r0, [pc, #64]	; (12948 <version_ind_send+0x48>)
   12906:	f7fc fd0e 	bl	f326 <mem_acquire>
	LL_ASSERT(node_tx);
   1290a:	b1b8      	cbz	r0, 1293c <version_ind_send+0x3c>
   1290c:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1290e:	7903      	ldrb	r3, [r0, #4]
   12910:	f043 0303 	orr.w	r3, r3, #3
   12914:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   12916:	2306      	movs	r3, #6
   12918:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1291a:	230c      	movs	r3, #12
   1291c:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   1291e:	2309      	movs	r3, #9
   12920:	7203      	strb	r3, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   12922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12926:	7243      	strb	r3, [r0, #9]
   12928:	7283      	strb	r3, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   1292a:	72c3      	strb	r3, [r0, #11]
   1292c:	7303      	strb	r3, [r0, #12]
	ctrl_tx_sec_enqueue(conn, node_tx);
   1292e:	4620      	mov	r0, r4
   12930:	f7fe ffcb 	bl	118ca <ctrl_tx_sec_enqueue>
	empty_tx_enqueue(conn);
   12934:	4620      	mov	r0, r4
   12936:	f7ff ff55 	bl	127e4 <empty_tx_enqueue>
   1293a:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   1293c:	4040      	eors	r0, r0
   1293e:	f380 8811 	msr	BASEPRI, r0
   12942:	f04f 0004 	mov.w	r0, #4
   12946:	df02      	svc	2
   12948:	2000162c 	.word	0x2000162c

0001294c <tx_packet_set>:
{
   1294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1294e:	4605      	mov	r5, r0
   12950:	460f      	mov	r7, r1
	max_tx_octets = conn->max_tx_octets;
   12952:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
   12954:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   12958:	f3c1 04c2 	ubfx	r4, r1, #3, #3
	radio_phy_set(phy, flags);
   1295c:	09c9      	lsrs	r1, r1, #7
   1295e:	4620      	mov	r0, r4
   12960:	f7fc fe5e 	bl	f620 <radio_phy_set>
	if (conn->enc_tx) {
   12964:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12968:	f013 0f20 	tst.w	r3, #32
   1296c:	d10a      	bne.n	12984 <tx_packet_set+0x38>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1296e:	0062      	lsls	r2, r4, #1
   12970:	f042 0201 	orr.w	r2, r2, #1
   12974:	b2f1      	uxtb	r1, r6
   12976:	2008      	movs	r0, #8
   12978:	f7fc fe96 	bl	f6a8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1297c:	4638      	mov	r0, r7
   1297e:	f7fc fec9 	bl	f714 <radio_pkt_tx_set>
   12982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
   12984:	0062      	lsls	r2, r4, #1
   12986:	1d31      	adds	r1, r6, #4
   12988:	f042 0201 	orr.w	r2, r2, #1
   1298c:	b2c9      	uxtb	r1, r1
   1298e:	2008      	movs	r0, #8
   12990:	f7fc fe8a 	bl	f6a8 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
   12994:	4639      	mov	r1, r7
   12996:	f505 708d 	add.w	r0, r5, #282	; 0x11a
   1299a:	f7fd f8f1 	bl	fb80 <radio_ccm_tx_pkt_set>
   1299e:	f7fc feb9 	bl	f714 <radio_pkt_tx_set>
   129a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000129a4 <chan_set>:
{
   129a4:	b510      	push	{r4, lr}
   129a6:	4604      	mov	r4, r0
	switch (chan) {
   129a8:	2826      	cmp	r0, #38	; 0x26
   129aa:	d013      	beq.n	129d4 <chan_set+0x30>
   129ac:	2827      	cmp	r0, #39	; 0x27
   129ae:	d015      	beq.n	129dc <chan_set+0x38>
   129b0:	2825      	cmp	r0, #37	; 0x25
   129b2:	d008      	beq.n	129c6 <chan_set+0x22>
		if (chan < 11) {
   129b4:	280a      	cmp	r0, #10
   129b6:	d915      	bls.n	129e4 <chan_set+0x40>
		} else if (chan < 40) {
   129b8:	2827      	cmp	r0, #39	; 0x27
   129ba:	d818      	bhi.n	129ee <chan_set+0x4a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   129bc:	3003      	adds	r0, #3
   129be:	0040      	lsls	r0, r0, #1
   129c0:	f7fc fe42 	bl	f648 <radio_freq_chan_set>
   129c4:	e002      	b.n	129cc <chan_set+0x28>
		radio_freq_chan_set(2);
   129c6:	2002      	movs	r0, #2
   129c8:	f7fc fe3e 	bl	f648 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   129cc:	4620      	mov	r0, r4
   129ce:	f7fc fe41 	bl	f654 <radio_whiten_iv_set>
   129d2:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(26);
   129d4:	201a      	movs	r0, #26
   129d6:	f7fc fe37 	bl	f648 <radio_freq_chan_set>
		break;
   129da:	e7f7      	b.n	129cc <chan_set+0x28>
		radio_freq_chan_set(80);
   129dc:	2050      	movs	r0, #80	; 0x50
   129de:	f7fc fe33 	bl	f648 <radio_freq_chan_set>
		break;
   129e2:	e7f3      	b.n	129cc <chan_set+0x28>
			radio_freq_chan_set(4 + (2 * chan));
   129e4:	3002      	adds	r0, #2
   129e6:	0040      	lsls	r0, r0, #1
   129e8:	f7fc fe2e 	bl	f648 <radio_freq_chan_set>
   129ec:	e7ee      	b.n	129cc <chan_set+0x28>
			LL_ASSERT(0);
   129ee:	4040      	eors	r0, r0
   129f0:	f380 8811 	msr	BASEPRI, r0
   129f4:	f04f 0004 	mov.w	r0, #4
   129f8:	df02      	svc	2
	...

000129fc <adv_setup>:
{
   129fc:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
   129fe:	4a39      	ldr	r2, [pc, #228]	; (12ae4 <adv_setup+0xe8>)
   12a00:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
	    _radio.advertiser.adv_data.last) {
   12a04:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
	if (_radio.advertiser.adv_data.first !=
   12a08:	4293      	cmp	r3, r2
   12a0a:	d037      	beq.n	12a7c <adv_setup+0x80>
		first = _radio.advertiser.adv_data.first + 1;
   12a0c:	3301      	adds	r3, #1
   12a0e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   12a10:	2b02      	cmp	r3, #2
   12a12:	d031      	beq.n	12a78 <adv_setup+0x7c>
		_radio.advertiser.adv_data.first = first;
   12a14:	4a33      	ldr	r2, [pc, #204]	; (12ae4 <adv_setup+0xe8>)
   12a16:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
		upd = 1;
   12a1a:	2101      	movs	r1, #1
	if (_radio.advertiser.scan_data.first != _radio.
   12a1c:	4a31      	ldr	r2, [pc, #196]	; (12ae4 <adv_setup+0xe8>)
   12a1e:	f892 30c5 	ldrb.w	r3, [r2, #197]	; 0xc5
	    advertiser.scan_data.last) {
   12a22:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
	if (_radio.advertiser.scan_data.first != _radio.
   12a26:	4293      	cmp	r3, r2
   12a28:	d007      	beq.n	12a3a <adv_setup+0x3e>
		first = _radio.advertiser.scan_data.first + 1;
   12a2a:	3301      	adds	r3, #1
   12a2c:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   12a2e:	2b02      	cmp	r3, #2
   12a30:	d026      	beq.n	12a80 <adv_setup+0x84>
		_radio.advertiser.scan_data.first = first;
   12a32:	4a2c      	ldr	r2, [pc, #176]	; (12ae4 <adv_setup+0xe8>)
   12a34:	f882 30c5 	strb.w	r3, [r2, #197]	; 0xc5
		upd = 1;
   12a38:	2101      	movs	r1, #1
			_radio.advertiser.adv_data.first];
   12a3a:	4c2a      	ldr	r4, [pc, #168]	; (12ae4 <adv_setup+0xe8>)
   12a3c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
	pdu = (struct pdu_adv *)
   12a40:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   12a44:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   12a48:	3320      	adds	r3, #32
   12a4a:	441c      	add	r4, r3
   12a4c:	1de5      	adds	r5, r4, #7
	if (upd) {
   12a4e:	b9c9      	cbnz	r1, 12a84 <adv_setup+0x88>
	radio_pkt_tx_set(pdu);
   12a50:	4628      	mov	r0, r5
   12a52:	f7fc fe5f 	bl	f714 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   12a56:	79e3      	ldrb	r3, [r4, #7]
   12a58:	f003 030f 	and.w	r3, r3, #15
   12a5c:	2b02      	cmp	r3, #2
   12a5e:	d020      	beq.n	12aa2 <adv_setup+0xa6>
   12a60:	2b07      	cmp	r3, #7
   12a62:	d01e      	beq.n	12aa2 <adv_setup+0xa6>
		_radio.state = STATE_TX;
   12a64:	2202      	movs	r2, #2
   12a66:	4b1f      	ldr	r3, [pc, #124]	; (12ae4 <adv_setup+0xe8>)
   12a68:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   12a6a:	2096      	movs	r0, #150	; 0x96
   12a6c:	f7fc ff78 	bl	f960 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   12a70:	2000      	movs	r0, #0
   12a72:	f7fc fec3 	bl	f7fc <radio_switch_complete_and_rx>
   12a76:	e019      	b.n	12aac <adv_setup+0xb0>
			first = 0;
   12a78:	2300      	movs	r3, #0
   12a7a:	e7cb      	b.n	12a14 <adv_setup+0x18>
	u8_t upd = 0;
   12a7c:	2100      	movs	r1, #0
   12a7e:	e7cd      	b.n	12a1c <adv_setup+0x20>
			first = 0;
   12a80:	2300      	movs	r3, #0
   12a82:	e7d6      	b.n	12a32 <adv_setup+0x36>
			_radio.advertiser.scan_data.first];
   12a84:	4817      	ldr	r0, [pc, #92]	; (12ae4 <adv_setup+0xe8>)
   12a86:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
   12a8a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   12a8e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   12a92:	3370      	adds	r3, #112	; 0x70
   12a94:	4418      	add	r0, r3
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
   12a96:	2206      	movs	r2, #6
   12a98:	1ca9      	adds	r1, r5, #2
   12a9a:	3009      	adds	r0, #9
   12a9c:	f7ed fc10 	bl	2c0 <memcpy>
   12aa0:	e7d6      	b.n	12a50 <adv_setup+0x54>
		_radio.state = STATE_CLOSE;
   12aa2:	2203      	movs	r2, #3
   12aa4:	4b0f      	ldr	r3, [pc, #60]	; (12ae4 <adv_setup+0xe8>)
   12aa6:	741a      	strb	r2, [r3, #16]
		radio_switch_complete_and_disable();
   12aa8:	f7fc feb8 	bl	f81c <radio_switch_complete_and_disable>
	bitmap = _radio.advertiser.chan_map_current;
   12aac:	4b0d      	ldr	r3, [pc, #52]	; (12ae4 <adv_setup+0xe8>)
   12aae:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   12ab2:	f3c2 0142 	ubfx	r1, r2, #1, #3
   12ab6:	b2ca      	uxtb	r2, r1
   12ab8:	4613      	mov	r3, r2
	chan = 0;
   12aba:	2000      	movs	r0, #0
	while ((bitmap & 0x01) == 0) {
   12abc:	e002      	b.n	12ac4 <adv_setup+0xc8>
		chan++;
   12abe:	3001      	adds	r0, #1
   12ac0:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
   12ac2:	085b      	lsrs	r3, r3, #1
	while ((bitmap & 0x01) == 0) {
   12ac4:	f013 0f01 	tst.w	r3, #1
   12ac8:	d0f9      	beq.n	12abe <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
   12aca:	3a01      	subs	r2, #1
	_radio.advertiser.chan_map_current &=
   12acc:	4b05      	ldr	r3, [pc, #20]	; (12ae4 <adv_setup+0xe8>)
   12ace:	400a      	ands	r2, r1
   12ad0:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   12ad4:	f362 0143 	bfi	r1, r2, #1, #3
   12ad8:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	chan_set(37 + chan);
   12adc:	3025      	adds	r0, #37	; 0x25
   12ade:	f7ff ff61 	bl	129a4 <chan_set>
   12ae2:	bd38      	pop	{r3, r4, r5, pc}
   12ae4:	200014d4 	.word	0x200014d4

00012ae8 <ticker_stop_adv_stop>:
	if (status != TICKER_STATUS_SUCCESS) {
   12ae8:	b158      	cbz	r0, 12b02 <ticker_stop_adv_stop+0x1a>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   12aea:	4b6c      	ldr	r3, [pc, #432]	; (12c9c <ticker_stop_adv_stop+0x1b4>)
   12aec:	7b9b      	ldrb	r3, [r3, #14]
   12aee:	b2db      	uxtb	r3, r3
   12af0:	2b05      	cmp	r3, #5
   12af2:	d100      	bne.n	12af6 <ticker_stop_adv_stop+0xe>
   12af4:	4770      	bx	lr
   12af6:	4040      	eors	r0, r0
   12af8:	f380 8811 	msr	BASEPRI, r0
   12afc:	f04f 0004 	mov.w	r0, #4
   12b00:	df02      	svc	2
{
   12b02:	b500      	push	{lr}
   12b04:	b085      	sub	sp, #20
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   12b06:	4b65      	ldr	r3, [pc, #404]	; (12c9c <ticker_stop_adv_stop+0x1b4>)
   12b08:	7b1b      	ldrb	r3, [r3, #12]
   12b0a:	b2db      	uxtb	r3, r3
   12b0c:	2b05      	cmp	r3, #5
   12b0e:	d010      	beq.n	12b32 <ticker_stop_adv_stop+0x4a>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   12b10:	4b62      	ldr	r3, [pc, #392]	; (12c9c <ticker_stop_adv_stop+0x1b4>)
   12b12:	7b5b      	ldrb	r3, [r3, #13]
   12b14:	b2db      	uxtb	r3, r3
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   12b16:	2b05      	cmp	r3, #5
   12b18:	d00b      	beq.n	12b32 <ticker_stop_adv_stop+0x4a>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12b1a:	4b61      	ldr	r3, [pc, #388]	; (12ca0 <ticker_stop_adv_stop+0x1b8>)
   12b1c:	2200      	movs	r2, #0
   12b1e:	4611      	mov	r1, r2
   12b20:	2001      	movs	r0, #1
   12b22:	f7fc fabf 	bl	f0a4 <mayfly_enqueue>
	LL_ASSERT(!retval);
   12b26:	2800      	cmp	r0, #0
   12b28:	f040 80b1 	bne.w	12c8e <ticker_stop_adv_stop+0x1a6>
}
   12b2c:	b005      	add	sp, #20
   12b2e:	f85d fb04 	ldr.w	pc, [sp], #4
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12b32:	ab04      	add	r3, sp, #16
   12b34:	2202      	movs	r2, #2
   12b36:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12b3a:	9300      	str	r3, [sp, #0]
   12b3c:	4b59      	ldr	r3, [pc, #356]	; (12ca4 <ticker_stop_adv_stop+0x1bc>)
   12b3e:	2200      	movs	r2, #0
   12b40:	2101      	movs	r1, #1
   12b42:	4610      	mov	r0, r2
   12b44:	f7fe f95c 	bl	10e00 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   12b48:	2802      	cmp	r0, #2
   12b4a:	d02c      	beq.n	12ba6 <ticker_stop_adv_stop+0xbe>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   12b4c:	9b02      	ldr	r3, [sp, #8]
   12b4e:	2b00      	cmp	r3, #0
   12b50:	d17e      	bne.n	12c50 <ticker_stop_adv_stop+0x168>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12b52:	2302      	movs	r3, #2
   12b54:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   12b56:	4b51      	ldr	r3, [pc, #324]	; (12c9c <ticker_stop_adv_stop+0x1b4>)
   12b58:	7b1b      	ldrb	r3, [r3, #12]
   12b5a:	2b00      	cmp	r3, #0
   12b5c:	d031      	beq.n	12bc2 <ticker_stop_adv_stop+0xda>
		_radio.ticker_id_prepare = 0;
   12b5e:	2000      	movs	r0, #0
   12b60:	4b4e      	ldr	r3, [pc, #312]	; (12c9c <ticker_stop_adv_stop+0x1b4>)
   12b62:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12b64:	ab03      	add	r3, sp, #12
   12b66:	9300      	str	r3, [sp, #0]
   12b68:	4b4e      	ldr	r3, [pc, #312]	; (12ca4 <ticker_stop_adv_stop+0x1bc>)
   12b6a:	2201      	movs	r2, #1
   12b6c:	4611      	mov	r1, r2
   12b6e:	f7fe f947 	bl	10e00 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   12b72:	2802      	cmp	r0, #2
   12b74:	d02b      	beq.n	12bce <ticker_stop_adv_stop+0xe6>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   12b76:	9b03      	ldr	r3, [sp, #12]
   12b78:	2b00      	cmp	r3, #0
   12b7a:	d144      	bne.n	12c06 <ticker_stop_adv_stop+0x11e>
			if (_radio.advertiser.hdr.ticks_active_to_start >
   12b7c:	4b47      	ldr	r3, [pc, #284]	; (12c9c <ticker_stop_adv_stop+0x1b4>)
   12b7e:	699a      	ldr	r2, [r3, #24]
			    (_radio.advertiser.hdr.ticks_xtal_to_start &
   12b80:	695b      	ldr	r3, [r3, #20]
   12b82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   12b86:	429a      	cmp	r2, r3
   12b88:	d92f      	bls.n	12bea <ticker_stop_adv_stop+0x102>
				retval = mayfly_enqueue(
   12b8a:	4b47      	ldr	r3, [pc, #284]	; (12ca8 <ticker_stop_adv_stop+0x1c0>)
   12b8c:	2200      	movs	r2, #0
   12b8e:	4611      	mov	r1, r2
   12b90:	2001      	movs	r0, #1
   12b92:	f7fc fa87 	bl	f0a4 <mayfly_enqueue>
				LL_ASSERT(!retval);
   12b96:	2800      	cmp	r0, #0
   12b98:	d0bf      	beq.n	12b1a <ticker_stop_adv_stop+0x32>
   12b9a:	4040      	eors	r0, r0
   12b9c:	f380 8811 	msr	BASEPRI, r0
   12ba0:	f04f 0004 	mov.w	r0, #4
   12ba4:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   12ba6:	2201      	movs	r2, #1
   12ba8:	4611      	mov	r1, r2
   12baa:	4610      	mov	r0, r2
   12bac:	f7fc fa3c 	bl	f028 <mayfly_enable>
   12bb0:	e003      	b.n	12bba <ticker_stop_adv_stop+0xd2>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12bb2:	2101      	movs	r1, #1
   12bb4:	2000      	movs	r0, #0
   12bb6:	f7fe f9df 	bl	10f78 <ticker_job_sched>
		while (ret_cb == TICKER_STATUS_BUSY) {
   12bba:	9b02      	ldr	r3, [sp, #8]
   12bbc:	2b02      	cmp	r3, #2
   12bbe:	d0f8      	beq.n	12bb2 <ticker_stop_adv_stop+0xca>
   12bc0:	e7c4      	b.n	12b4c <ticker_stop_adv_stop+0x64>
		LL_ASSERT(_radio.ticker_id_prepare);
   12bc2:	4040      	eors	r0, r0
   12bc4:	f380 8811 	msr	BASEPRI, r0
   12bc8:	f04f 0004 	mov.w	r0, #4
   12bcc:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   12bce:	2201      	movs	r2, #1
   12bd0:	4611      	mov	r1, r2
   12bd2:	4610      	mov	r0, r2
   12bd4:	f7fc fa28 	bl	f028 <mayfly_enable>
   12bd8:	e003      	b.n	12be2 <ticker_stop_adv_stop+0xfa>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12bda:	2101      	movs	r1, #1
   12bdc:	2000      	movs	r0, #0
   12bde:	f7fe f9cb 	bl	10f78 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12be2:	9b03      	ldr	r3, [sp, #12]
   12be4:	2b02      	cmp	r3, #2
   12be6:	d0f8      	beq.n	12bda <ticker_stop_adv_stop+0xf2>
   12be8:	e7c5      	b.n	12b76 <ticker_stop_adv_stop+0x8e>
				retval = mayfly_enqueue(
   12bea:	4b30      	ldr	r3, [pc, #192]	; (12cac <ticker_stop_adv_stop+0x1c4>)
   12bec:	2200      	movs	r2, #0
   12bee:	4611      	mov	r1, r2
   12bf0:	2001      	movs	r0, #1
   12bf2:	f7fc fa57 	bl	f0a4 <mayfly_enqueue>
				LL_ASSERT(!retval);
   12bf6:	2800      	cmp	r0, #0
   12bf8:	d08f      	beq.n	12b1a <ticker_stop_adv_stop+0x32>
   12bfa:	4040      	eors	r0, r0
   12bfc:	f380 8811 	msr	BASEPRI, r0
   12c00:	f04f 0004 	mov.w	r0, #4
   12c04:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12c06:	9b03      	ldr	r3, [sp, #12]
   12c08:	2b01      	cmp	r3, #1
   12c0a:	d11b      	bne.n	12c44 <ticker_stop_adv_stop+0x15c>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12c0c:	4b26      	ldr	r3, [pc, #152]	; (12ca8 <ticker_stop_adv_stop+0x1c0>)
   12c0e:	2200      	movs	r2, #0
   12c10:	4611      	mov	r1, r2
   12c12:	2001      	movs	r0, #1
   12c14:	f7fc fa46 	bl	f0a4 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12c18:	b970      	cbnz	r0, 12c38 <ticker_stop_adv_stop+0x150>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12c1a:	4b24      	ldr	r3, [pc, #144]	; (12cac <ticker_stop_adv_stop+0x1c4>)
   12c1c:	2200      	movs	r2, #0
   12c1e:	4611      	mov	r1, r2
   12c20:	2001      	movs	r0, #1
   12c22:	f7fc fa3f 	bl	f0a4 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12c26:	2800      	cmp	r0, #0
   12c28:	f43f af77 	beq.w	12b1a <ticker_stop_adv_stop+0x32>
   12c2c:	4040      	eors	r0, r0
   12c2e:	f380 8811 	msr	BASEPRI, r0
   12c32:	f04f 0004 	mov.w	r0, #4
   12c36:	df02      	svc	2
			LL_ASSERT(!retval);
   12c38:	4040      	eors	r0, r0
   12c3a:	f380 8811 	msr	BASEPRI, r0
   12c3e:	f04f 0004 	mov.w	r0, #4
   12c42:	df02      	svc	2
			LL_ASSERT(0);
   12c44:	4040      	eors	r0, r0
   12c46:	f380 8811 	msr	BASEPRI, r0
   12c4a:	f04f 0004 	mov.w	r0, #4
   12c4e:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12c50:	9b02      	ldr	r3, [sp, #8]
   12c52:	2b01      	cmp	r3, #1
   12c54:	d115      	bne.n	12c82 <ticker_stop_adv_stop+0x19a>
		if (_radio.role != ROLE_NONE) {
   12c56:	4b11      	ldr	r3, [pc, #68]	; (12c9c <ticker_stop_adv_stop+0x1b4>)
   12c58:	7bdb      	ldrb	r3, [r3, #15]
   12c5a:	2b00      	cmp	r3, #0
   12c5c:	f43f af5d 	beq.w	12b1a <ticker_stop_adv_stop+0x32>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   12c60:	4b13      	ldr	r3, [pc, #76]	; (12cb0 <ticker_stop_adv_stop+0x1c8>)
   12c62:	2204      	movs	r2, #4
   12c64:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12c66:	2200      	movs	r2, #0
   12c68:	4611      	mov	r1, r2
   12c6a:	2001      	movs	r0, #1
   12c6c:	f7fc fa1a 	bl	f0a4 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12c70:	2800      	cmp	r0, #0
   12c72:	f43f af52 	beq.w	12b1a <ticker_stop_adv_stop+0x32>
   12c76:	4040      	eors	r0, r0
   12c78:	f380 8811 	msr	BASEPRI, r0
   12c7c:	f04f 0004 	mov.w	r0, #4
   12c80:	df02      	svc	2
		LL_ASSERT(0);
   12c82:	4040      	eors	r0, r0
   12c84:	f380 8811 	msr	BASEPRI, r0
   12c88:	f04f 0004 	mov.w	r0, #4
   12c8c:	df02      	svc	2
	LL_ASSERT(!retval);
   12c8e:	4040      	eors	r0, r0
   12c90:	f380 8811 	msr	BASEPRI, r0
   12c94:	f04f 0004 	mov.w	r0, #4
   12c98:	df02      	svc	2
   12c9a:	bf00      	nop
   12c9c:	200014d4 	.word	0x200014d4
   12ca0:	2000c208 	.word	0x2000c208
   12ca4:	000116ad 	.word	0x000116ad
   12ca8:	2000c238 	.word	0x2000c238
   12cac:	2000c2f8 	.word	0x2000c2f8
   12cb0:	2000c268 	.word	0x2000c268
   12cb4:	00000000 	.word	0x00000000

00012cb8 <sched_free_win_offset_calc>:
{
   12cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cbc:	b091      	sub	sp, #68	; 0x44
   12cbe:	9009      	str	r0, [sp, #36]	; 0x24
   12cc0:	910a      	str	r1, [sp, #40]	; 0x28
   12cc2:	9207      	str	r2, [sp, #28]
   12cc4:	469b      	mov	fp, r3
   12cc6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   12cc8:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
	if (conn_curr->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   12ccc:	6803      	ldr	r3, [r0, #0]
   12cce:	2b00      	cmp	r3, #0
   12cd0:	db0f      	blt.n	12cf2 <sched_free_win_offset_calc+0x3a>
	u32_t ticks_prepare_reduced = 0;
   12cd2:	2300      	movs	r3, #0
   12cd4:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12cd6:	27ff      	movs	r7, #255	; 0xff
   12cd8:	f88d 7037 	strb.w	r7, [sp, #55]	; 0x37
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12cdc:	2300      	movs	r3, #0
   12cde:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   12ce2:	930f      	str	r3, [sp, #60]	; 0x3c
   12ce4:	930e      	str	r3, [sp, #56]	; 0x38
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12ce6:	461c      	mov	r4, r3
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12ce8:	9706      	str	r7, [sp, #24]
	ticks_slot_prev_abs = 0;
   12cea:	461e      	mov	r6, r3
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   12cec:	9308      	str	r3, [sp, #32]
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12cee:	4698      	mov	r8, r3
   12cf0:	e06d      	b.n	12dce <sched_free_win_offset_calc+0x116>
				conn_curr->hdr.ticks_preempt_to_start;
   12cf2:	6881      	ldr	r1, [r0, #8]
				conn_curr->hdr.ticks_active_to_start :
   12cf4:	6842      	ldr	r2, [r0, #4]
		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
   12cf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12cfa:	4291      	cmp	r1, r2
   12cfc:	bf2c      	ite	cs
   12cfe:	1a5b      	subcs	r3, r3, r1
   12d00:	1a9b      	subcc	r3, r3, r2
   12d02:	930b      	str	r3, [sp, #44]	; 0x2c
   12d04:	e7e7      	b.n	12cd6 <sched_free_win_offset_calc+0x1e>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12d06:	2101      	movs	r1, #1
   12d08:	2000      	movs	r0, #0
   12d0a:	f7fe f935 	bl	10f78 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12d10:	2b02      	cmp	r3, #2
   12d12:	d0f8      	beq.n	12d06 <sched_free_win_offset_calc+0x4e>
   12d14:	e06c      	b.n	12df0 <sched_free_win_offset_calc+0x138>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12d16:	4040      	eors	r0, r0
   12d18:	f380 8811 	msr	BASEPRI, r0
   12d1c:	f04f 0004 	mov.w	r0, #4
   12d20:	df02      	svc	2
			LL_ASSERT(0);
   12d22:	4040      	eors	r0, r0
   12d24:	f380 8811 	msr	BASEPRI, r0
   12d28:	f04f 0004 	mov.w	r0, #4
   12d2c:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   12d2e:	f8d9 1008 	ldr.w	r1, [r9, #8]
					conn->hdr.ticks_active_to_start :
   12d32:	f8d9 2004 	ldr.w	r2, [r9, #4]
					((conn->hdr.ticks_xtal_to_start &
   12d36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   12d3a:	4291      	cmp	r1, r2
   12d3c:	bf2c      	ite	cs
   12d3e:	ebc3 0301 	rsbcs	r3, r3, r1
   12d42:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   12d46:	9a05      	ldr	r2, [sp, #20]
   12d48:	441a      	add	r2, r3
   12d4a:	9205      	str	r2, [sp, #20]
   12d4c:	e085      	b.n	12e5a <sched_free_win_offset_calc+0x1a2>
					memcpy(win_offset +
   12d4e:	2202      	movs	r2, #2
   12d50:	a90d      	add	r1, sp, #52	; 0x34
   12d52:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   12d56:	f7ed fab3 	bl	2c0 <memcpy>
					offset_index++;
   12d5a:	3401      	adds	r4, #1
   12d5c:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
   12d5e:	3728      	adds	r7, #40	; 0x28
				while ((offset_index < *offset_max) &&
   12d60:	782b      	ldrb	r3, [r5, #0]
   12d62:	429c      	cmp	r4, r3
   12d64:	d21f      	bcs.n	12da6 <sched_free_win_offset_calc+0xee>
				       (ticker_ticks_diff_get(ticks_to_expire_normal,
   12d66:	4639      	mov	r1, r7
   12d68:	9805      	ldr	r0, [sp, #20]
   12d6a:	f7fe f919 	bl	10fa0 <ticker_ticks_diff_get>
					 conn->hdr.ticks_slot))) {
   12d6e:	f8d9 300c 	ldr.w	r3, [r9, #12]
							    625 + 1250) +
   12d72:	4433      	add	r3, r6
   12d74:	3364      	adds	r3, #100	; 0x64
				while ((offset_index < *offset_max) &&
   12d76:	4298      	cmp	r0, r3
   12d78:	d315      	bcc.n	12da6 <sched_free_win_offset_calc+0xee>
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12d7a:	19bb      	adds	r3, r7, r6
   12d7c:	485a      	ldr	r0, [pc, #360]	; (12ee8 <sched_free_win_offset_calc+0x230>)
   12d7e:	fba3 0100 	umull	r0, r1, r3, r0
   12d82:	2207      	movs	r2, #7
   12d84:	fb02 1103 	mla	r1, r2, r3, r1
   12d88:	a355      	add	r3, pc, #340	; (adr r3, 12ee0 <sched_free_win_offset_calc+0x228>)
   12d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   12d8e:	f7ee f9b5 	bl	10fc <__aeabi_uldivmod>
								   ticks_slot_prev_abs) / 1250;
   12d92:	4b56      	ldr	r3, [pc, #344]	; (12eec <sched_free_win_offset_calc+0x234>)
   12d94:	fba3 3000 	umull	r3, r0, r3, r0
					_win_offset =
   12d98:	f3c0 208f 	ubfx	r0, r0, #10, #16
   12d9c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
					if (_win_offset >= conn_interval) {
   12da0:	4558      	cmp	r0, fp
   12da2:	d3d4      	bcc.n	12d4e <sched_free_win_offset_calc+0x96>
						ticks_to_expire_prev = 0;
   12da4:	2700      	movs	r7, #0
				*ticks_to_offset_next = ticks_to_expire_prev;
   12da6:	9b07      	ldr	r3, [sp, #28]
   12da8:	601f      	str	r7, [r3, #0]
				if (_win_offset >= conn_interval) {
   12daa:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   12dae:	459b      	cmp	fp, r3
   12db0:	d95e      	bls.n	12e70 <sched_free_win_offset_calc+0x1b8>
			ticks_anchor_prev = ticks_anchor;
   12db2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
			ticker_id_prev = ticker_id;
   12db6:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
				conn->hdr.ticks_slot;
   12dba:	f8d9 600c 	ldr.w	r6, [r9, #12]
			ticks_slot_prev_abs =
   12dbe:	3664      	adds	r6, #100	; 0x64
			ticks_to_expire_prev = ticks_to_expire_normal;
   12dc0:	9b05      	ldr	r3, [sp, #20]
   12dc2:	9308      	str	r3, [sp, #32]
   12dc4:	e000      	b.n	12dc8 <sched_free_win_offset_calc+0x110>
			ticker_id_other = ticker_id;
   12dc6:	9206      	str	r2, [sp, #24]
	} while (offset_index < *offset_max);
   12dc8:	782b      	ldrb	r3, [r5, #0]
   12dca:	429c      	cmp	r4, r3
   12dcc:	d251      	bcs.n	12e72 <sched_free_win_offset_calc+0x1ba>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12dce:	2302      	movs	r3, #2
   12dd0:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   12dd2:	ab0c      	add	r3, sp, #48	; 0x30
   12dd4:	9302      	str	r3, [sp, #8]
   12dd6:	4b46      	ldr	r3, [pc, #280]	; (12ef0 <sched_free_win_offset_calc+0x238>)
   12dd8:	9301      	str	r3, [sp, #4]
   12dda:	ab0e      	add	r3, sp, #56	; 0x38
   12ddc:	9300      	str	r3, [sp, #0]
   12dde:	ab0f      	add	r3, sp, #60	; 0x3c
   12de0:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   12de4:	2101      	movs	r1, #1
   12de6:	2000      	movs	r0, #0
   12de8:	f7fe f846 	bl	10e78 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   12dec:	2802      	cmp	r0, #2
   12dee:	d08e      	beq.n	12d0e <sched_free_win_offset_calc+0x56>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12df0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12df2:	2b00      	cmp	r3, #0
   12df4:	d18f      	bne.n	12d16 <sched_free_win_offset_calc+0x5e>
		if (ticker_id == 0xff) {
   12df6:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   12dfa:	2aff      	cmp	r2, #255	; 0xff
   12dfc:	d039      	beq.n	12e72 <sched_free_win_offset_calc+0x1ba>
		if ((ticker_id_prev != 0xff) &&
   12dfe:	2fff      	cmp	r7, #255	; 0xff
   12e00:	d002      	beq.n	12e08 <sched_free_win_offset_calc+0x150>
		    (ticks_anchor != ticks_anchor_prev)) {
   12e02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if ((ticker_id_prev != 0xff) &&
   12e04:	4598      	cmp	r8, r3
   12e06:	d18c      	bne.n	12d22 <sched_free_win_offset_calc+0x6a>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12e08:	2a05      	cmp	r2, #5
   12e0a:	d9dd      	bls.n	12dc8 <sched_free_win_offset_calc+0x110>
				  _radio.connection_count)) {
   12e0c:	4b39      	ldr	r3, [pc, #228]	; (12ef4 <sched_free_win_offset_calc+0x23c>)
   12e0e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   12e12:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12e14:	429a      	cmp	r2, r3
   12e16:	dad7      	bge.n	12dc8 <sched_free_win_offset_calc+0x110>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
   12e18:	2a06      	cmp	r2, #6
   12e1a:	d9d4      	bls.n	12dc6 <sched_free_win_offset_calc+0x10e>
		if (ticker_id_other != 0xFF) {
   12e1c:	9b06      	ldr	r3, [sp, #24]
   12e1e:	2bff      	cmp	r3, #255	; 0xff
   12e20:	d127      	bne.n	12e72 <sched_free_win_offset_calc+0x1ba>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12e22:	3a07      	subs	r2, #7
   12e24:	b292      	uxth	r2, r2
   12e26:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12e2a:	4b32      	ldr	r3, [pc, #200]	; (12ef4 <sched_free_win_offset_calc+0x23c>)
   12e2c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12e30:	f7fc fab6 	bl	f3a0 <mem_get>
   12e34:	4681      	mov	r9, r0
		if ((conn != conn_curr) && (is_select || !conn->role)) {
   12e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12e38:	4283      	cmp	r3, r0
   12e3a:	d0c5      	beq.n	12dc8 <sched_free_win_offset_calc+0x110>
   12e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12e3e:	b91b      	cbnz	r3, 12e48 <sched_free_win_offset_calc+0x190>
   12e40:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12e44:	2b00      	cmp	r3, #0
   12e46:	dbbf      	blt.n	12dc8 <sched_free_win_offset_calc+0x110>
				ticks_to_expire + ticks_prepare_reduced;
   12e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			u32_t ticks_to_expire_normal =
   12e4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12e4c:	18d3      	adds	r3, r2, r3
   12e4e:	9305      	str	r3, [sp, #20]
			if (conn->hdr.ticks_xtal_to_start &
   12e50:	f8d9 3000 	ldr.w	r3, [r9]
   12e54:	2b00      	cmp	r3, #0
   12e56:	f6ff af6a 	blt.w	12d2e <sched_free_win_offset_calc+0x76>
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   12e5a:	9b07      	ldr	r3, [sp, #28]
   12e5c:	681f      	ldr	r7, [r3, #0]
   12e5e:	9b05      	ldr	r3, [sp, #20]
   12e60:	42bb      	cmp	r3, r7
   12e62:	d9a6      	bls.n	12db2 <sched_free_win_offset_calc+0xfa>
				if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12e64:	9a08      	ldr	r2, [sp, #32]
   12e66:	42ba      	cmp	r2, r7
   12e68:	f4ff af7a 	bcc.w	12d60 <sched_free_win_offset_calc+0xa8>
   12e6c:	4617      	mov	r7, r2
   12e6e:	e777      	b.n	12d60 <sched_free_win_offset_calc+0xa8>
   12e70:	9708      	str	r7, [sp, #32]
	if (ticker_id == 0xFF) {
   12e72:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   12e76:	2bff      	cmp	r3, #255	; 0xff
   12e78:	d003      	beq.n	12e82 <sched_free_win_offset_calc+0x1ca>
	*offset_max = offset_index;
   12e7a:	702c      	strb	r4, [r5, #0]
}
   12e7c:	b011      	add	sp, #68	; 0x44
   12e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12e82:	9b07      	ldr	r3, [sp, #28]
   12e84:	681f      	ldr	r7, [r3, #0]
   12e86:	9a08      	ldr	r2, [sp, #32]
   12e88:	42ba      	cmp	r2, r7
   12e8a:	d300      	bcc.n	12e8e <sched_free_win_offset_calc+0x1d6>
   12e8c:	4617      	mov	r7, r2
		while (offset_index < *offset_max) {
   12e8e:	782b      	ldrb	r3, [r5, #0]
   12e90:	429c      	cmp	r4, r3
   12e92:	d21f      	bcs.n	12ed4 <sched_free_win_offset_calc+0x21c>
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12e94:	19bb      	adds	r3, r7, r6
   12e96:	4814      	ldr	r0, [pc, #80]	; (12ee8 <sched_free_win_offset_calc+0x230>)
   12e98:	fba3 0100 	umull	r0, r1, r3, r0
   12e9c:	2207      	movs	r2, #7
   12e9e:	fb02 1103 	mla	r1, r2, r3, r1
   12ea2:	a30f      	add	r3, pc, #60	; (adr r3, 12ee0 <sched_free_win_offset_calc+0x228>)
   12ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
   12ea8:	f7ee f928 	bl	10fc <__aeabi_uldivmod>
						   ticks_slot_prev_abs) / 1250;
   12eac:	4b0f      	ldr	r3, [pc, #60]	; (12eec <sched_free_win_offset_calc+0x234>)
   12eae:	fba3 2300 	umull	r2, r3, r3, r0
			_win_offset =
   12eb2:	f3c3 238f 	ubfx	r3, r3, #10, #16
   12eb6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			if (_win_offset >= conn_interval) {
   12eba:	459b      	cmp	fp, r3
   12ebc:	d909      	bls.n	12ed2 <sched_free_win_offset_calc+0x21a>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
   12ebe:	2202      	movs	r2, #2
   12ec0:	a90d      	add	r1, sp, #52	; 0x34
   12ec2:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   12ec6:	f7ed f9fb 	bl	2c0 <memcpy>
			offset_index++;
   12eca:	3401      	adds	r4, #1
   12ecc:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += TICKER_US_TO_TICKS(1250);
   12ece:	3728      	adds	r7, #40	; 0x28
   12ed0:	e7dd      	b.n	12e8e <sched_free_win_offset_calc+0x1d6>
				ticks_to_expire_prev = 0;
   12ed2:	2700      	movs	r7, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   12ed4:	9b07      	ldr	r3, [sp, #28]
   12ed6:	601f      	str	r7, [r3, #0]
   12ed8:	e7cf      	b.n	12e7a <sched_free_win_offset_calc+0x1c2>
   12eda:	bf00      	nop
   12edc:	f3af 8000 	nop.w
   12ee0:	3b9aca00 	.word	0x3b9aca00
   12ee4:	00000000 	.word	0x00000000
   12ee8:	1afd498d 	.word	0x1afd498d
   12eec:	d1b71759 	.word	0xd1b71759
   12ef0:	000116ad 	.word	0x000116ad
   12ef4:	200014d4 	.word	0x200014d4

00012ef8 <mayfly_sched_free_win_offset_calc>:
{
   12ef8:	b500      	push	{lr}
   12efa:	b085      	sub	sp, #20
	u32_t ticks_to_offset_default = 0;
   12efc:	2300      	movs	r3, #0
   12efe:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
   12f00:	2306      	movs	r3, #6
   12f02:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
   12f06:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12f0a:	2b00      	cmp	r3, #0
   12f0c:	db0e      	blt.n	12f2c <mayfly_sched_free_win_offset_calc+0x34>
	ticks_to_offset_next = &ticks_to_offset_default;
   12f0e:	aa03      	add	r2, sp, #12
				   (u8_t *)conn->llcp_conn_param.pdu_win_offset0);
   12f10:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   12f14:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
   12f18:	9101      	str	r1, [sp, #4]
   12f1a:	f10d 010b 	add.w	r1, sp, #11
   12f1e:	9100      	str	r1, [sp, #0]
   12f20:	2100      	movs	r1, #0
   12f22:	f7ff fec9 	bl	12cb8 <sched_free_win_offset_calc>
}
   12f26:	b005      	add	sp, #20
   12f28:	f85d fb04 	ldr.w	pc, [sp], #4
			conn->slave.ticks_to_offset;
   12f2c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		conn->llcp_conn_param.ticks_to_offset_next =
   12f2e:	4602      	mov	r2, r0
   12f30:	f842 3fe4 	str.w	r3, [r2, #228]!
   12f34:	e7ec      	b.n	12f10 <mayfly_sched_free_win_offset_calc+0x18>
	...

00012f38 <mayfly_sched_win_offset_select>:
{
   12f38:	b570      	push	{r4, r5, r6, lr}
   12f3a:	b088      	sub	sp, #32
   12f3c:	4606      	mov	r6, r0
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   12f3e:	ac05      	add	r4, sp, #20
   12f40:	2500      	movs	r5, #0
   12f42:	9505      	str	r5, [sp, #20]
   12f44:	9506      	str	r5, [sp, #24]
   12f46:	9507      	str	r5, [sp, #28]
	u8_t offset_m_max = OFFSET_M_MAX;
   12f48:	2306      	movs	r3, #6
   12f4a:	f88d 3013 	strb.w	r3, [sp, #19]
		TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
   12f4e:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
   12f52:	4843      	ldr	r0, [pc, #268]	; (13060 <mayfly_sched_win_offset_select+0x128>)
   12f54:	fba2 0100 	umull	r0, r1, r2, r0
   12f58:	f240 1323 	movw	r3, #291	; 0x123
   12f5c:	fb03 1102 	mla	r1, r3, r2, r1
   12f60:	a33d      	add	r3, pc, #244	; (adr r3, 13058 <mayfly_sched_win_offset_select+0x120>)
   12f62:	e9d3 2300 	ldrd	r2, r3, [r3]
   12f66:	f7ee f8c9 	bl	10fc <__aeabi_uldivmod>
   12f6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ticks_to_offset =
   12f6e:	aa08      	add	r2, sp, #32
   12f70:	f842 0d14 	str.w	r0, [r2, #-20]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
   12f74:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   12f78:	9401      	str	r4, [sp, #4]
   12f7a:	f10d 0113 	add.w	r1, sp, #19
   12f7e:	9100      	str	r1, [sp, #0]
   12f80:	2101      	movs	r1, #1
   12f82:	4630      	mov	r0, r6
   12f84:	f7ff fe98 	bl	12cb8 <sched_free_win_offset_calc>
	u8_t has_offset_s = 0;
   12f88:	462c      	mov	r4, r5
	while (offset_index_s < OFFSET_S_MAX) {
   12f8a:	e018      	b.n	12fbe <mayfly_sched_win_offset_select+0x86>
			offset_index_m++;
   12f8c:	3301      	adds	r3, #1
   12f8e:	b2db      	uxtb	r3, r3
		while (offset_index_m < offset_m_max) {
   12f90:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12f94:	428b      	cmp	r3, r1
   12f96:	d20e      	bcs.n	12fb6 <mayfly_sched_win_offset_select+0x7e>
			if (win_offset_s != 0xffff) {
   12f98:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   12f9c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   12fa0:	4282      	cmp	r2, r0
   12fa2:	d0f3      	beq.n	12f8c <mayfly_sched_win_offset_select+0x54>
				    win_offset_m[offset_index_m]) {
   12fa4:	a808      	add	r0, sp, #32
   12fa6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   12faa:	f830 0c0c 	ldrh.w	r0, [r0, #-12]
				if (win_offset_s ==
   12fae:	4282      	cmp	r2, r0
   12fb0:	d001      	beq.n	12fb6 <mayfly_sched_win_offset_select+0x7e>
				has_offset_s = 1;
   12fb2:	2401      	movs	r4, #1
   12fb4:	e7ea      	b.n	12f8c <mayfly_sched_win_offset_select+0x54>
		if (offset_index_m < offset_m_max) {
   12fb6:	428b      	cmp	r3, r1
   12fb8:	d30e      	bcc.n	12fd8 <mayfly_sched_win_offset_select+0xa0>
		offset_index_s++;
   12fba:	3501      	adds	r5, #1
   12fbc:	b2ed      	uxtb	r5, r5
	while (offset_index_s < OFFSET_S_MAX) {
   12fbe:	2d05      	cmp	r5, #5
   12fc0:	d80a      	bhi.n	12fd8 <mayfly_sched_win_offset_select+0xa0>
		       ((u8_t *)&conn->llcp_conn_param.offset0 +
   12fc2:	f106 01ce 	add.w	r1, r6, #206	; 0xce
		memcpy((u8_t *)&win_offset_s,
   12fc6:	2202      	movs	r2, #2
   12fc8:	eb01 0145 	add.w	r1, r1, r5, lsl #1
   12fcc:	f10d 000a 	add.w	r0, sp, #10
   12fd0:	f7ed f976 	bl	2c0 <memcpy>
		u8_t offset_index_m = 0;
   12fd4:	2300      	movs	r3, #0
		while (offset_index_m < offset_m_max) {
   12fd6:	e7db      	b.n	12f90 <mayfly_sched_win_offset_select+0x58>
	if (offset_index_s < OFFSET_S_MAX) {
   12fd8:	2d05      	cmp	r5, #5
   12fda:	d91d      	bls.n	13018 <mayfly_sched_win_offset_select+0xe0>
	} else if (!has_offset_s) {
   12fdc:	b35c      	cbz	r4, 13036 <mayfly_sched_win_offset_select+0xfe>
		conn->llcp_ack = conn->llcp_req;
   12fde:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
   12fe2:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		_radio.conn_upd = NULL;
   12fe6:	2200      	movs	r2, #0
   12fe8:	4b1e      	ldr	r3, [pc, #120]	; (13064 <mayfly_sched_win_offset_select+0x12c>)
   12fea:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
   12fee:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12ff2:	f813 2c05 	ldrb.w	r2, [r3, #-5]
   12ff6:	f042 0203 	orr.w	r2, r2, #3
   12ffa:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
   12ffe:	2203      	movs	r2, #3
   13000:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->payload.llctrl.opcode =
   13004:	2211      	movs	r2, #17
   13006:	f803 2c02 	strb.w	r2, [r3, #-2]
			reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1300a:	220f      	movs	r2, #15
   1300c:	f803 2c01 	strb.w	r2, [r3, #-1]
			error_code = 0x20; /* Unsupported parameter value */
   13010:	2220      	movs	r2, #32
   13012:	701a      	strb	r2, [r3, #0]
}
   13014:	b008      	add	sp, #32
   13016:	bd70      	pop	{r4, r5, r6, pc}
			win_offset_s * 1250;
   13018:	a908      	add	r1, sp, #32
   1301a:	f831 2d16 	ldrh.w	r2, [r1, #-22]!
   1301e:	f240 43e2 	movw	r3, #1250	; 0x4e2
   13022:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   13026:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   1302a:	2202      	movs	r2, #2
   1302c:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   13030:	f7ed f946 	bl	2c0 <memcpy>
   13034:	e7ee      	b.n	13014 <mayfly_sched_win_offset_select+0xdc>
			win_offset_m[0] * 1250;
   13036:	a908      	add	r1, sp, #32
   13038:	f831 2d0c 	ldrh.w	r2, [r1, #-12]!
   1303c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   13040:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   13044:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   13048:	2202      	movs	r2, #2
   1304a:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   1304e:	f7ed f937 	bl	2c0 <memcpy>
   13052:	e7df      	b.n	13014 <mayfly_sched_win_offset_select+0xdc>
   13054:	f3af 8000 	nop.w
   13058:	1afd498d 	.word	0x1afd498d
   1305c:	00000007 	.word	0x00000007
   13060:	09ce5400 	.word	0x09ce5400
   13064:	200014d4 	.word	0x200014d4

00013068 <sched_after_mstr_free_slot_get>:
{
   13068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1306c:	b08b      	sub	sp, #44	; 0x2c
   1306e:	4604      	mov	r4, r0
   13070:	468b      	mov	fp, r1
   13072:	4615      	mov	r5, r2
   13074:	469a      	mov	sl, r3
	ticker_id = ticker_id_prev = 0xff;
   13076:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1307a:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   1307e:	2300      	movs	r3, #0
   13080:	f8ca 3000 	str.w	r3, [sl]
   13084:	9308      	str	r3, [sp, #32]
	ticks_slot_prev_abs = 0;
   13086:	461f      	mov	r7, r3
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   13088:	9305      	str	r3, [sp, #20]
   1308a:	e01f      	b.n	130cc <sched_after_mstr_free_slot_get+0x64>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1308c:	4621      	mov	r1, r4
   1308e:	2000      	movs	r0, #0
   13090:	f7fd ff72 	bl	10f78 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   13094:	9b07      	ldr	r3, [sp, #28]
   13096:	2b02      	cmp	r3, #2
   13098:	d0f8      	beq.n	1308c <sched_after_mstr_free_slot_get+0x24>
   1309a:	e028      	b.n	130ee <sched_after_mstr_free_slot_get+0x86>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   1309c:	4040      	eors	r0, r0
   1309e:	f380 8811 	msr	BASEPRI, r0
   130a2:	f04f 0004 	mov.w	r0, #4
   130a6:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   130a8:	6881      	ldr	r1, [r0, #8]
					conn->hdr.ticks_active_to_start :
   130aa:	6842      	ldr	r2, [r0, #4]
					((conn->hdr.ticks_xtal_to_start &
   130ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   130b0:	4291      	cmp	r1, r2
   130b2:	bf2c      	ite	cs
   130b4:	ebc3 0301 	rsbcs	r3, r3, r1
   130b8:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   130bc:	4499      	add	r9, r3
   130be:	e03a      	b.n	13136 <sched_after_mstr_free_slot_get+0xce>
			ticker_id_prev = ticker_id;
   130c0:	f89d 8027 	ldrb.w	r8, [sp, #39]	; 0x27
				conn->hdr.ticks_slot;
   130c4:	68f7      	ldr	r7, [r6, #12]
			ticks_slot_prev_abs =
   130c6:	3727      	adds	r7, #39	; 0x27
			ticks_to_expire_prev = ticks_to_expire_normal;
   130c8:	f8cd 9014 	str.w	r9, [sp, #20]
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   130cc:	2302      	movs	r3, #2
   130ce:	9307      	str	r3, [sp, #28]
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   130d0:	ab07      	add	r3, sp, #28
   130d2:	9302      	str	r3, [sp, #8]
   130d4:	4b2c      	ldr	r3, [pc, #176]	; (13188 <sched_after_mstr_free_slot_get+0x120>)
   130d6:	9301      	str	r3, [sp, #4]
   130d8:	ab08      	add	r3, sp, #32
   130da:	9300      	str	r3, [sp, #0]
   130dc:	462b      	mov	r3, r5
   130de:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   130e2:	4621      	mov	r1, r4
   130e4:	2000      	movs	r0, #0
   130e6:	f7fd fec7 	bl	10e78 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   130ea:	2802      	cmp	r0, #2
   130ec:	d0d2      	beq.n	13094 <sched_after_mstr_free_slot_get+0x2c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   130ee:	9b07      	ldr	r3, [sp, #28]
   130f0:	2b00      	cmp	r3, #0
   130f2:	d1d3      	bne.n	1309c <sched_after_mstr_free_slot_get+0x34>
		if (ticker_id == 0xff) {
   130f4:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   130f8:	2aff      	cmp	r2, #255	; 0xff
   130fa:	d028      	beq.n	1314e <sched_after_mstr_free_slot_get+0xe6>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   130fc:	2a06      	cmp	r2, #6
   130fe:	d9e5      	bls.n	130cc <sched_after_mstr_free_slot_get+0x64>
				  _radio.connection_count)) {
   13100:	4b22      	ldr	r3, [pc, #136]	; (1318c <sched_after_mstr_free_slot_get+0x124>)
   13102:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   13106:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   13108:	429a      	cmp	r2, r3
   1310a:	dadf      	bge.n	130cc <sched_after_mstr_free_slot_get+0x64>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1310c:	3a07      	subs	r2, #7
   1310e:	b292      	uxth	r2, r2
   13110:	f44f 71aa 	mov.w	r1, #340	; 0x154
   13114:	4b1d      	ldr	r3, [pc, #116]	; (1318c <sched_after_mstr_free_slot_get+0x124>)
   13116:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   1311a:	f7fc f941 	bl	f3a0 <mem_get>
		if (conn && !conn->role) {
   1311e:	4606      	mov	r6, r0
   13120:	2800      	cmp	r0, #0
   13122:	d0d3      	beq.n	130cc <sched_after_mstr_free_slot_get+0x64>
   13124:	f990 301d 	ldrsb.w	r3, [r0, #29]
   13128:	2b00      	cmp	r3, #0
   1312a:	dbcf      	blt.n	130cc <sched_after_mstr_free_slot_get+0x64>
			u32_t ticks_to_expire_normal = ticks_to_expire;
   1312c:	f8dd 9020 	ldr.w	r9, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   13130:	6803      	ldr	r3, [r0, #0]
   13132:	2b00      	cmp	r3, #0
   13134:	dbb8      	blt.n	130a8 <sched_after_mstr_free_slot_get+0x40>
			if ((ticker_id_prev != 0xFF) &&
   13136:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1313a:	d0c1      	beq.n	130c0 <sched_after_mstr_free_slot_get+0x58>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   1313c:	9905      	ldr	r1, [sp, #20]
   1313e:	4648      	mov	r0, r9
   13140:	f7fd ff2e 	bl	10fa0 <ticker_ticks_diff_get>
			     (ticks_slot_prev_abs + ticks_slot_abs +
   13144:	eb07 030b 	add.w	r3, r7, fp
   13148:	3302      	adds	r3, #2
			if ((ticker_id_prev != 0xFF) &&
   1314a:	4298      	cmp	r0, r3
   1314c:	d9b8      	bls.n	130c0 <sched_after_mstr_free_slot_get+0x58>
	if (ticker_id_prev != 0xff) {
   1314e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   13152:	d010      	beq.n	13176 <sched_after_mstr_free_slot_get+0x10e>
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   13154:	9b05      	ldr	r3, [sp, #20]
   13156:	443b      	add	r3, r7
   13158:	461f      	mov	r7, r3
   1315a:	480d      	ldr	r0, [pc, #52]	; (13190 <sched_after_mstr_free_slot_get+0x128>)
   1315c:	fba3 0100 	umull	r0, r1, r3, r0
   13160:	2307      	movs	r3, #7
   13162:	fb03 1107 	mla	r1, r3, r7, r1
   13166:	a306      	add	r3, pc, #24	; (adr r3, 13180 <sched_after_mstr_free_slot_get+0x118>)
   13168:	e9d3 2300 	ldrd	r2, r3, [r3]
   1316c:	f7ed ffc6 	bl	10fc <__aeabi_uldivmod>
						ticks_slot_prev_abs) +
   13170:	3020      	adds	r0, #32
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   13172:	f8ca 0000 	str.w	r0, [sl]
}
   13176:	b00b      	add	sp, #44	; 0x2c
   13178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1317c:	f3af 8000 	nop.w
   13180:	3b9aca00 	.word	0x3b9aca00
   13184:	00000000 	.word	0x00000000
   13188:	000116ad 	.word	0x000116ad
   1318c:	200014d4 	.word	0x200014d4
   13190:	1afd498d 	.word	0x1afd498d
   13194:	00000000 	.word	0x00000000

00013198 <sched_after_mstr_free_offset_get>:
{
   13198:	b570      	push	{r4, r5, r6, lr}
   1319a:	b082      	sub	sp, #8
   1319c:	4606      	mov	r6, r0
   1319e:	4615      	mov	r5, r2
   131a0:	461c      	mov	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;
   131a2:	aa02      	add	r2, sp, #8
   131a4:	f842 5d04 	str.w	r5, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
   131a8:	3127      	adds	r1, #39	; 0x27
   131aa:	2001      	movs	r0, #1
   131ac:	f7ff ff5c 	bl	13068 <sched_after_mstr_free_slot_get>
	if (ticks_anchor_offset != ticks_anchor) {
   131b0:	9801      	ldr	r0, [sp, #4]
   131b2:	4285      	cmp	r5, r0
   131b4:	d011      	beq.n	131da <sched_after_mstr_free_offset_get+0x42>
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
   131b6:	4629      	mov	r1, r5
   131b8:	f7fd fef2 	bl	10fa0 <ticker_ticks_diff_get>
   131bc:	4602      	mov	r2, r0
   131be:	4810      	ldr	r0, [pc, #64]	; (13200 <sched_after_mstr_free_offset_get+0x68>)
   131c0:	fba2 0100 	umull	r0, r1, r2, r0
   131c4:	2307      	movs	r3, #7
   131c6:	fb03 1102 	mla	r1, r3, r2, r1
   131ca:	a30b      	add	r3, pc, #44	; (adr r3, 131f8 <sched_after_mstr_free_offset_get+0x60>)
   131cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   131d0:	f7ed ff94 	bl	10fc <__aeabi_uldivmod>
		*win_offset_us +=
   131d4:	6823      	ldr	r3, [r4, #0]
   131d6:	4418      	add	r0, r3
   131d8:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & ((u32_t)1 << 31)) == 0) {
   131da:	6823      	ldr	r3, [r4, #0]
   131dc:	2b00      	cmp	r3, #0
   131de:	db09      	blt.n	131f4 <sched_after_mstr_free_offset_get+0x5c>
		u32_t conn_interval_us = conn_interval * 1250;
   131e0:	f240 40e2 	movw	r0, #1250	; 0x4e2
   131e4:	fb00 f006 	mul.w	r0, r0, r6
		while (*win_offset_us > conn_interval_us) {
   131e8:	e001      	b.n	131ee <sched_after_mstr_free_offset_get+0x56>
			*win_offset_us -= conn_interval_us;
   131ea:	1a1b      	subs	r3, r3, r0
   131ec:	6023      	str	r3, [r4, #0]
		while (*win_offset_us > conn_interval_us) {
   131ee:	6823      	ldr	r3, [r4, #0]
   131f0:	4298      	cmp	r0, r3
   131f2:	d3fa      	bcc.n	131ea <sched_after_mstr_free_offset_get+0x52>
}
   131f4:	b002      	add	sp, #8
   131f6:	bd70      	pop	{r4, r5, r6, pc}
   131f8:	3b9aca00 	.word	0x3b9aca00
   131fc:	00000000 	.word	0x00000000
   13200:	1afd498d 	.word	0x1afd498d

00013204 <mayfly_sched_win_offset_use>:
{
   13204:	b510      	push	{r4, lr}
   13206:	b082      	sub	sp, #8
   13208:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
   1320a:	f100 0384 	add.w	r3, r0, #132	; 0x84
   1320e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   13212:	68c1      	ldr	r1, [r0, #12]
   13214:	8c80      	ldrh	r0, [r0, #36]	; 0x24
   13216:	f7ff ffbf 	bl	13198 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   1321a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   1321e:	4a07      	ldr	r2, [pc, #28]	; (1323c <mayfly_sched_win_offset_use+0x38>)
   13220:	fba2 2303 	umull	r2, r3, r2, r3
   13224:	0a9b      	lsrs	r3, r3, #10
   13226:	a902      	add	r1, sp, #8
   13228:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   1322c:	2202      	movs	r2, #2
   1322e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   13232:	f7ed f845 	bl	2c0 <memcpy>
}
   13236:	b002      	add	sp, #8
   13238:	bd10      	pop	{r4, pc}
   1323a:	bf00      	nop
   1323c:	d1b71759 	.word	0xd1b71759

00013240 <mayfly_sched_after_mstr_free_offset_get>:
{
   13240:	b510      	push	{r4, lr}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   13242:	4c05      	ldr	r4, [pc, #20]	; (13258 <mayfly_sched_after_mstr_free_offset_get+0x18>)
   13244:	f504 7380 	add.w	r3, r4, #256	; 0x100
   13248:	4602      	mov	r2, r0
   1324a:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   1324e:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
   13252:	f7ff ffa1 	bl	13198 <sched_after_mstr_free_offset_get>
   13256:	bd10      	pop	{r4, pc}
   13258:	200014d4 	.word	0x200014d4

0001325c <enc_rsp_send>:
{
   1325c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13260:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13262:	4818      	ldr	r0, [pc, #96]	; (132c4 <enc_rsp_send+0x68>)
   13264:	f7fc f85f 	bl	f326 <mem_acquire>
	LL_ASSERT(node_tx);
   13268:	b330      	cbz	r0, 132b8 <enc_rsp_send+0x5c>
   1326a:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1326c:	7903      	ldrb	r3, [r0, #4]
   1326e:	f043 0303 	orr.w	r3, r3, #3
   13272:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   13274:	230d      	movs	r3, #13
   13276:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   13278:	2604      	movs	r6, #4
   1327a:	71c6      	strb	r6, [r0, #7]
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds);
   1327c:	f100 0808 	add.w	r8, r0, #8
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds),
   13280:	4641      	mov	r1, r8
   13282:	2008      	movs	r0, #8
   13284:	f7fd faa2 	bl	107cc <rand_isr_get>
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs);
   13288:	f104 0710 	add.w	r7, r4, #16
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs),
   1328c:	4639      	mov	r1, r7
   1328e:	4630      	mov	r0, r6
   13290:	f7fd fa9c 	bl	107cc <rand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   13294:	2208      	movs	r2, #8
   13296:	4641      	mov	r1, r8
   13298:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   1329c:	f7ed f810 	bl	2c0 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   132a0:	4632      	mov	r2, r6
   132a2:	4639      	mov	r1, r7
   132a4:	f505 708b 	add.w	r0, r5, #278	; 0x116
   132a8:	f7ed f80a 	bl	2c0 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   132ac:	4621      	mov	r1, r4
   132ae:	4628      	mov	r0, r5
   132b0:	f7fe facc 	bl	1184c <ctrl_tx_enqueue>
   132b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(node_tx);
   132b8:	4040      	eors	r0, r0
   132ba:	f380 8811 	msr	BASEPRI, r0
   132be:	f04f 0004 	mov.w	r0, #4
   132c2:	df02      	svc	2
   132c4:	2000162c 	.word	0x2000162c

000132c8 <enc_req_reused_send>:
{
   132c8:	b538      	push	{r3, r4, r5, lr}
   132ca:	4605      	mov	r5, r0
   132cc:	460c      	mov	r4, r1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   132ce:	790b      	ldrb	r3, [r1, #4]
   132d0:	f043 0303 	orr.w	r3, r3, #3
   132d4:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   132d6:	2317      	movs	r3, #23
   132d8:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   132da:	2303      	movs	r3, #3
   132dc:	71cb      	strb	r3, [r1, #7]
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
   132de:	2208      	movs	r2, #8
   132e0:	f100 0179 	add.w	r1, r0, #121	; 0x79
   132e4:	18a0      	adds	r0, r4, r2
   132e6:	f7ec ffeb 	bl	2c0 <memcpy>
		conn->llcp.encryption.ediv[0];
   132ea:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
   132ee:	7423      	strb	r3, [r4, #16]
		conn->llcp.encryption.ediv[1];
   132f0:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
   132f4:	7463      	strb	r3, [r4, #17]
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm),
   132f6:	f104 0112 	add.w	r1, r4, #18
   132fa:	2008      	movs	r0, #8
   132fc:	f7fd fa66 	bl	107cc <rand_isr_get>
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm),
   13300:	f104 011a 	add.w	r1, r4, #26
   13304:	2004      	movs	r0, #4
   13306:	f7fd fa61 	bl	107cc <rand_isr_get>
   1330a:	bd38      	pop	{r3, r4, r5, pc}

0001330c <isr_rx_conn_pkt_ctrl>:
{
   1330c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13310:	b082      	sub	sp, #8
   13312:	4604      	mov	r4, r0
   13314:	460f      	mov	r7, r1
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   13316:	f100 0608 	add.w	r6, r0, #8
	if (_radio.conn_curr->role) {
   1331a:	4ba0      	ldr	r3, [pc, #640]	; (1359c <isr_rx_conn_pkt_ctrl+0x290>)
   1331c:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
   13320:	f995 301d 	ldrsb.w	r3, [r5, #29]
   13324:	2b00      	cmp	r3, #0
   13326:	db11      	blt.n	1334c <isr_rx_conn_pkt_ctrl+0x40>
		switch (pdu_data_rx->payload.llctrl.opcode) {
   13328:	7ac1      	ldrb	r1, [r0, #11]
   1332a:	2918      	cmp	r1, #24
   1332c:	d82c      	bhi.n	13388 <isr_rx_conn_pkt_ctrl+0x7c>
   1332e:	e8df f001 	tbb	[pc, r1]
   13332:	2323      	.short	0x2323
   13334:	2b2b232b 	.word	0x2b2b232b
   13338:	2b232b2b 	.word	0x2b232b2b
   1333c:	2b2b2b23 	.word	0x2b2b2b23
   13340:	2b2b2b2b 	.word	0x2b2b2b2b
   13344:	2b2b2b2b 	.word	0x2b2b2b2b
   13348:	2b2b      	.short	0x2b2b
   1334a:	23          	.byte	0x23
   1334b:	00          	.byte	0x00
		switch (pdu_data_rx->payload.llctrl.opcode) {
   1334c:	7ac1      	ldrb	r1, [r0, #11]
   1334e:	1f0a      	subs	r2, r1, #4
   13350:	2a15      	cmp	r2, #21
   13352:	d819      	bhi.n	13388 <isr_rx_conn_pkt_ctrl+0x7c>
   13354:	e8df f002 	tbb	[pc, r2]
   13358:	18180b0b 	.word	0x18180b0b
   1335c:	18181818 	.word	0x18181818
   13360:	180b1818 	.word	0x180b1818
   13364:	1818180b 	.word	0x1818180b
   13368:	0b181818 	.word	0x0b181818
   1336c:	0b18      	.short	0x0b18
			unknown_rsp_send(_radio.conn_curr,
   1336e:	4628      	mov	r0, r5
   13370:	f7fe fcca 	bl	11d08 <unknown_rsp_send>
			return 0;
   13374:	2400      	movs	r4, #0
   13376:	e003      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
			unknown_rsp_send(_radio.conn_curr,
   13378:	4628      	mov	r0, r5
   1337a:	f7fe fcc5 	bl	11d08 <unknown_rsp_send>
			return 0;
   1337e:	2400      	movs	r4, #0
}
   13380:	4620      	mov	r0, r4
   13382:	b002      	add	sp, #8
   13384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (pdu_data_rx->payload.llctrl.opcode) {
   13388:	7ae1      	ldrb	r1, [r4, #11]
   1338a:	2919      	cmp	r1, #25
   1338c:	f200 87e6 	bhi.w	1435c <isr_rx_conn_pkt_ctrl+0x1050>
   13390:	e8df f011 	tbh	[pc, r1, lsl #1]
   13394:	002e001a 	.word	0x002e001a
   13398:	0042003d 	.word	0x0042003d
   1339c:	00800065 	.word	0x00800065
   133a0:	04c60099 	.word	0x04c60099
   133a4:	010600de 	.word	0x010600de
   133a8:	014b012d 	.word	0x014b012d
   133ac:	01ad0170 	.word	0x01ad0170
   133b0:	01c400de 	.word	0x01c400de
   133b4:	0395032d 	.word	0x0395032d
   133b8:	04c104bb 	.word	0x04c104bb
   133bc:	05180518 	.word	0x05180518
   133c0:	06de0606 	.word	0x06de0606
   133c4:	07b9071b 	.word	0x07b9071b
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
   133c8:	4631      	mov	r1, r6
   133ca:	4628      	mov	r0, r5
   133cc:	f7fe fb90 	bl	11af0 <conn_update>
   133d0:	b930      	cbnz	r0, 133e0 <isr_rx_conn_pkt_ctrl+0xd4>
			_radio.conn_curr->procedure_expire = 0;
   133d2:	4b72      	ldr	r3, [pc, #456]	; (1359c <isr_rx_conn_pkt_ctrl+0x290>)
   133d4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   133d8:	2400      	movs	r4, #0
   133da:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   133de:	e7cf      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   133e0:	4b6e      	ldr	r3, [pc, #440]	; (1359c <isr_rx_conn_pkt_ctrl+0x290>)
   133e2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   133e6:	2228      	movs	r2, #40	; 0x28
   133e8:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   133ec:	2400      	movs	r4, #0
   133ee:	e7c7      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
		if (chan_map_update(_radio.conn_curr, pdu_data_rx)) {
   133f0:	4631      	mov	r1, r6
   133f2:	4628      	mov	r0, r5
   133f4:	f7ff f99e 	bl	12734 <chan_map_update>
   133f8:	2800      	cmp	r0, #0
   133fa:	f000 87b5 	beq.w	14368 <isr_rx_conn_pkt_ctrl+0x105c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   133fe:	4b67      	ldr	r3, [pc, #412]	; (1359c <isr_rx_conn_pkt_ctrl+0x290>)
   13400:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13404:	2228      	movs	r2, #40	; 0x28
   13406:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   1340a:	2400      	movs	r4, #0
   1340c:	e7b8      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
   1340e:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_terminate.reason_peer =
   13410:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
	u8_t nack = 0;
   13414:	2400      	movs	r4, #0
		break;
   13416:	e7b3      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   13418:	2208      	movs	r2, #8
   1341a:	f104 0116 	add.w	r1, r4, #22
   1341e:	f105 0093 	add.w	r0, r5, #147	; 0x93
   13422:	f7ec ff4d 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   13426:	4d5d      	ldr	r5, [pc, #372]	; (1359c <isr_rx_conn_pkt_ctrl+0x290>)
   13428:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   1342c:	2204      	movs	r2, #4
   1342e:	f104 011e 	add.w	r1, r4, #30
   13432:	f500 7089 	add.w	r0, r0, #274	; 0x112
   13436:	f7ec ff43 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   1343a:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   1343e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13442:	f043 0304 	orr.w	r3, r3, #4
   13446:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   1344a:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   1344e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   13452:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   13456:	2301      	movs	r3, #1
   13458:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   1345a:	2400      	movs	r4, #0
		break;
   1345c:	e790      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   1345e:	2208      	movs	r2, #8
   13460:	f104 010c 	add.w	r1, r4, #12
   13464:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   13468:	f7ec ff2a 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   1346c:	4d4b      	ldr	r5, [pc, #300]	; (1359c <isr_rx_conn_pkt_ctrl+0x290>)
   1346e:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   13472:	2204      	movs	r2, #4
   13474:	f104 0114 	add.w	r1, r4, #20
   13478:	f500 708b 	add.w	r0, r0, #278	; 0x116
   1347c:	f7ec ff20 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   13480:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   13484:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13488:	f043 0304 	orr.w	r3, r3, #4
   1348c:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t nack = 0;
   13490:	2400      	movs	r4, #0
		break;
   13492:	e775      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   13494:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   13498:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   1349c:	429a      	cmp	r2, r3
   1349e:	d10c      	bne.n	134ba <isr_rx_conn_pkt_ctrl+0x1ae>
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   134a0:	2303      	movs	r3, #3
   134a2:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   134a6:	4b3d      	ldr	r3, [pc, #244]	; (1359c <isr_rx_conn_pkt_ctrl+0x290>)
   134a8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   134ac:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   134b0:	3b01      	subs	r3, #1
   134b2:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
	u8_t nack = 0;
   134b6:	2400      	movs	r4, #0
		break;
   134b8:	e762      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   134ba:	4040      	eors	r0, r0
   134bc:	f380 8811 	msr	BASEPRI, r0
   134c0:	f04f 0004 	mov.w	r0, #4
   134c4:	df02      	svc	2
		if (_radio.role == ROLE_SLAVE) {
   134c6:	4b35      	ldr	r3, [pc, #212]	; (1359c <isr_rx_conn_pkt_ctrl+0x290>)
   134c8:	7bdb      	ldrb	r3, [r3, #15]
   134ca:	b2db      	uxtb	r3, r3
   134cc:	2b03      	cmp	r3, #3
   134ce:	d027      	beq.n	13520 <isr_rx_conn_pkt_ctrl+0x214>
			_radio.conn_curr->pause_rx = 0;
   134d0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   134d4:	f36f 0382 	bfc	r3, #2, #1
   134d8:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   134dc:	4b2f      	ldr	r3, [pc, #188]	; (1359c <isr_rx_conn_pkt_ctrl+0x290>)
   134de:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   134e2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   134e6:	f36f 02c3 	bfc	r2, #3, #1
   134ea:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		if (_radio.conn_curr->refresh) {
   134ee:	4b2b      	ldr	r3, [pc, #172]	; (1359c <isr_rx_conn_pkt_ctrl+0x290>)
   134f0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   134f4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   134f8:	f012 0f40 	tst.w	r2, #64	; 0x40
   134fc:	d007      	beq.n	1350e <isr_rx_conn_pkt_ctrl+0x202>
			_radio.conn_curr->refresh = 0;
   134fe:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13502:	f36f 1286 	bfc	r2, #6, #1
   13506:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1350a:	2309      	movs	r3, #9
   1350c:	7123      	strb	r3, [r4, #4]
		*rx_enqueue = 1;
   1350e:	2301      	movs	r3, #1
   13510:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   13512:	4b22      	ldr	r3, [pc, #136]	; (1359c <isr_rx_conn_pkt_ctrl+0x290>)
   13514:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13518:	2400      	movs	r4, #0
   1351a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   1351e:	e72f      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   13520:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   13524:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13528:	429a      	cmp	r2, r3
   1352a:	d10b      	bne.n	13544 <isr_rx_conn_pkt_ctrl+0x238>
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   1352c:	2303      	movs	r3, #3
   1352e:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   13532:	4b1a      	ldr	r3, [pc, #104]	; (1359c <isr_rx_conn_pkt_ctrl+0x290>)
   13534:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13538:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   1353c:	3b01      	subs	r3, #1
   1353e:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   13542:	e7d4      	b.n	134ee <isr_rx_conn_pkt_ctrl+0x1e2>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   13544:	4040      	eors	r0, r0
   13546:	f380 8811 	msr	BASEPRI, r0
   1354a:	f04f 0004 	mov.w	r0, #4
   1354e:	df02      	svc	2
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   13550:	7b23      	ldrb	r3, [r4, #12]
   13552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   13556:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   1355a:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   1355e:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   13562:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   13564:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   13568:	7ba2      	ldrb	r2, [r4, #14]
   1356a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   1356e:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   13572:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   13576:	4013      	ands	r3, r2
   13578:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   1357c:	4a07      	ldr	r2, [pc, #28]	; (1359c <isr_rx_conn_pkt_ctrl+0x290>)
   1357e:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   13582:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   13586:	f043 0320 	orr.w	r3, r3, #32
   1358a:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		feature_rsp_send(_radio.conn_curr);
   1358e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13592:	f7ff f8fd 	bl	12790 <feature_rsp_send>
	u8_t nack = 0;
   13596:	2400      	movs	r4, #0
	break;
   13598:	e6f2      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
   1359a:	bf00      	nop
   1359c:	200014d4 	.word	0x200014d4
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   135a0:	7b23      	ldrb	r3, [r4, #12]
   135a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   135a6:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   135aa:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   135ae:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   135b2:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   135b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   135b8:	7ba2      	ldrb	r2, [r4, #14]
   135ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   135be:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   135c2:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   135c6:	4013      	ands	r3, r2
   135c8:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   135cc:	4ad2      	ldr	r2, [pc, #840]	; (13918 <isr_rx_conn_pkt_ctrl+0x60c>)
   135ce:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   135d2:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   135d6:	f043 0320 	orr.w	r3, r3, #32
   135da:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		*rx_enqueue = 1;
   135de:	2301      	movs	r3, #1
   135e0:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   135e2:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   135e6:	2400      	movs	r4, #0
   135e8:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	break;
   135ec:	e6c8      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
		pause_enc_rsp_send(_radio.conn_curr);
   135ee:	4628      	mov	r0, r5
   135f0:	f7fe fae8 	bl	11bc4 <pause_enc_rsp_send>
		_radio.conn_curr->pause_rx = 1;
   135f4:	4bc8      	ldr	r3, [pc, #800]	; (13918 <isr_rx_conn_pkt_ctrl+0x60c>)
   135f6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   135fa:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   135fe:	f042 0204 	orr.w	r2, r2, #4
   13602:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   13606:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1360a:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   1360e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13612:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->enc_rx = 0;
   13616:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1361a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1361e:	f36f 1204 	bfc	r2, #4, #1
   13622:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   13626:	2400      	movs	r4, #0
		break;
   13628:	e6aa      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.role == ROLE_MASTER) {
   1362a:	4bbb      	ldr	r3, [pc, #748]	; (13918 <isr_rx_conn_pkt_ctrl+0x60c>)
   1362c:	7bdb      	ldrb	r3, [r3, #15]
   1362e:	b2db      	uxtb	r3, r3
   13630:	2b04      	cmp	r3, #4
   13632:	d00a      	beq.n	1364a <isr_rx_conn_pkt_ctrl+0x33e>
		_radio.conn_curr->enc_tx = 0;
   13634:	4bb8      	ldr	r3, [pc, #736]	; (13918 <isr_rx_conn_pkt_ctrl+0x60c>)
   13636:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1363a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1363e:	f36f 1245 	bfc	r2, #5, #1
   13642:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   13646:	2400      	movs	r4, #0
		break;
   13648:	e69a      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
			pause_enc_rsp_send(_radio.conn_curr);
   1364a:	4628      	mov	r0, r5
   1364c:	f7fe faba 	bl	11bc4 <pause_enc_rsp_send>
			_radio.conn_curr->pause_rx = 1;
   13650:	4ab1      	ldr	r2, [pc, #708]	; (13918 <isr_rx_conn_pkt_ctrl+0x60c>)
   13652:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   13656:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   1365a:	f043 0304 	orr.w	r3, r3, #4
   1365e:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			_radio.conn_curr->enc_rx = 0;
   13662:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13666:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1366a:	f36f 1204 	bfc	r2, #4, #1
   1366e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   13672:	e7df      	b.n	13634 <isr_rx_conn_pkt_ctrl+0x328>
			version_ind.version_number;
   13674:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_version.version_number =
   13676:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
		_radio.conn_curr->llcp_version. company_id =
   1367a:	4ba7      	ldr	r3, [pc, #668]	; (13918 <isr_rx_conn_pkt_ctrl+0x60c>)
   1367c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
   13680:	f8b4 100d 	ldrh.w	r1, [r4, #13]
		_radio.conn_curr->llcp_version. company_id =
   13684:	f8a2 10aa 	strh.w	r1, [r2, #170]	; 0xaa
		_radio.conn_curr->llcp_version.sub_version_number =
   13688:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
   1368c:	f8b4 100f 	ldrh.w	r1, [r4, #15]
		_radio.conn_curr->llcp_version.sub_version_number =
   13690:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
		if ((_radio.conn_curr->llcp_version.tx != 0) &&
   13694:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13698:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
   1369c:	f003 0303 	and.w	r3, r3, #3
   136a0:	2b01      	cmp	r3, #1
   136a2:	d011      	beq.n	136c8 <isr_rx_conn_pkt_ctrl+0x3bc>
		_radio.conn_curr->llcp_version.rx = 1;
   136a4:	4a9c      	ldr	r2, [pc, #624]	; (13918 <isr_rx_conn_pkt_ctrl+0x60c>)
   136a6:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   136aa:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
   136ae:	f043 0302 	orr.w	r3, r3, #2
   136b2:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
		if (_radio.conn_curr->llcp_version.tx == 0) {
   136b6:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   136ba:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
   136be:	f012 0f01 	tst.w	r2, #1
   136c2:	d009      	beq.n	136d8 <isr_rx_conn_pkt_ctrl+0x3cc>
	u8_t nack = 0;
   136c4:	2400      	movs	r4, #0
   136c6:	e65b      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
			*rx_enqueue = 1;
   136c8:	703b      	strb	r3, [r7, #0]
			_radio.conn_curr->procedure_expire = 0;
   136ca:	4b93      	ldr	r3, [pc, #588]	; (13918 <isr_rx_conn_pkt_ctrl+0x60c>)
   136cc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   136d0:	2200      	movs	r2, #0
   136d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   136d6:	e7e5      	b.n	136a4 <isr_rx_conn_pkt_ctrl+0x398>
			_radio.conn_curr->llcp_version.tx = 1;
   136d8:	f042 0201 	orr.w	r2, r2, #1
   136dc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			version_ind_send(_radio.conn_curr);
   136e0:	4b8d      	ldr	r3, [pc, #564]	; (13918 <isr_rx_conn_pkt_ctrl+0x60c>)
   136e2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   136e6:	f7ff f90b 	bl	12900 <version_ind_send>
	u8_t nack = 0;
   136ea:	2400      	movs	r4, #0
   136ec:	e648      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->pause_rx = 0;
   136ee:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   136f2:	f36f 0382 	bfc	r3, #2, #1
   136f6:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   136fa:	4b87      	ldr	r3, [pc, #540]	; (13918 <isr_rx_conn_pkt_ctrl+0x60c>)
   136fc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13700:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13704:	f36f 01c3 	bfc	r1, #3, #1
   13708:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   1370c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13710:	2400      	movs	r4, #0
   13712:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   13716:	2301      	movs	r3, #1
   13718:	703b      	strb	r3, [r7, #0]
		break;
   1371a:	e631      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   1371c:	4a7e      	ldr	r2, [pc, #504]	; (13918 <isr_rx_conn_pkt_ctrl+0x60c>)
   1371e:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   13722:	b142      	cbz	r2, 13736 <isr_rx_conn_pkt_ctrl+0x42a>
   13724:	4295      	cmp	r5, r2
   13726:	d006      	beq.n	13736 <isr_rx_conn_pkt_ctrl+0x42a>
			reject_ext_ind_send(_radio.conn_curr,
   13728:	2220      	movs	r2, #32
   1372a:	210f      	movs	r1, #15
   1372c:	4628      	mov	r0, r5
   1372e:	f7fe faa5 	bl	11c7c <reject_ext_ind_send>
	u8_t nack = 0;
   13732:	2400      	movs	r4, #0
			break;
   13734:	e624      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
		if (!_radio.conn_curr->role) {
   13736:	2b00      	cmp	r3, #0
   13738:	f2c0 80bc 	blt.w	138b4 <isr_rx_conn_pkt_ctrl+0x5a8>
			if ((conn->llcp_conn_param.req !=
   1373c:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
					conn->llcp_conn_param.ack) &&
   13740:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
			if ((conn->llcp_conn_param.req !=
   13744:	429a      	cmp	r2, r3
   13746:	d008      	beq.n	1375a <isr_rx_conn_pkt_ctrl+0x44e>
			    ((conn->llcp_conn_param.state ==
   13748:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   1374c:	f013 0307 	ands.w	r3, r3, #7
   13750:	d016      	beq.n	13780 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_REQ) ||
   13752:	2b04      	cmp	r3, #4
   13754:	d014      	beq.n	13780 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   13756:	2b05      	cmp	r3, #5
   13758:	d012      	beq.n	13780 <isr_rx_conn_pkt_ctrl+0x474>
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   1375a:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   1375e:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13762:	429a      	cmp	r2, r3
   13764:	d105      	bne.n	13772 <isr_rx_conn_pkt_ctrl+0x466>
				   (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   13766:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
   1376a:	f895 30f5 	ldrb.w	r3, [r5, #245]	; 0xf5
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   1376e:	429a      	cmp	r2, r3
   13770:	d00d      	beq.n	1378e <isr_rx_conn_pkt_ctrl+0x482>
				reject_ext_ind_send(_radio.conn_curr,
   13772:	222a      	movs	r2, #42	; 0x2a
   13774:	210f      	movs	r1, #15
   13776:	4628      	mov	r0, r5
   13778:	f7fe fa80 	bl	11c7c <reject_ext_ind_send>
	u8_t nack = 0;
   1377c:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   1377e:	e5ff      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   13780:	2223      	movs	r2, #35	; 0x23
   13782:	210f      	movs	r1, #15
   13784:	4628      	mov	r0, r5
   13786:	f7fe fa79 	bl	11c7c <reject_ext_ind_send>
	u8_t nack = 0;
   1378a:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   1378c:	e5f8      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
				if ((cpr->interval_min < 6) ||
   1378e:	89a0      	ldrh	r0, [r4, #12]
   13790:	b282      	uxth	r2, r0
   13792:	2a05      	cmp	r2, #5
   13794:	d970      	bls.n	13878 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   13796:	89e3      	ldrh	r3, [r4, #14]
				if ((cpr->interval_min < 6) ||
   13798:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1379c:	d86c      	bhi.n	13878 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   1379e:	429a      	cmp	r2, r3
   137a0:	d86a      	bhi.n	13878 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->latency > 499) ||
   137a2:	8a22      	ldrh	r2, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   137a4:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   137a8:	d266      	bcs.n	13878 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   137aa:	8a61      	ldrh	r1, [r4, #18]
				    (cpr->latency > 499) ||
   137ac:	2909      	cmp	r1, #9
   137ae:	d963      	bls.n	13878 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   137b0:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   137b4:	d860      	bhi.n	13878 <isr_rx_conn_pkt_ctrl+0x56c>
				     ((cpr->latency + 1) *
   137b6:	fb02 3203 	mla	r2, r2, r3, r3
				    (cpr->timeout > 3200) ||
   137ba:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   137be:	da5b      	bge.n	13878 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->preferred_periodicity >
   137c0:	7d22      	ldrb	r2, [r4, #20]
				      cpr->interval_max)) ||
   137c2:	4293      	cmp	r3, r2
   137c4:	d358      	bcc.n	13878 <isr_rx_conn_pkt_ctrl+0x56c>
				conn->llcp_conn_param.interval = cpr->interval_min;
   137c6:	f8a5 00c4 	strh.w	r0, [r5, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   137ca:	8a23      	ldrh	r3, [r4, #16]
   137cc:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   137d0:	8a62      	ldrh	r2, [r4, #18]
   137d2:	b293      	uxth	r3, r2
   137d4:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
					cpr->preferred_periodicity;
   137d8:	7d22      	ldrb	r2, [r4, #20]
				conn->llcp_conn_param.preferred_periodicity =
   137da:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
					cpr->reference_conn_event_count;
   137de:	f8b4 2015 	ldrh.w	r2, [r4, #21]
				conn->llcp_conn_param.reference_conn_event_count =
   137e2:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   137e6:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   137ea:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   137ee:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   137f2:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   137f6:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   137fa:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   137fe:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   13802:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   13806:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   1380a:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   1380e:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   13812:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				     conn->conn_interval) ||
   13816:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   1381a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
				if ((conn->llcp_conn_param.interval !=
   1381c:	4291      	cmp	r1, r2
   1381e:	d10f      	bne.n	13840 <isr_rx_conn_pkt_ctrl+0x534>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   13820:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   13822:	f240 42e2 	movw	r2, #1250	; 0x4e2
   13826:	fb02 f201 	mul.w	r2, r2, r1
   1382a:	f242 7110 	movw	r1, #10000	; 0x2710
   1382e:	fb01 2303 	mla	r3, r1, r3, r2
   13832:	3b01      	subs	r3, #1
   13834:	fb93 f3f2 	sdiv	r3, r3, r2
   13838:	b29b      	uxth	r3, r3
				     conn->supervision_reload)) {
   1383a:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
				     conn->latency) ||
   1383c:	4293      	cmp	r3, r2
   1383e:	d02c      	beq.n	1389a <isr_rx_conn_pkt_ctrl+0x58e>
					if (conn->pause_tx) {
   13840:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   13844:	f013 0f08 	tst.w	r3, #8
   13848:	d01d      	beq.n	13886 <isr_rx_conn_pkt_ctrl+0x57a>
						conn->llcp_conn_param.state =
   1384a:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   1384e:	2202      	movs	r2, #2
   13850:	f362 0302 	bfi	r3, r2, #0, #3
   13854:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.ack--;
   13858:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   1385c:	3b01      	subs	r3, #1
   1385e:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
				if (_radio.conn_upd == 0) {
   13862:	4b2d      	ldr	r3, [pc, #180]	; (13918 <isr_rx_conn_pkt_ctrl+0x60c>)
   13864:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   13868:	2b00      	cmp	r3, #0
   1386a:	f040 8580 	bne.w	1436e <isr_rx_conn_pkt_ctrl+0x1062>
					_radio.conn_upd = conn;
   1386e:	4b2a      	ldr	r3, [pc, #168]	; (13918 <isr_rx_conn_pkt_ctrl+0x60c>)
   13870:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   13874:	2400      	movs	r4, #0
   13876:	e583      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
					reject_ext_ind_send(conn,
   13878:	221e      	movs	r2, #30
   1387a:	210f      	movs	r1, #15
   1387c:	4628      	mov	r0, r5
   1387e:	f7fe f9fd 	bl	11c7c <reject_ext_ind_send>
	u8_t nack = 0;
   13882:	2400      	movs	r4, #0
					break;
   13884:	e57c      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
						*rx_enqueue = 1;
   13886:	2301      	movs	r3, #1
   13888:	703b      	strb	r3, [r7, #0]
						conn->llcp_conn_param.state =
   1388a:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   1388e:	2203      	movs	r2, #3
   13890:	f362 0302 	bfi	r3, r2, #0, #3
   13894:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   13898:	e7de      	b.n	13858 <isr_rx_conn_pkt_ctrl+0x54c>
					conn->llcp_conn_param.status = 0;
   1389a:	2300      	movs	r3, #0
   1389c:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
					conn->llcp_conn_param.cmd = 0;
   138a0:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.state =
   138a4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   138a8:	2201      	movs	r2, #1
   138aa:	f362 0302 	bfi	r3, r2, #0, #3
   138ae:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   138b2:	e7d1      	b.n	13858 <isr_rx_conn_pkt_ctrl+0x54c>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   138b4:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
			    _radio.conn_curr->llcp_conn_param.ack) ||
   138b8:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   138bc:	429a      	cmp	r2, r3
   138be:	d007      	beq.n	138d0 <isr_rx_conn_pkt_ctrl+0x5c4>
			   (_radio.conn_curr->llcp_conn_param.state ==
   138c0:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
			    _radio.conn_curr->llcp_conn_param.ack) ||
   138c4:	f013 0307 	ands.w	r3, r3, #7
   138c8:	d002      	beq.n	138d0 <isr_rx_conn_pkt_ctrl+0x5c4>
			    LLCP_CPR_STATE_REQ) ||
   138ca:	2b04      	cmp	r3, #4
   138cc:	f040 8089 	bne.w	139e2 <isr_rx_conn_pkt_ctrl+0x6d6>
			if ((cpr->interval_min < 6) ||
   138d0:	89a1      	ldrh	r1, [r4, #12]
   138d2:	b28a      	uxth	r2, r1
   138d4:	2a05      	cmp	r2, #5
   138d6:	d917      	bls.n	13908 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   138d8:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   138da:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   138de:	d813      	bhi.n	13908 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   138e0:	429a      	cmp	r2, r3
   138e2:	d811      	bhi.n	13908 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->latency > 499) ||
   138e4:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   138e6:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   138ea:	d20d      	bcs.n	13908 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   138ec:	8a60      	ldrh	r0, [r4, #18]
			    (cpr->latency > 499) ||
   138ee:	2809      	cmp	r0, #9
   138f0:	d90a      	bls.n	13908 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   138f2:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   138f6:	d807      	bhi.n	13908 <isr_rx_conn_pkt_ctrl+0x5fc>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   138f8:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   138fc:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   13900:	da02      	bge.n	13908 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   13902:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   13904:	4293      	cmp	r3, r2
   13906:	d209      	bcs.n	1391c <isr_rx_conn_pkt_ctrl+0x610>
				reject_ext_ind_send(conn,
   13908:	221e      	movs	r2, #30
   1390a:	210f      	movs	r1, #15
   1390c:	4628      	mov	r0, r5
   1390e:	f7fe f9b5 	bl	11c7c <reject_ext_ind_send>
	u8_t nack = 0;
   13912:	2400      	movs	r4, #0
				break;
   13914:	e534      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
   13916:	bf00      	nop
   13918:	200014d4 	.word	0x200014d4
			conn->llcp_conn_param.interval = cpr->interval_min;
   1391c:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   13920:	8a23      	ldrh	r3, [r4, #16]
   13922:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   13926:	8a62      	ldrh	r2, [r4, #18]
   13928:	b293      	uxth	r3, r2
   1392a:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   1392e:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   13930:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   13934:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   13938:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   1393c:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   13940:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   13944:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   13948:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   1394c:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   13950:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   13954:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   13958:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   1395c:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   13960:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   13964:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   13968:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			     conn->conn_interval) ||
   1396c:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   13970:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			if ((conn->llcp_conn_param.interval !=
   13972:	4291      	cmp	r1, r2
   13974:	d013      	beq.n	1399e <isr_rx_conn_pkt_ctrl+0x692>
				*rx_enqueue = 1;
   13976:	2301      	movs	r3, #1
   13978:	703b      	strb	r3, [r7, #0]
				conn->llcp_conn_param.state =
   1397a:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   1397e:	2203      	movs	r2, #3
   13980:	f362 0302 	bfi	r3, r2, #0, #3
   13984:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   13988:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   1398c:	3b01      	subs	r3, #1
   1398e:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   13992:	4bcb      	ldr	r3, [pc, #812]	; (13cc0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13994:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   13998:	b1f3      	cbz	r3, 139d8 <isr_rx_conn_pkt_ctrl+0x6cc>
	u8_t nack = 0;
   1399a:	2400      	movs	r4, #0
   1399c:	e4f0      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1399e:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   139a0:	f240 42e2 	movw	r2, #1250	; 0x4e2
   139a4:	fb02 f201 	mul.w	r2, r2, r1
   139a8:	f242 7110 	movw	r1, #10000	; 0x2710
   139ac:	fb01 2303 	mla	r3, r1, r3, r2
   139b0:	3b01      	subs	r3, #1
   139b2:	fb93 f3f2 	sdiv	r3, r3, r2
   139b6:	b29b      	uxth	r3, r3
			     conn->supervision_reload)) {
   139b8:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
			    (conn->llcp_conn_param.latency != conn->latency) ||
   139ba:	4293      	cmp	r3, r2
   139bc:	d1db      	bne.n	13976 <isr_rx_conn_pkt_ctrl+0x66a>
				conn->llcp_conn_param.status = 0;
   139be:	2300      	movs	r3, #0
   139c0:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   139c4:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.state =
   139c8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   139cc:	2201      	movs	r2, #1
   139ce:	f362 0302 	bfi	r3, r2, #0, #3
   139d2:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   139d6:	e7d7      	b.n	13988 <isr_rx_conn_pkt_ctrl+0x67c>
				_radio.conn_upd = conn;
   139d8:	4bb9      	ldr	r3, [pc, #740]	; (13cc0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   139da:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   139de:	2400      	movs	r4, #0
   139e0:	e4ce      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(0);
   139e2:	4040      	eors	r0, r0
   139e4:	f380 8811 	msr	BASEPRI, r0
   139e8:	f04f 0004 	mov.w	r0, #4
   139ec:	df02      	svc	2
		if (!_radio.conn_curr->role &&
   139ee:	2b00      	cmp	r3, #0
   139f0:	f2c0 84c0 	blt.w	14374 <isr_rx_conn_pkt_ctrl+0x1068>
		    (_radio.conn_curr->llcp_conn_param.req !=
   139f4:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		     _radio.conn_curr->llcp_conn_param.ack) &&
   139f8:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		if (!_radio.conn_curr->role &&
   139fc:	429a      	cmp	r2, r3
   139fe:	f000 84bc 	beq.w	1437a <isr_rx_conn_pkt_ctrl+0x106e>
		    (_radio.conn_curr->llcp_conn_param.state ==
   13a02:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   13a06:	f003 0307 	and.w	r3, r3, #7
		     _radio.conn_curr->llcp_conn_param.ack) &&
   13a0a:	2b04      	cmp	r3, #4
   13a0c:	d001      	beq.n	13a12 <isr_rx_conn_pkt_ctrl+0x706>
	u8_t nack = 0;
   13a0e:	2400      	movs	r4, #0
   13a10:	e4b6      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
			if ((cpr->interval_min < 6) ||
   13a12:	89a2      	ldrh	r2, [r4, #12]
   13a14:	2a05      	cmp	r2, #5
   13a16:	d917      	bls.n	13a48 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   13a18:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   13a1a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   13a1e:	d813      	bhi.n	13a48 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   13a20:	429a      	cmp	r2, r3
   13a22:	d811      	bhi.n	13a48 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->latency > 499) ||
   13a24:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   13a26:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   13a2a:	d20d      	bcs.n	13a48 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13a2c:	8a61      	ldrh	r1, [r4, #18]
			    (cpr->latency > 499) ||
   13a2e:	2909      	cmp	r1, #9
   13a30:	d90a      	bls.n	13a48 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13a32:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   13a36:	d807      	bhi.n	13a48 <isr_rx_conn_pkt_ctrl+0x73c>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   13a38:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13a3c:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   13a40:	da02      	bge.n	13a48 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   13a42:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   13a44:	4293      	cmp	r3, r2
   13a46:	d206      	bcs.n	13a56 <isr_rx_conn_pkt_ctrl+0x74a>
				reject_ext_ind_send(conn,
   13a48:	221e      	movs	r2, #30
   13a4a:	2110      	movs	r1, #16
   13a4c:	4628      	mov	r0, r5
   13a4e:	f7fe f915 	bl	11c7c <reject_ext_ind_send>
	u8_t nack = 0;
   13a52:	2400      	movs	r4, #0
				break;
   13a54:	e494      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->procedure_expire = 0;
   13a56:	2300      	movs	r3, #0
   13a58:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   13a5c:	89a2      	ldrh	r2, [r4, #12]
   13a5e:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   13a62:	8a22      	ldrh	r2, [r4, #16]
   13a64:	f8a5 20c6 	strh.w	r2, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   13a68:	8a62      	ldrh	r2, [r4, #18]
   13a6a:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   13a6e:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   13a70:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   13a74:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   13a78:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   13a7c:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   13a80:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   13a84:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   13a88:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   13a8c:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   13a90:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   13a94:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   13a98:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   13a9c:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   13aa0:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   13aa4:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   13aa8:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   13aac:	f895 20c2 	ldrb.w	r2, [r5, #194]	; 0xc2
   13ab0:	2101      	movs	r1, #1
   13ab2:	f361 0202 	bfi	r2, r1, #0, #3
   13ab6:	f885 20c2 	strb.w	r2, [r5, #194]	; 0xc2
	u8_t nack = 0;
   13aba:	461c      	mov	r4, r3
   13abc:	e460      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   13abe:	4b80      	ldr	r3, [pc, #512]	; (13cc0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13ac0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13ac4:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   13ac8:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   13acc:	4291      	cmp	r1, r2
   13ace:	d112      	bne.n	13af6 <isr_rx_conn_pkt_ctrl+0x7ea>
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   13ad0:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
		   _radio.conn_curr->llcp_conn_param.req) {
   13ad4:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   13ad8:	4291      	cmp	r1, r2
   13ada:	d14c      	bne.n	13b76 <isr_rx_conn_pkt_ctrl+0x86a>
	} else if (_radio.conn_curr->llcp_length.ack !=
   13adc:	f893 10e9 	ldrb.w	r1, [r3, #233]	; 0xe9
		   _radio.conn_curr->llcp_length.req) {
   13ae0:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   13ae4:	4291      	cmp	r1, r2
   13ae6:	f000 80ef 	beq.w	13cc8 <isr_rx_conn_pkt_ctrl+0x9bc>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   13aea:	7b21      	ldrb	r1, [r4, #12]
   13aec:	2914      	cmp	r1, #20
   13aee:	f000 80cb 	beq.w	13c88 <isr_rx_conn_pkt_ctrl+0x97c>
	u8_t nack = 0;
   13af2:	2400      	movs	r4, #0
   13af4:	e444      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   13af6:	7b23      	ldrb	r3, [r4, #12]
   13af8:	2b16      	cmp	r3, #22
   13afa:	d001      	beq.n	13b00 <isr_rx_conn_pkt_ctrl+0x7f4>
	u8_t nack = 0;
   13afc:	2400      	movs	r4, #0
   13afe:	e43f      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
		if (rej_ext_ind->error_code != 0x23) {
   13b00:	7b63      	ldrb	r3, [r4, #13]
   13b02:	2b23      	cmp	r3, #35	; 0x23
   13b04:	d017      	beq.n	13b36 <isr_rx_conn_pkt_ctrl+0x82a>
			_radio.conn_curr->llcp_phy.ack =
   13b06:	4b6e      	ldr	r3, [pc, #440]	; (13cc0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13b08:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_phy.req;
   13b0c:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
			_radio.conn_curr->llcp_phy.ack =
   13b10:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   13b14:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   13b18:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   13b1c:	f3c1 01c2 	ubfx	r1, r1, #3, #3
			_radio.conn_curr->phy_tx_time =
   13b20:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
   13b24:	f361 0002 	bfi	r0, r1, #0, #3
   13b28:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   13b2c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13b30:	2200      	movs	r2, #0
   13b32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   13b36:	4b62      	ldr	r3, [pc, #392]	; (13cc0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13b38:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13b3c:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   13b40:	f013 0f02 	tst.w	r3, #2
   13b44:	f000 841c 	beq.w	14380 <isr_rx_conn_pkt_ctrl+0x1074>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13b48:	230c      	movs	r3, #12
   13b4a:	7123      	strb	r3, [r4, #4]
		p->status = rej_ext_ind->error_code;
   13b4c:	7b63      	ldrb	r3, [r4, #13]
   13b4e:	72e3      	strb	r3, [r4, #11]
		p->tx = _radio.conn_curr->phy_tx;
   13b50:	4a5b      	ldr	r2, [pc, #364]	; (13cc0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13b52:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13b56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   13b5a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13b5e:	7323      	strb	r3, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   13b60:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13b64:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   13b68:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13b6c:	7363      	strb	r3, [r4, #13]
		*rx_enqueue = 1;
   13b6e:	2301      	movs	r3, #1
   13b70:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13b72:	2400      	movs	r4, #0
   13b74:	e404      	b.n	13380 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   13b76:	7b23      	ldrb	r3, [r4, #12]
   13b78:	2b0f      	cmp	r3, #15
   13b7a:	d002      	beq.n	13b82 <isr_rx_conn_pkt_ctrl+0x876>
	u8_t nack = 0;
   13b7c:	2400      	movs	r4, #0
   13b7e:	f7ff bbff 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
	conn = _radio.conn_curr;
   13b82:	4b4f      	ldr	r3, [pc, #316]	; (13cc0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13b84:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   13b88:	f993 201d 	ldrsb.w	r2, [r3, #29]
   13b8c:	2a00      	cmp	r2, #0
   13b8e:	db02      	blt.n	13b96 <isr_rx_conn_pkt_ctrl+0x88a>
   13b90:	7b62      	ldrb	r2, [r4, #13]
   13b92:	2a1a      	cmp	r2, #26
   13b94:	d037      	beq.n	13c06 <isr_rx_conn_pkt_ctrl+0x8fa>
	else if (rej_ext_ind->error_code != 0x23) {
   13b96:	7b62      	ldrb	r2, [r4, #13]
   13b98:	2a23      	cmp	r2, #35	; 0x23
   13b9a:	d012      	beq.n	13bc2 <isr_rx_conn_pkt_ctrl+0x8b6>
		LL_ASSERT(_radio.conn_upd == conn);
   13b9c:	4a48      	ldr	r2, [pc, #288]	; (13cc0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13b9e:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   13ba2:	4293      	cmp	r3, r2
   13ba4:	d166      	bne.n	13c74 <isr_rx_conn_pkt_ctrl+0x968>
		_radio.conn_upd = NULL;
   13ba6:	2200      	movs	r2, #0
   13ba8:	4945      	ldr	r1, [pc, #276]	; (13cc0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13baa:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			conn->llcp_conn_param.req;
   13bae:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
		conn->llcp_conn_param.ack =
   13bb2:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   13bb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (conn->role) {
   13bba:	f993 201d 	ldrsb.w	r2, [r3, #29]
   13bbe:	2a00      	cmp	r2, #0
   13bc0:	db5e      	blt.n	13c80 <isr_rx_conn_pkt_ctrl+0x974>
	if (!conn->llcp_conn_param.cmd) {
   13bc2:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   13bc6:	f012 0f08 	tst.w	r2, #8
   13bca:	f000 83dc 	beq.w	14386 <isr_rx_conn_pkt_ctrl+0x107a>
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13bce:	2208      	movs	r2, #8
   13bd0:	7122      	strb	r2, [r4, #4]
	cp->status = rej_ext_ind->error_code;
   13bd2:	7b62      	ldrb	r2, [r4, #13]
   13bd4:	72e2      	strb	r2, [r4, #11]
	cp->interval = conn->conn_interval;
   13bd6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   13bd8:	81a2      	strh	r2, [r4, #12]
	cp->latency = conn->latency;
   13bda:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   13bdc:	81e2      	strh	r2, [r4, #14]
	cp->timeout = conn->supervision_reload *
   13bde:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		      conn->conn_interval * 125 / 1000;
   13be0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   13be2:	fb03 f302 	mul.w	r3, r3, r2
		      conn->conn_interval * 125 / 1000;
   13be6:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   13bea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   13bee:	4a35      	ldr	r2, [pc, #212]	; (13cc4 <isr_rx_conn_pkt_ctrl+0x9b8>)
   13bf0:	fb82 1203 	smull	r1, r2, r2, r3
   13bf4:	17db      	asrs	r3, r3, #31
	cp->timeout = conn->supervision_reload *
   13bf6:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
   13bfa:	8223      	strh	r3, [r4, #16]
	*rx_enqueue = 1;
   13bfc:	2301      	movs	r3, #1
   13bfe:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13c00:	2400      	movs	r4, #0
   13c02:	f7ff bbbd 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13c06:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   13c0a:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
   13c0e:	4282      	cmp	r2, r0
   13c10:	d12a      	bne.n	13c68 <isr_rx_conn_pkt_ctrl+0x95c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13c12:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   13c16:	2105      	movs	r1, #5
   13c18:	f361 0202 	bfi	r2, r1, #0, #3
   13c1c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   13c20:	2501      	movs	r5, #1
   13c22:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   13c26:	2400      	movs	r4, #0
   13c28:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   13c2c:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   13c30:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   13c34:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   13c38:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   13c3c:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   13c40:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   13c44:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   13c48:	f365 0101 	bfi	r1, r5, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   13c4c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   13c50:	406a      	eors	r2, r5
   13c52:	f362 0182 	bfi	r1, r2, #2, #1
   13c56:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   13c5a:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
		conn->llcp_ack--;
   13c5e:	3801      	subs	r0, #1
   13c60:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
   13c64:	f7ff bb8c 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13c68:	4040      	eors	r0, r0
   13c6a:	f380 8811 	msr	BASEPRI, r0
   13c6e:	f04f 0004 	mov.w	r0, #4
   13c72:	df02      	svc	2
		LL_ASSERT(_radio.conn_upd == conn);
   13c74:	4040      	eors	r0, r0
   13c76:	f380 8811 	msr	BASEPRI, r0
   13c7a:	f04f 0004 	mov.w	r0, #4
   13c7e:	df02      	svc	2
			    conn->llcp_conn_param.ticks_to_offset_next;
   13c80:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
			conn->slave.ticks_to_offset =
   13c84:	671a      	str	r2, [r3, #112]	; 0x70
   13c86:	e79c      	b.n	13bc2 <isr_rx_conn_pkt_ctrl+0x8b6>
		conn->llcp_length.ack = conn->llcp_length.req;
   13c88:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->procedure_expire = 0;
   13c8c:	2200      	movs	r2, #0
   13c8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		conn->pause_tx = 0;
   13c92:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
   13c96:	f362 01c3 	bfi	r1, r2, #3, #1
   13c9a:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   13c9e:	2109      	movs	r1, #9
   13ca0:	7261      	strb	r1, [r4, #9]
		pdu_data_rx->payload.llctrl.opcode =
   13ca2:	2115      	movs	r1, #21
   13ca4:	72e1      	strb	r1, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   13ca6:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   13ca8:	81a1      	strh	r1, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   13caa:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
   13cac:	8221      	strh	r1, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   13cae:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   13cb0:	81e1      	strh	r1, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   13cb2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   13cb4:	8263      	strh	r3, [r4, #18]
		*rx_enqueue = 1;
   13cb6:	2301      	movs	r3, #1
   13cb8:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13cba:	4614      	mov	r4, r2
   13cbc:	f7ff bb60 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
   13cc0:	200014d4 	.word	0x200014d4
   13cc4:	10624dd3 	.word	0x10624dd3
		switch (rej_ext_ind->reject_opcode) {
   13cc8:	7b22      	ldrb	r2, [r4, #12]
   13cca:	2a03      	cmp	r2, #3
   13ccc:	f040 835e 	bne.w	1438c <isr_rx_conn_pkt_ctrl+0x1080>
			_radio.conn_curr->pause_rx = 0;
   13cd0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13cd4:	f36f 0282 	bfc	r2, #2, #1
   13cd8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   13cdc:	4bcb      	ldr	r3, [pc, #812]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13cde:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13ce2:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13ce6:	f36f 01c3 	bfc	r1, #3, #1
   13cea:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   13cee:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13cf2:	2300      	movs	r3, #0
   13cf4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
			pdu_rx->payload.llctrl.opcode =
   13cf8:	220d      	movs	r2, #13
   13cfa:	72e2      	strb	r2, [r4, #11]
				rej_ext_ind->error_code;
   13cfc:	7b62      	ldrb	r2, [r4, #13]
			pdu_rx->payload.llctrl.ctrldata.reject_ind.error_code =
   13cfe:	7322      	strb	r2, [r4, #12]
			*rx_enqueue = 1;
   13d00:	2201      	movs	r2, #1
   13d02:	703a      	strb	r2, [r7, #0]
	u8_t nack = 0;
   13d04:	461c      	mov	r4, r3
   13d06:	f7ff bb3b 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
		ping_resp_send(_radio.conn_curr);
   13d0a:	4628      	mov	r0, r5
   13d0c:	f7fd ff76 	bl	11bfc <ping_resp_send>
	u8_t nack = 0;
   13d10:	2400      	movs	r4, #0
		break;
   13d12:	f7ff bb35 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->procedure_expire = 0;
   13d16:	2400      	movs	r4, #0
   13d18:	f8a5 4044 	strh.w	r4, [r5, #68]	; 0x44
		break;
   13d1c:	f7ff bb30 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_length.req !=
   13d20:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
			   _radio.conn_curr->llcp_length.ack) {
   13d24:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
		} else if (_radio.conn_curr->llcp_length.req !=
   13d28:	4293      	cmp	r3, r2
   13d2a:	d014      	beq.n	13d56 <isr_rx_conn_pkt_ctrl+0xa4a>
			_radio.conn_curr->llcp_length.ack =
   13d2c:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   13d30:	4bb6      	ldr	r3, [pc, #728]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13d32:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13d36:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13d3a:	f36f 02c3 	bfc	r2, #3, #1
   13d3e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			*rx_enqueue = 1;
   13d42:	2301      	movs	r3, #1
   13d44:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   13d46:	4bb1      	ldr	r3, [pc, #708]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13d48:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13d4c:	2400      	movs	r4, #0
   13d4e:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   13d52:	f7ff bb15 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_phy.req !=
   13d56:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			   _radio.conn_curr->llcp_phy.ack) {
   13d5a:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		} else if (_radio.conn_curr->llcp_phy.req !=
   13d5e:	4293      	cmp	r3, r2
   13d60:	d02a      	beq.n	13db8 <isr_rx_conn_pkt_ctrl+0xaac>
			_radio.conn_curr->llcp_phy.ack =
   13d62:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   13d66:	49a9      	ldr	r1, [pc, #676]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13d68:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   13d6c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   13d70:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   13d74:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   13d78:	f362 0002 	bfi	r0, r2, #0, #3
   13d7c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   13d80:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13d84:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   13d88:	f013 0f02 	tst.w	r3, #2
   13d8c:	d0db      	beq.n	13d46 <isr_rx_conn_pkt_ctrl+0xa3a>
				radio_pdu_node_rx->hdr.type =
   13d8e:	230c      	movs	r3, #12
   13d90:	7123      	strb	r3, [r4, #4]
				p->status = 0;
   13d92:	2300      	movs	r3, #0
   13d94:	72e3      	strb	r3, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   13d96:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13d9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   13d9e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13da2:	7323      	strb	r3, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   13da4:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13da8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   13dac:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13db0:	7363      	strb	r3, [r4, #13]
				*rx_enqueue = 1;
   13db2:	2301      	movs	r3, #1
   13db4:	703b      	strb	r3, [r7, #0]
   13db6:	e7c6      	b.n	13d46 <isr_rx_conn_pkt_ctrl+0xa3a>
			switch (llctrl->ctrldata.unknown_rsp.type) {
   13db8:	7b23      	ldrb	r3, [r4, #12]
   13dba:	2b12      	cmp	r3, #18
   13dbc:	d0c3      	beq.n	13d46 <isr_rx_conn_pkt_ctrl+0xa3a>
				*rx_enqueue = 1;
   13dbe:	2301      	movs	r3, #1
   13dc0:	703b      	strb	r3, [r7, #0]
				break;
   13dc2:	e7c0      	b.n	13d46 <isr_rx_conn_pkt_ctrl+0xa3a>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13dc4:	4b91      	ldr	r3, [pc, #580]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13dc6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13dca:	8e01      	ldrh	r1, [r0, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   13dcc:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   13dce:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   13dd2:	f8b0 8034 	ldrh.w	r8, [r0, #52]	; 0x34
	    ((_radio.conn_curr->llcp_length.req ==
   13dd6:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	      _radio.conn_curr->llcp_length.ack) &&
   13dda:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	if (/* Local idle, and Peer request then complete the Peer procedure
   13dde:	429a      	cmp	r2, r3
   13de0:	d020      	beq.n	13e24 <isr_rx_conn_pkt_ctrl+0xb18>
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   13de2:	429a      	cmp	r2, r3
   13de4:	d007      	beq.n	13df6 <isr_rx_conn_pkt_ctrl+0xaea>
	     ((((_radio.conn_curr->llcp_length.state ==
   13de6:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
		 LLCP_LENGTH_STATE_REQ) ||
   13dea:	f003 0303 	and.w	r3, r3, #3
	      _radio.conn_curr->llcp_length.ack) &&
   13dee:	2b01      	cmp	r3, #1
   13df0:	d960      	bls.n	13eb4 <isr_rx_conn_pkt_ctrl+0xba8>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   13df2:	2b02      	cmp	r3, #2
   13df4:	d062      	beq.n	13ebc <isr_rx_conn_pkt_ctrl+0xbb0>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   13df6:	78f3      	ldrb	r3, [r6, #3]
   13df8:	2b15      	cmp	r3, #21
   13dfa:	f040 80cb 	bne.w	13f94 <isr_rx_conn_pkt_ctrl+0xc88>
	u8_t nack = 0;
   13dfe:	2400      	movs	r4, #0
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   13e00:	78f3      	ldrb	r3, [r6, #3]
	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
   13e02:	2b14      	cmp	r3, #20
   13e04:	f47f aabc 	bne.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   13e08:	2c00      	cmp	r4, #0
   13e0a:	f47f aab9 	bne.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
		length_resp_send(_radio.conn_curr, eff_rx_octets, eff_rx_time,
   13e0e:	4b7f      	ldr	r3, [pc, #508]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13e10:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13e14:	f8cd 8000 	str.w	r8, [sp]
   13e18:	462b      	mov	r3, r5
   13e1a:	464a      	mov	r2, r9
   13e1c:	f7fd ff0a 	bl	11c34 <length_resp_send>
		break;
   13e20:	f7ff baae 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
	     (pdu_data_rx->payload.llctrl.opcode ==
   13e24:	78f4      	ldrb	r4, [r6, #3]
	      _radio.conn_curr->llcp_length.ack) &&
   13e26:	2c14      	cmp	r4, #20
   13e28:	d1db      	bne.n	13de2 <isr_rx_conn_pkt_ctrl+0xad6>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   13e2a:	88b3      	ldrh	r3, [r6, #4]
   13e2c:	2b1a      	cmp	r3, #26
   13e2e:	d903      	bls.n	13e38 <isr_rx_conn_pkt_ctrl+0xb2c>
			eff_tx_octets = min(lr->max_rx_octets,
   13e30:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   13e32:	429d      	cmp	r5, r3
   13e34:	bf28      	it	cs
   13e36:	461d      	movcs	r5, r3
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   13e38:	f8b6 a008 	ldrh.w	sl, [r6, #8]
   13e3c:	f1ba 0f1a 	cmp.w	sl, #26
   13e40:	d942      	bls.n	13ec8 <isr_rx_conn_pkt_ctrl+0xbbc>
			eff_rx_octets = min(lr->max_tx_octets,
   13e42:	f1ba 0f1b 	cmp.w	sl, #27
   13e46:	bf28      	it	cs
   13e48:	f04f 0a1b 	movcs.w	sl, #27
		if (lr->max_rx_time >=
   13e4c:	88f3      	ldrh	r3, [r6, #6]
   13e4e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13e52:	d304      	bcc.n	13e5e <isr_rx_conn_pkt_ctrl+0xb52>
			eff_tx_time = min(lr->max_rx_time,
   13e54:	f8b0 8032 	ldrh.w	r8, [r0, #50]	; 0x32
   13e58:	4598      	cmp	r8, r3
   13e5a:	bf28      	it	cs
   13e5c:	4698      	movcs	r8, r3
		if (lr->max_tx_time >=
   13e5e:	8973      	ldrh	r3, [r6, #10]
   13e60:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13e64:	d305      	bcc.n	13e72 <isr_rx_conn_pkt_ctrl+0xb66>
			eff_rx_time = min(lr->max_tx_time,
   13e66:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13e6a:	bf28      	it	cs
   13e6c:	f44f 73a4 	movcs.w	r3, #328	; 0x148
   13e70:	4699      	mov	r9, r3
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   13e72:	4551      	cmp	r1, sl
   13e74:	d066      	beq.n	13f44 <isr_rx_conn_pkt_ctrl+0xc38>
	if (_radio.packet_rx_acquire >=
   13e76:	4b65      	ldr	r3, [pc, #404]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13e78:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   13e7c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13e80:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   13e82:	429a      	cmp	r2, r3
   13e84:	d322      	bcc.n	13ecc <isr_rx_conn_pkt_ctrl+0xbc0>
			_radio.packet_rx_last);
   13e86:	4b61      	ldr	r3, [pc, #388]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13e88:	f893 413d 	ldrb.w	r4, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   13e8c:	1b14      	subs	r4, r2, r4
   13e8e:	b2e4      	uxtb	r4, r4
			free_count_rx = packet_rx_acquired_count_get()
   13e90:	b2a4      	uxth	r4, r4
				+ mem_free_count_get(_radio.pkt_rx_data_free);
   13e92:	4b5e      	ldr	r3, [pc, #376]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13e94:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   13e98:	f7fb fa79 	bl	f38e <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get()
   13e9c:	1823      	adds	r3, r4, r0
   13e9e:	b29b      	uxth	r3, r3
			LL_ASSERT(free_count_rx <= 0xFF);
   13ea0:	2bff      	cmp	r3, #255	; 0xff
   13ea2:	d81d      	bhi.n	13ee0 <isr_rx_conn_pkt_ctrl+0xbd4>
			if (_radio.packet_rx_data_count == free_count_rx) {
   13ea4:	4a59      	ldr	r2, [pc, #356]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13ea6:	f892 2136 	ldrb.w	r2, [r2, #310]	; 0x136
   13eaa:	4293      	cmp	r3, r2
   13eac:	d01e      	beq.n	13eec <isr_rx_conn_pkt_ctrl+0xbe0>
   13eae:	4651      	mov	r1, sl
				nack = 1;
   13eb0:	2401      	movs	r4, #1
   13eb2:	e7a5      	b.n	13e00 <isr_rx_conn_pkt_ctrl+0xaf4>
	       (pdu_data_rx->payload.llctrl.opcode ==
   13eb4:	78f2      	ldrb	r2, [r6, #3]
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
   13eb6:	2a14      	cmp	r2, #20
   13eb8:	d19b      	bne.n	13df2 <isr_rx_conn_pkt_ctrl+0xae6>
   13eba:	e7b6      	b.n	13e2a <isr_rx_conn_pkt_ctrl+0xb1e>
	       ((pdu_data_rx->payload.llctrl.opcode ==
   13ebc:	78f3      	ldrb	r3, [r6, #3]
		 PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) ||
   13ebe:	3b14      	subs	r3, #20
   13ec0:	b2db      	uxtb	r3, r3
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   13ec2:	2b01      	cmp	r3, #1
   13ec4:	d897      	bhi.n	13df6 <isr_rx_conn_pkt_ctrl+0xaea>
   13ec6:	e7b0      	b.n	13e2a <isr_rx_conn_pkt_ctrl+0xb1e>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13ec8:	468a      	mov	sl, r1
   13eca:	e7bf      	b.n	13e4c <isr_rx_conn_pkt_ctrl+0xb40>
		return (_radio.packet_rx_count -
   13ecc:	4b4f      	ldr	r3, [pc, #316]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13ece:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   13ed2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   13ed6:	1ae4      	subs	r4, r4, r3
			_radio.packet_rx_last +
   13ed8:	fa52 f484 	uxtab	r4, r2, r4
   13edc:	b2e4      	uxtb	r4, r4
   13ede:	e7d7      	b.n	13e90 <isr_rx_conn_pkt_ctrl+0xb84>
			LL_ASSERT(free_count_rx <= 0xFF);
   13ee0:	4040      	eors	r0, r0
   13ee2:	f380 8811 	msr	BASEPRI, r0
   13ee6:	f04f 0004 	mov.w	r0, #4
   13eea:	df02      	svc	2
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13eec:	4b47      	ldr	r3, [pc, #284]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13eee:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13ef2:	85d5      	strh	r5, [r2, #46]	; 0x2e
				_radio.conn_curr->llcp_length.rx_octets =
   13ef4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13ef8:	f8a2 a0ec 	strh.w	sl, [r2, #236]	; 0xec
				_radio.conn_curr->llcp_length.tx_octets =
   13efc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f00:	f8a2 50ee 	strh.w	r5, [r2, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   13f04:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f08:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   13f0c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f10:	f8a2 90f0 	strh.w	r9, [r2, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   13f14:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f18:	f8a2 80f2 	strh.w	r8, [r2, #242]	; 0xf2
				_radio.conn_curr->llcp_length.ack =
   13f1c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
					(_radio.conn_curr->llcp_length.req - 1);
   13f20:	f891 20e8 	ldrb.w	r2, [r1, #232]	; 0xe8
   13f24:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   13f26:	f881 20e9 	strb.w	r2, [r1, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   13f2a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13f2e:	f891 20ea 	ldrb.w	r2, [r1, #234]	; 0xea
   13f32:	f042 0203 	orr.w	r2, r2, #3
   13f36:	f881 20ea 	strb.w	r2, [r1, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   13f3a:	2203      	movs	r2, #3
   13f3c:	741a      	strb	r2, [r3, #16]
   13f3e:	4651      	mov	r1, sl
	u8_t nack = 0;
   13f40:	2400      	movs	r4, #0
   13f42:	e75d      	b.n	13e00 <isr_rx_conn_pkt_ctrl+0xaf4>
			_radio.conn_curr->pause_tx = 0;
   13f44:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   13f48:	f36f 03c3 	bfc	r3, #3, #1
   13f4c:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13f50:	4b2e      	ldr	r3, [pc, #184]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13f52:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f56:	85d5      	strh	r5, [r2, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   13f58:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f5c:	f8a2 9036 	strh.w	r9, [r2, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   13f60:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f64:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
			_radio.conn_curr->llcp_length.ack =
   13f68:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_length.req;
   13f6c:	f892 10e8 	ldrb.w	r1, [r2, #232]	; 0xe8
			_radio.conn_curr->llcp_length.ack =
   13f70:	f882 10e9 	strb.w	r1, [r2, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
   13f74:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13f78:	2400      	movs	r4, #0
   13f7a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
			lr->max_rx_octets = eff_rx_octets;
   13f7e:	f8a6 a004 	strh.w	sl, [r6, #4]
			lr->max_tx_octets = eff_tx_octets;
   13f82:	8135      	strh	r5, [r6, #8]
			lr->max_rx_time = eff_rx_time;
   13f84:	f8a6 9006 	strh.w	r9, [r6, #6]
			lr->max_tx_time = eff_tx_time;
   13f88:	f8a6 800a 	strh.w	r8, [r6, #10]
			*rx_enqueue = 1;
   13f8c:	2301      	movs	r3, #1
   13f8e:	703b      	strb	r3, [r7, #0]
   13f90:	4651      	mov	r1, sl
   13f92:	e735      	b.n	13e00 <isr_rx_conn_pkt_ctrl+0xaf4>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   13f94:	4040      	eors	r0, r0
   13f96:	f380 8811 	msr	BASEPRI, r0
   13f9a:	f04f 0004 	mov.w	r0, #4
   13f9e:	df02      	svc	2
		if (_radio.role == ROLE_MASTER) {
   13fa0:	4b1a      	ldr	r3, [pc, #104]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13fa2:	7bdb      	ldrb	r3, [r3, #15]
   13fa4:	b2db      	uxtb	r3, r3
   13fa6:	2b04      	cmp	r3, #4
   13fa8:	d032      	beq.n	14010 <isr_rx_conn_pkt_ctrl+0xd04>
			_radio.conn_curr->llcp_phy.state =
   13faa:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13fae:	2202      	movs	r2, #2
   13fb0:	f362 0301 	bfi	r3, r2, #0, #2
   13fb4:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			if (_radio.conn_curr->llcp_phy.ack ==
   13fb8:	4b14      	ldr	r3, [pc, #80]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13fba:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13fbe:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
			    _radio.conn_curr->llcp_phy.req) {
   13fc2:	f893 10f4 	ldrb.w	r1, [r3, #244]	; 0xf4
			if (_radio.conn_curr->llcp_phy.ack ==
   13fc6:	428a      	cmp	r2, r1
   13fc8:	f000 8099 	beq.w	140fe <isr_rx_conn_pkt_ctrl+0xdf2>
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   13fcc:	4a0f      	ldr	r2, [pc, #60]	; (1400c <isr_rx_conn_pkt_ctrl+0xd00>)
   13fce:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13fd2:	7b61      	ldrb	r1, [r4, #13]
   13fd4:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13fd8:	f3c3 0582 	ubfx	r5, r3, #2, #3
   13fdc:	4029      	ands	r1, r5
   13fde:	f361 0384 	bfi	r3, r1, #2, #3
   13fe2:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   13fe6:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13fea:	7b21      	ldrb	r1, [r4, #12]
   13fec:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13ff0:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   13ff4:	f361 1347 	bfi	r3, r1, #5, #3
   13ff8:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			phy_rsp_send(_radio.conn_curr);
   13ffc:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   14000:	f7fd fe5c 	bl	11cbc <phy_rsp_send>
	u8_t nack = 0;
   14004:	2400      	movs	r4, #0
   14006:	f7ff b9bb 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
   1400a:	bf00      	nop
   1400c:	200014d4 	.word	0x200014d4
			if ((_radio.conn_curr->llcp_phy.ack !=
   14010:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   14014:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   14018:	429a      	cmp	r2, r3
   1401a:	d007      	beq.n	1402c <isr_rx_conn_pkt_ctrl+0xd20>
			    ((_radio.conn_curr->llcp_phy.state ==
   1401c:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
			      LLCP_PHY_STATE_RSP_WAIT) ||
   14020:	f003 0303 	and.w	r3, r3, #3
   14024:	3b01      	subs	r3, #1
   14026:	b2db      	uxtb	r3, r3
			     _radio.conn_curr->llcp_phy.req) &&
   14028:	2b02      	cmp	r3, #2
   1402a:	d913      	bls.n	14054 <isr_rx_conn_pkt_ctrl+0xd48>
			} else if ((_radio.conn_curr->llcp_req !=
   1402c:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
				    _radio.conn_curr->llcp_ack) ||
   14030:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
			} else if ((_radio.conn_curr->llcp_req !=
   14034:	429a      	cmp	r2, r3
   14036:	d105      	bne.n	14044 <isr_rx_conn_pkt_ctrl+0xd38>
				   (_radio.conn_curr->llcp_conn_param.req !=
   14038:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
				    _radio.conn_curr->llcp_conn_param.ack)) {
   1403c:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
				    _radio.conn_curr->llcp_ack) ||
   14040:	429a      	cmp	r2, r3
   14042:	d00f      	beq.n	14064 <isr_rx_conn_pkt_ctrl+0xd58>
				reject_ext_ind_send(_radio.conn_curr,
   14044:	222a      	movs	r2, #42	; 0x2a
   14046:	2116      	movs	r1, #22
   14048:	4628      	mov	r0, r5
   1404a:	f7fd fe17 	bl	11c7c <reject_ext_ind_send>
	u8_t nack = 0;
   1404e:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   14050:	f7ff b996 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   14054:	2223      	movs	r2, #35	; 0x23
   14056:	2116      	movs	r1, #22
   14058:	4628      	mov	r0, r5
   1405a:	f7fd fe0f 	bl	11c7c <reject_ext_ind_send>
	u8_t nack = 0;
   1405e:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   14060:	f7ff b98e 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
				_radio.conn_curr->llcp_phy.state =
   14064:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   14068:	f043 0303 	orr.w	r3, r3, #3
   1406c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   14070:	4bce      	ldr	r3, [pc, #824]	; (143ac <isr_rx_conn_pkt_ctrl+0x10a0>)
   14072:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14076:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
				    _radio.conn_curr->llcp_phy.req) {
   1407a:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
				if (_radio.conn_curr->llcp_phy.ack ==
   1407e:	428b      	cmp	r3, r1
   14080:	d01a      	beq.n	140b8 <isr_rx_conn_pkt_ctrl+0xdac>
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   14082:	49ca      	ldr	r1, [pc, #808]	; (143ac <isr_rx_conn_pkt_ctrl+0x10a0>)
   14084:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
   14088:	7b62      	ldrb	r2, [r4, #13]
   1408a:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   1408e:	f3c3 0582 	ubfx	r5, r3, #2, #3
   14092:	402a      	ands	r2, r5
   14094:	f362 0384 	bfi	r3, r2, #2, #3
   14098:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   1409c:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
   140a0:	7b22      	ldrb	r2, [r4, #12]
   140a2:	f891 30f6 	ldrb.w	r3, [r1, #246]	; 0xf6
   140a6:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   140aa:	f362 1347 	bfi	r3, r2, #5, #3
   140ae:	f881 30f6 	strb.w	r3, [r1, #246]	; 0xf6
	u8_t nack = 0;
   140b2:	2400      	movs	r4, #0
   140b4:	f7ff b964 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
					_radio.conn_curr->llcp_phy.ack--;
   140b8:	3b01      	subs	r3, #1
   140ba:	f882 30f5 	strb.w	r3, [r2, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   140be:	4bbb      	ldr	r3, [pc, #748]	; (143ac <isr_rx_conn_pkt_ctrl+0x10a0>)
   140c0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   140c4:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   140c8:	f36f 0141 	bfc	r1, #1, #1
   140cc:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   140d0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_tx;
   140d4:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
					_radio.conn_curr->llcp_phy.tx =
   140d8:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   140dc:	f360 0184 	bfi	r1, r0, #2, #3
   140e0:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
					_radio.conn_curr->llcp_phy.rx =
   140e4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_rx;
   140e8:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   140ec:	f3c2 02c2 	ubfx	r2, r2, #3, #3
					_radio.conn_curr->llcp_phy.rx =
   140f0:	f893 10f6 	ldrb.w	r1, [r3, #246]	; 0xf6
   140f4:	f362 1147 	bfi	r1, r2, #5, #3
   140f8:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
   140fc:	e7c1      	b.n	14082 <isr_rx_conn_pkt_ctrl+0xd76>
				_radio.conn_curr->llcp_phy.ack--;
   140fe:	3a01      	subs	r2, #1
   14100:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->llcp_phy.cmd = 0;
   14104:	4ba9      	ldr	r3, [pc, #676]	; (143ac <isr_rx_conn_pkt_ctrl+0x10a0>)
   14106:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1410a:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   1410e:	f36f 0141 	bfc	r1, #1, #1
   14112:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
				_radio.conn_curr->llcp_phy.tx =
   14116:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_tx;
   1411a:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
				_radio.conn_curr->llcp_phy.tx =
   1411e:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   14122:	f360 0184 	bfi	r1, r0, #2, #3
   14126:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx =
   1412a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_rx;
   1412e:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
   14132:	f3c1 01c2 	ubfx	r1, r1, #3, #3
				_radio.conn_curr->llcp_phy.rx =
   14136:	f892 00f6 	ldrb.w	r0, [r2, #246]	; 0xf6
   1413a:	f361 1047 	bfi	r0, r1, #5, #3
   1413e:	f882 00f6 	strb.w	r0, [r2, #246]	; 0xf6
				_radio.conn_curr->procedure_expire =
   14142:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
					_radio.conn_curr->procedure_reload;
   14146:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
				_radio.conn_curr->procedure_expire =
   1414a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   1414e:	e73d      	b.n	13fcc <isr_rx_conn_pkt_ctrl+0xcc0>
		if ((_radio.role == ROLE_MASTER) &&
   14150:	4b96      	ldr	r3, [pc, #600]	; (143ac <isr_rx_conn_pkt_ctrl+0x10a0>)
   14152:	7bdb      	ldrb	r3, [r3, #15]
   14154:	b2db      	uxtb	r3, r3
   14156:	2b04      	cmp	r3, #4
   14158:	d002      	beq.n	14160 <isr_rx_conn_pkt_ctrl+0xe54>
	u8_t nack = 0;
   1415a:	2400      	movs	r4, #0
   1415c:	f7ff b910 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
		    (_radio.conn_curr->llcp_phy.ack !=
   14160:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		     _radio.conn_curr->llcp_phy.req) &&
   14164:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
		if ((_radio.role == ROLE_MASTER) &&
   14168:	429a      	cmp	r2, r3
   1416a:	f000 8112 	beq.w	14392 <isr_rx_conn_pkt_ctrl+0x1086>
		    (_radio.conn_curr->llcp_phy.state ==
   1416e:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   14172:	f003 0303 	and.w	r3, r3, #3
		     _radio.conn_curr->llcp_phy.req) &&
   14176:	2b02      	cmp	r3, #2
   14178:	d002      	beq.n	14180 <isr_rx_conn_pkt_ctrl+0xe74>
	u8_t nack = 0;
   1417a:	2400      	movs	r4, #0
   1417c:	f7ff b900 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   14180:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   14184:	f043 0303 	orr.w	r3, r3, #3
   14188:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   1418c:	4a87      	ldr	r2, [pc, #540]	; (143ac <isr_rx_conn_pkt_ctrl+0x10a0>)
   1418e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   14192:	7b61      	ldrb	r1, [r4, #13]
   14194:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   14198:	f3c3 0582 	ubfx	r5, r3, #2, #3
   1419c:	4029      	ands	r1, r5
   1419e:	f361 0384 	bfi	r3, r1, #2, #3
   141a2:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   141a6:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   141aa:	7b21      	ldrb	r1, [r4, #12]
   141ac:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   141b0:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   141b4:	f361 1347 	bfi	r3, r1, #5, #3
   141b8:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->procedure_expire = 0;
   141bc:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   141c0:	2400      	movs	r4, #0
   141c2:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   141c6:	f7ff b8db 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
	struct connection *conn = _radio.conn_curr;
   141ca:	4b78      	ldr	r3, [pc, #480]	; (143ac <isr_rx_conn_pkt_ctrl+0x10a0>)
   141cc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
   141d0:	7b23      	ldrb	r3, [r4, #12]
   141d2:	7b61      	ldrb	r1, [r4, #13]
   141d4:	430b      	orrs	r3, r1
   141d6:	f013 0f07 	tst.w	r3, #7
   141da:	d134      	bne.n	14246 <isr_rx_conn_pkt_ctrl+0xf3a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   141dc:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   141e0:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
   141e4:	428b      	cmp	r3, r1
   141e6:	f000 8086 	beq.w	142f6 <isr_rx_conn_pkt_ctrl+0xfea>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   141ea:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   141ee:	f003 0303 	and.w	r3, r3, #3
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   141f2:	2b02      	cmp	r3, #2
   141f4:	d00c      	beq.n	14210 <isr_rx_conn_pkt_ctrl+0xf04>
			return 0;
   141f6:	2300      	movs	r3, #0
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
   141f8:	2b00      	cmp	r3, #0
   141fa:	f000 80cd 	beq.w	14398 <isr_rx_conn_pkt_ctrl+0x108c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   141fe:	4b6b      	ldr	r3, [pc, #428]	; (143ac <isr_rx_conn_pkt_ctrl+0x10a0>)
   14200:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14204:	2228      	movs	r2, #40	; 0x28
   14206:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   1420a:	2400      	movs	r4, #0
   1420c:	f7ff b8b8 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   14210:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
		conn->procedure_expire = 0;
   14214:	2300      	movs	r3, #0
   14216:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   1421a:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   1421e:	f013 0f02 	tst.w	r3, #2
   14222:	d06a      	beq.n	142fa <isr_rx_conn_pkt_ctrl+0xfee>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   14224:	230c      	movs	r3, #12
   14226:	7123      	strb	r3, [r4, #4]
		p->status = 0;
   14228:	2300      	movs	r3, #0
   1422a:	72e3      	strb	r3, [r4, #11]
		p->tx = conn->phy_tx;
   1422c:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   14230:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   14234:	7321      	strb	r1, [r4, #12]
		p->rx = conn->phy_rx;
   14236:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
   1423a:	f3c2 0202 	ubfx	r2, r2, #0, #3
   1423e:	7362      	strb	r2, [r4, #13]
		*rx_enqueue = 1;
   14240:	2201      	movs	r2, #1
   14242:	703a      	strb	r2, [r7, #0]
   14244:	e7d8      	b.n	141f8 <isr_rx_conn_pkt_ctrl+0xeec>
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   14246:	89e3      	ldrh	r3, [r4, #14]
   14248:	8c51      	ldrh	r1, [r2, #34]	; 0x22
   1424a:	1a5b      	subs	r3, r3, r1
   1424c:	b29b      	uxth	r3, r3
   1424e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14252:	da54      	bge.n	142fe <isr_rx_conn_pkt_ctrl+0xff2>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   14254:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   14258:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   1425c:	428b      	cmp	r3, r1
   1425e:	d134      	bne.n	142ca <isr_rx_conn_pkt_ctrl+0xfbe>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   14260:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   14264:	f892 00f4 	ldrb.w	r0, [r2, #244]	; 0xf4
   14268:	4283      	cmp	r3, r0
   1426a:	d005      	beq.n	14278 <isr_rx_conn_pkt_ctrl+0xf6c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   1426c:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   14270:	f003 0303 	and.w	r3, r3, #3
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   14274:	2b02      	cmp	r3, #2
   14276:	d02e      	beq.n	142d6 <isr_rx_conn_pkt_ctrl+0xfca>
	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
   14278:	7b60      	ldrb	r0, [r4, #13]
   1427a:	f000 0007 	and.w	r0, r0, #7
   1427e:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   14282:	f360 0384 	bfi	r3, r0, #2, #3
   14286:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
   1428a:	7b25      	ldrb	r5, [r4, #12]
   1428c:	b2db      	uxtb	r3, r3
   1428e:	f365 1347 	bfi	r3, r5, #5, #3
   14292:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = p->instant;
   14296:	89e3      	ldrh	r3, [r4, #14]
   14298:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
	conn->llcp.phy_upd_ind.initiate = 0;
   1429c:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   142a0:	f36f 0300 	bfc	r3, #0, #1
   142a4:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   142a8:	2408      	movs	r4, #8
   142aa:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
	conn->llcp_ack--;
   142ae:	3901      	subs	r1, #1
   142b0:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   142b4:	f003 031c 	and.w	r3, r3, #28
   142b8:	b31b      	cbz	r3, 14302 <isr_rx_conn_pkt_ctrl+0xff6>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   142ba:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   142be:	f360 0302 	bfi	r3, r0, #0, #3
   142c2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	return 0;
   142c6:	2300      	movs	r3, #0
   142c8:	e796      	b.n	141f8 <isr_rx_conn_pkt_ctrl+0xeec>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   142ca:	4040      	eors	r0, r0
   142cc:	f380 8811 	msr	BASEPRI, r0
   142d0:	f04f 0004 	mov.w	r0, #4
   142d4:	df02      	svc	2
		conn->llcp_phy.ack = conn->llcp_phy.req;
   142d6:	f882 00f5 	strb.w	r0, [r2, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   142da:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   142de:	f3c3 0340 	ubfx	r3, r3, #1, #1
   142e2:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
   142e6:	f363 0041 	bfi	r0, r3, #1, #1
   142ea:	f882 0078 	strb.w	r0, [r2, #120]	; 0x78
		conn->procedure_expire = 0;
   142ee:	2300      	movs	r3, #0
   142f0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
   142f4:	e7c0      	b.n	14278 <isr_rx_conn_pkt_ctrl+0xf6c>
			return 0;
   142f6:	2300      	movs	r3, #0
   142f8:	e77e      	b.n	141f8 <isr_rx_conn_pkt_ctrl+0xeec>
			return 0;
   142fa:	2300      	movs	r3, #0
   142fc:	e77c      	b.n	141f8 <isr_rx_conn_pkt_ctrl+0xeec>
		return 1;
   142fe:	2301      	movs	r3, #1
   14300:	e77a      	b.n	141f8 <isr_rx_conn_pkt_ctrl+0xeec>
	return 0;
   14302:	2300      	movs	r3, #0
   14304:	e778      	b.n	141f8 <isr_rx_conn_pkt_ctrl+0xeec>
		if (!_radio.conn_curr->role) {
   14306:	2b00      	cmp	r3, #0
   14308:	db49      	blt.n	1439e <isr_rx_conn_pkt_ctrl+0x1092>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   1430a:	7b21      	ldrb	r1, [r4, #12]
   1430c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   14310:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   14314:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   14318:	f002 0207 	and.w	r2, r2, #7
   1431c:	4313      	orrs	r3, r2
   1431e:	4219      	tst	r1, r3
   14320:	d040      	beq.n	143a4 <isr_rx_conn_pkt_ctrl+0x1098>
			if (conn->llcp_req != conn->llcp_ack) {
   14322:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   14326:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   1432a:	429a      	cmp	r2, r3
   1432c:	d002      	beq.n	14334 <isr_rx_conn_pkt_ctrl+0x1028>
	u8_t nack = 0;
   1432e:	2400      	movs	r4, #0
   14330:	f7ff b826 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
			memcpy(&conn->llcp.chan_map.chm[0],
   14334:	2205      	movs	r2, #5
   14336:	491e      	ldr	r1, [pc, #120]	; (143b0 <isr_rx_conn_pkt_ctrl+0x10a4>)
   14338:	f105 0079 	add.w	r0, r5, #121	; 0x79
   1433c:	f7eb ffc0 	bl	2c0 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   14340:	2301      	movs	r3, #1
   14342:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   14346:	2302      	movs	r3, #2
   14348:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   1434c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   14350:	3b01      	subs	r3, #1
   14352:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	u8_t nack = 0;
   14356:	2400      	movs	r4, #0
   14358:	f7ff b812 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
		unknown_rsp_send(_radio.conn_curr,
   1435c:	4628      	mov	r0, r5
   1435e:	f7fd fcd3 	bl	11d08 <unknown_rsp_send>
	u8_t nack = 0;
   14362:	2400      	movs	r4, #0
		break;
   14364:	f7ff b80c 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
	u8_t nack = 0;
   14368:	2400      	movs	r4, #0
   1436a:	f7ff b809 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
   1436e:	2400      	movs	r4, #0
   14370:	f7ff b806 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
   14374:	2400      	movs	r4, #0
   14376:	f7ff b803 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
   1437a:	2400      	movs	r4, #0
   1437c:	f7ff b800 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
   14380:	2400      	movs	r4, #0
   14382:	f7fe bffd 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
   14386:	2400      	movs	r4, #0
   14388:	f7fe bffa 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
   1438c:	2400      	movs	r4, #0
   1438e:	f7fe bff7 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
   14392:	2400      	movs	r4, #0
   14394:	f7fe bff4 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
   14398:	2400      	movs	r4, #0
   1439a:	f7fe bff1 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
   1439e:	2400      	movs	r4, #0
   143a0:	f7fe bfee 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
   143a4:	2400      	movs	r4, #0
   143a6:	f7fe bfeb 	b.w	13380 <isr_rx_conn_pkt_ctrl+0x74>
   143aa:	bf00      	nop
   143ac:	200014d4 	.word	0x200014d4
   143b0:	200015ea 	.word	0x200015ea

000143b4 <packet_rx_enqueue>:
{
   143b4:	b508      	push	{r3, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   143b6:	4a1a      	ldr	r2, [pc, #104]	; (14420 <packet_rx_enqueue+0x6c>)
   143b8:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   143bc:	b2db      	uxtb	r3, r3
   143be:	f892 213e 	ldrb.w	r2, [r2, #318]	; 0x13e
   143c2:	4293      	cmp	r3, r2
   143c4:	d01d      	beq.n	14402 <packet_rx_enqueue+0x4e>
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   143c6:	4a16      	ldr	r2, [pc, #88]	; (14420 <packet_rx_enqueue+0x6c>)
   143c8:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   143cc:	f892 113d 	ldrb.w	r1, [r2, #317]	; 0x13d
   143d0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	link = radio_pdu_node_rx->hdr.onion.link;
   143d4:	6801      	ldr	r1, [r0, #0]
	    _radio.packet_release_last;
   143d6:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   143da:	7003      	strb	r3, [r0, #0]
	last = _radio.packet_rx_last + 1;
   143dc:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   143e0:	3301      	adds	r3, #1
   143e2:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
   143e4:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   143e8:	4293      	cmp	r3, r2
   143ea:	d010      	beq.n	1440e <packet_rx_enqueue+0x5a>
	_radio.packet_rx_last = last;
   143ec:	4a0c      	ldr	r2, [pc, #48]	; (14420 <packet_rx_enqueue+0x6c>)
   143ee:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	link = memq_enqueue(radio_pdu_node_rx, link,
   143f2:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   143f6:	f7fa fffe 	bl	f3f6 <memq_enqueue>
	LL_ASSERT(link);
   143fa:	b150      	cbz	r0, 14412 <packet_rx_enqueue+0x5e>
	packet_rx_callback();
   143fc:	f7fe f871 	bl	124e2 <packet_rx_callback>
   14400:	bd08      	pop	{r3, pc}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   14402:	4040      	eors	r0, r0
   14404:	f380 8811 	msr	BASEPRI, r0
   14408:	f04f 0004 	mov.w	r0, #4
   1440c:	df02      	svc	2
		last = 0;
   1440e:	2300      	movs	r3, #0
   14410:	e7ec      	b.n	143ec <packet_rx_enqueue+0x38>
	LL_ASSERT(link);
   14412:	4040      	eors	r0, r0
   14414:	f380 8811 	msr	BASEPRI, r0
   14418:	f04f 0004 	mov.w	r0, #4
   1441c:	df02      	svc	2
   1441e:	bf00      	nop
   14420:	200014d4 	.word	0x200014d4

00014424 <mayfly_adv_stop>:
{
   14424:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
   14426:	4b1c      	ldr	r3, [pc, #112]	; (14498 <mayfly_adv_stop+0x74>)
   14428:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1442c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14430:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   14432:	429a      	cmp	r2, r3
   14434:	d31d      	bcc.n	14472 <mayfly_adv_stop+0x4e>
			_radio.packet_rx_last);
   14436:	4b18      	ldr	r3, [pc, #96]	; (14498 <mayfly_adv_stop+0x74>)
   14438:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1443c:	1ad3      	subs	r3, r2, r3
   1443e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14440:	b30b      	cbz	r3, 14486 <mayfly_adv_stop+0x62>
	return _radio.packet_rx[_radio.packet_rx_last];
   14442:	4b15      	ldr	r3, [pc, #84]	; (14498 <mayfly_adv_stop+0x74>)
   14444:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14448:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1444c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
	LL_ASSERT(radio_pdu_node_rx);
   14450:	b1dc      	cbz	r4, 1448a <mayfly_adv_stop+0x66>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   14452:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14456:	80e3      	strh	r3, [r4, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14458:	2306      	movs	r3, #6
   1445a:	7123      	strb	r3, [r4, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
   1445c:	221d      	movs	r2, #29
   1445e:	2100      	movs	r1, #0
   14460:	f104 000b 	add.w	r0, r4, #11
   14464:	f016 fa28 	bl	2a8b8 <memset>
	radio_le_conn_cmplt->status = 0x3c;
   14468:	233c      	movs	r3, #60	; 0x3c
   1446a:	72e3      	strb	r3, [r4, #11]
	packet_rx_enqueue();
   1446c:	f7ff ffa2 	bl	143b4 <packet_rx_enqueue>
   14470:	bd10      	pop	{r4, pc}
		return (_radio.packet_rx_count -
   14472:	4909      	ldr	r1, [pc, #36]	; (14498 <mayfly_adv_stop+0x74>)
   14474:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   14478:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1447c:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1447e:	fa52 f383 	uxtab	r3, r2, r3
   14482:	b2db      	uxtb	r3, r3
   14484:	e7dc      	b.n	14440 <mayfly_adv_stop+0x1c>
		return 0;
   14486:	2400      	movs	r4, #0
   14488:	e7e2      	b.n	14450 <mayfly_adv_stop+0x2c>
	LL_ASSERT(radio_pdu_node_rx);
   1448a:	4040      	eors	r0, r0
   1448c:	f380 8811 	msr	BASEPRI, r0
   14490:	f04f 0004 	mov.w	r0, #4
   14494:	df02      	svc	2
   14496:	bf00      	nop
   14498:	200014d4 	.word	0x200014d4

0001449c <terminate_ind_rx_enqueue>:
{
   1449c:	b510      	push	{r4, lr}
   1449e:	4603      	mov	r3, r0
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   144a0:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
   144a4:	b1bc      	cbz	r4, 144d6 <terminate_ind_rx_enqueue+0x3a>
   144a6:	30b4      	adds	r0, #180	; 0xb4
   144a8:	460a      	mov	r2, r1
	radio_pdu_node_rx->hdr.handle = conn->handle;
   144aa:	8c19      	ldrh	r1, [r3, #32]
   144ac:	f8a3 10ba 	strh.w	r1, [r3, #186]	; 0xba
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   144b0:	2107      	movs	r1, #7
   144b2:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
   144b6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	    _radio.packet_release_last;
   144ba:	4a0d      	ldr	r2, [pc, #52]	; (144f0 <terminate_ind_rx_enqueue+0x54>)
   144bc:	f892 1174 	ldrb.w	r1, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   144c0:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	link = memq_enqueue(radio_pdu_node_rx, link,
   144c4:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   144c8:	4621      	mov	r1, r4
   144ca:	f7fa ff94 	bl	f3f6 <memq_enqueue>
	LL_ASSERT(link);
   144ce:	b140      	cbz	r0, 144e2 <terminate_ind_rx_enqueue+0x46>
	packet_rx_callback();
   144d0:	f7fe f807 	bl	124e2 <packet_rx_callback>
   144d4:	bd10      	pop	{r4, pc}
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   144d6:	4040      	eors	r0, r0
   144d8:	f380 8811 	msr	BASEPRI, r0
   144dc:	f04f 0004 	mov.w	r0, #4
   144e0:	df02      	svc	2
	LL_ASSERT(link);
   144e2:	4040      	eors	r0, r0
   144e4:	f380 8811 	msr	BASEPRI, r0
   144e8:	f04f 0004 	mov.w	r0, #4
   144ec:	df02      	svc	2
   144ee:	bf00      	nop
   144f0:	200014d4 	.word	0x200014d4

000144f4 <isr_rx_scan_report>:
{
   144f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_radio.packet_rx_acquire >=
   144f8:	4b31      	ldr	r3, [pc, #196]	; (145c0 <isr_rx_scan_report+0xcc>)
   144fa:	f893 413e 	ldrb.w	r4, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   144fe:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14502:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   14504:	429c      	cmp	r4, r3
   14506:	d327      	bcc.n	14558 <isr_rx_scan_report+0x64>
			_radio.packet_rx_last);
   14508:	4b2d      	ldr	r3, [pc, #180]	; (145c0 <isr_rx_scan_report+0xcc>)
   1450a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1450e:	1ae3      	subs	r3, r4, r3
   14510:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14512:	2b02      	cmp	r3, #2
   14514:	d92a      	bls.n	1456c <isr_rx_scan_report+0x78>
	return _radio.packet_rx[_radio.packet_rx_last];
   14516:	4b2a      	ldr	r3, [pc, #168]	; (145c0 <isr_rx_scan_report+0xcc>)
   14518:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
   1451c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14520:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
	if (radio_pdu_node_rx == 0) {
   14524:	2c00      	cmp	r4, #0
   14526:	d047      	beq.n	145b8 <isr_rx_scan_report+0xc4>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   14528:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1452c:	80e3      	strh	r3, [r4, #6]
	} else if (_radio.scanner.phy) {
   1452e:	4b24      	ldr	r3, [pc, #144]	; (145c0 <isr_rx_scan_report+0xcc>)
   14530:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   14534:	f013 0f07 	tst.w	r3, #7
   14538:	d020      	beq.n	1457c <isr_rx_scan_report+0x88>
		switch (_radio.scanner.phy) {
   1453a:	4b21      	ldr	r3, [pc, #132]	; (145c0 <isr_rx_scan_report+0xcc>)
   1453c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   14540:	f003 0307 	and.w	r3, r3, #7
   14544:	2b01      	cmp	r3, #1
   14546:	d013      	beq.n	14570 <isr_rx_scan_report+0x7c>
   14548:	2b04      	cmp	r3, #4
   1454a:	d014      	beq.n	14576 <isr_rx_scan_report+0x82>
			LL_ASSERT(0);
   1454c:	4040      	eors	r0, r0
   1454e:	f380 8811 	msr	BASEPRI, r0
   14552:	f04f 0004 	mov.w	r0, #4
   14556:	df02      	svc	2
		return (_radio.packet_rx_count -
   14558:	4d19      	ldr	r5, [pc, #100]	; (145c0 <isr_rx_scan_report+0xcc>)
   1455a:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
			_radio.packet_rx_last +
   1455e:	f895 513d 	ldrb.w	r5, [r5, #317]	; 0x13d
		return (_radio.packet_rx_count -
   14562:	1b5b      	subs	r3, r3, r5
			_radio.packet_rx_last +
   14564:	fa54 f383 	uxtab	r3, r4, r3
   14568:	b2db      	uxtb	r3, r3
   1456a:	e7d2      	b.n	14512 <isr_rx_scan_report+0x1e>
		return 0;
   1456c:	2400      	movs	r4, #0
   1456e:	e7d9      	b.n	14524 <isr_rx_scan_report+0x30>
			radio_pdu_node_rx->hdr.type =
   14570:	2303      	movs	r3, #3
   14572:	7123      	strb	r3, [r4, #4]
			break;
   14574:	e004      	b.n	14580 <isr_rx_scan_report+0x8c>
			radio_pdu_node_rx->hdr.type =
   14576:	2304      	movs	r3, #4
   14578:	7123      	strb	r3, [r4, #4]
			break;
   1457a:	e001      	b.n	14580 <isr_rx_scan_report+0x8c>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1457c:	2302      	movs	r3, #2
   1457e:	7123      	strb	r3, [r4, #4]
   14580:	4615      	mov	r5, r2
   14582:	460e      	mov	r6, r1
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
   14584:	f104 0708 	add.w	r7, r4, #8
			     pdu_adv_rx->len] =
   14588:	f894 8009 	ldrb.w	r8, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   1458c:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
   14590:	b968      	cbnz	r0, 145ae <isr_rx_scan_report+0xba>
   14592:	207f      	movs	r0, #127	; 0x7f
   14594:	f807 0008 	strb.w	r0, [r7, r8]
			     pdu_adv_rx->len + 1] = rl_idx;
   14598:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   1459a:	3303      	adds	r3, #3
			     pdu_adv_rx->len + 1] = rl_idx;
   1459c:	54fe      	strb	r6, [r7, r3]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   1459e:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   145a0:	3304      	adds	r3, #4
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   145a2:	54fd      	strb	r5, [r7, r3]
	packet_rx_enqueue();
   145a4:	f7ff ff06 	bl	143b4 <packet_rx_enqueue>
	return 0;
   145a8:	2000      	movs	r0, #0
   145aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   145ae:	f7fb f947 	bl	f840 <radio_rssi_get>
			     pdu_adv_rx->len] =
   145b2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   145b6:	e7ed      	b.n	14594 <isr_rx_scan_report+0xa0>
		return 1;
   145b8:	2001      	movs	r0, #1
}
   145ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   145be:	bf00      	nop
   145c0:	200014d4 	.word	0x200014d4

000145c4 <isr_rx_conn>:
{
   145c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   145c8:	b084      	sub	sp, #16
	u8_t rx_enqueue = 0;
   145ca:	2300      	movs	r3, #0
   145cc:	f88d 300b 	strb.w	r3, [sp, #11]
	_radio.packet_counter++;
   145d0:	4bc1      	ldr	r3, [pc, #772]	; (148d8 <isr_rx_conn+0x314>)
   145d2:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
   145d6:	3201      	adds	r2, #1
   145d8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   145dc:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   145e0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   145e4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   145e8:	2301      	movs	r3, #1
   145ea:	712b      	strb	r3, [r5, #4]
	if (crc_ok) {
   145ec:	4607      	mov	r7, r0
   145ee:	2800      	cmp	r0, #0
   145f0:	d143      	bne.n	1467a <isr_rx_conn+0xb6>
		if (_radio.crc_expire == 0) {
   145f2:	4bb9      	ldr	r3, [pc, #740]	; (148d8 <isr_rx_conn+0x314>)
   145f4:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
   145f8:	b91b      	cbnz	r3, 14602 <isr_rx_conn+0x3e>
			_radio.crc_expire = 2;
   145fa:	2202      	movs	r2, #2
   145fc:	4bb6      	ldr	r3, [pc, #728]	; (148d8 <isr_rx_conn+0x314>)
   145fe:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		_radio.crc_expire--;
   14602:	4bb5      	ldr	r3, [pc, #724]	; (148d8 <isr_rx_conn+0x314>)
   14604:	f893 4115 	ldrb.w	r4, [r3, #277]	; 0x115
   14608:	3c01      	subs	r4, #1
   1460a:	b2e4      	uxtb	r4, r4
   1460c:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		crc_close = (_radio.crc_expire == 0);
   14610:	fab4 f484 	clz	r4, r4
   14614:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
   14616:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1461a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   1461e:	2a00      	cmp	r2, #0
   14620:	f040 8387 	bne.w	14d32 <isr_rx_conn+0x76e>
				_radio.conn_curr->supervision_reload;
   14624:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   14626:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	struct radio_pdu_node_tx *tx_release = NULL;
   1462a:	2600      	movs	r6, #0
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   1462c:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 148d8 <isr_rx_conn+0x314>
   14630:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   14634:	f890 80f8 	ldrb.w	r8, [r0, #248]	; 0xf8
   14638:	ea4f 18d8 	mov.w	r8, r8, lsr #7
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   1463c:	a903      	add	r1, sp, #12
   1463e:	f7fe f8ef 	bl	12820 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14642:	f899 3010 	ldrb.w	r3, [r9, #16]
			STATE_CLOSE : STATE_TX;
   14646:	2b03      	cmp	r3, #3
   14648:	f000 8376 	beq.w	14d38 <isr_rx_conn+0x774>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1464c:	2c00      	cmp	r4, #0
   1464e:	f040 8372 	bne.w	14d36 <isr_rx_conn+0x772>
   14652:	b147      	cbz	r7, 14666 <isr_rx_conn+0xa2>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   14654:	7a2b      	ldrb	r3, [r5, #8]
   14656:	f013 0f10 	tst.w	r3, #16
   1465a:	d104      	bne.n	14666 <isr_rx_conn+0xa2>
			 (pdu_data_tx->len == 0)) ||
   1465c:	9b03      	ldr	r3, [sp, #12]
   1465e:	785b      	ldrb	r3, [r3, #1]
			((crc_ok) && (pdu_data_rx->md == 0) &&
   14660:	2b00      	cmp	r3, #0
   14662:	f000 83aa 	beq.w	14dba <isr_rx_conn+0x7f6>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   14666:	4b9c      	ldr	r3, [pc, #624]	; (148d8 <isr_rx_conn+0x314>)
   14668:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1466c:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
			 (pdu_data_tx->len == 0)) ||
   14670:	2b00      	cmp	r3, #0
   14672:	f000 83a4 	beq.w	14dbe <isr_rx_conn+0x7fa>
			STATE_CLOSE : STATE_TX;
   14676:	2303      	movs	r3, #3
   14678:	e35e      	b.n	14d38 <isr_rx_conn+0x774>
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   1467a:	f105 0808 	add.w	r8, r5, #8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   1467e:	7a2a      	ldrb	r2, [r5, #8]
   14680:	f3c2 0280 	ubfx	r2, r2, #2, #1
   14684:	4b94      	ldr	r3, [pc, #592]	; (148d8 <isr_rx_conn+0x314>)
   14686:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1468a:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   1468e:	f003 0301 	and.w	r3, r3, #1
   14692:	429a      	cmp	r2, r3
   14694:	f000 81cd 	beq.w	14a32 <isr_rx_conn+0x46e>
		_radio.conn_curr->sn++;
   14698:	f083 0301 	eor.w	r3, r3, #1
   1469c:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   146a0:	f363 0200 	bfi	r2, r3, #0, #1
   146a4:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   146a8:	4b8b      	ldr	r3, [pc, #556]	; (148d8 <isr_rx_conn+0x314>)
   146aa:	7bdb      	ldrb	r3, [r3, #15]
   146ac:	b2db      	uxtb	r3, r3
   146ae:	2b03      	cmp	r3, #3
   146b0:	d02c      	beq.n	1470c <isr_rx_conn+0x148>
		if (_radio.conn_curr->empty == 0) {
   146b2:	4b89      	ldr	r3, [pc, #548]	; (148d8 <isr_rx_conn+0x314>)
   146b4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   146b8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   146bc:	f012 0f80 	tst.w	r2, #128	; 0x80
   146c0:	f040 81ae 	bne.w	14a20 <isr_rx_conn+0x45c>
			node_tx = _radio.conn_curr->pkt_tx_head;
   146c4:	f8d3 613c 	ldr.w	r6, [r3, #316]	; 0x13c
				(node_tx->pdu_data +
   146c8:	f106 0c04 	add.w	ip, r6, #4
				 _radio.conn_curr->packet_tx_head_offset);
   146cc:	f893 e151 	ldrb.w	lr, [r3, #337]	; 0x151
			pdu_data_tx = (struct pdu_data *)
   146d0:	eb0c 090e 	add.w	r9, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
   146d4:	f899 4001 	ldrb.w	r4, [r9, #1]
			if (pdu_data_tx_len != 0) {
   146d8:	2c00      	cmp	r4, #0
   146da:	f000 8145 	beq.w	14968 <isr_rx_conn+0x3a4>
				if (_radio.conn_curr->enc_tx) {
   146de:	f012 0f20 	tst.w	r2, #32
   146e2:	d00a      	beq.n	146fa <isr_rx_conn+0x136>
					_radio.conn_curr->ccm_tx.counter++;
   146e4:	f8d3 012a 	ldr.w	r0, [r3, #298]	; 0x12a
   146e8:	f8d3 112e 	ldr.w	r1, [r3, #302]	; 0x12e
   146ec:	3001      	adds	r0, #1
   146ee:	f141 0100 	adc.w	r1, r1, #0
   146f2:	f8c3 012a 	str.w	r0, [r3, #298]	; 0x12a
   146f6:	f8c3 112e 	str.w	r1, [r3, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   146fa:	f81c 300e 	ldrb.w	r3, [ip, lr]
   146fe:	f003 0303 	and.w	r3, r3, #3
   14702:	2b03      	cmp	r3, #3
   14704:	d00c      	beq.n	14720 <isr_rx_conn+0x15c>
	u8_t terminate = 0;
   14706:	f04f 0900 	mov.w	r9, #0
   1470a:	e12e      	b.n	1496a <isr_rx_conn+0x3a6>
			_radio.conn_curr->slave.latency_enabled = 1;
   1470c:	4b72      	ldr	r3, [pc, #456]	; (148d8 <isr_rx_conn+0x314>)
   1470e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14712:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   14716:	f043 0301 	orr.w	r3, r3, #1
   1471a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   1471e:	e7c8      	b.n	146b2 <isr_rx_conn+0xee>
	switch (pdu_data_tx->payload.llctrl.opcode) {
   14720:	f899 3003 	ldrb.w	r3, [r9, #3]
   14724:	3b02      	subs	r3, #2
   14726:	2b16      	cmp	r3, #22
   14728:	f200 8118 	bhi.w	1495c <isr_rx_conn+0x398>
   1472c:	e8df f013 	tbh	[pc, r3, lsl #1]
   14730:	00330017 	.word	0x00330017
   14734:	01160057 	.word	0x01160057
   14738:	01160116 	.word	0x01160116
   1473c:	01160116 	.word	0x01160116
   14740:	007d0063 	.word	0x007d0063
   14744:	00970116 	.word	0x00970116
   14748:	01160116 	.word	0x01160116
   1474c:	01160116 	.word	0x01160116
   14750:	01160116 	.word	0x01160116
   14754:	011600af 	.word	0x011600af
   14758:	00e000d6 	.word	0x00e000d6
   1475c:	0106      	.short	0x0106
		_radio.state = STATE_CLOSE;
   1475e:	2203      	movs	r2, #3
   14760:	4b5d      	ldr	r3, [pc, #372]	; (148d8 <isr_rx_conn+0x314>)
   14762:	741a      	strb	r2, [r3, #16]
		radio_disable();
   14764:	f7fa fff4 	bl	f750 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   14768:	f7fb f80c 	bl	f784 <radio_is_ready>
   1476c:	b958      	cbnz	r0, 14786 <isr_rx_conn+0x1c2>
		terminate_ind_rx_enqueue(_radio.conn_curr,
   1476e:	4b5a      	ldr	r3, [pc, #360]	; (148d8 <isr_rx_conn+0x314>)
   14770:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
   14774:	f899 1004 	ldrb.w	r1, [r9, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   14778:	2913      	cmp	r1, #19
   1477a:	d00a      	beq.n	14792 <isr_rx_conn+0x1ce>
   1477c:	f7ff fe8e 	bl	1449c <terminate_ind_rx_enqueue>
		terminate = 1;
   14780:	f04f 0901 	mov.w	r9, #1
   14784:	e0f1      	b.n	1496a <isr_rx_conn+0x3a6>
		LL_ASSERT(!radio_is_ready());
   14786:	4040      	eors	r0, r0
   14788:	f380 8811 	msr	BASEPRI, r0
   1478c:	f04f 0004 	mov.w	r0, #4
   14790:	df02      	svc	2
		terminate_ind_rx_enqueue(_radio.conn_curr,
   14792:	2116      	movs	r1, #22
   14794:	e7f2      	b.n	1477c <isr_rx_conn+0x1b8>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   14796:	f8df a140 	ldr.w	sl, [pc, #320]	; 148d8 <isr_rx_conn+0x314>
   1479a:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   1479e:	2208      	movs	r2, #8
   147a0:	f109 010e 	add.w	r1, r9, #14
   147a4:	3093      	adds	r0, #147	; 0x93
   147a6:	f7eb fd8b 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   147aa:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   147ae:	2204      	movs	r2, #4
   147b0:	f109 0116 	add.w	r1, r9, #22
   147b4:	f500 7089 	add.w	r0, r0, #274	; 0x112
   147b8:	f7eb fd82 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   147bc:	f8da 2110 	ldr.w	r2, [sl, #272]	; 0x110
   147c0:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   147c4:	f043 0308 	orr.w	r3, r3, #8
   147c8:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   147cc:	f8da 3110 	ldr.w	r3, [sl, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   147d0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   147d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   147d8:	f04f 0900 	mov.w	r9, #0
   147dc:	e0c5      	b.n	1496a <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   147de:	4b3e      	ldr	r3, [pc, #248]	; (148d8 <isr_rx_conn+0x314>)
   147e0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   147e4:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   147e8:	f043 0308 	orr.w	r3, r3, #8
   147ec:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   147f0:	f04f 0900 	mov.w	r9, #0
   147f4:	e0b9      	b.n	1496a <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   147f6:	4b38      	ldr	r3, [pc, #224]	; (148d8 <isr_rx_conn+0x314>)
   147f8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   147fc:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   14800:	f042 0208 	orr.w	r2, r2, #8
   14804:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   14808:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1480c:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   14810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14814:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   14818:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   1481c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   14820:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   14824:	f04f 0900 	mov.w	r9, #0
   14828:	e09f      	b.n	1496a <isr_rx_conn+0x3a6>
		if (_radio.role == ROLE_MASTER) {
   1482a:	4b2b      	ldr	r3, [pc, #172]	; (148d8 <isr_rx_conn+0x314>)
   1482c:	7bdb      	ldrb	r3, [r3, #15]
   1482e:	b2db      	uxtb	r3, r3
   14830:	2b04      	cmp	r3, #4
   14832:	d00b      	beq.n	1484c <isr_rx_conn+0x288>
			_radio.conn_curr->pause_tx = 1;
   14834:	4b28      	ldr	r3, [pc, #160]	; (148d8 <isr_rx_conn+0x314>)
   14836:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1483a:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1483e:	f043 0308 	orr.w	r3, r3, #8
   14842:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   14846:	f04f 0900 	mov.w	r9, #0
   1484a:	e08e      	b.n	1496a <isr_rx_conn+0x3a6>
			enc_req_reused_send(_radio.conn_curr, *node_tx);
   1484c:	4631      	mov	r1, r6
   1484e:	4b22      	ldr	r3, [pc, #136]	; (148d8 <isr_rx_conn+0x314>)
   14850:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   14854:	f7fe fd38 	bl	132c8 <enc_req_reused_send>
			*node_tx = NULL;
   14858:	2600      	movs	r6, #0
	u8_t terminate = 0;
   1485a:	46b1      	mov	r9, r6
   1485c:	e085      	b.n	1496a <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_rx = 0;
   1485e:	4b1e      	ldr	r3, [pc, #120]	; (148d8 <isr_rx_conn+0x314>)
   14860:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14864:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   14868:	f36f 0182 	bfc	r1, #2, #1
   1486c:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   14870:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14874:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   14878:	f36f 01c3 	bfc	r1, #3, #1
   1487c:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   14880:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14884:	f04f 0900 	mov.w	r9, #0
   14888:	f8a3 9044 	strh.w	r9, [r3, #68]	; 0x44
   1488c:	e06d      	b.n	1496a <isr_rx_conn+0x3a6>
		if ((_radio.conn_curr->llcp_length.req !=
   1488e:	4b12      	ldr	r3, [pc, #72]	; (148d8 <isr_rx_conn+0x314>)
   14890:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14894:	f893 10e8 	ldrb.w	r1, [r3, #232]	; 0xe8
		     _radio.conn_curr->llcp_length.ack) &&
   14898:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
		if ((_radio.conn_curr->llcp_length.req !=
   1489c:	4291      	cmp	r1, r2
   1489e:	d060      	beq.n	14962 <isr_rx_conn+0x39e>
		    (_radio.conn_curr->llcp_length.state ==
   148a0:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   148a4:	f002 0203 	and.w	r2, r2, #3
		     _radio.conn_curr->llcp_length.ack) &&
   148a8:	2a01      	cmp	r2, #1
   148aa:	d002      	beq.n	148b2 <isr_rx_conn+0x2ee>
	u8_t terminate = 0;
   148ac:	f04f 0900 	mov.w	r9, #0
   148b0:	e05b      	b.n	1496a <isr_rx_conn+0x3a6>
			_radio.conn_curr->pause_tx = 1;
   148b2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   148b6:	f042 0208 	orr.w	r2, r2, #8
   148ba:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   148be:	4b06      	ldr	r3, [pc, #24]	; (148d8 <isr_rx_conn+0x314>)
   148c0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   148c4:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   148c8:	2102      	movs	r1, #2
   148ca:	f361 0201 	bfi	r2, r1, #0, #2
   148ce:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	u8_t terminate = 0;
   148d2:	f04f 0900 	mov.w	r9, #0
   148d6:	e048      	b.n	1496a <isr_rx_conn+0x3a6>
   148d8:	200014d4 	.word	0x200014d4
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   148dc:	4bbe      	ldr	r3, [pc, #760]	; (14bd8 <isr_rx_conn+0x614>)
   148de:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   148e2:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
   148e6:	2102      	movs	r1, #2
   148e8:	f361 0201 	bfi	r2, r1, #0, #2
   148ec:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   148f0:	4bb9      	ldr	r3, [pc, #740]	; (14bd8 <isr_rx_conn+0x614>)
   148f2:	7bdb      	ldrb	r3, [r3, #15]
   148f4:	b2db      	uxtb	r3, r3
   148f6:	2b03      	cmp	r3, #3
   148f8:	d002      	beq.n	14900 <isr_rx_conn+0x33c>
	u8_t terminate = 0;
   148fa:	f04f 0900 	mov.w	r9, #0
   148fe:	e034      	b.n	1496a <isr_rx_conn+0x3a6>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   14900:	4ab6      	ldr	r2, [pc, #728]	; (14bdc <isr_rx_conn+0x618>)
   14902:	e892 0003 	ldmia.w	r2, {r0, r1}
   14906:	e88d 0003 	stmia.w	sp, {r0, r1}
	struct connection *conn = _radio.conn_curr;
   1490a:	4bb3      	ldr	r3, [pc, #716]	; (14bd8 <isr_rx_conn+0x614>)
   1490c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   14910:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   14914:	f3c3 0382 	ubfx	r3, r3, #2, #3
   14918:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   1491c:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   14920:	430b      	orrs	r3, r1
	conn->phy_tx_time = phy_tx_time[phys];
   14922:	a904      	add	r1, sp, #16
   14924:	440b      	add	r3, r1
   14926:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   1492a:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   1492e:	f361 0302 	bfi	r3, r1, #0, #3
   14932:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	u8_t terminate = 0;
   14936:	f04f 0900 	mov.w	r9, #0
   1493a:	e016      	b.n	1496a <isr_rx_conn+0x3a6>
		_radio.conn_curr->phy_tx_time =
   1493c:	4ba6      	ldr	r3, [pc, #664]	; (14bd8 <isr_rx_conn+0x614>)
   1493e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   14942:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   14946:	f3c2 0282 	ubfx	r2, r2, #2, #3
		_radio.conn_curr->phy_tx_time =
   1494a:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   1494e:	f362 0102 	bfi	r1, r2, #0, #3
   14952:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
	u8_t terminate = 0;
   14956:	f04f 0900 	mov.w	r9, #0
   1495a:	e006      	b.n	1496a <isr_rx_conn+0x3a6>
   1495c:	f04f 0900 	mov.w	r9, #0
   14960:	e003      	b.n	1496a <isr_rx_conn+0x3a6>
   14962:	f04f 0900 	mov.w	r9, #0
   14966:	e000      	b.n	1496a <isr_rx_conn+0x3a6>
	u8_t terminate = 0;
   14968:	46a1      	mov	r9, r4
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   1496a:	4b9b      	ldr	r3, [pc, #620]	; (14bd8 <isr_rx_conn+0x614>)
   1496c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14970:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
   14974:	4414      	add	r4, r2
   14976:	b2e4      	uxtb	r4, r4
   14978:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
			    _radio.conn_curr->packet_tx_head_len) {
   1497c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
			if (_radio.conn_curr->packet_tx_head_offset ==
   14980:	429c      	cmp	r4, r3
   14982:	d01c      	beq.n	149be <isr_rx_conn+0x3fa>
	struct radio_pdu_node_tx *tx_release = NULL;
   14984:	2600      	movs	r6, #0
	if (terminate) {
   14986:	f1b9 0f00 	cmp.w	r9, #0
   1498a:	d155      	bne.n	14a38 <isr_rx_conn+0x474>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   1498c:	7a2a      	ldrb	r2, [r5, #8]
   1498e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   14992:	4b91      	ldr	r3, [pc, #580]	; (14bd8 <isr_rx_conn+0x614>)
   14994:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14998:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   1499c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   149a0:	429a      	cmp	r2, r3
   149a2:	d053      	beq.n	14a4c <isr_rx_conn+0x488>
	return 0;
   149a4:	2300      	movs	r3, #0
		if (terminate) {
   149a6:	2b00      	cmp	r3, #0
   149a8:	f040 81f5 	bne.w	14d96 <isr_rx_conn+0x7d2>
		_radio.crc_expire = 0;
   149ac:	4b8a      	ldr	r3, [pc, #552]	; (14bd8 <isr_rx_conn+0x614>)
   149ae:	2400      	movs	r4, #0
   149b0:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		_radio.conn_curr->supervision_expire = 0;
   149b4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   149b8:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
   149bc:	e636      	b.n	1462c <isr_rx_conn+0x68>
	struct connection *conn = _radio.conn_curr;
   149be:	4b86      	ldr	r3, [pc, #536]	; (14bd8 <isr_rx_conn+0x614>)
   149c0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	conn->packet_tx_head_len = 0;
   149c4:	2200      	movs	r2, #0
   149c6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   149ca:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   149ce:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   149d2:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   149d6:	428a      	cmp	r2, r1
   149d8:	d007      	beq.n	149ea <isr_rx_conn+0x426>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   149da:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
   149de:	428a      	cmp	r2, r1
   149e0:	d01a      	beq.n	14a18 <isr_rx_conn+0x454>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   149e2:	6812      	ldr	r2, [r2, #0]
   149e4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   149e8:	e7cd      	b.n	14986 <isr_rx_conn+0x3c2>
		if (node_tx) {
   149ea:	2e00      	cmp	r6, #0
   149ec:	d0cb      	beq.n	14986 <isr_rx_conn+0x3c2>
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   149ee:	6812      	ldr	r2, [r2, #0]
   149f0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   149f4:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   149f8:	4281      	cmp	r1, r0
   149fa:	d007      	beq.n	14a0c <isr_rx_conn+0x448>
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   149fc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
   14a00:	4977      	ldr	r1, [pc, #476]	; (14be0 <isr_rx_conn+0x61c>)
   14a02:	4630      	mov	r0, r6
   14a04:	f7fa fcab 	bl	f35e <mem_release>
	return NULL;
   14a08:	2600      	movs	r6, #0
   14a0a:	e7bc      	b.n	14986 <isr_rx_conn+0x3c2>
				conn->pkt_tx_ctrl = NULL;
   14a0c:	2200      	movs	r2, #0
   14a0e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   14a12:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   14a16:	e7f3      	b.n	14a00 <isr_rx_conn+0x43c>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   14a18:	6809      	ldr	r1, [r1, #0]
   14a1a:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
   14a1e:	e7e0      	b.n	149e2 <isr_rx_conn+0x41e>
			_radio.conn_curr->empty = 0;
   14a20:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14a24:	f36f 12c7 	bfc	r2, #7, #1
   14a28:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	struct radio_pdu_node_tx *tx_release = NULL;
   14a2c:	2600      	movs	r6, #0
	u8_t terminate = 0;
   14a2e:	46b1      	mov	r9, r6
   14a30:	e7a9      	b.n	14986 <isr_rx_conn+0x3c2>
	struct radio_pdu_node_tx *tx_release = NULL;
   14a32:	2600      	movs	r6, #0
	u8_t terminate = 0;
   14a34:	46b1      	mov	r9, r6
   14a36:	e7a6      	b.n	14986 <isr_rx_conn+0x3c2>
		connection_release(_radio.conn_curr);
   14a38:	4c67      	ldr	r4, [pc, #412]	; (14bd8 <isr_rx_conn+0x614>)
   14a3a:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14a3e:	f7fd fdd9 	bl	125f4 <connection_release>
		_radio.conn_curr = NULL;
   14a42:	2300      	movs	r3, #0
   14a44:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		return terminate;
   14a48:	464b      	mov	r3, r9
   14a4a:	e7ac      	b.n	149a6 <isr_rx_conn+0x3e2>
	if (_radio.packet_rx_acquire >=
   14a4c:	4a62      	ldr	r2, [pc, #392]	; (14bd8 <isr_rx_conn+0x614>)
   14a4e:	f892 013e 	ldrb.w	r0, [r2, #318]	; 0x13e
	    _radio.packet_rx_last) {
   14a52:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   14a56:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   14a58:	4290      	cmp	r0, r2
   14a5a:	d347      	bcc.n	14aec <isr_rx_conn+0x528>
			_radio.packet_rx_last);
   14a5c:	4b5e      	ldr	r3, [pc, #376]	; (14bd8 <isr_rx_conn+0x614>)
   14a5e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   14a62:	1ac3      	subs	r3, r0, r3
   14a64:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14a66:	2b02      	cmp	r3, #2
   14a68:	d94a      	bls.n	14b00 <isr_rx_conn+0x53c>
	return _radio.packet_rx[_radio.packet_rx_last];
   14a6a:	4b5b      	ldr	r3, [pc, #364]	; (14bd8 <isr_rx_conn+0x614>)
   14a6c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14a70:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   14a78:	2b00      	cmp	r3, #0
   14a7a:	f000 814e 	beq.w	14d1a <isr_rx_conn+0x756>
	    ((_radio.fc_ena == 0) ||
   14a7e:	4b56      	ldr	r3, [pc, #344]	; (14bd8 <isr_rx_conn+0x614>)
   14a80:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
	    (packet_rx_reserve_get(3) != 0) &&
   14a84:	2b00      	cmp	r3, #0
   14a86:	d045      	beq.n	14b14 <isr_rx_conn+0x550>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14a88:	4b53      	ldr	r3, [pc, #332]	; (14bd8 <isr_rx_conn+0x614>)
   14a8a:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   14a8e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	    ((_radio.fc_ena == 0) ||
   14a92:	429a      	cmp	r2, r3
   14a94:	d036      	beq.n	14b04 <isr_rx_conn+0x540>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14a96:	4b50      	ldr	r3, [pc, #320]	; (14bd8 <isr_rx_conn+0x614>)
   14a98:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	      (_radio.fc_req == _radio.fc_ack)) ||
   14a9c:	429a      	cmp	r2, r3
   14a9e:	f000 813e 	beq.w	14d1e <isr_rx_conn+0x75a>
	      (_radio.fc_req != _radio.fc_ack) &&
   14aa2:	4a4d      	ldr	r2, [pc, #308]	; (14bd8 <isr_rx_conn+0x614>)
   14aa4:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   14aa8:	b2db      	uxtb	r3, r3
   14aaa:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14aae:	4293      	cmp	r3, r2
   14ab0:	f000 8137 	beq.w	14d22 <isr_rx_conn+0x75e>
		(((_radio.fc_req == 0) &&
   14ab4:	4b48      	ldr	r3, [pc, #288]	; (14bd8 <isr_rx_conn+0x614>)
   14ab6:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	      (_radio.fc_req != _radio.fc_ack) &&
   14aba:	b92b      	cbnz	r3, 14ac8 <isr_rx_conn+0x504>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
   14abc:	4b46      	ldr	r3, [pc, #280]	; (14bd8 <isr_rx_conn+0x614>)
   14abe:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
		   _radio.conn_curr->handle)) ||
   14ac2:	8c0b      	ldrh	r3, [r1, #32]
		(((_radio.fc_req == 0) &&
   14ac4:	429a      	cmp	r2, r3
   14ac6:	d025      	beq.n	14b14 <isr_rx_conn+0x550>
		 ((_radio.fc_req != 0) &&
   14ac8:	4b43      	ldr	r3, [pc, #268]	; (14bd8 <isr_rx_conn+0x614>)
   14aca:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		   _radio.conn_curr->handle)) ||
   14ace:	2b00      	cmp	r3, #0
   14ad0:	f000 8129 	beq.w	14d26 <isr_rx_conn+0x762>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   14ad4:	4b40      	ldr	r3, [pc, #256]	; (14bd8 <isr_rx_conn+0x614>)
   14ad6:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   14ada:	32b7      	adds	r2, #183	; 0xb7
   14adc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   14ae0:	88da      	ldrh	r2, [r3, #6]
		   _radio.conn_curr->handle)))))) {
   14ae2:	8c0b      	ldrh	r3, [r1, #32]
		 ((_radio.fc_req != 0) &&
   14ae4:	429a      	cmp	r2, r3
   14ae6:	d015      	beq.n	14b14 <isr_rx_conn+0x550>
	return 0;
   14ae8:	2300      	movs	r3, #0
   14aea:	e75c      	b.n	149a6 <isr_rx_conn+0x3e2>
		return (_radio.packet_rx_count -
   14aec:	4a3a      	ldr	r2, [pc, #232]	; (14bd8 <isr_rx_conn+0x614>)
   14aee:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   14af2:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   14af6:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   14af8:	fa50 f383 	uxtab	r3, r0, r3
   14afc:	b2db      	uxtb	r3, r3
   14afe:	e7b2      	b.n	14a66 <isr_rx_conn+0x4a2>
		return 0;
   14b00:	2300      	movs	r3, #0
   14b02:	e7b9      	b.n	14a78 <isr_rx_conn+0x4b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
   14b04:	4834      	ldr	r0, [pc, #208]	; (14bd8 <isr_rx_conn+0x614>)
   14b06:	f890 317c 	ldrb.w	r3, [r0, #380]	; 0x17c
   14b0a:	b2db      	uxtb	r3, r3
   14b0c:	f890 017d 	ldrb.w	r0, [r0, #381]	; 0x17d
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14b10:	4283      	cmp	r3, r0
   14b12:	d1c0      	bne.n	14a96 <isr_rx_conn+0x4d2>
		if (pdu_data_rx->len != 0) {
   14b14:	7a68      	ldrb	r0, [r5, #9]
   14b16:	2800      	cmp	r0, #0
   14b18:	f000 80b8 	beq.w	14c8c <isr_rx_conn+0x6c8>
			if (_radio.conn_curr->enc_rx) {
   14b1c:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14b20:	f013 0f10 	tst.w	r3, #16
   14b24:	d133      	bne.n	14b8e <isr_rx_conn+0x5ca>
		u8_t ccm_rx_increment = 0;
   14b26:	464c      	mov	r4, r9
			if ((_radio.conn_curr->enc_rx &&
   14b28:	4b2b      	ldr	r3, [pc, #172]	; (14bd8 <isr_rx_conn+0x614>)
   14b2a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14b2e:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   14b32:	f013 0f10 	tst.w	r3, #16
   14b36:	d135      	bne.n	14ba4 <isr_rx_conn+0x5e0>
			    (_radio.conn_curr->pause_rx &&
   14b38:	4b27      	ldr	r3, [pc, #156]	; (14bd8 <isr_rx_conn+0x614>)
   14b3a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14b3e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   14b42:	f012 0f04 	tst.w	r2, #4
   14b46:	f000 8082 	beq.w	14c4e <isr_rx_conn+0x68a>
	u8_t opcode = pdu_data->payload.llctrl.opcode;
   14b4a:	f898 1003 	ldrb.w	r1, [r8, #3]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14b4e:	7a2a      	ldrb	r2, [r5, #8]
   14b50:	f002 0203 	and.w	r2, r2, #3
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14b54:	2a03      	cmp	r2, #3
   14b56:	d02a      	beq.n	14bae <isr_rx_conn+0x5ea>
   14b58:	2201      	movs	r2, #1
			    (_radio.conn_curr->pause_rx &&
   14b5a:	2a00      	cmp	r2, #0
   14b5c:	d077      	beq.n	14c4e <isr_rx_conn+0x68a>
				_radio.state = STATE_CLOSE;
   14b5e:	2203      	movs	r2, #3
   14b60:	4b1d      	ldr	r3, [pc, #116]	; (14bd8 <isr_rx_conn+0x614>)
   14b62:	741a      	strb	r2, [r3, #16]
				radio_disable();
   14b64:	f7fa fdf4 	bl	f750 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   14b68:	f7fa fe0c 	bl	f784 <radio_is_ready>
   14b6c:	2800      	cmp	r0, #0
   14b6e:	d168      	bne.n	14c42 <isr_rx_conn+0x67e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   14b70:	4c19      	ldr	r4, [pc, #100]	; (14bd8 <isr_rx_conn+0x614>)
   14b72:	213d      	movs	r1, #61	; 0x3d
   14b74:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14b78:	f7ff fc90 	bl	1449c <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   14b7c:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14b80:	f7fd fd38 	bl	125f4 <connection_release>
				_radio.conn_curr = NULL;
   14b84:	2300      	movs	r3, #0
   14b86:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
				return 1; /* terminated */
   14b8a:	2301      	movs	r3, #1
   14b8c:	e70b      	b.n	149a6 <isr_rx_conn+0x3e2>
				done = radio_ccm_is_done();
   14b8e:	f7fb f821 	bl	fbd4 <radio_ccm_is_done>
				LL_ASSERT(done);
   14b92:	b108      	cbz	r0, 14b98 <isr_rx_conn+0x5d4>
				ccm_rx_increment = 1;
   14b94:	2401      	movs	r4, #1
   14b96:	e7c7      	b.n	14b28 <isr_rx_conn+0x564>
				LL_ASSERT(done);
   14b98:	4040      	eors	r0, r0
   14b9a:	f380 8811 	msr	BASEPRI, r0
   14b9e:	f04f 0004 	mov.w	r0, #4
   14ba2:	df02      	svc	2
			     !radio_ccm_mic_is_valid()) ||
   14ba4:	f7fb f836 	bl	fc14 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   14ba8:	2800      	cmp	r0, #0
   14baa:	d0d8      	beq.n	14b5e <isr_rx_conn+0x59a>
   14bac:	e7c4      	b.n	14b38 <isr_rx_conn+0x574>
   14bae:	f993 201d 	ldrsb.w	r2, [r3, #29]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14bb2:	2a00      	cmp	r2, #0
   14bb4:	db1d      	blt.n	14bf2 <isr_rx_conn+0x62e>
		((!conn->refresh &&
   14bb6:	f893 00f8 	ldrb.w	r0, [r3, #248]	; 0xf8
	       (!conn->role &&
   14bba:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   14bbe:	d111      	bne.n	14be4 <isr_rx_conn+0x620>
		((!conn->refresh &&
   14bc0:	2902      	cmp	r1, #2
   14bc2:	d00f      	beq.n	14be4 <isr_rx_conn+0x620>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14bc4:	2905      	cmp	r1, #5
   14bc6:	d014      	beq.n	14bf2 <isr_rx_conn+0x62e>
   14bc8:	2906      	cmp	r1, #6
   14bca:	d012      	beq.n	14bf2 <isr_rx_conn+0x62e>
   14bcc:	290d      	cmp	r1, #13
   14bce:	d010      	beq.n	14bf2 <isr_rx_conn+0x62e>
   14bd0:	2911      	cmp	r1, #17
   14bd2:	d00e      	beq.n	14bf2 <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14bd4:	2201      	movs	r2, #1
   14bd6:	e7c0      	b.n	14b5a <isr_rx_conn+0x596>
   14bd8:	200014d4 	.word	0x200014d4
   14bdc:	0002e6f0 	.word	0x0002e6f0
   14be0:	2000162c 	.word	0x2000162c
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14be4:	b128      	cbz	r0, 14bf2 <isr_rx_conn+0x62e>
		 (conn->refresh &&
   14be6:	2902      	cmp	r1, #2
   14be8:	d003      	beq.n	14bf2 <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14bea:	290b      	cmp	r1, #11
   14bec:	d001      	beq.n	14bf2 <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14bee:	2904      	cmp	r1, #4
   14bf0:	d1e8      	bne.n	14bc4 <isr_rx_conn+0x600>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14bf2:	2a00      	cmp	r2, #0
   14bf4:	db01      	blt.n	14bfa <isr_rx_conn+0x636>
   14bf6:	2200      	movs	r2, #0
   14bf8:	e7af      	b.n	14b5a <isr_rx_conn+0x596>
		((!conn->refresh &&
   14bfa:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	       (conn->role &&
   14bfe:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   14c02:	d109      	bne.n	14c18 <isr_rx_conn+0x654>
		((!conn->refresh &&
   14c04:	2902      	cmp	r1, #2
   14c06:	d007      	beq.n	14c18 <isr_rx_conn+0x654>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14c08:	2906      	cmp	r1, #6
   14c0a:	d014      	beq.n	14c36 <isr_rx_conn+0x672>
   14c0c:	290d      	cmp	r1, #13
   14c0e:	d014      	beq.n	14c3a <isr_rx_conn+0x676>
   14c10:	2911      	cmp	r1, #17
   14c12:	d114      	bne.n	14c3e <isr_rx_conn+0x67a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14c14:	2200      	movs	r2, #0
   14c16:	e7a0      	b.n	14b5a <isr_rx_conn+0x596>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14c18:	b13a      	cbz	r2, 14c2a <isr_rx_conn+0x666>
		 (conn->refresh &&
   14c1a:	2902      	cmp	r1, #2
   14c1c:	d007      	beq.n	14c2e <isr_rx_conn+0x66a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14c1e:	290b      	cmp	r1, #11
   14c20:	d007      	beq.n	14c32 <isr_rx_conn+0x66e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14c22:	2903      	cmp	r1, #3
   14c24:	d1f0      	bne.n	14c08 <isr_rx_conn+0x644>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14c26:	2200      	movs	r2, #0
   14c28:	e797      	b.n	14b5a <isr_rx_conn+0x596>
   14c2a:	2200      	movs	r2, #0
   14c2c:	e795      	b.n	14b5a <isr_rx_conn+0x596>
   14c2e:	2200      	movs	r2, #0
   14c30:	e793      	b.n	14b5a <isr_rx_conn+0x596>
   14c32:	2200      	movs	r2, #0
   14c34:	e791      	b.n	14b5a <isr_rx_conn+0x596>
   14c36:	2200      	movs	r2, #0
   14c38:	e78f      	b.n	14b5a <isr_rx_conn+0x596>
   14c3a:	2200      	movs	r2, #0
   14c3c:	e78d      	b.n	14b5a <isr_rx_conn+0x596>
   14c3e:	2201      	movs	r2, #1
   14c40:	e78b      	b.n	14b5a <isr_rx_conn+0x596>
				LL_ASSERT(!radio_is_ready());
   14c42:	4040      	eors	r0, r0
   14c44:	f380 8811 	msr	BASEPRI, r0
   14c48:	f04f 0004 	mov.w	r0, #4
   14c4c:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   14c4e:	2200      	movs	r2, #0
   14c50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   14c54:	4b70      	ldr	r3, [pc, #448]	; (14e18 <isr_rx_conn+0x854>)
   14c56:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14c5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   14c5e:	7a2b      	ldrb	r3, [r5, #8]
   14c60:	f013 0303 	ands.w	r3, r3, #3
   14c64:	d00c      	beq.n	14c80 <isr_rx_conn+0x6bc>
   14c66:	2b02      	cmp	r3, #2
   14c68:	d905      	bls.n	14c76 <isr_rx_conn+0x6b2>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
   14c6a:	f10d 010b 	add.w	r1, sp, #11
   14c6e:	4628      	mov	r0, r5
   14c70:	f7fe fb4c 	bl	1330c <isr_rx_conn_pkt_ctrl>
   14c74:	e030      	b.n	14cd8 <isr_rx_conn+0x714>
				*rx_enqueue = 1;
   14c76:	2301      	movs	r3, #1
   14c78:	f88d 300b 	strb.w	r3, [sp, #11]
	u8_t nack = 0;
   14c7c:	4648      	mov	r0, r9
   14c7e:	e02b      	b.n	14cd8 <isr_rx_conn+0x714>
				LL_ASSERT(0);
   14c80:	4040      	eors	r0, r0
   14c82:	f380 8811 	msr	BASEPRI, r0
   14c86:	f04f 0004 	mov.w	r0, #4
   14c8a:	df02      	svc	2
		} else if ((_radio.conn_curr->enc_rx) ||
   14c8c:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14c90:	f013 0f14 	tst.w	r3, #20
   14c94:	d01f      	beq.n	14cd6 <isr_rx_conn+0x712>
			appto_reload_new = (conn->apto_reload >
   14c96:	f8b1 204a 	ldrh.w	r2, [r1, #74]	; 0x4a
					    (conn->latency + 6)) ?
   14c9a:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
   14c9c:	1d9c      	adds	r4, r3, #6
			appto_reload_new = (conn->apto_reload >
   14c9e:	42a2      	cmp	r2, r4
   14ca0:	dd04      	ble.n	14cac <isr_rx_conn+0x6e8>
					   (conn->apto_reload -
   14ca2:	1ad3      	subs	r3, r2, r3
   14ca4:	b29b      	uxth	r3, r3
			appto_reload_new = (conn->apto_reload >
   14ca6:	3b06      	subs	r3, #6
   14ca8:	b29b      	uxth	r3, r3
   14caa:	e000      	b.n	14cae <isr_rx_conn+0x6ea>
   14cac:	4613      	mov	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   14cae:	f8b1 4046 	ldrh.w	r4, [r1, #70]	; 0x46
   14cb2:	429c      	cmp	r4, r3
   14cb4:	d004      	beq.n	14cc0 <isr_rx_conn+0x6fc>
				conn->appto_reload = appto_reload_new;
   14cb6:	f8a1 3046 	strh.w	r3, [r1, #70]	; 0x46
				conn->apto_expire = 0;
   14cba:	2300      	movs	r3, #0
   14cbc:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   14cc0:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
   14cc4:	bb3b      	cbnz	r3, 14d16 <isr_rx_conn+0x752>
				conn->appto_expire = conn->appto_reload;
   14cc6:	f8b1 3046 	ldrh.w	r3, [r1, #70]	; 0x46
   14cca:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   14cce:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		u8_t ccm_rx_increment = 0;
   14cd2:	4604      	mov	r4, r0
   14cd4:	e000      	b.n	14cd8 <isr_rx_conn+0x714>
   14cd6:	4604      	mov	r4, r0
		if (!nack) {
   14cd8:	bb38      	cbnz	r0, 14d2a <isr_rx_conn+0x766>
			_radio.conn_curr->nesn++;
   14cda:	4b4f      	ldr	r3, [pc, #316]	; (14e18 <isr_rx_conn+0x854>)
   14cdc:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14ce0:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14ce4:	f3c3 0240 	ubfx	r2, r3, #1, #1
   14ce8:	f082 0201 	eor.w	r2, r2, #1
   14cec:	f362 0341 	bfi	r3, r2, #1, #1
   14cf0:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			if (ccm_rx_increment) {
   14cf4:	b1dc      	cbz	r4, 14d2e <isr_rx_conn+0x76a>
				_radio.conn_curr->ccm_rx.counter++;
   14cf6:	4b48      	ldr	r3, [pc, #288]	; (14e18 <isr_rx_conn+0x854>)
   14cf8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14cfc:	f8d1 2109 	ldr.w	r2, [r1, #265]	; 0x109
   14d00:	f8d1 310d 	ldr.w	r3, [r1, #269]	; 0x10d
   14d04:	3201      	adds	r2, #1
   14d06:	f143 0300 	adc.w	r3, r3, #0
   14d0a:	f8c1 2109 	str.w	r2, [r1, #265]	; 0x109
   14d0e:	f8c1 310d 	str.w	r3, [r1, #269]	; 0x10d
	return 0;
   14d12:	2300      	movs	r3, #0
   14d14:	e647      	b.n	149a6 <isr_rx_conn+0x3e2>
		u8_t ccm_rx_increment = 0;
   14d16:	4604      	mov	r4, r0
   14d18:	e7de      	b.n	14cd8 <isr_rx_conn+0x714>
	return 0;
   14d1a:	2300      	movs	r3, #0
   14d1c:	e643      	b.n	149a6 <isr_rx_conn+0x3e2>
   14d1e:	2300      	movs	r3, #0
   14d20:	e641      	b.n	149a6 <isr_rx_conn+0x3e2>
   14d22:	2300      	movs	r3, #0
   14d24:	e63f      	b.n	149a6 <isr_rx_conn+0x3e2>
   14d26:	2300      	movs	r3, #0
   14d28:	e63d      	b.n	149a6 <isr_rx_conn+0x3e2>
   14d2a:	2300      	movs	r3, #0
   14d2c:	e63b      	b.n	149a6 <isr_rx_conn+0x3e2>
   14d2e:	2300      	movs	r3, #0
   14d30:	e639      	b.n	149a6 <isr_rx_conn+0x3e2>
	struct radio_pdu_node_tx *tx_release = NULL;
   14d32:	2600      	movs	r6, #0
   14d34:	e47a      	b.n	1462c <isr_rx_conn+0x68>
			STATE_CLOSE : STATE_TX;
   14d36:	2303      	movs	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14d38:	4a37      	ldr	r2, [pc, #220]	; (14e18 <isr_rx_conn+0x854>)
   14d3a:	7413      	strb	r3, [r2, #16]
	if (_radio.state == STATE_CLOSE) {
   14d3c:	2b03      	cmp	r3, #3
   14d3e:	d040      	beq.n	14dc2 <isr_rx_conn+0x7fe>
		radio_tmr_tifs_set(RADIO_TIFS);
   14d40:	2096      	movs	r0, #150	; 0x96
   14d42:	f7fa fe0d 	bl	f960 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   14d46:	4b34      	ldr	r3, [pc, #208]	; (14e18 <isr_rx_conn+0x854>)
   14d48:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14d4c:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   14d50:	f000 0007 	and.w	r0, r0, #7
   14d54:	f7fa fd52 	bl	f7fc <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   14d58:	f7fa feba 	bl	fad0 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   14d5c:	9a03      	ldr	r2, [sp, #12]
   14d5e:	4b2e      	ldr	r3, [pc, #184]	; (14e18 <isr_rx_conn+0x854>)
   14d60:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14d64:	f891 00f8 	ldrb.w	r0, [r1, #248]	; 0xf8
   14d68:	7811      	ldrb	r1, [r2, #0]
   14d6a:	f360 01c3 	bfi	r1, r0, #3, #1
   14d6e:	7011      	strb	r1, [r2, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   14d70:	9903      	ldr	r1, [sp, #12]
   14d72:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14d76:	f892 20f8 	ldrb.w	r2, [r2, #248]	; 0xf8
   14d7a:	f3c2 0240 	ubfx	r2, r2, #1, #1
   14d7e:	7808      	ldrb	r0, [r1, #0]
   14d80:	f362 0082 	bfi	r0, r2, #2, #1
   14d84:	7008      	strb	r0, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   14d86:	9903      	ldr	r1, [sp, #12]
   14d88:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   14d8c:	f7fd fdde 	bl	1294c <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   14d90:	f7fa fcf8 	bl	f784 <radio_is_ready>
   14d94:	bb38      	cbnz	r0, 14de6 <isr_rx_conn+0x822>
	if (!radio_tmr_aa_restore()) {
   14d96:	f7fa fe8f 	bl	fab8 <radio_tmr_aa_restore>
   14d9a:	b350      	cbz	r0, 14df2 <isr_rx_conn+0x82e>
	if (!_radio.conn_curr) {
   14d9c:	4b1e      	ldr	r3, [pc, #120]	; (14e18 <isr_rx_conn+0x854>)
   14d9e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14da2:	b13b      	cbz	r3, 14db4 <isr_rx_conn+0x7f0>
	if (tx_release) {
   14da4:	b11e      	cbz	r6, 14dae <isr_rx_conn+0x7ea>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   14da6:	4631      	mov	r1, r6
   14da8:	8c18      	ldrh	r0, [r3, #32]
   14daa:	f7fd fb9f 	bl	124ec <pdu_node_tx_release>
	if (rx_enqueue) {
   14dae:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14db2:	bb1b      	cbnz	r3, 14dfc <isr_rx_conn+0x838>
}
   14db4:	b004      	add	sp, #16
   14db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			STATE_CLOSE : STATE_TX;
   14dba:	2303      	movs	r3, #3
   14dbc:	e7bc      	b.n	14d38 <isr_rx_conn+0x774>
   14dbe:	2302      	movs	r3, #2
   14dc0:	e7ba      	b.n	14d38 <isr_rx_conn+0x774>
		if (_radio.role == ROLE_MASTER) {
   14dc2:	7bd3      	ldrb	r3, [r2, #15]
   14dc4:	b2db      	uxtb	r3, r3
   14dc6:	2b04      	cmp	r3, #4
   14dc8:	d002      	beq.n	14dd0 <isr_rx_conn+0x80c>
			radio_switch_complete_and_disable();
   14dca:	f7fa fd27 	bl	f81c <radio_switch_complete_and_disable>
   14dce:	e7c5      	b.n	14d5c <isr_rx_conn+0x798>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   14dd0:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14dd4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14dd8:	f368 12c7 	bfi	r2, r8, #7, #1
   14ddc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   14de0:	f7fa fcb6 	bl	f750 <radio_disable>
			goto isr_rx_conn_exit;
   14de4:	e7d7      	b.n	14d96 <isr_rx_conn+0x7d2>
	LL_ASSERT(!radio_is_ready());
   14de6:	4040      	eors	r0, r0
   14de8:	f380 8811 	msr	BASEPRI, r0
   14dec:	f04f 0004 	mov.w	r0, #4
   14df0:	df02      	svc	2
		radio_tmr_aa_save(radio_tmr_aa_get());
   14df2:	f7fa fe55 	bl	faa0 <radio_tmr_aa_get>
   14df6:	f7fa fe59 	bl	faac <radio_tmr_aa_save>
   14dfa:	e7cf      	b.n	14d9c <isr_rx_conn+0x7d8>
		rx_fc_lock(_radio.conn_curr->handle);
   14dfc:	4c06      	ldr	r4, [pc, #24]	; (14e18 <isr_rx_conn+0x854>)
   14dfe:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14e02:	8c18      	ldrh	r0, [r3, #32]
   14e04:	f7fc fdec 	bl	119e0 <rx_fc_lock>
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   14e08:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14e0c:	8c1b      	ldrh	r3, [r3, #32]
   14e0e:	80eb      	strh	r3, [r5, #6]
		packet_rx_enqueue();
   14e10:	f7ff fad0 	bl	143b4 <packet_rx_enqueue>
	return;
   14e14:	e7ce      	b.n	14db4 <isr_rx_conn+0x7f0>
   14e16:	bf00      	nop
   14e18:	200014d4 	.word	0x200014d4

00014e1c <prepare_normal_set>:
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14e1c:	6803      	ldr	r3, [r0, #0]
   14e1e:	2b00      	cmp	r3, #0
   14e20:	db00      	blt.n	14e24 <prepare_normal_set+0x8>
   14e22:	4770      	bx	lr
{
   14e24:	b530      	push	{r4, r5, lr}
   14e26:	b089      	sub	sp, #36	; 0x24
			ticks_active_to_start : hdr->ticks_preempt_to_start;
   14e28:	6885      	ldr	r5, [r0, #8]
			 hdr->ticks_preempt_to_start) ? hdr->
   14e2a:	6844      	ldr	r4, [r0, #4]
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
   14e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		u32_t ticks_drift_minus =
   14e30:	42a5      	cmp	r5, r4
   14e32:	bf2c      	ite	cs
   14e34:	1b5b      	subcs	r3, r3, r5
   14e36:	1b1b      	subcc	r3, r3, r4
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14e38:	b29b      	uxth	r3, r3
		ticker_status =
   14e3a:	9006      	str	r0, [sp, #24]
   14e3c:	480a      	ldr	r0, [pc, #40]	; (14e68 <prepare_normal_set+0x4c>)
   14e3e:	9005      	str	r0, [sp, #20]
   14e40:	2000      	movs	r0, #0
   14e42:	9004      	str	r0, [sp, #16]
   14e44:	9003      	str	r0, [sp, #12]
   14e46:	9002      	str	r0, [sp, #8]
   14e48:	9301      	str	r3, [sp, #4]
   14e4a:	9300      	str	r3, [sp, #0]
   14e4c:	4603      	mov	r3, r0
   14e4e:	f7fb ff89 	bl	10d64 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14e52:	b108      	cbz	r0, 14e58 <prepare_normal_set+0x3c>
   14e54:	2802      	cmp	r0, #2
   14e56:	d101      	bne.n	14e5c <prepare_normal_set+0x40>
}
   14e58:	b009      	add	sp, #36	; 0x24
   14e5a:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14e5c:	4040      	eors	r0, r0
   14e5e:	f380 8811 	msr	BASEPRI, r0
   14e62:	f04f 0004 	mov.w	r0, #4
   14e66:	df02      	svc	2
   14e68:	000116e5 	.word	0x000116e5

00014e6c <event_common_prepare>:
{
   14e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14e70:	b08a      	sub	sp, #40	; 0x28
   14e72:	4681      	mov	r9, r0
   14e74:	468a      	mov	sl, r1
   14e76:	4616      	mov	r6, r2
   14e78:	461f      	mov	r7, r3
   14e7a:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   14e7e:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   14e80:	f8d3 8000 	ldr.w	r8, [r3]
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14e84:	2c00      	cmp	r4, #0
   14e86:	db25      	blt.n	14ed4 <event_common_prepare+0x68>
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   14e88:	4544      	cmp	r4, r8
   14e8a:	d828      	bhi.n	14ede <event_common_prepare+0x72>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   14e8c:	4544      	cmp	r4, r8
   14e8e:	d251      	bcs.n	14f34 <event_common_prepare+0xc8>
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   14e90:	eba8 0404 	sub.w	r4, r8, r4
		event_active(0, 0, 0, NULL);
   14e94:	2300      	movs	r3, #0
   14e96:	461a      	mov	r2, r3
   14e98:	4619      	mov	r1, r3
   14e9a:	4618      	mov	r0, r3
   14e9c:	f7fd fa3a 	bl	12314 <event_active>
		ticker_status =
   14ea0:	f241 43d1 	movw	r3, #5329	; 0x14d1
   14ea4:	9308      	str	r3, [sp, #32]
   14ea6:	4b5e      	ldr	r3, [pc, #376]	; (15020 <event_common_prepare+0x1b4>)
   14ea8:	9307      	str	r3, [sp, #28]
   14eaa:	2000      	movs	r0, #0
   14eac:	9006      	str	r0, [sp, #24]
   14eae:	4b5d      	ldr	r3, [pc, #372]	; (15024 <event_common_prepare+0x1b8>)
   14eb0:	9305      	str	r3, [sp, #20]
   14eb2:	9004      	str	r0, [sp, #16]
   14eb4:	9003      	str	r0, [sp, #12]
   14eb6:	9002      	str	r0, [sp, #8]
   14eb8:	9001      	str	r0, [sp, #4]
   14eba:	9400      	str	r4, [sp, #0]
   14ebc:	464b      	mov	r3, r9
   14ebe:	2201      	movs	r2, #1
   14ec0:	4601      	mov	r1, r0
   14ec2:	f7fb ff01 	bl	10cc8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14ec6:	2800      	cmp	r0, #0
   14ec8:	f000 8091 	beq.w	14fee <event_common_prepare+0x182>
   14ecc:	2802      	cmp	r0, #2
   14ece:	d12b      	bne.n	14f28 <event_common_prepare+0xbc>
		ticks_to_start = _ticks_active_to_start;
   14ed0:	4644      	mov	r4, r8
   14ed2:	e03b      	b.n	14f4c <event_common_prepare+0xe0>
		_ticks_xtal_to_start =
   14ed4:	9c12      	ldr	r4, [sp, #72]	; 0x48
   14ed6:	4544      	cmp	r4, r8
   14ed8:	bf38      	it	cc
   14eda:	4644      	movcc	r4, r8
   14edc:	e7d4      	b.n	14e88 <event_common_prepare+0x1c>
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   14ede:	eba4 0308 	sub.w	r3, r4, r8
		ticker_status =
   14ee2:	f241 42bc 	movw	r2, #5308	; 0x14bc
   14ee6:	9208      	str	r2, [sp, #32]
   14ee8:	4a4d      	ldr	r2, [pc, #308]	; (15020 <event_common_prepare+0x1b4>)
   14eea:	9207      	str	r2, [sp, #28]
   14eec:	2000      	movs	r0, #0
   14eee:	9006      	str	r0, [sp, #24]
   14ef0:	4a4d      	ldr	r2, [pc, #308]	; (15028 <event_common_prepare+0x1bc>)
   14ef2:	9205      	str	r2, [sp, #20]
   14ef4:	9004      	str	r0, [sp, #16]
   14ef6:	9003      	str	r0, [sp, #12]
   14ef8:	9002      	str	r0, [sp, #8]
   14efa:	9001      	str	r0, [sp, #4]
   14efc:	9300      	str	r3, [sp, #0]
   14efe:	464b      	mov	r3, r9
   14f00:	2201      	movs	r2, #1
   14f02:	4601      	mov	r1, r0
   14f04:	f7fb fee0 	bl	10cc8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f08:	b108      	cbz	r0, 14f0e <event_common_prepare+0xa2>
   14f0a:	2802      	cmp	r0, #2
   14f0c:	d106      	bne.n	14f1c <event_common_prepare+0xb0>
		event_xtal(0, 0, 0, NULL);
   14f0e:	2300      	movs	r3, #0
   14f10:	461a      	mov	r2, r3
   14f12:	4619      	mov	r1, r3
   14f14:	4618      	mov	r0, r3
   14f16:	f7fd fa0f 	bl	12338 <event_xtal>
   14f1a:	e017      	b.n	14f4c <event_common_prepare+0xe0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f1c:	4040      	eors	r0, r0
   14f1e:	f380 8811 	msr	BASEPRI, r0
   14f22:	f04f 0004 	mov.w	r0, #4
   14f26:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f28:	4040      	eors	r0, r0
   14f2a:	f380 8811 	msr	BASEPRI, r0
   14f2e:	f04f 0004 	mov.w	r0, #4
   14f32:	df02      	svc	2
		event_active(0, 0, 0, NULL);
   14f34:	2300      	movs	r3, #0
   14f36:	461a      	mov	r2, r3
   14f38:	4619      	mov	r1, r3
   14f3a:	4618      	mov	r0, r3
   14f3c:	f7fd f9ea 	bl	12314 <event_active>
		event_xtal(0, 0, 0, NULL);
   14f40:	2300      	movs	r3, #0
   14f42:	461a      	mov	r2, r3
   14f44:	4619      	mov	r1, r3
   14f46:	4618      	mov	r0, r3
   14f48:	f7fd f9f6 	bl	12338 <event_xtal>
	_radio.remainder_anchor = remainder;
   14f4c:	4b37      	ldr	r3, [pc, #220]	; (1502c <event_common_prepare+0x1c0>)
   14f4e:	f8c3 a008 	str.w	sl, [r3, #8]
	ticker_status =
   14f52:	f241 43e9 	movw	r3, #5353	; 0x14e9
   14f56:	9308      	str	r3, [sp, #32]
   14f58:	4b31      	ldr	r3, [pc, #196]	; (15020 <event_common_prepare+0x1b4>)
   14f5a:	9307      	str	r3, [sp, #28]
   14f5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14f5e:	9306      	str	r3, [sp, #24]
   14f60:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14f62:	9305      	str	r3, [sp, #20]
   14f64:	2000      	movs	r0, #0
   14f66:	9004      	str	r0, [sp, #16]
   14f68:	9003      	str	r0, [sp, #12]
   14f6a:	9002      	str	r0, [sp, #8]
   14f6c:	9001      	str	r0, [sp, #4]
   14f6e:	9400      	str	r4, [sp, #0]
   14f70:	464b      	mov	r3, r9
   14f72:	4602      	mov	r2, r0
   14f74:	4601      	mov	r1, r0
   14f76:	f7fb fea7 	bl	10cc8 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f7a:	b108      	cbz	r0, 14f80 <event_common_prepare+0x114>
   14f7c:	2802      	cmp	r0, #2
   14f7e:	d138      	bne.n	14ff2 <event_common_prepare+0x186>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   14f80:	2305      	movs	r3, #5
   14f82:	2200      	movs	r2, #0
   14f84:	4611      	mov	r1, r2
   14f86:	4610      	mov	r0, r2
   14f88:	f7fd f93a 	bl	12200 <event_stop>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   14f8c:	4b27      	ldr	r3, [pc, #156]	; (1502c <event_common_prepare+0x1c0>)
   14f8e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
   14f92:	4598      	cmp	r8, r3
   14f94:	d01d      	beq.n	14fd2 <event_common_prepare+0x166>
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
   14f96:	6832      	ldr	r2, [r6, #0]
   14f98:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		u32_t ticks_to_start_new =
   14f9c:	429a      	cmp	r2, r3
   14f9e:	bf38      	it	cc
   14fa0:	461a      	movcc	r2, r3
		*ticks_active_to_start = _radio.ticks_active_to_start;
   14fa2:	603b      	str	r3, [r7, #0]
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
   14fa4:	6833      	ldr	r3, [r6, #0]
   14fa6:	2b00      	cmp	r3, #0
   14fa8:	db29      	blt.n	14ffe <event_common_prepare+0x192>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14faa:	b2a3      	uxth	r3, r4
   14fac:	b292      	uxth	r2, r2
		ticker_status =
   14fae:	f241 5116 	movw	r1, #5398	; 0x1516
   14fb2:	9106      	str	r1, [sp, #24]
   14fb4:	491a      	ldr	r1, [pc, #104]	; (15020 <event_common_prepare+0x1b4>)
   14fb6:	9105      	str	r1, [sp, #20]
   14fb8:	2000      	movs	r0, #0
   14fba:	9004      	str	r0, [sp, #16]
   14fbc:	9003      	str	r0, [sp, #12]
   14fbe:	9302      	str	r3, [sp, #8]
   14fc0:	9201      	str	r2, [sp, #4]
   14fc2:	9200      	str	r2, [sp, #0]
   14fc4:	462a      	mov	r2, r5
   14fc6:	4601      	mov	r1, r0
   14fc8:	f7fb fecc 	bl	10d64 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14fcc:	b108      	cbz	r0, 14fd2 <event_common_prepare+0x166>
   14fce:	2802      	cmp	r0, #2
   14fd0:	d119      	bne.n	15006 <event_common_prepare+0x19a>
	packet_tx_enqueue(0xFF);
   14fd2:	20ff      	movs	r0, #255	; 0xff
   14fd4:	f7fd fab6 	bl	12544 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   14fd8:	4b15      	ldr	r3, [pc, #84]	; (15030 <event_common_prepare+0x1c4>)
   14fda:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14fdc:	2201      	movs	r2, #1
   14fde:	4611      	mov	r1, r2
   14fe0:	2000      	movs	r0, #0
   14fe2:	f7fa f85f 	bl	f0a4 <mayfly_enqueue>
		LL_ASSERT(!retval);
   14fe6:	b9a0      	cbnz	r0, 15012 <event_common_prepare+0x1a6>
}
   14fe8:	b00a      	add	sp, #40	; 0x28
   14fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ticks_to_start = _ticks_active_to_start;
   14fee:	4644      	mov	r4, r8
   14ff0:	e7ac      	b.n	14f4c <event_common_prepare+0xe0>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14ff2:	4040      	eors	r0, r0
   14ff4:	f380 8811 	msr	BASEPRI, r0
   14ff8:	f04f 0004 	mov.w	r0, #4
   14ffc:	df02      	svc	2
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
   14ffe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   15002:	6033      	str	r3, [r6, #0]
   15004:	e7d1      	b.n	14faa <event_common_prepare+0x13e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15006:	4040      	eors	r0, r0
   15008:	f380 8811 	msr	BASEPRI, r0
   1500c:	f04f 0004 	mov.w	r0, #4
   15010:	df02      	svc	2
		LL_ASSERT(!retval);
   15012:	4040      	eors	r0, r0
   15014:	f380 8811 	msr	BASEPRI, r0
   15018:	f04f 0004 	mov.w	r0, #4
   1501c:	df02      	svc	2
   1501e:	bf00      	nop
   15020:	00011a1d 	.word	0x00011a1d
   15024:	00012339 	.word	0x00012339
   15028:	00012315 	.word	0x00012315
   1502c:	200014d4 	.word	0x200014d4
   15030:	2000c318 	.word	0x2000c318

00015034 <radio_event_adv_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   15034:	4b0d      	ldr	r3, [pc, #52]	; (1506c <radio_event_adv_prepare+0x38>)
   15036:	7b1b      	ldrb	r3, [r3, #12]
   15038:	b993      	cbnz	r3, 15060 <radio_event_adv_prepare+0x2c>
{
   1503a:	b510      	push	{r4, lr}
   1503c:	b084      	sub	sp, #16
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   1503e:	4a0b      	ldr	r2, [pc, #44]	; (1506c <radio_event_adv_prepare+0x38>)
   15040:	2305      	movs	r3, #5
   15042:	7313      	strb	r3, [r2, #12]
	event_common_prepare(ticks_at_expire, remainder,
   15044:	2400      	movs	r4, #0
   15046:	9403      	str	r4, [sp, #12]
   15048:	4c09      	ldr	r4, [pc, #36]	; (15070 <radio_event_adv_prepare+0x3c>)
   1504a:	9402      	str	r4, [sp, #8]
   1504c:	9301      	str	r3, [sp, #4]
   1504e:	69d3      	ldr	r3, [r2, #28]
   15050:	9300      	str	r3, [sp, #0]
   15052:	f102 0318 	add.w	r3, r2, #24
   15056:	3214      	adds	r2, #20
   15058:	f7ff ff08 	bl	14e6c <event_common_prepare>
}
   1505c:	b004      	add	sp, #16
   1505e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   15060:	4040      	eors	r0, r0
   15062:	f380 8811 	msr	BASEPRI, r0
   15066:	f04f 0004 	mov.w	r0, #4
   1506a:	df02      	svc	2
   1506c:	200014d4 	.word	0x200014d4
   15070:	00016931 	.word	0x00016931
   15074:	00000000 	.word	0x00000000

00015078 <event_connection_prepare>:
{
   15078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1507c:	b08f      	sub	sp, #60	; 0x3c
	LL_ASSERT(!_radio.ticker_id_prepare);
   1507e:	4ccb      	ldr	r4, [pc, #812]	; (153ac <event_connection_prepare+0x334>)
   15080:	7b24      	ldrb	r4, [r4, #12]
   15082:	2c00      	cmp	r4, #0
   15084:	d135      	bne.n	150f2 <event_connection_prepare+0x7a>
				   conn->handle;
   15086:	8c1d      	ldrh	r5, [r3, #32]
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   15088:	3507      	adds	r5, #7
   1508a:	b2ed      	uxtb	r5, r5
   1508c:	4cc7      	ldr	r4, [pc, #796]	; (153ac <event_connection_prepare+0x334>)
   1508e:	7325      	strb	r5, [r4, #12]
	if (conn->role) {
   15090:	f993 401d 	ldrsb.w	r4, [r3, #29]
   15094:	2c00      	cmp	r4, #0
   15096:	db32      	blt.n	150fe <event_connection_prepare+0x86>
   15098:	461c      	mov	r4, r3
   1509a:	910a      	str	r1, [sp, #40]	; 0x28
   1509c:	4606      	mov	r6, r0
	conn->latency_prepare += lazy;
   1509e:	8d1d      	ldrh	r5, [r3, #40]	; 0x28
   150a0:	4415      	add	r5, r2
   150a2:	b2ad      	uxth	r5, r5
   150a4:	851d      	strh	r5, [r3, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   150a6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   150a8:	441d      	add	r5, r3
   150aa:	b2ad      	uxth	r5, r5
	if (conn->llcp_ack == conn->llcp_req) {
   150ac:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   150b0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   150b4:	429a      	cmp	r2, r3
   150b6:	d02d      	beq.n	15114 <event_connection_prepare+0x9c>
	if (conn->llcp_ack != conn->llcp_req) {
   150b8:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   150bc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   150c0:	429a      	cmp	r2, r3
   150c2:	f000 861a 	beq.w	15cfa <event_connection_prepare+0xc82>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   150c6:	2305      	movs	r3, #5
   150c8:	2200      	movs	r2, #0
   150ca:	4611      	mov	r1, r2
   150cc:	4610      	mov	r0, r2
   150ce:	f7fd f897 	bl	12200 <event_stop>
		switch (conn->llcp_type) {
   150d2:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   150d6:	3b01      	subs	r3, #1
   150d8:	2b07      	cmp	r3, #7
   150da:	f201 80d6 	bhi.w	1628a <event_connection_prepare+0x1212>
   150de:	e8df f013 	tbh	[pc, r3, lsl #1]
   150e2:	029f      	.short	0x029f
   150e4:	05b1054e 	.word	0x05b1054e
   150e8:	072706ee 	.word	0x072706ee
   150ec:	07ac08d4 	.word	0x07ac08d4
   150f0:	07c7      	.short	0x07c7
	LL_ASSERT(!_radio.ticker_id_prepare);
   150f2:	4040      	eors	r0, r0
   150f4:	f380 8811 	msr	BASEPRI, r0
   150f8:	f04f 0004 	mov.w	r0, #4
   150fc:	df02      	svc	2
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   150fe:	6d5c      	ldr	r4, [r3, #84]	; 0x54
   15100:	fb02 4404 	mla	r4, r2, r4, r4
		conn->slave.window_widening_prepare_us +=
   15104:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
   15106:	442c      	add	r4, r5
   15108:	65dc      	str	r4, [r3, #92]	; 0x5c
		    conn->slave.window_widening_max_us) {
   1510a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
		if (conn->slave.window_widening_prepare_us >
   1510c:	42ac      	cmp	r4, r5
   1510e:	d9c3      	bls.n	15098 <event_connection_prepare+0x20>
			conn->slave.window_widening_prepare_us =
   15110:	65dd      	str	r5, [r3, #92]	; 0x5c
   15112:	e7c1      	b.n	15098 <event_connection_prepare+0x20>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   15114:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   15118:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   1511c:	429a      	cmp	r2, r3
   1511e:	d00b      	beq.n	15138 <event_connection_prepare+0xc0>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   15120:	2305      	movs	r3, #5
   15122:	2200      	movs	r2, #0
   15124:	4611      	mov	r1, r2
   15126:	4610      	mov	r0, r2
   15128:	f7fd f86a 	bl	12200 <event_stop>
	conn_upd = _radio.conn_upd;
   1512c:	4b9f      	ldr	r3, [pc, #636]	; (153ac <event_connection_prepare+0x334>)
   1512e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (conn_upd && (conn_upd != conn)) {
   15132:	b1fb      	cbz	r3, 15174 <event_connection_prepare+0xfc>
   15134:	429c      	cmp	r4, r3
   15136:	d01d      	beq.n	15174 <event_connection_prepare+0xfc>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   15138:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   1513c:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   15140:	429a      	cmp	r2, r3
   15142:	d0b9      	beq.n	150b8 <event_connection_prepare+0x40>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   15144:	2305      	movs	r3, #5
   15146:	2200      	movs	r2, #0
   15148:	4611      	mov	r1, r2
   1514a:	4610      	mov	r0, r2
   1514c:	f7fd f858 	bl	12200 <event_stop>
	switch (conn->llcp_phy.state) {
   15150:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15154:	f003 0303 	and.w	r3, r3, #3
   15158:	2b03      	cmp	r3, #3
   1515a:	f200 8257 	bhi.w	1560c <event_connection_prepare+0x594>
   1515e:	a201      	add	r2, pc, #4	; (adr r2, 15164 <event_connection_prepare+0xec>)
   15160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15164:	0001545d 	.word	0x0001545d
   15168:	000150b9 	.word	0x000150b9
   1516c:	000150b9 	.word	0x000150b9
   15170:	000154d7 	.word	0x000154d7
	switch (conn->llcp_conn_param.state) {
   15174:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   15178:	f003 0307 	and.w	r3, r3, #7
   1517c:	2b05      	cmp	r3, #5
   1517e:	f200 8167 	bhi.w	15450 <event_connection_prepare+0x3d8>
   15182:	a201      	add	r2, pc, #4	; (adr r2, 15188 <event_connection_prepare+0x110>)
   15184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15188:	000151a1 	.word	0x000151a1
   1518c:	0001526b 	.word	0x0001526b
   15190:	000153b9 	.word	0x000153b9
   15194:	00015139 	.word	0x00015139
   15198:	00015139 	.word	0x00015139
   1519c:	00015139 	.word	0x00015139
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   151a0:	4883      	ldr	r0, [pc, #524]	; (153b0 <event_connection_prepare+0x338>)
   151a2:	f7fa f8c0 	bl	f326 <mem_acquire>
	if (!node_tx) {
   151a6:	4680      	mov	r8, r0
   151a8:	2800      	cmp	r0, #0
   151aa:	d0c5      	beq.n	15138 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   151ac:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   151b0:	2204      	movs	r2, #4
   151b2:	f362 0302 	bfi	r3, r2, #0, #3
   151b6:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   151ba:	7903      	ldrb	r3, [r0, #4]
   151bc:	f043 0303 	orr.w	r3, r3, #3
   151c0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   151c2:	2318      	movs	r3, #24
   151c4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   151c6:	230f      	movs	r3, #15
   151c8:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   151ca:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   151ce:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   151d0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   151d4:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   151d6:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   151da:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   151dc:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   151e0:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   151e2:	2300      	movs	r3, #0
   151e4:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count = event_counter;
   151e6:	f8a0 5011 	strh.w	r5, [r0, #17]
	p->offset0 = 0x0000;
   151ea:	74c3      	strb	r3, [r0, #19]
   151ec:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   151ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   151f2:	7543      	strb	r3, [r0, #21]
   151f4:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   151f6:	75c3      	strb	r3, [r0, #23]
   151f8:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   151fa:	7643      	strb	r3, [r0, #25]
   151fc:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   151fe:	76c3      	strb	r3, [r0, #27]
   15200:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   15202:	7743      	strb	r3, [r0, #29]
   15204:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, node_tx);
   15206:	4601      	mov	r1, r0
   15208:	4620      	mov	r0, r4
   1520a:	f7fc fb1f 	bl	1184c <ctrl_tx_enqueue>
	_radio.conn_upd = conn;
   1520e:	4b67      	ldr	r3, [pc, #412]	; (153ac <event_connection_prepare+0x334>)
   15210:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
	conn->procedure_expire = conn->procedure_reload;
   15214:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15218:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   1521c:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   15220:	6823      	ldr	r3, [r4, #0]
   15222:	2b00      	cmp	r3, #0
   15224:	db13      	blt.n	1524e <event_connection_prepare+0x1d6>
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   15226:	f108 0313 	add.w	r3, r8, #19
   1522a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		s_mfy_sched_offset.param = (void *)conn;
   1522e:	4b61      	ldr	r3, [pc, #388]	; (153b4 <event_connection_prepare+0x33c>)
   15230:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   15232:	2201      	movs	r2, #1
   15234:	4611      	mov	r1, r2
   15236:	2000      	movs	r0, #0
   15238:	f7f9 ff34 	bl	f0a4 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1523c:	2800      	cmp	r0, #0
   1523e:	f43f af7b 	beq.w	15138 <event_connection_prepare+0xc0>
   15242:	4040      	eors	r0, r0
   15244:	f380 8811 	msr	BASEPRI, r0
   15248:	f04f 0004 	mov.w	r0, #4
   1524c:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   1524e:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   15250:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   15252:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   15256:	4291      	cmp	r1, r2
   15258:	bf2c      	ite	cs
   1525a:	ebc3 0301 	rsbcs	r3, r3, r1
   1525e:	ebc3 0302 	rsbcc	r3, r3, r2
			conn->llcp_conn_param.ticks_ref -=
   15262:	4433      	add	r3, r6
   15264:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   15268:	e7dd      	b.n	15226 <event_connection_prepare+0x1ae>
	if (conn->llcp_conn_param.status) {
   1526a:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   1526e:	bbb3      	cbnz	r3, 152de <event_connection_prepare+0x266>
	if (!conn->role) {
   15270:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15274:	2b00      	cmp	r3, #0
   15276:	db52      	blt.n	1531e <event_connection_prepare+0x2a6>
		if (conn->llcp_req != conn->llcp_ack) {
   15278:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   1527c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   15280:	429a      	cmp	r2, r3
   15282:	f47f af59 	bne.w	15138 <event_connection_prepare+0xc0>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   15286:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   1528a:	2105      	movs	r1, #5
   1528c:	f361 0202 	bfi	r2, r1, #0, #3
   15290:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   15294:	2001      	movs	r0, #1
   15296:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   1529a:	2100      	movs	r1, #0
   1529c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   152a0:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
   152a4:	f8a4 107a 	strh.w	r1, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   152a8:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   152ac:	f8a4 107c 	strh.w	r1, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   152b0:	f8b4 10c8 	ldrh.w	r1, [r4, #200]	; 0xc8
   152b4:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   152b8:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   152bc:	f04f 0e02 	mov.w	lr, #2
   152c0:	f36e 0101 	bfi	r1, lr, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   152c4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   152c8:	4042      	eors	r2, r0
   152ca:	f362 0182 	bfi	r1, r2, #2, #1
   152ce:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   152d2:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
		conn->llcp_ack--;
   152d6:	3b01      	subs	r3, #1
   152d8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   152dc:	e72c      	b.n	15138 <event_connection_prepare+0xc0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   152de:	4834      	ldr	r0, [pc, #208]	; (153b0 <event_connection_prepare+0x338>)
   152e0:	f7fa f821 	bl	f326 <mem_acquire>
		if (!node_tx) {
   152e4:	4601      	mov	r1, r0
   152e6:	2800      	cmp	r0, #0
   152e8:	f43f af26 	beq.w	15138 <event_connection_prepare+0xc0>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   152ec:	7903      	ldrb	r3, [r0, #4]
   152ee:	f043 0303 	orr.w	r3, r3, #3
   152f2:	7103      	strb	r3, [r0, #4]
		pdu->payload.llctrl.opcode =
   152f4:	2311      	movs	r3, #17
   152f6:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   152f8:	2303      	movs	r3, #3
   152fa:	7143      	strb	r3, [r0, #5]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   152fc:	230f      	movs	r3, #15
   152fe:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp_conn_param.status;
   15300:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   15304:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   15306:	4620      	mov	r0, r4
   15308:	f7fc faa0 	bl	1184c <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1530c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   15310:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   15314:	2200      	movs	r2, #0
   15316:	4b25      	ldr	r3, [pc, #148]	; (153ac <event_connection_prepare+0x334>)
   15318:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1531c:	e70c      	b.n	15138 <event_connection_prepare+0xc0>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1531e:	4824      	ldr	r0, [pc, #144]	; (153b0 <event_connection_prepare+0x338>)
   15320:	f7fa f801 	bl	f326 <mem_acquire>
	if (!node_tx) {
   15324:	4601      	mov	r1, r0
   15326:	2800      	cmp	r0, #0
   15328:	f43f af06 	beq.w	15138 <event_connection_prepare+0xc0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1532c:	7903      	ldrb	r3, [r0, #4]
   1532e:	f043 0303 	orr.w	r3, r3, #3
   15332:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15334:	2318      	movs	r3, #24
   15336:	7143      	strb	r3, [r0, #5]
	pdu->payload.llctrl.opcode =
   15338:	2310      	movs	r3, #16
   1533a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   1533c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   15340:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   15342:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   15346:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   15348:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1534c:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   1534e:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   15352:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   15354:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   15358:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count =
   1535a:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   1535e:	f8a0 3011 	strh.w	r3, [r0, #17]
	p->offset0 = conn->llcp_conn_param.offset0;
   15362:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   15366:	f8a0 3013 	strh.w	r3, [r0, #19]
	p->offset1 = conn->llcp_conn_param.offset1;
   1536a:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   1536e:	f8a0 3015 	strh.w	r3, [r0, #21]
	p->offset2 = conn->llcp_conn_param.offset2;
   15372:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   15376:	f8a0 3017 	strh.w	r3, [r0, #23]
	p->offset3 = conn->llcp_conn_param.offset3;
   1537a:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   1537e:	f8a0 3019 	strh.w	r3, [r0, #25]
	p->offset4 = conn->llcp_conn_param.offset4;
   15382:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
   15386:	f8a0 301b 	strh.w	r3, [r0, #27]
	p->offset5 = conn->llcp_conn_param.offset5;
   1538a:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   1538e:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   15392:	4620      	mov	r0, r4
   15394:	f7fc fa5a 	bl	1184c <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15398:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   1539c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
   153a0:	2200      	movs	r2, #0
   153a2:	4b02      	ldr	r3, [pc, #8]	; (153ac <event_connection_prepare+0x334>)
   153a4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   153a8:	e6c6      	b.n	15138 <event_connection_prepare+0xc0>
   153aa:	bf00      	nop
   153ac:	200014d4 	.word	0x200014d4
   153b0:	2000162c 	.word	0x2000162c
   153b4:	2000c2a8 	.word	0x2000c2a8
	if (conn->pause_tx) {
   153b8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   153bc:	f013 0f08 	tst.w	r3, #8
   153c0:	f47f aeba 	bne.w	15138 <event_connection_prepare+0xc0>
	if (_radio.packet_rx_acquire >=
   153c4:	4b94      	ldr	r3, [pc, #592]	; (15618 <event_connection_prepare+0x5a0>)
   153c6:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   153ca:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   153ce:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   153d0:	429a      	cmp	r2, r3
   153d2:	d331      	bcc.n	15438 <event_connection_prepare+0x3c0>
			_radio.packet_rx_last);
   153d4:	4b90      	ldr	r3, [pc, #576]	; (15618 <event_connection_prepare+0x5a0>)
   153d6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   153da:	1ad3      	subs	r3, r2, r3
   153dc:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   153de:	2b01      	cmp	r3, #1
   153e0:	d934      	bls.n	1544c <event_connection_prepare+0x3d4>
	return _radio.packet_rx[_radio.packet_rx_last];
   153e2:	4b8d      	ldr	r3, [pc, #564]	; (15618 <event_connection_prepare+0x5a0>)
   153e4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   153e8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   153ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (!node_rx) {
   153f0:	2b00      	cmp	r3, #0
   153f2:	f43f aea1 	beq.w	15138 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   153f6:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   153fa:	2103      	movs	r1, #3
   153fc:	f361 0202 	bfi	r2, r1, #0, #3
   15400:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
   15404:	8c22      	ldrh	r2, [r4, #32]
   15406:	80da      	strh	r2, [r3, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15408:	2201      	movs	r2, #1
   1540a:	711a      	strb	r2, [r3, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1540c:	7a1a      	ldrb	r2, [r3, #8]
   1540e:	430a      	orrs	r2, r1
   15410:	721a      	strb	r2, [r3, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15412:	2218      	movs	r2, #24
   15414:	725a      	strb	r2, [r3, #9]
	pdu->payload.llctrl.opcode =
   15416:	220f      	movs	r2, #15
   15418:	72da      	strb	r2, [r3, #11]
	p->interval_min = conn->llcp_conn_param.interval;
   1541a:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   1541e:	819a      	strh	r2, [r3, #12]
	p->interval_max = conn->llcp_conn_param.interval;
   15420:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   15424:	81da      	strh	r2, [r3, #14]
	p->latency = conn->llcp_conn_param.latency;
   15426:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   1542a:	821a      	strh	r2, [r3, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   1542c:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
   15430:	825a      	strh	r2, [r3, #18]
	packet_rx_enqueue();
   15432:	f7fe ffbf 	bl	143b4 <packet_rx_enqueue>
   15436:	e67f      	b.n	15138 <event_connection_prepare+0xc0>
		return (_radio.packet_rx_count -
   15438:	4977      	ldr	r1, [pc, #476]	; (15618 <event_connection_prepare+0x5a0>)
   1543a:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   1543e:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15442:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15444:	fa52 f383 	uxtab	r3, r2, r3
   15448:	b2db      	uxtb	r3, r3
   1544a:	e7c8      	b.n	153de <event_connection_prepare+0x366>
		return 0;
   1544c:	2300      	movs	r3, #0
   1544e:	e7cf      	b.n	153f0 <event_connection_prepare+0x378>
		LL_ASSERT(0);
   15450:	4040      	eors	r0, r0
   15452:	f380 8811 	msr	BASEPRI, r0
   15456:	f04f 0004 	mov.w	r0, #4
   1545a:	df02      	svc	2
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1545c:	486f      	ldr	r0, [pc, #444]	; (1561c <event_connection_prepare+0x5a4>)
   1545e:	f7f9 ff62 	bl	f326 <mem_acquire>
		if (!node_tx) {
   15462:	4601      	mov	r1, r0
   15464:	2800      	cmp	r0, #0
   15466:	f43f ae27 	beq.w	150b8 <event_connection_prepare+0x40>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1546a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1546e:	2201      	movs	r2, #1
   15470:	f362 0301 	bfi	r3, r2, #0, #2
   15474:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   15478:	b2db      	uxtb	r3, r3
   1547a:	f3c3 0082 	ubfx	r0, r3, #2, #3
   1547e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   15482:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   15486:	095b      	lsrs	r3, r3, #5
   15488:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
   1548c:	f363 00c5 	bfi	r0, r3, #3, #3
   15490:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
   15494:	f894 00f7 	ldrb.w	r0, [r4, #247]	; 0xf7
   15498:	4613      	mov	r3, r2
   1549a:	f360 1386 	bfi	r3, r0, #6, #1
   1549e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   154a2:	790b      	ldrb	r3, [r1, #4]
   154a4:	f043 0303 	orr.w	r3, r3, #3
   154a8:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   154aa:	2303      	movs	r3, #3
   154ac:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   154ae:	2316      	movs	r3, #22
   154b0:	71cb      	strb	r3, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
   154b2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   154b6:	f3c3 0382 	ubfx	r3, r3, #2, #3
   154ba:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   154bc:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   154c0:	f3c3 1342 	ubfx	r3, r3, #5, #3
   154c4:	724b      	strb	r3, [r1, #9]
		ctrl_tx_enqueue(conn, node_tx);
   154c6:	4620      	mov	r0, r4
   154c8:	f7fc f9c0 	bl	1184c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   154cc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   154d0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   154d4:	e5f0      	b.n	150b8 <event_connection_prepare+0x40>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   154d6:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   154da:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
   154de:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   154e2:	f3c3 0382 	ubfx	r3, r3, #2, #3
   154e6:	f013 0f02 	tst.w	r3, #2
   154ea:	d047      	beq.n	1557c <event_connection_prepare+0x504>
			conn->llcp_phy.tx = BIT(1);
   154ec:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   154f0:	2202      	movs	r2, #2
   154f2:	f362 0384 	bfi	r3, r2, #2, #3
   154f6:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
   154fa:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   154fe:	095b      	lsrs	r3, r3, #5
   15500:	f013 0f02 	tst.w	r3, #2
   15504:	d057      	beq.n	155b6 <event_connection_prepare+0x53e>
			conn->llcp_phy.rx = BIT(1);
   15506:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1550a:	2202      	movs	r2, #2
   1550c:	f362 1347 	bfi	r3, r2, #5, #3
   15510:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
   15514:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15518:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1551c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   15520:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   15524:	4293      	cmp	r3, r2
   15526:	d063      	beq.n	155f0 <event_connection_prepare+0x578>
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
   15528:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1552c:	f363 0284 	bfi	r2, r3, #2, #3
   15530:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
   15534:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15538:	095b      	lsrs	r3, r3, #5
   1553a:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   1553e:	f002 0207 	and.w	r2, r2, #7
   15542:	4293      	cmp	r3, r2
   15544:	d05b      	beq.n	155fe <event_connection_prepare+0x586>
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   15546:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1554a:	f363 1247 	bfi	r2, r3, #5, #3
   1554e:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   15552:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   15556:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   1555a:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1555e:	f043 0301 	orr.w	r3, r3, #1
   15562:	f362 0341 	bfi	r3, r2, #1, #1
   15566:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   1556a:	2308      	movs	r3, #8
   1556c:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   15570:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   15574:	3b01      	subs	r3, #1
   15576:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   1557a:	e59d      	b.n	150b8 <event_connection_prepare+0x40>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   1557c:	f013 0f01 	tst.w	r3, #1
   15580:	d007      	beq.n	15592 <event_connection_prepare+0x51a>
			conn->llcp_phy.tx = BIT(0);
   15582:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15586:	2201      	movs	r2, #1
   15588:	f362 0384 	bfi	r3, r2, #2, #3
   1558c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15590:	e7b3      	b.n	154fa <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   15592:	f013 0f04 	tst.w	r3, #4
   15596:	d007      	beq.n	155a8 <event_connection_prepare+0x530>
			conn->llcp_phy.tx = BIT(2);
   15598:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1559c:	2204      	movs	r2, #4
   1559e:	f362 0384 	bfi	r3, r2, #2, #3
   155a2:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   155a6:	e7a8      	b.n	154fa <event_connection_prepare+0x482>
			conn->llcp_phy.tx = 0;
   155a8:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   155ac:	f36f 0384 	bfc	r3, #2, #3
   155b0:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   155b4:	e7a1      	b.n	154fa <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   155b6:	f013 0f01 	tst.w	r3, #1
   155ba:	d007      	beq.n	155cc <event_connection_prepare+0x554>
			conn->llcp_phy.rx = BIT(0);
   155bc:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   155c0:	2201      	movs	r2, #1
   155c2:	f362 1347 	bfi	r3, r2, #5, #3
   155c6:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   155ca:	e7a3      	b.n	15514 <event_connection_prepare+0x49c>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   155cc:	f013 0f04 	tst.w	r3, #4
   155d0:	d007      	beq.n	155e2 <event_connection_prepare+0x56a>
			conn->llcp_phy.rx = BIT(2);
   155d2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   155d6:	2204      	movs	r2, #4
   155d8:	f362 1347 	bfi	r3, r2, #5, #3
   155dc:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   155e0:	e798      	b.n	15514 <event_connection_prepare+0x49c>
			conn->llcp_phy.rx = 0;
   155e2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   155e6:	f36f 1347 	bfc	r3, #5, #3
   155ea:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   155ee:	e791      	b.n	15514 <event_connection_prepare+0x49c>
			conn->llcp.phy_upd_ind.tx = 0;
   155f0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   155f4:	f36f 0384 	bfc	r3, #2, #3
   155f8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   155fc:	e79a      	b.n	15534 <event_connection_prepare+0x4bc>
			conn->llcp.phy_upd_ind.rx = 0;
   155fe:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15602:	f36f 1347 	bfc	r3, #5, #3
   15606:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1560a:	e7a2      	b.n	15552 <event_connection_prepare+0x4da>
		LL_ASSERT(0);
   1560c:	4040      	eors	r0, r0
   1560e:	f380 8811 	msr	BASEPRI, r0
   15612:	f04f 0004 	mov.w	r0, #4
   15616:	df02      	svc	2
   15618:	200014d4 	.word	0x200014d4
   1561c:	2000162c 	.word	0x2000162c
	conn_upd = _radio.conn_upd;
   15620:	4bb7      	ldr	r3, [pc, #732]	; (15900 <event_connection_prepare+0x888>)
   15622:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (!conn_upd) {
   15626:	2b00      	cmp	r3, #0
   15628:	f000 814b 	beq.w	158c2 <event_connection_prepare+0x84a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   1562c:	f8b4 8080 	ldrh.w	r8, [r4, #128]	; 0x80
   15630:	eba5 0808 	sub.w	r8, r5, r8
   15634:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   15638:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1563c:	f013 0f03 	tst.w	r3, #3
   15640:	f040 8143 	bne.w	158ca <event_connection_prepare+0x852>
	} else if (instant_latency <= 0x7FFF) {
   15644:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   15648:	f040 8296 	bne.w	15b78 <event_connection_prepare+0xb00>
		conn->llcp_ack = conn->llcp_req;
   1564c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15650:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15654:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
   15658:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
   1565c:	429a      	cmp	r2, r3
   1565e:	d006      	beq.n	1566e <event_connection_prepare+0x5f6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   15660:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   15664:	f003 0307 	and.w	r3, r3, #7
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15668:	2b05      	cmp	r3, #5
   1566a:	f000 81bb 	beq.w	159e4 <event_connection_prepare+0x96c>
		_radio.ticker_id_prepare = 0;
   1566e:	4ba4      	ldr	r3, [pc, #656]	; (15900 <event_connection_prepare+0x888>)
   15670:	2200      	movs	r2, #0
   15672:	731a      	strb	r2, [r3, #12]
		if (_radio.conn_upd == conn) {
   15674:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   15678:	429c      	cmp	r4, r3
   1567a:	f000 81b9 	beq.w	159f0 <event_connection_prepare+0x978>
		if ((conn->llcp.conn_upd.interval !=
   1567e:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
		     conn->conn_interval) ||
   15682:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		if ((conn->llcp.conn_upd.interval !=
   15684:	429a      	cmp	r2, r3
   15686:	f000 81b7 	beq.w	159f8 <event_connection_prepare+0x980>
	if (_radio.packet_rx_acquire >=
   1568a:	4b9d      	ldr	r3, [pc, #628]	; (15900 <event_connection_prepare+0x888>)
   1568c:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15690:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15694:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15696:	429a      	cmp	r2, r3
   15698:	f0c0 81c7 	bcc.w	15a2a <event_connection_prepare+0x9b2>
			_radio.packet_rx_last);
   1569c:	4b98      	ldr	r3, [pc, #608]	; (15900 <event_connection_prepare+0x888>)
   1569e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   156a2:	1ad3      	subs	r3, r2, r3
   156a4:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   156a6:	2b01      	cmp	r3, #1
   156a8:	f240 81c9 	bls.w	15a3e <event_connection_prepare+0x9c6>
	return _radio.packet_rx[_radio.packet_rx_last];
   156ac:	4b94      	ldr	r3, [pc, #592]	; (15900 <event_connection_prepare+0x888>)
   156ae:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   156b2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   156b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   156ba:	2b00      	cmp	r3, #0
   156bc:	f000 81c1 	beq.w	15a42 <event_connection_prepare+0x9ca>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   156c0:	8c22      	ldrh	r2, [r4, #32]
   156c2:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   156c4:	2208      	movs	r2, #8
   156c6:	711a      	strb	r2, [r3, #4]
			radio_le_conn_update_cmplt->status = 0x00;
   156c8:	2200      	movs	r2, #0
   156ca:	72da      	strb	r2, [r3, #11]
			radio_le_conn_update_cmplt->interval =
   156cc:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   156d0:	819a      	strh	r2, [r3, #12]
			radio_le_conn_update_cmplt->latency =
   156d2:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   156d6:	81da      	strh	r2, [r3, #14]
			radio_le_conn_update_cmplt->timeout =
   156d8:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   156dc:	821a      	strh	r2, [r3, #16]
			packet_rx_enqueue();
   156de:	f7fe fe69 	bl	143b4 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   156e2:	6823      	ldr	r3, [r4, #0]
   156e4:	2b00      	cmp	r3, #0
   156e6:	f2c0 81b2 	blt.w	15a4e <event_connection_prepare+0x9d6>
   156ea:	46b1      	mov	r9, r6
		conn_interval_old = instant_latency * conn->conn_interval;
   156ec:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   156ee:	fb18 f303 	smulbb	r3, r8, r3
   156f2:	b29b      	uxth	r3, r3
			conn->llcp.conn_upd.interval;
   156f4:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
		latency = conn_interval_old /
   156f8:	fbb3 fbfa 	udiv	fp, r3, sl
		conn_interval_new = latency *
   156fc:	fb1a f00b 	smulbb	r0, sl, fp
   15700:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   15702:	4283      	cmp	r3, r0
   15704:	f080 81b1 	bcs.w	15a6a <event_connection_prepare+0x9f2>
				TICKER_US_TO_TICKS((conn_interval_new -
   15708:	1ac3      	subs	r3, r0, r3
   1570a:	17d9      	asrs	r1, r3, #31
   1570c:	487d      	ldr	r0, [pc, #500]	; (15904 <event_connection_prepare+0x88c>)
   1570e:	f240 1223 	movw	r2, #291	; 0x123
   15712:	fb02 f203 	mul.w	r2, r2, r3
   15716:	fb00 2201 	mla	r2, r0, r1, r2
   1571a:	fba3 0100 	umull	r0, r1, r3, r0
   1571e:	4411      	add	r1, r2
   15720:	a375      	add	r3, pc, #468	; (adr r3, 158f8 <event_connection_prepare+0x880>)
   15722:	e9d3 2300 	ldrd	r2, r3, [r3]
   15726:	f7eb fce9 	bl	10fc <__aeabi_uldivmod>
   1572a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire +=
   1572e:	eb00 0309 	add.w	r3, r0, r9
   15732:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
   15734:	ebab 0308 	sub.w	r3, fp, r8
   15738:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   1573a:	fa12 f383 	uxtah	r3, r2, r3
   1573e:	8523      	strh	r3, [r4, #40]	; 0x28
			conn->hdr.ticks_active_to_start;
   15740:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start :
   15742:	6823      	ldr	r3, [r4, #0]
		ticks_slot_offset =
   15744:	429a      	cmp	r2, r3
   15746:	bf38      	it	cc
   15748:	461a      	movcc	r2, r3
   1574a:	920c      	str	r2, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   1574c:	f240 49e2 	movw	r9, #1250	; 0x4e2
   15750:	fb09 f90a 	mul.w	r9, r9, sl
		if (conn->role) {
   15754:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15758:	2b00      	cmp	r3, #0
   1575a:	f2c0 819d 	blt.w	15a98 <event_connection_prepare+0xa20>
				TICKER_US_TO_TICKS(conn->llcp.conn_upd.win_offset_us);
   1575e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   15762:	a365      	add	r3, pc, #404	; (adr r3, 158f8 <event_connection_prepare+0x880>)
   15764:	e9d3 2300 	ldrd	r2, r3, [r3]
   15768:	4967      	ldr	r1, [pc, #412]	; (15908 <event_connection_prepare+0x890>)
   1576a:	fba0 0101 	umull	r0, r1, r0, r1
   1576e:	f7eb fcc5 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   15772:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   15776:	f100 0b01 	add.w	fp, r0, #1
		periodic_us = conn_interval_us;
   1577a:	46c8      	mov	r8, r9
		conn->conn_interval = conn->llcp.conn_upd.interval;
   1577c:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
		conn->latency = conn->llcp.conn_upd.latency;
   15780:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   15784:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   15786:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   1578a:	f242 7110 	movw	r1, #10000	; 0x2710
   1578e:	fb01 9303 	mla	r3, r1, r3, r9
   15792:	3b01      	subs	r3, #1
   15794:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->supervision_reload =
   15798:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   1579a:	4b5c      	ldr	r3, [pc, #368]	; (1590c <event_connection_prepare+0x894>)
   1579c:	444b      	add	r3, r9
   1579e:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->procedure_reload =
   157a2:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   157a6:	4b5a      	ldr	r3, [pc, #360]	; (15910 <event_connection_prepare+0x898>)
   157a8:	444b      	add	r3, r9
   157aa:	fbb3 f9f9 	udiv	r9, r3, r9
   157ae:	fa1f f989 	uxth.w	r9, r9
   157b2:	f8a4 904a 	strh.w	r9, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   157b6:	1d93      	adds	r3, r2, #6
   157b8:	4599      	cmp	r9, r3
   157ba:	dd07      	ble.n	157cc <event_connection_prepare+0x754>
				     (conn->apto_reload - (conn->latency + 6)) :
   157bc:	eba9 0902 	sub.w	r9, r9, r2
   157c0:	fa1f f989 	uxth.w	r9, r9
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   157c4:	f1a9 0906 	sub.w	r9, r9, #6
   157c8:	fa1f f989 	uxth.w	r9, r9
   157cc:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
		if (!conn->llcp.conn_upd.is_internal) {
   157d0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   157d4:	f013 0f04 	tst.w	r3, #4
   157d8:	d102      	bne.n	157e0 <event_connection_prepare+0x768>
			conn->supervision_expire = 0;
   157da:	2300      	movs	r3, #0
   157dc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		mayfly_was_enabled =
   157e0:	2101      	movs	r1, #1
   157e2:	2000      	movs	r0, #0
   157e4:	f003 fe2d 	bl	19442 <mayfly_is_enabled>
   157e8:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   157ea:	2200      	movs	r2, #0
   157ec:	2101      	movs	r1, #1
   157ee:	4610      	mov	r0, r2
   157f0:	f7f9 fc1a 	bl	f028 <mayfly_enable>
				    conn->handle, ticker_success_assert,
   157f4:	8c22      	ldrh	r2, [r4, #32]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   157f6:	3207      	adds	r2, #7
		ticker_status =
   157f8:	f641 13e3 	movw	r3, #6627	; 0x19e3
   157fc:	9300      	str	r3, [sp, #0]
   157fe:	4b45      	ldr	r3, [pc, #276]	; (15914 <event_connection_prepare+0x89c>)
   15800:	b2d2      	uxtb	r2, r2
   15802:	2100      	movs	r1, #0
   15804:	4608      	mov	r0, r1
   15806:	f7fb fafb 	bl	10e00 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1580a:	b110      	cbz	r0, 15812 <event_connection_prepare+0x79a>
   1580c:	2802      	cmp	r0, #2
   1580e:	f040 819a 	bne.w	15b46 <event_connection_prepare+0xace>
				     conn->handle,
   15812:	f8b4 a020 	ldrh.w	sl, [r4, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15816:	f10a 0a07 	add.w	sl, sl, #7
   1581a:	fa5f fa8a 	uxtb.w	sl, sl
				     TICKER_US_TO_TICKS(periodic_us),
   1581e:	4b3a      	ldr	r3, [pc, #232]	; (15908 <event_connection_prepare+0x890>)
   15820:	fba8 2303 	umull	r2, r3, r8, r3
   15824:	4617      	mov	r7, r2
   15826:	4698      	mov	r8, r3
   15828:	a333      	add	r3, pc, #204	; (adr r3, 158f8 <event_connection_prepare+0x880>)
   1582a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1582e:	4638      	mov	r0, r7
   15830:	4641      	mov	r1, r8
   15832:	f7eb fc63 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15836:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   1583a:	930d      	str	r3, [sp, #52]	; 0x34
				     TICKER_REMAINDER(periodic_us),
   1583c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   15840:	2100      	movs	r1, #0
   15842:	4a35      	ldr	r2, [pc, #212]	; (15918 <event_connection_prepare+0x8a0>)
   15844:	2307      	movs	r3, #7
   15846:	fb03 f300 	mul.w	r3, r3, r0
   1584a:	fb02 3301 	mla	r3, r2, r1, r3
   1584e:	fba0 0102 	umull	r0, r1, r0, r2
   15852:	4419      	add	r1, r3
   15854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15858:	2300      	movs	r3, #0
   1585a:	1a3f      	subs	r7, r7, r0
   1585c:	eb68 0801 	sbc.w	r8, r8, r1
   15860:	4638      	mov	r0, r7
   15862:	4641      	mov	r1, r8
   15864:	f7eb fc4a 	bl	10fc <__aeabi_uldivmod>
   15868:	4602      	mov	r2, r0
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   1586a:	68e3      	ldr	r3, [r4, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1586c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1586e:	440b      	add	r3, r1
   15870:	b29b      	uxth	r3, r3
   15872:	f994 101d 	ldrsb.w	r1, [r4, #29]
   15876:	2900      	cmp	r1, #0
   15878:	f2c0 816b 	blt.w	15b52 <event_connection_prepare+0xada>
   1587c:	4927      	ldr	r1, [pc, #156]	; (1591c <event_connection_prepare+0x8a4>)
		ticker_status =
   1587e:	f641 10f3 	movw	r0, #6643	; 0x19f3
   15882:	9008      	str	r0, [sp, #32]
   15884:	4823      	ldr	r0, [pc, #140]	; (15914 <event_connection_prepare+0x89c>)
   15886:	9007      	str	r0, [sp, #28]
   15888:	9406      	str	r4, [sp, #24]
   1588a:	9105      	str	r1, [sp, #20]
   1588c:	9304      	str	r3, [sp, #16]
   1588e:	2000      	movs	r0, #0
   15890:	9003      	str	r0, [sp, #12]
   15892:	9202      	str	r2, [sp, #8]
   15894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15896:	9301      	str	r3, [sp, #4]
   15898:	f8cd b000 	str.w	fp, [sp]
   1589c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1589e:	4652      	mov	r2, sl
   158a0:	4601      	mov	r1, r0
   158a2:	f7fb fa11 	bl	10cc8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   158a6:	b110      	cbz	r0, 158ae <event_connection_prepare+0x836>
   158a8:	2802      	cmp	r0, #2
   158aa:	f040 8154 	bne.w	15b56 <event_connection_prepare+0xade>
		if (mayfly_was_enabled) {
   158ae:	f1b9 0f00 	cmp.w	r9, #0
   158b2:	f040 8156 	bne.w	15b62 <event_connection_prepare+0xaea>
			if (event_conn_upd_prep(conn, event_counter,
   158b6:	f1b9 0f00 	cmp.w	r9, #0
   158ba:	f040 821e 	bne.w	15cfa <event_connection_prepare+0xc82>
   158be:	f000 be59 	b.w	16574 <event_connection_prepare+0x14fc>
		_radio.conn_upd = conn;
   158c2:	4b0f      	ldr	r3, [pc, #60]	; (15900 <event_connection_prepare+0x888>)
   158c4:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
   158c8:	e6b0      	b.n	1562c <event_connection_prepare+0x5b4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   158ca:	4815      	ldr	r0, [pc, #84]	; (15920 <event_connection_prepare+0x8a8>)
   158cc:	f7f9 fd2b 	bl	f326 <mem_acquire>
		if (!node_tx) {
   158d0:	4680      	mov	r8, r0
   158d2:	2800      	cmp	r0, #0
   158d4:	f000 814d 	beq.w	15b72 <event_connection_prepare+0xafa>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   158d8:	1d03      	adds	r3, r0, #4
		switch (conn->llcp.conn_upd.state) {
   158da:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   158de:	f002 0203 	and.w	r2, r2, #3
   158e2:	2a01      	cmp	r2, #1
   158e4:	d01e      	beq.n	15924 <event_connection_prepare+0x8ac>
   158e6:	2a02      	cmp	r2, #2
   158e8:	d066      	beq.n	159b8 <event_connection_prepare+0x940>
			LL_ASSERT(0);
   158ea:	4040      	eors	r0, r0
   158ec:	f380 8811 	msr	BASEPRI, r0
   158f0:	f04f 0004 	mov.w	r0, #4
   158f4:	df02      	svc	2
   158f6:	bf00      	nop
   158f8:	1afd498d 	.word	0x1afd498d
   158fc:	00000007 	.word	0x00000007
   15900:	200014d4 	.word	0x200014d4
   15904:	09ce5400 	.word	0x09ce5400
   15908:	3b9aca00 	.word	0x3b9aca00
   1590c:	026259ff 	.word	0x026259ff
   15910:	01c9c37f 	.word	0x01c9c37f
   15914:	00011a1d 	.word	0x00011a1d
   15918:	1afd498d 	.word	0x1afd498d
   1591c:	000165dd 	.word	0x000165dd
   15920:	2000162c 	.word	0x2000162c
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   15924:	49bc      	ldr	r1, [pc, #752]	; (15c18 <event_connection_prepare+0xba0>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   15926:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1592a:	f36f 0201 	bfc	r2, #0, #2
   1592e:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   15932:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   15934:	442a      	add	r2, r5
   15936:	b292      	uxth	r2, r2
   15938:	3206      	adds	r2, #6
	conn->llcp.conn_upd.instant =
   1593a:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1593e:	f898 2004 	ldrb.w	r2, [r8, #4]
   15942:	f042 0203 	orr.w	r2, r2, #3
   15946:	f888 2004 	strb.w	r2, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1594a:	220c      	movs	r2, #12
   1594c:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1594e:	2200      	movs	r2, #0
   15950:	70da      	strb	r2, [r3, #3]
		conn->llcp.conn_upd.win_size;
   15952:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
   15956:	711a      	strb	r2, [r3, #4]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   15958:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   1595c:	48af      	ldr	r0, [pc, #700]	; (15c1c <event_connection_prepare+0xba4>)
   1595e:	fba0 0202 	umull	r0, r2, r0, r2
   15962:	0a92      	lsrs	r2, r2, #10
   15964:	f8a3 2005 	strh.w	r2, [r3, #5]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
   15968:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   1596c:	f8a3 2007 	strh.w	r2, [r3, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
   15970:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   15974:	f8a3 2009 	strh.w	r2, [r3, #9]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
   15978:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   1597c:	f8a3 200b 	strh.w	r2, [r3, #11]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
   15980:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
   15984:	f8a3 200d 	strh.w	r2, [r3, #13]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   15988:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   1598c:	6820      	ldr	r0, [r4, #0]
   1598e:	2800      	cmp	r0, #0
   15990:	db14      	blt.n	159bc <event_connection_prepare+0x944>
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   15992:	3305      	adds	r3, #5
   15994:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   15998:	4ba1      	ldr	r3, [pc, #644]	; (15c20 <event_connection_prepare+0xba8>)
   1599a:	60d9      	str	r1, [r3, #12]
		mayfly_sched_offset->param = (void *)conn;
   1599c:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1599e:	2201      	movs	r2, #1
   159a0:	4611      	mov	r1, r2
   159a2:	2000      	movs	r0, #0
   159a4:	f7f9 fb7e 	bl	f0a4 <mayfly_enqueue>
		LL_ASSERT(!retval);
   159a8:	b9b0      	cbnz	r0, 159d8 <event_connection_prepare+0x960>
		ctrl_tx_enqueue(conn, node_tx);
   159aa:	4641      	mov	r1, r8
   159ac:	4620      	mov	r0, r4
   159ae:	f7fb ff4d 	bl	1184c <ctrl_tx_enqueue>
	return 1;
   159b2:	f04f 0901 	mov.w	r9, #1
   159b6:	e77e      	b.n	158b6 <event_connection_prepare+0x83e>
			fp_mayfly_select_or_use =
   159b8:	499a      	ldr	r1, [pc, #616]	; (15c24 <event_connection_prepare+0xbac>)
   159ba:	e7b4      	b.n	15926 <event_connection_prepare+0x8ae>
				conn->hdr.ticks_preempt_to_start;
   159bc:	68a7      	ldr	r7, [r4, #8]
				conn->hdr.ticks_active_to_start :
   159be:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   159c0:	f020 4e00 	bic.w	lr, r0, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   159c4:	4297      	cmp	r7, r2
   159c6:	bf2c      	ite	cs
   159c8:	ebce 0207 	rsbcs	r2, lr, r7
   159cc:	ebce 0202 	rsbcc	r2, lr, r2
			conn->llcp.conn_upd.ticks_anchor -=
   159d0:	4432      	add	r2, r6
   159d2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
   159d6:	e7dc      	b.n	15992 <event_connection_prepare+0x91a>
		LL_ASSERT(!retval);
   159d8:	4040      	eors	r0, r0
   159da:	f380 8811 	msr	BASEPRI, r0
   159de:	f04f 0004 	mov.w	r0, #4
   159e2:	df02      	svc	2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   159e4:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   159e8:	2300      	movs	r3, #0
   159ea:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   159ee:	e63e      	b.n	1566e <event_connection_prepare+0x5f6>
			_radio.conn_upd = NULL;
   159f0:	4b8d      	ldr	r3, [pc, #564]	; (15c28 <event_connection_prepare+0xbb0>)
   159f2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   159f6:	e642      	b.n	1567e <event_connection_prepare+0x606>
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   159f8:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   159fc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		     conn->conn_interval) ||
   159fe:	4291      	cmp	r1, r2
   15a00:	f47f ae43 	bne.w	1568a <event_connection_prepare+0x612>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   15a04:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   15a08:	f240 41e2 	movw	r1, #1250	; 0x4e2
   15a0c:	fb01 f103 	mul.w	r1, r1, r3
   15a10:	f242 7310 	movw	r3, #10000	; 0x2710
   15a14:	fb03 1302 	mla	r3, r3, r2, r1
   15a18:	3b01      	subs	r3, #1
   15a1a:	fb93 f3f1 	sdiv	r3, r3, r1
   15a1e:	b29b      	uxth	r3, r3
		     conn->supervision_reload)) {
   15a20:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   15a22:	4293      	cmp	r3, r2
   15a24:	f47f ae31 	bne.w	1568a <event_connection_prepare+0x612>
   15a28:	e65b      	b.n	156e2 <event_connection_prepare+0x66a>
		return (_radio.packet_rx_count -
   15a2a:	497f      	ldr	r1, [pc, #508]	; (15c28 <event_connection_prepare+0xbb0>)
   15a2c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   15a30:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15a34:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15a36:	fa52 f383 	uxtab	r3, r2, r3
   15a3a:	b2db      	uxtb	r3, r3
   15a3c:	e633      	b.n	156a6 <event_connection_prepare+0x62e>
		return 0;
   15a3e:	2300      	movs	r3, #0
   15a40:	e63b      	b.n	156ba <event_connection_prepare+0x642>
			LL_ASSERT(radio_pdu_node_rx);
   15a42:	4040      	eors	r0, r0
   15a44:	f380 8811 	msr	BASEPRI, r0
   15a48:	f04f 0004 	mov.w	r0, #4
   15a4c:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   15a4e:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   15a50:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
   15a52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   15a56:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   15a58:	4291      	cmp	r1, r2
   15a5a:	bf2c      	ite	cs
   15a5c:	ebc3 0301 	rsbcs	r3, r3, r1
   15a60:	ebc3 0302 	rsbcc	r3, r3, r2
   15a64:	eb06 0903 	add.w	r9, r6, r3
   15a68:	e640      	b.n	156ec <event_connection_prepare+0x674>
				TICKER_US_TO_TICKS((conn_interval_old -
   15a6a:	1a1b      	subs	r3, r3, r0
   15a6c:	17d9      	asrs	r1, r3, #31
   15a6e:	486f      	ldr	r0, [pc, #444]	; (15c2c <event_connection_prepare+0xbb4>)
   15a70:	f240 1223 	movw	r2, #291	; 0x123
   15a74:	fb02 f203 	mul.w	r2, r2, r3
   15a78:	fb00 2201 	mla	r2, r0, r1, r2
   15a7c:	fba3 0100 	umull	r0, r1, r3, r0
   15a80:	4411      	add	r1, r2
   15a82:	a363      	add	r3, pc, #396	; (adr r3, 15c10 <event_connection_prepare+0xb98>)
   15a84:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a88:	f7eb fb38 	bl	10fc <__aeabi_uldivmod>
   15a8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   15a90:	eba9 0300 	sub.w	r3, r9, r0
   15a94:	930b      	str	r3, [sp, #44]	; 0x2c
   15a96:	e64d      	b.n	15734 <event_connection_prepare+0x6bc>
				conn->slave.window_widening_periodic_us *
   15a98:	6d62      	ldr	r2, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   15a9a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   15a9c:	fb02 3218 	mls	r2, r2, r8, r3
   15aa0:	65e2      	str	r2, [r4, #92]	; 0x5c
				(((gc_lookup_ppm[_radio.sca] +
   15aa2:	4b61      	ldr	r3, [pc, #388]	; (15c28 <event_connection_prepare+0xbb0>)
   15aa4:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
   15aa8:	4861      	ldr	r0, [pc, #388]	; (15c30 <event_connection_prepare+0xbb8>)
   15aaa:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   15aae:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   15ab2:	f3c1 0182 	ubfx	r1, r1, #2, #3
   15ab6:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
				(((gc_lookup_ppm[_radio.sca] +
   15aba:	440b      	add	r3, r1
				   gc_lookup_ppm[conn->slave.sca]) *
   15abc:	fb03 f309 	mul.w	r3, r3, r9
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   15ac0:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   15ac4:	f203 233f 	addw	r3, r3, #575	; 0x23f
   15ac8:	495a      	ldr	r1, [pc, #360]	; (15c34 <event_connection_prepare+0xbbc>)
   15aca:	fba1 1303 	umull	r1, r3, r1, r3
   15ace:	ea4f 4893 	mov.w	r8, r3, lsr #18
			conn->slave.window_widening_periodic_us =
   15ad2:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
				(conn_interval_us >> 1) - RADIO_TIFS;
   15ad6:	ea4f 0359 	mov.w	r3, r9, lsr #1
   15ada:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_max_us =
   15adc:	65a3      	str	r3, [r4, #88]	; 0x58
				conn->llcp.conn_upd.win_size * 1250;
   15ade:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
   15ae2:	f240 41e2 	movw	r1, #1250	; 0x4e2
   15ae6:	fb01 f100 	mul.w	r1, r1, r0
			conn->slave.window_size_prepare_us =
   15aea:	6661      	str	r1, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   15aec:	2100      	movs	r1, #0
   15aee:	6721      	str	r1, [r4, #112]	; 0x70
				conn->slave.window_widening_periodic_us *
   15af0:	fb08 f00b 	mul.w	r0, r8, fp
			conn->slave.window_widening_prepare_us +=
   15af4:	4402      	add	r2, r0
   15af6:	65e2      	str	r2, [r4, #92]	; 0x5c
			if (conn->slave.window_widening_prepare_us >
   15af8:	4293      	cmp	r3, r2
   15afa:	d200      	bcs.n	15afe <event_connection_prepare+0xa86>
				conn->slave.window_widening_prepare_us =
   15afc:	65e3      	str	r3, [r4, #92]	; 0x5c
				TICKER_US_TO_TICKS(conn->slave.window_widening_periodic_us *
   15afe:	f8df b140 	ldr.w	fp, [pc, #320]	; 15c40 <event_connection_prepare+0xbc8>
   15b02:	a343      	add	r3, pc, #268	; (adr r3, 15c10 <event_connection_prepare+0xb98>)
   15b04:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b08:	fba0 010b 	umull	r0, r1, r0, fp
   15b0c:	f7eb faf6 	bl	10fc <__aeabi_uldivmod>
   15b10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   15b14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15b16:	1a1b      	subs	r3, r3, r0
   15b18:	930b      	str	r3, [sp, #44]	; 0x2c
				TICKER_US_TO_TICKS((conn->llcp.conn_upd.win_offset_us /
   15b1a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   15b1e:	4a3f      	ldr	r2, [pc, #252]	; (15c1c <event_connection_prepare+0xba4>)
   15b20:	fba2 2303 	umull	r2, r3, r2, r3
   15b24:	0a9b      	lsrs	r3, r3, #10
   15b26:	f240 40e2 	movw	r0, #1250	; 0x4e2
   15b2a:	fb00 f003 	mul.w	r0, r0, r3
   15b2e:	a338      	add	r3, pc, #224	; (adr r3, 15c10 <event_connection_prepare+0xb98>)
   15b30:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b34:	fba0 010b 	umull	r0, r1, r0, fp
   15b38:	f7eb fae0 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   15b3c:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
			periodic_us -=
   15b40:	eba9 0808 	sub.w	r8, r9, r8
   15b44:	e61a      	b.n	1577c <event_connection_prepare+0x704>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15b46:	4040      	eors	r0, r0
   15b48:	f380 8811 	msr	BASEPRI, r0
   15b4c:	f04f 0004 	mov.w	r0, #4
   15b50:	df02      	svc	2
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15b52:	4939      	ldr	r1, [pc, #228]	; (15c38 <event_connection_prepare+0xbc0>)
   15b54:	e693      	b.n	1587e <event_connection_prepare+0x806>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15b56:	4040      	eors	r0, r0
   15b58:	f380 8811 	msr	BASEPRI, r0
   15b5c:	f04f 0004 	mov.w	r0, #4
   15b60:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   15b62:	2201      	movs	r2, #1
   15b64:	4611      	mov	r1, r2
   15b66:	2000      	movs	r0, #0
   15b68:	f7f9 fa5e 	bl	f028 <mayfly_enable>
		return 0;
   15b6c:	f04f 0900 	mov.w	r9, #0
   15b70:	e6a1      	b.n	158b6 <event_connection_prepare+0x83e>
			return 1;
   15b72:	f04f 0901 	mov.w	r9, #1
   15b76:	e69e      	b.n	158b6 <event_connection_prepare+0x83e>
	return 1;
   15b78:	f04f 0901 	mov.w	r9, #1
   15b7c:	e69b      	b.n	158b6 <event_connection_prepare+0x83e>
	if (conn->llcp.chan_map.initiate) {
   15b7e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15b82:	b9f3      	cbnz	r3, 15bc2 <event_connection_prepare+0xb4a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   15b84:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15b88:	1aeb      	subs	r3, r5, r3
   15b8a:	b29b      	uxth	r3, r3
   15b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15b90:	f280 80b3 	bge.w	15cfa <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15b94:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15b98:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   15b9c:	f104 0817 	add.w	r8, r4, #23
   15ba0:	2205      	movs	r2, #5
   15ba2:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15ba6:	4640      	mov	r0, r8
   15ba8:	f7ea fb8a 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   15bac:	2105      	movs	r1, #5
   15bae:	4640      	mov	r0, r8
   15bb0:	f7f9 fc3d 	bl	f42e <util_ones_count_get>
		conn->data_chan_count =
   15bb4:	7f63      	ldrb	r3, [r4, #29]
   15bb6:	f360 0305 	bfi	r3, r0, #0, #6
   15bba:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   15bbc:	2301      	movs	r3, #1
   15bbe:	7723      	strb	r3, [r4, #28]
   15bc0:	e09b      	b.n	15cfa <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15bc2:	481e      	ldr	r0, [pc, #120]	; (15c3c <event_connection_prepare+0xbc4>)
   15bc4:	f7f9 fbaf 	bl	f326 <mem_acquire>
		if (node_tx) {
   15bc8:	4680      	mov	r8, r0
   15bca:	2800      	cmp	r0, #0
   15bcc:	f000 8095 	beq.w	15cfa <event_connection_prepare+0xc82>
			conn->llcp.chan_map.initiate = 0;
   15bd0:	2300      	movs	r3, #0
   15bd2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   15bd6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15bd8:	442b      	add	r3, r5
   15bda:	b29b      	uxth	r3, r3
   15bdc:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant =
   15bde:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15be2:	7903      	ldrb	r3, [r0, #4]
   15be4:	f043 0303 	orr.w	r3, r3, #3
   15be8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15bea:	2308      	movs	r3, #8
   15bec:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15bee:	2301      	movs	r3, #1
   15bf0:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
   15bf2:	2205      	movs	r2, #5
   15bf4:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15bf8:	3008      	adds	r0, #8
   15bfa:	f7ea fb61 	bl	2c0 <memcpy>
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
   15bfe:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15c02:	f8a8 300d 	strh.w	r3, [r8, #13]
			ctrl_tx_enqueue(conn, node_tx);
   15c06:	4641      	mov	r1, r8
   15c08:	4620      	mov	r0, r4
   15c0a:	f7fb fe1f 	bl	1184c <ctrl_tx_enqueue>
   15c0e:	e074      	b.n	15cfa <event_connection_prepare+0xc82>
   15c10:	1afd498d 	.word	0x1afd498d
   15c14:	00000007 	.word	0x00000007
   15c18:	00013205 	.word	0x00013205
   15c1c:	d1b71759 	.word	0xd1b71759
   15c20:	2000c298 	.word	0x2000c298
   15c24:	00012f39 	.word	0x00012f39
   15c28:	200014d4 	.word	0x200014d4
   15c2c:	09ce5400 	.word	0x09ce5400
   15c30:	00031ba0 	.word	0x00031ba0
   15c34:	431bde83 	.word	0x431bde83
   15c38:	000165d5 	.word	0x000165d5
   15c3c:	2000162c 	.word	0x2000162c
   15c40:	3b9aca00 	.word	0x3b9aca00
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15c44:	48d9      	ldr	r0, [pc, #868]	; (15fac <event_connection_prepare+0xf34>)
   15c46:	f7f9 fb6e 	bl	f326 <mem_acquire>
	if (node_tx) {
   15c4a:	4680      	mov	r8, r0
   15c4c:	2800      	cmp	r0, #0
   15c4e:	d054      	beq.n	15cfa <event_connection_prepare+0xc82>
		struct pdu_data *pdu_ctrl_tx =
   15c50:	f100 0904 	add.w	r9, r0, #4
		conn->llcp_ack = conn->llcp_req;
   15c54:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15c58:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (!conn->role) {
   15c5c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15c60:	2b00      	cmp	r3, #0
   15c62:	f2c0 808c 	blt.w	15d7e <event_connection_prepare+0xd06>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   15c66:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
   15c6a:	4653      	mov	r3, sl
   15c6c:	2200      	movs	r2, #0
   15c6e:	f104 0193 	add.w	r1, r4, #147	; 0x93
   15c72:	f104 0083 	add.w	r0, r4, #131	; 0x83
   15c76:	f7f9 fc63 	bl	f540 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   15c7a:	2210      	movs	r2, #16
   15c7c:	4651      	mov	r1, sl
   15c7e:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15c82:	f7ea fb1d 	bl	2c0 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15c86:	2208      	movs	r2, #8
   15c88:	f504 7189 	add.w	r1, r4, #274	; 0x112
   15c8c:	f204 1033 	addw	r0, r4, #307	; 0x133
   15c90:	f7ea fb16 	bl	2c0 <memcpy>
			conn->ccm_rx.counter = 0;
   15c94:	2300      	movs	r3, #0
   15c96:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   15c9a:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   15c9e:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   15ca2:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   15ca6:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   15caa:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   15cae:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   15cb2:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   15cb6:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   15cba:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   15cbe:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   15cc2:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
			conn->ccm_rx.direction = 0;
   15cc6:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   15cca:	f363 0200 	bfi	r2, r3, #0, #1
   15cce:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 1;
   15cd2:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   15cd6:	f043 0301 	orr.w	r3, r3, #1
   15cda:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   15cde:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->enc_tx = 1;
   15ce2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   15ce6:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			start_enc_rsp_send(conn, pdu_ctrl_tx);
   15cea:	4649      	mov	r1, r9
   15cec:	4620      	mov	r0, r4
   15cee:	f7fb fe9d 	bl	11a2c <start_enc_rsp_send>
		ctrl_tx_enqueue(conn, node_tx);
   15cf2:	4641      	mov	r1, r8
   15cf4:	4620      	mov	r0, r4
   15cf6:	f7fb fda9 	bl	1184c <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   15cfa:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   15cfe:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15d02:	429a      	cmp	r2, r3
   15d04:	d021      	beq.n	15d4a <event_connection_prepare+0xcd2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15d06:	2305      	movs	r3, #5
   15d08:	2200      	movs	r2, #0
   15d0a:	4611      	mov	r1, r2
   15d0c:	4610      	mov	r0, r2
   15d0e:	f7fc fa77 	bl	12200 <event_stop>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15d12:	48a6      	ldr	r0, [pc, #664]	; (15fac <event_connection_prepare+0xf34>)
   15d14:	f7f9 fb07 	bl	f326 <mem_acquire>
		if (node_tx) {
   15d18:	4601      	mov	r1, r0
   15d1a:	b1b0      	cbz	r0, 15d4a <event_connection_prepare+0xcd2>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   15d1c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15d20:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15d24:	7903      	ldrb	r3, [r0, #4]
   15d26:	f043 0303 	orr.w	r3, r3, #3
   15d2a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   15d2c:	2302      	movs	r3, #2
   15d2e:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15d30:	71c3      	strb	r3, [r0, #7]
				error_code = conn->llcp_terminate.reason_own;
   15d32:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   15d36:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   15d38:	4620      	mov	r0, r4
   15d3a:	f7fb fd87 	bl	1184c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   15d3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   15d40:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
			if (conn->procedure_expire <= 1) {
   15d44:	2b01      	cmp	r3, #1
   15d46:	f240 82a6 	bls.w	16296 <event_connection_prepare+0x121e>
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   15d4a:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15d4e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15d52:	429a      	cmp	r2, r3
   15d54:	f000 83f9 	beq.w	1654a <event_connection_prepare+0x14d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15d58:	2305      	movs	r3, #5
   15d5a:	2200      	movs	r2, #0
   15d5c:	4611      	mov	r1, r2
   15d5e:	4610      	mov	r0, r2
   15d60:	f7fc fa4e 	bl	12200 <event_stop>
	switch (conn->llcp_length.state) {
   15d64:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   15d68:	f003 0303 	and.w	r3, r3, #3
   15d6c:	2b03      	cmp	r3, #3
   15d6e:	f200 8427 	bhi.w	165c0 <event_connection_prepare+0x1548>
   15d72:	e8df f013 	tbh	[pc, r3, lsl #1]
   15d76:	0299      	.short	0x0299
   15d78:	03ea03ea 	.word	0x03ea03ea
   15d7c:	02fa      	.short	0x02fa
		else if (!conn->pause_tx || conn->refresh) {
   15d7e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15d82:	f003 0348 	and.w	r3, r3, #72	; 0x48
   15d86:	2b08      	cmp	r3, #8
   15d88:	d079      	beq.n	15e7e <event_connection_prepare+0xe06>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15d8a:	7903      	ldrb	r3, [r0, #4]
   15d8c:	f043 0303 	orr.w	r3, r3, #3
   15d90:	7103      	strb	r3, [r0, #4]
			if (conn->llcp.encryption.error_code) {
   15d92:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15d96:	b333      	cbz	r3, 15de6 <event_connection_prepare+0xd6e>
	if (conn->common.fex_valid &&
   15d98:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   15d9c:	f013 0f20 	tst.w	r3, #32
   15da0:	d00e      	beq.n	15dc0 <event_connection_prepare+0xd48>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   15da2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   15da6:	f013 0f04 	tst.w	r3, #4
   15daa:	d009      	beq.n	15dc0 <event_connection_prepare+0xd48>
		pdu->payload.llctrl.opcode =
   15dac:	2311      	movs	r3, #17
   15dae:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   15db0:	2303      	movs	r3, #3
   15db2:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   15db4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15db8:	7243      	strb	r3, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   15dba:	2302      	movs	r3, #2
   15dbc:	7143      	strb	r3, [r0, #5]
   15dbe:	e009      	b.n	15dd4 <event_connection_prepare+0xd5c>
		pdu->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   15dc0:	230d      	movs	r3, #13
   15dc2:	f888 3007 	strb.w	r3, [r8, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   15dc6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15dca:	f888 3008 	strb.w	r3, [r8, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   15dce:	2301      	movs	r3, #1
   15dd0:	f888 3005 	strb.w	r3, [r8, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, ctrldata);
   15dd4:	f898 3005 	ldrb.w	r3, [r8, #5]
   15dd8:	3301      	adds	r3, #1
   15dda:	f888 3005 	strb.w	r3, [r8, #5]
	conn->llcp.encryption.error_code = 0;
   15dde:	2300      	movs	r3, #0
   15de0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   15de4:	e785      	b.n	15cf2 <event_connection_prepare+0xc7a>
				enc_rsp_send(conn);
   15de6:	4620      	mov	r0, r4
   15de8:	f7fd fa38 	bl	1325c <enc_rsp_send>
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
   15dec:	f104 09f9 	add.w	r9, r4, #249	; 0xf9
   15df0:	464b      	mov	r3, r9
   15df2:	2200      	movs	r2, #0
   15df4:	f104 0193 	add.w	r1, r4, #147	; 0x93
   15df8:	f104 0083 	add.w	r0, r4, #131	; 0x83
   15dfc:	f7f9 fba0 	bl	f540 <ecb_encrypt>
				memcpy(&conn->ccm_tx.key[0],
   15e00:	2210      	movs	r2, #16
   15e02:	4649      	mov	r1, r9
   15e04:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15e08:	f7ea fa5a 	bl	2c0 <memcpy>
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15e0c:	2208      	movs	r2, #8
   15e0e:	f504 7189 	add.w	r1, r4, #274	; 0x112
   15e12:	f204 1033 	addw	r0, r4, #307	; 0x133
   15e16:	f7ea fa53 	bl	2c0 <memcpy>
				conn->ccm_rx.counter = 0;
   15e1a:	2300      	movs	r3, #0
   15e1c:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   15e20:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   15e24:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   15e28:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   15e2c:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   15e30:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   15e34:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   15e38:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
				conn->ccm_tx.counter = 0;
   15e3c:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   15e40:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   15e44:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   15e48:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
				conn->ccm_rx.direction = 1;
   15e4c:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   15e50:	f042 0201 	orr.w	r2, r2, #1
   15e54:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
				conn->ccm_tx.direction = 0;
   15e58:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
   15e5c:	f363 0200 	bfi	r2, r3, #0, #1
   15e60:	f884 2132 	strb.w	r2, [r4, #306]	; 0x132
				conn->enc_rx = 1;
   15e64:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15e68:	f043 0310 	orr.w	r3, r3, #16
   15e6c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				pdu_ctrl_tx->len =
   15e70:	2301      	movs	r3, #1
   15e72:	f888 3005 	strb.w	r3, [r8, #5]
				pdu_ctrl_tx->payload.llctrl.opcode =
   15e76:	2305      	movs	r3, #5
   15e78:	f888 3007 	strb.w	r3, [r8, #7]
   15e7c:	e739      	b.n	15cf2 <event_connection_prepare+0xc7a>
			_radio.conn_curr->enc_tx = 1;
   15e7e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 15fb4 <event_connection_prepare+0xf3c>
   15e82:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   15e86:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   15e8a:	f043 0320 	orr.w	r3, r3, #32
   15e8e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			start_enc_rsp_send(_radio.conn_curr, NULL);
   15e92:	2100      	movs	r1, #0
   15e94:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   15e98:	f7fb fdc8 	bl	11a2c <start_enc_rsp_send>
			_radio.conn_curr->pause_rx = 0;
   15e9c:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15ea0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15ea4:	f36f 0282 	bfc	r2, #2, #1
   15ea8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   15eac:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15eb0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15eb4:	f36f 02c3 	bfc	r2, #3, #1
   15eb8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   15ebc:	e719      	b.n	15cf2 <event_connection_prepare+0xc7a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15ebe:	483b      	ldr	r0, [pc, #236]	; (15fac <event_connection_prepare+0xf34>)
   15ec0:	f7f9 fa31 	bl	f326 <mem_acquire>
	if (node_tx) {
   15ec4:	4680      	mov	r8, r0
   15ec6:	2800      	cmp	r0, #0
   15ec8:	f43f af17 	beq.w	15cfa <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15ecc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15ed0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   15ed4:	4b36      	ldr	r3, [pc, #216]	; (15fb0 <event_connection_prepare+0xf38>)
   15ed6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15eda:	7903      	ldrb	r3, [r0, #4]
   15edc:	f043 0303 	orr.w	r3, r3, #3
   15ee0:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15ee2:	2309      	movs	r3, #9
   15ee4:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   15ee6:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15eea:	2b00      	cmp	r3, #0
   15eec:	db1e      	blt.n	15f2c <event_connection_prepare+0xeb4>
   15eee:	2308      	movs	r3, #8
   15ef0:	f888 3007 	strb.w	r3, [r8, #7]
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
   15ef4:	2208      	movs	r2, #8
   15ef6:	2100      	movs	r1, #0
   15ef8:	eb08 0002 	add.w	r0, r8, r2
   15efc:	f014 fcdc 	bl	2a8b8 <memset>
			conn->llcp_features & 0xFF;
   15f00:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   15f04:	f888 3008 	strb.w	r3, [r8, #8]
			(conn->llcp_features >> 8) & 0xFF;
   15f08:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   15f0c:	0a1b      	lsrs	r3, r3, #8
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   15f0e:	f888 3009 	strb.w	r3, [r8, #9]
			(conn->llcp_features >> 16) & 0xFF;
   15f12:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   15f16:	f888 300a 	strb.w	r3, [r8, #10]
		ctrl_tx_enqueue(conn, node_tx);
   15f1a:	4641      	mov	r1, r8
   15f1c:	4620      	mov	r0, r4
   15f1e:	f7fb fc95 	bl	1184c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   15f22:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15f26:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15f2a:	e6e6      	b.n	15cfa <event_connection_prepare+0xc82>
		pdu_ctrl_tx->payload.llctrl.opcode =
   15f2c:	230e      	movs	r3, #14
   15f2e:	e7df      	b.n	15ef0 <event_connection_prepare+0xe78>
	if (conn->llcp_version.tx == 0) {
   15f30:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15f34:	f013 0f01 	tst.w	r3, #1
   15f38:	d03e      	beq.n	15fb8 <event_connection_prepare+0xf40>
	} else if (conn->llcp_version.rx != 0) {
   15f3a:	f013 0f02 	tst.w	r3, #2
   15f3e:	d076      	beq.n	1602e <event_connection_prepare+0xfb6>
		conn->llcp_ack = conn->llcp_req;
   15f40:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15f44:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	if (_radio.packet_rx_acquire >=
   15f48:	4b1a      	ldr	r3, [pc, #104]	; (15fb4 <event_connection_prepare+0xf3c>)
   15f4a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15f4e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15f52:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15f54:	429a      	cmp	r2, r3
   15f56:	d358      	bcc.n	1600a <event_connection_prepare+0xf92>
			_radio.packet_rx_last);
   15f58:	4b16      	ldr	r3, [pc, #88]	; (15fb4 <event_connection_prepare+0xf3c>)
   15f5a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15f5e:	1ad3      	subs	r3, r2, r3
   15f60:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15f62:	2b01      	cmp	r3, #1
   15f64:	d95b      	bls.n	1601e <event_connection_prepare+0xfa6>
	return _radio.packet_rx[_radio.packet_rx_last];
   15f66:	4b13      	ldr	r3, [pc, #76]	; (15fb4 <event_connection_prepare+0xf3c>)
   15f68:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15f6c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(radio_pdu_node_rx);
   15f74:	2b00      	cmp	r3, #0
   15f76:	d054      	beq.n	16022 <event_connection_prepare+0xfaa>
		radio_pdu_node_rx->hdr.handle = conn->handle;
   15f78:	8c22      	ldrh	r2, [r4, #32]
   15f7a:	80da      	strh	r2, [r3, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15f7c:	2201      	movs	r2, #1
   15f7e:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15f80:	7a1a      	ldrb	r2, [r3, #8]
   15f82:	f042 0203 	orr.w	r2, r2, #3
   15f86:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15f88:	2206      	movs	r2, #6
   15f8a:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   15f8c:	220c      	movs	r2, #12
   15f8e:	72da      	strb	r2, [r3, #11]
			conn->llcp_version.version_number;
   15f90:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
   15f94:	731a      	strb	r2, [r3, #12]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
   15f96:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   15f9a:	f8a3 200d 	strh.w	r2, [r3, #13]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   15f9e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   15fa2:	f8a3 200f 	strh.w	r2, [r3, #15]
		packet_rx_enqueue();
   15fa6:	f7fe fa05 	bl	143b4 <packet_rx_enqueue>
   15faa:	e6a6      	b.n	15cfa <event_connection_prepare+0xc82>
   15fac:	2000162c 	.word	0x2000162c
   15fb0:	000141ff 	.word	0x000141ff
   15fb4:	200014d4 	.word	0x200014d4
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15fb8:	48b9      	ldr	r0, [pc, #740]	; (162a0 <event_connection_prepare+0x1228>)
   15fba:	f7f9 f9b4 	bl	f326 <mem_acquire>
		if (node_tx) {
   15fbe:	4601      	mov	r1, r0
   15fc0:	2800      	cmp	r0, #0
   15fc2:	f43f ae9a 	beq.w	15cfa <event_connection_prepare+0xc82>
			conn->llcp_ack = conn->llcp_req;
   15fc6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15fca:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   15fce:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15fd2:	f043 0301 	orr.w	r3, r3, #1
   15fd6:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15fda:	7903      	ldrb	r3, [r0, #4]
   15fdc:	f043 0303 	orr.w	r3, r3, #3
   15fe0:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15fe2:	2306      	movs	r3, #6
   15fe4:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15fe6:	230c      	movs	r3, #12
   15fe8:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   15fea:	2309      	movs	r3, #9
   15fec:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   15fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15ff2:	7243      	strb	r3, [r0, #9]
   15ff4:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   15ff6:	72c3      	strb	r3, [r0, #11]
   15ff8:	7303      	strb	r3, [r0, #12]
			ctrl_tx_enqueue(conn, node_tx);
   15ffa:	4620      	mov	r0, r4
   15ffc:	f7fb fc26 	bl	1184c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
   16000:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   16004:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   16008:	e677      	b.n	15cfa <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   1600a:	49a6      	ldr	r1, [pc, #664]	; (162a4 <event_connection_prepare+0x122c>)
   1600c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   16010:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16014:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   16016:	fa52 f383 	uxtab	r3, r2, r3
   1601a:	b2db      	uxtb	r3, r3
   1601c:	e7a1      	b.n	15f62 <event_connection_prepare+0xeea>
		return 0;
   1601e:	2300      	movs	r3, #0
   16020:	e7a8      	b.n	15f74 <event_connection_prepare+0xefc>
		LL_ASSERT(radio_pdu_node_rx);
   16022:	4040      	eors	r0, r0
   16024:	f380 8811 	msr	BASEPRI, r0
   16028:	f04f 0004 	mov.w	r0, #4
   1602c:	df02      	svc	2
		LL_ASSERT(0);
   1602e:	4040      	eors	r0, r0
   16030:	f380 8811 	msr	BASEPRI, r0
   16034:	f04f 0004 	mov.w	r0, #4
   16038:	df02      	svc	2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1603a:	4899      	ldr	r0, [pc, #612]	; (162a0 <event_connection_prepare+0x1228>)
   1603c:	f7f9 f973 	bl	f326 <mem_acquire>
	if (node_tx) {
   16040:	4601      	mov	r1, r0
   16042:	2800      	cmp	r0, #0
   16044:	f43f ae59 	beq.w	15cfa <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   16048:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1604c:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16050:	7903      	ldrb	r3, [r0, #4]
   16052:	f043 0303 	orr.w	r3, r3, #3
   16056:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   16058:	2301      	movs	r3, #1
   1605a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   1605c:	2312      	movs	r3, #18
   1605e:	71c3      	strb	r3, [r0, #7]
		ctrl_tx_enqueue(conn, node_tx);
   16060:	4620      	mov	r0, r4
   16062:	f7fb fbf3 	bl	1184c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   16066:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   1606a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1606e:	e644      	b.n	15cfa <event_connection_prepare+0xc82>
	if (conn->llcp.phy_upd_ind.initiate) {
   16070:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   16074:	f012 0f01 	tst.w	r2, #1
   16078:	d16b      	bne.n	16152 <event_connection_prepare+0x10da>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   1607a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1607e:	1aeb      	subs	r3, r5, r3
   16080:	b29b      	uxth	r3, r3
   16082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   16086:	f6bf ae38 	bge.w	15cfa <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   1608a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1608e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		old_tx = conn->phy_tx;
   16092:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   16096:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		old_rx = conn->phy_rx;
   1609a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1609e:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp.phy_upd_ind.tx) {
   160a2:	f012 0f1c 	tst.w	r2, #28
   160a6:	d009      	beq.n	160bc <event_connection_prepare+0x1044>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   160a8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   160ac:	f3c3 0382 	ubfx	r3, r3, #2, #3
   160b0:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
   160b4:	f363 0ec5 	bfi	lr, r3, #3, #3
   160b8:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   160bc:	f012 0fe0 	tst.w	r2, #224	; 0xe0
   160c0:	d008      	beq.n	160d4 <event_connection_prepare+0x105c>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   160c2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   160c6:	095b      	lsrs	r3, r3, #5
   160c8:	f894 e03a 	ldrb.w	lr, [r4, #58]	; 0x3a
   160cc:	f363 0e02 	bfi	lr, r3, #0, #3
   160d0:	f884 e03a 	strb.w	lr, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   160d4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   160d8:	f3c3 1e80 	ubfx	lr, r3, #6, #1
   160dc:	f36e 13c7 	bfi	r3, lr, #7, #1
   160e0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   160e4:	f012 0f02 	tst.w	r2, #2
   160e8:	d105      	bne.n	160f6 <event_connection_prepare+0x107e>
   160ea:	b2db      	uxtb	r3, r3
   160ec:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   160f0:	4299      	cmp	r1, r3
   160f2:	f000 80b0 	beq.w	16256 <event_connection_prepare+0x11de>
	if (_radio.packet_rx_acquire >=
   160f6:	4b6b      	ldr	r3, [pc, #428]	; (162a4 <event_connection_prepare+0x122c>)
   160f8:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   160fc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16100:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16102:	429a      	cmp	r2, r3
   16104:	f0c0 80af 	bcc.w	16266 <event_connection_prepare+0x11ee>
			_radio.packet_rx_last);
   16108:	4b66      	ldr	r3, [pc, #408]	; (162a4 <event_connection_prepare+0x122c>)
   1610a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1610e:	1ad3      	subs	r3, r2, r3
   16110:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16112:	2b01      	cmp	r3, #1
   16114:	f240 80b1 	bls.w	1627a <event_connection_prepare+0x1202>
	return _radio.packet_rx[_radio.packet_rx_last];
   16118:	4b62      	ldr	r3, [pc, #392]	; (162a4 <event_connection_prepare+0x122c>)
   1611a:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1611e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   16126:	2b00      	cmp	r3, #0
   16128:	f000 80a9 	beq.w	1627e <event_connection_prepare+0x1206>
		node_rx->hdr.handle = conn->handle;
   1612c:	8c22      	ldrh	r2, [r4, #32]
   1612e:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16130:	220c      	movs	r2, #12
   16132:	711a      	strb	r2, [r3, #4]
		p->status = 0;
   16134:	2200      	movs	r2, #0
   16136:	72da      	strb	r2, [r3, #11]
		p->tx = conn->phy_tx;
   16138:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1613c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   16140:	731a      	strb	r2, [r3, #12]
		p->rx = conn->phy_rx;
   16142:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   16146:	f3c2 0202 	ubfx	r2, r2, #0, #3
   1614a:	735a      	strb	r2, [r3, #13]
		packet_rx_enqueue();
   1614c:	f7fe f932 	bl	143b4 <packet_rx_enqueue>
   16150:	e5d3      	b.n	15cfa <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16152:	4853      	ldr	r0, [pc, #332]	; (162a0 <event_connection_prepare+0x1228>)
   16154:	f7f9 f8e7 	bl	f326 <mem_acquire>
		if (node_tx) {
   16158:	4680      	mov	r8, r0
   1615a:	2800      	cmp	r0, #0
   1615c:	f43f adcd 	beq.w	15cfa <event_connection_prepare+0xc82>
			conn->llcp.phy_upd_ind.initiate = 0;
   16160:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16164:	f36f 0300 	bfc	r3, #0, #1
   16168:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   1616c:	b2db      	uxtb	r3, r3
   1616e:	f3c3 0282 	ubfx	r2, r3, #2, #3
   16172:	ea52 1353 	orrs.w	r3, r2, r3, lsr #5
   16176:	d147      	bne.n	16208 <event_connection_prepare+0x1190>
				conn->llcp_ack = conn->llcp_req;
   16178:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1617c:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
				conn->llcp.phy_upd_ind.instant = 0;
   16180:	2300      	movs	r3, #0
   16182:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   16186:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1618a:	f013 0f02 	tst.w	r3, #2
   1618e:	d041      	beq.n	16214 <event_connection_prepare+0x119c>
	if (_radio.packet_rx_acquire >=
   16190:	4b44      	ldr	r3, [pc, #272]	; (162a4 <event_connection_prepare+0x122c>)
   16192:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16196:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1619a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1619c:	429a      	cmp	r2, r3
   1619e:	d321      	bcc.n	161e4 <event_connection_prepare+0x116c>
			_radio.packet_rx_last);
   161a0:	4b40      	ldr	r3, [pc, #256]	; (162a4 <event_connection_prepare+0x122c>)
   161a2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   161a6:	1ad3      	subs	r3, r2, r3
   161a8:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   161aa:	2b01      	cmp	r3, #1
   161ac:	d924      	bls.n	161f8 <event_connection_prepare+0x1180>
	return _radio.packet_rx[_radio.packet_rx_last];
   161ae:	4b3d      	ldr	r3, [pc, #244]	; (162a4 <event_connection_prepare+0x122c>)
   161b0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   161b4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   161b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					LL_ASSERT(node_rx);
   161bc:	b1f3      	cbz	r3, 161fc <event_connection_prepare+0x1184>
					node_rx->hdr.handle = conn->handle;
   161be:	8c22      	ldrh	r2, [r4, #32]
   161c0:	80da      	strh	r2, [r3, #6]
					node_rx->hdr.type =
   161c2:	220c      	movs	r2, #12
   161c4:	711a      	strb	r2, [r3, #4]
					p->status = 0;
   161c6:	2200      	movs	r2, #0
   161c8:	72da      	strb	r2, [r3, #11]
					p->tx = conn->phy_tx;
   161ca:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   161ce:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   161d2:	731a      	strb	r2, [r3, #12]
					p->rx = conn->phy_rx;
   161d4:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   161d8:	f3c2 0202 	ubfx	r2, r2, #0, #3
   161dc:	735a      	strb	r2, [r3, #13]
					packet_rx_enqueue();
   161de:	f7fe f8e9 	bl	143b4 <packet_rx_enqueue>
   161e2:	e017      	b.n	16214 <event_connection_prepare+0x119c>
		return (_radio.packet_rx_count -
   161e4:	492f      	ldr	r1, [pc, #188]	; (162a4 <event_connection_prepare+0x122c>)
   161e6:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   161ea:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   161ee:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   161f0:	fa52 f383 	uxtab	r3, r2, r3
   161f4:	b2db      	uxtb	r3, r3
   161f6:	e7d8      	b.n	161aa <event_connection_prepare+0x1132>
		return 0;
   161f8:	2300      	movs	r3, #0
   161fa:	e7df      	b.n	161bc <event_connection_prepare+0x1144>
					LL_ASSERT(node_rx);
   161fc:	4040      	eors	r0, r0
   161fe:	f380 8811 	msr	BASEPRI, r0
   16202:	f04f 0004 	mov.w	r0, #4
   16206:	df02      	svc	2
								 conn->latency +
   16208:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
				conn->llcp.phy_upd_ind.instant = event_counter +
   1620a:	442b      	add	r3, r5
   1620c:	b29b      	uxth	r3, r3
								 conn->latency +
   1620e:	3306      	adds	r3, #6
				conn->llcp.phy_upd_ind.instant = event_counter +
   16210:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16214:	f898 3004 	ldrb.w	r3, [r8, #4]
   16218:	f043 0303 	orr.w	r3, r3, #3
   1621c:	f888 3004 	strb.w	r3, [r8, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   16220:	2305      	movs	r3, #5
   16222:	f888 3005 	strb.w	r3, [r8, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   16226:	2318      	movs	r3, #24
   16228:	f888 3007 	strb.w	r3, [r8, #7]
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1622c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16230:	f3c3 0382 	ubfx	r3, r3, #2, #3
   16234:	f888 3008 	strb.w	r3, [r8, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   16238:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1623c:	f3c3 1342 	ubfx	r3, r3, #5, #3
   16240:	f888 3009 	strb.w	r3, [r8, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
   16244:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   16248:	f8a8 300a 	strh.w	r3, [r8, #10]
			ctrl_tx_enqueue(conn, node_tx);
   1624c:	4641      	mov	r1, r8
   1624e:	4620      	mov	r0, r4
   16250:	f7fb fafc 	bl	1184c <ctrl_tx_enqueue>
   16254:	e551      	b.n	15cfa <event_connection_prepare+0xc82>
		    (conn->phy_rx == old_rx)) {
   16256:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1625a:	f003 0307 	and.w	r3, r3, #7
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   1625e:	4298      	cmp	r0, r3
   16260:	f47f af49 	bne.w	160f6 <event_connection_prepare+0x107e>
   16264:	e549      	b.n	15cfa <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   16266:	490f      	ldr	r1, [pc, #60]	; (162a4 <event_connection_prepare+0x122c>)
   16268:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   1626c:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16270:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   16272:	fa52 f383 	uxtab	r3, r2, r3
   16276:	b2db      	uxtb	r3, r3
   16278:	e74b      	b.n	16112 <event_connection_prepare+0x109a>
		return 0;
   1627a:	2300      	movs	r3, #0
   1627c:	e753      	b.n	16126 <event_connection_prepare+0x10ae>
		LL_ASSERT(node_rx);
   1627e:	4040      	eors	r0, r0
   16280:	f380 8811 	msr	BASEPRI, r0
   16284:	f04f 0004 	mov.w	r0, #4
   16288:	df02      	svc	2
			LL_ASSERT(0);
   1628a:	4040      	eors	r0, r0
   1628c:	f380 8811 	msr	BASEPRI, r0
   16290:	f04f 0004 	mov.w	r0, #4
   16294:	df02      	svc	2
				conn->procedure_expire++;
   16296:	3301      	adds	r3, #1
   16298:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1629c:	e555      	b.n	15d4a <event_connection_prepare+0xcd2>
   1629e:	bf00      	nop
   162a0:	2000162c 	.word	0x2000162c
   162a4:	200014d4 	.word	0x200014d4
	if (_radio.packet_rx_acquire >=
   162a8:	4bbf      	ldr	r3, [pc, #764]	; (165a8 <event_connection_prepare+0x1530>)
   162aa:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   162ae:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   162b2:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   162b4:	429a      	cmp	r2, r3
   162b6:	d346      	bcc.n	16346 <event_connection_prepare+0x12ce>
			_radio.packet_rx_last);
   162b8:	4bbb      	ldr	r3, [pc, #748]	; (165a8 <event_connection_prepare+0x1530>)
   162ba:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   162be:	eba2 0808 	sub.w	r8, r2, r8
   162c2:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   162c6:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   162ca:	4bb7      	ldr	r3, [pc, #732]	; (165a8 <event_connection_prepare+0x1530>)
   162cc:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   162d0:	f7f9 f85d 	bl	f38e <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   162d4:	4440      	add	r0, r8
   162d6:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   162d8:	28ff      	cmp	r0, #255	; 0xff
   162da:	d840      	bhi.n	1635e <event_connection_prepare+0x12e6>
		if (_radio.packet_rx_data_count != free_count_rx) {
   162dc:	4bb2      	ldr	r3, [pc, #712]	; (165a8 <event_connection_prepare+0x1530>)
   162de:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   162e2:	4298      	cmp	r0, r3
   162e4:	f040 8131 	bne.w	1654a <event_connection_prepare+0x14d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   162e8:	48b0      	ldr	r0, [pc, #704]	; (165ac <event_connection_prepare+0x1534>)
   162ea:	f7f9 f81c 	bl	f326 <mem_acquire>
		if (!node_tx) {
   162ee:	4601      	mov	r1, r0
   162f0:	2800      	cmp	r0, #0
   162f2:	f000 812a 	beq.w	1654a <event_connection_prepare+0x14d2>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   162f6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   162fa:	2201      	movs	r2, #1
   162fc:	f362 0301 	bfi	r3, r2, #0, #2
   16300:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   16304:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   16308:	85a3      	strh	r3, [r4, #44]	; 0x2c
		conn->default_tx_time = conn->llcp_length.tx_time;
   1630a:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   1630e:	8663      	strh	r3, [r4, #50]	; 0x32
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16310:	7903      	ldrb	r3, [r0, #4]
   16312:	f043 0303 	orr.w	r3, r3, #3
   16316:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   16318:	2309      	movs	r3, #9
   1631a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   1631c:	2314      	movs	r3, #20
   1631e:	71c3      	strb	r3, [r0, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   16320:	231b      	movs	r3, #27
   16322:	7203      	strb	r3, [r0, #8]
   16324:	2300      	movs	r3, #0
   16326:	7243      	strb	r3, [r0, #9]
		lr->max_tx_octets = conn->default_tx_octets;
   16328:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1632a:	8183      	strh	r3, [r0, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   1632c:	2348      	movs	r3, #72	; 0x48
   1632e:	7283      	strb	r3, [r0, #10]
   16330:	72ca      	strb	r2, [r1, #11]
		lr->max_tx_time = conn->default_tx_time;
   16332:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   16334:	81c3      	strh	r3, [r0, #14]
		ctrl_tx_enqueue(conn, node_tx);
   16336:	4620      	mov	r0, r4
   16338:	f7fb fa88 	bl	1184c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   1633c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   16340:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   16344:	e101      	b.n	1654a <event_connection_prepare+0x14d2>
		return (_radio.packet_rx_count -
   16346:	4b98      	ldr	r3, [pc, #608]	; (165a8 <event_connection_prepare+0x1530>)
   16348:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   1634c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16350:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   16354:	fa52 f888 	uxtab	r8, r2, r8
   16358:	fa5f f888 	uxtb.w	r8, r8
   1635c:	e7b3      	b.n	162c6 <event_connection_prepare+0x124e>
		LL_ASSERT(free_count_rx <= 0xFF);
   1635e:	4040      	eors	r0, r0
   16360:	f380 8811 	msr	BASEPRI, r0
   16364:	f04f 0004 	mov.w	r0, #4
   16368:	df02      	svc	2
	if (_radio.packet_rx_acquire >=
   1636a:	4b8f      	ldr	r3, [pc, #572]	; (165a8 <event_connection_prepare+0x1530>)
   1636c:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16370:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16374:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16376:	429a      	cmp	r2, r3
   16378:	d352      	bcc.n	16420 <event_connection_prepare+0x13a8>
			_radio.packet_rx_last);
   1637a:	4b8b      	ldr	r3, [pc, #556]	; (165a8 <event_connection_prepare+0x1530>)
   1637c:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16380:	eba2 0808 	sub.w	r8, r2, r8
   16384:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   16388:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   1638c:	4b86      	ldr	r3, [pc, #536]	; (165a8 <event_connection_prepare+0x1530>)
   1638e:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   16392:	f7f8 fffc 	bl	f38e <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   16396:	4440      	add	r0, r8
   16398:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   1639a:	28ff      	cmp	r0, #255	; 0xff
   1639c:	d84c      	bhi.n	16438 <event_connection_prepare+0x13c0>
		if (_radio.packet_rx_data_count != free_count_rx) {
   1639e:	4b82      	ldr	r3, [pc, #520]	; (165a8 <event_connection_prepare+0x1530>)
   163a0:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   163a4:	4298      	cmp	r0, r3
   163a6:	d14d      	bne.n	16444 <event_connection_prepare+0x13cc>
		conn->llcp_length.ack = conn->llcp_length.req;
   163a8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   163ac:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->procedure_expire = 0;
   163b0:	2100      	movs	r1, #0
   163b2:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   163b6:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 165a8 <event_connection_prepare+0x1530>
   163ba:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
   163be:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   163c2:	f361 02c3 	bfi	r2, r1, #3, #1
   163c6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   163ca:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   163ce:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   163d0:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   163d4:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   163d6:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
   163da:	f7f8 ffd8 	bl	f38e <mem_free_count_get>
		if (_radio.advertiser.conn) {
   163de:	f8d8 30c8 	ldr.w	r3, [r8, #200]	; 0xc8
   163e2:	b10b      	cbz	r3, 163e8 <event_connection_prepare+0x1370>
			free_count_conn++;
   163e4:	3001      	adds	r0, #1
   163e6:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   163e8:	4b6f      	ldr	r3, [pc, #444]	; (165a8 <event_connection_prepare+0x1530>)
   163ea:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   163ee:	b10b      	cbz	r3, 163f4 <event_connection_prepare+0x137c>
			free_count_conn++;
   163f0:	3001      	adds	r0, #1
   163f2:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   163f4:	f8b4 9030 	ldrh.w	r9, [r4, #48]	; 0x30
   163f8:	f109 090e 	add.w	r9, r9, #14
   163fc:	fa1f f989 	uxth.w	r9, r9
   16400:	f029 0903 	bic.w	r9, r9, #3
   16404:	fa1f f989 	uxth.w	r9, r9
		if (((free_count_conn + 1) == _radio.connection_count) ||
   16408:	3001      	adds	r0, #1
   1640a:	4b67      	ldr	r3, [pc, #412]	; (165a8 <event_connection_prepare+0x1530>)
   1640c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   16410:	4298      	cmp	r0, r3
   16412:	d038      	beq.n	16486 <event_connection_prepare+0x140e>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
   16414:	4b64      	ldr	r3, [pc, #400]	; (165a8 <event_connection_prepare+0x1530>)
   16416:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
		if (((free_count_conn + 1) == _radio.connection_count) ||
   1641a:	4599      	cmp	r9, r3
   1641c:	d833      	bhi.n	16486 <event_connection_prepare+0x140e>
   1641e:	e066      	b.n	164ee <event_connection_prepare+0x1476>
		return (_radio.packet_rx_count -
   16420:	4b61      	ldr	r3, [pc, #388]	; (165a8 <event_connection_prepare+0x1530>)
   16422:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   16426:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1642a:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   1642e:	fa52 f888 	uxtab	r8, r2, r8
   16432:	fa5f f888 	uxtb.w	r8, r8
   16436:	e7a7      	b.n	16388 <event_connection_prepare+0x1310>
		LL_ASSERT(free_count_rx <= 0xFF);
   16438:	4040      	eors	r0, r0
   1643a:	f380 8811 	msr	BASEPRI, r0
   1643e:	f04f 0004 	mov.w	r0, #4
   16442:	df02      	svc	2
			LL_ASSERT(0);
   16444:	4040      	eors	r0, r0
   16446:	f380 8811 	msr	BASEPRI, r0
   1644a:	f04f 0004 	mov.w	r0, #4
   1644e:	df02      	svc	2
					_radio.packet_rx_acquire -= 1;
   16450:	3b01      	subs	r3, #1
   16452:	4a55      	ldr	r2, [pc, #340]	; (165a8 <event_connection_prepare+0x1530>)
   16454:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   16458:	4f53      	ldr	r7, [pc, #332]	; (165a8 <event_connection_prepare+0x1530>)
   1645a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
						_radio.packet_rx_acquire];
   1645e:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   16462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				mem_release(node_rx->hdr.onion.link,
   16466:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   1646a:	6818      	ldr	r0, [r3, #0]
   1646c:	f7f8 ff77 	bl	f35e <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   16470:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
   16474:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
   16478:	3a01      	subs	r2, #1
   1647a:	4293      	cmp	r3, r2
   1647c:	da14      	bge.n	164a8 <event_connection_prepare+0x1430>
				_radio.link_rx_data_quota++;
   1647e:	3301      	adds	r3, #1
   16480:	4a49      	ldr	r2, [pc, #292]	; (165a8 <event_connection_prepare+0x1530>)
   16482:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
			while (_radio.packet_rx_acquire !=
   16486:	4a48      	ldr	r2, [pc, #288]	; (165a8 <event_connection_prepare+0x1530>)
   16488:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
				_radio.packet_rx_last) {
   1648c:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   16490:	b2d2      	uxtb	r2, r2
			while (_radio.packet_rx_acquire !=
   16492:	4293      	cmp	r3, r2
   16494:	d00e      	beq.n	164b4 <event_connection_prepare+0x143c>
				if (_radio.packet_rx_acquire == 0) {
   16496:	2b00      	cmp	r3, #0
   16498:	d1da      	bne.n	16450 <event_connection_prepare+0x13d8>
						_radio.packet_rx_count - 1;
   1649a:	4a43      	ldr	r2, [pc, #268]	; (165a8 <event_connection_prepare+0x1530>)
   1649c:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
   164a0:	3b01      	subs	r3, #1
					_radio.packet_rx_acquire =
   164a2:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
   164a6:	e7d7      	b.n	16458 <event_connection_prepare+0x13e0>
				LL_ASSERT(_radio.link_rx_data_quota <
   164a8:	4040      	eors	r0, r0
   164aa:	f380 8811 	msr	BASEPRI, r0
   164ae:	f04f 0004 	mov.w	r0, #4
   164b2:	df02      	svc	2
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   164b4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   164b6:	2b29      	cmp	r3, #41	; 0x29
   164b8:	d85f      	bhi.n	1657a <event_connection_prepare+0x1502>
				_radio.packet_rx_data_size =
   164ba:	2234      	movs	r2, #52	; 0x34
   164bc:	4b3a      	ldr	r3, [pc, #232]	; (165a8 <event_connection_prepare+0x1530>)
   164be:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				_radio.packet_rx_data_pool_size /
   164c2:	4b39      	ldr	r3, [pc, #228]	; (165a8 <event_connection_prepare+0x1530>)
   164c4:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
				_radio.packet_rx_data_size;
   164c8:	f8b3 1134 	ldrh.w	r1, [r3, #308]	; 0x134
			_radio.packet_rx_data_count =
   164cc:	fbb2 f2f1 	udiv	r2, r2, r1
   164d0:	b2d2      	uxtb	r2, r2
   164d2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
			LL_ASSERT(_radio.packet_rx_data_count);
   164d6:	2a00      	cmp	r2, #0
   164d8:	d053      	beq.n	16582 <event_connection_prepare+0x150a>
			mem_init(_radio.pkt_rx_data_pool,
   164da:	4833      	ldr	r0, [pc, #204]	; (165a8 <event_connection_prepare+0x1530>)
   164dc:	f500 7396 	add.w	r3, r0, #300	; 0x12c
   164e0:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
   164e4:	f7f8 fefa 	bl	f2dc <mem_init>
			packet_rx_allocate(4);
   164e8:	2004      	movs	r0, #4
   164ea:	f7fb fc59 	bl	11da0 <packet_rx_allocate>
	if (_radio.packet_rx_acquire >=
   164ee:	4b2e      	ldr	r3, [pc, #184]	; (165a8 <event_connection_prepare+0x1530>)
   164f0:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   164f4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   164f8:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   164fa:	429a      	cmp	r2, r3
   164fc:	d347      	bcc.n	1658e <event_connection_prepare+0x1516>
			_radio.packet_rx_last);
   164fe:	4b2a      	ldr	r3, [pc, #168]	; (165a8 <event_connection_prepare+0x1530>)
   16500:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16504:	1ad3      	subs	r3, r2, r3
   16506:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16508:	2b01      	cmp	r3, #1
   1650a:	d94a      	bls.n	165a2 <event_connection_prepare+0x152a>
	return _radio.packet_rx[_radio.packet_rx_last];
   1650c:	4b26      	ldr	r3, [pc, #152]	; (165a8 <event_connection_prepare+0x1530>)
   1650e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16512:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   1651a:	2b00      	cmp	r3, #0
   1651c:	d04a      	beq.n	165b4 <event_connection_prepare+0x153c>
		node_rx->hdr.handle = conn->handle;
   1651e:	8c22      	ldrh	r2, [r4, #32]
   16520:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16522:	2201      	movs	r2, #1
   16524:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   16526:	7a1a      	ldrb	r2, [r3, #8]
   16528:	f042 0203 	orr.w	r2, r2, #3
   1652c:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
   1652e:	2209      	movs	r2, #9
   16530:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   16532:	2215      	movs	r2, #21
   16534:	72da      	strb	r2, [r3, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   16536:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   16538:	819a      	strh	r2, [r3, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   1653a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   1653c:	821a      	strh	r2, [r3, #16]
		lr->max_rx_time = conn->max_rx_time;
   1653e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   16540:	81da      	strh	r2, [r3, #14]
		lr->max_tx_time = conn->max_tx_time;
   16542:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   16544:	825a      	strh	r2, [r3, #18]
		packet_rx_enqueue();
   16546:	f7fd ff35 	bl	143b4 <packet_rx_enqueue>
	event_common_prepare(ticks_at_expire, remainder,
   1654a:	1d23      	adds	r3, r4, #4
   1654c:	68a1      	ldr	r1, [r4, #8]
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   1654e:	8c22      	ldrh	r2, [r4, #32]
	event_common_prepare(ticks_at_expire, remainder,
   16550:	3207      	adds	r2, #7
   16552:	b2d2      	uxtb	r2, r2
   16554:	f994 001d 	ldrsb.w	r0, [r4, #29]
   16558:	2800      	cmp	r0, #0
   1655a:	db37      	blt.n	165cc <event_connection_prepare+0x1554>
   1655c:	4814      	ldr	r0, [pc, #80]	; (165b0 <event_connection_prepare+0x1538>)
   1655e:	9403      	str	r4, [sp, #12]
   16560:	9002      	str	r0, [sp, #8]
   16562:	9201      	str	r2, [sp, #4]
   16564:	9100      	str	r1, [sp, #0]
   16566:	4622      	mov	r2, r4
   16568:	990a      	ldr	r1, [sp, #40]	; 0x28
   1656a:	4630      	mov	r0, r6
   1656c:	f7fe fc7e 	bl	14e6c <event_common_prepare>
	conn->event_counter = event_counter + 1;
   16570:	3501      	adds	r5, #1
   16572:	8465      	strh	r5, [r4, #34]	; 0x22
}
   16574:	b00f      	add	sp, #60	; 0x3c
   16576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				_radio.packet_rx_data_size =
   1657a:	4b0b      	ldr	r3, [pc, #44]	; (165a8 <event_connection_prepare+0x1530>)
   1657c:	f8a3 9134 	strh.w	r9, [r3, #308]	; 0x134
   16580:	e79f      	b.n	164c2 <event_connection_prepare+0x144a>
			LL_ASSERT(_radio.packet_rx_data_count);
   16582:	4040      	eors	r0, r0
   16584:	f380 8811 	msr	BASEPRI, r0
   16588:	f04f 0004 	mov.w	r0, #4
   1658c:	df02      	svc	2
		return (_radio.packet_rx_count -
   1658e:	4906      	ldr	r1, [pc, #24]	; (165a8 <event_connection_prepare+0x1530>)
   16590:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   16594:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16598:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1659a:	fa52 f383 	uxtab	r3, r2, r3
   1659e:	b2db      	uxtb	r3, r3
   165a0:	e7b2      	b.n	16508 <event_connection_prepare+0x1490>
		return 0;
   165a2:	2300      	movs	r3, #0
   165a4:	e7b9      	b.n	1651a <event_connection_prepare+0x14a2>
   165a6:	bf00      	nop
   165a8:	200014d4 	.word	0x200014d4
   165ac:	2000162c 	.word	0x2000162c
   165b0:	00016a29 	.word	0x00016a29
		LL_ASSERT(node_rx);
   165b4:	4040      	eors	r0, r0
   165b6:	f380 8811 	msr	BASEPRI, r0
   165ba:	f04f 0004 	mov.w	r0, #4
   165be:	df02      	svc	2
		LL_ASSERT(0);
   165c0:	4040      	eors	r0, r0
   165c2:	f380 8811 	msr	BASEPRI, r0
   165c6:	f04f 0004 	mov.w	r0, #4
   165ca:	df02      	svc	2
	event_common_prepare(ticks_at_expire, remainder,
   165cc:	4800      	ldr	r0, [pc, #0]	; (165d0 <event_connection_prepare+0x1558>)
   165ce:	e7c6      	b.n	1655e <event_connection_prepare+0x14e6>
   165d0:	00016b65 	.word	0x00016b65

000165d4 <event_slave_prepare>:
{
   165d4:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   165d6:	f7fe fd4f 	bl	15078 <event_connection_prepare>
   165da:	bd08      	pop	{r3, pc}

000165dc <event_master_prepare>:
{
   165dc:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   165de:	f7fe fd4b 	bl	15078 <event_connection_prepare>
   165e2:	bd08      	pop	{r3, pc}

000165e4 <event_scan_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   165e4:	4b20      	ldr	r3, [pc, #128]	; (16668 <event_scan_prepare+0x84>)
   165e6:	7b1b      	ldrb	r3, [r3, #12]
   165e8:	bb23      	cbnz	r3, 16634 <event_scan_prepare+0x50>
{
   165ea:	b530      	push	{r4, r5, lr}
   165ec:	b085      	sub	sp, #20
   165ee:	4605      	mov	r5, r0
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   165f0:	4c1d      	ldr	r4, [pc, #116]	; (16668 <event_scan_prepare+0x84>)
   165f2:	2306      	movs	r3, #6
   165f4:	7323      	strb	r3, [r4, #12]
	event_common_prepare(ticks_at_expire, remainder,
   165f6:	2200      	movs	r2, #0
   165f8:	9203      	str	r2, [sp, #12]
   165fa:	4a1c      	ldr	r2, [pc, #112]	; (1666c <event_scan_prepare+0x88>)
   165fc:	9202      	str	r2, [sp, #8]
   165fe:	9301      	str	r3, [sp, #4]
   16600:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   16604:	9300      	str	r3, [sp, #0]
   16606:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   1660a:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   1660e:	f7fe fc2d 	bl	14e6c <event_common_prepare>
	if (_radio.scanner.conn) {
   16612:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   16616:	b15b      	cbz	r3, 16630 <event_scan_prepare+0x4c>
		if (_radio.scanner.hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   16618:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1661c:	2b00      	cmp	r3, #0
   1661e:	db0f      	blt.n	16640 <event_scan_prepare+0x5c>
		s_mfy_sched_after_mstr_free_offset_get.param =
   16620:	4b13      	ldr	r3, [pc, #76]	; (16670 <event_scan_prepare+0x8c>)
   16622:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   16624:	2201      	movs	r2, #1
   16626:	4611      	mov	r1, r2
   16628:	2000      	movs	r0, #0
   1662a:	f7f8 fd3b 	bl	f0a4 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1662e:	b9a8      	cbnz	r0, 1665c <event_scan_prepare+0x78>
}
   16630:	b005      	add	sp, #20
   16632:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   16634:	4040      	eors	r0, r0
   16636:	f380 8811 	msr	BASEPRI, r0
   1663a:	f04f 0004 	mov.w	r0, #4
   1663e:	df02      	svc	2
				_radio.scanner.hdr.ticks_preempt_to_start;
   16640:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
				_radio.scanner.hdr.ticks_active_to_start :
   16644:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
				((_radio.scanner.hdr.ticks_xtal_to_start &
   16648:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   1664c:	4291      	cmp	r1, r2
   1664e:	bf2c      	ite	cs
   16650:	ebc3 0301 	rsbcs	r3, r3, r1
   16654:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
   16658:	441d      	add	r5, r3
   1665a:	e7e1      	b.n	16620 <event_scan_prepare+0x3c>
		LL_ASSERT(!retval);
   1665c:	4040      	eors	r0, r0
   1665e:	f380 8811 	msr	BASEPRI, r0
   16662:	f04f 0004 	mov.w	r0, #4
   16666:	df02      	svc	2
   16668:	200014d4 	.word	0x200014d4
   1666c:	00016d01 	.word	0x00016d01
   16670:	2000c288 	.word	0x2000c288
   16674:	00000000 	.word	0x00000000

00016678 <mayfly_xtal_stop_calc>:
{
   16678:	b530      	push	{r4, r5, lr}
   1667a:	b08d      	sub	sp, #52	; 0x34
   1667c:	4604      	mov	r4, r0
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1667e:	2302      	movs	r3, #2
   16680:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = 0xff;
   16682:	23ff      	movs	r3, #255	; 0xff
   16684:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	ticks_to_expire = 0;
   16688:	2300      	movs	r3, #0
   1668a:	930a      	str	r3, [sp, #40]	; 0x28
   1668c:	e012      	b.n	166b4 <mayfly_xtal_stop_calc+0x3c>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1668e:	2101      	movs	r1, #1
   16690:	2000      	movs	r0, #0
   16692:	f7fa fc71 	bl	10f78 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   16696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16698:	2b02      	cmp	r3, #2
   1669a:	d0f8      	beq.n	1668e <mayfly_xtal_stop_calc+0x16>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   1669c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1669e:	b9cb      	cbnz	r3, 166d4 <mayfly_xtal_stop_calc+0x5c>
	} while (ticker_id != 0xff &&
   166a0:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
			       _radio.connection_count));
   166a4:	2aff      	cmp	r2, #255	; 0xff
   166a6:	d01b      	beq.n	166e0 <mayfly_xtal_stop_calc+0x68>
   166a8:	4b8b      	ldr	r3, [pc, #556]	; (168d8 <mayfly_xtal_stop_calc+0x260>)
   166aa:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   166ae:	3307      	adds	r3, #7
	} while (ticker_id != 0xff &&
   166b0:	429a      	cmp	r2, r3
   166b2:	db15      	blt.n	166e0 <mayfly_xtal_stop_calc+0x68>
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   166b4:	ab0b      	add	r3, sp, #44	; 0x2c
   166b6:	9302      	str	r3, [sp, #8]
   166b8:	4b88      	ldr	r3, [pc, #544]	; (168dc <mayfly_xtal_stop_calc+0x264>)
   166ba:	9301      	str	r3, [sp, #4]
   166bc:	ab0a      	add	r3, sp, #40	; 0x28
   166be:	9300      	str	r3, [sp, #0]
   166c0:	ab09      	add	r3, sp, #36	; 0x24
   166c2:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   166c6:	2101      	movs	r1, #1
   166c8:	2000      	movs	r0, #0
   166ca:	f7fa fbd5 	bl	10e78 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   166ce:	2802      	cmp	r0, #2
   166d0:	d1e4      	bne.n	1669c <mayfly_xtal_stop_calc+0x24>
   166d2:	e7e0      	b.n	16696 <mayfly_xtal_stop_calc+0x1e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   166d4:	4040      	eors	r0, r0
   166d6:	f380 8811 	msr	BASEPRI, r0
   166da:	f04f 0004 	mov.w	r0, #4
   166de:	df02      	svc	2
	if ((ticker_id != 0xff) &&
   166e0:	2aff      	cmp	r2, #255	; 0xff
   166e2:	d002      	beq.n	166ea <mayfly_xtal_stop_calc+0x72>
	    (ticks_to_expire <
   166e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	if ((ticker_id != 0xff) &&
   166e6:	2ba8      	cmp	r3, #168	; 0xa8
   166e8:	d91a      	bls.n	16720 <mayfly_xtal_stop_calc+0xa8>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   166ea:	2100      	movs	r1, #0
   166ec:	2001      	movs	r0, #1
   166ee:	f7fb fdcd 	bl	1228c <mayfly_xtal_retain>
		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
   166f2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   166f6:	1f53      	subs	r3, r2, #5
   166f8:	b2db      	uxtb	r3, r3
   166fa:	2bf9      	cmp	r3, #249	; 0xf9
   166fc:	d80e      	bhi.n	1671c <mayfly_xtal_stop_calc+0xa4>
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   166fe:	2a06      	cmp	r2, #6
   16700:	f200 80d1 	bhi.w	168a6 <mayfly_xtal_stop_calc+0x22e>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   16704:	2a05      	cmp	r2, #5
   16706:	f000 80de 	beq.w	168c6 <mayfly_xtal_stop_calc+0x24e>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   1670a:	2a06      	cmp	r2, #6
   1670c:	f040 80d5 	bne.w	168ba <mayfly_xtal_stop_calc+0x242>
				hdr = &_radio.scanner.hdr;
   16710:	4873      	ldr	r0, [pc, #460]	; (168e0 <mayfly_xtal_stop_calc+0x268>)
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
   16712:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   16716:	2101      	movs	r1, #1
   16718:	f7fe fb80 	bl	14e1c <prepare_normal_set>
}
   1671c:	b00d      	add	sp, #52	; 0x34
   1671e:	bd30      	pop	{r4, r5, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   16720:	2101      	movs	r1, #1
   16722:	4608      	mov	r0, r1
   16724:	f7fb fdb2 	bl	1228c <mayfly_xtal_retain>
		if (ticker_id >= RADIO_TICKER_ID_ADV) {
   16728:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1672c:	2b04      	cmp	r3, #4
   1672e:	d9f5      	bls.n	1671c <mayfly_xtal_stop_calc+0xa4>
			u8_t ticker_id_current = ((u32_t)params & 0xff);
   16730:	b2e4      	uxtb	r4, r4
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   16732:	2b06      	cmp	r3, #6
   16734:	d82a      	bhi.n	1678c <mayfly_xtal_stop_calc+0x114>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   16736:	2b05      	cmp	r3, #5
   16738:	d03a      	beq.n	167b0 <mayfly_xtal_stop_calc+0x138>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   1673a:	2b06      	cmp	r3, #6
   1673c:	d132      	bne.n	167a4 <mayfly_xtal_stop_calc+0x12c>
				hdr = &_radio.scanner.hdr;
   1673e:	4968      	ldr	r1, [pc, #416]	; (168e0 <mayfly_xtal_stop_calc+0x268>)
			struct connection *conn = NULL;
   16740:	2500      	movs	r5, #0
				hdr->ticks_preempt_to_start;
   16742:	688b      	ldr	r3, [r1, #8]
				hdr->ticks_active_to_start :
   16744:	684a      	ldr	r2, [r1, #4]
			ticks_prepare_to_start =
   16746:	429a      	cmp	r2, r3
   16748:	bf38      	it	cc
   1674a:	461a      	movcc	r2, r3
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
   1674c:	680b      	ldr	r3, [r1, #0]
   1674e:	2b00      	cmp	r3, #0
   16750:	db31      	blt.n	167b6 <mayfly_xtal_stop_calc+0x13e>
				if (hdr->ticks_xtal_to_start >
   16752:	429a      	cmp	r2, r3
   16754:	d336      	bcc.n	167c4 <mayfly_xtal_stop_calc+0x14c>
			if (ticker_id_current >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   16756:	2c06      	cmp	r4, #6
   16758:	d84e      	bhi.n	167f8 <mayfly_xtal_stop_calc+0x180>
			struct connection *conn_curr = NULL;
   1675a:	2400      	movs	r4, #0
			if ((conn) && (conn_curr) &&
   1675c:	2d00      	cmp	r5, #0
   1675e:	d0dd      	beq.n	1671c <mayfly_xtal_stop_calc+0xa4>
   16760:	2c00      	cmp	r4, #0
   16762:	d0db      	beq.n	1671c <mayfly_xtal_stop_calc+0xa4>
			    (conn_curr->conn_interval == conn->conn_interval)) {
   16764:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   16766:	8caa      	ldrh	r2, [r5, #36]	; 0x24
			if ((conn) && (conn_curr) &&
   16768:	4293      	cmp	r3, r2
   1676a:	d1d7      	bne.n	1671c <mayfly_xtal_stop_calc+0xa4>
					TICKER_US_TO_TICKS(conn->conn_interval * 1250);
   1676c:	b292      	uxth	r2, r2
   1676e:	485d      	ldr	r0, [pc, #372]	; (168e4 <mayfly_xtal_stop_calc+0x26c>)
   16770:	fba2 0100 	umull	r0, r1, r2, r0
   16774:	f240 1323 	movw	r3, #291	; 0x123
   16778:	fb03 1102 	mla	r1, r3, r2, r1
   1677c:	a354      	add	r3, pc, #336	; (adr r3, 168d0 <mayfly_xtal_stop_calc+0x258>)
   1677e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16782:	f7ea fcbb 	bl	10fc <__aeabi_uldivmod>
				u32_t ticks_conn_interval =
   16786:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				while (ticks_to_expire > ticks_conn_interval) {
   1678a:	e050      	b.n	1682e <mayfly_xtal_stop_calc+0x1b6>
				conn = mem_get(_radio.conn_pool,
   1678c:	3b07      	subs	r3, #7
   1678e:	b29a      	uxth	r2, r3
   16790:	f44f 71aa 	mov.w	r1, #340	; 0x154
   16794:	4b50      	ldr	r3, [pc, #320]	; (168d8 <mayfly_xtal_stop_calc+0x260>)
   16796:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   1679a:	f7f8 fe01 	bl	f3a0 <mem_get>
   1679e:	4605      	mov	r5, r0
				hdr = &conn->hdr;
   167a0:	4601      	mov	r1, r0
   167a2:	e7ce      	b.n	16742 <mayfly_xtal_stop_calc+0xca>
				LL_ASSERT(0);
   167a4:	4040      	eors	r0, r0
   167a6:	f380 8811 	msr	BASEPRI, r0
   167aa:	f04f 0004 	mov.w	r0, #4
   167ae:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   167b0:	494d      	ldr	r1, [pc, #308]	; (168e8 <mayfly_xtal_stop_calc+0x270>)
			struct connection *conn = NULL;
   167b2:	2500      	movs	r5, #0
   167b4:	e7c5      	b.n	16742 <mayfly_xtal_stop_calc+0xca>
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   167b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						     (~((u32_t)1 << 31))) -
   167ba:	1ad3      	subs	r3, r2, r3
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   167bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   167be:	4413      	add	r3, r2
   167c0:	930a      	str	r3, [sp, #40]	; 0x28
   167c2:	e7c8      	b.n	16756 <mayfly_xtal_stop_calc+0xde>
					u32_t ticks_drift_plus =
   167c4:	1a9b      	subs	r3, r3, r2
						ticker_update(
   167c6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   167ca:	b29b      	uxth	r3, r3
					ticker_status =
   167cc:	9106      	str	r1, [sp, #24]
   167ce:	4947      	ldr	r1, [pc, #284]	; (168ec <mayfly_xtal_stop_calc+0x274>)
   167d0:	9105      	str	r1, [sp, #20]
   167d2:	2000      	movs	r0, #0
   167d4:	9004      	str	r0, [sp, #16]
   167d6:	9003      	str	r0, [sp, #12]
   167d8:	9302      	str	r3, [sp, #8]
   167da:	9001      	str	r0, [sp, #4]
   167dc:	9000      	str	r0, [sp, #0]
   167de:	2101      	movs	r1, #1
   167e0:	f7fa fac0 	bl	10d64 <ticker_update>
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
   167e4:	2800      	cmp	r0, #0
   167e6:	d0b6      	beq.n	16756 <mayfly_xtal_stop_calc+0xde>
   167e8:	2802      	cmp	r0, #2
   167ea:	d0b4      	beq.n	16756 <mayfly_xtal_stop_calc+0xde>
   167ec:	4040      	eors	r0, r0
   167ee:	f380 8811 	msr	BASEPRI, r0
   167f2:	f04f 0004 	mov.w	r0, #4
   167f6:	df02      	svc	2
					mem_get(_radio.conn_pool,
   167f8:	3c07      	subs	r4, #7
				conn_curr =
   167fa:	b2a2      	uxth	r2, r4
   167fc:	f44f 71aa 	mov.w	r1, #340	; 0x154
   16800:	4b35      	ldr	r3, [pc, #212]	; (168d8 <mayfly_xtal_stop_calc+0x260>)
   16802:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   16806:	f7f8 fdcb 	bl	f3a0 <mem_get>
   1680a:	4604      	mov	r4, r0
					conn_curr->hdr.ticks_preempt_to_start;
   1680c:	6883      	ldr	r3, [r0, #8]
					conn_curr->hdr.ticks_active_to_start :
   1680e:	6842      	ldr	r2, [r0, #4]
				ticks_prepare_to_start =
   16810:	429a      	cmp	r2, r3
   16812:	bf38      	it	cc
   16814:	461a      	movcc	r2, r3
				if ((conn_curr->hdr.ticks_xtal_to_start &
   16816:	6803      	ldr	r3, [r0, #0]
   16818:	2b00      	cmp	r3, #0
   1681a:	da9f      	bge.n	1675c <mayfly_xtal_stop_calc+0xe4>
						((conn_curr->hdr.ticks_xtal_to_start &
   1681c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						  (~((u32_t)1 << 31))) -
   16820:	1a9b      	subs	r3, r3, r2
					ticks_to_expire +=
   16822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16824:	4413      	add	r3, r2
   16826:	930a      	str	r3, [sp, #40]	; 0x28
   16828:	e798      	b.n	1675c <mayfly_xtal_stop_calc+0xe4>
					ticks_to_expire -= ticks_conn_interval;
   1682a:	1a1b      	subs	r3, r3, r0
   1682c:	930a      	str	r3, [sp, #40]	; 0x28
				while (ticks_to_expire > ticks_conn_interval) {
   1682e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16830:	4298      	cmp	r0, r3
   16832:	d3fa      	bcc.n	1682a <mayfly_xtal_stop_calc+0x1b2>
   16834:	f994 101d 	ldrsb.w	r1, [r4, #29]
				if (conn_curr->role && !conn->role &&
   16838:	2900      	cmp	r1, #0
   1683a:	db1c      	blt.n	16876 <mayfly_xtal_stop_calc+0x1fe>
				} else if (!conn_curr->role && conn->role &&
   1683c:	2900      	cmp	r1, #0
   1683e:	f6ff af6d 	blt.w	1671c <mayfly_xtal_stop_calc+0xa4>
   16842:	f995 201d 	ldrsb.w	r2, [r5, #29]
   16846:	2a00      	cmp	r2, #0
   16848:	f6bf af68 	bge.w	1671c <mayfly_xtal_stop_calc+0xa4>
					     conn_curr->hdr.ticks_slot))) {
   1684c:	68e2      	ldr	r2, [r4, #12]
								625) +
   1684e:	323b      	adds	r2, #59	; 0x3b
				} else if (!conn_curr->role && conn->role &&
   16850:	4293      	cmp	r3, r2
   16852:	f4bf af63 	bcs.w	1671c <mayfly_xtal_stop_calc+0xa4>
					status = conn_update_req(conn);
   16856:	4628      	mov	r0, r5
   16858:	f7fb f852 	bl	11900 <conn_update_req>
					if ((status == 2) &&
   1685c:	2802      	cmp	r0, #2
   1685e:	f47f af5d 	bne.w	1671c <mayfly_xtal_stop_calc+0xa4>
   16862:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   16866:	f013 0f02 	tst.w	r3, #2
   1686a:	f43f af57 	beq.w	1671c <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn_curr);
   1686e:	4620      	mov	r0, r4
   16870:	f7fb f846 	bl	11900 <conn_update_req>
   16874:	e752      	b.n	1671c <mayfly_xtal_stop_calc+0xa4>
				if (conn_curr->role && !conn->role &&
   16876:	f995 201d 	ldrsb.w	r2, [r5, #29]
   1687a:	2a00      	cmp	r2, #0
   1687c:	dbde      	blt.n	1683c <mayfly_xtal_stop_calc+0x1c4>
				      conn_curr->hdr.ticks_slot))) {
   1687e:	68e2      	ldr	r2, [r4, #12]
							 625) +
   16880:	323b      	adds	r2, #59	; 0x3b
				if (conn_curr->role && !conn->role &&
   16882:	4293      	cmp	r3, r2
   16884:	d2da      	bcs.n	1683c <mayfly_xtal_stop_calc+0x1c4>
					status = conn_update_req(conn_curr);
   16886:	4620      	mov	r0, r4
   16888:	f7fb f83a 	bl	11900 <conn_update_req>
					if ((status == 2) &&
   1688c:	2802      	cmp	r0, #2
   1688e:	f47f af45 	bne.w	1671c <mayfly_xtal_stop_calc+0xa4>
   16892:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   16896:	f013 0f02 	tst.w	r3, #2
   1689a:	f43f af3f 	beq.w	1671c <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn);
   1689e:	4628      	mov	r0, r5
   168a0:	f7fb f82e 	bl	11900 <conn_update_req>
   168a4:	e73a      	b.n	1671c <mayfly_xtal_stop_calc+0xa4>
				conn = mem_get(_radio.conn_pool,
   168a6:	3a07      	subs	r2, #7
   168a8:	b292      	uxth	r2, r2
   168aa:	f44f 71aa 	mov.w	r1, #340	; 0x154
   168ae:	4b0a      	ldr	r3, [pc, #40]	; (168d8 <mayfly_xtal_stop_calc+0x260>)
   168b0:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   168b4:	f7f8 fd74 	bl	f3a0 <mem_get>
   168b8:	e72b      	b.n	16712 <mayfly_xtal_stop_calc+0x9a>
				LL_ASSERT(0);
   168ba:	4040      	eors	r0, r0
   168bc:	f380 8811 	msr	BASEPRI, r0
   168c0:	f04f 0004 	mov.w	r0, #4
   168c4:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   168c6:	4808      	ldr	r0, [pc, #32]	; (168e8 <mayfly_xtal_stop_calc+0x270>)
   168c8:	e723      	b.n	16712 <mayfly_xtal_stop_calc+0x9a>
   168ca:	bf00      	nop
   168cc:	f3af 8000 	nop.w
   168d0:	1afd498d 	.word	0x1afd498d
   168d4:	00000007 	.word	0x00000007
   168d8:	200014d4 	.word	0x200014d4
   168dc:	000116ad 	.word	0x000116ad
   168e0:	200015a0 	.word	0x200015a0
   168e4:	09ce5400 	.word	0x09ce5400
   168e8:	200014e8 	.word	0x200014e8
   168ec:	000116d9 	.word	0x000116d9

000168f0 <preempt_calc>:
{
   168f0:	b570      	push	{r4, r5, r6, lr}
   168f2:	4605      	mov	r5, r0
   168f4:	460e      	mov	r6, r1
   168f6:	4614      	mov	r4, r2
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   168f8:	f7fa fb4e 	bl	10f98 <ticker_ticks_now_get>
	u32_t diff =
   168fc:	4621      	mov	r1, r4
   168fe:	f7fa fb4f 	bl	10fa0 <ticker_ticks_diff_get>
	diff += 3;
   16902:	1cc4      	adds	r4, r0, #3
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   16904:	2c09      	cmp	r4, #9
   16906:	d801      	bhi.n	1690c <preempt_calc+0x1c>
	return 0;
   16908:	2000      	movs	r0, #0
   1690a:	bd70      	pop	{r4, r5, r6, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   1690c:	2100      	movs	r1, #0
   1690e:	4608      	mov	r0, r1
   16910:	f7fb fcbc 	bl	1228c <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   16914:	4632      	mov	r2, r6
   16916:	2100      	movs	r1, #0
   16918:	4628      	mov	r0, r5
   1691a:	f7fe fa7f 	bl	14e1c <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   1691e:	68ab      	ldr	r3, [r5, #8]
   16920:	441c      	add	r4, r3
		if (diff <
   16922:	2c26      	cmp	r4, #38	; 0x26
   16924:	d802      	bhi.n	1692c <preempt_calc+0x3c>
			hdr->ticks_preempt_to_start = diff;
   16926:	60ac      	str	r4, [r5, #8]
		return 1;
   16928:	2001      	movs	r0, #1
   1692a:	bd70      	pop	{r4, r5, r6, pc}
   1692c:	2001      	movs	r0, #1
}
   1692e:	bd70      	pop	{r4, r5, r6, pc}

00016930 <event_adv>:
{
   16930:	b538      	push	{r3, r4, r5, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   16932:	4b3b      	ldr	r3, [pc, #236]	; (16a20 <event_adv+0xf0>)
   16934:	7bdb      	ldrb	r3, [r3, #15]
   16936:	2b00      	cmp	r3, #0
   16938:	d142      	bne.n	169c0 <event_adv+0x90>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   1693a:	4b39      	ldr	r3, [pc, #228]	; (16a20 <event_adv+0xf0>)
   1693c:	7b1b      	ldrb	r3, [r3, #12]
   1693e:	b2db      	uxtb	r3, r3
   16940:	2b05      	cmp	r3, #5
   16942:	d143      	bne.n	169cc <event_adv+0x9c>
   16944:	4605      	mov	r5, r0
	_radio.role = ROLE_ADV;
   16946:	4c36      	ldr	r4, [pc, #216]	; (16a20 <event_adv+0xf0>)
   16948:	2101      	movs	r1, #1
   1694a:	73e1      	strb	r1, [r4, #15]
	_radio.ticker_id_prepare = 0;
   1694c:	2300      	movs	r3, #0
   1694e:	7323      	strb	r3, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   16950:	2305      	movs	r3, #5
   16952:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16954:	6060      	str	r0, [r4, #4]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   16956:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   1695a:	f000 0007 	and.w	r0, r0, #7
   1695e:	f7fb fd5b 	bl	12418 <adv_scan_configure>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   16962:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   16966:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1696a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1696e:	f363 0243 	bfi	r2, r3, #1, #3
   16972:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	adv_setup();
   16976:	f7fc f841 	bl	129fc <adv_setup>
	if (ctrl_rl_enabled()) {
   1697a:	f003 fa43 	bl	19e04 <ctrl_rl_enabled>
   1697e:	bb58      	cbnz	r0, 169d8 <event_adv+0xa8>
	if (_radio.advertiser.filter_policy) {
   16980:	4b27      	ldr	r3, [pc, #156]	; (16a20 <event_adv+0xf0>)
   16982:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   16986:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   1698a:	d134      	bne.n	169f6 <event_adv+0xc6>
	remainder_us = radio_tmr_start(1,
   1698c:	4c24      	ldr	r4, [pc, #144]	; (16a20 <event_adv+0xf0>)
   1698e:	68a2      	ldr	r2, [r4, #8]
   16990:	f105 0109 	add.w	r1, r5, #9
   16994:	2001      	movs	r0, #1
   16996:	f7f8 ffe9 	bl	f96c <radio_tmr_start>
	radio_tmr_end_capture();
   1699a:	f7f9 f899 	bl	fad0 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   1699e:	462a      	mov	r2, r5
   169a0:	2105      	movs	r1, #5
   169a2:	f104 0014 	add.w	r0, r4, #20
   169a6:	f7ff ffa3 	bl	168f0 <preempt_calc>
   169aa:	bb68      	cbnz	r0, 16a08 <event_adv+0xd8>
		ticker_status =
   169ac:	2300      	movs	r3, #0
   169ae:	4a1d      	ldr	r2, [pc, #116]	; (16a24 <event_adv+0xf4>)
   169b0:	4619      	mov	r1, r3
   169b2:	4618      	mov	r0, r3
   169b4:	f7fa faa4 	bl	10f00 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   169b8:	b108      	cbz	r0, 169be <event_adv+0x8e>
   169ba:	2802      	cmp	r0, #2
   169bc:	d129      	bne.n	16a12 <event_adv+0xe2>
   169be:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(_radio.role == ROLE_NONE);
   169c0:	4040      	eors	r0, r0
   169c2:	f380 8811 	msr	BASEPRI, r0
   169c6:	f04f 0004 	mov.w	r0, #4
   169ca:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   169cc:	4040      	eors	r0, r0
   169ce:	f380 8811 	msr	BASEPRI, r0
   169d2:	f04f 0004 	mov.w	r0, #4
   169d6:	df02      	svc	2
			ctrl_filter_get(!!(_radio.advertiser.filter_policy));
   169d8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   169dc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
		struct ll_filter *filter =
   169e0:	bf14      	ite	ne
   169e2:	2001      	movne	r0, #1
   169e4:	2000      	moveq	r0, #0
   169e6:	f003 f80f 	bl	19a08 <ctrl_filter_get>
		radio_filter_configure(filter->enable_bitmask,
   169ea:	1c82      	adds	r2, r0, #2
   169ec:	7841      	ldrb	r1, [r0, #1]
   169ee:	7800      	ldrb	r0, [r0, #0]
   169f0:	f7f8 ff3e 	bl	f870 <radio_filter_configure>
   169f4:	e7ca      	b.n	1698c <event_adv+0x5c>
		struct ll_filter *wl = ctrl_filter_get(true);
   169f6:	2001      	movs	r0, #1
   169f8:	f003 f806 	bl	19a08 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   169fc:	1c82      	adds	r2, r0, #2
   169fe:	7841      	ldrb	r1, [r0, #1]
   16a00:	7800      	ldrb	r0, [r0, #0]
   16a02:	f7f8 ff35 	bl	f870 <radio_filter_configure>
   16a06:	e7c1      	b.n	1698c <event_adv+0x5c>
		_radio.state = STATE_STOP;
   16a08:	2204      	movs	r2, #4
   16a0a:	7422      	strb	r2, [r4, #16]
		radio_disable();
   16a0c:	f7f8 fea0 	bl	f750 <radio_disable>
   16a10:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16a12:	4040      	eors	r0, r0
   16a14:	f380 8811 	msr	BASEPRI, r0
   16a18:	f04f 0004 	mov.w	r0, #4
   16a1c:	df02      	svc	2
   16a1e:	bf00      	nop
   16a20:	200014d4 	.word	0x200014d4
   16a24:	00011ed9 	.word	0x00011ed9

00016a28 <event_master>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16a28:	4a4c      	ldr	r2, [pc, #304]	; (16b5c <event_master+0x134>)
   16a2a:	7bd2      	ldrb	r2, [r2, #15]
   16a2c:	2a00      	cmp	r2, #0
   16a2e:	d174      	bne.n	16b1a <event_master+0xf2>
{
   16a30:	b530      	push	{r4, r5, lr}
   16a32:	b085      	sub	sp, #20
	LL_ASSERT(_radio.ticker_id_prepare ==
   16a34:	4a49      	ldr	r2, [pc, #292]	; (16b5c <event_master+0x134>)
   16a36:	7b12      	ldrb	r2, [r2, #12]
   16a38:	b2d2      	uxtb	r2, r2
   16a3a:	8c19      	ldrh	r1, [r3, #32]
   16a3c:	1dcc      	adds	r4, r1, #7
   16a3e:	42a2      	cmp	r2, r4
   16a40:	d171      	bne.n	16b26 <event_master+0xfe>
   16a42:	461c      	mov	r4, r3
   16a44:	4605      	mov	r5, r0
	_radio.role = ROLE_MASTER;
   16a46:	4b45      	ldr	r3, [pc, #276]	; (16b5c <event_master+0x134>)
   16a48:	2204      	movs	r2, #4
   16a4a:	73da      	strb	r2, [r3, #15]
	_radio.state = STATE_TX;
   16a4c:	2002      	movs	r0, #2
   16a4e:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
   16a50:	2200      	movs	r2, #0
   16a52:	731a      	strb	r2, [r3, #12]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   16a54:	3107      	adds	r1, #7
   16a56:	b2c9      	uxtb	r1, r1
	_radio.ticker_id_event =
   16a58:	7359      	strb	r1, [r3, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16a5a:	605d      	str	r5, [r3, #4]
	_radio.packet_counter = 0;
   16a5c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	_radio.crc_expire = 0;
   16a60:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	_radio.conn_curr = conn;
   16a64:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   16a68:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   16a6a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   16a6c:	8522      	strh	r2, [r4, #40]	; 0x28
	packet_tx_enqueue(2);
   16a6e:	f7fb fd69 	bl	12544 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   16a72:	a903      	add	r1, sp, #12
   16a74:	4620      	mov	r0, r4
   16a76:	f7fb fed3 	bl	12820 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   16a7a:	9b03      	ldr	r3, [sp, #12]
   16a7c:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   16a80:	781a      	ldrb	r2, [r3, #0]
   16a82:	f361 02c3 	bfi	r2, r1, #3, #1
   16a86:	701a      	strb	r2, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
   16a88:	9a03      	ldr	r2, [sp, #12]
   16a8a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   16a8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   16a92:	7811      	ldrb	r1, [r2, #0]
   16a94:	f363 0182 	bfi	r1, r3, #2, #1
   16a98:	7011      	strb	r1, [r2, #0]
	connection_configure(conn);
   16a9a:	4620      	mov	r0, r4
   16a9c:	f7fb fce0 	bl	12460 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   16aa0:	2096      	movs	r0, #150	; 0x96
   16aa2:	f7f8 ff5d 	bl	f960 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   16aa6:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16aaa:	f000 0007 	and.w	r0, r0, #7
   16aae:	f7f8 fea5 	bl	f7fc <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   16ab2:	9903      	ldr	r1, [sp, #12]
   16ab4:	4620      	mov	r0, r4
   16ab6:	f7fb ff49 	bl	1294c <tx_packet_set>
	if (conn->data_chan_sel) {
   16aba:	7f63      	ldrb	r3, [r4, #29]
   16abc:	f013 0f40 	tst.w	r3, #64	; 0x40
   16ac0:	d037      	beq.n	16b32 <event_master+0x10a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   16ac2:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   16ac4:	3801      	subs	r0, #1
   16ac6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16aca:	f104 0217 	add.w	r2, r4, #23
   16ace:	8be1      	ldrh	r1, [r4, #30]
   16ad0:	b280      	uxth	r0, r0
   16ad2:	f7fa fe8b 	bl	117ec <chan_sel_2>
	chan_set(data_chan_use);
   16ad6:	f7fb ff65 	bl	129a4 <chan_set>
		remainder_us = radio_tmr_start(1,
   16ada:	4b20      	ldr	r3, [pc, #128]	; (16b5c <event_master+0x134>)
   16adc:	689a      	ldr	r2, [r3, #8]
   16ade:	f105 0109 	add.w	r1, r5, #9
   16ae2:	2001      	movs	r0, #1
   16ae4:	f7f8 ff42 	bl	f96c <radio_tmr_start>
		radio_tmr_end_capture();
   16ae8:	f7f8 fff2 	bl	fad0 <radio_tmr_end_capture>
				      conn->handle), ticks_at_expire)) {
   16aec:	8c21      	ldrh	r1, [r4, #32]
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   16aee:	3107      	adds	r1, #7
   16af0:	462a      	mov	r2, r5
   16af2:	b2c9      	uxtb	r1, r1
   16af4:	4620      	mov	r0, r4
   16af6:	f7ff fefb 	bl	168f0 <preempt_calc>
	if (0 !=
   16afa:	bb38      	cbnz	r0, 16b4c <event_master+0x124>
		ticker_status =
   16afc:	2300      	movs	r3, #0
   16afe:	4a18      	ldr	r2, [pc, #96]	; (16b60 <event_master+0x138>)
   16b00:	4619      	mov	r1, r3
   16b02:	4618      	mov	r0, r3
   16b04:	f7fa f9fc 	bl	10f00 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16b08:	b328      	cbz	r0, 16b56 <event_master+0x12e>
   16b0a:	2802      	cmp	r0, #2
   16b0c:	d023      	beq.n	16b56 <event_master+0x12e>
   16b0e:	4040      	eors	r0, r0
   16b10:	f380 8811 	msr	BASEPRI, r0
   16b14:	f04f 0004 	mov.w	r0, #4
   16b18:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16b1a:	4040      	eors	r0, r0
   16b1c:	f380 8811 	msr	BASEPRI, r0
   16b20:	f04f 0004 	mov.w	r0, #4
   16b24:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   16b26:	4040      	eors	r0, r0
   16b28:	f380 8811 	msr	BASEPRI, r0
   16b2c:	f04f 0004 	mov.w	r0, #4
   16b30:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16b32:	7fa1      	ldrb	r1, [r4, #30]
   16b34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   16b36:	7f63      	ldrb	r3, [r4, #29]
   16b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16b3c:	9300      	str	r3, [sp, #0]
   16b3e:	f104 0317 	add.w	r3, r4, #23
   16b42:	f104 001f 	add.w	r0, r4, #31
   16b46:	f7fa fdf3 	bl	11730 <chan_sel_1>
   16b4a:	e7c4      	b.n	16ad6 <event_master+0xae>
		_radio.state = STATE_STOP;
   16b4c:	2204      	movs	r2, #4
   16b4e:	4b03      	ldr	r3, [pc, #12]	; (16b5c <event_master+0x134>)
   16b50:	741a      	strb	r2, [r3, #16]
		radio_disable();
   16b52:	f7f8 fdfd 	bl	f750 <radio_disable>
}
   16b56:	b005      	add	sp, #20
   16b58:	bd30      	pop	{r4, r5, pc}
   16b5a:	bf00      	nop
   16b5c:	200014d4 	.word	0x200014d4
   16b60:	00011ed9 	.word	0x00011ed9

00016b64 <event_slave>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16b64:	4a64      	ldr	r2, [pc, #400]	; (16cf8 <event_slave+0x194>)
   16b66:	7bd2      	ldrb	r2, [r2, #15]
   16b68:	2a00      	cmp	r2, #0
   16b6a:	f040 809d 	bne.w	16ca8 <event_slave+0x144>
{
   16b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b70:	b083      	sub	sp, #12
	LL_ASSERT(_radio.ticker_id_prepare ==
   16b72:	4a61      	ldr	r2, [pc, #388]	; (16cf8 <event_slave+0x194>)
   16b74:	7b11      	ldrb	r1, [r2, #12]
   16b76:	b2c9      	uxtb	r1, r1
   16b78:	8c1a      	ldrh	r2, [r3, #32]
   16b7a:	1dd4      	adds	r4, r2, #7
   16b7c:	42a1      	cmp	r1, r4
   16b7e:	f040 8099 	bne.w	16cb4 <event_slave+0x150>
   16b82:	461c      	mov	r4, r3
   16b84:	4606      	mov	r6, r0
	_radio.role = ROLE_SLAVE;
   16b86:	4d5c      	ldr	r5, [pc, #368]	; (16cf8 <event_slave+0x194>)
   16b88:	2303      	movs	r3, #3
   16b8a:	73eb      	strb	r3, [r5, #15]
	_radio.state = STATE_RX;
   16b8c:	2301      	movs	r3, #1
   16b8e:	742b      	strb	r3, [r5, #16]
	_radio.ticker_id_prepare = 0;
   16b90:	2700      	movs	r7, #0
   16b92:	732f      	strb	r7, [r5, #12]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   16b94:	3207      	adds	r2, #7
   16b96:	b2d2      	uxtb	r2, r2
	_radio.ticker_id_event =
   16b98:	736a      	strb	r2, [r5, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16b9a:	6068      	str	r0, [r5, #4]
	_radio.packet_counter = 0;
   16b9c:	f885 7114 	strb.w	r7, [r5, #276]	; 0x114
	_radio.crc_expire = 0;
   16ba0:	f885 7115 	strb.w	r7, [r5, #277]	; 0x115
	_radio.conn_curr = conn;
   16ba4:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   16ba8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   16baa:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   16bac:	8527      	strh	r7, [r4, #40]	; 0x28
	connection_configure(conn);
   16bae:	4620      	mov	r0, r4
   16bb0:	f7fb fc56 	bl	12460 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   16bb4:	2096      	movs	r0, #150	; 0x96
   16bb6:	f7f8 fed3 	bl	f960 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   16bba:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16bbe:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   16bc2:	09d3      	lsrs	r3, r2, #7
   16bc4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   16bc8:	4639      	mov	r1, r7
   16bca:	f000 0007 	and.w	r0, r0, #7
   16bce:	f7f8 fe1d 	bl	f80c <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   16bd2:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   16bd6:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   16bda:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (struct pdu_data *)
   16bde:	3108      	adds	r1, #8
   16be0:	4620      	mov	r0, r4
   16be2:	f7fb fc51 	bl	12488 <rx_packet_set>
	if (conn->data_chan_sel) {
   16be6:	7f63      	ldrb	r3, [r4, #29]
   16be8:	f013 0f40 	tst.w	r3, #64	; 0x40
   16bec:	d068      	beq.n	16cc0 <event_slave+0x15c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   16bee:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   16bf0:	3801      	subs	r0, #1
   16bf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16bf6:	f104 0217 	add.w	r2, r4, #23
   16bfa:	8be1      	ldrh	r1, [r4, #30]
   16bfc:	b280      	uxth	r0, r0
   16bfe:	f7fa fdf5 	bl	117ec <chan_sel_2>
	chan_set(data_chan_use);
   16c02:	f7fb fecf 	bl	129a4 <chan_set>
		conn->slave.window_widening_prepare_us;
   16c06:	6de3      	ldr	r3, [r4, #92]	; 0x5c
	conn->slave.window_widening_event_us +=
   16c08:	6e22      	ldr	r2, [r4, #96]	; 0x60
   16c0a:	4413      	add	r3, r2
   16c0c:	6623      	str	r3, [r4, #96]	; 0x60
	conn->slave.window_widening_prepare_us = 0;
   16c0e:	2200      	movs	r2, #0
   16c10:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   16c12:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (conn->slave.window_widening_event_us >
   16c14:	4293      	cmp	r3, r2
   16c16:	d900      	bls.n	16c1a <event_slave+0xb6>
		conn->slave.window_widening_event_us =
   16c18:	6622      	str	r2, [r4, #96]	; 0x60
		conn->slave.window_size_prepare_us;
   16c1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_event_us +=
   16c1c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   16c1e:	4413      	add	r3, r2
   16c20:	66a3      	str	r3, [r4, #104]	; 0x68
	conn->slave.window_size_prepare_us = 0;
   16c22:	2700      	movs	r7, #0
   16c24:	6667      	str	r7, [r4, #100]	; 0x64
	remainder_us =
   16c26:	4b34      	ldr	r3, [pc, #208]	; (16cf8 <event_slave+0x194>)
   16c28:	689a      	ldr	r2, [r3, #8]
   16c2a:	f106 0109 	add.w	r1, r6, #9
   16c2e:	4638      	mov	r0, r7
   16c30:	f7f8 fe9c 	bl	f96c <radio_tmr_start>
   16c34:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   16c36:	f7f8 ff17 	bl	fa68 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   16c3a:	4638      	mov	r0, r7
   16c3c:	f7f8 ff36 	bl	faac <radio_tmr_aa_save>
	       (conn->slave.window_widening_event_us << 1) +
   16c40:	6e20      	ldr	r0, [r4, #96]	; 0x60
	       (RADIO_TICKER_JITTER_US << 2) +
   16c42:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	       conn->slave.window_size_event_us;
   16c46:	6ea0      	ldr	r0, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   16c48:	4405      	add	r5, r0
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   16c4a:	3550      	adds	r5, #80	; 0x50
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
   16c4c:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16c50:	f000 0007 	and.w	r0, r0, #7
   16c54:	f7f8 fd68 	bl	f728 <radio_rx_ready_delay_get>
   16c58:	4405      	add	r5, r0
	hcto += addr_us_get(conn->phy_rx);
   16c5a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16c5e:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   16c62:	2802      	cmp	r0, #2
   16c64:	d03c      	beq.n	16ce0 <event_slave+0x17c>
   16c66:	2804      	cmp	r0, #4
   16c68:	d037      	beq.n	16cda <event_slave+0x176>
		return 40;
   16c6a:	2328      	movs	r3, #40	; 0x28
	hcto += addr_us_get(conn->phy_rx);
   16c6c:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   16c6e:	2101      	movs	r1, #1
   16c70:	f7f8 fd5c 	bl	f72c <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   16c74:	4428      	add	r0, r5
   16c76:	f7f8 fed5 	bl	fa24 <radio_tmr_hcto_configure>
				      conn->handle), ticks_at_expire) != 0) {
   16c7a:	8c21      	ldrh	r1, [r4, #32]
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   16c7c:	3107      	adds	r1, #7
   16c7e:	4632      	mov	r2, r6
   16c80:	b2c9      	uxtb	r1, r1
   16c82:	4620      	mov	r0, r4
   16c84:	f7ff fe34 	bl	168f0 <preempt_calc>
   16c88:	bb60      	cbnz	r0, 16ce4 <event_slave+0x180>
		ticker_status =
   16c8a:	2300      	movs	r3, #0
   16c8c:	4a1b      	ldr	r2, [pc, #108]	; (16cfc <event_slave+0x198>)
   16c8e:	4619      	mov	r1, r3
   16c90:	4618      	mov	r0, r3
   16c92:	f7fa f935 	bl	10f00 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16c96:	b350      	cbz	r0, 16cee <event_slave+0x18a>
   16c98:	2802      	cmp	r0, #2
   16c9a:	d028      	beq.n	16cee <event_slave+0x18a>
   16c9c:	4040      	eors	r0, r0
   16c9e:	f380 8811 	msr	BASEPRI, r0
   16ca2:	f04f 0004 	mov.w	r0, #4
   16ca6:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16ca8:	4040      	eors	r0, r0
   16caa:	f380 8811 	msr	BASEPRI, r0
   16cae:	f04f 0004 	mov.w	r0, #4
   16cb2:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   16cb4:	4040      	eors	r0, r0
   16cb6:	f380 8811 	msr	BASEPRI, r0
   16cba:	f04f 0004 	mov.w	r0, #4
   16cbe:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16cc0:	7fa1      	ldrb	r1, [r4, #30]
   16cc2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   16cc4:	7f63      	ldrb	r3, [r4, #29]
   16cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16cca:	9300      	str	r3, [sp, #0]
   16ccc:	f104 0317 	add.w	r3, r4, #23
   16cd0:	f104 001f 	add.w	r0, r4, #31
   16cd4:	f7fa fd2c 	bl	11730 <chan_sel_1>
   16cd8:	e793      	b.n	16c02 <event_slave+0x9e>
		return 376;
   16cda:	f44f 73bc 	mov.w	r3, #376	; 0x178
   16cde:	e7c5      	b.n	16c6c <event_slave+0x108>
		return 24;
   16ce0:	2318      	movs	r3, #24
   16ce2:	e7c3      	b.n	16c6c <event_slave+0x108>
		_radio.state = STATE_STOP;
   16ce4:	2204      	movs	r2, #4
   16ce6:	4b04      	ldr	r3, [pc, #16]	; (16cf8 <event_slave+0x194>)
   16ce8:	741a      	strb	r2, [r3, #16]
		radio_disable();
   16cea:	f7f8 fd31 	bl	f750 <radio_disable>
	packet_tx_enqueue(2);
   16cee:	2002      	movs	r0, #2
   16cf0:	f7fb fc28 	bl	12544 <packet_tx_enqueue>
}
   16cf4:	b003      	add	sp, #12
   16cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16cf8:	200014d4 	.word	0x200014d4
   16cfc:	00011ed9 	.word	0x00011ed9

00016d00 <event_scan>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16d00:	4b67      	ldr	r3, [pc, #412]	; (16ea0 <event_scan+0x1a0>)
   16d02:	7bdb      	ldrb	r3, [r3, #15]
   16d04:	2b00      	cmp	r3, #0
   16d06:	f040 808b 	bne.w	16e20 <event_scan+0x120>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   16d0a:	4b65      	ldr	r3, [pc, #404]	; (16ea0 <event_scan+0x1a0>)
   16d0c:	7b1b      	ldrb	r3, [r3, #12]
   16d0e:	b2db      	uxtb	r3, r3
   16d10:	2b06      	cmp	r3, #6
   16d12:	f040 808b 	bne.w	16e2c <event_scan+0x12c>
{
   16d16:	b570      	push	{r4, r5, r6, lr}
   16d18:	b08c      	sub	sp, #48	; 0x30
   16d1a:	4605      	mov	r5, r0
	_radio.role = ROLE_SCAN;
   16d1c:	4c60      	ldr	r4, [pc, #384]	; (16ea0 <event_scan+0x1a0>)
   16d1e:	2302      	movs	r3, #2
   16d20:	73e3      	strb	r3, [r4, #15]
	_radio.state = STATE_RX;
   16d22:	2101      	movs	r1, #1
   16d24:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_prepare = 0;
   16d26:	2200      	movs	r2, #0
   16d28:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   16d2a:	2306      	movs	r3, #6
   16d2c:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16d2e:	6060      	str	r0, [r4, #4]
	_radio.scanner.state = 0;
   16d30:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16d34:	f362 0341 	bfi	r3, r2, #1, #1
   16d38:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   16d3c:	f894 00dd 	ldrb.w	r0, [r4, #221]	; 0xdd
   16d40:	f000 0007 	and.w	r0, r0, #7
   16d44:	f7fb fb68 	bl	12418 <adv_scan_configure>
	chan_set(37 + _radio.scanner.chan++);
   16d48:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16d4c:	f3c3 0081 	ubfx	r0, r3, #2, #2
   16d50:	1c42      	adds	r2, r0, #1
   16d52:	f362 0383 	bfi	r3, r2, #2, #2
   16d56:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   16d5a:	3025      	adds	r0, #37	; 0x25
   16d5c:	f7fb fe22 	bl	129a4 <chan_set>
	if (_radio.scanner.chan == 3) {
   16d60:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16d64:	f003 030c 	and.w	r3, r3, #12
   16d68:	2b0c      	cmp	r3, #12
   16d6a:	d065      	beq.n	16e38 <event_scan+0x138>
	radio_tmr_tifs_set(RADIO_TIFS);
   16d6c:	2096      	movs	r0, #150	; 0x96
   16d6e:	f7f8 fdf7 	bl	f960 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   16d72:	2300      	movs	r3, #0
   16d74:	461a      	mov	r2, r3
   16d76:	4619      	mov	r1, r3
   16d78:	4618      	mov	r0, r3
   16d7a:	f7f8 fd47 	bl	f80c <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   16d7e:	4b48      	ldr	r3, [pc, #288]	; (16ea0 <event_scan+0x1a0>)
   16d80:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16d84:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16d88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   16d8c:	3008      	adds	r0, #8
   16d8e:	f7f8 fcbb 	bl	f708 <radio_pkt_rx_set>
	radio_rssi_measure();
   16d92:	f7f8 fd4b 	bl	f82c <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
   16d96:	f003 f835 	bl	19e04 <ctrl_rl_enabled>
   16d9a:	2800      	cmp	r0, #0
   16d9c:	d153      	bne.n	16e46 <event_scan+0x146>
	if (_radio.scanner.filter_policy) {
   16d9e:	4b40      	ldr	r3, [pc, #256]	; (16ea0 <event_scan+0x1a0>)
   16da0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   16da4:	f013 0f30 	tst.w	r3, #48	; 0x30
   16da8:	d165      	bne.n	16e76 <event_scan+0x176>
	remainder_us = radio_tmr_start(0,
   16daa:	4c3d      	ldr	r4, [pc, #244]	; (16ea0 <event_scan+0x1a0>)
   16dac:	68a2      	ldr	r2, [r4, #8]
   16dae:	f105 0109 	add.w	r1, r5, #9
   16db2:	2000      	movs	r0, #0
   16db4:	f7f8 fdda 	bl	f96c <radio_tmr_start>
	radio_tmr_end_capture();
   16db8:	f7f8 fe8a 	bl	fad0 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   16dbc:	462a      	mov	r2, r5
   16dbe:	2106      	movs	r1, #6
   16dc0:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   16dc4:	f7ff fd94 	bl	168f0 <preempt_calc>
   16dc8:	2800      	cmp	r0, #0
   16dca:	d15d      	bne.n	16e88 <event_scan+0x188>
				     _radio.scanner.ticks_window +
   16dcc:	4b34      	ldr	r3, [pc, #208]	; (16ea0 <event_scan+0x1a0>)
   16dce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16dd2:	3309      	adds	r3, #9
		ticker_status =
   16dd4:	f641 0287 	movw	r2, #6279	; 0x1887
   16dd8:	9208      	str	r2, [sp, #32]
   16dda:	4a32      	ldr	r2, [pc, #200]	; (16ea4 <event_scan+0x1a4>)
   16ddc:	9207      	str	r2, [sp, #28]
   16dde:	2204      	movs	r2, #4
   16de0:	9206      	str	r2, [sp, #24]
   16de2:	4931      	ldr	r1, [pc, #196]	; (16ea8 <event_scan+0x1a8>)
   16de4:	9105      	str	r1, [sp, #20]
   16de6:	2000      	movs	r0, #0
   16de8:	9004      	str	r0, [sp, #16]
   16dea:	9003      	str	r0, [sp, #12]
   16dec:	9002      	str	r0, [sp, #8]
   16dee:	9001      	str	r0, [sp, #4]
   16df0:	9300      	str	r3, [sp, #0]
   16df2:	462b      	mov	r3, r5
   16df4:	4601      	mov	r1, r0
   16df6:	f7f9 ff67 	bl	10cc8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16dfa:	b108      	cbz	r0, 16e00 <event_scan+0x100>
   16dfc:	2802      	cmp	r0, #2
   16dfe:	d149      	bne.n	16e94 <event_scan+0x194>
			ticker_status =
   16e00:	2300      	movs	r3, #0
   16e02:	4a2a      	ldr	r2, [pc, #168]	; (16eac <event_scan+0x1ac>)
   16e04:	4619      	mov	r1, r3
   16e06:	4618      	mov	r0, r3
   16e08:	f7fa f87a 	bl	10f00 <ticker_job_idle_get>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16e0c:	2800      	cmp	r0, #0
   16e0e:	d03f      	beq.n	16e90 <event_scan+0x190>
   16e10:	2802      	cmp	r0, #2
   16e12:	d03d      	beq.n	16e90 <event_scan+0x190>
   16e14:	4040      	eors	r0, r0
   16e16:	f380 8811 	msr	BASEPRI, r0
   16e1a:	f04f 0004 	mov.w	r0, #4
   16e1e:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16e20:	4040      	eors	r0, r0
   16e22:	f380 8811 	msr	BASEPRI, r0
   16e26:	f04f 0004 	mov.w	r0, #4
   16e2a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   16e2c:	4040      	eors	r0, r0
   16e2e:	f380 8811 	msr	BASEPRI, r0
   16e32:	f04f 0004 	mov.w	r0, #4
   16e36:	df02      	svc	2
		_radio.scanner.chan = 0;
   16e38:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   16e3c:	f36f 0283 	bfc	r2, #2, #2
   16e40:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
   16e44:	e792      	b.n	16d6c <event_scan+0x6c>
			ctrl_filter_get(!!(_radio.scanner.filter_policy & 0x1));
   16e46:	4b16      	ldr	r3, [pc, #88]	; (16ea0 <event_scan+0x1a0>)
   16e48:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		struct ll_filter *filter =
   16e4c:	f3c0 1000 	ubfx	r0, r0, #4, #1
   16e50:	f002 fdda 	bl	19a08 <ctrl_filter_get>
   16e54:	4604      	mov	r4, r0
		u8_t count, *irks = ctrl_irks_get(&count);
   16e56:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   16e5a:	f002 fd4f 	bl	198fc <ctrl_irks_get>
   16e5e:	4606      	mov	r6, r0
		radio_filter_configure(filter->enable_bitmask,
   16e60:	1ca2      	adds	r2, r4, #2
   16e62:	7861      	ldrb	r1, [r4, #1]
   16e64:	7820      	ldrb	r0, [r4, #0]
   16e66:	f7f8 fd03 	bl	f870 <radio_filter_configure>
		radio_ar_configure(count, irks);
   16e6a:	4631      	mov	r1, r6
   16e6c:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   16e70:	f7f8 feda 	bl	fc28 <radio_ar_configure>
   16e74:	e799      	b.n	16daa <event_scan+0xaa>
		struct ll_filter *wl = ctrl_filter_get(true);
   16e76:	2001      	movs	r0, #1
   16e78:	f002 fdc6 	bl	19a08 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   16e7c:	1c82      	adds	r2, r0, #2
   16e7e:	7841      	ldrb	r1, [r0, #1]
   16e80:	7800      	ldrb	r0, [r0, #0]
   16e82:	f7f8 fcf5 	bl	f870 <radio_filter_configure>
   16e86:	e790      	b.n	16daa <event_scan+0xaa>
		_radio.state = STATE_STOP;
   16e88:	2204      	movs	r2, #4
   16e8a:	7422      	strb	r2, [r4, #16]
		radio_disable();
   16e8c:	f7f8 fc60 	bl	f750 <radio_disable>
}
   16e90:	b00c      	add	sp, #48	; 0x30
   16e92:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16e94:	4040      	eors	r0, r0
   16e96:	f380 8811 	msr	BASEPRI, r0
   16e9a:	f04f 0004 	mov.w	r0, #4
   16e9e:	df02      	svc	2
   16ea0:	200014d4 	.word	0x200014d4
   16ea4:	00011a1d 	.word	0x00011a1d
   16ea8:	00012201 	.word	0x00012201
   16eac:	00011ed9 	.word	0x00011ed9

00016eb0 <access_addr_get>:
{
   16eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16eb2:	b083      	sub	sp, #12
	retry = 3;
   16eb4:	2403      	movs	r4, #3
   16eb6:	e059      	b.n	16f6c <access_addr_get+0xbc>
	LL_ASSERT(retry);
   16eb8:	4040      	eors	r0, r0
   16eba:	f380 8811 	msr	BASEPRI, r0
   16ebe:	f04f 0004 	mov.w	r0, #4
   16ec2:	df02      	svc	2
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   16ec4:	9900      	ldr	r1, [sp, #0]
   16ec6:	0fc9      	lsrs	r1, r1, #31
	transitions = 0;
   16ec8:	4607      	mov	r7, r0
	bit_idx = 31;
   16eca:	221f      	movs	r2, #31
	consecutive_cnt = 1;
   16ecc:	2501      	movs	r5, #1
	while (bit_idx--) {
   16ece:	e010      	b.n	16ef2 <access_addr_get+0x42>
			consecutive_cnt++;
   16ed0:	3501      	adds	r5, #1
   16ed2:	b2ed      	uxtb	r5, r5
   16ed4:	e01c      	b.n	16f10 <access_addr_get+0x60>
		    ((bit_idx < 28) && (transitions < 1)) ||
   16ed6:	b9ff      	cbnz	r7, 16f18 <access_addr_get+0x68>
			if (consecutive_bit) {
   16ed8:	b319      	cbz	r1, 16f22 <access_addr_get+0x72>
				access_addr &= ~BIT(bit_idx);
   16eda:	2201      	movs	r2, #1
   16edc:	409a      	lsls	r2, r3
   16ede:	ea26 0602 	bic.w	r6, r6, r2
   16ee2:	9600      	str	r6, [sp, #0]
				consecutive_bit = 0;
   16ee4:	4601      	mov	r1, r0
			transitions++;
   16ee6:	3701      	adds	r7, #1
   16ee8:	b2ff      	uxtb	r7, r7
			consecutive_cnt = 1;
   16eea:	2501      	movs	r5, #1
	while (bit_idx--) {
   16eec:	461a      	mov	r2, r3
		if (transitions > 24) {
   16eee:	2f18      	cmp	r7, #24
   16ef0:	d81d      	bhi.n	16f2e <access_addr_get+0x7e>
	while (bit_idx--) {
   16ef2:	1e53      	subs	r3, r2, #1
   16ef4:	b2db      	uxtb	r3, r3
   16ef6:	b32a      	cbz	r2, 16f44 <access_addr_get+0x94>
		bit = (access_addr >> bit_idx) & 0x01;
   16ef8:	9e00      	ldr	r6, [sp, #0]
   16efa:	469e      	mov	lr, r3
   16efc:	fa26 f203 	lsr.w	r2, r6, r3
   16f00:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   16f04:	4291      	cmp	r1, r2
   16f06:	d0e3      	beq.n	16ed0 <access_addr_get+0x20>
			transitions++;
   16f08:	3701      	adds	r7, #1
   16f0a:	b2ff      	uxtb	r7, r7
			consecutive_bit = bit;
   16f0c:	4611      	mov	r1, r2
			consecutive_cnt = 1;
   16f0e:	2501      	movs	r5, #1
		if ((consecutive_cnt > 6) ||
   16f10:	2d06      	cmp	r5, #6
   16f12:	d8e1      	bhi.n	16ed8 <access_addr_get+0x28>
   16f14:	2b1b      	cmp	r3, #27
   16f16:	d9de      	bls.n	16ed6 <access_addr_get+0x26>
		    ((bit_idx < 28) && (transitions < 1)) ||
   16f18:	2b1a      	cmp	r3, #26
   16f1a:	d8e7      	bhi.n	16eec <access_addr_get+0x3c>
		    ((bit_idx < 27) && (transitions < 2))) {
   16f1c:	2f01      	cmp	r7, #1
   16f1e:	d8e5      	bhi.n	16eec <access_addr_get+0x3c>
   16f20:	e7da      	b.n	16ed8 <access_addr_get+0x28>
				access_addr |= BIT(bit_idx);
   16f22:	2101      	movs	r1, #1
   16f24:	fa01 f203 	lsl.w	r2, r1, r3
   16f28:	4316      	orrs	r6, r2
   16f2a:	9600      	str	r6, [sp, #0]
   16f2c:	e7db      	b.n	16ee6 <access_addr_get+0x36>
			if (consecutive_bit) {
   16f2e:	2900      	cmp	r1, #0
   16f30:	d02d      	beq.n	16f8e <access_addr_get+0xde>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   16f32:	f10e 0e01 	add.w	lr, lr, #1
   16f36:	2301      	movs	r3, #1
   16f38:	fa03 f30e 	lsl.w	r3, r3, lr
   16f3c:	425b      	negs	r3, r3
   16f3e:	9a00      	ldr	r2, [sp, #0]
   16f40:	4013      	ands	r3, r2
   16f42:	9300      	str	r3, [sp, #0]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   16f44:	4b19      	ldr	r3, [pc, #100]	; (16fac <access_addr_get+0xfc>)
   16f46:	9a00      	ldr	r2, [sp, #0]
   16f48:	4053      	eors	r3, r2
   16f4a:	a802      	add	r0, sp, #8
   16f4c:	f840 3d04 	str.w	r3, [r0, #-4]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   16f50:	2104      	movs	r1, #4
   16f52:	f7f8 fa6c 	bl	f42e <util_ones_count_get>
   16f56:	2801      	cmp	r0, #1
   16f58:	d908      	bls.n	16f6c <access_addr_get+0xbc>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   16f5a:	9800      	ldr	r0, [sp, #0]
   16f5c:	b283      	uxth	r3, r0
   16f5e:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   16f62:	d120      	bne.n	16fa6 <access_addr_get+0xf6>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   16f64:	b2c3      	uxtb	r3, r0
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   16f66:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   16f6a:	d11c      	bne.n	16fa6 <access_addr_get+0xf6>
	LL_ASSERT(retry);
   16f6c:	2c00      	cmp	r4, #0
   16f6e:	d0a3      	beq.n	16eb8 <access_addr_get+0x8>
	retry--;
   16f70:	3c01      	subs	r4, #1
   16f72:	b2e4      	uxtb	r4, r4
	len = sizeof(u32_t);
   16f74:	2004      	movs	r0, #4
	while (len) {
   16f76:	2800      	cmp	r0, #0
   16f78:	d0a4      	beq.n	16ec4 <access_addr_get+0x14>
		len = rand_get(len, (u8_t *)&access_addr);
   16f7a:	4669      	mov	r1, sp
   16f7c:	f7f9 fc1c 	bl	107b8 <rand_get>
   16f80:	b2c0      	uxtb	r0, r0
		if (len) {
   16f82:	2800      	cmp	r0, #0
   16f84:	d0f7      	beq.n	16f76 <access_addr_get+0xc6>
   16f86:	bf20      	wfe
  __ASM volatile ("sev");
   16f88:	bf40      	sev
  __ASM volatile ("wfe");
   16f8a:	bf20      	wfe
   16f8c:	e7f3      	b.n	16f76 <access_addr_get+0xc6>
				access_addr |= (BIT(bit_idx + 1) - 1);
   16f8e:	f10e 0e01 	add.w	lr, lr, #1
   16f92:	2301      	movs	r3, #1
   16f94:	fa03 fe0e 	lsl.w	lr, r3, lr
   16f98:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   16f9c:	9b00      	ldr	r3, [sp, #0]
   16f9e:	ea43 030e 	orr.w	r3, r3, lr
   16fa2:	9300      	str	r3, [sp, #0]
   16fa4:	e7ce      	b.n	16f44 <access_addr_get+0x94>
}
   16fa6:	b003      	add	sp, #12
   16fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16faa:	bf00      	nop
   16fac:	8e89bed6 	.word	0x8e89bed6

00016fb0 <isr_rx_scan>:
{
   16fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fb4:	b08f      	sub	sp, #60	; 0x3c
   16fb6:	4617      	mov	r7, r2
   16fb8:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
   16fbc:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   16fc0:	4b99      	ldr	r3, [pc, #612]	; (17228 <isr_rx_scan+0x278>)
   16fc2:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16fc6:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
   16fca:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
	pdu_adv_rx = (struct pdu_adv *)
   16fce:	f104 0808 	add.w	r8, r4, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   16fd2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   16fd6:	b15b      	cbz	r3, 16ff0 <isr_rx_scan+0x40>
   16fd8:	4b93      	ldr	r3, [pc, #588]	; (17228 <isr_rx_scan+0x278>)
   16fda:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   16fde:	b34b      	cbz	r3, 17034 <isr_rx_scan+0x84>
				      (_radio.fc_req == _radio.fc_ack)) &&
   16fe0:	4a91      	ldr	r2, [pc, #580]	; (17228 <isr_rx_scan+0x278>)
   16fe2:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   16fe6:	b2db      	uxtb	r3, r3
   16fe8:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   16fec:	4293      	cmp	r3, r2
   16fee:	d021      	beq.n	17034 <isr_rx_scan+0x84>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   16ff0:	7a23      	ldrb	r3, [r4, #8]
   16ff2:	f013 030f 	ands.w	r3, r3, #15
   16ff6:	f000 82e9 	beq.w	175cc <isr_rx_scan+0x61c>
   16ffa:	2b06      	cmp	r3, #6
   16ffc:	f000 82e6 	beq.w	175cc <isr_rx_scan+0x61c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   17000:	2b00      	cmp	r3, #0
   17002:	f000 83d9 	beq.w	177b8 <isr_rx_scan+0x808>
   17006:	2b01      	cmp	r3, #1
   17008:	f000 8355 	beq.w	176b6 <isr_rx_scan+0x706>
	bool dir_report = false;
   1700c:	f04f 0900 	mov.w	r9, #0
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   17010:	7a23      	ldrb	r3, [r4, #8]
   17012:	f003 030f 	and.w	r3, r3, #15
					&dir_report))) ||
   17016:	2b02      	cmp	r3, #2
   17018:	f000 83d0 	beq.w	177bc <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1701c:	2b06      	cmp	r3, #6
   1701e:	f000 83cd 	beq.w	177bc <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   17022:	2b07      	cmp	r3, #7
   17024:	f000 839f 	beq.w	17766 <isr_rx_scan+0x7b6>
		   (_radio.scanner.phy)) ||
   17028:	2b04      	cmp	r3, #4
   1702a:	f000 83a3 	beq.w	17774 <isr_rx_scan+0x7c4>
		return 1;
   1702e:	f04f 0a01 	mov.w	sl, #1
   17032:	e3cb      	b.n	177cc <isr_rx_scan+0x81c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   17034:	4b7c      	ldr	r3, [pc, #496]	; (17228 <isr_rx_scan+0x278>)
   17036:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1703a:	f013 0f10 	tst.w	r3, #16
   1703e:	d072      	beq.n	17126 <isr_rx_scan+0x176>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   17040:	7a23      	ldrb	r3, [r4, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   17042:	f013 030f 	ands.w	r3, r3, #15
   17046:	f000 80da 	beq.w	171fe <isr_rx_scan+0x24e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   1704a:	2b01      	cmp	r3, #1
   1704c:	f000 808f 	beq.w	1716e <isr_rx_scan+0x1be>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   17050:	2300      	movs	r3, #0
				      (_radio.fc_req == _radio.fc_ack)) &&
   17052:	2b00      	cmp	r3, #0
   17054:	d0cc      	beq.n	16ff0 <isr_rx_scan+0x40>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   17056:	f7f8 fd4d 	bl	faf4 <radio_tmr_end_get>
   1705a:	f200 2916 	addw	r9, r0, #534	; 0x216
	     (TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   1705e:	4b72      	ldr	r3, [pc, #456]	; (17228 <isr_rx_scan+0x278>)
   17060:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   17064:	4871      	ldr	r0, [pc, #452]	; (1722c <isr_rx_scan+0x27c>)
   17066:	fba3 0100 	umull	r0, r1, r3, r0
   1706a:	2207      	movs	r2, #7
   1706c:	fb02 1103 	mla	r1, r2, r3, r1
   17070:	a36b      	add	r3, pc, #428	; (adr r3, 17220 <isr_rx_scan+0x270>)
   17072:	e9d3 2300 	ldrd	r2, r3, [r3]
   17076:	f7ea f841 	bl	10fc <__aeabi_uldivmod>
   1707a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   1707e:	4581      	cmp	r9, r0
   17080:	d2b6      	bcs.n	16ff0 <isr_rx_scan+0x40>
	if (_radio.packet_rx_acquire >=
   17082:	4b69      	ldr	r3, [pc, #420]	; (17228 <isr_rx_scan+0x278>)
   17084:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17088:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1708c:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1708e:	429a      	cmp	r2, r3
   17090:	f0c0 80b7 	bcc.w	17202 <isr_rx_scan+0x252>
			_radio.packet_rx_last);
   17094:	4b64      	ldr	r3, [pc, #400]	; (17228 <isr_rx_scan+0x278>)
   17096:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1709a:	1ad3      	subs	r3, r2, r3
   1709c:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1709e:	2b03      	cmp	r3, #3
   170a0:	f240 80b9 	bls.w	17216 <isr_rx_scan+0x266>
	return _radio.packet_rx[_radio.packet_rx_last];
   170a4:	4b60      	ldr	r3, [pc, #384]	; (17228 <isr_rx_scan+0x278>)
   170a6:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   170aa:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   170ae:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   170b2:	f1b9 0f00 	cmp.w	r9, #0
   170b6:	f000 839a 	beq.w	177ee <isr_rx_scan+0x83e>
		_radio.state = STATE_STOP;
   170ba:	f8df a16c 	ldr.w	sl, [pc, #364]	; 17228 <isr_rx_scan+0x278>
   170be:	2304      	movs	r3, #4
   170c0:	f88a 3010 	strb.w	r3, [sl, #16]
		conn = _radio.scanner.conn;
   170c4:	f8da 80fc 	ldr.w	r8, [sl, #252]	; 0xfc
		_radio.scanner.conn = NULL;
   170c8:	2300      	movs	r3, #0
   170ca:	f8ca 30fc 	str.w	r3, [sl, #252]	; 0xfc
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   170ce:	f7f8 fb91 	bl	f7f4 <radio_pkt_scratch_get>
   170d2:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   170d4:	7803      	ldrb	r3, [r0, #0]
   170d6:	2205      	movs	r2, #5
   170d8:	f362 0303 	bfi	r3, r2, #0, #4
			pdu_adv_tx->chan_sel = 1;
   170dc:	b2db      	uxtb	r3, r3
   170de:	f043 0320 	orr.w	r3, r3, #32
   170e2:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   170e4:	7a23      	ldrb	r3, [r4, #8]
   170e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   170ea:	7802      	ldrb	r2, [r0, #0]
   170ec:	f363 12c7 	bfi	r2, r3, #7, #1
   170f0:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
   170f2:	2322      	movs	r3, #34	; 0x22
   170f4:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   170f6:	4628      	mov	r0, r5
   170f8:	f002 fbde 	bl	198b8 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   170fc:	f89a 30de 	ldrb.w	r3, [sl, #222]	; 0xde
   17100:	f013 0f01 	tst.w	r3, #1
   17104:	f000 8098 	beq.w	17238 <isr_rx_scan+0x288>
   17108:	2800      	cmp	r0, #0
   1710a:	f000 8095 	beq.w	17238 <isr_rx_scan+0x288>
			pdu_adv_tx->tx_addr = 1;
   1710e:	7832      	ldrb	r2, [r6, #0]
   17110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   17114:	4633      	mov	r3, r6
   17116:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   1711a:	2206      	movs	r2, #6
   1711c:	4601      	mov	r1, r0
   1711e:	4618      	mov	r0, r3
   17120:	f7e9 f8ce 	bl	2c0 <memcpy>
   17124:	e096      	b.n	17254 <isr_rx_scan+0x2a4>
	if (rl_idx != FILTER_IDX_NONE) {
   17126:	2dff      	cmp	r5, #255	; 0xff
   17128:	d00a      	beq.n	17140 <isr_rx_scan+0x190>
		return (rl_idx == _radio.scanner.rl_idx);
   1712a:	4b3f      	ldr	r3, [pc, #252]	; (17228 <isr_rx_scan+0x278>)
   1712c:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
   17130:	429d      	cmp	r5, r3
   17132:	bf14      	ite	ne
   17134:	2300      	movne	r3, #0
   17136:	2301      	moveq	r3, #1
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   17138:	2b00      	cmp	r3, #0
   1713a:	d181      	bne.n	17040 <isr_rx_scan+0x90>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1713c:	2300      	movs	r3, #0
   1713e:	e788      	b.n	17052 <isr_rx_scan+0xa2>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   17140:	4b39      	ldr	r3, [pc, #228]	; (17228 <isr_rx_scan+0x278>)
   17142:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   17146:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1714a:	7a23      	ldrb	r3, [r4, #8]
   1714c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17150:	429a      	cmp	r2, r3
   17152:	d001      	beq.n	17158 <isr_rx_scan+0x1a8>
   17154:	2300      	movs	r3, #0
   17156:	e7ef      	b.n	17138 <isr_rx_scan+0x188>
		(memcmp(&_radio.scanner.adv_addr[0],
   17158:	2206      	movs	r2, #6
   1715a:	f108 0102 	add.w	r1, r8, #2
   1715e:	4834      	ldr	r0, [pc, #208]	; (17230 <isr_rx_scan+0x280>)
   17160:	f013 fb16 	bl	2a790 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   17164:	b908      	cbnz	r0, 1716a <isr_rx_scan+0x1ba>
   17166:	2301      	movs	r3, #1
   17168:	e7e6      	b.n	17138 <isr_rx_scan+0x188>
   1716a:	2300      	movs	r3, #0
   1716c:	e7e4      	b.n	17138 <isr_rx_scan+0x188>
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   1716e:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   17170:	f108 0a08 	add.w	sl, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   17174:	462a      	mov	r2, r5
   17176:	4651      	mov	r1, sl
   17178:	09c0      	lsrs	r0, r0, #7
   1717a:	f002 fe17 	bl	19dac <ctrl_rl_addr_resolve>
   1717e:	4681      	mov	r9, r0
   17180:	b9d0      	cbnz	r0, 171b8 <isr_rx_scan+0x208>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   17182:	4b29      	ldr	r3, [pc, #164]	; (17228 <isr_rx_scan+0x278>)
   17184:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   17188:	f013 0f01 	tst.w	r3, #1
   1718c:	d119      	bne.n	171c2 <isr_rx_scan+0x212>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   1718e:	4b26      	ldr	r3, [pc, #152]	; (17228 <isr_rx_scan+0x278>)
   17190:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   17194:	7a23      	ldrb	r3, [r4, #8]
   17196:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   17198:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1719c:	d017      	beq.n	171ce <isr_rx_scan+0x21e>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   1719e:	4b22      	ldr	r3, [pc, #136]	; (17228 <isr_rx_scan+0x278>)
   171a0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   171a4:	f013 0f20 	tst.w	r3, #32
   171a8:	d003      	beq.n	171b2 <isr_rx_scan+0x202>
   171aa:	f994 3008 	ldrsb.w	r3, [r4, #8]
   171ae:	2b00      	cmp	r3, #0
   171b0:	db17      	blt.n	171e2 <isr_rx_scan+0x232>
			BDADDR_SIZE) == 0))) ||
   171b2:	f1b9 0f00 	cmp.w	r9, #0
   171b6:	d11d      	bne.n	171f4 <isr_rx_scan+0x244>
		((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   171b8:	f1b9 0f00 	cmp.w	r9, #0
   171bc:	d01d      	beq.n	171fa <isr_rx_scan+0x24a>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   171be:	2301      	movs	r3, #1
   171c0:	e747      	b.n	17052 <isr_rx_scan+0xa2>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   171c2:	4628      	mov	r0, r5
   171c4:	f002 fb78 	bl	198b8 <ctrl_lrpa_get>
   171c8:	2800      	cmp	r0, #0
   171ca:	d1f5      	bne.n	171b8 <isr_rx_scan+0x208>
   171cc:	e7df      	b.n	1718e <isr_rx_scan+0x1de>
		(memcmp(&_radio.scanner.init_addr[0],
   171ce:	2206      	movs	r2, #6
   171d0:	4651      	mov	r1, sl
   171d2:	4818      	ldr	r0, [pc, #96]	; (17234 <isr_rx_scan+0x284>)
   171d4:	f013 fadc 	bl	2a790 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   171d8:	2800      	cmp	r0, #0
   171da:	d1e0      	bne.n	1719e <isr_rx_scan+0x1ee>
			BDADDR_SIZE) == 0))) ||
   171dc:	f04f 0901 	mov.w	r9, #1
   171e0:	e7ea      	b.n	171b8 <isr_rx_scan+0x208>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   171e2:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   171e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   171ea:	2b40      	cmp	r3, #64	; 0x40
   171ec:	d1e1      	bne.n	171b2 <isr_rx_scan+0x202>
		return true;
   171ee:	f04f 0901 	mov.w	r9, #1
   171f2:	e7de      	b.n	171b2 <isr_rx_scan+0x202>
			BDADDR_SIZE) == 0))) ||
   171f4:	f04f 0901 	mov.w	r9, #1
   171f8:	e7de      	b.n	171b8 <isr_rx_scan+0x208>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   171fa:	2300      	movs	r3, #0
   171fc:	e729      	b.n	17052 <isr_rx_scan+0xa2>
   171fe:	2301      	movs	r3, #1
   17200:	e727      	b.n	17052 <isr_rx_scan+0xa2>
		return (_radio.packet_rx_count -
   17202:	4909      	ldr	r1, [pc, #36]	; (17228 <isr_rx_scan+0x278>)
   17204:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17208:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1720c:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1720e:	fa52 f383 	uxtab	r3, r2, r3
   17212:	b2db      	uxtb	r3, r3
   17214:	e743      	b.n	1709e <isr_rx_scan+0xee>
		return 0;
   17216:	f04f 0900 	mov.w	r9, #0
   1721a:	e74a      	b.n	170b2 <isr_rx_scan+0x102>
   1721c:	f3af 8000 	nop.w
   17220:	3b9aca00 	.word	0x3b9aca00
   17224:	00000000 	.word	0x00000000
   17228:	200014d4 	.word	0x200014d4
   1722c:	1afd498d 	.word	0x1afd498d
   17230:	200015ba 	.word	0x200015ba
   17234:	200015b4 	.word	0x200015b4
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   17238:	4962      	ldr	r1, [pc, #392]	; (173c4 <isr_rx_scan+0x414>)
   1723a:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   1723e:	09db      	lsrs	r3, r3, #7
   17240:	7832      	ldrb	r2, [r6, #0]
   17242:	f363 1286 	bfi	r2, r3, #6, #1
   17246:	4630      	mov	r0, r6
   17248:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   1724c:	2206      	movs	r2, #6
   1724e:	31e0      	adds	r1, #224	; 0xe0
   17250:	f7e9 f836 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
   17254:	f106 0308 	add.w	r3, r6, #8
   17258:	930b      	str	r3, [sp, #44]	; 0x2c
   1725a:	2206      	movs	r2, #6
   1725c:	f104 010a 	add.w	r1, r4, #10
   17260:	4618      	mov	r0, r3
   17262:	f7e9 f82d 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
   17266:	2204      	movs	r2, #4
   17268:	f108 0110 	add.w	r1, r8, #16
   1726c:	f106 000e 	add.w	r0, r6, #14
   17270:	f7e9 f826 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
   17274:	2203      	movs	r2, #3
   17276:	f108 0114 	add.w	r1, r8, #20
   1727a:	f106 0012 	add.w	r0, r6, #18
   1727e:	f7e9 f81f 	bl	2c0 <memcpy>
		pdu_adv_tx->payload.connect_ind.lldata.win_size = 1;
   17282:	2301      	movs	r3, #1
   17284:	7573      	strb	r3, [r6, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   17286:	4b4f      	ldr	r3, [pc, #316]	; (173c4 <isr_rx_scan+0x414>)
   17288:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
		conn_interval_us =
   1728c:	f240 42e2 	movw	r2, #1250	; 0x4e2
   17290:	fb02 fb03 	mul.w	fp, r2, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   17294:	f7f8 fc2e 	bl	faf4 <radio_tmr_end_get>
   17298:	f500 6adb 	add.w	sl, r0, #1752	; 0x6d8
		if (!_radio.remainder_anchor ||
   1729c:	4b49      	ldr	r3, [pc, #292]	; (173c4 <isr_rx_scan+0x414>)
   1729e:	689b      	ldr	r3, [r3, #8]
   172a0:	2b00      	cmp	r3, #0
   172a2:	dd75      	ble.n	17390 <isr_rx_scan+0x3e0>
		if (_radio.scanner.win_offset_us == 0) {
   172a4:	4b47      	ldr	r3, [pc, #284]	; (173c4 <isr_rx_scan+0x414>)
   172a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   172aa:	2b00      	cmp	r3, #0
   172ac:	d174      	bne.n	17398 <isr_rx_scan+0x3e8>
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
   172ae:	75b3      	strb	r3, [r6, #22]
   172b0:	75f3      	strb	r3, [r6, #23]
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   172b2:	2100      	movs	r1, #0
   172b4:	4608      	mov	r0, r1
   172b6:	f7f8 fa33 	bl	f720 <radio_tx_ready_delay_get>
   172ba:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   172be:	2100      	movs	r1, #0
   172c0:	4608      	mov	r0, r1
   172c2:	f7f8 fa2f 	bl	f724 <radio_tx_chain_delay_get>
   172c6:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us += TICKER_TICKS_TO_US(1);
   172ca:	f10a 031e 	add.w	r3, sl, #30
   172ce:	930c      	str	r3, [sp, #48]	; 0x30
			_radio.scanner.conn_interval;
   172d0:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 173c4 <isr_rx_scan+0x414>
		pdu_adv_tx->payload.connect_ind.lldata.interval =
   172d4:	f8ba 30f0 	ldrh.w	r3, [sl, #240]	; 0xf0
   172d8:	8333      	strh	r3, [r6, #24]
		pdu_adv_tx->payload.connect_ind.lldata.latency =
   172da:	f8ba 30f2 	ldrh.w	r3, [sl, #242]	; 0xf2
   172de:	8373      	strh	r3, [r6, #26]
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
   172e0:	f8ba 30f4 	ldrh.w	r3, [sl, #244]	; 0xf4
   172e4:	83b3      	strh	r3, [r6, #28]
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
   172e6:	2205      	movs	r2, #5
   172e8:	f108 0117 	add.w	r1, r8, #23
   172ec:	f106 001e 	add.w	r0, r6, #30
   172f0:	f7e8 ffe6 	bl	2c0 <memcpy>
			conn->data_chan_hop;
   172f4:	f898 201e 	ldrb.w	r2, [r8, #30]
		pdu_adv_tx->payload.connect_ind.lldata.hop =
   172f8:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   172fc:	f362 0304 	bfi	r3, r2, #0, #5
   17300:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
   17304:	f89a 211c 	ldrb.w	r2, [sl, #284]	; 0x11c
   17308:	b2db      	uxtb	r3, r3
   1730a:	f362 1347 	bfi	r3, r2, #5, #3
   1730e:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		radio_switch_complete_and_disable();
   17312:	f7f8 fa83 	bl	f81c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   17316:	4630      	mov	r0, r6
   17318:	f7f8 f9fc 	bl	f714 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1731c:	f7f8 fa32 	bl	f784 <radio_is_ready>
   17320:	4682      	mov	sl, r0
   17322:	2800      	cmp	r0, #0
   17324:	d148      	bne.n	173b8 <isr_rx_scan+0x408>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   17326:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1732a:	4b26      	ldr	r3, [pc, #152]	; (173c4 <isr_rx_scan+0x414>)
   1732c:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   17330:	4640      	mov	r0, r8
   17332:	f7f8 f838 	bl	f3a6 <mem_index_get>
   17336:	f8a8 0020 	strh.w	r0, [r8, #32]
		radio_pdu_node_rx->hdr.handle = conn->handle;
   1733a:	f8a9 0006 	strh.w	r0, [r9, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1733e:	2206      	movs	r2, #6
   17340:	f889 2004 	strb.w	r2, [r9, #4]
		radio_le_conn_cmplt->status = 0x00;
   17344:	2300      	movs	r3, #0
   17346:	f889 300b 	strb.w	r3, [r9, #11]
		radio_le_conn_cmplt->role = 0x00;
   1734a:	f889 300c 	strb.w	r3, [r9, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   1734e:	4631      	mov	r1, r6
   17350:	f811 3b02 	ldrb.w	r3, [r1], #2
   17354:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17358:	f889 301a 	strb.w	r3, [r9, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   1735c:	f109 001b 	add.w	r0, r9, #27
   17360:	f7e8 ffae 	bl	2c0 <memcpy>
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   17364:	b397      	cbz	r7, 173cc <isr_rx_scan+0x41c>
   17366:	2dff      	cmp	r5, #255	; 0xff
   17368:	d030      	beq.n	173cc <isr_rx_scan+0x41c>
			ll_rl_id_addr_get(rl_idx,
   1736a:	f109 020e 	add.w	r2, r9, #14
   1736e:	f109 010d 	add.w	r1, r9, #13
   17372:	4628      	mov	r0, r5
   17374:	f002 fc96 	bl	19ca4 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   17378:	f899 300d 	ldrb.w	r3, [r9, #13]
   1737c:	3302      	adds	r3, #2
   1737e:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   17382:	2206      	movs	r2, #6
   17384:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17386:	f109 0014 	add.w	r0, r9, #20
   1738a:	f7e8 ff99 	bl	2c0 <memcpy>
   1738e:	e02e      	b.n	173ee <isr_rx_scan+0x43e>
			conn_offset_us -= TICKER_TICKS_TO_US(1);
   17390:	f200 6aba 	addw	sl, r0, #1722	; 0x6ba
   17394:	e786      	b.n	172a4 <isr_rx_scan+0x2f4>
				conn_space_us += conn_interval_us;
   17396:	445b      	add	r3, fp
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   17398:	2b00      	cmp	r3, #0
   1739a:	dbfc      	blt.n	17396 <isr_rx_scan+0x3e6>
   1739c:	459a      	cmp	sl, r3
   1739e:	d8fa      	bhi.n	17396 <isr_rx_scan+0x3e6>
				(conn_space_us - conn_offset_us) / 1250;
   173a0:	eba3 020a 	sub.w	r2, r3, sl
   173a4:	4908      	ldr	r1, [pc, #32]	; (173c8 <isr_rx_scan+0x418>)
   173a6:	fba1 1202 	umull	r1, r2, r1, r2
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
   173aa:	0a92      	lsrs	r2, r2, #10
   173ac:	82f2      	strh	r2, [r6, #22]
			pdu_adv_tx->payload.connect_ind.lldata.win_size++;
   173ae:	7d72      	ldrb	r2, [r6, #21]
   173b0:	3201      	adds	r2, #1
   173b2:	7572      	strb	r2, [r6, #21]
   173b4:	469a      	mov	sl, r3
   173b6:	e77c      	b.n	172b2 <isr_rx_scan+0x302>
		LL_ASSERT(!radio_is_ready());
   173b8:	4040      	eors	r0, r0
   173ba:	f380 8811 	msr	BASEPRI, r0
   173be:	f04f 0004 	mov.w	r0, #4
   173c2:	df02      	svc	2
   173c4:	200014d4 	.word	0x200014d4
   173c8:	d1b71759 	.word	0xd1b71759
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   173cc:	2206      	movs	r2, #6
   173ce:	2100      	movs	r1, #0
   173d0:	f109 0014 	add.w	r0, r9, #20
   173d4:	f013 fa70 	bl	2a8b8 <memset>
				pdu_adv_tx->rx_addr;
   173d8:	7833      	ldrb	r3, [r6, #0]
   173da:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   173de:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   173e2:	2206      	movs	r2, #6
   173e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   173e6:	f109 000e 	add.w	r0, r9, #14
   173ea:	f7e8 ff69 	bl	2c0 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   173ee:	4dce      	ldr	r5, [pc, #824]	; (17728 <isr_rx_scan+0x778>)
   173f0:	f8b5 30f0 	ldrh.w	r3, [r5, #240]	; 0xf0
   173f4:	f8a9 3021 	strh.w	r3, [r9, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
   173f8:	f8b5 30f2 	ldrh.w	r3, [r5, #242]	; 0xf2
   173fc:	f8a9 3023 	strh.w	r3, [r9, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   17400:	f8b5 30f4 	ldrh.w	r3, [r5, #244]	; 0xf4
   17404:	f8a9 3025 	strh.w	r3, [r9, #37]	; 0x25
			pdu_adv_tx->payload.connect_ind.lldata.sca;
   17408:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   1740c:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   17410:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
		rx_fc_lock(conn->handle);
   17414:	f8b8 0020 	ldrh.w	r0, [r8, #32]
   17418:	f7fa fae2 	bl	119e0 <rx_fc_lock>
		packet_rx_enqueue();
   1741c:	f7fc ffca 	bl	143b4 <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   17420:	f895 113e 	ldrb.w	r1, [r5, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17424:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   17428:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   1742a:	4291      	cmp	r1, r2
   1742c:	f0c0 80b9 	bcc.w	175a2 <isr_rx_scan+0x5f2>
			_radio.packet_rx_last);
   17430:	f895 313d 	ldrb.w	r3, [r5, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17434:	1acb      	subs	r3, r1, r3
   17436:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17438:	2b02      	cmp	r3, #2
   1743a:	f240 80bc 	bls.w	175b6 <isr_rx_scan+0x606>
	return _radio.packet_rx[_radio.packet_rx_last];
   1743e:	4bba      	ldr	r3, [pc, #744]	; (17728 <isr_rx_scan+0x778>)
   17440:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17444:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   1744c:	2b00      	cmp	r3, #0
   1744e:	f000 80b4 	beq.w	175ba <isr_rx_scan+0x60a>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   17452:	f8b8 2020 	ldrh.w	r2, [r8, #32]
   17456:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   17458:	220b      	movs	r2, #11
   1745a:	711a      	strb	r2, [r3, #4]
			if (pdu_adv_rx->chan_sel) {
   1745c:	7a22      	ldrb	r2, [r4, #8]
   1745e:	f012 0f20 	tst.w	r2, #32
   17462:	f000 80b0 	beq.w	175c6 <isr_rx_scan+0x616>
					((u16_t)conn->access_addr[1] << 8) |
   17466:	f898 1011 	ldrb.w	r1, [r8, #17]
					conn->access_addr[0];
   1746a:	f898 2010 	ldrb.w	r2, [r8, #16]
				u16_t aa_ls =
   1746e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   17472:	f898 0013 	ldrb.w	r0, [r8, #19]
					 conn->access_addr[2];
   17476:	f898 1012 	ldrb.w	r1, [r8, #18]
				u16_t aa_ms =
   1747a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   1747e:	f898 001d 	ldrb.w	r0, [r8, #29]
   17482:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   17486:	f888 001d 	strb.w	r0, [r8, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   1748a:	404a      	eors	r2, r1
   1748c:	f8a8 201e 	strh.w	r2, [r8, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   17490:	2201      	movs	r2, #1
   17492:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   17494:	f7fc ff8e 	bl	143b4 <packet_rx_enqueue>
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   17498:	4ea3      	ldr	r6, [pc, #652]	; (17728 <isr_rx_scan+0x778>)
   1749a:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   1749e:	f8c8 300c 	str.w	r3, [r8, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   174a2:	f8d6 5180 	ldr.w	r5, [r6, #384]	; 0x180
   174a6:	f8c8 5004 	str.w	r5, [r8, #4]
		conn->hdr.ticks_xtal_to_start =
   174aa:	2327      	movs	r3, #39	; 0x27
   174ac:	f8c8 3000 	str.w	r3, [r8]
		conn->hdr.ticks_preempt_to_start =
   174b0:	2400      	movs	r4, #0
   174b2:	f8c8 4008 	str.w	r4, [r8, #8]
		ticks_slot_offset =
   174b6:	429d      	cmp	r5, r3
   174b8:	bf38      	it	cc
   174ba:	461d      	movcc	r5, r3
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   174bc:	f44f 63c6 	mov.w	r3, #1584	; 0x630
   174c0:	9300      	str	r3, [sp, #0]
   174c2:	4b9a      	ldr	r3, [pc, #616]	; (1772c <isr_rx_scan+0x77c>)
   174c4:	2206      	movs	r2, #6
   174c6:	4621      	mov	r1, r4
   174c8:	4620      	mov	r0, r4
   174ca:	f7f9 fc99 	bl	10e00 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   174ce:	f240 6131 	movw	r1, #1585	; 0x631
   174d2:	f7fa faed 	bl	11ab0 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   174d6:	9400      	str	r4, [sp, #0]
   174d8:	4623      	mov	r3, r4
   174da:	2204      	movs	r2, #4
   174dc:	4621      	mov	r1, r4
   174de:	4620      	mov	r0, r4
   174e0:	f7f9 fc8e 	bl	10e00 <ticker_stop>
				     conn->handle,
   174e4:	f8b8 3020 	ldrh.w	r3, [r8, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   174e8:	3307      	adds	r3, #7
   174ea:	b2db      	uxtb	r3, r3
   174ec:	930b      	str	r3, [sp, #44]	; 0x2c
				     (_radio.ticks_anchor - ticks_slot_offset),
   174ee:	6876      	ldr	r6, [r6, #4]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   174f0:	1b76      	subs	r6, r6, r5
				     TICKER_US_TO_TICKS(conn_space_us),
   174f2:	4f8f      	ldr	r7, [pc, #572]	; (17730 <isr_rx_scan+0x780>)
   174f4:	a38a      	add	r3, pc, #552	; (adr r3, 17720 <isr_rx_scan+0x770>)
   174f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   174fa:	990c      	ldr	r1, [sp, #48]	; 0x30
   174fc:	fba1 0107 	umull	r0, r1, r1, r7
   17500:	f7e9 fdfc 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17504:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
				     TICKER_US_TO_TICKS(conn_interval_us),
   17508:	fbab 1207 	umull	r1, r2, fp, r7
   1750c:	468b      	mov	fp, r1
   1750e:	4694      	mov	ip, r2
   17510:	a383      	add	r3, pc, #524	; (adr r3, 17720 <isr_rx_scan+0x770>)
   17512:	e9d3 2300 	ldrd	r2, r3, [r3]
   17516:	e9cd bc0c 	strd	fp, ip, [sp, #48]	; 0x30
   1751a:	4658      	mov	r0, fp
   1751c:	4661      	mov	r1, ip
   1751e:	f7e9 fded 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17522:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
				     TICKER_REMAINDER(conn_interval_us),
   17526:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1752a:	2100      	movs	r1, #0
   1752c:	4a81      	ldr	r2, [pc, #516]	; (17734 <isr_rx_scan+0x784>)
   1752e:	2307      	movs	r3, #7
   17530:	fb03 f300 	mul.w	r3, r3, r0
   17534:	fb02 3301 	mla	r3, r2, r1, r3
   17538:	fba0 0102 	umull	r0, r1, r0, r2
   1753c:	4419      	add	r1, r3
   1753e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17542:	2300      	movs	r3, #0
   17544:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	; 0x30
   17548:	ebbb 0b00 	subs.w	fp, fp, r0
   1754c:	eb6c 0c01 	sbc.w	ip, ip, r1
   17550:	4658      	mov	r0, fp
   17552:	4661      	mov	r1, ip
   17554:	f7e9 fdd2 	bl	10fc <__aeabi_uldivmod>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   17558:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1755c:	442b      	add	r3, r5
   1755e:	b29b      	uxth	r3, r3
		ticker_status =
   17560:	f44f 62c9 	mov.w	r2, #1608	; 0x648
   17564:	9208      	str	r2, [sp, #32]
   17566:	4a74      	ldr	r2, [pc, #464]	; (17738 <isr_rx_scan+0x788>)
   17568:	9207      	str	r2, [sp, #28]
   1756a:	f8cd 8018 	str.w	r8, [sp, #24]
   1756e:	4a73      	ldr	r2, [pc, #460]	; (1773c <isr_rx_scan+0x78c>)
   17570:	9205      	str	r2, [sp, #20]
   17572:	9304      	str	r3, [sp, #16]
   17574:	9403      	str	r4, [sp, #12]
   17576:	9002      	str	r0, [sp, #8]
   17578:	9701      	str	r7, [sp, #4]
   1757a:	f8cd 9000 	str.w	r9, [sp]
   1757e:	4633      	mov	r3, r6
   17580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17582:	4621      	mov	r1, r4
   17584:	4620      	mov	r0, r4
   17586:	f7f9 fb9f 	bl	10cc8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1758a:	2800      	cmp	r0, #0
   1758c:	f000 8132 	beq.w	177f4 <isr_rx_scan+0x844>
   17590:	2802      	cmp	r0, #2
   17592:	f000 811b 	beq.w	177cc <isr_rx_scan+0x81c>
   17596:	4040      	eors	r0, r0
   17598:	f380 8811 	msr	BASEPRI, r0
   1759c:	f04f 0004 	mov.w	r0, #4
   175a0:	df02      	svc	2
		return (_radio.packet_rx_count -
   175a2:	4a61      	ldr	r2, [pc, #388]	; (17728 <isr_rx_scan+0x778>)
   175a4:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   175a8:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   175ac:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   175ae:	fa51 f383 	uxtab	r3, r1, r3
   175b2:	b2db      	uxtb	r3, r3
   175b4:	e740      	b.n	17438 <isr_rx_scan+0x488>
		return 0;
   175b6:	2300      	movs	r3, #0
   175b8:	e748      	b.n	1744c <isr_rx_scan+0x49c>
			LL_ASSERT(radio_pdu_node_rx);
   175ba:	4040      	eors	r0, r0
   175bc:	f380 8811 	msr	BASEPRI, r0
   175c0:	f04f 0004 	mov.w	r0, #4
   175c4:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   175c6:	2200      	movs	r2, #0
   175c8:	72da      	strb	r2, [r3, #11]
   175ca:	e763      	b.n	17494 <isr_rx_scan+0x4e4>
		 (_radio.scanner.type != 0) &&
   175cc:	4a56      	ldr	r2, [pc, #344]	; (17728 <isr_rx_scan+0x778>)
   175ce:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   175d2:	f012 0f08 	tst.w	r2, #8
   175d6:	f43f ad13 	beq.w	17000 <isr_rx_scan+0x50>
		 (_radio.scanner.conn == 0)) {
   175da:	4a53      	ldr	r2, [pc, #332]	; (17728 <isr_rx_scan+0x778>)
   175dc:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
		 (_radio.scanner.type != 0) &&
   175e0:	2a00      	cmp	r2, #0
   175e2:	f47f ad0d 	bne.w	17000 <isr_rx_scan+0x50>
		err = isr_rx_scan_report(rssi_ready,
   175e6:	b37f      	cbz	r7, 17648 <isr_rx_scan+0x698>
   175e8:	4629      	mov	r1, r5
   175ea:	2200      	movs	r2, #0
   175ec:	4630      	mov	r0, r6
   175ee:	f7fc ff81 	bl	144f4 <isr_rx_scan_report>
		if (err) {
   175f2:	4682      	mov	sl, r0
   175f4:	2800      	cmp	r0, #0
   175f6:	f040 80e9 	bne.w	177cc <isr_rx_scan+0x81c>
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   175fa:	f7f8 f8fb 	bl	f7f4 <radio_pkt_scratch_get>
   175fe:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   17600:	7803      	ldrb	r3, [r0, #0]
   17602:	2203      	movs	r2, #3
   17604:	f362 0303 	bfi	r3, r2, #0, #4
   17608:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   1760a:	7a23      	ldrb	r3, [r4, #8]
   1760c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17610:	7802      	ldrb	r2, [r0, #0]
   17612:	f363 12c7 	bfi	r2, r3, #7, #1
   17616:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
   17618:	230c      	movs	r3, #12
   1761a:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   1761c:	4628      	mov	r0, r5
   1761e:	f002 f94b 	bl	198b8 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   17622:	4b41      	ldr	r3, [pc, #260]	; (17728 <isr_rx_scan+0x778>)
   17624:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   17628:	f013 0f01 	tst.w	r3, #1
   1762c:	d00e      	beq.n	1764c <isr_rx_scan+0x69c>
   1762e:	b168      	cbz	r0, 1764c <isr_rx_scan+0x69c>
			pdu_adv_tx->tx_addr = 1;
   17630:	7832      	ldrb	r2, [r6, #0]
   17632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   17636:	4633      	mov	r3, r6
   17638:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   1763c:	2206      	movs	r2, #6
   1763e:	4601      	mov	r1, r0
   17640:	4618      	mov	r0, r3
   17642:	f7e8 fe3d 	bl	2c0 <memcpy>
   17646:	e00f      	b.n	17668 <isr_rx_scan+0x6b8>
		err = isr_rx_scan_report(rssi_ready,
   17648:	21ff      	movs	r1, #255	; 0xff
   1764a:	e7ce      	b.n	175ea <isr_rx_scan+0x63a>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   1764c:	4936      	ldr	r1, [pc, #216]	; (17728 <isr_rx_scan+0x778>)
   1764e:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   17652:	09db      	lsrs	r3, r3, #7
   17654:	7832      	ldrb	r2, [r6, #0]
   17656:	f363 1286 	bfi	r2, r3, #6, #1
   1765a:	4630      	mov	r0, r6
   1765c:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   17660:	2206      	movs	r2, #6
   17662:	31e0      	adds	r1, #224	; 0xe0
   17664:	f7e8 fe2c 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
   17668:	2206      	movs	r2, #6
   1766a:	f104 010a 	add.w	r1, r4, #10
   1766e:	f106 0008 	add.w	r0, r6, #8
   17672:	f7e8 fe25 	bl	2c0 <memcpy>
		_radio.scanner.state = 1;
   17676:	4b2c      	ldr	r3, [pc, #176]	; (17728 <isr_rx_scan+0x778>)
   17678:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1767c:	f042 0202 	orr.w	r2, r2, #2
   17680:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		_radio.state = STATE_TX;
   17684:	2202      	movs	r2, #2
   17686:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   17688:	2096      	movs	r0, #150	; 0x96
   1768a:	f7f8 f969 	bl	f960 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1768e:	2000      	movs	r0, #0
   17690:	f7f8 f8b4 	bl	f7fc <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   17694:	4630      	mov	r0, r6
   17696:	f7f8 f83d 	bl	f714 <radio_pkt_tx_set>
		radio_tmr_end_capture();
   1769a:	f7f8 fa19 	bl	fad0 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   1769e:	f7f8 f871 	bl	f784 <radio_is_ready>
   176a2:	4682      	mov	sl, r0
   176a4:	2800      	cmp	r0, #0
   176a6:	f000 8091 	beq.w	177cc <isr_rx_scan+0x81c>
   176aa:	4040      	eors	r0, r0
   176ac:	f380 8811 	msr	BASEPRI, r0
   176b0:	f04f 0004 	mov.w	r0, #4
   176b4:	df02      	svc	2
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   176b6:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   176b8:	f108 0908 	add.w	r9, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   176bc:	462a      	mov	r2, r5
   176be:	4649      	mov	r1, r9
   176c0:	09c0      	lsrs	r0, r0, #7
   176c2:	f002 fb73 	bl	19dac <ctrl_rl_addr_resolve>
   176c6:	4682      	mov	sl, r0
   176c8:	2800      	cmp	r0, #0
   176ca:	d146      	bne.n	1775a <isr_rx_scan+0x7aa>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   176cc:	4b16      	ldr	r3, [pc, #88]	; (17728 <isr_rx_scan+0x778>)
   176ce:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   176d2:	7a23      	ldrb	r3, [r4, #8]
   176d4:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   176d6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   176da:	d00b      	beq.n	176f4 <isr_rx_scan+0x744>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   176dc:	4b12      	ldr	r3, [pc, #72]	; (17728 <isr_rx_scan+0x778>)
   176de:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   176e2:	f013 0f20 	tst.w	r3, #32
   176e6:	d02d      	beq.n	17744 <isr_rx_scan+0x794>
   176e8:	f994 3008 	ldrsb.w	r3, [r4, #8]
   176ec:	2b00      	cmp	r3, #0
   176ee:	db0c      	blt.n	1770a <isr_rx_scan+0x75a>
	bool dir_report = false;
   176f0:	46d1      	mov	r9, sl
   176f2:	e028      	b.n	17746 <isr_rx_scan+0x796>
		(memcmp(&_radio.scanner.init_addr[0],
   176f4:	2206      	movs	r2, #6
   176f6:	4649      	mov	r1, r9
   176f8:	4811      	ldr	r0, [pc, #68]	; (17740 <isr_rx_scan+0x790>)
   176fa:	f013 f849 	bl	2a790 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   176fe:	2800      	cmp	r0, #0
   17700:	d1ec      	bne.n	176dc <isr_rx_scan+0x72c>
	bool dir_report = false;
   17702:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   17704:	f04f 0a01 	mov.w	sl, #1
   17708:	e029      	b.n	1775e <isr_rx_scan+0x7ae>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   1770a:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   1770e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17712:	2b40      	cmp	r3, #64	; 0x40
   17714:	d01d      	beq.n	17752 <isr_rx_scan+0x7a2>
	bool dir_report = false;
   17716:	46d1      	mov	r9, sl
   17718:	e015      	b.n	17746 <isr_rx_scan+0x796>
   1771a:	bf00      	nop
   1771c:	f3af 8000 	nop.w
   17720:	1afd498d 	.word	0x1afd498d
   17724:	00000007 	.word	0x00000007
   17728:	200014d4 	.word	0x200014d4
   1772c:	00011ab1 	.word	0x00011ab1
   17730:	3b9aca00 	.word	0x3b9aca00
   17734:	1afd498d 	.word	0x1afd498d
   17738:	00011a1d 	.word	0x00011a1d
   1773c:	000165dd 	.word	0x000165dd
   17740:	200015b4 	.word	0x200015b4
   17744:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   17746:	f1ba 0f00 	cmp.w	sl, #0
   1774a:	d008      	beq.n	1775e <isr_rx_scan+0x7ae>
   1774c:	f04f 0a01 	mov.w	sl, #1
   17750:	e005      	b.n	1775e <isr_rx_scan+0x7ae>
			*dir_report = true;
   17752:	f04f 0901 	mov.w	r9, #1
		return true;
   17756:	46ca      	mov	sl, r9
   17758:	e7f5      	b.n	17746 <isr_rx_scan+0x796>
	bool dir_report = false;
   1775a:	f04f 0900 	mov.w	r9, #0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1775e:	f1ba 0f00 	cmp.w	sl, #0
   17762:	d12b      	bne.n	177bc <isr_rx_scan+0x80c>
   17764:	e454      	b.n	17010 <isr_rx_scan+0x60>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   17766:	4a26      	ldr	r2, [pc, #152]	; (17800 <isr_rx_scan+0x850>)
   17768:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
   1776c:	f012 0f07 	tst.w	r2, #7
   17770:	d124      	bne.n	177bc <isr_rx_scan+0x80c>
   17772:	e459      	b.n	17028 <isr_rx_scan+0x78>
		   (_radio.scanner.state != 0) &&
   17774:	4b22      	ldr	r3, [pc, #136]	; (17800 <isr_rx_scan+0x850>)
   17776:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1777a:	f013 0f02 	tst.w	r3, #2
   1777e:	d102      	bne.n	17786 <isr_rx_scan+0x7d6>
		return 1;
   17780:	f04f 0a01 	mov.w	sl, #1
   17784:	e022      	b.n	177cc <isr_rx_scan+0x81c>
	struct pdu_adv *sreq = (struct pdu_adv *)radio_pkt_scratch_get();
   17786:	f7f8 f835 	bl	f7f4 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   1778a:	7802      	ldrb	r2, [r0, #0]
   1778c:	7a23      	ldrb	r3, [r4, #8]
   1778e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17792:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17796:	d004      	beq.n	177a2 <isr_rx_scan+0x7f2>
   17798:	2300      	movs	r3, #0
		   (_radio.scanner.state != 0) &&
   1779a:	b97b      	cbnz	r3, 177bc <isr_rx_scan+0x80c>
		return 1;
   1779c:	f04f 0a01 	mov.w	sl, #1
   177a0:	e014      	b.n	177cc <isr_rx_scan+0x81c>
		(memcmp(&sreq->payload.scan_req.adv_addr[0],
   177a2:	2206      	movs	r2, #6
   177a4:	f108 0102 	add.w	r1, r8, #2
   177a8:	3008      	adds	r0, #8
   177aa:	f012 fff1 	bl	2a790 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   177ae:	b108      	cbz	r0, 177b4 <isr_rx_scan+0x804>
   177b0:	2300      	movs	r3, #0
   177b2:	e7f2      	b.n	1779a <isr_rx_scan+0x7ea>
   177b4:	2301      	movs	r3, #1
   177b6:	e7f0      	b.n	1779a <isr_rx_scan+0x7ea>
	bool dir_report = false;
   177b8:	f04f 0900 	mov.w	r9, #0
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   177bc:	7a63      	ldrb	r3, [r4, #9]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   177be:	b1db      	cbz	r3, 177f8 <isr_rx_scan+0x848>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   177c0:	4b0f      	ldr	r3, [pc, #60]	; (17800 <isr_rx_scan+0x850>)
   177c2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   177c6:	b12b      	cbz	r3, 177d4 <isr_rx_scan+0x824>
		return 1;
   177c8:	f04f 0a01 	mov.w	sl, #1
}
   177cc:	4650      	mov	r0, sl
   177ce:	b00f      	add	sp, #60	; 0x3c
   177d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = isr_rx_scan_report(rssi_ready,
   177d4:	b907      	cbnz	r7, 177d8 <isr_rx_scan+0x828>
   177d6:	25ff      	movs	r5, #255	; 0xff
   177d8:	464a      	mov	r2, r9
   177da:	4629      	mov	r1, r5
   177dc:	4630      	mov	r0, r6
   177de:	f7fc fe89 	bl	144f4 <isr_rx_scan_report>
		if (err) {
   177e2:	4682      	mov	sl, r0
   177e4:	2800      	cmp	r0, #0
   177e6:	d1f1      	bne.n	177cc <isr_rx_scan+0x81c>
	return 1;
   177e8:	f04f 0a01 	mov.w	sl, #1
   177ec:	e7ee      	b.n	177cc <isr_rx_scan+0x81c>
			return 1;
   177ee:	f04f 0a01 	mov.w	sl, #1
   177f2:	e7eb      	b.n	177cc <isr_rx_scan+0x81c>
		return 0;
   177f4:	4682      	mov	sl, r0
   177f6:	e7e9      	b.n	177cc <isr_rx_scan+0x81c>
		return 1;
   177f8:	f04f 0a01 	mov.w	sl, #1
   177fc:	e7e6      	b.n	177cc <isr_rx_scan+0x81c>
   177fe:	bf00      	nop
   17800:	200014d4 	.word	0x200014d4
   17804:	00000000 	.word	0x00000000

00017808 <isr_rx_adv>:
{
   17808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1780c:	b08f      	sub	sp, #60	; 0x3c
   1780e:	4604      	mov	r4, r0
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   17810:	b9fa      	cbnz	r2, 17852 <isr_rx_adv+0x4a>
   17812:	20ff      	movs	r0, #255	; 0xff
   17814:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
   17818:	f7f7 ffec 	bl	f7f4 <radio_pkt_scratch_get>
   1781c:	4680      	mov	r8, r0
		[_radio.advertiser.adv_data.first][0];
   1781e:	4f9d      	ldr	r7, [pc, #628]	; (17a94 <isr_rx_adv+0x28c>)
   17820:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
   17824:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   17828:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1782c:	3320      	adds	r3, #32
   1782e:	441f      	add	r7, r3
   17830:	1dfd      	adds	r5, r7, #7
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   17832:	7803      	ldrb	r3, [r0, #0]
   17834:	f003 030f 	and.w	r3, r3, #15
   17838:	2b03      	cmp	r3, #3
   1783a:	d00e      	beq.n	1785a <isr_rx_adv+0x52>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1783c:	f898 3000 	ldrb.w	r3, [r8]
   17840:	f003 030f 	and.w	r3, r3, #15
   17844:	2b05      	cmp	r3, #5
   17846:	d065      	beq.n	17914 <isr_rx_adv+0x10c>
	return 1;
   17848:	2301      	movs	r3, #1
}
   1784a:	4618      	mov	r0, r3
   1784c:	b00f      	add	sp, #60	; 0x3c
   1784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   17852:	4618      	mov	r0, r3
   17854:	f002 f892 	bl	1997c <ctrl_rl_irk_idx>
   17858:	e7dc      	b.n	17814 <isr_rx_adv+0xc>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   1785a:	7843      	ldrb	r3, [r0, #1]
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1785c:	2b0c      	cmp	r3, #12
   1785e:	d1ed      	bne.n	1783c <isr_rx_adv+0x34>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   17860:	4b8c      	ldr	r3, [pc, #560]	; (17a94 <isr_rx_adv+0x28c>)
   17862:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17866:	f013 0f40 	tst.w	r3, #64	; 0x40
   1786a:	d030      	beq.n	178ce <isr_rx_adv+0xc6>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   1786c:	4b89      	ldr	r3, [pc, #548]	; (17a94 <isr_rx_adv+0x28c>)
   1786e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   17872:	f013 0f40 	tst.w	r3, #64	; 0x40
   17876:	d04b      	beq.n	17910 <isr_rx_adv+0x108>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   17878:	2c00      	cmp	r4, #0
   1787a:	d034      	beq.n	178e6 <isr_rx_adv+0xde>
	return (adv->tx_addr == sr->rx_addr) &&
   1787c:	79fb      	ldrb	r3, [r7, #7]
   1787e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17882:	f898 2000 	ldrb.w	r2, [r8]
   17886:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1788a:	d034      	beq.n	178f6 <isr_rx_adv+0xee>
   1788c:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1788e:	2b00      	cmp	r3, #0
   17890:	d13c      	bne.n	1790c <isr_rx_adv+0x104>
   17892:	2300      	movs	r3, #0
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   17894:	2b00      	cmp	r3, #0
   17896:	d0d1      	beq.n	1783c <isr_rx_adv+0x34>
		_radio.state = STATE_CLOSE;
   17898:	4c7e      	ldr	r4, [pc, #504]	; (17a94 <isr_rx_adv+0x28c>)
   1789a:	2303      	movs	r3, #3
   1789c:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
   1789e:	f7f7 ffbd 	bl	f81c <radio_switch_complete_and_disable>
		     data[_radio.advertiser.scan_data.first][0]);
   178a2:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
   178a6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   178aa:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   178ae:	3370      	adds	r3, #112	; 0x70
   178b0:	4423      	add	r3, r4
   178b2:	1dd8      	adds	r0, r3, #7
   178b4:	f7f7 ff2e 	bl	f714 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   178b8:	f7f7 ff64 	bl	f784 <radio_is_ready>
   178bc:	4603      	mov	r3, r0
   178be:	2800      	cmp	r0, #0
   178c0:	d0c3      	beq.n	1784a <isr_rx_adv+0x42>
   178c2:	4040      	eors	r0, r0
   178c4:	f380 8811 	msr	BASEPRI, r0
   178c8:	f04f 0004 	mov.w	r0, #4
   178cc:	df02      	svc	2
		 ctrl_rl_addr_allowed(sr->tx_addr,
   178ce:	4601      	mov	r1, r0
   178d0:	f811 0b02 	ldrb.w	r0, [r1], #2
   178d4:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   178d8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   178dc:	f002 fa0e 	bl	19cfc <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   178e0:	2800      	cmp	r0, #0
   178e2:	d1cb      	bne.n	1787c <isr_rx_adv+0x74>
   178e4:	e7c2      	b.n	1786c <isr_rx_adv+0x64>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   178e6:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   178ea:	f002 f871 	bl	199d0 <ctrl_irk_whitelisted>
   178ee:	2800      	cmp	r0, #0
   178f0:	d1c4      	bne.n	1787c <isr_rx_adv+0x74>
   178f2:	2300      	movs	r3, #0
   178f4:	e7ce      	b.n	17894 <isr_rx_adv+0x8c>
		 !memcmp(adv->payload.adv_ind.addr,
   178f6:	2206      	movs	r2, #6
   178f8:	f108 0108 	add.w	r1, r8, #8
   178fc:	1ca8      	adds	r0, r5, #2
   178fe:	f012 ff47 	bl	2a790 <memcmp>
	return (adv->tx_addr == sr->rx_addr) &&
   17902:	b908      	cbnz	r0, 17908 <isr_rx_adv+0x100>
   17904:	2301      	movs	r3, #1
   17906:	e7c2      	b.n	1788e <isr_rx_adv+0x86>
   17908:	2300      	movs	r3, #0
   1790a:	e7c0      	b.n	1788e <isr_rx_adv+0x86>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1790c:	2301      	movs	r3, #1
   1790e:	e7c1      	b.n	17894 <isr_rx_adv+0x8c>
   17910:	2300      	movs	r3, #0
   17912:	e7bf      	b.n	17894 <isr_rx_adv+0x8c>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   17914:	f898 3001 	ldrb.w	r3, [r8, #1]
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   17918:	2b22      	cmp	r3, #34	; 0x22
   1791a:	d001      	beq.n	17920 <isr_rx_adv+0x118>
	return 1;
   1791c:	2301      	movs	r3, #1
   1791e:	e794      	b.n	1784a <isr_rx_adv+0x42>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   17920:	79fb      	ldrb	r3, [r7, #7]
   17922:	f003 030f 	and.w	r3, r3, #15
   17926:	2b01      	cmp	r3, #1
   17928:	d01a      	beq.n	17960 <isr_rx_adv+0x158>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   1792a:	4b5a      	ldr	r3, [pc, #360]	; (17a94 <isr_rx_adv+0x28c>)
   1792c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17930:	09db      	lsrs	r3, r3, #7
   17932:	d06d      	beq.n	17a10 <isr_rx_adv+0x208>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   17934:	4b57      	ldr	r3, [pc, #348]	; (17a94 <isr_rx_adv+0x28c>)
   17936:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   1793a:	09db      	lsrs	r3, r3, #7
   1793c:	f000 8096 	beq.w	17a6c <isr_rx_adv+0x264>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   17940:	2c00      	cmp	r4, #0
   17942:	d071      	beq.n	17a28 <isr_rx_adv+0x220>
	return (adv->tx_addr == ci->rx_addr) &&
   17944:	79fb      	ldrb	r3, [r7, #7]
   17946:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1794a:	f898 2000 	ldrb.w	r2, [r8]
   1794e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17952:	d071      	beq.n	17a38 <isr_rx_adv+0x230>
   17954:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17956:	2b00      	cmp	r3, #0
   17958:	f000 809a 	beq.w	17a90 <isr_rx_adv+0x288>
   1795c:	2301      	movs	r3, #1
   1795e:	e086      	b.n	17a6e <isr_rx_adv+0x266>
		return ctrl_rl_addr_allowed(ci->tx_addr,
   17960:	4641      	mov	r1, r8
   17962:	f811 0b02 	ldrb.w	r0, [r1], #2
   17966:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   1796a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1796e:	f002 f9c5 	bl	19cfc <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   17972:	b908      	cbnz	r0, 17978 <isr_rx_adv+0x170>
   17974:	2300      	movs	r3, #0
   17976:	e07a      	b.n	17a6e <isr_rx_adv+0x266>
	return (adv->tx_addr == ci->rx_addr) &&
   17978:	79fb      	ldrb	r3, [r7, #7]
   1797a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1797e:	f898 2000 	ldrb.w	r2, [r8]
   17982:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17986:	d003      	beq.n	17990 <isr_rx_adv+0x188>
   17988:	2300      	movs	r3, #0
					    rl_idx) &&
   1798a:	b9db      	cbnz	r3, 179c4 <isr_rx_adv+0x1bc>
		       isr_adv_ci_adva_check(adv, ci) &&
   1798c:	2300      	movs	r3, #0
   1798e:	e06e      	b.n	17a6e <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17990:	79fb      	ldrb	r3, [r7, #7]
   17992:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   17996:	2b01      	cmp	r3, #1
   17998:	d008      	beq.n	179ac <isr_rx_adv+0x1a4>
		 (!memcmp(adv->payload.adv_ind.addr,
   1799a:	2206      	movs	r2, #6
   1799c:	f108 0108 	add.w	r1, r8, #8
   179a0:	1ca8      	adds	r0, r5, #2
   179a2:	f012 fef5 	bl	2a790 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   179a6:	b958      	cbnz	r0, 179c0 <isr_rx_adv+0x1b8>
	return (adv->tx_addr == ci->rx_addr) &&
   179a8:	2301      	movs	r3, #1
   179aa:	e7ee      	b.n	1798a <isr_rx_adv+0x182>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   179ac:	2206      	movs	r2, #6
   179ae:	f108 0108 	add.w	r1, r8, #8
   179b2:	1ca8      	adds	r0, r5, #2
   179b4:	f012 feec 	bl	2a790 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   179b8:	2800      	cmp	r0, #0
   179ba:	d1ee      	bne.n	1799a <isr_rx_adv+0x192>
	return (adv->tx_addr == ci->rx_addr) &&
   179bc:	2301      	movs	r3, #1
   179be:	e7e4      	b.n	1798a <isr_rx_adv+0x182>
   179c0:	2300      	movs	r3, #0
   179c2:	e7e2      	b.n	1798a <isr_rx_adv+0x182>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   179c4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
	if (rl_idx != FILTER_IDX_NONE) {
   179c8:	2bff      	cmp	r3, #255	; 0xff
   179ca:	d009      	beq.n	179e0 <isr_rx_adv+0x1d8>
		return rl_idx == _radio.advertiser.rl_idx;
   179cc:	4a31      	ldr	r2, [pc, #196]	; (17a94 <isr_rx_adv+0x28c>)
   179ce:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   179d2:	4293      	cmp	r3, r2
   179d4:	bf14      	ite	ne
   179d6:	2300      	movne	r3, #0
   179d8:	2301      	moveq	r3, #1
		       isr_adv_ci_adva_check(adv, ci) &&
   179da:	b9bb      	cbnz	r3, 17a0c <isr_rx_adv+0x204>
   179dc:	2300      	movs	r3, #0
   179de:	e046      	b.n	17a6e <isr_rx_adv+0x266>
	return (adv->rx_addr == ci->tx_addr) &&
   179e0:	79fa      	ldrb	r2, [r7, #7]
   179e2:	f898 3000 	ldrb.w	r3, [r8]
   179e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   179ea:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   179ee:	d001      	beq.n	179f4 <isr_rx_adv+0x1ec>
   179f0:	2300      	movs	r3, #0
   179f2:	e7f2      	b.n	179da <isr_rx_adv+0x1d2>
	       !memcmp(adv->payload.direct_ind.tgt_addr,
   179f4:	2206      	movs	r2, #6
   179f6:	f108 0102 	add.w	r1, r8, #2
   179fa:	f105 0008 	add.w	r0, r5, #8
   179fe:	f012 fec7 	bl	2a790 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   17a02:	b908      	cbnz	r0, 17a08 <isr_rx_adv+0x200>
   17a04:	2301      	movs	r3, #1
   17a06:	e7e8      	b.n	179da <isr_rx_adv+0x1d2>
   17a08:	2300      	movs	r3, #0
   17a0a:	e7e6      	b.n	179da <isr_rx_adv+0x1d2>
		       isr_adv_ci_adva_check(adv, ci) &&
   17a0c:	2301      	movs	r3, #1
   17a0e:	e02e      	b.n	17a6e <isr_rx_adv+0x266>
		 ctrl_rl_addr_allowed(ci->tx_addr,
   17a10:	4641      	mov	r1, r8
   17a12:	f811 0b02 	ldrb.w	r0, [r1], #2
   17a16:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   17a1a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17a1e:	f002 f96d 	bl	19cfc <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   17a22:	2800      	cmp	r0, #0
   17a24:	d18e      	bne.n	17944 <isr_rx_adv+0x13c>
   17a26:	e785      	b.n	17934 <isr_rx_adv+0x12c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17a28:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   17a2c:	f001 ffd0 	bl	199d0 <ctrl_irk_whitelisted>
   17a30:	2800      	cmp	r0, #0
   17a32:	d187      	bne.n	17944 <isr_rx_adv+0x13c>
   17a34:	2300      	movs	r3, #0
   17a36:	e01a      	b.n	17a6e <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17a38:	79fb      	ldrb	r3, [r7, #7]
   17a3a:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   17a3e:	2b01      	cmp	r3, #1
   17a40:	d008      	beq.n	17a54 <isr_rx_adv+0x24c>
		 (!memcmp(adv->payload.adv_ind.addr,
   17a42:	2206      	movs	r2, #6
   17a44:	f108 0108 	add.w	r1, r8, #8
   17a48:	1ca8      	adds	r0, r5, #2
   17a4a:	f012 fea1 	bl	2a790 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   17a4e:	b958      	cbnz	r0, 17a68 <isr_rx_adv+0x260>
	return (adv->tx_addr == ci->rx_addr) &&
   17a50:	2301      	movs	r3, #1
   17a52:	e780      	b.n	17956 <isr_rx_adv+0x14e>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   17a54:	2206      	movs	r2, #6
   17a56:	f108 0108 	add.w	r1, r8, #8
   17a5a:	1ca8      	adds	r0, r5, #2
   17a5c:	f012 fe98 	bl	2a790 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17a60:	2800      	cmp	r0, #0
   17a62:	d1ee      	bne.n	17a42 <isr_rx_adv+0x23a>
	return (adv->tx_addr == ci->rx_addr) &&
   17a64:	2301      	movs	r3, #1
   17a66:	e776      	b.n	17956 <isr_rx_adv+0x14e>
   17a68:	2300      	movs	r3, #0
   17a6a:	e774      	b.n	17956 <isr_rx_adv+0x14e>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17a6c:	2300      	movs	r3, #0
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   17a6e:	2b00      	cmp	r3, #0
   17a70:	f000 8232 	beq.w	17ed8 <isr_rx_adv+0x6d0>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   17a74:	4b07      	ldr	r3, [pc, #28]	; (17a94 <isr_rx_adv+0x28c>)
   17a76:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   17a7a:	b16b      	cbz	r3, 17a98 <isr_rx_adv+0x290>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   17a7c:	4a05      	ldr	r2, [pc, #20]	; (17a94 <isr_rx_adv+0x28c>)
   17a7e:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   17a82:	b2db      	uxtb	r3, r3
   17a84:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   17a88:	4293      	cmp	r3, r2
   17a8a:	d005      	beq.n	17a98 <isr_rx_adv+0x290>
	return 1;
   17a8c:	2301      	movs	r3, #1
   17a8e:	e6dc      	b.n	1784a <isr_rx_adv+0x42>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17a90:	2300      	movs	r3, #0
   17a92:	e7ec      	b.n	17a6e <isr_rx_adv+0x266>
   17a94:	200014d4 	.word	0x200014d4
		   (_radio.advertiser.conn)) {
   17a98:	4bd9      	ldr	r3, [pc, #868]	; (17e00 <isr_rx_adv+0x5f8>)
   17a9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   17a9e:	2b00      	cmp	r3, #0
   17aa0:	f000 821c 	beq.w	17edc <isr_rx_adv+0x6d4>
	if (_radio.packet_rx_acquire >=
   17aa4:	4bd6      	ldr	r3, [pc, #856]	; (17e00 <isr_rx_adv+0x5f8>)
   17aa6:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17aaa:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17aae:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17ab0:	429a      	cmp	r2, r3
   17ab2:	f0c0 81cf 	bcc.w	17e54 <isr_rx_adv+0x64c>
			_radio.packet_rx_last);
   17ab6:	4bd2      	ldr	r3, [pc, #840]	; (17e00 <isr_rx_adv+0x5f8>)
   17ab8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17abc:	1ad3      	subs	r3, r2, r3
   17abe:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17ac0:	2b03      	cmp	r3, #3
   17ac2:	f240 81d1 	bls.w	17e68 <isr_rx_adv+0x660>
	return _radio.packet_rx[_radio.packet_rx_last];
   17ac6:	4bce      	ldr	r3, [pc, #824]	; (17e00 <isr_rx_adv+0x5f8>)
   17ac8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17acc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17ad0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   17ad4:	2d00      	cmp	r5, #0
   17ad6:	f000 8203 	beq.w	17ee0 <isr_rx_adv+0x6d8>
		_radio.state = STATE_STOP;
   17ada:	4ec9      	ldr	r6, [pc, #804]	; (17e00 <isr_rx_adv+0x5f8>)
   17adc:	f04f 0904 	mov.w	r9, #4
   17ae0:	f886 9010 	strb.w	r9, [r6, #16]
		radio_disable();
   17ae4:	f7f7 fe34 	bl	f750 <radio_disable>
		conn = _radio.advertiser.conn;
   17ae8:	f8d6 40c8 	ldr.w	r4, [r6, #200]	; 0xc8
		_radio.advertiser.conn = NULL;
   17aec:	2300      	movs	r3, #0
   17aee:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   17af2:	f44f 72aa 	mov.w	r2, #340	; 0x154
   17af6:	f8d6 1104 	ldr.w	r1, [r6, #260]	; 0x104
   17afa:	4620      	mov	r0, r4
   17afc:	f7f7 fc53 	bl	f3a6 <mem_index_get>
   17b00:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
   17b02:	2203      	movs	r2, #3
   17b04:	f108 0112 	add.w	r1, r8, #18
   17b08:	f104 0014 	add.w	r0, r4, #20
   17b0c:	f7e8 fbd8 	bl	2c0 <memcpy>
		memcpy(&conn->access_addr[0],
   17b10:	f104 0a10 	add.w	sl, r4, #16
   17b14:	464a      	mov	r2, r9
   17b16:	f108 010e 	add.w	r1, r8, #14
   17b1a:	4650      	mov	r0, sl
   17b1c:	f7e8 fbd0 	bl	2c0 <memcpy>
		memcpy(&conn->data_chan_map[0],
   17b20:	f104 0617 	add.w	r6, r4, #23
   17b24:	2205      	movs	r2, #5
   17b26:	f108 011e 	add.w	r1, r8, #30
   17b2a:	4630      	mov	r0, r6
   17b2c:	f7e8 fbc8 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   17b30:	2105      	movs	r1, #5
   17b32:	4630      	mov	r0, r6
   17b34:	f7f7 fc7b 	bl	f42e <util_ones_count_get>
		conn->data_chan_count =
   17b38:	7f63      	ldrb	r3, [r4, #29]
   17b3a:	f360 0305 	bfi	r3, r0, #0, #6
   17b3e:	7763      	strb	r3, [r4, #29]
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
   17b40:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   17b44:	f3c3 0304 	ubfx	r3, r3, #0, #5
   17b48:	77a3      	strb	r3, [r4, #30]
			pdu_adv->payload.connect_ind.lldata.interval;
   17b4a:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		conn->conn_interval =
   17b4e:	84a3      	strh	r3, [r4, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
   17b50:	f8b8 3018 	ldrh.w	r3, [r8, #24]
   17b54:	f240 46e2 	movw	r6, #1250	; 0x4e2
   17b58:	fb06 f603 	mul.w	r6, r6, r3
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
   17b5c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   17b60:	84e3      	strh	r3, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   17b62:	464a      	mov	r2, r9
   17b64:	4651      	mov	r1, sl
   17b66:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   17b6a:	f7e8 fba9 	bl	2c0 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
   17b6e:	f8b8 301c 	ldrh.w	r3, [r8, #28]
   17b72:	f242 7210 	movw	r2, #10000	; 0x2710
   17b76:	fb02 6303 	mla	r3, r2, r3, r6
   17b7a:	3b01      	subs	r3, #1
   17b7c:	fbb3 f3f6 	udiv	r3, r3, r6
		conn->supervision_reload =
   17b80:	87e3      	strh	r3, [r4, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   17b82:	4ba0      	ldr	r3, [pc, #640]	; (17e04 <isr_rx_adv+0x5fc>)
   17b84:	4433      	add	r3, r6
   17b86:	fbb3 f3f6 	udiv	r3, r3, r6
   17b8a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   17b8e:	4b9e      	ldr	r3, [pc, #632]	; (17e08 <isr_rx_adv+0x600>)
   17b90:	4433      	add	r3, r6
   17b92:	fbb3 f3f6 	udiv	r3, r3, r6
   17b96:	b29b      	uxth	r3, r3
   17b98:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17b9c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   17b9e:	1d91      	adds	r1, r2, #6
   17ba0:	428b      	cmp	r3, r1
   17ba2:	dd03      	ble.n	17bac <isr_rx_adv+0x3a4>
				     (conn->apto_reload - (conn->latency + 6)) :
   17ba4:	1a9b      	subs	r3, r3, r2
   17ba6:	b29b      	uxth	r3, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17ba8:	3b06      	subs	r3, #6
   17baa:	b29b      	uxth	r3, r3
   17bac:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
		radio_pdu_node_rx->hdr.handle = conn->handle;
   17bb0:	8c23      	ldrh	r3, [r4, #32]
   17bb2:	80eb      	strh	r3, [r5, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17bb4:	2206      	movs	r2, #6
   17bb6:	712a      	strb	r2, [r5, #4]
		radio_le_conn_cmplt->status = 0x00;
   17bb8:	2300      	movs	r3, #0
   17bba:	72eb      	strb	r3, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
   17bbc:	2301      	movs	r3, #1
   17bbe:	732b      	strb	r3, [r5, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   17bc0:	4641      	mov	r1, r8
   17bc2:	f811 3b08 	ldrb.w	r3, [r1], #8
   17bc6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   17bca:	76ab      	strb	r3, [r5, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   17bcc:	f105 001b 	add.w	r0, r5, #27
   17bd0:	f7e8 fb76 	bl	2c0 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   17bd4:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   17bd8:	28ff      	cmp	r0, #255	; 0xff
   17bda:	f000 8147 	beq.w	17e6c <isr_rx_adv+0x664>
			ll_rl_id_addr_get(rl_idx,
   17bde:	f105 020e 	add.w	r2, r5, #14
   17be2:	f105 010d 	add.w	r1, r5, #13
   17be6:	f002 f85d 	bl	19ca4 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   17bea:	7b6b      	ldrb	r3, [r5, #13]
   17bec:	3302      	adds	r3, #2
   17bee:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   17bf0:	2206      	movs	r2, #6
   17bf2:	f108 0102 	add.w	r1, r8, #2
   17bf6:	f105 0014 	add.w	r0, r5, #20
   17bfa:	f7e8 fb61 	bl	2c0 <memcpy>
			pdu_adv->payload.connect_ind.lldata.interval;
   17bfe:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		radio_le_conn_cmplt->interval =
   17c02:	f8a5 3021 	strh.w	r3, [r5, #33]	; 0x21
			pdu_adv->payload.connect_ind.lldata.latency;
   17c06:	f8b8 301a 	ldrh.w	r3, [r8, #26]
		radio_le_conn_cmplt->latency =
   17c0a:	f8a5 3023 	strh.w	r3, [r5, #35]	; 0x23
			pdu_adv->payload.connect_ind.lldata.timeout;
   17c0e:	f8b8 301c 	ldrh.w	r3, [r8, #28]
		radio_le_conn_cmplt->timeout =
   17c12:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
			pdu_adv->payload.connect_ind.lldata.sca;
   17c16:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   17c1a:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   17c1e:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		rx_fc_lock(conn->handle);
   17c22:	8c20      	ldrh	r0, [r4, #32]
   17c24:	f7f9 fedc 	bl	119e0 <rx_fc_lock>
		packet_rx_enqueue();
   17c28:	f7fc fbc4 	bl	143b4 <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   17c2c:	4b74      	ldr	r3, [pc, #464]	; (17e00 <isr_rx_adv+0x5f8>)
   17c2e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17c32:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17c36:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17c38:	429a      	cmp	r2, r3
   17c3a:	f0c0 8129 	bcc.w	17e90 <isr_rx_adv+0x688>
			_radio.packet_rx_last);
   17c3e:	4b70      	ldr	r3, [pc, #448]	; (17e00 <isr_rx_adv+0x5f8>)
   17c40:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17c44:	1ad3      	subs	r3, r2, r3
   17c46:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17c48:	2b02      	cmp	r3, #2
   17c4a:	f240 812b 	bls.w	17ea4 <isr_rx_adv+0x69c>
	return _radio.packet_rx[_radio.packet_rx_last];
   17c4e:	4b6c      	ldr	r3, [pc, #432]	; (17e00 <isr_rx_adv+0x5f8>)
   17c50:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17c54:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   17c5c:	2b00      	cmp	r3, #0
   17c5e:	f000 8123 	beq.w	17ea8 <isr_rx_adv+0x6a0>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   17c62:	8c22      	ldrh	r2, [r4, #32]
   17c64:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   17c66:	220b      	movs	r2, #11
   17c68:	711a      	strb	r2, [r3, #4]
			if (pdu_adv->chan_sel) {
   17c6a:	f898 2000 	ldrb.w	r2, [r8]
   17c6e:	f012 0f20 	tst.w	r2, #32
   17c72:	f000 811f 	beq.w	17eb4 <isr_rx_adv+0x6ac>
					((u16_t)conn->access_addr[1] << 8) |
   17c76:	7c61      	ldrb	r1, [r4, #17]
					conn->access_addr[0];
   17c78:	7c22      	ldrb	r2, [r4, #16]
				u16_t aa_ls =
   17c7a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   17c7e:	7ce0      	ldrb	r0, [r4, #19]
					 conn->access_addr[2];
   17c80:	7ca1      	ldrb	r1, [r4, #18]
				u16_t aa_ms =
   17c82:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   17c86:	7f60      	ldrb	r0, [r4, #29]
   17c88:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   17c8c:	7760      	strb	r0, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   17c8e:	404a      	eors	r2, r1
   17c90:	83e2      	strh	r2, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   17c92:	2201      	movs	r2, #1
   17c94:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   17c96:	f7fc fb8d 	bl	143b4 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
   17c9a:	f898 2023 	ldrb.w	r2, [r8, #35]	; 0x23
   17c9e:	0952      	lsrs	r2, r2, #5
   17ca0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   17ca4:	f362 0384 	bfi	r3, r2, #2, #3
   17ca8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   17cac:	4d54      	ldr	r5, [pc, #336]	; (17e00 <isr_rx_adv+0x5f8>)
   17cae:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
   17cb2:	4956      	ldr	r1, [pc, #344]	; (17e0c <isr_rx_adv+0x604>)
   17cb4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			   gc_lookup_ppm[conn->slave.sca]) *
   17cb8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   17cbc:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   17cbe:	fb03 f306 	mul.w	r3, r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   17cc2:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   17cc6:	f203 233f 	addw	r3, r3, #575	; 0x23f
   17cca:	4a51      	ldr	r2, [pc, #324]	; (17e10 <isr_rx_adv+0x608>)
   17ccc:	fba2 2303 	umull	r2, r3, r2, r3
   17cd0:	0c9b      	lsrs	r3, r3, #18
		conn->slave.window_widening_periodic_us =
   17cd2:	6563      	str	r3, [r4, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   17cd4:	0873      	lsrs	r3, r6, #1
   17cd6:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   17cd8:	65a3      	str	r3, [r4, #88]	; 0x58
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
   17cda:	f898 3015 	ldrb.w	r3, [r8, #21]
   17cde:	f240 49e2 	movw	r9, #1250	; 0x4e2
   17ce2:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   17ce6:	66a3      	str	r3, [r4, #104]	; 0x68
		conn->slave.window_size_prepare_us = 0;
   17ce8:	f04f 0b00 	mov.w	fp, #0
   17cec:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0);
   17cf0:	4658      	mov	r0, fp
   17cf2:	f7f7 fd19 	bl	f728 <radio_rx_ready_delay_get>
   17cf6:	4682      	mov	sl, r0
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   17cf8:	f200 4052 	addw	r0, r0, #1106	; 0x452
   17cfc:	a33e      	add	r3, pc, #248	; (adr r3, 17df8 <isr_rx_adv+0x5f0>)
   17cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   17d02:	4944      	ldr	r1, [pc, #272]	; (17e14 <isr_rx_adv+0x60c>)
   17d04:	fba0 0101 	umull	r0, r1, r0, r1
   17d08:	f7e9 f9f8 	bl	10fc <__aeabi_uldivmod>
   17d0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_slot =
   17d10:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   17d12:	f8d5 5180 	ldr.w	r5, [r5, #384]	; 0x180
   17d16:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
   17d18:	2327      	movs	r3, #39	; 0x27
   17d1a:	6023      	str	r3, [r4, #0]
		conn->hdr.ticks_preempt_to_start =
   17d1c:	f8c4 b008 	str.w	fp, [r4, #8]
		ticks_slot_offset =
   17d20:	429d      	cmp	r5, r3
   17d22:	bf38      	it	cc
   17d24:	461d      	movcc	r5, r3
			conn->slave.window_widening_periodic_us;
   17d26:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn_interval_us -=
   17d28:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
   17d2a:	f7f7 fee3 	bl	faf4 <radio_tmr_end_get>
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
   17d2e:	f8b8 2016 	ldrh.w	r2, [r8, #22]
   17d32:	b292      	uxth	r2, r2
		conn_offset_us +=
   17d34:	fb09 9902 	mla	r9, r9, r2, r9
   17d38:	4481      	add	r9, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   17d3a:	4659      	mov	r1, fp
   17d3c:	4658      	mov	r0, fp
   17d3e:	f7f7 fcf1 	bl	f724 <radio_tx_chain_delay_get>
   17d42:	eba9 0000 	sub.w	r0, r9, r0
		conn_offset_us -= rx_ready_delay;
   17d46:	eba0 0a0a 	sub.w	sl, r0, sl
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   17d4a:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17d4e:	f240 4372 	movw	r3, #1138	; 0x472
   17d52:	9300      	str	r3, [sp, #0]
   17d54:	4b30      	ldr	r3, [pc, #192]	; (17e18 <isr_rx_adv+0x610>)
   17d56:	2205      	movs	r2, #5
   17d58:	4659      	mov	r1, fp
   17d5a:	4658      	mov	r0, fp
   17d5c:	f7f9 f850 	bl	10e00 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   17d60:	f240 4173 	movw	r1, #1139	; 0x473
   17d64:	f7f9 fe84 	bl	11a70 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   17d68:	79fb      	ldrb	r3, [r7, #7]
   17d6a:	f003 030f 	and.w	r3, r3, #15
   17d6e:	2b01      	cmp	r3, #1
   17d70:	f000 80a3 	beq.w	17eba <isr_rx_adv+0x6b2>
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
   17d74:	8c23      	ldrh	r3, [r4, #32]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17d76:	3307      	adds	r3, #7
   17d78:	b2db      	uxtb	r3, r3
   17d7a:	930b      	str	r3, [sp, #44]	; 0x2c
		     (_radio.ticks_anchor - ticks_slot_offset),
   17d7c:	4b20      	ldr	r3, [pc, #128]	; (17e00 <isr_rx_adv+0x5f8>)
   17d7e:	685b      	ldr	r3, [r3, #4]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17d80:	eba3 0905 	sub.w	r9, r3, r5
		     TICKER_US_TO_TICKS(conn_offset_us),
   17d84:	f04f 0800 	mov.w	r8, #0
   17d88:	4f22      	ldr	r7, [pc, #136]	; (17e14 <isr_rx_adv+0x60c>)
   17d8a:	a31b      	add	r3, pc, #108	; (adr r3, 17df8 <isr_rx_adv+0x5f0>)
   17d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   17d90:	fbaa 0107 	umull	r0, r1, sl, r7
   17d94:	f7e9 f9b2 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17d98:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
		     TICKER_US_TO_TICKS(conn_interval_us),
   17d9c:	fba6 6707 	umull	r6, r7, r6, r7
   17da0:	a315      	add	r3, pc, #84	; (adr r3, 17df8 <isr_rx_adv+0x5f0>)
   17da2:	e9d3 2300 	ldrd	r2, r3, [r3]
   17da6:	4630      	mov	r0, r6
   17da8:	4639      	mov	r1, r7
   17daa:	f7e9 f9a7 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17dae:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   17db2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17db6:	2100      	movs	r1, #0
   17db8:	4a18      	ldr	r2, [pc, #96]	; (17e1c <isr_rx_adv+0x614>)
   17dba:	2307      	movs	r3, #7
   17dbc:	fb03 f300 	mul.w	r3, r3, r0
   17dc0:	fb02 3301 	mla	r3, r2, r1, r3
   17dc4:	fba0 0102 	umull	r0, r1, r0, r2
   17dc8:	4419      	add	r1, r3
   17dca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17dce:	2300      	movs	r3, #0
   17dd0:	1a30      	subs	r0, r6, r0
   17dd2:	eb67 0101 	sbc.w	r1, r7, r1
   17dd6:	f7e9 f991 	bl	10fc <__aeabi_uldivmod>
		     (ticks_slot_offset + conn->hdr.ticks_slot),
   17dda:	68e3      	ldr	r3, [r4, #12]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17ddc:	442b      	add	r3, r5
   17dde:	b29b      	uxth	r3, r3
   17de0:	f240 428a 	movw	r2, #1162	; 0x48a
   17de4:	9208      	str	r2, [sp, #32]
   17de6:	4a0e      	ldr	r2, [pc, #56]	; (17e20 <isr_rx_adv+0x618>)
   17de8:	9207      	str	r2, [sp, #28]
   17dea:	9406      	str	r4, [sp, #24]
   17dec:	4a0d      	ldr	r2, [pc, #52]	; (17e24 <isr_rx_adv+0x61c>)
   17dee:	9205      	str	r2, [sp, #20]
   17df0:	e01a      	b.n	17e28 <isr_rx_adv+0x620>
   17df2:	bf00      	nop
   17df4:	f3af 8000 	nop.w
   17df8:	1afd498d 	.word	0x1afd498d
   17dfc:	00000007 	.word	0x00000007
   17e00:	200014d4 	.word	0x200014d4
   17e04:	026259ff 	.word	0x026259ff
   17e08:	01c9c37f 	.word	0x01c9c37f
   17e0c:	00031ba0 	.word	0x00031ba0
   17e10:	431bde83 	.word	0x431bde83
   17e14:	3b9aca00 	.word	0x3b9aca00
   17e18:	00011a71 	.word	0x00011a71
   17e1c:	1afd498d 	.word	0x1afd498d
   17e20:	00011a1d 	.word	0x00011a1d
   17e24:	000165d5 	.word	0x000165d5
   17e28:	9304      	str	r3, [sp, #16]
   17e2a:	f8cd 800c 	str.w	r8, [sp, #12]
   17e2e:	9002      	str	r0, [sp, #8]
   17e30:	f8cd b004 	str.w	fp, [sp, #4]
   17e34:	f8cd a000 	str.w	sl, [sp]
   17e38:	464b      	mov	r3, r9
   17e3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17e3c:	4641      	mov	r1, r8
   17e3e:	4640      	mov	r0, r8
   17e40:	f7f8 ff42 	bl	10cc8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17e44:	4603      	mov	r3, r0
   17e46:	2800      	cmp	r0, #0
   17e48:	f43f acff 	beq.w	1784a <isr_rx_adv+0x42>
   17e4c:	2802      	cmp	r0, #2
   17e4e:	d13d      	bne.n	17ecc <isr_rx_adv+0x6c4>
		return 0;
   17e50:	2300      	movs	r3, #0
   17e52:	e4fa      	b.n	1784a <isr_rx_adv+0x42>
		return (_radio.packet_rx_count -
   17e54:	4923      	ldr	r1, [pc, #140]	; (17ee4 <isr_rx_adv+0x6dc>)
   17e56:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17e5a:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17e5e:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   17e60:	fa52 f383 	uxtab	r3, r2, r3
   17e64:	b2db      	uxtb	r3, r3
   17e66:	e62b      	b.n	17ac0 <isr_rx_adv+0x2b8>
		return 0;
   17e68:	2500      	movs	r5, #0
   17e6a:	e633      	b.n	17ad4 <isr_rx_adv+0x2cc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   17e6c:	2206      	movs	r2, #6
   17e6e:	2100      	movs	r1, #0
   17e70:	f105 0014 	add.w	r0, r5, #20
   17e74:	f012 fd20 	bl	2a8b8 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   17e78:	4641      	mov	r1, r8
   17e7a:	f811 3b02 	ldrb.w	r3, [r1], #2
   17e7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17e82:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   17e84:	2206      	movs	r2, #6
   17e86:	f105 000e 	add.w	r0, r5, #14
   17e8a:	f7e8 fa19 	bl	2c0 <memcpy>
   17e8e:	e6b6      	b.n	17bfe <isr_rx_adv+0x3f6>
		return (_radio.packet_rx_count -
   17e90:	4914      	ldr	r1, [pc, #80]	; (17ee4 <isr_rx_adv+0x6dc>)
   17e92:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17e96:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17e9a:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   17e9c:	fa52 f383 	uxtab	r3, r2, r3
   17ea0:	b2db      	uxtb	r3, r3
   17ea2:	e6d1      	b.n	17c48 <isr_rx_adv+0x440>
		return 0;
   17ea4:	2300      	movs	r3, #0
   17ea6:	e6d9      	b.n	17c5c <isr_rx_adv+0x454>
			LL_ASSERT(radio_pdu_node_rx);
   17ea8:	4040      	eors	r0, r0
   17eaa:	f380 8811 	msr	BASEPRI, r0
   17eae:	f04f 0004 	mov.w	r0, #4
   17eb2:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   17eb4:	2200      	movs	r2, #0
   17eb6:	72da      	strb	r2, [r3, #11]
   17eb8:	e6ed      	b.n	17c96 <isr_rx_adv+0x48e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17eba:	4658      	mov	r0, fp
   17ebc:	f8cd b000 	str.w	fp, [sp]
   17ec0:	465b      	mov	r3, fp
   17ec2:	2203      	movs	r2, #3
   17ec4:	4659      	mov	r1, fp
   17ec6:	f7f8 ff9b 	bl	10e00 <ticker_stop>
   17eca:	e753      	b.n	17d74 <isr_rx_adv+0x56c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17ecc:	4040      	eors	r0, r0
   17ece:	f380 8811 	msr	BASEPRI, r0
   17ed2:	f04f 0004 	mov.w	r0, #4
   17ed6:	df02      	svc	2
	return 1;
   17ed8:	2301      	movs	r3, #1
   17eda:	e4b6      	b.n	1784a <isr_rx_adv+0x42>
   17edc:	2301      	movs	r3, #1
   17ede:	e4b4      	b.n	1784a <isr_rx_adv+0x42>
			return 1;
   17ee0:	2301      	movs	r3, #1
   17ee2:	e4b2      	b.n	1784a <isr_rx_adv+0x42>
   17ee4:	200014d4 	.word	0x200014d4

00017ee8 <radio_init>:
{
   17ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17eec:	f89d e018 	ldrb.w	lr, [sp, #24]
   17ef0:	f8bd c01c 	ldrh.w	ip, [sp, #28]
   17ef4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   17ef6:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	_radio.hf_clock = hf_clock;
   17efa:	4c3b      	ldr	r4, [pc, #236]	; (17fe8 <radio_init+0x100>)
   17efc:	6020      	str	r0, [r4, #0]
	_radio.sca = sca;
   17efe:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
	mem_radio_end = mem_radio + mem_size;
   17f02:	19a8      	adds	r0, r5, r6
	_radio.connection_count = connection_count_max;
   17f04:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
	_radio.conn_pool = mem_radio;
   17f08:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   17f0c:	f44f 71aa 	mov.w	r1, #340	; 0x154
   17f10:	fb01 5102 	mla	r1, r1, r2, r5
	rx_count_max += 3;
   17f14:	f103 0803 	add.w	r8, r3, #3
   17f18:	fa5f f888 	uxtb.w	r8, r8
	tx_count_max += 1;
   17f1c:	f10e 0701 	add.w	r7, lr, #1
   17f20:	b2ff      	uxtb	r7, r7
	_radio.packet_rx_count = (rx_count_max + 1);
   17f22:	3304      	adds	r3, #4
   17f24:	b2dd      	uxtb	r5, r3
   17f26:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
	_radio.packet_tx_count = (tx_count_max + 1);
   17f2a:	f10e 0e02 	add.w	lr, lr, #2
   17f2e:	fa5f fe8e 	uxtb.w	lr, lr
   17f32:	f884 e170 	strb.w	lr, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = rx_count_max;
   17f36:	f884 8150 	strb.w	r8, [r4, #336]	; 0x150
	_radio.packet_rx = (void *)mem_radio;
   17f3a:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
	mem_radio +=
   17f3e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
	_radio.pkt_tx = (void *)mem_radio;
   17f42:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   17f46:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   17f4a:	4471      	add	r1, lr
	_radio.pkt_release = (void *)mem_radio;
   17f4c:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   17f50:	4471      	add	r1, lr
	_radio.packet_data_octets_max = packet_data_octets_max;
   17f52:	f8a4 c130 	strh.w	ip, [r4, #304]	; 0x130
	    (offsetof(struct pdu_data, payload) +
   17f56:	f10c 0303 	add.w	r3, ip, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   17f5a:	2b2a      	cmp	r3, #42	; 0x2a
   17f5c:	d931      	bls.n	17fc2 <radio_init+0xda>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   17f5e:	f10c 0c0e 	add.w	ip, ip, #14
		_radio.packet_rx_data_pool_size =
   17f62:	f02c 0c03 	bic.w	ip, ip, #3
   17f66:	fb1c f808 	smulbb	r8, ip, r8
   17f6a:	f8a4 8132 	strh.w	r8, [r4, #306]	; 0x132
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   17f6e:	4c1e      	ldr	r4, [pc, #120]	; (17fe8 <radio_init+0x100>)
   17f70:	2334      	movs	r3, #52	; 0x34
   17f72:	f8a4 3134 	strh.w	r3, [r4, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   17f76:	f8b4 e132 	ldrh.w	lr, [r4, #306]	; 0x132
   17f7a:	4b1c      	ldr	r3, [pc, #112]	; (17fec <radio_init+0x104>)
   17f7c:	fba3 c30e 	umull	ip, r3, r3, lr
   17f80:	091b      	lsrs	r3, r3, #4
   17f82:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
	_radio.pkt_rx_data_pool = mem_radio;
   17f86:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
	mem_radio += _radio.packet_rx_data_pool_size;
   17f8a:	4471      	add	r1, lr
	_radio.link_rx_pool = mem_radio;
   17f8c:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   17f90:	442a      	add	r2, r5
   17f92:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	_radio.pkt_tx_ctrl_pool = mem_radio;
   17f96:	f8c4 2154 	str.w	r2, [r4, #340]	; 0x154
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   17f9a:	3248      	adds	r2, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   17f9c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   17fa0:	330a      	adds	r3, #10
   17fa2:	b29b      	uxth	r3, r3
   17fa4:	f023 0303 	bic.w	r3, r3, #3
   17fa8:	b29b      	uxth	r3, r3
	_radio.packet_tx_data_size =
   17faa:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
	_radio.pkt_tx_data_pool = mem_radio;
   17fae:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   17fb2:	fb03 2707 	mla	r7, r3, r7, r2
	if (retcode) {
   17fb6:	1a3f      	subs	r7, r7, r0
   17fb8:	d00d      	beq.n	17fd6 <radio_init+0xee>
		return (retcode + mem_size);
   17fba:	4437      	add	r7, r6
}
   17fbc:	4638      	mov	r0, r7
   17fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   17fc2:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   17fc6:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   17fca:	ea4f 0388 	mov.w	r3, r8, lsl #2
		_radio.packet_rx_data_pool_size =
   17fce:	4c06      	ldr	r4, [pc, #24]	; (17fe8 <radio_init+0x100>)
   17fd0:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
   17fd4:	e7cb      	b.n	17f6e <radio_init+0x86>
	_radio.fc_ena = 1;
   17fd6:	2201      	movs	r2, #1
   17fd8:	4b03      	ldr	r3, [pc, #12]	; (17fe8 <radio_init+0x100>)
   17fda:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
	common_init();
   17fde:	f7ec ff21 	bl	4e24 <common_init>
	radio_setup();
   17fe2:	f7f7 faed 	bl	f5c0 <radio_setup>
	return retcode;
   17fe6:	e7e9      	b.n	17fbc <radio_init+0xd4>
   17fe8:	200014d4 	.word	0x200014d4
   17fec:	4ec4ec4f 	.word	0x4ec4ec4f

00017ff0 <ll_reset>:
{
   17ff0:	b510      	push	{r4, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   17ff2:	2103      	movs	r1, #3
   17ff4:	2005      	movs	r0, #5
   17ff6:	f7f9 ff9b 	bl	11f30 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   17ffa:	2104      	movs	r1, #4
   17ffc:	2006      	movs	r0, #6
   17ffe:	f7f9 ff97 	bl	11f30 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   18002:	2400      	movs	r4, #0
   18004:	e006      	b.n	18014 <ll_reset+0x24>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   18006:	1de0      	adds	r0, r4, #7
   18008:	21ff      	movs	r1, #255	; 0xff
   1800a:	b2c0      	uxtb	r0, r0
   1800c:	f7f9 ff90 	bl	11f30 <role_disable>
	     conn_handle++) {
   18010:	3401      	adds	r4, #1
   18012:	b2a4      	uxth	r4, r4
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   18014:	4b1d      	ldr	r3, [pc, #116]	; (1808c <ll_reset+0x9c>)
   18016:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   1801a:	429c      	cmp	r4, r3
   1801c:	d3f3      	bcc.n	18006 <ll_reset+0x16>
	_radio.advertiser.is_enabled = 0;
   1801e:	4b1b      	ldr	r3, [pc, #108]	; (1808c <ll_reset+0x9c>)
   18020:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18024:	f36f 0200 	bfc	r2, #0, #1
   18028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	_radio.advertiser.conn = NULL;
   1802c:	2000      	movs	r0, #0
   1802e:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
	_radio.scanner.is_enabled = 0;
   18032:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   18036:	f360 0200 	bfi	r2, r0, #0, #1
   1803a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	_radio.scanner.conn = NULL;
   1803e:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   18042:	2234      	movs	r2, #52	; 0x34
   18044:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   18048:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
   1804c:	4910      	ldr	r1, [pc, #64]	; (18090 <ll_reset+0xa0>)
   1804e:	fba1 1202 	umull	r1, r2, r1, r2
   18052:	0912      	lsrs	r2, r2, #4
   18054:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	_radio.packet_rx_last = 0;
   18058:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
	_radio.packet_rx_acquire = 0;
   1805c:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   18060:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
   18064:	3a01      	subs	r2, #1
   18066:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	_radio.packet_tx_first = 0;
   1806a:	f883 0171 	strb.w	r0, [r3, #369]	; 0x171
	_radio.packet_tx_last = 0;
   1806e:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
	_radio.packet_release_first = 0;
   18072:	f883 0173 	strb.w	r0, [r3, #371]	; 0x173
	_radio.packet_release_last = 0;
   18076:	f883 0174 	strb.w	r0, [r3, #372]	; 0x174
	_radio.fc_ack = _radio.fc_req;
   1807a:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   1807e:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	ll_filter_reset(false);
   18082:	f002 fa69 	bl	1a558 <ll_filter_reset>
	common_init();
   18086:	f7ec fecd 	bl	4e24 <common_init>
   1808a:	bd10      	pop	{r4, pc}
   1808c:	200014d4 	.word	0x200014d4
   18090:	4ec4ec4f 	.word	0x4ec4ec4f

00018094 <radio_adv_data_get>:
}
   18094:	4800      	ldr	r0, [pc, #0]	; (18098 <radio_adv_data_get+0x4>)
   18096:	4770      	bx	lr
   18098:	200014fb 	.word	0x200014fb

0001809c <radio_scan_data_get>:
}
   1809c:	4800      	ldr	r0, [pc, #0]	; (180a0 <radio_scan_data_get+0x4>)
   1809e:	4770      	bx	lr
   180a0:	2000154b 	.word	0x2000154b

000180a4 <radio_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   180a4:	4b02      	ldr	r3, [pc, #8]	; (180b0 <radio_adv_is_enabled+0xc>)
   180a6:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
}
   180aa:	f000 0001 	and.w	r0, r0, #1
   180ae:	4770      	bx	lr
   180b0:	200014d4 	.word	0x200014d4

000180b4 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   180b4:	4b06      	ldr	r3, [pc, #24]	; (180d0 <radio_adv_filter_pol_get+0x1c>)
   180b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   180ba:	f013 0f01 	tst.w	r3, #1
   180be:	d004      	beq.n	180ca <radio_adv_filter_pol_get+0x16>
		return _radio.advertiser.filter_policy;
   180c0:	4b03      	ldr	r3, [pc, #12]	; (180d0 <radio_adv_filter_pol_get+0x1c>)
   180c2:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   180c6:	0980      	lsrs	r0, r0, #6
   180c8:	4770      	bx	lr
	return 0;
   180ca:	2000      	movs	r0, #0
}
   180cc:	4770      	bx	lr
   180ce:	bf00      	nop
   180d0:	200014d4 	.word	0x200014d4

000180d4 <radio_scan_is_enabled>:
	return _radio.scanner.is_enabled;
   180d4:	4b02      	ldr	r3, [pc, #8]	; (180e0 <radio_scan_is_enabled+0xc>)
   180d6:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
}
   180da:	f000 0001 	and.w	r0, r0, #1
   180de:	4770      	bx	lr
   180e0:	200014d4 	.word	0x200014d4

000180e4 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   180e4:	4b06      	ldr	r3, [pc, #24]	; (18100 <radio_scan_filter_pol_get+0x1c>)
   180e6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   180ea:	f013 0f01 	tst.w	r3, #1
   180ee:	d005      	beq.n	180fc <radio_scan_filter_pol_get+0x18>
		return _radio.scanner.filter_policy;
   180f0:	4b03      	ldr	r3, [pc, #12]	; (18100 <radio_scan_filter_pol_get+0x1c>)
   180f2:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
   180f6:	f3c0 1001 	ubfx	r0, r0, #4, #2
   180fa:	4770      	bx	lr
	return 0;
   180fc:	2000      	movs	r0, #0
}
   180fe:	4770      	bx	lr
   18100:	200014d4 	.word	0x200014d4
   18104:	00000000 	.word	0x00000000

00018108 <radio_connect_enable>:
{
   18108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1810c:	b083      	sub	sp, #12
	if (_radio.scanner.conn) {
   1810e:	4c94      	ldr	r4, [pc, #592]	; (18360 <radio_connect_enable+0x258>)
   18110:	f8d4 40fc 	ldr.w	r4, [r4, #252]	; 0xfc
   18114:	b11c      	cbz	r4, 1811e <radio_connect_enable+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18116:	200c      	movs	r0, #12
}
   18118:	b003      	add	sp, #12
   1811a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1811e:	461f      	mov	r7, r3
   18120:	4616      	mov	r6, r2
   18122:	460d      	mov	r5, r1
   18124:	4604      	mov	r4, r0
	link = mem_acquire(&_radio.link_rx_free);
   18126:	488f      	ldr	r0, [pc, #572]	; (18364 <radio_connect_enable+0x25c>)
   18128:	f7f7 f8fd 	bl	f326 <mem_acquire>
	if (!link) {
   1812c:	4681      	mov	r9, r0
   1812e:	2800      	cmp	r0, #0
   18130:	f000 810f 	beq.w	18352 <radio_connect_enable+0x24a>
	conn = mem_acquire(&_radio.conn_free);
   18134:	488c      	ldr	r0, [pc, #560]	; (18368 <radio_connect_enable+0x260>)
   18136:	f7f7 f8f6 	bl	f326 <mem_acquire>
   1813a:	9001      	str	r0, [sp, #4]
	if (!conn) {
   1813c:	2800      	cmp	r0, #0
   1813e:	f000 8102 	beq.w	18346 <radio_connect_enable+0x23e>
	_radio.scanner.adv_addr_type = adv_addr_type;
   18142:	f8df 821c 	ldr.w	r8, [pc, #540]	; 18360 <radio_connect_enable+0x258>
   18146:	f898 30dd 	ldrb.w	r3, [r8, #221]	; 0xdd
   1814a:	f364 1386 	bfi	r3, r4, #6, #1
   1814e:	f888 30dd 	strb.w	r3, [r8, #221]	; 0xdd
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   18152:	2206      	movs	r2, #6
   18154:	4629      	mov	r1, r5
   18156:	f108 00e6 	add.w	r0, r8, #230	; 0xe6
   1815a:	f7e8 f8b1 	bl	2c0 <memcpy>
	_radio.scanner.conn_interval = interval;
   1815e:	f8a8 60f0 	strh.w	r6, [r8, #240]	; 0xf0
	_radio.scanner.conn_latency = latency;
   18162:	f8a8 70f2 	strh.w	r7, [r8, #242]	; 0xf2
	_radio.scanner.conn_timeout = timeout;
   18166:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1816a:	f8a8 30f4 	strh.w	r3, [r8, #244]	; 0xf4
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   1816e:	2100      	movs	r1, #0
   18170:	4608      	mov	r0, r1
   18172:	f7f7 fad5 	bl	f720 <radio_tx_ready_delay_get>
   18176:	f200 4052 	addw	r0, r0, #1106	; 0x452
   1817a:	2400      	movs	r4, #0
   1817c:	a376      	add	r3, pc, #472	; (adr r3, 18358 <radio_connect_enable+0x250>)
   1817e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18182:	497a      	ldr	r1, [pc, #488]	; (1836c <radio_connect_enable+0x264>)
   18184:	fba0 0101 	umull	r0, r1, r0, r1
   18188:	f7e8 ffb8 	bl	10fc <__aeabi_uldivmod>
   1818c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_conn_slot =
   18190:	f8c8 00f8 	str.w	r0, [r8, #248]	; 0xf8
	conn->handle = 0xFFFF;
   18194:	9b01      	ldr	r3, [sp, #4]
   18196:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1819a:	841a      	strh	r2, [r3, #32]
	conn->llcp_features = RADIO_BLE_FEAT;
   1819c:	f502 4284 	add.w	r2, r2, #16896	; 0x4200
   181a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	access_addr = access_addr_get();
   181a4:	f7fe fe84 	bl	16eb0 <access_addr_get>
   181a8:	9000      	str	r0, [sp, #0]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   181aa:	2204      	movs	r2, #4
   181ac:	4669      	mov	r1, sp
   181ae:	9801      	ldr	r0, [sp, #4]
   181b0:	3010      	adds	r0, #16
   181b2:	f7e8 f885 	bl	2c0 <memcpy>
	memcpy(&conn->crc_init[0], &conn, 3);
   181b6:	a902      	add	r1, sp, #8
   181b8:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   181bc:	2203      	movs	r2, #3
   181be:	3014      	adds	r0, #20
   181c0:	f7e8 f87e 	bl	2c0 <memcpy>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   181c4:	2205      	movs	r2, #5
   181c6:	f508 718b 	add.w	r1, r8, #278	; 0x116
   181ca:	9801      	ldr	r0, [sp, #4]
   181cc:	3017      	adds	r0, #23
   181ce:	f7e8 f877 	bl	2c0 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   181d2:	9b01      	ldr	r3, [sp, #4]
   181d4:	f898 111b 	ldrb.w	r1, [r8, #283]	; 0x11b
   181d8:	7f5a      	ldrb	r2, [r3, #29]
   181da:	f361 0205 	bfi	r2, r1, #0, #6
	conn->data_chan_sel = 0;
   181de:	f364 1286 	bfi	r2, r4, #6, #1
   181e2:	775a      	strb	r2, [r3, #29]
	conn->data_chan_hop = 6;
   181e4:	2506      	movs	r5, #6
   181e6:	779d      	strb	r5, [r3, #30]
	conn->data_chan_use = 0;
   181e8:	77dc      	strb	r4, [r3, #31]
	conn->event_counter = 0;
   181ea:	845c      	strh	r4, [r3, #34]	; 0x22
	conn->conn_interval = _radio.scanner.conn_interval;
   181ec:	f8b8 20f0 	ldrh.w	r2, [r8, #240]	; 0xf0
   181f0:	849a      	strh	r2, [r3, #36]	; 0x24
	conn->latency_prepare = 0;
   181f2:	851c      	strh	r4, [r3, #40]	; 0x28
	conn->latency_event = 0;
   181f4:	855c      	strh	r4, [r3, #42]	; 0x2a
	conn->latency = _radio.scanner.conn_latency;
   181f6:	f8b8 00f2 	ldrh.w	r0, [r8, #242]	; 0xf2
   181fa:	84d8      	strh	r0, [r3, #38]	; 0x26
	conn->default_tx_octets = _radio.default_tx_octets;
   181fc:	f8b8 211e 	ldrh.w	r2, [r8, #286]	; 0x11e
   18200:	859a      	strh	r2, [r3, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18202:	221b      	movs	r2, #27
   18204:	85da      	strh	r2, [r3, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18206:	861a      	strh	r2, [r3, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   18208:	f8b8 2120 	ldrh.w	r2, [r8, #288]	; 0x120
   1820c:	865a      	strh	r2, [r3, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1820e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18212:	869a      	strh	r2, [r3, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   18214:	86da      	strh	r2, [r3, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   18216:	f898 1122 	ldrb.w	r1, [r8, #290]	; 0x122
   1821a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1821e:	f361 0202 	bfi	r2, r1, #0, #3
	conn->phy_tx = BIT(0);
   18222:	2101      	movs	r1, #1
   18224:	f361 02c5 	bfi	r2, r1, #3, #3
	conn->phy_flags = 0;
   18228:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   1822c:	f364 12c7 	bfi	r2, r4, #7, #1
   18230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   18234:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   18238:	f361 0202 	bfi	r2, r1, #0, #3
   1823c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   18240:	f898 6124 	ldrb.w	r6, [r8, #292]	; 0x124
   18244:	b2d2      	uxtb	r2, r2
   18246:	f366 02c5 	bfi	r2, r6, #3, #3
   1824a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_rx = BIT(0);
   1824e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   18252:	f361 0202 	bfi	r2, r1, #0, #3
   18256:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	conn->role = 0;
   1825a:	7f5a      	ldrb	r2, [r3, #29]
   1825c:	f364 12c7 	bfi	r2, r4, #7, #1
   18260:	775a      	strb	r2, [r3, #29]
	conn->connect_expire = 6;
   18262:	879d      	strh	r5, [r3, #60]	; 0x3c
	conn->common.fex_valid = 0;
   18264:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	conn->master.terminate_ack = 0;
   18268:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1826c:	f364 0200 	bfi	r2, r4, #0, #1
   18270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		(u32_t)_radio.scanner.conn_interval * 1250;
   18274:	f8b8 10f0 	ldrh.w	r1, [r8, #240]	; 0xf0
	conn_interval_us =
   18278:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1827c:	fb02 f101 	mul.w	r1, r2, r1
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   18280:	f8b8 20f4 	ldrh.w	r2, [r8, #244]	; 0xf4
   18284:	f242 7510 	movw	r5, #10000	; 0x2710
   18288:	fb05 1202 	mla	r2, r5, r2, r1
   1828c:	3a01      	subs	r2, #1
   1828e:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->supervision_reload =
   18292:	87da      	strh	r2, [r3, #62]	; 0x3e
	conn->supervision_expire = 0;
   18294:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   18298:	4a35      	ldr	r2, [pc, #212]	; (18370 <radio_connect_enable+0x268>)
   1829a:	440a      	add	r2, r1
   1829c:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->procedure_reload =
   182a0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	conn->procedure_expire = 0;
   182a4:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   182a8:	4a32      	ldr	r2, [pc, #200]	; (18374 <radio_connect_enable+0x26c>)
   182aa:	440a      	add	r2, r1
   182ac:	fbb2 f2f1 	udiv	r2, r2, r1
   182b0:	b292      	uxth	r2, r2
   182b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   182b6:	1d81      	adds	r1, r0, #6
   182b8:	428a      	cmp	r2, r1
   182ba:	dd03      	ble.n	182c4 <radio_connect_enable+0x1bc>
			     (conn->apto_reload - (conn->latency + 6)) :
   182bc:	1a12      	subs	r2, r2, r0
   182be:	b292      	uxth	r2, r2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   182c0:	3a06      	subs	r2, #6
   182c2:	b292      	uxth	r2, r2
   182c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	conn->apto_expire = 0;
   182c8:	2000      	movs	r0, #0
   182ca:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
	conn->appto_expire = 0;
   182ce:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
	conn->llcp_req = 0;
   182d2:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
	conn->llcp_ack = 0;
   182d6:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
	conn->llcp_version.tx = 0;
   182da:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_version.rx = 0;
   182de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   182e2:	f360 0241 	bfi	r2, r0, #1, #1
   182e6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_terminate.req = 0;
   182ea:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   182ee:	f883 00b1 	strb.w	r0, [r3, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   182f2:	f883 00b3 	strb.w	r0, [r3, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   182f6:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   182fa:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   182fe:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
	conn->llcp_length.req = 0;
   18302:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   18306:	f883 00e9 	strb.w	r0, [r3, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   1830a:	f883 00f4 	strb.w	r0, [r3, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   1830e:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
	conn->sn = 0;
   18312:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	conn->empty = 0;
   18316:	f002 0280 	and.w	r2, r2, #128	; 0x80
   1831a:	f360 12c7 	bfi	r2, r0, #7, #1
   1831e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   18322:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   18326:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   1832a:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   1832e:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   18332:	f8c3 014c 	str.w	r0, [r3, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   18336:	f883 0150 	strb.w	r0, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   1833a:	f883 0151 	strb.w	r0, [r3, #337]	; 0x151
	_radio.scanner.conn = conn;
   1833e:	4a08      	ldr	r2, [pc, #32]	; (18360 <radio_connect_enable+0x258>)
   18340:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
	return 0;
   18344:	e6e8      	b.n	18118 <radio_connect_enable+0x10>
		mem_release(link, &_radio.link_rx_free);
   18346:	4907      	ldr	r1, [pc, #28]	; (18364 <radio_connect_enable+0x25c>)
   18348:	4648      	mov	r0, r9
   1834a:	f7f7 f808 	bl	f35e <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1834e:	2007      	movs	r0, #7
   18350:	e6e2      	b.n	18118 <radio_connect_enable+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18352:	2007      	movs	r0, #7
   18354:	e6e0      	b.n	18118 <radio_connect_enable+0x10>
   18356:	bf00      	nop
   18358:	1afd498d 	.word	0x1afd498d
   1835c:	00000007 	.word	0x00000007
   18360:	200014d4 	.word	0x200014d4
   18364:	20001618 	.word	0x20001618
   18368:	200015dc 	.word	0x200015dc
   1836c:	3b9aca00 	.word	0x3b9aca00
   18370:	026259ff 	.word	0x026259ff
   18374:	01c9c37f 	.word	0x01c9c37f

00018378 <ll_conn_update>:
{
   18378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1837c:	460c      	mov	r4, r1
   1837e:	4690      	mov	r8, r2
   18380:	461f      	mov	r7, r3
   18382:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   18386:	f8bd 501c 	ldrh.w	r5, [sp, #28]
	conn = connection_get(handle);
   1838a:	f7f9 fdb3 	bl	11ef4 <connection_get>
	if (!conn) {
   1838e:	2800      	cmp	r0, #0
   18390:	d078      	beq.n	18484 <ll_conn_update+0x10c>
   18392:	4603      	mov	r3, r0
	if (!cmd) {
   18394:	b984      	cbnz	r4, 183b8 <ll_conn_update+0x40>
		if (conn->common.fex_valid &&
   18396:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   1839a:	f012 0f20 	tst.w	r2, #32
   1839e:	d007      	beq.n	183b0 <ll_conn_update+0x38>
		    (conn->llcp_features &
   183a0:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
		if (conn->common.fex_valid &&
   183a4:	f012 0f02 	tst.w	r2, #2
   183a8:	d002      	beq.n	183b0 <ll_conn_update+0x38>
			cmd++;
   183aa:	3401      	adds	r4, #1
   183ac:	b2e4      	uxtb	r4, r4
   183ae:	e003      	b.n	183b8 <ll_conn_update+0x40>
		} else if (conn->role) {
   183b0:	f993 201d 	ldrsb.w	r2, [r3, #29]
   183b4:	2a00      	cmp	r2, #0
   183b6:	db68      	blt.n	1848a <ll_conn_update+0x112>
	if (!cmd) {
   183b8:	bb1c      	cbnz	r4, 18402 <ll_conn_update+0x8a>
		if (conn->llcp_req != conn->llcp_ack) {
   183ba:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   183be:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
   183c2:	428a      	cmp	r2, r1
   183c4:	d002      	beq.n	183cc <ll_conn_update+0x54>
			return 1;
   183c6:	2001      	movs	r0, #1
   183c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->llcp.conn_upd.win_size = 1;
   183cc:	2401      	movs	r4, #1
   183ce:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   183d2:	2000      	movs	r0, #0
   183d4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = interval;
   183d8:	f8a3 707a 	strh.w	r7, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = latency;
   183dc:	f8a3 607c 	strh.w	r6, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   183e0:	f8a3 507e 	strh.w	r5, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   183e4:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   183e8:	f364 0101 	bfi	r1, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   183ec:	f360 0182 	bfi	r1, r0, #2, #1
   183f0:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   183f4:	f883 4076 	strb.w	r4, [r3, #118]	; 0x76
		conn->llcp_req++;
   183f8:	4422      	add	r2, r4
   183fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   183fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cmd--;
   18402:	3c01      	subs	r4, #1
		if (cmd) {
   18404:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   18408:	d01c      	beq.n	18444 <ll_conn_update+0xcc>
			if ((conn->llcp_conn_param.req ==
   1840a:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
			     conn->llcp_conn_param.ack) ||
   1840e:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
			if ((conn->llcp_conn_param.req ==
   18412:	4291      	cmp	r1, r2
   18414:	d03c      	beq.n	18490 <ll_conn_update+0x118>
			    (conn->llcp_conn_param.state !=
   18416:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   1841a:	f002 0207 	and.w	r2, r2, #7
			     conn->llcp_conn_param.ack) ||
   1841e:	2a03      	cmp	r2, #3
   18420:	d002      	beq.n	18428 <ll_conn_update+0xb0>
				return 1;
   18422:	2001      	movs	r0, #1
   18424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = status;
   18428:	f883 80c3 	strb.w	r8, [r3, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   1842c:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   18430:	f364 0202 	bfi	r2, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   18434:	b2d2      	uxtb	r2, r2
   18436:	f042 0208 	orr.w	r2, r2, #8
   1843a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	return 0;
   1843e:	2000      	movs	r0, #0
   18440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (conn->llcp_conn_param.req !=
   18444:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
			    conn->llcp_conn_param.ack) {
   18448:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			if (conn->llcp_conn_param.req !=
   1844c:	428a      	cmp	r2, r1
   1844e:	d002      	beq.n	18456 <ll_conn_update+0xde>
				return 1;
   18450:	2001      	movs	r0, #1
}
   18452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = 0;
   18456:	2000      	movs	r0, #0
   18458:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
			conn->llcp_conn_param.interval = interval;
   1845c:	f8a3 70c4 	strh.w	r7, [r3, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   18460:	f8a3 60c6 	strh.w	r6, [r3, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   18464:	f8a3 50c8 	strh.w	r5, [r3, #200]	; 0xc8
			conn->llcp_conn_param.state = cmd;
   18468:	f893 10c2 	ldrb.w	r1, [r3, #194]	; 0xc2
   1846c:	f364 0102 	bfi	r1, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   18470:	b2c9      	uxtb	r1, r1
   18472:	f041 0108 	orr.w	r1, r1, #8
   18476:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   1847a:	3201      	adds	r2, #1
   1847c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
   18480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
   18484:	2001      	movs	r0, #1
   18486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return 1;
   1848a:	2001      	movs	r0, #1
   1848c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return 1;
   18490:	2001      	movs	r0, #1
   18492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00018498 <ll_chm_update>:
{
   18498:	b570      	push	{r4, r5, r6, lr}
   1849a:	4606      	mov	r6, r0
	memcpy(&_radio.data_chan_map[0], chm,
   1849c:	4c1c      	ldr	r4, [pc, #112]	; (18510 <ll_chm_update+0x78>)
   1849e:	f504 758b 	add.w	r5, r4, #278	; 0x116
   184a2:	2205      	movs	r2, #5
   184a4:	4601      	mov	r1, r0
   184a6:	4628      	mov	r0, r5
   184a8:	f7e7 ff0a 	bl	2c0 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   184ac:	2105      	movs	r1, #5
   184ae:	4628      	mov	r0, r5
   184b0:	f7f6 ffbd 	bl	f42e <util_ones_count_get>
	_radio.data_chan_count =
   184b4:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	instance = _radio.connection_count;
   184b8:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
	while (instance--) {
   184bc:	e000      	b.n	184c0 <ll_chm_update+0x28>
{
   184be:	462b      	mov	r3, r5
	while (instance--) {
   184c0:	1e5d      	subs	r5, r3, #1
   184c2:	b2ed      	uxtb	r5, r5
   184c4:	b303      	cbz	r3, 18508 <ll_chm_update+0x70>
		conn = connection_get(instance);
   184c6:	4628      	mov	r0, r5
   184c8:	f7f9 fd14 	bl	11ef4 <connection_get>
		if (!conn || conn->role) {
   184cc:	4604      	mov	r4, r0
   184ce:	2800      	cmp	r0, #0
   184d0:	d0f5      	beq.n	184be <ll_chm_update+0x26>
   184d2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   184d6:	2b00      	cmp	r3, #0
   184d8:	dbf1      	blt.n	184be <ll_chm_update+0x26>
		if (conn->llcp_req != conn->llcp_ack) {
   184da:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   184de:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   184e2:	429a      	cmp	r2, r3
   184e4:	d112      	bne.n	1850c <ll_chm_update+0x74>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   184e6:	2205      	movs	r2, #5
   184e8:	4631      	mov	r1, r6
   184ea:	3079      	adds	r0, #121	; 0x79
   184ec:	f7e7 fee8 	bl	2c0 <memcpy>
		conn->llcp.chan_map.initiate = 1;
   184f0:	2301      	movs	r3, #1
   184f2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CHAN_MAP;
   184f6:	2302      	movs	r3, #2
   184f8:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_req++;
   184fc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   18500:	3301      	adds	r3, #1
   18502:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   18506:	e7da      	b.n	184be <ll_chm_update+0x26>
	return 0;
   18508:	2000      	movs	r0, #0
   1850a:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   1850c:	2001      	movs	r0, #1
}
   1850e:	bd70      	pop	{r4, r5, r6, pc}
   18510:	200014d4 	.word	0x200014d4

00018514 <ll_chm_get>:
{
   18514:	b538      	push	{r3, r4, r5, lr}
   18516:	460d      	mov	r5, r1
	conn = connection_get(handle);
   18518:	f7f9 fcec 	bl	11ef4 <connection_get>
	if (!conn) {
   1851c:	4604      	mov	r4, r0
   1851e:	b160      	cbz	r0, 1853a <ll_chm_get+0x26>
		conn->chm_update = 0;
   18520:	2300      	movs	r3, #0
   18522:	7723      	strb	r3, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   18524:	2205      	movs	r2, #5
   18526:	f104 0117 	add.w	r1, r4, #23
   1852a:	4628      	mov	r0, r5
   1852c:	f7e7 fec8 	bl	2c0 <memcpy>
	} while (conn->chm_update);
   18530:	7f23      	ldrb	r3, [r4, #28]
   18532:	2b00      	cmp	r3, #0
   18534:	d1f4      	bne.n	18520 <ll_chm_get+0xc>
	return 0;
   18536:	2000      	movs	r0, #0
   18538:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   1853a:	2001      	movs	r0, #1
}
   1853c:	bd38      	pop	{r3, r4, r5, pc}

0001853e <ll_start_enc_req_send>:
{
   1853e:	b570      	push	{r4, r5, r6, lr}
   18540:	460d      	mov	r5, r1
   18542:	4616      	mov	r6, r2
	conn = connection_get(handle);
   18544:	f7f9 fcd6 	bl	11ef4 <connection_get>
	if (!conn) {
   18548:	2800      	cmp	r0, #0
   1854a:	d03e      	beq.n	185ca <ll_start_enc_req_send+0x8c>
   1854c:	4604      	mov	r4, r0
	if (error_code) {
   1854e:	b32d      	cbz	r5, 1859c <ll_start_enc_req_send+0x5e>
		if (conn->refresh == 0) {
   18550:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   18554:	f013 0f40 	tst.w	r3, #64	; 0x40
   18558:	d111      	bne.n	1857e <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   1855a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   1855e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   18562:	4293      	cmp	r3, r2
   18564:	d001      	beq.n	1856a <ll_start_enc_req_send+0x2c>
				return 1;
   18566:	2001      	movs	r0, #1
   18568:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp.encryption.error_code = error_code;
   1856a:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
			conn->llcp_type = LLCP_ENCRYPTION;
   1856e:	2203      	movs	r2, #3
   18570:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
			conn->llcp_req++;
   18574:	3301      	adds	r3, #1
   18576:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   1857a:	2000      	movs	r0, #0
   1857c:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   1857e:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
			    conn->llcp_terminate.req) {
   18582:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
			if (conn->llcp_terminate.ack !=
   18586:	429a      	cmp	r2, r3
   18588:	d001      	beq.n	1858e <ll_start_enc_req_send+0x50>
				return 1;
   1858a:	2001      	movs	r0, #1
   1858c:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_own = error_code;
   1858e:	f880 50b2 	strb.w	r5, [r0, #178]	; 0xb2
			conn->llcp_terminate.req++;
   18592:	3301      	adds	r3, #1
   18594:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   18598:	2000      	movs	r0, #0
   1859a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   1859c:	2210      	movs	r2, #16
   1859e:	4631      	mov	r1, r6
   185a0:	3083      	adds	r0, #131	; 0x83
   185a2:	f7e7 fe8d 	bl	2c0 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   185a6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   185aa:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   185ae:	4293      	cmp	r3, r2
   185b0:	d001      	beq.n	185b6 <ll_start_enc_req_send+0x78>
			return 1;
   185b2:	2001      	movs	r0, #1
}
   185b4:	bd70      	pop	{r4, r5, r6, pc}
		conn->llcp.encryption.error_code = 0;
   185b6:	2000      	movs	r0, #0
   185b8:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   185bc:	2203      	movs	r2, #3
   185be:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   185c2:	3301      	adds	r3, #1
   185c4:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   185c8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   185ca:	2001      	movs	r0, #1
   185cc:	bd70      	pop	{r4, r5, r6, pc}

000185ce <ll_feature_req_send>:
{
   185ce:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   185d0:	f7f9 fc90 	bl	11ef4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   185d4:	b178      	cbz	r0, 185f6 <ll_feature_req_send+0x28>
   185d6:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   185da:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   185de:	428a      	cmp	r2, r1
   185e0:	d001      	beq.n	185e6 <ll_feature_req_send+0x18>
		return 1;
   185e2:	2001      	movs	r0, #1
}
   185e4:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   185e6:	2104      	movs	r1, #4
   185e8:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   185ec:	3201      	adds	r2, #1
   185ee:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   185f2:	2000      	movs	r0, #0
   185f4:	bd08      	pop	{r3, pc}
		return 1;
   185f6:	2001      	movs	r0, #1
   185f8:	bd08      	pop	{r3, pc}

000185fa <ll_version_ind_send>:
{
   185fa:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   185fc:	f7f9 fc7a 	bl	11ef4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   18600:	b178      	cbz	r0, 18622 <ll_version_ind_send+0x28>
   18602:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   18606:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   1860a:	428a      	cmp	r2, r1
   1860c:	d001      	beq.n	18612 <ll_version_ind_send+0x18>
		return 1;
   1860e:	2001      	movs	r0, #1
}
   18610:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   18612:	2105      	movs	r1, #5
   18614:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   18618:	3201      	adds	r2, #1
   1861a:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   1861e:	2000      	movs	r0, #0
   18620:	bd08      	pop	{r3, pc}
		return 1;
   18622:	2001      	movs	r0, #1
   18624:	bd08      	pop	{r3, pc}

00018626 <ll_terminate_ind_send>:
{
   18626:	b510      	push	{r4, lr}
   18628:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1862a:	f7f9 fc63 	bl	11ef4 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   1862e:	b170      	cbz	r0, 1864e <ll_terminate_ind_send+0x28>
   18630:	f890 10b1 	ldrb.w	r1, [r0, #177]	; 0xb1
   18634:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
   18638:	4291      	cmp	r1, r2
   1863a:	d001      	beq.n	18640 <ll_terminate_ind_send+0x1a>
		return 1;
   1863c:	2001      	movs	r0, #1
}
   1863e:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.reason_own = reason;
   18640:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   18644:	3201      	adds	r2, #1
   18646:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	return 0;
   1864a:	2000      	movs	r0, #0
   1864c:	bd10      	pop	{r4, pc}
		return 1;
   1864e:	2001      	movs	r0, #1
   18650:	bd10      	pop	{r4, pc}

00018652 <ll_tx_power_level_get>:
{
   18652:	b510      	push	{r4, lr}
   18654:	4614      	mov	r4, r2
	conn = connection_get(handle);
   18656:	f7f9 fc4d 	bl	11ef4 <connection_get>
	if (!conn) {
   1865a:	b110      	cbz	r0, 18662 <ll_tx_power_level_get+0x10>
	*tx_power_level = 0;
   1865c:	2000      	movs	r0, #0
   1865e:	7020      	strb	r0, [r4, #0]
	return 0;
   18660:	bd10      	pop	{r4, pc}
		return 1;
   18662:	2001      	movs	r0, #1
}
   18664:	bd10      	pop	{r4, pc}

00018666 <ll_tx_power_get>:
	*min = 0;
   18666:	2300      	movs	r3, #0
   18668:	7003      	strb	r3, [r0, #0]
	*max = 0;
   1866a:	700b      	strb	r3, [r1, #0]
   1866c:	4770      	bx	lr
	...

00018670 <ll_apto_get>:
{
   18670:	b510      	push	{r4, lr}
   18672:	460c      	mov	r4, r1
	conn = connection_get(handle);
   18674:	f7f9 fc3e 	bl	11ef4 <connection_get>
	if (!conn) {
   18678:	b188      	cbz	r0, 1869e <ll_apto_get+0x2e>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   1867a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   1867e:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   18680:	fb03 f301 	mul.w	r3, r3, r1
   18684:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   18688:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1868c:	4a05      	ldr	r2, [pc, #20]	; (186a4 <ll_apto_get+0x34>)
   1868e:	fb82 1203 	smull	r1, r2, r2, r3
   18692:	17db      	asrs	r3, r3, #31
   18694:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   18698:	8023      	strh	r3, [r4, #0]
	return 0;
   1869a:	2000      	movs	r0, #0
   1869c:	bd10      	pop	{r4, pc}
		return 1;
   1869e:	2001      	movs	r0, #1
}
   186a0:	bd10      	pop	{r4, pc}
   186a2:	bf00      	nop
   186a4:	10624dd3 	.word	0x10624dd3

000186a8 <ll_apto_set>:
{
   186a8:	b510      	push	{r4, lr}
   186aa:	460c      	mov	r4, r1
	conn = connection_get(handle);
   186ac:	f7f9 fc22 	bl	11ef4 <connection_get>
	if (!conn) {
   186b0:	b178      	cbz	r0, 186d2 <ll_apto_set+0x2a>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   186b2:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   186b4:	f240 43e2 	movw	r3, #1250	; 0x4e2
   186b8:	fb03 f301 	mul.w	r3, r3, r1
   186bc:	f242 7110 	movw	r1, #10000	; 0x2710
   186c0:	fb01 3404 	mla	r4, r1, r4, r3
   186c4:	3c01      	subs	r4, #1
   186c6:	fb94 f4f3 	sdiv	r4, r4, r3
   186ca:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   186ce:	2000      	movs	r0, #0
   186d0:	bd10      	pop	{r4, pc}
		return 1;
   186d2:	2001      	movs	r0, #1
}
   186d4:	bd10      	pop	{r4, pc}

000186d6 <ll_length_req_send>:
{
   186d6:	b538      	push	{r3, r4, r5, lr}
   186d8:	460d      	mov	r5, r1
   186da:	4614      	mov	r4, r2
	conn = connection_get(handle);
   186dc:	f7f9 fc0a 	bl	11ef4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   186e0:	b1f0      	cbz	r0, 18720 <ll_length_req_send+0x4a>
   186e2:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   186e6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   186ea:	4291      	cmp	r1, r2
   186ec:	d001      	beq.n	186f2 <ll_length_req_send+0x1c>
		return 1;
   186ee:	2001      	movs	r0, #1
   186f0:	bd38      	pop	{r3, r4, r5, pc}
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   186f2:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   186f6:	f890 10e9 	ldrb.w	r1, [r0, #233]	; 0xe9
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   186fa:	428a      	cmp	r2, r1
   186fc:	d001      	beq.n	18702 <ll_length_req_send+0x2c>
		return 1;
   186fe:	2001      	movs	r0, #1
}
   18700:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   18702:	f890 10ea 	ldrb.w	r1, [r0, #234]	; 0xea
   18706:	f36f 0101 	bfc	r1, #0, #2
   1870a:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   1870e:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
	conn->llcp_length.tx_time = tx_time;
   18712:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
	conn->llcp_length.req++;
   18716:	3201      	adds	r2, #1
   18718:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
	return 0;
   1871c:	2000      	movs	r0, #0
   1871e:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   18720:	2001      	movs	r0, #1
   18722:	bd38      	pop	{r3, r4, r5, pc}

00018724 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   18724:	4b03      	ldr	r3, [pc, #12]	; (18734 <ll_length_default_get+0x10>)
   18726:	f8b3 211e 	ldrh.w	r2, [r3, #286]	; 0x11e
   1872a:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   1872c:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
   18730:	800b      	strh	r3, [r1, #0]
   18732:	4770      	bx	lr
   18734:	200014d4 	.word	0x200014d4

00018738 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   18738:	4b03      	ldr	r3, [pc, #12]	; (18748 <ll_length_default_set+0x10>)
   1873a:	f8a3 011e 	strh.w	r0, [r3, #286]	; 0x11e
	_radio.default_tx_time = max_tx_time;
   1873e:	f8a3 1120 	strh.w	r1, [r3, #288]	; 0x120
}
   18742:	2000      	movs	r0, #0
   18744:	4770      	bx	lr
   18746:	bf00      	nop
   18748:	200014d4 	.word	0x200014d4

0001874c <ll_length_max_get>:
{
   1874c:	b410      	push	{r4}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   1874e:	241b      	movs	r4, #27
   18750:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   18752:	f44f 70a4 	mov.w	r0, #328	; 0x148
   18756:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   18758:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1875a:	8018      	strh	r0, [r3, #0]
}
   1875c:	bc10      	pop	{r4}
   1875e:	4770      	bx	lr

00018760 <ll_phy_get>:
{
   18760:	b538      	push	{r3, r4, r5, lr}
   18762:	460d      	mov	r5, r1
   18764:	4614      	mov	r4, r2
	conn = connection_get(handle);
   18766:	f7f9 fbc5 	bl	11ef4 <connection_get>
	if (!conn) {
   1876a:	b158      	cbz	r0, 18784 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   1876c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   18770:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   18774:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   18776:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1877a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1877e:	7023      	strb	r3, [r4, #0]
	return 0;
   18780:	2000      	movs	r0, #0
   18782:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   18784:	2001      	movs	r0, #1
}
   18786:	bd38      	pop	{r3, r4, r5, pc}

00018788 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   18788:	4b03      	ldr	r3, [pc, #12]	; (18798 <ll_phy_default_set+0x10>)
   1878a:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_phy_rx = rx;
   1878e:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   18792:	2000      	movs	r0, #0
   18794:	4770      	bx	lr
   18796:	bf00      	nop
   18798:	200014d4 	.word	0x200014d4

0001879c <ll_phy_req_send>:
{
   1879c:	b570      	push	{r4, r5, r6, lr}
   1879e:	460e      	mov	r6, r1
   187a0:	4615      	mov	r5, r2
   187a2:	461c      	mov	r4, r3
	conn = connection_get(handle);
   187a4:	f7f9 fba6 	bl	11ef4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   187a8:	b338      	cbz	r0, 187fa <ll_phy_req_send+0x5e>
   187aa:	4603      	mov	r3, r0
   187ac:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   187b0:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   187b4:	4291      	cmp	r1, r2
   187b6:	d001      	beq.n	187bc <ll_phy_req_send+0x20>
		return 1;
   187b8:	2001      	movs	r0, #1
   187ba:	bd70      	pop	{r4, r5, r6, pc}
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   187bc:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
   187c0:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   187c4:	428a      	cmp	r2, r1
   187c6:	d001      	beq.n	187cc <ll_phy_req_send+0x30>
		return 1;
   187c8:	2001      	movs	r0, #1
}
   187ca:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   187cc:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   187d0:	f890 00f7 	ldrb.w	r0, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   187d4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   187d8:	f366 0184 	bfi	r1, r6, #2, #3
	conn->llcp_phy.flags = flags;
   187dc:	f040 0002 	orr.w	r0, r0, #2
   187e0:	f365 0000 	bfi	r0, r5, #0, #1
   187e4:	f883 00f7 	strb.w	r0, [r3, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   187e8:	f364 1147 	bfi	r1, r4, #5, #3
   187ec:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
	conn->llcp_phy.req++;
   187f0:	3201      	adds	r2, #1
   187f2:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	return 0;
   187f6:	2000      	movs	r0, #0
   187f8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   187fa:	2001      	movs	r0, #1
   187fc:	bd70      	pop	{r4, r5, r6, pc}
	...

00018800 <radio_rx_get>:
{
   18800:	b5f0      	push	{r4, r5, r6, r7, lr}
   18802:	b083      	sub	sp, #12
   18804:	4606      	mov	r6, r0
   18806:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   18808:	4b1b      	ldr	r3, [pc, #108]	; (18878 <radio_rx_get+0x78>)
   1880a:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   1880e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   18812:	429a      	cmp	r2, r3
   18814:	d024      	beq.n	18860 <radio_rx_get+0x60>
		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   18816:	6857      	ldr	r7, [r2, #4]
		cmplt = tx_cmplt_get(handle,
   18818:	783a      	ldrb	r2, [r7, #0]
   1881a:	4918      	ldr	r1, [pc, #96]	; (1887c <radio_rx_get+0x7c>)
   1881c:	f7f9 fb0c 	bl	11e38 <tx_cmplt_get>
		if (!cmplt) {
   18820:	4605      	mov	r5, r0
   18822:	b9d0      	cbnz	r0, 1885a <radio_rx_get+0x5a>
			first = _radio.packet_release_first;
   18824:	4b14      	ldr	r3, [pc, #80]	; (18878 <radio_rx_get+0x78>)
   18826:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
   1882a:	f88d 3005 	strb.w	r3, [sp, #5]
			cmplt_curr = 0;
   1882e:	4604      	mov	r4, r0
   18830:	e000      	b.n	18834 <radio_rx_get+0x34>
   18832:	4604      	mov	r4, r0
				cmplt_curr = tx_cmplt_get(&handle, &first,
   18834:	4b10      	ldr	r3, [pc, #64]	; (18878 <radio_rx_get+0x78>)
   18836:	f893 2174 	ldrb.w	r2, [r3, #372]	; 0x174
   1883a:	f10d 0105 	add.w	r1, sp, #5
   1883e:	f10d 0006 	add.w	r0, sp, #6
   18842:	f7f9 faf9 	bl	11e38 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   18846:	2c00      	cmp	r4, #0
   18848:	d1f3      	bne.n	18832 <radio_rx_get+0x32>
			} while ((cmplt_prev != 0) ||
   1884a:	4284      	cmp	r4, r0
   1884c:	d001      	beq.n	18852 <radio_rx_get+0x52>
   1884e:	4604      	mov	r4, r0
   18850:	e7f0      	b.n	18834 <radio_rx_get+0x34>
			*radio_pdu_node_rx = _radio_pdu_node_rx;
   18852:	6037      	str	r7, [r6, #0]
}
   18854:	4628      	mov	r0, r5
   18856:	b003      	add	sp, #12
   18858:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*radio_pdu_node_rx = NULL;
   1885a:	2300      	movs	r3, #0
   1885c:	6033      	str	r3, [r6, #0]
   1885e:	e7f9      	b.n	18854 <radio_rx_get+0x54>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   18860:	4905      	ldr	r1, [pc, #20]	; (18878 <radio_rx_get+0x78>)
   18862:	f891 2174 	ldrb.w	r2, [r1, #372]	; 0x174
   18866:	f201 1173 	addw	r1, r1, #371	; 0x173
   1886a:	f7f9 fae5 	bl	11e38 <tx_cmplt_get>
   1886e:	4605      	mov	r5, r0
		*radio_pdu_node_rx = NULL;
   18870:	2300      	movs	r3, #0
   18872:	6033      	str	r3, [r6, #0]
   18874:	e7ee      	b.n	18854 <radio_rx_get+0x54>
   18876:	bf00      	nop
   18878:	200014d4 	.word	0x200014d4
   1887c:	20001647 	.word	0x20001647

00018880 <radio_rx_mem_release>:
{
   18880:	b570      	push	{r4, r5, r6, lr}
   18882:	4606      	mov	r6, r0
	_radio_pdu_node_rx = *radio_pdu_node_rx;
   18884:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
   18886:	e003      	b.n	18890 <radio_rx_mem_release+0x10>
			mem_release(_radio_pdu_node_rx_free,
   18888:	491e      	ldr	r1, [pc, #120]	; (18904 <radio_rx_mem_release+0x84>)
   1888a:	f7f6 fd68 	bl	f35e <mem_release>
{
   1888e:	4620      	mov	r0, r4
	while (_radio_pdu_node_rx) {
   18890:	b398      	cbz	r0, 188fa <radio_rx_mem_release+0x7a>
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
   18892:	6804      	ldr	r4, [r0, #0]
		switch (_radio_pdu_node_rx_free->hdr.type) {
   18894:	7903      	ldrb	r3, [r0, #4]
   18896:	3b01      	subs	r3, #1
   18898:	2b0b      	cmp	r3, #11
   1889a:	d828      	bhi.n	188ee <radio_rx_mem_release+0x6e>
   1889c:	a201      	add	r2, pc, #4	; (adr r2, 188a4 <radio_rx_mem_release+0x24>)
   1889e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   188a2:	bf00      	nop
   188a4:	00018889 	.word	0x00018889
   188a8:	00018889 	.word	0x00018889
   188ac:	00018889 	.word	0x00018889
   188b0:	00018889 	.word	0x00018889
   188b4:	00018889 	.word	0x00018889
   188b8:	00018889 	.word	0x00018889
   188bc:	000188d5 	.word	0x000188d5
   188c0:	00018889 	.word	0x00018889
   188c4:	00018889 	.word	0x00018889
   188c8:	00018889 	.word	0x00018889
   188cc:	00018889 	.word	0x00018889
   188d0:	00018889 	.word	0x00018889
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   188d4:	4d0c      	ldr	r5, [pc, #48]	; (18908 <radio_rx_mem_release+0x88>)
   188d6:	88c2      	ldrh	r2, [r0, #6]
   188d8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   188dc:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   188e0:	f7f6 fd5e 	bl	f3a0 <mem_get>
			mem_release(conn, &_radio.conn_free);
   188e4:	f505 7184 	add.w	r1, r5, #264	; 0x108
   188e8:	f7f6 fd39 	bl	f35e <mem_release>
			break;
   188ec:	e7cf      	b.n	1888e <radio_rx_mem_release+0xe>
			LL_ASSERT(0);
   188ee:	4040      	eors	r0, r0
   188f0:	f380 8811 	msr	BASEPRI, r0
   188f4:	f04f 0004 	mov.w	r0, #4
   188f8:	df02      	svc	2
	*radio_pdu_node_rx = _radio_pdu_node_rx;
   188fa:	6030      	str	r0, [r6, #0]
	packet_rx_allocate(0xff);
   188fc:	20ff      	movs	r0, #255	; 0xff
   188fe:	f7f9 fa4f 	bl	11da0 <packet_rx_allocate>
   18902:	bd70      	pop	{r4, r5, r6, pc}
   18904:	20001600 	.word	0x20001600
   18908:	200014d4 	.word	0x200014d4

0001890c <do_radio_rx_fc_set>:
	if (req == ack) {
   1890c:	4291      	cmp	r1, r2
   1890e:	d007      	beq.n	18920 <do_radio_rx_fc_set+0x14>
	} else if (((req == 0) &&
   18910:	bb41      	cbnz	r1, 18964 <do_radio_rx_fc_set+0x58>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   18912:	4b1c      	ldr	r3, [pc, #112]	; (18984 <do_radio_rx_fc_set+0x78>)
   18914:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
	} else if (((req == 0) &&
   18918:	4298      	cmp	r0, r3
   1891a:	d023      	beq.n	18964 <do_radio_rx_fc_set+0x58>
		return 1;
   1891c:	2001      	movs	r0, #1
   1891e:	4770      	bx	lr
{
   18920:	b430      	push	{r4, r5}
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   18922:	4b18      	ldr	r3, [pc, #96]	; (18984 <do_radio_rx_fc_set+0x78>)
   18924:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   18928:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   1892c:	429c      	cmp	r4, r3
   1892e:	d002      	beq.n	18936 <do_radio_rx_fc_set+0x2a>
			return 1;
   18930:	2001      	movs	r0, #1
}
   18932:	bc30      	pop	{r4, r5}
   18934:	4770      	bx	lr
			if (ack1 == 0) {
   18936:	b19a      	cbz	r2, 18960 <do_radio_rx_fc_set+0x54>
			u8_t ack1 = ack;
   18938:	4613      	mov	r3, r2
			_radio.fc_handle[--ack1] = handle;
   1893a:	3b01      	subs	r3, #1
   1893c:	b2db      	uxtb	r3, r3
   1893e:	4c11      	ldr	r4, [pc, #68]	; (18984 <do_radio_rx_fc_set+0x78>)
   18940:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
   18944:	eb04 0545 	add.w	r5, r4, r5, lsl #1
   18948:	80e8      	strh	r0, [r5, #6]
			_radio.fc_ack = ack1;
   1894a:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
			if (req != _radio.fc_req) {
   1894e:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   18952:	b2db      	uxtb	r3, r3
   18954:	4299      	cmp	r1, r3
   18956:	d00f      	beq.n	18978 <do_radio_rx_fc_set+0x6c>
				_radio.fc_ack = ack;
   18958:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
				return 1;
   1895c:	2001      	movs	r0, #1
   1895e:	e7e8      	b.n	18932 <do_radio_rx_fc_set+0x26>
				ack1 = TRIPLE_BUFFER_SIZE;
   18960:	2303      	movs	r3, #3
   18962:	e7ea      	b.n	1893a <do_radio_rx_fc_set+0x2e>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   18964:	b151      	cbz	r1, 1897c <do_radio_rx_fc_set+0x70>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   18966:	31b7      	adds	r1, #183	; 0xb7
   18968:	4b06      	ldr	r3, [pc, #24]	; (18984 <do_radio_rx_fc_set+0x78>)
   1896a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   1896e:	88cb      	ldrh	r3, [r1, #6]
   18970:	4298      	cmp	r0, r3
   18972:	d005      	beq.n	18980 <do_radio_rx_fc_set+0x74>
		return 1;
   18974:	2001      	movs	r0, #1
   18976:	4770      	bx	lr
	return 0;
   18978:	2000      	movs	r0, #0
   1897a:	e7da      	b.n	18932 <do_radio_rx_fc_set+0x26>
   1897c:	4608      	mov	r0, r1
   1897e:	4770      	bx	lr
   18980:	2000      	movs	r0, #0
   18982:	4770      	bx	lr
   18984:	200014d4 	.word	0x200014d4

00018988 <radio_rx_fc_set>:
{
   18988:	b538      	push	{r3, r4, r5, lr}
   1898a:	4604      	mov	r4, r0
	if (_radio.fc_ena) {
   1898c:	4b1b      	ldr	r3, [pc, #108]	; (189fc <radio_rx_fc_set+0x74>)
   1898e:	f893 017e 	ldrb.w	r0, [r3, #382]	; 0x17e
   18992:	b338      	cbz	r0, 189e4 <radio_rx_fc_set+0x5c>
		u8_t req = _radio.fc_req;
   18994:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   18998:	b2d5      	uxtb	r5, r2
		u8_t ack = _radio.fc_ack;
   1899a:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
		if (fc) {
   1899e:	b141      	cbz	r1, 189b2 <radio_rx_fc_set+0x2a>
			if (handle != 0xffff) {
   189a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   189a4:	429c      	cmp	r4, r3
   189a6:	d023      	beq.n	189f0 <radio_rx_fc_set+0x68>
   189a8:	4620      	mov	r0, r4
				return do_radio_rx_fc_set(handle, req, ack);
   189aa:	4629      	mov	r1, r5
   189ac:	f7ff ffae 	bl	1890c <do_radio_rx_fc_set>
   189b0:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   189b2:	4b12      	ldr	r3, [pc, #72]	; (189fc <radio_rx_fc_set+0x74>)
   189b4:	f8d3 0148 	ldr.w	r0, [r3, #328]	; 0x148
   189b8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   189bc:	4298      	cmp	r0, r3
   189be:	d001      	beq.n	189c4 <radio_rx_fc_set+0x3c>
	return 0;
   189c0:	4608      	mov	r0, r1
   189c2:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   189c4:	4295      	cmp	r5, r2
   189c6:	d015      	beq.n	189f4 <radio_rx_fc_set+0x6c>
			_radio.fc_ack = req;
   189c8:	4b0c      	ldr	r3, [pc, #48]	; (189fc <radio_rx_fc_set+0x74>)
   189ca:	f883 517d 	strb.w	r5, [r3, #381]	; 0x17d
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   189ce:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   189d2:	4298      	cmp	r0, r3
   189d4:	d010      	beq.n	189f8 <radio_rx_fc_set+0x70>
			    (req == _radio.fc_req)) {
   189d6:	4b09      	ldr	r3, [pc, #36]	; (189fc <radio_rx_fc_set+0x74>)
   189d8:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
   189dc:	b2db      	uxtb	r3, r3
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   189de:	429d      	cmp	r5, r3
   189e0:	d001      	beq.n	189e6 <radio_rx_fc_set+0x5e>
	return 0;
   189e2:	4608      	mov	r0, r1
}
   189e4:	bd38      	pop	{r3, r4, r5, pc}
				_radio.fc_ack = ack;
   189e6:	4b05      	ldr	r3, [pc, #20]	; (189fc <radio_rx_fc_set+0x74>)
   189e8:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	return 0;
   189ec:	4608      	mov	r0, r1
   189ee:	bd38      	pop	{r3, r4, r5, pc}
   189f0:	2000      	movs	r0, #0
   189f2:	bd38      	pop	{r3, r4, r5, pc}
   189f4:	4608      	mov	r0, r1
   189f6:	bd38      	pop	{r3, r4, r5, pc}
   189f8:	4608      	mov	r0, r1
   189fa:	bd38      	pop	{r3, r4, r5, pc}
   189fc:	200014d4 	.word	0x200014d4

00018a00 <radio_tx_mem_acquire>:
{
   18a00:	b508      	push	{r3, lr}
	return mem_acquire(&_radio.pkt_tx_data_free);
   18a02:	4802      	ldr	r0, [pc, #8]	; (18a0c <radio_tx_mem_acquire+0xc>)
   18a04:	f7f6 fc8f 	bl	f326 <mem_acquire>
}
   18a08:	bd08      	pop	{r3, pc}
   18a0a:	bf00      	nop
   18a0c:	20001634 	.word	0x20001634

00018a10 <radio_tx_mem_release>:
{
   18a10:	b508      	push	{r3, lr}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   18a12:	4902      	ldr	r1, [pc, #8]	; (18a1c <radio_tx_mem_release+0xc>)
   18a14:	f7f6 fca3 	bl	f35e <mem_release>
   18a18:	bd08      	pop	{r3, pc}
   18a1a:	bf00      	nop
   18a1c:	20001634 	.word	0x20001634

00018a20 <radio_tx_mem_enqueue>:
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   18a20:	b570      	push	{r4, r5, r6, lr}
   18a22:	b088      	sub	sp, #32
   18a24:	4605      	mov	r5, r0
   18a26:	460e      	mov	r6, r1
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   18a28:	4b36      	ldr	r3, [pc, #216]	; (18b04 <radio_tx_mem_enqueue+0xe4>)
   18a2a:	f893 4172 	ldrb.w	r4, [r3, #370]	; 0x172
   18a2e:	3401      	adds	r4, #1
   18a30:	b2e4      	uxtb	r4, r4
	if (last == _radio.packet_tx_count) {
   18a32:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   18a36:	429c      	cmp	r4, r3
   18a38:	d02a      	beq.n	18a90 <radio_tx_mem_enqueue+0x70>
		last = 0;
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
   18a3a:	4628      	mov	r0, r5
   18a3c:	f7f9 fa5a 	bl	11ef4 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   18a40:	4601      	mov	r1, r0
   18a42:	2800      	cmp	r0, #0
   18a44:	d057      	beq.n	18af6 <radio_tx_mem_enqueue+0xd6>
   18a46:	4b2f      	ldr	r3, [pc, #188]	; (18b04 <radio_tx_mem_enqueue+0xe4>)
   18a48:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
   18a4c:	b2db      	uxtb	r3, r3
   18a4e:	429c      	cmp	r4, r3
   18a50:	d053      	beq.n	18afa <radio_tx_mem_enqueue+0xda>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   18a52:	7972      	ldrb	r2, [r6, #5]
   18a54:	4b2b      	ldr	r3, [pc, #172]	; (18b04 <radio_tx_mem_enqueue+0xe4>)
   18a56:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
   18a5a:	3b07      	subs	r3, #7
   18a5c:	429a      	cmp	r2, r3
   18a5e:	d819      	bhi.n	18a94 <radio_tx_mem_enqueue+0x74>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   18a60:	4b28      	ldr	r3, [pc, #160]	; (18b04 <radio_tx_mem_enqueue+0xe4>)
   18a62:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   18a66:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   18a6a:	f822 5030 	strh.w	r5, [r2, r0, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
   18a6e:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   18a72:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   18a76:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   18a7a:	6056      	str	r6, [r2, #4]
	_radio.packet_tx_last = last;
   18a7c:	f883 4172 	strb.w	r4, [r3, #370]	; 0x172

	/* break slave latency */
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   18a80:	f991 301d 	ldrsb.w	r3, [r1, #29]
   18a84:	2b00      	cmp	r3, #0
   18a86:	db0b      	blt.n	18aa0 <radio_tx_mem_enqueue+0x80>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   18a88:	2300      	movs	r3, #0
}
   18a8a:	4618      	mov	r0, r3
   18a8c:	b008      	add	sp, #32
   18a8e:	bd70      	pop	{r4, r5, r6, pc}
		last = 0;
   18a90:	2400      	movs	r4, #0
   18a92:	e7d2      	b.n	18a3a <radio_tx_mem_enqueue+0x1a>
	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   18a94:	4040      	eors	r0, r0
   18a96:	f380 8811 	msr	BASEPRI, r0
   18a9a:	f04f 0004 	mov.w	r0, #4
   18a9e:	df02      	svc	2
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   18aa0:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
   18aa2:	b363      	cbz	r3, 18afe <radio_tx_mem_enqueue+0xde>
   18aa4:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   18aa8:	f013 0f02 	tst.w	r3, #2
   18aac:	d001      	beq.n	18ab2 <radio_tx_mem_enqueue+0x92>
	return 0;
   18aae:	2300      	movs	r3, #0
   18ab0:	e7eb      	b.n	18a8a <radio_tx_mem_enqueue+0x6a>
		conn->slave.latency_cancel = 1;
   18ab2:	f043 0302 	orr.w	r3, r3, #2
   18ab6:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
				 conn->handle, 0, 0, 0, 0, 1, 0,
   18aba:	8c0a      	ldrh	r2, [r1, #32]
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   18abc:	3207      	adds	r2, #7
   18abe:	9106      	str	r1, [sp, #24]
   18ac0:	4b11      	ldr	r3, [pc, #68]	; (18b08 <radio_tx_mem_enqueue+0xe8>)
   18ac2:	9305      	str	r3, [sp, #20]
   18ac4:	2000      	movs	r0, #0
   18ac6:	9004      	str	r0, [sp, #16]
   18ac8:	2301      	movs	r3, #1
   18aca:	9303      	str	r3, [sp, #12]
   18acc:	9002      	str	r0, [sp, #8]
   18ace:	9001      	str	r0, [sp, #4]
   18ad0:	9000      	str	r0, [sp, #0]
   18ad2:	4603      	mov	r3, r0
   18ad4:	b2d2      	uxtb	r2, r2
   18ad6:	2103      	movs	r1, #3
   18ad8:	f7f8 f944 	bl	10d64 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18adc:	4603      	mov	r3, r0
   18ade:	2800      	cmp	r0, #0
   18ae0:	d0d3      	beq.n	18a8a <radio_tx_mem_enqueue+0x6a>
   18ae2:	2802      	cmp	r0, #2
   18ae4:	d101      	bne.n	18aea <radio_tx_mem_enqueue+0xca>
	return 0;
   18ae6:	2300      	movs	r3, #0
   18ae8:	e7cf      	b.n	18a8a <radio_tx_mem_enqueue+0x6a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18aea:	4040      	eors	r0, r0
   18aec:	f380 8811 	msr	BASEPRI, r0
   18af0:	f04f 0004 	mov.w	r0, #4
   18af4:	df02      	svc	2
		return 1;
   18af6:	2301      	movs	r3, #1
   18af8:	e7c7      	b.n	18a8a <radio_tx_mem_enqueue+0x6a>
   18afa:	2301      	movs	r3, #1
   18afc:	e7c5      	b.n	18a8a <radio_tx_mem_enqueue+0x6a>
	return 0;
   18afe:	2300      	movs	r3, #0
   18b00:	e7c3      	b.n	18a8a <radio_tx_mem_enqueue+0x6a>
   18b02:	bf00      	nop
   18b04:	200014d4 	.word	0x200014d4
   18b08:	00011d85 	.word	0x00011d85

00018b0c <ll_enc_req_send>:
{
   18b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18b10:	4680      	mov	r8, r0
   18b12:	4689      	mov	r9, r1
   18b14:	4616      	mov	r6, r2
   18b16:	461f      	mov	r7, r3
	conn = connection_get(handle);
   18b18:	f7f9 f9ec 	bl	11ef4 <connection_get>
	if (!conn) {
   18b1c:	2800      	cmp	r0, #0
   18b1e:	d055      	beq.n	18bcc <ll_enc_req_send+0xc0>
   18b20:	4605      	mov	r5, r0
	node_tx = radio_tx_mem_acquire();
   18b22:	f7ff ff6d 	bl	18a00 <radio_tx_mem_acquire>
	if (node_tx) {
   18b26:	4604      	mov	r4, r0
   18b28:	2800      	cmp	r0, #0
   18b2a:	d051      	beq.n	18bd0 <ll_enc_req_send+0xc4>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   18b2c:	2210      	movs	r2, #16
   18b2e:	4639      	mov	r1, r7
   18b30:	f105 0083 	add.w	r0, r5, #131	; 0x83
   18b34:	f7e7 fbc4 	bl	2c0 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   18b38:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   18b3c:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   18b40:	d008      	beq.n	18b54 <ll_enc_req_send+0x48>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   18b42:	2b30      	cmp	r3, #48	; 0x30
   18b44:	d02d      	beq.n	18ba2 <ll_enc_req_send+0x96>
			radio_tx_mem_release(node_tx);
   18b46:	4620      	mov	r0, r4
   18b48:	f7ff ff62 	bl	18a10 <radio_tx_mem_release>
			return 1;
   18b4c:	2301      	movs	r3, #1
}
   18b4e:	4618      	mov	r0, r3
   18b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18b54:	7923      	ldrb	r3, [r4, #4]
   18b56:	f043 0303 	orr.w	r3, r3, #3
   18b5a:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   18b5c:	2317      	movs	r3, #23
   18b5e:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   18b60:	2303      	movs	r3, #3
   18b62:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   18b64:	2208      	movs	r2, #8
   18b66:	4649      	mov	r1, r9
   18b68:	18a0      	adds	r0, r4, r2
   18b6a:	f7e7 fba9 	bl	2c0 <memcpy>
			enc_req->ediv[0] = ediv[0];
   18b6e:	7833      	ldrb	r3, [r6, #0]
   18b70:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   18b72:	7873      	ldrb	r3, [r6, #1]
   18b74:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   18b76:	2108      	movs	r1, #8
   18b78:	f104 0012 	add.w	r0, r4, #18
   18b7c:	f7f8 fd74 	bl	11668 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   18b80:	2104      	movs	r1, #4
   18b82:	f104 001a 	add.w	r0, r4, #26
   18b86:	f7f8 fd6f 	bl	11668 <bt_rand>
		if (radio_tx_mem_enqueue(handle, node_tx)) {
   18b8a:	4621      	mov	r1, r4
   18b8c:	4640      	mov	r0, r8
   18b8e:	f7ff ff47 	bl	18a20 <radio_tx_mem_enqueue>
   18b92:	4603      	mov	r3, r0
   18b94:	2800      	cmp	r0, #0
   18b96:	d0da      	beq.n	18b4e <ll_enc_req_send+0x42>
			radio_tx_mem_release(node_tx);
   18b98:	4620      	mov	r0, r4
   18b9a:	f7ff ff39 	bl	18a10 <radio_tx_mem_release>
			return 1;
   18b9e:	2301      	movs	r3, #1
   18ba0:	e7d5      	b.n	18b4e <ll_enc_req_send+0x42>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   18ba2:	2208      	movs	r2, #8
   18ba4:	4649      	mov	r1, r9
   18ba6:	f105 0079 	add.w	r0, r5, #121	; 0x79
   18baa:	f7e7 fb89 	bl	2c0 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   18bae:	7833      	ldrb	r3, [r6, #0]
   18bb0:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
			conn->llcp.encryption.ediv[1] = ediv[1];
   18bb4:	7873      	ldrb	r3, [r6, #1]
   18bb6:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18bba:	7923      	ldrb	r3, [r4, #4]
   18bbc:	f043 0303 	orr.w	r3, r3, #3
   18bc0:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   18bc2:	2301      	movs	r3, #1
   18bc4:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   18bc6:	230a      	movs	r3, #10
   18bc8:	71e3      	strb	r3, [r4, #7]
   18bca:	e7de      	b.n	18b8a <ll_enc_req_send+0x7e>
		return 1;
   18bcc:	2301      	movs	r3, #1
   18bce:	e7be      	b.n	18b4e <ll_enc_req_send+0x42>
	return 1;
   18bd0:	2301      	movs	r3, #1
   18bd2:	e7bc      	b.n	18b4e <ll_enc_req_send+0x42>

void __weak ll_adv_scan_state_cb(u8_t bm)
{
   18bd4:	4770      	bx	lr

00018bd6 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   18bd6:	b508      	push	{r3, lr}
	if (bm) {
   18bd8:	b910      	cbnz	r0, 18be0 <ll_adv_scan_state_cb+0xa>
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
   18bda:	f000 fe5f 	bl	1989c <rpa_refresh_stop>
   18bde:	bd08      	pop	{r3, pc}
		rpa_refresh_start();
   18be0:	f000 fe48 	bl	19874 <rpa_refresh_start>
   18be4:	bd08      	pop	{r3, pc}
	...

00018be8 <radio_adv_enable>:
{
   18be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18bec:	b08f      	sub	sp, #60	; 0x3c
   18bee:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   18bf2:	2202      	movs	r2, #2
   18bf4:	920d      	str	r2, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
   18bf6:	4aca      	ldr	r2, [pc, #808]	; (18f20 <radio_adv_enable+0x338>)
   18bf8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   18bfc:	f012 0f01 	tst.w	r2, #1
   18c00:	d003      	beq.n	18c0a <radio_adv_enable+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18c02:	200c      	movs	r0, #12
}
   18c04:	b00f      	add	sp, #60	; 0x3c
   18c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18c0a:	461d      	mov	r5, r3
   18c0c:	460c      	mov	r4, r1
   18c0e:	4607      	mov	r7, r0
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
   18c10:	4bc3      	ldr	r3, [pc, #780]	; (18f20 <radio_adv_enable+0x338>)
   18c12:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
	pdu_adv = (struct pdu_adv *)
   18c16:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   18c1a:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
   18c1e:	3220      	adds	r2, #32
   18c20:	eb03 0802 	add.w	r8, r3, r2
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   18c24:	f898 3007 	ldrb.w	r3, [r8, #7]
   18c28:	f003 030f 	and.w	r3, r3, #15
   18c2c:	2b01      	cmp	r3, #1
   18c2e:	d97f      	bls.n	18d30 <radio_adv_enable+0x148>
		conn = NULL;
   18c30:	2600      	movs	r6, #0
	_radio.advertiser.phy_p = phy_p;
   18c32:	4abb      	ldr	r2, [pc, #748]	; (18f20 <radio_adv_enable+0x338>)
   18c34:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
   18c38:	f367 0302 	bfi	r3, r7, #0, #3
	_radio.advertiser.chan_map = chan_map;
   18c3c:	a80e      	add	r0, sp, #56	; 0x38
   18c3e:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
   18c42:	f361 03c5 	bfi	r3, r1, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
   18c46:	f365 1387 	bfi	r3, r5, #6, #2
   18c4a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	_radio.advertiser.rl_idx = rl_idx;
   18c4e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   18c52:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
		_radio.ticks_active_to_start;
   18c56:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
	_radio.advertiser.hdr.ticks_active_to_start =
   18c5a:	6193      	str	r3, [r2, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   18c5c:	2327      	movs	r3, #39	; 0x27
   18c5e:	6153      	str	r3, [r2, #20]
	_radio.advertiser.hdr.ticks_preempt_to_start =
   18c60:	2300      	movs	r3, #0
   18c62:	61d3      	str	r3, [r2, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   18c64:	2101      	movs	r1, #1
   18c66:	f7f6 fbe2 	bl	f42e <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   18c6a:	f898 5007 	ldrb.w	r5, [r8, #7]
   18c6e:	f005 050f 	and.w	r5, r5, #15
   18c72:	2d01      	cmp	r5, #1
   18c74:	f000 8108 	beq.w	18e88 <radio_adv_enable+0x2a0>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   18c78:	2d02      	cmp	r5, #2
   18c7a:	f000 8111 	beq.w	18ea0 <radio_adv_enable+0x2b8>
			      152 + 376) * chan_cnt;
   18c7e:	b280      	uxth	r0, r0
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
   18c80:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18c84:	ebc0 10c3 	rsb	r0, r0, r3, lsl #7
   18c88:	0080      	lsls	r0, r0, #2
   18c8a:	b280      	uxth	r0, r0
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   18c8c:	a3a2      	add	r3, pc, #648	; (adr r3, 18f18 <radio_adv_enable+0x330>)
   18c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18c92:	49a4      	ldr	r1, [pc, #656]	; (18f24 <radio_adv_enable+0x33c>)
   18c94:	fba0 0101 	umull	r0, r1, r0, r1
   18c98:	f7e8 fa30 	bl	10fc <__aeabi_uldivmod>
   18c9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18ca0:	4a9f      	ldr	r2, [pc, #636]	; (18f20 <radio_adv_enable+0x338>)
   18ca2:	6210      	str	r0, [r2, #32]
		_radio.advertiser.hdr.ticks_active_to_start;
   18ca4:	6991      	ldr	r1, [r2, #24]
		_radio.advertiser.hdr.ticks_xtal_to_start :
   18ca6:	6953      	ldr	r3, [r2, #20]
	ticks_slot_offset =
   18ca8:	4299      	cmp	r1, r3
   18caa:	bf38      	it	cc
   18cac:	4619      	movcc	r1, r3
   18cae:	4688      	mov	r8, r1
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18cb0:	2d01      	cmp	r5, #1
   18cb2:	f000 80ff 	beq.w	18eb4 <radio_adv_enable+0x2cc>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18cb6:	f7f8 f96f 	bl	10f98 <ticker_ticks_now_get>
   18cba:	4607      	mov	r7, r0
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   18cbc:	b2a4      	uxth	r4, r4
   18cbe:	489a      	ldr	r0, [pc, #616]	; (18f28 <radio_adv_enable+0x340>)
   18cc0:	fba4 0100 	umull	r0, r1, r4, r0
   18cc4:	2391      	movs	r3, #145	; 0x91
   18cc6:	fb03 1104 	mla	r1, r3, r4, r1
   18cca:	a393      	add	r3, pc, #588	; (adr r3, 18f18 <radio_adv_enable+0x330>)
   18ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
   18cd0:	f7e8 fa14 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18cd4:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
				      _radio.advertiser.hdr.ticks_slot),
   18cd8:	4b91      	ldr	r3, [pc, #580]	; (18f20 <radio_adv_enable+0x338>)
   18cda:	6a1b      	ldr	r3, [r3, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18cdc:	4443      	add	r3, r8
   18cde:	b29b      	uxth	r3, r3
		ret =
   18ce0:	a90d      	add	r1, sp, #52	; 0x34
   18ce2:	9108      	str	r1, [sp, #32]
   18ce4:	4991      	ldr	r1, [pc, #580]	; (18f2c <radio_adv_enable+0x344>)
   18ce6:	9107      	str	r1, [sp, #28]
   18ce8:	2000      	movs	r0, #0
   18cea:	9006      	str	r0, [sp, #24]
   18cec:	4990      	ldr	r1, [pc, #576]	; (18f30 <radio_adv_enable+0x348>)
   18cee:	9105      	str	r1, [sp, #20]
   18cf0:	9304      	str	r3, [sp, #16]
   18cf2:	9003      	str	r0, [sp, #12]
   18cf4:	9002      	str	r0, [sp, #8]
   18cf6:	9201      	str	r2, [sp, #4]
   18cf8:	9000      	str	r0, [sp, #0]
   18cfa:	463b      	mov	r3, r7
   18cfc:	2205      	movs	r2, #5
   18cfe:	2103      	movs	r1, #3
   18d00:	f7f7 ffe2 	bl	10cc8 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   18d04:	2802      	cmp	r0, #2
   18d06:	f000 813b 	beq.w	18f80 <radio_adv_enable+0x398>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   18d0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18d0c:	2b00      	cmp	r3, #0
   18d0e:	f040 80f2 	bne.w	18ef6 <radio_adv_enable+0x30e>
		_radio.advertiser.is_enabled = 1;
   18d12:	4b83      	ldr	r3, [pc, #524]	; (18f20 <radio_adv_enable+0x338>)
   18d14:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18d18:	f042 0201 	orr.w	r2, r2, #1
   18d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   18d20:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   18d24:	f013 0f01 	tst.w	r3, #1
   18d28:	f000 812e 	beq.w	18f88 <radio_adv_enable+0x3a0>
		return 0;
   18d2c:	2000      	movs	r0, #0
   18d2e:	e769      	b.n	18c04 <radio_adv_enable+0x1c>
		if (_radio.advertiser.conn) {
   18d30:	4b7b      	ldr	r3, [pc, #492]	; (18f20 <radio_adv_enable+0x338>)
   18d32:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   18d36:	b10b      	cbz	r3, 18d3c <radio_adv_enable+0x154>
			return BT_HCI_ERR_CMD_DISALLOWED;
   18d38:	200c      	movs	r0, #12
   18d3a:	e763      	b.n	18c04 <radio_adv_enable+0x1c>
		link = mem_acquire(&_radio.link_rx_free);
   18d3c:	487d      	ldr	r0, [pc, #500]	; (18f34 <radio_adv_enable+0x34c>)
   18d3e:	f7f6 faf2 	bl	f326 <mem_acquire>
		if (!link) {
   18d42:	4681      	mov	r9, r0
   18d44:	2800      	cmp	r0, #0
   18d46:	f000 8124 	beq.w	18f92 <radio_adv_enable+0x3aa>
		conn = mem_acquire(&_radio.conn_free);
   18d4a:	487b      	ldr	r0, [pc, #492]	; (18f38 <radio_adv_enable+0x350>)
   18d4c:	f7f6 faeb 	bl	f326 <mem_acquire>
		if (!conn) {
   18d50:	4606      	mov	r6, r0
   18d52:	2800      	cmp	r0, #0
   18d54:	f000 8092 	beq.w	18e7c <radio_adv_enable+0x294>
		conn->handle = 0xFFFF;
   18d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18d5c:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   18d5e:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   18d62:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   18d66:	7f43      	ldrb	r3, [r0, #29]
   18d68:	f36f 1386 	bfc	r3, #6, #1
   18d6c:	7743      	strb	r3, [r0, #29]
		conn->data_chan_use = 0;
   18d6e:	2300      	movs	r3, #0
   18d70:	77c3      	strb	r3, [r0, #31]
		conn->event_counter = 0;
   18d72:	8443      	strh	r3, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   18d74:	8503      	strh	r3, [r0, #40]	; 0x28
		conn->latency_event = 0;
   18d76:	8543      	strh	r3, [r0, #42]	; 0x2a
		conn->default_tx_octets = _radio.default_tx_octets;
   18d78:	4969      	ldr	r1, [pc, #420]	; (18f20 <radio_adv_enable+0x338>)
   18d7a:	f8b1 211e 	ldrh.w	r2, [r1, #286]	; 0x11e
   18d7e:	8582      	strh	r2, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18d80:	221b      	movs	r2, #27
   18d82:	85c2      	strh	r2, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18d84:	8602      	strh	r2, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   18d86:	f8b1 2120 	ldrh.w	r2, [r1, #288]	; 0x120
   18d8a:	8642      	strh	r2, [r0, #50]	; 0x32
		conn->max_tx_time =
   18d8c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18d90:	8682      	strh	r2, [r0, #52]	; 0x34
		conn->max_rx_time =
   18d92:	86c2      	strh	r2, [r0, #54]	; 0x36
		conn->phy_pref_tx = _radio.default_phy_tx;
   18d94:	f891 0122 	ldrb.w	r0, [r1, #290]	; 0x122
   18d98:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
   18d9c:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_tx = BIT(0);
   18da0:	2001      	movs	r0, #1
   18da2:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->phy_flags = 0;
   18da6:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   18daa:	f363 12c7 	bfi	r2, r3, #7, #1
   18dae:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   18db2:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
   18db6:	f360 0202 	bfi	r2, r0, #0, #3
   18dba:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   18dbe:	f891 e124 	ldrb.w	lr, [r1, #292]	; 0x124
   18dc2:	b2d2      	uxtb	r2, r2
   18dc4:	f36e 02c5 	bfi	r2, lr, #3, #3
   18dc8:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_rx = BIT(0);
   18dcc:	f896 203a 	ldrb.w	r2, [r6, #58]	; 0x3a
   18dd0:	f360 0202 	bfi	r2, r0, #0, #3
   18dd4:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
		conn->role = 1;
   18dd8:	7f72      	ldrb	r2, [r6, #29]
   18dda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   18dde:	7772      	strb	r2, [r6, #29]
		conn->connect_expire = 6;
   18de0:	2206      	movs	r2, #6
   18de2:	87b2      	strh	r2, [r6, #60]	; 0x3c
		conn->common.fex_valid = 0;
   18de4:	f896 2050 	ldrb.w	r2, [r6, #80]	; 0x50
		conn->slave.latency_cancel = 0;
   18de8:	f002 02de 	and.w	r2, r2, #222	; 0xde
   18dec:	f363 0241 	bfi	r2, r3, #1, #1
   18df0:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
		conn->slave.window_widening_prepare_us = 0;
   18df4:	65f3      	str	r3, [r6, #92]	; 0x5c
		conn->slave.window_widening_event_us = 0;
   18df6:	6633      	str	r3, [r6, #96]	; 0x60
		conn->slave.ticks_to_offset = 0;
   18df8:	6733      	str	r3, [r6, #112]	; 0x70
		conn->supervision_expire = 0;
   18dfa:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		conn->procedure_expire = 0;
   18dfe:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		conn->apto_expire = 0;
   18e02:	f8a6 304c 	strh.w	r3, [r6, #76]	; 0x4c
		conn->appto_expire = 0;
   18e06:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
		conn->llcp_req = 0;
   18e0a:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
		conn->llcp_ack = 0;
   18e0e:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		conn->llcp_version.tx = 0;
   18e12:	f896 20a8 	ldrb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_version.rx = 0;
   18e16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   18e1a:	f363 0241 	bfi	r2, r3, #1, #1
   18e1e:	f886 20a8 	strb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_terminate.req = 0;
   18e22:	f886 30b0 	strb.w	r3, [r6, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   18e26:	f886 30b1 	strb.w	r3, [r6, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   18e2a:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   18e2e:	f8c6 90b4 	str.w	r9, [r6, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   18e32:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   18e36:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
		conn->llcp_length.req = 0;
   18e3a:	f886 30e8 	strb.w	r3, [r6, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   18e3e:	f886 30e9 	strb.w	r3, [r6, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   18e42:	f886 30f4 	strb.w	r3, [r6, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   18e46:	f886 30f5 	strb.w	r3, [r6, #245]	; 0xf5
		conn->sn = 0;
   18e4a:	f896 20f8 	ldrb.w	r2, [r6, #248]	; 0xf8
		conn->empty = 0;
   18e4e:	f002 0280 	and.w	r2, r2, #128	; 0x80
   18e52:	f363 12c7 	bfi	r2, r3, #7, #1
   18e56:	f886 20f8 	strb.w	r2, [r6, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   18e5a:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   18e5e:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   18e62:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   18e66:	f8c6 3148 	str.w	r3, [r6, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   18e6a:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   18e6e:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   18e72:	f886 3151 	strb.w	r3, [r6, #337]	; 0x151
		_radio.advertiser.conn = conn;
   18e76:	f8c1 60c8 	str.w	r6, [r1, #200]	; 0xc8
   18e7a:	e6da      	b.n	18c32 <radio_adv_enable+0x4a>
			mem_release(link, &_radio.link_rx_free);
   18e7c:	492d      	ldr	r1, [pc, #180]	; (18f34 <radio_adv_enable+0x34c>)
   18e7e:	4648      	mov	r0, r9
   18e80:	f7f6 fa6d 	bl	f35e <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18e84:	2007      	movs	r0, #7
   18e86:	e6bd      	b.n	18c04 <radio_adv_enable+0x1c>
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   18e88:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18e8c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18e90:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
   18e94:	0080      	lsls	r0, r0, #2
   18e96:	b280      	uxth	r0, r0
   18e98:	f500 709c 	add.w	r0, r0, #312	; 0x138
   18e9c:	b280      	uxth	r0, r0
   18e9e:	e6f5      	b.n	18c8c <radio_adv_enable+0xa4>
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   18ea0:	b280      	uxth	r0, r0
   18ea2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18ea6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18eaa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   18eae:	0080      	lsls	r0, r0, #2
   18eb0:	b280      	uxth	r0, r0
   18eb2:	e6eb      	b.n	18c8c <radio_adv_enable+0xa4>
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18eb4:	2c00      	cmp	r4, #0
   18eb6:	f47f aefe 	bne.w	18cb6 <radio_adv_enable+0xce>
		u32_t ticks_now = ticker_ticks_now_get();
   18eba:	f7f8 f86d 	bl	10f98 <ticker_ticks_now_get>
   18ebe:	4604      	mov	r4, r0
				    _radio.advertiser.hdr.ticks_slot),
   18ec0:	4b17      	ldr	r3, [pc, #92]	; (18f20 <radio_adv_enable+0x338>)
   18ec2:	6a1b      	ldr	r3, [r3, #32]
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18ec4:	eb08 0203 	add.w	r2, r8, r3
   18ec8:	b293      	uxth	r3, r2
   18eca:	a90d      	add	r1, sp, #52	; 0x34
   18ecc:	9108      	str	r1, [sp, #32]
   18ece:	4917      	ldr	r1, [pc, #92]	; (18f2c <radio_adv_enable+0x344>)
   18ed0:	9107      	str	r1, [sp, #28]
   18ed2:	2000      	movs	r0, #0
   18ed4:	9006      	str	r0, [sp, #24]
   18ed6:	4916      	ldr	r1, [pc, #88]	; (18f30 <radio_adv_enable+0x348>)
   18ed8:	9105      	str	r1, [sp, #20]
   18eda:	9304      	str	r3, [sp, #16]
   18edc:	9003      	str	r0, [sp, #12]
   18ede:	9002      	str	r0, [sp, #8]
   18ee0:	9201      	str	r2, [sp, #4]
   18ee2:	9000      	str	r0, [sp, #0]
   18ee4:	4623      	mov	r3, r4
   18ee6:	2205      	movs	r2, #5
   18ee8:	2103      	movs	r1, #3
   18eea:	f7f7 feed 	bl	10cc8 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   18eee:	2802      	cmp	r0, #2
   18ef0:	d027      	beq.n	18f42 <radio_adv_enable+0x35a>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   18ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18ef4:	b34b      	cbz	r3, 18f4a <radio_adv_enable+0x362>
	if (conn) {
   18ef6:	2e00      	cmp	r6, #0
   18ef8:	d04d      	beq.n	18f96 <radio_adv_enable+0x3ae>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   18efa:	4c09      	ldr	r4, [pc, #36]	; (18f20 <radio_adv_enable+0x338>)
   18efc:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   18f00:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   18f04:	f7f6 fa2b 	bl	f35e <mem_release>
		mem_release(conn, &_radio.conn_free);
   18f08:	f504 7184 	add.w	r1, r4, #264	; 0x108
   18f0c:	4630      	mov	r0, r6
   18f0e:	f7f6 fa26 	bl	f35e <mem_release>
	return BT_HCI_ERR_CMD_DISALLOWED;
   18f12:	200c      	movs	r0, #12
   18f14:	e676      	b.n	18c04 <radio_adv_enable+0x1c>
   18f16:	bf00      	nop
   18f18:	1afd498d 	.word	0x1afd498d
   18f1c:	00000007 	.word	0x00000007
   18f20:	200014d4 	.word	0x200014d4
   18f24:	3b9aca00 	.word	0x3b9aca00
   18f28:	84e72a00 	.word	0x84e72a00
   18f2c:	000116ad 	.word	0x000116ad
   18f30:	00015035 	.word	0x00015035
   18f34:	20001618 	.word	0x20001618
   18f38:	200015dc 	.word	0x200015dc
   18f3c:	bf20      	wfe
  __ASM volatile ("sev");
   18f3e:	bf40      	sev
  __ASM volatile ("wfe");
   18f40:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   18f42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18f44:	2b02      	cmp	r3, #2
   18f46:	d0f9      	beq.n	18f3c <radio_adv_enable+0x354>
   18f48:	e7d3      	b.n	18ef2 <radio_adv_enable+0x30a>
		ret_cb = TICKER_STATUS_BUSY;
   18f4a:	ab0e      	add	r3, sp, #56	; 0x38
   18f4c:	2202      	movs	r2, #2
   18f4e:	f843 2d04 	str.w	r2, [r3, #-4]!
		ret =
   18f52:	9308      	str	r3, [sp, #32]
   18f54:	4b11      	ldr	r3, [pc, #68]	; (18f9c <radio_adv_enable+0x3b4>)
   18f56:	9307      	str	r3, [sp, #28]
   18f58:	2000      	movs	r0, #0
   18f5a:	9006      	str	r0, [sp, #24]
   18f5c:	4b10      	ldr	r3, [pc, #64]	; (18fa0 <radio_adv_enable+0x3b8>)
   18f5e:	9305      	str	r3, [sp, #20]
   18f60:	9004      	str	r0, [sp, #16]
   18f62:	9003      	str	r0, [sp, #12]
   18f64:	9002      	str	r0, [sp, #8]
   18f66:	9001      	str	r0, [sp, #4]
   18f68:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   18f6c:	9300      	str	r3, [sp, #0]
   18f6e:	4623      	mov	r3, r4
   18f70:	2203      	movs	r2, #3
   18f72:	4611      	mov	r1, r2
   18f74:	f7f7 fea8 	bl	10cc8 <ticker_start>
	    !interval) {
   18f78:	e6c4      	b.n	18d04 <radio_adv_enable+0x11c>
   18f7a:	bf20      	wfe
  __ASM volatile ("sev");
   18f7c:	bf40      	sev
  __ASM volatile ("wfe");
   18f7e:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   18f80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18f82:	2b02      	cmp	r3, #2
   18f84:	d0f9      	beq.n	18f7a <radio_adv_enable+0x392>
   18f86:	e6c0      	b.n	18d0a <radio_adv_enable+0x122>
			ll_adv_scan_state_cb(BIT(0));
   18f88:	2001      	movs	r0, #1
   18f8a:	f7ff fe24 	bl	18bd6 <ll_adv_scan_state_cb>
		return 0;
   18f8e:	2000      	movs	r0, #0
   18f90:	e638      	b.n	18c04 <radio_adv_enable+0x1c>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18f92:	2007      	movs	r0, #7
   18f94:	e636      	b.n	18c04 <radio_adv_enable+0x1c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   18f96:	200c      	movs	r0, #12
   18f98:	e634      	b.n	18c04 <radio_adv_enable+0x1c>
   18f9a:	bf00      	nop
   18f9c:	000116ad 	.word	0x000116ad
   18fa0:	00012229 	.word	0x00012229

00018fa4 <radio_adv_disable>:
{
   18fa4:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   18fa6:	2103      	movs	r1, #3
   18fa8:	2005      	movs	r0, #5
   18faa:	f7f8 ffc1 	bl	11f30 <role_disable>
	if (!status) {
   18fae:	4604      	mov	r4, r0
   18fb0:	b9f0      	cbnz	r0, 18ff0 <radio_adv_disable+0x4c>
		_radio.advertiser.is_enabled = 0;
   18fb2:	4b13      	ldr	r3, [pc, #76]	; (19000 <radio_adv_disable+0x5c>)
   18fb4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18fb8:	f36f 0200 	bfc	r2, #0, #1
   18fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   18fc0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   18fc4:	f013 0f01 	tst.w	r3, #1
   18fc8:	d016      	beq.n	18ff8 <radio_adv_disable+0x54>
		conn = _radio.advertiser.conn;
   18fca:	4b0d      	ldr	r3, [pc, #52]	; (19000 <radio_adv_disable+0x5c>)
   18fcc:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
		if (conn) {
   18fd0:	b175      	cbz	r5, 18ff0 <radio_adv_disable+0x4c>
			_radio.advertiser.conn = NULL;
   18fd2:	461e      	mov	r6, r3
   18fd4:	2300      	movs	r3, #0
   18fd6:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   18fda:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   18fde:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   18fe2:	f7f6 f9bc 	bl	f35e <mem_release>
			mem_release(conn, &_radio.conn_free);
   18fe6:	f506 7184 	add.w	r1, r6, #264	; 0x108
   18fea:	4628      	mov	r0, r5
   18fec:	f7f6 f9b7 	bl	f35e <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   18ff0:	b104      	cbz	r4, 18ff4 <radio_adv_disable+0x50>
   18ff2:	240c      	movs	r4, #12
}
   18ff4:	4620      	mov	r0, r4
   18ff6:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   18ff8:	f7ff fded 	bl	18bd6 <ll_adv_scan_state_cb>
   18ffc:	e7e5      	b.n	18fca <radio_adv_disable+0x26>
   18ffe:	bf00      	nop
   19000:	200014d4 	.word	0x200014d4
   19004:	00000000 	.word	0x00000000

00019008 <radio_scan_enable>:
{
   19008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1900c:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1900e:	2402      	movs	r4, #2
   19010:	940d      	str	r4, [sp, #52]	; 0x34
	if (_radio.scanner.is_enabled) {
   19012:	4c77      	ldr	r4, [pc, #476]	; (191f0 <radio_scan_enable+0x1e8>)
   19014:	f894 40dc 	ldrb.w	r4, [r4, #220]	; 0xdc
   19018:	f014 0f01 	tst.w	r4, #1
   1901c:	d003      	beq.n	19026 <radio_scan_enable+0x1e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1901e:	200c      	movs	r0, #12
}
   19020:	b00f      	add	sp, #60	; 0x3c
   19022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19026:	461d      	mov	r5, r3
   19028:	4617      	mov	r7, r2
   1902a:	460e      	mov	r6, r1
	_radio.scanner.type = type;
   1902c:	4c70      	ldr	r4, [pc, #448]	; (191f0 <radio_scan_enable+0x1e8>)
   1902e:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   19032:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   19036:	f3c0 0042 	ubfx	r0, r0, #1, #3
   1903a:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   1903e:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
   19042:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
   19046:	f361 0200 	bfi	r2, r1, #0, #1
   1904a:	f884 20de 	strb.w	r2, [r4, #222]	; 0xde
	_radio.scanner.rl_idx = rl_idx;
   1904e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
   19052:	f884 20df 	strb.w	r2, [r4, #223]	; 0xdf
	_radio.scanner.init_addr_type = init_addr_type;
   19056:	f366 13c7 	bfi	r3, r6, #7, #1
   1905a:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   1905e:	2206      	movs	r2, #6
   19060:	4639      	mov	r1, r7
   19062:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   19066:	f7e7 f92b 	bl	2c0 <memcpy>
		TICKER_US_TO_TICKS((u64_t) window * 625);
   1906a:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
   1906e:	4e61      	ldr	r6, [pc, #388]	; (191f4 <radio_scan_enable+0x1ec>)
   19070:	f04f 0a91 	mov.w	sl, #145	; 0x91
   19074:	fba2 0106 	umull	r0, r1, r2, r6
   19078:	fb0a 1102 	mla	r1, sl, r2, r1
   1907c:	a35a      	add	r3, pc, #360	; (adr r3, 191e8 <radio_scan_enable+0x1e0>)
   1907e:	e9d3 2300 	ldrd	r2, r3, [r3]
   19082:	f7e8 f83b 	bl	10fc <__aeabi_uldivmod>
   19086:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_window =
   1908a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
	_radio.scanner.filter_policy = filter_policy;
   1908e:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   19092:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   19096:	f362 1305 	bfi	r3, r2, #4, #2
   1909a:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
		_radio.ticks_active_to_start;
   1909e:	f8d4 9180 	ldr.w	r9, [r4, #384]	; 0x180
	_radio.scanner.hdr.ticks_active_to_start =
   190a2:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_xtal_to_start =
   190a6:	2327      	movs	r3, #39	; 0x27
   190a8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	_radio.scanner.hdr.ticks_preempt_to_start =
   190ac:	2300      	movs	r3, #0
   190ae:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		_radio.scanner.ticks_window +
   190b2:	f100 0809 	add.w	r8, r0, #9
	_radio.scanner.hdr.ticks_slot =
   190b6:	f8c4 80d8 	str.w	r8, [r4, #216]	; 0xd8
	ticks_interval = TICKER_US_TO_TICKS((u64_t) interval * 625);
   190ba:	b2aa      	uxth	r2, r5
   190bc:	fba2 6706 	umull	r6, r7, r2, r6
   190c0:	fb0a 7702 	mla	r7, sl, r2, r7
   190c4:	a348      	add	r3, pc, #288	; (adr r3, 191e8 <radio_scan_enable+0x1e0>)
   190c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   190ca:	4630      	mov	r0, r6
   190cc:	4639      	mov	r1, r7
   190ce:	f7e8 f815 	bl	10fc <__aeabi_uldivmod>
   190d2:	4604      	mov	r4, r0
   190d4:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
	    (ticks_interval -
   190d8:	f1aa 0327 	sub.w	r3, sl, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   190dc:	4598      	cmp	r8, r3
   190de:	d902      	bls.n	190e6 <radio_scan_enable+0xde>
		_radio.scanner.hdr.ticks_slot =
   190e0:	4a43      	ldr	r2, [pc, #268]	; (191f0 <radio_scan_enable+0x1e8>)
   190e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	ticks_slot_offset =
   190e6:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   190ea:	bf38      	it	cc
   190ec:	f04f 0927 	movcc.w	r9, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   190f0:	f7f7 ff52 	bl	10f98 <ticker_ticks_now_get>
   190f4:	4683      	mov	fp, r0
	if ((_radio.scanner.conn) ||
   190f6:	4b3e      	ldr	r3, [pc, #248]	; (191f0 <radio_scan_enable+0x1e8>)
   190f8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   190fc:	2b00      	cmp	r3, #0
   190fe:	d045      	beq.n	1918c <radio_scan_enable+0x184>
		us_offset = 0;
   19100:	2300      	movs	r3, #0
   19102:	930c      	str	r3, [sp, #48]	; 0x30
			   (ticks_anchor + TICKER_US_TO_TICKS(us_offset)), 0,
   19104:	f04f 0800 	mov.w	r8, #0
   19108:	a337      	add	r3, pc, #220	; (adr r3, 191e8 <radio_scan_enable+0x1e0>)
   1910a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1910e:	493a      	ldr	r1, [pc, #232]	; (191f8 <radio_scan_enable+0x1f0>)
   19110:	980c      	ldr	r0, [sp, #48]	; 0x30
   19112:	fba0 0101 	umull	r0, r1, r0, r1
   19116:	f7e7 fff1 	bl	10fc <__aeabi_uldivmod>
   1911a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1911e:	4483      	add	fp, r0
			   TICKER_REMAINDER((u64_t) interval * 625),
   19120:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   19124:	2500      	movs	r5, #0
   19126:	4835      	ldr	r0, [pc, #212]	; (191fc <radio_scan_enable+0x1f4>)
   19128:	2307      	movs	r3, #7
   1912a:	fb03 f304 	mul.w	r3, r3, r4
   1912e:	fb00 3305 	mla	r3, r0, r5, r3
   19132:	fba4 0100 	umull	r0, r1, r4, r0
   19136:	4419      	add	r1, r3
   19138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1913c:	2300      	movs	r3, #0
   1913e:	1a30      	subs	r0, r6, r0
   19140:	eb67 0101 	sbc.w	r1, r7, r1
   19144:	f7e7 ffda 	bl	10fc <__aeabi_uldivmod>
			    _radio.scanner.hdr.ticks_slot),
   19148:	4b29      	ldr	r3, [pc, #164]	; (191f0 <radio_scan_enable+0x1e8>)
   1914a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1914e:	4499      	add	r9, r3
   19150:	fa1f f389 	uxth.w	r3, r9
   19154:	aa0d      	add	r2, sp, #52	; 0x34
   19156:	9208      	str	r2, [sp, #32]
   19158:	4a29      	ldr	r2, [pc, #164]	; (19200 <radio_scan_enable+0x1f8>)
   1915a:	9207      	str	r2, [sp, #28]
   1915c:	f8cd 8018 	str.w	r8, [sp, #24]
   19160:	4a28      	ldr	r2, [pc, #160]	; (19204 <radio_scan_enable+0x1fc>)
   19162:	9205      	str	r2, [sp, #20]
   19164:	9304      	str	r3, [sp, #16]
   19166:	f8cd 800c 	str.w	r8, [sp, #12]
   1916a:	9002      	str	r0, [sp, #8]
   1916c:	f8cd a004 	str.w	sl, [sp, #4]
   19170:	f8cd 8000 	str.w	r8, [sp]
   19174:	465b      	mov	r3, fp
   19176:	2206      	movs	r2, #6
   19178:	2103      	movs	r1, #3
   1917a:	4640      	mov	r0, r8
   1917c:	f7f7 fda4 	bl	10cc8 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   19180:	2802      	cmp	r0, #2
   19182:	d017      	beq.n	191b4 <radio_scan_enable+0x1ac>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   19184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19186:	b1cb      	cbz	r3, 191bc <radio_scan_enable+0x1b4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19188:	200c      	movs	r0, #12
   1918a:	e749      	b.n	19020 <radio_scan_enable+0x18>
		u32_t ticks_ref = 0;
   1918c:	2300      	movs	r3, #0
   1918e:	930b      	str	r3, [sp, #44]	; 0x2c
						_radio.scanner.hdr.ticks_slot),
   19190:	4b17      	ldr	r3, [pc, #92]	; (191f0 <radio_scan_enable+0x1e8>)
   19192:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   19196:	ab0c      	add	r3, sp, #48	; 0x30
   19198:	aa0b      	add	r2, sp, #44	; 0x2c
   1919a:	4449      	add	r1, r9
   1919c:	2003      	movs	r0, #3
   1919e:	f7f9 ff63 	bl	13068 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   191a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   191a4:	2b00      	cmp	r3, #0
   191a6:	d0ad      	beq.n	19104 <radio_scan_enable+0xfc>
			ticks_anchor = ticks_ref;
   191a8:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   191ac:	e7aa      	b.n	19104 <radio_scan_enable+0xfc>
   191ae:	bf20      	wfe
  __ASM volatile ("sev");
   191b0:	bf40      	sev
  __ASM volatile ("wfe");
   191b2:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   191b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   191b6:	2b02      	cmp	r3, #2
   191b8:	d0f9      	beq.n	191ae <radio_scan_enable+0x1a6>
   191ba:	e7e3      	b.n	19184 <radio_scan_enable+0x17c>
	_radio.scanner.is_enabled = 1;
   191bc:	4b0c      	ldr	r3, [pc, #48]	; (191f0 <radio_scan_enable+0x1e8>)
   191be:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   191c2:	f042 0201 	orr.w	r2, r2, #1
   191c6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	if (!_radio.advertiser.is_enabled) {
   191ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   191ce:	f013 0f01 	tst.w	r3, #1
   191d2:	d001      	beq.n	191d8 <radio_scan_enable+0x1d0>
	return 0;
   191d4:	2000      	movs	r0, #0
   191d6:	e723      	b.n	19020 <radio_scan_enable+0x18>
		ll_adv_scan_state_cb(BIT(1));
   191d8:	2002      	movs	r0, #2
   191da:	f7ff fcfc 	bl	18bd6 <ll_adv_scan_state_cb>
	return 0;
   191de:	2000      	movs	r0, #0
   191e0:	e71e      	b.n	19020 <radio_scan_enable+0x18>
   191e2:	bf00      	nop
   191e4:	f3af 8000 	nop.w
   191e8:	1afd498d 	.word	0x1afd498d
   191ec:	00000007 	.word	0x00000007
   191f0:	200014d4 	.word	0x200014d4
   191f4:	84e72a00 	.word	0x84e72a00
   191f8:	3b9aca00 	.word	0x3b9aca00
   191fc:	1afd498d 	.word	0x1afd498d
   19200:	000116ad 	.word	0x000116ad
   19204:	000165e5 	.word	0x000165e5

00019208 <radio_scan_disable>:
{
   19208:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   1920a:	2104      	movs	r1, #4
   1920c:	2006      	movs	r0, #6
   1920e:	f7f8 fe8f 	bl	11f30 <role_disable>
	if (!status) {
   19212:	4604      	mov	r4, r0
   19214:	b9f0      	cbnz	r0, 19254 <radio_scan_disable+0x4c>
		_radio.scanner.is_enabled = 0;
   19216:	4b13      	ldr	r3, [pc, #76]	; (19264 <radio_scan_disable+0x5c>)
   19218:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1921c:	f36f 0200 	bfc	r2, #0, #1
   19220:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		if (!_radio.advertiser.is_enabled) {
   19224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   19228:	f013 0f01 	tst.w	r3, #1
   1922c:	d016      	beq.n	1925c <radio_scan_disable+0x54>
		conn = _radio.scanner.conn;
   1922e:	4b0d      	ldr	r3, [pc, #52]	; (19264 <radio_scan_disable+0x5c>)
   19230:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
		if (conn) {
   19234:	b175      	cbz	r5, 19254 <radio_scan_disable+0x4c>
			_radio.scanner.conn = NULL;
   19236:	461e      	mov	r6, r3
   19238:	2300      	movs	r3, #0
   1923a:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
			mem_release(conn->llcp_terminate.
   1923e:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   19242:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   19246:	f7f6 f88a 	bl	f35e <mem_release>
			mem_release(conn, &_radio.conn_free);
   1924a:	f506 7184 	add.w	r1, r6, #264	; 0x108
   1924e:	4628      	mov	r0, r5
   19250:	f7f6 f885 	bl	f35e <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   19254:	b104      	cbz	r4, 19258 <radio_scan_disable+0x50>
   19256:	240c      	movs	r4, #12
}
   19258:	4620      	mov	r0, r4
   1925a:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   1925c:	f7ff fcbb 	bl	18bd6 <ll_adv_scan_state_cb>
   19260:	e7e5      	b.n	1922e <radio_scan_disable+0x26>
   19262:	bf00      	nop
   19264:	200014d4 	.word	0x200014d4

00019268 <ll_connect_disable>:
{
   19268:	b508      	push	{r3, lr}
	if (_radio.scanner.conn == 0) {
   1926a:	4b04      	ldr	r3, [pc, #16]	; (1927c <ll_connect_disable+0x14>)
   1926c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   19270:	b113      	cbz	r3, 19278 <ll_connect_disable+0x10>
	status = radio_scan_disable();
   19272:	f7ff ffc9 	bl	19208 <radio_scan_disable>
	return status;
   19276:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19278:	200c      	movs	r0, #12
}
   1927a:	bd08      	pop	{r3, pc}
   1927c:	200014d4 	.word	0x200014d4

00019280 <radio_rx_dequeue>:
{
   19280:	b530      	push	{r4, r5, lr}
   19282:	b083      	sub	sp, #12
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   19284:	aa02      	add	r2, sp, #8
   19286:	2300      	movs	r3, #0
   19288:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1928c:	4947      	ldr	r1, [pc, #284]	; (193ac <radio_rx_dequeue+0x12c>)
   1928e:	f8d1 014c 	ldr.w	r0, [r1, #332]	; 0x14c
   19292:	f501 71a4 	add.w	r1, r1, #328	; 0x148
   19296:	f7f6 f8be 	bl	f416 <memq_dequeue>
	LL_ASSERT(link);
   1929a:	b178      	cbz	r0, 192bc <radio_rx_dequeue+0x3c>
	mem_release(link, &_radio.link_rx_free);
   1929c:	4944      	ldr	r1, [pc, #272]	; (193b0 <radio_rx_dequeue+0x130>)
   1929e:	f7f6 f85e 	bl	f35e <mem_release>
	switch (radio_pdu_node_rx->hdr.type) {
   192a2:	9a01      	ldr	r2, [sp, #4]
   192a4:	7913      	ldrb	r3, [r2, #4]
   192a6:	3b01      	subs	r3, #1
   192a8:	2b0b      	cmp	r3, #11
   192aa:	d824      	bhi.n	192f6 <radio_rx_dequeue+0x76>
   192ac:	e8df f003 	tbb	[pc, r3]
   192b0:	0c0c0c0c 	.word	0x0c0c0c0c
   192b4:	0c180c0c 	.word	0x0c180c0c
   192b8:	0c0c0c0c 	.word	0x0c0c0c0c
	LL_ASSERT(link);
   192bc:	4040      	eors	r0, r0
   192be:	f380 8811 	msr	BASEPRI, r0
   192c2:	f04f 0004 	mov.w	r0, #4
   192c6:	df02      	svc	2
		LL_ASSERT(_radio.link_rx_data_quota <
   192c8:	4938      	ldr	r1, [pc, #224]	; (193ac <radio_rx_dequeue+0x12c>)
   192ca:	f891 3150 	ldrb.w	r3, [r1, #336]	; 0x150
   192ce:	f891 113c 	ldrb.w	r1, [r1, #316]	; 0x13c
   192d2:	3901      	subs	r1, #1
   192d4:	428b      	cmp	r3, r1
   192d6:	da08      	bge.n	192ea <radio_rx_dequeue+0x6a>
		_radio.link_rx_data_quota++;
   192d8:	3301      	adds	r3, #1
   192da:	4934      	ldr	r1, [pc, #208]	; (193ac <radio_rx_dequeue+0x12c>)
   192dc:	f881 3150 	strb.w	r3, [r1, #336]	; 0x150
	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   192e0:	7913      	ldrb	r3, [r2, #4]
   192e2:	2b06      	cmp	r3, #6
   192e4:	d00d      	beq.n	19302 <radio_rx_dequeue+0x82>
}
   192e6:	b003      	add	sp, #12
   192e8:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(_radio.link_rx_data_quota <
   192ea:	4040      	eors	r0, r0
   192ec:	f380 8811 	msr	BASEPRI, r0
   192f0:	f04f 0004 	mov.w	r0, #4
   192f4:	df02      	svc	2
		LL_ASSERT(0);
   192f6:	4040      	eors	r0, r0
   192f8:	f380 8811 	msr	BASEPRI, r0
   192fc:	f04f 0004 	mov.w	r0, #4
   19300:	df02      	svc	2
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   19302:	7ad3      	ldrb	r3, [r2, #11]
   19304:	2b3c      	cmp	r3, #60	; 0x3c
   19306:	d002      	beq.n	1930e <radio_rx_dequeue+0x8e>
		    radio_le_conn_cmplt->role) {
   19308:	7b12      	ldrb	r2, [r2, #12]
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   1930a:	2a00      	cmp	r2, #0
   1930c:	d039      	beq.n	19382 <radio_rx_dequeue+0x102>
			if (radio_le_conn_cmplt->status == 0x3c) {
   1930e:	2b3c      	cmp	r3, #60	; 0x3c
   19310:	d02a      	beq.n	19368 <radio_rx_dequeue+0xe8>
		struct connection *conn = NULL;
   19312:	2400      	movs	r4, #0
			LL_ASSERT(_radio.advertiser.is_enabled);
   19314:	4b25      	ldr	r3, [pc, #148]	; (193ac <radio_rx_dequeue+0x12c>)
   19316:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1931a:	f013 0f01 	tst.w	r3, #1
   1931e:	d02a      	beq.n	19376 <radio_rx_dequeue+0xf6>
			_radio.advertiser.is_enabled = 0;
   19320:	4b22      	ldr	r3, [pc, #136]	; (193ac <radio_rx_dequeue+0x12c>)
   19322:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   19326:	f36f 0200 	bfc	r2, #0, #1
   1932a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (conn) {
   1932e:	b15c      	cbz	r4, 19348 <radio_rx_dequeue+0xc8>
			mem_release(node_rx->hdr.onion.link,
   19330:	4d1e      	ldr	r5, [pc, #120]	; (193ac <radio_rx_dequeue+0x12c>)
   19332:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   19336:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1933a:	f7f6 f810 	bl	f35e <mem_release>
			mem_release(conn, &_radio.conn_free);
   1933e:	f505 7184 	add.w	r1, r5, #264	; 0x108
   19342:	4620      	mov	r0, r4
   19344:	f7f6 f80b 	bl	f35e <mem_release>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   19348:	4b18      	ldr	r3, [pc, #96]	; (193ac <radio_rx_dequeue+0x12c>)
   1934a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1934e:	f002 0201 	and.w	r2, r2, #1
		     _radio.advertiser.is_enabled;
   19352:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   19356:	f003 0301 	and.w	r3, r3, #1
		if (!bm) {
   1935a:	ea53 0342 	orrs.w	r3, r3, r2, lsl #1
   1935e:	d1c2      	bne.n	192e6 <radio_rx_dequeue+0x66>
			ll_adv_scan_state_cb(0);
   19360:	2000      	movs	r0, #0
   19362:	f7ff fc38 	bl	18bd6 <ll_adv_scan_state_cb>
}
   19366:	e7be      	b.n	192e6 <radio_rx_dequeue+0x66>
				conn = _radio.advertiser.conn;
   19368:	4b10      	ldr	r3, [pc, #64]	; (193ac <radio_rx_dequeue+0x12c>)
   1936a:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
				_radio.advertiser.conn = NULL;
   1936e:	2200      	movs	r2, #0
   19370:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
   19374:	e7ce      	b.n	19314 <radio_rx_dequeue+0x94>
			LL_ASSERT(_radio.advertiser.is_enabled);
   19376:	4040      	eors	r0, r0
   19378:	f380 8811 	msr	BASEPRI, r0
   1937c:	f04f 0004 	mov.w	r0, #4
   19380:	df02      	svc	2
			LL_ASSERT(_radio.scanner.is_enabled);
   19382:	4b0a      	ldr	r3, [pc, #40]	; (193ac <radio_rx_dequeue+0x12c>)
   19384:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   19388:	f013 0f01 	tst.w	r3, #1
   1938c:	d008      	beq.n	193a0 <radio_rx_dequeue+0x120>
			_radio.scanner.is_enabled = 0;
   1938e:	4b07      	ldr	r3, [pc, #28]	; (193ac <radio_rx_dequeue+0x12c>)
   19390:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   19394:	f36f 0200 	bfc	r2, #0, #1
   19398:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		struct connection *conn = NULL;
   1939c:	2400      	movs	r4, #0
   1939e:	e7c6      	b.n	1932e <radio_rx_dequeue+0xae>
			LL_ASSERT(_radio.scanner.is_enabled);
   193a0:	4040      	eors	r0, r0
   193a2:	f380 8811 	msr	BASEPRI, r0
   193a6:	f04f 0004 	mov.w	r0, #4
   193aa:	df02      	svc	2
   193ac:	200014d4 	.word	0x200014d4
   193b0:	20001618 	.word	0x20001618

000193b4 <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   193b4:	4668      	mov	r0, sp
   193b6:	f020 0107 	bic.w	r1, r0, #7
   193ba:	468d      	mov	sp, r1
   193bc:	b501      	push	{r0, lr}
{
	isr_radio();
   193be:	f7f6 f8e1 	bl	f584 <isr_radio>

	ISR_DIRECT_PM();
   193c2:	f00e fb75 	bl	27ab0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   193c6:	f00e f90f 	bl	275e8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   193ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   193ce:	4685      	mov	sp, r0
   193d0:	4770      	bx	lr
	...

000193d4 <rtc0_nrf5_isr>:
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   193d4:	b510      	push	{r4, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   193d6:	4b0c      	ldr	r3, [pc, #48]	; (19408 <rtc0_nrf5_isr+0x34>)
   193d8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   193dc:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   193e0:	b922      	cbnz	r2, 193ec <rtc0_nrf5_isr+0x18>

		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   193e2:	b94c      	cbnz	r4, 193f8 <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;

		ticker_trigger(1);
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   193e4:	2000      	movs	r0, #0
   193e6:	f7f5 febf 	bl	f168 <mayfly_run>
   193ea:	bd10      	pop	{r4, pc}
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   193ec:	2000      	movs	r0, #0
   193ee:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   193f2:	f7f7 fc5b 	bl	10cac <ticker_trigger>
   193f6:	e7f4      	b.n	193e2 <rtc0_nrf5_isr+0xe>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   193f8:	2200      	movs	r2, #0
   193fa:	4b03      	ldr	r3, [pc, #12]	; (19408 <rtc0_nrf5_isr+0x34>)
   193fc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		ticker_trigger(1);
   19400:	2001      	movs	r0, #1
   19402:	f7f7 fc53 	bl	10cac <ticker_trigger>
   19406:	e7ed      	b.n	193e4 <rtc0_nrf5_isr+0x10>
   19408:	4000b000 	.word	0x4000b000

0001940c <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
   1940c:	b508      	push	{r3, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
   1940e:	2001      	movs	r0, #1
   19410:	f7f5 feaa 	bl	f168 <mayfly_run>
   19414:	bd08      	pop	{r3, pc}

00019416 <rng_nrf5_isr>:
{
   19416:	b508      	push	{r3, lr}
	isr_rand(arg);
   19418:	f7f7 f9e2 	bl	107e0 <isr_rand>
   1941c:	bd08      	pop	{r3, pc}

0001941e <mayfly_enable_cb>:
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   1941e:	2901      	cmp	r1, #1
   19420:	d105      	bne.n	1942e <mayfly_enable_cb+0x10>
{
   19422:	b508      	push	{r3, lr}
	if (enable) {
   19424:	b94a      	cbnz	r2, 1943a <mayfly_enable_cb+0x1c>
		irq_disable(SWI4_IRQn);
   19426:	2018      	movs	r0, #24
   19428:	f00e fb0c 	bl	27a44 <_arch_irq_disable>
   1942c:	bd08      	pop	{r3, pc}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   1942e:	4040      	eors	r0, r0
   19430:	f380 8811 	msr	BASEPRI, r0
   19434:	f04f 0004 	mov.w	r0, #4
   19438:	df02      	svc	2
		irq_enable(SWI4_IRQn);
   1943a:	2018      	movs	r0, #24
   1943c:	f00e faf4 	bl	27a28 <_arch_irq_enable>
   19440:	bd08      	pop	{r3, pc}

00019442 <mayfly_is_enabled>:
{
   19442:	b508      	push	{r3, lr}
	if (callee_id == MAYFLY_CALL_ID_0) {
   19444:	b129      	cbz	r1, 19452 <mayfly_is_enabled+0x10>
	} else if (callee_id == MAYFLY_CALL_ID_1) {
   19446:	2901      	cmp	r1, #1
   19448:	d107      	bne.n	1945a <mayfly_is_enabled+0x18>
		return irq_is_enabled(SWI4_IRQn);
   1944a:	2018      	movs	r0, #24
   1944c:	f00e fb08 	bl	27a60 <_arch_irq_is_enabled>
   19450:	bd08      	pop	{r3, pc}
		return irq_is_enabled(RTC0_IRQn);
   19452:	200b      	movs	r0, #11
   19454:	f00e fb04 	bl	27a60 <_arch_irq_is_enabled>
   19458:	bd08      	pop	{r3, pc}
	LL_ASSERT(0);
   1945a:	4040      	eors	r0, r0
   1945c:	f380 8811 	msr	BASEPRI, r0
   19460:	f04f 0004 	mov.w	r0, #4
   19464:	df02      	svc	2

00019466 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_1)) ||
   19466:	4288      	cmp	r0, r1
   19468:	d009      	beq.n	1947e <mayfly_prio_is_equal+0x18>
	return (caller_id == callee_id) ||
   1946a:	b908      	cbnz	r0, 19470 <mayfly_prio_is_equal+0xa>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
   1946c:	2901      	cmp	r1, #1
   1946e:	d008      	beq.n	19482 <mayfly_prio_is_equal+0x1c>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   19470:	2801      	cmp	r0, #1
   19472:	d001      	beq.n	19478 <mayfly_prio_is_equal+0x12>
   19474:	2000      	movs	r0, #0
   19476:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_1) &&
   19478:	b129      	cbz	r1, 19486 <mayfly_prio_is_equal+0x20>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   1947a:	2000      	movs	r0, #0
   1947c:	4770      	bx	lr
   1947e:	2001      	movs	r0, #1
   19480:	4770      	bx	lr
   19482:	2001      	movs	r0, #1
   19484:	4770      	bx	lr
   19486:	2001      	movs	r0, #1
}
   19488:	4770      	bx	lr
	...

0001948c <mayfly_pend>:
	switch (callee_id) {
   1948c:	b139      	cbz	r1, 1949e <mayfly_pend+0x12>
   1948e:	2901      	cmp	r1, #1
   19490:	d00b      	beq.n	194aa <mayfly_pend+0x1e>
		LL_ASSERT(0);
   19492:	4040      	eors	r0, r0
   19494:	f380 8811 	msr	BASEPRI, r0
   19498:	f04f 0004 	mov.w	r0, #4
   1949c:	df02      	svc	2
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1949e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   194a2:	4b05      	ldr	r3, [pc, #20]	; (194b8 <mayfly_pend+0x2c>)
   194a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   194a8:	4770      	bx	lr
   194aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   194ae:	4b02      	ldr	r3, [pc, #8]	; (194b8 <mayfly_pend+0x2c>)
   194b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   194b4:	4770      	bx	lr
   194b6:	bf00      	nop
   194b8:	e000e100 	.word	0xe000e100

000194bc <radio_active_callback>:
{
   194bc:	4770      	bx	lr
	...

000194c0 <radio_event_callback>:
{
   194c0:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   194c2:	4b02      	ldr	r3, [pc, #8]	; (194cc <radio_event_callback+0xc>)
   194c4:	6818      	ldr	r0, [r3, #0]
   194c6:	f00f ff44 	bl	29352 <_impl_k_sem_give>
   194ca:	bd08      	pop	{r3, pc}
   194cc:	20001df8 	.word	0x20001df8

000194d0 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   194d0:	b510      	push	{r4, lr}
   194d2:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   194d4:	4b37      	ldr	r3, [pc, #220]	; (195b4 <ll_init+0xe4>)
   194d6:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
   194d8:	2204      	movs	r2, #4
   194da:	2109      	movs	r1, #9
   194dc:	4836      	ldr	r0, [pc, #216]	; (195b8 <ll_init+0xe8>)
   194de:	f7f7 f957 	bl	10790 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
   194e2:	220c      	movs	r2, #12
   194e4:	2111      	movs	r1, #17
   194e6:	4835      	ldr	r0, [pc, #212]	; (195bc <ll_init+0xec>)
   194e8:	f7f7 f95c 	bl	107a4 <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   194ec:	4834      	ldr	r0, [pc, #208]	; (195c0 <ll_init+0xf0>)
   194ee:	f00e fc69 	bl	27dc4 <device_get_binding>
	if (!clk_k32) {
   194f2:	2800      	cmp	r0, #0
   194f4:	d054      	beq.n	195a0 <ll_init+0xd0>
	const struct clock_control_driver_api *api = dev->driver_api;
   194f6:	6842      	ldr	r2, [r0, #4]
	return api->on(dev, sys);
   194f8:	6812      	ldr	r2, [r2, #0]
   194fa:	2101      	movs	r1, #1
   194fc:	4790      	blx	r2
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
   194fe:	f7f5 ffab 	bl	f458 <cntr_init>

	mayfly_init();
   19502:	f7f5 fd65 	bl	efd0 <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   19506:	4b2f      	ldr	r3, [pc, #188]	; (195c4 <ll_init+0xf4>)
   19508:	2108      	movs	r1, #8
   1950a:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   1950c:	2203      	movs	r2, #3
   1950e:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   19510:	2000      	movs	r0, #0
   19512:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   19514:	2202      	movs	r2, #2
   19516:	761a      	strb	r2, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   19518:	4a2b      	ldr	r2, [pc, #172]	; (195c8 <ll_init+0xf8>)
   1951a:	9202      	str	r2, [sp, #8]
   1951c:	220d      	movs	r2, #13
   1951e:	9201      	str	r2, [sp, #4]
   19520:	9300      	str	r3, [sp, #0]
   19522:	2304      	movs	r3, #4
   19524:	4a29      	ldr	r2, [pc, #164]	; (195cc <ll_init+0xfc>)
   19526:	f7f7 fb67 	bl	10bf8 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   1952a:	4829      	ldr	r0, [pc, #164]	; (195d0 <ll_init+0x100>)
   1952c:	f00e fc4a 	bl	27dc4 <device_get_binding>
	if (!clk_m16) {
   19530:	2800      	cmp	r0, #0
   19532:	d038      	beq.n	195a6 <ll_init+0xd6>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
   19534:	f44f 7357 	mov.w	r3, #860	; 0x35c
   19538:	9304      	str	r3, [sp, #16]
   1953a:	4b26      	ldr	r3, [pc, #152]	; (195d4 <ll_init+0x104>)
   1953c:	9303      	str	r3, [sp, #12]
   1953e:	231b      	movs	r3, #27
   19540:	9302      	str	r3, [sp, #8]
   19542:	9301      	str	r3, [sp, #4]
   19544:	2302      	movs	r3, #2
   19546:	9300      	str	r3, [sp, #0]
   19548:	2301      	movs	r3, #1
   1954a:	461a      	mov	r2, r3
   1954c:	2107      	movs	r1, #7
   1954e:	f7fe fccb 	bl	17ee8 <radio_init>
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
   19552:	bb58      	cbnz	r0, 195ac <ll_init+0xdc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
	}

	ll_filter_reset(true);
   19554:	2001      	movs	r0, #1
   19556:	f000 ffff 	bl	1a558 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1955a:	2200      	movs	r2, #0
   1955c:	4611      	mov	r1, r2
   1955e:	2001      	movs	r0, #1
   19560:	f00e fa8c 	bl	27a7c <_irq_priority_set>
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   19564:	2200      	movs	r2, #0
   19566:	4611      	mov	r1, r2
   19568:	200b      	movs	r0, #11
   1956a:	f00e fa87 	bl	27a7c <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   1956e:	2200      	movs	r2, #0
   19570:	4611      	mov	r1, r2
   19572:	2018      	movs	r0, #24
   19574:	f00e fa82 	bl	27a7c <_irq_priority_set>
		    NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
   19578:	2200      	movs	r2, #0
   1957a:	2101      	movs	r1, #1
   1957c:	200d      	movs	r0, #13
   1957e:	f00e fa7d 	bl	27a7c <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
   19582:	2001      	movs	r0, #1
   19584:	f00e fa50 	bl	27a28 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   19588:	200b      	movs	r0, #11
   1958a:	f00e fa4d 	bl	27a28 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   1958e:	2018      	movs	r0, #24
   19590:	f00e fa4a 	bl	27a28 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
   19594:	200d      	movs	r0, #13
   19596:	f00e fa47 	bl	27a28 <_arch_irq_enable>

	return 0;
   1959a:	2000      	movs	r0, #0
}
   1959c:	b006      	add	sp, #24
   1959e:	bd10      	pop	{r4, pc}
		return -ENODEV;
   195a0:	f06f 0012 	mvn.w	r0, #18
   195a4:	e7fa      	b.n	1959c <ll_init+0xcc>
		return -ENODEV;
   195a6:	f06f 0012 	mvn.w	r0, #18
   195aa:	e7f7      	b.n	1959c <ll_init+0xcc>
		return -ENOMEM;
   195ac:	f06f 000b 	mvn.w	r0, #11
   195b0:	e7f4      	b.n	1959c <ll_init+0xcc>
   195b2:	bf00      	nop
   195b4:	20001df8 	.word	0x20001df8
   195b8:	20001dd8 	.word	0x20001dd8
   195bc:	20001de4 	.word	0x20001de4
   195c0:	0002e9d8 	.word	0x0002e9d8
   195c4:	20001db8 	.word	0x20001db8
   195c8:	20001b7c 	.word	0x20001b7c
   195cc:	20001a5c 	.word	0x20001a5c
   195d0:	0002e9e4 	.word	0x0002e9e4
   195d4:	2000165c 	.word	0x2000165c

000195d8 <ll_addr_get>:
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
   195d8:	2801      	cmp	r0, #1
   195da:	d814      	bhi.n	19606 <ll_addr_get+0x2e>
{
   195dc:	b538      	push	{r3, r4, r5, lr}
   195de:	460c      	mov	r4, r1
		return NULL;
	}

	if (addr_type) {
   195e0:	b140      	cbz	r0, 195f4 <ll_addr_get+0x1c>
		if (bdaddr) {
   195e2:	b191      	cbz	r1, 1960a <ll_addr_get+0x32>
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
   195e4:	4d0b      	ldr	r5, [pc, #44]	; (19614 <ll_addr_get+0x3c>)
   195e6:	2206      	movs	r2, #6
   195e8:	4629      	mov	r1, r5
   195ea:	4620      	mov	r0, r4
   195ec:	f7e6 fe68 	bl	2c0 <memcpy>
		}

		return _ll_context.rnd_addr;
   195f0:	4628      	mov	r0, r5
   195f2:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (bdaddr) {
   195f4:	b159      	cbz	r1, 1960e <ll_addr_get+0x36>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
   195f6:	4d08      	ldr	r5, [pc, #32]	; (19618 <ll_addr_get+0x40>)
   195f8:	2206      	movs	r2, #6
   195fa:	4629      	mov	r1, r5
   195fc:	4620      	mov	r0, r4
   195fe:	f7e6 fe5f 	bl	2c0 <memcpy>
	}

	return _ll_context.pub_addr;
   19602:	4628      	mov	r0, r5
   19604:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   19606:	2000      	movs	r0, #0
   19608:	4770      	bx	lr
		return _ll_context.rnd_addr;
   1960a:	4802      	ldr	r0, [pc, #8]	; (19614 <ll_addr_get+0x3c>)
   1960c:	bd38      	pop	{r3, r4, r5, pc}
	return _ll_context.pub_addr;
   1960e:	4802      	ldr	r0, [pc, #8]	; (19618 <ll_addr_get+0x40>)
}
   19610:	bd38      	pop	{r3, r4, r5, pc}
   19612:	bf00      	nop
   19614:	20001a56 	.word	0x20001a56
   19618:	20001a50 	.word	0x20001a50

0001961c <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   1961c:	b508      	push	{r3, lr}
	if (addr_type) {
   1961e:	b920      	cbnz	r0, 1962a <ll_addr_set+0xe>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
   19620:	2206      	movs	r2, #6
   19622:	4804      	ldr	r0, [pc, #16]	; (19634 <ll_addr_set+0x18>)
   19624:	f7e6 fe4c 	bl	2c0 <memcpy>
   19628:	bd08      	pop	{r3, pc}
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
   1962a:	2206      	movs	r2, #6
   1962c:	4802      	ldr	r0, [pc, #8]	; (19638 <ll_addr_set+0x1c>)
   1962e:	f7e6 fe47 	bl	2c0 <memcpy>
   19632:	bd08      	pop	{r3, pc}
   19634:	20001a50 	.word	0x20001a50
   19638:	20001a56 	.word	0x20001a56

0001963c <wl_clear>:
	for (int i = 0; i < WL_SIZE; i++) {
   1963c:	2300      	movs	r3, #0
   1963e:	e007      	b.n	19650 <wl_clear+0x14>
		wl[i].taken = 0;
   19640:	4a05      	ldr	r2, [pc, #20]	; (19658 <wl_clear+0x1c>)
   19642:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   19646:	f36f 0100 	bfc	r1, #0, #1
   1964a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1964e:	3301      	adds	r3, #1
   19650:	2b07      	cmp	r3, #7
   19652:	ddf5      	ble.n	19640 <wl_clear+0x4>
}
   19654:	4770      	bx	lr
   19656:	bf00      	nop
   19658:	20002030 	.word	0x20002030

0001965c <filter_clear>:
	filter->enable_bitmask = 0;
   1965c:	2300      	movs	r3, #0
   1965e:	7003      	strb	r3, [r0, #0]
	filter->addr_type_bitmask = 0;
   19660:	7043      	strb	r3, [r0, #1]
   19662:	4770      	bx	lr

00019664 <rl_clear>:
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19664:	2300      	movs	r3, #0
   19666:	e009      	b.n	1967c <rl_clear+0x18>
		rl[i].taken = 0;
   19668:	4907      	ldr	r1, [pc, #28]	; (19688 <rl_clear+0x24>)
   1966a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1966e:	00c2      	lsls	r2, r0, #3
   19670:	5c88      	ldrb	r0, [r1, r2]
   19672:	f36f 0000 	bfc	r0, #0, #1
   19676:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19678:	3301      	adds	r3, #1
   1967a:	b2db      	uxtb	r3, r3
   1967c:	2b07      	cmp	r3, #7
   1967e:	d9f3      	bls.n	19668 <rl_clear+0x4>
	peer_irk_count = 0;
   19680:	2200      	movs	r2, #0
   19682:	4b02      	ldr	r3, [pc, #8]	; (1968c <rl_clear+0x28>)
   19684:	701a      	strb	r2, [r3, #0]
   19686:	4770      	bx	lr
   19688:	20001eb8 	.word	0x20001eb8
   1968c:	20001e2c 	.word	0x20001e2c

00019690 <wl_find>:
{
   19690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19692:	4606      	mov	r6, r0
   19694:	460f      	mov	r7, r1
	if (free) {
   19696:	4615      	mov	r5, r2
   19698:	b10a      	cbz	r2, 1969e <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   1969a:	23ff      	movs	r3, #255	; 0xff
   1969c:	7013      	strb	r3, [r2, #0]
{
   1969e:	2400      	movs	r4, #0
   196a0:	e00c      	b.n	196bc <wl_find+0x2c>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   196a2:	4816      	ldr	r0, [pc, #88]	; (196fc <wl_find+0x6c>)
   196a4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   196a8:	2206      	movs	r2, #6
   196aa:	4639      	mov	r1, r7
   196ac:	3002      	adds	r0, #2
   196ae:	f011 f86f 	bl	2a790 <memcmp>
   196b2:	b9a0      	cbnz	r0, 196de <wl_find+0x4e>
			return i;
   196b4:	b2e0      	uxtb	r0, r4
   196b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*free = i;
   196b8:	702c      	strb	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   196ba:	3401      	adds	r4, #1
   196bc:	2c07      	cmp	r4, #7
   196be:	dc1a      	bgt.n	196f6 <wl_find+0x66>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   196c0:	4b0e      	ldr	r3, [pc, #56]	; (196fc <wl_find+0x6c>)
   196c2:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   196c6:	f013 0f01 	tst.w	r3, #1
   196ca:	d008      	beq.n	196de <wl_find+0x4e>
   196cc:	4b0b      	ldr	r3, [pc, #44]	; (196fc <wl_find+0x6c>)
   196ce:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   196d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   196d6:	f006 0201 	and.w	r2, r6, #1
   196da:	4293      	cmp	r3, r2
   196dc:	d0e1      	beq.n	196a2 <wl_find+0x12>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   196de:	2d00      	cmp	r5, #0
   196e0:	d0eb      	beq.n	196ba <wl_find+0x2a>
   196e2:	4b06      	ldr	r3, [pc, #24]	; (196fc <wl_find+0x6c>)
   196e4:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   196e8:	f013 0f01 	tst.w	r3, #1
   196ec:	d1e5      	bne.n	196ba <wl_find+0x2a>
   196ee:	782b      	ldrb	r3, [r5, #0]
   196f0:	2bff      	cmp	r3, #255	; 0xff
   196f2:	d1e2      	bne.n	196ba <wl_find+0x2a>
   196f4:	e7e0      	b.n	196b8 <wl_find+0x28>
	return FILTER_IDX_NONE;
   196f6:	20ff      	movs	r0, #255	; 0xff
}
   196f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196fa:	bf00      	nop
   196fc:	20002030 	.word	0x20002030

00019700 <wl_remove>:
{
   19700:	b508      	push	{r3, lr}
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   19702:	4601      	mov	r1, r0
   19704:	f811 0b01 	ldrb.w	r0, [r1], #1
   19708:	2200      	movs	r2, #0
   1970a:	f7ff ffc1 	bl	19690 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1970e:	2807      	cmp	r0, #7
   19710:	d901      	bls.n	19716 <wl_remove+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19712:	2002      	movs	r0, #2
}
   19714:	bd08      	pop	{r3, pc}
		u8_t j = wl[i].rl_idx;
   19716:	4b0b      	ldr	r3, [pc, #44]	; (19744 <wl_remove+0x44>)
   19718:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1971c:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1971e:	2b07      	cmp	r3, #7
   19720:	d807      	bhi.n	19732 <wl_remove+0x32>
			rl[j].wl = 0;
   19722:	4909      	ldr	r1, [pc, #36]	; (19748 <wl_remove+0x48>)
   19724:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   19728:	00da      	lsls	r2, r3, #3
   1972a:	5c8b      	ldrb	r3, [r1, r2]
   1972c:	f36f 1345 	bfc	r3, #5, #1
   19730:	548b      	strb	r3, [r1, r2]
		wl[i].taken = 0;
   19732:	4b04      	ldr	r3, [pc, #16]	; (19744 <wl_remove+0x44>)
   19734:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   19738:	f36f 0200 	bfc	r2, #0, #1
   1973c:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
		return 0;
   19740:	2000      	movs	r0, #0
   19742:	bd08      	pop	{r3, pc}
   19744:	20002030 	.word	0x20002030
   19748:	20001eb8 	.word	0x20001eb8

0001974c <filter_insert>:
{
   1974c:	b538      	push	{r3, r4, r5, lr}
	filter->enable_bitmask |= BIT(index);
   1974e:	2401      	movs	r4, #1
   19750:	fa04 f501 	lsl.w	r5, r4, r1
   19754:	7804      	ldrb	r4, [r0, #0]
   19756:	432c      	orrs	r4, r5
   19758:	7004      	strb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1975a:	f002 0201 	and.w	r2, r2, #1
   1975e:	fa02 f401 	lsl.w	r4, r2, r1
   19762:	7842      	ldrb	r2, [r0, #1]
   19764:	4322      	orrs	r2, r4
   19766:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19768:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1976c:	004a      	lsls	r2, r1, #1
   1976e:	4410      	add	r0, r2
   19770:	2206      	movs	r2, #6
   19772:	4619      	mov	r1, r3
   19774:	3002      	adds	r0, #2
   19776:	f7e6 fda3 	bl	2c0 <memcpy>
   1977a:	bd38      	pop	{r3, r4, r5, pc}

0001977c <filter_wl_update>:
{
   1977c:	b510      	push	{r4, lr}
	filter_clear(&wl_filter);
   1977e:	481b      	ldr	r0, [pc, #108]	; (197ec <filter_wl_update+0x70>)
   19780:	f7ff ff6c 	bl	1965c <filter_clear>
	for (i = 0; i < WL_SIZE; i++) {
   19784:	2400      	movs	r4, #0
   19786:	e00c      	b.n	197a2 <filter_wl_update+0x26>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   19788:	4b19      	ldr	r3, [pc, #100]	; (197f0 <filter_wl_update+0x74>)
   1978a:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
				      wl[i].id_addr.val);
   1978e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   19792:	3302      	adds	r3, #2
   19794:	f3c2 0240 	ubfx	r2, r2, #1, #1
   19798:	4814      	ldr	r0, [pc, #80]	; (197ec <filter_wl_update+0x70>)
   1979a:	f7ff ffd7 	bl	1974c <filter_insert>
	for (i = 0; i < WL_SIZE; i++) {
   1979e:	3401      	adds	r4, #1
   197a0:	b2e4      	uxtb	r4, r4
   197a2:	2c07      	cmp	r4, #7
   197a4:	d820      	bhi.n	197e8 <filter_wl_update+0x6c>
		if (!wl[i].taken) {
   197a6:	4621      	mov	r1, r4
   197a8:	4b11      	ldr	r3, [pc, #68]	; (197f0 <filter_wl_update+0x74>)
   197aa:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   197ae:	f013 0f01 	tst.w	r3, #1
   197b2:	d0f4      	beq.n	1979e <filter_wl_update+0x22>
		j = wl[i].rl_idx;
   197b4:	4b0e      	ldr	r3, [pc, #56]	; (197f0 <filter_wl_update+0x74>)
   197b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   197ba:	785b      	ldrb	r3, [r3, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   197bc:	4a0d      	ldr	r2, [pc, #52]	; (197f4 <filter_wl_update+0x78>)
   197be:	7812      	ldrb	r2, [r2, #0]
   197c0:	2a00      	cmp	r2, #0
   197c2:	d0e1      	beq.n	19788 <filter_wl_update+0xc>
   197c4:	2b07      	cmp	r3, #7
   197c6:	d8df      	bhi.n	19788 <filter_wl_update+0xc>
   197c8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   197cc:	00c2      	lsls	r2, r0, #3
   197ce:	480a      	ldr	r0, [pc, #40]	; (197f8 <filter_wl_update+0x7c>)
   197d0:	5c82      	ldrb	r2, [r0, r2]
   197d2:	f012 0f04 	tst.w	r2, #4
   197d6:	d0d7      	beq.n	19788 <filter_wl_update+0xc>
		    rl[j].dev) {
   197d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   197dc:	00da      	lsls	r2, r3, #3
   197de:	5c83      	ldrb	r3, [r0, r2]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   197e0:	f013 0f10 	tst.w	r3, #16
   197e4:	d0db      	beq.n	1979e <filter_wl_update+0x22>
   197e6:	e7cf      	b.n	19788 <filter_wl_update+0xc>
}
   197e8:	bd10      	pop	{r4, pc}
   197ea:	bf00      	nop
   197ec:	20002070 	.word	0x20002070
   197f0:	20002030 	.word	0x20002030
   197f4:	20001ff8 	.word	0x20001ff8
   197f8:	20001eb8 	.word	0x20001eb8

000197fc <filter_rl_update>:
{
   197fc:	b510      	push	{r4, lr}
	filter_clear(&rl_filter);
   197fe:	4810      	ldr	r0, [pc, #64]	; (19840 <filter_rl_update+0x44>)
   19800:	f7ff ff2c 	bl	1965c <filter_clear>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19804:	2400      	movs	r4, #0
   19806:	e001      	b.n	1980c <filter_rl_update+0x10>
   19808:	3401      	adds	r4, #1
   1980a:	b2e4      	uxtb	r4, r4
   1980c:	2c07      	cmp	r4, #7
   1980e:	d815      	bhi.n	1983c <filter_rl_update+0x40>
		if (rl[i].taken) {
   19810:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19814:	00d3      	lsls	r3, r2, #3
   19816:	4a0b      	ldr	r2, [pc, #44]	; (19844 <filter_rl_update+0x48>)
   19818:	5cd3      	ldrb	r3, [r2, r3]
   1981a:	f013 0f01 	tst.w	r3, #1
   1981e:	d0f3      	beq.n	19808 <filter_rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   19820:	4611      	mov	r1, r2
   19822:	00a3      	lsls	r3, r4, #2
   19824:	4423      	add	r3, r4
   19826:	00da      	lsls	r2, r3, #3
   19828:	188b      	adds	r3, r1, r2
   1982a:	5c8a      	ldrb	r2, [r1, r2]
   1982c:	3301      	adds	r3, #1
   1982e:	f3c2 1280 	ubfx	r2, r2, #6, #1
   19832:	4621      	mov	r1, r4
   19834:	4802      	ldr	r0, [pc, #8]	; (19840 <filter_rl_update+0x44>)
   19836:	f7ff ff89 	bl	1974c <filter_insert>
   1983a:	e7e5      	b.n	19808 <filter_rl_update+0xc>
}
   1983c:	bd10      	pop	{r4, pc}
   1983e:	bf00      	nop
   19840:	20001ffc 	.word	0x20001ffc
   19844:	20001eb8 	.word	0x20001eb8

00019848 <rl_access_check>:
{
   19848:	b508      	push	{r3, lr}
	if (check_ar) {
   1984a:	b110      	cbz	r0, 19852 <rl_access_check+0xa>
		if (!rl_enable) {
   1984c:	4b08      	ldr	r3, [pc, #32]	; (19870 <rl_access_check+0x28>)
   1984e:	781b      	ldrb	r3, [r3, #0]
   19850:	b15b      	cbz	r3, 1986a <rl_access_check+0x22>
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   19852:	f7fe fc27 	bl	180a4 <radio_adv_is_enabled>
   19856:	b108      	cbz	r0, 1985c <rl_access_check+0x14>
   19858:	2000      	movs	r0, #0
   1985a:	bd08      	pop	{r3, pc}
   1985c:	f7fe fc3a 	bl	180d4 <radio_scan_is_enabled>
   19860:	b108      	cbz	r0, 19866 <rl_access_check+0x1e>
   19862:	2000      	movs	r0, #0
}
   19864:	bd08      	pop	{r3, pc}
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   19866:	2001      	movs	r0, #1
   19868:	bd08      	pop	{r3, pc}
			return -1;
   1986a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1986e:	bd08      	pop	{r3, pc}
   19870:	20001ff8 	.word	0x20001ff8

00019874 <rpa_refresh_start>:
{
   19874:	b508      	push	{r3, lr}
	if (!rl_enable) {
   19876:	4b05      	ldr	r3, [pc, #20]	; (1988c <rpa_refresh_start+0x18>)
   19878:	781b      	ldrb	r3, [r3, #0]
   1987a:	b903      	cbnz	r3, 1987e <rpa_refresh_start+0xa>
   1987c:	bd08      	pop	{r3, pc}
   1987e:	4b04      	ldr	r3, [pc, #16]	; (19890 <rpa_refresh_start+0x1c>)
   19880:	681a      	ldr	r2, [r3, #0]
   19882:	4904      	ldr	r1, [pc, #16]	; (19894 <rpa_refresh_start+0x20>)
   19884:	4804      	ldr	r0, [pc, #16]	; (19898 <rpa_refresh_start+0x24>)
   19886:	f010 fbad 	bl	29fe4 <k_delayed_work_submit_to_queue>
   1988a:	e7f7      	b.n	1987c <rpa_refresh_start+0x8>
   1988c:	20001ff8 	.word	0x20001ff8
   19890:	20003144 	.word	0x20003144
   19894:	20003010 	.word	0x20003010
   19898:	20003158 	.word	0x20003158

0001989c <rpa_refresh_stop>:
{
   1989c:	b508      	push	{r3, lr}
	if (!rl_enable) {
   1989e:	4b04      	ldr	r3, [pc, #16]	; (198b0 <rpa_refresh_stop+0x14>)
   198a0:	781b      	ldrb	r3, [r3, #0]
   198a2:	b903      	cbnz	r3, 198a6 <rpa_refresh_stop+0xa>
   198a4:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&rpa_work);
   198a6:	4803      	ldr	r0, [pc, #12]	; (198b4 <rpa_refresh_stop+0x18>)
   198a8:	f010 fb42 	bl	29f30 <k_delayed_work_cancel>
   198ac:	e7fa      	b.n	198a4 <rpa_refresh_stop+0x8>
   198ae:	bf00      	nop
   198b0:	20001ff8 	.word	0x20001ff8
   198b4:	20003010 	.word	0x20003010

000198b8 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   198b8:	2807      	cmp	r0, #7
   198ba:	d816      	bhi.n	198ea <ctrl_lrpa_get+0x32>
   198bc:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   198c0:	00d3      	lsls	r3, r2, #3
   198c2:	4a0d      	ldr	r2, [pc, #52]	; (198f8 <ctrl_lrpa_get+0x40>)
   198c4:	5cd3      	ldrb	r3, [r2, r3]
   198c6:	f013 0f08 	tst.w	r3, #8
   198ca:	d010      	beq.n	198ee <ctrl_lrpa_get+0x36>
	    !rl[rl_idx].rpas_ready) {
   198cc:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   198d0:	00d3      	lsls	r3, r2, #3
   198d2:	4a09      	ldr	r2, [pc, #36]	; (198f8 <ctrl_lrpa_get+0x40>)
   198d4:	5cd3      	ldrb	r3, [r2, r3]
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   198d6:	f013 0f02 	tst.w	r3, #2
   198da:	d00a      	beq.n	198f2 <ctrl_lrpa_get+0x3a>
	return rl[rl_idx].local_rpa;
   198dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   198e0:	00c2      	lsls	r2, r0, #3
   198e2:	4b05      	ldr	r3, [pc, #20]	; (198f8 <ctrl_lrpa_get+0x40>)
   198e4:	4413      	add	r3, r2
   198e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   198e8:	4770      	bx	lr
		return NULL;
   198ea:	2000      	movs	r0, #0
   198ec:	4770      	bx	lr
   198ee:	2000      	movs	r0, #0
   198f0:	4770      	bx	lr
   198f2:	2000      	movs	r0, #0
}
   198f4:	4770      	bx	lr
   198f6:	bf00      	nop
   198f8:	20001eb8 	.word	0x20001eb8

000198fc <ctrl_irks_get>:
	*count = peer_irk_count;
   198fc:	4b02      	ldr	r3, [pc, #8]	; (19908 <ctrl_irks_get+0xc>)
   198fe:	781b      	ldrb	r3, [r3, #0]
   19900:	7003      	strb	r3, [r0, #0]
}
   19902:	4802      	ldr	r0, [pc, #8]	; (1990c <ctrl_irks_get+0x10>)
   19904:	4770      	bx	lr
   19906:	bf00      	nop
   19908:	20001e2c 	.word	0x20001e2c
   1990c:	20001e38 	.word	0x20001e38

00019910 <ctrl_rl_idx>:
	if (whitelist) {
   19910:	b1c8      	cbz	r0, 19946 <ctrl_rl_idx+0x36>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   19912:	2907      	cmp	r1, #7
   19914:	d80b      	bhi.n	1992e <ctrl_rl_idx+0x1e>
		LL_ASSERT(wl[devmatch_id].taken);
   19916:	4b17      	ldr	r3, [pc, #92]	; (19974 <ctrl_rl_idx+0x64>)
   19918:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
   1991c:	f013 0f01 	tst.w	r3, #1
   19920:	d00b      	beq.n	1993a <ctrl_rl_idx+0x2a>
		i = wl[devmatch_id].rl_idx;
   19922:	4b14      	ldr	r3, [pc, #80]	; (19974 <ctrl_rl_idx+0x64>)
   19924:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   19928:	7849      	ldrb	r1, [r1, #1]
}
   1992a:	4608      	mov	r0, r1
   1992c:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1992e:	4040      	eors	r0, r0
   19930:	f380 8811 	msr	BASEPRI, r0
   19934:	f04f 0004 	mov.w	r0, #4
   19938:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   1993a:	4040      	eors	r0, r0
   1993c:	f380 8811 	msr	BASEPRI, r0
   19940:	f04f 0004 	mov.w	r0, #4
   19944:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   19946:	2907      	cmp	r1, #7
   19948:	d80d      	bhi.n	19966 <ctrl_rl_idx+0x56>
		LL_ASSERT(rl[i].taken);
   1994a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1994e:	00d3      	lsls	r3, r2, #3
   19950:	4a09      	ldr	r2, [pc, #36]	; (19978 <ctrl_rl_idx+0x68>)
   19952:	5cd3      	ldrb	r3, [r2, r3]
   19954:	f013 0f01 	tst.w	r3, #1
   19958:	d1e7      	bne.n	1992a <ctrl_rl_idx+0x1a>
   1995a:	4040      	eors	r0, r0
   1995c:	f380 8811 	msr	BASEPRI, r0
   19960:	f04f 0004 	mov.w	r0, #4
   19964:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   19966:	4040      	eors	r0, r0
   19968:	f380 8811 	msr	BASEPRI, r0
   1996c:	f04f 0004 	mov.w	r0, #4
   19970:	df02      	svc	2
   19972:	bf00      	nop
   19974:	20002030 	.word	0x20002030
   19978:	20001eb8 	.word	0x20001eb8

0001997c <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1997c:	4b11      	ldr	r3, [pc, #68]	; (199c4 <ctrl_rl_irk_idx+0x48>)
   1997e:	781b      	ldrb	r3, [r3, #0]
   19980:	4283      	cmp	r3, r0
   19982:	d90c      	bls.n	1999e <ctrl_rl_irk_idx+0x22>
	i = peer_irk_rl_ids[irkmatch_id];
   19984:	4b10      	ldr	r3, [pc, #64]	; (199c8 <ctrl_rl_irk_idx+0x4c>)
   19986:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19988:	2807      	cmp	r0, #7
   1998a:	d80e      	bhi.n	199aa <ctrl_rl_irk_idx+0x2e>
	LL_ASSERT(rl[i].taken);
   1998c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19990:	00d3      	lsls	r3, r2, #3
   19992:	4a0e      	ldr	r2, [pc, #56]	; (199cc <ctrl_rl_irk_idx+0x50>)
   19994:	5cd3      	ldrb	r3, [r2, r3]
   19996:	f013 0f01 	tst.w	r3, #1
   1999a:	d00c      	beq.n	199b6 <ctrl_rl_irk_idx+0x3a>
}
   1999c:	4770      	bx	lr
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1999e:	4040      	eors	r0, r0
   199a0:	f380 8811 	msr	BASEPRI, r0
   199a4:	f04f 0004 	mov.w	r0, #4
   199a8:	df02      	svc	2
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   199aa:	4040      	eors	r0, r0
   199ac:	f380 8811 	msr	BASEPRI, r0
   199b0:	f04f 0004 	mov.w	r0, #4
   199b4:	df02      	svc	2
	LL_ASSERT(rl[i].taken);
   199b6:	4040      	eors	r0, r0
   199b8:	f380 8811 	msr	BASEPRI, r0
   199bc:	f04f 0004 	mov.w	r0, #4
   199c0:	df02      	svc	2
   199c2:	bf00      	nop
   199c4:	20001e2c 	.word	0x20001e2c
   199c8:	20001e30 	.word	0x20001e30
   199cc:	20001eb8 	.word	0x20001eb8

000199d0 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   199d0:	2807      	cmp	r0, #7
   199d2:	d815      	bhi.n	19a00 <ctrl_irk_whitelisted+0x30>
	LL_ASSERT(rl[rl_idx].taken);
   199d4:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   199d8:	00d3      	lsls	r3, r2, #3
   199da:	4a0a      	ldr	r2, [pc, #40]	; (19a04 <ctrl_irk_whitelisted+0x34>)
   199dc:	5cd3      	ldrb	r3, [r2, r3]
   199de:	f013 0f01 	tst.w	r3, #1
   199e2:	d007      	beq.n	199f4 <ctrl_irk_whitelisted+0x24>
	return rl[rl_idx].wl;
   199e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   199e8:	00c3      	lsls	r3, r0, #3
   199ea:	4a06      	ldr	r2, [pc, #24]	; (19a04 <ctrl_irk_whitelisted+0x34>)
   199ec:	5cd0      	ldrb	r0, [r2, r3]
   199ee:	f3c0 1040 	ubfx	r0, r0, #5, #1
   199f2:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   199f4:	4040      	eors	r0, r0
   199f6:	f380 8811 	msr	BASEPRI, r0
   199fa:	f04f 0004 	mov.w	r0, #4
   199fe:	df02      	svc	2
		return false;
   19a00:	2000      	movs	r0, #0
}
   19a02:	4770      	bx	lr
   19a04:	20001eb8 	.word	0x20001eb8

00019a08 <ctrl_filter_get>:
	if (whitelist) {
   19a08:	b908      	cbnz	r0, 19a0e <ctrl_filter_get+0x6>
	return &rl_filter;
   19a0a:	4802      	ldr	r0, [pc, #8]	; (19a14 <ctrl_filter_get+0xc>)
}
   19a0c:	4770      	bx	lr
		return &wl_filter;
   19a0e:	4802      	ldr	r0, [pc, #8]	; (19a18 <ctrl_filter_get+0x10>)
   19a10:	4770      	bx	lr
   19a12:	bf00      	nop
   19a14:	20001ffc 	.word	0x20001ffc
   19a18:	20002070 	.word	0x20002070

00019a1c <ll_wl_size_get>:
}
   19a1c:	2008      	movs	r0, #8
   19a1e:	4770      	bx	lr

00019a20 <ll_wl_clear>:
{
   19a20:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19a22:	f7fe fb47 	bl	180b4 <radio_adv_filter_pol_get>
   19a26:	b110      	cbz	r0, 19a2e <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19a28:	240c      	movs	r4, #12
}
   19a2a:	4620      	mov	r0, r4
   19a2c:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19a2e:	f7fe fb59 	bl	180e4 <radio_scan_filter_pol_get>
   19a32:	f010 0401 	ands.w	r4, r0, #1
   19a36:	d001      	beq.n	19a3c <ll_wl_clear+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19a38:	240c      	movs	r4, #12
   19a3a:	e7f6      	b.n	19a2a <ll_wl_clear+0xa>
	wl_clear();
   19a3c:	f7ff fdfe 	bl	1963c <wl_clear>
	wl_anon = 0;
   19a40:	2200      	movs	r2, #0
   19a42:	4b01      	ldr	r3, [pc, #4]	; (19a48 <ll_wl_clear+0x28>)
   19a44:	701a      	strb	r2, [r3, #0]
	return 0;
   19a46:	e7f0      	b.n	19a2a <ll_wl_clear+0xa>
   19a48:	20002fa0 	.word	0x20002fa0

00019a4c <ll_wl_remove>:
{
   19a4c:	b510      	push	{r4, lr}
   19a4e:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19a50:	f7fe fb30 	bl	180b4 <radio_adv_filter_pol_get>
   19a54:	b108      	cbz	r0, 19a5a <ll_wl_remove+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19a56:	200c      	movs	r0, #12
   19a58:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19a5a:	f7fe fb43 	bl	180e4 <radio_scan_filter_pol_get>
   19a5e:	f010 0001 	ands.w	r0, r0, #1
   19a62:	d001      	beq.n	19a68 <ll_wl_remove+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19a64:	200c      	movs	r0, #12
}
   19a66:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   19a68:	7823      	ldrb	r3, [r4, #0]
   19a6a:	2bff      	cmp	r3, #255	; 0xff
   19a6c:	d003      	beq.n	19a76 <ll_wl_remove+0x2a>
	return wl_remove(addr);
   19a6e:	4620      	mov	r0, r4
   19a70:	f7ff fe46 	bl	19700 <wl_remove>
   19a74:	bd10      	pop	{r4, pc}
		wl_anon = 0;
   19a76:	2200      	movs	r2, #0
   19a78:	4b01      	ldr	r3, [pc, #4]	; (19a80 <ll_wl_remove+0x34>)
   19a7a:	701a      	strb	r2, [r3, #0]
		return 0;
   19a7c:	bd10      	pop	{r4, pc}
   19a7e:	bf00      	nop
   19a80:	20002fa0 	.word	0x20002fa0

00019a84 <ll_filters_adv_update>:
{
   19a84:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   19a86:	b918      	cbnz	r0, 19a90 <ll_filters_adv_update+0xc>
	if (rl_enable && !radio_scan_is_enabled()) {
   19a88:	4b09      	ldr	r3, [pc, #36]	; (19ab0 <ll_filters_adv_update+0x2c>)
   19a8a:	781b      	ldrb	r3, [r3, #0]
   19a8c:	b943      	cbnz	r3, 19aa0 <ll_filters_adv_update+0x1c>
   19a8e:	bd08      	pop	{r3, pc}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   19a90:	f7fe fb28 	bl	180e4 <radio_scan_filter_pol_get>
   19a94:	f010 0f01 	tst.w	r0, #1
   19a98:	d1f6      	bne.n	19a88 <ll_filters_adv_update+0x4>
		filter_wl_update();
   19a9a:	f7ff fe6f 	bl	1977c <filter_wl_update>
   19a9e:	e7f3      	b.n	19a88 <ll_filters_adv_update+0x4>
	if (rl_enable && !radio_scan_is_enabled()) {
   19aa0:	f7fe fb18 	bl	180d4 <radio_scan_is_enabled>
   19aa4:	2800      	cmp	r0, #0
   19aa6:	d1f2      	bne.n	19a8e <ll_filters_adv_update+0xa>
		filter_rl_update();
   19aa8:	f7ff fea8 	bl	197fc <filter_rl_update>
}
   19aac:	e7ef      	b.n	19a8e <ll_filters_adv_update+0xa>
   19aae:	bf00      	nop
   19ab0:	20001ff8 	.word	0x20001ff8

00019ab4 <ll_filters_scan_update>:
{
   19ab4:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   19ab6:	f010 0f01 	tst.w	r0, #1
   19aba:	d103      	bne.n	19ac4 <ll_filters_scan_update+0x10>
	if (rl_enable && !radio_adv_is_enabled()) {
   19abc:	4b08      	ldr	r3, [pc, #32]	; (19ae0 <ll_filters_scan_update+0x2c>)
   19abe:	781b      	ldrb	r3, [r3, #0]
   19ac0:	b93b      	cbnz	r3, 19ad2 <ll_filters_scan_update+0x1e>
   19ac2:	bd08      	pop	{r3, pc}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   19ac4:	f7fe faf6 	bl	180b4 <radio_adv_filter_pol_get>
   19ac8:	2800      	cmp	r0, #0
   19aca:	d1f7      	bne.n	19abc <ll_filters_scan_update+0x8>
		filter_wl_update();
   19acc:	f7ff fe56 	bl	1977c <filter_wl_update>
   19ad0:	e7f4      	b.n	19abc <ll_filters_scan_update+0x8>
	if (rl_enable && !radio_adv_is_enabled()) {
   19ad2:	f7fe fae7 	bl	180a4 <radio_adv_is_enabled>
   19ad6:	2800      	cmp	r0, #0
   19ad8:	d1f3      	bne.n	19ac2 <ll_filters_scan_update+0xe>
		filter_rl_update();
   19ada:	f7ff fe8f 	bl	197fc <filter_rl_update>
}
   19ade:	e7f0      	b.n	19ac2 <ll_filters_scan_update+0xe>
   19ae0:	20001ff8 	.word	0x20001ff8

00019ae4 <ll_rl_find>:
{
   19ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ae8:	4607      	mov	r7, r0
   19aea:	4688      	mov	r8, r1
	if (free) {
   19aec:	4616      	mov	r6, r2
   19aee:	b10a      	cbz	r2, 19af4 <ll_rl_find+0x10>
		*free = FILTER_IDX_NONE;
   19af0:	23ff      	movs	r3, #255	; 0xff
   19af2:	7013      	strb	r3, [r2, #0]
{
   19af4:	2400      	movs	r4, #0
   19af6:	e00e      	b.n	19b16 <ll_rl_find+0x32>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19af8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19afc:	00d3      	lsls	r3, r2, #3
   19afe:	481a      	ldr	r0, [pc, #104]	; (19b68 <ll_rl_find+0x84>)
   19b00:	4418      	add	r0, r3
   19b02:	2206      	movs	r2, #6
   19b04:	4641      	mov	r1, r8
   19b06:	3001      	adds	r0, #1
   19b08:	f010 fe42 	bl	2a790 <memcmp>
   19b0c:	b9c8      	cbnz	r0, 19b42 <ll_rl_find+0x5e>
   19b0e:	e027      	b.n	19b60 <ll_rl_find+0x7c>
			*free = i;
   19b10:	7034      	strb	r4, [r6, #0]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19b12:	3401      	adds	r4, #1
   19b14:	b2e4      	uxtb	r4, r4
   19b16:	2c07      	cmp	r4, #7
   19b18:	d821      	bhi.n	19b5e <ll_rl_find+0x7a>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19b1a:	4625      	mov	r5, r4
   19b1c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19b20:	00d3      	lsls	r3, r2, #3
   19b22:	4a11      	ldr	r2, [pc, #68]	; (19b68 <ll_rl_find+0x84>)
   19b24:	5cd3      	ldrb	r3, [r2, r3]
   19b26:	f013 0f01 	tst.w	r3, #1
   19b2a:	d00a      	beq.n	19b42 <ll_rl_find+0x5e>
   19b2c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19b30:	00d3      	lsls	r3, r2, #3
   19b32:	4a0d      	ldr	r2, [pc, #52]	; (19b68 <ll_rl_find+0x84>)
   19b34:	5cd3      	ldrb	r3, [r2, r3]
   19b36:	f3c3 1380 	ubfx	r3, r3, #6, #1
   19b3a:	f007 0201 	and.w	r2, r7, #1
   19b3e:	4293      	cmp	r3, r2
   19b40:	d0da      	beq.n	19af8 <ll_rl_find+0x14>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   19b42:	2e00      	cmp	r6, #0
   19b44:	d0e5      	beq.n	19b12 <ll_rl_find+0x2e>
   19b46:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19b4a:	00eb      	lsls	r3, r5, #3
   19b4c:	4a06      	ldr	r2, [pc, #24]	; (19b68 <ll_rl_find+0x84>)
   19b4e:	5cd3      	ldrb	r3, [r2, r3]
   19b50:	f013 0f01 	tst.w	r3, #1
   19b54:	d1dd      	bne.n	19b12 <ll_rl_find+0x2e>
   19b56:	7833      	ldrb	r3, [r6, #0]
   19b58:	2bff      	cmp	r3, #255	; 0xff
   19b5a:	d1da      	bne.n	19b12 <ll_rl_find+0x2e>
   19b5c:	e7d8      	b.n	19b10 <ll_rl_find+0x2c>
	return FILTER_IDX_NONE;
   19b5e:	24ff      	movs	r4, #255	; 0xff
}
   19b60:	4620      	mov	r0, r4
   19b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19b66:	bf00      	nop
   19b68:	20001eb8 	.word	0x20001eb8

00019b6c <wl_add>:
{
   19b6c:	b570      	push	{r4, r5, r6, lr}
   19b6e:	b082      	sub	sp, #8
   19b70:	4605      	mov	r5, r0
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   19b72:	4604      	mov	r4, r0
   19b74:	f814 0b01 	ldrb.w	r0, [r4], #1
   19b78:	f10d 0207 	add.w	r2, sp, #7
   19b7c:	4621      	mov	r1, r4
   19b7e:	f7ff fd87 	bl	19690 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   19b82:	2807      	cmp	r0, #7
   19b84:	d802      	bhi.n	19b8c <wl_add+0x20>
		return BT_HCI_ERR_INVALID_PARAM;
   19b86:	2012      	movs	r0, #18
}
   19b88:	b002      	add	sp, #8
   19b8a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (j >= ARRAY_SIZE(wl)) {
   19b8c:	f89d 6007 	ldrb.w	r6, [sp, #7]
   19b90:	2e07      	cmp	r6, #7
   19b92:	d901      	bls.n	19b98 <wl_add+0x2c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19b94:	2007      	movs	r0, #7
   19b96:	e7f7      	b.n	19b88 <wl_add+0x1c>
	wl[i].id_addr_type = id_addr->type & 0x1;
   19b98:	4629      	mov	r1, r5
   19b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
   19b9e:	4817      	ldr	r0, [pc, #92]	; (19bfc <wl_add+0x90>)
   19ba0:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
   19ba4:	f362 0341 	bfi	r3, r2, #1, #1
   19ba8:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   19bac:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
	memcpy(dst, src, sizeof(*dst));
   19bb0:	2206      	movs	r2, #6
   19bb2:	3002      	adds	r0, #2
   19bb4:	f7e6 fb84 	bl	2c0 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19bb8:	2200      	movs	r2, #0
   19bba:	4621      	mov	r1, r4
   19bbc:	7828      	ldrb	r0, [r5, #0]
   19bbe:	f7ff ff91 	bl	19ae4 <ll_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   19bc2:	2807      	cmp	r0, #7
   19bc4:	d814      	bhi.n	19bf0 <wl_add+0x84>
		wl[i].rl_idx = j;
   19bc6:	4b0d      	ldr	r3, [pc, #52]	; (19bfc <wl_add+0x90>)
   19bc8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   19bcc:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   19bce:	490c      	ldr	r1, [pc, #48]	; (19c00 <wl_add+0x94>)
   19bd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19bd4:	00c3      	lsls	r3, r0, #3
   19bd6:	5cca      	ldrb	r2, [r1, r3]
   19bd8:	f042 0220 	orr.w	r2, r2, #32
   19bdc:	54ca      	strb	r2, [r1, r3]
	wl[i].taken = 1;
   19bde:	4a07      	ldr	r2, [pc, #28]	; (19bfc <wl_add+0x90>)
   19be0:	f812 3036 	ldrb.w	r3, [r2, r6, lsl #3]
   19be4:	f043 0301 	orr.w	r3, r3, #1
   19be8:	f802 3036 	strb.w	r3, [r2, r6, lsl #3]
	return 0;
   19bec:	2000      	movs	r0, #0
   19bee:	e7cb      	b.n	19b88 <wl_add+0x1c>
		wl[i].rl_idx = FILTER_IDX_NONE;
   19bf0:	4b02      	ldr	r3, [pc, #8]	; (19bfc <wl_add+0x90>)
   19bf2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   19bf6:	22ff      	movs	r2, #255	; 0xff
   19bf8:	705a      	strb	r2, [r3, #1]
   19bfa:	e7f0      	b.n	19bde <wl_add+0x72>
   19bfc:	20002030 	.word	0x20002030
   19c00:	20001eb8 	.word	0x20001eb8

00019c04 <ll_wl_add>:
{
   19c04:	b510      	push	{r4, lr}
   19c06:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19c08:	f7fe fa54 	bl	180b4 <radio_adv_filter_pol_get>
   19c0c:	b108      	cbz	r0, 19c12 <ll_wl_add+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19c0e:	200c      	movs	r0, #12
   19c10:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19c12:	f7fe fa67 	bl	180e4 <radio_scan_filter_pol_get>
   19c16:	f010 0001 	ands.w	r0, r0, #1
   19c1a:	d001      	beq.n	19c20 <ll_wl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19c1c:	200c      	movs	r0, #12
}
   19c1e:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   19c20:	7823      	ldrb	r3, [r4, #0]
   19c22:	2bff      	cmp	r3, #255	; 0xff
   19c24:	d003      	beq.n	19c2e <ll_wl_add+0x2a>
	return wl_add(addr);
   19c26:	4620      	mov	r0, r4
   19c28:	f7ff ffa0 	bl	19b6c <wl_add>
   19c2c:	bd10      	pop	{r4, pc}
		wl_anon = 1;
   19c2e:	2201      	movs	r2, #1
   19c30:	4b01      	ldr	r3, [pc, #4]	; (19c38 <ll_wl_add+0x34>)
   19c32:	701a      	strb	r2, [r3, #0]
		return 0;
   19c34:	bd10      	pop	{r4, pc}
   19c36:	bf00      	nop
   19c38:	20002fa0 	.word	0x20002fa0

00019c3c <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   19c3c:	4b17      	ldr	r3, [pc, #92]	; (19c9c <ctrl_rl_idx_allowed+0x60>)
   19c3e:	781b      	ldrb	r3, [r3, #0]
   19c40:	b32b      	cbz	r3, 19c8e <ctrl_rl_idx_allowed+0x52>
   19c42:	2907      	cmp	r1, #7
   19c44:	d825      	bhi.n	19c92 <ctrl_rl_idx_allowed+0x56>
   19c46:	bb30      	cbnz	r0, 19c96 <ctrl_rl_idx_allowed+0x5a>
	LL_ASSERT(rl[rl_idx].taken);
   19c48:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   19c4c:	00d3      	lsls	r3, r2, #3
   19c4e:	4a14      	ldr	r2, [pc, #80]	; (19ca0 <ctrl_rl_idx_allowed+0x64>)
   19c50:	5cd3      	ldrb	r3, [r2, r3]
   19c52:	f013 0f01 	tst.w	r3, #1
   19c56:	d010      	beq.n	19c7a <ctrl_rl_idx_allowed+0x3e>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19c58:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   19c5c:	00d3      	lsls	r3, r2, #3
   19c5e:	4a10      	ldr	r2, [pc, #64]	; (19ca0 <ctrl_rl_idx_allowed+0x64>)
   19c60:	5cd3      	ldrb	r3, [r2, r3]
   19c62:	f013 0f04 	tst.w	r3, #4
   19c66:	d00e      	beq.n	19c86 <ctrl_rl_idx_allowed+0x4a>
   19c68:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   19c6c:	00cb      	lsls	r3, r1, #3
   19c6e:	5cd3      	ldrb	r3, [r2, r3]
   19c70:	f013 0f10 	tst.w	r3, #16
   19c74:	d009      	beq.n	19c8a <ctrl_rl_idx_allowed+0x4e>
   19c76:	2001      	movs	r0, #1
   19c78:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   19c7a:	4040      	eors	r0, r0
   19c7c:	f380 8811 	msr	BASEPRI, r0
   19c80:	f04f 0004 	mov.w	r0, #4
   19c84:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19c86:	2001      	movs	r0, #1
   19c88:	4770      	bx	lr
   19c8a:	2000      	movs	r0, #0
   19c8c:	4770      	bx	lr
		return true;
   19c8e:	2001      	movs	r0, #1
   19c90:	4770      	bx	lr
   19c92:	2001      	movs	r0, #1
   19c94:	4770      	bx	lr
   19c96:	2001      	movs	r0, #1
}
   19c98:	4770      	bx	lr
   19c9a:	bf00      	nop
   19c9c:	20001ff8 	.word	0x20001ff8
   19ca0:	20001eb8 	.word	0x20001eb8

00019ca4 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19ca4:	2807      	cmp	r0, #7
   19ca6:	d81a      	bhi.n	19cde <ll_rl_id_addr_get+0x3a>
{
   19ca8:	b570      	push	{r4, r5, r6, lr}
   19caa:	4603      	mov	r3, r0
	LL_ASSERT(rl[rl_idx].taken);
   19cac:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   19cb0:	00ec      	lsls	r4, r5, #3
   19cb2:	4811      	ldr	r0, [pc, #68]	; (19cf8 <ll_rl_id_addr_get+0x54>)
   19cb4:	5d00      	ldrb	r0, [r0, r4]
   19cb6:	f010 0f01 	tst.w	r0, #1
   19cba:	d016      	beq.n	19cea <ll_rl_id_addr_get+0x46>
   19cbc:	4610      	mov	r0, r2
	*id_addr_type = rl[rl_idx].id_addr_type;
   19cbe:	4d0e      	ldr	r5, [pc, #56]	; (19cf8 <ll_rl_id_addr_get+0x54>)
   19cc0:	009c      	lsls	r4, r3, #2
   19cc2:	18e6      	adds	r6, r4, r3
   19cc4:	00f2      	lsls	r2, r6, #3
   19cc6:	4616      	mov	r6, r2
   19cc8:	5caa      	ldrb	r2, [r5, r2]
   19cca:	f3c2 1280 	ubfx	r2, r2, #6, #1
   19cce:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19cd0:	4631      	mov	r1, r6
   19cd2:	4429      	add	r1, r5
   19cd4:	2206      	movs	r2, #6
   19cd6:	3101      	adds	r1, #1
   19cd8:	f7e6 faf2 	bl	2c0 <memcpy>
   19cdc:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19cde:	4040      	eors	r0, r0
   19ce0:	f380 8811 	msr	BASEPRI, r0
   19ce4:	f04f 0004 	mov.w	r0, #4
   19ce8:	df02      	svc	2
	LL_ASSERT(rl[rl_idx].taken);
   19cea:	4040      	eors	r0, r0
   19cec:	f380 8811 	msr	BASEPRI, r0
   19cf0:	f04f 0004 	mov.w	r0, #4
   19cf4:	df02      	svc	2
   19cf6:	bf00      	nop
   19cf8:	20001eb8 	.word	0x20001eb8

00019cfc <ctrl_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   19cfc:	4b29      	ldr	r3, [pc, #164]	; (19da4 <ctrl_rl_addr_allowed+0xa8>)
   19cfe:	781b      	ldrb	r3, [r3, #0]
   19d00:	2b00      	cmp	r3, #0
   19d02:	d04a      	beq.n	19d9a <ctrl_rl_addr_allowed+0x9e>
   19d04:	7813      	ldrb	r3, [r2, #0]
   19d06:	2bff      	cmp	r3, #255	; 0xff
   19d08:	d001      	beq.n	19d0e <ctrl_rl_addr_allowed+0x12>
		return true;
   19d0a:	2001      	movs	r0, #1
   19d0c:	4770      	bx	lr
   19d0e:	2300      	movs	r3, #0
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19d10:	2b07      	cmp	r3, #7
   19d12:	d844      	bhi.n	19d9e <ctrl_rl_addr_allowed+0xa2>
{
   19d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d16:	e005      	b.n	19d24 <ctrl_rl_addr_allowed+0x28>
			if (j == BDADDR_SIZE) {
   19d18:	2c06      	cmp	r4, #6
   19d1a:	d026      	beq.n	19d6a <ctrl_rl_addr_allowed+0x6e>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19d1c:	3301      	adds	r3, #1
   19d1e:	b2db      	uxtb	r3, r3
   19d20:	2b07      	cmp	r3, #7
   19d22:	d838      	bhi.n	19d96 <ctrl_rl_addr_allowed+0x9a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   19d24:	461e      	mov	r6, r3
   19d26:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19d2a:	00ec      	lsls	r4, r5, #3
   19d2c:	4d1e      	ldr	r5, [pc, #120]	; (19da8 <ctrl_rl_addr_allowed+0xac>)
   19d2e:	5d2c      	ldrb	r4, [r5, r4]
   19d30:	f014 0f01 	tst.w	r4, #1
   19d34:	d0f2      	beq.n	19d1c <ctrl_rl_addr_allowed+0x20>
   19d36:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19d3a:	00ec      	lsls	r4, r5, #3
   19d3c:	4d1a      	ldr	r5, [pc, #104]	; (19da8 <ctrl_rl_addr_allowed+0xac>)
   19d3e:	5d2c      	ldrb	r4, [r5, r4]
   19d40:	f3c4 1480 	ubfx	r4, r4, #6, #1
   19d44:	4284      	cmp	r4, r0
   19d46:	d1e9      	bne.n	19d1c <ctrl_rl_addr_allowed+0x20>
			u8_t *addr = rl[i].id_addr.val;
   19d48:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19d4c:	00ec      	lsls	r4, r5, #3
   19d4e:	4d16      	ldr	r5, [pc, #88]	; (19da8 <ctrl_rl_addr_allowed+0xac>)
   19d50:	4425      	add	r5, r4
   19d52:	3501      	adds	r5, #1
			for (j = 0; j < BDADDR_SIZE; j++) {
   19d54:	2400      	movs	r4, #0
   19d56:	2c05      	cmp	r4, #5
   19d58:	d8de      	bhi.n	19d18 <ctrl_rl_addr_allowed+0x1c>
				if (addr[j] != id_addr[j]) {
   19d5a:	f815 e004 	ldrb.w	lr, [r5, r4]
   19d5e:	5d0f      	ldrb	r7, [r1, r4]
   19d60:	45be      	cmp	lr, r7
   19d62:	d1d9      	bne.n	19d18 <ctrl_rl_addr_allowed+0x1c>
			for (j = 0; j < BDADDR_SIZE; j++) {
   19d64:	3401      	adds	r4, #1
   19d66:	b2e4      	uxtb	r4, r4
   19d68:	e7f5      	b.n	19d56 <ctrl_rl_addr_allowed+0x5a>
				*rl_idx = i;
   19d6a:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   19d6c:	eb06 0286 	add.w	r2, r6, r6, lsl #2
   19d70:	00d3      	lsls	r3, r2, #3
   19d72:	4a0d      	ldr	r2, [pc, #52]	; (19da8 <ctrl_rl_addr_allowed+0xac>)
   19d74:	5cd3      	ldrb	r3, [r2, r3]
   19d76:	f013 0f04 	tst.w	r3, #4
   19d7a:	d00a      	beq.n	19d92 <ctrl_rl_addr_allowed+0x96>
   19d7c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   19d80:	00f3      	lsls	r3, r6, #3
   19d82:	5cd3      	ldrb	r3, [r2, r3]
   19d84:	f013 0f10 	tst.w	r3, #16
   19d88:	d101      	bne.n	19d8e <ctrl_rl_addr_allowed+0x92>
   19d8a:	2000      	movs	r0, #0
   19d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19d8e:	2001      	movs	r0, #1
   19d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19d92:	2001      	movs	r0, #1
   19d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   19d96:	2001      	movs	r0, #1
   19d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return true;
   19d9a:	2001      	movs	r0, #1
   19d9c:	4770      	bx	lr
	return true;
   19d9e:	2001      	movs	r0, #1
}
   19da0:	4770      	bx	lr
   19da2:	bf00      	nop
   19da4:	20001ff8 	.word	0x20001ff8
   19da8:	20001eb8 	.word	0x20001eb8

00019dac <ctrl_rl_addr_resolve>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   19dac:	4b13      	ldr	r3, [pc, #76]	; (19dfc <ctrl_rl_addr_resolve+0x50>)
   19dae:	781b      	ldrb	r3, [r3, #0]
   19db0:	b1db      	cbz	r3, 19dea <ctrl_rl_addr_resolve+0x3e>
   19db2:	2a07      	cmp	r2, #7
   19db4:	d81b      	bhi.n	19dee <ctrl_rl_addr_resolve+0x42>
{
   19db6:	b510      	push	{r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   19db8:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   19dbc:	00e3      	lsls	r3, r4, #3
   19dbe:	4c10      	ldr	r4, [pc, #64]	; (19e00 <ctrl_rl_addr_resolve+0x54>)
   19dc0:	5ce3      	ldrb	r3, [r4, r3]
   19dc2:	f013 0f08 	tst.w	r3, #8
   19dc6:	d014      	beq.n	19df2 <ctrl_rl_addr_resolve+0x46>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   19dc8:	b1a8      	cbz	r0, 19df6 <ctrl_rl_addr_resolve+0x4a>
   19dca:	794b      	ldrb	r3, [r1, #5]
   19dcc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19dd0:	2b40      	cmp	r3, #64	; 0x40
   19dd2:	d001      	beq.n	19dd8 <ctrl_rl_addr_resolve+0x2c>
	return false;
   19dd4:	2000      	movs	r0, #0
}
   19dd6:	bd10      	pop	{r4, pc}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   19dd8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   19ddc:	00d3      	lsls	r3, r2, #3
   19dde:	4620      	mov	r0, r4
   19de0:	4418      	add	r0, r3
   19de2:	3007      	adds	r0, #7
   19de4:	f7ea fbc6 	bl	4574 <bt_rpa_irk_matches>
   19de8:	bd10      	pop	{r4, pc}
		return false;
   19dea:	2000      	movs	r0, #0
   19dec:	4770      	bx	lr
   19dee:	2000      	movs	r0, #0
   19df0:	4770      	bx	lr
   19df2:	2000      	movs	r0, #0
   19df4:	bd10      	pop	{r4, pc}
	return false;
   19df6:	2000      	movs	r0, #0
   19df8:	bd10      	pop	{r4, pc}
   19dfa:	bf00      	nop
   19dfc:	20001ff8 	.word	0x20001ff8
   19e00:	20001eb8 	.word	0x20001eb8

00019e04 <ctrl_rl_enabled>:
	return rl_enable;
   19e04:	4b02      	ldr	r3, [pc, #8]	; (19e10 <ctrl_rl_enabled+0xc>)
   19e06:	7818      	ldrb	r0, [r3, #0]
}
   19e08:	3000      	adds	r0, #0
   19e0a:	bf18      	it	ne
   19e0c:	2001      	movne	r0, #1
   19e0e:	4770      	bx	lr
   19e10:	20001ff8 	.word	0x20001ff8

00019e14 <ll_rl_pdu_adv_update>:
{
   19e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e16:	4605      	mov	r5, r0
   19e18:	460c      	mov	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
   19e1a:	780b      	ldrb	r3, [r1, #0]
   19e1c:	f003 030f 	and.w	r3, r3, #15
				  &pdu->payload.scan_rsp.addr[0] :
   19e20:	2b04      	cmp	r3, #4
   19e22:	d024      	beq.n	19e6e <ll_rl_pdu_adv_update+0x5a>
   19e24:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   19e26:	f000 fbc5 	bl	1a5b4 <ll_adv_set_get>
   19e2a:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   19e2c:	2d07      	cmp	r5, #7
   19e2e:	d826      	bhi.n	19e7e <ll_rl_pdu_adv_update+0x6a>
   19e30:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19e34:	00d3      	lsls	r3, r2, #3
   19e36:	4a30      	ldr	r2, [pc, #192]	; (19ef8 <ll_rl_pdu_adv_update+0xe4>)
   19e38:	5cd3      	ldrb	r3, [r2, r3]
   19e3a:	f013 0f08 	tst.w	r3, #8
   19e3e:	d01e      	beq.n	19e7e <ll_rl_pdu_adv_update+0x6a>
		LL_ASSERT(rl[idx].rpas_ready);
   19e40:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19e44:	00d3      	lsls	r3, r2, #3
   19e46:	4a2c      	ldr	r2, [pc, #176]	; (19ef8 <ll_rl_pdu_adv_update+0xe4>)
   19e48:	5cd3      	ldrb	r3, [r2, r3]
   19e4a:	f013 0f02 	tst.w	r3, #2
   19e4e:	d010      	beq.n	19e72 <ll_rl_pdu_adv_update+0x5e>
		pdu->tx_addr = 1;
   19e50:	7823      	ldrb	r3, [r4, #0]
   19e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19e56:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   19e58:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19e5c:	00da      	lsls	r2, r3, #3
   19e5e:	4b26      	ldr	r3, [pc, #152]	; (19ef8 <ll_rl_pdu_adv_update+0xe4>)
   19e60:	4413      	add	r3, r2
   19e62:	2206      	movs	r2, #6
   19e64:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19e66:	4638      	mov	r0, r7
   19e68:	f7e6 fa2a 	bl	2c0 <memcpy>
   19e6c:	e014      	b.n	19e98 <ll_rl_pdu_adv_update+0x84>
				  &pdu->payload.scan_rsp.addr[0] :
   19e6e:	1c8f      	adds	r7, r1, #2
   19e70:	e7d9      	b.n	19e26 <ll_rl_pdu_adv_update+0x12>
		LL_ASSERT(rl[idx].rpas_ready);
   19e72:	4040      	eors	r0, r0
   19e74:	f380 8811 	msr	BASEPRI, r0
   19e78:	f04f 0004 	mov.w	r0, #4
   19e7c:	df02      	svc	2
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   19e7e:	7833      	ldrb	r3, [r6, #0]
   19e80:	f3c3 1340 	ubfx	r3, r3, #5, #1
   19e84:	7822      	ldrb	r2, [r4, #0]
   19e86:	f363 1286 	bfi	r2, r3, #6, #1
   19e8a:	7022      	strb	r2, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   19e8c:	7830      	ldrb	r0, [r6, #0]
   19e8e:	4639      	mov	r1, r7
   19e90:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19e94:	f7ff fba0 	bl	195d8 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19e98:	7823      	ldrb	r3, [r4, #0]
   19e9a:	f003 030f 	and.w	r3, r3, #15
   19e9e:	2b01      	cmp	r3, #1
   19ea0:	d000      	beq.n	19ea4 <ll_rl_pdu_adv_update+0x90>
   19ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   19ea4:	2d07      	cmp	r5, #7
   19ea6:	d807      	bhi.n	19eb8 <ll_rl_pdu_adv_update+0xa4>
   19ea8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19eac:	00d3      	lsls	r3, r2, #3
   19eae:	4a12      	ldr	r2, [pc, #72]	; (19ef8 <ll_rl_pdu_adv_update+0xe4>)
   19eb0:	5cd3      	ldrb	r3, [r2, r3]
   19eb2:	f013 0f04 	tst.w	r3, #4
   19eb6:	d10d      	bne.n	19ed4 <ll_rl_pdu_adv_update+0xc0>
			pdu->rx_addr = ll_adv->id_addr_type;
   19eb8:	4631      	mov	r1, r6
   19eba:	f811 3b02 	ldrb.w	r3, [r1], #2
   19ebe:	09db      	lsrs	r3, r3, #7
   19ec0:	7822      	ldrb	r2, [r4, #0]
   19ec2:	f363 12c7 	bfi	r2, r3, #7, #1
   19ec6:	4620      	mov	r0, r4
   19ec8:	f800 2b08 	strb.w	r2, [r0], #8
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   19ecc:	2206      	movs	r2, #6
   19ece:	f7e6 f9f7 	bl	2c0 <memcpy>
}
   19ed2:	e7e6      	b.n	19ea2 <ll_rl_pdu_adv_update+0x8e>
			pdu->rx_addr = 1;
   19ed4:	7823      	ldrb	r3, [r4, #0]
   19ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19eda:	4620      	mov	r0, r4
   19edc:	f800 3b08 	strb.w	r3, [r0], #8
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   19ee0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19ee4:	00eb      	lsls	r3, r5, #3
   19ee6:	3318      	adds	r3, #24
   19ee8:	4611      	mov	r1, r2
   19eea:	4419      	add	r1, r3
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   19eec:	2206      	movs	r2, #6
   19eee:	4411      	add	r1, r2
   19ef0:	f7e6 f9e6 	bl	2c0 <memcpy>
   19ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19ef6:	bf00      	nop
   19ef8:	20001eb8 	.word	0x20001eb8

00019efc <rpa_adv_refresh>:
{
   19efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ll_adv = ll_adv_set_get();
   19f00:	f000 fb58 	bl	1a5b4 <ll_adv_set_get>
   19f04:	4606      	mov	r6, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   19f06:	7803      	ldrb	r3, [r0, #0]
   19f08:	f003 0360 	and.w	r3, r3, #96	; 0x60
   19f0c:	2b40      	cmp	r3, #64	; 0x40
   19f0e:	d003      	beq.n	19f18 <rpa_adv_refresh+0x1c>
   19f10:	2b60      	cmp	r3, #96	; 0x60
   19f12:	d001      	beq.n	19f18 <rpa_adv_refresh+0x1c>
   19f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   19f18:	f7fe f8bc 	bl	18094 <radio_adv_data_get>
   19f1c:	4604      	mov	r4, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19f1e:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   19f22:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19f26:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   19f2a:	1887      	adds	r7, r0, r2
	if (radio_adv_data->first == radio_adv_data->last) {
   19f2c:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   19f30:	429d      	cmp	r5, r3
   19f32:	d02d      	beq.n	19f90 <rpa_adv_refresh+0x94>
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   19f34:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19f38:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   19f3c:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   19f40:	5ca0      	ldrb	r0, [r4, r2]
   19f42:	5ce1      	ldrb	r1, [r4, r3]
   19f44:	f360 0103 	bfi	r1, r0, #0, #4
	pdu->rfu = 0;
   19f48:	f36f 1104 	bfc	r1, #4, #1
   19f4c:	54e1      	strb	r1, [r4, r3]
		pdu->chan_sel = prev->chan_sel;
   19f4e:	5ca2      	ldrb	r2, [r4, r2]
   19f50:	f3c2 1240 	ubfx	r2, r2, #5, #1
   19f54:	b2c9      	uxtb	r1, r1
   19f56:	f362 1145 	bfi	r1, r2, #5, #1
   19f5a:	54e1      	strb	r1, [r4, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   19f5c:	4631      	mov	r1, r6
   19f5e:	f811 0b02 	ldrb.w	r0, [r1], #2
   19f62:	2200      	movs	r2, #0
   19f64:	09c0      	lsrs	r0, r0, #7
   19f66:	f7ff fdbd 	bl	19ae4 <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   19f6a:	2807      	cmp	r0, #7
   19f6c:	d816      	bhi.n	19f9c <rpa_adv_refresh+0xa0>
	ll_rl_pdu_adv_update(idx, pdu);
   19f6e:	4641      	mov	r1, r8
   19f70:	f7ff ff50 	bl	19e14 <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   19f74:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
   19f76:	3a06      	subs	r2, #6
   19f78:	f107 0108 	add.w	r1, r7, #8
   19f7c:	f108 0008 	add.w	r0, r8, #8
   19f80:	f7e6 f99e 	bl	2c0 <memcpy>
	pdu->len = prev->len;
   19f84:	787b      	ldrb	r3, [r7, #1]
   19f86:	f888 3001 	strb.w	r3, [r8, #1]
	radio_adv_data->last = last;
   19f8a:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   19f8e:	e7c1      	b.n	19f14 <rpa_adv_refresh+0x18>
		last = radio_adv_data->last + 1;
   19f90:	3501      	adds	r5, #1
   19f92:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   19f94:	2d02      	cmp	r5, #2
   19f96:	d1cd      	bne.n	19f34 <rpa_adv_refresh+0x38>
			last = 0;
   19f98:	2500      	movs	r5, #0
   19f9a:	e7cb      	b.n	19f34 <rpa_adv_refresh+0x38>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   19f9c:	4040      	eors	r0, r0
   19f9e:	f380 8811 	msr	BASEPRI, r0
   19fa2:	f04f 0004 	mov.w	r0, #4
   19fa6:	df02      	svc	2

00019fa8 <ll_rl_rpa_update>:
{
   19fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fac:	b085      	sub	sp, #20
   19fae:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   19fb0:	f00f fa44 	bl	2943c <_impl_k_uptime_get>
   19fb4:	4606      	mov	r6, r0
   19fb6:	460f      	mov	r7, r1
	bool all = timeout || (rpa_last_ms == -1) ||
   19fb8:	f1b9 0f00 	cmp.w	r9, #0
   19fbc:	d115      	bne.n	19fea <ll_rl_rpa_update+0x42>
   19fbe:	4b57      	ldr	r3, [pc, #348]	; (1a11c <ll_rl_rpa_update+0x174>)
   19fc0:	e9d3 0100 	ldrd	r0, r1, [r3]
   19fc4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   19fc8:	bf08      	it	eq
   19fca:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   19fce:	d010      	beq.n	19ff2 <ll_rl_rpa_update+0x4a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   19fd0:	1a30      	subs	r0, r6, r0
   19fd2:	eb67 0101 	sbc.w	r1, r7, r1
   19fd6:	4b52      	ldr	r3, [pc, #328]	; (1a120 <ll_rl_rpa_update+0x178>)
   19fd8:	681a      	ldr	r2, [r3, #0]
   19fda:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   19fdc:	4290      	cmp	r0, r2
   19fde:	eb71 0303 	sbcs.w	r3, r1, r3
   19fe2:	db09      	blt.n	19ff8 <ll_rl_rpa_update+0x50>
   19fe4:	f04f 0801 	mov.w	r8, #1
   19fe8:	e001      	b.n	19fee <ll_rl_rpa_update+0x46>
   19fea:	f04f 0801 	mov.w	r8, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19fee:	2400      	movs	r4, #0
   19ff0:	e02a      	b.n	1a048 <ll_rl_rpa_update+0xa0>
	bool all = timeout || (rpa_last_ms == -1) ||
   19ff2:	f04f 0801 	mov.w	r8, #1
   19ff6:	e7fa      	b.n	19fee <ll_rl_rpa_update+0x46>
   19ff8:	f04f 0800 	mov.w	r8, #0
   19ffc:	e7f7      	b.n	19fee <ll_rl_rpa_update+0x46>
		*((u8_t *)dst++) = *((u8_t *)src--);
   19ffe:	7818      	ldrb	r0, [r3, #0]
   1a000:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1a002:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a004:	3b01      	subs	r3, #1
   1a006:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1a008:	2a00      	cmp	r2, #0
   1a00a:	d1f8      	bne.n	19ffe <ll_rl_rpa_update+0x56>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1a00c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a010:	00d3      	lsls	r3, r2, #3
   1a012:	3318      	adds	r3, #24
   1a014:	4943      	ldr	r1, [pc, #268]	; (1a124 <ll_rl_rpa_update+0x17c>)
   1a016:	4419      	add	r1, r3
   1a018:	3106      	adds	r1, #6
   1a01a:	4668      	mov	r0, sp
   1a01c:	f7ea fabe 	bl	459c <bt_rpa_create>
				LL_ASSERT(!err);
   1a020:	2800      	cmp	r0, #0
   1a022:	d13c      	bne.n	1a09e <ll_rl_rpa_update+0xf6>
			if (rl[i].lirk) {
   1a024:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a028:	00d3      	lsls	r3, r2, #3
   1a02a:	4a3e      	ldr	r2, [pc, #248]	; (1a124 <ll_rl_rpa_update+0x17c>)
   1a02c:	5cd3      	ldrb	r3, [r2, r3]
   1a02e:	f013 0f08 	tst.w	r3, #8
   1a032:	d13a      	bne.n	1a0aa <ll_rl_rpa_update+0x102>
			rl[i].rpas_ready = 1;
   1a034:	493b      	ldr	r1, [pc, #236]	; (1a124 <ll_rl_rpa_update+0x17c>)
   1a036:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a03a:	00eb      	lsls	r3, r5, #3
   1a03c:	5cca      	ldrb	r2, [r1, r3]
   1a03e:	f042 0202 	orr.w	r2, r2, #2
   1a042:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a044:	3401      	adds	r4, #1
   1a046:	b2e4      	uxtb	r4, r4
   1a048:	2c07      	cmp	r4, #7
   1a04a:	d854      	bhi.n	1a0f6 <ll_rl_rpa_update+0x14e>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1a04c:	4625      	mov	r5, r4
   1a04e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a052:	00d3      	lsls	r3, r2, #3
   1a054:	4a33      	ldr	r2, [pc, #204]	; (1a124 <ll_rl_rpa_update+0x17c>)
   1a056:	5cd3      	ldrb	r3, [r2, r3]
   1a058:	f013 0f01 	tst.w	r3, #1
   1a05c:	d0f2      	beq.n	1a044 <ll_rl_rpa_update+0x9c>
   1a05e:	f1b8 0f00 	cmp.w	r8, #0
   1a062:	d107      	bne.n	1a074 <ll_rl_rpa_update+0xcc>
   1a064:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a068:	00d3      	lsls	r3, r2, #3
   1a06a:	4a2e      	ldr	r2, [pc, #184]	; (1a124 <ll_rl_rpa_update+0x17c>)
   1a06c:	5cd3      	ldrb	r3, [r2, r3]
   1a06e:	f013 0f02 	tst.w	r3, #2
   1a072:	d1e7      	bne.n	1a044 <ll_rl_rpa_update+0x9c>
			if (rl[i].pirk) {
   1a074:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a078:	00d3      	lsls	r3, r2, #3
   1a07a:	4a2a      	ldr	r2, [pc, #168]	; (1a124 <ll_rl_rpa_update+0x17c>)
   1a07c:	5cd3      	ldrb	r3, [r2, r3]
   1a07e:	f013 0f04 	tst.w	r3, #4
   1a082:	d0cf      	beq.n	1a024 <ll_rl_rpa_update+0x7c>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   1a084:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1a088:	00da      	lsls	r2, r3, #3
   1a08a:	4b26      	ldr	r3, [pc, #152]	; (1a124 <ll_rl_rpa_update+0x17c>)
   1a08c:	4413      	add	r3, r2
   1a08e:	7dda      	ldrb	r2, [r3, #23]
   1a090:	4b25      	ldr	r3, [pc, #148]	; (1a128 <ll_rl_rpa_update+0x180>)
   1a092:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	src += length - 1;
   1a096:	330f      	adds	r3, #15
   1a098:	2210      	movs	r2, #16
   1a09a:	4669      	mov	r1, sp
   1a09c:	e7b4      	b.n	1a008 <ll_rl_rpa_update+0x60>
				LL_ASSERT(!err);
   1a09e:	4040      	eors	r0, r0
   1a0a0:	f380 8811 	msr	BASEPRI, r0
   1a0a4:	f04f 0004 	mov.w	r0, #4
   1a0a8:	df02      	svc	2
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1a0aa:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a0ae:	00d3      	lsls	r3, r2, #3
   1a0b0:	481c      	ldr	r0, [pc, #112]	; (1a124 <ll_rl_rpa_update+0x17c>)
   1a0b2:	4418      	add	r0, r3
   1a0b4:	4669      	mov	r1, sp
   1a0b6:	3007      	adds	r0, #7
   1a0b8:	f7ea fa70 	bl	459c <bt_rpa_create>
				LL_ASSERT(!err);
   1a0bc:	b9a8      	cbnz	r0, 1a0ea <ll_rl_rpa_update+0x142>
				rl[i].local_rpa = &rpa;
   1a0be:	00ab      	lsls	r3, r5, #2
   1a0c0:	442b      	add	r3, r5
   1a0c2:	00da      	lsls	r2, r3, #3
   1a0c4:	4b17      	ldr	r3, [pc, #92]	; (1a124 <ll_rl_rpa_update+0x17c>)
   1a0c6:	eb03 0a02 	add.w	sl, r3, r2
   1a0ca:	f8ca d024 	str.w	sp, [sl, #36]	; 0x24
				bt_addr_copy(&local_rpas[i], &rpa);
   1a0ce:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1a0d2:	ea4f 0b43 	mov.w	fp, r3, lsl #1
   1a0d6:	4b15      	ldr	r3, [pc, #84]	; (1a12c <ll_rl_rpa_update+0x184>)
   1a0d8:	449b      	add	fp, r3
   1a0da:	2206      	movs	r2, #6
   1a0dc:	4669      	mov	r1, sp
   1a0de:	4658      	mov	r0, fp
   1a0e0:	f7e6 f8ee 	bl	2c0 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1a0e4:	f8ca b024 	str.w	fp, [sl, #36]	; 0x24
   1a0e8:	e7a4      	b.n	1a034 <ll_rl_rpa_update+0x8c>
				LL_ASSERT(!err);
   1a0ea:	4040      	eors	r0, r0
   1a0ec:	f380 8811 	msr	BASEPRI, r0
   1a0f0:	f04f 0004 	mov.w	r0, #4
   1a0f4:	df02      	svc	2
	if (all) {
   1a0f6:	f1b8 0f00 	cmp.w	r8, #0
   1a0fa:	d002      	beq.n	1a102 <ll_rl_rpa_update+0x15a>
		rpa_last_ms = now;
   1a0fc:	4b07      	ldr	r3, [pc, #28]	; (1a11c <ll_rl_rpa_update+0x174>)
   1a0fe:	e9c3 6700 	strd	r6, r7, [r3]
	if (timeout) {
   1a102:	f1b9 0f00 	cmp.w	r9, #0
   1a106:	d102      	bne.n	1a10e <ll_rl_rpa_update+0x166>
}
   1a108:	b005      	add	sp, #20
   1a10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (radio_adv_is_enabled()) {
   1a10e:	f7fd ffc9 	bl	180a4 <radio_adv_is_enabled>
   1a112:	2800      	cmp	r0, #0
   1a114:	d0f8      	beq.n	1a108 <ll_rl_rpa_update+0x160>
			rpa_adv_refresh();
   1a116:	f7ff fef1 	bl	19efc <rpa_adv_refresh>
}
   1a11a:	e7f5      	b.n	1a108 <ll_rl_rpa_update+0x160>
   1a11c:	20002f98 	.word	0x20002f98
   1a120:	20003144 	.word	0x20003144
   1a124:	20001eb8 	.word	0x20001eb8
   1a128:	20001e38 	.word	0x20001e38
   1a12c:	20001dfc 	.word	0x20001dfc

0001a130 <rpa_timeout>:
{
   1a130:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   1a132:	2001      	movs	r0, #1
   1a134:	f7ff ff38 	bl	19fa8 <ll_rl_rpa_update>
   1a138:	4b03      	ldr	r3, [pc, #12]	; (1a148 <rpa_timeout+0x18>)
   1a13a:	681a      	ldr	r2, [r3, #0]
   1a13c:	4903      	ldr	r1, [pc, #12]	; (1a14c <rpa_timeout+0x1c>)
   1a13e:	4804      	ldr	r0, [pc, #16]	; (1a150 <rpa_timeout+0x20>)
   1a140:	f00f ff50 	bl	29fe4 <k_delayed_work_submit_to_queue>
   1a144:	bd08      	pop	{r3, pc}
   1a146:	bf00      	nop
   1a148:	20003144 	.word	0x20003144
   1a14c:	20003010 	.word	0x20003010
   1a150:	20003158 	.word	0x20003158

0001a154 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   1a154:	2008      	movs	r0, #8
   1a156:	4770      	bx	lr

0001a158 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   1a158:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
   1a15a:	2000      	movs	r0, #0
   1a15c:	f7ff fb74 	bl	19848 <rl_access_check>
   1a160:	b908      	cbnz	r0, 1a166 <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a162:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   1a164:	bd08      	pop	{r3, pc}
	rl_clear();
   1a166:	f7ff fa7d 	bl	19664 <rl_clear>
	return 0;
   1a16a:	2000      	movs	r0, #0
   1a16c:	bd08      	pop	{r3, pc}
	...

0001a170 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   1a170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a174:	b082      	sub	sp, #8
   1a176:	4605      	mov	r5, r0
   1a178:	460c      	mov	r4, r1
   1a17a:	4616      	mov	r6, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   1a17c:	2000      	movs	r0, #0
   1a17e:	f7ff fb63 	bl	19848 <rl_access_check>
   1a182:	b918      	cbnz	r0, 1a18c <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a184:	200c      	movs	r0, #12
		rl[i].wl = 0;
	}
	rl[i].taken = 1;

	return 0;
}
   1a186:	b002      	add	sp, #8
   1a188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   1a18c:	462f      	mov	r7, r5
   1a18e:	f817 0b01 	ldrb.w	r0, [r7], #1
   1a192:	f10d 0207 	add.w	r2, sp, #7
   1a196:	4639      	mov	r1, r7
   1a198:	f7ff fca4 	bl	19ae4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a19c:	2807      	cmp	r0, #7
   1a19e:	d801      	bhi.n	1a1a4 <ll_rl_add+0x34>
		return BT_HCI_ERR_INVALID_PARAM;
   1a1a0:	2012      	movs	r0, #18
   1a1a2:	e7f0      	b.n	1a186 <ll_rl_add+0x16>
	} else if (j >= ARRAY_SIZE(rl)) {
   1a1a4:	f89d 8007 	ldrb.w	r8, [sp, #7]
   1a1a8:	f1b8 0f07 	cmp.w	r8, #7
   1a1ac:	d901      	bls.n	1a1b2 <ll_rl_add+0x42>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1a1ae:	2007      	movs	r0, #7
   1a1b0:	e7e9      	b.n	1a186 <ll_rl_add+0x16>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1a1b2:	f8df a130 	ldr.w	sl, [pc, #304]	; 1a2e4 <ll_rl_add+0x174>
   1a1b6:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1a1ba:	4443      	add	r3, r8
   1a1bc:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   1a1c0:	eb0a 0009 	add.w	r0, sl, r9
   1a1c4:	2206      	movs	r2, #6
   1a1c6:	4639      	mov	r1, r7
   1a1c8:	3001      	adds	r0, #1
   1a1ca:	f7e6 f879 	bl	2c0 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a1ce:	782a      	ldrb	r2, [r5, #0]
   1a1d0:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a1d4:	f362 1386 	bfi	r3, r2, #6, #1
   1a1d8:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1a1dc:	2110      	movs	r1, #16
   1a1de:	4620      	mov	r0, r4
   1a1e0:	f7f5 f8f2 	bl	f3c8 <mem_nz>
   1a1e4:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a1e8:	f360 0382 	bfi	r3, r0, #2, #1
   1a1ec:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1a1f0:	2110      	movs	r1, #16
   1a1f2:	4630      	mov	r0, r6
   1a1f4:	f7f5 f8e8 	bl	f3c8 <mem_nz>
   1a1f8:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a1fc:	f360 03c3 	bfi	r3, r0, #3, #1
   1a200:	f80a 3009 	strb.w	r3, [sl, r9]
	if (rl[i].pirk) {
   1a204:	f013 0f04 	tst.w	r3, #4
   1a208:	d016      	beq.n	1a238 <ll_rl_add+0xc8>
		rl[i].pirk_idx = peer_irk_count;
   1a20a:	4933      	ldr	r1, [pc, #204]	; (1a2d8 <ll_rl_add+0x168>)
   1a20c:	780a      	ldrb	r2, [r1, #0]
   1a20e:	4653      	mov	r3, sl
   1a210:	444b      	add	r3, r9
   1a212:	75da      	strb	r2, [r3, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1a214:	4b31      	ldr	r3, [pc, #196]	; (1a2dc <ll_rl_add+0x16c>)
   1a216:	f803 8002 	strb.w	r8, [r3, r2]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   1a21a:	1c53      	adds	r3, r2, #1
   1a21c:	700b      	strb	r3, [r1, #0]
   1a21e:	340f      	adds	r4, #15
   1a220:	4b2f      	ldr	r3, [pc, #188]	; (1a2e0 <ll_rl_add+0x170>)
   1a222:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1a226:	2210      	movs	r2, #16
   1a228:	e004      	b.n	1a234 <ll_rl_add+0xc4>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a22a:	7821      	ldrb	r1, [r4, #0]
   1a22c:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   1a22e:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a230:	3c01      	subs	r4, #1
   1a232:	3301      	adds	r3, #1
	for (; length > 0; length--) {
   1a234:	2a00      	cmp	r2, #0
   1a236:	d1f8      	bne.n	1a22a <ll_rl_add+0xba>
	if (rl[i].lirk) {
   1a238:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   1a23c:	00d3      	lsls	r3, r2, #3
   1a23e:	4a29      	ldr	r2, [pc, #164]	; (1a2e4 <ll_rl_add+0x174>)
   1a240:	5cd3      	ldrb	r3, [r2, r3]
   1a242:	f013 0f08 	tst.w	r3, #8
   1a246:	d12f      	bne.n	1a2a8 <ll_rl_add+0x138>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1a248:	4e26      	ldr	r6, [pc, #152]	; (1a2e4 <ll_rl_add+0x174>)
   1a24a:	ea4f 0488 	mov.w	r4, r8, lsl #2
   1a24e:	eb04 0208 	add.w	r2, r4, r8
   1a252:	00d3      	lsls	r3, r2, #3
   1a254:	3318      	adds	r3, #24
   1a256:	2206      	movs	r2, #6
   1a258:	2100      	movs	r1, #0
   1a25a:	18f0      	adds	r0, r6, r3
   1a25c:	f010 fb2c 	bl	2a8b8 <memset>
	rl[i].rpas_ready = 0;
   1a260:	4444      	add	r4, r8
   1a262:	00e2      	lsls	r2, r4, #3
   1a264:	5cb3      	ldrb	r3, [r6, r2]
	rl[i].dev = 0;
   1a266:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1a26a:	f36f 1304 	bfc	r3, #4, #1
   1a26e:	54b3      	strb	r3, [r6, r2]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a270:	2200      	movs	r2, #0
   1a272:	4639      	mov	r1, r7
   1a274:	7828      	ldrb	r0, [r5, #0]
   1a276:	f7ff fa0b 	bl	19690 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1a27a:	2807      	cmp	r0, #7
   1a27c:	d822      	bhi.n	1a2c4 <ll_rl_add+0x154>
		wl[j].rl_idx = i;
   1a27e:	4b1a      	ldr	r3, [pc, #104]	; (1a2e8 <ll_rl_add+0x178>)
   1a280:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a284:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1;
   1a288:	00e3      	lsls	r3, r4, #3
   1a28a:	5cf2      	ldrb	r2, [r6, r3]
   1a28c:	f042 0220 	orr.w	r2, r2, #32
   1a290:	54f2      	strb	r2, [r6, r3]
	rl[i].taken = 1;
   1a292:	4914      	ldr	r1, [pc, #80]	; (1a2e4 <ll_rl_add+0x174>)
   1a294:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1a298:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   1a29c:	5cca      	ldrb	r2, [r1, r3]
   1a29e:	f042 0201 	orr.w	r2, r2, #1
   1a2a2:	54ca      	strb	r2, [r1, r3]
	return 0;
   1a2a4:	2000      	movs	r0, #0
   1a2a6:	e76e      	b.n	1a186 <ll_rl_add+0x16>
		memcpy(rl[i].local_irk, lirk, 16);
   1a2a8:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1a2ac:	4443      	add	r3, r8
   1a2ae:	00da      	lsls	r2, r3, #3
   1a2b0:	4c0c      	ldr	r4, [pc, #48]	; (1a2e4 <ll_rl_add+0x174>)
   1a2b2:	4414      	add	r4, r2
   1a2b4:	2210      	movs	r2, #16
   1a2b6:	4631      	mov	r1, r6
   1a2b8:	1de0      	adds	r0, r4, #7
   1a2ba:	f7e6 f801 	bl	2c0 <memcpy>
		rl[i].local_rpa = NULL;
   1a2be:	2300      	movs	r3, #0
   1a2c0:	6263      	str	r3, [r4, #36]	; 0x24
   1a2c2:	e7c1      	b.n	1a248 <ll_rl_add+0xd8>
		rl[i].wl = 0;
   1a2c4:	4a07      	ldr	r2, [pc, #28]	; (1a2e4 <ll_rl_add+0x174>)
   1a2c6:	eb08 0188 	add.w	r1, r8, r8, lsl #2
   1a2ca:	00cb      	lsls	r3, r1, #3
   1a2cc:	5cd1      	ldrb	r1, [r2, r3]
   1a2ce:	f36f 1145 	bfc	r1, #5, #1
   1a2d2:	54d1      	strb	r1, [r2, r3]
   1a2d4:	e7dd      	b.n	1a292 <ll_rl_add+0x122>
   1a2d6:	bf00      	nop
   1a2d8:	20001e2c 	.word	0x20001e2c
   1a2dc:	20001e30 	.word	0x20001e30
   1a2e0:	20001e38 	.word	0x20001e38
   1a2e4:	20001eb8 	.word	0x20001eb8
   1a2e8:	20002030 	.word	0x20002030

0001a2ec <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   1a2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a2f0:	4604      	mov	r4, r0
	u8_t i;

	if (!rl_access_check(false)) {
   1a2f2:	2000      	movs	r0, #0
   1a2f4:	f7ff faa8 	bl	19848 <rl_access_check>
   1a2f8:	b910      	cbnz	r0, 1a300 <ll_rl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a2fa:	200c      	movs	r0, #12
   1a2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a300:	4626      	mov	r6, r4
   1a302:	f816 0b01 	ldrb.w	r0, [r6], #1
   1a306:	2200      	movs	r2, #0
   1a308:	4631      	mov	r1, r6
   1a30a:	f7ff fbeb 	bl	19ae4 <ll_rl_find>
   1a30e:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   1a310:	2807      	cmp	r0, #7
   1a312:	d902      	bls.n	1a31a <ll_rl_remove+0x2e>
		}
		rl[i].taken = 0;
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a314:	2002      	movs	r0, #2
}
   1a316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rl[i].pirk) {
   1a31a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1a31e:	00d3      	lsls	r3, r2, #3
   1a320:	4a2d      	ldr	r2, [pc, #180]	; (1a3d8 <ll_rl_remove+0xec>)
   1a322:	5cd3      	ldrb	r3, [r2, r3]
   1a324:	f013 0f04 	tst.w	r3, #4
   1a328:	d03e      	beq.n	1a3a8 <ll_rl_remove+0xbc>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1a32a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a32e:	00da      	lsls	r2, r3, #3
   1a330:	4b29      	ldr	r3, [pc, #164]	; (1a3d8 <ll_rl_remove+0xec>)
   1a332:	4413      	add	r3, r2
   1a334:	7ddf      	ldrb	r7, [r3, #23]
   1a336:	4b29      	ldr	r3, [pc, #164]	; (1a3dc <ll_rl_remove+0xf0>)
   1a338:	781b      	ldrb	r3, [r3, #0]
   1a33a:	3b01      	subs	r3, #1
			if (pj && pi != pj) {
   1a33c:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
   1a340:	d02e      	beq.n	1a3a0 <ll_rl_remove+0xb4>
   1a342:	4547      	cmp	r7, r8
   1a344:	d02c      	beq.n	1a3a0 <ll_rl_remove+0xb4>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   1a346:	4826      	ldr	r0, [pc, #152]	; (1a3e0 <ll_rl_remove+0xf4>)
   1a348:	2210      	movs	r2, #16
   1a34a:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   1a34e:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   1a352:	f7e5 ffb5 	bl	2c0 <memcpy>
				for (k = 0;
   1a356:	2300      	movs	r3, #0
   1a358:	e001      	b.n	1a35e <ll_rl_remove+0x72>
				     k++) {
   1a35a:	3301      	adds	r3, #1
   1a35c:	b2db      	uxtb	r3, r3
				for (k = 0;
   1a35e:	2b07      	cmp	r3, #7
   1a360:	d81e      	bhi.n	1a3a0 <ll_rl_remove+0xb4>
					if (rl[k].taken && rl[k].pirk &&
   1a362:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a366:	00ca      	lsls	r2, r1, #3
   1a368:	491b      	ldr	r1, [pc, #108]	; (1a3d8 <ll_rl_remove+0xec>)
   1a36a:	5c8a      	ldrb	r2, [r1, r2]
   1a36c:	f012 0f01 	tst.w	r2, #1
   1a370:	d0f3      	beq.n	1a35a <ll_rl_remove+0x6e>
   1a372:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a376:	00ca      	lsls	r2, r1, #3
   1a378:	4917      	ldr	r1, [pc, #92]	; (1a3d8 <ll_rl_remove+0xec>)
   1a37a:	5c8a      	ldrb	r2, [r1, r2]
   1a37c:	f012 0f04 	tst.w	r2, #4
   1a380:	d0eb      	beq.n	1a35a <ll_rl_remove+0x6e>
					    rl[k].pirk_idx == pj) {
   1a382:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a386:	00d1      	lsls	r1, r2, #3
   1a388:	4a13      	ldr	r2, [pc, #76]	; (1a3d8 <ll_rl_remove+0xec>)
   1a38a:	440a      	add	r2, r1
   1a38c:	7dd2      	ldrb	r2, [r2, #23]
					if (rl[k].taken && rl[k].pirk &&
   1a38e:	4590      	cmp	r8, r2
   1a390:	d1e3      	bne.n	1a35a <ll_rl_remove+0x6e>
						rl[k].pirk_idx = pi;
   1a392:	2128      	movs	r1, #40	; 0x28
   1a394:	4a10      	ldr	r2, [pc, #64]	; (1a3d8 <ll_rl_remove+0xec>)
   1a396:	fb01 2003 	mla	r0, r1, r3, r2
   1a39a:	75c7      	strb	r7, [r0, #23]
						peer_irk_rl_ids[pi] = k;
   1a39c:	4a11      	ldr	r2, [pc, #68]	; (1a3e4 <ll_rl_remove+0xf8>)
   1a39e:	55d3      	strb	r3, [r2, r7]
			peer_irk_count--;
   1a3a0:	4a0e      	ldr	r2, [pc, #56]	; (1a3dc <ll_rl_remove+0xf0>)
   1a3a2:	7813      	ldrb	r3, [r2, #0]
   1a3a4:	3b01      	subs	r3, #1
   1a3a6:	7013      	strb	r3, [r2, #0]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a3a8:	2200      	movs	r2, #0
   1a3aa:	4631      	mov	r1, r6
   1a3ac:	7820      	ldrb	r0, [r4, #0]
   1a3ae:	f7ff f96f 	bl	19690 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1a3b2:	2807      	cmp	r0, #7
   1a3b4:	d804      	bhi.n	1a3c0 <ll_rl_remove+0xd4>
			wl[j].rl_idx = FILTER_IDX_NONE;
   1a3b6:	4b0c      	ldr	r3, [pc, #48]	; (1a3e8 <ll_rl_remove+0xfc>)
   1a3b8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a3bc:	23ff      	movs	r3, #255	; 0xff
   1a3be:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0;
   1a3c0:	4a05      	ldr	r2, [pc, #20]	; (1a3d8 <ll_rl_remove+0xec>)
   1a3c2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a3c6:	00eb      	lsls	r3, r5, #3
   1a3c8:	5cd1      	ldrb	r1, [r2, r3]
   1a3ca:	f36f 0100 	bfc	r1, #0, #1
   1a3ce:	54d1      	strb	r1, [r2, r3]
		return 0;
   1a3d0:	2000      	movs	r0, #0
   1a3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a3d6:	bf00      	nop
   1a3d8:	20001eb8 	.word	0x20001eb8
   1a3dc:	20001e2c 	.word	0x20001e2c
   1a3e0:	20001e38 	.word	0x20001e38
   1a3e4:	20001e30 	.word	0x20001e30
   1a3e8:	20002030 	.word	0x20002030

0001a3ec <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   1a3ec:	b510      	push	{r4, lr}
   1a3ee:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   1a3f0:	795b      	ldrb	r3, [r3, #5]
   1a3f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a3f6:	2b40      	cmp	r3, #64	; 0x40
   1a3f8:	d000      	beq.n	1a3fc <ll_rl_crpa_set+0x10>
   1a3fa:	bd10      	pop	{r4, pc}

		if (id_addr) {
   1a3fc:	b119      	cbz	r1, 1a406 <ll_rl_crpa_set+0x1a>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   1a3fe:	2200      	movs	r2, #0
   1a400:	f7ff fb70 	bl	19ae4 <ll_rl_find>
   1a404:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1a406:	2a07      	cmp	r2, #7
   1a408:	d8f7      	bhi.n	1a3fa <ll_rl_crpa_set+0xe>
   1a40a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1a40e:	00cb      	lsls	r3, r1, #3
   1a410:	4907      	ldr	r1, [pc, #28]	; (1a430 <ll_rl_crpa_set+0x44>)
   1a412:	5ccb      	ldrb	r3, [r1, r3]
   1a414:	f013 0f01 	tst.w	r3, #1
   1a418:	d0ef      	beq.n	1a3fa <ll_rl_crpa_set+0xe>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1a41a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1a41e:	00d0      	lsls	r0, r2, #3
   1a420:	3018      	adds	r0, #24
   1a422:	2206      	movs	r2, #6
   1a424:	4621      	mov	r1, r4
   1a426:	4b02      	ldr	r3, [pc, #8]	; (1a430 <ll_rl_crpa_set+0x44>)
   1a428:	4418      	add	r0, r3
   1a42a:	f7e5 ff49 	bl	2c0 <memcpy>
				       sizeof(bt_addr_t));
		}
	}
}
   1a42e:	e7e4      	b.n	1a3fa <ll_rl_crpa_set+0xe>
   1a430:	20001eb8 	.word	0x20001eb8

0001a434 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   1a434:	b538      	push	{r3, r4, r5, lr}
   1a436:	460d      	mov	r5, r1
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a438:	4601      	mov	r1, r0
   1a43a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a43e:	2200      	movs	r2, #0
   1a440:	f7ff fb50 	bl	19ae4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1a444:	2807      	cmp	r0, #7
   1a446:	d901      	bls.n	1a44c <ll_rl_crpa_get+0x18>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a448:	2002      	movs	r0, #2
   1a44a:	bd38      	pop	{r3, r4, r5, pc}
   1a44c:	4604      	mov	r4, r0
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1a44e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a452:	00d8      	lsls	r0, r3, #3
   1a454:	3018      	adds	r0, #24
   1a456:	2106      	movs	r1, #6
   1a458:	4b09      	ldr	r3, [pc, #36]	; (1a480 <ll_rl_crpa_get+0x4c>)
   1a45a:	4418      	add	r0, r3
   1a45c:	f7f4 ffb4 	bl	f3c8 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1a460:	b908      	cbnz	r0, 1a466 <ll_rl_crpa_get+0x32>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a462:	2002      	movs	r0, #2
}
   1a464:	bd38      	pop	{r3, r4, r5, pc}
			bt_addr_copy(crpa, &rl[i].curr_rpa);
   1a466:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1a46a:	00e1      	lsls	r1, r4, #3
   1a46c:	3118      	adds	r1, #24
   1a46e:	2206      	movs	r2, #6
   1a470:	4b03      	ldr	r3, [pc, #12]	; (1a480 <ll_rl_crpa_get+0x4c>)
   1a472:	4419      	add	r1, r3
   1a474:	4628      	mov	r0, r5
   1a476:	f7e5 ff23 	bl	2c0 <memcpy>
			return 0;
   1a47a:	2000      	movs	r0, #0
   1a47c:	bd38      	pop	{r3, r4, r5, pc}
   1a47e:	bf00      	nop
   1a480:	20001eb8 	.word	0x20001eb8

0001a484 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   1a484:	b510      	push	{r4, lr}
   1a486:	460c      	mov	r4, r1
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a488:	4601      	mov	r1, r0
   1a48a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a48e:	2200      	movs	r2, #0
   1a490:	f7ff fb28 	bl	19ae4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a494:	2807      	cmp	r0, #7
   1a496:	d901      	bls.n	1a49c <ll_rl_lrpa_get+0x18>
		bt_addr_copy(lrpa, rl[i].local_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a498:	2002      	movs	r0, #2
}
   1a49a:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1a49c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a4a0:	00c2      	lsls	r2, r0, #3
   1a4a2:	4b04      	ldr	r3, [pc, #16]	; (1a4b4 <ll_rl_lrpa_get+0x30>)
   1a4a4:	4413      	add	r3, r2
   1a4a6:	2206      	movs	r2, #6
   1a4a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a4aa:	4620      	mov	r0, r4
   1a4ac:	f7e5 ff08 	bl	2c0 <memcpy>
		return 0;
   1a4b0:	2000      	movs	r0, #0
   1a4b2:	bd10      	pop	{r4, pc}
   1a4b4:	20001eb8 	.word	0x20001eb8

0001a4b8 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   1a4b8:	b510      	push	{r4, lr}
   1a4ba:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   1a4bc:	2000      	movs	r0, #0
   1a4be:	f7ff f9c3 	bl	19848 <rl_access_check>
   1a4c2:	b908      	cbnz	r0, 1a4c8 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a4c4:	200c      	movs	r0, #12
   1a4c6:	bd10      	pop	{r4, pc}
	}

	switch (enable) {
   1a4c8:	b11c      	cbz	r4, 1a4d2 <ll_rl_enable+0x1a>
   1a4ca:	2c01      	cmp	r4, #1
   1a4cc:	d005      	beq.n	1a4da <ll_rl_enable+0x22>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   1a4ce:	2012      	movs	r0, #18
	}

	return 0;
}
   1a4d0:	bd10      	pop	{r4, pc}
		rl_enable = 0;
   1a4d2:	2000      	movs	r0, #0
   1a4d4:	4b03      	ldr	r3, [pc, #12]	; (1a4e4 <ll_rl_enable+0x2c>)
   1a4d6:	7018      	strb	r0, [r3, #0]
		break;
   1a4d8:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   1a4da:	2201      	movs	r2, #1
   1a4dc:	4b01      	ldr	r3, [pc, #4]	; (1a4e4 <ll_rl_enable+0x2c>)
   1a4de:	701a      	strb	r2, [r3, #0]
	return 0;
   1a4e0:	2000      	movs	r0, #0
		break;
   1a4e2:	bd10      	pop	{r4, pc}
   1a4e4:	20001ff8 	.word	0x20001ff8

0001a4e8 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   1a4e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a4ec:	fb03 f000 	mul.w	r0, r3, r0
   1a4f0:	4b01      	ldr	r3, [pc, #4]	; (1a4f8 <ll_rl_timeout_set+0x10>)
   1a4f2:	6018      	str	r0, [r3, #0]
   1a4f4:	4770      	bx	lr
   1a4f6:	bf00      	nop
   1a4f8:	20003144 	.word	0x20003144

0001a4fc <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   1a4fc:	b538      	push	{r3, r4, r5, lr}
   1a4fe:	4604      	mov	r4, r0
   1a500:	460d      	mov	r5, r1
	u8_t i;

	if (!rl_access_check(false)) {
   1a502:	2000      	movs	r0, #0
   1a504:	f7ff f9a0 	bl	19848 <rl_access_check>
   1a508:	b908      	cbnz	r0, 1a50e <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a50a:	200c      	movs	r0, #12
   1a50c:	bd38      	pop	{r3, r4, r5, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a50e:	4621      	mov	r1, r4
   1a510:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a514:	2200      	movs	r2, #0
   1a516:	f7ff fae5 	bl	19ae4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a51a:	2807      	cmp	r0, #7
   1a51c:	d901      	bls.n	1a522 <ll_priv_mode_set+0x26>
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a51e:	2002      	movs	r0, #2
   1a520:	bd38      	pop	{r3, r4, r5, pc}
		switch (mode) {
   1a522:	b11d      	cbz	r5, 1a52c <ll_priv_mode_set+0x30>
   1a524:	2d01      	cmp	r5, #1
   1a526:	d00b      	beq.n	1a540 <ll_priv_mode_set+0x44>
			return BT_HCI_ERR_INVALID_PARAM;
   1a528:	2012      	movs	r0, #18
	}

	return 0;
}
   1a52a:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   1a52c:	4a09      	ldr	r2, [pc, #36]	; (1a554 <ll_priv_mode_set+0x58>)
   1a52e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a532:	00c3      	lsls	r3, r0, #3
   1a534:	5cd1      	ldrb	r1, [r2, r3]
   1a536:	f36f 1104 	bfc	r1, #4, #1
   1a53a:	54d1      	strb	r1, [r2, r3]
	return 0;
   1a53c:	2000      	movs	r0, #0
			break;
   1a53e:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   1a540:	4904      	ldr	r1, [pc, #16]	; (1a554 <ll_priv_mode_set+0x58>)
   1a542:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a546:	00c3      	lsls	r3, r0, #3
   1a548:	5cca      	ldrb	r2, [r1, r3]
   1a54a:	f042 0210 	orr.w	r2, r2, #16
   1a54e:	54ca      	strb	r2, [r1, r3]
	return 0;
   1a550:	2000      	movs	r0, #0
			break;
   1a552:	bd38      	pop	{r3, r4, r5, pc}
   1a554:	20001eb8 	.word	0x20001eb8

0001a558 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
   1a558:	b538      	push	{r3, r4, r5, lr}
   1a55a:	4605      	mov	r5, r0
	wl_anon = 0;
   1a55c:	2400      	movs	r4, #0
   1a55e:	4b0e      	ldr	r3, [pc, #56]	; (1a598 <ll_filter_reset+0x40>)
   1a560:	701c      	strb	r4, [r3, #0]

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();
   1a562:	f7ff f86b 	bl	1963c <wl_clear>

	rl_enable = 0;
   1a566:	4b0d      	ldr	r3, [pc, #52]	; (1a59c <ll_filter_reset+0x44>)
   1a568:	701c      	strb	r4, [r3, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a56a:	4a0d      	ldr	r2, [pc, #52]	; (1a5a0 <ll_filter_reset+0x48>)
   1a56c:	4b0d      	ldr	r3, [pc, #52]	; (1a5a4 <ll_filter_reset+0x4c>)
   1a56e:	601a      	str	r2, [r3, #0]
	rpa_last_ms = -1;
   1a570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a578:	4b0b      	ldr	r3, [pc, #44]	; (1a5a8 <ll_filter_reset+0x50>)
   1a57a:	e9c3 0100 	strd	r0, r1, [r3]
	rl_clear();
   1a57e:	f7ff f871 	bl	19664 <rl_clear>
	if (init) {
   1a582:	b91d      	cbnz	r5, 1a58c <ll_filter_reset+0x34>
		k_delayed_work_init(&rpa_work, rpa_timeout);
	} else {
		k_delayed_work_cancel(&rpa_work);
   1a584:	4809      	ldr	r0, [pc, #36]	; (1a5ac <ll_filter_reset+0x54>)
   1a586:	f00f fcd3 	bl	29f30 <k_delayed_work_cancel>
   1a58a:	bd38      	pop	{r3, r4, r5, pc}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1a58c:	4908      	ldr	r1, [pc, #32]	; (1a5b0 <ll_filter_reset+0x58>)
   1a58e:	4807      	ldr	r0, [pc, #28]	; (1a5ac <ll_filter_reset+0x54>)
   1a590:	f00f fcb0 	bl	29ef4 <k_delayed_work_init>
   1a594:	bd38      	pop	{r3, r4, r5, pc}
   1a596:	bf00      	nop
   1a598:	20002fa0 	.word	0x20002fa0
   1a59c:	20001ff8 	.word	0x20001ff8
   1a5a0:	000dbba0 	.word	0x000dbba0
   1a5a4:	20003144 	.word	0x20003144
   1a5a8:	20002f98 	.word	0x20002f98
   1a5ac:	20003010 	.word	0x20003010
   1a5b0:	0001a131 	.word	0x0001a131

0001a5b4 <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   1a5b4:	4800      	ldr	r0, [pc, #0]	; (1a5b8 <ll_adv_set_get+0x4>)
   1a5b6:	4770      	bx	lr
   1a5b8:	200020a4 	.word	0x200020a4

0001a5bc <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   1a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5c0:	b087      	sub	sp, #28
   1a5c2:	4689      	mov	r9, r1
   1a5c4:	4614      	mov	r4, r2
   1a5c6:	461e      	mov	r6, r3
   1a5c8:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   1a5cc:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   1a5d0:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1a5d4:	4b89      	ldr	r3, [pc, #548]	; (1a7fc <ll_adv_params_set+0x240>)
   1a5d6:	e893 0003 	ldmia.w	r3, {r0, r1}
   1a5da:	9004      	str	r0, [sp, #16]
   1a5dc:	f8ad 1014 	strh.w	r1, [sp, #20]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   1a5e0:	f7fd fd60 	bl	180a4 <radio_adv_is_enabled>
   1a5e4:	9001      	str	r0, [sp, #4]
   1a5e6:	b128      	cbz	r0, 1a5f4 <ll_adv_params_set+0x38>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a5e8:	230c      	movs	r3, #12
   1a5ea:	9301      	str	r3, [sp, #4]
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
   1a5ec:	9801      	ldr	r0, [sp, #4]
   1a5ee:	b007      	add	sp, #28
   1a5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ll_adv.phy_p = BIT(0);
   1a5f4:	4b82      	ldr	r3, [pc, #520]	; (1a800 <ll_adv_params_set+0x244>)
   1a5f6:	7a1a      	ldrb	r2, [r3, #8]
   1a5f8:	2101      	movs	r1, #1
   1a5fa:	f361 0202 	bfi	r2, r1, #0, #3
   1a5fe:	721a      	strb	r2, [r3, #8]
	if (adv_type > 0x04) {
   1a600:	2e04      	cmp	r6, #4
   1a602:	d90f      	bls.n	1a624 <ll_adv_params_set+0x68>
		if (evt_prop & BIT(4)) {
   1a604:	f019 0f10 	tst.w	r9, #16
   1a608:	d071      	beq.n	1a6ee <ll_adv_params_set+0x132>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   1a60a:	4b7c      	ldr	r3, [pc, #496]	; (1a7fc <ll_adv_params_set+0x240>)
   1a60c:	689b      	ldr	r3, [r3, #8]
   1a60e:	9303      	str	r3, [sp, #12]
			adv_type = leg_adv_type[evt_prop & 0x03];
   1a610:	f009 0303 	and.w	r3, r9, #3
   1a614:	aa06      	add	r2, sp, #24
   1a616:	4413      	add	r3, r2
   1a618:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
			if (evt_prop & BIT(3)) {
   1a61c:	f019 0f08 	tst.w	r9, #8
   1a620:	d000      	beq.n	1a624 <ll_adv_params_set+0x68>
				adv_type = 0x01;
   1a622:	460e      	mov	r6, r1
	if (adv_type != 0x01) {
   1a624:	2e01      	cmp	r6, #1
   1a626:	d071      	beq.n	1a70c <ll_adv_params_set+0x150>
		ll_adv.interval = interval;
   1a628:	4b75      	ldr	r3, [pc, #468]	; (1a800 <ll_adv_params_set+0x244>)
   1a62a:	60dc      	str	r4, [r3, #12]
	ll_adv.chan_map = chan_map;
   1a62c:	4a74      	ldr	r2, [pc, #464]	; (1a800 <ll_adv_params_set+0x244>)
   1a62e:	7813      	ldrb	r3, [r2, #0]
   1a630:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
   1a634:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
   1a638:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
   1a63c:	f361 03c4 	bfi	r3, r1, #3, #2
   1a640:	7013      	strb	r3, [r2, #0]
	radio_adv_data = radio_adv_data_get();
   1a642:	f7fd fd27 	bl	18094 <radio_adv_data_get>
   1a646:	4607      	mov	r7, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a648:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   1a64c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a650:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
   1a654:	eb00 0a04 	add.w	sl, r0, r4
	pdu->type = pdu_adv_type[adv_type];
   1a658:	ab06      	add	r3, sp, #24
   1a65a:	441e      	add	r6, r3
   1a65c:	f816 2c08 	ldrb.w	r2, [r6, #-8]
   1a660:	5d03      	ldrb	r3, [r0, r4]
   1a662:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   1a666:	f36f 1304 	bfc	r3, #4, #1
   1a66a:	5503      	strb	r3, [r0, r4]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1a66c:	f003 030f 	and.w	r3, r3, #15
   1a670:	2b01      	cmp	r3, #1
   1a672:	d94f      	bls.n	1a714 <ll_adv_params_set+0x158>
		pdu->chan_sel = 0;
   1a674:	5d03      	ldrb	r3, [r0, r4]
   1a676:	f36f 1345 	bfc	r3, #5, #1
   1a67a:	5503      	strb	r3, [r0, r4]
	ll_adv.own_addr_type = own_addr_type;
   1a67c:	4a60      	ldr	r2, [pc, #384]	; (1a800 <ll_adv_params_set+0x244>)
   1a67e:	7813      	ldrb	r3, [r2, #0]
   1a680:	f368 1346 	bfi	r3, r8, #5, #2
   1a684:	7013      	strb	r3, [r2, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a686:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1a68a:	2b40      	cmp	r3, #64	; 0x40
   1a68c:	d047      	beq.n	1a71e <ll_adv_params_set+0x162>
   1a68e:	2b60      	cmp	r3, #96	; 0x60
   1a690:	d045      	beq.n	1a71e <ll_adv_params_set+0x162>
	pdu->tx_addr = own_addr_type & 0x1;
   1a692:	f008 0801 	and.w	r8, r8, #1
   1a696:	5d3b      	ldrb	r3, [r7, r4]
   1a698:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   1a69c:	f36f 13c7 	bfc	r3, #7, #1
   1a6a0:	553b      	strb	r3, [r7, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1a6a2:	f003 030f 	and.w	r3, r3, #15
   1a6a6:	2b01      	cmp	r3, #1
   1a6a8:	d044      	beq.n	1a734 <ll_adv_params_set+0x178>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   1a6aa:	2b07      	cmp	r3, #7
   1a6ac:	d050      	beq.n	1a750 <ll_adv_params_set+0x194>
	} else if (pdu->len == 0) {
   1a6ae:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1a6b2:	b913      	cbnz	r3, 1a6ba <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
   1a6b4:	2306      	movs	r3, #6
   1a6b6:	f88a 3001 	strb.w	r3, [sl, #1]
	radio_adv_data = radio_scan_data_get();
   1a6ba:	f7fd fcef 	bl	1809c <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a6be:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   1a6c2:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   1a6c6:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
   1a6ca:	1881      	adds	r1, r0, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1a6cc:	5c83      	ldrb	r3, [r0, r2]
   1a6ce:	2404      	movs	r4, #4
   1a6d0:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->tx_addr = own_addr_type & 0x1;
   1a6d4:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   1a6d8:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   1a6dc:	f36f 13c7 	bfc	r3, #7, #1
   1a6e0:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   1a6e2:	784b      	ldrb	r3, [r1, #1]
   1a6e4:	2b00      	cmp	r3, #0
   1a6e6:	d181      	bne.n	1a5ec <ll_adv_params_set+0x30>
		pdu->len = BDADDR_SIZE;
   1a6e8:	2306      	movs	r3, #6
   1a6ea:	704b      	strb	r3, [r1, #1]
   1a6ec:	e77e      	b.n	1a5ec <ll_adv_params_set+0x30>
			if (((evt_prop & 0x03) == 0x03) ||
   1a6ee:	f009 0303 	and.w	r3, r9, #3
   1a6f2:	2b03      	cmp	r3, #3
   1a6f4:	d07c      	beq.n	1a7f0 <ll_adv_params_set+0x234>
   1a6f6:	f009 030c 	and.w	r3, r9, #12
   1a6fa:	2b0c      	cmp	r3, #12
   1a6fc:	d07b      	beq.n	1a7f6 <ll_adv_params_set+0x23a>
			ll_adv.phy_p = phy_p;
   1a6fe:	4b40      	ldr	r3, [pc, #256]	; (1a800 <ll_adv_params_set+0x244>)
   1a700:	7a1a      	ldrb	r2, [r3, #8]
   1a702:	f365 0202 	bfi	r2, r5, #0, #3
   1a706:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   1a708:	2605      	movs	r6, #5
   1a70a:	e78b      	b.n	1a624 <ll_adv_params_set+0x68>
		ll_adv.interval = 0;
   1a70c:	2200      	movs	r2, #0
   1a70e:	4b3c      	ldr	r3, [pc, #240]	; (1a800 <ll_adv_params_set+0x244>)
   1a710:	60da      	str	r2, [r3, #12]
   1a712:	e78b      	b.n	1a62c <ll_adv_params_set+0x70>
		pdu->chan_sel = 1;
   1a714:	5d03      	ldrb	r3, [r0, r4]
   1a716:	f043 0320 	orr.w	r3, r3, #32
   1a71a:	5503      	strb	r3, [r0, r4]
   1a71c:	e7ae      	b.n	1a67c <ll_adv_params_set+0xc0>
		ll_adv.id_addr_type = direct_addr_type;
   1a71e:	4838      	ldr	r0, [pc, #224]	; (1a800 <ll_adv_params_set+0x244>)
   1a720:	7803      	ldrb	r3, [r0, #0]
   1a722:	f36b 13c7 	bfi	r3, fp, #7, #1
   1a726:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   1a72a:	2206      	movs	r2, #6
   1a72c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a72e:	f7e5 fdc7 	bl	2c0 <memcpy>
   1a732:	e7ae      	b.n	1a692 <ll_adv_params_set+0xd6>
		pdu->rx_addr = direct_addr_type;
   1a734:	5d3b      	ldrb	r3, [r7, r4]
   1a736:	f36b 13c7 	bfi	r3, fp, #7, #1
   1a73a:	553b      	strb	r3, [r7, r4]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   1a73c:	2206      	movs	r2, #6
   1a73e:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a740:	f10a 0008 	add.w	r0, sl, #8
   1a744:	f7e5 fdbc 	bl	2c0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   1a748:	230c      	movs	r3, #12
   1a74a:	f88a 3001 	strb.w	r3, [sl, #1]
   1a74e:	e7b4      	b.n	1a6ba <ll_adv_params_set+0xfe>
		p = (void *)&pdu->payload.adv_ext_ind;
   1a750:	f10a 0302 	add.w	r3, sl, #2
		ptr = (u8_t *)h + sizeof(*h);
   1a754:	f10a 0104 	add.w	r1, sl, #4
		p->ext_hdr_len = 0;
   1a758:	f89a 2002 	ldrb.w	r2, [sl, #2]
		p->adv_mode = evt_prop & 0x03;
   1a75c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1a760:	f369 1287 	bfi	r2, r9, #6, #2
   1a764:	f88a 2002 	strb.w	r2, [sl, #2]
		*(u8_t *)h = 0;
   1a768:	2200      	movs	r2, #0
   1a76a:	f88a 2003 	strb.w	r2, [sl, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   1a76e:	f019 0f20 	tst.w	r9, #32
   1a772:	d10e      	bne.n	1a792 <ll_adv_params_set+0x1d6>
   1a774:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1a778:	f012 0fc0 	tst.w	r2, #192	; 0xc0
   1a77c:	d109      	bne.n	1a792 <ll_adv_params_set+0x1d6>
   1a77e:	2d04      	cmp	r5, #4
   1a780:	d007      	beq.n	1a792 <ll_adv_params_set+0x1d6>
			h->adv_addr = 1;
   1a782:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1a786:	f042 0201 	orr.w	r2, r2, #1
   1a78a:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr += BDADDR_SIZE;
   1a78e:	f10a 010a 	add.w	r1, sl, #10
		if (evt_prop & BIT(6)) {
   1a792:	f019 0f40 	tst.w	r9, #64	; 0x40
   1a796:	d006      	beq.n	1a7a6 <ll_adv_params_set+0x1ea>
			h->tx_pwr = 1;
   1a798:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1a79c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1a7a0:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr++;
   1a7a4:	3101      	adds	r1, #1
		len = ptr - (u8_t *)p;
   1a7a6:	1acb      	subs	r3, r1, r3
   1a7a8:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
   1a7aa:	2b02      	cmp	r3, #2
   1a7ac:	d916      	bls.n	1a7dc <ll_adv_params_set+0x220>
			p->ext_hdr_len = len -
   1a7ae:	1e58      	subs	r0, r3, #1
   1a7b0:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1a7b4:	f360 0205 	bfi	r2, r0, #0, #6
   1a7b8:	f88a 2002 	strb.w	r2, [sl, #2]
			pdu->len = len;
   1a7bc:	f88a 3001 	strb.w	r3, [sl, #1]
		if (h->tx_pwr) {
   1a7c0:	f89a 3003 	ldrb.w	r3, [sl, #3]
   1a7c4:	f013 0f40 	tst.w	r3, #64	; 0x40
   1a7c8:	f43f af77 	beq.w	1a6ba <ll_adv_params_set+0xfe>
			if (tx_pwr) {
   1a7cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a7ce:	b16b      	cbz	r3, 1a7ec <ll_adv_params_set+0x230>
				if (*tx_pwr != 0x7F) {
   1a7d0:	781b      	ldrb	r3, [r3, #0]
   1a7d2:	2b7f      	cmp	r3, #127	; 0x7f
   1a7d4:	d006      	beq.n	1a7e4 <ll_adv_params_set+0x228>
			*ptr = _tx_pwr;
   1a7d6:	f801 3c01 	strb.w	r3, [r1, #-1]
   1a7da:	e76e      	b.n	1a6ba <ll_adv_params_set+0xfe>
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   1a7dc:	2301      	movs	r3, #1
   1a7de:	f88a 3001 	strb.w	r3, [sl, #1]
   1a7e2:	e7ed      	b.n	1a7c0 <ll_adv_params_set+0x204>
					*tx_pwr = _tx_pwr;
   1a7e4:	2300      	movs	r3, #0
   1a7e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1a7e8:	7013      	strb	r3, [r2, #0]
   1a7ea:	e7f4      	b.n	1a7d6 <ll_adv_params_set+0x21a>
			_tx_pwr = 0;
   1a7ec:	2300      	movs	r3, #0
   1a7ee:	e7f2      	b.n	1a7d6 <ll_adv_params_set+0x21a>
				return 0x12; /* invalid HCI cmd param */
   1a7f0:	2312      	movs	r3, #18
   1a7f2:	9301      	str	r3, [sp, #4]
   1a7f4:	e6fa      	b.n	1a5ec <ll_adv_params_set+0x30>
   1a7f6:	2312      	movs	r3, #18
   1a7f8:	9301      	str	r3, [sp, #4]
   1a7fa:	e6f7      	b.n	1a5ec <ll_adv_params_set+0x30>
   1a7fc:	0002e6f8 	.word	0x0002e6f8
   1a800:	200020a4 	.word	0x200020a4

0001a804 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   1a804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a808:	4606      	mov	r6, r0
   1a80a:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   1a80c:	f7fd fc42 	bl	18094 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a810:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   1a814:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a818:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1a81c:	1881      	adds	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1a81e:	5c83      	ldrb	r3, [r0, r2]
   1a820:	f003 030f 	and.w	r3, r3, #15
   1a824:	2b01      	cmp	r3, #1
   1a826:	d03e      	beq.n	1a8a6 <ll_adv_data_set+0xa2>
   1a828:	4604      	mov	r4, r0
   1a82a:	2b07      	cmp	r3, #7
   1a82c:	d03b      	beq.n	1a8a6 <ll_adv_data_set+0xa2>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   1a82e:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1a832:	429d      	cmp	r5, r3
   1a834:	d039      	beq.n	1a8aa <ll_adv_data_set+0xa6>
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1a836:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1a83a:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   1a83e:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   1a842:	f814 e002 	ldrb.w	lr, [r4, r2]
   1a846:	5ce0      	ldrb	r0, [r4, r3]
   1a848:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
   1a84c:	f36f 1004 	bfc	r0, #4, #1
   1a850:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   1a852:	5ca0      	ldrb	r0, [r4, r2]
   1a854:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1a858:	f814 e003 	ldrb.w	lr, [r4, r3]
   1a85c:	f360 1e45 	bfi	lr, r0, #5, #1
   1a860:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   1a864:	5ca0      	ldrb	r0, [r4, r2]
   1a866:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a86a:	fa5f fe8e 	uxtb.w	lr, lr
   1a86e:	f360 1e86 	bfi	lr, r0, #6, #1
   1a872:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   1a876:	5ca2      	ldrb	r2, [r4, r2]
   1a878:	09d2      	lsrs	r2, r2, #7
   1a87a:	fa5f f08e 	uxtb.w	r0, lr
   1a87e:	f362 10c7 	bfi	r0, r2, #7, #1
   1a882:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->payload.adv_ind.addr[0],
   1a884:	2206      	movs	r2, #6
   1a886:	3102      	adds	r1, #2
   1a888:	f108 0002 	add.w	r0, r8, #2
   1a88c:	f7e5 fd18 	bl	2c0 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   1a890:	4632      	mov	r2, r6
   1a892:	4639      	mov	r1, r7
   1a894:	f108 0008 	add.w	r0, r8, #8
   1a898:	f7e5 fd12 	bl	2c0 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1a89c:	3606      	adds	r6, #6
   1a89e:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   1a8a2:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1a8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_adv_data->last + 1;
   1a8aa:	3501      	adds	r5, #1
   1a8ac:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1a8ae:	2d02      	cmp	r5, #2
   1a8b0:	d1c1      	bne.n	1a836 <ll_adv_data_set+0x32>
			last = 0;
   1a8b2:	2500      	movs	r5, #0
   1a8b4:	e7bf      	b.n	1a836 <ll_adv_data_set+0x32>

0001a8b6 <ll_scan_data_set>:
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   1a8b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a8ba:	4606      	mov	r6, r0
   1a8bc:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   1a8be:	f7fd fbed 	bl	1809c <radio_scan_data_get>
   1a8c2:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   1a8c4:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   1a8c8:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   1a8cc:	429a      	cmp	r2, r3
   1a8ce:	d031      	beq.n	1a934 <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
	} else {
		last = radio_scan_data->last;
   1a8d0:	461d      	mov	r5, r3
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   1a8d2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a8d6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1a8da:	18e1      	adds	r1, r4, r3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1a8dc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a8e0:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1a8e4:	eb04 0802 	add.w	r8, r4, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1a8e8:	5ca0      	ldrb	r0, [r4, r2]
   1a8ea:	f04f 0e04 	mov.w	lr, #4
   1a8ee:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   1a8f2:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   1a8f6:	f36f 1045 	bfc	r0, #5, #1
   1a8fa:	54a0      	strb	r0, [r4, r2]
	pdu->tx_addr = prev->tx_addr;
   1a8fc:	5ce0      	ldrb	r0, [r4, r3]
   1a8fe:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a902:	5ca3      	ldrb	r3, [r4, r2]
   1a904:	f360 1386 	bfi	r3, r0, #6, #1
	pdu->rx_addr = 0;
   1a908:	f36f 13c7 	bfc	r3, #7, #1
   1a90c:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   1a90e:	1db3      	adds	r3, r6, #6
   1a910:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   1a914:	2206      	movs	r2, #6
   1a916:	3102      	adds	r1, #2
   1a918:	f108 0002 	add.w	r0, r8, #2
   1a91c:	f7e5 fcd0 	bl	2c0 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   1a920:	4632      	mov	r2, r6
   1a922:	4639      	mov	r1, r7
   1a924:	f108 0008 	add.w	r0, r8, #8
   1a928:	f7e5 fcca 	bl	2c0 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   1a92c:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1a930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_scan_data->last + 1;
   1a934:	1c5d      	adds	r5, r3, #1
   1a936:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1a938:	2d02      	cmp	r5, #2
   1a93a:	d1ca      	bne.n	1a8d2 <ll_scan_data_set+0x1c>
			last = 0;
   1a93c:	2500      	movs	r5, #0
   1a93e:	e7c8      	b.n	1a8d2 <ll_scan_data_set+0x1c>

0001a940 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   1a940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a944:	b082      	sub	sp, #8
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   1a946:	b120      	cbz	r0, 1a952 <ll_adv_enable+0x12>
		return radio_adv_disable();
	} else if (radio_adv_is_enabled()) {
   1a948:	f7fd fbac 	bl	180a4 <radio_adv_is_enabled>
   1a94c:	b130      	cbz	r0, 1a95c <ll_adv_enable+0x1c>
		return 0;
   1a94e:	2000      	movs	r0, #0
   1a950:	e001      	b.n	1a956 <ll_adv_enable+0x16>
		return radio_adv_disable();
   1a952:	f7fe fb27 	bl	18fa4 <radio_adv_disable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   1a956:	b002      	add	sp, #8
   1a958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   1a95c:	f7fd fb9a 	bl	18094 <radio_adv_data_get>
   1a960:	4605      	mov	r5, r0
	radio_scan_data = radio_scan_data_get();
   1a962:	f7fd fb9b 	bl	1809c <radio_scan_data_get>
			[radio_adv_data->last][0];
   1a966:	f895 204f 	ldrb.w	r2, [r5, #79]	; 0x4f
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   1a96a:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   1a96e:	ebc2 04c4 	rsb	r4, r2, r4, lsl #3
   1a972:	192e      	adds	r6, r5, r4
			[radio_scan_data->last][0];
   1a974:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   1a978:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a97c:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1a980:	18c7      	adds	r7, r0, r3
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   1a982:	5d2b      	ldrb	r3, [r5, r4]
   1a984:	f003 030f 	and.w	r3, r3, #15
   1a988:	2b07      	cmp	r3, #7
   1a98a:	d023      	beq.n	1a9d4 <ll_adv_enable+0x94>
		ll_filters_adv_update(ll_adv.filter_policy);
   1a98c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1aa60 <ll_adv_enable+0x120>
   1a990:	f898 0000 	ldrb.w	r0, [r8]
   1a994:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1a998:	f7ff f874 	bl	19a84 <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a99c:	f898 3000 	ldrb.w	r3, [r8]
   1a9a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1a9a4:	2b40      	cmp	r3, #64	; 0x40
   1a9a6:	d02b      	beq.n	1aa00 <ll_adv_enable+0xc0>
   1a9a8:	2b60      	cmp	r3, #96	; 0x60
   1a9aa:	d029      	beq.n	1aa00 <ll_adv_enable+0xc0>
		bool priv = false;
   1a9ac:	2300      	movs	r3, #0
	u8_t   rl_idx = FILTER_IDX_NONE;
   1a9ae:	f04f 08ff 	mov.w	r8, #255	; 0xff
		if (!priv) {
   1a9b2:	2b00      	cmp	r3, #0
   1a9b4:	d03b      	beq.n	1aa2e <ll_adv_enable+0xee>
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1a9b6:	4b2a      	ldr	r3, [pc, #168]	; (1aa60 <ll_adv_enable+0x120>)
   1a9b8:	7a18      	ldrb	r0, [r3, #8]
   1a9ba:	8999      	ldrh	r1, [r3, #12]
				  ll_adv.chan_map, ll_adv.filter_policy,
   1a9bc:	781a      	ldrb	r2, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1a9be:	f8cd 8000 	str.w	r8, [sp]
   1a9c2:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   1a9c6:	f002 0207 	and.w	r2, r2, #7
   1a9ca:	f000 0007 	and.w	r0, r0, #7
   1a9ce:	f7fe f90b 	bl	18be8 <radio_adv_enable>
	return status;
   1a9d2:	e7c0      	b.n	1a956 <ll_adv_enable+0x16>
		ptr = (u8_t *)h + sizeof(*h);
   1a9d4:	1d37      	adds	r7, r6, #4
		if (h->adv_addr) {
   1a9d6:	78f3      	ldrb	r3, [r6, #3]
   1a9d8:	f013 0f01 	tst.w	r3, #1
   1a9dc:	d102      	bne.n	1a9e4 <ll_adv_enable+0xa4>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1a9de:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1a9e2:	e7e8      	b.n	1a9b6 <ll_adv_enable+0x76>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   1a9e4:	5d28      	ldrb	r0, [r5, r4]
   1a9e6:	2100      	movs	r1, #0
   1a9e8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a9ec:	f7fe fdf4 	bl	195d8 <ll_addr_get>
   1a9f0:	2206      	movs	r2, #6
   1a9f2:	4601      	mov	r1, r0
   1a9f4:	4638      	mov	r0, r7
   1a9f6:	f7e5 fc63 	bl	2c0 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1a9fa:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1a9fe:	e7da      	b.n	1a9b6 <ll_adv_enable+0x76>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   1aa00:	4917      	ldr	r1, [pc, #92]	; (1aa60 <ll_adv_enable+0x120>)
   1aa02:	f811 0b02 	ldrb.w	r0, [r1], #2
   1aa06:	2200      	movs	r2, #0
   1aa08:	09c0      	lsrs	r0, r0, #7
   1aa0a:	f7ff f86b 	bl	19ae4 <ll_rl_find>
   1aa0e:	4680      	mov	r8, r0
			if (rl_idx != FILTER_IDX_NONE) {
   1aa10:	28ff      	cmp	r0, #255	; 0xff
   1aa12:	d002      	beq.n	1aa1a <ll_adv_enable+0xda>
				ll_rl_rpa_update(false);
   1aa14:	2000      	movs	r0, #0
   1aa16:	f7ff fac7 	bl	19fa8 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   1aa1a:	4631      	mov	r1, r6
   1aa1c:	4640      	mov	r0, r8
   1aa1e:	f7ff f9f9 	bl	19e14 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   1aa22:	4639      	mov	r1, r7
   1aa24:	4640      	mov	r0, r8
   1aa26:	f7ff f9f5 	bl	19e14 <ll_rl_pdu_adv_update>
			priv = true;
   1aa2a:	2301      	movs	r3, #1
   1aa2c:	e7c1      	b.n	1a9b2 <ll_adv_enable+0x72>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1aa2e:	3602      	adds	r6, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1aa30:	5d28      	ldrb	r0, [r5, r4]
   1aa32:	2100      	movs	r1, #0
   1aa34:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1aa38:	f7fe fdce 	bl	195d8 <ll_addr_get>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1aa3c:	2206      	movs	r2, #6
   1aa3e:	4601      	mov	r1, r0
   1aa40:	4630      	mov	r0, r6
   1aa42:	f7e5 fc3d 	bl	2c0 <memcpy>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1aa46:	3702      	adds	r7, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1aa48:	5d28      	ldrb	r0, [r5, r4]
   1aa4a:	2100      	movs	r1, #0
   1aa4c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1aa50:	f7fe fdc2 	bl	195d8 <ll_addr_get>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1aa54:	2206      	movs	r2, #6
   1aa56:	4601      	mov	r1, r0
   1aa58:	4638      	mov	r0, r7
   1aa5a:	f7e5 fc31 	bl	2c0 <memcpy>
   1aa5e:	e7aa      	b.n	1a9b6 <ll_adv_enable+0x76>
   1aa60:	200020a4 	.word	0x200020a4

0001aa64 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   1aa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa66:	4607      	mov	r7, r0
   1aa68:	460e      	mov	r6, r1
   1aa6a:	4615      	mov	r5, r2
   1aa6c:	461c      	mov	r4, r3
	if (radio_scan_is_enabled()) {
   1aa6e:	f7fd fb31 	bl	180d4 <radio_scan_is_enabled>
   1aa72:	b110      	cbz	r0, 1aa7a <ll_scan_params_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1aa74:	220c      	movs	r2, #12
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
	ll_scan.filter_policy = filter_policy;

	return 0;
}
   1aa76:	4610      	mov	r0, r2
   1aa78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aa7a:	4602      	mov	r2, r0
	ll_scan.type = type;
   1aa7c:	4906      	ldr	r1, [pc, #24]	; (1aa98 <ll_scan_params_set+0x34>)
   1aa7e:	790b      	ldrb	r3, [r1, #4]
   1aa80:	f367 0303 	bfi	r3, r7, #0, #4
	ll_scan.interval = interval;
   1aa84:	800e      	strh	r6, [r1, #0]
	ll_scan.window = window;
   1aa86:	804d      	strh	r5, [r1, #2]
	ll_scan.own_addr_type = own_addr_type;
   1aa88:	f364 1305 	bfi	r3, r4, #4, #2
	ll_scan.filter_policy = filter_policy;
   1aa8c:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1aa90:	f360 1387 	bfi	r3, r0, #6, #2
   1aa94:	710b      	strb	r3, [r1, #4]
	return 0;
   1aa96:	e7ee      	b.n	1aa76 <ll_scan_params_set+0x12>
   1aa98:	200020b4 	.word	0x200020b4

0001aa9c <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   1aa9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa9e:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   1aaa0:	b120      	cbz	r0, 1aaac <ll_scan_enable+0x10>
		return radio_scan_disable();
	} else if (radio_scan_is_enabled()) {
   1aaa2:	f7fd fb17 	bl	180d4 <radio_scan_is_enabled>
   1aaa6:	b128      	cbz	r0, 1aab4 <ll_scan_enable+0x18>
		/* Duplicate filtering is processed in the HCI layer */
		return 0;
   1aaa8:	2000      	movs	r0, #0
   1aaaa:	e001      	b.n	1aab0 <ll_scan_enable+0x14>
		return radio_scan_disable();
   1aaac:	f7fe fbac 	bl	19208 <radio_scan_disable>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   1aab0:	b005      	add	sp, #20
   1aab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_filters_scan_update(ll_scan.filter_policy);
   1aab4:	4c18      	ldr	r4, [pc, #96]	; (1ab18 <ll_scan_enable+0x7c>)
   1aab6:	7920      	ldrb	r0, [r4, #4]
   1aab8:	0980      	lsrs	r0, r0, #6
   1aaba:	f7fe fffb 	bl	19ab4 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   1aabe:	7923      	ldrb	r3, [r4, #4]
   1aac0:	f013 0f01 	tst.w	r3, #1
   1aac4:	d00d      	beq.n	1aae2 <ll_scan_enable+0x46>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1aac6:	7923      	ldrb	r3, [r4, #4]
   1aac8:	f003 0330 	and.w	r3, r3, #48	; 0x30
	if ((ll_scan.type & 0x1) &&
   1aacc:	2b20      	cmp	r3, #32
   1aace:	d003      	beq.n	1aad8 <ll_scan_enable+0x3c>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1aad0:	2b30      	cmp	r3, #48	; 0x30
   1aad2:	d001      	beq.n	1aad8 <ll_scan_enable+0x3c>
	u8_t  rpa_gen = 0;
   1aad4:	2700      	movs	r7, #0
   1aad6:	e005      	b.n	1aae4 <ll_scan_enable+0x48>
		ll_rl_rpa_update(false);
   1aad8:	2000      	movs	r0, #0
   1aada:	f7ff fa65 	bl	19fa8 <ll_rl_rpa_update>
		rpa_gen = 1;
   1aade:	2701      	movs	r7, #1
   1aae0:	e000      	b.n	1aae4 <ll_scan_enable+0x48>
	u8_t  rpa_gen = 0;
   1aae2:	2700      	movs	r7, #0
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1aae4:	4d0c      	ldr	r5, [pc, #48]	; (1ab18 <ll_scan_enable+0x7c>)
   1aae6:	792c      	ldrb	r4, [r5, #4]
   1aae8:	f004 060f 	and.w	r6, r4, #15
   1aaec:	f3c4 1400 	ubfx	r4, r4, #4, #1
   1aaf0:	2100      	movs	r1, #0
   1aaf2:	4620      	mov	r0, r4
   1aaf4:	f7fe fd70 	bl	195d8 <ll_addr_get>
   1aaf8:	882b      	ldrh	r3, [r5, #0]
   1aafa:	8869      	ldrh	r1, [r5, #2]
				   ll_scan.filter_policy, rpa_gen,
   1aafc:	792a      	ldrb	r2, [r5, #4]
   1aafe:	0992      	lsrs	r2, r2, #6
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1ab00:	25ff      	movs	r5, #255	; 0xff
   1ab02:	9503      	str	r5, [sp, #12]
   1ab04:	9702      	str	r7, [sp, #8]
   1ab06:	9201      	str	r2, [sp, #4]
   1ab08:	9100      	str	r1, [sp, #0]
   1ab0a:	4602      	mov	r2, r0
   1ab0c:	4621      	mov	r1, r4
   1ab0e:	4630      	mov	r0, r6
   1ab10:	f7fe fa7a 	bl	19008 <radio_scan_enable>
	return status;
   1ab14:	e7cc      	b.n	1aab0 <ll_scan_enable+0x14>
   1ab16:	bf00      	nop
   1ab18:	200020b4 	.word	0x200020b4

0001ab1c <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   1ab1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ab20:	b085      	sub	sp, #20
   1ab22:	4607      	mov	r7, r0
   1ab24:	4688      	mov	r8, r1
   1ab26:	4615      	mov	r5, r2
   1ab28:	461e      	mov	r6, r3
   1ab2a:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (radio_scan_is_enabled()) {
   1ab2e:	f7fd fad1 	bl	180d4 <radio_scan_is_enabled>
   1ab32:	b120      	cbz	r0, 1ab3e <ll_create_connection+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ab34:	230c      	movs	r3, #12
#endif
	return radio_scan_enable(0, own_addr_type,
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   1ab36:	4618      	mov	r0, r3
   1ab38:	b005      	add	sp, #20
   1ab3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1ab3e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1ab42:	9300      	str	r3, [sp, #0]
   1ab44:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   1ab48:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1ab4c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1ab4e:	4630      	mov	r0, r6
   1ab50:	f7fd fada 	bl	18108 <radio_connect_enable>
	if (status) {
   1ab54:	4603      	mov	r3, r0
   1ab56:	2800      	cmp	r0, #0
   1ab58:	d1ed      	bne.n	1ab36 <ll_create_connection+0x1a>
	ll_filters_scan_update(filter_policy);
   1ab5a:	4628      	mov	r0, r5
   1ab5c:	f7fe ffaa 	bl	19ab4 <ll_filters_scan_update>
	if (!filter_policy && ctrl_rl_enabled()) {
   1ab60:	b1c5      	cbz	r5, 1ab94 <ll_create_connection+0x78>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1ab62:	f04f 09ff 	mov.w	r9, #255	; 0xff
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1ab66:	1ea3      	subs	r3, r4, #2
   1ab68:	b2db      	uxtb	r3, r3
   1ab6a:	2b01      	cmp	r3, #1
   1ab6c:	d91f      	bls.n	1abae <ll_create_connection+0x92>
	u8_t  rpa_gen = 0;
   1ab6e:	2600      	movs	r6, #0
	return radio_scan_enable(0, own_addr_type,
   1ab70:	2100      	movs	r1, #0
   1ab72:	4620      	mov	r0, r4
   1ab74:	f7fe fd30 	bl	195d8 <ll_addr_get>
   1ab78:	f8cd 900c 	str.w	r9, [sp, #12]
   1ab7c:	9602      	str	r6, [sp, #8]
   1ab7e:	9501      	str	r5, [sp, #4]
   1ab80:	f8cd 8000 	str.w	r8, [sp]
   1ab84:	463b      	mov	r3, r7
   1ab86:	4602      	mov	r2, r0
   1ab88:	4621      	mov	r1, r4
   1ab8a:	2000      	movs	r0, #0
   1ab8c:	f7fe fa3c 	bl	19008 <radio_scan_enable>
   1ab90:	4603      	mov	r3, r0
   1ab92:	e7d0      	b.n	1ab36 <ll_create_connection+0x1a>
	if (!filter_policy && ctrl_rl_enabled()) {
   1ab94:	f7ff f936 	bl	19e04 <ctrl_rl_enabled>
   1ab98:	b910      	cbnz	r0, 1aba0 <ll_create_connection+0x84>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1ab9a:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1ab9e:	e7e2      	b.n	1ab66 <ll_create_connection+0x4a>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1aba0:	2200      	movs	r2, #0
   1aba2:	990c      	ldr	r1, [sp, #48]	; 0x30
   1aba4:	4630      	mov	r0, r6
   1aba6:	f7fe ff9d 	bl	19ae4 <ll_rl_find>
   1abaa:	4681      	mov	r9, r0
   1abac:	e7db      	b.n	1ab66 <ll_create_connection+0x4a>
		ll_rl_rpa_update(false);
   1abae:	2000      	movs	r0, #0
   1abb0:	f7ff f9fa 	bl	19fa8 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   1abb4:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   1abb8:	2601      	movs	r6, #1
   1abba:	e7d9      	b.n	1ab70 <ll_create_connection+0x54>

0001abbc <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1abbc:	4b01      	ldr	r3, [pc, #4]	; (1abc4 <pool_id+0x8>)
   1abbe:	1ac0      	subs	r0, r0, r3
}
   1abc0:	1140      	asrs	r0, r0, #5
   1abc2:	4770      	bx	lr
   1abc4:	2000d6e8 	.word	0x2000d6e8

0001abc8 <net_buf_pool_get>:
}
   1abc8:	4b01      	ldr	r3, [pc, #4]	; (1abd0 <net_buf_pool_get+0x8>)
   1abca:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1abce:	4770      	bx	lr
   1abd0:	2000d6e8 	.word	0x2000d6e8

0001abd4 <net_buf_reset>:
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
   1abd4:	2300      	movs	r3, #0
   1abd6:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   1abd8:	f100 0310 	add.w	r3, r0, #16
   1abdc:	6083      	str	r3, [r0, #8]
   1abde:	4770      	bx	lr

0001abe0 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   1abe0:	b570      	push	{r4, r5, r6, lr}
   1abe2:	4605      	mov	r5, r0
	__asm__ volatile(
   1abe4:	f04f 0320 	mov.w	r3, #32
   1abe8:	f3ef 8611 	mrs	r6, BASEPRI
   1abec:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1abf0:	8a43      	ldrh	r3, [r0, #18]
   1abf2:	b373      	cbz	r3, 1ac52 <net_buf_alloc+0x72>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1abf4:	8a02      	ldrh	r2, [r0, #16]
   1abf6:	4293      	cmp	r3, r2
   1abf8:	d207      	bcs.n	1ac0a <net_buf_alloc+0x2a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   1abfa:	2100      	movs	r1, #0
   1abfc:	f00e f83a 	bl	28c74 <k_queue_get>
			if (buf) {
   1ac00:	4604      	mov	r4, r0
   1ac02:	b110      	cbz	r0, 1ac0a <net_buf_alloc+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1ac04:	f386 8811 	msr	BASEPRI, r6
   1ac08:	e019      	b.n	1ac3e <net_buf_alloc+0x5e>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   1ac0a:	8a6b      	ldrh	r3, [r5, #18]
   1ac0c:	1e5a      	subs	r2, r3, #1
   1ac0e:	826a      	strh	r2, [r5, #18]
   1ac10:	f386 8811 	msr	BASEPRI, r6
	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   1ac14:	69ea      	ldr	r2, [r5, #28]
   1ac16:	8a2c      	ldrh	r4, [r5, #16]
   1ac18:	1ae4      	subs	r4, r4, r3
   1ac1a:	8aab      	ldrh	r3, [r5, #20]
   1ac1c:	3303      	adds	r3, #3
   1ac1e:	f023 0303 	bic.w	r3, r3, #3
   1ac22:	8ae9      	ldrh	r1, [r5, #22]
   1ac24:	3103      	adds	r1, #3
   1ac26:	f021 0103 	bic.w	r1, r1, #3
   1ac2a:	440b      	add	r3, r1
   1ac2c:	3310      	adds	r3, #16
   1ac2e:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   1ac32:	4628      	mov	r0, r5
   1ac34:	f7ff ffc2 	bl	1abbc <pool_id>
   1ac38:	71a0      	strb	r0, [r4, #6]
	buf->size = pool->buf_size;
   1ac3a:	8aab      	ldrh	r3, [r5, #20]
   1ac3c:	81e3      	strh	r3, [r4, #14]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   1ac3e:	2301      	movs	r3, #1
   1ac40:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   1ac42:	2300      	movs	r3, #0
   1ac44:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1ac46:	6023      	str	r3, [r4, #0]
	net_buf_reset(buf);
   1ac48:	4620      	mov	r0, r4
   1ac4a:	f7ff ffc3 	bl	1abd4 <net_buf_reset>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1ac4e:	4620      	mov	r0, r4
   1ac50:	bd70      	pop	{r4, r5, r6, pc}
   1ac52:	f386 8811 	msr	BASEPRI, r6
	buf = k_lifo_get(&pool->free, timeout);
   1ac56:	f00e f80d 	bl	28c74 <k_queue_get>
	if (!buf) {
   1ac5a:	4604      	mov	r4, r0
   1ac5c:	2800      	cmp	r0, #0
   1ac5e:	d1ee      	bne.n	1ac3e <net_buf_alloc+0x5e>
   1ac60:	e7f5      	b.n	1ac4e <net_buf_alloc+0x6e>

0001ac62 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1ac62:	b570      	push	{r4, r5, r6, lr}
   1ac64:	4605      	mov	r5, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   1ac66:	f00e f805 	bl	28c74 <k_queue_get>
	if (!buf) {
   1ac6a:	4606      	mov	r6, r0
   1ac6c:	b188      	cbz	r0, 1ac92 <net_buf_get+0x30>
   1ac6e:	4604      	mov	r4, r0
   1ac70:	e009      	b.n	1ac86 <net_buf_get+0x24>

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1ac72:	2100      	movs	r1, #0
   1ac74:	4628      	mov	r0, r5
   1ac76:	f00d fffd 	bl	28c74 <k_queue_get>
   1ac7a:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1ac7c:	7963      	ldrb	r3, [r4, #5]
   1ac7e:	f023 0301 	bic.w	r3, r3, #1
   1ac82:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ac84:	4604      	mov	r4, r0
   1ac86:	7963      	ldrb	r3, [r4, #5]
   1ac88:	f013 0f01 	tst.w	r3, #1
   1ac8c:	d1f1      	bne.n	1ac72 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1ac8e:	2300      	movs	r3, #0
   1ac90:	6023      	str	r3, [r4, #0]

	return buf;
}
   1ac92:	4630      	mov	r0, r6
   1ac94:	bd70      	pop	{r4, r5, r6, pc}

0001ac96 <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1ac96:	f100 0310 	add.w	r3, r0, #16
   1ac9a:	4419      	add	r1, r3
   1ac9c:	6081      	str	r1, [r0, #8]
   1ac9e:	4770      	bx	lr

0001aca0 <net_buf_put>:
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1aca0:	b510      	push	{r4, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1aca2:	460a      	mov	r2, r1
   1aca4:	e004      	b.n	1acb0 <net_buf_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1aca6:	7953      	ldrb	r3, [r2, #5]
   1aca8:	f043 0301 	orr.w	r3, r3, #1
   1acac:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1acae:	4622      	mov	r2, r4
   1acb0:	6814      	ldr	r4, [r2, #0]
   1acb2:	2c00      	cmp	r4, #0
   1acb4:	d1f7      	bne.n	1aca6 <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   1acb6:	f00d ffc1 	bl	28c3c <k_queue_append_list>
   1acba:	bd10      	pop	{r4, pc}

0001acbc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1acbc:	b538      	push	{r3, r4, r5, lr}
   1acbe:	4604      	mov	r4, r0
	NET_BUF_ASSERT(buf);

	while (buf) {
   1acc0:	e006      	b.n	1acd0 <net_buf_unref+0x14>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1acc2:	79a0      	ldrb	r0, [r4, #6]
   1acc4:	f7ff ff80 	bl	1abc8 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1acc8:	4621      	mov	r1, r4
   1acca:	f00d ffb1 	bl	28c30 <k_queue_prepend>
{
   1acce:	462c      	mov	r4, r5
	while (buf) {
   1acd0:	b17c      	cbz	r4, 1acf2 <net_buf_unref+0x36>
		struct net_buf *frags = buf->frags;
   1acd2:	6825      	ldr	r5, [r4, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   1acd4:	7923      	ldrb	r3, [r4, #4]
   1acd6:	3b01      	subs	r3, #1
   1acd8:	b2db      	uxtb	r3, r3
   1acda:	7123      	strb	r3, [r4, #4]
   1acdc:	b94b      	cbnz	r3, 1acf2 <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;
   1acde:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1ace0:	79a0      	ldrb	r0, [r4, #6]
   1ace2:	f7ff ff71 	bl	1abc8 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1ace6:	6983      	ldr	r3, [r0, #24]
   1ace8:	2b00      	cmp	r3, #0
   1acea:	d0ea      	beq.n	1acc2 <net_buf_unref+0x6>
			pool->destroy(buf);
   1acec:	4620      	mov	r0, r4
   1acee:	4798      	blx	r3
   1acf0:	e7ed      	b.n	1acce <net_buf_unref+0x12>
   1acf2:	bd38      	pop	{r3, r4, r5, pc}

0001acf4 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1acf4:	7903      	ldrb	r3, [r0, #4]
   1acf6:	3301      	adds	r3, #1
   1acf8:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1acfa:	4770      	bx	lr

0001acfc <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   1acfc:	e000      	b.n	1ad00 <net_buf_frag_last+0x4>
		buf = buf->frags;
   1acfe:	4618      	mov	r0, r3
	while (buf->frags) {
   1ad00:	6803      	ldr	r3, [r0, #0]
   1ad02:	2b00      	cmp	r3, #0
   1ad04:	d1fb      	bne.n	1acfe <net_buf_frag_last+0x2>
	}

	return buf;
}
   1ad06:	4770      	bx	lr

0001ad08 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1ad08:	b570      	push	{r4, r5, r6, lr}
   1ad0a:	4604      	mov	r4, r0
   1ad0c:	460d      	mov	r5, r1
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   1ad0e:	6806      	ldr	r6, [r0, #0]
   1ad10:	b11e      	cbz	r6, 1ad1a <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1ad12:	4608      	mov	r0, r1
   1ad14:	f7ff fff2 	bl	1acfc <net_buf_frag_last>
   1ad18:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1ad1a:	6025      	str	r5, [r4, #0]
   1ad1c:	bd70      	pop	{r4, r5, r6, pc}

0001ad1e <net_buf_frag_add>:
}

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1ad1e:	b538      	push	{r3, r4, r5, lr}
   1ad20:	460d      	mov	r5, r1
	NET_BUF_ASSERT(frag);

	if (!head) {
   1ad22:	b138      	cbz	r0, 1ad34 <net_buf_frag_add+0x16>
   1ad24:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1ad26:	f7ff ffe9 	bl	1acfc <net_buf_frag_last>
   1ad2a:	4629      	mov	r1, r5
   1ad2c:	f7ff ffec 	bl	1ad08 <net_buf_frag_insert>

	return head;
   1ad30:	4620      	mov	r0, r4
}
   1ad32:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   1ad34:	4608      	mov	r0, r1
   1ad36:	f7ff ffdd 	bl	1acf4 <net_buf_ref>
   1ad3a:	bd38      	pop	{r3, r4, r5, pc}

0001ad3c <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1ad3c:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   1ad3e:	b108      	cbz	r0, 1ad44 <net_buf_frag_del+0x8>
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   1ad40:	680a      	ldr	r2, [r1, #0]
   1ad42:	6002      	str	r2, [r0, #0]
	}

	next_frag = frag->frags;
   1ad44:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1ad46:	2300      	movs	r3, #0
   1ad48:	600b      	str	r3, [r1, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1ad4a:	4608      	mov	r0, r1
   1ad4c:	f7ff ffb6 	bl	1acbc <net_buf_unref>
#endif

	return next_frag;
}
   1ad50:	4620      	mov	r0, r4
   1ad52:	bd10      	pop	{r4, pc}

0001ad54 <net_buf_simple_add>:
	return buf->data + buf->len;
   1ad54:	6802      	ldr	r2, [r0, #0]
   1ad56:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1ad58:	4419      	add	r1, r3
   1ad5a:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1ad5c:	18d0      	adds	r0, r2, r3
   1ad5e:	4770      	bx	lr

0001ad60 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1ad60:	b538      	push	{r3, r4, r5, lr}
   1ad62:	460d      	mov	r5, r1
   1ad64:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1ad66:	4611      	mov	r1, r2
   1ad68:	f7ff fff4 	bl	1ad54 <net_buf_simple_add>
   1ad6c:	4622      	mov	r2, r4
   1ad6e:	4629      	mov	r1, r5
   1ad70:	f7e5 faa6 	bl	2c0 <memcpy>
}
   1ad74:	bd38      	pop	{r3, r4, r5, pc}

0001ad76 <net_buf_simple_add_u8>:

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1ad76:	b510      	push	{r4, lr}
   1ad78:	460c      	mov	r4, r1
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   1ad7a:	2101      	movs	r1, #1
   1ad7c:	f7ff ffea 	bl	1ad54 <net_buf_simple_add>
	*u8 = val;
   1ad80:	7004      	strb	r4, [r0, #0]

	return u8;
}
   1ad82:	bd10      	pop	{r4, pc}

0001ad84 <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1ad84:	b510      	push	{r4, lr}
   1ad86:	b082      	sub	sp, #8
   1ad88:	ac02      	add	r4, sp, #8
   1ad8a:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1ad8e:	2102      	movs	r1, #2
   1ad90:	f7ff ffe0 	bl	1ad54 <net_buf_simple_add>
   1ad94:	2202      	movs	r2, #2
   1ad96:	4621      	mov	r1, r4
   1ad98:	f7e5 fa92 	bl	2c0 <memcpy>
}
   1ad9c:	b002      	add	sp, #8
   1ad9e:	bd10      	pop	{r4, pc}

0001ada0 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   1ada0:	b510      	push	{r4, lr}
   1ada2:	b082      	sub	sp, #8
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   1ada4:	0a0b      	lsrs	r3, r1, #8
   1ada6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1adaa:	ac02      	add	r4, sp, #8
   1adac:	f824 1d02 	strh.w	r1, [r4, #-2]!
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1adb0:	2102      	movs	r1, #2
   1adb2:	f7ff ffcf 	bl	1ad54 <net_buf_simple_add>
   1adb6:	2202      	movs	r2, #2
   1adb8:	4621      	mov	r1, r4
   1adba:	f7e5 fa81 	bl	2c0 <memcpy>
}
   1adbe:	b002      	add	sp, #8
   1adc0:	bd10      	pop	{r4, pc}

0001adc2 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1adc2:	6803      	ldr	r3, [r0, #0]
   1adc4:	1a5b      	subs	r3, r3, r1
   1adc6:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1adc8:	8882      	ldrh	r2, [r0, #4]
   1adca:	4411      	add	r1, r2
   1adcc:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1adce:	4618      	mov	r0, r3
   1add0:	4770      	bx	lr

0001add2 <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   1add2:	b510      	push	{r4, lr}
   1add4:	b082      	sub	sp, #8
   1add6:	ac02      	add	r4, sp, #8
   1add8:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   1addc:	2102      	movs	r1, #2
   1adde:	f7ff fff0 	bl	1adc2 <net_buf_simple_push>
   1ade2:	2202      	movs	r2, #2
   1ade4:	4621      	mov	r1, r4
   1ade6:	f7e5 fa6b 	bl	2c0 <memcpy>
}
   1adea:	b002      	add	sp, #8
   1adec:	bd10      	pop	{r4, pc}

0001adee <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1adee:	8883      	ldrh	r3, [r0, #4]
   1adf0:	1a5b      	subs	r3, r3, r1
   1adf2:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1adf4:	6803      	ldr	r3, [r0, #0]
   1adf6:	4419      	add	r1, r3
   1adf8:	6001      	str	r1, [r0, #0]
}
   1adfa:	4608      	mov	r0, r1
   1adfc:	4770      	bx	lr

0001adfe <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1adfe:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
   1ae00:	6803      	ldr	r3, [r0, #0]
   1ae02:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1ae04:	2101      	movs	r1, #1
   1ae06:	f7ff fff2 	bl	1adee <net_buf_simple_pull>

	return val;
}
   1ae0a:	4620      	mov	r0, r4
   1ae0c:	bd10      	pop	{r4, pc}

0001ae0e <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1ae0e:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1ae10:	6803      	ldr	r3, [r0, #0]
   1ae12:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1ae14:	2102      	movs	r1, #2
   1ae16:	f7ff ffea 	bl	1adee <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1ae1a:	4620      	mov	r0, r4
   1ae1c:	bd10      	pop	{r4, pc}

0001ae1e <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1ae1e:	f850 3b08 	ldr.w	r3, [r0], #8
}
   1ae22:	1a18      	subs	r0, r3, r0
   1ae24:	4770      	bx	lr

0001ae26 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   1ae26:	b538      	push	{r3, r4, r5, lr}
   1ae28:	4605      	mov	r5, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1ae2a:	88c4      	ldrh	r4, [r0, #6]
   1ae2c:	f7ff fff7 	bl	1ae1e <net_buf_simple_headroom>
   1ae30:	1a20      	subs	r0, r4, r0
   1ae32:	88ab      	ldrh	r3, [r5, #4]
}
   1ae34:	1ac0      	subs	r0, r0, r3
   1ae36:	bd38      	pop	{r3, r4, r5, pc}

0001ae38 <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   1ae38:	b510      	push	{r4, lr}
   1ae3a:	4604      	mov	r4, r0
	if (!pkt->frags) {
   1ae3c:	6883      	ldr	r3, [r0, #8]
   1ae3e:	b18b      	cbz	r3, 1ae64 <processing_data+0x2c>
	if (!is_loopback && !locally_routed) {
   1ae40:	b1b1      	cbz	r1, 1ae70 <processing_data+0x38>
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
   1ae42:	68a3      	ldr	r3, [r4, #8]
   1ae44:	689b      	ldr	r3, [r3, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1ae46:	781b      	ldrb	r3, [r3, #0]
   1ae48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1ae4c:	2b60      	cmp	r3, #96	; 0x60
   1ae4e:	d01d      	beq.n	1ae8c <processing_data+0x54>
	net_stats.processing_error++;
}

static inline void net_stats_update_ip_errors_protoerr(void)
{
	net_stats.ip_errors.protoerr++;
   1ae50:	4b18      	ldr	r3, [pc, #96]	; (1aeb4 <processing_data+0x7c>)
   1ae52:	6a1a      	ldr	r2, [r3, #32]
   1ae54:	3201      	adds	r2, #1
   1ae56:	621a      	str	r2, [r3, #32]
}

static inline void net_stats_update_ip_errors_vhlerr(void)
{
	net_stats.ip_errors.vhlerr++;
   1ae58:	68da      	ldr	r2, [r3, #12]
   1ae5a:	3201      	adds	r2, #1
   1ae5c:	60da      	str	r2, [r3, #12]
	return NET_DROP;
   1ae5e:	2002      	movs	r0, #2
	switch (process_data(pkt, is_loopback)) {
   1ae60:	bb18      	cbnz	r0, 1aeaa <processing_data+0x72>
   1ae62:	bd10      	pop	{r4, pc}
	net_stats.processing_error++;
   1ae64:	4a13      	ldr	r2, [pc, #76]	; (1aeb4 <processing_data+0x7c>)
   1ae66:	6813      	ldr	r3, [r2, #0]
   1ae68:	3301      	adds	r3, #1
   1ae6a:	6013      	str	r3, [r2, #0]
		return NET_DROP;
   1ae6c:	2002      	movs	r0, #2
   1ae6e:	e7f7      	b.n	1ae60 <processing_data+0x28>
	return pkt->iface;
   1ae70:	6940      	ldr	r0, [r0, #20]
 * @return verdict about the packet
 */
static inline enum net_verdict net_if_recv_data(struct net_if *iface,
						struct net_pkt *pkt)
{
	return iface->l2->recv(iface, pkt);
   1ae72:	6843      	ldr	r3, [r0, #4]
   1ae74:	681b      	ldr	r3, [r3, #0]
   1ae76:	4621      	mov	r1, r4
   1ae78:	4798      	blx	r3
		if (ret != NET_CONTINUE) {
   1ae7a:	2801      	cmp	r0, #1
   1ae7c:	d0e1      	beq.n	1ae42 <processing_data+0xa>
			if (ret == NET_DROP) {
   1ae7e:	2802      	cmp	r0, #2
   1ae80:	d1ee      	bne.n	1ae60 <processing_data+0x28>
   1ae82:	4a0c      	ldr	r2, [pc, #48]	; (1aeb4 <processing_data+0x7c>)
   1ae84:	6813      	ldr	r3, [r2, #0]
   1ae86:	3301      	adds	r3, #1
   1ae88:	6013      	str	r3, [r2, #0]
   1ae8a:	e7e9      	b.n	1ae60 <processing_data+0x28>
	net_stats.ipv6.sent++;
}

static inline void net_stats_update_ipv6_recv(void)
{
	net_stats.ipv6.recv++;
   1ae8c:	4a09      	ldr	r2, [pc, #36]	; (1aeb4 <processing_data+0x7c>)
   1ae8e:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1ae90:	3301      	adds	r3, #1
   1ae92:	6253      	str	r3, [r2, #36]	; 0x24
	pkt->family = family;
   1ae94:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1ae98:	220a      	movs	r2, #10
   1ae9a:	f362 03c6 	bfi	r3, r2, #3, #4
   1ae9e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		return net_ipv6_process_pkt(pkt);
   1aea2:	4620      	mov	r0, r4
   1aea4:	f006 fd1e 	bl	218e4 <net_ipv6_process_pkt>
   1aea8:	e7da      	b.n	1ae60 <processing_data+0x28>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   1aeaa:	4620      	mov	r0, r4
   1aeac:	f002 fc75 	bl	1d79a <net_pkt_unref>
		break;
	}
}
   1aeb0:	e7d7      	b.n	1ae62 <processing_data+0x2a>
   1aeb2:	bf00      	nop
   1aeb4:	20003038 	.word	0x20003038

0001aeb8 <net_rx_thread>:

static void net_rx_thread(void)
{
   1aeb8:	b510      	push	{r4, lr}
	 * can only be started when RX side is ready to receive packets.
	 * We synchronize the startup of the device so that both RX and TX
	 * are only started fully when both are ready to receive or send
	 * data.
	 */
	net_if_init(&startup_sync);
   1aeba:	4c16      	ldr	r4, [pc, #88]	; (1af14 <net_rx_thread+0x5c>)
   1aebc:	4620      	mov	r0, r4
   1aebe:	f001 faaf 	bl	1c420 <net_if_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1aec2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1aec6:	4620      	mov	r0, r4
   1aec8:	f00e fa56 	bl	29378 <_impl_k_sem_take>

	k_sem_take(&startup_sync, K_FOREVER);

	/* This will take the interface up and start everything. */
	net_if_post_init();
   1aecc:	f001 faee 	bl	1c4ac <net_if_post_init>
   1aed0:	e010      	b.n	1aef4 <net_rx_thread+0x3c>
	return net_buf_frags_len(pkt->frags);
   1aed2:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1aed4:	2200      	movs	r2, #0
   1aed6:	e002      	b.n	1aede <net_rx_thread+0x26>
		bytes += buf->len;
   1aed8:	8999      	ldrh	r1, [r3, #12]
   1aeda:	440a      	add	r2, r1
		buf = buf->frags;
   1aedc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1aede:	2b00      	cmp	r3, #0
   1aee0:	d1fa      	bne.n	1aed8 <net_rx_thread+0x20>
	net_stats.bytes.received += bytes;
   1aee2:	490d      	ldr	r1, [pc, #52]	; (1af18 <net_rx_thread+0x60>)
   1aee4:	688b      	ldr	r3, [r1, #8]
   1aee6:	441a      	add	r2, r3
   1aee8:	608a      	str	r2, [r1, #8]
#endif
		NET_DBG("Received pkt %p len %zu", pkt, pkt_len);

		net_stats_update_bytes_recv(pkt_len);

		processing_data(pkt, false);
   1aeea:	2100      	movs	r1, #0
   1aeec:	f7ff ffa4 	bl	1ae38 <processing_data>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1aef0:	f00e f8d6 	bl	290a0 <_impl_k_yield>
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1aef4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1aef8:	4808      	ldr	r0, [pc, #32]	; (1af1c <net_rx_thread+0x64>)
   1aefa:	f00d febb 	bl	28c74 <k_queue_get>
	for (i = 0; i < size; i++) {
   1aefe:	2300      	movs	r3, #0
   1af00:	f240 52db 	movw	r2, #1499	; 0x5db
   1af04:	4293      	cmp	r3, r2
   1af06:	d8e4      	bhi.n	1aed2 <net_rx_thread+0x1a>
		if ((unsigned char)stack[i] == 0xaa) {
   1af08:	4a05      	ldr	r2, [pc, #20]	; (1af20 <net_rx_thread+0x68>)
   1af0a:	5cd2      	ldrb	r2, [r2, r3]
   1af0c:	2aaa      	cmp	r2, #170	; 0xaa
   1af0e:	d1e0      	bne.n	1aed2 <net_rx_thread+0x1a>
	for (i = 0; i < size; i++) {
   1af10:	3301      	adds	r3, #1
   1af12:	e7f5      	b.n	1af00 <net_rx_thread+0x48>
   1af14:	2000d680 	.word	0x2000d680
   1af18:	20003038 	.word	0x20003038
   1af1c:	200020bc 	.word	0x200020bc
   1af20:	20004d40 	.word	0x20004d40

0001af24 <init_rx_queue>:
		k_yield();
	}
}

static void init_rx_queue(void)
{
   1af24:	b500      	push	{lr}
   1af26:	b087      	sub	sp, #28
	k_fifo_init(&rx_queue);
   1af28:	480b      	ldr	r0, [pc, #44]	; (1af58 <init_rx_queue+0x34>)
   1af2a:	f00d fe48 	bl	28bbe <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1af2e:	2300      	movs	r3, #0
   1af30:	9305      	str	r3, [sp, #20]
   1af32:	2201      	movs	r2, #1
   1af34:	9204      	str	r2, [sp, #16]
   1af36:	f06f 0207 	mvn.w	r2, #7
   1af3a:	9203      	str	r2, [sp, #12]
   1af3c:	9302      	str	r3, [sp, #8]
   1af3e:	9301      	str	r3, [sp, #4]
   1af40:	9300      	str	r3, [sp, #0]
   1af42:	4b06      	ldr	r3, [pc, #24]	; (1af5c <init_rx_queue+0x38>)
   1af44:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1af48:	4905      	ldr	r1, [pc, #20]	; (1af60 <init_rx_queue+0x3c>)
   1af4a:	4806      	ldr	r0, [pc, #24]	; (1af64 <init_rx_queue+0x40>)
   1af4c:	f00e fc80 	bl	29850 <_impl_k_thread_create>
	rx_tid = k_thread_create(&rx_thread_data, rx_stack,
				 K_THREAD_STACK_SIZEOF(rx_stack),
				 (k_thread_entry_t)net_rx_thread,
				 NULL, NULL, NULL, K_PRIO_COOP(8),
				 K_ESSENTIAL, K_NO_WAIT);
}
   1af50:	b007      	add	sp, #28
   1af52:	f85d fb04 	ldr.w	pc, [sp], #4
   1af56:	bf00      	nop
   1af58:	200020bc 	.word	0x200020bc
   1af5c:	0001aeb9 	.word	0x0001aeb9
   1af60:	20004d40 	.word	0x20004d40
   1af64:	200020cc 	.word	0x200020cc

0001af68 <net_init>:

	NET_DBG("Network L2 init done");
}

static int net_init(struct device *unused)
{
   1af68:	b508      	push	{r3, lr}

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1af6a:	f002 ffb2 	bl	1ded2 <net_pkt_init>

	net_context_init();
   1af6e:	f002 faf1 	bl	1d554 <net_context_init>
	net_icmpv6_init();
   1af72:	f004 fa0b 	bl	1f38c <net_icmpv6_init>
	net_ipv6_init();
   1af76:	f006 fe89 	bl	21c8c <net_ipv6_init>
	net_conn_init();
   1af7a:	f00a fb55 	bl	25628 <net_conn_init>
	net_udp_init();
   1af7e:	f008 fa6b 	bl	23458 <net_udp_init>
	net_tcp_init();
   1af82:	f008 fc4f 	bl	23824 <net_tcp_init>
	net_route_init();
   1af86:	f007 ffca 	bl	22f1e <net_route_init>

	l2_init();
	l3_init();

	net_mgmt_event_init();
   1af8a:	f008 f8b3 	bl	230f4 <net_mgmt_event_init>

	init_rx_queue();
   1af8e:	f7ff ffc9 	bl	1af24 <init_rx_queue>
		return status;
	}
#endif

	return status;
}
   1af92:	2000      	movs	r0, #0
   1af94:	bd08      	pop	{r3, pc}
	...

0001af98 <net_send_data>:
	if (!pkt || !pkt->frags) {
   1af98:	2800      	cmp	r0, #0
   1af9a:	f000 80bc 	beq.w	1b116 <net_send_data+0x17e>
{
   1af9e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1afa0:	b091      	sub	sp, #68	; 0x44
   1afa2:	4604      	mov	r4, r0
	if (!pkt || !pkt->frags) {
   1afa4:	6883      	ldr	r3, [r0, #8]
   1afa6:	2b00      	cmp	r3, #0
   1afa8:	f000 80b8 	beq.w	1b11c <net_send_data+0x184>
	return pkt->iface;
   1afac:	6943      	ldr	r3, [r0, #20]
	if (!net_pkt_iface(pkt)) {
   1afae:	2b00      	cmp	r3, #0
   1afb0:	f000 80b7 	beq.w	1b122 <net_send_data+0x18a>
	return pkt->family;
   1afb4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1afb8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1afbc:	2b0a      	cmp	r3, #10
   1afbe:	d103      	bne.n	1afc8 <net_send_data+0x30>
	net_stats.ipv6.sent++;
   1afc0:	4a59      	ldr	r2, [pc, #356]	; (1b128 <net_send_data+0x190>)
   1afc2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1afc4:	3301      	adds	r3, #1
   1afc6:	6293      	str	r3, [r2, #40]	; 0x28
   1afc8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1afcc:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1afd0:	2b0a      	cmp	r3, #10
   1afd2:	d00b      	beq.n	1afec <net_send_data+0x54>
	return 0;
   1afd4:	2000      	movs	r0, #0
	if (status < 0) {
   1afd6:	2800      	cmp	r0, #0
   1afd8:	db06      	blt.n	1afe8 <net_send_data+0x50>
	} else if (status > 0) {
   1afda:	f340 8091 	ble.w	1b100 <net_send_data+0x168>
		processing_data(pkt, true);
   1afde:	2101      	movs	r1, #1
   1afe0:	4620      	mov	r0, r4
   1afe2:	f7ff ff29 	bl	1ae38 <processing_data>
		return 0;
   1afe6:	2000      	movs	r0, #0
}
   1afe8:	b011      	add	sp, #68	; 0x44
   1afea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return pkt->frags->data;
   1afec:	68a3      	ldr	r3, [r4, #8]
   1afee:	689d      	ldr	r5, [r3, #8]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1aff0:	3518      	adds	r5, #24
   1aff2:	f004 fd93 	bl	1fb1c <net_ipv6_unspecified_address>
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv6_addr_cmp(const struct in6_addr *addr1,
				     const struct in6_addr *addr2)
{
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1aff6:	2210      	movs	r2, #16
   1aff8:	4601      	mov	r1, r0
   1affa:	4628      	mov	r0, r5
   1affc:	f00f fbc8 	bl	2a790 <memcmp>
   1b000:	2800      	cmp	r0, #0
   1b002:	d07a      	beq.n	1b0fa <net_send_data+0x162>
   1b004:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1b006:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b008:	f850 3f18 	ldr.w	r3, [r0, #24]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b00c:	b9ab      	cbnz	r3, 1b03a <net_send_data+0xa2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b00e:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b010:	2b00      	cmp	r3, #0
   1b012:	d141      	bne.n	1b098 <net_send_data+0x100>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b014:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b016:	2b00      	cmp	r3, #0
   1b018:	d140      	bne.n	1b09c <net_send_data+0x104>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1b01a:	68c2      	ldr	r2, [r0, #12]
   1b01c:	0a13      	lsrs	r3, r2, #8
   1b01e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1b022:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1b026:	0211      	lsls	r1, r2, #8
   1b028:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1b02c:	430b      	orrs	r3, r1
   1b02e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b032:	2b01      	cmp	r3, #1
   1b034:	d034      	beq.n	1b0a0 <net_send_data+0x108>
   1b036:	2300      	movs	r3, #0
   1b038:	e000      	b.n	1b03c <net_send_data+0xa4>
   1b03a:	2300      	movs	r3, #0
   1b03c:	b393      	cbz	r3, 1b0a4 <net_send_data+0x10c>
   1b03e:	68a3      	ldr	r3, [r4, #8]
   1b040:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1b044:	ae0c      	add	r6, sp, #48	; 0x30
   1b046:	4675      	mov	r5, lr
   1b048:	f855 0f08 	ldr.w	r0, [r5, #8]!
   1b04c:	6869      	ldr	r1, [r5, #4]
   1b04e:	68aa      	ldr	r2, [r5, #8]
   1b050:	68eb      	ldr	r3, [r5, #12]
   1b052:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1b054:	ab10      	add	r3, sp, #64	; 0x40
   1b056:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1b05a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1b05e:	af08      	add	r7, sp, #32
   1b060:	4673      	mov	r3, lr
   1b062:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1b066:	6859      	ldr	r1, [r3, #4]
   1b068:	689a      	ldr	r2, [r3, #8]
   1b06a:	68db      	ldr	r3, [r3, #12]
   1b06c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1b06e:	af08      	add	r7, sp, #32
   1b070:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1b072:	f8ce 0008 	str.w	r0, [lr, #8]
   1b076:	6069      	str	r1, [r5, #4]
   1b078:	60aa      	str	r2, [r5, #8]
   1b07a:	60eb      	str	r3, [r5, #12]
   1b07c:	68a3      	ldr	r3, [r4, #8]
   1b07e:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1b080:	ad04      	add	r5, sp, #16
   1b082:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   1b086:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1b08a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b08c:	61b8      	str	r0, [r7, #24]
   1b08e:	61f9      	str	r1, [r7, #28]
   1b090:	623a      	str	r2, [r7, #32]
   1b092:	627b      	str	r3, [r7, #36]	; 0x24
			return 1;
   1b094:	2001      	movs	r0, #1
   1b096:	e79e      	b.n	1afd6 <net_send_data+0x3e>
   1b098:	2300      	movs	r3, #0
   1b09a:	e7cf      	b.n	1b03c <net_send_data+0xa4>
   1b09c:	2300      	movs	r3, #0
   1b09e:	e7cd      	b.n	1b03c <net_send_data+0xa4>
   1b0a0:	2301      	movs	r3, #1
   1b0a2:	e7cb      	b.n	1b03c <net_send_data+0xa4>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1b0a4:	2100      	movs	r1, #0
   1b0a6:	f000 f9c5 	bl	1b434 <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1b0aa:	2800      	cmp	r0, #0
   1b0ac:	d1c7      	bne.n	1b03e <net_send_data+0xa6>
   1b0ae:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1b0b0:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b0b2:	f853 2f08 	ldr.w	r2, [r3, #8]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b0b6:	b99a      	cbnz	r2, 1b0e0 <net_send_data+0x148>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b0b8:	685a      	ldr	r2, [r3, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b0ba:	b9aa      	cbnz	r2, 1b0e8 <net_send_data+0x150>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b0bc:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b0be:	b9aa      	cbnz	r2, 1b0ec <net_send_data+0x154>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1b0c0:	68da      	ldr	r2, [r3, #12]
   1b0c2:	0a13      	lsrs	r3, r2, #8
   1b0c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1b0c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1b0cc:	0211      	lsls	r1, r2, #8
   1b0ce:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1b0d2:	430b      	orrs	r3, r1
   1b0d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b0d8:	2b01      	cmp	r3, #1
   1b0da:	d009      	beq.n	1b0f0 <net_send_data+0x158>
   1b0dc:	2300      	movs	r3, #0
   1b0de:	e000      	b.n	1b0e2 <net_send_data+0x14a>
   1b0e0:	2300      	movs	r3, #0
   1b0e2:	b93b      	cbnz	r3, 1b0f4 <net_send_data+0x15c>
	return 0;
   1b0e4:	2000      	movs	r0, #0
   1b0e6:	e776      	b.n	1afd6 <net_send_data+0x3e>
   1b0e8:	2300      	movs	r3, #0
   1b0ea:	e7fa      	b.n	1b0e2 <net_send_data+0x14a>
   1b0ec:	2300      	movs	r3, #0
   1b0ee:	e7f8      	b.n	1b0e2 <net_send_data+0x14a>
   1b0f0:	2301      	movs	r3, #1
   1b0f2:	e7f6      	b.n	1b0e2 <net_send_data+0x14a>
			return -EADDRNOTAVAIL;
   1b0f4:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1b0f8:	e76d      	b.n	1afd6 <net_send_data+0x3e>
			return -EADDRNOTAVAIL;
   1b0fa:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1b0fe:	e76a      	b.n	1afd6 <net_send_data+0x3e>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1b100:	4621      	mov	r1, r4
   1b102:	6960      	ldr	r0, [r4, #20]
   1b104:	f000 ffe0 	bl	1c0c8 <net_if_send_data>
   1b108:	2802      	cmp	r0, #2
   1b10a:	d001      	beq.n	1b110 <net_send_data+0x178>
	return 0;
   1b10c:	2000      	movs	r0, #0
   1b10e:	e76b      	b.n	1afe8 <net_send_data+0x50>
		return -EIO;
   1b110:	f06f 0004 	mvn.w	r0, #4
   1b114:	e768      	b.n	1afe8 <net_send_data+0x50>
		return -ENODATA;
   1b116:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1b11a:	4770      	bx	lr
   1b11c:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1b120:	e762      	b.n	1afe8 <net_send_data+0x50>
		return -EINVAL;
   1b122:	f06f 0015 	mvn.w	r0, #21
   1b126:	e75f      	b.n	1afe8 <net_send_data+0x50>
   1b128:	20003038 	.word	0x20003038

0001b12c <net_recv_data>:
{
   1b12c:	b508      	push	{r3, lr}
	if (!pkt->frags) {
   1b12e:	688b      	ldr	r3, [r1, #8]
   1b130:	b19b      	cbz	r3, 1b15a <net_recv_data+0x2e>
   1b132:	f3bf 8f5b 	dmb	ish
   1b136:	68c3      	ldr	r3, [r0, #12]
   1b138:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b13c:	f013 0f01 	tst.w	r3, #1
   1b140:	d00e      	beq.n	1b160 <net_recv_data+0x34>
	pkt->iface = iface;
   1b142:	6148      	str	r0, [r1, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1b144:	7d43      	ldrb	r3, [r0, #21]
   1b146:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1b14a:	7d43      	ldrb	r3, [r0, #21]
   1b14c:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
	k_fifo_put(&rx_queue, pkt);
   1b150:	4805      	ldr	r0, [pc, #20]	; (1b168 <net_recv_data+0x3c>)
   1b152:	f00d fd67 	bl	28c24 <k_queue_append>
	return 0;
   1b156:	2000      	movs	r0, #0
   1b158:	bd08      	pop	{r3, pc}
		return -ENODATA;
   1b15a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1b15e:	bd08      	pop	{r3, pc}
		return -ENETDOWN;
   1b160:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1b164:	bd08      	pop	{r3, pc}
   1b166:	bf00      	nop
   1b168:	200020bc 	.word	0x200020bc

0001b16c <ipv6_addr_expired>:
						  lifetime);

	NET_DBG("IPv6 address %s is deprecated",
		net_sprint_ipv6_addr(&ifaddr->address.in6_addr));

	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1b16c:	2302      	movs	r3, #2
   1b16e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
   1b172:	4770      	bx	lr

0001b174 <prefix_lf_timeout>:
		CONTAINER_OF(work, struct net_if_ipv6_prefix, lifetime);

	NET_DBG("Prefix %s/%d expired",
		net_sprint_ipv6_addr(&prefix->prefix), prefix->len);

	prefix->is_used = false;
   1b174:	2300      	movs	r3, #0
   1b176:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   1b17a:	4770      	bx	lr

0001b17c <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		net_sprint_ipv6_addr(&router->address.in6_addr));

	router->is_used = false;
   1b17c:	2300      	movs	r3, #0
   1b17e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1b182:	4770      	bx	lr

0001b184 <ipv6_addr_find>:
{
   1b184:	b570      	push	{r4, r5, r6, lr}
   1b186:	4605      	mov	r5, r0
   1b188:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b18a:	2400      	movs	r4, #0
   1b18c:	e000      	b.n	1b190 <ipv6_addr_find+0xc>
   1b18e:	3401      	adds	r4, #1
   1b190:	2c02      	cmp	r4, #2
   1b192:	dc19      	bgt.n	1b1c8 <ipv6_addr_find+0x44>
		if (!iface->ipv6.unicast[i].is_used) {
   1b194:	236c      	movs	r3, #108	; 0x6c
   1b196:	fb03 5304 	mla	r3, r3, r4, r5
   1b19a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b19e:	2b00      	cmp	r3, #0
   1b1a0:	d0f5      	beq.n	1b18e <ipv6_addr_find+0xa>
				&iface->ipv6.unicast[i].address.in6_addr)) {
   1b1a2:	216c      	movs	r1, #108	; 0x6c
   1b1a4:	fb01 f104 	mul.w	r1, r1, r4
   1b1a8:	3120      	adds	r1, #32
   1b1aa:	4429      	add	r1, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b1ac:	2210      	movs	r2, #16
   1b1ae:	4411      	add	r1, r2
   1b1b0:	4630      	mov	r0, r6
   1b1b2:	f00f faed 	bl	2a790 <memcmp>
		if (net_ipv6_addr_cmp(addr,
   1b1b6:	2800      	cmp	r0, #0
   1b1b8:	d1e9      	bne.n	1b18e <ipv6_addr_find+0xa>
			return &iface->ipv6.unicast[i];
   1b1ba:	206c      	movs	r0, #108	; 0x6c
   1b1bc:	fb00 f004 	mul.w	r0, r0, r4
   1b1c0:	3020      	adds	r0, #32
   1b1c2:	4428      	add	r0, r5
   1b1c4:	300c      	adds	r0, #12
   1b1c6:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1b1c8:	2000      	movs	r0, #0
}
   1b1ca:	bd70      	pop	{r4, r5, r6, pc}

0001b1cc <ipv6_prefix_find>:
{
   1b1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b1ce:	4605      	mov	r5, r0
   1b1d0:	460e      	mov	r6, r1
   1b1d2:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b1d4:	2400      	movs	r4, #0
   1b1d6:	e000      	b.n	1b1da <ipv6_prefix_find+0xe>
   1b1d8:	3401      	adds	r4, #1
   1b1da:	2c01      	cmp	r4, #1
   1b1dc:	dc21      	bgt.n	1b222 <ipv6_prefix_find+0x56>
		if (!iface->ipv6.unicast[i].is_used) {
   1b1de:	236c      	movs	r3, #108	; 0x6c
   1b1e0:	fb03 5304 	mla	r3, r3, r4, r5
   1b1e4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b1e8:	2b00      	cmp	r3, #0
   1b1ea:	d0f5      	beq.n	1b1d8 <ipv6_prefix_find+0xc>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1b1ec:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1b1f0:	0099      	lsls	r1, r3, #2
   1b1f2:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1b1f6:	4429      	add	r1, r5
   1b1f8:	2210      	movs	r2, #16
   1b1fa:	4411      	add	r1, r2
   1b1fc:	4630      	mov	r0, r6
   1b1fe:	f00f fac7 	bl	2a790 <memcmp>
   1b202:	2800      	cmp	r0, #0
   1b204:	d1e8      	bne.n	1b1d8 <ipv6_prefix_find+0xc>
		    prefix_len == iface->ipv6.prefix[i].len) {
   1b206:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b20a:	0093      	lsls	r3, r2, #2
   1b20c:	461a      	mov	r2, r3
   1b20e:	442b      	add	r3, r5
   1b210:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1b214:	42bb      	cmp	r3, r7
   1b216:	d1df      	bne.n	1b1d8 <ipv6_prefix_find+0xc>
			return &iface->ipv6.prefix[i];
   1b218:	f502 70ec 	add.w	r0, r2, #472	; 0x1d8
   1b21c:	4428      	add	r0, r5
   1b21e:	3010      	adds	r0, #16
   1b220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
   1b222:	2000      	movs	r0, #0
}
   1b224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001b228 <net_if_ipv6_start_dad>:
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1b228:	2300      	movs	r3, #0
   1b22a:	f881 3065 	strb.w	r3, [r1, #101]	; 0x65
   1b22e:	f3bf 8f5b 	dmb	ish
   1b232:	68c3      	ldr	r3, [r0, #12]
   1b234:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
   1b238:	f013 0f01 	tst.w	r3, #1
   1b23c:	d100      	bne.n	1b240 <net_if_ipv6_start_dad+0x18>
   1b23e:	4770      	bx	lr
{
   1b240:	b510      	push	{r4, lr}
   1b242:	460c      	mov	r4, r1
		ifaddr->dad_count = 1;
   1b244:	2301      	movs	r3, #1
   1b246:	f881 3066 	strb.w	r3, [r1, #102]	; 0x66
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   1b24a:	f006 f969 	bl	21520 <net_ipv6_start_dad>
   1b24e:	b100      	cbz	r0, 1b252 <net_if_ipv6_start_dad+0x2a>
   1b250:	bd10      	pop	{r4, pc}
   1b252:	2264      	movs	r2, #100	; 0x64
   1b254:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1b258:	4801      	ldr	r0, [pc, #4]	; (1b260 <net_if_ipv6_start_dad+0x38>)
   1b25a:	f00e fec3 	bl	29fe4 <k_delayed_work_submit_to_queue>
}
   1b25e:	e7f7      	b.n	1b250 <net_if_ipv6_start_dad+0x28>
   1b260:	20003158 	.word	0x20003158

0001b264 <net_if_ipv6_prefix_init>:
{
   1b264:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b266:	b085      	sub	sp, #20
   1b268:	4605      	mov	r5, r0
   1b26a:	460e      	mov	r6, r1
   1b26c:	461f      	mov	r7, r3
	prefix->is_used = true;
   1b26e:	2301      	movs	r3, #1
   1b270:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
	prefix->len = len;
   1b274:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	net_ipaddr_copy(&prefix->prefix, addr);
   1b278:	466c      	mov	r4, sp
   1b27a:	6808      	ldr	r0, [r1, #0]
   1b27c:	6849      	ldr	r1, [r1, #4]
   1b27e:	68b2      	ldr	r2, [r6, #8]
   1b280:	68f3      	ldr	r3, [r6, #12]
   1b282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b284:	466c      	mov	r4, sp
   1b286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1b288:	62a8      	str	r0, [r5, #40]	; 0x28
   1b28a:	62e9      	str	r1, [r5, #44]	; 0x2c
   1b28c:	632a      	str	r2, [r5, #48]	; 0x30
   1b28e:	636b      	str	r3, [r5, #52]	; 0x34
	k_delayed_work_init(&prefix->lifetime, prefix_lf_timeout);
   1b290:	4907      	ldr	r1, [pc, #28]	; (1b2b0 <net_if_ipv6_prefix_init+0x4c>)
   1b292:	4628      	mov	r0, r5
   1b294:	f00e fe2e 	bl	29ef4 <k_delayed_work_init>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   1b298:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1b29c:	d004      	beq.n	1b2a8 <net_if_ipv6_prefix_init+0x44>
		prefix->is_infinite = false;
   1b29e:	2300      	movs	r3, #0
   1b2a0:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
}
   1b2a4:	b005      	add	sp, #20
   1b2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		prefix->is_infinite = true;
   1b2a8:	2301      	movs	r3, #1
   1b2aa:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   1b2ae:	e7f9      	b.n	1b2a4 <net_if_ipv6_prefix_init+0x40>
   1b2b0:	0001b175 	.word	0x0001b175

0001b2b4 <join_mcast_allnodes>:
{
   1b2b4:	b500      	push	{lr}
   1b2b6:	b085      	sub	sp, #20
					u16_t addr0, u16_t addr1,
					u16_t addr2, u16_t addr3,
					u16_t addr4, u16_t addr5,
					u16_t addr6, u16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1b2b8:	f240 23ff 	movw	r3, #767	; 0x2ff
   1b2bc:	f8ad 3000 	strh.w	r3, [sp]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1b2c0:	2300      	movs	r3, #0
   1b2c2:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1b2c6:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1b2ca:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1b2ce:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1b2d2:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1b2d6:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1b2da:	f44f 7380 	mov.w	r3, #256	; 0x100
   1b2de:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1b2e2:	4669      	mov	r1, sp
   1b2e4:	f006 faa4 	bl	21830 <net_ipv6_mld_join>
}
   1b2e8:	b005      	add	sp, #20
   1b2ea:	f85d fb04 	ldr.w	pc, [sp], #4

0001b2ee <join_mcast_solicit_node>:
{
   1b2ee:	b500      	push	{lr}
   1b2f0:	b085      	sub	sp, #20
	dst->s6_addr[0]   = 0xFF;
   1b2f2:	22ff      	movs	r2, #255	; 0xff
   1b2f4:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[1]   = 0x02;
   1b2f8:	2302      	movs	r3, #2
   1b2fa:	f88d 3001 	strb.w	r3, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1b2fe:	2300      	movs	r3, #0
   1b300:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1b304:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1b308:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1b30c:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0;
   1b310:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1b314:	2301      	movs	r3, #1
   1b316:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1b31a:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1b31e:	7b4b      	ldrb	r3, [r1, #13]
   1b320:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1b324:	89cb      	ldrh	r3, [r1, #14]
   1b326:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1b32a:	4669      	mov	r1, sp
   1b32c:	f006 fa80 	bl	21830 <net_ipv6_mld_join>
}
   1b330:	b005      	add	sp, #20
   1b332:	f85d fb04 	ldr.w	pc, [sp], #4

0001b336 <leave_mcast_all>:
{
   1b336:	b538      	push	{r3, r4, r5, lr}
   1b338:	4605      	mov	r5, r0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b33a:	2400      	movs	r4, #0
   1b33c:	e000      	b.n	1b340 <leave_mcast_all+0xa>
   1b33e:	3401      	adds	r4, #1
   1b340:	2c04      	cmp	r4, #4
   1b342:	dc1a      	bgt.n	1b37a <leave_mcast_all+0x44>
		if (!iface->ipv6.mcast[i].is_used ||
   1b344:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b348:	00d3      	lsls	r3, r2, #3
   1b34a:	442b      	add	r3, r5
   1b34c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b350:	f013 0f01 	tst.w	r3, #1
   1b354:	d0f3      	beq.n	1b33e <leave_mcast_all+0x8>
		    !iface->ipv6.mcast[i].is_joined) {
   1b356:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b35a:	00d3      	lsls	r3, r2, #3
   1b35c:	461a      	mov	r2, r3
   1b35e:	442b      	add	r3, r5
   1b360:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1b364:	f013 0f02 	tst.w	r3, #2
   1b368:	d0e9      	beq.n	1b33e <leave_mcast_all+0x8>
				   &iface->ipv6.mcast[i].address.in6_addr);
   1b36a:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1b36e:	4429      	add	r1, r5
		net_ipv6_mld_leave(iface,
   1b370:	3118      	adds	r1, #24
   1b372:	4628      	mov	r0, r5
   1b374:	f006 fa96 	bl	218a4 <net_ipv6_mld_leave>
   1b378:	e7e1      	b.n	1b33e <leave_mcast_all+0x8>
}
   1b37a:	bd38      	pop	{r3, r4, r5, pc}

0001b37c <net_if_prepare_events>:
{
   1b37c:	b570      	push	{r4, r5, r6, lr}
	int ev_count = 0;
   1b37e:	2400      	movs	r4, #0
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b380:	4d0a      	ldr	r5, [pc, #40]	; (1b3ac <net_if_prepare_events+0x30>)
   1b382:	e00d      	b.n	1b3a0 <net_if_prepare_events+0x24>
		k_poll_event_init(&__net_if_event_start[ev_count],
   1b384:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b388:	0098      	lsls	r0, r3, #2
   1b38a:	f105 0318 	add.w	r3, r5, #24
   1b38e:	2200      	movs	r2, #0
   1b390:	2104      	movs	r1, #4
   1b392:	4e07      	ldr	r6, [pc, #28]	; (1b3b0 <net_if_prepare_events+0x34>)
   1b394:	4430      	add	r0, r6
   1b396:	f00d f927 	bl	285e8 <k_poll_event_init>
		ev_count++;
   1b39a:	3401      	adds	r4, #1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b39c:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b3a0:	4b04      	ldr	r3, [pc, #16]	; (1b3b4 <net_if_prepare_events+0x38>)
   1b3a2:	429d      	cmp	r5, r3
   1b3a4:	d1ee      	bne.n	1b384 <net_if_prepare_events+0x8>
}
   1b3a6:	4620      	mov	r0, r4
   1b3a8:	bd70      	pop	{r4, r5, r6, pc}
   1b3aa:	bf00      	nop
   1b3ac:	2000d7c0 	.word	0x2000d7c0
   1b3b0:	2000da60 	.word	0x2000da60
   1b3b4:	2000da60 	.word	0x2000da60

0001b3b8 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b3b8:	4b06      	ldr	r3, [pc, #24]	; (1b3d4 <net_if_lookup_by_dev+0x1c>)
   1b3ba:	4a07      	ldr	r2, [pc, #28]	; (1b3d8 <net_if_lookup_by_dev+0x20>)
   1b3bc:	4293      	cmp	r3, r2
   1b3be:	d005      	beq.n	1b3cc <net_if_lookup_by_dev+0x14>
		if (iface->dev == dev) {
   1b3c0:	681a      	ldr	r2, [r3, #0]
   1b3c2:	4282      	cmp	r2, r0
   1b3c4:	d003      	beq.n	1b3ce <net_if_lookup_by_dev+0x16>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b3c6:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   1b3ca:	e7f6      	b.n	1b3ba <net_if_lookup_by_dev+0x2>
	return NULL;
   1b3cc:	2300      	movs	r3, #0
}
   1b3ce:	4618      	mov	r0, r3
   1b3d0:	4770      	bx	lr
   1b3d2:	bf00      	nop
   1b3d4:	2000d7c0 	.word	0x2000d7c0
   1b3d8:	2000da60 	.word	0x2000da60

0001b3dc <net_if_get_default>:
	if (__net_if_start == __net_if_end) {
   1b3dc:	4b03      	ldr	r3, [pc, #12]	; (1b3ec <net_if_get_default+0x10>)
   1b3de:	4a04      	ldr	r2, [pc, #16]	; (1b3f0 <net_if_get_default+0x14>)
   1b3e0:	429a      	cmp	r2, r3
   1b3e2:	d001      	beq.n	1b3e8 <net_if_get_default+0xc>
	return __net_if_start;
   1b3e4:	4802      	ldr	r0, [pc, #8]	; (1b3f0 <net_if_get_default+0x14>)
}
   1b3e6:	4770      	bx	lr
		return NULL;
   1b3e8:	2000      	movs	r0, #0
   1b3ea:	4770      	bx	lr
   1b3ec:	2000da60 	.word	0x2000da60
   1b3f0:	2000d7c0 	.word	0x2000d7c0

0001b3f4 <net_if_start_rs>:
{
   1b3f4:	b510      	push	{r4, lr}
   1b3f6:	4604      	mov	r4, r0
	if (!net_ipv6_start_rs(iface)) {
   1b3f8:	f006 fa16 	bl	21828 <net_ipv6_start_rs>
   1b3fc:	b100      	cbz	r0, 1b400 <net_if_start_rs+0xc>
   1b3fe:	bd10      	pop	{r4, pc}
   1b400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b404:	f504 7118 	add.w	r1, r4, #608	; 0x260
   1b408:	4801      	ldr	r0, [pc, #4]	; (1b410 <net_if_start_rs+0x1c>)
   1b40a:	f00e fdeb 	bl	29fe4 <k_delayed_work_submit_to_queue>
}
   1b40e:	e7f6      	b.n	1b3fe <net_if_start_rs+0xa>
   1b410:	20003158 	.word	0x20003158

0001b414 <rs_timeout>:
{
   1b414:	b508      	push	{r3, lr}
	struct net_if *iface = CONTAINER_OF(work, struct net_if, ipv6.rs_timer);
   1b416:	f5a0 7018 	sub.w	r0, r0, #608	; 0x260
	iface->ipv6.rs_count++;
   1b41a:	f890 3296 	ldrb.w	r3, [r0, #662]	; 0x296
   1b41e:	3301      	adds	r3, #1
   1b420:	b2db      	uxtb	r3, r3
   1b422:	f880 3296 	strb.w	r3, [r0, #662]	; 0x296
	if (iface->ipv6.rs_count < RS_COUNT) {
   1b426:	2b02      	cmp	r3, #2
   1b428:	d900      	bls.n	1b42c <rs_timeout+0x18>
   1b42a:	bd08      	pop	{r3, pc}
		net_if_start_rs(iface);
   1b42c:	f7ff ffe2 	bl	1b3f4 <net_if_start_rs>
}
   1b430:	e7fb      	b.n	1b42a <rs_timeout+0x16>
	...

0001b434 <net_if_ipv6_addr_lookup>:
{
   1b434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b438:	4607      	mov	r7, r0
   1b43a:	4688      	mov	r8, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b43c:	4d1b      	ldr	r5, [pc, #108]	; (1b4ac <net_if_ipv6_addr_lookup+0x78>)
   1b43e:	e02d      	b.n	1b49c <net_if_ipv6_addr_lookup+0x68>
			if (net_is_ipv6_prefix(addr->s6_addr,
   1b440:	b9ee      	cbnz	r6, 1b47e <net_if_ipv6_addr_lookup+0x4a>
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b442:	3401      	adds	r4, #1
   1b444:	2c02      	cmp	r4, #2
   1b446:	dc27      	bgt.n	1b498 <net_if_ipv6_addr_lookup+0x64>
			if (!iface->ipv6.unicast[i].is_used ||
   1b448:	236c      	movs	r3, #108	; 0x6c
   1b44a:	fb03 5304 	mla	r3, r3, r4, r5
   1b44e:	f893 6094 	ldrb.w	r6, [r3, #148]	; 0x94
   1b452:	2e00      	cmp	r6, #0
   1b454:	d0f5      	beq.n	1b442 <net_if_ipv6_addr_lookup+0xe>
			    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1b456:	236c      	movs	r3, #108	; 0x6c
   1b458:	fb03 5304 	mla	r3, r3, r4, r5
   1b45c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
			if (!iface->ipv6.unicast[i].is_used ||
   1b45e:	2b0a      	cmp	r3, #10
   1b460:	d1ef      	bne.n	1b442 <net_if_ipv6_addr_lookup+0xe>
				iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   1b462:	216c      	movs	r1, #108	; 0x6c
   1b464:	fb01 f104 	mul.w	r1, r1, r4
   1b468:	3120      	adds	r1, #32
   1b46a:	4429      	add	r1, r5
	if (memcmp(addr1, addr2, bytes)) {
   1b46c:	2210      	movs	r2, #16
   1b46e:	4411      	add	r1, r2
   1b470:	4638      	mov	r0, r7
   1b472:	f00f f98d 	bl	2a790 <memcmp>
   1b476:	2800      	cmp	r0, #0
   1b478:	d0e2      	beq.n	1b440 <net_if_ipv6_addr_lookup+0xc>
		return false;
   1b47a:	2600      	movs	r6, #0
   1b47c:	e7e0      	b.n	1b440 <net_if_ipv6_addr_lookup+0xc>
				if (ret) {
   1b47e:	f1b8 0f00 	cmp.w	r8, #0
   1b482:	d001      	beq.n	1b488 <net_if_ipv6_addr_lookup+0x54>
					*ret = iface;
   1b484:	f8c8 5000 	str.w	r5, [r8]
				return &iface->ipv6.unicast[i];
   1b488:	206c      	movs	r0, #108	; 0x6c
   1b48a:	fb00 f004 	mul.w	r0, r0, r4
   1b48e:	3020      	adds	r0, #32
   1b490:	4428      	add	r0, r5
   1b492:	300c      	adds	r0, #12
   1b494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b498:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b49c:	4b04      	ldr	r3, [pc, #16]	; (1b4b0 <net_if_ipv6_addr_lookup+0x7c>)
   1b49e:	429d      	cmp	r5, r3
   1b4a0:	d001      	beq.n	1b4a6 <net_if_ipv6_addr_lookup+0x72>
   1b4a2:	2400      	movs	r4, #0
   1b4a4:	e7ce      	b.n	1b444 <net_if_ipv6_addr_lookup+0x10>
	return NULL;
   1b4a6:	2000      	movs	r0, #0
}
   1b4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b4ac:	2000d7c0 	.word	0x2000d7c0
   1b4b0:	2000da60 	.word	0x2000da60

0001b4b4 <dad_timeout>:
{
   1b4b4:	b530      	push	{r4, r5, lr}
   1b4b6:	b083      	sub	sp, #12
	struct net_if_addr *tmp, *ifaddr = CONTAINER_OF(work,
   1b4b8:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
	struct net_if *iface = NULL;
   1b4bc:	a902      	add	r1, sp, #8
   1b4be:	2300      	movs	r3, #0
   1b4c0:	f841 3d04 	str.w	r3, [r1, #-4]!
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   1b4c4:	2301      	movs	r3, #1
   1b4c6:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1b4ca:	f1a0 0438 	sub.w	r4, r0, #56	; 0x38
   1b4ce:	4620      	mov	r0, r4
   1b4d0:	f7ff ffb0 	bl	1b434 <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   1b4d4:	4285      	cmp	r5, r0
   1b4d6:	d001      	beq.n	1b4dc <dad_timeout+0x28>
}
   1b4d8:	b003      	add	sp, #12
   1b4da:	bd30      	pop	{r4, r5, pc}
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   1b4dc:	2300      	movs	r3, #0
   1b4de:	461a      	mov	r2, r3
   1b4e0:	9901      	ldr	r1, [sp, #4]
   1b4e2:	4807      	ldr	r0, [pc, #28]	; (1b500 <dad_timeout+0x4c>)
   1b4e4:	f007 fdcc 	bl	23080 <net_mgmt_event_notify_with_info>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   1b4e8:	4621      	mov	r1, r4
   1b4ea:	9801      	ldr	r0, [sp, #4]
   1b4ec:	f004 faf6 	bl	1fadc <net_ipv6_nbr_rm>
		join_mcast_allnodes(iface);
   1b4f0:	9801      	ldr	r0, [sp, #4]
   1b4f2:	f7ff fedf 	bl	1b2b4 <join_mcast_allnodes>
		join_mcast_solicit_node(iface, &ifaddr->address.in6_addr);
   1b4f6:	4621      	mov	r1, r4
   1b4f8:	9801      	ldr	r0, [sp, #4]
   1b4fa:	f7ff fef8 	bl	1b2ee <join_mcast_solicit_node>
}
   1b4fe:	e7eb      	b.n	1b4d8 <dad_timeout+0x24>
   1b500:	f060000d 	.word	0xf060000d

0001b504 <net_if_ipv6_addr_update_lifetime>:
{
   1b504:	b508      	push	{r3, lr}
   1b506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b50a:	fb02 f201 	mul.w	r2, r2, r1
   1b50e:	f100 0114 	add.w	r1, r0, #20
   1b512:	4802      	ldr	r0, [pc, #8]	; (1b51c <net_if_ipv6_addr_update_lifetime+0x18>)
   1b514:	f00e fd66 	bl	29fe4 <k_delayed_work_submit_to_queue>
   1b518:	bd08      	pop	{r3, pc}
   1b51a:	bf00      	nop
   1b51c:	20003158 	.word	0x20003158

0001b520 <net_if_ipv6_addr_add>:
{
   1b520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b524:	b084      	sub	sp, #16
   1b526:	4605      	mov	r5, r0
   1b528:	460e      	mov	r6, r1
   1b52a:	4690      	mov	r8, r2
   1b52c:	461f      	mov	r7, r3
	ifaddr = ipv6_addr_find(iface, addr);
   1b52e:	f7ff fe29 	bl	1b184 <ipv6_addr_find>
	if (ifaddr) {
   1b532:	4604      	mov	r4, r0
   1b534:	b118      	cbz	r0, 1b53e <net_if_ipv6_addr_add+0x1e>
}
   1b536:	4620      	mov	r0, r4
   1b538:	b004      	add	sp, #16
   1b53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b53e:	2300      	movs	r3, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b540:	2b02      	cmp	r3, #2
   1b542:	dcf8      	bgt.n	1b536 <net_if_ipv6_addr_add+0x16>
		if (iface->ipv6.unicast[i].is_used) {
   1b544:	226c      	movs	r2, #108	; 0x6c
   1b546:	fb02 5203 	mla	r2, r2, r3, r5
   1b54a:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1b54e:	b10a      	cbz	r2, 1b554 <net_if_ipv6_addr_add+0x34>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b550:	3301      	adds	r3, #1
   1b552:	e7f5      	b.n	1b540 <net_if_ipv6_addr_add+0x20>
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   1b554:	f04f 0e6c 	mov.w	lr, #108	; 0x6c
   1b558:	fb0e fe03 	mul.w	lr, lr, r3
   1b55c:	f10e 0e20 	add.w	lr, lr, #32
   1b560:	44ae      	add	lr, r5
   1b562:	f10e 040c 	add.w	r4, lr, #12
	ifaddr->is_used = true;
   1b566:	2301      	movs	r3, #1
   1b568:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ifaddr->address.family = AF_INET6;
   1b56c:	230a      	movs	r3, #10
   1b56e:	f8ae 300c 	strh.w	r3, [lr, #12]
	ifaddr->addr_type = addr_type;
   1b572:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1b576:	46ec      	mov	ip, sp
   1b578:	6830      	ldr	r0, [r6, #0]
   1b57a:	6871      	ldr	r1, [r6, #4]
   1b57c:	68b2      	ldr	r2, [r6, #8]
   1b57e:	68f3      	ldr	r3, [r6, #12]
   1b580:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1b584:	466e      	mov	r6, sp
   1b586:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1b588:	f8ce 0010 	str.w	r0, [lr, #16]
   1b58c:	f8ce 1014 	str.w	r1, [lr, #20]
   1b590:	f8ce 2018 	str.w	r2, [lr, #24]
   1b594:	f8ce 301c 	str.w	r3, [lr, #28]
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   1b598:	4910      	ldr	r1, [pc, #64]	; (1b5dc <net_if_ipv6_addr_add+0xbc>)
   1b59a:	f10e 0048 	add.w	r0, lr, #72	; 0x48
   1b59e:	f00e fca9 	bl	29ef4 <k_delayed_work_init>
	if (vlifetime) {
   1b5a2:	b96f      	cbnz	r7, 1b5c0 <net_if_ipv6_addr_add+0xa0>
		ifaddr->is_infinite = true;
   1b5a4:	2301      	movs	r3, #1
   1b5a6:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1b5aa:	4621      	mov	r1, r4
   1b5ac:	4628      	mov	r0, r5
   1b5ae:	f7ff fe3b 	bl	1b228 <net_if_ipv6_start_dad>
   1b5b2:	2300      	movs	r3, #0
   1b5b4:	461a      	mov	r2, r3
   1b5b6:	4629      	mov	r1, r5
   1b5b8:	4809      	ldr	r0, [pc, #36]	; (1b5e0 <net_if_ipv6_addr_add+0xc0>)
   1b5ba:	f007 fd61 	bl	23080 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.unicast[i];
   1b5be:	e7ba      	b.n	1b536 <net_if_ipv6_addr_add+0x16>
		ifaddr->is_infinite = false;
   1b5c0:	2300      	movs	r3, #0
   1b5c2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   1b5c6:	4907      	ldr	r1, [pc, #28]	; (1b5e4 <net_if_ipv6_addr_add+0xc4>)
   1b5c8:	f104 0014 	add.w	r0, r4, #20
   1b5cc:	f00e fc92 	bl	29ef4 <k_delayed_work_init>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   1b5d0:	4639      	mov	r1, r7
   1b5d2:	4620      	mov	r0, r4
   1b5d4:	f7ff ff96 	bl	1b504 <net_if_ipv6_addr_update_lifetime>
   1b5d8:	e7e7      	b.n	1b5aa <net_if_ipv6_addr_add+0x8a>
   1b5da:	bf00      	nop
   1b5dc:	0001b4b5 	.word	0x0001b4b5
   1b5e0:	f0600001 	.word	0xf0600001
   1b5e4:	0001b16d 	.word	0x0001b16d

0001b5e8 <net_if_start_dad>:
{
   1b5e8:	b570      	push	{r4, r5, r6, lr}
   1b5ea:	b084      	sub	sp, #16
   1b5ec:	4605      	mov	r5, r0
	struct in6_addr addr = { };
   1b5ee:	2300      	movs	r3, #0
   1b5f0:	9302      	str	r3, [sp, #8]
   1b5f2:	9303      	str	r3, [sp, #12]
	net_ipv6_addr_create_iid(&addr, &iface->link_addr);
   1b5f4:	f100 0410 	add.w	r4, r0, #16
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   1b5f8:	22fe      	movs	r2, #254	; 0xfe
   1b5fa:	f88d 2000 	strb.w	r2, [sp]
	addr->s6_addr[1] = 0x80;
   1b5fe:	2280      	movs	r2, #128	; 0x80
   1b600:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1b604:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1b608:	9301      	str	r3, [sp, #4]

	switch (lladdr->len) {
   1b60a:	7922      	ldrb	r2, [r4, #4]
   1b60c:	2a06      	cmp	r2, #6
   1b60e:	d020      	beq.n	1b652 <net_if_start_dad+0x6a>
   1b610:	2a08      	cmp	r2, #8
   1b612:	d044      	beq.n	1b69e <net_if_start_dad+0xb6>
   1b614:	2a02      	cmp	r2, #2
   1b616:	d008      	beq.n	1b62a <net_if_start_dad+0x42>
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   1b618:	2300      	movs	r3, #0
   1b61a:	2201      	movs	r2, #1
   1b61c:	4669      	mov	r1, sp
   1b61e:	4628      	mov	r0, r5
   1b620:	f7ff ff7e 	bl	1b520 <net_if_ipv6_addr_add>
   1b624:	4606      	mov	r6, r0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b626:	2400      	movs	r4, #0
   1b628:	e045      	b.n	1b6b6 <net_if_start_dad+0xce>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
   1b62a:	7963      	ldrb	r3, [r4, #5]
   1b62c:	2b01      	cmp	r3, #1
   1b62e:	d1f3      	bne.n	1b618 <net_if_start_dad+0x30>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1b630:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   1b632:	22ff      	movs	r2, #255	; 0xff
   1b634:	f88d 200b 	strb.w	r2, [sp, #11]
			addr->s6_addr[12] = 0xfe;
   1b638:	22fe      	movs	r2, #254	; 0xfe
   1b63a:	f88d 200c 	strb.w	r2, [sp, #12]
			addr->s6_addr[13] = 0;
   1b63e:	f88d 300d 	strb.w	r3, [sp, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   1b642:	6903      	ldr	r3, [r0, #16]
   1b644:	781a      	ldrb	r2, [r3, #0]
   1b646:	f88d 200e 	strb.w	r2, [sp, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1b64a:	785b      	ldrb	r3, [r3, #1]
   1b64c:	f88d 300f 	strb.w	r3, [sp, #15]
   1b650:	e7e2      	b.n	1b618 <net_if_start_dad+0x30>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1b652:	2203      	movs	r2, #3
   1b654:	6901      	ldr	r1, [r0, #16]
   1b656:	a802      	add	r0, sp, #8
   1b658:	f7e4 fe32 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1b65c:	23ff      	movs	r3, #255	; 0xff
   1b65e:	f88d 300b 	strb.w	r3, [sp, #11]
		addr->s6_addr[12] = 0xfe;
   1b662:	23fe      	movs	r3, #254	; 0xfe
   1b664:	f88d 300c 	strb.w	r3, [sp, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1b668:	6929      	ldr	r1, [r5, #16]
   1b66a:	2203      	movs	r2, #3
   1b66c:	4411      	add	r1, r2
   1b66e:	f10d 000d 	add.w	r0, sp, #13
   1b672:	f7e4 fe25 	bl	2c0 <memcpy>

#if defined(CONFIG_NET_L2_BT_ZEP1656)
		/* Workaround against older Linux kernel BT IPSP code.
		 * This will be removed eventually.
		 */
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1b676:	7963      	ldrb	r3, [r4, #5]
   1b678:	2b02      	cmp	r3, #2
   1b67a:	d009      	beq.n	1b690 <net_if_start_dad+0xa8>
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   1b67c:	7963      	ldrb	r3, [r4, #5]
   1b67e:	2b03      	cmp	r3, #3
   1b680:	d1ca      	bne.n	1b618 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1b682:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b686:	f083 0302 	eor.w	r3, r3, #2
   1b68a:	f88d 3008 	strb.w	r3, [sp, #8]
   1b68e:	e7c3      	b.n	1b618 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1b690:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b694:	f083 0302 	eor.w	r3, r3, #2
   1b698:	f88d 3008 	strb.w	r3, [sp, #8]
   1b69c:	e7ee      	b.n	1b67c <net_if_start_dad+0x94>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1b69e:	6901      	ldr	r1, [r0, #16]
   1b6a0:	a802      	add	r0, sp, #8
   1b6a2:	f7e4 fe0d 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   1b6a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b6aa:	f083 0302 	eor.w	r3, r3, #2
   1b6ae:	f88d 3008 	strb.w	r3, [sp, #8]
   1b6b2:	e7b1      	b.n	1b618 <net_if_start_dad+0x30>
   1b6b4:	3401      	adds	r4, #1
   1b6b6:	2c02      	cmp	r4, #2
   1b6b8:	dc18      	bgt.n	1b6ec <net_if_start_dad+0x104>
		if (!iface->ipv6.unicast[i].is_used ||
   1b6ba:	236c      	movs	r3, #108	; 0x6c
   1b6bc:	fb03 5304 	mla	r3, r3, r4, r5
   1b6c0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b6c4:	2b00      	cmp	r3, #0
   1b6c6:	d0f5      	beq.n	1b6b4 <net_if_start_dad+0xcc>
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1b6c8:	236c      	movs	r3, #108	; 0x6c
   1b6ca:	fb03 5304 	mla	r3, r3, r4, r5
   1b6ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   1b6d0:	2b0a      	cmp	r3, #10
   1b6d2:	d1ef      	bne.n	1b6b4 <net_if_start_dad+0xcc>
		    &iface->ipv6.unicast[i] == ifaddr) {
   1b6d4:	216c      	movs	r1, #108	; 0x6c
   1b6d6:	fb01 f104 	mul.w	r1, r1, r4
   1b6da:	3120      	adds	r1, #32
   1b6dc:	4429      	add	r1, r5
   1b6de:	310c      	adds	r1, #12
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1b6e0:	428e      	cmp	r6, r1
   1b6e2:	d0e7      	beq.n	1b6b4 <net_if_start_dad+0xcc>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1b6e4:	4628      	mov	r0, r5
   1b6e6:	f7ff fd9f 	bl	1b228 <net_if_ipv6_start_dad>
   1b6ea:	e7e3      	b.n	1b6b4 <net_if_start_dad+0xcc>
}
   1b6ec:	b004      	add	sp, #16
   1b6ee:	bd70      	pop	{r4, r5, r6, pc}

0001b6f0 <net_if_ipv6_maddr_add>:
	return addr->s6_addr[0] == 0xFF;
   1b6f0:	780b      	ldrb	r3, [r1, #0]
	if (!net_is_ipv6_addr_mcast(addr)) {
   1b6f2:	2bff      	cmp	r3, #255	; 0xff
   1b6f4:	d134      	bne.n	1b760 <net_if_ipv6_maddr_add+0x70>
{
   1b6f6:	b570      	push	{r4, r5, r6, lr}
   1b6f8:	2400      	movs	r4, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b6fa:	2c04      	cmp	r4, #4
   1b6fc:	dc2e      	bgt.n	1b75c <net_if_ipv6_maddr_add+0x6c>
		if (iface->ipv6.mcast[i].is_used) {
   1b6fe:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b702:	00d3      	lsls	r3, r2, #3
   1b704:	4403      	add	r3, r0
   1b706:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b70a:	f013 0f01 	tst.w	r3, #1
   1b70e:	d001      	beq.n	1b714 <net_if_ipv6_maddr_add+0x24>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b710:	3401      	adds	r4, #1
   1b712:	e7f2      	b.n	1b6fa <net_if_ipv6_maddr_add+0xa>
   1b714:	4605      	mov	r5, r0
		iface->ipv6.mcast[i].is_used = true;
   1b716:	0066      	lsls	r6, r4, #1
   1b718:	1932      	adds	r2, r6, r4
   1b71a:	00d3      	lsls	r3, r2, #3
   1b71c:	4403      	add	r3, r0
   1b71e:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1b722:	f042 0201 	orr.w	r2, r2, #1
   1b726:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		iface->ipv6.mcast[i].address.family = AF_INET6;
   1b72a:	220a      	movs	r2, #10
   1b72c:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   1b730:	1933      	adds	r3, r6, r4
   1b732:	00d8      	lsls	r0, r3, #3
   1b734:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1b738:	4428      	add	r0, r5
   1b73a:	2210      	movs	r2, #16
   1b73c:	3018      	adds	r0, #24
   1b73e:	f7e4 fdbf 	bl	2c0 <memcpy>
   1b742:	2300      	movs	r3, #0
   1b744:	461a      	mov	r2, r3
   1b746:	4629      	mov	r1, r5
   1b748:	4806      	ldr	r0, [pc, #24]	; (1b764 <net_if_ipv6_maddr_add+0x74>)
   1b74a:	f007 fc99 	bl	23080 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.mcast[i];
   1b74e:	4434      	add	r4, r6
   1b750:	00e0      	lsls	r0, r4, #3
   1b752:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1b756:	4428      	add	r0, r5
   1b758:	3010      	adds	r0, #16
   1b75a:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1b75c:	2000      	movs	r0, #0
   1b75e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1b760:	2000      	movs	r0, #0
   1b762:	4770      	bx	lr
   1b764:	f0600003 	.word	0xf0600003

0001b768 <net_if_ipv6_maddr_rm>:
{
   1b768:	b570      	push	{r4, r5, r6, lr}
   1b76a:	4605      	mov	r5, r0
   1b76c:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b76e:	2400      	movs	r4, #0
   1b770:	e000      	b.n	1b774 <net_if_ipv6_maddr_rm+0xc>
   1b772:	3401      	adds	r4, #1
   1b774:	2c04      	cmp	r4, #4
   1b776:	dc25      	bgt.n	1b7c4 <net_if_ipv6_maddr_rm+0x5c>
		if (!iface->ipv6.mcast[i].is_used) {
   1b778:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b77c:	00d3      	lsls	r3, r2, #3
   1b77e:	461a      	mov	r2, r3
   1b780:	442b      	add	r3, r5
   1b782:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b786:	f013 0f01 	tst.w	r3, #1
   1b78a:	d0f2      	beq.n	1b772 <net_if_ipv6_maddr_rm+0xa>
			    &iface->ipv6.mcast[i].address.in6_addr,
   1b78c:	f502 70b0 	add.w	r0, r2, #352	; 0x160
   1b790:	4428      	add	r0, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b792:	2210      	movs	r2, #16
   1b794:	4631      	mov	r1, r6
   1b796:	3018      	adds	r0, #24
   1b798:	f00e fffa 	bl	2a790 <memcmp>
		if (!net_ipv6_addr_cmp(
   1b79c:	2800      	cmp	r0, #0
   1b79e:	d1e8      	bne.n	1b772 <net_if_ipv6_maddr_rm+0xa>
		iface->ipv6.mcast[i].is_used = false;
   1b7a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b7a4:	00e3      	lsls	r3, r4, #3
   1b7a6:	442b      	add	r3, r5
   1b7a8:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1b7ac:	f36f 0200 	bfc	r2, #0, #1
   1b7b0:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
   1b7b4:	2300      	movs	r3, #0
   1b7b6:	461a      	mov	r2, r3
   1b7b8:	4629      	mov	r1, r5
   1b7ba:	4803      	ldr	r0, [pc, #12]	; (1b7c8 <net_if_ipv6_maddr_rm+0x60>)
   1b7bc:	f007 fc60 	bl	23080 <net_mgmt_event_notify_with_info>
		return true;
   1b7c0:	2001      	movs	r0, #1
   1b7c2:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   1b7c4:	2000      	movs	r0, #0
}
   1b7c6:	bd70      	pop	{r4, r5, r6, pc}
   1b7c8:	f0600004 	.word	0xf0600004

0001b7cc <net_if_ipv6_addr_rm>:
{
   1b7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b7d0:	b084      	sub	sp, #16
   1b7d2:	4606      	mov	r6, r0
   1b7d4:	460f      	mov	r7, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b7d6:	2400      	movs	r4, #0
   1b7d8:	e009      	b.n	1b7ee <net_if_ipv6_addr_rm+0x22>
			k_delayed_work_cancel(&iface->ipv6.unicast[i].lifetime);
   1b7da:	206c      	movs	r0, #108	; 0x6c
   1b7dc:	fb00 f004 	mul.w	r0, r0, r4
   1b7e0:	3030      	adds	r0, #48	; 0x30
   1b7e2:	4430      	add	r0, r6
   1b7e4:	3010      	adds	r0, #16
   1b7e6:	f00e fba3 	bl	29f30 <k_delayed_work_cancel>
   1b7ea:	e01c      	b.n	1b826 <net_if_ipv6_addr_rm+0x5a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b7ec:	3401      	adds	r4, #1
   1b7ee:	2c02      	cmp	r4, #2
   1b7f0:	dc46      	bgt.n	1b880 <net_if_ipv6_addr_rm+0xb4>
		if (!iface->ipv6.unicast[i].is_used) {
   1b7f2:	236c      	movs	r3, #108	; 0x6c
   1b7f4:	fb03 6304 	mla	r3, r3, r4, r6
   1b7f8:	f893 5094 	ldrb.w	r5, [r3, #148]	; 0x94
   1b7fc:	2d00      	cmp	r5, #0
   1b7fe:	d0f5      	beq.n	1b7ec <net_if_ipv6_addr_rm+0x20>
			    &iface->ipv6.unicast[i].address.in6_addr,
   1b800:	206c      	movs	r0, #108	; 0x6c
   1b802:	fb00 f004 	mul.w	r0, r0, r4
   1b806:	3020      	adds	r0, #32
   1b808:	4430      	add	r0, r6
   1b80a:	2210      	movs	r2, #16
   1b80c:	4639      	mov	r1, r7
   1b80e:	4410      	add	r0, r2
   1b810:	f00e ffbe 	bl	2a790 <memcmp>
		if (!net_ipv6_addr_cmp(
   1b814:	2800      	cmp	r0, #0
   1b816:	d1e9      	bne.n	1b7ec <net_if_ipv6_addr_rm+0x20>
		if (!iface->ipv6.unicast[i].is_infinite) {
   1b818:	236c      	movs	r3, #108	; 0x6c
   1b81a:	fb03 6304 	mla	r3, r3, r4, r6
   1b81e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   1b822:	2b00      	cmp	r3, #0
   1b824:	d0d9      	beq.n	1b7da <net_if_ipv6_addr_rm+0xe>
		iface->ipv6.unicast[i].is_used = false;
   1b826:	236c      	movs	r3, #108	; 0x6c
   1b828:	fb03 6404 	mla	r4, r3, r4, r6
   1b82c:	f04f 0800 	mov.w	r8, #0
   1b830:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
	dst->s6_addr[0]   = 0xFF;
   1b834:	23ff      	movs	r3, #255	; 0xff
   1b836:	f88d 3000 	strb.w	r3, [sp]
	dst->s6_addr[1]   = 0x02;
   1b83a:	2202      	movs	r2, #2
   1b83c:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1b840:	f8ad 8002 	strh.w	r8, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1b844:	f8ad 8004 	strh.w	r8, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1b848:	f8ad 8006 	strh.w	r8, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1b84c:	f8ad 8008 	strh.w	r8, [sp, #8]
	dst->s6_addr[10]  = 0;
   1b850:	f88d 800a 	strb.w	r8, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1b854:	2201      	movs	r2, #1
   1b856:	f88d 200b 	strb.w	r2, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1b85a:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1b85e:	7b7b      	ldrb	r3, [r7, #13]
   1b860:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1b864:	89fb      	ldrh	r3, [r7, #14]
   1b866:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
   1b86a:	4669      	mov	r1, sp
   1b86c:	4630      	mov	r0, r6
   1b86e:	f7ff ff7b 	bl	1b768 <net_if_ipv6_maddr_rm>
   1b872:	4643      	mov	r3, r8
   1b874:	4642      	mov	r2, r8
   1b876:	4631      	mov	r1, r6
   1b878:	4804      	ldr	r0, [pc, #16]	; (1b88c <net_if_ipv6_addr_rm+0xc0>)
   1b87a:	f007 fc01 	bl	23080 <net_mgmt_event_notify_with_info>
   1b87e:	e000      	b.n	1b882 <net_if_ipv6_addr_rm+0xb6>
	return false;
   1b880:	2500      	movs	r5, #0
}
   1b882:	4628      	mov	r0, r5
   1b884:	b004      	add	sp, #16
   1b886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b88a:	bf00      	nop
   1b88c:	f0600002 	.word	0xf0600002

0001b890 <net_if_ipv6_dad_failed>:
{
   1b890:	b510      	push	{r4, lr}
   1b892:	b082      	sub	sp, #8
   1b894:	ab02      	add	r3, sp, #8
   1b896:	f843 0d04 	str.w	r0, [r3, #-4]!
   1b89a:	460c      	mov	r4, r1
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   1b89c:	4619      	mov	r1, r3
   1b89e:	4620      	mov	r0, r4
   1b8a0:	f7ff fdc8 	bl	1b434 <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   1b8a4:	b160      	cbz	r0, 1b8c0 <net_if_ipv6_dad_failed+0x30>
	k_delayed_work_cancel(&ifaddr->dad_timer);
   1b8a6:	303c      	adds	r0, #60	; 0x3c
   1b8a8:	f00e fb42 	bl	29f30 <k_delayed_work_cancel>
   1b8ac:	2300      	movs	r3, #0
   1b8ae:	461a      	mov	r2, r3
   1b8b0:	9901      	ldr	r1, [sp, #4]
   1b8b2:	4804      	ldr	r0, [pc, #16]	; (1b8c4 <net_if_ipv6_dad_failed+0x34>)
   1b8b4:	f007 fbe4 	bl	23080 <net_mgmt_event_notify_with_info>
	net_if_ipv6_addr_rm(iface, addr);
   1b8b8:	4621      	mov	r1, r4
   1b8ba:	9801      	ldr	r0, [sp, #4]
   1b8bc:	f7ff ff86 	bl	1b7cc <net_if_ipv6_addr_rm>
}
   1b8c0:	b002      	add	sp, #8
   1b8c2:	bd10      	pop	{r4, pc}
   1b8c4:	f060000e 	.word	0xf060000e

0001b8c8 <net_if_ipv6_maddr_lookup>:
{
   1b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8ca:	4607      	mov	r7, r0
   1b8cc:	460e      	mov	r6, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b8ce:	4d22      	ldr	r5, [pc, #136]	; (1b958 <net_if_ipv6_maddr_lookup+0x90>)
   1b8d0:	e034      	b.n	1b93c <net_if_ipv6_maddr_lookup+0x74>
		return false;
   1b8d2:	2300      	movs	r3, #0
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1b8d4:	bb13      	cbnz	r3, 1b91c <net_if_ipv6_maddr_lookup+0x54>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b8d6:	3401      	adds	r4, #1
   1b8d8:	2c04      	cmp	r4, #4
   1b8da:	dc2d      	bgt.n	1b938 <net_if_ipv6_maddr_lookup+0x70>
			if (!iface->ipv6.mcast[i].is_used ||
   1b8dc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b8e0:	00d3      	lsls	r3, r2, #3
   1b8e2:	442b      	add	r3, r5
   1b8e4:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b8e8:	f013 0f01 	tst.w	r3, #1
   1b8ec:	d0f3      	beq.n	1b8d6 <net_if_ipv6_maddr_lookup+0xe>
			    iface->ipv6.mcast[i].address.family != AF_INET6) {
   1b8ee:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b8f2:	00d3      	lsls	r3, r2, #3
   1b8f4:	442b      	add	r3, r5
   1b8f6:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
			if (!iface->ipv6.mcast[i].is_used ||
   1b8fa:	2b0a      	cmp	r3, #10
   1b8fc:	d1eb      	bne.n	1b8d6 <net_if_ipv6_maddr_lookup+0xe>
				iface->ipv6.mcast[i].address.in6_addr.s6_addr,
   1b8fe:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b902:	00d3      	lsls	r3, r2, #3
   1b904:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1b908:	18e9      	adds	r1, r5, r3
	if (memcmp(addr1, addr2, bytes)) {
   1b90a:	2210      	movs	r2, #16
   1b90c:	3118      	adds	r1, #24
   1b90e:	4638      	mov	r0, r7
   1b910:	f00e ff3e 	bl	2a790 <memcmp>
   1b914:	2800      	cmp	r0, #0
   1b916:	d1dc      	bne.n	1b8d2 <net_if_ipv6_maddr_lookup+0xa>
		return true;
   1b918:	2301      	movs	r3, #1
   1b91a:	e7db      	b.n	1b8d4 <net_if_ipv6_maddr_lookup+0xc>
				if (ret) {
   1b91c:	b106      	cbz	r6, 1b920 <net_if_ipv6_maddr_lookup+0x58>
					*ret = iface;
   1b91e:	6035      	str	r5, [r6, #0]
				return &iface->ipv6.mcast[i];
   1b920:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b924:	00e3      	lsls	r3, r4, #3
   1b926:	f503 70b0 	add.w	r0, r3, #352	; 0x160
   1b92a:	4428      	add	r0, r5
   1b92c:	3010      	adds	r0, #16
   1b92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b930:	2400      	movs	r4, #0
   1b932:	e7d1      	b.n	1b8d8 <net_if_ipv6_maddr_lookup+0x10>
   1b934:	2400      	movs	r4, #0
   1b936:	e7cf      	b.n	1b8d8 <net_if_ipv6_maddr_lookup+0x10>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b938:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b93c:	4b07      	ldr	r3, [pc, #28]	; (1b95c <net_if_ipv6_maddr_lookup+0x94>)
   1b93e:	429d      	cmp	r5, r3
   1b940:	d008      	beq.n	1b954 <net_if_ipv6_maddr_lookup+0x8c>
		if (ret && *ret && iface != *ret) {
   1b942:	2e00      	cmp	r6, #0
   1b944:	d0f4      	beq.n	1b930 <net_if_ipv6_maddr_lookup+0x68>
   1b946:	6833      	ldr	r3, [r6, #0]
   1b948:	2b00      	cmp	r3, #0
   1b94a:	d0f3      	beq.n	1b934 <net_if_ipv6_maddr_lookup+0x6c>
   1b94c:	429d      	cmp	r5, r3
   1b94e:	d1f3      	bne.n	1b938 <net_if_ipv6_maddr_lookup+0x70>
   1b950:	2400      	movs	r4, #0
   1b952:	e7c1      	b.n	1b8d8 <net_if_ipv6_maddr_lookup+0x10>
	return NULL;
   1b954:	2000      	movs	r0, #0
}
   1b956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b958:	2000d7c0 	.word	0x2000d7c0
   1b95c:	2000da60 	.word	0x2000da60

0001b960 <net_if_mcast_monitor>:
{
   1b960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b962:	4605      	mov	r5, r0
   1b964:	460e      	mov	r6, r1
   1b966:	4617      	mov	r7, r2
	return list->head;
   1b968:	4b13      	ldr	r3, [pc, #76]	; (1b9b8 <net_if_mcast_monitor+0x58>)
   1b96a:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1b96c:	b11b      	cbz	r3, 1b976 <net_if_mcast_monitor+0x16>
   1b96e:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b970:	b173      	cbz	r3, 1b990 <net_if_mcast_monitor+0x30>
	return node->next;
   1b972:	681c      	ldr	r4, [r3, #0]
   1b974:	e00c      	b.n	1b990 <net_if_mcast_monitor+0x30>
   1b976:	461c      	mov	r4, r3
   1b978:	e00a      	b.n	1b990 <net_if_mcast_monitor+0x30>
			mon->cb(iface, addr, is_joined);
   1b97a:	689b      	ldr	r3, [r3, #8]
   1b97c:	463a      	mov	r2, r7
   1b97e:	4631      	mov	r1, r6
   1b980:	4628      	mov	r0, r5
   1b982:	4798      	blx	r3
   1b984:	e008      	b.n	1b998 <net_if_mcast_monitor+0x38>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b986:	4623      	mov	r3, r4
   1b988:	e00c      	b.n	1b9a4 <net_if_mcast_monitor+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1b98a:	4622      	mov	r2, r4
   1b98c:	4623      	mov	r3, r4
   1b98e:	4614      	mov	r4, r2
   1b990:	b183      	cbz	r3, 1b9b4 <net_if_mcast_monitor+0x54>
		if (iface == mon->iface) {
   1b992:	685a      	ldr	r2, [r3, #4]
   1b994:	42aa      	cmp	r2, r5
   1b996:	d0f0      	beq.n	1b97a <net_if_mcast_monitor+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1b998:	2c00      	cmp	r4, #0
   1b99a:	d0f6      	beq.n	1b98a <net_if_mcast_monitor+0x2a>
   1b99c:	4622      	mov	r2, r4
   1b99e:	2c00      	cmp	r4, #0
   1b9a0:	d0f1      	beq.n	1b986 <net_if_mcast_monitor+0x26>
	return node->next;
   1b9a2:	6823      	ldr	r3, [r4, #0]
   1b9a4:	b113      	cbz	r3, 1b9ac <net_if_mcast_monitor+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b9a6:	b11a      	cbz	r2, 1b9b0 <net_if_mcast_monitor+0x50>
	return node->next;
   1b9a8:	6822      	ldr	r2, [r4, #0]
   1b9aa:	e7ef      	b.n	1b98c <net_if_mcast_monitor+0x2c>
   1b9ac:	2200      	movs	r2, #0
   1b9ae:	e7ed      	b.n	1b98c <net_if_mcast_monitor+0x2c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b9b0:	2200      	movs	r2, #0
   1b9b2:	e7eb      	b.n	1b98c <net_if_mcast_monitor+0x2c>
}
   1b9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b9b6:	bf00      	nop
   1b9b8:	2000213c 	.word	0x2000213c

0001b9bc <net_if_ipv6_prefix_add>:
{
   1b9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b9c0:	4605      	mov	r5, r0
   1b9c2:	460e      	mov	r6, r1
   1b9c4:	4617      	mov	r7, r2
   1b9c6:	4698      	mov	r8, r3
	if_prefix = ipv6_prefix_find(iface, prefix, len);
   1b9c8:	f7ff fc00 	bl	1b1cc <ipv6_prefix_find>
	if (if_prefix) {
   1b9cc:	4604      	mov	r4, r0
   1b9ce:	b110      	cbz	r0, 1b9d6 <net_if_ipv6_prefix_add+0x1a>
}
   1b9d0:	4620      	mov	r0, r4
   1b9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b9d6:	2300      	movs	r3, #0
   1b9d8:	e000      	b.n	1b9dc <net_if_ipv6_prefix_add+0x20>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b9da:	3301      	adds	r3, #1
   1b9dc:	2b01      	cmp	r3, #1
   1b9de:	dcf7      	bgt.n	1b9d0 <net_if_ipv6_prefix_add+0x14>
		if (iface->ipv6.prefix[i].is_used) {
   1b9e0:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1b9e4:	008a      	lsls	r2, r1, #2
   1b9e6:	442a      	add	r2, r5
   1b9e8:	f892 2222 	ldrb.w	r2, [r2, #546]	; 0x222
   1b9ec:	2a00      	cmp	r2, #0
   1b9ee:	d1f4      	bne.n	1b9da <net_if_ipv6_prefix_add+0x1e>
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   1b9f0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1b9f4:	009a      	lsls	r2, r3, #2
   1b9f6:	f502 74ec 	add.w	r4, r2, #472	; 0x1d8
   1b9fa:	442c      	add	r4, r5
   1b9fc:	3410      	adds	r4, #16
   1b9fe:	4643      	mov	r3, r8
   1ba00:	463a      	mov	r2, r7
   1ba02:	4631      	mov	r1, r6
   1ba04:	4620      	mov	r0, r4
   1ba06:	f7ff fc2d 	bl	1b264 <net_if_ipv6_prefix_init>
   1ba0a:	2300      	movs	r3, #0
   1ba0c:	461a      	mov	r2, r3
   1ba0e:	4629      	mov	r1, r5
   1ba10:	4801      	ldr	r0, [pc, #4]	; (1ba18 <net_if_ipv6_prefix_add+0x5c>)
   1ba12:	f007 fb35 	bl	23080 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.prefix[i];
   1ba16:	e7db      	b.n	1b9d0 <net_if_ipv6_prefix_add+0x14>
   1ba18:	f0600005 	.word	0xf0600005

0001ba1c <net_if_ipv6_prefix_lookup>:
{
   1ba1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba20:	4605      	mov	r5, r0
   1ba22:	4688      	mov	r8, r1
   1ba24:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ba26:	2400      	movs	r4, #0
   1ba28:	e01d      	b.n	1ba66 <net_if_ipv6_prefix_lookup+0x4a>
	if (memcmp(addr1, addr2, bytes)) {
   1ba2a:	4652      	mov	r2, sl
   1ba2c:	4641      	mov	r1, r8
   1ba2e:	4648      	mov	r0, r9
   1ba30:	f00e feae 	bl	2a790 <memcmp>
   1ba34:	b9a0      	cbnz	r0, 1ba60 <net_if_ipv6_prefix_lookup+0x44>
	if (!remain) {
   1ba36:	f1bb 0f00 	cmp.w	fp, #0
   1ba3a:	d012      	beq.n	1ba62 <net_if_ipv6_prefix_lookup+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1ba3c:	f1cb 0208 	rsb	r2, fp, #8
   1ba40:	23ff      	movs	r3, #255	; 0xff
   1ba42:	4093      	lsls	r3, r2
   1ba44:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1ba48:	fa03 f30b 	lsl.w	r3, r3, fp
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1ba4c:	f819 200a 	ldrb.w	r2, [r9, sl]
   1ba50:	f818 100a 	ldrb.w	r1, [r8, sl]
   1ba54:	404a      	eors	r2, r1
   1ba56:	4213      	tst	r3, r2
   1ba58:	bf0c      	ite	eq
   1ba5a:	2601      	moveq	r6, #1
   1ba5c:	2600      	movne	r6, #0
   1ba5e:	e000      	b.n	1ba62 <net_if_ipv6_prefix_lookup+0x46>
		return false;
   1ba60:	2600      	movs	r6, #0
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1ba62:	b9e6      	cbnz	r6, 1ba9e <net_if_ipv6_prefix_lookup+0x82>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ba64:	3401      	adds	r4, #1
   1ba66:	2c01      	cmp	r4, #1
   1ba68:	dc22      	bgt.n	1bab0 <net_if_ipv6_prefix_lookup+0x94>
		if (!iface->ipv6.prefix[i].is_used) {
   1ba6a:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1ba6e:	0093      	lsls	r3, r2, #2
   1ba70:	442b      	add	r3, r5
   1ba72:	f893 6222 	ldrb.w	r6, [r3, #546]	; 0x222
   1ba76:	2e00      	cmp	r6, #0
   1ba78:	d0f4      	beq.n	1ba64 <net_if_ipv6_prefix_lookup+0x48>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1ba7a:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1ba7e:	0093      	lsls	r3, r2, #2
   1ba80:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1ba84:	442b      	add	r3, r5
   1ba86:	f103 0910 	add.w	r9, r3, #16
	u8_t bits = 128 - length;
   1ba8a:	f1c7 0380 	rsb	r3, r7, #128	; 0x80
	u8_t bytes = length / 8;
   1ba8e:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
	u8_t remain = bits % 8;
   1ba92:	f003 0b07 	and.w	fp, r3, #7
	if (length > 128) {
   1ba96:	2f80      	cmp	r7, #128	; 0x80
   1ba98:	d9c7      	bls.n	1ba2a <net_if_ipv6_prefix_lookup+0xe>
		return false;
   1ba9a:	2600      	movs	r6, #0
   1ba9c:	e7e1      	b.n	1ba62 <net_if_ipv6_prefix_lookup+0x46>
			return &iface->ipv6.prefix[i];
   1ba9e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   1baa2:	00a3      	lsls	r3, r4, #2
   1baa4:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
   1baa8:	4428      	add	r0, r5
   1baaa:	3010      	adds	r0, #16
   1baac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return NULL;
   1bab0:	2000      	movs	r0, #0
}
   1bab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0001bab8 <net_if_ipv6_addr_onlink>:
{
   1bab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1babc:	4606      	mov	r6, r0
   1babe:	4688      	mov	r8, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1bac0:	4d2d      	ldr	r5, [pc, #180]	; (1bb78 <net_if_ipv6_addr_onlink+0xc0>)
   1bac2:	e048      	b.n	1bb56 <net_if_ipv6_addr_onlink+0x9e>
	if (memcmp(addr1, addr2, bytes)) {
   1bac4:	465a      	mov	r2, fp
   1bac6:	4641      	mov	r1, r8
   1bac8:	4648      	mov	r0, r9
   1baca:	f00e fe61 	bl	2a790 <memcmp>
   1bace:	b9a8      	cbnz	r0, 1bafc <net_if_ipv6_addr_onlink+0x44>
	if (!remain) {
   1bad0:	f1ba 0f00 	cmp.w	sl, #0
   1bad4:	d013      	beq.n	1bafe <net_if_ipv6_addr_onlink+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1bad6:	f1ca 0208 	rsb	r2, sl, #8
   1bada:	23ff      	movs	r3, #255	; 0xff
   1badc:	4093      	lsls	r3, r2
   1bade:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1bae2:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1bae6:	f819 300b 	ldrb.w	r3, [r9, fp]
   1baea:	f818 200b 	ldrb.w	r2, [r8, fp]
   1baee:	4053      	eors	r3, r2
   1baf0:	ea1a 0f03 	tst.w	sl, r3
   1baf4:	bf0c      	ite	eq
   1baf6:	2701      	moveq	r7, #1
   1baf8:	2700      	movne	r7, #0
   1bafa:	e000      	b.n	1bafe <net_if_ipv6_addr_onlink+0x46>
		return false;
   1bafc:	2700      	movs	r7, #0
			if (tmp->ipv6.prefix[i].is_used &&
   1bafe:	bb0f      	cbnz	r7, 1bb44 <net_if_ipv6_addr_onlink+0x8c>
		for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1bb00:	3401      	adds	r4, #1
   1bb02:	2c01      	cmp	r4, #1
   1bb04:	dc25      	bgt.n	1bb52 <net_if_ipv6_addr_onlink+0x9a>
			if (tmp->ipv6.prefix[i].is_used &&
   1bb06:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1bb0a:	0093      	lsls	r3, r2, #2
   1bb0c:	442b      	add	r3, r5
   1bb0e:	f893 7222 	ldrb.w	r7, [r3, #546]	; 0x222
   1bb12:	2f00      	cmp	r7, #0
   1bb14:	d0f4      	beq.n	1bb00 <net_if_ipv6_addr_onlink+0x48>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   1bb16:	0122      	lsls	r2, r4, #4
   1bb18:	1b11      	subs	r1, r2, r4
   1bb1a:	008b      	lsls	r3, r1, #2
   1bb1c:	4619      	mov	r1, r3
   1bb1e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1bb22:	442b      	add	r3, r5
   1bb24:	f103 0910 	add.w	r9, r3, #16
   1bb28:	460a      	mov	r2, r1
   1bb2a:	442a      	add	r2, r5
   1bb2c:	f892 3220 	ldrb.w	r3, [r2, #544]	; 0x220
	u8_t bits = 128 - length;
   1bb30:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   1bb34:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   1bb38:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   1bb3c:	2b80      	cmp	r3, #128	; 0x80
   1bb3e:	d9c1      	bls.n	1bac4 <net_if_ipv6_addr_onlink+0xc>
		return false;
   1bb40:	2700      	movs	r7, #0
   1bb42:	e7dc      	b.n	1bafe <net_if_ipv6_addr_onlink+0x46>
				if (iface) {
   1bb44:	b1a6      	cbz	r6, 1bb70 <net_if_ipv6_addr_onlink+0xb8>
					*iface = tmp;
   1bb46:	6035      	str	r5, [r6, #0]
   1bb48:	e012      	b.n	1bb70 <net_if_ipv6_addr_onlink+0xb8>
   1bb4a:	2400      	movs	r4, #0
   1bb4c:	e7d9      	b.n	1bb02 <net_if_ipv6_addr_onlink+0x4a>
   1bb4e:	2400      	movs	r4, #0
   1bb50:	e7d7      	b.n	1bb02 <net_if_ipv6_addr_onlink+0x4a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1bb52:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1bb56:	4b09      	ldr	r3, [pc, #36]	; (1bb7c <net_if_ipv6_addr_onlink+0xc4>)
   1bb58:	429d      	cmp	r5, r3
   1bb5a:	d008      	beq.n	1bb6e <net_if_ipv6_addr_onlink+0xb6>
		if (iface && *iface && *iface != tmp) {
   1bb5c:	2e00      	cmp	r6, #0
   1bb5e:	d0f4      	beq.n	1bb4a <net_if_ipv6_addr_onlink+0x92>
   1bb60:	6833      	ldr	r3, [r6, #0]
   1bb62:	2b00      	cmp	r3, #0
   1bb64:	d0f3      	beq.n	1bb4e <net_if_ipv6_addr_onlink+0x96>
   1bb66:	429d      	cmp	r5, r3
   1bb68:	d1f3      	bne.n	1bb52 <net_if_ipv6_addr_onlink+0x9a>
   1bb6a:	2400      	movs	r4, #0
   1bb6c:	e7c9      	b.n	1bb02 <net_if_ipv6_addr_onlink+0x4a>
	return false;
   1bb6e:	2700      	movs	r7, #0
}
   1bb70:	4638      	mov	r0, r7
   1bb72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb76:	bf00      	nop
   1bb78:	2000d7c0 	.word	0x2000d7c0
   1bb7c:	2000da60 	.word	0x2000da60

0001bb80 <net_if_ipv6_prefix_set_timer>:
{
   1bb80:	b508      	push	{r3, lr}
	u32_t timeout = lifetime * MSEC_PER_SEC;
   1bb82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bb86:	fb02 f201 	mul.w	r2, r2, r1
	if (lifetime > (0xfffffffe / MSEC_PER_SEC)) {
   1bb8a:	4b05      	ldr	r3, [pc, #20]	; (1bba0 <net_if_ipv6_prefix_set_timer+0x20>)
   1bb8c:	4299      	cmp	r1, r3
   1bb8e:	d901      	bls.n	1bb94 <net_if_ipv6_prefix_set_timer+0x14>
		timeout = 0xfffffffe;
   1bb90:	f06f 0201 	mvn.w	r2, #1
   1bb94:	4601      	mov	r1, r0
   1bb96:	4803      	ldr	r0, [pc, #12]	; (1bba4 <net_if_ipv6_prefix_set_timer+0x24>)
   1bb98:	f00e fa24 	bl	29fe4 <k_delayed_work_submit_to_queue>
   1bb9c:	bd08      	pop	{r3, pc}
   1bb9e:	bf00      	nop
   1bba0:	00418937 	.word	0x00418937
   1bba4:	20003158 	.word	0x20003158

0001bba8 <net_if_ipv6_prefix_unset_timer>:
{
   1bba8:	b508      	push	{r3, lr}
	if (!prefix->is_used) {
   1bbaa:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1bbae:	b903      	cbnz	r3, 1bbb2 <net_if_ipv6_prefix_unset_timer+0xa>
   1bbb0:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&prefix->lifetime);
   1bbb2:	f00e f9bd 	bl	29f30 <k_delayed_work_cancel>
   1bbb6:	e7fb      	b.n	1bbb0 <net_if_ipv6_prefix_unset_timer+0x8>

0001bbb8 <net_if_ipv6_prefix_rm>:
{
   1bbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bbbc:	4606      	mov	r6, r0
   1bbbe:	460f      	mov	r7, r1
   1bbc0:	4690      	mov	r8, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1bbc2:	2400      	movs	r4, #0
   1bbc4:	e000      	b.n	1bbc8 <net_if_ipv6_prefix_rm+0x10>
   1bbc6:	3401      	adds	r4, #1
   1bbc8:	2c01      	cmp	r4, #1
   1bbca:	dc2f      	bgt.n	1bc2c <net_if_ipv6_prefix_rm+0x74>
		if (!iface->ipv6.prefix[i].is_used) {
   1bbcc:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1bbd0:	0093      	lsls	r3, r2, #2
   1bbd2:	461a      	mov	r2, r3
   1bbd4:	4433      	add	r3, r6
   1bbd6:	f893 5222 	ldrb.w	r5, [r3, #546]	; 0x222
   1bbda:	2d00      	cmp	r5, #0
   1bbdc:	d0f3      	beq.n	1bbc6 <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1bbde:	f502 7000 	add.w	r0, r2, #512	; 0x200
   1bbe2:	4430      	add	r0, r6
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1bbe4:	2210      	movs	r2, #16
   1bbe6:	4639      	mov	r1, r7
   1bbe8:	4410      	add	r0, r2
   1bbea:	f00e fdd1 	bl	2a790 <memcmp>
   1bbee:	2800      	cmp	r0, #0
   1bbf0:	d1e9      	bne.n	1bbc6 <net_if_ipv6_prefix_rm+0xe>
		    iface->ipv6.prefix[i].len != len) {
   1bbf2:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1bbf6:	0093      	lsls	r3, r2, #2
   1bbf8:	4433      	add	r3, r6
   1bbfa:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1bbfe:	4543      	cmp	r3, r8
   1bc00:	d1e1      	bne.n	1bbc6 <net_if_ipv6_prefix_rm+0xe>
		net_if_ipv6_prefix_unset_timer(&iface->ipv6.prefix[i]);
   1bc02:	0127      	lsls	r7, r4, #4
   1bc04:	1b3a      	subs	r2, r7, r4
   1bc06:	0093      	lsls	r3, r2, #2
   1bc08:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   1bc0c:	18f0      	adds	r0, r6, r3
   1bc0e:	3010      	adds	r0, #16
   1bc10:	f7ff ffca 	bl	1bba8 <net_if_ipv6_prefix_unset_timer>
		iface->ipv6.prefix[i].is_used = false;
   1bc14:	1b3c      	subs	r4, r7, r4
   1bc16:	00a3      	lsls	r3, r4, #2
   1bc18:	4433      	add	r3, r6
   1bc1a:	2200      	movs	r2, #0
   1bc1c:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
   1bc20:	4613      	mov	r3, r2
   1bc22:	4631      	mov	r1, r6
   1bc24:	4803      	ldr	r0, [pc, #12]	; (1bc34 <net_if_ipv6_prefix_rm+0x7c>)
   1bc26:	f007 fa2b 	bl	23080 <net_mgmt_event_notify_with_info>
		return true;
   1bc2a:	e000      	b.n	1bc2e <net_if_ipv6_prefix_rm+0x76>
	return false;
   1bc2c:	2500      	movs	r5, #0
}
   1bc2e:	4628      	mov	r0, r5
   1bc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bc34:	f0600006 	.word	0xf0600006

0001bc38 <net_if_ipv6_router_lookup>:
{
   1bc38:	b570      	push	{r4, r5, r6, lr}
   1bc3a:	4605      	mov	r5, r0
   1bc3c:	460e      	mov	r6, r1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bc3e:	2400      	movs	r4, #0
   1bc40:	2c00      	cmp	r4, #0
   1bc42:	dd01      	ble.n	1bc48 <net_if_ipv6_router_lookup+0x10>
	return NULL;
   1bc44:	2000      	movs	r0, #0
}
   1bc46:	bd70      	pop	{r4, r5, r6, pc}
		if (!routers[i].is_used ||
   1bc48:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1bc4c:	009a      	lsls	r2, r3, #2
   1bc4e:	4b11      	ldr	r3, [pc, #68]	; (1bc94 <net_if_ipv6_router_lookup+0x5c>)
   1bc50:	4413      	add	r3, r2
   1bc52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1bc56:	b123      	cbz	r3, 1bc62 <net_if_ipv6_router_lookup+0x2a>
		    routers[i].address.family != AF_INET6 ||
   1bc58:	4b0e      	ldr	r3, [pc, #56]	; (1bc94 <net_if_ipv6_router_lookup+0x5c>)
   1bc5a:	4413      	add	r3, r2
   1bc5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		if (!routers[i].is_used ||
   1bc5e:	2b0a      	cmp	r3, #10
   1bc60:	d001      	beq.n	1bc66 <net_if_ipv6_router_lookup+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bc62:	3401      	adds	r4, #1
   1bc64:	e7ec      	b.n	1bc40 <net_if_ipv6_router_lookup+0x8>
		    routers[i].iface != iface) {
   1bc66:	4b0b      	ldr	r3, [pc, #44]	; (1bc94 <net_if_ipv6_router_lookup+0x5c>)
   1bc68:	4413      	add	r3, r2
   1bc6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		    routers[i].address.family != AF_INET6 ||
   1bc6c:	42ab      	cmp	r3, r5
   1bc6e:	d1f8      	bne.n	1bc62 <net_if_ipv6_router_lookup+0x2a>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   1bc70:	eb04 1204 	add.w	r2, r4, r4, lsl #4
   1bc74:	0093      	lsls	r3, r2, #2
   1bc76:	3328      	adds	r3, #40	; 0x28
   1bc78:	4a06      	ldr	r2, [pc, #24]	; (1bc94 <net_if_ipv6_router_lookup+0x5c>)
   1bc7a:	4413      	add	r3, r2
   1bc7c:	2210      	movs	r2, #16
   1bc7e:	4631      	mov	r1, r6
   1bc80:	1d18      	adds	r0, r3, #4
   1bc82:	f00e fd85 	bl	2a790 <memcmp>
   1bc86:	2800      	cmp	r0, #0
   1bc88:	d1eb      	bne.n	1bc62 <net_if_ipv6_router_lookup+0x2a>
			return &routers[i];
   1bc8a:	2344      	movs	r3, #68	; 0x44
   1bc8c:	4801      	ldr	r0, [pc, #4]	; (1bc94 <net_if_ipv6_router_lookup+0x5c>)
   1bc8e:	fb03 0004 	mla	r0, r3, r4, r0
   1bc92:	bd70      	pop	{r4, r5, r6, pc}
   1bc94:	20002144 	.word	0x20002144

0001bc98 <net_if_ipv6_router_find_default>:
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bc98:	2300      	movs	r3, #0
   1bc9a:	2b00      	cmp	r3, #0
   1bc9c:	dd01      	ble.n	1bca2 <net_if_ipv6_router_find_default+0xa>
	return NULL;
   1bc9e:	2000      	movs	r0, #0
}
   1bca0:	4770      	bx	lr
		if (!routers[i].is_used ||
   1bca2:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   1bca6:	0091      	lsls	r1, r2, #2
   1bca8:	4a0e      	ldr	r2, [pc, #56]	; (1bce4 <net_if_ipv6_router_find_default+0x4c>)
   1bcaa:	440a      	add	r2, r1
   1bcac:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
   1bcb0:	b14a      	cbz	r2, 1bcc6 <net_if_ipv6_router_find_default+0x2e>
		    !routers[i].is_default ||
   1bcb2:	4a0c      	ldr	r2, [pc, #48]	; (1bce4 <net_if_ipv6_router_find_default+0x4c>)
   1bcb4:	440a      	add	r2, r1
   1bcb6:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
		if (!routers[i].is_used ||
   1bcba:	b122      	cbz	r2, 1bcc6 <net_if_ipv6_router_find_default+0x2e>
		    routers[i].address.family != AF_INET6) {
   1bcbc:	4a09      	ldr	r2, [pc, #36]	; (1bce4 <net_if_ipv6_router_find_default+0x4c>)
   1bcbe:	440a      	add	r2, r1
   1bcc0:	8d12      	ldrh	r2, [r2, #40]	; 0x28
		    !routers[i].is_default ||
   1bcc2:	2a0a      	cmp	r2, #10
   1bcc4:	d001      	beq.n	1bcca <net_if_ipv6_router_find_default+0x32>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bcc6:	3301      	adds	r3, #1
   1bcc8:	e7e7      	b.n	1bc9a <net_if_ipv6_router_find_default+0x2>
		if (iface && iface != routers[i].iface) {
   1bcca:	b120      	cbz	r0, 1bcd6 <net_if_ipv6_router_find_default+0x3e>
   1bccc:	4a05      	ldr	r2, [pc, #20]	; (1bce4 <net_if_ipv6_router_find_default+0x4c>)
   1bcce:	440a      	add	r2, r1
   1bcd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   1bcd2:	4290      	cmp	r0, r2
   1bcd4:	d1f7      	bne.n	1bcc6 <net_if_ipv6_router_find_default+0x2e>
		return &routers[i];
   1bcd6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1bcda:	009a      	lsls	r2, r3, #2
   1bcdc:	4801      	ldr	r0, [pc, #4]	; (1bce4 <net_if_ipv6_router_find_default+0x4c>)
   1bcde:	4410      	add	r0, r2
   1bce0:	4770      	bx	lr
   1bce2:	bf00      	nop
   1bce4:	20002144 	.word	0x20002144

0001bce8 <net_if_ipv6_router_update_lifetime>:
}

void net_if_ipv6_router_update_lifetime(struct net_if_router *router,
					u32_t lifetime)
{
   1bce8:	b508      	push	{r3, lr}
   1bcea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bcee:	fb02 f201 	mul.w	r2, r2, r1
   1bcf2:	4601      	mov	r1, r0
   1bcf4:	4801      	ldr	r0, [pc, #4]	; (1bcfc <net_if_ipv6_router_update_lifetime+0x14>)
   1bcf6:	f00e f975 	bl	29fe4 <k_delayed_work_submit_to_queue>
   1bcfa:	bd08      	pop	{r3, pc}
   1bcfc:	20003158 	.word	0x20003158

0001bd00 <net_if_ipv6_router_add>:
}

struct net_if_router *net_if_ipv6_router_add(struct net_if *iface,
					     struct in6_addr *addr,
					     u16_t lifetime)
{
   1bd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd04:	b084      	sub	sp, #16
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bd06:	2300      	movs	r3, #0
   1bd08:	2b00      	cmp	r3, #0
   1bd0a:	dd04      	ble.n	1bd16 <net_if_ipv6_router_add+0x16>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);

		return &routers[i];
	}

	return NULL;
   1bd0c:	2400      	movs	r4, #0
}
   1bd0e:	4620      	mov	r0, r4
   1bd10:	b004      	add	sp, #16
   1bd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (routers[i].is_used) {
   1bd16:	eb03 1403 	add.w	r4, r3, r3, lsl #4
   1bd1a:	00a5      	lsls	r5, r4, #2
   1bd1c:	4c20      	ldr	r4, [pc, #128]	; (1bda0 <net_if_ipv6_router_add+0xa0>)
   1bd1e:	442c      	add	r4, r5
   1bd20:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
   1bd24:	b10c      	cbz	r4, 1bd2a <net_if_ipv6_router_add+0x2a>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bd26:	3301      	adds	r3, #1
   1bd28:	e7ee      	b.n	1bd08 <net_if_ipv6_router_add+0x8>
   1bd2a:	4616      	mov	r6, r2
   1bd2c:	460f      	mov	r7, r1
   1bd2e:	4680      	mov	r8, r0
		net_if_router_init(&routers[i], iface, addr, lifetime);
   1bd30:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1bd34:	009a      	lsls	r2, r3, #2
   1bd36:	4c1a      	ldr	r4, [pc, #104]	; (1bda0 <net_if_ipv6_router_add+0xa0>)
   1bd38:	4414      	add	r4, r2
	router->is_used = true;
   1bd3a:	2301      	movs	r3, #1
   1bd3c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	router->iface = iface;
   1bd40:	63e0      	str	r0, [r4, #60]	; 0x3c
	router->address.family = AF_INET6;
   1bd42:	230a      	movs	r3, #10
   1bd44:	8523      	strh	r3, [r4, #40]	; 0x28
	net_ipaddr_copy(&router->address.in6_addr, addr);
   1bd46:	466d      	mov	r5, sp
   1bd48:	6808      	ldr	r0, [r1, #0]
   1bd4a:	6849      	ldr	r1, [r1, #4]
   1bd4c:	68ba      	ldr	r2, [r7, #8]
   1bd4e:	68fb      	ldr	r3, [r7, #12]
   1bd50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1bd52:	466d      	mov	r5, sp
   1bd54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1bd56:	62e0      	str	r0, [r4, #44]	; 0x2c
   1bd58:	6321      	str	r1, [r4, #48]	; 0x30
   1bd5a:	6362      	str	r2, [r4, #52]	; 0x34
   1bd5c:	63a3      	str	r3, [r4, #56]	; 0x38
	if (lifetime) {
   1bd5e:	b966      	cbnz	r6, 1bd7a <net_if_ipv6_router_add+0x7a>
		router->is_default = false;
   1bd60:	2300      	movs	r3, #0
   1bd62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = true;
   1bd66:	2301      	movs	r3, #1
   1bd68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1bd6c:	2300      	movs	r3, #0
   1bd6e:	461a      	mov	r2, r3
   1bd70:	4641      	mov	r1, r8
   1bd72:	480c      	ldr	r0, [pc, #48]	; (1bda4 <net_if_ipv6_router_add+0xa4>)
   1bd74:	f007 f984 	bl	23080 <net_mgmt_event_notify_with_info>
		return &routers[i];
   1bd78:	e7c9      	b.n	1bd0e <net_if_ipv6_router_add+0xe>
		router->is_default = true;
   1bd7a:	2301      	movs	r3, #1
   1bd7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = false;
   1bd80:	2300      	movs	r3, #0
   1bd82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1bd86:	4908      	ldr	r1, [pc, #32]	; (1bda8 <net_if_ipv6_router_add+0xa8>)
   1bd88:	4620      	mov	r0, r4
   1bd8a:	f00e f8b3 	bl	29ef4 <k_delayed_work_init>
   1bd8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bd92:	fb02 f206 	mul.w	r2, r2, r6
   1bd96:	4621      	mov	r1, r4
   1bd98:	4804      	ldr	r0, [pc, #16]	; (1bdac <net_if_ipv6_router_add+0xac>)
   1bd9a:	f00e f923 	bl	29fe4 <k_delayed_work_submit_to_queue>
   1bd9e:	e7e5      	b.n	1bd6c <net_if_ipv6_router_add+0x6c>
   1bda0:	20002144 	.word	0x20002144
   1bda4:	f0600009 	.word	0xf0600009
   1bda8:	0001b17d 	.word	0x0001b17d
   1bdac:	20003158 	.word	0x20003158

0001bdb0 <net_if_ipv6_router_rm>:

bool net_if_ipv6_router_rm(struct net_if_router *router)
{
   1bdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bdb4:	2400      	movs	r4, #0
   1bdb6:	2c00      	cmp	r4, #0
   1bdb8:	dd03      	ble.n	1bdc2 <net_if_ipv6_router_rm+0x12>
			i, net_sprint_ipv6_addr(&routers[i].address.in6_addr));

		return true;
	}

	return false;
   1bdba:	2500      	movs	r5, #0
}
   1bdbc:	4628      	mov	r0, r5
   1bdbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!routers[i].is_used) {
   1bdc2:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1bdc6:	009a      	lsls	r2, r3, #2
   1bdc8:	4b0d      	ldr	r3, [pc, #52]	; (1be00 <net_if_ipv6_router_rm+0x50>)
   1bdca:	4413      	add	r3, r2
   1bdcc:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
   1bdd0:	b11d      	cbz	r5, 1bdda <net_if_ipv6_router_rm+0x2a>
		if (&routers[i] != router) {
   1bdd2:	4b0b      	ldr	r3, [pc, #44]	; (1be00 <net_if_ipv6_router_rm+0x50>)
   1bdd4:	4413      	add	r3, r2
   1bdd6:	4283      	cmp	r3, r0
   1bdd8:	d001      	beq.n	1bdde <net_if_ipv6_router_rm+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bdda:	3401      	adds	r4, #1
   1bddc:	e7eb      	b.n	1bdb6 <net_if_ipv6_router_rm+0x6>
		k_delayed_work_cancel(&routers[i].lifetime);
   1bdde:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1be00 <net_if_ipv6_router_rm+0x50>
   1bde2:	4617      	mov	r7, r2
   1bde4:	4447      	add	r7, r8
   1bde6:	4638      	mov	r0, r7
   1bde8:	f00e f8a2 	bl	29f30 <k_delayed_work_cancel>
		routers[i].is_used = false;
   1bdec:	2200      	movs	r2, #0
   1bdee:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
   1bdf2:	4613      	mov	r3, r2
   1bdf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1bdf6:	4803      	ldr	r0, [pc, #12]	; (1be04 <net_if_ipv6_router_rm+0x54>)
   1bdf8:	f007 f942 	bl	23080 <net_mgmt_event_notify_with_info>
		return true;
   1bdfc:	e7de      	b.n	1bdbc <net_if_ipv6_router_rm+0xc>
   1bdfe:	bf00      	nop
   1be00:	20002144 	.word	0x20002144
   1be04:	f060000a 	.word	0xf060000a

0001be08 <net_if_ipv6_get_ll>:

struct in6_addr *net_if_ipv6_get_ll(struct net_if *iface,
				    enum net_addr_state addr_state)
{
   1be08:	b430      	push	{r4, r5}
   1be0a:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1be0c:	2300      	movs	r3, #0
   1be0e:	e006      	b.n	1be1e <net_if_ipv6_get_ll+0x16>
		if (!iface->ipv6.unicast[i].is_used ||
		    (addr_state != NET_ADDR_ANY_STATE &&
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1be10:	226c      	movs	r2, #108	; 0x6c
   1be12:	fb02 4203 	mla	r2, r2, r3, r4
   1be16:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1be18:	2a0a      	cmp	r2, #10
   1be1a:	d014      	beq.n	1be46 <net_if_ipv6_get_ll+0x3e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1be1c:	3301      	adds	r3, #1
   1be1e:	2b02      	cmp	r3, #2
   1be20:	dc1d      	bgt.n	1be5e <net_if_ipv6_get_ll+0x56>
		if (!iface->ipv6.unicast[i].is_used ||
   1be22:	226c      	movs	r2, #108	; 0x6c
   1be24:	fb02 4203 	mla	r2, r2, r3, r4
   1be28:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1be2c:	2a00      	cmp	r2, #0
   1be2e:	d0f5      	beq.n	1be1c <net_if_ipv6_get_ll+0x14>
   1be30:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1be34:	d0ec      	beq.n	1be10 <net_if_ipv6_get_ll+0x8>
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1be36:	226c      	movs	r2, #108	; 0x6c
   1be38:	fb02 4203 	mla	r2, r2, r3, r4
   1be3c:	f992 2091 	ldrsb.w	r2, [r2, #145]	; 0x91
		    (addr_state != NET_ADDR_ANY_STATE &&
   1be40:	4291      	cmp	r1, r2
   1be42:	d1eb      	bne.n	1be1c <net_if_ipv6_get_ll+0x14>
   1be44:	e7e4      	b.n	1be10 <net_if_ipv6_get_ll+0x8>
			continue;
		}
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   1be46:	206c      	movs	r0, #108	; 0x6c
   1be48:	fb00 f003 	mul.w	r0, r0, r3
   1be4c:	3020      	adds	r0, #32
   1be4e:	4420      	add	r0, r4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1be50:	f830 5f10 	ldrh.w	r5, [r0, #16]!
   1be54:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1be58:	4295      	cmp	r5, r2
   1be5a:	d1df      	bne.n	1be1c <net_if_ipv6_get_ll+0x14>
   1be5c:	e000      	b.n	1be60 <net_if_ipv6_get_ll+0x58>
			return &iface->ipv6.unicast[i].address.in6_addr;
		}
	}

	return NULL;
   1be5e:	2000      	movs	r0, #0
}
   1be60:	bc30      	pop	{r4, r5}
   1be62:	4770      	bx	lr

0001be64 <net_if_ipv6_select_src_addr>:
	return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   1be64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1be68:	4607      	mov	r7, r0
   1be6a:	880a      	ldrh	r2, [r1, #0]
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1be6c:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1be70:	429a      	cmp	r2, r3
   1be72:	f000 80d7 	beq.w	1c024 <net_if_ipv6_select_src_addr+0x1c0>
	return addr->s6_addr[0] == 0xFF;
   1be76:	780b      	ldrb	r3, [r1, #0]
   1be78:	2bff      	cmp	r3, #255	; 0xff
   1be7a:	d004      	beq.n	1be86 <net_if_ipv6_select_src_addr+0x22>
	u8_t best_match = 0;
   1be7c:	f04f 0900 	mov.w	r9, #0
   1be80:	4e74      	ldr	r6, [pc, #464]	; (1c054 <net_if_ipv6_select_src_addr+0x1f0>)
   1be82:	46c8      	mov	r8, r9
   1be84:	e05b      	b.n	1bf3e <net_if_ipv6_select_src_addr+0xda>
   1be86:	4c73      	ldr	r4, [pc, #460]	; (1c054 <net_if_ipv6_select_src_addr+0x1f0>)
   1be88:	e0c0      	b.n	1c00c <net_if_ipv6_select_src_addr+0x1a8>
	    addr->address.family == AF_INET6 &&
   1be8a:	246c      	movs	r4, #108	; 0x6c
   1be8c:	fb04 640e 	mla	r4, r4, lr, r6
   1be90:	8da4      	ldrh	r4, [r4, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1be92:	2c0a      	cmp	r4, #10
   1be94:	d01e      	beq.n	1bed4 <net_if_ipv6_select_src_addr+0x70>
	return false;
   1be96:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1be98:	bb8b      	cbnz	r3, 1befe <net_if_ipv6_select_src_addr+0x9a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1be9a:	f10e 0e01 	add.w	lr, lr, #1
   1be9e:	fa5f fe8e 	uxtb.w	lr, lr
   1bea2:	f1be 0f02 	cmp.w	lr, #2
   1bea6:	d846      	bhi.n	1bf36 <net_if_ipv6_select_src_addr+0xd2>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bea8:	46f4      	mov	ip, lr
   1beaa:	236c      	movs	r3, #108	; 0x6c
   1beac:	fb03 f30e 	mul.w	r3, r3, lr
   1beb0:	f103 0220 	add.w	r2, r3, #32
   1beb4:	4432      	add	r2, r6
   1beb6:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1beb8:	4433      	add	r3, r6
   1beba:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1bebe:	2b00      	cmp	r3, #0
   1bec0:	d0ea      	beq.n	1be98 <net_if_ipv6_select_src_addr+0x34>
   1bec2:	246c      	movs	r4, #108	; 0x6c
   1bec4:	fb04 640e 	mla	r4, r4, lr, r6
   1bec8:	f994 4091 	ldrsb.w	r4, [r4, #145]	; 0x91
   1becc:	2c01      	cmp	r4, #1
   1bece:	d0dc      	beq.n	1be8a <net_if_ipv6_select_src_addr+0x26>
	return false;
   1bed0:	2300      	movs	r3, #0
   1bed2:	e7e1      	b.n	1be98 <net_if_ipv6_select_src_addr+0x34>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1bed4:	8894      	ldrh	r4, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1bed6:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1beda:	4294      	cmp	r4, r2
   1bedc:	d1dc      	bne.n	1be98 <net_if_ipv6_select_src_addr+0x34>
	return false;
   1bede:	2300      	movs	r3, #0
   1bee0:	e7da      	b.n	1be98 <net_if_ipv6_select_src_addr+0x34>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1bee2:	4055      	eors	r5, r2
			for (k = 0; k < 8; k++) {
   1bee4:	2300      	movs	r3, #0
   1bee6:	2b07      	cmp	r3, #7
   1bee8:	d81b      	bhi.n	1bf22 <net_if_ipv6_select_src_addr+0xbe>
				if (!(xor & 0x80)) {
   1beea:	f015 0f80 	tst.w	r5, #128	; 0x80
   1beee:	d118      	bne.n	1bf22 <net_if_ipv6_select_src_addr+0xbe>
					len++;
   1bef0:	3401      	adds	r4, #1
   1bef2:	b2e4      	uxtb	r4, r4
					xor <<= 1;
   1bef4:	006d      	lsls	r5, r5, #1
   1bef6:	b2ed      	uxtb	r5, r5
			for (k = 0; k < 8; k++) {
   1bef8:	3301      	adds	r3, #1
   1befa:	b2db      	uxtb	r3, r3
   1befc:	e7f3      	b.n	1bee6 <net_if_ipv6_select_src_addr+0x82>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1befe:	2400      	movs	r4, #0
   1bf00:	4623      	mov	r3, r4
	for (j = 0; j < 16; j++) {
   1bf02:	2b0f      	cmp	r3, #15
   1bf04:	d80d      	bhi.n	1bf22 <net_if_ipv6_select_src_addr+0xbe>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1bf06:	5ccd      	ldrb	r5, [r1, r3]
   1bf08:	226c      	movs	r2, #108	; 0x6c
   1bf0a:	fb02 620c 	mla	r2, r2, ip, r6
   1bf0e:	441a      	add	r2, r3
   1bf10:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1bf14:	4295      	cmp	r5, r2
   1bf16:	d1e4      	bne.n	1bee2 <net_if_ipv6_select_src_addr+0x7e>
			len += 8;
   1bf18:	3408      	adds	r4, #8
   1bf1a:	b2e4      	uxtb	r4, r4
	for (j = 0; j < 16; j++) {
   1bf1c:	3301      	adds	r3, #1
   1bf1e:	b2db      	uxtb	r3, r3
   1bf20:	e7ef      	b.n	1bf02 <net_if_ipv6_select_src_addr+0x9e>
		if (len >= *best_so_far) {
   1bf22:	454c      	cmp	r4, r9
   1bf24:	d3b9      	bcc.n	1be9a <net_if_ipv6_select_src_addr+0x36>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1bf26:	206c      	movs	r0, #108	; 0x6c
   1bf28:	fb00 f00c 	mul.w	r0, r0, ip
   1bf2c:	3020      	adds	r0, #32
   1bf2e:	4430      	add	r0, r6
   1bf30:	3010      	adds	r0, #16
			*best_so_far = len;
   1bf32:	46a1      	mov	r9, r4
   1bf34:	e7b1      	b.n	1be9a <net_if_ipv6_select_src_addr+0x36>
		     iface++) {
			struct in6_addr *addr;

			addr = net_if_ipv6_get_best_match(iface, dst,
							  &best_match);
			if (addr) {
   1bf36:	b150      	cbz	r0, 1bf4e <net_if_ipv6_select_src_addr+0xea>
		     iface++) {
   1bf38:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
   1bf3c:	4680      	mov	r8, r0
		for (iface = __net_if_start;
   1bf3e:	b947      	cbnz	r7, 1bf52 <net_if_ipv6_select_src_addr+0xee>
		     !dst_iface && iface != __net_if_end;
   1bf40:	4b45      	ldr	r3, [pc, #276]	; (1c058 <net_if_ipv6_select_src_addr+0x1f4>)
   1bf42:	429e      	cmp	r6, r3
   1bf44:	d005      	beq.n	1bf52 <net_if_ipv6_select_src_addr+0xee>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bf46:	f04f 0e00 	mov.w	lr, #0
	struct in6_addr *src = NULL;
   1bf4a:	4670      	mov	r0, lr
   1bf4c:	e7a9      	b.n	1bea2 <net_if_ipv6_select_src_addr+0x3e>
			if (addr) {
   1bf4e:	4640      	mov	r0, r8
   1bf50:	e7f2      	b.n	1bf38 <net_if_ipv6_select_src_addr+0xd4>
				src = addr;
			}
		}

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
   1bf52:	2f00      	cmp	r7, #0
   1bf54:	d073      	beq.n	1c03e <net_if_ipv6_select_src_addr+0x1da>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bf56:	2500      	movs	r5, #0
	struct in6_addr *src = NULL;
   1bf58:	46a8      	mov	r8, r5
   1bf5a:	e009      	b.n	1bf70 <net_if_ipv6_select_src_addr+0x10c>
	    addr->address.family == AF_INET6 &&
   1bf5c:	206c      	movs	r0, #108	; 0x6c
   1bf5e:	fb00 7005 	mla	r0, r0, r5, r7
   1bf62:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1bf64:	280a      	cmp	r0, #10
   1bf66:	d01b      	beq.n	1bfa0 <net_if_ipv6_select_src_addr+0x13c>
	return false;
   1bf68:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bf6a:	bb73      	cbnz	r3, 1bfca <net_if_ipv6_select_src_addr+0x166>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bf6c:	3501      	adds	r5, #1
   1bf6e:	b2ed      	uxtb	r5, r5
   1bf70:	2d02      	cmp	r5, #2
   1bf72:	d864      	bhi.n	1c03e <net_if_ipv6_select_src_addr+0x1da>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bf74:	462e      	mov	r6, r5
   1bf76:	236c      	movs	r3, #108	; 0x6c
   1bf78:	fb03 f305 	mul.w	r3, r3, r5
   1bf7c:	f103 0220 	add.w	r2, r3, #32
   1bf80:	443a      	add	r2, r7
   1bf82:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1bf84:	443b      	add	r3, r7
   1bf86:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1bf8a:	2b00      	cmp	r3, #0
   1bf8c:	d0ed      	beq.n	1bf6a <net_if_ipv6_select_src_addr+0x106>
   1bf8e:	206c      	movs	r0, #108	; 0x6c
   1bf90:	fb00 7005 	mla	r0, r0, r5, r7
   1bf94:	f990 0091 	ldrsb.w	r0, [r0, #145]	; 0x91
   1bf98:	2801      	cmp	r0, #1
   1bf9a:	d0df      	beq.n	1bf5c <net_if_ipv6_select_src_addr+0xf8>
	return false;
   1bf9c:	2300      	movs	r3, #0
   1bf9e:	e7e4      	b.n	1bf6a <net_if_ipv6_select_src_addr+0x106>
   1bfa0:	8890      	ldrh	r0, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1bfa2:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1bfa6:	4290      	cmp	r0, r2
   1bfa8:	d1df      	bne.n	1bf6a <net_if_ipv6_select_src_addr+0x106>
	return false;
   1bfaa:	2300      	movs	r3, #0
   1bfac:	e7dd      	b.n	1bf6a <net_if_ipv6_select_src_addr+0x106>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1bfae:	4054      	eors	r4, r2
			for (k = 0; k < 8; k++) {
   1bfb0:	2300      	movs	r3, #0
   1bfb2:	2b07      	cmp	r3, #7
   1bfb4:	d81b      	bhi.n	1bfee <net_if_ipv6_select_src_addr+0x18a>
				if (!(xor & 0x80)) {
   1bfb6:	f014 0f80 	tst.w	r4, #128	; 0x80
   1bfba:	d118      	bne.n	1bfee <net_if_ipv6_select_src_addr+0x18a>
					len++;
   1bfbc:	3001      	adds	r0, #1
   1bfbe:	b2c0      	uxtb	r0, r0
					xor <<= 1;
   1bfc0:	0064      	lsls	r4, r4, #1
   1bfc2:	b2e4      	uxtb	r4, r4
			for (k = 0; k < 8; k++) {
   1bfc4:	3301      	adds	r3, #1
   1bfc6:	b2db      	uxtb	r3, r3
   1bfc8:	e7f3      	b.n	1bfb2 <net_if_ipv6_select_src_addr+0x14e>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bfca:	2000      	movs	r0, #0
   1bfcc:	4603      	mov	r3, r0
	for (j = 0; j < 16; j++) {
   1bfce:	2b0f      	cmp	r3, #15
   1bfd0:	d80d      	bhi.n	1bfee <net_if_ipv6_select_src_addr+0x18a>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1bfd2:	5ccc      	ldrb	r4, [r1, r3]
   1bfd4:	226c      	movs	r2, #108	; 0x6c
   1bfd6:	fb02 7206 	mla	r2, r2, r6, r7
   1bfda:	441a      	add	r2, r3
   1bfdc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1bfe0:	4294      	cmp	r4, r2
   1bfe2:	d1e4      	bne.n	1bfae <net_if_ipv6_select_src_addr+0x14a>
			len += 8;
   1bfe4:	3008      	adds	r0, #8
   1bfe6:	b2c0      	uxtb	r0, r0
	for (j = 0; j < 16; j++) {
   1bfe8:	3301      	adds	r3, #1
   1bfea:	b2db      	uxtb	r3, r3
   1bfec:	e7ef      	b.n	1bfce <net_if_ipv6_select_src_addr+0x16a>
		if (len >= *best_so_far) {
   1bfee:	4548      	cmp	r0, r9
   1bff0:	d3bc      	bcc.n	1bf6c <net_if_ipv6_select_src_addr+0x108>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1bff2:	f04f 086c 	mov.w	r8, #108	; 0x6c
   1bff6:	fb08 f806 	mul.w	r8, r8, r6
   1bffa:	f108 0820 	add.w	r8, r8, #32
   1bffe:	44b8      	add	r8, r7
   1c000:	f108 0810 	add.w	r8, r8, #16
			*best_so_far = len;
   1c004:	4681      	mov	r9, r0
   1c006:	e7b1      	b.n	1bf6c <net_if_ipv6_select_src_addr+0x108>
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
		     iface++) {
   1c008:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
		for (iface = __net_if_start;
   1c00c:	b97f      	cbnz	r7, 1c02e <net_if_ipv6_select_src_addr+0x1ca>
		     !dst_iface && iface != __net_if_end;
   1c00e:	4b12      	ldr	r3, [pc, #72]	; (1c058 <net_if_ipv6_select_src_addr+0x1f4>)
   1c010:	429c      	cmp	r4, r3
   1c012:	d009      	beq.n	1c028 <net_if_ipv6_select_src_addr+0x1c4>
			struct in6_addr *addr;

			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   1c014:	2101      	movs	r1, #1
   1c016:	4620      	mov	r0, r4
   1c018:	f7ff fef6 	bl	1be08 <net_if_ipv6_get_ll>
			if (addr) {
   1c01c:	4680      	mov	r8, r0
   1c01e:	2800      	cmp	r0, #0
   1c020:	d0f2      	beq.n	1c008 <net_if_ipv6_select_src_addr+0x1a4>
   1c022:	e006      	b.n	1c032 <net_if_ipv6_select_src_addr+0x1ce>
   1c024:	4c0b      	ldr	r4, [pc, #44]	; (1c054 <net_if_ipv6_select_src_addr+0x1f0>)
   1c026:	e7f1      	b.n	1c00c <net_if_ipv6_select_src_addr+0x1a8>
	struct in6_addr *src = NULL;
   1c028:	f04f 0800 	mov.w	r8, #0
   1c02c:	e001      	b.n	1c032 <net_if_ipv6_select_src_addr+0x1ce>
   1c02e:	f04f 0800 	mov.w	r8, #0
				src = addr;
				break;
			}
		}

		if (dst_iface) {
   1c032:	b127      	cbz	r7, 1c03e <net_if_ipv6_select_src_addr+0x1da>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1c034:	2101      	movs	r1, #1
   1c036:	4638      	mov	r0, r7
   1c038:	f7ff fee6 	bl	1be08 <net_if_ipv6_get_ll>
   1c03c:	4680      	mov	r8, r0
		}
	}

	if (!src) {
   1c03e:	f1b8 0f00 	cmp.w	r8, #0
   1c042:	d002      	beq.n	1c04a <net_if_ipv6_select_src_addr+0x1e6>
		return net_ipv6_unspecified_address();
	}

	return src;
   1c044:	4640      	mov	r0, r8
}
   1c046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return net_ipv6_unspecified_address();
   1c04a:	f003 fd67 	bl	1fb1c <net_ipv6_unspecified_address>
   1c04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c052:	bf00      	nop
   1c054:	2000d7c0 	.word	0x2000d7c0
   1c058:	2000da60 	.word	0x2000da60

0001c05c <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if *iface)
{
   1c05c:	b510      	push	{r4, lr}
   1c05e:	4604      	mov	r4, r0
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
		sys_rand32_get() %
   1c060:	f7e5 ffde 	bl	2020 <sys_rand32_get>
		(MAX_RANDOM_FACTOR * iface->ipv6.base_reachable_time -
   1c064:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
   1c068:	fbb0 f2f3 	udiv	r2, r0, r3
		 MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time);
}
   1c06c:	fb03 0012 	mls	r0, r3, r2, r0
   1c070:	bd10      	pop	{r4, pc}
	...

0001c074 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   1c074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c076:	4605      	mov	r5, r0
   1c078:	460e      	mov	r6, r1
   1c07a:	4617      	mov	r7, r2
	return list->head;
   1c07c:	4b11      	ldr	r3, [pc, #68]	; (1c0c4 <net_if_call_link_cb+0x50>)
   1c07e:	681b      	ldr	r3, [r3, #0]
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1c080:	b11b      	cbz	r3, 1c08a <net_if_call_link_cb+0x16>
   1c082:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c084:	b143      	cbz	r3, 1c098 <net_if_call_link_cb+0x24>
	return node->next;
   1c086:	681c      	ldr	r4, [r3, #0]
   1c088:	e006      	b.n	1c098 <net_if_call_link_cb+0x24>
   1c08a:	461c      	mov	r4, r3
   1c08c:	e004      	b.n	1c098 <net_if_call_link_cb+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c08e:	4623      	mov	r3, r4
   1c090:	e00e      	b.n	1c0b0 <net_if_call_link_cb+0x3c>
   1c092:	4622      	mov	r2, r4
   1c094:	4623      	mov	r3, r4
   1c096:	4614      	mov	r4, r2
   1c098:	b193      	cbz	r3, 1c0c0 <net_if_call_link_cb+0x4c>
		link->cb(iface, lladdr, status);
   1c09a:	685b      	ldr	r3, [r3, #4]
   1c09c:	463a      	mov	r2, r7
   1c09e:	4631      	mov	r1, r6
   1c0a0:	4628      	mov	r0, r5
   1c0a2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1c0a4:	2c00      	cmp	r4, #0
   1c0a6:	d0f4      	beq.n	1c092 <net_if_call_link_cb+0x1e>
   1c0a8:	4622      	mov	r2, r4
   1c0aa:	2c00      	cmp	r4, #0
   1c0ac:	d0ef      	beq.n	1c08e <net_if_call_link_cb+0x1a>
	return node->next;
   1c0ae:	6823      	ldr	r3, [r4, #0]
   1c0b0:	b113      	cbz	r3, 1c0b8 <net_if_call_link_cb+0x44>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c0b2:	b11a      	cbz	r2, 1c0bc <net_if_call_link_cb+0x48>
	return node->next;
   1c0b4:	6822      	ldr	r2, [r4, #0]
   1c0b6:	e7ed      	b.n	1c094 <net_if_call_link_cb+0x20>
   1c0b8:	2200      	movs	r2, #0
   1c0ba:	e7eb      	b.n	1c094 <net_if_call_link_cb+0x20>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c0bc:	2200      	movs	r2, #0
   1c0be:	e7e9      	b.n	1c094 <net_if_call_link_cb+0x20>
	}
}
   1c0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c0c2:	bf00      	nop
   1c0c4:	20002134 	.word	0x20002134

0001c0c8 <net_if_send_data>:
{
   1c0c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0cc:	4606      	mov	r6, r0
   1c0ce:	460c      	mov	r4, r1
	return pkt->context;
   1c0d0:	68cf      	ldr	r7, [r1, #12]
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_ll_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
   1c0d2:	f101 0928 	add.w	r9, r1, #40	; 0x28
	return pkt->token;
   1c0d6:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1c0da:	f3bf 8f5b 	dmb	ish
   1c0de:	68c3      	ldr	r3, [r0, #12]
   1c0e0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c0e4:	f013 0f01 	tst.w	r3, #1
   1c0e8:	d10a      	bne.n	1c100 <net_if_send_data+0x38>
		status = -ENETDOWN;
   1c0ea:	f06f 0872 	mvn.w	r8, #114	; 0x72
		verdict = NET_DROP;
   1c0ee:	2502      	movs	r5, #2
	if (context && verdict == NET_DROP) {
   1c0f0:	b10f      	cbz	r7, 1c0f6 <net_if_send_data+0x2e>
   1c0f2:	2d02      	cmp	r5, #2
   1c0f4:	d02e      	beq.n	1c154 <net_if_send_data+0x8c>
	if (verdict == NET_DROP && dst->addr) {
   1c0f6:	2d02      	cmp	r5, #2
   1c0f8:	d050      	beq.n	1c19c <net_if_send_data+0xd4>
}
   1c0fa:	4628      	mov	r0, r5
   1c0fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c100:	f3bf 8f5b 	dmb	ish
   1c104:	68c3      	ldr	r3, [r0, #12]
   1c106:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1c10a:	f013 0f02 	tst.w	r3, #2
   1c10e:	d101      	bne.n	1c114 <net_if_send_data+0x4c>
	    !net_pkt_ll_src(pkt)->addr) {
   1c110:	6a0b      	ldr	r3, [r1, #32]
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1c112:	b173      	cbz	r3, 1c132 <net_if_send_data+0x6a>
	return pkt->family;
   1c114:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1c118:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1c11c:	2b0a      	cmp	r3, #10
   1c11e:	d00f      	beq.n	1c140 <net_if_send_data+0x78>
   1c120:	4621      	mov	r1, r4
	verdict = iface->l2->send(iface, pkt);
   1c122:	6873      	ldr	r3, [r6, #4]
   1c124:	685b      	ldr	r3, [r3, #4]
   1c126:	4630      	mov	r0, r6
   1c128:	4798      	blx	r3
   1c12a:	4605      	mov	r5, r0
	int status = -EIO;
   1c12c:	f06f 0804 	mvn.w	r8, #4
   1c130:	e7de      	b.n	1c0f0 <net_if_send_data+0x28>
	return net_if_get_link_addr(pkt->iface);
   1c132:	694b      	ldr	r3, [r1, #20]
		net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1c134:	691a      	ldr	r2, [r3, #16]
   1c136:	620a      	str	r2, [r1, #32]
		net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1c138:	7d1b      	ldrb	r3, [r3, #20]
   1c13a:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
   1c13e:	e7e9      	b.n	1c114 <net_if_send_data+0x4c>
		pkt = net_ipv6_prepare_for_send(pkt);
   1c140:	4620      	mov	r0, r4
   1c142:	f005 f9fb 	bl	2153c <net_ipv6_prepare_for_send>
		if (!pkt) {
   1c146:	4601      	mov	r1, r0
   1c148:	2800      	cmp	r0, #0
   1c14a:	d1ea      	bne.n	1c122 <net_if_send_data+0x5a>
	int status = -EIO;
   1c14c:	f06f 0804 	mvn.w	r8, #4
			verdict = NET_CONTINUE;
   1c150:	2501      	movs	r5, #1
   1c152:	e7cd      	b.n	1c0f0 <net_if_send_data+0x28>
	if (!context) {
   1c154:	2f00      	cmp	r7, #0
   1c156:	d0ce      	beq.n	1c0f6 <net_if_send_data+0x2e>
	if (context->send_cb) {
   1c158:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
   1c15c:	f1bb 0f00 	cmp.w	fp, #0
   1c160:	d004      	beq.n	1c16c <net_if_send_data+0xa4>
		context->send_cb(context, status, token, context->user_data);
   1c162:	683b      	ldr	r3, [r7, #0]
   1c164:	4652      	mov	r2, sl
   1c166:	4641      	mov	r1, r8
   1c168:	4638      	mov	r0, r7
   1c16a:	47d8      	blx	fp
static inline
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_PROTO) {
   1c16c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1c170:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c174:	d009      	beq.n	1c18a <net_if_send_data+0xc2>
		return IPPROTO_TCP;
   1c176:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c178:	2b11      	cmp	r3, #17
   1c17a:	d008      	beq.n	1c18e <net_if_send_data+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c17c:	2b06      	cmp	r3, #6
   1c17e:	d1ba      	bne.n	1c0f6 <net_if_send_data+0x2e>
	net_stats.tcp.resent += bytes;
}

static inline void net_stats_update_tcp_seg_sent(void)
{
	net_stats.tcp.sent++;
   1c180:	4a0b      	ldr	r2, [pc, #44]	; (1c1b0 <net_if_send_data+0xe8>)
   1c182:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1c184:	3301      	adds	r3, #1
   1c186:	6593      	str	r3, [r2, #88]	; 0x58
   1c188:	e7b5      	b.n	1c0f6 <net_if_send_data+0x2e>
	}

	return IPPROTO_UDP;
   1c18a:	2311      	movs	r3, #17
   1c18c:	e7f4      	b.n	1c178 <net_if_send_data+0xb0>
	net_stats.udp.sent++;
   1c18e:	4a08      	ldr	r2, [pc, #32]	; (1c1b0 <net_if_send_data+0xe8>)
   1c190:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1c194:	3301      	adds	r3, #1
   1c196:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1c19a:	e7ac      	b.n	1c0f6 <net_if_send_data+0x2e>
	if (verdict == NET_DROP && dst->addr) {
   1c19c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c19e:	2b00      	cmp	r3, #0
   1c1a0:	d0ab      	beq.n	1c0fa <net_if_send_data+0x32>
		net_if_call_link_cb(iface, dst, status);
   1c1a2:	4642      	mov	r2, r8
   1c1a4:	4649      	mov	r1, r9
   1c1a6:	4630      	mov	r0, r6
   1c1a8:	f7ff ff64 	bl	1c074 <net_if_call_link_cb>
   1c1ac:	e7a5      	b.n	1c0fa <net_if_send_data+0x32>
   1c1ae:	bf00      	nop
   1c1b0:	20003038 	.word	0x20003038

0001c1b4 <net_if_tx>:
{
   1c1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c1b8:	4606      	mov	r6, r0
	const struct net_if_api *api = iface->dev->driver_api;
   1c1ba:	f850 3b18 	ldr.w	r3, [r0], #24
   1c1be:	f8d3 9004 	ldr.w	r9, [r3, #4]
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1c1c2:	2100      	movs	r1, #0
   1c1c4:	f00c fd56 	bl	28c74 <k_queue_get>
	if (!pkt) {
   1c1c8:	2800      	cmp	r0, #0
   1c1ca:	d062      	beq.n	1c292 <net_if_tx+0xde>
   1c1cc:	4605      	mov	r5, r0
	return &pkt->lladdr_dst;
   1c1ce:	f100 0828 	add.w	r8, r0, #40	; 0x28
	return pkt->context;
   1c1d2:	68c7      	ldr	r7, [r0, #12]
	return pkt->token;
   1c1d4:	f8d0 a010 	ldr.w	sl, [r0, #16]
   1c1d8:	f3bf 8f5b 	dmb	ish
   1c1dc:	68f3      	ldr	r3, [r6, #12]
   1c1de:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c1e2:	f013 0f01 	tst.w	r3, #1
   1c1e6:	d039      	beq.n	1c25c <net_if_tx+0xa8>
	return net_buf_frags_len(pkt->frags);
   1c1e8:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1c1ea:	2400      	movs	r4, #0
   1c1ec:	e002      	b.n	1c1f4 <net_if_tx+0x40>
		bytes += buf->len;
   1c1ee:	899a      	ldrh	r2, [r3, #12]
   1c1f0:	4414      	add	r4, r2
		buf = buf->frags;
   1c1f2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c1f4:	2b00      	cmp	r3, #0
   1c1f6:	d1fa      	bne.n	1c1ee <net_if_tx+0x3a>
	pkt->sent_or_eof = sent;
   1c1f8:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
	pkt->pkt_queued = send;
   1c1fc:	f043 0301 	orr.w	r3, r3, #1
   1c200:	f36f 0341 	bfc	r3, #1, #1
   1c204:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		status = api->send(iface, pkt);
   1c208:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1c20c:	4629      	mov	r1, r5
   1c20e:	4630      	mov	r0, r6
   1c210:	4798      	blx	r3
   1c212:	4681      	mov	r9, r0
	if (status < 0) {
   1c214:	f1b9 0f00 	cmp.w	r9, #0
   1c218:	db23      	blt.n	1c262 <net_if_tx+0xae>
	net_stats.bytes.sent += bytes;
   1c21a:	4a21      	ldr	r2, [pc, #132]	; (1c2a0 <net_if_tx+0xec>)
   1c21c:	6853      	ldr	r3, [r2, #4]
   1c21e:	441c      	add	r4, r3
   1c220:	6054      	str	r4, [r2, #4]
	if (context) {
   1c222:	b18f      	cbz	r7, 1c248 <net_if_tx+0x94>
	if (!context) {
   1c224:	b187      	cbz	r7, 1c248 <net_if_tx+0x94>
	if (context->send_cb) {
   1c226:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   1c228:	b124      	cbz	r4, 1c234 <net_if_tx+0x80>
		context->send_cb(context, status, token, context->user_data);
   1c22a:	683b      	ldr	r3, [r7, #0]
   1c22c:	4652      	mov	r2, sl
   1c22e:	4649      	mov	r1, r9
   1c230:	4638      	mov	r0, r7
   1c232:	47a0      	blx	r4
	if (context->flags & NET_CONTEXT_PROTO) {
   1c234:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1c238:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c23c:	d01b      	beq.n	1c276 <net_if_tx+0xc2>
		return IPPROTO_TCP;
   1c23e:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c240:	2b11      	cmp	r3, #17
   1c242:	d01a      	beq.n	1c27a <net_if_tx+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c244:	2b06      	cmp	r3, #6
   1c246:	d01f      	beq.n	1c288 <net_if_tx+0xd4>
	if (dst->addr) {
   1c248:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c24a:	b32b      	cbz	r3, 1c298 <net_if_tx+0xe4>
		net_if_call_link_cb(iface, dst, status);
   1c24c:	464a      	mov	r2, r9
   1c24e:	4641      	mov	r1, r8
   1c250:	4630      	mov	r0, r6
   1c252:	f7ff ff0f 	bl	1c074 <net_if_call_link_cb>
	return true;
   1c256:	2001      	movs	r0, #1
   1c258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = -ENETDOWN;
   1c25c:	f06f 0972 	mvn.w	r9, #114	; 0x72
   1c260:	e7d8      	b.n	1c214 <net_if_tx+0x60>
	pkt->sent_or_eof = sent;
   1c262:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1c266:	f36f 0300 	bfc	r3, #0, #1
   1c26a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		net_pkt_unref(pkt);
   1c26e:	4628      	mov	r0, r5
   1c270:	f001 fa93 	bl	1d79a <net_pkt_unref>
   1c274:	e7d5      	b.n	1c222 <net_if_tx+0x6e>
	return IPPROTO_UDP;
   1c276:	2311      	movs	r3, #17
   1c278:	e7e2      	b.n	1c240 <net_if_tx+0x8c>
	net_stats.udp.sent++;
   1c27a:	4a09      	ldr	r2, [pc, #36]	; (1c2a0 <net_if_tx+0xec>)
   1c27c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1c280:	3301      	adds	r3, #1
   1c282:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1c286:	e7df      	b.n	1c248 <net_if_tx+0x94>
	net_stats.tcp.sent++;
   1c288:	4a05      	ldr	r2, [pc, #20]	; (1c2a0 <net_if_tx+0xec>)
   1c28a:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1c28c:	3301      	adds	r3, #1
   1c28e:	6593      	str	r3, [r2, #88]	; 0x58
   1c290:	e7da      	b.n	1c248 <net_if_tx+0x94>
		return false;
   1c292:	2000      	movs	r0, #0
   1c294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return true;
   1c298:	2001      	movs	r0, #1
}
   1c29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c29e:	bf00      	nop
   1c2a0:	20003038 	.word	0x20003038

0001c2a4 <net_if_flush_tx>:
	return (!list->head);
   1c2a4:	6983      	ldr	r3, [r0, #24]
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1c2a6:	b14b      	cbz	r3, 1c2bc <net_if_flush_tx+0x18>
{
   1c2a8:	b510      	push	{r4, lr}
   1c2aa:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1c2ac:	f00c fef8 	bl	290a0 <_impl_k_yield>
		if (!net_if_tx(iface)) {
   1c2b0:	4620      	mov	r0, r4
   1c2b2:	f7ff ff7f 	bl	1c1b4 <net_if_tx>
   1c2b6:	2800      	cmp	r0, #0
   1c2b8:	d1fa      	bne.n	1c2b0 <net_if_flush_tx+0xc>
   1c2ba:	bd10      	pop	{r4, pc}
   1c2bc:	4770      	bx	lr

0001c2be <net_if_process_events>:
{
   1c2be:	b538      	push	{r3, r4, r5, lr}
   1c2c0:	4604      	mov	r4, r0
   1c2c2:	460d      	mov	r5, r1
	for (; ev_count; event++, ev_count--) {
   1c2c4:	e001      	b.n	1c2ca <net_if_process_events+0xc>
   1c2c6:	3414      	adds	r4, #20
   1c2c8:	3d01      	subs	r5, #1
   1c2ca:	b145      	cbz	r5, 1c2de <net_if_process_events+0x20>
		switch (event->state) {
   1c2cc:	7b63      	ldrb	r3, [r4, #13]
   1c2ce:	091b      	lsrs	r3, r3, #4
   1c2d0:	2b04      	cmp	r3, #4
   1c2d2:	d1f8      	bne.n	1c2c6 <net_if_process_events+0x8>
			iface = CONTAINER_OF(event->fifo, struct net_if,
   1c2d4:	6920      	ldr	r0, [r4, #16]
			net_if_tx(iface);
   1c2d6:	3818      	subs	r0, #24
   1c2d8:	f7ff ff6c 	bl	1c1b4 <net_if_tx>
			break;
   1c2dc:	e7f3      	b.n	1c2c6 <net_if_process_events+0x8>
}
   1c2de:	bd38      	pop	{r3, r4, r5, pc}

0001c2e0 <net_if_tx_thread>:
{
   1c2e0:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c2e2:	f00d f836 	bl	29352 <_impl_k_sem_give>
		ev_count = net_if_prepare_events();
   1c2e6:	f7ff f849 	bl	1b37c <net_if_prepare_events>
   1c2ea:	4605      	mov	r5, r0
		ret = k_poll(__net_if_event_start, ev_count, K_FOREVER);
   1c2ec:	4c06      	ldr	r4, [pc, #24]	; (1c308 <net_if_tx_thread+0x28>)
   1c2ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c2f2:	4601      	mov	r1, r0
   1c2f4:	4620      	mov	r0, r4
   1c2f6:	f00c f98b 	bl	28610 <k_poll>
		net_if_process_events(__net_if_event_start, ev_count);
   1c2fa:	4629      	mov	r1, r5
   1c2fc:	4620      	mov	r0, r4
   1c2fe:	f7ff ffde 	bl	1c2be <net_if_process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1c302:	f00c fecd 	bl	290a0 <_impl_k_yield>
   1c306:	e7ee      	b.n	1c2e6 <net_if_tx_thread+0x6>
   1c308:	2000da60 	.word	0x2000da60

0001c30c <net_if_get_by_index>:

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   1c30c:	4a05      	ldr	r2, [pc, #20]	; (1c324 <net_if_get_by_index+0x18>)
   1c30e:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   1c312:	fb03 2000 	mla	r0, r3, r0, r2
   1c316:	4b04      	ldr	r3, [pc, #16]	; (1c328 <net_if_get_by_index+0x1c>)
   1c318:	4298      	cmp	r0, r3
   1c31a:	d200      	bcs.n	1c31e <net_if_get_by_index+0x12>
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   1c31c:	4770      	bx	lr
		return NULL;
   1c31e:	2000      	movs	r0, #0
   1c320:	e7fc      	b.n	1c31c <net_if_get_by_index+0x10>
   1c322:	bf00      	nop
   1c324:	2000d7c0 	.word	0x2000d7c0
   1c328:	2000da60 	.word	0x2000da60

0001c32c <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);

	return iface - __net_if_start;
   1c32c:	4b03      	ldr	r3, [pc, #12]	; (1c33c <net_if_get_by_iface+0x10>)
   1c32e:	1ac0      	subs	r0, r0, r3
   1c330:	1140      	asrs	r0, r0, #5
   1c332:	4b03      	ldr	r3, [pc, #12]	; (1c340 <net_if_get_by_iface+0x14>)
   1c334:	fb03 f000 	mul.w	r0, r3, r0
}
   1c338:	b2c0      	uxtb	r0, r0
   1c33a:	4770      	bx	lr
   1c33c:	2000d7c0 	.word	0x2000d7c0
   1c340:	3cf3cf3d 	.word	0x3cf3cf3d

0001c344 <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
   1c344:	b570      	push	{r4, r5, r6, lr}
   1c346:	4606      	mov	r6, r0
   1c348:	460d      	mov	r5, r1
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c34a:	4c05      	ldr	r4, [pc, #20]	; (1c360 <net_if_foreach+0x1c>)
   1c34c:	e004      	b.n	1c358 <net_if_foreach+0x14>
		cb(iface, user_data);
   1c34e:	4629      	mov	r1, r5
   1c350:	4620      	mov	r0, r4
   1c352:	47b0      	blx	r6
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c354:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1c358:	4b02      	ldr	r3, [pc, #8]	; (1c364 <net_if_foreach+0x20>)
   1c35a:	429c      	cmp	r4, r3
   1c35c:	d1f7      	bne.n	1c34e <net_if_foreach+0xa>
	}
}
   1c35e:	bd70      	pop	{r4, r5, r6, pc}
   1c360:	2000d7c0 	.word	0x2000d7c0
   1c364:	2000da60 	.word	0x2000da60

0001c368 <net_if_up>:

int net_if_up(struct net_if *iface)
{
   1c368:	b570      	push	{r4, r5, r6, lr}
   1c36a:	f3bf 8f5b 	dmb	ish
   1c36e:	68c5      	ldr	r5, [r0, #12]
   1c370:	f3bf 8f5b 	dmb	ish
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c374:	f015 0501 	ands.w	r5, r5, #1
   1c378:	d123      	bne.n	1c3c2 <net_if_up+0x5a>
   1c37a:	f100 060c 	add.w	r6, r0, #12
   1c37e:	4604      	mov	r4, r0
		return 0;
	}

	/* If the L2 does not support enable just set the flag */
	if (!iface->l2->enable) {
   1c380:	6843      	ldr	r3, [r0, #4]
   1c382:	68db      	ldr	r3, [r3, #12]
   1c384:	b11b      	cbz	r3, 1c38e <net_if_up+0x26>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = iface->l2->enable(iface, true);
   1c386:	2101      	movs	r1, #1
   1c388:	4798      	blx	r3
	if (status < 0) {
   1c38a:	2800      	cmp	r0, #0
   1c38c:	db1b      	blt.n	1c3c6 <net_if_up+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c38e:	f3bf 8f5b 	dmb	ish
   1c392:	e856 3f00 	ldrex	r3, [r6]
   1c396:	f043 0301 	orr.w	r3, r3, #1
   1c39a:	e846 3200 	strex	r2, r3, [r6]
   1c39e:	2a00      	cmp	r2, #0
   1c3a0:	d1f7      	bne.n	1c392 <net_if_up+0x2a>
   1c3a2:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   1c3a6:	4620      	mov	r0, r4
   1c3a8:	f7ff f91e 	bl	1b5e8 <net_if_start_dad>
	join_mcast_solicit_node(iface, &iface->ipv6.mcast[0].address.in6_addr);
#endif

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   1c3ac:	4620      	mov	r0, r4
   1c3ae:	f7ff f821 	bl	1b3f4 <net_if_start_rs>
   1c3b2:	2300      	movs	r3, #0
   1c3b4:	461a      	mov	r2, r3
   1c3b6:	4621      	mov	r1, r4
   1c3b8:	4804      	ldr	r0, [pc, #16]	; (1c3cc <net_if_up+0x64>)
   1c3ba:	f006 fe61 	bl	23080 <net_mgmt_event_notify_with_info>
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   1c3be:	4628      	mov	r0, r5
   1c3c0:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1c3c2:	2500      	movs	r5, #0
   1c3c4:	e7fb      	b.n	1c3be <net_if_up+0x56>
		return status;
   1c3c6:	4605      	mov	r5, r0
   1c3c8:	e7f9      	b.n	1c3be <net_if_up+0x56>
   1c3ca:	bf00      	nop
   1c3cc:	d0010002 	.word	0xd0010002

0001c3d0 <net_if_down>:

int net_if_down(struct net_if *iface)
{
   1c3d0:	b510      	push	{r4, lr}
   1c3d2:	4604      	mov	r4, r0
	int status;

	NET_DBG("iface %p", iface);

	leave_mcast_all(iface);
   1c3d4:	f7fe ffaf 	bl	1b336 <leave_mcast_all>

	net_if_flush_tx(iface);
   1c3d8:	4620      	mov	r0, r4
   1c3da:	f7ff ff63 	bl	1c2a4 <net_if_flush_tx>

	/* If the L2 does not support enable just clear the flag */
	if (!iface->l2->enable) {
   1c3de:	6863      	ldr	r3, [r4, #4]
   1c3e0:	68db      	ldr	r3, [r3, #12]
   1c3e2:	b123      	cbz	r3, 1c3ee <net_if_down+0x1e>
		goto done;
	}

	/* Notify L2 to disable the interface */
	status = iface->l2->enable(iface, false);
   1c3e4:	2100      	movs	r1, #0
   1c3e6:	4620      	mov	r0, r4
   1c3e8:	4798      	blx	r3
	if (status < 0) {
   1c3ea:	2800      	cmp	r0, #0
   1c3ec:	db14      	blt.n	1c418 <net_if_down+0x48>
		return status;
	}

done:
	atomic_clear_bit(iface->flags, NET_IF_UP);
   1c3ee:	f104 030c 	add.w	r3, r4, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c3f2:	f3bf 8f5b 	dmb	ish
   1c3f6:	e853 2f00 	ldrex	r2, [r3]
   1c3fa:	f022 0201 	bic.w	r2, r2, #1
   1c3fe:	e843 2100 	strex	r1, r2, [r3]
   1c402:	2900      	cmp	r1, #0
   1c404:	d1f7      	bne.n	1c3f6 <net_if_down+0x26>
   1c406:	f3bf 8f5b 	dmb	ish
   1c40a:	2300      	movs	r3, #0
   1c40c:	461a      	mov	r2, r3
   1c40e:	4621      	mov	r1, r4
   1c410:	4802      	ldr	r0, [pc, #8]	; (1c41c <net_if_down+0x4c>)
   1c412:	f006 fe35 	bl	23080 <net_mgmt_event_notify_with_info>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);

	return 0;
   1c416:	2000      	movs	r0, #0
}
   1c418:	bd10      	pop	{r4, pc}
   1c41a:	bf00      	nop
   1c41c:	d0010001 	.word	0xd0010001

0001c420 <net_if_init>:

void net_if_init(struct k_sem *startup_sync)
{
   1c420:	b570      	push	{r4, r5, r6, lr}
   1c422:	b086      	sub	sp, #24
   1c424:	4606      	mov	r6, r0
	struct net_if *iface;

	NET_DBG("");

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c426:	4c1b      	ldr	r4, [pc, #108]	; (1c494 <net_if_init+0x74>)
   1c428:	e01b      	b.n	1c462 <net_if_init+0x42>
	const struct net_if_api *api = iface->dev->driver_api;
   1c42a:	4620      	mov	r0, r4
   1c42c:	f850 3b18 	ldr.w	r3, [r0], #24
   1c430:	685d      	ldr	r5, [r3, #4]
	k_fifo_init(&iface->tx_queue);
   1c432:	f00c fbc4 	bl	28bbe <k_queue_init>
	api->init(iface);
   1c436:	682b      	ldr	r3, [r5, #0]
   1c438:	4620      	mov	r0, r4
   1c43a:	4798      	blx	r3
#if defined(CONFIG_NET_IPV4)
		iface->ipv4.ttl = CONFIG_NET_INITIAL_TTL;
#endif

#if defined(CONFIG_NET_IPV6)
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1c43c:	2340      	movs	r3, #64	; 0x40
   1c43e:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
		iface->ipv6.base_reachable_time = REACHABLE_TIME;
   1c442:	f247 5330 	movw	r3, #30000	; 0x7530
   1c446:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
 *
 * @param iface Network interface
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if *iface)
{
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1c44a:	4620      	mov	r0, r4
   1c44c:	f7ff fe06 	bl	1c05c <net_if_ipv6_calc_reachable_time>
   1c450:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c

		net_if_ipv6_set_reachable_time(iface);

#if defined(CONFIG_NET_IPV6_ND)
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1c454:	4910      	ldr	r1, [pc, #64]	; (1c498 <net_if_init+0x78>)
   1c456:	f504 7018 	add.w	r0, r4, #608	; 0x260
   1c45a:	f00d fd4b 	bl	29ef4 <k_delayed_work_init>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c45e:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1c462:	4b0e      	ldr	r3, [pc, #56]	; (1c49c <net_if_init+0x7c>)
   1c464:	429c      	cmp	r4, r3
   1c466:	d1e0      	bne.n	1c42a <net_if_init+0xa>
#endif
#endif
	}

	if (iface == __net_if_start) {
   1c468:	4b0a      	ldr	r3, [pc, #40]	; (1c494 <net_if_init+0x74>)
   1c46a:	429c      	cmp	r4, r3
   1c46c:	d010      	beq.n	1c490 <net_if_init+0x70>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1c46e:	2300      	movs	r3, #0
   1c470:	9305      	str	r3, [sp, #20]
   1c472:	2201      	movs	r2, #1
   1c474:	9204      	str	r2, [sp, #16]
   1c476:	f06f 0208 	mvn.w	r2, #8
   1c47a:	9203      	str	r2, [sp, #12]
   1c47c:	9302      	str	r3, [sp, #8]
   1c47e:	9301      	str	r3, [sp, #4]
   1c480:	9600      	str	r6, [sp, #0]
   1c482:	4b07      	ldr	r3, [pc, #28]	; (1c4a0 <net_if_init+0x80>)
   1c484:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1c488:	4906      	ldr	r1, [pc, #24]	; (1c4a4 <net_if_init+0x84>)
   1c48a:	4807      	ldr	r0, [pc, #28]	; (1c4a8 <net_if_init+0x88>)
   1c48c:	f00d f9e0 	bl	29850 <_impl_k_thread_create>
	k_thread_create(&tx_thread_data, tx_stack,
			K_THREAD_STACK_SIZEOF(tx_stack),
			(k_thread_entry_t)net_if_tx_thread,
			startup_sync, NULL, NULL, K_PRIO_COOP(7),
			K_ESSENTIAL, K_NO_WAIT);
}
   1c490:	b006      	add	sp, #24
   1c492:	bd70      	pop	{r4, r5, r6, pc}
   1c494:	2000d7c0 	.word	0x2000d7c0
   1c498:	0001b415 	.word	0x0001b415
   1c49c:	2000da60 	.word	0x2000da60
   1c4a0:	0001c2e1 	.word	0x0001c2e1
   1c4a4:	20005320 	.word	0x20005320
   1c4a8:	20000974 	.word	0x20000974

0001c4ac <net_if_post_init>:

void net_if_post_init(void)
{
   1c4ac:	b510      	push	{r4, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c4ae:	4c05      	ldr	r4, [pc, #20]	; (1c4c4 <net_if_post_init+0x18>)
   1c4b0:	e004      	b.n	1c4bc <net_if_post_init+0x10>
		net_if_up(iface);
   1c4b2:	4620      	mov	r0, r4
   1c4b4:	f7ff ff58 	bl	1c368 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c4b8:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1c4bc:	4b02      	ldr	r3, [pc, #8]	; (1c4c8 <net_if_post_init+0x1c>)
   1c4be:	429c      	cmp	r4, r3
   1c4c0:	d1f7      	bne.n	1c4b2 <net_if_post_init+0x6>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   1c4c2:	bd10      	pop	{r4, pc}
   1c4c4:	2000d7c0 	.word	0x2000d7c0
   1c4c8:	2000da60 	.word	0x2000da60

0001c4cc <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   1c4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c4ce:	4605      	mov	r5, r0
   1c4d0:	460e      	mov	r6, r1
   1c4d2:	4617      	mov	r7, r2
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c4d4:	2400      	movs	r4, #0
   1c4d6:	e003      	b.n	1c4e0 <check_used_port+0x14>
   1c4d8:	2311      	movs	r3, #17
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1c4da:	42ab      	cmp	r3, r5
   1c4dc:	d010      	beq.n	1c500 <check_used_port+0x34>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c4de:	3401      	adds	r4, #1
   1c4e0:	2c05      	cmp	r4, #5
   1c4e2:	dc2b      	bgt.n	1c53c <check_used_port+0x70>
	return context->flags & NET_CONTEXT_IN_USE;
   1c4e4:	2368      	movs	r3, #104	; 0x68
   1c4e6:	4a16      	ldr	r2, [pc, #88]	; (1c540 <check_used_port+0x74>)
   1c4e8:	fb03 2304 	mla	r3, r3, r4, r2
   1c4ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1c4f0:	f013 0f01 	tst.w	r3, #1
   1c4f4:	d0f3      	beq.n	1c4de <check_used_port+0x12>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c4f6:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c4fa:	d0ed      	beq.n	1c4d8 <check_used_port+0xc>
		return IPPROTO_TCP;
   1c4fc:	2306      	movs	r3, #6
   1c4fe:	e7ec      	b.n	1c4da <check_used_port+0xe>
		      net_sin((struct sockaddr *)&
   1c500:	2368      	movs	r3, #104	; 0x68
   1c502:	fb03 f304 	mul.w	r3, r3, r4
   1c506:	3308      	adds	r3, #8
   1c508:	4a0d      	ldr	r2, [pc, #52]	; (1c540 <check_used_port+0x74>)
   1c50a:	4413      	add	r3, r2
			      contexts[i].local)->sin_port == local_port)) {
   1c50c:	885a      	ldrh	r2, [r3, #2]
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1c50e:	42b2      	cmp	r2, r6
   1c510:	d1e5      	bne.n	1c4de <check_used_port+0x12>
			continue;
		}

		if (local_addr->sa_family == AF_INET6) {
   1c512:	883a      	ldrh	r2, [r7, #0]
   1c514:	2a0a      	cmp	r2, #10
   1c516:	d007      	beq.n	1c528 <check_used_port+0x5c>
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else {
			if (net_ipv4_addr_cmp(
				    net_sin_ptr(&contexts[i].local)->
   1c518:	685b      	ldr	r3, [r3, #4]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1c51a:	681a      	ldr	r2, [r3, #0]
   1c51c:	687b      	ldr	r3, [r7, #4]
			if (net_ipv4_addr_cmp(
   1c51e:	429a      	cmp	r2, r3
   1c520:	d1dd      	bne.n	1c4de <check_used_port+0x12>
							      sin_addr,
				    &((struct sockaddr_in *)
				      local_addr)->sin_addr)) {
				return -EEXIST;
   1c522:	f06f 0010 	mvn.w	r0, #16
			}
		}
	}

	return 0;
}
   1c526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1c528:	2210      	movs	r2, #16
   1c52a:	1d39      	adds	r1, r7, #4
   1c52c:	6858      	ldr	r0, [r3, #4]
   1c52e:	f00e f92f 	bl	2a790 <memcmp>
			if (net_ipv6_addr_cmp(
   1c532:	2800      	cmp	r0, #0
   1c534:	d1d3      	bne.n	1c4de <check_used_port+0x12>
				return -EEXIST;
   1c536:	f06f 0010 	mvn.w	r0, #16
   1c53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
   1c53c:	2000      	movs	r0, #0
   1c53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c540:	20002188 	.word	0x20002188

0001c544 <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1c544:	b570      	push	{r4, r5, r6, lr}
   1c546:	4606      	mov	r6, r0
   1c548:	460d      	mov	r5, r1
	if (!net_sin(addr)->sin_port) {
   1c54a:	884c      	ldrh	r4, [r1, #2]
   1c54c:	b16c      	cbz	r4, 1c56a <find_available_port+0x26>

		return htons(local_port);
	}

	return net_sin(addr)->sin_port;
}
   1c54e:	4620      	mov	r0, r4
   1c550:	bd70      	pop	{r4, r5, r6, pc}
	return IPPROTO_UDP;
   1c552:	2011      	movs	r0, #17
				 htons(local_port), addr) == -EEXIST);
   1c554:	0a1c      	lsrs	r4, r3, #8
   1c556:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
		} while (check_used_port(
   1c55a:	b29c      	uxth	r4, r3
   1c55c:	462a      	mov	r2, r5
   1c55e:	4621      	mov	r1, r4
   1c560:	f7ff ffb4 	bl	1c4cc <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   1c564:	f110 0f11 	cmn.w	r0, #17
   1c568:	d1f1      	bne.n	1c54e <find_available_port+0xa>
			local_port = sys_rand32_get() | 0x8000;
   1c56a:	f7e5 fd59 	bl	2020 <sys_rand32_get>
   1c56e:	ea6f 4040 	mvn.w	r0, r0, lsl #17
   1c572:	ea6f 4050 	mvn.w	r0, r0, lsr #17
   1c576:	b283      	uxth	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1c578:	f896 205d 	ldrb.w	r2, [r6, #93]	; 0x5d
   1c57c:	f012 0f40 	tst.w	r2, #64	; 0x40
   1c580:	d0e7      	beq.n	1c552 <find_available_port+0xe>
		return IPPROTO_TCP;
   1c582:	2006      	movs	r0, #6
   1c584:	e7e6      	b.n	1c554 <find_available_port+0x10>

0001c586 <queue_fin>:
	return ret;
}

#if defined(CONFIG_NET_TCP)
static void queue_fin(struct net_context *ctx)
{
   1c586:	b500      	push	{lr}
   1c588:	b087      	sub	sp, #28
   1c58a:	4603      	mov	r3, r0
	struct net_pkt *pkt = NULL;
   1c58c:	2200      	movs	r2, #0
   1c58e:	a906      	add	r1, sp, #24
   1c590:	f841 2d04 	str.w	r2, [r1, #-4]!
	int ret;

	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1c594:	6e00      	ldr	r0, [r0, #96]	; 0x60
				      NULL, &ctx->remote, &pkt);
   1c596:	3314      	adds	r3, #20
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1c598:	9102      	str	r1, [sp, #8]
   1c59a:	9301      	str	r3, [sp, #4]
   1c59c:	9200      	str	r2, [sp, #0]
   1c59e:	4613      	mov	r3, r2
   1c5a0:	2101      	movs	r1, #1
   1c5a2:	f007 f9dd 	bl	23960 <net_tcp_prepare_segment>
	if (ret || !pkt) {
   1c5a6:	b928      	cbnz	r0, 1c5b4 <queue_fin+0x2e>
   1c5a8:	9805      	ldr	r0, [sp, #20]
   1c5aa:	b118      	cbz	r0, 1c5b4 <queue_fin+0x2e>
		return;
	}

	ret = net_tcp_send_pkt(pkt);
   1c5ac:	f007 fcdc 	bl	23f68 <net_tcp_send_pkt>
	if (ret < 0) {
   1c5b0:	2800      	cmp	r0, #0
   1c5b2:	db02      	blt.n	1c5ba <queue_fin+0x34>
		net_pkt_unref(pkt);
	}
}
   1c5b4:	b007      	add	sp, #28
   1c5b6:	f85d fb04 	ldr.w	pc, [sp], #4
		net_pkt_unref(pkt);
   1c5ba:	9805      	ldr	r0, [sp, #20]
   1c5bc:	f001 f8ed 	bl	1d79a <net_pkt_unref>
   1c5c0:	e7f8      	b.n	1c5b4 <queue_fin+0x2e>

0001c5c2 <tcp_hdr_len>:

	return ret;
}

static int tcp_hdr_len(struct net_pkt *pkt)
{
   1c5c2:	b500      	push	{lr}
   1c5c4:	b087      	sub	sp, #28
	struct net_tcp_hdr hdr, *tcp_hdr;

	/* "Offset": 4-bit field in high nibble, units of dwords */
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1c5c6:	a901      	add	r1, sp, #4
   1c5c8:	f007 fb1c 	bl	23c04 <net_tcp_get_hdr>
	if (tcp_hdr) {
   1c5cc:	b128      	cbz	r0, 1c5da <tcp_hdr_len+0x18>
		return 4 * (tcp_hdr->offset >> 4);
   1c5ce:	7b00      	ldrb	r0, [r0, #12]
   1c5d0:	0900      	lsrs	r0, r0, #4
   1c5d2:	0080      	lsls	r0, r0, #2
	}

	return 0;
}
   1c5d4:	b007      	add	sp, #28
   1c5d6:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
   1c5da:	2000      	movs	r0, #0
   1c5dc:	e7fa      	b.n	1c5d4 <tcp_hdr_len+0x12>

0001c5de <set_appdata_values>:

	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
}

static void set_appdata_values(struct net_pkt *pkt, enum net_ip_protocol proto)
{
   1c5de:	b570      	push	{r4, r5, r6, lr}
   1c5e0:	b082      	sub	sp, #8
   1c5e2:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1c5e4:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1c5e6:	2400      	movs	r4, #0
   1c5e8:	e002      	b.n	1c5f0 <set_appdata_values+0x12>
		bytes += buf->len;
   1c5ea:	899a      	ldrh	r2, [r3, #12]
   1c5ec:	4414      	add	r4, r2
		buf = buf->frags;
   1c5ee:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c5f0:	2b00      	cmp	r3, #0
   1c5f2:	d1fa      	bne.n	1c5ea <set_appdata_values+0xc>
	u16_t proto_len = 0;
	struct net_buf *frag;
	u16_t offset;

#if defined(CONFIG_NET_UDP)
	if (proto == IPPROTO_UDP) {
   1c5f4:	2911      	cmp	r1, #17
   1c5f6:	d020      	beq.n	1c63a <set_appdata_values+0x5c>
	u16_t proto_len = 0;
   1c5f8:	2600      	movs	r6, #0
		proto_len = sizeof(struct net_udp_hdr);
	}
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (proto == IPPROTO_TCP) {
   1c5fa:	2906      	cmp	r1, #6
   1c5fc:	d01f      	beq.n	1c63e <set_appdata_values+0x60>
		proto_len = tcp_hdr_len(pkt);
	}
#endif /* CONFIG_NET_TCP */

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1c5fe:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1c602:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1c606:	4419      	add	r1, r3
   1c608:	4431      	add	r1, r6
   1c60a:	f10d 0206 	add.w	r2, sp, #6
   1c60e:	b289      	uxth	r1, r1
   1c610:	4628      	mov	r0, r5
   1c612:	f001 fb91 	bl	1dd38 <net_frag_get_pos>
				proto_len,
				&offset);
	if (frag) {
   1c616:	b120      	cbz	r0, 1c622 <set_appdata_values+0x44>
		net_pkt_set_appdata(pkt, frag->data + offset);
   1c618:	6883      	ldr	r3, [r0, #8]
   1c61a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1c61e:	4413      	add	r3, r2
	pkt->appdata = data;
   1c620:	61ab      	str	r3, [r5, #24]
	}

	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1c622:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1c626:	1ae3      	subs	r3, r4, r3
   1c628:	b29b      	uxth	r3, r3
			       net_pkt_ipv6_ext_len(pkt) - proto_len);
   1c62a:	f895 403b 	ldrb.w	r4, [r5, #59]	; 0x3b
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1c62e:	1b1b      	subs	r3, r3, r4
   1c630:	b29b      	uxth	r3, r3
   1c632:	1b9b      	subs	r3, r3, r6
	pkt->appdatalen = len;
   1c634:	862b      	strh	r3, [r5, #48]	; 0x30

	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
			"Wrong appdatalen %u, total %zu",
			net_pkt_appdatalen(pkt), total_len);
}
   1c636:	b002      	add	sp, #8
   1c638:	bd70      	pop	{r4, r5, r6, pc}
		proto_len = sizeof(struct net_udp_hdr);
   1c63a:	2608      	movs	r6, #8
   1c63c:	e7dd      	b.n	1c5fa <set_appdata_values+0x1c>
		proto_len = tcp_hdr_len(pkt);
   1c63e:	4628      	mov	r0, r5
   1c640:	f7ff ffbf 	bl	1c5c2 <tcp_hdr_len>
   1c644:	b286      	uxth	r6, r0
   1c646:	e7da      	b.n	1c5fe <set_appdata_values+0x20>

0001c648 <packet_received>:

static enum net_verdict packet_received(struct net_conn *conn,
					struct net_pkt *pkt,
					void *user_data)
{
   1c648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c64a:	460d      	mov	r5, r1
   1c64c:	4616      	mov	r6, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c64e:	2300      	movs	r3, #0
   1c650:	e000      	b.n	1c654 <packet_received+0xc>
   1c652:	3301      	adds	r3, #1
   1c654:	2b05      	cmp	r3, #5
   1c656:	dc12      	bgt.n	1c67e <packet_received+0x36>
	return context->flags & NET_CONTEXT_IN_USE;
   1c658:	2268      	movs	r2, #104	; 0x68
   1c65a:	4926      	ldr	r1, [pc, #152]	; (1c6f4 <packet_received+0xac>)
   1c65c:	fb02 1203 	mla	r2, r2, r3, r1
   1c660:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1c664:	f012 0f01 	tst.w	r2, #1
   1c668:	d0f3      	beq.n	1c652 <packet_received+0xa>
		if (contexts[i].conn_handler == conn_handler) {
   1c66a:	2268      	movs	r2, #104	; 0x68
   1c66c:	fb02 1203 	mla	r2, r2, r3, r1
   1c670:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1c672:	4290      	cmp	r0, r2
   1c674:	d1ed      	bne.n	1c652 <packet_received+0xa>
			return &contexts[i];
   1c676:	2268      	movs	r2, #104	; 0x68
   1c678:	fb02 1403 	mla	r4, r2, r3, r1
   1c67c:	e000      	b.n	1c680 <packet_received+0x38>
	return NULL;
   1c67e:	2400      	movs	r4, #0
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   1c680:	6968      	ldr	r0, [r5, #20]
   1c682:	f7ff fe53 	bl	1c32c <net_if_get_by_iface>
   1c686:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
	pkt->context = ctx;
   1c68a:	60ec      	str	r4, [r5, #12]

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   1c68c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c68e:	b373      	cbz	r3, 1c6ee <packet_received+0xa6>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c690:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c694:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c698:	d017      	beq.n	1c6ca <packet_received+0x82>
		return IPPROTO_TCP;
   1c69a:	2206      	movs	r2, #6
		return NET_DROP;
	}

	if (net_context_get_ip_proto(context) != IPPROTO_TCP) {
   1c69c:	2a06      	cmp	r2, #6
   1c69e:	d016      	beq.n	1c6ce <packet_received+0x86>
		/* TCP packets get appdata earlier in tcp_established(). */
		set_appdata_values(pkt, IPPROTO_UDP);
   1c6a0:	2111      	movs	r1, #17
   1c6a2:	4628      	mov	r0, r5
   1c6a4:	f7ff ff9b 	bl	1c5de <set_appdata_values>
	return pkt->appdatalen;
   1c6a8:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	net_stats.tcp.bytes.received += bytes;
   1c6aa:	4a13      	ldr	r2, [pc, #76]	; (1c6f8 <packet_received+0xb0>)
   1c6ac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1c6ae:	440b      	add	r3, r1
   1c6b0:	64d3      	str	r3, [r2, #76]	; 0x4c
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	net_stats_update_tcp_recv(net_pkt_appdatalen(pkt));

	context->recv_cb(context, pkt, 0, user_data);
   1c6b2:	6b27      	ldr	r7, [r4, #48]	; 0x30
   1c6b4:	4633      	mov	r3, r6
   1c6b6:	2200      	movs	r2, #0
   1c6b8:	4629      	mov	r1, r5
   1c6ba:	4620      	mov	r0, r4
   1c6bc:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c6be:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1c6c2:	f00c fe46 	bl	29352 <_impl_k_sem_give>

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   1c6c6:	2000      	movs	r0, #0
   1c6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1c6ca:	2211      	movs	r2, #17
   1c6cc:	e7e6      	b.n	1c69c <packet_received+0x54>
	if (context->flags & NET_CONTEXT_TYPE) {
   1c6ce:	f013 0f20 	tst.w	r3, #32
   1c6d2:	d00a      	beq.n	1c6ea <packet_received+0xa2>
		return SOCK_STREAM;
   1c6d4:	2301      	movs	r3, #1
	else if (net_context_get_type(context) == SOCK_STREAM) {
   1c6d6:	2b01      	cmp	r3, #1
   1c6d8:	d1e6      	bne.n	1c6a8 <packet_received+0x60>
   1c6da:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
		if (net_pkt_appdatalen(pkt) == 0) {
   1c6dc:	2b00      	cmp	r3, #0
   1c6de:	d1e3      	bne.n	1c6a8 <packet_received+0x60>
			net_pkt_unref(pkt);
   1c6e0:	4628      	mov	r0, r5
   1c6e2:	f001 f85a 	bl	1d79a <net_pkt_unref>
			return NET_OK;
   1c6e6:	2000      	movs	r0, #0
   1c6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return SOCK_DGRAM;
   1c6ea:	2302      	movs	r3, #2
   1c6ec:	e7f3      	b.n	1c6d6 <packet_received+0x8e>
		return NET_DROP;
   1c6ee:	2002      	movs	r0, #2
}
   1c6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c6f2:	bf00      	nop
   1c6f4:	20002188 	.word	0x20002188
   1c6f8:	20003038 	.word	0x20003038

0001c6fc <send_reset>:
{
   1c6fc:	b510      	push	{r4, lr}
   1c6fe:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1c700:	aa02      	add	r2, sp, #8
   1c702:	2300      	movs	r3, #0
   1c704:	f842 3d04 	str.w	r3, [r2, #-4]!
	ret = net_tcp_prepare_reset(context->tcp, remote, &pkt);
   1c708:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1c70a:	f007 f85a 	bl	237c2 <net_tcp_prepare_reset>
	if (ret || !pkt) {
   1c70e:	4604      	mov	r4, r0
   1c710:	b928      	cbnz	r0, 1c71e <send_reset+0x22>
   1c712:	9801      	ldr	r0, [sp, #4]
   1c714:	b118      	cbz	r0, 1c71e <send_reset+0x22>
	ret = net_send_data(pkt);
   1c716:	f7fe fc3f 	bl	1af98 <net_send_data>
	if (ret < 0) {
   1c71a:	1e04      	subs	r4, r0, #0
   1c71c:	db02      	blt.n	1c724 <send_reset+0x28>
}
   1c71e:	4620      	mov	r0, r4
   1c720:	b002      	add	sp, #8
   1c722:	bd10      	pop	{r4, pc}
		net_pkt_unref(pkt);
   1c724:	9801      	ldr	r0, [sp, #4]
   1c726:	f001 f838 	bl	1d79a <net_pkt_unref>
   1c72a:	e7f8      	b.n	1c71e <send_reset+0x22>

0001c72c <send_ack>:
{
   1c72c:	b510      	push	{r4, lr}
   1c72e:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1c730:	2300      	movs	r3, #0
   1c732:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   1c734:	b932      	cbnz	r2, 1c744 <send_ack+0x18>
   1c736:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1c738:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1c73c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1c740:	429a      	cmp	r2, r3
   1c742:	d011      	beq.n	1c768 <send_ack+0x3c>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   1c744:	aa01      	add	r2, sp, #4
   1c746:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1c748:	f007 f99c 	bl	23a84 <net_tcp_prepare_ack>
	if (ret) {
   1c74c:	4604      	mov	r4, r0
   1c74e:	b110      	cbz	r0, 1c756 <send_ack+0x2a>
}
   1c750:	4620      	mov	r0, r4
   1c752:	b002      	add	sp, #8
   1c754:	bd10      	pop	{r4, pc}
	ret = net_tcp_send_pkt(pkt);
   1c756:	9801      	ldr	r0, [sp, #4]
   1c758:	f007 fc06 	bl	23f68 <net_tcp_send_pkt>
	if (ret < 0) {
   1c75c:	1e04      	subs	r4, r0, #0
   1c75e:	daf7      	bge.n	1c750 <send_ack+0x24>
		net_pkt_unref(pkt);
   1c760:	9801      	ldr	r0, [sp, #4]
   1c762:	f001 f81a 	bl	1d79a <net_pkt_unref>
   1c766:	e7f3      	b.n	1c750 <send_ack+0x24>
		return 0;
   1c768:	2400      	movs	r4, #0
   1c76a:	e7f1      	b.n	1c750 <send_ack+0x24>

0001c76c <_tcp_synack_received>:
	switch (net_tcp_get_state(context->tcp)) {
   1c76c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 *
 * @param tcp TCP context
 */
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   1c76e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c772:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1c776:	2b02      	cmp	r3, #2
   1c778:	d001      	beq.n	1c77e <_tcp_synack_received+0x12>
}
   1c77a:	2002      	movs	r0, #2
   1c77c:	4770      	bx	lr
{
   1c77e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c780:	b09f      	sub	sp, #124	; 0x7c
   1c782:	4615      	mov	r5, r2
   1c784:	460c      	mov	r4, r1
	context->iface = net_if_get_by_iface(iface);
   1c786:	6948      	ldr	r0, [r1, #20]
   1c788:	f7ff fdd0 	bl	1c32c <net_if_get_by_iface>
   1c78c:	f885 005c 	strb.w	r0, [r5, #92]	; 0x5c
	pkt->context = ctx;
   1c790:	60e5      	str	r5, [r4, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1c792:	a911      	add	r1, sp, #68	; 0x44
   1c794:	4620      	mov	r0, r4
   1c796:	f007 fa35 	bl	23c04 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1c79a:	4606      	mov	r6, r0
   1c79c:	b1f8      	cbz	r0, 1c7de <_tcp_synack_received+0x72>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1c79e:	7b43      	ldrb	r3, [r0, #13]
   1c7a0:	f013 0f04 	tst.w	r3, #4
   1c7a4:	d11e      	bne.n	1c7e4 <_tcp_synack_received+0x78>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   1c7a6:	f013 0f02 	tst.w	r3, #2
   1c7aa:	d013      	beq.n	1c7d4 <_tcp_synack_received+0x68>
		context->tcp->send_ack =
   1c7ac:	6e2a      	ldr	r2, [r5, #96]	; 0x60
	return ((u16_t)src[0] << 8) | src[1];
   1c7ae:	7901      	ldrb	r1, [r0, #4]
   1c7b0:	7943      	ldrb	r3, [r0, #5]
   1c7b2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1c7b6:	7980      	ldrb	r0, [r0, #6]
   1c7b8:	79f3      	ldrb	r3, [r6, #7]
   1c7ba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1c7be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			sys_get_be32(tcp_hdr->seq) + 1;
   1c7c2:	3301      	adds	r3, #1
		context->tcp->send_ack =
   1c7c4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		context->tcp->recv_max_ack = context->tcp->send_seq + 1;
   1c7c8:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1c7ca:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1c7ce:	3301      	adds	r3, #1
   1c7d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   1c7d4:	7b73      	ldrb	r3, [r6, #13]
   1c7d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c7da:	2b12      	cmp	r3, #18
   1c7dc:	d019      	beq.n	1c812 <_tcp_synack_received+0xa6>
}
   1c7de:	2002      	movs	r0, #2
   1c7e0:	b01f      	add	sp, #124	; 0x7c
   1c7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1c7e4:	4621      	mov	r1, r4
   1c7e6:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c7e8:	f007 fa87 	bl	23cfa <net_tcp_validate_seq>
   1c7ec:	b160      	cbz	r0, 1c808 <_tcp_synack_received+0x9c>
	net_stats.tcp.drop++;
}

static inline void net_stats_update_tcp_seg_rst(void)
{
	net_stats.tcp.rst++;
   1c7ee:	4a40      	ldr	r2, [pc, #256]	; (1c8f0 <_tcp_synack_received+0x184>)
   1c7f0:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1c7f2:	3301      	adds	r3, #1
   1c7f4:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->connect_cb) {
   1c7f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1c7f8:	2b00      	cmp	r3, #0
   1c7fa:	d0f0      	beq.n	1c7de <_tcp_synack_received+0x72>
			context->connect_cb(context, -ECONNREFUSED,
   1c7fc:	682a      	ldr	r2, [r5, #0]
   1c7fe:	f06f 016e 	mvn.w	r1, #110	; 0x6e
   1c802:	4628      	mov	r0, r5
   1c804:	4798      	blx	r3
   1c806:	e7ea      	b.n	1c7de <_tcp_synack_received+0x72>
	net_stats.tcp.ackerr++;
}

static inline void net_stats_update_tcp_seg_rsterr(void)
{
	net_stats.tcp.rsterr++;
   1c808:	4a39      	ldr	r2, [pc, #228]	; (1c8f0 <_tcp_synack_received+0x184>)
   1c80a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1c80c:	3301      	adds	r3, #1
   1c80e:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1c810:	e7e5      	b.n	1c7de <_tcp_synack_received+0x72>
	return pkt->family;
   1c812:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1c816:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_pkt_family(pkt) == AF_INET6) {
   1c81a:	2b0a      	cmp	r3, #10
   1c81c:	d1df      	bne.n	1c7de <_tcp_synack_received+0x72>
			r6addr.sin6_family = AF_INET6;
   1c81e:	f04f 0e0a 	mov.w	lr, #10
   1c822:	f8ad e014 	strh.w	lr, [sp, #20]
			r6addr.sin6_port = tcp_hdr->src_port;
   1c826:	8833      	ldrh	r3, [r6, #0]
   1c828:	f8ad 3016 	strh.w	r3, [sp, #22]
	return pkt->frags->data;
   1c82c:	68a7      	ldr	r7, [r4, #8]
			net_ipaddr_copy(&r6addr.sin6_addr,
   1c82e:	ac16      	add	r4, sp, #88	; 0x58
   1c830:	68bb      	ldr	r3, [r7, #8]
   1c832:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1c836:	6859      	ldr	r1, [r3, #4]
   1c838:	689a      	ldr	r2, [r3, #8]
   1c83a:	68db      	ldr	r3, [r3, #12]
   1c83c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c83e:	ac06      	add	r4, sp, #24
   1c840:	ab16      	add	r3, sp, #88	; 0x58
   1c842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1c844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			l6addr.sin6_family = AF_INET6;
   1c848:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
			l6addr.sin6_port = htons(tcp_hdr->dst_port);
   1c84c:	8872      	ldrh	r2, [r6, #2]
   1c84e:	0a13      	lsrs	r3, r2, #8
   1c850:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1c854:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			net_ipaddr_copy(&l6addr.sin6_addr,
   1c858:	ac1a      	add	r4, sp, #104	; 0x68
   1c85a:	68bb      	ldr	r3, [r7, #8]
   1c85c:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1c860:	6859      	ldr	r1, [r3, #4]
   1c862:	689a      	ldr	r2, [r3, #8]
   1c864:	68db      	ldr	r3, [r3, #12]
   1c866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c868:	ac0c      	add	r4, sp, #48	; 0x30
   1c86a:	ab1e      	add	r3, sp, #120	; 0x78
   1c86c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		net_tcp_unregister(context->conn_handler);
   1c874:	462c      	mov	r4, r5
	return net_conn_unregister(handle);
   1c876:	f854 0f2c 	ldr.w	r0, [r4, #44]!
   1c87a:	f008 fcdb 	bl	25234 <net_conn_unregister>
				       ntohs(tcp_hdr->src_port),
   1c87e:	8832      	ldrh	r2, [r6, #0]
   1c880:	0a13      	lsrs	r3, r2, #8
   1c882:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				       ntohs(tcp_hdr->dst_port),
   1c886:	8871      	ldrh	r1, [r6, #2]
   1c888:	0a0a      	lsrs	r2, r1, #8
   1c88a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		ret = net_tcp_register(raddr,
   1c88e:	b292      	uxth	r2, r2
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1c890:	9403      	str	r4, [sp, #12]
   1c892:	9502      	str	r5, [sp, #8]
   1c894:	4917      	ldr	r1, [pc, #92]	; (1c8f4 <_tcp_synack_received+0x188>)
   1c896:	9101      	str	r1, [sp, #4]
   1c898:	9200      	str	r2, [sp, #0]
   1c89a:	b29b      	uxth	r3, r3
   1c89c:	aa0b      	add	r2, sp, #44	; 0x2c
   1c89e:	a905      	add	r1, sp, #20
   1c8a0:	2006      	movs	r0, #6
   1c8a2:	f008 fce5 	bl	25270 <net_conn_register>
		if (ret < 0) {
   1c8a6:	2800      	cmp	r0, #0
   1c8a8:	db1c      	blt.n	1c8e4 <_tcp_synack_received+0x178>
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   1c8aa:	2104      	movs	r1, #4
   1c8ac:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c8ae:	f006 ffba 	bl	23826 <net_tcp_change_state>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1c8b2:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1c8b6:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1c8ba:	f043 0304 	orr.w	r3, r3, #4
   1c8be:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		send_ack(context, raddr, false);
   1c8c2:	2200      	movs	r2, #0
   1c8c4:	a905      	add	r1, sp, #20
   1c8c6:	4628      	mov	r0, r5
   1c8c8:	f7ff ff30 	bl	1c72c <send_ack>
		k_sem_give(&context->tcp->connect_wait);
   1c8cc:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c8ce:	30ac      	adds	r0, #172	; 0xac
   1c8d0:	f00c fd3f 	bl	29352 <_impl_k_sem_give>
		if (context->connect_cb) {
   1c8d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1c8d6:	2b00      	cmp	r3, #0
   1c8d8:	d081      	beq.n	1c7de <_tcp_synack_received+0x72>
			context->connect_cb(context, 0, context->user_data);
   1c8da:	682a      	ldr	r2, [r5, #0]
   1c8dc:	2100      	movs	r1, #0
   1c8de:	4628      	mov	r0, r5
   1c8e0:	4798      	blx	r3
   1c8e2:	e77c      	b.n	1c7de <_tcp_synack_received+0x72>
			send_reset(context, raddr);
   1c8e4:	a905      	add	r1, sp, #20
   1c8e6:	4628      	mov	r0, r5
   1c8e8:	f7ff ff08 	bl	1c6fc <send_reset>
			return NET_DROP;
   1c8ec:	e777      	b.n	1c7de <_tcp_synack_received+0x72>
   1c8ee:	bf00      	nop
   1c8f0:	20003038 	.word	0x20003038
   1c8f4:	0001ce4d 	.word	0x0001ce4d

0001c8f8 <create_udp_packet>:
{
   1c8f8:	b570      	push	{r4, r5, r6, lr}
	return pkt->family;
   1c8fa:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
   1c8fe:	f3c4 04c3 	ubfx	r4, r4, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1c902:	2c0a      	cmp	r4, #10
   1c904:	d118      	bne.n	1c938 <create_udp_packet+0x40>
   1c906:	461e      	mov	r6, r3
   1c908:	4615      	mov	r5, r2
   1c90a:	4604      	mov	r4, r0
		pkt = net_ipv6_create(context, pkt, NULL, &addr6->sin6_addr);
   1c90c:	1d13      	adds	r3, r2, #4
   1c90e:	2200      	movs	r2, #0
   1c910:	f003 f9a4 	bl	1fc5c <net_ipv6_create>
   1c914:	4601      	mov	r1, r0
				     net_pkt_ip_hdr_len(pkt) +
   1c916:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
				     net_pkt_ipv6_ext_len(pkt),
   1c91a:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
		tmp = net_udp_insert(context, pkt,
   1c91e:	886b      	ldrh	r3, [r5, #2]
   1c920:	4402      	add	r2, r0
   1c922:	4620      	mov	r0, r4
   1c924:	f006 fd90 	bl	23448 <net_udp_insert>
		if (!tmp) {
   1c928:	4605      	mov	r5, r0
   1c92a:	b140      	cbz	r0, 1c93e <create_udp_packet+0x46>
		r = net_ipv6_finalize(context, pkt);
   1c92c:	4601      	mov	r1, r0
   1c92e:	4620      	mov	r0, r4
   1c930:	f003 fbf0 	bl	20114 <net_ipv6_finalize>
	*out_pkt = pkt;
   1c934:	6035      	str	r5, [r6, #0]
	return r;
   1c936:	bd70      	pop	{r4, r5, r6, pc}
		return -EPROTONOSUPPORT;
   1c938:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   1c93c:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1c93e:	f06f 000b 	mvn.w	r0, #11
}
   1c942:	bd70      	pop	{r4, r5, r6, pc}

0001c944 <send_data>:
{
   1c944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c948:	4604      	mov	r4, r0
   1c94a:	4615      	mov	r5, r2
   1c94c:	9e06      	ldr	r6, [sp, #24]
   1c94e:	9f07      	ldr	r7, [sp, #28]
	context->send_cb = cb;
   1c950:	6342      	str	r2, [r0, #52]	; 0x34
	context->user_data = user_data;
   1c952:	6007      	str	r7, [r0, #0]
	pkt->token = token;
   1c954:	610e      	str	r6, [r1, #16]
	if (context->flags & NET_CONTEXT_PROTO) {
   1c956:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1c95a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c95e:	d011      	beq.n	1c984 <send_data+0x40>
		return IPPROTO_TCP;
   1c960:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c962:	2b11      	cmp	r3, #17
   1c964:	d010      	beq.n	1c988 <send_data+0x44>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c966:	2b06      	cmp	r3, #6
   1c968:	d113      	bne.n	1c992 <send_data+0x4e>
		int ret = net_tcp_send_data(context);
   1c96a:	4620      	mov	r0, r4
   1c96c:	f007 fbf8 	bl	24160 <net_tcp_send_data>
   1c970:	4680      	mov	r8, r0
		if (cb) {
   1c972:	b125      	cbz	r5, 1c97e <send_data+0x3a>
			cb(context, ret, token, user_data);
   1c974:	463b      	mov	r3, r7
   1c976:	4632      	mov	r2, r6
   1c978:	4601      	mov	r1, r0
   1c97a:	4620      	mov	r0, r4
   1c97c:	47a8      	blx	r5
}
   1c97e:	4640      	mov	r0, r8
   1c980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return IPPROTO_UDP;
   1c984:	2311      	movs	r3, #17
   1c986:	e7ec      	b.n	1c962 <send_data+0x1e>
		return net_send_data(pkt);
   1c988:	4608      	mov	r0, r1
   1c98a:	f7fe fb05 	bl	1af98 <net_send_data>
   1c98e:	4680      	mov	r8, r0
   1c990:	e7f5      	b.n	1c97e <send_data+0x3a>
	return -EPROTONOSUPPORT;
   1c992:	f06f 087a 	mvn.w	r8, #122	; 0x7a
   1c996:	e7f2      	b.n	1c97e <send_data+0x3a>

0001c998 <net_context_get>:
{
   1c998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (family == AF_INET) {
   1c99c:	2802      	cmp	r0, #2
   1c99e:	f000 80e9 	beq.w	1cb74 <net_context_get+0x1dc>
	if (family != AF_INET && family != AF_INET6) {
   1c9a2:	280a      	cmp	r0, #10
   1c9a4:	f040 80e9 	bne.w	1cb7a <net_context_get+0x1e2>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   1c9a8:	1e4c      	subs	r4, r1, #1
   1c9aa:	b2e4      	uxtb	r4, r4
   1c9ac:	2c01      	cmp	r4, #1
   1c9ae:	f200 80e7 	bhi.w	1cb80 <net_context_get+0x1e8>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   1c9b2:	2a11      	cmp	r2, #17
   1c9b4:	d002      	beq.n	1c9bc <net_context_get+0x24>
   1c9b6:	2a06      	cmp	r2, #6
   1c9b8:	f040 80e5 	bne.w	1cb86 <net_context_get+0x1ee>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1c9bc:	2901      	cmp	r1, #1
   1c9be:	d01c      	beq.n	1c9fa <net_context_get+0x62>
   1c9c0:	2902      	cmp	r1, #2
   1c9c2:	d01f      	beq.n	1ca04 <net_context_get+0x6c>
	if (!context) {
   1c9c4:	2b00      	cmp	r3, #0
   1c9c6:	f000 80e1 	beq.w	1cb8c <net_context_get+0x1f4>
   1c9ca:	461f      	mov	r7, r3
   1c9cc:	4690      	mov	r8, r2
   1c9ce:	460e      	mov	r6, r1
   1c9d0:	4681      	mov	r9, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1c9d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c9d6:	4870      	ldr	r0, [pc, #448]	; (1cb98 <net_context_get+0x200>)
   1c9d8:	f00c fcce 	bl	29378 <_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c9dc:	2400      	movs	r4, #0
   1c9de:	2c05      	cmp	r4, #5
   1c9e0:	f300 80c5 	bgt.w	1cb6e <net_context_get+0x1d6>
	return context->flags & NET_CONTEXT_IN_USE;
   1c9e4:	2568      	movs	r5, #104	; 0x68
   1c9e6:	4b6d      	ldr	r3, [pc, #436]	; (1cb9c <net_context_get+0x204>)
   1c9e8:	fb05 3504 	mla	r5, r5, r4, r3
   1c9ec:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
		if (net_context_is_used(&contexts[i])) {
   1c9f0:	f013 0f01 	tst.w	r3, #1
   1c9f4:	d00b      	beq.n	1ca0e <net_context_get+0x76>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c9f6:	3401      	adds	r4, #1
   1c9f8:	e7f1      	b.n	1c9de <net_context_get+0x46>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1c9fa:	2a11      	cmp	r2, #17
   1c9fc:	d1e0      	bne.n	1c9c0 <net_context_get+0x28>
		return -EOPNOTSUPP;
   1c9fe:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1ca02:	e076      	b.n	1caf2 <net_context_get+0x15a>
	    (type == SOCK_DGRAM && ip_proto == IPPROTO_TCP)) {
   1ca04:	2a06      	cmp	r2, #6
   1ca06:	d1dd      	bne.n	1c9c4 <net_context_get+0x2c>
		return -EOPNOTSUPP;
   1ca08:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1ca0c:	e071      	b.n	1caf2 <net_context_get+0x15a>
		if (ip_proto == IPPROTO_TCP) {
   1ca0e:	f1b8 0f06 	cmp.w	r8, #6
   1ca12:	d071      	beq.n	1caf8 <net_context_get+0x160>
		contexts[i].flags = 0;
   1ca14:	f04f 0a68 	mov.w	sl, #104	; 0x68
   1ca18:	4b60      	ldr	r3, [pc, #384]	; (1cb9c <net_context_get+0x204>)
   1ca1a:	fb0a 3a04 	mla	sl, sl, r4, r3
   1ca1e:	2300      	movs	r3, #0
   1ca20:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
		atomic_set(&contexts[i].refcount, 1);
   1ca24:	f10a 0304 	add.w	r3, sl, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ca28:	2201      	movs	r2, #1
   1ca2a:	f3bf 8f5b 	dmb	ish
   1ca2e:	e853 1f00 	ldrex	r1, [r3]
   1ca32:	e843 2000 	strex	r0, r2, [r3]
   1ca36:	2800      	cmp	r0, #0
   1ca38:	d1f9      	bne.n	1ca2e <net_context_get+0x96>
   1ca3a:	f3bf 8f5b 	dmb	ish
	if (family == AF_INET6) {
   1ca3e:	f1b9 0f0a 	cmp.w	r9, #10
   1ca42:	d06d      	beq.n	1cb20 <net_context_get+0x188>
	context->flags &= ~NET_CONTEXT_FAMILY;
   1ca44:	2368      	movs	r3, #104	; 0x68
   1ca46:	4a55      	ldr	r2, [pc, #340]	; (1cb9c <net_context_get+0x204>)
   1ca48:	fb03 2304 	mla	r3, r3, r4, r2
   1ca4c:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1ca50:	f022 0210 	bic.w	r2, r2, #16
   1ca54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (type == SOCK_STREAM) {
   1ca58:	2e01      	cmp	r6, #1
   1ca5a:	d068      	beq.n	1cb2e <net_context_get+0x196>
	context->flags &= ~NET_CONTEXT_TYPE;
   1ca5c:	2368      	movs	r3, #104	; 0x68
   1ca5e:	4a4f      	ldr	r2, [pc, #316]	; (1cb9c <net_context_get+0x204>)
   1ca60:	fb03 2304 	mla	r3, r3, r4, r2
   1ca64:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1ca68:	f022 0220 	bic.w	r2, r2, #32
   1ca6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (ip_proto == IPPROTO_TCP) {
   1ca70:	f1b8 0f06 	cmp.w	r8, #6
   1ca74:	d066      	beq.n	1cb44 <net_context_get+0x1ac>
	context->flags &= ~NET_CONTEXT_PROTO;
   1ca76:	2368      	movs	r3, #104	; 0x68
   1ca78:	4a48      	ldr	r2, [pc, #288]	; (1cb9c <net_context_get+0x204>)
   1ca7a:	fb03 2304 	mla	r3, r3, r4, r2
   1ca7e:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1ca82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1ca86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1ca8a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1cb9c <net_context_get+0x204>
   1ca8e:	2568      	movs	r5, #104	; 0x68
   1ca90:	fb05 f504 	mul.w	r5, r5, r4
   1ca94:	eb08 0305 	add.w	r3, r8, r5
   1ca98:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1ca9c:	f042 0201 	orr.w	r2, r2, #1
   1caa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].iface = 0;
   1caa4:	2600      	movs	r6, #0
   1caa6:	f883 605c 	strb.w	r6, [r3, #92]	; 0x5c
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1caaa:	f105 0010 	add.w	r0, r5, #16
   1caae:	4440      	add	r0, r8
   1cab0:	2218      	movs	r2, #24
   1cab2:	4631      	mov	r1, r6
   1cab4:	3004      	adds	r0, #4
   1cab6:	f00d feff 	bl	2a8b8 <memset>
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   1caba:	3508      	adds	r5, #8
   1cabc:	4445      	add	r5, r8
   1cabe:	220c      	movs	r2, #12
   1cac0:	4631      	mov	r1, r6
   1cac2:	4628      	mov	r0, r5
   1cac4:	f00d fef8 	bl	2a8b8 <memset>
		if (family == AF_INET6) {
   1cac8:	f1b9 0f0a 	cmp.w	r9, #10
   1cacc:	d045      	beq.n	1cb5a <net_context_get+0x1c2>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1cace:	2068      	movs	r0, #104	; 0x68
   1cad0:	fb00 f404 	mul.w	r4, r0, r4
   1cad4:	3440      	adds	r4, #64	; 0x40
   1cad6:	4831      	ldr	r0, [pc, #196]	; (1cb9c <net_context_get+0x204>)
   1cad8:	4420      	add	r0, r4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1cada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cade:	2101      	movs	r1, #1
   1cae0:	3004      	adds	r0, #4
   1cae2:	f00c fc2d 	bl	29340 <_impl_k_sem_init>
		*context = &contexts[i];
   1cae6:	f8c7 a000 	str.w	sl, [r7]
		ret = 0;
   1caea:	2400      	movs	r4, #0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1caec:	482a      	ldr	r0, [pc, #168]	; (1cb98 <net_context_get+0x200>)
   1caee:	f00c fc30 	bl	29352 <_impl_k_sem_give>
}
   1caf2:	4620      	mov	r0, r4
   1caf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			contexts[i].tcp = net_tcp_alloc(&contexts[i]);
   1caf8:	2568      	movs	r5, #104	; 0x68
   1cafa:	4b28      	ldr	r3, [pc, #160]	; (1cb9c <net_context_get+0x204>)
   1cafc:	fb05 3504 	mla	r5, r5, r4, r3
   1cb00:	4628      	mov	r0, r5
   1cb02:	f006 fdab 	bl	2365c <net_tcp_alloc>
   1cb06:	6628      	str	r0, [r5, #96]	; 0x60
			if (!contexts[i].tcp) {
   1cb08:	2800      	cmp	r0, #0
   1cb0a:	d042      	beq.n	1cb92 <net_context_get+0x1fa>
			k_delayed_work_init(&contexts[i].tcp->ack_timer,
   1cb0c:	4924      	ldr	r1, [pc, #144]	; (1cba0 <net_context_get+0x208>)
   1cb0e:	3008      	adds	r0, #8
   1cb10:	f00d f9f0 	bl	29ef4 <k_delayed_work_init>
			k_delayed_work_init(&contexts[i].tcp->fin_timer,
   1cb14:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1cb16:	4923      	ldr	r1, [pc, #140]	; (1cba4 <net_context_get+0x20c>)
   1cb18:	3030      	adds	r0, #48	; 0x30
   1cb1a:	f00d f9eb 	bl	29ef4 <k_delayed_work_init>
   1cb1e:	e779      	b.n	1ca14 <net_context_get+0x7c>
		context->flags |= NET_CONTEXT_FAMILY;
   1cb20:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
   1cb24:	f042 0210 	orr.w	r2, r2, #16
   1cb28:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
   1cb2c:	e794      	b.n	1ca58 <net_context_get+0xc0>
		context->flags |= NET_CONTEXT_TYPE;
   1cb2e:	2368      	movs	r3, #104	; 0x68
   1cb30:	4a1a      	ldr	r2, [pc, #104]	; (1cb9c <net_context_get+0x204>)
   1cb32:	fb03 2304 	mla	r3, r3, r4, r2
   1cb36:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1cb3a:	f042 0220 	orr.w	r2, r2, #32
   1cb3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1cb42:	e795      	b.n	1ca70 <net_context_get+0xd8>
		context->flags |= NET_CONTEXT_PROTO;
   1cb44:	2368      	movs	r3, #104	; 0x68
   1cb46:	4a15      	ldr	r2, [pc, #84]	; (1cb9c <net_context_get+0x204>)
   1cb48:	fb03 2304 	mla	r3, r3, r4, r2
   1cb4c:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1cb50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1cb54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1cb58:	e797      	b.n	1ca8a <net_context_get+0xf2>
			addr6->sin6_port = find_available_port(&contexts[i],
   1cb5a:	4629      	mov	r1, r5
   1cb5c:	4650      	mov	r0, sl
   1cb5e:	f7ff fcf1 	bl	1c544 <find_available_port>
   1cb62:	8068      	strh	r0, [r5, #2]
			if (!addr6->sin6_port) {
   1cb64:	2800      	cmp	r0, #0
   1cb66:	d1b2      	bne.n	1cace <net_context_get+0x136>
				return -EADDRINUSE;
   1cb68:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1cb6c:	e7c1      	b.n	1caf2 <net_context_get+0x15a>
	int i, ret = -ENOENT;
   1cb6e:	f06f 0401 	mvn.w	r4, #1
   1cb72:	e7bb      	b.n	1caec <net_context_get+0x154>
		return -EPFNOSUPPORT;
   1cb74:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   1cb78:	e7bb      	b.n	1caf2 <net_context_get+0x15a>
		return -EAFNOSUPPORT;
   1cb7a:	f06f 0469 	mvn.w	r4, #105	; 0x69
   1cb7e:	e7b8      	b.n	1caf2 <net_context_get+0x15a>
		return -EPROTOTYPE;
   1cb80:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   1cb84:	e7b5      	b.n	1caf2 <net_context_get+0x15a>
		return -EPROTONOSUPPORT;
   1cb86:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   1cb8a:	e7b2      	b.n	1caf2 <net_context_get+0x15a>
		return -EINVAL;
   1cb8c:	f06f 0415 	mvn.w	r4, #21
   1cb90:	e7af      	b.n	1caf2 <net_context_get+0x15a>
				return -ENOBUFS;
   1cb92:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1cb96:	e7ac      	b.n	1caf2 <net_context_get+0x15a>
   1cb98:	200023f8 	.word	0x200023f8
   1cb9c:	20002188 	.word	0x20002188
   1cba0:	0001cc71 	.word	0x0001cc71
   1cba4:	0001cc65 	.word	0x0001cc65

0001cba8 <net_context_ref>:
	int old_rc = atomic_inc(&context->refcount);
   1cba8:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1cbaa:	f3bf 8f5b 	dmb	ish
   1cbae:	e853 0f00 	ldrex	r0, [r3]
   1cbb2:	1c42      	adds	r2, r0, #1
   1cbb4:	e843 2100 	strex	r1, r2, [r3]
   1cbb8:	2900      	cmp	r1, #0
   1cbba:	d1f8      	bne.n	1cbae <net_context_ref+0x6>
   1cbbc:	f3bf 8f5b 	dmb	ish
}
   1cbc0:	3001      	adds	r0, #1
   1cbc2:	4770      	bx	lr

0001cbc4 <net_context_unref>:
{
   1cbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int old_rc = atomic_dec(&context->refcount);
   1cbc6:	1d02      	adds	r2, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1cbc8:	f3bf 8f5b 	dmb	ish
   1cbcc:	e852 3f00 	ldrex	r3, [r2]
   1cbd0:	1e59      	subs	r1, r3, #1
   1cbd2:	e842 1400 	strex	r4, r1, [r2]
   1cbd6:	2c00      	cmp	r4, #0
   1cbd8:	d1f8      	bne.n	1cbcc <net_context_unref+0x8>
   1cbda:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   1cbde:	2b01      	cmp	r3, #1
   1cbe0:	d001      	beq.n	1cbe6 <net_context_unref+0x22>
		return old_rc - 1;
   1cbe2:	1e58      	subs	r0, r3, #1
   1cbe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cbe6:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1cbe8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cbec:	481b      	ldr	r0, [pc, #108]	; (1cc5c <net_context_unref+0x98>)
   1cbee:	f00c fbc3 	bl	29378 <_impl_k_sem_take>
	if (context->tcp) {
   1cbf2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1cbf4:	b13b      	cbz	r3, 1cc06 <net_context_unref+0x42>
   1cbf6:	2500      	movs	r5, #0
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1cbf8:	2d00      	cmp	r5, #0
   1cbfa:	dd15      	ble.n	1cc28 <net_context_unref+0x64>
		net_tcp_release(context->tcp);
   1cbfc:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1cbfe:	f006 fe3d 	bl	2387c <net_tcp_release>
		context->tcp = NULL;
   1cc02:	2300      	movs	r3, #0
   1cc04:	6623      	str	r3, [r4, #96]	; 0x60
	if (context->conn_handler) {
   1cc06:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1cc08:	b118      	cbz	r0, 1cc12 <net_context_unref+0x4e>
		net_conn_unregister(context->conn_handler);
   1cc0a:	f008 fb13 	bl	25234 <net_conn_unregister>
		context->conn_handler = NULL;
   1cc0e:	2300      	movs	r3, #0
   1cc10:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1cc12:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	context->flags &= ~NET_CONTEXT_IN_USE;
   1cc16:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1cc1a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1cc1e:	480f      	ldr	r0, [pc, #60]	; (1cc5c <net_context_unref+0x98>)
   1cc20:	f00c fb97 	bl	29352 <_impl_k_sem_give>
	return 0;
   1cc24:	2000      	movs	r0, #0
}
   1cc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (tcp_backlog[i].tcp != context->tcp) {
   1cc28:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1cc2c:	0113      	lsls	r3, r2, #4
   1cc2e:	4a0c      	ldr	r2, [pc, #48]	; (1cc60 <net_context_unref+0x9c>)
   1cc30:	58d2      	ldr	r2, [r2, r3]
   1cc32:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1cc34:	429a      	cmp	r2, r3
   1cc36:	d001      	beq.n	1cc3c <net_context_unref+0x78>
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1cc38:	3501      	adds	r5, #1
   1cc3a:	e7dd      	b.n	1cbf8 <net_context_unref+0x34>
			k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   1cc3c:	4f08      	ldr	r7, [pc, #32]	; (1cc60 <net_context_unref+0x9c>)
   1cc3e:	00ae      	lsls	r6, r5, #2
   1cc40:	1972      	adds	r2, r6, r5
   1cc42:	0113      	lsls	r3, r2, #4
   1cc44:	3328      	adds	r3, #40	; 0x28
   1cc46:	18f8      	adds	r0, r7, r3
   1cc48:	f00d f972 	bl	29f30 <k_delayed_work_cancel>
			memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   1cc4c:	442e      	add	r6, r5
   1cc4e:	0130      	lsls	r0, r6, #4
   1cc50:	2250      	movs	r2, #80	; 0x50
   1cc52:	2100      	movs	r1, #0
   1cc54:	4438      	add	r0, r7
   1cc56:	f00d fe2f 	bl	2a8b8 <memset>
   1cc5a:	e7ed      	b.n	1cc38 <net_context_unref+0x74>
   1cc5c:	200023f8 	.word	0x200023f8
   1cc60:	20002410 	.word	0x20002410

0001cc64 <handle_fin_timeout>:
{
   1cc64:	b508      	push	{r3, lr}
	net_context_unref(tcp->context);
   1cc66:	f850 0c30 	ldr.w	r0, [r0, #-48]
   1cc6a:	f7ff ffab 	bl	1cbc4 <net_context_unref>
   1cc6e:	bd08      	pop	{r3, pc}

0001cc70 <handle_ack_timeout>:
	return (enum net_tcp_state)tcp->state;
   1cc70:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1cc74:	f3c3 3343 	ubfx	r3, r3, #13, #4
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   1cc78:	2b06      	cmp	r3, #6
   1cc7a:	d000      	beq.n	1cc7e <handle_ack_timeout+0xe>
   1cc7c:	4770      	bx	lr
{
   1cc7e:	b510      	push	{r4, lr}
   1cc80:	f1a0 0208 	sub.w	r2, r0, #8
   1cc84:	4604      	mov	r4, r0
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   1cc86:	2100      	movs	r1, #0
   1cc88:	4610      	mov	r0, r2
   1cc8a:	f006 fdcc 	bl	23826 <net_tcp_change_state>
		net_context_unref(tcp->context);
   1cc8e:	f854 0c08 	ldr.w	r0, [r4, #-8]
   1cc92:	f7ff ff97 	bl	1cbc4 <net_context_unref>
   1cc96:	bd10      	pop	{r4, pc}

0001cc98 <tcp_synack_received>:
NET_CONN_CB(tcp_synack_received)
   1cc98:	b570      	push	{r4, r5, r6, lr}
   1cc9a:	4605      	mov	r5, r0
   1cc9c:	460e      	mov	r6, r1
   1cc9e:	4614      	mov	r4, r2
   1cca0:	4610      	mov	r0, r2
   1cca2:	f7ff ff81 	bl	1cba8 <net_context_ref>
   1cca6:	4622      	mov	r2, r4
   1cca8:	4631      	mov	r1, r6
   1ccaa:	4628      	mov	r0, r5
   1ccac:	f7ff fd5e 	bl	1c76c <_tcp_synack_received>
   1ccb0:	4605      	mov	r5, r0
   1ccb2:	4620      	mov	r0, r4
   1ccb4:	f7ff ff86 	bl	1cbc4 <net_context_unref>
   1ccb8:	4628      	mov	r0, r5
   1ccba:	bd70      	pop	{r4, r5, r6, pc}

0001ccbc <_tcp_established>:
{
   1ccbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ccc0:	b087      	sub	sp, #28
   1ccc2:	4607      	mov	r7, r0
   1ccc4:	460e      	mov	r6, r1
   1ccc6:	4614      	mov	r4, r2
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1ccc8:	a901      	add	r1, sp, #4
   1ccca:	4630      	mov	r0, r6
   1cccc:	f006 ff9a 	bl	23c04 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1ccd0:	2800      	cmp	r0, #0
   1ccd2:	f000 80b5 	beq.w	1ce40 <_tcp_established+0x184>
   1ccd6:	4605      	mov	r5, r0
	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   1ccd8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ccda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1ccde:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1cce2:	2b03      	cmp	r3, #3
   1cce4:	d804      	bhi.n	1ccf0 <_tcp_established+0x34>
		return NET_DROP;
   1cce6:	2502      	movs	r5, #2
}
   1cce8:	4628      	mov	r0, r5
   1ccea:	b007      	add	sp, #28
   1ccec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   1ccf0:	f890 800d 	ldrb.w	r8, [r0, #13]
	if (tcp_flags & NET_TCP_ACK) {
   1ccf4:	f018 0f10 	tst.w	r8, #16
   1ccf8:	d116      	bne.n	1cd28 <_tcp_established+0x6c>
	if (tcp_flags & NET_TCP_RST) {
   1ccfa:	f018 0f04 	tst.w	r8, #4
   1ccfe:	d121      	bne.n	1cd44 <_tcp_established+0x88>
	return ((u16_t)src[0] << 8) | src[1];
   1cd00:	792a      	ldrb	r2, [r5, #4]
   1cd02:	796b      	ldrb	r3, [r5, #5]
   1cd04:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   1cd08:	79a9      	ldrb	r1, [r5, #6]
   1cd0a:	79eb      	ldrb	r3, [r5, #7]
   1cd0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1cd10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			    context->tcp->send_ack) < 0) {
   1cd14:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1cd16:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   1cd1a:	1a99      	subs	r1, r3, r2
   1cd1c:	2900      	cmp	r1, #0
   1cd1e:	db2e      	blt.n	1cd7e <_tcp_established+0xc2>
	if (sys_get_be32(tcp_hdr->seq) - context->tcp->send_ack) {
   1cd20:	429a      	cmp	r2, r3
   1cd22:	d033      	beq.n	1cd8c <_tcp_established+0xd0>
		return NET_DROP;
   1cd24:	2502      	movs	r5, #2
   1cd26:	e7df      	b.n	1cce8 <_tcp_established+0x2c>
	return ((u16_t)src[0] << 8) | src[1];
   1cd28:	7a03      	ldrb	r3, [r0, #8]
   1cd2a:	7a41      	ldrb	r1, [r0, #9]
   1cd2c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1cd30:	7a82      	ldrb	r2, [r0, #10]
   1cd32:	7ac3      	ldrb	r3, [r0, #11]
   1cd34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		net_tcp_ack_received(context,
   1cd38:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1cd3c:	4620      	mov	r0, r4
   1cd3e:	f007 fa49 	bl	241d4 <net_tcp_ack_received>
   1cd42:	e7da      	b.n	1ccfa <_tcp_established+0x3e>
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1cd44:	4631      	mov	r1, r6
   1cd46:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1cd48:	f006 ffd7 	bl	23cfa <net_tcp_validate_seq>
   1cd4c:	b928      	cbnz	r0, 1cd5a <_tcp_established+0x9e>
   1cd4e:	4a3d      	ldr	r2, [pc, #244]	; (1ce44 <_tcp_established+0x188>)
   1cd50:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1cd52:	3301      	adds	r3, #1
   1cd54:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1cd56:	2502      	movs	r5, #2
   1cd58:	e7c6      	b.n	1cce8 <_tcp_established+0x2c>
	net_stats.tcp.rst++;
   1cd5a:	4a3a      	ldr	r2, [pc, #232]	; (1ce44 <_tcp_established+0x188>)
   1cd5c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1cd5e:	3301      	adds	r3, #1
   1cd60:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->recv_cb) {
   1cd62:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1cd64:	b135      	cbz	r5, 1cd74 <_tcp_established+0xb8>
					 context->tcp->recv_user_data);
   1cd66:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, -ECONNRESET,
   1cd68:	685b      	ldr	r3, [r3, #4]
   1cd6a:	f06f 0267 	mvn.w	r2, #103	; 0x67
   1cd6e:	2100      	movs	r1, #0
   1cd70:	4620      	mov	r0, r4
   1cd72:	47a8      	blx	r5
		net_context_unref(context);
   1cd74:	4620      	mov	r0, r4
   1cd76:	f7ff ff25 	bl	1cbc4 <net_context_unref>
		return NET_DROP;
   1cd7a:	2502      	movs	r5, #2
   1cd7c:	e7b4      	b.n	1cce8 <_tcp_established+0x2c>
		send_ack(context, &conn->remote_addr, true);
   1cd7e:	2201      	movs	r2, #1
   1cd80:	4639      	mov	r1, r7
   1cd82:	4620      	mov	r0, r4
   1cd84:	f7ff fcd2 	bl	1c72c <send_ack>
		return NET_DROP;
   1cd88:	2502      	movs	r5, #2
   1cd8a:	e7ad      	b.n	1cce8 <_tcp_established+0x2c>
	set_appdata_values(pkt, IPPROTO_TCP);
   1cd8c:	2106      	movs	r1, #6
   1cd8e:	4630      	mov	r0, r6
   1cd90:	f7ff fc25 	bl	1c5de <set_appdata_values>
	return pkt->appdatalen;
   1cd94:	f8b6 9030 	ldrh.w	r9, [r6, #48]	; 0x30
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   1cd98:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1cd9a:	f006 fcc5 	bl	23728 <net_tcp_get_recv_wnd>
   1cd9e:	4581      	cmp	r9, r0
   1cda0:	d901      	bls.n	1cda6 <_tcp_established+0xea>
		return NET_DROP;
   1cda2:	2502      	movs	r5, #2
   1cda4:	e7a0      	b.n	1cce8 <_tcp_established+0x2c>
	ret = packet_received(conn, pkt, context->tcp->recv_user_data);
   1cda6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1cda8:	685a      	ldr	r2, [r3, #4]
   1cdaa:	4631      	mov	r1, r6
   1cdac:	4638      	mov	r0, r7
   1cdae:	f7ff fc4b 	bl	1c648 <packet_received>
   1cdb2:	4605      	mov	r5, r0
	context->tcp->send_ack += data_len;
   1cdb4:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1cdb6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1cdba:	444b      	add	r3, r9
   1cdbc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	if (tcp_flags & NET_TCP_FIN) {
   1cdc0:	f018 0f01 	tst.w	r8, #1
   1cdc4:	d022      	beq.n	1ce0c <_tcp_established+0x150>
		context->tcp->fin_rcvd = 1;
   1cdc6:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1cdc8:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   1cdcc:	f043 0304 	orr.w	r3, r3, #4
   1cdd0:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   1cdd4:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1cdd6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   1cdda:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1cdde:	2b04      	cmp	r3, #4
   1cde0:	d02a      	beq.n	1ce38 <_tcp_established+0x17c>
		context->tcp->send_ack += 1;
   1cde2:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1cde4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1cde8:	3301      	adds	r3, #1
   1cdea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		if (context->recv_cb) {
   1cdee:	6b26      	ldr	r6, [r4, #48]	; 0x30
   1cdf0:	b12e      	cbz	r6, 1cdfe <_tcp_established+0x142>
					 context->tcp->recv_user_data);
   1cdf2:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, 0,
   1cdf4:	685b      	ldr	r3, [r3, #4]
   1cdf6:	2200      	movs	r2, #0
   1cdf8:	4611      	mov	r1, r2
   1cdfa:	4620      	mov	r0, r4
   1cdfc:	47b0      	blx	r6
		k_delayed_work_submit(&context->tcp->ack_timer, ACK_TIMEOUT);
   1cdfe:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1ce00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ce04:	3108      	adds	r1, #8
   1ce06:	4810      	ldr	r0, [pc, #64]	; (1ce48 <_tcp_established+0x18c>)
   1ce08:	f00d f8ec 	bl	29fe4 <k_delayed_work_submit_to_queue>
	send_ack(context, &conn->remote_addr, false);
   1ce0c:	2200      	movs	r2, #0
   1ce0e:	4639      	mov	r1, r7
   1ce10:	4620      	mov	r0, r4
   1ce12:	f7ff fc8b 	bl	1c72c <send_ack>
	if (sys_slist_is_empty(&context->tcp->sent_list)
   1ce16:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ce18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   1ce1c:	2a00      	cmp	r2, #0
   1ce1e:	f47f af63 	bne.w	1cce8 <_tcp_established+0x2c>
	    && context->tcp->fin_sent) {
   1ce22:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
   1ce26:	f003 0306 	and.w	r3, r3, #6
   1ce2a:	2b06      	cmp	r3, #6
   1ce2c:	f47f af5c 	bne.w	1cce8 <_tcp_established+0x2c>
		net_context_unref(context);
   1ce30:	4620      	mov	r0, r4
   1ce32:	f7ff fec7 	bl	1cbc4 <net_context_unref>
   1ce36:	e757      	b.n	1cce8 <_tcp_established+0x2c>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   1ce38:	2105      	movs	r1, #5
   1ce3a:	f006 fcf4 	bl	23826 <net_tcp_change_state>
   1ce3e:	e7d0      	b.n	1cde2 <_tcp_established+0x126>
		return NET_DROP;
   1ce40:	2502      	movs	r5, #2
   1ce42:	e751      	b.n	1cce8 <_tcp_established+0x2c>
   1ce44:	20003038 	.word	0x20003038
   1ce48:	20003158 	.word	0x20003158

0001ce4c <tcp_established>:
NET_CONN_CB(tcp_established)
   1ce4c:	b570      	push	{r4, r5, r6, lr}
   1ce4e:	4605      	mov	r5, r0
   1ce50:	460e      	mov	r6, r1
   1ce52:	4614      	mov	r4, r2
   1ce54:	4610      	mov	r0, r2
   1ce56:	f7ff fea7 	bl	1cba8 <net_context_ref>
   1ce5a:	4622      	mov	r2, r4
   1ce5c:	4631      	mov	r1, r6
   1ce5e:	4628      	mov	r0, r5
   1ce60:	f7ff ff2c 	bl	1ccbc <_tcp_established>
   1ce64:	4605      	mov	r5, r0
   1ce66:	4620      	mov	r0, r4
   1ce68:	f7ff feac 	bl	1cbc4 <net_context_unref>
   1ce6c:	4628      	mov	r0, r5
   1ce6e:	bd70      	pop	{r4, r5, r6, pc}

0001ce70 <net_context_put>:
	if (!PART_OF_ARRAY(contexts, context)) {
   1ce70:	b390      	cbz	r0, 1ced8 <net_context_put+0x68>
{
   1ce72:	b510      	push	{r4, lr}
   1ce74:	4604      	mov	r4, r0
	if (!PART_OF_ARRAY(contexts, context)) {
   1ce76:	4a1d      	ldr	r2, [pc, #116]	; (1ceec <net_context_put+0x7c>)
   1ce78:	4290      	cmp	r0, r2
   1ce7a:	d330      	bcc.n	1cede <net_context_put+0x6e>
   1ce7c:	f502 721c 	add.w	r2, r2, #624	; 0x270
   1ce80:	4290      	cmp	r0, r2
   1ce82:	d22f      	bcs.n	1cee4 <net_context_put+0x74>
	context->connect_cb = NULL;
   1ce84:	2200      	movs	r2, #0
   1ce86:	6382      	str	r2, [r0, #56]	; 0x38
	context->recv_cb = NULL;
   1ce88:	6302      	str	r2, [r0, #48]	; 0x30
	context->send_cb = NULL;
   1ce8a:	6342      	str	r2, [r0, #52]	; 0x34
	if (context->flags & NET_CONTEXT_PROTO) {
   1ce8c:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1ce90:	f012 0f40 	tst.w	r2, #64	; 0x40
   1ce94:	d007      	beq.n	1cea6 <net_context_put+0x36>
		return IPPROTO_TCP;
   1ce96:	2106      	movs	r1, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1ce98:	2906      	cmp	r1, #6
   1ce9a:	d006      	beq.n	1ceaa <net_context_put+0x3a>
	net_context_unref(context);
   1ce9c:	4620      	mov	r0, r4
   1ce9e:	f7ff fe91 	bl	1cbc4 <net_context_unref>
	return 0;
   1cea2:	2000      	movs	r0, #0
   1cea4:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1cea6:	2111      	movs	r1, #17
   1cea8:	e7f6      	b.n	1ce98 <net_context_put+0x28>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1ceaa:	f3c2 0241 	ubfx	r2, r2, #1, #2
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   1ceae:	2a02      	cmp	r2, #2
   1ceb0:	d001      	beq.n	1ceb6 <net_context_put+0x46>
   1ceb2:	2a03      	cmp	r2, #3
   1ceb4:	d1f2      	bne.n	1ce9c <net_context_put+0x2c>
		    && !context->tcp->fin_rcvd) {
   1ceb6:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1ceb8:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
   1cebc:	f013 0f04 	tst.w	r3, #4
   1cec0:	d1ec      	bne.n	1ce9c <net_context_put+0x2c>
   1cec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cec6:	3130      	adds	r1, #48	; 0x30
   1cec8:	4809      	ldr	r0, [pc, #36]	; (1cef0 <net_context_put+0x80>)
   1ceca:	f00d f88b 	bl	29fe4 <k_delayed_work_submit_to_queue>
			queue_fin(context);
   1cece:	4620      	mov	r0, r4
   1ced0:	f7ff fb59 	bl	1c586 <queue_fin>
			return 0;
   1ced4:	2000      	movs	r0, #0
   1ced6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1ced8:	f06f 0015 	mvn.w	r0, #21
   1cedc:	4770      	bx	lr
   1cede:	f06f 0015 	mvn.w	r0, #21
   1cee2:	bd10      	pop	{r4, pc}
   1cee4:	f06f 0015 	mvn.w	r0, #21
}
   1cee8:	bd10      	pop	{r4, pc}
   1ceea:	bf00      	nop
   1ceec:	20002188 	.word	0x20002188
   1cef0:	20003158 	.word	0x20003158

0001cef4 <net_context_bind>:
	if (context->conn_handler) {
   1cef4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1cef6:	2b00      	cmp	r3, #0
   1cef8:	d15c      	bne.n	1cfb4 <net_context_bind+0xc0>
	if (addr->sa_family == AF_INET6) {
   1cefa:	880b      	ldrh	r3, [r1, #0]
   1cefc:	2b0a      	cmp	r3, #10
   1cefe:	d15d      	bne.n	1cfbc <net_context_bind+0xc8>
{
   1cf00:	b570      	push	{r4, r5, r6, lr}
   1cf02:	b082      	sub	sp, #8
		struct net_if *iface = NULL;
   1cf04:	2300      	movs	r3, #0
   1cf06:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1cf08:	2a17      	cmp	r2, #23
   1cf0a:	d945      	bls.n	1cf98 <net_context_bind+0xa4>
   1cf0c:	460d      	mov	r5, r1
   1cf0e:	4604      	mov	r4, r0
	return addr->s6_addr[0] == 0xFF;
   1cf10:	790b      	ldrb	r3, [r1, #4]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1cf12:	2bff      	cmp	r3, #255	; 0xff
   1cf14:	d009      	beq.n	1cf2a <net_context_bind+0x36>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1cf16:	684b      	ldr	r3, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cf18:	b983      	cbnz	r3, 1cf3c <net_context_bind+0x48>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1cf1a:	688b      	ldr	r3, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1cf1c:	bb2b      	cbnz	r3, 1cf6a <net_context_bind+0x76>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cf1e:	68cb      	ldr	r3, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1cf20:	bb2b      	cbnz	r3, 1cf6e <net_context_bind+0x7a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1cf22:	690b      	ldr	r3, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cf24:	b32b      	cbz	r3, 1cf72 <net_context_bind+0x7e>
   1cf26:	2300      	movs	r3, #0
   1cf28:	e009      	b.n	1cf3e <net_context_bind+0x4a>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   1cf2a:	a901      	add	r1, sp, #4
   1cf2c:	1d28      	adds	r0, r5, #4
   1cf2e:	f7fe fccb 	bl	1b8c8 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   1cf32:	4606      	mov	r6, r0
   1cf34:	2800      	cmp	r0, #0
   1cf36:	d034      	beq.n	1cfa2 <net_context_bind+0xae>
			ptr = &maddr->address.in6_addr;
   1cf38:	3608      	adds	r6, #8
   1cf3a:	e007      	b.n	1cf4c <net_context_bind+0x58>
   1cf3c:	2300      	movs	r3, #0
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1cf3e:	b1d3      	cbz	r3, 1cf76 <net_context_bind+0x82>
			iface = net_if_get_default();
   1cf40:	f7fe fa4c 	bl	1b3dc <net_if_get_default>
   1cf44:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   1cf46:	f002 fde9 	bl	1fb1c <net_ipv6_unspecified_address>
   1cf4a:	4606      	mov	r6, r0
		if (!iface) {
   1cf4c:	9801      	ldr	r0, [sp, #4]
   1cf4e:	b370      	cbz	r0, 1cfae <net_context_bind+0xba>
	context->iface = net_if_get_by_iface(iface);
   1cf50:	f7ff f9ec 	bl	1c32c <net_if_get_by_iface>
   1cf54:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1cf58:	230a      	movs	r3, #10
   1cf5a:	8123      	strh	r3, [r4, #8]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   1cf5c:	60e6      	str	r6, [r4, #12]
		if (addr6->sin6_port) {
   1cf5e:	8869      	ldrh	r1, [r5, #2]
   1cf60:	b989      	cbnz	r1, 1cf86 <net_context_bind+0x92>
				net_sin6_ptr(&context->local)->sin6_port;
   1cf62:	8963      	ldrh	r3, [r4, #10]
			addr6->sin6_port =
   1cf64:	806b      	strh	r3, [r5, #2]
		return 0;
   1cf66:	2300      	movs	r3, #0
   1cf68:	e018      	b.n	1cf9c <net_context_bind+0xa8>
   1cf6a:	2300      	movs	r3, #0
   1cf6c:	e7e7      	b.n	1cf3e <net_context_bind+0x4a>
   1cf6e:	2300      	movs	r3, #0
   1cf70:	e7e5      	b.n	1cf3e <net_context_bind+0x4a>
   1cf72:	2301      	movs	r3, #1
   1cf74:	e7e3      	b.n	1cf3e <net_context_bind+0x4a>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   1cf76:	a901      	add	r1, sp, #4
   1cf78:	1d28      	adds	r0, r5, #4
   1cf7a:	f7fe fa5b 	bl	1b434 <net_if_ipv6_addr_lookup>
			if (!ifaddr) {
   1cf7e:	4606      	mov	r6, r0
   1cf80:	b190      	cbz	r0, 1cfa8 <net_context_bind+0xb4>
			ptr = &ifaddr->address.in6_addr;
   1cf82:	3604      	adds	r6, #4
   1cf84:	e7e2      	b.n	1cf4c <net_context_bind+0x58>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   1cf86:	462a      	mov	r2, r5
   1cf88:	4618      	mov	r0, r3
   1cf8a:	f7ff fa9f 	bl	1c4cc <check_used_port>
			if (!ret) {
   1cf8e:	4603      	mov	r3, r0
   1cf90:	b920      	cbnz	r0, 1cf9c <net_context_bind+0xa8>
					addr6->sin6_port;
   1cf92:	886a      	ldrh	r2, [r5, #2]
				net_sin6_ptr(&context->local)->sin6_port =
   1cf94:	8162      	strh	r2, [r4, #10]
   1cf96:	e001      	b.n	1cf9c <net_context_bind+0xa8>
			return -EINVAL;
   1cf98:	f06f 0315 	mvn.w	r3, #21
}
   1cf9c:	4618      	mov	r0, r3
   1cf9e:	b002      	add	sp, #8
   1cfa0:	bd70      	pop	{r4, r5, r6, pc}
				return -ENOENT;
   1cfa2:	f06f 0301 	mvn.w	r3, #1
   1cfa6:	e7f9      	b.n	1cf9c <net_context_bind+0xa8>
				return -ENOENT;
   1cfa8:	f06f 0301 	mvn.w	r3, #1
   1cfac:	e7f6      	b.n	1cf9c <net_context_bind+0xa8>
			return -EADDRNOTAVAIL;
   1cfae:	f06f 037c 	mvn.w	r3, #124	; 0x7c
   1cfb2:	e7f3      	b.n	1cf9c <net_context_bind+0xa8>
		return -EISCONN;
   1cfb4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
}
   1cfb8:	4618      	mov	r0, r3
   1cfba:	4770      	bx	lr
	return -EINVAL;
   1cfbc:	f06f 0315 	mvn.w	r3, #21
   1cfc0:	e7fa      	b.n	1cfb8 <net_context_bind+0xc4>

0001cfc2 <bind_default>:
	if (context->flags & NET_CONTEXT_FAMILY) {
   1cfc2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1cfc6:	f013 0f10 	tst.w	r3, #16
   1cfca:	d006      	beq.n	1cfda <bind_default+0x18>
		return AF_INET6;
   1cfcc:	230a      	movs	r3, #10
	if (family == AF_INET6) {
   1cfce:	2b0a      	cmp	r3, #10
   1cfd0:	d120      	bne.n	1d014 <bind_default+0x52>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1cfd2:	68c3      	ldr	r3, [r0, #12]
   1cfd4:	b11b      	cbz	r3, 1cfde <bind_default+0x1c>
			return 0;
   1cfd6:	2000      	movs	r0, #0
   1cfd8:	4770      	bx	lr
	return AF_INET;
   1cfda:	2302      	movs	r3, #2
   1cfdc:	e7f7      	b.n	1cfce <bind_default+0xc>
{
   1cfde:	b530      	push	{r4, r5, lr}
   1cfe0:	b087      	sub	sp, #28
   1cfe2:	4604      	mov	r4, r0
		addr6.sin6_family = AF_INET6;
   1cfe4:	ad06      	add	r5, sp, #24
   1cfe6:	230a      	movs	r3, #10
   1cfe8:	f825 3d18 	strh.w	r3, [r5, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   1cfec:	f002 fd96 	bl	1fb1c <net_ipv6_unspecified_address>
   1cff0:	2210      	movs	r2, #16
   1cff2:	4601      	mov	r1, r0
   1cff4:	a801      	add	r0, sp, #4
   1cff6:	f7e3 f963 	bl	2c0 <memcpy>
			find_available_port(context,
   1cffa:	4629      	mov	r1, r5
   1cffc:	4620      	mov	r0, r4
   1cffe:	f7ff faa1 	bl	1c544 <find_available_port>
		addr6.sin6_port =
   1d002:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   1d006:	2218      	movs	r2, #24
   1d008:	4629      	mov	r1, r5
   1d00a:	4620      	mov	r0, r4
   1d00c:	f7ff ff72 	bl	1cef4 <net_context_bind>
}
   1d010:	b007      	add	sp, #28
   1d012:	bd30      	pop	{r4, r5, pc}
	return -EINVAL;
   1d014:	f06f 0015 	mvn.w	r0, #21
   1d018:	4770      	bx	lr

0001d01a <sendto>:
{
   1d01a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d01c:	b085      	sub	sp, #20
   1d01e:	9003      	str	r0, [sp, #12]
	return pkt->context;
   1d020:	68c5      	ldr	r5, [r0, #12]
	return context->flags & NET_CONTEXT_IN_USE;
   1d022:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1d026:	f010 0f01 	tst.w	r0, #1
   1d02a:	d072      	beq.n	1d112 <sendto+0xf8>
	if (context->flags & NET_CONTEXT_PROTO) {
   1d02c:	f010 0f40 	tst.w	r0, #64	; 0x40
   1d030:	d01f      	beq.n	1d072 <sendto+0x58>
		return IPPROTO_TCP;
   1d032:	f04f 0e06 	mov.w	lr, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d036:	f1be 0f06 	cmp.w	lr, #6
   1d03a:	d01d      	beq.n	1d078 <sendto+0x5e>
   1d03c:	461f      	mov	r7, r3
   1d03e:	4616      	mov	r6, r2
   1d040:	460c      	mov	r4, r1
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d042:	f1be 0f11 	cmp.w	lr, #17
   1d046:	d024      	beq.n	1d092 <sendto+0x78>
	if (!dst_addr) {
   1d048:	2c00      	cmp	r4, #0
   1d04a:	d068      	beq.n	1d11e <sendto+0x104>
	if (net_pkt_family(pkt) == AF_INET6) {
   1d04c:	9903      	ldr	r1, [sp, #12]
	return pkt->family;
   1d04e:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1d052:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1d056:	2b0a      	cmp	r3, #10
   1d058:	d164      	bne.n	1d124 <sendto+0x10a>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1d05a:	2e17      	cmp	r6, #23
   1d05c:	d965      	bls.n	1d12a <sendto+0x110>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d05e:	6863      	ldr	r3, [r4, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d060:	b9f3      	cbnz	r3, 1d0a0 <sendto+0x86>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d062:	68a3      	ldr	r3, [r4, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d064:	bb63      	cbnz	r3, 1d0c0 <sendto+0xa6>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d066:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d068:	bb63      	cbnz	r3, 1d0c4 <sendto+0xaa>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1d06a:	6923      	ldr	r3, [r4, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d06c:	b363      	cbz	r3, 1d0c8 <sendto+0xae>
   1d06e:	2300      	movs	r3, #0
   1d070:	e017      	b.n	1d0a2 <sendto+0x88>
	return IPPROTO_UDP;
   1d072:	f04f 0e11 	mov.w	lr, #17
   1d076:	e7de      	b.n	1d036 <sendto+0x1c>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d078:	f3c0 0041 	ubfx	r0, r0, #1, #2
		if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1d07c:	2802      	cmp	r0, #2
   1d07e:	d14b      	bne.n	1d118 <sendto+0xfe>
		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1d080:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1d082:	f8b0 00a4 	ldrh.w	r0, [r0, #164]	; 0xa4
   1d086:	f410 7f80 	tst.w	r0, #256	; 0x100
   1d08a:	d0d7      	beq.n	1d03c <sendto+0x22>
			return -ESHUTDOWN;
   1d08c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
   1d090:	e03c      	b.n	1d10c <sendto+0xf2>
		ret = bind_default(context);
   1d092:	4628      	mov	r0, r5
   1d094:	f7ff ff95 	bl	1cfc2 <bind_default>
		if (ret) {
   1d098:	4603      	mov	r3, r0
   1d09a:	2800      	cmp	r0, #0
   1d09c:	d0d4      	beq.n	1d048 <sendto+0x2e>
   1d09e:	e035      	b.n	1d10c <sendto+0xf2>
   1d0a0:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1d0a2:	2b00      	cmp	r3, #0
   1d0a4:	d144      	bne.n	1d130 <sendto+0x116>
	if (context->flags & NET_CONTEXT_PROTO) {
   1d0a6:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1d0aa:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d0ae:	d00d      	beq.n	1d0cc <sendto+0xb2>
		return IPPROTO_TCP;
   1d0b0:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d0b2:	2b11      	cmp	r3, #17
   1d0b4:	d00c      	beq.n	1d0d0 <sendto+0xb6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d0b6:	2b06      	cmp	r3, #6
   1d0b8:	d13d      	bne.n	1d136 <sendto+0x11c>
	return net_buf_frags_len(pkt->frags);
   1d0ba:	688a      	ldr	r2, [r1, #8]
	size_t bytes = 0;
   1d0bc:	2000      	movs	r0, #0
   1d0be:	e011      	b.n	1d0e4 <sendto+0xca>
   1d0c0:	2300      	movs	r3, #0
   1d0c2:	e7ee      	b.n	1d0a2 <sendto+0x88>
   1d0c4:	2300      	movs	r3, #0
   1d0c6:	e7ec      	b.n	1d0a2 <sendto+0x88>
   1d0c8:	2301      	movs	r3, #1
   1d0ca:	e7ea      	b.n	1d0a2 <sendto+0x88>
	return IPPROTO_UDP;
   1d0cc:	2311      	movs	r3, #17
   1d0ce:	e7f0      	b.n	1d0b2 <sendto+0x98>
		ret = create_udp_packet(context, pkt, dst_addr, &pkt);
   1d0d0:	ab03      	add	r3, sp, #12
   1d0d2:	4622      	mov	r2, r4
   1d0d4:	4628      	mov	r0, r5
   1d0d6:	f7ff fc0f 	bl	1c8f8 <create_udp_packet>
   1d0da:	4603      	mov	r3, r0
   1d0dc:	e009      	b.n	1d0f2 <sendto+0xd8>
		bytes += buf->len;
   1d0de:	8994      	ldrh	r4, [r2, #12]
   1d0e0:	4420      	add	r0, r4
		buf = buf->frags;
   1d0e2:	6812      	ldr	r2, [r2, #0]
	while (buf) {
   1d0e4:	2a00      	cmp	r2, #0
   1d0e6:	d1fa      	bne.n	1d0de <sendto+0xc4>
	pkt->appdatalen = len;
   1d0e8:	8608      	strh	r0, [r1, #48]	; 0x30
		ret = net_tcp_queue_data(context, pkt);
   1d0ea:	4628      	mov	r0, r5
   1d0ec:	f006 fd08 	bl	23b00 <net_tcp_queue_data>
   1d0f0:	4603      	mov	r3, r0
	if (ret < 0) {
   1d0f2:	2b00      	cmp	r3, #0
   1d0f4:	db0a      	blt.n	1d10c <sendto+0xf2>
	return send_data(context, pkt, cb, timeout, token, user_data);
   1d0f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d0f8:	9301      	str	r3, [sp, #4]
   1d0fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d0fc:	9300      	str	r3, [sp, #0]
   1d0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d100:	463a      	mov	r2, r7
   1d102:	9903      	ldr	r1, [sp, #12]
   1d104:	4628      	mov	r0, r5
   1d106:	f7ff fc1d 	bl	1c944 <send_data>
   1d10a:	4603      	mov	r3, r0
}
   1d10c:	4618      	mov	r0, r3
   1d10e:	b005      	add	sp, #20
   1d110:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBADF;
   1d112:	f06f 0308 	mvn.w	r3, #8
   1d116:	e7f9      	b.n	1d10c <sendto+0xf2>
			return -ENOTCONN;
   1d118:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d11c:	e7f6      	b.n	1d10c <sendto+0xf2>
		return -EDESTADDRREQ;
   1d11e:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1d122:	e7f3      	b.n	1d10c <sendto+0xf2>
		return -EINVAL;
   1d124:	f06f 0315 	mvn.w	r3, #21
   1d128:	e7f0      	b.n	1d10c <sendto+0xf2>
			return -EINVAL;
   1d12a:	f06f 0315 	mvn.w	r3, #21
   1d12e:	e7ed      	b.n	1d10c <sendto+0xf2>
			return -EDESTADDRREQ;
   1d130:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1d134:	e7ea      	b.n	1d10c <sendto+0xf2>
		return -EPROTONOSUPPORT;
   1d136:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   1d13a:	e7e7      	b.n	1d10c <sendto+0xf2>

0001d13c <recv_udp>:
#if defined(CONFIG_NET_UDP)
static int recv_udp(struct net_context *context,
		    net_context_recv_cb_t cb,
		    s32_t timeout,
		    void *user_data)
{
   1d13c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d13e:	b08f      	sub	sp, #60	; 0x3c
   1d140:	4604      	mov	r4, r0
   1d142:	460d      	mov	r5, r1
   1d144:	461e      	mov	r6, r3
	struct sockaddr local_addr = {
   1d146:	2300      	movs	r3, #0
   1d148:	9304      	str	r3, [sp, #16]
   1d14a:	9305      	str	r3, [sp, #20]
   1d14c:	9306      	str	r3, [sp, #24]
   1d14e:	9307      	str	r3, [sp, #28]
   1d150:	9308      	str	r3, [sp, #32]
   1d152:	9309      	str	r3, [sp, #36]	; 0x24
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d154:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1d158:	f013 0f10 	tst.w	r3, #16
   1d15c:	d037      	beq.n	1d1ce <recv_udp+0x92>
		return AF_INET6;
   1d15e:	230a      	movs	r3, #10
   1d160:	f8ad 3010 	strh.w	r3, [sp, #16]
	u16_t lport = 0;
	int ret;

	ARG_UNUSED(timeout);

	if (context->conn_handler) {
   1d164:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d166:	b118      	cbz	r0, 1d170 <recv_udp+0x34>
		net_conn_unregister(context->conn_handler);
   1d168:	f008 f864 	bl	25234 <net_conn_unregister>
		context->conn_handler = NULL;
   1d16c:	2300      	movs	r3, #0
   1d16e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	ret = bind_default(context);
   1d170:	4620      	mov	r0, r4
   1d172:	f7ff ff26 	bl	1cfc2 <bind_default>
	if (ret) {
   1d176:	4603      	mov	r3, r0
   1d178:	bb30      	cbnz	r0, 1d1c8 <recv_udp+0x8c>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d17a:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   1d17e:	f017 0f10 	tst.w	r7, #16
   1d182:	d026      	beq.n	1d1d2 <recv_udp+0x96>
		return AF_INET6;
   1d184:	230a      	movs	r3, #10
		return ret;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_context_get_family(context) == AF_INET6) {
   1d186:	2b0a      	cmp	r3, #10
   1d188:	d025      	beq.n	1d1d6 <recv_udp+0x9a>
	u16_t lport = 0;
   1d18a:	f04f 0e00 	mov.w	lr, #0
	struct sockaddr *laddr = NULL;
   1d18e:	4672      	mov	r2, lr

		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
	}
#endif /* CONFIG_NET_IPV4 */

	context->recv_cb = cb;
   1d190:	6325      	str	r5, [r4, #48]	; 0x30
	if (context->flags & NET_CONTEXT_PROTO) {
   1d192:	f017 0f40 	tst.w	r7, #64	; 0x40
   1d196:	d037      	beq.n	1d208 <recv_udp+0xcc>
		return IPPROTO_TCP;
   1d198:	2006      	movs	r0, #6

	ret = net_conn_register(net_context_get_ip_proto(context),
   1d19a:	f017 0f80 	tst.w	r7, #128	; 0x80
   1d19e:	d135      	bne.n	1d20c <recv_udp+0xd0>
   1d1a0:	2100      	movs	r1, #0
				context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
							&context->remote : NULL,
				laddr,
				ntohs(net_sin(&context->remote)->sin_port),
   1d1a2:	8ae5      	ldrh	r5, [r4, #22]
   1d1a4:	022b      	lsls	r3, r5, #8
   1d1a6:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
				ntohs(lport),
   1d1aa:	ea4f 251e 	mov.w	r5, lr, lsr #8
   1d1ae:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d1b2:	b2ad      	uxth	r5, r5
   1d1b4:	342c      	adds	r4, #44	; 0x2c
   1d1b6:	9403      	str	r4, [sp, #12]
   1d1b8:	9602      	str	r6, [sp, #8]
   1d1ba:	4c16      	ldr	r4, [pc, #88]	; (1d214 <recv_udp+0xd8>)
   1d1bc:	9401      	str	r4, [sp, #4]
   1d1be:	9500      	str	r5, [sp, #0]
   1d1c0:	b29b      	uxth	r3, r3
   1d1c2:	f008 f855 	bl	25270 <net_conn_register>
   1d1c6:	4603      	mov	r3, r0
				packet_received,
				user_data,
				&context->conn_handler);

	return ret;
}
   1d1c8:	4618      	mov	r0, r3
   1d1ca:	b00f      	add	sp, #60	; 0x3c
   1d1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   1d1ce:	2302      	movs	r3, #2
   1d1d0:	e7c6      	b.n	1d160 <recv_udp+0x24>
   1d1d2:	2302      	movs	r3, #2
   1d1d4:	e7d7      	b.n	1d186 <recv_udp+0x4a>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1d1d6:	68e3      	ldr	r3, [r4, #12]
   1d1d8:	b1a3      	cbz	r3, 1d204 <recv_udp+0xc8>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1d1da:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1d1de:	6818      	ldr	r0, [r3, #0]
   1d1e0:	6859      	ldr	r1, [r3, #4]
   1d1e2:	689a      	ldr	r2, [r3, #8]
   1d1e4:	68db      	ldr	r3, [r3, #12]
   1d1e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1d1ea:	f10d 0e14 	add.w	lr, sp, #20
   1d1ee:	ab0e      	add	r3, sp, #56	; 0x38
   1d1f0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1d1f4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			laddr = &local_addr;
   1d1f8:	aa04      	add	r2, sp, #16
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   1d1fa:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   1d1fe:	f8ad e012 	strh.w	lr, [sp, #18]
   1d202:	e7c5      	b.n	1d190 <recv_udp+0x54>
	struct sockaddr *laddr = NULL;
   1d204:	2200      	movs	r2, #0
   1d206:	e7f8      	b.n	1d1fa <recv_udp+0xbe>
	return IPPROTO_UDP;
   1d208:	2011      	movs	r0, #17
   1d20a:	e7c6      	b.n	1d19a <recv_udp+0x5e>
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d20c:	f104 0114 	add.w	r1, r4, #20
   1d210:	e7c7      	b.n	1d1a2 <recv_udp+0x66>
   1d212:	bf00      	nop
   1d214:	0001c649 	.word	0x0001c649

0001d218 <net_context_connect>:
{
   1d218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d21c:	b090      	sub	sp, #64	; 0x40
	return context->flags & NET_CONTEXT_IN_USE;
   1d21e:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1d222:	f014 0f01 	tst.w	r4, #1
   1d226:	f000 80c9 	beq.w	1d3bc <net_context_connect+0x1a4>
   1d22a:	461f      	mov	r7, r3
   1d22c:	4615      	mov	r5, r2
   1d22e:	460e      	mov	r6, r1
   1d230:	4604      	mov	r4, r0
	ret = bind_default(context);
   1d232:	f7ff fec6 	bl	1cfc2 <bind_default>
	if (ret) {
   1d236:	4680      	mov	r8, r0
   1d238:	2800      	cmp	r0, #0
   1d23a:	f040 80c1 	bne.w	1d3c0 <net_context_connect+0x1a8>
	if (addr->sa_family != net_context_get_family(context)) {
   1d23e:	8831      	ldrh	r1, [r6, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d240:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d244:	f013 0f10 	tst.w	r3, #16
   1d248:	d02b      	beq.n	1d2a2 <net_context_connect+0x8a>
		return AF_INET6;
   1d24a:	220a      	movs	r2, #10
   1d24c:	4291      	cmp	r1, r2
   1d24e:	f040 80bb 	bne.w	1d3c8 <net_context_connect+0x1b0>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d252:	f3c3 0341 	ubfx	r3, r3, #1, #2
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1d256:	2b03      	cmp	r3, #3
   1d258:	f000 80b9 	beq.w	1d3ce <net_context_connect+0x1b6>
	if (net_context_get_family(context) == AF_INET6) {
   1d25c:	2a0a      	cmp	r2, #10
   1d25e:	f040 80b9 	bne.w	1d3d4 <net_context_connect+0x1bc>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1d262:	2d17      	cmp	r5, #23
   1d264:	f240 80b9 	bls.w	1d3da <net_context_connect+0x1c2>
	return addr->s6_addr[0] == 0xFF;
   1d268:	7e23      	ldrb	r3, [r4, #24]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1d26a:	2bff      	cmp	r3, #255	; 0xff
   1d26c:	f000 80b8 	beq.w	1d3e0 <net_context_connect+0x1c8>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   1d270:	2210      	movs	r2, #16
   1d272:	1d31      	adds	r1, r6, #4
   1d274:	f104 0018 	add.w	r0, r4, #24
   1d278:	f7e3 f822 	bl	2c0 <memcpy>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   1d27c:	f8b6 c002 	ldrh.w	ip, [r6, #2]
   1d280:	f8a4 c016 	strh.w	ip, [r4, #22]
		addr6->sin6_family = AF_INET6;
   1d284:	230a      	movs	r3, #10
   1d286:	82a3      	strh	r3, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d288:	69a3      	ldr	r3, [r4, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d28a:	b963      	cbnz	r3, 1d2a6 <net_context_connect+0x8e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d28c:	69e3      	ldr	r3, [r4, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d28e:	2b00      	cmp	r3, #0
   1d290:	d174      	bne.n	1d37c <net_context_connect+0x164>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d292:	6a23      	ldr	r3, [r4, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d294:	2b00      	cmp	r3, #0
   1d296:	d173      	bne.n	1d380 <net_context_connect+0x168>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1d298:	6a63      	ldr	r3, [r4, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d29a:	2b00      	cmp	r3, #0
   1d29c:	d072      	beq.n	1d384 <net_context_connect+0x16c>
   1d29e:	4643      	mov	r3, r8
   1d2a0:	e002      	b.n	1d2a8 <net_context_connect+0x90>
	return AF_INET;
   1d2a2:	2202      	movs	r2, #2
   1d2a4:	e7d2      	b.n	1d24c <net_context_connect+0x34>
   1d2a6:	4643      	mov	r3, r8
		if (!net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1d2a8:	f013 0f01 	tst.w	r3, #1
   1d2ac:	d16c      	bne.n	1d388 <net_context_connect+0x170>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1d2ae:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d2b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d2b6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1d2ba:	230a      	movs	r3, #10
   1d2bc:	8123      	strh	r3, [r4, #8]
		net_sin6(&local_addr)->sin6_family = AF_INET6;
   1d2be:	f8ad 3018 	strh.w	r3, [sp, #24]
		net_sin6(&local_addr)->sin6_port = lport =
   1d2c2:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
   1d2c6:	f8ad e01a 	strh.w	lr, [sp, #26]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1d2ca:	68e3      	ldr	r3, [r4, #12]
   1d2cc:	2b00      	cmp	r3, #0
   1d2ce:	d062      	beq.n	1d396 <net_context_connect+0x17e>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1d2d0:	ad0c      	add	r5, sp, #48	; 0x30
   1d2d2:	6818      	ldr	r0, [r3, #0]
   1d2d4:	6859      	ldr	r1, [r3, #4]
   1d2d6:	689a      	ldr	r2, [r3, #8]
   1d2d8:	68db      	ldr	r3, [r3, #12]
   1d2da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d2dc:	ad07      	add	r5, sp, #28
   1d2de:	ab10      	add	r3, sp, #64	; 0x40
   1d2e0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1d2e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   1d2e8:	aa06      	add	r2, sp, #24
	if (context->flags & NET_CONTEXT_TYPE) {
   1d2ea:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d2ee:	f013 0f20 	tst.w	r3, #32
   1d2f2:	d052      	beq.n	1d39a <net_context_connect+0x182>
		return SOCK_STREAM;
   1d2f4:	2301      	movs	r3, #1
	if (net_context_get_type(context) == SOCK_DGRAM) {
   1d2f6:	2b02      	cmp	r3, #2
   1d2f8:	d051      	beq.n	1d39e <net_context_connect+0x186>
	if (net_context_get_type(context) != SOCK_STREAM) {
   1d2fa:	2b01      	cmp	r3, #1
   1d2fc:	d173      	bne.n	1d3e6 <net_context_connect+0x1ce>
			       ntohs(rport),
   1d2fe:	ea4f 231c 	mov.w	r3, ip, lsr #8
   1d302:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			       ntohs(lport),
   1d306:	ea4f 211e 	mov.w	r1, lr, lsr #8
   1d30a:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	ret = net_tcp_register(addr,
   1d30e:	b289      	uxth	r1, r1
   1d310:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1d314:	9003      	str	r0, [sp, #12]
   1d316:	9402      	str	r4, [sp, #8]
   1d318:	4835      	ldr	r0, [pc, #212]	; (1d3f0 <net_context_connect+0x1d8>)
   1d31a:	9001      	str	r0, [sp, #4]
   1d31c:	9100      	str	r1, [sp, #0]
   1d31e:	b29b      	uxth	r3, r3
   1d320:	4631      	mov	r1, r6
   1d322:	2006      	movs	r0, #6
   1d324:	f007 ffa4 	bl	25270 <net_conn_register>
	if (ret < 0) {
   1d328:	2800      	cmp	r0, #0
   1d32a:	db5f      	blt.n	1d3ec <net_context_connect+0x1d4>
	context->connect_cb = cb;
   1d32c:	63a7      	str	r7, [r4, #56]	; 0x38
	context->user_data = user_data;
   1d32e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d330:	6023      	str	r3, [r4, #0]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1d332:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d336:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1d33a:	f043 0302 	orr.w	r3, r3, #2
   1d33e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1d342:	2102      	movs	r1, #2
   1d344:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1d346:	f006 fa6e 	bl	23826 <net_tcp_change_state>
	struct net_pkt *pkt = NULL;
   1d34a:	2200      	movs	r2, #0
   1d34c:	ab10      	add	r3, sp, #64	; 0x40
   1d34e:	f843 2d2c 	str.w	r2, [r3, #-44]!
	ret = net_tcp_prepare_segment(context->tcp, flags, NULL, 0,
   1d352:	9302      	str	r3, [sp, #8]
   1d354:	9601      	str	r6, [sp, #4]
   1d356:	9200      	str	r2, [sp, #0]
   1d358:	4613      	mov	r3, r2
   1d35a:	2102      	movs	r1, #2
   1d35c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1d35e:	f006 faff 	bl	23960 <net_tcp_prepare_segment>
	if (ret) {
   1d362:	b310      	cbz	r0, 1d3aa <net_context_connect+0x192>
	if (timeout != 0 && k_sem_take(&context->tcp->connect_wait, timeout)) {
   1d364:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d366:	b35b      	cbz	r3, 1d3c0 <net_context_connect+0x1a8>
   1d368:	6e20      	ldr	r0, [r4, #96]	; 0x60
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1d36a:	4619      	mov	r1, r3
   1d36c:	30ac      	adds	r0, #172	; 0xac
   1d36e:	f00c f803 	bl	29378 <_impl_k_sem_take>
   1d372:	4680      	mov	r8, r0
   1d374:	b320      	cbz	r0, 1d3c0 <net_context_connect+0x1a8>
		return -ETIMEDOUT;
   1d376:	f06f 0873 	mvn.w	r8, #115	; 0x73
   1d37a:	e021      	b.n	1d3c0 <net_context_connect+0x1a8>
   1d37c:	4643      	mov	r3, r8
   1d37e:	e793      	b.n	1d2a8 <net_context_connect+0x90>
   1d380:	4643      	mov	r3, r8
   1d382:	e791      	b.n	1d2a8 <net_context_connect+0x90>
   1d384:	2301      	movs	r3, #1
   1d386:	e78f      	b.n	1d2a8 <net_context_connect+0x90>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1d388:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d38c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d390:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   1d394:	e791      	b.n	1d2ba <net_context_connect+0xa2>
	struct sockaddr *laddr = NULL;
   1d396:	2200      	movs	r2, #0
   1d398:	e7a7      	b.n	1d2ea <net_context_connect+0xd2>
	return SOCK_DGRAM;
   1d39a:	2302      	movs	r3, #2
   1d39c:	e7ab      	b.n	1d2f6 <net_context_connect+0xde>
		if (cb) {
   1d39e:	b17f      	cbz	r7, 1d3c0 <net_context_connect+0x1a8>
			cb(context, 0, user_data);
   1d3a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1d3a2:	2100      	movs	r1, #0
   1d3a4:	4620      	mov	r0, r4
   1d3a6:	47b8      	blx	r7
   1d3a8:	e00a      	b.n	1d3c0 <net_context_connect+0x1a8>
	ret = net_send_data(pkt);
   1d3aa:	9805      	ldr	r0, [sp, #20]
   1d3ac:	f7fd fdf4 	bl	1af98 <net_send_data>
	if (ret < 0) {
   1d3b0:	2800      	cmp	r0, #0
   1d3b2:	dad7      	bge.n	1d364 <net_context_connect+0x14c>
		net_pkt_unref(pkt);
   1d3b4:	9805      	ldr	r0, [sp, #20]
   1d3b6:	f000 f9f0 	bl	1d79a <net_pkt_unref>
   1d3ba:	e7d3      	b.n	1d364 <net_context_connect+0x14c>
		return -EBADF;
   1d3bc:	f06f 0808 	mvn.w	r8, #8
}
   1d3c0:	4640      	mov	r0, r8
   1d3c2:	b010      	add	sp, #64	; 0x40
   1d3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   1d3c8:	f06f 0815 	mvn.w	r8, #21
   1d3cc:	e7f8      	b.n	1d3c0 <net_context_connect+0x1a8>
		return -EOPNOTSUPP;
   1d3ce:	f06f 085e 	mvn.w	r8, #94	; 0x5e
   1d3d2:	e7f5      	b.n	1d3c0 <net_context_connect+0x1a8>
		return -EINVAL; /* Not IPv4 or IPv6 */
   1d3d4:	f06f 0815 	mvn.w	r8, #21
   1d3d8:	e7f2      	b.n	1d3c0 <net_context_connect+0x1a8>
			return -EINVAL;
   1d3da:	f06f 0815 	mvn.w	r8, #21
   1d3de:	e7ef      	b.n	1d3c0 <net_context_connect+0x1a8>
			return -EADDRNOTAVAIL;
   1d3e0:	f06f 087c 	mvn.w	r8, #124	; 0x7c
   1d3e4:	e7ec      	b.n	1d3c0 <net_context_connect+0x1a8>
		return -ENOTSUP;
   1d3e6:	f06f 0885 	mvn.w	r8, #133	; 0x85
   1d3ea:	e7e9      	b.n	1d3c0 <net_context_connect+0x1a8>
		return ret;
   1d3ec:	4680      	mov	r8, r0
   1d3ee:	e7e7      	b.n	1d3c0 <net_context_connect+0x1a8>
   1d3f0:	0001cc99 	.word	0x0001cc99

0001d3f4 <net_context_send>:
{
   1d3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d3f6:	b085      	sub	sp, #20
	return pkt->context;
   1d3f8:	68c4      	ldr	r4, [r0, #12]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1d3fa:	f994 505d 	ldrsb.w	r5, [r4, #93]	; 0x5d
   1d3fe:	2d00      	cmp	r5, #0
   1d400:	da17      	bge.n	1d432 <net_context_send+0x3e>
	    !net_sin(&context->remote)->sin_port) {
   1d402:	8ae5      	ldrh	r5, [r4, #22]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1d404:	b1c5      	cbz	r5, 1d438 <net_context_send+0x44>
	return pkt->family;
   1d406:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
   1d40a:	f3c5 05c3 	ubfx	r5, r5, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1d40e:	2d0a      	cmp	r5, #10
   1d410:	d00d      	beq.n	1d42e <net_context_send+0x3a>
		addrlen = 0;
   1d412:	2700      	movs	r7, #0
   1d414:	461e      	mov	r6, r3
   1d416:	460b      	mov	r3, r1
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1d418:	990a      	ldr	r1, [sp, #40]	; 0x28
   1d41a:	9102      	str	r1, [sp, #8]
   1d41c:	9601      	str	r6, [sp, #4]
   1d41e:	9200      	str	r2, [sp, #0]
   1d420:	463a      	mov	r2, r7
   1d422:	f104 0114 	add.w	r1, r4, #20
   1d426:	f7ff fdf8 	bl	1d01a <sendto>
}
   1d42a:	b005      	add	sp, #20
   1d42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		addrlen = sizeof(struct sockaddr_in6);
   1d42e:	2718      	movs	r7, #24
   1d430:	e7f0      	b.n	1d414 <net_context_send+0x20>
		return -EDESTADDRREQ;
   1d432:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1d436:	e7f8      	b.n	1d42a <net_context_send+0x36>
   1d438:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1d43c:	e7f5      	b.n	1d42a <net_context_send+0x36>

0001d43e <net_context_sendto>:
{
   1d43e:	b510      	push	{r4, lr}
   1d440:	b084      	sub	sp, #16
   1d442:	461c      	mov	r4, r3
	return pkt->context;
   1d444:	68c3      	ldr	r3, [r0, #12]
	if (context->flags & NET_CONTEXT_PROTO) {
   1d446:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   1d44a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d44e:	d00d      	beq.n	1d46c <net_context_sendto+0x2e>
		return IPPROTO_TCP;
   1d450:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d452:	2b06      	cmp	r3, #6
   1d454:	d00c      	beq.n	1d470 <net_context_sendto+0x32>
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1d456:	9b08      	ldr	r3, [sp, #32]
   1d458:	9302      	str	r3, [sp, #8]
   1d45a:	9b07      	ldr	r3, [sp, #28]
   1d45c:	9301      	str	r3, [sp, #4]
   1d45e:	9b06      	ldr	r3, [sp, #24]
   1d460:	9300      	str	r3, [sp, #0]
   1d462:	4623      	mov	r3, r4
   1d464:	f7ff fdd9 	bl	1d01a <sendto>
}
   1d468:	b004      	add	sp, #16
   1d46a:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1d46c:	2311      	movs	r3, #17
   1d46e:	e7f0      	b.n	1d452 <net_context_sendto+0x14>
		return net_context_send(pkt, cb, timeout, token, user_data);
   1d470:	9b08      	ldr	r3, [sp, #32]
   1d472:	9300      	str	r3, [sp, #0]
   1d474:	9b07      	ldr	r3, [sp, #28]
   1d476:	9a06      	ldr	r2, [sp, #24]
   1d478:	4621      	mov	r1, r4
   1d47a:	f7ff ffbb 	bl	1d3f4 <net_context_send>
   1d47e:	e7f3      	b.n	1d468 <net_context_sendto+0x2a>

0001d480 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   1d480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   1d482:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   1d486:	f014 0f01 	tst.w	r4, #1
   1d48a:	d030      	beq.n	1d4ee <net_context_recv+0x6e>
	if (context->flags & NET_CONTEXT_PROTO) {
   1d48c:	f014 0f40 	tst.w	r4, #64	; 0x40
   1d490:	d023      	beq.n	1d4da <net_context_recv+0x5a>
		return IPPROTO_TCP;
   1d492:	2606      	movs	r6, #6
   1d494:	4617      	mov	r7, r2
   1d496:	4605      	mov	r5, r0
			context, cb, timeout, user_data);
	}
#endif /* CONFIG_NET_OFFLOAD */

#if defined(CONFIG_NET_UDP)
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d498:	2e11      	cmp	r6, #17
   1d49a:	d020      	beq.n	1d4de <net_context_recv+0x5e>
		}
	} else
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d49c:	2e06      	cmp	r6, #6
   1d49e:	d129      	bne.n	1d4f4 <net_context_recv+0x74>
		NET_ASSERT(context->tcp);

		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1d4a0:	6e02      	ldr	r2, [r0, #96]	; 0x60
   1d4a2:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
   1d4a6:	f410 7f80 	tst.w	r0, #256	; 0x100
   1d4aa:	d126      	bne.n	1d4fa <net_context_recv+0x7a>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d4ac:	f3c4 0441 	ubfx	r4, r4, #1, #2
			return -ESHUTDOWN;
		} else if (net_context_get_state(context)
   1d4b0:	2c02      	cmp	r4, #2
   1d4b2:	d125      	bne.n	1d500 <net_context_recv+0x80>
			   != NET_CONTEXT_CONNECTED) {
			return -ENOTCONN;
		}

		context->recv_cb = cb;
   1d4b4:	6329      	str	r1, [r5, #48]	; 0x30
		context->tcp->recv_user_data = user_data;
   1d4b6:	6053      	str	r3, [r2, #4]
	{
		return -EPROTOTYPE;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
   1d4b8:	b32f      	cbz	r7, 1d506 <net_context_recv+0x86>
		/* Make sure we have the lock, then the packet_received()
		 * callback will release the semaphore when data has been
		 * received.
		 */
		while (k_sem_take(&context->recv_data_wait, K_NO_WAIT)) {
   1d4ba:	f105 0444 	add.w	r4, r5, #68	; 0x44
   1d4be:	2100      	movs	r1, #0
   1d4c0:	4620      	mov	r0, r4
   1d4c2:	f00b ff59 	bl	29378 <_impl_k_sem_take>
   1d4c6:	4606      	mov	r6, r0
   1d4c8:	2800      	cmp	r0, #0
   1d4ca:	d1f6      	bne.n	1d4ba <net_context_recv+0x3a>
   1d4cc:	4639      	mov	r1, r7
   1d4ce:	4620      	mov	r0, r4
   1d4d0:	f00b ff52 	bl	29378 <_impl_k_sem_take>
			;
		}

		if (!k_sem_take(&context->recv_data_wait, timeout)) {
   1d4d4:	b140      	cbz	r0, 1d4e8 <net_context_recv+0x68>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
}
   1d4d6:	4630      	mov	r0, r6
   1d4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1d4da:	2611      	movs	r6, #17
   1d4dc:	e7da      	b.n	1d494 <net_context_recv+0x14>
		int ret = recv_udp(context, cb, timeout, user_data);
   1d4de:	f7ff fe2d 	bl	1d13c <recv_udp>
		if (ret < 0) {
   1d4e2:	1e06      	subs	r6, r0, #0
   1d4e4:	dae8      	bge.n	1d4b8 <net_context_recv+0x38>
   1d4e6:	e7f6      	b.n	1d4d6 <net_context_recv+0x56>
			return -ETIMEDOUT;
   1d4e8:	f06f 0673 	mvn.w	r6, #115	; 0x73
   1d4ec:	e7f3      	b.n	1d4d6 <net_context_recv+0x56>
		return -EBADF;
   1d4ee:	f06f 0608 	mvn.w	r6, #8
   1d4f2:	e7f0      	b.n	1d4d6 <net_context_recv+0x56>
		return -EPROTOTYPE;
   1d4f4:	f06f 066a 	mvn.w	r6, #106	; 0x6a
   1d4f8:	e7ed      	b.n	1d4d6 <net_context_recv+0x56>
			return -ESHUTDOWN;
   1d4fa:	f06f 066d 	mvn.w	r6, #109	; 0x6d
   1d4fe:	e7ea      	b.n	1d4d6 <net_context_recv+0x56>
			return -ENOTCONN;
   1d500:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1d504:	e7e7      	b.n	1d4d6 <net_context_recv+0x56>
	return 0;
   1d506:	2600      	movs	r6, #0
   1d508:	e7e5      	b.n	1d4d6 <net_context_recv+0x56>
	...

0001d50c <net_context_foreach>:
#else
	return -EPROTOTYPE;
#endif
}
void net_context_foreach(net_context_cb_t cb, void *user_data)
{
   1d50c:	b570      	push	{r4, r5, r6, lr}
   1d50e:	4606      	mov	r6, r0
   1d510:	460d      	mov	r5, r1
   1d512:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d516:	480d      	ldr	r0, [pc, #52]	; (1d54c <net_context_foreach+0x40>)
   1d518:	f00b ff2e 	bl	29378 <_impl_k_sem_take>
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1d51c:	2400      	movs	r4, #0
   1d51e:	e000      	b.n	1d522 <net_context_foreach+0x16>
   1d520:	3401      	adds	r4, #1
   1d522:	2c05      	cmp	r4, #5
   1d524:	dc0e      	bgt.n	1d544 <net_context_foreach+0x38>
	return context->flags & NET_CONTEXT_IN_USE;
   1d526:	2368      	movs	r3, #104	; 0x68
   1d528:	4a09      	ldr	r2, [pc, #36]	; (1d550 <net_context_foreach+0x44>)
   1d52a:	fb03 2304 	mla	r3, r3, r4, r2
   1d52e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1d532:	f013 0f01 	tst.w	r3, #1
   1d536:	d0f3      	beq.n	1d520 <net_context_foreach+0x14>
			continue;
		}

		cb(&contexts[i], user_data);
   1d538:	4629      	mov	r1, r5
   1d53a:	2068      	movs	r0, #104	; 0x68
   1d53c:	fb00 2004 	mla	r0, r0, r4, r2
   1d540:	47b0      	blx	r6
   1d542:	e7ed      	b.n	1d520 <net_context_foreach+0x14>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1d544:	4801      	ldr	r0, [pc, #4]	; (1d54c <net_context_foreach+0x40>)
   1d546:	f00b ff04 	bl	29352 <_impl_k_sem_give>
   1d54a:	bd70      	pop	{r4, r5, r6, pc}
   1d54c:	200023f8 	.word	0x200023f8
   1d550:	20002188 	.word	0x20002188

0001d554 <net_context_init>:

	k_sem_give(&contexts_lock);
}

void net_context_init(void)
{
   1d554:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1d556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d55a:	2101      	movs	r1, #1
   1d55c:	4801      	ldr	r0, [pc, #4]	; (1d564 <net_context_init+0x10>)
   1d55e:	f00b feef 	bl	29340 <_impl_k_sem_init>
   1d562:	bd08      	pop	{r3, pc}
   1d564:	200023f8 	.word	0x200023f8

0001d568 <net_pkt_get_reserve>:
#else /* CONFIG_NET_DEBUG_NET_PKT */
struct net_pkt *net_pkt_get_reserve(struct k_mem_slab *slab,
				    u16_t reserve_head,
				    s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1d568:	b570      	push	{r4, r5, r6, lr}
   1d56a:	b082      	sub	sp, #8
   1d56c:	4604      	mov	r4, r0
   1d56e:	460d      	mov	r5, r1
   1d570:	4616      	mov	r6, r2
	struct net_pkt *pkt;
	int ret;

	if (k_is_in_isr()) {
   1d572:	f00c f863 	bl	2963c <k_is_in_isr>
   1d576:	b198      	cbz	r0, 1d5a0 <net_pkt_get_reserve+0x38>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   1d578:	2200      	movs	r2, #0
   1d57a:	a901      	add	r1, sp, #4
   1d57c:	4620      	mov	r0, r4
   1d57e:	f00a fde9 	bl	28154 <k_mem_slab_alloc>
	} else {
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
	}

	if (ret) {
   1d582:	b998      	cbnz	r0, 1d5ac <net_pkt_get_reserve+0x44>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
   1d584:	2244      	movs	r2, #68	; 0x44
   1d586:	2100      	movs	r1, #0
   1d588:	9801      	ldr	r0, [sp, #4]
   1d58a:	f00d f995 	bl	2a8b8 <memset>

	net_pkt_set_ll_reserve(pkt, reserve_head);
   1d58e:	9801      	ldr	r0, [sp, #4]
	pkt->ll_reserve = len;
   1d590:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32

	pkt->ref = 1;
   1d594:	2301      	movs	r3, #1
   1d596:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	pkt->slab = slab;
   1d59a:	6044      	str	r4, [r0, #4]
	NET_DBG("%s [%u] pkt %p reserve %u ref %d (%s():%d)",
		slab2str(slab), k_mem_slab_num_free_get(slab),
		pkt, reserve_head, pkt->ref, caller, line);
#endif
	return pkt;
}
   1d59c:	b002      	add	sp, #8
   1d59e:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1d5a0:	4632      	mov	r2, r6
   1d5a2:	a901      	add	r1, sp, #4
   1d5a4:	4620      	mov	r0, r4
   1d5a6:	f00a fdd5 	bl	28154 <k_mem_slab_alloc>
   1d5aa:	e7ea      	b.n	1d582 <net_pkt_get_reserve+0x1a>
		return NULL;
   1d5ac:	2000      	movs	r0, #0
   1d5ae:	e7f5      	b.n	1d59c <net_pkt_get_reserve+0x34>

0001d5b0 <net_pkt_get>:
#else
static struct net_pkt *net_pkt_get(struct k_mem_slab *slab,
				   struct net_context *context,
				   s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1d5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_pkt *pkt;

	if (!context) {
   1d5b2:	2900      	cmp	r1, #0
   1d5b4:	d038      	beq.n	1d628 <net_pkt_get+0x78>
   1d5b6:	460c      	mov	r4, r1
   1d5b8:	4617      	mov	r7, r2
   1d5ba:	4606      	mov	r6, r0
	return net_if_get_by_index(context->iface);
   1d5bc:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1d5c0:	f7fe fea4 	bl	1c30c <net_if_get_by_index>
   1d5c4:	4605      	mov	r5, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d5c6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d5ca:	f013 0f10 	tst.w	r3, #16
   1d5ce:	d024      	beq.n	1d61a <net_pkt_get+0x6a>
		return AF_INET6;
   1d5d0:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1d5d2:	2b0a      	cmp	r3, #10
   1d5d4:	d023      	beq.n	1d61e <net_pkt_get+0x6e>
	struct in6_addr *addr6 = NULL;
   1d5d6:	2100      	movs	r1, #0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1d5d8:	686b      	ldr	r3, [r5, #4]
   1d5da:	689b      	ldr	r3, [r3, #8]
   1d5dc:	4628      	mov	r0, r5
   1d5de:	4798      	blx	r3
#if defined(CONFIG_NET_DEBUG_NET_PKT)
	pkt = net_pkt_get_reserve_debug(slab,
					net_if_get_ll_reserve(iface, addr6),
					timeout, caller, line);
#else
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   1d5e0:	463a      	mov	r2, r7
   1d5e2:	4601      	mov	r1, r0
   1d5e4:	4630      	mov	r0, r6
   1d5e6:	f7ff ffbf 	bl	1d568 <net_pkt_get_reserve>
				  timeout);
#endif
	if (pkt) {
   1d5ea:	4603      	mov	r3, r0
   1d5ec:	b198      	cbz	r0, 1d616 <net_pkt_get+0x66>
	pkt->context = ctx;
   1d5ee:	60c4      	str	r4, [r0, #12]
	pkt->iface = iface;
   1d5f0:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1d5f2:	7d6a      	ldrb	r2, [r5, #21]
   1d5f4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1d5f8:	7d6a      	ldrb	r2, [r5, #21]
   1d5fa:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d5fe:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   1d602:	f012 0f10 	tst.w	r2, #16
   1d606:	d00d      	beq.n	1d624 <net_pkt_get+0x74>
		return AF_INET6;
   1d608:	210a      	movs	r1, #10
	pkt->family = family;
   1d60a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1d60e:	f361 02c6 	bfi	r2, r1, #3, #4
   1d612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					   net_context_get_family(context));
		}
	}

	return pkt;
}
   1d616:	4618      	mov	r0, r3
   1d618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return AF_INET;
   1d61a:	2302      	movs	r3, #2
   1d61c:	e7d9      	b.n	1d5d2 <net_pkt_get+0x22>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1d61e:	f104 0118 	add.w	r1, r4, #24
   1d622:	e7d9      	b.n	1d5d8 <net_pkt_get+0x28>
   1d624:	2102      	movs	r1, #2
   1d626:	e7f0      	b.n	1d60a <net_pkt_get+0x5a>
		return NULL;
   1d628:	2300      	movs	r3, #0
   1d62a:	e7f4      	b.n	1d616 <net_pkt_get+0x66>

0001d62c <net_pkt_get_reserve_data>:
{
   1d62c:	b570      	push	{r4, r5, r6, lr}
   1d62e:	4604      	mov	r4, r0
   1d630:	460d      	mov	r5, r1
   1d632:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   1d634:	f00c f802 	bl	2963c <k_is_in_isr>
   1d638:	b158      	cbz	r0, 1d652 <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   1d63a:	2100      	movs	r1, #0
   1d63c:	4620      	mov	r0, r4
   1d63e:	f7fd facf 	bl	1abe0 <net_buf_alloc>
   1d642:	4604      	mov	r4, r0
	if (!frag) {
   1d644:	b11c      	cbz	r4, 1d64e <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   1d646:	4629      	mov	r1, r5
   1d648:	4620      	mov	r0, r4
   1d64a:	f7fd fb24 	bl	1ac96 <net_buf_reserve>
}
   1d64e:	4620      	mov	r0, r4
   1d650:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   1d652:	4631      	mov	r1, r6
   1d654:	4620      	mov	r0, r4
   1d656:	f7fd fac3 	bl	1abe0 <net_buf_alloc>
   1d65a:	4604      	mov	r4, r0
   1d65c:	e7f2      	b.n	1d644 <net_pkt_get_reserve_data+0x18>

0001d65e <_pkt_get_data>:
{
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_buf *frag;

	if (!context) {
   1d65e:	b1f1      	cbz	r1, 1d69e <_pkt_get_data+0x40>
{
   1d660:	b570      	push	{r4, r5, r6, lr}
   1d662:	460c      	mov	r4, r1
   1d664:	4616      	mov	r6, r2
   1d666:	4605      	mov	r5, r0
	return net_if_get_by_index(context->iface);
   1d668:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1d66c:	f7fe fe4e 	bl	1c30c <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d670:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d674:	f013 0f10 	tst.w	r3, #16
   1d678:	d00c      	beq.n	1d694 <_pkt_get_data+0x36>
		return AF_INET6;
   1d67a:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1d67c:	2b0a      	cmp	r3, #10
   1d67e:	d00b      	beq.n	1d698 <_pkt_get_data+0x3a>
	struct in6_addr *addr6 = NULL;
   1d680:	2100      	movs	r1, #0
   1d682:	6843      	ldr	r3, [r0, #4]
   1d684:	689b      	ldr	r3, [r3, #8]
   1d686:	4798      	blx	r3
	frag = net_pkt_get_reserve_data_debug(pool,
					      net_if_get_ll_reserve(iface,
								    addr6),
					      timeout, caller, line);
#else
	frag = net_pkt_get_reserve_data(pool,
   1d688:	4632      	mov	r2, r6
   1d68a:	4601      	mov	r1, r0
   1d68c:	4628      	mov	r0, r5
   1d68e:	f7ff ffcd 	bl	1d62c <net_pkt_get_reserve_data>
					net_if_get_ll_reserve(iface, addr6),
					timeout);
#endif
	return frag;
   1d692:	bd70      	pop	{r4, r5, r6, pc}
	return AF_INET;
   1d694:	2302      	movs	r3, #2
   1d696:	e7f1      	b.n	1d67c <_pkt_get_data+0x1e>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1d698:	f104 0118 	add.w	r1, r4, #24
   1d69c:	e7f1      	b.n	1d682 <_pkt_get_data+0x24>
		return NULL;
   1d69e:	2000      	movs	r0, #0
   1d6a0:	4770      	bx	lr
	...

0001d6a4 <net_pkt_get_reserve_rx>:
{
   1d6a4:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   1d6a6:	460a      	mov	r2, r1
   1d6a8:	4601      	mov	r1, r0
   1d6aa:	4802      	ldr	r0, [pc, #8]	; (1d6b4 <net_pkt_get_reserve_rx+0x10>)
   1d6ac:	f7ff ff5c 	bl	1d568 <net_pkt_get_reserve>
}
   1d6b0:	bd08      	pop	{r3, pc}
   1d6b2:	bf00      	nop
   1d6b4:	2000d5e8 	.word	0x2000d5e8

0001d6b8 <net_pkt_get_reserve_tx>:
{
   1d6b8:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   1d6ba:	460a      	mov	r2, r1
   1d6bc:	4601      	mov	r1, r0
   1d6be:	4802      	ldr	r0, [pc, #8]	; (1d6c8 <net_pkt_get_reserve_tx+0x10>)
   1d6c0:	f7ff ff52 	bl	1d568 <net_pkt_get_reserve>
}
   1d6c4:	bd08      	pop	{r3, pc}
   1d6c6:	bf00      	nop
   1d6c8:	2000d604 	.word	0x2000d604

0001d6cc <net_pkt_get_reserve_rx_data>:
{
   1d6cc:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   1d6ce:	460a      	mov	r2, r1
   1d6d0:	4601      	mov	r1, r0
   1d6d2:	4802      	ldr	r0, [pc, #8]	; (1d6dc <net_pkt_get_reserve_rx_data+0x10>)
   1d6d4:	f7ff ffaa 	bl	1d62c <net_pkt_get_reserve_data>
}
   1d6d8:	bd08      	pop	{r3, pc}
   1d6da:	bf00      	nop
   1d6dc:	2000d768 	.word	0x2000d768

0001d6e0 <net_pkt_get_reserve_tx_data>:
{
   1d6e0:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   1d6e2:	460a      	mov	r2, r1
   1d6e4:	4601      	mov	r1, r0
   1d6e6:	4802      	ldr	r0, [pc, #8]	; (1d6f0 <net_pkt_get_reserve_tx_data+0x10>)
   1d6e8:	f7ff ffa0 	bl	1d62c <net_pkt_get_reserve_data>
}
   1d6ec:	bd08      	pop	{r3, pc}
   1d6ee:	bf00      	nop
   1d6f0:	2000d788 	.word	0x2000d788

0001d6f4 <net_pkt_get_frag>:
{
   1d6f4:	b538      	push	{r3, r4, r5, lr}
   1d6f6:	4604      	mov	r4, r0
   1d6f8:	460d      	mov	r5, r1
	return pkt->context;
   1d6fa:	68c3      	ldr	r3, [r0, #12]
	if (context && context->data_pool) {
   1d6fc:	b143      	cbz	r3, 1d710 <net_pkt_get_frag+0x1c>
   1d6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d700:	b133      	cbz	r3, 1d710 <net_pkt_get_frag+0x1c>
		return net_pkt_get_reserve_data(context->data_pool(),
   1d702:	4798      	blx	r3
   1d704:	462a      	mov	r2, r5
   1d706:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1d70a:	f7ff ff8f 	bl	1d62c <net_pkt_get_reserve_data>
   1d70e:	bd38      	pop	{r3, r4, r5, pc}
	if (pkt->slab == &rx_pkts) {
   1d710:	6862      	ldr	r2, [r4, #4]
   1d712:	4b07      	ldr	r3, [pc, #28]	; (1d730 <net_pkt_get_frag+0x3c>)
   1d714:	429a      	cmp	r2, r3
   1d716:	d005      	beq.n	1d724 <net_pkt_get_frag+0x30>
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   1d718:	4629      	mov	r1, r5
   1d71a:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1d71e:	f7ff ffdf 	bl	1d6e0 <net_pkt_get_reserve_tx_data>
}
   1d722:	bd38      	pop	{r3, r4, r5, pc}
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   1d724:	4629      	mov	r1, r5
   1d726:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1d72a:	f7ff ffcf 	bl	1d6cc <net_pkt_get_reserve_rx_data>
   1d72e:	bd38      	pop	{r3, r4, r5, pc}
   1d730:	2000d5e8 	.word	0x2000d5e8

0001d734 <net_pkt_get_tx>:

	return net_pkt_get(&rx_pkts, context, timeout);
}

struct net_pkt *net_pkt_get_tx(struct net_context *context, s32_t timeout)
{
   1d734:	b538      	push	{r3, r4, r5, lr}
   1d736:	4604      	mov	r4, r0
   1d738:	460d      	mov	r5, r1
	if (context->tx_slab) {
   1d73a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1d73c:	b133      	cbz	r3, 1d74c <net_pkt_get_tx+0x18>
		return context->tx_slab();
   1d73e:	4798      	blx	r3

	NET_ASSERT_INFO(context, "TX context not set");

	slab = get_tx_slab(context);

	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1d740:	b130      	cbz	r0, 1d750 <net_pkt_get_tx+0x1c>
   1d742:	462a      	mov	r2, r5
   1d744:	4621      	mov	r1, r4
   1d746:	f7ff ff33 	bl	1d5b0 <net_pkt_get>
}
   1d74a:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1d74c:	2000      	movs	r0, #0
   1d74e:	e7f7      	b.n	1d740 <net_pkt_get_tx+0xc>
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1d750:	4800      	ldr	r0, [pc, #0]	; (1d754 <net_pkt_get_tx+0x20>)
   1d752:	e7f6      	b.n	1d742 <net_pkt_get_tx+0xe>
   1d754:	2000d604 	.word	0x2000d604

0001d758 <net_pkt_get_data>:

struct net_buf *net_pkt_get_data(struct net_context *context, s32_t timeout)
{
   1d758:	b538      	push	{r3, r4, r5, lr}
   1d75a:	4604      	mov	r4, r0
   1d75c:	460d      	mov	r5, r1
	if (context->data_pool) {
   1d75e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1d760:	b133      	cbz	r3, 1d770 <net_pkt_get_data+0x18>
		return context->data_pool();
   1d762:	4798      	blx	r3
	pool = get_data_pool(context);

	/* The context is not known in RX path so we can only have TX
	 * data here.
	 */
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1d764:	b130      	cbz	r0, 1d774 <net_pkt_get_data+0x1c>
   1d766:	462a      	mov	r2, r5
   1d768:	4621      	mov	r1, r4
   1d76a:	f7ff ff78 	bl	1d65e <_pkt_get_data>
}
   1d76e:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1d770:	2000      	movs	r0, #0
   1d772:	e7f7      	b.n	1d764 <net_pkt_get_data+0xc>
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1d774:	4800      	ldr	r0, [pc, #0]	; (1d778 <net_pkt_get_data+0x20>)
   1d776:	e7f6      	b.n	1d766 <net_pkt_get_data+0xe>
   1d778:	2000d788 	.word	0x2000d788

0001d77c <net_pkt_ref>:
				  int line)
#else
struct net_pkt *net_pkt_ref(struct net_pkt *pkt)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!pkt) {
   1d77c:	4603      	mov	r3, r0
   1d77e:	b120      	cbz	r0, 1d78a <net_pkt_ref+0xe>
	NET_DBG("%s [%d] pkt %p ref %d (%s():%d)",
		slab2str(pkt->slab), k_mem_slab_num_free_get(pkt->slab),
		pkt, pkt->ref + 1, caller, line);
#endif

	pkt->ref++;
   1d780:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   1d784:	3201      	adds	r2, #1
   1d786:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

	return pkt;
}
   1d78a:	4618      	mov	r0, r3
   1d78c:	4770      	bx	lr

0001d78e <net_pkt_frag_unref>:
			      const char *caller, int line)
#else
void net_pkt_frag_unref(struct net_buf *frag)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!frag) {
   1d78e:	b118      	cbz	r0, 1d798 <net_pkt_frag_unref+0xa>
{
   1d790:	b508      	push	{r3, lr}

	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif
	net_buf_unref(frag);
   1d792:	f7fd fa93 	bl	1acbc <net_buf_unref>
   1d796:	bd08      	pop	{r3, pc}
   1d798:	4770      	bx	lr

0001d79a <net_pkt_unref>:
{
   1d79a:	b500      	push	{lr}
   1d79c:	b083      	sub	sp, #12
   1d79e:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1d7a0:	b188      	cbz	r0, 1d7c6 <net_pkt_unref+0x2c>
	if (!pkt->ref) {
   1d7a2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1d7a6:	b173      	cbz	r3, 1d7c6 <net_pkt_unref+0x2c>
	if (--pkt->ref > 0) {
   1d7a8:	3b01      	subs	r3, #1
   1d7aa:	b2db      	uxtb	r3, r3
   1d7ac:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1d7b0:	b94b      	cbnz	r3, 1d7c6 <net_pkt_unref+0x2c>
	if (pkt->frags) {
   1d7b2:	6880      	ldr	r0, [r0, #8]
   1d7b4:	b108      	cbz	r0, 1d7ba <net_pkt_unref+0x20>
		net_pkt_frag_unref(pkt->frags);
   1d7b6:	f7ff ffea 	bl	1d78e <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1d7ba:	a902      	add	r1, sp, #8
   1d7bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1d7c0:	6858      	ldr	r0, [r3, #4]
   1d7c2:	f00a fcf5 	bl	281b0 <k_mem_slab_free>
}
   1d7c6:	b003      	add	sp, #12
   1d7c8:	f85d fb04 	ldr.w	pc, [sp], #4

0001d7cc <net_pkt_frag_del>:
#else
struct net_buf *net_pkt_frag_del(struct net_pkt *pkt,
				 struct net_buf *parent,
				 struct net_buf *frag)
#endif
{
   1d7cc:	b510      	push	{r4, lr}
   1d7ce:	4604      	mov	r4, r0
   1d7d0:	4608      	mov	r0, r1
	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif

	if (pkt->frags == frag && !parent) {
   1d7d2:	68a3      	ldr	r3, [r4, #8]
   1d7d4:	4293      	cmp	r3, r2
   1d7d6:	d003      	beq.n	1d7e0 <net_pkt_frag_del+0x14>
		pkt->frags = tmp;

		return tmp;
	}

	return net_buf_frag_del(parent, frag);
   1d7d8:	4611      	mov	r1, r2
   1d7da:	f7fd faaf 	bl	1ad3c <net_buf_frag_del>
}
   1d7de:	bd10      	pop	{r4, pc}
	if (pkt->frags == frag && !parent) {
   1d7e0:	2900      	cmp	r1, #0
   1d7e2:	d1f9      	bne.n	1d7d8 <net_pkt_frag_del+0xc>
		tmp = net_buf_frag_del(NULL, frag);
   1d7e4:	4611      	mov	r1, r2
   1d7e6:	f7fd faa9 	bl	1ad3c <net_buf_frag_del>
		pkt->frags = tmp;
   1d7ea:	60a0      	str	r0, [r4, #8]
		return tmp;
   1d7ec:	bd10      	pop	{r4, pc}

0001d7ee <net_pkt_frag_add>:
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	/* We do not use net_buf_frag_add() as this one will refcount
	 * the frag once more if !pkt->frags
	 */
	if (!pkt->frags) {
   1d7ee:	6883      	ldr	r3, [r0, #8]
   1d7f0:	b143      	cbz	r3, 1d804 <net_pkt_frag_add+0x16>
{
   1d7f2:	b510      	push	{r4, lr}
   1d7f4:	460c      	mov	r4, r1
		pkt->frags = frag;
		return;
	}

	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   1d7f6:	4618      	mov	r0, r3
   1d7f8:	f7fd fa80 	bl	1acfc <net_buf_frag_last>
   1d7fc:	4621      	mov	r1, r4
   1d7fe:	f7fd fa83 	bl	1ad08 <net_buf_frag_insert>
   1d802:	bd10      	pop	{r4, pc}
		pkt->frags = frag;
   1d804:	6081      	str	r1, [r0, #8]
		return;
   1d806:	4770      	bx	lr

0001d808 <net_pkt_frag_insert>:
void net_pkt_frag_insert_debug(struct net_pkt *pkt, struct net_buf *frag,
			       const char *caller, int line)
#else
void net_pkt_frag_insert(struct net_pkt *pkt, struct net_buf *frag)
#endif
{
   1d808:	b538      	push	{r3, r4, r5, lr}
   1d80a:	4604      	mov	r4, r0
   1d80c:	460d      	mov	r5, r1
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	net_buf_frag_last(frag)->frags = pkt->frags;
   1d80e:	4608      	mov	r0, r1
   1d810:	f7fd fa74 	bl	1acfc <net_buf_frag_last>
   1d814:	68a3      	ldr	r3, [r4, #8]
   1d816:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   1d818:	60a5      	str	r5, [r4, #8]
   1d81a:	bd38      	pop	{r3, r4, r5, pc}

0001d81c <net_pkt_copy>:
}

struct net_buf *net_pkt_copy(struct net_pkt *pkt, size_t amount,
			     size_t reserve, s32_t timeout)
{
   1d81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d820:	b085      	sub	sp, #20
   1d822:	9002      	str	r0, [sp, #8]
   1d824:	460d      	mov	r5, r1
   1d826:	4614      	mov	r4, r2
   1d828:	9303      	str	r3, [sp, #12]
	struct net_buf *frag, *first, *orig;
	u8_t *orig_data;
	size_t orig_len;

	orig = pkt->frags;
   1d82a:	f8d0 a008 	ldr.w	sl, [r0, #8]

	frag = net_pkt_get_frag(pkt, timeout);
   1d82e:	4619      	mov	r1, r3
   1d830:	f7ff ff60 	bl	1d6f4 <net_pkt_get_frag>
	if (!frag) {
   1d834:	9001      	str	r0, [sp, #4]
   1d836:	b1b8      	cbz	r0, 1d868 <net_pkt_copy+0x4c>
		return NULL;
	}

	if (reserve > net_buf_tailroom(frag)) {
   1d838:	f100 0608 	add.w	r6, r0, #8
   1d83c:	4630      	mov	r0, r6
   1d83e:	f7fd faf2 	bl	1ae26 <net_buf_simple_tailroom>
   1d842:	42a0      	cmp	r0, r4
   1d844:	d30b      	bcc.n	1d85e <net_pkt_copy+0x42>
			reserve, net_buf_tailroom(frag));
		net_pkt_frag_unref(frag);
		return NULL;
	}

	net_buf_add(frag, reserve);
   1d846:	4621      	mov	r1, r4
   1d848:	4630      	mov	r0, r6
   1d84a:	f7fd fa83 	bl	1ad54 <net_buf_simple_add>
	first = frag;

	NET_DBG("Copying frag %p with %zu bytes and reserving %zu bytes",
		first, amount, reserve);

	if (!orig->len) {
   1d84e:	f8ba 700c 	ldrh.w	r7, [sl, #12]
   1d852:	b14f      	cbz	r7, 1d868 <net_pkt_copy+0x4c>
		NET_DBG("Original fragment empty!");
		return frag;
	}

	orig_len = orig->len;
	orig_data = orig->data;
   1d854:	f8da 9008 	ldr.w	r9, [sl, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1d858:	f8dd b004 	ldr.w	fp, [sp, #4]

	while (orig && amount) {
   1d85c:	e01c      	b.n	1d898 <net_pkt_copy+0x7c>
		net_pkt_frag_unref(frag);
   1d85e:	9801      	ldr	r0, [sp, #4]
   1d860:	f7ff ff95 	bl	1d78e <net_pkt_frag_unref>
		return NULL;
   1d864:	2300      	movs	r3, #0
   1d866:	9301      	str	r3, [sp, #4]
			orig_data = orig->data;
		}
	}

	return first;
}
   1d868:	9801      	ldr	r0, [sp, #4]
   1d86a:	b005      	add	sp, #20
   1d86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_len = amount;
   1d870:	46a8      	mov	r8, r5
		if ((copy_len - left_len) >= 0) {
   1d872:	eba8 0304 	sub.w	r3, r8, r4
   1d876:	2b00      	cmp	r3, #0
   1d878:	db2e      	blt.n	1d8d8 <net_pkt_copy+0xbc>
			amount -= left_len;
   1d87a:	1b2d      	subs	r5, r5, r4
			memcpy(net_buf_add(frag, left_len), orig_data,
   1d87c:	4621      	mov	r1, r4
   1d87e:	4630      	mov	r0, r6
   1d880:	f7fd fa68 	bl	1ad54 <net_buf_simple_add>
   1d884:	4622      	mov	r2, r4
   1d886:	4649      	mov	r1, r9
   1d888:	f7e2 fd1a 	bl	2c0 <memcpy>
			if (!net_buf_tailroom(frag)) {
   1d88c:	4630      	mov	r0, r6
   1d88e:	f7fd faca 	bl	1ae26 <net_buf_simple_tailroom>
   1d892:	b180      	cbz	r0, 1d8b6 <net_pkt_copy+0x9a>
			orig_len -= left_len;
   1d894:	1b3f      	subs	r7, r7, r4
			orig_data += left_len;
   1d896:	44a1      	add	r9, r4
	while (orig && amount) {
   1d898:	f1ba 0f00 	cmp.w	sl, #0
   1d89c:	d0e4      	beq.n	1d868 <net_pkt_copy+0x4c>
   1d89e:	2d00      	cmp	r5, #0
   1d8a0:	d0e2      	beq.n	1d868 <net_pkt_copy+0x4c>
		int left_len = net_buf_tailroom(frag);
   1d8a2:	f10b 0608 	add.w	r6, fp, #8
   1d8a6:	4630      	mov	r0, r6
   1d8a8:	f7fd fabd 	bl	1ae26 <net_buf_simple_tailroom>
   1d8ac:	4604      	mov	r4, r0
		if (amount > orig_len) {
   1d8ae:	42bd      	cmp	r5, r7
   1d8b0:	d9de      	bls.n	1d870 <net_pkt_copy+0x54>
			copy_len = orig_len;
   1d8b2:	46b8      	mov	r8, r7
   1d8b4:	e7dd      	b.n	1d872 <net_pkt_copy+0x56>
				struct net_buf *new_frag =
   1d8b6:	9903      	ldr	r1, [sp, #12]
   1d8b8:	9802      	ldr	r0, [sp, #8]
   1d8ba:	f7ff ff1b 	bl	1d6f4 <net_pkt_get_frag>
				if (!new_frag) {
   1d8be:	4606      	mov	r6, r0
   1d8c0:	b128      	cbz	r0, 1d8ce <net_pkt_copy+0xb2>
				net_buf_frag_add(frag, new_frag);
   1d8c2:	4601      	mov	r1, r0
   1d8c4:	4658      	mov	r0, fp
   1d8c6:	f7fd fa2a 	bl	1ad1e <net_buf_frag_add>
				frag = new_frag;
   1d8ca:	46b3      	mov	fp, r6
   1d8cc:	e7e2      	b.n	1d894 <net_pkt_copy+0x78>
					net_pkt_frag_unref(first);
   1d8ce:	9801      	ldr	r0, [sp, #4]
   1d8d0:	f7ff ff5d 	bl	1d78e <net_pkt_frag_unref>
					return NULL;
   1d8d4:	9601      	str	r6, [sp, #4]
   1d8d6:	e7c7      	b.n	1d868 <net_pkt_copy+0x4c>
			amount -= copy_len;
   1d8d8:	eba5 0508 	sub.w	r5, r5, r8
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1d8dc:	4641      	mov	r1, r8
   1d8de:	4630      	mov	r0, r6
   1d8e0:	f7fd fa38 	bl	1ad54 <net_buf_simple_add>
   1d8e4:	4642      	mov	r2, r8
   1d8e6:	4649      	mov	r1, r9
   1d8e8:	f7e2 fcea 	bl	2c0 <memcpy>
		orig = orig->frags;
   1d8ec:	f8da a000 	ldr.w	sl, [sl]
		if (orig) {
   1d8f0:	f1ba 0f00 	cmp.w	sl, #0
   1d8f4:	d0d0      	beq.n	1d898 <net_pkt_copy+0x7c>
			orig_len = orig->len;
   1d8f6:	f8ba 700c 	ldrh.w	r7, [sl, #12]
			orig_data = orig->data;
   1d8fa:	f8da 9008 	ldr.w	r9, [sl, #8]
   1d8fe:	e7cb      	b.n	1d898 <net_pkt_copy+0x7c>

0001d900 <net_frag_linear_copy>:

int net_frag_linear_copy(struct net_buf *dst, struct net_buf *src,
			 u16_t offset, u16_t len)
{
   1d900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d904:	4680      	mov	r8, r0
   1d906:	460e      	mov	r6, r1
   1d908:	4615      	mov	r5, r2
   1d90a:	4699      	mov	r9, r3
	u16_t to_copy;
	u16_t copied;

	if (dst->size < len) {
   1d90c:	89c3      	ldrh	r3, [r0, #14]
   1d90e:	454b      	cmp	r3, r9
   1d910:	d206      	bcs.n	1d920 <net_frag_linear_copy+0x20>
		return -ENOMEM;
   1d912:	f06f 000b 	mvn.w	r0, #11
   1d916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	/* find the right fragment to start copying from */
	while (src && offset >= src->len) {
		offset -= src->len;
   1d91a:	1a6d      	subs	r5, r5, r1
   1d91c:	b2ad      	uxth	r5, r5
		src = src->frags;
   1d91e:	6836      	ldr	r6, [r6, #0]
	while (src && offset >= src->len) {
   1d920:	b336      	cbz	r6, 1d970 <net_frag_linear_copy+0x70>
   1d922:	89b1      	ldrh	r1, [r6, #12]
   1d924:	428d      	cmp	r5, r1
   1d926:	d2f8      	bcs.n	1d91a <net_frag_linear_copy+0x1a>
   1d928:	2700      	movs	r7, #0
   1d92a:	e015      	b.n	1d958 <net_frag_linear_copy+0x58>
	}

	/* traverse the fragment chain until len bytes are copied */
	copied = 0;
	while (src && len > 0) {
		to_copy = min(len, src->len - offset);
   1d92c:	89b4      	ldrh	r4, [r6, #12]
   1d92e:	1b64      	subs	r4, r4, r5
   1d930:	454c      	cmp	r4, r9
   1d932:	bfa8      	it	ge
   1d934:	464c      	movge	r4, r9
   1d936:	b2a4      	uxth	r4, r4
		memcpy(dst->data + copied, src->data + offset, to_copy);
   1d938:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1d93c:	68b1      	ldr	r1, [r6, #8]
   1d93e:	4622      	mov	r2, r4
   1d940:	4429      	add	r1, r5
   1d942:	4438      	add	r0, r7
   1d944:	f7e2 fcbc 	bl	2c0 <memcpy>

		copied += to_copy;
   1d948:	4427      	add	r7, r4
   1d94a:	b2bf      	uxth	r7, r7
		/* to_copy is always <= len */
		len -= to_copy;
   1d94c:	eba9 0404 	sub.w	r4, r9, r4
   1d950:	fa1f f984 	uxth.w	r9, r4
		src = src->frags;
   1d954:	6836      	ldr	r6, [r6, #0]
		/* after the first iteration, this value will be 0 */
		offset = 0;
   1d956:	2500      	movs	r5, #0
	while (src && len > 0) {
   1d958:	b116      	cbz	r6, 1d960 <net_frag_linear_copy+0x60>
   1d95a:	f1b9 0f00 	cmp.w	r9, #0
   1d95e:	d1e5      	bne.n	1d92c <net_frag_linear_copy+0x2c>
	}

	if (len > 0) {
   1d960:	f1b9 0f00 	cmp.w	r9, #0
   1d964:	d106      	bne.n	1d974 <net_frag_linear_copy+0x74>
		return -ENOMEM;
	}

	dst->len = copied;
   1d966:	f8a8 700c 	strh.w	r7, [r8, #12]

	return 0;
   1d96a:	2000      	movs	r0, #0
   1d96c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d970:	2700      	movs	r7, #0
   1d972:	e7f1      	b.n	1d958 <net_frag_linear_copy+0x58>
		return -ENOMEM;
   1d974:	f06f 000b 	mvn.w	r0, #11
}
   1d978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d97c <net_pkt_compact>:

	return copied;
}

bool net_pkt_compact(struct net_pkt *pkt)
{
   1d97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d980:	4680      	mov	r8, r0
	struct net_buf *frag, *prev;

	NET_DBG("Compacting data in pkt %p", pkt);

	frag = pkt->frags;
   1d982:	6884      	ldr	r4, [r0, #8]
	prev = NULL;
   1d984:	2700      	movs	r7, #0

	while (frag) {
   1d986:	e009      	b.n	1d99c <net_pkt_compact+0x20>
			 */
			size_t copy_len;

			copy_len = frag->frags->len;
			if (copy_len > net_buf_tailroom(frag)) {
				copy_len = net_buf_tailroom(frag);
   1d988:	4630      	mov	r0, r6
   1d98a:	f7fd fa4c 	bl	1ae26 <net_buf_simple_tailroom>
   1d98e:	4605      	mov	r5, r0
   1d990:	e011      	b.n	1d9b6 <net_pkt_compact+0x3a>

				/* Then check next fragment */
				continue;
			}
		} else {
			if (!frag->len) {
   1d992:	89a3      	ldrh	r3, [r4, #12]
   1d994:	2b00      	cmp	r3, #0
   1d996:	d030      	beq.n	1d9fa <net_pkt_compact+0x7e>

				break;
			}
		}

		prev = frag;
   1d998:	4627      	mov	r7, r4
		frag = frag->frags;
   1d99a:	6824      	ldr	r4, [r4, #0]
	while (frag) {
   1d99c:	2c00      	cmp	r4, #0
   1d99e:	d031      	beq.n	1da04 <net_pkt_compact+0x88>
		if (frag->frags) {
   1d9a0:	6823      	ldr	r3, [r4, #0]
   1d9a2:	2b00      	cmp	r3, #0
   1d9a4:	d0f5      	beq.n	1d992 <net_pkt_compact+0x16>
			copy_len = frag->frags->len;
   1d9a6:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   1d9a8:	f104 0608 	add.w	r6, r4, #8
   1d9ac:	4630      	mov	r0, r6
   1d9ae:	f7fd fa3a 	bl	1ae26 <net_buf_simple_tailroom>
   1d9b2:	4285      	cmp	r5, r0
   1d9b4:	d8e8      	bhi.n	1d988 <net_pkt_compact+0xc>
	return buf->data + buf->len;
   1d9b6:	68a0      	ldr	r0, [r4, #8]
   1d9b8:	89a3      	ldrh	r3, [r4, #12]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   1d9ba:	6821      	ldr	r1, [r4, #0]
   1d9bc:	462a      	mov	r2, r5
   1d9be:	6889      	ldr	r1, [r1, #8]
   1d9c0:	4418      	add	r0, r3
   1d9c2:	f7e2 fc7d 	bl	2c0 <memcpy>
			net_buf_add(frag, copy_len);
   1d9c6:	4629      	mov	r1, r5
   1d9c8:	4630      	mov	r0, r6
   1d9ca:	f7fd f9c3 	bl	1ad54 <net_buf_simple_add>
			memmove(frag->frags->data,
   1d9ce:	6823      	ldr	r3, [r4, #0]
   1d9d0:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   1d9d2:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   1d9d4:	1b52      	subs	r2, r2, r5
   1d9d6:	1941      	adds	r1, r0, r5
   1d9d8:	f00c ff0a 	bl	2a7f0 <memmove>
			frag->frags->len -= copy_len;
   1d9dc:	6822      	ldr	r2, [r4, #0]
   1d9de:	8993      	ldrh	r3, [r2, #12]
   1d9e0:	1b5d      	subs	r5, r3, r5
   1d9e2:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   1d9e4:	4630      	mov	r0, r6
   1d9e6:	f7fd fa1e 	bl	1ae26 <net_buf_simple_tailroom>
   1d9ea:	2800      	cmp	r0, #0
   1d9ec:	d0d4      	beq.n	1d998 <net_pkt_compact+0x1c>
				net_pkt_frag_del(pkt, frag, frag->frags);
   1d9ee:	6822      	ldr	r2, [r4, #0]
   1d9f0:	4621      	mov	r1, r4
   1d9f2:	4640      	mov	r0, r8
   1d9f4:	f7ff feea 	bl	1d7cc <net_pkt_frag_del>
				continue;
   1d9f8:	e7d0      	b.n	1d99c <net_pkt_compact+0x20>
				net_pkt_frag_del(pkt, prev, frag);
   1d9fa:	4622      	mov	r2, r4
   1d9fc:	4639      	mov	r1, r7
   1d9fe:	4640      	mov	r0, r8
   1da00:	f7ff fee4 	bl	1d7cc <net_pkt_frag_del>
	}

	return true;
}
   1da04:	2001      	movs	r0, #1
   1da06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001da0a <net_pkt_append>:
	return 0;
}

u16_t net_pkt_append(struct net_pkt *pkt, u16_t len, const u8_t *data,
		    s32_t timeout)
{
   1da0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *frag;

	if (!pkt || !data) {
   1da0e:	b3d0      	cbz	r0, 1da86 <net_pkt_append+0x7c>
   1da10:	460c      	mov	r4, r1
   1da12:	4690      	mov	r8, r2
   1da14:	469a      	mov	sl, r3
   1da16:	4681      	mov	r9, r0
   1da18:	b3ca      	cbz	r2, 1da8e <net_pkt_append+0x84>
		return 0;
	}

	if (!pkt->frags) {
   1da1a:	6883      	ldr	r3, [r0, #8]
   1da1c:	b133      	cbz	r3, 1da2c <net_pkt_append+0x22>
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   1da1e:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1da22:	f7fd f96b 	bl	1acfc <net_buf_frag_last>
   1da26:	4605      	mov	r5, r0
	u16_t added_len = 0;
   1da28:	2700      	movs	r7, #0
   1da2a:	e024      	b.n	1da76 <net_pkt_append+0x6c>
		frag = net_pkt_get_frag(pkt, timeout);
   1da2c:	4651      	mov	r1, sl
   1da2e:	f7ff fe61 	bl	1d6f4 <net_pkt_get_frag>
		if (!frag) {
   1da32:	4601      	mov	r1, r0
   1da34:	b368      	cbz	r0, 1da92 <net_pkt_append+0x88>
			return 0;
		}

		net_pkt_frag_add(pkt, frag);
   1da36:	4648      	mov	r0, r9
   1da38:	f7ff fed9 	bl	1d7ee <net_pkt_frag_add>
   1da3c:	e7ef      	b.n	1da1e <net_pkt_append+0x14>
		u16_t count = min(len, net_buf_tailroom(frag));
   1da3e:	4628      	mov	r0, r5
   1da40:	f7fd f9f1 	bl	1ae26 <net_buf_simple_tailroom>
   1da44:	b286      	uxth	r6, r0
		void *data = net_buf_add(frag, count);
   1da46:	4631      	mov	r1, r6
   1da48:	4628      	mov	r0, r5
   1da4a:	f7fd f983 	bl	1ad54 <net_buf_simple_add>
		memcpy(data, value, count);
   1da4e:	4632      	mov	r2, r6
   1da50:	4641      	mov	r1, r8
   1da52:	f7e2 fc35 	bl	2c0 <memcpy>
		len -= count;
   1da56:	1ba4      	subs	r4, r4, r6
   1da58:	b2a4      	uxth	r4, r4
		added_len += count;
   1da5a:	4437      	add	r7, r6
   1da5c:	b2bf      	uxth	r7, r7
		value += count;
   1da5e:	44b0      	add	r8, r6
		if (len == 0) {
   1da60:	b194      	cbz	r4, 1da88 <net_pkt_append+0x7e>
		frag = net_pkt_get_frag(pkt, timeout);
   1da62:	4651      	mov	r1, sl
   1da64:	4648      	mov	r0, r9
   1da66:	f7ff fe45 	bl	1d6f4 <net_pkt_get_frag>
		if (!frag) {
   1da6a:	4605      	mov	r5, r0
   1da6c:	b160      	cbz	r0, 1da88 <net_pkt_append+0x7e>
		net_pkt_frag_add(pkt, frag);
   1da6e:	4601      	mov	r1, r0
   1da70:	4648      	mov	r0, r9
   1da72:	f7ff febc 	bl	1d7ee <net_pkt_frag_add>
		u16_t count = min(len, net_buf_tailroom(frag));
   1da76:	3508      	adds	r5, #8
   1da78:	4628      	mov	r0, r5
   1da7a:	f7fd f9d4 	bl	1ae26 <net_buf_simple_tailroom>
   1da7e:	4284      	cmp	r4, r0
   1da80:	d2dd      	bcs.n	1da3e <net_pkt_append+0x34>
   1da82:	4626      	mov	r6, r4
   1da84:	e7df      	b.n	1da46 <net_pkt_append+0x3c>
		return 0;
   1da86:	2700      	movs	r7, #0
	}

	return net_pkt_append_bytes(pkt, data, len, timeout);
}
   1da88:	4638      	mov	r0, r7
   1da8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   1da8e:	2700      	movs	r7, #0
   1da90:	e7fa      	b.n	1da88 <net_pkt_append+0x7e>
			return 0;
   1da92:	2700      	movs	r7, #0
   1da94:	e7f8      	b.n	1da88 <net_pkt_append+0x7e>

0001da96 <net_frag_read>:
	return NULL;
}

struct net_buf *net_frag_read(struct net_buf *frag, u16_t offset,
			      u16_t *pos, u16_t len, u8_t *data)
{
   1da96:	b4f0      	push	{r4, r5, r6, r7}
   1da98:	9e04      	ldr	r6, [sp, #16]
	if (!frag) {
   1da9a:	4604      	mov	r4, r0
   1da9c:	b188      	cbz	r0, 1dac2 <net_frag_read+0x2c>
	while (frag) {
   1da9e:	b17c      	cbz	r4, 1dac0 <net_frag_read+0x2a>
		if (offset == frag->len) {
   1daa0:	89a0      	ldrh	r0, [r4, #12]
   1daa2:	4288      	cmp	r0, r1
   1daa4:	d005      	beq.n	1dab2 <net_frag_read+0x1c>
		} else if (offset < frag->len) {
   1daa6:	4288      	cmp	r0, r1
   1daa8:	d807      	bhi.n	1daba <net_frag_read+0x24>
		offset -= frag->len;
   1daaa:	1a09      	subs	r1, r1, r0
   1daac:	b289      	uxth	r1, r1
		frag = frag->frags;
   1daae:	6824      	ldr	r4, [r4, #0]
   1dab0:	e7f5      	b.n	1da9e <net_frag_read+0x8>
			*pos = 0;
   1dab2:	2100      	movs	r1, #0
   1dab4:	8011      	strh	r1, [r2, #0]
			return frag->frags;
   1dab6:	6820      	ldr	r0, [r4, #0]
   1dab8:	e003      	b.n	1dac2 <net_frag_read+0x2c>
			*pos = offset;
   1daba:	8011      	strh	r1, [r2, #0]
			return frag;
   1dabc:	4620      	mov	r0, r4
   1dabe:	e000      	b.n	1dac2 <net_frag_read+0x2c>
	return NULL;
   1dac0:	4620      	mov	r0, r4
	u16_t copy = 0;

	frag = adjust_offset(frag, offset, pos);
	if (!frag) {
   1dac2:	b350      	cbz	r0, 1db1a <net_frag_read+0x84>
   1dac4:	2500      	movs	r5, #0
   1dac6:	e00d      	b.n	1dae4 <net_frag_read+0x4e>
	while (len-- > 0 && frag) {
		if (data) {
			frag = net_frag_read_byte(frag, *pos,
						  pos, data + copy++);
		} else {
			frag = net_frag_read_byte(frag, *pos, pos, NULL);
   1dac8:	8813      	ldrh	r3, [r2, #0]
	*pos = offset + 1;
   1daca:	3301      	adds	r3, #1
   1dacc:	b29b      	uxth	r3, r3
   1dace:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1dad0:	8984      	ldrh	r4, [r0, #12]
   1dad2:	42a3      	cmp	r3, r4
   1dad4:	d304      	bcc.n	1dae0 <net_frag_read+0x4a>
		*pos = 0;
   1dad6:	2300      	movs	r3, #0
   1dad8:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1dada:	6800      	ldr	r0, [r0, #0]
   1dadc:	e000      	b.n	1dae0 <net_frag_read+0x4a>
						  pos, data + copy++);
   1dade:	4625      	mov	r5, r4
   1dae0:	460b      	mov	r3, r1
		}

		/* Error: Still reamining length to be read, but no data. */
		if (!frag && len) {
   1dae2:	b1c0      	cbz	r0, 1db16 <net_frag_read+0x80>
	while (len-- > 0 && frag) {
   1dae4:	1e59      	subs	r1, r3, #1
   1dae6:	b289      	uxth	r1, r1
   1dae8:	b1db      	cbz	r3, 1db22 <net_frag_read+0x8c>
   1daea:	b1d0      	cbz	r0, 1db22 <net_frag_read+0x8c>
		if (data) {
   1daec:	2e00      	cmp	r6, #0
   1daee:	d0eb      	beq.n	1dac8 <net_frag_read+0x32>
			frag = net_frag_read_byte(frag, *pos,
   1daf0:	8813      	ldrh	r3, [r2, #0]
						  pos, data + copy++);
   1daf2:	1c6c      	adds	r4, r5, #1
   1daf4:	b2a4      	uxth	r4, r4
	if (data) {
   1daf6:	42ee      	cmn	r6, r5
   1daf8:	d002      	beq.n	1db00 <net_frag_read+0x6a>
		*data = frag->data[offset];
   1dafa:	6887      	ldr	r7, [r0, #8]
   1dafc:	5cff      	ldrb	r7, [r7, r3]
   1dafe:	5577      	strb	r7, [r6, r5]
	*pos = offset + 1;
   1db00:	3301      	adds	r3, #1
   1db02:	b29b      	uxth	r3, r3
   1db04:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1db06:	8985      	ldrh	r5, [r0, #12]
   1db08:	42ab      	cmp	r3, r5
   1db0a:	d3e8      	bcc.n	1dade <net_frag_read+0x48>
		*pos = 0;
   1db0c:	2300      	movs	r3, #0
   1db0e:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1db10:	6800      	ldr	r0, [r0, #0]
						  pos, data + copy++);
   1db12:	4625      	mov	r5, r4
   1db14:	e7e4      	b.n	1dae0 <net_frag_read+0x4a>
		if (!frag && len) {
   1db16:	2900      	cmp	r1, #0
   1db18:	d0e4      	beq.n	1dae4 <net_frag_read+0x4e>
	}

	return frag;

error:
	*pos = 0xffff;
   1db1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1db1e:	8013      	strh	r3, [r2, #0]

	return NULL;
   1db20:	2000      	movs	r0, #0
}
   1db22:	bcf0      	pop	{r4, r5, r6, r7}
   1db24:	4770      	bx	lr

0001db26 <net_frag_read_be16>:

struct net_buf *net_frag_read_be16(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u16_t *value)
{
   1db26:	b510      	push	{r4, lr}
   1db28:	b084      	sub	sp, #16
   1db2a:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v16[2];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   1db2c:	ab03      	add	r3, sp, #12
   1db2e:	9300      	str	r3, [sp, #0]
   1db30:	2302      	movs	r3, #2
   1db32:	f7ff ffb0 	bl	1da96 <net_frag_read>

	*value = v16[0] << 8 | v16[1];
   1db36:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1db3a:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1db3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1db42:	8023      	strh	r3, [r4, #0]

	return ret_frag;
}
   1db44:	b004      	add	sp, #16
   1db46:	bd10      	pop	{r4, pc}

0001db48 <net_frag_read_be32>:

struct net_buf *net_frag_read_be32(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u32_t *value)
{
   1db48:	b510      	push	{r4, lr}
   1db4a:	b084      	sub	sp, #16
   1db4c:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v32[4];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   1db4e:	ab03      	add	r3, sp, #12
   1db50:	9300      	str	r3, [sp, #0]
   1db52:	2304      	movs	r3, #4
   1db54:	f7ff ff9f 	bl	1da96 <net_frag_read>

	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   1db58:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1db5c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1db60:	041b      	lsls	r3, r3, #16
   1db62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1db66:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1db6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1db6e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1db72:	4313      	orrs	r3, r2
   1db74:	6023      	str	r3, [r4, #0]

	return ret_frag;
}
   1db76:	b004      	add	sp, #16
   1db78:	bd10      	pop	{r4, pc}

0001db7a <net_pkt_write>:

struct net_buf *net_pkt_write(struct net_pkt *pkt, struct net_buf *frag,
			      u16_t offset, u16_t *pos,
			      u16_t len, u8_t *data,
			      s32_t timeout)
{
   1db7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db7e:	b083      	sub	sp, #12
   1db80:	9201      	str	r2, [sp, #4]
   1db82:	469b      	mov	fp, r3
   1db84:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1db88:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	if (!pkt) {
   1db8a:	2800      	cmp	r0, #0
   1db8c:	d06d      	beq.n	1dc6a <net_pkt_write+0xf0>
   1db8e:	460c      	mov	r4, r1
   1db90:	4682      	mov	sl, r0
   1db92:	4615      	mov	r5, r2
	if (data) {
   1db94:	b364      	cbz	r4, 1dbf0 <net_pkt_write+0x76>
		if (!frag) {
   1db96:	2c00      	cmp	r4, #0
   1db98:	d065      	beq.n	1dc66 <net_pkt_write+0xec>
		if (offset < frag->len) {
   1db9a:	89a3      	ldrh	r3, [r4, #12]
   1db9c:	42ab      	cmp	r3, r5
   1db9e:	d863      	bhi.n	1dc68 <net_pkt_write+0xee>
		if (offset == frag->len) {
   1dba0:	d032      	beq.n	1dc08 <net_pkt_write+0x8e>
		if (offset > frag->len) {
   1dba2:	42ab      	cmp	r3, r5
   1dba4:	d2f6      	bcs.n	1db94 <net_pkt_write+0x1a>
			offset -= frag->len;
   1dba6:	1aed      	subs	r5, r5, r3
   1dba8:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   1dbaa:	f104 0908 	add.w	r9, r4, #8
   1dbae:	4648      	mov	r0, r9
   1dbb0:	f7fd f939 	bl	1ae26 <net_buf_simple_tailroom>
   1dbb4:	fa1f f880 	uxth.w	r8, r0
			if (offset < tailroom) {
   1dbb8:	4545      	cmp	r5, r8
   1dbba:	d33a      	bcc.n	1dc32 <net_pkt_write+0xb8>
			if (offset == tailroom) {
   1dbbc:	4545      	cmp	r5, r8
   1dbbe:	d03e      	beq.n	1dc3e <net_pkt_write+0xc4>
			if (offset > tailroom) {
   1dbc0:	4545      	cmp	r5, r8
   1dbc2:	d9e7      	bls.n	1db94 <net_pkt_write+0x1a>
				net_buf_add(frag, tailroom);
   1dbc4:	b281      	uxth	r1, r0
   1dbc6:	4648      	mov	r0, r9
   1dbc8:	f7fd f8c4 	bl	1ad54 <net_buf_simple_add>
				offset -= tailroom;
   1dbcc:	eba5 0508 	sub.w	r5, r5, r8
   1dbd0:	b2ad      	uxth	r5, r5
				frag = check_and_create_data(pkt,
   1dbd2:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1dbd4:	2c00      	cmp	r4, #0
   1dbd6:	d1dd      	bne.n	1db94 <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1dbd8:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dbda:	4650      	mov	r0, sl
   1dbdc:	f7ff fd8a 	bl	1d6f4 <net_pkt_get_frag>
	if (!frag) {
   1dbe0:	4604      	mov	r4, r0
   1dbe2:	2800      	cmp	r0, #0
   1dbe4:	d0d6      	beq.n	1db94 <net_pkt_write+0x1a>
	net_pkt_frag_add(pkt, frag);
   1dbe6:	4601      	mov	r1, r0
   1dbe8:	4650      	mov	r0, sl
   1dbea:	f7ff fe00 	bl	1d7ee <net_pkt_frag_add>
   1dbee:	e7d1      	b.n	1db94 <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1dbf0:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dbf2:	4650      	mov	r0, sl
   1dbf4:	f7ff fd7e 	bl	1d6f4 <net_pkt_get_frag>
	if (!frag) {
   1dbf8:	4604      	mov	r4, r0
   1dbfa:	2800      	cmp	r0, #0
   1dbfc:	d0cb      	beq.n	1db96 <net_pkt_write+0x1c>
	net_pkt_frag_add(pkt, frag);
   1dbfe:	4601      	mov	r1, r0
   1dc00:	4650      	mov	r0, sl
   1dc02:	f7ff fdf4 	bl	1d7ee <net_pkt_frag_add>
   1dc06:	e7c6      	b.n	1db96 <net_pkt_write+0x1c>
			if (net_buf_tailroom(frag)) {
   1dc08:	f104 0008 	add.w	r0, r4, #8
   1dc0c:	f7fd f90b 	bl	1ae26 <net_buf_simple_tailroom>
   1dc10:	bb50      	cbnz	r0, 1dc68 <net_pkt_write+0xee>
			return check_and_create_data(pkt, frag->frags,
   1dc12:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1dc14:	b10c      	cbz	r4, 1dc1a <net_pkt_write+0xa0>
			*pos = 0;
   1dc16:	2500      	movs	r5, #0
   1dc18:	e026      	b.n	1dc68 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1dc1a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dc1c:	4650      	mov	r0, sl
   1dc1e:	f7ff fd69 	bl	1d6f4 <net_pkt_get_frag>
	if (!frag) {
   1dc22:	4604      	mov	r4, r0
   1dc24:	2800      	cmp	r0, #0
   1dc26:	d0f6      	beq.n	1dc16 <net_pkt_write+0x9c>
	net_pkt_frag_add(pkt, frag);
   1dc28:	4601      	mov	r1, r0
   1dc2a:	4650      	mov	r0, sl
   1dc2c:	f7ff fddf 	bl	1d7ee <net_pkt_frag_add>
   1dc30:	e7f1      	b.n	1dc16 <net_pkt_write+0x9c>
				net_buf_add(frag, offset);
   1dc32:	4629      	mov	r1, r5
   1dc34:	4648      	mov	r0, r9
   1dc36:	f7fd f88d 	bl	1ad54 <net_buf_simple_add>
				*pos = frag->len;
   1dc3a:	89a5      	ldrh	r5, [r4, #12]
   1dc3c:	e014      	b.n	1dc68 <net_pkt_write+0xee>
				net_buf_add(frag, tailroom);
   1dc3e:	b281      	uxth	r1, r0
   1dc40:	4648      	mov	r0, r9
   1dc42:	f7fd f887 	bl	1ad54 <net_buf_simple_add>
				return check_and_create_data(pkt,
   1dc46:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1dc48:	b10c      	cbz	r4, 1dc4e <net_pkt_write+0xd4>
				*pos = 0;
   1dc4a:	2500      	movs	r5, #0
   1dc4c:	e00c      	b.n	1dc68 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1dc4e:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dc50:	4650      	mov	r0, sl
   1dc52:	f7ff fd4f 	bl	1d6f4 <net_pkt_get_frag>
	if (!frag) {
   1dc56:	4604      	mov	r4, r0
   1dc58:	2800      	cmp	r0, #0
   1dc5a:	d0f6      	beq.n	1dc4a <net_pkt_write+0xd0>
	net_pkt_frag_add(pkt, frag);
   1dc5c:	4601      	mov	r1, r0
   1dc5e:	4650      	mov	r0, sl
   1dc60:	f7ff fdc5 	bl	1d7ee <net_pkt_frag_add>
   1dc64:	e7f1      	b.n	1dc4a <net_pkt_write+0xd0>
		if (!frag) {
   1dc66:	9d01      	ldr	r5, [sp, #4]
		NET_ERR("Invalid packet");
		goto error;
	}

	frag = adjust_write_offset(pkt, frag, offset, &offset, timeout);
	if (!frag) {
   1dc68:	b96c      	cbnz	r4, 1dc86 <net_pkt_write+0x10c>
			net_pkt_frag_add(pkt, frag);
		}
	} while (1);

error:
	*pos = 0xffff;
   1dc6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1dc6e:	f8ab 3000 	strh.w	r3, [fp]

	return NULL;
   1dc72:	2000      	movs	r0, #0
   1dc74:	e02d      	b.n	1dcd2 <net_pkt_write+0x158>
		len -= count;
   1dc76:	eba6 0608 	sub.w	r6, r6, r8
   1dc7a:	b2b6      	uxth	r6, r6
		if (len == 0) {
   1dc7c:	b32e      	cbz	r6, 1dcca <net_pkt_write+0x150>
		data += count;
   1dc7e:	4447      	add	r7, r8
		frag = frag->frags;
   1dc80:	6824      	ldr	r4, [r4, #0]
		if (!frag) {
   1dc82:	b34c      	cbz	r4, 1dcd8 <net_pkt_write+0x15e>
		offset = 0;
   1dc84:	2500      	movs	r5, #0
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   1dc86:	f8b4 800e 	ldrh.w	r8, [r4, #14]
   1dc8a:	f104 0908 	add.w	r9, r4, #8
   1dc8e:	4648      	mov	r0, r9
   1dc90:	f7fd f8c5 	bl	1ae1e <net_buf_simple_headroom>
   1dc94:	eba8 0800 	sub.w	r8, r8, r0
   1dc98:	fa1f f888 	uxth.w	r8, r8
   1dc9c:	eba8 0805 	sub.w	r8, r8, r5
   1dca0:	fa1f f888 	uxth.w	r8, r8
		u16_t count = min(len, space);
   1dca4:	45b0      	cmp	r8, r6
   1dca6:	bf28      	it	cs
   1dca8:	46b0      	movcs	r8, r6
		memcpy(frag->data + offset, data, count);
   1dcaa:	68a0      	ldr	r0, [r4, #8]
   1dcac:	4642      	mov	r2, r8
   1dcae:	4639      	mov	r1, r7
   1dcb0:	4428      	add	r0, r5
   1dcb2:	f7e2 fb05 	bl	2c0 <memcpy>
		size_to_add = offset + count - frag->len;
   1dcb6:	eb05 0108 	add.w	r1, r5, r8
   1dcba:	89a3      	ldrh	r3, [r4, #12]
   1dcbc:	1ac9      	subs	r1, r1, r3
		if (size_to_add > 0) {
   1dcbe:	2900      	cmp	r1, #0
   1dcc0:	ddd9      	ble.n	1dc76 <net_pkt_write+0xfc>
			net_buf_add(frag, size_to_add);
   1dcc2:	4648      	mov	r0, r9
   1dcc4:	f7fd f846 	bl	1ad54 <net_buf_simple_add>
   1dcc8:	e7d5      	b.n	1dc76 <net_pkt_write+0xfc>
			*pos = offset + count;
   1dcca:	4445      	add	r5, r8
   1dccc:	f8ab 5000 	strh.w	r5, [fp]
			return frag;
   1dcd0:	4620      	mov	r0, r4
}
   1dcd2:	b003      	add	sp, #12
   1dcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			frag = net_pkt_get_frag(pkt, timeout);
   1dcd8:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dcda:	4650      	mov	r0, sl
   1dcdc:	f7ff fd0a 	bl	1d6f4 <net_pkt_get_frag>
			if (!frag) {
   1dce0:	4604      	mov	r4, r0
   1dce2:	2800      	cmp	r0, #0
   1dce4:	d0c1      	beq.n	1dc6a <net_pkt_write+0xf0>
			net_pkt_frag_add(pkt, frag);
   1dce6:	4601      	mov	r1, r0
   1dce8:	4650      	mov	r0, sl
   1dcea:	f7ff fd80 	bl	1d7ee <net_pkt_frag_add>
   1dcee:	e7c9      	b.n	1dc84 <net_pkt_write+0x10a>

0001dcf0 <net_pkt_get_info>:
void net_pkt_get_info(struct k_mem_slab **rx,
		      struct k_mem_slab **tx,
		      struct net_buf_pool **rx_data,
		      struct net_buf_pool **tx_data)
{
	if (rx) {
   1dcf0:	b170      	cbz	r0, 1dd10 <net_pkt_get_info+0x20>
{
   1dcf2:	b410      	push	{r4}
   1dcf4:	4604      	mov	r4, r0
		*rx = &rx_pkts;
   1dcf6:	480c      	ldr	r0, [pc, #48]	; (1dd28 <net_pkt_get_info+0x38>)
   1dcf8:	6020      	str	r0, [r4, #0]
	}

	if (tx) {
   1dcfa:	b109      	cbz	r1, 1dd00 <net_pkt_get_info+0x10>
		*tx = &tx_pkts;
   1dcfc:	480b      	ldr	r0, [pc, #44]	; (1dd2c <net_pkt_get_info+0x3c>)
   1dcfe:	6008      	str	r0, [r1, #0]
	}

	if (rx_data) {
   1dd00:	b10a      	cbz	r2, 1dd06 <net_pkt_get_info+0x16>
		*rx_data = &rx_bufs;
   1dd02:	490b      	ldr	r1, [pc, #44]	; (1dd30 <net_pkt_get_info+0x40>)
   1dd04:	6011      	str	r1, [r2, #0]
	}

	if (tx_data) {
   1dd06:	b10b      	cbz	r3, 1dd0c <net_pkt_get_info+0x1c>
		*tx_data = &tx_bufs;
   1dd08:	4a0a      	ldr	r2, [pc, #40]	; (1dd34 <net_pkt_get_info+0x44>)
   1dd0a:	601a      	str	r2, [r3, #0]
	}
}
   1dd0c:	bc10      	pop	{r4}
   1dd0e:	4770      	bx	lr
	if (tx) {
   1dd10:	b109      	cbz	r1, 1dd16 <net_pkt_get_info+0x26>
		*tx = &tx_pkts;
   1dd12:	4806      	ldr	r0, [pc, #24]	; (1dd2c <net_pkt_get_info+0x3c>)
   1dd14:	6008      	str	r0, [r1, #0]
	if (rx_data) {
   1dd16:	b10a      	cbz	r2, 1dd1c <net_pkt_get_info+0x2c>
		*rx_data = &rx_bufs;
   1dd18:	4905      	ldr	r1, [pc, #20]	; (1dd30 <net_pkt_get_info+0x40>)
   1dd1a:	6011      	str	r1, [r2, #0]
	if (tx_data) {
   1dd1c:	2b00      	cmp	r3, #0
   1dd1e:	d0f6      	beq.n	1dd0e <net_pkt_get_info+0x1e>
		*tx_data = &tx_bufs;
   1dd20:	4a04      	ldr	r2, [pc, #16]	; (1dd34 <net_pkt_get_info+0x44>)
   1dd22:	601a      	str	r2, [r3, #0]
   1dd24:	4770      	bx	lr
   1dd26:	bf00      	nop
   1dd28:	2000d5e8 	.word	0x2000d5e8
   1dd2c:	2000d604 	.word	0x2000d604
   1dd30:	2000d768 	.word	0x2000d768
   1dd34:	2000d788 	.word	0x2000d788

0001dd38 <net_frag_get_pos>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   1dd38:	b500      	push	{lr}
   1dd3a:	b083      	sub	sp, #12
	struct net_buf *frag;

	frag = net_frag_skip(pkt->frags, offset, pos, 0);
   1dd3c:	6880      	ldr	r0, [r0, #8]
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   1dd3e:	2300      	movs	r3, #0
   1dd40:	9300      	str	r3, [sp, #0]
   1dd42:	f7ff fea8 	bl	1da96 <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   1dd46:	b003      	add	sp, #12
   1dd48:	f85d fb04 	ldr.w	pc, [sp], #4

0001dd4c <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   1dd4c:	b500      	push	{lr}
   1dd4e:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1dd50:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1dd54:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1dd58:	f10d 0206 	add.w	r2, sp, #6
   1dd5c:	4419      	add	r1, r3
   1dd5e:	f7ff ffeb 	bl	1dd38 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1dd62:	b130      	cbz	r0, 1dd72 <net_pkt_icmp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   1dd64:	6880      	ldr	r0, [r0, #8]
   1dd66:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dd6a:	4418      	add	r0, r3
}
   1dd6c:	b003      	add	sp, #12
   1dd6e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1dd72:	2000      	movs	r0, #0
   1dd74:	e7fa      	b.n	1dd6c <net_pkt_icmp_data+0x20>

0001dd76 <net_pkt_icmp_opt_data>:

u8_t *net_pkt_icmp_opt_data(struct net_pkt *pkt, size_t opt_len)
{
   1dd76:	b500      	push	{lr}
   1dd78:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1dd7a:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) + opt_len,
   1dd7e:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1dd82:	4413      	add	r3, r2
	frag = net_frag_get_pos(pkt,
   1dd84:	4419      	add	r1, r3
   1dd86:	f10d 0206 	add.w	r2, sp, #6
   1dd8a:	b289      	uxth	r1, r1
   1dd8c:	f7ff ffd4 	bl	1dd38 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1dd90:	b130      	cbz	r0, 1dda0 <net_pkt_icmp_opt_data+0x2a>
		/* We tried to read past the end of the data */
		too_short_msg("icmp opt data", pkt, offset, opt_len);
		return NULL;
	}

	return frag->data + offset;
   1dd92:	6880      	ldr	r0, [r0, #8]
   1dd94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dd98:	4418      	add	r0, r3
}
   1dd9a:	b003      	add	sp, #12
   1dd9c:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1dda0:	2000      	movs	r0, #0
   1dda2:	e7fa      	b.n	1dd9a <net_pkt_icmp_opt_data+0x24>

0001dda4 <net_pkt_udp_data>:

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   1dda4:	b500      	push	{lr}
   1dda6:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1dda8:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1ddac:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1ddb0:	f10d 0206 	add.w	r2, sp, #6
   1ddb4:	4419      	add	r1, r3
   1ddb6:	f7ff ffbf 	bl	1dd38 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1ddba:	b130      	cbz	r0, 1ddca <net_pkt_udp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   1ddbc:	6880      	ldr	r0, [r0, #8]
   1ddbe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ddc2:	4418      	add	r0, r3
}
   1ddc4:	b003      	add	sp, #12
   1ddc6:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1ddca:	2000      	movs	r0, #0
   1ddcc:	e7fa      	b.n	1ddc4 <net_pkt_udp_data+0x20>

0001ddce <net_pkt_tcp_data>:

struct net_tcp_hdr *net_pkt_tcp_data(struct net_pkt *pkt)
{
   1ddce:	b500      	push	{lr}
   1ddd0:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1ddd2:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1ddd6:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1ddda:	f10d 0206 	add.w	r2, sp, #6
   1ddde:	4419      	add	r1, r3
   1dde0:	f7ff ffaa 	bl	1dd38 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1dde4:	b130      	cbz	r0, 1ddf4 <net_pkt_tcp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("tcp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_tcp_hdr *)(frag->data + offset);
   1dde6:	6880      	ldr	r0, [r0, #8]
   1dde8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ddec:	4418      	add	r0, r3
}
   1ddee:	b003      	add	sp, #12
   1ddf0:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1ddf4:	2000      	movs	r0, #0
   1ddf6:	e7fa      	b.n	1ddee <net_pkt_tcp_data+0x20>

0001ddf8 <net_pkt_clone>:

struct net_pkt *net_pkt_clone(struct net_pkt *pkt, s32_t timeout)
{
   1ddf8:	b570      	push	{r4, r5, r6, lr}
   1ddfa:	b082      	sub	sp, #8
	struct net_pkt *clone;
	struct net_buf *frag;
	u16_t pos;

	if (!pkt) {
   1ddfc:	4605      	mov	r5, r0
   1ddfe:	2800      	cmp	r0, #0
   1de00:	d065      	beq.n	1dece <net_pkt_clone+0xd6>
   1de02:	460e      	mov	r6, r1
		return NULL;
	}

	clone = net_pkt_get_reserve(pkt->slab, 0, timeout);
   1de04:	460a      	mov	r2, r1
   1de06:	2100      	movs	r1, #0
   1de08:	6840      	ldr	r0, [r0, #4]
   1de0a:	f7ff fbad 	bl	1d568 <net_pkt_get_reserve>
	if (!clone) {
   1de0e:	4604      	mov	r4, r0
   1de10:	2800      	cmp	r0, #0
   1de12:	d054      	beq.n	1debe <net_pkt_clone+0xc6>
		return NULL;
	}

	clone->frags = NULL;
   1de14:	2300      	movs	r3, #0
   1de16:	6083      	str	r3, [r0, #8]

	if (pkt->frags) {
   1de18:	68ab      	ldr	r3, [r5, #8]
   1de1a:	b173      	cbz	r3, 1de3a <net_pkt_clone+0x42>
   1de1c:	2100      	movs	r1, #0
   1de1e:	e002      	b.n	1de26 <net_pkt_clone+0x2e>
		bytes += buf->len;
   1de20:	899a      	ldrh	r2, [r3, #12]
   1de22:	4411      	add	r1, r2
		buf = buf->frags;
   1de24:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1de26:	2b00      	cmp	r3, #0
   1de28:	d1fa      	bne.n	1de20 <net_pkt_clone+0x28>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1de2a:	4633      	mov	r3, r6
   1de2c:	2200      	movs	r2, #0
   1de2e:	4628      	mov	r0, r5
   1de30:	f7ff fcf4 	bl	1d81c <net_pkt_copy>
		clone->frags = net_pkt_copy_all(pkt, 0, timeout);
   1de34:	60a0      	str	r0, [r4, #8]
		if (!clone->frags) {
   1de36:	2800      	cmp	r0, #0
   1de38:	d044      	beq.n	1dec4 <net_pkt_clone+0xcc>
			net_pkt_unref(clone);
			return NULL;
		}
	}

	clone->context = pkt->context;
   1de3a:	68eb      	ldr	r3, [r5, #12]
   1de3c:	60e3      	str	r3, [r4, #12]
	clone->token = pkt->token;
   1de3e:	692b      	ldr	r3, [r5, #16]
   1de40:	6123      	str	r3, [r4, #16]
	clone->iface = pkt->iface;
   1de42:	696b      	ldr	r3, [r5, #20]
   1de44:	6163      	str	r3, [r4, #20]

	if (clone->frags) {
   1de46:	68a3      	ldr	r3, [r4, #8]
   1de48:	b1db      	cbz	r3, 1de82 <net_pkt_clone+0x8a>
		frag = net_frag_get_pos(clone, net_pkt_ip_hdr_len(pkt), &pos);
   1de4a:	f10d 0206 	add.w	r2, sp, #6
   1de4e:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   1de52:	4620      	mov	r0, r4
   1de54:	f7ff ff70 	bl	1dd38 <net_frag_get_pos>

		net_pkt_set_appdata(clone, frag->data + pos);
   1de58:	6883      	ldr	r3, [r0, #8]
   1de5a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1de5e:	4413      	add	r3, r2
	pkt->appdata = data;
   1de60:	61a3      	str	r3, [r4, #24]
	return pkt->appdatalen;
   1de62:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
	pkt->appdatalen = len;
   1de64:	8623      	strh	r3, [r4, #48]	; 0x30

		/* The link header pointers are only usable if there is
		 * a fragment that we copied because those pointers point
		 * to start of the fragment which we do not have right now.
		 */
		memcpy(&clone->lladdr_src, &pkt->lladdr_src,
   1de66:	2208      	movs	r2, #8
   1de68:	f105 0120 	add.w	r1, r5, #32
   1de6c:	f104 0020 	add.w	r0, r4, #32
   1de70:	f7e2 fa26 	bl	2c0 <memcpy>
		       sizeof(clone->lladdr_src));
		memcpy(&clone->lladdr_dst, &pkt->lladdr_dst,
   1de74:	2208      	movs	r2, #8
   1de76:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1de7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1de7e:	f7e2 fa1f 	bl	2c0 <memcpy>
	pkt->next_hdr = hdr;
   1de82:	2300      	movs	r3, #0
   1de84:	61e3      	str	r3, [r4, #28]
	return pkt->ip_hdr_len;
   1de86:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	pkt->ip_hdr_len = len;
   1de8a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->family;
   1de8e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1de92:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	pkt->family = family;
   1de96:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1de9a:	f363 02c6 	bfi	r2, r3, #3, #4
   1de9e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	net_pkt_set_ip_hdr_len(clone, net_pkt_ip_hdr_len(pkt));

	net_pkt_set_family(clone, net_pkt_family(pkt));

#if defined(CONFIG_NET_IPV6)
	clone->ipv6_hop_limit = pkt->ipv6_hop_limit;
   1dea2:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1dea6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	clone->ipv6_ext_len = pkt->ipv6_ext_len;
   1deaa:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   1deae:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	clone->ipv6_ext_opt_len = pkt->ipv6_ext_opt_len;
   1deb2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1deb6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	clone->ipv6_prev_hdr_start = pkt->ipv6_prev_hdr_start;
   1deba:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   1debc:	87e3      	strh	r3, [r4, #62]	; 0x3e
#endif

	NET_DBG("Cloned %p to %p", pkt, clone);

	return clone;
}
   1debe:	4620      	mov	r0, r4
   1dec0:	b002      	add	sp, #8
   1dec2:	bd70      	pop	{r4, r5, r6, pc}
			net_pkt_unref(clone);
   1dec4:	4620      	mov	r0, r4
   1dec6:	f7ff fc68 	bl	1d79a <net_pkt_unref>
			return NULL;
   1deca:	2400      	movs	r4, #0
   1decc:	e7f7      	b.n	1debe <net_pkt_clone+0xc6>
		return NULL;
   1dece:	4604      	mov	r4, r0
   1ded0:	e7f5      	b.n	1debe <net_pkt_clone+0xc6>

0001ded2 <net_pkt_init>:

void net_pkt_init(void)
{
   1ded2:	4770      	bx	lr

0001ded4 <net_value_to_udec>:
	*(ptr - 1) = '\0';
	return buf;
}

static int net_value_to_udec(char *buf, u32_t value, int precision)
{
   1ded4:	b470      	push	{r4, r5, r6}
	int i;
	int temp;
	char *start = buf;

	divisor = 1000000000;
	if (precision < 0)
   1ded6:	2a00      	cmp	r2, #0
   1ded8:	db03      	blt.n	1dee2 <net_value_to_udec+0xe>
	for (i = 9; i >= 0; i--, divisor /= 10) {
		temp = value / divisor;
		value = value % divisor;
		if ((precision > i) || (temp != 0)) {
			precision = i;
			*buf++ = (char) (temp + '0');
   1deda:	4606      	mov	r6, r0
   1dedc:	2409      	movs	r4, #9
   1dede:	4b0e      	ldr	r3, [pc, #56]	; (1df18 <net_value_to_udec+0x44>)
   1dee0:	e00a      	b.n	1def8 <net_value_to_udec+0x24>
		precision = 1;
   1dee2:	2201      	movs	r2, #1
   1dee4:	e7f9      	b.n	1deda <net_value_to_udec+0x6>
			*buf++ = (char) (temp + '0');
   1dee6:	3530      	adds	r5, #48	; 0x30
   1dee8:	7035      	strb	r5, [r6, #0]
			precision = i;
   1deea:	4622      	mov	r2, r4
			*buf++ = (char) (temp + '0');
   1deec:	3601      	adds	r6, #1
	for (i = 9; i >= 0; i--, divisor /= 10) {
   1deee:	3c01      	subs	r4, #1
   1def0:	4d0a      	ldr	r5, [pc, #40]	; (1df1c <net_value_to_udec+0x48>)
   1def2:	fba5 5303 	umull	r5, r3, r5, r3
   1def6:	08db      	lsrs	r3, r3, #3
   1def8:	2c00      	cmp	r4, #0
   1defa:	db08      	blt.n	1df0e <net_value_to_udec+0x3a>
		temp = value / divisor;
   1defc:	fbb1 f5f3 	udiv	r5, r1, r3
		value = value % divisor;
   1df00:	fb03 1115 	mls	r1, r3, r5, r1
		if ((precision > i) || (temp != 0)) {
   1df04:	42a2      	cmp	r2, r4
   1df06:	dcee      	bgt.n	1dee6 <net_value_to_udec+0x12>
   1df08:	2d00      	cmp	r5, #0
   1df0a:	d0f0      	beq.n	1deee <net_value_to_udec+0x1a>
   1df0c:	e7eb      	b.n	1dee6 <net_value_to_udec+0x12>
		}
	}
	*buf = 0;
   1df0e:	2300      	movs	r3, #0
   1df10:	7033      	strb	r3, [r6, #0]

	return buf - start;
}
   1df12:	1a30      	subs	r0, r6, r0
   1df14:	bc70      	pop	{r4, r5, r6}
   1df16:	4770      	bx	lr
   1df18:	3b9aca00 	.word	0x3b9aca00
   1df1c:	cccccccd 	.word	0xcccccccd

0001df20 <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   1df20:	b410      	push	{r4}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   1df22:	3a01      	subs	r2, #1
   1df24:	440a      	add	r2, r1

	while (ptr < end) {
   1df26:	e000      	b.n	1df2a <calc_chksum+0xa>
		tmp = (ptr[0] << 8) + ptr[1];
		sum += tmp;
		if (sum < tmp) {
			sum++;
		}
		ptr += 2;
   1df28:	3102      	adds	r1, #2
	while (ptr < end) {
   1df2a:	4291      	cmp	r1, r2
   1df2c:	d20b      	bcs.n	1df46 <calc_chksum+0x26>
		tmp = (ptr[0] << 8) + ptr[1];
   1df2e:	780c      	ldrb	r4, [r1, #0]
   1df30:	784b      	ldrb	r3, [r1, #1]
   1df32:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1df36:	b29b      	uxth	r3, r3
		sum += tmp;
   1df38:	4418      	add	r0, r3
   1df3a:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1df3c:	4283      	cmp	r3, r0
   1df3e:	d9f3      	bls.n	1df28 <calc_chksum+0x8>
			sum++;
   1df40:	3001      	adds	r0, #1
   1df42:	b280      	uxth	r0, r0
   1df44:	e7f0      	b.n	1df28 <calc_chksum+0x8>
	}

	if (ptr == end) {
   1df46:	d001      	beq.n	1df4c <calc_chksum+0x2c>
			sum++;
		}
	}

	return sum;
}
   1df48:	bc10      	pop	{r4}
   1df4a:	4770      	bx	lr
		tmp = ptr[0] << 8;
   1df4c:	780b      	ldrb	r3, [r1, #0]
   1df4e:	021b      	lsls	r3, r3, #8
		sum += tmp;
   1df50:	4418      	add	r0, r3
   1df52:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1df54:	4283      	cmp	r3, r0
   1df56:	d9f7      	bls.n	1df48 <calc_chksum+0x28>
			sum++;
   1df58:	3001      	adds	r0, #1
   1df5a:	b280      	uxth	r0, r0
   1df5c:	e7f4      	b.n	1df48 <calc_chksum+0x28>

0001df5e <convert_port>:
	return false;
}

#if defined(CONFIG_NET_IPV6) || defined(CONFIG_NET_IPV4)
static bool convert_port(const char *buf, u16_t *port)
{
   1df5e:	b530      	push	{r4, r5, lr}
   1df60:	b083      	sub	sp, #12
   1df62:	4604      	mov	r4, r0
   1df64:	460d      	mov	r5, r1
	unsigned long tmp;
	char *endptr;

	tmp = strtoul(buf, &endptr, 10);
   1df66:	220a      	movs	r2, #10
   1df68:	a901      	add	r1, sp, #4
   1df6a:	f00d fab7 	bl	2b4dc <strtoul>
	if ((endptr == buf && tmp == 0) ||
   1df6e:	9b01      	ldr	r3, [sp, #4]
   1df70:	429c      	cmp	r4, r3
   1df72:	d008      	beq.n	1df86 <convert_port+0x28>
	    !(*buf != '\0' && *endptr == '\0') ||
   1df74:	7822      	ldrb	r2, [r4, #0]
	if ((endptr == buf && tmp == 0) ||
   1df76:	b16a      	cbz	r2, 1df94 <convert_port+0x36>
	    !(*buf != '\0' && *endptr == '\0') ||
   1df78:	781b      	ldrb	r3, [r3, #0]
   1df7a:	b973      	cbnz	r3, 1df9a <convert_port+0x3c>
	    ((unsigned long)(unsigned short)tmp != tmp)) {
   1df7c:	b283      	uxth	r3, r0
	    !(*buf != '\0' && *endptr == '\0') ||
   1df7e:	4298      	cmp	r0, r3
   1df80:	d005      	beq.n	1df8e <convert_port+0x30>
		return false;
   1df82:	2000      	movs	r0, #0
   1df84:	e007      	b.n	1df96 <convert_port+0x38>
	if ((endptr == buf && tmp == 0) ||
   1df86:	2800      	cmp	r0, #0
   1df88:	d1f4      	bne.n	1df74 <convert_port+0x16>
		return false;
   1df8a:	2000      	movs	r0, #0
   1df8c:	e003      	b.n	1df96 <convert_port+0x38>
	}

	*port = tmp;
   1df8e:	802b      	strh	r3, [r5, #0]

	return true;
   1df90:	2001      	movs	r0, #1
   1df92:	e000      	b.n	1df96 <convert_port+0x38>
		return false;
   1df94:	2000      	movs	r0, #0
}
   1df96:	b003      	add	sp, #12
   1df98:	bd30      	pop	{r4, r5, pc}
		return false;
   1df9a:	2000      	movs	r0, #0
   1df9c:	e7fb      	b.n	1df96 <convert_port+0x38>

0001df9e <net_byte_to_hex>:
{
   1df9e:	b430      	push	{r4, r5}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1dfa0:	090c      	lsrs	r4, r1, #4
   1dfa2:	2500      	movs	r5, #0
   1dfa4:	e00a      	b.n	1dfbc <net_byte_to_hex+0x1e>
		if (i == 0 && !pad && !val) {
   1dfa6:	b96b      	cbnz	r3, 1dfc4 <net_byte_to_hex+0x26>
   1dfa8:	b12c      	cbz	r4, 1dfb6 <net_byte_to_hex+0x18>
   1dfaa:	e00b      	b.n	1dfc4 <net_byte_to_hex+0x26>
			*ptr++ = (char) (val - 10 + base);
   1dfac:	4414      	add	r4, r2
   1dfae:	b2e4      	uxtb	r4, r4
   1dfb0:	3c0a      	subs	r4, #10
   1dfb2:	7004      	strb	r4, [r0, #0]
   1dfb4:	3001      	adds	r0, #1
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1dfb6:	3501      	adds	r5, #1
   1dfb8:	f001 040f 	and.w	r4, r1, #15
   1dfbc:	2d01      	cmp	r5, #1
   1dfbe:	dc07      	bgt.n	1dfd0 <net_byte_to_hex+0x32>
		if (i == 0 && !pad && !val) {
   1dfc0:	2d00      	cmp	r5, #0
   1dfc2:	d0f0      	beq.n	1dfa6 <net_byte_to_hex+0x8>
		if (val < 10) {
   1dfc4:	2c09      	cmp	r4, #9
   1dfc6:	dcf1      	bgt.n	1dfac <net_byte_to_hex+0xe>
			*ptr++ = (char) (val + '0');
   1dfc8:	3430      	adds	r4, #48	; 0x30
   1dfca:	7004      	strb	r4, [r0, #0]
   1dfcc:	3001      	adds	r0, #1
   1dfce:	e7f2      	b.n	1dfb6 <net_byte_to_hex+0x18>
	*ptr = '\0';
   1dfd0:	2300      	movs	r3, #0
   1dfd2:	7003      	strb	r3, [r0, #0]
}
   1dfd4:	bc30      	pop	{r4, r5}
   1dfd6:	4770      	bx	lr

0001dfd8 <net_sprint_ll_addr_buf>:
{
   1dfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dfdc:	4607      	mov	r7, r0
   1dfde:	460e      	mov	r6, r1
   1dfe0:	4690      	mov	r8, r2
	switch (ll_len) {
   1dfe2:	2906      	cmp	r1, #6
   1dfe4:	d002      	beq.n	1dfec <net_sprint_ll_addr_buf+0x14>
   1dfe6:	2908      	cmp	r1, #8
   1dfe8:	d000      	beq.n	1dfec <net_sprint_ll_addr_buf+0x14>
		len = 6;
   1dfea:	2606      	movs	r6, #6
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1dfec:	b2dd      	uxtb	r5, r3
	char *ptr = buf;
   1dfee:	4640      	mov	r0, r8
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1dff0:	2400      	movs	r4, #0
   1dff2:	e00c      	b.n	1e00e <net_sprint_ll_addr_buf+0x36>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   1dff4:	2301      	movs	r3, #1
   1dff6:	2241      	movs	r2, #65	; 0x41
   1dff8:	5d39      	ldrb	r1, [r7, r4]
   1dffa:	f7ff ffd0 	bl	1df9e <net_byte_to_hex>
   1dffe:	4602      	mov	r2, r0
		*ptr++ = ':';
   1e000:	3001      	adds	r0, #1
   1e002:	233a      	movs	r3, #58	; 0x3a
   1e004:	7013      	strb	r3, [r2, #0]
		blen -= 3;
   1e006:	3d03      	subs	r5, #3
   1e008:	b2ed      	uxtb	r5, r5
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1e00a:	3401      	adds	r4, #1
   1e00c:	b2e4      	uxtb	r4, r4
   1e00e:	42b4      	cmp	r4, r6
   1e010:	d201      	bcs.n	1e016 <net_sprint_ll_addr_buf+0x3e>
   1e012:	2d00      	cmp	r5, #0
   1e014:	d1ee      	bne.n	1dff4 <net_sprint_ll_addr_buf+0x1c>
	if (!(ptr - buf)) {
   1e016:	4540      	cmp	r0, r8
   1e018:	d005      	beq.n	1e026 <net_sprint_ll_addr_buf+0x4e>
	*(ptr - 1) = '\0';
   1e01a:	2300      	movs	r3, #0
   1e01c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return buf;
   1e020:	4640      	mov	r0, r8
   1e022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   1e026:	2000      	movs	r0, #0
}
   1e028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e02c <net_addr_ntop>:
{
   1e02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e030:	b087      	sub	sp, #28
	unsigned char zeros[8] = { 0 };
   1e032:	2300      	movs	r3, #0
   1e034:	9304      	str	r3, [sp, #16]
   1e036:	9305      	str	r3, [sp, #20]
	if (family == AF_INET6) {
   1e038:	280a      	cmp	r0, #10
   1e03a:	d011      	beq.n	1e060 <net_addr_ntop+0x34>
	} else if (family == AF_INET) {
   1e03c:	2802      	cmp	r0, #2
   1e03e:	f040 80c8 	bne.w	1e1d2 <net_addr_ntop+0x1a6>
		addr = (struct in_addr *)src;
   1e042:	9101      	str	r1, [sp, #4]
		len = 4;
   1e044:	f04f 0804 	mov.w	r8, #4
		delim = '.';
   1e048:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
	s8_t pos = -1;
   1e04c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   1e050:	f04f 0a01 	mov.w	sl, #1
   1e054:	9202      	str	r2, [sp, #8]
   1e056:	9003      	str	r0, [sp, #12]
	char *ptr = dst;
   1e058:	4616      	mov	r6, r2
	bool needcolon = false;
   1e05a:	2500      	movs	r5, #0
	for (i = 0; i < len; i++) {
   1e05c:	462c      	mov	r4, r5
   1e05e:	e072      	b.n	1e146 <net_addr_ntop+0x11a>
		w = (u16_t *)addr6->s6_addr16;
   1e060:	460f      	mov	r7, r1
		for (i = 0; i < 8; i++) {
   1e062:	461d      	mov	r5, r3
   1e064:	e001      	b.n	1e06a <net_addr_ntop+0x3e>
   1e066:	3501      	adds	r5, #1
   1e068:	b2ed      	uxtb	r5, r5
   1e06a:	2d07      	cmp	r5, #7
   1e06c:	d810      	bhi.n	1e090 <net_addr_ntop+0x64>
   1e06e:	462b      	mov	r3, r5
			for (j = i; j < 8; j++) {
   1e070:	2b07      	cmp	r3, #7
   1e072:	d8f8      	bhi.n	1e066 <net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1e074:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
   1e078:	2900      	cmp	r1, #0
   1e07a:	d1f4      	bne.n	1e066 <net_addr_ntop+0x3a>
				zeros[i]++;
   1e07c:	a906      	add	r1, sp, #24
   1e07e:	194c      	adds	r4, r1, r5
   1e080:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1e084:	3101      	adds	r1, #1
   1e086:	f804 1c08 	strb.w	r1, [r4, #-8]
			for (j = i; j < 8; j++) {
   1e08a:	3301      	adds	r3, #1
   1e08c:	b2db      	uxtb	r3, r3
   1e08e:	e7ef      	b.n	1e070 <net_addr_ntop+0x44>
   1e090:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e094:	f04f 0a01 	mov.w	sl, #1
   1e098:	2300      	movs	r3, #0
   1e09a:	e001      	b.n	1e0a0 <net_addr_ntop+0x74>
		for (i = 0; i < 8; i++) {
   1e09c:	3301      	adds	r3, #1
   1e09e:	b2db      	uxtb	r3, r3
   1e0a0:	2b07      	cmp	r3, #7
   1e0a2:	d809      	bhi.n	1e0b8 <net_addr_ntop+0x8c>
			if (zeros[i] > longest) {
   1e0a4:	a906      	add	r1, sp, #24
   1e0a6:	4419      	add	r1, r3
   1e0a8:	f811 1c08 	ldrb.w	r1, [r1, #-8]
   1e0ac:	458a      	cmp	sl, r1
   1e0ae:	d2f5      	bcs.n	1e09c <net_addr_ntop+0x70>
				pos = i;
   1e0b0:	fa4f f983 	sxtb.w	r9, r3
				longest = zeros[i];
   1e0b4:	468a      	mov	sl, r1
   1e0b6:	e7f1      	b.n	1e09c <net_addr_ntop+0x70>
		if (longest == 1) {
   1e0b8:	f1ba 0f01 	cmp.w	sl, #1
   1e0bc:	d004      	beq.n	1e0c8 <net_addr_ntop+0x9c>
		len = 8;
   1e0be:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1e0c2:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
   1e0c6:	e7c5      	b.n	1e054 <net_addr_ntop+0x28>
		len = 8;
   1e0c8:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1e0cc:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
			pos = -1;
   1e0d0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e0d4:	e7be      	b.n	1e054 <net_addr_ntop+0x28>
			value = (u32_t)addr->s4_addr[i];
   1e0d6:	9a01      	ldr	r2, [sp, #4]
   1e0d8:	5cd1      	ldrb	r1, [r2, r3]
   1e0da:	b28b      	uxth	r3, r1
			if (value == 0) {
   1e0dc:	b93b      	cbnz	r3, 1e0ee <net_addr_ntop+0xc2>
				*ptr++ = '0';
   1e0de:	4633      	mov	r3, r6
   1e0e0:	2230      	movs	r2, #48	; 0x30
   1e0e2:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
   1e0e6:	f886 b001 	strb.w	fp, [r6, #1]
   1e0ea:	461e      	mov	r6, r3
				continue;
   1e0ec:	e029      	b.n	1e142 <net_addr_ntop+0x116>
			l = net_value_to_udec(ptr, value, 0);
   1e0ee:	2200      	movs	r2, #0
   1e0f0:	4630      	mov	r0, r6
   1e0f2:	f7ff feef 	bl	1ded4 <net_value_to_udec>
			ptr += l;
   1e0f6:	fa56 f080 	uxtab	r0, r6, r0
			*ptr++ = delim;
   1e0fa:	1c46      	adds	r6, r0, #1
   1e0fc:	f880 b000 	strb.w	fp, [r0]
			continue;
   1e100:	e01f      	b.n	1e142 <net_addr_ntop+0x116>
			if (needcolon || i == 0) {
   1e102:	b905      	cbnz	r5, 1e106 <net_addr_ntop+0xda>
   1e104:	b95c      	cbnz	r4, 1e11e <net_addr_ntop+0xf2>
				*ptr++ = ':';
   1e106:	1c73      	adds	r3, r6, #1
   1e108:	223a      	movs	r2, #58	; 0x3a
   1e10a:	7032      	strb	r2, [r6, #0]
			*ptr++ = ':';
   1e10c:	1c5e      	adds	r6, r3, #1
   1e10e:	223a      	movs	r2, #58	; 0x3a
   1e110:	701a      	strb	r2, [r3, #0]
			i += longest - 1;
   1e112:	4454      	add	r4, sl
   1e114:	b2e4      	uxtb	r4, r4
   1e116:	3c01      	subs	r4, #1
   1e118:	b2e4      	uxtb	r4, r4
			needcolon = false;
   1e11a:	2500      	movs	r5, #0
			continue;
   1e11c:	e011      	b.n	1e142 <net_addr_ntop+0x116>
   1e11e:	4633      	mov	r3, r6
   1e120:	e7f4      	b.n	1e10c <net_addr_ntop+0xe0>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1e122:	2300      	movs	r3, #0
   1e124:	2261      	movs	r2, #97	; 0x61
   1e126:	4630      	mov	r0, r6
   1e128:	f7ff ff39 	bl	1df9e <net_byte_to_hex>
   1e12c:	e002      	b.n	1e134 <net_addr_ntop+0x108>
					*ptr++ = (char) (bh - 10 + 'a');
   1e12e:	1c70      	adds	r0, r6, #1
   1e130:	3157      	adds	r1, #87	; 0x57
   1e132:	7031      	strb	r1, [r6, #0]
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1e134:	2301      	movs	r3, #1
   1e136:	2261      	movs	r2, #97	; 0x61
   1e138:	4629      	mov	r1, r5
   1e13a:	f7ff ff30 	bl	1df9e <net_byte_to_hex>
   1e13e:	4606      	mov	r6, r0
		needcolon = true;
   1e140:	2501      	movs	r5, #1
	for (i = 0; i < len; i++) {
   1e142:	3401      	adds	r4, #1
   1e144:	b2e4      	uxtb	r4, r4
   1e146:	4623      	mov	r3, r4
   1e148:	45a0      	cmp	r8, r4
   1e14a:	dd31      	ble.n	1e1b0 <net_addr_ntop+0x184>
		if (len == 4) {
   1e14c:	f1b8 0f04 	cmp.w	r8, #4
   1e150:	d0c1      	beq.n	1e0d6 <net_addr_ntop+0xaa>
		if (i == pos) {
   1e152:	454b      	cmp	r3, r9
   1e154:	d0d5      	beq.n	1e102 <net_addr_ntop+0xd6>
		if (needcolon) {
   1e156:	b115      	cbz	r5, 1e15e <net_addr_ntop+0x132>
			*ptr++ = ':';
   1e158:	233a      	movs	r3, #58	; 0x3a
   1e15a:	7033      	strb	r3, [r6, #0]
   1e15c:	3601      	adds	r6, #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1e15e:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   1e162:	021d      	lsls	r5, r3, #8
   1e164:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   1e168:	b22d      	sxth	r5, r5
		bh = value >> 8;
   1e16a:	f3c5 2107 	ubfx	r1, r5, #8, #8
		bl = value & 0xff;
   1e16e:	b2ed      	uxtb	r5, r5
		if (bh) {
   1e170:	b139      	cbz	r1, 1e182 <net_addr_ntop+0x156>
			if (bh > 0x0f) {
   1e172:	290f      	cmp	r1, #15
   1e174:	d8d5      	bhi.n	1e122 <net_addr_ntop+0xf6>
				if (bh < 10) {
   1e176:	2909      	cmp	r1, #9
   1e178:	d8d9      	bhi.n	1e12e <net_addr_ntop+0x102>
					*ptr++ = (char)(bh + '0');
   1e17a:	1c70      	adds	r0, r6, #1
   1e17c:	3130      	adds	r1, #48	; 0x30
   1e17e:	7031      	strb	r1, [r6, #0]
   1e180:	e7d8      	b.n	1e134 <net_addr_ntop+0x108>
		} else if (bl > 0x0f) {
   1e182:	2d0f      	cmp	r5, #15
   1e184:	d806      	bhi.n	1e194 <net_addr_ntop+0x168>
			if (bl < 10) {
   1e186:	2d09      	cmp	r5, #9
   1e188:	d80d      	bhi.n	1e1a6 <net_addr_ntop+0x17a>
				*ptr++ = (char)(bl + '0');
   1e18a:	3530      	adds	r5, #48	; 0x30
   1e18c:	7035      	strb	r5, [r6, #0]
   1e18e:	3601      	adds	r6, #1
		needcolon = true;
   1e190:	2501      	movs	r5, #1
   1e192:	e7d6      	b.n	1e142 <net_addr_ntop+0x116>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1e194:	2300      	movs	r3, #0
   1e196:	2261      	movs	r2, #97	; 0x61
   1e198:	4629      	mov	r1, r5
   1e19a:	4630      	mov	r0, r6
   1e19c:	f7ff feff 	bl	1df9e <net_byte_to_hex>
   1e1a0:	4606      	mov	r6, r0
		needcolon = true;
   1e1a2:	2501      	movs	r5, #1
   1e1a4:	e7cd      	b.n	1e142 <net_addr_ntop+0x116>
				*ptr++ = (char) (bl - 10 + 'a');
   1e1a6:	3557      	adds	r5, #87	; 0x57
   1e1a8:	7035      	strb	r5, [r6, #0]
   1e1aa:	3601      	adds	r6, #1
		needcolon = true;
   1e1ac:	2501      	movs	r5, #1
   1e1ae:	e7c8      	b.n	1e142 <net_addr_ntop+0x116>
	if (!(ptr - dst)) {
   1e1b0:	9b02      	ldr	r3, [sp, #8]
   1e1b2:	429e      	cmp	r6, r3
   1e1b4:	d00f      	beq.n	1e1d6 <net_addr_ntop+0x1aa>
	if (family == AF_INET) {
   1e1b6:	9b03      	ldr	r3, [sp, #12]
   1e1b8:	2b02      	cmp	r3, #2
   1e1ba:	d005      	beq.n	1e1c8 <net_addr_ntop+0x19c>
		*ptr = '\0';
   1e1bc:	2300      	movs	r3, #0
   1e1be:	7033      	strb	r3, [r6, #0]
	return dst;
   1e1c0:	9802      	ldr	r0, [sp, #8]
}
   1e1c2:	b007      	add	sp, #28
   1e1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*(ptr - 1) = '\0';
   1e1c8:	2300      	movs	r3, #0
   1e1ca:	f806 3c01 	strb.w	r3, [r6, #-1]
	return dst;
   1e1ce:	9802      	ldr	r0, [sp, #8]
   1e1d0:	e7f7      	b.n	1e1c2 <net_addr_ntop+0x196>
		return NULL;
   1e1d2:	2000      	movs	r0, #0
   1e1d4:	e7f5      	b.n	1e1c2 <net_addr_ntop+0x196>
		return NULL;
   1e1d6:	2000      	movs	r0, #0
   1e1d8:	e7f3      	b.n	1e1c2 <net_addr_ntop+0x196>

0001e1da <net_addr_pton>:
{
   1e1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e1de:	b082      	sub	sp, #8
   1e1e0:	460d      	mov	r5, r1
   1e1e2:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1e1e4:	2802      	cmp	r0, #2
   1e1e6:	d010      	beq.n	1e20a <net_addr_pton+0x30>
	} else if (family == AF_INET6) {
   1e1e8:	280a      	cmp	r0, #10
   1e1ea:	f040 80c6 	bne.w	1e37a <net_addr_pton+0x1a0>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1e1ee:	212e      	movs	r1, #46	; 0x2e
   1e1f0:	4628      	mov	r0, r5
   1e1f2:	f00c fc59 	bl	2aaa8 <strchr>
   1e1f6:	b378      	cbz	r0, 1e258 <net_addr_pton+0x7e>
   1e1f8:	2706      	movs	r7, #6
		if (*src == ':') {
   1e1fa:	782b      	ldrb	r3, [r5, #0]
   1e1fc:	2b3a      	cmp	r3, #58	; 0x3a
   1e1fe:	d02d      	beq.n	1e25c <net_addr_pton+0x82>
		len = strlen(src);
   1e200:	4628      	mov	r0, r5
   1e202:	f7e2 fa7d 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1e206:	2300      	movs	r3, #0
   1e208:	e02b      	b.n	1e262 <net_addr_pton+0x88>
		len = strlen(src);
   1e20a:	4608      	mov	r0, r1
   1e20c:	f7e2 fa78 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1e210:	2300      	movs	r3, #0
   1e212:	e000      	b.n	1e216 <net_addr_pton+0x3c>
   1e214:	3301      	adds	r3, #1
   1e216:	4283      	cmp	r3, r0
   1e218:	d20a      	bcs.n	1e230 <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e21a:	5ce9      	ldrb	r1, [r5, r3]
   1e21c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1e220:	b2d2      	uxtb	r2, r2
   1e222:	2a09      	cmp	r2, #9
   1e224:	d9f6      	bls.n	1e214 <net_addr_pton+0x3a>
   1e226:	292e      	cmp	r1, #46	; 0x2e
   1e228:	d0f4      	beq.n	1e214 <net_addr_pton+0x3a>
				return -EINVAL;
   1e22a:	f06f 0015 	mvn.w	r0, #21
   1e22e:	e0a9      	b.n	1e384 <net_addr_pton+0x1aa>
		memset(addr, 0, sizeof(struct in_addr));
   1e230:	2204      	movs	r2, #4
   1e232:	2100      	movs	r1, #0
   1e234:	4630      	mov	r0, r6
   1e236:	f00c fb3f 	bl	2a8b8 <memset>
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e23a:	2400      	movs	r4, #0
   1e23c:	e008      	b.n	1e250 <net_addr_pton+0x76>
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1e23e:	220a      	movs	r2, #10
   1e240:	a901      	add	r1, sp, #4
   1e242:	4628      	mov	r0, r5
   1e244:	f00d f890 	bl	2b368 <strtol>
   1e248:	5530      	strb	r0, [r6, r4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e24a:	3401      	adds	r4, #1
			src = ++endptr;
   1e24c:	9d01      	ldr	r5, [sp, #4]
   1e24e:	3501      	adds	r5, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e250:	2c03      	cmp	r4, #3
   1e252:	d9f4      	bls.n	1e23e <net_addr_pton+0x64>
	return 0;
   1e254:	2000      	movs	r0, #0
   1e256:	e095      	b.n	1e384 <net_addr_pton+0x1aa>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1e258:	2708      	movs	r7, #8
   1e25a:	e7ce      	b.n	1e1fa <net_addr_pton+0x20>
			src++;
   1e25c:	3501      	adds	r5, #1
   1e25e:	e7cf      	b.n	1e200 <net_addr_pton+0x26>
		for (i = 0; i < len; i++) {
   1e260:	3301      	adds	r3, #1
   1e262:	4283      	cmp	r3, r0
   1e264:	da16      	bge.n	1e294 <net_addr_pton+0xba>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e266:	5ce9      	ldrb	r1, [r5, r3]
   1e268:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1e26c:	b2d2      	uxtb	r2, r2
   1e26e:	2a09      	cmp	r2, #9
   1e270:	d9f6      	bls.n	1e260 <net_addr_pton+0x86>
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1e272:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1e276:	b2d2      	uxtb	r2, r2
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e278:	2a05      	cmp	r2, #5
   1e27a:	d9f1      	bls.n	1e260 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1e27c:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1e280:	b2d2      	uxtb	r2, r2
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1e282:	2a05      	cmp	r2, #5
   1e284:	d9ec      	bls.n	1e260 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1e286:	292e      	cmp	r1, #46	; 0x2e
   1e288:	d0ea      	beq.n	1e260 <net_addr_pton+0x86>
			    src[i] != '.' && src[i] != ':')
   1e28a:	293a      	cmp	r1, #58	; 0x3a
   1e28c:	d0e8      	beq.n	1e260 <net_addr_pton+0x86>
				return -EINVAL;
   1e28e:	f06f 0015 	mvn.w	r0, #21
   1e292:	e077      	b.n	1e384 <net_addr_pton+0x1aa>
   1e294:	2400      	movs	r4, #0
   1e296:	e001      	b.n	1e29c <net_addr_pton+0xc2>
				src++;
   1e298:	3501      	adds	r5, #1
		for (i = 0; i < expected_groups; i++) {
   1e29a:	3401      	adds	r4, #1
   1e29c:	42bc      	cmp	r4, r7
   1e29e:	da3c      	bge.n	1e31a <net_addr_pton+0x140>
			if (!src || *src == '\0') {
   1e2a0:	2d00      	cmp	r5, #0
   1e2a2:	d06d      	beq.n	1e380 <net_addr_pton+0x1a6>
   1e2a4:	782b      	ldrb	r3, [r5, #0]
   1e2a6:	2b00      	cmp	r3, #0
   1e2a8:	d06f      	beq.n	1e38a <net_addr_pton+0x1b0>
			if (*src != ':') {
   1e2aa:	2b3a      	cmp	r3, #58	; 0x3a
   1e2ac:	d023      	beq.n	1e2f6 <net_addr_pton+0x11c>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1e2ae:	2210      	movs	r2, #16
   1e2b0:	2100      	movs	r1, #0
   1e2b2:	4628      	mov	r0, r5
   1e2b4:	f00d f858 	bl	2b368 <strtol>
   1e2b8:	f3c0 2807 	ubfx	r8, r0, #8, #8
   1e2bc:	2210      	movs	r2, #16
   1e2be:	2100      	movs	r1, #0
   1e2c0:	4628      	mov	r0, r5
   1e2c2:	f00d f851 	bl	2b368 <strtol>
   1e2c6:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
   1e2ca:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
				src = strchr(src, ':');
   1e2ce:	213a      	movs	r1, #58	; 0x3a
   1e2d0:	4628      	mov	r0, r5
   1e2d2:	f00c fbe9 	bl	2aaa8 <strchr>
				if (!src && i < expected_groups - 1) {
   1e2d6:	4605      	mov	r5, r0
   1e2d8:	2800      	cmp	r0, #0
   1e2da:	d1dd      	bne.n	1e298 <net_addr_pton+0xbe>
   1e2dc:	1e7b      	subs	r3, r7, #1
   1e2de:	429c      	cmp	r4, r3
   1e2e0:	dada      	bge.n	1e298 <net_addr_pton+0xbe>
					return -EINVAL;
   1e2e2:	f06f 0015 	mvn.w	r0, #21
   1e2e6:	e04d      	b.n	1e384 <net_addr_pton+0x1aa>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1e2e8:	eb06 0244 	add.w	r2, r6, r4, lsl #1
   1e2ec:	2300      	movs	r3, #0
   1e2ee:	f806 3014 	strb.w	r3, [r6, r4, lsl #1]
   1e2f2:	7053      	strb	r3, [r2, #1]
			for (; i < expected_groups; i++) {
   1e2f4:	3401      	adds	r4, #1
   1e2f6:	42bc      	cmp	r4, r7
   1e2f8:	dbf6      	blt.n	1e2e8 <net_addr_pton+0x10e>
			tmp = strrchr(src, ':');
   1e2fa:	213a      	movs	r1, #58	; 0x3a
   1e2fc:	4628      	mov	r0, r5
   1e2fe:	f00c fd29 	bl	2ad54 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1e302:	4285      	cmp	r5, r0
   1e304:	d003      	beq.n	1e30e <net_addr_pton+0x134>
			if (expected_groups == 6) {
   1e306:	2f06      	cmp	r7, #6
   1e308:	d00b      	beq.n	1e322 <net_addr_pton+0x148>
			i = expected_groups - 1;
   1e30a:	1e7c      	subs	r4, r7, #1
   1e30c:	e00f      	b.n	1e32e <net_addr_pton+0x154>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1e30e:	2f06      	cmp	r7, #6
   1e310:	d002      	beq.n	1e318 <net_addr_pton+0x13e>
   1e312:	786b      	ldrb	r3, [r5, #1]
   1e314:	2b00      	cmp	r3, #0
   1e316:	d1f6      	bne.n	1e306 <net_addr_pton+0x12c>
				src++;
   1e318:	3501      	adds	r5, #1
		if (expected_groups == 6) {
   1e31a:	2f06      	cmp	r7, #6
   1e31c:	d029      	beq.n	1e372 <net_addr_pton+0x198>
	return 0;
   1e31e:	2000      	movs	r0, #0
   1e320:	e030      	b.n	1e384 <net_addr_pton+0x1aa>
				tmp--;
   1e322:	3801      	subs	r0, #1
   1e324:	e7f1      	b.n	1e30a <net_addr_pton+0x130>
			} while (tmp-- != src);
   1e326:	1e43      	subs	r3, r0, #1
   1e328:	4285      	cmp	r5, r0
   1e32a:	d005      	beq.n	1e338 <net_addr_pton+0x15e>
   1e32c:	4618      	mov	r0, r3
				if (*tmp == ':') {
   1e32e:	7803      	ldrb	r3, [r0, #0]
   1e330:	2b3a      	cmp	r3, #58	; 0x3a
   1e332:	d1f8      	bne.n	1e326 <net_addr_pton+0x14c>
					i--;
   1e334:	3c01      	subs	r4, #1
   1e336:	e7f6      	b.n	1e326 <net_addr_pton+0x14c>
			src++;
   1e338:	3501      	adds	r5, #1
   1e33a:	e7ae      	b.n	1e29a <net_addr_pton+0xc0>
				src++;
   1e33c:	3501      	adds	r5, #1
			for (i = 0; i < 4; i++) {
   1e33e:	3401      	adds	r4, #1
   1e340:	2c03      	cmp	r4, #3
   1e342:	dc18      	bgt.n	1e376 <net_addr_pton+0x19c>
				if (!src || !*src) {
   1e344:	b325      	cbz	r5, 1e390 <net_addr_pton+0x1b6>
   1e346:	782b      	ldrb	r3, [r5, #0]
   1e348:	b32b      	cbz	r3, 1e396 <net_addr_pton+0x1bc>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1e34a:	f104 070c 	add.w	r7, r4, #12
   1e34e:	220a      	movs	r2, #10
   1e350:	2100      	movs	r1, #0
   1e352:	4628      	mov	r0, r5
   1e354:	f00d f808 	bl	2b368 <strtol>
   1e358:	55f0      	strb	r0, [r6, r7]
				src = strchr(src, '.');
   1e35a:	212e      	movs	r1, #46	; 0x2e
   1e35c:	4628      	mov	r0, r5
   1e35e:	f00c fba3 	bl	2aaa8 <strchr>
				if (!src && i < 3) {
   1e362:	4605      	mov	r5, r0
   1e364:	2800      	cmp	r0, #0
   1e366:	d1e9      	bne.n	1e33c <net_addr_pton+0x162>
   1e368:	2c02      	cmp	r4, #2
   1e36a:	dce7      	bgt.n	1e33c <net_addr_pton+0x162>
					return -EINVAL;
   1e36c:	f06f 0015 	mvn.w	r0, #21
   1e370:	e008      	b.n	1e384 <net_addr_pton+0x1aa>
   1e372:	2400      	movs	r4, #0
   1e374:	e7e4      	b.n	1e340 <net_addr_pton+0x166>
	return 0;
   1e376:	2000      	movs	r0, #0
   1e378:	e004      	b.n	1e384 <net_addr_pton+0x1aa>
		return -EINVAL;
   1e37a:	f06f 0015 	mvn.w	r0, #21
   1e37e:	e001      	b.n	1e384 <net_addr_pton+0x1aa>
				return -EINVAL;
   1e380:	f06f 0015 	mvn.w	r0, #21
}
   1e384:	b002      	add	sp, #8
   1e386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -EINVAL;
   1e38a:	f06f 0015 	mvn.w	r0, #21
   1e38e:	e7f9      	b.n	1e384 <net_addr_pton+0x1aa>
					return -EINVAL;
   1e390:	f06f 0015 	mvn.w	r0, #21
   1e394:	e7f6      	b.n	1e384 <net_addr_pton+0x1aa>
   1e396:	f06f 0015 	mvn.w	r0, #21
   1e39a:	e7f3      	b.n	1e384 <net_addr_pton+0x1aa>

0001e39c <parse_ipv6>:
#endif /* CONFIG_NET_IPV6 || CONFIG_NET_IPV4 */

#if defined(CONFIG_NET_IPV6)
static bool parse_ipv6(const char *str, size_t str_len,
		       struct sockaddr *addr, bool has_port)
{
   1e39c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e3a0:	b08f      	sub	sp, #60	; 0x3c
   1e3a2:	4605      	mov	r5, r0
   1e3a4:	4688      	mov	r8, r1
   1e3a6:	4617      	mov	r7, r2
   1e3a8:	461e      	mov	r6, r3
	struct in6_addr *addr6;
	char ipaddr[INET6_ADDRSTRLEN + 1];
	int end, len, ret, i;
	u16_t port;

	len = min(INET6_ADDRSTRLEN, str_len);
   1e3aa:	460c      	mov	r4, r1
   1e3ac:	292e      	cmp	r1, #46	; 0x2e
   1e3ae:	bf28      	it	cs
   1e3b0:	242e      	movcs	r4, #46	; 0x2e

	for (i = 0; i < len; i++) {
   1e3b2:	2300      	movs	r3, #0
   1e3b4:	42a3      	cmp	r3, r4
   1e3b6:	da04      	bge.n	1e3c2 <parse_ipv6+0x26>
		if (!str[i]) {
   1e3b8:	5cea      	ldrb	r2, [r5, r3]
   1e3ba:	b10a      	cbz	r2, 1e3c0 <parse_ipv6+0x24>
	for (i = 0; i < len; i++) {
   1e3bc:	3301      	adds	r3, #1
   1e3be:	e7f9      	b.n	1e3b4 <parse_ipv6+0x18>
			len = i;
   1e3c0:	461c      	mov	r4, r3
			break;
		}
	}

	if (has_port) {
   1e3c2:	b18e      	cbz	r6, 1e3e8 <parse_ipv6+0x4c>
		/* IPv6 address with port number */
		ptr = memchr(str, ']', len);
   1e3c4:	4622      	mov	r2, r4
   1e3c6:	215d      	movs	r1, #93	; 0x5d
   1e3c8:	4628      	mov	r0, r5
   1e3ca:	f7e1 ff29 	bl	220 <memchr>
		if (!ptr) {
   1e3ce:	4681      	mov	r9, r0
   1e3d0:	2800      	cmp	r0, #0
   1e3d2:	d043      	beq.n	1e45c <parse_ipv6+0xc0>
			return false;
		}

		end = min(len, ptr - (str + 1));
   1e3d4:	1c69      	adds	r1, r5, #1
   1e3d6:	1a43      	subs	r3, r0, r1
   1e3d8:	429c      	cmp	r4, r3
   1e3da:	bfa8      	it	ge
   1e3dc:	461c      	movge	r4, r3
		memcpy(ipaddr, str + 1, end);
   1e3de:	4622      	mov	r2, r4
   1e3e0:	a802      	add	r0, sp, #8
   1e3e2:	f7e1 ff6d 	bl	2c0 <memcpy>
   1e3e6:	e006      	b.n	1e3f6 <parse_ipv6+0x5a>
	} else {
		end = len;
		memcpy(ipaddr, str, end);
   1e3e8:	4622      	mov	r2, r4
   1e3ea:	4629      	mov	r1, r5
   1e3ec:	a802      	add	r0, sp, #8
   1e3ee:	f7e1 ff67 	bl	2c0 <memcpy>
	char *ptr = NULL;
   1e3f2:	f04f 0900 	mov.w	r9, #0
	}

	ipaddr[end] = '\0';
   1e3f6:	2200      	movs	r2, #0
   1e3f8:	ab0e      	add	r3, sp, #56	; 0x38
   1e3fa:	4423      	add	r3, r4
   1e3fc:	f803 2c30 	strb.w	r2, [r3, #-48]

	addr6 = &net_sin6(addr)->sin6_addr;

	ret = net_addr_pton(AF_INET6, ipaddr, addr6);
   1e400:	1d3a      	adds	r2, r7, #4
   1e402:	a902      	add	r1, sp, #8
   1e404:	200a      	movs	r0, #10
   1e406:	f7ff fee8 	bl	1e1da <net_addr_pton>
	if (ret < 0) {
   1e40a:	2800      	cmp	r0, #0
   1e40c:	db28      	blt.n	1e460 <parse_ipv6+0xc4>
		return false;
	}

	net_sin6(addr)->sin6_family = AF_INET6;
   1e40e:	230a      	movs	r3, #10
   1e410:	803b      	strh	r3, [r7, #0]

	if (!has_port) {
   1e412:	b33e      	cbz	r6, 1e464 <parse_ipv6+0xc8>
		return true;
	}

	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   1e414:	f109 0301 	add.w	r3, r9, #1
   1e418:	4445      	add	r5, r8
   1e41a:	42ab      	cmp	r3, r5
   1e41c:	d223      	bcs.n	1e466 <parse_ipv6+0xca>
   1e41e:	f899 3001 	ldrb.w	r3, [r9, #1]
   1e422:	2b3a      	cmp	r3, #58	; 0x3a
   1e424:	d11f      	bne.n	1e466 <parse_ipv6+0xca>
		len = str_len - end;
   1e426:	eba8 0404 	sub.w	r4, r8, r4

		/* Re-use the ipaddr buf for port conversion */
		memcpy(ipaddr, ptr + 2, len);
   1e42a:	4622      	mov	r2, r4
   1e42c:	f109 0102 	add.w	r1, r9, #2
   1e430:	a802      	add	r0, sp, #8
   1e432:	f7e1 ff45 	bl	2c0 <memcpy>
		ipaddr[len] = '\0';
   1e436:	ab0e      	add	r3, sp, #56	; 0x38
   1e438:	441c      	add	r4, r3
   1e43a:	2300      	movs	r3, #0
   1e43c:	f804 3c30 	strb.w	r3, [r4, #-48]

		ret = convert_port(ipaddr, &port);
   1e440:	f10d 0106 	add.w	r1, sp, #6
   1e444:	a802      	add	r0, sp, #8
   1e446:	f7ff fd8a 	bl	1df5e <convert_port>
		if (!ret) {
   1e44a:	4606      	mov	r6, r0
   1e44c:	b158      	cbz	r0, 1e466 <parse_ipv6+0xca>
			return false;
		}

		net_sin6(addr)->sin6_port = htons(port);
   1e44e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1e452:	0a13      	lsrs	r3, r2, #8
   1e454:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e458:	807b      	strh	r3, [r7, #2]
   1e45a:	e004      	b.n	1e466 <parse_ipv6+0xca>
			return false;
   1e45c:	2600      	movs	r6, #0
   1e45e:	e002      	b.n	1e466 <parse_ipv6+0xca>
		return false;
   1e460:	2600      	movs	r6, #0
   1e462:	e000      	b.n	1e466 <parse_ipv6+0xca>
		return true;
   1e464:	2601      	movs	r6, #1
			net_addr_ntop(AF_INET6, addr6,
				      ipaddr, sizeof(ipaddr) - 1));
	}

	return true;
}
   1e466:	4630      	mov	r0, r6
   1e468:	b00f      	add	sp, #60	; 0x3c
   1e46a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001e46e <net_calc_chksum>:
	return pkt->family;
   1e46e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1e472:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1e476:	2b0a      	cmp	r3, #10
   1e478:	d001      	beq.n	1e47e <net_calc_chksum+0x10>
		return 0;
   1e47a:	2000      	movs	r0, #0
   1e47c:	4770      	bx	lr
{
   1e47e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e480:	b085      	sub	sp, #20
   1e482:	4604      	mov	r4, r0
	return pkt->frags->data;
   1e484:	6885      	ldr	r5, [r0, #8]
   1e486:	68a8      	ldr	r0, [r5, #8]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1e488:	7902      	ldrb	r2, [r0, #4]
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1e48a:	7943      	ldrb	r3, [r0, #5]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1e48c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1e490:	b29b      	uxth	r3, r3
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1e492:	f894 703b 	ldrb.w	r7, [r4, #59]	; 0x3b
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1e496:	1bdb      	subs	r3, r3, r7
		sum = calc_chksum(upper_layer_len + proto,
   1e498:	fa11 f383 	uxtah	r3, r1, r3
   1e49c:	2220      	movs	r2, #32
   1e49e:	f100 0108 	add.w	r1, r0, #8
   1e4a2:	b298      	uxth	r0, r3
   1e4a4:	f7ff fd3c 	bl	1df20 <calc_chksum>
   1e4a8:	4606      	mov	r6, r0
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   1e4aa:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
	return net_frag_read(frag, offset, pos, len, NULL);
   1e4ae:	2300      	movs	r3, #0
   1e4b0:	9300      	str	r3, [sp, #0]
   1e4b2:	f10d 020e 	add.w	r2, sp, #14
   1e4b6:	4439      	add	r1, r7
   1e4b8:	4628      	mov	r0, r5
   1e4ba:	f7ff faec 	bl	1da96 <net_frag_read>
	if (!frag) {
   1e4be:	4605      	mov	r5, r0
   1e4c0:	b318      	cbz	r0, 1e50a <net_calc_chksum+0x9c>
	ptr = frag->data + offset;
   1e4c2:	6881      	ldr	r1, [r0, #8]
   1e4c4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e4c8:	4419      	add	r1, r3
	len = frag->len - offset;
   1e4ca:	8984      	ldrh	r4, [r0, #12]
   1e4cc:	1ae4      	subs	r4, r4, r3
   1e4ce:	b224      	sxth	r4, r4
   1e4d0:	e003      	b.n	1e4da <net_calc_chksum+0x6c>
			len = frag->len - 1;
   1e4d2:	89ac      	ldrh	r4, [r5, #12]
   1e4d4:	3c01      	subs	r4, #1
   1e4d6:	b224      	sxth	r4, r4
			ptr++;
   1e4d8:	3101      	adds	r1, #1
	while (frag) {
   1e4da:	b1bd      	cbz	r5, 1e50c <net_calc_chksum+0x9e>
		sum = calc_chksum(sum, ptr, len);
   1e4dc:	b2a4      	uxth	r4, r4
   1e4de:	4622      	mov	r2, r4
   1e4e0:	4630      	mov	r0, r6
   1e4e2:	f7ff fd1d 	bl	1df20 <calc_chksum>
   1e4e6:	4606      	mov	r6, r0
		frag = frag->frags;
   1e4e8:	682d      	ldr	r5, [r5, #0]
		if (!frag) {
   1e4ea:	b17d      	cbz	r5, 1e50c <net_calc_chksum+0x9e>
		ptr = frag->data;
   1e4ec:	68a9      	ldr	r1, [r5, #8]
		if (len % 2) {
   1e4ee:	f014 0f01 	tst.w	r4, #1
   1e4f2:	d007      	beq.n	1e504 <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   1e4f4:	780b      	ldrb	r3, [r1, #0]
			sum += tmp;
   1e4f6:	441e      	add	r6, r3
   1e4f8:	b2b6      	uxth	r6, r6
			if (sum < tmp) {
   1e4fa:	42b3      	cmp	r3, r6
   1e4fc:	d9e9      	bls.n	1e4d2 <net_calc_chksum+0x64>
				sum++;
   1e4fe:	3601      	adds	r6, #1
   1e500:	b2b6      	uxth	r6, r6
   1e502:	e7e6      	b.n	1e4d2 <net_calc_chksum+0x64>
			len = frag->len;
   1e504:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
   1e508:	e7e7      	b.n	1e4da <net_calc_chksum+0x6c>
		return 0;
   1e50a:	2600      	movs	r6, #0
	sum = (sum == 0) ? 0xffff : htons(sum);
   1e50c:	b91e      	cbnz	r6, 1e516 <net_calc_chksum+0xa8>
   1e50e:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   1e512:	b005      	add	sp, #20
   1e514:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sum = (sum == 0) ? 0xffff : htons(sum);
   1e516:	0a30      	lsrs	r0, r6, #8
   1e518:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   1e51c:	b280      	uxth	r0, r0
   1e51e:	e7f8      	b.n	1e512 <net_calc_chksum+0xa4>

0001e520 <net_header_fits>:
	if (hdr && hdr > pkt->frags->data &&
   1e520:	460b      	mov	r3, r1
   1e522:	b151      	cbz	r1, 1e53a <net_header_fits+0x1a>
   1e524:	6880      	ldr	r0, [r0, #8]
   1e526:	6881      	ldr	r1, [r0, #8]
   1e528:	428b      	cmp	r3, r1
   1e52a:	d908      	bls.n	1e53e <net_header_fits+0x1e>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   1e52c:	4413      	add	r3, r2
   1e52e:	8982      	ldrh	r2, [r0, #12]
   1e530:	4411      	add	r1, r2
	if (hdr && hdr > pkt->frags->data &&
   1e532:	428b      	cmp	r3, r1
   1e534:	d905      	bls.n	1e542 <net_header_fits+0x22>
	return false;
   1e536:	2000      	movs	r0, #0
   1e538:	4770      	bx	lr
   1e53a:	2000      	movs	r0, #0
   1e53c:	4770      	bx	lr
   1e53e:	2000      	movs	r0, #0
   1e540:	4770      	bx	lr
		return true;
   1e542:	2001      	movs	r0, #1
}
   1e544:	4770      	bx	lr

0001e546 <net_ipaddr_parse>:

bool net_ipaddr_parse(const char *str, size_t str_len, struct sockaddr *addr)
{
	int i, count;

	if (!str || str_len == 0) {
   1e546:	b1d8      	cbz	r0, 1e580 <net_ipaddr_parse+0x3a>
{
   1e548:	b538      	push	{r3, r4, r5, lr}
	if (!str || str_len == 0) {
   1e54a:	b1d9      	cbz	r1, 1e584 <net_ipaddr_parse+0x3e>
		return false;
	}

	/* We cannot accept empty string here */
	if (*str == '\0') {
   1e54c:	7804      	ldrb	r4, [r0, #0]
   1e54e:	b1dc      	cbz	r4, 1e588 <net_ipaddr_parse+0x42>
		return false;
	}

	if (*str == '[') {
   1e550:	2c5b      	cmp	r4, #91	; 0x5b
   1e552:	d002      	beq.n	1e55a <net_ipaddr_parse+0x14>
   1e554:	2500      	movs	r5, #0
   1e556:	462b      	mov	r3, r5
   1e558:	e004      	b.n	1e564 <net_ipaddr_parse+0x1e>
#if defined(CONFIG_NET_IPV6)
		return parse_ipv6(str, str_len, addr, true);
   1e55a:	2301      	movs	r3, #1
   1e55c:	f7ff ff1e 	bl	1e39c <parse_ipv6>
   1e560:	bd38      	pop	{r3, r4, r5, pc}
#else
		return false;
#endif /* CONFIG_NET_IPV6 */
	}

	for (count = i = 0; str[i] && i < str_len; i++) {
   1e562:	3301      	adds	r3, #1
   1e564:	5cc4      	ldrb	r4, [r0, r3]
   1e566:	b12c      	cbz	r4, 1e574 <net_ipaddr_parse+0x2e>
   1e568:	4299      	cmp	r1, r3
   1e56a:	d903      	bls.n	1e574 <net_ipaddr_parse+0x2e>
		if (str[i] == ':') {
   1e56c:	2c3a      	cmp	r4, #58	; 0x3a
   1e56e:	d1f8      	bne.n	1e562 <net_ipaddr_parse+0x1c>
			count++;
   1e570:	3501      	adds	r5, #1
   1e572:	e7f6      	b.n	1e562 <net_ipaddr_parse+0x1c>
		}
	}

	if (count == 1) {
   1e574:	2d01      	cmp	r5, #1
   1e576:	d009      	beq.n	1e58c <net_ipaddr_parse+0x46>
#if defined(CONFIG_NET_IPV4) && !defined(CONFIG_NET_IPV6)
	return parse_ipv4(str, str_len, addr, false);
#endif

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	return parse_ipv6(str, str_len, addr, false);
   1e578:	2300      	movs	r3, #0
   1e57a:	f7ff ff0f 	bl	1e39c <parse_ipv6>
   1e57e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1e580:	2000      	movs	r0, #0
   1e582:	4770      	bx	lr
   1e584:	2000      	movs	r0, #0
   1e586:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1e588:	2000      	movs	r0, #0
   1e58a:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1e58c:	2000      	movs	r0, #0
#endif
}
   1e58e:	bd38      	pop	{r3, r4, r5, pc}

0001e590 <net_bt_reserve>:
{
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	return 0;
}
   1e590:	2000      	movs	r0, #0
   1e592:	4770      	bx	lr

0001e594 <net_bt_enable>:
	return iface->dev;
   1e594:	6803      	ldr	r3, [r0, #0]

static int net_bt_enable(struct net_if *iface, bool state)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e596:	689b      	ldr	r3, [r3, #8]

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1e598:	b129      	cbz	r1, 1e5a6 <net_bt_enable+0x12>
   1e59a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1e59e:	2b03      	cmp	r3, #3
   1e5a0:	d103      	bne.n	1e5aa <net_bt_enable+0x16>
		return -ENETDOWN;
	}

	return 0;
   1e5a2:	2000      	movs	r0, #0
   1e5a4:	4770      	bx	lr
   1e5a6:	2000      	movs	r0, #0
   1e5a8:	4770      	bx	lr
		return -ENETDOWN;
   1e5aa:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1e5ae:	4770      	bx	lr

0001e5b0 <ipsp_accept>:

static int ipsp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
	NET_DBG("Incoming conn %p", conn);

	if (bt_context_data.ipsp_chan.chan.conn) {
   1e5b0:	4b04      	ldr	r3, [pc, #16]	; (1e5c4 <ipsp_accept+0x14>)
   1e5b2:	685b      	ldr	r3, [r3, #4]
   1e5b4:	b91b      	cbnz	r3, 1e5be <ipsp_accept+0xe>
		NET_ERR("No channels available");
		return -ENOMEM;
	}

	*chan = &bt_context_data.ipsp_chan.chan;
   1e5b6:	4b04      	ldr	r3, [pc, #16]	; (1e5c8 <ipsp_accept+0x18>)
   1e5b8:	600b      	str	r3, [r1, #0]

	return 0;
   1e5ba:	2000      	movs	r0, #0
   1e5bc:	4770      	bx	lr
		return -ENOMEM;
   1e5be:	f06f 000b 	mvn.w	r0, #11
}
   1e5c2:	4770      	bx	lr
   1e5c4:	2000c328 	.word	0x2000c328
   1e5c8:	2000c32c 	.word	0x2000c32c

0001e5cc <net_bt_send>:
{
   1e5cc:	b538      	push	{r3, r4, r5, lr}
   1e5ce:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e5d0:	689d      	ldr	r5, [r3, #8]
	return pkt->family;
   1e5d2:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1e5d6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) != AF_INET6) {
   1e5da:	2b0a      	cmp	r3, #10
   1e5dc:	d001      	beq.n	1e5e2 <net_bt_send+0x16>
		return NET_DROP;
   1e5de:	2002      	movs	r0, #2
   1e5e0:	bd38      	pop	{r3, r4, r5, pc}
   1e5e2:	460c      	mov	r4, r1
	if (!net_6lo_compress(pkt, true, NULL)) {
   1e5e4:	2200      	movs	r2, #0
   1e5e6:	2101      	movs	r1, #1
   1e5e8:	4620      	mov	r0, r4
   1e5ea:	f003 fe95 	bl	22318 <net_6lo_compress>
   1e5ee:	b908      	cbnz	r0, 1e5f4 <net_bt_send+0x28>
		return NET_DROP;
   1e5f0:	2002      	movs	r0, #2
}
   1e5f2:	bd38      	pop	{r3, r4, r5, pc}
	net_if_queue_tx(ctxt->iface, pkt);
   1e5f4:	6828      	ldr	r0, [r5, #0]
	k_fifo_put(&iface->tx_queue, pkt);
   1e5f6:	4621      	mov	r1, r4
   1e5f8:	3018      	adds	r0, #24
   1e5fa:	f00a fb13 	bl	28c24 <k_queue_append>
	return NET_OK;
   1e5fe:	2000      	movs	r0, #0
   1e600:	bd38      	pop	{r3, r4, r5, pc}

0001e602 <net_bt_recv>:
{
   1e602:	b508      	push	{r3, lr}
	if (!net_6lo_uncompress(pkt)) {
   1e604:	4608      	mov	r0, r1
   1e606:	f004 fad4 	bl	22bb2 <net_6lo_uncompress>
   1e60a:	b908      	cbnz	r0, 1e610 <net_bt_recv+0xe>
		return NET_DROP;
   1e60c:	2002      	movs	r0, #2
   1e60e:	bd08      	pop	{r3, pc}
	return NET_CONTINUE;
   1e610:	2001      	movs	r0, #1
}
   1e612:	bd08      	pop	{r3, pc}

0001e614 <connected>:
	return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
}

static void connected(struct bt_conn *conn, u8_t err)
{
	if (err) {
   1e614:	b951      	cbnz	r1, 1e62c <connected+0x18>
{
   1e616:	b508      	push	{r3, lr}
		NET_ERR("Failed to connect to %s (%u)\n", addr, err);
#endif
		return;
	}

	if (conn != default_conn) {
   1e618:	4b05      	ldr	r3, [pc, #20]	; (1e630 <connected+0x1c>)
   1e61a:	681b      	ldr	r3, [r3, #0]
   1e61c:	4283      	cmp	r3, r0
   1e61e:	d000      	beq.n	1e622 <connected+0xe>
   1e620:	bd08      	pop	{r3, pc}
		return;
	}

	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   1e622:	2223      	movs	r2, #35	; 0x23
   1e624:	4903      	ldr	r1, [pc, #12]	; (1e634 <connected+0x20>)
   1e626:	f7ea f905 	bl	8834 <bt_l2cap_chan_connect>
   1e62a:	e7f9      	b.n	1e620 <connected+0xc>
   1e62c:	4770      	bx	lr
   1e62e:	bf00      	nop
   1e630:	20002460 	.word	0x20002460
   1e634:	2000c32c 	.word	0x2000c32c

0001e638 <ipsp_recv>:
{
   1e638:	b570      	push	{r4, r5, r6, lr}
   1e63a:	4605      	mov	r5, r0
   1e63c:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1e63e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e642:	2000      	movs	r0, #0
   1e644:	f7ff f82e 	bl	1d6a4 <net_pkt_get_reserve_rx>
   1e648:	4604      	mov	r4, r0
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   1e64a:	f105 039c 	add.w	r3, r5, #156	; 0x9c
   1e64e:	6283      	str	r3, [r0, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   1e650:	2206      	movs	r2, #6
   1e652:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1e656:	2302      	movs	r3, #2
   1e658:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   1e65c:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
   1e660:	6201      	str	r1, [r0, #32]
	net_pkt_ll_src(pkt)->len = sizeof(ctxt->dst);
   1e662:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   1e666:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   1e66a:	4630      	mov	r0, r6
   1e66c:	f7fc fb42 	bl	1acf4 <net_buf_ref>
   1e670:	4601      	mov	r1, r0
   1e672:	4620      	mov	r0, r4
   1e674:	f7ff f8bb 	bl	1d7ee <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {
   1e678:	4621      	mov	r1, r4
   1e67a:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1e67e:	f7fc fd55 	bl	1b12c <net_recv_data>
   1e682:	2800      	cmp	r0, #0
   1e684:	db00      	blt.n	1e688 <ipsp_recv+0x50>
   1e686:	bd70      	pop	{r4, r5, r6, pc}
		net_pkt_unref(pkt);
   1e688:	4620      	mov	r0, r4
   1e68a:	f7ff f886 	bl	1d79a <net_pkt_unref>
}
   1e68e:	e7fa      	b.n	1e686 <ipsp_recv+0x4e>

0001e690 <ipsp_alloc_buf>:
{
   1e690:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   1e692:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e696:	2000      	movs	r0, #0
   1e698:	f7ff f818 	bl	1d6cc <net_pkt_get_reserve_rx_data>
}
   1e69c:	bd08      	pop	{r3, pc}
	...

0001e6a0 <ipsp_disconnected>:
{
   1e6a0:	b510      	push	{r4, lr}
   1e6a2:	4604      	mov	r4, r0
	net_if_down(ctxt->iface);
   1e6a4:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1e6a8:	f7fd fe92 	bl	1c3d0 <net_if_down>
	if (chan->conn != default_conn) {
   1e6ac:	6823      	ldr	r3, [r4, #0]
   1e6ae:	4a05      	ldr	r2, [pc, #20]	; (1e6c4 <ipsp_disconnected+0x24>)
   1e6b0:	6810      	ldr	r0, [r2, #0]
   1e6b2:	4283      	cmp	r3, r0
   1e6b4:	d000      	beq.n	1e6b8 <ipsp_disconnected+0x18>
   1e6b6:	bd10      	pop	{r4, pc}
	bt_conn_unref(default_conn);
   1e6b8:	f7e8 fe28 	bl	730c <bt_conn_unref>
	default_conn = NULL;
   1e6bc:	2200      	movs	r2, #0
   1e6be:	4b01      	ldr	r3, [pc, #4]	; (1e6c4 <ipsp_disconnected+0x24>)
   1e6c0:	601a      	str	r2, [r3, #0]
   1e6c2:	e7f8      	b.n	1e6b6 <ipsp_disconnected+0x16>
   1e6c4:	20002460 	.word	0x20002460

0001e6c8 <disconnected>:
			      L2CAP_IPSP_PSM);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   1e6c8:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_L2_BT)
	char addr[BT_ADDR_LE_STR_LEN];
#endif

	if (conn != default_conn) {
   1e6ca:	4b06      	ldr	r3, [pc, #24]	; (1e6e4 <disconnected+0x1c>)
   1e6cc:	681b      	ldr	r3, [r3, #0]
   1e6ce:	4283      	cmp	r3, r0
   1e6d0:	d000      	beq.n	1e6d4 <disconnected+0xc>
   1e6d2:	bd08      	pop	{r3, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

	NET_DBG("Disconnected: %s (reason %u)\n", addr, reason);
#endif

	bt_conn_unref(default_conn);
   1e6d4:	4618      	mov	r0, r3
   1e6d6:	f7e8 fe19 	bl	730c <bt_conn_unref>
	default_conn = NULL;
   1e6da:	2200      	movs	r2, #0
   1e6dc:	4b01      	ldr	r3, [pc, #4]	; (1e6e4 <disconnected+0x1c>)
   1e6de:	601a      	str	r2, [r3, #0]
   1e6e0:	e7f7      	b.n	1e6d2 <disconnected+0xa>
   1e6e2:	bf00      	nop
   1e6e4:	20002460 	.word	0x20002460

0001e6e8 <ipsp_connected>:
{
   1e6e8:	b570      	push	{r4, r5, r6, lr}
   1e6ea:	b08e      	sub	sp, #56	; 0x38
   1e6ec:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   1e6ee:	a909      	add	r1, sp, #36	; 0x24
   1e6f0:	6800      	ldr	r0, [r0, #0]
   1e6f2:	f7e8 ff41 	bl	7578 <bt_conn_get_info>
   1e6f6:	2800      	cmp	r0, #0
   1e6f8:	db06      	blt.n	1e708 <ipsp_connected+0x20>
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   1e6fa:	f104 069c 	add.w	r6, r4, #156	; 0x9c
   1e6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	src += length - 1;
   1e700:	3306      	adds	r3, #6
   1e702:	4631      	mov	r1, r6
   1e704:	2206      	movs	r2, #6
   1e706:	e008      	b.n	1e71a <ipsp_connected+0x32>
		bt_l2cap_chan_disconnect(chan);
   1e708:	4620      	mov	r0, r4
   1e70a:	f7ea f8b2 	bl	8872 <bt_l2cap_chan_disconnect>
   1e70e:	e05a      	b.n	1e7c6 <ipsp_connected+0xde>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e710:	7818      	ldrb	r0, [r3, #0]
   1e712:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1e714:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e716:	3b01      	subs	r3, #1
   1e718:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1e71a:	2a00      	cmp	r2, #0
   1e71c:	d1f8      	bne.n	1e710 <ipsp_connected+0x28>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   1e71e:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
   1e722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	src += length - 1;
   1e724:	3306      	adds	r3, #6
   1e726:	4608      	mov	r0, r1
   1e728:	2206      	movs	r2, #6
   1e72a:	e004      	b.n	1e736 <ipsp_connected+0x4e>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e72c:	781d      	ldrb	r5, [r3, #0]
   1e72e:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
   1e730:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e732:	3b01      	subs	r3, #1
   1e734:	3001      	adds	r0, #1
	for (; length > 0; length--) {
   1e736:	2a00      	cmp	r2, #0
   1e738:	d1f8      	bne.n	1e72c <ipsp_connected+0x44>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   1e73a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e73e:	f3bf 8f5b 	dmb	ish
   1e742:	68da      	ldr	r2, [r3, #12]
   1e744:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1e748:	f012 0f01 	tst.w	r2, #1
   1e74c:	d104      	bne.n	1e758 <ipsp_connected+0x70>
	iface->link_addr.addr = addr;
   1e74e:	611e      	str	r6, [r3, #16]
	iface->link_addr.len = len;
   1e750:	2206      	movs	r2, #6
   1e752:	751a      	strb	r2, [r3, #20]
	iface->link_addr.type = type;
   1e754:	2202      	movs	r2, #2
   1e756:	755a      	strb	r2, [r3, #21]
	ll.addr = ctxt->dst.val;
   1e758:	9107      	str	r1, [sp, #28]
	ll.len = sizeof(ctxt->dst.val);
   1e75a:	2306      	movs	r3, #6
   1e75c:	f88d 3020 	strb.w	r3, [sp, #32]
	ll.type = NET_LINK_BLUETOOTH;
   1e760:	2302      	movs	r3, #2
   1e762:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	addr->s6_addr[0] = 0xfe;
   1e766:	23fe      	movs	r3, #254	; 0xfe
   1e768:	f88d 300c 	strb.w	r3, [sp, #12]
	addr->s6_addr[1] = 0x80;
   1e76c:	2380      	movs	r3, #128	; 0x80
   1e76e:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1e772:	2300      	movs	r3, #0
   1e774:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1e778:	9304      	str	r3, [sp, #16]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1e77a:	2203      	movs	r2, #3
   1e77c:	a805      	add	r0, sp, #20
   1e77e:	f7e1 fd9f 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1e782:	23ff      	movs	r3, #255	; 0xff
   1e784:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   1e788:	23fe      	movs	r3, #254	; 0xfe
   1e78a:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e78e:	2203      	movs	r2, #3
   1e790:	9907      	ldr	r1, [sp, #28]
   1e792:	4411      	add	r1, r2
   1e794:	f10d 0019 	add.w	r0, sp, #25
   1e798:	f7e1 fd92 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1e79c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1e7a0:	2b02      	cmp	r3, #2
   1e7a2:	d012      	beq.n	1e7ca <ipsp_connected+0xe2>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1e7a4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1e7a8:	2b03      	cmp	r3, #3
   1e7aa:	d015      	beq.n	1e7d8 <ipsp_connected+0xf0>
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   1e7ac:	2305      	movs	r3, #5
   1e7ae:	9300      	str	r3, [sp, #0]
   1e7b0:	2300      	movs	r3, #0
   1e7b2:	aa07      	add	r2, sp, #28
   1e7b4:	a903      	add	r1, sp, #12
   1e7b6:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1e7ba:	f002 f903 	bl	209c4 <net_ipv6_nbr_add>
	net_if_up(ctxt->iface);
   1e7be:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1e7c2:	f7fd fdd1 	bl	1c368 <net_if_up>
}
   1e7c6:	b00e      	add	sp, #56	; 0x38
   1e7c8:	bd70      	pop	{r4, r5, r6, pc}
			addr->s6_addr[8] ^= 0x02;
   1e7ca:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1e7ce:	f083 0302 	eor.w	r3, r3, #2
   1e7d2:	f88d 3014 	strb.w	r3, [sp, #20]
   1e7d6:	e7e5      	b.n	1e7a4 <ipsp_connected+0xbc>
			addr->s6_addr[8] ^= 0x02;
   1e7d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1e7dc:	f083 0302 	eor.w	r3, r3, #2
   1e7e0:	f88d 3014 	strb.w	r3, [sp, #20]
   1e7e4:	e7e2      	b.n	1e7ac <ipsp_connected+0xc4>
	...

0001e7e8 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   1e7e8:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   1e7ea:	4804      	ldr	r0, [pc, #16]	; (1e7fc <net_bt_init+0x14>)
   1e7ec:	f7e8 fbb6 	bl	6f5c <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   1e7f0:	4803      	ldr	r0, [pc, #12]	; (1e800 <net_bt_init+0x18>)
   1e7f2:	f7e9 ffc5 	bl	8780 <bt_l2cap_server_register>

	return 0;
}
   1e7f6:	2000      	movs	r0, #0
   1e7f8:	bd08      	pop	{r3, pc}
   1e7fa:	bf00      	nop
   1e7fc:	2000c3dc 	.word	0x2000c3dc
   1e800:	2000c40c 	.word	0x2000c40c

0001e804 <bt_iface_send>:
{
   1e804:	b538      	push	{r3, r4, r5, lr}
	return iface->dev;
   1e806:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e808:	689c      	ldr	r4, [r3, #8]
	frags = pkt->frags;
   1e80a:	688d      	ldr	r5, [r1, #8]
	pkt->frags = NULL;
   1e80c:	2300      	movs	r3, #0
   1e80e:	608b      	str	r3, [r1, #8]
	net_pkt_unref(pkt);
   1e810:	4608      	mov	r0, r1
   1e812:	f7fe ffc2 	bl	1d79a <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1e816:	4629      	mov	r1, r5
   1e818:	1d20      	adds	r0, r4, #4
   1e81a:	f7ea f9bb 	bl	8b94 <bt_l2cap_chan_send>
}
   1e81e:	bd38      	pop	{r3, r4, r5, pc}

0001e820 <bt_iface_init>:
   1e820:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e822:	689b      	ldr	r3, [r3, #8]
	ctxt->iface = iface;
   1e824:	6018      	str	r0, [r3, #0]
	atomic_set_bit(iface->flags, NET_IF_POINTOPOINT);
   1e826:	300c      	adds	r0, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e828:	f3bf 8f5b 	dmb	ish
   1e82c:	e850 3f00 	ldrex	r3, [r0]
   1e830:	f043 0302 	orr.w	r3, r3, #2
   1e834:	e840 3200 	strex	r2, r3, [r0]
   1e838:	2a00      	cmp	r2, #0
   1e83a:	d1f7      	bne.n	1e82c <bt_iface_init+0xc>
   1e83c:	f3bf 8f5b 	dmb	ish
   1e840:	4770      	bx	lr
	...

0001e844 <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   1e844:	b510      	push	{r4, lr}
   1e846:	b086      	sub	sp, #24
   1e848:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   1e84a:	4913      	ldr	r1, [pc, #76]	; (1e898 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   1e84c:	4610      	mov	r0, r2
   1e84e:	f7e1 fddb 	bl	408 <strcmp>
   1e852:	b140      	cbz	r0, 1e866 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x22>
	} else if (!strcmp(data, "off")) {
   1e854:	4911      	ldr	r1, [pc, #68]	; (1e89c <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   1e856:	4620      	mov	r0, r4
   1e858:	f7e1 fdd6 	bl	408 <strcmp>
   1e85c:	b9c0      	cbnz	r0, 1e890 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4c>
		return bt_le_adv_stop();
   1e85e:	f7e8 f879 	bl	6954 <bt_le_adv_stop>
}
   1e862:	b006      	add	sp, #24
   1e864:	bd10      	pop	{r4, pc}
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1e866:	2300      	movs	r3, #0
   1e868:	9303      	str	r3, [sp, #12]
   1e86a:	9304      	str	r3, [sp, #16]
   1e86c:	9305      	str	r3, [sp, #20]
   1e86e:	2301      	movs	r3, #1
   1e870:	f88d 300c 	strb.w	r3, [sp, #12]
   1e874:	22a0      	movs	r2, #160	; 0xa0
   1e876:	f8ad 200e 	strh.w	r2, [sp, #14]
   1e87a:	22f0      	movs	r2, #240	; 0xf0
   1e87c:	f8ad 2010 	strh.w	r2, [sp, #16]
   1e880:	9300      	str	r3, [sp, #0]
   1e882:	4b07      	ldr	r3, [pc, #28]	; (1e8a0 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x5c>)
   1e884:	2202      	movs	r2, #2
   1e886:	4907      	ldr	r1, [pc, #28]	; (1e8a4 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x60>)
   1e888:	a803      	add	r0, sp, #12
   1e88a:	f7e7 ffb9 	bl	6800 <bt_le_adv_start>
   1e88e:	e7e8      	b.n	1e862 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
		return -EINVAL;
   1e890:	f06f 0015 	mvn.w	r0, #21
   1e894:	e7e5      	b.n	1e862 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
   1e896:	bf00      	nop
   1e898:	00031bc0 	.word	0x00031bc0
   1e89c:	00031bc4 	.word	0x00031bc4
   1e8a0:	00031bc8 	.word	0x00031bc8
   1e8a4:	00031bb0 	.word	0x00031bb0

0001e8a8 <net_icmpv6_register_handler>:
	node->next = list->head;
   1e8a8:	4b04      	ldr	r3, [pc, #16]	; (1e8bc <net_icmpv6_register_handler+0x14>)
   1e8aa:	681a      	ldr	r2, [r3, #0]
   1e8ac:	6002      	str	r2, [r0, #0]
	list->head = node;
   1e8ae:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   1e8b0:	685b      	ldr	r3, [r3, #4]
   1e8b2:	b103      	cbz	r3, 1e8b6 <net_icmpv6_register_handler+0xe>
   1e8b4:	4770      	bx	lr
		list->tail = list->head;
   1e8b6:	4b01      	ldr	r3, [pc, #4]	; (1e8bc <net_icmpv6_register_handler+0x14>)
   1e8b8:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   1e8ba:	e7fb      	b.n	1e8b4 <net_icmpv6_register_handler+0xc>
   1e8bc:	20002464 	.word	0x20002464

0001e8c0 <net_icmpv6_unregister_handler>:

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
   1e8c0:	4601      	mov	r1, r0
	return list->head;
   1e8c2:	4b10      	ldr	r3, [pc, #64]	; (1e904 <net_icmpv6_unregister_handler+0x44>)
   1e8c4:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   1e8c6:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1e8c8:	b1d3      	cbz	r3, 1e900 <net_icmpv6_unregister_handler+0x40>
		if (test == node) {
   1e8ca:	4299      	cmp	r1, r3
   1e8cc:	d002      	beq.n	1e8d4 <net_icmpv6_unregister_handler+0x14>
		prev = test;
   1e8ce:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1e8d0:	681b      	ldr	r3, [r3, #0]
   1e8d2:	e7f9      	b.n	1e8c8 <net_icmpv6_unregister_handler+0x8>
	if (!prev_node) {
   1e8d4:	b142      	cbz	r2, 1e8e8 <net_icmpv6_unregister_handler+0x28>
		prev_node->next = node->next;
   1e8d6:	6803      	ldr	r3, [r0, #0]
   1e8d8:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   1e8da:	4b0a      	ldr	r3, [pc, #40]	; (1e904 <net_icmpv6_unregister_handler+0x44>)
   1e8dc:	685b      	ldr	r3, [r3, #4]
   1e8de:	4298      	cmp	r0, r3
   1e8e0:	d00b      	beq.n	1e8fa <net_icmpv6_unregister_handler+0x3a>
	node->next = NULL;
   1e8e2:	2300      	movs	r3, #0
   1e8e4:	6003      	str	r3, [r0, #0]
   1e8e6:	4770      	bx	lr
		list->head = node->next;
   1e8e8:	6802      	ldr	r2, [r0, #0]
   1e8ea:	4b06      	ldr	r3, [pc, #24]	; (1e904 <net_icmpv6_unregister_handler+0x44>)
   1e8ec:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1e8ee:	685b      	ldr	r3, [r3, #4]
   1e8f0:	4298      	cmp	r0, r3
   1e8f2:	d1f6      	bne.n	1e8e2 <net_icmpv6_unregister_handler+0x22>
			list->tail = list->head;
   1e8f4:	4b03      	ldr	r3, [pc, #12]	; (1e904 <net_icmpv6_unregister_handler+0x44>)
   1e8f6:	605a      	str	r2, [r3, #4]
   1e8f8:	e7f3      	b.n	1e8e2 <net_icmpv6_unregister_handler+0x22>
			list->tail = prev_node;
   1e8fa:	4b02      	ldr	r3, [pc, #8]	; (1e904 <net_icmpv6_unregister_handler+0x44>)
   1e8fc:	605a      	str	r2, [r3, #4]
   1e8fe:	e7f0      	b.n	1e8e2 <net_icmpv6_unregister_handler+0x22>
   1e900:	4770      	bx	lr
   1e902:	bf00      	nop
   1e904:	20002464 	.word	0x20002464

0001e908 <net_icmpv6_set_chksum>:
#define echo_reply_debug(pkt)
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

struct net_buf *net_icmpv6_set_chksum(struct net_pkt *pkt,
				      struct net_buf *frag)
{
   1e908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e90c:	b086      	sub	sp, #24
   1e90e:	4606      	mov	r6, r0
   1e910:	460d      	mov	r5, r1
	struct net_icmp_hdr *icmp_hdr;
	u16_t chksum = 0;
   1e912:	2300      	movs	r3, #0
   1e914:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	icmp_hdr = net_pkt_icmp_data(pkt);
   1e918:	f7ff fa18 	bl	1dd4c <net_pkt_icmp_data>
   1e91c:	4604      	mov	r4, r0
 */
static inline
struct net_icmp_hdr *net_icmp_header_fits(struct net_pkt *pkt,
					  struct net_icmp_hdr *hdr)
{
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1e91e:	2204      	movs	r2, #4
   1e920:	4601      	mov	r1, r0
   1e922:	4630      	mov	r0, r6
   1e924:	f7ff fdfc 	bl	1e520 <net_header_fits>
   1e928:	b170      	cbz	r0, 1e948 <net_icmpv6_set_chksum+0x40>
		return hdr;
   1e92a:	4623      	mov	r3, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1e92c:	b173      	cbz	r3, 1e94c <net_icmpv6_set_chksum+0x44>
		icmp_hdr->chksum = 0;
   1e92e:	2300      	movs	r3, #0
   1e930:	70a3      	strb	r3, [r4, #2]
   1e932:	70e3      	strb	r3, [r4, #3]
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1e934:	213a      	movs	r1, #58	; 0x3a
   1e936:	4630      	mov	r0, r6
   1e938:	f7ff fd99 	bl	1e46e <net_calc_chksum>
		icmp_hdr->chksum = ~net_calc_chksum_icmpv6(pkt);
   1e93c:	43c0      	mvns	r0, r0
   1e93e:	8060      	strh	r0, [r4, #2]

		return frag;
   1e940:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1e942:	b006      	add	sp, #24
   1e944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1e948:	2300      	movs	r3, #0
   1e94a:	e7ef      	b.n	1e92c <net_icmpv6_set_chksum+0x24>
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1e94c:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e950:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1e954:	441a      	add	r2, r3
   1e956:	3202      	adds	r2, #2
   1e958:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1e95c:	f8cd 8008 	str.w	r8, [sp, #8]
   1e960:	f10d 0416 	add.w	r4, sp, #22
   1e964:	9401      	str	r4, [sp, #4]
   1e966:	2702      	movs	r7, #2
   1e968:	9700      	str	r7, [sp, #0]
   1e96a:	ab05      	add	r3, sp, #20
   1e96c:	b292      	uxth	r2, r2
   1e96e:	4629      	mov	r1, r5
   1e970:	4630      	mov	r0, r6
   1e972:	f7ff f902 	bl	1db7a <net_pkt_write>
   1e976:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1e978:	213a      	movs	r1, #58	; 0x3a
   1e97a:	4630      	mov	r0, r6
   1e97c:	f7ff fd77 	bl	1e46e <net_calc_chksum>
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1e980:	43c0      	mvns	r0, r0
   1e982:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1e986:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1e98a:	3a02      	subs	r2, #2
   1e98c:	f8cd 8008 	str.w	r8, [sp, #8]
   1e990:	9401      	str	r4, [sp, #4]
   1e992:	9700      	str	r7, [sp, #0]
   1e994:	ab05      	add	r3, sp, #20
   1e996:	b292      	uxth	r2, r2
   1e998:	4629      	mov	r1, r5
   1e99a:	4630      	mov	r0, r6
   1e99c:	f7ff f8ed 	bl	1db7a <net_pkt_write>
	return frag;
   1e9a0:	e7cf      	b.n	1e942 <net_icmpv6_set_chksum+0x3a>

0001e9a2 <net_icmpv6_get_hdr>:

struct net_icmp_hdr *net_icmpv6_get_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1e9a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e9a4:	b085      	sub	sp, #20
   1e9a6:	4605      	mov	r5, r0
   1e9a8:	460f      	mov	r7, r1
	/* If the ICMP header can fit the first fragment, then access it
	 * directly (fast path), otherwise read the values one by one
	 * using net_frag_read*() functions (slow path).
	 */

	icmp_hdr = net_pkt_icmp_data(pkt);
   1e9aa:	f7ff f9cf 	bl	1dd4c <net_pkt_icmp_data>
   1e9ae:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1e9b0:	2204      	movs	r2, #4
   1e9b2:	4601      	mov	r1, r0
   1e9b4:	4628      	mov	r0, r5
   1e9b6:	f7ff fdb3 	bl	1e520 <net_header_fits>
   1e9ba:	b120      	cbz	r0, 1e9c6 <net_icmpv6_get_hdr+0x24>
		return hdr;
   1e9bc:	4626      	mov	r6, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1e9be:	b126      	cbz	r6, 1e9ca <net_icmpv6_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1e9c0:	4620      	mov	r0, r4
   1e9c2:	b005      	add	sp, #20
   1e9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   1e9c6:	2600      	movs	r6, #0
   1e9c8:	e7f9      	b.n	1e9be <net_icmpv6_get_hdr+0x1c>
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e9ca:	68a8      	ldr	r0, [r5, #8]
   1e9cc:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt), &pos, &hdr->type);
   1e9d0:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   1e9d4:	9700      	str	r7, [sp, #0]
   1e9d6:	2301      	movs	r3, #1
   1e9d8:	f10d 020e 	add.w	r2, sp, #14
   1e9dc:	4421      	add	r1, r4
   1e9de:	f7ff f85a 	bl	1da96 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->code);
   1e9e2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e9e6:	1c7b      	adds	r3, r7, #1
   1e9e8:	9300      	str	r3, [sp, #0]
   1e9ea:	2301      	movs	r3, #1
   1e9ec:	f10d 020e 	add.w	r2, sp, #14
   1e9f0:	f7ff f851 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1e9f4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   1e9f8:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1e9fa:	9300      	str	r3, [sp, #0]
   1e9fc:	2302      	movs	r3, #2
   1e9fe:	f10d 020e 	add.w	r2, sp, #14
   1ea02:	f7ff f848 	bl	1da96 <net_frag_read>
	if (!frag) {
   1ea06:	b108      	cbz	r0, 1ea0c <net_icmpv6_get_hdr+0x6a>
	return hdr;
   1ea08:	463c      	mov	r4, r7
   1ea0a:	e7d9      	b.n	1e9c0 <net_icmpv6_get_hdr+0x1e>
		return NULL;
   1ea0c:	4634      	mov	r4, r6
   1ea0e:	e7d7      	b.n	1e9c0 <net_icmpv6_get_hdr+0x1e>

0001ea10 <net_icmpv6_set_hdr>:

struct net_icmp_hdr *net_icmpv6_set_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1ea10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea14:	b086      	sub	sp, #24
   1ea16:	4606      	mov	r6, r0
   1ea18:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1ea1a:	2204      	movs	r2, #4
   1ea1c:	f7ff fd80 	bl	1e520 <net_header_fits>
   1ea20:	b128      	cbz	r0, 1ea2e <net_icmpv6_set_hdr+0x1e>
		return hdr;
   1ea22:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_icmp_header_fits(pkt, hdr)) {
   1ea24:	b12d      	cbz	r5, 1ea32 <net_icmpv6_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1ea26:	4620      	mov	r0, r4
   1ea28:	b006      	add	sp, #24
   1ea2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1ea2e:	2500      	movs	r5, #0
   1ea30:	e7f8      	b.n	1ea24 <net_icmpv6_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ea32:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt), &pos,
   1ea36:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ea3a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1ea3e:	9702      	str	r7, [sp, #8]
   1ea40:	9401      	str	r4, [sp, #4]
   1ea42:	f04f 0801 	mov.w	r8, #1
   1ea46:	f8cd 8000 	str.w	r8, [sp]
   1ea4a:	f10d 0316 	add.w	r3, sp, #22
   1ea4e:	440a      	add	r2, r1
   1ea50:	68b1      	ldr	r1, [r6, #8]
   1ea52:	4630      	mov	r0, r6
   1ea54:	f7ff f891 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->code),
   1ea58:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1ea5c:	eb04 0308 	add.w	r3, r4, r8
   1ea60:	9702      	str	r7, [sp, #8]
   1ea62:	9301      	str	r3, [sp, #4]
   1ea64:	f8cd 8000 	str.w	r8, [sp]
   1ea68:	f10d 0316 	add.w	r3, sp, #22
   1ea6c:	4601      	mov	r1, r0
   1ea6e:	4630      	mov	r0, r6
   1ea70:	f7ff f883 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1ea74:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1ea78:	1ca3      	adds	r3, r4, #2
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1ea7a:	9702      	str	r7, [sp, #8]
   1ea7c:	9301      	str	r3, [sp, #4]
   1ea7e:	2302      	movs	r3, #2
   1ea80:	9300      	str	r3, [sp, #0]
   1ea82:	f10d 0316 	add.w	r3, sp, #22
   1ea86:	4601      	mov	r1, r0
   1ea88:	4630      	mov	r0, r6
   1ea8a:	f7ff f876 	bl	1db7a <net_pkt_write>
	if (!frag) {
   1ea8e:	2800      	cmp	r0, #0
   1ea90:	d1c9      	bne.n	1ea26 <net_icmpv6_set_hdr+0x16>
		return NULL;
   1ea92:	462c      	mov	r4, r5
   1ea94:	e7c7      	b.n	1ea26 <net_icmpv6_set_hdr+0x16>
	...

0001ea98 <handle_echo_request>:

	return hdr;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   1ea98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea9c:	b09a      	sub	sp, #104	; 0x68
   1ea9e:	4606      	mov	r6, r0
	return pkt->iface;
   1eaa0:	6945      	ldr	r5, [r0, #20]

	echo_request_debug(orig);

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1eaa2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1eaa6:	2000      	movs	r0, #0
   1eaa8:	f7fe fe06 	bl	1d6b8 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1eaac:	2800      	cmp	r0, #0
   1eaae:	f000 80a1 	beq.w	1ebf4 <handle_echo_request+0x15c>
   1eab2:	4604      	mov	r4, r0
	return pkt->frags->data;
   1eab4:	68b3      	ldr	r3, [r6, #8]
	size_t bytes = 0;
   1eab6:	2100      	movs	r1, #0
   1eab8:	e002      	b.n	1eac0 <handle_echo_request+0x28>
		bytes += buf->len;
   1eaba:	899a      	ldrh	r2, [r3, #12]
   1eabc:	4411      	add	r1, r2
		buf = buf->frags;
   1eabe:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1eac0:	2b00      	cmp	r3, #0
   1eac2:	d1fa      	bne.n	1eaba <handle_echo_request+0x22>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1eac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1eac8:	2200      	movs	r2, #0
   1eaca:	4630      	mov	r0, r6
   1eacc:	f7fe fea6 	bl	1d81c <net_pkt_copy>

	payload_len = sys_get_be16(NET_IPV6_HDR(orig)->len) -
		sizeof(NET_ICMPH_LEN) - NET_ICMPV6_UNUSED_LEN;

	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   1ead0:	4607      	mov	r7, r0
   1ead2:	2800      	cmp	r0, #0
   1ead4:	f000 808b 	beq.w	1ebee <handle_echo_request+0x156>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1ead8:	4601      	mov	r1, r0
   1eada:	4620      	mov	r0, r4
   1eadc:	f7fe fe87 	bl	1d7ee <net_pkt_frag_add>
	pkt->family = family;
   1eae0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1eae4:	220a      	movs	r2, #10
   1eae6:	f362 03c6 	bfi	r3, r2, #3, #4
   1eaea:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1eaee:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1eaf0:	7d6b      	ldrb	r3, [r5, #21]
   1eaf2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1eaf6:	7d6b      	ldrb	r3, [r5, #21]
   1eaf8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1eafc:	f107 0008 	add.w	r0, r7, #8
   1eb00:	f7fc f98d 	bl	1ae1e <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1eb04:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ip_hdr_len = len;
   1eb08:	2328      	movs	r3, #40	; 0x28
   1eb0a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->ipv6_ext_len;
   1eb0e:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   1eb12:	2b00      	cmp	r3, #0
   1eb14:	d076      	beq.n	1ec04 <handle_echo_request+0x16c>
	pkt->ipv6_ext_len = len;
   1eb16:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1eb1a:	68a3      	ldr	r3, [r4, #8]
   1eb1c:	689b      	ldr	r3, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1eb1e:	2260      	movs	r2, #96	; 0x60
   1eb20:	701a      	strb	r2, [r3, #0]
   1eb22:	68a3      	ldr	r3, [r4, #8]
   1eb24:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1eb26:	2300      	movs	r3, #0
   1eb28:	7053      	strb	r3, [r2, #1]
   1eb2a:	68a2      	ldr	r2, [r4, #8]
   1eb2c:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1eb2e:	7093      	strb	r3, [r2, #2]
   1eb30:	70d3      	strb	r3, [r2, #3]
   1eb32:	68a3      	ldr	r3, [r4, #8]
   1eb34:	689b      	ldr	r3, [r3, #8]
	return iface->ipv6.hop_limit;
   1eb36:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   1eb3a:	71da      	strb	r2, [r3, #7]
   1eb3c:	68a3      	ldr	r3, [r4, #8]
   1eb3e:	f8d3 c008 	ldr.w	ip, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   1eb42:	f89c 3018 	ldrb.w	r3, [ip, #24]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1eb46:	2bff      	cmp	r3, #255	; 0xff
   1eb48:	d060      	beq.n	1ec0c <handle_echo_request+0x174>
   1eb4a:	68b3      	ldr	r3, [r6, #8]
   1eb4c:	689d      	ldr	r5, [r3, #8]
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1eb4e:	af0e      	add	r7, sp, #56	; 0x38
   1eb50:	462b      	mov	r3, r5
   1eb52:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1eb56:	6859      	ldr	r1, [r3, #4]
   1eb58:	689a      	ldr	r2, [r3, #8]
   1eb5a:	68db      	ldr	r3, [r3, #12]
   1eb5c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1eb5e:	af01      	add	r7, sp, #4
   1eb60:	ab0e      	add	r3, sp, #56	; 0x38
   1eb62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1eb64:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1eb68:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   1eb6c:	462b      	mov	r3, r5
   1eb6e:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1eb72:	6859      	ldr	r1, [r3, #4]
   1eb74:	689a      	ldr	r2, [r3, #8]
   1eb76:	68db      	ldr	r3, [r3, #12]
   1eb78:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1eb7c:	ad12      	add	r5, sp, #72	; 0x48
   1eb7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1eb80:	f8cc 0008 	str.w	r0, [ip, #8]
   1eb84:	f8cc 100c 	str.w	r1, [ip, #12]
   1eb88:	f8cc 2010 	str.w	r2, [ip, #16]
   1eb8c:	f8cc 3014 	str.w	r3, [ip, #20]
   1eb90:	68a3      	ldr	r3, [r4, #8]
   1eb92:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1eb96:	ad16      	add	r5, sp, #88	; 0x58
   1eb98:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1eb9c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1eba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1eba2:	f8ce 0018 	str.w	r0, [lr, #24]
   1eba6:	f8ce 101c 	str.w	r1, [lr, #28]
   1ebaa:	f8ce 2020 	str.w	r2, [lr, #32]
   1ebae:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
			goto drop;
		}
#endif
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1ebb2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1ebb4:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1ebb6:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   1ebba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_ll_dst(pkt)->addr = NULL;
   1ebbe:	2500      	movs	r5, #0
   1ebc0:	62a5      	str	r5, [r4, #40]	; 0x28

	/* ICMPv6 fields */
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ebc2:	a905      	add	r1, sp, #20
   1ebc4:	4620      	mov	r0, r4
   1ebc6:	f7ff feec 	bl	1e9a2 <net_icmpv6_get_hdr>
   1ebca:	4601      	mov	r1, r0
	icmp_hdr->type = NET_ICMPV6_ECHO_REPLY;
   1ebcc:	2381      	movs	r3, #129	; 0x81
   1ebce:	7003      	strb	r3, [r0, #0]
	icmp_hdr->code = 0;
   1ebd0:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0;
   1ebd2:	7085      	strb	r5, [r0, #2]
   1ebd4:	70c5      	strb	r5, [r0, #3]
	net_icmpv6_set_hdr(pkt, icmp_hdr);
   1ebd6:	4620      	mov	r0, r4
   1ebd8:	f7ff ff1a 	bl	1ea10 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1ebdc:	68a1      	ldr	r1, [r4, #8]
   1ebde:	4620      	mov	r0, r4
   1ebe0:	f7ff fe92 	bl	1e908 <net_icmpv6_set_chksum>

	echo_reply_debug(pkt);

	if (net_send_data(pkt) < 0) {
   1ebe4:	4620      	mov	r0, r4
   1ebe6:	f7fc f9d7 	bl	1af98 <net_send_data>
   1ebea:	42a8      	cmp	r0, r5
   1ebec:	da3c      	bge.n	1ec68 <handle_echo_request+0x1d0>
	net_stats_update_icmp_sent();

	return NET_OK;

drop:
	net_pkt_unref(pkt);
   1ebee:	4620      	mov	r0, r4
   1ebf0:	f7fe fdd3 	bl	1d79a <net_pkt_unref>
	net_stats.icmp.drop++;
   1ebf4:	4a21      	ldr	r2, [pc, #132]	; (1ec7c <handle_echo_request+0x1e4>)
   1ebf6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1ebf8:	3301      	adds	r3, #1
   1ebfa:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return NET_DROP;
   1ebfc:	2002      	movs	r0, #2
}
   1ebfe:	b01a      	add	sp, #104	; 0x68
   1ec00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pkt->ipv6_ext_len = len;
   1ec04:	2300      	movs	r3, #0
   1ec06:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   1ec0a:	e786      	b.n	1eb1a <handle_echo_request+0x82>
	return pkt->frags->data;
   1ec0c:	68b3      	ldr	r3, [r6, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1ec0e:	af06      	add	r7, sp, #24
   1ec10:	689b      	ldr	r3, [r3, #8]
   1ec12:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1ec16:	6859      	ldr	r1, [r3, #4]
   1ec18:	689a      	ldr	r2, [r3, #8]
   1ec1a:	68db      	ldr	r3, [r3, #12]
   1ec1c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1ec1e:	af06      	add	r7, sp, #24
   1ec20:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1ec22:	f8cc 0018 	str.w	r0, [ip, #24]
   1ec26:	f8cc 101c 	str.w	r1, [ip, #28]
   1ec2a:	f8cc 2020 	str.w	r2, [ip, #32]
   1ec2e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1ec32:	68a3      	ldr	r3, [r4, #8]
   1ec34:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1ec38:	68b3      	ldr	r3, [r6, #8]
   1ec3a:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ec3c:	3118      	adds	r1, #24
   1ec3e:	4628      	mov	r0, r5
   1ec40:	f7fd f910 	bl	1be64 <net_if_ipv6_select_src_addr>
   1ec44:	4603      	mov	r3, r0
   1ec46:	ad0a      	add	r5, sp, #40	; 0x28
   1ec48:	6800      	ldr	r0, [r0, #0]
   1ec4a:	6859      	ldr	r1, [r3, #4]
   1ec4c:	689a      	ldr	r2, [r3, #8]
   1ec4e:	68db      	ldr	r3, [r3, #12]
   1ec50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ec52:	ad0a      	add	r5, sp, #40	; 0x28
   1ec54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ec56:	f8c8 0008 	str.w	r0, [r8, #8]
   1ec5a:	f8c8 100c 	str.w	r1, [r8, #12]
   1ec5e:	f8c8 2010 	str.w	r2, [r8, #16]
   1ec62:	f8c8 3014 	str.w	r3, [r8, #20]
   1ec66:	e7a4      	b.n	1ebb2 <handle_echo_request+0x11a>
	net_pkt_unref(orig);
   1ec68:	4630      	mov	r0, r6
   1ec6a:	f7fe fd96 	bl	1d79a <net_pkt_unref>
	net_stats.icmp.sent++;
   1ec6e:	4a03      	ldr	r2, [pc, #12]	; (1ec7c <handle_echo_request+0x1e4>)
   1ec70:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1ec72:	3301      	adds	r3, #1
   1ec74:	6393      	str	r3, [r2, #56]	; 0x38
	return NET_OK;
   1ec76:	4628      	mov	r0, r5
   1ec78:	e7c1      	b.n	1ebfe <handle_echo_request+0x166>
   1ec7a:	bf00      	nop
   1ec7c:	20003038 	.word	0x20003038

0001ec80 <net_icmpv6_get_ns_hdr>:
{
   1ec80:	b570      	push	{r4, r5, r6, lr}
   1ec82:	b084      	sub	sp, #16
   1ec84:	4605      	mov	r5, r0
   1ec86:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ec88:	2104      	movs	r1, #4
   1ec8a:	f7ff f874 	bl	1dd76 <net_pkt_icmp_opt_data>
   1ec8e:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ec90:	2214      	movs	r2, #20
   1ec92:	4601      	mov	r1, r0
   1ec94:	4628      	mov	r0, r5
   1ec96:	f7ff fc43 	bl	1e520 <net_header_fits>
   1ec9a:	b110      	cbz	r0, 1eca2 <net_icmpv6_get_ns_hdr+0x22>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1ec9c:	4620      	mov	r0, r4
}
   1ec9e:	b004      	add	sp, #16
   1eca0:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read(pkt->frags,
   1eca2:	68a8      	ldr	r0, [r5, #8]
			     net_pkt_ip_hdr_len(pkt) +
   1eca4:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1eca8:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1ecac:	4419      	add	r1, r3
	frag = net_frag_read(pkt->frags,
   1ecae:	3108      	adds	r1, #8
			     &pos, sizeof(struct in6_addr), (u8_t *)&hdr->tgt);
   1ecb0:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(pkt->frags,
   1ecb2:	9300      	str	r3, [sp, #0]
   1ecb4:	2310      	movs	r3, #16
   1ecb6:	f10d 020e 	add.w	r2, sp, #14
   1ecba:	b289      	uxth	r1, r1
   1ecbc:	f7fe feeb 	bl	1da96 <net_frag_read>
	if (!frag) {
   1ecc0:	2800      	cmp	r0, #0
   1ecc2:	d0ec      	beq.n	1ec9e <net_icmpv6_get_ns_hdr+0x1e>
	return hdr;
   1ecc4:	4630      	mov	r0, r6
   1ecc6:	e7ea      	b.n	1ec9e <net_icmpv6_get_ns_hdr+0x1e>

0001ecc8 <net_icmpv6_set_ns_hdr>:
{
   1ecc8:	b570      	push	{r4, r5, r6, lr}
   1ecca:	b086      	sub	sp, #24
   1eccc:	4605      	mov	r5, r0
   1ecce:	460e      	mov	r6, r1
	const u32_t reserved = 0;
   1ecd0:	2300      	movs	r3, #0
   1ecd2:	9305      	str	r3, [sp, #20]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ecd4:	2104      	movs	r1, #4
   1ecd6:	f7ff f84e 	bl	1dd76 <net_pkt_icmp_opt_data>
   1ecda:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ecdc:	2214      	movs	r2, #20
   1ecde:	4601      	mov	r1, r0
   1ece0:	4628      	mov	r0, r5
   1ece2:	f7ff fc1d 	bl	1e520 <net_header_fits>
   1ece6:	b110      	cbz	r0, 1ecee <net_icmpv6_set_ns_hdr+0x26>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1ece8:	4620      	mov	r0, r4
}
   1ecea:	b006      	add	sp, #24
   1ecec:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ecee:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1ecf2:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ecf6:	441a      	add	r2, r3
   1ecf8:	3204      	adds	r2, #4
   1ecfa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1ecfe:	9402      	str	r4, [sp, #8]
   1ed00:	ab05      	add	r3, sp, #20
   1ed02:	9301      	str	r3, [sp, #4]
   1ed04:	2304      	movs	r3, #4
   1ed06:	9300      	str	r3, [sp, #0]
   1ed08:	f10d 0312 	add.w	r3, sp, #18
   1ed0c:	b292      	uxth	r2, r2
   1ed0e:	68a9      	ldr	r1, [r5, #8]
   1ed10:	4628      	mov	r0, r5
   1ed12:	f7fe ff32 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1ed16:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1ed1a:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1ed1c:	9402      	str	r4, [sp, #8]
   1ed1e:	9301      	str	r3, [sp, #4]
   1ed20:	2310      	movs	r3, #16
   1ed22:	9300      	str	r3, [sp, #0]
   1ed24:	f10d 0312 	add.w	r3, sp, #18
   1ed28:	4601      	mov	r1, r0
   1ed2a:	4628      	mov	r0, r5
   1ed2c:	f7fe ff25 	bl	1db7a <net_pkt_write>
	if (!frag) {
   1ed30:	2800      	cmp	r0, #0
   1ed32:	d0da      	beq.n	1ecea <net_icmpv6_set_ns_hdr+0x22>
	return hdr;
   1ed34:	4630      	mov	r0, r6
   1ed36:	e7d8      	b.n	1ecea <net_icmpv6_set_ns_hdr+0x22>

0001ed38 <net_icmpv6_get_nd_opt_hdr>:
{
   1ed38:	b570      	push	{r4, r5, r6, lr}
   1ed3a:	b084      	sub	sp, #16
   1ed3c:	4605      	mov	r5, r0
   1ed3e:	460e      	mov	r6, r1
	return pkt->ipv6_ext_opt_len;
   1ed40:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1ed44:	3104      	adds	r1, #4
   1ed46:	f7ff f816 	bl	1dd76 <net_pkt_icmp_opt_data>
   1ed4a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ed4c:	2202      	movs	r2, #2
   1ed4e:	4601      	mov	r1, r0
   1ed50:	4628      	mov	r0, r5
   1ed52:	f7ff fbe5 	bl	1e520 <net_header_fits>
   1ed56:	b110      	cbz	r0, 1ed5e <net_icmpv6_get_nd_opt_hdr+0x26>
		return (struct net_icmpv6_nd_opt_hdr *)opt_data;
   1ed58:	4620      	mov	r0, r4
}
   1ed5a:	b004      	add	sp, #16
   1ed5c:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags,
   1ed5e:	68a8      	ldr	r0, [r5, #8]
				net_pkt_ip_hdr_len(pkt) +
   1ed60:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1ed64:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1ed68:	4419      	add	r1, r3
				net_pkt_ipv6_ext_opt_len(pkt),
   1ed6a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
				sizeof(struct net_icmp_hdr) +
   1ed6e:	4419      	add	r1, r3
   1ed70:	b289      	uxth	r1, r1
	frag = net_frag_read_u8(pkt->frags,
   1ed72:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1ed74:	9600      	str	r6, [sp, #0]
   1ed76:	2301      	movs	r3, #1
   1ed78:	f10d 020e 	add.w	r2, sp, #14
   1ed7c:	b289      	uxth	r1, r1
   1ed7e:	f7fe fe8a 	bl	1da96 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->len);
   1ed82:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ed86:	1c73      	adds	r3, r6, #1
   1ed88:	9300      	str	r3, [sp, #0]
   1ed8a:	2301      	movs	r3, #1
   1ed8c:	f10d 020e 	add.w	r2, sp, #14
   1ed90:	f7fe fe81 	bl	1da96 <net_frag_read>
	if (!frag) {
   1ed94:	2800      	cmp	r0, #0
   1ed96:	d0e0      	beq.n	1ed5a <net_icmpv6_get_nd_opt_hdr+0x22>
	return hdr;
   1ed98:	4630      	mov	r0, r6
   1ed9a:	e7de      	b.n	1ed5a <net_icmpv6_get_nd_opt_hdr+0x22>

0001ed9c <net_icmpv6_get_na_hdr>:
{
   1ed9c:	b570      	push	{r4, r5, r6, lr}
   1ed9e:	b084      	sub	sp, #16
   1eda0:	4605      	mov	r5, r0
   1eda2:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1eda4:	2104      	movs	r1, #4
   1eda6:	f7fe ffe6 	bl	1dd76 <net_pkt_icmp_opt_data>
   1edaa:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1edac:	2214      	movs	r2, #20
   1edae:	4601      	mov	r1, r0
   1edb0:	4628      	mov	r0, r5
   1edb2:	f7ff fbb5 	bl	1e520 <net_header_fits>
   1edb6:	b110      	cbz	r0, 1edbe <net_icmpv6_get_na_hdr+0x22>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1edb8:	4620      	mov	r0, r4
}
   1edba:	b004      	add	sp, #16
   1edbc:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1edbe:	68a8      	ldr	r0, [r5, #8]
   1edc0:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1edc4:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1edc8:	4419      	add	r1, r3
   1edca:	3104      	adds	r1, #4
   1edcc:	9600      	str	r6, [sp, #0]
   1edce:	2301      	movs	r3, #1
   1edd0:	f10d 020e 	add.w	r2, sp, #14
   1edd4:	b289      	uxth	r1, r1
   1edd6:	f7fe fe5e 	bl	1da96 <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 3); /* reserved */
   1edda:	f8bd 100e 	ldrh.w	r1, [sp, #14]
	return net_frag_read(frag, offset, pos, len, NULL);
   1edde:	2300      	movs	r3, #0
   1ede0:	9300      	str	r3, [sp, #0]
   1ede2:	2303      	movs	r3, #3
   1ede4:	f10d 020e 	add.w	r2, sp, #14
   1ede8:	f7fe fe55 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1edec:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->tgt);
   1edf0:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1edf2:	9300      	str	r3, [sp, #0]
   1edf4:	2310      	movs	r3, #16
   1edf6:	f10d 020e 	add.w	r2, sp, #14
   1edfa:	f7fe fe4c 	bl	1da96 <net_frag_read>
	if (!frag) {
   1edfe:	2800      	cmp	r0, #0
   1ee00:	d0db      	beq.n	1edba <net_icmpv6_get_na_hdr+0x1e>
	return hdr;
   1ee02:	4630      	mov	r0, r6
   1ee04:	e7d9      	b.n	1edba <net_icmpv6_get_na_hdr+0x1e>

0001ee06 <net_icmpv6_set_na_hdr>:
{
   1ee06:	b570      	push	{r4, r5, r6, lr}
   1ee08:	b086      	sub	sp, #24
   1ee0a:	4605      	mov	r5, r0
   1ee0c:	460e      	mov	r6, r1
	const u8_t reserved[3] = { 0 };
   1ee0e:	2300      	movs	r3, #0
   1ee10:	f8ad 3014 	strh.w	r3, [sp, #20]
   1ee14:	f88d 3016 	strb.w	r3, [sp, #22]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ee18:	2104      	movs	r1, #4
   1ee1a:	f7fe ffac 	bl	1dd76 <net_pkt_icmp_opt_data>
   1ee1e:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ee20:	2214      	movs	r2, #20
   1ee22:	4601      	mov	r1, r0
   1ee24:	4628      	mov	r0, r5
   1ee26:	f7ff fb7b 	bl	1e520 <net_header_fits>
   1ee2a:	b110      	cbz	r0, 1ee32 <net_icmpv6_set_na_hdr+0x2c>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1ee2c:	4620      	mov	r0, r4
}
   1ee2e:	b006      	add	sp, #24
   1ee30:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ip_hdr_len(pkt) +
   1ee32:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1ee36:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1ee3a:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, pkt->frags,
   1ee3c:	3204      	adds	r2, #4
   1ee3e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1ee42:	9402      	str	r4, [sp, #8]
   1ee44:	9601      	str	r6, [sp, #4]
   1ee46:	2301      	movs	r3, #1
   1ee48:	9300      	str	r3, [sp, #0]
   1ee4a:	f10d 0312 	add.w	r3, sp, #18
   1ee4e:	b292      	uxth	r2, r2
   1ee50:	68a9      	ldr	r1, [r5, #8]
   1ee52:	4628      	mov	r0, r5
   1ee54:	f7fe fe91 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(reserved),
   1ee58:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1ee5c:	9402      	str	r4, [sp, #8]
   1ee5e:	ab05      	add	r3, sp, #20
   1ee60:	9301      	str	r3, [sp, #4]
   1ee62:	2303      	movs	r3, #3
   1ee64:	9300      	str	r3, [sp, #0]
   1ee66:	f10d 0312 	add.w	r3, sp, #18
   1ee6a:	4601      	mov	r1, r0
   1ee6c:	4628      	mov	r0, r5
   1ee6e:	f7fe fe84 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1ee72:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1ee76:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1ee78:	9402      	str	r4, [sp, #8]
   1ee7a:	9301      	str	r3, [sp, #4]
   1ee7c:	2310      	movs	r3, #16
   1ee7e:	9300      	str	r3, [sp, #0]
   1ee80:	f10d 0312 	add.w	r3, sp, #18
   1ee84:	4601      	mov	r1, r0
   1ee86:	4628      	mov	r0, r5
   1ee88:	f7fe fe77 	bl	1db7a <net_pkt_write>
	if (!frag) {
   1ee8c:	2800      	cmp	r0, #0
   1ee8e:	d0ce      	beq.n	1ee2e <net_icmpv6_set_na_hdr+0x28>
	return hdr;
   1ee90:	4630      	mov	r0, r6
   1ee92:	e7cc      	b.n	1ee2e <net_icmpv6_set_na_hdr+0x28>

0001ee94 <net_icmpv6_get_ra_hdr>:
{
   1ee94:	b570      	push	{r4, r5, r6, lr}
   1ee96:	b084      	sub	sp, #16
   1ee98:	4606      	mov	r6, r0
   1ee9a:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ee9c:	2104      	movs	r1, #4
   1ee9e:	f7fe ff6a 	bl	1dd76 <net_pkt_icmp_opt_data>
   1eea2:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1eea4:	220c      	movs	r2, #12
   1eea6:	4601      	mov	r1, r0
   1eea8:	4630      	mov	r0, r6
   1eeaa:	f7ff fb39 	bl	1e520 <net_header_fits>
   1eeae:	b110      	cbz	r0, 1eeb6 <net_icmpv6_get_ra_hdr+0x22>
		return (struct net_icmpv6_ra_hdr *)opt_data;
   1eeb0:	4620      	mov	r0, r4
}
   1eeb2:	b004      	add	sp, #16
   1eeb4:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1eeb6:	68b0      	ldr	r0, [r6, #8]
   1eeb8:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1eebc:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1eec0:	4419      	add	r1, r3
   1eec2:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1eec4:	9500      	str	r5, [sp, #0]
   1eec6:	2301      	movs	r3, #1
   1eec8:	f10d 020e 	add.w	r2, sp, #14
   1eecc:	b289      	uxth	r1, r1
   1eece:	f7fe fde2 	bl	1da96 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   1eed2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1eed6:	1c6b      	adds	r3, r5, #1
   1eed8:	9300      	str	r3, [sp, #0]
   1eeda:	2301      	movs	r3, #1
   1eedc:	f10d 020e 	add.w	r2, sp, #14
   1eee0:	f7fe fdd9 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1eee4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->router_lifetime);
   1eee8:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1eeea:	9300      	str	r3, [sp, #0]
   1eeec:	2302      	movs	r3, #2
   1eeee:	f10d 020e 	add.w	r2, sp, #14
   1eef2:	f7fe fdd0 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1eef6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->reachable_time);
   1eefa:	1d2b      	adds	r3, r5, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1eefc:	9300      	str	r3, [sp, #0]
   1eefe:	2304      	movs	r3, #4
   1ef00:	f10d 020e 	add.w	r2, sp, #14
   1ef04:	f7fe fdc7 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1ef08:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->retrans_timer);
   1ef0c:	f105 0308 	add.w	r3, r5, #8
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1ef10:	9300      	str	r3, [sp, #0]
   1ef12:	2304      	movs	r3, #4
   1ef14:	f10d 020e 	add.w	r2, sp, #14
   1ef18:	f7fe fdbd 	bl	1da96 <net_frag_read>
	if (!frag) {
   1ef1c:	2800      	cmp	r0, #0
   1ef1e:	d0c8      	beq.n	1eeb2 <net_icmpv6_get_ra_hdr+0x1e>
	return hdr;
   1ef20:	4628      	mov	r0, r5
   1ef22:	e7c6      	b.n	1eeb2 <net_icmpv6_get_ra_hdr+0x1e>

0001ef24 <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   1ef24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef28:	b09f      	sub	sp, #124	; 0x7c
   1ef2a:	4605      	mov	r5, r0
   1ef2c:	4688      	mov	r8, r1
   1ef2e:	4692      	mov	sl, r2
   1ef30:	4699      	mov	r9, r3
	return pkt->frags->data;
   1ef32:	6883      	ldr	r3, [r0, #8]
   1ef34:	689b      	ldr	r3, [r3, #8]
	struct net_buf *frag;
	struct net_if *iface;
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1ef36:	799b      	ldrb	r3, [r3, #6]
   1ef38:	2b3a      	cmp	r3, #58	; 0x3a
   1ef3a:	d01d      	beq.n	1ef78 <net_icmpv6_send_error+0x54>
	return pkt->iface;
   1ef3c:	696f      	ldr	r7, [r5, #20]
		}
	}

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1ef3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1ef42:	2000      	movs	r0, #0
   1ef44:	f7fe fbb8 	bl	1d6b8 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1ef48:	4604      	mov	r4, r0
   1ef4a:	2800      	cmp	r0, #0
   1ef4c:	f000 8141 	beq.w	1f1d2 <net_icmpv6_send_error+0x2ae>
	return pkt->frags->data;
   1ef50:	68ab      	ldr	r3, [r5, #8]
   1ef52:	6899      	ldr	r1, [r3, #8]
	 * to store the param variable.
	 */
	reserve = sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr) +
		NET_ICMPV6_UNUSED_LEN;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   1ef54:	798b      	ldrb	r3, [r1, #6]
   1ef56:	2b11      	cmp	r3, #17
   1ef58:	d019      	beq.n	1ef8e <net_icmpv6_send_error+0x6a>
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_udp_hdr);
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   1ef5a:	2b06      	cmp	r3, #6
   1ef5c:	d019      	beq.n	1ef92 <net_icmpv6_send_error+0x6e>
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1ef5e:	687b      	ldr	r3, [r7, #4]
   1ef60:	689b      	ldr	r3, [r3, #8]
   1ef62:	3118      	adds	r1, #24
   1ef64:	4638      	mov	r0, r7
   1ef66:	4798      	blx	r3
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_tcp_hdr);
	} else {
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   1ef68:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
			net_if_get_ll_reserve(iface,
					      &NET_IPV6_HDR(orig)->dst);

		if (reserve > space) {
   1ef6c:	282f      	cmp	r0, #47	; 0x2f
   1ef6e:	f240 80de 	bls.w	1f12e <net_icmpv6_send_error+0x20a>
			extra_len = 0;
		} else {
			extra_len = space - reserve;
   1ef72:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
   1ef76:	e00d      	b.n	1ef94 <net_icmpv6_send_error+0x70>
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1ef78:	a906      	add	r1, sp, #24
   1ef7a:	f7ff fd12 	bl	1e9a2 <net_icmpv6_get_hdr>
   1ef7e:	b118      	cbz	r0, 1ef88 <net_icmpv6_send_error+0x64>
		    icmp_hdr->code < 128) {
   1ef80:	f99d 3019 	ldrsb.w	r3, [sp, #25]
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1ef84:	2b00      	cmp	r3, #0
   1ef86:	dbd9      	blt.n	1ef3c <net_icmpv6_send_error+0x18>
			err = -EINVAL;
   1ef88:	f06f 0515 	mvn.w	r5, #21
   1ef8c:	e119      	b.n	1f1c2 <net_icmpv6_send_error+0x29e>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1ef8e:	2630      	movs	r6, #48	; 0x30
   1ef90:	e000      	b.n	1ef94 <net_icmpv6_send_error+0x70>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1ef92:	263c      	movs	r6, #60	; 0x3c
	}

	/* We only copy minimal IPv6 + next header from original message.
	 * This is so that the memory pressure is minimized.
	 */
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   1ef94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1ef98:	2230      	movs	r2, #48	; 0x30
   1ef9a:	4631      	mov	r1, r6
   1ef9c:	4628      	mov	r0, r5
   1ef9e:	f7fe fc3d 	bl	1d81c <net_pkt_copy>
	if (!frag) {
   1efa2:	4683      	mov	fp, r0
   1efa4:	2800      	cmp	r0, #0
   1efa6:	f000 8104 	beq.w	1f1b2 <net_icmpv6_send_error+0x28e>
		err = -ENOMEM;
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1efaa:	4601      	mov	r1, r0
   1efac:	4620      	mov	r0, r4
   1efae:	f7fe fc1e 	bl	1d7ee <net_pkt_frag_add>
	pkt->family = family;
   1efb2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1efb6:	220a      	movs	r2, #10
   1efb8:	f362 03c6 	bfi	r3, r2, #3, #4
   1efbc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1efc0:	6167      	str	r7, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1efc2:	7d7b      	ldrb	r3, [r7, #21]
   1efc4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1efc8:	7d7b      	ldrb	r3, [r7, #21]
   1efca:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1efce:	f10b 0008 	add.w	r0, fp, #8
   1efd2:	f7fb ff24 	bl	1ae1e <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1efd6:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ipv6_ext_len = len;
   1efda:	2000      	movs	r0, #0
   1efdc:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	net_pkt_set_ipv6_ext_len(pkt, 0);

	setup_ipv6_header(pkt, extra_len, net_if_ipv6_get_hop_limit(iface),
   1efe0:	b2b6      	uxth	r6, r6
	return iface->ipv6.hop_limit;
   1efe2:	f897 3294 	ldrb.w	r3, [r7, #660]	; 0x294
   1efe6:	f88d 8014 	strb.w	r8, [sp, #20]
   1efea:	f88d a015 	strb.w	sl, [sp, #21]
	struct net_buf *frag = pkt->frags;
   1efee:	68a1      	ldr	r1, [r4, #8]
	const u32_t unused = 0;
   1eff0:	9006      	str	r0, [sp, #24]
	return pkt->frags->data;
   1eff2:	688a      	ldr	r2, [r1, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1eff4:	f04f 0e60 	mov.w	lr, #96	; 0x60
   1eff8:	f882 e000 	strb.w	lr, [r2]
   1effc:	68a2      	ldr	r2, [r4, #8]
   1effe:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1f000:	7050      	strb	r0, [r2, #1]
   1f002:	68a2      	ldr	r2, [r4, #8]
   1f004:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1f006:	7090      	strb	r0, [r2, #2]
   1f008:	70d0      	strb	r0, [r2, #3]
	sys_put_be16(NET_ICMPH_LEN + extra_len + NET_ICMPV6_UNUSED_LEN,
   1f00a:	3608      	adds	r6, #8
   1f00c:	b2b6      	uxth	r6, r6
   1f00e:	68a2      	ldr	r2, [r4, #8]
   1f010:	6892      	ldr	r2, [r2, #8]
	dst[0] = val >> 8;
   1f012:	0a30      	lsrs	r0, r6, #8
   1f014:	7110      	strb	r0, [r2, #4]
	dst[1] = val;
   1f016:	7156      	strb	r6, [r2, #5]
   1f018:	68a2      	ldr	r2, [r4, #8]
   1f01a:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1f01c:	203a      	movs	r0, #58	; 0x3a
   1f01e:	7190      	strb	r0, [r2, #6]
   1f020:	68a2      	ldr	r2, [r4, #8]
   1f022:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   1f024:	71d3      	strb	r3, [r2, #7]
	pkt->ip_hdr_len = len;
   1f026:	2228      	movs	r2, #40	; 0x28
   1f028:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   1f02c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1f030:	9602      	str	r6, [sp, #8]
   1f032:	ab05      	add	r3, sp, #20
   1f034:	9301      	str	r3, [sp, #4]
   1f036:	f04f 0a01 	mov.w	sl, #1
   1f03a:	f8cd a000 	str.w	sl, [sp]
   1f03e:	f10d 0316 	add.w	r3, sp, #22
   1f042:	4620      	mov	r0, r4
   1f044:	f7fe fd99 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   1f048:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1f04c:	9602      	str	r6, [sp, #8]
   1f04e:	f10d 0315 	add.w	r3, sp, #21
   1f052:	9301      	str	r3, [sp, #4]
   1f054:	f8cd a000 	str.w	sl, [sp]
   1f058:	f10d 0316 	add.w	r3, sp, #22
   1f05c:	4601      	mov	r1, r0
   1f05e:	4620      	mov	r0, r4
   1f060:	f7fe fd8b 	bl	1db7a <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   1f064:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1f068:	9602      	str	r6, [sp, #8]
   1f06a:	ab06      	add	r3, sp, #24
   1f06c:	9301      	str	r3, [sp, #4]
   1f06e:	2304      	movs	r3, #4
   1f070:	9300      	str	r3, [sp, #0]
   1f072:	f10d 0316 	add.w	r3, sp, #22
   1f076:	4601      	mov	r1, r0
   1f078:	4620      	mov	r0, r4
   1f07a:	f7fe fd7e 	bl	1db7a <net_pkt_write>
			  type, code);

	/* Depending on error option, we store the param into the ICMP message.
	 */
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   1f07e:	f1b8 0f04 	cmp.w	r8, #4
   1f082:	d056      	beq.n	1f132 <net_icmpv6_send_error+0x20e>
	return pkt->frags->data;
   1f084:	68ab      	ldr	r3, [r5, #8]
   1f086:	689e      	ldr	r6, [r3, #8]
   1f088:	7e33      	ldrb	r3, [r6, #24]
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
			     sizeof(struct net_icmp_hdr));
	}

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   1f08a:	2bff      	cmp	r3, #255	; 0xff
   1f08c:	d05f      	beq.n	1f14e <net_icmpv6_send_error+0x22a>
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1f08e:	af12      	add	r7, sp, #72	; 0x48
   1f090:	4633      	mov	r3, r6
   1f092:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1f096:	6859      	ldr	r1, [r3, #4]
   1f098:	689a      	ldr	r2, [r3, #8]
   1f09a:	68db      	ldr	r3, [r3, #12]
   1f09c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1f09e:	af06      	add	r7, sp, #24
   1f0a0:	ab12      	add	r3, sp, #72	; 0x48
   1f0a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1f0a4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1f0a8:	68a3      	ldr	r3, [r4, #8]
   1f0aa:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1f0ae:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   1f0b2:	4633      	mov	r3, r6
   1f0b4:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1f0b8:	6859      	ldr	r1, [r3, #4]
   1f0ba:	689a      	ldr	r2, [r3, #8]
   1f0bc:	68db      	ldr	r3, [r3, #12]
   1f0be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f0c2:	ae16      	add	r6, sp, #88	; 0x58
   1f0c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f0c6:	f8cc 0008 	str.w	r0, [ip, #8]
   1f0ca:	f8cc 100c 	str.w	r1, [ip, #12]
   1f0ce:	f8cc 2010 	str.w	r2, [ip, #16]
   1f0d2:	f8cc 3014 	str.w	r3, [ip, #20]
   1f0d6:	68a3      	ldr	r3, [r4, #8]
   1f0d8:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1f0dc:	ae1a      	add	r6, sp, #104	; 0x68
   1f0de:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1f0e2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1f0e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f0e8:	f8ce 0018 	str.w	r0, [lr, #24]
   1f0ec:	f8ce 101c 	str.w	r1, [lr, #28]
   1f0f0:	f8ce 2020 	str.w	r2, [lr, #32]
   1f0f4:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1f0f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1f0fa:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1f0fc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1f100:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_dst(pkt)->addr = net_pkt_ll_src(orig)->addr;
   1f104:	6a2b      	ldr	r3, [r5, #32]
   1f106:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = net_pkt_ll_src(orig)->len;
   1f108:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1f10c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	/* Clear and then set the chksum */
	frag = net_icmpv6_set_chksum(pkt, pkt->frags);
   1f110:	68a1      	ldr	r1, [r4, #8]
   1f112:	4620      	mov	r0, r4
   1f114:	f7ff fbf8 	bl	1e908 <net_icmpv6_set_chksum>
			" from %s to %s", type, code, param,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1f118:	4620      	mov	r0, r4
   1f11a:	f7fb ff3d 	bl	1af98 <net_send_data>
   1f11e:	2800      	cmp	r0, #0
   1f120:	db4a      	blt.n	1f1b8 <net_icmpv6_send_error+0x294>
   1f122:	4a2d      	ldr	r2, [pc, #180]	; (1f1d8 <net_icmpv6_send_error+0x2b4>)
   1f124:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1f126:	3301      	adds	r3, #1
   1f128:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1f12a:	2500      	movs	r5, #0
   1f12c:	e04d      	b.n	1f1ca <net_icmpv6_send_error+0x2a6>
			extra_len = 0;
   1f12e:	2600      	movs	r6, #0
   1f130:	e730      	b.n	1ef94 <net_icmpv6_send_error+0x70>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   1f132:	4620      	mov	r0, r4
   1f134:	f7fe fe0a 	bl	1dd4c <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   1f138:	ea4f 4319 	mov.w	r3, r9, lsr #16
	dst[0] = val >> 8;
   1f13c:	0a1a      	lsrs	r2, r3, #8
   1f13e:	7102      	strb	r2, [r0, #4]
	dst[1] = val;
   1f140:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   1f142:	f3c9 2307 	ubfx	r3, r9, #8, #8
   1f146:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   1f148:	f880 9007 	strb.w	r9, [r0, #7]
   1f14c:	e79a      	b.n	1f084 <net_icmpv6_send_error+0x160>
   1f14e:	68a3      	ldr	r3, [r4, #8]
   1f150:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1f154:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1f158:	4633      	mov	r3, r6
   1f15a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1f15e:	6859      	ldr	r1, [r3, #4]
   1f160:	689a      	ldr	r2, [r3, #8]
   1f162:	68db      	ldr	r3, [r3, #12]
   1f164:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f168:	ae0a      	add	r6, sp, #40	; 0x28
   1f16a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f16c:	f8cc 0018 	str.w	r0, [ip, #24]
   1f170:	f8cc 101c 	str.w	r1, [ip, #28]
   1f174:	f8cc 2020 	str.w	r2, [ip, #32]
   1f178:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1f17c:	68a3      	ldr	r3, [r4, #8]
   1f17e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f182:	68ab      	ldr	r3, [r5, #8]
   1f184:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1f186:	3118      	adds	r1, #24
   1f188:	4638      	mov	r0, r7
   1f18a:	f7fc fe6b 	bl	1be64 <net_if_ipv6_select_src_addr>
   1f18e:	4603      	mov	r3, r0
   1f190:	ae0e      	add	r6, sp, #56	; 0x38
   1f192:	6800      	ldr	r0, [r0, #0]
   1f194:	6859      	ldr	r1, [r3, #4]
   1f196:	689a      	ldr	r2, [r3, #8]
   1f198:	68db      	ldr	r3, [r3, #12]
   1f19a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1f19c:	ae0e      	add	r6, sp, #56	; 0x38
   1f19e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f1a0:	f8c8 0008 	str.w	r0, [r8, #8]
   1f1a4:	f8c8 100c 	str.w	r1, [r8, #12]
   1f1a8:	f8c8 2010 	str.w	r2, [r8, #16]
   1f1ac:	f8c8 3014 	str.w	r3, [r8, #20]
   1f1b0:	e7a2      	b.n	1f0f8 <net_icmpv6_send_error+0x1d4>
		err = -ENOMEM;
   1f1b2:	f06f 050b 	mvn.w	r5, #11
   1f1b6:	e001      	b.n	1f1bc <net_icmpv6_send_error+0x298>
	int err = -EIO;
   1f1b8:	f06f 0504 	mvn.w	r5, #4
	}

drop:
	net_pkt_unref(pkt);
   1f1bc:	4620      	mov	r0, r4
   1f1be:	f7fe faec 	bl	1d79a <net_pkt_unref>
	net_stats.icmp.drop++;
   1f1c2:	4a05      	ldr	r2, [pc, #20]	; (1f1d8 <net_icmpv6_send_error+0x2b4>)
   1f1c4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f1c6:	3301      	adds	r3, #1
   1f1c8:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return err;
}
   1f1ca:	4628      	mov	r0, r5
   1f1cc:	b01f      	add	sp, #124	; 0x7c
   1f1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = -ENOMEM;
   1f1d2:	f06f 050b 	mvn.w	r5, #11
   1f1d6:	e7f4      	b.n	1f1c2 <net_icmpv6_send_error+0x29e>
   1f1d8:	20003038 	.word	0x20003038

0001f1dc <net_icmpv6_send_echo_request>:

int net_icmpv6_send_echo_request(struct net_if *iface,
				 struct in6_addr *dst,
				 u16_t identifier,
				 u16_t sequence)
{
   1f1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1e0:	b08d      	sub	sp, #52	; 0x34
   1f1e2:	4605      	mov	r5, r0
   1f1e4:	460e      	mov	r6, r1
   1f1e6:	4692      	mov	sl, r2
   1f1e8:	4699      	mov	r9, r3
	const struct in6_addr *src;
	struct net_pkt *pkt;

	src = net_if_ipv6_select_src_addr(iface, dst);
   1f1ea:	f7fc fe3b 	bl	1be64 <net_if_ipv6_select_src_addr>
   1f1ee:	4680      	mov	r8, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1f1f0:	686b      	ldr	r3, [r5, #4]
   1f1f2:	689b      	ldr	r3, [r3, #8]
   1f1f4:	4631      	mov	r1, r6
   1f1f6:	4628      	mov	r0, r5
   1f1f8:	4798      	blx	r3

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1f1fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f1fe:	f7fe fa5b 	bl	1d6b8 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt, src, dst, iface, IPPROTO_ICMPV6);
   1f202:	273a      	movs	r7, #58	; 0x3a
   1f204:	9700      	str	r7, [sp, #0]
   1f206:	462b      	mov	r3, r5
   1f208:	4632      	mov	r2, r6
   1f20a:	4641      	mov	r1, r8
   1f20c:	f000 fcc1 	bl	1fb92 <net_ipv6_create_raw>
   1f210:	4604      	mov	r4, r0
	pkt->family = family;
   1f212:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1f216:	220a      	movs	r2, #10
   1f218:	f362 03c6 	bfi	r3, r2, #3, #4
   1f21c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	pkt->iface = iface;
   1f220:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f222:	7d6b      	ldrb	r3, [r5, #21]
   1f224:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f228:	7d6b      	ldrb	r3, [r5, #21]
   1f22a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   1f22e:	aa0c      	add	r2, sp, #48	; 0x30
   1f230:	2380      	movs	r3, #128	; 0x80
   1f232:	f802 3d23 	strb.w	r3, [r2, #-35]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f23a:	2101      	movs	r1, #1
   1f23c:	f7fe fbe5 	bl	1da0a <net_pkt_append>
   1f240:	f04f 0b00 	mov.w	fp, #0
   1f244:	aa0c      	add	r2, sp, #48	; 0x30
   1f246:	f802 bd24 	strb.w	fp, [r2, #-36]!
   1f24a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f24e:	2101      	movs	r1, #1
   1f250:	4620      	mov	r0, r4
   1f252:	f7fe fbda 	bl	1da0a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f256:	ad0c      	add	r5, sp, #48	; 0x30
   1f258:	f825 bd22 	strh.w	fp, [r5, #-34]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f25c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f260:	462a      	mov	r2, r5
   1f262:	2102      	movs	r1, #2
   1f264:	4620      	mov	r0, r4
   1f266:	f7fe fbd0 	bl	1da0a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f26a:	ea4f 221a 	mov.w	r2, sl, lsr #8
   1f26e:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
   1f272:	f8ad 200e 	strh.w	r2, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f27a:	462a      	mov	r2, r5
   1f27c:	2102      	movs	r1, #2
   1f27e:	4620      	mov	r0, r4
   1f280:	f7fe fbc3 	bl	1da0a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f284:	ea4f 2319 	mov.w	r3, r9, lsr #8
   1f288:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   1f28c:	f8ad 300e 	strh.w	r3, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f294:	462a      	mov	r2, r5
   1f296:	2102      	movs	r1, #2
   1f298:	4620      	mov	r0, r4
   1f29a:	f7fe fbb6 	bl	1da0a <net_pkt_append>
	return pkt->frags->data;
   1f29e:	68a3      	ldr	r3, [r4, #8]
   1f2a0:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_pkt_append_u8(pkt, 0);   /* code */
	net_pkt_append_be16(pkt, 0); /* checksum */
	net_pkt_append_be16(pkt, identifier);
	net_pkt_append_be16(pkt, sequence);

	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1f2a4:	ad04      	add	r5, sp, #16
   1f2a6:	f8d8 0000 	ldr.w	r0, [r8]
   1f2aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1f2ae:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1f2b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1f2b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f2b8:	ad04      	add	r5, sp, #16
   1f2ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f2bc:	f8cc 0008 	str.w	r0, [ip, #8]
   1f2c0:	f8cc 100c 	str.w	r1, [ip, #12]
   1f2c4:	f8cc 2010 	str.w	r2, [ip, #16]
   1f2c8:	f8cc 3014 	str.w	r3, [ip, #20]
   1f2cc:	68a3      	ldr	r3, [r4, #8]
   1f2ce:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1f2d2:	ad08      	add	r5, sp, #32
   1f2d4:	6830      	ldr	r0, [r6, #0]
   1f2d6:	6871      	ldr	r1, [r6, #4]
   1f2d8:	68b2      	ldr	r2, [r6, #8]
   1f2da:	68f3      	ldr	r3, [r6, #12]
   1f2dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f2de:	ad08      	add	r5, sp, #32
   1f2e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f2e2:	f8ce 0018 	str.w	r0, [lr, #24]
   1f2e6:	f8ce 101c 	str.w	r1, [lr, #28]
   1f2ea:	f8ce 2020 	str.w	r2, [lr, #32]
   1f2ee:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24

	/* Clear and then set the chksum */
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1f2f2:	68a1      	ldr	r1, [r4, #8]
   1f2f4:	4620      	mov	r0, r4
   1f2f6:	f7ff fb07 	bl	1e908 <net_icmpv6_set_chksum>

	if (net_ipv6_finalize_raw(pkt, IPPROTO_ICMPV6) < 0) {
   1f2fa:	4639      	mov	r1, r7
   1f2fc:	4620      	mov	r0, r4
   1f2fe:	f000 fce6 	bl	1fcce <net_ipv6_finalize_raw>
   1f302:	4558      	cmp	r0, fp
   1f304:	db0c      	blt.n	1f320 <net_icmpv6_send_echo_request+0x144>
			" from %s to %s", NET_ICMPV6_ECHO_REQUEST,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1f306:	4620      	mov	r0, r4
   1f308:	f7fb fe46 	bl	1af98 <net_send_data>
   1f30c:	4558      	cmp	r0, fp
   1f30e:	db07      	blt.n	1f320 <net_icmpv6_send_echo_request+0x144>
	net_stats.icmp.sent++;
   1f310:	4a08      	ldr	r2, [pc, #32]	; (1f334 <net_icmpv6_send_echo_request+0x158>)
   1f312:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1f314:	3301      	adds	r3, #1
   1f316:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1f318:	4658      	mov	r0, fp
drop:
	net_pkt_unref(pkt);
	net_stats_update_icmp_drop();

	return -EIO;
}
   1f31a:	b00d      	add	sp, #52	; 0x34
   1f31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_pkt_unref(pkt);
   1f320:	4620      	mov	r0, r4
   1f322:	f7fe fa3a 	bl	1d79a <net_pkt_unref>
	net_stats.icmp.drop++;
   1f326:	4a03      	ldr	r2, [pc, #12]	; (1f334 <net_icmpv6_send_echo_request+0x158>)
   1f328:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f32a:	3301      	adds	r3, #1
   1f32c:	63d3      	str	r3, [r2, #60]	; 0x3c
	return -EIO;
   1f32e:	f06f 0004 	mvn.w	r0, #4
   1f332:	e7f2      	b.n	1f31a <net_icmpv6_send_echo_request+0x13e>
   1f334:	20003038 	.word	0x20003038

0001f338 <net_icmpv6_input>:

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   1f338:	b538      	push	{r3, r4, r5, lr}
	net_stats.icmp.recv++;
   1f33a:	4c12      	ldr	r4, [pc, #72]	; (1f384 <net_icmpv6_input+0x4c>)
   1f33c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f33e:	3301      	adds	r3, #1
   1f340:	6363      	str	r3, [r4, #52]	; 0x34
	return list->head;
   1f342:	4b11      	ldr	r3, [pc, #68]	; (1f388 <net_icmpv6_input+0x50>)
   1f344:	681b      	ldr	r3, [r3, #0]
   1f346:	e005      	b.n	1f354 <net_icmpv6_input+0x1c>
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv();

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1f348:	461d      	mov	r5, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1f34a:	b17b      	cbz	r3, 1f36c <net_icmpv6_input+0x34>
	return node->next;
   1f34c:	681c      	ldr	r4, [r3, #0]
   1f34e:	b18c      	cbz	r4, 1f374 <net_icmpv6_input+0x3c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1f350:	b175      	cbz	r5, 1f370 <net_icmpv6_input+0x38>
	return node->next;
   1f352:	681b      	ldr	r3, [r3, #0]
   1f354:	b183      	cbz	r3, 1f378 <net_icmpv6_input+0x40>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1f356:	791c      	ldrb	r4, [r3, #4]
   1f358:	428c      	cmp	r4, r1
   1f35a:	d1f5      	bne.n	1f348 <net_icmpv6_input+0x10>
   1f35c:	795c      	ldrb	r4, [r3, #5]
   1f35e:	4294      	cmp	r4, r2
   1f360:	d001      	beq.n	1f366 <net_icmpv6_input+0x2e>
   1f362:	2c00      	cmp	r4, #0
   1f364:	d1f0      	bne.n	1f348 <net_icmpv6_input+0x10>
			return cb->handler(pkt);
   1f366:	689b      	ldr	r3, [r3, #8]
   1f368:	4798      	blx	r3
   1f36a:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1f36c:	461c      	mov	r4, r3
   1f36e:	e7ee      	b.n	1f34e <net_icmpv6_input+0x16>
   1f370:	2300      	movs	r3, #0
   1f372:	e7ef      	b.n	1f354 <net_icmpv6_input+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1f374:	2300      	movs	r3, #0
   1f376:	e7ed      	b.n	1f354 <net_icmpv6_input+0x1c>
	net_stats.icmp.drop++;
   1f378:	4a02      	ldr	r2, [pc, #8]	; (1f384 <net_icmpv6_input+0x4c>)
   1f37a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f37c:	3301      	adds	r3, #1
   1f37e:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
	}

	net_stats_update_icmp_drop();

	return NET_DROP;
   1f380:	2002      	movs	r0, #2
}
   1f382:	bd38      	pop	{r3, r4, r5, pc}
   1f384:	20003038 	.word	0x20003038
   1f388:	20002464 	.word	0x20002464

0001f38c <net_icmpv6_init>:
	.code = 0,
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
   1f38c:	b508      	push	{r3, lr}
	net_icmpv6_register_handler(&echo_request_handler);
   1f38e:	4802      	ldr	r0, [pc, #8]	; (1f398 <net_icmpv6_init+0xc>)
   1f390:	f7ff fa8a 	bl	1e8a8 <net_icmpv6_register_handler>
   1f394:	bd08      	pop	{r3, pc}
   1f396:	bf00      	nop
   1f398:	2000c418 	.word	0x2000c418

0001f39c <net_nbr_unref>:
void net_nbr_unref_debug(struct net_nbr *nbr, const char *caller, int line)
#define net_nbr_unref(nbr) net_nbr_unref_debug(nbr, __func__, __LINE__)
#else
void net_nbr_unref(struct net_nbr *nbr)
#endif
{
   1f39c:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref - 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref - 1);
#endif
	if (--nbr->ref) {
   1f39e:	7803      	ldrb	r3, [r0, #0]
   1f3a0:	3b01      	subs	r3, #1
   1f3a2:	b2db      	uxtb	r3, r3
   1f3a4:	7003      	strb	r3, [r0, #0]
   1f3a6:	b913      	cbnz	r3, 1f3ae <net_nbr_unref+0x12>
		return;
	}

	if (nbr->remove) {
   1f3a8:	6903      	ldr	r3, [r0, #16]
   1f3aa:	b103      	cbz	r3, 1f3ae <net_nbr_unref+0x12>
		nbr->remove(nbr);
   1f3ac:	4798      	blx	r3
   1f3ae:	bd08      	pop	{r3, pc}

0001f3b0 <net_nbr_ref>:
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref + 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref + 1);
#endif
	nbr->ref++;
   1f3b0:	7803      	ldrb	r3, [r0, #0]
   1f3b2:	3301      	adds	r3, #1
   1f3b4:	7003      	strb	r3, [r0, #0]

	return nbr;
}
   1f3b6:	4770      	bx	lr

0001f3b8 <net_nbr_get>:

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   1f3b8:	2100      	movs	r1, #0
   1f3ba:	8903      	ldrh	r3, [r0, #8]
   1f3bc:	4299      	cmp	r1, r3
   1f3be:	da17      	bge.n	1f3f0 <net_nbr_get+0x38>
{
   1f3c0:	b510      	push	{r4, lr}
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   1f3c2:	6802      	ldr	r2, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   1f3c4:	8853      	ldrh	r3, [r2, #2]
   1f3c6:	8894      	ldrh	r4, [r2, #4]
   1f3c8:	4423      	add	r3, r4
   1f3ca:	3314      	adds	r3, #20
   1f3cc:	fb03 f301 	mul.w	r3, r3, r1
	return (struct net_nbr *)((void *)start +
   1f3d0:	18d4      	adds	r4, r2, r3

		if (!nbr->ref) {
   1f3d2:	5cd3      	ldrb	r3, [r2, r3]
   1f3d4:	b12b      	cbz	r3, 1f3e2 <net_nbr_get+0x2a>
	for (i = 0; i < table->nbr_count; i++) {
   1f3d6:	3101      	adds	r1, #1
   1f3d8:	8903      	ldrh	r3, [r0, #8]
   1f3da:	4299      	cmp	r1, r3
   1f3dc:	dbf1      	blt.n	1f3c2 <net_nbr_get+0xa>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   1f3de:	2000      	movs	r0, #0
}
   1f3e0:	bd10      	pop	{r4, pc}
			nbr->data = nbr->__nbr;
   1f3e2:	f104 0314 	add.w	r3, r4, #20
   1f3e6:	60e3      	str	r3, [r4, #12]
			return net_nbr_ref(nbr);
   1f3e8:	4620      	mov	r0, r4
   1f3ea:	f7ff ffe1 	bl	1f3b0 <net_nbr_ref>
   1f3ee:	bd10      	pop	{r4, pc}
	return NULL;
   1f3f0:	2000      	movs	r0, #0
   1f3f2:	4770      	bx	lr

0001f3f4 <net_nbr_link>:
int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1f3f4:	7843      	ldrb	r3, [r0, #1]
   1f3f6:	2bff      	cmp	r3, #255	; 0xff
   1f3f8:	d158      	bne.n	1f4ac <net_nbr_link+0xb8>
{
   1f3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f3fe:	4690      	mov	r8, r2
   1f400:	460f      	mov	r7, r1
   1f402:	4606      	mov	r6, r0
   1f404:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f408:	2400      	movs	r4, #0
   1f40a:	e008      	b.n	1f41e <net_nbr_link+0x2a>
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1f40c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1f410:	4b2a      	ldr	r3, [pc, #168]	; (1f4bc <net_nbr_link+0xc8>)
   1f412:	4413      	add	r3, r2
   1f414:	7a1b      	ldrb	r3, [r3, #8]
   1f416:	b933      	cbnz	r3, 1f426 <net_nbr_link+0x32>
			avail = i;
   1f418:	4625      	mov	r5, r4
   1f41a:	e004      	b.n	1f426 <net_nbr_link+0x32>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f41c:	3401      	adds	r4, #1
   1f41e:	2c07      	cmp	r4, #7
   1f420:	dc1e      	bgt.n	1f460 <net_nbr_link+0x6c>
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1f422:	2d00      	cmp	r5, #0
   1f424:	dbf2      	blt.n	1f40c <net_nbr_link+0x18>
		}

		if (net_neighbor_lladdr[i].ref &&
   1f426:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1f42a:	4b24      	ldr	r3, [pc, #144]	; (1f4bc <net_nbr_link+0xc8>)
   1f42c:	4413      	add	r3, r2
   1f42e:	7a1b      	ldrb	r3, [r3, #8]
   1f430:	2b00      	cmp	r3, #0
   1f432:	d0f3      	beq.n	1f41c <net_nbr_link+0x28>
		    !memcmp(lladdr->addr,
			    net_neighbor_lladdr[i].lladdr.addr,
   1f434:	4921      	ldr	r1, [pc, #132]	; (1f4bc <net_nbr_link+0xc8>)
   1f436:	4411      	add	r1, r2
		    !memcmp(lladdr->addr,
   1f438:	f898 2004 	ldrb.w	r2, [r8, #4]
   1f43c:	3102      	adds	r1, #2
   1f43e:	f8d8 0000 	ldr.w	r0, [r8]
   1f442:	f00b f9a5 	bl	2a790 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   1f446:	4603      	mov	r3, r0
   1f448:	2800      	cmp	r0, #0
   1f44a:	d1e7      	bne.n	1f41c <net_nbr_link+0x28>
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   1f44c:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
   1f450:	4a1a      	ldr	r2, [pc, #104]	; (1f4bc <net_nbr_link+0xc8>)
   1f452:	440a      	add	r2, r1
   1f454:	7a11      	ldrb	r1, [r2, #8]
   1f456:	3101      	adds	r1, #1
   1f458:	7211      	strb	r1, [r2, #8]

			nbr->idx = i;
   1f45a:	7074      	strb	r4, [r6, #1]
			nbr->iface = iface;
   1f45c:	60b7      	str	r7, [r6, #8]

			return 0;
   1f45e:	e019      	b.n	1f494 <net_nbr_link+0xa0>
		}
	}

	if (avail < 0) {
   1f460:	2d00      	cmp	r5, #0
   1f462:	db27      	blt.n	1f4b4 <net_nbr_link+0xc0>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
   1f464:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   1f468:	4b14      	ldr	r3, [pc, #80]	; (1f4bc <net_nbr_link+0xc8>)
   1f46a:	4413      	add	r3, r2
   1f46c:	7a1a      	ldrb	r2, [r3, #8]
   1f46e:	3201      	adds	r2, #1
   1f470:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   1f472:	7075      	strb	r5, [r6, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   1f474:	f8d8 1000 	ldr.w	r1, [r8]
   1f478:	f898 2004 	ldrb.w	r2, [r8, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1f47c:	b109      	cbz	r1, 1f482 <net_nbr_link+0x8e>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1f47e:	2a06      	cmp	r2, #6
   1f480:	d90b      	bls.n	1f49a <net_nbr_link+0xa6>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   1f482:	f898 2004 	ldrb.w	r2, [r8, #4]
   1f486:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1f48a:	4b0c      	ldr	r3, [pc, #48]	; (1f4bc <net_nbr_link+0xc8>)
   1f48c:	441d      	add	r5, r3
   1f48e:	706a      	strb	r2, [r5, #1]

	nbr->iface = iface;
   1f490:	60b7      	str	r7, [r6, #8]

	return 0;
   1f492:	2300      	movs	r3, #0
}
   1f494:	4618      	mov	r0, r3
   1f496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
   1f49a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1f49e:	4807      	ldr	r0, [pc, #28]	; (1f4bc <net_nbr_link+0xc8>)
   1f4a0:	4418      	add	r0, r3
   1f4a2:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1f4a4:	3002      	adds	r0, #2
   1f4a6:	f7e0 ff0b 	bl	2c0 <memcpy>
   1f4aa:	e7ea      	b.n	1f482 <net_nbr_link+0x8e>
		return -EALREADY;
   1f4ac:	f06f 0377 	mvn.w	r3, #119	; 0x77
}
   1f4b0:	4618      	mov	r0, r3
   1f4b2:	4770      	bx	lr
		return -ENOENT;
   1f4b4:	f06f 0301 	mvn.w	r3, #1
   1f4b8:	e7ec      	b.n	1f494 <net_nbr_link+0xa0>
   1f4ba:	bf00      	nop
   1f4bc:	2000246c 	.word	0x2000246c

0001f4c0 <net_nbr_get_lladdr>:
{
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
   1f4c0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1f4c4:	4b01      	ldr	r3, [pc, #4]	; (1f4cc <net_nbr_get_lladdr+0xc>)
   1f4c6:	4418      	add	r0, r3
   1f4c8:	4770      	bx	lr
   1f4ca:	bf00      	nop
   1f4cc:	2000246c 	.word	0x2000246c

0001f4d0 <ipv6_nbr_set_state>:
	bool is_router;
};

static inline struct net_ipv6_nbr_data *net_ipv6_nbr_data(struct net_nbr *nbr)
{
	return (struct net_ipv6_nbr_data *)nbr->data;
   1f4d0:	68c2      	ldr	r2, [r0, #12]
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   1f4d2:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
   1f4d6:	428b      	cmp	r3, r1
   1f4d8:	d003      	beq.n	1f4e2 <ipv6_nbr_set_state+0x12>
   1f4da:	2b05      	cmp	r3, #5
   1f4dc:	d001      	beq.n	1f4e2 <ipv6_nbr_set_state+0x12>

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   1f4de:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
   1f4e2:	4770      	bx	lr

0001f4e4 <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
   1f4e4:	b570      	push	{r4, r5, r6, lr}
   1f4e6:	4605      	mov	r5, r0
   1f4e8:	460e      	mov	r6, r1
	struct iface_cb_data *data = user_data;
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f4ea:	2400      	movs	r4, #0
   1f4ec:	e000      	b.n	1f4f0 <iface_cb+0xc>
   1f4ee:	3401      	adds	r4, #1
   1f4f0:	2c07      	cmp	r4, #7
   1f4f2:	dc0c      	bgt.n	1f50e <iface_cb+0x2a>
	return &net_neighbor_pool[idx].nbr;
   1f4f4:	4a06      	ldr	r2, [pc, #24]	; (1f510 <iface_cb+0x2c>)
   1f4f6:	01e3      	lsls	r3, r4, #7
   1f4f8:	18d0      	adds	r0, r2, r3
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
   1f4fa:	5cd3      	ldrb	r3, [r2, r3]
   1f4fc:	2b00      	cmp	r3, #0
   1f4fe:	d0f6      	beq.n	1f4ee <iface_cb+0xa>
   1f500:	6883      	ldr	r3, [r0, #8]
   1f502:	42ab      	cmp	r3, r5
   1f504:	d1f3      	bne.n	1f4ee <iface_cb+0xa>
			continue;
		}

		data->cb(nbr, data->user_data);
   1f506:	6833      	ldr	r3, [r6, #0]
   1f508:	6871      	ldr	r1, [r6, #4]
   1f50a:	4798      	blx	r3
   1f50c:	e7ef      	b.n	1f4ee <iface_cb+0xa>
	}
}
   1f50e:	bd70      	pop	{r4, r5, r6, pc}
   1f510:	2000c448 	.word	0x2000c448

0001f514 <iface_cb>:

	return "<unknown type>";
}

static void iface_cb(struct net_if *iface, void *user_data)
{
   1f514:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f516:	b085      	sub	sp, #20
   1f518:	4605      	mov	r5, r0
	const char *extra;
	int i, count;

	ARG_UNUSED(user_data);

	printk("\nInterface %p (%s)\n", iface, iface2str(iface, &extra));
   1f51a:	a903      	add	r1, sp, #12
   1f51c:	f004 ff0a 	bl	24334 <iface2str>
   1f520:	4602      	mov	r2, r0
   1f522:	4629      	mov	r1, r5
   1f524:	4885      	ldr	r0, [pc, #532]	; (1f73c <iface_cb+0x228>)
   1f526:	f7e3 fd15 	bl	2f54 <printk>
	printk("=======================%s\n", extra);
   1f52a:	9903      	ldr	r1, [sp, #12]
   1f52c:	4884      	ldr	r0, [pc, #528]	; (1f740 <iface_cb+0x22c>)
   1f52e:	f7e3 fd11 	bl	2f54 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f532:	f3bf 8f5b 	dmb	ish
   1f536:	68eb      	ldr	r3, [r5, #12]
   1f538:	f3bf 8f5b 	dmb	ish

	if (!net_if_is_up(iface)) {
   1f53c:	f013 0f01 	tst.w	r3, #1
   1f540:	d014      	beq.n	1f56c <iface_cb+0x58>
#if NET_LOG_ENABLED > 0
static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   1f542:	2318      	movs	r3, #24
   1f544:	4a7f      	ldr	r2, [pc, #508]	; (1f744 <iface_cb+0x230>)
   1f546:	7d29      	ldrb	r1, [r5, #20]
   1f548:	6928      	ldr	r0, [r5, #16]
   1f54a:	f7fe fd45 	bl	1dfd8 <net_sprint_ll_addr_buf>
		printk("Interface is down.\n");
		return;
	}

	printk("Link addr : %s\n", net_sprint_ll_addr(iface->link_addr.addr,
   1f54e:	4601      	mov	r1, r0
   1f550:	487d      	ldr	r0, [pc, #500]	; (1f748 <iface_cb+0x234>)
   1f552:	f7e3 fcff 	bl	2f54 <printk>
						      iface->link_addr.len));
	printk("MTU       : %d\n", iface->mtu);
   1f556:	8d29      	ldrh	r1, [r5, #40]	; 0x28
   1f558:	487c      	ldr	r0, [pc, #496]	; (1f74c <iface_cb+0x238>)
   1f55a:	f7e3 fcfb 	bl	2f54 <printk>

#if defined(CONFIG_NET_IPV6)
	count = 0;

	printk("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   1f55e:	2103      	movs	r1, #3
   1f560:	487b      	ldr	r0, [pc, #492]	; (1f750 <iface_cb+0x23c>)
   1f562:	f7e3 fcf7 	bl	2f54 <printk>
	count = 0;
   1f566:	2700      	movs	r7, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f568:	463c      	mov	r4, r7
   1f56a:	e02e      	b.n	1f5ca <iface_cb+0xb6>
		printk("Interface is down.\n");
   1f56c:	4879      	ldr	r0, [pc, #484]	; (1f754 <iface_cb+0x240>)
   1f56e:	f7e3 fcf1 	bl	2f54 <printk>
   1f572:	e0db      	b.n	1f72c <iface_cb+0x218>
		return "<unknown type>";
   1f574:	4a78      	ldr	r2, [pc, #480]	; (1f758 <iface_cb+0x244>)
   1f576:	e006      	b.n	1f586 <iface_cb+0x72>
		return "DHCP";
   1f578:	4a78      	ldr	r2, [pc, #480]	; (1f75c <iface_cb+0x248>)
   1f57a:	e004      	b.n	1f586 <iface_cb+0x72>
		return "manual";
   1f57c:	4a78      	ldr	r2, [pc, #480]	; (1f760 <iface_cb+0x24c>)
   1f57e:	e002      	b.n	1f586 <iface_cb+0x72>
	return "<invalid type>";
   1f580:	4a78      	ldr	r2, [pc, #480]	; (1f764 <iface_cb+0x250>)
   1f582:	e000      	b.n	1f586 <iface_cb+0x72>
		return "autoconf";
   1f584:	4a78      	ldr	r2, [pc, #480]	; (1f768 <iface_cb+0x254>)

		if (!unicast->is_used) {
			continue;
		}

		printk("\t%s %s %s%s\n",
   1f586:	236c      	movs	r3, #108	; 0x6c
   1f588:	fb03 5304 	mla	r3, r3, r4, r5
   1f58c:	f993 3091 	ldrsb.w	r3, [r3, #145]	; 0x91
	switch (addr_state) {
   1f590:	3301      	adds	r3, #1
   1f592:	2b03      	cmp	r3, #3
   1f594:	d809      	bhi.n	1f5aa <iface_cb+0x96>
   1f596:	e8df f003 	tbb	[pc, r3]
   1f59a:	0a02      	.short	0x0a02
   1f59c:	0604      	.short	0x0604
		return "<unknown state>";
   1f59e:	4b73      	ldr	r3, [pc, #460]	; (1f76c <iface_cb+0x258>)
   1f5a0:	e006      	b.n	1f5b0 <iface_cb+0x9c>
		return "preferred";
   1f5a2:	4b73      	ldr	r3, [pc, #460]	; (1f770 <iface_cb+0x25c>)
   1f5a4:	e004      	b.n	1f5b0 <iface_cb+0x9c>
		return "deprecated";
   1f5a6:	4b73      	ldr	r3, [pc, #460]	; (1f774 <iface_cb+0x260>)
   1f5a8:	e002      	b.n	1f5b0 <iface_cb+0x9c>
	return "<invalid state>";
   1f5aa:	4b73      	ldr	r3, [pc, #460]	; (1f778 <iface_cb+0x264>)
   1f5ac:	e000      	b.n	1f5b0 <iface_cb+0x9c>
		return "tentative";
   1f5ae:	4b73      	ldr	r3, [pc, #460]	; (1f77c <iface_cb+0x268>)
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
		       addrtype2str(unicast->addr_type),
		       addrstate2str(unicast->addr_state),
		       unicast->is_infinite ? " infinite" : "");
   1f5b0:	266c      	movs	r6, #108	; 0x6c
   1f5b2:	fb06 5604 	mla	r6, r6, r4, r5
   1f5b6:	f896 0093 	ldrb.w	r0, [r6, #147]	; 0x93
		printk("\t%s %s %s%s\n",
   1f5ba:	b368      	cbz	r0, 1f618 <iface_cb+0x104>
   1f5bc:	4870      	ldr	r0, [pc, #448]	; (1f780 <iface_cb+0x26c>)
   1f5be:	9000      	str	r0, [sp, #0]
   1f5c0:	4870      	ldr	r0, [pc, #448]	; (1f784 <iface_cb+0x270>)
   1f5c2:	f7e3 fcc7 	bl	2f54 <printk>
		count++;
   1f5c6:	3701      	adds	r7, #1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f5c8:	3401      	adds	r4, #1
   1f5ca:	2c02      	cmp	r4, #2
   1f5cc:	dc26      	bgt.n	1f61c <iface_cb+0x108>
		if (!unicast->is_used) {
   1f5ce:	236c      	movs	r3, #108	; 0x6c
   1f5d0:	fb03 5304 	mla	r3, r3, r4, r5
   1f5d4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1f5d8:	2b00      	cmp	r3, #0
   1f5da:	d0f5      	beq.n	1f5c8 <iface_cb+0xb4>
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
   1f5dc:	266c      	movs	r6, #108	; 0x6c
   1f5de:	fb06 f604 	mul.w	r6, r6, r4
   1f5e2:	f106 0120 	add.w	r1, r6, #32
   1f5e6:	4429      	add	r1, r5
static inline char *net_sprint_ipv6_addr(const struct in6_addr *addr)
{
#if defined(CONFIG_NET_IPV6)
	static char buf[NET_IPV6_ADDR_LEN];

	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   1f5e8:	2328      	movs	r3, #40	; 0x28
   1f5ea:	4a67      	ldr	r2, [pc, #412]	; (1f788 <iface_cb+0x274>)
   1f5ec:	3110      	adds	r1, #16
   1f5ee:	200a      	movs	r0, #10
   1f5f0:	f7fe fd1c 	bl	1e02c <net_addr_ntop>
   1f5f4:	4601      	mov	r1, r0
		printk("\t%s %s %s%s\n",
   1f5f6:	442e      	add	r6, r5
   1f5f8:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
	switch (addr_type) {
   1f5fc:	2b03      	cmp	r3, #3
   1f5fe:	d8bf      	bhi.n	1f580 <iface_cb+0x6c>
   1f600:	a201      	add	r2, pc, #4	; (adr r2, 1f608 <iface_cb+0xf4>)
   1f602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f606:	bf00      	nop
   1f608:	0001f575 	.word	0x0001f575
   1f60c:	0001f585 	.word	0x0001f585
   1f610:	0001f579 	.word	0x0001f579
   1f614:	0001f57d 	.word	0x0001f57d
		printk("\t%s %s %s%s\n",
   1f618:	485c      	ldr	r0, [pc, #368]	; (1f78c <iface_cb+0x278>)
   1f61a:	e7d0      	b.n	1f5be <iface_cb+0xaa>
	}

	if (count == 0) {
   1f61c:	b137      	cbz	r7, 1f62c <iface_cb+0x118>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   1f61e:	2105      	movs	r1, #5
   1f620:	485b      	ldr	r0, [pc, #364]	; (1f790 <iface_cb+0x27c>)
   1f622:	f7e3 fc97 	bl	2f54 <printk>
	count = 0;
   1f626:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f628:	4634      	mov	r4, r6
   1f62a:	e004      	b.n	1f636 <iface_cb+0x122>
		printk("\t<none>\n");
   1f62c:	4859      	ldr	r0, [pc, #356]	; (1f794 <iface_cb+0x280>)
   1f62e:	f7e3 fc91 	bl	2f54 <printk>
   1f632:	e7f4      	b.n	1f61e <iface_cb+0x10a>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f634:	3401      	adds	r4, #1
   1f636:	2c04      	cmp	r4, #4
   1f638:	dc18      	bgt.n	1f66c <iface_cb+0x158>
		mcast = &iface->ipv6.mcast[i];

		if (!mcast->is_used) {
   1f63a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1f63e:	00d3      	lsls	r3, r2, #3
   1f640:	461a      	mov	r2, r3
   1f642:	442b      	add	r3, r5
   1f644:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1f648:	f013 0f01 	tst.w	r3, #1
   1f64c:	d0f2      	beq.n	1f634 <iface_cb+0x120>
			continue;
		}

		printk("\t%s\n",
		       net_sprint_ipv6_addr(&mcast->address.in6_addr));
   1f64e:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1f652:	4429      	add	r1, r5
   1f654:	2328      	movs	r3, #40	; 0x28
   1f656:	4a4c      	ldr	r2, [pc, #304]	; (1f788 <iface_cb+0x274>)
   1f658:	3118      	adds	r1, #24
   1f65a:	200a      	movs	r0, #10
   1f65c:	f7fe fce6 	bl	1e02c <net_addr_ntop>
		printk("\t%s\n",
   1f660:	4601      	mov	r1, r0
   1f662:	484d      	ldr	r0, [pc, #308]	; (1f798 <iface_cb+0x284>)
   1f664:	f7e3 fc76 	bl	2f54 <printk>

		count++;
   1f668:	3601      	adds	r6, #1
   1f66a:	e7e3      	b.n	1f634 <iface_cb+0x120>
	}

	if (count == 0) {
   1f66c:	b136      	cbz	r6, 1f67c <iface_cb+0x168>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   1f66e:	2102      	movs	r1, #2
   1f670:	484a      	ldr	r0, [pc, #296]	; (1f79c <iface_cb+0x288>)
   1f672:	f7e3 fc6f 	bl	2f54 <printk>
	count = 0;
   1f676:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1f678:	4634      	mov	r4, r6
   1f67a:	e009      	b.n	1f690 <iface_cb+0x17c>
		printk("\t<none>\n");
   1f67c:	4845      	ldr	r0, [pc, #276]	; (1f794 <iface_cb+0x280>)
   1f67e:	f7e3 fc69 	bl	2f54 <printk>
   1f682:	e7f4      	b.n	1f66e <iface_cb+0x15a>

		if (!prefix->is_used) {
			continue;
		}

		printk("\t%s/%d%s\n",
   1f684:	4b41      	ldr	r3, [pc, #260]	; (1f78c <iface_cb+0x278>)
   1f686:	4846      	ldr	r0, [pc, #280]	; (1f7a0 <iface_cb+0x28c>)
   1f688:	f7e3 fc64 	bl	2f54 <printk>
		       net_sprint_ipv6_addr(&prefix->prefix),
		       prefix->len,
		       prefix->is_infinite ? " infinite" : "");

		count++;
   1f68c:	3601      	adds	r6, #1
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1f68e:	3401      	adds	r4, #1
   1f690:	2c01      	cmp	r4, #1
   1f692:	dc1e      	bgt.n	1f6d2 <iface_cb+0x1be>
		if (!prefix->is_used) {
   1f694:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1f698:	0093      	lsls	r3, r2, #2
   1f69a:	461a      	mov	r2, r3
   1f69c:	442b      	add	r3, r5
   1f69e:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
   1f6a2:	2b00      	cmp	r3, #0
   1f6a4:	d0f3      	beq.n	1f68e <iface_cb+0x17a>
		       net_sprint_ipv6_addr(&prefix->prefix),
   1f6a6:	0127      	lsls	r7, r4, #4
   1f6a8:	f502 7100 	add.w	r1, r2, #512	; 0x200
   1f6ac:	4429      	add	r1, r5
   1f6ae:	2328      	movs	r3, #40	; 0x28
   1f6b0:	4a35      	ldr	r2, [pc, #212]	; (1f788 <iface_cb+0x274>)
   1f6b2:	3110      	adds	r1, #16
   1f6b4:	200a      	movs	r0, #10
   1f6b6:	f7fe fcb9 	bl	1e02c <net_addr_ntop>
   1f6ba:	4601      	mov	r1, r0
		       prefix->len,
   1f6bc:	1b3f      	subs	r7, r7, r4
   1f6be:	00bb      	lsls	r3, r7, #2
   1f6c0:	442b      	add	r3, r5
   1f6c2:	f893 2220 	ldrb.w	r2, [r3, #544]	; 0x220
		       prefix->is_infinite ? " infinite" : "");
   1f6c6:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
		printk("\t%s/%d%s\n",
   1f6ca:	2b00      	cmp	r3, #0
   1f6cc:	d0da      	beq.n	1f684 <iface_cb+0x170>
   1f6ce:	4b2c      	ldr	r3, [pc, #176]	; (1f780 <iface_cb+0x26c>)
   1f6d0:	e7d9      	b.n	1f686 <iface_cb+0x172>
	}

	if (count == 0) {
   1f6d2:	b36e      	cbz	r6, 1f730 <iface_cb+0x21c>
		printk("\t<none>\n");
	}

	router = net_if_ipv6_router_find_default(iface, NULL);
   1f6d4:	2100      	movs	r1, #0
   1f6d6:	4628      	mov	r0, r5
   1f6d8:	f7fc fade 	bl	1bc98 <net_if_ipv6_router_find_default>
	if (router) {
   1f6dc:	4604      	mov	r4, r0
   1f6de:	b188      	cbz	r0, 1f704 <iface_cb+0x1f0>
		printk("IPv6 default router :\n");
   1f6e0:	4830      	ldr	r0, [pc, #192]	; (1f7a4 <iface_cb+0x290>)
   1f6e2:	f7e3 fc37 	bl	2f54 <printk>
   1f6e6:	2328      	movs	r3, #40	; 0x28
   1f6e8:	4a27      	ldr	r2, [pc, #156]	; (1f788 <iface_cb+0x274>)
   1f6ea:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   1f6ee:	200a      	movs	r0, #10
   1f6f0:	f7fe fc9c 	bl	1e02c <net_addr_ntop>
   1f6f4:	4601      	mov	r1, r0
		printk("\t%s%s\n",
		       net_sprint_ipv6_addr(&router->address.in6_addr),
		       router->is_infinite ? " infinite" : "");
   1f6f6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		printk("\t%s%s\n",
   1f6fa:	b1eb      	cbz	r3, 1f738 <iface_cb+0x224>
   1f6fc:	4a20      	ldr	r2, [pc, #128]	; (1f780 <iface_cb+0x26c>)
   1f6fe:	482a      	ldr	r0, [pc, #168]	; (1f7a8 <iface_cb+0x294>)
   1f700:	f7e3 fc28 	bl	2f54 <printk>
	}

	printk("IPv6 hop limit           : %d\n", iface->ipv6.hop_limit);
   1f704:	f895 1294 	ldrb.w	r1, [r5, #660]	; 0x294
   1f708:	4828      	ldr	r0, [pc, #160]	; (1f7ac <iface_cb+0x298>)
   1f70a:	f7e3 fc23 	bl	2f54 <printk>
	printk("IPv6 base reachable time : %d\n",
   1f70e:	f8d5 1288 	ldr.w	r1, [r5, #648]	; 0x288
   1f712:	4827      	ldr	r0, [pc, #156]	; (1f7b0 <iface_cb+0x29c>)
   1f714:	f7e3 fc1e 	bl	2f54 <printk>
	       iface->ipv6.base_reachable_time);
	printk("IPv6 reachable time      : %d\n", iface->ipv6.reachable_time);
   1f718:	f8d5 128c 	ldr.w	r1, [r5, #652]	; 0x28c
   1f71c:	4825      	ldr	r0, [pc, #148]	; (1f7b4 <iface_cb+0x2a0>)
   1f71e:	f7e3 fc19 	bl	2f54 <printk>
	printk("IPv6 retransmit timer    : %d\n", iface->ipv6.retrans_timer);
   1f722:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
   1f726:	4824      	ldr	r0, [pc, #144]	; (1f7b8 <iface_cb+0x2a4>)
   1f728:	f7e3 fc14 	bl	2f54 <printk>
	       net_sprint_ipv4_addr(&iface->dhcpv4.requested_ip));
	printk("DHCPv4 state      : %s\n",
	       net_dhcpv4_state_name(iface->dhcpv4.state));
	printk("DHCPv4 attempts   : %d\n", iface->dhcpv4.attempts);
#endif /* CONFIG_NET_DHCPV4 */
}
   1f72c:	b005      	add	sp, #20
   1f72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("\t<none>\n");
   1f730:	4818      	ldr	r0, [pc, #96]	; (1f794 <iface_cb+0x280>)
   1f732:	f7e3 fc0f 	bl	2f54 <printk>
   1f736:	e7cd      	b.n	1f6d4 <iface_cb+0x1c0>
		printk("\t%s%s\n",
   1f738:	4a14      	ldr	r2, [pc, #80]	; (1f78c <iface_cb+0x278>)
   1f73a:	e7e0      	b.n	1f6fe <iface_cb+0x1ea>
   1f73c:	00031d64 	.word	0x00031d64
   1f740:	00031f14 	.word	0x00031f14
   1f744:	200029f8 	.word	0x200029f8
   1f748:	00031d8c 	.word	0x00031d8c
   1f74c:	00031d9c 	.word	0x00031d9c
   1f750:	00031dac 	.word	0x00031dac
   1f754:	00031d78 	.word	0x00031d78
   1f758:	00031ccc 	.word	0x00031ccc
   1f75c:	00031d04 	.word	0x00031d04
   1f760:	00031d0c 	.word	0x00031d0c
   1f764:	00031d14 	.word	0x00031d14
   1f768:	00031cf8 	.word	0x00031cf8
   1f76c:	00031d24 	.word	0x00031d24
   1f770:	00031d40 	.word	0x00031d40
   1f774:	00031d4c 	.word	0x00031d4c
   1f778:	00031c18 	.word	0x00031c18
   1f77c:	00031d34 	.word	0x00031d34
   1f780:	00031d58 	.word	0x00031d58
   1f784:	00031dd0 	.word	0x00031dd0
   1f788:	20002a10 	.word	0x20002a10
   1f78c:	0002f064 	.word	0x0002f064
   1f790:	00031dec 	.word	0x00031dec
   1f794:	00031de0 	.word	0x00031de0
   1f798:	00031e10 	.word	0x00031e10
   1f79c:	00031e18 	.word	0x00031e18
   1f7a0:	00031e34 	.word	0x00031e34
   1f7a4:	00031e40 	.word	0x00031e40
   1f7a8:	00031e58 	.word	0x00031e58
   1f7ac:	00031e60 	.word	0x00031e60
   1f7b0:	00031e80 	.word	0x00031e80
   1f7b4:	00031ea0 	.word	0x00031ea0
   1f7b8:	00031ec0 	.word	0x00031ec0

0001f7bc <net_neighbor_data_remove>:
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
				lladdr, is_router, state);
}

void net_neighbor_data_remove(struct net_nbr *nbr)
{
   1f7bc:	4770      	bx	lr

0001f7be <net_neighbor_table_clear>:

	return;
}

void net_neighbor_table_clear(struct net_nbr_table *table)
{
   1f7be:	4770      	bx	lr

0001f7c0 <nbr_lookup>:
{
   1f7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f7c2:	460e      	mov	r6, r1
   1f7c4:	4617      	mov	r7, r2
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f7c6:	2400      	movs	r4, #0
   1f7c8:	e000      	b.n	1f7cc <nbr_lookup+0xc>
   1f7ca:	3401      	adds	r4, #1
   1f7cc:	2c07      	cmp	r4, #7
   1f7ce:	dc11      	bgt.n	1f7f4 <nbr_lookup+0x34>
	return &net_neighbor_pool[idx].nbr;
   1f7d0:	4a0a      	ldr	r2, [pc, #40]	; (1f7fc <nbr_lookup+0x3c>)
   1f7d2:	01e3      	lsls	r3, r4, #7
   1f7d4:	18d5      	adds	r5, r2, r3
		if (!nbr->ref) {
   1f7d6:	5cd3      	ldrb	r3, [r2, r3]
   1f7d8:	2b00      	cmp	r3, #0
   1f7da:	d0f6      	beq.n	1f7ca <nbr_lookup+0xa>
		if (nbr->iface == iface &&
   1f7dc:	68ab      	ldr	r3, [r5, #8]
   1f7de:	42b3      	cmp	r3, r6
   1f7e0:	d1f3      	bne.n	1f7ca <nbr_lookup+0xa>
   1f7e2:	68e8      	ldr	r0, [r5, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1f7e4:	2210      	movs	r2, #16
   1f7e6:	4639      	mov	r1, r7
   1f7e8:	3004      	adds	r0, #4
   1f7ea:	f00a ffd1 	bl	2a790 <memcmp>
   1f7ee:	2800      	cmp	r0, #0
   1f7f0:	d1eb      	bne.n	1f7ca <nbr_lookup+0xa>
   1f7f2:	e000      	b.n	1f7f6 <nbr_lookup+0x36>
	return NULL;
   1f7f4:	2500      	movs	r5, #0
}
   1f7f6:	4628      	mov	r0, r5
   1f7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f7fa:	bf00      	nop
   1f7fc:	2000c448 	.word	0x2000c448

0001f800 <nbr_clear_ns_pending>:
{
   1f800:	b510      	push	{r4, lr}
   1f802:	4604      	mov	r4, r0
	k_delayed_work_cancel(&data->send_ns);
   1f804:	303c      	adds	r0, #60	; 0x3c
   1f806:	f00a fb93 	bl	29f30 <k_delayed_work_cancel>
	if (data->pending) {
   1f80a:	6820      	ldr	r0, [r4, #0]
   1f80c:	b118      	cbz	r0, 1f816 <nbr_clear_ns_pending+0x16>
		net_pkt_unref(data->pending);
   1f80e:	f7fd ffc4 	bl	1d79a <net_pkt_unref>
		data->pending = NULL;
   1f812:	2300      	movs	r3, #0
   1f814:	6023      	str	r3, [r4, #0]
   1f816:	bd10      	pop	{r4, pc}

0001f818 <ns_reply_timeout>:
{
   1f818:	b538      	push	{r3, r4, r5, lr}
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1f81a:	f1a0 013c 	sub.w	r1, r0, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f81e:	2300      	movs	r3, #0
   1f820:	2b07      	cmp	r3, #7
   1f822:	dc07      	bgt.n	1f834 <ns_reply_timeout+0x1c>
	return &net_neighbor_pool[idx].nbr;
   1f824:	4c0d      	ldr	r4, [pc, #52]	; (1f85c <ns_reply_timeout+0x44>)
   1f826:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   1f82a:	68e2      	ldr	r2, [r4, #12]
   1f82c:	4291      	cmp	r1, r2
   1f82e:	d002      	beq.n	1f836 <ns_reply_timeout+0x1e>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f830:	3301      	adds	r3, #1
   1f832:	e7f5      	b.n	1f820 <ns_reply_timeout+0x8>
	return NULL;
   1f834:	2400      	movs	r4, #0
	if (!nbr) {
   1f836:	b184      	cbz	r4, 1f85a <ns_reply_timeout+0x42>
	if (!data->pending) {
   1f838:	f850 3c3c 	ldr.w	r3, [r0, #-60]
   1f83c:	b16b      	cbz	r3, 1f85a <ns_reply_timeout+0x42>
   1f83e:	4605      	mov	r5, r0
	net_pkt_unref(data->pending);
   1f840:	4618      	mov	r0, r3
   1f842:	f7fd ffaa 	bl	1d79a <net_pkt_unref>
	net_pkt_unref(data->pending);
   1f846:	f855 0c3c 	ldr.w	r0, [r5, #-60]
   1f84a:	f7fd ffa6 	bl	1d79a <net_pkt_unref>
	data->pending = NULL;
   1f84e:	2300      	movs	r3, #0
   1f850:	f845 3c3c 	str.w	r3, [r5, #-60]
	net_nbr_unref(nbr);
   1f854:	4620      	mov	r0, r4
   1f856:	f7ff fda1 	bl	1f39c <net_nbr_unref>
   1f85a:	bd38      	pop	{r3, r4, r5, pc}
   1f85c:	2000c448 	.word	0x2000c448

0001f860 <nbr_init>:
{
   1f860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f864:	b084      	sub	sp, #16
   1f866:	4604      	mov	r4, r0
   1f868:	4616      	mov	r6, r2
   1f86a:	4698      	mov	r8, r3
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1f86c:	23ff      	movs	r3, #255	; 0xff
   1f86e:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   1f870:	6081      	str	r1, [r0, #8]
   1f872:	68c7      	ldr	r7, [r0, #12]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1f874:	466d      	mov	r5, sp
   1f876:	6810      	ldr	r0, [r2, #0]
   1f878:	6851      	ldr	r1, [r2, #4]
   1f87a:	6892      	ldr	r2, [r2, #8]
   1f87c:	68f3      	ldr	r3, [r6, #12]
   1f87e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f880:	466d      	mov	r5, sp
   1f882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f884:	6078      	str	r0, [r7, #4]
   1f886:	60b9      	str	r1, [r7, #8]
   1f888:	60fa      	str	r2, [r7, #12]
   1f88a:	613b      	str	r3, [r7, #16]
	ipv6_nbr_set_state(nbr, state);
   1f88c:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   1f890:	4620      	mov	r0, r4
   1f892:	f7ff fe1d 	bl	1f4d0 <ipv6_nbr_set_state>
   1f896:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1f898:	f883 8069 	strb.w	r8, [r3, #105]	; 0x69
   1f89c:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1f89e:	2200      	movs	r2, #0
   1f8a0:	601a      	str	r2, [r3, #0]
   1f8a2:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1f8a4:	4905      	ldr	r1, [pc, #20]	; (1f8bc <nbr_init+0x5c>)
   1f8a6:	3014      	adds	r0, #20
   1f8a8:	f00a fb24 	bl	29ef4 <k_delayed_work_init>
   1f8ac:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->send_ns,
   1f8ae:	4904      	ldr	r1, [pc, #16]	; (1f8c0 <nbr_init+0x60>)
   1f8b0:	303c      	adds	r0, #60	; 0x3c
   1f8b2:	f00a fb1f 	bl	29ef4 <k_delayed_work_init>
}
   1f8b6:	b004      	add	sp, #16
   1f8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f8bc:	000213ed 	.word	0x000213ed
   1f8c0:	0001f819 	.word	0x0001f819

0001f8c4 <nbr_new>:
{
   1f8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f8c6:	b083      	sub	sp, #12
   1f8c8:	4605      	mov	r5, r0
   1f8ca:	460e      	mov	r6, r1
   1f8cc:	461f      	mov	r7, r3
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1f8ce:	4807      	ldr	r0, [pc, #28]	; (1f8ec <nbr_new+0x28>)
   1f8d0:	f7ff fd72 	bl	1f3b8 <net_nbr_get>
	if (!nbr) {
   1f8d4:	4604      	mov	r4, r0
   1f8d6:	b128      	cbz	r0, 1f8e4 <nbr_new+0x20>
	nbr_init(nbr, iface, addr, true, state);
   1f8d8:	9700      	str	r7, [sp, #0]
   1f8da:	2301      	movs	r3, #1
   1f8dc:	4632      	mov	r2, r6
   1f8de:	4629      	mov	r1, r5
   1f8e0:	f7ff ffbe 	bl	1f860 <nbr_init>
}
   1f8e4:	4620      	mov	r0, r4
   1f8e6:	b003      	add	sp, #12
   1f8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f8ea:	bf00      	nop
   1f8ec:	2000c43c 	.word	0x2000c43c

0001f8f0 <nbr_new>:
}

static struct net_nbr *nbr_new(struct net_if *iface,
			       struct in6_addr *addr,
			       u8_t prefix_len)
{
   1f8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f8f4:	b084      	sub	sp, #16
   1f8f6:	4604      	mov	r4, r0
   1f8f8:	460e      	mov	r6, r1
   1f8fa:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_nbr_routes.table);
   1f8fc:	480c      	ldr	r0, [pc, #48]	; (1f930 <nbr_new+0x40>)
   1f8fe:	f7ff fd5b 	bl	1f3b8 <net_nbr_get>

	if (!nbr) {
   1f902:	4605      	mov	r5, r0
   1f904:	b180      	cbz	r0, 1f928 <nbr_new+0x38>
		return NULL;
	}

	nbr->iface = iface;
   1f906:	6084      	str	r4, [r0, #8]
	return (struct net_route_entry *)nbr->data;
   1f908:	68c7      	ldr	r7, [r0, #12]

	net_ipaddr_copy(&net_route_data(nbr)->addr, addr);
   1f90a:	466c      	mov	r4, sp
   1f90c:	6830      	ldr	r0, [r6, #0]
   1f90e:	6871      	ldr	r1, [r6, #4]
   1f910:	68b2      	ldr	r2, [r6, #8]
   1f912:	68f3      	ldr	r3, [r6, #12]
   1f914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f916:	466c      	mov	r4, sp
   1f918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1f91a:	6138      	str	r0, [r7, #16]
   1f91c:	6179      	str	r1, [r7, #20]
   1f91e:	61ba      	str	r2, [r7, #24]
   1f920:	61fb      	str	r3, [r7, #28]
	return (struct net_route_entry *)nbr->data;
   1f922:	68eb      	ldr	r3, [r5, #12]
	net_route_data(nbr)->prefix_len = prefix_len;
   1f924:	f883 8020 	strb.w	r8, [r3, #32]
		nbr->idx, nbr, iface,
		net_sprint_ipv6_addr(&net_route_data(nbr)->addr),
		prefix_len);

	return nbr;
}
   1f928:	4628      	mov	r0, r5
   1f92a:	b004      	add	sp, #16
   1f92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f930:	2000c860 	.word	0x2000c860

0001f934 <update_ll_reserve>:
 * Thus we need to check it here. Note that this cannot happen for IPv4
 * as 802.15.4 supports IPv6 only.
 */
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
					 struct in6_addr *addr)
{
   1f934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f938:	4682      	mov	sl, r0
	return pkt->forwarding;
   1f93a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38

	/* No need to do anything if we are forwarding the packet
	 * as we already know everything about the destination of
	 * the packet.
	 */
	if (net_pkt_forwarding(pkt)) {
   1f93e:	f013 0f04 	tst.w	r3, #4
   1f942:	d002      	beq.n	1f94a <update_ll_reserve+0x16>
			pos = 0;
		}
	}

	return pkt;
}
   1f944:	4650      	mov	r0, sl
   1f946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return pkt->iface;
   1f94a:	6940      	ldr	r0, [r0, #20]
   1f94c:	6843      	ldr	r3, [r0, #4]
   1f94e:	689b      	ldr	r3, [r3, #8]
   1f950:	4798      	blx	r3
	if (reserve == net_pkt_ll_reserve(pkt)) {
   1f952:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
   1f956:	4283      	cmp	r3, r0
   1f958:	d0f4      	beq.n	1f944 <update_ll_reserve+0x10>
	pkt->ll_reserve = len;
   1f95a:	f88a 0032 	strb.w	r0, [sl, #50]	; 0x32
	orig_frag = pkt->frags;
   1f95e:	f8da 7008 	ldr.w	r7, [sl, #8]
	copy_len = orig_frag->len;
   1f962:	89be      	ldrh	r6, [r7, #12]
	pkt->frags = NULL;
   1f964:	2400      	movs	r4, #0
   1f966:	f8ca 4008 	str.w	r4, [sl, #8]
	frag = NULL;
   1f96a:	46a1      	mov	r9, r4
	pos = 0;
   1f96c:	46a0      	mov	r8, r4
	while (orig_frag) {
   1f96e:	e020      	b.n	1f9b2 <update_ll_reserve+0x7e>
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1f970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f974:	4650      	mov	r0, sl
   1f976:	f7fd febd 	bl	1d6f4 <net_pkt_get_frag>
   1f97a:	4681      	mov	r9, r0
			net_pkt_frag_add(pkt, frag);
   1f97c:	4601      	mov	r1, r0
   1f97e:	4650      	mov	r0, sl
   1f980:	f7fd ff35 	bl	1d7ee <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   1f984:	f109 0008 	add.w	r0, r9, #8
   1f988:	f7fb fa4d 	bl	1ae26 <net_buf_simple_tailroom>
   1f98c:	b284      	uxth	r4, r0
   1f98e:	e014      	b.n	1f9ba <update_ll_reserve+0x86>
			memcpy(net_buf_add(frag, room_len),
   1f990:	4621      	mov	r1, r4
   1f992:	f109 0008 	add.w	r0, r9, #8
   1f996:	f7fb f9dd 	bl	1ad54 <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   1f99a:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, room_len),
   1f99c:	4622      	mov	r2, r4
   1f99e:	4441      	add	r1, r8
   1f9a0:	f7e0 fc8e 	bl	2c0 <memcpy>
			copy_len -= room_len;
   1f9a4:	1b36      	subs	r6, r6, r4
   1f9a6:	b2b6      	uxth	r6, r6
			pos += room_len;
   1f9a8:	4444      	add	r4, r8
   1f9aa:	fa1f f884 	uxth.w	r8, r4
			room_len = 0;
   1f9ae:	2400      	movs	r4, #0
		if (!copy_len) {
   1f9b0:	b19e      	cbz	r6, 1f9da <update_ll_reserve+0xa6>
	while (orig_frag) {
   1f9b2:	2f00      	cmp	r7, #0
   1f9b4:	d0c6      	beq.n	1f944 <update_ll_reserve+0x10>
		if (!room_len) {
   1f9b6:	2c00      	cmp	r4, #0
   1f9b8:	d0da      	beq.n	1f970 <update_ll_reserve+0x3c>
		if (room_len >= copy_len) {
   1f9ba:	42b4      	cmp	r4, r6
   1f9bc:	d3e8      	bcc.n	1f990 <update_ll_reserve+0x5c>
			memcpy(net_buf_add(frag, copy_len),
   1f9be:	4631      	mov	r1, r6
   1f9c0:	f109 0008 	add.w	r0, r9, #8
   1f9c4:	f7fb f9c6 	bl	1ad54 <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   1f9c8:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, copy_len),
   1f9ca:	4632      	mov	r2, r6
   1f9cc:	4441      	add	r1, r8
   1f9ce:	f7e0 fc77 	bl	2c0 <memcpy>
			room_len -= copy_len;
   1f9d2:	1ba4      	subs	r4, r4, r6
   1f9d4:	b2a4      	uxth	r4, r4
			copy_len = 0;
   1f9d6:	2600      	movs	r6, #0
   1f9d8:	e7ea      	b.n	1f9b0 <update_ll_reserve+0x7c>
			orig_frag = orig_frag->frags;
   1f9da:	683d      	ldr	r5, [r7, #0]
			tmp->frags = NULL;
   1f9dc:	2300      	movs	r3, #0
   1f9de:	603b      	str	r3, [r7, #0]
			net_pkt_frag_unref(tmp);
   1f9e0:	4638      	mov	r0, r7
   1f9e2:	f7fd fed4 	bl	1d78e <net_pkt_frag_unref>
			if (!orig_frag) {
   1f9e6:	2d00      	cmp	r5, #0
   1f9e8:	d0ac      	beq.n	1f944 <update_ll_reserve+0x10>
			orig_frag = orig_frag->frags;
   1f9ea:	462f      	mov	r7, r5
			pos = 0;
   1f9ec:	46b0      	mov	r8, r6
			copy_len = orig_frag->len;
   1f9ee:	89ae      	ldrh	r6, [r5, #12]
   1f9f0:	e7df      	b.n	1f9b2 <update_ll_reserve+0x7e>

0001f9f2 <setup_headers>:
	       llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   1f9f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f9f4:	4604      	mov	r4, r0
   1f9f6:	460e      	mov	r6, r1
   1f9f8:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   1f9fa:	6880      	ldr	r0, [r0, #8]
   1f9fc:	212c      	movs	r1, #44	; 0x2c
   1f9fe:	3008      	adds	r0, #8
   1fa00:	f7fb f9a8 	bl	1ad54 <net_buf_simple_add>
	return pkt->frags->data;
   1fa04:	68a3      	ldr	r3, [r4, #8]
   1fa06:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1fa08:	2260      	movs	r2, #96	; 0x60
   1fa0a:	701a      	strb	r2, [r3, #0]
   1fa0c:	68a3      	ldr	r3, [r4, #8]
   1fa0e:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1fa10:	2500      	movs	r5, #0
   1fa12:	705d      	strb	r5, [r3, #1]
   1fa14:	68a3      	ldr	r3, [r4, #8]
   1fa16:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1fa18:	709d      	strb	r5, [r3, #2]
   1fa1a:	70dd      	strb	r5, [r3, #3]
   1fa1c:	68a3      	ldr	r3, [r4, #8]
   1fa1e:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[0] = 0;
   1fa20:	711d      	strb	r5, [r3, #4]
   1fa22:	68a3      	ldr	r3, [r4, #8]
   1fa24:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1fa26:	3604      	adds	r6, #4
   1fa28:	715e      	strb	r6, [r3, #5]
   1fa2a:	68a3      	ldr	r3, [r4, #8]
   1fa2c:	689b      	ldr	r3, [r3, #8]

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1fa2e:	223a      	movs	r2, #58	; 0x3a
   1fa30:	719a      	strb	r2, [r3, #6]
   1fa32:	68a3      	ldr	r3, [r4, #8]
   1fa34:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1fa36:	22ff      	movs	r2, #255	; 0xff
   1fa38:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   1fa3a:	4620      	mov	r0, r4
   1fa3c:	f7fe f986 	bl	1dd4c <net_pkt_icmp_data>
   1fa40:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   1fa42:	4620      	mov	r0, r4
   1fa44:	f7fe f982 	bl	1dd4c <net_pkt_icmp_data>
   1fa48:	7045      	strb	r5, [r0, #1]
   1fa4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fa4c <nbr_free>:
{
   1fa4c:	b538      	push	{r3, r4, r5, lr}
   1fa4e:	4604      	mov	r4, r0
   1fa50:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1fa52:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1fa56:	f00a fa6b 	bl	29f30 <k_delayed_work_cancel>
	if (data->pending) {
   1fa5a:	6828      	ldr	r0, [r5, #0]
   1fa5c:	b118      	cbz	r0, 1fa66 <nbr_free+0x1a>
		net_pkt_unref(data->pending);
   1fa5e:	f7fd fe9c 	bl	1d79a <net_pkt_unref>
		data->pending = NULL;
   1fa62:	2300      	movs	r3, #0
   1fa64:	602b      	str	r3, [r5, #0]
   1fa66:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1fa68:	3014      	adds	r0, #20
   1fa6a:	f00a fa61 	bl	29f30 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1fa6e:	4620      	mov	r0, r4
   1fa70:	f7ff fc94 	bl	1f39c <net_nbr_unref>
   1fa74:	bd38      	pop	{r3, r4, r5, pc}
	...

0001fa78 <net_ipv6_nbr_state2str>:
	switch (state) {
   1fa78:	2805      	cmp	r0, #5
   1fa7a:	d80e      	bhi.n	1fa9a <net_ipv6_nbr_state2str+0x22>
   1fa7c:	e8df f000 	tbb	[pc, r0]
   1fa80:	07050f03 	.word	0x07050f03
   1fa84:	0b09      	.short	0x0b09
		return "incomplete";
   1fa86:	4807      	ldr	r0, [pc, #28]	; (1faa4 <net_ipv6_nbr_state2str+0x2c>)
   1fa88:	4770      	bx	lr
		return "stale";
   1fa8a:	4807      	ldr	r0, [pc, #28]	; (1faa8 <net_ipv6_nbr_state2str+0x30>)
   1fa8c:	4770      	bx	lr
		return "delay";
   1fa8e:	4807      	ldr	r0, [pc, #28]	; (1faac <net_ipv6_nbr_state2str+0x34>)
   1fa90:	4770      	bx	lr
		return "probe";
   1fa92:	4807      	ldr	r0, [pc, #28]	; (1fab0 <net_ipv6_nbr_state2str+0x38>)
   1fa94:	4770      	bx	lr
		return "static";
   1fa96:	4807      	ldr	r0, [pc, #28]	; (1fab4 <net_ipv6_nbr_state2str+0x3c>)
   1fa98:	4770      	bx	lr
	return "<invalid state>";
   1fa9a:	4807      	ldr	r0, [pc, #28]	; (1fab8 <net_ipv6_nbr_state2str+0x40>)
   1fa9c:	4770      	bx	lr
		return "reachable";
   1fa9e:	4807      	ldr	r0, [pc, #28]	; (1fabc <net_ipv6_nbr_state2str+0x44>)
}
   1faa0:	4770      	bx	lr
   1faa2:	bf00      	nop
   1faa4:	00031be0 	.word	0x00031be0
   1faa8:	00031bf8 	.word	0x00031bf8
   1faac:	00031c00 	.word	0x00031c00
   1fab0:	00031c08 	.word	0x00031c08
   1fab4:	00031c10 	.word	0x00031c10
   1fab8:	00031c18 	.word	0x00031c18
   1fabc:	00031bec 	.word	0x00031bec

0001fac0 <net_ipv6_nbr_foreach>:
{
   1fac0:	b500      	push	{lr}
   1fac2:	b083      	sub	sp, #12
	struct iface_cb_data cb_data = {
   1fac4:	9000      	str	r0, [sp, #0]
   1fac6:	9101      	str	r1, [sp, #4]
	net_if_foreach(iface_cb, &cb_data);
   1fac8:	4669      	mov	r1, sp
   1faca:	4803      	ldr	r0, [pc, #12]	; (1fad8 <net_ipv6_nbr_foreach+0x18>)
   1facc:	f7fc fc3a 	bl	1c344 <net_if_foreach>
}
   1fad0:	b003      	add	sp, #12
   1fad2:	f85d fb04 	ldr.w	pc, [sp], #4
   1fad6:	bf00      	nop
   1fad8:	0001f4e5 	.word	0x0001f4e5

0001fadc <net_ipv6_nbr_rm>:
{
   1fadc:	b538      	push	{r3, r4, r5, lr}
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1fade:	460a      	mov	r2, r1
   1fae0:	4601      	mov	r1, r0
   1fae2:	480d      	ldr	r0, [pc, #52]	; (1fb18 <net_ipv6_nbr_rm+0x3c>)
   1fae4:	f7ff fe6c 	bl	1f7c0 <nbr_lookup>
	if (!nbr) {
   1fae8:	b1a0      	cbz	r0, 1fb14 <net_ipv6_nbr_rm+0x38>
   1faea:	4604      	mov	r4, r0
   1faec:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1faee:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1faf2:	f00a fa1d 	bl	29f30 <k_delayed_work_cancel>
	if (data->pending) {
   1faf6:	6828      	ldr	r0, [r5, #0]
   1faf8:	b118      	cbz	r0, 1fb02 <net_ipv6_nbr_rm+0x26>
		net_pkt_unref(data->pending);
   1fafa:	f7fd fe4e 	bl	1d79a <net_pkt_unref>
		data->pending = NULL;
   1fafe:	2300      	movs	r3, #0
   1fb00:	602b      	str	r3, [r5, #0]
   1fb02:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1fb04:	3014      	adds	r0, #20
   1fb06:	f00a fa13 	bl	29f30 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1fb0a:	4620      	mov	r0, r4
   1fb0c:	f7ff fc46 	bl	1f39c <net_nbr_unref>
	return true;
   1fb10:	2001      	movs	r0, #1
   1fb12:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1fb14:	2000      	movs	r0, #0
}
   1fb16:	bd38      	pop	{r3, r4, r5, pc}
   1fb18:	2000c43c 	.word	0x2000c43c

0001fb1c <net_ipv6_unspecified_address>:
}
   1fb1c:	4800      	ldr	r0, [pc, #0]	; (1fb20 <net_ipv6_unspecified_address+0x4>)
   1fb1e:	4770      	bx	lr
   1fb20:	00031bd0 	.word	0x00031bd0

0001fb24 <create_mldv2>:

static struct net_pkt *create_mldv2(struct net_pkt *pkt,
				    const struct in6_addr *addr,
				    u16_t record_type,
				    u8_t num_sources)
{
   1fb24:	b570      	push	{r4, r5, r6, lr}
   1fb26:	b082      	sub	sp, #8
   1fb28:	4604      	mov	r4, r0
   1fb2a:	460e      	mov	r6, r1
   1fb2c:	461d      	mov	r5, r3
   1fb2e:	a902      	add	r1, sp, #8
   1fb30:	f801 2d03 	strb.w	r2, [r1, #-3]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fb34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fb38:	460a      	mov	r2, r1
   1fb3a:	2101      	movs	r1, #1
   1fb3c:	f7fd ff65 	bl	1da0a <net_pkt_append>
   1fb40:	aa02      	add	r2, sp, #8
   1fb42:	2300      	movs	r3, #0
   1fb44:	f802 3d04 	strb.w	r3, [r2, #-4]!
   1fb48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fb4c:	2101      	movs	r1, #1
   1fb4e:	4620      	mov	r0, r4
   1fb50:	f7fd ff5b 	bl	1da0a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fb54:	022b      	lsls	r3, r5, #8
   1fb56:	aa02      	add	r2, sp, #8
   1fb58:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fb5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fb60:	2102      	movs	r1, #2
   1fb62:	4620      	mov	r0, r4
   1fb64:	f7fd ff51 	bl	1da0a <net_pkt_append>
   1fb68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fb6c:	4632      	mov	r2, r6
   1fb6e:	2110      	movs	r1, #16
   1fb70:	4620      	mov	r0, r4
   1fb72:	f7fd ff4a 	bl	1da0a <net_pkt_append>
	net_pkt_append_u8(pkt, 0); /* aux data len */
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
	net_pkt_append_all(pkt, sizeof(struct in6_addr), addr->s6_addr,
			K_FOREVER);

	if (num_sources > 0) {
   1fb76:	b915      	cbnz	r5, 1fb7e <create_mldv2+0x5a>
				net_ipv6_unspecified_address()->s6_addr,
				K_FOREVER);
	}

	return pkt;
}
   1fb78:	4620      	mov	r0, r4
   1fb7a:	b002      	add	sp, #8
   1fb7c:	bd70      	pop	{r4, r5, r6, pc}
				net_ipv6_unspecified_address()->s6_addr,
   1fb7e:	f7ff ffcd 	bl	1fb1c <net_ipv6_unspecified_address>
   1fb82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fb86:	4602      	mov	r2, r0
   1fb88:	2110      	movs	r1, #16
   1fb8a:	4620      	mov	r0, r4
   1fb8c:	f7fd ff3d 	bl	1da0a <net_pkt_append>
   1fb90:	e7f2      	b.n	1fb78 <create_mldv2+0x54>

0001fb92 <net_ipv6_create_raw>:
{
   1fb92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb96:	b088      	sub	sp, #32
   1fb98:	4604      	mov	r4, r0
   1fb9a:	460e      	mov	r6, r1
   1fb9c:	4617      	mov	r7, r2
   1fb9e:	461d      	mov	r5, r3
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1fba0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fba4:	f7fd fda6 	bl	1d6f4 <net_pkt_get_frag>
   1fba8:	4680      	mov	r8, r0
	net_pkt_frag_insert(pkt, header);
   1fbaa:	4601      	mov	r1, r0
   1fbac:	4620      	mov	r0, r4
   1fbae:	f7fd fe2b 	bl	1d808 <net_pkt_frag_insert>
	return pkt->frags->data;
   1fbb2:	68a3      	ldr	r3, [r4, #8]
   1fbb4:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1fbb6:	2260      	movs	r2, #96	; 0x60
   1fbb8:	701a      	strb	r2, [r3, #0]
   1fbba:	68a3      	ldr	r3, [r4, #8]
   1fbbc:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1fbbe:	2300      	movs	r3, #0
   1fbc0:	7053      	strb	r3, [r2, #1]
   1fbc2:	68a2      	ldr	r2, [r4, #8]
   1fbc4:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1fbc6:	7093      	strb	r3, [r2, #2]
   1fbc8:	70d3      	strb	r3, [r2, #3]
   1fbca:	68a2      	ldr	r2, [r4, #8]
   1fbcc:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   1fbce:	7193      	strb	r3, [r2, #6]
   1fbd0:	68a3      	ldr	r3, [r4, #8]
   1fbd2:	689b      	ldr	r3, [r3, #8]
	return pkt->ipv6_hop_limit;
   1fbd4:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   1fbd8:	71da      	strb	r2, [r3, #7]
	return pkt->frags->data;
   1fbda:	68a3      	ldr	r3, [r4, #8]
   1fbdc:	689b      	ldr	r3, [r3, #8]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   1fbde:	79da      	ldrb	r2, [r3, #7]
   1fbe0:	b912      	cbnz	r2, 1fbe8 <net_ipv6_create_raw+0x56>
	return iface->ipv6.hop_limit;
   1fbe2:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
		NET_IPV6_HDR(pkt)->hop_limit =
   1fbe6:	71da      	strb	r2, [r3, #7]
   1fbe8:	68a3      	ldr	r3, [r4, #8]
   1fbea:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1fbee:	466d      	mov	r5, sp
   1fbf0:	6838      	ldr	r0, [r7, #0]
   1fbf2:	6879      	ldr	r1, [r7, #4]
   1fbf4:	68ba      	ldr	r2, [r7, #8]
   1fbf6:	68fb      	ldr	r3, [r7, #12]
   1fbf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1fbfa:	466d      	mov	r5, sp
   1fbfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1fbfe:	f8ce 0018 	str.w	r0, [lr, #24]
   1fc02:	f8ce 101c 	str.w	r1, [lr, #28]
   1fc06:	f8ce 2020 	str.w	r2, [lr, #32]
   1fc0a:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
   1fc0e:	68a3      	ldr	r3, [r4, #8]
   1fc10:	689f      	ldr	r7, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1fc12:	6830      	ldr	r0, [r6, #0]
   1fc14:	6871      	ldr	r1, [r6, #4]
   1fc16:	68b2      	ldr	r2, [r6, #8]
   1fc18:	68f3      	ldr	r3, [r6, #12]
   1fc1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1fc1c:	ad04      	add	r5, sp, #16
   1fc1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1fc20:	60b8      	str	r0, [r7, #8]
   1fc22:	60f9      	str	r1, [r7, #12]
   1fc24:	613a      	str	r2, [r7, #16]
   1fc26:	617b      	str	r3, [r7, #20]
	pkt->ipv6_ext_len = len;
   1fc28:	2300      	movs	r3, #0
   1fc2a:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1fc2e:	68a3      	ldr	r3, [r4, #8]
   1fc30:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->nexthdr = next_header;
   1fc32:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1fc36:	719a      	strb	r2, [r3, #6]
	pkt->ip_hdr_len = len;
   1fc38:	2128      	movs	r1, #40	; 0x28
   1fc3a:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
	pkt->family = family;
   1fc3e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1fc42:	220a      	movs	r2, #10
   1fc44:	f362 03c6 	bfi	r3, r2, #3, #4
   1fc48:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   1fc4c:	f108 0008 	add.w	r0, r8, #8
   1fc50:	f7fb f880 	bl	1ad54 <net_buf_simple_add>
}
   1fc54:	4620      	mov	r0, r4
   1fc56:	b008      	add	sp, #32
   1fc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fc5c <net_ipv6_create>:
{
   1fc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc5e:	b083      	sub	sp, #12
   1fc60:	4605      	mov	r5, r0
   1fc62:	460e      	mov	r6, r1
   1fc64:	461f      	mov	r7, r3
	if (!src) {
   1fc66:	4614      	mov	r4, r2
   1fc68:	b14a      	cbz	r2, 1fc7e <net_ipv6_create+0x22>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1fc6a:	6823      	ldr	r3, [r4, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fc6c:	b94b      	cbnz	r3, 1fc82 <net_ipv6_create+0x26>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1fc6e:	6863      	ldr	r3, [r4, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1fc70:	b9fb      	cbnz	r3, 1fcb2 <net_ipv6_create+0x56>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fc72:	68a3      	ldr	r3, [r4, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1fc74:	b9fb      	cbnz	r3, 1fcb6 <net_ipv6_create+0x5a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1fc76:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fc78:	b1fb      	cbz	r3, 1fcba <net_ipv6_create+0x5e>
   1fc7a:	2300      	movs	r3, #0
   1fc7c:	e002      	b.n	1fc84 <net_ipv6_create+0x28>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   1fc7e:	68c4      	ldr	r4, [r0, #12]
   1fc80:	e7f3      	b.n	1fc6a <net_ipv6_create+0xe>
   1fc82:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(src)
   1fc84:	b9db      	cbnz	r3, 1fcbe <net_ipv6_create+0x62>
	return addr->s6_addr[0] == 0xFF;
   1fc86:	7823      	ldrb	r3, [r4, #0]
	    || net_is_ipv6_addr_mcast(src)) {
   1fc88:	2bff      	cmp	r3, #255	; 0xff
   1fc8a:	d018      	beq.n	1fcbe <net_ipv6_create+0x62>
	return net_if_get_by_index(context->iface);
   1fc8c:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
   1fc90:	f7fc fb3c 	bl	1c30c <net_if_get_by_index>
   1fc94:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1fc96:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
   1fc9a:	f012 0f40 	tst.w	r2, #64	; 0x40
   1fc9e:	d114      	bne.n	1fcca <net_ipv6_create+0x6e>
	return IPPROTO_UDP;
   1fca0:	2211      	movs	r2, #17
	return net_ipv6_create_raw(pkt,
   1fca2:	9200      	str	r2, [sp, #0]
   1fca4:	463a      	mov	r2, r7
   1fca6:	4621      	mov	r1, r4
   1fca8:	4630      	mov	r0, r6
   1fcaa:	f7ff ff72 	bl	1fb92 <net_ipv6_create_raw>
}
   1fcae:	b003      	add	sp, #12
   1fcb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fcb2:	2300      	movs	r3, #0
   1fcb4:	e7e6      	b.n	1fc84 <net_ipv6_create+0x28>
   1fcb6:	2300      	movs	r3, #0
   1fcb8:	e7e4      	b.n	1fc84 <net_ipv6_create+0x28>
   1fcba:	2301      	movs	r3, #1
   1fcbc:	e7e2      	b.n	1fc84 <net_ipv6_create+0x28>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1fcbe:	4639      	mov	r1, r7
   1fcc0:	6970      	ldr	r0, [r6, #20]
   1fcc2:	f7fc f8cf 	bl	1be64 <net_if_ipv6_select_src_addr>
   1fcc6:	4604      	mov	r4, r0
   1fcc8:	e7e0      	b.n	1fc8c <net_ipv6_create+0x30>
		return IPPROTO_TCP;
   1fcca:	2206      	movs	r2, #6
   1fccc:	e7e9      	b.n	1fca2 <net_ipv6_create+0x46>

0001fcce <net_ipv6_finalize_raw>:
{
   1fcce:	b538      	push	{r3, r4, r5, lr}
   1fcd0:	4605      	mov	r5, r0
   1fcd2:	460c      	mov	r4, r1
	net_pkt_compact(pkt);
   1fcd4:	f7fd fe52 	bl	1d97c <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   1fcd8:	68a8      	ldr	r0, [r5, #8]
   1fcda:	4603      	mov	r3, r0
	size_t bytes = 0;
   1fcdc:	2200      	movs	r2, #0
   1fcde:	e002      	b.n	1fce6 <net_ipv6_finalize_raw+0x18>
		bytes += buf->len;
   1fce0:	8999      	ldrh	r1, [r3, #12]
   1fce2:	440a      	add	r2, r1
		buf = buf->frags;
   1fce4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1fce6:	2b00      	cmp	r3, #0
   1fce8:	d1fa      	bne.n	1fce0 <net_ipv6_finalize_raw+0x12>
	total_len -= sizeof(struct net_ipv6_hdr);
   1fcea:	3a28      	subs	r2, #40	; 0x28
	return pkt->frags->data;
   1fcec:	6883      	ldr	r3, [r0, #8]
	NET_IPV6_HDR(pkt)->len[0] = total_len / 256;
   1fcee:	0a11      	lsrs	r1, r2, #8
   1fcf0:	7119      	strb	r1, [r3, #4]
   1fcf2:	68ab      	ldr	r3, [r5, #8]
   1fcf4:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = total_len - NET_IPV6_HDR(pkt)->len[0] * 256;
   1fcf6:	715a      	strb	r2, [r3, #5]
	if (next_header == IPPROTO_UDP) {
   1fcf8:	2c11      	cmp	r4, #17
   1fcfa:	d005      	beq.n	1fd08 <net_ipv6_finalize_raw+0x3a>
	if (next_header == IPPROTO_TCP) {
   1fcfc:	2c06      	cmp	r4, #6
   1fcfe:	d008      	beq.n	1fd12 <net_ipv6_finalize_raw+0x44>
	if (next_header == IPPROTO_ICMPV6) {
   1fd00:	2c3a      	cmp	r4, #58	; 0x3a
   1fd02:	d00b      	beq.n	1fd1c <net_ipv6_finalize_raw+0x4e>
}
   1fd04:	2000      	movs	r0, #0
   1fd06:	bd38      	pop	{r3, r4, r5, pc}
		net_udp_set_chksum(pkt, pkt->frags);
   1fd08:	68a9      	ldr	r1, [r5, #8]
   1fd0a:	4628      	mov	r0, r5
   1fd0c:	f003 fa9b 	bl	23246 <net_udp_set_chksum>
   1fd10:	e7f8      	b.n	1fd04 <net_ipv6_finalize_raw+0x36>
		net_tcp_set_chksum(pkt, pkt->frags);
   1fd12:	68a9      	ldr	r1, [r5, #8]
   1fd14:	4628      	mov	r0, r5
   1fd16:	f004 f8da 	bl	23ece <net_tcp_set_chksum>
   1fd1a:	e7f3      	b.n	1fd04 <net_ipv6_finalize_raw+0x36>
		net_icmpv6_set_chksum(pkt, pkt->frags);
   1fd1c:	68a9      	ldr	r1, [r5, #8]
   1fd1e:	4628      	mov	r0, r5
   1fd20:	f7fe fdf2 	bl	1e908 <net_icmpv6_set_chksum>
   1fd24:	e7ee      	b.n	1fd04 <net_ipv6_finalize_raw+0x36>
	...

0001fd28 <send_mldv2_raw>:

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   1fd28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fd2c:	b08d      	sub	sp, #52	; 0x34
   1fd2e:	4680      	mov	r8, r0
   1fd30:	4689      	mov	r9, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1fd32:	f240 23ff 	movw	r3, #767	; 0x2ff
   1fd36:	f8ad 3020 	strh.w	r3, [sp, #32]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1fd3a:	2500      	movs	r5, #0
   1fd3c:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1fd40:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1fd44:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1fd48:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1fd4c:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1fd50:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1fd54:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   1fd58:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1fd5c:	6843      	ldr	r3, [r0, #4]
   1fd5e:	689b      	ldr	r3, [r3, #8]
   1fd60:	a908      	add	r1, sp, #32
   1fd62:	4798      	blx	r3
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1fd64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fd68:	f7fd fca6 	bl	1d6b8 <net_pkt_get_reserve_tx>
   1fd6c:	4604      	mov	r4, r0
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt,
   1fd6e:	a908      	add	r1, sp, #32
   1fd70:	4640      	mov	r0, r8
   1fd72:	f7fc f877 	bl	1be64 <net_if_ipv6_select_src_addr>
   1fd76:	9500      	str	r5, [sp, #0]
   1fd78:	4643      	mov	r3, r8
   1fd7a:	aa08      	add	r2, sp, #32
   1fd7c:	4601      	mov	r1, r0
   1fd7e:	4620      	mov	r0, r4
   1fd80:	f7ff ff07 	bl	1fb92 <net_ipv6_create_raw>
   1fd84:	4604      	mov	r4, r0
   1fd86:	6883      	ldr	r3, [r0, #8]
   1fd88:	689b      	ldr	r3, [r3, #8]
				  net_if_ipv6_select_src_addr(iface, &dst),
				  &dst,
				  iface,
				  NET_IPV6_NEXTHDR_HBHO);

	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   1fd8a:	2601      	movs	r6, #1
   1fd8c:	71de      	strb	r6, [r3, #7]

	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   1fd8e:	6883      	ldr	r3, [r0, #8]
   1fd90:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   1fd92:	87c3      	strh	r3, [r0, #62]	; 0x3e
   1fd94:	aa0c      	add	r2, sp, #48	; 0x30
   1fd96:	233a      	movs	r3, #58	; 0x3a
   1fd98:	f802 3d15 	strb.w	r3, [r2, #-21]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fd9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fda0:	4631      	mov	r1, r6
   1fda2:	f7fd fe32 	bl	1da0a <net_pkt_append>
   1fda6:	aa0c      	add	r2, sp, #48	; 0x30
   1fda8:	f802 5d16 	strb.w	r5, [r2, #-22]!
   1fdac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fdb0:	4631      	mov	r1, r6
   1fdb2:	4620      	mov	r0, r4
   1fdb4:	f7fd fe29 	bl	1da0a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fdb8:	af0c      	add	r7, sp, #48	; 0x30
   1fdba:	f240 2305 	movw	r3, #517	; 0x205
   1fdbe:	f827 3d14 	strh.w	r3, [r7, #-20]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fdc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fdc6:	463a      	mov	r2, r7
   1fdc8:	2102      	movs	r1, #2
   1fdca:	4620      	mov	r0, r4
   1fdcc:	f7fd fe1d 	bl	1da0a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fdd0:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fdd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fdd8:	463a      	mov	r2, r7
   1fdda:	2102      	movs	r1, #2
   1fddc:	4620      	mov	r0, r4
   1fdde:	f7fd fe14 	bl	1da0a <net_pkt_append>
   1fde2:	aa0c      	add	r2, sp, #48	; 0x30
   1fde4:	f802 5d17 	strb.w	r5, [r2, #-23]!
   1fde8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fdec:	4631      	mov	r1, r6
   1fdee:	4620      	mov	r0, r4
   1fdf0:	f7fd fe0b 	bl	1da0a <net_pkt_append>
   1fdf4:	aa0c      	add	r2, sp, #48	; 0x30
   1fdf6:	f802 5d18 	strb.w	r5, [r2, #-24]!
   1fdfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fdfe:	4631      	mov	r1, r6
   1fe00:	4620      	mov	r0, r4
   1fe02:	f7fd fe02 	bl	1da0a <net_pkt_append>
   1fe06:	aa0c      	add	r2, sp, #48	; 0x30
   1fe08:	238f      	movs	r3, #143	; 0x8f
   1fe0a:	f802 3d19 	strb.w	r3, [r2, #-25]!
   1fe0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe12:	4631      	mov	r1, r6
   1fe14:	4620      	mov	r0, r4
   1fe16:	f7fd fdf8 	bl	1da0a <net_pkt_append>
   1fe1a:	aa0c      	add	r2, sp, #48	; 0x30
   1fe1c:	f802 5d1a 	strb.w	r5, [r2, #-26]!
   1fe20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe24:	4631      	mov	r1, r6
   1fe26:	4620      	mov	r0, r4
   1fe28:	f7fd fdef 	bl	1da0a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fe2c:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fe30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe34:	463a      	mov	r2, r7
   1fe36:	2102      	movs	r1, #2
   1fe38:	4620      	mov	r0, r4
   1fe3a:	f7fd fde6 	bl	1da0a <net_pkt_append>
	/* ICMPv6 header */
	net_pkt_append_u8(pkt, NET_ICMPV6_MLDv2); /* type */
	net_pkt_append_u8(pkt, 0); /* code */
	net_pkt_append_be16(pkt, 0); /* chksum */

	pkt->frags->len = NET_IPV6ICMPH_LEN + ROUTER_ALERT_LEN;
   1fe3e:	68a3      	ldr	r3, [r4, #8]
   1fe40:	2234      	movs	r2, #52	; 0x34
   1fe42:	819a      	strh	r2, [r3, #12]
	pkt->iface = iface;
   1fe44:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1fe48:	f898 3015 	ldrb.w	r3, [r8, #21]
   1fe4c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1fe50:	f898 3015 	ldrb.w	r3, [r8, #21]
   1fe54:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	u16_t value = sys_cpu_to_be16(data);
   1fe58:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fe5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe60:	463a      	mov	r2, r7
   1fe62:	2102      	movs	r1, #2
   1fe64:	4620      	mov	r0, r4
   1fe66:	f7fd fdd0 	bl	1da0a <net_pkt_append>
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_be16(pkt, 0); /* reserved field */

	/* Insert the actual multicast record(s) here */
	net_pkt_frag_add(pkt, frags);
   1fe6a:	4649      	mov	r1, r9
   1fe6c:	4620      	mov	r0, r4
   1fe6e:	f7fd fcbe 	bl	1d7ee <net_pkt_frag_add>

	ret = net_ipv6_finalize_raw(pkt, NET_IPV6_NEXTHDR_HBHO);
   1fe72:	4629      	mov	r1, r5
   1fe74:	4620      	mov	r0, r4
   1fe76:	f7ff ff2a 	bl	1fcce <net_ipv6_finalize_raw>
	if (ret < 0) {
   1fe7a:	1e05      	subs	r5, r0, #0
   1fe7c:	db35      	blt.n	1feea <send_mldv2_raw+0x1c2>
	pkt->ipv6_ext_len = len;
   1fe7e:	2308      	movs	r3, #8
   1fe80:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		goto drop;
	}

	net_pkt_set_ipv6_ext_len(pkt, ROUTER_ALERT_LEN);

	net_pkt_write_be16(pkt, pkt->frags,
   1fe84:	68a6      	ldr	r6, [r4, #8]
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1fe86:	213a      	movs	r1, #58	; 0x3a
   1fe88:	4620      	mov	r0, r4
   1fe8a:	f7fe faf0 	bl	1e46e <net_calc_chksum>
			   NET_IPV6H_LEN + ROUTER_ALERT_LEN + 2,
			   &pos, ntohs(~net_calc_chksum_icmpv6(pkt)));
   1fe8e:	ea6f 2020 	mvn.w	r0, r0, asr #8
   1fe92:	b2c5      	uxtb	r5, r0
   1fe94:	213a      	movs	r1, #58	; 0x3a
   1fe96:	4620      	mov	r0, r4
   1fe98:	f7fe fae9 	bl	1e46e <net_calc_chksum>
   1fe9c:	43c0      	mvns	r0, r0
   1fe9e:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	net_pkt_write_be16(pkt, pkt->frags,
   1fea2:	b280      	uxth	r0, r0
						 struct net_buf *frag,
						 u16_t offset,
						 u16_t *pos,
						 u16_t data)
{
	u16_t value = htons(data);
   1fea4:	0a03      	lsrs	r3, r0, #8
   1fea6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1feaa:	f8ad 001c 	strh.w	r0, [sp, #28]

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1feae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1feb2:	9302      	str	r3, [sp, #8]
   1feb4:	ab07      	add	r3, sp, #28
   1feb6:	9301      	str	r3, [sp, #4]
   1feb8:	2302      	movs	r3, #2
   1feba:	9300      	str	r3, [sp, #0]
   1febc:	f10d 031e 	add.w	r3, sp, #30
   1fec0:	2232      	movs	r2, #50	; 0x32
   1fec2:	4631      	mov	r1, r6
   1fec4:	4620      	mov	r0, r4
   1fec6:	f7fd fe58 	bl	1db7a <net_pkt_write>

	ret = net_send_data(pkt);
   1feca:	4620      	mov	r0, r4
   1fecc:	f7fb f864 	bl	1af98 <net_send_data>
	if (ret < 0) {
   1fed0:	1e05      	subs	r5, r0, #0
   1fed2:	db0a      	blt.n	1feea <send_mldv2_raw+0x1c2>
	net_stats.icmp.sent++;
   1fed4:	4b0d      	ldr	r3, [pc, #52]	; (1ff0c <send_mldv2_raw+0x1e4>)
   1fed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fed8:	3201      	adds	r2, #1
   1feda:	639a      	str	r2, [r3, #56]	; 0x38
	net_stats.ipv6_mld.recv++;
}

static inline void net_stats_update_ipv6_mld_sent(void)
{
	net_stats.ipv6_mld.sent++;
   1fedc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1fee0:	3201      	adds	r2, #1
   1fee2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}

	net_stats_update_icmp_sent();
	net_stats_update_ipv6_mld_sent();

	return 0;
   1fee6:	2500      	movs	r5, #0
   1fee8:	e00b      	b.n	1ff02 <send_mldv2_raw+0x1da>

drop:
	net_pkt_unref(pkt);
   1feea:	4620      	mov	r0, r4
   1feec:	f7fd fc55 	bl	1d79a <net_pkt_unref>
	net_stats.icmp.drop++;
   1fef0:	4b06      	ldr	r3, [pc, #24]	; (1ff0c <send_mldv2_raw+0x1e4>)
   1fef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1fef4:	3201      	adds	r2, #1
   1fef6:	63da      	str	r2, [r3, #60]	; 0x3c
}

static inline void net_stats_update_ipv6_mld_drop(void)
{
	net_stats.ipv6_mld.drop++;
   1fef8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1fefc:	3201      	adds	r2, #1
   1fefe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_stats_update_icmp_drop();
	net_stats_update_ipv6_mld_drop();

	return ret;
}
   1ff02:	4628      	mov	r0, r5
   1ff04:	b00d      	add	sp, #52	; 0x34
   1ff06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ff0a:	bf00      	nop
   1ff0c:	20003038 	.word	0x20003038

0001ff10 <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   1ff10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff12:	b083      	sub	sp, #12
   1ff14:	4605      	mov	r5, r0
   1ff16:	460e      	mov	r6, r1
   1ff18:	4617      	mov	r7, r2
   1ff1a:	6843      	ldr	r3, [r0, #4]
   1ff1c:	689b      	ldr	r3, [r3, #8]
   1ff1e:	2100      	movs	r1, #0
   1ff20:	4798      	blx	r3
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1ff22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ff26:	f7fd fbc7 	bl	1d6b8 <net_pkt_get_reserve_tx>
   1ff2a:	4604      	mov	r4, r0
	u16_t value = sys_cpu_to_be16(data);
   1ff2c:	aa02      	add	r2, sp, #8
   1ff2e:	f44f 7380 	mov.w	r3, #256	; 0x100
   1ff32:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1ff36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ff3a:	2102      	movs	r1, #2
   1ff3c:	f7fd fd65 	bl	1da0a <net_pkt_append>
				     K_FOREVER);

	net_pkt_append_be16(pkt, 1); /* number of records */

	pkt = create_mldv2(pkt, addr, mode, 1);
   1ff40:	2301      	movs	r3, #1
   1ff42:	463a      	mov	r2, r7
   1ff44:	4631      	mov	r1, r6
   1ff46:	4620      	mov	r0, r4
   1ff48:	f7ff fdec 	bl	1fb24 <create_mldv2>
   1ff4c:	4604      	mov	r4, r0

	ret = send_mldv2_raw(iface, pkt->frags);
   1ff4e:	6881      	ldr	r1, [r0, #8]
   1ff50:	4628      	mov	r0, r5
   1ff52:	f7ff fee9 	bl	1fd28 <send_mldv2_raw>
   1ff56:	4605      	mov	r5, r0

	pkt->frags = NULL;
   1ff58:	2300      	movs	r3, #0
   1ff5a:	60a3      	str	r3, [r4, #8]

	net_pkt_unref(pkt);
   1ff5c:	4620      	mov	r0, r4
   1ff5e:	f7fd fc1c 	bl	1d79a <net_pkt_unref>

	return ret;
}
   1ff62:	4628      	mov	r0, r5
   1ff64:	b003      	add	sp, #12
   1ff66:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ff68 <send_mld_report>:

	return ret;
}

static void send_mld_report(struct net_if *iface)
{
   1ff68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff6a:	b087      	sub	sp, #28
   1ff6c:	4605      	mov	r5, r0
   1ff6e:	6843      	ldr	r3, [r0, #4]
   1ff70:	689b      	ldr	r3, [r3, #8]
   1ff72:	2100      	movs	r1, #0
   1ff74:	4798      	blx	r3
	struct net_pkt *pkt;
	int i, count = 0;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1ff76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ff7a:	f7fd fb9d 	bl	1d6b8 <net_pkt_get_reserve_tx>
   1ff7e:	4606      	mov	r6, r0
   1ff80:	2400      	movs	r4, #0
   1ff82:	aa06      	add	r2, sp, #24
   1ff84:	f802 4d04 	strb.w	r4, [r2, #-4]!
   1ff88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ff8c:	2101      	movs	r1, #1
   1ff8e:	f7fd fd3c 	bl	1da0a <net_pkt_append>
	int i, count = 0;
   1ff92:	4627      	mov	r7, r4
				     K_FOREVER);

	net_pkt_append_u8(pkt, 0); /* This will be the record count */

	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ff94:	e000      	b.n	1ff98 <send_mld_report+0x30>
   1ff96:	3401      	adds	r4, #1
   1ff98:	2c04      	cmp	r4, #4
   1ff9a:	dc1e      	bgt.n	1ffda <send_mld_report+0x72>
		if (!iface->ipv6.mcast[i].is_used ||
   1ff9c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ffa0:	00d3      	lsls	r3, r2, #3
   1ffa2:	442b      	add	r3, r5
   1ffa4:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1ffa8:	f013 0f01 	tst.w	r3, #1
   1ffac:	d0f3      	beq.n	1ff96 <send_mld_report+0x2e>
		    !iface->ipv6.mcast[i].is_joined) {
   1ffae:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ffb2:	00d3      	lsls	r3, r2, #3
   1ffb4:	461a      	mov	r2, r3
   1ffb6:	442b      	add	r3, r5
   1ffb8:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1ffbc:	f013 0f02 	tst.w	r3, #2
   1ffc0:	d0e9      	beq.n	1ff96 <send_mld_report+0x2e>
			continue;
		}

		pkt = create_mldv2(pkt, &iface->ipv6.mcast[i].address.in6_addr,
   1ffc2:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1ffc6:	4429      	add	r1, r5
   1ffc8:	2300      	movs	r3, #0
   1ffca:	2202      	movs	r2, #2
   1ffcc:	3118      	adds	r1, #24
   1ffce:	4630      	mov	r0, r6
   1ffd0:	f7ff fda8 	bl	1fb24 <create_mldv2>
   1ffd4:	4606      	mov	r6, r0
				   NET_IPV6_MLDv2_MODE_IS_EXCLUDE, 0);
		count++;
   1ffd6:	3701      	adds	r7, #1
   1ffd8:	e7dd      	b.n	1ff96 <send_mld_report+0x2e>
	}

	if (count > 0) {
   1ffda:	2f00      	cmp	r7, #0
   1ffdc:	dd16      	ble.n	2000c <send_mld_report+0xa4>
		u16_t pos;

		/* Write back the record count */
		net_pkt_write_u8(pkt, pkt->frags, 0, &pos, count);
   1ffde:	68b1      	ldr	r1, [r6, #8]
   1ffe0:	f88d 7015 	strb.w	r7, [sp, #21]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   1ffe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ffe8:	9302      	str	r3, [sp, #8]
   1ffea:	f10d 0315 	add.w	r3, sp, #21
   1ffee:	9301      	str	r3, [sp, #4]
   1fff0:	2301      	movs	r3, #1
   1fff2:	9300      	str	r3, [sp, #0]
   1fff4:	f10d 0316 	add.w	r3, sp, #22
   1fff8:	2200      	movs	r2, #0
   1fffa:	4630      	mov	r0, r6
   1fffc:	f7fd fdbd 	bl	1db7a <net_pkt_write>

		send_mldv2_raw(iface, pkt->frags);
   20000:	68b1      	ldr	r1, [r6, #8]
   20002:	4628      	mov	r0, r5
   20004:	f7ff fe90 	bl	1fd28 <send_mldv2_raw>

		pkt->frags = NULL;
   20008:	2300      	movs	r3, #0
   2000a:	60b3      	str	r3, [r6, #8]
	}

	net_pkt_unref(pkt);
   2000c:	4630      	mov	r0, r6
   2000e:	f7fd fbc4 	bl	1d79a <net_pkt_unref>
}
   20012:	b007      	add	sp, #28
   20014:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00020018 <handle_mld_query>:

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   20018:	b570      	push	{r4, r5, r6, lr}
   2001a:	b08a      	sub	sp, #40	; 0x28
   2001c:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   2001e:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   20020:	2200      	movs	r2, #0
   20022:	e002      	b.n	2002a <handle_mld_query+0x12>
		bytes += buf->len;
   20024:	8999      	ldrh	r1, [r3, #12]
   20026:	440a      	add	r2, r1
		buf = buf->frags;
   20028:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2002a:	2b00      	cmp	r3, #0
   2002c:	d1fa      	bne.n	20024 <handle_mld_query+0xc>
	u16_t total_len = net_pkt_get_len(pkt);
   2002e:	b294      	uxth	r4, r2
	net_stats.ipv6_mld.recv++;
   20030:	4a37      	ldr	r2, [pc, #220]	; (20110 <handle_mld_query+0xf8>)
   20032:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   20036:	3301      	adds	r3, #1
   20038:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	net_stats_update_ipv6_mld_recv();

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   2003c:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   20040:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   20044:	4419      	add	r1, r3
	frag = net_frag_get_pos(pkt,
   20046:	3104      	adds	r1, #4
   20048:	f10d 0212 	add.w	r2, sp, #18
   2004c:	b289      	uxth	r1, r1
   2004e:	4628      	mov	r0, r5
   20050:	f7fd fe72 	bl	1dd38 <net_frag_get_pos>
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   20054:	f10d 0316 	add.w	r3, sp, #22
   20058:	aa04      	add	r2, sp, #16
   2005a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   2005e:	f7fd fd62 	bl	1db26 <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
   20062:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	return net_frag_read(frag, offset, pos, len, NULL);
   20066:	2600      	movs	r6, #0
   20068:	9600      	str	r6, [sp, #0]
   2006a:	2302      	movs	r3, #2
   2006c:	aa04      	add	r2, sp, #16
   2006e:	f7fd fd12 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   20072:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   20076:	ab06      	add	r3, sp, #24
   20078:	9300      	str	r3, [sp, #0]
   2007a:	2310      	movs	r3, #16
   2007c:	eb0d 0203 	add.w	r2, sp, r3
   20080:	f7fd fd09 	bl	1da96 <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
   20084:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   20088:	9600      	str	r6, [sp, #0]
   2008a:	2302      	movs	r3, #2
   2008c:	aa04      	add	r2, sp, #16
   2008e:	f7fd fd02 	bl	1da96 <net_frag_read>
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   20092:	ab05      	add	r3, sp, #20
   20094:	aa04      	add	r2, sp, #16
   20096:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2009a:	68a8      	ldr	r0, [r5, #8]
   2009c:	f7fd fd43 	bl	1db26 <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   200a0:	b358      	cbz	r0, 200fa <handle_mld_query+0xe2>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   200a2:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   200a6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   200aa:	0112      	lsls	r2, r2, #4
   200ac:	b292      	uxth	r2, r2
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
   200ae:	4413      	add	r3, r2
   200b0:	b29b      	uxth	r3, r3
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   200b2:	3344      	adds	r3, #68	; 0x44
   200b4:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   200b6:	429c      	cmp	r4, r3
   200b8:	d307      	bcc.n	200ca <handle_mld_query+0xb2>
   200ba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   200be:	d804      	bhi.n	200ca <handle_mld_query+0xb2>
	return pkt->frags->data;
   200c0:	68ab      	ldr	r3, [r5, #8]
   200c2:	689b      	ldr	r3, [r3, #8]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   200c4:	79db      	ldrb	r3, [r3, #7]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   200c6:	2b01      	cmp	r3, #1
   200c8:	d006      	beq.n	200d8 <handle_mld_query+0xc0>
		struct net_icmp_hdr hdr, *icmp_hdr;

		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   200ca:	a903      	add	r1, sp, #12
   200cc:	4628      	mov	r0, r5
   200ce:	f7fe fc68 	bl	1e9a2 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   200d2:	b148      	cbz	r0, 200e8 <handle_mld_query+0xd0>
   200d4:	7843      	ldrb	r3, [r0, #1]
   200d6:	b93b      	cbnz	r3, 200e8 <handle_mld_query+0xd0>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   200d8:	f7ff fd20 	bl	1fb1c <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   200dc:	2210      	movs	r2, #16
   200de:	4601      	mov	r1, r0
   200e0:	a806      	add	r0, sp, #24
   200e2:	f00a fb55 	bl	2a790 <memcmp>
   200e6:	b178      	cbz	r0, 20108 <handle_mld_query+0xf0>
	net_stats.ipv6_mld.drop++;
   200e8:	4a09      	ldr	r2, [pc, #36]	; (20110 <handle_mld_query+0xf8>)
   200ea:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   200ee:	3301      	adds	r3, #1
   200f0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

drop:
	net_stats_update_ipv6_mld_drop();

	return NET_DROP;
}
   200f4:	2002      	movs	r0, #2
   200f6:	b00a      	add	sp, #40	; 0x28
   200f8:	bd70      	pop	{r4, r5, r6, pc}
	if (!frag && pos == 0xffff) {
   200fa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   200fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20102:	429a      	cmp	r2, r3
   20104:	d1cd      	bne.n	200a2 <handle_mld_query+0x8a>
   20106:	e7ef      	b.n	200e8 <handle_mld_query+0xd0>
	send_mld_report(net_pkt_iface(pkt));
   20108:	6968      	ldr	r0, [r5, #20]
   2010a:	f7ff ff2d 	bl	1ff68 <send_mld_report>
   2010e:	e7eb      	b.n	200e8 <handle_mld_query+0xd0>
   20110:	20003038 	.word	0x20003038

00020114 <net_ipv6_finalize>:
{
   20114:	b508      	push	{r3, lr}
   20116:	460b      	mov	r3, r1
	if (context->flags & NET_CONTEXT_PROTO) {
   20118:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   2011c:	f012 0f40 	tst.w	r2, #64	; 0x40
   20120:	d104      	bne.n	2012c <net_ipv6_finalize+0x18>
	return IPPROTO_UDP;
   20122:	2111      	movs	r1, #17
	return net_ipv6_finalize_raw(pkt, net_context_get_ip_proto(context));
   20124:	4618      	mov	r0, r3
   20126:	f7ff fdd2 	bl	1fcce <net_ipv6_finalize_raw>
}
   2012a:	bd08      	pop	{r3, pc}
		return IPPROTO_TCP;
   2012c:	2106      	movs	r1, #6
   2012e:	e7f9      	b.n	20124 <net_ipv6_finalize+0x10>

00020130 <net_ipv6_nbr_lookup>:
{
   20130:	b508      	push	{r3, lr}
	return nbr_lookup(&net_neighbor.table, iface, addr);
   20132:	460a      	mov	r2, r1
   20134:	4601      	mov	r1, r0
   20136:	4802      	ldr	r0, [pc, #8]	; (20140 <net_ipv6_nbr_lookup+0x10>)
   20138:	f7ff fb42 	bl	1f7c0 <nbr_lookup>
}
   2013c:	bd08      	pop	{r3, pc}
   2013e:	bf00      	nop
   20140:	2000c43c 	.word	0x2000c43c

00020144 <net_ipv6_send_na>:
{
   20144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20148:	b093      	sub	sp, #76	; 0x4c
   2014a:	4605      	mov	r5, r0
   2014c:	468b      	mov	fp, r1
   2014e:	4692      	mov	sl, r2
   20150:	4699      	mov	r9, r3
   20152:	6843      	ldr	r3, [r0, #4]
   20154:	689b      	ldr	r3, [r3, #8]
   20156:	4611      	mov	r1, r2
   20158:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   2015a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2015e:	f7fd faab 	bl	1d6b8 <net_pkt_get_reserve_tx>
   20162:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   20164:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20168:	f7fd fac4 	bl	1d6f4 <net_pkt_get_frag>
   2016c:	4607      	mov	r7, r0
	net_pkt_frag_add(pkt, frag);
   2016e:	4601      	mov	r1, r0
   20170:	4620      	mov	r0, r4
   20172:	f7fd fb3c 	bl	1d7ee <net_pkt_frag_add>
	pkt->iface = iface;
   20176:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20178:	7d6b      	ldrb	r3, [r5, #21]
   2017a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   2017e:	7d6b      	ldrb	r3, [r5, #21]
   20180:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   20184:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   20188:	220a      	movs	r2, #10
   2018a:	f362 03c6 	bfi	r3, r2, #3, #4
   2018e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   20192:	2328      	movs	r3, #40	; 0x28
   20194:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   20198:	68a3      	ldr	r3, [r4, #8]
   2019a:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   2019c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   201a0:	461a      	mov	r2, r3
   201a2:	2100      	movs	r1, #0
   201a4:	1ac0      	subs	r0, r0, r3
   201a6:	f00a fb87 	bl	2a8b8 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   201aa:	2300      	movs	r3, #0
   201ac:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   201ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (iface->link_addr.len == 6) {
   201b2:	7d2b      	ldrb	r3, [r5, #20]
   201b4:	2b06      	cmp	r3, #6
   201b6:	f000 8092 	beq.w	202de <net_ipv6_send_na+0x19a>
	} else if (iface->link_addr.len == 8) {
   201ba:	2b08      	cmp	r3, #8
   201bc:	f000 808d 	beq.w	202da <net_ipv6_send_na+0x196>
	return 0;
   201c0:	2600      	movs	r6, #0
	pkt->ipv6_ext_len = len;
   201c2:	f04f 0800 	mov.w	r8, #0
   201c6:	f884 803b 	strb.w	r8, [r4, #59]	; 0x3b
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   201ca:	f106 0514 	add.w	r5, r6, #20
   201ce:	2288      	movs	r2, #136	; 0x88
   201d0:	f005 01fc 	and.w	r1, r5, #252	; 0xfc
   201d4:	4620      	mov	r0, r4
   201d6:	f7ff fc0c 	bl	1f9f2 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   201da:	4629      	mov	r1, r5
   201dc:	f107 0008 	add.w	r0, r7, #8
   201e0:	f7fa fdb8 	bl	1ad54 <net_buf_simple_add>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   201e4:	a901      	add	r1, sp, #4
   201e6:	4620      	mov	r0, r4
   201e8:	f7fe fdd8 	bl	1ed9c <net_icmpv6_get_na_hdr>
   201ec:	4607      	mov	r7, r0
	return pkt->frags->data;
   201ee:	68a3      	ldr	r3, [r4, #8]
   201f0:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   201f4:	ad06      	add	r5, sp, #24
   201f6:	f8db 0000 	ldr.w	r0, [fp]
   201fa:	f8db 1004 	ldr.w	r1, [fp, #4]
   201fe:	f8db 2008 	ldr.w	r2, [fp, #8]
   20202:	f8db 300c 	ldr.w	r3, [fp, #12]
   20206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20208:	ad06      	add	r5, sp, #24
   2020a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2020c:	f8ce 0008 	str.w	r0, [lr, #8]
   20210:	f8ce 100c 	str.w	r1, [lr, #12]
   20214:	f8ce 2010 	str.w	r2, [lr, #16]
   20218:	f8ce 3014 	str.w	r3, [lr, #20]
   2021c:	68a3      	ldr	r3, [r4, #8]
   2021e:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   20222:	ad0a      	add	r5, sp, #40	; 0x28
   20224:	f8da 0000 	ldr.w	r0, [sl]
   20228:	f8da 1004 	ldr.w	r1, [sl, #4]
   2022c:	f8da 2008 	ldr.w	r2, [sl, #8]
   20230:	f8da 300c 	ldr.w	r3, [sl, #12]
   20234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20236:	ad0a      	add	r5, sp, #40	; 0x28
   20238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2023a:	f8cc 0018 	str.w	r0, [ip, #24]
   2023e:	f8cc 101c 	str.w	r1, [ip, #28]
   20242:	f8cc 2020 	str.w	r2, [ip, #32]
   20246:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   2024a:	ad0e      	add	r5, sp, #56	; 0x38
   2024c:	f8d9 0000 	ldr.w	r0, [r9]
   20250:	f8d9 1004 	ldr.w	r1, [r9, #4]
   20254:	f8d9 2008 	ldr.w	r2, [r9, #8]
   20258:	f8d9 300c 	ldr.w	r3, [r9, #12]
   2025c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2025e:	ad0e      	add	r5, sp, #56	; 0x38
   20260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20262:	6078      	str	r0, [r7, #4]
   20264:	60b9      	str	r1, [r7, #8]
   20266:	60fa      	str	r2, [r7, #12]
   20268:	613b      	str	r3, [r7, #16]
	return pkt->iface;
   2026a:	f8d4 a014 	ldr.w	sl, [r4, #20]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   2026e:	4620      	mov	r0, r4
   20270:	f7fd fd6c 	bl	1dd4c <net_pkt_icmp_data>
	set_llao(&net_pkt_iface(pkt)->link_addr,
   20274:	f100 0518 	add.w	r5, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   20278:	2302      	movs	r3, #2
   2027a:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   2027c:	08f3      	lsrs	r3, r6, #3
   2027e:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   20280:	f89a 2014 	ldrb.w	r2, [sl, #20]
   20284:	f8da 1010 	ldr.w	r1, [sl, #16]
   20288:	301a      	adds	r0, #26
   2028a:	f7e0 f819 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   2028e:	f89a 2014 	ldrb.w	r2, [sl, #20]
   20292:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   20294:	1ab2      	subs	r2, r6, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20296:	3a02      	subs	r2, #2
   20298:	4641      	mov	r1, r8
   2029a:	4428      	add	r0, r5
   2029c:	f00a fb0c 	bl	2a8b8 <memset>
	na_hdr->flags = flags;
   202a0:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   202a4:	703b      	strb	r3, [r7, #0]
	net_icmpv6_set_na_hdr(pkt, na_hdr);
   202a6:	4639      	mov	r1, r7
   202a8:	4620      	mov	r0, r4
   202aa:	f7fe fdac 	bl	1ee06 <net_icmpv6_set_na_hdr>
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   202ae:	68a3      	ldr	r3, [r4, #8]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   202b0:	3640      	adds	r6, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   202b2:	819e      	strh	r6, [r3, #12]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   202b4:	68a1      	ldr	r1, [r4, #8]
   202b6:	4620      	mov	r0, r4
   202b8:	f7fe fb26 	bl	1e908 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   202bc:	4620      	mov	r0, r4
   202be:	f7fa fe6b 	bl	1af98 <net_send_data>
   202c2:	4540      	cmp	r0, r8
   202c4:	db0d      	blt.n	202e2 <net_ipv6_send_na+0x19e>
	net_stats.ipv6_nd.sent++;
   202c6:	4a0d      	ldr	r2, [pc, #52]	; (202fc <net_ipv6_send_na+0x1b8>)
   202c8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   202cc:	3301      	adds	r3, #1
   202ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   202d2:	4640      	mov	r0, r8
}
   202d4:	b013      	add	sp, #76	; 0x4c
   202d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   202da:	2610      	movs	r6, #16
   202dc:	e771      	b.n	201c2 <net_ipv6_send_na+0x7e>
		return 8;
   202de:	2608      	movs	r6, #8
   202e0:	e76f      	b.n	201c2 <net_ipv6_send_na+0x7e>
	net_pkt_unref(pkt);
   202e2:	4620      	mov	r0, r4
   202e4:	f7fd fa59 	bl	1d79a <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   202e8:	4a04      	ldr	r2, [pc, #16]	; (202fc <net_ipv6_send_na+0x1b8>)
   202ea:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   202ee:	3301      	adds	r3, #1
   202f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   202f4:	f06f 0015 	mvn.w	r0, #21
   202f8:	e7ec      	b.n	202d4 <net_ipv6_send_na+0x190>
   202fa:	bf00      	nop
   202fc:	20003038 	.word	0x20003038

00020300 <net_ipv6_nbr_set_reachable_timer>:
{
   20300:	b508      	push	{r3, lr}
   20302:	68c9      	ldr	r1, [r1, #12]
   20304:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
   20308:	3114      	adds	r1, #20
   2030a:	4802      	ldr	r0, [pc, #8]	; (20314 <net_ipv6_nbr_set_reachable_timer+0x14>)
   2030c:	f009 fe6a 	bl	29fe4 <k_delayed_work_submit_to_queue>
   20310:	bd08      	pop	{r3, pc}
   20312:	bf00      	nop
   20314:	20003158 	.word	0x20003158

00020318 <handle_na_input>:
{
   20318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2031c:	b090      	sub	sp, #64	; 0x40
   2031e:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   20320:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   20322:	2200      	movs	r2, #0
   20324:	e002      	b.n	2032c <handle_na_input+0x14>
		bytes += buf->len;
   20326:	8999      	ldrh	r1, [r3, #12]
   20328:	440a      	add	r2, r1
		buf = buf->frags;
   2032a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2032c:	2b00      	cmp	r3, #0
   2032e:	d1fa      	bne.n	20326 <handle_na_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   20330:	b295      	uxth	r5, r2
	na_hdr = net_icmpv6_get_na_hdr(pkt, &nahdr);
   20332:	a90a      	add	r1, sp, #40	; 0x28
   20334:	4620      	mov	r0, r4
   20336:	f7fe fd31 	bl	1ed9c <net_icmpv6_get_na_hdr>
   2033a:	4607      	mov	r7, r0
	net_stats.ipv6_nd.recv++;
   2033c:	4aaf      	ldr	r2, [pc, #700]	; (205fc <handle_na_input+0x2e4>)
   2033e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   20342:	3301      	adds	r3, #1
   20344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   20348:	2d41      	cmp	r5, #65	; 0x41
   2034a:	d904      	bls.n	20356 <handle_na_input+0x3e>
	return pkt->frags->data;
   2034c:	68a3      	ldr	r3, [r4, #8]
   2034e:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20350:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   20352:	2bff      	cmp	r3, #255	; 0xff
   20354:	d010      	beq.n	20378 <handle_na_input+0x60>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   20356:	a905      	add	r1, sp, #20
   20358:	4620      	mov	r0, r4
   2035a:	f7fe fb22 	bl	1e9a2 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   2035e:	b108      	cbz	r0, 20364 <handle_na_input+0x4c>
   20360:	7843      	ldrb	r3, [r0, #1]
   20362:	b1cb      	cbz	r3, 20398 <handle_na_input+0x80>
	net_stats.ipv6_nd.drop++;
   20364:	4aa5      	ldr	r2, [pc, #660]	; (205fc <handle_na_input+0x2e4>)
   20366:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   2036a:	3301      	adds	r3, #1
   2036c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   20370:	2002      	movs	r0, #2
}
   20372:	b010      	add	sp, #64	; 0x40
   20374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return addr->s6_addr[0] == 0xFF;
   20378:	7903      	ldrb	r3, [r0, #4]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   2037a:	2bff      	cmp	r3, #255	; 0xff
   2037c:	d0eb      	beq.n	20356 <handle_na_input+0x3e>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2037e:	a905      	add	r1, sp, #20
   20380:	4620      	mov	r0, r4
   20382:	f7fe fd0b 	bl	1ed9c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   20386:	7803      	ldrb	r3, [r0, #0]
	    net_is_ipv6_addr_mcast(&na_hdr->tgt) ||
   20388:	f013 0f40 	tst.w	r3, #64	; 0x40
   2038c:	d004      	beq.n	20398 <handle_na_input+0x80>
   2038e:	68a3      	ldr	r3, [r4, #8]
   20390:	689b      	ldr	r3, [r3, #8]
   20392:	7e1b      	ldrb	r3, [r3, #24]
	    (net_is_solicited(pkt) &&
   20394:	2bff      	cmp	r3, #255	; 0xff
   20396:	d0de      	beq.n	20356 <handle_na_input+0x3e>
	pkt->ipv6_ext_opt_len = len;
   20398:	2314      	movs	r3, #20
   2039a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   2039e:	a90f      	add	r1, sp, #60	; 0x3c
   203a0:	4620      	mov	r0, r4
   203a2:	f7fe fcc9 	bl	1ed38 <net_icmpv6_get_nd_opt_hdr>
	return net_buf_frags_len(pkt->frags);
   203a6:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   203a8:	2600      	movs	r6, #0
	while (buf) {
   203aa:	b11b      	cbz	r3, 203b4 <handle_na_input+0x9c>
		bytes += buf->len;
   203ac:	899a      	ldrh	r2, [r3, #12]
   203ae:	4416      	add	r6, r2
		buf = buf->frags;
   203b0:	681b      	ldr	r3, [r3, #0]
   203b2:	e7fa      	b.n	203aa <handle_na_input+0x92>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   203b4:	3e2c      	subs	r6, #44	; 0x2c
	u16_t tllao_offset = 0;
   203b6:	2500      	movs	r5, #0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   203b8:	e00b      	b.n	203d2 <handle_na_input+0xba>
					     (nd_opt_hdr->len << 3));
   203ba:	00db      	lsls	r3, r3, #3
   203bc:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   203be:	4413      	add	r3, r2
   203c0:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   203c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   203c6:	4293      	cmp	r3, r2
   203c8:	d9cc      	bls.n	20364 <handle_na_input+0x4c>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   203ca:	a90f      	add	r1, sp, #60	; 0x3c
   203cc:	4620      	mov	r0, r4
   203ce:	f7fe fcb3 	bl	1ed38 <net_icmpv6_get_nd_opt_hdr>
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   203d2:	b190      	cbz	r0, 203fa <handle_na_input+0xe2>
	return pkt->ipv6_ext_opt_len;
   203d4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   203d8:	4296      	cmp	r6, r2
   203da:	d90e      	bls.n	203fa <handle_na_input+0xe2>
		if (!nd_opt_hdr->len) {
   203dc:	7843      	ldrb	r3, [r0, #1]
   203de:	b163      	cbz	r3, 203fa <handle_na_input+0xe2>
		switch (nd_opt_hdr->type) {
   203e0:	7801      	ldrb	r1, [r0, #0]
   203e2:	2902      	cmp	r1, #2
   203e4:	d1e9      	bne.n	203ba <handle_na_input+0xa2>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   203e6:	f894 5033 	ldrb.w	r5, [r4, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   203ea:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   203ee:	440d      	add	r5, r1
				sizeof(struct net_icmp_hdr) +
   203f0:	4415      	add	r5, r2
   203f2:	b2ad      	uxth	r5, r5
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   203f4:	3506      	adds	r5, #6
   203f6:	b2ad      	uxth	r5, r5
			break;
   203f8:	e7df      	b.n	203ba <handle_na_input+0xa2>
	return pkt->iface;
   203fa:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   203fe:	f107 0904 	add.w	r9, r7, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20402:	2600      	movs	r6, #0
   20404:	e003      	b.n	2040e <handle_na_input+0xf6>
		if (net_is_ipv6_prefix(addr->s6_addr,
   20406:	f1ba 0f00 	cmp.w	sl, #0
   2040a:	d11f      	bne.n	2044c <handle_na_input+0x134>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2040c:	3601      	adds	r6, #1
   2040e:	2e02      	cmp	r6, #2
   20410:	dc23      	bgt.n	2045a <handle_na_input+0x142>
		if (!iface->ipv6.unicast[i].is_used ||
   20412:	236c      	movs	r3, #108	; 0x6c
   20414:	fb03 8306 	mla	r3, r3, r6, r8
   20418:	f893 a094 	ldrb.w	sl, [r3, #148]	; 0x94
   2041c:	f1ba 0f00 	cmp.w	sl, #0
   20420:	d0f4      	beq.n	2040c <handle_na_input+0xf4>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   20422:	236c      	movs	r3, #108	; 0x6c
   20424:	fb03 8306 	mla	r3, r3, r6, r8
   20428:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   2042a:	2b0a      	cmp	r3, #10
   2042c:	d1ee      	bne.n	2040c <handle_na_input+0xf4>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   2042e:	216c      	movs	r1, #108	; 0x6c
   20430:	fb01 f106 	mul.w	r1, r1, r6
   20434:	3120      	adds	r1, #32
   20436:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   20438:	2210      	movs	r2, #16
   2043a:	4411      	add	r1, r2
   2043c:	4648      	mov	r0, r9
   2043e:	f00a f9a7 	bl	2a790 <memcmp>
   20442:	2800      	cmp	r0, #0
   20444:	d0df      	beq.n	20406 <handle_na_input+0xee>
		return false;
   20446:	f04f 0a00 	mov.w	sl, #0
   2044a:	e7dc      	b.n	20406 <handle_na_input+0xee>
			return &iface->ipv6.unicast[i];
   2044c:	236c      	movs	r3, #108	; 0x6c
   2044e:	fb03 f306 	mul.w	r3, r3, r6
   20452:	3320      	adds	r3, #32
   20454:	4443      	add	r3, r8
   20456:	330c      	adds	r3, #12
   20458:	e000      	b.n	2045c <handle_na_input+0x144>
	return NULL;
   2045a:	2300      	movs	r3, #0
	if (ifaddr) {
   2045c:	b17b      	cbz	r3, 2047e <handle_na_input+0x166>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   2045e:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
   20462:	2b00      	cmp	r3, #0
   20464:	f47f af7e 	bne.w	20364 <handle_na_input+0x4c>
   20468:	6960      	ldr	r0, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   2046a:	88ba      	ldrh	r2, [r7, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   2046c:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20470:	429a      	cmp	r2, r3
   20472:	f43f af77 	beq.w	20364 <handle_na_input+0x4c>
	net_if_ipv6_dad_failed(iface, addr);
   20476:	4649      	mov	r1, r9
   20478:	f7fb fa0a 	bl	1b890 <net_if_ipv6_dad_failed>
   2047c:	e772      	b.n	20364 <handle_na_input+0x4c>
	struct net_linkaddr_storage lladdr = { 0 };
   2047e:	2300      	movs	r3, #0
   20480:	9303      	str	r3, [sp, #12]
   20482:	9304      	str	r3, [sp, #16]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   20484:	1d3a      	adds	r2, r7, #4
   20486:	6961      	ldr	r1, [r4, #20]
   20488:	485d      	ldr	r0, [pc, #372]	; (20600 <handle_na_input+0x2e8>)
   2048a:	f7ff f999 	bl	1f7c0 <nbr_lookup>
	if (!nbr) {
   2048e:	4606      	mov	r6, r0
   20490:	2800      	cmp	r0, #0
   20492:	f000 8107 	beq.w	206a4 <handle_na_input+0x38c>
	if (tllao_offset) {
   20496:	b995      	cbnz	r5, 204be <handle_na_input+0x1a6>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   20498:	7873      	ldrb	r3, [r6, #1]
   2049a:	2bff      	cmp	r3, #255	; 0xff
   2049c:	d135      	bne.n	2050a <handle_na_input+0x1f2>
		if (!tllao_offset) {
   2049e:	bb2d      	cbnz	r5, 204ec <handle_na_input+0x1d4>
			return false;
   204a0:	2300      	movs	r3, #0
	if (!handle_na_neighbor(pkt, na_hdr, tllao_offset)) {
   204a2:	2b00      	cmp	r3, #0
   204a4:	f43f af5e 	beq.w	20364 <handle_na_input+0x4c>
	net_pkt_unref(pkt);
   204a8:	4620      	mov	r0, r4
   204aa:	f7fd f976 	bl	1d79a <net_pkt_unref>
	net_stats.ipv6_nd.sent++;
   204ae:	4a53      	ldr	r2, [pc, #332]	; (205fc <handle_na_input+0x2e4>)
   204b0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   204b4:	3301      	adds	r3, #1
   204b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return NET_OK;
   204ba:	2000      	movs	r0, #0
   204bc:	e759      	b.n	20372 <handle_na_input+0x5a>
   204be:	6963      	ldr	r3, [r4, #20]
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   204c0:	7d1b      	ldrb	r3, [r3, #20]
   204c2:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   204c6:	f10d 020e 	add.w	r2, sp, #14
   204ca:	9200      	str	r2, [sp, #0]
   204cc:	f10d 020a 	add.w	r2, sp, #10
   204d0:	4629      	mov	r1, r5
   204d2:	68a0      	ldr	r0, [r4, #8]
   204d4:	f7fd fadf 	bl	1da96 <net_frag_read>
		if (!frag && pos == 0xffff) {
   204d8:	2800      	cmp	r0, #0
   204da:	d1dd      	bne.n	20498 <handle_na_input+0x180>
   204dc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   204e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   204e4:	429a      	cmp	r2, r3
   204e6:	d1d7      	bne.n	20498 <handle_na_input+0x180>
			return false;
   204e8:	2300      	movs	r3, #0
   204ea:	e7da      	b.n	204a2 <handle_na_input+0x18a>
		nbr_lladdr.len = lladdr.len;
   204ec:	f89d 300d 	ldrb.w	r3, [sp, #13]
   204f0:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   204f4:	aa10      	add	r2, sp, #64	; 0x40
   204f6:	f10d 030e 	add.w	r3, sp, #14
   204fa:	f842 3d2c 	str.w	r3, [r2, #-44]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   204fe:	6961      	ldr	r1, [r4, #20]
   20500:	4630      	mov	r0, r6
   20502:	f7fe ff77 	bl	1f3f4 <net_nbr_link>
   20506:	2800      	cmp	r0, #0
   20508:	d14a      	bne.n	205a0 <handle_na_input+0x288>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   2050a:	7870      	ldrb	r0, [r6, #1]
   2050c:	f7fe ffd8 	bl	1f4c0 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   20510:	4680      	mov	r8, r0
   20512:	2800      	cmp	r0, #0
   20514:	f000 80c8 	beq.w	206a8 <handle_na_input+0x390>
	if (tllao_offset) {
   20518:	2d00      	cmp	r5, #0
   2051a:	d145      	bne.n	205a8 <handle_na_input+0x290>
	bool lladdr_changed = false;
   2051c:	2700      	movs	r7, #0
   2051e:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   20520:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   20524:	2b00      	cmp	r3, #0
   20526:	d155      	bne.n	205d4 <handle_na_input+0x2bc>
		if (!tllao_offset) {
   20528:	2d00      	cmp	r5, #0
   2052a:	f000 80bf 	beq.w	206ac <handle_na_input+0x394>
		if (lladdr_changed) {
   2052e:	b11f      	cbz	r7, 20538 <handle_na_input+0x220>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   20530:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   20534:	2a06      	cmp	r2, #6
   20536:	d941      	bls.n	205bc <handle_na_input+0x2a4>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20538:	a905      	add	r1, sp, #20
   2053a:	4620      	mov	r0, r4
   2053c:	f7fe fc2e 	bl	1ed9c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   20540:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   20542:	f013 0f40 	tst.w	r3, #64	; 0x40
   20546:	d040      	beq.n	205ca <handle_na_input+0x2b2>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   20548:	2101      	movs	r1, #1
   2054a:	4630      	mov	r0, r6
   2054c:	f7fe ffc0 	bl	1f4d0 <ipv6_nbr_set_state>
   20550:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   20552:	2200      	movs	r2, #0
   20554:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   20558:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   2055a:	3014      	adds	r0, #20
   2055c:	f009 fce8 	bl	29f30 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   20560:	4631      	mov	r1, r6
   20562:	6960      	ldr	r0, [r4, #20]
   20564:	f7ff fecc 	bl	20300 <net_ipv6_nbr_set_reachable_timer>
   20568:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2056a:	a905      	add	r1, sp, #20
   2056c:	4620      	mov	r0, r4
   2056e:	f7fe fc15 	bl	1ed9c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   20572:	7803      	ldrb	r3, [r0, #0]
   20574:	09db      	lsrs	r3, r3, #7
		net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   20576:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   2057a:	68f3      	ldr	r3, [r6, #12]
	pending = net_ipv6_nbr_data(nbr)->pending;
   2057c:	681d      	ldr	r5, [r3, #0]
	if (pending) {
   2057e:	2d00      	cmp	r5, #0
   20580:	f000 8098 	beq.w	206b4 <handle_na_input+0x39c>
		if (net_send_data(pending) < 0) {
   20584:	4628      	mov	r0, r5
   20586:	f7fa fd07 	bl	1af98 <net_send_data>
   2058a:	2800      	cmp	r0, #0
   2058c:	f2c0 8086 	blt.w	2069c <handle_na_input+0x384>
   20590:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->pending = NULL;
   20592:	2200      	movs	r2, #0
   20594:	601a      	str	r2, [r3, #0]
		net_pkt_unref(pending);
   20596:	4628      	mov	r0, r5
   20598:	f7fd f8ff 	bl	1d79a <net_pkt_unref>
	return true;
   2059c:	2301      	movs	r3, #1
   2059e:	e780      	b.n	204a2 <handle_na_input+0x18a>
			nbr_free(nbr);
   205a0:	4630      	mov	r0, r6
   205a2:	f7ff fa53 	bl	1fa4c <nbr_free>
   205a6:	e77b      	b.n	204a0 <handle_na_input+0x188>
		lladdr_changed = memcmp(lladdr.addr,
   205a8:	7842      	ldrb	r2, [r0, #1]
   205aa:	1c81      	adds	r1, r0, #2
   205ac:	f10d 000e 	add.w	r0, sp, #14
   205b0:	f00a f8ee 	bl	2a790 <memcmp>
   205b4:	1c07      	adds	r7, r0, #0
   205b6:	bf18      	it	ne
   205b8:	2701      	movne	r7, #1
   205ba:	e7b0      	b.n	2051e <handle_na_input+0x206>
	memcpy(lladdr_store->addr, new_addr, new_len);
   205bc:	f10d 010e 	add.w	r1, sp, #14
   205c0:	f108 0002 	add.w	r0, r8, #2
   205c4:	f7df fe7c 	bl	2c0 <memcpy>
   205c8:	e7b6      	b.n	20538 <handle_na_input+0x220>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   205ca:	2102      	movs	r1, #2
   205cc:	4630      	mov	r0, r6
   205ce:	f7fe ff7f 	bl	1f4d0 <ipv6_nbr_set_state>
   205d2:	e7c9      	b.n	20568 <handle_na_input+0x250>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   205d4:	a905      	add	r1, sp, #20
   205d6:	4620      	mov	r0, r4
   205d8:	f7fe fbe0 	bl	1ed9c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   205dc:	7803      	ldrb	r3, [r0, #0]
	if (!net_is_override(pkt) && lladdr_changed) {
   205de:	f013 0f20 	tst.w	r3, #32
   205e2:	d10f      	bne.n	20604 <handle_na_input+0x2ec>
   205e4:	b177      	cbz	r7, 20604 <handle_na_input+0x2ec>
   205e6:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state ==
   205e8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   205ec:	2b01      	cmp	r3, #1
   205ee:	d15f      	bne.n	206b0 <handle_na_input+0x398>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   205f0:	2102      	movs	r1, #2
   205f2:	4630      	mov	r0, r6
   205f4:	f7fe ff6c 	bl	1f4d0 <ipv6_nbr_set_state>
		return false;
   205f8:	2300      	movs	r3, #0
   205fa:	e752      	b.n	204a2 <handle_na_input+0x18a>
   205fc:	20003038 	.word	0x20003038
   20600:	2000c43c 	.word	0x2000c43c
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20604:	a905      	add	r1, sp, #20
   20606:	4620      	mov	r0, r4
   20608:	f7fe fbc8 	bl	1ed9c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   2060c:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   2060e:	f013 0f20 	tst.w	r3, #32
   20612:	d018      	beq.n	20646 <handle_na_input+0x32e>
		if (lladdr_changed) {
   20614:	b14f      	cbz	r7, 2062a <handle_na_input+0x312>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   20616:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   2061a:	2a06      	cmp	r2, #6
   2061c:	d805      	bhi.n	2062a <handle_na_input+0x312>
	memcpy(lladdr_store->addr, new_addr, new_len);
   2061e:	f10d 010e 	add.w	r1, sp, #14
   20622:	f108 0002 	add.w	r0, r8, #2
   20626:	f7df fe4b 	bl	2c0 <memcpy>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2062a:	a905      	add	r1, sp, #20
   2062c:	4620      	mov	r0, r4
   2062e:	f7fe fbb5 	bl	1ed9c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   20632:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   20634:	f013 0f40 	tst.w	r3, #64	; 0x40
   20638:	d11e      	bne.n	20678 <handle_na_input+0x360>
			if (lladdr_changed) {
   2063a:	b17f      	cbz	r7, 2065c <handle_na_input+0x344>
				ipv6_nbr_set_state(nbr,
   2063c:	2102      	movs	r1, #2
   2063e:	4630      	mov	r0, r6
   20640:	f7fe ff46 	bl	1f4d0 <ipv6_nbr_set_state>
   20644:	e00a      	b.n	2065c <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20646:	a905      	add	r1, sp, #20
   20648:	4620      	mov	r0, r4
   2064a:	f7fe fba7 	bl	1ed9c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   2064e:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   20650:	f013 0f20 	tst.w	r3, #32
   20654:	d102      	bne.n	2065c <handle_na_input+0x344>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   20656:	b10d      	cbz	r5, 2065c <handle_na_input+0x344>
   20658:	2f00      	cmp	r7, #0
   2065a:	d0db      	beq.n	20614 <handle_na_input+0x2fc>
   2065c:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   2065e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   20662:	b9b3      	cbnz	r3, 20692 <handle_na_input+0x37a>
   20664:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20666:	a905      	add	r1, sp, #20
   20668:	4620      	mov	r0, r4
   2066a:	f7fe fb97 	bl	1ed9c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   2066e:	7803      	ldrb	r3, [r0, #0]
   20670:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   20672:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   20676:	e780      	b.n	2057a <handle_na_input+0x262>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   20678:	2101      	movs	r1, #1
   2067a:	4630      	mov	r0, r6
   2067c:	f7fe ff28 	bl	1f4d0 <ipv6_nbr_set_state>
   20680:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   20682:	3014      	adds	r0, #20
   20684:	f009 fc54 	bl	29f30 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   20688:	4631      	mov	r1, r6
   2068a:	6960      	ldr	r0, [r4, #20]
   2068c:	f7ff fe38 	bl	20300 <net_ipv6_nbr_set_reachable_timer>
   20690:	e7e4      	b.n	2065c <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20692:	a905      	add	r1, sp, #20
   20694:	4620      	mov	r0, r4
   20696:	f7fe fb81 	bl	1ed9c <net_icmpv6_get_na_hdr>
   2069a:	e7e3      	b.n	20664 <handle_na_input+0x34c>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   2069c:	68f0      	ldr	r0, [r6, #12]
   2069e:	f7ff f8af 	bl	1f800 <nbr_clear_ns_pending>
   206a2:	e778      	b.n	20596 <handle_na_input+0x27e>
		return false;
   206a4:	2300      	movs	r3, #0
   206a6:	e6fc      	b.n	204a2 <handle_na_input+0x18a>
		return false;
   206a8:	2300      	movs	r3, #0
   206aa:	e6fa      	b.n	204a2 <handle_na_input+0x18a>
			return false;
   206ac:	2300      	movs	r3, #0
   206ae:	e6f8      	b.n	204a2 <handle_na_input+0x18a>
		return false;
   206b0:	2300      	movs	r3, #0
   206b2:	e6f6      	b.n	204a2 <handle_na_input+0x18a>
	return true;
   206b4:	2301      	movs	r3, #1
   206b6:	e6f4      	b.n	204a2 <handle_na_input+0x18a>

000206b8 <net_ipv6_send_ns>:
{
   206b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   206bc:	b09d      	sub	sp, #116	; 0x74
   206be:	4605      	mov	r5, r0
   206c0:	9101      	str	r1, [sp, #4]
   206c2:	4691      	mov	r9, r2
   206c4:	461e      	mov	r6, r3
   206c6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   206c8:	f89d b09c 	ldrb.w	fp, [sp, #156]	; 0x9c
	return iface->l2->reserve(iface, (void *)dst_ip6);
   206cc:	6843      	ldr	r3, [r0, #4]
   206ce:	689b      	ldr	r3, [r3, #8]
   206d0:	4631      	mov	r1, r6
   206d2:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   206d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   206d8:	f7fc ffee 	bl	1d6b8 <net_pkt_get_reserve_tx>
   206dc:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   206de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   206e2:	f7fd f807 	bl	1d6f4 <net_pkt_get_frag>
   206e6:	4682      	mov	sl, r0
	net_pkt_frag_add(pkt, frag);
   206e8:	4601      	mov	r1, r0
   206ea:	4620      	mov	r0, r4
   206ec:	f7fd f87f 	bl	1d7ee <net_pkt_frag_add>
	pkt->iface = iface;
   206f0:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   206f2:	7d6b      	ldrb	r3, [r5, #21]
   206f4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   206f8:	7d6b      	ldrb	r3, [r5, #21]
   206fa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   206fe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   20702:	220a      	movs	r2, #10
   20704:	f362 03c6 	bfi	r3, r2, #3, #4
   20708:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   2070c:	2328      	movs	r3, #40	; 0x28
   2070e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	pkt->ipv6_ext_len = len;
   20712:	2500      	movs	r5, #0
   20714:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
	return pkt->frags->data;
   20718:	68a3      	ldr	r3, [r4, #8]
   2071a:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   2071c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   20720:	461a      	mov	r2, r3
   20722:	4629      	mov	r1, r5
   20724:	1ac0      	subs	r0, r0, r3
   20726:	f00a f8c7 	bl	2a8b8 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   2072a:	6225      	str	r5, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   2072c:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return pkt->iface;
   20730:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   20732:	7d1b      	ldrb	r3, [r3, #20]
   20734:	2b06      	cmp	r3, #6
   20736:	f000 808b 	beq.w	20850 <net_ipv6_send_ns+0x198>
	} else if (iface->link_addr.len == 8) {
   2073a:	2b08      	cmp	r3, #8
   2073c:	f000 8085 	beq.w	2084a <net_ipv6_send_ns+0x192>
	return 0;
   20740:	f04f 0800 	mov.w	r8, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   20744:	2287      	movs	r2, #135	; 0x87
   20746:	f108 0114 	add.w	r1, r8, #20
   2074a:	4620      	mov	r0, r4
   2074c:	f7ff f951 	bl	1f9f2 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   20750:	f10a 0a08 	add.w	sl, sl, #8
   20754:	2114      	movs	r1, #20
   20756:	4650      	mov	r0, sl
   20758:	f7fa fafc 	bl	1ad54 <net_buf_simple_add>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &hdr);
   2075c:	a903      	add	r1, sp, #12
   2075e:	4620      	mov	r0, r4
   20760:	f7fe fa8e 	bl	1ec80 <net_icmpv6_get_ns_hdr>
   20764:	4605      	mov	r5, r0
	if (!dst) {
   20766:	2e00      	cmp	r6, #0
   20768:	d075      	beq.n	20856 <net_ipv6_send_ns+0x19e>
	return pkt->frags->data;
   2076a:	68a3      	ldr	r3, [r4, #8]
   2076c:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   20770:	f10d 0c20 	add.w	ip, sp, #32
   20774:	6830      	ldr	r0, [r6, #0]
   20776:	6871      	ldr	r1, [r6, #4]
   20778:	68b2      	ldr	r2, [r6, #8]
   2077a:	68f3      	ldr	r3, [r6, #12]
   2077c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20780:	ae08      	add	r6, sp, #32
   20782:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20784:	f8ce 0018 	str.w	r0, [lr, #24]
   20788:	f8ce 101c 	str.w	r1, [lr, #28]
   2078c:	f8ce 2020 	str.w	r2, [lr, #32]
   20790:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   20794:	ae0c      	add	r6, sp, #48	; 0x30
   20796:	6838      	ldr	r0, [r7, #0]
   20798:	6879      	ldr	r1, [r7, #4]
   2079a:	68ba      	ldr	r2, [r7, #8]
   2079c:	68fb      	ldr	r3, [r7, #12]
   2079e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   207a0:	1d2f      	adds	r7, r5, #4
   207a2:	ae0c      	add	r6, sp, #48	; 0x30
   207a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   207a6:	6068      	str	r0, [r5, #4]
   207a8:	6079      	str	r1, [r7, #4]
   207aa:	60ba      	str	r2, [r7, #8]
   207ac:	60fb      	str	r3, [r7, #12]
	net_icmpv6_set_ns_hdr(pkt, ns_hdr);
   207ae:	4629      	mov	r1, r5
   207b0:	4620      	mov	r0, r4
   207b2:	f7fe fa89 	bl	1ecc8 <net_icmpv6_set_ns_hdr>
	if (is_my_address) {
   207b6:	f1bb 0f00 	cmp.w	fp, #0
   207ba:	d06a      	beq.n	20892 <net_ipv6_send_ns+0x1da>
   207bc:	68a3      	ldr	r3, [r4, #8]
   207be:	689f      	ldr	r7, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   207c0:	f7ff f9ac 	bl	1fb1c <net_ipv6_unspecified_address>
   207c4:	4603      	mov	r3, r0
   207c6:	ae10      	add	r6, sp, #64	; 0x40
   207c8:	6800      	ldr	r0, [r0, #0]
   207ca:	6859      	ldr	r1, [r3, #4]
   207cc:	689a      	ldr	r2, [r3, #8]
   207ce:	68db      	ldr	r3, [r3, #12]
   207d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   207d2:	ae10      	add	r6, sp, #64	; 0x40
   207d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   207d6:	60b8      	str	r0, [r7, #8]
   207d8:	60f9      	str	r1, [r7, #12]
   207da:	613a      	str	r2, [r7, #16]
   207dc:	617b      	str	r3, [r7, #20]
   207de:	68a3      	ldr	r3, [r4, #8]
   207e0:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->len[1] -= llao_len;
   207e2:	795a      	ldrb	r2, [r3, #5]
   207e4:	eba2 0808 	sub.w	r8, r2, r8
   207e8:	f883 8005 	strb.w	r8, [r3, #5]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   207ec:	68a1      	ldr	r1, [r4, #8]
   207ee:	4620      	mov	r0, r4
   207f0:	f7fe f88a 	bl	1e908 <net_icmpv6_set_chksum>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr->tgt);
   207f4:	3504      	adds	r5, #4
   207f6:	462a      	mov	r2, r5
   207f8:	6961      	ldr	r1, [r4, #20]
   207fa:	486f      	ldr	r0, [pc, #444]	; (209b8 <net_ipv6_send_ns+0x300>)
   207fc:	f7fe ffe0 	bl	1f7c0 <nbr_lookup>
	if (!nbr) {
   20800:	4606      	mov	r6, r0
   20802:	2800      	cmp	r0, #0
   20804:	f000 80ad 	beq.w	20962 <net_ipv6_send_ns+0x2aa>
	if (pending) {
   20808:	9801      	ldr	r0, [sp, #4]
   2080a:	b170      	cbz	r0, 2082a <net_ipv6_send_ns+0x172>
   2080c:	68f5      	ldr	r5, [r6, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
   2080e:	682b      	ldr	r3, [r5, #0]
   20810:	2b00      	cmp	r3, #0
   20812:	f040 80b1 	bne.w	20978 <net_ipv6_send_ns+0x2c0>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   20816:	f7fc ffb1 	bl	1d77c <net_pkt_ref>
   2081a:	6028      	str	r0, [r5, #0]
   2081c:	68f1      	ldr	r1, [r6, #12]
   2081e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20822:	313c      	adds	r1, #60	; 0x3c
   20824:	4865      	ldr	r0, [pc, #404]	; (209bc <net_ipv6_send_ns+0x304>)
   20826:	f009 fbdd 	bl	29fe4 <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   2082a:	4620      	mov	r0, r4
   2082c:	f7fa fbb4 	bl	1af98 <net_send_data>
   20830:	2800      	cmp	r0, #0
   20832:	f2c0 80b0 	blt.w	20996 <net_ipv6_send_ns+0x2de>
   20836:	4a62      	ldr	r2, [pc, #392]	; (209c0 <net_ipv6_send_ns+0x308>)
   20838:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   2083c:	3301      	adds	r3, #1
   2083e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   20842:	2000      	movs	r0, #0
}
   20844:	b01d      	add	sp, #116	; 0x74
   20846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   2084a:	f04f 0810 	mov.w	r8, #16
   2084e:	e779      	b.n	20744 <net_ipv6_send_ns+0x8c>
		return 8;
   20850:	f04f 0808 	mov.w	r8, #8
   20854:	e776      	b.n	20744 <net_ipv6_send_ns+0x8c>
   20856:	68a3      	ldr	r3, [r4, #8]
   20858:	689b      	ldr	r3, [r3, #8]
	dst->s6_addr[0]   = 0xFF;
   2085a:	21ff      	movs	r1, #255	; 0xff
   2085c:	7619      	strb	r1, [r3, #24]
	dst->s6_addr[1]   = 0x02;
   2085e:	2202      	movs	r2, #2
   20860:	765a      	strb	r2, [r3, #25]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   20862:	2200      	movs	r2, #0
   20864:	769a      	strb	r2, [r3, #26]
   20866:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   20868:	771a      	strb	r2, [r3, #28]
   2086a:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   2086c:	779a      	strb	r2, [r3, #30]
   2086e:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   20870:	f883 2020 	strb.w	r2, [r3, #32]
   20874:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	dst->s6_addr[10]  = 0;
   20878:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   2087c:	2201      	movs	r2, #1
   2087e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	dst->s6_addr[12]  = 0xFF;
   20882:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   20886:	7b7a      	ldrb	r2, [r7, #13]
   20888:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   2088c:	89fa      	ldrh	r2, [r7, #14]
   2088e:	84da      	strh	r2, [r3, #38]	; 0x26
   20890:	e780      	b.n	20794 <net_ipv6_send_ns+0xdc>
		if (src) {
   20892:	f1b9 0f00 	cmp.w	r9, #0
   20896:	d025      	beq.n	208e4 <net_ipv6_send_ns+0x22c>
   20898:	68a3      	ldr	r3, [r4, #8]
   2089a:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   2089e:	ae14      	add	r6, sp, #80	; 0x50
   208a0:	f8d9 0000 	ldr.w	r0, [r9]
   208a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   208a8:	f8d9 2008 	ldr.w	r2, [r9, #8]
   208ac:	f8d9 300c 	ldr.w	r3, [r9, #12]
   208b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   208b2:	ae14      	add	r6, sp, #80	; 0x50
   208b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   208b6:	f8ce 0008 	str.w	r0, [lr, #8]
   208ba:	f8ce 100c 	str.w	r1, [lr, #12]
   208be:	f8ce 2010 	str.w	r2, [lr, #16]
   208c2:	f8ce 3014 	str.w	r3, [lr, #20]
   208c6:	68a3      	ldr	r3, [r4, #8]
   208c8:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   208ca:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   208cc:	b9fa      	cbnz	r2, 2090e <net_ipv6_send_ns+0x256>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   208ce:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   208d0:	2a00      	cmp	r2, #0
   208d2:	d140      	bne.n	20956 <net_ipv6_send_ns+0x29e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   208d4:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   208d6:	2a00      	cmp	r2, #0
   208d8:	d13f      	bne.n	2095a <net_ipv6_send_ns+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   208da:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   208dc:	2b00      	cmp	r3, #0
   208de:	d03e      	beq.n	2095e <net_ipv6_send_ns+0x2a6>
   208e0:	2300      	movs	r3, #0
   208e2:	e015      	b.n	20910 <net_ipv6_send_ns+0x258>
   208e4:	68a3      	ldr	r3, [r4, #8]
   208e6:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   208e8:	f107 0118 	add.w	r1, r7, #24
   208ec:	6960      	ldr	r0, [r4, #20]
   208ee:	f7fb fab9 	bl	1be64 <net_if_ipv6_select_src_addr>
   208f2:	4603      	mov	r3, r0
   208f4:	ae18      	add	r6, sp, #96	; 0x60
   208f6:	6800      	ldr	r0, [r0, #0]
   208f8:	6859      	ldr	r1, [r3, #4]
   208fa:	689a      	ldr	r2, [r3, #8]
   208fc:	68db      	ldr	r3, [r3, #12]
   208fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20900:	ae18      	add	r6, sp, #96	; 0x60
   20902:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20904:	60b8      	str	r0, [r7, #8]
   20906:	60f9      	str	r1, [r7, #12]
   20908:	613a      	str	r2, [r7, #16]
   2090a:	617b      	str	r3, [r7, #20]
   2090c:	e7db      	b.n	208c6 <net_ipv6_send_ns+0x20e>
   2090e:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   20910:	bbab      	cbnz	r3, 2097e <net_ipv6_send_ns+0x2c6>
		net_buf_add(frag, llao_len);
   20912:	4641      	mov	r1, r8
   20914:	4650      	mov	r0, sl
   20916:	f7fa fa1d 	bl	1ad54 <net_buf_simple_add>
	return pkt->iface;
   2091a:	f8d4 9014 	ldr.w	r9, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   2091e:	4620      	mov	r0, r4
   20920:	f7fd fa14 	bl	1dd4c <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   20924:	f100 0618 	add.w	r6, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   20928:	2301      	movs	r3, #1
   2092a:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   2092c:	ea4f 03d8 	mov.w	r3, r8, lsr #3
   20930:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   20932:	f899 2014 	ldrb.w	r2, [r9, #20]
   20936:	f8d9 1010 	ldr.w	r1, [r9, #16]
   2093a:	301a      	adds	r0, #26
   2093c:	f7df fcc0 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20940:	f899 2014 	ldrb.w	r2, [r9, #20]
   20944:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   20946:	eba8 0202 	sub.w	r2, r8, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   2094a:	3a02      	subs	r2, #2
   2094c:	2100      	movs	r1, #0
   2094e:	4430      	add	r0, r6
   20950:	f009 ffb2 	bl	2a8b8 <memset>
   20954:	e74a      	b.n	207ec <net_ipv6_send_ns+0x134>
   20956:	2300      	movs	r3, #0
   20958:	e7da      	b.n	20910 <net_ipv6_send_ns+0x258>
   2095a:	2300      	movs	r3, #0
   2095c:	e7d8      	b.n	20910 <net_ipv6_send_ns+0x258>
   2095e:	2301      	movs	r3, #1
   20960:	e7d6      	b.n	20910 <net_ipv6_send_ns+0x258>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr->tgt, false,
   20962:	2300      	movs	r3, #0
   20964:	461a      	mov	r2, r3
   20966:	4629      	mov	r1, r5
   20968:	6960      	ldr	r0, [r4, #20]
   2096a:	f7fe ffab 	bl	1f8c4 <nbr_new>
		if (!nbr) {
   2096e:	4606      	mov	r6, r0
   20970:	2800      	cmp	r0, #0
   20972:	f47f af49 	bne.w	20808 <net_ipv6_send_ns+0x150>
   20976:	e002      	b.n	2097e <net_ipv6_send_ns+0x2c6>
			net_pkt_unref(pending);
   20978:	9801      	ldr	r0, [sp, #4]
   2097a:	f7fc ff0e 	bl	1d79a <net_pkt_unref>
	net_pkt_unref(pkt);
   2097e:	4620      	mov	r0, r4
   20980:	f7fc ff0b 	bl	1d79a <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   20984:	4a0e      	ldr	r2, [pc, #56]	; (209c0 <net_ipv6_send_ns+0x308>)
   20986:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   2098a:	3301      	adds	r3, #1
   2098c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   20990:	f06f 0015 	mvn.w	r0, #21
   20994:	e756      	b.n	20844 <net_ipv6_send_ns+0x18c>
		if (pending) {
   20996:	9b01      	ldr	r3, [sp, #4]
   20998:	2b00      	cmp	r3, #0
   2099a:	d0f0      	beq.n	2097e <net_ipv6_send_ns+0x2c6>
   2099c:	68f5      	ldr	r5, [r6, #12]
	k_delayed_work_cancel(&data->send_ns);
   2099e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   209a2:	f009 fac5 	bl	29f30 <k_delayed_work_cancel>
	if (data->pending) {
   209a6:	6828      	ldr	r0, [r5, #0]
   209a8:	2800      	cmp	r0, #0
   209aa:	d0e8      	beq.n	2097e <net_ipv6_send_ns+0x2c6>
		net_pkt_unref(data->pending);
   209ac:	f7fc fef5 	bl	1d79a <net_pkt_unref>
		data->pending = NULL;
   209b0:	2300      	movs	r3, #0
   209b2:	602b      	str	r3, [r5, #0]
   209b4:	e7e3      	b.n	2097e <net_ipv6_send_ns+0x2c6>
   209b6:	bf00      	nop
   209b8:	2000c43c 	.word	0x2000c43c
   209bc:	20003158 	.word	0x20003158
   209c0:	20003038 	.word	0x20003038

000209c4 <net_ipv6_nbr_add>:
{
   209c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   209c8:	b083      	sub	sp, #12
   209ca:	4605      	mov	r5, r0
   209cc:	460e      	mov	r6, r1
   209ce:	4617      	mov	r7, r2
   209d0:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   209d2:	460a      	mov	r2, r1
   209d4:	4601      	mov	r1, r0
   209d6:	482c      	ldr	r0, [pc, #176]	; (20a88 <net_ipv6_nbr_add+0xc4>)
   209d8:	f7fe fef2 	bl	1f7c0 <nbr_lookup>
	if (!nbr) {
   209dc:	4604      	mov	r4, r0
   209de:	b180      	cbz	r0, 20a02 <net_ipv6_nbr_add+0x3e>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   209e0:	463a      	mov	r2, r7
   209e2:	4629      	mov	r1, r5
   209e4:	4620      	mov	r0, r4
   209e6:	f7fe fd05 	bl	1f3f4 <net_nbr_link>
   209ea:	f110 0f78 	cmn.w	r0, #120	; 0x78
   209ee:	d013      	beq.n	20a18 <net_ipv6_nbr_add+0x54>
   209f0:	68e3      	ldr	r3, [r4, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   209f2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   209f6:	2b00      	cmp	r3, #0
   209f8:	d03c      	beq.n	20a74 <net_ipv6_nbr_add+0xb0>
}
   209fa:	4620      	mov	r0, r4
   209fc:	b003      	add	sp, #12
   209fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nbr = nbr_new(iface, addr, is_router, state);
   20a02:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   20a06:	4642      	mov	r2, r8
   20a08:	4631      	mov	r1, r6
   20a0a:	4628      	mov	r0, r5
   20a0c:	f7fe ff5a 	bl	1f8c4 <nbr_new>
		if (!nbr) {
   20a10:	4604      	mov	r4, r0
   20a12:	2800      	cmp	r0, #0
   20a14:	d1e4      	bne.n	209e0 <net_ipv6_nbr_add+0x1c>
   20a16:	e7f0      	b.n	209fa <net_ipv6_nbr_add+0x36>
   20a18:	68e3      	ldr	r3, [r4, #12]
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   20a1a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   20a1e:	2b05      	cmp	r3, #5
   20a20:	d0e6      	beq.n	209f0 <net_ipv6_nbr_add+0x2c>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   20a22:	7860      	ldrb	r0, [r4, #1]
   20a24:	f7fe fd4c 	bl	1f4c0 <net_nbr_get_lladdr>
   20a28:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   20a2a:	f100 0902 	add.w	r9, r0, #2
   20a2e:	793a      	ldrb	r2, [r7, #4]
   20a30:	6839      	ldr	r1, [r7, #0]
   20a32:	4648      	mov	r0, r9
   20a34:	f009 feac 	bl	2a790 <memcmp>
   20a38:	b190      	cbz	r0, 20a60 <net_ipv6_nbr_add+0x9c>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   20a3a:	6839      	ldr	r1, [r7, #0]
   20a3c:	793a      	ldrb	r2, [r7, #4]
	if (!lladdr_store || !new_addr) {
   20a3e:	f1b8 0f00 	cmp.w	r8, #0
   20a42:	d002      	beq.n	20a4a <net_ipv6_nbr_add+0x86>
   20a44:	b109      	cbz	r1, 20a4a <net_ipv6_nbr_add+0x86>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   20a46:	2a06      	cmp	r2, #6
   20a48:	d904      	bls.n	20a54 <net_ipv6_nbr_add+0x90>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   20a4a:	2102      	movs	r1, #2
   20a4c:	4620      	mov	r0, r4
   20a4e:	f7fe fd3f 	bl	1f4d0 <ipv6_nbr_set_state>
   20a52:	e7cd      	b.n	209f0 <net_ipv6_nbr_add+0x2c>
	lladdr_store->len = new_len;
   20a54:	f888 2001 	strb.w	r2, [r8, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   20a58:	4648      	mov	r0, r9
   20a5a:	f7df fc31 	bl	2c0 <memcpy>
   20a5e:	e7f4      	b.n	20a4a <net_ipv6_nbr_add+0x86>
   20a60:	68e3      	ldr	r3, [r4, #12]
		} else if (net_ipv6_nbr_data(nbr)->state ==
   20a62:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   20a66:	2b00      	cmp	r3, #0
   20a68:	d1c2      	bne.n	209f0 <net_ipv6_nbr_add+0x2c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   20a6a:	2102      	movs	r1, #2
   20a6c:	4620      	mov	r0, r4
   20a6e:	f7fe fd2f 	bl	1f4d0 <ipv6_nbr_set_state>
   20a72:	e7bd      	b.n	209f0 <net_ipv6_nbr_add+0x2c>
		net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   20a74:	2100      	movs	r1, #0
   20a76:	9101      	str	r1, [sp, #4]
   20a78:	9600      	str	r6, [sp, #0]
   20a7a:	460b      	mov	r3, r1
   20a7c:	460a      	mov	r2, r1
   20a7e:	4628      	mov	r0, r5
   20a80:	f7ff fe1a 	bl	206b8 <net_ipv6_send_ns>
   20a84:	e7b9      	b.n	209fa <net_ipv6_nbr_add+0x36>
   20a86:	bf00      	nop
   20a88:	2000c43c 	.word	0x2000c43c

00020a8c <handle_ra_input>:
{
   20a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20a90:	b098      	sub	sp, #96	; 0x60
   20a92:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
   20a94:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   20a96:	2200      	movs	r2, #0
   20a98:	e002      	b.n	20aa0 <handle_ra_input+0x14>
		bytes += buf->len;
   20a9a:	8999      	ldrh	r1, [r3, #12]
   20a9c:	440a      	add	r2, r1
		buf = buf->frags;
   20a9e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20aa0:	2b00      	cmp	r3, #0
   20aa2:	d1fa      	bne.n	20a9a <handle_ra_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   20aa4:	b292      	uxth	r2, r2
	net_stats.ipv6_nd.recv++;
   20aa6:	49b7      	ldr	r1, [pc, #732]	; (20d84 <handle_ra_input+0x2f8>)
   20aa8:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   20aac:	3301      	adds	r3, #1
   20aae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   20ab2:	2a39      	cmp	r2, #57	; 0x39
   20ab4:	d904      	bls.n	20ac0 <handle_ra_input+0x34>
	return pkt->frags->data;
   20ab6:	68b3      	ldr	r3, [r6, #8]
   20ab8:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20aba:	79da      	ldrb	r2, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   20abc:	2aff      	cmp	r2, #255	; 0xff
   20abe:	d010      	beq.n	20ae2 <handle_ra_input+0x56>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &icmphdr);
   20ac0:	a907      	add	r1, sp, #28
   20ac2:	4630      	mov	r0, r6
   20ac4:	f7fd ff6d 	bl	1e9a2 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   20ac8:	b108      	cbz	r0, 20ace <handle_ra_input+0x42>
   20aca:	7843      	ldrb	r3, [r0, #1]
   20acc:	b173      	cbz	r3, 20aec <handle_ra_input+0x60>
	net_stats.ipv6_nd.drop++;
   20ace:	4aad      	ldr	r2, [pc, #692]	; (20d84 <handle_ra_input+0x2f8>)
   20ad0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20ad4:	3301      	adds	r3, #1
   20ad6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   20ada:	2002      	movs	r0, #2
}
   20adc:	b018      	add	sp, #96	; 0x60
   20ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   20ae2:	891a      	ldrh	r2, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20ae4:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20ae8:	429a      	cmp	r2, r3
   20aea:	d1e9      	bne.n	20ac0 <handle_ra_input+0x34>
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   20aec:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
   20af0:	312c      	adds	r1, #44	; 0x2c
   20af2:	ac18      	add	r4, sp, #96	; 0x60
   20af4:	f824 1d1c 	strh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, 1, value);
   20af8:	f10d 0347 	add.w	r3, sp, #71	; 0x47
   20afc:	9300      	str	r3, [sp, #0]
   20afe:	2301      	movs	r3, #1
   20b00:	4622      	mov	r2, r4
   20b02:	68b0      	ldr	r0, [r6, #8]
   20b04:	f7fc ffc7 	bl	1da96 <net_frag_read>
	frag = net_frag_skip(frag, offset, &offset, 1); /* flags */
   20b08:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	return net_frag_read(frag, offset, pos, len, NULL);
   20b0c:	2300      	movs	r3, #0
   20b0e:	9300      	str	r3, [sp, #0]
   20b10:	2301      	movs	r3, #1
   20b12:	4622      	mov	r2, r4
   20b14:	f7fc ffbf 	bl	1da96 <net_frag_read>
	if (!frag) {
   20b18:	4604      	mov	r4, r0
   20b1a:	2800      	cmp	r0, #0
   20b1c:	d0d7      	beq.n	20ace <handle_ra_input+0x42>
	if (hop_limit) {
   20b1e:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   20b22:	b113      	cbz	r3, 20b2a <handle_ra_input+0x9e>
	return pkt->iface;
   20b24:	6972      	ldr	r2, [r6, #20]
	iface->ipv6.hop_limit = hop_limit;
   20b26:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   20b2a:	f10d 0352 	add.w	r3, sp, #82	; 0x52
   20b2e:	aa11      	add	r2, sp, #68	; 0x44
   20b30:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20b34:	4620      	mov	r0, r4
   20b36:	f7fc fff6 	bl	1db26 <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   20b3a:	ab13      	add	r3, sp, #76	; 0x4c
   20b3c:	aa11      	add	r2, sp, #68	; 0x44
   20b3e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20b42:	f7fd f801 	bl	1db48 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   20b46:	ab12      	add	r3, sp, #72	; 0x48
   20b48:	aa11      	add	r2, sp, #68	; 0x44
   20b4a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20b4e:	f7fc fffb 	bl	1db48 <net_frag_read_be32>
	if (!frag) {
   20b52:	4605      	mov	r5, r0
   20b54:	2800      	cmp	r0, #0
   20b56:	d0ba      	beq.n	20ace <handle_ra_input+0x42>
	ra_hdr = net_icmpv6_get_ra_hdr(pkt, &hdr);
   20b58:	a915      	add	r1, sp, #84	; 0x54
   20b5a:	4630      	mov	r0, r6
   20b5c:	f7fe f99a 	bl	1ee94 <net_icmpv6_get_ra_hdr>
	if (reachable_time &&
   20b60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   20b62:	b16b      	cbz	r3, 20b80 <handle_ra_input+0xf4>
   20b64:	6972      	ldr	r2, [r6, #20]
	return iface->ipv6.reachable_time;
   20b66:	f8d2 428c 	ldr.w	r4, [r2, #652]	; 0x28c
	     ra_hdr->reachable_time)) {
   20b6a:	6841      	ldr	r1, [r0, #4]
	if (reachable_time &&
   20b6c:	428c      	cmp	r4, r1
   20b6e:	d007      	beq.n	20b80 <handle_ra_input+0xf4>
	iface->ipv6.base_reachable_time = reachable_time;
   20b70:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   20b74:	6974      	ldr	r4, [r6, #20]
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   20b76:	4620      	mov	r0, r4
   20b78:	f7fb fa70 	bl	1c05c <net_if_ipv6_calc_reachable_time>
   20b7c:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c
	if (retrans_timer) {
   20b80:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20b82:	b113      	cbz	r3, 20b8a <handle_ra_input+0xfe>
   20b84:	6972      	ldr	r2, [r6, #20]
 * @param retrans_timer New retransmit timer
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
	iface->ipv6.retrans_timer = retrans_timer;
   20b86:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	struct net_nbr *nbr = NULL;
   20b8a:	2700      	movs	r7, #0
   20b8c:	e060      	b.n	20c50 <handle_ra_input+0x1c4>
			frag = handle_ra_neighbor(pkt, frag, length, offset,
   20b8e:	f89d 4043 	ldrb.w	r4, [sp, #67]	; 0x43
   20b92:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   20b96:	2306      	movs	r3, #6
   20b98:	f88d 301d 	strb.w	r3, [sp, #29]
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   20b9c:	f88d 3010 	strb.w	r3, [sp, #16]
	lladdr.addr = llstorage.addr;
   20ba0:	f10d 031e 	add.w	r3, sp, #30
   20ba4:	9303      	str	r3, [sp, #12]
	if (net_pkt_ll_src(pkt)->len < lladdr.len) {
   20ba6:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   20baa:	2b05      	cmp	r3, #5
   20bac:	d801      	bhi.n	20bb2 <handle_ra_input+0x126>
		lladdr.len = net_pkt_ll_src(pkt)->len;
   20bae:	f88d 3010 	strb.w	r3, [sp, #16]
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   20bb2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   20bb6:	f10d 021e 	add.w	r2, sp, #30
   20bba:	9200      	str	r2, [sp, #0]
   20bbc:	aa11      	add	r2, sp, #68	; 0x44
   20bbe:	4641      	mov	r1, r8
   20bc0:	4628      	mov	r0, r5
   20bc2:	f7fc ff68 	bl	1da96 <net_frag_read>
	if (!frag && offset) {
   20bc6:	4605      	mov	r5, r0
   20bc8:	b318      	cbz	r0, 20c12 <handle_ra_input+0x186>
	padding = len * 8 - 2 - lladdr.len;
   20bca:	00e3      	lsls	r3, r4, #3
   20bcc:	b2db      	uxtb	r3, r3
   20bce:	f89d 2010 	ldrb.w	r2, [sp, #16]
   20bd2:	1a9b      	subs	r3, r3, r2
   20bd4:	b2db      	uxtb	r3, r3
   20bd6:	3b02      	subs	r3, #2
	if (padding) {
   20bd8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   20bdc:	d009      	beq.n	20bf2 <handle_ra_input+0x166>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   20bde:	aa18      	add	r2, sp, #96	; 0x60
   20be0:	f832 1d1c 	ldrh.w	r1, [r2, #-28]!
   20be4:	2000      	movs	r0, #0
   20be6:	9000      	str	r0, [sp, #0]
   20be8:	4628      	mov	r0, r5
   20bea:	f7fc ff54 	bl	1da96 <net_frag_read>
		if (!frag && *pos) {
   20bee:	4605      	mov	r5, r0
   20bf0:	b198      	cbz	r0, 20c1a <handle_ra_input+0x18e>
	return pkt->frags->data;
   20bf2:	68b3      	ldr	r3, [r6, #8]
   20bf4:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   20bf6:	2302      	movs	r3, #2
   20bf8:	9300      	str	r3, [sp, #0]
   20bfa:	2301      	movs	r3, #1
   20bfc:	aa03      	add	r2, sp, #12
   20bfe:	3108      	adds	r1, #8
   20c00:	6970      	ldr	r0, [r6, #20]
   20c02:	f7ff fedf 	bl	209c4 <net_ipv6_nbr_add>
   20c06:	4607      	mov	r7, r0
			if (!frag && offset) {
   20c08:	bb15      	cbnz	r5, 20c50 <handle_ra_input+0x1c4>
   20c0a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20c0e:	b1fb      	cbz	r3, 20c50 <handle_ra_input+0x1c4>
   20c10:	e75d      	b.n	20ace <handle_ra_input+0x42>
	if (!frag && offset) {
   20c12:	f1b8 0f00 	cmp.w	r8, #0
   20c16:	d0d8      	beq.n	20bca <handle_ra_input+0x13e>
   20c18:	e7f6      	b.n	20c08 <handle_ra_input+0x17c>
		if (!frag && *pos) {
   20c1a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20c1e:	2b00      	cmp	r3, #0
   20c20:	d0e7      	beq.n	20bf2 <handle_ra_input+0x166>
   20c22:	e7f1      	b.n	20c08 <handle_ra_input+0x17c>
			frag = net_frag_skip(frag, offset, &offset, 2);
   20c24:	ac18      	add	r4, sp, #96	; 0x60
   20c26:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, len, NULL);
   20c2a:	2300      	movs	r3, #0
   20c2c:	9300      	str	r3, [sp, #0]
   20c2e:	2302      	movs	r3, #2
   20c30:	4622      	mov	r2, r4
   20c32:	f7fc ff30 	bl	1da96 <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   20c36:	ab0f      	add	r3, sp, #60	; 0x3c
   20c38:	4622      	mov	r2, r4
   20c3a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20c3e:	f7fc ff83 	bl	1db48 <net_frag_read_be32>
			if (!frag && offset) {
   20c42:	4605      	mov	r5, r0
   20c44:	2800      	cmp	r0, #0
   20c46:	d03b      	beq.n	20cc0 <handle_ra_input+0x234>
	return pkt->iface;
   20c48:	6973      	ldr	r3, [r6, #20]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   20c4a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
	iface->mtu = mtu;
   20c4e:	851a      	strh	r2, [r3, #40]	; 0x28
	while (frag) {
   20c50:	2d00      	cmp	r5, #0
   20c52:	f000 8170 	beq.w	20f36 <handle_ra_input+0x4aa>
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   20c56:	ac18      	add	r4, sp, #96	; 0x60
   20c58:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
   20c5c:	f10d 0342 	add.w	r3, sp, #66	; 0x42
   20c60:	9300      	str	r3, [sp, #0]
   20c62:	2301      	movs	r3, #1
   20c64:	4622      	mov	r2, r4
   20c66:	4628      	mov	r0, r5
   20c68:	f7fc ff15 	bl	1da96 <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   20c6c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20c70:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   20c74:	9300      	str	r3, [sp, #0]
   20c76:	2301      	movs	r3, #1
   20c78:	4622      	mov	r2, r4
   20c7a:	f7fc ff0c 	bl	1da96 <net_frag_read>
		if (!frag) {
   20c7e:	4605      	mov	r5, r0
   20c80:	2800      	cmp	r0, #0
   20c82:	f43f af24 	beq.w	20ace <handle_ra_input+0x42>
		switch (type) {
   20c86:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   20c8a:	2b03      	cmp	r3, #3
   20c8c:	d01d      	beq.n	20cca <handle_ra_input+0x23e>
   20c8e:	2b05      	cmp	r3, #5
   20c90:	d0c8      	beq.n	20c24 <handle_ra_input+0x198>
   20c92:	2b01      	cmp	r3, #1
   20c94:	f43f af7b 	beq.w	20b8e <handle_ra_input+0x102>
			frag = net_frag_skip(frag, offset, &offset,
   20c98:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
					     length * 8 - 2);
   20c9c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   20ca0:	00db      	lsls	r3, r3, #3
			frag = net_frag_skip(frag, offset, &offset,
   20ca2:	3b02      	subs	r3, #2
   20ca4:	b29b      	uxth	r3, r3
	return net_frag_read(frag, offset, pos, len, NULL);
   20ca6:	2200      	movs	r2, #0
   20ca8:	9200      	str	r2, [sp, #0]
   20caa:	aa11      	add	r2, sp, #68	; 0x44
   20cac:	f7fc fef3 	bl	1da96 <net_frag_read>
			if (!frag && offset) {
   20cb0:	4605      	mov	r5, r0
   20cb2:	2800      	cmp	r0, #0
   20cb4:	d1cc      	bne.n	20c50 <handle_ra_input+0x1c4>
   20cb6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20cba:	2b00      	cmp	r3, #0
   20cbc:	d0c8      	beq.n	20c50 <handle_ra_input+0x1c4>
   20cbe:	e706      	b.n	20ace <handle_ra_input+0x42>
			if (!frag && offset) {
   20cc0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20cc4:	2b00      	cmp	r3, #0
   20cc6:	d0bf      	beq.n	20c48 <handle_ra_input+0x1bc>
   20cc8:	e701      	b.n	20ace <handle_ra_input+0x42>
			frag = handle_ra_prefix(pkt, frag, length, offset,
   20cca:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   20cce:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   20cd2:	2203      	movs	r2, #3
   20cd4:	f88d 201c 	strb.w	r2, [sp, #28]
	prefix_info.len = len * 8 - 2;
   20cd8:	4093      	lsls	r3, r2
   20cda:	b2db      	uxtb	r3, r3
   20cdc:	3b02      	subs	r3, #2
   20cde:	f88d 301d 	strb.w	r3, [sp, #29]
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   20ce2:	f10d 031e 	add.w	r3, sp, #30
   20ce6:	9300      	str	r3, [sp, #0]
   20ce8:	2301      	movs	r3, #1
   20cea:	aa11      	add	r2, sp, #68	; 0x44
   20cec:	f7fc fed3 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   20cf0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20cf4:	f10d 031f 	add.w	r3, sp, #31
   20cf8:	9300      	str	r3, [sp, #0]
   20cfa:	2301      	movs	r3, #1
   20cfc:	aa11      	add	r2, sp, #68	; 0x44
   20cfe:	f7fc feca 	bl	1da96 <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   20d02:	ab08      	add	r3, sp, #32
   20d04:	aa11      	add	r2, sp, #68	; 0x44
   20d06:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20d0a:	f7fc ff1d 	bl	1db48 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   20d0e:	ab09      	add	r3, sp, #36	; 0x24
   20d10:	aa11      	add	r2, sp, #68	; 0x44
   20d12:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20d16:	f7fc ff17 	bl	1db48 <net_frag_read_be32>
	frag = net_frag_skip(frag, *pos, pos, 4);
   20d1a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20d1e:	2300      	movs	r3, #0
   20d20:	9300      	str	r3, [sp, #0]
   20d22:	2304      	movs	r3, #4
   20d24:	aa11      	add	r2, sp, #68	; 0x44
   20d26:	f7fc feb6 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   20d2a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20d2e:	ab0b      	add	r3, sp, #44	; 0x2c
   20d30:	9300      	str	r3, [sp, #0]
   20d32:	2310      	movs	r3, #16
   20d34:	aa11      	add	r2, sp, #68	; 0x44
   20d36:	f7fc feae 	bl	1da96 <net_frag_read>
	if (!frag && *pos) {
   20d3a:	4605      	mov	r5, r0
   20d3c:	b320      	cbz	r0, 20d88 <handle_ra_input+0x2fc>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   20d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20d40:	9a08      	ldr	r2, [sp, #32]
   20d42:	429a      	cmp	r2, r3
   20d44:	d314      	bcc.n	20d70 <handle_ra_input+0x2e4>
   20d46:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   20d4a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20d4e:	429a      	cmp	r2, r3
   20d50:	d00e      	beq.n	20d70 <handle_ra_input+0x2e4>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   20d52:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   20d56:	2b00      	cmp	r3, #0
   20d58:	db1b      	blt.n	20d92 <handle_ra_input+0x306>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   20d5a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   20d5e:	f013 0f40 	tst.w	r3, #64	; 0x40
   20d62:	d005      	beq.n	20d70 <handle_ra_input+0x2e4>
		    prefix_info.valid_lifetime &&
   20d64:	9b08      	ldr	r3, [sp, #32]
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   20d66:	b11b      	cbz	r3, 20d70 <handle_ra_input+0x2e4>
		    (prefix_info.prefix_len == NET_IPV6_DEFAULT_PREFIX_LEN)) {
   20d68:	f89d 301e 	ldrb.w	r3, [sp, #30]
		    prefix_info.valid_lifetime &&
   20d6c:	2b40      	cmp	r3, #64	; 0x40
   20d6e:	d03e      	beq.n	20dee <handle_ra_input+0x362>
			if (!frag && offset) {
   20d70:	2d00      	cmp	r5, #0
   20d72:	f47f af6d 	bne.w	20c50 <handle_ra_input+0x1c4>
   20d76:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20d7a:	2b00      	cmp	r3, #0
   20d7c:	f43f af68 	beq.w	20c50 <handle_ra_input+0x1c4>
   20d80:	e6a5      	b.n	20ace <handle_ra_input+0x42>
   20d82:	bf00      	nop
   20d84:	20003038 	.word	0x20003038
	if (!frag && *pos) {
   20d88:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20d8c:	2b00      	cmp	r3, #0
   20d8e:	d0d6      	beq.n	20d3e <handle_ra_input+0x2b2>
   20d90:	e7ee      	b.n	20d70 <handle_ra_input+0x2e4>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   20d92:	f89d 201e 	ldrb.w	r2, [sp, #30]
   20d96:	a90b      	add	r1, sp, #44	; 0x2c
   20d98:	6970      	ldr	r0, [r6, #20]
   20d9a:	f7fa fe3f 	bl	1ba1c <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   20d9e:	4603      	mov	r3, r0
   20da0:	b160      	cbz	r0, 20dbc <handle_ra_input+0x330>
	switch (prefix_info->valid_lifetime) {
   20da2:	9a08      	ldr	r2, [sp, #32]
   20da4:	b1ba      	cbz	r2, 20dd6 <handle_ra_input+0x34a>
   20da6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   20daa:	d01c      	beq.n	20de6 <handle_ra_input+0x35a>
	prefix->is_infinite = is_infinite;
   20dac:	2200      	movs	r2, #0
   20dae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		net_if_ipv6_prefix_set_timer(prefix,
   20db2:	9908      	ldr	r1, [sp, #32]
   20db4:	4618      	mov	r0, r3
   20db6:	f7fa fee3 	bl	1bb80 <net_if_ipv6_prefix_set_timer>
   20dba:	e7ce      	b.n	20d5a <handle_ra_input+0x2ce>
		if (!prefix_info->valid_lifetime) {
   20dbc:	9b08      	ldr	r3, [sp, #32]
   20dbe:	2b00      	cmp	r3, #0
   20dc0:	d0cb      	beq.n	20d5a <handle_ra_input+0x2ce>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   20dc2:	f89d 201e 	ldrb.w	r2, [sp, #30]
   20dc6:	a90b      	add	r1, sp, #44	; 0x2c
   20dc8:	6970      	ldr	r0, [r6, #20]
   20dca:	f7fa fdf7 	bl	1b9bc <net_if_ipv6_prefix_add>
		if (prefix) {
   20dce:	4603      	mov	r3, r0
   20dd0:	2800      	cmp	r0, #0
   20dd2:	d1e6      	bne.n	20da2 <handle_ra_input+0x316>
   20dd4:	e7c1      	b.n	20d5a <handle_ra_input+0x2ce>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   20dd6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   20dda:	f103 0128 	add.w	r1, r3, #40	; 0x28
   20dde:	6970      	ldr	r0, [r6, #20]
   20de0:	f7fa feea 	bl	1bbb8 <net_if_ipv6_prefix_rm>
   20de4:	e7b9      	b.n	20d5a <handle_ra_input+0x2ce>
   20de6:	2201      	movs	r2, #1
   20de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   20dec:	e7b5      	b.n	20d5a <handle_ra_input+0x2ce>
	struct in6_addr addr = { };
   20dee:	2300      	movs	r3, #0
   20df0:	9305      	str	r3, [sp, #20]
   20df2:	9306      	str	r3, [sp, #24]
	return pkt->iface;
   20df4:	6974      	ldr	r4, [r6, #20]
	return &iface->link_addr;
   20df6:	f104 0810 	add.w	r8, r4, #16
	addr->s6_addr[0] = 0xfe;
   20dfa:	22fe      	movs	r2, #254	; 0xfe
   20dfc:	f88d 200c 	strb.w	r2, [sp, #12]
	addr->s6_addr[1] = 0x80;
   20e00:	2280      	movs	r2, #128	; 0x80
   20e02:	f88d 200d 	strb.w	r2, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   20e06:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   20e0a:	9304      	str	r3, [sp, #16]
	switch (lladdr->len) {
   20e0c:	f898 2004 	ldrb.w	r2, [r8, #4]
   20e10:	2a06      	cmp	r2, #6
   20e12:	d032      	beq.n	20e7a <handle_ra_input+0x3ee>
   20e14:	2a08      	cmp	r2, #8
   20e16:	d058      	beq.n	20eca <handle_ra_input+0x43e>
   20e18:	2a02      	cmp	r2, #2
   20e1a:	d018      	beq.n	20e4e <handle_ra_input+0x3c2>
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   20e1c:	2208      	movs	r2, #8
   20e1e:	a90b      	add	r1, sp, #44	; 0x2c
   20e20:	a803      	add	r0, sp, #12
   20e22:	f7df fa4d 	bl	2c0 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   20e26:	2100      	movs	r1, #0
   20e28:	a803      	add	r0, sp, #12
   20e2a:	f7fa fb03 	bl	1b434 <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   20e2e:	4604      	mov	r4, r0
   20e30:	b118      	cbz	r0, 20e3a <handle_ra_input+0x3ae>
   20e32:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   20e36:	2b01      	cmp	r3, #1
   20e38:	d052      	beq.n	20ee0 <handle_ra_input+0x454>
		if (prefix_info->valid_lifetime ==
   20e3a:	9b08      	ldr	r3, [sp, #32]
   20e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20e40:	d072      	beq.n	20f28 <handle_ra_input+0x49c>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   20e42:	2201      	movs	r2, #1
   20e44:	a903      	add	r1, sp, #12
   20e46:	6970      	ldr	r0, [r6, #20]
   20e48:	f7fa fb6a 	bl	1b520 <net_if_ipv6_addr_add>
   20e4c:	e790      	b.n	20d70 <handle_ra_input+0x2e4>
		if (lladdr->type == NET_LINK_IEEE802154) {
   20e4e:	f898 3005 	ldrb.w	r3, [r8, #5]
   20e52:	2b01      	cmp	r3, #1
   20e54:	d1e2      	bne.n	20e1c <handle_ra_input+0x390>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   20e56:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   20e58:	22ff      	movs	r2, #255	; 0xff
   20e5a:	f88d 2017 	strb.w	r2, [sp, #23]
			addr->s6_addr[12] = 0xfe;
   20e5e:	22fe      	movs	r2, #254	; 0xfe
   20e60:	f88d 2018 	strb.w	r2, [sp, #24]
			addr->s6_addr[13] = 0;
   20e64:	f88d 3019 	strb.w	r3, [sp, #25]
			addr->s6_addr[14] = lladdr->addr[0];
   20e68:	6923      	ldr	r3, [r4, #16]
   20e6a:	781b      	ldrb	r3, [r3, #0]
   20e6c:	f88d 301a 	strb.w	r3, [sp, #26]
			addr->s6_addr[15] = lladdr->addr[1];
   20e70:	6923      	ldr	r3, [r4, #16]
   20e72:	785b      	ldrb	r3, [r3, #1]
   20e74:	f88d 301b 	strb.w	r3, [sp, #27]
   20e78:	e7d0      	b.n	20e1c <handle_ra_input+0x390>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   20e7a:	2203      	movs	r2, #3
   20e7c:	6921      	ldr	r1, [r4, #16]
   20e7e:	a805      	add	r0, sp, #20
   20e80:	f7df fa1e 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   20e84:	23ff      	movs	r3, #255	; 0xff
   20e86:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   20e8a:	23fe      	movs	r3, #254	; 0xfe
   20e8c:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20e90:	6921      	ldr	r1, [r4, #16]
   20e92:	2203      	movs	r2, #3
   20e94:	4411      	add	r1, r2
   20e96:	f10d 0019 	add.w	r0, sp, #25
   20e9a:	f7df fa11 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   20e9e:	f898 3005 	ldrb.w	r3, [r8, #5]
   20ea2:	2b02      	cmp	r3, #2
   20ea4:	d00a      	beq.n	20ebc <handle_ra_input+0x430>
		if (lladdr->type == NET_LINK_ETHERNET) {
   20ea6:	f898 3005 	ldrb.w	r3, [r8, #5]
   20eaa:	2b03      	cmp	r3, #3
   20eac:	d1b6      	bne.n	20e1c <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   20eae:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20eb2:	f083 0302 	eor.w	r3, r3, #2
   20eb6:	f88d 3014 	strb.w	r3, [sp, #20]
   20eba:	e7af      	b.n	20e1c <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   20ebc:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20ec0:	f083 0302 	eor.w	r3, r3, #2
   20ec4:	f88d 3014 	strb.w	r3, [sp, #20]
   20ec8:	e7ed      	b.n	20ea6 <handle_ra_input+0x41a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   20eca:	6921      	ldr	r1, [r4, #16]
   20ecc:	a805      	add	r0, sp, #20
   20ece:	f7df f9f7 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   20ed2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20ed6:	f083 0302 	eor.w	r3, r3, #2
   20eda:	f88d 3014 	strb.w	r3, [sp, #20]
   20ede:	e79d      	b.n	20e1c <handle_ra_input+0x390>
		if (prefix_info->valid_lifetime ==
   20ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20ee4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   20ee8:	d015      	beq.n	20f16 <handle_ra_input+0x48a>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   20eea:	f5b8 5fe1 	cmp.w	r8, #7200	; 0x1c20
   20eee:	d80a      	bhi.n	20f06 <handle_ra_input+0x47a>
	return _timeout_remaining_get(&work->timeout);
   20ef0:	3020      	adds	r0, #32
   20ef2:	f008 ff79 	bl	29de8 <_timeout_remaining_get>
	return k_delayed_work_remaining_get(work) / MSEC_PER_SEC;
   20ef6:	4a30      	ldr	r2, [pc, #192]	; (20fb8 <handle_ra_input+0x52c>)
   20ef8:	fb82 3200 	smull	r3, r2, r2, r0
   20efc:	17c3      	asrs	r3, r0, #31
   20efe:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   20f02:	4598      	cmp	r8, r3
   20f04:	d90a      	bls.n	20f1c <handle_ra_input+0x490>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   20f06:	9908      	ldr	r1, [sp, #32]
   20f08:	4620      	mov	r0, r4
   20f0a:	f7fa fafb 	bl	1b504 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   20f0e:	2300      	movs	r3, #0
   20f10:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   20f14:	e72c      	b.n	20d70 <handle_ra_input+0x2e4>
   20f16:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
   20f1a:	e729      	b.n	20d70 <handle_ra_input+0x2e4>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   20f1c:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   20f20:	4620      	mov	r0, r4
   20f22:	f7fa faef 	bl	1b504 <net_if_ipv6_addr_update_lifetime>
   20f26:	e7f2      	b.n	20f0e <handle_ra_input+0x482>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   20f28:	2300      	movs	r3, #0
   20f2a:	2201      	movs	r2, #1
   20f2c:	a903      	add	r1, sp, #12
   20f2e:	6970      	ldr	r0, [r6, #20]
   20f30:	f7fa faf6 	bl	1b520 <net_if_ipv6_addr_add>
   20f34:	e71c      	b.n	20d70 <handle_ra_input+0x2e4>
	return pkt->frags->data;
   20f36:	68b3      	ldr	r3, [r6, #8]
   20f38:	6899      	ldr	r1, [r3, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   20f3a:	3108      	adds	r1, #8
   20f3c:	6970      	ldr	r0, [r6, #20]
   20f3e:	f7fa fe7b 	bl	1bc38 <net_if_ipv6_router_lookup>
	if (router) {
   20f42:	4603      	mov	r3, r0
   20f44:	b350      	cbz	r0, 20f9c <handle_ra_input+0x510>
		if (!router_lifetime) {
   20f46:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
   20f4a:	b321      	cbz	r1, 20f96 <handle_ra_input+0x50a>
			if (nbr) {
   20f4c:	b11f      	cbz	r7, 20f56 <handle_ra_input+0x4ca>
   20f4e:	68fa      	ldr	r2, [r7, #12]
				net_ipv6_nbr_data(nbr)->is_router = true;
   20f50:	2001      	movs	r0, #1
   20f52:	f882 0069 	strb.w	r0, [r2, #105]	; 0x69
			net_if_ipv6_router_update_lifetime(router,
   20f56:	4618      	mov	r0, r3
   20f58:	f7fa fec6 	bl	1bce8 <net_if_ipv6_router_update_lifetime>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   20f5c:	b18f      	cbz	r7, 20f82 <handle_ra_input+0x4f6>
   20f5e:	68fb      	ldr	r3, [r7, #12]
   20f60:	6818      	ldr	r0, [r3, #0]
   20f62:	b170      	cbz	r0, 20f82 <handle_ra_input+0x4f6>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   20f64:	f7fa f818 	bl	1af98 <net_send_data>
   20f68:	2800      	cmp	r0, #0
   20f6a:	db20      	blt.n	20fae <handle_ra_input+0x522>
   20f6c:	68fc      	ldr	r4, [r7, #12]
	k_delayed_work_cancel(&data->send_ns);
   20f6e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   20f72:	f008 ffdd 	bl	29f30 <k_delayed_work_cancel>
	if (data->pending) {
   20f76:	6820      	ldr	r0, [r4, #0]
   20f78:	b118      	cbz	r0, 20f82 <handle_ra_input+0x4f6>
		net_pkt_unref(data->pending);
   20f7a:	f7fc fc0e 	bl	1d79a <net_pkt_unref>
		data->pending = NULL;
   20f7e:	2300      	movs	r3, #0
   20f80:	6023      	str	r3, [r4, #0]
	return pkt->iface;
   20f82:	6970      	ldr	r0, [r6, #20]
	k_delayed_work_cancel(&net_pkt_iface(pkt)->ipv6.rs_timer);
   20f84:	f500 7018 	add.w	r0, r0, #608	; 0x260
   20f88:	f008 ffd2 	bl	29f30 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   20f8c:	4630      	mov	r0, r6
   20f8e:	f7fc fc04 	bl	1d79a <net_pkt_unref>
	return NET_OK;
   20f92:	2000      	movs	r0, #0
   20f94:	e5a2      	b.n	20adc <handle_ra_input+0x50>
			net_if_ipv6_router_rm(router);
   20f96:	f7fa ff0b 	bl	1bdb0 <net_if_ipv6_router_rm>
   20f9a:	e7df      	b.n	20f5c <handle_ra_input+0x4d0>
	return pkt->frags->data;
   20f9c:	68b3      	ldr	r3, [r6, #8]
   20f9e:	6899      	ldr	r1, [r3, #8]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   20fa0:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
   20fa4:	3108      	adds	r1, #8
   20fa6:	6970      	ldr	r0, [r6, #20]
   20fa8:	f7fa feaa 	bl	1bd00 <net_if_ipv6_router_add>
   20fac:	e7d6      	b.n	20f5c <handle_ra_input+0x4d0>
   20fae:	68fb      	ldr	r3, [r7, #12]
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   20fb0:	6818      	ldr	r0, [r3, #0]
   20fb2:	f7fc fbf2 	bl	1d79a <net_pkt_unref>
   20fb6:	e7d9      	b.n	20f6c <handle_ra_input+0x4e0>
   20fb8:	10624dd3 	.word	0x10624dd3

00020fbc <handle_ns_input>:
{
   20fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fc0:	b0a5      	sub	sp, #148	; 0x94
   20fc2:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   20fc4:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   20fc6:	2200      	movs	r2, #0
   20fc8:	e002      	b.n	20fd0 <handle_ns_input+0x14>
		bytes += buf->len;
   20fca:	8999      	ldrh	r1, [r3, #12]
   20fcc:	440a      	add	r2, r1
		buf = buf->frags;
   20fce:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20fd0:	2b00      	cmp	r3, #0
   20fd2:	d1fa      	bne.n	20fca <handle_ns_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   20fd4:	b295      	uxth	r5, r2
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &nshdr);
   20fd6:	a90a      	add	r1, sp, #40	; 0x28
   20fd8:	4620      	mov	r0, r4
   20fda:	f7fd fe51 	bl	1ec80 <net_icmpv6_get_ns_hdr>
   20fde:	4606      	mov	r6, r0
	net_stats.ipv6_nd.recv++;
   20fe0:	4aa6      	ldr	r2, [pc, #664]	; (2127c <handle_ns_input+0x2c0>)
   20fe2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   20fe6:	3301      	adds	r3, #1
   20fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   20fec:	2d3f      	cmp	r5, #63	; 0x3f
   20fee:	d904      	bls.n	20ffa <handle_ns_input+0x3e>
	return pkt->frags->data;
   20ff0:	68a3      	ldr	r3, [r4, #8]
   20ff2:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   20ff4:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   20ff6:	2bff      	cmp	r3, #255	; 0xff
   20ff8:	d002      	beq.n	21000 <handle_ns_input+0x44>
	return addr->s6_addr[0] == 0xFF;
   20ffa:	7933      	ldrb	r3, [r6, #4]
		if (net_is_ipv6_addr_mcast(&ns_hdr->tgt)) {
   20ffc:	2bff      	cmp	r3, #255	; 0xff
   20ffe:	d00a      	beq.n	21016 <handle_ns_input+0x5a>
	pkt->ipv6_ext_opt_len = len;
   21000:	2314      	movs	r3, #20
   21002:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   21006:	a90f      	add	r1, sp, #60	; 0x3c
   21008:	4620      	mov	r0, r4
   2100a:	f7fd fe95 	bl	1ed38 <net_icmpv6_get_nd_opt_hdr>
   2100e:	4607      	mov	r7, r0
	return net_buf_frags_len(pkt->frags);
   21010:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   21012:	2500      	movs	r5, #0
   21014:	e00e      	b.n	21034 <handle_ns_input+0x78>
			icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   21016:	a908      	add	r1, sp, #32
   21018:	4620      	mov	r0, r4
   2101a:	f7fd fcc2 	bl	1e9a2 <net_icmpv6_get_hdr>
			if (!icmp_hdr || icmp_hdr->code != 0) {
   2101e:	2800      	cmp	r0, #0
   21020:	f000 80b7 	beq.w	21192 <handle_ns_input+0x1d6>
   21024:	7843      	ldrb	r3, [r0, #1]
   21026:	2b00      	cmp	r3, #0
   21028:	f040 80b3 	bne.w	21192 <handle_ns_input+0x1d6>
   2102c:	e7e8      	b.n	21000 <handle_ns_input+0x44>
		bytes += buf->len;
   2102e:	899a      	ldrh	r2, [r3, #12]
   21030:	4415      	add	r5, r2
		buf = buf->frags;
   21032:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   21034:	2b00      	cmp	r3, #0
   21036:	d1fa      	bne.n	2102e <handle_ns_input+0x72>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   21038:	3d2c      	subs	r5, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   2103a:	e042      	b.n	210c2 <handle_ns_input+0x106>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2103c:	2100      	movs	r1, #0
			if (net_is_ipv6_addr_unspecified(
   2103e:	2900      	cmp	r1, #0
   21040:	f040 80a7 	bne.w	21192 <handle_ns_input+0x1d6>
					   net_pkt_ip_hdr_len(pkt) +
   21044:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
					   net_pkt_ipv6_ext_len(pkt) +
   21048:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
					   net_pkt_ip_hdr_len(pkt) +
   2104c:	4401      	add	r1, r0
					   sizeof(struct net_icmp_hdr) +
   2104e:	4411      	add	r1, r2
   21050:	b289      	uxth	r1, r1
			handle_ns_neighbor(pkt, nd_opt_hdr->len,
   21052:	3106      	adds	r1, #6
	lladdr.len = 8 * ll_len - 2;
   21054:	00db      	lsls	r3, r3, #3
   21056:	b2db      	uxtb	r3, r3
   21058:	3b02      	subs	r3, #2
   2105a:	b2db      	uxtb	r3, r3
   2105c:	f88d 3019 	strb.w	r3, [sp, #25]
	frag = net_frag_read(pkt->frags, sllao_offset,
   21060:	f10d 021a 	add.w	r2, sp, #26
   21064:	9200      	str	r2, [sp, #0]
   21066:	f10d 0216 	add.w	r2, sp, #22
   2106a:	b289      	uxth	r1, r1
   2106c:	68a0      	ldr	r0, [r4, #8]
   2106e:	f7fc fd12 	bl	1da96 <net_frag_read>
	if (!frag && pos == 0xffff) {
   21072:	2800      	cmp	r0, #0
   21074:	d042      	beq.n	210fc <handle_ns_input+0x140>
	nbr_lladdr.len = lladdr.len;
   21076:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2107a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	nbr_lladdr.addr = lladdr.addr;
   2107e:	f10d 021a 	add.w	r2, sp, #26
   21082:	9208      	str	r2, [sp, #32]
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   21084:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   21088:	4293      	cmp	r3, r2
   2108a:	d901      	bls.n	21090 <handle_ns_input+0xd4>
		nbr_lladdr.len = net_pkt_ll_src(pkt)->len;
   2108c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return pkt->frags->data;
   21090:	68a3      	ldr	r3, [r4, #8]
   21092:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   21094:	2300      	movs	r3, #0
   21096:	9300      	str	r3, [sp, #0]
   21098:	aa08      	add	r2, sp, #32
   2109a:	3108      	adds	r1, #8
   2109c:	6960      	ldr	r0, [r4, #20]
   2109e:	f7ff fc91 	bl	209c4 <net_ipv6_nbr_add>
	return pkt->ipv6_ext_opt_len;
   210a2:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
					     (nd_opt_hdr->len << 3));
   210a6:	787b      	ldrb	r3, [r7, #1]
   210a8:	00db      	lsls	r3, r3, #3
   210aa:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   210ac:	4413      	add	r3, r2
   210ae:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   210b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   210b4:	429a      	cmp	r2, r3
   210b6:	d26c      	bcs.n	21192 <handle_ns_input+0x1d6>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   210b8:	a90f      	add	r1, sp, #60	; 0x3c
   210ba:	4620      	mov	r0, r4
   210bc:	f7fd fe3c 	bl	1ed38 <net_icmpv6_get_nd_opt_hdr>
   210c0:	4607      	mov	r7, r0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   210c2:	b317      	cbz	r7, 2110a <handle_ns_input+0x14e>
	return pkt->ipv6_ext_opt_len;
   210c4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   210c8:	4295      	cmp	r5, r2
   210ca:	d91e      	bls.n	2110a <handle_ns_input+0x14e>
		if (!nd_opt_hdr->len) {
   210cc:	787b      	ldrb	r3, [r7, #1]
   210ce:	b1e3      	cbz	r3, 2110a <handle_ns_input+0x14e>
		switch (nd_opt_hdr->type) {
   210d0:	7839      	ldrb	r1, [r7, #0]
   210d2:	2901      	cmp	r1, #1
   210d4:	d1e5      	bne.n	210a2 <handle_ns_input+0xe6>
	return pkt->frags->data;
   210d6:	68a1      	ldr	r1, [r4, #8]
   210d8:	6889      	ldr	r1, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   210da:	6888      	ldr	r0, [r1, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   210dc:	2800      	cmp	r0, #0
   210de:	d1ad      	bne.n	2103c <handle_ns_input+0x80>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   210e0:	68c8      	ldr	r0, [r1, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   210e2:	b928      	cbnz	r0, 210f0 <handle_ns_input+0x134>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   210e4:	6908      	ldr	r0, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   210e6:	b928      	cbnz	r0, 210f4 <handle_ns_input+0x138>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   210e8:	6949      	ldr	r1, [r1, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   210ea:	b129      	cbz	r1, 210f8 <handle_ns_input+0x13c>
   210ec:	2100      	movs	r1, #0
   210ee:	e7a6      	b.n	2103e <handle_ns_input+0x82>
   210f0:	2100      	movs	r1, #0
   210f2:	e7a4      	b.n	2103e <handle_ns_input+0x82>
   210f4:	2100      	movs	r1, #0
   210f6:	e7a2      	b.n	2103e <handle_ns_input+0x82>
   210f8:	2101      	movs	r1, #1
   210fa:	e7a0      	b.n	2103e <handle_ns_input+0x82>
	if (!frag && pos == 0xffff) {
   210fc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   21100:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21104:	429a      	cmp	r2, r3
   21106:	d1b6      	bne.n	21076 <handle_ns_input+0xba>
   21108:	e7cb      	b.n	210a2 <handle_ns_input+0xe6>
	return pkt->iface;
   2110a:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   2110e:	f106 0904 	add.w	r9, r6, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   21112:	2500      	movs	r5, #0
   21114:	e001      	b.n	2111a <handle_ns_input+0x15e>
		if (net_is_ipv6_prefix(addr->s6_addr,
   21116:	b9ef      	cbnz	r7, 21154 <handle_ns_input+0x198>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   21118:	3501      	adds	r5, #1
   2111a:	2d02      	cmp	r5, #2
   2111c:	dc21      	bgt.n	21162 <handle_ns_input+0x1a6>
		if (!iface->ipv6.unicast[i].is_used ||
   2111e:	236c      	movs	r3, #108	; 0x6c
   21120:	fb03 8305 	mla	r3, r3, r5, r8
   21124:	f893 7094 	ldrb.w	r7, [r3, #148]	; 0x94
   21128:	2f00      	cmp	r7, #0
   2112a:	d0f5      	beq.n	21118 <handle_ns_input+0x15c>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   2112c:	236c      	movs	r3, #108	; 0x6c
   2112e:	fb03 8305 	mla	r3, r3, r5, r8
   21132:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   21134:	2b0a      	cmp	r3, #10
   21136:	d1ef      	bne.n	21118 <handle_ns_input+0x15c>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   21138:	216c      	movs	r1, #108	; 0x6c
   2113a:	fb01 f105 	mul.w	r1, r1, r5
   2113e:	3120      	adds	r1, #32
   21140:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   21142:	2210      	movs	r2, #16
   21144:	4411      	add	r1, r2
   21146:	4648      	mov	r0, r9
   21148:	f009 fb22 	bl	2a790 <memcmp>
   2114c:	2800      	cmp	r0, #0
   2114e:	d0e2      	beq.n	21116 <handle_ns_input+0x15a>
		return false;
   21150:	2700      	movs	r7, #0
   21152:	e7e0      	b.n	21116 <handle_ns_input+0x15a>
			return &iface->ipv6.unicast[i];
   21154:	236c      	movs	r3, #108	; 0x6c
   21156:	fb03 f505 	mul.w	r5, r3, r5
   2115a:	3520      	adds	r5, #32
   2115c:	4445      	add	r5, r8
   2115e:	350c      	adds	r5, #12
   21160:	e000      	b.n	21164 <handle_ns_input+0x1a8>
	return NULL;
   21162:	2500      	movs	r5, #0
	if (!ifaddr) {
   21164:	b1ad      	cbz	r5, 21192 <handle_ns_input+0x1d6>
	return pkt->frags->data;
   21166:	68a3      	ldr	r3, [r4, #8]
   21168:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2116a:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2116c:	b93b      	cbnz	r3, 2117e <handle_ns_input+0x1c2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2116e:	68c3      	ldr	r3, [r0, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21170:	b9cb      	cbnz	r3, 211a6 <handle_ns_input+0x1ea>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21172:	6903      	ldr	r3, [r0, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21174:	b9cb      	cbnz	r3, 211aa <handle_ns_input+0x1ee>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   21176:	6943      	ldr	r3, [r0, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21178:	b1cb      	cbz	r3, 211ae <handle_ns_input+0x1f2>
   2117a:	2300      	movs	r3, #0
   2117c:	e000      	b.n	21180 <handle_ns_input+0x1c4>
   2117e:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   21180:	2b00      	cmp	r3, #0
   21182:	d07d      	beq.n	21280 <handle_ns_input+0x2c4>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   21184:	6982      	ldr	r2, [r0, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21186:	f240 23ff 	movw	r3, #767	; 0x2ff
   2118a:	429a      	cmp	r2, r3
   2118c:	d011      	beq.n	211b2 <handle_ns_input+0x1f6>
   2118e:	2300      	movs	r3, #0
		if (!net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   21190:	bb0b      	cbnz	r3, 211d6 <handle_ns_input+0x21a>
	net_stats.ipv6_nd.drop++;
   21192:	4a3a      	ldr	r2, [pc, #232]	; (2127c <handle_ns_input+0x2c0>)
   21194:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   21198:	3301      	adds	r3, #1
   2119a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   2119e:	2002      	movs	r0, #2
}
   211a0:	b025      	add	sp, #148	; 0x94
   211a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   211a6:	2300      	movs	r3, #0
   211a8:	e7ea      	b.n	21180 <handle_ns_input+0x1c4>
   211aa:	2300      	movs	r3, #0
   211ac:	e7e8      	b.n	21180 <handle_ns_input+0x1c4>
   211ae:	2301      	movs	r3, #1
   211b0:	e7e6      	b.n	21180 <handle_ns_input+0x1c4>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   211b2:	69c3      	ldr	r3, [r0, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   211b4:	b95b      	cbnz	r3, 211ce <handle_ns_input+0x212>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   211b6:	6a03      	ldr	r3, [r0, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   211b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   211bc:	d001      	beq.n	211c2 <handle_ns_input+0x206>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   211be:	2300      	movs	r3, #0
   211c0:	e7e6      	b.n	21190 <handle_ns_input+0x1d4>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   211c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   211c4:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   211c6:	2bff      	cmp	r3, #255	; 0xff
   211c8:	d003      	beq.n	211d2 <handle_ns_input+0x216>
   211ca:	2300      	movs	r3, #0
   211cc:	e7e0      	b.n	21190 <handle_ns_input+0x1d4>
   211ce:	2300      	movs	r3, #0
   211d0:	e7de      	b.n	21190 <handle_ns_input+0x1d4>
   211d2:	2301      	movs	r3, #1
   211d4:	e7dc      	b.n	21190 <handle_ns_input+0x1d4>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   211d6:	f995 3065 	ldrsb.w	r3, [r5, #101]	; 0x65
   211da:	b94b      	cbnz	r3, 211f0 <handle_ns_input+0x234>
	return pkt->iface;
   211dc:	6960      	ldr	r0, [r4, #20]
			dad_failed(net_pkt_iface(pkt),
   211de:	1d29      	adds	r1, r5, #4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   211e0:	88aa      	ldrh	r2, [r5, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   211e2:	f248 03fe 	movw	r3, #33022	; 0x80fe
   211e6:	429a      	cmp	r2, r3
   211e8:	d0d3      	beq.n	21192 <handle_ns_input+0x1d6>
	net_if_ipv6_dad_failed(iface, addr);
   211ea:	f7fa fb51 	bl	1b890 <net_if_ipv6_dad_failed>
   211ee:	e7d0      	b.n	21192 <handle_ns_input+0x1d6>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   211f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   211f4:	7603      	strb	r3, [r0, #24]
   211f6:	2300      	movs	r3, #0
   211f8:	2202      	movs	r2, #2
   211fa:	7642      	strb	r2, [r0, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   211fc:	7683      	strb	r3, [r0, #26]
   211fe:	76c3      	strb	r3, [r0, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   21200:	7703      	strb	r3, [r0, #28]
   21202:	7743      	strb	r3, [r0, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   21204:	7783      	strb	r3, [r0, #30]
   21206:	77c3      	strb	r3, [r0, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   21208:	f880 3020 	strb.w	r3, [r0, #32]
   2120c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   21210:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   21214:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   21218:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   2121c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   21220:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
   21224:	2301      	movs	r3, #1
   21226:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	return pkt->frags->data;
   2122a:	68a3      	ldr	r3, [r4, #8]
   2122c:	f8d3 8008 	ldr.w	r8, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   21230:	f108 0118 	add.w	r1, r8, #24
   21234:	6960      	ldr	r0, [r4, #20]
   21236:	f7fa fe15 	bl	1be64 <net_if_ipv6_select_src_addr>
   2123a:	4603      	mov	r3, r0
   2123c:	ae10      	add	r6, sp, #64	; 0x40
   2123e:	6800      	ldr	r0, [r0, #0]
   21240:	6859      	ldr	r1, [r3, #4]
   21242:	689a      	ldr	r2, [r3, #8]
   21244:	68db      	ldr	r3, [r3, #12]
   21246:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   21248:	ae10      	add	r6, sp, #64	; 0x40
   2124a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2124c:	f8c8 0008 	str.w	r0, [r8, #8]
   21250:	f8c8 100c 	str.w	r1, [r8, #12]
   21254:	f8c8 2010 	str.w	r2, [r8, #16]
   21258:	f8c8 3014 	str.w	r3, [r8, #20]
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   2125c:	2320      	movs	r3, #32
   2125e:	68a2      	ldr	r2, [r4, #8]
   21260:	6891      	ldr	r1, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   21262:	9300      	str	r3, [sp, #0]
   21264:	1d2b      	adds	r3, r5, #4
   21266:	f101 0218 	add.w	r2, r1, #24
   2126a:	3108      	adds	r1, #8
   2126c:	6960      	ldr	r0, [r4, #20]
   2126e:	f7fe ff69 	bl	20144 <net_ipv6_send_na>
	if (!ret) {
   21272:	2800      	cmp	r0, #0
   21274:	f000 80b5 	beq.w	213e2 <handle_ns_input+0x426>
	return NET_DROP;
   21278:	2002      	movs	r0, #2
   2127a:	e791      	b.n	211a0 <handle_ns_input+0x1e4>
   2127c:	20003038 	.word	0x20003038
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   21280:	2100      	movs	r1, #0
   21282:	3008      	adds	r0, #8
   21284:	f7fa f8d6 	bl	1b434 <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   21288:	4607      	mov	r7, r0
   2128a:	2800      	cmp	r0, #0
   2128c:	d181      	bne.n	21192 <handle_ns_input+0x1d6>
   2128e:	68a3      	ldr	r3, [r4, #8]
   21290:	f8d3 8008 	ldr.w	r8, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   21294:	f8d8 2018 	ldr.w	r2, [r8, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21298:	f240 23ff 	movw	r3, #767	; 0x2ff
   2129c:	429a      	cmp	r2, r3
   2129e:	d02b      	beq.n	212f8 <handle_ns_input+0x33c>
   212a0:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   212a2:	9303      	str	r3, [sp, #12]
   212a4:	2b00      	cmp	r3, #0
   212a6:	d03c      	beq.n	21322 <handle_ns_input+0x366>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   212a8:	af14      	add	r7, sp, #80	; 0x50
   212aa:	4643      	mov	r3, r8
   212ac:	f853 0f08 	ldr.w	r0, [r3, #8]!
   212b0:	6859      	ldr	r1, [r3, #4]
   212b2:	689a      	ldr	r2, [r3, #8]
   212b4:	68db      	ldr	r3, [r3, #12]
   212b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   212b8:	af14      	add	r7, sp, #80	; 0x50
   212ba:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   212bc:	f8c8 0018 	str.w	r0, [r8, #24]
   212c0:	f8c8 101c 	str.w	r1, [r8, #28]
   212c4:	f8c8 2020 	str.w	r2, [r8, #32]
   212c8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
   212cc:	68a3      	ldr	r3, [r4, #8]
   212ce:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   212d2:	af18      	add	r7, sp, #96	; 0x60
   212d4:	f856 0f04 	ldr.w	r0, [r6, #4]!
   212d8:	6871      	ldr	r1, [r6, #4]
   212da:	68b2      	ldr	r2, [r6, #8]
   212dc:	68f3      	ldr	r3, [r6, #12]
   212de:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   212e0:	ae18      	add	r6, sp, #96	; 0x60
   212e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   212e4:	f8ce 0008 	str.w	r0, [lr, #8]
   212e8:	f8ce 100c 	str.w	r1, [lr, #12]
   212ec:	f8ce 2010 	str.w	r2, [lr, #16]
   212f0:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   212f4:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   212f6:	e7b2      	b.n	2125e <handle_ns_input+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   212f8:	f8d8 301c 	ldr.w	r3, [r8, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   212fc:	b96b      	cbnz	r3, 2131a <handle_ns_input+0x35e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   212fe:	f8d8 3020 	ldr.w	r3, [r8, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   21302:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   21306:	d001      	beq.n	2130c <handle_ns_input+0x350>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21308:	2300      	movs	r3, #0
   2130a:	e7ca      	b.n	212a2 <handle_ns_input+0x2e6>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   2130c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   21310:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21312:	2bff      	cmp	r3, #255	; 0xff
   21314:	d003      	beq.n	2131e <handle_ns_input+0x362>
   21316:	2300      	movs	r3, #0
   21318:	e7c3      	b.n	212a2 <handle_ns_input+0x2e6>
   2131a:	2300      	movs	r3, #0
   2131c:	e7c1      	b.n	212a2 <handle_ns_input+0x2e6>
   2131e:	2301      	movs	r3, #1
   21320:	e7bf      	b.n	212a2 <handle_ns_input+0x2e6>
	return pkt->iface;
   21322:	f8d4 a014 	ldr.w	sl, [r4, #20]
	if (net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   21326:	f108 0818 	add.w	r8, r8, #24
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2132a:	f04f 0900 	mov.w	r9, #0
   2132e:	e004      	b.n	2133a <handle_ns_input+0x37e>
		return false;
   21330:	f8dd b00c 	ldr.w	fp, [sp, #12]
   21334:	e01e      	b.n	21374 <handle_ns_input+0x3b8>
   21336:	f109 0901 	add.w	r9, r9, #1
   2133a:	f1b9 0f02 	cmp.w	r9, #2
   2133e:	dc22      	bgt.n	21386 <handle_ns_input+0x3ca>
		if (!iface->ipv6.unicast[i].is_used ||
   21340:	236c      	movs	r3, #108	; 0x6c
   21342:	fb03 a309 	mla	r3, r3, r9, sl
   21346:	f893 b094 	ldrb.w	fp, [r3, #148]	; 0x94
   2134a:	f1bb 0f00 	cmp.w	fp, #0
   2134e:	d0f2      	beq.n	21336 <handle_ns_input+0x37a>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   21350:	236c      	movs	r3, #108	; 0x6c
   21352:	fb03 a309 	mla	r3, r3, r9, sl
   21356:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   21358:	2b0a      	cmp	r3, #10
   2135a:	d1ec      	bne.n	21336 <handle_ns_input+0x37a>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   2135c:	216c      	movs	r1, #108	; 0x6c
   2135e:	fb01 f109 	mul.w	r1, r1, r9
   21362:	3120      	adds	r1, #32
   21364:	4451      	add	r1, sl
	if (memcmp(addr1, addr2, bytes)) {
   21366:	2210      	movs	r2, #16
   21368:	4411      	add	r1, r2
   2136a:	4640      	mov	r0, r8
   2136c:	f009 fa10 	bl	2a790 <memcmp>
   21370:	2800      	cmp	r0, #0
   21372:	d1dd      	bne.n	21330 <handle_ns_input+0x374>
		if (net_is_ipv6_prefix(addr->s6_addr,
   21374:	f1bb 0f00 	cmp.w	fp, #0
   21378:	d0dd      	beq.n	21336 <handle_ns_input+0x37a>
			return &iface->ipv6.unicast[i];
   2137a:	276c      	movs	r7, #108	; 0x6c
   2137c:	fb07 f709 	mul.w	r7, r7, r9
   21380:	3720      	adds	r7, #32
   21382:	4457      	add	r7, sl
   21384:	370c      	adds	r7, #12
   21386:	2f00      	cmp	r7, #0
   21388:	f43f af03 	beq.w	21192 <handle_ns_input+0x1d6>
	return pkt->frags->data;
   2138c:	68a3      	ldr	r3, [r4, #8]
   2138e:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   21392:	af1c      	add	r7, sp, #112	; 0x70
   21394:	4663      	mov	r3, ip
   21396:	f853 0f08 	ldr.w	r0, [r3, #8]!
   2139a:	6859      	ldr	r1, [r3, #4]
   2139c:	689a      	ldr	r2, [r3, #8]
   2139e:	68db      	ldr	r3, [r3, #12]
   213a0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   213a2:	af1c      	add	r7, sp, #112	; 0x70
   213a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   213a6:	f8cc 0018 	str.w	r0, [ip, #24]
   213aa:	f8cc 101c 	str.w	r1, [ip, #28]
   213ae:	f8cc 2020 	str.w	r2, [ip, #32]
   213b2:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   213b6:	68a3      	ldr	r3, [r4, #8]
   213b8:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   213bc:	af20      	add	r7, sp, #128	; 0x80
   213be:	f856 0f04 	ldr.w	r0, [r6, #4]!
   213c2:	6871      	ldr	r1, [r6, #4]
   213c4:	68b2      	ldr	r2, [r6, #8]
   213c6:	68f3      	ldr	r3, [r6, #12]
   213c8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   213ca:	ae20      	add	r6, sp, #128	; 0x80
   213cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   213ce:	f8ce 0008 	str.w	r0, [lr, #8]
   213d2:	f8ce 100c 	str.w	r1, [lr, #12]
   213d6:	f8ce 2010 	str.w	r2, [lr, #16]
   213da:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   213de:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   213e0:	e73d      	b.n	2125e <handle_ns_input+0x2a2>
		net_pkt_unref(pkt);
   213e2:	4620      	mov	r0, r4
   213e4:	f7fc f9d9 	bl	1d79a <net_pkt_unref>
		return NET_OK;
   213e8:	2000      	movs	r0, #0
   213ea:	e6d9      	b.n	211a0 <handle_ns_input+0x1e4>

000213ec <nd_reachable_timeout>:
{
   213ec:	b530      	push	{r4, r5, lr}
   213ee:	b083      	sub	sp, #12
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   213f0:	f1a0 0514 	sub.w	r5, r0, #20
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   213f4:	2300      	movs	r3, #0
   213f6:	2b07      	cmp	r3, #7
   213f8:	dc07      	bgt.n	2140a <nd_reachable_timeout+0x1e>
	return &net_neighbor_pool[idx].nbr;
   213fa:	4c47      	ldr	r4, [pc, #284]	; (21518 <nd_reachable_timeout+0x12c>)
   213fc:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   21400:	68e2      	ldr	r2, [r4, #12]
   21402:	4295      	cmp	r5, r2
   21404:	d002      	beq.n	2140c <nd_reachable_timeout+0x20>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   21406:	3301      	adds	r3, #1
   21408:	e7f5      	b.n	213f6 <nd_reachable_timeout+0xa>
	return NULL;
   2140a:	2400      	movs	r4, #0
	if (!data || !nbr) {
   2140c:	b38d      	cbz	r5, 21472 <nd_reachable_timeout+0x86>
   2140e:	b384      	cbz	r4, 21472 <nd_reachable_timeout+0x86>
   21410:	4603      	mov	r3, r0
	switch (data->state) {
   21412:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   21416:	2a04      	cmp	r2, #4
   21418:	d82b      	bhi.n	21472 <nd_reachable_timeout+0x86>
   2141a:	e8df f002 	tbb	[pc, r2]
   2141e:	2703      	.short	0x2703
   21420:	3f2c      	.short	0x3f2c
   21422:	45          	.byte	0x45
   21423:	00          	.byte	0x00
		if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   21424:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   21428:	2a02      	cmp	r2, #2
   2142a:	d912      	bls.n	21452 <nd_reachable_timeout+0x66>
   2142c:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   2142e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   21432:	f008 fd7d 	bl	29f30 <k_delayed_work_cancel>
	if (data->pending) {
   21436:	6828      	ldr	r0, [r5, #0]
   21438:	b118      	cbz	r0, 21442 <nd_reachable_timeout+0x56>
		net_pkt_unref(data->pending);
   2143a:	f7fc f9ae 	bl	1d79a <net_pkt_unref>
		data->pending = NULL;
   2143e:	2300      	movs	r3, #0
   21440:	602b      	str	r3, [r5, #0]
   21442:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   21444:	3014      	adds	r0, #20
   21446:	f008 fd73 	bl	29f30 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   2144a:	4620      	mov	r0, r4
   2144c:	f7fd ffa6 	bl	1f39c <net_nbr_unref>
   21450:	e00f      	b.n	21472 <nd_reachable_timeout+0x86>
			data->ns_count++;
   21452:	3201      	adds	r2, #1
   21454:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   21458:	68a0      	ldr	r0, [r4, #8]
   2145a:	2100      	movs	r1, #0
   2145c:	9101      	str	r1, [sp, #4]
   2145e:	3b10      	subs	r3, #16
   21460:	9300      	str	r3, [sp, #0]
   21462:	460b      	mov	r3, r1
   21464:	460a      	mov	r2, r1
   21466:	f7ff f927 	bl	206b8 <net_ipv6_send_ns>
   2146a:	e002      	b.n	21472 <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_STALE;
   2146c:	2202      	movs	r2, #2
   2146e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
}
   21472:	b003      	add	sp, #12
   21474:	bd30      	pop	{r4, r5, pc}
   21476:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   21478:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   2147c:	f008 fd58 	bl	29f30 <k_delayed_work_cancel>
	if (data->pending) {
   21480:	6828      	ldr	r0, [r5, #0]
   21482:	b118      	cbz	r0, 2148c <nd_reachable_timeout+0xa0>
		net_pkt_unref(data->pending);
   21484:	f7fc f989 	bl	1d79a <net_pkt_unref>
		data->pending = NULL;
   21488:	2300      	movs	r3, #0
   2148a:	602b      	str	r3, [r5, #0]
   2148c:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   2148e:	3014      	adds	r0, #20
   21490:	f008 fd4e 	bl	29f30 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   21494:	4620      	mov	r0, r4
   21496:	f7fd ff81 	bl	1f39c <net_nbr_unref>
   2149a:	e7ea      	b.n	21472 <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_PROBE;
   2149c:	2204      	movs	r2, #4
   2149e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		data->ns_count = 0;
   214a2:	2200      	movs	r2, #0
   214a4:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
		if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   214a8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
   214ac:	2a02      	cmp	r2, #2
   214ae:	d91f      	bls.n	214f0 <nd_reachable_timeout+0x104>
			router = net_if_ipv6_router_lookup(nbr->iface,
   214b0:	f1a3 0110 	sub.w	r1, r3, #16
   214b4:	68a0      	ldr	r0, [r4, #8]
   214b6:	f7fa fbbf 	bl	1bc38 <net_if_ipv6_router_lookup>
			if (router && !router->is_infinite) {
   214ba:	2800      	cmp	r0, #0
   214bc:	d0d9      	beq.n	21472 <nd_reachable_timeout+0x86>
   214be:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
   214c2:	2a00      	cmp	r2, #0
   214c4:	d1d5      	bne.n	21472 <nd_reachable_timeout+0x86>
				net_if_ipv6_router_rm(router);
   214c6:	f7fa fc73 	bl	1bdb0 <net_if_ipv6_router_rm>
   214ca:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   214cc:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   214d0:	f008 fd2e 	bl	29f30 <k_delayed_work_cancel>
	if (data->pending) {
   214d4:	6828      	ldr	r0, [r5, #0]
   214d6:	b118      	cbz	r0, 214e0 <nd_reachable_timeout+0xf4>
		net_pkt_unref(data->pending);
   214d8:	f7fc f95f 	bl	1d79a <net_pkt_unref>
		data->pending = NULL;
   214dc:	2300      	movs	r3, #0
   214de:	602b      	str	r3, [r5, #0]
   214e0:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   214e2:	3014      	adds	r0, #20
   214e4:	f008 fd24 	bl	29f30 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   214e8:	4620      	mov	r0, r4
   214ea:	f7fd ff57 	bl	1f39c <net_nbr_unref>
   214ee:	e7c0      	b.n	21472 <nd_reachable_timeout+0x86>
			data->ns_count++;
   214f0:	3201      	adds	r2, #1
   214f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   214f6:	68a0      	ldr	r0, [r4, #8]
   214f8:	2100      	movs	r1, #0
   214fa:	9101      	str	r1, [sp, #4]
   214fc:	3b10      	subs	r3, #16
   214fe:	9300      	str	r3, [sp, #0]
   21500:	460b      	mov	r3, r1
   21502:	460a      	mov	r2, r1
   21504:	f7ff f8d8 	bl	206b8 <net_ipv6_send_ns>
   21508:	68e1      	ldr	r1, [r4, #12]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2150a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2150e:	3114      	adds	r1, #20
   21510:	4802      	ldr	r0, [pc, #8]	; (2151c <nd_reachable_timeout+0x130>)
   21512:	f008 fd67 	bl	29fe4 <k_delayed_work_submit_to_queue>
   21516:	e7ac      	b.n	21472 <nd_reachable_timeout+0x86>
   21518:	2000c448 	.word	0x2000c448
   2151c:	20003158 	.word	0x20003158

00021520 <net_ipv6_start_dad>:
{
   21520:	b500      	push	{lr}
   21522:	b083      	sub	sp, #12
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   21524:	2301      	movs	r3, #1
   21526:	9301      	str	r3, [sp, #4]
   21528:	3104      	adds	r1, #4
   2152a:	9100      	str	r1, [sp, #0]
   2152c:	2300      	movs	r3, #0
   2152e:	461a      	mov	r2, r3
   21530:	4619      	mov	r1, r3
   21532:	f7ff f8c1 	bl	206b8 <net_ipv6_send_ns>
}
   21536:	b003      	add	sp, #12
   21538:	f85d fb04 	ldr.w	pc, [sp], #4

0002153c <net_ipv6_prepare_for_send>:
{
   2153c:	b570      	push	{r4, r5, r6, lr}
   2153e:	b084      	sub	sp, #16
	struct net_if *iface = NULL;
   21540:	2300      	movs	r3, #0
   21542:	9303      	str	r3, [sp, #12]
	return pkt->iface;
   21544:	6943      	ldr	r3, [r0, #20]
   21546:	f3bf 8f5b 	dmb	ish
   2154a:	68db      	ldr	r3, [r3, #12]
   2154c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   21550:	f013 0f02 	tst.w	r3, #2
   21554:	d108      	bne.n	21568 <net_ipv6_prepare_for_send+0x2c>
   21556:	4604      	mov	r4, r0
	if (net_pkt_ll_dst(pkt)->addr ||
   21558:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2155a:	b13b      	cbz	r3, 2156c <net_ipv6_prepare_for_send+0x30>
	return pkt->frags->data;
   2155c:	68a3      	ldr	r3, [r4, #8]
   2155e:	6899      	ldr	r1, [r3, #8]
		return update_ll_reserve(pkt, &NET_IPV6_HDR(pkt)->dst);
   21560:	3118      	adds	r1, #24
   21562:	4620      	mov	r0, r4
   21564:	f7fe f9e6 	bl	1f934 <update_ll_reserve>
}
   21568:	b004      	add	sp, #16
   2156a:	bd70      	pop	{r4, r5, r6, pc}
   2156c:	6883      	ldr	r3, [r0, #8]
   2156e:	6899      	ldr	r1, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   21570:	7e0b      	ldrb	r3, [r1, #24]
	if (net_pkt_ll_dst(pkt)->addr ||
   21572:	2bff      	cmp	r3, #255	; 0xff
   21574:	d0f2      	beq.n	2155c <net_ipv6_prepare_for_send+0x20>
	if (net_if_ipv6_addr_onlink(&iface,
   21576:	3118      	adds	r1, #24
   21578:	a803      	add	r0, sp, #12
   2157a:	f7fa fa9d 	bl	1bab8 <net_if_ipv6_addr_onlink>
   2157e:	b348      	cbz	r0, 215d4 <net_ipv6_prepare_for_send+0x98>
   21580:	68a3      	ldr	r3, [r4, #8]
   21582:	689d      	ldr	r5, [r3, #8]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   21584:	3518      	adds	r5, #24
		net_pkt_set_iface(pkt, iface);
   21586:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   21588:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   2158a:	7d5a      	ldrb	r2, [r3, #21]
   2158c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21590:	7d5b      	ldrb	r3, [r3, #21]
   21592:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (!iface) {
   21596:	9b03      	ldr	r3, [sp, #12]
   21598:	2b00      	cmp	r3, #0
   2159a:	d03e      	beq.n	2161a <net_ipv6_prepare_for_send+0xde>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), nexthop);
   2159c:	462a      	mov	r2, r5
   2159e:	6961      	ldr	r1, [r4, #20]
   215a0:	4832      	ldr	r0, [pc, #200]	; (2166c <net_ipv6_prepare_for_send+0x130>)
   215a2:	f7fe f90d 	bl	1f7c0 <nbr_lookup>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   215a6:	4606      	mov	r6, r0
   215a8:	2800      	cmp	r0, #0
   215aa:	d051      	beq.n	21650 <net_ipv6_prepare_for_send+0x114>
   215ac:	7840      	ldrb	r0, [r0, #1]
   215ae:	28ff      	cmp	r0, #255	; 0xff
   215b0:	d04e      	beq.n	21650 <net_ipv6_prepare_for_send+0x114>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   215b2:	f7fd ff85 	bl	1f4c0 <net_nbr_get_lladdr>
		net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   215b6:	1c83      	adds	r3, r0, #2
   215b8:	62a3      	str	r3, [r4, #40]	; 0x28
		net_pkt_ll_dst(pkt)->len = lladdr->len;
   215ba:	7843      	ldrb	r3, [r0, #1]
   215bc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   215c0:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   215c2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   215c6:	2b02      	cmp	r3, #2
   215c8:	d036      	beq.n	21638 <net_ipv6_prepare_for_send+0xfc>
		return update_ll_reserve(pkt, nexthop);
   215ca:	4629      	mov	r1, r5
   215cc:	4620      	mov	r0, r4
   215ce:	f7fe f9b1 	bl	1f934 <update_ll_reserve>
   215d2:	e7c9      	b.n	21568 <net_ipv6_prepare_for_send+0x2c>
	return pkt->frags->data;
   215d4:	68a3      	ldr	r3, [r4, #8]
   215d6:	6899      	ldr	r1, [r3, #8]
		route = net_route_lookup(NULL, &NET_IPV6_HDR(pkt)->dst);
   215d8:	3118      	adds	r1, #24
   215da:	2000      	movs	r0, #0
   215dc:	f001 fb26 	bl	22c2c <net_route_lookup>
		if (route) {
   215e0:	4606      	mov	r6, r0
   215e2:	b160      	cbz	r0, 215fe <net_ipv6_prepare_for_send+0xc2>
			nexthop = net_route_get_nexthop(route);
   215e4:	f001 fc06 	bl	22df4 <net_route_get_nexthop>
			if (!nexthop) {
   215e8:	4605      	mov	r5, r0
   215ea:	2800      	cmp	r0, #0
   215ec:	d1d3      	bne.n	21596 <net_ipv6_prepare_for_send+0x5a>
				net_route_del(route);
   215ee:	4630      	mov	r0, r6
   215f0:	f001 fbac 	bl	22d4c <net_route_del>
				net_pkt_unref(pkt);
   215f4:	4620      	mov	r0, r4
   215f6:	f7fc f8d0 	bl	1d79a <net_pkt_unref>
				return NULL;
   215fa:	2000      	movs	r0, #0
   215fc:	e7b4      	b.n	21568 <net_ipv6_prepare_for_send+0x2c>
   215fe:	68a3      	ldr	r3, [r4, #8]
   21600:	6899      	ldr	r1, [r3, #8]
			router = net_if_ipv6_router_find_default(NULL,
   21602:	3118      	adds	r1, #24
   21604:	2000      	movs	r0, #0
   21606:	f7fa fb47 	bl	1bc98 <net_if_ipv6_router_find_default>
			if (!router) {
   2160a:	4605      	mov	r5, r0
   2160c:	b108      	cbz	r0, 21612 <net_ipv6_prepare_for_send+0xd6>
			nexthop = &router->address.in6_addr;
   2160e:	352c      	adds	r5, #44	; 0x2c
   21610:	e7c1      	b.n	21596 <net_ipv6_prepare_for_send+0x5a>
   21612:	68a3      	ldr	r3, [r4, #8]
   21614:	689d      	ldr	r5, [r3, #8]
				nexthop = &NET_IPV6_HDR(pkt)->dst;
   21616:	3518      	adds	r5, #24
				goto try_send;
   21618:	e7c0      	b.n	2159c <net_ipv6_prepare_for_send+0x60>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   2161a:	4629      	mov	r1, r5
   2161c:	a803      	add	r0, sp, #12
   2161e:	f7fa fa4b 	bl	1bab8 <net_if_ipv6_addr_onlink>
   21622:	2800      	cmp	r0, #0
   21624:	d0ba      	beq.n	2159c <net_ipv6_prepare_for_send+0x60>
			net_pkt_set_iface(pkt, iface);
   21626:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   21628:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   2162a:	7d5a      	ldrb	r2, [r3, #21]
   2162c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21630:	7d5b      	ldrb	r3, [r3, #21]
   21632:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   21636:	e7b1      	b.n	2159c <net_ipv6_prepare_for_send+0x60>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   21638:	2103      	movs	r1, #3
   2163a:	4630      	mov	r0, r6
   2163c:	f7fd ff48 	bl	1f4d0 <ipv6_nbr_set_state>
   21640:	68f1      	ldr	r1, [r6, #12]
   21642:	f241 3288 	movw	r2, #5000	; 0x1388
   21646:	3114      	adds	r1, #20
   21648:	4809      	ldr	r0, [pc, #36]	; (21670 <net_ipv6_prepare_for_send+0x134>)
   2164a:	f008 fccb 	bl	29fe4 <k_delayed_work_submit_to_queue>
   2164e:	e7bc      	b.n	215ca <net_ipv6_prepare_for_send+0x8e>
	return pkt->iface;
   21650:	6960      	ldr	r0, [r4, #20]
	return pkt->frags->data;
   21652:	68a3      	ldr	r3, [r4, #8]
   21654:	689a      	ldr	r2, [r3, #8]
	if (net_ipv6_send_ns(net_pkt_iface(pkt),
   21656:	2600      	movs	r6, #0
   21658:	9601      	str	r6, [sp, #4]
   2165a:	9500      	str	r5, [sp, #0]
   2165c:	4633      	mov	r3, r6
   2165e:	3208      	adds	r2, #8
   21660:	4621      	mov	r1, r4
   21662:	f7ff f829 	bl	206b8 <net_ipv6_send_ns>
		return NULL;
   21666:	4630      	mov	r0, r6
   21668:	e77e      	b.n	21568 <net_ipv6_prepare_for_send+0x2c>
   2166a:	bf00      	nop
   2166c:	2000c43c 	.word	0x2000c43c
   21670:	20003158 	.word	0x20003158

00021674 <net_ipv6_send_rs>:
{
   21674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21678:	b084      	sub	sp, #16
   2167a:	4605      	mov	r5, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   2167c:	6843      	ldr	r3, [r0, #4]
   2167e:	689b      	ldr	r3, [r3, #8]
   21680:	2100      	movs	r1, #0
   21682:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   21684:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21688:	f7fc f816 	bl	1d6b8 <net_pkt_get_reserve_tx>
   2168c:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   2168e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21692:	f7fc f82f 	bl	1d6f4 <net_pkt_get_frag>
   21696:	4606      	mov	r6, r0
	net_pkt_frag_add(pkt, frag);
   21698:	4601      	mov	r1, r0
   2169a:	4620      	mov	r0, r4
   2169c:	f7fc f8a7 	bl	1d7ee <net_pkt_frag_add>
	pkt->iface = iface;
   216a0:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   216a2:	7d6b      	ldrb	r3, [r5, #21]
   216a4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   216a8:	7d6b      	ldrb	r3, [r5, #21]
   216aa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   216ae:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   216b2:	220a      	movs	r2, #10
   216b4:	f362 03c6 	bfi	r3, r2, #3, #4
   216b8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   216bc:	2328      	movs	r3, #40	; 0x28
   216be:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   216c2:	68a3      	ldr	r3, [r4, #8]
   216c4:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   216c6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   216ca:	461a      	mov	r2, r3
   216cc:	2100      	movs	r1, #0
   216ce:	1ac0      	subs	r0, r0, r3
   216d0:	f009 f8f2 	bl	2a8b8 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   216d4:	2200      	movs	r2, #0
   216d6:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   216d8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return pkt->frags->data;
   216dc:	68a3      	ldr	r3, [r4, #8]
   216de:	689b      	ldr	r3, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   216e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   216e4:	7619      	strb	r1, [r3, #24]
   216e6:	2102      	movs	r1, #2
   216e8:	7659      	strb	r1, [r3, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   216ea:	769a      	strb	r2, [r3, #26]
   216ec:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   216ee:	771a      	strb	r2, [r3, #28]
   216f0:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   216f2:	779a      	strb	r2, [r3, #30]
   216f4:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   216f6:	f883 2020 	strb.w	r2, [r3, #32]
   216fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   216fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   21702:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   21706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   2170a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   2170e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   21712:	2201      	movs	r2, #1
   21714:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   21718:	68a3      	ldr	r3, [r4, #8]
   2171a:	f8d3 8008 	ldr.w	r8, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   2171e:	f108 0118 	add.w	r1, r8, #24
   21722:	4628      	mov	r0, r5
   21724:	f7fa fb9e 	bl	1be64 <net_if_ipv6_select_src_addr>
   21728:	4603      	mov	r3, r0
   2172a:	466d      	mov	r5, sp
   2172c:	6800      	ldr	r0, [r0, #0]
   2172e:	6859      	ldr	r1, [r3, #4]
   21730:	689a      	ldr	r2, [r3, #8]
   21732:	68db      	ldr	r3, [r3, #12]
   21734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   21736:	466d      	mov	r5, sp
   21738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2173a:	f8c8 0008 	str.w	r0, [r8, #8]
   2173e:	f8c8 100c 	str.w	r1, [r8, #12]
   21742:	f8c8 2010 	str.w	r2, [r8, #16]
   21746:	f8c8 3014 	str.w	r3, [r8, #20]
   2174a:	68a3      	ldr	r3, [r4, #8]
   2174c:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2174e:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21750:	b93a      	cbnz	r2, 21762 <net_ipv6_send_rs+0xee>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21752:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21754:	b982      	cbnz	r2, 21778 <net_ipv6_send_rs+0x104>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21756:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21758:	b982      	cbnz	r2, 2177c <net_ipv6_send_rs+0x108>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2175a:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2175c:	b183      	cbz	r3, 21780 <net_ipv6_send_rs+0x10c>
   2175e:	2300      	movs	r3, #0
   21760:	e000      	b.n	21764 <net_ipv6_send_rs+0xf0>
   21762:	2300      	movs	r3, #0
	if (!unspec_src) {
   21764:	461f      	mov	r7, r3
   21766:	b97b      	cbnz	r3, 21788 <net_ipv6_send_rs+0x114>
	return pkt->iface;
   21768:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   2176a:	7d1b      	ldrb	r3, [r3, #20]
   2176c:	2b06      	cmp	r3, #6
   2176e:	d02a      	beq.n	217c6 <net_ipv6_send_rs+0x152>
	} else if (iface->link_addr.len == 8) {
   21770:	2b08      	cmp	r3, #8
   21772:	d007      	beq.n	21784 <net_ipv6_send_rs+0x110>
	return 0;
   21774:	2500      	movs	r5, #0
   21776:	e008      	b.n	2178a <net_ipv6_send_rs+0x116>
   21778:	2300      	movs	r3, #0
   2177a:	e7f3      	b.n	21764 <net_ipv6_send_rs+0xf0>
   2177c:	2300      	movs	r3, #0
   2177e:	e7f1      	b.n	21764 <net_ipv6_send_rs+0xf0>
   21780:	2301      	movs	r3, #1
   21782:	e7ef      	b.n	21764 <net_ipv6_send_rs+0xf0>
		return 16;
   21784:	2510      	movs	r5, #16
   21786:	e000      	b.n	2178a <net_ipv6_send_rs+0x116>
	u8_t llao_len = 0;
   21788:	2500      	movs	r5, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   2178a:	2285      	movs	r2, #133	; 0x85
   2178c:	1d29      	adds	r1, r5, #4
   2178e:	4620      	mov	r0, r4
   21790:	f7fe f92f 	bl	1f9f2 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   21794:	3608      	adds	r6, #8
   21796:	2104      	movs	r1, #4
   21798:	4630      	mov	r0, r6
   2179a:	f7f9 fadb 	bl	1ad54 <net_buf_simple_add>
	if (!unspec_src) {
   2179e:	b1a7      	cbz	r7, 217ca <net_ipv6_send_rs+0x156>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   217a0:	68a1      	ldr	r1, [r4, #8]
   217a2:	4620      	mov	r0, r4
   217a4:	f7fd f8b0 	bl	1e908 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   217a8:	4620      	mov	r0, r4
   217aa:	f7f9 fbf5 	bl	1af98 <net_send_data>
   217ae:	2800      	cmp	r0, #0
   217b0:	db2b      	blt.n	2180a <net_ipv6_send_rs+0x196>
	net_stats.ipv6_nd.sent++;
   217b2:	4a1c      	ldr	r2, [pc, #112]	; (21824 <net_ipv6_send_rs+0x1b0>)
   217b4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   217b8:	3301      	adds	r3, #1
   217ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   217be:	2000      	movs	r0, #0
}
   217c0:	b004      	add	sp, #16
   217c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 8;
   217c6:	2508      	movs	r5, #8
   217c8:	e7df      	b.n	2178a <net_ipv6_send_rs+0x116>
		net_buf_add(frag, llao_len);
   217ca:	4629      	mov	r1, r5
   217cc:	4630      	mov	r0, r6
   217ce:	f7f9 fac1 	bl	1ad54 <net_buf_simple_add>
   217d2:	f8d4 8014 	ldr.w	r8, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   217d6:	4620      	mov	r0, r4
   217d8:	f7fc fab8 	bl	1dd4c <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   217dc:	f100 0608 	add.w	r6, r0, #8
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   217e0:	2301      	movs	r3, #1
   217e2:	7203      	strb	r3, [r0, #8]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   217e4:	08eb      	lsrs	r3, r5, #3
   217e6:	7243      	strb	r3, [r0, #9]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   217e8:	f898 2014 	ldrb.w	r2, [r8, #20]
   217ec:	f8d8 1010 	ldr.w	r1, [r8, #16]
   217f0:	300a      	adds	r0, #10
   217f2:	f7de fd65 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   217f6:	f898 2014 	ldrb.w	r2, [r8, #20]
   217fa:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   217fc:	1aaa      	subs	r2, r5, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   217fe:	3a02      	subs	r2, #2
   21800:	2100      	movs	r1, #0
   21802:	4430      	add	r0, r6
   21804:	f009 f858 	bl	2a8b8 <memset>
   21808:	e7ca      	b.n	217a0 <net_ipv6_send_rs+0x12c>
	net_pkt_unref(pkt);
   2180a:	4620      	mov	r0, r4
   2180c:	f7fb ffc5 	bl	1d79a <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   21810:	4a04      	ldr	r2, [pc, #16]	; (21824 <net_ipv6_send_rs+0x1b0>)
   21812:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   21816:	3301      	adds	r3, #1
   21818:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   2181c:	f06f 0015 	mvn.w	r0, #21
   21820:	e7ce      	b.n	217c0 <net_ipv6_send_rs+0x14c>
   21822:	bf00      	nop
   21824:	20003038 	.word	0x20003038

00021828 <net_ipv6_start_rs>:
{
   21828:	b508      	push	{r3, lr}
	return net_ipv6_send_rs(iface);
   2182a:	f7ff ff23 	bl	21674 <net_ipv6_send_rs>
}
   2182e:	bd08      	pop	{r3, pc}

00021830 <net_ipv6_mld_join>:
{
   21830:	b570      	push	{r4, r5, r6, lr}
   21832:	b082      	sub	sp, #8
   21834:	ab02      	add	r3, sp, #8
   21836:	f843 0d04 	str.w	r0, [r3, #-4]!
   2183a:	460d      	mov	r5, r1
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   2183c:	4619      	mov	r1, r3
   2183e:	4628      	mov	r0, r5
   21840:	f7fa f842 	bl	1b8c8 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   21844:	4604      	mov	r4, r0
   21846:	b118      	cbz	r0, 21850 <net_ipv6_mld_join+0x20>
	return addr->is_joined;
   21848:	7803      	ldrb	r3, [r0, #0]
   2184a:	f013 0f02 	tst.w	r3, #2
   2184e:	d123      	bne.n	21898 <net_ipv6_mld_join+0x68>
	if (!maddr) {
   21850:	b1c4      	cbz	r4, 21884 <net_ipv6_mld_join+0x54>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   21852:	2202      	movs	r2, #2
   21854:	4629      	mov	r1, r5
   21856:	9801      	ldr	r0, [sp, #4]
   21858:	f7fe fb5a 	bl	1ff10 <send_mldv2>
	if (ret < 0) {
   2185c:	1e06      	subs	r6, r0, #0
   2185e:	db0e      	blt.n	2187e <net_ipv6_mld_join+0x4e>
	addr->is_joined = true;
   21860:	7823      	ldrb	r3, [r4, #0]
   21862:	f043 0302 	orr.w	r3, r3, #2
   21866:	7023      	strb	r3, [r4, #0]
	net_if_mcast_monitor(iface, addr, true);
   21868:	2201      	movs	r2, #1
   2186a:	4629      	mov	r1, r5
   2186c:	9801      	ldr	r0, [sp, #4]
   2186e:	f7fa f877 	bl	1b960 <net_if_mcast_monitor>
   21872:	2300      	movs	r3, #0
   21874:	461a      	mov	r2, r3
   21876:	9901      	ldr	r1, [sp, #4]
   21878:	4809      	ldr	r0, [pc, #36]	; (218a0 <net_ipv6_mld_join+0x70>)
   2187a:	f001 fc01 	bl	23080 <net_mgmt_event_notify_with_info>
}
   2187e:	4630      	mov	r0, r6
   21880:	b002      	add	sp, #8
   21882:	bd70      	pop	{r4, r5, r6, pc}
		maddr = net_if_ipv6_maddr_add(iface, addr);
   21884:	4629      	mov	r1, r5
   21886:	9801      	ldr	r0, [sp, #4]
   21888:	f7f9 ff32 	bl	1b6f0 <net_if_ipv6_maddr_add>
		if (!maddr) {
   2188c:	4604      	mov	r4, r0
   2188e:	2800      	cmp	r0, #0
   21890:	d1df      	bne.n	21852 <net_ipv6_mld_join+0x22>
			return -ENOMEM;
   21892:	f06f 060b 	mvn.w	r6, #11
   21896:	e7f2      	b.n	2187e <net_ipv6_mld_join+0x4e>
		return -EALREADY;
   21898:	f06f 0677 	mvn.w	r6, #119	; 0x77
   2189c:	e7ef      	b.n	2187e <net_ipv6_mld_join+0x4e>
   2189e:	bf00      	nop
   218a0:	f0600007 	.word	0xf0600007

000218a4 <net_ipv6_mld_leave>:
{
   218a4:	b570      	push	{r4, r5, r6, lr}
   218a6:	4604      	mov	r4, r0
   218a8:	460d      	mov	r5, r1
	if (!net_if_ipv6_maddr_rm(iface, addr)) {
   218aa:	f7f9 ff5d 	bl	1b768 <net_if_ipv6_maddr_rm>
   218ae:	b198      	cbz	r0, 218d8 <net_ipv6_mld_leave+0x34>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_INCLUDE);
   218b0:	2201      	movs	r2, #1
   218b2:	4629      	mov	r1, r5
   218b4:	4620      	mov	r0, r4
   218b6:	f7fe fb2b 	bl	1ff10 <send_mldv2>
	if (ret < 0) {
   218ba:	1e06      	subs	r6, r0, #0
   218bc:	db0a      	blt.n	218d4 <net_ipv6_mld_leave+0x30>
	net_if_mcast_monitor(iface, addr, false);
   218be:	2200      	movs	r2, #0
   218c0:	4629      	mov	r1, r5
   218c2:	4620      	mov	r0, r4
   218c4:	f7fa f84c 	bl	1b960 <net_if_mcast_monitor>
   218c8:	2300      	movs	r3, #0
   218ca:	461a      	mov	r2, r3
   218cc:	4621      	mov	r1, r4
   218ce:	4804      	ldr	r0, [pc, #16]	; (218e0 <net_ipv6_mld_leave+0x3c>)
   218d0:	f001 fbd6 	bl	23080 <net_mgmt_event_notify_with_info>
}
   218d4:	4630      	mov	r0, r6
   218d6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   218d8:	f06f 0615 	mvn.w	r6, #21
   218dc:	e7fa      	b.n	218d4 <net_ipv6_mld_leave+0x30>
   218de:	bf00      	nop
   218e0:	f0600008 	.word	0xf0600008

000218e4 <net_ipv6_process_pkt>:
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
		proto == IPPROTO_TCP);
}

enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   218e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   218e8:	b089      	sub	sp, #36	; 0x24
	return pkt->frags->data;
   218ea:	6884      	ldr	r4, [r0, #8]
   218ec:	68a7      	ldr	r7, [r4, #8]
	size_t bytes = 0;
   218ee:	2300      	movs	r3, #0
   218f0:	e002      	b.n	218f8 <net_ipv6_process_pkt+0x14>
		bytes += buf->len;
   218f2:	89a2      	ldrh	r2, [r4, #12]
   218f4:	4413      	add	r3, r2
		buf = buf->frags;
   218f6:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   218f8:	2c00      	cmp	r4, #0
   218fa:	d1fa      	bne.n	218f2 <net_ipv6_process_pkt+0xe>
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
	int real_len = net_pkt_get_len(pkt);
   218fc:	461e      	mov	r6, r3
	int pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   218fe:	7939      	ldrb	r1, [r7, #4]
   21900:	797a      	ldrb	r2, [r7, #5]
   21902:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   21906:	3228      	adds	r2, #40	; 0x28
	u8_t next, next_hdr, length;
	u8_t first_option;
	u16_t offset, total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   21908:	4293      	cmp	r3, r2
   2190a:	d007      	beq.n	2191c <net_ipv6_process_pkt+0x38>
	net_stats.ipv6.drop++;
   2190c:	4abd      	ldr	r2, [pc, #756]	; (21c04 <net_ipv6_process_pkt+0x320>)
   2190e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   21910:	3301      	adds	r3, #1
   21912:	6313      	str	r3, [r2, #48]	; 0x30
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   21914:	2002      	movs	r0, #2

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr();

	return NET_DROP;
}
   21916:	b009      	add	sp, #36	; 0x24
   21918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return addr->s6_addr[0] == 0xFF;
   2191c:	7a3b      	ldrb	r3, [r7, #8]
	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   2191e:	2bff      	cmp	r3, #255	; 0xff
   21920:	d105      	bne.n	2192e <net_ipv6_process_pkt+0x4a>
   21922:	4ab8      	ldr	r2, [pc, #736]	; (21c04 <net_ipv6_process_pkt+0x320>)
   21924:	6b13      	ldr	r3, [r2, #48]	; 0x30
   21926:	3301      	adds	r3, #1
   21928:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   2192a:	2002      	movs	r0, #2
   2192c:	e7f3      	b.n	21916 <net_ipv6_process_pkt+0x32>
   2192e:	4605      	mov	r5, r0
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   21930:	f107 0818 	add.w	r8, r7, #24
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   21934:	2100      	movs	r1, #0
   21936:	4640      	mov	r0, r8
   21938:	f7f9 fd7c 	bl	1b434 <net_if_ipv6_addr_lookup>
   2193c:	2800      	cmp	r0, #0
   2193e:	d06f      	beq.n	21a20 <net_ipv6_process_pkt+0x13c>
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   21940:	1dbb      	adds	r3, r7, #6
	pkt->next_hdr = hdr;
   21942:	61eb      	str	r3, [r5, #28]
	pkt->ipv6_ext_len = len;
   21944:	2300      	movs	r3, #0
   21946:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	pkt->ip_hdr_len = len;
   2194a:	2328      	movs	r3, #40	; 0x28
   2194c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	next = *(net_pkt_next_hdr(pkt));
   21950:	f897 9006 	ldrb.w	r9, [r7, #6]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   21954:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   21958:	f000 80b0 	beq.w	21abc <net_ipv6_process_pkt+0x1d8>
   2195c:	f1b9 0f11 	cmp.w	r9, #17
   21960:	f000 80ae 	beq.w	21ac0 <net_ipv6_process_pkt+0x1dc>
   21964:	f1b9 0f06 	cmp.w	r9, #6
   21968:	f000 80a6 	beq.w	21ab8 <net_ipv6_process_pkt+0x1d4>
   2196c:	2300      	movs	r3, #0
	if (is_upper_layer_protocol_header(next)) {
   2196e:	2b00      	cmp	r3, #0
   21970:	f040 8166 	bne.w	21c40 <net_ipv6_process_pkt+0x35c>
	frag = pkt->frags;
   21974:	f8d5 a008 	ldr.w	sl, [r5, #8]
	offset = sizeof(struct net_ipv6_hdr);
   21978:	2328      	movs	r3, #40	; 0x28
   2197a:	f8ad 301c 	strh.w	r3, [sp, #28]
	next = hdr->nexthdr;
   2197e:	464f      	mov	r7, r9
	ext_bitmap = 0;
   21980:	2300      	movs	r3, #0
   21982:	9303      	str	r3, [sp, #12]
	u16_t offset, total_len = 0;
   21984:	9302      	str	r3, [sp, #8]
   21986:	46a3      	mov	fp, r4
   21988:	4654      	mov	r4, sl
	while (frag) {
   2198a:	2c00      	cmp	r4, #0
   2198c:	f000 8156 	beq.w	21c3c <net_ipv6_process_pkt+0x358>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   21990:	2f3a      	cmp	r7, #58	; 0x3a
   21992:	f000 8099 	beq.w	21ac8 <net_ipv6_process_pkt+0x1e4>
   21996:	2f11      	cmp	r7, #17
   21998:	f000 8098 	beq.w	21acc <net_ipv6_process_pkt+0x1e8>
   2199c:	2f06      	cmp	r7, #6
   2199e:	f000 8091 	beq.w	21ac4 <net_ipv6_process_pkt+0x1e0>
   219a2:	2300      	movs	r3, #0
		if (is_upper_layer_protocol_header(next)) {
   219a4:	2b00      	cmp	r3, #0
   219a6:	f040 8093 	bne.w	21ad0 <net_ipv6_process_pkt+0x1ec>
		start_of_ext = offset;
   219aa:	f10d 0820 	add.w	r8, sp, #32
   219ae:	f838 1d04 	ldrh.w	r1, [r8, #-4]!
	return net_frag_read(frag, offset, pos, 1, value);
   219b2:	f10d 031f 	add.w	r3, sp, #31
   219b6:	9300      	str	r3, [sp, #0]
   219b8:	2301      	movs	r3, #1
   219ba:	4642      	mov	r2, r8
   219bc:	4620      	mov	r0, r4
   219be:	f7fc f86a 	bl	1da96 <net_frag_read>
		frag = net_frag_read_u8(frag, offset, &offset, &length);
   219c2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   219c6:	f10d 031e 	add.w	r3, sp, #30
   219ca:	9300      	str	r3, [sp, #0]
   219cc:	2301      	movs	r3, #1
   219ce:	4642      	mov	r2, r8
   219d0:	f7fc f861 	bl	1da96 <net_frag_read>
		if (!frag && offset == 0xffff) {
   219d4:	4604      	mov	r4, r0
   219d6:	2800      	cmp	r0, #0
   219d8:	f000 8081 	beq.w	21ade <net_ipv6_process_pkt+0x1fa>
		length = length * 8 + 8;
   219dc:	f89d 801e 	ldrb.w	r8, [sp, #30]
   219e0:	f108 0801 	add.w	r8, r8, #1
   219e4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   219e8:	fa5f f888 	uxtb.w	r8, r8
   219ec:	f88d 801e 	strb.w	r8, [sp, #30]
		total_len += length;
   219f0:	fa1f f888 	uxth.w	r8, r8
   219f4:	9b02      	ldr	r3, [sp, #8]
   219f6:	4443      	add	r3, r8
   219f8:	b29b      	uxth	r3, r3
   219fa:	9302      	str	r3, [sp, #8]
		switch (next) {
   219fc:	2f00      	cmp	r7, #0
   219fe:	d077      	beq.n	21af0 <net_ipv6_process_pkt+0x20c>
   21a00:	2f3b      	cmp	r7, #59	; 0x3b
   21a02:	d073      	beq.n	21aec <net_ipv6_process_pkt+0x208>
			      offset - 1);
   21a04:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   21a08:	3b01      	subs	r3, #1
   21a0a:	2201      	movs	r2, #1
   21a0c:	2104      	movs	r1, #4
   21a0e:	4628      	mov	r0, r5
   21a10:	f7fd fa88 	bl	1ef24 <net_icmpv6_send_error>
	net_stats.ip_errors.protoerr++;
   21a14:	4a7b      	ldr	r2, [pc, #492]	; (21c04 <net_ipv6_process_pkt+0x320>)
   21a16:	6a13      	ldr	r3, [r2, #32]
   21a18:	3301      	adds	r3, #1
   21a1a:	6213      	str	r3, [r2, #32]
	return NET_DROP;
   21a1c:	2002      	movs	r0, #2
   21a1e:	e77a      	b.n	21916 <net_ipv6_process_pkt+0x32>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   21a20:	2100      	movs	r1, #0
   21a22:	4640      	mov	r0, r8
   21a24:	f7f9 ff50 	bl	1b8c8 <net_if_ipv6_maddr_lookup>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   21a28:	2800      	cmp	r0, #0
   21a2a:	d189      	bne.n	21940 <net_ipv6_process_pkt+0x5c>
	return addr->s6_addr[0] == 0xFF;
   21a2c:	7e3b      	ldrb	r3, [r7, #24]
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   21a2e:	2bff      	cmp	r3, #255	; 0xff
   21a30:	d086      	beq.n	21940 <net_ipv6_process_pkt+0x5c>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21a32:	f8d8 3000 	ldr.w	r3, [r8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21a36:	bb8b      	cbnz	r3, 21a9c <net_ipv6_process_pkt+0x1b8>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21a38:	f8d8 3004 	ldr.w	r3, [r8, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21a3c:	bb83      	cbnz	r3, 21aa0 <net_ipv6_process_pkt+0x1bc>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21a3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21a42:	bb7b      	cbnz	r3, 21aa4 <net_ipv6_process_pkt+0x1c0>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   21a44:	f8d8 200c 	ldr.w	r2, [r8, #12]
   21a48:	0a13      	lsrs	r3, r2, #8
   21a4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   21a4e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   21a52:	0211      	lsls	r1, r2, #8
   21a54:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   21a58:	430b      	orrs	r3, r1
   21a5a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21a5e:	2b01      	cmp	r3, #1
   21a60:	d022      	beq.n	21aa8 <net_ipv6_process_pkt+0x1c4>
   21a62:	2300      	movs	r3, #0
	    !net_is_ipv6_addr_mcast(&hdr->dst) &&
   21a64:	2b00      	cmp	r3, #0
   21a66:	f47f af6b 	bne.w	21940 <net_ipv6_process_pkt+0x5c>
		if (net_route_get_info(net_pkt_iface(pkt), &hdr->dst, &route,
   21a6a:	ab06      	add	r3, sp, #24
   21a6c:	aa05      	add	r2, sp, #20
   21a6e:	4641      	mov	r1, r8
   21a70:	6968      	ldr	r0, [r5, #20]
   21a72:	f001 f9f5 	bl	22e60 <net_route_get_info>
   21a76:	b1c8      	cbz	r0, 21aac <net_ipv6_process_pkt+0x1c8>
			if (route) {
   21a78:	9b05      	ldr	r3, [sp, #20]
   21a7a:	b13b      	cbz	r3, 21a8c <net_ipv6_process_pkt+0x1a8>
				net_pkt_set_iface(pkt, route->iface);
   21a7c:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   21a7e:	616b      	str	r3, [r5, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21a80:	7d5a      	ldrb	r2, [r3, #21]
   21a82:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21a86:	7d5b      	ldrb	r3, [r3, #21]
   21a88:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
			ret = net_route_packet(pkt, nexthop);
   21a8c:	9906      	ldr	r1, [sp, #24]
   21a8e:	4628      	mov	r0, r5
   21a90:	f001 fa0c 	bl	22eac <net_route_packet>
			if (ret < 0) {
   21a94:	2800      	cmp	r0, #0
   21a96:	db09      	blt.n	21aac <net_ipv6_process_pkt+0x1c8>
				return NET_OK;
   21a98:	2000      	movs	r0, #0
   21a9a:	e73c      	b.n	21916 <net_ipv6_process_pkt+0x32>
   21a9c:	2300      	movs	r3, #0
   21a9e:	e7e1      	b.n	21a64 <net_ipv6_process_pkt+0x180>
   21aa0:	2300      	movs	r3, #0
   21aa2:	e7df      	b.n	21a64 <net_ipv6_process_pkt+0x180>
   21aa4:	2300      	movs	r3, #0
   21aa6:	e7dd      	b.n	21a64 <net_ipv6_process_pkt+0x180>
   21aa8:	2301      	movs	r3, #1
   21aaa:	e7db      	b.n	21a64 <net_ipv6_process_pkt+0x180>
	net_stats.ipv6.drop++;
   21aac:	4a55      	ldr	r2, [pc, #340]	; (21c04 <net_ipv6_process_pkt+0x320>)
   21aae:	6b13      	ldr	r3, [r2, #48]	; 0x30
   21ab0:	3301      	adds	r3, #1
   21ab2:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   21ab4:	2002      	movs	r0, #2
   21ab6:	e72e      	b.n	21916 <net_ipv6_process_pkt+0x32>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   21ab8:	2301      	movs	r3, #1
   21aba:	e758      	b.n	2196e <net_ipv6_process_pkt+0x8a>
   21abc:	2301      	movs	r3, #1
   21abe:	e756      	b.n	2196e <net_ipv6_process_pkt+0x8a>
   21ac0:	2301      	movs	r3, #1
   21ac2:	e754      	b.n	2196e <net_ipv6_process_pkt+0x8a>
   21ac4:	2301      	movs	r3, #1
   21ac6:	e76d      	b.n	219a4 <net_ipv6_process_pkt+0xc0>
   21ac8:	2301      	movs	r3, #1
   21aca:	e76b      	b.n	219a4 <net_ipv6_process_pkt+0xc0>
   21acc:	2301      	movs	r3, #1
   21ace:	e769      	b.n	219a4 <net_ipv6_process_pkt+0xc0>
			net_pkt_set_ipv6_ext_len(pkt, offset -
   21ad0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   21ad4:	3b28      	subs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   21ad6:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   21ada:	46b9      	mov	r9, r7
   21adc:	e0b2      	b.n	21c44 <net_ipv6_process_pkt+0x360>
		if (!frag && offset == 0xffff) {
   21ade:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   21ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21ae6:	429a      	cmp	r2, r3
   21ae8:	f47f af78 	bne.w	219dc <net_ipv6_process_pkt+0xf8>
	return NET_DROP;
   21aec:	2002      	movs	r0, #2
   21aee:	e712      	b.n	21916 <net_ipv6_process_pkt+0x32>
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   21af0:	f1b9 0f00 	cmp.w	r9, #0
   21af4:	d186      	bne.n	21a04 <net_ipv6_process_pkt+0x120>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   21af6:	9a03      	ldr	r2, [sp, #12]
   21af8:	f012 0f01 	tst.w	r2, #1
   21afc:	d182      	bne.n	21a04 <net_ipv6_process_pkt+0x120>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   21afe:	f042 0301 	orr.w	r3, r2, #1
   21b02:	9303      	str	r3, [sp, #12]
			frag = handle_ext_hdr_options(pkt, frag, real_len,
   21b04:	f8bd 101c 	ldrh.w	r1, [sp, #28]
	if (len > total_len) {
   21b08:	4546      	cmp	r6, r8
   21b0a:	f2c0 8094 	blt.w	21c36 <net_ipv6_process_pkt+0x352>
	return net_frag_read(frag, offset, pos, 1, value);
   21b0e:	f10d 0313 	add.w	r3, sp, #19
   21b12:	9300      	str	r3, [sp, #0]
   21b14:	2301      	movs	r3, #1
   21b16:	aa06      	add	r2, sp, #24
   21b18:	4620      	mov	r0, r4
   21b1a:	f7fb ffbc 	bl	1da96 <net_frag_read>
	frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   21b1e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   21b22:	ab05      	add	r3, sp, #20
   21b24:	9300      	str	r3, [sp, #0]
   21b26:	2301      	movs	r3, #1
   21b28:	aa06      	add	r2, sp, #24
   21b2a:	f7fb ffb4 	bl	1da96 <net_frag_read>
	if (!frag && loc == 0xffff) {
   21b2e:	4604      	mov	r4, r0
   21b30:	b108      	cbz	r0, 21b36 <net_ipv6_process_pkt+0x252>
   21b32:	2702      	movs	r7, #2
   21b34:	e027      	b.n	21b86 <net_ipv6_process_pkt+0x2a2>
   21b36:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21b3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21b3e:	429a      	cmp	r2, r3
   21b40:	d068      	beq.n	21c14 <net_ipv6_process_pkt+0x330>
   21b42:	2702      	movs	r7, #2
   21b44:	e01f      	b.n	21b86 <net_ipv6_process_pkt+0x2a2>
			length++;
   21b46:	3701      	adds	r7, #1
   21b48:	b2bf      	uxth	r7, r7
			loc--;
   21b4a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   21b4e:	3b01      	subs	r3, #1
   21b50:	f8ad 3018 	strh.w	r3, [sp, #24]
		if (length >= len) {
   21b54:	45b8      	cmp	r8, r7
   21b56:	d960      	bls.n	21c1a <net_ipv6_process_pkt+0x336>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_type);
   21b58:	f10d 0a20 	add.w	sl, sp, #32
   21b5c:	f83a 1d08 	ldrh.w	r1, [sl, #-8]!
   21b60:	f10d 0313 	add.w	r3, sp, #19
   21b64:	9300      	str	r3, [sp, #0]
   21b66:	2301      	movs	r3, #1
   21b68:	4652      	mov	r2, sl
   21b6a:	4620      	mov	r0, r4
   21b6c:	f7fb ff93 	bl	1da96 <net_frag_read>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   21b70:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   21b74:	ab05      	add	r3, sp, #20
   21b76:	9300      	str	r3, [sp, #0]
   21b78:	2301      	movs	r3, #1
   21b7a:	4652      	mov	r2, sl
   21b7c:	f7fb ff8b 	bl	1da96 <net_frag_read>
		if (!frag && loc == 0xffff) {
   21b80:	4604      	mov	r4, r0
   21b82:	2800      	cmp	r0, #0
   21b84:	d040      	beq.n	21c08 <net_ipv6_process_pkt+0x324>
	while (frag && (length < len)) {
   21b86:	2c00      	cmp	r4, #0
   21b88:	d047      	beq.n	21c1a <net_ipv6_process_pkt+0x336>
   21b8a:	45b8      	cmp	r8, r7
   21b8c:	d945      	bls.n	21c1a <net_ipv6_process_pkt+0x336>
		switch (opt_type) {
   21b8e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   21b92:	2b00      	cmp	r3, #0
   21b94:	d0d7      	beq.n	21b46 <net_ipv6_process_pkt+0x262>
   21b96:	2b01      	cmp	r3, #1
   21b98:	d009      	beq.n	21bae <net_ipv6_process_pkt+0x2ca>
	switch (opt_type & 0xc0) {
   21b9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   21b9e:	2b80      	cmp	r3, #128	; 0x80
   21ba0:	d019      	beq.n	21bd6 <net_ipv6_process_pkt+0x2f2>
   21ba2:	2bc0      	cmp	r3, #192	; 0xc0
   21ba4:	d012      	beq.n	21bcc <net_ipv6_process_pkt+0x2e8>
   21ba6:	2b40      	cmp	r3, #64	; 0x40
   21ba8:	d00e      	beq.n	21bc8 <net_ipv6_process_pkt+0x2e4>
	return pkt;
   21baa:	462b      	mov	r3, r5
   21bac:	e01a      	b.n	21be4 <net_ipv6_process_pkt+0x300>
			length += opt_len + 2;
   21bae:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21bb2:	441f      	add	r7, r3
   21bb4:	b2bf      	uxth	r7, r7
   21bb6:	3702      	adds	r7, #2
   21bb8:	b2bf      	uxth	r7, r7
			loc += opt_len + 2;
   21bba:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21bbe:	4413      	add	r3, r2
   21bc0:	3302      	adds	r3, #2
   21bc2:	f8ad 3018 	strh.w	r3, [sp, #24]
   21bc6:	e7c5      	b.n	21b54 <net_ipv6_process_pkt+0x270>
		return NULL;
   21bc8:	2300      	movs	r3, #0
   21bca:	e00b      	b.n	21be4 <net_ipv6_process_pkt+0x300>
	return pkt->frags->data;
   21bcc:	68ab      	ldr	r3, [r5, #8]
   21bce:	689b      	ldr	r3, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   21bd0:	7e1b      	ldrb	r3, [r3, #24]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   21bd2:	2bff      	cmp	r3, #255	; 0xff
   21bd4:	d013      	beq.n	21bfe <net_ipv6_process_pkt+0x31a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   21bd6:	463b      	mov	r3, r7
   21bd8:	2202      	movs	r2, #2
   21bda:	2104      	movs	r1, #4
   21bdc:	4628      	mov	r0, r5
   21bde:	f7fd f9a1 	bl	1ef24 <net_icmpv6_send_error>
		return NULL;
   21be2:	2300      	movs	r3, #0
			if (!check_unknown_option(pkt, opt_type, length)) {
   21be4:	b1b3      	cbz	r3, 21c14 <net_ipv6_process_pkt+0x330>
			length += opt_len + 2;
   21be6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21bea:	441f      	add	r7, r3
   21bec:	b2bf      	uxth	r7, r7
   21bee:	3702      	adds	r7, #2
   21bf0:	b2bf      	uxth	r7, r7
			loc += opt_len;
   21bf2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21bf6:	4413      	add	r3, r2
   21bf8:	f8ad 3018 	strh.w	r3, [sp, #24]
   21bfc:	e7aa      	b.n	21b54 <net_ipv6_process_pkt+0x270>
			return NULL;
   21bfe:	2300      	movs	r3, #0
   21c00:	e7f0      	b.n	21be4 <net_ipv6_process_pkt+0x300>
   21c02:	bf00      	nop
   21c04:	20003038 	.word	0x20003038
		if (!frag && loc == 0xffff) {
   21c08:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21c10:	429a      	cmp	r2, r3
   21c12:	d1b8      	bne.n	21b86 <net_ipv6_process_pkt+0x2a2>
	return NULL;
   21c14:	465c      	mov	r4, fp
	*verdict = NET_DROP;
   21c16:	2302      	movs	r3, #2
   21c18:	e007      	b.n	21c2a <net_ipv6_process_pkt+0x346>
	if (length != len) {
   21c1a:	45b8      	cmp	r8, r7
   21c1c:	d1fa      	bne.n	21c14 <net_ipv6_process_pkt+0x330>
	*pos += length;
   21c1e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   21c22:	441f      	add	r7, r3
   21c24:	f8ad 701c 	strh.w	r7, [sp, #28]
	*verdict = NET_CONTINUE;
   21c28:	2301      	movs	r3, #1
		if (verdict == NET_DROP) {
   21c2a:	2b02      	cmp	r3, #2
   21c2c:	f43f af5e 	beq.w	21aec <net_ipv6_process_pkt+0x208>
		next = next_hdr;
   21c30:	f89d 701f 	ldrb.w	r7, [sp, #31]
   21c34:	e6a9      	b.n	2198a <net_ipv6_process_pkt+0xa6>
		return NULL;
   21c36:	465c      	mov	r4, fp
		*verdict = NET_DROP;
   21c38:	2302      	movs	r3, #2
   21c3a:	e7f6      	b.n	21c2a <net_ipv6_process_pkt+0x346>
   21c3c:	46b9      	mov	r9, r7
   21c3e:	e001      	b.n	21c44 <net_ipv6_process_pkt+0x360>
	u16_t offset, total_len = 0;
   21c40:	2300      	movs	r3, #0
   21c42:	9302      	str	r3, [sp, #8]
	if (total_len > 0) {
   21c44:	9b02      	ldr	r3, [sp, #8]
   21c46:	b10b      	cbz	r3, 21c4c <net_ipv6_process_pkt+0x368>
	pkt->ipv6_ext_len = len;
   21c48:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	switch (next) {
   21c4c:	f1b9 0f11 	cmp.w	r9, #17
   21c50:	d011      	beq.n	21c76 <net_ipv6_process_pkt+0x392>
   21c52:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   21c56:	d004      	beq.n	21c62 <net_ipv6_process_pkt+0x37e>
   21c58:	f1b9 0f06 	cmp.w	r9, #6
   21c5c:	d010      	beq.n	21c80 <net_ipv6_process_pkt+0x39c>
	return NET_DROP;
   21c5e:	2002      	movs	r0, #2
   21c60:	e659      	b.n	21916 <net_ipv6_process_pkt+0x32>
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   21c62:	a906      	add	r1, sp, #24
   21c64:	4628      	mov	r0, r5
   21c66:	f7fc fe9c 	bl	1e9a2 <net_icmpv6_get_hdr>
	return net_icmpv6_input(pkt, icmp_hdr->type, icmp_hdr->code);
   21c6a:	7842      	ldrb	r2, [r0, #1]
   21c6c:	7801      	ldrb	r1, [r0, #0]
   21c6e:	4628      	mov	r0, r5
   21c70:	f7fd fb62 	bl	1f338 <net_icmpv6_input>
		return process_icmpv6_pkt(pkt, hdr);
   21c74:	e64f      	b.n	21916 <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_UDP, pkt);
   21c76:	4629      	mov	r1, r5
   21c78:	2011      	movs	r0, #17
   21c7a:	f003 fbd3 	bl	25424 <net_conn_input>
   21c7e:	e64a      	b.n	21916 <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_TCP, pkt);
   21c80:	4629      	mov	r1, r5
   21c82:	2006      	movs	r0, #6
   21c84:	f003 fbce 	bl	25424 <net_conn_input>
   21c88:	e645      	b.n	21916 <net_ipv6_process_pkt+0x32>
   21c8a:	bf00      	nop

00021c8c <net_ipv6_init>:

void net_ipv6_init(void)
{
   21c8c:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   21c8e:	4806      	ldr	r0, [pc, #24]	; (21ca8 <net_ipv6_init+0x1c>)
   21c90:	f7fc fe0a 	bl	1e8a8 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   21c94:	4805      	ldr	r0, [pc, #20]	; (21cac <net_ipv6_init+0x20>)
   21c96:	f7fc fe07 	bl	1e8a8 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   21c9a:	4805      	ldr	r0, [pc, #20]	; (21cb0 <net_ipv6_init+0x24>)
   21c9c:	f7fc fe04 	bl	1e8a8 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_MLD)
	net_icmpv6_register_handler(&mld_query_input_handler);
   21ca0:	4804      	ldr	r0, [pc, #16]	; (21cb4 <net_ipv6_init+0x28>)
   21ca2:	f7fc fe01 	bl	1e8a8 <net_icmpv6_register_handler>
   21ca6:	bd08      	pop	{r3, pc}
   21ca8:	2000c848 	.word	0x2000c848
   21cac:	2000c430 	.word	0x2000c430
   21cb0:	2000c854 	.word	0x2000c854
   21cb4:	2000c424 	.word	0x2000c424

00021cb8 <uncompress_IPHC_header>:
	}
}
#endif

static inline bool uncompress_IPHC_header(struct net_pkt *pkt)
{
   21cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(CONFIG_NET_6LO_CONTEXT)
	struct net_6lo_context *src = NULL;
	struct net_6lo_context *dst = NULL;
#endif

	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   21cbc:	6883      	ldr	r3, [r0, #8]
   21cbe:	689b      	ldr	r3, [r3, #8]
   21cc0:	f993 3001 	ldrsb.w	r3, [r3, #1]
   21cc4:	2b00      	cmp	r3, #0
   21cc6:	f2c0 831e 	blt.w	22306 <uncompress_IPHC_header+0x64e>
   21cca:	4604      	mov	r4, r0
		NET_WARN("Context based uncompression not enabled");
		return false;
#endif
	}

	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   21ccc:	2164      	movs	r1, #100	; 0x64
   21cce:	f7fb fd11 	bl	1d6f4 <net_pkt_get_frag>
	if (!frag) {
   21cd2:	4607      	mov	r7, r0
   21cd4:	2800      	cmp	r0, #0
   21cd6:	f000 8319 	beq.w	2230c <uncompress_IPHC_header+0x654>
		return false;
	}

	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   21cda:	6886      	ldr	r6, [r0, #8]

	/* Version is always 6 */
	ipv6->vtc = 0x60;
   21cdc:	2360      	movs	r3, #96	; 0x60
   21cde:	7033      	strb	r3, [r6, #0]
	pkt->ip_hdr_len = len;
   21ce0:	2328      	movs	r3, #40	; 0x28
   21ce2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   21ce6:	68a3      	ldr	r3, [r4, #8]
   21ce8:	689a      	ldr	r2, [r3, #8]
   21cea:	7813      	ldrb	r3, [r2, #0]
   21cec:	f003 0318 	and.w	r3, r3, #24
   21cf0:	2b18      	cmp	r3, #24
   21cf2:	d863      	bhi.n	21dbc <uncompress_IPHC_header+0x104>
   21cf4:	e8df f003 	tbb	[pc, r3]
   21cf8:	6262620d 	.word	0x6262620d
   21cfc:	62626262 	.word	0x62626262
   21d00:	6262623c 	.word	0x6262623c
   21d04:	62626262 	.word	0x62626262
   21d08:	6262624c 	.word	0x6262624c
   21d0c:	62626262 	.word	0x62626262
   21d10:	5c          	.byte	0x5c
   21d11:	00          	.byte	0x00
		tcl = CIPHC[offset++];
   21d12:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   21d14:	0993      	lsrs	r3, r2, #6
   21d16:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   21d1a:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   21d1c:	7832      	ldrb	r2, [r6, #0]
   21d1e:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   21d22:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   21d24:	68a2      	ldr	r2, [r4, #8]
   21d26:	6892      	ldr	r2, [r2, #8]
   21d28:	f992 2003 	ldrsb.w	r2, [r2, #3]
   21d2c:	f002 020f 	and.w	r2, r2, #15
   21d30:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
   21d34:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   21d36:	68a3      	ldr	r3, [r4, #8]
   21d38:	6899      	ldr	r1, [r3, #8]
   21d3a:	2202      	movs	r2, #2
   21d3c:	3104      	adds	r1, #4
   21d3e:	18b0      	adds	r0, r6, r2
   21d40:	f7de fabe 	bl	2c0 <memcpy>
		offset += 2;
   21d44:	2506      	movs	r5, #6
	net_pkt_set_ip_hdr_len(pkt, NET_IPV6H_LEN);

	/* Uncompress Traffic class and Flow label */
	offset = uncompress_tfl(pkt, ipv6, offset);

	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   21d46:	68a3      	ldr	r3, [r4, #8]
   21d48:	689b      	ldr	r3, [r3, #8]
   21d4a:	781a      	ldrb	r2, [r3, #0]
   21d4c:	f012 0f04 	tst.w	r2, #4
   21d50:	d103      	bne.n	21d5a <uncompress_IPHC_header+0xa2>
		ipv6->nexthdr = CIPHC[offset];
   21d52:	5d5b      	ldrb	r3, [r3, r5]
   21d54:	71b3      	strb	r3, [r6, #6]
		offset++;
   21d56:	3501      	adds	r5, #1
   21d58:	b2ed      	uxtb	r5, r5
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   21d5a:	68a3      	ldr	r3, [r4, #8]
   21d5c:	689a      	ldr	r2, [r3, #8]
   21d5e:	7813      	ldrb	r3, [r2, #0]
   21d60:	f003 0303 	and.w	r3, r3, #3
   21d64:	2b03      	cmp	r3, #3
   21d66:	d82f      	bhi.n	21dc8 <uncompress_IPHC_header+0x110>
   21d68:	e8df f003 	tbb	[pc, r3]
   21d6c:	4f4c492a 	.word	0x4f4c492a
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   21d70:	7893      	ldrb	r3, [r2, #2]
   21d72:	099a      	lsrs	r2, r3, #6
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   21d74:	f003 030f 	and.w	r3, r3, #15
   21d78:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   21d7c:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   21d7e:	68a3      	ldr	r3, [r4, #8]
   21d80:	6899      	ldr	r1, [r3, #8]
   21d82:	2202      	movs	r2, #2
   21d84:	3103      	adds	r1, #3
   21d86:	18b0      	adds	r0, r6, r2
   21d88:	f7de fa9a 	bl	2c0 <memcpy>
		offset += 2;
   21d8c:	2505      	movs	r5, #5
   21d8e:	e7da      	b.n	21d46 <uncompress_IPHC_header+0x8e>
		tcl = CIPHC[offset];
   21d90:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   21d92:	0993      	lsrs	r3, r2, #6
   21d94:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   21d98:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   21d9a:	7832      	ldrb	r2, [r6, #0]
   21d9c:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   21da0:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = (tcl & 0x0F) << 4;
   21da2:	011b      	lsls	r3, r3, #4
   21da4:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21da6:	2300      	movs	r3, #0
   21da8:	70b3      	strb	r3, [r6, #2]
   21daa:	70f3      	strb	r3, [r6, #3]
		offset++;
   21dac:	2503      	movs	r5, #3
   21dae:	e7ca      	b.n	21d46 <uncompress_IPHC_header+0x8e>
		ipv6->tcflow = 0;
   21db0:	2300      	movs	r3, #0
   21db2:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21db4:	70b3      	strb	r3, [r6, #2]
   21db6:	70f3      	strb	r3, [r6, #3]
   21db8:	2502      	movs	r5, #2
   21dba:	e7c4      	b.n	21d46 <uncompress_IPHC_header+0x8e>
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   21dbc:	2502      	movs	r5, #2
   21dbe:	e7c2      	b.n	21d46 <uncompress_IPHC_header+0x8e>
		ipv6->hop_limit = CIPHC[offset++];
   21dc0:	1c6b      	adds	r3, r5, #1
   21dc2:	5d52      	ldrb	r2, [r2, r5]
   21dc4:	71f2      	strb	r2, [r6, #7]
   21dc6:	b2dd      	uxtb	r5, r3

	/* Uncompress Hoplimit */
	offset = uncompress_hoplimit(pkt, ipv6, offset);

	/* First set to zero and copy relevant bits */
	memset(&ipv6->src.s6_addr[0], 0, 16);
   21dc8:	2210      	movs	r2, #16
   21dca:	2100      	movs	r1, #0
   21dcc:	f106 0008 	add.w	r0, r6, #8
   21dd0:	f008 fd72 	bl	2a8b8 <memset>
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   21dd4:	2210      	movs	r2, #16
   21dd6:	2100      	movs	r1, #0
   21dd8:	f106 0018 	add.w	r0, r6, #24
   21ddc:	f008 fd6c 	bl	2a8b8 <memset>

	/* Uncompress Source Address */
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   21de0:	68a3      	ldr	r3, [r4, #8]
   21de2:	689b      	ldr	r3, [r3, #8]
   21de4:	785b      	ldrb	r3, [r3, #1]
   21de6:	f013 0f40 	tst.w	r3, #64	; 0x40
   21dea:	d011      	beq.n	21e10 <uncompress_IPHC_header+0x158>
		NET_DBG("SAC_1");

		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   21dec:	f013 0f30 	tst.w	r3, #48	; 0x30
   21df0:	d05e      	beq.n	21eb0 <uncompress_IPHC_header+0x1f8>
	}

	return true;

fail:
	net_pkt_frag_unref(frag);
   21df2:	4638      	mov	r0, r7
   21df4:	f7fb fccb 	bl	1d78e <net_pkt_frag_unref>
	return false;
   21df8:	2000      	movs	r0, #0
   21dfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ipv6->hop_limit = 1;
   21dfe:	2301      	movs	r3, #1
   21e00:	71f3      	strb	r3, [r6, #7]
   21e02:	e7e1      	b.n	21dc8 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 64;
   21e04:	2340      	movs	r3, #64	; 0x40
   21e06:	71f3      	strb	r3, [r6, #7]
   21e08:	e7de      	b.n	21dc8 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 255;
   21e0a:	23ff      	movs	r3, #255	; 0xff
   21e0c:	71f3      	strb	r3, [r6, #7]
   21e0e:	e7db      	b.n	21dc8 <uncompress_IPHC_header+0x110>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   21e10:	68a3      	ldr	r3, [r4, #8]
   21e12:	6899      	ldr	r1, [r3, #8]
   21e14:	784b      	ldrb	r3, [r1, #1]
   21e16:	f003 0330 	and.w	r3, r3, #48	; 0x30
   21e1a:	2b10      	cmp	r3, #16
   21e1c:	d059      	beq.n	21ed2 <uncompress_IPHC_header+0x21a>
   21e1e:	d93e      	bls.n	21e9e <uncompress_IPHC_header+0x1e6>
   21e20:	2b20      	cmp	r3, #32
   21e22:	d065      	beq.n	21ef0 <uncompress_IPHC_header+0x238>
   21e24:	2b30      	cmp	r3, #48	; 0x30
   21e26:	d143      	bne.n	21eb0 <uncompress_IPHC_header+0x1f8>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_ll_src(pkt));
   21e28:	f106 0808 	add.w	r8, r6, #8
	return &pkt->lladdr_src;
   21e2c:	f104 0920 	add.w	r9, r4, #32
	addr->s6_addr[0] = 0xfe;
   21e30:	23fe      	movs	r3, #254	; 0xfe
   21e32:	7233      	strb	r3, [r6, #8]
	addr->s6_addr[1] = 0x80;
   21e34:	2380      	movs	r3, #128	; 0x80
   21e36:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   21e3a:	2300      	movs	r3, #0
   21e3c:	f888 3002 	strb.w	r3, [r8, #2]
   21e40:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   21e44:	f888 3004 	strb.w	r3, [r8, #4]
   21e48:	f888 3005 	strb.w	r3, [r8, #5]
   21e4c:	f888 3006 	strb.w	r3, [r8, #6]
   21e50:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   21e54:	f899 2004 	ldrb.w	r2, [r9, #4]
   21e58:	2a06      	cmp	r2, #6
   21e5a:	d05b      	beq.n	21f14 <uncompress_IPHC_header+0x25c>
   21e5c:	2a08      	cmp	r2, #8
   21e5e:	f000 8082 	beq.w	21f66 <uncompress_IPHC_header+0x2ae>
   21e62:	2a02      	cmp	r2, #2
   21e64:	d124      	bne.n	21eb0 <uncompress_IPHC_header+0x1f8>
		if (lladdr->type == NET_LINK_IEEE802154) {
   21e66:	f899 3005 	ldrb.w	r3, [r9, #5]
   21e6a:	2b01      	cmp	r3, #1
   21e6c:	d120      	bne.n	21eb0 <uncompress_IPHC_header+0x1f8>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   21e6e:	2300      	movs	r3, #0
   21e70:	f888 3008 	strb.w	r3, [r8, #8]
   21e74:	f888 3009 	strb.w	r3, [r8, #9]
   21e78:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   21e7c:	22ff      	movs	r2, #255	; 0xff
   21e7e:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   21e82:	22fe      	movs	r2, #254	; 0xfe
   21e84:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   21e88:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   21e8c:	6a23      	ldr	r3, [r4, #32]
   21e8e:	781b      	ldrb	r3, [r3, #0]
   21e90:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   21e94:	6a23      	ldr	r3, [r4, #32]
   21e96:	785b      	ldrb	r3, [r3, #1]
   21e98:	f888 300f 	strb.w	r3, [r8, #15]
   21e9c:	e008      	b.n	21eb0 <uncompress_IPHC_header+0x1f8>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   21e9e:	b93b      	cbnz	r3, 21eb0 <uncompress_IPHC_header+0x1f8>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   21ea0:	2210      	movs	r2, #16
   21ea2:	4429      	add	r1, r5
   21ea4:	f106 0008 	add.w	r0, r6, #8
   21ea8:	f7de fa0a 	bl	2c0 <memcpy>
		offset += 16;
   21eac:	3510      	adds	r5, #16
   21eae:	b2ed      	uxtb	r5, r5
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   21eb0:	68a3      	ldr	r3, [r4, #8]
   21eb2:	6899      	ldr	r1, [r3, #8]
   21eb4:	784b      	ldrb	r3, [r1, #1]
   21eb6:	f013 0f08 	tst.w	r3, #8
   21eba:	d160      	bne.n	21f7e <uncompress_IPHC_header+0x2c6>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   21ebc:	f003 0303 	and.w	r3, r3, #3
   21ec0:	2b03      	cmp	r3, #3
   21ec2:	f200 80ad 	bhi.w	22020 <uncompress_IPHC_header+0x368>
   21ec6:	e8df f013 	tbh	[pc, r3, lsl #1]
   21eca:	00a3      	.short	0x00a3
   21ecc:	00e500d6 	.word	0x00e500d6
   21ed0:	00f9      	.short	0x00f9
		ipv6->src.s6_addr[0] = 0xFE;
   21ed2:	23fe      	movs	r3, #254	; 0xfe
   21ed4:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   21ed6:	2380      	movs	r3, #128	; 0x80
   21ed8:	7273      	strb	r3, [r6, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   21eda:	68a3      	ldr	r3, [r4, #8]
   21edc:	6899      	ldr	r1, [r3, #8]
   21ede:	2208      	movs	r2, #8
   21ee0:	4429      	add	r1, r5
   21ee2:	f106 0010 	add.w	r0, r6, #16
   21ee6:	f7de f9eb 	bl	2c0 <memcpy>
		offset += 8;
   21eea:	3508      	adds	r5, #8
   21eec:	b2ed      	uxtb	r5, r5
   21eee:	e7df      	b.n	21eb0 <uncompress_IPHC_header+0x1f8>
		ipv6->src.s6_addr[0] = 0xFE;
   21ef0:	23fe      	movs	r3, #254	; 0xfe
   21ef2:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   21ef4:	2280      	movs	r2, #128	; 0x80
   21ef6:	7272      	strb	r2, [r6, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   21ef8:	22ff      	movs	r2, #255	; 0xff
   21efa:	74f2      	strb	r2, [r6, #19]
		ipv6->src.s6_addr[12] = 0xFE;
   21efc:	7533      	strb	r3, [r6, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   21efe:	68a3      	ldr	r3, [r4, #8]
   21f00:	6899      	ldr	r1, [r3, #8]
   21f02:	2202      	movs	r2, #2
   21f04:	4429      	add	r1, r5
   21f06:	f106 0016 	add.w	r0, r6, #22
   21f0a:	f7de f9d9 	bl	2c0 <memcpy>
		offset += 2;
   21f0e:	3502      	adds	r5, #2
   21f10:	b2ed      	uxtb	r5, r5
   21f12:	e7cd      	b.n	21eb0 <uncompress_IPHC_header+0x1f8>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   21f14:	2203      	movs	r2, #3
   21f16:	6a21      	ldr	r1, [r4, #32]
   21f18:	f108 0008 	add.w	r0, r8, #8
   21f1c:	f7de f9d0 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   21f20:	23ff      	movs	r3, #255	; 0xff
   21f22:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   21f26:	23fe      	movs	r3, #254	; 0xfe
   21f28:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   21f2c:	6a21      	ldr	r1, [r4, #32]
   21f2e:	2203      	movs	r2, #3
   21f30:	4411      	add	r1, r2
   21f32:	f108 000d 	add.w	r0, r8, #13
   21f36:	f7de f9c3 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   21f3a:	f899 3005 	ldrb.w	r3, [r9, #5]
   21f3e:	2b02      	cmp	r3, #2
   21f40:	d00a      	beq.n	21f58 <uncompress_IPHC_header+0x2a0>
		if (lladdr->type == NET_LINK_ETHERNET) {
   21f42:	f899 3005 	ldrb.w	r3, [r9, #5]
   21f46:	2b03      	cmp	r3, #3
   21f48:	d1b2      	bne.n	21eb0 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   21f4a:	f898 3008 	ldrb.w	r3, [r8, #8]
   21f4e:	f083 0302 	eor.w	r3, r3, #2
   21f52:	f888 3008 	strb.w	r3, [r8, #8]
   21f56:	e7ab      	b.n	21eb0 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   21f58:	f898 3008 	ldrb.w	r3, [r8, #8]
   21f5c:	f083 0302 	eor.w	r3, r3, #2
   21f60:	f888 3008 	strb.w	r3, [r8, #8]
   21f64:	e7ed      	b.n	21f42 <uncompress_IPHC_header+0x28a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   21f66:	6a21      	ldr	r1, [r4, #32]
   21f68:	f108 0008 	add.w	r0, r8, #8
   21f6c:	f7de f9a8 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   21f70:	f898 3008 	ldrb.w	r3, [r8, #8]
   21f74:	f083 0302 	eor.w	r3, r3, #2
   21f78:	f888 3008 	strb.w	r3, [r8, #8]
   21f7c:	e798      	b.n	21eb0 <uncompress_IPHC_header+0x1f8>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   21f7e:	784b      	ldrb	r3, [r1, #1]
   21f80:	f013 0f04 	tst.w	r3, #4
   21f84:	d142      	bne.n	2200c <uncompress_IPHC_header+0x354>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   21f86:	f003 0303 	and.w	r3, r3, #3
   21f8a:	2b03      	cmp	r3, #3
   21f8c:	d848      	bhi.n	22020 <uncompress_IPHC_header+0x368>
   21f8e:	e8df f003 	tbb	[pc, r3]
   21f92:	0b02      	.short	0x0b02
   21f94:	311e      	.short	0x311e
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   21f96:	2210      	movs	r2, #16
   21f98:	4429      	add	r1, r5
   21f9a:	f106 0018 	add.w	r0, r6, #24
   21f9e:	f7de f98f 	bl	2c0 <memcpy>
		offset += 16;
   21fa2:	3510      	adds	r5, #16
   21fa4:	b2ed      	uxtb	r5, r5
   21fa6:	e03b      	b.n	22020 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   21fa8:	23ff      	movs	r3, #255	; 0xff
   21faa:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   21fac:	68a3      	ldr	r3, [r4, #8]
   21fae:	689b      	ldr	r3, [r3, #8]
   21fb0:	1c69      	adds	r1, r5, #1
   21fb2:	5d5b      	ldrb	r3, [r3, r5]
   21fb4:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   21fb6:	68a3      	ldr	r3, [r4, #8]
   21fb8:	689b      	ldr	r3, [r3, #8]
   21fba:	2205      	movs	r2, #5
   21fbc:	fa53 f181 	uxtab	r1, r3, r1
   21fc0:	f106 0023 	add.w	r0, r6, #35	; 0x23
   21fc4:	f7de f97c 	bl	2c0 <memcpy>
		offset += 5;
   21fc8:	3506      	adds	r5, #6
   21fca:	b2ed      	uxtb	r5, r5
   21fcc:	e028      	b.n	22020 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   21fce:	23ff      	movs	r3, #255	; 0xff
   21fd0:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   21fd2:	68a3      	ldr	r3, [r4, #8]
   21fd4:	689b      	ldr	r3, [r3, #8]
   21fd6:	1c69      	adds	r1, r5, #1
   21fd8:	5d5b      	ldrb	r3, [r3, r5]
   21fda:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   21fdc:	68a3      	ldr	r3, [r4, #8]
   21fde:	689b      	ldr	r3, [r3, #8]
   21fe0:	2203      	movs	r2, #3
   21fe2:	fa53 f181 	uxtab	r1, r3, r1
   21fe6:	f106 0025 	add.w	r0, r6, #37	; 0x25
   21fea:	f7de f969 	bl	2c0 <memcpy>
		offset += 3;
   21fee:	3504      	adds	r5, #4
   21ff0:	b2ed      	uxtb	r5, r5
   21ff2:	e015      	b.n	22020 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   21ff4:	23ff      	movs	r3, #255	; 0xff
   21ff6:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   21ff8:	2302      	movs	r3, #2
   21ffa:	7673      	strb	r3, [r6, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   21ffc:	68a3      	ldr	r3, [r4, #8]
   21ffe:	689a      	ldr	r2, [r3, #8]
   22000:	1c6b      	adds	r3, r5, #1
   22002:	5d52      	ldrb	r2, [r2, r5]
   22004:	f886 2027 	strb.w	r2, [r6, #39]	; 0x27
   22008:	b2dd      	uxtb	r5, r3
   2200a:	e009      	b.n	22020 <uncompress_IPHC_header+0x368>
		return 0;
   2200c:	2500      	movs	r5, #0
   2200e:	e007      	b.n	22020 <uncompress_IPHC_header+0x368>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   22010:	2210      	movs	r2, #16
   22012:	4429      	add	r1, r5
   22014:	f106 0018 	add.w	r0, r6, #24
   22018:	f7de f952 	bl	2c0 <memcpy>
		offset += 16;
   2201c:	3510      	adds	r5, #16
   2201e:	b2ed      	uxtb	r5, r5
	net_buf_add(frag, NET_IPV6H_LEN);
   22020:	f107 0a08 	add.w	sl, r7, #8
   22024:	2128      	movs	r1, #40	; 0x28
   22026:	4650      	mov	r0, sl
   22028:	f7f8 fe94 	bl	1ad54 <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   2202c:	68a3      	ldr	r3, [r4, #8]
   2202e:	689b      	ldr	r3, [r3, #8]
   22030:	781a      	ldrb	r2, [r3, #0]
   22032:	f012 0f04 	tst.w	r2, #4
   22036:	f000 8114 	beq.w	22262 <uncompress_IPHC_header+0x5aa>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   2203a:	5d5b      	ldrb	r3, [r3, r5]
   2203c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   22040:	2bf0      	cmp	r3, #240	; 0xf0
   22042:	f47f aed6 	bne.w	21df2 <uncompress_IPHC_header+0x13a>
	ipv6->nexthdr = IPPROTO_UDP;
   22046:	2311      	movs	r3, #17
   22048:	71b3      	strb	r3, [r6, #6]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   2204a:	f8d7 b008 	ldr.w	fp, [r7, #8]
   2204e:	f10b 0928 	add.w	r9, fp, #40	; 0x28
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   22052:	68a3      	ldr	r3, [r4, #8]
   22054:	6898      	ldr	r0, [r3, #8]
   22056:	f810 8005 	ldrb.w	r8, [r0, r5]
   2205a:	f008 0808 	and.w	r8, r8, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   2205e:	1c69      	adds	r1, r5, #1
   22060:	b2c9      	uxtb	r1, r1
   22062:	5d43      	ldrb	r3, [r0, r5]
   22064:	f003 0303 	and.w	r3, r3, #3
   22068:	2b03      	cmp	r3, #3
   2206a:	f200 80ed 	bhi.w	22248 <uncompress_IPHC_header+0x590>
   2206e:	e8df f003 	tbb	[pc, r3]
   22072:	ae95      	.short	0xae95
   22074:	d3c0      	.short	0xd3c0
		ipv6->dst.s6_addr[0] = 0xFE;
   22076:	23fe      	movs	r3, #254	; 0xfe
   22078:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   2207a:	2380      	movs	r3, #128	; 0x80
   2207c:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   2207e:	68a3      	ldr	r3, [r4, #8]
   22080:	6899      	ldr	r1, [r3, #8]
   22082:	2208      	movs	r2, #8
   22084:	4429      	add	r1, r5
   22086:	f106 0020 	add.w	r0, r6, #32
   2208a:	f7de f919 	bl	2c0 <memcpy>
		offset += 8;
   2208e:	3508      	adds	r5, #8
   22090:	b2ed      	uxtb	r5, r5
   22092:	e7c5      	b.n	22020 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFE;
   22094:	23fe      	movs	r3, #254	; 0xfe
   22096:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   22098:	2280      	movs	r2, #128	; 0x80
   2209a:	7672      	strb	r2, [r6, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   2209c:	22ff      	movs	r2, #255	; 0xff
   2209e:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
		ipv6->dst.s6_addr[12] = 0xFE;
   220a2:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   220a6:	68a3      	ldr	r3, [r4, #8]
   220a8:	6899      	ldr	r1, [r3, #8]
   220aa:	2202      	movs	r2, #2
   220ac:	4429      	add	r1, r5
   220ae:	f106 0026 	add.w	r0, r6, #38	; 0x26
   220b2:	f7de f905 	bl	2c0 <memcpy>
		offset += 2;
   220b6:	3502      	adds	r5, #2
   220b8:	b2ed      	uxtb	r5, r5
   220ba:	e7b1      	b.n	22020 <uncompress_IPHC_header+0x368>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_ll_dst(pkt));
   220bc:	f106 0818 	add.w	r8, r6, #24
	return &pkt->lladdr_dst;
   220c0:	f104 0928 	add.w	r9, r4, #40	; 0x28
	addr->s6_addr[0] = 0xfe;
   220c4:	23fe      	movs	r3, #254	; 0xfe
   220c6:	7633      	strb	r3, [r6, #24]
	addr->s6_addr[1] = 0x80;
   220c8:	2380      	movs	r3, #128	; 0x80
   220ca:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   220ce:	2300      	movs	r3, #0
   220d0:	f888 3002 	strb.w	r3, [r8, #2]
   220d4:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   220d8:	f888 3004 	strb.w	r3, [r8, #4]
   220dc:	f888 3005 	strb.w	r3, [r8, #5]
   220e0:	f888 3006 	strb.w	r3, [r8, #6]
   220e4:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   220e8:	f899 2004 	ldrb.w	r2, [r9, #4]
   220ec:	2a06      	cmp	r2, #6
   220ee:	d01f      	beq.n	22130 <uncompress_IPHC_header+0x478>
   220f0:	2a08      	cmp	r2, #8
   220f2:	d047      	beq.n	22184 <uncompress_IPHC_header+0x4cc>
   220f4:	2a02      	cmp	r2, #2
   220f6:	d193      	bne.n	22020 <uncompress_IPHC_header+0x368>
		if (lladdr->type == NET_LINK_IEEE802154) {
   220f8:	f899 3005 	ldrb.w	r3, [r9, #5]
   220fc:	2b01      	cmp	r3, #1
   220fe:	d18f      	bne.n	22020 <uncompress_IPHC_header+0x368>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   22100:	2300      	movs	r3, #0
   22102:	f888 3008 	strb.w	r3, [r8, #8]
   22106:	f888 3009 	strb.w	r3, [r8, #9]
   2210a:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   2210e:	22ff      	movs	r2, #255	; 0xff
   22110:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   22114:	22fe      	movs	r2, #254	; 0xfe
   22116:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   2211a:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   2211e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22120:	781b      	ldrb	r3, [r3, #0]
   22122:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   22126:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22128:	785b      	ldrb	r3, [r3, #1]
   2212a:	f888 300f 	strb.w	r3, [r8, #15]
   2212e:	e777      	b.n	22020 <uncompress_IPHC_header+0x368>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   22130:	2203      	movs	r2, #3
   22132:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22134:	f108 0008 	add.w	r0, r8, #8
   22138:	f7de f8c2 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   2213c:	23ff      	movs	r3, #255	; 0xff
   2213e:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   22142:	23fe      	movs	r3, #254	; 0xfe
   22144:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   22148:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2214a:	2203      	movs	r2, #3
   2214c:	4411      	add	r1, r2
   2214e:	f108 000d 	add.w	r0, r8, #13
   22152:	f7de f8b5 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   22156:	f899 3005 	ldrb.w	r3, [r9, #5]
   2215a:	2b02      	cmp	r3, #2
   2215c:	d00b      	beq.n	22176 <uncompress_IPHC_header+0x4be>
		if (lladdr->type == NET_LINK_ETHERNET) {
   2215e:	f899 3005 	ldrb.w	r3, [r9, #5]
   22162:	2b03      	cmp	r3, #3
   22164:	f47f af5c 	bne.w	22020 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   22168:	f898 3008 	ldrb.w	r3, [r8, #8]
   2216c:	f083 0302 	eor.w	r3, r3, #2
   22170:	f888 3008 	strb.w	r3, [r8, #8]
   22174:	e754      	b.n	22020 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   22176:	f898 3008 	ldrb.w	r3, [r8, #8]
   2217a:	f083 0302 	eor.w	r3, r3, #2
   2217e:	f888 3008 	strb.w	r3, [r8, #8]
   22182:	e7ec      	b.n	2215e <uncompress_IPHC_header+0x4a6>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   22184:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22186:	f108 0008 	add.w	r0, r8, #8
   2218a:	f7de f899 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   2218e:	f898 3008 	ldrb.w	r3, [r8, #8]
   22192:	f083 0302 	eor.w	r3, r3, #2
   22196:	f888 3008 	strb.w	r3, [r8, #8]
   2219a:	e741      	b.n	22020 <uncompress_IPHC_header+0x368>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   2219c:	2202      	movs	r2, #2
   2219e:	4401      	add	r1, r0
   221a0:	4648      	mov	r0, r9
   221a2:	f7de f88d 	bl	2c0 <memcpy>
		offset += 2;
   221a6:	1ce9      	adds	r1, r5, #3
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   221a8:	68a3      	ldr	r3, [r4, #8]
   221aa:	689b      	ldr	r3, [r3, #8]
   221ac:	2202      	movs	r2, #2
   221ae:	fa53 f181 	uxtab	r1, r3, r1
   221b2:	eb09 0002 	add.w	r0, r9, r2
   221b6:	f7de f883 	bl	2c0 <memcpy>
		offset += 2;
   221ba:	3505      	adds	r5, #5
   221bc:	b2ed      	uxtb	r5, r5
	if (!chksum) {
   221be:	f1b8 0f00 	cmp.w	r8, #0
   221c2:	d043      	beq.n	2224c <uncompress_IPHC_header+0x594>
	net_buf_add(frag, NET_UDPH_LEN);
   221c4:	2108      	movs	r1, #8
   221c6:	4650      	mov	r0, sl
   221c8:	f7f8 fdc4 	bl	1ad54 <net_buf_simple_add>
   221cc:	e04c      	b.n	22268 <uncompress_IPHC_header+0x5b0>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   221ce:	2202      	movs	r2, #2
   221d0:	4401      	add	r1, r0
   221d2:	4648      	mov	r0, r9
   221d4:	f7de f874 	bl	2c0 <memcpy>
		offset += 2;
   221d8:	1ceb      	adds	r3, r5, #3
   221da:	b2db      	uxtb	r3, r3
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   221dc:	68a2      	ldr	r2, [r4, #8]
   221de:	6892      	ldr	r2, [r2, #8]
   221e0:	5cd3      	ldrb	r3, [r2, r3]
   221e2:	021b      	lsls	r3, r3, #8
   221e4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   221e8:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   221ec:	3504      	adds	r5, #4
   221ee:	b2ed      	uxtb	r5, r5
   221f0:	e7e5      	b.n	221be <uncompress_IPHC_header+0x506>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   221f2:	5c43      	ldrb	r3, [r0, r1]
   221f4:	021b      	lsls	r3, r3, #8
   221f6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   221fa:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		offset++;
   221fe:	1ca9      	adds	r1, r5, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   22200:	68a3      	ldr	r3, [r4, #8]
   22202:	689b      	ldr	r3, [r3, #8]
   22204:	2202      	movs	r2, #2
   22206:	fa53 f181 	uxtab	r1, r3, r1
   2220a:	eb09 0002 	add.w	r0, r9, r2
   2220e:	f7de f857 	bl	2c0 <memcpy>
		offset += 2;
   22212:	3504      	adds	r5, #4
   22214:	b2ed      	uxtb	r5, r5
   22216:	e7d2      	b.n	221be <uncompress_IPHC_header+0x506>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   22218:	5c43      	ldrb	r3, [r0, r1]
   2221a:	091b      	lsrs	r3, r3, #4
   2221c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
   22220:	021b      	lsls	r3, r3, #8
   22222:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   22226:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   2222a:	68a3      	ldr	r3, [r4, #8]
   2222c:	689b      	ldr	r3, [r3, #8]
   2222e:	5c5b      	ldrb	r3, [r3, r1]
   22230:	021b      	lsls	r3, r3, #8
   22232:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   22236:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
   2223a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   2223e:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   22242:	3502      	adds	r5, #2
   22244:	b2ed      	uxtb	r5, r5
   22246:	e7ba      	b.n	221be <uncompress_IPHC_header+0x506>
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   22248:	460d      	mov	r5, r1
   2224a:	e7b8      	b.n	221be <uncompress_IPHC_header+0x506>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   2224c:	68a3      	ldr	r3, [r4, #8]
   2224e:	6899      	ldr	r1, [r3, #8]
   22250:	2202      	movs	r2, #2
   22252:	4429      	add	r1, r5
   22254:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   22258:	f7de f832 	bl	2c0 <memcpy>
		offset += 2;
   2225c:	3502      	adds	r5, #2
   2225e:	b2ed      	uxtb	r5, r5
   22260:	e7b0      	b.n	221c4 <uncompress_IPHC_header+0x50c>
	u8_t chksum = 0;
   22262:	f04f 0800 	mov.w	r8, #0
	struct net_udp_hdr *udp = NULL;
   22266:	46c1      	mov	r9, r8
	if (pkt->frags->len < offset) {
   22268:	68a3      	ldr	r3, [r4, #8]
   2226a:	899a      	ldrh	r2, [r3, #12]
   2226c:	fa1f fa85 	uxth.w	sl, r5
   22270:	4552      	cmp	r2, sl
   22272:	f4ff adbe 	bcc.w	21df2 <uncompress_IPHC_header+0x13a>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   22276:	6898      	ldr	r0, [r3, #8]
   22278:	1b52      	subs	r2, r2, r5
   2227a:	1941      	adds	r1, r0, r5
   2227c:	f008 fab8 	bl	2a7f0 <memmove>
	pkt->frags->len -= offset;
   22280:	68a2      	ldr	r2, [r4, #8]
   22282:	8993      	ldrh	r3, [r2, #12]
   22284:	eba3 0a0a 	sub.w	sl, r3, sl
   22288:	f8a2 a00c 	strh.w	sl, [r2, #12]
	return pkt->ll_reserve;
   2228c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	if (net_pkt_ll_reserve(pkt)) {
   22290:	b94a      	cbnz	r2, 222a6 <uncompress_IPHC_header+0x5ee>
	net_pkt_frag_insert(pkt, frag);
   22292:	4639      	mov	r1, r7
   22294:	4620      	mov	r0, r4
   22296:	f7fb fab7 	bl	1d808 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   2229a:	4620      	mov	r0, r4
   2229c:	f7fb fb6e 	bl	1d97c <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   222a0:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   222a2:	2200      	movs	r2, #0
   222a4:	e00b      	b.n	222be <uncompress_IPHC_header+0x606>
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   222a6:	68bb      	ldr	r3, [r7, #8]
   222a8:	4250      	negs	r0, r2
	return pkt->frags->data;
   222aa:	68a1      	ldr	r1, [r4, #8]
   222ac:	6889      	ldr	r1, [r1, #8]
   222ae:	4401      	add	r1, r0
   222b0:	4418      	add	r0, r3
   222b2:	f7de f805 	bl	2c0 <memcpy>
   222b6:	e7ec      	b.n	22292 <uncompress_IPHC_header+0x5da>
		bytes += buf->len;
   222b8:	8999      	ldrh	r1, [r3, #12]
   222ba:	440a      	add	r2, r1
		buf = buf->frags;
   222bc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   222be:	2b00      	cmp	r3, #0
   222c0:	d1fa      	bne.n	222b8 <uncompress_IPHC_header+0x600>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   222c2:	b293      	uxth	r3, r2
   222c4:	3b28      	subs	r3, #40	; 0x28
   222c6:	b29b      	uxth	r3, r3
	ipv6->len[0] = len >> 8;
   222c8:	0a1a      	lsrs	r2, r3, #8
   222ca:	7132      	strb	r2, [r6, #4]
	ipv6->len[1] = (u8_t)len;
   222cc:	7173      	strb	r3, [r6, #5]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   222ce:	79b1      	ldrb	r1, [r6, #6]
   222d0:	2911      	cmp	r1, #17
   222d2:	d002      	beq.n	222da <uncompress_IPHC_header+0x622>
	return true;
   222d4:	2001      	movs	r0, #1
   222d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   222da:	f1b9 0f00 	cmp.w	r9, #0
   222de:	d018      	beq.n	22312 <uncompress_IPHC_header+0x65a>
		udp->len = htons(len);
   222e0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   222e4:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   222e8:	f1b8 0f00 	cmp.w	r8, #0
   222ec:	d102      	bne.n	222f4 <uncompress_IPHC_header+0x63c>
	return true;
   222ee:	2001      	movs	r0, #1
}
   222f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_calc_chksum(pkt, IPPROTO_UDP);
   222f4:	4620      	mov	r0, r4
   222f6:	f7fc f8ba 	bl	1e46e <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   222fa:	43c0      	mvns	r0, r0
   222fc:	f8a9 0006 	strh.w	r0, [r9, #6]
	return true;
   22300:	2001      	movs	r0, #1
   22302:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   22306:	2000      	movs	r0, #0
   22308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   2230c:	2000      	movs	r0, #0
   2230e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return true;
   22312:	2001      	movs	r0, #1
   22314:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022318 <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   22318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2231c:	b085      	sub	sp, #20
   2231e:	4604      	mov	r4, r0
   22320:	4617      	mov	r7, r2
	if (iphc) {
   22322:	460d      	mov	r5, r1
   22324:	b9f9      	cbnz	r1, 22366 <net_6lo_compress+0x4e>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   22326:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2232a:	f7fb f9e3 	bl	1d6f4 <net_pkt_get_frag>
	if (!frag) {
   2232e:	4606      	mov	r6, r0
   22330:	2800      	cmp	r0, #0
   22332:	f000 8438 	beq.w	22ba6 <net_6lo_compress+0x88e>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   22336:	f850 3f08 	ldr.w	r3, [r0, #8]!
   2233a:	2241      	movs	r2, #65	; 0x41
   2233c:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   2233e:	2101      	movs	r1, #1
   22340:	f7f8 fd08 	bl	1ad54 <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   22344:	4631      	mov	r1, r6
   22346:	4620      	mov	r0, r4
   22348:	f7fb fa5e 	bl	1d808 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   2234c:	4620      	mov	r0, r4
   2234e:	f7fb fb15 	bl	1d97c <net_pkt_compact>
	if (fragment) {
   22352:	2f00      	cmp	r7, #0
   22354:	f000 842a 	beq.w	22bac <net_6lo_compress+0x894>
		return fragment(pkt, -1);
   22358:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2235c:	4620      	mov	r0, r4
   2235e:	47b8      	blx	r7
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   22360:	b005      	add	sp, #20
   22362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22366:	6883      	ldr	r3, [r0, #8]
   22368:	689e      	ldr	r6, [r3, #8]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   2236a:	899b      	ldrh	r3, [r3, #12]
   2236c:	2b27      	cmp	r3, #39	; 0x27
   2236e:	f240 8411 	bls.w	22b94 <net_6lo_compress+0x87c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   22372:	79b2      	ldrb	r2, [r6, #6]
   22374:	2a11      	cmp	r2, #17
   22376:	d02f      	beq.n	223d8 <net_6lo_compress+0xc0>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   22378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2237c:	4620      	mov	r0, r4
   2237e:	f7fb f9b9 	bl	1d6f4 <net_pkt_get_frag>
	if (!frag) {
   22382:	4680      	mov	r8, r0
   22384:	2800      	cmp	r0, #0
   22386:	f000 8408 	beq.w	22b9a <net_6lo_compress+0x882>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   2238a:	6883      	ldr	r3, [r0, #8]
   2238c:	2260      	movs	r2, #96	; 0x60
   2238e:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   22390:	6883      	ldr	r3, [r0, #8]
   22392:	2200      	movs	r2, #0
   22394:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   22396:	7830      	ldrb	r0, [r6, #0]
   22398:	7871      	ldrb	r1, [r6, #1]
   2239a:	090b      	lsrs	r3, r1, #4
   2239c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   223a0:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   223a2:	089a      	lsrs	r2, r3, #2
   223a4:	ea42 1383 	orr.w	r3, r2, r3, lsl #6
   223a8:	b25b      	sxtb	r3, r3
   223aa:	b2da      	uxtb	r2, r3
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   223ac:	f011 0f0f 	tst.w	r1, #15
   223b0:	d121      	bne.n	223f6 <net_6lo_compress+0xde>
   223b2:	f8b6 e002 	ldrh.w	lr, [r6, #2]
   223b6:	f1be 0f00 	cmp.w	lr, #0
   223ba:	d11c      	bne.n	223f6 <net_6lo_compress+0xde>
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   223bc:	f010 0f0f 	tst.w	r0, #15
   223c0:	d10e      	bne.n	223e0 <net_6lo_compress+0xc8>
   223c2:	f011 0ff0 	tst.w	r1, #240	; 0xf0
   223c6:	d10b      	bne.n	223e0 <net_6lo_compress+0xc8>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   223c8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   223cc:	7813      	ldrb	r3, [r2, #0]
   223ce:	f043 0318 	orr.w	r3, r3, #24
   223d2:	7013      	strb	r3, [r2, #0]
   223d4:	2202      	movs	r2, #2
   223d6:	e025      	b.n	22424 <net_6lo_compress+0x10c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   223d8:	2b2f      	cmp	r3, #47	; 0x2f
   223da:	d8cd      	bhi.n	22378 <net_6lo_compress+0x60>
		return false;
   223dc:	2000      	movs	r0, #0
   223de:	e7bf      	b.n	22360 <net_6lo_compress+0x48>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   223e0:	f8d8 1008 	ldr.w	r1, [r8, #8]
   223e4:	780b      	ldrb	r3, [r1, #0]
   223e6:	f043 0310 	orr.w	r3, r3, #16
   223ea:	700b      	strb	r3, [r1, #0]
			IPHC[offset++] = tcl;
   223ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
   223f0:	709a      	strb	r2, [r3, #2]
   223f2:	2203      	movs	r2, #3
   223f4:	e016      	b.n	22424 <net_6lo_compress+0x10c>
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   223f6:	f010 0f0f 	tst.w	r0, #15
   223fa:	d102      	bne.n	22402 <net_6lo_compress+0xea>
   223fc:	f011 0f30 	tst.w	r1, #48	; 0x30
   22400:	d128      	bne.n	22454 <net_6lo_compress+0x13c>
			IPHC[0] |= NET_6LO_IPHC_TF_00;
   22402:	f8d8 3008 	ldr.w	r3, [r8, #8]
			IPHC[offset++] = tcl;
   22406:	709a      	strb	r2, [r3, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   22408:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2240c:	7873      	ldrb	r3, [r6, #1]
   2240e:	f003 030f 	and.w	r3, r3, #15
   22412:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   22414:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22418:	2202      	movs	r2, #2
   2241a:	18b1      	adds	r1, r6, r2
   2241c:	3004      	adds	r0, #4
   2241e:	f7dd ff4f 	bl	2c0 <memcpy>
			offset += 2;
   22422:	2206      	movs	r2, #6
	if (ipv6->nexthdr == IPPROTO_UDP) {
   22424:	79b3      	ldrb	r3, [r6, #6]
   22426:	2b11      	cmp	r3, #17
   22428:	d02d      	beq.n	22486 <net_6lo_compress+0x16e>
		IPHC[offset++] = ipv6->nexthdr;
   2242a:	f8d8 1008 	ldr.w	r1, [r8, #8]
   2242e:	f102 0901 	add.w	r9, r2, #1
   22432:	548b      	strb	r3, [r1, r2]
	switch (ipv6->hop_limit) {
   22434:	79f3      	ldrb	r3, [r6, #7]
   22436:	2b40      	cmp	r3, #64	; 0x40
   22438:	d040      	beq.n	224bc <net_6lo_compress+0x1a4>
   2243a:	2bff      	cmp	r3, #255	; 0xff
   2243c:	d045      	beq.n	224ca <net_6lo_compress+0x1b2>
   2243e:	2b01      	cmp	r3, #1
   22440:	d029      	beq.n	22496 <net_6lo_compress+0x17e>
		IPHC[offset++] = ipv6->hop_limit;
   22442:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22446:	f109 0201 	add.w	r2, r9, #1
   2244a:	f801 3009 	strb.w	r3, [r1, r9]
   2244e:	fa5f f982 	uxtb.w	r9, r2
   22452:	e026      	b.n	224a2 <net_6lo_compress+0x18a>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   22454:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22458:	780a      	ldrb	r2, [r1, #0]
   2245a:	f042 0208 	orr.w	r2, r2, #8
   2245e:	700a      	strb	r2, [r1, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   22460:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22464:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   22468:	f996 1001 	ldrsb.w	r1, [r6, #1]
   2246c:	f001 010f 	and.w	r1, r1, #15
   22470:	430b      	orrs	r3, r1
   22472:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   22474:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22478:	2202      	movs	r2, #2
   2247a:	18b1      	adds	r1, r6, r2
   2247c:	3003      	adds	r0, #3
   2247e:	f7dd ff1f 	bl	2c0 <memcpy>
			offset += 2;
   22482:	2205      	movs	r2, #5
   22484:	e7ce      	b.n	22424 <net_6lo_compress+0x10c>
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   22486:	f8d8 1008 	ldr.w	r1, [r8, #8]
   2248a:	780b      	ldrb	r3, [r1, #0]
   2248c:	f043 0304 	orr.w	r3, r3, #4
   22490:	700b      	strb	r3, [r1, #0]
   22492:	4691      	mov	r9, r2
   22494:	e7ce      	b.n	22434 <net_6lo_compress+0x11c>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   22496:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2249a:	7813      	ldrb	r3, [r2, #0]
   2249c:	f043 0301 	orr.w	r3, r3, #1
   224a0:	7013      	strb	r3, [r2, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   224a2:	68b3      	ldr	r3, [r6, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   224a4:	b9c3      	cbnz	r3, 224d8 <net_6lo_compress+0x1c0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   224a6:	68f3      	ldr	r3, [r6, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   224a8:	2b00      	cmp	r3, #0
   224aa:	d176      	bne.n	2259a <net_6lo_compress+0x282>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   224ac:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   224ae:	2b00      	cmp	r3, #0
   224b0:	d175      	bne.n	2259e <net_6lo_compress+0x286>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   224b2:	6973      	ldr	r3, [r6, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   224b4:	2b00      	cmp	r3, #0
   224b6:	d074      	beq.n	225a2 <net_6lo_compress+0x28a>
   224b8:	2300      	movs	r3, #0
   224ba:	e00e      	b.n	224da <net_6lo_compress+0x1c2>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   224bc:	f8d8 2008 	ldr.w	r2, [r8, #8]
   224c0:	7813      	ldrb	r3, [r2, #0]
   224c2:	f043 0302 	orr.w	r3, r3, #2
   224c6:	7013      	strb	r3, [r2, #0]
   224c8:	e7eb      	b.n	224a2 <net_6lo_compress+0x18a>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   224ca:	f8d8 2008 	ldr.w	r2, [r8, #8]
   224ce:	7813      	ldrb	r3, [r2, #0]
   224d0:	f043 0303 	orr.w	r3, r3, #3
   224d4:	7013      	strb	r3, [r2, #0]
   224d6:	e7e4      	b.n	224a2 <net_6lo_compress+0x18a>
   224d8:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   224da:	2b00      	cmp	r3, #0
   224dc:	d163      	bne.n	225a6 <net_6lo_compress+0x28e>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   224de:	8932      	ldrh	r2, [r6, #8]
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   224e0:	f248 03fe 	movw	r3, #33022	; 0x80fe
   224e4:	429a      	cmp	r2, r3
   224e6:	d065      	beq.n	225b4 <net_6lo_compress+0x29c>
		IPHC[1] |= NET_6LO_IPHC_SAM_00;
   224e8:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   224ec:	2210      	movs	r2, #16
   224ee:	f106 0108 	add.w	r1, r6, #8
   224f2:	4448      	add	r0, r9
   224f4:	f7dd fee4 	bl	2c0 <memcpy>
		offset += sizeof(struct in6_addr);
   224f8:	f109 0910 	add.w	r9, r9, #16
   224fc:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   22500:	f1b9 0f00 	cmp.w	r9, #0
   22504:	f000 812d 	beq.w	22762 <net_6lo_compress+0x44a>
	return addr->s6_addr[0] == 0xFF;
   22508:	7e33      	ldrb	r3, [r6, #24]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   2250a:	2bff      	cmp	r3, #255	; 0xff
   2250c:	f000 812e 	beq.w	2276c <net_6lo_compress+0x454>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   22510:	8b32      	ldrh	r2, [r6, #24]
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   22512:	f248 03fe 	movw	r3, #33022	; 0x80fe
   22516:	429a      	cmp	r2, r3
   22518:	f000 81bf 	beq.w	2289a <net_6lo_compress+0x582>
		IPHC[1] |= NET_6LO_IPHC_DAM_00;
   2251c:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   22520:	2210      	movs	r2, #16
   22522:	f106 0118 	add.w	r1, r6, #24
   22526:	4448      	add	r0, r9
   22528:	f7dd feca 	bl	2c0 <memcpy>
		offset += 16;
   2252c:	f109 0910 	add.w	r9, r9, #16
   22530:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   22534:	f1b9 0f00 	cmp.w	r9, #0
   22538:	f000 8287 	beq.w	22a4a <net_6lo_compress+0x732>
	if (ipv6->nexthdr != IPPROTO_UDP) {
   2253c:	79b3      	ldrb	r3, [r6, #6]
   2253e:	2b11      	cmp	r3, #17
   22540:	f000 8288 	beq.w	22a54 <net_6lo_compress+0x73c>
	compressed = NET_IPV6H_LEN;
   22544:	2628      	movs	r6, #40	; 0x28
	net_buf_add(frag, offset);
   22546:	f108 0a08 	add.w	sl, r8, #8
   2254a:	4649      	mov	r1, r9
   2254c:	4650      	mov	r0, sl
   2254e:	f7f8 fc01 	bl	1ad54 <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   22552:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22556:	68a3      	ldr	r3, [r4, #8]
   22558:	6899      	ldr	r1, [r3, #8]
	       pkt->frags->len - compressed);
   2255a:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   2255c:	1b92      	subs	r2, r2, r6
   2255e:	4431      	add	r1, r6
   22560:	4448      	add	r0, r9
   22562:	f7dd fead 	bl	2c0 <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   22566:	68a3      	ldr	r3, [r4, #8]
   22568:	8999      	ldrh	r1, [r3, #12]
   2256a:	1b89      	subs	r1, r1, r6
   2256c:	4650      	mov	r0, sl
   2256e:	f7f8 fbf1 	bl	1ad54 <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   22572:	68a2      	ldr	r2, [r4, #8]
   22574:	2100      	movs	r1, #0
   22576:	4620      	mov	r0, r4
   22578:	f7fb f928 	bl	1d7cc <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   2257c:	4641      	mov	r1, r8
   2257e:	4620      	mov	r0, r4
   22580:	f7fb f942 	bl	1d808 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   22584:	4620      	mov	r0, r4
   22586:	f7fb f9f9 	bl	1d97c <net_pkt_compact>
	if (fragment) {
   2258a:	2f00      	cmp	r7, #0
   2258c:	f000 8308 	beq.w	22ba0 <net_6lo_compress+0x888>
		return fragment(pkt, compressed - offset);
   22590:	eba6 0109 	sub.w	r1, r6, r9
   22594:	4620      	mov	r0, r4
   22596:	47b8      	blx	r7
   22598:	e6e2      	b.n	22360 <net_6lo_compress+0x48>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2259a:	2300      	movs	r3, #0
   2259c:	e79d      	b.n	224da <net_6lo_compress+0x1c2>
   2259e:	2300      	movs	r3, #0
   225a0:	e79b      	b.n	224da <net_6lo_compress+0x1c2>
   225a2:	2301      	movs	r3, #1
   225a4:	e799      	b.n	224da <net_6lo_compress+0x1c2>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   225a6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   225aa:	7853      	ldrb	r3, [r2, #1]
   225ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   225b0:	7053      	strb	r3, [r2, #1]
   225b2:	e7a5      	b.n	22500 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   225b4:	8973      	ldrh	r3, [r6, #10]
   225b6:	b91b      	cbnz	r3, 225c0 <net_6lo_compress+0x2a8>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   225b8:	68f3      	ldr	r3, [r6, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   225ba:	b33b      	cbz	r3, 2260c <net_6lo_compress+0x2f4>
   225bc:	2300      	movs	r3, #0
   225be:	e000      	b.n	225c2 <net_6lo_compress+0x2aa>
   225c0:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   225c2:	9301      	str	r3, [sp, #4]
   225c4:	2b00      	cmp	r3, #0
   225c6:	d08f      	beq.n	224e8 <net_6lo_compress+0x1d0>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   225c8:	6933      	ldr	r3, [r6, #16]
   225ca:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   225ce:	d01f      	beq.n	22610 <net_6lo_compress+0x2f8>
   225d0:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->src)) {
   225d2:	469a      	mov	sl, r3
   225d4:	bb1b      	cbnz	r3, 2261e <net_6lo_compress+0x306>
			if (!net_pkt_ll_src(pkt)) {
   225d6:	f114 0320 	adds.w	r3, r4, #32
   225da:	f000 80bf 	beq.w	2275c <net_6lo_compress+0x444>
	if (!addr || !lladdr) {
   225de:	f116 0b08 	adds.w	fp, r6, #8
   225e2:	d008      	beq.n	225f6 <net_6lo_compress+0x2de>
   225e4:	b13b      	cbz	r3, 225f6 <net_6lo_compress+0x2de>
	switch (lladdr->len) {
   225e6:	791a      	ldrb	r2, [r3, #4]
   225e8:	2a06      	cmp	r2, #6
   225ea:	d03e      	beq.n	2266a <net_6lo_compress+0x352>
   225ec:	2a08      	cmp	r2, #8
   225ee:	f000 808c 	beq.w	2270a <net_6lo_compress+0x3f2>
   225f2:	2a02      	cmp	r2, #2
   225f4:	d026      	beq.n	22644 <net_6lo_compress+0x32c>
			if (net_ipv6_addr_based_on_ll(&ipv6->src,
   225f6:	f1ba 0f00 	cmp.w	sl, #0
   225fa:	f000 809c 	beq.w	22736 <net_6lo_compress+0x41e>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   225fe:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22602:	7853      	ldrb	r3, [r2, #1]
   22604:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   22608:	7053      	strb	r3, [r2, #1]
   2260a:	e779      	b.n	22500 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2260c:	2301      	movs	r3, #1
   2260e:	e7d8      	b.n	225c2 <net_6lo_compress+0x2aa>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   22610:	8ab3      	ldrh	r3, [r6, #20]
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   22612:	2bfe      	cmp	r3, #254	; 0xfe
   22614:	d001      	beq.n	2261a <net_6lo_compress+0x302>
   22616:	2300      	movs	r3, #0
   22618:	e7db      	b.n	225d2 <net_6lo_compress+0x2ba>
   2261a:	2301      	movs	r3, #1
   2261c:	e7d9      	b.n	225d2 <net_6lo_compress+0x2ba>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   2261e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22622:	7853      	ldrb	r3, [r2, #1]
   22624:	f043 0320 	orr.w	r3, r3, #32
   22628:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   2262a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2262e:	2202      	movs	r2, #2
   22630:	f106 0116 	add.w	r1, r6, #22
   22634:	4448      	add	r0, r9
   22636:	f7dd fe43 	bl	2c0 <memcpy>
			offset += 2;
   2263a:	f109 0902 	add.w	r9, r9, #2
   2263e:	fa5f f989 	uxtb.w	r9, r9
   22642:	e75d      	b.n	22500 <net_6lo_compress+0x1e8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   22644:	6a21      	ldr	r1, [r4, #32]
   22646:	f10b 000e 	add.w	r0, fp, #14
   2264a:	f008 f8a1 	bl	2a790 <memcmp>
   2264e:	2800      	cmp	r0, #0
   22650:	d1d1      	bne.n	225f6 <net_6lo_compress+0x2de>
		    addr->s6_addr[10] == 0 &&
   22652:	f8db 3008 	ldr.w	r3, [fp, #8]
   22656:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   2265a:	d1cc      	bne.n	225f6 <net_6lo_compress+0x2de>
		    addr->s6_addr[12] == 0xfe) {
   2265c:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   22660:	2bfe      	cmp	r3, #254	; 0xfe
   22662:	d1c8      	bne.n	225f6 <net_6lo_compress+0x2de>
			return true;
   22664:	f8dd a004 	ldr.w	sl, [sp, #4]
   22668:	e7c5      	b.n	225f6 <net_6lo_compress+0x2de>
		if (lladdr->type == NET_LINK_ETHERNET) {
   2266a:	795b      	ldrb	r3, [r3, #5]
   2266c:	2b03      	cmp	r3, #3
   2266e:	d026      	beq.n	226be <net_6lo_compress+0x3a6>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   22670:	2b02      	cmp	r3, #2
   22672:	d1c0      	bne.n	225f6 <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22674:	6a21      	ldr	r1, [r4, #32]
   22676:	2202      	movs	r2, #2
   22678:	3101      	adds	r1, #1
   2267a:	f10b 0009 	add.w	r0, fp, #9
   2267e:	f008 f887 	bl	2a790 <memcmp>
   22682:	2800      	cmp	r0, #0
   22684:	d1b7      	bne.n	225f6 <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22686:	6a21      	ldr	r1, [r4, #32]
   22688:	2203      	movs	r2, #3
   2268a:	4411      	add	r1, r2
   2268c:	f10b 000d 	add.w	r0, fp, #13
   22690:	f008 f87e 	bl	2a790 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22694:	2800      	cmp	r0, #0
   22696:	d1ae      	bne.n	225f6 <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   22698:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   2269c:	2bff      	cmp	r3, #255	; 0xff
   2269e:	d1aa      	bne.n	225f6 <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe
   226a0:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   226a4:	2bfe      	cmp	r3, #254	; 0xfe
   226a6:	d1a6      	bne.n	225f6 <net_6lo_compress+0x2de>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   226a8:	f89b 3008 	ldrb.w	r3, [fp, #8]
   226ac:	f083 0302 	eor.w	r3, r3, #2
   226b0:	6a22      	ldr	r2, [r4, #32]
   226b2:	7812      	ldrb	r2, [r2, #0]
   226b4:	4293      	cmp	r3, r2
   226b6:	d19e      	bne.n	225f6 <net_6lo_compress+0x2de>
				return true;
   226b8:	f8dd a004 	ldr.w	sl, [sp, #4]
   226bc:	e79b      	b.n	225f6 <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   226be:	6a21      	ldr	r1, [r4, #32]
   226c0:	2202      	movs	r2, #2
   226c2:	3101      	adds	r1, #1
   226c4:	f10b 0009 	add.w	r0, fp, #9
   226c8:	f008 f862 	bl	2a790 <memcmp>
   226cc:	2800      	cmp	r0, #0
   226ce:	d192      	bne.n	225f6 <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   226d0:	6a21      	ldr	r1, [r4, #32]
   226d2:	2203      	movs	r2, #3
   226d4:	4411      	add	r1, r2
   226d6:	f10b 000d 	add.w	r0, fp, #13
   226da:	f008 f859 	bl	2a790 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   226de:	2800      	cmp	r0, #0
   226e0:	d189      	bne.n	225f6 <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   226e2:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   226e6:	2bff      	cmp	r3, #255	; 0xff
   226e8:	d185      	bne.n	225f6 <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe &&
   226ea:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   226ee:	2bfe      	cmp	r3, #254	; 0xfe
   226f0:	d181      	bne.n	225f6 <net_6lo_compress+0x2de>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   226f2:	f89b 3008 	ldrb.w	r3, [fp, #8]
   226f6:	f083 0302 	eor.w	r3, r3, #2
   226fa:	6a22      	ldr	r2, [r4, #32]
   226fc:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   226fe:	4293      	cmp	r3, r2
   22700:	f47f af79 	bne.w	225f6 <net_6lo_compress+0x2de>
				return true;
   22704:	f8dd a004 	ldr.w	sl, [sp, #4]
   22708:	e775      	b.n	225f6 <net_6lo_compress+0x2de>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   2270a:	6a21      	ldr	r1, [r4, #32]
   2270c:	3a01      	subs	r2, #1
   2270e:	3101      	adds	r1, #1
   22710:	f10b 0009 	add.w	r0, fp, #9
   22714:	f008 f83c 	bl	2a790 <memcmp>
   22718:	2800      	cmp	r0, #0
   2271a:	f47f af6c 	bne.w	225f6 <net_6lo_compress+0x2de>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   2271e:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22722:	f083 0302 	eor.w	r3, r3, #2
   22726:	6a22      	ldr	r2, [r4, #32]
   22728:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   2272a:	4293      	cmp	r3, r2
   2272c:	f47f af63 	bne.w	225f6 <net_6lo_compress+0x2de>
			return true;
   22730:	f8dd a004 	ldr.w	sl, [sp, #4]
   22734:	e75f      	b.n	225f6 <net_6lo_compress+0x2de>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   22736:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2273a:	7853      	ldrb	r3, [r2, #1]
   2273c:	f043 0310 	orr.w	r3, r3, #16
   22740:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   22742:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22746:	2208      	movs	r2, #8
   22748:	f106 0110 	add.w	r1, r6, #16
   2274c:	4448      	add	r0, r9
   2274e:	f7dd fdb7 	bl	2c0 <memcpy>
				offset += 8;
   22752:	f109 0908 	add.w	r9, r9, #8
   22756:	fa5f f989 	uxtb.w	r9, r9
   2275a:	e6d1      	b.n	22500 <net_6lo_compress+0x1e8>
				return 0;
   2275c:	f04f 0900 	mov.w	r9, #0
   22760:	e6ce      	b.n	22500 <net_6lo_compress+0x1e8>
		net_pkt_frag_unref(frag);
   22762:	4640      	mov	r0, r8
   22764:	f7fb f813 	bl	1d78e <net_pkt_frag_unref>
		return false;
   22768:	2000      	movs	r0, #0
   2276a:	e5f9      	b.n	22360 <net_6lo_compress+0x48>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   2276c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22770:	7853      	ldrb	r3, [r2, #1]
   22772:	f043 0308 	orr.w	r3, r3, #8
   22776:	7053      	strb	r3, [r2, #1]
	return ((addr->s6_addr[1] == 0x02) &&
   22778:	7e73      	ldrb	r3, [r6, #25]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   2277a:	2b02      	cmp	r3, #2
   2277c:	d00a      	beq.n	22794 <net_6lo_compress+0x47c>
   2277e:	2300      	movs	r3, #0
	if (net_6lo_maddr_8_bit_compressible(&ipv6->dst)) {
   22780:	b9db      	cbnz	r3, 227ba <net_6lo_compress+0x4a2>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22782:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22784:	bb63      	cbnz	r3, 227e0 <net_6lo_compress+0x4c8>
   22786:	6a32      	ldr	r2, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22788:	bba2      	cbnz	r2, 227f4 <net_6lo_compress+0x4dc>
		 (addr->s6_addr[12] == 0x00));
   2278a:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   2278e:	b39a      	cbz	r2, 227f8 <net_6lo_compress+0x4e0>
   22790:	2200      	movs	r2, #0
   22792:	e026      	b.n	227e2 <net_6lo_compress+0x4ca>
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22794:	8b73      	ldrh	r3, [r6, #26]
	return ((addr->s6_addr[1] == 0x02) &&
   22796:	b943      	cbnz	r3, 227aa <net_6lo_compress+0x492>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22798:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2279a:	b943      	cbnz	r3, 227ae <net_6lo_compress+0x496>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   2279c:	6a33      	ldr	r3, [r6, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   2279e:	b943      	cbnz	r3, 227b2 <net_6lo_compress+0x49a>
		 (addr->s6_addr[14] == 0x00));
   227a0:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   227a4:	b13b      	cbz	r3, 227b6 <net_6lo_compress+0x49e>
   227a6:	2300      	movs	r3, #0
   227a8:	e7ea      	b.n	22780 <net_6lo_compress+0x468>
   227aa:	2300      	movs	r3, #0
   227ac:	e7e8      	b.n	22780 <net_6lo_compress+0x468>
   227ae:	2300      	movs	r3, #0
   227b0:	e7e6      	b.n	22780 <net_6lo_compress+0x468>
   227b2:	2300      	movs	r3, #0
   227b4:	e7e4      	b.n	22780 <net_6lo_compress+0x468>
   227b6:	2301      	movs	r3, #1
   227b8:	e7e2      	b.n	22780 <net_6lo_compress+0x468>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   227ba:	f8d8 2008 	ldr.w	r2, [r8, #8]
   227be:	7853      	ldrb	r3, [r2, #1]
   227c0:	f043 0303 	orr.w	r3, r3, #3
   227c4:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   227c6:	f8d8 0008 	ldr.w	r0, [r8, #8]
   227ca:	2201      	movs	r2, #1
   227cc:	f106 0127 	add.w	r1, r6, #39	; 0x27
   227d0:	4448      	add	r0, r9
   227d2:	f7dd fd75 	bl	2c0 <memcpy>
		offset++;
   227d6:	f109 0901 	add.w	r9, r9, #1
   227da:	fa5f f989 	uxtb.w	r9, r9
   227de:	e6a9      	b.n	22534 <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   227e0:	2200      	movs	r2, #0
	} else if (net_6lo_maddr_32_bit_compressible(&ipv6->dst)) {
   227e2:	b95a      	cbnz	r2, 227fc <net_6lo_compress+0x4e4>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   227e4:	bb43      	cbnz	r3, 22838 <net_6lo_compress+0x520>
   227e6:	8c33      	ldrh	r3, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   227e8:	bbab      	cbnz	r3, 22856 <net_6lo_compress+0x53e>
		 (addr->s6_addr[10] == 0x00));
   227ea:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   227ee:	b3a3      	cbz	r3, 2285a <net_6lo_compress+0x542>
   227f0:	2300      	movs	r3, #0
   227f2:	e022      	b.n	2283a <net_6lo_compress+0x522>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   227f4:	2200      	movs	r2, #0
   227f6:	e7f4      	b.n	227e2 <net_6lo_compress+0x4ca>
   227f8:	2201      	movs	r2, #1
   227fa:	e7f2      	b.n	227e2 <net_6lo_compress+0x4ca>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   227fc:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22800:	7853      	ldrb	r3, [r2, #1]
   22802:	f043 0302 	orr.w	r3, r3, #2
   22806:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   22808:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2280c:	2201      	movs	r2, #1
   2280e:	f106 0119 	add.w	r1, r6, #25
   22812:	4448      	add	r0, r9
   22814:	f7dd fd54 	bl	2c0 <memcpy>
		offset++;
   22818:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   2281c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22820:	2203      	movs	r2, #3
   22822:	f106 0125 	add.w	r1, r6, #37	; 0x25
   22826:	fa53 f080 	uxtab	r0, r3, r0
   2282a:	f7dd fd49 	bl	2c0 <memcpy>
		offset += 3;
   2282e:	f109 0904 	add.w	r9, r9, #4
   22832:	fa5f f989 	uxtb.w	r9, r9
   22836:	e67d      	b.n	22534 <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   22838:	2300      	movs	r3, #0
	} else if (net_6lo_maddr_48_bit_compressible(&ipv6->dst)) {
   2283a:	b983      	cbnz	r3, 2285e <net_6lo_compress+0x546>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   2283c:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22840:	2210      	movs	r2, #16
   22842:	f106 0118 	add.w	r1, r6, #24
   22846:	4448      	add	r0, r9
   22848:	f7dd fd3a 	bl	2c0 <memcpy>
		offset += 16;
   2284c:	f109 0910 	add.w	r9, r9, #16
   22850:	fa5f f989 	uxtb.w	r9, r9
   22854:	e66e      	b.n	22534 <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   22856:	2300      	movs	r3, #0
   22858:	e7ef      	b.n	2283a <net_6lo_compress+0x522>
   2285a:	2301      	movs	r3, #1
   2285c:	e7ed      	b.n	2283a <net_6lo_compress+0x522>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   2285e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22862:	7853      	ldrb	r3, [r2, #1]
   22864:	f043 0301 	orr.w	r3, r3, #1
   22868:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   2286a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2286e:	2201      	movs	r2, #1
   22870:	f106 0119 	add.w	r1, r6, #25
   22874:	4448      	add	r0, r9
   22876:	f7dd fd23 	bl	2c0 <memcpy>
		offset++;
   2287a:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   2287e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22882:	2205      	movs	r2, #5
   22884:	f106 0123 	add.w	r1, r6, #35	; 0x23
   22888:	fa53 f080 	uxtab	r0, r3, r0
   2288c:	f7dd fd18 	bl	2c0 <memcpy>
		offset += 5;
   22890:	f109 0906 	add.w	r9, r9, #6
   22894:	fa5f f989 	uxtb.w	r9, r9
   22898:	e64c      	b.n	22534 <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2289a:	8b73      	ldrh	r3, [r6, #26]
   2289c:	b91b      	cbnz	r3, 228a6 <net_6lo_compress+0x58e>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   2289e:	69f3      	ldr	r3, [r6, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   228a0:	b343      	cbz	r3, 228f4 <net_6lo_compress+0x5dc>
   228a2:	2300      	movs	r3, #0
   228a4:	e000      	b.n	228a8 <net_6lo_compress+0x590>
   228a6:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   228a8:	9301      	str	r3, [sp, #4]
   228aa:	2b00      	cmp	r3, #0
   228ac:	f43f ae36 	beq.w	2251c <net_6lo_compress+0x204>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   228b0:	6a33      	ldr	r3, [r6, #32]
   228b2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   228b6:	d01f      	beq.n	228f8 <net_6lo_compress+0x5e0>
   228b8:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->dst)) {
   228ba:	469a      	mov	sl, r3
   228bc:	bb1b      	cbnz	r3, 22906 <net_6lo_compress+0x5ee>
			if (!net_pkt_ll_dst(pkt)) {
   228be:	f114 0328 	adds.w	r3, r4, #40	; 0x28
   228c2:	f000 80bf 	beq.w	22a44 <net_6lo_compress+0x72c>
	if (!addr || !lladdr) {
   228c6:	f116 0b18 	adds.w	fp, r6, #24
   228ca:	d008      	beq.n	228de <net_6lo_compress+0x5c6>
   228cc:	b13b      	cbz	r3, 228de <net_6lo_compress+0x5c6>
	switch (lladdr->len) {
   228ce:	791a      	ldrb	r2, [r3, #4]
   228d0:	2a06      	cmp	r2, #6
   228d2:	d03e      	beq.n	22952 <net_6lo_compress+0x63a>
   228d4:	2a08      	cmp	r2, #8
   228d6:	f000 808c 	beq.w	229f2 <net_6lo_compress+0x6da>
   228da:	2a02      	cmp	r2, #2
   228dc:	d026      	beq.n	2292c <net_6lo_compress+0x614>
			if (net_ipv6_addr_based_on_ll(&ipv6->dst,
   228de:	f1ba 0f00 	cmp.w	sl, #0
   228e2:	f000 809c 	beq.w	22a1e <net_6lo_compress+0x706>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   228e6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   228ea:	7853      	ldrb	r3, [r2, #1]
   228ec:	f043 0303 	orr.w	r3, r3, #3
   228f0:	7053      	strb	r3, [r2, #1]
   228f2:	e61f      	b.n	22534 <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   228f4:	2301      	movs	r3, #1
   228f6:	e7d7      	b.n	228a8 <net_6lo_compress+0x590>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   228f8:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   228fa:	2bfe      	cmp	r3, #254	; 0xfe
   228fc:	d001      	beq.n	22902 <net_6lo_compress+0x5ea>
   228fe:	2300      	movs	r3, #0
   22900:	e7db      	b.n	228ba <net_6lo_compress+0x5a2>
   22902:	2301      	movs	r3, #1
   22904:	e7d9      	b.n	228ba <net_6lo_compress+0x5a2>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   22906:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2290a:	7853      	ldrb	r3, [r2, #1]
   2290c:	f043 0302 	orr.w	r3, r3, #2
   22910:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   22912:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22916:	2202      	movs	r2, #2
   22918:	f106 0126 	add.w	r1, r6, #38	; 0x26
   2291c:	4448      	add	r0, r9
   2291e:	f7dd fccf 	bl	2c0 <memcpy>
			offset += 2;
   22922:	f109 0902 	add.w	r9, r9, #2
   22926:	fa5f f989 	uxtb.w	r9, r9
   2292a:	e603      	b.n	22534 <net_6lo_compress+0x21c>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   2292c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2292e:	f10b 000e 	add.w	r0, fp, #14
   22932:	f007 ff2d 	bl	2a790 <memcmp>
   22936:	2800      	cmp	r0, #0
   22938:	d1d1      	bne.n	228de <net_6lo_compress+0x5c6>
		    addr->s6_addr[10] == 0 &&
   2293a:	f8db 3008 	ldr.w	r3, [fp, #8]
   2293e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   22942:	d1cc      	bne.n	228de <net_6lo_compress+0x5c6>
		    addr->s6_addr[12] == 0xfe) {
   22944:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   22948:	2bfe      	cmp	r3, #254	; 0xfe
   2294a:	d1c8      	bne.n	228de <net_6lo_compress+0x5c6>
			return true;
   2294c:	f8dd a004 	ldr.w	sl, [sp, #4]
   22950:	e7c5      	b.n	228de <net_6lo_compress+0x5c6>
		if (lladdr->type == NET_LINK_ETHERNET) {
   22952:	795b      	ldrb	r3, [r3, #5]
   22954:	2b03      	cmp	r3, #3
   22956:	d026      	beq.n	229a6 <net_6lo_compress+0x68e>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   22958:	2b02      	cmp	r3, #2
   2295a:	d1c0      	bne.n	228de <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   2295c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2295e:	2202      	movs	r2, #2
   22960:	3101      	adds	r1, #1
   22962:	f10b 0009 	add.w	r0, fp, #9
   22966:	f007 ff13 	bl	2a790 <memcmp>
   2296a:	2800      	cmp	r0, #0
   2296c:	d1b7      	bne.n	228de <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   2296e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22970:	2203      	movs	r2, #3
   22972:	4411      	add	r1, r2
   22974:	f10b 000d 	add.w	r0, fp, #13
   22978:	f007 ff0a 	bl	2a790 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   2297c:	2800      	cmp	r0, #0
   2297e:	d1ae      	bne.n	228de <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   22980:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22984:	2bff      	cmp	r3, #255	; 0xff
   22986:	d1aa      	bne.n	228de <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe
   22988:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   2298c:	2bfe      	cmp	r3, #254	; 0xfe
   2298e:	d1a6      	bne.n	228de <net_6lo_compress+0x5c6>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   22990:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22994:	f083 0302 	eor.w	r3, r3, #2
   22998:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   2299a:	7812      	ldrb	r2, [r2, #0]
   2299c:	4293      	cmp	r3, r2
   2299e:	d19e      	bne.n	228de <net_6lo_compress+0x5c6>
				return true;
   229a0:	f8dd a004 	ldr.w	sl, [sp, #4]
   229a4:	e79b      	b.n	228de <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   229a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   229a8:	2202      	movs	r2, #2
   229aa:	3101      	adds	r1, #1
   229ac:	f10b 0009 	add.w	r0, fp, #9
   229b0:	f007 feee 	bl	2a790 <memcmp>
   229b4:	2800      	cmp	r0, #0
   229b6:	d192      	bne.n	228de <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   229b8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   229ba:	2203      	movs	r2, #3
   229bc:	4411      	add	r1, r2
   229be:	f10b 000d 	add.w	r0, fp, #13
   229c2:	f007 fee5 	bl	2a790 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   229c6:	2800      	cmp	r0, #0
   229c8:	d189      	bne.n	228de <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   229ca:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   229ce:	2bff      	cmp	r3, #255	; 0xff
   229d0:	d185      	bne.n	228de <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe &&
   229d2:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   229d6:	2bfe      	cmp	r3, #254	; 0xfe
   229d8:	d181      	bne.n	228de <net_6lo_compress+0x5c6>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   229da:	f89b 3008 	ldrb.w	r3, [fp, #8]
   229de:	f083 0302 	eor.w	r3, r3, #2
   229e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   229e4:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   229e6:	4293      	cmp	r3, r2
   229e8:	f47f af79 	bne.w	228de <net_6lo_compress+0x5c6>
				return true;
   229ec:	f8dd a004 	ldr.w	sl, [sp, #4]
   229f0:	e775      	b.n	228de <net_6lo_compress+0x5c6>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   229f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   229f4:	3a01      	subs	r2, #1
   229f6:	3101      	adds	r1, #1
   229f8:	f10b 0009 	add.w	r0, fp, #9
   229fc:	f007 fec8 	bl	2a790 <memcmp>
   22a00:	2800      	cmp	r0, #0
   22a02:	f47f af6c 	bne.w	228de <net_6lo_compress+0x5c6>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   22a06:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22a0a:	f083 0302 	eor.w	r3, r3, #2
   22a0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   22a10:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   22a12:	4293      	cmp	r3, r2
   22a14:	f47f af63 	bne.w	228de <net_6lo_compress+0x5c6>
			return true;
   22a18:	f8dd a004 	ldr.w	sl, [sp, #4]
   22a1c:	e75f      	b.n	228de <net_6lo_compress+0x5c6>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   22a1e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22a22:	7853      	ldrb	r3, [r2, #1]
   22a24:	f043 0301 	orr.w	r3, r3, #1
   22a28:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   22a2a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22a2e:	2208      	movs	r2, #8
   22a30:	f106 0120 	add.w	r1, r6, #32
   22a34:	4448      	add	r0, r9
   22a36:	f7dd fc43 	bl	2c0 <memcpy>
				offset += 8;
   22a3a:	f109 0908 	add.w	r9, r9, #8
   22a3e:	fa5f f989 	uxtb.w	r9, r9
   22a42:	e577      	b.n	22534 <net_6lo_compress+0x21c>
				return 0;
   22a44:	f04f 0900 	mov.w	r9, #0
   22a48:	e574      	b.n	22534 <net_6lo_compress+0x21c>
		net_pkt_frag_unref(frag);
   22a4a:	4640      	mov	r0, r8
   22a4c:	f7fa fe9f 	bl	1d78e <net_pkt_frag_unref>
		return false;
   22a50:	2000      	movs	r0, #0
   22a52:	e485      	b.n	22360 <net_6lo_compress+0x48>
		udp = net_udp_get_hdr(pkt, &hdr);
   22a54:	a902      	add	r1, sp, #8
   22a56:	4620      	mov	r0, r4
   22a58:	f000 fc68 	bl	2332c <net_udp_get_hdr>
   22a5c:	4606      	mov	r6, r0
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   22a5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22a62:	22f0      	movs	r2, #240	; 0xf0
   22a64:	f803 2009 	strb.w	r2, [r3, r9]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   22a68:	8802      	ldrh	r2, [r0, #0]
   22a6a:	0a13      	lsrs	r3, r2, #8
   22a6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22a70:	b29b      	uxth	r3, r3
   22a72:	f640 720b 	movw	r2, #3851	; 0xf0b
   22a76:	ebb2 1f13 	cmp.w	r2, r3, lsr #4
   22a7a:	d025      	beq.n	22ac8 <net_6lo_compress+0x7b0>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   22a7c:	8872      	ldrh	r2, [r6, #2]
   22a7e:	b2d2      	uxtb	r2, r2
   22a80:	2af0      	cmp	r2, #240	; 0xf0
   22a82:	d046      	beq.n	22b12 <net_6lo_compress+0x7fa>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   22a84:	0a1b      	lsrs	r3, r3, #8
   22a86:	2bf0      	cmp	r3, #240	; 0xf0
   22a88:	d062      	beq.n	22b50 <net_6lo_compress+0x838>
		offset++;
   22a8a:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 4);
   22a8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22a92:	2204      	movs	r2, #4
   22a94:	4631      	mov	r1, r6
   22a96:	fa53 f080 	uxtab	r0, r3, r0
   22a9a:	f7dd fc11 	bl	2c0 <memcpy>
		offset += 4;
   22a9e:	f109 0905 	add.w	r9, r9, #5
   22aa2:	fa5f f989 	uxtb.w	r9, r9
	memcpy(&IPHC[offset], &udp->chksum, 2);
   22aa6:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22aaa:	2202      	movs	r2, #2
   22aac:	1db1      	adds	r1, r6, #6
   22aae:	4448      	add	r0, r9
   22ab0:	f7dd fc06 	bl	2c0 <memcpy>
	offset += 2;
   22ab4:	f109 0902 	add.w	r9, r9, #2
   22ab8:	fa5f f989 	uxtb.w	r9, r9
		net_udp_set_hdr(pkt, udp);
   22abc:	4631      	mov	r1, r6
   22abe:	4620      	mov	r0, r4
   22ac0:	f000 fc74 	bl	233ac <net_udp_set_hdr>
		compressed += NET_UDPH_LEN;
   22ac4:	2630      	movs	r6, #48	; 0x30
   22ac6:	e53e      	b.n	22546 <net_6lo_compress+0x22e>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   22ac8:	8841      	ldrh	r1, [r0, #2]
   22aca:	0a0a      	lsrs	r2, r1, #8
   22acc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   22ad0:	f3c2 120b 	ubfx	r2, r2, #4, #12
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   22ad4:	f640 710b 	movw	r1, #3851	; 0xf0b
   22ad8:	428a      	cmp	r2, r1
   22ada:	d1cf      	bne.n	22a7c <net_6lo_compress+0x764>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   22adc:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22ae0:	f812 3009 	ldrb.w	r3, [r2, r9]
   22ae4:	f043 0303 	orr.w	r3, r3, #3
   22ae8:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   22aec:	f109 0101 	add.w	r1, r9, #1
   22af0:	b2c9      	uxtb	r1, r1
		tmp = (u8_t)(htons(udp->src_port));
   22af2:	8803      	ldrh	r3, [r0, #0]
   22af4:	0a1b      	lsrs	r3, r3, #8
		tmp = tmp << 4;
   22af6:	011b      	lsls	r3, r3, #4
   22af8:	b2db      	uxtb	r3, r3
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   22afa:	8842      	ldrh	r2, [r0, #2]
   22afc:	f3c2 2203 	ubfx	r2, r2, #8, #4
   22b00:	4313      	orrs	r3, r2
		IPHC[offset++] = tmp;
   22b02:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22b06:	f109 0902 	add.w	r9, r9, #2
   22b0a:	fa5f f989 	uxtb.w	r9, r9
   22b0e:	5453      	strb	r3, [r2, r1]
   22b10:	e7c9      	b.n	22aa6 <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   22b12:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22b16:	f812 3009 	ldrb.w	r3, [r2, r9]
   22b1a:	f043 0301 	orr.w	r3, r3, #1
   22b1e:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   22b22:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 2);
   22b26:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22b2a:	2202      	movs	r2, #2
   22b2c:	4631      	mov	r1, r6
   22b2e:	fa53 f080 	uxtab	r0, r3, r0
   22b32:	f7dd fbc5 	bl	2c0 <memcpy>
		offset += 2;
   22b36:	f109 0303 	add.w	r3, r9, #3
   22b3a:	b2db      	uxtb	r3, r3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   22b3c:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22b40:	f109 0904 	add.w	r9, r9, #4
   22b44:	fa5f f989 	uxtb.w	r9, r9
   22b48:	8872      	ldrh	r2, [r6, #2]
   22b4a:	0a12      	lsrs	r2, r2, #8
   22b4c:	54ca      	strb	r2, [r1, r3]
   22b4e:	e7aa      	b.n	22aa6 <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   22b50:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22b54:	f812 3009 	ldrb.w	r3, [r2, r9]
   22b58:	f043 0302 	orr.w	r3, r3, #2
   22b5c:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   22b60:	f109 0301 	add.w	r3, r9, #1
   22b64:	fa5f fe83 	uxtb.w	lr, r3
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   22b68:	f109 0002 	add.w	r0, r9, #2
   22b6c:	4631      	mov	r1, r6
   22b6e:	f831 2b02 	ldrh.w	r2, [r1], #2
   22b72:	0a12      	lsrs	r2, r2, #8
   22b74:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22b78:	f803 200e 	strb.w	r2, [r3, lr]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   22b7c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22b80:	2202      	movs	r2, #2
   22b82:	fa53 f080 	uxtab	r0, r3, r0
   22b86:	f7dd fb9b 	bl	2c0 <memcpy>
		offset += 2;
   22b8a:	f109 0904 	add.w	r9, r9, #4
   22b8e:	fa5f f989 	uxtb.w	r9, r9
   22b92:	e788      	b.n	22aa6 <net_6lo_compress+0x78e>
		return false;
   22b94:	2000      	movs	r0, #0
   22b96:	f7ff bbe3 	b.w	22360 <net_6lo_compress+0x48>
		return false;
   22b9a:	2000      	movs	r0, #0
   22b9c:	f7ff bbe0 	b.w	22360 <net_6lo_compress+0x48>
	return true;
   22ba0:	4628      	mov	r0, r5
		return compress_IPHC_header(pkt, fragment);
   22ba2:	f7ff bbdd 	b.w	22360 <net_6lo_compress+0x48>
		return false;
   22ba6:	4628      	mov	r0, r5
   22ba8:	f7ff bbda 	b.w	22360 <net_6lo_compress+0x48>
	return true;
   22bac:	2001      	movs	r0, #1
		return compress_ipv6_header(pkt, fragment);
   22bae:	f7ff bbd7 	b.w	22360 <net_6lo_compress+0x48>

00022bb2 <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   22bb2:	b510      	push	{r4, lr}
	NET_ASSERT(pkt && pkt->frags);

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   22bb4:	6883      	ldr	r3, [r0, #8]
   22bb6:	689b      	ldr	r3, [r3, #8]
   22bb8:	781b      	ldrb	r3, [r3, #0]
   22bba:	f003 0260 	and.w	r2, r3, #96	; 0x60
   22bbe:	2a60      	cmp	r2, #96	; 0x60
   22bc0:	d005      	beq.n	22bce <net_6lo_uncompress+0x1c>
	    NET_6LO_DISPATCH_IPHC) {
		/* Uncompress IPHC header */
		return uncompress_IPHC_header(pkt);

	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   22bc2:	f003 0341 	and.w	r3, r3, #65	; 0x41
   22bc6:	2b41      	cmp	r3, #65	; 0x41
   22bc8:	d004      	beq.n	22bd4 <net_6lo_uncompress+0x22>
		return uncompress_ipv6_header(pkt);
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
   22bca:	2001      	movs	r0, #1
}
   22bcc:	bd10      	pop	{r4, pc}
		return uncompress_IPHC_header(pkt);
   22bce:	f7ff f873 	bl	21cb8 <uncompress_IPHC_header>
   22bd2:	bd10      	pop	{r4, pc}
	struct net_buf *frag = pkt->frags;
   22bd4:	6884      	ldr	r4, [r0, #8]
	memmove(frag->data, frag->data + 1, frag->len - 1);
   22bd6:	68a0      	ldr	r0, [r4, #8]
   22bd8:	89a2      	ldrh	r2, [r4, #12]
   22bda:	3a01      	subs	r2, #1
   22bdc:	1c41      	adds	r1, r0, #1
   22bde:	f007 fe07 	bl	2a7f0 <memmove>
	frag->len -= 1;
   22be2:	89a3      	ldrh	r3, [r4, #12]
   22be4:	3b01      	subs	r3, #1
   22be6:	81a3      	strh	r3, [r4, #12]
		return uncompress_ipv6_header(pkt);
   22be8:	2001      	movs	r0, #1
   22bea:	bd10      	pop	{r4, pc}

00022bec <net_route_entry_remove>:
{
   22bec:	4770      	bx	lr

00022bee <net_route_entries_table_clear>:
{
   22bee:	4770      	bx	lr

00022bf0 <nbr_nexthop_put>:

	return nbr;
}

static int nbr_nexthop_put(struct net_nbr *nbr)
{
   22bf0:	b508      	push	{r3, lr}
	NET_ASSERT(nbr);

	NET_DBG("[%d] nbr %p iface %p", nbr->idx, nbr, nbr->iface);

	net_nbr_unref(nbr);
   22bf2:	f7fc fbd3 	bl	1f39c <net_nbr_unref>

	return 0;
}
   22bf6:	2000      	movs	r0, #0
   22bf8:	bd08      	pop	{r3, pc}
	...

00022bfc <net_route_get_nbr>:
{
   22bfc:	b430      	push	{r4, r5}
   22bfe:	4605      	mov	r5, r0
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   22c00:	2300      	movs	r3, #0
   22c02:	e000      	b.n	22c06 <net_route_get_nbr+0xa>
   22c04:	3301      	adds	r3, #1
   22c06:	2b07      	cmp	r3, #7
   22c08:	dc0b      	bgt.n	22c22 <net_route_get_nbr+0x26>
	return &net_route_entries_pool[idx].nbr;
   22c0a:	4c07      	ldr	r4, [pc, #28]	; (22c28 <net_route_get_nbr+0x2c>)
   22c0c:	00da      	lsls	r2, r3, #3
   22c0e:	1ad2      	subs	r2, r2, r3
   22c10:	00d1      	lsls	r1, r2, #3
   22c12:	1860      	adds	r0, r4, r1
		if (!nbr->ref) {
   22c14:	5c62      	ldrb	r2, [r4, r1]
   22c16:	2a00      	cmp	r2, #0
   22c18:	d0f4      	beq.n	22c04 <net_route_get_nbr+0x8>
		if (nbr->data == (u8_t *)route) {
   22c1a:	68c2      	ldr	r2, [r0, #12]
   22c1c:	42aa      	cmp	r2, r5
   22c1e:	d1f1      	bne.n	22c04 <net_route_get_nbr+0x8>
   22c20:	e000      	b.n	22c24 <net_route_get_nbr+0x28>
	return NULL;
   22c22:	2000      	movs	r0, #0
}
   22c24:	bc30      	pop	{r4, r5}
   22c26:	4770      	bx	lr
   22c28:	2000c86c 	.word	0x2000c86c

00022c2c <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   22c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c30:	b083      	sub	sp, #12
   22c32:	4606      	mov	r6, r0
   22c34:	9101      	str	r1, [sp, #4]
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22c36:	2400      	movs	r4, #0
	u8_t longest_match = 0;
   22c38:	4625      	mov	r5, r4
	struct net_route_entry *route, *found = NULL;
   22c3a:	4627      	mov	r7, r4
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22c3c:	e00b      	b.n	22c56 <net_route_lookup+0x2a>
	return (struct net_route_entry *)nbr->data;
   22c3e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22c42:	00da      	lsls	r2, r3, #3
   22c44:	4b3f      	ldr	r3, [pc, #252]	; (22d44 <net_route_lookup+0x118>)
   22c46:	4413      	add	r3, r2
   22c48:	f8d3 800c 	ldr.w	r8, [r3, #12]
			continue;
		}

		route = net_route_data(nbr);

		if (route->prefix_len >= longest_match &&
   22c4c:	f898 3020 	ldrb.w	r3, [r8, #32]
   22c50:	429d      	cmp	r5, r3
   22c52:	d917      	bls.n	22c84 <net_route_lookup+0x58>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22c54:	3401      	adds	r4, #1
   22c56:	2c07      	cmp	r4, #7
   22c58:	dc46      	bgt.n	22ce8 <net_route_lookup+0xbc>
   22c5a:	f015 0f80 	tst.w	r5, #128	; 0x80
   22c5e:	d143      	bne.n	22ce8 <net_route_lookup+0xbc>
		if (!nbr->ref) {
   22c60:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   22c64:	00d3      	lsls	r3, r2, #3
   22c66:	4a37      	ldr	r2, [pc, #220]	; (22d44 <net_route_lookup+0x118>)
   22c68:	5cd3      	ldrb	r3, [r2, r3]
   22c6a:	2b00      	cmp	r3, #0
   22c6c:	d0f2      	beq.n	22c54 <net_route_lookup+0x28>
		if (iface && nbr->iface != iface) {
   22c6e:	2e00      	cmp	r6, #0
   22c70:	d0e5      	beq.n	22c3e <net_route_lookup+0x12>
   22c72:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22c76:	00da      	lsls	r2, r3, #3
   22c78:	4b32      	ldr	r3, [pc, #200]	; (22d44 <net_route_lookup+0x118>)
   22c7a:	4413      	add	r3, r2
   22c7c:	689b      	ldr	r3, [r3, #8]
   22c7e:	429e      	cmp	r6, r3
   22c80:	d1e8      	bne.n	22c54 <net_route_lookup+0x28>
   22c82:	e7dc      	b.n	22c3e <net_route_lookup+0x12>
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   22c84:	f108 0910 	add.w	r9, r8, #16
	u8_t bits = 128 - length;
   22c88:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   22c8c:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   22c90:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   22c94:	2b80      	cmp	r3, #128	; 0x80
   22c96:	d906      	bls.n	22ca6 <net_route_lookup+0x7a>
		return false;
   22c98:	2300      	movs	r3, #0
		if (route->prefix_len >= longest_match &&
   22c9a:	2b00      	cmp	r3, #0
   22c9c:	d0da      	beq.n	22c54 <net_route_lookup+0x28>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   22c9e:	f898 5020 	ldrb.w	r5, [r8, #32]
			found = route;
   22ca2:	4647      	mov	r7, r8
   22ca4:	e7d6      	b.n	22c54 <net_route_lookup+0x28>
	if (memcmp(addr1, addr2, bytes)) {
   22ca6:	465a      	mov	r2, fp
   22ca8:	4649      	mov	r1, r9
   22caa:	9801      	ldr	r0, [sp, #4]
   22cac:	f007 fd70 	bl	2a790 <memcmp>
   22cb0:	b9b0      	cbnz	r0, 22ce0 <net_route_lookup+0xb4>
	if (!remain) {
   22cb2:	f1ba 0f00 	cmp.w	sl, #0
   22cb6:	d015      	beq.n	22ce4 <net_route_lookup+0xb8>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   22cb8:	f1ca 0208 	rsb	r2, sl, #8
   22cbc:	23ff      	movs	r3, #255	; 0xff
   22cbe:	4093      	lsls	r3, r2
   22cc0:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   22cc4:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   22cc8:	9b01      	ldr	r3, [sp, #4]
   22cca:	f813 300b 	ldrb.w	r3, [r3, fp]
   22cce:	f819 200b 	ldrb.w	r2, [r9, fp]
   22cd2:	4053      	eors	r3, r2
   22cd4:	ea1a 0f03 	tst.w	sl, r3
   22cd8:	bf0c      	ite	eq
   22cda:	2301      	moveq	r3, #1
   22cdc:	2300      	movne	r3, #0
   22cde:	e7dc      	b.n	22c9a <net_route_lookup+0x6e>
		return false;
   22ce0:	2300      	movs	r3, #0
   22ce2:	e7da      	b.n	22c9a <net_route_lookup+0x6e>
		return true;
   22ce4:	2301      	movs	r3, #1
   22ce6:	e7d8      	b.n	22c9a <net_route_lookup+0x6e>
		}
	}

	if (found) {
   22ce8:	b1c7      	cbz	r7, 22d1c <net_route_lookup+0xf0>
	sys_slist_find_and_remove(&routes, &route->node);
   22cea:	463a      	mov	r2, r7
	return list->head;
   22cec:	4b16      	ldr	r3, [pc, #88]	; (22d48 <net_route_lookup+0x11c>)
   22cee:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   22cf0:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22cf2:	b16b      	cbz	r3, 22d10 <net_route_lookup+0xe4>
		if (test == node) {
   22cf4:	429a      	cmp	r2, r3
   22cf6:	d002      	beq.n	22cfe <net_route_lookup+0xd2>
		prev = test;
   22cf8:	4619      	mov	r1, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22cfa:	681b      	ldr	r3, [r3, #0]
   22cfc:	e7f9      	b.n	22cf2 <net_route_lookup+0xc6>
	if (!prev_node) {
   22cfe:	b189      	cbz	r1, 22d24 <net_route_lookup+0xf8>
		prev_node->next = node->next;
   22d00:	683b      	ldr	r3, [r7, #0]
   22d02:	600b      	str	r3, [r1, #0]
		if (list->tail == node) {
   22d04:	4b10      	ldr	r3, [pc, #64]	; (22d48 <net_route_lookup+0x11c>)
   22d06:	685b      	ldr	r3, [r3, #4]
   22d08:	429a      	cmp	r2, r3
   22d0a:	d014      	beq.n	22d36 <net_route_lookup+0x10a>
	node->next = NULL;
   22d0c:	2300      	movs	r3, #0
   22d0e:	603b      	str	r3, [r7, #0]
	node->next = list->head;
   22d10:	4b0d      	ldr	r3, [pc, #52]	; (22d48 <net_route_lookup+0x11c>)
   22d12:	6819      	ldr	r1, [r3, #0]
   22d14:	6039      	str	r1, [r7, #0]
	list->head = node;
   22d16:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
   22d18:	685b      	ldr	r3, [r3, #4]
   22d1a:	b17b      	cbz	r3, 22d3c <net_route_lookup+0x110>

		update_route_access(found);
	}

	return found;
}
   22d1c:	4638      	mov	r0, r7
   22d1e:	b003      	add	sp, #12
   22d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		list->head = node->next;
   22d24:	6839      	ldr	r1, [r7, #0]
   22d26:	4b08      	ldr	r3, [pc, #32]	; (22d48 <net_route_lookup+0x11c>)
   22d28:	6019      	str	r1, [r3, #0]
		if (list->tail == node) {
   22d2a:	685b      	ldr	r3, [r3, #4]
   22d2c:	429a      	cmp	r2, r3
   22d2e:	d1ed      	bne.n	22d0c <net_route_lookup+0xe0>
			list->tail = list->head;
   22d30:	4b05      	ldr	r3, [pc, #20]	; (22d48 <net_route_lookup+0x11c>)
   22d32:	6059      	str	r1, [r3, #4]
   22d34:	e7ea      	b.n	22d0c <net_route_lookup+0xe0>
			list->tail = prev_node;
   22d36:	4b04      	ldr	r3, [pc, #16]	; (22d48 <net_route_lookup+0x11c>)
   22d38:	6059      	str	r1, [r3, #4]
   22d3a:	e7e7      	b.n	22d0c <net_route_lookup+0xe0>
		list->tail = list->head;
   22d3c:	4b02      	ldr	r3, [pc, #8]	; (22d48 <net_route_lookup+0x11c>)
   22d3e:	605a      	str	r2, [r3, #4]
	return found;
   22d40:	e7ec      	b.n	22d1c <net_route_lookup+0xf0>
   22d42:	bf00      	nop
   22d44:	2000c86c 	.word	0x2000c86c
   22d48:	200024b4 	.word	0x200024b4

00022d4c <net_route_del>:
int net_route_del(struct net_route_entry *route)
{
	struct net_nbr *nbr;
	struct net_route_nexthop *nexthop_route;

	if (!route) {
   22d4c:	2800      	cmp	r0, #0
   22d4e:	d046      	beq.n	22dde <net_route_del+0x92>
{
   22d50:	b538      	push	{r3, r4, r5, lr}
   22d52:	4604      	mov	r4, r0
		return -EINVAL;
	}

	sys_slist_find_and_remove(&routes, &route->node);
   22d54:	4601      	mov	r1, r0
	return list->head;
   22d56:	4b25      	ldr	r3, [pc, #148]	; (22dec <net_route_del+0xa0>)
   22d58:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   22d5a:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22d5c:	b16b      	cbz	r3, 22d7a <net_route_del+0x2e>
		if (test == node) {
   22d5e:	4299      	cmp	r1, r3
   22d60:	d002      	beq.n	22d68 <net_route_del+0x1c>
		prev = test;
   22d62:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22d64:	681b      	ldr	r3, [r3, #0]
   22d66:	e7f9      	b.n	22d5c <net_route_del+0x10>
	if (!prev_node) {
   22d68:	b1aa      	cbz	r2, 22d96 <net_route_del+0x4a>
		prev_node->next = node->next;
   22d6a:	6823      	ldr	r3, [r4, #0]
   22d6c:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   22d6e:	4b1f      	ldr	r3, [pc, #124]	; (22dec <net_route_del+0xa0>)
   22d70:	685b      	ldr	r3, [r3, #4]
   22d72:	429c      	cmp	r4, r3
   22d74:	d018      	beq.n	22da8 <net_route_del+0x5c>
	node->next = NULL;
   22d76:	2300      	movs	r3, #0
   22d78:	6023      	str	r3, [r4, #0]

	nbr = net_route_get_nbr(route);
   22d7a:	4620      	mov	r0, r4
   22d7c:	f7ff ff3e 	bl	22bfc <net_route_get_nbr>
	if (!nbr) {
   22d80:	4605      	mov	r5, r0
   22d82:	2800      	cmp	r0, #0
   22d84:	d02e      	beq.n	22de4 <net_route_del+0x98>
   22d86:	2300      	movs	r3, #0
   22d88:	461a      	mov	r2, r3
   22d8a:	6881      	ldr	r1, [r0, #8]
   22d8c:	4818      	ldr	r0, [pc, #96]	; (22df0 <net_route_del+0xa4>)
   22d8e:	f000 f977 	bl	23080 <net_mgmt_event_notify_with_info>
	return list->head;
   22d92:	6864      	ldr	r4, [r4, #4]
   22d94:	e011      	b.n	22dba <net_route_del+0x6e>
		list->head = node->next;
   22d96:	6822      	ldr	r2, [r4, #0]
   22d98:	4b14      	ldr	r3, [pc, #80]	; (22dec <net_route_del+0xa0>)
   22d9a:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   22d9c:	685b      	ldr	r3, [r3, #4]
   22d9e:	429c      	cmp	r4, r3
   22da0:	d1e9      	bne.n	22d76 <net_route_del+0x2a>
			list->tail = list->head;
   22da2:	4b12      	ldr	r3, [pc, #72]	; (22dec <net_route_del+0xa0>)
   22da4:	605a      	str	r2, [r3, #4]
   22da6:	e7e6      	b.n	22d76 <net_route_del+0x2a>
			list->tail = prev_node;
   22da8:	4b10      	ldr	r3, [pc, #64]	; (22dec <net_route_del+0xa0>)
   22daa:	605a      	str	r2, [r3, #4]
   22dac:	e7e3      	b.n	22d76 <net_route_del+0x2a>

	net_route_info("Deleted", route, &route->addr);

	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, nbr->iface);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22dae:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22db0:	b154      	cbz	r4, 22dc8 <net_route_del+0x7c>
	return node->next;
   22db2:	6823      	ldr	r3, [r4, #0]
   22db4:	b153      	cbz	r3, 22dcc <net_route_del+0x80>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22db6:	b15a      	cbz	r2, 22dd0 <net_route_del+0x84>
	return node->next;
   22db8:	6824      	ldr	r4, [r4, #0]
   22dba:	b15c      	cbz	r4, 22dd4 <net_route_del+0x88>
		if (!nexthop_route->nbr) {
   22dbc:	6860      	ldr	r0, [r4, #4]
   22dbe:	2800      	cmp	r0, #0
   22dc0:	d0f5      	beq.n	22dae <net_route_del+0x62>
			continue;
		}

		nbr_nexthop_put(nexthop_route->nbr);
   22dc2:	f7ff ff15 	bl	22bf0 <nbr_nexthop_put>
   22dc6:	e7f2      	b.n	22dae <net_route_del+0x62>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22dc8:	4623      	mov	r3, r4
   22dca:	e7f3      	b.n	22db4 <net_route_del+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22dcc:	2400      	movs	r4, #0
   22dce:	e7f4      	b.n	22dba <net_route_del+0x6e>
   22dd0:	2400      	movs	r4, #0
   22dd2:	e7f2      	b.n	22dba <net_route_del+0x6e>
	net_nbr_unref(nbr);
   22dd4:	4628      	mov	r0, r5
   22dd6:	f7fc fae1 	bl	1f39c <net_nbr_unref>
	}

	nbr_free(nbr);

	return 0;
   22dda:	2000      	movs	r0, #0
   22ddc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22dde:	f06f 0015 	mvn.w	r0, #21
   22de2:	4770      	bx	lr
		return -ENOENT;
   22de4:	f06f 0001 	mvn.w	r0, #1
}
   22de8:	bd38      	pop	{r3, r4, r5, pc}
   22dea:	bf00      	nop
   22dec:	200024b4 	.word	0x200024b4
   22df0:	f060000c 	.word	0xf060000c

00022df4 <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   22df4:	b1b8      	cbz	r0, 22e26 <net_route_get_nexthop+0x32>
	return list->head;
   22df6:	6843      	ldr	r3, [r0, #4]
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22df8:	b19b      	cbz	r3, 22e22 <net_route_get_nexthop+0x2e>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   22dfa:	685a      	ldr	r2, [r3, #4]
   22dfc:	7851      	ldrb	r1, [r2, #1]
   22dfe:	29ff      	cmp	r1, #255	; 0xff
   22e00:	d002      	beq.n	22e08 <net_route_get_nexthop+0x14>
   22e02:	68d0      	ldr	r0, [r2, #12]
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		NET_ASSERT(ipv6_nbr_data);

		addr = &ipv6_nbr_data->addr;
   22e04:	3004      	adds	r0, #4
		NET_ASSERT(addr);

		return addr;
   22e06:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22e08:	4619      	mov	r1, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e0a:	b123      	cbz	r3, 22e16 <net_route_get_nexthop+0x22>
	return node->next;
   22e0c:	681a      	ldr	r2, [r3, #0]
   22e0e:	b132      	cbz	r2, 22e1e <net_route_get_nexthop+0x2a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e10:	b119      	cbz	r1, 22e1a <net_route_get_nexthop+0x26>
	return node->next;
   22e12:	681b      	ldr	r3, [r3, #0]
   22e14:	e7f0      	b.n	22df8 <net_route_get_nexthop+0x4>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e16:	461a      	mov	r2, r3
   22e18:	e7f9      	b.n	22e0e <net_route_get_nexthop+0x1a>
   22e1a:	2300      	movs	r3, #0
   22e1c:	e7ec      	b.n	22df8 <net_route_get_nexthop+0x4>
   22e1e:	2300      	movs	r3, #0
   22e20:	e7ea      	b.n	22df8 <net_route_get_nexthop+0x4>
	}

	return NULL;
   22e22:	2000      	movs	r0, #0
   22e24:	4770      	bx	lr
		return NULL;
   22e26:	2000      	movs	r0, #0
}
   22e28:	4770      	bx	lr
	...

00022e2c <net_route_foreach>:

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
   22e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22e2e:	4607      	mov	r7, r0
   22e30:	460e      	mov	r6, r1
	int i, ret = 0;
   22e32:	2500      	movs	r5, #0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   22e34:	462c      	mov	r4, r5
   22e36:	e000      	b.n	22e3a <net_route_foreach+0xe>
   22e38:	3401      	adds	r4, #1
   22e3a:	2c07      	cmp	r4, #7
   22e3c:	dc0b      	bgt.n	22e56 <net_route_foreach+0x2a>
	return (struct net_route_entry *)nbr->data;
   22e3e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22e42:	00da      	lsls	r2, r3, #3
   22e44:	4b05      	ldr	r3, [pc, #20]	; (22e5c <net_route_foreach+0x30>)
   22e46:	4413      	add	r3, r2
   22e48:	68d8      	ldr	r0, [r3, #12]
		if (!nbr) {
			continue;
		}

		route = net_route_data(nbr);
		if (!route) {
   22e4a:	2800      	cmp	r0, #0
   22e4c:	d0f4      	beq.n	22e38 <net_route_foreach+0xc>
			continue;
		}

		cb(route, user_data);
   22e4e:	4631      	mov	r1, r6
   22e50:	47b8      	blx	r7

		ret++;
   22e52:	3501      	adds	r5, #1
   22e54:	e7f0      	b.n	22e38 <net_route_foreach+0xc>
	}

	return ret;
}
   22e56:	4628      	mov	r0, r5
   22e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22e5a:	bf00      	nop
   22e5c:	2000c86c 	.word	0x2000c86c

00022e60 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   22e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22e62:	4607      	mov	r7, r0
   22e64:	460c      	mov	r4, r1
   22e66:	4615      	mov	r5, r2
   22e68:	461e      	mov	r6, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   22e6a:	f7fd f961 	bl	20130 <net_ipv6_nbr_lookup>
   22e6e:	b120      	cbz	r0, 22e7a <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   22e70:	2300      	movs	r3, #0
   22e72:	602b      	str	r3, [r5, #0]
		*nexthop = dst;
   22e74:	6034      	str	r4, [r6, #0]

		return true;
   22e76:	2001      	movs	r0, #1
   22e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	*route = net_route_lookup(iface, dst);
   22e7a:	4621      	mov	r1, r4
   22e7c:	4638      	mov	r0, r7
   22e7e:	f7ff fed5 	bl	22c2c <net_route_lookup>
   22e82:	6028      	str	r0, [r5, #0]
	if (*route) {
   22e84:	b130      	cbz	r0, 22e94 <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   22e86:	f7ff ffb5 	bl	22df4 <net_route_get_nexthop>
   22e8a:	6030      	str	r0, [r6, #0]
		if (!*nexthop) {
   22e8c:	b108      	cbz	r0, 22e92 <net_route_get_info+0x32>
			return false;
		}

		return true;
   22e8e:	2001      	movs	r0, #1
   22e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		/* No specific route to this host, use the default
		 * route instead.
		 */
		router = net_if_ipv6_router_find_default(NULL, dst);
   22e94:	4621      	mov	r1, r4
   22e96:	2000      	movs	r0, #0
   22e98:	f7f8 fefe 	bl	1bc98 <net_if_ipv6_router_find_default>
		if (!router) {
   22e9c:	4603      	mov	r3, r0
   22e9e:	b118      	cbz	r0, 22ea8 <net_route_get_info+0x48>
			return false;
		}

		*nexthop = &router->address.in6_addr;
   22ea0:	332c      	adds	r3, #44	; 0x2c
   22ea2:	6033      	str	r3, [r6, #0]

		return true;
   22ea4:	2001      	movs	r0, #1
   22ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   22ea8:	2000      	movs	r0, #0
	}

	return false;
}
   22eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022eac <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   22eac:	b570      	push	{r4, r5, r6, lr}
   22eae:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(net_pkt_iface(pkt), nexthop);
   22eb0:	6940      	ldr	r0, [r0, #20]
   22eb2:	f7fd f93d 	bl	20130 <net_ipv6_nbr_lookup>
	if (!nbr) {
   22eb6:	b330      	cbz	r0, 22f06 <net_route_packet+0x5a>
		NET_DBG("Cannot find %s neighbor.",
			net_sprint_ipv6_addr(nexthop));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   22eb8:	7840      	ldrb	r0, [r0, #1]
   22eba:	f7fc fb01 	bl	1f4c0 <net_nbr_get_lladdr>
	if (!lladdr) {
   22ebe:	4605      	mov	r5, r0
   22ec0:	b320      	cbz	r0, 22f0c <net_route_packet+0x60>
		NET_DBG("Cannot find %s neighbor link layer address.",
			net_sprint_ipv6_addr(nexthop));
		return -ESRCH;
	}

	if (!net_pkt_ll_src(pkt)->addr) {
   22ec2:	6a20      	ldr	r0, [r4, #32]
   22ec4:	b328      	cbz	r0, 22f12 <net_route_packet+0x66>
	}

	/* Sanitycheck: If src and dst ll addresses are going to be same,
	 * then something went wrong in route lookup.
	 */
	if (!memcmp(net_pkt_ll_src(pkt)->addr, lladdr->addr, lladdr->len)) {
   22ec6:	1cae      	adds	r6, r5, #2
   22ec8:	786a      	ldrb	r2, [r5, #1]
   22eca:	4631      	mov	r1, r6
   22ecc:	f007 fc60 	bl	2a790 <memcmp>
   22ed0:	b310      	cbz	r0, 22f18 <net_route_packet+0x6c>
	pkt->forwarding = forward;
   22ed2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   22ed6:	f043 0304 	orr.w	r3, r3, #4
   22eda:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return net_if_get_link_addr(pkt->iface);
   22ede:	6963      	ldr	r3, [r4, #20]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   22ee0:	691a      	ldr	r2, [r3, #16]
   22ee2:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->type = net_pkt_ll_if(pkt)->type;
   22ee4:	7d5a      	ldrb	r2, [r3, #21]
   22ee6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   22eea:	7d1b      	ldrb	r3, [r3, #20]
   22eec:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   22ef0:	62a6      	str	r6, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->type = lladdr->type;
   22ef2:	782b      	ldrb	r3, [r5, #0]
   22ef4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_ll_dst(pkt)->len = lladdr->len;
   22ef8:	786b      	ldrb	r3, [r5, #1]
   22efa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	return net_send_data(pkt);
   22efe:	4620      	mov	r0, r4
   22f00:	f7f8 f84a 	bl	1af98 <net_send_data>
   22f04:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   22f06:	f06f 0001 	mvn.w	r0, #1
   22f0a:	bd70      	pop	{r4, r5, r6, pc}
		return -ESRCH;
   22f0c:	f06f 0002 	mvn.w	r0, #2
   22f10:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22f12:	f06f 0015 	mvn.w	r0, #21
   22f16:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22f18:	f06f 0015 	mvn.w	r0, #21
}
   22f1c:	bd70      	pop	{r4, r5, r6, pc}

00022f1e <net_route_init>:

void net_route_init(void)
{
   22f1e:	4770      	bx	lr

00022f20 <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   22f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22f22:	e079      	b.n	23018 <mgmt_thread+0xf8>
		out_event = 0;
   22f24:	2100      	movs	r1, #0
   22f26:	4a48      	ldr	r2, [pc, #288]	; (23048 <mgmt_thread+0x128>)
   22f28:	8011      	strh	r1, [r2, #0]
   22f2a:	e089      	b.n	23040 <mgmt_thread+0x120>
		return NULL;
   22f2c:	2600      	movs	r6, #0
		k_sem_take(&network_event, K_FOREVER);

		NET_DBG("Handling events, forwarding it relevantly");

		mgmt_event = mgmt_pop_event();
		if (!mgmt_event) {
   22f2e:	b13e      	cbz	r6, 22f40 <mgmt_thread+0x20>
	return list->head;
   22f30:	4b46      	ldr	r3, [pc, #280]	; (2304c <mgmt_thread+0x12c>)
   22f32:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22f34:	b15d      	cbz	r5, 22f4e <mgmt_thread+0x2e>
   22f36:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22f38:	b105      	cbz	r5, 22f3c <mgmt_thread+0x1c>
	return node->next;
   22f3a:	682c      	ldr	r4, [r5, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22f3c:	2700      	movs	r7, #0
   22f3e:	e01f      	b.n	22f80 <mgmt_thread+0x60>
   22f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22f44:	2100      	movs	r1, #0
   22f46:	4842      	ldr	r0, [pc, #264]	; (23050 <mgmt_thread+0x130>)
   22f48:	f006 f9fa 	bl	29340 <_impl_k_sem_init>
			NET_DBG("Some event got probably lost (%u)",
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);

			continue;
   22f4c:	e064      	b.n	23018 <mgmt_thread+0xf8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22f4e:	462c      	mov	r4, r5
   22f50:	e7f4      	b.n	22f3c <mgmt_thread+0x1c>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   22f52:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   22f56:	d04c      	beq.n	22ff2 <mgmt_thread+0xd2>
			struct mgmt_event_wait *sync_data =
   22f58:	686a      	ldr	r2, [r5, #4]
			if (sync_data->iface &&
   22f5a:	6993      	ldr	r3, [r2, #24]
   22f5c:	2b00      	cmp	r3, #0
   22f5e:	d02c      	beq.n	22fba <mgmt_thread+0x9a>
			    sync_data->iface != mgmt_event->iface) {
   22f60:	6870      	ldr	r0, [r6, #4]
			if (sync_data->iface &&
   22f62:	4283      	cmp	r3, r0
   22f64:	d029      	beq.n	22fba <mgmt_thread+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22f66:	2c00      	cmp	r4, #0
   22f68:	d04b      	beq.n	23002 <mgmt_thread+0xe2>
   22f6a:	4622      	mov	r2, r4
   22f6c:	2c00      	cmp	r4, #0
   22f6e:	d046      	beq.n	22ffe <mgmt_thread+0xde>
	return node->next;
   22f70:	6823      	ldr	r3, [r4, #0]
   22f72:	2b00      	cmp	r3, #0
   22f74:	d047      	beq.n	23006 <mgmt_thread+0xe6>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22f76:	2a00      	cmp	r2, #0
   22f78:	d047      	beq.n	2300a <mgmt_thread+0xea>
	return node->next;
   22f7a:	6823      	ldr	r3, [r4, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22f7c:	4625      	mov	r5, r4
   22f7e:	461c      	mov	r4, r3
   22f80:	2d00      	cmp	r5, #0
   22f82:	d044      	beq.n	2300e <mgmt_thread+0xee>
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   22f84:	6831      	ldr	r1, [r6, #0]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   22f86:	68aa      	ldr	r2, [r5, #8]
   22f88:	0f13      	lsrs	r3, r2, #28
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   22f8a:	ea03 7311 	and.w	r3, r3, r1, lsr #28
   22f8e:	f013 0f03 	tst.w	r3, #3
   22f92:	d0e8      	beq.n	22f66 <mgmt_thread+0x46>
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   22f94:	0c13      	lsrs	r3, r2, #16
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) &
   22f96:	ea03 4311 	and.w	r3, r3, r1, lsr #16
   22f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   22f9e:	2b00      	cmp	r3, #0
   22fa0:	d0e1      	beq.n	22f66 <mgmt_thread+0x46>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   22fa2:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   22fa4:	2b00      	cmp	r3, #0
   22fa6:	d0d4      	beq.n	22f52 <mgmt_thread+0x32>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   22fa8:	b293      	uxth	r3, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   22faa:	2b00      	cmp	r3, #0
   22fac:	d0d1      	beq.n	22f52 <mgmt_thread+0x32>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
   22fae:	ea01 0302 	and.w	r3, r1, r2
   22fb2:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   22fb4:	2b00      	cmp	r3, #0
   22fb6:	d0d6      	beq.n	22f66 <mgmt_thread+0x46>
   22fb8:	e7cb      	b.n	22f52 <mgmt_thread+0x32>
			cb->raised_event = mgmt_event->event;
   22fba:	60a9      	str	r1, [r5, #8]
			sync_data->iface = mgmt_event->iface;
   22fbc:	6873      	ldr	r3, [r6, #4]
   22fbe:	6193      	str	r3, [r2, #24]
	if (!prev_node) {
   22fc0:	b15f      	cbz	r7, 22fda <mgmt_thread+0xba>
		prev_node->next = node->next;
   22fc2:	682b      	ldr	r3, [r5, #0]
   22fc4:	603b      	str	r3, [r7, #0]
		if (list->tail == node) {
   22fc6:	4b21      	ldr	r3, [pc, #132]	; (2304c <mgmt_thread+0x12c>)
   22fc8:	685b      	ldr	r3, [r3, #4]
   22fca:	429d      	cmp	r5, r3
   22fcc:	d00e      	beq.n	22fec <mgmt_thread+0xcc>
	node->next = NULL;
   22fce:	2300      	movs	r3, #0
   22fd0:	602b      	str	r3, [r5, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   22fd2:	6868      	ldr	r0, [r5, #4]
   22fd4:	f006 f9bd 	bl	29352 <_impl_k_sem_give>
   22fd8:	e7c5      	b.n	22f66 <mgmt_thread+0x46>
		list->head = node->next;
   22fda:	682a      	ldr	r2, [r5, #0]
   22fdc:	4b1b      	ldr	r3, [pc, #108]	; (2304c <mgmt_thread+0x12c>)
   22fde:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   22fe0:	685b      	ldr	r3, [r3, #4]
   22fe2:	429d      	cmp	r5, r3
   22fe4:	d1f3      	bne.n	22fce <mgmt_thread+0xae>
			list->tail = list->head;
   22fe6:	4b19      	ldr	r3, [pc, #100]	; (2304c <mgmt_thread+0x12c>)
   22fe8:	605a      	str	r2, [r3, #4]
   22fea:	e7f0      	b.n	22fce <mgmt_thread+0xae>
			list->tail = prev_node;
   22fec:	4b17      	ldr	r3, [pc, #92]	; (2304c <mgmt_thread+0x12c>)
   22fee:	605f      	str	r7, [r3, #4]
   22ff0:	e7ed      	b.n	22fce <mgmt_thread+0xae>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   22ff2:	686b      	ldr	r3, [r5, #4]
   22ff4:	6872      	ldr	r2, [r6, #4]
   22ff6:	4628      	mov	r0, r5
   22ff8:	4798      	blx	r3
			prev = &cb->node;
   22ffa:	462f      	mov	r7, r5
   22ffc:	e7b3      	b.n	22f66 <mgmt_thread+0x46>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22ffe:	4623      	mov	r3, r4
   23000:	e7b7      	b.n	22f72 <mgmt_thread+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   23002:	4623      	mov	r3, r4
   23004:	e7ba      	b.n	22f7c <mgmt_thread+0x5c>
   23006:	2300      	movs	r3, #0
   23008:	e7b8      	b.n	22f7c <mgmt_thread+0x5c>
   2300a:	2300      	movs	r3, #0
   2300c:	e7b6      	b.n	22f7c <mgmt_thread+0x5c>
	mgmt_event->event = 0;
   2300e:	2300      	movs	r3, #0
   23010:	6033      	str	r3, [r6, #0]
	mgmt_event->iface = NULL;
   23012:	6073      	str	r3, [r6, #4]
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   23014:	f006 f844 	bl	290a0 <_impl_k_yield>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   23018:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2301c:	480c      	ldr	r0, [pc, #48]	; (23050 <mgmt_thread+0x130>)
   2301e:	f006 f9ab 	bl	29378 <_impl_k_sem_take>
	if (!events[out_event].event) {
   23022:	4b09      	ldr	r3, [pc, #36]	; (23048 <mgmt_thread+0x128>)
   23024:	881b      	ldrh	r3, [r3, #0]
   23026:	4a0b      	ldr	r2, [pc, #44]	; (23054 <mgmt_thread+0x134>)
   23028:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   2302c:	2a00      	cmp	r2, #0
   2302e:	f43f af7d 	beq.w	22f2c <mgmt_thread+0xc>
	out_event++;
   23032:	1c5a      	adds	r2, r3, #1
   23034:	b292      	uxth	r2, r2
   23036:	4904      	ldr	r1, [pc, #16]	; (23048 <mgmt_thread+0x128>)
   23038:	800a      	strh	r2, [r1, #0]
	if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   2303a:	2a02      	cmp	r2, #2
   2303c:	f43f af72 	beq.w	22f24 <mgmt_thread+0x4>
	return &events[o_idx];
   23040:	4e04      	ldr	r6, [pc, #16]	; (23054 <mgmt_thread+0x134>)
   23042:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   23046:	e772      	b.n	22f2e <mgmt_thread+0xe>
   23048:	20002544 	.word	0x20002544
   2304c:	200024bc 	.word	0x200024bc
   23050:	2000d620 	.word	0x2000d620
   23054:	200024c4 	.word	0x200024c4

00023058 <net_mgmt_add_event_callback>:
	node->next = list->head;
   23058:	4b07      	ldr	r3, [pc, #28]	; (23078 <net_mgmt_add_event_callback+0x20>)
   2305a:	681a      	ldr	r2, [r3, #0]
   2305c:	6002      	str	r2, [r0, #0]
	list->head = node;
   2305e:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   23060:	685b      	ldr	r3, [r3, #4]
   23062:	b12b      	cbz	r3, 23070 <net_mgmt_add_event_callback+0x18>
{
	NET_DBG("Adding event callback %p", cb);

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);
   23064:	6881      	ldr	r1, [r0, #8]
	global_event_mask |= event_mask;
   23066:	4a05      	ldr	r2, [pc, #20]	; (2307c <net_mgmt_add_event_callback+0x24>)
   23068:	6813      	ldr	r3, [r2, #0]
   2306a:	430b      	orrs	r3, r1
   2306c:	6013      	str	r3, [r2, #0]
   2306e:	4770      	bx	lr
		list->tail = list->head;
   23070:	4b01      	ldr	r3, [pc, #4]	; (23078 <net_mgmt_add_event_callback+0x20>)
   23072:	6058      	str	r0, [r3, #4]
   23074:	e7f6      	b.n	23064 <net_mgmt_add_event_callback+0xc>
   23076:	bf00      	nop
   23078:	200024bc 	.word	0x200024bc
   2307c:	200024d4 	.word	0x200024d4

00023080 <net_mgmt_event_notify_with_info>:
	return ((mgmt_event & global_event_mask) == mgmt_event);
   23080:	4b17      	ldr	r3, [pc, #92]	; (230e0 <net_mgmt_event_notify_with_info+0x60>)
   23082:	681b      	ldr	r3, [r3, #0]
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
	if (mgmt_is_event_handled(mgmt_event)) {
   23084:	ea30 0303 	bics.w	r3, r0, r3
   23088:	d000      	beq.n	2308c <net_mgmt_event_notify_with_info+0xc>
   2308a:	4770      	bx	lr
{
   2308c:	b510      	push	{r4, lr}
	events[in_event].event = mgmt_event;
   2308e:	4c15      	ldr	r4, [pc, #84]	; (230e4 <net_mgmt_event_notify_with_info+0x64>)
   23090:	8823      	ldrh	r3, [r4, #0]
   23092:	4a15      	ldr	r2, [pc, #84]	; (230e8 <net_mgmt_event_notify_with_info+0x68>)
   23094:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
	events[in_event].iface = iface;
   23098:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2309c:	6051      	str	r1, [r2, #4]
	in_event++;
   2309e:	3301      	adds	r3, #1
   230a0:	b29b      	uxth	r3, r3
   230a2:	8023      	strh	r3, [r4, #0]
	if (in_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   230a4:	2b02      	cmp	r3, #2
   230a6:	d009      	beq.n	230bc <net_mgmt_event_notify_with_info+0x3c>
	if (in_event == out_event) {
   230a8:	4b0e      	ldr	r3, [pc, #56]	; (230e4 <net_mgmt_event_notify_with_info+0x64>)
   230aa:	881a      	ldrh	r2, [r3, #0]
   230ac:	4b0f      	ldr	r3, [pc, #60]	; (230ec <net_mgmt_event_notify_with_info+0x6c>)
   230ae:	881b      	ldrh	r3, [r3, #0]
   230b0:	429a      	cmp	r2, r3
   230b2:	d006      	beq.n	230c2 <net_mgmt_event_notify_with_info+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   230b4:	480e      	ldr	r0, [pc, #56]	; (230f0 <net_mgmt_event_notify_with_info+0x70>)
   230b6:	f006 f94c 	bl	29352 <_impl_k_sem_give>
   230ba:	bd10      	pop	{r4, pc}
		in_event = 0;
   230bc:	2200      	movs	r2, #0
   230be:	8022      	strh	r2, [r4, #0]
   230c0:	e7f2      	b.n	230a8 <net_mgmt_event_notify_with_info+0x28>
		u16_t o_idx = out_event + 1;
   230c2:	3301      	adds	r3, #1
   230c4:	b29b      	uxth	r3, r3
		if (o_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   230c6:	2b02      	cmp	r3, #2
   230c8:	d007      	beq.n	230da <net_mgmt_event_notify_with_info+0x5a>
		if (events[o_idx].event) {
   230ca:	4a07      	ldr	r2, [pc, #28]	; (230e8 <net_mgmt_event_notify_with_info+0x68>)
   230cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   230d0:	2a00      	cmp	r2, #0
   230d2:	d0ef      	beq.n	230b4 <net_mgmt_event_notify_with_info+0x34>
			out_event = o_idx;
   230d4:	4a05      	ldr	r2, [pc, #20]	; (230ec <net_mgmt_event_notify_with_info+0x6c>)
   230d6:	8013      	strh	r3, [r2, #0]
   230d8:	e7ec      	b.n	230b4 <net_mgmt_event_notify_with_info+0x34>
			o_idx = 0;
   230da:	2300      	movs	r3, #0
   230dc:	e7f5      	b.n	230ca <net_mgmt_event_notify_with_info+0x4a>
   230de:	bf00      	nop
   230e0:	200024d4 	.word	0x200024d4
   230e4:	200024d8 	.word	0x200024d8
   230e8:	200024c4 	.word	0x200024c4
   230ec:	20002544 	.word	0x20002544
   230f0:	2000d620 	.word	0x2000d620

000230f4 <net_mgmt_event_init>:
	return mgmt_event_wait_call(iface, mgmt_event_mask,
				    raised_event, NULL, info, timeout);
}

void net_mgmt_event_init(void)
{
   230f4:	b510      	push	{r4, lr}
   230f6:	b086      	sub	sp, #24
	list->head = NULL;
   230f8:	4b0f      	ldr	r3, [pc, #60]	; (23138 <net_mgmt_event_init+0x44>)
   230fa:	2400      	movs	r4, #0
   230fc:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   230fe:	605c      	str	r4, [r3, #4]
	sys_slist_init(&event_callbacks);
	global_event_mask = 0;
   23100:	4b0e      	ldr	r3, [pc, #56]	; (2313c <net_mgmt_event_init+0x48>)
   23102:	601c      	str	r4, [r3, #0]

	in_event = 0;
   23104:	4b0e      	ldr	r3, [pc, #56]	; (23140 <net_mgmt_event_init+0x4c>)
   23106:	801c      	strh	r4, [r3, #0]
	out_event = 0;
   23108:	4b0e      	ldr	r3, [pc, #56]	; (23144 <net_mgmt_event_init+0x50>)
   2310a:	801c      	strh	r4, [r3, #0]

	memset(events, 0,
   2310c:	2210      	movs	r2, #16
   2310e:	4621      	mov	r1, r4
   23110:	480d      	ldr	r0, [pc, #52]	; (23148 <net_mgmt_event_init+0x54>)
   23112:	f007 fbd1 	bl	2a8b8 <memset>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   23116:	9405      	str	r4, [sp, #20]
   23118:	9404      	str	r4, [sp, #16]
   2311a:	f06f 0308 	mvn.w	r3, #8
   2311e:	9303      	str	r3, [sp, #12]
   23120:	9402      	str	r4, [sp, #8]
   23122:	9401      	str	r4, [sp, #4]
   23124:	9400      	str	r4, [sp, #0]
   23126:	4b09      	ldr	r3, [pc, #36]	; (2314c <net_mgmt_event_init+0x58>)
   23128:	f44f 7200 	mov.w	r2, #512	; 0x200
   2312c:	4908      	ldr	r1, [pc, #32]	; (23150 <net_mgmt_event_init+0x5c>)
   2312e:	4809      	ldr	r0, [pc, #36]	; (23154 <net_mgmt_event_init+0x60>)
   23130:	f006 fb8e 	bl	29850 <_impl_k_thread_create>
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   23134:	b006      	add	sp, #24
   23136:	bd10      	pop	{r4, pc}
   23138:	200024bc 	.word	0x200024bc
   2313c:	200024d4 	.word	0x200024d4
   23140:	200024d8 	.word	0x200024d8
   23144:	20002544 	.word	0x20002544
   23148:	200024c4 	.word	0x200024c4
   2314c:	00022f21 	.word	0x00022f21
   23150:	20009ea8 	.word	0x20009ea8
   23154:	200024dc 	.word	0x200024dc

00023158 <net_udp_insert_raw>:

struct net_pkt *net_udp_insert_raw(struct net_pkt *pkt,
				   u16_t offset,
				   u16_t src_port,
				   u16_t dst_port)
{
   23158:	b5f0      	push	{r4, r5, r6, r7, lr}
   2315a:	b085      	sub	sp, #20
   2315c:	4605      	mov	r5, r0
   2315e:	f8ad 2006 	strh.w	r2, [sp, #6]
   23162:	f8ad 3004 	strh.w	r3, [sp, #4]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   23166:	f10d 020e 	add.w	r2, sp, #14
   2316a:	f7fa fde5 	bl	1dd38 <net_frag_get_pos>
	if (!frag && pos == 0xffff) {
   2316e:	4602      	mov	r2, r0
   23170:	b168      	cbz	r0, 2318e <net_udp_insert_raw+0x36>
	}

	/* We can only insert the UDP header between existing two
	 * fragments.
	 */
	if (frag && pos != 0) {
   23172:	b11a      	cbz	r2, 2317c <net_udp_insert_raw+0x24>
   23174:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   23178:	2b00      	cmp	r3, #0
   2317a:	d15c      	bne.n	23236 <net_udp_insert_raw+0xde>
		NET_DBG("Cannot insert UDP data into offset %d", offset);
		return NULL;
	}

	if (pkt->frags != frag) {
   2317c:	68ab      	ldr	r3, [r5, #8]
   2317e:	429a      	cmp	r2, r3
   23180:	d00d      	beq.n	2319e <net_udp_insert_raw+0x46>
		struct net_buf *tmp = pkt->frags;

		prev = NULL;

		while (tmp->frags) {
   23182:	681c      	ldr	r4, [r3, #0]
   23184:	b174      	cbz	r4, 231a4 <net_udp_insert_raw+0x4c>
			if (tmp->frags == frag) {
   23186:	42a2      	cmp	r2, r4
   23188:	d00b      	beq.n	231a2 <net_udp_insert_raw+0x4a>
				prev = tmp;
				break;
			}

			tmp = tmp->frags;
   2318a:	4623      	mov	r3, r4
   2318c:	e7f9      	b.n	23182 <net_udp_insert_raw+0x2a>
	if (!frag && pos == 0xffff) {
   2318e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23192:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23196:	4299      	cmp	r1, r3
   23198:	d1eb      	bne.n	23172 <net_udp_insert_raw+0x1a>
		return NULL;
   2319a:	2000      	movs	r0, #0
   2319c:	e049      	b.n	23232 <net_udp_insert_raw+0xda>
		}
	} else {
		prev = pkt->frags;
   2319e:	461c      	mov	r4, r3
   231a0:	e000      	b.n	231a4 <net_udp_insert_raw+0x4c>
				prev = tmp;
   231a2:	461c      	mov	r4, r3
	}

	if (!prev) {
   231a4:	2c00      	cmp	r4, #0
   231a6:	d048      	beq.n	2323a <net_udp_insert_raw+0xe2>
		goto fail;
	}

	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   231a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   231ac:	4628      	mov	r0, r5
   231ae:	f7fa faa1 	bl	1d6f4 <net_pkt_get_frag>
	if (!udp) {
   231b2:	4607      	mov	r7, r0
   231b4:	2800      	cmp	r0, #0
   231b6:	d042      	beq.n	2323e <net_udp_insert_raw+0xe6>
		goto fail;
	}

	/* Source and destination ports are already in network byte order */
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   231b8:	f100 0608 	add.w	r6, r0, #8
   231bc:	2202      	movs	r2, #2
   231be:	f10d 0106 	add.w	r1, sp, #6
   231c2:	4630      	mov	r0, r6
   231c4:	f7f7 fdcc 	bl	1ad60 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   231c8:	2202      	movs	r2, #2
   231ca:	a901      	add	r1, sp, #4
   231cc:	4630      	mov	r0, r6
   231ce:	f7f7 fdc7 	bl	1ad60 <net_buf_simple_add_mem>
	return net_buf_frags_len(pkt->frags);
   231d2:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   231d4:	2200      	movs	r2, #0
   231d6:	e002      	b.n	231de <net_udp_insert_raw+0x86>
		bytes += buf->len;
   231d8:	8999      	ldrh	r1, [r3, #12]
   231da:	440a      	add	r2, r1
		buf = buf->frags;
   231dc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   231de:	2b00      	cmp	r3, #0
   231e0:	d1fa      	bne.n	231d8 <net_udp_insert_raw+0x80>

	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   231e2:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   231e6:	1a51      	subs	r1, r2, r1
   231e8:	b289      	uxth	r1, r1
   231ea:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
   231ee:	1a89      	subs	r1, r1, r2
   231f0:	b289      	uxth	r1, r1
   231f2:	3108      	adds	r1, #8
   231f4:	b289      	uxth	r1, r1
   231f6:	4630      	mov	r0, r6
   231f8:	f7f7 fdd2 	bl	1ada0 <net_buf_simple_add_be16>
			 net_pkt_ip_hdr_len(pkt) -
			 net_pkt_ipv6_ext_len(pkt) +
			 sizeof(struct net_udp_hdr));

	net_buf_add_be16(udp, 0); /* chksum */
   231fc:	2100      	movs	r1, #0
   231fe:	4630      	mov	r0, r6
   23200:	f7f7 fdce 	bl	1ada0 <net_buf_simple_add_be16>

	net_buf_frag_insert(prev, udp);
   23204:	4639      	mov	r1, r7
   23206:	4620      	mov	r0, r4
   23208:	f7f7 fd7e 	bl	1ad08 <net_buf_frag_insert>

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   2320c:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   23210:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   23214:	4419      	add	r1, r3
   23216:	3108      	adds	r1, #8
   23218:	f10d 020e 	add.w	r2, sp, #14
   2321c:	b289      	uxth	r1, r1
   2321e:	4628      	mov	r0, r5
   23220:	f7fa fd8a 	bl	1dd38 <net_frag_get_pos>
				sizeof(struct net_udp_hdr),
				&pos);
	if (frag) {
   23224:	b168      	cbz	r0, 23242 <net_udp_insert_raw+0xea>
		net_pkt_set_appdata(pkt, frag->data + pos);
   23226:	6883      	ldr	r3, [r0, #8]
   23228:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2322c:	4413      	add	r3, r2
	pkt->appdata = data;
   2322e:	61ab      	str	r3, [r5, #24]
	}

	return pkt;
   23230:	4628      	mov	r0, r5

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   23232:	b005      	add	sp, #20
   23234:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   23236:	2000      	movs	r0, #0
   23238:	e7fb      	b.n	23232 <net_udp_insert_raw+0xda>
	return NULL;
   2323a:	2000      	movs	r0, #0
   2323c:	e7f9      	b.n	23232 <net_udp_insert_raw+0xda>
   2323e:	2000      	movs	r0, #0
   23240:	e7f7      	b.n	23232 <net_udp_insert_raw+0xda>
	return pkt;
   23242:	4628      	mov	r0, r5
   23244:	e7f5      	b.n	23232 <net_udp_insert_raw+0xda>

00023246 <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2324a:	b086      	sub	sp, #24
   2324c:	4606      	mov	r6, r0
   2324e:	460d      	mov	r5, r1
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   23250:	2300      	movs	r3, #0
   23252:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   23256:	f7fa fda5 	bl	1dda4 <net_pkt_udp_data>
   2325a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2325c:	2208      	movs	r2, #8
   2325e:	4601      	mov	r1, r0
   23260:	4630      	mov	r0, r6
   23262:	f7fb f95d 	bl	1e520 <net_header_fits>
   23266:	b170      	cbz	r0, 23286 <net_udp_set_chksum+0x40>
		return hdr;
   23268:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   2326a:	b173      	cbz	r3, 2328a <net_udp_set_chksum+0x44>
		hdr->chksum = 0;
   2326c:	2300      	movs	r3, #0
   2326e:	71a3      	strb	r3, [r4, #6]
   23270:	71e3      	strb	r3, [r4, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   23272:	2111      	movs	r1, #17
   23274:	4630      	mov	r0, r6
   23276:	f7fb f8fa 	bl	1e46e <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   2327a:	43c0      	mvns	r0, r0
   2327c:	80e0      	strh	r0, [r4, #6]

		return frag;
   2327e:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   23280:	b006      	add	sp, #24
   23282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   23286:	2300      	movs	r3, #0
   23288:	e7ef      	b.n	2326a <net_udp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   2328a:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   2328e:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23292:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   23294:	3206      	adds	r2, #6
   23296:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   2329a:	f8cd 8008 	str.w	r8, [sp, #8]
   2329e:	f10d 0416 	add.w	r4, sp, #22
   232a2:	9401      	str	r4, [sp, #4]
   232a4:	2702      	movs	r7, #2
   232a6:	9700      	str	r7, [sp, #0]
   232a8:	ab05      	add	r3, sp, #20
   232aa:	b292      	uxth	r2, r2
   232ac:	4629      	mov	r1, r5
   232ae:	4630      	mov	r0, r6
   232b0:	f7fa fc63 	bl	1db7a <net_pkt_write>
   232b4:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_UDP);
   232b6:	2111      	movs	r1, #17
   232b8:	4630      	mov	r0, r6
   232ba:	f7fb f8d8 	bl	1e46e <net_calc_chksum>
	chksum = ~net_calc_chksum_udp(pkt);
   232be:	43c0      	mvns	r0, r0
   232c0:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   232c4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   232c8:	3a02      	subs	r2, #2
   232ca:	f8cd 8008 	str.w	r8, [sp, #8]
   232ce:	9401      	str	r4, [sp, #4]
   232d0:	9700      	str	r7, [sp, #0]
   232d2:	ab05      	add	r3, sp, #20
   232d4:	b292      	uxth	r2, r2
   232d6:	4629      	mov	r1, r5
   232d8:	4630      	mov	r0, r6
   232da:	f7fa fc4e 	bl	1db7a <net_pkt_write>
	return frag;
   232de:	e7cf      	b.n	23280 <net_udp_set_chksum+0x3a>

000232e0 <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   232e0:	b570      	push	{r4, r5, r6, lr}
   232e2:	b084      	sub	sp, #16
   232e4:	4605      	mov	r5, r0
   232e6:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   232e8:	f7fa fd5c 	bl	1dda4 <net_pkt_udp_data>
   232ec:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   232ee:	2208      	movs	r2, #8
   232f0:	4601      	mov	r1, r0
   232f2:	4628      	mov	r0, r5
   232f4:	f7fb f914 	bl	1e520 <net_header_fits>
   232f8:	b120      	cbz	r0, 23304 <net_udp_get_chksum+0x24>
		return hdr;
   232fa:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   232fc:	b123      	cbz	r3, 23308 <net_udp_get_chksum+0x28>
		return hdr->chksum;
   232fe:	88e0      	ldrh	r0, [r4, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   23300:	b004      	add	sp, #16
   23302:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   23304:	2300      	movs	r3, #0
   23306:	e7f9      	b.n	232fc <net_udp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   23308:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   2330c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23310:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   23312:	3106      	adds	r1, #6
   23314:	f10d 030e 	add.w	r3, sp, #14
   23318:	9300      	str	r3, [sp, #0]
   2331a:	2302      	movs	r3, #2
   2331c:	aa03      	add	r2, sp, #12
   2331e:	b289      	uxth	r1, r1
   23320:	4630      	mov	r0, r6
   23322:	f7fa fbb8 	bl	1da96 <net_frag_read>
	return chksum;
   23326:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2332a:	e7e9      	b.n	23300 <net_udp_get_chksum+0x20>

0002332c <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   2332c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2332e:	b085      	sub	sp, #20
   23330:	4605      	mov	r5, r0
   23332:	460f      	mov	r7, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   23334:	f7fa fd36 	bl	1dda4 <net_pkt_udp_data>
   23338:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2333a:	2208      	movs	r2, #8
   2333c:	4601      	mov	r1, r0
   2333e:	4628      	mov	r0, r5
   23340:	f7fb f8ee 	bl	1e520 <net_header_fits>
   23344:	b120      	cbz	r0, 23350 <net_udp_get_hdr+0x24>
		return hdr;
   23346:	4626      	mov	r6, r4
	if (net_udp_header_fits(pkt, udp_hdr)) {
   23348:	b126      	cbz	r6, 23354 <net_udp_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   2334a:	4620      	mov	r0, r4
   2334c:	b005      	add	sp, #20
   2334e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   23350:	2600      	movs	r6, #0
   23352:	e7f9      	b.n	23348 <net_udp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23354:	68a8      	ldr	r0, [r5, #8]
   23356:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   2335a:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2335e:	9700      	str	r7, [sp, #0]
   23360:	2302      	movs	r3, #2
   23362:	f10d 020e 	add.w	r2, sp, #14
   23366:	4421      	add	r1, r4
   23368:	f7fa fb95 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   2336c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   23370:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23372:	9300      	str	r3, [sp, #0]
   23374:	2302      	movs	r3, #2
   23376:	f10d 020e 	add.w	r2, sp, #14
   2337a:	f7fa fb8c 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   2337e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->len);
   23382:	1d3b      	adds	r3, r7, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   23384:	9300      	str	r3, [sp, #0]
   23386:	2302      	movs	r3, #2
   23388:	f10d 020e 	add.w	r2, sp, #14
   2338c:	f7fa fb83 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23390:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   23394:	1dbb      	adds	r3, r7, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23396:	9300      	str	r3, [sp, #0]
   23398:	2302      	movs	r3, #2
   2339a:	f10d 020e 	add.w	r2, sp, #14
   2339e:	f7fa fb7a 	bl	1da96 <net_frag_read>
	if (!frag) {
   233a2:	b108      	cbz	r0, 233a8 <net_udp_get_hdr+0x7c>
	return hdr;
   233a4:	463c      	mov	r4, r7
   233a6:	e7d0      	b.n	2334a <net_udp_get_hdr+0x1e>
		return NULL;
   233a8:	4634      	mov	r4, r6
   233aa:	e7ce      	b.n	2334a <net_udp_get_hdr+0x1e>

000233ac <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   233ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   233b0:	b086      	sub	sp, #24
   233b2:	4606      	mov	r6, r0
   233b4:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   233b6:	2208      	movs	r2, #8
   233b8:	f7fb f8b2 	bl	1e520 <net_header_fits>
   233bc:	b128      	cbz	r0, 233ca <net_udp_set_hdr+0x1e>
		return hdr;
   233be:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   233c0:	b12d      	cbz	r5, 233ce <net_udp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   233c2:	4620      	mov	r0, r4
   233c4:	b006      	add	sp, #24
   233c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   233ca:	2500      	movs	r5, #0
   233cc:	e7f8      	b.n	233c0 <net_udp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   233ce:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   233d2:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   233d6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   233da:	f8cd 8008 	str.w	r8, [sp, #8]
   233de:	9401      	str	r4, [sp, #4]
   233e0:	2702      	movs	r7, #2
   233e2:	9700      	str	r7, [sp, #0]
   233e4:	f10d 0316 	add.w	r3, sp, #22
   233e8:	440a      	add	r2, r1
   233ea:	68b1      	ldr	r1, [r6, #8]
   233ec:	4630      	mov	r0, r6
   233ee:	f7fa fbc4 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   233f2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   233f6:	19e3      	adds	r3, r4, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   233f8:	f8cd 8008 	str.w	r8, [sp, #8]
   233fc:	9301      	str	r3, [sp, #4]
   233fe:	9700      	str	r7, [sp, #0]
   23400:	f10d 0316 	add.w	r3, sp, #22
   23404:	4601      	mov	r1, r0
   23406:	4630      	mov	r0, r6
   23408:	f7fa fbb7 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   2340c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   23410:	1d23      	adds	r3, r4, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   23412:	f8cd 8008 	str.w	r8, [sp, #8]
   23416:	9301      	str	r3, [sp, #4]
   23418:	9700      	str	r7, [sp, #0]
   2341a:	f10d 0316 	add.w	r3, sp, #22
   2341e:	4601      	mov	r1, r0
   23420:	4630      	mov	r0, r6
   23422:	f7fa fbaa 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23426:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   2342a:	1da3      	adds	r3, r4, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   2342c:	f8cd 8008 	str.w	r8, [sp, #8]
   23430:	9301      	str	r3, [sp, #4]
   23432:	9700      	str	r7, [sp, #0]
   23434:	f10d 0316 	add.w	r3, sp, #22
   23438:	4601      	mov	r1, r0
   2343a:	4630      	mov	r0, r6
   2343c:	f7fa fb9d 	bl	1db7a <net_pkt_write>
	if (!frag) {
   23440:	2800      	cmp	r0, #0
   23442:	d1be      	bne.n	233c2 <net_udp_set_hdr+0x16>
		return NULL;
   23444:	462c      	mov	r4, r5
   23446:	e7bc      	b.n	233c2 <net_udp_set_hdr+0x16>

00023448 <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_context *context,
			       struct net_pkt *pkt,
			       u16_t offset,
			       u16_t port)
{
   23448:	b510      	push	{r4, lr}
   2344a:	460c      	mov	r4, r1
   2344c:	4611      	mov	r1, r2
	return net_udp_insert_raw(pkt,
   2344e:	8942      	ldrh	r2, [r0, #10]
   23450:	4620      	mov	r0, r4
   23452:	f7ff fe81 	bl	23158 <net_udp_insert_raw>
				  offset,
				  net_sin((struct sockaddr *)
					  &context->local)->sin_port,
				  port);
}
   23456:	bd10      	pop	{r4, pc}

00023458 <net_udp_init>:
{
	return net_conn_unregister(handle);
}

void net_udp_init(void)
{
   23458:	4770      	bx	lr

0002345a <abort_connection>:
			pkt = net_pkt_ref(pkt);				\
		}							\
	} while (0)

static void abort_connection(struct net_tcp *tcp)
{
   2345a:	b538      	push	{r3, r4, r5, lr}
	struct net_context *ctx = tcp->context;
   2345c:	6804      	ldr	r4, [r0, #0]

	NET_DBG("[%p] segment retransmission exceeds %d, resetting context %p",
		tcp, CONFIG_NET_TCP_RETRY_COUNT, ctx);

	if (ctx->recv_cb) {
   2345e:	6b25      	ldr	r5, [r4, #48]	; 0x30
   23460:	b12d      	cbz	r5, 2346e <abort_connection+0x14>
		ctx->recv_cb(ctx, NULL, -ECONNRESET, tcp->recv_user_data);
   23462:	6843      	ldr	r3, [r0, #4]
   23464:	f06f 0267 	mvn.w	r2, #103	; 0x67
   23468:	2100      	movs	r1, #0
   2346a:	4620      	mov	r0, r4
   2346c:	47a8      	blx	r5
	}

	net_context_unref(ctx);
   2346e:	4620      	mov	r0, r4
   23470:	f7f9 fba8 	bl	1cbc4 <net_context_unref>
   23474:	bd38      	pop	{r3, r4, r5, pc}

00023476 <restart_timer>:

	return net_send_data(pkt);
}

static void restart_timer(struct net_tcp *tcp)
{
   23476:	b510      	push	{r4, lr}
   23478:	4604      	mov	r4, r0
	return (!list->head);
   2347a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   2347e:	b17b      	cbz	r3, 234a0 <restart_timer+0x2a>
		tcp->flags |= NET_TCP_RETRYING;
   23480:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   23484:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   23488:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		tcp->retry_timeout_shift = 0;
   2348c:	f36f 0304 	bfc	r3, #0, #5
   23490:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   23494:	2200      	movs	r2, #0
   23496:	21c8      	movs	r1, #200	; 0xc8
   23498:	3058      	adds	r0, #88	; 0x58
   2349a:	f006 fb63 	bl	29b64 <_impl_k_timer_start>
   2349e:	bd10      	pop	{r4, pc}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   234a0:	3058      	adds	r0, #88	; 0x58
   234a2:	f006 fc17 	bl	29cd4 <_impl_k_timer_stop>
			k_timer_start(&tcp->retry_timer, TIME_WAIT_MS, 0);
			net_context_ref(tcp->context);
		}
	} else {
		k_timer_stop(&tcp->retry_timer);
		tcp->flags &= ~NET_TCP_RETRYING;
   234a6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   234aa:	f3c3 1247 	ubfx	r2, r3, #5, #8
   234ae:	f022 0210 	bic.w	r2, r2, #16
   234b2:	f362 134c 	bfi	r3, r2, #5, #8
   234b6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
   234ba:	bd10      	pop	{r4, pc}

000234bc <ack_timer_cancel>:
{
   234bc:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->ack_timer);
   234be:	3008      	adds	r0, #8
   234c0:	f006 fd36 	bl	29f30 <k_delayed_work_cancel>
   234c4:	bd08      	pop	{r3, pc}

000234c6 <fin_timer_cancel>:
{
   234c6:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->fin_timer);
   234c8:	3030      	adds	r0, #48	; 0x30
   234ca:	f006 fd31 	bl	29f30 <k_delayed_work_cancel>
   234ce:	bd08      	pop	{r3, pc}

000234d0 <finalize_segment>:
{
   234d0:	b508      	push	{r3, lr}
	return pkt->family;
   234d2:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   234d6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   234da:	2b0a      	cmp	r3, #10
   234dc:	d001      	beq.n	234e2 <finalize_segment+0x12>
	return 0;
   234de:	2000      	movs	r0, #0
}
   234e0:	bd08      	pop	{r3, pc}
		return net_ipv6_finalize(context, pkt);
   234e2:	f7fc fe17 	bl	20114 <net_ipv6_finalize>
   234e6:	bd08      	pop	{r3, pc}

000234e8 <prepare_segment>:
{
   234e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234ec:	b085      	sub	sp, #20
   234ee:	4606      	mov	r6, r0
   234f0:	460d      	mov	r5, r1
	struct net_context *context = tcp->context;
   234f2:	6807      	ldr	r7, [r0, #0]
	if (pkt) {
   234f4:	b192      	cbz	r2, 2351c <prepare_segment+0x34>
   234f6:	4614      	mov	r4, r2
		tail = pkt->frags;
   234f8:	f8d2 8008 	ldr.w	r8, [r2, #8]
		pkt->frags = NULL;
   234fc:	2300      	movs	r3, #0
   234fe:	6093      	str	r3, [r2, #8]
		pkt_allocated = false;
   23500:	469a      	mov	sl, r3
   23502:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23506:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   2350a:	2b0a      	cmp	r3, #10
   2350c:	d013      	beq.n	23536 <prepare_segment+0x4e>
		if (pkt_allocated) {
   2350e:	f1ba 0f00 	cmp.w	sl, #0
   23512:	d174      	bne.n	235fe <prepare_segment+0x116>
		return NULL;
   23514:	2000      	movs	r0, #0
}
   23516:	b005      	add	sp, #20
   23518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = net_pkt_get_tx(context, ALLOC_TIMEOUT);
   2351c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   23520:	4638      	mov	r0, r7
   23522:	f7fa f907 	bl	1d734 <net_pkt_get_tx>
		if (!pkt) {
   23526:	4604      	mov	r4, r0
   23528:	2800      	cmp	r0, #0
   2352a:	d0f4      	beq.n	23516 <prepare_segment+0x2e>
		pkt_allocated = true;
   2352c:	f04f 0a01 	mov.w	sl, #1
	struct net_buf *header, *tail = NULL;
   23530:	f04f 0800 	mov.w	r8, #0
   23534:	e7e5      	b.n	23502 <prepare_segment+0x1a>
				net_sin6_ptr(segment->src_addr)->sin6_addr,
   23536:	692a      	ldr	r2, [r5, #16]
				&(net_sin6(segment->dst_addr)->sin6_addr));
   23538:	696b      	ldr	r3, [r5, #20]
		net_ipv6_create(tcp->context, pkt,
   2353a:	3304      	adds	r3, #4
   2353c:	6852      	ldr	r2, [r2, #4]
   2353e:	4621      	mov	r1, r4
   23540:	6830      	ldr	r0, [r6, #0]
   23542:	f7fc fb8b 	bl	1fc5c <net_ipv6_create>
		dst_port = net_sin6(segment->dst_addr)->sin6_port;
   23546:	696b      	ldr	r3, [r5, #20]
   23548:	f8b3 b002 	ldrh.w	fp, [r3, #2]
		src_port = ((struct sockaddr_in6_ptr *)&context->local)->
   2354c:	897b      	ldrh	r3, [r7, #10]
   2354e:	9302      	str	r3, [sp, #8]
	return pkt->frags->data;
   23550:	68a3      	ldr	r3, [r4, #8]
   23552:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_TCP;
   23554:	2206      	movs	r2, #6
   23556:	719a      	strb	r2, [r3, #6]
	header = net_pkt_get_data(context, ALLOC_TIMEOUT);
   23558:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   2355c:	4638      	mov	r0, r7
   2355e:	f7fa f8fb 	bl	1d758 <net_pkt_get_data>
	if (!header) {
   23562:	9001      	str	r0, [sp, #4]
   23564:	2800      	cmp	r0, #0
   23566:	d04f      	beq.n	23608 <prepare_segment+0x120>
	net_pkt_frag_add(pkt, header);
   23568:	9e01      	ldr	r6, [sp, #4]
   2356a:	4631      	mov	r1, r6
   2356c:	4620      	mov	r0, r4
   2356e:	f7fa f93e 	bl	1d7ee <net_pkt_frag_add>
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   23572:	2114      	movs	r1, #20
   23574:	f106 0008 	add.w	r0, r6, #8
   23578:	f7f7 fbec 	bl	1ad54 <net_buf_simple_add>
   2357c:	4606      	mov	r6, r0
	if (segment->options && segment->optlen) {
   2357e:	68eb      	ldr	r3, [r5, #12]
   23580:	9303      	str	r3, [sp, #12]
   23582:	2b00      	cmp	r3, #0
   23584:	d05d      	beq.n	23642 <prepare_segment+0x15a>
   23586:	f895 900b 	ldrb.w	r9, [r5, #11]
   2358a:	f1b9 0f00 	cmp.w	r9, #0
   2358e:	d145      	bne.n	2361c <prepare_segment+0x134>
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   23590:	f109 0914 	add.w	r9, r9, #20
   23594:	fa5f f989 	uxtb.w	r9, r9
   23598:	ea4f 0989 	mov.w	r9, r9, lsl #2
   2359c:	f886 900c 	strb.w	r9, [r6, #12]
	tcp_hdr->src_port = src_port;
   235a0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   235a4:	8033      	strh	r3, [r6, #0]
	tcp_hdr->dst_port = dst_port;
   235a6:	f8a6 b002 	strh.w	fp, [r6, #2]
	sys_put_be32(segment->seq, tcp_hdr->seq);
   235aa:	682b      	ldr	r3, [r5, #0]
	sys_put_be16(val >> 16, dst);
   235ac:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   235ae:	0a11      	lsrs	r1, r2, #8
   235b0:	7131      	strb	r1, [r6, #4]
	dst[1] = val;
   235b2:	7172      	strb	r2, [r6, #5]
	dst[0] = val >> 8;
   235b4:	f3c3 2207 	ubfx	r2, r3, #8, #8
   235b8:	71b2      	strb	r2, [r6, #6]
	dst[1] = val;
   235ba:	71f3      	strb	r3, [r6, #7]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   235bc:	686b      	ldr	r3, [r5, #4]
	sys_put_be16(val >> 16, dst);
   235be:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   235c0:	0a11      	lsrs	r1, r2, #8
   235c2:	7231      	strb	r1, [r6, #8]
	dst[1] = val;
   235c4:	7272      	strb	r2, [r6, #9]
	dst[0] = val >> 8;
   235c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
   235ca:	72b2      	strb	r2, [r6, #10]
	dst[1] = val;
   235cc:	72f3      	strb	r3, [r6, #11]
	tcp_hdr->flags = segment->flags;
   235ce:	7aab      	ldrb	r3, [r5, #10]
   235d0:	7373      	strb	r3, [r6, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   235d2:	892b      	ldrh	r3, [r5, #8]
	dst[0] = val >> 8;
   235d4:	0a1a      	lsrs	r2, r3, #8
   235d6:	73b2      	strb	r2, [r6, #14]
	dst[1] = val;
   235d8:	73f3      	strb	r3, [r6, #15]
	tcp_hdr->urg[0] = 0;
   235da:	2300      	movs	r3, #0
   235dc:	74b3      	strb	r3, [r6, #18]
	tcp_hdr->urg[1] = 0;
   235de:	74f3      	strb	r3, [r6, #19]
	if (tail) {
   235e0:	f1b8 0f00 	cmp.w	r8, #0
   235e4:	d003      	beq.n	235ee <prepare_segment+0x106>
		net_pkt_frag_add(pkt, tail);
   235e6:	4641      	mov	r1, r8
   235e8:	4620      	mov	r0, r4
   235ea:	f7fa f900 	bl	1d7ee <net_pkt_frag_add>
	if (finalize_segment(context, pkt) < 0) {
   235ee:	4621      	mov	r1, r4
   235f0:	4638      	mov	r0, r7
   235f2:	f7ff ff6d 	bl	234d0 <finalize_segment>
   235f6:	2800      	cmp	r0, #0
   235f8:	db26      	blt.n	23648 <prepare_segment+0x160>
	return pkt;
   235fa:	4620      	mov	r0, r4
   235fc:	e78b      	b.n	23516 <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   235fe:	4620      	mov	r0, r4
   23600:	f7fa f8cb 	bl	1d79a <net_pkt_unref>
		return NULL;
   23604:	2000      	movs	r0, #0
   23606:	e786      	b.n	23516 <prepare_segment+0x2e>
		if (pkt_allocated) {
   23608:	f1ba 0f00 	cmp.w	sl, #0
   2360c:	d101      	bne.n	23612 <prepare_segment+0x12a>
		return NULL;
   2360e:	2000      	movs	r0, #0
   23610:	e781      	b.n	23516 <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   23612:	4620      	mov	r0, r4
   23614:	f7fa f8c1 	bl	1d79a <net_pkt_unref>
		return NULL;
   23618:	2000      	movs	r0, #0
   2361a:	e77c      	b.n	23516 <prepare_segment+0x2e>
	memcpy(net_buf_add(header, len), data, len);
   2361c:	4649      	mov	r1, r9
   2361e:	9801      	ldr	r0, [sp, #4]
   23620:	3008      	adds	r0, #8
   23622:	f7f7 fb97 	bl	1ad54 <net_buf_simple_add>
   23626:	464a      	mov	r2, r9
   23628:	9903      	ldr	r1, [sp, #12]
   2362a:	f7dc fe49 	bl	2c0 <memcpy>
	if ((len & 0x3u) != 0u) {
   2362e:	f019 0f03 	tst.w	r9, #3
   23632:	d0ad      	beq.n	23590 <prepare_segment+0xa8>
		optlen = (len & 0xfffCu) + 4u;
   23634:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
   23638:	f109 0904 	add.w	r9, r9, #4
   2363c:	fa5f f989 	uxtb.w	r9, r9
   23640:	e7a6      	b.n	23590 <prepare_segment+0xa8>
	u8_t optlen = 0;
   23642:	f04f 0900 	mov.w	r9, #0
   23646:	e7a3      	b.n	23590 <prepare_segment+0xa8>
		if (pkt_allocated) {
   23648:	f1ba 0f00 	cmp.w	sl, #0
   2364c:	d101      	bne.n	23652 <prepare_segment+0x16a>
		return NULL;
   2364e:	2000      	movs	r0, #0
   23650:	e761      	b.n	23516 <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   23652:	4620      	mov	r0, r4
   23654:	f7fa f8a1 	bl	1d79a <net_pkt_unref>
		return NULL;
   23658:	2000      	movs	r0, #0
   2365a:	e75c      	b.n	23516 <prepare_segment+0x2e>

0002365c <net_tcp_alloc>:
{
   2365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2365e:	f04f 0320 	mov.w	r3, #32
   23662:	f3ef 8411 	mrs	r4, BASEPRI
   23666:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   2366a:	2300      	movs	r3, #0
   2366c:	2b05      	cmp	r3, #5
   2366e:	dc18      	bgt.n	236a2 <net_tcp_alloc+0x46>
	return tcp->flags & NET_TCP_IN_USE;
   23670:	22c8      	movs	r2, #200	; 0xc8
   23672:	492b      	ldr	r1, [pc, #172]	; (23720 <net_tcp_alloc+0xc4>)
   23674:	fb02 1203 	mla	r2, r2, r3, r1
   23678:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
   2367c:	f3c2 1247 	ubfx	r2, r2, #5, #8
		if (!net_tcp_is_used(&tcp_context[i])) {
   23680:	f012 0f01 	tst.w	r2, #1
   23684:	d001      	beq.n	2368a <net_tcp_alloc+0x2e>
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   23686:	3301      	adds	r3, #1
   23688:	e7f0      	b.n	2366c <net_tcp_alloc+0x10>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   2368a:	21c8      	movs	r1, #200	; 0xc8
   2368c:	4d24      	ldr	r5, [pc, #144]	; (23720 <net_tcp_alloc+0xc4>)
   2368e:	fb01 5103 	mla	r1, r1, r3, r5
   23692:	f042 0201 	orr.w	r2, r2, #1
   23696:	f8b1 50a4 	ldrh.w	r5, [r1, #164]	; 0xa4
   2369a:	f362 154c 	bfi	r5, r2, #5, #8
   2369e:	f8a1 50a4 	strh.w	r5, [r1, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   236a2:	f384 8811 	msr	BASEPRI, r4
	if (i >= NET_MAX_TCP_CONTEXT) {
   236a6:	2b05      	cmp	r3, #5
   236a8:	dc37      	bgt.n	2371a <net_tcp_alloc+0xbe>
   236aa:	4607      	mov	r7, r0
	memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   236ac:	4e1c      	ldr	r6, [pc, #112]	; (23720 <net_tcp_alloc+0xc4>)
   236ae:	22c8      	movs	r2, #200	; 0xc8
   236b0:	fb02 f403 	mul.w	r4, r2, r3
   236b4:	1935      	adds	r5, r6, r4
   236b6:	2100      	movs	r1, #0
   236b8:	4628      	mov	r0, r5
   236ba:	f007 f8fd 	bl	2a8b8 <memset>
	tcp_context[i].flags = NET_TCP_IN_USE;
   236be:	f8b5 20a4 	ldrh.w	r2, [r5, #164]	; 0xa4
   236c2:	2101      	movs	r1, #1
   236c4:	f361 124c 	bfi	r2, r1, #5, #8
   236c8:	f8a5 20a4 	strh.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].state = NET_TCP_CLOSED;
   236cc:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   236d0:	f36f 3250 	bfc	r2, #13, #4
   236d4:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].context = context;
   236d8:	5137      	str	r7, [r6, r4]
	return sys_rand32_get();
   236da:	f7de fca1 	bl	2020 <sys_rand32_get>
	tcp_context[i].send_seq = tcp_init_isn();
   236de:	f8c5 0098 	str.w	r0, [r5, #152]	; 0x98
	tcp_context[i].recv_max_ack = tcp_context[i].send_seq + 1u;
   236e2:	3001      	adds	r0, #1
   236e4:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   236e8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   236ec:	f8a5 30c4 	strh.w	r3, [r5, #196]	; 0xc4
	tcp_context[i].accept_cb = NULL;
   236f0:	2700      	movs	r7, #0
   236f2:	f8c5 70a8 	str.w	r7, [r5, #168]	; 0xa8
	k_timer_init(&tcp_context[i].retry_timer, tcp_retry_expired, NULL);
   236f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   236fa:	463a      	mov	r2, r7
   236fc:	4909      	ldr	r1, [pc, #36]	; (23724 <net_tcp_alloc+0xc8>)
   236fe:	4430      	add	r0, r6
   23700:	f006 fa1c 	bl	29b3c <k_timer_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   23704:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   23708:	18f0      	adds	r0, r6, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   2370a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2370e:	4639      	mov	r1, r7
   23710:	3004      	adds	r0, #4
   23712:	f005 fe15 	bl	29340 <_impl_k_sem_init>
}
   23716:	4628      	mov	r0, r5
   23718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   2371a:	2500      	movs	r5, #0
   2371c:	e7fb      	b.n	23716 <net_tcp_alloc+0xba>
   2371e:	bf00      	nop
   23720:	20002548 	.word	0x20002548
   23724:	00024099 	.word	0x00024099

00023728 <net_tcp_get_recv_wnd>:
}
   23728:	f8b0 00c4 	ldrh.w	r0, [r0, #196]	; 0xc4
   2372c:	4770      	bx	lr

0002372e <net_tcp_get_recv_mss>:
{
   2372e:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(tcp->context);
   23730:	6802      	ldr	r2, [r0, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   23732:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
   23736:	f013 0f10 	tst.w	r3, #16
   2373a:	d006      	beq.n	2374a <net_tcp_get_recv_mss+0x1c>
		return AF_INET6;
   2373c:	230a      	movs	r3, #10
	if (family == AF_INET) {
   2373e:	2b02      	cmp	r3, #2
   23740:	d019      	beq.n	23776 <net_tcp_get_recv_mss+0x48>
	else if (family == AF_INET6) {
   23742:	2b0a      	cmp	r3, #10
   23744:	d003      	beq.n	2374e <net_tcp_get_recv_mss+0x20>
	return 0;
   23746:	2000      	movs	r0, #0
}
   23748:	bd08      	pop	{r3, pc}
	return AF_INET;
   2374a:	2302      	movs	r3, #2
   2374c:	e7f7      	b.n	2373e <net_tcp_get_recv_mss+0x10>
	return net_if_get_by_index(context->iface);
   2374e:	f892 005c 	ldrb.w	r0, [r2, #92]	; 0x5c
   23752:	f7f8 fddb 	bl	1c30c <net_if_get_by_index>
		if (iface && iface->mtu >= NET_IPV6TCPH_LEN) {
   23756:	b120      	cbz	r0, 23762 <net_tcp_get_recv_mss+0x34>
   23758:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   2375a:	283b      	cmp	r0, #59	; 0x3b
   2375c:	d903      	bls.n	23766 <net_tcp_get_recv_mss+0x38>
			mss = iface->mtu - NET_IPV6TCPH_LEN;
   2375e:	383c      	subs	r0, #60	; 0x3c
   23760:	e002      	b.n	23768 <net_tcp_get_recv_mss+0x3a>
		int mss = 0;
   23762:	2000      	movs	r0, #0
   23764:	e000      	b.n	23768 <net_tcp_get_recv_mss+0x3a>
   23766:	2000      	movs	r0, #0
		if (mss < NET_IPV6_MTU) {
   23768:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   2376c:	da01      	bge.n	23772 <net_tcp_get_recv_mss+0x44>
			mss = NET_IPV6_MTU;
   2376e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
		return mss;
   23772:	b280      	uxth	r0, r0
   23774:	bd08      	pop	{r3, pc}
		return 0;
   23776:	2000      	movs	r0, #0
   23778:	bd08      	pop	{r3, pc}

0002377a <net_tcp_set_syn_opt>:
{
   2377a:	b570      	push	{r4, r5, r6, lr}
   2377c:	460e      	mov	r6, r1
   2377e:	4614      	mov	r4, r2
	*optionlen = 0;
   23780:	2300      	movs	r3, #0
   23782:	7013      	strb	r3, [r2, #0]
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   23784:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   23788:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2378c:	d00f      	beq.n	237ae <net_tcp_set_syn_opt+0x34>
		recv_mss = 0;
   2378e:	2000      	movs	r0, #0
	UNALIGNED_PUT(htonl((u32_t)recv_mss | NET_TCP_MSS_HEADER),
   23790:	7822      	ldrb	r2, [r4, #0]
   23792:	0203      	lsls	r3, r0, #8
   23794:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   23798:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   2379c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   237a0:	f040 0002 	orr.w	r0, r0, #2
   237a4:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   237a6:	7823      	ldrb	r3, [r4, #0]
   237a8:	3304      	adds	r3, #4
   237aa:	7023      	strb	r3, [r4, #0]
   237ac:	bd70      	pop	{r4, r5, r6, pc}
   237ae:	4605      	mov	r5, r0
		recv_mss = net_tcp_get_recv_mss(tcp);
   237b0:	f7ff ffbd 	bl	2372e <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   237b4:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   237b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   237bc:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
   237c0:	e7e6      	b.n	23790 <net_tcp_set_syn_opt+0x16>

000237c2 <net_tcp_prepare_reset>:
{
   237c2:	b510      	push	{r4, lr}
   237c4:	b086      	sub	sp, #24
	struct tcp_segment segment = { 0 };
   237c6:	2300      	movs	r3, #0
   237c8:	9300      	str	r3, [sp, #0]
   237ca:	9301      	str	r3, [sp, #4]
   237cc:	9302      	str	r3, [sp, #8]
   237ce:	9303      	str	r3, [sp, #12]
   237d0:	9304      	str	r3, [sp, #16]
   237d2:	9305      	str	r3, [sp, #20]
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   237d4:	6803      	ldr	r3, [r0, #0]
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   237d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   237da:	f013 0f06 	tst.w	r3, #6
   237de:	d01a      	beq.n	23816 <net_tcp_prepare_reset+0x54>
	return (enum net_tcp_state)tcp->state;
   237e0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   237e4:	f3c3 3343 	ubfx	r3, r3, #13, #4
   237e8:	2b02      	cmp	r3, #2
   237ea:	d014      	beq.n	23816 <net_tcp_prepare_reset+0x54>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   237ec:	2b09      	cmp	r3, #9
   237ee:	d012      	beq.n	23816 <net_tcp_prepare_reset+0x54>
   237f0:	4614      	mov	r4, r2
		segment.ack = tcp->send_ack;
   237f2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   237f6:	9301      	str	r3, [sp, #4]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   237f8:	2314      	movs	r3, #20
   237fa:	f88d 300a 	strb.w	r3, [sp, #10]
		segment.seq = tcp->send_seq;
   237fe:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   23802:	9300      	str	r3, [sp, #0]
		segment.src_addr = &tcp->context->local;
   23804:	6803      	ldr	r3, [r0, #0]
   23806:	3308      	adds	r3, #8
   23808:	9304      	str	r3, [sp, #16]
		segment.dst_addr = remote;
   2380a:	9105      	str	r1, [sp, #20]
		*pkt = prepare_segment(tcp, &segment, NULL);
   2380c:	2200      	movs	r2, #0
   2380e:	4669      	mov	r1, sp
   23810:	f7ff fe6a 	bl	234e8 <prepare_segment>
   23814:	6020      	str	r0, [r4, #0]
}
   23816:	2000      	movs	r0, #0
   23818:	b006      	add	sp, #24
   2381a:	bd10      	pop	{r4, pc}

0002381c <net_tcp_state_str>:
}
   2381c:	4800      	ldr	r0, [pc, #0]	; (23820 <net_tcp_state_str+0x4>)
   2381e:	4770      	bx	lr
   23820:	0002f064 	.word	0x0002f064

00023824 <net_tcp_init>:
		}
	}
}

void net_tcp_init(void)
{
   23824:	4770      	bx	lr

00023826 <net_tcp_change_state>:
   23826:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   2382a:	f3c3 3343 	ubfx	r3, r3, #13, #4
void net_tcp_change_state(struct net_tcp *tcp,
			  enum net_tcp_state new_state)
{
	NET_ASSERT(tcp);

	if (net_tcp_get_state(tcp) == new_state) {
   2382e:	428b      	cmp	r3, r1
   23830:	d022      	beq.n	23878 <net_tcp_change_state+0x52>

#if defined(CONFIG_NET_DEBUG_TCP)
	validate_state_transition(tcp->state, new_state);
#endif /* CONFIG_NET_DEBUG_TCP */

	tcp->state = new_state;
   23832:	f001 010f 	and.w	r1, r1, #15
   23836:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   2383a:	f361 3350 	bfi	r3, r1, #13, #4
   2383e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   23842:	b9c9      	cbnz	r1, 23878 <net_tcp_change_state+0x52>
		return;
	}

	if (!tcp->context) {
   23844:	6803      	ldr	r3, [r0, #0]
   23846:	b1bb      	cbz	r3, 23878 <net_tcp_change_state+0x52>
{
   23848:	b530      	push	{r4, r5, lr}
   2384a:	b083      	sub	sp, #12
   2384c:	4604      	mov	r4, r0
		return;
	}

	/* Remove any port handlers if we are closing */
	if (tcp->context->conn_handler) {
   2384e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   23850:	b120      	cbz	r0, 2385c <net_tcp_change_state+0x36>
	return net_conn_unregister(handle);
   23852:	f001 fcef 	bl	25234 <net_conn_unregister>
		net_tcp_unregister(tcp->context->conn_handler);
		tcp->context->conn_handler = NULL;
   23856:	6823      	ldr	r3, [r4, #0]
   23858:	2200      	movs	r2, #0
   2385a:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if (tcp->accept_cb) {
   2385c:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
   23860:	b145      	cbz	r5, 23874 <net_tcp_change_state+0x4e>
		tcp->accept_cb(tcp->context,
   23862:	6820      	ldr	r0, [r4, #0]
   23864:	6803      	ldr	r3, [r0, #0]
   23866:	9300      	str	r3, [sp, #0]
   23868:	f06f 037d 	mvn.w	r3, #125	; 0x7d
   2386c:	2218      	movs	r2, #24
   2386e:	f100 0114 	add.w	r1, r0, #20
   23872:	47a8      	blx	r5
			       &tcp->context->remote,
			       sizeof(struct sockaddr),
			       -ENETRESET,
			       tcp->context->user_data);
	}
}
   23874:	b003      	add	sp, #12
   23876:	bd30      	pop	{r4, r5, pc}
   23878:	4770      	bx	lr
	...

0002387c <net_tcp_release>:
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   2387c:	2800      	cmp	r0, #0
   2387e:	d064      	beq.n	2394a <net_tcp_release+0xce>
{
   23880:	b538      	push	{r3, r4, r5, lr}
   23882:	4605      	mov	r5, r0
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   23884:	4b35      	ldr	r3, [pc, #212]	; (2395c <net_tcp_release+0xe0>)
   23886:	4298      	cmp	r0, r3
   23888:	d362      	bcc.n	23950 <net_tcp_release+0xd4>
   2388a:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
   2388e:	4298      	cmp	r0, r3
   23890:	d261      	bcs.n	23956 <net_tcp_release+0xda>
	return list->head;
   23892:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   23896:	b140      	cbz	r0, 238aa <net_tcp_release+0x2e>
   23898:	3834      	subs	r0, #52	; 0x34
   2389a:	b140      	cbz	r0, 238ae <net_tcp_release+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2389c:	f110 0434 	adds.w	r4, r0, #52	; 0x34
   238a0:	d000      	beq.n	238a4 <net_tcp_release+0x28>
	return node->next;
   238a2:	6b44      	ldr	r4, [r0, #52]	; 0x34
   238a4:	b12c      	cbz	r4, 238b2 <net_tcp_release+0x36>
   238a6:	3c34      	subs	r4, #52	; 0x34
   238a8:	e00d      	b.n	238c6 <net_tcp_release+0x4a>
   238aa:	2000      	movs	r0, #0
   238ac:	e7f5      	b.n	2389a <net_tcp_release+0x1e>
   238ae:	4604      	mov	r4, r0
   238b0:	e009      	b.n	238c6 <net_tcp_release+0x4a>
   238b2:	2400      	movs	r4, #0
   238b4:	e007      	b.n	238c6 <net_tcp_release+0x4a>
			list->tail = list->head;
   238b6:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
   238ba:	e00e      	b.n	238da <net_tcp_release+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   238bc:	461a      	mov	r2, r3
   238be:	e015      	b.n	238ec <net_tcp_release+0x70>
   238c0:	3b34      	subs	r3, #52	; 0x34
   238c2:	4620      	mov	r0, r4
   238c4:	461c      	mov	r4, r3
   238c6:	b1d0      	cbz	r0, 238fe <net_tcp_release+0x82>
		sys_slist_remove(&tcp->sent_list, NULL, &pkt->sent_list);
   238c8:	f100 0334 	add.w	r3, r0, #52	; 0x34
		list->head = node->next;
   238cc:	6b42      	ldr	r2, [r0, #52]	; 0x34
   238ce:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
		if (list->tail == node) {
   238d2:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
   238d6:	428b      	cmp	r3, r1
   238d8:	d0ed      	beq.n	238b6 <net_tcp_release+0x3a>
	node->next = NULL;
   238da:	2300      	movs	r3, #0
   238dc:	6343      	str	r3, [r0, #52]	; 0x34
		net_pkt_unref(pkt);
   238de:	f7f9 ff5c 	bl	1d79a <net_pkt_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   238e2:	b144      	cbz	r4, 238f6 <net_tcp_release+0x7a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   238e4:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   238e8:	d0e8      	beq.n	238bc <net_tcp_release+0x40>
	return node->next;
   238ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
   238ec:	b12a      	cbz	r2, 238fa <net_tcp_release+0x7e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   238ee:	2b00      	cmp	r3, #0
   238f0:	d0e6      	beq.n	238c0 <net_tcp_release+0x44>
	return node->next;
   238f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   238f4:	e7e4      	b.n	238c0 <net_tcp_release+0x44>
   238f6:	4623      	mov	r3, r4
   238f8:	e7e3      	b.n	238c2 <net_tcp_release+0x46>
   238fa:	2300      	movs	r3, #0
   238fc:	e7e1      	b.n	238c2 <net_tcp_release+0x46>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   238fe:	f105 0058 	add.w	r0, r5, #88	; 0x58
   23902:	f006 f9e7 	bl	29cd4 <_impl_k_timer_stop>
	sem->count = 0;
   23906:	2400      	movs	r4, #0
   23908:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
	ack_timer_cancel(tcp);
   2390c:	4628      	mov	r0, r5
   2390e:	f7ff fdd5 	bl	234bc <ack_timer_cancel>
	fin_timer_cancel(tcp);
   23912:	4628      	mov	r0, r5
   23914:	f7ff fdd7 	bl	234c6 <fin_timer_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   23918:	4621      	mov	r1, r4
   2391a:	4628      	mov	r0, r5
   2391c:	f7ff ff83 	bl	23826 <net_tcp_change_state>
	tcp->context = NULL;
   23920:	602c      	str	r4, [r5, #0]
	__asm__ volatile(
   23922:	f04f 0320 	mov.w	r3, #32
   23926:	f3ef 8111 	mrs	r1, BASEPRI
   2392a:	f383 8811 	msr	BASEPRI, r3
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   2392e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   23932:	f3c3 1247 	ubfx	r2, r3, #5, #8
   23936:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   2393a:	f362 134c 	bfi	r3, r2, #5, #8
   2393e:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   23942:	f381 8811 	msr	BASEPRI, r1
	return 0;
   23946:	4620      	mov	r0, r4
   23948:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2394a:	f06f 0015 	mvn.w	r0, #21
   2394e:	4770      	bx	lr
   23950:	f06f 0015 	mvn.w	r0, #21
   23954:	bd38      	pop	{r3, r4, r5, pc}
   23956:	f06f 0015 	mvn.w	r0, #21
}
   2395a:	bd38      	pop	{r3, r4, r5, pc}
   2395c:	20002548 	.word	0x20002548

00023960 <net_tcp_prepare_segment>:
{
   23960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23964:	b086      	sub	sp, #24
   23966:	4604      	mov	r4, r0
   23968:	460d      	mov	r5, r1
   2396a:	4692      	mov	sl, r2
   2396c:	4699      	mov	r9, r3
   2396e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   23970:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	struct tcp_segment segment = { 0 };
   23974:	2300      	movs	r3, #0
   23976:	9300      	str	r3, [sp, #0]
   23978:	9301      	str	r3, [sp, #4]
   2397a:	9302      	str	r3, [sp, #8]
   2397c:	9303      	str	r3, [sp, #12]
   2397e:	9304      	str	r3, [sp, #16]
   23980:	9305      	str	r3, [sp, #20]
	if (!local) {
   23982:	2f00      	cmp	r7, #0
   23984:	d050      	beq.n	23a28 <net_tcp_prepare_segment+0xc8>
	seq = tcp->send_seq;
   23986:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
	if (flags & NET_TCP_ACK) {
   2398a:	f015 0f10 	tst.w	r5, #16
   2398e:	d009      	beq.n	239a4 <net_tcp_prepare_segment+0x44>
	return (enum net_tcp_state)tcp->state;
   23990:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   23994:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   23998:	2b07      	cmp	r3, #7
   2399a:	d048      	beq.n	23a2e <net_tcp_prepare_segment+0xce>
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   2399c:	2b08      	cmp	r3, #8
   2399e:	d055      	beq.n	23a4c <net_tcp_prepare_segment+0xec>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   239a0:	2b05      	cmp	r3, #5
   239a2:	d058      	beq.n	23a56 <net_tcp_prepare_segment+0xf6>
	if (flags & NET_TCP_FIN) {
   239a4:	f015 0f01 	tst.w	r5, #1
   239a8:	d010      	beq.n	239cc <net_tcp_prepare_segment+0x6c>
		tcp->flags |= NET_TCP_FINAL_SENT;
   239aa:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   239ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   239b2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		flags |= NET_TCP_ACK;
   239b6:	f045 0510 	orr.w	r5, r5, #16
		seq += 2;
   239ba:	3602      	adds	r6, #2
   239bc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   239c0:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   239c4:	2b04      	cmp	r3, #4
   239c6:	d053      	beq.n	23a70 <net_tcp_prepare_segment+0x110>
   239c8:	2b03      	cmp	r3, #3
   239ca:	d051      	beq.n	23a70 <net_tcp_prepare_segment+0x110>
	if (flags & NET_TCP_SYN) {
   239cc:	f015 0f02 	tst.w	r5, #2
   239d0:	d000      	beq.n	239d4 <net_tcp_prepare_segment+0x74>
		seq++;
   239d2:	3601      	adds	r6, #1
	wnd = net_tcp_get_recv_wnd(tcp);
   239d4:	4620      	mov	r0, r4
   239d6:	f7ff fea7 	bl	23728 <net_tcp_get_recv_wnd>
	segment.src_addr = (struct sockaddr_ptr *)local;
   239da:	9704      	str	r7, [sp, #16]
	segment.dst_addr = remote;
   239dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   239de:	9305      	str	r3, [sp, #20]
	segment.seq = tcp->send_seq;
   239e0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   239e4:	9300      	str	r3, [sp, #0]
	segment.ack = tcp->send_ack;
   239e6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   239ea:	9301      	str	r3, [sp, #4]
	segment.flags = flags;
   239ec:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.wnd = wnd;
   239f0:	f8ad 0008 	strh.w	r0, [sp, #8]
	segment.options = options;
   239f4:	f8cd a00c 	str.w	sl, [sp, #12]
	segment.optlen = optlen;
   239f8:	f88d 900b 	strb.w	r9, [sp, #11]
	*send_pkt = prepare_segment(tcp, &segment, *send_pkt);
   239fc:	f8d8 2000 	ldr.w	r2, [r8]
   23a00:	4669      	mov	r1, sp
   23a02:	4620      	mov	r0, r4
   23a04:	f7ff fd70 	bl	234e8 <prepare_segment>
   23a08:	f8c8 0000 	str.w	r0, [r8]
	if (!*send_pkt) {
   23a0c:	b3a8      	cbz	r0, 23a7a <net_tcp_prepare_segment+0x11a>
	tcp->send_seq = seq;
   23a0e:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
	if (net_tcp_seq_greater(tcp->send_seq, tcp->recv_max_ack)) {
   23a12:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	return (s32_t)(seq1 - seq2);
   23a16:	1af3      	subs	r3, r6, r3
   23a18:	2b00      	cmp	r3, #0
   23a1a:	dd31      	ble.n	23a80 <net_tcp_prepare_segment+0x120>
		tcp->recv_max_ack = tcp->send_seq;
   23a1c:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	return 0;
   23a20:	2000      	movs	r0, #0
}
   23a22:	b006      	add	sp, #24
   23a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		local = &tcp->context->local;
   23a28:	6807      	ldr	r7, [r0, #0]
   23a2a:	3708      	adds	r7, #8
   23a2c:	e7ab      	b.n	23986 <net_tcp_prepare_segment+0x26>
			if (flags & NET_TCP_FIN) {
   23a2e:	f015 0f01 	tst.w	r5, #1
   23a32:	d006      	beq.n	23a42 <net_tcp_prepare_segment+0xe2>
				flags &= ~NET_TCP_FIN;
   23a34:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   23a38:	2109      	movs	r1, #9
   23a3a:	4620      	mov	r0, r4
   23a3c:	f7ff fef3 	bl	23826 <net_tcp_change_state>
   23a40:	e7b0      	b.n	239a4 <net_tcp_prepare_segment+0x44>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   23a42:	210a      	movs	r1, #10
   23a44:	4620      	mov	r0, r4
   23a46:	f7ff feee 	bl	23826 <net_tcp_change_state>
   23a4a:	e7ab      	b.n	239a4 <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   23a4c:	2109      	movs	r1, #9
   23a4e:	4620      	mov	r0, r4
   23a50:	f7ff fee9 	bl	23826 <net_tcp_change_state>
   23a54:	e7a6      	b.n	239a4 <net_tcp_prepare_segment+0x44>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   23a56:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   23a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23a5e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			flags |= NET_TCP_FIN;
   23a62:	f045 0501 	orr.w	r5, r5, #1
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   23a66:	2106      	movs	r1, #6
   23a68:	4620      	mov	r0, r4
   23a6a:	f7ff fedc 	bl	23826 <net_tcp_change_state>
   23a6e:	e799      	b.n	239a4 <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   23a70:	2107      	movs	r1, #7
   23a72:	4620      	mov	r0, r4
   23a74:	f7ff fed7 	bl	23826 <net_tcp_change_state>
   23a78:	e7a8      	b.n	239cc <net_tcp_prepare_segment+0x6c>
		return -EINVAL;
   23a7a:	f06f 0015 	mvn.w	r0, #21
   23a7e:	e7d0      	b.n	23a22 <net_tcp_prepare_segment+0xc2>
	return 0;
   23a80:	2000      	movs	r0, #0
   23a82:	e7ce      	b.n	23a22 <net_tcp_prepare_segment+0xc2>

00023a84 <net_tcp_prepare_ack>:
{
   23a84:	b570      	push	{r4, r5, r6, lr}
   23a86:	b088      	sub	sp, #32
   23a88:	4604      	mov	r4, r0
   23a8a:	460d      	mov	r5, r1
   23a8c:	4616      	mov	r6, r2
   23a8e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   23a92:	f3c3 3343 	ubfx	r3, r3, #13, #4
	switch (net_tcp_get_state(tcp)) {
   23a96:	2b03      	cmp	r3, #3
   23a98:	d011      	beq.n	23abe <net_tcp_prepare_ack+0x3a>
   23a9a:	d327      	bcc.n	23aec <net_tcp_prepare_ack+0x68>
   23a9c:	3b06      	subs	r3, #6
   23a9e:	2b01      	cmp	r3, #1
   23aa0:	d824      	bhi.n	23aec <net_tcp_prepare_ack+0x68>
		tcp->send_seq--;
   23aa2:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   23aa6:	3b01      	subs	r3, #1
   23aa8:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   23aac:	9202      	str	r2, [sp, #8]
   23aae:	9101      	str	r1, [sp, #4]
   23ab0:	2200      	movs	r2, #0
   23ab2:	9200      	str	r2, [sp, #0]
   23ab4:	4613      	mov	r3, r2
   23ab6:	2111      	movs	r1, #17
   23ab8:	f7ff ff52 	bl	23960 <net_tcp_prepare_segment>
   23abc:	e014      	b.n	23ae8 <net_tcp_prepare_ack+0x64>
		tcp->send_seq--;
   23abe:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   23ac2:	3b01      	subs	r3, #1
   23ac4:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   23ac8:	f10d 0217 	add.w	r2, sp, #23
   23acc:	a906      	add	r1, sp, #24
   23ace:	f7ff fe54 	bl	2377a <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   23ad2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   23ad6:	9602      	str	r6, [sp, #8]
   23ad8:	9501      	str	r5, [sp, #4]
   23ada:	2200      	movs	r2, #0
   23adc:	9200      	str	r2, [sp, #0]
   23ade:	aa06      	add	r2, sp, #24
   23ae0:	2112      	movs	r1, #18
   23ae2:	4620      	mov	r0, r4
   23ae4:	f7ff ff3c 	bl	23960 <net_tcp_prepare_segment>
}
   23ae8:	b008      	add	sp, #32
   23aea:	bd70      	pop	{r4, r5, r6, pc}
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   23aec:	9602      	str	r6, [sp, #8]
   23aee:	9501      	str	r5, [sp, #4]
   23af0:	2200      	movs	r2, #0
   23af2:	9200      	str	r2, [sp, #0]
   23af4:	4613      	mov	r3, r2
   23af6:	2110      	movs	r1, #16
   23af8:	4620      	mov	r0, r4
   23afa:	f7ff ff31 	bl	23960 <net_tcp_prepare_segment>
   23afe:	e7f3      	b.n	23ae8 <net_tcp_prepare_ack+0x64>

00023b00 <net_tcp_queue_data>:
{
   23b00:	b570      	push	{r4, r5, r6, lr}
   23b02:	b086      	sub	sp, #24
   23b04:	4605      	mov	r5, r0
   23b06:	9105      	str	r1, [sp, #20]
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   23b08:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	return net_buf_frags_len(pkt->frags);
   23b0a:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   23b0c:	2400      	movs	r4, #0
   23b0e:	e002      	b.n	23b16 <net_tcp_queue_data+0x16>
		bytes += buf->len;
   23b10:	899a      	ldrh	r2, [r3, #12]
   23b12:	4414      	add	r4, r2
		buf = buf->frags;
   23b14:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   23b16:	2b00      	cmp	r3, #0
   23b18:	d1fa      	bne.n	23b10 <net_tcp_queue_data+0x10>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   23b1a:	ab05      	add	r3, sp, #20
   23b1c:	9302      	str	r3, [sp, #8]
   23b1e:	9001      	str	r0, [sp, #4]
   23b20:	2200      	movs	r2, #0
   23b22:	9200      	str	r2, [sp, #0]
   23b24:	4613      	mov	r3, r2
   23b26:	2118      	movs	r1, #24
   23b28:	6e28      	ldr	r0, [r5, #96]	; 0x60
   23b2a:	f7ff ff19 	bl	23960 <net_tcp_prepare_segment>
	if (ret) {
   23b2e:	4606      	mov	r6, r0
   23b30:	bb10      	cbnz	r0, 23b78 <net_tcp_queue_data+0x78>
	context->tcp->send_seq += data_len;
   23b32:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   23b34:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   23b38:	4423      	add	r3, r4
   23b3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	net_stats.tcp.bytes.sent += bytes;
   23b3e:	4a1b      	ldr	r2, [pc, #108]	; (23bac <net_tcp_queue_data+0xac>)
   23b40:	6c93      	ldr	r3, [r2, #72]	; 0x48
   23b42:	441c      	add	r4, r3
   23b44:	6494      	str	r4, [r2, #72]	; 0x48
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   23b46:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   23b48:	9905      	ldr	r1, [sp, #20]
   23b4a:	f101 0234 	add.w	r2, r1, #52	; 0x34
	node->next = NULL;
   23b4e:	6348      	str	r0, [r1, #52]	; 0x34
	if (!list->tail) {
   23b50:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   23b54:	b199      	cbz	r1, 23b7e <net_tcp_queue_data+0x7e>
		list->tail->next = node;
   23b56:	600a      	str	r2, [r1, #0]
		list->tail = node;
   23b58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (k_timer_remaining_get(&context->tcp->retry_timer) == 0) {
   23b5c:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return _timeout_remaining_get(&timer->timeout);
   23b5e:	3058      	adds	r0, #88	; 0x58
   23b60:	f006 f942 	bl	29de8 <_timeout_remaining_get>
   23b64:	b180      	cbz	r0, 23b88 <net_tcp_queue_data+0x88>
	do_ref_if_needed(context->tcp, pkt);
   23b66:	9805      	ldr	r0, [sp, #20]
	return pkt->family;
   23b68:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   23b6c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   23b70:	2b0a      	cmp	r3, #10
   23b72:	d015      	beq.n	23ba0 <net_tcp_queue_data+0xa0>
   23b74:	f7f9 fe02 	bl	1d77c <net_pkt_ref>
}
   23b78:	4630      	mov	r0, r6
   23b7a:	b006      	add	sp, #24
   23b7c:	bd70      	pop	{r4, r5, r6, pc}
		list->tail = node;
   23b7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		list->head = node;
   23b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   23b86:	e7e9      	b.n	23b5c <net_tcp_queue_data+0x5c>
		k_timer_start(&context->tcp->retry_timer,
   23b88:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return ((u32_t)1 << tcp->retry_timeout_shift) * INIT_RETRY_MS;
   23b8a:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
   23b8e:	f003 031f 	and.w	r3, r3, #31
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   23b92:	2200      	movs	r2, #0
   23b94:	21c8      	movs	r1, #200	; 0xc8
   23b96:	4099      	lsls	r1, r3
   23b98:	3058      	adds	r0, #88	; 0x58
   23b9a:	f005 ffe3 	bl	29b64 <_impl_k_timer_start>
   23b9e:	e7e2      	b.n	23b66 <net_tcp_queue_data+0x66>
	do_ref_if_needed(context->tcp, pkt);
   23ba0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   23ba4:	2b02      	cmp	r3, #2
   23ba6:	d1e5      	bne.n	23b74 <net_tcp_queue_data+0x74>
   23ba8:	e7e6      	b.n	23b78 <net_tcp_queue_data+0x78>
   23baa:	bf00      	nop
   23bac:	20003038 	.word	0x20003038

00023bb0 <net_tcp_foreach>:

void net_tcp_foreach(net_tcp_cb_t cb, void *user_data)
{
   23bb0:	b570      	push	{r4, r5, r6, lr}
   23bb2:	4606      	mov	r6, r0
   23bb4:	460d      	mov	r5, r1
	__asm__ volatile(
   23bb6:	f04f 0320 	mov.w	r3, #32
   23bba:	f3ef 8111 	mrs	r1, BASEPRI
   23bbe:	f383 8811 	msr	BASEPRI, r3
	int i, key;

	key = irq_lock();

	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   23bc2:	2400      	movs	r4, #0
   23bc4:	e000      	b.n	23bc8 <net_tcp_foreach+0x18>
   23bc6:	3401      	adds	r4, #1
   23bc8:	2c05      	cmp	r4, #5
   23bca:	dc16      	bgt.n	23bfa <net_tcp_foreach+0x4a>
	return tcp->flags & NET_TCP_IN_USE;
   23bcc:	23c8      	movs	r3, #200	; 0xc8
   23bce:	4a0c      	ldr	r2, [pc, #48]	; (23c00 <net_tcp_foreach+0x50>)
   23bd0:	fb03 2304 	mla	r3, r3, r4, r2
   23bd4:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
		if (!net_tcp_is_used(&tcp_context[i])) {
   23bd8:	f013 0f20 	tst.w	r3, #32
   23bdc:	d0f3      	beq.n	23bc6 <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   23bde:	f381 8811 	msr	BASEPRI, r1
			continue;
		}

		irq_unlock(key);

		cb(&tcp_context[i], user_data);
   23be2:	4629      	mov	r1, r5
   23be4:	20c8      	movs	r0, #200	; 0xc8
   23be6:	fb00 2004 	mla	r0, r0, r4, r2
   23bea:	47b0      	blx	r6
	__asm__ volatile(
   23bec:	f04f 0320 	mov.w	r3, #32
   23bf0:	f3ef 8111 	mrs	r1, BASEPRI
   23bf4:	f383 8811 	msr	BASEPRI, r3
   23bf8:	e7e5      	b.n	23bc6 <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   23bfa:	f381 8811 	msr	BASEPRI, r1
   23bfe:	bd70      	pop	{r4, r5, r6, pc}
   23c00:	20002548 	.word	0x20002548

00023c04 <net_tcp_get_hdr>:
					+ net_tcp_get_recv_wnd(tcp)) < 0);
}

struct net_tcp_hdr *net_tcp_get_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   23c04:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c06:	b085      	sub	sp, #20
   23c08:	4605      	mov	r5, r0
   23c0a:	460e      	mov	r6, r1
	struct net_tcp_hdr *tcp_hdr;
	struct net_buf *frag;
	u16_t pos;

	tcp_hdr = net_pkt_tcp_data(pkt);
   23c0c:	f7fa f8df 	bl	1ddce <net_pkt_tcp_data>
   23c10:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23c12:	2214      	movs	r2, #20
   23c14:	4601      	mov	r1, r0
   23c16:	4628      	mov	r0, r5
   23c18:	f7fa fc82 	bl	1e520 <net_header_fits>
   23c1c:	b120      	cbz	r0, 23c28 <net_tcp_get_hdr+0x24>
		return hdr;
   23c1e:	4627      	mov	r7, r4
	if (net_tcp_header_fits(pkt, tcp_hdr)) {
   23c20:	b127      	cbz	r7, 23c2c <net_tcp_get_hdr+0x28>

		return NULL;
	}

	return hdr;
}
   23c22:	4620      	mov	r0, r4
   23c24:	b005      	add	sp, #20
   23c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   23c28:	2700      	movs	r7, #0
   23c2a:	e7f9      	b.n	23c20 <net_tcp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23c2c:	68a8      	ldr	r0, [r5, #8]
   23c2e:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23c32:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23c36:	9600      	str	r6, [sp, #0]
   23c38:	2302      	movs	r3, #2
   23c3a:	f10d 020e 	add.w	r2, sp, #14
   23c3e:	4421      	add	r1, r4
   23c40:	f7f9 ff29 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23c44:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   23c48:	1cb3      	adds	r3, r6, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23c4a:	9300      	str	r3, [sp, #0]
   23c4c:	2302      	movs	r3, #2
   23c4e:	f10d 020e 	add.w	r2, sp, #14
   23c52:	f7f9 ff20 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->seq), hdr->seq);
   23c56:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23c5a:	1d33      	adds	r3, r6, #4
   23c5c:	9300      	str	r3, [sp, #0]
   23c5e:	2304      	movs	r3, #4
   23c60:	f10d 020e 	add.w	r2, sp, #14
   23c64:	f7f9 ff17 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->ack), hdr->ack);
   23c68:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23c6c:	f106 0308 	add.w	r3, r6, #8
   23c70:	9300      	str	r3, [sp, #0]
   23c72:	2304      	movs	r3, #4
   23c74:	f10d 020e 	add.w	r2, sp, #14
   23c78:	f7f9 ff0d 	bl	1da96 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->offset);
   23c7c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23c80:	f106 030c 	add.w	r3, r6, #12
	return net_frag_read(frag, offset, pos, 1, value);
   23c84:	9300      	str	r3, [sp, #0]
   23c86:	2301      	movs	r3, #1
   23c88:	f10d 020e 	add.w	r2, sp, #14
   23c8c:	f7f9 ff03 	bl	1da96 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   23c90:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23c94:	f106 030d 	add.w	r3, r6, #13
   23c98:	9300      	str	r3, [sp, #0]
   23c9a:	2301      	movs	r3, #1
   23c9c:	f10d 020e 	add.w	r2, sp, #14
   23ca0:	f7f9 fef9 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd);
   23ca4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23ca8:	f106 030e 	add.w	r3, r6, #14
   23cac:	9300      	str	r3, [sp, #0]
   23cae:	2302      	movs	r3, #2
   23cb0:	f10d 020e 	add.w	r2, sp, #14
   23cb4:	f7f9 feef 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23cb8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   23cbc:	f106 0310 	add.w	r3, r6, #16
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23cc0:	9300      	str	r3, [sp, #0]
   23cc2:	2302      	movs	r3, #2
   23cc4:	f10d 020e 	add.w	r2, sp, #14
   23cc8:	f7f9 fee5 	bl	1da96 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->urg), hdr->urg);
   23ccc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23cd0:	f106 0312 	add.w	r3, r6, #18
   23cd4:	9300      	str	r3, [sp, #0]
   23cd6:	2302      	movs	r3, #2
   23cd8:	f10d 020e 	add.w	r2, sp, #14
   23cdc:	f7f9 fedb 	bl	1da96 <net_frag_read>
	if (!frag && pos == 0xffff) {
   23ce0:	b108      	cbz	r0, 23ce6 <net_tcp_get_hdr+0xe2>
	return hdr;
   23ce2:	4634      	mov	r4, r6
   23ce4:	e79d      	b.n	23c22 <net_tcp_get_hdr+0x1e>
	if (!frag && pos == 0xffff) {
   23ce6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   23cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23cee:	429a      	cmp	r2, r3
   23cf0:	d001      	beq.n	23cf6 <net_tcp_get_hdr+0xf2>
	return hdr;
   23cf2:	4634      	mov	r4, r6
   23cf4:	e795      	b.n	23c22 <net_tcp_get_hdr+0x1e>
		return NULL;
   23cf6:	463c      	mov	r4, r7
   23cf8:	e793      	b.n	23c22 <net_tcp_get_hdr+0x1e>

00023cfa <net_tcp_validate_seq>:
{
   23cfa:	b570      	push	{r4, r5, r6, lr}
   23cfc:	b086      	sub	sp, #24
   23cfe:	4606      	mov	r6, r0
   23d00:	4608      	mov	r0, r1
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   23d02:	a901      	add	r1, sp, #4
   23d04:	f7ff ff7e 	bl	23c04 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   23d08:	b1e8      	cbz	r0, 23d46 <net_tcp_validate_seq+0x4c>
   23d0a:	4603      	mov	r3, r0
	return ((u16_t)src[0] << 8) | src[1];
   23d0c:	7900      	ldrb	r0, [r0, #4]
   23d0e:	795c      	ldrb	r4, [r3, #5]
   23d10:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   23d14:	799a      	ldrb	r2, [r3, #6]
   23d16:	79dc      	ldrb	r4, [r3, #7]
   23d18:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   23d1c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   23d20:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
   23d24:	1b63      	subs	r3, r4, r5
				tcp->send_ack) >= 0) &&
   23d26:	2b00      	cmp	r3, #0
   23d28:	db0b      	blt.n	23d42 <net_tcp_validate_seq+0x48>
					+ net_tcp_get_recv_wnd(tcp)) < 0);
   23d2a:	4630      	mov	r0, r6
   23d2c:	f7ff fcfc 	bl	23728 <net_tcp_get_recv_wnd>
		(net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   23d30:	4428      	add	r0, r5
   23d32:	1a24      	subs	r4, r4, r0
				tcp->send_ack) >= 0) &&
   23d34:	2c00      	cmp	r4, #0
   23d36:	db02      	blt.n	23d3e <net_tcp_validate_seq+0x44>
   23d38:	2000      	movs	r0, #0
}
   23d3a:	b006      	add	sp, #24
   23d3c:	bd70      	pop	{r4, r5, r6, pc}
				tcp->send_ack) >= 0) &&
   23d3e:	2001      	movs	r0, #1
   23d40:	e7fb      	b.n	23d3a <net_tcp_validate_seq+0x40>
   23d42:	2000      	movs	r0, #0
   23d44:	e7f9      	b.n	23d3a <net_tcp_validate_seq+0x40>
		return false;
   23d46:	2000      	movs	r0, #0
   23d48:	e7f7      	b.n	23d3a <net_tcp_validate_seq+0x40>

00023d4a <net_tcp_set_hdr>:

struct net_tcp_hdr *net_tcp_set_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   23d4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23d4e:	b087      	sub	sp, #28
   23d50:	4605      	mov	r5, r0
   23d52:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23d54:	2214      	movs	r2, #20
   23d56:	f7fa fbe3 	bl	1e520 <net_header_fits>
   23d5a:	b128      	cbz	r0, 23d68 <net_tcp_set_hdr+0x1e>
		return hdr;
   23d5c:	4626      	mov	r6, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_tcp_header_fits(pkt, hdr)) {
   23d5e:	b12e      	cbz	r6, 23d6c <net_tcp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   23d60:	4620      	mov	r0, r4
   23d62:	b007      	add	sp, #28
   23d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return NULL;
   23d68:	2600      	movs	r6, #0
   23d6a:	e7f8      	b.n	23d5e <net_tcp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23d6c:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23d70:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23d74:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
   23d78:	9702      	str	r7, [sp, #8]
   23d7a:	9401      	str	r4, [sp, #4]
   23d7c:	f04f 0802 	mov.w	r8, #2
   23d80:	f8cd 8000 	str.w	r8, [sp]
   23d84:	f10d 0316 	add.w	r3, sp, #22
   23d88:	440a      	add	r2, r1
   23d8a:	68a9      	ldr	r1, [r5, #8]
   23d8c:	4628      	mov	r0, r5
   23d8e:	f7f9 fef4 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23d92:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, ALLOC_TIMEOUT);
   23d96:	eb04 0308 	add.w	r3, r4, r8
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23d9a:	9702      	str	r7, [sp, #8]
   23d9c:	9301      	str	r3, [sp, #4]
   23d9e:	f8cd 8000 	str.w	r8, [sp]
   23da2:	f10d 0316 	add.w	r3, sp, #22
   23da6:	4601      	mov	r1, r0
   23da8:	4628      	mov	r0, r5
   23daa:	f7f9 fee6 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->seq), hdr->seq,
   23dae:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23db2:	1d23      	adds	r3, r4, #4
   23db4:	9702      	str	r7, [sp, #8]
   23db6:	9301      	str	r3, [sp, #4]
   23db8:	f04f 0904 	mov.w	r9, #4
   23dbc:	f8cd 9000 	str.w	r9, [sp]
   23dc0:	f10d 0316 	add.w	r3, sp, #22
   23dc4:	4601      	mov	r1, r0
   23dc6:	4628      	mov	r0, r5
   23dc8:	f7f9 fed7 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->ack), hdr->ack,
   23dcc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23dd0:	f104 0308 	add.w	r3, r4, #8
   23dd4:	9702      	str	r7, [sp, #8]
   23dd6:	9301      	str	r3, [sp, #4]
   23dd8:	f8cd 9000 	str.w	r9, [sp]
   23ddc:	f10d 0316 	add.w	r3, sp, #22
   23de0:	4601      	mov	r1, r0
   23de2:	4628      	mov	r0, r5
   23de4:	f7f9 fec9 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->offset),
   23de8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23dec:	f104 030c 	add.w	r3, r4, #12
   23df0:	9702      	str	r7, [sp, #8]
   23df2:	9301      	str	r3, [sp, #4]
   23df4:	f04f 0901 	mov.w	r9, #1
   23df8:	f8cd 9000 	str.w	r9, [sp]
   23dfc:	f10d 0316 	add.w	r3, sp, #22
   23e00:	4601      	mov	r1, r0
   23e02:	4628      	mov	r0, r5
   23e04:	f7f9 feb9 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->flags),
   23e08:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23e0c:	f104 030d 	add.w	r3, r4, #13
   23e10:	9702      	str	r7, [sp, #8]
   23e12:	9301      	str	r3, [sp, #4]
   23e14:	f8cd 9000 	str.w	r9, [sp]
   23e18:	f10d 0316 	add.w	r3, sp, #22
   23e1c:	4601      	mov	r1, r0
   23e1e:	4628      	mov	r0, r5
   23e20:	f7f9 feab 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd,
   23e24:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23e28:	f104 030e 	add.w	r3, r4, #14
   23e2c:	9702      	str	r7, [sp, #8]
   23e2e:	9301      	str	r3, [sp, #4]
   23e30:	f8cd 8000 	str.w	r8, [sp]
   23e34:	f10d 0316 	add.w	r3, sp, #22
   23e38:	4601      	mov	r1, r0
   23e3a:	4628      	mov	r0, r5
   23e3c:	f7f9 fe9d 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23e40:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, ALLOC_TIMEOUT);
   23e44:	f104 0310 	add.w	r3, r4, #16
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23e48:	9702      	str	r7, [sp, #8]
   23e4a:	9301      	str	r3, [sp, #4]
   23e4c:	f8cd 8000 	str.w	r8, [sp]
   23e50:	f10d 0316 	add.w	r3, sp, #22
   23e54:	4601      	mov	r1, r0
   23e56:	4628      	mov	r0, r5
   23e58:	f7f9 fe8f 	bl	1db7a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->urg), hdr->urg,
   23e5c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23e60:	f104 0312 	add.w	r3, r4, #18
   23e64:	9702      	str	r7, [sp, #8]
   23e66:	9301      	str	r3, [sp, #4]
   23e68:	f8cd 8000 	str.w	r8, [sp]
   23e6c:	f10d 0316 	add.w	r3, sp, #22
   23e70:	4601      	mov	r1, r0
   23e72:	4628      	mov	r0, r5
   23e74:	f7f9 fe81 	bl	1db7a <net_pkt_write>
	if (!frag) {
   23e78:	2800      	cmp	r0, #0
   23e7a:	f47f af71 	bne.w	23d60 <net_tcp_set_hdr+0x16>
		return NULL;
   23e7e:	4634      	mov	r4, r6
   23e80:	e76e      	b.n	23d60 <net_tcp_set_hdr+0x16>

00023e82 <net_tcp_get_chksum>:

u16_t net_tcp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23e82:	b570      	push	{r4, r5, r6, lr}
   23e84:	b084      	sub	sp, #16
   23e86:	4605      	mov	r5, r0
   23e88:	460e      	mov	r6, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   23e8a:	f7f9 ffa0 	bl	1ddce <net_pkt_tcp_data>
   23e8e:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23e90:	2214      	movs	r2, #20
   23e92:	4601      	mov	r1, r0
   23e94:	4628      	mov	r0, r5
   23e96:	f7fa fb43 	bl	1e520 <net_header_fits>
   23e9a:	b120      	cbz	r0, 23ea6 <net_tcp_get_chksum+0x24>
		return hdr;
   23e9c:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   23e9e:	b123      	cbz	r3, 23eaa <net_tcp_get_chksum+0x28>
		return hdr->chksum;
   23ea0:	8a20      	ldrh	r0, [r4, #16]
			     1 + 1 + 2 /* offset + flags + wnd */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   23ea2:	b004      	add	sp, #16
   23ea4:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   23ea6:	2300      	movs	r3, #0
   23ea8:	e7f9      	b.n	23e9e <net_tcp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   23eaa:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23eae:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23eb2:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   23eb4:	3110      	adds	r1, #16
   23eb6:	f10d 030e 	add.w	r3, sp, #14
   23eba:	9300      	str	r3, [sp, #0]
   23ebc:	2302      	movs	r3, #2
   23ebe:	aa03      	add	r2, sp, #12
   23ec0:	b289      	uxth	r1, r1
   23ec2:	4630      	mov	r0, r6
   23ec4:	f7f9 fde7 	bl	1da96 <net_frag_read>
	return chksum;
   23ec8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   23ecc:	e7e9      	b.n	23ea2 <net_tcp_get_chksum+0x20>

00023ece <net_tcp_set_chksum>:

struct net_buf *net_tcp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23ed2:	b086      	sub	sp, #24
   23ed4:	4606      	mov	r6, r0
   23ed6:	460d      	mov	r5, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum = 0;
   23ed8:	2300      	movs	r3, #0
   23eda:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   23ede:	f7f9 ff76 	bl	1ddce <net_pkt_tcp_data>
   23ee2:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23ee4:	2214      	movs	r2, #20
   23ee6:	4601      	mov	r1, r0
   23ee8:	4630      	mov	r0, r6
   23eea:	f7fa fb19 	bl	1e520 <net_header_fits>
   23eee:	b170      	cbz	r0, 23f0e <net_tcp_set_chksum+0x40>
		return hdr;
   23ef0:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   23ef2:	b173      	cbz	r3, 23f12 <net_tcp_set_chksum+0x44>
		hdr->chksum = 0;
   23ef4:	2300      	movs	r3, #0
   23ef6:	7423      	strb	r3, [r4, #16]
   23ef8:	7463      	strb	r3, [r4, #17]
	return net_calc_chksum(pkt, IPPROTO_TCP);
   23efa:	2106      	movs	r1, #6
   23efc:	4630      	mov	r0, r6
   23efe:	f7fa fab6 	bl	1e46e <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_tcp(pkt);
   23f02:	43c0      	mvns	r0, r0
   23f04:	8220      	strh	r0, [r4, #16]

		return frag;
   23f06:	4628      	mov	r0, r5
			     (u8_t *)&chksum, ALLOC_TIMEOUT);

	NET_ASSERT(frag);

	return frag;
}
   23f08:	b006      	add	sp, #24
   23f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   23f0e:	2300      	movs	r3, #0
   23f10:	e7ef      	b.n	23ef2 <net_tcp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   23f12:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23f16:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23f1a:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   23f1c:	3210      	adds	r2, #16
   23f1e:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
   23f22:	f8cd 8008 	str.w	r8, [sp, #8]
   23f26:	f10d 0416 	add.w	r4, sp, #22
   23f2a:	9401      	str	r4, [sp, #4]
   23f2c:	2702      	movs	r7, #2
   23f2e:	9700      	str	r7, [sp, #0]
   23f30:	ab05      	add	r3, sp, #20
   23f32:	b292      	uxth	r2, r2
   23f34:	4629      	mov	r1, r5
   23f36:	4630      	mov	r0, r6
   23f38:	f7f9 fe1f 	bl	1db7a <net_pkt_write>
   23f3c:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_TCP);
   23f3e:	2106      	movs	r1, #6
   23f40:	4630      	mov	r0, r6
   23f42:	f7fa fa94 	bl	1e46e <net_calc_chksum>
	chksum = ~net_calc_chksum_tcp(pkt);
   23f46:	43c0      	mvns	r0, r0
   23f48:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   23f4c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   23f50:	3a02      	subs	r2, #2
   23f52:	f8cd 8008 	str.w	r8, [sp, #8]
   23f56:	9401      	str	r4, [sp, #4]
   23f58:	9700      	str	r7, [sp, #0]
   23f5a:	ab05      	add	r3, sp, #20
   23f5c:	b292      	uxth	r2, r2
   23f5e:	4629      	mov	r1, r5
   23f60:	4630      	mov	r0, r6
   23f62:	f7f9 fe0a 	bl	1db7a <net_pkt_write>
	return frag;
   23f66:	e7cf      	b.n	23f08 <net_tcp_set_chksum+0x3a>

00023f68 <net_tcp_send_pkt>:
{
   23f68:	b570      	push	{r4, r5, r6, lr}
   23f6a:	b086      	sub	sp, #24
   23f6c:	4605      	mov	r5, r0
	return pkt->context;
   23f6e:	68c6      	ldr	r6, [r0, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   23f70:	a901      	add	r1, sp, #4
   23f72:	f7ff fe47 	bl	23c04 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   23f76:	2800      	cmp	r0, #0
   23f78:	f000 8086 	beq.w	24088 <net_tcp_send_pkt+0x120>
   23f7c:	4604      	mov	r4, r0
	return ((u16_t)src[0] << 8) | src[1];
   23f7e:	7a02      	ldrb	r2, [r0, #8]
   23f80:	7a43      	ldrb	r3, [r0, #9]
   23f82:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   23f86:	7a81      	ldrb	r1, [r0, #10]
   23f88:	7ac3      	ldrb	r3, [r0, #11]
   23f8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   23f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   23f92:	6e32      	ldr	r2, [r6, #96]	; 0x60
   23f94:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
   23f98:	429a      	cmp	r2, r3
   23f9a:	d039      	beq.n	24010 <net_tcp_send_pkt+0xa8>
	sys_put_be16(val >> 16, dst);
   23f9c:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
   23f9e:	0a19      	lsrs	r1, r3, #8
   23fa0:	7201      	strb	r1, [r0, #8]
	dst[1] = val;
   23fa2:	7243      	strb	r3, [r0, #9]
	dst[0] = val >> 8;
   23fa4:	f3c2 2307 	ubfx	r3, r2, #8, #8
   23fa8:	7283      	strb	r3, [r0, #10]
	dst[1] = val;
   23faa:	72c2      	strb	r2, [r0, #11]
		calc_chksum = true;
   23fac:	2201      	movs	r2, #1
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   23fae:	6e33      	ldr	r3, [r6, #96]	; 0x60
   23fb0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   23fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   23fb8:	4299      	cmp	r1, r3
   23fba:	d007      	beq.n	23fcc <net_tcp_send_pkt+0x64>
		(tcp_hdr->flags & NET_TCP_ACK) == 0) {
   23fbc:	7b63      	ldrb	r3, [r4, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   23fbe:	f013 0f10 	tst.w	r3, #16
   23fc2:	d103      	bne.n	23fcc <net_tcp_send_pkt+0x64>
		tcp_hdr->flags |= NET_TCP_ACK;
   23fc4:	f043 0310 	orr.w	r3, r3, #16
   23fc8:	7363      	strb	r3, [r4, #13]
		calc_chksum = true;
   23fca:	2201      	movs	r2, #1
	if (calc_chksum) {
   23fcc:	bb12      	cbnz	r2, 24014 <net_tcp_send_pkt+0xac>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   23fce:	7b63      	ldrb	r3, [r4, #13]
   23fd0:	f013 0f01 	tst.w	r3, #1
   23fd4:	d006      	beq.n	23fe4 <net_tcp_send_pkt+0x7c>
		ctx->tcp->fin_sent = 1;
   23fd6:	6e32      	ldr	r2, [r6, #96]	; 0x60
   23fd8:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   23fdc:	f043 0302 	orr.w	r3, r3, #2
   23fe0:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   23fe4:	6e33      	ldr	r3, [r6, #96]	; 0x60
   23fe6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   23fea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_tcp_set_hdr(pkt, tcp_hdr);
   23fee:	4621      	mov	r1, r4
   23ff0:	4628      	mov	r0, r5
   23ff2:	f7ff feaa 	bl	23d4a <net_tcp_set_hdr>
	return pkt->family;
   23ff6:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   23ffa:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (is_6lo_technology(pkt)) {
   23ffe:	2b0a      	cmp	r3, #10
   24000:	d00d      	beq.n	2401e <net_tcp_send_pkt+0xb6>
	return net_send_data(pkt);
   24002:	4628      	mov	r0, r5
   24004:	f7f6 ffc8 	bl	1af98 <net_send_data>
   24008:	4604      	mov	r4, r0
}
   2400a:	4620      	mov	r0, r4
   2400c:	b006      	add	sp, #24
   2400e:	bd70      	pop	{r4, r5, r6, pc}
	bool calc_chksum = false;
   24010:	2200      	movs	r2, #0
   24012:	e7cc      	b.n	23fae <net_tcp_send_pkt+0x46>
		net_tcp_set_chksum(pkt, pkt->frags);
   24014:	68a9      	ldr	r1, [r5, #8]
   24016:	4628      	mov	r0, r5
   24018:	f7ff ff59 	bl	23ece <net_tcp_set_chksum>
   2401c:	e7d7      	b.n	23fce <net_tcp_send_pkt+0x66>
	if (is_6lo_technology(pkt)) {
   2401e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   24022:	2b02      	cmp	r3, #2
   24024:	d1ed      	bne.n	24002 <net_tcp_send_pkt+0x9a>
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   24026:	6e33      	ldr	r3, [r6, #96]	; 0x60
	return list->head;
   24028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   2402c:	b10b      	cbz	r3, 24032 <net_tcp_send_pkt+0xca>
   2402e:	3b34      	subs	r3, #52	; 0x34
   24030:	e006      	b.n	24040 <net_tcp_send_pkt+0xd8>
   24032:	2300      	movs	r3, #0
   24034:	e004      	b.n	24040 <net_tcp_send_pkt+0xd8>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24036:	4611      	mov	r1, r2
   24038:	e009      	b.n	2404e <net_tcp_send_pkt+0xe6>
	return node->next;
   2403a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2403c:	f1a2 0334 	sub.w	r3, r2, #52	; 0x34
   24040:	b163      	cbz	r3, 2405c <net_tcp_send_pkt+0xf4>
			if (check_pkt == pkt) {
   24042:	42ab      	cmp	r3, r5
   24044:	d009      	beq.n	2405a <net_tcp_send_pkt+0xf2>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24046:	f113 0234 	adds.w	r2, r3, #52	; 0x34
   2404a:	d0f4      	beq.n	24036 <net_tcp_send_pkt+0xce>
	return node->next;
   2404c:	6b59      	ldr	r1, [r3, #52]	; 0x34
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   2404e:	b111      	cbz	r1, 24056 <net_tcp_send_pkt+0xee>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24050:	2a00      	cmp	r2, #0
   24052:	d1f2      	bne.n	2403a <net_tcp_send_pkt+0xd2>
   24054:	e7f2      	b.n	2403c <net_tcp_send_pkt+0xd4>
   24056:	2300      	movs	r3, #0
   24058:	e7f2      	b.n	24040 <net_tcp_send_pkt+0xd8>
				pkt_in_slist = true;
   2405a:	2301      	movs	r3, #1
		if (pkt_in_slist) {
   2405c:	2b00      	cmp	r3, #0
   2405e:	d0d0      	beq.n	24002 <net_tcp_send_pkt+0x9a>
			new_pkt = net_pkt_clone(pkt, ALLOC_TIMEOUT);
   24060:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   24064:	4628      	mov	r0, r5
   24066:	f7f9 fec7 	bl	1ddf8 <net_pkt_clone>
			if (!new_pkt) {
   2406a:	4605      	mov	r5, r0
   2406c:	b178      	cbz	r0, 2408e <net_tcp_send_pkt+0x126>
			ret = net_send_data(new_pkt);
   2406e:	f7f6 ff93 	bl	1af98 <net_send_data>
			if (ret < 0) {
   24072:	1e04      	subs	r4, r0, #0
   24074:	db04      	blt.n	24080 <net_tcp_send_pkt+0x118>
	net_stats.tcp.rexmit++;
   24076:	4a07      	ldr	r2, [pc, #28]	; (24094 <net_tcp_send_pkt+0x12c>)
   24078:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2407a:	3301      	adds	r3, #1
   2407c:	6713      	str	r3, [r2, #112]	; 0x70
   2407e:	e7c4      	b.n	2400a <net_tcp_send_pkt+0xa2>
				net_pkt_unref(new_pkt);
   24080:	4628      	mov	r0, r5
   24082:	f7f9 fb8a 	bl	1d79a <net_pkt_unref>
   24086:	e7c0      	b.n	2400a <net_tcp_send_pkt+0xa2>
		return -EMSGSIZE;
   24088:	f06f 0479 	mvn.w	r4, #121	; 0x79
   2408c:	e7bd      	b.n	2400a <net_tcp_send_pkt+0xa2>
				return -ENOMEM;
   2408e:	f06f 040b 	mvn.w	r4, #11
   24092:	e7ba      	b.n	2400a <net_tcp_send_pkt+0xa2>
   24094:	20003038 	.word	0x20003038

00024098 <tcp_retry_expired>:
	return (!list->head);
   24098:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   2409a:	2b00      	cmp	r3, #0
   2409c:	d05c      	beq.n	24158 <tcp_retry_expired+0xc0>
{
   2409e:	b510      	push	{r4, lr}
   240a0:	f1a0 0158 	sub.w	r1, r0, #88	; 0x58
   240a4:	4604      	mov	r4, r0
		tcp->retry_timeout_shift++;
   240a6:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   240aa:	f002 031f 	and.w	r3, r2, #31
   240ae:	3301      	adds	r3, #1
   240b0:	f003 031f 	and.w	r3, r3, #31
   240b4:	f363 0204 	bfi	r2, r3, #0, #5
   240b8:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   240bc:	2b09      	cmp	r3, #9
   240be:	dc2f      	bgt.n	24120 <tcp_retry_expired+0x88>
   240c0:	2200      	movs	r2, #0
   240c2:	21c8      	movs	r1, #200	; 0xc8
   240c4:	4099      	lsls	r1, r3
   240c6:	f005 fd4d 	bl	29b64 <_impl_k_timer_start>
	return list->head;
   240ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   240cc:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
	return pkt->sent_or_eof;
   240d0:	791a      	ldrb	r2, [r3, #4]
		if (net_pkt_sent(pkt)) {
   240d2:	f012 0f01 	tst.w	r2, #1
   240d6:	d00d      	beq.n	240f4 <tcp_retry_expired+0x5c>
	return pkt->family;
   240d8:	f3c2 02c3 	ubfx	r2, r2, #3, #4
			do_ref_if_needed(tcp, pkt);
   240dc:	2a0a      	cmp	r2, #10
   240de:	d023      	beq.n	24128 <tcp_retry_expired+0x90>
   240e0:	4620      	mov	r0, r4
   240e2:	f7f9 fb4b 	bl	1d77c <net_pkt_ref>
   240e6:	4604      	mov	r4, r0
	pkt->sent_or_eof = sent;
   240e8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   240ec:	f36f 0300 	bfc	r3, #0, #1
   240f0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->pkt_queued = send;
   240f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   240f8:	f043 0302 	orr.w	r3, r3, #2
   240fc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   24100:	4620      	mov	r0, r4
   24102:	f7ff ff31 	bl	23f68 <net_tcp_send_pkt>
   24106:	2800      	cmp	r0, #0
   24108:	db13      	blt.n	24132 <tcp_retry_expired+0x9a>
	return pkt->family;
   2410a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2410e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   24112:	2b0a      	cmp	r3, #10
   24114:	d01b      	beq.n	2414e <tcp_retry_expired+0xb6>
   24116:	4a11      	ldr	r2, [pc, #68]	; (2415c <tcp_retry_expired+0xc4>)
   24118:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2411a:	3301      	adds	r3, #1
   2411c:	6713      	str	r3, [r2, #112]	; 0x70
   2411e:	bd10      	pop	{r4, pc}
			abort_connection(tcp);
   24120:	4608      	mov	r0, r1
   24122:	f7ff f99a 	bl	2345a <abort_connection>
			return;
   24126:	bd10      	pop	{r4, pc}
			do_ref_if_needed(tcp, pkt);
   24128:	f813 3c07 	ldrb.w	r3, [r3, #-7]
   2412c:	2b02      	cmp	r3, #2
   2412e:	d1d7      	bne.n	240e0 <tcp_retry_expired+0x48>
   24130:	e7da      	b.n	240e8 <tcp_retry_expired+0x50>
   24132:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   24136:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   2413a:	2b0a      	cmp	r3, #10
   2413c:	d103      	bne.n	24146 <tcp_retry_expired+0xae>
   2413e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   24142:	2b02      	cmp	r3, #2
   24144:	d0e1      	beq.n	2410a <tcp_retry_expired+0x72>
			net_pkt_unref(pkt);
   24146:	4620      	mov	r0, r4
   24148:	f7f9 fb27 	bl	1d79a <net_pkt_unref>
   2414c:	bd10      	pop	{r4, pc}
			    !is_6lo_technology(pkt)) {
   2414e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   24152:	2b02      	cmp	r3, #2
   24154:	d1df      	bne.n	24116 <tcp_retry_expired+0x7e>
   24156:	e7e2      	b.n	2411e <tcp_retry_expired+0x86>
   24158:	4770      	bx	lr
   2415a:	bf00      	nop
   2415c:	20003038 	.word	0x20003038

00024160 <net_tcp_send_data>:
{
   24160:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   24162:	6e03      	ldr	r3, [r0, #96]	; 0x60
   24164:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
   24168:	b10c      	cbz	r4, 2416e <net_tcp_send_data+0xe>
   2416a:	3c34      	subs	r4, #52	; 0x34
   2416c:	e013      	b.n	24196 <net_tcp_send_data+0x36>
   2416e:	2400      	movs	r4, #0
   24170:	e011      	b.n	24196 <net_tcp_send_data+0x36>
				net_pkt_unref(pkt);
   24172:	4620      	mov	r0, r4
   24174:	f7f9 fb11 	bl	1d79a <net_pkt_unref>
	pkt->pkt_queued = send;
   24178:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2417c:	f043 0302 	orr.w	r3, r3, #2
   24180:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24184:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   24188:	d01e      	beq.n	241c8 <net_tcp_send_data+0x68>
	return node->next;
   2418a:	6b62      	ldr	r2, [r4, #52]	; 0x34
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   2418c:	b1f2      	cbz	r2, 241cc <net_tcp_send_data+0x6c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2418e:	b103      	cbz	r3, 24192 <net_tcp_send_data+0x32>
	return node->next;
   24190:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24192:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
   24196:	b1dc      	cbz	r4, 241d0 <net_tcp_send_data+0x70>
	return pkt->pkt_queued;
   24198:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		if (net_pkt_queued(pkt)) {
   2419c:	f013 0f02 	tst.w	r3, #2
   241a0:	d1f0      	bne.n	24184 <net_tcp_send_data+0x24>
		if (!net_pkt_sent(pkt)) {
   241a2:	f013 0f01 	tst.w	r3, #1
   241a6:	d1ed      	bne.n	24184 <net_tcp_send_data+0x24>
			ret = net_tcp_send_pkt(pkt);
   241a8:	4620      	mov	r0, r4
   241aa:	f7ff fedd 	bl	23f68 <net_tcp_send_pkt>
			if (ret < 0 && !is_6lo_technology(pkt)) {
   241ae:	2800      	cmp	r0, #0
   241b0:	dae2      	bge.n	24178 <net_tcp_send_data+0x18>
	return pkt->family;
   241b2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   241b6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   241ba:	2b0a      	cmp	r3, #10
   241bc:	d1d9      	bne.n	24172 <net_tcp_send_data+0x12>
   241be:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   241c2:	2b02      	cmp	r3, #2
   241c4:	d1d5      	bne.n	24172 <net_tcp_send_data+0x12>
   241c6:	e7d7      	b.n	24178 <net_tcp_send_data+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   241c8:	461a      	mov	r2, r3
   241ca:	e7df      	b.n	2418c <net_tcp_send_data+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   241cc:	2400      	movs	r4, #0
   241ce:	e7e2      	b.n	24196 <net_tcp_send_data+0x36>
}
   241d0:	2000      	movs	r0, #0
   241d2:	bd10      	pop	{r4, pc}

000241d4 <net_tcp_ack_received>:
{
   241d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   241d8:	b087      	sub	sp, #28
   241da:	4681      	mov	r9, r0
   241dc:	4688      	mov	r8, r1
	struct net_tcp *tcp = ctx->tcp;
   241de:	6e05      	ldr	r5, [r0, #96]	; 0x60
	return (!list->head);
   241e0:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   241e4:	b10b      	cbz	r3, 241ea <net_tcp_ack_received+0x16>
		valid_ack = true;
   241e6:	2700      	movs	r7, #0
   241e8:	e033      	b.n	24252 <net_tcp_ack_received+0x7e>
	net_stats.tcp.ackerr++;
   241ea:	4a51      	ldr	r2, [pc, #324]	; (24330 <net_tcp_ack_received+0x15c>)
   241ec:	6e53      	ldr	r3, [r2, #100]	; 0x64
   241ee:	3301      	adds	r3, #1
   241f0:	6653      	str	r3, [r2, #100]	; 0x64
   241f2:	e7f8      	b.n	241e6 <net_tcp_ack_received+0x12>
		list->head = node->next;
   241f4:	6823      	ldr	r3, [r4, #0]
   241f6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   241fa:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   241fe:	42a2      	cmp	r2, r4
   24200:	d005      	beq.n	2420e <net_tcp_ack_received+0x3a>
	node->next = NULL;
   24202:	2300      	movs	r3, #0
   24204:	6023      	str	r3, [r4, #0]
			net_pkt_unref(pkt);
   24206:	4630      	mov	r0, r6
   24208:	f7f9 fac7 	bl	1d79a <net_pkt_unref>
   2420c:	e021      	b.n	24252 <net_tcp_ack_received+0x7e>
			list->tail = list->head;
   2420e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   24212:	e7f6      	b.n	24202 <net_tcp_ack_received+0x2e>
   24214:	4a46      	ldr	r2, [pc, #280]	; (24330 <net_tcp_ack_received+0x15c>)
   24216:	6e53      	ldr	r3, [r2, #100]	; 0x64
   24218:	3301      	adds	r3, #1
   2421a:	6653      	str	r3, [r2, #100]	; 0x64
	if (valid_ack && net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED) {
   2421c:	b12f      	cbz	r7, 2422a <net_tcp_ack_received+0x56>
	return (enum net_tcp_state)tcp->state;
   2421e:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   24222:	f3c3 3343 	ubfx	r3, r3, #13, #4
   24226:	2b04      	cmp	r3, #4
   24228:	d046      	beq.n	242b8 <net_tcp_ack_received+0xe4>
}
   2422a:	b007      	add	sp, #28
   2422c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   24230:	2108      	movs	r1, #8
   24232:	4628      	mov	r0, r5
   24234:	f7ff faf7 	bl	23826 <net_tcp_change_state>
		list->head = node->next;
   24238:	6823      	ldr	r3, [r4, #0]
   2423a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   2423e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   24242:	42a2      	cmp	r2, r4
   24244:	d035      	beq.n	242b2 <net_tcp_ack_received+0xde>
	node->next = NULL;
   24246:	2300      	movs	r3, #0
   24248:	6023      	str	r3, [r4, #0]
		net_pkt_unref(pkt);
   2424a:	4630      	mov	r0, r6
   2424c:	f7f9 faa5 	bl	1d79a <net_pkt_unref>
		valid_ack = true;
   24250:	2701      	movs	r7, #1
	return (!list->head);
   24252:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
	while (!sys_slist_is_empty(list)) {
   24256:	2c00      	cmp	r4, #0
   24258:	d0e0      	beq.n	2421c <net_tcp_ack_received+0x48>
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   2425a:	f1a4 0634 	sub.w	r6, r4, #52	; 0x34
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2425e:	a901      	add	r1, sp, #4
   24260:	4630      	mov	r0, r6
   24262:	f7ff fccf 	bl	23c04 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   24266:	4602      	mov	r2, r0
   24268:	2800      	cmp	r0, #0
   2426a:	d0c3      	beq.n	241f4 <net_tcp_ack_received+0x20>
	return ((u16_t)src[0] << 8) | src[1];
   2426c:	7903      	ldrb	r3, [r0, #4]
   2426e:	7941      	ldrb	r1, [r0, #5]
   24270:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   24274:	7980      	ldrb	r0, [r0, #6]
   24276:	79d3      	ldrb	r3, [r2, #7]
   24278:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   2427c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	return pkt->appdatalen;
   24280:	f834 3c04 	ldrh.w	r3, [r4, #-4]
		seq = sys_get_be32(tcp_hdr->seq) + net_pkt_appdatalen(pkt) - 1;
   24284:	440b      	add	r3, r1
   24286:	3b01      	subs	r3, #1
   24288:	eba8 0303 	sub.w	r3, r8, r3
		if (!net_tcp_seq_greater(ack, seq)) {
   2428c:	2b00      	cmp	r3, #0
   2428e:	ddc1      	ble.n	24214 <net_tcp_ack_received+0x40>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   24290:	7b53      	ldrb	r3, [r2, #13]
   24292:	f013 0f01 	tst.w	r3, #1
   24296:	d0cf      	beq.n	24238 <net_tcp_ack_received+0x64>
   24298:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   2429c:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   242a0:	2b07      	cmp	r3, #7
   242a2:	d0c5      	beq.n	24230 <net_tcp_ack_received+0x5c>
			} else if (s == NET_TCP_CLOSING) {
   242a4:	2b0a      	cmp	r3, #10
   242a6:	d1c7      	bne.n	24238 <net_tcp_ack_received+0x64>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   242a8:	2109      	movs	r1, #9
   242aa:	4628      	mov	r0, r5
   242ac:	f7ff fabb 	bl	23826 <net_tcp_change_state>
   242b0:	e7c2      	b.n	24238 <net_tcp_ack_received+0x64>
			list->tail = list->head;
   242b2:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   242b6:	e7c6      	b.n	24246 <net_tcp_ack_received+0x72>
		restart_timer(ctx->tcp);
   242b8:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
   242bc:	f7ff f8db 	bl	23476 <restart_timer>
		if (ctx->tcp->flags & NET_TCP_RETRYING) {
   242c0:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
   242c4:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
   242c8:	f412 7f00 	tst.w	r2, #512	; 0x200
   242cc:	d0ad      	beq.n	2422a <net_tcp_ack_received+0x56>
	return list->head;
   242ce:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   242d2:	b108      	cbz	r0, 242d8 <net_tcp_ack_received+0x104>
   242d4:	3834      	subs	r0, #52	; 0x34
   242d6:	e013      	b.n	24300 <net_tcp_ack_received+0x12c>
   242d8:	2000      	movs	r0, #0
   242da:	e011      	b.n	24300 <net_tcp_ack_received+0x12c>
					do_ref_if_needed(ctx->tcp, pkt);
   242dc:	f7f9 fa4e 	bl	1d77c <net_pkt_ref>
	pkt->sent_or_eof = sent;
   242e0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   242e4:	f36f 0300 	bfc	r3, #0, #1
   242e8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   242ec:	b140      	cbz	r0, 24300 <net_tcp_ack_received+0x12c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   242ee:	f110 0334 	adds.w	r3, r0, #52	; 0x34
   242f2:	d014      	beq.n	2431e <net_tcp_ack_received+0x14a>
	return node->next;
   242f4:	6b42      	ldr	r2, [r0, #52]	; 0x34
   242f6:	b1a2      	cbz	r2, 24322 <net_tcp_ack_received+0x14e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   242f8:	b103      	cbz	r3, 242fc <net_tcp_ack_received+0x128>
	return node->next;
   242fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   242fc:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
   24300:	b188      	cbz	r0, 24326 <net_tcp_ack_received+0x152>
	return pkt->sent_or_eof;
   24302:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
				if (net_pkt_sent(pkt)) {
   24306:	f013 0f01 	tst.w	r3, #1
   2430a:	d0ef      	beq.n	242ec <net_tcp_ack_received+0x118>
	return pkt->family;
   2430c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
					do_ref_if_needed(ctx->tcp, pkt);
   24310:	2b0a      	cmp	r3, #10
   24312:	d1e3      	bne.n	242dc <net_tcp_ack_received+0x108>
   24314:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   24318:	2b02      	cmp	r3, #2
   2431a:	d1df      	bne.n	242dc <net_tcp_ack_received+0x108>
   2431c:	e7e0      	b.n	242e0 <net_tcp_ack_received+0x10c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2431e:	461a      	mov	r2, r3
   24320:	e7e9      	b.n	242f6 <net_tcp_ack_received+0x122>
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   24322:	2000      	movs	r0, #0
   24324:	e7ec      	b.n	24300 <net_tcp_ack_received+0x12c>
			net_tcp_send_data(ctx);
   24326:	4648      	mov	r0, r9
   24328:	f7ff ff1a 	bl	24160 <net_tcp_send_data>
}
   2432c:	e77d      	b.n	2422a <net_tcp_ack_received+0x56>
   2432e:	bf00      	nop
   24330:	20003038 	.word	0x20003038

00024334 <iface2str>:
	if (iface->l2 == &NET_L2_GET_NAME(BLUETOOTH)) {
   24334:	6842      	ldr	r2, [r0, #4]
   24336:	4b08      	ldr	r3, [pc, #32]	; (24358 <iface2str+0x24>)
   24338:	429a      	cmp	r2, r3
   2433a:	d004      	beq.n	24346 <iface2str+0x12>
	if (extra) {
   2433c:	b151      	cbz	r1, 24354 <iface2str+0x20>
		*extra = "==============";
   2433e:	4b07      	ldr	r3, [pc, #28]	; (2435c <iface2str+0x28>)
   24340:	600b      	str	r3, [r1, #0]
	return "<unknown type>";
   24342:	4807      	ldr	r0, [pc, #28]	; (24360 <iface2str+0x2c>)
   24344:	4770      	bx	lr
		if (extra) {
   24346:	b119      	cbz	r1, 24350 <iface2str+0x1c>
			*extra = "=========";
   24348:	4b06      	ldr	r3, [pc, #24]	; (24364 <iface2str+0x30>)
   2434a:	600b      	str	r3, [r1, #0]
		return "Bluetooth";
   2434c:	4806      	ldr	r0, [pc, #24]	; (24368 <iface2str+0x34>)
   2434e:	4770      	bx	lr
   24350:	4805      	ldr	r0, [pc, #20]	; (24368 <iface2str+0x34>)
   24352:	4770      	bx	lr
	return "<unknown type>";
   24354:	4802      	ldr	r0, [pc, #8]	; (24360 <iface2str+0x2c>)
}
   24356:	4770      	bx	lr
   24358:	0002e690 	.word	0x0002e690
   2435c:	00031ce8 	.word	0x00031ce8
   24360:	00031ccc 	.word	0x00031ccc
   24364:	00031cdc 	.word	0x00031cdc
   24368:	00031cc0 	.word	0x00031cc0

0002436c <slab_pool_found_already>:
				    struct k_mem_slab *slab,
				    struct net_buf_pool *pool)
{
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   2436c:	2300      	movs	r3, #0
   2436e:	2b05      	cmp	r3, #5
   24370:	dc18      	bgt.n	243a4 <slab_pool_found_already+0x38>
{
   24372:	b410      	push	{r4}
   24374:	e008      	b.n	24388 <slab_pool_found_already+0x1c>
		if (slab) {
			if (info->tx_slabs[i] == slab) {
				return true;
			}
		} else {
			if (info->data_pools[i] == pool) {
   24376:	f103 0408 	add.w	r4, r3, #8
   2437a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   2437e:	4294      	cmp	r4, r2
   24380:	d00e      	beq.n	243a0 <slab_pool_found_already+0x34>
	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   24382:	3301      	adds	r3, #1
   24384:	2b05      	cmp	r3, #5
   24386:	dc08      	bgt.n	2439a <slab_pool_found_already+0x2e>
		if (slab) {
   24388:	2900      	cmp	r1, #0
   2438a:	d0f4      	beq.n	24376 <slab_pool_found_already+0xa>
			if (info->tx_slabs[i] == slab) {
   2438c:	1c9c      	adds	r4, r3, #2
   2438e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   24392:	42a1      	cmp	r1, r4
   24394:	d1f5      	bne.n	24382 <slab_pool_found_already+0x16>
				return true;
   24396:	2001      	movs	r0, #1
   24398:	e000      	b.n	2439c <slab_pool_found_already+0x30>
				return true;
			}
		}
	}

	return false;
   2439a:	2000      	movs	r0, #0
}
   2439c:	bc10      	pop	{r4}
   2439e:	4770      	bx	lr
				return true;
   243a0:	2001      	movs	r0, #1
   243a2:	e7fb      	b.n	2439c <slab_pool_found_already+0x30>
	return false;
   243a4:	2000      	movs	r0, #0
}
   243a6:	4770      	bx	lr

000243a8 <net_shell_cmd_allocs>:
{
   243a8:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_NET_PKT to see allocations.\n");
   243aa:	4802      	ldr	r0, [pc, #8]	; (243b4 <net_shell_cmd_allocs+0xc>)
   243ac:	f7de fdd2 	bl	2f54 <printk>
}
   243b0:	2000      	movs	r0, #0
   243b2:	bd08      	pop	{r3, pc}
   243b4:	00031fc4 	.word	0x00031fc4

000243b8 <net_shell_cmd_app>:
{
   243b8:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_APP and either CONFIG_NET_APP_CLIENT "
   243ba:	4802      	ldr	r0, [pc, #8]	; (243c4 <net_shell_cmd_app+0xc>)
   243bc:	f7de fdca 	bl	2f54 <printk>
}
   243c0:	2000      	movs	r0, #0
   243c2:	bd08      	pop	{r3, pc}
   243c4:	00031ffc 	.word	0x00031ffc

000243c8 <net_shell_cmd_arp>:
{
   243c8:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   243ca:	4802      	ldr	r0, [pc, #8]	; (243d4 <net_shell_cmd_arp+0xc>)
   243cc:	f7de fdc2 	bl	2f54 <printk>
}
   243d0:	2000      	movs	r0, #0
   243d2:	bd08      	pop	{r3, pc}
   243d4:	00032080 	.word	0x00032080

000243d8 <net_shell_cmd_dns>:
{
   243d8:	b508      	push	{r3, lr}
	printk("DNS resolver not supported.\n");
   243da:	4802      	ldr	r0, [pc, #8]	; (243e4 <net_shell_cmd_dns+0xc>)
   243dc:	f7de fdba 	bl	2f54 <printk>
}
   243e0:	2000      	movs	r0, #0
   243e2:	bd08      	pop	{r3, pc}
   243e4:	00032180 	.word	0x00032180

000243e8 <net_shell_cmd_http>:
{
   243e8:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   243ea:	4802      	ldr	r0, [pc, #8]	; (243f4 <net_shell_cmd_http+0xc>)
   243ec:	f7de fdb2 	bl	2f54 <printk>
}
   243f0:	2000      	movs	r0, #0
   243f2:	bd08      	pop	{r3, pc}
   243f4:	000321a0 	.word	0x000321a0

000243f8 <context_info>:
	return context->flags & NET_CONTEXT_IN_USE;
   243f8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
#if defined(CONFIG_NET_CONTEXT_NET_PKT_POOL)
	struct ctx_info *info = user_data;
	struct k_mem_slab *slab;
	struct net_buf_pool *pool;

	if (!net_context_is_used(context)) {
   243fc:	f013 0f01 	tst.w	r3, #1
   24400:	d032      	beq.n	24468 <context_info+0x70>
{
   24402:	b570      	push	{r4, r5, r6, lr}
   24404:	460d      	mov	r5, r1
   24406:	4604      	mov	r4, r0
		return;
	}

	if (context->tx_slab) {
   24408:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   2440a:	b19b      	cbz	r3, 24434 <context_info+0x3c>
		slab = context->tx_slab();
   2440c:	4798      	blx	r3
   2440e:	4606      	mov	r6, r0

		if (slab_pool_found_already(info, slab, NULL)) {
   24410:	2200      	movs	r2, #0
   24412:	4601      	mov	r1, r0
   24414:	4628      	mov	r0, r5
   24416:	f7ff ffa9 	bl	2436c <slab_pool_found_already>
   2441a:	b100      	cbz	r0, 2441e <context_info+0x26>
   2441c:	bd70      	pop	{r4, r5, r6, pc}
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%zu\t%u\t%u\tETX\n",
		       slab, slab->num_blocks * slab->block_size,
		       slab->num_blocks, k_mem_slab_num_free_get(slab));
#else
		printk("%p\t%d\tETX\n", slab, slab->num_blocks);
   2441e:	68b2      	ldr	r2, [r6, #8]
   24420:	4631      	mov	r1, r6
   24422:	4812      	ldr	r0, [pc, #72]	; (2446c <context_info+0x74>)
   24424:	f7de fd96 	bl	2f54 <printk>
#endif
		info->are_external_pools = true;
   24428:	2301      	movs	r3, #1
   2442a:	712b      	strb	r3, [r5, #4]
		info->tx_slabs[info->pos] = slab;
   2442c:	682b      	ldr	r3, [r5, #0]
   2442e:	3302      	adds	r3, #2
   24430:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
	}

	if (context->data_pool) {
   24434:	6c23      	ldr	r3, [r4, #64]	; 0x40
   24436:	b19b      	cbz	r3, 24460 <context_info+0x68>
		pool = context->data_pool();
   24438:	4798      	blx	r3
   2443a:	4604      	mov	r4, r0

		if (slab_pool_found_already(info, NULL, pool)) {
   2443c:	4602      	mov	r2, r0
   2443e:	2100      	movs	r1, #0
   24440:	4628      	mov	r0, r5
   24442:	f7ff ff93 	bl	2436c <slab_pool_found_already>
   24446:	2800      	cmp	r0, #0
   24448:	d1e8      	bne.n	2441c <context_info+0x24>
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%d\t%d\t%d\tEDATA (%s)\n",
		       pool, pool->pool_size, pool->buf_count,
		       pool->avail_count, pool->name);
#else
		printk("%p\t%d\tEDATA\n", pool, pool->buf_count);
   2444a:	8a22      	ldrh	r2, [r4, #16]
   2444c:	4621      	mov	r1, r4
   2444e:	4808      	ldr	r0, [pc, #32]	; (24470 <context_info+0x78>)
   24450:	f7de fd80 	bl	2f54 <printk>
#endif
		info->are_external_pools = true;
   24454:	2301      	movs	r3, #1
   24456:	712b      	strb	r3, [r5, #4]
		info->data_pools[info->pos] = pool;
   24458:	682b      	ldr	r3, [r5, #0]
   2445a:	3308      	adds	r3, #8
   2445c:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	}

	info->pos++;
   24460:	682b      	ldr	r3, [r5, #0]
   24462:	3301      	adds	r3, #1
   24464:	602b      	str	r3, [r5, #0]
   24466:	e7d9      	b.n	2441c <context_info+0x24>
   24468:	4770      	bx	lr
   2446a:	bf00      	nop
   2446c:	00031c84 	.word	0x00031c84
   24470:	00031c90 	.word	0x00031c90

00024474 <net_shell_cmd_rpl>:
}

#endif /* CONFIG_NET_RPL */

int net_shell_cmd_rpl(int argc, char *argv[])
{
   24474:	b508      	push	{r3, lr}
		printk("No parents found.\n");
	}

	printk("\n");
#else
	printk("RPL not enabled, set CONFIG_NET_RPL to enable it.\n");
   24476:	4802      	ldr	r0, [pc, #8]	; (24480 <net_shell_cmd_rpl+0xc>)
   24478:	f7de fd6c 	bl	2f54 <printk>
#endif

	return 0;
}
   2447c:	2000      	movs	r0, #0
   2447e:	bd08      	pop	{r3, pc}
   24480:	000323b0 	.word	0x000323b0

00024484 <net_shell_cmd_stacks>:
extern K_THREAD_STACK_DEFINE(sys_work_q_stack,
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);
#endif

int net_shell_cmd_stacks(int argc, char *argv[])
{
   24484:	b530      	push	{r4, r5, lr}
   24486:	b087      	sub	sp, #28
	struct net_stack_info *info;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	for (info = __net_stack_start; info != __net_stack_end; info++) {
   24488:	4d3f      	ldr	r5, [pc, #252]	; (24588 <net_shell_cmd_stacks+0x104>)
   2448a:	e011      	b.n	244b0 <net_shell_cmd_stacks+0x2c>
						unsigned *unused)
{
	*unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	*pcnt = ((size - *unused) * 100) / size;
   2448c:	1a81      	subs	r1, r0, r2
   2448e:	2364      	movs	r3, #100	; 0x64
   24490:	fb03 f301 	mul.w	r3, r3, r1
   24494:	fbb3 f3f0 	udiv	r3, r3, r0
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
					     info->size, &pcnt, &unused);

#if defined(CONFIG_INIT_STACKS)
		printk("%s [%s] stack size %zu/%zu bytes unused %u usage"
   24498:	9304      	str	r3, [sp, #16]
   2449a:	9003      	str	r0, [sp, #12]
   2449c:	9102      	str	r1, [sp, #8]
   2449e:	9201      	str	r2, [sp, #4]
   244a0:	9000      	str	r0, [sp, #0]
   244a2:	68eb      	ldr	r3, [r5, #12]
   244a4:	68aa      	ldr	r2, [r5, #8]
   244a6:	6869      	ldr	r1, [r5, #4]
   244a8:	4838      	ldr	r0, [pc, #224]	; (2458c <net_shell_cmd_stacks+0x108>)
   244aa:	f7de fd53 	bl	2f54 <printk>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   244ae:	3514      	adds	r5, #20
   244b0:	4b37      	ldr	r3, [pc, #220]	; (24590 <net_shell_cmd_stacks+0x10c>)
   244b2:	429d      	cmp	r5, r3
   244b4:	d00b      	beq.n	244ce <net_shell_cmd_stacks+0x4a>
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   244b6:	682c      	ldr	r4, [r5, #0]
   244b8:	6928      	ldr	r0, [r5, #16]
   244ba:	2300      	movs	r3, #0
	size_t unused = 0;
   244bc:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   244be:	4298      	cmp	r0, r3
   244c0:	d9e4      	bls.n	2448c <net_shell_cmd_stacks+0x8>
		if ((unsigned char)stack[i] == 0xaa) {
   244c2:	5ce1      	ldrb	r1, [r4, r3]
   244c4:	29aa      	cmp	r1, #170	; 0xaa
   244c6:	d1e1      	bne.n	2448c <net_shell_cmd_stacks+0x8>
			unused++;
   244c8:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   244ca:	3301      	adds	r3, #1
   244cc:	e7f7      	b.n	244be <net_shell_cmd_stacks+0x3a>
   244ce:	2300      	movs	r3, #0
   244d0:	461a      	mov	r2, r3
   244d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   244d6:	d206      	bcs.n	244e6 <net_shell_cmd_stacks+0x62>
		if ((unsigned char)stack[i] == 0xaa) {
   244d8:	492e      	ldr	r1, [pc, #184]	; (24594 <net_shell_cmd_stacks+0x110>)
   244da:	5cc9      	ldrb	r1, [r1, r3]
   244dc:	29aa      	cmp	r1, #170	; 0xaa
   244de:	d102      	bne.n	244e6 <net_shell_cmd_stacks+0x62>
			unused++;
   244e0:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   244e2:	3301      	adds	r3, #1
   244e4:	e7f5      	b.n	244d2 <net_shell_cmd_stacks+0x4e>
   244e6:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   244ea:	2364      	movs	r3, #100	; 0x64
   244ec:	fb03 f301 	mul.w	r3, r3, r1
   244f0:	0adb      	lsrs	r3, r3, #11

#if defined(CONFIG_INIT_STACKS)
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_main_stack),
				     K_THREAD_STACK_SIZEOF(_main_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   244f2:	9304      	str	r3, [sp, #16]
   244f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   244f8:	9303      	str	r3, [sp, #12]
   244fa:	9102      	str	r1, [sp, #8]
   244fc:	9201      	str	r2, [sp, #4]
   244fe:	9300      	str	r3, [sp, #0]
   24500:	4a25      	ldr	r2, [pc, #148]	; (24598 <net_shell_cmd_stacks+0x114>)
   24502:	4926      	ldr	r1, [pc, #152]	; (2459c <net_shell_cmd_stacks+0x118>)
   24504:	4826      	ldr	r0, [pc, #152]	; (245a0 <net_shell_cmd_stacks+0x11c>)
   24506:	f7de fd25 	bl	2f54 <printk>
   2450a:	2300      	movs	r3, #0
	size_t unused = 0;
   2450c:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   2450e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   24512:	d206      	bcs.n	24522 <net_shell_cmd_stacks+0x9e>
		if ((unsigned char)stack[i] == 0xaa) {
   24514:	4923      	ldr	r1, [pc, #140]	; (245a4 <net_shell_cmd_stacks+0x120>)
   24516:	5cc9      	ldrb	r1, [r1, r3]
   24518:	29aa      	cmp	r1, #170	; 0xaa
   2451a:	d102      	bne.n	24522 <net_shell_cmd_stacks+0x9e>
			unused++;
   2451c:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   2451e:	3301      	adds	r3, #1
   24520:	e7f5      	b.n	2450e <net_shell_cmd_stacks+0x8a>
   24522:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   24526:	2364      	movs	r3, #100	; 0x64
   24528:	fb03 f301 	mul.w	r3, r3, r1
   2452c:	0adb      	lsrs	r3, r3, #11
	       CONFIG_MAIN_STACK_SIZE - unused, CONFIG_MAIN_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_interrupt_stack),
				     K_THREAD_STACK_SIZEOF(_interrupt_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   2452e:	9304      	str	r3, [sp, #16]
   24530:	f44f 6300 	mov.w	r3, #2048	; 0x800
   24534:	9303      	str	r3, [sp, #12]
   24536:	9102      	str	r1, [sp, #8]
   24538:	9201      	str	r2, [sp, #4]
   2453a:	9300      	str	r3, [sp, #0]
   2453c:	4a1a      	ldr	r2, [pc, #104]	; (245a8 <net_shell_cmd_stacks+0x124>)
   2453e:	491b      	ldr	r1, [pc, #108]	; (245ac <net_shell_cmd_stacks+0x128>)
   24540:	4817      	ldr	r0, [pc, #92]	; (245a0 <net_shell_cmd_stacks+0x11c>)
   24542:	f7de fd07 	bl	2f54 <printk>
   24546:	2300      	movs	r3, #0
	size_t unused = 0;
   24548:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   2454a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2454e:	d206      	bcs.n	2455e <net_shell_cmd_stacks+0xda>
		if ((unsigned char)stack[i] == 0xaa) {
   24550:	4917      	ldr	r1, [pc, #92]	; (245b0 <net_shell_cmd_stacks+0x12c>)
   24552:	5cc9      	ldrb	r1, [r1, r3]
   24554:	29aa      	cmp	r1, #170	; 0xaa
   24556:	d102      	bne.n	2455e <net_shell_cmd_stacks+0xda>
			unused++;
   24558:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   2455a:	3301      	adds	r3, #1
   2455c:	e7f5      	b.n	2454a <net_shell_cmd_stacks+0xc6>
   2455e:	f5c2 6180 	rsb	r1, r2, #1024	; 0x400
   24562:	2364      	movs	r3, #100	; 0x64
   24564:	fb03 f301 	mul.w	r3, r3, r1
   24568:	0a9b      	lsrs	r3, r3, #10
	       CONFIG_ISR_STACK_SIZE - unused, CONFIG_ISR_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(sys_work_q_stack),
				     K_THREAD_STACK_SIZEOF(sys_work_q_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   2456a:	9304      	str	r3, [sp, #16]
   2456c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   24570:	9303      	str	r3, [sp, #12]
   24572:	9102      	str	r1, [sp, #8]
   24574:	9201      	str	r2, [sp, #4]
   24576:	9300      	str	r3, [sp, #0]
   24578:	4a0e      	ldr	r2, [pc, #56]	; (245b4 <net_shell_cmd_stacks+0x130>)
   2457a:	490f      	ldr	r1, [pc, #60]	; (245b8 <net_shell_cmd_stacks+0x134>)
   2457c:	4808      	ldr	r0, [pc, #32]	; (245a0 <net_shell_cmd_stacks+0x11c>)
   2457e:	f7de fce9 	bl	2f54 <printk>
#else
	printk("Enable CONFIG_INIT_STACKS to see usage information.\n");
#endif

	return 0;
}
   24582:	2000      	movs	r0, #0
   24584:	b007      	add	sp, #28
   24586:	bd30      	pop	{r4, r5, pc}
   24588:	2000da74 	.word	0x2000da74
   2458c:	000323e4 	.word	0x000323e4
   24590:	2000dab0 	.word	0x2000dab0
   24594:	2000a908 	.word	0x2000a908
   24598:	00032428 	.word	0x00032428
   2459c:	00032434 	.word	0x00032434
   245a0:	0003243c 	.word	0x0003243c
   245a4:	2000b248 	.word	0x2000b248
   245a8:	0003247c 	.word	0x0003247c
   245ac:	00032490 	.word	0x00032490
   245b0:	2000ba48 	.word	0x2000ba48
   245b4:	00032494 	.word	0x00032494
   245b8:	000324a8 	.word	0x000324a8

000245bc <net_shell_cmd_stats>:

int net_shell_cmd_stats(int argc, char *argv[])
{
   245bc:	b510      	push	{r4, lr}
   245be:	b082      	sub	sp, #8
	printk("IPv6 recv      %d\tsent\t%d\tdrop\t%d\tforwarded\t%d\n",
   245c0:	4c34      	ldr	r4, [pc, #208]	; (24694 <net_shell_cmd_stats+0xd8>)
   245c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   245c4:	9300      	str	r3, [sp, #0]
   245c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   245c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   245ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
   245cc:	4832      	ldr	r0, [pc, #200]	; (24698 <net_shell_cmd_stats+0xdc>)
   245ce:	f7de fcc1 	bl	2f54 <printk>
	printk("IPv6 ND recv   %d\tsent\t%d\tdrop\t%d\n",
   245d2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   245d6:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   245da:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   245de:	482f      	ldr	r0, [pc, #188]	; (2469c <net_shell_cmd_stats+0xe0>)
   245e0:	f7de fcb8 	bl	2f54 <printk>
	printk("IPv6 MLD recv  %d\tsent\t%d\tdrop\t%d\n",
   245e4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   245e8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   245ec:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   245f0:	482b      	ldr	r0, [pc, #172]	; (246a0 <net_shell_cmd_stats+0xe4>)
   245f2:	f7de fcaf 	bl	2f54 <printk>
	printk("IP vhlerr      %d\thblener\t%d\tlblener\t%d\n",
   245f6:	6963      	ldr	r3, [r4, #20]
   245f8:	6922      	ldr	r2, [r4, #16]
   245fa:	68e1      	ldr	r1, [r4, #12]
   245fc:	4829      	ldr	r0, [pc, #164]	; (246a4 <net_shell_cmd_stats+0xe8>)
   245fe:	f7de fca9 	bl	2f54 <printk>
	printk("IP fragerr     %d\tchkerr\t%d\tprotoer\t%d\n",
   24602:	6a23      	ldr	r3, [r4, #32]
   24604:	69e2      	ldr	r2, [r4, #28]
   24606:	69a1      	ldr	r1, [r4, #24]
   24608:	4827      	ldr	r0, [pc, #156]	; (246a8 <net_shell_cmd_stats+0xec>)
   2460a:	f7de fca3 	bl	2f54 <printk>
	printk("ICMP recv      %d\tsent\t%d\tdrop\t%d\n",
   2460e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   24610:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   24612:	6b61      	ldr	r1, [r4, #52]	; 0x34
   24614:	4825      	ldr	r0, [pc, #148]	; (246ac <net_shell_cmd_stats+0xf0>)
   24616:	f7de fc9d 	bl	2f54 <printk>
	printk("ICMP typeer    %d\tchkerr\t%d\n",
   2461a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2461c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   2461e:	4824      	ldr	r0, [pc, #144]	; (246b0 <net_shell_cmd_stats+0xf4>)
   24620:	f7de fc98 	bl	2f54 <printk>
	printk("UDP recv       %d\tsent\t%d\tdrop\t%d\n",
   24624:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   24626:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   2462a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   2462e:	4821      	ldr	r0, [pc, #132]	; (246b4 <net_shell_cmd_stats+0xf8>)
   24630:	f7de fc90 	bl	2f54 <printk>
	printk("UDP chkerr     %d\n",
   24634:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   24638:	481f      	ldr	r0, [pc, #124]	; (246b8 <net_shell_cmd_stats+0xfc>)
   2463a:	f7de fc8b 	bl	2f54 <printk>
	printk("TCP bytes recv %u\tsent\t%d\n",
   2463e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24640:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   24642:	481e      	ldr	r0, [pc, #120]	; (246bc <net_shell_cmd_stats+0x100>)
   24644:	f7de fc86 	bl	2f54 <printk>
	printk("TCP seg recv   %d\tsent\t%d\tdrop\t%d\n",
   24648:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2464a:	6da2      	ldr	r2, [r4, #88]	; 0x58
   2464c:	6d61      	ldr	r1, [r4, #84]	; 0x54
   2464e:	481c      	ldr	r0, [pc, #112]	; (246c0 <net_shell_cmd_stats+0x104>)
   24650:	f7de fc80 	bl	2f54 <printk>
	printk("TCP seg resent %d\tchkerr\t%d\tackerr\t%d\n",
   24654:	6e63      	ldr	r3, [r4, #100]	; 0x64
   24656:	6e22      	ldr	r2, [r4, #96]	; 0x60
   24658:	6d21      	ldr	r1, [r4, #80]	; 0x50
   2465a:	481a      	ldr	r0, [pc, #104]	; (246c4 <net_shell_cmd_stats+0x108>)
   2465c:	f7de fc7a 	bl	2f54 <printk>
	printk("TCP seg rsterr %d\trst\t%d\tre-xmit\t%d\n",
   24660:	6f23      	ldr	r3, [r4, #112]	; 0x70
   24662:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   24664:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   24666:	4818      	ldr	r0, [pc, #96]	; (246c8 <net_shell_cmd_stats+0x10c>)
   24668:	f7de fc74 	bl	2f54 <printk>
	printk("TCP conn drop  %d\tconnrst\t%d\n",
   2466c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   2466e:	6f61      	ldr	r1, [r4, #116]	; 0x74
   24670:	4816      	ldr	r0, [pc, #88]	; (246cc <net_shell_cmd_stats+0x110>)
   24672:	f7de fc6f 	bl	2f54 <printk>
	printk("Bytes received %u\n", GET_STAT(bytes.received));
   24676:	68a1      	ldr	r1, [r4, #8]
   24678:	4815      	ldr	r0, [pc, #84]	; (246d0 <net_shell_cmd_stats+0x114>)
   2467a:	f7de fc6b 	bl	2f54 <printk>
	printk("Bytes sent     %u\n", GET_STAT(bytes.sent));
   2467e:	6861      	ldr	r1, [r4, #4]
   24680:	4814      	ldr	r0, [pc, #80]	; (246d4 <net_shell_cmd_stats+0x118>)
   24682:	f7de fc67 	bl	2f54 <printk>
	printk("Processing err %d\n", GET_STAT(processing_error));
   24686:	6821      	ldr	r1, [r4, #0]
   24688:	4813      	ldr	r0, [pc, #76]	; (246d8 <net_shell_cmd_stats+0x11c>)
   2468a:	f7de fc63 	bl	2f54 <printk>
#else
	printk("Network statistics not compiled in.\n");
#endif

	return 0;
}
   2468e:	2000      	movs	r0, #0
   24690:	b002      	add	sp, #8
   24692:	bd10      	pop	{r4, pc}
   24694:	20003038 	.word	0x20003038
   24698:	000324b0 	.word	0x000324b0
   2469c:	000324e0 	.word	0x000324e0
   246a0:	00032504 	.word	0x00032504
   246a4:	00032528 	.word	0x00032528
   246a8:	00032554 	.word	0x00032554
   246ac:	0003257c 	.word	0x0003257c
   246b0:	000325a0 	.word	0x000325a0
   246b4:	000325c0 	.word	0x000325c0
   246b8:	000325e4 	.word	0x000325e4
   246bc:	000325f8 	.word	0x000325f8
   246c0:	00032614 	.word	0x00032614
   246c4:	00032638 	.word	0x00032638
   246c8:	00032660 	.word	0x00032660
   246cc:	00032688 	.word	0x00032688
   246d0:	000326a8 	.word	0x000326a8
   246d4:	000326bc 	.word	0x000326bc
   246d8:	000326d0 	.word	0x000326d0

000246dc <tcp_sent_cb>:

static void tcp_sent_cb(struct net_context *context,
			int status,
			void *token,
			void *user_data)
{
   246dc:	b508      	push	{r3, lr}
	printk("Message sent\n");
   246de:	4802      	ldr	r0, [pc, #8]	; (246e8 <tcp_sent_cb+0xc>)
   246e0:	f7de fc38 	bl	2f54 <printk>
   246e4:	bd08      	pop	{r3, pc}
   246e6:	bf00      	nop
   246e8:	00032990 	.word	0x00032990

000246ec <net_shell_cmd_conn>:
{
   246ec:	b510      	push	{r4, lr}
   246ee:	b082      	sub	sp, #8
	int count = 0;
   246f0:	ac02      	add	r4, sp, #8
   246f2:	2300      	movs	r3, #0
   246f4:	f844 3d04 	str.w	r3, [r4, #-4]!
	printk("     Context   \tIface         Flags "
   246f8:	4810      	ldr	r0, [pc, #64]	; (2473c <net_shell_cmd_conn+0x50>)
   246fa:	f7de fc2b 	bl	2f54 <printk>
	net_context_foreach(context_cb, &count);
   246fe:	4621      	mov	r1, r4
   24700:	480f      	ldr	r0, [pc, #60]	; (24740 <net_shell_cmd_conn+0x54>)
   24702:	f7f8 ff03 	bl	1d50c <net_context_foreach>
	if (count == 0) {
   24706:	9b01      	ldr	r3, [sp, #4]
   24708:	b17b      	cbz	r3, 2472a <net_shell_cmd_conn+0x3e>
	printk("\nTCP        Src port  Dst port   Send-Seq   Send-Ack  MSS"
   2470a:	490e      	ldr	r1, [pc, #56]	; (24744 <net_shell_cmd_conn+0x58>)
   2470c:	480e      	ldr	r0, [pc, #56]	; (24748 <net_shell_cmd_conn+0x5c>)
   2470e:	f7de fc21 	bl	2f54 <printk>
	count = 0;
   24712:	a902      	add	r1, sp, #8
   24714:	2300      	movs	r3, #0
   24716:	f841 3d04 	str.w	r3, [r1, #-4]!
	net_tcp_foreach(tcp_cb, &count);
   2471a:	480c      	ldr	r0, [pc, #48]	; (2474c <net_shell_cmd_conn+0x60>)
   2471c:	f7ff fa48 	bl	23bb0 <net_tcp_foreach>
	if (count == 0) {
   24720:	9b01      	ldr	r3, [sp, #4]
   24722:	b133      	cbz	r3, 24732 <net_shell_cmd_conn+0x46>
}
   24724:	2000      	movs	r0, #0
   24726:	b002      	add	sp, #8
   24728:	bd10      	pop	{r4, pc}
		printk("No connections\n");
   2472a:	4809      	ldr	r0, [pc, #36]	; (24750 <net_shell_cmd_conn+0x64>)
   2472c:	f7de fc12 	bl	2f54 <printk>
   24730:	e7eb      	b.n	2470a <net_shell_cmd_conn+0x1e>
		printk("No TCP connections\n");
   24732:	4808      	ldr	r0, [pc, #32]	; (24754 <net_shell_cmd_conn+0x68>)
   24734:	f7de fc0e 	bl	2f54 <printk>
   24738:	e7f4      	b.n	24724 <net_shell_cmd_conn+0x38>
   2473a:	bf00      	nop
   2473c:	000320dc 	.word	0x000320dc
   24740:	000248c9 	.word	0x000248c9
   24744:	0002f064 	.word	0x0002f064
   24748:	0003212c 	.word	0x0003212c
   2474c:	00024759 	.word	0x00024759
   24750:	0003211c 	.word	0x0003211c
   24754:	0003216c 	.word	0x0003216c

00024758 <tcp_cb>:
{
   24758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2475c:	b084      	sub	sp, #16
   2475e:	4604      	mov	r4, r0
   24760:	460f      	mov	r7, r1
	u16_t recv_mss = net_tcp_get_recv_mss(tcp);
   24762:	f7fe ffe4 	bl	2372e <net_tcp_get_recv_mss>
   24766:	4680      	mov	r8, r0
	       ntohs(net_sin6_ptr(&tcp->context->local)->sin6_port),
   24768:	6823      	ldr	r3, [r4, #0]
   2476a:	895a      	ldrh	r2, [r3, #10]
   2476c:	0215      	lsls	r5, r2, #8
   2476e:	ea45 2512 	orr.w	r5, r5, r2, lsr #8
   24772:	b2ad      	uxth	r5, r5
	       ntohs(net_sin6(&tcp->context->remote)->sin6_port),
   24774:	8adb      	ldrh	r3, [r3, #22]
   24776:	021e      	lsls	r6, r3, #8
   24778:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
   2477c:	b2b6      	uxth	r6, r6
	printk("%p    %5u     %5u %10u %10u %5u   %s\n",
   2477e:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
   24782:	f8d4 a09c 	ldr.w	sl, [r4, #156]	; 0x9c
   24786:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2478a:	f3c0 3043 	ubfx	r0, r0, #13, #4
   2478e:	f7ff f845 	bl	2381c <net_tcp_state_str>
   24792:	9003      	str	r0, [sp, #12]
   24794:	f8cd 8008 	str.w	r8, [sp, #8]
   24798:	f8cd a004 	str.w	sl, [sp, #4]
   2479c:	f8cd 9000 	str.w	r9, [sp]
   247a0:	4633      	mov	r3, r6
   247a2:	462a      	mov	r2, r5
   247a4:	4621      	mov	r1, r4
   247a6:	4804      	ldr	r0, [pc, #16]	; (247b8 <tcp_cb+0x60>)
   247a8:	f7de fbd4 	bl	2f54 <printk>
	(*count)++;
   247ac:	683b      	ldr	r3, [r7, #0]
   247ae:	3301      	adds	r3, #1
   247b0:	603b      	str	r3, [r7, #0]
}
   247b2:	b004      	add	sp, #16
   247b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   247b8:	000328ec 	.word	0x000328ec

000247bc <get_addresses>:
{
   247bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   247c0:	b083      	sub	sp, #12
   247c2:	460d      	mov	r5, r1
   247c4:	4616      	mov	r6, r2
   247c6:	461f      	mov	r7, r3
	if (context->local.family == AF_INET6) {
   247c8:	8903      	ldrh	r3, [r0, #8]
   247ca:	2b0a      	cmp	r3, #10
   247cc:	d008      	beq.n	247e0 <get_addresses+0x24>
	if (context->local.family == AF_UNSPEC) {
   247ce:	b393      	cbz	r3, 24836 <get_addresses+0x7a>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
   247d0:	4a1c      	ldr	r2, [pc, #112]	; (24844 <get_addresses+0x88>)
   247d2:	4631      	mov	r1, r6
   247d4:	4628      	mov	r0, r5
   247d6:	f7de fbcb 	bl	2f70 <snprintk>
}
   247da:	b003      	add	sp, #12
   247dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   247e0:	4604      	mov	r4, r0
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   247e2:	f8df 9068 	ldr.w	r9, [pc, #104]	; 2484c <get_addresses+0x90>
   247e6:	2328      	movs	r3, #40	; 0x28
   247e8:	464a      	mov	r2, r9
   247ea:	68c1      	ldr	r1, [r0, #12]
   247ec:	200a      	movs	r0, #10
   247ee:	f7f9 fc1d 	bl	1e02c <net_addr_ntop>
			 ntohs(net_sin6_ptr(&context->local)->sin6_port));
   247f2:	8962      	ldrh	r2, [r4, #10]
   247f4:	0213      	lsls	r3, r2, #8
   247f6:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   247fa:	b29b      	uxth	r3, r3
		snprintk(addr_local, local_len, "[%s]:%u",
   247fc:	f8df 8050 	ldr.w	r8, [pc, #80]	; 24850 <get_addresses+0x94>
   24800:	9300      	str	r3, [sp, #0]
   24802:	4603      	mov	r3, r0
   24804:	4642      	mov	r2, r8
   24806:	4631      	mov	r1, r6
   24808:	4628      	mov	r0, r5
   2480a:	f7de fbb1 	bl	2f70 <snprintk>
   2480e:	2328      	movs	r3, #40	; 0x28
   24810:	464a      	mov	r2, r9
   24812:	f104 0118 	add.w	r1, r4, #24
   24816:	200a      	movs	r0, #10
   24818:	f7f9 fc08 	bl	1e02c <net_addr_ntop>
			 ntohs(net_sin6(&context->remote)->sin6_port));
   2481c:	8ae2      	ldrh	r2, [r4, #22]
   2481e:	0213      	lsls	r3, r2, #8
   24820:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   24824:	b29b      	uxth	r3, r3
		snprintk(addr_remote, remote_len, "[%s]:%u",
   24826:	9300      	str	r3, [sp, #0]
   24828:	4603      	mov	r3, r0
   2482a:	4642      	mov	r2, r8
   2482c:	990a      	ldr	r1, [sp, #40]	; 0x28
   2482e:	4638      	mov	r0, r7
   24830:	f7de fb9e 	bl	2f70 <snprintk>
   24834:	e7d1      	b.n	247da <get_addresses+0x1e>
		snprintk(addr_local, local_len, "AF_UNSPEC");
   24836:	4a04      	ldr	r2, [pc, #16]	; (24848 <get_addresses+0x8c>)
   24838:	4631      	mov	r1, r6
   2483a:	4628      	mov	r0, r5
   2483c:	f7de fb98 	bl	2f70 <snprintk>
   24840:	e7cb      	b.n	247da <get_addresses+0x1e>
   24842:	bf00      	nop
   24844:	00031cb4 	.word	0x00031cb4
   24848:	00031ca8 	.word	0x00031ca8
   2484c:	20002a10 	.word	0x20002a10
   24850:	00031ca0 	.word	0x00031ca0

00024854 <print_connect_info>:
{
   24854:	b570      	push	{r4, r5, r6, lr}
	switch (family) {
   24856:	2802      	cmp	r0, #2
   24858:	d008      	beq.n	2486c <print_connect_info+0x18>
   2485a:	460d      	mov	r5, r1
   2485c:	4614      	mov	r4, r2
   2485e:	280a      	cmp	r0, #10
   24860:	d008      	beq.n	24874 <print_connect_info+0x20>
		printk("Unknown protocol family (%d)\n", family);
   24862:	4601      	mov	r1, r0
   24864:	4813      	ldr	r0, [pc, #76]	; (248b4 <print_connect_info+0x60>)
   24866:	f7de fb75 	bl	2f54 <printk>
   2486a:	bd70      	pop	{r4, r5, r6, pc}
		printk("IPv4 not supported\n");
   2486c:	4812      	ldr	r0, [pc, #72]	; (248b8 <print_connect_info+0x64>)
   2486e:	f7de fb71 	bl	2f54 <printk>
		break;
   24872:	bd70      	pop	{r4, r5, r6, pc}
   24874:	4e11      	ldr	r6, [pc, #68]	; (248bc <print_connect_info+0x68>)
   24876:	2328      	movs	r3, #40	; 0x28
   24878:	4632      	mov	r2, r6
   2487a:	3104      	adds	r1, #4
   2487c:	200a      	movs	r0, #10
   2487e:	f7f9 fbd5 	bl	1e02c <net_addr_ntop>
		       ntohs(net_sin6(myaddr)->sin6_port));
   24882:	886b      	ldrh	r3, [r5, #2]
   24884:	021a      	lsls	r2, r3, #8
   24886:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("Connecting from [%s]:%u ",
   2488a:	b292      	uxth	r2, r2
   2488c:	4601      	mov	r1, r0
   2488e:	480c      	ldr	r0, [pc, #48]	; (248c0 <print_connect_info+0x6c>)
   24890:	f7de fb60 	bl	2f54 <printk>
   24894:	2328      	movs	r3, #40	; 0x28
   24896:	4632      	mov	r2, r6
   24898:	1d21      	adds	r1, r4, #4
   2489a:	200a      	movs	r0, #10
   2489c:	f7f9 fbc6 	bl	1e02c <net_addr_ntop>
		       ntohs(net_sin6(addr)->sin6_port));
   248a0:	8863      	ldrh	r3, [r4, #2]
   248a2:	021a      	lsls	r2, r3, #8
   248a4:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("to [%s]:%u\n",
   248a8:	b292      	uxth	r2, r2
   248aa:	4601      	mov	r1, r0
   248ac:	4805      	ldr	r0, [pc, #20]	; (248c4 <print_connect_info+0x70>)
   248ae:	f7de fb51 	bl	2f54 <printk>
		break;
   248b2:	bd70      	pop	{r4, r5, r6, pc}
   248b4:	00032884 	.word	0x00032884
   248b8:	00032848 	.word	0x00032848
   248bc:	20002a10 	.word	0x20002a10
   248c0:	0003285c 	.word	0x0003285c
   248c4:	00032878 	.word	0x00032878

000248c8 <context_cb>:
{
   248c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   248ca:	b09f      	sub	sp, #124	; 0x7c
   248cc:	4604      	mov	r4, r0
   248ce:	460d      	mov	r5, r1
	char addr_remote[ADDR_LEN + 7] = "";
   248d0:	2100      	movs	r1, #0
   248d2:	9106      	str	r1, [sp, #24]
   248d4:	222b      	movs	r2, #43	; 0x2b
   248d6:	a807      	add	r0, sp, #28
   248d8:	f005 ffee 	bl	2a8b8 <memset>
	get_addresses(context, addr_local, sizeof(addr_local),
   248dc:	222f      	movs	r2, #47	; 0x2f
   248de:	9200      	str	r2, [sp, #0]
   248e0:	ab06      	add	r3, sp, #24
   248e2:	a912      	add	r1, sp, #72	; 0x48
   248e4:	4620      	mov	r0, r4
   248e6:	f7ff ff69 	bl	247bc <get_addresses>
	       (*count) + 1, context,
   248ea:	682e      	ldr	r6, [r5, #0]
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   248ec:	3601      	adds	r6, #1
	return net_if_get_by_index(context->iface);
   248ee:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   248f2:	f7f7 fd0b 	bl	1c30c <net_if_get_by_index>
   248f6:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   248f8:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   248fc:	f012 0f10 	tst.w	r2, #16
   24900:	d022      	beq.n	24948 <context_cb+0x80>
		return AF_INET6;
   24902:	210a      	movs	r1, #10
   24904:	290a      	cmp	r1, #10
   24906:	d021      	beq.n	2494c <context_cb+0x84>
   24908:	2134      	movs	r1, #52	; 0x34
	if (context->flags & NET_CONTEXT_TYPE) {
   2490a:	f012 0f20 	tst.w	r2, #32
   2490e:	d01f      	beq.n	24950 <context_cb+0x88>
		return SOCK_STREAM;
   24910:	2001      	movs	r0, #1
   24912:	2802      	cmp	r0, #2
   24914:	d01e      	beq.n	24954 <context_cb+0x8c>
   24916:	2053      	movs	r0, #83	; 0x53
	if (context->flags & NET_CONTEXT_PROTO) {
   24918:	f012 0f40 	tst.w	r2, #64	; 0x40
   2491c:	d01c      	beq.n	24958 <context_cb+0x90>
		return IPPROTO_TCP;
   2491e:	2206      	movs	r2, #6
   24920:	2a11      	cmp	r2, #17
   24922:	d01b      	beq.n	2495c <context_cb+0x94>
   24924:	2754      	movs	r7, #84	; 0x54
   24926:	aa06      	add	r2, sp, #24
   24928:	9204      	str	r2, [sp, #16]
   2492a:	aa12      	add	r2, sp, #72	; 0x48
   2492c:	9203      	str	r2, [sp, #12]
   2492e:	9702      	str	r7, [sp, #8]
   24930:	9001      	str	r0, [sp, #4]
   24932:	9100      	str	r1, [sp, #0]
   24934:	4622      	mov	r2, r4
   24936:	4631      	mov	r1, r6
   24938:	4809      	ldr	r0, [pc, #36]	; (24960 <context_cb+0x98>)
   2493a:	f7de fb0b 	bl	2f54 <printk>
	(*count)++;
   2493e:	682b      	ldr	r3, [r5, #0]
   24940:	3301      	adds	r3, #1
   24942:	602b      	str	r3, [r5, #0]
}
   24944:	b01f      	add	sp, #124	; 0x7c
   24946:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   24948:	2102      	movs	r1, #2
   2494a:	e7db      	b.n	24904 <context_cb+0x3c>
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   2494c:	2136      	movs	r1, #54	; 0x36
   2494e:	e7dc      	b.n	2490a <context_cb+0x42>
	return SOCK_DGRAM;
   24950:	2002      	movs	r0, #2
   24952:	e7de      	b.n	24912 <context_cb+0x4a>
   24954:	2044      	movs	r0, #68	; 0x44
   24956:	e7df      	b.n	24918 <context_cb+0x50>
	return IPPROTO_UDP;
   24958:	2211      	movs	r2, #17
   2495a:	e7e1      	b.n	24920 <context_cb+0x58>
   2495c:	2755      	movs	r7, #85	; 0x55
   2495e:	e7e2      	b.n	24926 <context_cb+0x5e>
   24960:	00031c60 	.word	0x00031c60

00024964 <net_shell_cmd_iface>:
{
   24964:	b508      	push	{r3, lr}
	net_if_foreach(iface_cb, NULL);
   24966:	2100      	movs	r1, #0
   24968:	4802      	ldr	r0, [pc, #8]	; (24974 <net_shell_cmd_iface+0x10>)
   2496a:	f7f7 fceb 	bl	1c344 <net_if_foreach>
}
   2496e:	2000      	movs	r0, #0
   24970:	bd08      	pop	{r3, pc}
   24972:	bf00      	nop
   24974:	0001f515 	.word	0x0001f515

00024978 <net_shell_cmd_route>:
{
   24978:	b508      	push	{r3, lr}
	net_if_foreach(iface_per_route_cb, NULL);
   2497a:	2100      	movs	r1, #0
   2497c:	4802      	ldr	r0, [pc, #8]	; (24988 <net_shell_cmd_route+0x10>)
   2497e:	f7f7 fce1 	bl	1c344 <net_if_foreach>
}
   24982:	2000      	movs	r0, #0
   24984:	bd08      	pop	{r3, pc}
   24986:	bf00      	nop
   24988:	00024db5 	.word	0x00024db5

0002498c <net_shell_cmd_mem>:
{
   2498c:	b500      	push	{lr}
   2498e:	b093      	sub	sp, #76	; 0x4c
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
   24990:	ab0e      	add	r3, sp, #56	; 0x38
   24992:	aa0f      	add	r2, sp, #60	; 0x3c
   24994:	a910      	add	r1, sp, #64	; 0x40
   24996:	a811      	add	r0, sp, #68	; 0x44
   24998:	f7f9 f9aa 	bl	1dcf0 <net_pkt_get_info>
	printk("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
   2499c:	f44f 7100 	mov.w	r1, #512	; 0x200
   249a0:	4819      	ldr	r0, [pc, #100]	; (24a08 <net_shell_cmd_mem+0x7c>)
   249a2:	f7de fad7 	bl	2f54 <printk>
	printk("Network buffer pools:\n");
   249a6:	4819      	ldr	r0, [pc, #100]	; (24a0c <net_shell_cmd_mem+0x80>)
   249a8:	f7de fad4 	bl	2f54 <printk>
	printk("(CONFIG_NET_BUF_POOL_USAGE to see free #s)\n");
   249ac:	4818      	ldr	r0, [pc, #96]	; (24a10 <net_shell_cmd_mem+0x84>)
   249ae:	f7de fad1 	bl	2f54 <printk>
	printk("Address\t\tTotal\tName\n");
   249b2:	4818      	ldr	r0, [pc, #96]	; (24a14 <net_shell_cmd_mem+0x88>)
   249b4:	f7de face 	bl	2f54 <printk>
	printk("%p\t%d\tRX\n", rx, rx->num_blocks);
   249b8:	9911      	ldr	r1, [sp, #68]	; 0x44
   249ba:	688a      	ldr	r2, [r1, #8]
   249bc:	4816      	ldr	r0, [pc, #88]	; (24a18 <net_shell_cmd_mem+0x8c>)
   249be:	f7de fac9 	bl	2f54 <printk>
	printk("%p\t%d\tTX\n", tx, tx->num_blocks);
   249c2:	9910      	ldr	r1, [sp, #64]	; 0x40
   249c4:	688a      	ldr	r2, [r1, #8]
   249c6:	4815      	ldr	r0, [pc, #84]	; (24a1c <net_shell_cmd_mem+0x90>)
   249c8:	f7de fac4 	bl	2f54 <printk>
	printk("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
   249cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   249ce:	8a0a      	ldrh	r2, [r1, #16]
   249d0:	4813      	ldr	r0, [pc, #76]	; (24a20 <net_shell_cmd_mem+0x94>)
   249d2:	f7de fabf 	bl	2f54 <printk>
	printk("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   249d6:	990e      	ldr	r1, [sp, #56]	; 0x38
   249d8:	8a0a      	ldrh	r2, [r1, #16]
   249da:	4812      	ldr	r0, [pc, #72]	; (24a24 <net_shell_cmd_mem+0x98>)
   249dc:	f7de faba 	bl	2f54 <printk>
		memset(&info, 0, sizeof(info));
   249e0:	2238      	movs	r2, #56	; 0x38
   249e2:	2100      	movs	r1, #0
   249e4:	4668      	mov	r0, sp
   249e6:	f005 ff67 	bl	2a8b8 <memset>
		net_context_foreach(context_info, &info);
   249ea:	4669      	mov	r1, sp
   249ec:	480e      	ldr	r0, [pc, #56]	; (24a28 <net_shell_cmd_mem+0x9c>)
   249ee:	f7f8 fd8d 	bl	1d50c <net_context_foreach>
		if (!info.are_external_pools) {
   249f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   249f6:	b11b      	cbz	r3, 24a00 <net_shell_cmd_mem+0x74>
}
   249f8:	2000      	movs	r0, #0
   249fa:	b013      	add	sp, #76	; 0x4c
   249fc:	f85d fb04 	ldr.w	pc, [sp], #4
			printk("No external memory pools found.\n");
   24a00:	480a      	ldr	r0, [pc, #40]	; (24a2c <net_shell_cmd_mem+0xa0>)
   24a02:	f7de faa7 	bl	2f54 <printk>
   24a06:	e7f7      	b.n	249f8 <net_shell_cmd_mem+0x6c>
   24a08:	00032204 	.word	0x00032204
   24a0c:	00032220 	.word	0x00032220
   24a10:	00032238 	.word	0x00032238
   24a14:	00032264 	.word	0x00032264
   24a18:	0003227c 	.word	0x0003227c
   24a1c:	00032288 	.word	0x00032288
   24a20:	00032294 	.word	0x00032294
   24a24:	000322a4 	.word	0x000322a4
   24a28:	000243f9 	.word	0x000243f9
   24a2c:	000322b4 	.word	0x000322b4

00024a30 <net_shell_cmd_nbr>:
{
   24a30:	b510      	push	{r4, lr}
   24a32:	b086      	sub	sp, #24
	int count = 0;
   24a34:	2300      	movs	r3, #0
   24a36:	9305      	str	r3, [sp, #20]
	if (argv[arg]) {
   24a38:	6848      	ldr	r0, [r1, #4]
   24a3a:	b1d8      	cbz	r0, 24a74 <net_shell_cmd_nbr+0x44>
   24a3c:	460c      	mov	r4, r1
		if (strcmp(argv[arg], "rm")) {
   24a3e:	4920      	ldr	r1, [pc, #128]	; (24ac0 <net_shell_cmd_nbr+0x90>)
   24a40:	f7db fce2 	bl	408 <strcmp>
   24a44:	b9f8      	cbnz	r0, 24a86 <net_shell_cmd_nbr+0x56>
		if (!argv[++arg]) {
   24a46:	68a1      	ldr	r1, [r4, #8]
   24a48:	b311      	cbz	r1, 24a90 <net_shell_cmd_nbr+0x60>
		ret = net_addr_pton(AF_INET6, argv[arg], &addr);
   24a4a:	aa01      	add	r2, sp, #4
   24a4c:	200a      	movs	r0, #10
   24a4e:	f7f9 fbc4 	bl	1e1da <net_addr_pton>
		if (ret < 0) {
   24a52:	2800      	cmp	r0, #0
   24a54:	db20      	blt.n	24a98 <net_shell_cmd_nbr+0x68>
		if (!net_ipv6_nbr_rm(NULL, &addr)) {
   24a56:	a901      	add	r1, sp, #4
   24a58:	2000      	movs	r0, #0
   24a5a:	f7fb f83f 	bl	1fadc <net_ipv6_nbr_rm>
   24a5e:	bb00      	cbnz	r0, 24aa2 <net_shell_cmd_nbr+0x72>
   24a60:	2328      	movs	r3, #40	; 0x28
   24a62:	4a18      	ldr	r2, [pc, #96]	; (24ac4 <net_shell_cmd_nbr+0x94>)
   24a64:	a901      	add	r1, sp, #4
   24a66:	200a      	movs	r0, #10
   24a68:	f7f9 fae0 	bl	1e02c <net_addr_ntop>
			printk("Cannot remove neighbor %s\n",
   24a6c:	4601      	mov	r1, r0
   24a6e:	4816      	ldr	r0, [pc, #88]	; (24ac8 <net_shell_cmd_nbr+0x98>)
   24a70:	f7de fa70 	bl	2f54 <printk>
	net_ipv6_nbr_foreach(nbr_cb, &count);
   24a74:	a905      	add	r1, sp, #20
   24a76:	4815      	ldr	r0, [pc, #84]	; (24acc <net_shell_cmd_nbr+0x9c>)
   24a78:	f7fb f822 	bl	1fac0 <net_ipv6_nbr_foreach>
	if (count == 0) {
   24a7c:	9b05      	ldr	r3, [sp, #20]
   24a7e:	b1db      	cbz	r3, 24ab8 <net_shell_cmd_nbr+0x88>
}
   24a80:	2000      	movs	r0, #0
   24a82:	b006      	add	sp, #24
   24a84:	bd10      	pop	{r4, pc}
			printk("Unknown command '%s'\n", argv[arg]);
   24a86:	6861      	ldr	r1, [r4, #4]
   24a88:	4811      	ldr	r0, [pc, #68]	; (24ad0 <net_shell_cmd_nbr+0xa0>)
   24a8a:	f7de fa63 	bl	2f54 <printk>
			return 0;
   24a8e:	e7f7      	b.n	24a80 <net_shell_cmd_nbr+0x50>
			printk("Neighbor IPv6 address missing.\n");
   24a90:	4810      	ldr	r0, [pc, #64]	; (24ad4 <net_shell_cmd_nbr+0xa4>)
   24a92:	f7de fa5f 	bl	2f54 <printk>
			return 0;
   24a96:	e7f3      	b.n	24a80 <net_shell_cmd_nbr+0x50>
			printk("Cannot parse '%s'\n", argv[arg]);
   24a98:	68a1      	ldr	r1, [r4, #8]
   24a9a:	480f      	ldr	r0, [pc, #60]	; (24ad8 <net_shell_cmd_nbr+0xa8>)
   24a9c:	f7de fa5a 	bl	2f54 <printk>
			return 0;
   24aa0:	e7ee      	b.n	24a80 <net_shell_cmd_nbr+0x50>
   24aa2:	2328      	movs	r3, #40	; 0x28
   24aa4:	4a07      	ldr	r2, [pc, #28]	; (24ac4 <net_shell_cmd_nbr+0x94>)
   24aa6:	a901      	add	r1, sp, #4
   24aa8:	200a      	movs	r0, #10
   24aaa:	f7f9 fabf 	bl	1e02c <net_addr_ntop>
			printk("Neighbor %s removed.\n",
   24aae:	4601      	mov	r1, r0
   24ab0:	480a      	ldr	r0, [pc, #40]	; (24adc <net_shell_cmd_nbr+0xac>)
   24ab2:	f7de fa4f 	bl	2f54 <printk>
   24ab6:	e7dd      	b.n	24a74 <net_shell_cmd_nbr+0x44>
		printk("No neighbors.\n");
   24ab8:	4809      	ldr	r0, [pc, #36]	; (24ae0 <net_shell_cmd_nbr+0xb0>)
   24aba:	f7de fa4b 	bl	2f54 <printk>
   24abe:	e7df      	b.n	24a80 <net_shell_cmd_nbr+0x50>
   24ac0:	000322d8 	.word	0x000322d8
   24ac4:	20002a10 	.word	0x20002a10
   24ac8:	00032328 	.word	0x00032328
   24acc:	00024b89 	.word	0x00024b89
   24ad0:	000322dc 	.word	0x000322dc
   24ad4:	000322f4 	.word	0x000322f4
   24ad8:	00032314 	.word	0x00032314
   24adc:	00032344 	.word	0x00032344
   24ae0:	0003235c 	.word	0x0003235c

00024ae4 <route_cb>:
{
   24ae4:	b538      	push	{r3, r4, r5, lr}
	if (entry->iface != iface) {
   24ae6:	68c3      	ldr	r3, [r0, #12]
   24ae8:	428b      	cmp	r3, r1
   24aea:	d000      	beq.n	24aee <route_cb+0xa>
   24aec:	bd38      	pop	{r3, r4, r5, pc}
   24aee:	4604      	mov	r4, r0
   24af0:	2328      	movs	r3, #40	; 0x28
   24af2:	4a1e      	ldr	r2, [pc, #120]	; (24b6c <route_cb+0x88>)
   24af4:	f100 0110 	add.w	r1, r0, #16
   24af8:	200a      	movs	r0, #10
   24afa:	f7f9 fa97 	bl	1e02c <net_addr_ntop>
	printk("IPv6 prefix : %s/%d\n",
   24afe:	f894 2020 	ldrb.w	r2, [r4, #32]
   24b02:	4601      	mov	r1, r0
   24b04:	481a      	ldr	r0, [pc, #104]	; (24b70 <route_cb+0x8c>)
   24b06:	f7de fa25 	bl	2f54 <printk>
	return list->head;
   24b0a:	6864      	ldr	r4, [r4, #4]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24b0c:	2500      	movs	r5, #0
   24b0e:	e009      	b.n	24b24 <route_cb+0x40>
			printk("addr : <unknown>\n");
   24b10:	4818      	ldr	r0, [pc, #96]	; (24b74 <route_cb+0x90>)
   24b12:	f7de fa1f 	bl	2f54 <printk>
		count++;
   24b16:	3501      	adds	r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   24b18:	4622      	mov	r2, r4
   24b1a:	b1dc      	cbz	r4, 24b54 <route_cb+0x70>
	return node->next;
   24b1c:	6823      	ldr	r3, [r4, #0]
   24b1e:	b1db      	cbz	r3, 24b58 <route_cb+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24b20:	b1e2      	cbz	r2, 24b5c <route_cb+0x78>
	return node->next;
   24b22:	6824      	ldr	r4, [r4, #0]
   24b24:	b1e4      	cbz	r4, 24b60 <route_cb+0x7c>
		if (!nexthop_route->nbr) {
   24b26:	6861      	ldr	r1, [r4, #4]
   24b28:	2900      	cmp	r1, #0
   24b2a:	d0f5      	beq.n	24b18 <route_cb+0x34>
		printk("\tneighbor : %p\t", nexthop_route->nbr);
   24b2c:	4812      	ldr	r0, [pc, #72]	; (24b78 <route_cb+0x94>)
   24b2e:	f7de fa11 	bl	2f54 <printk>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   24b32:	6863      	ldr	r3, [r4, #4]
   24b34:	7858      	ldrb	r0, [r3, #1]
   24b36:	28ff      	cmp	r0, #255	; 0xff
   24b38:	d0ea      	beq.n	24b10 <route_cb+0x2c>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
   24b3a:	f7fa fcc1 	bl	1f4c0 <net_nbr_get_lladdr>
	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   24b3e:	2318      	movs	r3, #24
   24b40:	4a0e      	ldr	r2, [pc, #56]	; (24b7c <route_cb+0x98>)
   24b42:	7841      	ldrb	r1, [r0, #1]
   24b44:	3002      	adds	r0, #2
   24b46:	f7f9 fa47 	bl	1dfd8 <net_sprint_ll_addr_buf>
			printk("addr : %s\n",
   24b4a:	4601      	mov	r1, r0
   24b4c:	480c      	ldr	r0, [pc, #48]	; (24b80 <route_cb+0x9c>)
   24b4e:	f7de fa01 	bl	2f54 <printk>
   24b52:	e7e0      	b.n	24b16 <route_cb+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24b54:	4623      	mov	r3, r4
   24b56:	e7e2      	b.n	24b1e <route_cb+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   24b58:	2400      	movs	r4, #0
   24b5a:	e7e3      	b.n	24b24 <route_cb+0x40>
   24b5c:	2400      	movs	r4, #0
   24b5e:	e7e1      	b.n	24b24 <route_cb+0x40>
	if (count == 0) {
   24b60:	2d00      	cmp	r5, #0
   24b62:	d1c3      	bne.n	24aec <route_cb+0x8>
		printk("\t<none>\n");
   24b64:	4807      	ldr	r0, [pc, #28]	; (24b84 <route_cb+0xa0>)
   24b66:	f7de f9f5 	bl	2f54 <printk>
   24b6a:	e7bf      	b.n	24aec <route_cb+0x8>
   24b6c:	20002a10 	.word	0x20002a10
   24b70:	000328a4 	.word	0x000328a4
   24b74:	000328cc 	.word	0x000328cc
   24b78:	000328bc 	.word	0x000328bc
   24b7c:	200029f8 	.word	0x200029f8
   24b80:	000328e0 	.word	0x000328e0
   24b84:	00031de0 	.word	0x00031de0

00024b88 <nbr_cb>:
{
   24b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b8c:	b08f      	sub	sp, #60	; 0x3c
   24b8e:	4604      	mov	r4, r0
   24b90:	460d      	mov	r5, r1
	if (*count == 0) {
   24b92:	680b      	ldr	r3, [r1, #0]
   24b94:	2b00      	cmp	r3, #0
   24b96:	d052      	beq.n	24c3e <nbr_cb+0xb6>
	(*count)++;
   24b98:	682b      	ldr	r3, [r5, #0]
   24b9a:	3301      	adds	r3, #1
   24b9c:	602b      	str	r3, [r5, #0]
   24b9e:	68e3      	ldr	r3, [r4, #12]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
   24ba0:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   24ba4:	f7fa ff68 	bl	1fa78 <net_ipv6_nbr_state2str>
   24ba8:	900b      	str	r0, [sp, #44]	; 0x2c
	if (strlen(state_str) == 5) {
   24baa:	f7db fda9 	bl	700 <strlen>
   24bae:	2805      	cmp	r0, #5
   24bb0:	d04a      	beq.n	24c48 <nbr_cb+0xc0>
	char *state_pad = "";
   24bb2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 24c5c <nbr_cb+0xd4>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24bb6:	682b      	ldr	r3, [r5, #0]
   24bb8:	930c      	str	r3, [sp, #48]	; 0x30
   24bba:	68a3      	ldr	r3, [r4, #8]
   24bbc:	930d      	str	r3, [sp, #52]	; 0x34
   24bbe:	68e0      	ldr	r0, [r4, #12]
	       net_ipv6_nbr_data(nbr)->link_metric,
   24bc0:	f8b0 5066 	ldrh.w	r5, [r0, #102]	; 0x66
	       nbr->ref,
   24bc4:	7826      	ldrb	r6, [r4, #0]
	       net_ipv6_nbr_data(nbr)->ns_count,
   24bc6:	f890 7068 	ldrb.w	r7, [r0, #104]	; 0x68
	       net_ipv6_nbr_data(nbr)->is_router,
   24bca:	f890 8069 	ldrb.w	r8, [r0, #105]	; 0x69
	return _timeout_remaining_get(&work->timeout);
   24bce:	3020      	adds	r0, #32
   24bd0:	f005 f90a 	bl	29de8 <_timeout_remaining_get>
   24bd4:	4682      	mov	sl, r0
	       nbr->idx == NET_NBR_LLADDR_UNKNOWN ? "?" :
   24bd6:	7860      	ldrb	r0, [r4, #1]
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24bd8:	28ff      	cmp	r0, #255	; 0xff
   24bda:	d038      	beq.n	24c4e <nbr_cb+0xc6>
		       net_nbr_get_lladdr(nbr->idx)->addr,
   24bdc:	f7fa fc70 	bl	1f4c0 <net_nbr_get_lladdr>
   24be0:	f100 0b02 	add.w	fp, r0, #2
		       net_nbr_get_lladdr(nbr->idx)->len),
   24be4:	7860      	ldrb	r0, [r4, #1]
   24be6:	f7fa fc6b 	bl	1f4c0 <net_nbr_get_lladdr>
   24bea:	2318      	movs	r3, #24
   24bec:	4a19      	ldr	r2, [pc, #100]	; (24c54 <nbr_cb+0xcc>)
   24bee:	7841      	ldrb	r1, [r0, #1]
   24bf0:	4658      	mov	r0, fp
   24bf2:	f7f9 f9f1 	bl	1dfd8 <net_sprint_ll_addr_buf>
   24bf6:	4683      	mov	fp, r0
	       net_nbr_get_lladdr(nbr->idx)->len == 8 ? "" : padding,
   24bf8:	7860      	ldrb	r0, [r4, #1]
   24bfa:	f7fa fc61 	bl	1f4c0 <net_nbr_get_lladdr>
   24bfe:	68e1      	ldr	r1, [r4, #12]
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   24c00:	2328      	movs	r3, #40	; 0x28
   24c02:	4a15      	ldr	r2, [pc, #84]	; (24c58 <nbr_cb+0xd0>)
   24c04:	3104      	adds	r1, #4
   24c06:	200a      	movs	r0, #10
   24c08:	f7f9 fa10 	bl	1e02c <net_addr_ntop>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24c0c:	9009      	str	r0, [sp, #36]	; 0x24
   24c0e:	4b13      	ldr	r3, [pc, #76]	; (24c5c <nbr_cb+0xd4>)
   24c10:	9308      	str	r3, [sp, #32]
   24c12:	f8cd b01c 	str.w	fp, [sp, #28]
   24c16:	f8cd a018 	str.w	sl, [sp, #24]
   24c1a:	f8cd 9014 	str.w	r9, [sp, #20]
   24c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24c20:	9304      	str	r3, [sp, #16]
   24c22:	f8cd 800c 	str.w	r8, [sp, #12]
   24c26:	9702      	str	r7, [sp, #8]
   24c28:	9601      	str	r6, [sp, #4]
   24c2a:	9500      	str	r5, [sp, #0]
   24c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24c2e:	4622      	mov	r2, r4
   24c30:	990c      	ldr	r1, [sp, #48]	; 0x30
   24c32:	480b      	ldr	r0, [pc, #44]	; (24c60 <nbr_cb+0xd8>)
   24c34:	f7de f98e 	bl	2f54 <printk>
}
   24c38:	b00f      	add	sp, #60	; 0x3c
   24c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printk("     Neighbor   Interface        Flags State     "
   24c3e:	4907      	ldr	r1, [pc, #28]	; (24c5c <nbr_cb+0xd4>)
   24c40:	4808      	ldr	r0, [pc, #32]	; (24c64 <nbr_cb+0xdc>)
   24c42:	f7de f987 	bl	2f54 <printk>
   24c46:	e7a7      	b.n	24b98 <nbr_cb+0x10>
		state_pad = "    ";
   24c48:	f8df 901c 	ldr.w	r9, [pc, #28]	; 24c68 <nbr_cb+0xe0>
   24c4c:	e7b3      	b.n	24bb6 <nbr_cb+0x2e>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24c4e:	f8df b01c 	ldr.w	fp, [pc, #28]	; 24c6c <nbr_cb+0xe4>
   24c52:	e7d1      	b.n	24bf8 <nbr_cb+0x70>
   24c54:	200029f8 	.word	0x200029f8
   24c58:	20002a10 	.word	0x20002a10
   24c5c:	0002f064 	.word	0x0002f064
   24c60:	00031f94 	.word	0x00031f94
   24c64:	00031f3c 	.word	0x00031f3c
   24c68:	00031f30 	.word	0x00031f30
   24c6c:	00031f38 	.word	0x00031f38

00024c70 <_ping_ipv6>:
{
   24c70:	b570      	push	{r4, r5, r6, lr}
   24c72:	b084      	sub	sp, #16
   24c74:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
   24c76:	f7f6 fbb1 	bl	1b3dc <net_if_get_default>
   24c7a:	4604      	mov	r4, r0
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   24c7c:	466a      	mov	r2, sp
   24c7e:	4629      	mov	r1, r5
   24c80:	200a      	movs	r0, #10
   24c82:	f7f9 faaa 	bl	1e1da <net_addr_pton>
   24c86:	2800      	cmp	r0, #0
   24c88:	db26      	blt.n	24cd8 <_ping_ipv6+0x68>
	net_icmpv6_register_handler(&ping6_handler);
   24c8a:	4815      	ldr	r0, [pc, #84]	; (24ce0 <_ping_ipv6+0x70>)
   24c8c:	f7f9 fe0c 	bl	1e8a8 <net_icmpv6_register_handler>
	nbr = net_ipv6_nbr_lookup(NULL, &ipv6_target);
   24c90:	4669      	mov	r1, sp
   24c92:	2000      	movs	r0, #0
   24c94:	f7fb fa4c 	bl	20130 <net_ipv6_nbr_lookup>
	if (nbr) {
   24c98:	b100      	cbz	r0, 24c9c <_ping_ipv6+0x2c>
		iface = nbr->iface;
   24c9a:	6884      	ldr	r4, [r0, #8]
	route = net_route_lookup(NULL, &ipv6_target);
   24c9c:	4669      	mov	r1, sp
   24c9e:	2000      	movs	r0, #0
   24ca0:	f7fd ffc4 	bl	22c2c <net_route_lookup>
	if (route) {
   24ca4:	b100      	cbz	r0, 24ca8 <_ping_ipv6+0x38>
		iface = route->iface;
   24ca6:	68c4      	ldr	r4, [r0, #12]
					   sys_rand32_get(),
   24ca8:	f7dd f9ba 	bl	2020 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   24cac:	b286      	uxth	r6, r0
					   sys_rand32_get());
   24cae:	f7dd f9b7 	bl	2020 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   24cb2:	b283      	uxth	r3, r0
   24cb4:	4632      	mov	r2, r6
   24cb6:	4669      	mov	r1, sp
   24cb8:	4620      	mov	r0, r4
   24cba:	f7fa fa8f 	bl	1f1dc <net_icmpv6_send_echo_request>
	if (ret) {
   24cbe:	4604      	mov	r4, r0
   24cc0:	b930      	cbnz	r0, 24cd0 <_ping_ipv6+0x60>
		printk("Sent a ping to %s\n", host);
   24cc2:	4629      	mov	r1, r5
   24cc4:	4807      	ldr	r0, [pc, #28]	; (24ce4 <_ping_ipv6+0x74>)
   24cc6:	f7de f945 	bl	2f54 <printk>
}
   24cca:	4620      	mov	r0, r4
   24ccc:	b004      	add	sp, #16
   24cce:	bd70      	pop	{r4, r5, r6, pc}
	net_icmpv6_unregister_handler(&ping6_handler);
   24cd0:	4803      	ldr	r0, [pc, #12]	; (24ce0 <_ping_ipv6+0x70>)
   24cd2:	f7f9 fdf5 	bl	1e8c0 <net_icmpv6_unregister_handler>
   24cd6:	e7f8      	b.n	24cca <_ping_ipv6+0x5a>
		return -EINVAL;
   24cd8:	f06f 0415 	mvn.w	r4, #21
   24cdc:	e7f5      	b.n	24cca <_ping_ipv6+0x5a>
   24cde:	bf00      	nop
   24ce0:	2000caec 	.word	0x2000caec
   24ce4:	00031c4c 	.word	0x00031c4c

00024ce8 <net_shell_cmd_ping>:
{
   24ce8:	b510      	push	{r4, lr}
   24cea:	460c      	mov	r4, r1
	if (!strcmp(argv[0], "ping")) {
   24cec:	4912      	ldr	r1, [pc, #72]	; (24d38 <net_shell_cmd_ping+0x50>)
   24cee:	6820      	ldr	r0, [r4, #0]
   24cf0:	f7db fb8a 	bl	408 <strcmp>
   24cf4:	b958      	cbnz	r0, 24d0e <net_shell_cmd_ping+0x26>
		host = argv[1];
   24cf6:	6860      	ldr	r0, [r4, #4]
	ret = _ping_ipv6(host);
   24cf8:	f7ff ffba 	bl	24c70 <_ping_ipv6>
	if (!ret) {
   24cfc:	b168      	cbz	r0, 24d1a <net_shell_cmd_ping+0x32>
	} else if (ret == -EIO) {
   24cfe:	f110 0f05 	cmn.w	r0, #5
   24d02:	d006      	beq.n	24d12 <net_shell_cmd_ping+0x2a>
			printk("Invalid IP address\n");
   24d04:	480d      	ldr	r0, [pc, #52]	; (24d3c <net_shell_cmd_ping+0x54>)
   24d06:	f7de f925 	bl	2f54 <printk>
}
   24d0a:	2000      	movs	r0, #0
   24d0c:	bd10      	pop	{r4, pc}
		host = argv[2];
   24d0e:	68a0      	ldr	r0, [r4, #8]
   24d10:	e7f2      	b.n	24cf8 <net_shell_cmd_ping+0x10>
		printk("Cannot send IPv6 ping\n");
   24d12:	480b      	ldr	r0, [pc, #44]	; (24d40 <net_shell_cmd_ping+0x58>)
   24d14:	f7de f91e 	bl	2f54 <printk>
		return 0;
   24d18:	e7f7      	b.n	24d0a <net_shell_cmd_ping+0x22>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   24d1a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   24d1e:	4809      	ldr	r0, [pc, #36]	; (24d44 <net_shell_cmd_ping+0x5c>)
   24d20:	f004 fb2a 	bl	29378 <_impl_k_sem_take>
	if (ret == -EAGAIN) {
   24d24:	f110 0f0b 	cmn.w	r0, #11
   24d28:	d1ef      	bne.n	24d0a <net_shell_cmd_ping+0x22>
		printk("Ping timeout\n");
   24d2a:	4807      	ldr	r0, [pc, #28]	; (24d48 <net_shell_cmd_ping+0x60>)
   24d2c:	f7de f912 	bl	2f54 <printk>
	net_icmpv6_unregister_handler(&ping6_handler);
   24d30:	4806      	ldr	r0, [pc, #24]	; (24d4c <net_shell_cmd_ping+0x64>)
   24d32:	f7f9 fdc5 	bl	1e8c0 <net_icmpv6_unregister_handler>
   24d36:	e7e8      	b.n	24d0a <net_shell_cmd_ping+0x22>
   24d38:	0003236c 	.word	0x0003236c
   24d3c:	0003238c 	.word	0x0003238c
   24d40:	00032374 	.word	0x00032374
   24d44:	2000d638 	.word	0x2000d638
   24d48:	000323a0 	.word	0x000323a0
   24d4c:	2000caec 	.word	0x2000caec

00024d50 <_handle_ipv6_echo_reply>:
{
   24d50:	b530      	push	{r4, r5, lr}
   24d52:	b08b      	sub	sp, #44	; 0x2c
   24d54:	4605      	mov	r5, r0
	return pkt->frags->data;
   24d56:	6883      	ldr	r3, [r0, #8]
   24d58:	6899      	ldr	r1, [r3, #8]
   24d5a:	4c11      	ldr	r4, [pc, #68]	; (24da0 <_handle_ipv6_echo_reply+0x50>)
   24d5c:	2328      	movs	r3, #40	; 0x28
   24d5e:	4622      	mov	r2, r4
   24d60:	3118      	adds	r1, #24
   24d62:	200a      	movs	r0, #10
   24d64:	f7f9 f962 	bl	1e02c <net_addr_ntop>
	snprintk(addr, sizeof(addr), "%s",
   24d68:	4603      	mov	r3, r0
   24d6a:	4a0e      	ldr	r2, [pc, #56]	; (24da4 <_handle_ipv6_echo_reply+0x54>)
   24d6c:	2128      	movs	r1, #40	; 0x28
   24d6e:	4668      	mov	r0, sp
   24d70:	f7de f8fe 	bl	2f70 <snprintk>
   24d74:	68ab      	ldr	r3, [r5, #8]
   24d76:	6899      	ldr	r1, [r3, #8]
   24d78:	2328      	movs	r3, #40	; 0x28
   24d7a:	4622      	mov	r2, r4
   24d7c:	3108      	adds	r1, #8
   24d7e:	200a      	movs	r0, #10
   24d80:	f7f9 f954 	bl	1e02c <net_addr_ntop>
	printk("Received echo reply from %s to %s\n",
   24d84:	466a      	mov	r2, sp
   24d86:	4601      	mov	r1, r0
   24d88:	4807      	ldr	r0, [pc, #28]	; (24da8 <_handle_ipv6_echo_reply+0x58>)
   24d8a:	f7de f8e3 	bl	2f54 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   24d8e:	4807      	ldr	r0, [pc, #28]	; (24dac <_handle_ipv6_echo_reply+0x5c>)
   24d90:	f004 fadf 	bl	29352 <_impl_k_sem_give>
	net_icmpv6_unregister_handler(&ping6_handler);
   24d94:	4806      	ldr	r0, [pc, #24]	; (24db0 <_handle_ipv6_echo_reply+0x60>)
   24d96:	f7f9 fd93 	bl	1e8c0 <net_icmpv6_unregister_handler>
}
   24d9a:	2000      	movs	r0, #0
   24d9c:	b00b      	add	sp, #44	; 0x2c
   24d9e:	bd30      	pop	{r4, r5, pc}
   24da0:	20002a10 	.word	0x20002a10
   24da4:	0002e77c 	.word	0x0002e77c
   24da8:	00031c28 	.word	0x00031c28
   24dac:	2000d638 	.word	0x2000d638
   24db0:	2000caec 	.word	0x2000caec

00024db4 <iface_per_route_cb>:
{
   24db4:	b510      	push	{r4, lr}
   24db6:	b082      	sub	sp, #8
   24db8:	4604      	mov	r4, r0
	printk("\nIPv6 routes for interface %p (%s)\n", iface,
   24dba:	a901      	add	r1, sp, #4
   24dbc:	f7ff faba 	bl	24334 <iface2str>
   24dc0:	4602      	mov	r2, r0
   24dc2:	4621      	mov	r1, r4
   24dc4:	4806      	ldr	r0, [pc, #24]	; (24de0 <iface_per_route_cb+0x2c>)
   24dc6:	f7de f8c5 	bl	2f54 <printk>
	printk("=======================================%s\n", extra);
   24dca:	9901      	ldr	r1, [sp, #4]
   24dcc:	4805      	ldr	r0, [pc, #20]	; (24de4 <iface_per_route_cb+0x30>)
   24dce:	f7de f8c1 	bl	2f54 <printk>
	net_route_foreach(route_cb, iface);
   24dd2:	4621      	mov	r1, r4
   24dd4:	4804      	ldr	r0, [pc, #16]	; (24de8 <iface_per_route_cb+0x34>)
   24dd6:	f7fe f829 	bl	22e2c <net_route_foreach>
}
   24dda:	b002      	add	sp, #8
   24ddc:	bd10      	pop	{r4, pc}
   24dde:	bf00      	nop
   24de0:	00031ee0 	.word	0x00031ee0
   24de4:	00031f04 	.word	0x00031f04
   24de8:	00024ae5 	.word	0x00024ae5

00024dec <tcp_connected>:
{
   24dec:	b510      	push	{r4, lr}
	if (status < 0) {
   24dee:	2900      	cmp	r1, #0
   24df0:	db03      	blt.n	24dfa <tcp_connected+0xe>
		printk("TCP connected\n");
   24df2:	4807      	ldr	r0, [pc, #28]	; (24e10 <tcp_connected+0x24>)
   24df4:	f7de f8ae 	bl	2f54 <printk>
   24df8:	bd10      	pop	{r4, pc}
   24dfa:	4604      	mov	r4, r0
		printk("TCP connection failed (%d)\n", status);
   24dfc:	4805      	ldr	r0, [pc, #20]	; (24e14 <tcp_connected+0x28>)
   24dfe:	f7de f8a9 	bl	2f54 <printk>
		net_context_put(context);
   24e02:	4620      	mov	r0, r4
   24e04:	f7f8 f834 	bl	1ce70 <net_context_put>
		tcp_ctx = NULL;
   24e08:	2200      	movs	r2, #0
   24e0a:	4b03      	ldr	r3, [pc, #12]	; (24e18 <tcp_connected+0x2c>)
   24e0c:	601a      	str	r2, [r3, #0]
   24e0e:	bd10      	pop	{r4, pc}
   24e10:	00032980 	.word	0x00032980
   24e14:	00032964 	.word	0x00032964
   24e18:	20002a38 	.word	0x20002a38

00024e1c <get_my_ipv6_addr>:
{
   24e1c:	b538      	push	{r3, r4, r5, lr}
   24e1e:	460c      	mov	r4, r1
	my6addr = net_if_ipv6_select_src_addr(iface,
   24e20:	1d0d      	adds	r5, r1, #4
   24e22:	4629      	mov	r1, r5
   24e24:	f7f7 f81e 	bl	1be64 <net_if_ipv6_select_src_addr>
	memcpy(&net_sin6(myaddr)->sin6_addr, my6addr, sizeof(struct in6_addr));
   24e28:	2210      	movs	r2, #16
   24e2a:	4601      	mov	r1, r0
   24e2c:	4628      	mov	r0, r5
   24e2e:	f7db fa47 	bl	2c0 <memcpy>
	net_sin6(myaddr)->sin6_port = 0; /* let the IP stack to select */
   24e32:	2300      	movs	r3, #0
   24e34:	8063      	strh	r3, [r4, #2]
   24e36:	bd38      	pop	{r3, r4, r5, pc}

00024e38 <tcp_connect>:
{
   24e38:	b5f0      	push	{r4, r5, r6, r7, lr}
   24e3a:	b08f      	sub	sp, #60	; 0x3c
   24e3c:	4607      	mov	r7, r0
   24e3e:	460c      	mov	r4, r1
   24e40:	4615      	mov	r5, r2
	struct net_if *iface = net_if_get_default();
   24e42:	f7f6 facb 	bl	1b3dc <net_if_get_default>
   24e46:	4606      	mov	r6, r0
	ret = net_addr_pton(AF_INET6, host, &net_sin6(&addr)->sin6_addr);
   24e48:	aa09      	add	r2, sp, #36	; 0x24
   24e4a:	4639      	mov	r1, r7
   24e4c:	200a      	movs	r0, #10
   24e4e:	f7f9 f9c4 	bl	1e1da <net_addr_pton>
	if (ret < 0) {
   24e52:	2800      	cmp	r0, #0
   24e54:	db34      	blt.n	24ec0 <tcp_connect+0x88>
	net_sin6(&addr)->sin6_port = htons(port);
   24e56:	0a21      	lsrs	r1, r4, #8
   24e58:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   24e5c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
	nbr = net_ipv6_nbr_lookup(NULL, &net_sin6(&addr)->sin6_addr);
   24e60:	a909      	add	r1, sp, #36	; 0x24
   24e62:	2000      	movs	r0, #0
   24e64:	f7fb f964 	bl	20130 <net_ipv6_nbr_lookup>
	if (nbr) {
   24e68:	b100      	cbz	r0, 24e6c <tcp_connect+0x34>
		iface = nbr->iface;
   24e6a:	6886      	ldr	r6, [r0, #8]
	get_my_ipv6_addr(iface, &myaddr);
   24e6c:	a902      	add	r1, sp, #8
   24e6e:	4630      	mov	r0, r6
   24e70:	f7ff ffd4 	bl	24e1c <get_my_ipv6_addr>
	family = addr.sa_family = myaddr.sa_family = AF_INET6;
   24e74:	240a      	movs	r4, #10
   24e76:	f8ad 4008 	strh.w	r4, [sp, #8]
   24e7a:	aa0e      	add	r2, sp, #56	; 0x38
   24e7c:	f822 4d18 	strh.w	r4, [r2, #-24]!
	print_connect_info(family, &myaddr, &addr);
   24e80:	a902      	add	r1, sp, #8
   24e82:	4620      	mov	r0, r4
   24e84:	f7ff fce6 	bl	24854 <print_connect_info>
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
   24e88:	462b      	mov	r3, r5
   24e8a:	2206      	movs	r2, #6
   24e8c:	2101      	movs	r1, #1
   24e8e:	4620      	mov	r0, r4
   24e90:	f7f7 fd82 	bl	1c998 <net_context_get>
	if (ret < 0) {
   24e94:	1e04      	subs	r4, r0, #0
   24e96:	db18      	blt.n	24eca <tcp_connect+0x92>
	ret = net_context_bind(*ctx, &myaddr, addrlen);
   24e98:	2218      	movs	r2, #24
   24e9a:	a902      	add	r1, sp, #8
   24e9c:	6828      	ldr	r0, [r5, #0]
   24e9e:	f7f8 f829 	bl	1cef4 <net_context_bind>
	if (ret < 0) {
   24ea2:	1e04      	subs	r4, r0, #0
   24ea4:	db16      	blt.n	24ed4 <tcp_connect+0x9c>
	return net_context_connect(*ctx, &addr, addrlen, tcp_connected,
   24ea6:	6828      	ldr	r0, [r5, #0]
   24ea8:	2300      	movs	r3, #0
   24eaa:	9301      	str	r3, [sp, #4]
   24eac:	9300      	str	r3, [sp, #0]
   24eae:	4b0c      	ldr	r3, [pc, #48]	; (24ee0 <tcp_connect+0xa8>)
   24eb0:	2218      	movs	r2, #24
   24eb2:	a908      	add	r1, sp, #32
   24eb4:	f7f8 f9b0 	bl	1d218 <net_context_connect>
   24eb8:	4604      	mov	r4, r0
}
   24eba:	4620      	mov	r0, r4
   24ebc:	b00f      	add	sp, #60	; 0x3c
   24ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("Invalid IPv6 address\n");
   24ec0:	4808      	ldr	r0, [pc, #32]	; (24ee4 <tcp_connect+0xac>)
   24ec2:	f7de f847 	bl	2f54 <printk>
		return 0;
   24ec6:	2400      	movs	r4, #0
   24ec8:	e7f7      	b.n	24eba <tcp_connect+0x82>
		printk("Cannot get TCP context (%d)\n", ret);
   24eca:	4621      	mov	r1, r4
   24ecc:	4806      	ldr	r0, [pc, #24]	; (24ee8 <tcp_connect+0xb0>)
   24ece:	f7de f841 	bl	2f54 <printk>
		return ret;
   24ed2:	e7f2      	b.n	24eba <tcp_connect+0x82>
		printk("Cannot bind TCP (%d)\n", ret);
   24ed4:	4621      	mov	r1, r4
   24ed6:	4805      	ldr	r0, [pc, #20]	; (24eec <tcp_connect+0xb4>)
   24ed8:	f7de f83c 	bl	2f54 <printk>
		return ret;
   24edc:	e7ed      	b.n	24eba <tcp_connect+0x82>
   24ede:	bf00      	nop
   24ee0:	00024ded 	.word	0x00024ded
   24ee4:	00032914 	.word	0x00032914
   24ee8:	0003292c 	.word	0x0003292c
   24eec:	0003294c 	.word	0x0003294c

00024ef0 <net_shell_cmd_tcp>:
}
#endif

int net_shell_cmd_tcp(int argc, char *argv[])
{
   24ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   24ef2:	b083      	sub	sp, #12
#if defined(CONFIG_NET_TCP)
	int arg = 1;
	int ret;

	if (argv[arg]) {
   24ef4:	6848      	ldr	r0, [r1, #4]
   24ef6:	2800      	cmp	r0, #0
   24ef8:	f000 8099 	beq.w	2502e <net_shell_cmd_tcp+0x13e>
   24efc:	460c      	mov	r4, r1
		if (!strcmp(argv[arg], "connect")) {
   24efe:	4954      	ldr	r1, [pc, #336]	; (25050 <net_shell_cmd_tcp+0x160>)
   24f00:	f7db fa82 	bl	408 <strcmp>
   24f04:	4605      	mov	r5, r0
   24f06:	bb20      	cbnz	r0, 24f52 <net_shell_cmd_tcp+0x62>
			/* tcp connect <ip> port */
			char *ip;
			u16_t port;

			if (tcp_ctx && net_context_is_used(tcp_ctx)) {
   24f08:	4b52      	ldr	r3, [pc, #328]	; (25054 <net_shell_cmd_tcp+0x164>)
   24f0a:	681b      	ldr	r3, [r3, #0]
   24f0c:	b123      	cbz	r3, 24f18 <net_shell_cmd_tcp+0x28>
	return context->flags & NET_CONTEXT_IN_USE;
   24f0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   24f12:	f013 0f01 	tst.w	r3, #1
   24f16:	d110      	bne.n	24f3a <net_shell_cmd_tcp+0x4a>
				printk("Already connected\n");
				return 0;
			}

			if (!argv[++arg]) {
   24f18:	68a6      	ldr	r6, [r4, #8]
   24f1a:	b196      	cbz	r6, 24f42 <net_shell_cmd_tcp+0x52>
				return 0;
			}

			ip = argv[arg];

			if (!argv[++arg]) {
   24f1c:	68e0      	ldr	r0, [r4, #12]
   24f1e:	b1a0      	cbz	r0, 24f4a <net_shell_cmd_tcp+0x5a>
				printk("Peer port missing.\n");
				return 0;
			}

			port = strtol(argv[arg], NULL, 10);
   24f20:	220a      	movs	r2, #10
   24f22:	2100      	movs	r1, #0
   24f24:	f006 fa20 	bl	2b368 <strtol>

			return tcp_connect(ip, port, &tcp_ctx);
   24f28:	4a4a      	ldr	r2, [pc, #296]	; (25054 <net_shell_cmd_tcp+0x164>)
   24f2a:	b281      	uxth	r1, r0
   24f2c:	4630      	mov	r0, r6
   24f2e:	f7ff ff83 	bl	24e38 <tcp_connect>
   24f32:	4605      	mov	r5, r0
#else
	printk("TCP not enabled.\n");
#endif /* CONFIG_NET_TCP */

	return 0;
}
   24f34:	4628      	mov	r0, r5
   24f36:	b003      	add	sp, #12
   24f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printk("Already connected\n");
   24f3a:	4847      	ldr	r0, [pc, #284]	; (25058 <net_shell_cmd_tcp+0x168>)
   24f3c:	f7de f80a 	bl	2f54 <printk>
				return 0;
   24f40:	e7f8      	b.n	24f34 <net_shell_cmd_tcp+0x44>
				printk("Peer IP address missing.\n");
   24f42:	4846      	ldr	r0, [pc, #280]	; (2505c <net_shell_cmd_tcp+0x16c>)
   24f44:	f7de f806 	bl	2f54 <printk>
				return 0;
   24f48:	e7f4      	b.n	24f34 <net_shell_cmd_tcp+0x44>
				printk("Peer port missing.\n");
   24f4a:	4845      	ldr	r0, [pc, #276]	; (25060 <net_shell_cmd_tcp+0x170>)
   24f4c:	f7de f802 	bl	2f54 <printk>
				return 0;
   24f50:	e7f0      	b.n	24f34 <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "send")) {
   24f52:	4944      	ldr	r1, [pc, #272]	; (25064 <net_shell_cmd_tcp+0x174>)
   24f54:	6860      	ldr	r0, [r4, #4]
   24f56:	f7db fa57 	bl	408 <strcmp>
   24f5a:	4605      	mov	r5, r0
   24f5c:	2800      	cmp	r0, #0
   24f5e:	d140      	bne.n	24fe2 <net_shell_cmd_tcp+0xf2>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   24f60:	4b3c      	ldr	r3, [pc, #240]	; (25054 <net_shell_cmd_tcp+0x164>)
   24f62:	6818      	ldr	r0, [r3, #0]
   24f64:	b300      	cbz	r0, 24fa8 <net_shell_cmd_tcp+0xb8>
   24f66:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   24f6a:	f013 0f01 	tst.w	r3, #1
   24f6e:	d01b      	beq.n	24fa8 <net_shell_cmd_tcp+0xb8>
			if (!argv[++arg]) {
   24f70:	68a3      	ldr	r3, [r4, #8]
   24f72:	b1eb      	cbz	r3, 24fb0 <net_shell_cmd_tcp+0xc0>
			pkt = net_pkt_get_tx(tcp_ctx, TCP_TIMEOUT);
   24f74:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   24f78:	f7f8 fbdc 	bl	1d734 <net_pkt_get_tx>
			if (!pkt) {
   24f7c:	4606      	mov	r6, r0
   24f7e:	b1d8      	cbz	r0, 24fb8 <net_shell_cmd_tcp+0xc8>
			ret = net_pkt_append_all(pkt, strlen(argv[arg]),
   24f80:	68a0      	ldr	r0, [r4, #8]
   24f82:	f7db fbbd 	bl	700 <strlen>
   24f86:	b287      	uxth	r7, r0
	return net_pkt_append(pkt, len, data, timeout) == len;
   24f88:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   24f8c:	68a2      	ldr	r2, [r4, #8]
   24f8e:	4639      	mov	r1, r7
   24f90:	4630      	mov	r0, r6
   24f92:	f7f8 fd3a 	bl	1da0a <net_pkt_append>
			if (!ret) {
   24f96:	4287      	cmp	r7, r0
   24f98:	d012      	beq.n	24fc0 <net_shell_cmd_tcp+0xd0>
				printk("Cannot build msg (out of pkts)\n");
   24f9a:	4833      	ldr	r0, [pc, #204]	; (25068 <net_shell_cmd_tcp+0x178>)
   24f9c:	f7dd ffda 	bl	2f54 <printk>
				net_pkt_unref(pkt);
   24fa0:	4630      	mov	r0, r6
   24fa2:	f7f8 fbfa 	bl	1d79a <net_pkt_unref>
				return 0;
   24fa6:	e7c5      	b.n	24f34 <net_shell_cmd_tcp+0x44>
				printk("Not connected\n");
   24fa8:	4830      	ldr	r0, [pc, #192]	; (2506c <net_shell_cmd_tcp+0x17c>)
   24faa:	f7dd ffd3 	bl	2f54 <printk>
				return 0;
   24fae:	e7c1      	b.n	24f34 <net_shell_cmd_tcp+0x44>
				printk("No data to send.\n");
   24fb0:	482f      	ldr	r0, [pc, #188]	; (25070 <net_shell_cmd_tcp+0x180>)
   24fb2:	f7dd ffcf 	bl	2f54 <printk>
				return 0;
   24fb6:	e7bd      	b.n	24f34 <net_shell_cmd_tcp+0x44>
				printk("Out of pkts, msg cannot be sent.\n");
   24fb8:	482e      	ldr	r0, [pc, #184]	; (25074 <net_shell_cmd_tcp+0x184>)
   24fba:	f7dd ffcb 	bl	2f54 <printk>
				return 0;
   24fbe:	e7b9      	b.n	24f34 <net_shell_cmd_tcp+0x44>
			ret = net_context_send(pkt, tcp_sent_cb, TCP_TIMEOUT,
   24fc0:	2300      	movs	r3, #0
   24fc2:	9300      	str	r3, [sp, #0]
   24fc4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   24fc8:	492b      	ldr	r1, [pc, #172]	; (25078 <net_shell_cmd_tcp+0x188>)
   24fca:	4630      	mov	r0, r6
   24fcc:	f7f8 fa12 	bl	1d3f4 <net_context_send>
			if (ret < 0) {
   24fd0:	1e01      	subs	r1, r0, #0
   24fd2:	daaf      	bge.n	24f34 <net_shell_cmd_tcp+0x44>
				printk("Cannot send msg (%d)\n", ret);
   24fd4:	4829      	ldr	r0, [pc, #164]	; (2507c <net_shell_cmd_tcp+0x18c>)
   24fd6:	f7dd ffbd 	bl	2f54 <printk>
				net_pkt_unref(pkt);
   24fda:	4630      	mov	r0, r6
   24fdc:	f7f8 fbdd 	bl	1d79a <net_pkt_unref>
				return 0;
   24fe0:	e7a8      	b.n	24f34 <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "close")) {
   24fe2:	4927      	ldr	r1, [pc, #156]	; (25080 <net_shell_cmd_tcp+0x190>)
   24fe4:	6860      	ldr	r0, [r4, #4]
   24fe6:	f7db fa0f 	bl	408 <strcmp>
   24fea:	4605      	mov	r5, r0
   24fec:	b9d0      	cbnz	r0, 25024 <net_shell_cmd_tcp+0x134>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   24fee:	4b19      	ldr	r3, [pc, #100]	; (25054 <net_shell_cmd_tcp+0x164>)
   24ff0:	6818      	ldr	r0, [r3, #0]
   24ff2:	b120      	cbz	r0, 24ffe <net_shell_cmd_tcp+0x10e>
   24ff4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   24ff8:	f013 0f01 	tst.w	r3, #1
   24ffc:	d103      	bne.n	25006 <net_shell_cmd_tcp+0x116>
				printk("Not connected\n");
   24ffe:	481b      	ldr	r0, [pc, #108]	; (2506c <net_shell_cmd_tcp+0x17c>)
   25000:	f7dd ffa8 	bl	2f54 <printk>
				return 0;
   25004:	e796      	b.n	24f34 <net_shell_cmd_tcp+0x44>
			ret = net_context_put(tcp_ctx);
   25006:	f7f7 ff33 	bl	1ce70 <net_context_put>
			if (ret < 0) {
   2500a:	1e01      	subs	r1, r0, #0
   2500c:	db06      	blt.n	2501c <net_shell_cmd_tcp+0x12c>
			printk("Connection closed.\n");
   2500e:	481d      	ldr	r0, [pc, #116]	; (25084 <net_shell_cmd_tcp+0x194>)
   25010:	f7dd ffa0 	bl	2f54 <printk>
			tcp_ctx = NULL;
   25014:	2200      	movs	r2, #0
   25016:	4b0f      	ldr	r3, [pc, #60]	; (25054 <net_shell_cmd_tcp+0x164>)
   25018:	601a      	str	r2, [r3, #0]
			return 0;
   2501a:	e78b      	b.n	24f34 <net_shell_cmd_tcp+0x44>
				printk("Cannot close the connection (%d)\n",
   2501c:	481a      	ldr	r0, [pc, #104]	; (25088 <net_shell_cmd_tcp+0x198>)
   2501e:	f7dd ff99 	bl	2f54 <printk>
				return 0;
   25022:	e787      	b.n	24f34 <net_shell_cmd_tcp+0x44>
		printk("Unknown command '%s'\n", argv[arg]);
   25024:	6861      	ldr	r1, [r4, #4]
   25026:	4819      	ldr	r0, [pc, #100]	; (2508c <net_shell_cmd_tcp+0x19c>)
   25028:	f7dd ff94 	bl	2f54 <printk>
		goto usage;
   2502c:	e002      	b.n	25034 <net_shell_cmd_tcp+0x144>
		printk("Invalid command.\n");
   2502e:	4818      	ldr	r0, [pc, #96]	; (25090 <net_shell_cmd_tcp+0x1a0>)
   25030:	f7dd ff90 	bl	2f54 <printk>
		printk("Usage:\n");
   25034:	4817      	ldr	r0, [pc, #92]	; (25094 <net_shell_cmd_tcp+0x1a4>)
   25036:	f7dd ff8d 	bl	2f54 <printk>
		printk("\ttcp connect <ipaddr> port\n");
   2503a:	4817      	ldr	r0, [pc, #92]	; (25098 <net_shell_cmd_tcp+0x1a8>)
   2503c:	f7dd ff8a 	bl	2f54 <printk>
		printk("\ttcp send <data>\n");
   25040:	4816      	ldr	r0, [pc, #88]	; (2509c <net_shell_cmd_tcp+0x1ac>)
   25042:	f7dd ff87 	bl	2f54 <printk>
		printk("\ttcp close\n");
   25046:	4816      	ldr	r0, [pc, #88]	; (250a0 <net_shell_cmd_tcp+0x1b0>)
   25048:	f7dd ff84 	bl	2f54 <printk>
	return 0;
   2504c:	2500      	movs	r5, #0
   2504e:	e771      	b.n	24f34 <net_shell_cmd_tcp+0x44>
   25050:	0002e8c0 	.word	0x0002e8c0
   25054:	20002a38 	.word	0x20002a38
   25058:	000326e4 	.word	0x000326e4
   2505c:	000326f8 	.word	0x000326f8
   25060:	00032714 	.word	0x00032714
   25064:	00032728 	.word	0x00032728
   25068:	00032778 	.word	0x00032778
   2506c:	00032730 	.word	0x00032730
   25070:	00032740 	.word	0x00032740
   25074:	00032754 	.word	0x00032754
   25078:	000246dd 	.word	0x000246dd
   2507c:	00032798 	.word	0x00032798
   25080:	000327b0 	.word	0x000327b0
   25084:	000327dc 	.word	0x000327dc
   25088:	000327b8 	.word	0x000327b8
   2508c:	000322dc 	.word	0x000322dc
   25090:	000327f0 	.word	0x000327f0
   25094:	00032804 	.word	0x00032804
   25098:	0003280c 	.word	0x0003280c
   2509c:	00032828 	.word	0x00032828
   250a0:	0003283c 	.word	0x0003283c

000250a4 <find_conn_handler>:
static int find_conn_handler(enum net_ip_protocol proto,
			     const struct sockaddr *remote_addr,
			     const struct sockaddr *local_addr,
			     u16_t remote_port,
			     u16_t local_port)
{
   250a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   250a8:	4605      	mov	r5, r0
   250aa:	460e      	mov	r6, r1
   250ac:	4617      	mov	r7, r2
   250ae:	4699      	mov	r9, r3
   250b0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   250b4:	2400      	movs	r4, #0
   250b6:	e012      	b.n	250de <find_conn_handler+0x3a>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   250b8:	f013 0f02 	tst.w	r3, #2
   250bc:	d10e      	bne.n	250dc <find_conn_handler+0x38>
				continue;
			}
		}

		if (local_addr) {
   250be:	2f00      	cmp	r7, #0
   250c0:	d051      	beq.n	25166 <find_conn_handler+0xc2>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   250c2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   250c6:	009a      	lsls	r2, r3, #2
   250c8:	4b3c      	ldr	r3, [pc, #240]	; (251bc <find_conn_handler+0x118>)
   250ca:	4413      	add	r3, r2
   250cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   250d0:	f013 0f04 	tst.w	r3, #4
   250d4:	d002      	beq.n	250dc <find_conn_handler+0x38>
				continue;
			}

#if defined(CONFIG_NET_IPV6)
			if (local_addr->sa_family == AF_INET6 &&
   250d6:	883b      	ldrh	r3, [r7, #0]
   250d8:	2b0a      	cmp	r3, #10
   250da:	d030      	beq.n	2513e <find_conn_handler+0x9a>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   250dc:	3401      	adds	r4, #1
   250de:	2c03      	cmp	r4, #3
   250e0:	dc67      	bgt.n	251b2 <find_conn_handler+0x10e>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   250e2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   250e6:	009a      	lsls	r2, r3, #2
   250e8:	4b34      	ldr	r3, [pc, #208]	; (251bc <find_conn_handler+0x118>)
   250ea:	4413      	add	r3, r2
   250ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   250f0:	f013 0f01 	tst.w	r3, #1
   250f4:	d0f2      	beq.n	250dc <find_conn_handler+0x38>
		if (conns[i].proto != proto) {
   250f6:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   250fa:	0091      	lsls	r1, r2, #2
   250fc:	4a2f      	ldr	r2, [pc, #188]	; (251bc <find_conn_handler+0x118>)
   250fe:	440a      	add	r2, r1
   25100:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   25104:	42aa      	cmp	r2, r5
   25106:	d1e9      	bne.n	250dc <find_conn_handler+0x38>
		if (remote_addr) {
   25108:	2e00      	cmp	r6, #0
   2510a:	d0d5      	beq.n	250b8 <find_conn_handler+0x14>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   2510c:	f013 0f02 	tst.w	r3, #2
   25110:	d0e4      	beq.n	250dc <find_conn_handler+0x38>
			if (remote_addr->sa_family == AF_INET6 &&
   25112:	8833      	ldrh	r3, [r6, #0]
   25114:	2b0a      	cmp	r3, #10
   25116:	d1e1      	bne.n	250dc <find_conn_handler+0x38>
			    conns[i].remote_addr.sa_family) {
   25118:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
   2511c:	008a      	lsls	r2, r1, #2
   2511e:	4927      	ldr	r1, [pc, #156]	; (251bc <find_conn_handler+0x118>)
   25120:	5a8a      	ldrh	r2, [r1, r2]
			if (remote_addr->sa_family == AF_INET6 &&
   25122:	4293      	cmp	r3, r2
   25124:	d1da      	bne.n	250dc <find_conn_handler+0x38>
					    &net_sin6(&conns[i].remote_addr)->
   25126:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   2512a:	0093      	lsls	r3, r2, #2
   2512c:	4419      	add	r1, r3
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   2512e:	2210      	movs	r2, #16
   25130:	3104      	adds	r1, #4
   25132:	1d30      	adds	r0, r6, #4
   25134:	f005 fb2c 	bl	2a790 <memcmp>
				if (!net_ipv6_addr_cmp(
   25138:	2800      	cmp	r0, #0
   2513a:	d1cf      	bne.n	250dc <find_conn_handler+0x38>
   2513c:	e7bf      	b.n	250be <find_conn_handler+0x1a>
			    local_addr->sa_family ==
			    conns[i].local_addr.sa_family) {
   2513e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25142:	0091      	lsls	r1, r2, #2
   25144:	4a1d      	ldr	r2, [pc, #116]	; (251bc <find_conn_handler+0x118>)
   25146:	440a      	add	r2, r1
   25148:	8b12      	ldrh	r2, [r2, #24]
			if (local_addr->sa_family == AF_INET6 &&
   2514a:	4293      	cmp	r3, r2
   2514c:	d1c6      	bne.n	250dc <find_conn_handler+0x38>
				if (!net_ipv6_addr_cmp(
					    &net_sin6(local_addr)->sin6_addr,
					    &net_sin6(&conns[i].local_addr)->
   2514e:	460b      	mov	r3, r1
   25150:	3318      	adds	r3, #24
   25152:	4a1a      	ldr	r2, [pc, #104]	; (251bc <find_conn_handler+0x118>)
   25154:	4413      	add	r3, r2
   25156:	2210      	movs	r2, #16
   25158:	1d19      	adds	r1, r3, #4
   2515a:	1d38      	adds	r0, r7, #4
   2515c:	f005 fb18 	bl	2a790 <memcmp>
				if (!net_ipv6_addr_cmp(
   25160:	2800      	cmp	r0, #0
   25162:	d1bb      	bne.n	250dc <find_conn_handler+0x38>
   25164:	e009      	b.n	2517a <find_conn_handler+0xd6>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   25166:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2516a:	009a      	lsls	r2, r3, #2
   2516c:	4b13      	ldr	r3, [pc, #76]	; (251bc <find_conn_handler+0x118>)
   2516e:	4413      	add	r3, r2
   25170:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   25174:	f013 0f04 	tst.w	r3, #4
   25178:	d1b0      	bne.n	250dc <find_conn_handler+0x38>
				continue;
			}
		}

		if (net_sin(&conns[i].remote_addr)->sin_port !=
   2517a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2517e:	009a      	lsls	r2, r3, #2
   25180:	4b0e      	ldr	r3, [pc, #56]	; (251bc <find_conn_handler+0x118>)
   25182:	4413      	add	r3, r2
   25184:	885a      	ldrh	r2, [r3, #2]
		    htons(remote_port)) {
   25186:	ea4f 2319 	mov.w	r3, r9, lsr #8
   2518a:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   2518e:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   25190:	429a      	cmp	r2, r3
   25192:	d1a3      	bne.n	250dc <find_conn_handler+0x38>
			continue;
		}

		if (net_sin(&conns[i].local_addr)->sin_port !=
   25194:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25198:	0093      	lsls	r3, r2, #2
   2519a:	3318      	adds	r3, #24
   2519c:	4a07      	ldr	r2, [pc, #28]	; (251bc <find_conn_handler+0x118>)
   2519e:	4413      	add	r3, r2
   251a0:	885a      	ldrh	r2, [r3, #2]
		    htons(local_port)) {
   251a2:	ea4f 2318 	mov.w	r3, r8, lsr #8
   251a6:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
   251aa:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].local_addr)->sin_port !=
   251ac:	429a      	cmp	r2, r3
   251ae:	d195      	bne.n	250dc <find_conn_handler+0x38>
   251b0:	e001      	b.n	251b6 <find_conn_handler+0x112>
		}

		return i;
	}

	return -ENOENT;
   251b2:	f06f 0401 	mvn.w	r4, #1
}
   251b6:	4620      	mov	r0, r4
   251b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   251bc:	20000a8c 	.word	0x20000a8c

000251c0 <check_addr>:
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   251c0:	b538      	push	{r3, r4, r5, lr}
	if (addr->sa_family != net_pkt_family(pkt)) {
   251c2:	880c      	ldrh	r4, [r1, #0]
	return pkt->family;
   251c4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   251c8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   251cc:	b29d      	uxth	r5, r3
   251ce:	42ac      	cmp	r4, r5
   251d0:	d002      	beq.n	251d8 <check_addr+0x18>
		return false;
   251d2:	2400      	movs	r4, #0
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
}
   251d4:	4620      	mov	r0, r4
   251d6:	bd38      	pop	{r3, r4, r5, pc}
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   251d8:	2b0a      	cmp	r3, #10
   251da:	d001      	beq.n	251e0 <check_addr+0x20>
	return true;
   251dc:	2401      	movs	r4, #1
   251de:	e7f9      	b.n	251d4 <check_addr+0x14>
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   251e0:	2c0a      	cmp	r4, #10
   251e2:	d001      	beq.n	251e8 <check_addr+0x28>
	return true;
   251e4:	2401      	movs	r4, #1
   251e6:	e7f5      	b.n	251d4 <check_addr+0x14>
		if (is_remote) {
   251e8:	b162      	cbz	r2, 25204 <check_addr+0x44>
	return pkt->frags->data;
   251ea:	6883      	ldr	r3, [r0, #8]
   251ec:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->src;
   251ee:	3308      	adds	r3, #8
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   251f0:	684a      	ldr	r2, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   251f2:	b95a      	cbnz	r2, 2520c <check_addr+0x4c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   251f4:	688a      	ldr	r2, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   251f6:	b9ba      	cbnz	r2, 25228 <check_addr+0x68>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   251f8:	68ca      	ldr	r2, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   251fa:	b9ba      	cbnz	r2, 2522c <check_addr+0x6c>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   251fc:	690a      	ldr	r2, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   251fe:	b1ba      	cbz	r2, 25230 <check_addr+0x70>
   25200:	2200      	movs	r2, #0
   25202:	e004      	b.n	2520e <check_addr+0x4e>
   25204:	6883      	ldr	r3, [r0, #8]
   25206:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   25208:	3318      	adds	r3, #24
   2520a:	e7f1      	b.n	251f0 <check_addr+0x30>
   2520c:	2200      	movs	r2, #0
		if (!net_is_ipv6_addr_unspecified(
   2520e:	4614      	mov	r4, r2
   25210:	2a00      	cmp	r2, #0
   25212:	d1df      	bne.n	251d4 <check_addr+0x14>
   25214:	4608      	mov	r0, r1
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   25216:	2210      	movs	r2, #16
   25218:	4619      	mov	r1, r3
   2521a:	3004      	adds	r0, #4
   2521c:	f005 fab8 	bl	2a790 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   25220:	2800      	cmp	r0, #0
   25222:	d1d7      	bne.n	251d4 <check_addr+0x14>
		return true;
   25224:	2401      	movs	r4, #1
   25226:	e7d5      	b.n	251d4 <check_addr+0x14>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25228:	2200      	movs	r2, #0
   2522a:	e7f0      	b.n	2520e <check_addr+0x4e>
   2522c:	2200      	movs	r2, #0
   2522e:	e7ee      	b.n	2520e <check_addr+0x4e>
   25230:	2201      	movs	r2, #1
   25232:	e7ec      	b.n	2520e <check_addr+0x4e>

00025234 <net_conn_unregister>:
{
   25234:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   25236:	4b0d      	ldr	r3, [pc, #52]	; (2526c <net_conn_unregister+0x38>)
   25238:	4298      	cmp	r0, r3
   2523a:	d30d      	bcc.n	25258 <net_conn_unregister+0x24>
   2523c:	33f0      	adds	r3, #240	; 0xf0
   2523e:	4298      	cmp	r0, r3
   25240:	d80d      	bhi.n	2525e <net_conn_unregister+0x2a>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   25242:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   25246:	f013 0f01 	tst.w	r3, #1
   2524a:	d00b      	beq.n	25264 <net_conn_unregister+0x30>
	memset(conn, 0, sizeof(*conn));
   2524c:	223c      	movs	r2, #60	; 0x3c
   2524e:	2100      	movs	r1, #0
   25250:	f005 fb32 	bl	2a8b8 <memset>
	return 0;
   25254:	2000      	movs	r0, #0
   25256:	bd08      	pop	{r3, pc}
		return -EINVAL;
   25258:	f06f 0015 	mvn.w	r0, #21
   2525c:	bd08      	pop	{r3, pc}
   2525e:	f06f 0015 	mvn.w	r0, #21
   25262:	bd08      	pop	{r3, pc}
		return -ENOENT;
   25264:	f06f 0001 	mvn.w	r0, #1
}
   25268:	bd08      	pop	{r3, pc}
   2526a:	bf00      	nop
   2526c:	20000a8c 	.word	0x20000a8c

00025270 <net_conn_register>:
{
   25270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25274:	b082      	sub	sp, #8
   25276:	4681      	mov	r9, r0
   25278:	460d      	mov	r5, r1
   2527a:	4616      	mov	r6, r2
   2527c:	4698      	mov	r8, r3
   2527e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	i = find_conn_handler(proto, remote_addr, local_addr, remote_port,
   25282:	9700      	str	r7, [sp, #0]
   25284:	f7ff ff0e 	bl	250a4 <find_conn_handler>
	if (i != -ENOENT) {
   25288:	f110 0f02 	cmn.w	r0, #2
   2528c:	f040 80ba 	bne.w	25404 <net_conn_register+0x194>
   25290:	2400      	movs	r4, #0
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   25292:	2c03      	cmp	r4, #3
   25294:	f300 80aa 	bgt.w	253ec <net_conn_register+0x17c>
		if (conns[i].flags & NET_CONN_IN_USE) {
   25298:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2529c:	009a      	lsls	r2, r3, #2
   2529e:	4b60      	ldr	r3, [pc, #384]	; (25420 <net_conn_register+0x1b0>)
   252a0:	4413      	add	r3, r2
   252a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   252a6:	f013 0f01 	tst.w	r3, #1
   252aa:	d001      	beq.n	252b0 <net_conn_register+0x40>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   252ac:	3401      	adds	r4, #1
   252ae:	e7f0      	b.n	25292 <net_conn_register+0x22>
		if (remote_addr) {
   252b0:	2d00      	cmp	r5, #0
   252b2:	d04b      	beq.n	2534c <net_conn_register+0xdc>
			if (remote_addr->sa_family == AF_INET6) {
   252b4:	882b      	ldrh	r3, [r5, #0]
   252b6:	2b0a      	cmp	r3, #10
   252b8:	f040 80a7 	bne.w	2540a <net_conn_register+0x19a>
				memcpy(&conns[i].remote_addr, remote_addr,
   252bc:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   252c0:	0093      	lsls	r3, r2, #2
   252c2:	2218      	movs	r2, #24
   252c4:	4629      	mov	r1, r5
   252c6:	4856      	ldr	r0, [pc, #344]	; (25420 <net_conn_register+0x1b0>)
   252c8:	4418      	add	r0, r3
   252ca:	f7da fff9 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   252ce:	686b      	ldr	r3, [r5, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   252d0:	b93b      	cbnz	r3, 252e2 <net_conn_register+0x72>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   252d2:	68ab      	ldr	r3, [r5, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   252d4:	bb8b      	cbnz	r3, 2533a <net_conn_register+0xca>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   252d6:	68eb      	ldr	r3, [r5, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   252d8:	bb8b      	cbnz	r3, 2533e <net_conn_register+0xce>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   252da:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   252dc:	b38b      	cbz	r3, 25342 <net_conn_register+0xd2>
   252de:	2300      	movs	r3, #0
   252e0:	e000      	b.n	252e4 <net_conn_register+0x74>
   252e2:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   252e4:	b37b      	cbz	r3, 25346 <net_conn_register+0xd6>
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   252e6:	f04f 0a08 	mov.w	sl, #8
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   252ea:	0122      	lsls	r2, r4, #4
   252ec:	1b12      	subs	r2, r2, r4
   252ee:	0091      	lsls	r1, r2, #2
   252f0:	4b4b      	ldr	r3, [pc, #300]	; (25420 <net_conn_register+0x1b0>)
   252f2:	440b      	add	r3, r1
   252f4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   252f8:	f042 0202 	orr.w	r2, r2, #2
   252fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (local_addr) {
   25300:	2e00      	cmp	r6, #0
   25302:	d036      	beq.n	25372 <net_conn_register+0x102>
			if (local_addr->sa_family == AF_INET6) {
   25304:	8833      	ldrh	r3, [r6, #0]
   25306:	2b0a      	cmp	r3, #10
   25308:	f040 8082 	bne.w	25410 <net_conn_register+0x1a0>
				memcpy(&conns[i].local_addr, local_addr,
   2530c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25310:	0098      	lsls	r0, r3, #2
   25312:	3018      	adds	r0, #24
   25314:	2218      	movs	r2, #24
   25316:	4631      	mov	r1, r6
   25318:	4b41      	ldr	r3, [pc, #260]	; (25420 <net_conn_register+0x1b0>)
   2531a:	4418      	add	r0, r3
   2531c:	f7da ffd0 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25320:	6873      	ldr	r3, [r6, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25322:	b9b3      	cbnz	r3, 25352 <net_conn_register+0xe2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25324:	68b3      	ldr	r3, [r6, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25326:	2b00      	cmp	r3, #0
   25328:	d163      	bne.n	253f2 <net_conn_register+0x182>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2532a:	68f3      	ldr	r3, [r6, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2532c:	2b00      	cmp	r3, #0
   2532e:	d162      	bne.n	253f6 <net_conn_register+0x186>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   25330:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25332:	2b00      	cmp	r3, #0
   25334:	d061      	beq.n	253fa <net_conn_register+0x18a>
   25336:	2300      	movs	r3, #0
   25338:	e00c      	b.n	25354 <net_conn_register+0xe4>
   2533a:	2300      	movs	r3, #0
   2533c:	e7d2      	b.n	252e4 <net_conn_register+0x74>
   2533e:	2300      	movs	r3, #0
   25340:	e7d0      	b.n	252e4 <net_conn_register+0x74>
   25342:	2301      	movs	r3, #1
   25344:	e7ce      	b.n	252e4 <net_conn_register+0x74>
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   25346:	f04f 0a20 	mov.w	sl, #32
   2534a:	e7ce      	b.n	252ea <net_conn_register+0x7a>
	u8_t rank = 0;
   2534c:	f04f 0a00 	mov.w	sl, #0
   25350:	e7d6      	b.n	25300 <net_conn_register+0x90>
   25352:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   25354:	2b00      	cmp	r3, #0
   25356:	d052      	beq.n	253fe <net_conn_register+0x18e>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   25358:	f04a 0a04 	orr.w	sl, sl, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   2535c:	0122      	lsls	r2, r4, #4
   2535e:	1b12      	subs	r2, r2, r4
   25360:	0091      	lsls	r1, r2, #2
   25362:	4b2f      	ldr	r3, [pc, #188]	; (25420 <net_conn_register+0x1b0>)
   25364:	440b      	add	r3, r1
   25366:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   2536a:	f042 0204 	orr.w	r2, r2, #4
   2536e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   25372:	b125      	cbz	r5, 2537e <net_conn_register+0x10e>
   25374:	b11e      	cbz	r6, 2537e <net_conn_register+0x10e>
			if (remote_addr->sa_family != local_addr->sa_family) {
   25376:	882a      	ldrh	r2, [r5, #0]
   25378:	8833      	ldrh	r3, [r6, #0]
   2537a:	429a      	cmp	r2, r3
   2537c:	d14b      	bne.n	25416 <net_conn_register+0x1a6>
		if (remote_port) {
   2537e:	f1b8 0f00 	cmp.w	r8, #0
   25382:	d00c      	beq.n	2539e <net_conn_register+0x12e>
			rank |= NET_RANK_REMOTE_PORT;
   25384:	f04a 0a02 	orr.w	sl, sl, #2
			net_sin(&conns[i].remote_addr)->sin_port =
   25388:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2538c:	009a      	lsls	r2, r3, #2
   2538e:	4b24      	ldr	r3, [pc, #144]	; (25420 <net_conn_register+0x1b0>)
   25390:	4413      	add	r3, r2
				htons(remote_port);
   25392:	ea4f 2218 	mov.w	r2, r8, lsr #8
   25396:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
			net_sin(&conns[i].remote_addr)->sin_port =
   2539a:	f8a3 8002 	strh.w	r8, [r3, #2]
		if (local_port) {
   2539e:	b15f      	cbz	r7, 253b8 <net_conn_register+0x148>
			rank |= NET_RANK_LOCAL_PORT;
   253a0:	f04a 0a01 	orr.w	sl, sl, #1
			net_sin(&conns[i].local_addr)->sin_port =
   253a4:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   253a8:	0093      	lsls	r3, r2, #2
   253aa:	3318      	adds	r3, #24
   253ac:	4a1c      	ldr	r2, [pc, #112]	; (25420 <net_conn_register+0x1b0>)
   253ae:	4413      	add	r3, r2
				htons(local_port);
   253b0:	0a3a      	lsrs	r2, r7, #8
   253b2:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
			net_sin(&conns[i].local_addr)->sin_port =
   253b6:	805f      	strh	r7, [r3, #2]
		conns[i].flags |= NET_CONN_IN_USE;
   253b8:	0122      	lsls	r2, r4, #4
   253ba:	1b12      	subs	r2, r2, r4
   253bc:	0091      	lsls	r1, r2, #2
   253be:	4b18      	ldr	r3, [pc, #96]	; (25420 <net_conn_register+0x1b0>)
   253c0:	440b      	add	r3, r1
   253c2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   253c6:	f042 0201 	orr.w	r2, r2, #1
   253ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		conns[i].cb = cb;
   253ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   253d0:	631a      	str	r2, [r3, #48]	; 0x30
		conns[i].user_data = user_data;
   253d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   253d4:	635a      	str	r2, [r3, #52]	; 0x34
		conns[i].rank = rank;
   253d6:	f883 a03a 	strb.w	sl, [r3, #58]	; 0x3a
		conns[i].proto = proto;
   253da:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
		if (handle) {
   253de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   253e0:	b1e3      	cbz	r3, 2541c <net_conn_register+0x1ac>
			*handle = (struct net_conn_handle *)&conns[i];
   253e2:	4b0f      	ldr	r3, [pc, #60]	; (25420 <net_conn_register+0x1b0>)
   253e4:	440b      	add	r3, r1
   253e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   253e8:	6013      	str	r3, [r2, #0]
		return 0;
   253ea:	2000      	movs	r0, #0
}
   253ec:	b002      	add	sp, #8
   253ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   253f2:	2300      	movs	r3, #0
   253f4:	e7ae      	b.n	25354 <net_conn_register+0xe4>
   253f6:	2300      	movs	r3, #0
   253f8:	e7ac      	b.n	25354 <net_conn_register+0xe4>
   253fa:	2301      	movs	r3, #1
   253fc:	e7aa      	b.n	25354 <net_conn_register+0xe4>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   253fe:	f04a 0a10 	orr.w	sl, sl, #16
   25402:	e7ab      	b.n	2535c <net_conn_register+0xec>
		return -EALREADY;
   25404:	f06f 0077 	mvn.w	r0, #119	; 0x77
   25408:	e7f0      	b.n	253ec <net_conn_register+0x17c>
				return -EINVAL;
   2540a:	f06f 0015 	mvn.w	r0, #21
   2540e:	e7ed      	b.n	253ec <net_conn_register+0x17c>
				return -EINVAL;
   25410:	f06f 0015 	mvn.w	r0, #21
   25414:	e7ea      	b.n	253ec <net_conn_register+0x17c>
				return -EINVAL;
   25416:	f06f 0015 	mvn.w	r0, #21
   2541a:	e7e7      	b.n	253ec <net_conn_register+0x17c>
		return 0;
   2541c:	2000      	movs	r0, #0
   2541e:	e7e5      	b.n	253ec <net_conn_register+0x17c>
   25420:	20000a8c 	.word	0x20000a8c

00025424 <net_conn_input>:
#endif /* CONFIG_NET_IPV4 */
	}
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   25424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25428:	b089      	sub	sp, #36	; 0x24
   2542a:	4605      	mov	r5, r0
   2542c:	460e      	mov	r6, r1

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   2542e:	2811      	cmp	r0, #17
   25430:	d005      	beq.n	2543e <net_conn_input+0x1a>
		}

		src_port = udp_hdr->src_port;
		dst_port = udp_hdr->dst_port;
		chksum = udp_hdr->chksum;
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   25432:	2806      	cmp	r0, #6
   25434:	d015      	beq.n	25462 <net_conn_input+0x3e>
		src_port = tcp_hdr->src_port;
		dst_port = tcp_hdr->dst_port;
		chksum = tcp_hdr->chksum;
	} else {
		NET_DBG("No UDP or TCP configured, dropping packet.");
		return NET_DROP;
   25436:	2002      	movs	r0, #2

drop:
	net_stats_update_per_proto_drop(proto);

	return NET_DROP;
}
   25438:	b009      	add	sp, #36	; 0x24
   2543a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   2543e:	a903      	add	r1, sp, #12
   25440:	4630      	mov	r0, r6
   25442:	f7fd ff73 	bl	2332c <net_udp_get_hdr>
		if (!udp_hdr) {
   25446:	b150      	cbz	r0, 2545e <net_conn_input+0x3a>
		src_port = udp_hdr->src_port;
   25448:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = udp_hdr->dst_port;
   2544c:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = udp_hdr->chksum;
   25450:	f8b0 a006 	ldrh.w	sl, [r0, #6]
	s16_t best_rank = -1;
   25454:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	int i, best_match = -1;
   25458:	4647      	mov	r7, r8
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2545a:	2400      	movs	r4, #0
   2545c:	e01b      	b.n	25496 <net_conn_input+0x72>
			return NET_DROP;
   2545e:	2002      	movs	r0, #2
   25460:	e7ea      	b.n	25438 <net_conn_input+0x14>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   25462:	a903      	add	r1, sp, #12
   25464:	4630      	mov	r0, r6
   25466:	f7fe fbcd 	bl	23c04 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   2546a:	b130      	cbz	r0, 2547a <net_conn_input+0x56>
		src_port = tcp_hdr->src_port;
   2546c:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = tcp_hdr->dst_port;
   25470:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = tcp_hdr->chksum;
   25474:	f8b0 a010 	ldrh.w	sl, [r0, #16]
   25478:	e7ec      	b.n	25454 <net_conn_input+0x30>
			return NET_DROP;
   2547a:	2002      	movs	r0, #2
   2547c:	e7dc      	b.n	25438 <net_conn_input+0x14>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   2547e:	ebc4 1004 	rsb	r0, r4, r4, lsl #4
   25482:	0082      	lsls	r2, r0, #2
   25484:	3218      	adds	r2, #24
   25486:	4866      	ldr	r0, [pc, #408]	; (25620 <net_conn_input+0x1fc>)
   25488:	1882      	adds	r2, r0, r2
   2548a:	9201      	str	r2, [sp, #4]
   2548c:	8852      	ldrh	r2, [r2, #2]
   2548e:	b1fa      	cbz	r2, 254d0 <net_conn_input+0xac>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   25490:	4593      	cmp	fp, r2
   25492:	d01d      	beq.n	254d0 <net_conn_input+0xac>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   25494:	3401      	adds	r4, #1
   25496:	2c03      	cmp	r4, #3
   25498:	dc4d      	bgt.n	25536 <net_conn_input+0x112>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   2549a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2549e:	009a      	lsls	r2, r3, #2
   254a0:	4b5f      	ldr	r3, [pc, #380]	; (25620 <net_conn_input+0x1fc>)
   254a2:	4413      	add	r3, r2
   254a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   254a8:	f013 0f01 	tst.w	r3, #1
   254ac:	d0f2      	beq.n	25494 <net_conn_input+0x70>
		if (conns[i].proto != proto) {
   254ae:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   254b2:	0091      	lsls	r1, r2, #2
   254b4:	4a5a      	ldr	r2, [pc, #360]	; (25620 <net_conn_input+0x1fc>)
   254b6:	440a      	add	r2, r1
   254b8:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   254bc:	4295      	cmp	r5, r2
   254be:	d1e9      	bne.n	25494 <net_conn_input+0x70>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   254c0:	4a57      	ldr	r2, [pc, #348]	; (25620 <net_conn_input+0x1fc>)
   254c2:	4411      	add	r1, r2
   254c4:	884a      	ldrh	r2, [r1, #2]
   254c6:	2a00      	cmp	r2, #0
   254c8:	d0d9      	beq.n	2547e <net_conn_input+0x5a>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   254ca:	4591      	cmp	r9, r2
   254cc:	d1e2      	bne.n	25494 <net_conn_input+0x70>
   254ce:	e7d6      	b.n	2547e <net_conn_input+0x5a>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   254d0:	f013 0f02 	tst.w	r3, #2
   254d4:	d120      	bne.n	25518 <net_conn_input+0xf4>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   254d6:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   254da:	009a      	lsls	r2, r3, #2
   254dc:	4b50      	ldr	r3, [pc, #320]	; (25620 <net_conn_input+0x1fc>)
   254de:	4413      	add	r3, r2
   254e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   254e4:	f013 0f04 	tst.w	r3, #4
   254e8:	d11d      	bne.n	25526 <net_conn_input+0x102>
		if (best_match >= 0 &&
   254ea:	2f00      	cmp	r7, #0
   254ec:	db07      	blt.n	254fe <net_conn_input+0xda>
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   254ee:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
   254f2:	009a      	lsls	r2, r3, #2
   254f4:	4b4a      	ldr	r3, [pc, #296]	; (25620 <net_conn_input+0x1fc>)
   254f6:	4413      	add	r3, r2
   254f8:	885b      	ldrh	r3, [r3, #2]
		if (best_match >= 0 &&
   254fa:	2b00      	cmp	r3, #0
   254fc:	d1ca      	bne.n	25494 <net_conn_input+0x70>
		if (best_rank < conns[i].rank) {
   254fe:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25502:	009a      	lsls	r2, r3, #2
   25504:	4b46      	ldr	r3, [pc, #280]	; (25620 <net_conn_input+0x1fc>)
   25506:	4413      	add	r3, r2
   25508:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   2550c:	4598      	cmp	r8, r3
   2550e:	dac1      	bge.n	25494 <net_conn_input+0x70>
			best_rank = conns[i].rank;
   25510:	fa0f f883 	sxth.w	r8, r3
			best_match = i;
   25514:	4627      	mov	r7, r4
   25516:	e7bd      	b.n	25494 <net_conn_input+0x70>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   25518:	2201      	movs	r2, #1
   2551a:	4630      	mov	r0, r6
   2551c:	f7ff fe50 	bl	251c0 <check_addr>
   25520:	2800      	cmp	r0, #0
   25522:	d0b7      	beq.n	25494 <net_conn_input+0x70>
   25524:	e7d7      	b.n	254d6 <net_conn_input+0xb2>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   25526:	2200      	movs	r2, #0
   25528:	9901      	ldr	r1, [sp, #4]
   2552a:	4630      	mov	r0, r6
   2552c:	f7ff fe48 	bl	251c0 <check_addr>
   25530:	2800      	cmp	r0, #0
   25532:	d0af      	beq.n	25494 <net_conn_input+0x70>
   25534:	e7d9      	b.n	254ea <net_conn_input+0xc6>
	if (best_match >= 0) {
   25536:	2f00      	cmp	r7, #0
   25538:	db44      	blt.n	255c4 <net_conn_input+0x1a0>
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   2553a:	2d11      	cmp	r5, #17
   2553c:	d014      	beq.n	25568 <net_conn_input+0x144>
		} else if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   2553e:	2d06      	cmp	r5, #6
   25540:	d023      	beq.n	2558a <net_conn_input+0x166>
		if (conns[best_match].cb(&conns[best_match], pkt,
   25542:	4c37      	ldr	r4, [pc, #220]	; (25620 <net_conn_input+0x1fc>)
   25544:	013a      	lsls	r2, r7, #4
   25546:	1bd1      	subs	r1, r2, r7
   25548:	008b      	lsls	r3, r1, #2
   2554a:	4423      	add	r3, r4
   2554c:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   25550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   25552:	4631      	mov	r1, r6
   25554:	4618      	mov	r0, r3
   25556:	47c0      	blx	r8
   25558:	2802      	cmp	r0, #2
   2555a:	d03d      	beq.n	255d8 <net_conn_input+0x1b4>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   2555c:	2d11      	cmp	r5, #17
   2555e:	d023      	beq.n	255a8 <net_conn_input+0x184>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   25560:	2d06      	cmp	r5, #6
   25562:	d029      	beq.n	255b8 <net_conn_input+0x194>
		return NET_OK;
   25564:	2000      	movs	r0, #0
   25566:	e767      	b.n	25438 <net_conn_input+0x14>
			net_udp_set_chksum(pkt, pkt->frags);
   25568:	68b1      	ldr	r1, [r6, #8]
   2556a:	4630      	mov	r0, r6
   2556c:	f7fd fe6b 	bl	23246 <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   25570:	68b1      	ldr	r1, [r6, #8]
   25572:	4630      	mov	r0, r6
   25574:	f7fd feb4 	bl	232e0 <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   25578:	4582      	cmp	sl, r0
   2557a:	d0e2      	beq.n	25542 <net_conn_input+0x11e>
	net_stats.udp.chkerr++;
   2557c:	4a29      	ldr	r2, [pc, #164]	; (25624 <net_conn_input+0x200>)
   2557e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   25582:	3301      	adds	r3, #1
   25584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
   25588:	e026      	b.n	255d8 <net_conn_input+0x1b4>
			net_tcp_set_chksum(pkt, pkt->frags);
   2558a:	68b1      	ldr	r1, [r6, #8]
   2558c:	4630      	mov	r0, r6
   2558e:	f7fe fc9e 	bl	23ece <net_tcp_set_chksum>
			chksum_calc = net_tcp_get_chksum(pkt, pkt->frags);
   25592:	68b1      	ldr	r1, [r6, #8]
   25594:	4630      	mov	r0, r6
   25596:	f7fe fc74 	bl	23e82 <net_tcp_get_chksum>
			if (chksum != chksum_calc) {
   2559a:	4582      	cmp	sl, r0
   2559c:	d0d1      	beq.n	25542 <net_conn_input+0x11e>
	net_stats.tcp.chkerr++;
   2559e:	4a21      	ldr	r2, [pc, #132]	; (25624 <net_conn_input+0x200>)
   255a0:	6e13      	ldr	r3, [r2, #96]	; 0x60
   255a2:	3301      	adds	r3, #1
   255a4:	6613      	str	r3, [r2, #96]	; 0x60
   255a6:	e017      	b.n	255d8 <net_conn_input+0x1b4>
	net_stats.udp.recv++;
   255a8:	4a1e      	ldr	r2, [pc, #120]	; (25624 <net_conn_input+0x200>)
   255aa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   255ae:	3301      	adds	r3, #1
   255b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		return NET_OK;
   255b4:	2000      	movs	r0, #0
   255b6:	e73f      	b.n	25438 <net_conn_input+0x14>
	net_stats.tcp.recv++;
   255b8:	4a1a      	ldr	r2, [pc, #104]	; (25624 <net_conn_input+0x200>)
   255ba:	6d53      	ldr	r3, [r2, #84]	; 0x54
   255bc:	3301      	adds	r3, #1
   255be:	6553      	str	r3, [r2, #84]	; 0x54
   255c0:	2000      	movs	r0, #0
   255c2:	e739      	b.n	25438 <net_conn_input+0x14>
	return pkt->family;
   255c4:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   255c8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6 &&
   255cc:	2b0a      	cmp	r3, #10
   255ce:	d009      	beq.n	255e4 <net_conn_input+0x1c0>
	if (net_pkt_family(pkt) == AF_INET6) {
   255d0:	2b0a      	cmp	r3, #10
   255d2:	d00d      	beq.n	255f0 <net_conn_input+0x1cc>
		if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   255d4:	2d06      	cmp	r5, #6
   255d6:	d012      	beq.n	255fe <net_conn_input+0x1da>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   255d8:	2d11      	cmp	r5, #17
   255da:	d015      	beq.n	25608 <net_conn_input+0x1e4>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   255dc:	2d06      	cmp	r5, #6
   255de:	d019      	beq.n	25614 <net_conn_input+0x1f0>
	return NET_DROP;
   255e0:	2002      	movs	r0, #2
   255e2:	e729      	b.n	25438 <net_conn_input+0x14>
	return pkt->frags->data;
   255e4:	68b2      	ldr	r2, [r6, #8]
   255e6:	6892      	ldr	r2, [r2, #8]
	return addr->s6_addr[0] == 0xFF;
   255e8:	7e12      	ldrb	r2, [r2, #24]
	if (net_pkt_family(pkt) == AF_INET6 &&
   255ea:	2aff      	cmp	r2, #255	; 0xff
   255ec:	d1f0      	bne.n	255d0 <net_conn_input+0x1ac>
   255ee:	e7f3      	b.n	255d8 <net_conn_input+0x1b4>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   255f0:	2300      	movs	r3, #0
   255f2:	2204      	movs	r2, #4
   255f4:	2101      	movs	r1, #1
   255f6:	4630      	mov	r0, r6
   255f8:	f7f9 fc94 	bl	1ef24 <net_icmpv6_send_error>
   255fc:	e7ea      	b.n	255d4 <net_conn_input+0x1b0>
	net_stats.tcp.connrst++;
   255fe:	4a09      	ldr	r2, [pc, #36]	; (25624 <net_conn_input+0x200>)
   25600:	6f93      	ldr	r3, [r2, #120]	; 0x78
   25602:	3301      	adds	r3, #1
   25604:	6793      	str	r3, [r2, #120]	; 0x78
   25606:	e7e7      	b.n	255d8 <net_conn_input+0x1b4>
	net_stats.udp.drop++;
   25608:	4a06      	ldr	r2, [pc, #24]	; (25624 <net_conn_input+0x200>)
   2560a:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   2560c:	3301      	adds	r3, #1
   2560e:	67d3      	str	r3, [r2, #124]	; 0x7c
	return NET_DROP;
   25610:	2002      	movs	r0, #2
   25612:	e711      	b.n	25438 <net_conn_input+0x14>
	net_stats.tcp.drop++;
   25614:	4a03      	ldr	r2, [pc, #12]	; (25624 <net_conn_input+0x200>)
   25616:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   25618:	3301      	adds	r3, #1
   2561a:	65d3      	str	r3, [r2, #92]	; 0x5c
   2561c:	2002      	movs	r0, #2
   2561e:	e70b      	b.n	25438 <net_conn_input+0x14>
   25620:	20000a8c 	.word	0x20000a8c
   25624:	20003038 	.word	0x20003038

00025628 <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   25628:	4770      	bx	lr

0002562a <compute_rlen_size>:
 * @retval -EINVAL
 */
static
int compute_rlen_size(u16_t *size, u32_t len)
{
	if (len <= 127) {
   2562a:	297f      	cmp	r1, #127	; 0x7f
   2562c:	d912      	bls.n	25654 <compute_rlen_size+0x2a>
		*size = 1;
	} else if (len >= 128 && len <= 16383) {
   2562e:	f1a1 0380 	sub.w	r3, r1, #128	; 0x80
   25632:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
   25636:	d311      	bcc.n	2565c <compute_rlen_size+0x32>
		*size = 2;
	} else if (len >= 16384 && len <= 2097151) {
   25638:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
   2563c:	f5b3 1ffe 	cmp.w	r3, #2080768	; 0x1fc000
   25640:	d310      	bcc.n	25664 <compute_rlen_size+0x3a>
		*size = 3;
	} else if (len >= 2097152 && len <= 268435455) {
   25642:	f5a1 1100 	sub.w	r1, r1, #2097152	; 0x200000
   25646:	f1b1 6f7e 	cmp.w	r1, #266338304	; 0xfe00000
   2564a:	d20f      	bcs.n	2566c <compute_rlen_size+0x42>
		*size = 4;
   2564c:	2304      	movs	r3, #4
   2564e:	8003      	strh	r3, [r0, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   25650:	2000      	movs	r0, #0
   25652:	4770      	bx	lr
		*size = 1;
   25654:	2301      	movs	r3, #1
   25656:	8003      	strh	r3, [r0, #0]
	return 0;
   25658:	2000      	movs	r0, #0
   2565a:	4770      	bx	lr
		*size = 2;
   2565c:	2302      	movs	r3, #2
   2565e:	8003      	strh	r3, [r0, #0]
	return 0;
   25660:	2000      	movs	r0, #0
   25662:	4770      	bx	lr
		*size = 3;
   25664:	2303      	movs	r3, #3
   25666:	8003      	strh	r3, [r0, #0]
	return 0;
   25668:	2000      	movs	r0, #0
   2566a:	4770      	bx	lr
		return -EINVAL;
   2566c:	f06f 0015 	mvn.w	r0, #21
}
   25670:	4770      	bx	lr

00025672 <rlen_encode>:
 * @param [in] len Value to encode
 *
 * @retval 0 always
 */
static int rlen_encode(u8_t *buf, u32_t len)
{
   25672:	b410      	push	{r4}
	u8_t encoded;
	u8_t i;

	i = 0;
   25674:	2200      	movs	r2, #0
   25676:	e004      	b.n	25682 <rlen_encode+0x10>
		 * set the top bit of this byte
		 */
		if (len > 0) {
			encoded = encoded | 128;
		}
		buf[i++] = encoded;
   25678:	1c53      	adds	r3, r2, #1
   2567a:	b2db      	uxtb	r3, r3
   2567c:	5484      	strb	r4, [r0, r2]
	} while (len > 0);
   2567e:	b139      	cbz	r1, 25690 <rlen_encode+0x1e>
		buf[i++] = encoded;
   25680:	461a      	mov	r2, r3
		encoded = len % 128;
   25682:	f001 047f 	and.w	r4, r1, #127	; 0x7f
		if (len > 0) {
   25686:	09c9      	lsrs	r1, r1, #7
   25688:	d0f6      	beq.n	25678 <rlen_encode+0x6>
			encoded = encoded | 128;
   2568a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   2568e:	e7f3      	b.n	25678 <rlen_encode+0x6>

	return 0;
}
   25690:	2000      	movs	r0, #0
   25692:	bc10      	pop	{r4}
   25694:	4770      	bx	lr

00025696 <rlen_decode>:
 * @retval 0 on success
 * @retval -ENOMEM if size < 4
 */
static int rlen_decode(u32_t *rlen, u16_t *rlen_size,
		       u8_t *buf, u16_t size)
{
   25696:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t value = 0;
	u32_t mult = 1;
	u16_t i = 0;
   25698:	2400      	movs	r4, #0
	u32_t mult = 1;
   2569a:	2601      	movs	r6, #1
	u32_t value = 0;
   2569c:	4627      	mov	r7, r4
   2569e:	e000      	b.n	256a2 <rlen_decode+0xc>
	do {
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
			return -ENOMEM;
		}

		encoded = buf[i++];
   256a0:	462c      	mov	r4, r5
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
   256a2:	2c03      	cmp	r4, #3
   256a4:	d810      	bhi.n	256c8 <rlen_decode+0x32>
   256a6:	429c      	cmp	r4, r3
   256a8:	d211      	bcs.n	256ce <rlen_decode+0x38>
		encoded = buf[i++];
   256aa:	1c65      	adds	r5, r4, #1
   256ac:	b2ad      	uxth	r5, r5
   256ae:	5d14      	ldrb	r4, [r2, r4]
		value += (encoded & 127) * mult;
   256b0:	f004 0e7f 	and.w	lr, r4, #127	; 0x7f
   256b4:	fb0e 7706 	mla	r7, lr, r6, r7
		mult *= 128;
   256b8:	01f6      	lsls	r6, r6, #7
	} while ((encoded & 128) != 0);
   256ba:	f014 0f80 	tst.w	r4, #128	; 0x80
   256be:	d1ef      	bne.n	256a0 <rlen_decode+0xa>

	*rlen = value;
   256c0:	6007      	str	r7, [r0, #0]
	*rlen_size = i;
   256c2:	800d      	strh	r5, [r1, #0]

	return 0;
   256c4:	2000      	movs	r0, #0
   256c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOMEM;
   256c8:	f06f 000b 	mvn.w	r0, #11
   256cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   256ce:	f06f 000b 	mvn.w	r0, #11
}
   256d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000256d4 <pack_pkt_id>:
 * @retval -ENOMEM if size < 4
 */
static
int pack_pkt_id(u8_t *buf, u16_t *length, u16_t size,
		enum mqtt_packet type, u8_t reserved, u16_t pkt_id)
{
   256d4:	b410      	push	{r4}
   256d6:	f8bd 4008 	ldrh.w	r4, [sp, #8]
	if (size < MSG_PKTID_ONLY_SIZE) {
   256da:	2a03      	cmp	r2, #3
   256dc:	d912      	bls.n	25704 <pack_pkt_id+0x30>
		return -ENOMEM;
	}

	buf[0] = (type << 4) + (reserved & 0x0F);
   256de:	011b      	lsls	r3, r3, #4
   256e0:	b2db      	uxtb	r3, r3
   256e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
   256e6:	f002 020f 	and.w	r2, r2, #15
   256ea:	4413      	add	r3, r2
   256ec:	7003      	strb	r3, [r0, #0]
	buf[1] = PACKET_ID_SIZE;
   256ee:	2302      	movs	r3, #2
   256f0:	7043      	strb	r3, [r0, #1]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   256f2:	0a23      	lsrs	r3, r4, #8
   256f4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   256f8:	8043      	strh	r3, [r0, #2]
	*length = MSG_PKTID_ONLY_SIZE;
   256fa:	2304      	movs	r3, #4
   256fc:	800b      	strh	r3, [r1, #0]

	return 0;
   256fe:	2000      	movs	r0, #0
}
   25700:	bc10      	pop	{r4}
   25702:	4770      	bx	lr
		return -ENOMEM;
   25704:	f06f 000b 	mvn.w	r0, #11
   25708:	e7fa      	b.n	25700 <pack_pkt_id+0x2c>

0002570a <pack_zerolen>:
 */
static
int pack_zerolen(u8_t *buf, u16_t *length, u16_t size,
		 enum mqtt_packet pkt_type, u8_t reserved)
{
	if (size < MSG_ZEROLEN_SIZE) {
   2570a:	2a01      	cmp	r2, #1
   2570c:	d90d      	bls.n	2572a <pack_zerolen+0x20>
		return -ENOMEM;
	}

	buf[0] = (pkt_type << 4) + (reserved & 0x0F);
   2570e:	011b      	lsls	r3, r3, #4
   25710:	b2db      	uxtb	r3, r3
   25712:	f89d 2000 	ldrb.w	r2, [sp]
   25716:	f002 020f 	and.w	r2, r2, #15
   2571a:	4413      	add	r3, r2
   2571c:	7003      	strb	r3, [r0, #0]
	buf[1] = 0x00;
   2571e:	2300      	movs	r3, #0
   25720:	7043      	strb	r3, [r0, #1]
	*length = MSG_ZEROLEN_SIZE;
   25722:	2202      	movs	r2, #2
   25724:	800a      	strh	r2, [r1, #0]

	return 0;
   25726:	4618      	mov	r0, r3
   25728:	4770      	bx	lr
		return -ENOMEM;
   2572a:	f06f 000b 	mvn.w	r0, #11
}
   2572e:	4770      	bx	lr

00025730 <unpack_pktid>:
 */
static
int unpack_pktid(u8_t *buf, u16_t length, enum mqtt_packet *type,
		 u8_t *reserved, u16_t *pkt_id)
{
	if (length < MSG_PKTID_ONLY_SIZE) {
   25730:	2903      	cmp	r1, #3
   25732:	d911      	bls.n	25758 <unpack_pktid+0x28>
		return -EINVAL;
	}

	if (buf[1] != PACKET_ID_SIZE) {
   25734:	7841      	ldrb	r1, [r0, #1]
   25736:	2902      	cmp	r1, #2
   25738:	d111      	bne.n	2575e <unpack_pktid+0x2e>
		return -EINVAL;
	}

	*type = buf[0] >> 4;
   2573a:	7801      	ldrb	r1, [r0, #0]
   2573c:	0909      	lsrs	r1, r1, #4
   2573e:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   25740:	7802      	ldrb	r2, [r0, #0]
   25742:	f002 020f 	and.w	r2, r2, #15
   25746:	701a      	strb	r2, [r3, #0]
	*pkt_id = ntohs(*(u16_t *)(buf + 2));
   25748:	8842      	ldrh	r2, [r0, #2]
   2574a:	0a13      	lsrs	r3, r2, #8
   2574c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25750:	9a00      	ldr	r2, [sp, #0]
   25752:	8013      	strh	r3, [r2, #0]

	return 0;
   25754:	2000      	movs	r0, #0
   25756:	4770      	bx	lr
		return -EINVAL;
   25758:	f06f 0015 	mvn.w	r0, #21
   2575c:	4770      	bx	lr
		return -EINVAL;
   2575e:	f06f 0015 	mvn.w	r0, #21
}
   25762:	4770      	bx	lr

00025764 <unpack_pktid_validate>:
 * @retval -EINVAL
 */
static
int unpack_pktid_validate(u8_t *buf, u16_t length, u16_t *pkt_id,
			  u8_t expected_type, u8_t expected_reserv)
{
   25764:	b510      	push	{r4, lr}
   25766:	b084      	sub	sp, #16
   25768:	461c      	mov	r4, r3
	enum mqtt_packet type;
	u8_t reserved;
	int rc;

	rc = unpack_pktid(buf, length, &type, &reserved, pkt_id);
   2576a:	9200      	str	r2, [sp, #0]
   2576c:	f10d 030e 	add.w	r3, sp, #14
   25770:	f10d 020f 	add.w	r2, sp, #15
   25774:	f7ff ffdc 	bl	25730 <unpack_pktid>
	if (rc != 0) {
   25778:	4603      	mov	r3, r0
   2577a:	b948      	cbnz	r0, 25790 <unpack_pktid_validate+0x2c>
		return rc;
	}

	if (type != expected_type || reserved != expected_reserv) {
   2577c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   25780:	42a2      	cmp	r2, r4
   25782:	d10b      	bne.n	2579c <unpack_pktid_validate+0x38>
   25784:	f89d 100e 	ldrb.w	r1, [sp, #14]
   25788:	f89d 2018 	ldrb.w	r2, [sp, #24]
   2578c:	4291      	cmp	r1, r2
   2578e:	d102      	bne.n	25796 <unpack_pktid_validate+0x32>
		return -EINVAL;
	}

	return 0;
}
   25790:	4618      	mov	r0, r3
   25792:	b004      	add	sp, #16
   25794:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25796:	f06f 0315 	mvn.w	r3, #21
   2579a:	e7f9      	b.n	25790 <unpack_pktid_validate+0x2c>
   2579c:	f06f 0315 	mvn.w	r3, #21
   257a0:	e7f6      	b.n	25790 <unpack_pktid_validate+0x2c>

000257a2 <unpack_zerolen>:
 */
static
int unpack_zerolen(u8_t *buf, u16_t length, enum mqtt_packet *pkt_type,
		   u8_t *reserved)
{
	if (length < MSG_ZEROLEN_SIZE) {
   257a2:	2901      	cmp	r1, #1
   257a4:	d90d      	bls.n	257c2 <unpack_zerolen+0x20>
		return -EINVAL;
	}

	*pkt_type = buf[0] >> 4;
   257a6:	7801      	ldrb	r1, [r0, #0]
   257a8:	0909      	lsrs	r1, r1, #4
   257aa:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   257ac:	7802      	ldrb	r2, [r0, #0]
   257ae:	f002 020f 	and.w	r2, r2, #15
   257b2:	701a      	strb	r2, [r3, #0]

	if (buf[1] != 0) {
   257b4:	7843      	ldrb	r3, [r0, #1]
   257b6:	b90b      	cbnz	r3, 257bc <unpack_zerolen+0x1a>
		return -EINVAL;
	}

	return 0;
   257b8:	2000      	movs	r0, #0
}
   257ba:	4770      	bx	lr
		return -EINVAL;
   257bc:	f06f 0015 	mvn.w	r0, #21
   257c0:	4770      	bx	lr
		return -EINVAL;
   257c2:	f06f 0015 	mvn.w	r0, #21
   257c6:	4770      	bx	lr

000257c8 <unpack_zerolen_validate>:
 */
static
int unpack_zerolen_validate(u8_t *buf, u16_t length,
			    enum mqtt_packet expected_type,
			    u8_t expected_reserved)
{
   257c8:	b530      	push	{r4, r5, lr}
   257ca:	b083      	sub	sp, #12
   257cc:	4614      	mov	r4, r2
   257ce:	461d      	mov	r5, r3
	enum mqtt_packet pkt_type;
	u8_t reserved;
	int rc;

	rc = unpack_zerolen(buf, length, &pkt_type, &reserved);
   257d0:	f10d 0306 	add.w	r3, sp, #6
   257d4:	f10d 0207 	add.w	r2, sp, #7
   257d8:	f7ff ffe3 	bl	257a2 <unpack_zerolen>
	if (rc != 0) {
   257dc:	4603      	mov	r3, r0
   257de:	b938      	cbnz	r0, 257f0 <unpack_zerolen_validate+0x28>
		return rc;
	}

	if (pkt_type != expected_type || reserved != expected_reserved) {
   257e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   257e4:	42a2      	cmp	r2, r4
   257e6:	d109      	bne.n	257fc <unpack_zerolen_validate+0x34>
   257e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
   257ec:	42aa      	cmp	r2, r5
   257ee:	d102      	bne.n	257f6 <unpack_zerolen_validate+0x2e>
		return -EINVAL;
	}

	return 0;
}
   257f0:	4618      	mov	r0, r3
   257f2:	b003      	add	sp, #12
   257f4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   257f6:	f06f 0315 	mvn.w	r3, #21
   257fa:	e7f9      	b.n	257f0 <unpack_zerolen_validate+0x28>
   257fc:	f06f 0315 	mvn.w	r3, #21
   25800:	e7f6      	b.n	257f0 <unpack_zerolen_validate+0x28>

00025802 <mqtt_pack_puback>:
{
   25802:	b500      	push	{lr}
   25804:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBACK, 0, pkt_id);
   25806:	9301      	str	r3, [sp, #4]
   25808:	2300      	movs	r3, #0
   2580a:	9300      	str	r3, [sp, #0]
   2580c:	2304      	movs	r3, #4
   2580e:	f7ff ff61 	bl	256d4 <pack_pkt_id>
}
   25812:	b003      	add	sp, #12
   25814:	f85d fb04 	ldr.w	pc, [sp], #4

00025818 <mqtt_pack_pubrec>:
{
   25818:	b500      	push	{lr}
   2581a:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREC, 0, pkt_id);
   2581c:	9301      	str	r3, [sp, #4]
   2581e:	2300      	movs	r3, #0
   25820:	9300      	str	r3, [sp, #0]
   25822:	2305      	movs	r3, #5
   25824:	f7ff ff56 	bl	256d4 <pack_pkt_id>
}
   25828:	b003      	add	sp, #12
   2582a:	f85d fb04 	ldr.w	pc, [sp], #4

0002582e <mqtt_pack_pubrel>:
{
   2582e:	b500      	push	{lr}
   25830:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREL, PUBREL_RESERVED,
   25832:	9301      	str	r3, [sp, #4]
   25834:	2302      	movs	r3, #2
   25836:	9300      	str	r3, [sp, #0]
   25838:	2306      	movs	r3, #6
   2583a:	f7ff ff4b 	bl	256d4 <pack_pkt_id>
}
   2583e:	b003      	add	sp, #12
   25840:	f85d fb04 	ldr.w	pc, [sp], #4

00025844 <mqtt_pack_pubcomp>:
{
   25844:	b500      	push	{lr}
   25846:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBCOMP, 0, pkt_id);
   25848:	9301      	str	r3, [sp, #4]
   2584a:	2300      	movs	r3, #0
   2584c:	9300      	str	r3, [sp, #0]
   2584e:	2307      	movs	r3, #7
   25850:	f7ff ff40 	bl	256d4 <pack_pkt_id>
}
   25854:	b003      	add	sp, #12
   25856:	f85d fb04 	ldr.w	pc, [sp], #4

0002585a <mqtt_pack_connect>:
{
   2585a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2585e:	b082      	sub	sp, #8
   25860:	4605      	mov	r5, r0
   25862:	460e      	mov	r6, r1
   25864:	4617      	mov	r7, r2
   25866:	461c      	mov	r4, r3
	pkt_size += msg->client_id_len;
   25868:	891b      	ldrh	r3, [r3, #8]
   2586a:	1c99      	adds	r1, r3, #2
   2586c:	b289      	uxth	r1, r1
	if (msg->will_flag) {
   2586e:	7aa2      	ldrb	r2, [r4, #10]
   25870:	f012 0f01 	tst.w	r2, #1
   25874:	d009      	beq.n	2588a <mqtt_pack_connect+0x30>
		pkt_size += INT_SIZE;
   25876:	1d19      	adds	r1, r3, #4
		pkt_size += msg->will_topic_len;
   25878:	8aa3      	ldrh	r3, [r4, #20]
   2587a:	fa13 f181 	uxtah	r1, r3, r1
   2587e:	b289      	uxth	r1, r1
		pkt_size += INT_SIZE;
   25880:	3102      	adds	r1, #2
		pkt_size += msg->will_msg_len;
   25882:	8ba3      	ldrh	r3, [r4, #28]
   25884:	fa13 f181 	uxtah	r1, r3, r1
   25888:	b289      	uxth	r1, r1
	if (msg->user_name) {
   2588a:	6a23      	ldr	r3, [r4, #32]
   2588c:	b123      	cbz	r3, 25898 <mqtt_pack_connect+0x3e>
		pkt_size += INT_SIZE;
   2588e:	3102      	adds	r1, #2
		pkt_size += msg->user_name_len;
   25890:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   25892:	fa13 f181 	uxtah	r1, r3, r1
   25896:	b289      	uxth	r1, r1
	if (msg->password) {
   25898:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2589a:	b123      	cbz	r3, 258a6 <mqtt_pack_connect+0x4c>
		pkt_size += INT_SIZE;
   2589c:	3102      	adds	r1, #2
		pkt_size += msg->password_len;
   2589e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   258a0:	fa13 f181 	uxtah	r1, r3, r1
   258a4:	b289      	uxth	r1, r1
	pkt_size += CONNECT_VARIABLE_HDR_SIZE;
   258a6:	310a      	adds	r1, #10
   258a8:	fa1f fa81 	uxth.w	sl, r1
	rc = compute_rlen_size(&rlen_size, pkt_size);
   258ac:	4651      	mov	r1, sl
   258ae:	f10d 0006 	add.w	r0, sp, #6
   258b2:	f7ff feba 	bl	2562a <compute_rlen_size>
	if (rc != 0) {
   258b6:	4681      	mov	r9, r0
   258b8:	2800      	cmp	r0, #0
   258ba:	f040 80b6 	bne.w	25a2a <mqtt_pack_connect+0x1d0>
	total_buf_size = PACKET_TYPE_SIZE + rlen_size + pkt_size;
   258be:	f8bd 8006 	ldrh.w	r8, [sp, #6]
   258c2:	44d0      	add	r8, sl
   258c4:	fa1f f888 	uxth.w	r8, r8
   258c8:	f108 0801 	add.w	r8, r8, #1
   258cc:	fa1f f888 	uxth.w	r8, r8
	if (total_buf_size > size) {
   258d0:	45b8      	cmp	r8, r7
   258d2:	f200 80ad 	bhi.w	25a30 <mqtt_pack_connect+0x1d6>
	buf[0] = MQTT_CONNECT << 4;
   258d6:	4628      	mov	r0, r5
   258d8:	2310      	movs	r3, #16
   258da:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, pkt_size);
   258de:	4651      	mov	r1, sl
   258e0:	f7ff fec7 	bl	25672 <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   258e4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   258e8:	1c43      	adds	r3, r0, #1
   258ea:	b29b      	uxth	r3, r3
	buf[offset + 0] = 0x00;
   258ec:	2200      	movs	r2, #0
   258ee:	54ea      	strb	r2, [r5, r3]
	buf[offset + 1] = 0x04;
   258f0:	1c59      	adds	r1, r3, #1
   258f2:	2204      	movs	r2, #4
   258f4:	546a      	strb	r2, [r5, r1]
	buf[offset + 2] = 'M';
   258f6:	1c99      	adds	r1, r3, #2
   258f8:	274d      	movs	r7, #77	; 0x4d
   258fa:	546f      	strb	r7, [r5, r1]
	buf[offset + 3] = 'Q';
   258fc:	1cd9      	adds	r1, r3, #3
   258fe:	2751      	movs	r7, #81	; 0x51
   25900:	546f      	strb	r7, [r5, r1]
	buf[offset + 4] = 'T';
   25902:	189f      	adds	r7, r3, r2
   25904:	2154      	movs	r1, #84	; 0x54
   25906:	55e9      	strb	r1, [r5, r7]
	buf[offset + 5] = 'T';
   25908:	1d5f      	adds	r7, r3, #5
   2590a:	55e9      	strb	r1, [r5, r7]
	buf[offset + 6] = 0x04;
   2590c:	1d99      	adds	r1, r3, #6
   2590e:	546a      	strb	r2, [r5, r1]
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   25910:	1ddf      	adds	r7, r3, #7
   25912:	6a22      	ldr	r2, [r4, #32]
   25914:	2a00      	cmp	r2, #0
   25916:	d05f      	beq.n	259d8 <mqtt_pack_connect+0x17e>
   25918:	f06f 017f 	mvn.w	r1, #127	; 0x7f
			  (msg->password_len ? 1 << 6 : 0) |
   2591c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   2591e:	2a00      	cmp	r2, #0
   25920:	d05c      	beq.n	259dc <mqtt_pack_connect+0x182>
   25922:	2240      	movs	r2, #64	; 0x40
   25924:	4311      	orrs	r1, r2
			  (msg->will_retain ? 1 << 5 : 0) |
   25926:	7b22      	ldrb	r2, [r4, #12]
			  (msg->password_len ? 1 << 6 : 0) |
   25928:	f012 0f01 	tst.w	r2, #1
   2592c:	d058      	beq.n	259e0 <mqtt_pack_connect+0x186>
   2592e:	2220      	movs	r2, #32
   25930:	4311      	orrs	r1, r2
			  ((msg->will_qos & 0x03) << 3) |
   25932:	7ae2      	ldrb	r2, [r4, #11]
   25934:	00d2      	lsls	r2, r2, #3
   25936:	f002 0218 	and.w	r2, r2, #24
			  (msg->will_retain ? 1 << 5 : 0) |
   2593a:	430a      	orrs	r2, r1
			  (msg->will_flag ? 1 << 2 : 0) |
   2593c:	7aa1      	ldrb	r1, [r4, #10]
			  ((msg->will_qos & 0x03) << 3) |
   2593e:	f011 0f01 	tst.w	r1, #1
   25942:	d04f      	beq.n	259e4 <mqtt_pack_connect+0x18a>
   25944:	2104      	movs	r1, #4
   25946:	4311      	orrs	r1, r2
			  (msg->clean_session ? 1 << 1 : 0);
   25948:	7822      	ldrb	r2, [r4, #0]
			  (msg->will_flag ? 1 << 2 : 0) |
   2594a:	f012 0f01 	tst.w	r2, #1
   2594e:	d04b      	beq.n	259e8 <mqtt_pack_connect+0x18e>
   25950:	2202      	movs	r2, #2
   25952:	430a      	orrs	r2, r1
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   25954:	55ea      	strb	r2, [r5, r7]
	UNALIGNED_PUT(htons(msg->keep_alive), (u16_t *)(buf + offset + 8));
   25956:	3308      	adds	r3, #8
   25958:	8be1      	ldrh	r1, [r4, #30]
   2595a:	0a0a      	lsrs	r2, r1, #8
   2595c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   25960:	52ea      	strh	r2, [r5, r3]
	offset += 8 + INT_SIZE;
   25962:	f100 030b 	add.w	r3, r0, #11
   25966:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->client_id_len),
   25968:	8921      	ldrh	r1, [r4, #8]
   2596a:	0a0a      	lsrs	r2, r1, #8
   2596c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   25970:	52ea      	strh	r2, [r5, r3]
	offset += INT_SIZE;
   25972:	300d      	adds	r0, #13
   25974:	b287      	uxth	r7, r0
	memcpy(buf + offset, msg->client_id, msg->client_id_len);
   25976:	8922      	ldrh	r2, [r4, #8]
   25978:	6861      	ldr	r1, [r4, #4]
   2597a:	19e8      	adds	r0, r5, r7
   2597c:	f7da fca0 	bl	2c0 <memcpy>
	offset += msg->client_id_len;
   25980:	8920      	ldrh	r0, [r4, #8]
   25982:	4438      	add	r0, r7
   25984:	b280      	uxth	r0, r0
	if (msg->will_flag) {
   25986:	7aa3      	ldrb	r3, [r4, #10]
   25988:	f013 0f01 	tst.w	r3, #1
   2598c:	d12e      	bne.n	259ec <mqtt_pack_connect+0x192>
	if (msg->user_name) {
   2598e:	6a23      	ldr	r3, [r4, #32]
   25990:	b173      	cbz	r3, 259b0 <mqtt_pack_connect+0x156>
		UNALIGNED_PUT(htons(msg->user_name_len),
   25992:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   25994:	0a13      	lsrs	r3, r2, #8
   25996:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2599a:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   2599c:	3002      	adds	r0, #2
   2599e:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->user_name, msg->user_name_len);
   259a0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   259a2:	6a21      	ldr	r1, [r4, #32]
   259a4:	19e8      	adds	r0, r5, r7
   259a6:	f7da fc8b 	bl	2c0 <memcpy>
		offset += msg->user_name_len;
   259aa:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   259ac:	4438      	add	r0, r7
   259ae:	b280      	uxth	r0, r0
	if (msg->password) {
   259b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   259b2:	b15b      	cbz	r3, 259cc <mqtt_pack_connect+0x172>
		UNALIGNED_PUT(htons(msg->password_len),
   259b4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   259b6:	0a13      	lsrs	r3, r2, #8
   259b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   259bc:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   259be:	3002      	adds	r0, #2
		memcpy(buf + offset, msg->password, msg->password_len);
   259c0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   259c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   259c4:	fa15 f080 	uxtah	r0, r5, r0
   259c8:	f7da fc7a 	bl	2c0 <memcpy>
	*length = total_buf_size;
   259cc:	f8a6 8000 	strh.w	r8, [r6]
}
   259d0:	4648      	mov	r0, r9
   259d2:	b002      	add	sp, #8
   259d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   259d8:	2100      	movs	r1, #0
   259da:	e79f      	b.n	2591c <mqtt_pack_connect+0xc2>
   259dc:	2200      	movs	r2, #0
   259de:	e7a1      	b.n	25924 <mqtt_pack_connect+0xca>
			  (msg->password_len ? 1 << 6 : 0) |
   259e0:	2200      	movs	r2, #0
   259e2:	e7a5      	b.n	25930 <mqtt_pack_connect+0xd6>
			  ((msg->will_qos & 0x03) << 3) |
   259e4:	2100      	movs	r1, #0
   259e6:	e7ae      	b.n	25946 <mqtt_pack_connect+0xec>
			  (msg->will_flag ? 1 << 2 : 0) |
   259e8:	2200      	movs	r2, #0
   259ea:	e7b2      	b.n	25952 <mqtt_pack_connect+0xf8>
		UNALIGNED_PUT(htons(msg->will_topic_len),
   259ec:	8aa2      	ldrh	r2, [r4, #20]
   259ee:	0a13      	lsrs	r3, r2, #8
   259f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   259f4:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   259f6:	3002      	adds	r0, #2
   259f8:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->will_topic,
   259fa:	8aa2      	ldrh	r2, [r4, #20]
   259fc:	6921      	ldr	r1, [r4, #16]
   259fe:	19e8      	adds	r0, r5, r7
   25a00:	f7da fc5e 	bl	2c0 <memcpy>
		offset += msg->will_topic_len;
   25a04:	8aa0      	ldrh	r0, [r4, #20]
   25a06:	4407      	add	r7, r0
   25a08:	b2bf      	uxth	r7, r7
		UNALIGNED_PUT(htons(msg->will_msg_len),
   25a0a:	8ba2      	ldrh	r2, [r4, #28]
   25a0c:	0a13      	lsrs	r3, r2, #8
   25a0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25a12:	53eb      	strh	r3, [r5, r7]
		offset += INT_SIZE;
   25a14:	3702      	adds	r7, #2
   25a16:	b2bf      	uxth	r7, r7
		memcpy(buf + offset, msg->will_msg, msg->will_msg_len);
   25a18:	8ba2      	ldrh	r2, [r4, #28]
   25a1a:	69a1      	ldr	r1, [r4, #24]
   25a1c:	19e8      	adds	r0, r5, r7
   25a1e:	f7da fc4f 	bl	2c0 <memcpy>
		offset += msg->will_msg_len;
   25a22:	8ba0      	ldrh	r0, [r4, #28]
   25a24:	4438      	add	r0, r7
   25a26:	b280      	uxth	r0, r0
   25a28:	e7b1      	b.n	2598e <mqtt_pack_connect+0x134>
		return -EINVAL;
   25a2a:	f06f 0915 	mvn.w	r9, #21
   25a2e:	e7cf      	b.n	259d0 <mqtt_pack_connect+0x176>
		return -ENOMEM;
   25a30:	f06f 090b 	mvn.w	r9, #11
   25a34:	e7cc      	b.n	259d0 <mqtt_pack_connect+0x176>
	...

00025a38 <mqtt_unpack_suback>:
{
   25a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25a3c:	b087      	sub	sp, #28
   25a3e:	461d      	mov	r5, r3
   25a40:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   25a44:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	*pkt_id = 0;
   25a46:	2300      	movs	r3, #0
   25a48:	8013      	strh	r3, [r2, #0]
	*items = 0;
   25a4a:	702b      	strb	r3, [r5, #0]
	if (elements <= 0) {
   25a4c:	2f00      	cmp	r7, #0
   25a4e:	d037      	beq.n	25ac0 <mqtt_unpack_suback+0x88>
   25a50:	4604      	mov	r4, r0
   25a52:	4689      	mov	r9, r1
   25a54:	4690      	mov	r8, r2
	if ((buf[0] & 0xF0) != (MQTT_SUBACK << 4)) {
   25a56:	7803      	ldrb	r3, [r0, #0]
   25a58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   25a5c:	2a90      	cmp	r2, #144	; 0x90
   25a5e:	d138      	bne.n	25ad2 <mqtt_unpack_suback+0x9a>
	rc = rlen_decode(&rlen, &rlen_size, buf + PACKET_TYPE_SIZE,
   25a60:	1e4b      	subs	r3, r1, #1
   25a62:	b29b      	uxth	r3, r3
   25a64:	1c42      	adds	r2, r0, #1
   25a66:	f10d 0116 	add.w	r1, sp, #22
   25a6a:	a804      	add	r0, sp, #16
   25a6c:	f7ff fe13 	bl	25696 <rlen_decode>
	if (rc != 0) {
   25a70:	4603      	mov	r3, r0
   25a72:	2800      	cmp	r0, #0
   25a74:	d136      	bne.n	25ae4 <mqtt_unpack_suback+0xac>
	if (PACKET_TYPE_SIZE + rlen + rlen_size > length) {
   25a76:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   25a7a:	9804      	ldr	r0, [sp, #16]
   25a7c:	180a      	adds	r2, r1, r0
   25a7e:	3201      	adds	r2, #1
   25a80:	454a      	cmp	r2, r9
   25a82:	d838      	bhi.n	25af6 <mqtt_unpack_suback+0xbe>
	offset = PACKET_TYPE_SIZE + rlen_size;
   25a84:	1c4a      	adds	r2, r1, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25a86:	fa14 f282 	uxtah	r2, r4, r2
   25a8a:	8810      	ldrh	r0, [r2, #0]
	*pkt_id = ntohs(val_u16);
   25a8c:	0a02      	lsrs	r2, r0, #8
   25a8e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   25a92:	f8a8 2000 	strh.w	r2, [r8]
	offset += PACKET_ID_SIZE;
   25a96:	3103      	adds	r1, #3
   25a98:	b289      	uxth	r1, r1
	*items = rlen - PACKET_ID_SIZE;
   25a9a:	9a04      	ldr	r2, [sp, #16]
   25a9c:	3a02      	subs	r2, #2
   25a9e:	b2d2      	uxtb	r2, r2
   25aa0:	702a      	strb	r2, [r5, #0]
	if (*items > elements) {
   25aa2:	4297      	cmp	r7, r2
   25aa4:	d335      	bcc.n	25b12 <mqtt_unpack_suback+0xda>
   25aa6:	2200      	movs	r2, #0
	for (i = 0; i < *items; i++) {
   25aa8:	7828      	ldrb	r0, [r5, #0]
   25aaa:	4282      	cmp	r2, r0
   25aac:	d242      	bcs.n	25b34 <mqtt_unpack_suback+0xfc>
		qos = *(buf + offset);
   25aae:	5c60      	ldrb	r0, [r4, r1]
		if (qos < MQTT_QoS0 || qos > MQTT_QoS2) {
   25ab0:	2802      	cmp	r0, #2
   25ab2:	d837      	bhi.n	25b24 <mqtt_unpack_suback+0xec>
		granted_qos[i] = qos;
   25ab4:	54b0      	strb	r0, [r6, r2]
		offset += QoS_SIZE;
   25ab6:	3101      	adds	r1, #1
   25ab8:	b289      	uxth	r1, r1
	for (i = 0; i < *items; i++) {
   25aba:	3201      	adds	r2, #1
   25abc:	b2d2      	uxtb	r2, r2
   25abe:	e7f3      	b.n	25aa8 <mqtt_unpack_suback+0x70>
		printk("[%s:%d] elements <= 0\n", __func__, __LINE__);
   25ac0:	f240 321a 	movw	r2, #794	; 0x31a
   25ac4:	491d      	ldr	r1, [pc, #116]	; (25b3c <mqtt_unpack_suback+0x104>)
   25ac6:	481e      	ldr	r0, [pc, #120]	; (25b40 <mqtt_unpack_suback+0x108>)
   25ac8:	f7dd fa44 	bl	2f54 <printk>
		return -EINVAL;
   25acc:	f06f 0315 	mvn.w	r3, #21
   25ad0:	e030      	b.n	25b34 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] buf[0](%x) != MQTT_SUBACK << 4\n", __func__, __LINE__, buf[0]);
   25ad2:	f240 321f 	movw	r2, #799	; 0x31f
   25ad6:	4919      	ldr	r1, [pc, #100]	; (25b3c <mqtt_unpack_suback+0x104>)
   25ad8:	481a      	ldr	r0, [pc, #104]	; (25b44 <mqtt_unpack_suback+0x10c>)
   25ada:	f7dd fa3b 	bl	2f54 <printk>
		return -EINVAL;
   25ade:	f06f 0315 	mvn.w	r3, #21
   25ae2:	e027      	b.n	25b34 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] rlen_decode returned %d\n", __func__, __LINE__, rc);
   25ae4:	f240 3226 	movw	r2, #806	; 0x326
   25ae8:	4914      	ldr	r1, [pc, #80]	; (25b3c <mqtt_unpack_suback+0x104>)
   25aea:	4817      	ldr	r0, [pc, #92]	; (25b48 <mqtt_unpack_suback+0x110>)
   25aec:	f7dd fa32 	bl	2f54 <printk>
		return -EINVAL;
   25af0:	f06f 0315 	mvn.w	r3, #21
   25af4:	e01e      	b.n	25b34 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] PACKET_TYPE_SIZE(%d) + rlen(%d) + rlen_size(%d) > length(%d)\n"
   25af6:	f8cd 9008 	str.w	r9, [sp, #8]
   25afa:	9101      	str	r1, [sp, #4]
   25afc:	9000      	str	r0, [sp, #0]
   25afe:	2301      	movs	r3, #1
   25b00:	f240 322d 	movw	r2, #813	; 0x32d
   25b04:	490d      	ldr	r1, [pc, #52]	; (25b3c <mqtt_unpack_suback+0x104>)
   25b06:	4811      	ldr	r0, [pc, #68]	; (25b4c <mqtt_unpack_suback+0x114>)
   25b08:	f7dd fa24 	bl	2f54 <printk>
		return -EINVAL;
   25b0c:	f06f 0315 	mvn.w	r3, #21
   25b10:	e010      	b.n	25b34 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] not enough space to store elements\n", __func__, __LINE__);
   25b12:	f240 323b 	movw	r2, #827	; 0x33b
   25b16:	4909      	ldr	r1, [pc, #36]	; (25b3c <mqtt_unpack_suback+0x104>)
   25b18:	480d      	ldr	r0, [pc, #52]	; (25b50 <mqtt_unpack_suback+0x118>)
   25b1a:	f7dd fa1b 	bl	2f54 <printk>
		return -EINVAL;
   25b1e:	f06f 0315 	mvn.w	r3, #21
   25b22:	e007      	b.n	25b34 <mqtt_unpack_suback+0xfc>
			printk("[%s:%d] invalid qos\n", __func__, __LINE__);
   25b24:	f240 3242 	movw	r2, #834	; 0x342
   25b28:	4904      	ldr	r1, [pc, #16]	; (25b3c <mqtt_unpack_suback+0x104>)
   25b2a:	480a      	ldr	r0, [pc, #40]	; (25b54 <mqtt_unpack_suback+0x11c>)
   25b2c:	f7dd fa12 	bl	2f54 <printk>
			return -EINVAL;
   25b30:	f06f 0315 	mvn.w	r3, #21
}
   25b34:	4618      	mov	r0, r3
   25b36:	b007      	add	sp, #28
   25b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25b3c:	000329a0 	.word	0x000329a0
   25b40:	000329b4 	.word	0x000329b4
   25b44:	000329cc 	.word	0x000329cc
   25b48:	000329f4 	.word	0x000329f4
   25b4c:	00032a18 	.word	0x00032a18
   25b50:	00032a60 	.word	0x00032a60
   25b54:	00032a8c 	.word	0x00032a8c

00025b58 <mqtt_pack_publish>:
{
   25b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25b5c:	b083      	sub	sp, #12
	if (msg->qos < MQTT_QoS0 || msg->qos > MQTT_QoS2) {
   25b5e:	785c      	ldrb	r4, [r3, #1]
   25b60:	2c02      	cmp	r4, #2
   25b62:	d860      	bhi.n	25c26 <mqtt_pack_publish+0xce>
	payload = INT_SIZE + msg->topic_len +
   25b64:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   25b68:	2c00      	cmp	r4, #0
   25b6a:	d057      	beq.n	25c1c <mqtt_pack_publish+0xc4>
   25b6c:	f04f 0e02 	mov.w	lr, #2
   25b70:	461c      	mov	r4, r3
   25b72:	4615      	mov	r5, r2
   25b74:	460f      	mov	r7, r1
   25b76:	4606      	mov	r6, r0
   25b78:	eb0e 030c 	add.w	r3, lr, ip
		  (msg->qos > MQTT_QoS0 ? PACKET_ID_SIZE : 0) + msg->msg_len;
   25b7c:	8aa2      	ldrh	r2, [r4, #20]
   25b7e:	fa12 f383 	uxtah	r3, r2, r3
   25b82:	b29b      	uxth	r3, r3
	payload = INT_SIZE + msg->topic_len +
   25b84:	3302      	adds	r3, #2
   25b86:	fa1f f983 	uxth.w	r9, r3
	rc = compute_rlen_size(&rlen_size, payload);
   25b8a:	4649      	mov	r1, r9
   25b8c:	f10d 0006 	add.w	r0, sp, #6
   25b90:	f7ff fd4b 	bl	2562a <compute_rlen_size>
	if (rc != 0) {
   25b94:	4680      	mov	r8, r0
   25b96:	2800      	cmp	r0, #0
   25b98:	d148      	bne.n	25c2c <mqtt_pack_publish+0xd4>
	if (PACKET_TYPE_SIZE + rlen_size + payload > size) {
   25b9a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   25b9e:	3301      	adds	r3, #1
   25ba0:	444b      	add	r3, r9
   25ba2:	42ab      	cmp	r3, r5
   25ba4:	dc45      	bgt.n	25c32 <mqtt_pack_publish+0xda>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25ba6:	7823      	ldrb	r3, [r4, #0]
   25ba8:	2b00      	cmp	r3, #0
   25baa:	d03a      	beq.n	25c22 <mqtt_pack_publish+0xca>
   25bac:	2338      	movs	r3, #56	; 0x38
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   25bae:	7862      	ldrb	r2, [r4, #1]
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25bb0:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   25bb4:	b25b      	sxtb	r3, r3
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   25bb6:	78a2      	ldrb	r2, [r4, #2]
   25bb8:	2a00      	cmp	r2, #0
   25bba:	bf18      	it	ne
   25bbc:	f043 0301 	orrne.w	r3, r3, #1
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25bc0:	4630      	mov	r0, r6
   25bc2:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   25bc6:	4649      	mov	r1, r9
   25bc8:	f7ff fd53 	bl	25672 <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   25bcc:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   25bd0:	1c6b      	adds	r3, r5, #1
   25bd2:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->topic_len), (u16_t *)(buf + offset));
   25bd4:	89a1      	ldrh	r1, [r4, #12]
   25bd6:	0a0a      	lsrs	r2, r1, #8
   25bd8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   25bdc:	52f2      	strh	r2, [r6, r3]
	offset += INT_SIZE;
   25bde:	3503      	adds	r5, #3
   25be0:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->topic, msg->topic_len);
   25be2:	89a2      	ldrh	r2, [r4, #12]
   25be4:	68a1      	ldr	r1, [r4, #8]
   25be6:	1970      	adds	r0, r6, r5
   25be8:	f7da fb6a 	bl	2c0 <memcpy>
	offset += msg->topic_len;
   25bec:	89a3      	ldrh	r3, [r4, #12]
   25bee:	441d      	add	r5, r3
   25bf0:	b2ad      	uxth	r5, r5
	if (msg->qos > MQTT_QoS0) {
   25bf2:	7863      	ldrb	r3, [r4, #1]
   25bf4:	b133      	cbz	r3, 25c04 <mqtt_pack_publish+0xac>
		UNALIGNED_PUT(htons(msg->pkt_id), (u16_t *)(buf + offset));
   25bf6:	88a2      	ldrh	r2, [r4, #4]
   25bf8:	0a13      	lsrs	r3, r2, #8
   25bfa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25bfe:	5373      	strh	r3, [r6, r5]
		offset += PACKET_ID_SIZE;
   25c00:	3502      	adds	r5, #2
   25c02:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->msg, msg->msg_len);
   25c04:	8aa2      	ldrh	r2, [r4, #20]
   25c06:	6921      	ldr	r1, [r4, #16]
   25c08:	1970      	adds	r0, r6, r5
   25c0a:	f7da fb59 	bl	2c0 <memcpy>
	offset += msg->msg_len;
   25c0e:	8aa3      	ldrh	r3, [r4, #20]
   25c10:	441d      	add	r5, r3
	*length = offset;
   25c12:	803d      	strh	r5, [r7, #0]
}
   25c14:	4640      	mov	r0, r8
   25c16:	b003      	add	sp, #12
   25c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	payload = INT_SIZE + msg->topic_len +
   25c1c:	f04f 0e00 	mov.w	lr, #0
   25c20:	e7a6      	b.n	25b70 <mqtt_pack_publish+0x18>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25c22:	2330      	movs	r3, #48	; 0x30
   25c24:	e7c3      	b.n	25bae <mqtt_pack_publish+0x56>
		return -EINVAL;
   25c26:	f06f 0815 	mvn.w	r8, #21
   25c2a:	e7f3      	b.n	25c14 <mqtt_pack_publish+0xbc>
		return -EINVAL;
   25c2c:	f06f 0815 	mvn.w	r8, #21
   25c30:	e7f0      	b.n	25c14 <mqtt_pack_publish+0xbc>
		return -ENOMEM;
   25c32:	f06f 080b 	mvn.w	r8, #11
   25c36:	e7ed      	b.n	25c14 <mqtt_pack_publish+0xbc>

00025c38 <mqtt_unpack_publish>:
{
   25c38:	b5f0      	push	{r4, r5, r6, r7, lr}
   25c3a:	b083      	sub	sp, #12
	if (buf[0] >> 4 != MQTT_PUBLISH) {
   25c3c:	7807      	ldrb	r7, [r0, #0]
   25c3e:	093b      	lsrs	r3, r7, #4
   25c40:	2b03      	cmp	r3, #3
   25c42:	d148      	bne.n	25cd6 <mqtt_unpack_publish+0x9e>
   25c44:	4615      	mov	r5, r2
   25c46:	460e      	mov	r6, r1
   25c48:	4604      	mov	r4, r0
	msg->dup = (buf[0] & 0x08) >> 3;
   25c4a:	f3c7 07c0 	ubfx	r7, r7, #3, #1
   25c4e:	7017      	strb	r7, [r2, #0]
	msg->qos = (buf[0] & 0x06) >> 1;
   25c50:	7803      	ldrb	r3, [r0, #0]
   25c52:	f3c3 0341 	ubfx	r3, r3, #1, #2
   25c56:	7053      	strb	r3, [r2, #1]
	msg->retain = buf[0] & 0x01;
   25c58:	4602      	mov	r2, r0
   25c5a:	f812 3b01 	ldrb.w	r3, [r2], #1
   25c5e:	f003 0301 	and.w	r3, r3, #1
   25c62:	70ab      	strb	r3, [r5, #2]
	rc = rlen_decode(&rmlen, &rmlen_size, buf + PACKET_TYPE_SIZE,
   25c64:	1e4b      	subs	r3, r1, #1
   25c66:	b29b      	uxth	r3, r3
   25c68:	f10d 0106 	add.w	r1, sp, #6
   25c6c:	4668      	mov	r0, sp
   25c6e:	f7ff fd12 	bl	25696 <rlen_decode>
	if (rc != 0) {
   25c72:	4607      	mov	r7, r0
   25c74:	2800      	cmp	r0, #0
   25c76:	d131      	bne.n	25cdc <mqtt_unpack_publish+0xa4>
	if ((PACKET_TYPE_SIZE + rmlen_size + rmlen) > length) {
   25c78:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   25c7c:	9b00      	ldr	r3, [sp, #0]
   25c7e:	4413      	add	r3, r2
   25c80:	3301      	adds	r3, #1
   25c82:	42b3      	cmp	r3, r6
   25c84:	d82d      	bhi.n	25ce2 <mqtt_unpack_publish+0xaa>
	offset = PACKET_TYPE_SIZE + rmlen_size;
   25c86:	1c53      	adds	r3, r2, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25c88:	fa14 f383 	uxtah	r3, r4, r3
   25c8c:	8819      	ldrh	r1, [r3, #0]
	msg->topic_len = ntohs(val_u16);
   25c8e:	0a0b      	lsrs	r3, r1, #8
   25c90:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   25c94:	b29b      	uxth	r3, r3
   25c96:	81ab      	strh	r3, [r5, #12]
	offset += INT_SIZE;
   25c98:	3203      	adds	r2, #3
   25c9a:	b292      	uxth	r2, r2
	if (offset + msg->topic_len > length) {
   25c9c:	18d1      	adds	r1, r2, r3
   25c9e:	42b1      	cmp	r1, r6
   25ca0:	dc22      	bgt.n	25ce8 <mqtt_unpack_publish+0xb0>
	msg->topic = (char *)(buf + offset);
   25ca2:	18a1      	adds	r1, r4, r2
   25ca4:	60a9      	str	r1, [r5, #8]
	offset += msg->topic_len;
   25ca6:	4413      	add	r3, r2
   25ca8:	b29b      	uxth	r3, r3
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25caa:	5ae1      	ldrh	r1, [r4, r3]
	if (msg->qos == MQTT_QoS1 || msg->qos == MQTT_QoS2) {
   25cac:	786a      	ldrb	r2, [r5, #1]
   25cae:	3a01      	subs	r2, #1
   25cb0:	b2d2      	uxtb	r2, r2
   25cb2:	2a01      	cmp	r2, #1
   25cb4:	d908      	bls.n	25cc8 <mqtt_unpack_publish+0x90>
		msg->pkt_id = 0;
   25cb6:	2200      	movs	r2, #0
   25cb8:	80aa      	strh	r2, [r5, #4]
	msg->msg_len = length - offset;
   25cba:	1af6      	subs	r6, r6, r3
   25cbc:	82ae      	strh	r6, [r5, #20]
	msg->msg = buf + offset;
   25cbe:	4423      	add	r3, r4
   25cc0:	612b      	str	r3, [r5, #16]
}
   25cc2:	4638      	mov	r0, r7
   25cc4:	b003      	add	sp, #12
   25cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg->pkt_id = ntohs(val_u16);
   25cc8:	0a0a      	lsrs	r2, r1, #8
   25cca:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   25cce:	80a9      	strh	r1, [r5, #4]
		offset += PACKET_ID_SIZE;
   25cd0:	3302      	adds	r3, #2
   25cd2:	b29b      	uxth	r3, r3
   25cd4:	e7f1      	b.n	25cba <mqtt_unpack_publish+0x82>
		return -EINVAL;
   25cd6:	f06f 0715 	mvn.w	r7, #21
   25cda:	e7f2      	b.n	25cc2 <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25cdc:	f06f 0715 	mvn.w	r7, #21
   25ce0:	e7ef      	b.n	25cc2 <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25ce2:	f06f 0715 	mvn.w	r7, #21
   25ce6:	e7ec      	b.n	25cc2 <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25ce8:	f06f 0715 	mvn.w	r7, #21
   25cec:	e7e9      	b.n	25cc2 <mqtt_unpack_publish+0x8a>

00025cee <mqtt_unpack_connack>:
	if (length < CONNACK_SIZE) {
   25cee:	2903      	cmp	r1, #3
   25cf0:	d90d      	bls.n	25d0e <mqtt_unpack_connack+0x20>
	if (buf[0] != (MQTT_CONNACK << 4) || buf[1] != 2) {
   25cf2:	7801      	ldrb	r1, [r0, #0]
   25cf4:	2920      	cmp	r1, #32
   25cf6:	d10d      	bne.n	25d14 <mqtt_unpack_connack+0x26>
   25cf8:	7841      	ldrb	r1, [r0, #1]
   25cfa:	2902      	cmp	r1, #2
   25cfc:	d10d      	bne.n	25d1a <mqtt_unpack_connack+0x2c>
	if (buf[2] > 1) {
   25cfe:	7881      	ldrb	r1, [r0, #2]
   25d00:	2901      	cmp	r1, #1
   25d02:	d80d      	bhi.n	25d20 <mqtt_unpack_connack+0x32>
	*session = buf[2];
   25d04:	7011      	strb	r1, [r2, #0]
	*connect_rc = buf[3];
   25d06:	78c2      	ldrb	r2, [r0, #3]
   25d08:	701a      	strb	r2, [r3, #0]
	return 0;
   25d0a:	2000      	movs	r0, #0
   25d0c:	4770      	bx	lr
		return -EINVAL;
   25d0e:	f06f 0015 	mvn.w	r0, #21
   25d12:	4770      	bx	lr
		return -EINVAL;
   25d14:	f06f 0015 	mvn.w	r0, #21
   25d18:	4770      	bx	lr
   25d1a:	f06f 0015 	mvn.w	r0, #21
   25d1e:	4770      	bx	lr
		return -EINVAL;
   25d20:	f06f 0015 	mvn.w	r0, #21
}
   25d24:	4770      	bx	lr

00025d26 <mqtt_pack_disconnect>:
{
   25d26:	b500      	push	{lr}
   25d28:	b083      	sub	sp, #12
	return pack_zerolen(buf, length, size, MQTT_DISCONNECT, 0x00);
   25d2a:	2300      	movs	r3, #0
   25d2c:	9300      	str	r3, [sp, #0]
   25d2e:	230e      	movs	r3, #14
   25d30:	f7ff fceb 	bl	2570a <pack_zerolen>
}
   25d34:	b003      	add	sp, #12
   25d36:	f85d fb04 	ldr.w	pc, [sp], #4

00025d3a <mqtt_unpack_puback>:
{
   25d3a:	b500      	push	{lr}
   25d3c:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBACK,
   25d3e:	2300      	movs	r3, #0
   25d40:	9300      	str	r3, [sp, #0]
   25d42:	2304      	movs	r3, #4
   25d44:	f7ff fd0e 	bl	25764 <unpack_pktid_validate>
}
   25d48:	b003      	add	sp, #12
   25d4a:	f85d fb04 	ldr.w	pc, [sp], #4

00025d4e <mqtt_unpack_pubrec>:
{
   25d4e:	b500      	push	{lr}
   25d50:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREC,
   25d52:	2300      	movs	r3, #0
   25d54:	9300      	str	r3, [sp, #0]
   25d56:	2305      	movs	r3, #5
   25d58:	f7ff fd04 	bl	25764 <unpack_pktid_validate>
}
   25d5c:	b003      	add	sp, #12
   25d5e:	f85d fb04 	ldr.w	pc, [sp], #4

00025d62 <mqtt_unpack_pubrel>:
{
   25d62:	b500      	push	{lr}
   25d64:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREL,
   25d66:	2302      	movs	r3, #2
   25d68:	9300      	str	r3, [sp, #0]
   25d6a:	2306      	movs	r3, #6
   25d6c:	f7ff fcfa 	bl	25764 <unpack_pktid_validate>
}
   25d70:	b003      	add	sp, #12
   25d72:	f85d fb04 	ldr.w	pc, [sp], #4

00025d76 <mqtt_unpack_pubcomp>:
{
   25d76:	b500      	push	{lr}
   25d78:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBCOMP,
   25d7a:	2300      	movs	r3, #0
   25d7c:	9300      	str	r3, [sp, #0]
   25d7e:	2307      	movs	r3, #7
   25d80:	f7ff fcf0 	bl	25764 <unpack_pktid_validate>
}
   25d84:	b003      	add	sp, #12
   25d86:	f85d fb04 	ldr.w	pc, [sp], #4

00025d8a <mqtt_unpack_pingresp>:
{
	return unpack_zerolen_validate(buf, length, MQTT_PINGREQ, 0x00);
}

int mqtt_unpack_pingresp(u8_t *buf, u16_t length)
{
   25d8a:	b508      	push	{r3, lr}
	return unpack_zerolen_validate(buf, length, MQTT_PINGRESP, 0x00);
   25d8c:	2300      	movs	r3, #0
   25d8e:	220d      	movs	r2, #13
   25d90:	f7ff fd1a 	bl	257c8 <unpack_zerolen_validate>
}
   25d94:	bd08      	pop	{r3, pc}
	...

00025d98 <mqtt_rx_pub_msgs>:
 * @retval -EINVAL on error
 */
static
int mqtt_rx_pub_msgs(struct mqtt_ctx *ctx, struct net_buf *rx,
		     enum mqtt_packet type)
{
   25d98:	b5f0      	push	{r4, r5, r6, r7, lr}
   25d9a:	b083      	sub	sp, #12
	u16_t pkt_id;
	u16_t len;
	u8_t *data;
	int rc;

	switch (type) {
   25d9c:	1f13      	subs	r3, r2, #4
   25d9e:	2b03      	cmp	r3, #3
   25da0:	d840      	bhi.n	25e24 <mqtt_rx_pub_msgs+0x8c>
   25da2:	e8df f003 	tbb	[pc, r3]
   25da6:	0502      	.short	0x0502
   25da8:	0b08      	.short	0x0b08
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   25daa:	2600      	movs	r6, #0
	case MQTT_PUBACK:
		unpack = mqtt_unpack_puback;
   25dac:	4f22      	ldr	r7, [pc, #136]	; (25e38 <mqtt_rx_pub_msgs+0xa0>)
   25dae:	e007      	b.n	25dc0 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBCOMP:
		unpack = mqtt_unpack_pubcomp;
		break;
	case MQTT_PUBREC:
		unpack = mqtt_unpack_pubrec;
		response = mqtt_tx_pubrel;
   25db0:	4e22      	ldr	r6, [pc, #136]	; (25e3c <mqtt_rx_pub_msgs+0xa4>)
		unpack = mqtt_unpack_pubrec;
   25db2:	4f23      	ldr	r7, [pc, #140]	; (25e40 <mqtt_rx_pub_msgs+0xa8>)
		break;
   25db4:	e004      	b.n	25dc0 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBREL:
		unpack = mqtt_unpack_pubrel;
		response = mqtt_tx_pubcomp;
   25db6:	4e23      	ldr	r6, [pc, #140]	; (25e44 <mqtt_rx_pub_msgs+0xac>)
		unpack = mqtt_unpack_pubrel;
   25db8:	4f23      	ldr	r7, [pc, #140]	; (25e48 <mqtt_rx_pub_msgs+0xb0>)
		break;
   25dba:	e001      	b.n	25dc0 <mqtt_rx_pub_msgs+0x28>
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   25dbc:	2600      	movs	r6, #0
		unpack = mqtt_unpack_pubcomp;
   25dbe:	4f23      	ldr	r7, [pc, #140]	; (25e4c <mqtt_rx_pub_msgs+0xb4>)
   25dc0:	4614      	mov	r4, r2
   25dc2:	460b      	mov	r3, r1
   25dc4:	4605      	mov	r5, r0

	data = rx->data;
	len = rx->len;

	/* 4 bytes message */
	rc = unpack(data, len, &pkt_id);
   25dc6:	f10d 0206 	add.w	r2, sp, #6
   25dca:	8989      	ldrh	r1, [r1, #12]
   25dcc:	6898      	ldr	r0, [r3, #8]
   25dce:	47b8      	blx	r7
	if (rc != 0) {
   25dd0:	bb58      	cbnz	r0, 25e2a <mqtt_rx_pub_msgs+0x92>
	}

	/* Only MQTT_APP_SUBSCRIBER, MQTT_APP_PUBLISHER_SUBSCRIBER and
	 * MQTT_APP_SERVER apps must receive the MQTT_PUBREL msg.
	 */
	if (type == MQTT_PUBREL) {
   25dd2:	2c06      	cmp	r4, #6
   25dd4:	d012      	beq.n	25dfc <mqtt_rx_pub_msgs+0x64>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
		} else {
			rc = -EINVAL;
		}
	} else {
		rc = ctx->publish_tx(ctx, pkt_id, type);
   25dd6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   25dda:	4622      	mov	r2, r4
   25ddc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   25de0:	4628      	mov	r0, r5
   25de2:	4798      	blx	r3
   25de4:	4603      	mov	r3, r0
	}

	if (rc != 0) {
   25de6:	bb1b      	cbnz	r3, 25e30 <mqtt_rx_pub_msgs+0x98>
		return -EINVAL;
	}

	if (!response)  {
   25de8:	b12e      	cbz	r6, 25df6 <mqtt_rx_pub_msgs+0x5e>
		return 0;
	}

	rc = response(ctx, pkt_id);
   25dea:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   25dee:	4628      	mov	r0, r5
   25df0:	47b0      	blx	r6
	if (rc != 0) {
   25df2:	4603      	mov	r3, r0
   25df4:	b998      	cbnz	r0, 25e1e <mqtt_rx_pub_msgs+0x86>
		return -EINVAL;
	}

	return 0;
}
   25df6:	4618      	mov	r0, r3
   25df8:	b003      	add	sp, #12
   25dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctx->app_type != MQTT_APP_PUBLISHER) {
   25dfc:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   25e00:	2b01      	cmp	r3, #1
   25e02:	d009      	beq.n	25e18 <mqtt_rx_pub_msgs+0x80>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
   25e04:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
   25e08:	2306      	movs	r3, #6
   25e0a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   25e0e:	2100      	movs	r1, #0
   25e10:	4628      	mov	r0, r5
   25e12:	47a0      	blx	r4
   25e14:	4603      	mov	r3, r0
   25e16:	e7e6      	b.n	25de6 <mqtt_rx_pub_msgs+0x4e>
			rc = -EINVAL;
   25e18:	f06f 0315 	mvn.w	r3, #21
   25e1c:	e7e3      	b.n	25de6 <mqtt_rx_pub_msgs+0x4e>
		return -EINVAL;
   25e1e:	f06f 0315 	mvn.w	r3, #21
   25e22:	e7e8      	b.n	25df6 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25e24:	f06f 0315 	mvn.w	r3, #21
   25e28:	e7e5      	b.n	25df6 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25e2a:	f06f 0315 	mvn.w	r3, #21
   25e2e:	e7e2      	b.n	25df6 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25e30:	f06f 0315 	mvn.w	r3, #21
   25e34:	e7df      	b.n	25df6 <mqtt_rx_pub_msgs+0x5e>
   25e36:	bf00      	nop
   25e38:	00025d3b 	.word	0x00025d3b
   25e3c:	00025f2f 	.word	0x00025f2f
   25e40:	00025d4f 	.word	0x00025d4f
   25e44:	00025f25 	.word	0x00025f25
   25e48:	00025d63 	.word	0x00025d63
   25e4c:	00025d77 	.word	0x00025d77

00025e50 <app_connected>:
	return rc;
}

static
void app_connected(struct net_app_ctx *ctx, int status, void *data)
{
   25e50:	4770      	bx	lr

00025e52 <app_recv>:
	struct mqtt_ctx *mqtt = (struct mqtt_ctx *)data;

	/* net_app_ctx is already referenced to by the mqtt_ctx struct */
	ARG_UNUSED(ctx);

	if (status || !pkt) {
   25e52:	b96a      	cbnz	r2, 25e70 <app_recv+0x1e>
   25e54:	b161      	cbz	r1, 25e70 <app_recv+0x1e>
{
   25e56:	b510      	push	{r4, lr}
   25e58:	460c      	mov	r4, r1
	return pkt->appdatalen;
   25e5a:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
		return;
	}

	if (net_pkt_appdatalen(pkt) == 0) {
   25e5c:	b91a      	cbnz	r2, 25e66 <app_recv+0x14>
	}

	mqtt->rcv(mqtt, pkt);

lb_exit:
	net_pkt_unref(pkt);
   25e5e:	4620      	mov	r0, r4
   25e60:	f7f7 fc9b 	bl	1d79a <net_pkt_unref>
   25e64:	bd10      	pop	{r4, pc}
	mqtt->rcv(mqtt, pkt);
   25e66:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   25e6a:	4618      	mov	r0, r3
   25e6c:	4790      	blx	r2
   25e6e:	e7f6      	b.n	25e5e <app_recv+0xc>
   25e70:	4770      	bx	lr

00025e72 <mqtt_tx_pub_msgs>:
{
   25e72:	b570      	push	{r4, r5, r6, lr}
   25e74:	b084      	sub	sp, #16
   25e76:	4604      	mov	r4, r0
	switch (pkt_type) {
   25e78:	3a04      	subs	r2, #4
   25e7a:	2a03      	cmp	r2, #3
   25e7c:	d849      	bhi.n	25f12 <mqtt_tx_pub_msgs+0xa0>
   25e7e:	e8df f002 	tbb	[pc, r2]
   25e82:	2c02      	.short	0x2c02
   25e84:	2434      	.short	0x2434
		rc = mqtt_pack_puback(msg, &len, sizeof(msg), id);
   25e86:	460b      	mov	r3, r1
   25e88:	2204      	movs	r2, #4
   25e8a:	f10d 010a 	add.w	r1, sp, #10
   25e8e:	a803      	add	r0, sp, #12
   25e90:	f7ff fcb7 	bl	25802 <mqtt_pack_puback>
	if (rc != 0) {
   25e94:	2800      	cmp	r0, #0
   25e96:	d13f      	bne.n	25f18 <mqtt_tx_pub_msgs+0xa6>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25e98:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   25e9a:	2100      	movs	r1, #0
   25e9c:	4620      	mov	r0, r4
   25e9e:	f000 fe09 	bl	26ab4 <net_app_get_net_pkt>
	if (tx == NULL) {
   25ea2:	4605      	mov	r5, r0
   25ea4:	2800      	cmp	r0, #0
   25ea6:	d03a      	beq.n	25f1e <mqtt_tx_pub_msgs+0xac>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   25ea8:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   25eac:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25eae:	aa03      	add	r2, sp, #12
   25eb0:	4631      	mov	r1, r6
   25eb2:	f7f7 fdaa 	bl	1da0a <net_pkt_append>
	if (rc != true) {
   25eb6:	4286      	cmp	r6, r0
   25eb8:	d01f      	beq.n	25efa <mqtt_tx_pub_msgs+0x88>
		rc = -ENOMEM;
   25eba:	f06f 040b 	mvn.w	r4, #11
	net_pkt_unref(tx);
   25ebe:	4628      	mov	r0, r5
   25ec0:	f7f7 fc6b 	bl	1d79a <net_pkt_unref>
}
   25ec4:	4620      	mov	r0, r4
   25ec6:	b004      	add	sp, #16
   25ec8:	bd70      	pop	{r4, r5, r6, pc}
		rc = mqtt_pack_pubcomp(msg, &len, sizeof(msg), id);
   25eca:	460b      	mov	r3, r1
   25ecc:	2204      	movs	r2, #4
   25ece:	f10d 010a 	add.w	r1, sp, #10
   25ed2:	a803      	add	r0, sp, #12
   25ed4:	f7ff fcb6 	bl	25844 <mqtt_pack_pubcomp>
		break;
   25ed8:	e7dc      	b.n	25e94 <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrec(msg, &len, sizeof(msg), id);
   25eda:	460b      	mov	r3, r1
   25edc:	2204      	movs	r2, #4
   25ede:	f10d 010a 	add.w	r1, sp, #10
   25ee2:	a803      	add	r0, sp, #12
   25ee4:	f7ff fc98 	bl	25818 <mqtt_pack_pubrec>
		break;
   25ee8:	e7d4      	b.n	25e94 <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrel(msg, &len, sizeof(msg), id);
   25eea:	460b      	mov	r3, r1
   25eec:	2204      	movs	r2, #4
   25eee:	f10d 010a 	add.w	r1, sp, #10
   25ef2:	a803      	add	r0, sp, #12
   25ef4:	f7ff fc9b 	bl	2582e <mqtt_pack_pubrel>
		break;
   25ef8:	e7cc      	b.n	25e94 <mqtt_tx_pub_msgs+0x22>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25efa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25efc:	2200      	movs	r2, #0
   25efe:	9201      	str	r2, [sp, #4]
   25f00:	9300      	str	r3, [sp, #0]
   25f02:	4613      	mov	r3, r2
   25f04:	4629      	mov	r1, r5
   25f06:	4620      	mov	r0, r4
   25f08:	f000 fd58 	bl	269bc <net_app_send_pkt>
	if (rc < 0) {
   25f0c:	1e04      	subs	r4, r0, #0
   25f0e:	dad9      	bge.n	25ec4 <mqtt_tx_pub_msgs+0x52>
   25f10:	e7d5      	b.n	25ebe <mqtt_tx_pub_msgs+0x4c>
		return -EINVAL;
   25f12:	f06f 0415 	mvn.w	r4, #21
   25f16:	e7d5      	b.n	25ec4 <mqtt_tx_pub_msgs+0x52>
		return -EINVAL;
   25f18:	f06f 0415 	mvn.w	r4, #21
   25f1c:	e7d2      	b.n	25ec4 <mqtt_tx_pub_msgs+0x52>
		return -ENOMEM;
   25f1e:	f06f 040b 	mvn.w	r4, #11
   25f22:	e7cf      	b.n	25ec4 <mqtt_tx_pub_msgs+0x52>

00025f24 <mqtt_tx_pubcomp>:
{
   25f24:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBCOMP);
   25f26:	2207      	movs	r2, #7
   25f28:	f7ff ffa3 	bl	25e72 <mqtt_tx_pub_msgs>
}
   25f2c:	bd08      	pop	{r3, pc}

00025f2e <mqtt_tx_pubrel>:
{
   25f2e:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREL);
   25f30:	2206      	movs	r2, #6
   25f32:	f7ff ff9e 	bl	25e72 <mqtt_tx_pub_msgs>
}
   25f36:	bd08      	pop	{r3, pc}

00025f38 <mqtt_linearize_packet>:
{
   25f38:	b570      	push	{r4, r5, r6, lr}
	return pkt->appdatalen;
   25f3a:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
	if (data_len < min_size || data_len > CONFIG_MQTT_MSG_MAX_SIZE) {
   25f3c:	42aa      	cmp	r2, r5
   25f3e:	d820      	bhi.n	25f82 <mqtt_linearize_packet+0x4a>
   25f40:	2d80      	cmp	r5, #128	; 0x80
   25f42:	d820      	bhi.n	25f86 <mqtt_linearize_packet+0x4e>
   25f44:	460c      	mov	r4, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25f46:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   25f48:	4810      	ldr	r0, [pc, #64]	; (25f8c <mqtt_linearize_packet+0x54>)
   25f4a:	f7f4 fe49 	bl	1abe0 <net_buf_alloc>
	if (data == NULL) {
   25f4e:	4606      	mov	r6, r0
   25f50:	b180      	cbz	r0, 25f74 <mqtt_linearize_packet+0x3c>
	return net_buf_frags_len(pkt->frags);
   25f52:	68a1      	ldr	r1, [r4, #8]
   25f54:	460c      	mov	r4, r1
	size_t bytes = 0;
   25f56:	2200      	movs	r2, #0
   25f58:	e002      	b.n	25f60 <mqtt_linearize_packet+0x28>
		bytes += buf->len;
   25f5a:	89a3      	ldrh	r3, [r4, #12]
   25f5c:	441a      	add	r2, r3
		buf = buf->frags;
   25f5e:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   25f60:	2c00      	cmp	r4, #0
   25f62:	d1fa      	bne.n	25f5a <mqtt_linearize_packet+0x22>
	offset = net_pkt_get_len(rx) - data_len;
   25f64:	b292      	uxth	r2, r2
   25f66:	1b52      	subs	r2, r2, r5
	rc = net_frag_linear_copy(data, rx->frags, offset, data_len);
   25f68:	462b      	mov	r3, r5
   25f6a:	b292      	uxth	r2, r2
   25f6c:	4630      	mov	r0, r6
   25f6e:	f7f7 fcc7 	bl	1d900 <net_frag_linear_copy>
	if (rc != 0) {
   25f72:	b908      	cbnz	r0, 25f78 <mqtt_linearize_packet+0x40>
}
   25f74:	4630      	mov	r0, r6
   25f76:	bd70      	pop	{r4, r5, r6, pc}
	net_pkt_frag_unref(data);
   25f78:	4630      	mov	r0, r6
   25f7a:	f7f7 fc08 	bl	1d78e <net_pkt_frag_unref>
	return NULL;
   25f7e:	4626      	mov	r6, r4
   25f80:	e7f8      	b.n	25f74 <mqtt_linearize_packet+0x3c>
		return NULL;
   25f82:	2600      	movs	r6, #0
   25f84:	e7f6      	b.n	25f74 <mqtt_linearize_packet+0x3c>
   25f86:	2600      	movs	r6, #0
   25f88:	e7f4      	b.n	25f74 <mqtt_linearize_packet+0x3c>
   25f8a:	bf00      	nop
   25f8c:	2000d748 	.word	0x2000d748

00025f90 <mqtt_tx_connect>:
{
   25f90:	b570      	push	{r4, r5, r6, lr}
   25f92:	b082      	sub	sp, #8
   25f94:	4604      	mov	r4, r0
   25f96:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25f98:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   25f9a:	481d      	ldr	r0, [pc, #116]	; (26010 <mqtt_tx_connect+0x80>)
   25f9c:	f7f4 fe20 	bl	1abe0 <net_buf_alloc>
	if (data == NULL) {
   25fa0:	b398      	cbz	r0, 2600a <mqtt_tx_connect+0x7a>
   25fa2:	4605      	mov	r5, r0
	ctx->clean_session = msg->clean_session ? 1 : 0;
   25fa4:	7832      	ldrb	r2, [r6, #0]
   25fa6:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   25faa:	f362 0300 	bfi	r3, r2, #0, #1
   25fae:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	rc = mqtt_pack_connect(data->data, &data->len, MSG_SIZE, msg);
   25fb2:	4633      	mov	r3, r6
   25fb4:	2280      	movs	r2, #128	; 0x80
   25fb6:	f100 010c 	add.w	r1, r0, #12
   25fba:	6880      	ldr	r0, [r0, #8]
   25fbc:	f7ff fc4d 	bl	2585a <mqtt_pack_connect>
	if (rc != 0) {
   25fc0:	b9c0      	cbnz	r0, 25ff4 <mqtt_tx_connect+0x64>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25fc2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   25fc4:	2100      	movs	r1, #0
   25fc6:	4620      	mov	r0, r4
   25fc8:	f000 fd74 	bl	26ab4 <net_app_get_net_pkt>
	if (tx == NULL) {
   25fcc:	4606      	mov	r6, r0
   25fce:	b1c8      	cbz	r0, 26004 <mqtt_tx_connect+0x74>
	net_pkt_frag_add(tx, data);
   25fd0:	4629      	mov	r1, r5
   25fd2:	f7f7 fc0c 	bl	1d7ee <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25fd6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25fd8:	2200      	movs	r2, #0
   25fda:	9201      	str	r2, [sp, #4]
   25fdc:	9300      	str	r3, [sp, #0]
   25fde:	4613      	mov	r3, r2
   25fe0:	4631      	mov	r1, r6
   25fe2:	4620      	mov	r0, r4
   25fe4:	f000 fcea 	bl	269bc <net_app_send_pkt>
	if (rc < 0) {
   25fe8:	1e04      	subs	r4, r0, #0
   25fea:	da08      	bge.n	25ffe <mqtt_tx_connect+0x6e>
		net_pkt_unref(tx);
   25fec:	4630      	mov	r0, r6
   25fee:	f7f7 fbd4 	bl	1d79a <net_pkt_unref>
   25ff2:	e004      	b.n	25ffe <mqtt_tx_connect+0x6e>
		rc = -EINVAL;
   25ff4:	f06f 0415 	mvn.w	r4, #21
	net_pkt_frag_unref(data);
   25ff8:	4628      	mov	r0, r5
   25ffa:	f7f7 fbc8 	bl	1d78e <net_pkt_frag_unref>
}
   25ffe:	4620      	mov	r0, r4
   26000:	b002      	add	sp, #8
   26002:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   26004:	f06f 040b 	mvn.w	r4, #11
   26008:	e7f6      	b.n	25ff8 <mqtt_tx_connect+0x68>
		return -ENOMEM;
   2600a:	f06f 040b 	mvn.w	r4, #11
   2600e:	e7f6      	b.n	25ffe <mqtt_tx_connect+0x6e>
   26010:	2000d748 	.word	0x2000d748

00026014 <mqtt_tx_disconnect>:
{
   26014:	b570      	push	{r4, r5, r6, lr}
   26016:	b084      	sub	sp, #16
   26018:	4604      	mov	r4, r0
	rc = mqtt_pack_disconnect(msg, &len, sizeof(msg));
   2601a:	2202      	movs	r2, #2
   2601c:	f10d 010a 	add.w	r1, sp, #10
   26020:	a803      	add	r0, sp, #12
   26022:	f7ff fe80 	bl	25d26 <mqtt_pack_disconnect>
	if (rc != 0) {
   26026:	bb78      	cbnz	r0, 26088 <mqtt_tx_disconnect+0x74>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   26028:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   2602a:	2100      	movs	r1, #0
   2602c:	4620      	mov	r0, r4
   2602e:	f000 fd41 	bl	26ab4 <net_app_get_net_pkt>
	if (tx == NULL) {
   26032:	4605      	mov	r5, r0
   26034:	b358      	cbz	r0, 2608e <mqtt_tx_disconnect+0x7a>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   26036:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   2603a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   2603c:	aa03      	add	r2, sp, #12
   2603e:	4631      	mov	r1, r6
   26040:	f7f7 fce3 	bl	1da0a <net_pkt_append>
	if (rc != true) {
   26044:	4286      	cmp	r6, r0
   26046:	d007      	beq.n	26058 <mqtt_tx_disconnect+0x44>
		rc = -ENOMEM;
   26048:	f06f 060b 	mvn.w	r6, #11
	net_pkt_unref(tx);
   2604c:	4628      	mov	r0, r5
   2604e:	f7f7 fba4 	bl	1d79a <net_pkt_unref>
}
   26052:	4630      	mov	r0, r6
   26054:	b004      	add	sp, #16
   26056:	bd70      	pop	{r4, r5, r6, pc}
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   26058:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   2605a:	2200      	movs	r2, #0
   2605c:	9201      	str	r2, [sp, #4]
   2605e:	9300      	str	r3, [sp, #0]
   26060:	4613      	mov	r3, r2
   26062:	4629      	mov	r1, r5
   26064:	4620      	mov	r0, r4
   26066:	f000 fca9 	bl	269bc <net_app_send_pkt>
	if (rc < 0) {
   2606a:	1e06      	subs	r6, r0, #0
   2606c:	dbee      	blt.n	2604c <mqtt_tx_disconnect+0x38>
	ctx->connected = 0;
   2606e:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   26072:	f36f 0341 	bfc	r3, #1, #1
   26076:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->disconnect) {
   2607a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   2607e:	2b00      	cmp	r3, #0
   26080:	d0e7      	beq.n	26052 <mqtt_tx_disconnect+0x3e>
		ctx->disconnect(ctx);
   26082:	4620      	mov	r0, r4
   26084:	4798      	blx	r3
   26086:	e7e4      	b.n	26052 <mqtt_tx_disconnect+0x3e>
		return -EINVAL;
   26088:	f06f 0615 	mvn.w	r6, #21
   2608c:	e7e1      	b.n	26052 <mqtt_tx_disconnect+0x3e>
		return -ENOMEM;
   2608e:	f06f 060b 	mvn.w	r6, #11
   26092:	e7de      	b.n	26052 <mqtt_tx_disconnect+0x3e>

00026094 <mqtt_tx_puback>:
{
   26094:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBACK);
   26096:	2204      	movs	r2, #4
   26098:	f7ff feeb 	bl	25e72 <mqtt_tx_pub_msgs>
}
   2609c:	bd08      	pop	{r3, pc}

0002609e <mqtt_tx_pubrec>:
{
   2609e:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREC);
   260a0:	2205      	movs	r2, #5
   260a2:	f7ff fee6 	bl	25e72 <mqtt_tx_pub_msgs>
}
   260a6:	bd08      	pop	{r3, pc}

000260a8 <mqtt_tx_publish>:
{
   260a8:	b570      	push	{r4, r5, r6, lr}
   260aa:	b082      	sub	sp, #8
   260ac:	4605      	mov	r5, r0
   260ae:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   260b0:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   260b2:	481a      	ldr	r0, [pc, #104]	; (2611c <mqtt_tx_publish+0x74>)
   260b4:	f7f4 fd94 	bl	1abe0 <net_buf_alloc>
	if (data == NULL) {
   260b8:	b360      	cbz	r0, 26114 <mqtt_tx_publish+0x6c>
   260ba:	4604      	mov	r4, r0
	rc = mqtt_pack_publish(data->data, &data->len, data->size, msg);
   260bc:	4633      	mov	r3, r6
   260be:	89c2      	ldrh	r2, [r0, #14]
   260c0:	f100 010c 	add.w	r1, r0, #12
   260c4:	6880      	ldr	r0, [r0, #8]
   260c6:	f7ff fd47 	bl	25b58 <mqtt_pack_publish>
	if (rc != 0) {
   260ca:	b9c0      	cbnz	r0, 260fe <mqtt_tx_publish+0x56>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   260cc:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   260ce:	2100      	movs	r1, #0
   260d0:	4628      	mov	r0, r5
   260d2:	f000 fcef 	bl	26ab4 <net_app_get_net_pkt>
	if (tx == NULL) {
   260d6:	4606      	mov	r6, r0
   260d8:	b1c8      	cbz	r0, 2610e <mqtt_tx_publish+0x66>
	net_pkt_frag_add(tx, data);
   260da:	4621      	mov	r1, r4
   260dc:	f7f7 fb87 	bl	1d7ee <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   260e0:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   260e2:	2200      	movs	r2, #0
   260e4:	9201      	str	r2, [sp, #4]
   260e6:	9300      	str	r3, [sp, #0]
   260e8:	4613      	mov	r3, r2
   260ea:	4631      	mov	r1, r6
   260ec:	4628      	mov	r0, r5
   260ee:	f000 fc65 	bl	269bc <net_app_send_pkt>
	if (rc < 0) {
   260f2:	1e05      	subs	r5, r0, #0
   260f4:	da08      	bge.n	26108 <mqtt_tx_publish+0x60>
		net_pkt_unref(tx);
   260f6:	4630      	mov	r0, r6
   260f8:	f7f7 fb4f 	bl	1d79a <net_pkt_unref>
   260fc:	e004      	b.n	26108 <mqtt_tx_publish+0x60>
		rc = -EINVAL;
   260fe:	f06f 0515 	mvn.w	r5, #21
	net_pkt_frag_unref(data);
   26102:	4620      	mov	r0, r4
   26104:	f7f7 fb43 	bl	1d78e <net_pkt_frag_unref>
}
   26108:	4628      	mov	r0, r5
   2610a:	b002      	add	sp, #8
   2610c:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   2610e:	f06f 050b 	mvn.w	r5, #11
   26112:	e7f6      	b.n	26102 <mqtt_tx_publish+0x5a>
		return -ENOMEM;
   26114:	f06f 050b 	mvn.w	r5, #11
   26118:	e7f6      	b.n	26108 <mqtt_tx_publish+0x60>
   2611a:	bf00      	nop
   2611c:	2000d748 	.word	0x2000d748

00026120 <mqtt_rx_connack>:
{
   26120:	b570      	push	{r4, r5, r6, lr}
   26122:	b082      	sub	sp, #8
   26124:	4604      	mov	r4, r0
   26126:	4608      	mov	r0, r1
   26128:	4616      	mov	r6, r2
	rc = mqtt_unpack_connack(data, len, &session, &connect_rc);
   2612a:	f10d 0307 	add.w	r3, sp, #7
   2612e:	f10d 0206 	add.w	r2, sp, #6
   26132:	8989      	ldrh	r1, [r1, #12]
   26134:	6880      	ldr	r0, [r0, #8]
   26136:	f7ff fdda 	bl	25cee <mqtt_unpack_connack>
	if (rc != 0) {
   2613a:	b998      	cbnz	r0, 26164 <mqtt_rx_connack+0x44>
   2613c:	4605      	mov	r5, r0
	switch (clean_session) {
   2613e:	2e01      	cmp	r6, #1
   26140:	d113      	bne.n	2616a <mqtt_rx_connack+0x4a>
		if (/*session == 0 && */connect_rc == 0) {
   26142:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26146:	b99b      	cbnz	r3, 26170 <mqtt_rx_connack+0x50>
	ctx->connected = 1;
   26148:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   2614c:	f043 0302 	orr.w	r3, r3, #2
   26150:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->connect) {
   26154:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   26158:	b10b      	cbz	r3, 2615e <mqtt_rx_connack+0x3e>
		ctx->connect(ctx);
   2615a:	4620      	mov	r0, r4
   2615c:	4798      	blx	r3
}
   2615e:	4628      	mov	r0, r5
   26160:	b002      	add	sp, #8
   26162:	bd70      	pop	{r4, r5, r6, pc}
		rc = -EINVAL;
   26164:	f06f 0515 	mvn.w	r5, #21
   26168:	e7f9      	b.n	2615e <mqtt_rx_connack+0x3e>
		rc = -EINVAL;
   2616a:	f06f 0515 	mvn.w	r5, #21
   2616e:	e7f6      	b.n	2615e <mqtt_rx_connack+0x3e>
			rc = -EINVAL;
   26170:	f06f 0515 	mvn.w	r5, #21
	return rc;
   26174:	e7f3      	b.n	2615e <mqtt_rx_connack+0x3e>

00026176 <mqtt_rx_puback>:
{
   26176:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBACK);
   26178:	2204      	movs	r2, #4
   2617a:	f7ff fe0d 	bl	25d98 <mqtt_rx_pub_msgs>
}
   2617e:	bd08      	pop	{r3, pc}

00026180 <mqtt_rx_pubcomp>:
{
   26180:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBCOMP);
   26182:	2207      	movs	r2, #7
   26184:	f7ff fe08 	bl	25d98 <mqtt_rx_pub_msgs>
}
   26188:	bd08      	pop	{r3, pc}

0002618a <mqtt_rx_pubrec>:
{
   2618a:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREC);
   2618c:	2205      	movs	r2, #5
   2618e:	f7ff fe03 	bl	25d98 <mqtt_rx_pub_msgs>
}
   26192:	bd08      	pop	{r3, pc}

00026194 <mqtt_rx_pubrel>:
{
   26194:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREL);
   26196:	2206      	movs	r2, #6
   26198:	f7ff fdfe 	bl	25d98 <mqtt_rx_pub_msgs>
}
   2619c:	bd08      	pop	{r3, pc}

0002619e <mqtt_rx_pingresp>:
{
   2619e:	b508      	push	{r3, lr}
   261a0:	460b      	mov	r3, r1
	rc = mqtt_unpack_pingresp(rx->data, rx->len);
   261a2:	8989      	ldrh	r1, [r1, #12]
   261a4:	6898      	ldr	r0, [r3, #8]
   261a6:	f7ff fdf0 	bl	25d8a <mqtt_unpack_pingresp>
	if (rc != 0) {
   261aa:	4603      	mov	r3, r0
   261ac:	b908      	cbnz	r0, 261b2 <mqtt_rx_pingresp+0x14>
}
   261ae:	4618      	mov	r0, r3
   261b0:	bd08      	pop	{r3, pc}
		return -EINVAL;
   261b2:	f06f 0315 	mvn.w	r3, #21
   261b6:	e7fa      	b.n	261ae <mqtt_rx_pingresp+0x10>

000261b8 <mqtt_rx_suback>:
{
   261b8:	b530      	push	{r4, r5, lr}
   261ba:	b085      	sub	sp, #20
   261bc:	4604      	mov	r4, r0
	data = rx->data;
   261be:	6888      	ldr	r0, [r1, #8]
	len = rx->len;
   261c0:	8989      	ldrh	r1, [r1, #12]
	rc = mqtt_unpack_suback(data, len, &pkt_id, &items,
   261c2:	ab03      	add	r3, sp, #12
   261c4:	9301      	str	r3, [sp, #4]
   261c6:	2301      	movs	r3, #1
   261c8:	9300      	str	r3, [sp, #0]
   261ca:	f10d 0309 	add.w	r3, sp, #9
   261ce:	f10d 020a 	add.w	r2, sp, #10
   261d2:	f7ff fc31 	bl	25a38 <mqtt_unpack_suback>
	if (rc != 0) {
   261d6:	b988      	cbnz	r0, 261fc <mqtt_rx_suback+0x44>
	if (!ctx->subscribe) {
   261d8:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   261dc:	b18d      	cbz	r5, 26202 <mqtt_rx_suback+0x4a>
	rc = ctx->subscribe(ctx, pkt_id, items, suback_qos);
   261de:	ab03      	add	r3, sp, #12
   261e0:	f89d 2009 	ldrb.w	r2, [sp, #9]
   261e4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   261e8:	4620      	mov	r0, r4
   261ea:	47a8      	blx	r5
	if (rc != 0) {
   261ec:	4603      	mov	r3, r0
   261ee:	b910      	cbnz	r0, 261f6 <mqtt_rx_suback+0x3e>
}
   261f0:	4618      	mov	r0, r3
   261f2:	b005      	add	sp, #20
   261f4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   261f6:	f06f 0315 	mvn.w	r3, #21
   261fa:	e7f9      	b.n	261f0 <mqtt_rx_suback+0x38>
		return -EINVAL;
   261fc:	f06f 0315 	mvn.w	r3, #21
   26200:	e7f6      	b.n	261f0 <mqtt_rx_suback+0x38>
		return -EINVAL;
   26202:	f06f 0315 	mvn.w	r3, #21
   26206:	e7f3      	b.n	261f0 <mqtt_rx_suback+0x38>

00026208 <mqtt_rx_publish>:
{
   26208:	b530      	push	{r4, r5, lr}
   2620a:	b087      	sub	sp, #28
   2620c:	4604      	mov	r4, r0
   2620e:	460b      	mov	r3, r1
	rc = mqtt_unpack_publish(rx->data, rx->len, &msg);
   26210:	466a      	mov	r2, sp
   26212:	8989      	ldrh	r1, [r1, #12]
   26214:	6898      	ldr	r0, [r3, #8]
   26216:	f7ff fd0f 	bl	25c38 <mqtt_unpack_publish>
	if (rc != 0) {
   2621a:	bb00      	cbnz	r0, 2625e <mqtt_rx_publish+0x56>
	rc = ctx->publish_rx(ctx, &msg, msg.pkt_id, MQTT_PUBLISH);
   2621c:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   26220:	2303      	movs	r3, #3
   26222:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   26226:	4669      	mov	r1, sp
   26228:	4620      	mov	r0, r4
   2622a:	47a8      	blx	r5
	if (rc != 0) {
   2622c:	4602      	mov	r2, r0
   2622e:	b9c8      	cbnz	r0, 26264 <mqtt_rx_publish+0x5c>
	switch (msg.qos) {
   26230:	f89d 3001 	ldrb.w	r3, [sp, #1]
   26234:	2b01      	cmp	r3, #1
   26236:	d00b      	beq.n	26250 <mqtt_rx_publish+0x48>
   26238:	b13b      	cbz	r3, 2624a <mqtt_rx_publish+0x42>
   2623a:	2b02      	cmp	r3, #2
   2623c:	d115      	bne.n	2626a <mqtt_rx_publish+0x62>
		rc = mqtt_tx_pubrec(ctx, msg.pkt_id);
   2623e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   26242:	4620      	mov	r0, r4
   26244:	f7ff ff2b 	bl	2609e <mqtt_tx_pubrec>
   26248:	4602      	mov	r2, r0
}
   2624a:	4610      	mov	r0, r2
   2624c:	b007      	add	sp, #28
   2624e:	bd30      	pop	{r4, r5, pc}
		rc = mqtt_tx_puback(ctx, msg.pkt_id);
   26250:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   26254:	4620      	mov	r0, r4
   26256:	f7ff ff1d 	bl	26094 <mqtt_tx_puback>
   2625a:	4602      	mov	r2, r0
		break;
   2625c:	e7f5      	b.n	2624a <mqtt_rx_publish+0x42>
		return -EINVAL;
   2625e:	f06f 0215 	mvn.w	r2, #21
   26262:	e7f2      	b.n	2624a <mqtt_rx_publish+0x42>
		return -EINVAL;
   26264:	f06f 0215 	mvn.w	r2, #21
   26268:	e7ef      	b.n	2624a <mqtt_rx_publish+0x42>
		rc = -EINVAL;
   2626a:	f06f 0215 	mvn.w	r2, #21
   2626e:	e7ec      	b.n	2624a <mqtt_rx_publish+0x42>

00026270 <mqtt_parser>:
{
   26270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26272:	4606      	mov	r6, r0
	data = mqtt_linearize_packet(ctx, rx, MQTT_PUBLISHER_MIN_MSG_SIZE);
   26274:	2202      	movs	r2, #2
   26276:	f7ff fe5f 	bl	25f38 <mqtt_linearize_packet>
	if (!data) {
   2627a:	2800      	cmp	r0, #0
   2627c:	d057      	beq.n	2632e <mqtt_parser+0xbe>
   2627e:	4604      	mov	r4, r0
	pkt_type = MQTT_PACKET_TYPE(data->data[0]);
   26280:	6883      	ldr	r3, [r0, #8]
   26282:	781b      	ldrb	r3, [r3, #0]
   26284:	091b      	lsrs	r3, r3, #4
   26286:	b29f      	uxth	r7, r3
	switch (pkt_type) {
   26288:	3b02      	subs	r3, #2
   2628a:	2b0b      	cmp	r3, #11
   2628c:	d84c      	bhi.n	26328 <mqtt_parser+0xb8>
   2628e:	e8df f003 	tbb	[pc, r3]
   26292:	3906      	.short	0x3906
   26294:	2d3f2716 	.word	0x2d3f2716
   26298:	4b4b454b 	.word	0x4b4b454b
   2629c:	334b      	.short	0x334b
		if (!ctx->connected) {
   2629e:	f896 30a9 	ldrb.w	r3, [r6, #169]	; 0xa9
   262a2:	f013 0f02 	tst.w	r3, #2
   262a6:	d002      	beq.n	262ae <mqtt_parser+0x3e>
			rc = -EINVAL;
   262a8:	f06f 0515 	mvn.w	r5, #21
   262ac:	e00c      	b.n	262c8 <mqtt_parser+0x58>
			rc = mqtt_rx_connack(ctx, data, ctx->clean_session);
   262ae:	f003 0201 	and.w	r2, r3, #1
   262b2:	4601      	mov	r1, r0
   262b4:	4630      	mov	r0, r6
   262b6:	f7ff ff33 	bl	26120 <mqtt_rx_connack>
   262ba:	4605      	mov	r5, r0
   262bc:	e004      	b.n	262c8 <mqtt_parser+0x58>
		rc = mqtt_rx_puback(ctx, data);
   262be:	4601      	mov	r1, r0
   262c0:	4630      	mov	r0, r6
   262c2:	f7ff ff58 	bl	26176 <mqtt_rx_puback>
   262c6:	4605      	mov	r5, r0
	if (rc != 0 && ctx->malformed) {
   262c8:	b12d      	cbz	r5, 262d6 <mqtt_parser+0x66>
   262ca:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   262ce:	b113      	cbz	r3, 262d6 <mqtt_parser+0x66>
		ctx->malformed(ctx, pkt_type);
   262d0:	4639      	mov	r1, r7
   262d2:	4630      	mov	r0, r6
   262d4:	4798      	blx	r3
	net_pkt_frag_unref(data);
   262d6:	4620      	mov	r0, r4
   262d8:	f7f7 fa59 	bl	1d78e <net_pkt_frag_unref>
}
   262dc:	4628      	mov	r0, r5
   262de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = mqtt_rx_pubrec(ctx, data);
   262e0:	4601      	mov	r1, r0
   262e2:	4630      	mov	r0, r6
   262e4:	f7ff ff51 	bl	2618a <mqtt_rx_pubrec>
   262e8:	4605      	mov	r5, r0
		break;
   262ea:	e7ed      	b.n	262c8 <mqtt_parser+0x58>
		rc = mqtt_rx_pubcomp(ctx, data);
   262ec:	4601      	mov	r1, r0
   262ee:	4630      	mov	r0, r6
   262f0:	f7ff ff46 	bl	26180 <mqtt_rx_pubcomp>
   262f4:	4605      	mov	r5, r0
		break;
   262f6:	e7e7      	b.n	262c8 <mqtt_parser+0x58>
		rc = mqtt_rx_pingresp(ctx, data);
   262f8:	4601      	mov	r1, r0
   262fa:	4630      	mov	r0, r6
   262fc:	f7ff ff4f 	bl	2619e <mqtt_rx_pingresp>
   26300:	4605      	mov	r5, r0
		break;
   26302:	e7e1      	b.n	262c8 <mqtt_parser+0x58>
		rc = mqtt_rx_publish(ctx, data);
   26304:	4601      	mov	r1, r0
   26306:	4630      	mov	r0, r6
   26308:	f7ff ff7e 	bl	26208 <mqtt_rx_publish>
   2630c:	4605      	mov	r5, r0
		break;
   2630e:	e7db      	b.n	262c8 <mqtt_parser+0x58>
		rc = mqtt_rx_pubrel(ctx, data);
   26310:	4601      	mov	r1, r0
   26312:	4630      	mov	r0, r6
   26314:	f7ff ff3e 	bl	26194 <mqtt_rx_pubrel>
   26318:	4605      	mov	r5, r0
		break;
   2631a:	e7d5      	b.n	262c8 <mqtt_parser+0x58>
		rc = mqtt_rx_suback(ctx, data);
   2631c:	4601      	mov	r1, r0
   2631e:	4630      	mov	r0, r6
   26320:	f7ff ff4a 	bl	261b8 <mqtt_rx_suback>
   26324:	4605      	mov	r5, r0
		break;
   26326:	e7cf      	b.n	262c8 <mqtt_parser+0x58>
		rc = -EINVAL;
   26328:	f06f 0515 	mvn.w	r5, #21
   2632c:	e7cc      	b.n	262c8 <mqtt_parser+0x58>
		return -ENOMEM;
   2632e:	f06f 050b 	mvn.w	r5, #11
   26332:	e7d3      	b.n	262dc <mqtt_parser+0x6c>

00026334 <mqtt_connect>:
}

int mqtt_connect(struct mqtt_ctx *ctx)
{
   26334:	b530      	push	{r4, r5, lr}
   26336:	b087      	sub	sp, #28
	int rc = 0;

	if (!ctx) {
   26338:	b348      	cbz	r0, 2638e <mqtt_connect+0x5a>
   2633a:	4604      	mov	r4, r0
	}

	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
			NULL,
			NULL,
			ctx->peer_addr_str,
   2633c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
   26340:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
   26344:	6f81      	ldr	r1, [r0, #120]	; 0x78
					  const char *peer_addr_str,
					  u16_t peer_port,
					  s32_t timeout,
					  void *user_data)
{
	return net_app_init_client(ctx,
   26346:	9004      	str	r0, [sp, #16]
   26348:	9103      	str	r1, [sp, #12]
   2634a:	9202      	str	r2, [sp, #8]
   2634c:	9301      	str	r3, [sp, #4]
   2634e:	2300      	movs	r3, #0
   26350:	9300      	str	r3, [sp, #0]
   26352:	2206      	movs	r2, #6
   26354:	2101      	movs	r1, #1
   26356:	f000 f913 	bl	26580 <net_app_init_client>
			ctx->peer_port,
			ctx->net_init_timeout,
			ctx);
	if (rc < 0) {
   2635a:	1e05      	subs	r5, r0, #0
   2635c:	db0e      	blt.n	2637c <mqtt_connect+0x48>
		goto error_connect;
	}

	rc = net_app_set_cb(&ctx->net_app_ctx,
   2635e:	2300      	movs	r3, #0
   26360:	9300      	str	r3, [sp, #0]
   26362:	4a0c      	ldr	r2, [pc, #48]	; (26394 <mqtt_connect+0x60>)
   26364:	490c      	ldr	r1, [pc, #48]	; (26398 <mqtt_connect+0x64>)
   26366:	4620      	mov	r0, r4
   26368:	f000 fb11 	bl	2698e <net_app_set_cb>
			app_connected,
			app_recv,
			NULL,
			NULL);
	if (rc < 0) {
   2636c:	1e05      	subs	r5, r0, #0
   2636e:	db05      	blt.n	2637c <mqtt_connect+0x48>
	if (rc < 0) {
		goto error_connect;
	}
#endif

	rc = net_app_connect(&ctx->net_app_ctx, ctx->net_timeout);
   26370:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   26372:	4620      	mov	r0, r4
   26374:	f000 f9ec 	bl	26750 <net_app_connect>
	if (rc < 0) {
   26378:	1e05      	subs	r5, r0, #0
   2637a:	da05      	bge.n	26388 <mqtt_connect+0x54>

	return rc;

error_connect:
	/* clean net app context, so mqtt_connect() can be called repeatedly */
	net_app_close(&ctx->net_app_ctx);
   2637c:	4620      	mov	r0, r4
   2637e:	f000 fbbd 	bl	26afc <net_app_close>
	net_app_release(&ctx->net_app_ctx);
   26382:	4620      	mov	r0, r4
   26384:	f000 fab8 	bl	268f8 <net_app_release>

	return rc;
}
   26388:	4628      	mov	r0, r5
   2638a:	b007      	add	sp, #28
   2638c:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   2638e:	f06f 050d 	mvn.w	r5, #13
   26392:	e7f9      	b.n	26388 <mqtt_connect+0x54>
   26394:	00025e53 	.word	0x00025e53
   26398:	00025e51 	.word	0x00025e51

0002639c <mqtt_init>:

int mqtt_init(struct mqtt_ctx *ctx, enum mqtt_app app_type)
{
	/* So far, only clean session = 1 is supported */
	ctx->clean_session = 1;
   2639c:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
	ctx->connected = 0;
   263a0:	f043 0301 	orr.w	r3, r3, #1
   263a4:	f36f 0341 	bfc	r3, #1, #1
   263a8:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9

	ctx->app_type = app_type;
   263ac:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
	ctx->rcv = mqtt_parser;
   263b0:	4b02      	ldr	r3, [pc, #8]	; (263bc <mqtt_init+0x20>)
   263b2:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	k_sem_init(&ctx->tls_hs_wait, 0, 1);
#endif

	return 0;
}
   263b6:	2000      	movs	r0, #0
   263b8:	4770      	bx	lr
   263ba:	bf00      	nop
   263bc:	00026271 	.word	0x00026271

000263c0 <mqtt_close>:

int mqtt_close(struct mqtt_ctx *ctx)
{
	if (!ctx) {
   263c0:	b178      	cbz	r0, 263e2 <mqtt_close+0x22>
{
   263c2:	b510      	push	{r4, lr}
   263c4:	4604      	mov	r4, r0
		return -EFAULT;
	}

	if (ctx->net_app_ctx.is_init) {
   263c6:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   263ca:	f012 0f01 	tst.w	r2, #1
   263ce:	d101      	bne.n	263d4 <mqtt_close+0x14>
		net_app_close(&ctx->net_app_ctx);
		net_app_release(&ctx->net_app_ctx);
	}

	return 0;
   263d0:	2000      	movs	r0, #0
}
   263d2:	bd10      	pop	{r4, pc}
		net_app_close(&ctx->net_app_ctx);
   263d4:	f000 fb92 	bl	26afc <net_app_close>
		net_app_release(&ctx->net_app_ctx);
   263d8:	4620      	mov	r0, r4
   263da:	f000 fa8d 	bl	268f8 <net_app_release>
	return 0;
   263de:	2000      	movs	r0, #0
   263e0:	bd10      	pop	{r4, pc}
		return -EFAULT;
   263e2:	f06f 000d 	mvn.w	r0, #13
   263e6:	4770      	bx	lr

000263e8 <net_app_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_app_init(const char *app_info, u32_t flags, s32_t timeout)
{
   263e8:	b570      	push	{r4, r5, r6, lr}
   263ea:	460c      	mov	r4, r1
   263ec:	4616      	mov	r6, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   263ee:	f7f4 fff5 	bl	1b3dc <net_if_get_default>
	int loop = timeout / LOOP_DIVIDER;
   263f2:	4b20      	ldr	r3, [pc, #128]	; (26474 <net_app_init+0x8c>)
   263f4:	fb83 2306 	smull	r2, r3, r3, r6
   263f8:	17f5      	asrs	r5, r6, #31
   263fa:	ebc5 05a3 	rsb	r5, r5, r3, asr #2

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
   263fe:	b380      	cbz	r0, 26462 <net_app_init+0x7a>
		NET_ERR("No network interfaces");
		return -ENODEV;
	}

	if (flags & NET_APP_NEED_IPV6) {
   26400:	f014 0f02 	tst.w	r4, #2
   26404:	d114      	bne.n	26430 <net_app_init+0x48>
	int count = 0;
   26406:	2100      	movs	r1, #0
		count++;
	}

	if (flags & NET_APP_NEED_IPV4) {
   26408:	f014 0f04 	tst.w	r4, #4
   2640c:	d000      	beq.n	26410 <net_app_init+0x28>
		count++;
   2640e:	3101      	adds	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   26410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26414:	4818      	ldr	r0, [pc, #96]	; (26478 <net_app_init+0x90>)
   26416:	f002 ff93 	bl	29340 <_impl_k_sem_init>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   2641a:	2e00      	cmp	r6, #0
   2641c:	db0a      	blt.n	26434 <net_app_init+0x4c>
		count = -1;
	} else if (timeout == 0) {
   2641e:	b166      	cbz	r6, 2643a <net_app_init+0x52>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
   26420:	4a16      	ldr	r2, [pc, #88]	; (2647c <net_app_init+0x94>)
   26422:	fb82 3206 	smull	r3, r2, r2, r6
   26426:	17f3      	asrs	r3, r6, #31
   26428:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   2642c:	3301      	adds	r3, #1
   2642e:	e007      	b.n	26440 <net_app_init+0x58>
		count++;
   26430:	2101      	movs	r1, #1
   26432:	e7e9      	b.n	26408 <net_app_init+0x20>
		count = -1;
   26434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26438:	e002      	b.n	26440 <net_app_init+0x58>
		count = 0;
   2643a:	2300      	movs	r3, #0
   2643c:	e000      	b.n	26440 <net_app_init+0x58>
   2643e:	4623      	mov	r3, r4
	}

	/* Loop here until until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
   26440:	1e5c      	subs	r4, r3, #1
   26442:	b153      	cbz	r3, 2645a <net_app_init+0x72>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   26444:	4629      	mov	r1, r5
   26446:	480e      	ldr	r0, [pc, #56]	; (26480 <net_app_init+0x98>)
   26448:	f002 ff96 	bl	29378 <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   2644c:	2800      	cmp	r0, #0
   2644e:	d0f6      	beq.n	2643e <net_app_init+0x56>
	return sem->count;
   26450:	4b09      	ldr	r3, [pc, #36]	; (26478 <net_app_init+0x90>)
   26452:	689a      	ldr	r2, [r3, #8]
   26454:	4623      	mov	r3, r4
			if (!k_sem_count_get(&counter)) {
   26456:	2a00      	cmp	r2, #0
   26458:	d1f2      	bne.n	26440 <net_app_init+0x58>
				break;
			}
		}
	}

	if (!count && timeout) {
   2645a:	b92c      	cbnz	r4, 26468 <net_app_init+0x80>
   2645c:	b936      	cbnz	r6, 2646c <net_app_init+0x84>
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   2645e:	2000      	movs	r0, #0
   26460:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   26462:	f06f 0012 	mvn.w	r0, #18
   26466:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   26468:	2000      	movs	r0, #0
   2646a:	bd70      	pop	{r4, r5, r6, pc}
		return -ETIMEDOUT;
   2646c:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
   26470:	bd70      	pop	{r4, r5, r6, pc}
   26472:	bf00      	nop
   26474:	66666667 	.word	0x66666667
   26478:	20002a3c 	.word	0x20002a3c
   2647c:	10624dd3 	.word	0x10624dd3
   26480:	2000d698 	.word	0x2000d698

00026484 <init_net_app>:

#if defined(CONFIG_NET_APP_AUTO_INIT)
static int init_net_app(struct device *device)
{
   26484:	b508      	push	{r3, lr}
	ret = _net_app_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_app_bt_setup();
   26486:	f000 fb5b 	bl	26b40 <_net_app_bt_setup>
	if (IS_ENABLED(CONFIG_NET_APP_NEED_IPV4)) {
		flags |= NET_APP_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_app_init("Initializing network", flags,
   2648a:	f247 5230 	movw	r2, #30000	; 0x7530
   2648e:	2100      	movs	r1, #0
   26490:	4801      	ldr	r0, [pc, #4]	; (26498 <init_net_app+0x14>)
   26492:	f7ff ffa9 	bl	263e8 <net_app_init>
	if (ret < 0) {
		NET_ERR("Network initialization failed (%d)", ret);
	}

	return ret;
}
   26496:	bd08      	pop	{r3, pc}
   26498:	00032aa4 	.word	0x00032aa4

0002649c <try_resolve>:
		NET_ERR("Cannot resolve %s (%d)", peer_addr_str, ret);
	}

	return ret;
#endif
}
   2649c:	f06f 0015 	mvn.w	r0, #21
   264a0:	4770      	bx	lr

000264a2 <set_remote_addr>:
static int set_remote_addr(struct net_app_ctx *ctx,
			   struct sockaddr *remote_addr,
			   const char *peer_addr_str,
			   bool peer_addr_ok,
			   s32_t timeout)
{
   264a2:	b510      	push	{r4, lr}
   264a4:	4604      	mov	r4, r0
   264a6:	4610      	mov	r0, r2
	int ret;

	if (peer_addr_ok && remote_addr->sa_family == AF_INET6) {
   264a8:	461a      	mov	r2, r3
   264aa:	b113      	cbz	r3, 264b2 <set_remote_addr+0x10>
   264ac:	880b      	ldrh	r3, [r1, #0]
   264ae:	2b0a      	cmp	r3, #10
   264b0:	d00e      	beq.n	264d0 <set_remote_addr+0x2e>
#else
		return -EAFNOSUPPORT;
#endif
	}

	if (peer_addr_ok && remote_addr->sa_family == AF_INET) {
   264b2:	b112      	cbz	r2, 264ba <set_remote_addr+0x18>
   264b4:	880b      	ldrh	r3, [r1, #0]
   264b6:	2b02      	cmp	r3, #2
   264b8:	d012      	beq.n	264e0 <set_remote_addr+0x3e>
#endif
	}

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	/* Could be hostname, try DNS if configured. */
	ret = try_resolve(ctx, peer_addr_str, DNS_QUERY_TYPE_AAAA, timeout);
   264ba:	9b02      	ldr	r3, [sp, #8]
   264bc:	221c      	movs	r2, #28
   264be:	4601      	mov	r1, r0
   264c0:	4620      	mov	r0, r4
   264c2:	f7ff ffeb 	bl	2649c <try_resolve>
	if (ret < 0) {
   264c6:	2800      	cmp	r0, #0
   264c8:	db0c      	blt.n	264e4 <set_remote_addr+0x42>
		return ret;
	}

	ctx->default_ctx = &ctx->ipv6;
   264ca:	6364      	str	r4, [r4, #52]	; 0x34
	return 0;
   264cc:	2000      	movs	r0, #0
   264ce:	bd10      	pop	{r4, pc}
		memcpy(&ctx->ipv6.remote, remote_addr,
   264d0:	2218      	movs	r2, #24
   264d2:	f104 001c 	add.w	r0, r4, #28
   264d6:	f7d9 fef3 	bl	2c0 <memcpy>
		ctx->default_ctx = &ctx->ipv6;
   264da:	6364      	str	r4, [r4, #52]	; 0x34
		return 0;
   264dc:	2000      	movs	r0, #0
   264de:	bd10      	pop	{r4, pc}
		return -EAFNOSUPPORT;
   264e0:	f06f 0069 	mvn.w	r0, #105	; 0x69
	}

	ctx->default_ctx = &ctx->ipv4;
	return 0;
#endif /* IPV4 && IPV6 */
}
   264e4:	bd10      	pop	{r4, pc}

000264e6 <close_net_ctx>:
}

static void close_net_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	if (ctx->ipv6.ctx) {
   264e6:	6803      	ldr	r3, [r0, #0]
   264e8:	b13b      	cbz	r3, 264fa <close_net_ctx+0x14>
{
   264ea:	b510      	push	{r4, lr}
   264ec:	4604      	mov	r4, r0
		net_context_put(ctx->ipv6.ctx);
   264ee:	4618      	mov	r0, r3
   264f0:	f7f6 fcbe 	bl	1ce70 <net_context_put>
		ctx->ipv6.ctx = NULL;
   264f4:	2300      	movs	r3, #0
   264f6:	6023      	str	r3, [r4, #0]
   264f8:	bd10      	pop	{r4, pc}
   264fa:	4770      	bx	lr

000264fc <get_port_number>:
	if (peer_addr_str[0] == '[') {
   264fc:	7803      	ldrb	r3, [r0, #0]
   264fe:	2b5b      	cmp	r3, #91	; 0x5b
   26500:	d002      	beq.n	26508 <get_port_number+0xc>
   26502:	2300      	movs	r3, #0
   26504:	4619      	mov	r1, r3
   26506:	e019      	b.n	2653c <get_port_number+0x40>
{
   26508:	b570      	push	{r4, r5, r6, lr}
   2650a:	460d      	mov	r5, r1
   2650c:	4604      	mov	r4, r0
		ptr = strstr(peer_addr_str, "]:");
   2650e:	4913      	ldr	r1, [pc, #76]	; (2655c <get_port_number+0x60>)
   26510:	f004 fd8a 	bl	2b028 <strstr>
		if (!ptr) {
   26514:	4606      	mov	r6, r0
   26516:	b1f0      	cbz	r0, 26556 <get_port_number+0x5a>
		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
   26518:	1c61      	adds	r1, r4, #1
   2651a:	1a44      	subs	r4, r0, r1
   2651c:	2c2e      	cmp	r4, #46	; 0x2e
   2651e:	bfa8      	it	ge
   26520:	242e      	movge	r4, #46	; 0x2e
		memcpy(buf, peer_addr_str + 1, end);
   26522:	4622      	mov	r2, r4
   26524:	4628      	mov	r0, r5
   26526:	f7d9 fecb 	bl	2c0 <memcpy>
		buf[end] = '\0';
   2652a:	2100      	movs	r1, #0
   2652c:	5529      	strb	r1, [r5, r4]
		port = strtol(ptr + 2, NULL, 10);
   2652e:	220a      	movs	r2, #10
   26530:	1cb0      	adds	r0, r6, #2
   26532:	f004 ff19 	bl	2b368 <strtol>
   26536:	b280      	uxth	r0, r0
		return port;
   26538:	bd70      	pop	{r4, r5, r6, pc}
		i++;
   2653a:	3301      	adds	r3, #1
	while (peer_addr_str[i]) {
   2653c:	5cc2      	ldrb	r2, [r0, r3]
   2653e:	b11a      	cbz	r2, 26548 <get_port_number+0x4c>
		if (peer_addr_str[i] == ':') {
   26540:	2a3a      	cmp	r2, #58	; 0x3a
   26542:	d1fa      	bne.n	2653a <get_port_number+0x3e>
			count++;
   26544:	3101      	adds	r1, #1
   26546:	e7f8      	b.n	2653a <get_port_number+0x3e>
	if (count == 1) {
   26548:	2901      	cmp	r1, #1
   2654a:	d001      	beq.n	26550 <get_port_number+0x54>
	return 0;
   2654c:	2000      	movs	r0, #0
   2654e:	4770      	bx	lr
		return -EAFNOSUPPORT;
   26550:	f06f 0069 	mvn.w	r0, #105	; 0x69
   26554:	4770      	bx	lr
			return -EINVAL;
   26556:	f06f 0015 	mvn.w	r0, #21
   2655a:	bd70      	pop	{r4, r5, r6, pc}
   2655c:	00032abc 	.word	0x00032abc

00026560 <_app_connected>:
}

static void _app_connected(struct net_context *net_ctx,
			   int status,
			   void *user_data)
{
   26560:	b538      	push	{r3, r4, r5, lr}
   26562:	460d      	mov	r5, r1
   26564:	4614      	mov	r4, r2
	if (ctx->is_tls) {
		k_sem_give(&ctx->client.connect_wait);
	}
#endif

	net_context_recv(net_ctx, ctx->recv_cb, K_NO_WAIT, ctx);
   26566:	4613      	mov	r3, r2
   26568:	2200      	movs	r2, #0
   2656a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   2656c:	f7f6 ff88 	bl	1d480 <net_context_recv>
		 */
		NET_DBG("Postponing TLS connection cb for ctx %p", ctx);
	} else
#endif
	{
		if (ctx->cb.connect) {
   26570:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   26572:	b11b      	cbz	r3, 2657c <_app_connected+0x1c>
			ctx->cb.connect(ctx, status, ctx->user_data);
   26574:	6f22      	ldr	r2, [r4, #112]	; 0x70
   26576:	4629      	mov	r1, r5
   26578:	4620      	mov	r0, r4
   2657a:	4798      	blx	r3
   2657c:	bd38      	pop	{r3, r4, r5, pc}
	...

00026580 <net_app_init_client>:
{
   26580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26584:	b09a      	sub	sp, #104	; 0x68
   26586:	9e22      	ldr	r6, [sp, #136]	; 0x88
   26588:	f8bd 8090 	ldrh.w	r8, [sp, #144]	; 0x90
	if (!ctx) {
   2658c:	2800      	cmp	r0, #0
   2658e:	f000 80c9 	beq.w	26724 <net_app_init_client+0x1a4>
   26592:	4604      	mov	r4, r0
	if (ctx->is_init) {
   26594:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   26598:	f010 0f01 	tst.w	r0, #1
   2659c:	f040 80c5 	bne.w	2672a <net_app_init_client+0x1aa>
   265a0:	4699      	mov	r9, r3
   265a2:	4617      	mov	r7, r2
   265a4:	460d      	mov	r5, r1
	memset(&addr, 0, sizeof(addr));
   265a6:	2218      	movs	r2, #24
   265a8:	2100      	movs	r1, #0
   265aa:	a802      	add	r0, sp, #8
   265ac:	f004 f984 	bl	2a8b8 <memset>
	memset(&remote_addr, 0, sizeof(remote_addr));
   265b0:	2218      	movs	r2, #24
   265b2:	2100      	movs	r1, #0
   265b4:	a808      	add	r0, sp, #32
   265b6:	f004 f97f 	bl	2a8b8 <memset>
	if (peer_addr) {
   265ba:	2e00      	cmp	r6, #0
   265bc:	d03c      	beq.n	26638 <net_app_init_client+0xb8>
		memcpy(&remote_addr, peer_addr, sizeof(remote_addr));
   265be:	2218      	movs	r2, #24
   265c0:	4631      	mov	r1, r6
   265c2:	a808      	add	r0, sp, #32
   265c4:	f7d9 fe7c 	bl	2c0 <memcpy>
	int ret, addr_ok = false;
   265c8:	f04f 0a00 	mov.w	sl, #0
	if (client_addr) {
   265cc:	f1b9 0f00 	cmp.w	r9, #0
   265d0:	d05e      	beq.n	26690 <net_app_init_client+0x110>
		memcpy(&addr, client_addr, sizeof(addr));
   265d2:	2218      	movs	r2, #24
   265d4:	4649      	mov	r1, r9
   265d6:	a802      	add	r0, sp, #8
   265d8:	f7d9 fe72 	bl	2c0 <memcpy>
		if (addr.sa_family != remote_addr.sa_family) {
   265dc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   265e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   265e4:	429a      	cmp	r2, r3
   265e6:	f040 80a3 	bne.w	26730 <net_app_init_client+0x1b0>
	ctx->app_type = NET_APP_CLIENT;
   265ea:	2302      	movs	r3, #2
   265ec:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	ctx->user_data = user_data;
   265f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   265f2:	6723      	str	r3, [r4, #112]	; 0x70
	ctx->send_data = net_context_sendto;
   265f4:	4b54      	ldr	r3, [pc, #336]	; (26748 <net_app_init_client+0x1c8>)
   265f6:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->recv_cb = _net_app_received;
   265f8:	4b54      	ldr	r3, [pc, #336]	; (2674c <net_app_init_client+0x1cc>)
   265fa:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->proto = proto;
   265fc:	f884 7075 	strb.w	r7, [r4, #117]	; 0x75
	ctx->sock_type = sock_type;
   26600:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
	ret = _net_app_config_local_ctx(ctx, sock_type, proto, &addr);
   26604:	ab02      	add	r3, sp, #8
   26606:	463a      	mov	r2, r7
   26608:	4629      	mov	r1, r5
   2660a:	4620      	mov	r0, r4
   2660c:	f000 f949 	bl	268a2 <_net_app_config_local_ctx>
	if (ret < 0) {
   26610:	1e05      	subs	r5, r0, #0
   26612:	db42      	blt.n	2669a <net_app_init_client+0x11a>
	if (peer_addr) {
   26614:	2e00      	cmp	r6, #0
   26616:	d04c      	beq.n	266b2 <net_app_init_client+0x132>
		if (peer_addr->sa_family == AF_INET) {
   26618:	8833      	ldrh	r3, [r6, #0]
   2661a:	2b02      	cmp	r3, #2
   2661c:	f000 808b 	beq.w	26736 <net_app_init_client+0x1b6>
		} else if (peer_addr->sa_family == AF_INET6) {
   26620:	2b0a      	cmp	r3, #10
   26622:	d03e      	beq.n	266a2 <net_app_init_client+0x122>
	ctx->is_init = true;
   26624:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   26628:	f043 0301 	orr.w	r3, r3, #1
   2662c:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
}
   26630:	4628      	mov	r0, r5
   26632:	b01a      	add	sp, #104	; 0x68
   26634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (peer_addr_str) {
   26638:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2663a:	b333      	cbz	r3, 2668a <net_app_init_client+0x10a>
		ret = get_port_number(peer_addr_str, base_addr_str,
   2663c:	222f      	movs	r2, #47	; 0x2f
   2663e:	a90e      	add	r1, sp, #56	; 0x38
   26640:	4618      	mov	r0, r3
   26642:	f7ff ff5b 	bl	264fc <get_port_number>
		if (ret > 0) {
   26646:	2800      	cmp	r0, #0
   26648:	dd17      	ble.n	2667a <net_app_init_client+0xfa>
			peer_port = ret;
   2664a:	fa1f f880 	uxth.w	r8, r0
			base_peer_addr = base_addr_str;
   2664e:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
		addr_ok = net_ipaddr_parse(base_peer_addr,
   26652:	4650      	mov	r0, sl
   26654:	f7da f854 	bl	700 <strlen>
   26658:	aa08      	add	r2, sp, #32
   2665a:	4601      	mov	r1, r0
   2665c:	4650      	mov	r0, sl
   2665e:	f7f7 ff72 	bl	1e546 <net_ipaddr_parse>
   26662:	4682      	mov	sl, r0
		if (remote_addr.sa_family == AF_INET6) {
   26664:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   26668:	2b0a      	cmp	r3, #10
   2666a:	d1af      	bne.n	265cc <net_app_init_client+0x4c>
			net_sin6(&remote_addr)->sin6_port = htons(peer_port);
   2666c:	ea4f 2318 	mov.w	r3, r8, lsr #8
   26670:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
   26674:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
   26678:	e7a8      	b.n	265cc <net_app_init_client+0x4c>
			strncpy(base_addr_str, peer_addr_str,
   2667a:	222e      	movs	r2, #46	; 0x2e
   2667c:	9923      	ldr	r1, [sp, #140]	; 0x8c
   2667e:	a80e      	add	r0, sp, #56	; 0x38
   26680:	f004 fb36 	bl	2acf0 <strncpy>
	const char *base_peer_addr = peer_addr_str;
   26684:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
   26688:	e7e3      	b.n	26652 <net_app_init_client+0xd2>
	int ret, addr_ok = false;
   2668a:	f04f 0a00 	mov.w	sl, #0
   2668e:	e79d      	b.n	265cc <net_app_init_client+0x4c>
		addr.sa_family = remote_addr.sa_family;
   26690:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   26694:	f8ad 3008 	strh.w	r3, [sp, #8]
   26698:	e7a7      	b.n	265ea <net_app_init_client+0x6a>
		close_net_ctx(ctx);
   2669a:	4620      	mov	r0, r4
   2669c:	f7ff ff23 	bl	264e6 <close_net_ctx>
		goto fail;
   266a0:	e7c6      	b.n	26630 <net_app_init_client+0xb0>
			memcpy(&ctx->ipv6.remote, peer_addr,
   266a2:	2218      	movs	r2, #24
   266a4:	4631      	mov	r1, r6
   266a6:	f104 001c 	add.w	r0, r4, #28
   266aa:	f7d9 fe09 	bl	2c0 <memcpy>
			ctx->default_ctx = &ctx->ipv6;
   266ae:	6364      	str	r4, [r4, #52]	; 0x34
   266b0:	e7b8      	b.n	26624 <net_app_init_client+0xa4>
	if (!peer_addr_str) {
   266b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   266b4:	b363      	cbz	r3, 26710 <net_app_init_client+0x190>
	ret = set_remote_addr(ctx, &remote_addr, base_addr_str,
   266b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   266b8:	9300      	str	r3, [sp, #0]
   266ba:	f11a 0300 	adds.w	r3, sl, #0
   266be:	bf18      	it	ne
   266c0:	2301      	movne	r3, #1
   266c2:	aa0e      	add	r2, sp, #56	; 0x38
   266c4:	a908      	add	r1, sp, #32
   266c6:	4620      	mov	r0, r4
   266c8:	f7ff feeb 	bl	264a2 <set_remote_addr>
	if (ret < 0) {
   266cc:	1e05      	subs	r5, r0, #0
   266ce:	db25      	blt.n	2671c <net_app_init_client+0x19c>
	if (!ctx->default_ctx ||
   266d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   266d2:	b39b      	cbz	r3, 2673c <net_app_init_client+0x1bc>
	    ctx->default_ctx->remote.sa_family == AF_UNSPEC) {
   266d4:	8b9b      	ldrh	r3, [r3, #28]
	if (!ctx->default_ctx ||
   266d6:	b3a3      	cbz	r3, 26742 <net_app_init_client+0x1c2>
	if (ctx->ipv6.remote.sa_family == AF_INET6) {
   266d8:	8ba3      	ldrh	r3, [r4, #28]
   266da:	2b0a      	cmp	r3, #10
   266dc:	d1a2      	bne.n	26624 <net_app_init_client+0xa4>
		ctx->ipv6.local.sa_family = AF_INET6;
   266de:	4625      	mov	r5, r4
   266e0:	f825 3f04 	strh.w	r3, [r5, #4]!
		_net_app_set_local_addr(&ctx->ipv6.local, NULL,
   266e4:	88e2      	ldrh	r2, [r4, #6]
   266e6:	2100      	movs	r1, #0
   266e8:	4628      	mov	r0, r5
   266ea:	f000 f8a3 	bl	26834 <_net_app_set_local_addr>
		ret = _net_app_set_net_ctx(ctx, ctx->ipv6.ctx,
   266ee:	6821      	ldr	r1, [r4, #0]
   266f0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   266f4:	9300      	str	r3, [sp, #0]
   266f6:	2318      	movs	r3, #24
   266f8:	462a      	mov	r2, r5
   266fa:	4620      	mov	r0, r4
   266fc:	f000 f886 	bl	2680c <_net_app_set_net_ctx>
		if (ret < 0) {
   26700:	1e05      	subs	r5, r0, #0
   26702:	da8f      	bge.n	26624 <net_app_init_client+0xa4>
			net_context_put(ctx->ipv6.ctx);
   26704:	6820      	ldr	r0, [r4, #0]
   26706:	f7f6 fbb3 	bl	1ce70 <net_context_put>
			ctx->ipv6.ctx = NULL;
   2670a:	2300      	movs	r3, #0
   2670c:	6023      	str	r3, [r4, #0]
   2670e:	e789      	b.n	26624 <net_app_init_client+0xa4>
		close_net_ctx(ctx);
   26710:	4620      	mov	r0, r4
   26712:	f7ff fee8 	bl	264e6 <close_net_ctx>
		ret = -EINVAL;
   26716:	f06f 0515 	mvn.w	r5, #21
		goto fail;
   2671a:	e789      	b.n	26630 <net_app_init_client+0xb0>
		close_net_ctx(ctx);
   2671c:	4620      	mov	r0, r4
   2671e:	f7ff fee2 	bl	264e6 <close_net_ctx>
		goto fail;
   26722:	e785      	b.n	26630 <net_app_init_client+0xb0>
		return -EINVAL;
   26724:	f06f 0515 	mvn.w	r5, #21
   26728:	e782      	b.n	26630 <net_app_init_client+0xb0>
		return -EALREADY;
   2672a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2672e:	e77f      	b.n	26630 <net_app_init_client+0xb0>
			return -EINVAL;
   26730:	f06f 0515 	mvn.w	r5, #21
   26734:	e77c      	b.n	26630 <net_app_init_client+0xb0>
			return -EPROTONOSUPPORT;
   26736:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   2673a:	e779      	b.n	26630 <net_app_init_client+0xb0>
		return -EPFNOSUPPORT;
   2673c:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   26740:	e776      	b.n	26630 <net_app_init_client+0xb0>
   26742:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   26746:	e773      	b.n	26630 <net_app_init_client+0xb0>
   26748:	0001d43f 	.word	0x0001d43f
   2674c:	000267e3 	.word	0x000267e3

00026750 <net_app_connect>:
{
	struct net_context *net_ctx;
	bool started = false;
	int ret;

	if (!ctx) {
   26750:	b1d0      	cbz	r0, 26788 <net_app_connect+0x38>
{
   26752:	b570      	push	{r4, r5, r6, lr}
   26754:	b082      	sub	sp, #8
   26756:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   26758:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   2675c:	f012 0f01 	tst.w	r2, #1
   26760:	d015      	beq.n	2678e <net_app_connect+0x3e>
		return -ENOENT;
	}

	if (ctx->app_type != NET_APP_CLIENT) {
   26762:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   26766:	2a02      	cmp	r2, #2
   26768:	d114      	bne.n	26794 <net_app_connect+0x44>
   2676a:	460d      	mov	r5, r1
		return -EINVAL;
	}

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   2676c:	2100      	movs	r1, #0
   2676e:	f000 f8df 	bl	26930 <_net_app_select_net_ctx>
	if (!net_ctx) {
   26772:	b190      	cbz	r0, 2679a <net_app_connect+0x4a>
		}
	} else
#endif /* CONFIG_NET_APP_DTLS */
	{
		ret = net_context_connect(net_ctx,
					  &ctx->default_ctx->remote,
   26774:	6b61      	ldr	r1, [r4, #52]	; 0x34
		ret = net_context_connect(net_ctx,
   26776:	9401      	str	r4, [sp, #4]
   26778:	9500      	str	r5, [sp, #0]
   2677a:	4b09      	ldr	r3, [pc, #36]	; (267a0 <net_app_connect+0x50>)
   2677c:	2218      	movs	r2, #24
   2677e:	311c      	adds	r1, #28
   26780:	f7f6 fd4a 	bl	1d218 <net_context_connect>
		}
#endif
	}

	return ret;
}
   26784:	b002      	add	sp, #8
   26786:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   26788:	f06f 0015 	mvn.w	r0, #21
   2678c:	4770      	bx	lr
		return -ENOENT;
   2678e:	f06f 0001 	mvn.w	r0, #1
   26792:	e7f7      	b.n	26784 <net_app_connect+0x34>
		return -EINVAL;
   26794:	f06f 0015 	mvn.w	r0, #21
   26798:	e7f4      	b.n	26784 <net_app_connect+0x34>
		return -EAFNOSUPPORT;
   2679a:	f06f 0069 	mvn.w	r0, #105	; 0x69
   2679e:	e7f1      	b.n	26784 <net_app_connect+0x34>
   267a0:	00026561 	.word	0x00026561

000267a4 <select_default_ctx>:

#if defined(CONFIG_NET_APP_SERVER) || defined(CONFIG_NET_APP_CLIENT)
static void select_default_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	ctx->default_ctx = &ctx->ipv6;
   267a4:	6340      	str	r0, [r0, #52]	; 0x34
   267a6:	4770      	bx	lr

000267a8 <_app_send>:
	struct net_app_ctx *ctx = user_data;

	ARG_UNUSED(ctx);

#if defined(CONFIG_NET_APP_CLIENT)
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   267a8:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   267ac:	2802      	cmp	r0, #2
   267ae:	d000      	beq.n	267b2 <_app_send+0xa>
   267b0:	4770      	bx	lr
{
   267b2:	b510      	push	{r4, lr}
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   267b4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   267b6:	b114      	cbz	r4, 267be <_app_send+0x16>
   267b8:	4618      	mov	r0, r3
		ctx->cb.send(ctx, status, token, ctx->user_data);
   267ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   267bc:	47a0      	blx	r4
   267be:	bd10      	pop	{r4, pc}

000267c0 <setup_ipv6_ctx>:
{
   267c0:	b510      	push	{r4, lr}
   267c2:	4604      	mov	r4, r0
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   267c4:	4603      	mov	r3, r0
   267c6:	200a      	movs	r0, #10
   267c8:	f7f6 f8e6 	bl	1c998 <net_context_get>
	if (ret < 0) {
   267cc:	2800      	cmp	r0, #0
   267ce:	db05      	blt.n	267dc <setup_ipv6_ctx+0x1c>
	net_context_setup_pools(ctx->ipv6.ctx, ctx->tx_slab,
   267d0:	6823      	ldr	r3, [r4, #0]
   267d2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   267d4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
					   net_pkt_get_slab_func_t tx_slab,
					   net_pkt_get_pool_func_t data_pool)
{
	NET_ASSERT(context);

	context->tx_slab = tx_slab;
   267d6:	63d9      	str	r1, [r3, #60]	; 0x3c
	context->data_pool = data_pool;
   267d8:	641a      	str	r2, [r3, #64]	; 0x40
}
   267da:	bd10      	pop	{r4, pc}
		ctx->ipv6.ctx = NULL;
   267dc:	2300      	movs	r3, #0
   267de:	6023      	str	r3, [r4, #0]
		return ret;
   267e0:	bd10      	pop	{r4, pc}

000267e2 <_net_app_received>:
	if (ctx->app_type == NET_APP_CLIENT) {
   267e2:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   267e6:	2802      	cmp	r0, #2
   267e8:	d000      	beq.n	267ec <_net_app_received+0xa>
   267ea:	4770      	bx	lr
{
   267ec:	b538      	push	{r3, r4, r5, lr}
   267ee:	4618      	mov	r0, r3
   267f0:	4614      	mov	r4, r2
		if (!pkt) {
   267f2:	b121      	cbz	r1, 267fe <_net_app_received+0x1c>
		if (ctx->cb.recv) {
   267f4:	6c1d      	ldr	r5, [r3, #64]	; 0x40
   267f6:	b10d      	cbz	r5, 267fc <_net_app_received+0x1a>
			ctx->cb.recv(ctx, pkt, status, ctx->user_data);
   267f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   267fa:	47a8      	blx	r5
   267fc:	bd38      	pop	{r3, r4, r5, pc}
			if (ctx->cb.close) {
   267fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   26800:	2b00      	cmp	r3, #0
   26802:	d0fb      	beq.n	267fc <_net_app_received+0x1a>
				ctx->cb.close(ctx, status, ctx->user_data);
   26804:	6f02      	ldr	r2, [r0, #112]	; 0x70
   26806:	4621      	mov	r1, r4
   26808:	4798      	blx	r3
   2680a:	bd38      	pop	{r3, r4, r5, pc}

0002680c <_net_app_set_net_ctx>:
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   2680c:	b161      	cbz	r1, 26828 <_net_app_set_net_ctx+0x1c>
{
   2680e:	b510      	push	{r4, lr}
   26810:	4614      	mov	r4, r2
   26812:	4608      	mov	r0, r1
	return context->flags & NET_CONTEXT_IN_USE;
   26814:	f891 205d 	ldrb.w	r2, [r1, #93]	; 0x5d
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   26818:	f012 0f01 	tst.w	r2, #1
   2681c:	d007      	beq.n	2682e <_net_app_set_net_ctx+0x22>
   2681e:	461a      	mov	r2, r3
   26820:	4621      	mov	r1, r4
	ret = net_context_bind(net_ctx, addr, socklen);
   26822:	f7f6 fb67 	bl	1cef4 <net_context_bind>
	return ret;
   26826:	bd10      	pop	{r4, pc}
		return -ENOENT;
   26828:	f06f 0001 	mvn.w	r0, #1
   2682c:	4770      	bx	lr
   2682e:	f06f 0001 	mvn.w	r0, #1
}
   26832:	bd10      	pop	{r4, pc}

00026834 <_net_app_set_local_addr>:
{
   26834:	b570      	push	{r4, r5, r6, lr}
   26836:	b084      	sub	sp, #16
   26838:	4604      	mov	r4, r0
	if (myaddr) {
   2683a:	b169      	cbz	r1, 26858 <_net_app_set_local_addr+0x24>
		if (addr->sa_family == AF_INET) {
   2683c:	8800      	ldrh	r0, [r0, #0]
   2683e:	2802      	cmp	r0, #2
   26840:	d029      	beq.n	26896 <_net_app_set_local_addr+0x62>
		} else if (addr->sa_family == AF_INET6) {
   26842:	280a      	cmp	r0, #10
   26844:	d12a      	bne.n	2689c <_net_app_set_local_addr+0x68>
			net_sin6(addr)->sin6_port = htons(port);
   26846:	0a13      	lsrs	r3, r2, #8
   26848:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   2684c:	8062      	strh	r2, [r4, #2]
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
   2684e:	1d22      	adds	r2, r4, #4
   26850:	f7f7 fcc3 	bl	1e1da <net_addr_pton>
}
   26854:	b004      	add	sp, #16
   26856:	bd70      	pop	{r4, r5, r6, pc}
	if (addr->sa_family == AF_INET6) {
   26858:	8803      	ldrh	r3, [r0, #0]
   2685a:	2b0a      	cmp	r3, #10
   2685c:	d003      	beq.n	26866 <_net_app_set_local_addr+0x32>
	} else if (addr->sa_family == AF_INET) {
   2685e:	2b02      	cmp	r3, #2
   26860:	d016      	beq.n	26890 <_net_app_set_local_addr+0x5c>
	return 0;
   26862:	2000      	movs	r0, #0
   26864:	e7f6      	b.n	26854 <_net_app_set_local_addr+0x20>
		net_ipaddr_copy(&net_sin6(addr)->sin6_addr,
   26866:	f7f9 f959 	bl	1fb1c <net_ipv6_unspecified_address>
   2686a:	4601      	mov	r1, r0
   2686c:	2000      	movs	r0, #0
   2686e:	f7f5 faf9 	bl	1be64 <net_if_ipv6_select_src_addr>
   26872:	4603      	mov	r3, r0
   26874:	466d      	mov	r5, sp
   26876:	6800      	ldr	r0, [r0, #0]
   26878:	6859      	ldr	r1, [r3, #4]
   2687a:	689a      	ldr	r2, [r3, #8]
   2687c:	68db      	ldr	r3, [r3, #12]
   2687e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   26880:	466d      	mov	r5, sp
   26882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   26884:	6060      	str	r0, [r4, #4]
   26886:	60a1      	str	r1, [r4, #8]
   26888:	60e2      	str	r2, [r4, #12]
   2688a:	6123      	str	r3, [r4, #16]
	return 0;
   2688c:	2000      	movs	r0, #0
   2688e:	e7e1      	b.n	26854 <_net_app_set_local_addr+0x20>
		return -EPFNOSUPPORT;
   26890:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26894:	e7de      	b.n	26854 <_net_app_set_local_addr+0x20>
			return -EPFNOSUPPORT;
   26896:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   2689a:	e7db      	b.n	26854 <_net_app_set_local_addr+0x20>
			return -EAFNOSUPPORT;
   2689c:	f06f 0069 	mvn.w	r0, #105	; 0x69
   268a0:	e7d8      	b.n	26854 <_net_app_set_local_addr+0x20>

000268a2 <_net_app_config_local_ctx>:
{
   268a2:	b538      	push	{r3, r4, r5, lr}
   268a4:	4604      	mov	r4, r0
	if (!addr) {
   268a6:	b163      	cbz	r3, 268c2 <_net_app_config_local_ctx+0x20>
		if (addr->sa_family == AF_INET6) {
   268a8:	881b      	ldrh	r3, [r3, #0]
   268aa:	2b0a      	cmp	r3, #10
   268ac:	d015      	beq.n	268da <_net_app_config_local_ctx+0x38>
		} else if (addr->sa_family == AF_INET) {
   268ae:	2b02      	cmp	r3, #2
   268b0:	d01c      	beq.n	268ec <_net_app_config_local_ctx+0x4a>
		} else if (addr->sa_family == AF_UNSPEC) {
   268b2:	b9f3      	cbnz	r3, 268f2 <_net_app_config_local_ctx+0x50>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   268b4:	4620      	mov	r0, r4
   268b6:	f7ff ff83 	bl	267c0 <setup_ipv6_ctx>
   268ba:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   268bc:	6364      	str	r4, [r4, #52]	; 0x34
}
   268be:	4628      	mov	r0, r5
   268c0:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->ipv6.local.sa_family == AF_INET6 ||
   268c2:	8883      	ldrh	r3, [r0, #4]
   268c4:	2b0a      	cmp	r3, #10
   268c6:	d000      	beq.n	268ca <_net_app_config_local_ctx+0x28>
   268c8:	b96b      	cbnz	r3, 268e6 <_net_app_config_local_ctx+0x44>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   268ca:	4620      	mov	r0, r4
   268cc:	f7ff ff78 	bl	267c0 <setup_ipv6_ctx>
   268d0:	4605      	mov	r5, r0
		select_default_ctx(ctx);
   268d2:	4620      	mov	r0, r4
   268d4:	f7ff ff66 	bl	267a4 <select_default_ctx>
   268d8:	e7f1      	b.n	268be <_net_app_config_local_ctx+0x1c>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   268da:	4620      	mov	r0, r4
   268dc:	f7ff ff70 	bl	267c0 <setup_ipv6_ctx>
   268e0:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   268e2:	6364      	str	r4, [r4, #52]	; 0x34
   268e4:	e7eb      	b.n	268be <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   268e6:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   268ea:	e7e8      	b.n	268be <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   268ec:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   268f0:	e7e5      	b.n	268be <_net_app_config_local_ctx+0x1c>
			ret = -EINVAL;
   268f2:	f06f 0515 	mvn.w	r5, #21
	return ret;
   268f6:	e7e2      	b.n	268be <_net_app_config_local_ctx+0x1c>

000268f8 <net_app_release>:
	if (!ctx) {
   268f8:	b1a0      	cbz	r0, 26924 <net_app_release+0x2c>
{
   268fa:	b510      	push	{r4, lr}
   268fc:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   268fe:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   26902:	f013 0f01 	tst.w	r3, #1
   26906:	d010      	beq.n	2692a <net_app_release+0x32>
	if (ctx->ipv6.ctx) {
   26908:	6800      	ldr	r0, [r0, #0]
   2690a:	b118      	cbz	r0, 26914 <net_app_release+0x1c>
		net_context_put(ctx->ipv6.ctx);
   2690c:	f7f6 fab0 	bl	1ce70 <net_context_put>
		ctx->ipv6.ctx = NULL;
   26910:	2300      	movs	r3, #0
   26912:	6023      	str	r3, [r4, #0]
	ctx->is_init = false;
   26914:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   26918:	f36f 0300 	bfc	r3, #0, #1
   2691c:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	return 0;
   26920:	2000      	movs	r0, #0
   26922:	bd10      	pop	{r4, pc}
		return -EINVAL;
   26924:	f06f 0015 	mvn.w	r0, #21
   26928:	4770      	bx	lr
		return -ENOENT;
   2692a:	f06f 0001 	mvn.w	r0, #1
}
   2692e:	bd10      	pop	{r4, pc}

00026930 <_net_app_select_net_ctx>:
	if (ctx->app_type == NET_APP_CLIENT) {
   26930:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   26934:	2b02      	cmp	r3, #2
   26936:	d128      	bne.n	2698a <_net_app_select_net_ctx+0x5a>
	if (ctx->proto == IPPROTO_UDP) {
   26938:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   2693c:	2b11      	cmp	r3, #17
   2693e:	d009      	beq.n	26954 <_net_app_select_net_ctx+0x24>
		if (!dst) {
   26940:	b1c1      	cbz	r1, 26974 <_net_app_select_net_ctx+0x44>
			if (dst->sa_family == AF_INET) {
   26942:	880b      	ldrh	r3, [r1, #0]
   26944:	2b02      	cmp	r3, #2
   26946:	d01c      	beq.n	26982 <_net_app_select_net_ctx+0x52>
			if (dst->sa_family == AF_INET6) {
   26948:	2b0a      	cmp	r3, #10
   2694a:	d016      	beq.n	2697a <_net_app_select_net_ctx+0x4a>
			if (dst->sa_family == AF_UNSPEC) {
   2694c:	b9db      	cbnz	r3, 26986 <_net_app_select_net_ctx+0x56>
				return ctx->default_ctx->ctx;
   2694e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   26950:	6818      	ldr	r0, [r3, #0]
   26952:	4770      	bx	lr
		if (!dst) {
   26954:	b131      	cbz	r1, 26964 <_net_app_select_net_ctx+0x34>
			if (ctx->is_tls) {
   26956:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   2695a:	f013 0f02 	tst.w	r3, #2
   2695e:	d0f0      	beq.n	26942 <_net_app_select_net_ctx+0x12>
				return NULL;
   26960:	2000      	movs	r0, #0
   26962:	4770      	bx	lr
			if (ctx->is_tls) {
   26964:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   26968:	f013 0f02 	tst.w	r3, #2
   2696c:	d107      	bne.n	2697e <_net_app_select_net_ctx+0x4e>
				return ctx->default_ctx->ctx;
   2696e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   26970:	6818      	ldr	r0, [r3, #0]
   26972:	4770      	bx	lr
			return ctx->default_ctx->ctx;
   26974:	6b43      	ldr	r3, [r0, #52]	; 0x34
   26976:	6818      	ldr	r0, [r3, #0]
   26978:	4770      	bx	lr
				return ctx->ipv6.ctx;
   2697a:	6800      	ldr	r0, [r0, #0]
   2697c:	4770      	bx	lr
				return NULL;
   2697e:	2000      	movs	r0, #0
   26980:	4770      	bx	lr
				return NULL;
   26982:	2000      	movs	r0, #0
   26984:	4770      	bx	lr
	return NULL;
   26986:	2000      	movs	r0, #0
   26988:	4770      	bx	lr
	struct net_context *net_ctx = NULL;
   2698a:	2000      	movs	r0, #0
}
   2698c:	4770      	bx	lr

0002698e <net_app_set_cb>:
	if (!ctx) {
   2698e:	b170      	cbz	r0, 269ae <net_app_set_cb+0x20>
{
   26990:	b410      	push	{r4}
   26992:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   26994:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   26998:	f010 0f01 	tst.w	r0, #1
   2699c:	d00a      	beq.n	269b4 <net_app_set_cb+0x26>
	ctx->cb.connect = connect_cb;
   2699e:	63e1      	str	r1, [r4, #60]	; 0x3c
	ctx->cb.recv = recv_cb;
   269a0:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->cb.send = send_cb;
   269a2:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->cb.close = close_cb;
   269a4:	9b01      	ldr	r3, [sp, #4]
   269a6:	64a3      	str	r3, [r4, #72]	; 0x48
	return 0;
   269a8:	2000      	movs	r0, #0
}
   269aa:	bc10      	pop	{r4}
   269ac:	4770      	bx	lr
		return -EINVAL;
   269ae:	f06f 0015 	mvn.w	r0, #21
   269b2:	4770      	bx	lr
		return -ENOENT;
   269b4:	f06f 0001 	mvn.w	r0, #1
   269b8:	e7f7      	b.n	269aa <net_app_set_cb+0x1c>
	...

000269bc <net_app_send_pkt>:
		     s32_t timeout,
		     void *user_data_send)
{
	int ret;

	if (!ctx) {
   269bc:	2800      	cmp	r0, #0
   269be:	d064      	beq.n	26a8a <net_app_send_pkt+0xce>
{
   269c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   269c4:	b08a      	sub	sp, #40	; 0x28
   269c6:	460d      	mov	r5, r1
   269c8:	4616      	mov	r6, r2
   269ca:	461f      	mov	r7, r3
   269cc:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   269ce:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   269d2:	f013 0f01 	tst.w	r3, #1
   269d6:	d05b      	beq.n	26a90 <net_app_send_pkt+0xd4>
	return pkt->appdatalen;
   269d8:	8e08      	ldrh	r0, [r1, #48]	; 0x30
	 * will be put back just before sending the packet. Normally the
	 * data that is sent does not contain IP header, but if the caller
	 * replies the packet directly back, the IP header could be there
	 * at this point.
	 */
	if (net_pkt_appdatalen(pkt) > 0) {
   269da:	b188      	cbz	r0, 26a00 <net_app_send_pkt+0x44>
		int header_len;

		header_len = net_buf_frags_len(pkt->frags) -
   269dc:	f8d1 e008 	ldr.w	lr, [r1, #8]
   269e0:	4673      	mov	r3, lr
	size_t bytes = 0;
   269e2:	2100      	movs	r1, #0
   269e4:	e002      	b.n	269ec <net_app_send_pkt+0x30>
		bytes += buf->len;
   269e6:	899a      	ldrh	r2, [r3, #12]
   269e8:	4411      	add	r1, r2
		buf = buf->frags;
   269ea:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   269ec:	2b00      	cmp	r3, #0
   269ee:	d1fa      	bne.n	269e6 <net_app_send_pkt+0x2a>
   269f0:	1a09      	subs	r1, r1, r0
			net_pkt_appdatalen(pkt);
		if (header_len > 0) {
   269f2:	2900      	cmp	r1, #0
   269f4:	dd0d      	ble.n	26a12 <net_app_send_pkt+0x56>
			net_buf_pull(pkt->frags, header_len);
   269f6:	f10e 0008 	add.w	r0, lr, #8
   269fa:	f7f4 f9f8 	bl	1adee <net_buf_simple_pull>
   269fe:	e008      	b.n	26a12 <net_app_send_pkt+0x56>
		}
	} else {
		net_pkt_set_appdatalen(pkt, net_buf_frags_len(pkt->frags));
   26a00:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   26a02:	2200      	movs	r2, #0
   26a04:	e002      	b.n	26a0c <net_app_send_pkt+0x50>
		bytes += buf->len;
   26a06:	8999      	ldrh	r1, [r3, #12]
   26a08:	440a      	add	r2, r1
		buf = buf->frags;
   26a0a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   26a0c:	2b00      	cmp	r3, #0
   26a0e:	d1fa      	bne.n	26a06 <net_app_send_pkt+0x4a>
	pkt->appdatalen = len;
   26a10:	862a      	strh	r2, [r5, #48]	; 0x30
	}

	if (ctx->proto == IPPROTO_UDP) {
   26a12:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   26a16:	2b11      	cmp	r3, #17
   26a18:	d00e      	beq.n	26a38 <net_app_send_pkt+0x7c>
				}
			}
		}
	}

	ret = ctx->send_data(pkt, dst, dst_len, _app_send, timeout,
   26a1a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
   26a1e:	9402      	str	r4, [sp, #8]
   26a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
   26a22:	9301      	str	r3, [sp, #4]
   26a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
   26a26:	9300      	str	r3, [sp, #0]
   26a28:	4b21      	ldr	r3, [pc, #132]	; (26ab0 <net_app_send_pkt+0xf4>)
   26a2a:	463a      	mov	r2, r7
   26a2c:	4631      	mov	r1, r6
   26a2e:	4628      	mov	r0, r5
   26a30:	47c0      	blx	r8
	if (ret < 0) {
		NET_DBG("Cannot send to peer (%d)", ret);
	}

	return ret;
}
   26a32:	b00a      	add	sp, #40	; 0x28
   26a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!dst) {
   26a38:	b1de      	cbz	r6, 26a72 <net_app_send_pkt+0xb6>
	return pkt->family;
   26a3a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   26a3e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   26a42:	2b02      	cmp	r3, #2
   26a44:	d02d      	beq.n	26aa2 <net_app_send_pkt+0xe6>
				if (net_pkt_family(pkt) == AF_INET6) {
   26a46:	2b0a      	cmp	r3, #10
   26a48:	d12e      	bne.n	26aa8 <net_app_send_pkt+0xec>
					net_ipaddr_copy(
   26a4a:	af04      	add	r7, sp, #16
   26a4c:	6830      	ldr	r0, [r6, #0]
   26a4e:	6871      	ldr	r1, [r6, #4]
   26a50:	68b2      	ldr	r2, [r6, #8]
   26a52:	68f3      	ldr	r3, [r6, #12]
   26a54:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   26a56:	6930      	ldr	r0, [r6, #16]
   26a58:	6971      	ldr	r1, [r6, #20]
   26a5a:	c703      	stmia	r7!, {r0, r1}
   26a5c:	af04      	add	r7, sp, #16
   26a5e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   26a60:	61e0      	str	r0, [r4, #28]
   26a62:	6221      	str	r1, [r4, #32]
   26a64:	6262      	str	r2, [r4, #36]	; 0x24
   26a66:	62a3      	str	r3, [r4, #40]	; 0x28
   26a68:	cf03      	ldmia	r7!, {r0, r1}
   26a6a:	62e0      	str	r0, [r4, #44]	; 0x2c
   26a6c:	6321      	str	r1, [r4, #48]	; 0x30
					dst_len = sizeof(struct sockaddr_in6);
   26a6e:	2718      	movs	r7, #24
   26a70:	e7d3      	b.n	26a1a <net_app_send_pkt+0x5e>
   26a72:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   26a76:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   26a7a:	2b02      	cmp	r3, #2
   26a7c:	d00b      	beq.n	26a96 <net_app_send_pkt+0xda>
				if (net_pkt_family(pkt) == AF_INET6) {
   26a7e:	2b0a      	cmp	r3, #10
   26a80:	d10c      	bne.n	26a9c <net_app_send_pkt+0xe0>
					dst = &ctx->ipv6.remote;
   26a82:	f104 061c 	add.w	r6, r4, #28
					dst_len = sizeof(struct sockaddr_in6);
   26a86:	2718      	movs	r7, #24
   26a88:	e7c7      	b.n	26a1a <net_app_send_pkt+0x5e>
		return -EINVAL;
   26a8a:	f06f 0015 	mvn.w	r0, #21
   26a8e:	4770      	bx	lr
		return -ENOENT;
   26a90:	f06f 0001 	mvn.w	r0, #1
   26a94:	e7cd      	b.n	26a32 <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   26a96:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26a9a:	e7ca      	b.n	26a32 <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   26a9c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26aa0:	e7c7      	b.n	26a32 <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   26aa2:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26aa6:	e7c4      	b.n	26a32 <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   26aa8:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26aac:	e7c1      	b.n	26a32 <net_app_send_pkt+0x76>
   26aae:	bf00      	nop
   26ab0:	000267a9 	.word	0x000267a9

00026ab4 <net_app_get_net_pkt>:
}

struct net_pkt *net_app_get_net_pkt(struct net_app_ctx *ctx,
				    sa_family_t family,
				    s32_t timeout)
{
   26ab4:	b510      	push	{r4, lr}
   26ab6:	b086      	sub	sp, #24
	struct net_context *net_ctx;
	struct sockaddr dst = { 0 };
   26ab8:	2300      	movs	r3, #0
   26aba:	9300      	str	r3, [sp, #0]
   26abc:	9301      	str	r3, [sp, #4]
   26abe:	9302      	str	r3, [sp, #8]
   26ac0:	9303      	str	r3, [sp, #12]
   26ac2:	9304      	str	r3, [sp, #16]
   26ac4:	9305      	str	r3, [sp, #20]

	if (!ctx) {
   26ac6:	b198      	cbz	r0, 26af0 <net_app_get_net_pkt+0x3c>
   26ac8:	4603      	mov	r3, r0
		return NULL;
	}

	if (!ctx->is_init) {
   26aca:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   26ace:	f010 0f01 	tst.w	r0, #1
   26ad2:	d00f      	beq.n	26af4 <net_app_get_net_pkt+0x40>
   26ad4:	4618      	mov	r0, r3
   26ad6:	4614      	mov	r4, r2
   26ad8:	460b      	mov	r3, r1
		return NULL;
	}

	dst.sa_family = family;
   26ada:	a906      	add	r1, sp, #24
   26adc:	f821 3d18 	strh.w	r3, [r1, #-24]!

	net_ctx = _net_app_select_net_ctx(ctx, &dst);
   26ae0:	f7ff ff26 	bl	26930 <_net_app_select_net_ctx>
	if (!net_ctx) {
   26ae4:	b140      	cbz	r0, 26af8 <net_app_get_net_pkt+0x44>
		return NULL;
	}

	return net_pkt_get_tx(net_ctx, timeout);
   26ae6:	4621      	mov	r1, r4
   26ae8:	f7f6 fe24 	bl	1d734 <net_pkt_get_tx>
}
   26aec:	b006      	add	sp, #24
   26aee:	bd10      	pop	{r4, pc}
		return NULL;
   26af0:	2000      	movs	r0, #0
   26af2:	e7fb      	b.n	26aec <net_app_get_net_pkt+0x38>
		return NULL;
   26af4:	2000      	movs	r0, #0
   26af6:	e7f9      	b.n	26aec <net_app_get_net_pkt+0x38>
		return NULL;
   26af8:	2000      	movs	r0, #0
   26afa:	e7f7      	b.n	26aec <net_app_get_net_pkt+0x38>

00026afc <net_app_close>:

int net_app_close(struct net_app_ctx *ctx)
{
	struct net_context *net_ctx;

	if (!ctx) {
   26afc:	b1c0      	cbz	r0, 26b30 <net_app_close+0x34>
{
   26afe:	b538      	push	{r3, r4, r5, lr}
   26b00:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   26b02:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   26b06:	f013 0f01 	tst.w	r3, #1
   26b0a:	d014      	beq.n	26b36 <net_app_close+0x3a>
		ctx->tls.close_requested = true;
		return -EINPROGRESS;
	}
#endif

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   26b0c:	2100      	movs	r1, #0
   26b0e:	f7ff ff0f 	bl	26930 <_net_app_select_net_ctx>
   26b12:	4605      	mov	r5, r0

	if (ctx->cb.close) {
   26b14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   26b16:	b11b      	cbz	r3, 26b20 <net_app_close+0x24>
		ctx->cb.close(ctx, 0, ctx->user_data);
   26b18:	6f22      	ldr	r2, [r4, #112]	; 0x70
   26b1a:	2100      	movs	r1, #0
   26b1c:	4620      	mov	r0, r4
   26b1e:	4798      	blx	r3
			}
		}
	}
#endif

	if (net_ctx) {
   26b20:	b165      	cbz	r5, 26b3c <net_app_close+0x40>
		net_ctx->net_app = NULL;
   26b22:	2400      	movs	r4, #0
   26b24:	666c      	str	r4, [r5, #100]	; 0x64
		net_context_put(net_ctx);
   26b26:	4628      	mov	r0, r5
   26b28:	f7f6 f9a2 	bl	1ce70 <net_context_put>
	}

	return 0;
   26b2c:	4620      	mov	r0, r4
   26b2e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   26b30:	f06f 0015 	mvn.w	r0, #21
   26b34:	4770      	bx	lr
		return -ENOENT;
   26b36:	f06f 0001 	mvn.w	r0, #1
   26b3a:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   26b3c:	2000      	movs	r0, #0
}
   26b3e:	bd38      	pop	{r3, r4, r5, pc}

00026b40 <_net_app_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_app_bt_setup(void)
{
   26b40:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   26b42:	2000      	movs	r0, #0
   26b44:	f7df fdea 	bl	671c <bt_enable>
	if (err < 0 && err != -EALREADY) {
   26b48:	1e03      	subs	r3, r0, #0
   26b4a:	db14      	blt.n	26b76 <_net_app_bt_setup+0x36>
		return err;
	}

	dev = device_get_binding("net_bt");
   26b4c:	4810      	ldr	r0, [pc, #64]	; (26b90 <_net_app_bt_setup+0x50>)
   26b4e:	f001 f939 	bl	27dc4 <device_get_binding>
	if (!dev) {
   26b52:	b1b8      	cbz	r0, 26b84 <_net_app_bt_setup+0x44>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   26b54:	f7f4 fc30 	bl	1b3b8 <net_if_lookup_by_dev>
	if (!iface) {
   26b58:	4604      	mov	r4, r0
   26b5a:	b1b0      	cbz	r0, 26b8a <_net_app_bt_setup+0x4a>
		return -EINVAL;
	}

#if defined(CONFIG_NET_APP_BT_NODE)
	bt_gatt_service_register(&ipss_svc);
   26b5c:	480d      	ldr	r0, [pc, #52]	; (26b94 <_net_app_bt_setup+0x54>)
   26b5e:	f7e3 fcf7 	bl	a550 <bt_gatt_service_register>

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   26b62:	2303      	movs	r3, #3
   26b64:	4a0c      	ldr	r2, [pc, #48]	; (26b98 <_net_app_bt_setup+0x58>)
   26b66:	4621      	mov	r1, r4
   26b68:	480c      	ldr	r0, [pc, #48]	; (26b9c <_net_app_bt_setup+0x5c>)
   26b6a:	f7f7 fe6b 	bl	1e844 <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   26b6e:	4603      	mov	r3, r0
   26b70:	b928      	cbnz	r0, 26b7e <_net_app_bt_setup+0x3e>
		return -EINVAL;
	}
#endif

	return 0;
}
   26b72:	4618      	mov	r0, r3
   26b74:	bd10      	pop	{r4, pc}
	if (err < 0 && err != -EALREADY) {
   26b76:	f113 0f78 	cmn.w	r3, #120	; 0x78
   26b7a:	d1fa      	bne.n	26b72 <_net_app_bt_setup+0x32>
   26b7c:	e7e6      	b.n	26b4c <_net_app_bt_setup+0xc>
		return -EINVAL;
   26b7e:	f06f 0315 	mvn.w	r3, #21
   26b82:	e7f6      	b.n	26b72 <_net_app_bt_setup+0x32>
		return -ENODEV;
   26b84:	f06f 0312 	mvn.w	r3, #18
   26b88:	e7f3      	b.n	26b72 <_net_app_bt_setup+0x32>
		return -EINVAL;
   26b8a:	f06f 0315 	mvn.w	r3, #21
   26b8e:	e7f0      	b.n	26b72 <_net_app_bt_setup+0x32>
   26b90:	00031798 	.word	0x00031798
   26b94:	2000cb0c 	.word	0x2000cb0c
   26b98:	00031bc0 	.word	0x00031bc0
   26b9c:	61550001 	.word	0x61550001

00026ba0 <shell_run>:
#include <init.h>

#define SHELL_PROMPT "shell> "

int shell_run(struct device *dev)
{
   26ba0:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	shell_init(SHELL_PROMPT);
   26ba2:	4802      	ldr	r0, [pc, #8]	; (26bac <shell_run+0xc>)
   26ba4:	f000 fbbe 	bl	27324 <shell_init>
	return 0;
}
   26ba8:	2000      	movs	r0, #0
   26baa:	bd08      	pop	{r3, pc}
   26bac:	00032ac0 	.word	0x00032ac0

00026bb0 <get_prompt>:

static shell_cmd_function_t app_cmd_handler;
static shell_prompt_function_t app_prompt_handler;

static const char *get_prompt(void)
{
   26bb0:	b508      	push	{r3, lr}
	if (app_prompt_handler) {
   26bb2:	4b0f      	ldr	r3, [pc, #60]	; (26bf0 <get_prompt+0x40>)
   26bb4:	681b      	ldr	r3, [r3, #0]
   26bb6:	b123      	cbz	r3, 26bc2 <get_prompt+0x12>
		const char *str;

		str = app_prompt_handler();
   26bb8:	4798      	blx	r3
		if (str) {
   26bba:	4603      	mov	r3, r0
   26bbc:	b108      	cbz	r0, 26bc2 <get_prompt+0x12>

		return default_module_prompt;
	}

	return prompt;
}
   26bbe:	4618      	mov	r0, r3
   26bc0:	bd08      	pop	{r3, pc}
	if (default_module != -1) {
   26bc2:	4b0c      	ldr	r3, [pc, #48]	; (26bf4 <get_prompt+0x44>)
   26bc4:	681b      	ldr	r3, [r3, #0]
   26bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26bca:	d00c      	beq.n	26be6 <get_prompt+0x36>
		if (__shell_cmd_start[default_module].prompt) {
   26bcc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26bd0:	009a      	lsls	r2, r3, #2
   26bd2:	4b09      	ldr	r3, [pc, #36]	; (26bf8 <get_prompt+0x48>)
   26bd4:	4413      	add	r3, r2
   26bd6:	689b      	ldr	r3, [r3, #8]
   26bd8:	b143      	cbz	r3, 26bec <get_prompt+0x3c>
			ret = __shell_cmd_start[default_module].prompt();
   26bda:	4798      	blx	r3
			if (ret) {
   26bdc:	4603      	mov	r3, r0
   26bde:	2800      	cmp	r0, #0
   26be0:	d1ed      	bne.n	26bbe <get_prompt+0xe>
		return default_module_prompt;
   26be2:	4b06      	ldr	r3, [pc, #24]	; (26bfc <get_prompt+0x4c>)
   26be4:	e7eb      	b.n	26bbe <get_prompt+0xe>
	return prompt;
   26be6:	4b06      	ldr	r3, [pc, #24]	; (26c00 <get_prompt+0x50>)
   26be8:	681b      	ldr	r3, [r3, #0]
   26bea:	e7e8      	b.n	26bbe <get_prompt+0xe>
		return default_module_prompt;
   26bec:	4b03      	ldr	r3, [pc, #12]	; (26bfc <get_prompt+0x4c>)
   26bee:	e7e6      	b.n	26bbe <get_prompt+0xe>
   26bf0:	20002a58 	.word	0x20002a58
   26bf4:	2000cb18 	.word	0x2000cb18
   26bf8:	2000d5dc 	.word	0x2000d5dc
   26bfc:	20002c08 	.word	0x20002c08
   26c00:	20002c20 	.word	0x20002c20

00026c04 <exit_module>:
	return set_default_module(argv[1]);
}

static int exit_module(int argc, char *argv[])
{
	if (argc == 1) {
   26c04:	2801      	cmp	r0, #1
   26c06:	d001      	beq.n	26c0c <exit_module+0x8>
		default_module = -1;
	}

	return 0;
}
   26c08:	2000      	movs	r0, #0
   26c0a:	4770      	bx	lr
		default_module = -1;
   26c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26c10:	4b01      	ldr	r3, [pc, #4]	; (26c18 <exit_module+0x14>)
   26c12:	601a      	str	r2, [r3, #0]
   26c14:	e7f8      	b.n	26c08 <exit_module+0x4>
   26c16:	bf00      	nop
   26c18:	2000cb18 	.word	0x2000cb18

00026c1c <print_module_commands>:
{
   26c1c:	b538      	push	{r3, r4, r5, lr}
   26c1e:	4605      	mov	r5, r0
	printk("help\n");
   26c20:	480a      	ldr	r0, [pc, #40]	; (26c4c <print_module_commands+0x30>)
   26c22:	f7dc f997 	bl	2f54 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26c26:	2400      	movs	r4, #0
   26c28:	e003      	b.n	26c32 <print_module_commands+0x16>
		printk("%s\n", shell_module->commands[i].cmd_name);
   26c2a:	4809      	ldr	r0, [pc, #36]	; (26c50 <print_module_commands+0x34>)
   26c2c:	f7dc f992 	bl	2f54 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26c30:	3401      	adds	r4, #1
   26c32:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26c36:	009a      	lsls	r2, r3, #2
   26c38:	4b06      	ldr	r3, [pc, #24]	; (26c54 <print_module_commands+0x38>)
   26c3a:	4413      	add	r3, r2
   26c3c:	6859      	ldr	r1, [r3, #4]
   26c3e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26c42:	0093      	lsls	r3, r2, #2
   26c44:	58c9      	ldr	r1, [r1, r3]
   26c46:	2900      	cmp	r1, #0
   26c48:	d1ef      	bne.n	26c2a <print_module_commands+0xe>
}
   26c4a:	bd38      	pop	{r3, r4, r5, pc}
   26c4c:	00032b7c 	.word	0x00032b7c
   26c50:	00031d98 	.word	0x00031d98
   26c54:	2000d5dc 	.word	0x2000d5dc

00026c58 <line2argv>:
{
   26c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c5a:	4604      	mov	r4, r0
   26c5c:	460e      	mov	r6, r1
   26c5e:	4617      	mov	r7, r2
	if (!strlen(str)) {
   26c60:	f7d9 fd4e 	bl	700 <strlen>
   26c64:	b918      	cbnz	r0, 26c6e <line2argv+0x16>
   26c66:	4605      	mov	r5, r0
}
   26c68:	4628      	mov	r0, r5
   26c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		str++;
   26c6c:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   26c6e:	7823      	ldrb	r3, [r4, #0]
   26c70:	2b20      	cmp	r3, #32
   26c72:	d0fb      	beq.n	26c6c <line2argv+0x14>
	if (!*str) {
   26c74:	b30b      	cbz	r3, 26cba <line2argv+0x62>
	argv[argc++] = str;
   26c76:	6034      	str	r4, [r6, #0]
   26c78:	2501      	movs	r5, #1
	while ((str = strchr(str, ' '))) {
   26c7a:	e00a      	b.n	26c92 <line2argv+0x3a>
			str++;
   26c7c:	3401      	adds	r4, #1
		while (*str && *str == ' ') {
   26c7e:	7823      	ldrb	r3, [r4, #0]
   26c80:	2b20      	cmp	r3, #32
   26c82:	d0fb      	beq.n	26c7c <line2argv+0x24>
		if (!*str) {
   26c84:	b1ab      	cbz	r3, 26cb2 <line2argv+0x5a>
		argv[argc++] = str;
   26c86:	1c6b      	adds	r3, r5, #1
   26c88:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
		if (argc == size) {
   26c8c:	42bb      	cmp	r3, r7
   26c8e:	d00a      	beq.n	26ca6 <line2argv+0x4e>
		argv[argc++] = str;
   26c90:	461d      	mov	r5, r3
	while ((str = strchr(str, ' '))) {
   26c92:	2120      	movs	r1, #32
   26c94:	4620      	mov	r0, r4
   26c96:	f003 ff07 	bl	2aaa8 <strchr>
   26c9a:	4603      	mov	r3, r0
   26c9c:	b148      	cbz	r0, 26cb2 <line2argv+0x5a>
		*str++ = '\0';
   26c9e:	1c5c      	adds	r4, r3, #1
   26ca0:	2200      	movs	r2, #0
   26ca2:	701a      	strb	r2, [r3, #0]
		while (*str && *str == ' ') {
   26ca4:	e7eb      	b.n	26c7e <line2argv+0x26>
			printk("Too many parameters (max %zu)\n", size - 1);
   26ca6:	1e79      	subs	r1, r7, #1
   26ca8:	4805      	ldr	r0, [pc, #20]	; (26cc0 <line2argv+0x68>)
   26caa:	f7dc f953 	bl	2f54 <printk>
			return 0;
   26cae:	2500      	movs	r5, #0
   26cb0:	e7da      	b.n	26c68 <line2argv+0x10>
	argv[argc] = NULL;
   26cb2:	2300      	movs	r3, #0
   26cb4:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	return argc;
   26cb8:	e7d6      	b.n	26c68 <line2argv+0x10>
		return 0;
   26cba:	2500      	movs	r5, #0
   26cbc:	e7d4      	b.n	26c68 <line2argv+0x10>
   26cbe:	bf00      	nop
   26cc0:	00032b5c 	.word	0x00032b5c

00026cc4 <get_destination_module>:
{
   26cc4:	b538      	push	{r3, r4, r5, lr}
   26cc6:	4605      	mov	r5, r0
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26cc8:	2400      	movs	r4, #0
   26cca:	4a0c      	ldr	r2, [pc, #48]	; (26cfc <get_destination_module+0x38>)
   26ccc:	4b0c      	ldr	r3, [pc, #48]	; (26d00 <get_destination_module+0x3c>)
   26cce:	1a9b      	subs	r3, r3, r2
   26cd0:	109b      	asrs	r3, r3, #2
   26cd2:	4a0c      	ldr	r2, [pc, #48]	; (26d04 <get_destination_module+0x40>)
   26cd4:	fb02 f303 	mul.w	r3, r2, r3
   26cd8:	429c      	cmp	r4, r3
   26cda:	da0b      	bge.n	26cf4 <get_destination_module+0x30>
		if (!strncmp(module_str,
   26cdc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26ce0:	0093      	lsls	r3, r2, #2
   26ce2:	2214      	movs	r2, #20
   26ce4:	4905      	ldr	r1, [pc, #20]	; (26cfc <get_destination_module+0x38>)
   26ce6:	58c9      	ldr	r1, [r1, r3]
   26ce8:	4628      	mov	r0, r5
   26cea:	f003 ffaf 	bl	2ac4c <strncmp>
   26cee:	b118      	cbz	r0, 26cf8 <get_destination_module+0x34>
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26cf0:	3401      	adds	r4, #1
   26cf2:	e7ea      	b.n	26cca <get_destination_module+0x6>
	return -1;
   26cf4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   26cf8:	4620      	mov	r0, r4
   26cfa:	bd38      	pop	{r3, r4, r5, pc}
   26cfc:	2000d5dc 	.word	0x2000d5dc
   26d00:	2000d5e8 	.word	0x2000d5e8
   26d04:	aaaaaaab 	.word	0xaaaaaaab

00026d08 <set_default_module>:
{
   26d08:	b538      	push	{r3, r4, r5, lr}
   26d0a:	4604      	mov	r4, r0
	if (strlen(name) > MODULE_NAME_MAX_LEN) {
   26d0c:	f7d9 fcf8 	bl	700 <strlen>
   26d10:	2814      	cmp	r0, #20
   26d12:	d813      	bhi.n	26d3c <set_default_module+0x34>
	module = get_destination_module(name);
   26d14:	4620      	mov	r0, r4
   26d16:	f7ff ffd5 	bl	26cc4 <get_destination_module>
	if (module == -1) {
   26d1a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26d1e:	d014      	beq.n	26d4a <set_default_module+0x42>
	default_module = module;
   26d20:	4b0d      	ldr	r3, [pc, #52]	; (26d58 <set_default_module+0x50>)
   26d22:	6018      	str	r0, [r3, #0]
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
   26d24:	4d0d      	ldr	r5, [pc, #52]	; (26d5c <set_default_module+0x54>)
   26d26:	2214      	movs	r2, #20
   26d28:	4621      	mov	r1, r4
   26d2a:	4628      	mov	r0, r5
   26d2c:	f003 ffe0 	bl	2acf0 <strncpy>
	strcat(default_module_prompt, "> ");
   26d30:	490b      	ldr	r1, [pc, #44]	; (26d60 <set_default_module+0x58>)
   26d32:	4628      	mov	r0, r5
   26d34:	f003 fe98 	bl	2aa68 <strcat>
	return 0;
   26d38:	2000      	movs	r0, #0
}
   26d3a:	bd38      	pop	{r3, r4, r5, pc}
		printk("Module name %s is too long, default is not changed\n",
   26d3c:	4621      	mov	r1, r4
   26d3e:	4809      	ldr	r0, [pc, #36]	; (26d64 <set_default_module+0x5c>)
   26d40:	f7dc f908 	bl	2f54 <printk>
		return -EINVAL;
   26d44:	f06f 0015 	mvn.w	r0, #21
   26d48:	bd38      	pop	{r3, r4, r5, pc}
		printk("Illegal module %s, default is not changed\n", name);
   26d4a:	4621      	mov	r1, r4
   26d4c:	4806      	ldr	r0, [pc, #24]	; (26d68 <set_default_module+0x60>)
   26d4e:	f7dc f901 	bl	2f54 <printk>
		return -EINVAL;
   26d52:	f06f 0015 	mvn.w	r0, #21
   26d56:	bd38      	pop	{r3, r4, r5, pc}
   26d58:	2000cb18 	.word	0x2000cb18
   26d5c:	20002c08 	.word	0x20002c08
   26d60:	00032be4 	.word	0x00032be4
   26d64:	00032b84 	.word	0x00032b84
   26d68:	00032bb8 	.word	0x00032bb8

00026d6c <select_module>:
{
   26d6c:	b508      	push	{r3, lr}
	if (argc == 1) {
   26d6e:	2801      	cmp	r0, #1
   26d70:	d003      	beq.n	26d7a <select_module+0xe>
	return set_default_module(argv[1]);
   26d72:	6848      	ldr	r0, [r1, #4]
   26d74:	f7ff ffc8 	bl	26d08 <set_default_module>
}
   26d78:	bd08      	pop	{r3, pc}
		default_module = -1;
   26d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26d7e:	4b02      	ldr	r3, [pc, #8]	; (26d88 <select_module+0x1c>)
   26d80:	601a      	str	r2, [r3, #0]
		return 0;
   26d82:	2000      	movs	r0, #0
   26d84:	bd08      	pop	{r3, pc}
   26d86:	bf00      	nop
   26d88:	2000cb18 	.word	0x2000cb18

00026d8c <get_command_and_module>:
{
   26d8c:	b538      	push	{r3, r4, r5, lr}
   26d8e:	4604      	mov	r4, r0
	*module = -1;
   26d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26d94:	600b      	str	r3, [r1, #0]
	if (!argv[0]) {
   26d96:	6800      	ldr	r0, [r0, #0]
   26d98:	b140      	cbz	r0, 26dac <get_command_and_module+0x20>
   26d9a:	460d      	mov	r5, r1
	if (default_module == -1) {
   26d9c:	4b12      	ldr	r3, [pc, #72]	; (26de8 <get_command_and_module+0x5c>)
   26d9e:	681b      	ldr	r3, [r3, #0]
   26da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26da4:	d007      	beq.n	26db6 <get_command_and_module+0x2a>
	*module = default_module;
   26da6:	600b      	str	r3, [r1, #0]
	return argv[0];
   26da8:	6820      	ldr	r0, [r4, #0]
}
   26daa:	bd38      	pop	{r3, r4, r5, pc}
		printk("Unrecognized command\n");
   26dac:	480f      	ldr	r0, [pc, #60]	; (26dec <get_command_and_module+0x60>)
   26dae:	f7dc f8d1 	bl	2f54 <printk>
		return NULL;
   26db2:	2000      	movs	r0, #0
   26db4:	bd38      	pop	{r3, r4, r5, pc}
		if (!argv[1] || argv[1][0] == '\0') {
   26db6:	6863      	ldr	r3, [r4, #4]
   26db8:	b14b      	cbz	r3, 26dce <get_command_and_module+0x42>
   26dba:	781b      	ldrb	r3, [r3, #0]
   26dbc:	b13b      	cbz	r3, 26dce <get_command_and_module+0x42>
		*module = get_destination_module(argv[0]);
   26dbe:	f7ff ff81 	bl	26cc4 <get_destination_module>
   26dc2:	6028      	str	r0, [r5, #0]
		if (*module == -1) {
   26dc4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26dc8:	d007      	beq.n	26dda <get_command_and_module+0x4e>
		return argv[1];
   26dca:	6860      	ldr	r0, [r4, #4]
   26dcc:	bd38      	pop	{r3, r4, r5, pc}
			printk("Unrecognized command: %s\n", argv[0]);
   26dce:	4601      	mov	r1, r0
   26dd0:	4807      	ldr	r0, [pc, #28]	; (26df0 <get_command_and_module+0x64>)
   26dd2:	f7dc f8bf 	bl	2f54 <printk>
			return NULL;
   26dd6:	2000      	movs	r0, #0
   26dd8:	bd38      	pop	{r3, r4, r5, pc}
			printk("Illegal module %s\n", argv[0]);
   26dda:	6821      	ldr	r1, [r4, #0]
   26ddc:	4805      	ldr	r0, [pc, #20]	; (26df4 <get_command_and_module+0x68>)
   26dde:	f7dc f8b9 	bl	2f54 <printk>
			return NULL;
   26de2:	2000      	movs	r0, #0
   26de4:	bd38      	pop	{r3, r4, r5, pc}
   26de6:	bf00      	nop
   26de8:	2000cb18 	.word	0x2000cb18
   26dec:	00032b14 	.word	0x00032b14
   26df0:	00032b2c 	.word	0x00032b2c
   26df4:	00032b48 	.word	0x00032b48

00026df8 <get_cb>:

static shell_cmd_function_t get_cb(int *argc, char *argv[], int *module)
{
   26df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const char *first_string = argv[0];
   26dfa:	680c      	ldr	r4, [r1, #0]
	const struct shell_module *shell_module;
	const char *command;
	int i;

	if (!first_string || first_string[0] == '\0') {
   26dfc:	b15c      	cbz	r4, 26e16 <get_cb+0x1e>
   26dfe:	4606      	mov	r6, r0
   26e00:	460d      	mov	r5, r1
   26e02:	4617      	mov	r7, r2
   26e04:	7823      	ldrb	r3, [r4, #0]
   26e06:	b133      	cbz	r3, 26e16 <get_cb+0x1e>
		printk("Illegal parameter\n");
		return NULL;
	}

	if (!strcmp(first_string, "help")) {
   26e08:	4929      	ldr	r1, [pc, #164]	; (26eb0 <get_cb+0xb8>)
   26e0a:	4620      	mov	r0, r4
   26e0c:	f7d9 fafc 	bl	408 <strcmp>
   26e10:	b930      	cbnz	r0, 26e20 <get_cb+0x28>
		return show_help;
   26e12:	4828      	ldr	r0, [pc, #160]	; (26eb4 <get_cb+0xbc>)
   26e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printk("Illegal parameter\n");
   26e16:	4828      	ldr	r0, [pc, #160]	; (26eb8 <get_cb+0xc0>)
   26e18:	f7dc f89c 	bl	2f54 <printk>
		return NULL;
   26e1c:	2000      	movs	r0, #0
   26e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "select")) {
   26e20:	4926      	ldr	r1, [pc, #152]	; (26ebc <get_cb+0xc4>)
   26e22:	4620      	mov	r0, r4
   26e24:	f7d9 faf0 	bl	408 <strcmp>
   26e28:	b908      	cbnz	r0, 26e2e <get_cb+0x36>
		return select_module;
   26e2a:	4825      	ldr	r0, [pc, #148]	; (26ec0 <get_cb+0xc8>)
   26e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "exit")) {
   26e2e:	4925      	ldr	r1, [pc, #148]	; (26ec4 <get_cb+0xcc>)
   26e30:	4620      	mov	r0, r4
   26e32:	f7d9 fae9 	bl	408 <strcmp>
   26e36:	2800      	cmp	r0, #0
   26e38:	d034      	beq.n	26ea4 <get_cb+0xac>
		return exit_module;
	}

	if ((*argc == 1) && (default_module == -1)) {
   26e3a:	6833      	ldr	r3, [r6, #0]
   26e3c:	2b01      	cmp	r3, #1
   26e3e:	d01c      	beq.n	26e7a <get_cb+0x82>
		printk("Missing parameter\n");
		return NULL;
	}

	command = get_command_and_module(argv, module);
   26e40:	4639      	mov	r1, r7
   26e42:	4628      	mov	r0, r5
   26e44:	f7ff ffa2 	bl	26d8c <get_command_and_module>
   26e48:	4606      	mov	r6, r0
	if ((*module == -1) || (command == NULL)) {
   26e4a:	683d      	ldr	r5, [r7, #0]
   26e4c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26e50:	d02a      	beq.n	26ea8 <get_cb+0xb0>
   26e52:	b358      	cbz	r0, 26eac <get_cb+0xb4>
   26e54:	2400      	movs	r4, #0
		return NULL;
	}

	shell_module = &__shell_cmd_start[*module];
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26e56:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26e5a:	009a      	lsls	r2, r3, #2
   26e5c:	4b1a      	ldr	r3, [pc, #104]	; (26ec8 <get_cb+0xd0>)
   26e5e:	4413      	add	r3, r2
   26e60:	6859      	ldr	r1, [r3, #4]
   26e62:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26e66:	0093      	lsls	r3, r2, #2
   26e68:	461f      	mov	r7, r3
   26e6a:	58c9      	ldr	r1, [r1, r3]
   26e6c:	b1c1      	cbz	r1, 26ea0 <get_cb+0xa8>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   26e6e:	4630      	mov	r0, r6
   26e70:	f7d9 faca 	bl	408 <strcmp>
   26e74:	b158      	cbz	r0, 26e8e <get_cb+0x96>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26e76:	3401      	adds	r4, #1
   26e78:	e7ed      	b.n	26e56 <get_cb+0x5e>
	if ((*argc == 1) && (default_module == -1)) {
   26e7a:	4b14      	ldr	r3, [pc, #80]	; (26ecc <get_cb+0xd4>)
   26e7c:	681b      	ldr	r3, [r3, #0]
   26e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26e82:	d1dd      	bne.n	26e40 <get_cb+0x48>
		printk("Missing parameter\n");
   26e84:	4812      	ldr	r0, [pc, #72]	; (26ed0 <get_cb+0xd8>)
   26e86:	f7dc f865 	bl	2f54 <printk>
		return NULL;
   26e8a:	2000      	movs	r0, #0
   26e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return shell_module->commands[i].cb;
   26e8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26e92:	00aa      	lsls	r2, r5, #2
   26e94:	4b0c      	ldr	r3, [pc, #48]	; (26ec8 <get_cb+0xd0>)
   26e96:	4413      	add	r3, r2
   26e98:	685b      	ldr	r3, [r3, #4]
   26e9a:	441f      	add	r7, r3
   26e9c:	6878      	ldr	r0, [r7, #4]
   26e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	return NULL;
   26ea0:	2000      	movs	r0, #0
   26ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return exit_module;
   26ea4:	480b      	ldr	r0, [pc, #44]	; (26ed4 <get_cb+0xdc>)
   26ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   26ea8:	2000      	movs	r0, #0
   26eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26eac:	2000      	movs	r0, #0
}
   26eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26eb0:	00032ae8 	.word	0x00032ae8
   26eb4:	00026f79 	.word	0x00026f79
   26eb8:	00032ad4 	.word	0x00032ad4
   26ebc:	00032af0 	.word	0x00032af0
   26ec0:	00026d6d 	.word	0x00026d6d
   26ec4:	00032af8 	.word	0x00032af8
   26ec8:	2000d5dc 	.word	0x2000d5dc
   26ecc:	2000cb18 	.word	0x2000cb18
   26ed0:	00032b00 	.word	0x00032b00
   26ed4:	00026c05 	.word	0x00026c05

00026ed8 <show_cmd_help>:
{
   26ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26edc:	b083      	sub	sp, #12
   26ede:	4607      	mov	r7, r0
	int module = -1;
   26ee0:	a902      	add	r1, sp, #8
   26ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26ee6:	f841 3d04 	str.w	r3, [r1, #-4]!
	command = get_command_and_module(argv, &module);
   26eea:	f7ff ff4f 	bl	26d8c <get_command_and_module>
	if ((module == -1) || (command == NULL)) {
   26eee:	9d01      	ldr	r5, [sp, #4]
   26ef0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26ef4:	d031      	beq.n	26f5a <show_cmd_help+0x82>
   26ef6:	4606      	mov	r6, r0
   26ef8:	b390      	cbz	r0, 26f60 <show_cmd_help+0x88>
   26efa:	2400      	movs	r4, #0
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26efc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26f00:	009a      	lsls	r2, r3, #2
   26f02:	4b19      	ldr	r3, [pc, #100]	; (26f68 <show_cmd_help+0x90>)
   26f04:	4413      	add	r3, r2
   26f06:	6859      	ldr	r1, [r3, #4]
   26f08:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26f0c:	0093      	lsls	r3, r2, #2
   26f0e:	4698      	mov	r8, r3
   26f10:	58c9      	ldr	r1, [r1, r3]
   26f12:	b1c1      	cbz	r1, 26f46 <show_cmd_help+0x6e>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   26f14:	4630      	mov	r0, r6
   26f16:	f7d9 fa77 	bl	408 <strcmp>
   26f1a:	4681      	mov	r9, r0
   26f1c:	b108      	cbz	r0, 26f22 <show_cmd_help+0x4a>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26f1e:	3401      	adds	r4, #1
   26f20:	e7ec      	b.n	26efc <show_cmd_help+0x24>
			       shell_module->commands[i].cmd_name,
   26f22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26f26:	00aa      	lsls	r2, r5, #2
   26f28:	4b0f      	ldr	r3, [pc, #60]	; (26f68 <show_cmd_help+0x90>)
   26f2a:	4413      	add	r3, r2
   26f2c:	685b      	ldr	r3, [r3, #4]
   26f2e:	eb03 0208 	add.w	r2, r3, r8
			printk("%s %s\n",
   26f32:	f853 1008 	ldr.w	r1, [r3, r8]
			       shell_module->commands[i].help ?
   26f36:	6892      	ldr	r2, [r2, #8]
			printk("%s %s\n",
   26f38:	b11a      	cbz	r2, 26f42 <show_cmd_help+0x6a>
   26f3a:	480c      	ldr	r0, [pc, #48]	; (26f6c <show_cmd_help+0x94>)
   26f3c:	f7dc f80a 	bl	2f54 <printk>
			return 0;
   26f40:	e007      	b.n	26f52 <show_cmd_help+0x7a>
			printk("%s %s\n",
   26f42:	4a0b      	ldr	r2, [pc, #44]	; (26f70 <show_cmd_help+0x98>)
   26f44:	e7f9      	b.n	26f3a <show_cmd_help+0x62>
	printk("Unrecognized command: %s\n", argv[0]);
   26f46:	6839      	ldr	r1, [r7, #0]
   26f48:	480a      	ldr	r0, [pc, #40]	; (26f74 <show_cmd_help+0x9c>)
   26f4a:	f7dc f803 	bl	2f54 <printk>
	return -EINVAL;
   26f4e:	f06f 0915 	mvn.w	r9, #21
}
   26f52:	4648      	mov	r0, r9
   26f54:	b003      	add	sp, #12
   26f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 0;
   26f5a:	f04f 0900 	mov.w	r9, #0
   26f5e:	e7f8      	b.n	26f52 <show_cmd_help+0x7a>
   26f60:	f04f 0900 	mov.w	r9, #0
   26f64:	e7f5      	b.n	26f52 <show_cmd_help+0x7a>
   26f66:	bf00      	nop
   26f68:	2000d5dc 	.word	0x2000d5dc
   26f6c:	00032c14 	.word	0x00032c14
   26f70:	0002f064 	.word	0x0002f064
   26f74:	00032b2c 	.word	0x00032b2c

00026f78 <show_help>:
{
   26f78:	b510      	push	{r4, lr}
   26f7a:	460c      	mov	r4, r1
	if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   26f7c:	2802      	cmp	r0, #2
   26f7e:	dc12      	bgt.n	26fa6 <show_help+0x2e>
   26f80:	4b23      	ldr	r3, [pc, #140]	; (27010 <show_help+0x98>)
   26f82:	681b      	ldr	r3, [r3, #0]
   26f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26f88:	d001      	beq.n	26f8e <show_help+0x16>
   26f8a:	2802      	cmp	r0, #2
   26f8c:	d00b      	beq.n	26fa6 <show_help+0x2e>
	if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   26f8e:	2802      	cmp	r0, #2
   26f90:	d00d      	beq.n	26fae <show_help+0x36>
   26f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26f96:	d001      	beq.n	26f9c <show_help+0x24>
   26f98:	2801      	cmp	r0, #1
   26f9a:	d008      	beq.n	26fae <show_help+0x36>
		printk("Available modules:\n");
   26f9c:	481d      	ldr	r0, [pc, #116]	; (27014 <show_help+0x9c>)
   26f9e:	f7db ffd9 	bl	2f54 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   26fa2:	2400      	movs	r4, #0
   26fa4:	e025      	b.n	26ff2 <show_help+0x7a>
		return show_cmd_help(&argv[1]);
   26fa6:	1d20      	adds	r0, r4, #4
   26fa8:	f7ff ff96 	bl	26ed8 <show_cmd_help>
   26fac:	bd10      	pop	{r4, pc}
		if (default_module == -1) {
   26fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26fb2:	d007      	beq.n	26fc4 <show_help+0x4c>
		print_module_commands(module);
   26fb4:	4618      	mov	r0, r3
   26fb6:	f7ff fe31 	bl	26c1c <print_module_commands>
		printk("\nEnter 'exit' to leave current module.\n");
   26fba:	4817      	ldr	r0, [pc, #92]	; (27018 <show_help+0xa0>)
   26fbc:	f7db ffca 	bl	2f54 <printk>
	return 0;
   26fc0:	2000      	movs	r0, #0
		printk("\nEnter 'exit' to leave current module.\n");
   26fc2:	bd10      	pop	{r4, pc}
			module = get_destination_module(argv[1]);
   26fc4:	6860      	ldr	r0, [r4, #4]
   26fc6:	f7ff fe7d 	bl	26cc4 <get_destination_module>
   26fca:	4603      	mov	r3, r0
			if (module == -1) {
   26fcc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26fd0:	d1f0      	bne.n	26fb4 <show_help+0x3c>
				printk("Illegal module %s\n", argv[1]);
   26fd2:	6861      	ldr	r1, [r4, #4]
   26fd4:	4811      	ldr	r0, [pc, #68]	; (2701c <show_help+0xa4>)
   26fd6:	f7db ffbd 	bl	2f54 <printk>
				return -EINVAL;
   26fda:	f06f 0015 	mvn.w	r0, #21
   26fde:	bd10      	pop	{r4, pc}
			printk("%s\n", __shell_cmd_start[module].module_name);
   26fe0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26fe4:	0093      	lsls	r3, r2, #2
   26fe6:	4a0e      	ldr	r2, [pc, #56]	; (27020 <show_help+0xa8>)
   26fe8:	58d1      	ldr	r1, [r2, r3]
   26fea:	480e      	ldr	r0, [pc, #56]	; (27024 <show_help+0xac>)
   26fec:	f7db ffb2 	bl	2f54 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   26ff0:	3401      	adds	r4, #1
   26ff2:	4a0b      	ldr	r2, [pc, #44]	; (27020 <show_help+0xa8>)
   26ff4:	4b0c      	ldr	r3, [pc, #48]	; (27028 <show_help+0xb0>)
   26ff6:	1a9b      	subs	r3, r3, r2
   26ff8:	109b      	asrs	r3, r3, #2
   26ffa:	4a0c      	ldr	r2, [pc, #48]	; (2702c <show_help+0xb4>)
   26ffc:	fb02 f303 	mul.w	r3, r2, r3
   27000:	429c      	cmp	r4, r3
   27002:	dbed      	blt.n	26fe0 <show_help+0x68>
		printk("\nTo select a module, enter 'select <module name>'.\n");
   27004:	480a      	ldr	r0, [pc, #40]	; (27030 <show_help+0xb8>)
   27006:	f7db ffa5 	bl	2f54 <printk>
	return 0;
   2700a:	2000      	movs	r0, #0
}
   2700c:	bd10      	pop	{r4, pc}
   2700e:	bf00      	nop
   27010:	2000cb18 	.word	0x2000cb18
   27014:	00032c44 	.word	0x00032c44
   27018:	00032c1c 	.word	0x00032c1c
   2701c:	00032b48 	.word	0x00032b48
   27020:	2000d5dc 	.word	0x2000d5dc
   27024:	00031d98 	.word	0x00031d98
   27028:	2000d5e8 	.word	0x2000d5e8
   2702c:	aaaaaaab 	.word	0xaaaaaaab
   27030:	00032c58 	.word	0x00032c58

00027034 <get_command_to_complete>:
		k_fifo_put(&avail_queue, cmd);
	}
}

static int get_command_to_complete(char *str, char **command_prefix)
{
   27034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27038:	b086      	sub	sp, #24
   2703a:	4604      	mov	r4, r0
   2703c:	4688      	mov	r8, r1
	char dest_str[MODULE_NAME_MAX_LEN];
	int dest = -1;
	char *start;

	/* remove ' ' at the beginning of the line */
	while (*str && *str == ' ') {
   2703e:	e000      	b.n	27042 <get_command_to_complete+0xe>
		str++;
   27040:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   27042:	7823      	ldrb	r3, [r4, #0]
   27044:	2b20      	cmp	r3, #32
   27046:	d0fb      	beq.n	27040 <get_command_to_complete+0xc>
	}

	if (!*str) {
   27048:	b3a3      	cbz	r3, 270b4 <get_command_to_complete+0x80>
		return -1;
	}

	start = str;

	if (default_module != -1) {
   2704a:	4b1f      	ldr	r3, [pc, #124]	; (270c8 <get_command_to_complete+0x94>)
   2704c:	681d      	ldr	r5, [r3, #0]
   2704e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   27052:	d001      	beq.n	27058 <get_command_to_complete+0x24>
		dest = default_module;
		/* caller function already checks str len and put '\0' */
		*command_prefix = str;
   27054:	f8c8 4000 	str.w	r4, [r8]

	/*
	 * In case of a default module: only one parameter is possible.
	 * Otherwise, only two parameters are possibles.
	 */
	str = strchr(str, ' ');
   27058:	2120      	movs	r1, #32
   2705a:	4620      	mov	r0, r4
   2705c:	f003 fd24 	bl	2aaa8 <strchr>
   27060:	4606      	mov	r6, r0
	if (default_module != -1) {
   27062:	4b19      	ldr	r3, [pc, #100]	; (270c8 <get_command_to_complete+0x94>)
   27064:	681f      	ldr	r7, [r3, #0]
   27066:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   2706a:	d004      	beq.n	27076 <get_command_to_complete+0x42>
		return (str == NULL) ? dest : -1;
   2706c:	bb28      	cbnz	r0, 270ba <get_command_to_complete+0x86>
	*command_prefix = str;
	str = strchr(str, ' ');

	/* only two parameters are possibles in case of no default module */
	return (str == NULL) ? dest : -1;
}
   2706e:	4628      	mov	r0, r5
   27070:	b006      	add	sp, #24
   27072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (str == NULL) {
   27076:	b318      	cbz	r0, 270c0 <get_command_to_complete+0x8c>
	if ((str - start + 1) >= MODULE_NAME_MAX_LEN) {
   27078:	1b05      	subs	r5, r0, r4
   2707a:	1c6a      	adds	r2, r5, #1
   2707c:	2a13      	cmp	r2, #19
   2707e:	dc21      	bgt.n	270c4 <get_command_to_complete+0x90>
	strncpy(dest_str, start, (str - start + 1));
   27080:	4621      	mov	r1, r4
   27082:	a801      	add	r0, sp, #4
   27084:	f003 fe34 	bl	2acf0 <strncpy>
	dest_str[str - start] = '\0';
   27088:	ab06      	add	r3, sp, #24
   2708a:	441d      	add	r5, r3
   2708c:	2300      	movs	r3, #0
   2708e:	f805 3c14 	strb.w	r3, [r5, #-20]
	dest = get_destination_module(dest_str);
   27092:	a801      	add	r0, sp, #4
   27094:	f7ff fe16 	bl	26cc4 <get_destination_module>
   27098:	4605      	mov	r5, r0
	if (dest == -1) {
   2709a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2709e:	d0e6      	beq.n	2706e <get_command_to_complete+0x3a>
	str++;
   270a0:	1c70      	adds	r0, r6, #1
	*command_prefix = str;
   270a2:	f8c8 0000 	str.w	r0, [r8]
	str = strchr(str, ' ');
   270a6:	2120      	movs	r1, #32
   270a8:	f003 fcfe 	bl	2aaa8 <strchr>
	return (str == NULL) ? dest : -1;
   270ac:	2800      	cmp	r0, #0
   270ae:	d0de      	beq.n	2706e <get_command_to_complete+0x3a>
   270b0:	463d      	mov	r5, r7
   270b2:	e7dc      	b.n	2706e <get_command_to_complete+0x3a>
		return -1;
   270b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   270b8:	e7d9      	b.n	2706e <get_command_to_complete+0x3a>
		return (str == NULL) ? dest : -1;
   270ba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   270be:	e7d6      	b.n	2706e <get_command_to_complete+0x3a>
		return -1;
   270c0:	463d      	mov	r5, r7
   270c2:	e7d4      	b.n	2706e <get_command_to_complete+0x3a>
		return -1;
   270c4:	463d      	mov	r5, r7
   270c6:	e7d2      	b.n	2706e <get_command_to_complete+0x3a>
   270c8:	2000cb18 	.word	0x2000cb18

000270cc <completion>:

static u8_t completion(char *line, u8_t len)
{
   270cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   270d0:	b087      	sub	sp, #28
   270d2:	9002      	str	r0, [sp, #8]
	int common_chars = -1, space = 0;
	int i, dest, command_len;
	const struct shell_module *module;
	char *command_prefix;

	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
   270d4:	2944      	cmp	r1, #68	; 0x44
   270d6:	d903      	bls.n	270e0 <completion+0x14>
		return 0;
   270d8:	2000      	movs	r0, #0
		printk(" ");
		line[len] = ' ';
	}

	return common_chars - command_len + space;
}
   270da:	b007      	add	sp, #28
   270dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   270e0:	4689      	mov	r9, r1
	line[len] = '\0';
   270e2:	2300      	movs	r3, #0
   270e4:	5443      	strb	r3, [r0, r1]
	dest = get_command_to_complete(line, &command_prefix);
   270e6:	a905      	add	r1, sp, #20
   270e8:	f7ff ffa4 	bl	27034 <get_command_to_complete>
   270ec:	4605      	mov	r5, r0
	if (dest == -1) {
   270ee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   270f2:	f000 808f 	beq.w	27214 <completion+0x148>
	command_len = strlen(command_prefix);
   270f6:	9805      	ldr	r0, [sp, #20]
   270f8:	f7d9 fb02 	bl	700 <strlen>
   270fc:	9001      	str	r0, [sp, #4]
	for (i = 0; module->commands[i].cmd_name; i++) {
   270fe:	f04f 0b00 	mov.w	fp, #0
	int common_chars = -1, space = 0;
   27102:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	const char *first_match = NULL;
   27106:	465f      	mov	r7, fp
   27108:	9003      	str	r0, [sp, #12]
	for (i = 0; module->commands[i].cmd_name; i++) {
   2710a:	e01f      	b.n	2714c <completion+0x80>
			first_match = module->commands[i].cmd_name;
   2710c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   27110:	009a      	lsls	r2, r3, #2
   27112:	4b42      	ldr	r3, [pc, #264]	; (2721c <completion+0x150>)
   27114:	4413      	add	r3, r2
   27116:	685b      	ldr	r3, [r3, #4]
   27118:	f853 700a 	ldr.w	r7, [r3, sl]
			continue;
   2711c:	e014      	b.n	27148 <completion+0x7c>
			printk("\n%s\n", first_match);
   2711e:	4639      	mov	r1, r7
   27120:	483f      	ldr	r0, [pc, #252]	; (27220 <completion+0x154>)
   27122:	f7db ff17 	bl	2f54 <printk>
			common_chars = strlen(first_match);
   27126:	4638      	mov	r0, r7
   27128:	f7d9 faea 	bl	700 <strlen>
   2712c:	4606      	mov	r6, r0
		for (j = 0; j < common_chars; j++) {
   2712e:	e026      	b.n	2717e <completion+0xb2>
		printk("%s\n", module->commands[i].cmd_name);
   27130:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   27134:	009a      	lsls	r2, r3, #2
   27136:	4b39      	ldr	r3, [pc, #228]	; (2721c <completion+0x150>)
   27138:	4413      	add	r3, r2
   2713a:	685b      	ldr	r3, [r3, #4]
   2713c:	f853 100a 	ldr.w	r1, [r3, sl]
   27140:	4838      	ldr	r0, [pc, #224]	; (27224 <completion+0x158>)
   27142:	f7db ff07 	bl	2f54 <printk>
		common_chars = j;
   27146:	4626      	mov	r6, r4
	for (i = 0; module->commands[i].cmd_name; i++) {
   27148:	f10b 0b01 	add.w	fp, fp, #1
   2714c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   27150:	009a      	lsls	r2, r3, #2
   27152:	4b32      	ldr	r3, [pc, #200]	; (2721c <completion+0x150>)
   27154:	4413      	add	r3, r2
   27156:	685a      	ldr	r2, [r3, #4]
   27158:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   2715c:	ea4f 0a83 	mov.w	sl, r3, lsl #2
   27160:	46d0      	mov	r8, sl
   27162:	f852 100a 	ldr.w	r1, [r2, sl]
   27166:	b1d1      	cbz	r1, 2719e <completion+0xd2>
		if (strncmp(command_prefix,
   27168:	9a01      	ldr	r2, [sp, #4]
   2716a:	9805      	ldr	r0, [sp, #20]
   2716c:	f003 fd6e 	bl	2ac4c <strncmp>
   27170:	4604      	mov	r4, r0
   27172:	2800      	cmp	r0, #0
   27174:	d1e8      	bne.n	27148 <completion+0x7c>
		if (!first_match) {
   27176:	2f00      	cmp	r7, #0
   27178:	d0c8      	beq.n	2710c <completion+0x40>
		if (first_match && (common_chars < 0)) {
   2717a:	2e00      	cmp	r6, #0
   2717c:	dbcf      	blt.n	2711e <completion+0x52>
		for (j = 0; j < common_chars; j++) {
   2717e:	42a6      	cmp	r6, r4
   27180:	ddd6      	ble.n	27130 <completion+0x64>
			if (first_match[j] != module->commands[i].cmd_name[j]) {
   27182:	5d39      	ldrb	r1, [r7, r4]
   27184:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   27188:	009a      	lsls	r2, r3, #2
   2718a:	4b24      	ldr	r3, [pc, #144]	; (2721c <completion+0x150>)
   2718c:	4413      	add	r3, r2
   2718e:	685b      	ldr	r3, [r3, #4]
   27190:	f853 3008 	ldr.w	r3, [r3, r8]
   27194:	5d1b      	ldrb	r3, [r3, r4]
   27196:	4299      	cmp	r1, r3
   27198:	d1ca      	bne.n	27130 <completion+0x64>
		for (j = 0; j < common_chars; j++) {
   2719a:	3401      	adds	r4, #1
   2719c:	e7ef      	b.n	2717e <completion+0xb2>
   2719e:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (!first_match) {
   271a2:	2f00      	cmp	r7, #0
   271a4:	d038      	beq.n	27218 <completion+0x14c>
	if (common_chars >= 0) {
   271a6:	2e00      	cmp	r6, #0
   271a8:	db0d      	blt.n	271c6 <completion+0xfa>
		printk("%s", get_prompt());
   271aa:	f7ff fd01 	bl	26bb0 <get_prompt>
   271ae:	4c1e      	ldr	r4, [pc, #120]	; (27228 <completion+0x15c>)
   271b0:	4601      	mov	r1, r0
   271b2:	4620      	mov	r0, r4
   271b4:	f7db fece 	bl	2f54 <printk>
		printk("%s", line);
   271b8:	9d02      	ldr	r5, [sp, #8]
   271ba:	4629      	mov	r1, r5
   271bc:	4620      	mov	r0, r4
   271be:	f7db fec9 	bl	2f54 <printk>
	int common_chars = -1, space = 0;
   271c2:	2400      	movs	r4, #0
   271c4:	e015      	b.n	271f2 <completion+0x126>
		common_chars = strlen(first_match);
   271c6:	4638      	mov	r0, r7
   271c8:	f7d9 fa9a 	bl	700 <strlen>
   271cc:	4606      	mov	r6, r0
		space = 1;
   271ce:	2401      	movs	r4, #1
   271d0:	9d02      	ldr	r5, [sp, #8]
	for (i = command_len; i < common_chars; i++) {
   271d2:	e00e      	b.n	271f2 <completion+0x126>
		printk("%c", first_match[i]);
   271d4:	f817 100a 	ldrb.w	r1, [r7, sl]
   271d8:	4814      	ldr	r0, [pc, #80]	; (2722c <completion+0x160>)
   271da:	f7db febb 	bl	2f54 <printk>
		line[len++] = first_match[i];
   271de:	f109 0301 	add.w	r3, r9, #1
   271e2:	f817 200a 	ldrb.w	r2, [r7, sl]
   271e6:	f805 2009 	strb.w	r2, [r5, r9]
	for (i = command_len; i < common_chars; i++) {
   271ea:	f10a 0a01 	add.w	sl, sl, #1
		line[len++] = first_match[i];
   271ee:	fa5f f983 	uxtb.w	r9, r3
	for (i = command_len; i < common_chars; i++) {
   271f2:	4556      	cmp	r6, sl
   271f4:	dcee      	bgt.n	271d4 <completion+0x108>
	if (space) {
   271f6:	b92c      	cbnz	r4, 27204 <completion+0x138>
	return common_chars - command_len + space;
   271f8:	9b01      	ldr	r3, [sp, #4]
   271fa:	1af0      	subs	r0, r6, r3
   271fc:	fa54 f080 	uxtab	r0, r4, r0
   27200:	b2c0      	uxtb	r0, r0
   27202:	e76a      	b.n	270da <completion+0xe>
		printk(" ");
   27204:	480a      	ldr	r0, [pc, #40]	; (27230 <completion+0x164>)
   27206:	f7db fea5 	bl	2f54 <printk>
		line[len] = ' ';
   2720a:	2320      	movs	r3, #32
   2720c:	9a02      	ldr	r2, [sp, #8]
   2720e:	f802 3009 	strb.w	r3, [r2, r9]
   27212:	e7f1      	b.n	271f8 <completion+0x12c>
		return 0;
   27214:	2000      	movs	r0, #0
   27216:	e760      	b.n	270da <completion+0xe>
		return 0;
   27218:	2000      	movs	r0, #0
   2721a:	e75e      	b.n	270da <completion+0xe>
   2721c:	2000d5dc 	.word	0x2000d5dc
   27220:	00032ac8 	.word	0x00032ac8
   27224:	00031d98 	.word	0x00031d98
   27228:	0002e77c 	.word	0x0002e77c
   2722c:	00032ad0 	.word	0x00032ad0
   27230:	0003311c 	.word	0x0003311c

00027234 <line_queue_init>:
{
   27234:	b510      	push	{r4, lr}
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   27236:	2400      	movs	r4, #0
   27238:	e008      	b.n	2724c <line_queue_init+0x18>
		k_fifo_put(&avail_queue, &buf[i]);
   2723a:	eb04 1244 	add.w	r2, r4, r4, lsl #5
   2723e:	0093      	lsls	r3, r2, #2
   27240:	4904      	ldr	r1, [pc, #16]	; (27254 <line_queue_init+0x20>)
   27242:	4419      	add	r1, r3
   27244:	4804      	ldr	r0, [pc, #16]	; (27258 <line_queue_init+0x24>)
   27246:	f001 fced 	bl	28c24 <k_queue_append>
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   2724a:	3401      	adds	r4, #1
   2724c:	2c02      	cmp	r4, #2
   2724e:	ddf4      	ble.n	2723a <line_queue_init+0x6>
}
   27250:	bd10      	pop	{r4, pc}
   27252:	bf00      	nop
   27254:	20002a6c 	.word	0x20002a6c
   27258:	20002a5c 	.word	0x20002a5c

0002725c <shell_exec>:
{
   2725c:	b510      	push	{r4, lr}
   2725e:	b08e      	sub	sp, #56	; 0x38
	int module = default_module;
   27260:	4b1e      	ldr	r3, [pc, #120]	; (272dc <shell_exec+0x80>)
   27262:	681b      	ldr	r3, [r3, #0]
   27264:	9301      	str	r3, [sp, #4]
	argc = line2argv(line, argv, ARRAY_SIZE(argv));
   27266:	220b      	movs	r2, #11
   27268:	a903      	add	r1, sp, #12
   2726a:	f7ff fcf5 	bl	26c58 <line2argv>
   2726e:	9002      	str	r0, [sp, #8]
	if (!argc) {
   27270:	2800      	cmp	r0, #0
   27272:	d02f      	beq.n	272d4 <shell_exec+0x78>
	cb = get_cb(&argc, argv, &module);
   27274:	aa01      	add	r2, sp, #4
   27276:	a903      	add	r1, sp, #12
   27278:	a802      	add	r0, sp, #8
   2727a:	f7ff fdbd 	bl	26df8 <get_cb>
	if (!cb) {
   2727e:	4602      	mov	r2, r0
   27280:	b168      	cbz	r0, 2729e <shell_exec+0x42>
	if (module != -1 && module != default_module) {
   27282:	9b01      	ldr	r3, [sp, #4]
   27284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27288:	d017      	beq.n	272ba <shell_exec+0x5e>
   2728a:	4914      	ldr	r1, [pc, #80]	; (272dc <shell_exec+0x80>)
   2728c:	6809      	ldr	r1, [r1, #0]
   2728e:	428b      	cmp	r3, r1
   27290:	d013      	beq.n	272ba <shell_exec+0x5e>
		err = cb(argc - 1, &argv[1]);
   27292:	a904      	add	r1, sp, #16
   27294:	9802      	ldr	r0, [sp, #8]
   27296:	3801      	subs	r0, #1
   27298:	4790      	blx	r2
   2729a:	4604      	mov	r4, r0
   2729c:	e011      	b.n	272c2 <shell_exec+0x66>
		if (app_cmd_handler != NULL) {
   2729e:	4b10      	ldr	r3, [pc, #64]	; (272e0 <shell_exec+0x84>)
   272a0:	681a      	ldr	r2, [r3, #0]
   272a2:	2a00      	cmp	r2, #0
   272a4:	d1ed      	bne.n	27282 <shell_exec+0x26>
	printk("Unrecognized command: %s\n", argv);
   272a6:	9903      	ldr	r1, [sp, #12]
   272a8:	480e      	ldr	r0, [pc, #56]	; (272e4 <shell_exec+0x88>)
   272aa:	f7db fe53 	bl	2f54 <printk>
	printk("Type 'help' for list of available commands\n");
   272ae:	480e      	ldr	r0, [pc, #56]	; (272e8 <shell_exec+0x8c>)
   272b0:	f7db fe50 	bl	2f54 <printk>
			return -EINVAL;
   272b4:	f06f 0415 	mvn.w	r4, #21
   272b8:	e005      	b.n	272c6 <shell_exec+0x6a>
		err = cb(argc, argv);
   272ba:	a903      	add	r1, sp, #12
   272bc:	9802      	ldr	r0, [sp, #8]
   272be:	4790      	blx	r2
   272c0:	4604      	mov	r4, r0
	if (err < 0) {
   272c2:	2c00      	cmp	r4, #0
   272c4:	db02      	blt.n	272cc <shell_exec+0x70>
}
   272c6:	4620      	mov	r0, r4
   272c8:	b00e      	add	sp, #56	; 0x38
   272ca:	bd10      	pop	{r4, pc}
		show_cmd_help(argv);
   272cc:	a803      	add	r0, sp, #12
   272ce:	f7ff fe03 	bl	26ed8 <show_cmd_help>
   272d2:	e7f8      	b.n	272c6 <shell_exec+0x6a>
		return -EINVAL;
   272d4:	f06f 0415 	mvn.w	r4, #21
   272d8:	e7f5      	b.n	272c6 <shell_exec+0x6a>
   272da:	bf00      	nop
   272dc:	2000cb18 	.word	0x2000cb18
   272e0:	20002a54 	.word	0x20002a54
   272e4:	00032b2c 	.word	0x00032b2c
   272e8:	00032be8 	.word	0x00032be8

000272ec <shell>:
{
   272ec:	b510      	push	{r4, lr}
		printk("%s", get_prompt());
   272ee:	f7ff fc5f 	bl	26bb0 <get_prompt>
   272f2:	4601      	mov	r1, r0
   272f4:	4808      	ldr	r0, [pc, #32]	; (27318 <shell+0x2c>)
   272f6:	f7db fe2d 	bl	2f54 <printk>
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
   272fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   272fe:	4807      	ldr	r0, [pc, #28]	; (2731c <shell+0x30>)
   27300:	f001 fcb8 	bl	28c74 <k_queue_get>
   27304:	4604      	mov	r4, r0
		shell_exec(cmd->line);
   27306:	3004      	adds	r0, #4
   27308:	f7ff ffa8 	bl	2725c <shell_exec>
		k_fifo_put(&avail_queue, cmd);
   2730c:	4621      	mov	r1, r4
   2730e:	4804      	ldr	r0, [pc, #16]	; (27320 <shell+0x34>)
   27310:	f001 fc88 	bl	28c24 <k_queue_append>
   27314:	e7eb      	b.n	272ee <shell+0x2>
   27316:	bf00      	nop
   27318:	0002e77c 	.word	0x0002e77c
   2731c:	20002bf8 	.word	0x20002bf8
   27320:	20002a5c 	.word	0x20002a5c

00027324 <shell_init>:


void shell_init(const char *str)
{
   27324:	b510      	push	{r4, lr}
   27326:	b086      	sub	sp, #24
   27328:	4604      	mov	r4, r0
	k_fifo_init(&cmds_queue);
   2732a:	4812      	ldr	r0, [pc, #72]	; (27374 <shell_init+0x50>)
   2732c:	f001 fc47 	bl	28bbe <k_queue_init>
	k_fifo_init(&avail_queue);
   27330:	4811      	ldr	r0, [pc, #68]	; (27378 <shell_init+0x54>)
   27332:	f001 fc44 	bl	28bbe <k_queue_init>

	line_queue_init();
   27336:	f7ff ff7d 	bl	27234 <line_queue_init>

	prompt = str ? str : "";
   2733a:	b1c4      	cbz	r4, 2736e <shell_init+0x4a>
   2733c:	4b0f      	ldr	r3, [pc, #60]	; (2737c <shell_init+0x58>)
   2733e:	601c      	str	r4, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   27340:	2300      	movs	r3, #0
   27342:	9305      	str	r3, [sp, #20]
   27344:	9304      	str	r3, [sp, #16]
   27346:	f06f 0208 	mvn.w	r2, #8
   2734a:	9203      	str	r2, [sp, #12]
   2734c:	9302      	str	r3, [sp, #8]
   2734e:	9301      	str	r3, [sp, #4]
   27350:	9300      	str	r3, [sp, #0]
   27352:	4b0b      	ldr	r3, [pc, #44]	; (27380 <shell_init+0x5c>)
   27354:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   27358:	490a      	ldr	r1, [pc, #40]	; (27384 <shell_init+0x60>)
   2735a:	480b      	ldr	r0, [pc, #44]	; (27388 <shell_init+0x64>)
   2735c:	f002 fa78 	bl	29850 <_impl_k_thread_create>
	k_thread_create(&shell_thread, stack, STACKSIZE, shell, NULL, NULL,
			NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	/* Register serial console handler */
#ifdef CONFIG_UART_CONSOLE
	uart_register_input(&avail_queue, &cmds_queue, completion);
   27360:	4a0a      	ldr	r2, [pc, #40]	; (2738c <shell_init+0x68>)
   27362:	4904      	ldr	r1, [pc, #16]	; (27374 <shell_init+0x50>)
   27364:	4804      	ldr	r0, [pc, #16]	; (27378 <shell_init+0x54>)
   27366:	f7da fe35 	bl	1fd4 <uart_register_input>
#endif
#ifdef CONFIG_TELNET_CONSOLE
	telnet_register_input(&avail_queue, &cmds_queue, completion);
#endif
}
   2736a:	b006      	add	sp, #24
   2736c:	bd10      	pop	{r4, pc}
	prompt = str ? str : "";
   2736e:	4c08      	ldr	r4, [pc, #32]	; (27390 <shell_init+0x6c>)
   27370:	e7e4      	b.n	2733c <shell_init+0x18>
   27372:	bf00      	nop
   27374:	20002bf8 	.word	0x20002bf8
   27378:	20002a5c 	.word	0x20002a5c
   2737c:	20002c20 	.word	0x20002c20
   27380:	000272ed 	.word	0x000272ed
   27384:	2000a138 	.word	0x2000a138
   27388:	20002c24 	.word	0x20002c24
   2738c:	000270cd 	.word	0x000270cd
   27390:	0002f064 	.word	0x0002f064

00027394 <ftpan_32>:
#define __SYSTEM_CLOCK_64M (64000000UL)

#ifdef CONFIG_SOC_NRF52832
static bool ftpan_32(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27394:	4b0e      	ldr	r3, [pc, #56]	; (273d0 <ftpan_32+0x3c>)
   27396:	781b      	ldrb	r3, [r3, #0]
   27398:	2b06      	cmp	r3, #6
   2739a:	d001      	beq.n	273a0 <ftpan_32+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   2739c:	2000      	movs	r0, #0
   2739e:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   273a0:	4b0c      	ldr	r3, [pc, #48]	; (273d4 <ftpan_32+0x40>)
   273a2:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   273a4:	f013 0f0f 	tst.w	r3, #15
   273a8:	d10e      	bne.n	273c8 <ftpan_32+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   273aa:	4b0b      	ldr	r3, [pc, #44]	; (273d8 <ftpan_32+0x44>)
   273ac:	681b      	ldr	r3, [r3, #0]
   273ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   273b2:	2b30      	cmp	r3, #48	; 0x30
   273b4:	d001      	beq.n	273ba <ftpan_32+0x26>
	return false;
   273b6:	2000      	movs	r0, #0
   273b8:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   273ba:	4b08      	ldr	r3, [pc, #32]	; (273dc <ftpan_32+0x48>)
   273bc:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   273be:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   273c2:	d003      	beq.n	273cc <ftpan_32+0x38>
	return false;
   273c4:	2000      	movs	r0, #0
   273c6:	4770      	bx	lr
   273c8:	2000      	movs	r0, #0
   273ca:	4770      	bx	lr
			return true;
   273cc:	2001      	movs	r0, #1
}
   273ce:	4770      	bx	lr
   273d0:	f0000fe0 	.word	0xf0000fe0
   273d4:	f0000fe4 	.word	0xf0000fe4
   273d8:	f0000fe8 	.word	0xf0000fe8
   273dc:	f0000fec 	.word	0xf0000fec

000273e0 <ftpan_37>:

static bool ftpan_37(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   273e0:	4b0e      	ldr	r3, [pc, #56]	; (2741c <ftpan_37+0x3c>)
   273e2:	781b      	ldrb	r3, [r3, #0]
   273e4:	2b06      	cmp	r3, #6
   273e6:	d001      	beq.n	273ec <ftpan_37+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   273e8:	2000      	movs	r0, #0
   273ea:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   273ec:	4b0c      	ldr	r3, [pc, #48]	; (27420 <ftpan_37+0x40>)
   273ee:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   273f0:	f013 0f0f 	tst.w	r3, #15
   273f4:	d10e      	bne.n	27414 <ftpan_37+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   273f6:	4b0b      	ldr	r3, [pc, #44]	; (27424 <ftpan_37+0x44>)
   273f8:	681b      	ldr	r3, [r3, #0]
   273fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   273fe:	2b30      	cmp	r3, #48	; 0x30
   27400:	d001      	beq.n	27406 <ftpan_37+0x26>
	return false;
   27402:	2000      	movs	r0, #0
   27404:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   27406:	4b08      	ldr	r3, [pc, #32]	; (27428 <ftpan_37+0x48>)
   27408:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2740a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   2740e:	d003      	beq.n	27418 <ftpan_37+0x38>
	return false;
   27410:	2000      	movs	r0, #0
   27412:	4770      	bx	lr
   27414:	2000      	movs	r0, #0
   27416:	4770      	bx	lr
			return true;
   27418:	2001      	movs	r0, #1
}
   2741a:	4770      	bx	lr
   2741c:	f0000fe0 	.word	0xf0000fe0
   27420:	f0000fe4 	.word	0xf0000fe4
   27424:	f0000fe8 	.word	0xf0000fe8
   27428:	f0000fec 	.word	0xf0000fec

0002742c <ftpan_36>:

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   2742c:	4b0e      	ldr	r3, [pc, #56]	; (27468 <ftpan_36+0x3c>)
   2742e:	781b      	ldrb	r3, [r3, #0]
   27430:	2b06      	cmp	r3, #6
   27432:	d001      	beq.n	27438 <ftpan_36+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   27434:	2000      	movs	r0, #0
   27436:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   27438:	4b0c      	ldr	r3, [pc, #48]	; (2746c <ftpan_36+0x40>)
   2743a:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   2743c:	f013 0f0f 	tst.w	r3, #15
   27440:	d10e      	bne.n	27460 <ftpan_36+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27442:	4b0b      	ldr	r3, [pc, #44]	; (27470 <ftpan_36+0x44>)
   27444:	681b      	ldr	r3, [r3, #0]
   27446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2744a:	2b30      	cmp	r3, #48	; 0x30
   2744c:	d001      	beq.n	27452 <ftpan_36+0x26>
	return false;
   2744e:	2000      	movs	r0, #0
   27450:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   27452:	4b08      	ldr	r3, [pc, #32]	; (27474 <ftpan_36+0x48>)
   27454:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27456:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   2745a:	d003      	beq.n	27464 <ftpan_36+0x38>
	return false;
   2745c:	2000      	movs	r0, #0
   2745e:	4770      	bx	lr
   27460:	2000      	movs	r0, #0
   27462:	4770      	bx	lr
			return true;
   27464:	2001      	movs	r0, #1
}
   27466:	4770      	bx	lr
   27468:	f0000fe0 	.word	0xf0000fe0
   2746c:	f0000fe4 	.word	0xf0000fe4
   27470:	f0000fe8 	.word	0xf0000fe8
   27474:	f0000fec 	.word	0xf0000fec

00027478 <errata_136_nrf52832>:

static bool errata_136_nrf52832(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27478:	4b0f      	ldr	r3, [pc, #60]	; (274b8 <errata_136_nrf52832+0x40>)
   2747a:	781b      	ldrb	r3, [r3, #0]
   2747c:	2b06      	cmp	r3, #6
   2747e:	d001      	beq.n	27484 <errata_136_nrf52832+0xc>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
			return true;
		}
	}

	return false;
   27480:	2000      	movs	r0, #0
   27482:	4770      	bx	lr
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   27484:	4b0d      	ldr	r3, [pc, #52]	; (274bc <errata_136_nrf52832+0x44>)
   27486:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27488:	f013 0f0f 	tst.w	r3, #15
   2748c:	d10b      	bne.n	274a6 <errata_136_nrf52832+0x2e>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
   2748e:	4b0c      	ldr	r3, [pc, #48]	; (274c0 <errata_136_nrf52832+0x48>)
   27490:	681b      	ldr	r3, [r3, #0]
   27492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   27496:	2b30      	cmp	r3, #48	; 0x30
   27498:	d007      	beq.n	274aa <errata_136_nrf52832+0x32>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
   2749a:	2b40      	cmp	r3, #64	; 0x40
   2749c:	d007      	beq.n	274ae <errata_136_nrf52832+0x36>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
   2749e:	2b50      	cmp	r3, #80	; 0x50
   274a0:	d007      	beq.n	274b2 <errata_136_nrf52832+0x3a>
	return false;
   274a2:	2000      	movs	r0, #0
   274a4:	4770      	bx	lr
   274a6:	2000      	movs	r0, #0
   274a8:	4770      	bx	lr
			return true;
   274aa:	2001      	movs	r0, #1
   274ac:	4770      	bx	lr
			return true;
   274ae:	2001      	movs	r0, #1
   274b0:	4770      	bx	lr
			return true;
   274b2:	2001      	movs	r0, #1
}
   274b4:	4770      	bx	lr
   274b6:	bf00      	nop
   274b8:	f0000fe0 	.word	0xf0000fe0
   274bc:	f0000fe4 	.word	0xf0000fe4
   274c0:	f0000fe8 	.word	0xf0000fe8

000274c4 <nordicsemi_nrf52832_init>:

static void nordicsemi_nrf52832_init(void)
{
   274c4:	b508      	push	{r3, lr}
	/* Workaround for FTPAN-32 "DIF: Debug session automatically
	* enables TracePort pins" found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_32()) {
   274c6:	f7ff ff65 	bl	27394 <ftpan_32>
   274ca:	b120      	cbz	r0, 274d6 <nordicsemi_nrf52832_init+0x12>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   274cc:	4a32      	ldr	r2, [pc, #200]	; (27598 <nordicsemi_nrf52832_init+0xd4>)
   274ce:	68d3      	ldr	r3, [r2, #12]
   274d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   274d4:	60d3      	str	r3, [r2, #12]

	/* Workaround for FTPAN-37 "AMLI: EasyDMA is slow with Radio,
	* ECB, AAR and CCM." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_37()) {
   274d6:	f7ff ff83 	bl	273e0 <ftpan_37>
   274da:	b110      	cbz	r0, 274e2 <nordicsemi_nrf52832_init+0x1e>
		*(volatile u32_t *)0x400005A0 = 0x3;
   274dc:	2203      	movs	r2, #3
   274de:	4b2f      	ldr	r3, [pc, #188]	; (2759c <nordicsemi_nrf52832_init+0xd8>)
   274e0:	601a      	str	r2, [r3, #0]

	/* Workaround for FTPAN-36 "CLOCK: Some registers are not
	* reset when expected." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_36()) {
   274e2:	f7ff ffa3 	bl	2742c <ftpan_36>
   274e6:	b130      	cbz	r0, 274f6 <nordicsemi_nrf52832_init+0x32>
		NRF_CLOCK->EVENTS_DONE = 0;
   274e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   274ec:	2200      	movs	r2, #0
   274ee:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
   274f2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	/* Workaround for Errata 136 "System: Bits in RESETREAS are set when
	 * they should not be" found at the Errata document for your device
	 * located at https://infocenter.nordicsemi.com/
	 */
	if (errata_136_nrf52832()) {
   274f6:	f7ff ffbf 	bl	27478 <errata_136_nrf52832>
   274fa:	b160      	cbz	r0, 27516 <nordicsemi_nrf52832_init+0x52>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
   274fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27500:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   27504:	f013 0f01 	tst.w	r3, #1
   27508:	d005      	beq.n	27516 <nordicsemi_nrf52832_init+0x52>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
   2750a:	f06f 0201 	mvn.w	r2, #1
   2750e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27512:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	* defined, pin reset will not be available. One GPIO (see
	* Product Specification to see which one) will then be
	* reserved for PinReset and not available as normal GPIO.
	*/
#if defined(CONFIG_GPIO_AS_PINRESET)
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   27516:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2751a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   2751e:	2b00      	cmp	r3, #0
   27520:	db06      	blt.n	27530 <nordicsemi_nrf52832_init+0x6c>
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   27522:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   27526:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2752a:	2b00      	cmp	r3, #0
   2752c:	db00      	blt.n	27530 <nordicsemi_nrf52832_init+0x6c>
   2752e:	bd08      	pop	{r3, pc}
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   27530:	2201      	movs	r2, #1
   27532:	4b1b      	ldr	r3, [pc, #108]	; (275a0 <nordicsemi_nrf52832_init+0xdc>)
   27534:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   27538:	4b19      	ldr	r3, [pc, #100]	; (275a0 <nordicsemi_nrf52832_init+0xdc>)
   2753a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2753e:	2b00      	cmp	r3, #0
   27540:	d0fa      	beq.n	27538 <nordicsemi_nrf52832_init+0x74>
			;
		}
		NRF_UICR->PSELRESET[0] = 21;
   27542:	2215      	movs	r2, #21
   27544:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   27548:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   2754c:	4b14      	ldr	r3, [pc, #80]	; (275a0 <nordicsemi_nrf52832_init+0xdc>)
   2754e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   27552:	2b00      	cmp	r3, #0
   27554:	d0fa      	beq.n	2754c <nordicsemi_nrf52832_init+0x88>
			;
		}
		NRF_UICR->PSELRESET[1] = 21;
   27556:	2215      	movs	r2, #21
   27558:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2755c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   27560:	4b0f      	ldr	r3, [pc, #60]	; (275a0 <nordicsemi_nrf52832_init+0xdc>)
   27562:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   27566:	2b00      	cmp	r3, #0
   27568:	d0fa      	beq.n	27560 <nordicsemi_nrf52832_init+0x9c>
			;
		}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   2756a:	2200      	movs	r2, #0
   2756c:	4b0c      	ldr	r3, [pc, #48]	; (275a0 <nordicsemi_nrf52832_init+0xdc>)
   2756e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   27572:	4b0b      	ldr	r3, [pc, #44]	; (275a0 <nordicsemi_nrf52832_init+0xdc>)
   27574:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   27578:	2b00      	cmp	r3, #0
   2757a:	d0fa      	beq.n	27572 <nordicsemi_nrf52832_init+0xae>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   2757c:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   27580:	4908      	ldr	r1, [pc, #32]	; (275a4 <nordicsemi_nrf52832_init+0xe0>)
   27582:	68ca      	ldr	r2, [r1, #12]
   27584:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   27588:	4b07      	ldr	r3, [pc, #28]	; (275a8 <nordicsemi_nrf52832_init+0xe4>)
   2758a:	4313      	orrs	r3, r2
   2758c:	60cb      	str	r3, [r1, #12]
   2758e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   27592:	bf00      	nop
   27594:	e7fd      	b.n	27592 <nordicsemi_nrf52832_init+0xce>
   27596:	bf00      	nop
   27598:	e000edf0 	.word	0xe000edf0
   2759c:	400005a0 	.word	0x400005a0
   275a0:	4001e000 	.word	0x4001e000
   275a4:	e000ed00 	.word	0xe000ed00
   275a8:	05fa0004 	.word	0x05fa0004

000275ac <clock_init>:

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK_64M;

static void clock_init(void)
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
   275ac:	4a01      	ldr	r2, [pc, #4]	; (275b4 <clock_init+0x8>)
   275ae:	4b02      	ldr	r3, [pc, #8]	; (275b8 <clock_init+0xc>)
   275b0:	601a      	str	r2, [r3, #0]
   275b2:	4770      	bx	lr
   275b4:	03d09000 	.word	0x03d09000
   275b8:	2000cb1c 	.word	0x2000cb1c

000275bc <nordicsemi_nrf52_init>:
}

static int nordicsemi_nrf52_init(struct device *arg)
{
   275bc:	b510      	push	{r4, lr}
	__asm__ volatile(
   275be:	f04f 0320 	mov.w	r3, #32
   275c2:	f3ef 8411 	mrs	r4, BASEPRI
   275c6:	f383 8811 	msr	BASEPRI, r3
	ARG_UNUSED(arg);

	key = irq_lock();

#ifdef CONFIG_SOC_NRF52832
	nordicsemi_nrf52832_init();
   275ca:	f7ff ff7b 	bl	274c4 <nordicsemi_nrf52832_init>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   275ce:	4b05      	ldr	r3, [pc, #20]	; (275e4 <nordicsemi_nrf52_init+0x28>)
   275d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   275d4:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   275d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

	_ClearFaults();

	/* Setup master clock */
	clock_init();
   275d8:	f7ff ffe8 	bl	275ac <clock_init>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   275dc:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   275e0:	2000      	movs	r0, #0
   275e2:	bd10      	pop	{r4, pc}
   275e4:	e000ed00 	.word	0xe000ed00

000275e8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   275e8:	4808      	ldr	r0, [pc, #32]	; (2760c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   275ea:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
   275ec:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
   275ee:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
   275f0:	d80b      	bhi.n	2760a <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
   275f2:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
   275f4:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   275f6:	d008      	beq.n	2760a <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
   275f8:	b500      	push	{lr}
    bl _update_time_slice_before_swap
   275fa:	f001 fd1f 	bl	2903c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
   275fe:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   27602:	4903      	ldr	r1, [pc, #12]	; (27610 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   27604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   27608:	600a      	str	r2, [r1, #0]

0002760a <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
   2760a:	4770      	bx	lr
    ldr r0, =_kernel
   2760c:	20002d60 	.word	0x20002d60
    ldr r1, =_SCS_ICSR
   27610:	e000ed04 	.word	0xe000ed04

00027614 <_IntLibInit>:
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
   27614:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   27616:	e00a      	b.n	2762e <_IntLibInit+0x1a>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   27618:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) < 0)
   2761a:	2b00      	cmp	r3, #0
   2761c:	db0a      	blt.n	27634 <_IntLibInit+0x20>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2761e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   27622:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   27626:	2120      	movs	r1, #32
   27628:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2762c:	3201      	adds	r2, #1
   2762e:	2a26      	cmp	r2, #38	; 0x26
   27630:	ddf2      	ble.n	27618 <_IntLibInit+0x4>
	}
}
   27632:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27634:	f002 010f 	and.w	r1, r2, #15
   27638:	4b02      	ldr	r3, [pc, #8]	; (27644 <_IntLibInit+0x30>)
   2763a:	440b      	add	r3, r1
   2763c:	2120      	movs	r1, #32
   2763e:	7619      	strb	r1, [r3, #24]
   27640:	e7f4      	b.n	2762c <_IntLibInit+0x18>
   27642:	bf00      	nop
   27644:	e000ecfc 	.word	0xe000ecfc

00027648 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   27648:	490e      	ldr	r1, [pc, #56]	; (27684 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2764a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   2764c:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   27650:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   27652:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
   27656:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   2765a:	4f0b      	ldr	r7, [pc, #44]	; (27688 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   2765c:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   27660:	2020      	movs	r0, #32
    msr BASEPRI, r0
   27662:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
   27666:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   27668:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   2766a:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
   2766c:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
   2766e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   27670:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   27672:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_mem_domain
    pop {r2, lr}
#endif /* CONFIG_USERSPACE */

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   27676:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   2767a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
   2767e:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
   27682:	4770      	bx	lr
    ldr r1, =_kernel
   27684:	20002d60 	.word	0x20002d60
    ldr v4, =_SCS_ICSR
   27688:	e000ed04 	.word	0xe000ed04

0002768c <__svc>:
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)

    tst lr, #0x4    /* did we come from thread mode ? */
   2768c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   27690:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   27692:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   27696:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   2769a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
   2769c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
   276a0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    beq _context_switch
   276a4:	d001      	beq.n	276aa <_context_switch>

    cmp r1, #2
   276a6:	2902      	cmp	r1, #2
    beq _oops
   276a8:	d007      	beq.n	276ba <_oops>

000276aa <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
   276aa:	4040      	eors	r0, r0
    msr BASEPRI, r0
   276ac:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
   276b0:	4904      	ldr	r1, [pc, #16]	; (276c4 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
   276b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
   276b6:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
   276b8:	4770      	bx	lr

000276ba <_oops>:

_oops:
    push {lr}
   276ba:	b500      	push	{lr}
    blx _do_kernel_oops
   276bc:	f000 fa82 	bl	27bc4 <_do_kernel_oops>
    pop {pc}
   276c0:	bd00      	pop	{pc}
   276c2:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
   276c4:	e000ed04 	.word	0xe000ed04

000276c8 <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
   276c8:	4904      	ldr	r1, [pc, #16]	; (276dc <__swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
   276ca:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
   276cc:	6610      	str	r0, [r2, #96]	; 0x60

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   276ce:	4904      	ldr	r1, [pc, #16]	; (276e0 <__swap+0x18>)
    ldr r1, [r1]
   276d0:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
   276d2:	6651      	str	r1, [r2, #100]	; 0x64
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
   276d4:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
   276d6:	6e50      	ldr	r0, [r2, #100]	; 0x64
    bx lr
   276d8:	4770      	bx	lr
   276da:	0000      	.short	0x0000
    ldr r1, =_kernel
   276dc:	20002d60 	.word	0x20002d60
    ldr r1, =_k_neg_eagain
   276e0:	000330f0 	.word	0x000330f0

000276e4 <_DebugMonitor>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _DebugMonitor(const NANO_ESF *esf)
{
   276e4:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
   276e6:	4802      	ldr	r0, [pc, #8]	; (276f0 <_DebugMonitor+0xc>)
   276e8:	f7db fc34 	bl	2f54 <printk>
   276ec:	bd08      	pop	{r3, pc}
   276ee:	bf00      	nop
   276f0:	00032d2c 	.word	0x00032d2c

000276f4 <_ReservedException>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
   276f4:	b508      	push	{r3, lr}
   276f6:	460a      	mov	r2, r1
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
   276f8:	290f      	cmp	r1, #15
   276fa:	dd05      	ble.n	27708 <_ReservedException+0x14>
   276fc:	4903      	ldr	r1, [pc, #12]	; (2770c <_ReservedException+0x18>)
   276fe:	3a10      	subs	r2, #16
   27700:	4803      	ldr	r0, [pc, #12]	; (27710 <_ReservedException+0x1c>)
   27702:	f7db fc27 	bl	2f54 <printk>
   27706:	bd08      	pop	{r3, pc}
   27708:	4902      	ldr	r1, [pc, #8]	; (27714 <_ReservedException+0x20>)
   2770a:	e7f8      	b.n	276fe <_ReservedException+0xa>
   2770c:	00032eb4 	.word	0x00032eb4
   27710:	00032ed0 	.word	0x00032ed0
   27714:	00032e9c 	.word	0x00032e9c

00027718 <_FaultThreadShow>:
{
   27718:	b510      	push	{r4, lr}
   2771a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   2771c:	f001 fc60 	bl	28fe0 <_impl_k_current_get>
	PR_EXC("  Executing thread ID (thread): %p\n"
   27720:	69a2      	ldr	r2, [r4, #24]
   27722:	4601      	mov	r1, r0
   27724:	4801      	ldr	r0, [pc, #4]	; (2772c <_FaultThreadShow+0x14>)
   27726:	f7db fc15 	bl	2f54 <printk>
   2772a:	bd10      	pop	{r4, pc}
   2772c:	00032d64 	.word	0x00032d64

00027730 <_MpuFault>:
{
   27730:	b538      	push	{r3, r4, r5, lr}
   27732:	4604      	mov	r4, r0
   27734:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
   27736:	481e      	ldr	r0, [pc, #120]	; (277b0 <_MpuFault+0x80>)
   27738:	f7db fc0c 	bl	2f54 <printk>
	_FaultThreadShow(esf);
   2773c:	4620      	mov	r0, r4
   2773e:	f7ff ffeb 	bl	27718 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
   27742:	4b1c      	ldr	r3, [pc, #112]	; (277b4 <_MpuFault+0x84>)
   27744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27746:	f013 0f10 	tst.w	r3, #16
   2774a:	d10f      	bne.n	2776c <_MpuFault+0x3c>
	} else if (SCB->CFSR & CFSR_MUNSTKERR_Msk) {
   2774c:	4b19      	ldr	r3, [pc, #100]	; (277b4 <_MpuFault+0x84>)
   2774e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27750:	f013 0f08 	tst.w	r3, #8
   27754:	d10e      	bne.n	27774 <_MpuFault+0x44>
	} else if (SCB->CFSR & CFSR_DACCVIOL_Msk) {
   27756:	4b17      	ldr	r3, [pc, #92]	; (277b4 <_MpuFault+0x84>)
   27758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2775a:	f013 0f02 	tst.w	r3, #2
   2775e:	d10d      	bne.n	2777c <_MpuFault+0x4c>
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
   27760:	4b14      	ldr	r3, [pc, #80]	; (277b4 <_MpuFault+0x84>)
   27762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27764:	f013 0f01 	tst.w	r3, #1
   27768:	d11d      	bne.n	277a6 <_MpuFault+0x76>
   2776a:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   2776c:	4812      	ldr	r0, [pc, #72]	; (277b8 <_MpuFault+0x88>)
   2776e:	f7db fbf1 	bl	2f54 <printk>
   27772:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   27774:	4811      	ldr	r0, [pc, #68]	; (277bc <_MpuFault+0x8c>)
   27776:	f7db fbed 	bl	2f54 <printk>
   2777a:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Data Access Violation\n");
   2777c:	4810      	ldr	r0, [pc, #64]	; (277c0 <_MpuFault+0x90>)
   2777e:	f7db fbe9 	bl	2f54 <printk>
		if (SCB->CFSR & CFSR_MMARVALID_Msk) {
   27782:	4b0c      	ldr	r3, [pc, #48]	; (277b4 <_MpuFault+0x84>)
   27784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27786:	f013 0f80 	tst.w	r3, #128	; 0x80
   2778a:	d0ee      	beq.n	2776a <_MpuFault+0x3a>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->MMFAR);
   2778c:	4b09      	ldr	r3, [pc, #36]	; (277b4 <_MpuFault+0x84>)
   2778e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   27790:	480c      	ldr	r0, [pc, #48]	; (277c4 <_MpuFault+0x94>)
   27792:	f7db fbdf 	bl	2f54 <printk>
			if (fromHardFault) {
   27796:	2d00      	cmp	r5, #0
   27798:	d0e7      	beq.n	2776a <_MpuFault+0x3a>
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
   2779a:	4a06      	ldr	r2, [pc, #24]	; (277b4 <_MpuFault+0x84>)
   2779c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2779e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   277a2:	6293      	str	r3, [r2, #40]	; 0x28
   277a4:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction Access Violation\n");
   277a6:	4808      	ldr	r0, [pc, #32]	; (277c8 <_MpuFault+0x98>)
   277a8:	f7db fbd4 	bl	2f54 <printk>
}
   277ac:	e7dd      	b.n	2776a <_MpuFault+0x3a>
   277ae:	bf00      	nop
   277b0:	00032e0c 	.word	0x00032e0c
   277b4:	e000ed00 	.word	0xe000ed00
   277b8:	00032e24 	.word	0x00032e24
   277bc:	00032e38 	.word	0x00032e38
   277c0:	00032e4c 	.word	0x00032e4c
   277c4:	00032e68 	.word	0x00032e68
   277c8:	00032e7c 	.word	0x00032e7c

000277cc <_BusFault>:
{
   277cc:	b538      	push	{r3, r4, r5, lr}
   277ce:	4604      	mov	r4, r0
   277d0:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
   277d2:	4827      	ldr	r0, [pc, #156]	; (27870 <_BusFault+0xa4>)
   277d4:	f7db fbbe 	bl	2f54 <printk>
	_FaultThreadShow(esf);
   277d8:	4620      	mov	r0, r4
   277da:	f7ff ff9d 	bl	27718 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_STKERR_Msk) {
   277de:	4b25      	ldr	r3, [pc, #148]	; (27874 <_BusFault+0xa8>)
   277e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   277e2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   277e6:	d114      	bne.n	27812 <_BusFault+0x46>
	} else if (SCB->CFSR & CFSR_UNSTKERR_Msk) {
   277e8:	4b22      	ldr	r3, [pc, #136]	; (27874 <_BusFault+0xa8>)
   277ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   277ec:	f413 6f00 	tst.w	r3, #2048	; 0x800
   277f0:	d113      	bne.n	2781a <_BusFault+0x4e>
	} else if (SCB->CFSR & CFSR_PRECISERR_Msk) {
   277f2:	4b20      	ldr	r3, [pc, #128]	; (27874 <_BusFault+0xa8>)
   277f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   277f6:	f413 7f00 	tst.w	r3, #512	; 0x200
   277fa:	d112      	bne.n	27822 <_BusFault+0x56>
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   277fc:	4b1d      	ldr	r3, [pc, #116]	; (27874 <_BusFault+0xa8>)
   277fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27800:	f413 6f80 	tst.w	r3, #1024	; 0x400
   27804:	d12b      	bne.n	2785e <_BusFault+0x92>
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
   27806:	4b1b      	ldr	r3, [pc, #108]	; (27874 <_BusFault+0xa8>)
   27808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2780a:	f413 7f80 	tst.w	r3, #256	; 0x100
   2780e:	d12a      	bne.n	27866 <_BusFault+0x9a>
   27810:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   27812:	4819      	ldr	r0, [pc, #100]	; (27878 <_BusFault+0xac>)
   27814:	f7db fb9e 	bl	2f54 <printk>
   27818:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   2781a:	4818      	ldr	r0, [pc, #96]	; (2787c <_BusFault+0xb0>)
   2781c:	f7db fb9a 	bl	2f54 <printk>
   27820:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Precise data bus error\n");
   27822:	4817      	ldr	r0, [pc, #92]	; (27880 <_BusFault+0xb4>)
   27824:	f7db fb96 	bl	2f54 <printk>
		if (SCB->CFSR & CFSR_BFARVALID_Msk) {
   27828:	4b12      	ldr	r3, [pc, #72]	; (27874 <_BusFault+0xa8>)
   2782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2782c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   27830:	d108      	bne.n	27844 <_BusFault+0x78>
		if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   27832:	4b10      	ldr	r3, [pc, #64]	; (27874 <_BusFault+0xa8>)
   27834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27836:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2783a:	d0e9      	beq.n	27810 <_BusFault+0x44>
			PR_EXC("  Imprecise data bus error\n");
   2783c:	4811      	ldr	r0, [pc, #68]	; (27884 <_BusFault+0xb8>)
   2783e:	f7db fb89 	bl	2f54 <printk>
   27842:	bd38      	pop	{r3, r4, r5, pc}
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->BFAR);
   27844:	4b0b      	ldr	r3, [pc, #44]	; (27874 <_BusFault+0xa8>)
   27846:	6b99      	ldr	r1, [r3, #56]	; 0x38
   27848:	480f      	ldr	r0, [pc, #60]	; (27888 <_BusFault+0xbc>)
   2784a:	f7db fb83 	bl	2f54 <printk>
			if (fromHardFault) {
   2784e:	2d00      	cmp	r5, #0
   27850:	d0ef      	beq.n	27832 <_BusFault+0x66>
				SCB->CFSR &= ~CFSR_BFARVALID_Msk;
   27852:	4a08      	ldr	r2, [pc, #32]	; (27874 <_BusFault+0xa8>)
   27854:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27856:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   2785a:	6293      	str	r3, [r2, #40]	; 0x28
   2785c:	e7e9      	b.n	27832 <_BusFault+0x66>
		PR_EXC("  Imprecise data bus error\n");
   2785e:	4809      	ldr	r0, [pc, #36]	; (27884 <_BusFault+0xb8>)
   27860:	f7db fb78 	bl	2f54 <printk>
   27864:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction bus error\n");
   27866:	4809      	ldr	r0, [pc, #36]	; (2788c <_BusFault+0xc0>)
   27868:	f7db fb74 	bl	2f54 <printk>
}
   2786c:	e7d0      	b.n	27810 <_BusFault+0x44>
   2786e:	bf00      	nop
   27870:	00032cc0 	.word	0x00032cc0
   27874:	e000ed00 	.word	0xe000ed00
   27878:	00032e24 	.word	0x00032e24
   2787c:	00032e38 	.word	0x00032e38
   27880:	00032cd8 	.word	0x00032cd8
   27884:	00032cf4 	.word	0x00032cf4
   27888:	00032e68 	.word	0x00032e68
   2788c:	00032d10 	.word	0x00032d10

00027890 <_UsageFault>:
{
   27890:	b510      	push	{r4, lr}
   27892:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
   27894:	4821      	ldr	r0, [pc, #132]	; (2791c <_UsageFault+0x8c>)
   27896:	f7db fb5d 	bl	2f54 <printk>
	_FaultThreadShow(esf);
   2789a:	4620      	mov	r0, r4
   2789c:	f7ff ff3c 	bl	27718 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
   278a0:	4b1f      	ldr	r3, [pc, #124]	; (27920 <_UsageFault+0x90>)
   278a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   278a4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   278a8:	d120      	bne.n	278ec <_UsageFault+0x5c>
	if (SCB->CFSR & CFSR_UNALIGNED_Msk) {
   278aa:	4b1d      	ldr	r3, [pc, #116]	; (27920 <_UsageFault+0x90>)
   278ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   278ae:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   278b2:	d11f      	bne.n	278f4 <_UsageFault+0x64>
	if (SCB->CFSR & CFSR_NOCP_Msk) {
   278b4:	4b1a      	ldr	r3, [pc, #104]	; (27920 <_UsageFault+0x90>)
   278b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   278b8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   278bc:	d11e      	bne.n	278fc <_UsageFault+0x6c>
	if (SCB->CFSR & CFSR_INVPC_Msk) {
   278be:	4b18      	ldr	r3, [pc, #96]	; (27920 <_UsageFault+0x90>)
   278c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   278c2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   278c6:	d11d      	bne.n	27904 <_UsageFault+0x74>
	if (SCB->CFSR & CFSR_INVSTATE_Msk) {
   278c8:	4b15      	ldr	r3, [pc, #84]	; (27920 <_UsageFault+0x90>)
   278ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   278cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   278d0:	d11c      	bne.n	2790c <_UsageFault+0x7c>
	if (SCB->CFSR & CFSR_UNDEFINSTR_Msk) {
   278d2:	4b13      	ldr	r3, [pc, #76]	; (27920 <_UsageFault+0x90>)
   278d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   278d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   278da:	d11b      	bne.n	27914 <_UsageFault+0x84>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   278dc:	4a10      	ldr	r2, [pc, #64]	; (27920 <_UsageFault+0x90>)
   278de:	6a93      	ldr	r3, [r2, #40]	; 0x28
   278e0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   278e4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   278e8:	6293      	str	r3, [r2, #40]	; 0x28
   278ea:	bd10      	pop	{r4, pc}
		PR_EXC("  Division by zero\n");
   278ec:	480d      	ldr	r0, [pc, #52]	; (27924 <_UsageFault+0x94>)
   278ee:	f7db fb31 	bl	2f54 <printk>
   278f2:	e7da      	b.n	278aa <_UsageFault+0x1a>
		PR_EXC("  Unaligned memory access\n");
   278f4:	480c      	ldr	r0, [pc, #48]	; (27928 <_UsageFault+0x98>)
   278f6:	f7db fb2d 	bl	2f54 <printk>
   278fa:	e7db      	b.n	278b4 <_UsageFault+0x24>
		PR_EXC("  No coprocessor instructions\n");
   278fc:	480b      	ldr	r0, [pc, #44]	; (2792c <_UsageFault+0x9c>)
   278fe:	f7db fb29 	bl	2f54 <printk>
   27902:	e7dc      	b.n	278be <_UsageFault+0x2e>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
   27904:	480a      	ldr	r0, [pc, #40]	; (27930 <_UsageFault+0xa0>)
   27906:	f7db fb25 	bl	2f54 <printk>
   2790a:	e7dd      	b.n	278c8 <_UsageFault+0x38>
		PR_EXC("  Illegal use of the EPSR\n");
   2790c:	4809      	ldr	r0, [pc, #36]	; (27934 <_UsageFault+0xa4>)
   2790e:	f7db fb21 	bl	2f54 <printk>
   27912:	e7de      	b.n	278d2 <_UsageFault+0x42>
		PR_EXC("  Attempt to execute undefined instruction\n");
   27914:	4808      	ldr	r0, [pc, #32]	; (27938 <_UsageFault+0xa8>)
   27916:	f7db fb1d 	bl	2f54 <printk>
   2791a:	e7df      	b.n	278dc <_UsageFault+0x4c>
   2791c:	00032ee4 	.word	0x00032ee4
   27920:	e000ed00 	.word	0xe000ed00
   27924:	00032f00 	.word	0x00032f00
   27928:	00032f14 	.word	0x00032f14
   2792c:	00032f30 	.word	0x00032f30
   27930:	00032f50 	.word	0x00032f50
   27934:	00032f78 	.word	0x00032f78
   27938:	00032f94 	.word	0x00032f94

0002793c <_HardFault>:
{
   2793c:	b510      	push	{r4, lr}
   2793e:	4604      	mov	r4, r0
	PR_EXC("***** HARD FAULT *****\n");
   27940:	4816      	ldr	r0, [pc, #88]	; (2799c <_HardFault+0x60>)
   27942:	f7db fb07 	bl	2f54 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
   27946:	4b16      	ldr	r3, [pc, #88]	; (279a0 <_HardFault+0x64>)
   27948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2794a:	f013 0f02 	tst.w	r3, #2
   2794e:	d105      	bne.n	2795c <_HardFault+0x20>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
   27950:	4b13      	ldr	r3, [pc, #76]	; (279a0 <_HardFault+0x64>)
   27952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27954:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   27958:	d104      	bne.n	27964 <_HardFault+0x28>
   2795a:	bd10      	pop	{r4, pc}
		PR_EXC("  Bus fault on vector table read\n");
   2795c:	4811      	ldr	r0, [pc, #68]	; (279a4 <_HardFault+0x68>)
   2795e:	f7db faf9 	bl	2f54 <printk>
   27962:	bd10      	pop	{r4, pc}
		PR_EXC("  Fault escalation (see below)\n");
   27964:	4810      	ldr	r0, [pc, #64]	; (279a8 <_HardFault+0x6c>)
   27966:	f7db faf5 	bl	2f54 <printk>
		if (SCB_MMFSR) {
   2796a:	4b10      	ldr	r3, [pc, #64]	; (279ac <_HardFault+0x70>)
   2796c:	781b      	ldrb	r3, [r3, #0]
   2796e:	b95b      	cbnz	r3, 27988 <_HardFault+0x4c>
		} else if (SCB_BFSR) {
   27970:	4b0f      	ldr	r3, [pc, #60]	; (279b0 <_HardFault+0x74>)
   27972:	781b      	ldrb	r3, [r3, #0]
   27974:	b96b      	cbnz	r3, 27992 <_HardFault+0x56>
		} else if (SCB_UFSR) {
   27976:	4b0f      	ldr	r3, [pc, #60]	; (279b4 <_HardFault+0x78>)
   27978:	881b      	ldrh	r3, [r3, #0]
   2797a:	b29b      	uxth	r3, r3
   2797c:	2b00      	cmp	r3, #0
   2797e:	d0ec      	beq.n	2795a <_HardFault+0x1e>
			_UsageFault(esf);
   27980:	4620      	mov	r0, r4
   27982:	f7ff ff85 	bl	27890 <_UsageFault>
}
   27986:	e7e8      	b.n	2795a <_HardFault+0x1e>
			_MpuFault(esf, 1);
   27988:	2101      	movs	r1, #1
   2798a:	4620      	mov	r0, r4
   2798c:	f7ff fed0 	bl	27730 <_MpuFault>
   27990:	bd10      	pop	{r4, pc}
			_BusFault(esf, 1);
   27992:	2101      	movs	r1, #1
   27994:	4620      	mov	r0, r4
   27996:	f7ff ff19 	bl	277cc <_BusFault>
   2799a:	bd10      	pop	{r4, pc}
   2799c:	00032db0 	.word	0x00032db0
   279a0:	e000ed00 	.word	0xe000ed00
   279a4:	00032dc8 	.word	0x00032dc8
   279a8:	00032dec 	.word	0x00032dec
   279ac:	e000ed28 	.word	0xe000ed28
   279b0:	e000ed29 	.word	0xe000ed29
   279b4:	e000ed2c 	.word	0xe000ed2c

000279b8 <_FaultDump>:
 *   Address: 0xff001234
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
   279b8:	b508      	push	{r3, lr}
	switch (fault) {
   279ba:	1ecb      	subs	r3, r1, #3
   279bc:	2b09      	cmp	r3, #9
   279be:	d817      	bhi.n	279f0 <_FaultDump+0x38>
   279c0:	e8df f003 	tbb	[pc, r3]
   279c4:	100c0805 	.word	0x100c0805
   279c8:	16161616 	.word	0x16161616
   279cc:	1316      	.short	0x1316
	case 3:
		_HardFault(esf);
   279ce:	f7ff ffb5 	bl	2793c <_HardFault>
		break;
   279d2:	bd08      	pop	{r3, pc}
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	case 4:
		_MpuFault(esf, 0);
   279d4:	2100      	movs	r1, #0
   279d6:	f7ff feab 	bl	27730 <_MpuFault>
		break;
   279da:	bd08      	pop	{r3, pc}
	case 5:
		_BusFault(esf, 0);
   279dc:	2100      	movs	r1, #0
   279de:	f7ff fef5 	bl	277cc <_BusFault>
		break;
   279e2:	bd08      	pop	{r3, pc}
	case 6:
		_UsageFault(esf);
   279e4:	f7ff ff54 	bl	27890 <_UsageFault>
		break;
   279e8:	bd08      	pop	{r3, pc}
	case 12:
		_DebugMonitor(esf);
   279ea:	f7ff fe7b 	bl	276e4 <_DebugMonitor>
		break;
   279ee:	bd08      	pop	{r3, pc}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	default:
		_ReservedException(esf, fault);
   279f0:	f7ff fe80 	bl	276f4 <_ReservedException>
   279f4:	bd08      	pop	{r3, pc}
	...

000279f8 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   279f8:	b510      	push	{r4, lr}
   279fa:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   279fc:	4b05      	ldr	r3, [pc, #20]	; (27a14 <_Fault+0x1c>)
   279fe:	6859      	ldr	r1, [r3, #4]

	FAULT_DUMP(esf, fault);
   27a00:	f3c1 0108 	ubfx	r1, r1, #0, #9
   27a04:	f7ff ffd8 	bl	279b8 <_FaultDump>

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   27a08:	4621      	mov	r1, r4
   27a0a:	2000      	movs	r0, #0
   27a0c:	f000 f8e0 	bl	27bd0 <_SysFatalErrorHandler>
   27a10:	bd10      	pop	{r4, pc}
   27a12:	bf00      	nop
   27a14:	e000ed00 	.word	0xe000ed00

00027a18 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   27a18:	4a02      	ldr	r2, [pc, #8]	; (27a24 <_FaultInit+0xc>)
   27a1a:	6953      	ldr	r3, [r2, #20]
   27a1c:	f043 0310 	orr.w	r3, r3, #16
   27a20:	6153      	str	r3, [r2, #20]
   27a22:	4770      	bx	lr
   27a24:	e000ed00 	.word	0xe000ed00

00027a28 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   27a28:	b243      	sxtb	r3, r0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   27a2a:	095b      	lsrs	r3, r3, #5
   27a2c:	f000 001f 	and.w	r0, r0, #31
   27a30:	2201      	movs	r2, #1
   27a32:	fa02 f000 	lsl.w	r0, r2, r0
   27a36:	4a02      	ldr	r2, [pc, #8]	; (27a40 <_arch_irq_enable+0x18>)
   27a38:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   27a3c:	4770      	bx	lr
   27a3e:	bf00      	nop
   27a40:	e000e100 	.word	0xe000e100

00027a44 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   27a44:	b243      	sxtb	r3, r0
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   27a46:	095b      	lsrs	r3, r3, #5
   27a48:	f000 001f 	and.w	r0, r0, #31
   27a4c:	2201      	movs	r2, #1
   27a4e:	fa02 f000 	lsl.w	r0, r2, r0
   27a52:	3320      	adds	r3, #32
   27a54:	4a01      	ldr	r2, [pc, #4]	; (27a5c <_arch_irq_disable+0x18>)
   27a56:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   27a5a:	4770      	bx	lr
   27a5c:	e000e100 	.word	0xe000e100

00027a60 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
   27a60:	0942      	lsrs	r2, r0, #5
   27a62:	4b05      	ldr	r3, [pc, #20]	; (27a78 <_arch_irq_is_enabled+0x18>)
   27a64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   27a68:	f000 001f 	and.w	r0, r0, #31
   27a6c:	2301      	movs	r3, #1
   27a6e:	fa03 f000 	lsl.w	r0, r3, r0
}
   27a72:	4010      	ands	r0, r2
   27a74:	4770      	bx	lr
   27a76:	bf00      	nop
   27a78:	e000e100 	.word	0xe000e100

00027a7c <_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   27a7c:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   27a7e:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) < 0)
   27a80:	2b00      	cmp	r3, #0
   27a82:	db08      	blt.n	27a96 <_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27a84:	0149      	lsls	r1, r1, #5
   27a86:	b2c9      	uxtb	r1, r1
   27a88:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   27a8c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   27a90:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   27a94:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27a96:	f000 000f 	and.w	r0, r0, #15
   27a9a:	0149      	lsls	r1, r1, #5
   27a9c:	b2c9      	uxtb	r1, r1
   27a9e:	4b01      	ldr	r3, [pc, #4]	; (27aa4 <_irq_priority_set+0x28>)
   27aa0:	5419      	strb	r1, [r3, r0]
   27aa2:	4770      	bx	lr
   27aa4:	e000ed14 	.word	0xe000ed14

00027aa8 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
   27aa8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	__reserved();
   27aaa:	f000 f847 	bl	27b3c <__bus_fault>
   27aae:	bd08      	pop	{r3, pc}

00027ab0 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   27ab0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   27ab2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
   27ab4:	4b04      	ldr	r3, [pc, #16]	; (27ac8 <_arch_isr_direct_pm+0x18>)
   27ab6:	6958      	ldr	r0, [r3, #20]
   27ab8:	b908      	cbnz	r0, 27abe <_arch_isr_direct_pm+0xe>
	}

#if defined(CONFIG_ARMV6_M)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("cpsie i" : : : "memory");
   27aba:	b662      	cpsie	i
   27abc:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   27abe:	2200      	movs	r2, #0
   27ac0:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
   27ac2:	f000 f9b5 	bl	27e30 <_sys_power_save_idle_exit>
   27ac6:	e7f8      	b.n	27aba <_arch_isr_direct_pm+0xa>
   27ac8:	20002d60 	.word	0x20002d60

00027acc <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   27acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27ace:	4605      	mov	r5, r0
   27ad0:	460c      	mov	r4, r1
   27ad2:	4616      	mov	r6, r2
   27ad4:	461f      	mov	r7, r3
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
   27ad6:	21aa      	movs	r1, #170	; 0xaa
   27ad8:	4620      	mov	r0, r4
   27ada:	f002 feed 	bl	2a8b8 <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   27ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27ae0:	2204      	movs	r2, #4
   27ae2:	9909      	ldr	r1, [sp, #36]	; 0x24
   27ae4:	4628      	mov	r0, r5
   27ae6:	f001 ff51 	bl	2998c <_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   27aea:	2300      	movs	r3, #0
   27aec:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
   27aee:	652b      	str	r3, [r5, #80]	; 0x50
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
   27af0:	65ac      	str	r4, [r5, #88]	; 0x58
	thread->stack_info.size = (u32_t)stackSize;
   27af2:	65ee      	str	r6, [r5, #92]	; 0x5c
	struct __esf *pInitCtx;
	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   27af4:	f1a6 0120 	sub.w	r1, r6, #32
   27af8:	4421      	add	r1, r4
   27afa:	f021 0107 	bic.w	r1, r1, #7
						     sizeof(struct __esf)));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   27afe:	4a08      	ldr	r2, [pc, #32]	; (27b20 <_new_thread+0x54>)
   27b00:	f022 0201 	bic.w	r2, r2, #1
   27b04:	618a      	str	r2, [r1, #24]
	pInitCtx->a1 = (u32_t)pEntry;
   27b06:	600f      	str	r7, [r1, #0]
	pInitCtx->a2 = (u32_t)parameter1;
   27b08:	9a06      	ldr	r2, [sp, #24]
   27b0a:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   27b0c:	9a07      	ldr	r2, [sp, #28]
   27b0e:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   27b10:	9a08      	ldr	r2, [sp, #32]
   27b12:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
   27b14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   27b18:	61ca      	str	r2, [r1, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   27b1a:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   27b1c:	662b      	str	r3, [r5, #96]	; 0x60
   27b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27b20:	00029675 	.word	0x00029675

00027b24 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   27b24:	4901      	ldr	r1, [pc, #4]	; (27b2c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   27b26:	2210      	movs	r2, #16
	str r2, [r1]
   27b28:	600a      	str	r2, [r1, #0]
	bx lr
   27b2a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   27b2c:	e000ed10 	.word	0xe000ed10

00027b30 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   27b30:	4040      	eors	r0, r0
	msr BASEPRI, r0
   27b32:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
   27b36:	bf30      	wfi

	bx lr
   27b38:	4770      	bx	lr
   27b3a:	bf00      	nop

00027b3c <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
   27b3c:	4040      	eors	r0, r0
	msr BASEPRI, r0
   27b3e:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
   27b42:	f8df c01c 	ldr.w	ip, [pc, #28]	; 27b60 <__bus_fault+0x24>
	ldr ip, [ip]
   27b46:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
   27b4a:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
   27b4e:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
   27b50:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
   27b54:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
   27b58:	b500      	push	{lr}
	bl _Fault
   27b5a:	f7ff ff4d 	bl	279f8 <_Fault>

	pop {pc}
   27b5e:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
   27b60:	e000ed04 	.word	0xe000ed04

00027b64 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   27b64:	b538      	push	{r3, r4, r5, lr}
   27b66:	4604      	mov	r4, r0
   27b68:	460d      	mov	r5, r1
	switch (reason) {
   27b6a:	2804      	cmp	r0, #4
   27b6c:	d017      	beq.n	27b9e <_NanoFatalErrorHandler+0x3a>
   27b6e:	2805      	cmp	r0, #5
   27b70:	d019      	beq.n	27ba6 <_NanoFatalErrorHandler+0x42>
   27b72:	2803      	cmp	r0, #3
   27b74:	d004      	beq.n	27b80 <_NanoFatalErrorHandler+0x1c>
	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   27b76:	4601      	mov	r1, r0
   27b78:	480d      	ldr	r0, [pc, #52]	; (27bb0 <_NanoFatalErrorHandler+0x4c>)
   27b7a:	f7db f9eb 	bl	2f54 <printk>
		break;
   27b7e:	e002      	b.n	27b86 <_NanoFatalErrorHandler+0x22>
		printk("**** Kernel Allocation Failure! ****\n");
   27b80:	480c      	ldr	r0, [pc, #48]	; (27bb4 <_NanoFatalErrorHandler+0x50>)
   27b82:	f7db f9e7 	bl	2f54 <printk>
   27b86:	f001 fa2b 	bl	28fe0 <_impl_k_current_get>
	}
	printk("Current thread ID = %p\n"
   27b8a:	69aa      	ldr	r2, [r5, #24]
   27b8c:	4601      	mov	r1, r0
   27b8e:	480a      	ldr	r0, [pc, #40]	; (27bb8 <_NanoFatalErrorHandler+0x54>)
   27b90:	f7db f9e0 	bl	2f54 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   27b94:	4629      	mov	r1, r5
   27b96:	4620      	mov	r0, r4
   27b98:	f000 f81a 	bl	27bd0 <_SysFatalErrorHandler>
   27b9c:	bd38      	pop	{r3, r4, r5, pc}
		printk("***** Kernel OOPS! *****\n");
   27b9e:	4807      	ldr	r0, [pc, #28]	; (27bbc <_NanoFatalErrorHandler+0x58>)
   27ba0:	f7db f9d8 	bl	2f54 <printk>
		break;
   27ba4:	e7ef      	b.n	27b86 <_NanoFatalErrorHandler+0x22>
		printk("***** Kernel Panic! *****\n");
   27ba6:	4806      	ldr	r0, [pc, #24]	; (27bc0 <_NanoFatalErrorHandler+0x5c>)
   27ba8:	f7db f9d4 	bl	2f54 <printk>
		break;
   27bac:	e7eb      	b.n	27b86 <_NanoFatalErrorHandler+0x22>
   27bae:	bf00      	nop
   27bb0:	00033020 	.word	0x00033020
   27bb4:	00032fc0 	.word	0x00032fc0
   27bb8:	00033044 	.word	0x00033044
   27bbc:	00032fe8 	.word	0x00032fe8
   27bc0:	00033004 	.word	0x00033004

00027bc4 <_do_kernel_oops>:
}

void _do_kernel_oops(const NANO_ESF *esf)
{
   27bc4:	b508      	push	{r3, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
   27bc6:	4601      	mov	r1, r0
   27bc8:	6800      	ldr	r0, [r0, #0]
   27bca:	f7ff ffcb 	bl	27b64 <_NanoFatalErrorHandler>
   27bce:	bd08      	pop	{r3, pc}

00027bd0 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   27bd0:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   27bd2:	2805      	cmp	r0, #5
   27bd4:	d00c      	beq.n	27bf0 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   27bd6:	f001 fd31 	bl	2963c <k_is_in_isr>
   27bda:	b910      	cbnz	r0, 27be2 <_SysFatalErrorHandler+0x12>
   27bdc:	f001 fd42 	bl	29664 <_is_thread_essential>
   27be0:	b158      	cbz	r0, 27bfa <_SysFatalErrorHandler+0x2a>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   27be2:	f001 fd2b 	bl	2963c <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
   27be6:	b130      	cbz	r0, 27bf6 <_SysFatalErrorHandler+0x26>
   27be8:	4908      	ldr	r1, [pc, #32]	; (27c0c <_SysFatalErrorHandler+0x3c>)
   27bea:	4809      	ldr	r0, [pc, #36]	; (27c10 <_SysFatalErrorHandler+0x40>)
   27bec:	f7db f9b2 	bl	2f54 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   27bf0:	f7ff ff9e 	bl	27b30 <k_cpu_idle>
   27bf4:	e7fc      	b.n	27bf0 <_SysFatalErrorHandler+0x20>
		printk("Fatal fault in %s! Spinning...\n",
   27bf6:	4907      	ldr	r1, [pc, #28]	; (27c14 <_SysFatalErrorHandler+0x44>)
   27bf8:	e7f7      	b.n	27bea <_SysFatalErrorHandler+0x1a>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   27bfa:	4c07      	ldr	r4, [pc, #28]	; (27c18 <_SysFatalErrorHandler+0x48>)
   27bfc:	68a1      	ldr	r1, [r4, #8]
   27bfe:	4807      	ldr	r0, [pc, #28]	; (27c1c <_SysFatalErrorHandler+0x4c>)
   27c00:	f7db f9a8 	bl	2f54 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   27c04:	68a0      	ldr	r0, [r4, #8]
   27c06:	f000 f80b 	bl	27c20 <_impl_k_thread_abort>
	return;
   27c0a:	bd10      	pop	{r4, pc}
   27c0c:	00032490 	.word	0x00032490
   27c10:	00033094 	.word	0x00033094
   27c14:	00033080 	.word	0x00033080
   27c18:	20002d60 	.word	0x20002d60
   27c1c:	000330b4 	.word	0x000330b4

00027c20 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
   27c20:	b538      	push	{r3, r4, r5, lr}
   27c22:	4605      	mov	r5, r0
	__asm__ volatile(
   27c24:	f04f 0320 	mov.w	r3, #32
   27c28:	f3ef 8411 	mrs	r4, BASEPRI
   27c2c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
   27c30:	f001 fe28 	bl	29884 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
   27c34:	4b0b      	ldr	r3, [pc, #44]	; (27c64 <_impl_k_thread_abort+0x44>)
   27c36:	689b      	ldr	r3, [r3, #8]
   27c38:	429d      	cmp	r5, r3
   27c3a:	d003      	beq.n	27c44 <_impl_k_thread_abort+0x24>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   27c3c:	4620      	mov	r0, r4
   27c3e:	f001 fa03 	bl	29048 <_reschedule_threads>
   27c42:	bd38      	pop	{r3, r4, r5, pc}
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   27c44:	4b08      	ldr	r3, [pc, #32]	; (27c68 <_impl_k_thread_abort+0x48>)
   27c46:	685b      	ldr	r3, [r3, #4]
   27c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
   27c4c:	b12b      	cbz	r3, 27c5a <_impl_k_thread_abort+0x3a>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   27c4e:	4a06      	ldr	r2, [pc, #24]	; (27c68 <_impl_k_thread_abort+0x48>)
   27c50:	6853      	ldr	r3, [r2, #4]
   27c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   27c56:	6053      	str	r3, [r2, #4]
   27c58:	e7f0      	b.n	27c3c <_impl_k_thread_abort+0x1c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   27c5a:	f001 f9ef 	bl	2903c <_update_time_slice_before_swap>
#endif

	return __swap(key);
   27c5e:	4620      	mov	r0, r4
   27c60:	f7ff fd32 	bl	276c8 <__swap>
   27c64:	20002d60 	.word	0x20002d60
   27c68:	e000ed00 	.word	0xe000ed00

00027c6c <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
   27c6c:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   27c6e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   27c70:	4a0b      	ldr	r2, [pc, #44]	; (27ca0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   27c72:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   27c74:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M)
	ittt ne
   27c76:	bf1e      	ittt	ne
	movne	r1, #0
   27c78:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   27c7a:	6151      	strne	r1, [r2, #20]
		blxne	_sys_power_save_idle_exit
   27c7c:	f000 f8d8 	blne	27e30 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   27c80:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   27c82:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
   27c86:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   27c8a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   27c8e:	4905      	ldr	r1, [pc, #20]	; (27ca4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   27c90:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   27c92:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
   27c94:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
   27c96:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
   27c9a:	f7ff bca5 	b.w	275e8 <_ExcExit>
   27c9e:	0000      	.short	0x0000
	ldr r2, =_kernel
   27ca0:	20002d60 	.word	0x20002d60
	ldr r1, =_sw_isr_table
   27ca4:	000000dc 	.word	0x000000dc

00027ca8 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   27ca8:	2020      	movs	r0, #32
    msr BASEPRI, r0
   27caa:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
   27cae:	4809      	ldr	r0, [pc, #36]	; (27cd4 <__reset+0x2c>)
    ldr r1, =0xaa
   27cb0:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
   27cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
   27cb8:	f002 fdfe 	bl	2a8b8 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   27cbc:	4805      	ldr	r0, [pc, #20]	; (27cd4 <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   27cbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   27cc2:	1840      	adds	r0, r0, r1
    msr PSP, r0
   27cc4:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
   27cc8:	2002      	movs	r0, #2
    msr CONTROL, r0
   27cca:	f380 8814 	msr	CONTROL, r0

    b _PrepC
   27cce:	f000 b807 	b.w	27ce0 <_PrepC>
   27cd2:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   27cd4:	2000b248 	.word	0x2000b248

00027cd8 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
   27cd8:	bf30      	wfi
    b _SysNmiOnReset
   27cda:	f7ff bffd 	b.w	27cd8 <_SysNmiOnReset>
   27cde:	bf00      	nop

00027ce0 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   27ce0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   27ce2:	4a07      	ldr	r2, [pc, #28]	; (27d00 <_PrepC+0x20>)
   27ce4:	4b07      	ldr	r3, [pc, #28]	; (27d04 <_PrepC+0x24>)
   27ce6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   27cea:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   27cec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27cf0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
   27cf4:	f000 f9d6 	bl	280a4 <_bss_zero>
	_data_copy();
   27cf8:	f000 f9e0 	bl	280bc <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
   27cfc:	f000 fa00 	bl	28100 <_Cstart>
   27d00:	e000ed00 	.word	0xe000ed00
   27d04:	00000000 	.word	0x00000000

00027d08 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   27d08:	b508      	push	{r3, lr}
	handler();
   27d0a:	f7ff ffe5 	bl	27cd8 <_SysNmiOnReset>
	_ExcExit();
   27d0e:	f7ff fc6b 	bl	275e8 <_ExcExit>
   27d12:	bd08      	pop	{r3, pc}

00027d14 <_region_init>:

static void _region_init(u32_t index, u32_t region_addr,
			 u32_t region_attr)
{
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
   27d14:	4b05      	ldr	r3, [pc, #20]	; (27d2c <_region_init+0x18>)
   27d16:	6098      	str	r0, [r3, #8]
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   27d18:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
   27d1c:	4308      	orrs	r0, r1
   27d1e:	f040 0010 	orr.w	r0, r0, #16
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   27d22:	60d8      	str	r0, [r3, #12]
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
   27d24:	f042 0201 	orr.w	r2, r2, #1
   27d28:	611a      	str	r2, [r3, #16]
   27d2a:	4770      	bx	lr
   27d2c:	e000ed90 	.word	0xe000ed90

00027d30 <_arm_mpu_config>:
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
   27d30:	4b14      	ldr	r3, [pc, #80]	; (27d84 <_arm_mpu_config+0x54>)
   27d32:	681a      	ldr	r2, [r3, #0]
	u32_t type = ARM_MPU_DEV->type;
   27d34:	4b14      	ldr	r3, [pc, #80]	; (27d88 <_arm_mpu_config+0x58>)
   27d36:	681b      	ldr	r3, [r3, #0]
	if (mpu_config.num_regions > _get_num_regions()) {
   27d38:	f3c3 2307 	ubfx	r3, r3, #8, #8
   27d3c:	429a      	cmp	r2, r3
   27d3e:	d81f      	bhi.n	27d80 <_arm_mpu_config+0x50>
{
   27d40:	b510      	push	{r4, lr}
		return;
	}

	/* Disable MPU */
	ARM_MPU_DEV->ctrl = 0;
   27d42:	2400      	movs	r4, #0
   27d44:	4b10      	ldr	r3, [pc, #64]	; (27d88 <_arm_mpu_config+0x58>)
   27d46:	605c      	str	r4, [r3, #4]

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   27d48:	e00b      	b.n	27d62 <_arm_mpu_config+0x32>
		_region_init(r_index,
			     mpu_config.mpu_regions[r_index].base,
   27d4a:	4b0e      	ldr	r3, [pc, #56]	; (27d84 <_arm_mpu_config+0x54>)
   27d4c:	6859      	ldr	r1, [r3, #4]
   27d4e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   27d52:	0093      	lsls	r3, r2, #2
   27d54:	18ca      	adds	r2, r1, r3
		_region_init(r_index,
   27d56:	6892      	ldr	r2, [r2, #8]
   27d58:	58c9      	ldr	r1, [r1, r3]
   27d5a:	4620      	mov	r0, r4
   27d5c:	f7ff ffda 	bl	27d14 <_region_init>
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   27d60:	3401      	adds	r4, #1
   27d62:	4b08      	ldr	r3, [pc, #32]	; (27d84 <_arm_mpu_config+0x54>)
   27d64:	681b      	ldr	r3, [r3, #0]
   27d66:	429c      	cmp	r4, r3
   27d68:	d3ef      	bcc.n	27d4a <_arm_mpu_config+0x1a>
			     mpu_config.mpu_regions[r_index].attr);
	}

	/* Enable MPU */
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
   27d6a:	2205      	movs	r2, #5
   27d6c:	4b06      	ldr	r3, [pc, #24]	; (27d88 <_arm_mpu_config+0x58>)
   27d6e:	605a      	str	r2, [r3, #4]

	arm_mpu_enabled = 1;
   27d70:	2201      	movs	r2, #1
   27d72:	4b06      	ldr	r3, [pc, #24]	; (27d8c <_arm_mpu_config+0x5c>)
   27d74:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
   27d76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27d7a:	f3bf 8f6f 	isb	sy
   27d7e:	bd10      	pop	{r4, pc}
   27d80:	4770      	bx	lr
   27d82:	bf00      	nop
   27d84:	2000cb20 	.word	0x2000cb20
   27d88:	e000ed90 	.word	0xe000ed90
   27d8c:	20002c8c 	.word	0x20002c8c

00027d90 <arm_mpu_init>:
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
   27d90:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);

	_arm_mpu_config();
   27d92:	f7ff ffcd 	bl	27d30 <_arm_mpu_config>

	return 0;
}
   27d96:	2000      	movs	r0, #0
   27d98:	bd08      	pop	{r3, pc}
	...

00027d9c <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   27d9c:	b538      	push	{r3, r4, r5, lr}
   27d9e:	4605      	mov	r5, r0
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   27da0:	4b07      	ldr	r3, [pc, #28]	; (27dc0 <_sys_device_do_config_level+0x24>)
   27da2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   27da6:	e004      	b.n	27db2 <_sys_device_do_config_level+0x16>
								info++) {
		struct device_config *device = info->config;
   27da8:	6823      	ldr	r3, [r4, #0]

		device->init(info);
   27daa:	685b      	ldr	r3, [r3, #4]
   27dac:	4620      	mov	r0, r4
   27dae:	4798      	blx	r3
								info++) {
   27db0:	340c      	adds	r4, #12
	for (info = config_levels[level]; info < config_levels[level+1];
   27db2:	1c6b      	adds	r3, r5, #1
   27db4:	4a02      	ldr	r2, [pc, #8]	; (27dc0 <_sys_device_do_config_level+0x24>)
   27db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   27dba:	429c      	cmp	r4, r3
   27dbc:	d3f4      	bcc.n	27da8 <_sys_device_do_config_level+0xc>
		_k_object_init(info);
	}
}
   27dbe:	bd38      	pop	{r3, r4, r5, pc}
   27dc0:	000330dc 	.word	0x000330dc

00027dc4 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   27dc4:	b538      	push	{r3, r4, r5, lr}
   27dc6:	4605      	mov	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   27dc8:	4c0a      	ldr	r4, [pc, #40]	; (27df4 <device_get_binding+0x30>)
   27dca:	e000      	b.n	27dce <device_get_binding+0xa>
   27dcc:	340c      	adds	r4, #12
   27dce:	4b0a      	ldr	r3, [pc, #40]	; (27df8 <device_get_binding+0x34>)
   27dd0:	429c      	cmp	r4, r3
   27dd2:	d00c      	beq.n	27dee <device_get_binding+0x2a>
		if (!info->driver_api) {
   27dd4:	6863      	ldr	r3, [r4, #4]
   27dd6:	2b00      	cmp	r3, #0
   27dd8:	d0f8      	beq.n	27dcc <device_get_binding+0x8>
			continue;
		}

		if (name == info->config->name) {
   27dda:	6823      	ldr	r3, [r4, #0]
   27ddc:	6819      	ldr	r1, [r3, #0]
   27dde:	42a9      	cmp	r1, r5
   27de0:	d006      	beq.n	27df0 <device_get_binding+0x2c>
			return info;
		}

		if (!strcmp(name, info->config->name)) {
   27de2:	4628      	mov	r0, r5
   27de4:	f7d8 fb10 	bl	408 <strcmp>
   27de8:	2800      	cmp	r0, #0
   27dea:	d1ef      	bne.n	27dcc <device_get_binding+0x8>
   27dec:	e000      	b.n	27df0 <device_get_binding+0x2c>
			return info;
		}
	}

	return NULL;
   27dee:	2400      	movs	r4, #0
}
   27df0:	4620      	mov	r0, r4
   27df2:	bd38      	pop	{r3, r4, r5, pc}
   27df4:	2000d51c 	.word	0x2000d51c
   27df8:	2000d5dc 	.word	0x2000d5dc

00027dfc <set_kernel_idle_time_in_ticks>:
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
   27dfc:	4b01      	ldr	r3, [pc, #4]	; (27e04 <set_kernel_idle_time_in_ticks+0x8>)
   27dfe:	6158      	str	r0, [r3, #20]
   27e00:	4770      	bx	lr
   27e02:	bf00      	nop
   27e04:	20002d60 	.word	0x20002d60

00027e08 <_sys_power_save_idle>:
#else
#define set_kernel_idle_time_in_ticks(x) do { } while (0)
#endif

static void _sys_power_save_idle(s32_t ticks)
{
   27e08:	b510      	push	{r4, lr}
   27e0a:	4604      	mov	r4, r0
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
   27e0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27e10:	d003      	beq.n	27e1a <_sys_power_save_idle+0x12>
   27e12:	4b06      	ldr	r3, [pc, #24]	; (27e2c <_sys_power_save_idle+0x24>)
   27e14:	681b      	ldr	r3, [r3, #0]
   27e16:	4298      	cmp	r0, r3
   27e18:	db02      	blt.n	27e20 <_sys_power_save_idle+0x18>
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
   27e1a:	4620      	mov	r0, r4
   27e1c:	f7da fb0e 	bl	243c <_timer_idle_enter>
	}

	set_kernel_idle_time_in_ticks(ticks);
   27e20:	4620      	mov	r0, r4
   27e22:	f7ff ffeb 	bl	27dfc <set_kernel_idle_time_in_ticks>
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   27e26:	f7ff fe83 	bl	27b30 <k_cpu_idle>
   27e2a:	bd10      	pop	{r4, pc}
   27e2c:	2000cb64 	.word	0x2000cb64

00027e30 <_sys_power_save_idle_exit>:
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
   27e30:	b508      	push	{r3, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   27e32:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27e36:	d003      	beq.n	27e40 <_sys_power_save_idle_exit+0x10>
   27e38:	4b03      	ldr	r3, [pc, #12]	; (27e48 <_sys_power_save_idle_exit+0x18>)
   27e3a:	681b      	ldr	r3, [r3, #0]
   27e3c:	4298      	cmp	r0, r3
   27e3e:	db01      	blt.n	27e44 <_sys_power_save_idle_exit+0x14>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   27e40:	f7da fb12 	bl	2468 <_timer_idle_exit>
   27e44:	bd08      	pop	{r3, pc}
   27e46:	bf00      	nop
   27e48:	2000cb64 	.word	0x2000cb64

00027e4c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   27e4c:	b508      	push	{r3, lr}
   27e4e:	e005      	b.n	27e5c <idle+0x10>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27e50:	2300      	movs	r3, #0
   27e52:	e00e      	b.n	27e72 <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   27e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__idle_time_stamp = (u64_t)k_cycle_get_32();
#endif

	for (;;) {
		(void)irq_lock();
		_sys_power_save_idle(_get_next_timeout_expiry());
   27e58:	f7ff ffd6 	bl	27e08 <_sys_power_save_idle>
   27e5c:	f04f 0220 	mov.w	r2, #32
   27e60:	f3ef 8311 	mrs	r3, BASEPRI
   27e64:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   27e68:	4a04      	ldr	r2, [pc, #16]	; (27e7c <idle+0x30>)
   27e6a:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27e6e:	4293      	cmp	r3, r2
   27e70:	d0ee      	beq.n	27e50 <idle+0x4>
   27e72:	2b00      	cmp	r3, #0
   27e74:	d0ee      	beq.n	27e54 <idle+0x8>
   27e76:	6918      	ldr	r0, [r3, #16]
   27e78:	e7ee      	b.n	27e58 <idle+0xc>
   27e7a:	bf00      	nop
   27e7c:	20002d60 	.word	0x20002d60

00027e80 <switch_to_main_thread>:

	kernel_arch_init();
}

static void switch_to_main_thread(void)
{
   27e80:	b480      	push	{r7}
   27e82:	af00      	add	r7, sp, #0
	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   27e84:	4b07      	ldr	r3, [pc, #28]	; (27ea4 <switch_to_main_thread+0x24>)
   27e86:	f023 0307 	bic.w	r3, r3, #7

	_current = main_thread;
   27e8a:	4907      	ldr	r1, [pc, #28]	; (27ea8 <switch_to_main_thread+0x28>)
   27e8c:	4a07      	ldr	r2, [pc, #28]	; (27eac <switch_to_main_thread+0x2c>)
   27e8e:	6091      	str	r1, [r2, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   27e90:	4c07      	ldr	r4, [pc, #28]	; (27eb0 <switch_to_main_thread+0x30>)
   27e92:	4a08      	ldr	r2, [pc, #32]	; (27eb4 <switch_to_main_thread+0x34>)
   27e94:	f383 8809 	msr	PSP, r3
   27e98:	2100      	movs	r1, #0
   27e9a:	f381 8811 	msr	BASEPRI, r1
   27e9e:	4610      	mov	r0, r2
   27ea0:	4720      	bx	r4
   27ea2:	bf00      	nop
   27ea4:	2000b108 	.word	0x2000b108
   27ea8:	20002cf8 	.word	0x20002cf8
   27eac:	20002d60 	.word	0x20002d60
   27eb0:	00029675 	.word	0x00029675
   27eb4:	000280d9 	.word	0x000280d9

00027eb8 <prepare_multithreading>:
{
   27eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   27eba:	b087      	sub	sp, #28
	_IntLibInit();
   27ebc:	f7ff fbaa 	bl	27614 <_IntLibInit>
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   27ec0:	2300      	movs	r3, #0
   27ec2:	e007      	b.n	27ed4 <prepare_multithreading+0x1c>
		sys_dlist_init(&_ready_q.q[ii]);
   27ec4:	1d18      	adds	r0, r3, #4
   27ec6:	4927      	ldr	r1, [pc, #156]	; (27f64 <prepare_multithreading+0xac>)
   27ec8:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
	list->head = (sys_dnode_t *)list;
   27ecc:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
	list->tail = (sys_dnode_t *)list;
   27ed0:	6052      	str	r2, [r2, #4]
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   27ed2:	3301      	adds	r3, #1
   27ed4:	2b1f      	cmp	r3, #31
   27ed6:	ddf5      	ble.n	27ec4 <prepare_multithreading+0xc>
	_ready_q.cache = _main_thread;
   27ed8:	4e22      	ldr	r6, [pc, #136]	; (27f64 <prepare_multithreading+0xac>)
   27eda:	4d23      	ldr	r5, [pc, #140]	; (27f68 <prepare_multithreading+0xb0>)
   27edc:	61b5      	str	r5, [r6, #24]
	_setup_new_thread(_main_thread, _main_stack,
   27ede:	2701      	movs	r7, #1
   27ee0:	9704      	str	r7, [sp, #16]
   27ee2:	2400      	movs	r4, #0
   27ee4:	9403      	str	r4, [sp, #12]
   27ee6:	9402      	str	r4, [sp, #8]
   27ee8:	9401      	str	r4, [sp, #4]
   27eea:	9400      	str	r4, [sp, #0]
   27eec:	4b1f      	ldr	r3, [pc, #124]	; (27f6c <prepare_multithreading+0xb4>)
   27eee:	f44f 6200 	mov.w	r2, #2048	; 0x800
   27ef2:	491f      	ldr	r1, [pc, #124]	; (27f70 <prepare_multithreading+0xb8>)
   27ef4:	4628      	mov	r0, r5
   27ef6:	f001 fc9b 	bl	29830 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   27efa:	7a6b      	ldrb	r3, [r5, #9]
   27efc:	f023 0304 	bic.w	r3, r3, #4
   27f00:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   27f02:	4628      	mov	r0, r5
   27f04:	f000 ff08 	bl	28d18 <_add_thread_to_ready_q>
	_setup_new_thread(_idle_thread, _idle_stack,
   27f08:	4d1a      	ldr	r5, [pc, #104]	; (27f74 <prepare_multithreading+0xbc>)
   27f0a:	9704      	str	r7, [sp, #16]
   27f0c:	230f      	movs	r3, #15
   27f0e:	9303      	str	r3, [sp, #12]
   27f10:	9402      	str	r4, [sp, #8]
   27f12:	9401      	str	r4, [sp, #4]
   27f14:	9400      	str	r4, [sp, #0]
   27f16:	4b18      	ldr	r3, [pc, #96]	; (27f78 <prepare_multithreading+0xc0>)
   27f18:	f44f 72a0 	mov.w	r2, #320	; 0x140
   27f1c:	4917      	ldr	r1, [pc, #92]	; (27f7c <prepare_multithreading+0xc4>)
   27f1e:	4628      	mov	r0, r5
   27f20:	f001 fc86 	bl	29830 <_setup_new_thread>
   27f24:	7a6b      	ldrb	r3, [r5, #9]
   27f26:	f023 0304 	bic.w	r3, r3, #4
   27f2a:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_idle_thread);
   27f2c:	4628      	mov	r0, r5
   27f2e:	f000 fef3 	bl	28d18 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   27f32:	f106 030c 	add.w	r3, r6, #12
   27f36:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
   27f38:	6133      	str	r3, [r6, #16]
 *
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   27f3a:	4b11      	ldr	r3, [pc, #68]	; (27f80 <prepare_multithreading+0xc8>)
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   27f3c:	f383 8808 	msr	MSP, r3
   27f40:	4b10      	ldr	r3, [pc, #64]	; (27f84 <prepare_multithreading+0xcc>)
   27f42:	22e0      	movs	r2, #224	; 0xe0
   27f44:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   27f48:	77dc      	strb	r4, [r3, #31]
   27f4a:	761c      	strb	r4, [r3, #24]
   27f4c:	765c      	strb	r4, [r3, #25]
   27f4e:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   27f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   27f52:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   27f56:	625a      	str	r2, [r3, #36]	; 0x24
	_FaultInit();
   27f58:	f7ff fd5e 	bl	27a18 <_FaultInit>
	_CpuIdleInit();
   27f5c:	f7ff fde2 	bl	27b24 <_CpuIdleInit>
}
   27f60:	b007      	add	sp, #28
   27f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27f64:	20002d60 	.word	0x20002d60
   27f68:	20002cf8 	.word	0x20002cf8
   27f6c:	000280d9 	.word	0x000280d9
   27f70:	2000a908 	.word	0x2000a908
   27f74:	20002c90 	.word	0x20002c90
   27f78:	00027e4d 	.word	0x00027e4d
   27f7c:	2000b108 	.word	0x2000b108
   27f80:	2000ba48 	.word	0x2000ba48
   27f84:	e000ed00 	.word	0xe000ed00

00027f88 <k_call_stacks_analyze>:
{
   27f88:	b500      	push	{lr}
   27f8a:	b085      	sub	sp, #20
	printk("Kernel stacks:\n");
   27f8c:	483a      	ldr	r0, [pc, #232]	; (28078 <k_call_stacks_analyze+0xf0>)
   27f8e:	f7da ffe1 	bl	2f54 <printk>
   27f92:	2200      	movs	r2, #0
	size_t unused = 0;
   27f94:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27f96:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   27f9a:	d206      	bcs.n	27faa <k_call_stacks_analyze+0x22>
		if ((unsigned char)stack[i] == 0xaa) {
   27f9c:	4937      	ldr	r1, [pc, #220]	; (2807c <k_call_stacks_analyze+0xf4>)
   27f9e:	5c89      	ldrb	r1, [r1, r2]
   27fa0:	29aa      	cmp	r1, #170	; 0xaa
   27fa2:	d102      	bne.n	27faa <k_call_stacks_analyze+0x22>
			unused++;
   27fa4:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27fa6:	3201      	adds	r2, #1
   27fa8:	e7f5      	b.n	27f96 <k_call_stacks_analyze+0xe>
	pcnt = ((size - unused) * 100) / size;
   27faa:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   27fae:	2264      	movs	r2, #100	; 0x64
   27fb0:	fb02 f201 	mul.w	r2, r2, r1
   27fb4:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27fb6:	9202      	str	r2, [sp, #8]
   27fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   27fbc:	9201      	str	r2, [sp, #4]
   27fbe:	9100      	str	r1, [sp, #0]
   27fc0:	492f      	ldr	r1, [pc, #188]	; (28080 <k_call_stacks_analyze+0xf8>)
   27fc2:	4830      	ldr	r0, [pc, #192]	; (28084 <k_call_stacks_analyze+0xfc>)
   27fc4:	f7da ffc6 	bl	2f54 <printk>
	for (i = 0; i < size; i++) {
   27fc8:	2200      	movs	r2, #0
	size_t unused = 0;
   27fca:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27fcc:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
   27fd0:	d206      	bcs.n	27fe0 <k_call_stacks_analyze+0x58>
		if ((unsigned char)stack[i] == 0xaa) {
   27fd2:	492d      	ldr	r1, [pc, #180]	; (28088 <k_call_stacks_analyze+0x100>)
   27fd4:	5c89      	ldrb	r1, [r1, r2]
   27fd6:	29aa      	cmp	r1, #170	; 0xaa
   27fd8:	d102      	bne.n	27fe0 <k_call_stacks_analyze+0x58>
			unused++;
   27fda:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27fdc:	3201      	adds	r2, #1
   27fde:	e7f5      	b.n	27fcc <k_call_stacks_analyze+0x44>
	pcnt = ((size - unused) * 100) / size;
   27fe0:	f5c3 71a0 	rsb	r1, r3, #320	; 0x140
   27fe4:	2264      	movs	r2, #100	; 0x64
   27fe6:	fb02 f201 	mul.w	r2, r2, r1
   27fea:	4828      	ldr	r0, [pc, #160]	; (2808c <k_call_stacks_analyze+0x104>)
   27fec:	fba0 0202 	umull	r0, r2, r0, r2
   27ff0:	0a12      	lsrs	r2, r2, #8
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27ff2:	9202      	str	r2, [sp, #8]
   27ff4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   27ff8:	9201      	str	r2, [sp, #4]
   27ffa:	9100      	str	r1, [sp, #0]
   27ffc:	4924      	ldr	r1, [pc, #144]	; (28090 <k_call_stacks_analyze+0x108>)
   27ffe:	4821      	ldr	r0, [pc, #132]	; (28084 <k_call_stacks_analyze+0xfc>)
   28000:	f7da ffa8 	bl	2f54 <printk>
	for (i = 0; i < size; i++) {
   28004:	2200      	movs	r2, #0
	size_t unused = 0;
   28006:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   28008:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2800c:	d206      	bcs.n	2801c <k_call_stacks_analyze+0x94>
		if ((unsigned char)stack[i] == 0xaa) {
   2800e:	4921      	ldr	r1, [pc, #132]	; (28094 <k_call_stacks_analyze+0x10c>)
   28010:	5c89      	ldrb	r1, [r1, r2]
   28012:	29aa      	cmp	r1, #170	; 0xaa
   28014:	d102      	bne.n	2801c <k_call_stacks_analyze+0x94>
			unused++;
   28016:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   28018:	3201      	adds	r2, #1
   2801a:	e7f5      	b.n	28008 <k_call_stacks_analyze+0x80>
	pcnt = ((size - unused) * 100) / size;
   2801c:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   28020:	2264      	movs	r2, #100	; 0x64
   28022:	fb02 f201 	mul.w	r2, r2, r1
   28026:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   28028:	9202      	str	r2, [sp, #8]
   2802a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2802e:	9201      	str	r2, [sp, #4]
   28030:	9100      	str	r1, [sp, #0]
   28032:	4919      	ldr	r1, [pc, #100]	; (28098 <k_call_stacks_analyze+0x110>)
   28034:	4813      	ldr	r0, [pc, #76]	; (28084 <k_call_stacks_analyze+0xfc>)
   28036:	f7da ff8d 	bl	2f54 <printk>
	for (i = 0; i < size; i++) {
   2803a:	2200      	movs	r2, #0
	size_t unused = 0;
   2803c:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   2803e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   28042:	d206      	bcs.n	28052 <k_call_stacks_analyze+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
   28044:	4915      	ldr	r1, [pc, #84]	; (2809c <k_call_stacks_analyze+0x114>)
   28046:	5c89      	ldrb	r1, [r1, r2]
   28048:	29aa      	cmp	r1, #170	; 0xaa
   2804a:	d102      	bne.n	28052 <k_call_stacks_analyze+0xca>
			unused++;
   2804c:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   2804e:	3201      	adds	r2, #1
   28050:	e7f5      	b.n	2803e <k_call_stacks_analyze+0xb6>
	pcnt = ((size - unused) * 100) / size;
   28052:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
   28056:	2264      	movs	r2, #100	; 0x64
   28058:	fb02 f201 	mul.w	r2, r2, r1
   2805c:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   2805e:	9202      	str	r2, [sp, #8]
   28060:	f44f 6280 	mov.w	r2, #1024	; 0x400
   28064:	9201      	str	r2, [sp, #4]
   28066:	9100      	str	r1, [sp, #0]
   28068:	490d      	ldr	r1, [pc, #52]	; (280a0 <k_call_stacks_analyze+0x118>)
   2806a:	4806      	ldr	r0, [pc, #24]	; (28084 <k_call_stacks_analyze+0xfc>)
   2806c:	f7da ff72 	bl	2f54 <printk>
}
   28070:	b005      	add	sp, #20
   28072:	f85d fb04 	ldr.w	pc, [sp], #4
   28076:	bf00      	nop
   28078:	000330f8 	.word	0x000330f8
   2807c:	2000a908 	.word	0x2000a908
   28080:	00033108 	.word	0x00033108
   28084:	000314a8 	.word	0x000314a8
   28088:	2000b108 	.word	0x2000b108
   2808c:	cccccccd 	.word	0xcccccccd
   28090:	00033114 	.word	0x00033114
   28094:	2000b248 	.word	0x2000b248
   28098:	00033120 	.word	0x00033120
   2809c:	2000ba48 	.word	0x2000ba48
   280a0:	0003312c 	.word	0x0003312c

000280a4 <_bss_zero>:
{
   280a4:	b508      	push	{r3, lr}
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
   280a6:	4803      	ldr	r0, [pc, #12]	; (280b4 <_bss_zero+0x10>)
	memset(&__bss_start, 0,
   280a8:	4a03      	ldr	r2, [pc, #12]	; (280b8 <_bss_zero+0x14>)
   280aa:	1a12      	subs	r2, r2, r0
   280ac:	2100      	movs	r1, #0
   280ae:	f002 fc03 	bl	2a8b8 <memset>
   280b2:	bd08      	pop	{r3, pc}
   280b4:	20000000 	.word	0x20000000
   280b8:	200031f8 	.word	0x200031f8

000280bc <_data_copy>:
{
   280bc:	b508      	push	{r3, lr}
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
   280be:	4803      	ldr	r0, [pc, #12]	; (280cc <_data_copy+0x10>)
	memcpy(&__data_ram_start, &__data_rom_start,
   280c0:	4a03      	ldr	r2, [pc, #12]	; (280d0 <_data_copy+0x14>)
   280c2:	1a12      	subs	r2, r2, r0
   280c4:	4903      	ldr	r1, [pc, #12]	; (280d4 <_data_copy+0x18>)
   280c6:	f7d8 f8fb 	bl	2c0 <memcpy>
   280ca:	bd08      	pop	{r3, pc}
   280cc:	2000be48 	.word	0x2000be48
   280d0:	2000dab4 	.word	0x2000dab4
   280d4:	000333b4 	.word	0x000333b4

000280d8 <_main>:
{
   280d8:	b508      	push	{r3, lr}
	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   280da:	2002      	movs	r0, #2
   280dc:	f7ff fe5e 	bl	27d9c <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   280e0:	2003      	movs	r0, #3
   280e2:	f7ff fe5b 	bl	27d9c <_sys_device_do_config_level>
	_init_static_threads();
   280e6:	f001 fc11 	bl	2990c <_init_static_threads>
	main();
   280ea:	f7d9 fc59 	bl	19a0 <main>
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   280ee:	4a03      	ldr	r2, [pc, #12]	; (280fc <_main+0x24>)
   280f0:	7a13      	ldrb	r3, [r2, #8]
   280f2:	f023 0301 	bic.w	r3, r3, #1
   280f6:	7213      	strb	r3, [r2, #8]
   280f8:	bd08      	pop	{r3, pc}
   280fa:	bf00      	nop
   280fc:	20002cf8 	.word	0x20002cf8

00028100 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   28100:	b508      	push	{r3, lr}
	 * Initialize kernel data structures. This step includes
	 * initializing the interrupt subsystem, which must be performed
	 * before the hardware initialization phase.
	 */

	prepare_multithreading(dummy_thread);
   28102:	2000      	movs	r0, #0
   28104:	f7ff fed8 	bl	27eb8 <prepare_multithreading>

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   28108:	2000      	movs	r0, #0
   2810a:	f7ff fe47 	bl	27d9c <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2810e:	2001      	movs	r0, #1
   28110:	f7ff fe44 	bl	27d9c <_sys_device_do_config_level>
	__stack_chk_guard = (void *)sys_rand32_get();
#endif

	/* display boot banner */

	switch_to_main_thread();
   28114:	f7ff feb4 	bl	27e80 <switch_to_main_thread>

00028118 <create_free_list>:
static void create_free_list(struct k_mem_slab *slab)
{
	u32_t j;
	char *p;

	slab->free_list = NULL;
   28118:	2200      	movs	r2, #0
   2811a:	6142      	str	r2, [r0, #20]
	p = slab->buffer;
   2811c:	6903      	ldr	r3, [r0, #16]

	for (j = 0; j < slab->num_blocks; j++) {
   2811e:	e005      	b.n	2812c <create_free_list+0x14>
		*(char **)p = slab->free_list;
   28120:	6941      	ldr	r1, [r0, #20]
   28122:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   28124:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   28126:	68c1      	ldr	r1, [r0, #12]
   28128:	440b      	add	r3, r1
	for (j = 0; j < slab->num_blocks; j++) {
   2812a:	3201      	adds	r2, #1
   2812c:	6881      	ldr	r1, [r0, #8]
   2812e:	428a      	cmp	r2, r1
   28130:	d3f6      	bcc.n	28120 <create_free_list+0x8>
	}
}
   28132:	4770      	bx	lr

00028134 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   28134:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   28136:	4c05      	ldr	r4, [pc, #20]	; (2814c <init_mem_slab_module+0x18>)
   28138:	e003      	b.n	28142 <init_mem_slab_module+0xe>
	     slab < _k_mem_slab_list_end;
	     slab++) {
		create_free_list(slab);
   2813a:	4620      	mov	r0, r4
   2813c:	f7ff ffec 	bl	28118 <create_free_list>
	     slab++) {
   28140:	341c      	adds	r4, #28
	for (slab = _k_mem_slab_list_start;
   28142:	4b03      	ldr	r3, [pc, #12]	; (28150 <init_mem_slab_module+0x1c>)
   28144:	429c      	cmp	r4, r3
   28146:	d3f8      	bcc.n	2813a <init_mem_slab_module+0x6>
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   28148:	2000      	movs	r0, #0
   2814a:	bd10      	pop	{r4, pc}
   2814c:	2000d5e8 	.word	0x2000d5e8
   28150:	2000d620 	.word	0x2000d620

00028154 <k_mem_slab_alloc>:

	_k_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   28154:	b538      	push	{r3, r4, r5, lr}
   28156:	f04f 0320 	mov.w	r3, #32
   2815a:	f3ef 8411 	mrs	r4, BASEPRI
   2815e:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   28162:	6943      	ldr	r3, [r0, #20]
   28164:	b15b      	cbz	r3, 2817e <k_mem_slab_alloc+0x2a>
		/* take a free block */
		*mem = slab->free_list;
   28166:	600b      	str	r3, [r1, #0]
		slab->free_list = *(char **)(slab->free_list);
   28168:	6943      	ldr	r3, [r0, #20]
   2816a:	681b      	ldr	r3, [r3, #0]
   2816c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   2816e:	6983      	ldr	r3, [r0, #24]
   28170:	3301      	adds	r3, #1
   28172:	6183      	str	r3, [r0, #24]
		result = 0;
   28174:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28176:	f384 8811 	msr	BASEPRI, r4
	}

	irq_unlock(key);

	return result;
}
   2817a:	4618      	mov	r0, r3
   2817c:	bd38      	pop	{r3, r4, r5, pc}
	} else if (timeout == K_NO_WAIT) {
   2817e:	b922      	cbnz	r2, 2818a <k_mem_slab_alloc+0x36>
		*mem = NULL;
   28180:	2300      	movs	r3, #0
   28182:	600b      	str	r3, [r1, #0]
		result = -ENOMEM;
   28184:	f06f 030b 	mvn.w	r3, #11
   28188:	e7f5      	b.n	28176 <k_mem_slab_alloc+0x22>
   2818a:	460d      	mov	r5, r1
		_pend_current_thread(&slab->wait_q, timeout);
   2818c:	4611      	mov	r1, r2
   2818e:	f000 fed7 	bl	28f40 <_pend_current_thread>
	_update_time_slice_before_swap();
   28192:	f000 ff53 	bl	2903c <_update_time_slice_before_swap>
	return __swap(key);
   28196:	4620      	mov	r0, r4
   28198:	f7ff fa96 	bl	276c8 <__swap>
		if (result == 0) {
   2819c:	4603      	mov	r3, r0
   2819e:	2800      	cmp	r0, #0
   281a0:	d1eb      	bne.n	2817a <k_mem_slab_alloc+0x26>
			*mem = _current->base.swap_data;
   281a2:	4a02      	ldr	r2, [pc, #8]	; (281ac <k_mem_slab_alloc+0x58>)
   281a4:	6892      	ldr	r2, [r2, #8]
   281a6:	68d2      	ldr	r2, [r2, #12]
   281a8:	602a      	str	r2, [r5, #0]
   281aa:	e7e6      	b.n	2817a <k_mem_slab_alloc+0x26>
   281ac:	20002d60 	.word	0x20002d60

000281b0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   281b0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   281b2:	f04f 0320 	mov.w	r3, #32
   281b6:	f3ef 8411 	mrs	r4, BASEPRI
   281ba:	f383 8811 	msr	BASEPRI, r3
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   281be:	4b3d      	ldr	r3, [pc, #244]	; (282b4 <k_mem_slab_free+0x104>)
   281c0:	681b      	ldr	r3, [r3, #0]
   281c2:	2b00      	cmp	r3, #0
   281c4:	d13a      	bne.n	2823c <k_mem_slab_free+0x8c>
	return list->head == list;
   281c6:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   281c8:	4298      	cmp	r0, r3
   281ca:	d048      	beq.n	2825e <k_mem_slab_free+0xae>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   281cc:	b14b      	cbz	r3, 281e2 <k_mem_slab_free+0x32>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   281ce:	685a      	ldr	r2, [r3, #4]
   281d0:	681d      	ldr	r5, [r3, #0]
   281d2:	6015      	str	r5, [r2, #0]
	node->next->prev = node->prev;
   281d4:	681a      	ldr	r2, [r3, #0]
   281d6:	685d      	ldr	r5, [r3, #4]
   281d8:	6055      	str	r5, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   281da:	7a5a      	ldrb	r2, [r3, #9]
   281dc:	f022 0202 	bic.w	r2, r2, #2
   281e0:	725a      	strb	r2, [r3, #9]
	int key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&slab->wait_q);

	if (pending_thread) {
   281e2:	2b00      	cmp	r3, #0
   281e4:	d05c      	beq.n	282a0 <k_mem_slab_free+0xf0>
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   281e6:	680a      	ldr	r2, [r1, #0]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   281e8:	2100      	movs	r1, #0
   281ea:	6659      	str	r1, [r3, #100]	; 0x64
	thread->base.swap_data = data;
   281ec:	60da      	str	r2, [r3, #12]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   281ee:	6a19      	ldr	r1, [r3, #32]
   281f0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   281f4:	d013      	beq.n	2821e <k_mem_slab_free+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   281f6:	f103 0210 	add.w	r2, r3, #16
	return list->tail == node;
   281fa:	482f      	ldr	r0, [pc, #188]	; (282b8 <k_mem_slab_free+0x108>)
   281fc:	6900      	ldr	r0, [r0, #16]
   281fe:	4282      	cmp	r2, r0
   28200:	d004      	beq.n	2820c <k_mem_slab_free+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28202:	b102      	cbz	r2, 28206 <k_mem_slab_free+0x56>
	return (node == list->tail) ? NULL : node->next;
   28204:	691a      	ldr	r2, [r3, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   28206:	6910      	ldr	r0, [r2, #16]
   28208:	4401      	add	r1, r0
   2820a:	6111      	str	r1, [r2, #16]
	node->prev->next = node->next;
   2820c:	695a      	ldr	r2, [r3, #20]
   2820e:	6919      	ldr	r1, [r3, #16]
   28210:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   28212:	691a      	ldr	r2, [r3, #16]
   28214:	6959      	ldr	r1, [r3, #20]
   28216:	6051      	str	r1, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2821c:	621a      	str	r2, [r3, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2821e:	7a5a      	ldrb	r2, [r3, #9]
   28220:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   28224:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28226:	f012 0f1b 	tst.w	r2, #27
   2822a:	d11c      	bne.n	28266 <k_mem_slab_free+0xb6>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2822c:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2822e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28232:	d016      	beq.n	28262 <k_mem_slab_free+0xb2>
   28234:	2200      	movs	r2, #0
   28236:	e017      	b.n	28268 <k_mem_slab_free+0xb8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28238:	2300      	movs	r3, #0
   2823a:	e003      	b.n	28244 <k_mem_slab_free+0x94>
   2823c:	4605      	mov	r5, r0
	return list->head == list;
   2823e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28240:	4298      	cmp	r0, r3
   28242:	d0f9      	beq.n	28238 <k_mem_slab_free+0x88>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   28244:	2b00      	cmp	r3, #0
   28246:	d0c1      	beq.n	281cc <k_mem_slab_free+0x1c>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   28248:	6a1a      	ldr	r2, [r3, #32]
			if (_is_thread_timeout_expired(thread)) {
   2824a:	f112 0f02 	cmn.w	r2, #2
   2824e:	d1bd      	bne.n	281cc <k_mem_slab_free+0x1c>
	return (node == list->tail) ? NULL : node->next;
   28250:	686a      	ldr	r2, [r5, #4]
   28252:	4293      	cmp	r3, r2
   28254:	d001      	beq.n	2825a <k_mem_slab_free+0xaa>
   28256:	681b      	ldr	r3, [r3, #0]
   28258:	e7f4      	b.n	28244 <k_mem_slab_free+0x94>
   2825a:	2300      	movs	r3, #0
   2825c:	e7f2      	b.n	28244 <k_mem_slab_free+0x94>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2825e:	2300      	movs	r3, #0
   28260:	e7b4      	b.n	281cc <k_mem_slab_free+0x1c>
	return !(_is_thread_prevented_from_running(thread) ||
   28262:	2201      	movs	r2, #1
   28264:	e000      	b.n	28268 <k_mem_slab_free+0xb8>
   28266:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   28268:	b94a      	cbnz	r2, 2827e <k_mem_slab_free+0xce>
	return _is_preempt(_current) && __must_switch_threads();
   2826a:	4b13      	ldr	r3, [pc, #76]	; (282b8 <k_mem_slab_free+0x108>)
   2826c:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2826e:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28270:	2b7f      	cmp	r3, #127	; 0x7f
   28272:	d908      	bls.n	28286 <k_mem_slab_free+0xd6>
   28274:	2300      	movs	r3, #0
		_abort_thread_timeout(pending_thread);
		_ready_thread(pending_thread);
		if (_must_switch_threads()) {
   28276:	b96b      	cbnz	r3, 28294 <k_mem_slab_free+0xe4>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28278:	f384 8811 	msr	BASEPRI, r4
   2827c:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   2827e:	4618      	mov	r0, r3
   28280:	f000 fd4a 	bl	28d18 <_add_thread_to_ready_q>
   28284:	e7f1      	b.n	2826a <k_mem_slab_free+0xba>
	return _is_preempt(_current) && __must_switch_threads();
   28286:	f000 fe6b 	bl	28f60 <__must_switch_threads>
   2828a:	4603      	mov	r3, r0
   2828c:	2800      	cmp	r0, #0
   2828e:	d0f2      	beq.n	28276 <k_mem_slab_free+0xc6>
   28290:	2301      	movs	r3, #1
   28292:	e7f0      	b.n	28276 <k_mem_slab_free+0xc6>
	_update_time_slice_before_swap();
   28294:	f000 fed2 	bl	2903c <_update_time_slice_before_swap>
	return __swap(key);
   28298:	4620      	mov	r0, r4
   2829a:	f7ff fa15 	bl	276c8 <__swap>
   2829e:	bd38      	pop	{r3, r4, r5, pc}
			_Swap(key);
			return;
		}
	} else {
		**(char ***)mem = slab->free_list;
   282a0:	680b      	ldr	r3, [r1, #0]
   282a2:	6942      	ldr	r2, [r0, #20]
   282a4:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   282a6:	680b      	ldr	r3, [r1, #0]
   282a8:	6143      	str	r3, [r0, #20]
		slab->num_used--;
   282aa:	6983      	ldr	r3, [r0, #24]
   282ac:	3b01      	subs	r3, #1
   282ae:	6183      	str	r3, [r0, #24]
   282b0:	e7e2      	b.n	28278 <k_mem_slab_free+0xc8>
   282b2:	bf00      	nop
   282b4:	20003148 	.word	0x20003148
   282b8:	20002d60 	.word	0x20002d60

000282bc <new_prio_for_inheritance>:
}
#endif

static int new_prio_for_inheritance(int target, int limit)
{
	int new_prio = _is_prio_higher(target, limit) ? target : limit;
   282bc:	4288      	cmp	r0, r1
   282be:	da00      	bge.n	282c2 <new_prio_for_inheritance+0x6>
   282c0:	4601      	mov	r1, r0
	return _is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   282c2:	2900      	cmp	r1, #0
   282c4:	db01      	blt.n	282ca <new_prio_for_inheritance+0xe>
   282c6:	4608      	mov	r0, r1
   282c8:	4770      	bx	lr
   282ca:	2000      	movs	r0, #0

	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}
   282cc:	4770      	bx	lr

000282ce <adjust_owner_prio>:

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
   282ce:	b538      	push	{r3, r4, r5, lr}
	if (mutex->owner->base.prio != new_prio) {
   282d0:	6884      	ldr	r4, [r0, #8]
   282d2:	f994 300a 	ldrsb.w	r3, [r4, #10]
   282d6:	428b      	cmp	r3, r1
   282d8:	d00e      	beq.n	282f8 <adjust_owner_prio+0x2a>
	u8_t state = thread->base.thread_state;
   282da:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   282dc:	f013 0f1f 	tst.w	r3, #31
   282e0:	d107      	bne.n	282f2 <adjust_owner_prio+0x24>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   282e2:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   282e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   282e8:	d001      	beq.n	282ee <adjust_owner_prio+0x20>
   282ea:	2300      	movs	r3, #0
   282ec:	e002      	b.n	282f4 <adjust_owner_prio+0x26>
   282ee:	2301      	movs	r3, #1
   282f0:	e000      	b.n	282f4 <adjust_owner_prio+0x26>
   282f2:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   282f4:	b90b      	cbnz	r3, 282fa <adjust_owner_prio+0x2c>
		thread->base.prio = prio;
   282f6:	72a1      	strb	r1, [r4, #10]
   282f8:	bd38      	pop	{r3, r4, r5, pc}
   282fa:	460d      	mov	r5, r1
		_remove_thread_from_ready_q(thread);
   282fc:	4620      	mov	r0, r4
   282fe:	f000 fd2b 	bl	28d58 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   28302:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   28304:	4620      	mov	r0, r4
   28306:	f000 fd07 	bl	28d18 <_add_thread_to_ready_q>
   2830a:	bd38      	pop	{r3, r4, r5, pc}

0002830c <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   2830c:	b570      	push	{r4, r5, r6, lr}
   2830e:	4604      	mov	r4, r0
	--_current->base.sched_locked;
   28310:	4b32      	ldr	r3, [pc, #200]	; (283dc <_impl_k_mutex_lock+0xd0>)
   28312:	689a      	ldr	r2, [r3, #8]
   28314:	7ad3      	ldrb	r3, [r2, #11]
   28316:	3b01      	subs	r3, #1
   28318:	72d3      	strb	r3, [r2, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   2831a:	68c3      	ldr	r3, [r0, #12]
   2831c:	b97b      	cbnz	r3, 2833e <_impl_k_mutex_lock+0x32>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
   2831e:	2b00      	cmp	r3, #0
   28320:	d133      	bne.n	2838a <_impl_k_mutex_lock+0x7e>
   28322:	4a2e      	ldr	r2, [pc, #184]	; (283dc <_impl_k_mutex_lock+0xd0>)
   28324:	6892      	ldr	r2, [r2, #8]
   28326:	f992 200a 	ldrsb.w	r2, [r2, #10]
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   2832a:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   2832c:	3301      	adds	r3, #1
   2832e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   28330:	4b2a      	ldr	r3, [pc, #168]	; (283dc <_impl_k_mutex_lock+0xd0>)
   28332:	689b      	ldr	r3, [r3, #8]
   28334:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   28336:	f000 fea1 	bl	2907c <k_sched_unlock>

		return 0;
   2833a:	2000      	movs	r0, #0
   2833c:	bd70      	pop	{r4, r5, r6, pc}
   2833e:	460d      	mov	r5, r1
	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   28340:	6881      	ldr	r1, [r0, #8]
   28342:	4a26      	ldr	r2, [pc, #152]	; (283dc <_impl_k_mutex_lock+0xd0>)
   28344:	6892      	ldr	r2, [r2, #8]
   28346:	4291      	cmp	r1, r2
   28348:	d0e9      	beq.n	2831e <_impl_k_mutex_lock+0x12>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   2834a:	b305      	cbz	r5, 2838e <_impl_k_mutex_lock+0x82>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2834c:	f991 100a 	ldrsb.w	r1, [r1, #10]
   28350:	f992 000a 	ldrsb.w	r0, [r2, #10]
   28354:	f7ff ffb2 	bl	282bc <new_prio_for_inheritance>
	__asm__ volatile(
   28358:	f04f 0320 	mov.w	r3, #32
   2835c:	f3ef 8611 	mrs	r6, BASEPRI
   28360:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   28364:	68a3      	ldr	r3, [r4, #8]
   28366:	f993 300a 	ldrsb.w	r3, [r3, #10]
   2836a:	4298      	cmp	r0, r3
   2836c:	db14      	blt.n	28398 <_impl_k_mutex_lock+0x8c>
		adjust_owner_prio(mutex, new_prio);
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   2836e:	4629      	mov	r1, r5
   28370:	4620      	mov	r0, r4
   28372:	f000 fde5 	bl	28f40 <_pend_current_thread>
	_update_time_slice_before_swap();
   28376:	f000 fe61 	bl	2903c <_update_time_slice_before_swap>
	return __swap(key);
   2837a:	4630      	mov	r0, r6
   2837c:	f7ff f9a4 	bl	276c8 <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   28380:	b978      	cbnz	r0, 283a2 <_impl_k_mutex_lock+0x96>
		k_sched_unlock();
   28382:	f000 fe7b 	bl	2907c <k_sched_unlock>
		return 0;
   28386:	2000      	movs	r0, #0
   28388:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   2838a:	6922      	ldr	r2, [r4, #16]
   2838c:	e7cd      	b.n	2832a <_impl_k_mutex_lock+0x1e>
		k_sched_unlock();
   2838e:	f000 fe75 	bl	2907c <k_sched_unlock>
		return -EBUSY;
   28392:	f06f 000f 	mvn.w	r0, #15
   28396:	bd70      	pop	{r4, r5, r6, pc}
		adjust_owner_prio(mutex, new_prio);
   28398:	4601      	mov	r1, r0
   2839a:	4620      	mov	r0, r4
   2839c:	f7ff ff97 	bl	282ce <adjust_owner_prio>
   283a0:	e7e5      	b.n	2836e <_impl_k_mutex_lock+0x62>
	return list->head == list;
   283a2:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   283a4:	429c      	cmp	r4, r3
   283a6:	d016      	beq.n	283d6 <_impl_k_mutex_lock+0xca>
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   283a8:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   283aa:	b123      	cbz	r3, 283b6 <_impl_k_mutex_lock+0xaa>
   283ac:	f993 000a 	ldrsb.w	r0, [r3, #10]
   283b0:	f7ff ff84 	bl	282bc <new_prio_for_inheritance>
   283b4:	4601      	mov	r1, r0
   283b6:	f04f 0320 	mov.w	r3, #32
   283ba:	f3ef 8511 	mrs	r5, BASEPRI
   283be:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   283c2:	4620      	mov	r0, r4
   283c4:	f7ff ff83 	bl	282ce <adjust_owner_prio>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   283c8:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);

	k_sched_unlock();
   283cc:	f000 fe56 	bl	2907c <k_sched_unlock>

	return -EAGAIN;
   283d0:	f06f 000a 	mvn.w	r0, #10
}
   283d4:	bd70      	pop	{r4, r5, r6, pc}
   283d6:	2300      	movs	r3, #0
   283d8:	e7e6      	b.n	283a8 <_impl_k_mutex_lock+0x9c>
   283da:	bf00      	nop
   283dc:	20002d60 	.word	0x20002d60

000283e0 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
   283e0:	b570      	push	{r4, r5, r6, lr}
   283e2:	4b40      	ldr	r3, [pc, #256]	; (284e4 <_impl_k_mutex_unlock+0x104>)
   283e4:	689a      	ldr	r2, [r3, #8]
   283e6:	7ad3      	ldrb	r3, [r2, #11]
   283e8:	3b01      	subs	r3, #1
   283ea:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   283ec:	68c3      	ldr	r3, [r0, #12]
   283ee:	3b01      	subs	r3, #1
   283f0:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   283f2:	2b00      	cmp	r3, #0
   283f4:	d143      	bne.n	2847e <_impl_k_mutex_unlock+0x9e>
   283f6:	4605      	mov	r5, r0
	__asm__ volatile(
   283f8:	f04f 0320 	mov.w	r3, #32
   283fc:	f3ef 8611 	mrs	r6, BASEPRI
   28400:	f383 8811 	msr	BASEPRI, r3
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   28404:	6901      	ldr	r1, [r0, #16]
   28406:	f7ff ff62 	bl	282ce <adjust_owner_prio>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
   2840a:	462a      	mov	r2, r5
	if (_handling_timeouts) {
   2840c:	4b36      	ldr	r3, [pc, #216]	; (284e8 <_impl_k_mutex_unlock+0x108>)
   2840e:	681b      	ldr	r3, [r3, #0]
   28410:	2b00      	cmp	r3, #0
   28412:	d139      	bne.n	28488 <_impl_k_mutex_unlock+0xa8>
	return list->head == list;
   28414:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28416:	42a5      	cmp	r5, r4
   28418:	d046      	beq.n	284a8 <_impl_k_mutex_unlock+0xc8>
	if (thread) {
   2841a:	b14c      	cbz	r4, 28430 <_impl_k_mutex_unlock+0x50>
	node->prev->next = node->next;
   2841c:	6863      	ldr	r3, [r4, #4]
   2841e:	6822      	ldr	r2, [r4, #0]
   28420:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28422:	6823      	ldr	r3, [r4, #0]
   28424:	6862      	ldr	r2, [r4, #4]
   28426:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28428:	7a63      	ldrb	r3, [r4, #9]
   2842a:	f023 0302 	bic.w	r3, r3, #2
   2842e:	7263      	strb	r3, [r4, #9]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner) {
   28430:	2c00      	cmp	r4, #0
   28432:	d051      	beq.n	284d8 <_impl_k_mutex_unlock+0xf8>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   28434:	6a22      	ldr	r2, [r4, #32]
   28436:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2843a:	d013      	beq.n	28464 <_impl_k_mutex_unlock+0x84>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2843c:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   28440:	4928      	ldr	r1, [pc, #160]	; (284e4 <_impl_k_mutex_unlock+0x104>)
   28442:	6909      	ldr	r1, [r1, #16]
   28444:	428b      	cmp	r3, r1
   28446:	d004      	beq.n	28452 <_impl_k_mutex_unlock+0x72>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28448:	b103      	cbz	r3, 2844c <_impl_k_mutex_unlock+0x6c>
	return (node == list->tail) ? NULL : node->next;
   2844a:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2844c:	6919      	ldr	r1, [r3, #16]
   2844e:	440a      	add	r2, r1
   28450:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   28452:	6963      	ldr	r3, [r4, #20]
   28454:	6922      	ldr	r2, [r4, #16]
   28456:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28458:	6923      	ldr	r3, [r4, #16]
   2845a:	6962      	ldr	r2, [r4, #20]
   2845c:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2845e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28462:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28464:	7a63      	ldrb	r3, [r4, #9]
   28466:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2846a:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2846c:	f013 0f1b 	tst.w	r3, #27
   28470:	d11e      	bne.n	284b0 <_impl_k_mutex_unlock+0xd0>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28472:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28478:	d018      	beq.n	284ac <_impl_k_mutex_unlock+0xcc>
   2847a:	2300      	movs	r3, #0
   2847c:	e019      	b.n	284b2 <_impl_k_mutex_unlock+0xd2>
		k_sched_unlock();
   2847e:	f000 fdfd 	bl	2907c <k_sched_unlock>
		return;
   28482:	bd70      	pop	{r4, r5, r6, pc}
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28484:	2400      	movs	r4, #0
   28486:	e002      	b.n	2848e <_impl_k_mutex_unlock+0xae>
	return list->head == list;
   28488:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2848a:	42a5      	cmp	r5, r4
   2848c:	d0fa      	beq.n	28484 <_impl_k_mutex_unlock+0xa4>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   2848e:	2c00      	cmp	r4, #0
   28490:	d0c3      	beq.n	2841a <_impl_k_mutex_unlock+0x3a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   28492:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   28494:	f113 0f02 	cmn.w	r3, #2
   28498:	d1bf      	bne.n	2841a <_impl_k_mutex_unlock+0x3a>
	return (node == list->tail) ? NULL : node->next;
   2849a:	6853      	ldr	r3, [r2, #4]
   2849c:	429c      	cmp	r4, r3
   2849e:	d001      	beq.n	284a4 <_impl_k_mutex_unlock+0xc4>
   284a0:	6824      	ldr	r4, [r4, #0]
   284a2:	e7f4      	b.n	2848e <_impl_k_mutex_unlock+0xae>
   284a4:	2400      	movs	r4, #0
   284a6:	e7f2      	b.n	2848e <_impl_k_mutex_unlock+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   284a8:	2400      	movs	r4, #0
   284aa:	e7b6      	b.n	2841a <_impl_k_mutex_unlock+0x3a>
	return !(_is_thread_prevented_from_running(thread) ||
   284ac:	2301      	movs	r3, #1
   284ae:	e000      	b.n	284b2 <_impl_k_mutex_unlock+0xd2>
   284b0:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   284b2:	b96b      	cbnz	r3, 284d0 <_impl_k_mutex_unlock+0xf0>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   284b4:	f386 8811 	msr	BASEPRI, r6
   284b8:	2300      	movs	r3, #0
   284ba:	6663      	str	r3, [r4, #100]	; 0x64
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
   284bc:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   284be:	68eb      	ldr	r3, [r5, #12]
   284c0:	3301      	adds	r3, #1
   284c2:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   284c4:	f994 300a 	ldrsb.w	r3, [r4, #10]
   284c8:	612b      	str	r3, [r5, #16]
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
   284ca:	f000 fdd7 	bl	2907c <k_sched_unlock>
   284ce:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   284d0:	4620      	mov	r0, r4
   284d2:	f000 fc21 	bl	28d18 <_add_thread_to_ready_q>
   284d6:	e7ed      	b.n	284b4 <_impl_k_mutex_unlock+0xd4>
   284d8:	f386 8811 	msr	BASEPRI, r6
		mutex->owner = NULL;
   284dc:	2300      	movs	r3, #0
   284de:	60ab      	str	r3, [r5, #8]
   284e0:	e7f3      	b.n	284ca <_impl_k_mutex_unlock+0xea>
   284e2:	bf00      	nop
   284e4:	20002d60 	.word	0x20002d60
   284e8:	20003148 	.word	0x20003148

000284ec <_signal_poll_event>:
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   284ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   284ee:	4604      	mov	r4, r0
   284f0:	460d      	mov	r5, r1
	*must_reschedule = 0;
   284f2:	2300      	movs	r3, #0
   284f4:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   284f6:	6883      	ldr	r3, [r0, #8]
   284f8:	2b00      	cmp	r3, #0
   284fa:	d042      	beq.n	28582 <_signal_poll_event+0x96>
   284fc:	4616      	mov	r6, r2
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   284fe:	6818      	ldr	r0, [r3, #0]
	thread->base.thread_state &= ~states;
   28500:	7a43      	ldrb	r3, [r0, #9]
   28502:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   28506:	7243      	strb	r3, [r0, #9]

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   28508:	f013 0f02 	tst.w	r3, #2
   2850c:	d039      	beq.n	28582 <_signal_poll_event+0x96>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   2850e:	6a03      	ldr	r3, [r0, #32]
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   28510:	f113 0f02 	cmn.w	r3, #2
   28514:	d060      	beq.n	285d8 <_signal_poll_event+0xec>
	node->prev->next = node->next;
   28516:	6843      	ldr	r3, [r0, #4]
   28518:	6802      	ldr	r2, [r0, #0]
   2851a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2851c:	6803      	ldr	r3, [r0, #0]
   2851e:	6842      	ldr	r2, [r0, #4]
   28520:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28522:	7a43      	ldrb	r3, [r0, #9]
   28524:	f023 0302 	bic.w	r3, r3, #2
   28528:	7243      	strb	r3, [r0, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2852a:	6a02      	ldr	r2, [r0, #32]
   2852c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28530:	d013      	beq.n	2855a <_signal_poll_event+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   28532:	f100 0310 	add.w	r3, r0, #16
	return list->tail == node;
   28536:	492a      	ldr	r1, [pc, #168]	; (285e0 <_signal_poll_event+0xf4>)
   28538:	6909      	ldr	r1, [r1, #16]
   2853a:	428b      	cmp	r3, r1
   2853c:	d004      	beq.n	28548 <_signal_poll_event+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2853e:	b103      	cbz	r3, 28542 <_signal_poll_event+0x56>
	return (node == list->tail) ? NULL : node->next;
   28540:	6903      	ldr	r3, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   28542:	6919      	ldr	r1, [r3, #16]
   28544:	440a      	add	r2, r1
   28546:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   28548:	6943      	ldr	r3, [r0, #20]
   2854a:	6902      	ldr	r2, [r0, #16]
   2854c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2854e:	6903      	ldr	r3, [r0, #16]
   28550:	6942      	ldr	r2, [r0, #20]
   28552:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28558:	6203      	str	r3, [r0, #32]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   2855a:	b965      	cbnz	r5, 28576 <_signal_poll_event+0x8a>
   2855c:	f06f 0303 	mvn.w	r3, #3
   28560:	6643      	str	r3, [r0, #100]	; 0x64
	u8_t state = thread->base.thread_state;
   28562:	7a43      	ldrb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28564:	f013 0f1f 	tst.w	r3, #31
   28568:	d109      	bne.n	2857e <_signal_poll_event+0x92>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2856a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2856c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28570:	d003      	beq.n	2857a <_signal_poll_event+0x8e>
   28572:	2700      	movs	r7, #0
   28574:	e004      	b.n	28580 <_signal_poll_event+0x94>
   28576:	2300      	movs	r3, #0
   28578:	e7f2      	b.n	28560 <_signal_poll_event+0x74>
   2857a:	2701      	movs	r7, #1
   2857c:	e000      	b.n	28580 <_signal_poll_event+0x94>
   2857e:	2700      	movs	r7, #0
				 state == K_POLL_STATE_NOT_READY ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
   28580:	b947      	cbnz	r7, 28594 <_signal_poll_event+0xa8>
	event->poller = NULL;
   28582:	2000      	movs	r0, #0
   28584:	60a0      	str	r0, [r4, #8]
	event->state |= state;
   28586:	7b63      	ldrb	r3, [r4, #13]
   28588:	ea45 1513 	orr.w	r5, r5, r3, lsr #4
   2858c:	f365 1307 	bfi	r3, r5, #4, #4
   28590:	7363      	strb	r3, [r4, #13]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
   28592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_add_thread_to_ready_q(thread);
   28594:	f000 fbc0 	bl	28d18 <_add_thread_to_ready_q>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   28598:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   2859c:	2b0d      	cmp	r3, #13
   2859e:	d807      	bhi.n	285b0 <_signal_poll_event+0xc4>
   285a0:	b19b      	cbz	r3, 285ca <_signal_poll_event+0xde>
   285a2:	4b10      	ldr	r3, [pc, #64]	; (285e4 <_signal_poll_event+0xf8>)
   285a4:	685b      	ldr	r3, [r3, #4]
   285a6:	f413 6f00 	tst.w	r3, #2048	; 0x800
   285aa:	d010      	beq.n	285ce <_signal_poll_event+0xe2>
   285ac:	2300      	movs	r3, #0
   285ae:	e000      	b.n	285b2 <_signal_poll_event+0xc6>
   285b0:	463b      	mov	r3, r7
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   285b2:	b973      	cbnz	r3, 285d2 <_signal_poll_event+0xe6>
	return _is_preempt(_current) && __must_switch_threads();
   285b4:	4a0a      	ldr	r2, [pc, #40]	; (285e0 <_signal_poll_event+0xf4>)
   285b6:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   285b8:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   285ba:	2a7f      	cmp	r2, #127	; 0x7f
   285bc:	d80a      	bhi.n	285d4 <_signal_poll_event+0xe8>
   285be:	f000 fccf 	bl	28f60 <__must_switch_threads>
   285c2:	4603      	mov	r3, r0
   285c4:	b130      	cbz	r0, 285d4 <_signal_poll_event+0xe8>
   285c6:	463b      	mov	r3, r7
   285c8:	e004      	b.n	285d4 <_signal_poll_event+0xe8>
   285ca:	2300      	movs	r3, #0
   285cc:	e7f1      	b.n	285b2 <_signal_poll_event+0xc6>
   285ce:	463b      	mov	r3, r7
   285d0:	e7ef      	b.n	285b2 <_signal_poll_event+0xc6>
   285d2:	2300      	movs	r3, #0
   285d4:	6033      	str	r3, [r6, #0]
   285d6:	e7d4      	b.n	28582 <_signal_poll_event+0x96>
		return -EAGAIN;
   285d8:	f06f 000a 	mvn.w	r0, #10
}
   285dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   285de:	bf00      	nop
   285e0:	20002d60 	.word	0x20002d60
   285e4:	e000ed00 	.word	0xe000ed00

000285e8 <k_poll_event_init>:
{
   285e8:	b430      	push	{r4, r5}
	event->poller = NULL;
   285ea:	2500      	movs	r5, #0
   285ec:	6085      	str	r5, [r0, #8]
	event->type = type;
   285ee:	7b44      	ldrb	r4, [r0, #13]
   285f0:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
   285f4:	f365 1407 	bfi	r4, r5, #4, #4
   285f8:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   285fa:	7b81      	ldrb	r1, [r0, #14]
   285fc:	f362 0100 	bfi	r1, r2, #0, #1
   28600:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   28602:	89c2      	ldrh	r2, [r0, #14]
   28604:	f365 024f 	bfi	r2, r5, #1, #15
   28608:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   2860a:	6103      	str	r3, [r0, #16]
}
   2860c:	bc30      	pop	{r4, r5}
   2860e:	4770      	bx	lr

00028610 <k_poll>:
{
   28610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28614:	b085      	sub	sp, #20
   28616:	4691      	mov	r9, r2
	__asm__ volatile(
   28618:	f04f 0320 	mov.w	r3, #32
   2861c:	f3ef 8511 	mrs	r5, BASEPRI
   28620:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   28624:	4ab7      	ldr	r2, [pc, #732]	; (28904 <k_poll+0x2f4>)
   28626:	6894      	ldr	r4, [r2, #8]
	thread->base.thread_state |= states;
   28628:	7a63      	ldrb	r3, [r4, #9]
   2862a:	f043 0320 	orr.w	r3, r3, #32
   2862e:	7263      	strb	r3, [r4, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28630:	f385 8811 	msr	BASEPRI, r5
	struct _poller poller = { .thread = _current };
   28634:	6893      	ldr	r3, [r2, #8]
   28636:	9303      	str	r3, [sp, #12]
	for (int ii = 0; ii < num_events; ii++) {
   28638:	2300      	movs	r3, #0
	int last_registered = -1, rc;
   2863a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   2863e:	e01e      	b.n	2867e <k_poll+0x6e>
		if (k_sem_count_get(event->sem) > 0) {
   28640:	6917      	ldr	r7, [r2, #16]
   28642:	68bf      	ldr	r7, [r7, #8]
   28644:	b14f      	cbz	r7, 2865a <k_poll+0x4a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   28646:	f04f 0e02 	mov.w	lr, #2
			return 1;
   2864a:	2701      	movs	r7, #1
   2864c:	e005      	b.n	2865a <k_poll+0x4a>
		if (!k_queue_is_empty(event->queue)) {
   2864e:	6917      	ldr	r7, [r2, #16]
	return (!list->head);
   28650:	683f      	ldr	r7, [r7, #0]
   28652:	b117      	cbz	r7, 2865a <k_poll+0x4a>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   28654:	f04f 0e04 	mov.w	lr, #4
			return 1;
   28658:	2701      	movs	r7, #1
		if (is_condition_met(&events[ii], &state)) {
   2865a:	b387      	cbz	r7, 286be <k_poll+0xae>
	event->poller = NULL;
   2865c:	2500      	movs	r5, #0
   2865e:	6095      	str	r5, [r2, #8]
	event->state |= state;
   28660:	7b55      	ldrb	r5, [r2, #13]
   28662:	ea4e 1715 	orr.w	r7, lr, r5, lsr #4
   28666:	f367 1507 	bfi	r5, r7, #4, #4
   2866a:	7355      	strb	r5, [r2, #13]
			clear_polling_state(_current);
   2866c:	4aa5      	ldr	r2, [pc, #660]	; (28904 <k_poll+0x2f4>)
   2866e:	6895      	ldr	r5, [r2, #8]
	thread->base.thread_state &= ~states;
   28670:	7a6a      	ldrb	r2, [r5, #9]
   28672:	f022 0220 	bic.w	r2, r2, #32
   28676:	726a      	strb	r2, [r5, #9]
   28678:	f386 8811 	msr	BASEPRI, r6
	for (int ii = 0; ii < num_events; ii++) {
   2867c:	3301      	adds	r3, #1
   2867e:	428b      	cmp	r3, r1
   28680:	f280 8191 	bge.w	289a6 <k_poll+0x396>
	__asm__ volatile(
   28684:	f04f 0220 	mov.w	r2, #32
   28688:	f3ef 8611 	mrs	r6, BASEPRI
   2868c:	f382 8811 	msr	BASEPRI, r2
		if (is_condition_met(&events[ii], &state)) {
   28690:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   28694:	0095      	lsls	r5, r2, #2
   28696:	1942      	adds	r2, r0, r5
	switch (event->type) {
   28698:	7b57      	ldrb	r7, [r2, #13]
   2869a:	f007 070f 	and.w	r7, r7, #15
   2869e:	2f02      	cmp	r7, #2
   286a0:	d0ce      	beq.n	28640 <k_poll+0x30>
   286a2:	2f04      	cmp	r7, #4
   286a4:	d0d3      	beq.n	2864e <k_poll+0x3e>
   286a6:	2f01      	cmp	r7, #1
   286a8:	d001      	beq.n	286ae <k_poll+0x9e>
		return 0;
   286aa:	2700      	movs	r7, #0
   286ac:	e7d5      	b.n	2865a <k_poll+0x4a>
		if (event->signal->signaled) {
   286ae:	6917      	ldr	r7, [r2, #16]
   286b0:	68bf      	ldr	r7, [r7, #8]
   286b2:	2f00      	cmp	r7, #0
   286b4:	d0d1      	beq.n	2865a <k_poll+0x4a>
			*state = K_POLL_STATE_SIGNALED;
   286b6:	f04f 0e01 	mov.w	lr, #1
			return 1;
   286ba:	4677      	mov	r7, lr
   286bc:	e7cd      	b.n	2865a <k_poll+0x4a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   286be:	f1b9 0f00 	cmp.w	r9, #0
   286c2:	d0d9      	beq.n	28678 <k_poll+0x68>
	return _is_thread_polling(_current);
   286c4:	4f8f      	ldr	r7, [pc, #572]	; (28904 <k_poll+0x2f4>)
   286c6:	68bf      	ldr	r7, [r7, #8]
	return !!(thread->base.thread_state & state);
   286c8:	7a7f      	ldrb	r7, [r7, #9]
		} else if (timeout != K_NO_WAIT && is_polling()) {
   286ca:	f017 0f20 	tst.w	r7, #32
   286ce:	d0d3      	beq.n	28678 <k_poll+0x68>
	switch (event->type) {
   286d0:	7b57      	ldrb	r7, [r2, #13]
   286d2:	f007 070f 	and.w	r7, r7, #15
   286d6:	2f02      	cmp	r7, #2
   286d8:	d008      	beq.n	286ec <k_poll+0xdc>
   286da:	2f04      	cmp	r7, #4
   286dc:	d07a      	beq.n	287d4 <k_poll+0x1c4>
   286de:	2f01      	cmp	r7, #1
   286e0:	f000 80ec 	beq.w	288bc <k_poll+0x2ac>
	event->poller = poller;
   286e4:	ad03      	add	r5, sp, #12
   286e6:	6095      	str	r5, [r2, #8]
				++last_registered;
   286e8:	3401      	adds	r4, #1
   286ea:	e7c5      	b.n	28678 <k_poll+0x68>
		add_event(&event->sem->poll_events, event, poller);
   286ec:	6917      	ldr	r7, [r2, #16]
   286ee:	f107 0c10 	add.w	ip, r7, #16
	return list->head == list;
   286f2:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   286f6:	45c4      	cmp	ip, r8
   286f8:	d010      	beq.n	2871c <k_poll+0x10c>
   286fa:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   286fe:	b17f      	cbz	r7, 28720 <k_poll+0x110>
   28700:	68bf      	ldr	r7, [r7, #8]
   28702:	683f      	ldr	r7, [r7, #0]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   28704:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   28708:	9f03      	ldr	r7, [sp, #12]
   2870a:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   2870e:	45da      	cmp	sl, fp
   28710:	db06      	blt.n	28720 <k_poll+0x110>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28712:	45c4      	cmp	ip, r8
   28714:	d12e      	bne.n	28774 <k_poll+0x164>
   28716:	f04f 0800 	mov.w	r8, #0
   2871a:	e02b      	b.n	28774 <k_poll+0x164>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2871c:	2700      	movs	r7, #0
   2871e:	e7ee      	b.n	286fe <k_poll+0xee>
	node->next = list;
   28720:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28724:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28728:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   2872a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2872e:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28730:	f8cc 2004 	str.w	r2, [ip, #4]
   28734:	e7d6      	b.n	286e4 <k_poll+0xd4>
	if (!insert_point) {
   28736:	f1b8 0f00 	cmp.w	r8, #0
   2873a:	d00a      	beq.n	28752 <k_poll+0x142>
		node->prev = insert_point->prev;
   2873c:	f8d8 7004 	ldr.w	r7, [r8, #4]
   28740:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   28742:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   28746:	f8d8 5004 	ldr.w	r5, [r8, #4]
   2874a:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   2874c:	f8c8 2004 	str.w	r2, [r8, #4]
   28750:	e7c8      	b.n	286e4 <k_poll+0xd4>
	node->next = list;
   28752:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28756:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2875a:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   2875c:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28760:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28762:	f8cc 2004 	str.w	r2, [ip, #4]
   28766:	e7bd      	b.n	286e4 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28768:	4647      	mov	r7, r8
   2876a:	e017      	b.n	2879c <k_poll+0x18c>
	return (node == list->tail) ? NULL : node->next;
   2876c:	2700      	movs	r7, #0
   2876e:	e015      	b.n	2879c <k_poll+0x18c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28770:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28774:	f1b8 0f00 	cmp.w	r8, #0
   28778:	d021      	beq.n	287be <k_poll+0x1ae>
					       pending->poller->thread)) {
   2877a:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   2877e:	683f      	ldr	r7, [r7, #0]
   28780:	f997 700a 	ldrsb.w	r7, [r7, #10]
   28784:	45bb      	cmp	fp, r7
   28786:	dbd6      	blt.n	28736 <k_poll+0x126>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28788:	46c2      	mov	sl, r8
   2878a:	f1b8 0f00 	cmp.w	r8, #0
   2878e:	d0eb      	beq.n	28768 <k_poll+0x158>
	return (node == list->tail) ? NULL : node->next;
   28790:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28794:	45b8      	cmp	r8, r7
   28796:	d0e9      	beq.n	2876c <k_poll+0x15c>
   28798:	f8d8 7000 	ldr.w	r7, [r8]
   2879c:	b167      	cbz	r7, 287b8 <k_poll+0x1a8>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2879e:	f1ba 0f00 	cmp.w	sl, #0
   287a2:	d0e5      	beq.n	28770 <k_poll+0x160>
	return (node == list->tail) ? NULL : node->next;
   287a4:	f8dc 7004 	ldr.w	r7, [ip, #4]
   287a8:	45ba      	cmp	sl, r7
   287aa:	d002      	beq.n	287b2 <k_poll+0x1a2>
   287ac:	f8d8 8000 	ldr.w	r8, [r8]
   287b0:	e7e0      	b.n	28774 <k_poll+0x164>
   287b2:	f04f 0800 	mov.w	r8, #0
   287b6:	e7dd      	b.n	28774 <k_poll+0x164>
   287b8:	f04f 0800 	mov.w	r8, #0
   287bc:	e7da      	b.n	28774 <k_poll+0x164>
	node->next = list;
   287be:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   287c2:	f8dc 5004 	ldr.w	r5, [ip, #4]
   287c6:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   287c8:	f8dc 5004 	ldr.w	r5, [ip, #4]
   287cc:	602a      	str	r2, [r5, #0]
	list->tail = node;
   287ce:	f8cc 2004 	str.w	r2, [ip, #4]
   287d2:	e787      	b.n	286e4 <k_poll+0xd4>
		add_event(&event->queue->poll_events, event, poller);
   287d4:	6917      	ldr	r7, [r2, #16]
   287d6:	f107 0c08 	add.w	ip, r7, #8
	return list->head == list;
   287da:	f8d7 8008 	ldr.w	r8, [r7, #8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   287de:	45c4      	cmp	ip, r8
   287e0:	d010      	beq.n	28804 <k_poll+0x1f4>
   287e2:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   287e6:	b17f      	cbz	r7, 28808 <k_poll+0x1f8>
   287e8:	68bf      	ldr	r7, [r7, #8]
   287ea:	683f      	ldr	r7, [r7, #0]
   287ec:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   287f0:	9f03      	ldr	r7, [sp, #12]
   287f2:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   287f6:	45da      	cmp	sl, fp
   287f8:	db06      	blt.n	28808 <k_poll+0x1f8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   287fa:	45c4      	cmp	ip, r8
   287fc:	d12e      	bne.n	2885c <k_poll+0x24c>
   287fe:	f04f 0800 	mov.w	r8, #0
   28802:	e02b      	b.n	2885c <k_poll+0x24c>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   28804:	2700      	movs	r7, #0
   28806:	e7ee      	b.n	287e6 <k_poll+0x1d6>
	node->next = list;
   28808:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2880c:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28810:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28812:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28816:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28818:	f8cc 2004 	str.w	r2, [ip, #4]
   2881c:	e762      	b.n	286e4 <k_poll+0xd4>
	if (!insert_point) {
   2881e:	f1b8 0f00 	cmp.w	r8, #0
   28822:	d00a      	beq.n	2883a <k_poll+0x22a>
		node->prev = insert_point->prev;
   28824:	f8d8 7004 	ldr.w	r7, [r8, #4]
   28828:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   2882a:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   2882e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   28832:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   28834:	f8c8 2004 	str.w	r2, [r8, #4]
   28838:	e754      	b.n	286e4 <k_poll+0xd4>
	node->next = list;
   2883a:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2883e:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28842:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28844:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28848:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2884a:	f8cc 2004 	str.w	r2, [ip, #4]
   2884e:	e749      	b.n	286e4 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28850:	4647      	mov	r7, r8
   28852:	e017      	b.n	28884 <k_poll+0x274>
	return (node == list->tail) ? NULL : node->next;
   28854:	2700      	movs	r7, #0
   28856:	e015      	b.n	28884 <k_poll+0x274>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28858:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2885c:	f1b8 0f00 	cmp.w	r8, #0
   28860:	d021      	beq.n	288a6 <k_poll+0x296>
					       pending->poller->thread)) {
   28862:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   28866:	683f      	ldr	r7, [r7, #0]
   28868:	f997 700a 	ldrsb.w	r7, [r7, #10]
   2886c:	45bb      	cmp	fp, r7
   2886e:	dbd6      	blt.n	2881e <k_poll+0x20e>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28870:	46c2      	mov	sl, r8
   28872:	f1b8 0f00 	cmp.w	r8, #0
   28876:	d0eb      	beq.n	28850 <k_poll+0x240>
	return (node == list->tail) ? NULL : node->next;
   28878:	f8dc 7004 	ldr.w	r7, [ip, #4]
   2887c:	45b8      	cmp	r8, r7
   2887e:	d0e9      	beq.n	28854 <k_poll+0x244>
   28880:	f8d8 7000 	ldr.w	r7, [r8]
   28884:	b167      	cbz	r7, 288a0 <k_poll+0x290>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28886:	f1ba 0f00 	cmp.w	sl, #0
   2888a:	d0e5      	beq.n	28858 <k_poll+0x248>
	return (node == list->tail) ? NULL : node->next;
   2888c:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28890:	45ba      	cmp	sl, r7
   28892:	d002      	beq.n	2889a <k_poll+0x28a>
   28894:	f8d8 8000 	ldr.w	r8, [r8]
   28898:	e7e0      	b.n	2885c <k_poll+0x24c>
   2889a:	f04f 0800 	mov.w	r8, #0
   2889e:	e7dd      	b.n	2885c <k_poll+0x24c>
   288a0:	f04f 0800 	mov.w	r8, #0
   288a4:	e7da      	b.n	2885c <k_poll+0x24c>
	node->next = list;
   288a6:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   288aa:	f8dc 5004 	ldr.w	r5, [ip, #4]
   288ae:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   288b0:	f8dc 5004 	ldr.w	r5, [ip, #4]
   288b4:	602a      	str	r2, [r5, #0]
	list->tail = node;
   288b6:	f8cc 2004 	str.w	r2, [ip, #4]
   288ba:	e713      	b.n	286e4 <k_poll+0xd4>
		add_event(&event->signal->poll_events, event, poller);
   288bc:	f8d2 c010 	ldr.w	ip, [r2, #16]
	return list->head == list;
   288c0:	f8dc 8000 	ldr.w	r8, [ip]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   288c4:	45c4      	cmp	ip, r8
   288c6:	d010      	beq.n	288ea <k_poll+0x2da>
   288c8:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   288cc:	b17f      	cbz	r7, 288ee <k_poll+0x2de>
   288ce:	68bf      	ldr	r7, [r7, #8]
   288d0:	683f      	ldr	r7, [r7, #0]
   288d2:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   288d6:	9f03      	ldr	r7, [sp, #12]
   288d8:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   288dc:	45da      	cmp	sl, fp
   288de:	db06      	blt.n	288ee <k_poll+0x2de>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   288e0:	45c4      	cmp	ip, r8
   288e2:	d130      	bne.n	28946 <k_poll+0x336>
   288e4:	f04f 0800 	mov.w	r8, #0
   288e8:	e02d      	b.n	28946 <k_poll+0x336>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   288ea:	2700      	movs	r7, #0
   288ec:	e7ee      	b.n	288cc <k_poll+0x2bc>
	node->next = list;
   288ee:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   288f2:	f8dc 5004 	ldr.w	r5, [ip, #4]
   288f6:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   288f8:	f8dc 5004 	ldr.w	r5, [ip, #4]
   288fc:	602a      	str	r2, [r5, #0]
	list->tail = node;
   288fe:	f8cc 2004 	str.w	r2, [ip, #4]
   28902:	e6ef      	b.n	286e4 <k_poll+0xd4>
   28904:	20002d60 	.word	0x20002d60
	if (!insert_point) {
   28908:	f1b8 0f00 	cmp.w	r8, #0
   2890c:	d00a      	beq.n	28924 <k_poll+0x314>
		node->prev = insert_point->prev;
   2890e:	f8d8 7004 	ldr.w	r7, [r8, #4]
   28912:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   28914:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   28918:	f8d8 5004 	ldr.w	r5, [r8, #4]
   2891c:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   2891e:	f8c8 2004 	str.w	r2, [r8, #4]
   28922:	e6df      	b.n	286e4 <k_poll+0xd4>
	node->next = list;
   28924:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28928:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2892c:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   2892e:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28932:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28934:	f8cc 2004 	str.w	r2, [ip, #4]
   28938:	e6d4      	b.n	286e4 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2893a:	4647      	mov	r7, r8
   2893c:	e017      	b.n	2896e <k_poll+0x35e>
	return (node == list->tail) ? NULL : node->next;
   2893e:	2700      	movs	r7, #0
   28940:	e015      	b.n	2896e <k_poll+0x35e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28942:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28946:	f1b8 0f00 	cmp.w	r8, #0
   2894a:	d021      	beq.n	28990 <k_poll+0x380>
					       pending->poller->thread)) {
   2894c:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   28950:	683f      	ldr	r7, [r7, #0]
   28952:	f997 700a 	ldrsb.w	r7, [r7, #10]
   28956:	45bb      	cmp	fp, r7
   28958:	dbd6      	blt.n	28908 <k_poll+0x2f8>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2895a:	46c2      	mov	sl, r8
   2895c:	f1b8 0f00 	cmp.w	r8, #0
   28960:	d0eb      	beq.n	2893a <k_poll+0x32a>
	return (node == list->tail) ? NULL : node->next;
   28962:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28966:	45b8      	cmp	r8, r7
   28968:	d0e9      	beq.n	2893e <k_poll+0x32e>
   2896a:	f8d8 7000 	ldr.w	r7, [r8]
   2896e:	b167      	cbz	r7, 2898a <k_poll+0x37a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28970:	f1ba 0f00 	cmp.w	sl, #0
   28974:	d0e5      	beq.n	28942 <k_poll+0x332>
	return (node == list->tail) ? NULL : node->next;
   28976:	f8dc 7004 	ldr.w	r7, [ip, #4]
   2897a:	45ba      	cmp	sl, r7
   2897c:	d002      	beq.n	28984 <k_poll+0x374>
   2897e:	f8d8 8000 	ldr.w	r8, [r8]
   28982:	e7e0      	b.n	28946 <k_poll+0x336>
   28984:	f04f 0800 	mov.w	r8, #0
   28988:	e7dd      	b.n	28946 <k_poll+0x336>
   2898a:	f04f 0800 	mov.w	r8, #0
   2898e:	e7da      	b.n	28946 <k_poll+0x336>
	node->next = list;
   28990:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28994:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28998:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   2899a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2899e:	602a      	str	r2, [r5, #0]
	list->tail = node;
   289a0:	f8cc 2004 	str.w	r2, [ip, #4]
   289a4:	e69e      	b.n	286e4 <k_poll+0xd4>
   289a6:	f04f 0320 	mov.w	r3, #32
   289aa:	f3ef 8511 	mrs	r5, BASEPRI
   289ae:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   289b2:	4b46      	ldr	r3, [pc, #280]	; (28acc <k_poll+0x4bc>)
   289b4:	689a      	ldr	r2, [r3, #8]
	return !!(thread->base.thread_state & state);
   289b6:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   289b8:	f013 0f20 	tst.w	r3, #32
   289bc:	d047      	beq.n	28a4e <k_poll+0x43e>
	thread->base.thread_state &= ~states;
   289be:	f023 0320 	bic.w	r3, r3, #32
   289c2:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   289c4:	f1b9 0f00 	cmp.w	r9, #0
   289c8:	d049      	beq.n	28a5e <k_poll+0x44e>
   289ca:	4649      	mov	r1, r9
   289cc:	4606      	mov	r6, r0
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   289ce:	a801      	add	r0, sp, #4
   289d0:	9001      	str	r0, [sp, #4]
   289d2:	9002      	str	r0, [sp, #8]
	_pend_current_thread(&wait_q, timeout);
   289d4:	f000 fab4 	bl	28f40 <_pend_current_thread>
	_update_time_slice_before_swap();
   289d8:	f000 fb30 	bl	2903c <_update_time_slice_before_swap>
	return __swap(key);
   289dc:	4628      	mov	r0, r5
   289de:	f7fe fe73 	bl	276c8 <__swap>
   289e2:	f04f 0320 	mov.w	r3, #32
   289e6:	f3ef 8e11 	mrs	lr, BASEPRI
   289ea:	f383 8811 	msr	BASEPRI, r3
   289ee:	4675      	mov	r5, lr
   289f0:	e049      	b.n	28a86 <k_poll+0x476>
	node->prev->next = node->next;
   289f2:	6853      	ldr	r3, [r2, #4]
   289f4:	5847      	ldr	r7, [r0, r1]
   289f6:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   289f8:	5843      	ldr	r3, [r0, r1]
   289fa:	6852      	ldr	r2, [r2, #4]
   289fc:	605a      	str	r2, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   289fe:	f386 8811 	msr	BASEPRI, r6
	__asm__ volatile(
   28a02:	f04f 0320 	mov.w	r3, #32
   28a06:	f3ef 8611 	mrs	r6, BASEPRI
   28a0a:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   28a0e:	3c01      	subs	r4, #1
   28a10:	2c00      	cmp	r4, #0
   28a12:	db1e      	blt.n	28a52 <k_poll+0x442>
		clear_event_registration(&events[last_registered]);
   28a14:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   28a18:	0099      	lsls	r1, r3, #2
   28a1a:	1842      	adds	r2, r0, r1
	event->poller = NULL;
   28a1c:	2300      	movs	r3, #0
   28a1e:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   28a20:	7b53      	ldrb	r3, [r2, #13]
   28a22:	f003 030f 	and.w	r3, r3, #15
   28a26:	2b02      	cmp	r3, #2
   28a28:	d0e3      	beq.n	289f2 <k_poll+0x3e2>
   28a2a:	2b04      	cmp	r3, #4
   28a2c:	d008      	beq.n	28a40 <k_poll+0x430>
   28a2e:	2b01      	cmp	r3, #1
   28a30:	d1e5      	bne.n	289fe <k_poll+0x3ee>
	node->prev->next = node->next;
   28a32:	6853      	ldr	r3, [r2, #4]
   28a34:	5847      	ldr	r7, [r0, r1]
   28a36:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28a38:	5843      	ldr	r3, [r0, r1]
   28a3a:	6852      	ldr	r2, [r2, #4]
   28a3c:	605a      	str	r2, [r3, #4]
   28a3e:	e7de      	b.n	289fe <k_poll+0x3ee>
	node->prev->next = node->next;
   28a40:	6853      	ldr	r3, [r2, #4]
   28a42:	5847      	ldr	r7, [r0, r1]
   28a44:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28a46:	5843      	ldr	r3, [r0, r1]
   28a48:	6852      	ldr	r2, [r2, #4]
   28a4a:	605a      	str	r2, [r3, #4]
   28a4c:	e7d7      	b.n	289fe <k_poll+0x3ee>
   28a4e:	462e      	mov	r6, r5
   28a50:	e7de      	b.n	28a10 <k_poll+0x400>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28a52:	f385 8811 	msr	BASEPRI, r5
		return 0;
   28a56:	2000      	movs	r0, #0
}
   28a58:	b005      	add	sp, #20
   28a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a5e:	f385 8811 	msr	BASEPRI, r5
		return -EAGAIN;
   28a62:	f06f 000a 	mvn.w	r0, #10
   28a66:	e7f7      	b.n	28a58 <k_poll+0x448>
	node->prev->next = node->next;
   28a68:	6853      	ldr	r3, [r2, #4]
   28a6a:	5877      	ldr	r7, [r6, r1]
   28a6c:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28a6e:	5873      	ldr	r3, [r6, r1]
   28a70:	6852      	ldr	r2, [r2, #4]
   28a72:	605a      	str	r2, [r3, #4]
   28a74:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   28a78:	f04f 0320 	mov.w	r3, #32
   28a7c:	f3ef 8511 	mrs	r5, BASEPRI
   28a80:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   28a84:	3c01      	subs	r4, #1
   28a86:	2c00      	cmp	r4, #0
   28a88:	db1c      	blt.n	28ac4 <k_poll+0x4b4>
		clear_event_registration(&events[last_registered]);
   28a8a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   28a8e:	0099      	lsls	r1, r3, #2
   28a90:	1872      	adds	r2, r6, r1
	event->poller = NULL;
   28a92:	2300      	movs	r3, #0
   28a94:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   28a96:	7b53      	ldrb	r3, [r2, #13]
   28a98:	f003 030f 	and.w	r3, r3, #15
   28a9c:	2b02      	cmp	r3, #2
   28a9e:	d0e3      	beq.n	28a68 <k_poll+0x458>
   28aa0:	2b04      	cmp	r3, #4
   28aa2:	d008      	beq.n	28ab6 <k_poll+0x4a6>
   28aa4:	2b01      	cmp	r3, #1
   28aa6:	d1e5      	bne.n	28a74 <k_poll+0x464>
	node->prev->next = node->next;
   28aa8:	6853      	ldr	r3, [r2, #4]
   28aaa:	5877      	ldr	r7, [r6, r1]
   28aac:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28aae:	5873      	ldr	r3, [r6, r1]
   28ab0:	6852      	ldr	r2, [r2, #4]
   28ab2:	605a      	str	r2, [r3, #4]
   28ab4:	e7de      	b.n	28a74 <k_poll+0x464>
	node->prev->next = node->next;
   28ab6:	6853      	ldr	r3, [r2, #4]
   28ab8:	5877      	ldr	r7, [r6, r1]
   28aba:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28abc:	5873      	ldr	r3, [r6, r1]
   28abe:	6852      	ldr	r2, [r2, #4]
   28ac0:	605a      	str	r2, [r3, #4]
   28ac2:	e7d7      	b.n	28a74 <k_poll+0x464>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28ac4:	f38e 8811 	msr	BASEPRI, lr
	return swap_rc;
   28ac8:	e7c6      	b.n	28a58 <k_poll+0x448>
   28aca:	bf00      	nop
   28acc:	20002d60 	.word	0x20002d60

00028ad0 <_handle_obj_poll_events>:
	return list->head == list;
   28ad0:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   28ad2:	4298      	cmp	r0, r3
   28ad4:	d010      	beq.n	28af8 <_handle_obj_poll_events+0x28>
	node->prev->next = node->next;
   28ad6:	685a      	ldr	r2, [r3, #4]
   28ad8:	6818      	ldr	r0, [r3, #0]
   28ada:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   28adc:	681a      	ldr	r2, [r3, #0]
   28ade:	6858      	ldr	r0, [r3, #4]
   28ae0:	6050      	str	r0, [r2, #4]
{
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
   28ae2:	b15b      	cbz	r3, 28afc <_handle_obj_poll_events+0x2c>
{
   28ae4:	b500      	push	{lr}
   28ae6:	b083      	sub	sp, #12
		return 0;
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   28ae8:	aa01      	add	r2, sp, #4
   28aea:	4618      	mov	r0, r3
   28aec:	f7ff fcfe 	bl	284ec <_signal_poll_event>
	return must_reschedule;
   28af0:	9801      	ldr	r0, [sp, #4]
}
   28af2:	b003      	add	sp, #12
   28af4:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   28af8:	2300      	movs	r3, #0
   28afa:	e7f2      	b.n	28ae2 <_handle_obj_poll_events+0x12>
		return 0;
   28afc:	2000      	movs	r0, #0
   28afe:	4770      	bx	lr

00028b00 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   28b00:	b530      	push	{r4, r5, lr}
   28b02:	b083      	sub	sp, #12
	__asm__ volatile(
   28b04:	f04f 0320 	mov.w	r3, #32
   28b08:	f3ef 8511 	mrs	r5, BASEPRI
   28b0c:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   28b10:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1;
   28b12:	2301      	movs	r3, #1
   28b14:	6083      	str	r3, [r0, #8]
	return list->head == list;
   28b16:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   28b18:	4298      	cmp	r0, r3
   28b1a:	d013      	beq.n	28b44 <k_poll_signal+0x44>
	node->prev->next = node->next;
   28b1c:	685a      	ldr	r2, [r3, #4]
   28b1e:	6819      	ldr	r1, [r3, #0]
   28b20:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   28b22:	681a      	ldr	r2, [r3, #0]
   28b24:	6859      	ldr	r1, [r3, #4]
   28b26:	6051      	str	r1, [r2, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
   28b28:	b173      	cbz	r3, 28b48 <k_poll_signal+0x48>
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   28b2a:	aa01      	add	r2, sp, #4
   28b2c:	2101      	movs	r1, #1
   28b2e:	4618      	mov	r0, r3
   28b30:	f7ff fcdc 	bl	284ec <_signal_poll_event>
   28b34:	4604      	mov	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
   28b36:	9b01      	ldr	r3, [sp, #4]
   28b38:	b953      	cbnz	r3, 28b50 <k_poll_signal+0x50>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28b3a:	f385 8811 	msr	BASEPRI, r5
	} else {
		irq_unlock(key);
	}

	return rc;
}
   28b3e:	4620      	mov	r0, r4
   28b40:	b003      	add	sp, #12
   28b42:	bd30      	pop	{r4, r5, pc}
		return NULL;
   28b44:	2300      	movs	r3, #0
   28b46:	e7ef      	b.n	28b28 <k_poll_signal+0x28>
   28b48:	f385 8811 	msr	BASEPRI, r5
		return 0;
   28b4c:	2400      	movs	r4, #0
   28b4e:	e7f6      	b.n	28b3e <k_poll_signal+0x3e>
	_update_time_slice_before_swap();
   28b50:	f000 fa74 	bl	2903c <_update_time_slice_before_swap>
	return __swap(key);
   28b54:	4628      	mov	r0, r5
   28b56:	f7fe fdb7 	bl	276c8 <__swap>
   28b5a:	e7f0      	b.n	28b3e <k_poll_signal+0x3e>

00028b5c <k_queue_poll>:
	sys_slist_init(list);
}

#if defined(CONFIG_POLL)
static void *k_queue_poll(struct k_queue *queue, s32_t timeout)
{
   28b5c:	b530      	push	{r4, r5, lr}
   28b5e:	b087      	sub	sp, #28
   28b60:	4604      	mov	r4, r0
   28b62:	460d      	mov	r5, r1
	struct k_poll_event event;
	int err;
	unsigned int key;
	void *val;

	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   28b64:	4603      	mov	r3, r0
   28b66:	2200      	movs	r2, #0
   28b68:	2104      	movs	r1, #4
   28b6a:	eb0d 0001 	add.w	r0, sp, r1
   28b6e:	f7ff fd3b 	bl	285e8 <k_poll_event_init>
   28b72:	e005      	b.n	28b80 <k_queue_poll+0x24>
   28b74:	f383 8811 	msr	BASEPRI, r3
		 * irq_lock.
		 */
		key = irq_lock();
		val = sys_slist_get(&queue->data_q);
		irq_unlock(key);
	} while (!val && timeout == K_FOREVER);
   28b78:	b9f8      	cbnz	r0, 28bba <k_queue_poll+0x5e>
   28b7a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   28b7e:	d11c      	bne.n	28bba <k_queue_poll+0x5e>
		event.state = K_POLL_STATE_NOT_READY;
   28b80:	f89d 3011 	ldrb.w	r3, [sp, #17]
   28b84:	f36f 1307 	bfc	r3, #4, #4
   28b88:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   28b8c:	462a      	mov	r2, r5
   28b8e:	2101      	movs	r1, #1
   28b90:	a801      	add	r0, sp, #4
   28b92:	f7ff fd3d 	bl	28610 <k_poll>
		if (err) {
   28b96:	b978      	cbnz	r0, 28bb8 <k_queue_poll+0x5c>
	__asm__ volatile(
   28b98:	f04f 0220 	mov.w	r2, #32
   28b9c:	f3ef 8311 	mrs	r3, BASEPRI
   28ba0:	f382 8811 	msr	BASEPRI, r2
   28ba4:	6820      	ldr	r0, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   28ba6:	2800      	cmp	r0, #0
   28ba8:	d0e4      	beq.n	28b74 <k_queue_poll+0x18>
	list->head = node->next;
   28baa:	6802      	ldr	r2, [r0, #0]
   28bac:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
   28bae:	6861      	ldr	r1, [r4, #4]
   28bb0:	4288      	cmp	r0, r1
   28bb2:	d1df      	bne.n	28b74 <k_queue_poll+0x18>
		list->tail = list->head;
   28bb4:	6062      	str	r2, [r4, #4]
   28bb6:	e7dd      	b.n	28b74 <k_queue_poll+0x18>
			return NULL;
   28bb8:	2000      	movs	r0, #0

	return val;
}
   28bba:	b007      	add	sp, #28
   28bbc:	bd30      	pop	{r4, r5, pc}

00028bbe <k_queue_init>:
	list->head = NULL;
   28bbe:	2300      	movs	r3, #0
   28bc0:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   28bc2:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   28bc4:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   28bc8:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   28bca:	60c3      	str	r3, [r0, #12]
   28bcc:	4770      	bx	lr

00028bce <k_queue_insert>:
{
   28bce:	b510      	push	{r4, lr}
   28bd0:	f04f 0320 	mov.w	r3, #32
   28bd4:	f3ef 8411 	mrs	r4, BASEPRI
   28bd8:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   28bdc:	b159      	cbz	r1, 28bf6 <k_queue_insert+0x28>
	} else if (!prev->next) {
   28bde:	680b      	ldr	r3, [r1, #0]
   28be0:	b18b      	cbz	r3, 28c06 <k_queue_insert+0x38>
		node->next = prev->next;
   28be2:	6013      	str	r3, [r2, #0]
		prev->next = node;
   28be4:	600a      	str	r2, [r1, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   28be6:	2104      	movs	r1, #4
   28be8:	3008      	adds	r0, #8
   28bea:	f7ff ff71 	bl	28ad0 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   28bee:	b998      	cbnz	r0, 28c18 <k_queue_insert+0x4a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28bf0:	f384 8811 	msr	BASEPRI, r4
   28bf4:	bd10      	pop	{r4, pc}
	node->next = list->head;
   28bf6:	6803      	ldr	r3, [r0, #0]
   28bf8:	6013      	str	r3, [r2, #0]
	list->head = node;
   28bfa:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   28bfc:	6843      	ldr	r3, [r0, #4]
   28bfe:	2b00      	cmp	r3, #0
   28c00:	d1f1      	bne.n	28be6 <k_queue_insert+0x18>
		list->tail = list->head;
   28c02:	6042      	str	r2, [r0, #4]
   28c04:	e7ef      	b.n	28be6 <k_queue_insert+0x18>
	node->next = NULL;
   28c06:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   28c08:	6843      	ldr	r3, [r0, #4]
   28c0a:	b113      	cbz	r3, 28c12 <k_queue_insert+0x44>
		list->tail->next = node;
   28c0c:	601a      	str	r2, [r3, #0]
		list->tail = node;
   28c0e:	6042      	str	r2, [r0, #4]
   28c10:	e7e9      	b.n	28be6 <k_queue_insert+0x18>
		list->tail = node;
   28c12:	6042      	str	r2, [r0, #4]
		list->head = node;
   28c14:	6002      	str	r2, [r0, #0]
   28c16:	e7e6      	b.n	28be6 <k_queue_insert+0x18>
	_update_time_slice_before_swap();
   28c18:	f000 fa10 	bl	2903c <_update_time_slice_before_swap>
	return __swap(key);
   28c1c:	4620      	mov	r0, r4
   28c1e:	f7fe fd53 	bl	276c8 <__swap>
   28c22:	bd10      	pop	{r4, pc}

00028c24 <k_queue_append>:
{
   28c24:	b508      	push	{r3, lr}
	return k_queue_insert(queue, queue->data_q.tail, data);
   28c26:	460a      	mov	r2, r1
   28c28:	6841      	ldr	r1, [r0, #4]
   28c2a:	f7ff ffd0 	bl	28bce <k_queue_insert>
   28c2e:	bd08      	pop	{r3, pc}

00028c30 <k_queue_prepend>:
{
   28c30:	b508      	push	{r3, lr}
	return k_queue_insert(queue, NULL, data);
   28c32:	460a      	mov	r2, r1
   28c34:	2100      	movs	r1, #0
   28c36:	f7ff ffca 	bl	28bce <k_queue_insert>
   28c3a:	bd08      	pop	{r3, pc}

00028c3c <k_queue_append_list>:
{
   28c3c:	b510      	push	{r4, lr}
	__asm__ volatile(
   28c3e:	f04f 0320 	mov.w	r3, #32
   28c42:	f3ef 8411 	mrs	r4, BASEPRI
   28c46:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   28c4a:	6843      	ldr	r3, [r0, #4]
   28c4c:	b14b      	cbz	r3, 28c62 <k_queue_append_list+0x26>
		list->tail->next = (sys_snode_t *)head;
   28c4e:	6019      	str	r1, [r3, #0]
		list->tail = (sys_snode_t *)tail;
   28c50:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   28c52:	2104      	movs	r1, #4
   28c54:	3008      	adds	r0, #8
   28c56:	f7ff ff3b 	bl	28ad0 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   28c5a:	b928      	cbnz	r0, 28c68 <k_queue_append_list+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28c5c:	f384 8811 	msr	BASEPRI, r4
   28c60:	bd10      	pop	{r4, pc}
		list->head = (sys_snode_t *)head;
   28c62:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   28c64:	6042      	str	r2, [r0, #4]
   28c66:	e7f4      	b.n	28c52 <k_queue_append_list+0x16>
	_update_time_slice_before_swap();
   28c68:	f000 f9e8 	bl	2903c <_update_time_slice_before_swap>
	return __swap(key);
   28c6c:	4620      	mov	r0, r4
   28c6e:	f7fe fd2b 	bl	276c8 <__swap>
   28c72:	bd10      	pop	{r4, pc}

00028c74 <k_queue_get>:
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   28c74:	b510      	push	{r4, lr}
	__asm__ volatile(
   28c76:	f04f 0320 	mov.w	r3, #32
   28c7a:	f3ef 8211 	mrs	r2, BASEPRI
   28c7e:	f383 8811 	msr	BASEPRI, r3
	return (!list->head);
   28c82:	6803      	ldr	r3, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   28c84:	b153      	cbz	r3, 28c9c <k_queue_get+0x28>
	list->head = node->next;
   28c86:	6819      	ldr	r1, [r3, #0]
   28c88:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   28c8a:	6844      	ldr	r4, [r0, #4]
   28c8c:	42a3      	cmp	r3, r4
   28c8e:	d003      	beq.n	28c98 <k_queue_get+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28c90:	f382 8811 	msr	BASEPRI, r2
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
   28c94:	4618      	mov	r0, r3
   28c96:	bd10      	pop	{r4, pc}
		list->tail = list->head;
   28c98:	6041      	str	r1, [r0, #4]
   28c9a:	e7f9      	b.n	28c90 <k_queue_get+0x1c>
	}

	if (timeout == K_NO_WAIT) {
   28c9c:	b121      	cbz	r1, 28ca8 <k_queue_get+0x34>
   28c9e:	f382 8811 	msr	BASEPRI, r2
	}

#if defined(CONFIG_POLL)
	irq_unlock(key);

	return k_queue_poll(queue, timeout);
   28ca2:	f7ff ff5b 	bl	28b5c <k_queue_poll>
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   28ca6:	bd10      	pop	{r4, pc}
   28ca8:	f382 8811 	msr	BASEPRI, r2
		return NULL;
   28cac:	2000      	movs	r0, #0
   28cae:	bd10      	pop	{r4, pc}

00028cb0 <_set_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   28cb0:	3010      	adds	r0, #16
   28cb2:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28cb4:	f000 001f 	and.w	r0, r0, #31
   28cb8:	2201      	movs	r2, #1
   28cba:	fa02 f000 	lsl.w	r0, r2, r0
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   28cbe:	1d9a      	adds	r2, r3, #6
   28cc0:	4b03      	ldr	r3, [pc, #12]	; (28cd0 <_set_ready_q_prio_bit+0x20>)
   28cc2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   28cc6:	685a      	ldr	r2, [r3, #4]
   28cc8:	4302      	orrs	r2, r0
   28cca:	605a      	str	r2, [r3, #4]
   28ccc:	4770      	bx	lr
   28cce:	bf00      	nop
   28cd0:	20002d60 	.word	0x20002d60

00028cd4 <_clear_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   28cd4:	3010      	adds	r0, #16
   28cd6:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28cd8:	f000 001f 	and.w	r0, r0, #31
   28cdc:	2201      	movs	r2, #1
   28cde:	fa02 f000 	lsl.w	r0, r2, r0
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
   28ce2:	1d9a      	adds	r2, r3, #6
   28ce4:	4b03      	ldr	r3, [pc, #12]	; (28cf4 <_clear_ready_q_prio_bit+0x20>)
   28ce6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   28cea:	685a      	ldr	r2, [r3, #4]
   28cec:	ea22 0200 	bic.w	r2, r2, r0
   28cf0:	605a      	str	r2, [r3, #4]
   28cf2:	4770      	bx	lr
   28cf4:	20002d60 	.word	0x20002d60

00028cf8 <_get_ready_q_head>:
	ready_range = _ready_q.prio_bmap[0];
   28cf8:	4b06      	ldr	r3, [pc, #24]	; (28d14 <_get_ready_q_head+0x1c>)
   28cfa:	69da      	ldr	r2, [r3, #28]
	return __builtin_ffs(op);
   28cfc:	fa92 f3a2 	rbit	r3, r2
   28d00:	fab3 f383 	clz	r3, r3
   28d04:	b90a      	cbnz	r2, 28d0a <_get_ready_q_head+0x12>
   28d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return list->head;
   28d0a:	3304      	adds	r3, #4

	struct k_thread *thread =
		(struct k_thread *)sys_dlist_peek_head_not_empty(list);

	return thread;
}
   28d0c:	4a01      	ldr	r2, [pc, #4]	; (28d14 <_get_ready_q_head+0x1c>)
   28d0e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   28d12:	4770      	bx	lr
   28d14:	20002d60 	.word	0x20002d60

00028d18 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   28d18:	b570      	push	{r4, r5, r6, lr}
   28d1a:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   28d1c:	f990 000a 	ldrsb.w	r0, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   28d20:	4e0c      	ldr	r6, [pc, #48]	; (28d54 <_add_thread_to_ready_q+0x3c>)
   28d22:	f100 0514 	add.w	r5, r0, #20
   28d26:	eb06 05c5 	add.w	r5, r6, r5, lsl #3

	_set_ready_q_prio_bit(thread->base.prio);
   28d2a:	f7ff ffc1 	bl	28cb0 <_set_ready_q_prio_bit>
	node->next = list;
   28d2e:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   28d30:	686b      	ldr	r3, [r5, #4]
   28d32:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   28d34:	686b      	ldr	r3, [r5, #4]
   28d36:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28d38:	606c      	str	r4, [r5, #4]
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   28d3a:	69b3      	ldr	r3, [r6, #24]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   28d3c:	f994 200a 	ldrsb.w	r2, [r4, #10]
   28d40:	f993 100a 	ldrsb.w	r1, [r3, #10]
   28d44:	4291      	cmp	r1, r2
   28d46:	dc02      	bgt.n	28d4e <_add_thread_to_ready_q+0x36>
   28d48:	4a02      	ldr	r2, [pc, #8]	; (28d54 <_add_thread_to_ready_q+0x3c>)
   28d4a:	6193      	str	r3, [r2, #24]
   28d4c:	bd70      	pop	{r4, r5, r6, pc}
   28d4e:	4623      	mov	r3, r4
   28d50:	e7fa      	b.n	28d48 <_add_thread_to_ready_q+0x30>
   28d52:	bf00      	nop
   28d54:	20002d60 	.word	0x20002d60

00028d58 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   28d58:	b538      	push	{r3, r4, r5, lr}
   28d5a:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   28d5c:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   28d60:	4a0e      	ldr	r2, [pc, #56]	; (28d9c <_remove_thread_from_ready_q+0x44>)
   28d62:	3314      	adds	r3, #20
   28d64:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
	node->prev->next = node->next;
   28d68:	6840      	ldr	r0, [r0, #4]
   28d6a:	6825      	ldr	r5, [r4, #0]
   28d6c:	6005      	str	r5, [r0, #0]
	node->next->prev = node->prev;
   28d6e:	6820      	ldr	r0, [r4, #0]
   28d70:	6865      	ldr	r5, [r4, #4]
   28d72:	6045      	str	r5, [r0, #4]
	return list->head == list;
   28d74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   28d78:	4299      	cmp	r1, r3
   28d7a:	d006      	beq.n	28d8a <_remove_thread_from_ready_q+0x32>
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28d7c:	4b07      	ldr	r3, [pc, #28]	; (28d9c <_remove_thread_from_ready_q+0x44>)
   28d7e:	6998      	ldr	r0, [r3, #24]
   28d80:	4284      	cmp	r4, r0
   28d82:	d007      	beq.n	28d94 <_remove_thread_from_ready_q+0x3c>
   28d84:	4b05      	ldr	r3, [pc, #20]	; (28d9c <_remove_thread_from_ready_q+0x44>)
   28d86:	6198      	str	r0, [r3, #24]
   28d88:	bd38      	pop	{r3, r4, r5, pc}
		_clear_ready_q_prio_bit(thread->base.prio);
   28d8a:	f994 000a 	ldrsb.w	r0, [r4, #10]
   28d8e:	f7ff ffa1 	bl	28cd4 <_clear_ready_q_prio_bit>
   28d92:	e7f3      	b.n	28d7c <_remove_thread_from_ready_q+0x24>
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28d94:	f7ff ffb0 	bl	28cf8 <_get_ready_q_head>
   28d98:	e7f4      	b.n	28d84 <_remove_thread_from_ready_q+0x2c>
   28d9a:	bf00      	nop
   28d9c:	20002d60 	.word	0x20002d60

00028da0 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   28da0:	b538      	push	{r3, r4, r5, lr}
   28da2:	680b      	ldr	r3, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28da4:	4299      	cmp	r1, r3
   28da6:	d115      	bne.n	28dd4 <_pend_thread+0x34>
   28da8:	2300      	movs	r3, #0
   28daa:	e013      	b.n	28dd4 <_pend_thread+0x34>
	if (!insert_point) {
   28dac:	b133      	cbz	r3, 28dbc <_pend_thread+0x1c>
		node->prev = insert_point->prev;
   28dae:	685c      	ldr	r4, [r3, #4]
   28db0:	6044      	str	r4, [r0, #4]
		node->next = insert_point;
   28db2:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   28db4:	685c      	ldr	r4, [r3, #4]
   28db6:	6020      	str	r0, [r4, #0]
		insert_point->prev = node;
   28db8:	6058      	str	r0, [r3, #4]
   28dba:	e02b      	b.n	28e14 <_pend_thread+0x74>
	node->next = list;
   28dbc:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   28dbe:	684b      	ldr	r3, [r1, #4]
   28dc0:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   28dc2:	684b      	ldr	r3, [r1, #4]
   28dc4:	6018      	str	r0, [r3, #0]
	list->tail = node;
   28dc6:	6048      	str	r0, [r1, #4]
   28dc8:	e024      	b.n	28e14 <_pend_thread+0x74>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28dca:	461d      	mov	r5, r3
   28dcc:	e010      	b.n	28df0 <_pend_thread+0x50>
	return (node == list->tail) ? NULL : node->next;
   28dce:	2500      	movs	r5, #0
   28dd0:	e00e      	b.n	28df0 <_pend_thread+0x50>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28dd2:	2300      	movs	r3, #0
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   28dd4:	b1c3      	cbz	r3, 28e08 <_pend_thread+0x68>
   28dd6:	f990 500a 	ldrsb.w	r5, [r0, #10]
   28dda:	f993 400a 	ldrsb.w	r4, [r3, #10]
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   28dde:	42a5      	cmp	r5, r4
   28de0:	dbe4      	blt.n	28dac <_pend_thread+0xc>
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   28de2:	461c      	mov	r4, r3
   28de4:	2b00      	cmp	r3, #0
   28de6:	d0f0      	beq.n	28dca <_pend_thread+0x2a>
	return (node == list->tail) ? NULL : node->next;
   28de8:	684d      	ldr	r5, [r1, #4]
   28dea:	42ab      	cmp	r3, r5
   28dec:	d0ef      	beq.n	28dce <_pend_thread+0x2e>
   28dee:	681d      	ldr	r5, [r3, #0]
   28df0:	b145      	cbz	r5, 28e04 <_pend_thread+0x64>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28df2:	2c00      	cmp	r4, #0
   28df4:	d0ed      	beq.n	28dd2 <_pend_thread+0x32>
	return (node == list->tail) ? NULL : node->next;
   28df6:	684d      	ldr	r5, [r1, #4]
   28df8:	42ac      	cmp	r4, r5
   28dfa:	d001      	beq.n	28e00 <_pend_thread+0x60>
   28dfc:	681b      	ldr	r3, [r3, #0]
   28dfe:	e7e9      	b.n	28dd4 <_pend_thread+0x34>
   28e00:	2300      	movs	r3, #0
   28e02:	e7e7      	b.n	28dd4 <_pend_thread+0x34>
   28e04:	2300      	movs	r3, #0
   28e06:	e7e5      	b.n	28dd4 <_pend_thread+0x34>
	node->next = list;
   28e08:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   28e0a:	684b      	ldr	r3, [r1, #4]
   28e0c:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   28e0e:	684b      	ldr	r3, [r1, #4]
   28e10:	6018      	str	r0, [r3, #0]
	list->tail = node;
   28e12:	6048      	str	r0, [r1, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   28e14:	7a44      	ldrb	r4, [r0, #9]
   28e16:	f044 0402 	orr.w	r4, r4, #2
   28e1a:	7244      	strb	r4, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   28e1c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28e20:	f000 8089 	beq.w	28f36 <_pend_thread+0x196>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   28e24:	f102 0309 	add.w	r3, r2, #9
   28e28:	4a43      	ldr	r2, [pc, #268]	; (28f38 <_pend_thread+0x198>)
   28e2a:	fba2 2303 	umull	r2, r3, r2, r3
   28e2e:	08db      	lsrs	r3, r3, #3
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
   28e30:	3301      	adds	r3, #1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   28e32:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28e36:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   28e38:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28e3a:	60e1      	str	r1, [r4, #12]
	if (!timeout_in_ticks) {
   28e3c:	b133      	cbz	r3, 28e4c <_pend_thread+0xac>
	return list->head == list;
   28e3e:	4a3f      	ldr	r2, [pc, #252]	; (28f3c <_pend_thread+0x19c>)
   28e40:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28e44:	4293      	cmp	r3, r2
   28e46:	d151      	bne.n	28eec <_pend_thread+0x14c>
   28e48:	2300      	movs	r3, #0
   28e4a:	e04f      	b.n	28eec <_pend_thread+0x14c>
	__asm__ volatile(
   28e4c:	f04f 0320 	mov.w	r3, #32
   28e50:	f3ef 8511 	mrs	r5, BASEPRI
   28e54:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28e5c:	6123      	str	r3, [r4, #16]
	if (thread) {
   28e5e:	b320      	cbz	r0, 28eaa <_pend_thread+0x10a>
	if (timeout_obj->wait_q) {
   28e60:	68e3      	ldr	r3, [r4, #12]
   28e62:	b15b      	cbz	r3, 28e7c <_pend_thread+0xdc>
	node->prev->next = node->next;
   28e64:	6843      	ldr	r3, [r0, #4]
   28e66:	6802      	ldr	r2, [r0, #0]
   28e68:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28e6a:	6803      	ldr	r3, [r0, #0]
   28e6c:	6842      	ldr	r2, [r0, #4]
   28e6e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28e70:	7a43      	ldrb	r3, [r0, #9]
   28e72:	f023 0302 	bic.w	r3, r3, #2
   28e76:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28e78:	2300      	movs	r3, #0
   28e7a:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28e7c:	7a43      	ldrb	r3, [r0, #9]
   28e7e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28e82:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28e84:	f013 0f1b 	tst.w	r3, #27
   28e88:	d107      	bne.n	28e9a <_pend_thread+0xfa>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28e8a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28e90:	d001      	beq.n	28e96 <_pend_thread+0xf6>
   28e92:	2300      	movs	r3, #0
   28e94:	e002      	b.n	28e9c <_pend_thread+0xfc>
   28e96:	2301      	movs	r3, #1
   28e98:	e000      	b.n	28e9c <_pend_thread+0xfc>
   28e9a:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28e9c:	b913      	cbnz	r3, 28ea4 <_pend_thread+0x104>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28e9e:	f385 8811 	msr	BASEPRI, r5
   28ea2:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   28ea4:	f7ff ff38 	bl	28d18 <_add_thread_to_ready_q>
   28ea8:	e7f9      	b.n	28e9e <_pend_thread+0xfe>
   28eaa:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   28eae:	6963      	ldr	r3, [r4, #20]
   28eb0:	2b00      	cmp	r3, #0
   28eb2:	d040      	beq.n	28f36 <_pend_thread+0x196>
			timeout->func(timeout);
   28eb4:	4620      	mov	r0, r4
   28eb6:	4798      	blx	r3
   28eb8:	bd38      	pop	{r3, r4, r5, pc}
			in_q->delta_ticks_from_prev -= *delta;
   28eba:	1a8a      	subs	r2, r1, r2
   28ebc:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28ebe:	b133      	cbz	r3, 28ece <_pend_thread+0x12e>
		node->prev = insert_point->prev;
   28ec0:	685a      	ldr	r2, [r3, #4]
   28ec2:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   28ec4:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   28ec6:	685a      	ldr	r2, [r3, #4]
   28ec8:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28eca:	605c      	str	r4, [r3, #4]
   28ecc:	bd38      	pop	{r3, r4, r5, pc}
	node->next = list;
   28ece:	4b1b      	ldr	r3, [pc, #108]	; (28f3c <_pend_thread+0x19c>)
   28ed0:	f103 020c 	add.w	r2, r3, #12
   28ed4:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   28ed6:	691a      	ldr	r2, [r3, #16]
   28ed8:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28eda:	691a      	ldr	r2, [r3, #16]
   28edc:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28ede:	611c      	str	r4, [r3, #16]
   28ee0:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28ee2:	4619      	mov	r1, r3
   28ee4:	e011      	b.n	28f0a <_pend_thread+0x16a>
	return (node == list->tail) ? NULL : node->next;
   28ee6:	2100      	movs	r1, #0
   28ee8:	e00f      	b.n	28f0a <_pend_thread+0x16a>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28eea:	2300      	movs	r3, #0
   28eec:	b1d3      	cbz	r3, 28f24 <_pend_thread+0x184>
		if (*delta <= in_q->delta_ticks_from_prev) {
   28eee:	6922      	ldr	r2, [r4, #16]
   28ef0:	6919      	ldr	r1, [r3, #16]
   28ef2:	428a      	cmp	r2, r1
   28ef4:	dde1      	ble.n	28eba <_pend_thread+0x11a>
		*delta -= in_q->delta_ticks_from_prev;
   28ef6:	1a52      	subs	r2, r2, r1
   28ef8:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28efa:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28efc:	2b00      	cmp	r3, #0
   28efe:	d0f0      	beq.n	28ee2 <_pend_thread+0x142>
	return (node == list->tail) ? NULL : node->next;
   28f00:	490e      	ldr	r1, [pc, #56]	; (28f3c <_pend_thread+0x19c>)
   28f02:	6909      	ldr	r1, [r1, #16]
   28f04:	428b      	cmp	r3, r1
   28f06:	d0ee      	beq.n	28ee6 <_pend_thread+0x146>
   28f08:	6819      	ldr	r1, [r3, #0]
   28f0a:	2900      	cmp	r1, #0
   28f0c:	d0ed      	beq.n	28eea <_pend_thread+0x14a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28f0e:	b12a      	cbz	r2, 28f1c <_pend_thread+0x17c>
	return (node == list->tail) ? NULL : node->next;
   28f10:	490a      	ldr	r1, [pc, #40]	; (28f3c <_pend_thread+0x19c>)
   28f12:	6909      	ldr	r1, [r1, #16]
   28f14:	428a      	cmp	r2, r1
   28f16:	d003      	beq.n	28f20 <_pend_thread+0x180>
   28f18:	681b      	ldr	r3, [r3, #0]
   28f1a:	e7e7      	b.n	28eec <_pend_thread+0x14c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28f1c:	2300      	movs	r3, #0
   28f1e:	e7e5      	b.n	28eec <_pend_thread+0x14c>
	return (node == list->tail) ? NULL : node->next;
   28f20:	2300      	movs	r3, #0
   28f22:	e7e3      	b.n	28eec <_pend_thread+0x14c>
	node->next = list;
   28f24:	4b05      	ldr	r3, [pc, #20]	; (28f3c <_pend_thread+0x19c>)
   28f26:	f103 020c 	add.w	r2, r3, #12
   28f2a:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   28f2c:	691a      	ldr	r2, [r3, #16]
   28f2e:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28f30:	691a      	ldr	r2, [r3, #16]
   28f32:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28f34:	611c      	str	r4, [r3, #16]
   28f36:	bd38      	pop	{r3, r4, r5, pc}
   28f38:	cccccccd 	.word	0xcccccccd
   28f3c:	20002d60 	.word	0x20002d60

00028f40 <_pend_current_thread>:
}

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   28f40:	b570      	push	{r4, r5, r6, lr}
   28f42:	4605      	mov	r5, r0
   28f44:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(_current);
   28f46:	4c05      	ldr	r4, [pc, #20]	; (28f5c <_pend_current_thread+0x1c>)
   28f48:	68a0      	ldr	r0, [r4, #8]
   28f4a:	f7ff ff05 	bl	28d58 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   28f4e:	4632      	mov	r2, r6
   28f50:	4629      	mov	r1, r5
   28f52:	68a0      	ldr	r0, [r4, #8]
   28f54:	f7ff ff24 	bl	28da0 <_pend_thread>
   28f58:	bd70      	pop	{r4, r5, r6, pc}
   28f5a:	bf00      	nop
   28f5c:	20002d60 	.word	0x20002d60

00028f60 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   28f60:	4b09      	ldr	r3, [pc, #36]	; (28f88 <__must_switch_threads+0x28>)
   28f62:	69db      	ldr	r3, [r3, #28]
	return __builtin_ffs(op);
   28f64:	fa93 f0a3 	rbit	r0, r3
   28f68:	fab0 f080 	clz	r0, r0
   28f6c:	b90b      	cbnz	r3, 28f72 <__must_switch_threads+0x12>
   28f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   28f72:	3810      	subs	r0, #16

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   28f74:	4b04      	ldr	r3, [pc, #16]	; (28f88 <__must_switch_threads+0x28>)
   28f76:	689b      	ldr	r3, [r3, #8]
   28f78:	f993 300a 	ldrsb.w	r3, [r3, #10]
#else
	return 0;
#endif
}
   28f7c:	4283      	cmp	r3, r0
   28f7e:	bfd4      	ite	le
   28f80:	2000      	movle	r0, #0
   28f82:	2001      	movgt	r0, #1
   28f84:	4770      	bx	lr
   28f86:	bf00      	nop
   28f88:	20002d60 	.word	0x20002d60

00028f8c <_move_thread_to_end_of_prio_q>:
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   28f8c:	f990 200a 	ldrsb.w	r2, [r0, #10]
	return prio + _NUM_COOP_PRIO;
   28f90:	f102 0310 	add.w	r3, r2, #16
	sys_dlist_t *q = &_ready_q.q[q_index];
   28f94:	3214      	adds	r2, #20
   28f96:	4911      	ldr	r1, [pc, #68]	; (28fdc <_move_thread_to_end_of_prio_q+0x50>)
   28f98:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	return list->tail == node;
   28f9c:	6851      	ldr	r1, [r2, #4]

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   28f9e:	4288      	cmp	r0, r1
   28fa0:	d01a      	beq.n	28fd8 <_move_thread_to_end_of_prio_q+0x4c>
{
   28fa2:	b510      	push	{r4, lr}
	node->prev->next = node->next;
   28fa4:	6841      	ldr	r1, [r0, #4]
   28fa6:	6804      	ldr	r4, [r0, #0]
   28fa8:	600c      	str	r4, [r1, #0]
	node->next->prev = node->prev;
   28faa:	6801      	ldr	r1, [r0, #0]
   28fac:	6844      	ldr	r4, [r0, #4]
   28fae:	604c      	str	r4, [r1, #4]
	node->next = list;
   28fb0:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   28fb2:	4a0a      	ldr	r2, [pc, #40]	; (28fdc <_move_thread_to_end_of_prio_q+0x50>)
   28fb4:	3304      	adds	r3, #4
   28fb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   28fba:	6859      	ldr	r1, [r3, #4]
   28fbc:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   28fbe:	6859      	ldr	r1, [r3, #4]
   28fc0:	6008      	str	r0, [r1, #0]
	list->tail = node;
   28fc2:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28fc4:	6993      	ldr	r3, [r2, #24]
   28fc6:	4298      	cmp	r0, r3
   28fc8:	d002      	beq.n	28fd0 <_move_thread_to_end_of_prio_q+0x44>
   28fca:	4a04      	ldr	r2, [pc, #16]	; (28fdc <_move_thread_to_end_of_prio_q+0x50>)
   28fcc:	6193      	str	r3, [r2, #24]
   28fce:	bd10      	pop	{r4, pc}
   28fd0:	f7ff fe92 	bl	28cf8 <_get_ready_q_head>
   28fd4:	4603      	mov	r3, r0
   28fd6:	e7f8      	b.n	28fca <_move_thread_to_end_of_prio_q+0x3e>
   28fd8:	4770      	bx	lr
   28fda:	bf00      	nop
   28fdc:	20002d60 	.word	0x20002d60

00028fe0 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   28fe0:	4b01      	ldr	r3, [pc, #4]	; (28fe8 <_impl_k_current_get+0x8>)
   28fe2:	6898      	ldr	r0, [r3, #8]
   28fe4:	4770      	bx	lr
   28fe6:	bf00      	nop
   28fe8:	20002d60 	.word	0x20002d60

00028fec <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   28fec:	4b0f      	ldr	r3, [pc, #60]	; (2902c <_is_thread_time_slicing+0x40>)
   28fee:	681b      	ldr	r3, [r3, #0]
   28ff0:	2b00      	cmp	r3, #0
   28ff2:	dd14      	ble.n	2901e <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   28ff4:	4b0e      	ldr	r3, [pc, #56]	; (29030 <_is_thread_time_slicing+0x44>)
   28ff6:	681b      	ldr	r3, [r3, #0]
   28ff8:	4298      	cmp	r0, r3
   28ffa:	d012      	beq.n	29022 <_is_thread_time_slicing+0x36>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   28ffc:	f990 300a 	ldrsb.w	r3, [r0, #10]
   29000:	4a0c      	ldr	r2, [pc, #48]	; (29034 <_is_thread_time_slicing+0x48>)
   29002:	6812      	ldr	r2, [r2, #0]
   29004:	4293      	cmp	r3, r2
   29006:	db0e      	blt.n	29026 <_is_thread_time_slicing+0x3a>
	return list->head != list->tail;
   29008:	4a0b      	ldr	r2, [pc, #44]	; (29038 <_is_thread_time_slicing+0x4c>)
   2900a:	3314      	adds	r3, #20
   2900c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   29010:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   29014:	685b      	ldr	r3, [r3, #4]
   29016:	1ac0      	subs	r0, r0, r3
   29018:	bf18      	it	ne
   2901a:	2001      	movne	r0, #1
	}

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
   2901c:	4770      	bx	lr
		return 0;
   2901e:	2000      	movs	r0, #0
   29020:	4770      	bx	lr
   29022:	2000      	movs	r0, #0
   29024:	4770      	bx	lr
   29026:	2000      	movs	r0, #0
}
   29028:	4770      	bx	lr
   2902a:	bf00      	nop
   2902c:	20002e80 	.word	0x20002e80
   29030:	000330f4 	.word	0x000330f4
   29034:	20002e84 	.word	0x20002e84
   29038:	20002d60 	.word	0x20002d60

0002903c <_update_time_slice_before_swap>:
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   2903c:	2200      	movs	r2, #0
   2903e:	4b01      	ldr	r3, [pc, #4]	; (29044 <_update_time_slice_before_swap+0x8>)
   29040:	601a      	str	r2, [r3, #0]
   29042:	4770      	bx	lr
   29044:	2000314c 	.word	0x2000314c

00029048 <_reschedule_threads>:
{
   29048:	b510      	push	{r4, lr}
   2904a:	4604      	mov	r4, r0
	return _is_preempt(_current) && __must_switch_threads();
   2904c:	4b0a      	ldr	r3, [pc, #40]	; (29078 <_reschedule_threads+0x30>)
   2904e:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   29050:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   29052:	2b7f      	cmp	r3, #127	; 0x7f
   29054:	d805      	bhi.n	29062 <_reschedule_threads+0x1a>
   29056:	f7ff ff83 	bl	28f60 <__must_switch_threads>
   2905a:	4603      	mov	r3, r0
   2905c:	b110      	cbz	r0, 29064 <_reschedule_threads+0x1c>
   2905e:	2301      	movs	r3, #1
   29060:	e000      	b.n	29064 <_reschedule_threads+0x1c>
   29062:	2300      	movs	r3, #0
	if (_must_switch_threads()) {
   29064:	b913      	cbnz	r3, 2906c <_reschedule_threads+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29066:	f384 8811 	msr	BASEPRI, r4
   2906a:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   2906c:	f7ff ffe6 	bl	2903c <_update_time_slice_before_swap>
	return __swap(key);
   29070:	4620      	mov	r0, r4
   29072:	f7fe fb29 	bl	276c8 <__swap>
   29076:	bd10      	pop	{r4, pc}
   29078:	20002d60 	.word	0x20002d60

0002907c <k_sched_unlock>:
{
   2907c:	b508      	push	{r3, lr}
	__asm__ volatile(
   2907e:	f04f 0320 	mov.w	r3, #32
   29082:	f3ef 8011 	mrs	r0, BASEPRI
   29086:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   2908a:	4b04      	ldr	r3, [pc, #16]	; (2909c <k_sched_unlock+0x20>)
   2908c:	689a      	ldr	r2, [r3, #8]
   2908e:	7ad3      	ldrb	r3, [r2, #11]
   29090:	3301      	adds	r3, #1
   29092:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   29094:	f7ff ffd8 	bl	29048 <_reschedule_threads>
   29098:	bd08      	pop	{r3, pc}
   2909a:	bf00      	nop
   2909c:	20002d60 	.word	0x20002d60

000290a0 <_impl_k_yield>:
{
   290a0:	b538      	push	{r3, r4, r5, lr}
   290a2:	f04f 0320 	mov.w	r3, #32
   290a6:	f3ef 8511 	mrs	r5, BASEPRI
   290aa:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   290ae:	4c08      	ldr	r4, [pc, #32]	; (290d0 <_impl_k_yield+0x30>)
   290b0:	68a0      	ldr	r0, [r4, #8]
   290b2:	f7ff ff6b 	bl	28f8c <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   290b6:	68a2      	ldr	r2, [r4, #8]
	return _ready_q.cache;
   290b8:	69a3      	ldr	r3, [r4, #24]
   290ba:	429a      	cmp	r2, r3
   290bc:	d005      	beq.n	290ca <_impl_k_yield+0x2a>
	_update_time_slice_before_swap();
   290be:	f7ff ffbd 	bl	2903c <_update_time_slice_before_swap>
	return __swap(key);
   290c2:	4628      	mov	r0, r5
   290c4:	f7fe fb00 	bl	276c8 <__swap>
   290c8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   290ca:	f385 8811 	msr	BASEPRI, r5
   290ce:	bd38      	pop	{r3, r4, r5, pc}
   290d0:	20002d60 	.word	0x20002d60

000290d4 <_impl_k_sleep>:
{
   290d4:	b570      	push	{r4, r5, r6, lr}
   290d6:	b082      	sub	sp, #8
	if (duration == 0) {
   290d8:	b308      	cbz	r0, 2911e <_impl_k_sleep+0x4a>
   290da:	4603      	mov	r3, r0
   290dc:	3309      	adds	r3, #9
   290de:	4a4f      	ldr	r2, [pc, #316]	; (2921c <_impl_k_sleep+0x148>)
   290e0:	fba2 2303 	umull	r2, r3, r2, r3
   290e4:	08db      	lsrs	r3, r3, #3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   290e6:	3301      	adds	r3, #1
   290e8:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
   290ea:	f04f 0320 	mov.w	r3, #32
   290ee:	f3ef 8511 	mrs	r5, BASEPRI
   290f2:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
   290f6:	4c4a      	ldr	r4, [pc, #296]	; (29220 <_impl_k_sleep+0x14c>)
   290f8:	68a0      	ldr	r0, [r4, #8]
   290fa:	f7ff fe2d 	bl	28d58 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   290fe:	68a0      	ldr	r0, [r4, #8]
   29100:	9b01      	ldr	r3, [sp, #4]
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   29102:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29106:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   29108:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2910a:	2200      	movs	r2, #0
   2910c:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   2910e:	b14b      	cbz	r3, 29124 <_impl_k_sleep+0x50>
	return list->head == list;
   29110:	4a43      	ldr	r2, [pc, #268]	; (29220 <_impl_k_sleep+0x14c>)
   29112:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29116:	4293      	cmp	r3, r2
   29118:	d154      	bne.n	291c4 <_impl_k_sleep+0xf0>
   2911a:	2300      	movs	r3, #0
   2911c:	e052      	b.n	291c4 <_impl_k_sleep+0xf0>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   2911e:	f7ff ffbf 	bl	290a0 <_impl_k_yield>
   29122:	e079      	b.n	29218 <_impl_k_sleep+0x144>
   29124:	f04f 0320 	mov.w	r3, #32
   29128:	f3ef 8611 	mrs	r6, BASEPRI
   2912c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29134:	6123      	str	r3, [r4, #16]
	if (thread) {
   29136:	b320      	cbz	r0, 29182 <_impl_k_sleep+0xae>
	if (timeout_obj->wait_q) {
   29138:	68e3      	ldr	r3, [r4, #12]
   2913a:	b15b      	cbz	r3, 29154 <_impl_k_sleep+0x80>
	node->prev->next = node->next;
   2913c:	6843      	ldr	r3, [r0, #4]
   2913e:	6802      	ldr	r2, [r0, #0]
   29140:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29142:	6803      	ldr	r3, [r0, #0]
   29144:	6842      	ldr	r2, [r0, #4]
   29146:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29148:	7a43      	ldrb	r3, [r0, #9]
   2914a:	f023 0302 	bic.w	r3, r3, #2
   2914e:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   29150:	2300      	movs	r3, #0
   29152:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29154:	7a43      	ldrb	r3, [r0, #9]
   29156:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2915a:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2915c:	f013 0f1b 	tst.w	r3, #27
   29160:	d107      	bne.n	29172 <_impl_k_sleep+0x9e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29162:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29168:	d001      	beq.n	2916e <_impl_k_sleep+0x9a>
   2916a:	2300      	movs	r3, #0
   2916c:	e002      	b.n	29174 <_impl_k_sleep+0xa0>
   2916e:	2301      	movs	r3, #1
   29170:	e000      	b.n	29174 <_impl_k_sleep+0xa0>
   29172:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29174:	b913      	cbnz	r3, 2917c <_impl_k_sleep+0xa8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29176:	f386 8811 	msr	BASEPRI, r6
   2917a:	e048      	b.n	2920e <_impl_k_sleep+0x13a>
		_add_thread_to_ready_q(thread);
   2917c:	f7ff fdcc 	bl	28d18 <_add_thread_to_ready_q>
   29180:	e7f9      	b.n	29176 <_impl_k_sleep+0xa2>
   29182:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   29186:	6963      	ldr	r3, [r4, #20]
   29188:	2b00      	cmp	r3, #0
   2918a:	d040      	beq.n	2920e <_impl_k_sleep+0x13a>
			timeout->func(timeout);
   2918c:	4620      	mov	r0, r4
   2918e:	4798      	blx	r3
   29190:	e03d      	b.n	2920e <_impl_k_sleep+0x13a>
			in_q->delta_ticks_from_prev -= *delta;
   29192:	1a8a      	subs	r2, r1, r2
   29194:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29196:	b133      	cbz	r3, 291a6 <_impl_k_sleep+0xd2>
		node->prev = insert_point->prev;
   29198:	685a      	ldr	r2, [r3, #4]
   2919a:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   2919c:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   2919e:	685a      	ldr	r2, [r3, #4]
   291a0:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   291a2:	605c      	str	r4, [r3, #4]
   291a4:	e033      	b.n	2920e <_impl_k_sleep+0x13a>
	node->next = list;
   291a6:	4b1e      	ldr	r3, [pc, #120]	; (29220 <_impl_k_sleep+0x14c>)
   291a8:	f103 020c 	add.w	r2, r3, #12
   291ac:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   291ae:	691a      	ldr	r2, [r3, #16]
   291b0:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   291b2:	691a      	ldr	r2, [r3, #16]
   291b4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   291b6:	611c      	str	r4, [r3, #16]
   291b8:	e029      	b.n	2920e <_impl_k_sleep+0x13a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   291ba:	4619      	mov	r1, r3
   291bc:	e011      	b.n	291e2 <_impl_k_sleep+0x10e>
	return (node == list->tail) ? NULL : node->next;
   291be:	2100      	movs	r1, #0
   291c0:	e00f      	b.n	291e2 <_impl_k_sleep+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   291c2:	2300      	movs	r3, #0
   291c4:	b1d3      	cbz	r3, 291fc <_impl_k_sleep+0x128>
		if (*delta <= in_q->delta_ticks_from_prev) {
   291c6:	6922      	ldr	r2, [r4, #16]
   291c8:	6919      	ldr	r1, [r3, #16]
   291ca:	428a      	cmp	r2, r1
   291cc:	dde1      	ble.n	29192 <_impl_k_sleep+0xbe>
		*delta -= in_q->delta_ticks_from_prev;
   291ce:	1a52      	subs	r2, r2, r1
   291d0:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   291d2:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   291d4:	2b00      	cmp	r3, #0
   291d6:	d0f0      	beq.n	291ba <_impl_k_sleep+0xe6>
	return (node == list->tail) ? NULL : node->next;
   291d8:	4911      	ldr	r1, [pc, #68]	; (29220 <_impl_k_sleep+0x14c>)
   291da:	6909      	ldr	r1, [r1, #16]
   291dc:	428b      	cmp	r3, r1
   291de:	d0ee      	beq.n	291be <_impl_k_sleep+0xea>
   291e0:	6819      	ldr	r1, [r3, #0]
   291e2:	2900      	cmp	r1, #0
   291e4:	d0ed      	beq.n	291c2 <_impl_k_sleep+0xee>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   291e6:	b12a      	cbz	r2, 291f4 <_impl_k_sleep+0x120>
	return (node == list->tail) ? NULL : node->next;
   291e8:	490d      	ldr	r1, [pc, #52]	; (29220 <_impl_k_sleep+0x14c>)
   291ea:	6909      	ldr	r1, [r1, #16]
   291ec:	428a      	cmp	r2, r1
   291ee:	d003      	beq.n	291f8 <_impl_k_sleep+0x124>
   291f0:	681b      	ldr	r3, [r3, #0]
   291f2:	e7e7      	b.n	291c4 <_impl_k_sleep+0xf0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   291f4:	2300      	movs	r3, #0
   291f6:	e7e5      	b.n	291c4 <_impl_k_sleep+0xf0>
	return (node == list->tail) ? NULL : node->next;
   291f8:	2300      	movs	r3, #0
   291fa:	e7e3      	b.n	291c4 <_impl_k_sleep+0xf0>
	node->next = list;
   291fc:	4b08      	ldr	r3, [pc, #32]	; (29220 <_impl_k_sleep+0x14c>)
   291fe:	f103 020c 	add.w	r2, r3, #12
   29202:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   29204:	691a      	ldr	r2, [r3, #16]
   29206:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29208:	691a      	ldr	r2, [r3, #16]
   2920a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2920c:	611c      	str	r4, [r3, #16]
	_update_time_slice_before_swap();
   2920e:	f7ff ff15 	bl	2903c <_update_time_slice_before_swap>
	return __swap(key);
   29212:	4628      	mov	r0, r5
   29214:	f7fe fa58 	bl	276c8 <__swap>
}
   29218:	b002      	add	sp, #8
   2921a:	bd70      	pop	{r4, r5, r6, pc}
   2921c:	cccccccd 	.word	0xcccccccd
   29220:	20002d60 	.word	0x20002d60

00029224 <do_sem_give>:
	sem->count += (sem->count != sem->limit);
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
   29224:	b510      	push	{r4, lr}
	if (_handling_timeouts) {
   29226:	4b43      	ldr	r3, [pc, #268]	; (29334 <do_sem_give+0x110>)
   29228:	681b      	ldr	r3, [r3, #0]
   2922a:	2b00      	cmp	r3, #0
   2922c:	d136      	bne.n	2929c <do_sem_give+0x78>
	return list->head == list;
   2922e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29230:	42a0      	cmp	r0, r4
   29232:	d044      	beq.n	292be <do_sem_give+0x9a>
	if (thread) {
   29234:	b14c      	cbz	r4, 2924a <do_sem_give+0x26>
	node->prev->next = node->next;
   29236:	6863      	ldr	r3, [r4, #4]
   29238:	6822      	ldr	r2, [r4, #0]
   2923a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2923c:	6823      	ldr	r3, [r4, #0]
   2923e:	6862      	ldr	r2, [r4, #4]
   29240:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29242:	7a63      	ldrb	r3, [r4, #9]
   29244:	f023 0302 	bic.w	r3, r3, #2
   29248:	7263      	strb	r3, [r4, #9]
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);

	if (!thread) {
   2924a:	2c00      	cmp	r4, #0
   2924c:	d039      	beq.n	292c2 <do_sem_give+0x9e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2924e:	6a22      	ldr	r2, [r4, #32]
   29250:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29254:	d013      	beq.n	2927e <do_sem_give+0x5a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29256:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   2925a:	4937      	ldr	r1, [pc, #220]	; (29338 <do_sem_give+0x114>)
   2925c:	6909      	ldr	r1, [r1, #16]
   2925e:	428b      	cmp	r3, r1
   29260:	d004      	beq.n	2926c <do_sem_give+0x48>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29262:	b103      	cbz	r3, 29266 <do_sem_give+0x42>
	return (node == list->tail) ? NULL : node->next;
   29264:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29266:	6919      	ldr	r1, [r3, #16]
   29268:	440a      	add	r2, r1
   2926a:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2926c:	6963      	ldr	r3, [r4, #20]
   2926e:	6922      	ldr	r2, [r4, #16]
   29270:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29272:	6923      	ldr	r3, [r4, #16]
   29274:	6962      	ldr	r2, [r4, #20]
   29276:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2927c:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2927e:	7a63      	ldrb	r3, [r4, #9]
   29280:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29284:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29286:	f013 0f1b 	tst.w	r3, #27
   2928a:	d128      	bne.n	292de <do_sem_give+0xba>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2928c:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2928e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29292:	d022      	beq.n	292da <do_sem_give+0xb6>
   29294:	2300      	movs	r3, #0
   29296:	e023      	b.n	292e0 <do_sem_give+0xbc>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29298:	2400      	movs	r4, #0
   2929a:	e003      	b.n	292a4 <do_sem_give+0x80>
   2929c:	4602      	mov	r2, r0
	return list->head == list;
   2929e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   292a0:	42a0      	cmp	r0, r4
   292a2:	d0f9      	beq.n	29298 <do_sem_give+0x74>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   292a4:	2c00      	cmp	r4, #0
   292a6:	d0c5      	beq.n	29234 <do_sem_give+0x10>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   292a8:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   292aa:	f113 0f02 	cmn.w	r3, #2
   292ae:	d1c1      	bne.n	29234 <do_sem_give+0x10>
	return (node == list->tail) ? NULL : node->next;
   292b0:	6853      	ldr	r3, [r2, #4]
   292b2:	429c      	cmp	r4, r3
   292b4:	d001      	beq.n	292ba <do_sem_give+0x96>
   292b6:	6824      	ldr	r4, [r4, #0]
   292b8:	e7f4      	b.n	292a4 <do_sem_give+0x80>
   292ba:	2400      	movs	r4, #0
   292bc:	e7f2      	b.n	292a4 <do_sem_give+0x80>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   292be:	2400      	movs	r4, #0
   292c0:	e7b8      	b.n	29234 <do_sem_give+0x10>
	sem->count += (sem->count != sem->limit);
   292c2:	6883      	ldr	r3, [r0, #8]
   292c4:	68c2      	ldr	r2, [r0, #12]
   292c6:	4293      	cmp	r3, r2
   292c8:	bf18      	it	ne
   292ca:	3301      	addne	r3, #1
   292cc:	6083      	str	r3, [r0, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   292ce:	2102      	movs	r1, #2
   292d0:	3010      	adds	r0, #16
   292d2:	f7ff fbfd 	bl	28ad0 <_handle_obj_poll_events>
   292d6:	4603      	mov	r3, r0
		increment_count_up_to_limit(sem);
		return handle_poll_events(sem);
   292d8:	e01c      	b.n	29314 <do_sem_give+0xf0>
	return !(_is_thread_prevented_from_running(thread) ||
   292da:	2301      	movs	r3, #1
   292dc:	e000      	b.n	292e0 <do_sem_give+0xbc>
   292de:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   292e0:	b96b      	cbnz	r3, 292fe <do_sem_give+0xda>
   292e2:	2300      	movs	r3, #0
   292e4:	6663      	str	r3, [r4, #100]	; 0x64
   292e6:	f3ef 8305 	mrs	r3, IPSR
   292ea:	2b0d      	cmp	r3, #13
   292ec:	d80b      	bhi.n	29306 <do_sem_give+0xe2>
   292ee:	b19b      	cbz	r3, 29318 <do_sem_give+0xf4>
   292f0:	4b12      	ldr	r3, [pc, #72]	; (2933c <do_sem_give+0x118>)
   292f2:	685b      	ldr	r3, [r3, #4]
   292f4:	f413 6f00 	tst.w	r3, #2048	; 0x800
   292f8:	d010      	beq.n	2931c <do_sem_give+0xf8>
   292fa:	2300      	movs	r3, #0
   292fc:	e004      	b.n	29308 <do_sem_give+0xe4>
		_add_thread_to_ready_q(thread);
   292fe:	4620      	mov	r0, r4
   29300:	f7ff fd0a 	bl	28d18 <_add_thread_to_ready_q>
   29304:	e7ed      	b.n	292e2 <do_sem_give+0xbe>
   29306:	2301      	movs	r3, #1
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);

	return !_is_in_isr() && _must_switch_threads();
   29308:	b98b      	cbnz	r3, 2932e <do_sem_give+0x10a>
	return _is_preempt(_current) && __must_switch_threads();
   2930a:	4a0b      	ldr	r2, [pc, #44]	; (29338 <do_sem_give+0x114>)
   2930c:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2930e:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   29310:	2a7f      	cmp	r2, #127	; 0x7f
   29312:	d905      	bls.n	29320 <do_sem_give+0xfc>
}
   29314:	4618      	mov	r0, r3
   29316:	bd10      	pop	{r4, pc}
   29318:	2300      	movs	r3, #0
   2931a:	e7f5      	b.n	29308 <do_sem_give+0xe4>
   2931c:	2301      	movs	r3, #1
   2931e:	e7f3      	b.n	29308 <do_sem_give+0xe4>
   29320:	f7ff fe1e 	bl	28f60 <__must_switch_threads>
   29324:	4603      	mov	r3, r0
   29326:	2800      	cmp	r0, #0
   29328:	d0f4      	beq.n	29314 <do_sem_give+0xf0>
   2932a:	2301      	movs	r3, #1
   2932c:	e7f2      	b.n	29314 <do_sem_give+0xf0>
	return !_is_in_isr() && _must_switch_threads();
   2932e:	2300      	movs	r3, #0
   29330:	e7f0      	b.n	29314 <do_sem_give+0xf0>
   29332:	bf00      	nop
   29334:	20003148 	.word	0x20003148
   29338:	20002d60 	.word	0x20002d60
   2933c:	e000ed00 	.word	0xe000ed00

00029340 <_impl_k_sem_init>:
	sem->count = initial_count;
   29340:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   29342:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   29344:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   29346:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   29348:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2934c:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2934e:	6143      	str	r3, [r0, #20]
   29350:	4770      	bx	lr

00029352 <_impl_k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   29352:	b510      	push	{r4, lr}
	__asm__ volatile(
   29354:	f04f 0320 	mov.w	r3, #32
   29358:	f3ef 8411 	mrs	r4, BASEPRI
   2935c:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   29360:	f7ff ff60 	bl	29224 <do_sem_give>
   29364:	b910      	cbnz	r0, 2936c <_impl_k_sem_give+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29366:	f384 8811 	msr	BASEPRI, r4
   2936a:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   2936c:	f7ff fe66 	bl	2903c <_update_time_slice_before_swap>
	return __swap(key);
   29370:	4620      	mov	r0, r4
   29372:	f7fe f9a9 	bl	276c8 <__swap>
   29376:	bd10      	pop	{r4, pc}

00029378 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   29378:	b510      	push	{r4, lr}
	__asm__ volatile(
   2937a:	f04f 0320 	mov.w	r3, #32
   2937e:	f3ef 8411 	mrs	r4, BASEPRI
   29382:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   29386:	6883      	ldr	r3, [r0, #8]
   29388:	b12b      	cbz	r3, 29396 <_impl_k_sem_take+0x1e>
		sem->count--;
   2938a:	3b01      	subs	r3, #1
   2938c:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2938e:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   29392:	2000      	movs	r0, #0
   29394:	bd10      	pop	{r4, pc}
	}

	if (timeout == K_NO_WAIT) {
   29396:	b139      	cbz	r1, 293a8 <_impl_k_sem_take+0x30>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
   29398:	f7ff fdd2 	bl	28f40 <_pend_current_thread>
	_update_time_slice_before_swap();
   2939c:	f7ff fe4e 	bl	2903c <_update_time_slice_before_swap>
	return __swap(key);
   293a0:	4620      	mov	r0, r4
   293a2:	f7fe f991 	bl	276c8 <__swap>

	return _Swap(key);
}
   293a6:	bd10      	pop	{r4, pc}
   293a8:	f384 8811 	msr	BASEPRI, r4
		return -EBUSY;
   293ac:	f06f 000f 	mvn.w	r0, #15
   293b0:	bd10      	pop	{r4, pc}
	...

000293b4 <handle_time_slicing>:
 *   in this function and at thread level
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(s32_t ticks)
{
   293b4:	b538      	push	{r3, r4, r5, lr}
   293b6:	4604      	mov	r4, r0
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
   293b8:	4b0f      	ldr	r3, [pc, #60]	; (293f8 <handle_time_slicing+0x44>)
   293ba:	6898      	ldr	r0, [r3, #8]
   293bc:	f7ff fe16 	bl	28fec <_is_thread_time_slicing>
   293c0:	b150      	cbz	r0, 293d8 <handle_time_slicing+0x24>
	return (u64_t)ticks * _ms_per_tick;
   293c2:	00a2      	lsls	r2, r4, #2
   293c4:	1912      	adds	r2, r2, r4
   293c6:	1892      	adds	r2, r2, r2
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   293c8:	490c      	ldr	r1, [pc, #48]	; (293fc <handle_time_slicing+0x48>)
   293ca:	680b      	ldr	r3, [r1, #0]
   293cc:	441a      	add	r2, r3
   293ce:	600a      	str	r2, [r1, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   293d0:	4b0b      	ldr	r3, [pc, #44]	; (29400 <handle_time_slicing+0x4c>)
   293d2:	681b      	ldr	r3, [r3, #0]
   293d4:	429a      	cmp	r2, r3
   293d6:	da00      	bge.n	293da <handle_time_slicing+0x26>
   293d8:	bd38      	pop	{r3, r4, r5, pc}

		unsigned int key;

		_time_slice_elapsed = 0;
   293da:	2200      	movs	r2, #0
   293dc:	600a      	str	r2, [r1, #0]
	__asm__ volatile(
   293de:	f04f 0320 	mov.w	r3, #32
   293e2:	f3ef 8411 	mrs	r4, BASEPRI
   293e6:	f383 8811 	msr	BASEPRI, r3

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
   293ea:	4b03      	ldr	r3, [pc, #12]	; (293f8 <handle_time_slicing+0x44>)
   293ec:	6898      	ldr	r0, [r3, #8]
   293ee:	f7ff fdcd 	bl	28f8c <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   293f2:	f384 8811 	msr	BASEPRI, r4
   293f6:	e7ef      	b.n	293d8 <handle_time_slicing+0x24>
   293f8:	20002d60 	.word	0x20002d60
   293fc:	2000314c 	.word	0x2000314c
   29400:	20002e80 	.word	0x20002e80

00029404 <_tick_get_32>:
	return (u32_t)_sys_clock_tick_count;
   29404:	4b01      	ldr	r3, [pc, #4]	; (2940c <_tick_get_32+0x8>)
   29406:	e9d3 0100 	ldrd	r0, r1, [r3]
}
   2940a:	4770      	bx	lr
   2940c:	20003150 	.word	0x20003150

00029410 <_impl_k_uptime_get_32>:
{
   29410:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(_tick_get_32());
   29412:	f7ff fff7 	bl	29404 <_tick_get_32>
   29416:	0082      	lsls	r2, r0, #2
   29418:	1810      	adds	r0, r2, r0
   2941a:	1800      	adds	r0, r0, r0
}
   2941c:	bd38      	pop	{r3, r4, r5, pc}
	...

00029420 <_tick_get>:
	__asm__ volatile(
   29420:	f04f 0220 	mov.w	r2, #32
   29424:	f3ef 8311 	mrs	r3, BASEPRI
   29428:	f382 8811 	msr	BASEPRI, r2
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   2942c:	4a02      	ldr	r2, [pc, #8]	; (29438 <_tick_get+0x18>)
   2942e:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29432:	f383 8811 	msr	BASEPRI, r3
}
   29436:	4770      	bx	lr
   29438:	20003150 	.word	0x20003150

0002943c <_impl_k_uptime_get>:
{
   2943c:	b510      	push	{r4, lr}
	return __ticks_to_ms(_tick_get());
   2943e:	f7ff ffef 	bl	29420 <_tick_get>
   29442:	008c      	lsls	r4, r1, #2
   29444:	0082      	lsls	r2, r0, #2
   29446:	ea44 7390 	orr.w	r3, r4, r0, lsr #30
   2944a:	1880      	adds	r0, r0, r2
   2944c:	4159      	adcs	r1, r3
   2944e:	1800      	adds	r0, r0, r0
   29450:	4149      	adcs	r1, r1
}
   29452:	bd10      	pop	{r4, pc}

00029454 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   29454:	b570      	push	{r4, r5, r6, lr}
   29456:	b082      	sub	sp, #8
   29458:	4605      	mov	r5, r0
	__asm__ volatile(
   2945a:	f04f 0320 	mov.w	r3, #32
   2945e:	f3ef 8011 	mrs	r0, BASEPRI
   29462:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   29466:	496a      	ldr	r1, [pc, #424]	; (29610 <_nano_sys_clock_tick_announce+0x1bc>)
   29468:	e9d1 2300 	ldrd	r2, r3, [r1]
   2946c:	1952      	adds	r2, r2, r5
   2946e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   29472:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29476:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   2947a:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   2947e:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   29482:	f04f 0320 	mov.w	r3, #32
   29486:	f3ef 8111 	mrs	r1, BASEPRI
   2948a:	f383 8811 	msr	BASEPRI, r3
   2948e:	4608      	mov	r0, r1
	return list->head == list;
   29490:	4b60      	ldr	r3, [pc, #384]	; (29614 <_nano_sys_clock_tick_announce+0x1c0>)
   29492:	f853 2f0c 	ldr.w	r2, [r3, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29496:	429a      	cmp	r2, r3
   29498:	d02b      	beq.n	294f2 <_nano_sys_clock_tick_announce+0x9e>
	if (!head) {
   2949a:	b362      	cbz	r2, 294f6 <_nano_sys_clock_tick_announce+0xa2>
	head->delta_ticks_from_prev -= ticks;
   2949c:	6913      	ldr	r3, [r2, #16]
   2949e:	1b5b      	subs	r3, r3, r5
   294a0:	6113      	str	r3, [r2, #16]
	sys_dnode_t *next = &head->node;
   294a2:	4613      	mov	r3, r2
	_handling_timeouts = 1;
   294a4:	2101      	movs	r1, #1
   294a6:	4a5c      	ldr	r2, [pc, #368]	; (29618 <_nano_sys_clock_tick_announce+0x1c4>)
   294a8:	6011      	str	r1, [r2, #0]
	while (timeout && timeout->delta_ticks_from_prev == 0) {
   294aa:	b33b      	cbz	r3, 294fc <_nano_sys_clock_tick_announce+0xa8>
   294ac:	691a      	ldr	r2, [r3, #16]
   294ae:	bb2a      	cbnz	r2, 294fc <_nano_sys_clock_tick_announce+0xa8>
	node->prev->next = node->next;
   294b0:	685a      	ldr	r2, [r3, #4]
   294b2:	6819      	ldr	r1, [r3, #0]
   294b4:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   294b6:	681a      	ldr	r2, [r3, #0]
   294b8:	6859      	ldr	r1, [r3, #4]
   294ba:	6051      	str	r1, [r2, #4]
	node->next = list->head;
   294bc:	aa02      	add	r2, sp, #8
   294be:	f852 1d08 	ldr.w	r1, [r2, #-8]!
   294c2:	6019      	str	r1, [r3, #0]
	node->prev = list;
   294c4:	605a      	str	r2, [r3, #4]
	list->head->prev = node;
   294c6:	9a00      	ldr	r2, [sp, #0]
   294c8:	6053      	str	r3, [r2, #4]
	list->head = node;
   294ca:	9300      	str	r3, [sp, #0]
		timeout->delta_ticks_from_prev = _EXPIRED;
   294cc:	f06f 0201 	mvn.w	r2, #1
   294d0:	611a      	str	r2, [r3, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   294d2:	f380 8811 	msr	BASEPRI, r0
	__asm__ volatile(
   294d6:	f04f 0220 	mov.w	r2, #32
   294da:	f3ef 8311 	mrs	r3, BASEPRI
   294de:	f382 8811 	msr	BASEPRI, r2
   294e2:	4618      	mov	r0, r3
	return list->head == list;
   294e4:	4a4b      	ldr	r2, [pc, #300]	; (29614 <_nano_sys_clock_tick_announce+0x1c0>)
   294e6:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   294ea:	4293      	cmp	r3, r2
   294ec:	d1dd      	bne.n	294aa <_nano_sys_clock_tick_announce+0x56>
   294ee:	2300      	movs	r3, #0
   294f0:	e7db      	b.n	294aa <_nano_sys_clock_tick_announce+0x56>
   294f2:	2200      	movs	r2, #0
   294f4:	e7d1      	b.n	2949a <_nano_sys_clock_tick_announce+0x46>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   294f6:	f381 8811 	msr	BASEPRI, r1
   294fa:	e084      	b.n	29606 <_nano_sys_clock_tick_announce+0x1b2>
   294fc:	f380 8811 	msr	BASEPRI, r0
	return list->head == list;
   29500:	aa02      	add	r2, sp, #8
   29502:	f852 3d08 	ldr.w	r3, [r2, #-8]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29506:	4293      	cmp	r3, r2
   29508:	d00d      	beq.n	29526 <_nano_sys_clock_tick_announce+0xd2>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   2950a:	b193      	cbz	r3, 29532 <_nano_sys_clock_tick_announce+0xde>
   2950c:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2950e:	b163      	cbz	r3, 2952a <_nano_sys_clock_tick_announce+0xd6>
	return (node == list->tail) ? NULL : node->next;
   29510:	9901      	ldr	r1, [sp, #4]
   29512:	428b      	cmp	r3, r1
   29514:	d00b      	beq.n	2952e <_nano_sys_clock_tick_announce+0xda>
   29516:	6819      	ldr	r1, [r3, #0]
   29518:	b169      	cbz	r1, 29536 <_nano_sys_clock_tick_announce+0xe2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2951a:	b172      	cbz	r2, 2953a <_nano_sys_clock_tick_announce+0xe6>
	return (node == list->tail) ? NULL : node->next;
   2951c:	9901      	ldr	r1, [sp, #4]
   2951e:	428a      	cmp	r2, r1
   29520:	d00d      	beq.n	2953e <_nano_sys_clock_tick_announce+0xea>
   29522:	681c      	ldr	r4, [r3, #0]
   29524:	e027      	b.n	29576 <_nano_sys_clock_tick_announce+0x122>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29526:	2300      	movs	r3, #0
   29528:	e7ef      	b.n	2950a <_nano_sys_clock_tick_announce+0xb6>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2952a:	4619      	mov	r1, r3
   2952c:	e7f4      	b.n	29518 <_nano_sys_clock_tick_announce+0xc4>
	return (node == list->tail) ? NULL : node->next;
   2952e:	2100      	movs	r1, #0
   29530:	e7f2      	b.n	29518 <_nano_sys_clock_tick_announce+0xc4>
   29532:	461c      	mov	r4, r3
   29534:	e01f      	b.n	29576 <_nano_sys_clock_tick_announce+0x122>
   29536:	2400      	movs	r4, #0
   29538:	e01d      	b.n	29576 <_nano_sys_clock_tick_announce+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2953a:	2400      	movs	r4, #0
   2953c:	e01b      	b.n	29576 <_nano_sys_clock_tick_announce+0x122>
	return (node == list->tail) ? NULL : node->next;
   2953e:	2400      	movs	r4, #0
   29540:	e019      	b.n	29576 <_nano_sys_clock_tick_announce+0x122>
	return !(_is_thread_prevented_from_running(thread) ||
   29542:	2301      	movs	r3, #1
   29544:	e000      	b.n	29548 <_nano_sys_clock_tick_announce+0xf4>
   29546:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29548:	2b00      	cmp	r3, #0
   2954a:	d142      	bne.n	295d2 <_nano_sys_clock_tick_announce+0x17e>
   2954c:	f386 8811 	msr	BASEPRI, r6
   29550:	2c00      	cmp	r4, #0
   29552:	d04d      	beq.n	295f0 <_nano_sys_clock_tick_announce+0x19c>
   29554:	4623      	mov	r3, r4
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29556:	2c00      	cmp	r4, #0
   29558:	d046      	beq.n	295e8 <_nano_sys_clock_tick_announce+0x194>
	return (node == list->tail) ? NULL : node->next;
   2955a:	9a01      	ldr	r2, [sp, #4]
   2955c:	4294      	cmp	r4, r2
   2955e:	d045      	beq.n	295ec <_nano_sys_clock_tick_announce+0x198>
   29560:	6822      	ldr	r2, [r4, #0]
   29562:	2a00      	cmp	r2, #0
   29564:	d046      	beq.n	295f4 <_nano_sys_clock_tick_announce+0x1a0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29566:	2b00      	cmp	r3, #0
   29568:	d046      	beq.n	295f8 <_nano_sys_clock_tick_announce+0x1a4>
	return (node == list->tail) ? NULL : node->next;
   2956a:	9a01      	ldr	r2, [sp, #4]
   2956c:	4293      	cmp	r3, r2
   2956e:	d045      	beq.n	295fc <_nano_sys_clock_tick_announce+0x1a8>
   29570:	6822      	ldr	r2, [r4, #0]
   29572:	4623      	mov	r3, r4
   29574:	4614      	mov	r4, r2
   29576:	2b00      	cmp	r3, #0
   29578:	d042      	beq.n	29600 <_nano_sys_clock_tick_announce+0x1ac>
	node->prev->next = node->next;
   2957a:	685a      	ldr	r2, [r3, #4]
   2957c:	6819      	ldr	r1, [r3, #0]
   2957e:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   29580:	681a      	ldr	r2, [r3, #0]
   29582:	6859      	ldr	r1, [r3, #4]
   29584:	6051      	str	r1, [r2, #4]
	struct k_thread *thread = timeout->thread;
   29586:	6898      	ldr	r0, [r3, #8]
	__asm__ volatile(
   29588:	f04f 0220 	mov.w	r2, #32
   2958c:	f3ef 8611 	mrs	r6, BASEPRI
   29590:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   29594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29598:	611a      	str	r2, [r3, #16]
	if (thread) {
   2959a:	b1e8      	cbz	r0, 295d8 <_nano_sys_clock_tick_announce+0x184>
	if (timeout_obj->wait_q) {
   2959c:	68db      	ldr	r3, [r3, #12]
   2959e:	b15b      	cbz	r3, 295b8 <_nano_sys_clock_tick_announce+0x164>
	node->prev->next = node->next;
   295a0:	6843      	ldr	r3, [r0, #4]
   295a2:	6802      	ldr	r2, [r0, #0]
   295a4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   295a6:	6803      	ldr	r3, [r0, #0]
   295a8:	6842      	ldr	r2, [r0, #4]
   295aa:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   295ac:	7a43      	ldrb	r3, [r0, #9]
   295ae:	f023 0302 	bic.w	r3, r3, #2
   295b2:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   295b4:	2300      	movs	r3, #0
   295b6:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   295b8:	7a43      	ldrb	r3, [r0, #9]
   295ba:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   295be:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   295c0:	f013 0f1b 	tst.w	r3, #27
   295c4:	d1bf      	bne.n	29546 <_nano_sys_clock_tick_announce+0xf2>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   295c6:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   295c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   295cc:	d0b9      	beq.n	29542 <_nano_sys_clock_tick_announce+0xee>
   295ce:	2300      	movs	r3, #0
   295d0:	e7ba      	b.n	29548 <_nano_sys_clock_tick_announce+0xf4>
		_add_thread_to_ready_q(thread);
   295d2:	f7ff fba1 	bl	28d18 <_add_thread_to_ready_q>
   295d6:	e7b9      	b.n	2954c <_nano_sys_clock_tick_announce+0xf8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   295d8:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   295dc:	695a      	ldr	r2, [r3, #20]
   295de:	2a00      	cmp	r2, #0
   295e0:	d0b6      	beq.n	29550 <_nano_sys_clock_tick_announce+0xfc>
			timeout->func(timeout);
   295e2:	4618      	mov	r0, r3
   295e4:	4790      	blx	r2
   295e6:	e7b3      	b.n	29550 <_nano_sys_clock_tick_announce+0xfc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   295e8:	4622      	mov	r2, r4
   295ea:	e7ba      	b.n	29562 <_nano_sys_clock_tick_announce+0x10e>
	return (node == list->tail) ? NULL : node->next;
   295ec:	2200      	movs	r2, #0
   295ee:	e7b8      	b.n	29562 <_nano_sys_clock_tick_announce+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   295f0:	4622      	mov	r2, r4
   295f2:	e7be      	b.n	29572 <_nano_sys_clock_tick_announce+0x11e>
   295f4:	2200      	movs	r2, #0
   295f6:	e7bc      	b.n	29572 <_nano_sys_clock_tick_announce+0x11e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   295f8:	2200      	movs	r2, #0
   295fa:	e7ba      	b.n	29572 <_nano_sys_clock_tick_announce+0x11e>
	return (node == list->tail) ? NULL : node->next;
   295fc:	2200      	movs	r2, #0
   295fe:	e7b8      	b.n	29572 <_nano_sys_clock_tick_announce+0x11e>
	_handling_timeouts = 0;
   29600:	2200      	movs	r2, #0
   29602:	4b05      	ldr	r3, [pc, #20]	; (29618 <_nano_sys_clock_tick_announce+0x1c4>)
   29604:	601a      	str	r2, [r3, #0]
	irq_unlock(key);
#endif
	handle_timeouts(ticks);

	/* time slicing is basically handled like just yet another timeout */
	handle_time_slicing(ticks);
   29606:	4628      	mov	r0, r5
   29608:	f7ff fed4 	bl	293b4 <handle_time_slicing>
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   2960c:	b002      	add	sp, #8
   2960e:	bd70      	pop	{r4, r5, r6, pc}
   29610:	20003150 	.word	0x20003150
   29614:	20002d60 	.word	0x20002d60
   29618:	20003148 	.word	0x20003148

0002961c <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   2961c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   2961e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29622:	f44f 6280 	mov.w	r2, #1024	; 0x400
   29626:	4903      	ldr	r1, [pc, #12]	; (29634 <k_sys_work_q_init+0x18>)
   29628:	4803      	ldr	r0, [pc, #12]	; (29638 <k_sys_work_q_init+0x1c>)
   2962a:	f000 fc49 	bl	29ec0 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   2962e:	2000      	movs	r0, #0
   29630:	bd08      	pop	{r3, pc}
   29632:	bf00      	nop
   29634:	2000ba48 	.word	0x2000ba48
   29638:	20003158 	.word	0x20003158

0002963c <k_is_in_isr>:
   2963c:	f3ef 8305 	mrs	r3, IPSR
   29640:	2b0d      	cmp	r3, #13
   29642:	d807      	bhi.n	29654 <k_is_in_isr+0x18>
   29644:	b143      	cbz	r3, 29658 <k_is_in_isr+0x1c>
   29646:	4b06      	ldr	r3, [pc, #24]	; (29660 <k_is_in_isr+0x24>)
   29648:	685b      	ldr	r3, [r3, #4]
   2964a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   2964e:	d005      	beq.n	2965c <k_is_in_isr+0x20>
   29650:	2000      	movs	r0, #0
   29652:	4770      	bx	lr
   29654:	2001      	movs	r0, #1
   29656:	4770      	bx	lr
   29658:	2000      	movs	r0, #0
   2965a:	4770      	bx	lr
   2965c:	2001      	movs	r0, #1


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   2965e:	4770      	bx	lr
   29660:	e000ed00 	.word	0xe000ed00

00029664 <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   29664:	4b02      	ldr	r3, [pc, #8]	; (29670 <_is_thread_essential+0xc>)
   29666:	689b      	ldr	r3, [r3, #8]
   29668:	7a18      	ldrb	r0, [r3, #8]
}
   2966a:	f000 0001 	and.w	r0, r0, #1
   2966e:	4770      	bx	lr
   29670:	20002d60 	.word	0x20002d60

00029674 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   29674:	b508      	push	{r3, lr}
   29676:	4604      	mov	r4, r0
   29678:	4608      	mov	r0, r1
   2967a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2967c:	461a      	mov	r2, r3
   2967e:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   29680:	f7ff fcae 	bl	28fe0 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   29684:	f7fe facc 	bl	27c20 <_impl_k_thread_abort>

00029688 <_impl_k_thread_start>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
void _impl_k_thread_start(struct k_thread *thread)
{
   29688:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2968a:	f04f 0320 	mov.w	r3, #32
   2968e:	f3ef 8411 	mrs	r4, BASEPRI
   29692:	f383 8811 	msr	BASEPRI, r3
	return !(thread->base.thread_state & _THREAD_PRESTART);
   29696:	7a43      	ldrb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	if (_has_thread_started(thread)) {
   29698:	f013 0f04 	tst.w	r3, #4
   2969c:	d00b      	beq.n	296b6 <_impl_k_thread_start+0x2e>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2969e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   296a2:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   296a4:	f013 0f1b 	tst.w	r3, #27
   296a8:	d10a      	bne.n	296c0 <_impl_k_thread_start+0x38>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   296aa:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   296ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   296b0:	d004      	beq.n	296bc <_impl_k_thread_start+0x34>
   296b2:	2500      	movs	r5, #0
   296b4:	e005      	b.n	296c2 <_impl_k_thread_start+0x3a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   296b6:	f384 8811 	msr	BASEPRI, r4
   296ba:	bd38      	pop	{r3, r4, r5, pc}
   296bc:	2501      	movs	r5, #1
   296be:	e000      	b.n	296c2 <_impl_k_thread_start+0x3a>
   296c0:	2500      	movs	r5, #0
		return;
	}

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   296c2:	b915      	cbnz	r5, 296ca <_impl_k_thread_start+0x42>
   296c4:	f384 8811 	msr	BASEPRI, r4
   296c8:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   296ca:	f7ff fb25 	bl	28d18 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   296ce:	4b0a      	ldr	r3, [pc, #40]	; (296f8 <_impl_k_thread_start+0x70>)
   296d0:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   296d2:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   296d4:	2b7f      	cmp	r3, #127	; 0x7f
   296d6:	d908      	bls.n	296ea <_impl_k_thread_start+0x62>
   296d8:	2300      	movs	r3, #0
		if (_must_switch_threads()) {
   296da:	2b00      	cmp	r3, #0
   296dc:	d0f2      	beq.n	296c4 <_impl_k_thread_start+0x3c>
	_update_time_slice_before_swap();
   296de:	f7ff fcad 	bl	2903c <_update_time_slice_before_swap>
	return __swap(key);
   296e2:	4620      	mov	r0, r4
   296e4:	f7fd fff0 	bl	276c8 <__swap>
   296e8:	bd38      	pop	{r3, r4, r5, pc}
   296ea:	f7ff fc39 	bl	28f60 <__must_switch_threads>
   296ee:	4603      	mov	r3, r0
   296f0:	2800      	cmp	r0, #0
   296f2:	d0f2      	beq.n	296da <_impl_k_thread_start+0x52>
   296f4:	462b      	mov	r3, r5
   296f6:	e7f0      	b.n	296da <_impl_k_thread_start+0x52>
   296f8:	20002d60 	.word	0x20002d60

000296fc <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
   296fc:	b570      	push	{r4, r5, r6, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   296fe:	b1d1      	cbz	r1, 29736 <schedule_new_thread+0x3a>
   29700:	460b      	mov	r3, r1
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   29702:	3309      	adds	r3, #9
   29704:	4a47      	ldr	r2, [pc, #284]	; (29824 <schedule_new_thread+0x128>)
   29706:	fba2 2303 	umull	r2, r3, r2, r3
   2970a:	08db      	lsrs	r3, r3, #3
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   2970c:	3301      	adds	r3, #1
	__asm__ volatile(
   2970e:	f04f 0220 	mov.w	r2, #32
   29712:	f3ef 8511 	mrs	r5, BASEPRI
   29716:	f382 8811 	msr	BASEPRI, r2
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   2971a:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2971e:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   29720:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29722:	2200      	movs	r2, #0
   29724:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   29726:	b14b      	cbz	r3, 2973c <schedule_new_thread+0x40>
	return list->head == list;
   29728:	4a3f      	ldr	r2, [pc, #252]	; (29828 <schedule_new_thread+0x12c>)
   2972a:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2972e:	4293      	cmp	r3, r2
   29730:	d152      	bne.n	297d8 <schedule_new_thread+0xdc>
   29732:	2300      	movs	r3, #0
   29734:	e050      	b.n	297d8 <schedule_new_thread+0xdc>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   29736:	f7ff ffa7 	bl	29688 <_impl_k_thread_start>
   2973a:	bd70      	pop	{r4, r5, r6, pc}
   2973c:	f04f 0320 	mov.w	r3, #32
   29740:	f3ef 8611 	mrs	r6, BASEPRI
   29744:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2974c:	6123      	str	r3, [r4, #16]
	if (thread) {
   2974e:	b320      	cbz	r0, 2979a <schedule_new_thread+0x9e>
	if (timeout_obj->wait_q) {
   29750:	68e3      	ldr	r3, [r4, #12]
   29752:	b15b      	cbz	r3, 2976c <schedule_new_thread+0x70>
	node->prev->next = node->next;
   29754:	6843      	ldr	r3, [r0, #4]
   29756:	6802      	ldr	r2, [r0, #0]
   29758:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2975a:	6803      	ldr	r3, [r0, #0]
   2975c:	6842      	ldr	r2, [r0, #4]
   2975e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29760:	7a43      	ldrb	r3, [r0, #9]
   29762:	f023 0302 	bic.w	r3, r3, #2
   29766:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   29768:	2300      	movs	r3, #0
   2976a:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2976c:	7a43      	ldrb	r3, [r0, #9]
   2976e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29772:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29774:	f013 0f1b 	tst.w	r3, #27
   29778:	d107      	bne.n	2978a <schedule_new_thread+0x8e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2977a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2977c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29780:	d001      	beq.n	29786 <schedule_new_thread+0x8a>
   29782:	2300      	movs	r3, #0
   29784:	e002      	b.n	2978c <schedule_new_thread+0x90>
   29786:	2301      	movs	r3, #1
   29788:	e000      	b.n	2978c <schedule_new_thread+0x90>
   2978a:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2978c:	b913      	cbnz	r3, 29794 <schedule_new_thread+0x98>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2978e:	f386 8811 	msr	BASEPRI, r6
   29792:	e044      	b.n	2981e <schedule_new_thread+0x122>
		_add_thread_to_ready_q(thread);
   29794:	f7ff fac0 	bl	28d18 <_add_thread_to_ready_q>
   29798:	e7f9      	b.n	2978e <schedule_new_thread+0x92>
   2979a:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   2979e:	6963      	ldr	r3, [r4, #20]
   297a0:	2b00      	cmp	r3, #0
   297a2:	d03c      	beq.n	2981e <schedule_new_thread+0x122>
			timeout->func(timeout);
   297a4:	4620      	mov	r0, r4
   297a6:	4798      	blx	r3
   297a8:	e039      	b.n	2981e <schedule_new_thread+0x122>
			in_q->delta_ticks_from_prev -= *delta;
   297aa:	1a8a      	subs	r2, r1, r2
   297ac:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   297ae:	b133      	cbz	r3, 297be <schedule_new_thread+0xc2>
		node->prev = insert_point->prev;
   297b0:	685a      	ldr	r2, [r3, #4]
   297b2:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   297b4:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   297b6:	685a      	ldr	r2, [r3, #4]
   297b8:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   297ba:	605c      	str	r4, [r3, #4]
   297bc:	e02f      	b.n	2981e <schedule_new_thread+0x122>
	node->next = list;
   297be:	4b1b      	ldr	r3, [pc, #108]	; (2982c <schedule_new_thread+0x130>)
   297c0:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   297c2:	685a      	ldr	r2, [r3, #4]
   297c4:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   297c6:	685a      	ldr	r2, [r3, #4]
   297c8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   297ca:	605c      	str	r4, [r3, #4]
   297cc:	e027      	b.n	2981e <schedule_new_thread+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   297ce:	4619      	mov	r1, r3
   297d0:	e011      	b.n	297f6 <schedule_new_thread+0xfa>
	return (node == list->tail) ? NULL : node->next;
   297d2:	2100      	movs	r1, #0
   297d4:	e00f      	b.n	297f6 <schedule_new_thread+0xfa>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   297d6:	2300      	movs	r3, #0
   297d8:	b1d3      	cbz	r3, 29810 <schedule_new_thread+0x114>
		if (*delta <= in_q->delta_ticks_from_prev) {
   297da:	6922      	ldr	r2, [r4, #16]
   297dc:	6919      	ldr	r1, [r3, #16]
   297de:	428a      	cmp	r2, r1
   297e0:	dde3      	ble.n	297aa <schedule_new_thread+0xae>
		*delta -= in_q->delta_ticks_from_prev;
   297e2:	1a52      	subs	r2, r2, r1
   297e4:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   297e6:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   297e8:	2b00      	cmp	r3, #0
   297ea:	d0f0      	beq.n	297ce <schedule_new_thread+0xd2>
	return (node == list->tail) ? NULL : node->next;
   297ec:	490e      	ldr	r1, [pc, #56]	; (29828 <schedule_new_thread+0x12c>)
   297ee:	6909      	ldr	r1, [r1, #16]
   297f0:	428b      	cmp	r3, r1
   297f2:	d0ee      	beq.n	297d2 <schedule_new_thread+0xd6>
   297f4:	6819      	ldr	r1, [r3, #0]
   297f6:	2900      	cmp	r1, #0
   297f8:	d0ed      	beq.n	297d6 <schedule_new_thread+0xda>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   297fa:	b12a      	cbz	r2, 29808 <schedule_new_thread+0x10c>
	return (node == list->tail) ? NULL : node->next;
   297fc:	490a      	ldr	r1, [pc, #40]	; (29828 <schedule_new_thread+0x12c>)
   297fe:	6909      	ldr	r1, [r1, #16]
   29800:	428a      	cmp	r2, r1
   29802:	d003      	beq.n	2980c <schedule_new_thread+0x110>
   29804:	681b      	ldr	r3, [r3, #0]
   29806:	e7e7      	b.n	297d8 <schedule_new_thread+0xdc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29808:	2300      	movs	r3, #0
   2980a:	e7e5      	b.n	297d8 <schedule_new_thread+0xdc>
	return (node == list->tail) ? NULL : node->next;
   2980c:	2300      	movs	r3, #0
   2980e:	e7e3      	b.n	297d8 <schedule_new_thread+0xdc>
	node->next = list;
   29810:	4b06      	ldr	r3, [pc, #24]	; (2982c <schedule_new_thread+0x130>)
   29812:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   29814:	685a      	ldr	r2, [r3, #4]
   29816:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29818:	685a      	ldr	r2, [r3, #4]
   2981a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2981c:	605c      	str	r4, [r3, #4]
   2981e:	f385 8811 	msr	BASEPRI, r5
   29822:	bd70      	pop	{r4, r5, r6, pc}
   29824:	cccccccd 	.word	0xcccccccd
   29828:	20002d60 	.word	0x20002d60
   2982c:	20002d6c 	.word	0x20002d6c

00029830 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   29830:	b510      	push	{r4, lr}
   29832:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   29834:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   29836:	9404      	str	r4, [sp, #16]
   29838:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2983a:	9403      	str	r4, [sp, #12]
   2983c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2983e:	9402      	str	r4, [sp, #8]
   29840:	9c09      	ldr	r4, [sp, #36]	; 0x24
   29842:	9401      	str	r4, [sp, #4]
   29844:	9c08      	ldr	r4, [sp, #32]
   29846:	9400      	str	r4, [sp, #0]
   29848:	f7fe f940 	bl	27acc <_new_thread>

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   2984c:	b006      	add	sp, #24
   2984e:	bd10      	pop	{r4, pc}

00029850 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   29850:	b570      	push	{r4, r5, r6, lr}
   29852:	b086      	sub	sp, #24
   29854:	4604      	mov	r4, r0
   29856:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   29858:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2985a:	9604      	str	r6, [sp, #16]
   2985c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   2985e:	9603      	str	r6, [sp, #12]
   29860:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   29862:	9602      	str	r6, [sp, #8]
   29864:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   29866:	9601      	str	r6, [sp, #4]
   29868:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2986a:	9600      	str	r6, [sp, #0]
   2986c:	f7ff ffe0 	bl	29830 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   29870:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   29874:	d003      	beq.n	2987e <_impl_k_thread_create+0x2e>
		schedule_new_thread(new_thread, delay);
   29876:	4629      	mov	r1, r5
   29878:	4620      	mov	r0, r4
   2987a:	f7ff ff3f 	bl	296fc <schedule_new_thread>
	}
	return new_thread;
}
   2987e:	4620      	mov	r0, r4
   29880:	b006      	add	sp, #24
   29882:	bd70      	pop	{r4, r5, r6, pc}

00029884 <_k_thread_single_abort>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
   29884:	b510      	push	{r4, lr}
   29886:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   29888:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2988a:	b103      	cbz	r3, 2988e <_k_thread_single_abort+0xa>
		thread->fn_abort();
   2988c:	4798      	blx	r3
	u8_t state = thread->base.thread_state;
   2988e:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29890:	f013 0f1f 	tst.w	r3, #31
   29894:	d107      	bne.n	298a6 <_k_thread_single_abort+0x22>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29896:	6a22      	ldr	r2, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29898:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2989c:	d001      	beq.n	298a2 <_k_thread_single_abort+0x1e>
   2989e:	2200      	movs	r2, #0
   298a0:	e002      	b.n	298a8 <_k_thread_single_abort+0x24>
   298a2:	2201      	movs	r2, #1
   298a4:	e000      	b.n	298a8 <_k_thread_single_abort+0x24>
   298a6:	2200      	movs	r2, #0
	}

	if (_is_thread_ready(thread)) {
   298a8:	bb4a      	cbnz	r2, 298fe <_k_thread_single_abort+0x7a>
		_remove_thread_from_ready_q(thread);
	} else {
		if (_is_thread_pending(thread)) {
   298aa:	f013 0f02 	tst.w	r3, #2
   298ae:	d009      	beq.n	298c4 <_k_thread_single_abort+0x40>
	node->prev->next = node->next;
   298b0:	6863      	ldr	r3, [r4, #4]
   298b2:	6822      	ldr	r2, [r4, #0]
   298b4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   298b6:	6823      	ldr	r3, [r4, #0]
   298b8:	6862      	ldr	r2, [r4, #4]
   298ba:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   298bc:	7a63      	ldrb	r3, [r4, #9]
   298be:	f023 0302 	bic.w	r3, r3, #2
   298c2:	7263      	strb	r3, [r4, #9]
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   298c4:	6a21      	ldr	r1, [r4, #32]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
   298c6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   298ca:	d013      	beq.n	298f4 <_k_thread_single_abort+0x70>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   298cc:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   298d0:	4a0d      	ldr	r2, [pc, #52]	; (29908 <_k_thread_single_abort+0x84>)
   298d2:	6912      	ldr	r2, [r2, #16]
   298d4:	4293      	cmp	r3, r2
   298d6:	d004      	beq.n	298e2 <_k_thread_single_abort+0x5e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   298d8:	b103      	cbz	r3, 298dc <_k_thread_single_abort+0x58>
	return (node == list->tail) ? NULL : node->next;
   298da:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   298dc:	691a      	ldr	r2, [r3, #16]
   298de:	440a      	add	r2, r1
   298e0:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   298e2:	6963      	ldr	r3, [r4, #20]
   298e4:	6922      	ldr	r2, [r4, #16]
   298e6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   298e8:	6923      	ldr	r3, [r4, #16]
   298ea:	6962      	ldr	r2, [r4, #20]
   298ec:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   298ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   298f2:	6223      	str	r3, [r4, #32]
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   298f4:	7a63      	ldrb	r3, [r4, #9]
   298f6:	f043 0308 	orr.w	r3, r3, #8
   298fa:	7263      	strb	r3, [r4, #9]
   298fc:	bd10      	pop	{r4, pc}
		_remove_thread_from_ready_q(thread);
   298fe:	4620      	mov	r0, r4
   29900:	f7ff fa2a 	bl	28d58 <_remove_thread_from_ready_q>
   29904:	e7f6      	b.n	298f4 <_k_thread_single_abort+0x70>
   29906:	bf00      	nop
   29908:	20002d60 	.word	0x20002d60

0002990c <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   2990c:	b530      	push	{r4, r5, lr}
   2990e:	b087      	sub	sp, #28
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   29910:	4c1b      	ldr	r4, [pc, #108]	; (29980 <_init_static_threads+0x74>)
   29912:	e012      	b.n	2993a <_init_static_threads+0x2e>
		_setup_new_thread(
   29914:	6a23      	ldr	r3, [r4, #32]
   29916:	9304      	str	r3, [sp, #16]
   29918:	69e3      	ldr	r3, [r4, #28]
   2991a:	9303      	str	r3, [sp, #12]
   2991c:	69a3      	ldr	r3, [r4, #24]
   2991e:	9302      	str	r3, [sp, #8]
   29920:	6963      	ldr	r3, [r4, #20]
   29922:	9301      	str	r3, [sp, #4]
   29924:	6923      	ldr	r3, [r4, #16]
   29926:	9300      	str	r3, [sp, #0]
   29928:	68e3      	ldr	r3, [r4, #12]
   2992a:	68a2      	ldr	r2, [r4, #8]
   2992c:	6861      	ldr	r1, [r4, #4]
   2992e:	6820      	ldr	r0, [r4, #0]
   29930:	f7ff ff7e 	bl	29830 <_setup_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   29934:	6823      	ldr	r3, [r4, #0]
   29936:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
   29938:	3430      	adds	r4, #48	; 0x30
   2993a:	4b12      	ldr	r3, [pc, #72]	; (29984 <_init_static_threads+0x78>)
   2993c:	429c      	cmp	r4, r3
   2993e:	d3e9      	bcc.n	29914 <_init_static_threads+0x8>
	--_current->base.sched_locked;
   29940:	4b11      	ldr	r3, [pc, #68]	; (29988 <_init_static_threads+0x7c>)
   29942:	689a      	ldr	r2, [r3, #8]
   29944:	7ad3      	ldrb	r3, [r2, #11]
   29946:	3b01      	subs	r3, #1
   29948:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   2994a:	f04f 0320 	mov.w	r3, #32
   2994e:	f3ef 8511 	mrs	r5, BASEPRI
   29952:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   29956:	4c0a      	ldr	r4, [pc, #40]	; (29980 <_init_static_threads+0x74>)
   29958:	e000      	b.n	2995c <_init_static_threads+0x50>
   2995a:	3430      	adds	r4, #48	; 0x30
   2995c:	4b09      	ldr	r3, [pc, #36]	; (29984 <_init_static_threads+0x78>)
   2995e:	429c      	cmp	r4, r3
   29960:	d207      	bcs.n	29972 <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
   29962:	6a61      	ldr	r1, [r4, #36]	; 0x24
   29964:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   29968:	d0f7      	beq.n	2995a <_init_static_threads+0x4e>
			schedule_new_thread(thread_data->init_thread,
   2996a:	6820      	ldr	r0, [r4, #0]
   2996c:	f7ff fec6 	bl	296fc <schedule_new_thread>
   29970:	e7f3      	b.n	2995a <_init_static_threads+0x4e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29972:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
   29976:	f7ff fb81 	bl	2907c <k_sched_unlock>
}
   2997a:	b007      	add	sp, #28
   2997c:	bd30      	pop	{r4, r5, pc}
   2997e:	bf00      	nop
   29980:	2000d5e8 	.word	0x2000d5e8
   29984:	2000d5e8 	.word	0x2000d5e8
   29988:	20002d60 	.word	0x20002d60

0002998c <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   2998c:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   2998e:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;
   29990:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
   29992:	2300      	movs	r3, #0
   29994:	72c3      	strb	r3, [r0, #11]
	t->delta_ticks_from_prev = _INACTIVE;
   29996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2999a:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   2999c:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   2999e:	6183      	str	r3, [r0, #24]
	t->func = func;
   299a0:	6243      	str	r3, [r0, #36]	; 0x24
   299a2:	4770      	bx	lr

000299a4 <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
   299a4:	b570      	push	{r4, r5, r6, lr}
   299a6:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   299a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
   299aa:	2b00      	cmp	r3, #0
   299ac:	f340 8088 	ble.w	29ac0 <_timer_expiration_handler+0x11c>
	__asm__ volatile(
   299b0:	f04f 0320 	mov.w	r3, #32
   299b4:	f3ef 8511 	mrs	r5, BASEPRI
   299b8:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   299bc:	f100 0218 	add.w	r2, r0, #24
   299c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   299c2:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   299c4:	2100      	movs	r1, #0
   299c6:	6081      	str	r1, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   299c8:	60c2      	str	r2, [r0, #12]
	if (!timeout_in_ticks) {
   299ca:	b133      	cbz	r3, 299da <_timer_expiration_handler+0x36>
	return list->head == list;
   299cc:	4a59      	ldr	r2, [pc, #356]	; (29b34 <_timer_expiration_handler+0x190>)
   299ce:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   299d2:	4293      	cmp	r3, r2
   299d4:	d14f      	bne.n	29a76 <_timer_expiration_handler+0xd2>
   299d6:	2300      	movs	r3, #0
   299d8:	e04d      	b.n	29a76 <_timer_expiration_handler+0xd2>
	struct k_thread *thread = timeout->thread;
   299da:	4608      	mov	r0, r1
   299dc:	f04f 0320 	mov.w	r3, #32
   299e0:	f3ef 8611 	mrs	r6, BASEPRI
   299e4:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   299e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   299ec:	6123      	str	r3, [r4, #16]
	if (thread) {
   299ee:	b319      	cbz	r1, 29a38 <_timer_expiration_handler+0x94>
	if (timeout_obj->wait_q) {
   299f0:	68e3      	ldr	r3, [r4, #12]
   299f2:	b153      	cbz	r3, 29a0a <_timer_expiration_handler+0x66>
	node->prev->next = node->next;
   299f4:	684b      	ldr	r3, [r1, #4]
   299f6:	680a      	ldr	r2, [r1, #0]
   299f8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   299fa:	680b      	ldr	r3, [r1, #0]
   299fc:	684a      	ldr	r2, [r1, #4]
   299fe:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29a00:	7a4b      	ldrb	r3, [r1, #9]
   29a02:	f023 0302 	bic.w	r3, r3, #2
   29a06:	724b      	strb	r3, [r1, #9]
		thread->base.timeout.wait_q = NULL;
   29a08:	61c1      	str	r1, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29a0a:	7a43      	ldrb	r3, [r0, #9]
   29a0c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29a10:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29a12:	f013 0f1b 	tst.w	r3, #27
   29a16:	d107      	bne.n	29a28 <_timer_expiration_handler+0x84>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29a18:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29a1e:	d001      	beq.n	29a24 <_timer_expiration_handler+0x80>
   29a20:	2300      	movs	r3, #0
   29a22:	e002      	b.n	29a2a <_timer_expiration_handler+0x86>
   29a24:	2301      	movs	r3, #1
   29a26:	e000      	b.n	29a2a <_timer_expiration_handler+0x86>
   29a28:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29a2a:	b913      	cbnz	r3, 29a32 <_timer_expiration_handler+0x8e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29a2c:	f386 8811 	msr	BASEPRI, r6
   29a30:	e044      	b.n	29abc <_timer_expiration_handler+0x118>
		_add_thread_to_ready_q(thread);
   29a32:	f7ff f971 	bl	28d18 <_add_thread_to_ready_q>
   29a36:	e7f9      	b.n	29a2c <_timer_expiration_handler+0x88>
   29a38:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   29a3c:	6963      	ldr	r3, [r4, #20]
   29a3e:	2b00      	cmp	r3, #0
   29a40:	d03c      	beq.n	29abc <_timer_expiration_handler+0x118>
			timeout->func(timeout);
   29a42:	4620      	mov	r0, r4
   29a44:	4798      	blx	r3
   29a46:	e039      	b.n	29abc <_timer_expiration_handler+0x118>
			in_q->delta_ticks_from_prev -= *delta;
   29a48:	1a8a      	subs	r2, r1, r2
   29a4a:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29a4c:	b133      	cbz	r3, 29a5c <_timer_expiration_handler+0xb8>
		node->prev = insert_point->prev;
   29a4e:	685a      	ldr	r2, [r3, #4]
   29a50:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   29a52:	6023      	str	r3, [r4, #0]
		insert_point->prev->next = node;
   29a54:	685a      	ldr	r2, [r3, #4]
   29a56:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   29a58:	605c      	str	r4, [r3, #4]
   29a5a:	e02f      	b.n	29abc <_timer_expiration_handler+0x118>
	node->next = list;
   29a5c:	4b36      	ldr	r3, [pc, #216]	; (29b38 <_timer_expiration_handler+0x194>)
   29a5e:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   29a60:	685a      	ldr	r2, [r3, #4]
   29a62:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29a64:	685a      	ldr	r2, [r3, #4]
   29a66:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29a68:	605c      	str	r4, [r3, #4]
   29a6a:	e027      	b.n	29abc <_timer_expiration_handler+0x118>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29a6c:	4619      	mov	r1, r3
   29a6e:	e011      	b.n	29a94 <_timer_expiration_handler+0xf0>
	return (node == list->tail) ? NULL : node->next;
   29a70:	2100      	movs	r1, #0
   29a72:	e00f      	b.n	29a94 <_timer_expiration_handler+0xf0>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29a74:	2300      	movs	r3, #0
   29a76:	b1d3      	cbz	r3, 29aae <_timer_expiration_handler+0x10a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29a78:	6902      	ldr	r2, [r0, #16]
   29a7a:	6919      	ldr	r1, [r3, #16]
   29a7c:	428a      	cmp	r2, r1
   29a7e:	dde3      	ble.n	29a48 <_timer_expiration_handler+0xa4>
		*delta -= in_q->delta_ticks_from_prev;
   29a80:	1a52      	subs	r2, r2, r1
   29a82:	6102      	str	r2, [r0, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29a84:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29a86:	2b00      	cmp	r3, #0
   29a88:	d0f0      	beq.n	29a6c <_timer_expiration_handler+0xc8>
	return (node == list->tail) ? NULL : node->next;
   29a8a:	492a      	ldr	r1, [pc, #168]	; (29b34 <_timer_expiration_handler+0x190>)
   29a8c:	6909      	ldr	r1, [r1, #16]
   29a8e:	428b      	cmp	r3, r1
   29a90:	d0ee      	beq.n	29a70 <_timer_expiration_handler+0xcc>
   29a92:	6819      	ldr	r1, [r3, #0]
   29a94:	2900      	cmp	r1, #0
   29a96:	d0ed      	beq.n	29a74 <_timer_expiration_handler+0xd0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29a98:	b12a      	cbz	r2, 29aa6 <_timer_expiration_handler+0x102>
	return (node == list->tail) ? NULL : node->next;
   29a9a:	4926      	ldr	r1, [pc, #152]	; (29b34 <_timer_expiration_handler+0x190>)
   29a9c:	6909      	ldr	r1, [r1, #16]
   29a9e:	428a      	cmp	r2, r1
   29aa0:	d003      	beq.n	29aaa <_timer_expiration_handler+0x106>
   29aa2:	681b      	ldr	r3, [r3, #0]
   29aa4:	e7e7      	b.n	29a76 <_timer_expiration_handler+0xd2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29aa6:	2300      	movs	r3, #0
   29aa8:	e7e5      	b.n	29a76 <_timer_expiration_handler+0xd2>
	return (node == list->tail) ? NULL : node->next;
   29aaa:	2300      	movs	r3, #0
   29aac:	e7e3      	b.n	29a76 <_timer_expiration_handler+0xd2>
	node->next = list;
   29aae:	4b22      	ldr	r3, [pc, #136]	; (29b38 <_timer_expiration_handler+0x194>)
   29ab0:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   29ab2:	685a      	ldr	r2, [r3, #4]
   29ab4:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29ab6:	685a      	ldr	r2, [r3, #4]
   29ab8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29aba:	605c      	str	r4, [r3, #4]
   29abc:	f385 8811 	msr	BASEPRI, r5
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   29ac0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29ac2:	3301      	adds	r3, #1
   29ac4:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   29ac6:	6a23      	ldr	r3, [r4, #32]
   29ac8:	b10b      	cbz	r3, 29ace <_timer_expiration_handler+0x12a>
		timer->expiry_fn(timer);
   29aca:	4620      	mov	r0, r4
   29acc:	4798      	blx	r3
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);
   29ace:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   29ad2:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29ad4:	42a3      	cmp	r3, r4
   29ad6:	d01d      	beq.n	29b14 <_timer_expiration_handler+0x170>

	if (!thread) {
   29ad8:	b334      	cbz	r4, 29b28 <_timer_expiration_handler+0x184>
	node->prev->next = node->next;
   29ada:	6863      	ldr	r3, [r4, #4]
   29adc:	6822      	ldr	r2, [r4, #0]
   29ade:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29ae0:	6823      	ldr	r3, [r4, #0]
   29ae2:	6862      	ldr	r2, [r4, #4]
   29ae4:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29ae6:	7a63      	ldrb	r3, [r4, #9]
   29ae8:	f023 0302 	bic.w	r3, r3, #2
   29aec:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   29aee:	f04f 0320 	mov.w	r3, #32
   29af2:	f3ef 8511 	mrs	r5, BASEPRI
   29af6:	f383 8811 	msr	BASEPRI, r3
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29afa:	7a63      	ldrb	r3, [r4, #9]
   29afc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29b00:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29b02:	f013 0f1b 	tst.w	r3, #27
   29b06:	d109      	bne.n	29b1c <_timer_expiration_handler+0x178>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29b08:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29b0e:	d003      	beq.n	29b18 <_timer_expiration_handler+0x174>
   29b10:	2300      	movs	r3, #0
   29b12:	e004      	b.n	29b1e <_timer_expiration_handler+0x17a>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29b14:	2400      	movs	r4, #0
   29b16:	e7df      	b.n	29ad8 <_timer_expiration_handler+0x134>
   29b18:	2301      	movs	r3, #1
   29b1a:	e000      	b.n	29b1e <_timer_expiration_handler+0x17a>
   29b1c:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29b1e:	b923      	cbnz	r3, 29b2a <_timer_expiration_handler+0x186>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29b20:	f385 8811 	msr	BASEPRI, r5
   29b24:	2300      	movs	r3, #0
   29b26:	6663      	str	r3, [r4, #100]	; 0x64
   29b28:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   29b2a:	4620      	mov	r0, r4
   29b2c:	f7ff f8f4 	bl	28d18 <_add_thread_to_ready_q>
   29b30:	e7f6      	b.n	29b20 <_timer_expiration_handler+0x17c>
   29b32:	bf00      	nop
   29b34:	20002d60 	.word	0x20002d60
   29b38:	20002d6c 	.word	0x20002d6c

00029b3c <k_timer_init>:

void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
	timer->expiry_fn = expiry_fn;
   29b3c:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   29b3e:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0;
   29b40:	2300      	movs	r3, #0
   29b42:	62c3      	str	r3, [r0, #44]	; 0x2c

	sys_dlist_init(&timer->wait_q);
   29b44:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   29b48:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   29b4a:	61c2      	str	r2, [r0, #28]
	t->delta_ticks_from_prev = _INACTIVE;
   29b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29b50:	6102      	str	r2, [r0, #16]
	t->wait_q = NULL;
   29b52:	60c3      	str	r3, [r0, #12]
	t->thread = NULL;
   29b54:	6083      	str	r3, [r0, #8]
	t->func = func;
   29b56:	4a02      	ldr	r2, [pc, #8]	; (29b60 <k_timer_init+0x24>)
   29b58:	6142      	str	r2, [r0, #20]
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
   29b5a:	6303      	str	r3, [r0, #48]	; 0x30
   29b5c:	4770      	bx	lr
   29b5e:	bf00      	nop
   29b60:	000299a5 	.word	0x000299a5

00029b64 <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   29b64:	b530      	push	{r4, r5, lr}
   29b66:	b083      	sub	sp, #12
   29b68:	3209      	adds	r2, #9
   29b6a:	4b57      	ldr	r3, [pc, #348]	; (29cc8 <_impl_k_timer_start+0x164>)
   29b6c:	fba3 4202 	umull	r4, r2, r3, r2
   29b70:	08d2      	lsrs	r2, r2, #3
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
   29b72:	9201      	str	r2, [sp, #4]
   29b74:	3109      	adds	r1, #9
   29b76:	fba3 3101 	umull	r3, r1, r3, r1
   29b7a:	08c9      	lsrs	r1, r1, #3
	duration_in_ticks = _ms_to_ticks(duration);
   29b7c:	9100      	str	r1, [sp, #0]
	__asm__ volatile(
   29b7e:	f04f 0320 	mov.w	r3, #32
   29b82:	f3ef 8411 	mrs	r4, BASEPRI
   29b86:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
   29b8a:	6901      	ldr	r1, [r0, #16]
   29b8c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   29b90:	d012      	beq.n	29bb8 <_impl_k_timer_start+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29b92:	4603      	mov	r3, r0
	return list->tail == node;
   29b94:	4a4d      	ldr	r2, [pc, #308]	; (29ccc <_impl_k_timer_start+0x168>)
   29b96:	6912      	ldr	r2, [r2, #16]
   29b98:	4290      	cmp	r0, r2
   29b9a:	d004      	beq.n	29ba6 <_impl_k_timer_start+0x42>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29b9c:	b100      	cbz	r0, 29ba0 <_impl_k_timer_start+0x3c>
	return (node == list->tail) ? NULL : node->next;
   29b9e:	6803      	ldr	r3, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29ba0:	691a      	ldr	r2, [r3, #16]
   29ba2:	440a      	add	r2, r1
   29ba4:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29ba6:	6843      	ldr	r3, [r0, #4]
   29ba8:	6802      	ldr	r2, [r0, #0]
   29baa:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29bac:	6803      	ldr	r3, [r0, #0]
   29bae:	6842      	ldr	r2, [r0, #4]
   29bb0:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29bb6:	6103      	str	r3, [r0, #16]
		_abort_timeout(&timer->timeout);
	}

	timer->period = period_in_ticks;
   29bb8:	9b01      	ldr	r3, [sp, #4]
   29bba:	6283      	str	r3, [r0, #40]	; 0x28
	timer->status = 0;
   29bbc:	2200      	movs	r2, #0
   29bbe:	62c2      	str	r2, [r0, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
   29bc0:	4605      	mov	r5, r0
   29bc2:	f100 0118 	add.w	r1, r0, #24
   29bc6:	9b00      	ldr	r3, [sp, #0]
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29bc8:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   29bca:	6082      	str	r2, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29bcc:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   29bce:	b133      	cbz	r3, 29bde <_impl_k_timer_start+0x7a>
	return list->head == list;
   29bd0:	4a3e      	ldr	r2, [pc, #248]	; (29ccc <_impl_k_timer_start+0x168>)
   29bd2:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29bd6:	4293      	cmp	r3, r2
   29bd8:	d14f      	bne.n	29c7a <_impl_k_timer_start+0x116>
   29bda:	2300      	movs	r3, #0
   29bdc:	e04d      	b.n	29c7a <_impl_k_timer_start+0x116>
	struct k_thread *thread = timeout->thread;
   29bde:	4613      	mov	r3, r2
   29be0:	f04f 0220 	mov.w	r2, #32
   29be4:	f3ef 8511 	mrs	r5, BASEPRI
   29be8:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   29bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29bf0:	6102      	str	r2, [r0, #16]
	if (thread) {
   29bf2:	b323      	cbz	r3, 29c3e <_impl_k_timer_start+0xda>
	if (timeout_obj->wait_q) {
   29bf4:	68c2      	ldr	r2, [r0, #12]
   29bf6:	b152      	cbz	r2, 29c0e <_impl_k_timer_start+0xaa>
	node->prev->next = node->next;
   29bf8:	685a      	ldr	r2, [r3, #4]
   29bfa:	6819      	ldr	r1, [r3, #0]
   29bfc:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   29bfe:	681a      	ldr	r2, [r3, #0]
   29c00:	6859      	ldr	r1, [r3, #4]
   29c02:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29c04:	7a5a      	ldrb	r2, [r3, #9]
   29c06:	f022 0202 	bic.w	r2, r2, #2
   29c0a:	725a      	strb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   29c0c:	61db      	str	r3, [r3, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29c0e:	7a5a      	ldrb	r2, [r3, #9]
   29c10:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   29c14:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29c16:	f012 0f1b 	tst.w	r2, #27
   29c1a:	d107      	bne.n	29c2c <_impl_k_timer_start+0xc8>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29c1c:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29c1e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29c22:	d001      	beq.n	29c28 <_impl_k_timer_start+0xc4>
   29c24:	2200      	movs	r2, #0
   29c26:	e002      	b.n	29c2e <_impl_k_timer_start+0xca>
   29c28:	2201      	movs	r2, #1
   29c2a:	e000      	b.n	29c2e <_impl_k_timer_start+0xca>
   29c2c:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   29c2e:	b912      	cbnz	r2, 29c36 <_impl_k_timer_start+0xd2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29c30:	f385 8811 	msr	BASEPRI, r5
   29c34:	e044      	b.n	29cc0 <_impl_k_timer_start+0x15c>
		_add_thread_to_ready_q(thread);
   29c36:	4618      	mov	r0, r3
   29c38:	f7ff f86e 	bl	28d18 <_add_thread_to_ready_q>
   29c3c:	e7f8      	b.n	29c30 <_impl_k_timer_start+0xcc>
   29c3e:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   29c42:	6943      	ldr	r3, [r0, #20]
   29c44:	2b00      	cmp	r3, #0
   29c46:	d03b      	beq.n	29cc0 <_impl_k_timer_start+0x15c>
			timeout->func(timeout);
   29c48:	4798      	blx	r3
   29c4a:	e039      	b.n	29cc0 <_impl_k_timer_start+0x15c>
			in_q->delta_ticks_from_prev -= *delta;
   29c4c:	1a8a      	subs	r2, r1, r2
   29c4e:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29c50:	b133      	cbz	r3, 29c60 <_impl_k_timer_start+0xfc>
		node->prev = insert_point->prev;
   29c52:	685a      	ldr	r2, [r3, #4]
   29c54:	6042      	str	r2, [r0, #4]
		node->next = insert_point;
   29c56:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   29c58:	685a      	ldr	r2, [r3, #4]
   29c5a:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
   29c5c:	6058      	str	r0, [r3, #4]
   29c5e:	e02f      	b.n	29cc0 <_impl_k_timer_start+0x15c>
	node->next = list;
   29c60:	4b1b      	ldr	r3, [pc, #108]	; (29cd0 <_impl_k_timer_start+0x16c>)
   29c62:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   29c64:	685a      	ldr	r2, [r3, #4]
   29c66:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   29c68:	685a      	ldr	r2, [r3, #4]
   29c6a:	6010      	str	r0, [r2, #0]
	list->tail = node;
   29c6c:	6058      	str	r0, [r3, #4]
   29c6e:	e027      	b.n	29cc0 <_impl_k_timer_start+0x15c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29c70:	4619      	mov	r1, r3
   29c72:	e011      	b.n	29c98 <_impl_k_timer_start+0x134>
	return (node == list->tail) ? NULL : node->next;
   29c74:	2100      	movs	r1, #0
   29c76:	e00f      	b.n	29c98 <_impl_k_timer_start+0x134>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29c78:	2300      	movs	r3, #0
   29c7a:	b1d3      	cbz	r3, 29cb2 <_impl_k_timer_start+0x14e>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29c7c:	692a      	ldr	r2, [r5, #16]
   29c7e:	6919      	ldr	r1, [r3, #16]
   29c80:	428a      	cmp	r2, r1
   29c82:	dde3      	ble.n	29c4c <_impl_k_timer_start+0xe8>
		*delta -= in_q->delta_ticks_from_prev;
   29c84:	1a52      	subs	r2, r2, r1
   29c86:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29c88:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29c8a:	2b00      	cmp	r3, #0
   29c8c:	d0f0      	beq.n	29c70 <_impl_k_timer_start+0x10c>
	return (node == list->tail) ? NULL : node->next;
   29c8e:	490f      	ldr	r1, [pc, #60]	; (29ccc <_impl_k_timer_start+0x168>)
   29c90:	6909      	ldr	r1, [r1, #16]
   29c92:	428b      	cmp	r3, r1
   29c94:	d0ee      	beq.n	29c74 <_impl_k_timer_start+0x110>
   29c96:	6819      	ldr	r1, [r3, #0]
   29c98:	2900      	cmp	r1, #0
   29c9a:	d0ed      	beq.n	29c78 <_impl_k_timer_start+0x114>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29c9c:	b12a      	cbz	r2, 29caa <_impl_k_timer_start+0x146>
	return (node == list->tail) ? NULL : node->next;
   29c9e:	490b      	ldr	r1, [pc, #44]	; (29ccc <_impl_k_timer_start+0x168>)
   29ca0:	6909      	ldr	r1, [r1, #16]
   29ca2:	428a      	cmp	r2, r1
   29ca4:	d003      	beq.n	29cae <_impl_k_timer_start+0x14a>
   29ca6:	681b      	ldr	r3, [r3, #0]
   29ca8:	e7e7      	b.n	29c7a <_impl_k_timer_start+0x116>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29caa:	2300      	movs	r3, #0
   29cac:	e7e5      	b.n	29c7a <_impl_k_timer_start+0x116>
	return (node == list->tail) ? NULL : node->next;
   29cae:	2300      	movs	r3, #0
   29cb0:	e7e3      	b.n	29c7a <_impl_k_timer_start+0x116>
	node->next = list;
   29cb2:	4b07      	ldr	r3, [pc, #28]	; (29cd0 <_impl_k_timer_start+0x16c>)
   29cb4:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   29cb6:	685a      	ldr	r2, [r3, #4]
   29cb8:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   29cba:	685a      	ldr	r2, [r3, #4]
   29cbc:	6010      	str	r0, [r2, #0]
	list->tail = node;
   29cbe:	6058      	str	r0, [r3, #4]
   29cc0:	f384 8811 	msr	BASEPRI, r4
	irq_unlock(key);
}
   29cc4:	b003      	add	sp, #12
   29cc6:	bd30      	pop	{r4, r5, pc}
   29cc8:	cccccccd 	.word	0xcccccccd
   29ccc:	20002d60 	.word	0x20002d60
   29cd0:	20002d6c 	.word	0x20002d6c

00029cd4 <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
   29cd4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29cd6:	f04f 0320 	mov.w	r3, #32
   29cda:	f3ef 8411 	mrs	r4, BASEPRI
   29cde:	f383 8811 	msr	BASEPRI, r3
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29ce2:	6903      	ldr	r3, [r0, #16]
   29ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29ce8:	d042      	beq.n	29d70 <_impl_k_timer_stop+0x9c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29cea:	4602      	mov	r2, r0
	return list->tail == node;
   29cec:	493b      	ldr	r1, [pc, #236]	; (29ddc <_impl_k_timer_stop+0x108>)
   29cee:	6909      	ldr	r1, [r1, #16]
   29cf0:	4288      	cmp	r0, r1
   29cf2:	d004      	beq.n	29cfe <_impl_k_timer_stop+0x2a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29cf4:	b100      	cbz	r0, 29cf8 <_impl_k_timer_stop+0x24>
	return (node == list->tail) ? NULL : node->next;
   29cf6:	6802      	ldr	r2, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29cf8:	6911      	ldr	r1, [r2, #16]
   29cfa:	440b      	add	r3, r1
   29cfc:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
   29cfe:	6843      	ldr	r3, [r0, #4]
   29d00:	6802      	ldr	r2, [r0, #0]
   29d02:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29d04:	6803      	ldr	r3, [r0, #0]
   29d06:	6842      	ldr	r2, [r0, #4]
   29d08:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29d0e:	6103      	str	r3, [r0, #16]
	return 0;
   29d10:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29d12:	f384 8811 	msr	BASEPRI, r4
	int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);

	irq_unlock(key);

	if (inactive) {
   29d16:	2b00      	cmp	r3, #0
   29d18:	d15f      	bne.n	29dda <_impl_k_timer_stop+0x106>
   29d1a:	4604      	mov	r4, r0
		return;
	}

	if (timer->stop_fn) {
   29d1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29d1e:	b103      	cbz	r3, 29d22 <_impl_k_timer_stop+0x4e>
		timer->stop_fn(timer);
   29d20:	4798      	blx	r3
	__asm__ volatile(
   29d22:	f04f 0320 	mov.w	r3, #32
   29d26:	f3ef 8511 	mrs	r5, BASEPRI
   29d2a:	f383 8811 	msr	BASEPRI, r3
	}

	key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&timer->wait_q);
   29d2e:	f104 0218 	add.w	r2, r4, #24
	if (_handling_timeouts) {
   29d32:	4b2b      	ldr	r3, [pc, #172]	; (29de0 <_impl_k_timer_stop+0x10c>)
   29d34:	681b      	ldr	r3, [r3, #0]
   29d36:	b9f3      	cbnz	r3, 29d76 <_impl_k_timer_stop+0xa2>
	return list->head == list;
   29d38:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29d3a:	4282      	cmp	r2, r0
   29d3c:	d02c      	beq.n	29d98 <_impl_k_timer_stop+0xc4>
	if (thread) {
   29d3e:	b148      	cbz	r0, 29d54 <_impl_k_timer_stop+0x80>
	node->prev->next = node->next;
   29d40:	6843      	ldr	r3, [r0, #4]
   29d42:	6802      	ldr	r2, [r0, #0]
   29d44:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29d46:	6803      	ldr	r3, [r0, #0]
   29d48:	6842      	ldr	r2, [r0, #4]
   29d4a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29d4c:	7a43      	ldrb	r3, [r0, #9]
   29d4e:	f023 0302 	bic.w	r3, r3, #2
   29d52:	7243      	strb	r3, [r0, #9]

	if (pending_thread) {
   29d54:	b330      	cbz	r0, 29da4 <_impl_k_timer_stop+0xd0>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29d56:	7a43      	ldrb	r3, [r0, #9]
   29d58:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29d5c:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29d5e:	f013 0f1b 	tst.w	r3, #27
   29d62:	d11d      	bne.n	29da0 <_impl_k_timer_stop+0xcc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29d64:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29d6a:	d017      	beq.n	29d9c <_impl_k_timer_stop+0xc8>
   29d6c:	2300      	movs	r3, #0
   29d6e:	e018      	b.n	29da2 <_impl_k_timer_stop+0xce>
		return _INACTIVE;
   29d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29d74:	e7cd      	b.n	29d12 <_impl_k_timer_stop+0x3e>
	return list->head == list;
   29d76:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29d78:	4282      	cmp	r2, r0
   29d7a:	d102      	bne.n	29d82 <_impl_k_timer_stop+0xae>
   29d7c:	2000      	movs	r0, #0
   29d7e:	e000      	b.n	29d82 <_impl_k_timer_stop+0xae>
	return (node == list->tail) ? NULL : node->next;
   29d80:	6800      	ldr	r0, [r0, #0]
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   29d82:	2800      	cmp	r0, #0
   29d84:	d0db      	beq.n	29d3e <_impl_k_timer_stop+0x6a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   29d86:	6a03      	ldr	r3, [r0, #32]
			if (_is_thread_timeout_expired(thread)) {
   29d88:	f113 0f02 	cmn.w	r3, #2
   29d8c:	d1d7      	bne.n	29d3e <_impl_k_timer_stop+0x6a>
   29d8e:	6853      	ldr	r3, [r2, #4]
   29d90:	4298      	cmp	r0, r3
   29d92:	d1f5      	bne.n	29d80 <_impl_k_timer_stop+0xac>
   29d94:	2000      	movs	r0, #0
   29d96:	e7f4      	b.n	29d82 <_impl_k_timer_stop+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29d98:	2000      	movs	r0, #0
   29d9a:	e7d0      	b.n	29d3e <_impl_k_timer_stop+0x6a>
	return !(_is_thread_prevented_from_running(thread) ||
   29d9c:	2301      	movs	r3, #1
   29d9e:	e000      	b.n	29da2 <_impl_k_timer_stop+0xce>
   29da0:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29da2:	b95b      	cbnz	r3, 29dbc <_impl_k_timer_stop+0xe8>
   29da4:	f3ef 8305 	mrs	r3, IPSR
   29da8:	2b0d      	cmp	r3, #13
   29daa:	d80a      	bhi.n	29dc2 <_impl_k_timer_stop+0xee>
   29dac:	b173      	cbz	r3, 29dcc <_impl_k_timer_stop+0xf8>
   29dae:	4b0d      	ldr	r3, [pc, #52]	; (29de4 <_impl_k_timer_stop+0x110>)
   29db0:	685b      	ldr	r3, [r3, #4]
   29db2:	f413 6f00 	tst.w	r3, #2048	; 0x800
   29db6:	d00b      	beq.n	29dd0 <_impl_k_timer_stop+0xfc>
   29db8:	2300      	movs	r3, #0
   29dba:	e003      	b.n	29dc4 <_impl_k_timer_stop+0xf0>
		_add_thread_to_ready_q(thread);
   29dbc:	f7fe ffac 	bl	28d18 <_add_thread_to_ready_q>
   29dc0:	e7f0      	b.n	29da4 <_impl_k_timer_stop+0xd0>
   29dc2:	2301      	movs	r3, #1
		_ready_thread(pending_thread);
	}

	if (_is_in_isr()) {
   29dc4:	b133      	cbz	r3, 29dd4 <_impl_k_timer_stop+0x100>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29dc6:	f385 8811 	msr	BASEPRI, r5
   29dca:	bd38      	pop	{r3, r4, r5, pc}
   29dcc:	2300      	movs	r3, #0
   29dce:	e7f9      	b.n	29dc4 <_impl_k_timer_stop+0xf0>
   29dd0:	2301      	movs	r3, #1
   29dd2:	e7f7      	b.n	29dc4 <_impl_k_timer_stop+0xf0>
		irq_unlock(key);
	} else {
		_reschedule_threads(key);
   29dd4:	4628      	mov	r0, r5
   29dd6:	f7ff f937 	bl	29048 <_reschedule_threads>
   29dda:	bd38      	pop	{r3, r4, r5, pc}
   29ddc:	20002d60 	.word	0x20002d60
   29de0:	20003148 	.word	0x20003148
   29de4:	e000ed00 	.word	0xe000ed00

00029de8 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   29de8:	b430      	push	{r4, r5}
	__asm__ volatile(
   29dea:	f04f 0320 	mov.w	r3, #32
   29dee:	f3ef 8411 	mrs	r4, BASEPRI
   29df2:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29df6:	6903      	ldr	r3, [r0, #16]
   29df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29dfc:	d017      	beq.n	29e2e <_timeout_remaining_get+0x46>
	return list->head == list;
   29dfe:	4a10      	ldr	r2, [pc, #64]	; (29e40 <_timeout_remaining_get+0x58>)
   29e00:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29e04:	4293      	cmp	r3, r2
   29e06:	d001      	beq.n	29e0c <_timeout_remaining_get+0x24>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   29e08:	6919      	ldr	r1, [r3, #16]
		while (t != timeout) {
   29e0a:	e005      	b.n	29e18 <_timeout_remaining_get+0x30>
   29e0c:	2300      	movs	r3, #0
   29e0e:	e7fb      	b.n	29e08 <_timeout_remaining_get+0x20>
	return (node == list->tail) ? NULL : node->next;
   29e10:	2200      	movs	r2, #0
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
								   &t->node);
			remaining_ticks += t->delta_ticks_from_prev;
   29e12:	6913      	ldr	r3, [r2, #16]
   29e14:	4419      	add	r1, r3
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   29e16:	4613      	mov	r3, r2
		while (t != timeout) {
   29e18:	4283      	cmp	r3, r0
   29e1a:	d009      	beq.n	29e30 <_timeout_remaining_get+0x48>
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   29e1c:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29e1e:	2b00      	cmp	r3, #0
   29e20:	d0f7      	beq.n	29e12 <_timeout_remaining_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   29e22:	4a07      	ldr	r2, [pc, #28]	; (29e40 <_timeout_remaining_get+0x58>)
   29e24:	6912      	ldr	r2, [r2, #16]
   29e26:	4293      	cmp	r3, r2
   29e28:	d0f2      	beq.n	29e10 <_timeout_remaining_get+0x28>
   29e2a:	681a      	ldr	r2, [r3, #0]
   29e2c:	e7f1      	b.n	29e12 <_timeout_remaining_get+0x2a>
		remaining_ticks = 0;
   29e2e:	2100      	movs	r1, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29e30:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   29e34:	008a      	lsls	r2, r1, #2
   29e36:	1850      	adds	r0, r2, r1
   29e38:	1800      	adds	r0, r0, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   29e3a:	bc30      	pop	{r4, r5}
   29e3c:	4770      	bx	lr
   29e3e:	bf00      	nop
   29e40:	20002d60 	.word	0x20002d60

00029e44 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   29e44:	b538      	push	{r3, r4, r5, lr}
   29e46:	4604      	mov	r4, r0
   29e48:	e003      	b.n	29e52 <work_q_main+0xe>
		handler = work->handler;

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
					      K_WORK_STATE_PENDING)) {
			handler(work);
   29e4a:	4610      	mov	r0, r2
   29e4c:	47a8      	blx	r5
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   29e4e:	f7ff f927 	bl	290a0 <_impl_k_yield>
		work = k_queue_get(&work_q->queue, K_FOREVER);
   29e52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29e56:	4620      	mov	r0, r4
   29e58:	f7fe ff0c 	bl	28c74 <k_queue_get>
		if (!work) {
   29e5c:	4602      	mov	r2, r0
   29e5e:	2800      	cmp	r0, #0
   29e60:	d0f7      	beq.n	29e52 <work_q_main+0xe>
		handler = work->handler;
   29e62:	6845      	ldr	r5, [r0, #4]
		if (atomic_test_and_clear_bit(work->flags,
   29e64:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29e68:	f3bf 8f5b 	dmb	ish
   29e6c:	e853 1f00 	ldrex	r1, [r3]
   29e70:	f021 0001 	bic.w	r0, r1, #1
   29e74:	e843 0e00 	strex	lr, r0, [r3]
   29e78:	f1be 0f00 	cmp.w	lr, #0
   29e7c:	d1f6      	bne.n	29e6c <work_q_main+0x28>
   29e7e:	f3bf 8f5b 	dmb	ish
   29e82:	f011 0f01 	tst.w	r1, #1
   29e86:	d0e2      	beq.n	29e4e <work_q_main+0xa>
   29e88:	e7df      	b.n	29e4a <work_q_main+0x6>

00029e8a <work_timeout>:
	_k_object_init(work_q);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   29e8a:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   29e8c:	6984      	ldr	r4, [r0, #24]
   29e8e:	f1a0 010c 	sub.w	r1, r0, #12
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   29e92:	1f03      	subs	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29e94:	f3bf 8f5b 	dmb	ish
   29e98:	e853 2f00 	ldrex	r2, [r3]
   29e9c:	f042 0001 	orr.w	r0, r2, #1
   29ea0:	e843 0e00 	strex	lr, r0, [r3]
   29ea4:	f1be 0f00 	cmp.w	lr, #0
   29ea8:	d1f6      	bne.n	29e98 <work_timeout+0xe>
   29eaa:	f3bf 8f5b 	dmb	ish
   29eae:	f012 0f01 	tst.w	r2, #1
   29eb2:	d000      	beq.n	29eb6 <work_timeout+0x2c>
   29eb4:	bd10      	pop	{r4, pc}
		k_queue_append(&work_q->queue, work);
   29eb6:	4620      	mov	r0, r4
   29eb8:	f7fe feb4 	bl	28c24 <k_queue_append>
}
   29ebc:	e7fa      	b.n	29eb4 <work_timeout+0x2a>
	...

00029ec0 <k_work_q_start>:
{
   29ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   29ec2:	b087      	sub	sp, #28
   29ec4:	4604      	mov	r4, r0
   29ec6:	460d      	mov	r5, r1
   29ec8:	4616      	mov	r6, r2
   29eca:	461f      	mov	r7, r3
	k_queue_init(&work_q->queue);
   29ecc:	f7fe fe77 	bl	28bbe <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   29ed0:	2300      	movs	r3, #0
   29ed2:	9305      	str	r3, [sp, #20]
   29ed4:	9304      	str	r3, [sp, #16]
   29ed6:	9703      	str	r7, [sp, #12]
   29ed8:	9302      	str	r3, [sp, #8]
   29eda:	9301      	str	r3, [sp, #4]
   29edc:	9400      	str	r4, [sp, #0]
   29ede:	4b04      	ldr	r3, [pc, #16]	; (29ef0 <k_work_q_start+0x30>)
   29ee0:	4632      	mov	r2, r6
   29ee2:	4629      	mov	r1, r5
   29ee4:	f104 0010 	add.w	r0, r4, #16
   29ee8:	f7ff fcb2 	bl	29850 <_impl_k_thread_create>
}
   29eec:	b007      	add	sp, #28
   29eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29ef0:	00029e45 	.word	0x00029e45

00029ef4 <k_delayed_work_init>:

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   29ef4:	b500      	push	{lr}
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
   29ef6:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29efa:	f3bf 8f5b 	dmb	ish
   29efe:	e853 2f00 	ldrex	r2, [r3]
   29f02:	f022 0201 	bic.w	r2, r2, #1
   29f06:	e843 2e00 	strex	lr, r2, [r3]
   29f0a:	f1be 0f00 	cmp.w	lr, #0
   29f0e:	d1f6      	bne.n	29efe <k_delayed_work_init+0xa>
   29f10:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   29f14:	6041      	str	r1, [r0, #4]
	t->delta_ticks_from_prev = _INACTIVE;
   29f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29f1a:	61c3      	str	r3, [r0, #28]
	t->wait_q = NULL;
   29f1c:	2300      	movs	r3, #0
   29f1e:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   29f20:	6143      	str	r3, [r0, #20]
	t->func = func;
   29f22:	4a02      	ldr	r2, [pc, #8]	; (29f2c <k_delayed_work_init+0x38>)
   29f24:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   29f26:	6243      	str	r3, [r0, #36]	; 0x24
   29f28:	f85d fb04 	ldr.w	pc, [sp], #4
   29f2c:	00029e8b 	.word	0x00029e8b

00029f30 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   29f30:	b430      	push	{r4, r5}
	__asm__ volatile(
   29f32:	f04f 0320 	mov.w	r3, #32
   29f36:	f3ef 8411 	mrs	r4, BASEPRI
   29f3a:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   29f3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29f40:	b18b      	cbz	r3, 29f66 <k_delayed_work_cancel+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29f42:	f3bf 8f5b 	dmb	ish
   29f46:	6883      	ldr	r3, [r0, #8]
   29f48:	f3bf 8f5b 	dmb	ish
		irq_unlock(key);
		return -EINVAL;
	}

	if (k_work_pending(&work->work)) {
   29f4c:	f013 0f01 	tst.w	r3, #1
   29f50:	d02d      	beq.n	29fae <k_delayed_work_cancel+0x7e>
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   29f52:	6a45      	ldr	r5, [r0, #36]	; 0x24
   29f54:	4601      	mov	r1, r0
	return list->head;
   29f56:	682b      	ldr	r3, [r5, #0]
	sys_snode_t *prev = NULL;
   29f58:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   29f5a:	b193      	cbz	r3, 29f82 <k_delayed_work_cancel+0x52>
		if (test == node) {
   29f5c:	4299      	cmp	r1, r3
   29f5e:	d007      	beq.n	29f70 <k_delayed_work_cancel+0x40>
		prev = test;
   29f60:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   29f62:	681b      	ldr	r3, [r3, #0]
   29f64:	e7f9      	b.n	29f5a <k_delayed_work_cancel+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29f66:	f384 8811 	msr	BASEPRI, r4
		return -EINVAL;
   29f6a:	f06f 0015 	mvn.w	r0, #21
   29f6e:	e00e      	b.n	29f8e <k_delayed_work_cancel+0x5e>
	if (!prev_node) {
   29f70:	b17a      	cbz	r2, 29f92 <k_delayed_work_cancel+0x62>
		prev_node->next = node->next;
   29f72:	6803      	ldr	r3, [r0, #0]
   29f74:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   29f76:	686b      	ldr	r3, [r5, #4]
   29f78:	4298      	cmp	r0, r3
   29f7a:	d011      	beq.n	29fa0 <k_delayed_work_cancel+0x70>
	node->next = NULL;
   29f7c:	2300      	movs	r3, #0
   29f7e:	6003      	str	r3, [r0, #0]
			return true;
   29f80:	2301      	movs	r3, #1
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   29f82:	b17b      	cbz	r3, 29fa4 <k_delayed_work_cancel+0x74>
	} else {
		_abort_timeout(&work->timeout);
	}

	/* Detach from workqueue */
	work->work_q = NULL;
   29f84:	2300      	movs	r3, #0
   29f86:	6243      	str	r3, [r0, #36]	; 0x24
   29f88:	f384 8811 	msr	BASEPRI, r4

	irq_unlock(key);

	return 0;
   29f8c:	4618      	mov	r0, r3
}
   29f8e:	bc30      	pop	{r4, r5}
   29f90:	4770      	bx	lr
		list->head = node->next;
   29f92:	6803      	ldr	r3, [r0, #0]
   29f94:	602b      	str	r3, [r5, #0]
		if (list->tail == node) {
   29f96:	686a      	ldr	r2, [r5, #4]
   29f98:	4290      	cmp	r0, r2
   29f9a:	d1ef      	bne.n	29f7c <k_delayed_work_cancel+0x4c>
			list->tail = list->head;
   29f9c:	606b      	str	r3, [r5, #4]
   29f9e:	e7ed      	b.n	29f7c <k_delayed_work_cancel+0x4c>
			list->tail = prev_node;
   29fa0:	606a      	str	r2, [r5, #4]
   29fa2:	e7eb      	b.n	29f7c <k_delayed_work_cancel+0x4c>
   29fa4:	f384 8811 	msr	BASEPRI, r4
			return -EINVAL;
   29fa8:	f06f 0015 	mvn.w	r0, #21
   29fac:	e7ef      	b.n	29f8e <k_delayed_work_cancel+0x5e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29fae:	69c2      	ldr	r2, [r0, #28]
   29fb0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29fb4:	d0e6      	beq.n	29f84 <k_delayed_work_cancel+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29fb6:	f100 030c 	add.w	r3, r0, #12
	return list->tail == node;
   29fba:	4909      	ldr	r1, [pc, #36]	; (29fe0 <k_delayed_work_cancel+0xb0>)
   29fbc:	6909      	ldr	r1, [r1, #16]
   29fbe:	428b      	cmp	r3, r1
   29fc0:	d004      	beq.n	29fcc <k_delayed_work_cancel+0x9c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29fc2:	b103      	cbz	r3, 29fc6 <k_delayed_work_cancel+0x96>
	return (node == list->tail) ? NULL : node->next;
   29fc4:	68c3      	ldr	r3, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29fc6:	6919      	ldr	r1, [r3, #16]
   29fc8:	440a      	add	r2, r1
   29fca:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29fcc:	6903      	ldr	r3, [r0, #16]
   29fce:	68c2      	ldr	r2, [r0, #12]
   29fd0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29fd2:	68c3      	ldr	r3, [r0, #12]
   29fd4:	6902      	ldr	r2, [r0, #16]
   29fd6:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29fdc:	61c3      	str	r3, [r0, #28]
   29fde:	e7d1      	b.n	29f84 <k_delayed_work_cancel+0x54>
   29fe0:	20002d60 	.word	0x20002d60

00029fe4 <k_delayed_work_submit_to_queue>:
{
   29fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   29fe6:	f04f 0320 	mov.w	r3, #32
   29fea:	f3ef 8711 	mrs	r7, BASEPRI
   29fee:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   29ff2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   29ff4:	b113      	cbz	r3, 29ffc <k_delayed_work_submit_to_queue+0x18>
   29ff6:	4283      	cmp	r3, r0
   29ff8:	f040 80b4 	bne.w	2a164 <k_delayed_work_submit_to_queue+0x180>
   29ffc:	4614      	mov	r4, r2
   29ffe:	460e      	mov	r6, r1
   2a000:	4605      	mov	r5, r0
	if (work->work_q == work_q) {
   2a002:	4283      	cmp	r3, r0
   2a004:	d016      	beq.n	2a034 <k_delayed_work_submit_to_queue+0x50>
	work->work_q = work_q;
   2a006:	6275      	str	r5, [r6, #36]	; 0x24
	if (!delay) {
   2a008:	b1d4      	cbz	r4, 2a040 <k_delayed_work_submit_to_queue+0x5c>
		_add_timeout(NULL, &work->timeout, NULL,
   2a00a:	f106 050c 	add.w	r5, r6, #12
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   2a00e:	f104 0309 	add.w	r3, r4, #9
   2a012:	4c57      	ldr	r4, [pc, #348]	; (2a170 <k_delayed_work_submit_to_queue+0x18c>)
   2a014:	fba4 2303 	umull	r2, r3, r4, r3
   2a018:	08db      	lsrs	r3, r3, #3
   2a01a:	3301      	adds	r3, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2a01c:	612b      	str	r3, [r5, #16]
	timeout->thread = thread;
   2a01e:	2200      	movs	r2, #0
   2a020:	60aa      	str	r2, [r5, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2a022:	60ea      	str	r2, [r5, #12]
	if (!timeout_in_ticks) {
   2a024:	b32b      	cbz	r3, 2a072 <k_delayed_work_submit_to_queue+0x8e>
	return list->head == list;
   2a026:	4a53      	ldr	r2, [pc, #332]	; (2a174 <k_delayed_work_submit_to_queue+0x190>)
   2a028:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a02c:	4293      	cmp	r3, r2
   2a02e:	d172      	bne.n	2a116 <k_delayed_work_submit_to_queue+0x132>
   2a030:	2300      	movs	r3, #0
   2a032:	e070      	b.n	2a116 <k_delayed_work_submit_to_queue+0x132>
		err = k_delayed_work_cancel(work);
   2a034:	4608      	mov	r0, r1
   2a036:	f7ff ff7b 	bl	29f30 <k_delayed_work_cancel>
		if (err < 0) {
   2a03a:	2800      	cmp	r0, #0
   2a03c:	dae3      	bge.n	2a006 <k_delayed_work_submit_to_queue+0x22>
   2a03e:	e08e      	b.n	2a15e <k_delayed_work_submit_to_queue+0x17a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2a040:	f106 0308 	add.w	r3, r6, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a044:	f3bf 8f5b 	dmb	ish
   2a048:	e853 2f00 	ldrex	r2, [r3]
   2a04c:	f042 0101 	orr.w	r1, r2, #1
   2a050:	e843 1000 	strex	r0, r1, [r3]
   2a054:	2800      	cmp	r0, #0
   2a056:	d1f7      	bne.n	2a048 <k_delayed_work_submit_to_queue+0x64>
   2a058:	f3bf 8f5b 	dmb	ish
   2a05c:	f012 0f01 	tst.w	r2, #1
   2a060:	d001      	beq.n	2a066 <k_delayed_work_submit_to_queue+0x82>
	err = 0;
   2a062:	2000      	movs	r0, #0
   2a064:	e07b      	b.n	2a15e <k_delayed_work_submit_to_queue+0x17a>
		k_queue_append(&work_q->queue, work);
   2a066:	4631      	mov	r1, r6
   2a068:	4628      	mov	r0, r5
   2a06a:	f7fe fddb 	bl	28c24 <k_queue_append>
   2a06e:	2000      	movs	r0, #0
   2a070:	e075      	b.n	2a15e <k_delayed_work_submit_to_queue+0x17a>
	struct k_thread *thread = timeout->thread;
   2a072:	4610      	mov	r0, r2
   2a074:	f04f 0320 	mov.w	r3, #32
   2a078:	f3ef 8411 	mrs	r4, BASEPRI
   2a07c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   2a080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a084:	612b      	str	r3, [r5, #16]
	if (thread) {
   2a086:	b322      	cbz	r2, 2a0d2 <k_delayed_work_submit_to_queue+0xee>
	if (timeout_obj->wait_q) {
   2a088:	68eb      	ldr	r3, [r5, #12]
   2a08a:	b153      	cbz	r3, 2a0a2 <k_delayed_work_submit_to_queue+0xbe>
	node->prev->next = node->next;
   2a08c:	6853      	ldr	r3, [r2, #4]
   2a08e:	6812      	ldr	r2, [r2, #0]
   2a090:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2a092:	6803      	ldr	r3, [r0, #0]
   2a094:	6842      	ldr	r2, [r0, #4]
   2a096:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a098:	7a43      	ldrb	r3, [r0, #9]
   2a09a:	f023 0302 	bic.w	r3, r3, #2
   2a09e:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   2a0a0:	61c0      	str	r0, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a0a2:	7a43      	ldrb	r3, [r0, #9]
   2a0a4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2a0a8:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2a0aa:	f013 0f1b 	tst.w	r3, #27
   2a0ae:	d107      	bne.n	2a0c0 <k_delayed_work_submit_to_queue+0xdc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2a0b0:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2a0b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a0b6:	d001      	beq.n	2a0bc <k_delayed_work_submit_to_queue+0xd8>
   2a0b8:	2300      	movs	r3, #0
   2a0ba:	e002      	b.n	2a0c2 <k_delayed_work_submit_to_queue+0xde>
   2a0bc:	2301      	movs	r3, #1
   2a0be:	e000      	b.n	2a0c2 <k_delayed_work_submit_to_queue+0xde>
   2a0c0:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2a0c2:	b91b      	cbnz	r3, 2a0cc <k_delayed_work_submit_to_queue+0xe8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a0c4:	f384 8811 	msr	BASEPRI, r4
   2a0c8:	2000      	movs	r0, #0
   2a0ca:	e048      	b.n	2a15e <k_delayed_work_submit_to_queue+0x17a>
		_add_thread_to_ready_q(thread);
   2a0cc:	f7fe fe24 	bl	28d18 <_add_thread_to_ready_q>
   2a0d0:	e7f8      	b.n	2a0c4 <k_delayed_work_submit_to_queue+0xe0>
   2a0d2:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   2a0d6:	696b      	ldr	r3, [r5, #20]
   2a0d8:	2b00      	cmp	r3, #0
   2a0da:	d046      	beq.n	2a16a <k_delayed_work_submit_to_queue+0x186>
			timeout->func(timeout);
   2a0dc:	4628      	mov	r0, r5
   2a0de:	4798      	blx	r3
   2a0e0:	2000      	movs	r0, #0
   2a0e2:	e03c      	b.n	2a15e <k_delayed_work_submit_to_queue+0x17a>
			in_q->delta_ticks_from_prev -= *delta;
   2a0e4:	1aa2      	subs	r2, r4, r2
   2a0e6:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2a0e8:	b13b      	cbz	r3, 2a0fa <k_delayed_work_submit_to_queue+0x116>
		node->prev = insert_point->prev;
   2a0ea:	685a      	ldr	r2, [r3, #4]
   2a0ec:	606a      	str	r2, [r5, #4]
		node->next = insert_point;
   2a0ee:	60f3      	str	r3, [r6, #12]
		insert_point->prev->next = node;
   2a0f0:	685a      	ldr	r2, [r3, #4]
   2a0f2:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   2a0f4:	605d      	str	r5, [r3, #4]
   2a0f6:	2000      	movs	r0, #0
   2a0f8:	e031      	b.n	2a15e <k_delayed_work_submit_to_queue+0x17a>
	node->next = list;
   2a0fa:	4b1f      	ldr	r3, [pc, #124]	; (2a178 <k_delayed_work_submit_to_queue+0x194>)
   2a0fc:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   2a0fe:	685a      	ldr	r2, [r3, #4]
   2a100:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   2a102:	685a      	ldr	r2, [r3, #4]
   2a104:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2a106:	605d      	str	r5, [r3, #4]
   2a108:	2000      	movs	r0, #0
   2a10a:	e028      	b.n	2a15e <k_delayed_work_submit_to_queue+0x17a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a10c:	4619      	mov	r1, r3
   2a10e:	e011      	b.n	2a134 <k_delayed_work_submit_to_queue+0x150>
	return (node == list->tail) ? NULL : node->next;
   2a110:	2100      	movs	r1, #0
   2a112:	e00f      	b.n	2a134 <k_delayed_work_submit_to_queue+0x150>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a114:	2300      	movs	r3, #0
   2a116:	b1d3      	cbz	r3, 2a14e <k_delayed_work_submit_to_queue+0x16a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2a118:	692a      	ldr	r2, [r5, #16]
   2a11a:	691c      	ldr	r4, [r3, #16]
   2a11c:	42a2      	cmp	r2, r4
   2a11e:	dde1      	ble.n	2a0e4 <k_delayed_work_submit_to_queue+0x100>
		*delta -= in_q->delta_ticks_from_prev;
   2a120:	1b12      	subs	r2, r2, r4
   2a122:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a124:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a126:	2b00      	cmp	r3, #0
   2a128:	d0f0      	beq.n	2a10c <k_delayed_work_submit_to_queue+0x128>
	return (node == list->tail) ? NULL : node->next;
   2a12a:	4912      	ldr	r1, [pc, #72]	; (2a174 <k_delayed_work_submit_to_queue+0x190>)
   2a12c:	6909      	ldr	r1, [r1, #16]
   2a12e:	428b      	cmp	r3, r1
   2a130:	d0ee      	beq.n	2a110 <k_delayed_work_submit_to_queue+0x12c>
   2a132:	6819      	ldr	r1, [r3, #0]
   2a134:	2900      	cmp	r1, #0
   2a136:	d0ed      	beq.n	2a114 <k_delayed_work_submit_to_queue+0x130>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a138:	b12a      	cbz	r2, 2a146 <k_delayed_work_submit_to_queue+0x162>
	return (node == list->tail) ? NULL : node->next;
   2a13a:	490e      	ldr	r1, [pc, #56]	; (2a174 <k_delayed_work_submit_to_queue+0x190>)
   2a13c:	6909      	ldr	r1, [r1, #16]
   2a13e:	428a      	cmp	r2, r1
   2a140:	d003      	beq.n	2a14a <k_delayed_work_submit_to_queue+0x166>
   2a142:	681b      	ldr	r3, [r3, #0]
   2a144:	e7e7      	b.n	2a116 <k_delayed_work_submit_to_queue+0x132>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a146:	2300      	movs	r3, #0
   2a148:	e7e5      	b.n	2a116 <k_delayed_work_submit_to_queue+0x132>
	return (node == list->tail) ? NULL : node->next;
   2a14a:	2300      	movs	r3, #0
   2a14c:	e7e3      	b.n	2a116 <k_delayed_work_submit_to_queue+0x132>
	node->next = list;
   2a14e:	4b0a      	ldr	r3, [pc, #40]	; (2a178 <k_delayed_work_submit_to_queue+0x194>)
   2a150:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   2a152:	685a      	ldr	r2, [r3, #4]
   2a154:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   2a156:	685a      	ldr	r2, [r3, #4]
   2a158:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2a15a:	605d      	str	r5, [r3, #4]
   2a15c:	2000      	movs	r0, #0
   2a15e:	f387 8811 	msr	BASEPRI, r7
}
   2a162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EADDRINUSE;
   2a164:	f06f 006f 	mvn.w	r0, #111	; 0x6f
   2a168:	e7f9      	b.n	2a15e <k_delayed_work_submit_to_queue+0x17a>
	err = 0;
   2a16a:	2000      	movs	r0, #0
   2a16c:	e7f7      	b.n	2a15e <k_delayed_work_submit_to_queue+0x17a>
   2a16e:	bf00      	nop
   2a170:	cccccccd 	.word	0xcccccccd
   2a174:	20002d60 	.word	0x20002d60
   2a178:	20002d6c 	.word	0x20002d6c

0002a17c <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   2a17c:	4770      	bx	lr
	...

0002a180 <_calloc_r>:
   2a180:	b510      	push	{r4, lr}
   2a182:	fb02 f101 	mul.w	r1, r2, r1
   2a186:	f000 f83d 	bl	2a204 <_malloc_r>
   2a18a:	4604      	mov	r4, r0
   2a18c:	b1d8      	cbz	r0, 2a1c6 <_calloc_r+0x46>
   2a18e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2a192:	f022 0203 	bic.w	r2, r2, #3
   2a196:	3a04      	subs	r2, #4
   2a198:	2a24      	cmp	r2, #36	; 0x24
   2a19a:	d818      	bhi.n	2a1ce <_calloc_r+0x4e>
   2a19c:	2a13      	cmp	r2, #19
   2a19e:	d914      	bls.n	2a1ca <_calloc_r+0x4a>
   2a1a0:	2300      	movs	r3, #0
   2a1a2:	2a1b      	cmp	r2, #27
   2a1a4:	6003      	str	r3, [r0, #0]
   2a1a6:	6043      	str	r3, [r0, #4]
   2a1a8:	d916      	bls.n	2a1d8 <_calloc_r+0x58>
   2a1aa:	2a24      	cmp	r2, #36	; 0x24
   2a1ac:	6083      	str	r3, [r0, #8]
   2a1ae:	60c3      	str	r3, [r0, #12]
   2a1b0:	bf11      	iteee	ne
   2a1b2:	f100 0210 	addne.w	r2, r0, #16
   2a1b6:	6103      	streq	r3, [r0, #16]
   2a1b8:	6143      	streq	r3, [r0, #20]
   2a1ba:	f100 0218 	addeq.w	r2, r0, #24
   2a1be:	2300      	movs	r3, #0
   2a1c0:	6013      	str	r3, [r2, #0]
   2a1c2:	6053      	str	r3, [r2, #4]
   2a1c4:	6093      	str	r3, [r2, #8]
   2a1c6:	4620      	mov	r0, r4
   2a1c8:	bd10      	pop	{r4, pc}
   2a1ca:	4602      	mov	r2, r0
   2a1cc:	e7f7      	b.n	2a1be <_calloc_r+0x3e>
   2a1ce:	2100      	movs	r1, #0
   2a1d0:	f000 fb72 	bl	2a8b8 <memset>
   2a1d4:	4620      	mov	r0, r4
   2a1d6:	bd10      	pop	{r4, pc}
   2a1d8:	f100 0208 	add.w	r2, r0, #8
   2a1dc:	e7ef      	b.n	2a1be <_calloc_r+0x3e>
   2a1de:	bf00      	nop

0002a1e0 <__locale_ctype_ptr_l>:
   2a1e0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2a1e4:	4770      	bx	lr
   2a1e6:	bf00      	nop

0002a1e8 <__locale_ctype_ptr>:
   2a1e8:	4b04      	ldr	r3, [pc, #16]	; (2a1fc <__locale_ctype_ptr+0x14>)
   2a1ea:	4a05      	ldr	r2, [pc, #20]	; (2a200 <__locale_ctype_ptr+0x18>)
   2a1ec:	681b      	ldr	r3, [r3, #0]
   2a1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2a1f0:	2b00      	cmp	r3, #0
   2a1f2:	bf08      	it	eq
   2a1f4:	4613      	moveq	r3, r2
   2a1f6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   2a1fa:	4770      	bx	lr
   2a1fc:	2000cb70 	.word	0x2000cb70
   2a200:	2000cfa0 	.word	0x2000cfa0

0002a204 <_malloc_r>:
   2a204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a208:	f101 060b 	add.w	r6, r1, #11
   2a20c:	2e16      	cmp	r6, #22
   2a20e:	b083      	sub	sp, #12
   2a210:	4605      	mov	r5, r0
   2a212:	f240 809e 	bls.w	2a352 <_malloc_r+0x14e>
   2a216:	f036 0607 	bics.w	r6, r6, #7
   2a21a:	f100 80bd 	bmi.w	2a398 <_malloc_r+0x194>
   2a21e:	42b1      	cmp	r1, r6
   2a220:	f200 80ba 	bhi.w	2a398 <_malloc_r+0x194>
   2a224:	f000 fb96 	bl	2a954 <__malloc_lock>
   2a228:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   2a22c:	f0c0 8293 	bcc.w	2a756 <_malloc_r+0x552>
   2a230:	0a73      	lsrs	r3, r6, #9
   2a232:	f000 80b8 	beq.w	2a3a6 <_malloc_r+0x1a2>
   2a236:	2b04      	cmp	r3, #4
   2a238:	f200 8179 	bhi.w	2a52e <_malloc_r+0x32a>
   2a23c:	09b3      	lsrs	r3, r6, #6
   2a23e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   2a242:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   2a246:	00c3      	lsls	r3, r0, #3
   2a248:	4fbf      	ldr	r7, [pc, #764]	; (2a548 <_malloc_r+0x344>)
   2a24a:	443b      	add	r3, r7
   2a24c:	f1a3 0108 	sub.w	r1, r3, #8
   2a250:	685c      	ldr	r4, [r3, #4]
   2a252:	42a1      	cmp	r1, r4
   2a254:	d106      	bne.n	2a264 <_malloc_r+0x60>
   2a256:	e00c      	b.n	2a272 <_malloc_r+0x6e>
   2a258:	2a00      	cmp	r2, #0
   2a25a:	f280 80aa 	bge.w	2a3b2 <_malloc_r+0x1ae>
   2a25e:	68e4      	ldr	r4, [r4, #12]
   2a260:	42a1      	cmp	r1, r4
   2a262:	d006      	beq.n	2a272 <_malloc_r+0x6e>
   2a264:	6863      	ldr	r3, [r4, #4]
   2a266:	f023 0303 	bic.w	r3, r3, #3
   2a26a:	1b9a      	subs	r2, r3, r6
   2a26c:	2a0f      	cmp	r2, #15
   2a26e:	ddf3      	ble.n	2a258 <_malloc_r+0x54>
   2a270:	4670      	mov	r0, lr
   2a272:	693c      	ldr	r4, [r7, #16]
   2a274:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 2a55c <_malloc_r+0x358>
   2a278:	4574      	cmp	r4, lr
   2a27a:	f000 81ab 	beq.w	2a5d4 <_malloc_r+0x3d0>
   2a27e:	6863      	ldr	r3, [r4, #4]
   2a280:	f023 0303 	bic.w	r3, r3, #3
   2a284:	1b9a      	subs	r2, r3, r6
   2a286:	2a0f      	cmp	r2, #15
   2a288:	f300 8190 	bgt.w	2a5ac <_malloc_r+0x3a8>
   2a28c:	2a00      	cmp	r2, #0
   2a28e:	f8c7 e014 	str.w	lr, [r7, #20]
   2a292:	f8c7 e010 	str.w	lr, [r7, #16]
   2a296:	f280 809d 	bge.w	2a3d4 <_malloc_r+0x1d0>
   2a29a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2a29e:	f080 8161 	bcs.w	2a564 <_malloc_r+0x360>
   2a2a2:	08db      	lsrs	r3, r3, #3
   2a2a4:	f103 0c01 	add.w	ip, r3, #1
   2a2a8:	1099      	asrs	r1, r3, #2
   2a2aa:	687a      	ldr	r2, [r7, #4]
   2a2ac:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   2a2b0:	f8c4 8008 	str.w	r8, [r4, #8]
   2a2b4:	2301      	movs	r3, #1
   2a2b6:	408b      	lsls	r3, r1
   2a2b8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   2a2bc:	4313      	orrs	r3, r2
   2a2be:	3908      	subs	r1, #8
   2a2c0:	60e1      	str	r1, [r4, #12]
   2a2c2:	607b      	str	r3, [r7, #4]
   2a2c4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   2a2c8:	f8c8 400c 	str.w	r4, [r8, #12]
   2a2cc:	1082      	asrs	r2, r0, #2
   2a2ce:	2401      	movs	r4, #1
   2a2d0:	4094      	lsls	r4, r2
   2a2d2:	429c      	cmp	r4, r3
   2a2d4:	f200 808b 	bhi.w	2a3ee <_malloc_r+0x1ea>
   2a2d8:	421c      	tst	r4, r3
   2a2da:	d106      	bne.n	2a2ea <_malloc_r+0xe6>
   2a2dc:	f020 0003 	bic.w	r0, r0, #3
   2a2e0:	0064      	lsls	r4, r4, #1
   2a2e2:	421c      	tst	r4, r3
   2a2e4:	f100 0004 	add.w	r0, r0, #4
   2a2e8:	d0fa      	beq.n	2a2e0 <_malloc_r+0xdc>
   2a2ea:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   2a2ee:	46cc      	mov	ip, r9
   2a2f0:	4680      	mov	r8, r0
   2a2f2:	f8dc 300c 	ldr.w	r3, [ip, #12]
   2a2f6:	459c      	cmp	ip, r3
   2a2f8:	d107      	bne.n	2a30a <_malloc_r+0x106>
   2a2fa:	e16d      	b.n	2a5d8 <_malloc_r+0x3d4>
   2a2fc:	2a00      	cmp	r2, #0
   2a2fe:	f280 817b 	bge.w	2a5f8 <_malloc_r+0x3f4>
   2a302:	68db      	ldr	r3, [r3, #12]
   2a304:	459c      	cmp	ip, r3
   2a306:	f000 8167 	beq.w	2a5d8 <_malloc_r+0x3d4>
   2a30a:	6859      	ldr	r1, [r3, #4]
   2a30c:	f021 0103 	bic.w	r1, r1, #3
   2a310:	1b8a      	subs	r2, r1, r6
   2a312:	2a0f      	cmp	r2, #15
   2a314:	ddf2      	ble.n	2a2fc <_malloc_r+0xf8>
   2a316:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   2a31a:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2a31e:	9300      	str	r3, [sp, #0]
   2a320:	199c      	adds	r4, r3, r6
   2a322:	4628      	mov	r0, r5
   2a324:	f046 0601 	orr.w	r6, r6, #1
   2a328:	f042 0501 	orr.w	r5, r2, #1
   2a32c:	605e      	str	r6, [r3, #4]
   2a32e:	f8c8 c00c 	str.w	ip, [r8, #12]
   2a332:	f8cc 8008 	str.w	r8, [ip, #8]
   2a336:	617c      	str	r4, [r7, #20]
   2a338:	613c      	str	r4, [r7, #16]
   2a33a:	f8c4 e00c 	str.w	lr, [r4, #12]
   2a33e:	f8c4 e008 	str.w	lr, [r4, #8]
   2a342:	6065      	str	r5, [r4, #4]
   2a344:	505a      	str	r2, [r3, r1]
   2a346:	f000 fb0b 	bl	2a960 <__malloc_unlock>
   2a34a:	9b00      	ldr	r3, [sp, #0]
   2a34c:	f103 0408 	add.w	r4, r3, #8
   2a350:	e01e      	b.n	2a390 <_malloc_r+0x18c>
   2a352:	2910      	cmp	r1, #16
   2a354:	d820      	bhi.n	2a398 <_malloc_r+0x194>
   2a356:	f000 fafd 	bl	2a954 <__malloc_lock>
   2a35a:	2610      	movs	r6, #16
   2a35c:	2318      	movs	r3, #24
   2a35e:	2002      	movs	r0, #2
   2a360:	4f79      	ldr	r7, [pc, #484]	; (2a548 <_malloc_r+0x344>)
   2a362:	443b      	add	r3, r7
   2a364:	f1a3 0208 	sub.w	r2, r3, #8
   2a368:	685c      	ldr	r4, [r3, #4]
   2a36a:	4294      	cmp	r4, r2
   2a36c:	f000 813d 	beq.w	2a5ea <_malloc_r+0x3e6>
   2a370:	6863      	ldr	r3, [r4, #4]
   2a372:	68e1      	ldr	r1, [r4, #12]
   2a374:	68a6      	ldr	r6, [r4, #8]
   2a376:	f023 0303 	bic.w	r3, r3, #3
   2a37a:	4423      	add	r3, r4
   2a37c:	4628      	mov	r0, r5
   2a37e:	685a      	ldr	r2, [r3, #4]
   2a380:	60f1      	str	r1, [r6, #12]
   2a382:	f042 0201 	orr.w	r2, r2, #1
   2a386:	608e      	str	r6, [r1, #8]
   2a388:	605a      	str	r2, [r3, #4]
   2a38a:	f000 fae9 	bl	2a960 <__malloc_unlock>
   2a38e:	3408      	adds	r4, #8
   2a390:	4620      	mov	r0, r4
   2a392:	b003      	add	sp, #12
   2a394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a398:	2400      	movs	r4, #0
   2a39a:	230c      	movs	r3, #12
   2a39c:	4620      	mov	r0, r4
   2a39e:	602b      	str	r3, [r5, #0]
   2a3a0:	b003      	add	sp, #12
   2a3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3a6:	2040      	movs	r0, #64	; 0x40
   2a3a8:	f44f 7300 	mov.w	r3, #512	; 0x200
   2a3ac:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   2a3b0:	e74a      	b.n	2a248 <_malloc_r+0x44>
   2a3b2:	4423      	add	r3, r4
   2a3b4:	68e1      	ldr	r1, [r4, #12]
   2a3b6:	685a      	ldr	r2, [r3, #4]
   2a3b8:	68a6      	ldr	r6, [r4, #8]
   2a3ba:	f042 0201 	orr.w	r2, r2, #1
   2a3be:	60f1      	str	r1, [r6, #12]
   2a3c0:	4628      	mov	r0, r5
   2a3c2:	608e      	str	r6, [r1, #8]
   2a3c4:	605a      	str	r2, [r3, #4]
   2a3c6:	f000 facb 	bl	2a960 <__malloc_unlock>
   2a3ca:	3408      	adds	r4, #8
   2a3cc:	4620      	mov	r0, r4
   2a3ce:	b003      	add	sp, #12
   2a3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3d4:	4423      	add	r3, r4
   2a3d6:	4628      	mov	r0, r5
   2a3d8:	685a      	ldr	r2, [r3, #4]
   2a3da:	f042 0201 	orr.w	r2, r2, #1
   2a3de:	605a      	str	r2, [r3, #4]
   2a3e0:	f000 fabe 	bl	2a960 <__malloc_unlock>
   2a3e4:	3408      	adds	r4, #8
   2a3e6:	4620      	mov	r0, r4
   2a3e8:	b003      	add	sp, #12
   2a3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3ee:	68bc      	ldr	r4, [r7, #8]
   2a3f0:	6863      	ldr	r3, [r4, #4]
   2a3f2:	f023 0803 	bic.w	r8, r3, #3
   2a3f6:	45b0      	cmp	r8, r6
   2a3f8:	d304      	bcc.n	2a404 <_malloc_r+0x200>
   2a3fa:	eba8 0306 	sub.w	r3, r8, r6
   2a3fe:	2b0f      	cmp	r3, #15
   2a400:	f300 8085 	bgt.w	2a50e <_malloc_r+0x30a>
   2a404:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2a560 <_malloc_r+0x35c>
   2a408:	4b50      	ldr	r3, [pc, #320]	; (2a54c <_malloc_r+0x348>)
   2a40a:	f8d9 2000 	ldr.w	r2, [r9]
   2a40e:	681b      	ldr	r3, [r3, #0]
   2a410:	3201      	adds	r2, #1
   2a412:	4433      	add	r3, r6
   2a414:	eb04 0a08 	add.w	sl, r4, r8
   2a418:	f000 8155 	beq.w	2a6c6 <_malloc_r+0x4c2>
   2a41c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   2a420:	330f      	adds	r3, #15
   2a422:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   2a426:	f02b 0b0f 	bic.w	fp, fp, #15
   2a42a:	4659      	mov	r1, fp
   2a42c:	4628      	mov	r0, r5
   2a42e:	f000 fabd 	bl	2a9ac <_sbrk_r>
   2a432:	1c41      	adds	r1, r0, #1
   2a434:	4602      	mov	r2, r0
   2a436:	f000 80fc 	beq.w	2a632 <_malloc_r+0x42e>
   2a43a:	4582      	cmp	sl, r0
   2a43c:	f200 80f7 	bhi.w	2a62e <_malloc_r+0x42a>
   2a440:	4b43      	ldr	r3, [pc, #268]	; (2a550 <_malloc_r+0x34c>)
   2a442:	6819      	ldr	r1, [r3, #0]
   2a444:	4459      	add	r1, fp
   2a446:	6019      	str	r1, [r3, #0]
   2a448:	f000 814d 	beq.w	2a6e6 <_malloc_r+0x4e2>
   2a44c:	f8d9 0000 	ldr.w	r0, [r9]
   2a450:	3001      	adds	r0, #1
   2a452:	bf1b      	ittet	ne
   2a454:	eba2 0a0a 	subne.w	sl, r2, sl
   2a458:	4451      	addne	r1, sl
   2a45a:	f8c9 2000 	streq.w	r2, [r9]
   2a45e:	6019      	strne	r1, [r3, #0]
   2a460:	f012 0107 	ands.w	r1, r2, #7
   2a464:	f000 8115 	beq.w	2a692 <_malloc_r+0x48e>
   2a468:	f1c1 0008 	rsb	r0, r1, #8
   2a46c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   2a470:	4402      	add	r2, r0
   2a472:	3108      	adds	r1, #8
   2a474:	eb02 090b 	add.w	r9, r2, fp
   2a478:	f3c9 090b 	ubfx	r9, r9, #0, #12
   2a47c:	eba1 0909 	sub.w	r9, r1, r9
   2a480:	4649      	mov	r1, r9
   2a482:	4628      	mov	r0, r5
   2a484:	9301      	str	r3, [sp, #4]
   2a486:	9200      	str	r2, [sp, #0]
   2a488:	f000 fa90 	bl	2a9ac <_sbrk_r>
   2a48c:	1c43      	adds	r3, r0, #1
   2a48e:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2a492:	f000 8143 	beq.w	2a71c <_malloc_r+0x518>
   2a496:	1a80      	subs	r0, r0, r2
   2a498:	4448      	add	r0, r9
   2a49a:	f040 0001 	orr.w	r0, r0, #1
   2a49e:	6819      	ldr	r1, [r3, #0]
   2a4a0:	60ba      	str	r2, [r7, #8]
   2a4a2:	4449      	add	r1, r9
   2a4a4:	42bc      	cmp	r4, r7
   2a4a6:	6050      	str	r0, [r2, #4]
   2a4a8:	6019      	str	r1, [r3, #0]
   2a4aa:	d017      	beq.n	2a4dc <_malloc_r+0x2d8>
   2a4ac:	f1b8 0f0f 	cmp.w	r8, #15
   2a4b0:	f240 80fb 	bls.w	2a6aa <_malloc_r+0x4a6>
   2a4b4:	6860      	ldr	r0, [r4, #4]
   2a4b6:	f1a8 020c 	sub.w	r2, r8, #12
   2a4ba:	f022 0207 	bic.w	r2, r2, #7
   2a4be:	eb04 0e02 	add.w	lr, r4, r2
   2a4c2:	f000 0001 	and.w	r0, r0, #1
   2a4c6:	f04f 0c05 	mov.w	ip, #5
   2a4ca:	4310      	orrs	r0, r2
   2a4cc:	2a0f      	cmp	r2, #15
   2a4ce:	6060      	str	r0, [r4, #4]
   2a4d0:	f8ce c004 	str.w	ip, [lr, #4]
   2a4d4:	f8ce c008 	str.w	ip, [lr, #8]
   2a4d8:	f200 8117 	bhi.w	2a70a <_malloc_r+0x506>
   2a4dc:	4b1d      	ldr	r3, [pc, #116]	; (2a554 <_malloc_r+0x350>)
   2a4de:	68bc      	ldr	r4, [r7, #8]
   2a4e0:	681a      	ldr	r2, [r3, #0]
   2a4e2:	4291      	cmp	r1, r2
   2a4e4:	bf88      	it	hi
   2a4e6:	6019      	strhi	r1, [r3, #0]
   2a4e8:	4b1b      	ldr	r3, [pc, #108]	; (2a558 <_malloc_r+0x354>)
   2a4ea:	681a      	ldr	r2, [r3, #0]
   2a4ec:	4291      	cmp	r1, r2
   2a4ee:	6862      	ldr	r2, [r4, #4]
   2a4f0:	bf88      	it	hi
   2a4f2:	6019      	strhi	r1, [r3, #0]
   2a4f4:	f022 0203 	bic.w	r2, r2, #3
   2a4f8:	4296      	cmp	r6, r2
   2a4fa:	eba2 0306 	sub.w	r3, r2, r6
   2a4fe:	d801      	bhi.n	2a504 <_malloc_r+0x300>
   2a500:	2b0f      	cmp	r3, #15
   2a502:	dc04      	bgt.n	2a50e <_malloc_r+0x30a>
   2a504:	4628      	mov	r0, r5
   2a506:	f000 fa2b 	bl	2a960 <__malloc_unlock>
   2a50a:	2400      	movs	r4, #0
   2a50c:	e740      	b.n	2a390 <_malloc_r+0x18c>
   2a50e:	19a2      	adds	r2, r4, r6
   2a510:	f043 0301 	orr.w	r3, r3, #1
   2a514:	f046 0601 	orr.w	r6, r6, #1
   2a518:	6066      	str	r6, [r4, #4]
   2a51a:	4628      	mov	r0, r5
   2a51c:	60ba      	str	r2, [r7, #8]
   2a51e:	6053      	str	r3, [r2, #4]
   2a520:	f000 fa1e 	bl	2a960 <__malloc_unlock>
   2a524:	3408      	adds	r4, #8
   2a526:	4620      	mov	r0, r4
   2a528:	b003      	add	sp, #12
   2a52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a52e:	2b14      	cmp	r3, #20
   2a530:	d971      	bls.n	2a616 <_malloc_r+0x412>
   2a532:	2b54      	cmp	r3, #84	; 0x54
   2a534:	f200 80a3 	bhi.w	2a67e <_malloc_r+0x47a>
   2a538:	0b33      	lsrs	r3, r6, #12
   2a53a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   2a53e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   2a542:	00c3      	lsls	r3, r0, #3
   2a544:	e680      	b.n	2a248 <_malloc_r+0x44>
   2a546:	bf00      	nop
   2a548:	2000d10c 	.word	0x2000d10c
   2a54c:	20002eb8 	.word	0x20002eb8
   2a550:	20002e88 	.word	0x20002e88
   2a554:	20002eb0 	.word	0x20002eb0
   2a558:	20002eb4 	.word	0x20002eb4
   2a55c:	2000d114 	.word	0x2000d114
   2a560:	2000d514 	.word	0x2000d514
   2a564:	0a5a      	lsrs	r2, r3, #9
   2a566:	2a04      	cmp	r2, #4
   2a568:	d95b      	bls.n	2a622 <_malloc_r+0x41e>
   2a56a:	2a14      	cmp	r2, #20
   2a56c:	f200 80ae 	bhi.w	2a6cc <_malloc_r+0x4c8>
   2a570:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   2a574:	00c9      	lsls	r1, r1, #3
   2a576:	325b      	adds	r2, #91	; 0x5b
   2a578:	eb07 0c01 	add.w	ip, r7, r1
   2a57c:	5879      	ldr	r1, [r7, r1]
   2a57e:	f1ac 0c08 	sub.w	ip, ip, #8
   2a582:	458c      	cmp	ip, r1
   2a584:	f000 8088 	beq.w	2a698 <_malloc_r+0x494>
   2a588:	684a      	ldr	r2, [r1, #4]
   2a58a:	f022 0203 	bic.w	r2, r2, #3
   2a58e:	4293      	cmp	r3, r2
   2a590:	d273      	bcs.n	2a67a <_malloc_r+0x476>
   2a592:	6889      	ldr	r1, [r1, #8]
   2a594:	458c      	cmp	ip, r1
   2a596:	d1f7      	bne.n	2a588 <_malloc_r+0x384>
   2a598:	f8dc 200c 	ldr.w	r2, [ip, #12]
   2a59c:	687b      	ldr	r3, [r7, #4]
   2a59e:	60e2      	str	r2, [r4, #12]
   2a5a0:	f8c4 c008 	str.w	ip, [r4, #8]
   2a5a4:	6094      	str	r4, [r2, #8]
   2a5a6:	f8cc 400c 	str.w	r4, [ip, #12]
   2a5aa:	e68f      	b.n	2a2cc <_malloc_r+0xc8>
   2a5ac:	19a1      	adds	r1, r4, r6
   2a5ae:	f046 0c01 	orr.w	ip, r6, #1
   2a5b2:	f042 0601 	orr.w	r6, r2, #1
   2a5b6:	f8c4 c004 	str.w	ip, [r4, #4]
   2a5ba:	4628      	mov	r0, r5
   2a5bc:	6179      	str	r1, [r7, #20]
   2a5be:	6139      	str	r1, [r7, #16]
   2a5c0:	f8c1 e00c 	str.w	lr, [r1, #12]
   2a5c4:	f8c1 e008 	str.w	lr, [r1, #8]
   2a5c8:	604e      	str	r6, [r1, #4]
   2a5ca:	50e2      	str	r2, [r4, r3]
   2a5cc:	f000 f9c8 	bl	2a960 <__malloc_unlock>
   2a5d0:	3408      	adds	r4, #8
   2a5d2:	e6dd      	b.n	2a390 <_malloc_r+0x18c>
   2a5d4:	687b      	ldr	r3, [r7, #4]
   2a5d6:	e679      	b.n	2a2cc <_malloc_r+0xc8>
   2a5d8:	f108 0801 	add.w	r8, r8, #1
   2a5dc:	f018 0f03 	tst.w	r8, #3
   2a5e0:	f10c 0c08 	add.w	ip, ip, #8
   2a5e4:	f47f ae85 	bne.w	2a2f2 <_malloc_r+0xee>
   2a5e8:	e02d      	b.n	2a646 <_malloc_r+0x442>
   2a5ea:	68dc      	ldr	r4, [r3, #12]
   2a5ec:	42a3      	cmp	r3, r4
   2a5ee:	bf08      	it	eq
   2a5f0:	3002      	addeq	r0, #2
   2a5f2:	f43f ae3e 	beq.w	2a272 <_malloc_r+0x6e>
   2a5f6:	e6bb      	b.n	2a370 <_malloc_r+0x16c>
   2a5f8:	4419      	add	r1, r3
   2a5fa:	461c      	mov	r4, r3
   2a5fc:	684a      	ldr	r2, [r1, #4]
   2a5fe:	68db      	ldr	r3, [r3, #12]
   2a600:	f854 6f08 	ldr.w	r6, [r4, #8]!
   2a604:	f042 0201 	orr.w	r2, r2, #1
   2a608:	604a      	str	r2, [r1, #4]
   2a60a:	4628      	mov	r0, r5
   2a60c:	60f3      	str	r3, [r6, #12]
   2a60e:	609e      	str	r6, [r3, #8]
   2a610:	f000 f9a6 	bl	2a960 <__malloc_unlock>
   2a614:	e6bc      	b.n	2a390 <_malloc_r+0x18c>
   2a616:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2a61a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   2a61e:	00c3      	lsls	r3, r0, #3
   2a620:	e612      	b.n	2a248 <_malloc_r+0x44>
   2a622:	099a      	lsrs	r2, r3, #6
   2a624:	f102 0139 	add.w	r1, r2, #57	; 0x39
   2a628:	00c9      	lsls	r1, r1, #3
   2a62a:	3238      	adds	r2, #56	; 0x38
   2a62c:	e7a4      	b.n	2a578 <_malloc_r+0x374>
   2a62e:	42bc      	cmp	r4, r7
   2a630:	d054      	beq.n	2a6dc <_malloc_r+0x4d8>
   2a632:	68bc      	ldr	r4, [r7, #8]
   2a634:	6862      	ldr	r2, [r4, #4]
   2a636:	f022 0203 	bic.w	r2, r2, #3
   2a63a:	e75d      	b.n	2a4f8 <_malloc_r+0x2f4>
   2a63c:	f859 3908 	ldr.w	r3, [r9], #-8
   2a640:	4599      	cmp	r9, r3
   2a642:	f040 8086 	bne.w	2a752 <_malloc_r+0x54e>
   2a646:	f010 0f03 	tst.w	r0, #3
   2a64a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   2a64e:	d1f5      	bne.n	2a63c <_malloc_r+0x438>
   2a650:	687b      	ldr	r3, [r7, #4]
   2a652:	ea23 0304 	bic.w	r3, r3, r4
   2a656:	607b      	str	r3, [r7, #4]
   2a658:	0064      	lsls	r4, r4, #1
   2a65a:	429c      	cmp	r4, r3
   2a65c:	f63f aec7 	bhi.w	2a3ee <_malloc_r+0x1ea>
   2a660:	2c00      	cmp	r4, #0
   2a662:	f43f aec4 	beq.w	2a3ee <_malloc_r+0x1ea>
   2a666:	421c      	tst	r4, r3
   2a668:	4640      	mov	r0, r8
   2a66a:	f47f ae3e 	bne.w	2a2ea <_malloc_r+0xe6>
   2a66e:	0064      	lsls	r4, r4, #1
   2a670:	421c      	tst	r4, r3
   2a672:	f100 0004 	add.w	r0, r0, #4
   2a676:	d0fa      	beq.n	2a66e <_malloc_r+0x46a>
   2a678:	e637      	b.n	2a2ea <_malloc_r+0xe6>
   2a67a:	468c      	mov	ip, r1
   2a67c:	e78c      	b.n	2a598 <_malloc_r+0x394>
   2a67e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2a682:	d815      	bhi.n	2a6b0 <_malloc_r+0x4ac>
   2a684:	0bf3      	lsrs	r3, r6, #15
   2a686:	f103 0078 	add.w	r0, r3, #120	; 0x78
   2a68a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   2a68e:	00c3      	lsls	r3, r0, #3
   2a690:	e5da      	b.n	2a248 <_malloc_r+0x44>
   2a692:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2a696:	e6ed      	b.n	2a474 <_malloc_r+0x270>
   2a698:	687b      	ldr	r3, [r7, #4]
   2a69a:	1092      	asrs	r2, r2, #2
   2a69c:	2101      	movs	r1, #1
   2a69e:	fa01 f202 	lsl.w	r2, r1, r2
   2a6a2:	4313      	orrs	r3, r2
   2a6a4:	607b      	str	r3, [r7, #4]
   2a6a6:	4662      	mov	r2, ip
   2a6a8:	e779      	b.n	2a59e <_malloc_r+0x39a>
   2a6aa:	2301      	movs	r3, #1
   2a6ac:	6053      	str	r3, [r2, #4]
   2a6ae:	e729      	b.n	2a504 <_malloc_r+0x300>
   2a6b0:	f240 5254 	movw	r2, #1364	; 0x554
   2a6b4:	4293      	cmp	r3, r2
   2a6b6:	d822      	bhi.n	2a6fe <_malloc_r+0x4fa>
   2a6b8:	0cb3      	lsrs	r3, r6, #18
   2a6ba:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   2a6be:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   2a6c2:	00c3      	lsls	r3, r0, #3
   2a6c4:	e5c0      	b.n	2a248 <_malloc_r+0x44>
   2a6c6:	f103 0b10 	add.w	fp, r3, #16
   2a6ca:	e6ae      	b.n	2a42a <_malloc_r+0x226>
   2a6cc:	2a54      	cmp	r2, #84	; 0x54
   2a6ce:	d829      	bhi.n	2a724 <_malloc_r+0x520>
   2a6d0:	0b1a      	lsrs	r2, r3, #12
   2a6d2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   2a6d6:	00c9      	lsls	r1, r1, #3
   2a6d8:	326e      	adds	r2, #110	; 0x6e
   2a6da:	e74d      	b.n	2a578 <_malloc_r+0x374>
   2a6dc:	4b20      	ldr	r3, [pc, #128]	; (2a760 <_malloc_r+0x55c>)
   2a6de:	6819      	ldr	r1, [r3, #0]
   2a6e0:	4459      	add	r1, fp
   2a6e2:	6019      	str	r1, [r3, #0]
   2a6e4:	e6b2      	b.n	2a44c <_malloc_r+0x248>
   2a6e6:	f3ca 000b 	ubfx	r0, sl, #0, #12
   2a6ea:	2800      	cmp	r0, #0
   2a6ec:	f47f aeae 	bne.w	2a44c <_malloc_r+0x248>
   2a6f0:	eb08 030b 	add.w	r3, r8, fp
   2a6f4:	68ba      	ldr	r2, [r7, #8]
   2a6f6:	f043 0301 	orr.w	r3, r3, #1
   2a6fa:	6053      	str	r3, [r2, #4]
   2a6fc:	e6ee      	b.n	2a4dc <_malloc_r+0x2d8>
   2a6fe:	207f      	movs	r0, #127	; 0x7f
   2a700:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2a704:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   2a708:	e59e      	b.n	2a248 <_malloc_r+0x44>
   2a70a:	f104 0108 	add.w	r1, r4, #8
   2a70e:	4628      	mov	r0, r5
   2a710:	9300      	str	r3, [sp, #0]
   2a712:	f003 f943 	bl	2d99c <_free_r>
   2a716:	9b00      	ldr	r3, [sp, #0]
   2a718:	6819      	ldr	r1, [r3, #0]
   2a71a:	e6df      	b.n	2a4dc <_malloc_r+0x2d8>
   2a71c:	2001      	movs	r0, #1
   2a71e:	f04f 0900 	mov.w	r9, #0
   2a722:	e6bc      	b.n	2a49e <_malloc_r+0x29a>
   2a724:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2a728:	d805      	bhi.n	2a736 <_malloc_r+0x532>
   2a72a:	0bda      	lsrs	r2, r3, #15
   2a72c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   2a730:	00c9      	lsls	r1, r1, #3
   2a732:	3277      	adds	r2, #119	; 0x77
   2a734:	e720      	b.n	2a578 <_malloc_r+0x374>
   2a736:	f240 5154 	movw	r1, #1364	; 0x554
   2a73a:	428a      	cmp	r2, r1
   2a73c:	d805      	bhi.n	2a74a <_malloc_r+0x546>
   2a73e:	0c9a      	lsrs	r2, r3, #18
   2a740:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   2a744:	00c9      	lsls	r1, r1, #3
   2a746:	327c      	adds	r2, #124	; 0x7c
   2a748:	e716      	b.n	2a578 <_malloc_r+0x374>
   2a74a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   2a74e:	227e      	movs	r2, #126	; 0x7e
   2a750:	e712      	b.n	2a578 <_malloc_r+0x374>
   2a752:	687b      	ldr	r3, [r7, #4]
   2a754:	e780      	b.n	2a658 <_malloc_r+0x454>
   2a756:	08f0      	lsrs	r0, r6, #3
   2a758:	f106 0308 	add.w	r3, r6, #8
   2a75c:	e600      	b.n	2a360 <_malloc_r+0x15c>
   2a75e:	bf00      	nop
   2a760:	20002e88 	.word	0x20002e88

0002a764 <__ascii_mbtowc>:
   2a764:	b082      	sub	sp, #8
   2a766:	b149      	cbz	r1, 2a77c <__ascii_mbtowc+0x18>
   2a768:	b15a      	cbz	r2, 2a782 <__ascii_mbtowc+0x1e>
   2a76a:	b16b      	cbz	r3, 2a788 <__ascii_mbtowc+0x24>
   2a76c:	7813      	ldrb	r3, [r2, #0]
   2a76e:	600b      	str	r3, [r1, #0]
   2a770:	7812      	ldrb	r2, [r2, #0]
   2a772:	1c10      	adds	r0, r2, #0
   2a774:	bf18      	it	ne
   2a776:	2001      	movne	r0, #1
   2a778:	b002      	add	sp, #8
   2a77a:	4770      	bx	lr
   2a77c:	a901      	add	r1, sp, #4
   2a77e:	2a00      	cmp	r2, #0
   2a780:	d1f3      	bne.n	2a76a <__ascii_mbtowc+0x6>
   2a782:	4610      	mov	r0, r2
   2a784:	b002      	add	sp, #8
   2a786:	4770      	bx	lr
   2a788:	f06f 0001 	mvn.w	r0, #1
   2a78c:	e7f4      	b.n	2a778 <__ascii_mbtowc+0x14>
   2a78e:	bf00      	nop

0002a790 <memcmp>:
   2a790:	2a03      	cmp	r2, #3
   2a792:	b470      	push	{r4, r5, r6}
   2a794:	d922      	bls.n	2a7dc <memcmp+0x4c>
   2a796:	ea40 0301 	orr.w	r3, r0, r1
   2a79a:	079b      	lsls	r3, r3, #30
   2a79c:	d011      	beq.n	2a7c2 <memcmp+0x32>
   2a79e:	7803      	ldrb	r3, [r0, #0]
   2a7a0:	780c      	ldrb	r4, [r1, #0]
   2a7a2:	42a3      	cmp	r3, r4
   2a7a4:	d11d      	bne.n	2a7e2 <memcmp+0x52>
   2a7a6:	440a      	add	r2, r1
   2a7a8:	3101      	adds	r1, #1
   2a7aa:	e005      	b.n	2a7b8 <memcmp+0x28>
   2a7ac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2a7b0:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a7b4:	42a3      	cmp	r3, r4
   2a7b6:	d114      	bne.n	2a7e2 <memcmp+0x52>
   2a7b8:	4291      	cmp	r1, r2
   2a7ba:	d1f7      	bne.n	2a7ac <memcmp+0x1c>
   2a7bc:	2000      	movs	r0, #0
   2a7be:	bc70      	pop	{r4, r5, r6}
   2a7c0:	4770      	bx	lr
   2a7c2:	680d      	ldr	r5, [r1, #0]
   2a7c4:	6806      	ldr	r6, [r0, #0]
   2a7c6:	42ae      	cmp	r6, r5
   2a7c8:	460c      	mov	r4, r1
   2a7ca:	4603      	mov	r3, r0
   2a7cc:	f101 0104 	add.w	r1, r1, #4
   2a7d0:	f100 0004 	add.w	r0, r0, #4
   2a7d4:	d108      	bne.n	2a7e8 <memcmp+0x58>
   2a7d6:	3a04      	subs	r2, #4
   2a7d8:	2a03      	cmp	r2, #3
   2a7da:	d8f2      	bhi.n	2a7c2 <memcmp+0x32>
   2a7dc:	2a00      	cmp	r2, #0
   2a7de:	d1de      	bne.n	2a79e <memcmp+0xe>
   2a7e0:	e7ec      	b.n	2a7bc <memcmp+0x2c>
   2a7e2:	1b18      	subs	r0, r3, r4
   2a7e4:	bc70      	pop	{r4, r5, r6}
   2a7e6:	4770      	bx	lr
   2a7e8:	4621      	mov	r1, r4
   2a7ea:	4618      	mov	r0, r3
   2a7ec:	e7d7      	b.n	2a79e <memcmp+0xe>
   2a7ee:	bf00      	nop

0002a7f0 <memmove>:
   2a7f0:	4288      	cmp	r0, r1
   2a7f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a7f4:	d90d      	bls.n	2a812 <memmove+0x22>
   2a7f6:	188b      	adds	r3, r1, r2
   2a7f8:	4298      	cmp	r0, r3
   2a7fa:	d20a      	bcs.n	2a812 <memmove+0x22>
   2a7fc:	1884      	adds	r4, r0, r2
   2a7fe:	2a00      	cmp	r2, #0
   2a800:	d051      	beq.n	2a8a6 <memmove+0xb6>
   2a802:	4622      	mov	r2, r4
   2a804:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2a808:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2a80c:	4299      	cmp	r1, r3
   2a80e:	d1f9      	bne.n	2a804 <memmove+0x14>
   2a810:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a812:	2a0f      	cmp	r2, #15
   2a814:	d948      	bls.n	2a8a8 <memmove+0xb8>
   2a816:	ea41 0300 	orr.w	r3, r1, r0
   2a81a:	079b      	lsls	r3, r3, #30
   2a81c:	d146      	bne.n	2a8ac <memmove+0xbc>
   2a81e:	f100 0410 	add.w	r4, r0, #16
   2a822:	f101 0310 	add.w	r3, r1, #16
   2a826:	4615      	mov	r5, r2
   2a828:	f853 6c10 	ldr.w	r6, [r3, #-16]
   2a82c:	f844 6c10 	str.w	r6, [r4, #-16]
   2a830:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   2a834:	f844 6c0c 	str.w	r6, [r4, #-12]
   2a838:	f853 6c08 	ldr.w	r6, [r3, #-8]
   2a83c:	f844 6c08 	str.w	r6, [r4, #-8]
   2a840:	3d10      	subs	r5, #16
   2a842:	f853 6c04 	ldr.w	r6, [r3, #-4]
   2a846:	f844 6c04 	str.w	r6, [r4, #-4]
   2a84a:	2d0f      	cmp	r5, #15
   2a84c:	f103 0310 	add.w	r3, r3, #16
   2a850:	f104 0410 	add.w	r4, r4, #16
   2a854:	d8e8      	bhi.n	2a828 <memmove+0x38>
   2a856:	f1a2 0310 	sub.w	r3, r2, #16
   2a85a:	f023 030f 	bic.w	r3, r3, #15
   2a85e:	f002 0e0f 	and.w	lr, r2, #15
   2a862:	3310      	adds	r3, #16
   2a864:	f1be 0f03 	cmp.w	lr, #3
   2a868:	4419      	add	r1, r3
   2a86a:	4403      	add	r3, r0
   2a86c:	d921      	bls.n	2a8b2 <memmove+0xc2>
   2a86e:	1f1e      	subs	r6, r3, #4
   2a870:	460d      	mov	r5, r1
   2a872:	4674      	mov	r4, lr
   2a874:	3c04      	subs	r4, #4
   2a876:	f855 7b04 	ldr.w	r7, [r5], #4
   2a87a:	f846 7f04 	str.w	r7, [r6, #4]!
   2a87e:	2c03      	cmp	r4, #3
   2a880:	d8f8      	bhi.n	2a874 <memmove+0x84>
   2a882:	f1ae 0404 	sub.w	r4, lr, #4
   2a886:	f024 0403 	bic.w	r4, r4, #3
   2a88a:	3404      	adds	r4, #4
   2a88c:	4421      	add	r1, r4
   2a88e:	4423      	add	r3, r4
   2a890:	f002 0203 	and.w	r2, r2, #3
   2a894:	b162      	cbz	r2, 2a8b0 <memmove+0xc0>
   2a896:	3b01      	subs	r3, #1
   2a898:	440a      	add	r2, r1
   2a89a:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a89e:	f803 4f01 	strb.w	r4, [r3, #1]!
   2a8a2:	428a      	cmp	r2, r1
   2a8a4:	d1f9      	bne.n	2a89a <memmove+0xaa>
   2a8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a8a8:	4603      	mov	r3, r0
   2a8aa:	e7f3      	b.n	2a894 <memmove+0xa4>
   2a8ac:	4603      	mov	r3, r0
   2a8ae:	e7f2      	b.n	2a896 <memmove+0xa6>
   2a8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a8b2:	4672      	mov	r2, lr
   2a8b4:	e7ee      	b.n	2a894 <memmove+0xa4>
   2a8b6:	bf00      	nop

0002a8b8 <memset>:
   2a8b8:	b470      	push	{r4, r5, r6}
   2a8ba:	0786      	lsls	r6, r0, #30
   2a8bc:	d046      	beq.n	2a94c <memset+0x94>
   2a8be:	1e54      	subs	r4, r2, #1
   2a8c0:	2a00      	cmp	r2, #0
   2a8c2:	d041      	beq.n	2a948 <memset+0x90>
   2a8c4:	b2ca      	uxtb	r2, r1
   2a8c6:	4603      	mov	r3, r0
   2a8c8:	e002      	b.n	2a8d0 <memset+0x18>
   2a8ca:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   2a8ce:	d33b      	bcc.n	2a948 <memset+0x90>
   2a8d0:	f803 2b01 	strb.w	r2, [r3], #1
   2a8d4:	079d      	lsls	r5, r3, #30
   2a8d6:	d1f8      	bne.n	2a8ca <memset+0x12>
   2a8d8:	2c03      	cmp	r4, #3
   2a8da:	d92e      	bls.n	2a93a <memset+0x82>
   2a8dc:	b2cd      	uxtb	r5, r1
   2a8de:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   2a8e2:	2c0f      	cmp	r4, #15
   2a8e4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2a8e8:	d919      	bls.n	2a91e <memset+0x66>
   2a8ea:	f103 0210 	add.w	r2, r3, #16
   2a8ee:	4626      	mov	r6, r4
   2a8f0:	3e10      	subs	r6, #16
   2a8f2:	2e0f      	cmp	r6, #15
   2a8f4:	f842 5c10 	str.w	r5, [r2, #-16]
   2a8f8:	f842 5c0c 	str.w	r5, [r2, #-12]
   2a8fc:	f842 5c08 	str.w	r5, [r2, #-8]
   2a900:	f842 5c04 	str.w	r5, [r2, #-4]
   2a904:	f102 0210 	add.w	r2, r2, #16
   2a908:	d8f2      	bhi.n	2a8f0 <memset+0x38>
   2a90a:	f1a4 0210 	sub.w	r2, r4, #16
   2a90e:	f022 020f 	bic.w	r2, r2, #15
   2a912:	f004 040f 	and.w	r4, r4, #15
   2a916:	3210      	adds	r2, #16
   2a918:	2c03      	cmp	r4, #3
   2a91a:	4413      	add	r3, r2
   2a91c:	d90d      	bls.n	2a93a <memset+0x82>
   2a91e:	461e      	mov	r6, r3
   2a920:	4622      	mov	r2, r4
   2a922:	3a04      	subs	r2, #4
   2a924:	2a03      	cmp	r2, #3
   2a926:	f846 5b04 	str.w	r5, [r6], #4
   2a92a:	d8fa      	bhi.n	2a922 <memset+0x6a>
   2a92c:	1f22      	subs	r2, r4, #4
   2a92e:	f022 0203 	bic.w	r2, r2, #3
   2a932:	3204      	adds	r2, #4
   2a934:	4413      	add	r3, r2
   2a936:	f004 0403 	and.w	r4, r4, #3
   2a93a:	b12c      	cbz	r4, 2a948 <memset+0x90>
   2a93c:	b2c9      	uxtb	r1, r1
   2a93e:	441c      	add	r4, r3
   2a940:	f803 1b01 	strb.w	r1, [r3], #1
   2a944:	429c      	cmp	r4, r3
   2a946:	d1fb      	bne.n	2a940 <memset+0x88>
   2a948:	bc70      	pop	{r4, r5, r6}
   2a94a:	4770      	bx	lr
   2a94c:	4614      	mov	r4, r2
   2a94e:	4603      	mov	r3, r0
   2a950:	e7c2      	b.n	2a8d8 <memset+0x20>
   2a952:	bf00      	nop

0002a954 <__malloc_lock>:
   2a954:	4801      	ldr	r0, [pc, #4]	; (2a95c <__malloc_lock+0x8>)
   2a956:	f003 b915 	b.w	2db84 <__retarget_lock_acquire_recursive>
   2a95a:	bf00      	nop
   2a95c:	200031e0 	.word	0x200031e0

0002a960 <__malloc_unlock>:
   2a960:	4801      	ldr	r0, [pc, #4]	; (2a968 <__malloc_unlock+0x8>)
   2a962:	f003 b911 	b.w	2db88 <__retarget_lock_release_recursive>
   2a966:	bf00      	nop
   2a968:	200031e0 	.word	0x200031e0

0002a96c <rand>:
   2a96c:	b410      	push	{r4}
   2a96e:	4b0c      	ldr	r3, [pc, #48]	; (2a9a0 <rand+0x34>)
   2a970:	480c      	ldr	r0, [pc, #48]	; (2a9a4 <rand+0x38>)
   2a972:	6819      	ldr	r1, [r3, #0]
   2a974:	4c0c      	ldr	r4, [pc, #48]	; (2a9a8 <rand+0x3c>)
   2a976:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   2a97a:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   2a97e:	fb00 f002 	mul.w	r0, r0, r2
   2a982:	fb04 0003 	mla	r0, r4, r3, r0
   2a986:	fba2 2304 	umull	r2, r3, r2, r4
   2a98a:	4403      	add	r3, r0
   2a98c:	3201      	adds	r2, #1
   2a98e:	f143 0300 	adc.w	r3, r3, #0
   2a992:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   2a996:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   2a99a:	bc10      	pop	{r4}
   2a99c:	4770      	bx	lr
   2a99e:	bf00      	nop
   2a9a0:	2000cb70 	.word	0x2000cb70
   2a9a4:	5851f42d 	.word	0x5851f42d
   2a9a8:	4c957f2d 	.word	0x4c957f2d

0002a9ac <_sbrk_r>:
   2a9ac:	b538      	push	{r3, r4, r5, lr}
   2a9ae:	4c07      	ldr	r4, [pc, #28]	; (2a9cc <_sbrk_r+0x20>)
   2a9b0:	2300      	movs	r3, #0
   2a9b2:	4605      	mov	r5, r0
   2a9b4:	4608      	mov	r0, r1
   2a9b6:	6023      	str	r3, [r4, #0]
   2a9b8:	f7d7 f80c 	bl	19d4 <_sbrk>
   2a9bc:	1c43      	adds	r3, r0, #1
   2a9be:	d000      	beq.n	2a9c2 <_sbrk_r+0x16>
   2a9c0:	bd38      	pop	{r3, r4, r5, pc}
   2a9c2:	6823      	ldr	r3, [r4, #0]
   2a9c4:	2b00      	cmp	r3, #0
   2a9c6:	d0fb      	beq.n	2a9c0 <_sbrk_r+0x14>
   2a9c8:	602b      	str	r3, [r5, #0]
   2a9ca:	bd38      	pop	{r3, r4, r5, pc}
   2a9cc:	200031f4 	.word	0x200031f4

0002a9d0 <snprintf>:
   2a9d0:	b40c      	push	{r2, r3}
   2a9d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a9d4:	4b23      	ldr	r3, [pc, #140]	; (2aa64 <snprintf+0x94>)
   2a9d6:	1e0c      	subs	r4, r1, #0
   2a9d8:	b09d      	sub	sp, #116	; 0x74
   2a9da:	681d      	ldr	r5, [r3, #0]
   2a9dc:	db3d      	blt.n	2aa5a <snprintf+0x8a>
   2a9de:	f44f 7302 	mov.w	r3, #520	; 0x208
   2a9e2:	9002      	str	r0, [sp, #8]
   2a9e4:	9006      	str	r0, [sp, #24]
   2a9e6:	f8ad 3014 	strh.w	r3, [sp, #20]
   2a9ea:	ae23      	add	r6, sp, #140	; 0x8c
   2a9ec:	d017      	beq.n	2aa1e <snprintf+0x4e>
   2a9ee:	3c01      	subs	r4, #1
   2a9f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2a9f2:	9404      	str	r4, [sp, #16]
   2a9f4:	4633      	mov	r3, r6
   2a9f6:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2a9fa:	a902      	add	r1, sp, #8
   2a9fc:	4628      	mov	r0, r5
   2a9fe:	9407      	str	r4, [sp, #28]
   2aa00:	9601      	str	r6, [sp, #4]
   2aa02:	f8ad 7016 	strh.w	r7, [sp, #22]
   2aa06:	f000 fd7f 	bl	2b508 <_svfprintf_r>
   2aa0a:	1c42      	adds	r2, r0, #1
   2aa0c:	db1b      	blt.n	2aa46 <snprintf+0x76>
   2aa0e:	9b02      	ldr	r3, [sp, #8]
   2aa10:	2200      	movs	r2, #0
   2aa12:	701a      	strb	r2, [r3, #0]
   2aa14:	b01d      	add	sp, #116	; 0x74
   2aa16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2aa1a:	b002      	add	sp, #8
   2aa1c:	4770      	bx	lr
   2aa1e:	4633      	mov	r3, r6
   2aa20:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2aa24:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2aa26:	9404      	str	r4, [sp, #16]
   2aa28:	a902      	add	r1, sp, #8
   2aa2a:	4628      	mov	r0, r5
   2aa2c:	9407      	str	r4, [sp, #28]
   2aa2e:	9601      	str	r6, [sp, #4]
   2aa30:	f8ad 7016 	strh.w	r7, [sp, #22]
   2aa34:	f000 fd68 	bl	2b508 <_svfprintf_r>
   2aa38:	1c43      	adds	r3, r0, #1
   2aa3a:	db07      	blt.n	2aa4c <snprintf+0x7c>
   2aa3c:	b01d      	add	sp, #116	; 0x74
   2aa3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2aa42:	b002      	add	sp, #8
   2aa44:	4770      	bx	lr
   2aa46:	238b      	movs	r3, #139	; 0x8b
   2aa48:	602b      	str	r3, [r5, #0]
   2aa4a:	e7e0      	b.n	2aa0e <snprintf+0x3e>
   2aa4c:	238b      	movs	r3, #139	; 0x8b
   2aa4e:	602b      	str	r3, [r5, #0]
   2aa50:	b01d      	add	sp, #116	; 0x74
   2aa52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2aa56:	b002      	add	sp, #8
   2aa58:	4770      	bx	lr
   2aa5a:	238b      	movs	r3, #139	; 0x8b
   2aa5c:	602b      	str	r3, [r5, #0]
   2aa5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2aa62:	e7eb      	b.n	2aa3c <snprintf+0x6c>
   2aa64:	2000cb70 	.word	0x2000cb70

0002aa68 <strcat>:
   2aa68:	0783      	lsls	r3, r0, #30
   2aa6a:	b510      	push	{r4, lr}
   2aa6c:	4604      	mov	r4, r0
   2aa6e:	d110      	bne.n	2aa92 <strcat+0x2a>
   2aa70:	6802      	ldr	r2, [r0, #0]
   2aa72:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2aa76:	ea23 0302 	bic.w	r3, r3, r2
   2aa7a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2aa7e:	d108      	bne.n	2aa92 <strcat+0x2a>
   2aa80:	f850 2f04 	ldr.w	r2, [r0, #4]!
   2aa84:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2aa88:	ea23 0302 	bic.w	r3, r3, r2
   2aa8c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2aa90:	d0f6      	beq.n	2aa80 <strcat+0x18>
   2aa92:	7803      	ldrb	r3, [r0, #0]
   2aa94:	b11b      	cbz	r3, 2aa9e <strcat+0x36>
   2aa96:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2aa9a:	2b00      	cmp	r3, #0
   2aa9c:	d1fb      	bne.n	2aa96 <strcat+0x2e>
   2aa9e:	f000 f877 	bl	2ab90 <strcpy>
   2aaa2:	4620      	mov	r0, r4
   2aaa4:	bd10      	pop	{r4, pc}
   2aaa6:	bf00      	nop

0002aaa8 <strchr>:
   2aaa8:	b2c9      	uxtb	r1, r1
   2aaaa:	2900      	cmp	r1, #0
   2aaac:	d041      	beq.n	2ab32 <strchr+0x8a>
   2aaae:	0782      	lsls	r2, r0, #30
   2aab0:	b4f0      	push	{r4, r5, r6, r7}
   2aab2:	d067      	beq.n	2ab84 <strchr+0xdc>
   2aab4:	7803      	ldrb	r3, [r0, #0]
   2aab6:	2b00      	cmp	r3, #0
   2aab8:	d068      	beq.n	2ab8c <strchr+0xe4>
   2aaba:	4299      	cmp	r1, r3
   2aabc:	d037      	beq.n	2ab2e <strchr+0x86>
   2aabe:	1c43      	adds	r3, r0, #1
   2aac0:	e004      	b.n	2aacc <strchr+0x24>
   2aac2:	f813 0b01 	ldrb.w	r0, [r3], #1
   2aac6:	b390      	cbz	r0, 2ab2e <strchr+0x86>
   2aac8:	4281      	cmp	r1, r0
   2aaca:	d02f      	beq.n	2ab2c <strchr+0x84>
   2aacc:	079a      	lsls	r2, r3, #30
   2aace:	461c      	mov	r4, r3
   2aad0:	d1f7      	bne.n	2aac2 <strchr+0x1a>
   2aad2:	6825      	ldr	r5, [r4, #0]
   2aad4:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
   2aad8:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
   2aadc:	ea83 0605 	eor.w	r6, r3, r5
   2aae0:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
   2aae4:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   2aae8:	ea20 0006 	bic.w	r0, r0, r6
   2aaec:	ea22 0205 	bic.w	r2, r2, r5
   2aaf0:	4302      	orrs	r2, r0
   2aaf2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2aaf6:	d111      	bne.n	2ab1c <strchr+0x74>
   2aaf8:	4620      	mov	r0, r4
   2aafa:	f850 6f04 	ldr.w	r6, [r0, #4]!
   2aafe:	ea83 0706 	eor.w	r7, r3, r6
   2ab02:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
   2ab06:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
   2ab0a:	ea25 0507 	bic.w	r5, r5, r7
   2ab0e:	ea22 0206 	bic.w	r2, r2, r6
   2ab12:	432a      	orrs	r2, r5
   2ab14:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ab18:	d0ef      	beq.n	2aafa <strchr+0x52>
   2ab1a:	4604      	mov	r4, r0
   2ab1c:	7820      	ldrb	r0, [r4, #0]
   2ab1e:	b918      	cbnz	r0, 2ab28 <strchr+0x80>
   2ab20:	e005      	b.n	2ab2e <strchr+0x86>
   2ab22:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2ab26:	b110      	cbz	r0, 2ab2e <strchr+0x86>
   2ab28:	4281      	cmp	r1, r0
   2ab2a:	d1fa      	bne.n	2ab22 <strchr+0x7a>
   2ab2c:	4620      	mov	r0, r4
   2ab2e:	bcf0      	pop	{r4, r5, r6, r7}
   2ab30:	4770      	bx	lr
   2ab32:	0783      	lsls	r3, r0, #30
   2ab34:	d024      	beq.n	2ab80 <strchr+0xd8>
   2ab36:	7803      	ldrb	r3, [r0, #0]
   2ab38:	2b00      	cmp	r3, #0
   2ab3a:	d0f9      	beq.n	2ab30 <strchr+0x88>
   2ab3c:	1c43      	adds	r3, r0, #1
   2ab3e:	e003      	b.n	2ab48 <strchr+0xa0>
   2ab40:	7802      	ldrb	r2, [r0, #0]
   2ab42:	3301      	adds	r3, #1
   2ab44:	2a00      	cmp	r2, #0
   2ab46:	d0f3      	beq.n	2ab30 <strchr+0x88>
   2ab48:	0799      	lsls	r1, r3, #30
   2ab4a:	4618      	mov	r0, r3
   2ab4c:	d1f8      	bne.n	2ab40 <strchr+0x98>
   2ab4e:	6819      	ldr	r1, [r3, #0]
   2ab50:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2ab54:	ea22 0201 	bic.w	r2, r2, r1
   2ab58:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ab5c:	d108      	bne.n	2ab70 <strchr+0xc8>
   2ab5e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2ab62:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2ab66:	ea22 0201 	bic.w	r2, r2, r1
   2ab6a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ab6e:	d0f6      	beq.n	2ab5e <strchr+0xb6>
   2ab70:	781a      	ldrb	r2, [r3, #0]
   2ab72:	4618      	mov	r0, r3
   2ab74:	b142      	cbz	r2, 2ab88 <strchr+0xe0>
   2ab76:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2ab7a:	2b00      	cmp	r3, #0
   2ab7c:	d1fb      	bne.n	2ab76 <strchr+0xce>
   2ab7e:	4770      	bx	lr
   2ab80:	4603      	mov	r3, r0
   2ab82:	e7e4      	b.n	2ab4e <strchr+0xa6>
   2ab84:	4604      	mov	r4, r0
   2ab86:	e7a4      	b.n	2aad2 <strchr+0x2a>
   2ab88:	4618      	mov	r0, r3
   2ab8a:	4770      	bx	lr
   2ab8c:	4618      	mov	r0, r3
   2ab8e:	e7ce      	b.n	2ab2e <strchr+0x86>

0002ab90 <strcpy>:
   2ab90:	ea80 0201 	eor.w	r2, r0, r1
   2ab94:	4684      	mov	ip, r0
   2ab96:	f012 0f03 	tst.w	r2, #3
   2ab9a:	d14f      	bne.n	2ac3c <strcpy+0xac>
   2ab9c:	f011 0f03 	tst.w	r1, #3
   2aba0:	d132      	bne.n	2ac08 <strcpy+0x78>
   2aba2:	f84d 4d04 	str.w	r4, [sp, #-4]!
   2aba6:	f011 0f04 	tst.w	r1, #4
   2abaa:	f851 3b04 	ldr.w	r3, [r1], #4
   2abae:	d00b      	beq.n	2abc8 <strcpy+0x38>
   2abb0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2abb4:	439a      	bics	r2, r3
   2abb6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2abba:	bf04      	itt	eq
   2abbc:	f84c 3b04 	streq.w	r3, [ip], #4
   2abc0:	f851 3b04 	ldreq.w	r3, [r1], #4
   2abc4:	d116      	bne.n	2abf4 <strcpy+0x64>
   2abc6:	bf00      	nop
   2abc8:	f851 4b04 	ldr.w	r4, [r1], #4
   2abcc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2abd0:	439a      	bics	r2, r3
   2abd2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2abd6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   2abda:	d10b      	bne.n	2abf4 <strcpy+0x64>
   2abdc:	f84c 3b04 	str.w	r3, [ip], #4
   2abe0:	43a2      	bics	r2, r4
   2abe2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2abe6:	bf04      	itt	eq
   2abe8:	f851 3b04 	ldreq.w	r3, [r1], #4
   2abec:	f84c 4b04 	streq.w	r4, [ip], #4
   2abf0:	d0ea      	beq.n	2abc8 <strcpy+0x38>
   2abf2:	4623      	mov	r3, r4
   2abf4:	f80c 3b01 	strb.w	r3, [ip], #1
   2abf8:	f013 0fff 	tst.w	r3, #255	; 0xff
   2abfc:	ea4f 2333 	mov.w	r3, r3, ror #8
   2ac00:	d1f8      	bne.n	2abf4 <strcpy+0x64>
   2ac02:	f85d 4b04 	ldr.w	r4, [sp], #4
   2ac06:	4770      	bx	lr
   2ac08:	f011 0f01 	tst.w	r1, #1
   2ac0c:	d006      	beq.n	2ac1c <strcpy+0x8c>
   2ac0e:	f811 2b01 	ldrb.w	r2, [r1], #1
   2ac12:	f80c 2b01 	strb.w	r2, [ip], #1
   2ac16:	2a00      	cmp	r2, #0
   2ac18:	bf08      	it	eq
   2ac1a:	4770      	bxeq	lr
   2ac1c:	f011 0f02 	tst.w	r1, #2
   2ac20:	d0bf      	beq.n	2aba2 <strcpy+0x12>
   2ac22:	f831 2b02 	ldrh.w	r2, [r1], #2
   2ac26:	f012 0fff 	tst.w	r2, #255	; 0xff
   2ac2a:	bf16      	itet	ne
   2ac2c:	f82c 2b02 	strhne.w	r2, [ip], #2
   2ac30:	f88c 2000 	strbeq.w	r2, [ip]
   2ac34:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   2ac38:	d1b3      	bne.n	2aba2 <strcpy+0x12>
   2ac3a:	4770      	bx	lr
   2ac3c:	f811 2b01 	ldrb.w	r2, [r1], #1
   2ac40:	f80c 2b01 	strb.w	r2, [ip], #1
   2ac44:	2a00      	cmp	r2, #0
   2ac46:	d1f9      	bne.n	2ac3c <strcpy+0xac>
   2ac48:	4770      	bx	lr
   2ac4a:	bf00      	nop

0002ac4c <strncmp>:
   2ac4c:	2a00      	cmp	r2, #0
   2ac4e:	d041      	beq.n	2acd4 <strncmp+0x88>
   2ac50:	ea40 0301 	orr.w	r3, r0, r1
   2ac54:	f013 0303 	ands.w	r3, r3, #3
   2ac58:	b4f0      	push	{r4, r5, r6, r7}
   2ac5a:	d125      	bne.n	2aca8 <strncmp+0x5c>
   2ac5c:	2a03      	cmp	r2, #3
   2ac5e:	d923      	bls.n	2aca8 <strncmp+0x5c>
   2ac60:	6804      	ldr	r4, [r0, #0]
   2ac62:	680d      	ldr	r5, [r1, #0]
   2ac64:	42ac      	cmp	r4, r5
   2ac66:	d11f      	bne.n	2aca8 <strncmp+0x5c>
   2ac68:	3a04      	subs	r2, #4
   2ac6a:	d038      	beq.n	2acde <strncmp+0x92>
   2ac6c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   2ac70:	ea25 0404 	bic.w	r4, r5, r4
   2ac74:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2ac78:	d12e      	bne.n	2acd8 <strncmp+0x8c>
   2ac7a:	3004      	adds	r0, #4
   2ac7c:	3104      	adds	r1, #4
   2ac7e:	e00f      	b.n	2aca0 <strncmp+0x54>
   2ac80:	f850 3b04 	ldr.w	r3, [r0], #4
   2ac84:	680e      	ldr	r6, [r1, #0]
   2ac86:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   2ac8a:	42b3      	cmp	r3, r6
   2ac8c:	ea24 0403 	bic.w	r4, r4, r3
   2ac90:	f101 0104 	add.w	r1, r1, #4
   2ac94:	d126      	bne.n	2ace4 <strncmp+0x98>
   2ac96:	3a04      	subs	r2, #4
   2ac98:	d021      	beq.n	2acde <strncmp+0x92>
   2ac9a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2ac9e:	d11b      	bne.n	2acd8 <strncmp+0x8c>
   2aca0:	2a03      	cmp	r2, #3
   2aca2:	4607      	mov	r7, r0
   2aca4:	460d      	mov	r5, r1
   2aca6:	d8eb      	bhi.n	2ac80 <strncmp+0x34>
   2aca8:	7805      	ldrb	r5, [r0, #0]
   2acaa:	780c      	ldrb	r4, [r1, #0]
   2acac:	42ac      	cmp	r4, r5
   2acae:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   2acb2:	d11a      	bne.n	2acea <strncmp+0x9e>
   2acb4:	b183      	cbz	r3, 2acd8 <strncmp+0x8c>
   2acb6:	b914      	cbnz	r4, 2acbe <strncmp+0x72>
   2acb8:	e00e      	b.n	2acd8 <strncmp+0x8c>
   2acba:	b16b      	cbz	r3, 2acd8 <strncmp+0x8c>
   2acbc:	b17a      	cbz	r2, 2acde <strncmp+0x92>
   2acbe:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   2acc2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2acc6:	42a2      	cmp	r2, r4
   2acc8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2accc:	d0f5      	beq.n	2acba <strncmp+0x6e>
   2acce:	1b10      	subs	r0, r2, r4
   2acd0:	bcf0      	pop	{r4, r5, r6, r7}
   2acd2:	4770      	bx	lr
   2acd4:	4610      	mov	r0, r2
   2acd6:	4770      	bx	lr
   2acd8:	2000      	movs	r0, #0
   2acda:	bcf0      	pop	{r4, r5, r6, r7}
   2acdc:	4770      	bx	lr
   2acde:	4610      	mov	r0, r2
   2ace0:	bcf0      	pop	{r4, r5, r6, r7}
   2ace2:	4770      	bx	lr
   2ace4:	4629      	mov	r1, r5
   2ace6:	4638      	mov	r0, r7
   2ace8:	e7de      	b.n	2aca8 <strncmp+0x5c>
   2acea:	462a      	mov	r2, r5
   2acec:	e7ef      	b.n	2acce <strncmp+0x82>
   2acee:	bf00      	nop

0002acf0 <strncpy>:
   2acf0:	ea40 0301 	orr.w	r3, r0, r1
   2acf4:	f013 0f03 	tst.w	r3, #3
   2acf8:	b470      	push	{r4, r5, r6}
   2acfa:	4603      	mov	r3, r0
   2acfc:	d024      	beq.n	2ad48 <strncpy+0x58>
   2acfe:	b1a2      	cbz	r2, 2ad2a <strncpy+0x3a>
   2ad00:	780c      	ldrb	r4, [r1, #0]
   2ad02:	701c      	strb	r4, [r3, #0]
   2ad04:	3a01      	subs	r2, #1
   2ad06:	3301      	adds	r3, #1
   2ad08:	3101      	adds	r1, #1
   2ad0a:	b13c      	cbz	r4, 2ad1c <strncpy+0x2c>
   2ad0c:	b16a      	cbz	r2, 2ad2a <strncpy+0x3a>
   2ad0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   2ad12:	f803 4b01 	strb.w	r4, [r3], #1
   2ad16:	3a01      	subs	r2, #1
   2ad18:	2c00      	cmp	r4, #0
   2ad1a:	d1f7      	bne.n	2ad0c <strncpy+0x1c>
   2ad1c:	b12a      	cbz	r2, 2ad2a <strncpy+0x3a>
   2ad1e:	441a      	add	r2, r3
   2ad20:	2100      	movs	r1, #0
   2ad22:	f803 1b01 	strb.w	r1, [r3], #1
   2ad26:	429a      	cmp	r2, r3
   2ad28:	d1fb      	bne.n	2ad22 <strncpy+0x32>
   2ad2a:	bc70      	pop	{r4, r5, r6}
   2ad2c:	4770      	bx	lr
   2ad2e:	460e      	mov	r6, r1
   2ad30:	f851 5b04 	ldr.w	r5, [r1], #4
   2ad34:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   2ad38:	ea24 0405 	bic.w	r4, r4, r5
   2ad3c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2ad40:	d105      	bne.n	2ad4e <strncpy+0x5e>
   2ad42:	f843 5b04 	str.w	r5, [r3], #4
   2ad46:	3a04      	subs	r2, #4
   2ad48:	2a03      	cmp	r2, #3
   2ad4a:	d8f0      	bhi.n	2ad2e <strncpy+0x3e>
   2ad4c:	e7d7      	b.n	2acfe <strncpy+0xe>
   2ad4e:	4631      	mov	r1, r6
   2ad50:	e7d6      	b.n	2ad00 <strncpy+0x10>
   2ad52:	bf00      	nop

0002ad54 <strrchr>:
   2ad54:	b171      	cbz	r1, 2ad74 <strrchr+0x20>
   2ad56:	b538      	push	{r3, r4, r5, lr}
   2ad58:	4603      	mov	r3, r0
   2ad5a:	460c      	mov	r4, r1
   2ad5c:	2500      	movs	r5, #0
   2ad5e:	e001      	b.n	2ad64 <strrchr+0x10>
   2ad60:	1c43      	adds	r3, r0, #1
   2ad62:	4605      	mov	r5, r0
   2ad64:	4618      	mov	r0, r3
   2ad66:	4621      	mov	r1, r4
   2ad68:	f7ff fe9e 	bl	2aaa8 <strchr>
   2ad6c:	2800      	cmp	r0, #0
   2ad6e:	d1f7      	bne.n	2ad60 <strrchr+0xc>
   2ad70:	4628      	mov	r0, r5
   2ad72:	bd38      	pop	{r3, r4, r5, pc}
   2ad74:	f7ff be98 	b.w	2aaa8 <strchr>

0002ad78 <critical_factorization>:
   2ad78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ad7c:	f04f 0e01 	mov.w	lr, #1
   2ad80:	4674      	mov	r4, lr
   2ad82:	2500      	movs	r5, #0
   2ad84:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2ad88:	192b      	adds	r3, r5, r4
   2ad8a:	428b      	cmp	r3, r1
   2ad8c:	eb00 0706 	add.w	r7, r0, r6
   2ad90:	d20d      	bcs.n	2adae <critical_factorization+0x36>
   2ad92:	5d3f      	ldrb	r7, [r7, r4]
   2ad94:	f810 c003 	ldrb.w	ip, [r0, r3]
   2ad98:	45bc      	cmp	ip, r7
   2ad9a:	d22d      	bcs.n	2adf8 <critical_factorization+0x80>
   2ad9c:	461d      	mov	r5, r3
   2ad9e:	2401      	movs	r4, #1
   2ada0:	eba3 0e06 	sub.w	lr, r3, r6
   2ada4:	192b      	adds	r3, r5, r4
   2ada6:	428b      	cmp	r3, r1
   2ada8:	eb00 0706 	add.w	r7, r0, r6
   2adac:	d3f1      	bcc.n	2ad92 <critical_factorization+0x1a>
   2adae:	f04f 0801 	mov.w	r8, #1
   2adb2:	f8c2 e000 	str.w	lr, [r2]
   2adb6:	4644      	mov	r4, r8
   2adb8:	2500      	movs	r5, #0
   2adba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2adbe:	192b      	adds	r3, r5, r4
   2adc0:	4299      	cmp	r1, r3
   2adc2:	eb00 0e07 	add.w	lr, r0, r7
   2adc6:	d90e      	bls.n	2ade6 <critical_factorization+0x6e>
   2adc8:	f81e e004 	ldrb.w	lr, [lr, r4]
   2adcc:	f810 c003 	ldrb.w	ip, [r0, r3]
   2add0:	45f4      	cmp	ip, lr
   2add2:	d918      	bls.n	2ae06 <critical_factorization+0x8e>
   2add4:	461d      	mov	r5, r3
   2add6:	2401      	movs	r4, #1
   2add8:	eba3 0807 	sub.w	r8, r3, r7
   2addc:	192b      	adds	r3, r5, r4
   2adde:	4299      	cmp	r1, r3
   2ade0:	eb00 0e07 	add.w	lr, r0, r7
   2ade4:	d8f0      	bhi.n	2adc8 <critical_factorization+0x50>
   2ade6:	3701      	adds	r7, #1
   2ade8:	1c70      	adds	r0, r6, #1
   2adea:	4287      	cmp	r7, r0
   2adec:	bf24      	itt	cs
   2adee:	f8c2 8000 	strcs.w	r8, [r2]
   2adf2:	4638      	movcs	r0, r7
   2adf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2adf8:	d00c      	beq.n	2ae14 <critical_factorization+0x9c>
   2adfa:	f04f 0e01 	mov.w	lr, #1
   2adfe:	462e      	mov	r6, r5
   2ae00:	4674      	mov	r4, lr
   2ae02:	4475      	add	r5, lr
   2ae04:	e7c0      	b.n	2ad88 <critical_factorization+0x10>
   2ae06:	d00b      	beq.n	2ae20 <critical_factorization+0xa8>
   2ae08:	f04f 0801 	mov.w	r8, #1
   2ae0c:	462f      	mov	r7, r5
   2ae0e:	4644      	mov	r4, r8
   2ae10:	4445      	add	r5, r8
   2ae12:	e7d4      	b.n	2adbe <critical_factorization+0x46>
   2ae14:	4574      	cmp	r4, lr
   2ae16:	bf12      	itee	ne
   2ae18:	3401      	addne	r4, #1
   2ae1a:	461d      	moveq	r5, r3
   2ae1c:	2401      	moveq	r4, #1
   2ae1e:	e7b3      	b.n	2ad88 <critical_factorization+0x10>
   2ae20:	4544      	cmp	r4, r8
   2ae22:	bf12      	itee	ne
   2ae24:	3401      	addne	r4, #1
   2ae26:	461d      	moveq	r5, r3
   2ae28:	2401      	moveq	r4, #1
   2ae2a:	e7c8      	b.n	2adbe <critical_factorization+0x46>

0002ae2c <two_way_long_needle>:
   2ae2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ae30:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   2ae34:	4616      	mov	r6, r2
   2ae36:	4605      	mov	r5, r0
   2ae38:	468b      	mov	fp, r1
   2ae3a:	4610      	mov	r0, r2
   2ae3c:	4619      	mov	r1, r3
   2ae3e:	aa03      	add	r2, sp, #12
   2ae40:	461c      	mov	r4, r3
   2ae42:	f7ff ff99 	bl	2ad78 <critical_factorization>
   2ae46:	ab03      	add	r3, sp, #12
   2ae48:	4681      	mov	r9, r0
   2ae4a:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
   2ae4e:	f843 4f04 	str.w	r4, [r3, #4]!
   2ae52:	4293      	cmp	r3, r2
   2ae54:	d1fb      	bne.n	2ae4e <two_way_long_needle+0x22>
   2ae56:	b14c      	cbz	r4, 2ae6c <two_way_long_needle+0x40>
   2ae58:	1e63      	subs	r3, r4, #1
   2ae5a:	1e72      	subs	r2, r6, #1
   2ae5c:	a804      	add	r0, sp, #16
   2ae5e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2ae62:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   2ae66:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   2ae6a:	d2f8      	bcs.n	2ae5e <two_way_long_needle+0x32>
   2ae6c:	9903      	ldr	r1, [sp, #12]
   2ae6e:	464a      	mov	r2, r9
   2ae70:	4431      	add	r1, r6
   2ae72:	4630      	mov	r0, r6
   2ae74:	f7ff fc8c 	bl	2a790 <memcmp>
   2ae78:	2800      	cmp	r0, #0
   2ae7a:	d16f      	bne.n	2af5c <two_way_long_needle+0x130>
   2ae7c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   2ae80:	9300      	str	r3, [sp, #0]
   2ae82:	18f3      	adds	r3, r6, r3
   2ae84:	4682      	mov	sl, r0
   2ae86:	9301      	str	r3, [sp, #4]
   2ae88:	4623      	mov	r3, r4
   2ae8a:	4680      	mov	r8, r0
   2ae8c:	4654      	mov	r4, sl
   2ae8e:	4658      	mov	r0, fp
   2ae90:	469a      	mov	sl, r3
   2ae92:	eb08 070a 	add.w	r7, r8, sl
   2ae96:	1a3a      	subs	r2, r7, r0
   2ae98:	2100      	movs	r1, #0
   2ae9a:	4428      	add	r0, r5
   2ae9c:	f7d5 f9c0 	bl	220 <memchr>
   2aea0:	2800      	cmp	r0, #0
   2aea2:	d156      	bne.n	2af52 <two_way_long_needle+0x126>
   2aea4:	2f00      	cmp	r7, #0
   2aea6:	d054      	beq.n	2af52 <two_way_long_needle+0x126>
   2aea8:	19eb      	adds	r3, r5, r7
   2aeaa:	aa04      	add	r2, sp, #16
   2aeac:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2aeb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2aeb4:	b14b      	cbz	r3, 2aeca <two_way_long_needle+0x9e>
   2aeb6:	b124      	cbz	r4, 2aec2 <two_way_long_needle+0x96>
   2aeb8:	9a03      	ldr	r2, [sp, #12]
   2aeba:	4293      	cmp	r3, r2
   2aebc:	d201      	bcs.n	2aec2 <two_way_long_needle+0x96>
   2aebe:	ebaa 0302 	sub.w	r3, sl, r2
   2aec2:	4498      	add	r8, r3
   2aec4:	2400      	movs	r4, #0
   2aec6:	4638      	mov	r0, r7
   2aec8:	e7e3      	b.n	2ae92 <two_way_long_needle+0x66>
   2aeca:	454c      	cmp	r4, r9
   2aecc:	4623      	mov	r3, r4
   2aece:	f10a 3eff 	add.w	lr, sl, #4294967295	; 0xffffffff
   2aed2:	bf38      	it	cc
   2aed4:	464b      	movcc	r3, r9
   2aed6:	4573      	cmp	r3, lr
   2aed8:	d213      	bcs.n	2af02 <two_way_long_needle+0xd6>
   2aeda:	eb08 0203 	add.w	r2, r8, r3
   2aede:	f816 c003 	ldrb.w	ip, [r6, r3]
   2aee2:	5ca8      	ldrb	r0, [r5, r2]
   2aee4:	4584      	cmp	ip, r0
   2aee6:	442a      	add	r2, r5
   2aee8:	eb06 0103 	add.w	r1, r6, r3
   2aeec:	d006      	beq.n	2aefc <two_way_long_needle+0xd0>
   2aeee:	e02c      	b.n	2af4a <two_way_long_needle+0x11e>
   2aef0:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   2aef4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2aef8:	4584      	cmp	ip, r0
   2aefa:	d126      	bne.n	2af4a <two_way_long_needle+0x11e>
   2aefc:	3301      	adds	r3, #1
   2aefe:	4573      	cmp	r3, lr
   2af00:	d3f6      	bcc.n	2aef0 <two_way_long_needle+0xc4>
   2af02:	454c      	cmp	r4, r9
   2af04:	9900      	ldr	r1, [sp, #0]
   2af06:	f080 8089 	bcs.w	2b01c <two_way_long_needle+0x1f0>
   2af0a:	9b00      	ldr	r3, [sp, #0]
   2af0c:	eb08 0203 	add.w	r2, r8, r3
   2af10:	9b01      	ldr	r3, [sp, #4]
   2af12:	5ca8      	ldrb	r0, [r5, r2]
   2af14:	781b      	ldrb	r3, [r3, #0]
   2af16:	4298      	cmp	r0, r3
   2af18:	442a      	add	r2, r5
   2af1a:	d17f      	bne.n	2b01c <two_way_long_needle+0x1f0>
   2af1c:	9801      	ldr	r0, [sp, #4]
   2af1e:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   2af22:	e006      	b.n	2af32 <two_way_long_needle+0x106>
   2af24:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2af28:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2af2c:	45f4      	cmp	ip, lr
   2af2e:	d103      	bne.n	2af38 <two_way_long_needle+0x10c>
   2af30:	4619      	mov	r1, r3
   2af32:	1e4b      	subs	r3, r1, #1
   2af34:	459b      	cmp	fp, r3
   2af36:	d1f5      	bne.n	2af24 <two_way_long_needle+0xf8>
   2af38:	3401      	adds	r4, #1
   2af3a:	428c      	cmp	r4, r1
   2af3c:	d870      	bhi.n	2b020 <two_way_long_needle+0x1f4>
   2af3e:	9c03      	ldr	r4, [sp, #12]
   2af40:	4638      	mov	r0, r7
   2af42:	44a0      	add	r8, r4
   2af44:	ebaa 0404 	sub.w	r4, sl, r4
   2af48:	e7a3      	b.n	2ae92 <two_way_long_needle+0x66>
   2af4a:	f1c9 0201 	rsb	r2, r9, #1
   2af4e:	4490      	add	r8, r2
   2af50:	e7b7      	b.n	2aec2 <two_way_long_needle+0x96>
   2af52:	2000      	movs	r0, #0
   2af54:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2af58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2af5c:	eba4 0309 	sub.w	r3, r4, r9
   2af60:	454b      	cmp	r3, r9
   2af62:	bf38      	it	cc
   2af64:	464b      	movcc	r3, r9
   2af66:	3301      	adds	r3, #1
   2af68:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   2af6c:	9303      	str	r3, [sp, #12]
   2af6e:	eb06 0308 	add.w	r3, r6, r8
   2af72:	4658      	mov	r0, fp
   2af74:	f04f 0a00 	mov.w	sl, #0
   2af78:	46cb      	mov	fp, r9
   2af7a:	4699      	mov	r9, r3
   2af7c:	eb0a 0704 	add.w	r7, sl, r4
   2af80:	1a3a      	subs	r2, r7, r0
   2af82:	2100      	movs	r1, #0
   2af84:	4428      	add	r0, r5
   2af86:	f7d5 f94b 	bl	220 <memchr>
   2af8a:	2800      	cmp	r0, #0
   2af8c:	d1e1      	bne.n	2af52 <two_way_long_needle+0x126>
   2af8e:	2f00      	cmp	r7, #0
   2af90:	d0df      	beq.n	2af52 <two_way_long_needle+0x126>
   2af92:	19eb      	adds	r3, r5, r7
   2af94:	aa04      	add	r2, sp, #16
   2af96:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2af9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2af9e:	bba3      	cbnz	r3, 2b00a <two_way_long_needle+0x1de>
   2afa0:	1e61      	subs	r1, r4, #1
   2afa2:	458b      	cmp	fp, r1
   2afa4:	d215      	bcs.n	2afd2 <two_way_long_needle+0x1a6>
   2afa6:	eb0a 020b 	add.w	r2, sl, fp
   2afaa:	f816 300b 	ldrb.w	r3, [r6, fp]
   2afae:	f815 e002 	ldrb.w	lr, [r5, r2]
   2afb2:	459e      	cmp	lr, r3
   2afb4:	442a      	add	r2, r5
   2afb6:	eb06 000b 	add.w	r0, r6, fp
   2afba:	465b      	mov	r3, fp
   2afbc:	d006      	beq.n	2afcc <two_way_long_needle+0x1a0>
   2afbe:	e027      	b.n	2b010 <two_way_long_needle+0x1e4>
   2afc0:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   2afc4:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   2afc8:	45f4      	cmp	ip, lr
   2afca:	d121      	bne.n	2b010 <two_way_long_needle+0x1e4>
   2afcc:	3301      	adds	r3, #1
   2afce:	428b      	cmp	r3, r1
   2afd0:	d3f6      	bcc.n	2afc0 <two_way_long_needle+0x194>
   2afd2:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2afd6:	d011      	beq.n	2affc <two_way_long_needle+0x1d0>
   2afd8:	eb0a 0208 	add.w	r2, sl, r8
   2afdc:	f899 1000 	ldrb.w	r1, [r9]
   2afe0:	5cab      	ldrb	r3, [r5, r2]
   2afe2:	4299      	cmp	r1, r3
   2afe4:	442a      	add	r2, r5
   2afe6:	d10f      	bne.n	2b008 <two_way_long_needle+0x1dc>
   2afe8:	464b      	mov	r3, r9
   2afea:	e005      	b.n	2aff8 <two_way_long_needle+0x1cc>
   2afec:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2aff0:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2aff4:	4288      	cmp	r0, r1
   2aff6:	d107      	bne.n	2b008 <two_way_long_needle+0x1dc>
   2aff8:	42b3      	cmp	r3, r6
   2affa:	d1f7      	bne.n	2afec <two_way_long_needle+0x1c0>
   2affc:	eb05 000a 	add.w	r0, r5, sl
   2b000:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2b004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b008:	9b03      	ldr	r3, [sp, #12]
   2b00a:	449a      	add	sl, r3
   2b00c:	4638      	mov	r0, r7
   2b00e:	e7b5      	b.n	2af7c <two_way_long_needle+0x150>
   2b010:	f1cb 0201 	rsb	r2, fp, #1
   2b014:	4492      	add	sl, r2
   2b016:	449a      	add	sl, r3
   2b018:	4638      	mov	r0, r7
   2b01a:	e7af      	b.n	2af7c <two_way_long_needle+0x150>
   2b01c:	4649      	mov	r1, r9
   2b01e:	e78b      	b.n	2af38 <two_way_long_needle+0x10c>
   2b020:	eb05 0008 	add.w	r0, r5, r8
   2b024:	e796      	b.n	2af54 <two_way_long_needle+0x128>
   2b026:	bf00      	nop

0002b028 <strstr>:
   2b028:	7802      	ldrb	r2, [r0, #0]
   2b02a:	2a00      	cmp	r2, #0
   2b02c:	f000 8101 	beq.w	2b232 <strstr+0x20a>
   2b030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b034:	f891 8000 	ldrb.w	r8, [r1]
   2b038:	b085      	sub	sp, #20
   2b03a:	4644      	mov	r4, r8
   2b03c:	f1b8 0f00 	cmp.w	r8, #0
   2b040:	d016      	beq.n	2b070 <strstr+0x48>
   2b042:	4686      	mov	lr, r0
   2b044:	f101 0c01 	add.w	ip, r1, #1
   2b048:	2701      	movs	r7, #1
   2b04a:	e003      	b.n	2b054 <strstr+0x2c>
   2b04c:	f813 4b01 	ldrb.w	r4, [r3], #1
   2b050:	b16c      	cbz	r4, 2b06e <strstr+0x46>
   2b052:	469c      	mov	ip, r3
   2b054:	42a2      	cmp	r2, r4
   2b056:	bf14      	ite	ne
   2b058:	2700      	movne	r7, #0
   2b05a:	f007 0701 	andeq.w	r7, r7, #1
   2b05e:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
   2b062:	4663      	mov	r3, ip
   2b064:	2a00      	cmp	r2, #0
   2b066:	d1f1      	bne.n	2b04c <strstr+0x24>
   2b068:	f89c 3000 	ldrb.w	r3, [ip]
   2b06c:	b9fb      	cbnz	r3, 2b0ae <strstr+0x86>
   2b06e:	b117      	cbz	r7, 2b076 <strstr+0x4e>
   2b070:	b005      	add	sp, #20
   2b072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b076:	460e      	mov	r6, r1
   2b078:	4605      	mov	r5, r0
   2b07a:	4641      	mov	r1, r8
   2b07c:	3001      	adds	r0, #1
   2b07e:	ebac 0406 	sub.w	r4, ip, r6
   2b082:	f7ff fd11 	bl	2aaa8 <strchr>
   2b086:	4607      	mov	r7, r0
   2b088:	b188      	cbz	r0, 2b0ae <strstr+0x86>
   2b08a:	2c01      	cmp	r4, #1
   2b08c:	d0f0      	beq.n	2b070 <strstr+0x48>
   2b08e:	1928      	adds	r0, r5, r4
   2b090:	4287      	cmp	r7, r0
   2b092:	bf94      	ite	ls
   2b094:	1bc1      	subls	r1, r0, r7
   2b096:	2101      	movhi	r1, #1
   2b098:	2c1f      	cmp	r4, #31
   2b09a:	468b      	mov	fp, r1
   2b09c:	d90b      	bls.n	2b0b6 <strstr+0x8e>
   2b09e:	4623      	mov	r3, r4
   2b0a0:	4632      	mov	r2, r6
   2b0a2:	4638      	mov	r0, r7
   2b0a4:	f7ff fec2 	bl	2ae2c <two_way_long_needle>
   2b0a8:	b005      	add	sp, #20
   2b0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0ae:	2000      	movs	r0, #0
   2b0b0:	b005      	add	sp, #20
   2b0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0b6:	aa03      	add	r2, sp, #12
   2b0b8:	4621      	mov	r1, r4
   2b0ba:	4630      	mov	r0, r6
   2b0bc:	f7ff fe5c 	bl	2ad78 <critical_factorization>
   2b0c0:	9903      	ldr	r1, [sp, #12]
   2b0c2:	4680      	mov	r8, r0
   2b0c4:	4602      	mov	r2, r0
   2b0c6:	4431      	add	r1, r6
   2b0c8:	4630      	mov	r0, r6
   2b0ca:	f7ff fb61 	bl	2a790 <memcmp>
   2b0ce:	2800      	cmp	r0, #0
   2b0d0:	d157      	bne.n	2b182 <strstr+0x15a>
   2b0d2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2b0d6:	9300      	str	r3, [sp, #0]
   2b0d8:	18f3      	adds	r3, r6, r3
   2b0da:	4681      	mov	r9, r0
   2b0dc:	4605      	mov	r5, r0
   2b0de:	9301      	str	r3, [sp, #4]
   2b0e0:	4658      	mov	r0, fp
   2b0e2:	46b2      	mov	sl, r6
   2b0e4:	1966      	adds	r6, r4, r5
   2b0e6:	1a32      	subs	r2, r6, r0
   2b0e8:	2100      	movs	r1, #0
   2b0ea:	4438      	add	r0, r7
   2b0ec:	f7d5 f898 	bl	220 <memchr>
   2b0f0:	2800      	cmp	r0, #0
   2b0f2:	d1dc      	bne.n	2b0ae <strstr+0x86>
   2b0f4:	2e00      	cmp	r6, #0
   2b0f6:	d0da      	beq.n	2b0ae <strstr+0x86>
   2b0f8:	45c8      	cmp	r8, r9
   2b0fa:	4643      	mov	r3, r8
   2b0fc:	bf38      	it	cc
   2b0fe:	464b      	movcc	r3, r9
   2b100:	429c      	cmp	r4, r3
   2b102:	d912      	bls.n	2b12a <strstr+0x102>
   2b104:	195a      	adds	r2, r3, r5
   2b106:	f81a 1003 	ldrb.w	r1, [sl, r3]
   2b10a:	5cb8      	ldrb	r0, [r7, r2]
   2b10c:	4281      	cmp	r1, r0
   2b10e:	443a      	add	r2, r7
   2b110:	eb0a 0e03 	add.w	lr, sl, r3
   2b114:	d006      	beq.n	2b124 <strstr+0xfc>
   2b116:	e02c      	b.n	2b172 <strstr+0x14a>
   2b118:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   2b11c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2b120:	4288      	cmp	r0, r1
   2b122:	d126      	bne.n	2b172 <strstr+0x14a>
   2b124:	3301      	adds	r3, #1
   2b126:	429c      	cmp	r4, r3
   2b128:	d1f6      	bne.n	2b118 <strstr+0xf0>
   2b12a:	45c8      	cmp	r8, r9
   2b12c:	9900      	ldr	r1, [sp, #0]
   2b12e:	f240 8083 	bls.w	2b238 <strstr+0x210>
   2b132:	9b00      	ldr	r3, [sp, #0]
   2b134:	18ea      	adds	r2, r5, r3
   2b136:	9b01      	ldr	r3, [sp, #4]
   2b138:	5cb8      	ldrb	r0, [r7, r2]
   2b13a:	781b      	ldrb	r3, [r3, #0]
   2b13c:	4298      	cmp	r0, r3
   2b13e:	443a      	add	r2, r7
   2b140:	d17a      	bne.n	2b238 <strstr+0x210>
   2b142:	9801      	ldr	r0, [sp, #4]
   2b144:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   2b148:	e006      	b.n	2b158 <strstr+0x130>
   2b14a:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2b14e:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2b152:	45f4      	cmp	ip, lr
   2b154:	d103      	bne.n	2b15e <strstr+0x136>
   2b156:	4619      	mov	r1, r3
   2b158:	1e4b      	subs	r3, r1, #1
   2b15a:	455b      	cmp	r3, fp
   2b15c:	d1f5      	bne.n	2b14a <strstr+0x122>
   2b15e:	f109 0901 	add.w	r9, r9, #1
   2b162:	4589      	cmp	r9, r1
   2b164:	d857      	bhi.n	2b216 <strstr+0x1ee>
   2b166:	9b03      	ldr	r3, [sp, #12]
   2b168:	4630      	mov	r0, r6
   2b16a:	441d      	add	r5, r3
   2b16c:	eba4 0903 	sub.w	r9, r4, r3
   2b170:	e7b8      	b.n	2b0e4 <strstr+0xbc>
   2b172:	f1c8 0201 	rsb	r2, r8, #1
   2b176:	4415      	add	r5, r2
   2b178:	441d      	add	r5, r3
   2b17a:	f04f 0900 	mov.w	r9, #0
   2b17e:	4630      	mov	r0, r6
   2b180:	e7b0      	b.n	2b0e4 <strstr+0xbc>
   2b182:	eba4 0308 	sub.w	r3, r4, r8
   2b186:	4543      	cmp	r3, r8
   2b188:	bf38      	it	cc
   2b18a:	4643      	movcc	r3, r8
   2b18c:	3301      	adds	r3, #1
   2b18e:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
   2b192:	9303      	str	r3, [sp, #12]
   2b194:	eb06 0309 	add.w	r3, r6, r9
   2b198:	4658      	mov	r0, fp
   2b19a:	2500      	movs	r5, #0
   2b19c:	46bb      	mov	fp, r7
   2b19e:	469a      	mov	sl, r3
   2b1a0:	1967      	adds	r7, r4, r5
   2b1a2:	1a3a      	subs	r2, r7, r0
   2b1a4:	2100      	movs	r1, #0
   2b1a6:	4458      	add	r0, fp
   2b1a8:	f7d5 f83a 	bl	220 <memchr>
   2b1ac:	2800      	cmp	r0, #0
   2b1ae:	f47f af7e 	bne.w	2b0ae <strstr+0x86>
   2b1b2:	2f00      	cmp	r7, #0
   2b1b4:	f43f af7b 	beq.w	2b0ae <strstr+0x86>
   2b1b8:	4544      	cmp	r4, r8
   2b1ba:	d915      	bls.n	2b1e8 <strstr+0x1c0>
   2b1bc:	eb08 0205 	add.w	r2, r8, r5
   2b1c0:	f816 3008 	ldrb.w	r3, [r6, r8]
   2b1c4:	f81b 0002 	ldrb.w	r0, [fp, r2]
   2b1c8:	4298      	cmp	r0, r3
   2b1ca:	445a      	add	r2, fp
   2b1cc:	eb06 0108 	add.w	r1, r6, r8
   2b1d0:	4643      	mov	r3, r8
   2b1d2:	d006      	beq.n	2b1e2 <strstr+0x1ba>
   2b1d4:	e023      	b.n	2b21e <strstr+0x1f6>
   2b1d6:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   2b1da:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2b1de:	4586      	cmp	lr, r0
   2b1e0:	d11d      	bne.n	2b21e <strstr+0x1f6>
   2b1e2:	3301      	adds	r3, #1
   2b1e4:	429c      	cmp	r4, r3
   2b1e6:	d1f6      	bne.n	2b1d6 <strstr+0x1ae>
   2b1e8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2b1ec:	d012      	beq.n	2b214 <strstr+0x1ec>
   2b1ee:	eb05 0209 	add.w	r2, r5, r9
   2b1f2:	f89a 3000 	ldrb.w	r3, [sl]
   2b1f6:	f81b 1002 	ldrb.w	r1, [fp, r2]
   2b1fa:	4299      	cmp	r1, r3
   2b1fc:	445a      	add	r2, fp
   2b1fe:	d114      	bne.n	2b22a <strstr+0x202>
   2b200:	4653      	mov	r3, sl
   2b202:	e005      	b.n	2b210 <strstr+0x1e8>
   2b204:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2b208:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2b20c:	4288      	cmp	r0, r1
   2b20e:	d10c      	bne.n	2b22a <strstr+0x202>
   2b210:	42b3      	cmp	r3, r6
   2b212:	d1f7      	bne.n	2b204 <strstr+0x1dc>
   2b214:	465f      	mov	r7, fp
   2b216:	1978      	adds	r0, r7, r5
   2b218:	b005      	add	sp, #20
   2b21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b21e:	f1c8 0201 	rsb	r2, r8, #1
   2b222:	4415      	add	r5, r2
   2b224:	441d      	add	r5, r3
   2b226:	4638      	mov	r0, r7
   2b228:	e7ba      	b.n	2b1a0 <strstr+0x178>
   2b22a:	9b03      	ldr	r3, [sp, #12]
   2b22c:	4638      	mov	r0, r7
   2b22e:	441d      	add	r5, r3
   2b230:	e7b6      	b.n	2b1a0 <strstr+0x178>
   2b232:	780b      	ldrb	r3, [r1, #0]
   2b234:	b913      	cbnz	r3, 2b23c <strstr+0x214>
   2b236:	4770      	bx	lr
   2b238:	4641      	mov	r1, r8
   2b23a:	e790      	b.n	2b15e <strstr+0x136>
   2b23c:	2000      	movs	r0, #0
   2b23e:	4770      	bx	lr

0002b240 <_strtol_l.isra.0>:
   2b240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b244:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2b248:	460f      	mov	r7, r1
   2b24a:	4680      	mov	r8, r0
   2b24c:	4616      	mov	r6, r2
   2b24e:	461d      	mov	r5, r3
   2b250:	468a      	mov	sl, r1
   2b252:	e000      	b.n	2b256 <_strtol_l.isra.0+0x16>
   2b254:	46a2      	mov	sl, r4
   2b256:	4654      	mov	r4, sl
   2b258:	4648      	mov	r0, r9
   2b25a:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b25e:	f7fe ffbf 	bl	2a1e0 <__locale_ctype_ptr_l>
   2b262:	4458      	add	r0, fp
   2b264:	7842      	ldrb	r2, [r0, #1]
   2b266:	f012 0208 	ands.w	r2, r2, #8
   2b26a:	d1f3      	bne.n	2b254 <_strtol_l.isra.0+0x14>
   2b26c:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   2b270:	d04f      	beq.n	2b312 <_strtol_l.isra.0+0xd2>
   2b272:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   2b276:	bf04      	itt	eq
   2b278:	f894 b000 	ldrbeq.w	fp, [r4]
   2b27c:	f10a 0402 	addeq.w	r4, sl, #2
   2b280:	b11d      	cbz	r5, 2b28a <_strtol_l.isra.0+0x4a>
   2b282:	2d10      	cmp	r5, #16
   2b284:	d056      	beq.n	2b334 <_strtol_l.isra.0+0xf4>
   2b286:	46ac      	mov	ip, r5
   2b288:	e004      	b.n	2b294 <_strtol_l.isra.0+0x54>
   2b28a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2b28e:	d060      	beq.n	2b352 <_strtol_l.isra.0+0x112>
   2b290:	250a      	movs	r5, #10
   2b292:	46ac      	mov	ip, r5
   2b294:	2a00      	cmp	r2, #0
   2b296:	bf0c      	ite	eq
   2b298:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   2b29c:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   2b2a0:	2100      	movs	r1, #0
   2b2a2:	fbb9 fefc 	udiv	lr, r9, ip
   2b2a6:	4608      	mov	r0, r1
   2b2a8:	fb0c 9a1e 	mls	sl, ip, lr, r9
   2b2ac:	e005      	b.n	2b2ba <_strtol_l.isra.0+0x7a>
   2b2ae:	d029      	beq.n	2b304 <_strtol_l.isra.0+0xc4>
   2b2b0:	fb0c 3000 	mla	r0, ip, r0, r3
   2b2b4:	2101      	movs	r1, #1
   2b2b6:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b2ba:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   2b2be:	2b09      	cmp	r3, #9
   2b2c0:	d905      	bls.n	2b2ce <_strtol_l.isra.0+0x8e>
   2b2c2:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   2b2c6:	2b19      	cmp	r3, #25
   2b2c8:	d80b      	bhi.n	2b2e2 <_strtol_l.isra.0+0xa2>
   2b2ca:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   2b2ce:	429d      	cmp	r5, r3
   2b2d0:	dd0f      	ble.n	2b2f2 <_strtol_l.isra.0+0xb2>
   2b2d2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2b2d6:	d0ee      	beq.n	2b2b6 <_strtol_l.isra.0+0x76>
   2b2d8:	4586      	cmp	lr, r0
   2b2da:	d2e8      	bcs.n	2b2ae <_strtol_l.isra.0+0x6e>
   2b2dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b2e0:	e7e9      	b.n	2b2b6 <_strtol_l.isra.0+0x76>
   2b2e2:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   2b2e6:	2b19      	cmp	r3, #25
   2b2e8:	d803      	bhi.n	2b2f2 <_strtol_l.isra.0+0xb2>
   2b2ea:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   2b2ee:	429d      	cmp	r5, r3
   2b2f0:	dcef      	bgt.n	2b2d2 <_strtol_l.isra.0+0x92>
   2b2f2:	1c4b      	adds	r3, r1, #1
   2b2f4:	d013      	beq.n	2b31e <_strtol_l.isra.0+0xde>
   2b2f6:	b102      	cbz	r2, 2b2fa <_strtol_l.isra.0+0xba>
   2b2f8:	4240      	negs	r0, r0
   2b2fa:	b146      	cbz	r6, 2b30e <_strtol_l.isra.0+0xce>
   2b2fc:	b9c1      	cbnz	r1, 2b330 <_strtol_l.isra.0+0xf0>
   2b2fe:	6037      	str	r7, [r6, #0]
   2b300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b304:	459a      	cmp	sl, r3
   2b306:	dad3      	bge.n	2b2b0 <_strtol_l.isra.0+0x70>
   2b308:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b30c:	e7d3      	b.n	2b2b6 <_strtol_l.isra.0+0x76>
   2b30e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b312:	f894 b000 	ldrb.w	fp, [r4]
   2b316:	2201      	movs	r2, #1
   2b318:	f10a 0402 	add.w	r4, sl, #2
   2b31c:	e7b0      	b.n	2b280 <_strtol_l.isra.0+0x40>
   2b31e:	2322      	movs	r3, #34	; 0x22
   2b320:	f8c8 3000 	str.w	r3, [r8]
   2b324:	b1ee      	cbz	r6, 2b362 <_strtol_l.isra.0+0x122>
   2b326:	1e67      	subs	r7, r4, #1
   2b328:	4648      	mov	r0, r9
   2b32a:	6037      	str	r7, [r6, #0]
   2b32c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b330:	4681      	mov	r9, r0
   2b332:	e7f8      	b.n	2b326 <_strtol_l.isra.0+0xe6>
   2b334:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2b338:	d1a5      	bne.n	2b286 <_strtol_l.isra.0+0x46>
   2b33a:	7823      	ldrb	r3, [r4, #0]
   2b33c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b340:	2b58      	cmp	r3, #88	; 0x58
   2b342:	d1a0      	bne.n	2b286 <_strtol_l.isra.0+0x46>
   2b344:	f04f 0c10 	mov.w	ip, #16
   2b348:	f894 b001 	ldrb.w	fp, [r4, #1]
   2b34c:	4665      	mov	r5, ip
   2b34e:	3402      	adds	r4, #2
   2b350:	e7a0      	b.n	2b294 <_strtol_l.isra.0+0x54>
   2b352:	7823      	ldrb	r3, [r4, #0]
   2b354:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b358:	2b58      	cmp	r3, #88	; 0x58
   2b35a:	d0f3      	beq.n	2b344 <_strtol_l.isra.0+0x104>
   2b35c:	2508      	movs	r5, #8
   2b35e:	46ac      	mov	ip, r5
   2b360:	e798      	b.n	2b294 <_strtol_l.isra.0+0x54>
   2b362:	4648      	mov	r0, r9
   2b364:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b368 <strtol>:
   2b368:	b530      	push	{r4, r5, lr}
   2b36a:	4c08      	ldr	r4, [pc, #32]	; (2b38c <strtol+0x24>)
   2b36c:	4b08      	ldr	r3, [pc, #32]	; (2b390 <strtol+0x28>)
   2b36e:	6825      	ldr	r5, [r4, #0]
   2b370:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2b372:	b083      	sub	sp, #12
   2b374:	2c00      	cmp	r4, #0
   2b376:	bf08      	it	eq
   2b378:	461c      	moveq	r4, r3
   2b37a:	9400      	str	r4, [sp, #0]
   2b37c:	4613      	mov	r3, r2
   2b37e:	460a      	mov	r2, r1
   2b380:	4601      	mov	r1, r0
   2b382:	4628      	mov	r0, r5
   2b384:	f7ff ff5c 	bl	2b240 <_strtol_l.isra.0>
   2b388:	b003      	add	sp, #12
   2b38a:	bd30      	pop	{r4, r5, pc}
   2b38c:	2000cb70 	.word	0x2000cb70
   2b390:	2000cfa0 	.word	0x2000cfa0

0002b394 <_strtoul_l.isra.0>:
   2b394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b398:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2b39c:	460e      	mov	r6, r1
   2b39e:	4607      	mov	r7, r0
   2b3a0:	4615      	mov	r5, r2
   2b3a2:	4698      	mov	r8, r3
   2b3a4:	468a      	mov	sl, r1
   2b3a6:	e000      	b.n	2b3aa <_strtoul_l.isra.0+0x16>
   2b3a8:	46a2      	mov	sl, r4
   2b3aa:	4654      	mov	r4, sl
   2b3ac:	4648      	mov	r0, r9
   2b3ae:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b3b2:	f7fe ff15 	bl	2a1e0 <__locale_ctype_ptr_l>
   2b3b6:	4458      	add	r0, fp
   2b3b8:	7840      	ldrb	r0, [r0, #1]
   2b3ba:	f010 0008 	ands.w	r0, r0, #8
   2b3be:	d1f3      	bne.n	2b3a8 <_strtoul_l.isra.0+0x14>
   2b3c0:	4659      	mov	r1, fp
   2b3c2:	292d      	cmp	r1, #45	; 0x2d
   2b3c4:	d059      	beq.n	2b47a <_strtoul_l.isra.0+0xe6>
   2b3c6:	292b      	cmp	r1, #43	; 0x2b
   2b3c8:	bf04      	itt	eq
   2b3ca:	7821      	ldrbeq	r1, [r4, #0]
   2b3cc:	f10a 0402 	addeq.w	r4, sl, #2
   2b3d0:	f1b8 0f00 	cmp.w	r8, #0
   2b3d4:	d00c      	beq.n	2b3f0 <_strtoul_l.isra.0+0x5c>
   2b3d6:	f1b8 0f10 	cmp.w	r8, #16
   2b3da:	d053      	beq.n	2b484 <_strtoul_l.isra.0+0xf0>
   2b3dc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2b3e0:	fbbc fcf8 	udiv	ip, ip, r8
   2b3e4:	fb08 fa0c 	mul.w	sl, r8, ip
   2b3e8:	ea6f 0a0a 	mvn.w	sl, sl
   2b3ec:	46c1      	mov	r9, r8
   2b3ee:	e008      	b.n	2b402 <_strtoul_l.isra.0+0x6e>
   2b3f0:	2930      	cmp	r1, #48	; 0x30
   2b3f2:	d058      	beq.n	2b4a6 <_strtoul_l.isra.0+0x112>
   2b3f4:	f04f 080a 	mov.w	r8, #10
   2b3f8:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 2b4d8 <_strtoul_l.isra.0+0x144>
   2b3fc:	46c1      	mov	r9, r8
   2b3fe:	f04f 0a05 	mov.w	sl, #5
   2b402:	2300      	movs	r3, #0
   2b404:	469e      	mov	lr, r3
   2b406:	e005      	b.n	2b414 <_strtoul_l.isra.0+0x80>
   2b408:	d02a      	beq.n	2b460 <_strtoul_l.isra.0+0xcc>
   2b40a:	fb09 2e0e 	mla	lr, r9, lr, r2
   2b40e:	2301      	movs	r3, #1
   2b410:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b414:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   2b418:	2a09      	cmp	r2, #9
   2b41a:	d905      	bls.n	2b428 <_strtoul_l.isra.0+0x94>
   2b41c:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   2b420:	2a19      	cmp	r2, #25
   2b422:	d80a      	bhi.n	2b43a <_strtoul_l.isra.0+0xa6>
   2b424:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   2b428:	4590      	cmp	r8, r2
   2b42a:	dd0e      	ble.n	2b44a <_strtoul_l.isra.0+0xb6>
   2b42c:	2b00      	cmp	r3, #0
   2b42e:	db01      	blt.n	2b434 <_strtoul_l.isra.0+0xa0>
   2b430:	45e6      	cmp	lr, ip
   2b432:	d9e9      	bls.n	2b408 <_strtoul_l.isra.0+0x74>
   2b434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b438:	e7ea      	b.n	2b410 <_strtoul_l.isra.0+0x7c>
   2b43a:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   2b43e:	2a19      	cmp	r2, #25
   2b440:	d803      	bhi.n	2b44a <_strtoul_l.isra.0+0xb6>
   2b442:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   2b446:	4590      	cmp	r8, r2
   2b448:	dcf0      	bgt.n	2b42c <_strtoul_l.isra.0+0x98>
   2b44a:	2b00      	cmp	r3, #0
   2b44c:	db0d      	blt.n	2b46a <_strtoul_l.isra.0+0xd6>
   2b44e:	b108      	cbz	r0, 2b454 <_strtoul_l.isra.0+0xc0>
   2b450:	f1ce 0e00 	rsb	lr, lr, #0
   2b454:	b10d      	cbz	r5, 2b45a <_strtoul_l.isra.0+0xc6>
   2b456:	b973      	cbnz	r3, 2b476 <_strtoul_l.isra.0+0xe2>
   2b458:	602e      	str	r6, [r5, #0]
   2b45a:	4670      	mov	r0, lr
   2b45c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b460:	4552      	cmp	r2, sl
   2b462:	ddd2      	ble.n	2b40a <_strtoul_l.isra.0+0x76>
   2b464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b468:	e7d2      	b.n	2b410 <_strtoul_l.isra.0+0x7c>
   2b46a:	2322      	movs	r3, #34	; 0x22
   2b46c:	603b      	str	r3, [r7, #0]
   2b46e:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   2b472:	2d00      	cmp	r5, #0
   2b474:	d0f1      	beq.n	2b45a <_strtoul_l.isra.0+0xc6>
   2b476:	1e66      	subs	r6, r4, #1
   2b478:	e7ee      	b.n	2b458 <_strtoul_l.isra.0+0xc4>
   2b47a:	7821      	ldrb	r1, [r4, #0]
   2b47c:	2001      	movs	r0, #1
   2b47e:	f10a 0402 	add.w	r4, sl, #2
   2b482:	e7a5      	b.n	2b3d0 <_strtoul_l.isra.0+0x3c>
   2b484:	2930      	cmp	r1, #48	; 0x30
   2b486:	d11b      	bne.n	2b4c0 <_strtoul_l.isra.0+0x12c>
   2b488:	7823      	ldrb	r3, [r4, #0]
   2b48a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b48e:	2b58      	cmp	r3, #88	; 0x58
   2b490:	d11c      	bne.n	2b4cc <_strtoul_l.isra.0+0x138>
   2b492:	f04f 0910 	mov.w	r9, #16
   2b496:	7861      	ldrb	r1, [r4, #1]
   2b498:	46c8      	mov	r8, r9
   2b49a:	f04f 0a0f 	mov.w	sl, #15
   2b49e:	3402      	adds	r4, #2
   2b4a0:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b4a4:	e7ad      	b.n	2b402 <_strtoul_l.isra.0+0x6e>
   2b4a6:	7823      	ldrb	r3, [r4, #0]
   2b4a8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b4ac:	2b58      	cmp	r3, #88	; 0x58
   2b4ae:	d0f0      	beq.n	2b492 <_strtoul_l.isra.0+0xfe>
   2b4b0:	f04f 0808 	mov.w	r8, #8
   2b4b4:	46c1      	mov	r9, r8
   2b4b6:	f04f 0a07 	mov.w	sl, #7
   2b4ba:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   2b4be:	e7a0      	b.n	2b402 <_strtoul_l.isra.0+0x6e>
   2b4c0:	f04f 0a0f 	mov.w	sl, #15
   2b4c4:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b4c8:	46c1      	mov	r9, r8
   2b4ca:	e79a      	b.n	2b402 <_strtoul_l.isra.0+0x6e>
   2b4cc:	46c1      	mov	r9, r8
   2b4ce:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b4d2:	f04f 0a0f 	mov.w	sl, #15
   2b4d6:	e794      	b.n	2b402 <_strtoul_l.isra.0+0x6e>
   2b4d8:	19999999 	.word	0x19999999

0002b4dc <strtoul>:
   2b4dc:	b530      	push	{r4, r5, lr}
   2b4de:	4c08      	ldr	r4, [pc, #32]	; (2b500 <strtoul+0x24>)
   2b4e0:	4b08      	ldr	r3, [pc, #32]	; (2b504 <strtoul+0x28>)
   2b4e2:	6825      	ldr	r5, [r4, #0]
   2b4e4:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2b4e6:	b083      	sub	sp, #12
   2b4e8:	2c00      	cmp	r4, #0
   2b4ea:	bf08      	it	eq
   2b4ec:	461c      	moveq	r4, r3
   2b4ee:	9400      	str	r4, [sp, #0]
   2b4f0:	4613      	mov	r3, r2
   2b4f2:	460a      	mov	r2, r1
   2b4f4:	4601      	mov	r1, r0
   2b4f6:	4628      	mov	r0, r5
   2b4f8:	f7ff ff4c 	bl	2b394 <_strtoul_l.isra.0>
   2b4fc:	b003      	add	sp, #12
   2b4fe:	bd30      	pop	{r4, r5, pc}
   2b500:	2000cb70 	.word	0x2000cb70
   2b504:	2000cfa0 	.word	0x2000cfa0

0002b508 <_svfprintf_r>:
   2b508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b50c:	b0c3      	sub	sp, #268	; 0x10c
   2b50e:	460c      	mov	r4, r1
   2b510:	910b      	str	r1, [sp, #44]	; 0x2c
   2b512:	4692      	mov	sl, r2
   2b514:	930f      	str	r3, [sp, #60]	; 0x3c
   2b516:	900c      	str	r0, [sp, #48]	; 0x30
   2b518:	f002 fb26 	bl	2db68 <_localeconv_r>
   2b51c:	6803      	ldr	r3, [r0, #0]
   2b51e:	931a      	str	r3, [sp, #104]	; 0x68
   2b520:	4618      	mov	r0, r3
   2b522:	f7d5 f8ed 	bl	700 <strlen>
   2b526:	89a3      	ldrh	r3, [r4, #12]
   2b528:	9019      	str	r0, [sp, #100]	; 0x64
   2b52a:	0619      	lsls	r1, r3, #24
   2b52c:	d503      	bpl.n	2b536 <_svfprintf_r+0x2e>
   2b52e:	6923      	ldr	r3, [r4, #16]
   2b530:	2b00      	cmp	r3, #0
   2b532:	f001 8003 	beq.w	2c53c <_svfprintf_r+0x1034>
   2b536:	2300      	movs	r3, #0
   2b538:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   2b53c:	9313      	str	r3, [sp, #76]	; 0x4c
   2b53e:	9315      	str	r3, [sp, #84]	; 0x54
   2b540:	9314      	str	r3, [sp, #80]	; 0x50
   2b542:	9327      	str	r3, [sp, #156]	; 0x9c
   2b544:	9326      	str	r3, [sp, #152]	; 0x98
   2b546:	9318      	str	r3, [sp, #96]	; 0x60
   2b548:	931b      	str	r3, [sp, #108]	; 0x6c
   2b54a:	9309      	str	r3, [sp, #36]	; 0x24
   2b54c:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   2b550:	46c8      	mov	r8, r9
   2b552:	9316      	str	r3, [sp, #88]	; 0x58
   2b554:	9317      	str	r3, [sp, #92]	; 0x5c
   2b556:	f89a 3000 	ldrb.w	r3, [sl]
   2b55a:	4654      	mov	r4, sl
   2b55c:	b1e3      	cbz	r3, 2b598 <_svfprintf_r+0x90>
   2b55e:	2b25      	cmp	r3, #37	; 0x25
   2b560:	d102      	bne.n	2b568 <_svfprintf_r+0x60>
   2b562:	e019      	b.n	2b598 <_svfprintf_r+0x90>
   2b564:	2b25      	cmp	r3, #37	; 0x25
   2b566:	d003      	beq.n	2b570 <_svfprintf_r+0x68>
   2b568:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2b56c:	2b00      	cmp	r3, #0
   2b56e:	d1f9      	bne.n	2b564 <_svfprintf_r+0x5c>
   2b570:	eba4 050a 	sub.w	r5, r4, sl
   2b574:	b185      	cbz	r5, 2b598 <_svfprintf_r+0x90>
   2b576:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b578:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2b57a:	f8c8 a000 	str.w	sl, [r8]
   2b57e:	3301      	adds	r3, #1
   2b580:	442a      	add	r2, r5
   2b582:	2b07      	cmp	r3, #7
   2b584:	f8c8 5004 	str.w	r5, [r8, #4]
   2b588:	9227      	str	r2, [sp, #156]	; 0x9c
   2b58a:	9326      	str	r3, [sp, #152]	; 0x98
   2b58c:	dc7f      	bgt.n	2b68e <_svfprintf_r+0x186>
   2b58e:	f108 0808 	add.w	r8, r8, #8
   2b592:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b594:	442b      	add	r3, r5
   2b596:	9309      	str	r3, [sp, #36]	; 0x24
   2b598:	7823      	ldrb	r3, [r4, #0]
   2b59a:	2b00      	cmp	r3, #0
   2b59c:	d07f      	beq.n	2b69e <_svfprintf_r+0x196>
   2b59e:	2300      	movs	r3, #0
   2b5a0:	461a      	mov	r2, r3
   2b5a2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2b5a6:	4619      	mov	r1, r3
   2b5a8:	930d      	str	r3, [sp, #52]	; 0x34
   2b5aa:	469b      	mov	fp, r3
   2b5ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b5b0:	7863      	ldrb	r3, [r4, #1]
   2b5b2:	900a      	str	r0, [sp, #40]	; 0x28
   2b5b4:	f104 0a01 	add.w	sl, r4, #1
   2b5b8:	f10a 0a01 	add.w	sl, sl, #1
   2b5bc:	f1a3 0020 	sub.w	r0, r3, #32
   2b5c0:	2858      	cmp	r0, #88	; 0x58
   2b5c2:	f200 83c1 	bhi.w	2bd48 <_svfprintf_r+0x840>
   2b5c6:	e8df f010 	tbh	[pc, r0, lsl #1]
   2b5ca:	0238      	.short	0x0238
   2b5cc:	03bf03bf 	.word	0x03bf03bf
   2b5d0:	03bf0240 	.word	0x03bf0240
   2b5d4:	03bf03bf 	.word	0x03bf03bf
   2b5d8:	03bf03bf 	.word	0x03bf03bf
   2b5dc:	024503bf 	.word	0x024503bf
   2b5e0:	03bf0203 	.word	0x03bf0203
   2b5e4:	026b005d 	.word	0x026b005d
   2b5e8:	028603bf 	.word	0x028603bf
   2b5ec:	039d039d 	.word	0x039d039d
   2b5f0:	039d039d 	.word	0x039d039d
   2b5f4:	039d039d 	.word	0x039d039d
   2b5f8:	039d039d 	.word	0x039d039d
   2b5fc:	03bf039d 	.word	0x03bf039d
   2b600:	03bf03bf 	.word	0x03bf03bf
   2b604:	03bf03bf 	.word	0x03bf03bf
   2b608:	03bf03bf 	.word	0x03bf03bf
   2b60c:	03bf03bf 	.word	0x03bf03bf
   2b610:	033703bf 	.word	0x033703bf
   2b614:	03bf0357 	.word	0x03bf0357
   2b618:	03bf0357 	.word	0x03bf0357
   2b61c:	03bf03bf 	.word	0x03bf03bf
   2b620:	039803bf 	.word	0x039803bf
   2b624:	03bf03bf 	.word	0x03bf03bf
   2b628:	03bf03ad 	.word	0x03bf03ad
   2b62c:	03bf03bf 	.word	0x03bf03bf
   2b630:	03bf03bf 	.word	0x03bf03bf
   2b634:	03bf0259 	.word	0x03bf0259
   2b638:	031e03bf 	.word	0x031e03bf
   2b63c:	03bf03bf 	.word	0x03bf03bf
   2b640:	03bf03bf 	.word	0x03bf03bf
   2b644:	03bf03bf 	.word	0x03bf03bf
   2b648:	03bf03bf 	.word	0x03bf03bf
   2b64c:	03bf03bf 	.word	0x03bf03bf
   2b650:	02db02c6 	.word	0x02db02c6
   2b654:	03570357 	.word	0x03570357
   2b658:	028b0357 	.word	0x028b0357
   2b65c:	03bf02db 	.word	0x03bf02db
   2b660:	029003bf 	.word	0x029003bf
   2b664:	029d03bf 	.word	0x029d03bf
   2b668:	02b401cc 	.word	0x02b401cc
   2b66c:	03bf0208 	.word	0x03bf0208
   2b670:	03bf01e1 	.word	0x03bf01e1
   2b674:	03bf007e 	.word	0x03bf007e
   2b678:	020d03bf 	.word	0x020d03bf
   2b67c:	980d      	ldr	r0, [sp, #52]	; 0x34
   2b67e:	930f      	str	r3, [sp, #60]	; 0x3c
   2b680:	4240      	negs	r0, r0
   2b682:	900d      	str	r0, [sp, #52]	; 0x34
   2b684:	f04b 0b04 	orr.w	fp, fp, #4
   2b688:	f89a 3000 	ldrb.w	r3, [sl]
   2b68c:	e794      	b.n	2b5b8 <_svfprintf_r+0xb0>
   2b68e:	aa25      	add	r2, sp, #148	; 0x94
   2b690:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b692:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b694:	f002 fd74 	bl	2e180 <__ssprint_r>
   2b698:	b940      	cbnz	r0, 2b6ac <_svfprintf_r+0x1a4>
   2b69a:	46c8      	mov	r8, r9
   2b69c:	e779      	b.n	2b592 <_svfprintf_r+0x8a>
   2b69e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2b6a0:	b123      	cbz	r3, 2b6ac <_svfprintf_r+0x1a4>
   2b6a2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b6a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b6a6:	aa25      	add	r2, sp, #148	; 0x94
   2b6a8:	f002 fd6a 	bl	2e180 <__ssprint_r>
   2b6ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b6ae:	899b      	ldrh	r3, [r3, #12]
   2b6b0:	f013 0f40 	tst.w	r3, #64	; 0x40
   2b6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b6b6:	bf18      	it	ne
   2b6b8:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2b6bc:	9309      	str	r3, [sp, #36]	; 0x24
   2b6be:	9809      	ldr	r0, [sp, #36]	; 0x24
   2b6c0:	b043      	add	sp, #268	; 0x10c
   2b6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b6c6:	f01b 0f20 	tst.w	fp, #32
   2b6ca:	9311      	str	r3, [sp, #68]	; 0x44
   2b6cc:	f040 81dd 	bne.w	2ba8a <_svfprintf_r+0x582>
   2b6d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b6d2:	f01b 0f10 	tst.w	fp, #16
   2b6d6:	4613      	mov	r3, r2
   2b6d8:	f040 856e 	bne.w	2c1b8 <_svfprintf_r+0xcb0>
   2b6dc:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2b6e0:	f000 856a 	beq.w	2c1b8 <_svfprintf_r+0xcb0>
   2b6e4:	8814      	ldrh	r4, [r2, #0]
   2b6e6:	3204      	adds	r2, #4
   2b6e8:	2500      	movs	r5, #0
   2b6ea:	2301      	movs	r3, #1
   2b6ec:	920f      	str	r2, [sp, #60]	; 0x3c
   2b6ee:	2700      	movs	r7, #0
   2b6f0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2b6f4:	990a      	ldr	r1, [sp, #40]	; 0x28
   2b6f6:	1c4a      	adds	r2, r1, #1
   2b6f8:	f000 8265 	beq.w	2bbc6 <_svfprintf_r+0x6be>
   2b6fc:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   2b700:	9207      	str	r2, [sp, #28]
   2b702:	ea54 0205 	orrs.w	r2, r4, r5
   2b706:	f040 8264 	bne.w	2bbd2 <_svfprintf_r+0x6ca>
   2b70a:	2900      	cmp	r1, #0
   2b70c:	f040 843c 	bne.w	2bf88 <_svfprintf_r+0xa80>
   2b710:	2b00      	cmp	r3, #0
   2b712:	f040 84d7 	bne.w	2c0c4 <_svfprintf_r+0xbbc>
   2b716:	f01b 0301 	ands.w	r3, fp, #1
   2b71a:	930e      	str	r3, [sp, #56]	; 0x38
   2b71c:	f000 8604 	beq.w	2c328 <_svfprintf_r+0xe20>
   2b720:	ae42      	add	r6, sp, #264	; 0x108
   2b722:	2330      	movs	r3, #48	; 0x30
   2b724:	f806 3d41 	strb.w	r3, [r6, #-65]!
   2b728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b72a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b72c:	4293      	cmp	r3, r2
   2b72e:	bfb8      	it	lt
   2b730:	4613      	movlt	r3, r2
   2b732:	9308      	str	r3, [sp, #32]
   2b734:	2300      	movs	r3, #0
   2b736:	9312      	str	r3, [sp, #72]	; 0x48
   2b738:	b117      	cbz	r7, 2b740 <_svfprintf_r+0x238>
   2b73a:	9b08      	ldr	r3, [sp, #32]
   2b73c:	3301      	adds	r3, #1
   2b73e:	9308      	str	r3, [sp, #32]
   2b740:	9b07      	ldr	r3, [sp, #28]
   2b742:	f013 0302 	ands.w	r3, r3, #2
   2b746:	9310      	str	r3, [sp, #64]	; 0x40
   2b748:	d002      	beq.n	2b750 <_svfprintf_r+0x248>
   2b74a:	9b08      	ldr	r3, [sp, #32]
   2b74c:	3302      	adds	r3, #2
   2b74e:	9308      	str	r3, [sp, #32]
   2b750:	9b07      	ldr	r3, [sp, #28]
   2b752:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   2b756:	f040 830e 	bne.w	2bd76 <_svfprintf_r+0x86e>
   2b75a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b75c:	9a08      	ldr	r2, [sp, #32]
   2b75e:	eba3 0b02 	sub.w	fp, r3, r2
   2b762:	f1bb 0f00 	cmp.w	fp, #0
   2b766:	f340 8306 	ble.w	2bd76 <_svfprintf_r+0x86e>
   2b76a:	f1bb 0f10 	cmp.w	fp, #16
   2b76e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b770:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b772:	dd29      	ble.n	2b7c8 <_svfprintf_r+0x2c0>
   2b774:	4643      	mov	r3, r8
   2b776:	4621      	mov	r1, r4
   2b778:	46a8      	mov	r8, r5
   2b77a:	2710      	movs	r7, #16
   2b77c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b77e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b780:	e006      	b.n	2b790 <_svfprintf_r+0x288>
   2b782:	f1ab 0b10 	sub.w	fp, fp, #16
   2b786:	f1bb 0f10 	cmp.w	fp, #16
   2b78a:	f103 0308 	add.w	r3, r3, #8
   2b78e:	dd18      	ble.n	2b7c2 <_svfprintf_r+0x2ba>
   2b790:	3201      	adds	r2, #1
   2b792:	48b7      	ldr	r0, [pc, #732]	; (2ba70 <_svfprintf_r+0x568>)
   2b794:	9226      	str	r2, [sp, #152]	; 0x98
   2b796:	3110      	adds	r1, #16
   2b798:	2a07      	cmp	r2, #7
   2b79a:	9127      	str	r1, [sp, #156]	; 0x9c
   2b79c:	e883 0081 	stmia.w	r3, {r0, r7}
   2b7a0:	ddef      	ble.n	2b782 <_svfprintf_r+0x27a>
   2b7a2:	aa25      	add	r2, sp, #148	; 0x94
   2b7a4:	4629      	mov	r1, r5
   2b7a6:	4620      	mov	r0, r4
   2b7a8:	f002 fcea 	bl	2e180 <__ssprint_r>
   2b7ac:	2800      	cmp	r0, #0
   2b7ae:	f47f af7d 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2b7b2:	f1ab 0b10 	sub.w	fp, fp, #16
   2b7b6:	f1bb 0f10 	cmp.w	fp, #16
   2b7ba:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b7bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b7be:	464b      	mov	r3, r9
   2b7c0:	dce6      	bgt.n	2b790 <_svfprintf_r+0x288>
   2b7c2:	4645      	mov	r5, r8
   2b7c4:	460c      	mov	r4, r1
   2b7c6:	4698      	mov	r8, r3
   2b7c8:	3201      	adds	r2, #1
   2b7ca:	4ba9      	ldr	r3, [pc, #676]	; (2ba70 <_svfprintf_r+0x568>)
   2b7cc:	9226      	str	r2, [sp, #152]	; 0x98
   2b7ce:	445c      	add	r4, fp
   2b7d0:	2a07      	cmp	r2, #7
   2b7d2:	9427      	str	r4, [sp, #156]	; 0x9c
   2b7d4:	e888 0808 	stmia.w	r8, {r3, fp}
   2b7d8:	f300 8498 	bgt.w	2c10c <_svfprintf_r+0xc04>
   2b7dc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b7e0:	f108 0808 	add.w	r8, r8, #8
   2b7e4:	b177      	cbz	r7, 2b804 <_svfprintf_r+0x2fc>
   2b7e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b7e8:	3301      	adds	r3, #1
   2b7ea:	3401      	adds	r4, #1
   2b7ec:	f10d 0177 	add.w	r1, sp, #119	; 0x77
   2b7f0:	2201      	movs	r2, #1
   2b7f2:	2b07      	cmp	r3, #7
   2b7f4:	9427      	str	r4, [sp, #156]	; 0x9c
   2b7f6:	9326      	str	r3, [sp, #152]	; 0x98
   2b7f8:	e888 0006 	stmia.w	r8, {r1, r2}
   2b7fc:	f300 83db 	bgt.w	2bfb6 <_svfprintf_r+0xaae>
   2b800:	f108 0808 	add.w	r8, r8, #8
   2b804:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b806:	b16b      	cbz	r3, 2b824 <_svfprintf_r+0x31c>
   2b808:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b80a:	3301      	adds	r3, #1
   2b80c:	3402      	adds	r4, #2
   2b80e:	a91e      	add	r1, sp, #120	; 0x78
   2b810:	2202      	movs	r2, #2
   2b812:	2b07      	cmp	r3, #7
   2b814:	9427      	str	r4, [sp, #156]	; 0x9c
   2b816:	9326      	str	r3, [sp, #152]	; 0x98
   2b818:	e888 0006 	stmia.w	r8, {r1, r2}
   2b81c:	f300 83d6 	bgt.w	2bfcc <_svfprintf_r+0xac4>
   2b820:	f108 0808 	add.w	r8, r8, #8
   2b824:	2d80      	cmp	r5, #128	; 0x80
   2b826:	f000 8315 	beq.w	2be54 <_svfprintf_r+0x94c>
   2b82a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b82c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b82e:	1a9f      	subs	r7, r3, r2
   2b830:	2f00      	cmp	r7, #0
   2b832:	dd36      	ble.n	2b8a2 <_svfprintf_r+0x39a>
   2b834:	2f10      	cmp	r7, #16
   2b836:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b838:	4d8e      	ldr	r5, [pc, #568]	; (2ba74 <_svfprintf_r+0x56c>)
   2b83a:	dd27      	ble.n	2b88c <_svfprintf_r+0x384>
   2b83c:	4642      	mov	r2, r8
   2b83e:	4621      	mov	r1, r4
   2b840:	46b0      	mov	r8, r6
   2b842:	f04f 0b10 	mov.w	fp, #16
   2b846:	462e      	mov	r6, r5
   2b848:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b84a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b84c:	e004      	b.n	2b858 <_svfprintf_r+0x350>
   2b84e:	3f10      	subs	r7, #16
   2b850:	2f10      	cmp	r7, #16
   2b852:	f102 0208 	add.w	r2, r2, #8
   2b856:	dd15      	ble.n	2b884 <_svfprintf_r+0x37c>
   2b858:	3301      	adds	r3, #1
   2b85a:	3110      	adds	r1, #16
   2b85c:	2b07      	cmp	r3, #7
   2b85e:	9127      	str	r1, [sp, #156]	; 0x9c
   2b860:	9326      	str	r3, [sp, #152]	; 0x98
   2b862:	e882 0840 	stmia.w	r2, {r6, fp}
   2b866:	ddf2      	ble.n	2b84e <_svfprintf_r+0x346>
   2b868:	aa25      	add	r2, sp, #148	; 0x94
   2b86a:	4629      	mov	r1, r5
   2b86c:	4620      	mov	r0, r4
   2b86e:	f002 fc87 	bl	2e180 <__ssprint_r>
   2b872:	2800      	cmp	r0, #0
   2b874:	f47f af1a 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2b878:	3f10      	subs	r7, #16
   2b87a:	2f10      	cmp	r7, #16
   2b87c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b87e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b880:	464a      	mov	r2, r9
   2b882:	dce9      	bgt.n	2b858 <_svfprintf_r+0x350>
   2b884:	4635      	mov	r5, r6
   2b886:	460c      	mov	r4, r1
   2b888:	4646      	mov	r6, r8
   2b88a:	4690      	mov	r8, r2
   2b88c:	3301      	adds	r3, #1
   2b88e:	443c      	add	r4, r7
   2b890:	2b07      	cmp	r3, #7
   2b892:	9427      	str	r4, [sp, #156]	; 0x9c
   2b894:	9326      	str	r3, [sp, #152]	; 0x98
   2b896:	e888 00a0 	stmia.w	r8, {r5, r7}
   2b89a:	f300 8381 	bgt.w	2bfa0 <_svfprintf_r+0xa98>
   2b89e:	f108 0808 	add.w	r8, r8, #8
   2b8a2:	9b07      	ldr	r3, [sp, #28]
   2b8a4:	05df      	lsls	r7, r3, #23
   2b8a6:	f100 8268 	bmi.w	2bd7a <_svfprintf_r+0x872>
   2b8aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b8ac:	990e      	ldr	r1, [sp, #56]	; 0x38
   2b8ae:	f8c8 6000 	str.w	r6, [r8]
   2b8b2:	3301      	adds	r3, #1
   2b8b4:	440c      	add	r4, r1
   2b8b6:	2b07      	cmp	r3, #7
   2b8b8:	9427      	str	r4, [sp, #156]	; 0x9c
   2b8ba:	f8c8 1004 	str.w	r1, [r8, #4]
   2b8be:	9326      	str	r3, [sp, #152]	; 0x98
   2b8c0:	f300 834d 	bgt.w	2bf5e <_svfprintf_r+0xa56>
   2b8c4:	f108 0808 	add.w	r8, r8, #8
   2b8c8:	9b07      	ldr	r3, [sp, #28]
   2b8ca:	075b      	lsls	r3, r3, #29
   2b8cc:	d53a      	bpl.n	2b944 <_svfprintf_r+0x43c>
   2b8ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b8d0:	9a08      	ldr	r2, [sp, #32]
   2b8d2:	1a9d      	subs	r5, r3, r2
   2b8d4:	2d00      	cmp	r5, #0
   2b8d6:	dd35      	ble.n	2b944 <_svfprintf_r+0x43c>
   2b8d8:	2d10      	cmp	r5, #16
   2b8da:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b8dc:	dd20      	ble.n	2b920 <_svfprintf_r+0x418>
   2b8de:	2610      	movs	r6, #16
   2b8e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2b8e2:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   2b8e6:	e004      	b.n	2b8f2 <_svfprintf_r+0x3ea>
   2b8e8:	3d10      	subs	r5, #16
   2b8ea:	2d10      	cmp	r5, #16
   2b8ec:	f108 0808 	add.w	r8, r8, #8
   2b8f0:	dd16      	ble.n	2b920 <_svfprintf_r+0x418>
   2b8f2:	3301      	adds	r3, #1
   2b8f4:	4a5e      	ldr	r2, [pc, #376]	; (2ba70 <_svfprintf_r+0x568>)
   2b8f6:	9326      	str	r3, [sp, #152]	; 0x98
   2b8f8:	3410      	adds	r4, #16
   2b8fa:	2b07      	cmp	r3, #7
   2b8fc:	9427      	str	r4, [sp, #156]	; 0x9c
   2b8fe:	e888 0044 	stmia.w	r8, {r2, r6}
   2b902:	ddf1      	ble.n	2b8e8 <_svfprintf_r+0x3e0>
   2b904:	aa25      	add	r2, sp, #148	; 0x94
   2b906:	4659      	mov	r1, fp
   2b908:	4638      	mov	r0, r7
   2b90a:	f002 fc39 	bl	2e180 <__ssprint_r>
   2b90e:	2800      	cmp	r0, #0
   2b910:	f47f aecc 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2b914:	3d10      	subs	r5, #16
   2b916:	2d10      	cmp	r5, #16
   2b918:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b91a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b91c:	46c8      	mov	r8, r9
   2b91e:	dce8      	bgt.n	2b8f2 <_svfprintf_r+0x3ea>
   2b920:	3301      	adds	r3, #1
   2b922:	4a53      	ldr	r2, [pc, #332]	; (2ba70 <_svfprintf_r+0x568>)
   2b924:	9326      	str	r3, [sp, #152]	; 0x98
   2b926:	442c      	add	r4, r5
   2b928:	2b07      	cmp	r3, #7
   2b92a:	9427      	str	r4, [sp, #156]	; 0x9c
   2b92c:	e888 0024 	stmia.w	r8, {r2, r5}
   2b930:	dd08      	ble.n	2b944 <_svfprintf_r+0x43c>
   2b932:	aa25      	add	r2, sp, #148	; 0x94
   2b934:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b936:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b938:	f002 fc22 	bl	2e180 <__ssprint_r>
   2b93c:	2800      	cmp	r0, #0
   2b93e:	f47f aeb5 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2b942:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b944:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b946:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2b948:	9908      	ldr	r1, [sp, #32]
   2b94a:	428a      	cmp	r2, r1
   2b94c:	bfac      	ite	ge
   2b94e:	189b      	addge	r3, r3, r2
   2b950:	185b      	addlt	r3, r3, r1
   2b952:	9309      	str	r3, [sp, #36]	; 0x24
   2b954:	2c00      	cmp	r4, #0
   2b956:	f040 830d 	bne.w	2bf74 <_svfprintf_r+0xa6c>
   2b95a:	2300      	movs	r3, #0
   2b95c:	9326      	str	r3, [sp, #152]	; 0x98
   2b95e:	46c8      	mov	r8, r9
   2b960:	e5f9      	b.n	2b556 <_svfprintf_r+0x4e>
   2b962:	9311      	str	r3, [sp, #68]	; 0x44
   2b964:	f01b 0320 	ands.w	r3, fp, #32
   2b968:	f040 81e3 	bne.w	2bd32 <_svfprintf_r+0x82a>
   2b96c:	f01b 0210 	ands.w	r2, fp, #16
   2b970:	f040 842e 	bne.w	2c1d0 <_svfprintf_r+0xcc8>
   2b974:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   2b978:	f000 842a 	beq.w	2c1d0 <_svfprintf_r+0xcc8>
   2b97c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2b97e:	4613      	mov	r3, r2
   2b980:	460a      	mov	r2, r1
   2b982:	3204      	adds	r2, #4
   2b984:	880c      	ldrh	r4, [r1, #0]
   2b986:	920f      	str	r2, [sp, #60]	; 0x3c
   2b988:	2500      	movs	r5, #0
   2b98a:	e6b0      	b.n	2b6ee <_svfprintf_r+0x1e6>
   2b98c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b98e:	9311      	str	r3, [sp, #68]	; 0x44
   2b990:	6816      	ldr	r6, [r2, #0]
   2b992:	2400      	movs	r4, #0
   2b994:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
   2b998:	1d15      	adds	r5, r2, #4
   2b99a:	2e00      	cmp	r6, #0
   2b99c:	f000 86a7 	beq.w	2c6ee <_svfprintf_r+0x11e6>
   2b9a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2b9a2:	1c53      	adds	r3, r2, #1
   2b9a4:	f000 8609 	beq.w	2c5ba <_svfprintf_r+0x10b2>
   2b9a8:	4621      	mov	r1, r4
   2b9aa:	4630      	mov	r0, r6
   2b9ac:	f7d4 fc38 	bl	220 <memchr>
   2b9b0:	2800      	cmp	r0, #0
   2b9b2:	f000 86e1 	beq.w	2c778 <_svfprintf_r+0x1270>
   2b9b6:	1b83      	subs	r3, r0, r6
   2b9b8:	930e      	str	r3, [sp, #56]	; 0x38
   2b9ba:	940a      	str	r4, [sp, #40]	; 0x28
   2b9bc:	950f      	str	r5, [sp, #60]	; 0x3c
   2b9be:	f8cd b01c 	str.w	fp, [sp, #28]
   2b9c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2b9c6:	9308      	str	r3, [sp, #32]
   2b9c8:	9412      	str	r4, [sp, #72]	; 0x48
   2b9ca:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b9ce:	e6b3      	b.n	2b738 <_svfprintf_r+0x230>
   2b9d0:	f89a 3000 	ldrb.w	r3, [sl]
   2b9d4:	2201      	movs	r2, #1
   2b9d6:	212b      	movs	r1, #43	; 0x2b
   2b9d8:	e5ee      	b.n	2b5b8 <_svfprintf_r+0xb0>
   2b9da:	f04b 0b20 	orr.w	fp, fp, #32
   2b9de:	f89a 3000 	ldrb.w	r3, [sl]
   2b9e2:	e5e9      	b.n	2b5b8 <_svfprintf_r+0xb0>
   2b9e4:	9311      	str	r3, [sp, #68]	; 0x44
   2b9e6:	2a00      	cmp	r2, #0
   2b9e8:	f040 8795 	bne.w	2c916 <_svfprintf_r+0x140e>
   2b9ec:	4b22      	ldr	r3, [pc, #136]	; (2ba78 <_svfprintf_r+0x570>)
   2b9ee:	9318      	str	r3, [sp, #96]	; 0x60
   2b9f0:	f01b 0f20 	tst.w	fp, #32
   2b9f4:	f040 8111 	bne.w	2bc1a <_svfprintf_r+0x712>
   2b9f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b9fa:	f01b 0f10 	tst.w	fp, #16
   2b9fe:	4613      	mov	r3, r2
   2ba00:	f040 83e1 	bne.w	2c1c6 <_svfprintf_r+0xcbe>
   2ba04:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2ba08:	f000 83dd 	beq.w	2c1c6 <_svfprintf_r+0xcbe>
   2ba0c:	3304      	adds	r3, #4
   2ba0e:	8814      	ldrh	r4, [r2, #0]
   2ba10:	930f      	str	r3, [sp, #60]	; 0x3c
   2ba12:	2500      	movs	r5, #0
   2ba14:	f01b 0f01 	tst.w	fp, #1
   2ba18:	f000 810c 	beq.w	2bc34 <_svfprintf_r+0x72c>
   2ba1c:	ea54 0305 	orrs.w	r3, r4, r5
   2ba20:	f000 8108 	beq.w	2bc34 <_svfprintf_r+0x72c>
   2ba24:	2330      	movs	r3, #48	; 0x30
   2ba26:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   2ba2a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   2ba2e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   2ba32:	f04b 0b02 	orr.w	fp, fp, #2
   2ba36:	2302      	movs	r3, #2
   2ba38:	e659      	b.n	2b6ee <_svfprintf_r+0x1e6>
   2ba3a:	f89a 3000 	ldrb.w	r3, [sl]
   2ba3e:	2900      	cmp	r1, #0
   2ba40:	f47f adba 	bne.w	2b5b8 <_svfprintf_r+0xb0>
   2ba44:	2201      	movs	r2, #1
   2ba46:	2120      	movs	r1, #32
   2ba48:	e5b6      	b.n	2b5b8 <_svfprintf_r+0xb0>
   2ba4a:	f04b 0b01 	orr.w	fp, fp, #1
   2ba4e:	f89a 3000 	ldrb.w	r3, [sl]
   2ba52:	e5b1      	b.n	2b5b8 <_svfprintf_r+0xb0>
   2ba54:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2ba56:	6823      	ldr	r3, [r4, #0]
   2ba58:	930d      	str	r3, [sp, #52]	; 0x34
   2ba5a:	4618      	mov	r0, r3
   2ba5c:	2800      	cmp	r0, #0
   2ba5e:	4623      	mov	r3, r4
   2ba60:	f103 0304 	add.w	r3, r3, #4
   2ba64:	f6ff ae0a 	blt.w	2b67c <_svfprintf_r+0x174>
   2ba68:	930f      	str	r3, [sp, #60]	; 0x3c
   2ba6a:	f89a 3000 	ldrb.w	r3, [sl]
   2ba6e:	e5a3      	b.n	2b5b8 <_svfprintf_r+0xb0>
   2ba70:	00033184 	.word	0x00033184
   2ba74:	00033194 	.word	0x00033194
   2ba78:	00033168 	.word	0x00033168
   2ba7c:	f04b 0b10 	orr.w	fp, fp, #16
   2ba80:	f01b 0f20 	tst.w	fp, #32
   2ba84:	9311      	str	r3, [sp, #68]	; 0x44
   2ba86:	f43f ae23 	beq.w	2b6d0 <_svfprintf_r+0x1c8>
   2ba8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2ba8c:	3507      	adds	r5, #7
   2ba8e:	f025 0307 	bic.w	r3, r5, #7
   2ba92:	f103 0208 	add.w	r2, r3, #8
   2ba96:	e9d3 4500 	ldrd	r4, r5, [r3]
   2ba9a:	920f      	str	r2, [sp, #60]	; 0x3c
   2ba9c:	2301      	movs	r3, #1
   2ba9e:	e626      	b.n	2b6ee <_svfprintf_r+0x1e6>
   2baa0:	f89a 3000 	ldrb.w	r3, [sl]
   2baa4:	2b2a      	cmp	r3, #42	; 0x2a
   2baa6:	f10a 0401 	add.w	r4, sl, #1
   2baaa:	f000 8727 	beq.w	2c8fc <_svfprintf_r+0x13f4>
   2baae:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bab2:	2809      	cmp	r0, #9
   2bab4:	46a2      	mov	sl, r4
   2bab6:	f200 86ad 	bhi.w	2c814 <_svfprintf_r+0x130c>
   2baba:	2300      	movs	r3, #0
   2babc:	461c      	mov	r4, r3
   2babe:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2bac2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2bac6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2baca:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bace:	2809      	cmp	r0, #9
   2bad0:	d9f5      	bls.n	2babe <_svfprintf_r+0x5b6>
   2bad2:	940a      	str	r4, [sp, #40]	; 0x28
   2bad4:	e572      	b.n	2b5bc <_svfprintf_r+0xb4>
   2bad6:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   2bada:	f89a 3000 	ldrb.w	r3, [sl]
   2bade:	e56b      	b.n	2b5b8 <_svfprintf_r+0xb0>
   2bae0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   2bae4:	f89a 3000 	ldrb.w	r3, [sl]
   2bae8:	e566      	b.n	2b5b8 <_svfprintf_r+0xb0>
   2baea:	f89a 3000 	ldrb.w	r3, [sl]
   2baee:	2b6c      	cmp	r3, #108	; 0x6c
   2baf0:	bf03      	ittte	eq
   2baf2:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   2baf6:	f04b 0b20 	orreq.w	fp, fp, #32
   2bafa:	f10a 0a01 	addeq.w	sl, sl, #1
   2bafe:	f04b 0b10 	orrne.w	fp, fp, #16
   2bb02:	e559      	b.n	2b5b8 <_svfprintf_r+0xb0>
   2bb04:	2a00      	cmp	r2, #0
   2bb06:	f040 8711 	bne.w	2c92c <_svfprintf_r+0x1424>
   2bb0a:	f01b 0f20 	tst.w	fp, #32
   2bb0e:	f040 84f9 	bne.w	2c504 <_svfprintf_r+0xffc>
   2bb12:	f01b 0f10 	tst.w	fp, #16
   2bb16:	f040 84ac 	bne.w	2c472 <_svfprintf_r+0xf6a>
   2bb1a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bb1e:	f000 84a8 	beq.w	2c472 <_svfprintf_r+0xf6a>
   2bb22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bb24:	6813      	ldr	r3, [r2, #0]
   2bb26:	3204      	adds	r2, #4
   2bb28:	920f      	str	r2, [sp, #60]	; 0x3c
   2bb2a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2bb2e:	801a      	strh	r2, [r3, #0]
   2bb30:	e511      	b.n	2b556 <_svfprintf_r+0x4e>
   2bb32:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bb34:	4bb3      	ldr	r3, [pc, #716]	; (2be04 <_svfprintf_r+0x8fc>)
   2bb36:	680c      	ldr	r4, [r1, #0]
   2bb38:	9318      	str	r3, [sp, #96]	; 0x60
   2bb3a:	2230      	movs	r2, #48	; 0x30
   2bb3c:	2378      	movs	r3, #120	; 0x78
   2bb3e:	3104      	adds	r1, #4
   2bb40:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   2bb44:	9311      	str	r3, [sp, #68]	; 0x44
   2bb46:	f04b 0b02 	orr.w	fp, fp, #2
   2bb4a:	910f      	str	r1, [sp, #60]	; 0x3c
   2bb4c:	2500      	movs	r5, #0
   2bb4e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   2bb52:	2302      	movs	r3, #2
   2bb54:	e5cb      	b.n	2b6ee <_svfprintf_r+0x1e6>
   2bb56:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bb58:	9311      	str	r3, [sp, #68]	; 0x44
   2bb5a:	680a      	ldr	r2, [r1, #0]
   2bb5c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2bb60:	2300      	movs	r3, #0
   2bb62:	460a      	mov	r2, r1
   2bb64:	461f      	mov	r7, r3
   2bb66:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2bb6a:	3204      	adds	r2, #4
   2bb6c:	2301      	movs	r3, #1
   2bb6e:	9308      	str	r3, [sp, #32]
   2bb70:	f8cd b01c 	str.w	fp, [sp, #28]
   2bb74:	970a      	str	r7, [sp, #40]	; 0x28
   2bb76:	9712      	str	r7, [sp, #72]	; 0x48
   2bb78:	920f      	str	r2, [sp, #60]	; 0x3c
   2bb7a:	930e      	str	r3, [sp, #56]	; 0x38
   2bb7c:	ae28      	add	r6, sp, #160	; 0xa0
   2bb7e:	e5df      	b.n	2b740 <_svfprintf_r+0x238>
   2bb80:	9311      	str	r3, [sp, #68]	; 0x44
   2bb82:	2a00      	cmp	r2, #0
   2bb84:	f040 86ea 	bne.w	2c95c <_svfprintf_r+0x1454>
   2bb88:	f01b 0f20 	tst.w	fp, #32
   2bb8c:	d15d      	bne.n	2bc4a <_svfprintf_r+0x742>
   2bb8e:	f01b 0f10 	tst.w	fp, #16
   2bb92:	f040 8308 	bne.w	2c1a6 <_svfprintf_r+0xc9e>
   2bb96:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bb9a:	f000 8304 	beq.w	2c1a6 <_svfprintf_r+0xc9e>
   2bb9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bba0:	f9b1 4000 	ldrsh.w	r4, [r1]
   2bba4:	3104      	adds	r1, #4
   2bba6:	17e5      	asrs	r5, r4, #31
   2bba8:	4622      	mov	r2, r4
   2bbaa:	462b      	mov	r3, r5
   2bbac:	910f      	str	r1, [sp, #60]	; 0x3c
   2bbae:	2a00      	cmp	r2, #0
   2bbb0:	f173 0300 	sbcs.w	r3, r3, #0
   2bbb4:	db58      	blt.n	2bc68 <_svfprintf_r+0x760>
   2bbb6:	990a      	ldr	r1, [sp, #40]	; 0x28
   2bbb8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bbbc:	1c4a      	adds	r2, r1, #1
   2bbbe:	f04f 0301 	mov.w	r3, #1
   2bbc2:	f47f ad9b 	bne.w	2b6fc <_svfprintf_r+0x1f4>
   2bbc6:	ea54 0205 	orrs.w	r2, r4, r5
   2bbca:	f000 81df 	beq.w	2bf8c <_svfprintf_r+0xa84>
   2bbce:	f8cd b01c 	str.w	fp, [sp, #28]
   2bbd2:	2b01      	cmp	r3, #1
   2bbd4:	f000 827b 	beq.w	2c0ce <_svfprintf_r+0xbc6>
   2bbd8:	2b02      	cmp	r3, #2
   2bbda:	f040 8206 	bne.w	2bfea <_svfprintf_r+0xae2>
   2bbde:	9818      	ldr	r0, [sp, #96]	; 0x60
   2bbe0:	464e      	mov	r6, r9
   2bbe2:	0923      	lsrs	r3, r4, #4
   2bbe4:	f004 010f 	and.w	r1, r4, #15
   2bbe8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   2bbec:	092a      	lsrs	r2, r5, #4
   2bbee:	461c      	mov	r4, r3
   2bbf0:	4615      	mov	r5, r2
   2bbf2:	5c43      	ldrb	r3, [r0, r1]
   2bbf4:	f806 3d01 	strb.w	r3, [r6, #-1]!
   2bbf8:	ea54 0305 	orrs.w	r3, r4, r5
   2bbfc:	d1f1      	bne.n	2bbe2 <_svfprintf_r+0x6da>
   2bbfe:	eba9 0306 	sub.w	r3, r9, r6
   2bc02:	930e      	str	r3, [sp, #56]	; 0x38
   2bc04:	e590      	b.n	2b728 <_svfprintf_r+0x220>
   2bc06:	9311      	str	r3, [sp, #68]	; 0x44
   2bc08:	2a00      	cmp	r2, #0
   2bc0a:	f040 86a3 	bne.w	2c954 <_svfprintf_r+0x144c>
   2bc0e:	4b7e      	ldr	r3, [pc, #504]	; (2be08 <_svfprintf_r+0x900>)
   2bc10:	9318      	str	r3, [sp, #96]	; 0x60
   2bc12:	f01b 0f20 	tst.w	fp, #32
   2bc16:	f43f aeef 	beq.w	2b9f8 <_svfprintf_r+0x4f0>
   2bc1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bc1c:	3507      	adds	r5, #7
   2bc1e:	f025 0307 	bic.w	r3, r5, #7
   2bc22:	f103 0208 	add.w	r2, r3, #8
   2bc26:	f01b 0f01 	tst.w	fp, #1
   2bc2a:	920f      	str	r2, [sp, #60]	; 0x3c
   2bc2c:	e9d3 4500 	ldrd	r4, r5, [r3]
   2bc30:	f47f aef4 	bne.w	2ba1c <_svfprintf_r+0x514>
   2bc34:	2302      	movs	r3, #2
   2bc36:	e55a      	b.n	2b6ee <_svfprintf_r+0x1e6>
   2bc38:	9311      	str	r3, [sp, #68]	; 0x44
   2bc3a:	2a00      	cmp	r2, #0
   2bc3c:	f040 8686 	bne.w	2c94c <_svfprintf_r+0x1444>
   2bc40:	f04b 0b10 	orr.w	fp, fp, #16
   2bc44:	f01b 0f20 	tst.w	fp, #32
   2bc48:	d0a1      	beq.n	2bb8e <_svfprintf_r+0x686>
   2bc4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bc4c:	3507      	adds	r5, #7
   2bc4e:	f025 0507 	bic.w	r5, r5, #7
   2bc52:	e9d5 2300 	ldrd	r2, r3, [r5]
   2bc56:	2a00      	cmp	r2, #0
   2bc58:	f105 0108 	add.w	r1, r5, #8
   2bc5c:	461d      	mov	r5, r3
   2bc5e:	f173 0300 	sbcs.w	r3, r3, #0
   2bc62:	910f      	str	r1, [sp, #60]	; 0x3c
   2bc64:	4614      	mov	r4, r2
   2bc66:	daa6      	bge.n	2bbb6 <_svfprintf_r+0x6ae>
   2bc68:	272d      	movs	r7, #45	; 0x2d
   2bc6a:	4264      	negs	r4, r4
   2bc6c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   2bc70:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2bc74:	2301      	movs	r3, #1
   2bc76:	e53d      	b.n	2b6f4 <_svfprintf_r+0x1ec>
   2bc78:	9311      	str	r3, [sp, #68]	; 0x44
   2bc7a:	2a00      	cmp	r2, #0
   2bc7c:	f040 8662 	bne.w	2c944 <_svfprintf_r+0x143c>
   2bc80:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bc82:	3507      	adds	r5, #7
   2bc84:	f025 0307 	bic.w	r3, r5, #7
   2bc88:	f103 0208 	add.w	r2, r3, #8
   2bc8c:	920f      	str	r2, [sp, #60]	; 0x3c
   2bc8e:	681a      	ldr	r2, [r3, #0]
   2bc90:	9215      	str	r2, [sp, #84]	; 0x54
   2bc92:	685b      	ldr	r3, [r3, #4]
   2bc94:	9314      	str	r3, [sp, #80]	; 0x50
   2bc96:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2bc98:	9d15      	ldr	r5, [sp, #84]	; 0x54
   2bc9a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   2bc9e:	4628      	mov	r0, r5
   2bca0:	4621      	mov	r1, r4
   2bca2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bca6:	4b59      	ldr	r3, [pc, #356]	; (2be0c <_svfprintf_r+0x904>)
   2bca8:	f7d5 f9ea 	bl	1080 <__aeabi_dcmpun>
   2bcac:	2800      	cmp	r0, #0
   2bcae:	f040 834a 	bne.w	2c346 <_svfprintf_r+0xe3e>
   2bcb2:	4628      	mov	r0, r5
   2bcb4:	4621      	mov	r1, r4
   2bcb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bcba:	4b54      	ldr	r3, [pc, #336]	; (2be0c <_svfprintf_r+0x904>)
   2bcbc:	f7d5 f9c2 	bl	1044 <__aeabi_dcmple>
   2bcc0:	2800      	cmp	r0, #0
   2bcc2:	f040 8340 	bne.w	2c346 <_svfprintf_r+0xe3e>
   2bcc6:	a815      	add	r0, sp, #84	; 0x54
   2bcc8:	c80d      	ldmia	r0, {r0, r2, r3}
   2bcca:	9914      	ldr	r1, [sp, #80]	; 0x50
   2bccc:	f7d5 f9b0 	bl	1030 <__aeabi_dcmplt>
   2bcd0:	2800      	cmp	r0, #0
   2bcd2:	f040 8530 	bne.w	2c736 <_svfprintf_r+0x122e>
   2bcd6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bcda:	4e4d      	ldr	r6, [pc, #308]	; (2be10 <_svfprintf_r+0x908>)
   2bcdc:	4b4d      	ldr	r3, [pc, #308]	; (2be14 <_svfprintf_r+0x90c>)
   2bcde:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   2bce2:	9007      	str	r0, [sp, #28]
   2bce4:	9811      	ldr	r0, [sp, #68]	; 0x44
   2bce6:	2203      	movs	r2, #3
   2bce8:	2100      	movs	r1, #0
   2bcea:	9208      	str	r2, [sp, #32]
   2bcec:	910a      	str	r1, [sp, #40]	; 0x28
   2bcee:	2847      	cmp	r0, #71	; 0x47
   2bcf0:	bfd8      	it	le
   2bcf2:	461e      	movle	r6, r3
   2bcf4:	920e      	str	r2, [sp, #56]	; 0x38
   2bcf6:	9112      	str	r1, [sp, #72]	; 0x48
   2bcf8:	e51e      	b.n	2b738 <_svfprintf_r+0x230>
   2bcfa:	f04b 0b08 	orr.w	fp, fp, #8
   2bcfe:	f89a 3000 	ldrb.w	r3, [sl]
   2bd02:	e459      	b.n	2b5b8 <_svfprintf_r+0xb0>
   2bd04:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bd08:	2300      	movs	r3, #0
   2bd0a:	461c      	mov	r4, r3
   2bd0c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2bd10:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2bd14:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2bd18:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bd1c:	2809      	cmp	r0, #9
   2bd1e:	d9f5      	bls.n	2bd0c <_svfprintf_r+0x804>
   2bd20:	940d      	str	r4, [sp, #52]	; 0x34
   2bd22:	e44b      	b.n	2b5bc <_svfprintf_r+0xb4>
   2bd24:	f04b 0b10 	orr.w	fp, fp, #16
   2bd28:	9311      	str	r3, [sp, #68]	; 0x44
   2bd2a:	f01b 0320 	ands.w	r3, fp, #32
   2bd2e:	f43f ae1d 	beq.w	2b96c <_svfprintf_r+0x464>
   2bd32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bd34:	3507      	adds	r5, #7
   2bd36:	f025 0307 	bic.w	r3, r5, #7
   2bd3a:	f103 0208 	add.w	r2, r3, #8
   2bd3e:	e9d3 4500 	ldrd	r4, r5, [r3]
   2bd42:	920f      	str	r2, [sp, #60]	; 0x3c
   2bd44:	2300      	movs	r3, #0
   2bd46:	e4d2      	b.n	2b6ee <_svfprintf_r+0x1e6>
   2bd48:	9311      	str	r3, [sp, #68]	; 0x44
   2bd4a:	2a00      	cmp	r2, #0
   2bd4c:	f040 85e7 	bne.w	2c91e <_svfprintf_r+0x1416>
   2bd50:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2bd52:	2a00      	cmp	r2, #0
   2bd54:	f43f aca3 	beq.w	2b69e <_svfprintf_r+0x196>
   2bd58:	2300      	movs	r3, #0
   2bd5a:	2101      	movs	r1, #1
   2bd5c:	461f      	mov	r7, r3
   2bd5e:	9108      	str	r1, [sp, #32]
   2bd60:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2bd64:	f8cd b01c 	str.w	fp, [sp, #28]
   2bd68:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2bd6c:	930a      	str	r3, [sp, #40]	; 0x28
   2bd6e:	9312      	str	r3, [sp, #72]	; 0x48
   2bd70:	910e      	str	r1, [sp, #56]	; 0x38
   2bd72:	ae28      	add	r6, sp, #160	; 0xa0
   2bd74:	e4e4      	b.n	2b740 <_svfprintf_r+0x238>
   2bd76:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bd78:	e534      	b.n	2b7e4 <_svfprintf_r+0x2dc>
   2bd7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bd7c:	2b65      	cmp	r3, #101	; 0x65
   2bd7e:	f340 80a7 	ble.w	2bed0 <_svfprintf_r+0x9c8>
   2bd82:	a815      	add	r0, sp, #84	; 0x54
   2bd84:	c80d      	ldmia	r0, {r0, r2, r3}
   2bd86:	9914      	ldr	r1, [sp, #80]	; 0x50
   2bd88:	f7d5 f948 	bl	101c <__aeabi_dcmpeq>
   2bd8c:	2800      	cmp	r0, #0
   2bd8e:	f000 8150 	beq.w	2c032 <_svfprintf_r+0xb2a>
   2bd92:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bd94:	4a20      	ldr	r2, [pc, #128]	; (2be18 <_svfprintf_r+0x910>)
   2bd96:	f8c8 2000 	str.w	r2, [r8]
   2bd9a:	3301      	adds	r3, #1
   2bd9c:	3401      	adds	r4, #1
   2bd9e:	2201      	movs	r2, #1
   2bda0:	2b07      	cmp	r3, #7
   2bda2:	9427      	str	r4, [sp, #156]	; 0x9c
   2bda4:	9326      	str	r3, [sp, #152]	; 0x98
   2bda6:	f8c8 2004 	str.w	r2, [r8, #4]
   2bdaa:	f300 836a 	bgt.w	2c482 <_svfprintf_r+0xf7a>
   2bdae:	f108 0808 	add.w	r8, r8, #8
   2bdb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2bdb4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2bdb6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bdb8:	4293      	cmp	r3, r2
   2bdba:	db03      	blt.n	2bdc4 <_svfprintf_r+0x8bc>
   2bdbc:	9b07      	ldr	r3, [sp, #28]
   2bdbe:	07dd      	lsls	r5, r3, #31
   2bdc0:	f57f ad82 	bpl.w	2b8c8 <_svfprintf_r+0x3c0>
   2bdc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bdc6:	9919      	ldr	r1, [sp, #100]	; 0x64
   2bdc8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2bdca:	f8c8 2000 	str.w	r2, [r8]
   2bdce:	3301      	adds	r3, #1
   2bdd0:	440c      	add	r4, r1
   2bdd2:	2b07      	cmp	r3, #7
   2bdd4:	f8c8 1004 	str.w	r1, [r8, #4]
   2bdd8:	9427      	str	r4, [sp, #156]	; 0x9c
   2bdda:	9326      	str	r3, [sp, #152]	; 0x98
   2bddc:	f300 839e 	bgt.w	2c51c <_svfprintf_r+0x1014>
   2bde0:	f108 0808 	add.w	r8, r8, #8
   2bde4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bde6:	1e5e      	subs	r6, r3, #1
   2bde8:	2e00      	cmp	r6, #0
   2bdea:	f77f ad6d 	ble.w	2b8c8 <_svfprintf_r+0x3c0>
   2bdee:	2e10      	cmp	r6, #16
   2bdf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bdf2:	4d0a      	ldr	r5, [pc, #40]	; (2be1c <_svfprintf_r+0x914>)
   2bdf4:	f340 81f5 	ble.w	2c1e2 <_svfprintf_r+0xcda>
   2bdf8:	4622      	mov	r2, r4
   2bdfa:	2710      	movs	r7, #16
   2bdfc:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2be00:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2be02:	e013      	b.n	2be2c <_svfprintf_r+0x924>
   2be04:	00033168 	.word	0x00033168
   2be08:	00033154 	.word	0x00033154
   2be0c:	7fefffff 	.word	0x7fefffff
   2be10:	00033148 	.word	0x00033148
   2be14:	00033144 	.word	0x00033144
   2be18:	00032cbc 	.word	0x00032cbc
   2be1c:	00033194 	.word	0x00033194
   2be20:	f108 0808 	add.w	r8, r8, #8
   2be24:	3e10      	subs	r6, #16
   2be26:	2e10      	cmp	r6, #16
   2be28:	f340 81da 	ble.w	2c1e0 <_svfprintf_r+0xcd8>
   2be2c:	3301      	adds	r3, #1
   2be2e:	3210      	adds	r2, #16
   2be30:	2b07      	cmp	r3, #7
   2be32:	9227      	str	r2, [sp, #156]	; 0x9c
   2be34:	9326      	str	r3, [sp, #152]	; 0x98
   2be36:	e888 00a0 	stmia.w	r8, {r5, r7}
   2be3a:	ddf1      	ble.n	2be20 <_svfprintf_r+0x918>
   2be3c:	aa25      	add	r2, sp, #148	; 0x94
   2be3e:	4621      	mov	r1, r4
   2be40:	4658      	mov	r0, fp
   2be42:	f002 f99d 	bl	2e180 <__ssprint_r>
   2be46:	2800      	cmp	r0, #0
   2be48:	f47f ac30 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2be4c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2be4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2be50:	46c8      	mov	r8, r9
   2be52:	e7e7      	b.n	2be24 <_svfprintf_r+0x91c>
   2be54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2be56:	9a08      	ldr	r2, [sp, #32]
   2be58:	1a9f      	subs	r7, r3, r2
   2be5a:	2f00      	cmp	r7, #0
   2be5c:	f77f ace5 	ble.w	2b82a <_svfprintf_r+0x322>
   2be60:	2f10      	cmp	r7, #16
   2be62:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2be64:	4db6      	ldr	r5, [pc, #728]	; (2c140 <_svfprintf_r+0xc38>)
   2be66:	dd27      	ble.n	2beb8 <_svfprintf_r+0x9b0>
   2be68:	4642      	mov	r2, r8
   2be6a:	4621      	mov	r1, r4
   2be6c:	46b0      	mov	r8, r6
   2be6e:	f04f 0b10 	mov.w	fp, #16
   2be72:	462e      	mov	r6, r5
   2be74:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2be76:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2be78:	e004      	b.n	2be84 <_svfprintf_r+0x97c>
   2be7a:	3f10      	subs	r7, #16
   2be7c:	2f10      	cmp	r7, #16
   2be7e:	f102 0208 	add.w	r2, r2, #8
   2be82:	dd15      	ble.n	2beb0 <_svfprintf_r+0x9a8>
   2be84:	3301      	adds	r3, #1
   2be86:	3110      	adds	r1, #16
   2be88:	2b07      	cmp	r3, #7
   2be8a:	9127      	str	r1, [sp, #156]	; 0x9c
   2be8c:	9326      	str	r3, [sp, #152]	; 0x98
   2be8e:	e882 0840 	stmia.w	r2, {r6, fp}
   2be92:	ddf2      	ble.n	2be7a <_svfprintf_r+0x972>
   2be94:	aa25      	add	r2, sp, #148	; 0x94
   2be96:	4629      	mov	r1, r5
   2be98:	4620      	mov	r0, r4
   2be9a:	f002 f971 	bl	2e180 <__ssprint_r>
   2be9e:	2800      	cmp	r0, #0
   2bea0:	f47f ac04 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2bea4:	3f10      	subs	r7, #16
   2bea6:	2f10      	cmp	r7, #16
   2bea8:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2beaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2beac:	464a      	mov	r2, r9
   2beae:	dce9      	bgt.n	2be84 <_svfprintf_r+0x97c>
   2beb0:	4635      	mov	r5, r6
   2beb2:	460c      	mov	r4, r1
   2beb4:	4646      	mov	r6, r8
   2beb6:	4690      	mov	r8, r2
   2beb8:	3301      	adds	r3, #1
   2beba:	443c      	add	r4, r7
   2bebc:	2b07      	cmp	r3, #7
   2bebe:	9427      	str	r4, [sp, #156]	; 0x9c
   2bec0:	9326      	str	r3, [sp, #152]	; 0x98
   2bec2:	e888 00a0 	stmia.w	r8, {r5, r7}
   2bec6:	f300 8232 	bgt.w	2c32e <_svfprintf_r+0xe26>
   2beca:	f108 0808 	add.w	r8, r8, #8
   2bece:	e4ac      	b.n	2b82a <_svfprintf_r+0x322>
   2bed0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bed2:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2bed4:	2b01      	cmp	r3, #1
   2bed6:	f340 81fe 	ble.w	2c2d6 <_svfprintf_r+0xdce>
   2beda:	3701      	adds	r7, #1
   2bedc:	3401      	adds	r4, #1
   2bede:	2301      	movs	r3, #1
   2bee0:	2f07      	cmp	r7, #7
   2bee2:	9427      	str	r4, [sp, #156]	; 0x9c
   2bee4:	9726      	str	r7, [sp, #152]	; 0x98
   2bee6:	f8c8 6000 	str.w	r6, [r8]
   2beea:	f8c8 3004 	str.w	r3, [r8, #4]
   2beee:	f300 8203 	bgt.w	2c2f8 <_svfprintf_r+0xdf0>
   2bef2:	f108 0808 	add.w	r8, r8, #8
   2bef6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2bef8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2befa:	f8c8 3000 	str.w	r3, [r8]
   2befe:	3701      	adds	r7, #1
   2bf00:	4414      	add	r4, r2
   2bf02:	2f07      	cmp	r7, #7
   2bf04:	9427      	str	r4, [sp, #156]	; 0x9c
   2bf06:	9726      	str	r7, [sp, #152]	; 0x98
   2bf08:	f8c8 2004 	str.w	r2, [r8, #4]
   2bf0c:	f300 8200 	bgt.w	2c310 <_svfprintf_r+0xe08>
   2bf10:	f108 0808 	add.w	r8, r8, #8
   2bf14:	a815      	add	r0, sp, #84	; 0x54
   2bf16:	c80d      	ldmia	r0, {r0, r2, r3}
   2bf18:	9914      	ldr	r1, [sp, #80]	; 0x50
   2bf1a:	f7d5 f87f 	bl	101c <__aeabi_dcmpeq>
   2bf1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bf20:	2800      	cmp	r0, #0
   2bf22:	f040 8101 	bne.w	2c128 <_svfprintf_r+0xc20>
   2bf26:	3b01      	subs	r3, #1
   2bf28:	3701      	adds	r7, #1
   2bf2a:	3601      	adds	r6, #1
   2bf2c:	441c      	add	r4, r3
   2bf2e:	2f07      	cmp	r7, #7
   2bf30:	9726      	str	r7, [sp, #152]	; 0x98
   2bf32:	9427      	str	r4, [sp, #156]	; 0x9c
   2bf34:	f8c8 6000 	str.w	r6, [r8]
   2bf38:	f8c8 3004 	str.w	r3, [r8, #4]
   2bf3c:	f300 8127 	bgt.w	2c18e <_svfprintf_r+0xc86>
   2bf40:	f108 0808 	add.w	r8, r8, #8
   2bf44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2bf46:	f8c8 2004 	str.w	r2, [r8, #4]
   2bf4a:	3701      	adds	r7, #1
   2bf4c:	4414      	add	r4, r2
   2bf4e:	ab21      	add	r3, sp, #132	; 0x84
   2bf50:	2f07      	cmp	r7, #7
   2bf52:	9427      	str	r4, [sp, #156]	; 0x9c
   2bf54:	9726      	str	r7, [sp, #152]	; 0x98
   2bf56:	f8c8 3000 	str.w	r3, [r8]
   2bf5a:	f77f acb3 	ble.w	2b8c4 <_svfprintf_r+0x3bc>
   2bf5e:	aa25      	add	r2, sp, #148	; 0x94
   2bf60:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bf62:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bf64:	f002 f90c 	bl	2e180 <__ssprint_r>
   2bf68:	2800      	cmp	r0, #0
   2bf6a:	f47f ab9f 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2bf6e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bf70:	46c8      	mov	r8, r9
   2bf72:	e4a9      	b.n	2b8c8 <_svfprintf_r+0x3c0>
   2bf74:	aa25      	add	r2, sp, #148	; 0x94
   2bf76:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bf78:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bf7a:	f002 f901 	bl	2e180 <__ssprint_r>
   2bf7e:	2800      	cmp	r0, #0
   2bf80:	f43f aceb 	beq.w	2b95a <_svfprintf_r+0x452>
   2bf84:	f7ff bb92 	b.w	2b6ac <_svfprintf_r+0x1a4>
   2bf88:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2bf8c:	2b01      	cmp	r3, #1
   2bf8e:	f000 8134 	beq.w	2c1fa <_svfprintf_r+0xcf2>
   2bf92:	2b02      	cmp	r3, #2
   2bf94:	d125      	bne.n	2bfe2 <_svfprintf_r+0xada>
   2bf96:	f8cd b01c 	str.w	fp, [sp, #28]
   2bf9a:	2400      	movs	r4, #0
   2bf9c:	2500      	movs	r5, #0
   2bf9e:	e61e      	b.n	2bbde <_svfprintf_r+0x6d6>
   2bfa0:	aa25      	add	r2, sp, #148	; 0x94
   2bfa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bfa4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bfa6:	f002 f8eb 	bl	2e180 <__ssprint_r>
   2bfaa:	2800      	cmp	r0, #0
   2bfac:	f47f ab7e 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2bfb0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bfb2:	46c8      	mov	r8, r9
   2bfb4:	e475      	b.n	2b8a2 <_svfprintf_r+0x39a>
   2bfb6:	aa25      	add	r2, sp, #148	; 0x94
   2bfb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bfba:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bfbc:	f002 f8e0 	bl	2e180 <__ssprint_r>
   2bfc0:	2800      	cmp	r0, #0
   2bfc2:	f47f ab73 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2bfc6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bfc8:	46c8      	mov	r8, r9
   2bfca:	e41b      	b.n	2b804 <_svfprintf_r+0x2fc>
   2bfcc:	aa25      	add	r2, sp, #148	; 0x94
   2bfce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bfd0:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bfd2:	f002 f8d5 	bl	2e180 <__ssprint_r>
   2bfd6:	2800      	cmp	r0, #0
   2bfd8:	f47f ab68 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2bfdc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bfde:	46c8      	mov	r8, r9
   2bfe0:	e420      	b.n	2b824 <_svfprintf_r+0x31c>
   2bfe2:	f8cd b01c 	str.w	fp, [sp, #28]
   2bfe6:	2400      	movs	r4, #0
   2bfe8:	2500      	movs	r5, #0
   2bfea:	4649      	mov	r1, r9
   2bfec:	e000      	b.n	2bff0 <_svfprintf_r+0xae8>
   2bfee:	4631      	mov	r1, r6
   2bff0:	08e2      	lsrs	r2, r4, #3
   2bff2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   2bff6:	08e8      	lsrs	r0, r5, #3
   2bff8:	f004 0307 	and.w	r3, r4, #7
   2bffc:	4605      	mov	r5, r0
   2bffe:	4614      	mov	r4, r2
   2c000:	3330      	adds	r3, #48	; 0x30
   2c002:	ea54 0205 	orrs.w	r2, r4, r5
   2c006:	f801 3c01 	strb.w	r3, [r1, #-1]
   2c00a:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
   2c00e:	d1ee      	bne.n	2bfee <_svfprintf_r+0xae6>
   2c010:	9a07      	ldr	r2, [sp, #28]
   2c012:	07d2      	lsls	r2, r2, #31
   2c014:	f57f adf3 	bpl.w	2bbfe <_svfprintf_r+0x6f6>
   2c018:	2b30      	cmp	r3, #48	; 0x30
   2c01a:	f43f adf0 	beq.w	2bbfe <_svfprintf_r+0x6f6>
   2c01e:	3902      	subs	r1, #2
   2c020:	2330      	movs	r3, #48	; 0x30
   2c022:	f806 3c01 	strb.w	r3, [r6, #-1]
   2c026:	eba9 0301 	sub.w	r3, r9, r1
   2c02a:	930e      	str	r3, [sp, #56]	; 0x38
   2c02c:	460e      	mov	r6, r1
   2c02e:	f7ff bb7b 	b.w	2b728 <_svfprintf_r+0x220>
   2c032:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c034:	2900      	cmp	r1, #0
   2c036:	f340 822e 	ble.w	2c496 <_svfprintf_r+0xf8e>
   2c03a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c03c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2c03e:	4293      	cmp	r3, r2
   2c040:	bfa8      	it	ge
   2c042:	4613      	movge	r3, r2
   2c044:	2b00      	cmp	r3, #0
   2c046:	461f      	mov	r7, r3
   2c048:	dd0d      	ble.n	2c066 <_svfprintf_r+0xb5e>
   2c04a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c04c:	f8c8 6000 	str.w	r6, [r8]
   2c050:	3301      	adds	r3, #1
   2c052:	443c      	add	r4, r7
   2c054:	2b07      	cmp	r3, #7
   2c056:	9427      	str	r4, [sp, #156]	; 0x9c
   2c058:	f8c8 7004 	str.w	r7, [r8, #4]
   2c05c:	9326      	str	r3, [sp, #152]	; 0x98
   2c05e:	f300 831f 	bgt.w	2c6a0 <_svfprintf_r+0x1198>
   2c062:	f108 0808 	add.w	r8, r8, #8
   2c066:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c068:	2f00      	cmp	r7, #0
   2c06a:	bfa8      	it	ge
   2c06c:	1bdb      	subge	r3, r3, r7
   2c06e:	2b00      	cmp	r3, #0
   2c070:	461f      	mov	r7, r3
   2c072:	f340 80d6 	ble.w	2c222 <_svfprintf_r+0xd1a>
   2c076:	2f10      	cmp	r7, #16
   2c078:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c07a:	4d31      	ldr	r5, [pc, #196]	; (2c140 <_svfprintf_r+0xc38>)
   2c07c:	f340 81ed 	ble.w	2c45a <_svfprintf_r+0xf52>
   2c080:	4642      	mov	r2, r8
   2c082:	4621      	mov	r1, r4
   2c084:	46b0      	mov	r8, r6
   2c086:	f04f 0b10 	mov.w	fp, #16
   2c08a:	462e      	mov	r6, r5
   2c08c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c08e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2c090:	e004      	b.n	2c09c <_svfprintf_r+0xb94>
   2c092:	3208      	adds	r2, #8
   2c094:	3f10      	subs	r7, #16
   2c096:	2f10      	cmp	r7, #16
   2c098:	f340 81db 	ble.w	2c452 <_svfprintf_r+0xf4a>
   2c09c:	3301      	adds	r3, #1
   2c09e:	3110      	adds	r1, #16
   2c0a0:	2b07      	cmp	r3, #7
   2c0a2:	9127      	str	r1, [sp, #156]	; 0x9c
   2c0a4:	9326      	str	r3, [sp, #152]	; 0x98
   2c0a6:	e882 0840 	stmia.w	r2, {r6, fp}
   2c0aa:	ddf2      	ble.n	2c092 <_svfprintf_r+0xb8a>
   2c0ac:	aa25      	add	r2, sp, #148	; 0x94
   2c0ae:	4629      	mov	r1, r5
   2c0b0:	4620      	mov	r0, r4
   2c0b2:	f002 f865 	bl	2e180 <__ssprint_r>
   2c0b6:	2800      	cmp	r0, #0
   2c0b8:	f47f aaf8 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c0bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2c0be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c0c0:	464a      	mov	r2, r9
   2c0c2:	e7e7      	b.n	2c094 <_svfprintf_r+0xb8c>
   2c0c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c0c6:	930e      	str	r3, [sp, #56]	; 0x38
   2c0c8:	464e      	mov	r6, r9
   2c0ca:	f7ff bb2d 	b.w	2b728 <_svfprintf_r+0x220>
   2c0ce:	2d00      	cmp	r5, #0
   2c0d0:	bf08      	it	eq
   2c0d2:	2c0a      	cmpeq	r4, #10
   2c0d4:	f0c0 808f 	bcc.w	2c1f6 <_svfprintf_r+0xcee>
   2c0d8:	464e      	mov	r6, r9
   2c0da:	4620      	mov	r0, r4
   2c0dc:	4629      	mov	r1, r5
   2c0de:	220a      	movs	r2, #10
   2c0e0:	2300      	movs	r3, #0
   2c0e2:	f7d5 f80b 	bl	10fc <__aeabi_uldivmod>
   2c0e6:	3230      	adds	r2, #48	; 0x30
   2c0e8:	f806 2d01 	strb.w	r2, [r6, #-1]!
   2c0ec:	4620      	mov	r0, r4
   2c0ee:	4629      	mov	r1, r5
   2c0f0:	2300      	movs	r3, #0
   2c0f2:	220a      	movs	r2, #10
   2c0f4:	f7d5 f802 	bl	10fc <__aeabi_uldivmod>
   2c0f8:	4604      	mov	r4, r0
   2c0fa:	460d      	mov	r5, r1
   2c0fc:	ea54 0305 	orrs.w	r3, r4, r5
   2c100:	d1eb      	bne.n	2c0da <_svfprintf_r+0xbd2>
   2c102:	eba9 0306 	sub.w	r3, r9, r6
   2c106:	930e      	str	r3, [sp, #56]	; 0x38
   2c108:	f7ff bb0e 	b.w	2b728 <_svfprintf_r+0x220>
   2c10c:	aa25      	add	r2, sp, #148	; 0x94
   2c10e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c110:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c112:	f002 f835 	bl	2e180 <__ssprint_r>
   2c116:	2800      	cmp	r0, #0
   2c118:	f47f aac8 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c11c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c120:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c122:	46c8      	mov	r8, r9
   2c124:	f7ff bb5e 	b.w	2b7e4 <_svfprintf_r+0x2dc>
   2c128:	1e5e      	subs	r6, r3, #1
   2c12a:	2e00      	cmp	r6, #0
   2c12c:	f77f af0a 	ble.w	2bf44 <_svfprintf_r+0xa3c>
   2c130:	2e10      	cmp	r6, #16
   2c132:	4d03      	ldr	r5, [pc, #12]	; (2c140 <_svfprintf_r+0xc38>)
   2c134:	dd22      	ble.n	2c17c <_svfprintf_r+0xc74>
   2c136:	4622      	mov	r2, r4
   2c138:	f04f 0b10 	mov.w	fp, #16
   2c13c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c13e:	e006      	b.n	2c14e <_svfprintf_r+0xc46>
   2c140:	00033194 	.word	0x00033194
   2c144:	3e10      	subs	r6, #16
   2c146:	2e10      	cmp	r6, #16
   2c148:	f108 0808 	add.w	r8, r8, #8
   2c14c:	dd15      	ble.n	2c17a <_svfprintf_r+0xc72>
   2c14e:	3701      	adds	r7, #1
   2c150:	3210      	adds	r2, #16
   2c152:	2f07      	cmp	r7, #7
   2c154:	9227      	str	r2, [sp, #156]	; 0x9c
   2c156:	9726      	str	r7, [sp, #152]	; 0x98
   2c158:	e888 0820 	stmia.w	r8, {r5, fp}
   2c15c:	ddf2      	ble.n	2c144 <_svfprintf_r+0xc3c>
   2c15e:	aa25      	add	r2, sp, #148	; 0x94
   2c160:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c162:	4620      	mov	r0, r4
   2c164:	f002 f80c 	bl	2e180 <__ssprint_r>
   2c168:	2800      	cmp	r0, #0
   2c16a:	f47f aa9f 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c16e:	3e10      	subs	r6, #16
   2c170:	2e10      	cmp	r6, #16
   2c172:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c174:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c176:	46c8      	mov	r8, r9
   2c178:	dce9      	bgt.n	2c14e <_svfprintf_r+0xc46>
   2c17a:	4614      	mov	r4, r2
   2c17c:	3701      	adds	r7, #1
   2c17e:	4434      	add	r4, r6
   2c180:	2f07      	cmp	r7, #7
   2c182:	9427      	str	r4, [sp, #156]	; 0x9c
   2c184:	9726      	str	r7, [sp, #152]	; 0x98
   2c186:	e888 0060 	stmia.w	r8, {r5, r6}
   2c18a:	f77f aed9 	ble.w	2bf40 <_svfprintf_r+0xa38>
   2c18e:	aa25      	add	r2, sp, #148	; 0x94
   2c190:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c192:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c194:	f001 fff4 	bl	2e180 <__ssprint_r>
   2c198:	2800      	cmp	r0, #0
   2c19a:	f47f aa87 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c19e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c1a0:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c1a2:	46c8      	mov	r8, r9
   2c1a4:	e6ce      	b.n	2bf44 <_svfprintf_r+0xa3c>
   2c1a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c1a8:	6814      	ldr	r4, [r2, #0]
   2c1aa:	4613      	mov	r3, r2
   2c1ac:	3304      	adds	r3, #4
   2c1ae:	17e5      	asrs	r5, r4, #31
   2c1b0:	930f      	str	r3, [sp, #60]	; 0x3c
   2c1b2:	4622      	mov	r2, r4
   2c1b4:	462b      	mov	r3, r5
   2c1b6:	e4fa      	b.n	2bbae <_svfprintf_r+0x6a6>
   2c1b8:	3204      	adds	r2, #4
   2c1ba:	681c      	ldr	r4, [r3, #0]
   2c1bc:	920f      	str	r2, [sp, #60]	; 0x3c
   2c1be:	2301      	movs	r3, #1
   2c1c0:	2500      	movs	r5, #0
   2c1c2:	f7ff ba94 	b.w	2b6ee <_svfprintf_r+0x1e6>
   2c1c6:	681c      	ldr	r4, [r3, #0]
   2c1c8:	3304      	adds	r3, #4
   2c1ca:	930f      	str	r3, [sp, #60]	; 0x3c
   2c1cc:	2500      	movs	r5, #0
   2c1ce:	e421      	b.n	2ba14 <_svfprintf_r+0x50c>
   2c1d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2c1d2:	460a      	mov	r2, r1
   2c1d4:	3204      	adds	r2, #4
   2c1d6:	680c      	ldr	r4, [r1, #0]
   2c1d8:	920f      	str	r2, [sp, #60]	; 0x3c
   2c1da:	2500      	movs	r5, #0
   2c1dc:	f7ff ba87 	b.w	2b6ee <_svfprintf_r+0x1e6>
   2c1e0:	4614      	mov	r4, r2
   2c1e2:	3301      	adds	r3, #1
   2c1e4:	4434      	add	r4, r6
   2c1e6:	2b07      	cmp	r3, #7
   2c1e8:	9427      	str	r4, [sp, #156]	; 0x9c
   2c1ea:	9326      	str	r3, [sp, #152]	; 0x98
   2c1ec:	e888 0060 	stmia.w	r8, {r5, r6}
   2c1f0:	f77f ab68 	ble.w	2b8c4 <_svfprintf_r+0x3bc>
   2c1f4:	e6b3      	b.n	2bf5e <_svfprintf_r+0xa56>
   2c1f6:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2c1fa:	f8cd b01c 	str.w	fp, [sp, #28]
   2c1fe:	ae42      	add	r6, sp, #264	; 0x108
   2c200:	3430      	adds	r4, #48	; 0x30
   2c202:	2301      	movs	r3, #1
   2c204:	f806 4d41 	strb.w	r4, [r6, #-65]!
   2c208:	930e      	str	r3, [sp, #56]	; 0x38
   2c20a:	f7ff ba8d 	b.w	2b728 <_svfprintf_r+0x220>
   2c20e:	aa25      	add	r2, sp, #148	; 0x94
   2c210:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c212:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c214:	f001 ffb4 	bl	2e180 <__ssprint_r>
   2c218:	2800      	cmp	r0, #0
   2c21a:	f47f aa47 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c21e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c220:	46c8      	mov	r8, r9
   2c222:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c224:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c226:	429a      	cmp	r2, r3
   2c228:	db44      	blt.n	2c2b4 <_svfprintf_r+0xdac>
   2c22a:	9b07      	ldr	r3, [sp, #28]
   2c22c:	07d9      	lsls	r1, r3, #31
   2c22e:	d441      	bmi.n	2c2b4 <_svfprintf_r+0xdac>
   2c230:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c232:	9812      	ldr	r0, [sp, #72]	; 0x48
   2c234:	1a9a      	subs	r2, r3, r2
   2c236:	1a1d      	subs	r5, r3, r0
   2c238:	4295      	cmp	r5, r2
   2c23a:	bfa8      	it	ge
   2c23c:	4615      	movge	r5, r2
   2c23e:	2d00      	cmp	r5, #0
   2c240:	dd0e      	ble.n	2c260 <_svfprintf_r+0xd58>
   2c242:	9926      	ldr	r1, [sp, #152]	; 0x98
   2c244:	f8c8 5004 	str.w	r5, [r8, #4]
   2c248:	3101      	adds	r1, #1
   2c24a:	4406      	add	r6, r0
   2c24c:	442c      	add	r4, r5
   2c24e:	2907      	cmp	r1, #7
   2c250:	f8c8 6000 	str.w	r6, [r8]
   2c254:	9427      	str	r4, [sp, #156]	; 0x9c
   2c256:	9126      	str	r1, [sp, #152]	; 0x98
   2c258:	f300 823b 	bgt.w	2c6d2 <_svfprintf_r+0x11ca>
   2c25c:	f108 0808 	add.w	r8, r8, #8
   2c260:	2d00      	cmp	r5, #0
   2c262:	bfac      	ite	ge
   2c264:	1b56      	subge	r6, r2, r5
   2c266:	4616      	movlt	r6, r2
   2c268:	2e00      	cmp	r6, #0
   2c26a:	f77f ab2d 	ble.w	2b8c8 <_svfprintf_r+0x3c0>
   2c26e:	2e10      	cmp	r6, #16
   2c270:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c272:	4db0      	ldr	r5, [pc, #704]	; (2c534 <_svfprintf_r+0x102c>)
   2c274:	ddb5      	ble.n	2c1e2 <_svfprintf_r+0xcda>
   2c276:	4622      	mov	r2, r4
   2c278:	2710      	movs	r7, #16
   2c27a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2c27e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2c280:	e004      	b.n	2c28c <_svfprintf_r+0xd84>
   2c282:	f108 0808 	add.w	r8, r8, #8
   2c286:	3e10      	subs	r6, #16
   2c288:	2e10      	cmp	r6, #16
   2c28a:	dda9      	ble.n	2c1e0 <_svfprintf_r+0xcd8>
   2c28c:	3301      	adds	r3, #1
   2c28e:	3210      	adds	r2, #16
   2c290:	2b07      	cmp	r3, #7
   2c292:	9227      	str	r2, [sp, #156]	; 0x9c
   2c294:	9326      	str	r3, [sp, #152]	; 0x98
   2c296:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c29a:	ddf2      	ble.n	2c282 <_svfprintf_r+0xd7a>
   2c29c:	aa25      	add	r2, sp, #148	; 0x94
   2c29e:	4621      	mov	r1, r4
   2c2a0:	4658      	mov	r0, fp
   2c2a2:	f001 ff6d 	bl	2e180 <__ssprint_r>
   2c2a6:	2800      	cmp	r0, #0
   2c2a8:	f47f aa00 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c2ac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c2ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c2b0:	46c8      	mov	r8, r9
   2c2b2:	e7e8      	b.n	2c286 <_svfprintf_r+0xd7e>
   2c2b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c2b6:	9819      	ldr	r0, [sp, #100]	; 0x64
   2c2b8:	991a      	ldr	r1, [sp, #104]	; 0x68
   2c2ba:	f8c8 1000 	str.w	r1, [r8]
   2c2be:	3301      	adds	r3, #1
   2c2c0:	4404      	add	r4, r0
   2c2c2:	2b07      	cmp	r3, #7
   2c2c4:	9427      	str	r4, [sp, #156]	; 0x9c
   2c2c6:	f8c8 0004 	str.w	r0, [r8, #4]
   2c2ca:	9326      	str	r3, [sp, #152]	; 0x98
   2c2cc:	f300 81f5 	bgt.w	2c6ba <_svfprintf_r+0x11b2>
   2c2d0:	f108 0808 	add.w	r8, r8, #8
   2c2d4:	e7ac      	b.n	2c230 <_svfprintf_r+0xd28>
   2c2d6:	9b07      	ldr	r3, [sp, #28]
   2c2d8:	07da      	lsls	r2, r3, #31
   2c2da:	f53f adfe 	bmi.w	2beda <_svfprintf_r+0x9d2>
   2c2de:	3701      	adds	r7, #1
   2c2e0:	3401      	adds	r4, #1
   2c2e2:	2301      	movs	r3, #1
   2c2e4:	2f07      	cmp	r7, #7
   2c2e6:	9427      	str	r4, [sp, #156]	; 0x9c
   2c2e8:	9726      	str	r7, [sp, #152]	; 0x98
   2c2ea:	f8c8 6000 	str.w	r6, [r8]
   2c2ee:	f8c8 3004 	str.w	r3, [r8, #4]
   2c2f2:	f77f ae25 	ble.w	2bf40 <_svfprintf_r+0xa38>
   2c2f6:	e74a      	b.n	2c18e <_svfprintf_r+0xc86>
   2c2f8:	aa25      	add	r2, sp, #148	; 0x94
   2c2fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c2fc:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c2fe:	f001 ff3f 	bl	2e180 <__ssprint_r>
   2c302:	2800      	cmp	r0, #0
   2c304:	f47f a9d2 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c308:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c30a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c30c:	46c8      	mov	r8, r9
   2c30e:	e5f2      	b.n	2bef6 <_svfprintf_r+0x9ee>
   2c310:	aa25      	add	r2, sp, #148	; 0x94
   2c312:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c314:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c316:	f001 ff33 	bl	2e180 <__ssprint_r>
   2c31a:	2800      	cmp	r0, #0
   2c31c:	f47f a9c6 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c320:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c322:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c324:	46c8      	mov	r8, r9
   2c326:	e5f5      	b.n	2bf14 <_svfprintf_r+0xa0c>
   2c328:	464e      	mov	r6, r9
   2c32a:	f7ff b9fd 	b.w	2b728 <_svfprintf_r+0x220>
   2c32e:	aa25      	add	r2, sp, #148	; 0x94
   2c330:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c332:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c334:	f001 ff24 	bl	2e180 <__ssprint_r>
   2c338:	2800      	cmp	r0, #0
   2c33a:	f47f a9b7 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c33e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c340:	46c8      	mov	r8, r9
   2c342:	f7ff ba72 	b.w	2b82a <_svfprintf_r+0x322>
   2c346:	9c15      	ldr	r4, [sp, #84]	; 0x54
   2c348:	4622      	mov	r2, r4
   2c34a:	4620      	mov	r0, r4
   2c34c:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2c34e:	4623      	mov	r3, r4
   2c350:	4621      	mov	r1, r4
   2c352:	f7d4 fe95 	bl	1080 <__aeabi_dcmpun>
   2c356:	2800      	cmp	r0, #0
   2c358:	f040 8286 	bne.w	2c868 <_svfprintf_r+0x1360>
   2c35c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c35e:	3301      	adds	r3, #1
   2c360:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c362:	f023 0320 	bic.w	r3, r3, #32
   2c366:	930e      	str	r3, [sp, #56]	; 0x38
   2c368:	f000 81e2 	beq.w	2c730 <_svfprintf_r+0x1228>
   2c36c:	2b47      	cmp	r3, #71	; 0x47
   2c36e:	f000 811e 	beq.w	2c5ae <_svfprintf_r+0x10a6>
   2c372:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   2c376:	9307      	str	r3, [sp, #28]
   2c378:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2c37a:	1e1f      	subs	r7, r3, #0
   2c37c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2c37e:	9308      	str	r3, [sp, #32]
   2c380:	bfbb      	ittet	lt
   2c382:	463b      	movlt	r3, r7
   2c384:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   2c388:	2300      	movge	r3, #0
   2c38a:	232d      	movlt	r3, #45	; 0x2d
   2c38c:	9310      	str	r3, [sp, #64]	; 0x40
   2c38e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c390:	2b66      	cmp	r3, #102	; 0x66
   2c392:	f000 81bb 	beq.w	2c70c <_svfprintf_r+0x1204>
   2c396:	2b46      	cmp	r3, #70	; 0x46
   2c398:	f000 80df 	beq.w	2c55a <_svfprintf_r+0x1052>
   2c39c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c39e:	9a08      	ldr	r2, [sp, #32]
   2c3a0:	2b45      	cmp	r3, #69	; 0x45
   2c3a2:	bf0c      	ite	eq
   2c3a4:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   2c3a6:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   2c3a8:	a823      	add	r0, sp, #140	; 0x8c
   2c3aa:	a920      	add	r1, sp, #128	; 0x80
   2c3ac:	bf08      	it	eq
   2c3ae:	1c5d      	addeq	r5, r3, #1
   2c3b0:	9004      	str	r0, [sp, #16]
   2c3b2:	9103      	str	r1, [sp, #12]
   2c3b4:	a81f      	add	r0, sp, #124	; 0x7c
   2c3b6:	2102      	movs	r1, #2
   2c3b8:	463b      	mov	r3, r7
   2c3ba:	9002      	str	r0, [sp, #8]
   2c3bc:	9501      	str	r5, [sp, #4]
   2c3be:	9100      	str	r1, [sp, #0]
   2c3c0:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c3c2:	f000 fb71 	bl	2caa8 <_dtoa_r>
   2c3c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c3c8:	2b67      	cmp	r3, #103	; 0x67
   2c3ca:	4606      	mov	r6, r0
   2c3cc:	f040 81e0 	bne.w	2c790 <_svfprintf_r+0x1288>
   2c3d0:	f01b 0f01 	tst.w	fp, #1
   2c3d4:	f000 8246 	beq.w	2c864 <_svfprintf_r+0x135c>
   2c3d8:	1974      	adds	r4, r6, r5
   2c3da:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2c3dc:	9808      	ldr	r0, [sp, #32]
   2c3de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2c3e0:	4639      	mov	r1, r7
   2c3e2:	f7d4 fe1b 	bl	101c <__aeabi_dcmpeq>
   2c3e6:	2800      	cmp	r0, #0
   2c3e8:	f040 8165 	bne.w	2c6b6 <_svfprintf_r+0x11ae>
   2c3ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c3ee:	42a3      	cmp	r3, r4
   2c3f0:	d206      	bcs.n	2c400 <_svfprintf_r+0xef8>
   2c3f2:	2130      	movs	r1, #48	; 0x30
   2c3f4:	1c5a      	adds	r2, r3, #1
   2c3f6:	9223      	str	r2, [sp, #140]	; 0x8c
   2c3f8:	7019      	strb	r1, [r3, #0]
   2c3fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c3fc:	429c      	cmp	r4, r3
   2c3fe:	d8f9      	bhi.n	2c3f4 <_svfprintf_r+0xeec>
   2c400:	1b9b      	subs	r3, r3, r6
   2c402:	9313      	str	r3, [sp, #76]	; 0x4c
   2c404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c406:	2b47      	cmp	r3, #71	; 0x47
   2c408:	f000 80e9 	beq.w	2c5de <_svfprintf_r+0x10d6>
   2c40c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c40e:	2b65      	cmp	r3, #101	; 0x65
   2c410:	f340 81cd 	ble.w	2c7ae <_svfprintf_r+0x12a6>
   2c414:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c416:	2b66      	cmp	r3, #102	; 0x66
   2c418:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c41a:	9312      	str	r3, [sp, #72]	; 0x48
   2c41c:	f000 819e 	beq.w	2c75c <_svfprintf_r+0x1254>
   2c420:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c422:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2c424:	4619      	mov	r1, r3
   2c426:	4291      	cmp	r1, r2
   2c428:	f300 818a 	bgt.w	2c740 <_svfprintf_r+0x1238>
   2c42c:	f01b 0f01 	tst.w	fp, #1
   2c430:	f040 8213 	bne.w	2c85a <_svfprintf_r+0x1352>
   2c434:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2c438:	9308      	str	r3, [sp, #32]
   2c43a:	2367      	movs	r3, #103	; 0x67
   2c43c:	920e      	str	r2, [sp, #56]	; 0x38
   2c43e:	9311      	str	r3, [sp, #68]	; 0x44
   2c440:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2c442:	2b00      	cmp	r3, #0
   2c444:	f040 80c4 	bne.w	2c5d0 <_svfprintf_r+0x10c8>
   2c448:	930a      	str	r3, [sp, #40]	; 0x28
   2c44a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c44e:	f7ff b973 	b.w	2b738 <_svfprintf_r+0x230>
   2c452:	4635      	mov	r5, r6
   2c454:	460c      	mov	r4, r1
   2c456:	4646      	mov	r6, r8
   2c458:	4690      	mov	r8, r2
   2c45a:	3301      	adds	r3, #1
   2c45c:	443c      	add	r4, r7
   2c45e:	2b07      	cmp	r3, #7
   2c460:	9427      	str	r4, [sp, #156]	; 0x9c
   2c462:	9326      	str	r3, [sp, #152]	; 0x98
   2c464:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c468:	f73f aed1 	bgt.w	2c20e <_svfprintf_r+0xd06>
   2c46c:	f108 0808 	add.w	r8, r8, #8
   2c470:	e6d7      	b.n	2c222 <_svfprintf_r+0xd1a>
   2c472:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c474:	6813      	ldr	r3, [r2, #0]
   2c476:	3204      	adds	r2, #4
   2c478:	920f      	str	r2, [sp, #60]	; 0x3c
   2c47a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2c47c:	601a      	str	r2, [r3, #0]
   2c47e:	f7ff b86a 	b.w	2b556 <_svfprintf_r+0x4e>
   2c482:	aa25      	add	r2, sp, #148	; 0x94
   2c484:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c486:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c488:	f001 fe7a 	bl	2e180 <__ssprint_r>
   2c48c:	2800      	cmp	r0, #0
   2c48e:	f47f a90d 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c492:	46c8      	mov	r8, r9
   2c494:	e48d      	b.n	2bdb2 <_svfprintf_r+0x8aa>
   2c496:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c498:	4a27      	ldr	r2, [pc, #156]	; (2c538 <_svfprintf_r+0x1030>)
   2c49a:	f8c8 2000 	str.w	r2, [r8]
   2c49e:	3301      	adds	r3, #1
   2c4a0:	3401      	adds	r4, #1
   2c4a2:	2201      	movs	r2, #1
   2c4a4:	2b07      	cmp	r3, #7
   2c4a6:	9427      	str	r4, [sp, #156]	; 0x9c
   2c4a8:	9326      	str	r3, [sp, #152]	; 0x98
   2c4aa:	f8c8 2004 	str.w	r2, [r8, #4]
   2c4ae:	dc72      	bgt.n	2c596 <_svfprintf_r+0x108e>
   2c4b0:	f108 0808 	add.w	r8, r8, #8
   2c4b4:	b929      	cbnz	r1, 2c4c2 <_svfprintf_r+0xfba>
   2c4b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c4b8:	b91b      	cbnz	r3, 2c4c2 <_svfprintf_r+0xfba>
   2c4ba:	9b07      	ldr	r3, [sp, #28]
   2c4bc:	07d8      	lsls	r0, r3, #31
   2c4be:	f57f aa03 	bpl.w	2b8c8 <_svfprintf_r+0x3c0>
   2c4c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c4c4:	9819      	ldr	r0, [sp, #100]	; 0x64
   2c4c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2c4c8:	f8c8 2000 	str.w	r2, [r8]
   2c4cc:	3301      	adds	r3, #1
   2c4ce:	4602      	mov	r2, r0
   2c4d0:	4422      	add	r2, r4
   2c4d2:	2b07      	cmp	r3, #7
   2c4d4:	9227      	str	r2, [sp, #156]	; 0x9c
   2c4d6:	f8c8 0004 	str.w	r0, [r8, #4]
   2c4da:	9326      	str	r3, [sp, #152]	; 0x98
   2c4dc:	f300 818d 	bgt.w	2c7fa <_svfprintf_r+0x12f2>
   2c4e0:	f108 0808 	add.w	r8, r8, #8
   2c4e4:	2900      	cmp	r1, #0
   2c4e6:	f2c0 8165 	blt.w	2c7b4 <_svfprintf_r+0x12ac>
   2c4ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2c4ec:	f8c8 6000 	str.w	r6, [r8]
   2c4f0:	3301      	adds	r3, #1
   2c4f2:	188c      	adds	r4, r1, r2
   2c4f4:	2b07      	cmp	r3, #7
   2c4f6:	9427      	str	r4, [sp, #156]	; 0x9c
   2c4f8:	9326      	str	r3, [sp, #152]	; 0x98
   2c4fa:	f8c8 1004 	str.w	r1, [r8, #4]
   2c4fe:	f77f a9e1 	ble.w	2b8c4 <_svfprintf_r+0x3bc>
   2c502:	e52c      	b.n	2bf5e <_svfprintf_r+0xa56>
   2c504:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c506:	9909      	ldr	r1, [sp, #36]	; 0x24
   2c508:	6813      	ldr	r3, [r2, #0]
   2c50a:	17cd      	asrs	r5, r1, #31
   2c50c:	4608      	mov	r0, r1
   2c50e:	3204      	adds	r2, #4
   2c510:	4629      	mov	r1, r5
   2c512:	920f      	str	r2, [sp, #60]	; 0x3c
   2c514:	e9c3 0100 	strd	r0, r1, [r3]
   2c518:	f7ff b81d 	b.w	2b556 <_svfprintf_r+0x4e>
   2c51c:	aa25      	add	r2, sp, #148	; 0x94
   2c51e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c520:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c522:	f001 fe2d 	bl	2e180 <__ssprint_r>
   2c526:	2800      	cmp	r0, #0
   2c528:	f47f a8c0 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c52c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c52e:	46c8      	mov	r8, r9
   2c530:	e458      	b.n	2bde4 <_svfprintf_r+0x8dc>
   2c532:	bf00      	nop
   2c534:	00033194 	.word	0x00033194
   2c538:	00032cbc 	.word	0x00032cbc
   2c53c:	2140      	movs	r1, #64	; 0x40
   2c53e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c540:	f7fd fe60 	bl	2a204 <_malloc_r>
   2c544:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c546:	6010      	str	r0, [r2, #0]
   2c548:	6110      	str	r0, [r2, #16]
   2c54a:	2800      	cmp	r0, #0
   2c54c:	f000 81f2 	beq.w	2c934 <_svfprintf_r+0x142c>
   2c550:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c552:	2340      	movs	r3, #64	; 0x40
   2c554:	6153      	str	r3, [r2, #20]
   2c556:	f7fe bfee 	b.w	2b536 <_svfprintf_r+0x2e>
   2c55a:	a823      	add	r0, sp, #140	; 0x8c
   2c55c:	a920      	add	r1, sp, #128	; 0x80
   2c55e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2c560:	9004      	str	r0, [sp, #16]
   2c562:	9103      	str	r1, [sp, #12]
   2c564:	a81f      	add	r0, sp, #124	; 0x7c
   2c566:	2103      	movs	r1, #3
   2c568:	9002      	str	r0, [sp, #8]
   2c56a:	9a08      	ldr	r2, [sp, #32]
   2c56c:	9401      	str	r4, [sp, #4]
   2c56e:	463b      	mov	r3, r7
   2c570:	9100      	str	r1, [sp, #0]
   2c572:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c574:	f000 fa98 	bl	2caa8 <_dtoa_r>
   2c578:	4625      	mov	r5, r4
   2c57a:	4606      	mov	r6, r0
   2c57c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c57e:	2b46      	cmp	r3, #70	; 0x46
   2c580:	eb06 0405 	add.w	r4, r6, r5
   2c584:	f47f af29 	bne.w	2c3da <_svfprintf_r+0xed2>
   2c588:	7833      	ldrb	r3, [r6, #0]
   2c58a:	2b30      	cmp	r3, #48	; 0x30
   2c58c:	f000 8178 	beq.w	2c880 <_svfprintf_r+0x1378>
   2c590:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   2c592:	442c      	add	r4, r5
   2c594:	e721      	b.n	2c3da <_svfprintf_r+0xed2>
   2c596:	aa25      	add	r2, sp, #148	; 0x94
   2c598:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c59a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c59c:	f001 fdf0 	bl	2e180 <__ssprint_r>
   2c5a0:	2800      	cmp	r0, #0
   2c5a2:	f47f a883 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c5a6:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c5a8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c5aa:	46c8      	mov	r8, r9
   2c5ac:	e782      	b.n	2c4b4 <_svfprintf_r+0xfac>
   2c5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c5b0:	2b00      	cmp	r3, #0
   2c5b2:	bf08      	it	eq
   2c5b4:	2301      	moveq	r3, #1
   2c5b6:	930a      	str	r3, [sp, #40]	; 0x28
   2c5b8:	e6db      	b.n	2c372 <_svfprintf_r+0xe6a>
   2c5ba:	4630      	mov	r0, r6
   2c5bc:	940a      	str	r4, [sp, #40]	; 0x28
   2c5be:	f7d4 f89f 	bl	700 <strlen>
   2c5c2:	950f      	str	r5, [sp, #60]	; 0x3c
   2c5c4:	900e      	str	r0, [sp, #56]	; 0x38
   2c5c6:	f8cd b01c 	str.w	fp, [sp, #28]
   2c5ca:	4603      	mov	r3, r0
   2c5cc:	f7ff b9f9 	b.w	2b9c2 <_svfprintf_r+0x4ba>
   2c5d0:	272d      	movs	r7, #45	; 0x2d
   2c5d2:	2300      	movs	r3, #0
   2c5d4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2c5d8:	930a      	str	r3, [sp, #40]	; 0x28
   2c5da:	f7ff b8ae 	b.w	2b73a <_svfprintf_r+0x232>
   2c5de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c5e0:	9312      	str	r3, [sp, #72]	; 0x48
   2c5e2:	461a      	mov	r2, r3
   2c5e4:	3303      	adds	r3, #3
   2c5e6:	db04      	blt.n	2c5f2 <_svfprintf_r+0x10ea>
   2c5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c5ea:	4619      	mov	r1, r3
   2c5ec:	4291      	cmp	r1, r2
   2c5ee:	f6bf af17 	bge.w	2c420 <_svfprintf_r+0xf18>
   2c5f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c5f4:	3b02      	subs	r3, #2
   2c5f6:	9311      	str	r3, [sp, #68]	; 0x44
   2c5f8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   2c5fc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   2c600:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c602:	3b01      	subs	r3, #1
   2c604:	2b00      	cmp	r3, #0
   2c606:	931f      	str	r3, [sp, #124]	; 0x7c
   2c608:	bfbd      	ittte	lt
   2c60a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   2c60c:	f1c3 0301 	rsblt	r3, r3, #1
   2c610:	222d      	movlt	r2, #45	; 0x2d
   2c612:	222b      	movge	r2, #43	; 0x2b
   2c614:	2b09      	cmp	r3, #9
   2c616:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   2c61a:	f340 8116 	ble.w	2c84a <_svfprintf_r+0x1342>
   2c61e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
   2c622:	4620      	mov	r0, r4
   2c624:	4dab      	ldr	r5, [pc, #684]	; (2c8d4 <_svfprintf_r+0x13cc>)
   2c626:	e000      	b.n	2c62a <_svfprintf_r+0x1122>
   2c628:	4610      	mov	r0, r2
   2c62a:	fb85 1203 	smull	r1, r2, r5, r3
   2c62e:	17d9      	asrs	r1, r3, #31
   2c630:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   2c634:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   2c638:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   2c63c:	3230      	adds	r2, #48	; 0x30
   2c63e:	2909      	cmp	r1, #9
   2c640:	f800 2c01 	strb.w	r2, [r0, #-1]
   2c644:	460b      	mov	r3, r1
   2c646:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   2c64a:	dced      	bgt.n	2c628 <_svfprintf_r+0x1120>
   2c64c:	3330      	adds	r3, #48	; 0x30
   2c64e:	3802      	subs	r0, #2
   2c650:	b2d9      	uxtb	r1, r3
   2c652:	4284      	cmp	r4, r0
   2c654:	f802 1c01 	strb.w	r1, [r2, #-1]
   2c658:	f240 8165 	bls.w	2c926 <_svfprintf_r+0x141e>
   2c65c:	f10d 0086 	add.w	r0, sp, #134	; 0x86
   2c660:	4613      	mov	r3, r2
   2c662:	e001      	b.n	2c668 <_svfprintf_r+0x1160>
   2c664:	f813 1b01 	ldrb.w	r1, [r3], #1
   2c668:	f800 1b01 	strb.w	r1, [r0], #1
   2c66c:	42a3      	cmp	r3, r4
   2c66e:	d1f9      	bne.n	2c664 <_svfprintf_r+0x115c>
   2c670:	3301      	adds	r3, #1
   2c672:	1a9b      	subs	r3, r3, r2
   2c674:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   2c678:	4413      	add	r3, r2
   2c67a:	aa21      	add	r2, sp, #132	; 0x84
   2c67c:	1a9b      	subs	r3, r3, r2
   2c67e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2c680:	931b      	str	r3, [sp, #108]	; 0x6c
   2c682:	2a01      	cmp	r2, #1
   2c684:	4413      	add	r3, r2
   2c686:	930e      	str	r3, [sp, #56]	; 0x38
   2c688:	f340 8119 	ble.w	2c8be <_svfprintf_r+0x13b6>
   2c68c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c68e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c690:	4413      	add	r3, r2
   2c692:	930e      	str	r3, [sp, #56]	; 0x38
   2c694:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c698:	9308      	str	r3, [sp, #32]
   2c69a:	2300      	movs	r3, #0
   2c69c:	9312      	str	r3, [sp, #72]	; 0x48
   2c69e:	e6cf      	b.n	2c440 <_svfprintf_r+0xf38>
   2c6a0:	aa25      	add	r2, sp, #148	; 0x94
   2c6a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c6a4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c6a6:	f001 fd6b 	bl	2e180 <__ssprint_r>
   2c6aa:	2800      	cmp	r0, #0
   2c6ac:	f47e affe 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c6b0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c6b2:	46c8      	mov	r8, r9
   2c6b4:	e4d7      	b.n	2c066 <_svfprintf_r+0xb5e>
   2c6b6:	4623      	mov	r3, r4
   2c6b8:	e6a2      	b.n	2c400 <_svfprintf_r+0xef8>
   2c6ba:	aa25      	add	r2, sp, #148	; 0x94
   2c6bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c6be:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c6c0:	f001 fd5e 	bl	2e180 <__ssprint_r>
   2c6c4:	2800      	cmp	r0, #0
   2c6c6:	f47e aff1 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c6ca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c6cc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c6ce:	46c8      	mov	r8, r9
   2c6d0:	e5ae      	b.n	2c230 <_svfprintf_r+0xd28>
   2c6d2:	aa25      	add	r2, sp, #148	; 0x94
   2c6d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c6d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c6d8:	f001 fd52 	bl	2e180 <__ssprint_r>
   2c6dc:	2800      	cmp	r0, #0
   2c6de:	f47e afe5 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c6e2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c6e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c6e6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c6e8:	1a9a      	subs	r2, r3, r2
   2c6ea:	46c8      	mov	r8, r9
   2c6ec:	e5b8      	b.n	2c260 <_svfprintf_r+0xd58>
   2c6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c6f0:	9612      	str	r6, [sp, #72]	; 0x48
   2c6f2:	2b06      	cmp	r3, #6
   2c6f4:	bf28      	it	cs
   2c6f6:	2306      	movcs	r3, #6
   2c6f8:	960a      	str	r6, [sp, #40]	; 0x28
   2c6fa:	4637      	mov	r7, r6
   2c6fc:	9308      	str	r3, [sp, #32]
   2c6fe:	950f      	str	r5, [sp, #60]	; 0x3c
   2c700:	f8cd b01c 	str.w	fp, [sp, #28]
   2c704:	930e      	str	r3, [sp, #56]	; 0x38
   2c706:	4e74      	ldr	r6, [pc, #464]	; (2c8d8 <_svfprintf_r+0x13d0>)
   2c708:	f7ff b816 	b.w	2b738 <_svfprintf_r+0x230>
   2c70c:	a823      	add	r0, sp, #140	; 0x8c
   2c70e:	a920      	add	r1, sp, #128	; 0x80
   2c710:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2c712:	9004      	str	r0, [sp, #16]
   2c714:	9103      	str	r1, [sp, #12]
   2c716:	a81f      	add	r0, sp, #124	; 0x7c
   2c718:	2103      	movs	r1, #3
   2c71a:	9002      	str	r0, [sp, #8]
   2c71c:	9a08      	ldr	r2, [sp, #32]
   2c71e:	9501      	str	r5, [sp, #4]
   2c720:	463b      	mov	r3, r7
   2c722:	9100      	str	r1, [sp, #0]
   2c724:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c726:	f000 f9bf 	bl	2caa8 <_dtoa_r>
   2c72a:	4606      	mov	r6, r0
   2c72c:	1944      	adds	r4, r0, r5
   2c72e:	e72b      	b.n	2c588 <_svfprintf_r+0x1080>
   2c730:	2306      	movs	r3, #6
   2c732:	930a      	str	r3, [sp, #40]	; 0x28
   2c734:	e61d      	b.n	2c372 <_svfprintf_r+0xe6a>
   2c736:	272d      	movs	r7, #45	; 0x2d
   2c738:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2c73c:	f7ff bacd 	b.w	2bcda <_svfprintf_r+0x7d2>
   2c740:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c742:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c744:	4413      	add	r3, r2
   2c746:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2c748:	930e      	str	r3, [sp, #56]	; 0x38
   2c74a:	2a00      	cmp	r2, #0
   2c74c:	f340 80b0 	ble.w	2c8b0 <_svfprintf_r+0x13a8>
   2c750:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c754:	9308      	str	r3, [sp, #32]
   2c756:	2367      	movs	r3, #103	; 0x67
   2c758:	9311      	str	r3, [sp, #68]	; 0x44
   2c75a:	e671      	b.n	2c440 <_svfprintf_r+0xf38>
   2c75c:	2b00      	cmp	r3, #0
   2c75e:	f340 80c3 	ble.w	2c8e8 <_svfprintf_r+0x13e0>
   2c762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c764:	2a00      	cmp	r2, #0
   2c766:	f040 8099 	bne.w	2c89c <_svfprintf_r+0x1394>
   2c76a:	f01b 0f01 	tst.w	fp, #1
   2c76e:	f040 8095 	bne.w	2c89c <_svfprintf_r+0x1394>
   2c772:	9308      	str	r3, [sp, #32]
   2c774:	930e      	str	r3, [sp, #56]	; 0x38
   2c776:	e663      	b.n	2c440 <_svfprintf_r+0xf38>
   2c778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c77a:	9308      	str	r3, [sp, #32]
   2c77c:	930e      	str	r3, [sp, #56]	; 0x38
   2c77e:	900a      	str	r0, [sp, #40]	; 0x28
   2c780:	950f      	str	r5, [sp, #60]	; 0x3c
   2c782:	f8cd b01c 	str.w	fp, [sp, #28]
   2c786:	9012      	str	r0, [sp, #72]	; 0x48
   2c788:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c78c:	f7fe bfd4 	b.w	2b738 <_svfprintf_r+0x230>
   2c790:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c792:	2b47      	cmp	r3, #71	; 0x47
   2c794:	f47f ae20 	bne.w	2c3d8 <_svfprintf_r+0xed0>
   2c798:	f01b 0f01 	tst.w	fp, #1
   2c79c:	f47f aeee 	bne.w	2c57c <_svfprintf_r+0x1074>
   2c7a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c7a2:	1b9b      	subs	r3, r3, r6
   2c7a4:	9313      	str	r3, [sp, #76]	; 0x4c
   2c7a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c7a8:	2b47      	cmp	r3, #71	; 0x47
   2c7aa:	f43f af18 	beq.w	2c5de <_svfprintf_r+0x10d6>
   2c7ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c7b0:	9312      	str	r3, [sp, #72]	; 0x48
   2c7b2:	e721      	b.n	2c5f8 <_svfprintf_r+0x10f0>
   2c7b4:	424f      	negs	r7, r1
   2c7b6:	3110      	adds	r1, #16
   2c7b8:	4d48      	ldr	r5, [pc, #288]	; (2c8dc <_svfprintf_r+0x13d4>)
   2c7ba:	da2f      	bge.n	2c81c <_svfprintf_r+0x1314>
   2c7bc:	2410      	movs	r4, #16
   2c7be:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2c7c2:	e004      	b.n	2c7ce <_svfprintf_r+0x12c6>
   2c7c4:	f108 0808 	add.w	r8, r8, #8
   2c7c8:	3f10      	subs	r7, #16
   2c7ca:	2f10      	cmp	r7, #16
   2c7cc:	dd26      	ble.n	2c81c <_svfprintf_r+0x1314>
   2c7ce:	3301      	adds	r3, #1
   2c7d0:	3210      	adds	r2, #16
   2c7d2:	2b07      	cmp	r3, #7
   2c7d4:	9227      	str	r2, [sp, #156]	; 0x9c
   2c7d6:	9326      	str	r3, [sp, #152]	; 0x98
   2c7d8:	f8c8 5000 	str.w	r5, [r8]
   2c7dc:	f8c8 4004 	str.w	r4, [r8, #4]
   2c7e0:	ddf0      	ble.n	2c7c4 <_svfprintf_r+0x12bc>
   2c7e2:	aa25      	add	r2, sp, #148	; 0x94
   2c7e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c7e6:	4658      	mov	r0, fp
   2c7e8:	f001 fcca 	bl	2e180 <__ssprint_r>
   2c7ec:	2800      	cmp	r0, #0
   2c7ee:	f47e af5d 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c7f2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c7f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c7f6:	46c8      	mov	r8, r9
   2c7f8:	e7e6      	b.n	2c7c8 <_svfprintf_r+0x12c0>
   2c7fa:	aa25      	add	r2, sp, #148	; 0x94
   2c7fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c7fe:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c800:	f001 fcbe 	bl	2e180 <__ssprint_r>
   2c804:	2800      	cmp	r0, #0
   2c806:	f47e af51 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c80a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c80c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c80e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c810:	46c8      	mov	r8, r9
   2c812:	e667      	b.n	2c4e4 <_svfprintf_r+0xfdc>
   2c814:	2000      	movs	r0, #0
   2c816:	900a      	str	r0, [sp, #40]	; 0x28
   2c818:	f7fe bed0 	b.w	2b5bc <_svfprintf_r+0xb4>
   2c81c:	3301      	adds	r3, #1
   2c81e:	443a      	add	r2, r7
   2c820:	2b07      	cmp	r3, #7
   2c822:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c826:	9227      	str	r2, [sp, #156]	; 0x9c
   2c828:	9326      	str	r3, [sp, #152]	; 0x98
   2c82a:	f108 0808 	add.w	r8, r8, #8
   2c82e:	f77f ae5c 	ble.w	2c4ea <_svfprintf_r+0xfe2>
   2c832:	aa25      	add	r2, sp, #148	; 0x94
   2c834:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c836:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c838:	f001 fca2 	bl	2e180 <__ssprint_r>
   2c83c:	2800      	cmp	r0, #0
   2c83e:	f47e af35 	bne.w	2b6ac <_svfprintf_r+0x1a4>
   2c842:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c844:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c846:	46c8      	mov	r8, r9
   2c848:	e64f      	b.n	2c4ea <_svfprintf_r+0xfe2>
   2c84a:	3330      	adds	r3, #48	; 0x30
   2c84c:	2230      	movs	r2, #48	; 0x30
   2c84e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   2c852:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   2c856:	ab22      	add	r3, sp, #136	; 0x88
   2c858:	e70f      	b.n	2c67a <_svfprintf_r+0x1172>
   2c85a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c85c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c85e:	4413      	add	r3, r2
   2c860:	930e      	str	r3, [sp, #56]	; 0x38
   2c862:	e775      	b.n	2c750 <_svfprintf_r+0x1248>
   2c864:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c866:	e5cb      	b.n	2c400 <_svfprintf_r+0xef8>
   2c868:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2c86a:	4e1d      	ldr	r6, [pc, #116]	; (2c8e0 <_svfprintf_r+0x13d8>)
   2c86c:	2b00      	cmp	r3, #0
   2c86e:	bfb6      	itet	lt
   2c870:	272d      	movlt	r7, #45	; 0x2d
   2c872:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   2c876:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
   2c87a:	4b1a      	ldr	r3, [pc, #104]	; (2c8e4 <_svfprintf_r+0x13dc>)
   2c87c:	f7ff ba2f 	b.w	2bcde <_svfprintf_r+0x7d6>
   2c880:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2c882:	9808      	ldr	r0, [sp, #32]
   2c884:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2c886:	4639      	mov	r1, r7
   2c888:	f7d4 fbc8 	bl	101c <__aeabi_dcmpeq>
   2c88c:	2800      	cmp	r0, #0
   2c88e:	f47f ae7f 	bne.w	2c590 <_svfprintf_r+0x1088>
   2c892:	f1c5 0501 	rsb	r5, r5, #1
   2c896:	951f      	str	r5, [sp, #124]	; 0x7c
   2c898:	442c      	add	r4, r5
   2c89a:	e59e      	b.n	2c3da <_svfprintf_r+0xed2>
   2c89c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c89e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c8a0:	4413      	add	r3, r2
   2c8a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c8a4:	441a      	add	r2, r3
   2c8a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2c8aa:	920e      	str	r2, [sp, #56]	; 0x38
   2c8ac:	9308      	str	r3, [sp, #32]
   2c8ae:	e5c7      	b.n	2c440 <_svfprintf_r+0xf38>
   2c8b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c8b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2c8b4:	f1c3 0301 	rsb	r3, r3, #1
   2c8b8:	441a      	add	r2, r3
   2c8ba:	4613      	mov	r3, r2
   2c8bc:	e7d0      	b.n	2c860 <_svfprintf_r+0x1358>
   2c8be:	f01b 0301 	ands.w	r3, fp, #1
   2c8c2:	9312      	str	r3, [sp, #72]	; 0x48
   2c8c4:	f47f aee2 	bne.w	2c68c <_svfprintf_r+0x1184>
   2c8c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c8ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c8ce:	9308      	str	r3, [sp, #32]
   2c8d0:	e5b6      	b.n	2c440 <_svfprintf_r+0xf38>
   2c8d2:	bf00      	nop
   2c8d4:	66666667 	.word	0x66666667
   2c8d8:	0003317c 	.word	0x0003317c
   2c8dc:	00033194 	.word	0x00033194
   2c8e0:	00033150 	.word	0x00033150
   2c8e4:	0003314c 	.word	0x0003314c
   2c8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c8ea:	b913      	cbnz	r3, 2c8f2 <_svfprintf_r+0x13ea>
   2c8ec:	f01b 0f01 	tst.w	fp, #1
   2c8f0:	d002      	beq.n	2c8f8 <_svfprintf_r+0x13f0>
   2c8f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2c8f4:	3301      	adds	r3, #1
   2c8f6:	e7d4      	b.n	2c8a2 <_svfprintf_r+0x139a>
   2c8f8:	2301      	movs	r3, #1
   2c8fa:	e73a      	b.n	2c772 <_svfprintf_r+0x126a>
   2c8fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2c8fe:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2c902:	6828      	ldr	r0, [r5, #0]
   2c904:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   2c908:	900a      	str	r0, [sp, #40]	; 0x28
   2c90a:	4628      	mov	r0, r5
   2c90c:	3004      	adds	r0, #4
   2c90e:	46a2      	mov	sl, r4
   2c910:	900f      	str	r0, [sp, #60]	; 0x3c
   2c912:	f7fe be51 	b.w	2b5b8 <_svfprintf_r+0xb0>
   2c916:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c91a:	f7ff b867 	b.w	2b9ec <_svfprintf_r+0x4e4>
   2c91e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c922:	f7ff ba15 	b.w	2bd50 <_svfprintf_r+0x848>
   2c926:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   2c92a:	e6a6      	b.n	2c67a <_svfprintf_r+0x1172>
   2c92c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c930:	f7ff b8eb 	b.w	2bb0a <_svfprintf_r+0x602>
   2c934:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2c936:	230c      	movs	r3, #12
   2c938:	6013      	str	r3, [r2, #0]
   2c93a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c93e:	9309      	str	r3, [sp, #36]	; 0x24
   2c940:	f7fe bebd 	b.w	2b6be <_svfprintf_r+0x1b6>
   2c944:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c948:	f7ff b99a 	b.w	2bc80 <_svfprintf_r+0x778>
   2c94c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c950:	f7ff b976 	b.w	2bc40 <_svfprintf_r+0x738>
   2c954:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c958:	f7ff b959 	b.w	2bc0e <_svfprintf_r+0x706>
   2c95c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c960:	f7ff b912 	b.w	2bb88 <_svfprintf_r+0x680>

0002c964 <__ascii_wctomb>:
   2c964:	b121      	cbz	r1, 2c970 <__ascii_wctomb+0xc>
   2c966:	2aff      	cmp	r2, #255	; 0xff
   2c968:	d804      	bhi.n	2c974 <__ascii_wctomb+0x10>
   2c96a:	700a      	strb	r2, [r1, #0]
   2c96c:	2001      	movs	r0, #1
   2c96e:	4770      	bx	lr
   2c970:	4608      	mov	r0, r1
   2c972:	4770      	bx	lr
   2c974:	238a      	movs	r3, #138	; 0x8a
   2c976:	6003      	str	r3, [r0, #0]
   2c978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c97c:	4770      	bx	lr
   2c97e:	bf00      	nop

0002c980 <quorem>:
   2c980:	6902      	ldr	r2, [r0, #16]
   2c982:	690b      	ldr	r3, [r1, #16]
   2c984:	4293      	cmp	r3, r2
   2c986:	f300 808d 	bgt.w	2caa4 <quorem+0x124>
   2c98a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c98e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   2c992:	f101 0714 	add.w	r7, r1, #20
   2c996:	f100 0b14 	add.w	fp, r0, #20
   2c99a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2c99e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   2c9a2:	ea4f 0488 	mov.w	r4, r8, lsl #2
   2c9a6:	b083      	sub	sp, #12
   2c9a8:	3201      	adds	r2, #1
   2c9aa:	fbb3 f9f2 	udiv	r9, r3, r2
   2c9ae:	eb0b 0304 	add.w	r3, fp, r4
   2c9b2:	9400      	str	r4, [sp, #0]
   2c9b4:	eb07 0a04 	add.w	sl, r7, r4
   2c9b8:	9301      	str	r3, [sp, #4]
   2c9ba:	f1b9 0f00 	cmp.w	r9, #0
   2c9be:	d039      	beq.n	2ca34 <quorem+0xb4>
   2c9c0:	2500      	movs	r5, #0
   2c9c2:	462e      	mov	r6, r5
   2c9c4:	46bc      	mov	ip, r7
   2c9c6:	46de      	mov	lr, fp
   2c9c8:	f85c 4b04 	ldr.w	r4, [ip], #4
   2c9cc:	f8de 3000 	ldr.w	r3, [lr]
   2c9d0:	b2a2      	uxth	r2, r4
   2c9d2:	fb09 5502 	mla	r5, r9, r2, r5
   2c9d6:	0c22      	lsrs	r2, r4, #16
   2c9d8:	0c2c      	lsrs	r4, r5, #16
   2c9da:	fb09 4202 	mla	r2, r9, r2, r4
   2c9de:	b2ad      	uxth	r5, r5
   2c9e0:	1b75      	subs	r5, r6, r5
   2c9e2:	b296      	uxth	r6, r2
   2c9e4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   2c9e8:	fa15 f383 	uxtah	r3, r5, r3
   2c9ec:	eb06 4623 	add.w	r6, r6, r3, asr #16
   2c9f0:	b29b      	uxth	r3, r3
   2c9f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2c9f6:	45e2      	cmp	sl, ip
   2c9f8:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2c9fc:	f84e 3b04 	str.w	r3, [lr], #4
   2ca00:	ea4f 4626 	mov.w	r6, r6, asr #16
   2ca04:	d2e0      	bcs.n	2c9c8 <quorem+0x48>
   2ca06:	9b00      	ldr	r3, [sp, #0]
   2ca08:	f85b 3003 	ldr.w	r3, [fp, r3]
   2ca0c:	b993      	cbnz	r3, 2ca34 <quorem+0xb4>
   2ca0e:	9c01      	ldr	r4, [sp, #4]
   2ca10:	1f23      	subs	r3, r4, #4
   2ca12:	459b      	cmp	fp, r3
   2ca14:	d20c      	bcs.n	2ca30 <quorem+0xb0>
   2ca16:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2ca1a:	b94b      	cbnz	r3, 2ca30 <quorem+0xb0>
   2ca1c:	f1a4 0308 	sub.w	r3, r4, #8
   2ca20:	e002      	b.n	2ca28 <quorem+0xa8>
   2ca22:	681a      	ldr	r2, [r3, #0]
   2ca24:	3b04      	subs	r3, #4
   2ca26:	b91a      	cbnz	r2, 2ca30 <quorem+0xb0>
   2ca28:	459b      	cmp	fp, r3
   2ca2a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2ca2e:	d3f8      	bcc.n	2ca22 <quorem+0xa2>
   2ca30:	f8c0 8010 	str.w	r8, [r0, #16]
   2ca34:	4604      	mov	r4, r0
   2ca36:	f001 faa7 	bl	2df88 <__mcmp>
   2ca3a:	2800      	cmp	r0, #0
   2ca3c:	db2e      	blt.n	2ca9c <quorem+0x11c>
   2ca3e:	f109 0901 	add.w	r9, r9, #1
   2ca42:	465d      	mov	r5, fp
   2ca44:	2300      	movs	r3, #0
   2ca46:	f857 1b04 	ldr.w	r1, [r7], #4
   2ca4a:	6828      	ldr	r0, [r5, #0]
   2ca4c:	b28a      	uxth	r2, r1
   2ca4e:	1a9a      	subs	r2, r3, r2
   2ca50:	0c0b      	lsrs	r3, r1, #16
   2ca52:	fa12 f280 	uxtah	r2, r2, r0
   2ca56:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   2ca5a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2ca5e:	b292      	uxth	r2, r2
   2ca60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2ca64:	45ba      	cmp	sl, r7
   2ca66:	f845 2b04 	str.w	r2, [r5], #4
   2ca6a:	ea4f 4323 	mov.w	r3, r3, asr #16
   2ca6e:	d2ea      	bcs.n	2ca46 <quorem+0xc6>
   2ca70:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   2ca74:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   2ca78:	b982      	cbnz	r2, 2ca9c <quorem+0x11c>
   2ca7a:	1f1a      	subs	r2, r3, #4
   2ca7c:	4593      	cmp	fp, r2
   2ca7e:	d20b      	bcs.n	2ca98 <quorem+0x118>
   2ca80:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2ca84:	b942      	cbnz	r2, 2ca98 <quorem+0x118>
   2ca86:	3b08      	subs	r3, #8
   2ca88:	e002      	b.n	2ca90 <quorem+0x110>
   2ca8a:	681a      	ldr	r2, [r3, #0]
   2ca8c:	3b04      	subs	r3, #4
   2ca8e:	b91a      	cbnz	r2, 2ca98 <quorem+0x118>
   2ca90:	459b      	cmp	fp, r3
   2ca92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2ca96:	d3f8      	bcc.n	2ca8a <quorem+0x10a>
   2ca98:	f8c4 8010 	str.w	r8, [r4, #16]
   2ca9c:	4648      	mov	r0, r9
   2ca9e:	b003      	add	sp, #12
   2caa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2caa4:	2000      	movs	r0, #0
   2caa6:	4770      	bx	lr

0002caa8 <_dtoa_r>:
   2caa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2caac:	6c01      	ldr	r1, [r0, #64]	; 0x40
   2caae:	b09b      	sub	sp, #108	; 0x6c
   2cab0:	4604      	mov	r4, r0
   2cab2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   2cab4:	4692      	mov	sl, r2
   2cab6:	469b      	mov	fp, r3
   2cab8:	b141      	cbz	r1, 2cacc <_dtoa_r+0x24>
   2caba:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2cabc:	604a      	str	r2, [r1, #4]
   2cabe:	2301      	movs	r3, #1
   2cac0:	4093      	lsls	r3, r2
   2cac2:	608b      	str	r3, [r1, #8]
   2cac4:	f001 f888 	bl	2dbd8 <_Bfree>
   2cac8:	2300      	movs	r3, #0
   2caca:	6423      	str	r3, [r4, #64]	; 0x40
   2cacc:	f1bb 0f00 	cmp.w	fp, #0
   2cad0:	465d      	mov	r5, fp
   2cad2:	db35      	blt.n	2cb40 <_dtoa_r+0x98>
   2cad4:	2300      	movs	r3, #0
   2cad6:	6033      	str	r3, [r6, #0]
   2cad8:	4b9d      	ldr	r3, [pc, #628]	; (2cd50 <_dtoa_r+0x2a8>)
   2cada:	43ab      	bics	r3, r5
   2cadc:	d015      	beq.n	2cb0a <_dtoa_r+0x62>
   2cade:	4650      	mov	r0, sl
   2cae0:	4659      	mov	r1, fp
   2cae2:	2200      	movs	r2, #0
   2cae4:	2300      	movs	r3, #0
   2cae6:	f7d4 fa99 	bl	101c <__aeabi_dcmpeq>
   2caea:	4680      	mov	r8, r0
   2caec:	2800      	cmp	r0, #0
   2caee:	d02d      	beq.n	2cb4c <_dtoa_r+0xa4>
   2caf0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2caf2:	2301      	movs	r3, #1
   2caf4:	6013      	str	r3, [r2, #0]
   2caf6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2caf8:	2b00      	cmp	r3, #0
   2cafa:	f000 80bd 	beq.w	2cc78 <_dtoa_r+0x1d0>
   2cafe:	4895      	ldr	r0, [pc, #596]	; (2cd54 <_dtoa_r+0x2ac>)
   2cb00:	6018      	str	r0, [r3, #0]
   2cb02:	3801      	subs	r0, #1
   2cb04:	b01b      	add	sp, #108	; 0x6c
   2cb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb0a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cb0c:	f242 730f 	movw	r3, #9999	; 0x270f
   2cb10:	6013      	str	r3, [r2, #0]
   2cb12:	f1ba 0f00 	cmp.w	sl, #0
   2cb16:	d10d      	bne.n	2cb34 <_dtoa_r+0x8c>
   2cb18:	f3c5 0513 	ubfx	r5, r5, #0, #20
   2cb1c:	b955      	cbnz	r5, 2cb34 <_dtoa_r+0x8c>
   2cb1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cb20:	488d      	ldr	r0, [pc, #564]	; (2cd58 <_dtoa_r+0x2b0>)
   2cb22:	2b00      	cmp	r3, #0
   2cb24:	d0ee      	beq.n	2cb04 <_dtoa_r+0x5c>
   2cb26:	f100 0308 	add.w	r3, r0, #8
   2cb2a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2cb2c:	6013      	str	r3, [r2, #0]
   2cb2e:	b01b      	add	sp, #108	; 0x6c
   2cb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cb36:	4889      	ldr	r0, [pc, #548]	; (2cd5c <_dtoa_r+0x2b4>)
   2cb38:	2b00      	cmp	r3, #0
   2cb3a:	d0e3      	beq.n	2cb04 <_dtoa_r+0x5c>
   2cb3c:	1cc3      	adds	r3, r0, #3
   2cb3e:	e7f4      	b.n	2cb2a <_dtoa_r+0x82>
   2cb40:	2301      	movs	r3, #1
   2cb42:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   2cb46:	6033      	str	r3, [r6, #0]
   2cb48:	46ab      	mov	fp, r5
   2cb4a:	e7c5      	b.n	2cad8 <_dtoa_r+0x30>
   2cb4c:	aa18      	add	r2, sp, #96	; 0x60
   2cb4e:	ab19      	add	r3, sp, #100	; 0x64
   2cb50:	9201      	str	r2, [sp, #4]
   2cb52:	9300      	str	r3, [sp, #0]
   2cb54:	4652      	mov	r2, sl
   2cb56:	465b      	mov	r3, fp
   2cb58:	4620      	mov	r0, r4
   2cb5a:	f001 fab5 	bl	2e0c8 <__d2b>
   2cb5e:	0d2b      	lsrs	r3, r5, #20
   2cb60:	4681      	mov	r9, r0
   2cb62:	d071      	beq.n	2cc48 <_dtoa_r+0x1a0>
   2cb64:	f3cb 0213 	ubfx	r2, fp, #0, #20
   2cb68:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   2cb6c:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2cb6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   2cb72:	4650      	mov	r0, sl
   2cb74:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   2cb78:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   2cb7c:	2200      	movs	r2, #0
   2cb7e:	4b78      	ldr	r3, [pc, #480]	; (2cd60 <_dtoa_r+0x2b8>)
   2cb80:	f7d3 fe30 	bl	7e4 <__aeabi_dsub>
   2cb84:	a36c      	add	r3, pc, #432	; (adr r3, 2cd38 <_dtoa_r+0x290>)
   2cb86:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cb8a:	f7d3 ffdf 	bl	b4c <__aeabi_dmul>
   2cb8e:	a36c      	add	r3, pc, #432	; (adr r3, 2cd40 <_dtoa_r+0x298>)
   2cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cb94:	f7d3 fe28 	bl	7e8 <__adddf3>
   2cb98:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2cb9c:	4630      	mov	r0, r6
   2cb9e:	f7d3 ff6f 	bl	a80 <__aeabi_i2d>
   2cba2:	a369      	add	r3, pc, #420	; (adr r3, 2cd48 <_dtoa_r+0x2a0>)
   2cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cba8:	f7d3 ffd0 	bl	b4c <__aeabi_dmul>
   2cbac:	4602      	mov	r2, r0
   2cbae:	460b      	mov	r3, r1
   2cbb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2cbb4:	f7d3 fe18 	bl	7e8 <__adddf3>
   2cbb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2cbbc:	f7d4 fa76 	bl	10ac <__aeabi_d2iz>
   2cbc0:	2200      	movs	r2, #0
   2cbc2:	9002      	str	r0, [sp, #8]
   2cbc4:	2300      	movs	r3, #0
   2cbc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2cbca:	f7d4 fa31 	bl	1030 <__aeabi_dcmplt>
   2cbce:	2800      	cmp	r0, #0
   2cbd0:	f040 8173 	bne.w	2ceba <_dtoa_r+0x412>
   2cbd4:	9d02      	ldr	r5, [sp, #8]
   2cbd6:	2d16      	cmp	r5, #22
   2cbd8:	f200 815d 	bhi.w	2ce96 <_dtoa_r+0x3ee>
   2cbdc:	4b61      	ldr	r3, [pc, #388]	; (2cd64 <_dtoa_r+0x2bc>)
   2cbde:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   2cbe2:	e9d3 0100 	ldrd	r0, r1, [r3]
   2cbe6:	4652      	mov	r2, sl
   2cbe8:	465b      	mov	r3, fp
   2cbea:	f7d4 fa3f 	bl	106c <__aeabi_dcmpgt>
   2cbee:	2800      	cmp	r0, #0
   2cbf0:	f000 81c5 	beq.w	2cf7e <_dtoa_r+0x4d6>
   2cbf4:	1e6b      	subs	r3, r5, #1
   2cbf6:	9302      	str	r3, [sp, #8]
   2cbf8:	2300      	movs	r3, #0
   2cbfa:	930e      	str	r3, [sp, #56]	; 0x38
   2cbfc:	1bbf      	subs	r7, r7, r6
   2cbfe:	1e7b      	subs	r3, r7, #1
   2cc00:	9306      	str	r3, [sp, #24]
   2cc02:	f100 8154 	bmi.w	2ceae <_dtoa_r+0x406>
   2cc06:	2300      	movs	r3, #0
   2cc08:	9308      	str	r3, [sp, #32]
   2cc0a:	9b02      	ldr	r3, [sp, #8]
   2cc0c:	2b00      	cmp	r3, #0
   2cc0e:	f2c0 8145 	blt.w	2ce9c <_dtoa_r+0x3f4>
   2cc12:	9a06      	ldr	r2, [sp, #24]
   2cc14:	930d      	str	r3, [sp, #52]	; 0x34
   2cc16:	4611      	mov	r1, r2
   2cc18:	4419      	add	r1, r3
   2cc1a:	2300      	movs	r3, #0
   2cc1c:	9106      	str	r1, [sp, #24]
   2cc1e:	930c      	str	r3, [sp, #48]	; 0x30
   2cc20:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cc22:	2b09      	cmp	r3, #9
   2cc24:	d82a      	bhi.n	2cc7c <_dtoa_r+0x1d4>
   2cc26:	2b05      	cmp	r3, #5
   2cc28:	f340 865b 	ble.w	2d8e2 <_dtoa_r+0xe3a>
   2cc2c:	3b04      	subs	r3, #4
   2cc2e:	9324      	str	r3, [sp, #144]	; 0x90
   2cc30:	2500      	movs	r5, #0
   2cc32:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cc34:	3b02      	subs	r3, #2
   2cc36:	2b03      	cmp	r3, #3
   2cc38:	f200 8642 	bhi.w	2d8c0 <_dtoa_r+0xe18>
   2cc3c:	e8df f013 	tbh	[pc, r3, lsl #1]
   2cc40:	02c903d4 	.word	0x02c903d4
   2cc44:	046103df 	.word	0x046103df
   2cc48:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2cc4a:	9e19      	ldr	r6, [sp, #100]	; 0x64
   2cc4c:	443e      	add	r6, r7
   2cc4e:	f206 4332 	addw	r3, r6, #1074	; 0x432
   2cc52:	2b20      	cmp	r3, #32
   2cc54:	f340 818e 	ble.w	2cf74 <_dtoa_r+0x4cc>
   2cc58:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   2cc5c:	f206 4012 	addw	r0, r6, #1042	; 0x412
   2cc60:	409d      	lsls	r5, r3
   2cc62:	fa2a f000 	lsr.w	r0, sl, r0
   2cc66:	4328      	orrs	r0, r5
   2cc68:	f7d3 fefa 	bl	a60 <__aeabi_ui2d>
   2cc6c:	2301      	movs	r3, #1
   2cc6e:	3e01      	subs	r6, #1
   2cc70:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   2cc74:	9314      	str	r3, [sp, #80]	; 0x50
   2cc76:	e781      	b.n	2cb7c <_dtoa_r+0xd4>
   2cc78:	483b      	ldr	r0, [pc, #236]	; (2cd68 <_dtoa_r+0x2c0>)
   2cc7a:	e743      	b.n	2cb04 <_dtoa_r+0x5c>
   2cc7c:	2100      	movs	r1, #0
   2cc7e:	6461      	str	r1, [r4, #68]	; 0x44
   2cc80:	4620      	mov	r0, r4
   2cc82:	9125      	str	r1, [sp, #148]	; 0x94
   2cc84:	f000 ff82 	bl	2db8c <_Balloc>
   2cc88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cc8c:	930a      	str	r3, [sp, #40]	; 0x28
   2cc8e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2cc90:	930f      	str	r3, [sp, #60]	; 0x3c
   2cc92:	2301      	movs	r3, #1
   2cc94:	9004      	str	r0, [sp, #16]
   2cc96:	6420      	str	r0, [r4, #64]	; 0x40
   2cc98:	9224      	str	r2, [sp, #144]	; 0x90
   2cc9a:	930b      	str	r3, [sp, #44]	; 0x2c
   2cc9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2cc9e:	2b00      	cmp	r3, #0
   2cca0:	f2c0 80d9 	blt.w	2ce56 <_dtoa_r+0x3ae>
   2cca4:	9a02      	ldr	r2, [sp, #8]
   2cca6:	2a0e      	cmp	r2, #14
   2cca8:	f300 80d5 	bgt.w	2ce56 <_dtoa_r+0x3ae>
   2ccac:	4b2d      	ldr	r3, [pc, #180]	; (2cd64 <_dtoa_r+0x2bc>)
   2ccae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2ccb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   2ccb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   2ccba:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2ccbc:	2b00      	cmp	r3, #0
   2ccbe:	f2c0 83ba 	blt.w	2d436 <_dtoa_r+0x98e>
   2ccc2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   2ccc6:	4650      	mov	r0, sl
   2ccc8:	462a      	mov	r2, r5
   2ccca:	4633      	mov	r3, r6
   2cccc:	4659      	mov	r1, fp
   2ccce:	f7d4 f867 	bl	da0 <__aeabi_ddiv>
   2ccd2:	f7d4 f9eb 	bl	10ac <__aeabi_d2iz>
   2ccd6:	4680      	mov	r8, r0
   2ccd8:	f7d3 fed2 	bl	a80 <__aeabi_i2d>
   2ccdc:	462a      	mov	r2, r5
   2ccde:	4633      	mov	r3, r6
   2cce0:	f7d3 ff34 	bl	b4c <__aeabi_dmul>
   2cce4:	460b      	mov	r3, r1
   2cce6:	4602      	mov	r2, r0
   2cce8:	4659      	mov	r1, fp
   2ccea:	4650      	mov	r0, sl
   2ccec:	f7d3 fd7a 	bl	7e4 <__aeabi_dsub>
   2ccf0:	9d04      	ldr	r5, [sp, #16]
   2ccf2:	f108 0330 	add.w	r3, r8, #48	; 0x30
   2ccf6:	702b      	strb	r3, [r5, #0]
   2ccf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ccfa:	2b01      	cmp	r3, #1
   2ccfc:	4606      	mov	r6, r0
   2ccfe:	460f      	mov	r7, r1
   2cd00:	f105 0501 	add.w	r5, r5, #1
   2cd04:	d068      	beq.n	2cdd8 <_dtoa_r+0x330>
   2cd06:	2200      	movs	r2, #0
   2cd08:	4b18      	ldr	r3, [pc, #96]	; (2cd6c <_dtoa_r+0x2c4>)
   2cd0a:	f7d3 ff1f 	bl	b4c <__aeabi_dmul>
   2cd0e:	2200      	movs	r2, #0
   2cd10:	2300      	movs	r3, #0
   2cd12:	4606      	mov	r6, r0
   2cd14:	460f      	mov	r7, r1
   2cd16:	f7d4 f981 	bl	101c <__aeabi_dcmpeq>
   2cd1a:	2800      	cmp	r0, #0
   2cd1c:	f040 8088 	bne.w	2ce30 <_dtoa_r+0x388>
   2cd20:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   2cd24:	f04f 0a00 	mov.w	sl, #0
   2cd28:	f8df b040 	ldr.w	fp, [pc, #64]	; 2cd6c <_dtoa_r+0x2c4>
   2cd2c:	940c      	str	r4, [sp, #48]	; 0x30
   2cd2e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2cd32:	e028      	b.n	2cd86 <_dtoa_r+0x2de>
   2cd34:	f3af 8000 	nop.w
   2cd38:	636f4361 	.word	0x636f4361
   2cd3c:	3fd287a7 	.word	0x3fd287a7
   2cd40:	8b60c8b3 	.word	0x8b60c8b3
   2cd44:	3fc68a28 	.word	0x3fc68a28
   2cd48:	509f79fb 	.word	0x509f79fb
   2cd4c:	3fd34413 	.word	0x3fd34413
   2cd50:	7ff00000 	.word	0x7ff00000
   2cd54:	00032cbd 	.word	0x00032cbd
   2cd58:	000332a8 	.word	0x000332a8
   2cd5c:	000332b4 	.word	0x000332b4
   2cd60:	3ff80000 	.word	0x3ff80000
   2cd64:	000332e0 	.word	0x000332e0
   2cd68:	00032cbc 	.word	0x00032cbc
   2cd6c:	40240000 	.word	0x40240000
   2cd70:	f7d3 feec 	bl	b4c <__aeabi_dmul>
   2cd74:	2200      	movs	r2, #0
   2cd76:	2300      	movs	r3, #0
   2cd78:	4606      	mov	r6, r0
   2cd7a:	460f      	mov	r7, r1
   2cd7c:	f7d4 f94e 	bl	101c <__aeabi_dcmpeq>
   2cd80:	2800      	cmp	r0, #0
   2cd82:	f040 83c1 	bne.w	2d508 <_dtoa_r+0xa60>
   2cd86:	4642      	mov	r2, r8
   2cd88:	464b      	mov	r3, r9
   2cd8a:	4630      	mov	r0, r6
   2cd8c:	4639      	mov	r1, r7
   2cd8e:	f7d4 f807 	bl	da0 <__aeabi_ddiv>
   2cd92:	f7d4 f98b 	bl	10ac <__aeabi_d2iz>
   2cd96:	4604      	mov	r4, r0
   2cd98:	f7d3 fe72 	bl	a80 <__aeabi_i2d>
   2cd9c:	4642      	mov	r2, r8
   2cd9e:	464b      	mov	r3, r9
   2cda0:	f7d3 fed4 	bl	b4c <__aeabi_dmul>
   2cda4:	4602      	mov	r2, r0
   2cda6:	460b      	mov	r3, r1
   2cda8:	4630      	mov	r0, r6
   2cdaa:	4639      	mov	r1, r7
   2cdac:	f7d3 fd1a 	bl	7e4 <__aeabi_dsub>
   2cdb0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
   2cdb4:	9e04      	ldr	r6, [sp, #16]
   2cdb6:	f805 eb01 	strb.w	lr, [r5], #1
   2cdba:	eba5 0e06 	sub.w	lr, r5, r6
   2cdbe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2cdc0:	45b6      	cmp	lr, r6
   2cdc2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2cdc6:	4652      	mov	r2, sl
   2cdc8:	465b      	mov	r3, fp
   2cdca:	d1d1      	bne.n	2cd70 <_dtoa_r+0x2c8>
   2cdcc:	46a0      	mov	r8, r4
   2cdce:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2cdd2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2cdd4:	4606      	mov	r6, r0
   2cdd6:	460f      	mov	r7, r1
   2cdd8:	4632      	mov	r2, r6
   2cdda:	463b      	mov	r3, r7
   2cddc:	4630      	mov	r0, r6
   2cdde:	4639      	mov	r1, r7
   2cde0:	f7d3 fd02 	bl	7e8 <__adddf3>
   2cde4:	4606      	mov	r6, r0
   2cde6:	460f      	mov	r7, r1
   2cde8:	4602      	mov	r2, r0
   2cdea:	460b      	mov	r3, r1
   2cdec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2cdf0:	f7d4 f91e 	bl	1030 <__aeabi_dcmplt>
   2cdf4:	b948      	cbnz	r0, 2ce0a <_dtoa_r+0x362>
   2cdf6:	4632      	mov	r2, r6
   2cdf8:	463b      	mov	r3, r7
   2cdfa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2cdfe:	f7d4 f90d 	bl	101c <__aeabi_dcmpeq>
   2ce02:	b1a8      	cbz	r0, 2ce30 <_dtoa_r+0x388>
   2ce04:	f018 0f01 	tst.w	r8, #1
   2ce08:	d012      	beq.n	2ce30 <_dtoa_r+0x388>
   2ce0a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2ce0e:	9a04      	ldr	r2, [sp, #16]
   2ce10:	1e6b      	subs	r3, r5, #1
   2ce12:	e004      	b.n	2ce1e <_dtoa_r+0x376>
   2ce14:	429a      	cmp	r2, r3
   2ce16:	f000 8401 	beq.w	2d61c <_dtoa_r+0xb74>
   2ce1a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   2ce1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   2ce22:	f103 0501 	add.w	r5, r3, #1
   2ce26:	d0f5      	beq.n	2ce14 <_dtoa_r+0x36c>
   2ce28:	f108 0801 	add.w	r8, r8, #1
   2ce2c:	f883 8000 	strb.w	r8, [r3]
   2ce30:	4649      	mov	r1, r9
   2ce32:	4620      	mov	r0, r4
   2ce34:	f000 fed0 	bl	2dbd8 <_Bfree>
   2ce38:	2200      	movs	r2, #0
   2ce3a:	9b02      	ldr	r3, [sp, #8]
   2ce3c:	702a      	strb	r2, [r5, #0]
   2ce3e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2ce40:	3301      	adds	r3, #1
   2ce42:	6013      	str	r3, [r2, #0]
   2ce44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2ce46:	2b00      	cmp	r3, #0
   2ce48:	f000 839e 	beq.w	2d588 <_dtoa_r+0xae0>
   2ce4c:	9804      	ldr	r0, [sp, #16]
   2ce4e:	601d      	str	r5, [r3, #0]
   2ce50:	b01b      	add	sp, #108	; 0x6c
   2ce52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ce56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2ce58:	2a00      	cmp	r2, #0
   2ce5a:	d03e      	beq.n	2ceda <_dtoa_r+0x432>
   2ce5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2ce5e:	2a01      	cmp	r2, #1
   2ce60:	f340 8311 	ble.w	2d486 <_dtoa_r+0x9de>
   2ce64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ce66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2ce68:	1e5f      	subs	r7, r3, #1
   2ce6a:	42ba      	cmp	r2, r7
   2ce6c:	f2c0 838f 	blt.w	2d58e <_dtoa_r+0xae6>
   2ce70:	1bd7      	subs	r7, r2, r7
   2ce72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ce74:	2b00      	cmp	r3, #0
   2ce76:	f2c0 848b 	blt.w	2d790 <_dtoa_r+0xce8>
   2ce7a:	9d08      	ldr	r5, [sp, #32]
   2ce7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ce7e:	9a08      	ldr	r2, [sp, #32]
   2ce80:	441a      	add	r2, r3
   2ce82:	9208      	str	r2, [sp, #32]
   2ce84:	9a06      	ldr	r2, [sp, #24]
   2ce86:	2101      	movs	r1, #1
   2ce88:	441a      	add	r2, r3
   2ce8a:	4620      	mov	r0, r4
   2ce8c:	9206      	str	r2, [sp, #24]
   2ce8e:	f000 ff3d 	bl	2dd0c <__i2b>
   2ce92:	4606      	mov	r6, r0
   2ce94:	e024      	b.n	2cee0 <_dtoa_r+0x438>
   2ce96:	2301      	movs	r3, #1
   2ce98:	930e      	str	r3, [sp, #56]	; 0x38
   2ce9a:	e6af      	b.n	2cbfc <_dtoa_r+0x154>
   2ce9c:	9a08      	ldr	r2, [sp, #32]
   2ce9e:	9b02      	ldr	r3, [sp, #8]
   2cea0:	1ad2      	subs	r2, r2, r3
   2cea2:	425b      	negs	r3, r3
   2cea4:	930c      	str	r3, [sp, #48]	; 0x30
   2cea6:	2300      	movs	r3, #0
   2cea8:	9208      	str	r2, [sp, #32]
   2ceaa:	930d      	str	r3, [sp, #52]	; 0x34
   2ceac:	e6b8      	b.n	2cc20 <_dtoa_r+0x178>
   2ceae:	f1c7 0301 	rsb	r3, r7, #1
   2ceb2:	9308      	str	r3, [sp, #32]
   2ceb4:	2300      	movs	r3, #0
   2ceb6:	9306      	str	r3, [sp, #24]
   2ceb8:	e6a7      	b.n	2cc0a <_dtoa_r+0x162>
   2ceba:	9d02      	ldr	r5, [sp, #8]
   2cebc:	4628      	mov	r0, r5
   2cebe:	f7d3 fddf 	bl	a80 <__aeabi_i2d>
   2cec2:	4602      	mov	r2, r0
   2cec4:	460b      	mov	r3, r1
   2cec6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2ceca:	f7d4 f8a7 	bl	101c <__aeabi_dcmpeq>
   2cece:	2800      	cmp	r0, #0
   2ced0:	f47f ae80 	bne.w	2cbd4 <_dtoa_r+0x12c>
   2ced4:	1e6b      	subs	r3, r5, #1
   2ced6:	9302      	str	r3, [sp, #8]
   2ced8:	e67c      	b.n	2cbd4 <_dtoa_r+0x12c>
   2ceda:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2cedc:	9d08      	ldr	r5, [sp, #32]
   2cede:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2cee0:	2d00      	cmp	r5, #0
   2cee2:	dd0c      	ble.n	2cefe <_dtoa_r+0x456>
   2cee4:	9906      	ldr	r1, [sp, #24]
   2cee6:	2900      	cmp	r1, #0
   2cee8:	460b      	mov	r3, r1
   2ceea:	dd08      	ble.n	2cefe <_dtoa_r+0x456>
   2ceec:	42a9      	cmp	r1, r5
   2ceee:	9a08      	ldr	r2, [sp, #32]
   2cef0:	bfa8      	it	ge
   2cef2:	462b      	movge	r3, r5
   2cef4:	1ad2      	subs	r2, r2, r3
   2cef6:	1aed      	subs	r5, r5, r3
   2cef8:	1acb      	subs	r3, r1, r3
   2cefa:	9208      	str	r2, [sp, #32]
   2cefc:	9306      	str	r3, [sp, #24]
   2cefe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2cf00:	b1d3      	cbz	r3, 2cf38 <_dtoa_r+0x490>
   2cf02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2cf04:	2b00      	cmp	r3, #0
   2cf06:	f000 82b7 	beq.w	2d478 <_dtoa_r+0x9d0>
   2cf0a:	2f00      	cmp	r7, #0
   2cf0c:	dd10      	ble.n	2cf30 <_dtoa_r+0x488>
   2cf0e:	4631      	mov	r1, r6
   2cf10:	463a      	mov	r2, r7
   2cf12:	4620      	mov	r0, r4
   2cf14:	f000 ff96 	bl	2de44 <__pow5mult>
   2cf18:	464a      	mov	r2, r9
   2cf1a:	4601      	mov	r1, r0
   2cf1c:	4606      	mov	r6, r0
   2cf1e:	4620      	mov	r0, r4
   2cf20:	f000 fefe 	bl	2dd20 <__multiply>
   2cf24:	4649      	mov	r1, r9
   2cf26:	4680      	mov	r8, r0
   2cf28:	4620      	mov	r0, r4
   2cf2a:	f000 fe55 	bl	2dbd8 <_Bfree>
   2cf2e:	46c1      	mov	r9, r8
   2cf30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2cf32:	1bda      	subs	r2, r3, r7
   2cf34:	f040 82a1 	bne.w	2d47a <_dtoa_r+0x9d2>
   2cf38:	2101      	movs	r1, #1
   2cf3a:	4620      	mov	r0, r4
   2cf3c:	f000 fee6 	bl	2dd0c <__i2b>
   2cf40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2cf42:	2b00      	cmp	r3, #0
   2cf44:	4680      	mov	r8, r0
   2cf46:	dd1c      	ble.n	2cf82 <_dtoa_r+0x4da>
   2cf48:	4601      	mov	r1, r0
   2cf4a:	461a      	mov	r2, r3
   2cf4c:	4620      	mov	r0, r4
   2cf4e:	f000 ff79 	bl	2de44 <__pow5mult>
   2cf52:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cf54:	2b01      	cmp	r3, #1
   2cf56:	4680      	mov	r8, r0
   2cf58:	f340 8254 	ble.w	2d404 <_dtoa_r+0x95c>
   2cf5c:	2300      	movs	r3, #0
   2cf5e:	930c      	str	r3, [sp, #48]	; 0x30
   2cf60:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2cf64:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   2cf68:	6918      	ldr	r0, [r3, #16]
   2cf6a:	f000 fe7f 	bl	2dc6c <__hi0bits>
   2cf6e:	f1c0 0020 	rsb	r0, r0, #32
   2cf72:	e010      	b.n	2cf96 <_dtoa_r+0x4ee>
   2cf74:	f1c3 0520 	rsb	r5, r3, #32
   2cf78:	fa0a f005 	lsl.w	r0, sl, r5
   2cf7c:	e674      	b.n	2cc68 <_dtoa_r+0x1c0>
   2cf7e:	900e      	str	r0, [sp, #56]	; 0x38
   2cf80:	e63c      	b.n	2cbfc <_dtoa_r+0x154>
   2cf82:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cf84:	2b01      	cmp	r3, #1
   2cf86:	f340 8287 	ble.w	2d498 <_dtoa_r+0x9f0>
   2cf8a:	2300      	movs	r3, #0
   2cf8c:	930c      	str	r3, [sp, #48]	; 0x30
   2cf8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2cf90:	2001      	movs	r0, #1
   2cf92:	2b00      	cmp	r3, #0
   2cf94:	d1e4      	bne.n	2cf60 <_dtoa_r+0x4b8>
   2cf96:	9a06      	ldr	r2, [sp, #24]
   2cf98:	4410      	add	r0, r2
   2cf9a:	f010 001f 	ands.w	r0, r0, #31
   2cf9e:	f000 80a1 	beq.w	2d0e4 <_dtoa_r+0x63c>
   2cfa2:	f1c0 0320 	rsb	r3, r0, #32
   2cfa6:	2b04      	cmp	r3, #4
   2cfa8:	f340 849e 	ble.w	2d8e8 <_dtoa_r+0xe40>
   2cfac:	9b08      	ldr	r3, [sp, #32]
   2cfae:	f1c0 001c 	rsb	r0, r0, #28
   2cfb2:	4403      	add	r3, r0
   2cfb4:	9308      	str	r3, [sp, #32]
   2cfb6:	4613      	mov	r3, r2
   2cfb8:	4403      	add	r3, r0
   2cfba:	4405      	add	r5, r0
   2cfbc:	9306      	str	r3, [sp, #24]
   2cfbe:	9b08      	ldr	r3, [sp, #32]
   2cfc0:	2b00      	cmp	r3, #0
   2cfc2:	dd05      	ble.n	2cfd0 <_dtoa_r+0x528>
   2cfc4:	4649      	mov	r1, r9
   2cfc6:	461a      	mov	r2, r3
   2cfc8:	4620      	mov	r0, r4
   2cfca:	f000 ff8b 	bl	2dee4 <__lshift>
   2cfce:	4681      	mov	r9, r0
   2cfd0:	9b06      	ldr	r3, [sp, #24]
   2cfd2:	2b00      	cmp	r3, #0
   2cfd4:	dd05      	ble.n	2cfe2 <_dtoa_r+0x53a>
   2cfd6:	4641      	mov	r1, r8
   2cfd8:	461a      	mov	r2, r3
   2cfda:	4620      	mov	r0, r4
   2cfdc:	f000 ff82 	bl	2dee4 <__lshift>
   2cfe0:	4680      	mov	r8, r0
   2cfe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cfe4:	2b00      	cmp	r3, #0
   2cfe6:	f040 8086 	bne.w	2d0f6 <_dtoa_r+0x64e>
   2cfea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cfec:	2b00      	cmp	r3, #0
   2cfee:	f340 8266 	ble.w	2d4be <_dtoa_r+0xa16>
   2cff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2cff4:	2b00      	cmp	r3, #0
   2cff6:	f000 8098 	beq.w	2d12a <_dtoa_r+0x682>
   2cffa:	2d00      	cmp	r5, #0
   2cffc:	dd05      	ble.n	2d00a <_dtoa_r+0x562>
   2cffe:	4631      	mov	r1, r6
   2d000:	462a      	mov	r2, r5
   2d002:	4620      	mov	r0, r4
   2d004:	f000 ff6e 	bl	2dee4 <__lshift>
   2d008:	4606      	mov	r6, r0
   2d00a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d00c:	2b00      	cmp	r3, #0
   2d00e:	f040 8337 	bne.w	2d680 <_dtoa_r+0xbd8>
   2d012:	9606      	str	r6, [sp, #24]
   2d014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d016:	9a04      	ldr	r2, [sp, #16]
   2d018:	f8dd b018 	ldr.w	fp, [sp, #24]
   2d01c:	3b01      	subs	r3, #1
   2d01e:	18d3      	adds	r3, r2, r3
   2d020:	930b      	str	r3, [sp, #44]	; 0x2c
   2d022:	f00a 0301 	and.w	r3, sl, #1
   2d026:	930c      	str	r3, [sp, #48]	; 0x30
   2d028:	4617      	mov	r7, r2
   2d02a:	46c2      	mov	sl, r8
   2d02c:	4651      	mov	r1, sl
   2d02e:	4648      	mov	r0, r9
   2d030:	f7ff fca6 	bl	2c980 <quorem>
   2d034:	4631      	mov	r1, r6
   2d036:	4605      	mov	r5, r0
   2d038:	4648      	mov	r0, r9
   2d03a:	f000 ffa5 	bl	2df88 <__mcmp>
   2d03e:	465a      	mov	r2, fp
   2d040:	900a      	str	r0, [sp, #40]	; 0x28
   2d042:	4651      	mov	r1, sl
   2d044:	4620      	mov	r0, r4
   2d046:	f000 ffbb 	bl	2dfc0 <__mdiff>
   2d04a:	68c2      	ldr	r2, [r0, #12]
   2d04c:	4680      	mov	r8, r0
   2d04e:	f105 0330 	add.w	r3, r5, #48	; 0x30
   2d052:	2a00      	cmp	r2, #0
   2d054:	f040 822b 	bne.w	2d4ae <_dtoa_r+0xa06>
   2d058:	4601      	mov	r1, r0
   2d05a:	4648      	mov	r0, r9
   2d05c:	9308      	str	r3, [sp, #32]
   2d05e:	f000 ff93 	bl	2df88 <__mcmp>
   2d062:	4641      	mov	r1, r8
   2d064:	9006      	str	r0, [sp, #24]
   2d066:	4620      	mov	r0, r4
   2d068:	f000 fdb6 	bl	2dbd8 <_Bfree>
   2d06c:	9a06      	ldr	r2, [sp, #24]
   2d06e:	9b08      	ldr	r3, [sp, #32]
   2d070:	b932      	cbnz	r2, 2d080 <_dtoa_r+0x5d8>
   2d072:	9924      	ldr	r1, [sp, #144]	; 0x90
   2d074:	b921      	cbnz	r1, 2d080 <_dtoa_r+0x5d8>
   2d076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2d078:	2a00      	cmp	r2, #0
   2d07a:	f000 83ef 	beq.w	2d85c <_dtoa_r+0xdb4>
   2d07e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2d080:	990a      	ldr	r1, [sp, #40]	; 0x28
   2d082:	2900      	cmp	r1, #0
   2d084:	f2c0 829f 	blt.w	2d5c6 <_dtoa_r+0xb1e>
   2d088:	d105      	bne.n	2d096 <_dtoa_r+0x5ee>
   2d08a:	9924      	ldr	r1, [sp, #144]	; 0x90
   2d08c:	b919      	cbnz	r1, 2d096 <_dtoa_r+0x5ee>
   2d08e:	990c      	ldr	r1, [sp, #48]	; 0x30
   2d090:	2900      	cmp	r1, #0
   2d092:	f000 8298 	beq.w	2d5c6 <_dtoa_r+0xb1e>
   2d096:	2a00      	cmp	r2, #0
   2d098:	f300 8306 	bgt.w	2d6a8 <_dtoa_r+0xc00>
   2d09c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2d09e:	703b      	strb	r3, [r7, #0]
   2d0a0:	f107 0801 	add.w	r8, r7, #1
   2d0a4:	4297      	cmp	r7, r2
   2d0a6:	4645      	mov	r5, r8
   2d0a8:	f000 830c 	beq.w	2d6c4 <_dtoa_r+0xc1c>
   2d0ac:	4649      	mov	r1, r9
   2d0ae:	2300      	movs	r3, #0
   2d0b0:	220a      	movs	r2, #10
   2d0b2:	4620      	mov	r0, r4
   2d0b4:	f000 fd9a 	bl	2dbec <__multadd>
   2d0b8:	455e      	cmp	r6, fp
   2d0ba:	4681      	mov	r9, r0
   2d0bc:	4631      	mov	r1, r6
   2d0be:	f04f 0300 	mov.w	r3, #0
   2d0c2:	f04f 020a 	mov.w	r2, #10
   2d0c6:	4620      	mov	r0, r4
   2d0c8:	f000 81eb 	beq.w	2d4a2 <_dtoa_r+0x9fa>
   2d0cc:	f000 fd8e 	bl	2dbec <__multadd>
   2d0d0:	4659      	mov	r1, fp
   2d0d2:	4606      	mov	r6, r0
   2d0d4:	2300      	movs	r3, #0
   2d0d6:	220a      	movs	r2, #10
   2d0d8:	4620      	mov	r0, r4
   2d0da:	f000 fd87 	bl	2dbec <__multadd>
   2d0de:	4647      	mov	r7, r8
   2d0e0:	4683      	mov	fp, r0
   2d0e2:	e7a3      	b.n	2d02c <_dtoa_r+0x584>
   2d0e4:	201c      	movs	r0, #28
   2d0e6:	9b08      	ldr	r3, [sp, #32]
   2d0e8:	4403      	add	r3, r0
   2d0ea:	9308      	str	r3, [sp, #32]
   2d0ec:	9b06      	ldr	r3, [sp, #24]
   2d0ee:	4403      	add	r3, r0
   2d0f0:	4405      	add	r5, r0
   2d0f2:	9306      	str	r3, [sp, #24]
   2d0f4:	e763      	b.n	2cfbe <_dtoa_r+0x516>
   2d0f6:	4641      	mov	r1, r8
   2d0f8:	4648      	mov	r0, r9
   2d0fa:	f000 ff45 	bl	2df88 <__mcmp>
   2d0fe:	2800      	cmp	r0, #0
   2d100:	f6bf af73 	bge.w	2cfea <_dtoa_r+0x542>
   2d104:	9f02      	ldr	r7, [sp, #8]
   2d106:	4649      	mov	r1, r9
   2d108:	2300      	movs	r3, #0
   2d10a:	220a      	movs	r2, #10
   2d10c:	4620      	mov	r0, r4
   2d10e:	3f01      	subs	r7, #1
   2d110:	9702      	str	r7, [sp, #8]
   2d112:	f000 fd6b 	bl	2dbec <__multadd>
   2d116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d118:	4681      	mov	r9, r0
   2d11a:	2b00      	cmp	r3, #0
   2d11c:	f040 83b6 	bne.w	2d88c <_dtoa_r+0xde4>
   2d120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d122:	2b00      	cmp	r3, #0
   2d124:	f340 83bf 	ble.w	2d8a6 <_dtoa_r+0xdfe>
   2d128:	930a      	str	r3, [sp, #40]	; 0x28
   2d12a:	f8dd b010 	ldr.w	fp, [sp, #16]
   2d12e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2d130:	465d      	mov	r5, fp
   2d132:	e002      	b.n	2d13a <_dtoa_r+0x692>
   2d134:	f000 fd5a 	bl	2dbec <__multadd>
   2d138:	4681      	mov	r9, r0
   2d13a:	4641      	mov	r1, r8
   2d13c:	4648      	mov	r0, r9
   2d13e:	f7ff fc1f 	bl	2c980 <quorem>
   2d142:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   2d146:	f805 ab01 	strb.w	sl, [r5], #1
   2d14a:	eba5 030b 	sub.w	r3, r5, fp
   2d14e:	42bb      	cmp	r3, r7
   2d150:	f04f 020a 	mov.w	r2, #10
   2d154:	f04f 0300 	mov.w	r3, #0
   2d158:	4649      	mov	r1, r9
   2d15a:	4620      	mov	r0, r4
   2d15c:	dbea      	blt.n	2d134 <_dtoa_r+0x68c>
   2d15e:	9b04      	ldr	r3, [sp, #16]
   2d160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d162:	2a01      	cmp	r2, #1
   2d164:	bfac      	ite	ge
   2d166:	189b      	addge	r3, r3, r2
   2d168:	3301      	addlt	r3, #1
   2d16a:	461d      	mov	r5, r3
   2d16c:	f04f 0b00 	mov.w	fp, #0
   2d170:	4649      	mov	r1, r9
   2d172:	2201      	movs	r2, #1
   2d174:	4620      	mov	r0, r4
   2d176:	f000 feb5 	bl	2dee4 <__lshift>
   2d17a:	4641      	mov	r1, r8
   2d17c:	4681      	mov	r9, r0
   2d17e:	f000 ff03 	bl	2df88 <__mcmp>
   2d182:	2800      	cmp	r0, #0
   2d184:	f340 823d 	ble.w	2d602 <_dtoa_r+0xb5a>
   2d188:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   2d18c:	9904      	ldr	r1, [sp, #16]
   2d18e:	1e6b      	subs	r3, r5, #1
   2d190:	e004      	b.n	2d19c <_dtoa_r+0x6f4>
   2d192:	428b      	cmp	r3, r1
   2d194:	f000 81ae 	beq.w	2d4f4 <_dtoa_r+0xa4c>
   2d198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2d19c:	2a39      	cmp	r2, #57	; 0x39
   2d19e:	f103 0501 	add.w	r5, r3, #1
   2d1a2:	d0f6      	beq.n	2d192 <_dtoa_r+0x6ea>
   2d1a4:	3201      	adds	r2, #1
   2d1a6:	701a      	strb	r2, [r3, #0]
   2d1a8:	4641      	mov	r1, r8
   2d1aa:	4620      	mov	r0, r4
   2d1ac:	f000 fd14 	bl	2dbd8 <_Bfree>
   2d1b0:	2e00      	cmp	r6, #0
   2d1b2:	f43f ae3d 	beq.w	2ce30 <_dtoa_r+0x388>
   2d1b6:	f1bb 0f00 	cmp.w	fp, #0
   2d1ba:	d005      	beq.n	2d1c8 <_dtoa_r+0x720>
   2d1bc:	45b3      	cmp	fp, r6
   2d1be:	d003      	beq.n	2d1c8 <_dtoa_r+0x720>
   2d1c0:	4659      	mov	r1, fp
   2d1c2:	4620      	mov	r0, r4
   2d1c4:	f000 fd08 	bl	2dbd8 <_Bfree>
   2d1c8:	4631      	mov	r1, r6
   2d1ca:	4620      	mov	r0, r4
   2d1cc:	f000 fd04 	bl	2dbd8 <_Bfree>
   2d1d0:	e62e      	b.n	2ce30 <_dtoa_r+0x388>
   2d1d2:	2300      	movs	r3, #0
   2d1d4:	930b      	str	r3, [sp, #44]	; 0x2c
   2d1d6:	9b02      	ldr	r3, [sp, #8]
   2d1d8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2d1da:	4413      	add	r3, r2
   2d1dc:	930f      	str	r3, [sp, #60]	; 0x3c
   2d1de:	3301      	adds	r3, #1
   2d1e0:	2b01      	cmp	r3, #1
   2d1e2:	461f      	mov	r7, r3
   2d1e4:	461e      	mov	r6, r3
   2d1e6:	930a      	str	r3, [sp, #40]	; 0x28
   2d1e8:	bfb8      	it	lt
   2d1ea:	2701      	movlt	r7, #1
   2d1ec:	2100      	movs	r1, #0
   2d1ee:	2f17      	cmp	r7, #23
   2d1f0:	6461      	str	r1, [r4, #68]	; 0x44
   2d1f2:	d90a      	bls.n	2d20a <_dtoa_r+0x762>
   2d1f4:	2201      	movs	r2, #1
   2d1f6:	2304      	movs	r3, #4
   2d1f8:	005b      	lsls	r3, r3, #1
   2d1fa:	f103 0014 	add.w	r0, r3, #20
   2d1fe:	4287      	cmp	r7, r0
   2d200:	4611      	mov	r1, r2
   2d202:	f102 0201 	add.w	r2, r2, #1
   2d206:	d2f7      	bcs.n	2d1f8 <_dtoa_r+0x750>
   2d208:	6461      	str	r1, [r4, #68]	; 0x44
   2d20a:	4620      	mov	r0, r4
   2d20c:	f000 fcbe 	bl	2db8c <_Balloc>
   2d210:	2e0e      	cmp	r6, #14
   2d212:	9004      	str	r0, [sp, #16]
   2d214:	6420      	str	r0, [r4, #64]	; 0x40
   2d216:	f63f ad41 	bhi.w	2cc9c <_dtoa_r+0x1f4>
   2d21a:	2d00      	cmp	r5, #0
   2d21c:	f43f ad3e 	beq.w	2cc9c <_dtoa_r+0x1f4>
   2d220:	9902      	ldr	r1, [sp, #8]
   2d222:	2900      	cmp	r1, #0
   2d224:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   2d228:	f340 8202 	ble.w	2d630 <_dtoa_r+0xb88>
   2d22c:	4bb8      	ldr	r3, [pc, #736]	; (2d510 <_dtoa_r+0xa68>)
   2d22e:	f001 020f 	and.w	r2, r1, #15
   2d232:	110d      	asrs	r5, r1, #4
   2d234:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d238:	06e9      	lsls	r1, r5, #27
   2d23a:	e9d3 6700 	ldrd	r6, r7, [r3]
   2d23e:	f140 81ae 	bpl.w	2d59e <_dtoa_r+0xaf6>
   2d242:	4bb4      	ldr	r3, [pc, #720]	; (2d514 <_dtoa_r+0xa6c>)
   2d244:	4650      	mov	r0, sl
   2d246:	4659      	mov	r1, fp
   2d248:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   2d24c:	f7d3 fda8 	bl	da0 <__aeabi_ddiv>
   2d250:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   2d254:	f005 050f 	and.w	r5, r5, #15
   2d258:	f04f 0a03 	mov.w	sl, #3
   2d25c:	b18d      	cbz	r5, 2d282 <_dtoa_r+0x7da>
   2d25e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 2d514 <_dtoa_r+0xa6c>
   2d262:	07ea      	lsls	r2, r5, #31
   2d264:	d509      	bpl.n	2d27a <_dtoa_r+0x7d2>
   2d266:	4630      	mov	r0, r6
   2d268:	4639      	mov	r1, r7
   2d26a:	e9d8 2300 	ldrd	r2, r3, [r8]
   2d26e:	f7d3 fc6d 	bl	b4c <__aeabi_dmul>
   2d272:	f10a 0a01 	add.w	sl, sl, #1
   2d276:	4606      	mov	r6, r0
   2d278:	460f      	mov	r7, r1
   2d27a:	106d      	asrs	r5, r5, #1
   2d27c:	f108 0808 	add.w	r8, r8, #8
   2d280:	d1ef      	bne.n	2d262 <_dtoa_r+0x7ba>
   2d282:	463b      	mov	r3, r7
   2d284:	4632      	mov	r2, r6
   2d286:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   2d28a:	f7d3 fd89 	bl	da0 <__aeabi_ddiv>
   2d28e:	4607      	mov	r7, r0
   2d290:	4688      	mov	r8, r1
   2d292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d294:	b143      	cbz	r3, 2d2a8 <_dtoa_r+0x800>
   2d296:	2200      	movs	r2, #0
   2d298:	4b9f      	ldr	r3, [pc, #636]	; (2d518 <_dtoa_r+0xa70>)
   2d29a:	4638      	mov	r0, r7
   2d29c:	4641      	mov	r1, r8
   2d29e:	f7d3 fec7 	bl	1030 <__aeabi_dcmplt>
   2d2a2:	2800      	cmp	r0, #0
   2d2a4:	f040 8286 	bne.w	2d7b4 <_dtoa_r+0xd0c>
   2d2a8:	4650      	mov	r0, sl
   2d2aa:	f7d3 fbe9 	bl	a80 <__aeabi_i2d>
   2d2ae:	463a      	mov	r2, r7
   2d2b0:	4643      	mov	r3, r8
   2d2b2:	f7d3 fc4b 	bl	b4c <__aeabi_dmul>
   2d2b6:	4b99      	ldr	r3, [pc, #612]	; (2d51c <_dtoa_r+0xa74>)
   2d2b8:	2200      	movs	r2, #0
   2d2ba:	f7d3 fa95 	bl	7e8 <__adddf3>
   2d2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d2c0:	4605      	mov	r5, r0
   2d2c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d2c6:	2b00      	cmp	r3, #0
   2d2c8:	f000 813e 	beq.w	2d548 <_dtoa_r+0xaa0>
   2d2cc:	9b02      	ldr	r3, [sp, #8]
   2d2ce:	9315      	str	r3, [sp, #84]	; 0x54
   2d2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d2d2:	9312      	str	r3, [sp, #72]	; 0x48
   2d2d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d2d6:	2b00      	cmp	r3, #0
   2d2d8:	f000 81fa 	beq.w	2d6d0 <_dtoa_r+0xc28>
   2d2dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2d2de:	4b8c      	ldr	r3, [pc, #560]	; (2d510 <_dtoa_r+0xa68>)
   2d2e0:	498f      	ldr	r1, [pc, #572]	; (2d520 <_dtoa_r+0xa78>)
   2d2e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d2e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   2d2ea:	2000      	movs	r0, #0
   2d2ec:	f7d3 fd58 	bl	da0 <__aeabi_ddiv>
   2d2f0:	462a      	mov	r2, r5
   2d2f2:	4633      	mov	r3, r6
   2d2f4:	f7d3 fa76 	bl	7e4 <__aeabi_dsub>
   2d2f8:	4682      	mov	sl, r0
   2d2fa:	468b      	mov	fp, r1
   2d2fc:	4638      	mov	r0, r7
   2d2fe:	4641      	mov	r1, r8
   2d300:	f7d3 fed4 	bl	10ac <__aeabi_d2iz>
   2d304:	4605      	mov	r5, r0
   2d306:	f7d3 fbbb 	bl	a80 <__aeabi_i2d>
   2d30a:	4602      	mov	r2, r0
   2d30c:	460b      	mov	r3, r1
   2d30e:	4638      	mov	r0, r7
   2d310:	4641      	mov	r1, r8
   2d312:	f7d3 fa67 	bl	7e4 <__aeabi_dsub>
   2d316:	3530      	adds	r5, #48	; 0x30
   2d318:	fa5f f885 	uxtb.w	r8, r5
   2d31c:	9d04      	ldr	r5, [sp, #16]
   2d31e:	4606      	mov	r6, r0
   2d320:	460f      	mov	r7, r1
   2d322:	f885 8000 	strb.w	r8, [r5]
   2d326:	4602      	mov	r2, r0
   2d328:	460b      	mov	r3, r1
   2d32a:	4650      	mov	r0, sl
   2d32c:	4659      	mov	r1, fp
   2d32e:	3501      	adds	r5, #1
   2d330:	f7d3 fe9c 	bl	106c <__aeabi_dcmpgt>
   2d334:	2800      	cmp	r0, #0
   2d336:	d154      	bne.n	2d3e2 <_dtoa_r+0x93a>
   2d338:	4632      	mov	r2, r6
   2d33a:	463b      	mov	r3, r7
   2d33c:	2000      	movs	r0, #0
   2d33e:	4976      	ldr	r1, [pc, #472]	; (2d518 <_dtoa_r+0xa70>)
   2d340:	f7d3 fa50 	bl	7e4 <__aeabi_dsub>
   2d344:	4602      	mov	r2, r0
   2d346:	460b      	mov	r3, r1
   2d348:	4650      	mov	r0, sl
   2d34a:	4659      	mov	r1, fp
   2d34c:	f7d3 fe8e 	bl	106c <__aeabi_dcmpgt>
   2d350:	2800      	cmp	r0, #0
   2d352:	f040 8270 	bne.w	2d836 <_dtoa_r+0xd8e>
   2d356:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2d358:	2a01      	cmp	r2, #1
   2d35a:	f000 8111 	beq.w	2d580 <_dtoa_r+0xad8>
   2d35e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d360:	9a04      	ldr	r2, [sp, #16]
   2d362:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2d366:	4413      	add	r3, r2
   2d368:	4699      	mov	r9, r3
   2d36a:	e00d      	b.n	2d388 <_dtoa_r+0x8e0>
   2d36c:	2000      	movs	r0, #0
   2d36e:	496a      	ldr	r1, [pc, #424]	; (2d518 <_dtoa_r+0xa70>)
   2d370:	f7d3 fa38 	bl	7e4 <__aeabi_dsub>
   2d374:	4652      	mov	r2, sl
   2d376:	465b      	mov	r3, fp
   2d378:	f7d3 fe5a 	bl	1030 <__aeabi_dcmplt>
   2d37c:	2800      	cmp	r0, #0
   2d37e:	f040 8258 	bne.w	2d832 <_dtoa_r+0xd8a>
   2d382:	454d      	cmp	r5, r9
   2d384:	f000 80fa 	beq.w	2d57c <_dtoa_r+0xad4>
   2d388:	4650      	mov	r0, sl
   2d38a:	4659      	mov	r1, fp
   2d38c:	2200      	movs	r2, #0
   2d38e:	4b65      	ldr	r3, [pc, #404]	; (2d524 <_dtoa_r+0xa7c>)
   2d390:	f7d3 fbdc 	bl	b4c <__aeabi_dmul>
   2d394:	2200      	movs	r2, #0
   2d396:	4b63      	ldr	r3, [pc, #396]	; (2d524 <_dtoa_r+0xa7c>)
   2d398:	4682      	mov	sl, r0
   2d39a:	468b      	mov	fp, r1
   2d39c:	4630      	mov	r0, r6
   2d39e:	4639      	mov	r1, r7
   2d3a0:	f7d3 fbd4 	bl	b4c <__aeabi_dmul>
   2d3a4:	460f      	mov	r7, r1
   2d3a6:	4606      	mov	r6, r0
   2d3a8:	f7d3 fe80 	bl	10ac <__aeabi_d2iz>
   2d3ac:	4680      	mov	r8, r0
   2d3ae:	f7d3 fb67 	bl	a80 <__aeabi_i2d>
   2d3b2:	4602      	mov	r2, r0
   2d3b4:	460b      	mov	r3, r1
   2d3b6:	4630      	mov	r0, r6
   2d3b8:	4639      	mov	r1, r7
   2d3ba:	f7d3 fa13 	bl	7e4 <__aeabi_dsub>
   2d3be:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2d3c2:	fa5f f888 	uxtb.w	r8, r8
   2d3c6:	4652      	mov	r2, sl
   2d3c8:	465b      	mov	r3, fp
   2d3ca:	f805 8b01 	strb.w	r8, [r5], #1
   2d3ce:	4606      	mov	r6, r0
   2d3d0:	460f      	mov	r7, r1
   2d3d2:	f7d3 fe2d 	bl	1030 <__aeabi_dcmplt>
   2d3d6:	4632      	mov	r2, r6
   2d3d8:	463b      	mov	r3, r7
   2d3da:	2800      	cmp	r0, #0
   2d3dc:	d0c6      	beq.n	2d36c <_dtoa_r+0x8c4>
   2d3de:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d3e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d3e4:	9302      	str	r3, [sp, #8]
   2d3e6:	e523      	b.n	2ce30 <_dtoa_r+0x388>
   2d3e8:	2300      	movs	r3, #0
   2d3ea:	930b      	str	r3, [sp, #44]	; 0x2c
   2d3ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d3ee:	2b00      	cmp	r3, #0
   2d3f0:	f340 80dc 	ble.w	2d5ac <_dtoa_r+0xb04>
   2d3f4:	461f      	mov	r7, r3
   2d3f6:	461e      	mov	r6, r3
   2d3f8:	930f      	str	r3, [sp, #60]	; 0x3c
   2d3fa:	930a      	str	r3, [sp, #40]	; 0x28
   2d3fc:	e6f6      	b.n	2d1ec <_dtoa_r+0x744>
   2d3fe:	2301      	movs	r3, #1
   2d400:	930b      	str	r3, [sp, #44]	; 0x2c
   2d402:	e7f3      	b.n	2d3ec <_dtoa_r+0x944>
   2d404:	f1ba 0f00 	cmp.w	sl, #0
   2d408:	f47f ada8 	bne.w	2cf5c <_dtoa_r+0x4b4>
   2d40c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   2d410:	2b00      	cmp	r3, #0
   2d412:	f47f adba 	bne.w	2cf8a <_dtoa_r+0x4e2>
   2d416:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   2d41a:	0d3f      	lsrs	r7, r7, #20
   2d41c:	053f      	lsls	r7, r7, #20
   2d41e:	2f00      	cmp	r7, #0
   2d420:	f000 820d 	beq.w	2d83e <_dtoa_r+0xd96>
   2d424:	9b08      	ldr	r3, [sp, #32]
   2d426:	3301      	adds	r3, #1
   2d428:	9308      	str	r3, [sp, #32]
   2d42a:	9b06      	ldr	r3, [sp, #24]
   2d42c:	3301      	adds	r3, #1
   2d42e:	9306      	str	r3, [sp, #24]
   2d430:	2301      	movs	r3, #1
   2d432:	930c      	str	r3, [sp, #48]	; 0x30
   2d434:	e5ab      	b.n	2cf8e <_dtoa_r+0x4e6>
   2d436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d438:	2b00      	cmp	r3, #0
   2d43a:	f73f ac42 	bgt.w	2ccc2 <_dtoa_r+0x21a>
   2d43e:	f040 8221 	bne.w	2d884 <_dtoa_r+0xddc>
   2d442:	2200      	movs	r2, #0
   2d444:	4b38      	ldr	r3, [pc, #224]	; (2d528 <_dtoa_r+0xa80>)
   2d446:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2d44a:	f7d3 fb7f 	bl	b4c <__aeabi_dmul>
   2d44e:	4652      	mov	r2, sl
   2d450:	465b      	mov	r3, fp
   2d452:	f7d3 fe01 	bl	1058 <__aeabi_dcmpge>
   2d456:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   2d45a:	4646      	mov	r6, r8
   2d45c:	2800      	cmp	r0, #0
   2d45e:	d041      	beq.n	2d4e4 <_dtoa_r+0xa3c>
   2d460:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d462:	9d04      	ldr	r5, [sp, #16]
   2d464:	43db      	mvns	r3, r3
   2d466:	9302      	str	r3, [sp, #8]
   2d468:	4641      	mov	r1, r8
   2d46a:	4620      	mov	r0, r4
   2d46c:	f000 fbb4 	bl	2dbd8 <_Bfree>
   2d470:	2e00      	cmp	r6, #0
   2d472:	f43f acdd 	beq.w	2ce30 <_dtoa_r+0x388>
   2d476:	e6a7      	b.n	2d1c8 <_dtoa_r+0x720>
   2d478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2d47a:	4649      	mov	r1, r9
   2d47c:	4620      	mov	r0, r4
   2d47e:	f000 fce1 	bl	2de44 <__pow5mult>
   2d482:	4681      	mov	r9, r0
   2d484:	e558      	b.n	2cf38 <_dtoa_r+0x490>
   2d486:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2d488:	2a00      	cmp	r2, #0
   2d48a:	f000 8187 	beq.w	2d79c <_dtoa_r+0xcf4>
   2d48e:	f203 4333 	addw	r3, r3, #1075	; 0x433
   2d492:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d494:	9d08      	ldr	r5, [sp, #32]
   2d496:	e4f2      	b.n	2ce7e <_dtoa_r+0x3d6>
   2d498:	f1ba 0f00 	cmp.w	sl, #0
   2d49c:	f47f ad75 	bne.w	2cf8a <_dtoa_r+0x4e2>
   2d4a0:	e7b4      	b.n	2d40c <_dtoa_r+0x964>
   2d4a2:	f000 fba3 	bl	2dbec <__multadd>
   2d4a6:	4647      	mov	r7, r8
   2d4a8:	4606      	mov	r6, r0
   2d4aa:	4683      	mov	fp, r0
   2d4ac:	e5be      	b.n	2d02c <_dtoa_r+0x584>
   2d4ae:	4601      	mov	r1, r0
   2d4b0:	4620      	mov	r0, r4
   2d4b2:	9306      	str	r3, [sp, #24]
   2d4b4:	f000 fb90 	bl	2dbd8 <_Bfree>
   2d4b8:	2201      	movs	r2, #1
   2d4ba:	9b06      	ldr	r3, [sp, #24]
   2d4bc:	e5e0      	b.n	2d080 <_dtoa_r+0x5d8>
   2d4be:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d4c0:	2b02      	cmp	r3, #2
   2d4c2:	f77f ad96 	ble.w	2cff2 <_dtoa_r+0x54a>
   2d4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d4c8:	2b00      	cmp	r3, #0
   2d4ca:	d1c9      	bne.n	2d460 <_dtoa_r+0x9b8>
   2d4cc:	4641      	mov	r1, r8
   2d4ce:	2205      	movs	r2, #5
   2d4d0:	4620      	mov	r0, r4
   2d4d2:	f000 fb8b 	bl	2dbec <__multadd>
   2d4d6:	4601      	mov	r1, r0
   2d4d8:	4680      	mov	r8, r0
   2d4da:	4648      	mov	r0, r9
   2d4dc:	f000 fd54 	bl	2df88 <__mcmp>
   2d4e0:	2800      	cmp	r0, #0
   2d4e2:	ddbd      	ble.n	2d460 <_dtoa_r+0x9b8>
   2d4e4:	9a02      	ldr	r2, [sp, #8]
   2d4e6:	9904      	ldr	r1, [sp, #16]
   2d4e8:	2331      	movs	r3, #49	; 0x31
   2d4ea:	3201      	adds	r2, #1
   2d4ec:	9202      	str	r2, [sp, #8]
   2d4ee:	700b      	strb	r3, [r1, #0]
   2d4f0:	1c4d      	adds	r5, r1, #1
   2d4f2:	e7b9      	b.n	2d468 <_dtoa_r+0x9c0>
   2d4f4:	9a02      	ldr	r2, [sp, #8]
   2d4f6:	3201      	adds	r2, #1
   2d4f8:	9202      	str	r2, [sp, #8]
   2d4fa:	9a04      	ldr	r2, [sp, #16]
   2d4fc:	2331      	movs	r3, #49	; 0x31
   2d4fe:	7013      	strb	r3, [r2, #0]
   2d500:	e652      	b.n	2d1a8 <_dtoa_r+0x700>
   2d502:	2301      	movs	r3, #1
   2d504:	930b      	str	r3, [sp, #44]	; 0x2c
   2d506:	e666      	b.n	2d1d6 <_dtoa_r+0x72e>
   2d508:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2d50c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2d50e:	e48f      	b.n	2ce30 <_dtoa_r+0x388>
   2d510:	000332e0 	.word	0x000332e0
   2d514:	000332b8 	.word	0x000332b8
   2d518:	3ff00000 	.word	0x3ff00000
   2d51c:	401c0000 	.word	0x401c0000
   2d520:	3fe00000 	.word	0x3fe00000
   2d524:	40240000 	.word	0x40240000
   2d528:	40140000 	.word	0x40140000
   2d52c:	4650      	mov	r0, sl
   2d52e:	f7d3 faa7 	bl	a80 <__aeabi_i2d>
   2d532:	463a      	mov	r2, r7
   2d534:	4643      	mov	r3, r8
   2d536:	f7d3 fb09 	bl	b4c <__aeabi_dmul>
   2d53a:	2200      	movs	r2, #0
   2d53c:	4bc1      	ldr	r3, [pc, #772]	; (2d844 <_dtoa_r+0xd9c>)
   2d53e:	f7d3 f953 	bl	7e8 <__adddf3>
   2d542:	4605      	mov	r5, r0
   2d544:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d548:	4641      	mov	r1, r8
   2d54a:	2200      	movs	r2, #0
   2d54c:	4bbe      	ldr	r3, [pc, #760]	; (2d848 <_dtoa_r+0xda0>)
   2d54e:	4638      	mov	r0, r7
   2d550:	f7d3 f948 	bl	7e4 <__aeabi_dsub>
   2d554:	462a      	mov	r2, r5
   2d556:	4633      	mov	r3, r6
   2d558:	4682      	mov	sl, r0
   2d55a:	468b      	mov	fp, r1
   2d55c:	f7d3 fd86 	bl	106c <__aeabi_dcmpgt>
   2d560:	4680      	mov	r8, r0
   2d562:	2800      	cmp	r0, #0
   2d564:	f040 8110 	bne.w	2d788 <_dtoa_r+0xce0>
   2d568:	462a      	mov	r2, r5
   2d56a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2d56e:	4650      	mov	r0, sl
   2d570:	4659      	mov	r1, fp
   2d572:	f7d3 fd5d 	bl	1030 <__aeabi_dcmplt>
   2d576:	b118      	cbz	r0, 2d580 <_dtoa_r+0xad8>
   2d578:	4646      	mov	r6, r8
   2d57a:	e771      	b.n	2d460 <_dtoa_r+0x9b8>
   2d57c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d580:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   2d584:	f7ff bb8a 	b.w	2cc9c <_dtoa_r+0x1f4>
   2d588:	9804      	ldr	r0, [sp, #16]
   2d58a:	f7ff babb 	b.w	2cb04 <_dtoa_r+0x5c>
   2d58e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d590:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2d592:	970c      	str	r7, [sp, #48]	; 0x30
   2d594:	1afb      	subs	r3, r7, r3
   2d596:	441a      	add	r2, r3
   2d598:	920d      	str	r2, [sp, #52]	; 0x34
   2d59a:	2700      	movs	r7, #0
   2d59c:	e469      	b.n	2ce72 <_dtoa_r+0x3ca>
   2d59e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   2d5a2:	f04f 0a02 	mov.w	sl, #2
   2d5a6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   2d5aa:	e657      	b.n	2d25c <_dtoa_r+0x7b4>
   2d5ac:	2100      	movs	r1, #0
   2d5ae:	2301      	movs	r3, #1
   2d5b0:	6461      	str	r1, [r4, #68]	; 0x44
   2d5b2:	4620      	mov	r0, r4
   2d5b4:	9325      	str	r3, [sp, #148]	; 0x94
   2d5b6:	f000 fae9 	bl	2db8c <_Balloc>
   2d5ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d5bc:	9004      	str	r0, [sp, #16]
   2d5be:	6420      	str	r0, [r4, #64]	; 0x40
   2d5c0:	930a      	str	r3, [sp, #40]	; 0x28
   2d5c2:	930f      	str	r3, [sp, #60]	; 0x3c
   2d5c4:	e629      	b.n	2d21a <_dtoa_r+0x772>
   2d5c6:	2a00      	cmp	r2, #0
   2d5c8:	46d0      	mov	r8, sl
   2d5ca:	f8cd b018 	str.w	fp, [sp, #24]
   2d5ce:	469a      	mov	sl, r3
   2d5d0:	dd11      	ble.n	2d5f6 <_dtoa_r+0xb4e>
   2d5d2:	4649      	mov	r1, r9
   2d5d4:	2201      	movs	r2, #1
   2d5d6:	4620      	mov	r0, r4
   2d5d8:	f000 fc84 	bl	2dee4 <__lshift>
   2d5dc:	4641      	mov	r1, r8
   2d5de:	4681      	mov	r9, r0
   2d5e0:	f000 fcd2 	bl	2df88 <__mcmp>
   2d5e4:	2800      	cmp	r0, #0
   2d5e6:	f340 8146 	ble.w	2d876 <_dtoa_r+0xdce>
   2d5ea:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   2d5ee:	f000 8106 	beq.w	2d7fe <_dtoa_r+0xd56>
   2d5f2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   2d5f6:	46b3      	mov	fp, r6
   2d5f8:	f887 a000 	strb.w	sl, [r7]
   2d5fc:	1c7d      	adds	r5, r7, #1
   2d5fe:	9e06      	ldr	r6, [sp, #24]
   2d600:	e5d2      	b.n	2d1a8 <_dtoa_r+0x700>
   2d602:	d104      	bne.n	2d60e <_dtoa_r+0xb66>
   2d604:	f01a 0f01 	tst.w	sl, #1
   2d608:	d001      	beq.n	2d60e <_dtoa_r+0xb66>
   2d60a:	e5bd      	b.n	2d188 <_dtoa_r+0x6e0>
   2d60c:	4615      	mov	r5, r2
   2d60e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2d612:	2b30      	cmp	r3, #48	; 0x30
   2d614:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2d618:	d0f8      	beq.n	2d60c <_dtoa_r+0xb64>
   2d61a:	e5c5      	b.n	2d1a8 <_dtoa_r+0x700>
   2d61c:	9904      	ldr	r1, [sp, #16]
   2d61e:	2230      	movs	r2, #48	; 0x30
   2d620:	700a      	strb	r2, [r1, #0]
   2d622:	9a02      	ldr	r2, [sp, #8]
   2d624:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2d628:	3201      	adds	r2, #1
   2d62a:	9202      	str	r2, [sp, #8]
   2d62c:	f7ff bbfc 	b.w	2ce28 <_dtoa_r+0x380>
   2d630:	f000 80bb 	beq.w	2d7aa <_dtoa_r+0xd02>
   2d634:	9b02      	ldr	r3, [sp, #8]
   2d636:	425d      	negs	r5, r3
   2d638:	4b84      	ldr	r3, [pc, #528]	; (2d84c <_dtoa_r+0xda4>)
   2d63a:	f005 020f 	and.w	r2, r5, #15
   2d63e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d642:	e9d3 2300 	ldrd	r2, r3, [r3]
   2d646:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2d64a:	f7d3 fa7f 	bl	b4c <__aeabi_dmul>
   2d64e:	112d      	asrs	r5, r5, #4
   2d650:	4607      	mov	r7, r0
   2d652:	4688      	mov	r8, r1
   2d654:	f000 812c 	beq.w	2d8b0 <_dtoa_r+0xe08>
   2d658:	4e7d      	ldr	r6, [pc, #500]	; (2d850 <_dtoa_r+0xda8>)
   2d65a:	f04f 0a02 	mov.w	sl, #2
   2d65e:	07eb      	lsls	r3, r5, #31
   2d660:	d509      	bpl.n	2d676 <_dtoa_r+0xbce>
   2d662:	4638      	mov	r0, r7
   2d664:	4641      	mov	r1, r8
   2d666:	e9d6 2300 	ldrd	r2, r3, [r6]
   2d66a:	f7d3 fa6f 	bl	b4c <__aeabi_dmul>
   2d66e:	f10a 0a01 	add.w	sl, sl, #1
   2d672:	4607      	mov	r7, r0
   2d674:	4688      	mov	r8, r1
   2d676:	106d      	asrs	r5, r5, #1
   2d678:	f106 0608 	add.w	r6, r6, #8
   2d67c:	d1ef      	bne.n	2d65e <_dtoa_r+0xbb6>
   2d67e:	e608      	b.n	2d292 <_dtoa_r+0x7ea>
   2d680:	6871      	ldr	r1, [r6, #4]
   2d682:	4620      	mov	r0, r4
   2d684:	f000 fa82 	bl	2db8c <_Balloc>
   2d688:	6933      	ldr	r3, [r6, #16]
   2d68a:	3302      	adds	r3, #2
   2d68c:	009a      	lsls	r2, r3, #2
   2d68e:	4605      	mov	r5, r0
   2d690:	f106 010c 	add.w	r1, r6, #12
   2d694:	300c      	adds	r0, #12
   2d696:	f7d2 fe13 	bl	2c0 <memcpy>
   2d69a:	4629      	mov	r1, r5
   2d69c:	2201      	movs	r2, #1
   2d69e:	4620      	mov	r0, r4
   2d6a0:	f000 fc20 	bl	2dee4 <__lshift>
   2d6a4:	9006      	str	r0, [sp, #24]
   2d6a6:	e4b5      	b.n	2d014 <_dtoa_r+0x56c>
   2d6a8:	2b39      	cmp	r3, #57	; 0x39
   2d6aa:	f8cd b018 	str.w	fp, [sp, #24]
   2d6ae:	46d0      	mov	r8, sl
   2d6b0:	f000 80a5 	beq.w	2d7fe <_dtoa_r+0xd56>
   2d6b4:	f103 0a01 	add.w	sl, r3, #1
   2d6b8:	46b3      	mov	fp, r6
   2d6ba:	f887 a000 	strb.w	sl, [r7]
   2d6be:	1c7d      	adds	r5, r7, #1
   2d6c0:	9e06      	ldr	r6, [sp, #24]
   2d6c2:	e571      	b.n	2d1a8 <_dtoa_r+0x700>
   2d6c4:	465a      	mov	r2, fp
   2d6c6:	46d0      	mov	r8, sl
   2d6c8:	46b3      	mov	fp, r6
   2d6ca:	469a      	mov	sl, r3
   2d6cc:	4616      	mov	r6, r2
   2d6ce:	e54f      	b.n	2d170 <_dtoa_r+0x6c8>
   2d6d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d6d2:	495e      	ldr	r1, [pc, #376]	; (2d84c <_dtoa_r+0xda4>)
   2d6d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2d6d8:	462a      	mov	r2, r5
   2d6da:	4633      	mov	r3, r6
   2d6dc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   2d6e0:	f7d3 fa34 	bl	b4c <__aeabi_dmul>
   2d6e4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   2d6e8:	4638      	mov	r0, r7
   2d6ea:	4641      	mov	r1, r8
   2d6ec:	f7d3 fcde 	bl	10ac <__aeabi_d2iz>
   2d6f0:	4605      	mov	r5, r0
   2d6f2:	f7d3 f9c5 	bl	a80 <__aeabi_i2d>
   2d6f6:	460b      	mov	r3, r1
   2d6f8:	4602      	mov	r2, r0
   2d6fa:	4641      	mov	r1, r8
   2d6fc:	4638      	mov	r0, r7
   2d6fe:	f7d3 f871 	bl	7e4 <__aeabi_dsub>
   2d702:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d704:	460f      	mov	r7, r1
   2d706:	9904      	ldr	r1, [sp, #16]
   2d708:	3530      	adds	r5, #48	; 0x30
   2d70a:	2b01      	cmp	r3, #1
   2d70c:	700d      	strb	r5, [r1, #0]
   2d70e:	4606      	mov	r6, r0
   2d710:	f101 0501 	add.w	r5, r1, #1
   2d714:	d026      	beq.n	2d764 <_dtoa_r+0xcbc>
   2d716:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d718:	9a04      	ldr	r2, [sp, #16]
   2d71a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 2d858 <_dtoa_r+0xdb0>
   2d71e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2d722:	4413      	add	r3, r2
   2d724:	f04f 0a00 	mov.w	sl, #0
   2d728:	4699      	mov	r9, r3
   2d72a:	4652      	mov	r2, sl
   2d72c:	465b      	mov	r3, fp
   2d72e:	4630      	mov	r0, r6
   2d730:	4639      	mov	r1, r7
   2d732:	f7d3 fa0b 	bl	b4c <__aeabi_dmul>
   2d736:	460f      	mov	r7, r1
   2d738:	4606      	mov	r6, r0
   2d73a:	f7d3 fcb7 	bl	10ac <__aeabi_d2iz>
   2d73e:	4680      	mov	r8, r0
   2d740:	f7d3 f99e 	bl	a80 <__aeabi_i2d>
   2d744:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2d748:	4602      	mov	r2, r0
   2d74a:	460b      	mov	r3, r1
   2d74c:	4630      	mov	r0, r6
   2d74e:	4639      	mov	r1, r7
   2d750:	f7d3 f848 	bl	7e4 <__aeabi_dsub>
   2d754:	f805 8b01 	strb.w	r8, [r5], #1
   2d758:	454d      	cmp	r5, r9
   2d75a:	4606      	mov	r6, r0
   2d75c:	460f      	mov	r7, r1
   2d75e:	d1e4      	bne.n	2d72a <_dtoa_r+0xc82>
   2d760:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d764:	4b3b      	ldr	r3, [pc, #236]	; (2d854 <_dtoa_r+0xdac>)
   2d766:	2200      	movs	r2, #0
   2d768:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   2d76c:	f7d3 f83c 	bl	7e8 <__adddf3>
   2d770:	4632      	mov	r2, r6
   2d772:	463b      	mov	r3, r7
   2d774:	f7d3 fc5c 	bl	1030 <__aeabi_dcmplt>
   2d778:	2800      	cmp	r0, #0
   2d77a:	d046      	beq.n	2d80a <_dtoa_r+0xd62>
   2d77c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d77e:	9302      	str	r3, [sp, #8]
   2d780:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2d784:	f7ff bb43 	b.w	2ce0e <_dtoa_r+0x366>
   2d788:	f04f 0800 	mov.w	r8, #0
   2d78c:	4646      	mov	r6, r8
   2d78e:	e6a9      	b.n	2d4e4 <_dtoa_r+0xa3c>
   2d790:	9b08      	ldr	r3, [sp, #32]
   2d792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d794:	1a9d      	subs	r5, r3, r2
   2d796:	2300      	movs	r3, #0
   2d798:	f7ff bb71 	b.w	2ce7e <_dtoa_r+0x3d6>
   2d79c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2d79e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d7a0:	9d08      	ldr	r5, [sp, #32]
   2d7a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2d7a6:	f7ff bb6a 	b.w	2ce7e <_dtoa_r+0x3d6>
   2d7aa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2d7ae:	f04f 0a02 	mov.w	sl, #2
   2d7b2:	e56e      	b.n	2d292 <_dtoa_r+0x7ea>
   2d7b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d7b6:	2b00      	cmp	r3, #0
   2d7b8:	f43f aeb8 	beq.w	2d52c <_dtoa_r+0xa84>
   2d7bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d7be:	2b00      	cmp	r3, #0
   2d7c0:	f77f aede 	ble.w	2d580 <_dtoa_r+0xad8>
   2d7c4:	2200      	movs	r2, #0
   2d7c6:	4b24      	ldr	r3, [pc, #144]	; (2d858 <_dtoa_r+0xdb0>)
   2d7c8:	4638      	mov	r0, r7
   2d7ca:	4641      	mov	r1, r8
   2d7cc:	f7d3 f9be 	bl	b4c <__aeabi_dmul>
   2d7d0:	4607      	mov	r7, r0
   2d7d2:	4688      	mov	r8, r1
   2d7d4:	f10a 0001 	add.w	r0, sl, #1
   2d7d8:	f7d3 f952 	bl	a80 <__aeabi_i2d>
   2d7dc:	463a      	mov	r2, r7
   2d7de:	4643      	mov	r3, r8
   2d7e0:	f7d3 f9b4 	bl	b4c <__aeabi_dmul>
   2d7e4:	2200      	movs	r2, #0
   2d7e6:	4b17      	ldr	r3, [pc, #92]	; (2d844 <_dtoa_r+0xd9c>)
   2d7e8:	f7d2 fffe 	bl	7e8 <__adddf3>
   2d7ec:	9a02      	ldr	r2, [sp, #8]
   2d7ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d7f0:	9312      	str	r3, [sp, #72]	; 0x48
   2d7f2:	3a01      	subs	r2, #1
   2d7f4:	4605      	mov	r5, r0
   2d7f6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d7fa:	9215      	str	r2, [sp, #84]	; 0x54
   2d7fc:	e56a      	b.n	2d2d4 <_dtoa_r+0x82c>
   2d7fe:	2239      	movs	r2, #57	; 0x39
   2d800:	46b3      	mov	fp, r6
   2d802:	703a      	strb	r2, [r7, #0]
   2d804:	9e06      	ldr	r6, [sp, #24]
   2d806:	1c7d      	adds	r5, r7, #1
   2d808:	e4c0      	b.n	2d18c <_dtoa_r+0x6e4>
   2d80a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   2d80e:	2000      	movs	r0, #0
   2d810:	4910      	ldr	r1, [pc, #64]	; (2d854 <_dtoa_r+0xdac>)
   2d812:	f7d2 ffe7 	bl	7e4 <__aeabi_dsub>
   2d816:	4632      	mov	r2, r6
   2d818:	463b      	mov	r3, r7
   2d81a:	f7d3 fc27 	bl	106c <__aeabi_dcmpgt>
   2d81e:	b908      	cbnz	r0, 2d824 <_dtoa_r+0xd7c>
   2d820:	e6ae      	b.n	2d580 <_dtoa_r+0xad8>
   2d822:	4615      	mov	r5, r2
   2d824:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2d828:	2b30      	cmp	r3, #48	; 0x30
   2d82a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2d82e:	d0f8      	beq.n	2d822 <_dtoa_r+0xd7a>
   2d830:	e5d7      	b.n	2d3e2 <_dtoa_r+0x93a>
   2d832:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d836:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d838:	9302      	str	r3, [sp, #8]
   2d83a:	f7ff bae8 	b.w	2ce0e <_dtoa_r+0x366>
   2d83e:	970c      	str	r7, [sp, #48]	; 0x30
   2d840:	f7ff bba5 	b.w	2cf8e <_dtoa_r+0x4e6>
   2d844:	401c0000 	.word	0x401c0000
   2d848:	40140000 	.word	0x40140000
   2d84c:	000332e0 	.word	0x000332e0
   2d850:	000332b8 	.word	0x000332b8
   2d854:	3fe00000 	.word	0x3fe00000
   2d858:	40240000 	.word	0x40240000
   2d85c:	2b39      	cmp	r3, #57	; 0x39
   2d85e:	f8cd b018 	str.w	fp, [sp, #24]
   2d862:	46d0      	mov	r8, sl
   2d864:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   2d868:	469a      	mov	sl, r3
   2d86a:	d0c8      	beq.n	2d7fe <_dtoa_r+0xd56>
   2d86c:	f1bb 0f00 	cmp.w	fp, #0
   2d870:	f73f aebf 	bgt.w	2d5f2 <_dtoa_r+0xb4a>
   2d874:	e6bf      	b.n	2d5f6 <_dtoa_r+0xb4e>
   2d876:	f47f aebe 	bne.w	2d5f6 <_dtoa_r+0xb4e>
   2d87a:	f01a 0f01 	tst.w	sl, #1
   2d87e:	f43f aeba 	beq.w	2d5f6 <_dtoa_r+0xb4e>
   2d882:	e6b2      	b.n	2d5ea <_dtoa_r+0xb42>
   2d884:	f04f 0800 	mov.w	r8, #0
   2d888:	4646      	mov	r6, r8
   2d88a:	e5e9      	b.n	2d460 <_dtoa_r+0x9b8>
   2d88c:	4631      	mov	r1, r6
   2d88e:	2300      	movs	r3, #0
   2d890:	220a      	movs	r2, #10
   2d892:	4620      	mov	r0, r4
   2d894:	f000 f9aa 	bl	2dbec <__multadd>
   2d898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d89a:	2b00      	cmp	r3, #0
   2d89c:	4606      	mov	r6, r0
   2d89e:	dd0a      	ble.n	2d8b6 <_dtoa_r+0xe0e>
   2d8a0:	930a      	str	r3, [sp, #40]	; 0x28
   2d8a2:	f7ff bbaa 	b.w	2cffa <_dtoa_r+0x552>
   2d8a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d8a8:	2b02      	cmp	r3, #2
   2d8aa:	dc23      	bgt.n	2d8f4 <_dtoa_r+0xe4c>
   2d8ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d8ae:	e43b      	b.n	2d128 <_dtoa_r+0x680>
   2d8b0:	f04f 0a02 	mov.w	sl, #2
   2d8b4:	e4ed      	b.n	2d292 <_dtoa_r+0x7ea>
   2d8b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d8b8:	2b02      	cmp	r3, #2
   2d8ba:	dc1b      	bgt.n	2d8f4 <_dtoa_r+0xe4c>
   2d8bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d8be:	e7ef      	b.n	2d8a0 <_dtoa_r+0xdf8>
   2d8c0:	2500      	movs	r5, #0
   2d8c2:	6465      	str	r5, [r4, #68]	; 0x44
   2d8c4:	4629      	mov	r1, r5
   2d8c6:	4620      	mov	r0, r4
   2d8c8:	f000 f960 	bl	2db8c <_Balloc>
   2d8cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d8d0:	930a      	str	r3, [sp, #40]	; 0x28
   2d8d2:	930f      	str	r3, [sp, #60]	; 0x3c
   2d8d4:	2301      	movs	r3, #1
   2d8d6:	9004      	str	r0, [sp, #16]
   2d8d8:	9525      	str	r5, [sp, #148]	; 0x94
   2d8da:	6420      	str	r0, [r4, #64]	; 0x40
   2d8dc:	930b      	str	r3, [sp, #44]	; 0x2c
   2d8de:	f7ff b9dd 	b.w	2cc9c <_dtoa_r+0x1f4>
   2d8e2:	2501      	movs	r5, #1
   2d8e4:	f7ff b9a5 	b.w	2cc32 <_dtoa_r+0x18a>
   2d8e8:	f43f ab69 	beq.w	2cfbe <_dtoa_r+0x516>
   2d8ec:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   2d8f0:	f7ff bbf9 	b.w	2d0e6 <_dtoa_r+0x63e>
   2d8f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d8f6:	930a      	str	r3, [sp, #40]	; 0x28
   2d8f8:	e5e5      	b.n	2d4c6 <_dtoa_r+0xa1e>
   2d8fa:	bf00      	nop

0002d8fc <_malloc_trim_r>:
   2d8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d8fe:	4f24      	ldr	r7, [pc, #144]	; (2d990 <_malloc_trim_r+0x94>)
   2d900:	460c      	mov	r4, r1
   2d902:	4606      	mov	r6, r0
   2d904:	f7fd f826 	bl	2a954 <__malloc_lock>
   2d908:	68bb      	ldr	r3, [r7, #8]
   2d90a:	685d      	ldr	r5, [r3, #4]
   2d90c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2d910:	310f      	adds	r1, #15
   2d912:	f025 0503 	bic.w	r5, r5, #3
   2d916:	4429      	add	r1, r5
   2d918:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   2d91c:	f021 010f 	bic.w	r1, r1, #15
   2d920:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   2d924:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2d928:	db07      	blt.n	2d93a <_malloc_trim_r+0x3e>
   2d92a:	2100      	movs	r1, #0
   2d92c:	4630      	mov	r0, r6
   2d92e:	f7fd f83d 	bl	2a9ac <_sbrk_r>
   2d932:	68bb      	ldr	r3, [r7, #8]
   2d934:	442b      	add	r3, r5
   2d936:	4298      	cmp	r0, r3
   2d938:	d004      	beq.n	2d944 <_malloc_trim_r+0x48>
   2d93a:	4630      	mov	r0, r6
   2d93c:	f7fd f810 	bl	2a960 <__malloc_unlock>
   2d940:	2000      	movs	r0, #0
   2d942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d944:	4261      	negs	r1, r4
   2d946:	4630      	mov	r0, r6
   2d948:	f7fd f830 	bl	2a9ac <_sbrk_r>
   2d94c:	3001      	adds	r0, #1
   2d94e:	d00d      	beq.n	2d96c <_malloc_trim_r+0x70>
   2d950:	4b10      	ldr	r3, [pc, #64]	; (2d994 <_malloc_trim_r+0x98>)
   2d952:	68ba      	ldr	r2, [r7, #8]
   2d954:	6819      	ldr	r1, [r3, #0]
   2d956:	1b2d      	subs	r5, r5, r4
   2d958:	f045 0501 	orr.w	r5, r5, #1
   2d95c:	4630      	mov	r0, r6
   2d95e:	1b09      	subs	r1, r1, r4
   2d960:	6055      	str	r5, [r2, #4]
   2d962:	6019      	str	r1, [r3, #0]
   2d964:	f7fc fffc 	bl	2a960 <__malloc_unlock>
   2d968:	2001      	movs	r0, #1
   2d96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d96c:	2100      	movs	r1, #0
   2d96e:	4630      	mov	r0, r6
   2d970:	f7fd f81c 	bl	2a9ac <_sbrk_r>
   2d974:	68ba      	ldr	r2, [r7, #8]
   2d976:	1a83      	subs	r3, r0, r2
   2d978:	2b0f      	cmp	r3, #15
   2d97a:	ddde      	ble.n	2d93a <_malloc_trim_r+0x3e>
   2d97c:	4c06      	ldr	r4, [pc, #24]	; (2d998 <_malloc_trim_r+0x9c>)
   2d97e:	4905      	ldr	r1, [pc, #20]	; (2d994 <_malloc_trim_r+0x98>)
   2d980:	6824      	ldr	r4, [r4, #0]
   2d982:	f043 0301 	orr.w	r3, r3, #1
   2d986:	1b00      	subs	r0, r0, r4
   2d988:	6053      	str	r3, [r2, #4]
   2d98a:	6008      	str	r0, [r1, #0]
   2d98c:	e7d5      	b.n	2d93a <_malloc_trim_r+0x3e>
   2d98e:	bf00      	nop
   2d990:	2000d10c 	.word	0x2000d10c
   2d994:	20002e88 	.word	0x20002e88
   2d998:	2000d514 	.word	0x2000d514

0002d99c <_free_r>:
   2d99c:	2900      	cmp	r1, #0
   2d99e:	d044      	beq.n	2da2a <_free_r+0x8e>
   2d9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d9a4:	460d      	mov	r5, r1
   2d9a6:	4680      	mov	r8, r0
   2d9a8:	f7fc ffd4 	bl	2a954 <__malloc_lock>
   2d9ac:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2d9b0:	4969      	ldr	r1, [pc, #420]	; (2db58 <_free_r+0x1bc>)
   2d9b2:	f027 0301 	bic.w	r3, r7, #1
   2d9b6:	f1a5 0408 	sub.w	r4, r5, #8
   2d9ba:	18e2      	adds	r2, r4, r3
   2d9bc:	688e      	ldr	r6, [r1, #8]
   2d9be:	6850      	ldr	r0, [r2, #4]
   2d9c0:	42b2      	cmp	r2, r6
   2d9c2:	f020 0003 	bic.w	r0, r0, #3
   2d9c6:	d05e      	beq.n	2da86 <_free_r+0xea>
   2d9c8:	07fe      	lsls	r6, r7, #31
   2d9ca:	6050      	str	r0, [r2, #4]
   2d9cc:	d40b      	bmi.n	2d9e6 <_free_r+0x4a>
   2d9ce:	f855 7c08 	ldr.w	r7, [r5, #-8]
   2d9d2:	1be4      	subs	r4, r4, r7
   2d9d4:	f101 0e08 	add.w	lr, r1, #8
   2d9d8:	68a5      	ldr	r5, [r4, #8]
   2d9da:	4575      	cmp	r5, lr
   2d9dc:	443b      	add	r3, r7
   2d9de:	d06d      	beq.n	2dabc <_free_r+0x120>
   2d9e0:	68e7      	ldr	r7, [r4, #12]
   2d9e2:	60ef      	str	r7, [r5, #12]
   2d9e4:	60bd      	str	r5, [r7, #8]
   2d9e6:	1815      	adds	r5, r2, r0
   2d9e8:	686d      	ldr	r5, [r5, #4]
   2d9ea:	07ed      	lsls	r5, r5, #31
   2d9ec:	d53e      	bpl.n	2da6c <_free_r+0xd0>
   2d9ee:	f043 0201 	orr.w	r2, r3, #1
   2d9f2:	6062      	str	r2, [r4, #4]
   2d9f4:	50e3      	str	r3, [r4, r3]
   2d9f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2d9fa:	d217      	bcs.n	2da2c <_free_r+0x90>
   2d9fc:	08db      	lsrs	r3, r3, #3
   2d9fe:	1c58      	adds	r0, r3, #1
   2da00:	109a      	asrs	r2, r3, #2
   2da02:	684d      	ldr	r5, [r1, #4]
   2da04:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   2da08:	60a7      	str	r7, [r4, #8]
   2da0a:	2301      	movs	r3, #1
   2da0c:	4093      	lsls	r3, r2
   2da0e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   2da12:	432b      	orrs	r3, r5
   2da14:	3a08      	subs	r2, #8
   2da16:	60e2      	str	r2, [r4, #12]
   2da18:	604b      	str	r3, [r1, #4]
   2da1a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   2da1e:	60fc      	str	r4, [r7, #12]
   2da20:	4640      	mov	r0, r8
   2da22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2da26:	f7fc bf9b 	b.w	2a960 <__malloc_unlock>
   2da2a:	4770      	bx	lr
   2da2c:	0a5a      	lsrs	r2, r3, #9
   2da2e:	2a04      	cmp	r2, #4
   2da30:	d852      	bhi.n	2dad8 <_free_r+0x13c>
   2da32:	099a      	lsrs	r2, r3, #6
   2da34:	f102 0739 	add.w	r7, r2, #57	; 0x39
   2da38:	00ff      	lsls	r7, r7, #3
   2da3a:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2da3e:	19c8      	adds	r0, r1, r7
   2da40:	59ca      	ldr	r2, [r1, r7]
   2da42:	3808      	subs	r0, #8
   2da44:	4290      	cmp	r0, r2
   2da46:	d04f      	beq.n	2dae8 <_free_r+0x14c>
   2da48:	6851      	ldr	r1, [r2, #4]
   2da4a:	f021 0103 	bic.w	r1, r1, #3
   2da4e:	428b      	cmp	r3, r1
   2da50:	d232      	bcs.n	2dab8 <_free_r+0x11c>
   2da52:	6892      	ldr	r2, [r2, #8]
   2da54:	4290      	cmp	r0, r2
   2da56:	d1f7      	bne.n	2da48 <_free_r+0xac>
   2da58:	68c3      	ldr	r3, [r0, #12]
   2da5a:	60a0      	str	r0, [r4, #8]
   2da5c:	60e3      	str	r3, [r4, #12]
   2da5e:	609c      	str	r4, [r3, #8]
   2da60:	60c4      	str	r4, [r0, #12]
   2da62:	4640      	mov	r0, r8
   2da64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2da68:	f7fc bf7a 	b.w	2a960 <__malloc_unlock>
   2da6c:	6895      	ldr	r5, [r2, #8]
   2da6e:	4f3b      	ldr	r7, [pc, #236]	; (2db5c <_free_r+0x1c0>)
   2da70:	42bd      	cmp	r5, r7
   2da72:	4403      	add	r3, r0
   2da74:	d040      	beq.n	2daf8 <_free_r+0x15c>
   2da76:	68d0      	ldr	r0, [r2, #12]
   2da78:	60e8      	str	r0, [r5, #12]
   2da7a:	f043 0201 	orr.w	r2, r3, #1
   2da7e:	6085      	str	r5, [r0, #8]
   2da80:	6062      	str	r2, [r4, #4]
   2da82:	50e3      	str	r3, [r4, r3]
   2da84:	e7b7      	b.n	2d9f6 <_free_r+0x5a>
   2da86:	07ff      	lsls	r7, r7, #31
   2da88:	4403      	add	r3, r0
   2da8a:	d407      	bmi.n	2da9c <_free_r+0x100>
   2da8c:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2da90:	1aa4      	subs	r4, r4, r2
   2da92:	4413      	add	r3, r2
   2da94:	68a0      	ldr	r0, [r4, #8]
   2da96:	68e2      	ldr	r2, [r4, #12]
   2da98:	60c2      	str	r2, [r0, #12]
   2da9a:	6090      	str	r0, [r2, #8]
   2da9c:	4a30      	ldr	r2, [pc, #192]	; (2db60 <_free_r+0x1c4>)
   2da9e:	6812      	ldr	r2, [r2, #0]
   2daa0:	f043 0001 	orr.w	r0, r3, #1
   2daa4:	4293      	cmp	r3, r2
   2daa6:	6060      	str	r0, [r4, #4]
   2daa8:	608c      	str	r4, [r1, #8]
   2daaa:	d3b9      	bcc.n	2da20 <_free_r+0x84>
   2daac:	4b2d      	ldr	r3, [pc, #180]	; (2db64 <_free_r+0x1c8>)
   2daae:	4640      	mov	r0, r8
   2dab0:	6819      	ldr	r1, [r3, #0]
   2dab2:	f7ff ff23 	bl	2d8fc <_malloc_trim_r>
   2dab6:	e7b3      	b.n	2da20 <_free_r+0x84>
   2dab8:	4610      	mov	r0, r2
   2daba:	e7cd      	b.n	2da58 <_free_r+0xbc>
   2dabc:	1811      	adds	r1, r2, r0
   2dabe:	6849      	ldr	r1, [r1, #4]
   2dac0:	07c9      	lsls	r1, r1, #31
   2dac2:	d444      	bmi.n	2db4e <_free_r+0x1b2>
   2dac4:	6891      	ldr	r1, [r2, #8]
   2dac6:	68d2      	ldr	r2, [r2, #12]
   2dac8:	60ca      	str	r2, [r1, #12]
   2daca:	4403      	add	r3, r0
   2dacc:	f043 0001 	orr.w	r0, r3, #1
   2dad0:	6091      	str	r1, [r2, #8]
   2dad2:	6060      	str	r0, [r4, #4]
   2dad4:	50e3      	str	r3, [r4, r3]
   2dad6:	e7a3      	b.n	2da20 <_free_r+0x84>
   2dad8:	2a14      	cmp	r2, #20
   2dada:	d816      	bhi.n	2db0a <_free_r+0x16e>
   2dadc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   2dae0:	00ff      	lsls	r7, r7, #3
   2dae2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   2dae6:	e7aa      	b.n	2da3e <_free_r+0xa2>
   2dae8:	10aa      	asrs	r2, r5, #2
   2daea:	2301      	movs	r3, #1
   2daec:	684d      	ldr	r5, [r1, #4]
   2daee:	4093      	lsls	r3, r2
   2daf0:	432b      	orrs	r3, r5
   2daf2:	604b      	str	r3, [r1, #4]
   2daf4:	4603      	mov	r3, r0
   2daf6:	e7b0      	b.n	2da5a <_free_r+0xbe>
   2daf8:	f043 0201 	orr.w	r2, r3, #1
   2dafc:	614c      	str	r4, [r1, #20]
   2dafe:	610c      	str	r4, [r1, #16]
   2db00:	60e5      	str	r5, [r4, #12]
   2db02:	60a5      	str	r5, [r4, #8]
   2db04:	6062      	str	r2, [r4, #4]
   2db06:	50e3      	str	r3, [r4, r3]
   2db08:	e78a      	b.n	2da20 <_free_r+0x84>
   2db0a:	2a54      	cmp	r2, #84	; 0x54
   2db0c:	d806      	bhi.n	2db1c <_free_r+0x180>
   2db0e:	0b1a      	lsrs	r2, r3, #12
   2db10:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   2db14:	00ff      	lsls	r7, r7, #3
   2db16:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   2db1a:	e790      	b.n	2da3e <_free_r+0xa2>
   2db1c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2db20:	d806      	bhi.n	2db30 <_free_r+0x194>
   2db22:	0bda      	lsrs	r2, r3, #15
   2db24:	f102 0778 	add.w	r7, r2, #120	; 0x78
   2db28:	00ff      	lsls	r7, r7, #3
   2db2a:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2db2e:	e786      	b.n	2da3e <_free_r+0xa2>
   2db30:	f240 5054 	movw	r0, #1364	; 0x554
   2db34:	4282      	cmp	r2, r0
   2db36:	d806      	bhi.n	2db46 <_free_r+0x1aa>
   2db38:	0c9a      	lsrs	r2, r3, #18
   2db3a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2db3e:	00ff      	lsls	r7, r7, #3
   2db40:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   2db44:	e77b      	b.n	2da3e <_free_r+0xa2>
   2db46:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   2db4a:	257e      	movs	r5, #126	; 0x7e
   2db4c:	e777      	b.n	2da3e <_free_r+0xa2>
   2db4e:	f043 0101 	orr.w	r1, r3, #1
   2db52:	6061      	str	r1, [r4, #4]
   2db54:	6013      	str	r3, [r2, #0]
   2db56:	e763      	b.n	2da20 <_free_r+0x84>
   2db58:	2000d10c 	.word	0x2000d10c
   2db5c:	2000d114 	.word	0x2000d114
   2db60:	2000d518 	.word	0x2000d518
   2db64:	20002eb8 	.word	0x20002eb8

0002db68 <_localeconv_r>:
   2db68:	4a04      	ldr	r2, [pc, #16]	; (2db7c <_localeconv_r+0x14>)
   2db6a:	4b05      	ldr	r3, [pc, #20]	; (2db80 <_localeconv_r+0x18>)
   2db6c:	6812      	ldr	r2, [r2, #0]
   2db6e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   2db70:	2800      	cmp	r0, #0
   2db72:	bf08      	it	eq
   2db74:	4618      	moveq	r0, r3
   2db76:	30f0      	adds	r0, #240	; 0xf0
   2db78:	4770      	bx	lr
   2db7a:	bf00      	nop
   2db7c:	2000cb70 	.word	0x2000cb70
   2db80:	2000cfa0 	.word	0x2000cfa0

0002db84 <__retarget_lock_acquire_recursive>:
   2db84:	4770      	bx	lr
   2db86:	bf00      	nop

0002db88 <__retarget_lock_release_recursive>:
   2db88:	4770      	bx	lr
   2db8a:	bf00      	nop

0002db8c <_Balloc>:
   2db8c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2db8e:	b570      	push	{r4, r5, r6, lr}
   2db90:	4605      	mov	r5, r0
   2db92:	460c      	mov	r4, r1
   2db94:	b14b      	cbz	r3, 2dbaa <_Balloc+0x1e>
   2db96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2db9a:	b180      	cbz	r0, 2dbbe <_Balloc+0x32>
   2db9c:	6802      	ldr	r2, [r0, #0]
   2db9e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2dba2:	2300      	movs	r3, #0
   2dba4:	6103      	str	r3, [r0, #16]
   2dba6:	60c3      	str	r3, [r0, #12]
   2dba8:	bd70      	pop	{r4, r5, r6, pc}
   2dbaa:	2221      	movs	r2, #33	; 0x21
   2dbac:	2104      	movs	r1, #4
   2dbae:	f7fc fae7 	bl	2a180 <_calloc_r>
   2dbb2:	64e8      	str	r0, [r5, #76]	; 0x4c
   2dbb4:	4603      	mov	r3, r0
   2dbb6:	2800      	cmp	r0, #0
   2dbb8:	d1ed      	bne.n	2db96 <_Balloc+0xa>
   2dbba:	2000      	movs	r0, #0
   2dbbc:	bd70      	pop	{r4, r5, r6, pc}
   2dbbe:	2101      	movs	r1, #1
   2dbc0:	fa01 f604 	lsl.w	r6, r1, r4
   2dbc4:	1d72      	adds	r2, r6, #5
   2dbc6:	4628      	mov	r0, r5
   2dbc8:	0092      	lsls	r2, r2, #2
   2dbca:	f7fc fad9 	bl	2a180 <_calloc_r>
   2dbce:	2800      	cmp	r0, #0
   2dbd0:	d0f3      	beq.n	2dbba <_Balloc+0x2e>
   2dbd2:	6044      	str	r4, [r0, #4]
   2dbd4:	6086      	str	r6, [r0, #8]
   2dbd6:	e7e4      	b.n	2dba2 <_Balloc+0x16>

0002dbd8 <_Bfree>:
   2dbd8:	b131      	cbz	r1, 2dbe8 <_Bfree+0x10>
   2dbda:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2dbdc:	684a      	ldr	r2, [r1, #4]
   2dbde:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2dbe2:	6008      	str	r0, [r1, #0]
   2dbe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2dbe8:	4770      	bx	lr
   2dbea:	bf00      	nop

0002dbec <__multadd>:
   2dbec:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dbee:	690c      	ldr	r4, [r1, #16]
   2dbf0:	b083      	sub	sp, #12
   2dbf2:	460d      	mov	r5, r1
   2dbf4:	4606      	mov	r6, r0
   2dbf6:	f101 0e14 	add.w	lr, r1, #20
   2dbfa:	2700      	movs	r7, #0
   2dbfc:	f8de 0000 	ldr.w	r0, [lr]
   2dc00:	b281      	uxth	r1, r0
   2dc02:	fb02 3301 	mla	r3, r2, r1, r3
   2dc06:	0c01      	lsrs	r1, r0, #16
   2dc08:	0c18      	lsrs	r0, r3, #16
   2dc0a:	fb02 0101 	mla	r1, r2, r1, r0
   2dc0e:	b29b      	uxth	r3, r3
   2dc10:	3701      	adds	r7, #1
   2dc12:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   2dc16:	42bc      	cmp	r4, r7
   2dc18:	f84e 3b04 	str.w	r3, [lr], #4
   2dc1c:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2dc20:	dcec      	bgt.n	2dbfc <__multadd+0x10>
   2dc22:	b13b      	cbz	r3, 2dc34 <__multadd+0x48>
   2dc24:	68aa      	ldr	r2, [r5, #8]
   2dc26:	4294      	cmp	r4, r2
   2dc28:	da07      	bge.n	2dc3a <__multadd+0x4e>
   2dc2a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   2dc2e:	3401      	adds	r4, #1
   2dc30:	6153      	str	r3, [r2, #20]
   2dc32:	612c      	str	r4, [r5, #16]
   2dc34:	4628      	mov	r0, r5
   2dc36:	b003      	add	sp, #12
   2dc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2dc3a:	6869      	ldr	r1, [r5, #4]
   2dc3c:	9301      	str	r3, [sp, #4]
   2dc3e:	3101      	adds	r1, #1
   2dc40:	4630      	mov	r0, r6
   2dc42:	f7ff ffa3 	bl	2db8c <_Balloc>
   2dc46:	692a      	ldr	r2, [r5, #16]
   2dc48:	3202      	adds	r2, #2
   2dc4a:	f105 010c 	add.w	r1, r5, #12
   2dc4e:	4607      	mov	r7, r0
   2dc50:	0092      	lsls	r2, r2, #2
   2dc52:	300c      	adds	r0, #12
   2dc54:	f7d2 fb34 	bl	2c0 <memcpy>
   2dc58:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   2dc5a:	6869      	ldr	r1, [r5, #4]
   2dc5c:	9b01      	ldr	r3, [sp, #4]
   2dc5e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2dc62:	6028      	str	r0, [r5, #0]
   2dc64:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   2dc68:	463d      	mov	r5, r7
   2dc6a:	e7de      	b.n	2dc2a <__multadd+0x3e>

0002dc6c <__hi0bits>:
   2dc6c:	0c02      	lsrs	r2, r0, #16
   2dc6e:	0412      	lsls	r2, r2, #16
   2dc70:	4603      	mov	r3, r0
   2dc72:	b9b2      	cbnz	r2, 2dca2 <__hi0bits+0x36>
   2dc74:	0403      	lsls	r3, r0, #16
   2dc76:	2010      	movs	r0, #16
   2dc78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2dc7c:	bf04      	itt	eq
   2dc7e:	021b      	lsleq	r3, r3, #8
   2dc80:	3008      	addeq	r0, #8
   2dc82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2dc86:	bf04      	itt	eq
   2dc88:	011b      	lsleq	r3, r3, #4
   2dc8a:	3004      	addeq	r0, #4
   2dc8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2dc90:	bf04      	itt	eq
   2dc92:	009b      	lsleq	r3, r3, #2
   2dc94:	3002      	addeq	r0, #2
   2dc96:	2b00      	cmp	r3, #0
   2dc98:	db02      	blt.n	2dca0 <__hi0bits+0x34>
   2dc9a:	005b      	lsls	r3, r3, #1
   2dc9c:	d403      	bmi.n	2dca6 <__hi0bits+0x3a>
   2dc9e:	2020      	movs	r0, #32
   2dca0:	4770      	bx	lr
   2dca2:	2000      	movs	r0, #0
   2dca4:	e7e8      	b.n	2dc78 <__hi0bits+0xc>
   2dca6:	3001      	adds	r0, #1
   2dca8:	4770      	bx	lr
   2dcaa:	bf00      	nop

0002dcac <__lo0bits>:
   2dcac:	6803      	ldr	r3, [r0, #0]
   2dcae:	f013 0207 	ands.w	r2, r3, #7
   2dcb2:	4601      	mov	r1, r0
   2dcb4:	d007      	beq.n	2dcc6 <__lo0bits+0x1a>
   2dcb6:	07da      	lsls	r2, r3, #31
   2dcb8:	d421      	bmi.n	2dcfe <__lo0bits+0x52>
   2dcba:	0798      	lsls	r0, r3, #30
   2dcbc:	d421      	bmi.n	2dd02 <__lo0bits+0x56>
   2dcbe:	089b      	lsrs	r3, r3, #2
   2dcc0:	600b      	str	r3, [r1, #0]
   2dcc2:	2002      	movs	r0, #2
   2dcc4:	4770      	bx	lr
   2dcc6:	b298      	uxth	r0, r3
   2dcc8:	b198      	cbz	r0, 2dcf2 <__lo0bits+0x46>
   2dcca:	4610      	mov	r0, r2
   2dccc:	f013 0fff 	tst.w	r3, #255	; 0xff
   2dcd0:	bf04      	itt	eq
   2dcd2:	0a1b      	lsreq	r3, r3, #8
   2dcd4:	3008      	addeq	r0, #8
   2dcd6:	071a      	lsls	r2, r3, #28
   2dcd8:	bf04      	itt	eq
   2dcda:	091b      	lsreq	r3, r3, #4
   2dcdc:	3004      	addeq	r0, #4
   2dcde:	079a      	lsls	r2, r3, #30
   2dce0:	bf04      	itt	eq
   2dce2:	089b      	lsreq	r3, r3, #2
   2dce4:	3002      	addeq	r0, #2
   2dce6:	07da      	lsls	r2, r3, #31
   2dce8:	d407      	bmi.n	2dcfa <__lo0bits+0x4e>
   2dcea:	085b      	lsrs	r3, r3, #1
   2dcec:	d104      	bne.n	2dcf8 <__lo0bits+0x4c>
   2dcee:	2020      	movs	r0, #32
   2dcf0:	4770      	bx	lr
   2dcf2:	0c1b      	lsrs	r3, r3, #16
   2dcf4:	2010      	movs	r0, #16
   2dcf6:	e7e9      	b.n	2dccc <__lo0bits+0x20>
   2dcf8:	3001      	adds	r0, #1
   2dcfa:	600b      	str	r3, [r1, #0]
   2dcfc:	4770      	bx	lr
   2dcfe:	2000      	movs	r0, #0
   2dd00:	4770      	bx	lr
   2dd02:	085b      	lsrs	r3, r3, #1
   2dd04:	600b      	str	r3, [r1, #0]
   2dd06:	2001      	movs	r0, #1
   2dd08:	4770      	bx	lr
   2dd0a:	bf00      	nop

0002dd0c <__i2b>:
   2dd0c:	b510      	push	{r4, lr}
   2dd0e:	460c      	mov	r4, r1
   2dd10:	2101      	movs	r1, #1
   2dd12:	f7ff ff3b 	bl	2db8c <_Balloc>
   2dd16:	2201      	movs	r2, #1
   2dd18:	6144      	str	r4, [r0, #20]
   2dd1a:	6102      	str	r2, [r0, #16]
   2dd1c:	bd10      	pop	{r4, pc}
   2dd1e:	bf00      	nop

0002dd20 <__multiply>:
   2dd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dd24:	690c      	ldr	r4, [r1, #16]
   2dd26:	6915      	ldr	r5, [r2, #16]
   2dd28:	42ac      	cmp	r4, r5
   2dd2a:	b083      	sub	sp, #12
   2dd2c:	468b      	mov	fp, r1
   2dd2e:	4616      	mov	r6, r2
   2dd30:	da04      	bge.n	2dd3c <__multiply+0x1c>
   2dd32:	4622      	mov	r2, r4
   2dd34:	46b3      	mov	fp, r6
   2dd36:	462c      	mov	r4, r5
   2dd38:	460e      	mov	r6, r1
   2dd3a:	4615      	mov	r5, r2
   2dd3c:	f8db 3008 	ldr.w	r3, [fp, #8]
   2dd40:	f8db 1004 	ldr.w	r1, [fp, #4]
   2dd44:	eb04 0805 	add.w	r8, r4, r5
   2dd48:	4598      	cmp	r8, r3
   2dd4a:	bfc8      	it	gt
   2dd4c:	3101      	addgt	r1, #1
   2dd4e:	f7ff ff1d 	bl	2db8c <_Balloc>
   2dd52:	f100 0914 	add.w	r9, r0, #20
   2dd56:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   2dd5a:	45d1      	cmp	r9, sl
   2dd5c:	9000      	str	r0, [sp, #0]
   2dd5e:	d205      	bcs.n	2dd6c <__multiply+0x4c>
   2dd60:	464b      	mov	r3, r9
   2dd62:	2100      	movs	r1, #0
   2dd64:	f843 1b04 	str.w	r1, [r3], #4
   2dd68:	459a      	cmp	sl, r3
   2dd6a:	d8fb      	bhi.n	2dd64 <__multiply+0x44>
   2dd6c:	f106 0c14 	add.w	ip, r6, #20
   2dd70:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   2dd74:	f10b 0b14 	add.w	fp, fp, #20
   2dd78:	459c      	cmp	ip, r3
   2dd7a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   2dd7e:	d24c      	bcs.n	2de1a <__multiply+0xfa>
   2dd80:	f8cd a004 	str.w	sl, [sp, #4]
   2dd84:	469a      	mov	sl, r3
   2dd86:	f8dc 5000 	ldr.w	r5, [ip]
   2dd8a:	b2af      	uxth	r7, r5
   2dd8c:	b1ef      	cbz	r7, 2ddca <__multiply+0xaa>
   2dd8e:	2100      	movs	r1, #0
   2dd90:	464d      	mov	r5, r9
   2dd92:	465e      	mov	r6, fp
   2dd94:	460c      	mov	r4, r1
   2dd96:	f856 2b04 	ldr.w	r2, [r6], #4
   2dd9a:	6828      	ldr	r0, [r5, #0]
   2dd9c:	b293      	uxth	r3, r2
   2dd9e:	b281      	uxth	r1, r0
   2dda0:	fb07 1303 	mla	r3, r7, r3, r1
   2dda4:	0c12      	lsrs	r2, r2, #16
   2dda6:	0c01      	lsrs	r1, r0, #16
   2dda8:	4423      	add	r3, r4
   2ddaa:	fb07 1102 	mla	r1, r7, r2, r1
   2ddae:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2ddb2:	b29b      	uxth	r3, r3
   2ddb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2ddb8:	45b6      	cmp	lr, r6
   2ddba:	f845 3b04 	str.w	r3, [r5], #4
   2ddbe:	ea4f 4411 	mov.w	r4, r1, lsr #16
   2ddc2:	d8e8      	bhi.n	2dd96 <__multiply+0x76>
   2ddc4:	602c      	str	r4, [r5, #0]
   2ddc6:	f8dc 5000 	ldr.w	r5, [ip]
   2ddca:	0c2d      	lsrs	r5, r5, #16
   2ddcc:	d01d      	beq.n	2de0a <__multiply+0xea>
   2ddce:	f8d9 3000 	ldr.w	r3, [r9]
   2ddd2:	4648      	mov	r0, r9
   2ddd4:	461c      	mov	r4, r3
   2ddd6:	4659      	mov	r1, fp
   2ddd8:	2200      	movs	r2, #0
   2ddda:	880e      	ldrh	r6, [r1, #0]
   2dddc:	0c24      	lsrs	r4, r4, #16
   2ddde:	fb05 4406 	mla	r4, r5, r6, r4
   2dde2:	4422      	add	r2, r4
   2dde4:	b29b      	uxth	r3, r3
   2dde6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2ddea:	f840 3b04 	str.w	r3, [r0], #4
   2ddee:	f851 3b04 	ldr.w	r3, [r1], #4
   2ddf2:	6804      	ldr	r4, [r0, #0]
   2ddf4:	0c1b      	lsrs	r3, r3, #16
   2ddf6:	b2a6      	uxth	r6, r4
   2ddf8:	fb05 6303 	mla	r3, r5, r3, r6
   2ddfc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2de00:	458e      	cmp	lr, r1
   2de02:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2de06:	d8e8      	bhi.n	2ddda <__multiply+0xba>
   2de08:	6003      	str	r3, [r0, #0]
   2de0a:	f10c 0c04 	add.w	ip, ip, #4
   2de0e:	45e2      	cmp	sl, ip
   2de10:	f109 0904 	add.w	r9, r9, #4
   2de14:	d8b7      	bhi.n	2dd86 <__multiply+0x66>
   2de16:	f8dd a004 	ldr.w	sl, [sp, #4]
   2de1a:	f1b8 0f00 	cmp.w	r8, #0
   2de1e:	dd0b      	ble.n	2de38 <__multiply+0x118>
   2de20:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   2de24:	f1aa 0a04 	sub.w	sl, sl, #4
   2de28:	b11b      	cbz	r3, 2de32 <__multiply+0x112>
   2de2a:	e005      	b.n	2de38 <__multiply+0x118>
   2de2c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2de30:	b913      	cbnz	r3, 2de38 <__multiply+0x118>
   2de32:	f1b8 0801 	subs.w	r8, r8, #1
   2de36:	d1f9      	bne.n	2de2c <__multiply+0x10c>
   2de38:	9800      	ldr	r0, [sp, #0]
   2de3a:	f8c0 8010 	str.w	r8, [r0, #16]
   2de3e:	b003      	add	sp, #12
   2de40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002de44 <__pow5mult>:
   2de44:	f012 0303 	ands.w	r3, r2, #3
   2de48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2de4c:	4614      	mov	r4, r2
   2de4e:	4607      	mov	r7, r0
   2de50:	d12e      	bne.n	2deb0 <__pow5mult+0x6c>
   2de52:	460d      	mov	r5, r1
   2de54:	10a4      	asrs	r4, r4, #2
   2de56:	d01c      	beq.n	2de92 <__pow5mult+0x4e>
   2de58:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   2de5a:	b396      	cbz	r6, 2dec2 <__pow5mult+0x7e>
   2de5c:	07e3      	lsls	r3, r4, #31
   2de5e:	f04f 0800 	mov.w	r8, #0
   2de62:	d406      	bmi.n	2de72 <__pow5mult+0x2e>
   2de64:	1064      	asrs	r4, r4, #1
   2de66:	d014      	beq.n	2de92 <__pow5mult+0x4e>
   2de68:	6830      	ldr	r0, [r6, #0]
   2de6a:	b1a8      	cbz	r0, 2de98 <__pow5mult+0x54>
   2de6c:	4606      	mov	r6, r0
   2de6e:	07e3      	lsls	r3, r4, #31
   2de70:	d5f8      	bpl.n	2de64 <__pow5mult+0x20>
   2de72:	4632      	mov	r2, r6
   2de74:	4629      	mov	r1, r5
   2de76:	4638      	mov	r0, r7
   2de78:	f7ff ff52 	bl	2dd20 <__multiply>
   2de7c:	b1b5      	cbz	r5, 2deac <__pow5mult+0x68>
   2de7e:	686a      	ldr	r2, [r5, #4]
   2de80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2de82:	1064      	asrs	r4, r4, #1
   2de84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2de88:	6029      	str	r1, [r5, #0]
   2de8a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   2de8e:	4605      	mov	r5, r0
   2de90:	d1ea      	bne.n	2de68 <__pow5mult+0x24>
   2de92:	4628      	mov	r0, r5
   2de94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2de98:	4632      	mov	r2, r6
   2de9a:	4631      	mov	r1, r6
   2de9c:	4638      	mov	r0, r7
   2de9e:	f7ff ff3f 	bl	2dd20 <__multiply>
   2dea2:	6030      	str	r0, [r6, #0]
   2dea4:	f8c0 8000 	str.w	r8, [r0]
   2dea8:	4606      	mov	r6, r0
   2deaa:	e7e0      	b.n	2de6e <__pow5mult+0x2a>
   2deac:	4605      	mov	r5, r0
   2deae:	e7d9      	b.n	2de64 <__pow5mult+0x20>
   2deb0:	1e5a      	subs	r2, r3, #1
   2deb2:	4d0b      	ldr	r5, [pc, #44]	; (2dee0 <__pow5mult+0x9c>)
   2deb4:	2300      	movs	r3, #0
   2deb6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2deba:	f7ff fe97 	bl	2dbec <__multadd>
   2debe:	4605      	mov	r5, r0
   2dec0:	e7c8      	b.n	2de54 <__pow5mult+0x10>
   2dec2:	2101      	movs	r1, #1
   2dec4:	4638      	mov	r0, r7
   2dec6:	f7ff fe61 	bl	2db8c <_Balloc>
   2deca:	f240 2171 	movw	r1, #625	; 0x271
   2dece:	2201      	movs	r2, #1
   2ded0:	2300      	movs	r3, #0
   2ded2:	6141      	str	r1, [r0, #20]
   2ded4:	6102      	str	r2, [r0, #16]
   2ded6:	4606      	mov	r6, r0
   2ded8:	64b8      	str	r0, [r7, #72]	; 0x48
   2deda:	6003      	str	r3, [r0, #0]
   2dedc:	e7be      	b.n	2de5c <__pow5mult+0x18>
   2dede:	bf00      	nop
   2dee0:	000333a8 	.word	0x000333a8

0002dee4 <__lshift>:
   2dee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2dee8:	4691      	mov	r9, r2
   2deea:	690a      	ldr	r2, [r1, #16]
   2deec:	688b      	ldr	r3, [r1, #8]
   2deee:	ea4f 1469 	mov.w	r4, r9, asr #5
   2def2:	eb04 0802 	add.w	r8, r4, r2
   2def6:	f108 0501 	add.w	r5, r8, #1
   2defa:	429d      	cmp	r5, r3
   2defc:	460e      	mov	r6, r1
   2defe:	4607      	mov	r7, r0
   2df00:	6849      	ldr	r1, [r1, #4]
   2df02:	dd04      	ble.n	2df0e <__lshift+0x2a>
   2df04:	005b      	lsls	r3, r3, #1
   2df06:	429d      	cmp	r5, r3
   2df08:	f101 0101 	add.w	r1, r1, #1
   2df0c:	dcfa      	bgt.n	2df04 <__lshift+0x20>
   2df0e:	4638      	mov	r0, r7
   2df10:	f7ff fe3c 	bl	2db8c <_Balloc>
   2df14:	2c00      	cmp	r4, #0
   2df16:	f100 0314 	add.w	r3, r0, #20
   2df1a:	dd06      	ble.n	2df2a <__lshift+0x46>
   2df1c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   2df20:	2100      	movs	r1, #0
   2df22:	f843 1b04 	str.w	r1, [r3], #4
   2df26:	429a      	cmp	r2, r3
   2df28:	d1fb      	bne.n	2df22 <__lshift+0x3e>
   2df2a:	6934      	ldr	r4, [r6, #16]
   2df2c:	f106 0114 	add.w	r1, r6, #20
   2df30:	f019 091f 	ands.w	r9, r9, #31
   2df34:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   2df38:	d01d      	beq.n	2df76 <__lshift+0x92>
   2df3a:	f1c9 0c20 	rsb	ip, r9, #32
   2df3e:	2200      	movs	r2, #0
   2df40:	680c      	ldr	r4, [r1, #0]
   2df42:	fa04 f409 	lsl.w	r4, r4, r9
   2df46:	4314      	orrs	r4, r2
   2df48:	f843 4b04 	str.w	r4, [r3], #4
   2df4c:	f851 2b04 	ldr.w	r2, [r1], #4
   2df50:	458e      	cmp	lr, r1
   2df52:	fa22 f20c 	lsr.w	r2, r2, ip
   2df56:	d8f3      	bhi.n	2df40 <__lshift+0x5c>
   2df58:	601a      	str	r2, [r3, #0]
   2df5a:	b10a      	cbz	r2, 2df60 <__lshift+0x7c>
   2df5c:	f108 0502 	add.w	r5, r8, #2
   2df60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2df62:	6872      	ldr	r2, [r6, #4]
   2df64:	3d01      	subs	r5, #1
   2df66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2df6a:	6105      	str	r5, [r0, #16]
   2df6c:	6031      	str	r1, [r6, #0]
   2df6e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2df72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2df76:	3b04      	subs	r3, #4
   2df78:	f851 2b04 	ldr.w	r2, [r1], #4
   2df7c:	f843 2f04 	str.w	r2, [r3, #4]!
   2df80:	458e      	cmp	lr, r1
   2df82:	d8f9      	bhi.n	2df78 <__lshift+0x94>
   2df84:	e7ec      	b.n	2df60 <__lshift+0x7c>
   2df86:	bf00      	nop

0002df88 <__mcmp>:
   2df88:	b430      	push	{r4, r5}
   2df8a:	690b      	ldr	r3, [r1, #16]
   2df8c:	4605      	mov	r5, r0
   2df8e:	6900      	ldr	r0, [r0, #16]
   2df90:	1ac0      	subs	r0, r0, r3
   2df92:	d10f      	bne.n	2dfb4 <__mcmp+0x2c>
   2df94:	009b      	lsls	r3, r3, #2
   2df96:	3514      	adds	r5, #20
   2df98:	3114      	adds	r1, #20
   2df9a:	4419      	add	r1, r3
   2df9c:	442b      	add	r3, r5
   2df9e:	e001      	b.n	2dfa4 <__mcmp+0x1c>
   2dfa0:	429d      	cmp	r5, r3
   2dfa2:	d207      	bcs.n	2dfb4 <__mcmp+0x2c>
   2dfa4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   2dfa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2dfac:	4294      	cmp	r4, r2
   2dfae:	d0f7      	beq.n	2dfa0 <__mcmp+0x18>
   2dfb0:	d302      	bcc.n	2dfb8 <__mcmp+0x30>
   2dfb2:	2001      	movs	r0, #1
   2dfb4:	bc30      	pop	{r4, r5}
   2dfb6:	4770      	bx	lr
   2dfb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2dfbc:	e7fa      	b.n	2dfb4 <__mcmp+0x2c>
   2dfbe:	bf00      	nop

0002dfc0 <__mdiff>:
   2dfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dfc4:	690f      	ldr	r7, [r1, #16]
   2dfc6:	460e      	mov	r6, r1
   2dfc8:	6911      	ldr	r1, [r2, #16]
   2dfca:	1a7f      	subs	r7, r7, r1
   2dfcc:	2f00      	cmp	r7, #0
   2dfce:	4690      	mov	r8, r2
   2dfd0:	d117      	bne.n	2e002 <__mdiff+0x42>
   2dfd2:	0089      	lsls	r1, r1, #2
   2dfd4:	f106 0514 	add.w	r5, r6, #20
   2dfd8:	f102 0e14 	add.w	lr, r2, #20
   2dfdc:	186b      	adds	r3, r5, r1
   2dfde:	4471      	add	r1, lr
   2dfe0:	e001      	b.n	2dfe6 <__mdiff+0x26>
   2dfe2:	429d      	cmp	r5, r3
   2dfe4:	d25c      	bcs.n	2e0a0 <__mdiff+0xe0>
   2dfe6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2dfea:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   2dfee:	42a2      	cmp	r2, r4
   2dff0:	d0f7      	beq.n	2dfe2 <__mdiff+0x22>
   2dff2:	d25e      	bcs.n	2e0b2 <__mdiff+0xf2>
   2dff4:	4633      	mov	r3, r6
   2dff6:	462c      	mov	r4, r5
   2dff8:	4646      	mov	r6, r8
   2dffa:	4675      	mov	r5, lr
   2dffc:	4698      	mov	r8, r3
   2dffe:	2701      	movs	r7, #1
   2e000:	e005      	b.n	2e00e <__mdiff+0x4e>
   2e002:	db58      	blt.n	2e0b6 <__mdiff+0xf6>
   2e004:	f106 0514 	add.w	r5, r6, #20
   2e008:	f108 0414 	add.w	r4, r8, #20
   2e00c:	2700      	movs	r7, #0
   2e00e:	6871      	ldr	r1, [r6, #4]
   2e010:	f7ff fdbc 	bl	2db8c <_Balloc>
   2e014:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2e018:	6936      	ldr	r6, [r6, #16]
   2e01a:	60c7      	str	r7, [r0, #12]
   2e01c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   2e020:	46a6      	mov	lr, r4
   2e022:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   2e026:	f100 0414 	add.w	r4, r0, #20
   2e02a:	2300      	movs	r3, #0
   2e02c:	f85e 1b04 	ldr.w	r1, [lr], #4
   2e030:	f855 8b04 	ldr.w	r8, [r5], #4
   2e034:	b28a      	uxth	r2, r1
   2e036:	fa13 f388 	uxtah	r3, r3, r8
   2e03a:	0c09      	lsrs	r1, r1, #16
   2e03c:	1a9a      	subs	r2, r3, r2
   2e03e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2e042:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2e046:	b292      	uxth	r2, r2
   2e048:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2e04c:	45f4      	cmp	ip, lr
   2e04e:	f844 2b04 	str.w	r2, [r4], #4
   2e052:	ea4f 4323 	mov.w	r3, r3, asr #16
   2e056:	d8e9      	bhi.n	2e02c <__mdiff+0x6c>
   2e058:	42af      	cmp	r7, r5
   2e05a:	d917      	bls.n	2e08c <__mdiff+0xcc>
   2e05c:	46a4      	mov	ip, r4
   2e05e:	46ae      	mov	lr, r5
   2e060:	f85e 2b04 	ldr.w	r2, [lr], #4
   2e064:	fa13 f382 	uxtah	r3, r3, r2
   2e068:	1419      	asrs	r1, r3, #16
   2e06a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   2e06e:	b29b      	uxth	r3, r3
   2e070:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   2e074:	4577      	cmp	r7, lr
   2e076:	f84c 2b04 	str.w	r2, [ip], #4
   2e07a:	ea4f 4321 	mov.w	r3, r1, asr #16
   2e07e:	d8ef      	bhi.n	2e060 <__mdiff+0xa0>
   2e080:	43ed      	mvns	r5, r5
   2e082:	442f      	add	r7, r5
   2e084:	f027 0703 	bic.w	r7, r7, #3
   2e088:	3704      	adds	r7, #4
   2e08a:	443c      	add	r4, r7
   2e08c:	3c04      	subs	r4, #4
   2e08e:	b922      	cbnz	r2, 2e09a <__mdiff+0xda>
   2e090:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2e094:	3e01      	subs	r6, #1
   2e096:	2b00      	cmp	r3, #0
   2e098:	d0fa      	beq.n	2e090 <__mdiff+0xd0>
   2e09a:	6106      	str	r6, [r0, #16]
   2e09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e0a0:	2100      	movs	r1, #0
   2e0a2:	f7ff fd73 	bl	2db8c <_Balloc>
   2e0a6:	2201      	movs	r2, #1
   2e0a8:	2300      	movs	r3, #0
   2e0aa:	6102      	str	r2, [r0, #16]
   2e0ac:	6143      	str	r3, [r0, #20]
   2e0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e0b2:	4674      	mov	r4, lr
   2e0b4:	e7ab      	b.n	2e00e <__mdiff+0x4e>
   2e0b6:	4633      	mov	r3, r6
   2e0b8:	f106 0414 	add.w	r4, r6, #20
   2e0bc:	f102 0514 	add.w	r5, r2, #20
   2e0c0:	4616      	mov	r6, r2
   2e0c2:	2701      	movs	r7, #1
   2e0c4:	4698      	mov	r8, r3
   2e0c6:	e7a2      	b.n	2e00e <__mdiff+0x4e>

0002e0c8 <__d2b>:
   2e0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e0cc:	b082      	sub	sp, #8
   2e0ce:	2101      	movs	r1, #1
   2e0d0:	461c      	mov	r4, r3
   2e0d2:	f3c3 570a 	ubfx	r7, r3, #20, #11
   2e0d6:	4615      	mov	r5, r2
   2e0d8:	9e08      	ldr	r6, [sp, #32]
   2e0da:	f7ff fd57 	bl	2db8c <_Balloc>
   2e0de:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2e0e2:	4680      	mov	r8, r0
   2e0e4:	b10f      	cbz	r7, 2e0ea <__d2b+0x22>
   2e0e6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   2e0ea:	9401      	str	r4, [sp, #4]
   2e0ec:	b31d      	cbz	r5, 2e136 <__d2b+0x6e>
   2e0ee:	a802      	add	r0, sp, #8
   2e0f0:	f840 5d08 	str.w	r5, [r0, #-8]!
   2e0f4:	f7ff fdda 	bl	2dcac <__lo0bits>
   2e0f8:	2800      	cmp	r0, #0
   2e0fa:	d134      	bne.n	2e166 <__d2b+0x9e>
   2e0fc:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2e100:	f8c8 2014 	str.w	r2, [r8, #20]
   2e104:	2b00      	cmp	r3, #0
   2e106:	bf0c      	ite	eq
   2e108:	2101      	moveq	r1, #1
   2e10a:	2102      	movne	r1, #2
   2e10c:	f8c8 3018 	str.w	r3, [r8, #24]
   2e110:	f8c8 1010 	str.w	r1, [r8, #16]
   2e114:	b9df      	cbnz	r7, 2e14e <__d2b+0x86>
   2e116:	eb08 0381 	add.w	r3, r8, r1, lsl #2
   2e11a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2e11e:	6030      	str	r0, [r6, #0]
   2e120:	6918      	ldr	r0, [r3, #16]
   2e122:	f7ff fda3 	bl	2dc6c <__hi0bits>
   2e126:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e128:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   2e12c:	6018      	str	r0, [r3, #0]
   2e12e:	4640      	mov	r0, r8
   2e130:	b002      	add	sp, #8
   2e132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e136:	a801      	add	r0, sp, #4
   2e138:	f7ff fdb8 	bl	2dcac <__lo0bits>
   2e13c:	9b01      	ldr	r3, [sp, #4]
   2e13e:	f8c8 3014 	str.w	r3, [r8, #20]
   2e142:	2101      	movs	r1, #1
   2e144:	3020      	adds	r0, #32
   2e146:	f8c8 1010 	str.w	r1, [r8, #16]
   2e14a:	2f00      	cmp	r7, #0
   2e14c:	d0e3      	beq.n	2e116 <__d2b+0x4e>
   2e14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e150:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   2e154:	4407      	add	r7, r0
   2e156:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2e15a:	6037      	str	r7, [r6, #0]
   2e15c:	6018      	str	r0, [r3, #0]
   2e15e:	4640      	mov	r0, r8
   2e160:	b002      	add	sp, #8
   2e162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e166:	e89d 000a 	ldmia.w	sp, {r1, r3}
   2e16a:	f1c0 0220 	rsb	r2, r0, #32
   2e16e:	fa03 f202 	lsl.w	r2, r3, r2
   2e172:	430a      	orrs	r2, r1
   2e174:	40c3      	lsrs	r3, r0
   2e176:	9301      	str	r3, [sp, #4]
   2e178:	f8c8 2014 	str.w	r2, [r8, #20]
   2e17c:	e7c2      	b.n	2e104 <__d2b+0x3c>
   2e17e:	bf00      	nop

0002e180 <__ssprint_r>:
   2e180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e184:	6893      	ldr	r3, [r2, #8]
   2e186:	b083      	sub	sp, #12
   2e188:	4690      	mov	r8, r2
   2e18a:	2b00      	cmp	r3, #0
   2e18c:	d070      	beq.n	2e270 <__ssprint_r+0xf0>
   2e18e:	4682      	mov	sl, r0
   2e190:	460c      	mov	r4, r1
   2e192:	6817      	ldr	r7, [r2, #0]
   2e194:	688d      	ldr	r5, [r1, #8]
   2e196:	6808      	ldr	r0, [r1, #0]
   2e198:	e042      	b.n	2e220 <__ssprint_r+0xa0>
   2e19a:	89a3      	ldrh	r3, [r4, #12]
   2e19c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2e1a0:	d02e      	beq.n	2e200 <__ssprint_r+0x80>
   2e1a2:	6965      	ldr	r5, [r4, #20]
   2e1a4:	6921      	ldr	r1, [r4, #16]
   2e1a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2e1aa:	eba0 0b01 	sub.w	fp, r0, r1
   2e1ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2e1b2:	f10b 0001 	add.w	r0, fp, #1
   2e1b6:	106d      	asrs	r5, r5, #1
   2e1b8:	4430      	add	r0, r6
   2e1ba:	42a8      	cmp	r0, r5
   2e1bc:	462a      	mov	r2, r5
   2e1be:	bf84      	itt	hi
   2e1c0:	4605      	movhi	r5, r0
   2e1c2:	462a      	movhi	r2, r5
   2e1c4:	055b      	lsls	r3, r3, #21
   2e1c6:	d538      	bpl.n	2e23a <__ssprint_r+0xba>
   2e1c8:	4611      	mov	r1, r2
   2e1ca:	4650      	mov	r0, sl
   2e1cc:	f7fc f81a 	bl	2a204 <_malloc_r>
   2e1d0:	2800      	cmp	r0, #0
   2e1d2:	d03c      	beq.n	2e24e <__ssprint_r+0xce>
   2e1d4:	465a      	mov	r2, fp
   2e1d6:	6921      	ldr	r1, [r4, #16]
   2e1d8:	9001      	str	r0, [sp, #4]
   2e1da:	f7d2 f871 	bl	2c0 <memcpy>
   2e1de:	89a2      	ldrh	r2, [r4, #12]
   2e1e0:	9b01      	ldr	r3, [sp, #4]
   2e1e2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2e1e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2e1ea:	81a2      	strh	r2, [r4, #12]
   2e1ec:	eba5 020b 	sub.w	r2, r5, fp
   2e1f0:	eb03 000b 	add.w	r0, r3, fp
   2e1f4:	6165      	str	r5, [r4, #20]
   2e1f6:	6123      	str	r3, [r4, #16]
   2e1f8:	6020      	str	r0, [r4, #0]
   2e1fa:	60a2      	str	r2, [r4, #8]
   2e1fc:	4635      	mov	r5, r6
   2e1fe:	46b3      	mov	fp, r6
   2e200:	465a      	mov	r2, fp
   2e202:	4649      	mov	r1, r9
   2e204:	f7fc faf4 	bl	2a7f0 <memmove>
   2e208:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2e20c:	68a2      	ldr	r2, [r4, #8]
   2e20e:	6820      	ldr	r0, [r4, #0]
   2e210:	1b55      	subs	r5, r2, r5
   2e212:	4458      	add	r0, fp
   2e214:	1b9e      	subs	r6, r3, r6
   2e216:	60a5      	str	r5, [r4, #8]
   2e218:	6020      	str	r0, [r4, #0]
   2e21a:	f8c8 6008 	str.w	r6, [r8, #8]
   2e21e:	b33e      	cbz	r6, 2e270 <__ssprint_r+0xf0>
   2e220:	687e      	ldr	r6, [r7, #4]
   2e222:	463b      	mov	r3, r7
   2e224:	3708      	adds	r7, #8
   2e226:	2e00      	cmp	r6, #0
   2e228:	d0fa      	beq.n	2e220 <__ssprint_r+0xa0>
   2e22a:	42ae      	cmp	r6, r5
   2e22c:	f8d3 9000 	ldr.w	r9, [r3]
   2e230:	46ab      	mov	fp, r5
   2e232:	d2b2      	bcs.n	2e19a <__ssprint_r+0x1a>
   2e234:	4635      	mov	r5, r6
   2e236:	46b3      	mov	fp, r6
   2e238:	e7e2      	b.n	2e200 <__ssprint_r+0x80>
   2e23a:	4650      	mov	r0, sl
   2e23c:	f000 f81e 	bl	2e27c <_realloc_r>
   2e240:	4603      	mov	r3, r0
   2e242:	2800      	cmp	r0, #0
   2e244:	d1d2      	bne.n	2e1ec <__ssprint_r+0x6c>
   2e246:	6921      	ldr	r1, [r4, #16]
   2e248:	4650      	mov	r0, sl
   2e24a:	f7ff fba7 	bl	2d99c <_free_r>
   2e24e:	230c      	movs	r3, #12
   2e250:	f8ca 3000 	str.w	r3, [sl]
   2e254:	89a3      	ldrh	r3, [r4, #12]
   2e256:	2200      	movs	r2, #0
   2e258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e25c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e260:	81a3      	strh	r3, [r4, #12]
   2e262:	f8c8 2008 	str.w	r2, [r8, #8]
   2e266:	f8c8 2004 	str.w	r2, [r8, #4]
   2e26a:	b003      	add	sp, #12
   2e26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e270:	2000      	movs	r0, #0
   2e272:	f8c8 0004 	str.w	r0, [r8, #4]
   2e276:	b003      	add	sp, #12
   2e278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e27c <_realloc_r>:
   2e27c:	2900      	cmp	r1, #0
   2e27e:	f000 8095 	beq.w	2e3ac <_realloc_r+0x130>
   2e282:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e286:	460d      	mov	r5, r1
   2e288:	4616      	mov	r6, r2
   2e28a:	b083      	sub	sp, #12
   2e28c:	4680      	mov	r8, r0
   2e28e:	f106 070b 	add.w	r7, r6, #11
   2e292:	f7fc fb5f 	bl	2a954 <__malloc_lock>
   2e296:	f855 ec04 	ldr.w	lr, [r5, #-4]
   2e29a:	2f16      	cmp	r7, #22
   2e29c:	f02e 0403 	bic.w	r4, lr, #3
   2e2a0:	f1a5 0908 	sub.w	r9, r5, #8
   2e2a4:	d83c      	bhi.n	2e320 <_realloc_r+0xa4>
   2e2a6:	2210      	movs	r2, #16
   2e2a8:	4617      	mov	r7, r2
   2e2aa:	42be      	cmp	r6, r7
   2e2ac:	d83d      	bhi.n	2e32a <_realloc_r+0xae>
   2e2ae:	4294      	cmp	r4, r2
   2e2b0:	da43      	bge.n	2e33a <_realloc_r+0xbe>
   2e2b2:	4bc4      	ldr	r3, [pc, #784]	; (2e5c4 <_realloc_r+0x348>)
   2e2b4:	6899      	ldr	r1, [r3, #8]
   2e2b6:	eb09 0004 	add.w	r0, r9, r4
   2e2ba:	4288      	cmp	r0, r1
   2e2bc:	f000 80b4 	beq.w	2e428 <_realloc_r+0x1ac>
   2e2c0:	6843      	ldr	r3, [r0, #4]
   2e2c2:	f023 0101 	bic.w	r1, r3, #1
   2e2c6:	4401      	add	r1, r0
   2e2c8:	6849      	ldr	r1, [r1, #4]
   2e2ca:	07c9      	lsls	r1, r1, #31
   2e2cc:	d54c      	bpl.n	2e368 <_realloc_r+0xec>
   2e2ce:	f01e 0f01 	tst.w	lr, #1
   2e2d2:	f000 809b 	beq.w	2e40c <_realloc_r+0x190>
   2e2d6:	4631      	mov	r1, r6
   2e2d8:	4640      	mov	r0, r8
   2e2da:	f7fb ff93 	bl	2a204 <_malloc_r>
   2e2de:	4606      	mov	r6, r0
   2e2e0:	2800      	cmp	r0, #0
   2e2e2:	d03a      	beq.n	2e35a <_realloc_r+0xde>
   2e2e4:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2e2e8:	f023 0301 	bic.w	r3, r3, #1
   2e2ec:	444b      	add	r3, r9
   2e2ee:	f1a0 0208 	sub.w	r2, r0, #8
   2e2f2:	429a      	cmp	r2, r3
   2e2f4:	f000 8121 	beq.w	2e53a <_realloc_r+0x2be>
   2e2f8:	1f22      	subs	r2, r4, #4
   2e2fa:	2a24      	cmp	r2, #36	; 0x24
   2e2fc:	f200 8107 	bhi.w	2e50e <_realloc_r+0x292>
   2e300:	2a13      	cmp	r2, #19
   2e302:	f200 80db 	bhi.w	2e4bc <_realloc_r+0x240>
   2e306:	4603      	mov	r3, r0
   2e308:	462a      	mov	r2, r5
   2e30a:	6811      	ldr	r1, [r2, #0]
   2e30c:	6019      	str	r1, [r3, #0]
   2e30e:	6851      	ldr	r1, [r2, #4]
   2e310:	6059      	str	r1, [r3, #4]
   2e312:	6892      	ldr	r2, [r2, #8]
   2e314:	609a      	str	r2, [r3, #8]
   2e316:	4629      	mov	r1, r5
   2e318:	4640      	mov	r0, r8
   2e31a:	f7ff fb3f 	bl	2d99c <_free_r>
   2e31e:	e01c      	b.n	2e35a <_realloc_r+0xde>
   2e320:	f027 0707 	bic.w	r7, r7, #7
   2e324:	2f00      	cmp	r7, #0
   2e326:	463a      	mov	r2, r7
   2e328:	dabf      	bge.n	2e2aa <_realloc_r+0x2e>
   2e32a:	2600      	movs	r6, #0
   2e32c:	230c      	movs	r3, #12
   2e32e:	4630      	mov	r0, r6
   2e330:	f8c8 3000 	str.w	r3, [r8]
   2e334:	b003      	add	sp, #12
   2e336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e33a:	462e      	mov	r6, r5
   2e33c:	1be3      	subs	r3, r4, r7
   2e33e:	2b0f      	cmp	r3, #15
   2e340:	d81e      	bhi.n	2e380 <_realloc_r+0x104>
   2e342:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2e346:	f003 0301 	and.w	r3, r3, #1
   2e34a:	4323      	orrs	r3, r4
   2e34c:	444c      	add	r4, r9
   2e34e:	f8c9 3004 	str.w	r3, [r9, #4]
   2e352:	6863      	ldr	r3, [r4, #4]
   2e354:	f043 0301 	orr.w	r3, r3, #1
   2e358:	6063      	str	r3, [r4, #4]
   2e35a:	4640      	mov	r0, r8
   2e35c:	f7fc fb00 	bl	2a960 <__malloc_unlock>
   2e360:	4630      	mov	r0, r6
   2e362:	b003      	add	sp, #12
   2e364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e368:	f023 0303 	bic.w	r3, r3, #3
   2e36c:	18e1      	adds	r1, r4, r3
   2e36e:	4291      	cmp	r1, r2
   2e370:	db1f      	blt.n	2e3b2 <_realloc_r+0x136>
   2e372:	68c3      	ldr	r3, [r0, #12]
   2e374:	6882      	ldr	r2, [r0, #8]
   2e376:	462e      	mov	r6, r5
   2e378:	60d3      	str	r3, [r2, #12]
   2e37a:	460c      	mov	r4, r1
   2e37c:	609a      	str	r2, [r3, #8]
   2e37e:	e7dd      	b.n	2e33c <_realloc_r+0xc0>
   2e380:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2e384:	eb09 0107 	add.w	r1, r9, r7
   2e388:	f002 0201 	and.w	r2, r2, #1
   2e38c:	444c      	add	r4, r9
   2e38e:	f043 0301 	orr.w	r3, r3, #1
   2e392:	4317      	orrs	r7, r2
   2e394:	f8c9 7004 	str.w	r7, [r9, #4]
   2e398:	604b      	str	r3, [r1, #4]
   2e39a:	6863      	ldr	r3, [r4, #4]
   2e39c:	f043 0301 	orr.w	r3, r3, #1
   2e3a0:	3108      	adds	r1, #8
   2e3a2:	6063      	str	r3, [r4, #4]
   2e3a4:	4640      	mov	r0, r8
   2e3a6:	f7ff faf9 	bl	2d99c <_free_r>
   2e3aa:	e7d6      	b.n	2e35a <_realloc_r+0xde>
   2e3ac:	4611      	mov	r1, r2
   2e3ae:	f7fb bf29 	b.w	2a204 <_malloc_r>
   2e3b2:	f01e 0f01 	tst.w	lr, #1
   2e3b6:	d18e      	bne.n	2e2d6 <_realloc_r+0x5a>
   2e3b8:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2e3bc:	eba9 0a01 	sub.w	sl, r9, r1
   2e3c0:	f8da 1004 	ldr.w	r1, [sl, #4]
   2e3c4:	f021 0103 	bic.w	r1, r1, #3
   2e3c8:	440b      	add	r3, r1
   2e3ca:	4423      	add	r3, r4
   2e3cc:	4293      	cmp	r3, r2
   2e3ce:	db25      	blt.n	2e41c <_realloc_r+0x1a0>
   2e3d0:	68c2      	ldr	r2, [r0, #12]
   2e3d2:	6881      	ldr	r1, [r0, #8]
   2e3d4:	4656      	mov	r6, sl
   2e3d6:	60ca      	str	r2, [r1, #12]
   2e3d8:	6091      	str	r1, [r2, #8]
   2e3da:	f8da 100c 	ldr.w	r1, [sl, #12]
   2e3de:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2e3e2:	1f22      	subs	r2, r4, #4
   2e3e4:	2a24      	cmp	r2, #36	; 0x24
   2e3e6:	60c1      	str	r1, [r0, #12]
   2e3e8:	6088      	str	r0, [r1, #8]
   2e3ea:	f200 8094 	bhi.w	2e516 <_realloc_r+0x29a>
   2e3ee:	2a13      	cmp	r2, #19
   2e3f0:	d96f      	bls.n	2e4d2 <_realloc_r+0x256>
   2e3f2:	6829      	ldr	r1, [r5, #0]
   2e3f4:	f8ca 1008 	str.w	r1, [sl, #8]
   2e3f8:	6869      	ldr	r1, [r5, #4]
   2e3fa:	f8ca 100c 	str.w	r1, [sl, #12]
   2e3fe:	2a1b      	cmp	r2, #27
   2e400:	f200 80a2 	bhi.w	2e548 <_realloc_r+0x2cc>
   2e404:	3508      	adds	r5, #8
   2e406:	f10a 0210 	add.w	r2, sl, #16
   2e40a:	e063      	b.n	2e4d4 <_realloc_r+0x258>
   2e40c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2e410:	eba9 0a03 	sub.w	sl, r9, r3
   2e414:	f8da 1004 	ldr.w	r1, [sl, #4]
   2e418:	f021 0103 	bic.w	r1, r1, #3
   2e41c:	1863      	adds	r3, r4, r1
   2e41e:	4293      	cmp	r3, r2
   2e420:	f6ff af59 	blt.w	2e2d6 <_realloc_r+0x5a>
   2e424:	4656      	mov	r6, sl
   2e426:	e7d8      	b.n	2e3da <_realloc_r+0x15e>
   2e428:	6841      	ldr	r1, [r0, #4]
   2e42a:	f021 0b03 	bic.w	fp, r1, #3
   2e42e:	44a3      	add	fp, r4
   2e430:	f107 0010 	add.w	r0, r7, #16
   2e434:	4583      	cmp	fp, r0
   2e436:	da56      	bge.n	2e4e6 <_realloc_r+0x26a>
   2e438:	f01e 0f01 	tst.w	lr, #1
   2e43c:	f47f af4b 	bne.w	2e2d6 <_realloc_r+0x5a>
   2e440:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2e444:	eba9 0a01 	sub.w	sl, r9, r1
   2e448:	f8da 1004 	ldr.w	r1, [sl, #4]
   2e44c:	f021 0103 	bic.w	r1, r1, #3
   2e450:	448b      	add	fp, r1
   2e452:	4558      	cmp	r0, fp
   2e454:	dce2      	bgt.n	2e41c <_realloc_r+0x1a0>
   2e456:	4656      	mov	r6, sl
   2e458:	f8da 100c 	ldr.w	r1, [sl, #12]
   2e45c:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2e460:	1f22      	subs	r2, r4, #4
   2e462:	2a24      	cmp	r2, #36	; 0x24
   2e464:	60c1      	str	r1, [r0, #12]
   2e466:	6088      	str	r0, [r1, #8]
   2e468:	f200 808f 	bhi.w	2e58a <_realloc_r+0x30e>
   2e46c:	2a13      	cmp	r2, #19
   2e46e:	f240 808a 	bls.w	2e586 <_realloc_r+0x30a>
   2e472:	6829      	ldr	r1, [r5, #0]
   2e474:	f8ca 1008 	str.w	r1, [sl, #8]
   2e478:	6869      	ldr	r1, [r5, #4]
   2e47a:	f8ca 100c 	str.w	r1, [sl, #12]
   2e47e:	2a1b      	cmp	r2, #27
   2e480:	f200 808a 	bhi.w	2e598 <_realloc_r+0x31c>
   2e484:	3508      	adds	r5, #8
   2e486:	f10a 0210 	add.w	r2, sl, #16
   2e48a:	6829      	ldr	r1, [r5, #0]
   2e48c:	6011      	str	r1, [r2, #0]
   2e48e:	6869      	ldr	r1, [r5, #4]
   2e490:	6051      	str	r1, [r2, #4]
   2e492:	68a9      	ldr	r1, [r5, #8]
   2e494:	6091      	str	r1, [r2, #8]
   2e496:	eb0a 0107 	add.w	r1, sl, r7
   2e49a:	ebab 0207 	sub.w	r2, fp, r7
   2e49e:	f042 0201 	orr.w	r2, r2, #1
   2e4a2:	6099      	str	r1, [r3, #8]
   2e4a4:	604a      	str	r2, [r1, #4]
   2e4a6:	f8da 3004 	ldr.w	r3, [sl, #4]
   2e4aa:	f003 0301 	and.w	r3, r3, #1
   2e4ae:	431f      	orrs	r7, r3
   2e4b0:	4640      	mov	r0, r8
   2e4b2:	f8ca 7004 	str.w	r7, [sl, #4]
   2e4b6:	f7fc fa53 	bl	2a960 <__malloc_unlock>
   2e4ba:	e751      	b.n	2e360 <_realloc_r+0xe4>
   2e4bc:	682b      	ldr	r3, [r5, #0]
   2e4be:	6003      	str	r3, [r0, #0]
   2e4c0:	686b      	ldr	r3, [r5, #4]
   2e4c2:	6043      	str	r3, [r0, #4]
   2e4c4:	2a1b      	cmp	r2, #27
   2e4c6:	d82d      	bhi.n	2e524 <_realloc_r+0x2a8>
   2e4c8:	f100 0308 	add.w	r3, r0, #8
   2e4cc:	f105 0208 	add.w	r2, r5, #8
   2e4d0:	e71b      	b.n	2e30a <_realloc_r+0x8e>
   2e4d2:	4632      	mov	r2, r6
   2e4d4:	6829      	ldr	r1, [r5, #0]
   2e4d6:	6011      	str	r1, [r2, #0]
   2e4d8:	6869      	ldr	r1, [r5, #4]
   2e4da:	6051      	str	r1, [r2, #4]
   2e4dc:	68a9      	ldr	r1, [r5, #8]
   2e4de:	6091      	str	r1, [r2, #8]
   2e4e0:	461c      	mov	r4, r3
   2e4e2:	46d1      	mov	r9, sl
   2e4e4:	e72a      	b.n	2e33c <_realloc_r+0xc0>
   2e4e6:	eb09 0107 	add.w	r1, r9, r7
   2e4ea:	ebab 0b07 	sub.w	fp, fp, r7
   2e4ee:	f04b 0201 	orr.w	r2, fp, #1
   2e4f2:	6099      	str	r1, [r3, #8]
   2e4f4:	604a      	str	r2, [r1, #4]
   2e4f6:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2e4fa:	f003 0301 	and.w	r3, r3, #1
   2e4fe:	431f      	orrs	r7, r3
   2e500:	4640      	mov	r0, r8
   2e502:	f845 7c04 	str.w	r7, [r5, #-4]
   2e506:	f7fc fa2b 	bl	2a960 <__malloc_unlock>
   2e50a:	462e      	mov	r6, r5
   2e50c:	e728      	b.n	2e360 <_realloc_r+0xe4>
   2e50e:	4629      	mov	r1, r5
   2e510:	f7fc f96e 	bl	2a7f0 <memmove>
   2e514:	e6ff      	b.n	2e316 <_realloc_r+0x9a>
   2e516:	4629      	mov	r1, r5
   2e518:	4630      	mov	r0, r6
   2e51a:	461c      	mov	r4, r3
   2e51c:	46d1      	mov	r9, sl
   2e51e:	f7fc f967 	bl	2a7f0 <memmove>
   2e522:	e70b      	b.n	2e33c <_realloc_r+0xc0>
   2e524:	68ab      	ldr	r3, [r5, #8]
   2e526:	6083      	str	r3, [r0, #8]
   2e528:	68eb      	ldr	r3, [r5, #12]
   2e52a:	60c3      	str	r3, [r0, #12]
   2e52c:	2a24      	cmp	r2, #36	; 0x24
   2e52e:	d017      	beq.n	2e560 <_realloc_r+0x2e4>
   2e530:	f100 0310 	add.w	r3, r0, #16
   2e534:	f105 0210 	add.w	r2, r5, #16
   2e538:	e6e7      	b.n	2e30a <_realloc_r+0x8e>
   2e53a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2e53e:	f023 0303 	bic.w	r3, r3, #3
   2e542:	441c      	add	r4, r3
   2e544:	462e      	mov	r6, r5
   2e546:	e6f9      	b.n	2e33c <_realloc_r+0xc0>
   2e548:	68a9      	ldr	r1, [r5, #8]
   2e54a:	f8ca 1010 	str.w	r1, [sl, #16]
   2e54e:	68e9      	ldr	r1, [r5, #12]
   2e550:	f8ca 1014 	str.w	r1, [sl, #20]
   2e554:	2a24      	cmp	r2, #36	; 0x24
   2e556:	d00c      	beq.n	2e572 <_realloc_r+0x2f6>
   2e558:	3510      	adds	r5, #16
   2e55a:	f10a 0218 	add.w	r2, sl, #24
   2e55e:	e7b9      	b.n	2e4d4 <_realloc_r+0x258>
   2e560:	692b      	ldr	r3, [r5, #16]
   2e562:	6103      	str	r3, [r0, #16]
   2e564:	696b      	ldr	r3, [r5, #20]
   2e566:	6143      	str	r3, [r0, #20]
   2e568:	f105 0218 	add.w	r2, r5, #24
   2e56c:	f100 0318 	add.w	r3, r0, #24
   2e570:	e6cb      	b.n	2e30a <_realloc_r+0x8e>
   2e572:	692a      	ldr	r2, [r5, #16]
   2e574:	f8ca 2018 	str.w	r2, [sl, #24]
   2e578:	696a      	ldr	r2, [r5, #20]
   2e57a:	f8ca 201c 	str.w	r2, [sl, #28]
   2e57e:	3518      	adds	r5, #24
   2e580:	f10a 0220 	add.w	r2, sl, #32
   2e584:	e7a6      	b.n	2e4d4 <_realloc_r+0x258>
   2e586:	4632      	mov	r2, r6
   2e588:	e77f      	b.n	2e48a <_realloc_r+0x20e>
   2e58a:	4629      	mov	r1, r5
   2e58c:	4630      	mov	r0, r6
   2e58e:	9301      	str	r3, [sp, #4]
   2e590:	f7fc f92e 	bl	2a7f0 <memmove>
   2e594:	9b01      	ldr	r3, [sp, #4]
   2e596:	e77e      	b.n	2e496 <_realloc_r+0x21a>
   2e598:	68a9      	ldr	r1, [r5, #8]
   2e59a:	f8ca 1010 	str.w	r1, [sl, #16]
   2e59e:	68e9      	ldr	r1, [r5, #12]
   2e5a0:	f8ca 1014 	str.w	r1, [sl, #20]
   2e5a4:	2a24      	cmp	r2, #36	; 0x24
   2e5a6:	d003      	beq.n	2e5b0 <_realloc_r+0x334>
   2e5a8:	3510      	adds	r5, #16
   2e5aa:	f10a 0218 	add.w	r2, sl, #24
   2e5ae:	e76c      	b.n	2e48a <_realloc_r+0x20e>
   2e5b0:	692a      	ldr	r2, [r5, #16]
   2e5b2:	f8ca 2018 	str.w	r2, [sl, #24]
   2e5b6:	696a      	ldr	r2, [r5, #20]
   2e5b8:	f8ca 201c 	str.w	r2, [sl, #28]
   2e5bc:	3518      	adds	r5, #24
   2e5be:	f10a 0220 	add.w	r2, sl, #32
   2e5c2:	e762      	b.n	2e48a <_realloc_r+0x20e>
   2e5c4:	2000d10c 	.word	0x2000d10c
