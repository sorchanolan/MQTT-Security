
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

#include <crc16.h>

u16_t crc16(const u8_t *src, size_t len, u16_t polynomial,
	    u16_t initial_value, bool pad)
{
       0:	2000ac28 	.word	0x2000ac28
       4:	00027d09 	.word	0x00027d09
	u16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
       8:	00027d69 	.word	0x00027d69
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
       c:	00027b9d 	.word	0x00027b9d
	size_t padding = pad ? sizeof(crc) : 0;
      10:	00027b9d 	.word	0x00027b9d
      14:	00027b9d 	.word	0x00027b9d
			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80 >> b));
			}

			if (divide) {
      18:	00027b9d 	.word	0x00027b9d
		for (b = 0; b < 8; b++) {
      1c:	00027b9d 	.word	0x00027b9d
      20:	00027b9d 	.word	0x00027b9d
			crc = (crc << 1);
      24:	00027b9d 	.word	0x00027b9d
			if (i < len) {
      28:	00027b9d 	.word	0x00027b9d
				crc |= !!(src[i] & (0x80 >> b));
      2c:	000276ed 	.word	0x000276ed
      30:	00027b9d 	.word	0x00027b9d
      34:	00027b9d 	.word	0x00027b9d
      38:	000276a9 	.word	0x000276a9
      3c:	00027b9d 	.word	0x00027b9d

00000040 <_irq_vector_table>:
				crc = crc ^ polynomial;
      40:	00027ccd 00019415 00027ccd 00027ccd     .|.......|...|..
	for (i = 0; i < len + padding; i++) {
      50:	00027ccd 00027ccd 00027ccd 00027ccd     .|...|...|...|..
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
      60:	00027ccd 00027ccd 00027ccd 00027ccd     .|...|...|...|..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
      70:	00027ccd 00027ccd 00027ccd 00027ccd     .|...|...|...|..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
      80:	00027ccd 00027ccd 00027ccd 00027ccd     .|...|...|...|..
      90:	00027ccd 00027ccd 00027ccd 00027ccd     .|...|...|...|..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
      a0:	00027ccd 00027ccd 00027ccd 00027ccd     .|...|...|...|..
      b0:	00027ccd 00027ccd 00027ccd 00027ccd     .|...|...|...|..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
      c0:	00027ccd 00027ccd 00027ccd 00027ccd     .|...|...|...|..
      d0:	00027ccd 00027ccd 00027ccd              .|...|...|..

000000dc <_sw_isr_table>:
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
      dc:	00000000 00002a0d 00000000 00027b09     .....*.......{..
      ec:	2000d058 00002347 00000000 00027b09     X.. G#.......{..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
      fc:	00000000 00027b09 00000000 00027b09     .....{.......{..

	(void)_copy(state, sizeof(state), in, sizeof(state));

	add_round_key(state, s->words + Nb*Nr);

	for (i = Nr - 1; i > 0; --i) {
     10c:	2000d094 0000271b 00000000 00027b09     ... .'.......{..
	for (i = 0; i < (Nb*Nk); ++i) {
     11c:	00000000 00027b09 00000000 00027b09     .....{.......{..
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     12c:	00000000 00027b09 00000000 00019435     .....{......5...
     13c:	00000000 00027b09 00000000 00019477     .....{......w...
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     14c:	00000000 00027b09 00000000 00027b09     .....{.......{..
     15c:	00000000 00027b09 00000000 0000248d     .....{.......$..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     16c:	00000000 00027b09 00000000 00027b09     .....{.......{..
     17c:	00000000 00027b09 00000000 00027b09     .....{.......{..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     18c:	00000000 00027b09 00000000 00027b09     .....{.......{..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     19c:	00000000 0001946d 00000000 00027b09     ....m........{..
     1ac:	00000000 00027b09 00000000 00027b09     .....{.......{..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     1bc:	00000000 00027b09 00000000 00027b09     .....{.......{..
     1cc:	00000000 00027b09 00000000 00027b09     .....{.......{..
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     1dc:	00000000 00027b09 00000000 00027b09     .....{.......{..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     1ec:	00000000 00027b09 00000000 00027b09     .....{.......{..
     1fc:	00000000 00027b09 00000000 00027b09     .....{.......{..
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     20c:	00000000 00027b09                       .....{..

00000214 <_image_text_start>:
	...

00000220 <memchr>:
     220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     224:	2a10      	cmp	r2, #16
     226:	db2b      	blt.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     228:	f010 0f07 	tst.w	r0, #7
     22c:	d008      	beq.n	240 <memchr+0x20>
     22e:	f810 3b01 	ldrb.w	r3, [r0], #1
     232:	3a01      	subs	r2, #1
     234:	428b      	cmp	r3, r1
     236:	d02d      	beq.n	294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     238:	f010 0f07 	tst.w	r0, #7
     23c:	b342      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     23e:	d1f6      	bne.n	22e <memchr+0xe>
     240:	b4f0      	push	{r4, r5, r6, r7}
     242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     24a:	f022 0407 	bic.w	r4, r2, #7
     24e:	f07f 0700 	mvns.w	r7, #0
     252:	2300      	movs	r3, #0
     254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     258:	3c08      	subs	r4, #8
     25a:	ea85 0501 	eor.w	r5, r5, r1
     25e:	ea86 0601 	eor.w	r6, r6, r1
     262:	fa85 f547 	uadd8	r5, r5, r7
     266:	faa3 f587 	sel	r5, r3, r7
     26a:	fa86 f647 	uadd8	r6, r6, r7
     26e:	faa5 f687 	sel	r6, r5, r7
     272:	b98e      	cbnz	r6, 298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     274:	d1ee      	bne.n	254 <memchr+0x34>
     276:	bcf0      	pop	{r4, r5, r6, r7}
     278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     27c:	f002 0207 	and.w	r2, r2, #7
     280:	b132      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     282:	f810 3b01 	ldrb.w	r3, [r0], #1
     286:	3a01      	subs	r2, #1
     288:	ea83 0301 	eor.w	r3, r3, r1
     28c:	b113      	cbz	r3, 294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     28e:	d1f8      	bne.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     290:	2000      	movs	r0, #0
     292:	4770      	bx	lr
     294:	3801      	subs	r0, #1
     296:	4770      	bx	lr
     298:	2d00      	cmp	r5, #0
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     29a:	bf06      	itte	eq
     29c:	4635      	moveq	r5, r6
     29e:	3803      	subeq	r0, #3
     2a0:	3807      	subne	r0, #7
     2a2:	f015 0f01 	tst.w	r5, #1
     2a6:	d107      	bne.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     2a8:	3001      	adds	r0, #1
     2aa:	f415 7f80 	tst.w	r5, #256	; 0x100
     2ae:	bf02      	ittt	eq
     2b0:	3001      	addeq	r0, #1
     2b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     2b6:	3001      	addeq	r0, #1
     2b8:	bcf0      	pop	{r4, r5, r6, r7}
     2ba:	3801      	subs	r0, #1
     2bc:	4770      	bx	lr
     2be:	bf00      	nop

000002c0 <memcpy>:
     2c0:	4684      	mov	ip, r0
     2c2:	ea41 0300 	orr.w	r3, r1, r0
     2c6:	f013 0303 	ands.w	r3, r3, #3
     2ca:	d16d      	bne.n	3a8 <memcpy+0xe8>
     2cc:	3a40      	subs	r2, #64	; 0x40
     2ce:	d341      	bcc.n	354 <memcpy+0x94>
     2d0:	f851 3b04 	ldr.w	r3, [r1], #4
     2d4:	f840 3b04 	str.w	r3, [r0], #4
     2d8:	f851 3b04 	ldr.w	r3, [r1], #4
     2dc:	f840 3b04 	str.w	r3, [r0], #4
     2e0:	f851 3b04 	ldr.w	r3, [r1], #4
     2e4:	f840 3b04 	str.w	r3, [r0], #4
     2e8:	f851 3b04 	ldr.w	r3, [r1], #4
     2ec:	f840 3b04 	str.w	r3, [r0], #4
     2f0:	f851 3b04 	ldr.w	r3, [r1], #4
     2f4:	f840 3b04 	str.w	r3, [r0], #4
     2f8:	f851 3b04 	ldr.w	r3, [r1], #4
     2fc:	f840 3b04 	str.w	r3, [r0], #4
     300:	f851 3b04 	ldr.w	r3, [r1], #4
     304:	f840 3b04 	str.w	r3, [r0], #4
     308:	f851 3b04 	ldr.w	r3, [r1], #4
     30c:	f840 3b04 	str.w	r3, [r0], #4
     310:	f851 3b04 	ldr.w	r3, [r1], #4
     314:	f840 3b04 	str.w	r3, [r0], #4
     318:	f851 3b04 	ldr.w	r3, [r1], #4
     31c:	f840 3b04 	str.w	r3, [r0], #4
     320:	f851 3b04 	ldr.w	r3, [r1], #4
     324:	f840 3b04 	str.w	r3, [r0], #4
     328:	f851 3b04 	ldr.w	r3, [r1], #4
     32c:	f840 3b04 	str.w	r3, [r0], #4
     330:	f851 3b04 	ldr.w	r3, [r1], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     334:	f840 3b04 	str.w	r3, [r0], #4
     338:	f851 3b04 	ldr.w	r3, [r1], #4
     33c:	f840 3b04 	str.w	r3, [r0], #4
     340:	f851 3b04 	ldr.w	r3, [r1], #4
     344:	f840 3b04 	str.w	r3, [r0], #4
     348:	f851 3b04 	ldr.w	r3, [r1], #4
     34c:	f840 3b04 	str.w	r3, [r0], #4
     350:	3a40      	subs	r2, #64	; 0x40
     352:	d2bd      	bcs.n	2d0 <memcpy+0x10>
     354:	3230      	adds	r2, #48	; 0x30
     356:	d311      	bcc.n	37c <memcpy+0xbc>
     358:	f851 3b04 	ldr.w	r3, [r1], #4
     35c:	f840 3b04 	str.w	r3, [r0], #4
     360:	f851 3b04 	ldr.w	r3, [r1], #4
     364:	f840 3b04 	str.w	r3, [r0], #4
     368:	f851 3b04 	ldr.w	r3, [r1], #4
     36c:	f840 3b04 	str.w	r3, [r0], #4
     370:	f851 3b04 	ldr.w	r3, [r1], #4
     374:	f840 3b04 	str.w	r3, [r0], #4
     378:	3a10      	subs	r2, #16
     37a:	d2ed      	bcs.n	358 <memcpy+0x98>
     37c:	320c      	adds	r2, #12
     37e:	d305      	bcc.n	38c <memcpy+0xcc>
     380:	f851 3b04 	ldr.w	r3, [r1], #4
     384:	f840 3b04 	str.w	r3, [r0], #4
     388:	3a04      	subs	r2, #4
     38a:	d2f9      	bcs.n	380 <memcpy+0xc0>
     38c:	3204      	adds	r2, #4
     38e:	d008      	beq.n	3a2 <memcpy+0xe2>
     390:	07d2      	lsls	r2, r2, #31
     392:	bf1c      	itt	ne
     394:	f811 3b01 	ldrbne.w	r3, [r1], #1
     398:	f800 3b01 	strbne.w	r3, [r0], #1
     39c:	d301      	bcc.n	3a2 <memcpy+0xe2>
     39e:	880b      	ldrh	r3, [r1, #0]
     3a0:	8003      	strh	r3, [r0, #0]
     3a2:	4660      	mov	r0, ip
     3a4:	4770      	bx	lr
     3a6:	bf00      	nop
     3a8:	2a08      	cmp	r2, #8
     3aa:	d313      	bcc.n	3d4 <memcpy+0x114>
     3ac:	078b      	lsls	r3, r1, #30
     3ae:	d08d      	beq.n	2cc <memcpy+0xc>
     3b0:	f010 0303 	ands.w	r3, r0, #3
     3b4:	d08a      	beq.n	2cc <memcpy+0xc>
     3b6:	f1c3 0304 	rsb	r3, r3, #4
     3ba:	1ad2      	subs	r2, r2, r3
     3bc:	07db      	lsls	r3, r3, #31
     3be:	bf1c      	itt	ne
     3c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
     3c4:	f800 3b01 	strbne.w	r3, [r0], #1
     3c8:	d380      	bcc.n	2cc <memcpy+0xc>
     3ca:	f831 3b02 	ldrh.w	r3, [r1], #2
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     3ce:	f820 3b02 	strh.w	r3, [r0], #2
     3d2:	e77b      	b.n	2cc <memcpy+0xc>
     3d4:	3a04      	subs	r2, #4
     3d6:	d3d9      	bcc.n	38c <memcpy+0xcc>
     3d8:	3a01      	subs	r2, #1
     3da:	f811 3b01 	ldrb.w	r3, [r1], #1
     3de:	f800 3b01 	strb.w	r3, [r0], #1
     3e2:	d2f9      	bcs.n	3d8 <memcpy+0x118>
     3e4:	780b      	ldrb	r3, [r1, #0]
     3e6:	7003      	strb	r3, [r0, #0]
     3e8:	784b      	ldrb	r3, [r1, #1]
     3ea:	7043      	strb	r3, [r0, #1]
     3ec:	788b      	ldrb	r3, [r1, #2]
     3ee:	7083      	strb	r3, [r0, #2]
     3f0:	4660      	mov	r0, ip
     3f2:	4770      	bx	lr
	...
     400:	eba2 0003 	sub.w	r0, r2, r3
     404:	4770      	bx	lr
     406:	bf00      	nop

00000408 <strcmp>:
     408:	7802      	ldrb	r2, [r0, #0]
     40a:	780b      	ldrb	r3, [r1, #0]
     40c:	2a01      	cmp	r2, #1
     40e:	bf28      	it	cs
     410:	429a      	cmpcs	r2, r3
     412:	d1f5      	bne.n	400 <CONFIG_BT_RX_STACK_SIZE>
     414:	e96d 4504 	strd	r4, r5, [sp, #-16]!
     418:	ea40 0401 	orr.w	r4, r0, r1
     41c:	e9cd 6702 	strd	r6, r7, [sp, #8]
     420:	f06f 0c00 	mvn.w	ip, #0
     424:	ea4f 7244 	mov.w	r2, r4, lsl #29
     428:	b312      	cbz	r2, 470 <strcmp+0x68>
     42a:	ea80 0401 	eor.w	r4, r0, r1
     42e:	f014 0f07 	tst.w	r4, #7
     432:	d16a      	bne.n	50a <CONFIG_NET_TX_STACK_SIZE+0x5a>
     434:	f000 0407 	and.w	r4, r0, #7
     438:	f020 0007 	bic.w	r0, r0, #7
     43c:	f004 0503 	and.w	r5, r4, #3
     440:	f021 0107 	bic.w	r1, r1, #7
     444:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     448:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     44c:	f014 0f04 	tst.w	r4, #4
     450:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     454:	fa0c f405 	lsl.w	r4, ip, r5
     458:	ea62 0204 	orn	r2, r2, r4
     45c:	ea66 0604 	orn	r6, r6, r4
     460:	d00a      	beq.n	478 <strcmp+0x70>
     462:	ea63 0304 	orn	r3, r3, r4
     466:	4662      	mov	r2, ip
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     468:	ea67 0704 	orn	r7, r7, r4
     46c:	4666      	mov	r6, ip
     46e:	e003      	b.n	478 <strcmp+0x70>
     470:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     474:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     478:	fa82 f54c 	uadd8	r5, r2, ip
     47c:	ea82 0406 	eor.w	r4, r2, r6
     480:	faa4 f48c 	sel	r4, r4, ip
     484:	bb6c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     486:	fa83 f54c 	uadd8	r5, r3, ip
     48a:	ea83 0507 	eor.w	r5, r3, r7
     48e:	faa5 f58c 	sel	r5, r5, ip
     492:	b995      	cbnz	r5, 4ba <CONFIG_NET_TX_STACK_SIZE+0xa>
     494:	e950 2302 	ldrd	r2, r3, [r0, #-8]
     498:	e951 6702 	ldrd	r6, r7, [r1, #-8]
     49c:	fa82 f54c 	uadd8	r5, r2, ip
     4a0:	ea82 0406 	eor.w	r4, r2, r6
     4a4:	faa4 f48c 	sel	r4, r4, ip
     4a8:	fa83 f54c 	uadd8	r5, r3, ip
     4ac:	ea83 0507 	eor.w	r5, r3, r7
     4b0:	faa5 f58c 	sel	r5, r5, ip
     4b4:	4325      	orrs	r5, r4
     4b6:	d0db      	beq.n	470 <strcmp+0x68>
     4b8:	b99c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     4ba:	ba2d      	rev	r5, r5
     4bc:	fab5 f485 	clz	r4, r5
     4c0:	f024 0407 	bic.w	r4, r4, #7
     4c4:	fa27 f104 	lsr.w	r1, r7, r4
     4c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4cc:	fa23 f304 	lsr.w	r3, r3, r4
     4d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     4d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     4d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     4dc:	eba0 0001 	sub.w	r0, r0, r1
     4e0:	4770      	bx	lr
     4e2:	ba24      	rev	r4, r4
     4e4:	fab4 f484 	clz	r4, r4
     4e8:	f024 0407 	bic.w	r4, r4, #7
     4ec:	fa26 f104 	lsr.w	r1, r6, r4
     4f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4f4:	fa22 f204 	lsr.w	r2, r2, r4
     4f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     4fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     500:	e8fd 4504 	ldrd	r4, r5, [sp], #16
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     504:	eba0 0001 	sub.w	r0, r0, r1
     508:	4770      	bx	lr
     50a:	f014 0f03 	tst.w	r4, #3
     50e:	d13c      	bne.n	58a <CONFIG_NET_TX_STACK_SIZE+0xda>
     510:	f010 0403 	ands.w	r4, r0, #3
     514:	d128      	bne.n	568 <CONFIG_NET_TX_STACK_SIZE+0xb8>
     516:	f850 2b08 	ldr.w	r2, [r0], #8
     51a:	f851 3b08 	ldr.w	r3, [r1], #8
     51e:	fa82 f54c 	uadd8	r5, r2, ip
     522:	ea82 0503 	eor.w	r5, r2, r3
     526:	faa5 f58c 	sel	r5, r5, ip
     52a:	b95d      	cbnz	r5, 544 <CONFIG_NET_TX_STACK_SIZE+0x94>
     52c:	f850 2c04 	ldr.w	r2, [r0, #-4]
     530:	f851 3c04 	ldr.w	r3, [r1, #-4]
     534:	fa82 f54c 	uadd8	r5, r2, ip
     538:	ea82 0503 	eor.w	r5, r2, r3
     53c:	faa5 f58c 	sel	r5, r5, ip
     540:	2d00      	cmp	r5, #0
     542:	d0e8      	beq.n	516 <CONFIG_NET_TX_STACK_SIZE+0x66>
     544:	ba2d      	rev	r5, r5
     546:	fab5 f485 	clz	r4, r5
     54a:	f024 0407 	bic.w	r4, r4, #7
     54e:	fa23 f104 	lsr.w	r1, r3, r4
     552:	fa22 f204 	lsr.w	r2, r2, r4
     556:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     55a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     55e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     562:	eba0 0001 	sub.w	r0, r0, r1
     566:	4770      	bx	lr
     568:	ea4f 04c4 	mov.w	r4, r4, lsl #3
     56c:	f020 0003 	bic.w	r0, r0, #3
     570:	f850 2b08 	ldr.w	r2, [r0], #8
     574:	f021 0103 	bic.w	r1, r1, #3
     578:	f851 3b08 	ldr.w	r3, [r1], #8
     57c:	fa0c f404 	lsl.w	r4, ip, r4
     580:	ea62 0204 	orn	r2, r2, r4
     584:	ea63 0304 	orn	r3, r3, r4
     588:	e7c9      	b.n	51e <CONFIG_NET_TX_STACK_SIZE+0x6e>
     58a:	f010 0403 	ands.w	r4, r0, #3
     58e:	d01a      	beq.n	5c6 <CONFIG_NET_TX_STACK_SIZE+0x116>
     590:	eba1 0104 	sub.w	r1, r1, r4
     594:	f020 0003 	bic.w	r0, r0, #3
     598:	07e4      	lsls	r4, r4, #31
     59a:	f850 2b04 	ldr.w	r2, [r0], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     59e:	d006      	beq.n	5ae <CONFIG_NET_TX_STACK_SIZE+0xfe>
     5a0:	d20f      	bcs.n	5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5a2:	788b      	ldrb	r3, [r1, #2]
     5a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
     5a8:	1ae4      	subs	r4, r4, r3
     5aa:	d106      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ac:	b12b      	cbz	r3, 5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ae:	78cb      	ldrb	r3, [r1, #3]
     5b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
     5b4:	1ae4      	subs	r4, r4, r3
     5b6:	d100      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5b8:	b91b      	cbnz	r3, 5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5ba:	4620      	mov	r0, r4
     5bc:	f85d 4b10 	ldr.w	r4, [sp], #16
     5c0:	4770      	bx	lr
     5c2:	f101 0104 	add.w	r1, r1, #4
     5c6:	f850 2b04 	ldr.w	r2, [r0], #4
     5ca:	07cc      	lsls	r4, r1, #31
     5cc:	f021 0103 	bic.w	r1, r1, #3
     5d0:	f851 3b04 	ldr.w	r3, [r1], #4
     5d4:	d848      	bhi.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     5d6:	d224      	bcs.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     5d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
     5dc:	fa82 f54c 	uadd8	r5, r2, ip
     5e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
     5e4:	faa5 f58c 	sel	r5, r5, ip
     5e8:	d10a      	bne.n	600 <CONFIG_NET_RX_STACK_SIZE+0x24>
     5ea:	b965      	cbnz	r5, 606 <CONFIG_NET_RX_STACK_SIZE+0x2a>
     5ec:	f851 3b04 	ldr.w	r3, [r1], #4
     5f0:	ea84 0402 	eor.w	r4, r4, r2
     5f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
     5f8:	d10e      	bne.n	618 <CONFIG_NET_RX_STACK_SIZE+0x3c>
     5fa:	f850 2b04 	ldr.w	r2, [r0], #4
     5fe:	e7eb      	b.n	5d8 <CONFIG_NET_TX_STACK_SIZE+0x128>
     600:	ea4f 2313 	mov.w	r3, r3, lsr #8
     604:	e055      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     606:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
     60a:	d14d      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     60c:	7808      	ldrb	r0, [r1, #0]
     60e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     612:	f1c0 0000 	rsb	r0, r0, #0
     616:	4770      	bx	lr
     618:	ea4f 6212 	mov.w	r2, r2, lsr #24
     61c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     620:	e047      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     622:	ea02 441c 	and.w	r4, r2, ip, lsr #16
     626:	fa82 f54c 	uadd8	r5, r2, ip
     62a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
     62e:	faa5 f58c 	sel	r5, r5, ip
     632:	d10a      	bne.n	64a <CONFIG_NET_RX_STACK_SIZE+0x6e>
     634:	b965      	cbnz	r5, 650 <CONFIG_NET_RX_STACK_SIZE+0x74>
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     636:	f851 3b04 	ldr.w	r3, [r1], #4
     63a:	ea84 0402 	eor.w	r4, r4, r2
     63e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
     642:	d10c      	bne.n	65e <CONFIG_NET_RX_STACK_SIZE+0x82>
     644:	f850 2b04 	ldr.w	r2, [r0], #4
     648:	e7eb      	b.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     64a:	ea4f 4313 	mov.w	r3, r3, lsr #16
     64e:	e030      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     650:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
     654:	d128      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     656:	880b      	ldrh	r3, [r1, #0]
     658:	ea4f 4212 	mov.w	r2, r2, lsr #16
     65c:	e029      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     65e:	ea4f 4212 	mov.w	r2, r2, lsr #16
     662:	ea03 431c 	and.w	r3, r3, ip, lsr #16
     666:	e024      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     668:	f002 04ff 	and.w	r4, r2, #255	; 0xff
     66c:	fa82 f54c 	uadd8	r5, r2, ip
     670:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
     674:	faa5 f58c 	sel	r5, r5, ip
     678:	d10a      	bne.n	690 <CONFIG_NET_RX_STACK_SIZE+0xb4>
     67a:	b965      	cbnz	r5, 696 <CONFIG_NET_RX_STACK_SIZE+0xba>
     67c:	f851 3b04 	ldr.w	r3, [r1], #4
     680:	ea84 0402 	eor.w	r4, r4, r2
     684:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
     688:	d109      	bne.n	69e <CONFIG_NET_RX_STACK_SIZE+0xc2>
     68a:	f850 2b04 	ldr.w	r2, [r0], #4
     68e:	e7eb      	b.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     690:	ea4f 6313 	mov.w	r3, r3, lsr #24
     694:	e00d      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     696:	f015 0fff 	tst.w	r5, #255	; 0xff
     69a:	d105      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     69c:	680b      	ldr	r3, [r1, #0]
     69e:	ea4f 2212 	mov.w	r2, r2, lsr #8
     6a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     6a6:	e004      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     6a8:	f04f 0000 	mov.w	r0, #0
     6ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6b0:	4770      	bx	lr
     6b2:	ba12      	rev	r2, r2
     6b4:	ba1b      	rev	r3, r3
     6b6:	fa82 f44c 	uadd8	r4, r2, ip
     6ba:	ea82 0403 	eor.w	r4, r2, r3
     6be:	faa4 f58c 	sel	r5, r4, ip
     6c2:	fab5 f485 	clz	r4, r5
     6c6:	fa02 f204 	lsl.w	r2, r2, r4
     6ca:	fa03 f304 	lsl.w	r3, r3, r4
     6ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     6d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
     6da:	4770      	bx	lr
	...

00000700 <strlen>:
     700:	f890 f000 	pld	[r0]
     704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
     708:	f020 0107 	bic.w	r1, r0, #7
     70c:	f06f 0c00 	mvn.w	ip, #0
     710:	f010 0407 	ands.w	r4, r0, #7
     714:	f891 f020 	pld	[r1, #32]
     718:	f040 8049 	bne.w	7ae <strlen+0xae>
     71c:	f04f 0400 	mov.w	r4, #0
     720:	f06f 0007 	mvn.w	r0, #7
     724:	e9d1 2300 	ldrd	r2, r3, [r1]
     728:	f891 f040 	pld	[r1, #64]	; 0x40
     72c:	f100 0008 	add.w	r0, r0, #8
     730:	fa82 f24c 	uadd8	r2, r2, ip
     734:	faa4 f28c 	sel	r2, r4, ip
     738:	fa83 f34c 	uadd8	r3, r3, ip
     73c:	faa2 f38c 	sel	r3, r2, ip
     740:	bb4b      	cbnz	r3, 796 <strlen+0x96>
     742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
     746:	fa82 f24c 	uadd8	r2, r2, ip
     74a:	f100 0008 	add.w	r0, r0, #8
     74e:	faa4 f28c 	sel	r2, r4, ip
     752:	fa83 f34c 	uadd8	r3, r3, ip
     756:	faa2 f38c 	sel	r3, r2, ip
     75a:	b9e3      	cbnz	r3, 796 <strlen+0x96>
     75c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     760:	fa82 f24c 	uadd8	r2, r2, ip
     764:	f100 0008 	add.w	r0, r0, #8
     768:	faa4 f28c 	sel	r2, r4, ip
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     76c:	fa83 f34c 	uadd8	r3, r3, ip
     770:	faa2 f38c 	sel	r3, r2, ip
     774:	b97b      	cbnz	r3, 796 <strlen+0x96>
     776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
     77a:	f101 0120 	add.w	r1, r1, #32
     77e:	fa82 f24c 	uadd8	r2, r2, ip
     782:	f100 0008 	add.w	r0, r0, #8
     786:	faa4 f28c 	sel	r2, r4, ip
     78a:	fa83 f34c 	uadd8	r3, r3, ip
     78e:	faa2 f38c 	sel	r3, r2, ip
     792:	2b00      	cmp	r3, #0
     794:	d0c6      	beq.n	724 <strlen+0x24>
     796:	2a00      	cmp	r2, #0
     798:	bf04      	itt	eq
     79a:	3004      	addeq	r0, #4
     79c:	461a      	moveq	r2, r3
     79e:	ba12      	rev	r2, r2
     7a0:	fab2 f282 	clz	r2, r2
     7a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
     7a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
     7ac:	4770      	bx	lr
     7ae:	e9d1 2300 	ldrd	r2, r3, [r1]
     7b2:	f004 0503 	and.w	r5, r4, #3
     7b6:	f1c4 0000 	rsb	r0, r4, #0
     7ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     7be:	f014 0f04 	tst.w	r4, #4
     7c2:	f891 f040 	pld	[r1, #64]	; 0x40
     7c6:	fa0c f505 	lsl.w	r5, ip, r5
     7ca:	ea62 0205 	orn	r2, r2, r5
     7ce:	bf1c      	itt	ne
     7d0:	ea63 0305 	ornne	r3, r3, r5
     7d4:	4662      	movne	r2, ip
     7d6:	f04f 0400 	mov.w	r4, #0
     7da:	e7a9      	b.n	730 <strlen+0x30>

000007dc <__aeabi_drsub>:
     7dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     7e0:	e002      	b.n	7e8 <__adddf3>
     7e2:	bf00      	nop

000007e4 <__aeabi_dsub>:
     7e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000007e8 <__adddf3>:
     7e8:	b530      	push	{r4, r5, lr}
     7ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
     7ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
     7f2:	ea94 0f05 	teq	r4, r5
     7f6:	bf08      	it	eq
     7f8:	ea90 0f02 	teqeq	r0, r2
     7fc:	bf1f      	itttt	ne
     7fe:	ea54 0c00 	orrsne.w	ip, r4, r0
     802:	ea55 0c02 	orrsne.w	ip, r5, r2
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     806:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     80a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     80e:	f000 80e2 	beq.w	9d6 <CONFIG_ISR_STACK_SIZE+0x1d6>
     812:	ea4f 5454 	mov.w	r4, r4, lsr #21
     816:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     81a:	bfb8      	it	lt
     81c:	426d      	neglt	r5, r5
     81e:	dd0c      	ble.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     820:	442c      	add	r4, r5
     822:	ea80 0202 	eor.w	r2, r0, r2
     826:	ea81 0303 	eor.w	r3, r1, r3
     82a:	ea82 0000 	eor.w	r0, r2, r0
     82e:	ea83 0101 	eor.w	r1, r3, r1
     832:	ea80 0202 	eor.w	r2, r0, r2
     836:	ea81 0303 	eor.w	r3, r1, r3
     83a:	2d36      	cmp	r5, #54	; 0x36
     83c:	bf88      	it	hi
     83e:	bd30      	pophi	{r4, r5, pc}
     840:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     844:	ea4f 3101 	mov.w	r1, r1, lsl #12
     848:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     84c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     850:	d002      	beq.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     852:	4240      	negs	r0, r0
     854:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     858:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     85c:	ea4f 3303 	mov.w	r3, r3, lsl #12
     860:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     864:	d002      	beq.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     866:	4252      	negs	r2, r2
     868:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     86c:	ea94 0f05 	teq	r4, r5
     870:	f000 80a7 	beq.w	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
     874:	f1a4 0401 	sub.w	r4, r4, #1
     878:	f1d5 0e20 	rsbs	lr, r5, #32
     87c:	db0d      	blt.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
     87e:	fa02 fc0e 	lsl.w	ip, r2, lr
     882:	fa22 f205 	lsr.w	r2, r2, r5
     886:	1880      	adds	r0, r0, r2
     888:	f141 0100 	adc.w	r1, r1, #0
     88c:	fa03 f20e 	lsl.w	r2, r3, lr
     890:	1880      	adds	r0, r0, r2
     892:	fa43 f305 	asr.w	r3, r3, r5
     896:	4159      	adcs	r1, r3
     898:	e00e      	b.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     89a:	f1a5 0520 	sub.w	r5, r5, #32
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     89e:	f10e 0e20 	add.w	lr, lr, #32
     8a2:	2a01      	cmp	r2, #1
     8a4:	fa03 fc0e 	lsl.w	ip, r3, lr
     8a8:	bf28      	it	cs
     8aa:	f04c 0c02 	orrcs.w	ip, ip, #2
     8ae:	fa43 f305 	asr.w	r3, r3, r5
     8b2:	18c0      	adds	r0, r0, r3
     8b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     8b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     8bc:	d507      	bpl.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     8be:	f04f 0e00 	mov.w	lr, #0
     8c2:	f1dc 0c00 	rsbs	ip, ip, #0
     8c6:	eb7e 0000 	sbcs.w	r0, lr, r0
     8ca:	eb6e 0101 	sbc.w	r1, lr, r1
     8ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     8d2:	d31b      	bcc.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
     8d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     8d8:	d30c      	bcc.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8da:	0849      	lsrs	r1, r1, #1
     8dc:	ea5f 0030 	movs.w	r0, r0, rrx
     8e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
     8e4:	f104 0401 	add.w	r4, r4, #1
     8e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
     8ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     8f0:	f080 809a 	bcs.w	a28 <CONFIG_ISR_STACK_SIZE+0x228>
     8f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     8f8:	bf08      	it	eq
     8fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8fe:	f150 0000 	adcs.w	r0, r0, #0
     902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     906:	ea41 0105 	orr.w	r1, r1, r5
     90a:	bd30      	pop	{r4, r5, pc}
     90c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     910:	4140      	adcs	r0, r0
     912:	eb41 0101 	adc.w	r1, r1, r1
     916:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     91a:	f1a4 0401 	sub.w	r4, r4, #1
     91e:	d1e9      	bne.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     920:	f091 0f00 	teq	r1, #0
     924:	bf04      	itt	eq
     926:	4601      	moveq	r1, r0
     928:	2000      	moveq	r0, #0
     92a:	fab1 f381 	clz	r3, r1
     92e:	bf08      	it	eq
     930:	3320      	addeq	r3, #32
     932:	f1a3 030b 	sub.w	r3, r3, #11
     936:	f1b3 0220 	subs.w	r2, r3, #32
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     93a:	da0c      	bge.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
     93c:	320c      	adds	r2, #12
     93e:	dd08      	ble.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
     940:	f102 0c14 	add.w	ip, r2, #20
     944:	f1c2 020c 	rsb	r2, r2, #12
     948:	fa01 f00c 	lsl.w	r0, r1, ip
     94c:	fa21 f102 	lsr.w	r1, r1, r2
     950:	e00c      	b.n	96c <CONFIG_ISR_STACK_SIZE+0x16c>
     952:	f102 0214 	add.w	r2, r2, #20
     956:	bfd8      	it	le
     958:	f1c2 0c20 	rsble	ip, r2, #32
     95c:	fa01 f102 	lsl.w	r1, r1, r2
     960:	fa20 fc0c 	lsr.w	ip, r0, ip
     964:	bfdc      	itt	le
     966:	ea41 010c 	orrle.w	r1, r1, ip
     96a:	4090      	lslle	r0, r2
     96c:	1ae4      	subs	r4, r4, r3
     96e:	bfa2      	ittt	ge
     970:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     974:	4329      	orrge	r1, r5
     976:	bd30      	popge	{r4, r5, pc}
     978:	ea6f 0404 	mvn.w	r4, r4
     97c:	3c1f      	subs	r4, #31
     97e:	da1c      	bge.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
     980:	340c      	adds	r4, #12
     982:	dc0e      	bgt.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
     984:	f104 0414 	add.w	r4, r4, #20
     988:	f1c4 0220 	rsb	r2, r4, #32
     98c:	fa20 f004 	lsr.w	r0, r0, r4
     990:	fa01 f302 	lsl.w	r3, r1, r2
     994:	ea40 0003 	orr.w	r0, r0, r3
     998:	fa21 f304 	lsr.w	r3, r1, r4
     99c:	ea45 0103 	orr.w	r1, r5, r3
     9a0:	bd30      	pop	{r4, r5, pc}
     9a2:	f1c4 040c 	rsb	r4, r4, #12
     9a6:	f1c4 0220 	rsb	r2, r4, #32
     9aa:	fa20 f002 	lsr.w	r0, r0, r2
     9ae:	fa01 f304 	lsl.w	r3, r1, r4
     9b2:	ea40 0003 	orr.w	r0, r0, r3
     9b6:	4629      	mov	r1, r5
     9b8:	bd30      	pop	{r4, r5, pc}
     9ba:	fa21 f004 	lsr.w	r0, r1, r4
     9be:	4629      	mov	r1, r5
     9c0:	bd30      	pop	{r4, r5, pc}
     9c2:	f094 0f00 	teq	r4, #0
     9c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     9ca:	bf06      	itte	eq
     9cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     9d0:	3401      	addeq	r4, #1
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     9d2:	3d01      	subne	r5, #1
     9d4:	e74e      	b.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
     9d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     9da:	bf18      	it	ne
     9dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     9e0:	d029      	beq.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
     9e2:	ea94 0f05 	teq	r4, r5
     9e6:	bf08      	it	eq
     9e8:	ea90 0f02 	teqeq	r0, r2
     9ec:	d005      	beq.n	9fa <CONFIG_ISR_STACK_SIZE+0x1fa>
     9ee:	ea54 0c00 	orrs.w	ip, r4, r0
     9f2:	bf04      	itt	eq
     9f4:	4619      	moveq	r1, r3
     9f6:	4610      	moveq	r0, r2
     9f8:	bd30      	pop	{r4, r5, pc}
     9fa:	ea91 0f03 	teq	r1, r3
     9fe:	bf1e      	ittt	ne
     a00:	2100      	movne	r1, #0
     a02:	2000      	movne	r0, #0
     a04:	bd30      	popne	{r4, r5, pc}
     a06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     a0a:	d105      	bne.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
     a0c:	0040      	lsls	r0, r0, #1
     a0e:	4149      	adcs	r1, r1
     a10:	bf28      	it	cs
     a12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     a16:	bd30      	pop	{r4, r5, pc}
     a18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     a1c:	bf3c      	itt	cc
     a1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     a22:	bd30      	popcc	{r4, r5, pc}
     a24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     a28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     a2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     a30:	f04f 0000 	mov.w	r0, #0
     a34:	bd30      	pop	{r4, r5, pc}
     a36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     a3a:	bf1a      	itte	ne
     a3c:	4619      	movne	r1, r3
     a3e:	4610      	movne	r0, r2
     a40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     a44:	bf1c      	itt	ne
     a46:	460b      	movne	r3, r1
     a48:	4602      	movne	r2, r0
     a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     a4e:	bf06      	itte	eq
     a50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     a54:	ea91 0f03 	teqeq	r1, r3
     a58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     a5c:	bd30      	pop	{r4, r5, pc}
     a5e:	bf00      	nop

00000a60 <__aeabi_ui2d>:
     a60:	f090 0f00 	teq	r0, #0
     a64:	bf04      	itt	eq
     a66:	2100      	moveq	r1, #0
     a68:	4770      	bxeq	lr
     a6a:	b530      	push	{r4, r5, lr}
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     a6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a70:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a74:	f04f 0500 	mov.w	r5, #0
     a78:	f04f 0100 	mov.w	r1, #0
     a7c:	e750      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     a7e:	bf00      	nop

00000a80 <__aeabi_i2d>:
     a80:	f090 0f00 	teq	r0, #0
     a84:	bf04      	itt	eq
     a86:	2100      	moveq	r1, #0
     a88:	4770      	bxeq	lr
     a8a:	b530      	push	{r4, r5, lr}
     a8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a90:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     a98:	bf48      	it	mi
     a9a:	4240      	negmi	r0, r0
     a9c:	f04f 0100 	mov.w	r1, #0
     aa0:	e73e      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     aa2:	bf00      	nop

00000aa4 <__aeabi_f2d>:
     aa4:	0042      	lsls	r2, r0, #1
     aa6:	ea4f 01e2 	mov.w	r1, r2, asr #3
     aaa:	ea4f 0131 	mov.w	r1, r1, rrx
     aae:	ea4f 7002 	mov.w	r0, r2, lsl #28
     ab2:	bf1f      	itttt	ne
     ab4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     ab8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     abc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     ac0:	4770      	bxne	lr
     ac2:	f092 0f00 	teq	r2, #0
     ac6:	bf14      	ite	ne
     ac8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     acc:	4770      	bxeq	lr
     ace:	b530      	push	{r4, r5, lr}
     ad0:	f44f 7460 	mov.w	r4, #896	; 0x380
     ad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     adc:	e720      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     ade:	bf00      	nop

00000ae0 <__aeabi_ul2d>:
     ae0:	ea50 0201 	orrs.w	r2, r0, r1
     ae4:	bf08      	it	eq
     ae6:	4770      	bxeq	lr
     ae8:	b530      	push	{r4, r5, lr}
     aea:	f04f 0500 	mov.w	r5, #0
     aee:	e00a      	b.n	b06 <__aeabi_l2d+0x16>

00000af0 <__aeabi_l2d>:
     af0:	ea50 0201 	orrs.w	r2, r0, r1
     af4:	bf08      	it	eq
     af6:	4770      	bxeq	lr
     af8:	b530      	push	{r4, r5, lr}
     afa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     afe:	d502      	bpl.n	b06 <__aeabi_l2d+0x16>
     b00:	4240      	negs	r0, r0
     b02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     b06:	f44f 6480 	mov.w	r4, #1024	; 0x400
     b0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
     b0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     b12:	f43f aedc 	beq.w	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b16:	f04f 0203 	mov.w	r2, #3
     b1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b1e:	bf18      	it	ne
     b20:	3203      	addne	r2, #3
     b22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b26:	bf18      	it	ne
     b28:	3203      	addne	r2, #3
     b2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     b2e:	f1c2 0320 	rsb	r3, r2, #32
     b32:	fa00 fc03 	lsl.w	ip, r0, r3
     b36:	fa20 f002 	lsr.w	r0, r0, r2
     b3a:	fa01 fe03 	lsl.w	lr, r1, r3
     b3e:	ea40 000e 	orr.w	r0, r0, lr
     b42:	fa21 f102 	lsr.w	r1, r1, r2
     b46:	4414      	add	r4, r2
     b48:	e6c1      	b.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b4a:	bf00      	nop

00000b4c <__aeabi_dmul>:
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     b56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     b5a:	bf1d      	ittte	ne
     b5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     b60:	ea94 0f0c 	teqne	r4, ip
     b64:	ea95 0f0c 	teqne	r5, ip
     b68:	f000 f8de 	bleq	d28 <__aeabi_dmul+0x1dc>
     b6c:	442c      	add	r4, r5
     b6e:	ea81 0603 	eor.w	r6, r1, r3
     b72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     b76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     b7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     b7e:	bf18      	it	ne
     b80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     b8c:	d038      	beq.n	c00 <__aeabi_dmul+0xb4>
     b8e:	fba0 ce02 	umull	ip, lr, r0, r2
     b92:	f04f 0500 	mov.w	r5, #0
     b96:	fbe1 e502 	umlal	lr, r5, r1, r2
     b9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     b9e:	fbe0 e503 	umlal	lr, r5, r0, r3
	(void)_copy(s, sizeof(t), t, sizeof(t));
     ba2:	f04f 0600 	mov.w	r6, #0
     ba6:	fbe1 5603 	umlal	r5, r6, r1, r3
     baa:	f09c 0f00 	teq	ip, #0
	for (i = Nr - 1; i > 0; --i) {
     bae:	bf18      	it	ne
     bb0:	f04e 0e01 	orrne.w	lr, lr, #1
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     bb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     bb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     bbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     bc0:	d204      	bcs.n	bcc <__aeabi_dmul+0x80>
     bc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     bc6:	416d      	adcs	r5, r5
     bc8:	eb46 0606 	adc.w	r6, r6, r6
     bcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     bd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     bd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     bd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     bdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     be0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     be4:	bf88      	it	hi
     be6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     bea:	d81e      	bhi.n	c2a <__aeabi_dmul+0xde>
     bec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     bf0:	bf08      	it	eq
     bf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     bf6:	f150 0000 	adcs.w	r0, r0, #0
     bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     bfe:	bd70      	pop	{r4, r5, r6, pc}
     c00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     c04:	ea46 0101 	orr.w	r1, r6, r1
     c08:	ea40 0002 	orr.w	r0, r0, r2
     c0c:	ea81 0103 	eor.w	r1, r1, r3
     c10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     c14:	bfc2      	ittt	gt
     c16:	ebd4 050c 	rsbsgt	r5, r4, ip
     c1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     c1e:	bd70      	popgt	{r4, r5, r6, pc}
     c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     c24:	f04f 0e00 	mov.w	lr, #0
     c28:	3c01      	subs	r4, #1
     c2a:	f300 80ab 	bgt.w	d84 <__aeabi_dmul+0x238>
     c2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
     c32:	bfde      	ittt	le
	(void)_copy(s, sizeof(t), t, sizeof(t));
     c34:	2000      	movle	r0, #0
     c36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     c3a:	bd70      	pople	{r4, r5, r6, pc}
     c3c:	f1c4 0400 	rsb	r4, r4, #0
     c40:	3c20      	subs	r4, #32
	for (i = 0; i < (Nb*Nk); ++i) {
     c42:	da35      	bge.n	cb0 <__aeabi_dmul+0x164>
     c44:	340c      	adds	r4, #12
     c46:	dc1b      	bgt.n	c80 <__aeabi_dmul+0x134>
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     c48:	f104 0414 	add.w	r4, r4, #20
     c4c:	f1c4 0520 	rsb	r5, r4, #32
     c50:	fa00 f305 	lsl.w	r3, r0, r5
     c54:	fa20 f004 	lsr.w	r0, r0, r4
     c58:	fa01 f205 	lsl.w	r2, r1, r5
     c5c:	ea40 0002 	orr.w	r0, r0, r2
     c60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     c64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     c68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     c6c:	fa21 f604 	lsr.w	r6, r1, r4
     c70:	eb42 0106 	adc.w	r1, r2, r6
     c74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     c78:	bf08      	it	eq
     c7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     c7e:	bd70      	pop	{r4, r5, r6, pc}
     c80:	f1c4 040c 	rsb	r4, r4, #12
     c84:	f1c4 0520 	rsb	r5, r4, #32
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     c88:	fa00 f304 	lsl.w	r3, r0, r4
     c8c:	fa20 f005 	lsr.w	r0, r0, r5
     c90:	fa01 f204 	lsl.w	r2, r1, r4
     c94:	ea40 0002 	orr.w	r0, r0, r2
     c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     c9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     ca0:	f141 0100 	adc.w	r1, r1, #0
     ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     ca8:	bf08      	it	eq
     caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     cae:	bd70      	pop	{r4, r5, r6, pc}
     cb0:	f1c4 0520 	rsb	r5, r4, #32
     cb4:	fa00 f205 	lsl.w	r2, r0, r5
     cb8:	ea4e 0e02 	orr.w	lr, lr, r2
     cbc:	fa20 f304 	lsr.w	r3, r0, r4
     cc0:	fa01 f205 	lsl.w	r2, r1, r5
     cc4:	ea43 0302 	orr.w	r3, r3, r2
	(void)_copy(s, sizeof(t), t, sizeof(t));
     cc8:	fa21 f004 	lsr.w	r0, r1, r4
     ccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     cd0:	fa21 f204 	lsr.w	r2, r1, r4
     cd4:	ea20 0002 	bic.w	r0, r0, r2
		s[i] = inv_sbox[s[i]];
     cd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     ce0:	bf08      	it	eq
	for (i = 0; i < (Nb*Nk); ++i) {
     ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     ce6:	bd70      	pop	{r4, r5, r6, pc}
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     ce8:	f094 0f00 	teq	r4, #0
     cec:	d10f      	bne.n	d0e <__aeabi_dmul+0x1c2>
     cee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     cf2:	0040      	lsls	r0, r0, #1
     cf4:	eb41 0101 	adc.w	r1, r1, r1
     cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     cfc:	bf08      	it	eq
     cfe:	3c01      	subeq	r4, #1
     d00:	d0f7      	beq.n	cf2 <__aeabi_dmul+0x1a6>
     d02:	ea41 0106 	orr.w	r1, r1, r6
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     d06:	f095 0f00 	teq	r5, #0
     d0a:	bf18      	it	ne
     d0c:	4770      	bxne	lr
     d0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     d12:	0052      	lsls	r2, r2, #1
     d14:	eb43 0303 	adc.w	r3, r3, r3
     d18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     d1c:	bf08      	it	eq
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     d1e:	3d01      	subeq	r5, #1
     d20:	d0f7      	beq.n	d12 <__aeabi_dmul+0x1c6>
     d22:	ea43 0306 	orr.w	r3, r3, r6
     d26:	4770      	bx	lr
     d28:	ea94 0f0c 	teq	r4, ip
     d2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     d30:	bf18      	it	ne
     d32:	ea95 0f0c 	teqne	r5, ip
     d36:	d00c      	beq.n	d52 <__aeabi_dmul+0x206>
     d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     d3c:	bf18      	it	ne
     d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d42:	d1d1      	bne.n	ce8 <__aeabi_dmul+0x19c>
     d44:	ea81 0103 	eor.w	r1, r1, r3
     d48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d4c:	f04f 0000 	mov.w	r0, #0
     d50:	bd70      	pop	{r4, r5, r6, pc}
     d52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     d56:	bf06      	itte	eq
     d58:	4610      	moveq	r0, r2
     d5a:	4619      	moveq	r1, r3
     d5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d60:	d019      	beq.n	d96 <__aeabi_dmul+0x24a>
     d62:	ea94 0f0c 	teq	r4, ip
     d66:	d102      	bne.n	d6e <__aeabi_dmul+0x222>
     d68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     d6c:	d113      	bne.n	d96 <__aeabi_dmul+0x24a>
     d6e:	ea95 0f0c 	teq	r5, ip
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     d72:	d105      	bne.n	d80 <__aeabi_dmul+0x234>
     d74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     d78:	bf1c      	itt	ne
     d7a:	4610      	movne	r0, r2
     d7c:	4619      	movne	r1, r3
     d7e:	d10a      	bne.n	d96 <__aeabi_dmul+0x24a>
     d80:	ea81 0103 	eor.w	r1, r1, r3
     d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     d90:	f04f 0000 	mov.w	r0, #0
     d94:	bd70      	pop	{r4, r5, r6, pc}
     d96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     d9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     d9e:	bd70      	pop	{r4, r5, r6, pc}

00000da0 <__aeabi_ddiv>:
     da0:	b570      	push	{r4, r5, r6, lr}
     da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     da6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     daa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     dae:	bf1d      	ittte	ne
     db0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     db4:	ea94 0f0c 	teqne	r4, ip
     db8:	ea95 0f0c 	teqne	r5, ip
     dbc:	f000 f8a7 	bleq	f0e <__aeabi_ddiv+0x16e>

	inv_shift_rows(state);
	inv_sub_bytes(state);
	add_round_key(state, s->words);

	(void)_copy(out, sizeof(state), state, sizeof(state));
     dc0:	eba4 0405 	sub.w	r4, r4, r5
     dc4:	ea81 0e03 	eor.w	lr, r1, r3
     dc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12

	/*zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
     dd0:	f000 8088 	beq.w	ee4 <__aeabi_ddiv+0x144>
     dd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
     dd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000


	return TC_CRYPTO_SUCCESS;
}
     ddc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     de0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
		return TC_CRYPTO_FAIL;
     de4:	ea4f 2202 	mov.w	r2, r2, lsl #8
		return TC_CRYPTO_FAIL;
     de8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
		return TC_CRYPTO_FAIL;
     dec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     df0:	ea4f 2600 	mov.w	r6, r0, lsl #8
     df4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     df8:	429d      	cmp	r5, r3
     dfa:	bf08      	it	eq
     dfc:	4296      	cmpeq	r6, r2
     dfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     e02:	f504 7440 	add.w	r4, r4, #768	; 0x300
     e06:	d202      	bcs.n	e0e <__aeabi_ddiv+0x6e>
     e08:	085b      	lsrs	r3, r3, #1
     e0a:	ea4f 0232 	mov.w	r2, r2, rrx
     e0e:	1ab6      	subs	r6, r6, r2
     e10:	eb65 0503 	sbc.w	r5, r5, r3
     e14:	085b      	lsrs	r3, r3, #1
     e16:	ea4f 0232 	mov.w	r2, r2, rrx
     e1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     e1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     e22:	ebb6 0e02 	subs.w	lr, r6, r2
     e26:	eb75 0e03 	sbcs.w	lr, r5, r3
     e2a:	bf22      	ittt	cs
     e2c:	1ab6      	subcs	r6, r6, r2
     e2e:	4675      	movcs	r5, lr
     e30:	ea40 000c 	orrcs.w	r0, r0, ip
     e34:	085b      	lsrs	r3, r3, #1
     e36:	ea4f 0232 	mov.w	r2, r2, rrx
     e3a:	ebb6 0e02 	subs.w	lr, r6, r2
     e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e42:	bf22      	ittt	cs
     e44:	1ab6      	subcs	r6, r6, r2
     e46:	4675      	movcs	r5, lr
     e48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     e4c:	085b      	lsrs	r3, r3, #1
     e4e:	ea4f 0232 	mov.w	r2, r2, rrx
     e52:	ebb6 0e02 	subs.w	lr, r6, r2
     e56:	eb75 0e03 	sbcs.w	lr, r5, r3
     e5a:	bf22      	ittt	cs
     e5c:	1ab6      	subcs	r6, r6, r2
     e5e:	4675      	movcs	r5, lr
     e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     e64:	085b      	lsrs	r3, r3, #1
     e66:	ea4f 0232 	mov.w	r2, r2, rrx
     e6a:	ebb6 0e02 	subs.w	lr, r6, r2
     e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e72:	bf22      	ittt	cs
     e74:	1ab6      	subcs	r6, r6, r2
     e76:	4675      	movcs	r5, lr
     e78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     e7c:	ea55 0e06 	orrs.w	lr, r5, r6
     e80:	d018      	beq.n	eb4 <__aeabi_ddiv+0x114>
     e82:	ea4f 1505 	mov.w	r5, r5, lsl #4
     e86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     e8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
     e8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     e92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     e96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     e9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     e9e:	d1c0      	bne.n	e22 <__aeabi_ddiv+0x82>
     ea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     ea4:	d10b      	bne.n	ebe <__aeabi_ddiv+0x11e>
     ea6:	ea41 0100 	orr.w	r1, r1, r0
     eaa:	f04f 0000 	mov.w	r0, #0
     eae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     eb2:	e7b6      	b.n	e22 <__aeabi_ddiv+0x82>
     eb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     eb8:	bf04      	itt	eq
     eba:	4301      	orreq	r1, r0
     ebc:	2000      	moveq	r0, #0
     ebe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     ec2:	bf88      	it	hi
     ec4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     ec8:	f63f aeaf 	bhi.w	c2a <__aeabi_dmul+0xde>
     ecc:	ebb5 0c03 	subs.w	ip, r5, r3
     ed0:	bf04      	itt	eq
     ed2:	ebb6 0c02 	subseq.w	ip, r6, r2
     ed6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     eda:	f150 0000 	adcs.w	r0, r0, #0
     ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     ee2:	bd70      	pop	{r4, r5, r6, pc}
     ee4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     ee8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     eec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     ef0:	bfc2      	ittt	gt
     ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
     ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     efa:	bd70      	popgt	{r4, r5, r6, pc}
     efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     f00:	f04f 0e00 	mov.w	lr, #0
     f04:	3c01      	subs	r4, #1
     f06:	e690      	b.n	c2a <__aeabi_dmul+0xde>
     f08:	ea45 0e06 	orr.w	lr, r5, r6
     f0c:	e68d      	b.n	c2a <__aeabi_dmul+0xde>
     f0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     f12:	ea94 0f0c 	teq	r4, ip
     f16:	bf08      	it	eq
     f18:	ea95 0f0c 	teqeq	r5, ip
     f1c:	f43f af3b 	beq.w	d96 <__aeabi_dmul+0x24a>
     f20:	ea94 0f0c 	teq	r4, ip
     f24:	d10a      	bne.n	f3c <__aeabi_ddiv+0x19c>
     f26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     f2a:	f47f af34 	bne.w	d96 <__aeabi_dmul+0x24a>
     f2e:	ea95 0f0c 	teq	r5, ip
     f32:	f47f af25 	bne.w	d80 <__aeabi_dmul+0x234>
     f36:	4610      	mov	r0, r2
     f38:	4619      	mov	r1, r3
     f3a:	e72c      	b.n	d96 <__aeabi_dmul+0x24a>
     f3c:	ea95 0f0c 	teq	r5, ip
     f40:	d106      	bne.n	f50 <__aeabi_ddiv+0x1b0>
     f42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     f46:	f43f aefd 	beq.w	d44 <__aeabi_dmul+0x1f8>
     f4a:	4610      	mov	r0, r2
     f4c:	4619      	mov	r1, r3
     f4e:	e722      	b.n	d96 <__aeabi_dmul+0x24a>
     f50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     f54:	bf18      	it	ne
     f56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     f5a:	f47f aec5 	bne.w	ce8 <__aeabi_dmul+0x19c>
     f5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     f62:	f47f af0d 	bne.w	d80 <__aeabi_dmul+0x234>
     f66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     f6a:	f47f aeeb 	bne.w	d44 <__aeabi_dmul+0x1f8>
     f6e:	e712      	b.n	d96 <__aeabi_dmul+0x24a>

00000f70 <__gedf2>:
     f70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     f74:	e006      	b.n	f84 <__cmpdf2+0x4>
     f76:	bf00      	nop

00000f78 <__ledf2>:
     f78:	f04f 0c01 	mov.w	ip, #1
     f7c:	e002      	b.n	f84 <__cmpdf2+0x4>
     f7e:	bf00      	nop

00000f80 <__cmpdf2>:
     f80:	f04f 0c01 	mov.w	ip, #1
     f84:	f84d cd04 	str.w	ip, [sp, #-4]!
     f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     f90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     f94:	bf18      	it	ne
     f96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     f9a:	d01b      	beq.n	fd4 <__cmpdf2+0x54>
     f9c:	b001      	add	sp, #4
     f9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     fa2:	bf0c      	ite	eq
     fa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     fa8:	ea91 0f03 	teqne	r1, r3
     fac:	bf02      	ittt	eq
     fae:	ea90 0f02 	teqeq	r0, r2
     fb2:	2000      	moveq	r0, #0
     fb4:	4770      	bxeq	lr
     fb6:	f110 0f00 	cmn.w	r0, #0
     fba:	ea91 0f03 	teq	r1, r3
     fbe:	bf58      	it	pl
     fc0:	4299      	cmppl	r1, r3
     fc2:	bf08      	it	eq
     fc4:	4290      	cmpeq	r0, r2
     fc6:	bf2c      	ite	cs
     fc8:	17d8      	asrcs	r0, r3, #31
     fca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     fce:	f040 0001 	orr.w	r0, r0, #1
     fd2:	4770      	bx	lr
     fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fdc:	d102      	bne.n	fe4 <__cmpdf2+0x64>
     fde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     fe2:	d107      	bne.n	ff4 <__cmpdf2+0x74>
     fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fec:	d1d6      	bne.n	f9c <__cmpdf2+0x1c>
     fee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     ff2:	d0d3      	beq.n	f9c <__cmpdf2+0x1c>
     ff4:	f85d 0b04 	ldr.w	r0, [sp], #4
     ff8:	4770      	bx	lr
     ffa:	bf00      	nop

00000ffc <__aeabi_cdrcmple>:
     ffc:	4684      	mov	ip, r0
     ffe:	4610      	mov	r0, r2
    1000:	4662      	mov	r2, ip
    1002:	468c      	mov	ip, r1
    1004:	4619      	mov	r1, r3
    1006:	4663      	mov	r3, ip
    1008:	e000      	b.n	100c <__aeabi_cdcmpeq>
    100a:	bf00      	nop

0000100c <__aeabi_cdcmpeq>:
    100c:	b501      	push	{r0, lr}
    100e:	f7ff ffb7 	bl	f80 <__cmpdf2>
    1012:	2800      	cmp	r0, #0
    1014:	bf48      	it	mi
    1016:	f110 0f00 	cmnmi.w	r0, #0
    101a:	bd01      	pop	{r0, pc}

0000101c <__aeabi_dcmpeq>:
    101c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1020:	f7ff fff4 	bl	100c <__aeabi_cdcmpeq>
    1024:	bf0c      	ite	eq
    1026:	2001      	moveq	r0, #1
    1028:	2000      	movne	r0, #0
    102a:	f85d fb08 	ldr.w	pc, [sp], #8
    102e:	bf00      	nop

00001030 <__aeabi_dcmplt>:
    1030:	f84d ed08 	str.w	lr, [sp, #-8]!
    1034:	f7ff ffea 	bl	100c <__aeabi_cdcmpeq>
    1038:	bf34      	ite	cc
    103a:	2001      	movcc	r0, #1
    103c:	2000      	movcs	r0, #0
    103e:	f85d fb08 	ldr.w	pc, [sp], #8
    1042:	bf00      	nop

00001044 <__aeabi_dcmple>:
    1044:	f84d ed08 	str.w	lr, [sp, #-8]!
    1048:	f7ff ffe0 	bl	100c <__aeabi_cdcmpeq>
    104c:	bf94      	ite	ls
    104e:	2001      	movls	r0, #1
    1050:	2000      	movhi	r0, #0
    1052:	f85d fb08 	ldr.w	pc, [sp], #8
    1056:	bf00      	nop

00001058 <__aeabi_dcmpge>:
    1058:	f84d ed08 	str.w	lr, [sp, #-8]!
    105c:	f7ff ffce 	bl	ffc <__aeabi_cdrcmple>
    1060:	bf94      	ite	ls
    1062:	2001      	movls	r0, #1
    1064:	2000      	movhi	r0, #0
    1066:	f85d fb08 	ldr.w	pc, [sp], #8
    106a:	bf00      	nop

0000106c <__aeabi_dcmpgt>:
    106c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1070:	f7ff ffc4 	bl	ffc <__aeabi_cdrcmple>
    1074:	bf34      	ite	cc
    1076:	2001      	movcc	r0, #1
    1078:	2000      	movcs	r0, #0
    107a:	f85d fb08 	ldr.w	pc, [sp], #8
    107e:	bf00      	nop

00001080 <__aeabi_dcmpun>:
    1080:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1088:	d102      	bne.n	1090 <__aeabi_dcmpun+0x10>
    108a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    108e:	d10a      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    1090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1098:	d102      	bne.n	10a0 <__aeabi_dcmpun+0x20>
    109a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    109e:	d102      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    10a0:	f04f 0000 	mov.w	r0, #0
    10a4:	4770      	bx	lr
    10a6:	f04f 0001 	mov.w	r0, #1
    10aa:	4770      	bx	lr

000010ac <__aeabi_d2iz>:
    10ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
    10b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    10b4:	d215      	bcs.n	10e2 <__aeabi_d2iz+0x36>
    10b6:	d511      	bpl.n	10dc <__aeabi_d2iz+0x30>
    10b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    10bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    10c0:	d912      	bls.n	10e8 <__aeabi_d2iz+0x3c>
    10c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    10c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    10ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    10d2:	fa23 f002 	lsr.w	r0, r3, r2
    10d6:	bf18      	it	ne
    10d8:	4240      	negne	r0, r0
    10da:	4770      	bx	lr
    10dc:	f04f 0000 	mov.w	r0, #0
    10e0:	4770      	bx	lr
    10e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    10e6:	d105      	bne.n	10f4 <__aeabi_d2iz+0x48>
    10e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    10ec:	bf08      	it	eq
    10ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10f2:	4770      	bx	lr
    10f4:	f04f 0000 	mov.w	r0, #0
    10f8:	4770      	bx	lr
    10fa:	bf00      	nop

000010fc <__aeabi_uldivmod>:
    10fc:	b953      	cbnz	r3, 1114 <__aeabi_uldivmod+0x18>
    10fe:	b94a      	cbnz	r2, 1114 <__aeabi_uldivmod+0x18>
    1100:	2900      	cmp	r1, #0
    1102:	bf08      	it	eq
    1104:	2800      	cmpeq	r0, #0
    1106:	bf1c      	itt	ne
    1108:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    110c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1110:	f000 b98e 	b.w	1430 <__aeabi_idiv0>
    1114:	f1ad 0c08 	sub.w	ip, sp, #8
    1118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    111c:	f000 f81a 	bl	1154 <__udivmoddi4>
    1120:	f8dd e004 	ldr.w	lr, [sp, #4]
    1124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1128:	b004      	add	sp, #16
    112a:	4770      	bx	lr

0000112c <__popcountsi2>:
    112c:	0843      	lsrs	r3, r0, #1
    112e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    1132:	1ac0      	subs	r0, r0, r3
    1134:	0883      	lsrs	r3, r0, #2
    1136:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
    113a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    113e:	4418      	add	r0, r3
    1140:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    1144:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    1148:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    114c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
    1150:	0e00      	lsrs	r0, r0, #24
    1152:	4770      	bx	lr

00001154 <__udivmoddi4>:
    1154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1158:	468c      	mov	ip, r1
    115a:	460d      	mov	r5, r1
    115c:	4604      	mov	r4, r0
    115e:	9e08      	ldr	r6, [sp, #32]
    1160:	2b00      	cmp	r3, #0
    1162:	d151      	bne.n	1208 <__udivmoddi4+0xb4>
    1164:	428a      	cmp	r2, r1
    1166:	4617      	mov	r7, r2
    1168:	d96d      	bls.n	1246 <__udivmoddi4+0xf2>
    116a:	fab2 fe82 	clz	lr, r2
    116e:	f1be 0f00 	cmp.w	lr, #0
    1172:	d00b      	beq.n	118c <__udivmoddi4+0x38>
    1174:	f1ce 0c20 	rsb	ip, lr, #32
    1178:	fa01 f50e 	lsl.w	r5, r1, lr
    117c:	fa20 fc0c 	lsr.w	ip, r0, ip
    1180:	fa02 f70e 	lsl.w	r7, r2, lr
    1184:	ea4c 0c05 	orr.w	ip, ip, r5
    1188:	fa00 f40e 	lsl.w	r4, r0, lr
    118c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    1190:	0c25      	lsrs	r5, r4, #16
    1192:	fbbc f8fa 	udiv	r8, ip, sl
    1196:	fa1f f987 	uxth.w	r9, r7
    119a:	fb0a cc18 	mls	ip, sl, r8, ip
    119e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    11a2:	fb08 f309 	mul.w	r3, r8, r9
    11a6:	42ab      	cmp	r3, r5
    11a8:	d90a      	bls.n	11c0 <__udivmoddi4+0x6c>
    11aa:	19ed      	adds	r5, r5, r7
    11ac:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    11b0:	f080 8123 	bcs.w	13fa <__udivmoddi4+0x2a6>
    11b4:	42ab      	cmp	r3, r5
    11b6:	f240 8120 	bls.w	13fa <__udivmoddi4+0x2a6>
    11ba:	f1a8 0802 	sub.w	r8, r8, #2
    11be:	443d      	add	r5, r7
    11c0:	1aed      	subs	r5, r5, r3
    11c2:	b2a4      	uxth	r4, r4
    11c4:	fbb5 f0fa 	udiv	r0, r5, sl
    11c8:	fb0a 5510 	mls	r5, sl, r0, r5
    11cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    11d0:	fb00 f909 	mul.w	r9, r0, r9
    11d4:	45a1      	cmp	r9, r4
    11d6:	d909      	bls.n	11ec <__udivmoddi4+0x98>
    11d8:	19e4      	adds	r4, r4, r7
    11da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    11de:	f080 810a 	bcs.w	13f6 <__udivmoddi4+0x2a2>
    11e2:	45a1      	cmp	r9, r4
    11e4:	f240 8107 	bls.w	13f6 <__udivmoddi4+0x2a2>
    11e8:	3802      	subs	r0, #2
    11ea:	443c      	add	r4, r7
    11ec:	eba4 0409 	sub.w	r4, r4, r9
    11f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    11f4:	2100      	movs	r1, #0
    11f6:	2e00      	cmp	r6, #0
    11f8:	d061      	beq.n	12be <__udivmoddi4+0x16a>
    11fa:	fa24 f40e 	lsr.w	r4, r4, lr
    11fe:	2300      	movs	r3, #0
    1200:	6034      	str	r4, [r6, #0]
    1202:	6073      	str	r3, [r6, #4]
    1204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1208:	428b      	cmp	r3, r1
    120a:	d907      	bls.n	121c <__udivmoddi4+0xc8>
    120c:	2e00      	cmp	r6, #0
    120e:	d054      	beq.n	12ba <__udivmoddi4+0x166>
    1210:	2100      	movs	r1, #0
    1212:	e886 0021 	stmia.w	r6, {r0, r5}
    1216:	4608      	mov	r0, r1
    1218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    121c:	fab3 f183 	clz	r1, r3
    1220:	2900      	cmp	r1, #0
    1222:	f040 808e 	bne.w	1342 <__udivmoddi4+0x1ee>
    1226:	42ab      	cmp	r3, r5
    1228:	d302      	bcc.n	1230 <__udivmoddi4+0xdc>
    122a:	4282      	cmp	r2, r0
    122c:	f200 80fa 	bhi.w	1424 <__udivmoddi4+0x2d0>
    1230:	1a84      	subs	r4, r0, r2
    1232:	eb65 0503 	sbc.w	r5, r5, r3
    1236:	2001      	movs	r0, #1
    1238:	46ac      	mov	ip, r5
    123a:	2e00      	cmp	r6, #0
    123c:	d03f      	beq.n	12be <__udivmoddi4+0x16a>
    123e:	e886 1010 	stmia.w	r6, {r4, ip}
    1242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1246:	b912      	cbnz	r2, 124e <__udivmoddi4+0xfa>
    1248:	2701      	movs	r7, #1
    124a:	fbb7 f7f2 	udiv	r7, r7, r2
    124e:	fab7 fe87 	clz	lr, r7
    1252:	f1be 0f00 	cmp.w	lr, #0
    1256:	d134      	bne.n	12c2 <__udivmoddi4+0x16e>
    1258:	1beb      	subs	r3, r5, r7
    125a:	0c3a      	lsrs	r2, r7, #16
    125c:	fa1f fc87 	uxth.w	ip, r7
    1260:	2101      	movs	r1, #1
    1262:	fbb3 f8f2 	udiv	r8, r3, r2
    1266:	0c25      	lsrs	r5, r4, #16
    1268:	fb02 3318 	mls	r3, r2, r8, r3
    126c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1270:	fb0c f308 	mul.w	r3, ip, r8
    1274:	42ab      	cmp	r3, r5
    1276:	d907      	bls.n	1288 <__udivmoddi4+0x134>
    1278:	19ed      	adds	r5, r5, r7
    127a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    127e:	d202      	bcs.n	1286 <__udivmoddi4+0x132>
    1280:	42ab      	cmp	r3, r5
    1282:	f200 80d1 	bhi.w	1428 <__udivmoddi4+0x2d4>
    1286:	4680      	mov	r8, r0
    1288:	1aed      	subs	r5, r5, r3
    128a:	b2a3      	uxth	r3, r4
    128c:	fbb5 f0f2 	udiv	r0, r5, r2
    1290:	fb02 5510 	mls	r5, r2, r0, r5
    1294:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1298:	fb0c fc00 	mul.w	ip, ip, r0
    129c:	45a4      	cmp	ip, r4
    129e:	d907      	bls.n	12b0 <__udivmoddi4+0x15c>
    12a0:	19e4      	adds	r4, r4, r7
    12a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    12a6:	d202      	bcs.n	12ae <__udivmoddi4+0x15a>
    12a8:	45a4      	cmp	ip, r4
    12aa:	f200 80b8 	bhi.w	141e <__udivmoddi4+0x2ca>
    12ae:	4618      	mov	r0, r3
    12b0:	eba4 040c 	sub.w	r4, r4, ip
    12b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    12b8:	e79d      	b.n	11f6 <__udivmoddi4+0xa2>
    12ba:	4631      	mov	r1, r6
    12bc:	4630      	mov	r0, r6
    12be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12c2:	f1ce 0420 	rsb	r4, lr, #32
    12c6:	fa05 f30e 	lsl.w	r3, r5, lr
    12ca:	fa07 f70e 	lsl.w	r7, r7, lr
    12ce:	fa20 f804 	lsr.w	r8, r0, r4
    12d2:	0c3a      	lsrs	r2, r7, #16
    12d4:	fa25 f404 	lsr.w	r4, r5, r4
    12d8:	ea48 0803 	orr.w	r8, r8, r3
    12dc:	fbb4 f1f2 	udiv	r1, r4, r2
    12e0:	ea4f 4518 	mov.w	r5, r8, lsr #16
    12e4:	fb02 4411 	mls	r4, r2, r1, r4
    12e8:	fa1f fc87 	uxth.w	ip, r7
    12ec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    12f0:	fb01 f30c 	mul.w	r3, r1, ip
    12f4:	42ab      	cmp	r3, r5
    12f6:	fa00 f40e 	lsl.w	r4, r0, lr
    12fa:	d909      	bls.n	1310 <__udivmoddi4+0x1bc>
    12fc:	19ed      	adds	r5, r5, r7
    12fe:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
    1302:	f080 808a 	bcs.w	141a <__udivmoddi4+0x2c6>
    1306:	42ab      	cmp	r3, r5
    1308:	f240 8087 	bls.w	141a <__udivmoddi4+0x2c6>
    130c:	3902      	subs	r1, #2
    130e:	443d      	add	r5, r7
    1310:	1aeb      	subs	r3, r5, r3
    1312:	fa1f f588 	uxth.w	r5, r8
    1316:	fbb3 f0f2 	udiv	r0, r3, r2
    131a:	fb02 3310 	mls	r3, r2, r0, r3
    131e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1322:	fb00 f30c 	mul.w	r3, r0, ip
    1326:	42ab      	cmp	r3, r5
    1328:	d907      	bls.n	133a <__udivmoddi4+0x1e6>
    132a:	19ed      	adds	r5, r5, r7
    132c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    1330:	d26f      	bcs.n	1412 <__udivmoddi4+0x2be>
    1332:	42ab      	cmp	r3, r5
    1334:	d96d      	bls.n	1412 <__udivmoddi4+0x2be>
    1336:	3802      	subs	r0, #2
    1338:	443d      	add	r5, r7
    133a:	1aeb      	subs	r3, r5, r3
    133c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1340:	e78f      	b.n	1262 <__udivmoddi4+0x10e>
    1342:	f1c1 0720 	rsb	r7, r1, #32
    1346:	fa22 f807 	lsr.w	r8, r2, r7
    134a:	408b      	lsls	r3, r1
    134c:	fa05 f401 	lsl.w	r4, r5, r1
    1350:	ea48 0303 	orr.w	r3, r8, r3
    1354:	fa20 fe07 	lsr.w	lr, r0, r7
    1358:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    135c:	40fd      	lsrs	r5, r7
    135e:	ea4e 0e04 	orr.w	lr, lr, r4
    1362:	fbb5 f9fc 	udiv	r9, r5, ip
    1366:	ea4f 441e 	mov.w	r4, lr, lsr #16
    136a:	fb0c 5519 	mls	r5, ip, r9, r5
    136e:	fa1f f883 	uxth.w	r8, r3
    1372:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1376:	fb09 f408 	mul.w	r4, r9, r8
    137a:	42ac      	cmp	r4, r5
    137c:	fa02 f201 	lsl.w	r2, r2, r1
    1380:	fa00 fa01 	lsl.w	sl, r0, r1
    1384:	d908      	bls.n	1398 <__udivmoddi4+0x244>
    1386:	18ed      	adds	r5, r5, r3
    1388:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    138c:	d243      	bcs.n	1416 <__udivmoddi4+0x2c2>
    138e:	42ac      	cmp	r4, r5
    1390:	d941      	bls.n	1416 <__udivmoddi4+0x2c2>
    1392:	f1a9 0902 	sub.w	r9, r9, #2
    1396:	441d      	add	r5, r3
    1398:	1b2d      	subs	r5, r5, r4
    139a:	fa1f fe8e 	uxth.w	lr, lr
    139e:	fbb5 f0fc 	udiv	r0, r5, ip
    13a2:	fb0c 5510 	mls	r5, ip, r0, r5
    13a6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    13aa:	fb00 f808 	mul.w	r8, r0, r8
    13ae:	45a0      	cmp	r8, r4
    13b0:	d907      	bls.n	13c2 <__udivmoddi4+0x26e>
    13b2:	18e4      	adds	r4, r4, r3
    13b4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    13b8:	d229      	bcs.n	140e <__udivmoddi4+0x2ba>
    13ba:	45a0      	cmp	r8, r4
    13bc:	d927      	bls.n	140e <__udivmoddi4+0x2ba>
    13be:	3802      	subs	r0, #2
    13c0:	441c      	add	r4, r3
    13c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    13c6:	eba4 0408 	sub.w	r4, r4, r8
    13ca:	fba0 8902 	umull	r8, r9, r0, r2
    13ce:	454c      	cmp	r4, r9
    13d0:	46c6      	mov	lr, r8
    13d2:	464d      	mov	r5, r9
    13d4:	d315      	bcc.n	1402 <__udivmoddi4+0x2ae>
    13d6:	d012      	beq.n	13fe <__udivmoddi4+0x2aa>
    13d8:	b156      	cbz	r6, 13f0 <__udivmoddi4+0x29c>
    13da:	ebba 030e 	subs.w	r3, sl, lr
    13de:	eb64 0405 	sbc.w	r4, r4, r5
    13e2:	fa04 f707 	lsl.w	r7, r4, r7
    13e6:	40cb      	lsrs	r3, r1
    13e8:	431f      	orrs	r7, r3
    13ea:	40cc      	lsrs	r4, r1
    13ec:	6037      	str	r7, [r6, #0]
    13ee:	6074      	str	r4, [r6, #4]
    13f0:	2100      	movs	r1, #0
    13f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13f6:	4618      	mov	r0, r3
    13f8:	e6f8      	b.n	11ec <__udivmoddi4+0x98>
    13fa:	4690      	mov	r8, r2
    13fc:	e6e0      	b.n	11c0 <__udivmoddi4+0x6c>
    13fe:	45c2      	cmp	sl, r8
    1400:	d2ea      	bcs.n	13d8 <__udivmoddi4+0x284>
    1402:	ebb8 0e02 	subs.w	lr, r8, r2
    1406:	eb69 0503 	sbc.w	r5, r9, r3
    140a:	3801      	subs	r0, #1
    140c:	e7e4      	b.n	13d8 <__udivmoddi4+0x284>
    140e:	4628      	mov	r0, r5
    1410:	e7d7      	b.n	13c2 <__udivmoddi4+0x26e>
    1412:	4640      	mov	r0, r8
    1414:	e791      	b.n	133a <__udivmoddi4+0x1e6>
    1416:	4681      	mov	r9, r0
    1418:	e7be      	b.n	1398 <__udivmoddi4+0x244>
    141a:	4601      	mov	r1, r0
    141c:	e778      	b.n	1310 <__udivmoddi4+0x1bc>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e745      	b.n	12b0 <__udivmoddi4+0x15c>
    1424:	4608      	mov	r0, r1
    1426:	e708      	b.n	123a <__udivmoddi4+0xe6>
    1428:	f1a8 0802 	sub.w	r8, r8, #2
    142c:	443d      	add	r5, r7
    142e:	e72b      	b.n	1288 <__udivmoddi4+0x134>

00001430 <__aeabi_idiv0>:
    1430:	4770      	bx	lr
    1432:	bf00      	nop

00001434 <publish_cb>:
	printk("\n");
}

static int publish_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_id,
		      enum mqtt_packet type)
{
    1434:	b530      	push	{r4, r5, lr}
    1436:	b083      	sub	sp, #12
    1438:	4605      	mov	r5, r0
	const char *str;
	int rc = 0;

	client_ctx = CONTAINER_OF(mqtt_ctx, struct mqtt_client_ctx, mqtt_ctx);

	switch (type) {
    143a:	2a05      	cmp	r2, #5
    143c:	d01b      	beq.n	1476 <publish_cb+0x42>
    143e:	2a07      	cmp	r2, #7
    1440:	d01c      	beq.n	147c <publish_cb+0x48>
    1442:	2a04      	cmp	r2, #4
    1444:	d003      	beq.n	144e <publish_cb+0x1a>
		break;
	case MQTT_PUBREC:
		str = "MQTT_PUBREC";
		break;
	default:
		rc = -EINVAL;
    1446:	f06f 0415 	mvn.w	r4, #21
		str = "Invalid MQTT packet";
    144a:	4b0e      	ldr	r3, [pc, #56]	; (1484 <publish_cb+0x50>)
    144c:	e001      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    144e:	2400      	movs	r4, #0
		str = "MQTT_PUBACK";
    1450:	4b0d      	ldr	r3, [pc, #52]	; (1488 <publish_cb+0x54>)
	}

	printk("[%s:%d] <%s> packet id: %u", __func__, __LINE__, str, pkt_id);
    1452:	9100      	str	r1, [sp, #0]
    1454:	22d4      	movs	r2, #212	; 0xd4
    1456:	490d      	ldr	r1, [pc, #52]	; (148c <publish_cb+0x58>)
    1458:	480d      	ldr	r0, [pc, #52]	; (1490 <publish_cb+0x5c>)
    145a:	f001 fdad 	bl	2fb8 <printk>

	if (client_ctx->publish_data) {
    145e:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
    1462:	b111      	cbz	r1, 146a <publish_cb+0x36>
		printk(", user_data: %s",
    1464:	480b      	ldr	r0, [pc, #44]	; (1494 <publish_cb+0x60>)
    1466:	f001 fda7 	bl	2fb8 <printk>
		       (const char *)client_ctx->publish_data);
	}

	printk("\n");
    146a:	480b      	ldr	r0, [pc, #44]	; (1498 <publish_cb+0x64>)
    146c:	f001 fda4 	bl	2fb8 <printk>

	return rc;
}
    1470:	4620      	mov	r0, r4
    1472:	b003      	add	sp, #12
    1474:	bd30      	pop	{r4, r5, pc}
	int rc = 0;
    1476:	2400      	movs	r4, #0
		str = "MQTT_PUBREC";
    1478:	4b08      	ldr	r3, [pc, #32]	; (149c <publish_cb+0x68>)
		break;
    147a:	e7ea      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    147c:	2400      	movs	r4, #0
		str = "MQTT_PUBCOMP";
    147e:	4b08      	ldr	r3, [pc, #32]	; (14a0 <publish_cb+0x6c>)
    1480:	e7e7      	b.n	1452 <publish_cb+0x1e>
    1482:	bf00      	nop
    1484:	0002e8b8 	.word	0x0002e8b8
    1488:	0002e890 	.word	0x0002e890
    148c:	0002e7a8 	.word	0x0002e7a8
    1490:	0002e8cc 	.word	0x0002e8cc
    1494:	0002e8e8 	.word	0x0002e8e8
    1498:	000323a0 	.word	0x000323a0
    149c:	0002e8ac 	.word	0x0002e8ac
    14a0:	0002e89c 	.word	0x0002e89c

000014a4 <malformed_cb>:

static void malformed_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_type)
{
    14a4:	b508      	push	{r3, lr}
	printk("[%s:%d] pkt_type: %u\n", __func__, __LINE__, pkt_type);
    14a6:	460b      	mov	r3, r1
    14a8:	22e2      	movs	r2, #226	; 0xe2
    14aa:	4902      	ldr	r1, [pc, #8]	; (14b4 <malformed_cb+0x10>)
    14ac:	4802      	ldr	r0, [pc, #8]	; (14b8 <malformed_cb+0x14>)
    14ae:	f001 fd83 	bl	2fb8 <printk>
    14b2:	bd08      	pop	{r3, pc}
    14b4:	0002e7b4 	.word	0x0002e7b4
    14b8:	0002e828 	.word	0x0002e828

000014bc <disconnect_cb>:
{
    14bc:	b510      	push	{r4, lr}
    14be:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    14c0:	22b2      	movs	r2, #178	; 0xb2
    14c2:	4907      	ldr	r1, [pc, #28]	; (14e0 <disconnect_cb+0x24>)
    14c4:	4807      	ldr	r0, [pc, #28]	; (14e4 <disconnect_cb+0x28>)
    14c6:	f001 fd77 	bl	2fb8 <printk>
	if (client_ctx->disconnect_data) {
    14ca:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    14ce:	b111      	cbz	r1, 14d6 <disconnect_cb+0x1a>
		printk(" user_data: %s",
    14d0:	4805      	ldr	r0, [pc, #20]	; (14e8 <disconnect_cb+0x2c>)
    14d2:	f001 fd71 	bl	2fb8 <printk>
	printk("\n");
    14d6:	4805      	ldr	r0, [pc, #20]	; (14ec <disconnect_cb+0x30>)
    14d8:	f001 fd6e 	bl	2fb8 <printk>
    14dc:	bd10      	pop	{r4, pc}
    14de:	bf00      	nop
    14e0:	0002e798 	.word	0x0002e798
    14e4:	0002e7d8 	.word	0x0002e7d8
    14e8:	0002e7e0 	.word	0x0002e7e0
    14ec:	000323a0 	.word	0x000323a0

000014f0 <connect_cb>:
{
    14f0:	b510      	push	{r4, lr}
    14f2:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    14f4:	22a2      	movs	r2, #162	; 0xa2
    14f6:	4907      	ldr	r1, [pc, #28]	; (1514 <connect_cb+0x24>)
    14f8:	4807      	ldr	r0, [pc, #28]	; (1518 <connect_cb+0x28>)
    14fa:	f001 fd5d 	bl	2fb8 <printk>
	if (client_ctx->connect_data) {
    14fe:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    1502:	b111      	cbz	r1, 150a <connect_cb+0x1a>
		printk(" user_data: %s",
    1504:	4805      	ldr	r0, [pc, #20]	; (151c <connect_cb+0x2c>)
    1506:	f001 fd57 	bl	2fb8 <printk>
	printk("\n");
    150a:	4805      	ldr	r0, [pc, #20]	; (1520 <connect_cb+0x30>)
    150c:	f001 fd54 	bl	2fb8 <printk>
    1510:	bd10      	pop	{r4, pc}
    1512:	bf00      	nop
    1514:	0002e78c 	.word	0x0002e78c
    1518:	0002e7d8 	.word	0x0002e7d8
    151c:	0002e7e0 	.word	0x0002e7e0
    1520:	000323a0 	.word	0x000323a0

00001524 <get_message_payload>:
}

static char *get_message_payload(enum mqtt_qos qos) 
{
    1524:	b510      	push	{r4, lr}
	static char pl[PAYLOAD_SIZE];
	snprintf(pl, sizeof(pl), "%s\n", payload);
    1526:	4c04      	ldr	r4, [pc, #16]	; (1538 <get_message_payload+0x14>)
    1528:	4623      	mov	r3, r4
    152a:	4a04      	ldr	r2, [pc, #16]	; (153c <get_message_payload+0x18>)
    152c:	217c      	movs	r1, #124	; 0x7c
    152e:	4804      	ldr	r0, [pc, #16]	; (1540 <get_message_payload+0x1c>)
    1530:	f029 fa7e 	bl	2aa30 <snprintf>
	return payload;
}
    1534:	4620      	mov	r0, r4
    1536:	bd10      	pop	{r4, pc}
    1538:	200001a0 	.word	0x200001a0
    153c:	00031e48 	.word	0x00031e48
    1540:	2000021c 	.word	0x2000021c

00001544 <rand_string>:
{
    1544:	b570      	push	{r4, r5, r6, lr}
    1546:	b092      	sub	sp, #72	; 0x48
    1548:	4606      	mov	r6, r0
    154a:	460d      	mov	r5, r1
    const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,.-#'?!";
    154c:	2246      	movs	r2, #70	; 0x46
    154e:	4911      	ldr	r1, [pc, #68]	; (1594 <rand_string+0x50>)
    1550:	4668      	mov	r0, sp
    1552:	f7fe feb5 	bl	2c0 <memcpy>
    if (size) {
    1556:	b1cd      	cbz	r5, 158c <rand_string+0x48>
        --size;
    1558:	3d01      	subs	r5, #1
        for (size_t n = 0; n < size; n++) {
    155a:	2400      	movs	r4, #0
    155c:	e012      	b.n	1584 <rand_string+0x40>
            int key = rand() % (int) (sizeof charset - 1);
    155e:	f029 fa35 	bl	2a9cc <rand>
    1562:	4a0d      	ldr	r2, [pc, #52]	; (1598 <rand_string+0x54>)
    1564:	fb82 3200 	smull	r3, r2, r2, r0
    1568:	17c3      	asrs	r3, r0, #31
    156a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
    156e:	eb03 1203 	add.w	r2, r3, r3, lsl #4
    1572:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1576:	1ac3      	subs	r3, r0, r3
            str[n] = charset[key];
    1578:	aa12      	add	r2, sp, #72	; 0x48
    157a:	4413      	add	r3, r2
    157c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
    1580:	5533      	strb	r3, [r6, r4]
        for (size_t n = 0; n < size; n++) {
    1582:	3401      	adds	r4, #1
    1584:	42ac      	cmp	r4, r5
    1586:	d3ea      	bcc.n	155e <rand_string+0x1a>
        str[size] = '\0';
    1588:	2300      	movs	r3, #0
    158a:	5573      	strb	r3, [r6, r5]
}
    158c:	4630      	mov	r0, r6
    158e:	b012      	add	sp, #72	; 0x48
    1590:	bd70      	pop	{r4, r5, r6, pc}
    1592:	bf00      	nop
    1594:	0002e9b8 	.word	0x0002e9b8
    1598:	76b981db 	.word	0x76b981db

0000159c <encrypt_aes_ctr>:
static void encrypt_aes_ctr(unsigned char* nonce) {
    159c:	b510      	push	{r4, lr}
    159e:	b0d8      	sub	sp, #352	; 0x160
    15a0:	4604      	mov	r4, r0
    size_t nc_offset = 0;
    15a2:	2300      	movs	r3, #0
    15a4:	9357      	str	r3, [sp, #348]	; 0x15c
    mbedtls_aes_init( &ctr );
    15a6:	a804      	add	r0, sp, #16
    15a8:	f002 fb05 	bl	3bb6 <mbedtls_aes_init>
	mbedtls_aes_setkey_enc( &ctr, keys[2], 256 );
    15ac:	f44f 7280 	mov.w	r2, #256	; 0x100
    15b0:	4b0a      	ldr	r3, [pc, #40]	; (15dc <encrypt_aes_ctr+0x40>)
    15b2:	6899      	ldr	r1, [r3, #8]
    15b4:	a804      	add	r0, sp, #16
    15b6:	f002 fb0d 	bl	3bd4 <mbedtls_aes_setkey_enc>
	mbedtls_aes_crypt_ctr( &ctr, 52, &nc_offset, nonce, stream_block, "bet you cant encrypt me you piece of shit give it up", encrypted_msg );
    15ba:	4b09      	ldr	r3, [pc, #36]	; (15e0 <encrypt_aes_ctr+0x44>)
    15bc:	9302      	str	r3, [sp, #8]
    15be:	4b09      	ldr	r3, [pc, #36]	; (15e4 <encrypt_aes_ctr+0x48>)
    15c0:	9301      	str	r3, [sp, #4]
    15c2:	ab4a      	add	r3, sp, #296	; 0x128
    15c4:	9300      	str	r3, [sp, #0]
    15c6:	4623      	mov	r3, r4
    15c8:	aa57      	add	r2, sp, #348	; 0x15c
    15ca:	2134      	movs	r1, #52	; 0x34
    15cc:	a804      	add	r0, sp, #16
    15ce:	f002 ffb3 	bl	4538 <mbedtls_aes_crypt_ctr>
	mbedtls_aes_free( &ctr );
    15d2:	a804      	add	r0, sp, #16
    15d4:	f002 faf6 	bl	3bc4 <mbedtls_aes_free>
}
    15d8:	b058      	add	sp, #352	; 0x160
    15da:	bd10      	pop	{r4, pc}
    15dc:	2000b968 	.word	0x2000b968
    15e0:	2000000c 	.word	0x2000000c
    15e4:	0002e7f0 	.word	0x0002e7f0

000015e8 <prepare_msg>:

static void prepare_msg(struct mqtt_publish_msg *pub_msg,
				     enum mqtt_qos qos)
{
    15e8:	b538      	push	{r3, r4, r5, lr}
    15ea:	4604      	mov	r4, r0
    15ec:	460d      	mov	r5, r1
	/* MQTT message payload may be anything, we use C strings */
	pub_msg->msg = get_message_payload(qos);
    15ee:	4608      	mov	r0, r1
    15f0:	f7ff ff98 	bl	1524 <get_message_payload>
    15f4:	6120      	str	r0, [r4, #16]
	/* Payload's length */
	pub_msg->msg_len = strlen(pub_msg->msg);
    15f6:	f7ff f883 	bl	700 <strlen>
    15fa:	82a0      	strh	r0, [r4, #20]
	/* MQTT Quality of Service */
	pub_msg->qos = qos;
    15fc:	7065      	strb	r5, [r4, #1]
	/* Message's topic */
	pub_msg->topic = TOPIC;
    15fe:	4804      	ldr	r0, [pc, #16]	; (1610 <prepare_msg+0x28>)
    1600:	60a0      	str	r0, [r4, #8]
	pub_msg->topic_len = strlen(pub_msg->topic);
    1602:	f7ff f87d 	bl	700 <strlen>
    1606:	81a0      	strh	r0, [r4, #12]
	/* Packet Identifier, always use different values */
	pub_msg->pkt_id = sys_rand32_get();
    1608:	f000 fd3c 	bl	2084 <sys_rand32_get>
    160c:	80a0      	strh	r0, [r4, #4]
    160e:	bd38      	pop	{r3, r4, r5, pc}
    1610:	0002e958 	.word	0x0002e958

00001614 <message_thread>:
{
    1614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1618:	b08c      	sub	sp, #48	; 0x30
    161a:	af02      	add	r7, sp, #8
    161c:	e041      	b.n	16a2 <message_thread+0x8e>
				fragment_offset = 0xff;
    161e:	23ff      	movs	r3, #255	; 0xff
    1620:	e019      	b.n	1656 <message_thread+0x42>
		 	PRINT_RESULT("mqtt_tx_publish", rc);
    1622:	4b42      	ldr	r3, [pc, #264]	; (172c <message_thread+0x118>)
    1624:	9301      	str	r3, [sp, #4]
    1626:	9600      	str	r6, [sp, #0]
    1628:	4b41      	ldr	r3, [pc, #260]	; (1730 <message_thread+0x11c>)
    162a:	2288      	movs	r2, #136	; 0x88
    162c:	4941      	ldr	r1, [pc, #260]	; (1734 <message_thread+0x120>)
    162e:	4842      	ldr	r0, [pc, #264]	; (1738 <message_thread+0x124>)
    1630:	f001 fcc2 	bl	2fb8 <printk>
		 	if (rc < 0) 
    1634:	2e00      	cmp	r6, #0
    1636:	db29      	blt.n	168c <message_thread+0x78>

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    163c:	f027 fd7a 	bl	29134 <_impl_k_sleep>
		for (i = 1; i <= num_fragments; i++) {
    1640:	4a3e      	ldr	r2, [pc, #248]	; (173c <message_thread+0x128>)
    1642:	6813      	ldr	r3, [r2, #0]
    1644:	3301      	adds	r3, #1
    1646:	6013      	str	r3, [r2, #0]
    1648:	4b3c      	ldr	r3, [pc, #240]	; (173c <message_thread+0x128>)
    164a:	681a      	ldr	r2, [r3, #0]
    164c:	4294      	cmp	r4, r2
    164e:	db1d      	blt.n	168c <message_thread+0x78>
			char fragment_offset = (char) i;
    1650:	b2d3      	uxtb	r3, r2
			if (i == num_fragments)
    1652:	4294      	cmp	r4, r2
    1654:	d0e3      	beq.n	161e <message_thread+0xa>
			snprintf(payload, sizeof(payload), "%c%s", fragment_offset, tmp + ((PAYLOAD_SIZE-2)*(i-1)));
    1656:	3a01      	subs	r2, #1
    1658:	217a      	movs	r1, #122	; 0x7a
    165a:	fb01 5202 	mla	r2, r1, r2, r5
    165e:	9200      	str	r2, [sp, #0]
    1660:	4a37      	ldr	r2, [pc, #220]	; (1740 <message_thread+0x12c>)
    1662:	217c      	movs	r1, #124	; 0x7c
    1664:	4837      	ldr	r0, [pc, #220]	; (1744 <message_thread+0x130>)
    1666:	f029 f9e3 	bl	2aa30 <snprintf>
			prepare_msg(&pub_ctx.pub_msg, MQTT_QoS0);
    166a:	4e37      	ldr	r6, [pc, #220]	; (1748 <message_thread+0x134>)
    166c:	f106 0930 	add.w	r9, r6, #48	; 0x30
    1670:	2100      	movs	r1, #0
    1672:	4648      	mov	r0, r9
    1674:	f7ff ffb8 	bl	15e8 <prepare_msg>
		 	int rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
    1678:	4649      	mov	r1, r9
    167a:	f106 0048 	add.w	r0, r6, #72	; 0x48
    167e:	f024 fd43 	bl	26108 <mqtt_tx_publish>
		 	PRINT_RESULT("mqtt_tx_publish", rc);
    1682:	4606      	mov	r6, r0
    1684:	2800      	cmp	r0, #0
    1686:	d1cc      	bne.n	1622 <message_thread+0xe>
    1688:	4b30      	ldr	r3, [pc, #192]	; (174c <message_thread+0x138>)
    168a:	e7cb      	b.n	1624 <message_thread+0x10>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex);

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    168c:	4830      	ldr	r0, [pc, #192]	; (1750 <message_thread+0x13c>)
    168e:	f026 fed7 	bl	28440 <_impl_k_mutex_unlock>

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1692:	4830      	ldr	r0, [pc, #192]	; (1754 <message_thread+0x140>)
    1694:	f027 fe8d 	bl	293b2 <_impl_k_sem_give>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1698:	f242 7010 	movw	r0, #10000	; 0x2710
    169c:	f027 fd4a 	bl	29134 <_impl_k_sleep>
    16a0:	46d5      	mov	sp, sl
	while(true) {
    16a2:	46ea      	mov	sl, sp
    16a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    16a8:	f027 fd44 	bl	29134 <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    16ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    16b0:	4827      	ldr	r0, [pc, #156]	; (1750 <message_thread+0x13c>)
    16b2:	f026 fe5b 	bl	2836c <_impl_k_mutex_lock>
    	rand_string(nonce_to_be_used, sizeof(nonce_counter));
    16b6:	2111      	movs	r1, #17
    16b8:	4638      	mov	r0, r7
    16ba:	f7ff ff43 	bl	1544 <rand_string>
    	strncpy(nonce_counter, nonce_to_be_used, sizeof(nonce_counter));
    16be:	2211      	movs	r2, #17
    16c0:	4639      	mov	r1, r7
    16c2:	f107 0014 	add.w	r0, r7, #20
    16c6:	f029 fb43 	bl	2ad50 <strncpy>
		encrypt_aes_ctr(nonce_to_be_used);
    16ca:	4638      	mov	r0, r7
    16cc:	f7ff ff66 	bl	159c <encrypt_aes_ctr>
		size_t msg_size = strlen(encrypted_msg);
    16d0:	4e21      	ldr	r6, [pc, #132]	; (1758 <message_thread+0x144>)
    16d2:	4630      	mov	r0, r6
    16d4:	f7ff f814 	bl	700 <strlen>
    16d8:	4604      	mov	r4, r0
		printk("\nmsg:%s\n", encrypted_msg);
    16da:	4631      	mov	r1, r6
    16dc:	481f      	ldr	r0, [pc, #124]	; (175c <message_thread+0x148>)
    16de:	f001 fc6b 	bl	2fb8 <printk>
		unsigned char tmp[msg_size + sizeof(nonce_counter) + 1];
    16e2:	f104 0812 	add.w	r8, r4, #18
    16e6:	3419      	adds	r4, #25
    16e8:	f024 0407 	bic.w	r4, r4, #7
    16ec:	ebad 0d04 	sub.w	sp, sp, r4
    16f0:	a802      	add	r0, sp, #8
    16f2:	4605      	mov	r5, r0
		snprintf(tmp, sizeof(tmp), "%s%s", nonce_counter, encrypted_msg);
    16f4:	9600      	str	r6, [sp, #0]
    16f6:	f107 0314 	add.w	r3, r7, #20
    16fa:	4a19      	ldr	r2, [pc, #100]	; (1760 <message_thread+0x14c>)
    16fc:	4641      	mov	r1, r8
    16fe:	f029 f997 	bl	2aa30 <snprintf>
		int num_fragments = sizeof(tmp) / (PAYLOAD_SIZE-2);
    1702:	4c18      	ldr	r4, [pc, #96]	; (1764 <message_thread+0x150>)
    1704:	fba4 3408 	umull	r3, r4, r4, r8
    1708:	0964      	lsrs	r4, r4, #5
		if (sizeof(tmp) % PAYLOAD_SIZE != 0)
    170a:	ea4f 0398 	mov.w	r3, r8, lsr #2
    170e:	4a16      	ldr	r2, [pc, #88]	; (1768 <message_thread+0x154>)
    1710:	fba2 2303 	umull	r2, r3, r2, r3
    1714:	089b      	lsrs	r3, r3, #2
    1716:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    171a:	009a      	lsls	r2, r3, #2
    171c:	4590      	cmp	r8, r2
    171e:	d000      	beq.n	1722 <message_thread+0x10e>
			num_fragments++;
    1720:	3401      	adds	r4, #1
		for (i = 1; i <= num_fragments; i++) {
    1722:	2201      	movs	r2, #1
    1724:	4b05      	ldr	r3, [pc, #20]	; (173c <message_thread+0x128>)
    1726:	601a      	str	r2, [r3, #0]
    1728:	e78e      	b.n	1648 <message_thread+0x34>
    172a:	bf00      	nop
    172c:	0002e844 	.word	0x0002e844
    1730:	0002e868 	.word	0x0002e868
    1734:	0002e77c 	.word	0x0002e77c
    1738:	0002e878 	.word	0x0002e878
    173c:	200029dc 	.word	0x200029dc
    1740:	0002e860 	.word	0x0002e860
    1744:	200001a0 	.word	0x200001a0
    1748:	20000298 	.word	0x20000298
    174c:	0002e840 	.word	0x0002e840
    1750:	2000d1dc 	.word	0x2000d1dc
    1754:	2000d168 	.word	0x2000d168
    1758:	2000000c 	.word	0x2000000c
    175c:	0002e84c 	.word	0x0002e84c
    1760:	0002e858 	.word	0x0002e858
    1764:	4325c53f 	.word	0x4325c53f
    1768:	21084211 	.word	0x21084211

0000176c <publisher_thread>:

K_THREAD_STACK_DEFINE(pub_stack_area, PUB_STACK_SIZE);
struct k_thread pub_thread;

void publisher_thread(void * unused1, void * unused2, void * unused3)
{
    176c:	b530      	push	{r4, r5, lr}
    176e:	b083      	sub	sp, #12
	ARG_UNUSED(unused3);

	int i, rc;

	/* Set everything to 0 and later just assign the required fields. */
	memset(&pub_ctx, 0x00, sizeof(pub_ctx));
    1770:	4c6f      	ldr	r4, [pc, #444]	; (1930 <publisher_thread+0x1c4>)
    1772:	f44f 7280 	mov.w	r2, #256	; 0x100
    1776:	2100      	movs	r1, #0
    1778:	4620      	mov	r0, r4
    177a:	f029 f8cd 	bl	2a918 <memset>

	/* connect, disconnect and malformed may be set to NULL */
	pub_ctx.mqtt_ctx.connect = connect_cb;
    177e:	4b6d      	ldr	r3, [pc, #436]	; (1934 <publisher_thread+0x1c8>)
    1780:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	pub_ctx.mqtt_ctx.disconnect = disconnect_cb;
    1784:	4b6c      	ldr	r3, [pc, #432]	; (1938 <publisher_thread+0x1cc>)
    1786:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	pub_ctx.mqtt_ctx.malformed = malformed_cb;
    178a:	4b6c      	ldr	r3, [pc, #432]	; (193c <publisher_thread+0x1d0>)
    178c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8

	pub_ctx.mqtt_ctx.net_init_timeout = APP_NET_INIT_TIMEOUT;
    1790:	f242 7310 	movw	r3, #10000	; 0x2710
    1794:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	pub_ctx.mqtt_ctx.net_timeout = APP_TX_RX_TIMEOUT;
    1798:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    179c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

	pub_ctx.mqtt_ctx.peer_addr_str = SERVER_ADDR;
    17a0:	4b67      	ldr	r3, [pc, #412]	; (1940 <publisher_thread+0x1d4>)
    17a2:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	pub_ctx.mqtt_ctx.peer_port = SERVER_PORT;
    17a6:	f240 735b 	movw	r3, #1883	; 0x75b
    17aa:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc

	/* Publisher apps TX the MQTT PUBLISH msg */
	pub_ctx.mqtt_ctx.publish_tx = publish_cb;
    17ae:	4b65      	ldr	r3, [pc, #404]	; (1944 <publisher_thread+0x1d8>)
    17b0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	/* The connect message will be sent to the MQTT server (broker).
	 * If clean_session here is 0, the mqtt_ctx clean_session variable
	 * will be set to 0 also. Please don't do that, set always to 1.
	 * Clean session = 0 is not yet supported.
	 */
	pub_ctx.connect_msg.user_name = TB_ACCESS_TOKEN;
    17b4:	4864      	ldr	r0, [pc, #400]	; (1948 <publisher_thread+0x1dc>)
    17b6:	6220      	str	r0, [r4, #32]
	pub_ctx.connect_msg.user_name_len = strlen(TB_ACCESS_TOKEN);
    17b8:	f7fe ffa2 	bl	700 <strlen>
    17bc:	84a0      	strh	r0, [r4, #36]	; 0x24
	pub_ctx.connect_msg.clean_session = 1;
    17be:	7823      	ldrb	r3, [r4, #0]
    17c0:	f043 0301 	orr.w	r3, r3, #1
    17c4:	7023      	strb	r3, [r4, #0]

	pub_ctx.connect_data = "CONNECTED";
    17c6:	4b61      	ldr	r3, [pc, #388]	; (194c <publisher_thread+0x1e0>)
    17c8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	pub_ctx.disconnect_data = "DISCONNECTED";
    17cc:	4b60      	ldr	r3, [pc, #384]	; (1950 <publisher_thread+0x1e4>)
    17ce:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	pub_ctx.publish_data = "PUBLISH";
    17d2:	4b60      	ldr	r3, [pc, #384]	; (1954 <publisher_thread+0x1e8>)
    17d4:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc

	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    17d8:	e085      	b.n	18e6 <publisher_thread+0x17a>

		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
		PRINT_RESULT("mqtt_init", rc);
    17da:	4b5f      	ldr	r3, [pc, #380]	; (1958 <publisher_thread+0x1ec>)
    17dc:	e092      	b.n	1904 <publisher_thread+0x198>
		}

		i = 0;
		do {
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
			PRINT_RESULT("mqtt_connect", rc);
    17de:	4b5e      	ldr	r3, [pc, #376]	; (1958 <publisher_thread+0x1ec>)
    17e0:	9301      	str	r3, [sp, #4]
    17e2:	9400      	str	r4, [sp, #0]
    17e4:	4b5d      	ldr	r3, [pc, #372]	; (195c <publisher_thread+0x1f0>)
    17e6:	f240 1235 	movw	r2, #309	; 0x135
    17ea:	495d      	ldr	r1, [pc, #372]	; (1960 <publisher_thread+0x1f4>)
    17ec:	485d      	ldr	r0, [pc, #372]	; (1964 <publisher_thread+0x1f8>)
    17ee:	f001 fbe3 	bl	2fb8 <printk>
		} while (rc != 0 && i++ < APP_CONN_TRIES);
    17f2:	b15c      	cbz	r4, 180c <publisher_thread+0xa0>
    17f4:	1c6b      	adds	r3, r5, #1
    17f6:	2d63      	cmp	r5, #99	; 0x63
    17f8:	dc08      	bgt.n	180c <publisher_thread+0xa0>
    17fa:	461d      	mov	r5, r3
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
    17fc:	485a      	ldr	r0, [pc, #360]	; (1968 <publisher_thread+0x1fc>)
    17fe:	f024 fdc9 	bl	26394 <mqtt_connect>
			PRINT_RESULT("mqtt_connect", rc);
    1802:	4604      	mov	r4, r0
    1804:	2800      	cmp	r0, #0
    1806:	d1ea      	bne.n	17de <publisher_thread+0x72>
    1808:	4b58      	ldr	r3, [pc, #352]	; (196c <publisher_thread+0x200>)
    180a:	e7e9      	b.n	17e0 <publisher_thread+0x74>

		if (rc != 0) {
    180c:	b1cc      	cbz	r4, 1842 <publisher_thread+0xd6>
    180e:	e085      	b.n	191c <publisher_thread+0x1b0>
		}

		i = 0;
		do {
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
			PRINT_RESULT("mqtt_tx_connect", rc);
    1810:	4b51      	ldr	r3, [pc, #324]	; (1958 <publisher_thread+0x1ec>)
    1812:	9301      	str	r3, [sp, #4]
    1814:	9500      	str	r5, [sp, #0]
    1816:	4b56      	ldr	r3, [pc, #344]	; (1970 <publisher_thread+0x204>)
    1818:	f240 123f 	movw	r2, #319	; 0x13f
    181c:	4950      	ldr	r1, [pc, #320]	; (1960 <publisher_thread+0x1f4>)
    181e:	4851      	ldr	r0, [pc, #324]	; (1964 <publisher_thread+0x1f8>)
    1820:	f001 fbca 	bl	2fb8 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1828:	f027 fc84 	bl	29134 <_impl_k_sleep>
			k_sleep(APP_TX_CONN_WAIT_MSECS);
		} while (rc == 0 && i++ < APP_TX_CONN_TRIES && !pub_ctx.mqtt_ctx.connected);
    182c:	b99d      	cbnz	r5, 1856 <publisher_thread+0xea>
    182e:	1c63      	adds	r3, r4, #1
    1830:	2c13      	cmp	r4, #19
    1832:	dc10      	bgt.n	1856 <publisher_thread+0xea>
    1834:	4a3e      	ldr	r2, [pc, #248]	; (1930 <publisher_thread+0x1c4>)
    1836:	f892 20f1 	ldrb.w	r2, [r2, #241]	; 0xf1
    183a:	f012 0f02 	tst.w	r2, #2
    183e:	d10a      	bne.n	1856 <publisher_thread+0xea>
    1840:	461c      	mov	r4, r3
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
    1842:	483b      	ldr	r0, [pc, #236]	; (1930 <publisher_thread+0x1c4>)
    1844:	4601      	mov	r1, r0
    1846:	3048      	adds	r0, #72	; 0x48
    1848:	f024 fbd2 	bl	25ff0 <mqtt_tx_connect>
			PRINT_RESULT("mqtt_tx_connect", rc);
    184c:	4605      	mov	r5, r0
    184e:	2800      	cmp	r0, #0
    1850:	d1de      	bne.n	1810 <publisher_thread+0xa4>
    1852:	4b46      	ldr	r3, [pc, #280]	; (196c <publisher_thread+0x200>)
    1854:	e7dd      	b.n	1812 <publisher_thread+0xa6>

		if (!pub_ctx.mqtt_ctx.connected) {
    1856:	4b36      	ldr	r3, [pc, #216]	; (1930 <publisher_thread+0x1c4>)
    1858:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
    185c:	f013 0f02 	tst.w	r3, #2
    1860:	d10c      	bne.n	187c <publisher_thread+0x110>
			mqtt_close(&pub_ctx.mqtt_ctx);
    1862:	4841      	ldr	r0, [pc, #260]	; (1968 <publisher_thread+0x1fc>)
    1864:	f024 fddc 	bl	26420 <mqtt_close>
			goto exit_pub;
    1868:	e058      	b.n	191c <publisher_thread+0x1b0>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    186a:	4842      	ldr	r0, [pc, #264]	; (1974 <publisher_thread+0x208>)
    186c:	f026 fde8 	bl	28440 <_impl_k_mutex_unlock>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1870:	f644 6120 	movw	r1, #20000	; 0x4e20
    1874:	4840      	ldr	r0, [pc, #256]	; (1978 <publisher_thread+0x20c>)
    1876:	f027 fdaf 	bl	293d8 <_impl_k_sem_take>

			if (data_changed) {
				//rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
				//PRINT_RESULT("mqtt_tx_publish", rc);
			}
		} while ((rc = k_sem_take(&pub_sem, APP_CONN_IDLE_TIMEOUT)) == 0);
    187a:	b960      	cbnz	r0, 1896 <publisher_thread+0x12a>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    187c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1880:	483c      	ldr	r0, [pc, #240]	; (1974 <publisher_thread+0x208>)
    1882:	f026 fd73 	bl	2836c <_impl_k_mutex_lock>
			if (message_changed) {
    1886:	4b3d      	ldr	r3, [pc, #244]	; (197c <publisher_thread+0x210>)
    1888:	781b      	ldrb	r3, [r3, #0]
    188a:	2b00      	cmp	r3, #0
    188c:	d0ed      	beq.n	186a <publisher_thread+0xfe>
				message_changed=false;
    188e:	2200      	movs	r2, #0
    1890:	4b3a      	ldr	r3, [pc, #232]	; (197c <publisher_thread+0x210>)
    1892:	701a      	strb	r2, [r3, #0]
    1894:	e7e9      	b.n	186a <publisher_thread+0xfe>

		rc = mqtt_tx_disconnect(&pub_ctx.mqtt_ctx);
    1896:	4834      	ldr	r0, [pc, #208]	; (1968 <publisher_thread+0x1fc>)
    1898:	f024 fbec 	bl	26074 <mqtt_tx_disconnect>
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    189c:	4603      	mov	r3, r0
    189e:	2800      	cmp	r0, #0
    18a0:	d141      	bne.n	1926 <publisher_thread+0x1ba>
    18a2:	4a32      	ldr	r2, [pc, #200]	; (196c <publisher_thread+0x200>)
    18a4:	9201      	str	r2, [sp, #4]
    18a6:	9300      	str	r3, [sp, #0]
    18a8:	4b35      	ldr	r3, [pc, #212]	; (1980 <publisher_thread+0x214>)
    18aa:	f240 125b 	movw	r2, #347	; 0x15b
    18ae:	492c      	ldr	r1, [pc, #176]	; (1960 <publisher_thread+0x1f4>)
    18b0:	482c      	ldr	r0, [pc, #176]	; (1964 <publisher_thread+0x1f8>)
    18b2:	f001 fb81 	bl	2fb8 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    18b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    18ba:	f027 fc3b 	bl	29134 <_impl_k_sleep>

		k_sleep(APP_TX_RX_TIMEOUT);

		rc = mqtt_close(&pub_ctx.mqtt_ctx);
    18be:	482a      	ldr	r0, [pc, #168]	; (1968 <publisher_thread+0x1fc>)
    18c0:	f024 fdae 	bl	26420 <mqtt_close>
		PRINT_RESULT("mqtt_close", rc);
    18c4:	4603      	mov	r3, r0
    18c6:	2800      	cmp	r0, #0
    18c8:	d12f      	bne.n	192a <publisher_thread+0x1be>
    18ca:	4a28      	ldr	r2, [pc, #160]	; (196c <publisher_thread+0x200>)
    18cc:	9201      	str	r2, [sp, #4]
    18ce:	9300      	str	r3, [sp, #0]
    18d0:	4b2c      	ldr	r3, [pc, #176]	; (1984 <publisher_thread+0x218>)
    18d2:	f44f 72b0 	mov.w	r2, #352	; 0x160
    18d6:	4922      	ldr	r1, [pc, #136]	; (1960 <publisher_thread+0x1f4>)
    18d8:	4822      	ldr	r0, [pc, #136]	; (1964 <publisher_thread+0x1f8>)
    18da:	f001 fb6d 	bl	2fb8 <printk>
    18de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    18e2:	f027 fc27 	bl	29134 <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    18e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    18ea:	4823      	ldr	r0, [pc, #140]	; (1978 <publisher_thread+0x20c>)
    18ec:	f027 fd74 	bl	293d8 <_impl_k_sem_take>
	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    18f0:	b9a0      	cbnz	r0, 191c <publisher_thread+0x1b0>
		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
    18f2:	2101      	movs	r1, #1
    18f4:	481c      	ldr	r0, [pc, #112]	; (1968 <publisher_thread+0x1fc>)
    18f6:	f024 fd81 	bl	263fc <mqtt_init>
		PRINT_RESULT("mqtt_init", rc);
    18fa:	4605      	mov	r5, r0
    18fc:	2800      	cmp	r0, #0
    18fe:	f47f af6c 	bne.w	17da <publisher_thread+0x6e>
    1902:	4b1a      	ldr	r3, [pc, #104]	; (196c <publisher_thread+0x200>)
    1904:	9301      	str	r3, [sp, #4]
    1906:	9500      	str	r5, [sp, #0]
    1908:	4b1f      	ldr	r3, [pc, #124]	; (1988 <publisher_thread+0x21c>)
    190a:	f44f 7296 	mov.w	r2, #300	; 0x12c
    190e:	4914      	ldr	r1, [pc, #80]	; (1960 <publisher_thread+0x1f4>)
    1910:	4814      	ldr	r0, [pc, #80]	; (1964 <publisher_thread+0x1f8>)
    1912:	f001 fb51 	bl	2fb8 <printk>
		if (rc != 0) {
    1916:	2d00      	cmp	r5, #0
    1918:	f43f af70 	beq.w	17fc <publisher_thread+0x90>
		k_sleep(APP_TX_RX_TIMEOUT);
	}

exit_pub:

	printk("\nPublisher terminated!!\n");
    191c:	481b      	ldr	r0, [pc, #108]	; (198c <publisher_thread+0x220>)
    191e:	f001 fb4b 	bl	2fb8 <printk>
}
    1922:	b003      	add	sp, #12
    1924:	bd30      	pop	{r4, r5, pc}
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    1926:	4a0c      	ldr	r2, [pc, #48]	; (1958 <publisher_thread+0x1ec>)
    1928:	e7bc      	b.n	18a4 <publisher_thread+0x138>
		PRINT_RESULT("mqtt_close", rc);
    192a:	4a0b      	ldr	r2, [pc, #44]	; (1958 <publisher_thread+0x1ec>)
    192c:	e7ce      	b.n	18cc <publisher_thread+0x160>
    192e:	bf00      	nop
    1930:	20000298 	.word	0x20000298
    1934:	000014f1 	.word	0x000014f1
    1938:	000014bd 	.word	0x000014bd
    193c:	000014a5 	.word	0x000014a5
    1940:	0002e8f8 	.word	0x0002e8f8
    1944:	00001435 	.word	0x00001435
    1948:	0002e914 	.word	0x0002e914
    194c:	0002e92c 	.word	0x0002e92c
    1950:	0002e938 	.word	0x0002e938
    1954:	0002e948 	.word	0x0002e948
    1958:	0002e844 	.word	0x0002e844
    195c:	0002e95c 	.word	0x0002e95c
    1960:	0002e7c4 	.word	0x0002e7c4
    1964:	0002e878 	.word	0x0002e878
    1968:	200002e0 	.word	0x200002e0
    196c:	0002e840 	.word	0x0002e840
    1970:	0002e96c 	.word	0x0002e96c
    1974:	2000d1dc 	.word	0x2000d1dc
    1978:	2000d168 	.word	0x2000d168
    197c:	2000019c 	.word	0x2000019c
    1980:	0002e97c 	.word	0x0002e97c
    1984:	0002e990 	.word	0x0002e990
    1988:	0002e950 	.word	0x0002e950
    198c:	0002e99c 	.word	0x0002e99c

00001990 <start_publisher>:


static void start_publisher()
{
    1990:	b500      	push	{lr}
    1992:	b087      	sub	sp, #28
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    1994:	2300      	movs	r3, #0
    1996:	9305      	str	r3, [sp, #20]
    1998:	9304      	str	r3, [sp, #16]
    199a:	2205      	movs	r2, #5
    199c:	9203      	str	r2, [sp, #12]
    199e:	9302      	str	r3, [sp, #8]
    19a0:	9301      	str	r3, [sp, #4]
    19a2:	9300      	str	r3, [sp, #0]
    19a4:	4b04      	ldr	r3, [pc, #16]	; (19b8 <start_publisher+0x28>)
    19a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    19aa:	4904      	ldr	r1, [pc, #16]	; (19bc <start_publisher+0x2c>)
    19ac:	4804      	ldr	r0, [pc, #16]	; (19c0 <start_publisher+0x30>)
    19ae:	f027 ff7f 	bl	298b0 <_impl_k_thread_create>
	k_thread_create(&pub_thread, pub_stack_area,
                                 K_THREAD_STACK_SIZEOF(pub_stack_area),
                                 publisher_thread,
                                 NULL, NULL, NULL,
                                 PUB_PRIORITY, 0, K_NO_WAIT);
}
    19b2:	b007      	add	sp, #28
    19b4:	f85d fb04 	ldr.w	pc, [sp], #4
    19b8:	0000176d 	.word	0x0000176d
    19bc:	20003518 	.word	0x20003518
    19c0:	20002a48 	.word	0x20002a48

000019c4 <start_message_thread>:
{
    19c4:	b500      	push	{lr}
    19c6:	b087      	sub	sp, #28
    19c8:	2300      	movs	r3, #0
    19ca:	9305      	str	r3, [sp, #20]
    19cc:	9304      	str	r3, [sp, #16]
    19ce:	2205      	movs	r2, #5
    19d0:	9203      	str	r2, [sp, #12]
    19d2:	9302      	str	r3, [sp, #8]
    19d4:	9301      	str	r3, [sp, #4]
    19d6:	9300      	str	r3, [sp, #0]
    19d8:	4b04      	ldr	r3, [pc, #16]	; (19ec <start_message_thread+0x28>)
    19da:	f44f 6200 	mov.w	r2, #2048	; 0x800
    19de:	4904      	ldr	r1, [pc, #16]	; (19f0 <start_message_thread+0x2c>)
    19e0:	4804      	ldr	r0, [pc, #16]	; (19f4 <start_message_thread+0x30>)
    19e2:	f027 ff65 	bl	298b0 <_impl_k_thread_create>
}
    19e6:	b007      	add	sp, #28
    19e8:	f85d fb04 	ldr.w	pc, [sp], #4
    19ec:	00001615 	.word	0x00001615
    19f0:	20002d18 	.word	0x20002d18
    19f4:	200029e0 	.word	0x200029e0

000019f8 <event_iface_up>:


static void event_iface_up(struct net_mgmt_event_callback *cb,
			   u32_t mgmt_event, struct net_if *iface)
{
    19f8:	b508      	push	{r3, lr}
	start_publisher();
    19fa:	f7ff ffc9 	bl	1990 <start_publisher>
	start_message_thread();
    19fe:	f7ff ffe1 	bl	19c4 <start_message_thread>
    1a02:	bd08      	pop	{r3, pc}

00001a04 <main>:
}


void main(void)
{
    1a04:	b508      	push	{r3, lr}
	struct net_if *iface = net_if_get_default();
    1a06:	f019 fd19 	bl	1b43c <net_if_get_default>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1a0a:	f3bf 8f5b 	dmb	ish
    1a0e:	68c3      	ldr	r3, [r0, #12]
    1a10:	f3bf 8f5b 	dmb	ish

#if defined(CONFIG_NET_MGMT_EVENT)
	/* Subscribe to NET_IF_UP if interface is not ready */
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
    1a14:	f013 0f01 	tst.w	r3, #1
    1a18:	d000      	beq.n	1a1c <main+0x18>
    1a1a:	bd08      	pop	{r3, pc}
				  u32_t mgmt_event_mask)
{
	__ASSERT(cb, "Callback pointer should not be NULL");
	__ASSERT(handler, "Handler pointer should not be NULL");

	cb->handler = handler;
    1a1c:	4803      	ldr	r0, [pc, #12]	; (1a2c <main+0x28>)
    1a1e:	4b04      	ldr	r3, [pc, #16]	; (1a30 <main+0x2c>)
    1a20:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
    1a22:	4b04      	ldr	r3, [pc, #16]	; (1a34 <main+0x30>)
    1a24:	6083      	str	r3, [r0, #8]
		net_mgmt_init_event_callback(&cb, event_iface_up, NET_EVENT_IF_UP);
		net_mgmt_add_event_callback(&cb);
    1a26:	f021 fb47 	bl	230b8 <net_mgmt_add_event_callback>
	}
#else
	event_iface_up(NULL, NET_EVENT_IF_UP, iface);
#endif

	return;
    1a2a:	e7f6      	b.n	1a1a <main+0x16>
    1a2c:	20000000 	.word	0x20000000
    1a30:	000019f9 	.word	0x000019f9
    1a34:	d0010002 	.word	0xd0010002

00001a38 <_sbrk>:
}
FUNC_ALIAS(_lseek, lseek, int);

void *_sbrk(int count)
{
	void *ptr = heap_base + heap_sz;
    1a38:	4b08      	ldr	r3, [pc, #32]	; (1a5c <_sbrk+0x24>)
    1a3a:	681a      	ldr	r2, [r3, #0]
    1a3c:	4b08      	ldr	r3, [pc, #32]	; (1a60 <_sbrk+0x28>)
    1a3e:	18d1      	adds	r1, r2, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    1a40:	4410      	add	r0, r2
    1a42:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    1a46:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    1a4a:	4298      	cmp	r0, r3
    1a4c:	d203      	bcs.n	1a56 <_sbrk+0x1e>
		heap_sz += count;
    1a4e:	4b03      	ldr	r3, [pc, #12]	; (1a5c <_sbrk+0x24>)
    1a50:	6018      	str	r0, [r3, #0]
		return ptr;
	} else {
		return (void *)-1;
	}
}
    1a52:	4608      	mov	r0, r1
    1a54:	4770      	bx	lr
		return (void *)-1;
    1a56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1a5a:	e7fa      	b.n	1a52 <_sbrk+0x1a>
    1a5c:	20000398 	.word	0x20000398
    1a60:	2000d5b4 	.word	0x2000d5b4

00001a64 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1a64:	b510      	push	{r4, lr}
    1a66:	4604      	mov	r4, r0
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1a68:	280a      	cmp	r0, #10
    1a6a:	d007      	beq.n	1a7c <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1a6c:	4b07      	ldr	r3, [pc, #28]	; (1a8c <console_out+0x28>)
    1a6e:	6818      	ldr	r0, [r3, #0]
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a70:	6843      	ldr	r3, [r0, #4]

	return api->poll_out(dev, out_char);
    1a72:	685b      	ldr	r3, [r3, #4]
    1a74:	b2e1      	uxtb	r1, r4
    1a76:	4798      	blx	r3

	return c;
}
    1a78:	4620      	mov	r0, r4
    1a7a:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    1a7c:	4b03      	ldr	r3, [pc, #12]	; (1a8c <console_out+0x28>)
    1a7e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a80:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1a82:	685b      	ldr	r3, [r3, #4]
    1a84:	210d      	movs	r1, #13
    1a86:	4798      	blx	r3
    1a88:	e7f0      	b.n	1a6c <console_out+0x8>
    1a8a:	bf00      	nop
    1a8c:	200003bc 	.word	0x200003bc

00001a90 <read_uart>:
#define ANSI_END           'F'
#define ANSI_HOME          'H'
#define ANSI_DEL           '~'

static int read_uart(struct device *uart, u8_t *buf, unsigned int size)
{
    1a90:	b510      	push	{r4, lr}
    1a92:	4604      	mov	r4, r0
 * @return Number of bytes read.
 */
static inline int uart_fifo_read(struct device *dev, u8_t *rx_data,
				 const int size)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a94:	6843      	ldr	r3, [r0, #4]

	if (api->fifo_read) {
    1a96:	691b      	ldr	r3, [r3, #16]
    1a98:	b11b      	cbz	r3, 1aa2 <read_uart+0x12>
		return api->fifo_read(dev, rx_data, size);
    1a9a:	4798      	blx	r3
	int rx;

	rx = uart_fifo_read(uart, buf, size);
	if (rx < 0) {
    1a9c:	2800      	cmp	r0, #0
    1a9e:	db02      	blt.n	1aa6 <read_uart+0x16>

		return -EIO;
	}

	return rx;
}
    1aa0:	bd10      	pop	{r4, pc}
	}

	return 0;
    1aa2:	2000      	movs	r0, #0
    1aa4:	e7fa      	b.n	1a9c <read_uart+0xc>
 *
 * @return N/A
 */
static inline void uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;
    1aa6:	6863      	ldr	r3, [r4, #4]

	if (api->irq_rx_disable) {
    1aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1aaa:	b123      	cbz	r3, 1ab6 <read_uart+0x26>
		api->irq_rx_disable(dev);
    1aac:	4620      	mov	r0, r4
    1aae:	4798      	blx	r3
		return -EIO;
    1ab0:	f06f 0004 	mvn.w	r0, #4
    1ab4:	bd10      	pop	{r4, pc}
    1ab6:	f06f 0004 	mvn.w	r0, #4
    1aba:	e7f1      	b.n	1aa0 <read_uart+0x10>

00001abc <console_input_init>:
		}
	}
}

static void console_input_init(void)
{
    1abc:	b500      	push	{lr}
    1abe:	b083      	sub	sp, #12
	u8_t c;

	uart_irq_rx_disable(uart_console_dev);
    1ac0:	4b19      	ldr	r3, [pc, #100]	; (1b28 <console_input_init+0x6c>)
    1ac2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ac4:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_disable) {
    1ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ac8:	b103      	cbz	r3, 1acc <console_input_init+0x10>
		api->irq_rx_disable(dev);
    1aca:	4798      	blx	r3
	uart_irq_tx_disable(uart_console_dev);
    1acc:	4b16      	ldr	r3, [pc, #88]	; (1b28 <console_input_init+0x6c>)
    1ace:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ad0:	6843      	ldr	r3, [r0, #4]
	if (api->irq_tx_disable) {
    1ad2:	699b      	ldr	r3, [r3, #24]
    1ad4:	b103      	cbz	r3, 1ad8 <console_input_init+0x1c>
		api->irq_tx_disable(dev);
    1ad6:	4798      	blx	r3

	uart_irq_callback_set(uart_console_dev, uart_console_isr);
    1ad8:	4b13      	ldr	r3, [pc, #76]	; (1b28 <console_input_init+0x6c>)
    1ada:	6818      	ldr	r0, [r3, #0]
 * @return N/A
 */
static inline void uart_irq_callback_set(struct device *dev,
					 uart_irq_callback_t cb)
{
	const struct uart_driver_api *api = dev->driver_api;
    1adc:	6843      	ldr	r3, [r0, #4]

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1ade:	b18b      	cbz	r3, 1b04 <console_input_init+0x48>
    1ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1ae2:	b17b      	cbz	r3, 1b04 <console_input_init+0x48>
		api->irq_callback_set(dev, cb);
    1ae4:	4911      	ldr	r1, [pc, #68]	; (1b2c <console_input_init+0x70>)
    1ae6:	4798      	blx	r3
    1ae8:	e00c      	b.n	1b04 <console_input_init+0x48>
		return api->fifo_read(dev, rx_data, size);
    1aea:	2201      	movs	r2, #1
    1aec:	f10d 0107 	add.w	r1, sp, #7
    1af0:	4798      	blx	r3
    1af2:	e007      	b.n	1b04 <console_input_init+0x48>
	return 0;
    1af4:	2000      	movs	r0, #0

	/* Drain the fifo */
	while (uart_irq_rx_ready(uart_console_dev)) {
    1af6:	b168      	cbz	r0, 1b14 <console_input_init+0x58>
		uart_fifo_read(uart_console_dev, &c, 1);
    1af8:	4b0b      	ldr	r3, [pc, #44]	; (1b28 <console_input_init+0x6c>)
    1afa:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1afc:	6843      	ldr	r3, [r0, #4]
	if (api->fifo_read) {
    1afe:	691b      	ldr	r3, [r3, #16]
    1b00:	2b00      	cmp	r3, #0
    1b02:	d1f2      	bne.n	1aea <console_input_init+0x2e>
	while (uart_irq_rx_ready(uart_console_dev)) {
    1b04:	4b08      	ldr	r3, [pc, #32]	; (1b28 <console_input_init+0x6c>)
    1b06:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b08:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d0f1      	beq.n	1af4 <console_input_init+0x38>
		return api->irq_rx_ready(dev);
    1b10:	4798      	blx	r3
    1b12:	e7f0      	b.n	1af6 <console_input_init+0x3a>
	}

	uart_irq_rx_enable(uart_console_dev);
    1b14:	4b04      	ldr	r3, [pc, #16]	; (1b28 <console_input_init+0x6c>)
    1b16:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b18:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_enable) {
    1b1a:	6a1b      	ldr	r3, [r3, #32]
    1b1c:	b103      	cbz	r3, 1b20 <console_input_init+0x64>
		api->irq_rx_enable(dev);
    1b1e:	4798      	blx	r3
}
    1b20:	b003      	add	sp, #12
    1b22:	f85d fb04 	ldr.w	pc, [sp], #4
    1b26:	bf00      	nop
    1b28:	200003bc 	.word	0x200003bc
    1b2c:	00001e29 	.word	0x00001e29

00001b30 <del_char>:
{
    1b30:	b570      	push	{r4, r5, r6, lr}
    1b32:	4606      	mov	r6, r0
    1b34:	460d      	mov	r5, r1
	uart_poll_out(uart_console_dev, '\b');
    1b36:	4b17      	ldr	r3, [pc, #92]	; (1b94 <del_char+0x64>)
    1b38:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b3a:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b3c:	685b      	ldr	r3, [r3, #4]
    1b3e:	2108      	movs	r1, #8
    1b40:	4798      	blx	r3
	if (end == 0) {
    1b42:	b11d      	cbz	r5, 1b4c <del_char+0x1c>
	printk("\x1b[s");
    1b44:	4814      	ldr	r0, [pc, #80]	; (1b98 <del_char+0x68>)
    1b46:	f001 fa37 	bl	2fb8 <printk>
    1b4a:	e014      	b.n	1b76 <del_char+0x46>
		uart_poll_out(uart_console_dev, ' ');
    1b4c:	4c11      	ldr	r4, [pc, #68]	; (1b94 <del_char+0x64>)
    1b4e:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b50:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b52:	685b      	ldr	r3, [r3, #4]
    1b54:	2120      	movs	r1, #32
    1b56:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\b');
    1b58:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b5a:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b5c:	685b      	ldr	r3, [r3, #4]
    1b5e:	2108      	movs	r1, #8
    1b60:	4798      	blx	r3
    1b62:	bd70      	pop	{r4, r5, r6, pc}
		*pos = *(pos + 1);
    1b64:	7871      	ldrb	r1, [r6, #1]
    1b66:	f806 1b01 	strb.w	r1, [r6], #1
		uart_poll_out(uart_console_dev, *(pos++));
    1b6a:	4b0a      	ldr	r3, [pc, #40]	; (1b94 <del_char+0x64>)
    1b6c:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b6e:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b70:	685b      	ldr	r3, [r3, #4]
    1b72:	4798      	blx	r3
	while (end-- > 0) {
    1b74:	4625      	mov	r5, r4
    1b76:	1e6b      	subs	r3, r5, #1
    1b78:	b2dc      	uxtb	r4, r3
    1b7a:	2d00      	cmp	r5, #0
    1b7c:	d1f2      	bne.n	1b64 <del_char+0x34>
	uart_poll_out(uart_console_dev, ' ');
    1b7e:	4b05      	ldr	r3, [pc, #20]	; (1b94 <del_char+0x64>)
    1b80:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b82:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b84:	685b      	ldr	r3, [r3, #4]
    1b86:	2120      	movs	r1, #32
    1b88:	4798      	blx	r3
	printk("\x1b[u");
    1b8a:	4804      	ldr	r0, [pc, #16]	; (1b9c <del_char+0x6c>)
    1b8c:	f001 fa14 	bl	2fb8 <printk>
    1b90:	bd70      	pop	{r4, r5, r6, pc}
    1b92:	bf00      	nop
    1b94:	200003bc 	.word	0x200003bc
    1b98:	0002ea54 	.word	0x0002ea54
    1b9c:	0002ea58 	.word	0x0002ea58

00001ba0 <insert_char>:
{
    1ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ba4:	4605      	mov	r5, r0
    1ba6:	4688      	mov	r8, r1
    1ba8:	4614      	mov	r4, r2
	uart_poll_out(uart_console_dev, c);
    1baa:	4b14      	ldr	r3, [pc, #80]	; (1bfc <insert_char+0x5c>)
    1bac:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1bae:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1bb0:	685b      	ldr	r3, [r3, #4]
    1bb2:	4798      	blx	r3
	if (end == 0) {
    1bb4:	b91c      	cbnz	r4, 1bbe <insert_char+0x1e>
		*pos = c;
    1bb6:	f885 8000 	strb.w	r8, [r5]
		return;
    1bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tmp = *pos;
    1bbe:	462e      	mov	r6, r5
    1bc0:	f816 7b01 	ldrb.w	r7, [r6], #1
	*(pos++) = c;
    1bc4:	f885 8000 	strb.w	r8, [r5]
	printk("\x1b[s");
    1bc8:	480d      	ldr	r0, [pc, #52]	; (1c00 <insert_char+0x60>)
    1bca:	f001 f9f5 	bl	2fb8 <printk>
    1bce:	e00c      	b.n	1bea <insert_char+0x4a>
		uart_poll_out(uart_console_dev, tmp);
    1bd0:	4b0a      	ldr	r3, [pc, #40]	; (1bfc <insert_char+0x5c>)
    1bd2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1bd4:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1bd6:	685b      	ldr	r3, [r3, #4]
    1bd8:	4639      	mov	r1, r7
    1bda:	4798      	blx	r3
		c = *pos;
    1bdc:	4633      	mov	r3, r6
    1bde:	f813 2b01 	ldrb.w	r2, [r3], #1
		*(pos++) = tmp;
    1be2:	7037      	strb	r7, [r6, #0]
		tmp = c;
    1be4:	4617      	mov	r7, r2
	while (end-- > 0) {
    1be6:	462c      	mov	r4, r5
		*(pos++) = tmp;
    1be8:	461e      	mov	r6, r3
	while (end-- > 0) {
    1bea:	1e63      	subs	r3, r4, #1
    1bec:	b2dd      	uxtb	r5, r3
    1bee:	2c00      	cmp	r4, #0
    1bf0:	d1ee      	bne.n	1bd0 <insert_char+0x30>
	printk("\x1b[u");
    1bf2:	4804      	ldr	r0, [pc, #16]	; (1c04 <insert_char+0x64>)
    1bf4:	f001 f9e0 	bl	2fb8 <printk>
    1bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1bfc:	200003bc 	.word	0x200003bc
    1c00:	0002ea54 	.word	0x0002ea54
    1c04:	0002ea58 	.word	0x0002ea58

00001c08 <handle_ansi>:
{
    1c08:	b538      	push	{r3, r4, r5, lr}
    1c0a:	4604      	mov	r4, r0
    1c0c:	460d      	mov	r5, r1
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1c0e:	4b7f      	ldr	r3, [pc, #508]	; (1e0c <handle_ansi+0x204>)
    1c10:	f3bf 8f5b 	dmb	ish
    1c14:	e853 2f00 	ldrex	r2, [r3]
    1c18:	f022 0104 	bic.w	r1, r2, #4
    1c1c:	e843 1000 	strex	r0, r1, [r3]
    1c20:	2800      	cmp	r0, #0
    1c22:	d1f7      	bne.n	1c14 <handle_ansi+0xc>
    1c24:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
    1c28:	f012 0f04 	tst.w	r2, #4
    1c2c:	d03c      	beq.n	1ca8 <handle_ansi+0xa0>
		if (!isdigit(byte)) {
    1c2e:	f028 fb0b 	bl	2a248 <__locale_ctype_ptr>
    1c32:	4420      	add	r0, r4
    1c34:	7843      	ldrb	r3, [r0, #1]
    1c36:	f013 0f04 	tst.w	r3, #4
    1c3a:	d121      	bne.n	1c80 <handle_ansi+0x78>
			ansi_val = 1;
    1c3c:	2201      	movs	r2, #1
    1c3e:	4b74      	ldr	r3, [pc, #464]	; (1e10 <handle_ansi+0x208>)
    1c40:	601a      	str	r2, [r3, #0]
	switch (byte) {
    1c42:	2c46      	cmp	r4, #70	; 0x46
    1c44:	f000 80d0 	beq.w	1de8 <handle_ansi+0x1e0>
    1c48:	f200 8086 	bhi.w	1d58 <handle_ansi+0x150>
    1c4c:	2c43      	cmp	r4, #67	; 0x43
    1c4e:	f000 80a7 	beq.w	1da0 <handle_ansi+0x198>
    1c52:	2c44      	cmp	r4, #68	; 0x44
    1c54:	d106      	bne.n	1c64 <handle_ansi+0x5c>
		if (ansi_val > cur) {
    1c56:	4b6f      	ldr	r3, [pc, #444]	; (1e14 <handle_ansi+0x20c>)
    1c58:	781b      	ldrb	r3, [r3, #0]
    1c5a:	4a6d      	ldr	r2, [pc, #436]	; (1e10 <handle_ansi+0x208>)
    1c5c:	6811      	ldr	r1, [r2, #0]
    1c5e:	428b      	cmp	r3, r1
    1c60:	f080 8092 	bcs.w	1d88 <handle_ansi+0x180>
    1c64:	4b69      	ldr	r3, [pc, #420]	; (1e0c <handle_ansi+0x204>)
    1c66:	f3bf 8f5b 	dmb	ish
    1c6a:	e853 2f00 	ldrex	r2, [r3]
    1c6e:	f022 0202 	bic.w	r2, r2, #2
    1c72:	e843 2100 	strex	r1, r2, [r3]
    1c76:	2900      	cmp	r1, #0
    1c78:	d1f7      	bne.n	1c6a <handle_ansi+0x62>
    1c7a:	f3bf 8f5b 	dmb	ish
    1c7e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1c80:	4b62      	ldr	r3, [pc, #392]	; (1e0c <handle_ansi+0x204>)
    1c82:	f3bf 8f5b 	dmb	ish
    1c86:	e853 2f00 	ldrex	r2, [r3]
    1c8a:	f042 0208 	orr.w	r2, r2, #8
    1c8e:	e843 2100 	strex	r1, r2, [r3]
    1c92:	2900      	cmp	r1, #0
    1c94:	d1f7      	bne.n	1c86 <handle_ansi+0x7e>
    1c96:	f3bf 8f5b 	dmb	ish
		ansi_val = byte - '0';
    1c9a:	3c30      	subs	r4, #48	; 0x30
    1c9c:	4b5c      	ldr	r3, [pc, #368]	; (1e10 <handle_ansi+0x208>)
    1c9e:	601c      	str	r4, [r3, #0]
		ansi_val_2 = 0;
    1ca0:	2200      	movs	r2, #0
    1ca2:	4b5d      	ldr	r3, [pc, #372]	; (1e18 <handle_ansi+0x210>)
    1ca4:	601a      	str	r2, [r3, #0]
		return;
    1ca6:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1ca8:	f3bf 8f5b 	dmb	ish
    1cac:	4b57      	ldr	r3, [pc, #348]	; (1e0c <handle_ansi+0x204>)
    1cae:	681b      	ldr	r3, [r3, #0]
    1cb0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
    1cb4:	f013 0f08 	tst.w	r3, #8
    1cb8:	d0c3      	beq.n	1c42 <handle_ansi+0x3a>
		if (isdigit(byte)) {
    1cba:	f028 fac5 	bl	2a248 <__locale_ctype_ptr>
    1cbe:	4420      	add	r0, r4
    1cc0:	7843      	ldrb	r3, [r0, #1]
    1cc2:	f013 0f04 	tst.w	r3, #4
    1cc6:	d11b      	bne.n	1d00 <handle_ansi+0xf8>
		if (byte == ';' &&
    1cc8:	2c3b      	cmp	r4, #59	; 0x3b
    1cca:	d034      	beq.n	1d36 <handle_ansi+0x12e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1ccc:	4b4f      	ldr	r3, [pc, #316]	; (1e0c <handle_ansi+0x204>)
    1cce:	f3bf 8f5b 	dmb	ish
    1cd2:	e853 2f00 	ldrex	r2, [r3]
    1cd6:	f022 0208 	bic.w	r2, r2, #8
    1cda:	e843 2100 	strex	r1, r2, [r3]
    1cde:	2900      	cmp	r1, #0
    1ce0:	d1f7      	bne.n	1cd2 <handle_ansi+0xca>
    1ce2:	f3bf 8f5b 	dmb	ish
    1ce6:	f3bf 8f5b 	dmb	ish
    1cea:	e853 2f00 	ldrex	r2, [r3]
    1cee:	f022 0210 	bic.w	r2, r2, #16
    1cf2:	e843 2100 	strex	r1, r2, [r3]
    1cf6:	2900      	cmp	r1, #0
    1cf8:	d1f7      	bne.n	1cea <handle_ansi+0xe2>
    1cfa:	f3bf 8f5b 	dmb	ish
    1cfe:	e7a0      	b.n	1c42 <handle_ansi+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1d00:	f3bf 8f5b 	dmb	ish
    1d04:	4b41      	ldr	r3, [pc, #260]	; (1e0c <handle_ansi+0x204>)
    1d06:	681b      	ldr	r3, [r3, #0]
    1d08:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
    1d0c:	f013 0f10 	tst.w	r3, #16
    1d10:	d008      	beq.n	1d24 <handle_ansi+0x11c>
				ansi_val_2 *= 10;
    1d12:	4941      	ldr	r1, [pc, #260]	; (1e18 <handle_ansi+0x210>)
    1d14:	680a      	ldr	r2, [r1, #0]
    1d16:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1d1a:	0053      	lsls	r3, r2, #1
				ansi_val_2 += byte - '0';
    1d1c:	4423      	add	r3, r4
    1d1e:	3b30      	subs	r3, #48	; 0x30
    1d20:	600b      	str	r3, [r1, #0]
    1d22:	bd38      	pop	{r3, r4, r5, pc}
				ansi_val *= 10;
    1d24:	493a      	ldr	r1, [pc, #232]	; (1e10 <handle_ansi+0x208>)
    1d26:	680a      	ldr	r2, [r1, #0]
    1d28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1d2c:	0053      	lsls	r3, r2, #1
				ansi_val += byte - '0';
    1d2e:	4423      	add	r3, r4
    1d30:	3b30      	subs	r3, #48	; 0x30
    1d32:	600b      	str	r3, [r1, #0]
    1d34:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1d36:	4b35      	ldr	r3, [pc, #212]	; (1e0c <handle_ansi+0x204>)
    1d38:	f3bf 8f5b 	dmb	ish
    1d3c:	e853 2f00 	ldrex	r2, [r3]
    1d40:	f042 0110 	orr.w	r1, r2, #16
    1d44:	e843 1000 	strex	r0, r1, [r3]
    1d48:	2800      	cmp	r0, #0
    1d4a:	d1f7      	bne.n	1d3c <handle_ansi+0x134>
    1d4c:	f3bf 8f5b 	dmb	ish
		if (byte == ';' &&
    1d50:	f012 0f10 	tst.w	r2, #16
    1d54:	d1ba      	bne.n	1ccc <handle_ansi+0xc4>
    1d56:	e792      	b.n	1c7e <handle_ansi+0x76>
	switch (byte) {
    1d58:	2c48      	cmp	r4, #72	; 0x48
    1d5a:	d034      	beq.n	1dc6 <handle_ansi+0x1be>
    1d5c:	2c7e      	cmp	r4, #126	; 0x7e
    1d5e:	d181      	bne.n	1c64 <handle_ansi+0x5c>
		if (!end) {
    1d60:	4b2e      	ldr	r3, [pc, #184]	; (1e1c <handle_ansi+0x214>)
    1d62:	781b      	ldrb	r3, [r3, #0]
    1d64:	2b00      	cmp	r3, #0
    1d66:	f43f af7d 	beq.w	1c64 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1d6a:	2101      	movs	r1, #1
    1d6c:	482c      	ldr	r0, [pc, #176]	; (1e20 <handle_ansi+0x218>)
    1d6e:	f001 f923 	bl	2fb8 <printk>
		del_char(&line[cur], --end);
    1d72:	4b28      	ldr	r3, [pc, #160]	; (1e14 <handle_ansi+0x20c>)
    1d74:	7818      	ldrb	r0, [r3, #0]
    1d76:	4b29      	ldr	r3, [pc, #164]	; (1e1c <handle_ansi+0x214>)
    1d78:	7819      	ldrb	r1, [r3, #0]
    1d7a:	3901      	subs	r1, #1
    1d7c:	b2c9      	uxtb	r1, r1
    1d7e:	7019      	strb	r1, [r3, #0]
    1d80:	4428      	add	r0, r5
    1d82:	f7ff fed5 	bl	1b30 <del_char>
		break;
    1d86:	e76d      	b.n	1c64 <handle_ansi+0x5c>
		end += ansi_val;
    1d88:	b2c8      	uxtb	r0, r1
    1d8a:	4c24      	ldr	r4, [pc, #144]	; (1e1c <handle_ansi+0x214>)
    1d8c:	7822      	ldrb	r2, [r4, #0]
    1d8e:	4402      	add	r2, r0
    1d90:	7022      	strb	r2, [r4, #0]
		cur -= ansi_val;
    1d92:	1a1b      	subs	r3, r3, r0
    1d94:	4a1f      	ldr	r2, [pc, #124]	; (1e14 <handle_ansi+0x20c>)
    1d96:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uD", count);
    1d98:	4822      	ldr	r0, [pc, #136]	; (1e24 <handle_ansi+0x21c>)
    1d9a:	f001 f90d 	bl	2fb8 <printk>
    1d9e:	e761      	b.n	1c64 <handle_ansi+0x5c>
		if (ansi_val > end) {
    1da0:	4b1e      	ldr	r3, [pc, #120]	; (1e1c <handle_ansi+0x214>)
    1da2:	781b      	ldrb	r3, [r3, #0]
    1da4:	4a1a      	ldr	r2, [pc, #104]	; (1e10 <handle_ansi+0x208>)
    1da6:	6811      	ldr	r1, [r2, #0]
    1da8:	428b      	cmp	r3, r1
    1daa:	f4ff af5b 	bcc.w	1c64 <handle_ansi+0x5c>
		end -= ansi_val;
    1dae:	b2ca      	uxtb	r2, r1
    1db0:	1a9b      	subs	r3, r3, r2
    1db2:	481a      	ldr	r0, [pc, #104]	; (1e1c <handle_ansi+0x214>)
    1db4:	7003      	strb	r3, [r0, #0]
		cur += ansi_val;
    1db6:	4b17      	ldr	r3, [pc, #92]	; (1e14 <handle_ansi+0x20c>)
    1db8:	7818      	ldrb	r0, [r3, #0]
    1dba:	4402      	add	r2, r0
    1dbc:	701a      	strb	r2, [r3, #0]
	printk("\x1b[%uC", count);
    1dbe:	4818      	ldr	r0, [pc, #96]	; (1e20 <handle_ansi+0x218>)
    1dc0:	f001 f8fa 	bl	2fb8 <printk>
    1dc4:	e74e      	b.n	1c64 <handle_ansi+0x5c>
		if (!cur) {
    1dc6:	4b13      	ldr	r3, [pc, #76]	; (1e14 <handle_ansi+0x20c>)
    1dc8:	7819      	ldrb	r1, [r3, #0]
    1dca:	2900      	cmp	r1, #0
    1dcc:	f43f af4a 	beq.w	1c64 <handle_ansi+0x5c>
	printk("\x1b[%uD", count);
    1dd0:	4814      	ldr	r0, [pc, #80]	; (1e24 <handle_ansi+0x21c>)
    1dd2:	f001 f8f1 	bl	2fb8 <printk>
		end += cur;
    1dd6:	4911      	ldr	r1, [pc, #68]	; (1e1c <handle_ansi+0x214>)
    1dd8:	4a0e      	ldr	r2, [pc, #56]	; (1e14 <handle_ansi+0x20c>)
    1dda:	780b      	ldrb	r3, [r1, #0]
    1ddc:	7810      	ldrb	r0, [r2, #0]
    1dde:	4403      	add	r3, r0
    1de0:	700b      	strb	r3, [r1, #0]
		cur = 0;
    1de2:	2300      	movs	r3, #0
    1de4:	7013      	strb	r3, [r2, #0]
		break;
    1de6:	e73d      	b.n	1c64 <handle_ansi+0x5c>
		if (!end) {
    1de8:	4b0c      	ldr	r3, [pc, #48]	; (1e1c <handle_ansi+0x214>)
    1dea:	7819      	ldrb	r1, [r3, #0]
    1dec:	2900      	cmp	r1, #0
    1dee:	f43f af39 	beq.w	1c64 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1df2:	480b      	ldr	r0, [pc, #44]	; (1e20 <handle_ansi+0x218>)
    1df4:	f001 f8e0 	bl	2fb8 <printk>
		cur += end;
    1df8:	4906      	ldr	r1, [pc, #24]	; (1e14 <handle_ansi+0x20c>)
    1dfa:	4a08      	ldr	r2, [pc, #32]	; (1e1c <handle_ansi+0x214>)
    1dfc:	780b      	ldrb	r3, [r1, #0]
    1dfe:	7810      	ldrb	r0, [r2, #0]
    1e00:	4403      	add	r3, r0
    1e02:	700b      	strb	r3, [r1, #0]
		end = 0;
    1e04:	2300      	movs	r3, #0
    1e06:	7013      	strb	r3, [r2, #0]
		break;
    1e08:	e72c      	b.n	1c64 <handle_ansi+0x5c>
    1e0a:	bf00      	nop
    1e0c:	200003b4 	.word	0x200003b4
    1e10:	2000039c 	.word	0x2000039c
    1e14:	200003b0 	.word	0x200003b0
    1e18:	200003a0 	.word	0x200003a0
    1e1c:	200003b1 	.word	0x200003b1
    1e20:	0002ea64 	.word	0x0002ea64
    1e24:	0002ea5c 	.word	0x0002ea5c

00001e28 <uart_console_isr>:
{
    1e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e2c:	b082      	sub	sp, #8
	while (uart_irq_update(uart_console_dev) &&
    1e2e:	e001      	b.n	1e34 <uart_console_isr+0xc>
	return 0;
    1e30:	2000      	movs	r0, #0
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1e32:	b9d8      	cbnz	r0, 1e6c <uart_console_isr+0x44>
	while (uart_irq_update(uart_console_dev) &&
    1e34:	4b78      	ldr	r3, [pc, #480]	; (2018 <uart_console_isr+0x1f0>)
    1e36:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1e38:	6843      	ldr	r3, [r0, #4]
	if (api->irq_update) {
    1e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	f000 80e7 	beq.w	2010 <uart_console_isr+0x1e8>
		return api->irq_update(dev);
    1e42:	4798      	blx	r3
    1e44:	2800      	cmp	r0, #0
    1e46:	d037      	beq.n	1eb8 <uart_console_isr+0x90>
	       uart_irq_is_pending(uart_console_dev)) {
    1e48:	4b73      	ldr	r3, [pc, #460]	; (2018 <uart_console_isr+0x1f0>)
    1e4a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1e4c:	6843      	ldr	r3, [r0, #4]
	if (api->irq_is_pending)	{
    1e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1e50:	2b00      	cmp	r3, #0
    1e52:	f000 80df 	beq.w	2014 <uart_console_isr+0x1ec>
		return api->irq_is_pending(dev);
    1e56:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
    1e58:	2800      	cmp	r0, #0
    1e5a:	d02d      	beq.n	1eb8 <uart_console_isr+0x90>
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1e5c:	4b6e      	ldr	r3, [pc, #440]	; (2018 <uart_console_isr+0x1f0>)
    1e5e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1e60:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e64:	2b00      	cmp	r3, #0
    1e66:	d0e3      	beq.n	1e30 <uart_console_isr+0x8>
		return api->irq_rx_ready(dev);
    1e68:	4798      	blx	r3
    1e6a:	e7e2      	b.n	1e32 <uart_console_isr+0xa>
		rx = read_uart(uart_console_dev, &byte, 1);
    1e6c:	2201      	movs	r2, #1
    1e6e:	f10d 0107 	add.w	r1, sp, #7
    1e72:	4b69      	ldr	r3, [pc, #420]	; (2018 <uart_console_isr+0x1f0>)
    1e74:	6818      	ldr	r0, [r3, #0]
    1e76:	f7ff fe0b 	bl	1a90 <read_uart>
		if (rx < 0) {
    1e7a:	2800      	cmp	r0, #0
    1e7c:	db1c      	blt.n	1eb8 <uart_console_isr+0x90>
		if (!cmd) {
    1e7e:	4b67      	ldr	r3, [pc, #412]	; (201c <uart_console_isr+0x1f4>)
    1e80:	681b      	ldr	r3, [r3, #0]
    1e82:	b183      	cbz	r3, 1ea6 <uart_console_isr+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1e84:	f3bf 8f5b 	dmb	ish
    1e88:	4b65      	ldr	r3, [pc, #404]	; (2020 <uart_console_isr+0x1f8>)
    1e8a:	681b      	ldr	r3, [r3, #0]
    1e8c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
    1e90:	f013 0f02 	tst.w	r3, #2
    1e94:	d013      	beq.n	1ebe <uart_console_isr+0x96>
			handle_ansi(byte, cmd->line);
    1e96:	4b61      	ldr	r3, [pc, #388]	; (201c <uart_console_isr+0x1f4>)
    1e98:	6819      	ldr	r1, [r3, #0]
    1e9a:	3104      	adds	r1, #4
    1e9c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1ea0:	f7ff feb2 	bl	1c08 <handle_ansi>
			continue;
    1ea4:	e7c6      	b.n	1e34 <uart_console_isr+0xc>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
    1ea6:	2100      	movs	r1, #0
    1ea8:	4b5e      	ldr	r3, [pc, #376]	; (2024 <uart_console_isr+0x1fc>)
    1eaa:	6818      	ldr	r0, [r3, #0]
    1eac:	f026 ff12 	bl	28cd4 <k_queue_get>
    1eb0:	4b5a      	ldr	r3, [pc, #360]	; (201c <uart_console_isr+0x1f4>)
    1eb2:	6018      	str	r0, [r3, #0]
			if (!cmd) {
    1eb4:	2800      	cmp	r0, #0
    1eb6:	d1e5      	bne.n	1e84 <uart_console_isr+0x5c>
}
    1eb8:	b002      	add	sp, #8
    1eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1ebe:	4b58      	ldr	r3, [pc, #352]	; (2020 <uart_console_isr+0x1f8>)
    1ec0:	f3bf 8f5b 	dmb	ish
    1ec4:	e853 2f00 	ldrex	r2, [r3]
    1ec8:	f022 0101 	bic.w	r1, r2, #1
    1ecc:	e843 1000 	strex	r0, r1, [r3]
    1ed0:	2800      	cmp	r0, #0
    1ed2:	d1f7      	bne.n	1ec4 <uart_console_isr+0x9c>
    1ed4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
    1ed8:	f012 0f01 	tst.w	r2, #1
    1edc:	d01d      	beq.n	1f1a <uart_console_isr+0xf2>
			if (byte == ANSI_ESC) {
    1ede:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1ee2:	2b5b      	cmp	r3, #91	; 0x5b
    1ee4:	d1a6      	bne.n	1e34 <uart_console_isr+0xc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1ee6:	4b4e      	ldr	r3, [pc, #312]	; (2020 <uart_console_isr+0x1f8>)
    1ee8:	f3bf 8f5b 	dmb	ish
    1eec:	e853 2f00 	ldrex	r2, [r3]
    1ef0:	f042 0202 	orr.w	r2, r2, #2
    1ef4:	e843 2100 	strex	r1, r2, [r3]
    1ef8:	2900      	cmp	r1, #0
    1efa:	d1f7      	bne.n	1eec <uart_console_isr+0xc4>
    1efc:	f3bf 8f5b 	dmb	ish
    1f00:	f3bf 8f5b 	dmb	ish
    1f04:	e853 2f00 	ldrex	r2, [r3]
    1f08:	f042 0204 	orr.w	r2, r2, #4
    1f0c:	e843 2100 	strex	r1, r2, [r3]
    1f10:	2900      	cmp	r1, #0
    1f12:	d1f7      	bne.n	1f04 <uart_console_isr+0xdc>
    1f14:	f3bf 8f5b 	dmb	ish
			continue;
    1f18:	e78c      	b.n	1e34 <uart_console_isr+0xc>
		if (!isprint(byte)) {
    1f1a:	f028 f995 	bl	2a248 <__locale_ctype_ptr>
    1f1e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    1f22:	4408      	add	r0, r1
    1f24:	7843      	ldrb	r3, [r0, #1]
    1f26:	f013 0f97 	tst.w	r3, #151	; 0x97
    1f2a:	d15f      	bne.n	1fec <uart_console_isr+0x1c4>
			switch (byte) {
    1f2c:	290d      	cmp	r1, #13
    1f2e:	d03c      	beq.n	1faa <uart_console_isr+0x182>
    1f30:	d916      	bls.n	1f60 <uart_console_isr+0x138>
    1f32:	291b      	cmp	r1, #27
    1f34:	d02b      	beq.n	1f8e <uart_console_isr+0x166>
    1f36:	297f      	cmp	r1, #127	; 0x7f
    1f38:	f47f af7c 	bne.w	1e34 <uart_console_isr+0xc>
				if (cur > 0) {
    1f3c:	4b3a      	ldr	r3, [pc, #232]	; (2028 <uart_console_isr+0x200>)
    1f3e:	781b      	ldrb	r3, [r3, #0]
    1f40:	2b00      	cmp	r3, #0
    1f42:	f43f af77 	beq.w	1e34 <uart_console_isr+0xc>
					del_char(&cmd->line[--cur], end);
    1f46:	4a35      	ldr	r2, [pc, #212]	; (201c <uart_console_isr+0x1f4>)
    1f48:	6812      	ldr	r2, [r2, #0]
    1f4a:	3b01      	subs	r3, #1
    1f4c:	b2db      	uxtb	r3, r3
    1f4e:	4936      	ldr	r1, [pc, #216]	; (2028 <uart_console_isr+0x200>)
    1f50:	700b      	strb	r3, [r1, #0]
    1f52:	4413      	add	r3, r2
    1f54:	4a35      	ldr	r2, [pc, #212]	; (202c <uart_console_isr+0x204>)
    1f56:	7811      	ldrb	r1, [r2, #0]
    1f58:	1d18      	adds	r0, r3, #4
    1f5a:	f7ff fde9 	bl	1b30 <del_char>
    1f5e:	e769      	b.n	1e34 <uart_console_isr+0xc>
			switch (byte) {
    1f60:	2909      	cmp	r1, #9
    1f62:	f47f af67 	bne.w	1e34 <uart_console_isr+0xc>
				if (completion_cb && !end) {
    1f66:	4b32      	ldr	r3, [pc, #200]	; (2030 <uart_console_isr+0x208>)
    1f68:	681b      	ldr	r3, [r3, #0]
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	f43f af62 	beq.w	1e34 <uart_console_isr+0xc>
    1f70:	4a2e      	ldr	r2, [pc, #184]	; (202c <uart_console_isr+0x204>)
    1f72:	7812      	ldrb	r2, [r2, #0]
    1f74:	2a00      	cmp	r2, #0
    1f76:	f47f af5d 	bne.w	1e34 <uart_console_isr+0xc>
					cur += completion_cb(cmd->line, cur);
    1f7a:	4a28      	ldr	r2, [pc, #160]	; (201c <uart_console_isr+0x1f4>)
    1f7c:	6810      	ldr	r0, [r2, #0]
    1f7e:	4c2a      	ldr	r4, [pc, #168]	; (2028 <uart_console_isr+0x200>)
    1f80:	7821      	ldrb	r1, [r4, #0]
    1f82:	3004      	adds	r0, #4
    1f84:	4798      	blx	r3
    1f86:	7823      	ldrb	r3, [r4, #0]
    1f88:	4403      	add	r3, r0
    1f8a:	7023      	strb	r3, [r4, #0]
			continue;
    1f8c:	e752      	b.n	1e34 <uart_console_isr+0xc>
    1f8e:	4b24      	ldr	r3, [pc, #144]	; (2020 <uart_console_isr+0x1f8>)
    1f90:	f3bf 8f5b 	dmb	ish
    1f94:	e853 2f00 	ldrex	r2, [r3]
    1f98:	f042 0201 	orr.w	r2, r2, #1
    1f9c:	e843 2100 	strex	r1, r2, [r3]
    1fa0:	2900      	cmp	r1, #0
    1fa2:	d1f7      	bne.n	1f94 <uart_console_isr+0x16c>
    1fa4:	f3bf 8f5b 	dmb	ish
    1fa8:	e744      	b.n	1e34 <uart_console_isr+0xc>
				cmd->line[cur + end] = '\0';
    1faa:	4d1c      	ldr	r5, [pc, #112]	; (201c <uart_console_isr+0x1f4>)
    1fac:	682b      	ldr	r3, [r5, #0]
    1fae:	4f1e      	ldr	r7, [pc, #120]	; (2028 <uart_console_isr+0x200>)
    1fb0:	783a      	ldrb	r2, [r7, #0]
    1fb2:	4e1e      	ldr	r6, [pc, #120]	; (202c <uart_console_isr+0x204>)
    1fb4:	7831      	ldrb	r1, [r6, #0]
    1fb6:	440a      	add	r2, r1
    1fb8:	4413      	add	r3, r2
    1fba:	2400      	movs	r4, #0
    1fbc:	711c      	strb	r4, [r3, #4]
				uart_poll_out(uart_console_dev, '\r');
    1fbe:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2018 <uart_console_isr+0x1f0>
    1fc2:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    1fc6:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1fc8:	685b      	ldr	r3, [r3, #4]
    1fca:	210d      	movs	r1, #13
    1fcc:	4798      	blx	r3
				uart_poll_out(uart_console_dev, '\n');
    1fce:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    1fd2:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1fd4:	685b      	ldr	r3, [r3, #4]
    1fd6:	210a      	movs	r1, #10
    1fd8:	4798      	blx	r3
				cur = 0;
    1fda:	703c      	strb	r4, [r7, #0]
				end = 0;
    1fdc:	7034      	strb	r4, [r6, #0]
				k_fifo_put(lines_queue, cmd);
    1fde:	6829      	ldr	r1, [r5, #0]
    1fe0:	4b14      	ldr	r3, [pc, #80]	; (2034 <uart_console_isr+0x20c>)
    1fe2:	6818      	ldr	r0, [r3, #0]
    1fe4:	f026 fe4e 	bl	28c84 <k_queue_append>
				cmd = NULL;
    1fe8:	602c      	str	r4, [r5, #0]
				break;
    1fea:	e723      	b.n	1e34 <uart_console_isr+0xc>
		if (cur + end < sizeof(cmd->line) - 1) {
    1fec:	4b0e      	ldr	r3, [pc, #56]	; (2028 <uart_console_isr+0x200>)
    1fee:	781b      	ldrb	r3, [r3, #0]
    1ff0:	4a0e      	ldr	r2, [pc, #56]	; (202c <uart_console_isr+0x204>)
    1ff2:	7812      	ldrb	r2, [r2, #0]
    1ff4:	18d0      	adds	r0, r2, r3
    1ff6:	287e      	cmp	r0, #126	; 0x7e
    1ff8:	f63f af1c 	bhi.w	1e34 <uart_console_isr+0xc>
			insert_char(&cmd->line[cur++], byte, end);
    1ffc:	4807      	ldr	r0, [pc, #28]	; (201c <uart_console_isr+0x1f4>)
    1ffe:	6800      	ldr	r0, [r0, #0]
    2000:	1c5d      	adds	r5, r3, #1
    2002:	4c09      	ldr	r4, [pc, #36]	; (2028 <uart_console_isr+0x200>)
    2004:	7025      	strb	r5, [r4, #0]
    2006:	4418      	add	r0, r3
    2008:	3004      	adds	r0, #4
    200a:	f7ff fdc9 	bl	1ba0 <insert_char>
    200e:	e711      	b.n	1e34 <uart_console_isr+0xc>
	return 0;
    2010:	2000      	movs	r0, #0
    2012:	e717      	b.n	1e44 <uart_console_isr+0x1c>
	return 0;
    2014:	2000      	movs	r0, #0
    2016:	e71f      	b.n	1e58 <uart_console_isr+0x30>
    2018:	200003bc 	.word	0x200003bc
    201c:	200003a8 	.word	0x200003a8
    2020:	200003b4 	.word	0x200003b4
    2024:	200003a4 	.word	0x200003a4
    2028:	200003b0 	.word	0x200003b0
    202c:	200003b1 	.word	0x200003b1
    2030:	200003ac 	.word	0x200003ac
    2034:	200003b8 	.word	0x200003b8

00002038 <uart_register_input>:

void uart_register_input(struct k_fifo *avail, struct k_fifo *lines,
			 u8_t (*completion)(char *str, u8_t len))
{
    2038:	b508      	push	{r3, lr}
	avail_queue = avail;
    203a:	4b04      	ldr	r3, [pc, #16]	; (204c <uart_register_input+0x14>)
    203c:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
    203e:	4b04      	ldr	r3, [pc, #16]	; (2050 <uart_register_input+0x18>)
    2040:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
    2042:	4b04      	ldr	r3, [pc, #16]	; (2054 <uart_register_input+0x1c>)
    2044:	601a      	str	r2, [r3, #0]

	console_input_init();
    2046:	f7ff fd39 	bl	1abc <console_input_init>
    204a:	bd08      	pop	{r3, pc}
    204c:	200003a4 	.word	0x200003a4
    2050:	200003b8 	.word	0x200003b8
    2054:	200003ac 	.word	0x200003ac

00002058 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    2058:	b508      	push	{r3, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    205a:	4802      	ldr	r0, [pc, #8]	; (2064 <uart_console_hook_install+0xc>)
    205c:	f000 fe70 	bl	2d40 <__printk_hook_install>
    2060:	bd08      	pop	{r3, pc}
    2062:	bf00      	nop
    2064:	00001a65 	.word	0x00001a65

00002068 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    2068:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    206a:	4804      	ldr	r0, [pc, #16]	; (207c <uart_console_init+0x14>)
    206c:	f025 feda 	bl	27e24 <device_get_binding>
    2070:	4b03      	ldr	r3, [pc, #12]	; (2080 <uart_console_init+0x18>)
    2072:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    2074:	f7ff fff0 	bl	2058 <uart_console_hook_install>

	return 0;
}
    2078:	2000      	movs	r0, #0
    207a:	bd08      	pop	{r3, pc}
    207c:	0002ea6c 	.word	0x0002ea6c
    2080:	200003bc 	.word	0x200003bc

00002084 <sys_rand32_get>:
 *
 * @return a 32-bit number
 */

u32_t sys_rand32_get(void)
{
    2084:	b508      	push	{r3, lr}
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
    2086:	f000 fa73 	bl	2570 <_timer_cycle_get_32>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    208a:	4b08      	ldr	r3, [pc, #32]	; (20ac <sys_rand32_get+0x28>)
    208c:	f3bf 8f5b 	dmb	ish
    2090:	e853 2f00 	ldrex	r2, [r3]
    2094:	4906      	ldr	r1, [pc, #24]	; (20b0 <sys_rand32_get+0x2c>)
    2096:	1851      	adds	r1, r2, r1
    2098:	e843 1e00 	strex	lr, r1, [r3]
    209c:	f1be 0f00 	cmp.w	lr, #0
    20a0:	d1f6      	bne.n	2090 <sys_rand32_get+0xc>
    20a2:	f3bf 8f5b 	dmb	ish
}
    20a6:	4410      	add	r0, r2
    20a8:	bd08      	pop	{r3, pc}
    20aa:	bf00      	nop
    20ac:	200003c0 	.word	0x200003c0
    20b0:	3b9aca0d 	.word	0x3b9aca0d

000020b4 <baudrate_set>:
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    20b4:	6803      	ldr	r3, [r0, #0]
    20b6:	689b      	ldr	r3, [r3, #8]
    20b8:	681b      	ldr	r3, [r3, #0]

	u32_t divisor; /* baud rate divisor */

	/* Use the common nRF5 macros */
	switch (baudrate) {
    20ba:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    20be:	d05b      	beq.n	2178 <baudrate_set+0xc4>
    20c0:	d910      	bls.n	20e4 <baudrate_set+0x30>
    20c2:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    20c6:	d05e      	beq.n	2186 <baudrate_set+0xd2>
    20c8:	d833      	bhi.n	2132 <baudrate_set+0x7e>
    20ca:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    20ce:	d055      	beq.n	217c <baudrate_set+0xc8>
    20d0:	d929      	bls.n	2126 <baudrate_set+0x72>
    20d2:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    20d6:	d054      	beq.n	2182 <baudrate_set+0xce>
    20d8:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    20dc:	d11b      	bne.n	2116 <baudrate_set+0x62>
		break;
	case 76800:
		divisor = NRF5_UART_BAUDRATE_76800;
		break;
	case 115200:
		divisor = NRF5_UART_BAUDRATE_115200;
    20de:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
		break;
    20e2:	e03b      	b.n	215c <baudrate_set+0xa8>
	switch (baudrate) {
    20e4:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    20e8:	d03f      	beq.n	216a <baudrate_set+0xb6>
    20ea:	d90b      	bls.n	2104 <baudrate_set+0x50>
    20ec:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    20f0:	d03e      	beq.n	2170 <baudrate_set+0xbc>
    20f2:	d913      	bls.n	211c <baudrate_set+0x68>
    20f4:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    20f8:	d03c      	beq.n	2174 <baudrate_set+0xc0>
    20fa:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    20fe:	d10a      	bne.n	2116 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_19200;
    2100:	4a27      	ldr	r2, [pc, #156]	; (21a0 <baudrate_set+0xec>)
		break;
    2102:	e02b      	b.n	215c <baudrate_set+0xa8>
	switch (baudrate) {
    2104:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2108:	d046      	beq.n	2198 <baudrate_set+0xe4>
    210a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    210e:	d029      	beq.n	2164 <baudrate_set+0xb0>
    2110:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2114:	d020      	beq.n	2158 <baudrate_set+0xa4>
		break;
	case 1000000:
		divisor = NRF5_UART_BAUDRATE_1000000;
		break;
	default:
		return -EINVAL;
    2116:	f06f 0015 	mvn.w	r0, #21
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;

	return 0;
}
    211a:	4770      	bx	lr
	switch (baudrate) {
    211c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2120:	d1f9      	bne.n	2116 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_4800;
    2122:	4a20      	ldr	r2, [pc, #128]	; (21a4 <baudrate_set+0xf0>)
		break;
    2124:	e01a      	b.n	215c <baudrate_set+0xa8>
	switch (baudrate) {
    2126:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    212a:	d1f4      	bne.n	2116 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_38400;
    212c:	f44f 021d 	mov.w	r2, #10289152	; 0x9d0000
		break;
    2130:	e014      	b.n	215c <baudrate_set+0xa8>
	switch (baudrate) {
    2132:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    2136:	d029      	beq.n	218c <baudrate_set+0xd8>
    2138:	d908      	bls.n	214c <baudrate_set+0x98>
    213a:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    213e:	d028      	beq.n	2192 <baudrate_set+0xde>
    2140:	4a19      	ldr	r2, [pc, #100]	; (21a8 <baudrate_set+0xf4>)
    2142:	4291      	cmp	r1, r2
    2144:	d1e7      	bne.n	2116 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_1000000;
    2146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		break;
    214a:	e007      	b.n	215c <baudrate_set+0xa8>
	switch (baudrate) {
    214c:	4a17      	ldr	r2, [pc, #92]	; (21ac <baudrate_set+0xf8>)
    214e:	4291      	cmp	r1, r2
    2150:	d1e1      	bne.n	2116 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_250000;
    2152:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
		break;
    2156:	e001      	b.n	215c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_300;
    2158:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    215c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    2160:	2000      	movs	r0, #0
    2162:	4770      	bx	lr
		divisor = NRF5_UART_BAUDRATE_1200;
    2164:	f44f 229e 	mov.w	r2, #323584	; 0x4f000
		break;
    2168:	e7f8      	b.n	215c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_2400;
    216a:	f44f 221d 	mov.w	r2, #643072	; 0x9d000
		break;
    216e:	e7f5      	b.n	215c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_9600;
    2170:	4a0f      	ldr	r2, [pc, #60]	; (21b0 <baudrate_set+0xfc>)
		break;
    2172:	e7f3      	b.n	215c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_14400;
    2174:	4a0f      	ldr	r2, [pc, #60]	; (21b4 <baudrate_set+0x100>)
		break;
    2176:	e7f1      	b.n	215c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_28800;
    2178:	4a0f      	ldr	r2, [pc, #60]	; (21b8 <baudrate_set+0x104>)
		break;
    217a:	e7ef      	b.n	215c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_57600;
    217c:	f44f 026b 	mov.w	r2, #15400960	; 0xeb0000
		break;
    2180:	e7ec      	b.n	215c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_76800;
    2182:	4a0e      	ldr	r2, [pc, #56]	; (21bc <baudrate_set+0x108>)
		break;
    2184:	e7ea      	b.n	215c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_230400;
    2186:	f04f 726c 	mov.w	r2, #61865984	; 0x3b00000
		break;
    218a:	e7e7      	b.n	215c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_460800;
    218c:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
		break;
    2190:	e7e4      	b.n	215c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_921600;
    2192:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
		break;
    2196:	e7e1      	b.n	215c <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_600;
    2198:	f44f 321c 	mov.w	r2, #159744	; 0x27000
    219c:	e7de      	b.n	215c <baudrate_set+0xa8>
    219e:	bf00      	nop
    21a0:	004ea000 	.word	0x004ea000
    21a4:	0013b000 	.word	0x0013b000
    21a8:	000f4240 	.word	0x000f4240
    21ac:	0003d090 	.word	0x0003d090
    21b0:	00275000 	.word	0x00275000
    21b4:	003af000 	.word	0x003af000
    21b8:	0075c000 	.word	0x0075c000
    21bc:	013a9000 	.word	0x013a9000

000021c0 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21c0:	6803      	ldr	r3, [r0, #0]
    21c2:	689b      	ldr	r3, [r3, #8]
    21c4:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    21c6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    21ca:	b132      	cbz	r2, 21da <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    21cc:	2000      	movs	r0, #0
    21ce:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    21d2:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    21d6:	700b      	strb	r3, [r1, #0]

	return 0;
    21d8:	4770      	bx	lr
		return -1;
    21da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    21de:	4770      	bx	lr

000021e0 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21e0:	6803      	ldr	r3, [r0, #0]
    21e2:	689b      	ldr	r3, [r3, #8]
    21e4:	681a      	ldr	r2, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    21e6:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    21ea:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    21ee:	2b00      	cmp	r3, #0
    21f0:	d0fb      	beq.n	21ea <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    21f2:	2300      	movs	r3, #0
    21f4:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

	return c;
}
    21f8:	4608      	mov	r0, r1
    21fa:	4770      	bx	lr

000021fc <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21fc:	6803      	ldr	r3, [r0, #0]
    21fe:	689b      	ldr	r3, [r3, #8]
    2200:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    2202:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    2206:	b132      	cbz	r2, 2216 <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    2208:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    220c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    2210:	f000 000f 	and.w	r0, r0, #15
    2214:	4770      	bx	lr
	u32_t error = 0;
    2216:	2000      	movs	r0, #0
    2218:	e7fa      	b.n	2210 <uart_nrf5_err_check+0x14>

0000221a <uart_nrf5_fifo_fill>:

#ifdef CONFIG_UART_INTERRUPT_DRIVEN

/** Interrupt driven FIFO fill function */
static int uart_nrf5_fifo_fill(struct device *dev, const u8_t *tx_data, int len)
{
    221a:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    221c:	6803      	ldr	r3, [r0, #0]
    221e:	689b      	ldr	r3, [r3, #8]
    2220:	681c      	ldr	r4, [r3, #0]
	u8_t num_tx = 0;
    2222:	2300      	movs	r3, #0

	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    2224:	e007      	b.n	2236 <uart_nrf5_fifo_fill+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_TXDRDY = 0;
    2226:	2000      	movs	r0, #0
    2228:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c

		/* Send a character */
		uart->TXD = (u8_t)tx_data[num_tx++];
    222c:	1c58      	adds	r0, r3, #1
    222e:	5ccb      	ldrb	r3, [r1, r3]
    2230:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    2234:	b2c3      	uxtb	r3, r0
	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    2236:	4618      	mov	r0, r3
    2238:	1ad5      	subs	r5, r2, r3
    223a:	2d00      	cmp	r5, #0
    223c:	dd03      	ble.n	2246 <uart_nrf5_fifo_fill+0x2c>
    223e:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    2242:	2d00      	cmp	r5, #0
    2244:	d1ef      	bne.n	2226 <uart_nrf5_fifo_fill+0xc>
	}

	return (int)num_tx;
}
    2246:	bc30      	pop	{r4, r5}
    2248:	4770      	bx	lr

0000224a <uart_nrf5_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrf5_fifo_read(struct device *dev, u8_t *rx_data, const int size)
{
    224a:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    224c:	6803      	ldr	r3, [r0, #0]
    224e:	689b      	ldr	r3, [r3, #8]
    2250:	681c      	ldr	r4, [r3, #0]
	u8_t num_rx = 0;
    2252:	2300      	movs	r3, #0

	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    2254:	e007      	b.n	2266 <uart_nrf5_fifo_read+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_RXDRDY = 0;
    2256:	2000      	movs	r0, #0
    2258:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)uart->RXD;
    225c:	1c58      	adds	r0, r3, #1
    225e:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    2262:	54cd      	strb	r5, [r1, r3]
    2264:	b2c3      	uxtb	r3, r0
	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    2266:	4618      	mov	r0, r3
    2268:	1ad5      	subs	r5, r2, r3
    226a:	2d00      	cmp	r5, #0
    226c:	dd03      	ble.n	2276 <uart_nrf5_fifo_read+0x2c>
    226e:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    2272:	2d00      	cmp	r5, #0
    2274:	d1ef      	bne.n	2256 <uart_nrf5_fifo_read+0xc>
	}

	return num_rx;
}
    2276:	bc30      	pop	{r4, r5}
    2278:	4770      	bx	lr

0000227a <uart_nrf5_irq_tx_enable>:

/** Interrupt driven transfer enabling function */
static void uart_nrf5_irq_tx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    227a:	6803      	ldr	r3, [r0, #0]
    227c:	689b      	ldr	r3, [r3, #8]
    227e:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_TX;
    2280:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2284:	f043 0308 	orr.w	r3, r3, #8
    2288:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    228c:	4770      	bx	lr

0000228e <uart_nrf5_irq_tx_disable>:
}

/** Interrupt driven transfer disabling function */
static void uart_nrf5_irq_tx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    228e:	6803      	ldr	r3, [r0, #0]
    2290:	689b      	ldr	r3, [r3, #8]
    2292:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_TX;
    2294:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2298:	f043 0308 	orr.w	r3, r3, #8
    229c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    22a0:	4770      	bx	lr

000022a2 <uart_nrf5_irq_tx_ready>:
}

/** Interrupt driven transfer ready function */
static int uart_nrf5_irq_tx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    22a2:	6803      	ldr	r3, [r0, #0]
    22a4:	689b      	ldr	r3, [r3, #8]
    22a6:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_TXDRDY;
    22a8:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    22ac:	4770      	bx	lr

000022ae <uart_nrf5_irq_rx_enable>:

/** Interrupt driven receiver enabling function */
static void uart_nrf5_irq_rx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    22ae:	6803      	ldr	r3, [r0, #0]
    22b0:	689b      	ldr	r3, [r3, #8]
    22b2:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_RX;
    22b4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    22b8:	f043 0304 	orr.w	r3, r3, #4
    22bc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    22c0:	4770      	bx	lr

000022c2 <uart_nrf5_irq_rx_disable>:
}

/** Interrupt driven receiver disabling function */
static void uart_nrf5_irq_rx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    22c2:	6803      	ldr	r3, [r0, #0]
    22c4:	689b      	ldr	r3, [r3, #8]
    22c6:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_RX;
    22c8:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    22cc:	f043 0304 	orr.w	r3, r3, #4
    22d0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    22d4:	4770      	bx	lr

000022d6 <uart_nrf5_irq_tx_complete>:
}

/** Interrupt driven transfer empty function */
static int uart_nrf5_irq_tx_complete(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    22d6:	6803      	ldr	r3, [r0, #0]
    22d8:	689b      	ldr	r3, [r3, #8]
    22da:	681b      	ldr	r3, [r3, #0]

	return !(uart->EVENTS_TXDRDY);
    22dc:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    22e0:	fab0 f080 	clz	r0, r0
    22e4:	0940      	lsrs	r0, r0, #5
    22e6:	4770      	bx	lr

000022e8 <uart_nrf5_irq_rx_ready>:

/** Interrupt driven receiver ready function */
static int uart_nrf5_irq_rx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    22e8:	6803      	ldr	r3, [r0, #0]
    22ea:	689b      	ldr	r3, [r3, #8]
    22ec:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_RXDRDY;
    22ee:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    22f2:	4770      	bx	lr

000022f4 <uart_nrf5_irq_err_enable>:

/** Interrupt driven error enabling function */
static void uart_nrf5_irq_err_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    22f4:	6803      	ldr	r3, [r0, #0]
    22f6:	689b      	ldr	r3, [r3, #8]
    22f8:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_ERROR;
    22fa:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    22fe:	f043 0310 	orr.w	r3, r3, #16
    2302:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2306:	4770      	bx	lr

00002308 <uart_nrf5_irq_err_disable>:
}

/** Interrupt driven error disabling function */
static void uart_nrf5_irq_err_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2308:	6803      	ldr	r3, [r0, #0]
    230a:	689b      	ldr	r3, [r3, #8]
    230c:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_ERROR;
    230e:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2312:	f043 0310 	orr.w	r3, r3, #16
    2316:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    231a:	4770      	bx	lr

0000231c <uart_nrf5_irq_is_pending>:
}

/** Interrupt driven pending status function */
static int uart_nrf5_irq_is_pending(struct device *dev)
{
    231c:	b510      	push	{r4, lr}
    231e:	4604      	mov	r4, r0
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    2320:	f7ff ffbf 	bl	22a2 <uart_nrf5_irq_tx_ready>
    2324:	b110      	cbz	r0, 232c <uart_nrf5_irq_is_pending+0x10>
    2326:	2301      	movs	r3, #1
}
    2328:	4618      	mov	r0, r3
    232a:	bd10      	pop	{r4, pc}
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    232c:	4620      	mov	r0, r4
    232e:	f7ff ffdb 	bl	22e8 <uart_nrf5_irq_rx_ready>
    2332:	4603      	mov	r3, r0
    2334:	2800      	cmp	r0, #0
    2336:	d0f7      	beq.n	2328 <uart_nrf5_irq_is_pending+0xc>
    2338:	2301      	movs	r3, #1
    233a:	e7f5      	b.n	2328 <uart_nrf5_irq_is_pending+0xc>

0000233c <uart_nrf5_irq_update>:

/** Interrupt driven interrupt update function */
static int uart_nrf5_irq_update(struct device *dev)
{
	return 1;
}
    233c:	2001      	movs	r0, #1
    233e:	4770      	bx	lr

00002340 <uart_nrf5_irq_callback_set>:

/** Set the callback function */
static void uart_nrf5_irq_callback_set(struct device *dev, uart_irq_callback_t cb)
{
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    2340:	6883      	ldr	r3, [r0, #8]

	dev_data->cb = cb;
    2342:	6059      	str	r1, [r3, #4]
    2344:	4770      	bx	lr

00002346 <uart_nrf5_isr>:
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
void uart_nrf5_isr(void *arg)
{
    2346:	b508      	push	{r3, lr}
	struct device *dev = arg;
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    2348:	6883      	ldr	r3, [r0, #8]

	if (dev_data->cb) {
    234a:	685b      	ldr	r3, [r3, #4]
    234c:	b103      	cbz	r3, 2350 <uart_nrf5_isr+0xa>
		dev_data->cb(dev);
    234e:	4798      	blx	r3
    2350:	bd08      	pop	{r3, pc}

00002352 <uart_nrf5_irq_config>:
	    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);


#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void uart_nrf5_irq_config(struct device *port)
{
    2352:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_UART0_IRQn,
    2354:	2200      	movs	r2, #0
    2356:	2101      	movs	r1, #1
    2358:	2002      	movs	r0, #2
    235a:	f025 fbbf 	bl	27adc <_irq_priority_set>
		    CONFIG_UART_NRF5_IRQ_PRI,
		    uart_nrf5_isr, DEVICE_GET(uart_nrf5_0),
		    0);
	irq_enable(NRF5_IRQ_UART0_IRQn);
    235e:	2002      	movs	r0, #2
    2360:	f025 fb92 	bl	27a88 <_arch_irq_enable>
    2364:	bd08      	pop	{r3, pc}
	...

00002368 <uart_nrf5_init>:
{
    2368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    236a:	4604      	mov	r4, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
    236c:	6803      	ldr	r3, [r0, #0]
    236e:	689b      	ldr	r3, [r3, #8]
    2370:	681d      	ldr	r5, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    2372:	481d      	ldr	r0, [pc, #116]	; (23e8 <uart_nrf5_init+0x80>)
    2374:	f025 fd56 	bl	27e24 <device_get_binding>
    2378:	4606      	mov	r6, r0
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
    237a:	6843      	ldr	r3, [r0, #4]

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    237c:	681f      	ldr	r7, [r3, #0]
    237e:	f240 1301 	movw	r3, #257	; 0x101
    2382:	2206      	movs	r2, #6
    2384:	2100      	movs	r1, #0
    2386:	47b8      	blx	r7
	const struct gpio_driver_api *api = port->driver_api;
    2388:	6873      	ldr	r3, [r6, #4]
	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    238a:	681f      	ldr	r7, [r3, #0]
    238c:	2300      	movs	r3, #0
    238e:	2208      	movs	r2, #8
    2390:	4619      	mov	r1, r3
    2392:	4630      	mov	r0, r6
    2394:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    2396:	2306      	movs	r3, #6
    2398:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    239c:	2308      	movs	r3, #8
    239e:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    23a2:	68a3      	ldr	r3, [r4, #8]
    23a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    23a8:	601a      	str	r2, [r3, #0]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    23aa:	68a3      	ldr	r3, [r4, #8]
		     DEV_CFG(dev)->sys_clk_freq);
    23ac:	6822      	ldr	r2, [r4, #0]
    23ae:	6892      	ldr	r2, [r2, #8]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    23b0:	6852      	ldr	r2, [r2, #4]
    23b2:	6819      	ldr	r1, [r3, #0]
    23b4:	4620      	mov	r0, r4
    23b6:	f7ff fe7d 	bl	20b4 <baudrate_set>
	if (err) {
    23ba:	4606      	mov	r6, r0
    23bc:	b108      	cbz	r0, 23c2 <uart_nrf5_init+0x5a>
}
    23be:	4630      	mov	r0, r6
    23c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    23c2:	2304      	movs	r3, #4
    23c4:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    23c8:	2300      	movs	r3, #0
    23ca:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    23ce:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    23d2:	2301      	movs	r3, #1
    23d4:	60ab      	str	r3, [r5, #8]
	uart->TASKS_STARTRX = 1;
    23d6:	602b      	str	r3, [r5, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    23d8:	4b04      	ldr	r3, [pc, #16]	; (23ec <uart_nrf5_init+0x84>)
    23da:	6063      	str	r3, [r4, #4]
	DEV_CFG(dev)->irq_config_func(dev);
    23dc:	6823      	ldr	r3, [r4, #0]
    23de:	689b      	ldr	r3, [r3, #8]
    23e0:	689b      	ldr	r3, [r3, #8]
    23e2:	4620      	mov	r0, r4
    23e4:	4798      	blx	r3
	return 0;
    23e6:	e7ea      	b.n	23be <uart_nrf5_init+0x56>
    23e8:	0002ea80 	.word	0x0002ea80
    23ec:	0002eaac 	.word	0x0002eaac

000023f0 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    23f0:	4b08      	ldr	r3, [pc, #32]	; (2414 <rtc_compare_set+0x24>)
    23f2:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    23f6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    23fa:	1ac0      	subs	r0, r0, r3
    23fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2400:	3802      	subs	r0, #2
    2402:	4b05      	ldr	r3, [pc, #20]	; (2418 <rtc_compare_set+0x28>)
    2404:	4298      	cmp	r0, r3
    2406:	d904      	bls.n	2412 <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2408:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    240c:	4b03      	ldr	r3, [pc, #12]	; (241c <rtc_compare_set+0x2c>)
    240e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2412:	4770      	bx	lr
    2414:	40011000 	.word	0x40011000
    2418:	007ffffd 	.word	0x007ffffd
    241c:	e000e100 	.word	0xe000e100

00002420 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    2420:	b508      	push	{r3, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    2422:	4b15      	ldr	r3, [pc, #84]	; (2478 <rtc_announce_set_next+0x58>)
    2424:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    2428:	4a14      	ldr	r2, [pc, #80]	; (247c <rtc_announce_set_next+0x5c>)
    242a:	6811      	ldr	r1, [r2, #0]
    242c:	1a5b      	subs	r3, r3, r1
    242e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    2432:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
    2436:	d917      	bls.n	2468 <rtc_announce_set_next+0x48>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    2438:	4a11      	ldr	r2, [pc, #68]	; (2480 <rtc_announce_set_next+0x60>)
    243a:	fba2 0203 	umull	r0, r2, r2, r3
    243e:	1a9b      	subs	r3, r3, r2
    2440:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    2444:	0a1b      	lsrs	r3, r3, #8

		if (sys_elapsed > expected_sys_ticks) {
    2446:	4a0f      	ldr	r2, [pc, #60]	; (2484 <rtc_announce_set_next+0x64>)
    2448:	6810      	ldr	r0, [r2, #0]
    244a:	4283      	cmp	r3, r0
    244c:	d800      	bhi.n	2450 <rtc_announce_set_next+0x30>
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    244e:	4618      	mov	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    2450:	f240 1347 	movw	r3, #327	; 0x147
    2454:	fb03 1300 	mla	r3, r3, r0, r1
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    2458:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    245c:	4a07      	ldr	r2, [pc, #28]	; (247c <rtc_announce_set_next+0x5c>)
    245e:	6013      	str	r3, [r2, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    2460:	4b09      	ldr	r3, [pc, #36]	; (2488 <rtc_announce_set_next+0x68>)
    2462:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    2464:	f027 f826 	bl	294b4 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    2468:	4b04      	ldr	r3, [pc, #16]	; (247c <rtc_announce_set_next+0x5c>)
    246a:	6818      	ldr	r0, [r3, #0]
    246c:	f200 1047 	addw	r0, r0, #327	; 0x147
    2470:	f7ff ffbe 	bl	23f0 <rtc_compare_set>
    2474:	bd08      	pop	{r3, pc}
    2476:	bf00      	nop
    2478:	40011000 	.word	0x40011000
    247c:	200003c8 	.word	0x200003c8
    2480:	90d4f121 	.word	0x90d4f121
    2484:	200003c4 	.word	0x200003c4
    2488:	2000c680 	.word	0x2000c680

0000248c <rtc1_nrf5_isr>:
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
    248c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    248e:	2200      	movs	r2, #0
    2490:	4b02      	ldr	r3, [pc, #8]	; (249c <rtc1_nrf5_isr+0x10>)
    2492:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    2496:	f7ff ffc3 	bl	2420 <rtc_announce_set_next>
    249a:	bd08      	pop	{r3, pc}
    249c:	40011000 	.word	0x40011000

000024a0 <_timer_idle_enter>:
{
    24a0:	b508      	push	{r3, lr}
	if ((sys_ticks < 0) ||
    24a2:	f246 4335 	movw	r3, #25653	; 0x6435
    24a6:	4298      	cmp	r0, r3
    24a8:	d900      	bls.n	24ac <_timer_idle_enter+0xc>
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    24aa:	4618      	mov	r0, r3
	expected_sys_ticks = sys_ticks;
    24ac:	4b05      	ldr	r3, [pc, #20]	; (24c4 <_timer_idle_enter+0x24>)
    24ae:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    24b0:	4b05      	ldr	r3, [pc, #20]	; (24c8 <_timer_idle_enter+0x28>)
    24b2:	681b      	ldr	r3, [r3, #0]
    24b4:	f240 1247 	movw	r2, #327	; 0x147
    24b8:	fb02 3000 	mla	r0, r2, r0, r3
    24bc:	f7ff ff98 	bl	23f0 <rtc_compare_set>
    24c0:	bd08      	pop	{r3, pc}
    24c2:	bf00      	nop
    24c4:	200003c4 	.word	0x200003c4
    24c8:	200003c8 	.word	0x200003c8

000024cc <_timer_idle_exit>:
{
    24cc:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    24ce:	2200      	movs	r2, #0
    24d0:	4b06      	ldr	r3, [pc, #24]	; (24ec <_timer_idle_exit+0x20>)
    24d2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    24da:	4b05      	ldr	r3, [pc, #20]	; (24f0 <_timer_idle_exit+0x24>)
    24dc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    24e0:	f7ff ff9e 	bl	2420 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    24e4:	2201      	movs	r2, #1
    24e6:	4b03      	ldr	r3, [pc, #12]	; (24f4 <_timer_idle_exit+0x28>)
    24e8:	601a      	str	r2, [r3, #0]
    24ea:	bd08      	pop	{r3, pc}
    24ec:	40011000 	.word	0x40011000
    24f0:	e000e100 	.word	0xe000e100
    24f4:	200003c4 	.word	0x200003c4

000024f8 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    24f8:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    24fa:	4818      	ldr	r0, [pc, #96]	; (255c <_sys_clock_driver_init+0x64>)
    24fc:	f025 fc92 	bl	27e24 <device_get_binding>
	if (!clock) {
    2500:	b348      	cbz	r0, 2556 <_sys_clock_driver_init+0x5e>
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    2502:	6842      	ldr	r2, [r0, #4]

	return api->on(dev, sys);
    2504:	6812      	ldr	r2, [r2, #0]
    2506:	2101      	movs	r1, #1
    2508:	4790      	blx	r2
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    250a:	2400      	movs	r4, #0
    250c:	4b14      	ldr	r3, [pc, #80]	; (2560 <_sys_clock_driver_init+0x68>)
    250e:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    2510:	2601      	movs	r6, #1
    2512:	4b14      	ldr	r3, [pc, #80]	; (2564 <_sys_clock_driver_init+0x6c>)
    2514:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    2516:	4d14      	ldr	r5, [pc, #80]	; (2568 <_sys_clock_driver_init+0x70>)
    2518:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    251c:	f240 1347 	movw	r3, #327	; 0x147
    2520:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    2524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2528:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    252c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    2530:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    2534:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2538:	4b0c      	ldr	r3, [pc, #48]	; (256c <_sys_clock_driver_init+0x74>)
    253a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    253e:	4622      	mov	r2, r4
    2540:	4631      	mov	r1, r6
    2542:	2011      	movs	r0, #17
    2544:	f025 faca 	bl	27adc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    2548:	2011      	movs	r0, #17
    254a:	f025 fa9d 	bl	27a88 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    254e:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;
    2550:	602e      	str	r6, [r5, #0]

	return 0;
    2552:	4620      	mov	r0, r4
    2554:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    2556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    255a:	bd70      	pop	{r4, r5, r6, pc}
    255c:	0002ea88 	.word	0x0002ea88
    2560:	200003c8 	.word	0x200003c8
    2564:	200003c4 	.word	0x200003c4
    2568:	40011000 	.word	0x40011000
    256c:	e000e100 	.word	0xe000e100

00002570 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    2570:	b410      	push	{r4}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    2572:	4b0d      	ldr	r3, [pc, #52]	; (25a8 <_timer_cycle_get_32+0x38>)
    2574:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    2578:	e000      	b.n	257c <_timer_cycle_get_32+0xc>
		sys_clock_tick_count = _sys_clock_tick_count;
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    257a:	4619      	mov	r1, r3
		sys_clock_tick_count = _sys_clock_tick_count;
    257c:	4b0b      	ldr	r3, [pc, #44]	; (25ac <_timer_cycle_get_32+0x3c>)
    257e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2582:	4614      	mov	r4, r2
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    2584:	f240 1047 	movw	r0, #327	; 0x147
    2588:	fb00 1212 	mls	r2, r0, r2, r1
    258c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		rtc_now = RTC_COUNTER;
    2590:	4b05      	ldr	r3, [pc, #20]	; (25a8 <_timer_cycle_get_32+0x38>)
    2592:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    2596:	4299      	cmp	r1, r3
    2598:	d1ef      	bne.n	257a <_timer_cycle_get_32+0xa>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    259a:	4b05      	ldr	r3, [pc, #20]	; (25b0 <_timer_cycle_get_32+0x40>)
    259c:	6818      	ldr	r0, [r3, #0]
	       elapsed_cycles;
}
    259e:	fb00 2004 	mla	r0, r0, r4, r2
    25a2:	bc10      	pop	{r4}
    25a4:	4770      	bx	lr
    25a6:	bf00      	nop
    25a8:	40011000 	.word	0x40011000
    25ac:	20002c70 	.word	0x20002c70
    25b0:	2000c684 	.word	0x2000c684

000025b4 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
    25b4:	b410      	push	{r4}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    25b6:	6803      	ldr	r3, [r0, #0]
    25b8:	689b      	ldr	r3, [r3, #8]
    25ba:	689c      	ldr	r4, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    25bc:	6882      	ldr	r2, [r0, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    25be:	2000      	movs	r0, #0
    25c0:	e000      	b.n	25c4 <gpiote_find_channel+0x10>
    25c2:	3001      	adds	r0, #1
    25c4:	2807      	cmp	r0, #7
    25c6:	dc0d      	bgt.n	25e4 <gpiote_find_channel+0x30>
		if ((data->gpiote_chan_mask & BIT(i)) &&
    25c8:	68d3      	ldr	r3, [r2, #12]
    25ca:	40c3      	lsrs	r3, r0
    25cc:	f013 0f01 	tst.w	r3, #1
    25d0:	d0f7      	beq.n	25c2 <gpiote_find_channel+0xe>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    25d2:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    25d6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    25da:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    25de:	428b      	cmp	r3, r1
    25e0:	d1ef      	bne.n	25c2 <gpiote_find_channel+0xe>
    25e2:	e001      	b.n	25e8 <gpiote_find_channel+0x34>
			return i;
		}
	}

	return -ENODEV;
    25e4:	f06f 0012 	mvn.w	r0, #18
}
    25e8:	bc10      	pop	{r4}
    25ea:	4770      	bx	lr

000025ec <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    25ec:	6800      	ldr	r0, [r0, #0]
    25ee:	6880      	ldr	r0, [r0, #8]
    25f0:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    25f2:	b121      	cbz	r1, 25fe <gpio_nrf5_read+0x12>
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
    25f4:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    25f8:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    25fa:	2000      	movs	r0, #0
    25fc:	4770      	bx	lr
		*value = (gpio->IN >> pin) & 0x1;
    25fe:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    2602:	fa21 f202 	lsr.w	r2, r1, r2
    2606:	f002 0201 	and.w	r2, r2, #1
    260a:	601a      	str	r2, [r3, #0]
    260c:	e7f5      	b.n	25fa <gpio_nrf5_read+0xe>

0000260e <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    260e:	6800      	ldr	r0, [r0, #0]
    2610:	6880      	ldr	r0, [r0, #8]
    2612:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2614:	b961      	cbnz	r1, 2630 <gpio_nrf5_write+0x22>
		if (value) { /* 1 */
    2616:	b12b      	cbz	r3, 2624 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    2618:	2301      	movs	r3, #1
    261a:	fa03 f202 	lsl.w	r2, r3, r2
    261e:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    2622:	e007      	b.n	2634 <gpio_nrf5_write+0x26>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    2624:	2301      	movs	r3, #1
    2626:	fa03 f202 	lsl.w	r2, r3, r2
    262a:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    262e:	e001      	b.n	2634 <gpio_nrf5_write+0x26>
		}
	} else {
		gpio->OUT = value;
    2630:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
	}
	return 0;
}
    2634:	2000      	movs	r0, #0
    2636:	4770      	bx	lr

00002638 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    2638:	b410      	push	{r4}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    263a:	6884      	ldr	r4, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    263c:	b14a      	cbz	r2, 2652 <gpio_nrf5_manage_callback+0x1a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    263e:	6823      	ldr	r3, [r4, #0]
    2640:	600b      	str	r3, [r1, #0]
	list->head = node;
    2642:	6021      	str	r1, [r4, #0]

	if (!list->tail) {
    2644:	6863      	ldr	r3, [r4, #4]
    2646:	b113      	cbz	r3, 264e <gpio_nrf5_manage_callback+0x16>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    2648:	2000      	movs	r0, #0
    264a:	bc10      	pop	{r4}
    264c:	4770      	bx	lr
		list->tail = list->head;
    264e:	6061      	str	r1, [r4, #4]
    2650:	e7fa      	b.n	2648 <gpio_nrf5_manage_callback+0x10>
		sys_slist_prepend(callbacks, &callback->node);
	} else {
		sys_slist_find_and_remove(callbacks, &callback->node);
    2652:	4608      	mov	r0, r1
	return list->head;
    2654:	6823      	ldr	r3, [r4, #0]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    2656:	2200      	movs	r2, #0
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2658:	2b00      	cmp	r3, #0
    265a:	d0f5      	beq.n	2648 <gpio_nrf5_manage_callback+0x10>
		if (test == node) {
    265c:	4298      	cmp	r0, r3
    265e:	d002      	beq.n	2666 <gpio_nrf5_manage_callback+0x2e>
			sys_slist_remove(list, prev, node);
			return true;
		}

		prev = test;
    2660:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2662:	681b      	ldr	r3, [r3, #0]
    2664:	e7f8      	b.n	2658 <gpio_nrf5_manage_callback+0x20>
	if (!prev_node) {
    2666:	b13a      	cbz	r2, 2678 <gpio_nrf5_manage_callback+0x40>
		prev_node->next = node->next;
    2668:	680b      	ldr	r3, [r1, #0]
    266a:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    266c:	6863      	ldr	r3, [r4, #4]
    266e:	4299      	cmp	r1, r3
    2670:	d009      	beq.n	2686 <gpio_nrf5_manage_callback+0x4e>
	node->next = NULL;
    2672:	2300      	movs	r3, #0
    2674:	600b      	str	r3, [r1, #0]
    2676:	e7e7      	b.n	2648 <gpio_nrf5_manage_callback+0x10>
		list->head = node->next;
    2678:	680b      	ldr	r3, [r1, #0]
    267a:	6023      	str	r3, [r4, #0]
		if (list->tail == node) {
    267c:	6862      	ldr	r2, [r4, #4]
    267e:	4291      	cmp	r1, r2
    2680:	d1f7      	bne.n	2672 <gpio_nrf5_manage_callback+0x3a>
			list->tail = list->head;
    2682:	6063      	str	r3, [r4, #4]
    2684:	e7f5      	b.n	2672 <gpio_nrf5_manage_callback+0x3a>
			list->tail = prev_node;
    2686:	6062      	str	r2, [r4, #4]
    2688:	e7f3      	b.n	2672 <gpio_nrf5_manage_callback+0x3a>

0000268a <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    268a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    268c:	6803      	ldr	r3, [r0, #0]
    268e:	689b      	ldr	r3, [r3, #8]
    2690:	689e      	ldr	r6, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2692:	6887      	ldr	r7, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2694:	b9b9      	cbnz	r1, 26c6 <gpio_nrf5_enable_callback+0x3c>
    2696:	460d      	mov	r5, r1
    2698:	4614      	mov	r4, r2

		i = gpiote_find_channel(dev, pin);
    269a:	4611      	mov	r1, r2
    269c:	f7ff ff8a 	bl	25b4 <gpiote_find_channel>
		if (i < 0) {
    26a0:	2800      	cmp	r0, #0
    26a2:	db12      	blt.n	26ca <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    26a4:	2301      	movs	r3, #1
    26a6:	fa03 f404 	lsl.w	r4, r3, r4
    26aa:	68ba      	ldr	r2, [r7, #8]
    26ac:	4314      	orrs	r4, r2
    26ae:	60bc      	str	r4, [r7, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    26b0:	f100 0240 	add.w	r2, r0, #64	; 0x40
    26b4:	2100      	movs	r1, #0
    26b6:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    26ba:	fa03 f000 	lsl.w	r0, r3, r0
    26be:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    26c2:	4628      	mov	r0, r5
    26c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    26c6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    26ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000026cc <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    26cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    26ce:	6803      	ldr	r3, [r0, #0]
    26d0:	689b      	ldr	r3, [r3, #8]
    26d2:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    26d4:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    26d6:	b991      	cbnz	r1, 26fe <gpio_nrf5_disable_callback+0x32>
    26d8:	460d      	mov	r5, r1
    26da:	4614      	mov	r4, r2
		i = gpiote_find_channel(dev, pin);
    26dc:	4611      	mov	r1, r2
    26de:	f7ff ff69 	bl	25b4 <gpiote_find_channel>
		if (i < 0) {
    26e2:	2800      	cmp	r0, #0
    26e4:	db0d      	blt.n	2702 <gpio_nrf5_disable_callback+0x36>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    26e6:	2301      	movs	r3, #1
    26e8:	fa03 f404 	lsl.w	r4, r3, r4
    26ec:	68b2      	ldr	r2, [r6, #8]
    26ee:	ea22 0404 	bic.w	r4, r2, r4
    26f2:	60b4      	str	r4, [r6, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    26f4:	4083      	lsls	r3, r0
    26f6:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    26fa:	4628      	mov	r0, r5
    26fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    26fe:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002704 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    2704:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    2706:	2200      	movs	r2, #0
    2708:	2101      	movs	r1, #1
    270a:	2006      	movs	r0, #6
    270c:	f025 f9e6 	bl	27adc <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2710:	2006      	movs	r0, #6
    2712:	f025 f9b9 	bl	27a88 <_arch_irq_enable>

	return 0;
}
    2716:	2000      	movs	r0, #0
    2718:	bd08      	pop	{r3, pc}

0000271a <gpio_nrf5_port_isr>:
{
    271a:	b570      	push	{r4, r5, r6, lr}
    271c:	4605      	mov	r5, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    271e:	6803      	ldr	r3, [r0, #0]
    2720:	689b      	ldr	r3, [r3, #8]
    2722:	6899      	ldr	r1, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2724:	6884      	ldr	r4, [r0, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2726:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    2728:	461e      	mov	r6, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    272a:	e000      	b.n	272e <gpio_nrf5_port_isr+0x14>
    272c:	3301      	adds	r3, #1
    272e:	2b07      	cmp	r3, #7
    2730:	dc14      	bgt.n	275c <gpio_nrf5_port_isr+0x42>
		if (gpiote->EVENTS_IN[i]) {
    2732:	f103 0240 	add.w	r2, r3, #64	; 0x40
    2736:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    273a:	2a00      	cmp	r2, #0
    273c:	d0f6      	beq.n	272c <gpio_nrf5_port_isr+0x12>
			gpiote->EVENTS_IN[i] = 0;
    273e:	f103 0240 	add.w	r2, r3, #64	; 0x40
    2742:	2000      	movs	r0, #0
    2744:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    2748:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    274c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    2750:	f3c0 2004 	ubfx	r0, r0, #8, #5
    2754:	2201      	movs	r2, #1
    2756:	4082      	lsls	r2, r0
    2758:	4316      	orrs	r6, r2
    275a:	e7e7      	b.n	272c <gpio_nrf5_port_isr+0x12>
	enabled_int = int_status & data->pin_callback_enables;
    275c:	68a3      	ldr	r3, [r4, #8]
    275e:	401e      	ands	r6, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    2760:	2006      	movs	r0, #6
    2762:	f025 f99f 	bl	27aa4 <_arch_irq_disable>
	return list->head;
    2766:	6824      	ldr	r4, [r4, #0]
    2768:	e005      	b.n	2776 <gpio_nrf5_port_isr+0x5c>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    276a:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    276c:	b16c      	cbz	r4, 278a <gpio_nrf5_port_isr+0x70>
	return node->next;
    276e:	6823      	ldr	r3, [r4, #0]
    2770:	b16b      	cbz	r3, 278e <gpio_nrf5_port_isr+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    2772:	b172      	cbz	r2, 2792 <gpio_nrf5_port_isr+0x78>
	return node->next;
    2774:	6824      	ldr	r4, [r4, #0]
    2776:	b174      	cbz	r4, 2796 <gpio_nrf5_port_isr+0x7c>
		if (cb->pin_mask & pins) {
    2778:	68a3      	ldr	r3, [r4, #8]
    277a:	421e      	tst	r6, r3
    277c:	d0f5      	beq.n	276a <gpio_nrf5_port_isr+0x50>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    277e:	6863      	ldr	r3, [r4, #4]
    2780:	4632      	mov	r2, r6
    2782:	4621      	mov	r1, r4
    2784:	4628      	mov	r0, r5
    2786:	4798      	blx	r3
    2788:	e7ef      	b.n	276a <gpio_nrf5_port_isr+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    278a:	4623      	mov	r3, r4
    278c:	e7f0      	b.n	2770 <gpio_nrf5_port_isr+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    278e:	2400      	movs	r4, #0
    2790:	e7f1      	b.n	2776 <gpio_nrf5_port_isr+0x5c>
    2792:	2400      	movs	r4, #0
    2794:	e7ef      	b.n	2776 <gpio_nrf5_port_isr+0x5c>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2796:	2006      	movs	r0, #6
    2798:	f025 f976 	bl	27a88 <_arch_irq_enable>
    279c:	bd70      	pop	{r4, r5, r6, pc}
	...

000027a0 <gpio_nrf5_config>:
{
    27a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    27a4:	6804      	ldr	r4, [r0, #0]
    27a6:	68a5      	ldr	r5, [r4, #8]
    27a8:	68ae      	ldr	r6, [r5, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    27aa:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    27ac:	682d      	ldr	r5, [r5, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    27ae:	2900      	cmp	r1, #0
    27b0:	d17f      	bne.n	28b2 <gpio_nrf5_config+0x112>
    27b2:	4688      	mov	r8, r1
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    27b4:	f3c3 3e01 	ubfx	lr, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    27b8:	f3c3 3181 	ubfx	r1, r3, #14, #2
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    27bc:	f403 7440 	and.w	r4, r3, #768	; 0x300
    27c0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    27c4:	d025      	beq.n	2812 <gpio_nrf5_config+0x72>
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    27c6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    27ca:	d024      	beq.n	2816 <gpio_nrf5_config+0x76>
		u8_t pull = GPIO_PULL_DISABLE;
    27cc:	2400      	movs	r4, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    27ce:	f013 0f01 	tst.w	r3, #1
    27d2:	d030      	beq.n	2836 <gpio_nrf5_config+0x96>
			if (pull == GPIO_PULL_UP) {
    27d4:	2c0c      	cmp	r4, #12
    27d6:	d020      	beq.n	281a <gpio_nrf5_config+0x7a>
			} else if (pull == GPIO_PULL_DOWN) {
    27d8:	2c04      	cmp	r4, #4
    27da:	d025      	beq.n	2828 <gpio_nrf5_config+0x88>
					      drive_strength[ds_low][ds_high] |
    27dc:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
    27e0:	4938      	ldr	r1, [pc, #224]	; (28c4 <gpio_nrf5_config+0x124>)
    27e2:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
    27e6:	4321      	orrs	r1, r4
					      GPIO_INPUT_DISCONNECT |
    27e8:	f041 0103 	orr.w	r1, r1, #3
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    27ec:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    27f0:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
	if (flags & GPIO_INT) {
    27f4:	f013 0102 	ands.w	r1, r3, #2
    27f8:	d04a      	beq.n	2890 <gpio_nrf5_config+0xf0>
		if (flags & GPIO_INT_EDGE) {
    27fa:	f013 0f20 	tst.w	r3, #32
    27fe:	d05b      	beq.n	28b8 <gpio_nrf5_config+0x118>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    2800:	f013 0f40 	tst.w	r3, #64	; 0x40
    2804:	d123      	bne.n	284e <gpio_nrf5_config+0xae>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    2806:	f013 0f04 	tst.w	r3, #4
    280a:	d044      	beq.n	2896 <gpio_nrf5_config+0xf6>
				config |= GPIOTE_CFG_POL_L2H;
    280c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    2810:	e01f      	b.n	2852 <gpio_nrf5_config+0xb2>
			pull = GPIO_PULL_UP;
    2812:	240c      	movs	r4, #12
    2814:	e7db      	b.n	27ce <gpio_nrf5_config+0x2e>
			pull = GPIO_PULL_DOWN;
    2816:	2404      	movs	r4, #4
    2818:	e7d9      	b.n	27ce <gpio_nrf5_config+0x2e>
				gpio->OUTSET = BIT(pin);
    281a:	f04f 0c01 	mov.w	ip, #1
    281e:	fa0c fc02 	lsl.w	ip, ip, r2
    2822:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
    2826:	e7d9      	b.n	27dc <gpio_nrf5_config+0x3c>
				gpio->OUTCLR = BIT(pin);
    2828:	f04f 0c01 	mov.w	ip, #1
    282c:	fa0c fc02 	lsl.w	ip, ip, r2
    2830:	f8c5 c50c 	str.w	ip, [r5, #1292]	; 0x50c
    2834:	e7d2      	b.n	27dc <gpio_nrf5_config+0x3c>
					      drive_strength[ds_low][ds_high] |
    2836:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    283a:	f8df e088 	ldr.w	lr, [pc, #136]	; 28c4 <gpio_nrf5_config+0x124>
    283e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
					      GPIO_INPUT_CONNECT |
    2842:	4321      	orrs	r1, r4
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    2844:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    2848:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    284c:	e7d2      	b.n	27f4 <gpio_nrf5_config+0x54>
				config |= GPIOTE_CFG_POL_TOGG;
    284e:	f44f 3940 	mov.w	r9, #196608	; 0x30000
    2852:	4614      	mov	r4, r2
    2854:	4605      	mov	r5, r0
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    2856:	68f8      	ldr	r0, [r7, #12]
    2858:	f7fe fc68 	bl	112c <__popcountsi2>
    285c:	2808      	cmp	r0, #8
    285e:	d02e      	beq.n	28be <gpio_nrf5_config+0x11e>
		int i = gpiote_find_channel(dev, pin);
    2860:	4621      	mov	r1, r4
    2862:	4628      	mov	r0, r5
    2864:	f7ff fea6 	bl	25b4 <gpiote_find_channel>
		if (i < 0) {
    2868:	2800      	cmp	r0, #0
    286a:	db17      	blt.n	289c <gpio_nrf5_config+0xfc>
		data->gpiote_chan_mask |= BIT(i);
    286c:	2301      	movs	r3, #1
    286e:	fa03 f200 	lsl.w	r2, r3, r0
    2872:	68fb      	ldr	r3, [r7, #12]
    2874:	4313      	orrs	r3, r2
    2876:	60fb      	str	r3, [r7, #12]
		config |= GPIOTE_CFG_EVT;
    2878:	f049 0901 	orr.w	r9, r9, #1
		config |= GPIOTE_CFG_PIN(pin);
    287c:	0224      	lsls	r4, r4, #8
    287e:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    2882:	ea49 0404 	orr.w	r4, r9, r4
		gpiote->CONFIG[i] = config;
    2886:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    288a:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
	return 0;
    288e:	4641      	mov	r1, r8
}
    2890:	4608      	mov	r0, r1
    2892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config |= GPIOTE_CFG_POL_H2L;
    2896:	f44f 3900 	mov.w	r9, #131072	; 0x20000
    289a:	e7da      	b.n	2852 <gpio_nrf5_config+0xb2>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    289c:	68fb      	ldr	r3, [r7, #12]
    289e:	43db      	mvns	r3, r3
    28a0:	fa93 f0a3 	rbit	r0, r3
    28a4:	fab0 f080 	clz	r0, r0
    28a8:	2b00      	cmp	r3, #0
    28aa:	d1df      	bne.n	286c <gpio_nrf5_config+0xcc>
    28ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    28b0:	e7dc      	b.n	286c <gpio_nrf5_config+0xcc>
		return -ENOTSUP;
    28b2:	f06f 0185 	mvn.w	r1, #133	; 0x85
    28b6:	e7eb      	b.n	2890 <gpio_nrf5_config+0xf0>
			return -ENOTSUP;
    28b8:	f06f 0185 	mvn.w	r1, #133	; 0x85
    28bc:	e7e8      	b.n	2890 <gpio_nrf5_config+0xf0>
			return -EIO;
    28be:	f06f 0104 	mvn.w	r1, #4
    28c2:	e7e5      	b.n	2890 <gpio_nrf5_config+0xf0>
    28c4:	0002eaf0 	.word	0x0002eaf0

000028c8 <_m16src_stop>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    28c8:	f04f 0320 	mov.w	r3, #32
    28cc:	f3ef 8111 	mrs	r1, BASEPRI
    28d0:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    28d4:	4b12      	ldr	r3, [pc, #72]	; (2920 <_m16src_stop+0x58>)
    28d6:	781a      	ldrb	r2, [r3, #0]
    28d8:	b192      	cbz	r2, 2900 <_m16src_stop+0x38>
		irq_unlock(imask);
		return -EALREADY;
	}

	if (--m16src_ref) {
    28da:	1e53      	subs	r3, r2, #1
    28dc:	b2db      	uxtb	r3, r3
    28de:	4810      	ldr	r0, [pc, #64]	; (2920 <_m16src_stop+0x58>)
    28e0:	7003      	strb	r3, [r0, #0]
    28e2:	b993      	cbnz	r3, 290a <_m16src_stop+0x42>
		irq_unlock(imask);
		return 0;
	}

	if (m16src_grd) {
    28e4:	4b0f      	ldr	r3, [pc, #60]	; (2924 <_m16src_stop+0x5c>)
    28e6:	781b      	ldrb	r3, [r3, #0]
    28e8:	b99b      	cbnz	r3, 2912 <_m16src_stop+0x4a>
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    28ea:	4b0e      	ldr	r3, [pc, #56]	; (2924 <_m16src_stop+0x5c>)
    28ec:	2201      	movs	r2, #1
    28ee:	701a      	strb	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    28f0:	f381 8811 	msr	BASEPRI, r1

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    28f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    28f8:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
    28fa:	2000      	movs	r0, #0
    28fc:	7018      	strb	r0, [r3, #0]

	return 0;
}
    28fe:	4770      	bx	lr
    2900:	f381 8811 	msr	BASEPRI, r1
		return -EALREADY;
    2904:	f06f 0077 	mvn.w	r0, #119	; 0x77
    2908:	4770      	bx	lr
    290a:	f381 8811 	msr	BASEPRI, r1
		return 0;
    290e:	2000      	movs	r0, #0
    2910:	4770      	bx	lr
		m16src_ref++;
    2912:	4b03      	ldr	r3, [pc, #12]	; (2920 <_m16src_stop+0x58>)
    2914:	701a      	strb	r2, [r3, #0]
    2916:	f381 8811 	msr	BASEPRI, r1
		return -EAGAIN;
    291a:	f06f 000a 	mvn.w	r0, #10
    291e:	4770      	bx	lr
    2920:	200003de 	.word	0x200003de
    2924:	200003dd 	.word	0x200003dd

00002928 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    2928:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    292a:	2200      	movs	r2, #0
    292c:	2101      	movs	r1, #1
    292e:	4610      	mov	r0, r2
    2930:	f025 f8d4 	bl	27adc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    2934:	2000      	movs	r0, #0
    2936:	f025 f8a7 	bl	27a88 <_arch_irq_enable>

	return 0;
}
    293a:	2000      	movs	r0, #0
    293c:	bd08      	pop	{r3, pc}
	...

00002940 <_m16src_start>:
{
    2940:	b510      	push	{r4, lr}
	__asm__ volatile(
    2942:	f04f 0320 	mov.w	r3, #32
    2946:	f3ef 8411 	mrs	r4, BASEPRI
    294a:	f383 8811 	msr	BASEPRI, r3
	if (m16src_ref++) {
    294e:	4a2c      	ldr	r2, [pc, #176]	; (2a00 <_m16src_start+0xc0>)
    2950:	7813      	ldrb	r3, [r2, #0]
    2952:	1c58      	adds	r0, r3, #1
    2954:	7010      	strb	r0, [r2, #0]
    2956:	b153      	cbz	r3, 296e <_m16src_start+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2958:	f384 8811 	msr	BASEPRI, r4
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    295c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2960:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2964:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2968:	d047      	beq.n	29fa <_m16src_start+0xba>
		return 0;
    296a:	2000      	movs	r0, #0
    296c:	bd10      	pop	{r4, pc}
	if (m16src_grd) {
    296e:	4a25      	ldr	r2, [pc, #148]	; (2a04 <_m16src_start+0xc4>)
    2970:	7812      	ldrb	r2, [r2, #0]
    2972:	b9a2      	cbnz	r2, 299e <_m16src_start+0x5e>
	m16src_grd = 1;
    2974:	2201      	movs	r2, #1
    2976:	4b23      	ldr	r3, [pc, #140]	; (2a04 <_m16src_start+0xc4>)
    2978:	701a      	strb	r2, [r3, #0]
    297a:	f384 8811 	msr	BASEPRI, r4
	if (blocking) {
    297e:	b3a1      	cbz	r1, 29ea <_m16src_start+0xaa>
		irq_disable(POWER_CLOCK_IRQn);
    2980:	2000      	movs	r0, #0
    2982:	f025 f88f 	bl	27aa4 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    298a:	2200      	movs	r2, #0
    298c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    2990:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2994:	2201      	movs	r2, #1
    2996:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    299a:	601a      	str	r2, [r3, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    299c:	e009      	b.n	29b2 <_m16src_start+0x72>
		m16src_ref--;
    299e:	4a18      	ldr	r2, [pc, #96]	; (2a00 <_m16src_start+0xc0>)
    29a0:	7013      	strb	r3, [r2, #0]
    29a2:	f384 8811 	msr	BASEPRI, r4
		return -EAGAIN;
    29a6:	f06f 000a 	mvn.w	r0, #10
    29aa:	bd10      	pop	{r4, pc}
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    29ac:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    29ae:	bf40      	sev
  __ASM volatile ("wfe");
    29b0:	bf20      	wfe
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    29b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    29ba:	2b00      	cmp	r3, #0
    29bc:	d0f6      	beq.n	29ac <_m16src_start+0x6c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    29be:	2200      	movs	r2, #0
    29c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    29c8:	f011 0f01 	tst.w	r1, #1
    29cc:	d102      	bne.n	29d4 <_m16src_start+0x94>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    29ce:	2201      	movs	r2, #1
    29d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    29d4:	2201      	movs	r2, #1
    29d6:	4b0c      	ldr	r3, [pc, #48]	; (2a08 <_m16src_start+0xc8>)
    29d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq_enable(POWER_CLOCK_IRQn);
    29dc:	2000      	movs	r0, #0
    29de:	f025 f853 	bl	27a88 <_arch_irq_enable>
	m16src_grd = 0;
    29e2:	2200      	movs	r2, #0
    29e4:	4b07      	ldr	r3, [pc, #28]	; (2a04 <_m16src_start+0xc4>)
    29e6:	701a      	strb	r2, [r3, #0]
    29e8:	e7b8      	b.n	295c <_m16src_start+0x1c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    29ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29ee:	2200      	movs	r2, #0
    29f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    29f4:	2201      	movs	r2, #1
    29f6:	601a      	str	r2, [r3, #0]
    29f8:	e7f3      	b.n	29e2 <_m16src_start+0xa2>
		return -EINPROGRESS;
    29fa:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    29fe:	bd10      	pop	{r4, pc}
    2a00:	200003de 	.word	0x200003de
    2a04:	200003dd 	.word	0x200003dd
    2a08:	e000e100 	.word	0xe000e100

00002a0c <_power_clock_isr>:
{
    2a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a10:	4680      	mov	r8, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2a12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a16:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2a1a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    2a1e:	f002 0201 	and.w	r2, r2, #1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    2a22:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    2a26:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2a2a:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    2a2e:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    2a32:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    2a36:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (pof) {
    2a3a:	b11d      	cbz	r5, 2a44 <_power_clock_isr+0x38>
		NRF_POWER->EVENTS_POFWARN = 0;
    2a3c:	f04f 0e00 	mov.w	lr, #0
    2a40:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    2a44:	b127      	cbz	r7, 2a50 <_power_clock_isr+0x44>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2a46:	2700      	movs	r7, #0
    2a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a4c:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    2a50:	b132      	cbz	r2, 2a60 <_power_clock_isr+0x54>
    2a52:	b129      	cbz	r1, 2a60 <_power_clock_isr+0x54>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a58:	2201      	movs	r2, #1
    2a5a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    2a5e:	611a      	str	r2, [r3, #16]
	if (lf) {
    2a60:	b126      	cbz	r6, 2a6c <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2a62:	2200      	movs	r2, #0
    2a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    2a6c:	b910      	cbnz	r0, 2a74 <_power_clock_isr+0x68>
	if (ctto) {
    2a6e:	b964      	cbnz	r4, 2a8a <_power_clock_isr+0x7e>
    2a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NRF_CLOCK->EVENTS_DONE = 0;
    2a74:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    2a78:	2100      	movs	r1, #0
    2a7a:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    2a7e:	4640      	mov	r0, r8
    2a80:	f7ff ff22 	bl	28c8 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    2a84:	2301      	movs	r3, #1
    2a86:	6173      	str	r3, [r6, #20]
    2a88:	e7f1      	b.n	2a6e <_power_clock_isr+0x62>
		NRF_CLOCK->EVENTS_CTTO = 0;
    2a8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a8e:	2100      	movs	r1, #0
    2a90:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2a94:	2201      	movs	r2, #1
    2a96:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2a9a:	4640      	mov	r0, r8
    2a9c:	f7ff ff50 	bl	2940 <_m16src_start>
		if (!err) {
    2aa0:	2800      	cmp	r0, #0
    2aa2:	d1e5      	bne.n	2a70 <_power_clock_isr+0x64>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2aa4:	2201      	movs	r2, #1
    2aa6:	4b02      	ldr	r3, [pc, #8]	; (2ab0 <_power_clock_isr+0xa4>)
    2aa8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2aac:	e7e0      	b.n	2a70 <_power_clock_isr+0x64>
    2aae:	bf00      	nop
    2ab0:	e000e100 	.word	0xe000e100

00002ab4 <_k32src_start>:
	__asm__ volatile(
    2ab4:	f04f 0220 	mov.w	r2, #32
    2ab8:	f3ef 8311 	mrs	r3, BASEPRI
    2abc:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    2ac0:	4a38      	ldr	r2, [pc, #224]	; (2ba4 <_k32src_start+0xf0>)
    2ac2:	7812      	ldrb	r2, [r2, #0]
    2ac4:	b152      	cbz	r2, 2adc <_k32src_start+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2ac6:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2aca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ace:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2ad2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2ad6:	d062      	beq.n	2b9e <_k32src_start+0xea>
		return 0;
    2ad8:	2000      	movs	r0, #0
    2ada:	4770      	bx	lr
{
    2adc:	b570      	push	{r4, r5, r6, lr}
    2ade:	460d      	mov	r5, r1
    2ae0:	4604      	mov	r4, r0
	k32src_initialized = 1;
    2ae2:	2601      	movs	r6, #1
    2ae4:	4a2f      	ldr	r2, [pc, #188]	; (2ba4 <_k32src_start+0xf0>)
    2ae6:	7016      	strb	r6, [r2, #0]
    2ae8:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2aec:	2000      	movs	r0, #0
    2aee:	f024 ffd9 	bl	27aa4 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2af6:	2200      	movs	r2, #0
    2af8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2afc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2b00:	2102      	movs	r1, #2
    2b02:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2b06:	f8c3 5518 	str.w	r5, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2b0a:	609e      	str	r6, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2b0c:	e002      	b.n	2b14 <_k32src_start+0x60>
    2b0e:	bf20      	wfe
  __ASM volatile ("sev");
    2b10:	bf40      	sev
  __ASM volatile ("wfe");
    2b12:	bf20      	wfe
    2b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b18:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	d0f6      	beq.n	2b0e <_k32src_start+0x5a>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2b20:	2100      	movs	r1, #0
    2b22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b26:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2b2a:	f012 0f02 	tst.w	r2, #2
    2b2e:	d102      	bne.n	2b36 <_k32src_start+0x82>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2b30:	2202      	movs	r2, #2
    2b32:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b36:	2201      	movs	r2, #1
    2b38:	4b1b      	ldr	r3, [pc, #108]	; (2ba8 <_k32src_start+0xf4>)
    2b3a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    2b3e:	2000      	movs	r0, #0
    2b40:	f024 ffa2 	bl	27a88 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2b44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b48:	2218      	movs	r2, #24
    2b4a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2b4e:	2200      	movs	r2, #0
    2b50:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2b54:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2b58:	f015 0f03 	tst.w	r5, #3
    2b5c:	d008      	beq.n	2b70 <_k32src_start+0xbc>
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2b5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b62:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2b66:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2b6a:	d015      	beq.n	2b98 <_k32src_start+0xe4>
		return 0;
    2b6c:	2000      	movs	r0, #0
    2b6e:	bd70      	pop	{r4, r5, r6, pc}
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2b70:	2210      	movs	r2, #16
    2b72:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    2b76:	2218      	movs	r2, #24
    2b78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2b7c:	2201      	movs	r2, #1
    2b7e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2b82:	2100      	movs	r1, #0
    2b84:	4620      	mov	r0, r4
    2b86:	f7ff fedb 	bl	2940 <_m16src_start>
		if (!err) {
    2b8a:	2800      	cmp	r0, #0
    2b8c:	d1e7      	bne.n	2b5e <_k32src_start+0xaa>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b8e:	2201      	movs	r2, #1
    2b90:	4b05      	ldr	r3, [pc, #20]	; (2ba8 <_k32src_start+0xf4>)
    2b92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2b96:	e7e2      	b.n	2b5e <_k32src_start+0xaa>
		return -EINPROGRESS;
    2b98:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    2b9c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINPROGRESS;
    2b9e:	f06f 0076 	mvn.w	r0, #118	; 0x76
    2ba2:	4770      	bx	lr
    2ba4:	200003dc 	.word	0x200003dc
    2ba8:	e000e100 	.word	0xe000e100

00002bac <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    2bac:	2000      	movs	r0, #0
    2bae:	4770      	bx	lr

00002bb0 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2bb0:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2bb2:	680b      	ldr	r3, [r1, #0]
    2bb4:	3301      	adds	r3, #1
    2bb6:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2bb8:	4b01      	ldr	r3, [pc, #4]	; (2bc0 <char_out+0x10>)
    2bba:	681b      	ldr	r3, [r3, #0]
    2bbc:	4798      	blx	r3
}
    2bbe:	bd08      	pop	{r3, pc}
    2bc0:	2000b97c 	.word	0x2000b97c

00002bc4 <_printk_hex_ulong>:
 * @return N/A
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bc8:	b083      	sub	sp, #12
    2bca:	4606      	mov	r6, r0
    2bcc:	9101      	str	r1, [sp, #4]
    2bce:	4691      	mov	r9, r2
    2bd0:	461f      	mov	r7, r3
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    2bd2:	2400      	movs	r4, #0
	int remaining = 8; /* 8 digits max */
    2bd4:	f04f 0a08 	mov.w	sl, #8
	int found_largest_digit = 0;
    2bd8:	46a0      	mov	r8, r4
	int size = sizeof(num) * 2;
    2bda:	4653      	mov	r3, sl

	for (; size; size--) {
    2bdc:	e009      	b.n	2bf2 <_printk_hex_ulong+0x2e>
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    2bde:	2809      	cmp	r0, #9
    2be0:	d91f      	bls.n	2c22 <_printk_hex_ulong+0x5e>
    2be2:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    2be4:	9901      	ldr	r1, [sp, #4]
    2be6:	4418      	add	r0, r3
    2be8:	47b0      	blx	r6
			digits++;
    2bea:	3401      	adds	r4, #1
			found_largest_digit = 1;
    2bec:	f04f 0801 	mov.w	r8, #1
			continue;
		}

		if (remaining-- <= min_width) {
    2bf0:	462b      	mov	r3, r5
	for (; size; size--) {
    2bf2:	b323      	cbz	r3, 2c3e <_printk_hex_ulong+0x7a>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    2bf4:	1e5d      	subs	r5, r3, #1
    2bf6:	00a8      	lsls	r0, r5, #2
    2bf8:	fa29 f000 	lsr.w	r0, r9, r0
		if (nibble || found_largest_digit || size == 1) {
    2bfc:	f010 000f 	ands.w	r0, r0, #15
    2c00:	d1ed      	bne.n	2bde <_printk_hex_ulong+0x1a>
    2c02:	f1b8 0f00 	cmp.w	r8, #0
    2c06:	d1ea      	bne.n	2bde <_printk_hex_ulong+0x1a>
    2c08:	2b01      	cmp	r3, #1
    2c0a:	d0e8      	beq.n	2bde <_printk_hex_ulong+0x1a>
		if (remaining-- <= min_width) {
    2c0c:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
    2c10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2c12:	459a      	cmp	sl, r3
    2c14:	dc11      	bgt.n	2c3a <_printk_hex_ulong+0x76>
			if (padding == PAD_ZERO_BEFORE) {
    2c16:	2f01      	cmp	r7, #1
    2c18:	d005      	beq.n	2c26 <_printk_hex_ulong+0x62>
				out('0', ctx);
			} else if (padding == PAD_SPACE_BEFORE) {
    2c1a:	2f02      	cmp	r7, #2
    2c1c:	d008      	beq.n	2c30 <_printk_hex_ulong+0x6c>
		if (remaining-- <= min_width) {
    2c1e:	46da      	mov	sl, fp
    2c20:	e7e6      	b.n	2bf0 <_printk_hex_ulong+0x2c>
			nibble += nibble > 9 ? 87 : 48;
    2c22:	2330      	movs	r3, #48	; 0x30
    2c24:	e7de      	b.n	2be4 <_printk_hex_ulong+0x20>
				out('0', ctx);
    2c26:	9901      	ldr	r1, [sp, #4]
    2c28:	2030      	movs	r0, #48	; 0x30
    2c2a:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2c2c:	46da      	mov	sl, fp
    2c2e:	e7df      	b.n	2bf0 <_printk_hex_ulong+0x2c>
				out(' ', ctx);
    2c30:	9901      	ldr	r1, [sp, #4]
    2c32:	2020      	movs	r0, #32
    2c34:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2c36:	46da      	mov	sl, fp
    2c38:	e7da      	b.n	2bf0 <_printk_hex_ulong+0x2c>
    2c3a:	46da      	mov	sl, fp
    2c3c:	e7d8      	b.n	2bf0 <_printk_hex_ulong+0x2c>
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    2c3e:	2f03      	cmp	r7, #3
    2c40:	d002      	beq.n	2c48 <_printk_hex_ulong+0x84>
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2c42:	b003      	add	sp, #12
    2c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    2c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2c4a:	ebc4 0443 	rsb	r4, r4, r3, lsl #1
		while (remaining-- > 0) {
    2c4e:	1e65      	subs	r5, r4, #1
    2c50:	2c00      	cmp	r4, #0
    2c52:	ddf6      	ble.n	2c42 <_printk_hex_ulong+0x7e>
			out(' ', ctx);
    2c54:	9901      	ldr	r1, [sp, #4]
    2c56:	2020      	movs	r0, #32
    2c58:	47b0      	blx	r6
		while (remaining-- > 0) {
    2c5a:	462c      	mov	r4, r5
    2c5c:	e7f7      	b.n	2c4e <_printk_hex_ulong+0x8a>
	...

00002c60 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c64:	b083      	sub	sp, #12
    2c66:	4682      	mov	sl, r0
    2c68:	9101      	str	r1, [sp, #4]
    2c6a:	469b      	mov	fp, r3
    2c6c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    2c6e:	2f00      	cmp	r7, #0
    2c70:	dd07      	ble.n	2c82 <_printk_dec_ulong+0x22>
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    2c72:	4615      	mov	r5, r2
    2c74:	f04f 0901 	mov.w	r9, #1
    2c78:	260a      	movs	r6, #10
    2c7a:	f04f 0800 	mov.w	r8, #0
    2c7e:	4c22      	ldr	r4, [pc, #136]	; (2d08 <_printk_dec_ulong+0xa8>)
    2c80:	e015      	b.n	2cae <_printk_dec_ulong+0x4e>
		min_width = 1;
    2c82:	2701      	movs	r7, #1
    2c84:	e7f5      	b.n	2c72 <_printk_dec_ulong+0x12>
			out((int)((remainder / (pos + 1)) + 48), ctx);
    2c86:	1c60      	adds	r0, r4, #1
    2c88:	fbb5 f0f0 	udiv	r0, r5, r0
    2c8c:	9901      	ldr	r1, [sp, #4]
    2c8e:	3030      	adds	r0, #48	; 0x30
    2c90:	47d0      	blx	sl
			digits++;
    2c92:	f109 0901 	add.w	r9, r9, #1
			found_largest_digit = 1;
    2c96:	f04f 0801 	mov.w	r8, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    2c9a:	3e01      	subs	r6, #1
		remainder %= (pos + 1);
    2c9c:	1c63      	adds	r3, r4, #1
    2c9e:	fbb5 f2f3 	udiv	r2, r5, r3
    2ca2:	fb03 5512 	mls	r5, r3, r2, r5
		pos /= 10;
    2ca6:	4b19      	ldr	r3, [pc, #100]	; (2d0c <_printk_dec_ulong+0xac>)
    2ca8:	fba3 3404 	umull	r3, r4, r3, r4
    2cac:	08e4      	lsrs	r4, r4, #3
	while (pos >= 9) {
    2cae:	2c08      	cmp	r4, #8
    2cb0:	d914      	bls.n	2cdc <_printk_dec_ulong+0x7c>
		if (found_largest_digit || remainder > pos) {
    2cb2:	f1b8 0f00 	cmp.w	r8, #0
    2cb6:	d1e6      	bne.n	2c86 <_printk_dec_ulong+0x26>
    2cb8:	42ac      	cmp	r4, r5
    2cba:	d3e4      	bcc.n	2c86 <_printk_dec_ulong+0x26>
		} else if (remaining <= min_width
    2cbc:	42be      	cmp	r6, r7
    2cbe:	dcec      	bgt.n	2c9a <_printk_dec_ulong+0x3a>
				&& padding < PAD_SPACE_AFTER) {
    2cc0:	f1bb 0f02 	cmp.w	fp, #2
    2cc4:	d8e9      	bhi.n	2c9a <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2cc6:	f1bb 0f01 	cmp.w	fp, #1
    2cca:	d005      	beq.n	2cd8 <_printk_dec_ulong+0x78>
    2ccc:	2020      	movs	r0, #32
    2cce:	9901      	ldr	r1, [sp, #4]
    2cd0:	47d0      	blx	sl
			digits++;
    2cd2:	f109 0901 	add.w	r9, r9, #1
    2cd6:	e7e0      	b.n	2c9a <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2cd8:	2030      	movs	r0, #48	; 0x30
    2cda:	e7f8      	b.n	2cce <_printk_dec_ulong+0x6e>
	}
	out((int)(remainder + 48), ctx);
    2cdc:	9901      	ldr	r1, [sp, #4]
    2cde:	f105 0030 	add.w	r0, r5, #48	; 0x30
    2ce2:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    2ce4:	f1bb 0f03 	cmp.w	fp, #3
    2ce8:	d002      	beq.n	2cf0 <_printk_dec_ulong+0x90>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2cea:	b003      	add	sp, #12
    2cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
    2cf0:	eba7 0709 	sub.w	r7, r7, r9
		while (remaining-- > 0) {
    2cf4:	e003      	b.n	2cfe <_printk_dec_ulong+0x9e>
			out(' ', ctx);
    2cf6:	9901      	ldr	r1, [sp, #4]
    2cf8:	2020      	movs	r0, #32
    2cfa:	47d0      	blx	sl
		while (remaining-- > 0) {
    2cfc:	4627      	mov	r7, r4
    2cfe:	1e7c      	subs	r4, r7, #1
    2d00:	2f00      	cmp	r7, #0
    2d02:	dcf8      	bgt.n	2cf6 <_printk_dec_ulong+0x96>
    2d04:	e7f1      	b.n	2cea <_printk_dec_ulong+0x8a>
    2d06:	bf00      	nop
    2d08:	3b9ac9ff 	.word	0x3b9ac9ff
    2d0c:	cccccccd 	.word	0xcccccccd

00002d10 <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    2d10:	b410      	push	{r4}
	if (!ctx->str || ctx->count >= ctx->max) {
    2d12:	680c      	ldr	r4, [r1, #0]
    2d14:	b154      	cbz	r4, 2d2c <str_out+0x1c>
    2d16:	688b      	ldr	r3, [r1, #8]
    2d18:	684a      	ldr	r2, [r1, #4]
    2d1a:	4293      	cmp	r3, r2
    2d1c:	da06      	bge.n	2d2c <str_out+0x1c>
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
    2d1e:	3a01      	subs	r2, #1
    2d20:	4293      	cmp	r3, r2
    2d22:	d008      	beq.n	2d36 <str_out+0x26>
		ctx->str[ctx->count++] = '\0';
	} else {
		ctx->str[ctx->count++] = c;
    2d24:	1c5a      	adds	r2, r3, #1
    2d26:	608a      	str	r2, [r1, #8]
    2d28:	54e0      	strb	r0, [r4, r3]
    2d2a:	e002      	b.n	2d32 <str_out+0x22>
		ctx->count++;
    2d2c:	688b      	ldr	r3, [r1, #8]
    2d2e:	3301      	adds	r3, #1
    2d30:	608b      	str	r3, [r1, #8]
	}

	return c;
}
    2d32:	bc10      	pop	{r4}
    2d34:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    2d36:	1c5a      	adds	r2, r3, #1
    2d38:	608a      	str	r2, [r1, #8]
    2d3a:	2200      	movs	r2, #0
    2d3c:	54e2      	strb	r2, [r4, r3]
    2d3e:	e7f8      	b.n	2d32 <str_out+0x22>

00002d40 <__printk_hook_install>:
	_char_out = fn;
    2d40:	4b01      	ldr	r3, [pc, #4]	; (2d48 <__printk_hook_install+0x8>)
    2d42:	6018      	str	r0, [r3, #0]
    2d44:	4770      	bx	lr
    2d46:	bf00      	nop
    2d48:	2000b97c 	.word	0x2000b97c

00002d4c <_vprintk>:
{
    2d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d50:	b084      	sub	sp, #16
    2d52:	4607      	mov	r7, r0
    2d54:	460e      	mov	r6, r1
    2d56:	4614      	mov	r4, r2
    2d58:	9303      	str	r3, [sp, #12]
	int long_ctr = 0;
    2d5a:	f04f 0800 	mov.w	r8, #0
	int min_width = -1;
    2d5e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    2d62:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
    2d64:	4645      	mov	r5, r8
	while (*fmt) {
    2d66:	e104      	b.n	2f72 <_vprintk+0x226>
			switch (*fmt) {
    2d68:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    2d6c:	2b55      	cmp	r3, #85	; 0x55
    2d6e:	f200 80f1 	bhi.w	2f54 <_vprintk+0x208>
    2d72:	e8df f013 	tbh	[pc, r3, lsl #1]
    2d76:	00ea      	.short	0x00ea
    2d78:	00ef00ef 	.word	0x00ef00ef
    2d7c:	00ef00ef 	.word	0x00ef00ef
    2d80:	00ef00ef 	.word	0x00ef00ef
    2d84:	010800ef 	.word	0x010800ef
    2d88:	00ef00ef 	.word	0x00ef00ef
    2d8c:	00590056 	.word	0x00590056
    2d90:	00590059 	.word	0x00590059
    2d94:	00590059 	.word	0x00590059
    2d98:	00590059 	.word	0x00590059
    2d9c:	00590059 	.word	0x00590059
    2da0:	00ef00ef 	.word	0x00ef00ef
    2da4:	00ef00ef 	.word	0x00ef00ef
    2da8:	00ef00ef 	.word	0x00ef00ef
    2dac:	00ef00ef 	.word	0x00ef00ef
    2db0:	00ef00ef 	.word	0x00ef00ef
    2db4:	00ef00ef 	.word	0x00ef00ef
    2db8:	00ef00ef 	.word	0x00ef00ef
    2dbc:	00ef00ef 	.word	0x00ef00ef
    2dc0:	00ef00ef 	.word	0x00ef00ef
    2dc4:	00ef00ef 	.word	0x00ef00ef
    2dc8:	00ef00ef 	.word	0x00ef00ef
    2dcc:	00ef00ef 	.word	0x00ef00ef
    2dd0:	00ef00ef 	.word	0x00ef00ef
    2dd4:	00ef00ef 	.word	0x00ef00ef
    2dd8:	00ef00ef 	.word	0x00ef00ef
    2ddc:	00ef00bc 	.word	0x00ef00bc
    2de0:	00ef00ef 	.word	0x00ef00ef
    2de4:	00ef00ef 	.word	0x00ef00ef
    2de8:	00ef00ef 	.word	0x00ef00ef
    2dec:	00ef00ef 	.word	0x00ef00ef
    2df0:	00e200ef 	.word	0x00e200ef
    2df4:	00ef0076 	.word	0x00ef0076
    2df8:	00ef00ef 	.word	0x00ef00ef
    2dfc:	007600fd 	.word	0x007600fd
    2e00:	00ef00ef 	.word	0x00ef00ef
    2e04:	00ef0073 	.word	0x00ef0073
    2e08:	00ef00ef 	.word	0x00ef00ef
    2e0c:	00ef00b2 	.word	0x00ef00b2
    2e10:	00d500ef 	.word	0x00d500ef
    2e14:	009900ef 	.word	0x009900ef
    2e18:	00ef00ef 	.word	0x00ef00ef
    2e1c:	00ef00bc 	.word	0x00ef00bc
    2e20:	00fd      	.short	0x00fd
				if (min_width < 0 && padding == PAD_NONE) {
    2e22:	f1ba 0f00 	cmp.w	sl, #0
    2e26:	db10      	blt.n	2e4a <_vprintk+0xfe>
				if (min_width < 0) {
    2e28:	f1ba 0f00 	cmp.w	sl, #0
    2e2c:	db13      	blt.n	2e56 <_vprintk+0x10a>
					min_width = 10 * min_width + *fmt - '0';
    2e2e:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    2e32:	ea4f 034a 	mov.w	r3, sl, lsl #1
    2e36:	4418      	add	r0, r3
    2e38:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
				if (padding == PAD_NONE) {
    2e3c:	f1b9 0f00 	cmp.w	r9, #0
    2e40:	f040 8096 	bne.w	2f70 <_vprintk+0x224>
					padding = PAD_SPACE_BEFORE;
    2e44:	f04f 0902 	mov.w	r9, #2
    2e48:	e092      	b.n	2f70 <_vprintk+0x224>
				if (min_width < 0 && padding == PAD_NONE) {
    2e4a:	f1b9 0f00 	cmp.w	r9, #0
    2e4e:	d1eb      	bne.n	2e28 <_vprintk+0xdc>
					padding = PAD_ZERO_BEFORE;
    2e50:	f04f 0901 	mov.w	r9, #1
    2e54:	e08c      	b.n	2f70 <_vprintk+0x224>
					min_width = *fmt - '0';
    2e56:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
    2e5a:	e7ef      	b.n	2e3c <_vprintk+0xf0>
				long_ctr++;
    2e5c:	f108 0801 	add.w	r8, r8, #1
    2e60:	e086      	b.n	2f70 <_vprintk+0x224>
				if (long_ctr < 2) {
    2e62:	f1b8 0f01 	cmp.w	r8, #1
    2e66:	dd13      	ble.n	2e90 <_vprintk+0x144>
					d = (long)va_arg(ap, long long);
    2e68:	9b03      	ldr	r3, [sp, #12]
    2e6a:	3307      	adds	r3, #7
    2e6c:	f023 0307 	bic.w	r3, r3, #7
    2e70:	f103 0208 	add.w	r2, r3, #8
    2e74:	9203      	str	r2, [sp, #12]
    2e76:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    2e78:	2d00      	cmp	r5, #0
    2e7a:	db0e      	blt.n	2e9a <_vprintk+0x14e>
				_printk_dec_ulong(out, ctx, d, padding,
    2e7c:	f8cd a000 	str.w	sl, [sp]
    2e80:	464b      	mov	r3, r9
    2e82:	462a      	mov	r2, r5
    2e84:	4631      	mov	r1, r6
    2e86:	4638      	mov	r0, r7
    2e88:	f7ff feea 	bl	2c60 <_printk_dec_ulong>
			might_format = 0;
    2e8c:	2500      	movs	r5, #0
				break;
    2e8e:	e06f      	b.n	2f70 <_vprintk+0x224>
					d = va_arg(ap, long);
    2e90:	9b03      	ldr	r3, [sp, #12]
    2e92:	1d1a      	adds	r2, r3, #4
    2e94:	9203      	str	r2, [sp, #12]
    2e96:	681d      	ldr	r5, [r3, #0]
    2e98:	e7ee      	b.n	2e78 <_vprintk+0x12c>
					out((int)'-', ctx);
    2e9a:	4631      	mov	r1, r6
    2e9c:	202d      	movs	r0, #45	; 0x2d
    2e9e:	47b8      	blx	r7
					d = -d;
    2ea0:	426d      	negs	r5, r5
					min_width--;
    2ea2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2ea6:	e7e9      	b.n	2e7c <_vprintk+0x130>
				if (long_ctr < 2) {
    2ea8:	f1b8 0f01 	cmp.w	r8, #1
    2eac:	dd10      	ble.n	2ed0 <_vprintk+0x184>
					u = (unsigned long)va_arg(ap,
    2eae:	9b03      	ldr	r3, [sp, #12]
    2eb0:	3307      	adds	r3, #7
    2eb2:	f023 0307 	bic.w	r3, r3, #7
    2eb6:	f103 0208 	add.w	r2, r3, #8
    2eba:	9203      	str	r2, [sp, #12]
    2ebc:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    2ebe:	f8cd a000 	str.w	sl, [sp]
    2ec2:	464b      	mov	r3, r9
    2ec4:	4631      	mov	r1, r6
    2ec6:	4638      	mov	r0, r7
    2ec8:	f7ff feca 	bl	2c60 <_printk_dec_ulong>
			might_format = 0;
    2ecc:	2500      	movs	r5, #0
				break;
    2ece:	e04f      	b.n	2f70 <_vprintk+0x224>
					u = va_arg(ap, unsigned long);
    2ed0:	9b03      	ldr	r3, [sp, #12]
    2ed2:	1d1a      	adds	r2, r3, #4
    2ed4:	9203      	str	r2, [sp, #12]
    2ed6:	681a      	ldr	r2, [r3, #0]
    2ed8:	e7f1      	b.n	2ebe <_vprintk+0x172>
				  out('0', ctx);
    2eda:	4631      	mov	r1, r6
    2edc:	2030      	movs	r0, #48	; 0x30
    2ede:	47b8      	blx	r7
				  out('x', ctx);
    2ee0:	4631      	mov	r1, r6
    2ee2:	2078      	movs	r0, #120	; 0x78
    2ee4:	47b8      	blx	r7
				  min_width = 8;
    2ee6:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    2eea:	f04f 0901 	mov.w	r9, #1
				if (long_ctr < 2) {
    2eee:	f1b8 0f01 	cmp.w	r8, #1
    2ef2:	dd10      	ble.n	2f16 <_vprintk+0x1ca>
					x = (unsigned long)va_arg(ap,
    2ef4:	9b03      	ldr	r3, [sp, #12]
    2ef6:	3307      	adds	r3, #7
    2ef8:	f023 0307 	bic.w	r3, r3, #7
    2efc:	f103 0208 	add.w	r2, r3, #8
    2f00:	9203      	str	r2, [sp, #12]
    2f02:	681a      	ldr	r2, [r3, #0]
				_printk_hex_ulong(out, ctx, x, padding,
    2f04:	f8cd a000 	str.w	sl, [sp]
    2f08:	464b      	mov	r3, r9
    2f0a:	4631      	mov	r1, r6
    2f0c:	4638      	mov	r0, r7
    2f0e:	f7ff fe59 	bl	2bc4 <_printk_hex_ulong>
			might_format = 0;
    2f12:	2500      	movs	r5, #0
				break;
    2f14:	e02c      	b.n	2f70 <_vprintk+0x224>
					x = va_arg(ap, unsigned long);
    2f16:	9b03      	ldr	r3, [sp, #12]
    2f18:	1d1a      	adds	r2, r3, #4
    2f1a:	9203      	str	r2, [sp, #12]
    2f1c:	681a      	ldr	r2, [r3, #0]
    2f1e:	e7f1      	b.n	2f04 <_vprintk+0x1b8>
				char *s = va_arg(ap, char *);
    2f20:	9b03      	ldr	r3, [sp, #12]
    2f22:	1d1a      	adds	r2, r3, #4
    2f24:	9203      	str	r2, [sp, #12]
    2f26:	681d      	ldr	r5, [r3, #0]
				while (*s)
    2f28:	e002      	b.n	2f30 <_vprintk+0x1e4>
					out((int)(*s++), ctx);
    2f2a:	3501      	adds	r5, #1
    2f2c:	4631      	mov	r1, r6
    2f2e:	47b8      	blx	r7
				while (*s)
    2f30:	7828      	ldrb	r0, [r5, #0]
    2f32:	2800      	cmp	r0, #0
    2f34:	d1f9      	bne.n	2f2a <_vprintk+0x1de>
			might_format = 0;
    2f36:	2500      	movs	r5, #0
    2f38:	e01a      	b.n	2f70 <_vprintk+0x224>
				int c = va_arg(ap, int);
    2f3a:	9b03      	ldr	r3, [sp, #12]
    2f3c:	1d1a      	adds	r2, r3, #4
    2f3e:	9203      	str	r2, [sp, #12]
				out(c, ctx);
    2f40:	4631      	mov	r1, r6
    2f42:	6818      	ldr	r0, [r3, #0]
    2f44:	47b8      	blx	r7
			might_format = 0;
    2f46:	2500      	movs	r5, #0
				break;
    2f48:	e012      	b.n	2f70 <_vprintk+0x224>
				out((int)'%', ctx);
    2f4a:	4631      	mov	r1, r6
    2f4c:	2025      	movs	r0, #37	; 0x25
    2f4e:	47b8      	blx	r7
			might_format = 0;
    2f50:	2500      	movs	r5, #0
				break;
    2f52:	e00d      	b.n	2f70 <_vprintk+0x224>
				out((int)'%', ctx);
    2f54:	4631      	mov	r1, r6
    2f56:	2025      	movs	r0, #37	; 0x25
    2f58:	47b8      	blx	r7
				out((int)*fmt, ctx);
    2f5a:	4631      	mov	r1, r6
    2f5c:	7820      	ldrb	r0, [r4, #0]
    2f5e:	47b8      	blx	r7
			might_format = 0;
    2f60:	2500      	movs	r5, #0
				break;
    2f62:	e005      	b.n	2f70 <_vprintk+0x224>
				long_ctr = 0;
    2f64:	46a8      	mov	r8, r5
				min_width = -1;
    2f66:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				padding = PAD_NONE;
    2f6a:	f04f 0900 	mov.w	r9, #0
				might_format = 1;
    2f6e:	2501      	movs	r5, #1
		++fmt;
    2f70:	3401      	adds	r4, #1
	while (*fmt) {
    2f72:	7820      	ldrb	r0, [r4, #0]
    2f74:	b150      	cbz	r0, 2f8c <_vprintk+0x240>
		if (!might_format) {
    2f76:	2d00      	cmp	r5, #0
    2f78:	f47f aef6 	bne.w	2d68 <_vprintk+0x1c>
			if (*fmt != '%') {
    2f7c:	2825      	cmp	r0, #37	; 0x25
    2f7e:	d0f1      	beq.n	2f64 <_vprintk+0x218>
				out((int)*fmt, ctx);
    2f80:	4631      	mov	r1, r6
    2f82:	47b8      	blx	r7
    2f84:	e7f4      	b.n	2f70 <_vprintk+0x224>
				padding = PAD_SPACE_AFTER;
    2f86:	f04f 0903 	mov.w	r9, #3
    2f8a:	e7f1      	b.n	2f70 <_vprintk+0x224>
}
    2f8c:	b004      	add	sp, #16
    2f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00002f94 <vprintk>:
{
    2f94:	b510      	push	{r4, lr}
    2f96:	b082      	sub	sp, #8
	struct out_context ctx = { 0 };
    2f98:	ac02      	add	r4, sp, #8
    2f9a:	2300      	movs	r3, #0
    2f9c:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    2fa0:	460b      	mov	r3, r1
    2fa2:	4602      	mov	r2, r0
    2fa4:	4621      	mov	r1, r4
    2fa6:	4803      	ldr	r0, [pc, #12]	; (2fb4 <vprintk+0x20>)
    2fa8:	f7ff fed0 	bl	2d4c <_vprintk>
}
    2fac:	9801      	ldr	r0, [sp, #4]
    2fae:	b002      	add	sp, #8
    2fb0:	bd10      	pop	{r4, pc}
    2fb2:	bf00      	nop
    2fb4:	00002bb1 	.word	0x00002bb1

00002fb8 <printk>:
{
    2fb8:	b40f      	push	{r0, r1, r2, r3}
    2fba:	b500      	push	{lr}
    2fbc:	b083      	sub	sp, #12
    2fbe:	a904      	add	r1, sp, #16
    2fc0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    2fc4:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    2fc6:	f7ff ffe5 	bl	2f94 <vprintk>
}
    2fca:	b003      	add	sp, #12
    2fcc:	f85d eb04 	ldr.w	lr, [sp], #4
    2fd0:	b004      	add	sp, #16
    2fd2:	4770      	bx	lr

00002fd4 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    2fd4:	b40c      	push	{r2, r3}
    2fd6:	b510      	push	{r4, lr}
    2fd8:	b084      	sub	sp, #16
    2fda:	4604      	mov	r4, r0
    2fdc:	ab06      	add	r3, sp, #24
    2fde:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    2fe2:	9001      	str	r0, [sp, #4]
    2fe4:	9102      	str	r1, [sp, #8]
    2fe6:	2100      	movs	r1, #0
    2fe8:	9103      	str	r1, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
    2fea:	9300      	str	r3, [sp, #0]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    2fec:	a901      	add	r1, sp, #4
    2fee:	4807      	ldr	r0, [pc, #28]	; (300c <snprintk+0x38>)
    2ff0:	f7ff feac 	bl	2d4c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    2ff4:	9b03      	ldr	r3, [sp, #12]
    2ff6:	9a02      	ldr	r2, [sp, #8]
    2ff8:	4293      	cmp	r3, r2
    2ffa:	da01      	bge.n	3000 <snprintk+0x2c>
		str[ctx.count] = '\0';
    2ffc:	2200      	movs	r2, #0
    2ffe:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    3000:	9803      	ldr	r0, [sp, #12]
    3002:	b004      	add	sp, #16
    3004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3008:	b002      	add	sp, #8
    300a:	4770      	bx	lr
    300c:	00002d11 	.word	0x00002d11

00003010 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_IPV6_NBR_CACHE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_HCI_VS_BUILD_INFO, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_CHAN_SEL_2, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_UDP_CHECKSUM, 1);
    3010:	4770      	bx	lr

00003012 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    3012:	428b      	cmp	r3, r1
    3014:	d901      	bls.n	301a <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
    3016:	2000      	movs	r0, #0
    3018:	4770      	bx	lr
{
    301a:	b510      	push	{r4, lr}
    301c:	461c      	mov	r4, r3
    301e:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
    3020:	461a      	mov	r2, r3
    3022:	f7fd f94d 	bl	2c0 <memcpy>
		return from_len;
    3026:	4620      	mov	r0, r4
    3028:	bd10      	pop	{r4, pc}

0000302a <_set>:
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
    302a:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
    302c:	f027 fc74 	bl	2a918 <memset>
    3030:	bd08      	pop	{r3, pc}

00003032 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    3032:	09c3      	lsrs	r3, r0, #7
    3034:	005a      	lsls	r2, r3, #1
    3036:	4413      	add	r3, r2
    3038:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    303c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    3040:	b2c0      	uxtb	r0, r0
    3042:	4770      	bx	lr

00003044 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    3044:	b4f0      	push	{r4, r5, r6, r7}
    3046:	b08c      	sub	sp, #48	; 0x30
    3048:	4604      	mov	r4, r0
    304a:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
    304c:	ad01      	add	r5, sp, #4
    304e:	4e2a      	ldr	r6, [pc, #168]	; (30f8 <tc_aes128_set_encrypt_key+0xb4>)
    3050:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3054:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3058:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    305c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    3060:	2c00      	cmp	r4, #0
    3062:	d044      	beq.n	30ee <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    3064:	2f00      	cmp	r7, #0
    3066:	d044      	beq.n	30f2 <tc_aes128_set_encrypt_key+0xae>
    3068:	2200      	movs	r2, #0
    306a:	e00f      	b.n	308c <tc_aes128_set_encrypt_key+0x48>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    306c:	f817 0022 	ldrb.w	r0, [r7, r2, lsl #2]
    3070:	eb07 0182 	add.w	r1, r7, r2, lsl #2
    3074:	784b      	ldrb	r3, [r1, #1]
    3076:	041b      	lsls	r3, r3, #16
    3078:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    307c:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    307e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3082:	78c9      	ldrb	r1, [r1, #3]
    3084:	430b      	orrs	r3, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3086:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (i = 0; i < Nk; ++i) {
    308a:	3201      	adds	r2, #1
    308c:	2a03      	cmp	r2, #3
    308e:	d9ed      	bls.n	306c <tc_aes128_set_encrypt_key+0x28>
    3090:	e006      	b.n	30a0 <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    3092:	1f11      	subs	r1, r2, #4
    3094:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    3098:	404b      	eors	r3, r1
    309a:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
    309e:	3201      	adds	r2, #1
    30a0:	2a2b      	cmp	r2, #43	; 0x2b
    30a2:	d820      	bhi.n	30e6 <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
    30a4:	1e53      	subs	r3, r2, #1
    30a6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
		if ((i % Nk) == 0) {
    30aa:	f012 0f03 	tst.w	r2, #3
    30ae:	d1f0      	bne.n	3092 <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
    30b0:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    30b4:	0e19      	lsrs	r1, r3, #24
    30b6:	4811      	ldr	r0, [pc, #68]	; (30fc <tc_aes128_set_encrypt_key+0xb8>)
    30b8:	5c45      	ldrb	r5, [r0, r1]
    30ba:	f3c3 4107 	ubfx	r1, r3, #16, #8
    30be:	5c41      	ldrb	r1, [r0, r1]
    30c0:	0409      	lsls	r1, r1, #16
    30c2:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
    30c6:	f3c3 2507 	ubfx	r5, r3, #8, #8
    30ca:	5d45      	ldrb	r5, [r0, r5]
    30cc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    30d0:	b2db      	uxtb	r3, r3
    30d2:	5cc3      	ldrb	r3, [r0, r3]
    30d4:	4319      	orrs	r1, r3
    30d6:	f022 0303 	bic.w	r3, r2, #3
    30da:	a80c      	add	r0, sp, #48	; 0x30
    30dc:	4403      	add	r3, r0
    30de:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    30e2:	404b      	eors	r3, r1
    30e4:	e7d5      	b.n	3092 <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    30e6:	2001      	movs	r0, #1
}
    30e8:	b00c      	add	sp, #48	; 0x30
    30ea:	bcf0      	pop	{r4, r5, r6, r7}
    30ec:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    30ee:	2000      	movs	r0, #0
    30f0:	e7fa      	b.n	30e8 <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
    30f2:	2000      	movs	r0, #0
    30f4:	e7f8      	b.n	30e8 <tc_aes128_set_encrypt_key+0xa4>
    30f6:	bf00      	nop
    30f8:	0002e700 	.word	0x0002e700
    30fc:	0002eb70 	.word	0x0002eb70

00003100 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    3100:	2800      	cmp	r0, #0
    3102:	f000 8367 	beq.w	37d4 <tc_aes_encrypt+0x6d4>
{
    3106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    310a:	b088      	sub	sp, #32
    310c:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    310e:	2900      	cmp	r1, #0
    3110:	f000 8362 	beq.w	37d8 <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    3114:	2a00      	cmp	r2, #0
    3116:	f000 8361 	beq.w	37dc <tc_aes_encrypt+0x6dc>
    311a:	4617      	mov	r7, r2
    311c:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    311e:	2310      	movs	r3, #16
    3120:	4619      	mov	r1, r3
    3122:	eb0d 0003 	add.w	r0, sp, r3
    3126:	f7ff ff74 	bl	3012 <_copy>
	add_round_key(state, s->words);
    312a:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    312c:	683b      	ldr	r3, [r7, #0]
    312e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    3132:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3136:	f88d 2010 	strb.w	r2, [sp, #16]
    313a:	f3c3 4207 	ubfx	r2, r3, #16, #8
    313e:	f89d 1011 	ldrb.w	r1, [sp, #17]
    3142:	404a      	eors	r2, r1
    3144:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    3148:	f3c3 2207 	ubfx	r2, r3, #8, #8
    314c:	f89d 1012 	ldrb.w	r1, [sp, #18]
    3150:	404a      	eors	r2, r1
    3152:	f88d 2012 	strb.w	r2, [sp, #18]
    3156:	b2db      	uxtb	r3, r3
    3158:	f89d 2013 	ldrb.w	r2, [sp, #19]
    315c:	4053      	eors	r3, r2
    315e:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    3162:	687b      	ldr	r3, [r7, #4]
    3164:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3168:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    316c:	f88d 2014 	strb.w	r2, [sp, #20]
    3170:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3174:	f89d 1015 	ldrb.w	r1, [sp, #21]
    3178:	404a      	eors	r2, r1
    317a:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    317e:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3182:	f89d 1016 	ldrb.w	r1, [sp, #22]
    3186:	404a      	eors	r2, r1
    3188:	f88d 2016 	strb.w	r2, [sp, #22]
    318c:	b2db      	uxtb	r3, r3
    318e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    3192:	4053      	eors	r3, r2
    3194:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    3198:	68bb      	ldr	r3, [r7, #8]
    319a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    319e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    31a2:	f88d 2018 	strb.w	r2, [sp, #24]
    31a6:	f3c3 4207 	ubfx	r2, r3, #16, #8
    31aa:	f89d 1019 	ldrb.w	r1, [sp, #25]
    31ae:	404a      	eors	r2, r1
    31b0:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    31b4:	f3c3 2207 	ubfx	r2, r3, #8, #8
    31b8:	f89d 101a 	ldrb.w	r1, [sp, #26]
    31bc:	404a      	eors	r2, r1
    31be:	f88d 201a 	strb.w	r2, [sp, #26]
    31c2:	b2db      	uxtb	r3, r3
    31c4:	f89d 201b 	ldrb.w	r2, [sp, #27]
    31c8:	4053      	eors	r3, r2
    31ca:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    31ce:	68fb      	ldr	r3, [r7, #12]
    31d0:	f89d 201c 	ldrb.w	r2, [sp, #28]
    31d4:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    31d8:	f88d 201c 	strb.w	r2, [sp, #28]
    31dc:	f3c3 4207 	ubfx	r2, r3, #16, #8
    31e0:	f89d 101d 	ldrb.w	r1, [sp, #29]
    31e4:	404a      	eors	r2, r1
    31e6:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    31ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
    31ee:	f89d 101e 	ldrb.w	r1, [sp, #30]
    31f2:	404a      	eors	r2, r1
    31f4:	f88d 201e 	strb.w	r2, [sp, #30]
    31f8:	b2db      	uxtb	r3, r3
    31fa:	f89d 201f 	ldrb.w	r2, [sp, #31]
    31fe:	4053      	eors	r3, r2
    3200:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
    3204:	2500      	movs	r5, #0
    3206:	e210      	b.n	362a <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
    3208:	a904      	add	r1, sp, #16
    320a:	5ccc      	ldrb	r4, [r1, r3]
    320c:	4a02      	ldr	r2, [pc, #8]	; (3218 <tc_aes_encrypt+0x118>)
    320e:	5d14      	ldrb	r4, [r2, r4]
    3210:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    3212:	3301      	adds	r3, #1
    3214:	e002      	b.n	321c <tc_aes_encrypt+0x11c>
    3216:	bf00      	nop
    3218:	0002eb70 	.word	0x0002eb70
    321c:	2b0f      	cmp	r3, #15
    321e:	d9f3      	bls.n	3208 <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    3220:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3224:	f88d 3000 	strb.w	r3, [sp]
    3228:	f89d 3015 	ldrb.w	r3, [sp, #21]
    322c:	f88d 3001 	strb.w	r3, [sp, #1]
    3230:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3234:	f88d 3002 	strb.w	r3, [sp, #2]
    3238:	f89d 301f 	ldrb.w	r3, [sp, #31]
    323c:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    3240:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3244:	f88d 3004 	strb.w	r3, [sp, #4]
    3248:	f89d 3019 	ldrb.w	r3, [sp, #25]
    324c:	f88d 3005 	strb.w	r3, [sp, #5]
    3250:	f89d 301e 	ldrb.w	r3, [sp, #30]
    3254:	f88d 3006 	strb.w	r3, [sp, #6]
    3258:	f89d 3013 	ldrb.w	r3, [sp, #19]
    325c:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    3260:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3264:	f88d 3008 	strb.w	r3, [sp, #8]
    3268:	f89d 301d 	ldrb.w	r3, [sp, #29]
    326c:	f88d 3009 	strb.w	r3, [sp, #9]
    3270:	f89d 3012 	ldrb.w	r3, [sp, #18]
    3274:	f88d 300a 	strb.w	r3, [sp, #10]
    3278:	f89d 3017 	ldrb.w	r3, [sp, #23]
    327c:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    3280:	f89d 301c 	ldrb.w	r3, [sp, #28]
    3284:	f88d 300c 	strb.w	r3, [sp, #12]
    3288:	f89d 3011 	ldrb.w	r3, [sp, #17]
    328c:	f88d 300d 	strb.w	r3, [sp, #13]
    3290:	f89d 3016 	ldrb.w	r3, [sp, #22]
    3294:	f88d 300e 	strb.w	r3, [sp, #14]
    3298:	f89d 301b 	ldrb.w	r3, [sp, #27]
    329c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    32a0:	2310      	movs	r3, #16
    32a2:	466a      	mov	r2, sp
    32a4:	4619      	mov	r1, r3
    32a6:	eb0d 0003 	add.w	r0, sp, r3
    32aa:	f7ff feb2 	bl	3012 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    32ae:	f89d 0010 	ldrb.w	r0, [sp, #16]
    32b2:	f7ff febe 	bl	3032 <_double_byte>
    32b6:	4604      	mov	r4, r0
    32b8:	f89d 0011 	ldrb.w	r0, [sp, #17]
    32bc:	f7ff feb9 	bl	3032 <_double_byte>
    32c0:	f89d 1011 	ldrb.w	r1, [sp, #17]
    32c4:	f89d 2012 	ldrb.w	r2, [sp, #18]
    32c8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    32cc:	4048      	eors	r0, r1
    32ce:	4044      	eors	r4, r0
    32d0:	4062      	eors	r2, r4
    32d2:	4053      	eors	r3, r2
    32d4:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    32d8:	f89d 4010 	ldrb.w	r4, [sp, #16]
    32dc:	4608      	mov	r0, r1
    32de:	f7ff fea8 	bl	3032 <_double_byte>
    32e2:	4044      	eors	r4, r0
    32e4:	b2e4      	uxtb	r4, r4
    32e6:	f89d 0012 	ldrb.w	r0, [sp, #18]
    32ea:	f7ff fea2 	bl	3032 <_double_byte>
    32ee:	f89d 2012 	ldrb.w	r2, [sp, #18]
    32f2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    32f6:	4050      	eors	r0, r2
    32f8:	4044      	eors	r4, r0
    32fa:	405c      	eors	r4, r3
    32fc:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3300:	f89d 4010 	ldrb.w	r4, [sp, #16]
    3304:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3308:	4044      	eors	r4, r0
    330a:	4610      	mov	r0, r2
    330c:	f7ff fe91 	bl	3032 <_double_byte>
    3310:	4044      	eors	r4, r0
    3312:	b2e4      	uxtb	r4, r4
    3314:	f89d 0013 	ldrb.w	r0, [sp, #19]
    3318:	f7ff fe8b 	bl	3032 <_double_byte>
    331c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3320:	4058      	eors	r0, r3
    3322:	4044      	eors	r4, r0
    3324:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3328:	f89d 0010 	ldrb.w	r0, [sp, #16]
    332c:	f7ff fe81 	bl	3032 <_double_byte>
    3330:	f89d 2010 	ldrb.w	r2, [sp, #16]
    3334:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3338:	f89d 4012 	ldrb.w	r4, [sp, #18]
    333c:	4050      	eors	r0, r2
    333e:	4043      	eors	r3, r0
    3340:	405c      	eors	r4, r3
    3342:	b2e4      	uxtb	r4, r4
    3344:	f89d 0013 	ldrb.w	r0, [sp, #19]
    3348:	f7ff fe73 	bl	3032 <_double_byte>
    334c:	4060      	eors	r0, r4
    334e:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    3352:	f89d 0014 	ldrb.w	r0, [sp, #20]
    3356:	f7ff fe6c 	bl	3032 <_double_byte>
    335a:	4604      	mov	r4, r0
    335c:	f89d 0015 	ldrb.w	r0, [sp, #21]
    3360:	f7ff fe67 	bl	3032 <_double_byte>
    3364:	f89d 1015 	ldrb.w	r1, [sp, #21]
    3368:	f89d 2016 	ldrb.w	r2, [sp, #22]
    336c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3370:	4048      	eors	r0, r1
    3372:	4044      	eors	r4, r0
    3374:	4062      	eors	r2, r4
    3376:	4053      	eors	r3, r2
    3378:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    337c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    3380:	4608      	mov	r0, r1
    3382:	f7ff fe56 	bl	3032 <_double_byte>
    3386:	4044      	eors	r4, r0
    3388:	b2e4      	uxtb	r4, r4
    338a:	f89d 0016 	ldrb.w	r0, [sp, #22]
    338e:	f7ff fe50 	bl	3032 <_double_byte>
    3392:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3396:	f89d 3017 	ldrb.w	r3, [sp, #23]
    339a:	4050      	eors	r0, r2
    339c:	4044      	eors	r4, r0
    339e:	405c      	eors	r4, r3
    33a0:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    33a4:	f89d 4014 	ldrb.w	r4, [sp, #20]
    33a8:	f89d 0015 	ldrb.w	r0, [sp, #21]
    33ac:	4044      	eors	r4, r0
    33ae:	4610      	mov	r0, r2
    33b0:	f7ff fe3f 	bl	3032 <_double_byte>
    33b4:	4044      	eors	r4, r0
    33b6:	b2e4      	uxtb	r4, r4
    33b8:	f89d 0017 	ldrb.w	r0, [sp, #23]
    33bc:	f7ff fe39 	bl	3032 <_double_byte>
    33c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    33c4:	4058      	eors	r0, r3
    33c6:	4044      	eors	r4, r0
    33c8:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    33cc:	f89d 0014 	ldrb.w	r0, [sp, #20]
    33d0:	f7ff fe2f 	bl	3032 <_double_byte>
    33d4:	f89d 2014 	ldrb.w	r2, [sp, #20]
    33d8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    33dc:	f89d 4016 	ldrb.w	r4, [sp, #22]
    33e0:	4050      	eors	r0, r2
    33e2:	4043      	eors	r3, r0
    33e4:	405c      	eors	r4, r3
    33e6:	b2e4      	uxtb	r4, r4
    33e8:	f89d 0017 	ldrb.w	r0, [sp, #23]
    33ec:	f7ff fe21 	bl	3032 <_double_byte>
    33f0:	4060      	eors	r0, r4
    33f2:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    33f6:	f89d 0018 	ldrb.w	r0, [sp, #24]
    33fa:	f7ff fe1a 	bl	3032 <_double_byte>
    33fe:	4604      	mov	r4, r0
    3400:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3404:	f7ff fe15 	bl	3032 <_double_byte>
    3408:	f89d 1019 	ldrb.w	r1, [sp, #25]
    340c:	f89d 201a 	ldrb.w	r2, [sp, #26]
    3410:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3414:	4048      	eors	r0, r1
    3416:	4044      	eors	r4, r0
    3418:	4062      	eors	r2, r4
    341a:	4053      	eors	r3, r2
    341c:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3420:	f89d 4018 	ldrb.w	r4, [sp, #24]
    3424:	4608      	mov	r0, r1
    3426:	f7ff fe04 	bl	3032 <_double_byte>
    342a:	4044      	eors	r4, r0
    342c:	b2e4      	uxtb	r4, r4
    342e:	f89d 001a 	ldrb.w	r0, [sp, #26]
    3432:	f7ff fdfe 	bl	3032 <_double_byte>
    3436:	f89d 201a 	ldrb.w	r2, [sp, #26]
    343a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    343e:	4050      	eors	r0, r2
    3440:	4044      	eors	r4, r0
    3442:	405c      	eors	r4, r3
    3444:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3448:	f89d 4018 	ldrb.w	r4, [sp, #24]
    344c:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3450:	4044      	eors	r4, r0
    3452:	4610      	mov	r0, r2
    3454:	f7ff fded 	bl	3032 <_double_byte>
    3458:	4044      	eors	r4, r0
    345a:	b2e4      	uxtb	r4, r4
    345c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    3460:	f7ff fde7 	bl	3032 <_double_byte>
    3464:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3468:	4058      	eors	r0, r3
    346a:	4044      	eors	r4, r0
    346c:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3470:	f89d 0018 	ldrb.w	r0, [sp, #24]
    3474:	f7ff fddd 	bl	3032 <_double_byte>
    3478:	f89d 2018 	ldrb.w	r2, [sp, #24]
    347c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3480:	f89d 401a 	ldrb.w	r4, [sp, #26]
    3484:	4050      	eors	r0, r2
    3486:	4043      	eors	r3, r0
    3488:	405c      	eors	r4, r3
    348a:	b2e4      	uxtb	r4, r4
    348c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    3490:	f7ff fdcf 	bl	3032 <_double_byte>
    3494:	4060      	eors	r0, r4
    3496:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    349a:	f89d 001c 	ldrb.w	r0, [sp, #28]
    349e:	f7ff fdc8 	bl	3032 <_double_byte>
    34a2:	4604      	mov	r4, r0
    34a4:	f89d 001d 	ldrb.w	r0, [sp, #29]
    34a8:	f7ff fdc3 	bl	3032 <_double_byte>
    34ac:	f89d 101d 	ldrb.w	r1, [sp, #29]
    34b0:	f89d 201e 	ldrb.w	r2, [sp, #30]
    34b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    34b8:	4048      	eors	r0, r1
    34ba:	4044      	eors	r4, r0
    34bc:	4062      	eors	r2, r4
    34be:	4053      	eors	r3, r2
    34c0:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    34c4:	f89d 401c 	ldrb.w	r4, [sp, #28]
    34c8:	4608      	mov	r0, r1
    34ca:	f7ff fdb2 	bl	3032 <_double_byte>
    34ce:	4044      	eors	r4, r0
    34d0:	b2e4      	uxtb	r4, r4
    34d2:	f89d 001e 	ldrb.w	r0, [sp, #30]
    34d6:	f7ff fdac 	bl	3032 <_double_byte>
    34da:	f89d 201e 	ldrb.w	r2, [sp, #30]
    34de:	f89d 301f 	ldrb.w	r3, [sp, #31]
    34e2:	4050      	eors	r0, r2
    34e4:	4044      	eors	r4, r0
    34e6:	405c      	eors	r4, r3
    34e8:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    34ec:	f89d 401c 	ldrb.w	r4, [sp, #28]
    34f0:	f89d 001d 	ldrb.w	r0, [sp, #29]
    34f4:	4044      	eors	r4, r0
    34f6:	4610      	mov	r0, r2
    34f8:	f7ff fd9b 	bl	3032 <_double_byte>
    34fc:	4044      	eors	r4, r0
    34fe:	b2e4      	uxtb	r4, r4
    3500:	f89d 001f 	ldrb.w	r0, [sp, #31]
    3504:	f7ff fd95 	bl	3032 <_double_byte>
    3508:	f89d 301f 	ldrb.w	r3, [sp, #31]
    350c:	4058      	eors	r0, r3
    350e:	4044      	eors	r4, r0
    3510:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3514:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3518:	f7ff fd8b 	bl	3032 <_double_byte>
    351c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3520:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3524:	f89d 401e 	ldrb.w	r4, [sp, #30]
    3528:	4050      	eors	r0, r2
    352a:	4043      	eors	r3, r0
    352c:	405c      	eors	r4, r3
    352e:	b2e4      	uxtb	r4, r4
    3530:	f89d 001f 	ldrb.w	r0, [sp, #31]
    3534:	f7ff fd7d 	bl	3032 <_double_byte>
    3538:	4060      	eors	r0, r4
    353a:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    353e:	2310      	movs	r3, #16
    3540:	466a      	mov	r2, sp
    3542:	4619      	mov	r1, r3
    3544:	eb0d 0003 	add.w	r0, sp, r3
    3548:	f7ff fd63 	bl	3012 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    354c:	3501      	adds	r5, #1
    354e:	012b      	lsls	r3, r5, #4
    3550:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    3552:	58f3      	ldr	r3, [r6, r3]
    3554:	f89d 1010 	ldrb.w	r1, [sp, #16]
    3558:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    355c:	f88d 1010 	strb.w	r1, [sp, #16]
    3560:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3564:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3568:	4041      	eors	r1, r0
    356a:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    356e:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3572:	f89d 0012 	ldrb.w	r0, [sp, #18]
    3576:	4041      	eors	r1, r0
    3578:	f88d 1012 	strb.w	r1, [sp, #18]
    357c:	b2db      	uxtb	r3, r3
    357e:	f89d 1013 	ldrb.w	r1, [sp, #19]
    3582:	404b      	eors	r3, r1
    3584:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    3588:	6853      	ldr	r3, [r2, #4]
    358a:	f89d 1014 	ldrb.w	r1, [sp, #20]
    358e:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3592:	f88d 1014 	strb.w	r1, [sp, #20]
    3596:	f3c3 4107 	ubfx	r1, r3, #16, #8
    359a:	f89d 0015 	ldrb.w	r0, [sp, #21]
    359e:	4041      	eors	r1, r0
    35a0:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    35a4:	f3c3 2107 	ubfx	r1, r3, #8, #8
    35a8:	f89d 0016 	ldrb.w	r0, [sp, #22]
    35ac:	4041      	eors	r1, r0
    35ae:	f88d 1016 	strb.w	r1, [sp, #22]
    35b2:	b2db      	uxtb	r3, r3
    35b4:	f89d 1017 	ldrb.w	r1, [sp, #23]
    35b8:	404b      	eors	r3, r1
    35ba:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    35be:	6893      	ldr	r3, [r2, #8]
    35c0:	f89d 1018 	ldrb.w	r1, [sp, #24]
    35c4:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    35c8:	f88d 1018 	strb.w	r1, [sp, #24]
    35cc:	f3c3 4107 	ubfx	r1, r3, #16, #8
    35d0:	f89d 0019 	ldrb.w	r0, [sp, #25]
    35d4:	4041      	eors	r1, r0
    35d6:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    35da:	f3c3 2107 	ubfx	r1, r3, #8, #8
    35de:	f89d 001a 	ldrb.w	r0, [sp, #26]
    35e2:	4041      	eors	r1, r0
    35e4:	f88d 101a 	strb.w	r1, [sp, #26]
    35e8:	b2db      	uxtb	r3, r3
    35ea:	f89d 101b 	ldrb.w	r1, [sp, #27]
    35ee:	404b      	eors	r3, r1
    35f0:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    35f4:	68d3      	ldr	r3, [r2, #12]
    35f6:	f89d 201c 	ldrb.w	r2, [sp, #28]
    35fa:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    35fe:	f88d 201c 	strb.w	r2, [sp, #28]
    3602:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3606:	f89d 101d 	ldrb.w	r1, [sp, #29]
    360a:	404a      	eors	r2, r1
    360c:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3610:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3614:	f89d 101e 	ldrb.w	r1, [sp, #30]
    3618:	404a      	eors	r2, r1
    361a:	f88d 201e 	strb.w	r2, [sp, #30]
    361e:	b2db      	uxtb	r3, r3
    3620:	f89d 201f 	ldrb.w	r2, [sp, #31]
    3624:	4053      	eors	r3, r2
    3626:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
    362a:	2d08      	cmp	r5, #8
    362c:	d801      	bhi.n	3632 <tc_aes_encrypt+0x532>
    362e:	2300      	movs	r3, #0
    3630:	e5f4      	b.n	321c <tc_aes_encrypt+0x11c>
    3632:	2300      	movs	r3, #0
    3634:	e005      	b.n	3642 <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
    3636:	aa04      	add	r2, sp, #16
    3638:	5cd1      	ldrb	r1, [r2, r3]
    363a:	4869      	ldr	r0, [pc, #420]	; (37e0 <tc_aes_encrypt+0x6e0>)
    363c:	5c41      	ldrb	r1, [r0, r1]
    363e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    3640:	3301      	adds	r3, #1
    3642:	2b0f      	cmp	r3, #15
    3644:	d9f7      	bls.n	3636 <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    3646:	f89d 3010 	ldrb.w	r3, [sp, #16]
    364a:	f88d 3000 	strb.w	r3, [sp]
    364e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3652:	f88d 3001 	strb.w	r3, [sp, #1]
    3656:	f89d 301a 	ldrb.w	r3, [sp, #26]
    365a:	f88d 3002 	strb.w	r3, [sp, #2]
    365e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3662:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    3666:	f89d 3014 	ldrb.w	r3, [sp, #20]
    366a:	f88d 3004 	strb.w	r3, [sp, #4]
    366e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3672:	f88d 3005 	strb.w	r3, [sp, #5]
    3676:	f89d 301e 	ldrb.w	r3, [sp, #30]
    367a:	f88d 3006 	strb.w	r3, [sp, #6]
    367e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3682:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    3686:	f89d 3018 	ldrb.w	r3, [sp, #24]
    368a:	f88d 3008 	strb.w	r3, [sp, #8]
    368e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3692:	f88d 3009 	strb.w	r3, [sp, #9]
    3696:	f89d 3012 	ldrb.w	r3, [sp, #18]
    369a:	f88d 300a 	strb.w	r3, [sp, #10]
    369e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    36a2:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    36a6:	f89d 301c 	ldrb.w	r3, [sp, #28]
    36aa:	f88d 300c 	strb.w	r3, [sp, #12]
    36ae:	f89d 3011 	ldrb.w	r3, [sp, #17]
    36b2:	f88d 300d 	strb.w	r3, [sp, #13]
    36b6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    36ba:	f88d 300e 	strb.w	r3, [sp, #14]
    36be:	f89d 301b 	ldrb.w	r3, [sp, #27]
    36c2:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    36c6:	2310      	movs	r3, #16
    36c8:	466a      	mov	r2, sp
    36ca:	4619      	mov	r1, r3
    36cc:	eb0d 0003 	add.w	r0, sp, r3
    36d0:	f7ff fc9f 	bl	3012 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
    36d4:	1c6b      	adds	r3, r5, #1
    36d6:	011b      	lsls	r3, r3, #4
    36d8:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    36da:	58fb      	ldr	r3, [r7, r3]
    36dc:	f89d 1010 	ldrb.w	r1, [sp, #16]
    36e0:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    36e4:	f88d 1010 	strb.w	r1, [sp, #16]
    36e8:	f3c3 4107 	ubfx	r1, r3, #16, #8
    36ec:	f89d 0011 	ldrb.w	r0, [sp, #17]
    36f0:	4041      	eors	r1, r0
    36f2:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    36f6:	f3c3 2107 	ubfx	r1, r3, #8, #8
    36fa:	f89d 0012 	ldrb.w	r0, [sp, #18]
    36fe:	4041      	eors	r1, r0
    3700:	f88d 1012 	strb.w	r1, [sp, #18]
    3704:	b2db      	uxtb	r3, r3
    3706:	f89d 1013 	ldrb.w	r1, [sp, #19]
    370a:	404b      	eors	r3, r1
    370c:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    3710:	6853      	ldr	r3, [r2, #4]
    3712:	f89d 1014 	ldrb.w	r1, [sp, #20]
    3716:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    371a:	f88d 1014 	strb.w	r1, [sp, #20]
    371e:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3722:	f89d 0015 	ldrb.w	r0, [sp, #21]
    3726:	4041      	eors	r1, r0
    3728:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    372c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3730:	f89d 0016 	ldrb.w	r0, [sp, #22]
    3734:	4041      	eors	r1, r0
    3736:	f88d 1016 	strb.w	r1, [sp, #22]
    373a:	b2db      	uxtb	r3, r3
    373c:	f89d 1017 	ldrb.w	r1, [sp, #23]
    3740:	404b      	eors	r3, r1
    3742:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    3746:	6893      	ldr	r3, [r2, #8]
    3748:	f89d 1018 	ldrb.w	r1, [sp, #24]
    374c:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3750:	f88d 1018 	strb.w	r1, [sp, #24]
    3754:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3758:	f89d 0019 	ldrb.w	r0, [sp, #25]
    375c:	4041      	eors	r1, r0
    375e:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    3762:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3766:	f89d 001a 	ldrb.w	r0, [sp, #26]
    376a:	4041      	eors	r1, r0
    376c:	f88d 101a 	strb.w	r1, [sp, #26]
    3770:	b2db      	uxtb	r3, r3
    3772:	f89d 101b 	ldrb.w	r1, [sp, #27]
    3776:	404b      	eors	r3, r1
    3778:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    377c:	68d3      	ldr	r3, [r2, #12]
    377e:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3782:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3786:	f88d 201c 	strb.w	r2, [sp, #28]
    378a:	f3c3 4207 	ubfx	r2, r3, #16, #8
    378e:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3792:	404a      	eors	r2, r1
    3794:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3798:	f3c3 2207 	ubfx	r2, r3, #8, #8
    379c:	f89d 101e 	ldrb.w	r1, [sp, #30]
    37a0:	404a      	eors	r2, r1
    37a2:	f88d 201e 	strb.w	r2, [sp, #30]
    37a6:	b2db      	uxtb	r3, r3
    37a8:	f89d 201f 	ldrb.w	r2, [sp, #31]
    37ac:	4053      	eors	r3, r2
    37ae:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
    37b2:	2310      	movs	r3, #16
    37b4:	eb0d 0203 	add.w	r2, sp, r3
    37b8:	4619      	mov	r1, r3
    37ba:	4640      	mov	r0, r8
    37bc:	f7ff fc29 	bl	3012 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    37c0:	2210      	movs	r2, #16
    37c2:	2100      	movs	r1, #0
    37c4:	eb0d 0002 	add.w	r0, sp, r2
    37c8:	f7ff fc2f 	bl	302a <_set>

	return TC_CRYPTO_SUCCESS;
    37cc:	2001      	movs	r0, #1
}
    37ce:	b008      	add	sp, #32
    37d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
    37d4:	2000      	movs	r0, #0
    37d6:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    37d8:	2000      	movs	r0, #0
    37da:	e7f8      	b.n	37ce <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
    37dc:	2000      	movs	r0, #0
    37de:	e7f6      	b.n	37ce <tc_aes_encrypt+0x6ce>
    37e0:	0002eb70 	.word	0x0002eb70

000037e4 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    37e4:	b430      	push	{r4, r5}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    37e6:	f101 020f 	add.w	r2, r1, #15

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    37ea:	f991 3000 	ldrsb.w	r3, [r1]
    37ee:	2b00      	cmp	r3, #0
    37f0:	db0d      	blt.n	380e <gf_double+0x2a>
    37f2:	2300      	movs	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    37f4:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    37f6:	1e45      	subs	r5, r0, #1
    37f8:	7814      	ldrb	r4, [r2, #0]
    37fa:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    37fe:	7003      	strb	r3, [r0, #0]
		if (x == in) {
    3800:	428a      	cmp	r2, r1
    3802:	d006      	beq.n	3812 <gf_double+0x2e>
			break;
		}
		carry = *x-- >> 7;
    3804:	7813      	ldrb	r3, [r2, #0]
    3806:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    3808:	4628      	mov	r0, r5
		carry = *x-- >> 7;
    380a:	3a01      	subs	r2, #1
		*out-- = (*x << 1) ^ carry;
    380c:	e7f3      	b.n	37f6 <gf_double+0x12>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    380e:	2387      	movs	r3, #135	; 0x87
    3810:	e7f0      	b.n	37f4 <gf_double+0x10>
	}
}
    3812:	bc30      	pop	{r4, r5}
    3814:	4770      	bx	lr

00003816 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
    3816:	b130      	cbz	r0, 3826 <tc_cmac_erase+0x10>
{
    3818:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    381a:	2258      	movs	r2, #88	; 0x58
    381c:	2100      	movs	r1, #0
    381e:	f7ff fc04 	bl	302a <_set>

	return TC_CRYPTO_SUCCESS;
    3822:	2001      	movs	r0, #1
    3824:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
    3826:	2000      	movs	r0, #0
    3828:	4770      	bx	lr

0000382a <tc_cmac_init>:
}

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    382a:	b1a0      	cbz	r0, 3856 <tc_cmac_init+0x2c>
{
    382c:	b510      	push	{r4, lr}
    382e:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    3830:	2210      	movs	r2, #16
    3832:	2100      	movs	r1, #0
    3834:	f7ff fbf9 	bl	302a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    3838:	2210      	movs	r2, #16
    383a:	2100      	movs	r1, #0
    383c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    3840:	f7ff fbf3 	bl	302a <_set>
	s->leftover_offset = 0;
    3844:	2300      	movs	r3, #0
    3846:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    3848:	2200      	movs	r2, #0
    384a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    384e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    3852:	2001      	movs	r0, #1
    3854:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
    3856:	2000      	movs	r0, #0
    3858:	4770      	bx	lr

0000385a <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
    385a:	b338      	cbz	r0, 38ac <tc_cmac_setup+0x52>
{
    385c:	b570      	push	{r4, r5, r6, lr}
    385e:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
    3860:	b331      	cbz	r1, 38b0 <tc_cmac_setup+0x56>
    3862:	4616      	mov	r6, r2
    3864:	460d      	mov	r5, r1
	_set(s, 0, sizeof(*s));
    3866:	2258      	movs	r2, #88	; 0x58
    3868:	2100      	movs	r1, #0
    386a:	f7ff fbde 	bl	302a <_set>
	s->sched = sched;
    386e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    3870:	4629      	mov	r1, r5
    3872:	4630      	mov	r0, r6
    3874:	f7ff fbe6 	bl	3044 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    3878:	2210      	movs	r2, #16
    387a:	2100      	movs	r1, #0
    387c:	4620      	mov	r0, r4
    387e:	f7ff fbd4 	bl	302a <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    3882:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3884:	4621      	mov	r1, r4
    3886:	4620      	mov	r0, r4
    3888:	f7ff fc3a 	bl	3100 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    388c:	f104 0510 	add.w	r5, r4, #16
    3890:	4621      	mov	r1, r4
    3892:	4628      	mov	r0, r5
    3894:	f7ff ffa6 	bl	37e4 <gf_double>
	gf_double (s->K2, s->K1);
    3898:	4629      	mov	r1, r5
    389a:	f104 0020 	add.w	r0, r4, #32
    389e:	f7ff ffa1 	bl	37e4 <gf_double>
	tc_cmac_init(s);
    38a2:	4620      	mov	r0, r4
    38a4:	f7ff ffc1 	bl	382a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    38a8:	2001      	movs	r0, #1
    38aa:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    38ac:	2000      	movs	r0, #0
    38ae:	4770      	bx	lr
    38b0:	2000      	movs	r0, #0
}
    38b2:	bd70      	pop	{r4, r5, r6, pc}

000038b4 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    38b4:	2800      	cmp	r0, #0
    38b6:	d05f      	beq.n	3978 <tc_cmac_update+0xc4>
{
    38b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ba:	460d      	mov	r5, r1
    38bc:	4616      	mov	r6, r2
    38be:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    38c0:	2a00      	cmp	r2, #0
    38c2:	d05b      	beq.n	397c <tc_cmac_update+0xc8>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
    38c4:	2900      	cmp	r1, #0
    38c6:	d05b      	beq.n	3980 <tc_cmac_update+0xcc>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    38c8:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    38cc:	ea52 0103 	orrs.w	r1, r2, r3
    38d0:	d058      	beq.n	3984 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    38d2:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    38d6:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    38da:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

	if (s->leftover_offset > 0) {
    38de:	6c40      	ldr	r0, [r0, #68]	; 0x44
    38e0:	2800      	cmp	r0, #0
    38e2:	d038      	beq.n	3956 <tc_cmac_update+0xa2>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    38e4:	f1c0 0710 	rsb	r7, r0, #16

		if (data_length < remaining_space) {
    38e8:	42be      	cmp	r6, r7
    38ea:	d30b      	bcc.n	3904 <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
    38ec:	3030      	adds	r0, #48	; 0x30
    38ee:	463b      	mov	r3, r7
    38f0:	462a      	mov	r2, r5
    38f2:	4639      	mov	r1, r7
    38f4:	4420      	add	r0, r4
    38f6:	f7ff fb8c 	bl	3012 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
    38fa:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    38fc:	443d      	add	r5, r7
		s->leftover_offset = 0;
    38fe:	2300      	movs	r3, #0
    3900:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3902:	e012      	b.n	392a <tc_cmac_update+0x76>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    3904:	3030      	adds	r0, #48	; 0x30
    3906:	4633      	mov	r3, r6
    3908:	462a      	mov	r2, r5
    390a:	4631      	mov	r1, r6
    390c:	4420      	add	r0, r4
    390e:	f7ff fb80 	bl	3012 <_copy>
			s->leftover_offset += data_length;
    3912:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3914:	4433      	add	r3, r6
    3916:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    3918:	2001      	movs	r0, #1
    391a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->iv[i] ^= s->leftover[i];
    391c:	18e2      	adds	r2, r4, r3
    391e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    3922:	5ce1      	ldrb	r1, [r4, r3]
    3924:	404a      	eors	r2, r1
    3926:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3928:	3301      	adds	r3, #1
    392a:	2b0f      	cmp	r3, #15
    392c:	d9f6      	bls.n	391c <tc_cmac_update+0x68>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    392e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3930:	4621      	mov	r1, r4
    3932:	4620      	mov	r0, r4
    3934:	f7ff fbe4 	bl	3100 <tc_aes_encrypt>
    3938:	e00d      	b.n	3956 <tc_cmac_update+0xa2>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
    393a:	5cea      	ldrb	r2, [r5, r3]
    393c:	5ce1      	ldrb	r1, [r4, r3]
    393e:	404a      	eors	r2, r1
    3940:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3942:	3301      	adds	r3, #1
    3944:	2b0f      	cmp	r3, #15
    3946:	d9f8      	bls.n	393a <tc_cmac_update+0x86>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    3948:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    394a:	4621      	mov	r1, r4
    394c:	4620      	mov	r0, r4
    394e:	f7ff fbd7 	bl	3100 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    3952:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    3954:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
    3956:	2e10      	cmp	r6, #16
    3958:	d901      	bls.n	395e <tc_cmac_update+0xaa>
    395a:	2300      	movs	r3, #0
    395c:	e7f2      	b.n	3944 <tc_cmac_update+0x90>
	}

	if (data_length > 0) {
    395e:	b90e      	cbnz	r6, 3964 <tc_cmac_update+0xb0>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    3960:	2001      	movs	r0, #1
}
    3962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_copy(s->leftover, data_length, data, data_length);
    3964:	4633      	mov	r3, r6
    3966:	462a      	mov	r2, r5
    3968:	4631      	mov	r1, r6
    396a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    396e:	f7ff fb50 	bl	3012 <_copy>
		s->leftover_offset = data_length;
    3972:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
    3974:	2001      	movs	r0, #1
    3976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3978:	2000      	movs	r0, #0
    397a:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
    397c:	2001      	movs	r0, #1
    397e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3980:	2000      	movs	r0, #0
    3982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3984:	2000      	movs	r0, #0
    3986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003988 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    3988:	b370      	cbz	r0, 39e8 <tc_cmac_final+0x60>
{
    398a:	b570      	push	{r4, r5, r6, lr}
    398c:	4606      	mov	r6, r0
	if (tag == (uint8_t *) 0 ||
    398e:	b369      	cbz	r1, 39ec <tc_cmac_final+0x64>
    3990:	460d      	mov	r5, r1
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    3992:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    3994:	2a10      	cmp	r2, #16
    3996:	d010      	beq.n	39ba <tc_cmac_final+0x32>
		k = (uint8_t *) s->K1;
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
    3998:	f102 0030 	add.w	r0, r2, #48	; 0x30
    399c:	f1c2 0210 	rsb	r2, r2, #16
    39a0:	2100      	movs	r1, #0
    39a2:	4428      	add	r0, r5
    39a4:	f7ff fb41 	bl	302a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    39a8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    39aa:	442b      	add	r3, r5
    39ac:	2280      	movs	r2, #128	; 0x80
    39ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    39b2:	f105 0120 	add.w	r1, r5, #32
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    39b6:	2300      	movs	r3, #0
    39b8:	e00a      	b.n	39d0 <tc_cmac_final+0x48>
		k = (uint8_t *) s->K1;
    39ba:	3110      	adds	r1, #16
    39bc:	e7fb      	b.n	39b6 <tc_cmac_final+0x2e>
		s->iv[i] ^= s->leftover[i] ^ k[i];
    39be:	18ea      	adds	r2, r5, r3
    39c0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    39c4:	5ccc      	ldrb	r4, [r1, r3]
    39c6:	4054      	eors	r4, r2
    39c8:	5cea      	ldrb	r2, [r5, r3]
    39ca:	4062      	eors	r2, r4
    39cc:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    39ce:	3301      	adds	r3, #1
    39d0:	2b0f      	cmp	r3, #15
    39d2:	d9f4      	bls.n	39be <tc_cmac_final+0x36>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    39d4:	6caa      	ldr	r2, [r5, #72]	; 0x48
    39d6:	4629      	mov	r1, r5
    39d8:	4630      	mov	r0, r6
    39da:	f7ff fb91 	bl	3100 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    39de:	4628      	mov	r0, r5
    39e0:	f7ff ff19 	bl	3816 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    39e4:	2001      	movs	r0, #1
    39e6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    39e8:	2000      	movs	r0, #0
    39ea:	4770      	bx	lr
    39ec:	2000      	movs	r0, #0
}
    39ee:	bd70      	pop	{r4, r5, r6, pc}

000039f0 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    39f0:	2000      	movs	r0, #0
    39f2:	4770      	bx	lr

000039f4 <mbedtls_zeroize>:

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    39f4:	e003      	b.n	39fe <mbedtls_zeroize+0xa>
    39f6:	2200      	movs	r2, #0
    39f8:	7002      	strb	r2, [r0, #0]
    39fa:	3001      	adds	r0, #1
    39fc:	4619      	mov	r1, r3
    39fe:	1e4b      	subs	r3, r1, #1
    3a00:	2900      	cmp	r1, #0
    3a02:	d1f8      	bne.n	39f6 <mbedtls_zeroize+0x2>
}
    3a04:	4770      	bx	lr

00003a06 <mbedtls_zeroize>:

#if !defined(MBEDTLS_ARC4_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3a06:	e003      	b.n	3a10 <mbedtls_zeroize+0xa>
    3a08:	2200      	movs	r2, #0
    3a0a:	7002      	strb	r2, [r0, #0]
    3a0c:	3001      	adds	r0, #1
    3a0e:	4619      	mov	r1, r3
    3a10:	1e4b      	subs	r3, r1, #1
    3a12:	2900      	cmp	r1, #0
    3a14:	d1f8      	bne.n	3a08 <mbedtls_zeroize+0x2>
}
    3a16:	4770      	bx	lr

00003a18 <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3a18:	e003      	b.n	3a22 <mbedtls_zeroize+0xa>
    3a1a:	2200      	movs	r2, #0
    3a1c:	7002      	strb	r2, [r0, #0]
    3a1e:	3001      	adds	r0, #1
    3a20:	4619      	mov	r1, r3
    3a22:	1e4b      	subs	r3, r1, #1
    3a24:	2900      	cmp	r1, #0
    3a26:	d1f8      	bne.n	3a1a <mbedtls_zeroize+0x2>
}
    3a28:	4770      	bx	lr

00003a2a <mbedtls_zeroize>:

#if !defined(MBEDTLS_BLOWFISH_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3a2a:	e003      	b.n	3a34 <mbedtls_zeroize+0xa>
    3a2c:	2200      	movs	r2, #0
    3a2e:	7002      	strb	r2, [r0, #0]
    3a30:	3001      	adds	r0, #1
    3a32:	4619      	mov	r1, r3
    3a34:	1e4b      	subs	r3, r1, #1
    3a36:	2900      	cmp	r1, #0
    3a38:	d1f8      	bne.n	3a2c <mbedtls_zeroize+0x2>
}
    3a3a:	4770      	bx	lr

00003a3c <mbedtls_zeroize>:

#if !defined(MBEDTLS_CAMELLIA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3a3c:	e003      	b.n	3a46 <mbedtls_zeroize+0xa>
    3a3e:	2200      	movs	r2, #0
    3a40:	7002      	strb	r2, [r0, #0]
    3a42:	3001      	adds	r0, #1
    3a44:	4619      	mov	r1, r3
    3a46:	1e4b      	subs	r3, r1, #1
    3a48:	2900      	cmp	r1, #0
    3a4a:	d1f8      	bne.n	3a3e <mbedtls_zeroize+0x2>
}
    3a4c:	4770      	bx	lr

00003a4e <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3a4e:	e003      	b.n	3a58 <mbedtls_zeroize+0xa>
    3a50:	2200      	movs	r2, #0
    3a52:	7002      	strb	r2, [r0, #0]
    3a54:	3001      	adds	r0, #1
    3a56:	4619      	mov	r1, r3
    3a58:	1e4b      	subs	r3, r1, #1
    3a5a:	2900      	cmp	r1, #0
    3a5c:	d1f8      	bne.n	3a50 <mbedtls_zeroize+0x2>
}
    3a5e:	4770      	bx	lr

00003a60 <mbedtls_zeroize>:
#define MBEDTLS_CIPHER_MODE_STREAM
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3a60:	e003      	b.n	3a6a <mbedtls_zeroize+0xa>
    3a62:	2200      	movs	r2, #0
    3a64:	7002      	strb	r2, [r0, #0]
    3a66:	3001      	adds	r0, #1
    3a68:	4619      	mov	r1, r3
    3a6a:	1e4b      	subs	r3, r1, #1
    3a6c:	2900      	cmp	r1, #0
    3a6e:	d1f8      	bne.n	3a62 <mbedtls_zeroize+0x2>
}
    3a70:	4770      	bx	lr

00003a72 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3a72:	e003      	b.n	3a7c <mbedtls_zeroize+0xa>
    3a74:	2200      	movs	r2, #0
    3a76:	7002      	strb	r2, [r0, #0]
    3a78:	3001      	adds	r0, #1
    3a7a:	4619      	mov	r1, r3
    3a7c:	1e4b      	subs	r3, r1, #1
    3a7e:	2900      	cmp	r1, #0
    3a80:	d1f8      	bne.n	3a74 <mbedtls_zeroize+0x2>
}
    3a82:	4770      	bx	lr

00003a84 <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a84:	e003      	b.n	3a8e <mbedtls_zeroize+0xa>
    3a86:	2200      	movs	r2, #0
    3a88:	7002      	strb	r2, [r0, #0]
    3a8a:	3001      	adds	r0, #1
    3a8c:	4619      	mov	r1, r3
    3a8e:	1e4b      	subs	r3, r1, #1
    3a90:	2900      	cmp	r1, #0
    3a92:	d1f8      	bne.n	3a86 <mbedtls_zeroize+0x2>
}
    3a94:	4770      	bx	lr

00003a96 <mbedtls_zeroize>:

#if !defined(MBEDTLS_DES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3a96:	e003      	b.n	3aa0 <mbedtls_zeroize+0xa>
    3a98:	2200      	movs	r2, #0
    3a9a:	7002      	strb	r2, [r0, #0]
    3a9c:	3001      	adds	r0, #1
    3a9e:	4619      	mov	r1, r3
    3aa0:	1e4b      	subs	r3, r1, #1
    3aa2:	2900      	cmp	r1, #0
    3aa4:	d1f8      	bne.n	3a98 <mbedtls_zeroize+0x2>
}
    3aa6:	4770      	bx	lr

00003aa8 <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3aa8:	e003      	b.n	3ab2 <mbedtls_zeroize+0xa>
    3aaa:	2200      	movs	r2, #0
    3aac:	7002      	strb	r2, [r0, #0]
    3aae:	3001      	adds	r0, #1
    3ab0:	4619      	mov	r1, r3
    3ab2:	1e4b      	subs	r3, r1, #1
    3ab4:	2900      	cmp	r1, #0
    3ab6:	d1f8      	bne.n	3aaa <mbedtls_zeroize+0x2>
}
    3ab8:	4770      	bx	lr

00003aba <mbedtls_zeroize>:
#define inline __inline
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3aba:	e003      	b.n	3ac4 <mbedtls_zeroize+0xa>
    3abc:	2200      	movs	r2, #0
    3abe:	7002      	strb	r2, [r0, #0]
    3ac0:	3001      	adds	r0, #1
    3ac2:	4619      	mov	r1, r3
    3ac4:	1e4b      	subs	r3, r1, #1
    3ac6:	2900      	cmp	r1, #0
    3ac8:	d1f8      	bne.n	3abc <mbedtls_zeroize+0x2>
}
    3aca:	4770      	bx	lr

00003acc <mbedtls_zeroize>:
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3acc:	e003      	b.n	3ad6 <mbedtls_zeroize+0xa>
    3ace:	2200      	movs	r2, #0
    3ad0:	7002      	strb	r2, [r0, #0]
    3ad2:	3001      	adds	r0, #1
    3ad4:	4619      	mov	r1, r3
    3ad6:	1e4b      	subs	r3, r1, #1
    3ad8:	2900      	cmp	r1, #0
    3ada:	d1f8      	bne.n	3ace <mbedtls_zeroize+0x2>
}
    3adc:	4770      	bx	lr

00003ade <mbedtls_zeroize>:
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3ade:	e003      	b.n	3ae8 <mbedtls_zeroize+0xa>
    3ae0:	2200      	movs	r2, #0
    3ae2:	7002      	strb	r2, [r0, #0]
    3ae4:	3001      	adds	r0, #1
    3ae6:	4619      	mov	r1, r3
    3ae8:	1e4b      	subs	r3, r1, #1
    3aea:	2900      	cmp	r1, #0
    3aec:	d1f8      	bne.n	3ae0 <mbedtls_zeroize+0x2>
}
    3aee:	4770      	bx	lr

00003af0 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3af0:	e003      	b.n	3afa <mbedtls_zeroize+0xa>
    3af2:	2200      	movs	r2, #0
    3af4:	7002      	strb	r2, [r0, #0]
    3af6:	3001      	adds	r0, #1
    3af8:	4619      	mov	r1, r3
    3afa:	1e4b      	subs	r3, r1, #1
    3afc:	2900      	cmp	r1, #0
    3afe:	d1f8      	bne.n	3af2 <mbedtls_zeroize+0x2>
}
    3b00:	4770      	bx	lr

00003b02 <mbedtls_zeroize>:
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b02:	e003      	b.n	3b0c <mbedtls_zeroize+0xa>
    3b04:	2200      	movs	r2, #0
    3b06:	7002      	strb	r2, [r0, #0]
    3b08:	3001      	adds	r0, #1
    3b0a:	4619      	mov	r1, r3
    3b0c:	1e4b      	subs	r3, r1, #1
    3b0e:	2900      	cmp	r1, #0
    3b10:	d1f8      	bne.n	3b04 <mbedtls_zeroize+0x2>
}
    3b12:	4770      	bx	lr

00003b14 <mbedtls_zeroize>:

#if !defined(MBEDTLS_MD5_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b14:	e003      	b.n	3b1e <mbedtls_zeroize+0xa>
    3b16:	2200      	movs	r2, #0
    3b18:	7002      	strb	r2, [r0, #0]
    3b1a:	3001      	adds	r0, #1
    3b1c:	4619      	mov	r1, r3
    3b1e:	1e4b      	subs	r3, r1, #1
    3b20:	2900      	cmp	r1, #0
    3b22:	d1f8      	bne.n	3b16 <mbedtls_zeroize+0x2>
}
    3b24:	4770      	bx	lr

00003b26 <mbedtls_zeroize>:
#include "mbedtls/threading.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b26:	e003      	b.n	3b30 <mbedtls_zeroize+0xa>
    3b28:	2200      	movs	r2, #0
    3b2a:	7002      	strb	r2, [r0, #0]
    3b2c:	3001      	adds	r0, #1
    3b2e:	4619      	mov	r1, r3
    3b30:	1e4b      	subs	r3, r1, #1
    3b32:	2900      	cmp	r1, #0
    3b34:	d1f8      	bne.n	3b28 <mbedtls_zeroize+0x2>
}
    3b36:	4770      	bx	lr

00003b38 <mbedtls_zeroize>:

#include <limits.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b38:	e003      	b.n	3b42 <mbedtls_zeroize+0xa>
    3b3a:	2200      	movs	r2, #0
    3b3c:	7002      	strb	r2, [r0, #0]
    3b3e:	3001      	adds	r0, #1
    3b40:	4619      	mov	r1, r3
    3b42:	1e4b      	subs	r3, r1, #1
    3b44:	2900      	cmp	r1, #0
    3b46:	d1f8      	bne.n	3b3a <mbedtls_zeroize+0x2>
}
    3b48:	4770      	bx	lr

00003b4a <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA1_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3b4a:	e003      	b.n	3b54 <mbedtls_zeroize+0xa>
    3b4c:	2200      	movs	r2, #0
    3b4e:	7002      	strb	r2, [r0, #0]
    3b50:	3001      	adds	r0, #1
    3b52:	4619      	mov	r1, r3
    3b54:	1e4b      	subs	r3, r1, #1
    3b56:	2900      	cmp	r1, #0
    3b58:	d1f8      	bne.n	3b4c <mbedtls_zeroize+0x2>
}
    3b5a:	4770      	bx	lr

00003b5c <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b5c:	e003      	b.n	3b66 <mbedtls_zeroize+0xa>
    3b5e:	2200      	movs	r2, #0
    3b60:	7002      	strb	r2, [r0, #0]
    3b62:	3001      	adds	r0, #1
    3b64:	4619      	mov	r1, r3
    3b66:	1e4b      	subs	r3, r1, #1
    3b68:	2900      	cmp	r1, #0
    3b6a:	d1f8      	bne.n	3b5e <mbedtls_zeroize+0x2>
}
    3b6c:	4770      	bx	lr

00003b6e <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA512_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b6e:	e003      	b.n	3b78 <mbedtls_zeroize+0xa>
    3b70:	2200      	movs	r2, #0
    3b72:	7002      	strb	r2, [r0, #0]
    3b74:	3001      	adds	r0, #1
    3b76:	4619      	mov	r1, r3
    3b78:	1e4b      	subs	r3, r1, #1
    3b7a:	2900      	cmp	r1, #0
    3b7c:	d1f8      	bne.n	3b70 <mbedtls_zeroize+0x2>
}
    3b7e:	4770      	bx	lr

00003b80 <mbedtls_zeroize>:

#include <string.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b80:	e003      	b.n	3b8a <mbedtls_zeroize+0xa>
    3b82:	2200      	movs	r2, #0
    3b84:	7002      	strb	r2, [r0, #0]
    3b86:	3001      	adds	r0, #1
    3b88:	4619      	mov	r1, r3
    3b8a:	1e4b      	subs	r3, r1, #1
    3b8c:	2900      	cmp	r1, #0
    3b8e:	d1f8      	bne.n	3b82 <mbedtls_zeroize+0x2>
}
    3b90:	4770      	bx	lr

00003b92 <mbedtls_zeroize>:
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b92:	e003      	b.n	3b9c <mbedtls_zeroize+0xa>
    3b94:	2200      	movs	r2, #0
    3b96:	7002      	strb	r2, [r0, #0]
    3b98:	3001      	adds	r0, #1
    3b9a:	4619      	mov	r1, r3
    3b9c:	1e4b      	subs	r3, r1, #1
    3b9e:	2900      	cmp	r1, #0
    3ba0:	d1f8      	bne.n	3b94 <mbedtls_zeroize+0x2>
}
    3ba2:	4770      	bx	lr

00003ba4 <mbedtls_zeroize>:

#if !defined(MBEDTLS_XTEA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3ba4:	e003      	b.n	3bae <mbedtls_zeroize+0xa>
    3ba6:	2200      	movs	r2, #0
    3ba8:	7002      	strb	r2, [r0, #0]
    3baa:	3001      	adds	r0, #1
    3bac:	4619      	mov	r1, r3
    3bae:	1e4b      	subs	r3, r1, #1
    3bb0:	2900      	cmp	r1, #0
    3bb2:	d1f8      	bne.n	3ba6 <mbedtls_zeroize+0x2>
}
    3bb4:	4770      	bx	lr

00003bb6 <mbedtls_aes_init>:
}

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    3bb6:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
    3bb8:	f44f 728c 	mov.w	r2, #280	; 0x118
    3bbc:	2100      	movs	r1, #0
    3bbe:	f026 feab 	bl	2a918 <memset>
    3bc2:	bd08      	pop	{r3, pc}

00003bc4 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
    3bc4:	b128      	cbz	r0, 3bd2 <mbedtls_aes_free+0xe>
{
    3bc6:	b508      	push	{r3, lr}
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
    3bc8:	f44f 718c 	mov.w	r1, #280	; 0x118
    3bcc:	f7ff ff12 	bl	39f4 <mbedtls_zeroize>
    3bd0:	bd08      	pop	{r3, pc}
    3bd2:	4770      	bx	lr

00003bd4 <mbedtls_aes_setkey_enc>:
        aes_init_done = 1;

    }
#endif

    switch( keybits )
    3bd4:	2ac0      	cmp	r2, #192	; 0xc0
    3bd6:	d00f      	beq.n	3bf8 <mbedtls_aes_setkey_enc+0x24>
    3bd8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    3bdc:	d00f      	beq.n	3bfe <mbedtls_aes_setkey_enc+0x2a>
    3bde:	2a80      	cmp	r2, #128	; 0x80
    3be0:	d002      	beq.n	3be8 <mbedtls_aes_setkey_enc+0x14>
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    3be2:	f06f 001f 	mvn.w	r0, #31
    3be6:	4770      	bx	lr
        case 128: ctx->nr = 10; break;
    3be8:	230a      	movs	r3, #10
    3bea:	6003      	str	r3, [r0, #0]
{
    3bec:	b4f0      	push	{r4, r5, r6, r7}

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
    3bee:	f100 0308 	add.w	r3, r0, #8
    3bf2:	6043      	str	r3, [r0, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
    3bf4:	2500      	movs	r5, #0
    3bf6:	e015      	b.n	3c24 <mbedtls_aes_setkey_enc+0x50>
        case 192: ctx->nr = 12; break;
    3bf8:	230c      	movs	r3, #12
    3bfa:	6003      	str	r3, [r0, #0]
    3bfc:	e7f6      	b.n	3bec <mbedtls_aes_setkey_enc+0x18>
        case 256: ctx->nr = 14; break;
    3bfe:	230e      	movs	r3, #14
    3c00:	6003      	str	r3, [r0, #0]
    3c02:	e7f3      	b.n	3bec <mbedtls_aes_setkey_enc+0x18>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    3c04:	f811 4025 	ldrb.w	r4, [r1, r5, lsl #2]
    3c08:	eb01 0685 	add.w	r6, r1, r5, lsl #2
    3c0c:	7877      	ldrb	r7, [r6, #1]
    3c0e:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    3c12:	78b7      	ldrb	r7, [r6, #2]
    3c14:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    3c18:	78f6      	ldrb	r6, [r6, #3]
    3c1a:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
    3c1e:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
    for( i = 0; i < ( keybits >> 5 ); i++ )
    3c22:	3501      	adds	r5, #1
    3c24:	ebb5 1f52 	cmp.w	r5, r2, lsr #5
    3c28:	d3ec      	bcc.n	3c04 <mbedtls_aes_setkey_enc+0x30>
    }

    switch( ctx->nr )
    3c2a:	6802      	ldr	r2, [r0, #0]
    3c2c:	2a0c      	cmp	r2, #12
    3c2e:	d05d      	beq.n	3cec <mbedtls_aes_setkey_enc+0x118>
    3c30:	2a0e      	cmp	r2, #14
    3c32:	f000 80a0 	beq.w	3d76 <mbedtls_aes_setkey_enc+0x1a2>
    3c36:	2a0a      	cmp	r2, #10
    3c38:	d029      	beq.n	3c8e <mbedtls_aes_setkey_enc+0xba>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
    3c3a:	2000      	movs	r0, #0
    3c3c:	e025      	b.n	3c8a <mbedtls_aes_setkey_enc+0xb6>
                RK[4]  = RK[0] ^ RCON[i] ^
    3c3e:	681a      	ldr	r2, [r3, #0]
    3c40:	494e      	ldr	r1, [pc, #312]	; (3d7c <mbedtls_aes_setkey_enc+0x1a8>)
    3c42:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
    3c46:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3c48:	68d9      	ldr	r1, [r3, #12]
    3c4a:	f3c1 2507 	ubfx	r5, r1, #8, #8
    3c4e:	484c      	ldr	r0, [pc, #304]	; (3d80 <mbedtls_aes_setkey_enc+0x1ac>)
    3c50:	5d45      	ldrb	r5, [r0, r5]
                RK[4]  = RK[0] ^ RCON[i] ^
    3c52:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    3c54:	f3c1 4507 	ubfx	r5, r1, #16, #8
    3c58:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3c5a:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    3c5e:	0e0d      	lsrs	r5, r1, #24
    3c60:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    3c62:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
    3c66:	b2cd      	uxtb	r5, r1
    3c68:	5d40      	ldrb	r0, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    3c6a:	ea82 6200 	eor.w	r2, r2, r0, lsl #24
                RK[4]  = RK[0] ^ RCON[i] ^
    3c6e:	611a      	str	r2, [r3, #16]
                RK[5]  = RK[1] ^ RK[4];
    3c70:	6858      	ldr	r0, [r3, #4]
    3c72:	4042      	eors	r2, r0
    3c74:	615a      	str	r2, [r3, #20]
                RK[6]  = RK[2] ^ RK[5];
    3c76:	6898      	ldr	r0, [r3, #8]
    3c78:	4042      	eors	r2, r0
    3c7a:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[3] ^ RK[6];
    3c7c:	404a      	eors	r2, r1
    3c7e:	61da      	str	r2, [r3, #28]
            for( i = 0; i < 10; i++, RK += 4 )
    3c80:	3401      	adds	r4, #1
    3c82:	3310      	adds	r3, #16
    3c84:	2c09      	cmp	r4, #9
    3c86:	d9da      	bls.n	3c3e <mbedtls_aes_setkey_enc+0x6a>
    return( 0 );
    3c88:	2000      	movs	r0, #0
}
    3c8a:	bcf0      	pop	{r4, r5, r6, r7}
    3c8c:	4770      	bx	lr
    switch( ctx->nr )
    3c8e:	2400      	movs	r4, #0
    3c90:	e7f8      	b.n	3c84 <mbedtls_aes_setkey_enc+0xb0>
                RK[6]  = RK[0] ^ RCON[i] ^
    3c92:	681a      	ldr	r2, [r3, #0]
    3c94:	4939      	ldr	r1, [pc, #228]	; (3d7c <mbedtls_aes_setkey_enc+0x1a8>)
    3c96:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    3c9a:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    3c9c:	6959      	ldr	r1, [r3, #20]
    3c9e:	f3c1 2507 	ubfx	r5, r1, #8, #8
    3ca2:	4c37      	ldr	r4, [pc, #220]	; (3d80 <mbedtls_aes_setkey_enc+0x1ac>)
    3ca4:	5d65      	ldrb	r5, [r4, r5]
                RK[6]  = RK[0] ^ RCON[i] ^
    3ca6:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    3ca8:	f3c1 4507 	ubfx	r5, r1, #16, #8
    3cac:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    3cae:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    3cb2:	0e0d      	lsrs	r5, r1, #24
    3cb4:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    3cb6:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
    3cba:	b2cd      	uxtb	r5, r1
    3cbc:	5d64      	ldrb	r4, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    3cbe:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[6]  = RK[0] ^ RCON[i] ^
    3cc2:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[1] ^ RK[6];
    3cc4:	685c      	ldr	r4, [r3, #4]
    3cc6:	4062      	eors	r2, r4
    3cc8:	61da      	str	r2, [r3, #28]
                RK[8]  = RK[2] ^ RK[7];
    3cca:	689c      	ldr	r4, [r3, #8]
    3ccc:	4062      	eors	r2, r4
    3cce:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[3] ^ RK[8];
    3cd0:	68dc      	ldr	r4, [r3, #12]
    3cd2:	4062      	eors	r2, r4
    3cd4:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[4] ^ RK[9];
    3cd6:	691c      	ldr	r4, [r3, #16]
    3cd8:	4062      	eors	r2, r4
    3cda:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[5] ^ RK[10];
    3cdc:	404a      	eors	r2, r1
    3cde:	62da      	str	r2, [r3, #44]	; 0x2c
            for( i = 0; i < 8; i++, RK += 6 )
    3ce0:	3001      	adds	r0, #1
    3ce2:	3318      	adds	r3, #24
    3ce4:	2807      	cmp	r0, #7
    3ce6:	d9d4      	bls.n	3c92 <mbedtls_aes_setkey_enc+0xbe>
    return( 0 );
    3ce8:	2000      	movs	r0, #0
    3cea:	e7ce      	b.n	3c8a <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    3cec:	2000      	movs	r0, #0
    3cee:	e7f9      	b.n	3ce4 <mbedtls_aes_setkey_enc+0x110>
                RK[8]  = RK[0] ^ RCON[i] ^
    3cf0:	681a      	ldr	r2, [r3, #0]
    3cf2:	4822      	ldr	r0, [pc, #136]	; (3d7c <mbedtls_aes_setkey_enc+0x1a8>)
    3cf4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    3cf8:	4042      	eors	r2, r0
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3cfa:	69d8      	ldr	r0, [r3, #28]
    3cfc:	f3c0 2407 	ubfx	r4, r0, #8, #8
    3d00:	4d1f      	ldr	r5, [pc, #124]	; (3d80 <mbedtls_aes_setkey_enc+0x1ac>)
    3d02:	5d2c      	ldrb	r4, [r5, r4]
                RK[8]  = RK[0] ^ RCON[i] ^
    3d04:	4062      	eors	r2, r4
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3d06:	f3c0 4407 	ubfx	r4, r0, #16, #8
    3d0a:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3d0c:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    3d10:	0e04      	lsrs	r4, r0, #24
    3d12:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3d14:	ea82 4204 	eor.w	r2, r2, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
    3d18:	b2c4      	uxtb	r4, r0
    3d1a:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    3d1c:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[8]  = RK[0] ^ RCON[i] ^
    3d20:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[1] ^ RK[8];
    3d22:	685c      	ldr	r4, [r3, #4]
    3d24:	4062      	eors	r2, r4
    3d26:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[2] ^ RK[9];
    3d28:	689c      	ldr	r4, [r3, #8]
    3d2a:	4062      	eors	r2, r4
    3d2c:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[3] ^ RK[10];
    3d2e:	68dc      	ldr	r4, [r3, #12]
    3d30:	4062      	eors	r2, r4
    3d32:	62da      	str	r2, [r3, #44]	; 0x2c
                RK[12] = RK[4] ^
    3d34:	691c      	ldr	r4, [r3, #16]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    3d36:	b2d6      	uxtb	r6, r2
    3d38:	5dae      	ldrb	r6, [r5, r6]
                RK[12] = RK[4] ^
    3d3a:	4074      	eors	r4, r6
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3d3c:	f3c2 2607 	ubfx	r6, r2, #8, #8
    3d40:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    3d42:	ea84 2406 	eor.w	r4, r4, r6, lsl #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3d46:	f3c2 4607 	ubfx	r6, r2, #16, #8
    3d4a:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3d4c:	ea84 4406 	eor.w	r4, r4, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
    3d50:	0e12      	lsrs	r2, r2, #24
    3d52:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3d54:	ea84 6202 	eor.w	r2, r4, r2, lsl #24
                RK[12] = RK[4] ^
    3d58:	631a      	str	r2, [r3, #48]	; 0x30
                RK[13] = RK[5] ^ RK[12];
    3d5a:	695c      	ldr	r4, [r3, #20]
    3d5c:	4062      	eors	r2, r4
    3d5e:	635a      	str	r2, [r3, #52]	; 0x34
                RK[14] = RK[6] ^ RK[13];
    3d60:	699c      	ldr	r4, [r3, #24]
    3d62:	4062      	eors	r2, r4
    3d64:	639a      	str	r2, [r3, #56]	; 0x38
                RK[15] = RK[7] ^ RK[14];
    3d66:	4042      	eors	r2, r0
    3d68:	63da      	str	r2, [r3, #60]	; 0x3c
            for( i = 0; i < 7; i++, RK += 8 )
    3d6a:	3101      	adds	r1, #1
    3d6c:	3320      	adds	r3, #32
    3d6e:	2906      	cmp	r1, #6
    3d70:	d9be      	bls.n	3cf0 <mbedtls_aes_setkey_enc+0x11c>
    return( 0 );
    3d72:	2000      	movs	r0, #0
    3d74:	e789      	b.n	3c8a <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    3d76:	2100      	movs	r1, #0
    3d78:	e7f9      	b.n	3d6e <mbedtls_aes_setkey_enc+0x19a>
    3d7a:	bf00      	nop
    3d7c:	00030410 	.word	0x00030410
    3d80:	0002f210 	.word	0x0002f210

00003d84 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    3d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d88:	b083      	sub	sp, #12
    3d8a:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    3d8c:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    3d8e:	f891 9000 	ldrb.w	r9, [r1]
    3d92:	784b      	ldrb	r3, [r1, #1]
    3d94:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    3d98:	788b      	ldrb	r3, [r1, #2]
    3d9a:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    3d9e:	78cb      	ldrb	r3, [r1, #3]
    3da0:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    3da4:	6813      	ldr	r3, [r2, #0]
    3da6:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    3daa:	f891 a004 	ldrb.w	sl, [r1, #4]
    3dae:	794b      	ldrb	r3, [r1, #5]
    3db0:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    3db4:	798b      	ldrb	r3, [r1, #6]
    3db6:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    3dba:	79cb      	ldrb	r3, [r1, #7]
    3dbc:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    3dc0:	6853      	ldr	r3, [r2, #4]
    3dc2:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    3dc6:	7a0c      	ldrb	r4, [r1, #8]
    3dc8:	7a4b      	ldrb	r3, [r1, #9]
    3dca:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    3dce:	7a8b      	ldrb	r3, [r1, #10]
    3dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    3dd4:	7acb      	ldrb	r3, [r1, #11]
    3dd6:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    3dda:	6893      	ldr	r3, [r2, #8]
    3ddc:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    3dde:	7b0b      	ldrb	r3, [r1, #12]
    3de0:	7b4d      	ldrb	r5, [r1, #13]
    3de2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    3de6:	7b8d      	ldrb	r5, [r1, #14]
    3de8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    3dec:	7bc9      	ldrb	r1, [r1, #15]
    3dee:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    3df2:	f102 0610 	add.w	r6, r2, #16
    3df6:	68d3      	ldr	r3, [r2, #12]
    3df8:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3dfa:	6803      	ldr	r3, [r0, #0]
    3dfc:	ea4f 0b63 	mov.w	fp, r3, asr #1
    3e00:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    3e04:	460b      	mov	r3, r1
    3e06:	e0bd      	b.n	3f84 <mbedtls_internal_aes_encrypt+0x200>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    3e08:	6832      	ldr	r2, [r6, #0]
    3e0a:	fa5f f089 	uxtb.w	r0, r9
    3e0e:	49cb      	ldr	r1, [pc, #812]	; (413c <mbedtls_internal_aes_encrypt+0x3b8>)
    3e10:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3e14:	ea82 0c00 	eor.w	ip, r2, r0
    3e18:	f3ca 2207 	ubfx	r2, sl, #8, #8
    3e1c:	4dc8      	ldr	r5, [pc, #800]	; (4140 <mbedtls_internal_aes_encrypt+0x3bc>)
    3e1e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    3e22:	ea8c 0c02 	eor.w	ip, ip, r2
    3e26:	f3c4 4207 	ubfx	r2, r4, #16, #8
    3e2a:	48c6      	ldr	r0, [pc, #792]	; (4144 <mbedtls_internal_aes_encrypt+0x3c0>)
    3e2c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    3e30:	ea8c 0c02 	eor.w	ip, ip, r2
    3e34:	0e1f      	lsrs	r7, r3, #24
    3e36:	4ac4      	ldr	r2, [pc, #784]	; (4148 <mbedtls_internal_aes_encrypt+0x3c4>)
    3e38:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3e3c:	ea8c 0c07 	eor.w	ip, ip, r7
    3e40:	fa5f fe8a 	uxtb.w	lr, sl
    3e44:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    3e48:	6877      	ldr	r7, [r6, #4]
    3e4a:	ea87 080e 	eor.w	r8, r7, lr
    3e4e:	f3c4 2707 	ubfx	r7, r4, #8, #8
    3e52:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    3e56:	ea88 0807 	eor.w	r8, r8, r7
    3e5a:	f3c3 4707 	ubfx	r7, r3, #16, #8
    3e5e:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    3e62:	ea88 0807 	eor.w	r8, r8, r7
    3e66:	ea4f 6719 	mov.w	r7, r9, lsr #24
    3e6a:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3e6e:	ea88 0807 	eor.w	r8, r8, r7
    3e72:	fa5f fe84 	uxtb.w	lr, r4
    3e76:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    3e7a:	68b7      	ldr	r7, [r6, #8]
    3e7c:	ea87 0e0e 	eor.w	lr, r7, lr
    3e80:	f3c3 2707 	ubfx	r7, r3, #8, #8
    3e84:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    3e88:	ea8e 0e07 	eor.w	lr, lr, r7
    3e8c:	f3c9 4707 	ubfx	r7, r9, #16, #8
    3e90:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    3e94:	ea8e 0e07 	eor.w	lr, lr, r7
    3e98:	ea4f 671a 	mov.w	r7, sl, lsr #24
    3e9c:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3ea0:	ea8e 0e07 	eor.w	lr, lr, r7
    3ea4:	68f7      	ldr	r7, [r6, #12]
    3ea6:	b2db      	uxtb	r3, r3
    3ea8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3eac:	405f      	eors	r7, r3
    3eae:	f3c9 2907 	ubfx	r9, r9, #8, #8
    3eb2:	f855 3029 	ldr.w	r3, [r5, r9, lsl #2]
    3eb6:	405f      	eors	r7, r3
    3eb8:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    3ebc:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
    3ec0:	405f      	eors	r7, r3
    3ec2:	0e24      	lsrs	r4, r4, #24
    3ec4:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    3ec8:	405f      	eors	r7, r3
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    3eca:	6933      	ldr	r3, [r6, #16]
    3ecc:	fa5f f48c 	uxtb.w	r4, ip
    3ed0:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3ed4:	ea83 0904 	eor.w	r9, r3, r4
    3ed8:	f3c8 2307 	ubfx	r3, r8, #8, #8
    3edc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3ee0:	ea89 0903 	eor.w	r9, r9, r3
    3ee4:	f3ce 4307 	ubfx	r3, lr, #16, #8
    3ee8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3eec:	ea89 0903 	eor.w	r9, r9, r3
    3ef0:	0e3b      	lsrs	r3, r7, #24
    3ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3ef6:	ea89 0903 	eor.w	r9, r9, r3
    3efa:	6973      	ldr	r3, [r6, #20]
    3efc:	fa5f f488 	uxtb.w	r4, r8
    3f00:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3f04:	ea83 0a04 	eor.w	sl, r3, r4
    3f08:	f3ce 2307 	ubfx	r3, lr, #8, #8
    3f0c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3f10:	ea8a 0a03 	eor.w	sl, sl, r3
    3f14:	f3c7 4307 	ubfx	r3, r7, #16, #8
    3f18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3f1c:	ea8a 0a03 	eor.w	sl, sl, r3
    3f20:	ea4f 631c 	mov.w	r3, ip, lsr #24
    3f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3f28:	ea8a 0a03 	eor.w	sl, sl, r3
    3f2c:	69b3      	ldr	r3, [r6, #24]
    3f2e:	fa5f f48e 	uxtb.w	r4, lr
    3f32:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3f36:	405c      	eors	r4, r3
    3f38:	f3c7 2307 	ubfx	r3, r7, #8, #8
    3f3c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3f40:	405c      	eors	r4, r3
    3f42:	f3cc 4307 	ubfx	r3, ip, #16, #8
    3f46:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3f4a:	405c      	eors	r4, r3
    3f4c:	ea4f 6318 	mov.w	r3, r8, lsr #24
    3f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3f54:	405c      	eors	r4, r3
    3f56:	69f3      	ldr	r3, [r6, #28]
    3f58:	b2ff      	uxtb	r7, r7
    3f5a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    3f5e:	404b      	eors	r3, r1
    3f60:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    3f64:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
    3f68:	404b      	eors	r3, r1
    3f6a:	f3c8 4807 	ubfx	r8, r8, #16, #8
    3f6e:	f850 1028 	ldr.w	r1, [r0, r8, lsl #2]
    3f72:	404b      	eors	r3, r1
    3f74:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    3f78:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
    3f7c:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3f7e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    3f82:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3f84:	f1bb 0f00 	cmp.w	fp, #0
    3f88:	f73f af3e 	bgt.w	3e08 <mbedtls_internal_aes_encrypt+0x84>
    3f8c:	4619      	mov	r1, r3
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    3f8e:	6833      	ldr	r3, [r6, #0]
    3f90:	fa5f f289 	uxtb.w	r2, r9
    3f94:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 413c <mbedtls_internal_aes_encrypt+0x3b8>
    3f98:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    3f9c:	405a      	eors	r2, r3
    3f9e:	f3ca 2307 	ubfx	r3, sl, #8, #8
    3fa2:	4f67      	ldr	r7, [pc, #412]	; (4140 <mbedtls_internal_aes_encrypt+0x3bc>)
    3fa4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    3fa8:	405a      	eors	r2, r3
    3faa:	f3c4 4307 	ubfx	r3, r4, #16, #8
    3fae:	4d65      	ldr	r5, [pc, #404]	; (4144 <mbedtls_internal_aes_encrypt+0x3c0>)
    3fb0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3fb4:	405a      	eors	r2, r3
    3fb6:	0e0b      	lsrs	r3, r1, #24
    3fb8:	4863      	ldr	r0, [pc, #396]	; (4148 <mbedtls_internal_aes_encrypt+0x3c4>)
    3fba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3fbe:	405a      	eors	r2, r3
    3fc0:	fa5f fc8a 	uxtb.w	ip, sl
    3fc4:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    3fc8:	6873      	ldr	r3, [r6, #4]
    3fca:	ea83 0c0c 	eor.w	ip, r3, ip
    3fce:	f3c4 2307 	ubfx	r3, r4, #8, #8
    3fd2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    3fd6:	ea8c 0c03 	eor.w	ip, ip, r3
    3fda:	f3c1 4307 	ubfx	r3, r1, #16, #8
    3fde:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3fe2:	ea8c 0c03 	eor.w	ip, ip, r3
    3fe6:	ea4f 6319 	mov.w	r3, r9, lsr #24
    3fea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3fee:	ea8c 0c03 	eor.w	ip, ip, r3
    3ff2:	fa5f f884 	uxtb.w	r8, r4
    3ff6:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    3ffa:	68b3      	ldr	r3, [r6, #8]
    3ffc:	ea83 0808 	eor.w	r8, r3, r8
    4000:	f3c1 2307 	ubfx	r3, r1, #8, #8
    4004:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    4008:	ea88 0803 	eor.w	r8, r8, r3
    400c:	f3c9 4307 	ubfx	r3, r9, #16, #8
    4010:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4014:	ea88 0803 	eor.w	r8, r8, r3
    4018:	ea4f 631a 	mov.w	r3, sl, lsr #24
    401c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4020:	ea88 0803 	eor.w	r8, r8, r3
    4024:	68f3      	ldr	r3, [r6, #12]
    4026:	b2c9      	uxtb	r1, r1
    4028:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    402c:	404b      	eors	r3, r1
    402e:	f3c9 2907 	ubfx	r9, r9, #8, #8
    4032:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
    4036:	405f      	eors	r7, r3
    4038:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    403c:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
    4040:	405f      	eors	r7, r3
    4042:	0e24      	lsrs	r4, r4, #24
    4044:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    4048:	405f      	eors	r7, r3

    X0 = *RK++ ^ \
    404a:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    404c:	b2d0      	uxtb	r0, r2
    404e:	4b3f      	ldr	r3, [pc, #252]	; (414c <mbedtls_internal_aes_encrypt+0x3c8>)
    4050:	5c1c      	ldrb	r4, [r3, r0]
    X0 = *RK++ ^ \
    4052:	404c      	eors	r4, r1
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    4054:	f3cc 2107 	ubfx	r1, ip, #8, #8
    4058:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    405a:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    405e:	f3c8 4107 	ubfx	r1, r8, #16, #8
    4062:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    4064:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    4068:	0e39      	lsrs	r1, r7, #24
    406a:	5c59      	ldrb	r1, [r3, r1]
    X0 = *RK++ ^ \
    406c:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    4070:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    4072:	fa5f f08c 	uxtb.w	r0, ip
    4076:	5c18      	ldrb	r0, [r3, r0]
    X1 = *RK++ ^ \
    4078:	4048      	eors	r0, r1
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    407a:	f3c8 2107 	ubfx	r1, r8, #8, #8
    407e:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    4080:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    4084:	f3c7 4107 	ubfx	r1, r7, #16, #8
    4088:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    408a:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    408e:	0e11      	lsrs	r1, r2, #24
    4090:	5c59      	ldrb	r1, [r3, r1]
    X1 = *RK++ ^ \
    4092:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    4096:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    4098:	fa5f f588 	uxtb.w	r5, r8
    409c:	5d5d      	ldrb	r5, [r3, r5]
    X2 = *RK++ ^ \
    409e:	404d      	eors	r5, r1
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    40a0:	f3c7 2107 	ubfx	r1, r7, #8, #8
    40a4:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    40a6:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    40aa:	f3c2 4107 	ubfx	r1, r2, #16, #8
    40ae:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    40b0:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    40b4:	ea4f 611c 	mov.w	r1, ip, lsr #24
    40b8:	5c59      	ldrb	r1, [r3, r1]
    X2 = *RK++ ^ \
    40ba:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    40be:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    40c0:	b2ff      	uxtb	r7, r7
    40c2:	5dde      	ldrb	r6, [r3, r7]
    X3 = *RK++ ^ \
    40c4:	4071      	eors	r1, r6
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    40c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
    40ca:	5c9a      	ldrb	r2, [r3, r2]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    40cc:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    40d0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    40d4:	f813 100c 	ldrb.w	r1, [r3, ip]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    40d8:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    40dc:	ea4f 6818 	mov.w	r8, r8, lsr #24
    40e0:	f813 3008 	ldrb.w	r3, [r3, r8]
    X3 = *RK++ ^ \
    40e4:	ea82 6303 	eor.w	r3, r2, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    40e8:	9e01      	ldr	r6, [sp, #4]
    40ea:	7034      	strb	r4, [r6, #0]
    40ec:	f3c4 2207 	ubfx	r2, r4, #8, #8
    40f0:	7072      	strb	r2, [r6, #1]
    40f2:	f3c4 4207 	ubfx	r2, r4, #16, #8
    40f6:	70b2      	strb	r2, [r6, #2]
    40f8:	0e24      	lsrs	r4, r4, #24
    40fa:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    40fc:	7130      	strb	r0, [r6, #4]
    40fe:	f3c0 2207 	ubfx	r2, r0, #8, #8
    4102:	7172      	strb	r2, [r6, #5]
    4104:	f3c0 4207 	ubfx	r2, r0, #16, #8
    4108:	71b2      	strb	r2, [r6, #6]
    410a:	0e00      	lsrs	r0, r0, #24
    410c:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    410e:	7235      	strb	r5, [r6, #8]
    4110:	f3c5 2207 	ubfx	r2, r5, #8, #8
    4114:	7272      	strb	r2, [r6, #9]
    4116:	f3c5 4207 	ubfx	r2, r5, #16, #8
    411a:	72b2      	strb	r2, [r6, #10]
    411c:	0e2d      	lsrs	r5, r5, #24
    411e:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    4120:	7333      	strb	r3, [r6, #12]
    4122:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4126:	7372      	strb	r2, [r6, #13]
    4128:	f3c3 4207 	ubfx	r2, r3, #16, #8
    412c:	73b2      	strb	r2, [r6, #14]
    412e:	0e1b      	lsrs	r3, r3, #24
    4130:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    4132:	2000      	movs	r0, #0
    4134:	b003      	add	sp, #12
    4136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    413a:	bf00      	nop
    413c:	0002f410 	.word	0x0002f410
    4140:	0002f810 	.word	0x0002f810
    4144:	0002fc10 	.word	0x0002fc10
    4148:	00030010 	.word	0x00030010
    414c:	0002f210 	.word	0x0002f210

00004150 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    4150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4154:	b083      	sub	sp, #12
    4156:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    4158:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    415a:	f891 a000 	ldrb.w	sl, [r1]
    415e:	784b      	ldrb	r3, [r1, #1]
    4160:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    4164:	788b      	ldrb	r3, [r1, #2]
    4166:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    416a:	78cb      	ldrb	r3, [r1, #3]
    416c:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    4170:	6813      	ldr	r3, [r2, #0]
    4172:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    4176:	f891 9004 	ldrb.w	r9, [r1, #4]
    417a:	794b      	ldrb	r3, [r1, #5]
    417c:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    4180:	798b      	ldrb	r3, [r1, #6]
    4182:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    4186:	79cb      	ldrb	r3, [r1, #7]
    4188:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    418c:	6853      	ldr	r3, [r2, #4]
    418e:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    4192:	7a0c      	ldrb	r4, [r1, #8]
    4194:	7a4b      	ldrb	r3, [r1, #9]
    4196:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    419a:	7a8b      	ldrb	r3, [r1, #10]
    419c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    41a0:	7acb      	ldrb	r3, [r1, #11]
    41a2:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    41a6:	6893      	ldr	r3, [r2, #8]
    41a8:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    41aa:	7b0b      	ldrb	r3, [r1, #12]
    41ac:	7b4d      	ldrb	r5, [r1, #13]
    41ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    41b2:	7b8d      	ldrb	r5, [r1, #14]
    41b4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    41b8:	7bc9      	ldrb	r1, [r1, #15]
    41ba:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    41be:	f102 0610 	add.w	r6, r2, #16
    41c2:	68d3      	ldr	r3, [r2, #12]
    41c4:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    41c6:	6803      	ldr	r3, [r0, #0]
    41c8:	ea4f 0b63 	mov.w	fp, r3, asr #1
    41cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    41d0:	460b      	mov	r3, r1
    41d2:	e0bd      	b.n	4350 <mbedtls_internal_aes_decrypt+0x200>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    41d4:	6832      	ldr	r2, [r6, #0]
    41d6:	fa5f f08a 	uxtb.w	r0, sl
    41da:	49cb      	ldr	r1, [pc, #812]	; (4508 <mbedtls_internal_aes_decrypt+0x3b8>)
    41dc:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    41e0:	ea82 0800 	eor.w	r8, r2, r0
    41e4:	f3c3 2207 	ubfx	r2, r3, #8, #8
    41e8:	4dc8      	ldr	r5, [pc, #800]	; (450c <mbedtls_internal_aes_decrypt+0x3bc>)
    41ea:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    41ee:	ea88 0802 	eor.w	r8, r8, r2
    41f2:	f3c4 4207 	ubfx	r2, r4, #16, #8
    41f6:	48c6      	ldr	r0, [pc, #792]	; (4510 <mbedtls_internal_aes_decrypt+0x3c0>)
    41f8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    41fc:	ea88 0802 	eor.w	r8, r8, r2
    4200:	ea4f 6719 	mov.w	r7, r9, lsr #24
    4204:	4ac3      	ldr	r2, [pc, #780]	; (4514 <mbedtls_internal_aes_decrypt+0x3c4>)
    4206:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    420a:	ea88 0807 	eor.w	r8, r8, r7
    420e:	fa5f fe89 	uxtb.w	lr, r9
    4212:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    4216:	6877      	ldr	r7, [r6, #4]
    4218:	ea87 0c0e 	eor.w	ip, r7, lr
    421c:	f3ca 2707 	ubfx	r7, sl, #8, #8
    4220:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    4224:	ea8c 0c07 	eor.w	ip, ip, r7
    4228:	f3c3 4707 	ubfx	r7, r3, #16, #8
    422c:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    4230:	ea8c 0c07 	eor.w	ip, ip, r7
    4234:	0e27      	lsrs	r7, r4, #24
    4236:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    423a:	ea8c 0c07 	eor.w	ip, ip, r7
    423e:	fa5f fe84 	uxtb.w	lr, r4
    4242:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    4246:	68b7      	ldr	r7, [r6, #8]
    4248:	ea87 0e0e 	eor.w	lr, r7, lr
    424c:	f3c9 2707 	ubfx	r7, r9, #8, #8
    4250:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    4254:	ea8e 0e07 	eor.w	lr, lr, r7
    4258:	f3ca 4707 	ubfx	r7, sl, #16, #8
    425c:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    4260:	ea8e 0e07 	eor.w	lr, lr, r7
    4264:	0e1f      	lsrs	r7, r3, #24
    4266:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    426a:	ea8e 0e07 	eor.w	lr, lr, r7
    426e:	68f7      	ldr	r7, [r6, #12]
    4270:	b2db      	uxtb	r3, r3
    4272:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4276:	405f      	eors	r7, r3
    4278:	f3c4 2407 	ubfx	r4, r4, #8, #8
    427c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4280:	405f      	eors	r7, r3
    4282:	f3c9 4907 	ubfx	r9, r9, #16, #8
    4286:	f850 3029 	ldr.w	r3, [r0, r9, lsl #2]
    428a:	405f      	eors	r7, r3
    428c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    4290:	f852 302a 	ldr.w	r3, [r2, sl, lsl #2]
    4294:	405f      	eors	r7, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    4296:	6933      	ldr	r3, [r6, #16]
    4298:	fa5f f488 	uxtb.w	r4, r8
    429c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    42a0:	ea83 0a04 	eor.w	sl, r3, r4
    42a4:	f3c7 2307 	ubfx	r3, r7, #8, #8
    42a8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    42ac:	ea8a 0a03 	eor.w	sl, sl, r3
    42b0:	f3ce 4307 	ubfx	r3, lr, #16, #8
    42b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    42b8:	ea8a 0a03 	eor.w	sl, sl, r3
    42bc:	ea4f 631c 	mov.w	r3, ip, lsr #24
    42c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    42c4:	ea8a 0a03 	eor.w	sl, sl, r3
    42c8:	6973      	ldr	r3, [r6, #20]
    42ca:	fa5f f48c 	uxtb.w	r4, ip
    42ce:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    42d2:	ea83 0904 	eor.w	r9, r3, r4
    42d6:	f3c8 2307 	ubfx	r3, r8, #8, #8
    42da:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    42de:	ea89 0903 	eor.w	r9, r9, r3
    42e2:	f3c7 4307 	ubfx	r3, r7, #16, #8
    42e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    42ea:	ea89 0903 	eor.w	r9, r9, r3
    42ee:	ea4f 631e 	mov.w	r3, lr, lsr #24
    42f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    42f6:	ea89 0903 	eor.w	r9, r9, r3
    42fa:	69b3      	ldr	r3, [r6, #24]
    42fc:	fa5f f48e 	uxtb.w	r4, lr
    4300:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    4304:	405c      	eors	r4, r3
    4306:	f3cc 2307 	ubfx	r3, ip, #8, #8
    430a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    430e:	405c      	eors	r4, r3
    4310:	f3c8 4307 	ubfx	r3, r8, #16, #8
    4314:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4318:	405c      	eors	r4, r3
    431a:	0e3b      	lsrs	r3, r7, #24
    431c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4320:	405c      	eors	r4, r3
    4322:	69f3      	ldr	r3, [r6, #28]
    4324:	b2ff      	uxtb	r7, r7
    4326:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    432a:	404b      	eors	r3, r1
    432c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    4330:	f855 102e 	ldr.w	r1, [r5, lr, lsl #2]
    4334:	404b      	eors	r3, r1
    4336:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    433a:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
    433e:	404b      	eors	r3, r1
    4340:	ea4f 6818 	mov.w	r8, r8, lsr #24
    4344:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    4348:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    434a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    434e:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    4350:	f1bb 0f00 	cmp.w	fp, #0
    4354:	f73f af3e 	bgt.w	41d4 <mbedtls_internal_aes_decrypt+0x84>
    4358:	4619      	mov	r1, r3
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    435a:	6833      	ldr	r3, [r6, #0]
    435c:	fa5f f28a 	uxtb.w	r2, sl
    4360:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 4508 <mbedtls_internal_aes_decrypt+0x3b8>
    4364:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    4368:	4053      	eors	r3, r2
    436a:	f3c1 2207 	ubfx	r2, r1, #8, #8
    436e:	4f67      	ldr	r7, [pc, #412]	; (450c <mbedtls_internal_aes_decrypt+0x3bc>)
    4370:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    4374:	4053      	eors	r3, r2
    4376:	f3c4 4207 	ubfx	r2, r4, #16, #8
    437a:	4d65      	ldr	r5, [pc, #404]	; (4510 <mbedtls_internal_aes_decrypt+0x3c0>)
    437c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    4380:	4053      	eors	r3, r2
    4382:	ea4f 6219 	mov.w	r2, r9, lsr #24
    4386:	4863      	ldr	r0, [pc, #396]	; (4514 <mbedtls_internal_aes_decrypt+0x3c4>)
    4388:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    438c:	4053      	eors	r3, r2
    438e:	fa5f fc89 	uxtb.w	ip, r9
    4392:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    4396:	6872      	ldr	r2, [r6, #4]
    4398:	ea82 0c0c 	eor.w	ip, r2, ip
    439c:	f3ca 2207 	ubfx	r2, sl, #8, #8
    43a0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    43a4:	ea8c 0c02 	eor.w	ip, ip, r2
    43a8:	f3c1 4207 	ubfx	r2, r1, #16, #8
    43ac:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    43b0:	ea8c 0c02 	eor.w	ip, ip, r2
    43b4:	0e22      	lsrs	r2, r4, #24
    43b6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    43ba:	ea8c 0c02 	eor.w	ip, ip, r2
    43be:	fa5f f884 	uxtb.w	r8, r4
    43c2:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    43c6:	68b2      	ldr	r2, [r6, #8]
    43c8:	ea82 0808 	eor.w	r8, r2, r8
    43cc:	f3c9 2207 	ubfx	r2, r9, #8, #8
    43d0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    43d4:	ea88 0802 	eor.w	r8, r8, r2
    43d8:	f3ca 4207 	ubfx	r2, sl, #16, #8
    43dc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    43e0:	ea88 0802 	eor.w	r8, r8, r2
    43e4:	0e0a      	lsrs	r2, r1, #24
    43e6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    43ea:	ea88 0802 	eor.w	r8, r8, r2
    43ee:	68f2      	ldr	r2, [r6, #12]
    43f0:	b2c9      	uxtb	r1, r1
    43f2:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    43f6:	404a      	eors	r2, r1
    43f8:	f3c4 2407 	ubfx	r4, r4, #8, #8
    43fc:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
    4400:	4057      	eors	r7, r2
    4402:	f3c9 4907 	ubfx	r9, r9, #16, #8
    4406:	f855 2029 	ldr.w	r2, [r5, r9, lsl #2]
    440a:	4057      	eors	r7, r2
    440c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    4410:	f850 202a 	ldr.w	r2, [r0, sl, lsl #2]
    4414:	4057      	eors	r7, r2

    X0 = *RK++ ^ \
    4416:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    4418:	b2d8      	uxtb	r0, r3
    441a:	4a3f      	ldr	r2, [pc, #252]	; (4518 <mbedtls_internal_aes_decrypt+0x3c8>)
    441c:	5c14      	ldrb	r4, [r2, r0]
    X0 = *RK++ ^ \
    441e:	404c      	eors	r4, r1
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    4420:	f3c7 2107 	ubfx	r1, r7, #8, #8
    4424:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    4426:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    442a:	f3c8 4107 	ubfx	r1, r8, #16, #8
    442e:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    4430:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    4434:	ea4f 611c 	mov.w	r1, ip, lsr #24
    4438:	5c51      	ldrb	r1, [r2, r1]
    X0 = *RK++ ^ \
    443a:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    443e:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    4440:	fa5f f08c 	uxtb.w	r0, ip
    4444:	5c10      	ldrb	r0, [r2, r0]
    X1 = *RK++ ^ \
    4446:	4048      	eors	r0, r1
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    4448:	f3c3 2107 	ubfx	r1, r3, #8, #8
    444c:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    444e:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    4452:	f3c7 4107 	ubfx	r1, r7, #16, #8
    4456:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    4458:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    445c:	ea4f 6118 	mov.w	r1, r8, lsr #24
    4460:	5c51      	ldrb	r1, [r2, r1]
    X1 = *RK++ ^ \
    4462:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    4466:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    4468:	fa5f f588 	uxtb.w	r5, r8
    446c:	5d55      	ldrb	r5, [r2, r5]
    X2 = *RK++ ^ \
    446e:	404d      	eors	r5, r1
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    4470:	f3cc 2107 	ubfx	r1, ip, #8, #8
    4474:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    4476:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    447a:	f3c3 4107 	ubfx	r1, r3, #16, #8
    447e:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    4480:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    4484:	0e39      	lsrs	r1, r7, #24
    4486:	5c51      	ldrb	r1, [r2, r1]
    X2 = *RK++ ^ \
    4488:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    448c:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    448e:	b2ff      	uxtb	r7, r7
    4490:	5dd6      	ldrb	r6, [r2, r7]
    X3 = *RK++ ^ \
    4492:	4071      	eors	r1, r6
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    4494:	f3c8 2807 	ubfx	r8, r8, #8, #8
    4498:	f812 6008 	ldrb.w	r6, [r2, r8]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    449c:	ea81 2106 	eor.w	r1, r1, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    44a0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    44a4:	f812 600c 	ldrb.w	r6, [r2, ip]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    44a8:	ea81 4106 	eor.w	r1, r1, r6, lsl #16
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    44ac:	0e1b      	lsrs	r3, r3, #24
    44ae:	5cd3      	ldrb	r3, [r2, r3]
    X3 = *RK++ ^ \
    44b0:	ea81 6303 	eor.w	r3, r1, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    44b4:	9e01      	ldr	r6, [sp, #4]
    44b6:	7034      	strb	r4, [r6, #0]
    44b8:	f3c4 2207 	ubfx	r2, r4, #8, #8
    44bc:	7072      	strb	r2, [r6, #1]
    44be:	f3c4 4207 	ubfx	r2, r4, #16, #8
    44c2:	70b2      	strb	r2, [r6, #2]
    44c4:	0e24      	lsrs	r4, r4, #24
    44c6:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    44c8:	7130      	strb	r0, [r6, #4]
    44ca:	f3c0 2207 	ubfx	r2, r0, #8, #8
    44ce:	7172      	strb	r2, [r6, #5]
    44d0:	f3c0 4207 	ubfx	r2, r0, #16, #8
    44d4:	71b2      	strb	r2, [r6, #6]
    44d6:	0e00      	lsrs	r0, r0, #24
    44d8:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    44da:	7235      	strb	r5, [r6, #8]
    44dc:	f3c5 2207 	ubfx	r2, r5, #8, #8
    44e0:	7272      	strb	r2, [r6, #9]
    44e2:	f3c5 4207 	ubfx	r2, r5, #16, #8
    44e6:	72b2      	strb	r2, [r6, #10]
    44e8:	0e2d      	lsrs	r5, r5, #24
    44ea:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    44ec:	7333      	strb	r3, [r6, #12]
    44ee:	f3c3 2207 	ubfx	r2, r3, #8, #8
    44f2:	7372      	strb	r2, [r6, #13]
    44f4:	f3c3 4207 	ubfx	r2, r3, #16, #8
    44f8:	73b2      	strb	r2, [r6, #14]
    44fa:	0e1b      	lsrs	r3, r3, #24
    44fc:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    44fe:	2000      	movs	r0, #0
    4500:	b003      	add	sp, #12
    4502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4506:	bf00      	nop
    4508:	00030538 	.word	0x00030538
    450c:	00030938 	.word	0x00030938
    4510:	00030d38 	.word	0x00030d38
    4514:	00031138 	.word	0x00031138
    4518:	00030438 	.word	0x00030438

0000451c <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
    451c:	b510      	push	{r4, lr}
    451e:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
    4520:	2901      	cmp	r1, #1
    4522:	d004      	beq.n	452e <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
    4524:	461a      	mov	r2, r3
    4526:	4621      	mov	r1, r4
    4528:	f7ff fe12 	bl	4150 <mbedtls_internal_aes_decrypt>
}
    452c:	bd10      	pop	{r4, pc}
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    452e:	461a      	mov	r2, r3
    4530:	4621      	mov	r1, r4
    4532:	f7ff fc27 	bl	3d84 <mbedtls_internal_aes_encrypt>
    4536:	bd10      	pop	{r4, pc}

00004538 <mbedtls_aes_crypt_ctr>:
                       size_t *nc_off,
                       unsigned char nonce_counter[16],
                       unsigned char stream_block[16],
                       const unsigned char *input,
                       unsigned char *output )
{
    4538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    453c:	4682      	mov	sl, r0
    453e:	4693      	mov	fp, r2
    4540:	461d      	mov	r5, r3
    4542:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    4546:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    4548:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    int c, i;
    size_t n = *nc_off;
    454a:	6814      	ldr	r4, [r2, #0]

    while( length-- )
    454c:	e00a      	b.n	4564 <mbedtls_aes_crypt_ctr+0x2c>

            for( i = 16; i > 0; i-- )
                if( ++nonce_counter[i - 1] != 0 )
                    break;
        }
        c = *input++;
    454e:	783a      	ldrb	r2, [r7, #0]
        *output++ = (unsigned char)( c ^ stream_block[n] );
    4550:	f919 3004 	ldrsb.w	r3, [r9, r4]
    4554:	4053      	eors	r3, r2
    4556:	7033      	strb	r3, [r6, #0]

        n = ( n + 1 ) & 0x0F;
    4558:	3401      	adds	r4, #1
    455a:	f004 040f 	and.w	r4, r4, #15
        *output++ = (unsigned char)( c ^ stream_block[n] );
    455e:	3601      	adds	r6, #1
        c = *input++;
    4560:	3701      	adds	r7, #1
    while( length-- )
    4562:	4641      	mov	r1, r8
    4564:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
    4568:	b199      	cbz	r1, 4592 <mbedtls_aes_crypt_ctr+0x5a>
        if( n == 0 ) {
    456a:	2c00      	cmp	r4, #0
    456c:	d1ef      	bne.n	454e <mbedtls_aes_crypt_ctr+0x16>
            mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, nonce_counter, stream_block );
    456e:	464b      	mov	r3, r9
    4570:	462a      	mov	r2, r5
    4572:	2101      	movs	r1, #1
    4574:	4650      	mov	r0, sl
    4576:	f7ff ffd1 	bl	451c <mbedtls_aes_crypt_ecb>
            for( i = 16; i > 0; i-- )
    457a:	2210      	movs	r2, #16
    457c:	2a00      	cmp	r2, #0
    457e:	dde6      	ble.n	454e <mbedtls_aes_crypt_ctr+0x16>
                if( ++nonce_counter[i - 1] != 0 )
    4580:	1e51      	subs	r1, r2, #1
    4582:	5c6b      	ldrb	r3, [r5, r1]
    4584:	3301      	adds	r3, #1
    4586:	b2db      	uxtb	r3, r3
    4588:	546b      	strb	r3, [r5, r1]
    458a:	2b00      	cmp	r3, #0
    458c:	d1df      	bne.n	454e <mbedtls_aes_crypt_ctr+0x16>
            for( i = 16; i > 0; i-- )
    458e:	460a      	mov	r2, r1
    4590:	e7f4      	b.n	457c <mbedtls_aes_crypt_ctr+0x44>
    }

    *nc_off = n;
    4592:	f8cb 4000 	str.w	r4, [fp]

    return( 0 );
}
    4596:	2000      	movs	r0, #0
    4598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000459c <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    459c:	b530      	push	{r4, r5, lr}
    459e:	b085      	sub	sp, #20
    45a0:	4604      	mov	r4, r0
    45a2:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    45a4:	2203      	movs	r2, #3
    45a6:	4668      	mov	r0, sp
    45a8:	f7fb fe8a 	bl	2c0 <memcpy>
	memset(res + 3, 0, 13);
    45ac:	220d      	movs	r2, #13
    45ae:	2100      	movs	r1, #0
    45b0:	f10d 0003 	add.w	r0, sp, #3
    45b4:	f026 f9b0 	bl	2a918 <memset>

	err = bt_encrypt_le(irk, res, res);
    45b8:	466a      	mov	r2, sp
    45ba:	4669      	mov	r1, sp
    45bc:	4620      	mov	r0, r4
    45be:	f00d f89f 	bl	11700 <bt_encrypt_le>
	if (err) {
    45c2:	4604      	mov	r4, r0
    45c4:	b110      	cbz	r0, 45cc <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
    45c6:	4620      	mov	r0, r4
    45c8:	b005      	add	sp, #20
    45ca:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
    45cc:	2203      	movs	r2, #3
    45ce:	4669      	mov	r1, sp
    45d0:	4628      	mov	r0, r5
    45d2:	f7fb fe75 	bl	2c0 <memcpy>
	return 0;
    45d6:	e7f6      	b.n	45c6 <ah+0x2a>

000045d8 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    45d8:	b510      	push	{r4, lr}
    45da:	b082      	sub	sp, #8
    45dc:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    45de:	aa01      	add	r2, sp, #4
    45e0:	3103      	adds	r1, #3
    45e2:	f7ff ffdb 	bl	459c <ah>
	if (err) {
    45e6:	b110      	cbz	r0, 45ee <bt_rpa_irk_matches+0x16>
		return false;
    45e8:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
    45ea:	b002      	add	sp, #8
    45ec:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
    45ee:	2203      	movs	r2, #3
    45f0:	a901      	add	r1, sp, #4
    45f2:	4620      	mov	r0, r4
    45f4:	f026 f8fc 	bl	2a7f0 <memcmp>
    45f8:	fab0 f080 	clz	r0, r0
    45fc:	0940      	lsrs	r0, r0, #5
    45fe:	e7f4      	b.n	45ea <bt_rpa_irk_matches+0x12>

00004600 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    4600:	b570      	push	{r4, r5, r6, lr}
    4602:	4606      	mov	r6, r0
    4604:	460c      	mov	r4, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    4606:	1ccd      	adds	r5, r1, #3
    4608:	2103      	movs	r1, #3
    460a:	4628      	mov	r0, r5
    460c:	f00d f85c 	bl	116c8 <bt_rand>
	if (err) {
    4610:	4603      	mov	r3, r0
    4612:	b108      	cbz	r0, 4618 <bt_rpa_create+0x18>
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    4614:	4618      	mov	r0, r3
    4616:	bd70      	pop	{r4, r5, r6, pc}
	BT_ADDR_SET_RPA(rpa);
    4618:	f994 3005 	ldrsb.w	r3, [r4, #5]
    461c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4624:	7163      	strb	r3, [r4, #5]
	err = ah(irk, rpa->val + 3, rpa->val);
    4626:	4622      	mov	r2, r4
    4628:	4629      	mov	r1, r5
    462a:	4630      	mov	r0, r6
    462c:	f7ff ffb6 	bl	459c <ah>
    4630:	4603      	mov	r3, r0
    4632:	e7ef      	b.n	4614 <bt_rpa_create+0x14>

00004634 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    4634:	b570      	push	{r4, r5, r6, lr}
    4636:	4605      	mov	r5, r0
    4638:	460c      	mov	r4, r1
	switch (src->type) {
    463a:	7803      	ldrb	r3, [r0, #0]
    463c:	2b01      	cmp	r3, #1
    463e:	d010      	beq.n	4662 <uuid_to_uuid128+0x2e>
    4640:	b113      	cbz	r3, 4648 <uuid_to_uuid128+0x14>
    4642:	2b02      	cmp	r3, #2
    4644:	d01f      	beq.n	4686 <uuid_to_uuid128+0x52>
    4646:	bd70      	pop	{r4, r5, r6, pc}
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    4648:	4e12      	ldr	r6, [pc, #72]	; (4694 <uuid_to_uuid128+0x60>)
    464a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    464c:	6020      	str	r0, [r4, #0]
    464e:	6061      	str	r1, [r4, #4]
    4650:	60a2      	str	r2, [r4, #8]
    4652:	60e3      	str	r3, [r4, #12]
    4654:	7833      	ldrb	r3, [r6, #0]
    4656:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
    4658:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    465a:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    465c:	0a1b      	lsrs	r3, r3, #8
    465e:	73a3      	strb	r3, [r4, #14]
    4660:	bd70      	pop	{r4, r5, r6, pc}
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    4662:	4e0c      	ldr	r6, [pc, #48]	; (4694 <uuid_to_uuid128+0x60>)
    4664:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    4666:	6020      	str	r0, [r4, #0]
    4668:	6061      	str	r1, [r4, #4]
    466a:	60a2      	str	r2, [r4, #8]
    466c:	60e3      	str	r3, [r4, #12]
    466e:	7833      	ldrb	r3, [r6, #0]
    4670:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
    4672:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
    4674:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    4676:	f3c3 2207 	ubfx	r2, r3, #8, #8
    467a:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    467c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    467e:	73e3      	strb	r3, [r4, #15]
	dst[1] = val >> 8;
    4680:	0a1b      	lsrs	r3, r3, #8
    4682:	7423      	strb	r3, [r4, #16]
    4684:	bd70      	pop	{r4, r5, r6, pc}
    4686:	4608      	mov	r0, r1
    4688:	4629      	mov	r1, r5
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    468a:	2211      	movs	r2, #17
    468c:	f7fb fe18 	bl	2c0 <memcpy>
    4690:	bd70      	pop	{r4, r5, r6, pc}
    4692:	bf00      	nop
    4694:	00031538 	.word	0x00031538

00004698 <uuid128_cmp>:
		return;
	}
}

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    4698:	b510      	push	{r4, lr}
    469a:	b08a      	sub	sp, #40	; 0x28
    469c:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    469e:	a905      	add	r1, sp, #20
    46a0:	f7ff ffc8 	bl	4634 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    46a4:	4669      	mov	r1, sp
    46a6:	4620      	mov	r0, r4
    46a8:	f7ff ffc4 	bl	4634 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    46ac:	2210      	movs	r2, #16
    46ae:	f10d 0101 	add.w	r1, sp, #1
    46b2:	f10d 0015 	add.w	r0, sp, #21
    46b6:	f026 f89b 	bl	2a7f0 <memcmp>
}
    46ba:	b00a      	add	sp, #40	; 0x28
    46bc:	bd10      	pop	{r4, pc}

000046be <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    46be:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    46c0:	7803      	ldrb	r3, [r0, #0]
    46c2:	780a      	ldrb	r2, [r1, #0]
    46c4:	4293      	cmp	r3, r2
    46c6:	d107      	bne.n	46d8 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    46c8:	2b01      	cmp	r3, #1
    46ca:	d00c      	beq.n	46e6 <bt_uuid_cmp+0x28>
    46cc:	b13b      	cbz	r3, 46de <bt_uuid_cmp+0x20>
    46ce:	2b02      	cmp	r3, #2
    46d0:	d00d      	beq.n	46ee <bt_uuid_cmp+0x30>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
    46d2:	f06f 0015 	mvn.w	r0, #21
}
    46d6:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
    46d8:	f7ff ffde 	bl	4698 <uuid128_cmp>
    46dc:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    46de:	8840      	ldrh	r0, [r0, #2]
    46e0:	884b      	ldrh	r3, [r1, #2]
    46e2:	1ac0      	subs	r0, r0, r3
    46e4:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    46e6:	6840      	ldr	r0, [r0, #4]
    46e8:	684b      	ldr	r3, [r1, #4]
    46ea:	1ac0      	subs	r0, r0, r3
    46ec:	bd08      	pop	{r3, pc}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    46ee:	2210      	movs	r2, #16
    46f0:	3101      	adds	r1, #1
    46f2:	3001      	adds	r0, #1
    46f4:	f026 f87c 	bl	2a7f0 <memcmp>
    46f8:	bd08      	pop	{r3, pc}
	...

000046fc <le_dhkey_complete>:
		cb->func(evt->status ? NULL : evt->key);
	}
}

static void le_dhkey_complete(struct net_buf *buf)
{
    46fc:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    46fe:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    4700:	4b06      	ldr	r3, [pc, #24]	; (471c <le_dhkey_complete+0x20>)
    4702:	681b      	ldr	r3, [r3, #0]
    4704:	b133      	cbz	r3, 4714 <le_dhkey_complete+0x18>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4706:	7802      	ldrb	r2, [r0, #0]
    4708:	b92a      	cbnz	r2, 4716 <le_dhkey_complete+0x1a>
    470a:	3001      	adds	r0, #1
    470c:	4798      	blx	r3
		dh_key_cb = NULL;
    470e:	2200      	movs	r2, #0
    4710:	4b02      	ldr	r3, [pc, #8]	; (471c <le_dhkey_complete+0x20>)
    4712:	601a      	str	r2, [r3, #0]
    4714:	bd08      	pop	{r3, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4716:	2000      	movs	r0, #0
    4718:	e7f8      	b.n	470c <le_dhkey_complete+0x10>
    471a:	bf00      	nop
    471c:	200003e0 	.word	0x200003e0

00004720 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    4720:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    4722:	7851      	ldrb	r1, [r2, #1]
    4724:	4b06      	ldr	r3, [pc, #24]	; (4740 <read_local_ver_complete+0x20>)
    4726:	7399      	strb	r1, [r3, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    4728:	8851      	ldrh	r1, [r2, #2]
    472a:	8219      	strh	r1, [r3, #16]
	bt_dev.lmp_version = rp->lmp_version;
    472c:	7911      	ldrb	r1, [r2, #4]
    472e:	73d9      	strb	r1, [r3, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    4730:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    4734:	8259      	strh	r1, [r3, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    4736:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    473a:	829a      	strh	r2, [r3, #20]
    473c:	4770      	bx	lr
    473e:	bf00      	nop
    4740:	2000b980 	.word	0x2000b980

00004744 <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
    4744:	b410      	push	{r4}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    4746:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    4748:	7a1a      	ldrb	r2, [r3, #8]
    474a:	79dc      	ldrb	r4, [r3, #7]
    474c:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    4750:	7999      	ldrb	r1, [r3, #6]
    4752:	795a      	ldrb	r2, [r3, #5]
    4754:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4758:	2000      	movs	r0, #0
    475a:	ea42 4104 	orr.w	r1, r2, r4, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    475e:	791c      	ldrb	r4, [r3, #4]
    4760:	78da      	ldrb	r2, [r3, #3]
    4762:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    4766:	789c      	ldrb	r4, [r3, #2]
    4768:	785b      	ldrb	r3, [r3, #1]
    476a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    476e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4772:	4318      	orrs	r0, r3

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    4774:	4b02      	ldr	r3, [pc, #8]	; (4780 <le_read_supp_states_complete+0x3c>)
    4776:	e9c3 0120 	strd	r0, r1, [r3, #128]	; 0x80
}
    477a:	bc10      	pop	{r4}
    477c:	4770      	bx	lr
    477e:	bf00      	nop
    4780:	2000b980 	.word	0x2000b980

00004784 <valid_adv_param>:
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    4784:	7803      	ldrb	r3, [r0, #0]
    4786:	f013 0f01 	tst.w	r3, #1
    478a:	d106      	bne.n	479a <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    478c:	4b0c      	ldr	r3, [pc, #48]	; (47c0 <valid_adv_param+0x3c>)
    478e:	7b9b      	ldrb	r3, [r3, #14]
    4790:	2b08      	cmp	r3, #8
    4792:	d802      	bhi.n	479a <valid_adv_param+0x16>
		    param->interval_min < 0x00a0) {
    4794:	8843      	ldrh	r3, [r0, #2]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    4796:	2b9f      	cmp	r3, #159	; 0x9f
    4798:	d90c      	bls.n	47b4 <valid_adv_param+0x30>
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    479a:	8843      	ldrh	r3, [r0, #2]
    479c:	8882      	ldrh	r2, [r0, #4]
    479e:	4293      	cmp	r3, r2
    47a0:	d80a      	bhi.n	47b8 <valid_adv_param+0x34>
    47a2:	2b1f      	cmp	r3, #31
    47a4:	d90a      	bls.n	47bc <valid_adv_param+0x38>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    47a6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    47aa:	d801      	bhi.n	47b0 <valid_adv_param+0x2c>
		return false;
	}

	return true;
    47ac:	2001      	movs	r0, #1
}
    47ae:	4770      	bx	lr
		return false;
    47b0:	2000      	movs	r0, #0
    47b2:	4770      	bx	lr
			return false;
    47b4:	2000      	movs	r0, #0
    47b6:	4770      	bx	lr
		return false;
    47b8:	2000      	movs	r0, #0
    47ba:	4770      	bx	lr
    47bc:	2000      	movs	r0, #0
    47be:	4770      	bx	lr
    47c0:	2000b980 	.word	0x2000b980

000047c4 <hci_reset_complete>:
	u8_t status = buf->data[0];
    47c4:	6883      	ldr	r3, [r0, #8]
    47c6:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    47c8:	b103      	cbz	r3, 47cc <hci_reset_complete+0x8>
    47ca:	4770      	bx	lr
	scan_dev_found_cb = NULL;
    47cc:	2200      	movs	r2, #0
    47ce:	4b07      	ldr	r3, [pc, #28]	; (47ec <hci_reset_complete+0x28>)
    47d0:	601a      	str	r2, [r3, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    47d2:	4b07      	ldr	r3, [pc, #28]	; (47f0 <hci_reset_complete+0x2c>)
    47d4:	2201      	movs	r2, #1
    47d6:	f3bf 8f5b 	dmb	ish
    47da:	e853 1f00 	ldrex	r1, [r3]
    47de:	e843 2000 	strex	r0, r2, [r3]
    47e2:	2800      	cmp	r0, #0
    47e4:	d1f9      	bne.n	47da <hci_reset_complete+0x16>
    47e6:	f3bf 8f5b 	dmb	ish
    47ea:	e7ee      	b.n	47ca <hci_reset_complete+0x6>
    47ec:	2000042c 	.word	0x2000042c
    47f0:	2000b9f0 	.word	0x2000b9f0

000047f4 <read_local_features_complete>:
{
    47f4:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    47f6:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    47f8:	2208      	movs	r2, #8
    47fa:	3101      	adds	r1, #1
    47fc:	4801      	ldr	r0, [pc, #4]	; (4804 <read_local_features_complete+0x10>)
    47fe:	f7fb fd5f 	bl	2c0 <memcpy>
    4802:	bd08      	pop	{r3, pc}
    4804:	2000b996 	.word	0x2000b996

00004808 <read_bdaddr_complete>:
{
    4808:	b510      	push	{r4, lr}
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;
    480a:	6881      	ldr	r1, [r0, #8]
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    480c:	4c04      	ldr	r4, [pc, #16]	; (4820 <read_bdaddr_complete+0x18>)
    480e:	2206      	movs	r2, #6
    4810:	3101      	adds	r1, #1
    4812:	1c60      	adds	r0, r4, #1
    4814:	f7fb fd54 	bl	2c0 <memcpy>
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    4818:	2300      	movs	r3, #0
    481a:	7023      	strb	r3, [r4, #0]
    481c:	bd10      	pop	{r4, pc}
    481e:	bf00      	nop
    4820:	2000b980 	.word	0x2000b980

00004824 <read_supported_commands_complete>:
{
    4824:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    4826:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    4828:	2240      	movs	r2, #64	; 0x40
    482a:	3101      	adds	r1, #1
    482c:	4801      	ldr	r0, [pc, #4]	; (4834 <read_supported_commands_complete+0x10>)
    482e:	f7fb fd47 	bl	2c0 <memcpy>
    4832:	bd08      	pop	{r3, pc}
    4834:	2000b99e 	.word	0x2000b99e

00004838 <read_le_features_complete>:
{
    4838:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    483a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    483c:	2208      	movs	r2, #8
    483e:	3101      	adds	r1, #1
    4840:	4801      	ldr	r0, [pc, #4]	; (4848 <read_le_features_complete+0x10>)
    4842:	f7fb fd3d 	bl	2c0 <memcpy>
    4846:	bd08      	pop	{r3, pc}
    4848:	2000b9f8 	.word	0x2000b9f8

0000484c <le_read_buffer_size_complete>:
{
    484c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    484e:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    4850:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    4854:	b299      	uxth	r1, r3
    4856:	4807      	ldr	r0, [pc, #28]	; (4874 <le_read_buffer_size_complete+0x28>)
    4858:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    485c:	b901      	cbnz	r1, 4860 <le_read_buffer_size_complete+0x14>
    485e:	bd08      	pop	{r3, pc}
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    4860:	78d1      	ldrb	r1, [r2, #3]
    4862:	2902      	cmp	r1, #2
    4864:	bf28      	it	cs
    4866:	2102      	movcs	r1, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    4868:	460a      	mov	r2, r1
    486a:	308c      	adds	r0, #140	; 0x8c
    486c:	f024 fd98 	bl	293a0 <_impl_k_sem_init>
    4870:	e7f5      	b.n	485e <le_read_buffer_size_complete+0x12>
    4872:	bf00      	nop
    4874:	2000b980 	.word	0x2000b980

00004878 <read_buffer_size_complete>:
{
    4878:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    487a:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.mtu) {
    487c:	4b09      	ldr	r3, [pc, #36]	; (48a4 <read_buffer_size_complete+0x2c>)
    487e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    4882:	b103      	cbz	r3, 4886 <read_buffer_size_complete+0xe>
    4884:	bd08      	pop	{r3, pc}
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    4886:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    488a:	4806      	ldr	r0, [pc, #24]	; (48a4 <read_buffer_size_complete+0x2c>)
    488c:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    4890:	8891      	ldrh	r1, [r2, #4]
	pkts = min(pkts, CONFIG_BT_CONN_TX_MAX);
    4892:	2902      	cmp	r1, #2
    4894:	bf28      	it	cs
    4896:	2102      	movcs	r1, #2
    4898:	460a      	mov	r2, r1
    489a:	308c      	adds	r0, #140	; 0x8c
    489c:	f024 fd80 	bl	293a0 <_impl_k_sem_init>
    48a0:	e7f0      	b.n	4884 <read_buffer_size_complete+0xc>
    48a2:	bf00      	nop
    48a4:	2000b980 	.word	0x2000b980

000048a8 <le_pkey_complete>:
{
    48a8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    48aa:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    48ac:	4b17      	ldr	r3, [pc, #92]	; (490c <le_pkey_complete+0x64>)
    48ae:	f3bf 8f5b 	dmb	ish
    48b2:	e853 2f00 	ldrex	r2, [r3]
    48b6:	f022 0210 	bic.w	r2, r2, #16
    48ba:	e843 2100 	strex	r1, r2, [r3]
    48be:	2900      	cmp	r1, #0
    48c0:	d1f7      	bne.n	48b2 <le_pkey_complete+0xa>
    48c2:	f3bf 8f5b 	dmb	ish
	if (!evt->status) {
    48c6:	782b      	ldrb	r3, [r5, #0]
    48c8:	b113      	cbz	r3, 48d0 <le_pkey_complete+0x28>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    48ca:	4b11      	ldr	r3, [pc, #68]	; (4910 <le_pkey_complete+0x68>)
    48cc:	681c      	ldr	r4, [r3, #0]
    48ce:	e015      	b.n	48fc <le_pkey_complete+0x54>
		memcpy(pub_key, evt->key, 64);
    48d0:	2240      	movs	r2, #64	; 0x40
    48d2:	1c69      	adds	r1, r5, #1
    48d4:	480f      	ldr	r0, [pc, #60]	; (4914 <le_pkey_complete+0x6c>)
    48d6:	f7fb fcf3 	bl	2c0 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    48da:	4b0c      	ldr	r3, [pc, #48]	; (490c <le_pkey_complete+0x64>)
    48dc:	f3bf 8f5b 	dmb	ish
    48e0:	e853 2f00 	ldrex	r2, [r3]
    48e4:	f042 0208 	orr.w	r2, r2, #8
    48e8:	e843 2100 	strex	r1, r2, [r3]
    48ec:	2900      	cmp	r1, #0
    48ee:	d1f7      	bne.n	48e0 <le_pkey_complete+0x38>
    48f0:	f3bf 8f5b 	dmb	ish
    48f4:	e7e9      	b.n	48ca <le_pkey_complete+0x22>
		cb->func(evt->status ? NULL : evt->key);
    48f6:	2000      	movs	r0, #0
    48f8:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    48fa:	6864      	ldr	r4, [r4, #4]
    48fc:	b12c      	cbz	r4, 490a <le_pkey_complete+0x62>
		cb->func(evt->status ? NULL : evt->key);
    48fe:	6823      	ldr	r3, [r4, #0]
    4900:	782a      	ldrb	r2, [r5, #0]
    4902:	2a00      	cmp	r2, #0
    4904:	d1f7      	bne.n	48f6 <le_pkey_complete+0x4e>
    4906:	1c68      	adds	r0, r5, #1
    4908:	e7f6      	b.n	48f8 <le_pkey_complete+0x50>
}
    490a:	bd38      	pop	{r3, r4, r5, pc}
    490c:	2000b9f0 	.word	0x2000b9f0
    4910:	20000424 	.word	0x20000424
    4914:	200003e4 	.word	0x200003e4

00004918 <hci_acl>:
{
    4918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    491a:	4604      	mov	r4, r0
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    491c:	6883      	ldr	r3, [r0, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    491e:	885e      	ldrh	r6, [r3, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    4920:	881a      	ldrh	r2, [r3, #0]
	flags = bt_acl_flags(handle);
    4922:	0b17      	lsrs	r7, r2, #12
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    4924:	f100 0510 	add.w	r5, r0, #16
    4928:	89c3      	ldrh	r3, [r0, #14]
    492a:	442b      	add	r3, r5
    492c:	3303      	adds	r3, #3
    492e:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->handle = bt_acl_handle(handle);
    4932:	f3c2 020b 	ubfx	r2, r2, #0, #12
    4936:	805a      	strh	r2, [r3, #2]
    4938:	89c3      	ldrh	r3, [r0, #14]
    493a:	442b      	add	r3, r5
    493c:	3303      	adds	r3, #3
    493e:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->id = BT_CONN_ID_INVALID;
    4942:	22ff      	movs	r2, #255	; 0xff
    4944:	705a      	strb	r2, [r3, #1]
	net_buf_pull(buf, sizeof(*hdr));
    4946:	2104      	movs	r1, #4
    4948:	3008      	adds	r0, #8
    494a:	f016 fa80 	bl	1ae4e <net_buf_simple_pull>
	if (buf->len != len) {
    494e:	89a3      	ldrh	r3, [r4, #12]
    4950:	429e      	cmp	r6, r3
    4952:	d003      	beq.n	495c <hci_acl+0x44>
		net_buf_unref(buf);
    4954:	4620      	mov	r0, r4
    4956:	f016 f9e1 	bl	1ad1c <net_buf_unref>
		return;
    495a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    495c:	89e3      	ldrh	r3, [r4, #14]
    495e:	442b      	add	r3, r5
    4960:	3303      	adds	r3, #3
    4962:	f023 0303 	bic.w	r3, r3, #3
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    4966:	8858      	ldrh	r0, [r3, #2]
    4968:	f002 fc7e 	bl	7268 <bt_conn_lookup_handle>
	if (!conn) {
    496c:	4606      	mov	r6, r0
    496e:	b180      	cbz	r0, 4992 <hci_acl+0x7a>
    4970:	89e3      	ldrh	r3, [r4, #14]
    4972:	441d      	add	r5, r3
    4974:	3503      	adds	r5, #3
    4976:	f025 0503 	bic.w	r5, r5, #3
	acl(buf)->id = bt_conn_get_id(conn);
    497a:	f003 f83b 	bl	79f4 <bt_conn_get_id>
    497e:	7068      	strb	r0, [r5, #1]
	bt_conn_recv(conn, buf, flags);
    4980:	463a      	mov	r2, r7
    4982:	4621      	mov	r1, r4
    4984:	4630      	mov	r0, r6
    4986:	f002 fb23 	bl	6fd0 <bt_conn_recv>
	bt_conn_unref(conn);
    498a:	4630      	mov	r0, r6
    498c:	f002 fcf0 	bl	7370 <bt_conn_unref>
    4990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    4992:	4620      	mov	r0, r4
    4994:	f016 f9c2 	bl	1ad1c <net_buf_unref>
		return;
    4998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000499a <update_sec_level>:
{
    499a:	b508      	push	{r3, lr}
	if (!conn->encrypt) {
    499c:	7a83      	ldrb	r3, [r0, #10]
    499e:	b18b      	cbz	r3, 49c4 <update_sec_level+0x2a>
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    49a0:	6f03      	ldr	r3, [r0, #112]	; 0x70
    49a2:	b1ab      	cbz	r3, 49d0 <update_sec_level+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    49a4:	f3bf 8f5b 	dmb	ish
    49a8:	689b      	ldr	r3, [r3, #8]
    49aa:	f3bf 8f5b 	dmb	ish
    49ae:	f013 0f01 	tst.w	r3, #1
    49b2:	d00d      	beq.n	49d0 <update_sec_level+0x36>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    49b4:	6f03      	ldr	r3, [r0, #112]	; 0x70
    49b6:	899b      	ldrh	r3, [r3, #12]
    49b8:	f013 0f20 	tst.w	r3, #32
    49bc:	d005      	beq.n	49ca <update_sec_level+0x30>
			conn->sec_level = BT_SECURITY_FIPS;
    49be:	2304      	movs	r3, #4
    49c0:	7203      	strb	r3, [r0, #8]
    49c2:	e007      	b.n	49d4 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_LOW;
    49c4:	2301      	movs	r3, #1
    49c6:	7203      	strb	r3, [r0, #8]
		return;
    49c8:	bd08      	pop	{r3, pc}
			conn->sec_level = BT_SECURITY_HIGH;
    49ca:	2303      	movs	r3, #3
    49cc:	7203      	strb	r3, [r0, #8]
    49ce:	e001      	b.n	49d4 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_MEDIUM;
    49d0:	2302      	movs	r3, #2
    49d2:	7203      	strb	r3, [r0, #8]
	if (conn->required_sec_level > conn->sec_level) {
    49d4:	7a42      	ldrb	r2, [r0, #9]
    49d6:	7a03      	ldrb	r3, [r0, #8]
    49d8:	429a      	cmp	r2, r3
    49da:	d800      	bhi.n	49de <update_sec_level+0x44>
    49dc:	bd08      	pop	{r3, pc}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    49de:	2105      	movs	r1, #5
    49e0:	f002 fe8a 	bl	76f8 <bt_conn_disconnect>
    49e4:	e7fa      	b.n	49dc <update_sec_level+0x42>

000049e6 <hci_encrypt_change>:
{
    49e6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    49e8:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    49ea:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    49ee:	f002 fc3b 	bl	7268 <bt_conn_lookup_handle>
	if (!conn) {
    49f2:	b1e0      	cbz	r0, 4a2e <hci_encrypt_change+0x48>
    49f4:	4604      	mov	r4, r0
	if (evt->status) {
    49f6:	782b      	ldrb	r3, [r5, #0]
    49f8:	b13b      	cbz	r3, 4a0a <hci_encrypt_change+0x24>
		if (conn->type == BT_CONN_TYPE_LE) {
    49fa:	7883      	ldrb	r3, [r0, #2]
    49fc:	b90b      	cbnz	r3, 4a02 <hci_encrypt_change+0x1c>
			conn->required_sec_level = conn->sec_level;
    49fe:	7a03      	ldrb	r3, [r0, #8]
    4a00:	7243      	strb	r3, [r0, #9]
		bt_conn_unref(conn);
    4a02:	4620      	mov	r0, r4
    4a04:	f002 fcb4 	bl	7370 <bt_conn_unref>
		return;
    4a08:	bd38      	pop	{r3, r4, r5, pc}
	conn->encrypt = evt->encrypt;
    4a0a:	78eb      	ldrb	r3, [r5, #3]
    4a0c:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    4a0e:	7882      	ldrb	r2, [r0, #2]
    4a10:	b91a      	cbnz	r2, 4a1a <hci_encrypt_change+0x34>
		if (conn->encrypt) {
    4a12:	b96b      	cbnz	r3, 4a30 <hci_encrypt_change+0x4a>
		update_sec_level(conn);
    4a14:	4620      	mov	r0, r4
    4a16:	f7ff ffc0 	bl	499a <update_sec_level>
	bt_l2cap_encrypt_change(conn, evt->status);
    4a1a:	7829      	ldrb	r1, [r5, #0]
    4a1c:	4620      	mov	r0, r4
    4a1e:	f003 fbcb 	bl	81b8 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    4a22:	4620      	mov	r0, r4
    4a24:	f002 fa9e 	bl	6f64 <bt_conn_security_changed>
	bt_conn_unref(conn);
    4a28:	4620      	mov	r0, r4
    4a2a:	f002 fca1 	bl	7370 <bt_conn_unref>
    4a2e:	bd38      	pop	{r3, r4, r5, pc}
			bt_smp_update_keys(conn);
    4a30:	f008 fafe 	bl	d030 <bt_smp_update_keys>
    4a34:	e7ee      	b.n	4a14 <hci_encrypt_change+0x2e>

00004a36 <hci_encrypt_key_refresh_complete>:
{
    4a36:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    4a38:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    4a3a:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    4a3e:	f002 fc13 	bl	7268 <bt_conn_lookup_handle>
	if (!conn) {
    4a42:	b170      	cbz	r0, 4a62 <hci_encrypt_key_refresh_complete+0x2c>
    4a44:	4604      	mov	r4, r0
	if (evt->status) {
    4a46:	7829      	ldrb	r1, [r5, #0]
    4a48:	b961      	cbnz	r1, 4a64 <hci_encrypt_key_refresh_complete+0x2e>
	if (conn->type == BT_CONN_TYPE_LE) {
    4a4a:	7883      	ldrb	r3, [r0, #2]
    4a4c:	b16b      	cbz	r3, 4a6a <hci_encrypt_key_refresh_complete+0x34>
	bt_l2cap_encrypt_change(conn, evt->status);
    4a4e:	7829      	ldrb	r1, [r5, #0]
    4a50:	4620      	mov	r0, r4
    4a52:	f003 fbb1 	bl	81b8 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    4a56:	4620      	mov	r0, r4
    4a58:	f002 fa84 	bl	6f64 <bt_conn_security_changed>
	bt_conn_unref(conn);
    4a5c:	4620      	mov	r0, r4
    4a5e:	f002 fc87 	bl	7370 <bt_conn_unref>
    4a62:	bd38      	pop	{r3, r4, r5, pc}
		bt_l2cap_encrypt_change(conn, evt->status);
    4a64:	f003 fba8 	bl	81b8 <bt_l2cap_encrypt_change>
		return;
    4a68:	bd38      	pop	{r3, r4, r5, pc}
		bt_smp_update_keys(conn);
    4a6a:	f008 fae1 	bl	d030 <bt_smp_update_keys>
		update_sec_level(conn);
    4a6e:	4620      	mov	r0, r4
    4a70:	f7ff ff93 	bl	499a <update_sec_level>
    4a74:	e7eb      	b.n	4a4e <hci_encrypt_key_refresh_complete+0x18>

00004a76 <find_id_addr>:
{
    4a76:	b510      	push	{r4, lr}
    4a78:	4604      	mov	r4, r0
		keys = bt_keys_find_irk(addr);
    4a7a:	f008 fbe3 	bl	d244 <bt_keys_find_irk>
		if (keys) {
    4a7e:	b100      	cbz	r0, 4a82 <find_id_addr+0xc>
			return &keys->addr;
    4a80:	bd10      	pop	{r4, pc}
	return addr;
    4a82:	4620      	mov	r0, r4
}
    4a84:	bd10      	pop	{r4, pc}
	...

00004a88 <update_conn_param>:
{
    4a88:	b508      	push	{r3, lr}
	k_delayed_work_submit(&conn->le.update_work,
    4a8a:	f100 0174 	add.w	r1, r0, #116	; 0x74
				 conn->role == BT_HCI_ROLE_MASTER ? K_NO_WAIT :
    4a8e:	78c3      	ldrb	r3, [r0, #3]
	k_delayed_work_submit(&conn->le.update_work,
    4a90:	b12b      	cbz	r3, 4a9e <update_conn_param+0x16>
    4a92:	f241 3288 	movw	r2, #5000	; 0x1388
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    4a96:	4803      	ldr	r0, [pc, #12]	; (4aa4 <update_conn_param+0x1c>)
    4a98:	f025 fad4 	bl	2a044 <k_delayed_work_submit_to_queue>
    4a9c:	bd08      	pop	{r3, pc}
    4a9e:	2200      	movs	r2, #0
    4aa0:	e7f9      	b.n	4a96 <update_conn_param+0xe>
    4aa2:	bf00      	nop
    4aa4:	20002c78 	.word	0x20002c78

00004aa8 <le_data_len_change>:
{
    4aa8:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
    4aaa:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    4aac:	8818      	ldrh	r0, [r3, #0]
    4aae:	f002 fbdb 	bl	7268 <bt_conn_lookup_handle>
	if (!conn) {
    4ab2:	b198      	cbz	r0, 4adc <le_data_len_change+0x34>
    4ab4:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    4ab6:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4ab8:	f3bf 8f5b 	dmb	ish
    4abc:	e853 2f00 	ldrex	r2, [r3]
    4ac0:	f422 7180 	bic.w	r1, r2, #256	; 0x100
    4ac4:	e843 1000 	strex	r0, r1, [r3]
    4ac8:	2800      	cmp	r0, #0
    4aca:	d1f7      	bne.n	4abc <le_data_len_change+0x14>
    4acc:	f3bf 8f5b 	dmb	ish
    4ad0:	f412 7f80 	tst.w	r2, #256	; 0x100
    4ad4:	d103      	bne.n	4ade <le_data_len_change+0x36>
	bt_conn_unref(conn);
    4ad6:	4620      	mov	r0, r4
    4ad8:	f002 fc4a 	bl	7370 <bt_conn_unref>
    4adc:	bd10      	pop	{r4, pc}
	update_conn_param(conn);
    4ade:	4620      	mov	r0, r4
    4ae0:	f7ff ffd2 	bl	4a88 <update_conn_param>
    4ae4:	e7f7      	b.n	4ad6 <le_data_len_change+0x2e>
	...

00004ae8 <le_data_len_change>:
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
}

static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
    4ae8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4aea:	4b12      	ldr	r3, [pc, #72]	; (4b34 <le_data_len_change+0x4c>)
    4aec:	e9d3 4500 	ldrd	r4, r5, [r3]
    4af0:	2400      	movs	r4, #0
    4af2:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    4af6:	ea54 0305 	orrs.w	r3, r4, r5
    4afa:	d008      	beq.n	4b0e <le_data_len_change+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    4afc:	4b0e      	ldr	r3, [pc, #56]	; (4b38 <le_data_len_change+0x50>)
    4afe:	e9d3 4500 	ldrd	r4, r5, [r3]
    4b02:	f004 0440 	and.w	r4, r4, #64	; 0x40
    4b06:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4b08:	ea54 0305 	orrs.w	r3, r4, r5
    4b0c:	d100      	bne.n	4b10 <le_data_len_change+0x28>
    4b0e:	bd38      	pop	{r3, r4, r5, pc}
    4b10:	4613      	mov	r3, r2
    4b12:	460d      	mov	r5, r1
    4b14:	4604      	mov	r4, r0
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    4b16:	220a      	movs	r2, #10
    4b18:	2107      	movs	r1, #7
    4b1a:	4618      	mov	r0, r3
    4b1c:	f008 fcf0 	bl	d500 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    4b20:	8005      	strh	r5, [r0, #0]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    4b22:	8923      	ldrh	r3, [r4, #8]
	sep->max_tx_octets =
    4b24:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    4b26:	8963      	ldrh	r3, [r4, #10]
	sep->max_tx_time =
    4b28:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    4b2a:	88a3      	ldrh	r3, [r4, #4]
	sep->max_rx_octets =
    4b2c:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    4b2e:	88e3      	ldrh	r3, [r4, #6]
	sep->max_rx_time =
    4b30:	8103      	strh	r3, [r0, #8]
    4b32:	e7ec      	b.n	4b0e <le_data_len_change+0x26>
    4b34:	2000bc70 	.word	0x2000bc70
    4b38:	2000bc78 	.word	0x2000bc78

00004b3c <le_conn_update_complete>:
{
    4b3c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    4b3e:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    4b40:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    4b44:	f002 fb90 	bl	7268 <bt_conn_lookup_handle>
	if (!conn) {
    4b48:	b128      	cbz	r0, 4b56 <le_conn_update_complete+0x1a>
    4b4a:	4605      	mov	r5, r0
	if (!evt->status) {
    4b4c:	7823      	ldrb	r3, [r4, #0]
    4b4e:	b11b      	cbz	r3, 4b58 <le_conn_update_complete+0x1c>
	bt_conn_unref(conn);
    4b50:	4628      	mov	r0, r5
    4b52:	f002 fc0d 	bl	7370 <bt_conn_unref>
    4b56:	bd38      	pop	{r3, r4, r5, pc}
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    4b58:	f8b4 3003 	ldrh.w	r3, [r4, #3]
    4b5c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    4b60:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    4b64:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4b68:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    4b6c:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    4b70:	f002 f912 	bl	6d98 <notify_le_param_updated>
    4b74:	e7ec      	b.n	4b50 <le_conn_update_complete+0x14>
	...

00004b78 <le_conn_update_complete>:
{
    4b78:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4b7a:	4b14      	ldr	r3, [pc, #80]	; (4bcc <le_conn_update_complete+0x54>)
    4b7c:	e9d3 4500 	ldrd	r4, r5, [r3]
    4b80:	2400      	movs	r4, #0
    4b82:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    4b86:	ea54 0305 	orrs.w	r3, r4, r5
    4b8a:	d008      	beq.n	4b9e <le_conn_update_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    4b8c:	4b10      	ldr	r3, [pc, #64]	; (4bd0 <le_conn_update_complete+0x58>)
    4b8e:	e9d3 4500 	ldrd	r4, r5, [r3]
    4b92:	f004 0404 	and.w	r4, r4, #4
    4b96:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4b98:	ea54 0305 	orrs.w	r3, r4, r5
    4b9c:	d100      	bne.n	4ba0 <le_conn_update_complete+0x28>
    4b9e:	bd38      	pop	{r3, r4, r5, pc}
    4ba0:	4613      	mov	r3, r2
    4ba2:	460d      	mov	r5, r1
    4ba4:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    4ba6:	2209      	movs	r2, #9
    4ba8:	2103      	movs	r1, #3
    4baa:	4618      	mov	r0, r3
    4bac:	f008 fca8 	bl	d500 <meta_evt>
	sep->status = radio_cu->status;
    4bb0:	78e3      	ldrb	r3, [r4, #3]
    4bb2:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    4bb4:	f8a0 5001 	strh.w	r5, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    4bb8:	88a3      	ldrh	r3, [r4, #4]
    4bba:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    4bbe:	88e3      	ldrh	r3, [r4, #6]
    4bc0:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    4bc4:	8923      	ldrh	r3, [r4, #8]
    4bc6:	f8a0 3007 	strh.w	r3, [r0, #7]
    4bca:	e7e8      	b.n	4b9e <le_conn_update_complete+0x26>
    4bcc:	2000bc70 	.word	0x2000bc70
    4bd0:	2000bc78 	.word	0x2000bc78

00004bd4 <hci_cmd_done>:
{
    4bd4:	b538      	push	{r3, r4, r5, lr}
    4bd6:	460d      	mov	r5, r1
    4bd8:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4bda:	7990      	ldrb	r0, [r2, #6]
    4bdc:	f016 f824 	bl	1ac28 <net_buf_pool_get>
    4be0:	4b0b      	ldr	r3, [pc, #44]	; (4c10 <hci_cmd_done+0x3c>)
    4be2:	4283      	cmp	r3, r0
    4be4:	d000      	beq.n	4be8 <hci_cmd_done+0x14>
    4be6:	bd38      	pop	{r3, r4, r5, pc}
    4be8:	f104 0210 	add.w	r2, r4, #16
    4bec:	89e3      	ldrh	r3, [r4, #14]
    4bee:	4413      	add	r3, r2
    4bf0:	3303      	adds	r3, #3
    4bf2:	f023 0303 	bic.w	r3, r3, #3
	if (cmd(buf)->sync) {
    4bf6:	6859      	ldr	r1, [r3, #4]
    4bf8:	2900      	cmp	r1, #0
    4bfa:	d0f4      	beq.n	4be6 <hci_cmd_done+0x12>
		cmd(buf)->status = status;
    4bfc:	705d      	strb	r5, [r3, #1]
    4bfe:	89e3      	ldrh	r3, [r4, #14]
    4c00:	441a      	add	r2, r3
    4c02:	3203      	adds	r2, #3
    4c04:	f022 0203 	bic.w	r2, r2, #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4c08:	6850      	ldr	r0, [r2, #4]
    4c0a:	f024 fbd2 	bl	293b2 <_impl_k_sem_give>
    4c0e:	e7ea      	b.n	4be6 <hci_cmd_done+0x12>
    4c10:	2000d220 	.word	0x2000d220

00004c14 <hci_cmd_complete>:
{
    4c14:	b570      	push	{r4, r5, r6, lr}
    4c16:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    4c18:	f850 3f08 	ldr.w	r3, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4c1c:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    4c20:	781d      	ldrb	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    4c22:	2103      	movs	r1, #3
    4c24:	f016 f913 	bl	1ae4e <net_buf_simple_pull>
	status = buf->data[0];
    4c28:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    4c2a:	4622      	mov	r2, r4
    4c2c:	7819      	ldrb	r1, [r3, #0]
    4c2e:	4630      	mov	r0, r6
    4c30:	f7ff ffd0 	bl	4bd4 <hci_cmd_done>
	if (ncmd) {
    4c34:	b905      	cbnz	r5, 4c38 <hci_cmd_complete+0x24>
    4c36:	bd70      	pop	{r4, r5, r6, pc}
    4c38:	4801      	ldr	r0, [pc, #4]	; (4c40 <hci_cmd_complete+0x2c>)
    4c3a:	f024 fbba 	bl	293b2 <_impl_k_sem_give>
}
    4c3e:	e7fa      	b.n	4c36 <hci_cmd_complete+0x22>
    4c40:	2000ba28 	.word	0x2000ba28

00004c44 <hci_cmd_status>:
{
    4c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c46:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    4c48:	f850 4f08 	ldr.w	r4, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4c4c:	8867      	ldrh	r7, [r4, #2]
	u8_t ncmd = evt->ncmd;
    4c4e:	7866      	ldrb	r6, [r4, #1]
	net_buf_pull(buf, sizeof(*evt));
    4c50:	2104      	movs	r1, #4
    4c52:	f016 f8fc 	bl	1ae4e <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    4c56:	462a      	mov	r2, r5
    4c58:	7821      	ldrb	r1, [r4, #0]
    4c5a:	4638      	mov	r0, r7
    4c5c:	f7ff ffba 	bl	4bd4 <hci_cmd_done>
	if (ncmd) {
    4c60:	b906      	cbnz	r6, 4c64 <hci_cmd_status+0x20>
    4c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c64:	4801      	ldr	r0, [pc, #4]	; (4c6c <hci_cmd_status+0x28>)
    4c66:	f024 fba4 	bl	293b2 <_impl_k_sem_give>
}
    4c6a:	e7fa      	b.n	4c62 <hci_cmd_status+0x1e>
    4c6c:	2000ba28 	.word	0x2000ba28

00004c70 <hci_num_completed_packets>:
{
    4c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    4c74:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
    4c78:	2700      	movs	r7, #0
    4c7a:	e026      	b.n	4cca <hci_num_completed_packets+0x5a>
    4c7c:	f386 8811 	msr	BASEPRI, r6
			continue;
    4c80:	e022      	b.n	4cc8 <hci_num_completed_packets+0x58>
    4c82:	f383 8811 	msr	BASEPRI, r3
			if (!node) {
    4c86:	b1e1      	cbz	r1, 4cc2 <hci_num_completed_packets+0x52>
			k_fifo_put(&conn->tx_notify, node);
    4c88:	f104 001c 	add.w	r0, r4, #28
    4c8c:	f023 fffa 	bl	28c84 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    4c90:	4620      	mov	r0, r4
    4c92:	f002 f85f 	bl	6d54 <bt_conn_get_pkts>
    4c96:	f024 fb8c 	bl	293b2 <_impl_k_sem_give>
		while (count--) {
    4c9a:	4635      	mov	r5, r6
    4c9c:	1e6b      	subs	r3, r5, #1
    4c9e:	b29e      	uxth	r6, r3
    4ca0:	b17d      	cbz	r5, 4cc2 <hci_num_completed_packets+0x52>
	__asm__ volatile(
    4ca2:	f04f 0220 	mov.w	r2, #32
    4ca6:	f3ef 8311 	mrs	r3, BASEPRI
    4caa:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    4cae:	6961      	ldr	r1, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    4cb0:	2900      	cmp	r1, #0
    4cb2:	d0e6      	beq.n	4c82 <hci_num_completed_packets+0x12>
	list->head = node->next;
    4cb4:	680a      	ldr	r2, [r1, #0]
    4cb6:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    4cb8:	69a0      	ldr	r0, [r4, #24]
    4cba:	4281      	cmp	r1, r0
    4cbc:	d1e1      	bne.n	4c82 <hci_num_completed_packets+0x12>
		list->tail = list->head;
    4cbe:	61a2      	str	r2, [r4, #24]
    4cc0:	e7df      	b.n	4c82 <hci_num_completed_packets+0x12>
		bt_conn_unref(conn);
    4cc2:	4620      	mov	r0, r4
    4cc4:	f002 fb54 	bl	7370 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
    4cc8:	3701      	adds	r7, #1
    4cca:	f898 3000 	ldrb.w	r3, [r8]
    4cce:	429f      	cmp	r7, r3
    4cd0:	da13      	bge.n	4cfa <hci_num_completed_packets+0x8a>
		handle = sys_le16_to_cpu(evt->h[i].handle);
    4cd2:	eb08 0387 	add.w	r3, r8, r7, lsl #2
    4cd6:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4cda:	f8b3 5003 	ldrh.w	r5, [r3, #3]
    4cde:	f04f 0320 	mov.w	r3, #32
    4ce2:	f3ef 8611 	mrs	r6, BASEPRI
    4ce6:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    4cea:	f002 fabd 	bl	7268 <bt_conn_lookup_handle>
		if (!conn) {
    4cee:	4604      	mov	r4, r0
    4cf0:	2800      	cmp	r0, #0
    4cf2:	d0c3      	beq.n	4c7c <hci_num_completed_packets+0xc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4cf4:	f386 8811 	msr	BASEPRI, r6
    4cf8:	e7d0      	b.n	4c9c <hci_num_completed_packets+0x2c>
}
    4cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00004d00 <bt_hci_cmd_create>:
{
    4d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d02:	4607      	mov	r7, r0
    4d04:	460d      	mov	r5, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    4d06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4d0a:	4812      	ldr	r0, [pc, #72]	; (4d54 <bt_hci_cmd_create+0x54>)
    4d0c:	f015 ff98 	bl	1ac40 <net_buf_alloc>
    4d10:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4d12:	2100      	movs	r1, #0
    4d14:	f015 ffef 	bl	1acf6 <net_buf_reserve>
    4d18:	f104 0310 	add.w	r3, r4, #16
    4d1c:	89e2      	ldrh	r2, [r4, #14]
    4d1e:	441a      	add	r2, r3
    4d20:	3203      	adds	r2, #3
    4d22:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->type = BT_BUF_CMD;
    4d26:	2100      	movs	r1, #0
    4d28:	7011      	strb	r1, [r2, #0]
    4d2a:	89e2      	ldrh	r2, [r4, #14]
    4d2c:	441a      	add	r2, r3
    4d2e:	3203      	adds	r2, #3
    4d30:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->opcode = opcode;
    4d34:	8057      	strh	r7, [r2, #2]
    4d36:	89e2      	ldrh	r2, [r4, #14]
    4d38:	4413      	add	r3, r2
    4d3a:	3303      	adds	r3, #3
    4d3c:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = NULL;
    4d40:	6059      	str	r1, [r3, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    4d42:	2103      	movs	r1, #3
    4d44:	f104 0008 	add.w	r0, r4, #8
    4d48:	f016 f834 	bl	1adb4 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    4d4c:	8007      	strh	r7, [r0, #0]
	hdr->param_len = param_len;
    4d4e:	7085      	strb	r5, [r0, #2]
}
    4d50:	4620      	mov	r0, r4
    4d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d54:	2000d220 	.word	0x2000d220

00004d58 <bt_hci_cmd_send_sync>:
{
    4d58:	b570      	push	{r4, r5, r6, lr}
    4d5a:	b086      	sub	sp, #24
    4d5c:	4616      	mov	r6, r2
	if (!buf) {
    4d5e:	460d      	mov	r5, r1
    4d60:	b329      	cbz	r1, 4dae <bt_hci_cmd_send_sync+0x56>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    4d62:	2201      	movs	r2, #1
    4d64:	2100      	movs	r1, #0
    4d66:	4668      	mov	r0, sp
    4d68:	f024 fb1a 	bl	293a0 <_impl_k_sem_init>
    4d6c:	f105 0410 	add.w	r4, r5, #16
    4d70:	89eb      	ldrh	r3, [r5, #14]
    4d72:	4423      	add	r3, r4
    4d74:	3303      	adds	r3, #3
    4d76:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = &sync_sem;
    4d7a:	f8c3 d004 	str.w	sp, [r3, #4]
	net_buf_ref(buf);
    4d7e:	4628      	mov	r0, r5
    4d80:	f015 ffe8 	bl	1ad54 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4d84:	4629      	mov	r1, r5
    4d86:	4813      	ldr	r0, [pc, #76]	; (4dd4 <bt_hci_cmd_send_sync+0x7c>)
    4d88:	f015 ffba 	bl	1ad00 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4d8c:	f242 7110 	movw	r1, #10000	; 0x2710
    4d90:	4668      	mov	r0, sp
    4d92:	f024 fb21 	bl	293d8 <_impl_k_sem_take>
    4d96:	89eb      	ldrh	r3, [r5, #14]
    4d98:	441c      	add	r4, r3
    4d9a:	3403      	adds	r4, #3
    4d9c:	f024 0403 	bic.w	r4, r4, #3
	if (cmd(buf)->status) {
    4da0:	7863      	ldrb	r3, [r4, #1]
    4da2:	b963      	cbnz	r3, 4dbe <bt_hci_cmd_send_sync+0x66>
		if (rsp) {
    4da4:	b18e      	cbz	r6, 4dca <bt_hci_cmd_send_sync+0x72>
			*rsp = buf;
    4da6:	6035      	str	r5, [r6, #0]
		err = 0;
    4da8:	2000      	movs	r0, #0
}
    4daa:	b006      	add	sp, #24
    4dac:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    4dae:	f7ff ffa7 	bl	4d00 <bt_hci_cmd_create>
		if (!buf) {
    4db2:	4605      	mov	r5, r0
    4db4:	2800      	cmp	r0, #0
    4db6:	d1d4      	bne.n	4d62 <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
    4db8:	f06f 0068 	mvn.w	r0, #104	; 0x68
    4dbc:	e7f5      	b.n	4daa <bt_hci_cmd_send_sync+0x52>
		net_buf_unref(buf);
    4dbe:	4628      	mov	r0, r5
    4dc0:	f015 ffac 	bl	1ad1c <net_buf_unref>
		err = -EIO;
    4dc4:	f06f 0004 	mvn.w	r0, #4
    4dc8:	e7ef      	b.n	4daa <bt_hci_cmd_send_sync+0x52>
			net_buf_unref(buf);
    4dca:	4628      	mov	r0, r5
    4dcc:	f015 ffa6 	bl	1ad1c <net_buf_unref>
		err = 0;
    4dd0:	2000      	movs	r0, #0
    4dd2:	e7ea      	b.n	4daa <bt_hci_cmd_send_sync+0x52>
    4dd4:	2000ba54 	.word	0x2000ba54

00004dd8 <common_init>:
{
    4dd8:	b510      	push	{r4, lr}
    4dda:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    4ddc:	aa01      	add	r2, sp, #4
    4dde:	2100      	movs	r1, #0
    4de0:	f640 4003 	movw	r0, #3075	; 0xc03
    4de4:	f7ff ffb8 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    4de8:	4604      	mov	r4, r0
    4dea:	b110      	cbz	r0, 4df2 <common_init+0x1a>
}
    4dec:	4620      	mov	r0, r4
    4dee:	b002      	add	sp, #8
    4df0:	bd10      	pop	{r4, pc}
	hci_reset_complete(rsp);
    4df2:	9801      	ldr	r0, [sp, #4]
    4df4:	f7ff fce6 	bl	47c4 <hci_reset_complete>
	net_buf_unref(rsp);
    4df8:	ac02      	add	r4, sp, #8
    4dfa:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4dfe:	f015 ff8d 	bl	1ad1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    4e02:	4622      	mov	r2, r4
    4e04:	2100      	movs	r1, #0
    4e06:	f241 0003 	movw	r0, #4099	; 0x1003
    4e0a:	f7ff ffa5 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    4e0e:	4604      	mov	r4, r0
    4e10:	2800      	cmp	r0, #0
    4e12:	d1eb      	bne.n	4dec <common_init+0x14>
	read_local_features_complete(rsp);
    4e14:	9801      	ldr	r0, [sp, #4]
    4e16:	f7ff fced 	bl	47f4 <read_local_features_complete>
	net_buf_unref(rsp);
    4e1a:	ac02      	add	r4, sp, #8
    4e1c:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4e20:	f015 ff7c 	bl	1ad1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    4e24:	4622      	mov	r2, r4
    4e26:	2100      	movs	r1, #0
    4e28:	f241 0001 	movw	r0, #4097	; 0x1001
    4e2c:	f7ff ff94 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    4e30:	4604      	mov	r4, r0
    4e32:	2800      	cmp	r0, #0
    4e34:	d1da      	bne.n	4dec <common_init+0x14>
	read_local_ver_complete(rsp);
    4e36:	9801      	ldr	r0, [sp, #4]
    4e38:	f7ff fc72 	bl	4720 <read_local_ver_complete>
	net_buf_unref(rsp);
    4e3c:	ac02      	add	r4, sp, #8
    4e3e:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4e42:	f015 ff6b 	bl	1ad1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    4e46:	4622      	mov	r2, r4
    4e48:	2100      	movs	r1, #0
    4e4a:	f241 0009 	movw	r0, #4105	; 0x1009
    4e4e:	f7ff ff83 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    4e52:	4604      	mov	r4, r0
    4e54:	2800      	cmp	r0, #0
    4e56:	d1c9      	bne.n	4dec <common_init+0x14>
	read_bdaddr_complete(rsp);
    4e58:	9801      	ldr	r0, [sp, #4]
    4e5a:	f7ff fcd5 	bl	4808 <read_bdaddr_complete>
	net_buf_unref(rsp);
    4e5e:	ac02      	add	r4, sp, #8
    4e60:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4e64:	f015 ff5a 	bl	1ad1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    4e68:	4622      	mov	r2, r4
    4e6a:	2100      	movs	r1, #0
    4e6c:	f241 0002 	movw	r0, #4098	; 0x1002
    4e70:	f7ff ff72 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    4e74:	4604      	mov	r4, r0
    4e76:	2800      	cmp	r0, #0
    4e78:	d1b8      	bne.n	4dec <common_init+0x14>
	read_supported_commands_complete(rsp);
    4e7a:	9801      	ldr	r0, [sp, #4]
    4e7c:	f7ff fcd2 	bl	4824 <read_supported_commands_complete>
	net_buf_unref(rsp);
    4e80:	9801      	ldr	r0, [sp, #4]
    4e82:	f015 ff4b 	bl	1ad1c <net_buf_unref>
	return 0;
    4e86:	e7b1      	b.n	4dec <common_init+0x14>

00004e88 <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    4e88:	b538      	push	{r3, r4, r5, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    4e8a:	4b3a      	ldr	r3, [pc, #232]	; (4f74 <common_init+0xec>)
    4e8c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    4e90:	2a00      	cmp	r2, #0
    4e92:	d15e      	bne.n	4f52 <common_init+0xca>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    4e94:	2200      	movs	r2, #0
    4e96:	4b37      	ldr	r3, [pc, #220]	; (4f74 <common_init+0xec>)
    4e98:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
    4e9c:	4c35      	ldr	r4, [pc, #212]	; (4f74 <common_init+0xec>)
	mem_init(_radio.pkt_rx_data_pool,
    4e9e:	f504 7396 	add.w	r3, r4, #300	; 0x12c
    4ea2:	f894 2136 	ldrb.w	r2, [r4, #310]	; 0x136
    4ea6:	f8b4 1134 	ldrh.w	r1, [r4, #308]	; 0x134
    4eaa:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    4eae:	f00a fa47 	bl	f340 <mem_init>
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    4eb2:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    4eb6:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    4eba:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    4ebe:	462b      	mov	r3, r5
    4ec0:	440a      	add	r2, r1
    4ec2:	2108      	movs	r1, #8
    4ec4:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    4ec8:	f00a fa3a 	bl	f340 <mem_init>
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    4ecc:	f504 73ac 	add.w	r3, r4, #344	; 0x158
    4ed0:	2202      	movs	r2, #2
    4ed2:	2124      	movs	r1, #36	; 0x24
    4ed4:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    4ed8:	f00a fa32 	bl	f340 <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    4edc:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    4ee0:	3a01      	subs	r2, #1
    4ee2:	f504 73b0 	add.w	r3, r4, #352	; 0x160
    4ee6:	b292      	uxth	r2, r2
    4ee8:	f8b4 1164 	ldrh.w	r1, [r4, #356]	; 0x164
    4eec:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    4ef0:	f00a fa26 	bl	f340 <mem_init>

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    4ef4:	4628      	mov	r0, r5
    4ef6:	f00a fa48 	bl	f38a <mem_acquire>
	LL_ASSERT(link);
    4efa:	b3a0      	cbz	r0, 4f66 <common_init+0xde>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    4efc:	4c1d      	ldr	r4, [pc, #116]	; (4f74 <common_init+0xec>)
    4efe:	f504 72a6 	add.w	r2, r4, #332	; 0x14c
    4f02:	f504 71a4 	add.w	r1, r4, #328	; 0x148
    4f06:	f00a faa5 	bl	f454 <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    4f0a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    4f0e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    4f12:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    4f16:	20ff      	movs	r0, #255	; 0xff
    4f18:	f884 0116 	strb.w	r0, [r4, #278]	; 0x116
	_radio.data_chan_map[1] = 0xFF;
    4f1c:	f884 0117 	strb.w	r0, [r4, #279]	; 0x117
	_radio.data_chan_map[2] = 0xFF;
    4f20:	f884 0118 	strb.w	r0, [r4, #280]	; 0x118
	_radio.data_chan_map[3] = 0xFF;
    4f24:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
	_radio.data_chan_map[4] = 0x1F;
    4f28:	231f      	movs	r3, #31
    4f2a:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_count = 37;
    4f2e:	2325      	movs	r3, #37	; 0x25
    4f30:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    4f34:	231b      	movs	r3, #27
    4f36:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    4f3a:	f44f 73a4 	mov.w	r3, #328	; 0x148
    4f3e:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
	/* Initialize the PHY defaults */
	_radio.default_phy_tx = BIT(0);
	_radio.default_phy_rx = BIT(0);

#if defined(CONFIG_BT_CTLR_PHY_2M)
	_radio.default_phy_tx |= BIT(1);
    4f42:	2303      	movs	r3, #3
    4f44:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_phy_rx |= BIT(1);
    4f48:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#endif /* CONFIG_BT_CTLR_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    4f4c:	f00c ff58 	bl	11e00 <packet_rx_allocate>
    4f50:	bd38      	pop	{r3, r4, r5, pc}
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    4f52:	4618      	mov	r0, r3
    4f54:	f503 7384 	add.w	r3, r3, #264	; 0x108
    4f58:	f44f 71aa 	mov.w	r1, #340	; 0x154
    4f5c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    4f60:	f00a f9ee 	bl	f340 <mem_init>
    4f64:	e79a      	b.n	4e9c <common_init+0x14>
	LL_ASSERT(link);
    4f66:	4040      	eors	r0, r0
    4f68:	f380 8811 	msr	BASEPRI, r0
    4f6c:	f04f 0004 	mov.w	r0, #4
    4f70:	df02      	svc	2
    4f72:	bf00      	nop
    4f74:	20000ff4 	.word	0x20000ff4

00004f78 <le_set_event_mask>:
{
    4f78:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    4f7a:	2108      	movs	r1, #8
    4f7c:	f242 0001 	movw	r0, #8193	; 0x2001
    4f80:	f7ff febe 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    4f84:	2800      	cmp	r0, #0
    4f86:	d042      	beq.n	500e <le_set_event_mask+0x96>
    4f88:	4604      	mov	r4, r0
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    4f8a:	2108      	movs	r1, #8
    4f8c:	4408      	add	r0, r1
    4f8e:	f015 ff11 	bl	1adb4 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    4f92:	4b20      	ldr	r3, [pc, #128]	; (5014 <le_set_event_mask+0x9c>)
    4f94:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
    4f98:	f011 0f02 	tst.w	r1, #2
    4f9c:	d131      	bne.n	5002 <le_set_event_mask+0x8a>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    4f9e:	220f      	movs	r2, #15
    4fa0:	2300      	movs	r3, #0
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    4fa2:	f011 0f20 	tst.w	r1, #32
    4fa6:	d001      	beq.n	4fac <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    4fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    4fac:	4d19      	ldr	r5, [pc, #100]	; (5014 <le_set_event_mask+0x9c>)
    4fae:	f895 5079 	ldrb.w	r5, [r5, #121]	; 0x79
    4fb2:	f015 0f09 	tst.w	r5, #9
    4fb6:	d001      	beq.n	4fbc <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    4fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    4fbc:	f011 0f01 	tst.w	r1, #1
    4fc0:	d001      	beq.n	4fc6 <le_set_event_mask+0x4e>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    4fc2:	f042 0210 	orr.w	r2, r2, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    4fc6:	4913      	ldr	r1, [pc, #76]	; (5014 <le_set_event_mask+0x9c>)
    4fc8:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    4fcc:	f001 0106 	and.w	r1, r1, #6
    4fd0:	2906      	cmp	r1, #6
    4fd2:	d019      	beq.n	5008 <le_set_event_mask+0x90>
	dst[0] = val;
    4fd4:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    4fd6:	f3c2 2107 	ubfx	r1, r2, #8, #8
    4fda:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    4fdc:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    4fde:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    4fe0:	0a12      	lsrs	r2, r2, #8
    4fe2:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    4fe4:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    4fe6:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4fea:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    4fec:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    4fee:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    4ff0:	0a1b      	lsrs	r3, r3, #8
    4ff2:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    4ff4:	2200      	movs	r2, #0
    4ff6:	4621      	mov	r1, r4
    4ff8:	f242 0001 	movw	r0, #8193	; 0x2001
    4ffc:	f7ff feac 	bl	4d58 <bt_hci_cmd_send_sync>
    5000:	bd38      	pop	{r3, r4, r5, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    5002:	222f      	movs	r2, #47	; 0x2f
    5004:	2300      	movs	r3, #0
    5006:	e7cc      	b.n	4fa2 <le_set_event_mask+0x2a>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    5008:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
    500c:	e7e2      	b.n	4fd4 <le_set_event_mask+0x5c>
		return -ENOBUFS;
    500e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5012:	bd38      	pop	{r3, r4, r5, pc}
    5014:	2000b980 	.word	0x2000b980

00005018 <le_set_event_mask>:
{
    5018:	b570      	push	{r4, r5, r6, lr}
    501a:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    501c:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    501e:	79da      	ldrb	r2, [r3, #7]
    5020:	7999      	ldrb	r1, [r3, #6]
    5022:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    5026:	7958      	ldrb	r0, [r3, #5]
    5028:	791a      	ldrb	r2, [r3, #4]
    502a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    502e:	2400      	movs	r4, #0
    5030:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    5034:	78d9      	ldrb	r1, [r3, #3]
    5036:	789a      	ldrb	r2, [r3, #2]
    5038:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    503c:	7859      	ldrb	r1, [r3, #1]
    503e:	781b      	ldrb	r3, [r3, #0]
    5040:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    5044:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    5048:	ea44 0003 	orr.w	r0, r4, r3
    504c:	4629      	mov	r1, r5
	le_event_mask = sys_get_le64(cmd->events);
    504e:	4b04      	ldr	r3, [pc, #16]	; (5060 <le_set_event_mask+0x48>)
    5050:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    5054:	2101      	movs	r1, #1
    5056:	4630      	mov	r0, r6
    5058:	f008 f9b8 	bl	d3cc <cmd_complete>
	ccst->status = 0x00;
    505c:	7004      	strb	r4, [r0, #0]
    505e:	bd70      	pop	{r4, r5, r6, pc}
    5060:	2000bc78 	.word	0x2000bc78

00005064 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
    5064:	4b4c      	ldr	r3, [pc, #304]	; (5198 <le_init+0x134>)
    5066:	7e9b      	ldrb	r3, [r3, #26]
    5068:	f013 0f40 	tst.w	r3, #64	; 0x40
    506c:	f000 808c 	beq.w	5188 <le_init+0x124>
{
    5070:	b570      	push	{r4, r5, r6, lr}
    5072:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    5074:	aa01      	add	r2, sp, #4
    5076:	2100      	movs	r1, #0
    5078:	f242 0003 	movw	r0, #8195	; 0x2003
    507c:	f7ff fe6c 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    5080:	4603      	mov	r3, r0
    5082:	b110      	cbz	r0, 508a <le_init+0x26>
}
    5084:	4618      	mov	r0, r3
    5086:	b002      	add	sp, #8
    5088:	bd70      	pop	{r4, r5, r6, pc}
	read_le_features_complete(rsp);
    508a:	9801      	ldr	r0, [sp, #4]
    508c:	f7ff fbd4 	bl	4838 <read_le_features_complete>
	net_buf_unref(rsp);
    5090:	ac02      	add	r4, sp, #8
    5092:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    5096:	f015 fe41 	bl	1ad1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    509a:	4622      	mov	r2, r4
    509c:	2100      	movs	r1, #0
    509e:	f242 0002 	movw	r0, #8194	; 0x2002
    50a2:	f7ff fe59 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    50a6:	4603      	mov	r3, r0
    50a8:	2800      	cmp	r0, #0
    50aa:	d1eb      	bne.n	5084 <le_init+0x20>
	le_read_buffer_size_complete(rsp);
    50ac:	9801      	ldr	r0, [sp, #4]
    50ae:	f7ff fbcd 	bl	484c <le_read_buffer_size_complete>
	net_buf_unref(rsp);
    50b2:	9801      	ldr	r0, [sp, #4]
    50b4:	f015 fe32 	bl	1ad1c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    50b8:	4b37      	ldr	r3, [pc, #220]	; (5198 <le_init+0x134>)
    50ba:	7e9b      	ldrb	r3, [r3, #26]
    50bc:	f013 0f20 	tst.w	r3, #32
    50c0:	d037      	beq.n	5132 <le_init+0xce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    50c2:	4b35      	ldr	r3, [pc, #212]	; (5198 <le_init+0x134>)
    50c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    50c8:	f013 0f08 	tst.w	r3, #8
    50cc:	d149      	bne.n	5162 <le_init+0xfe>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    50ce:	4b32      	ldr	r3, [pc, #200]	; (5198 <le_init+0x134>)
    50d0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    50d4:	f013 0f20 	tst.w	r3, #32
    50d8:	d027      	beq.n	512a <le_init+0xc6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    50da:	466a      	mov	r2, sp
    50dc:	2100      	movs	r1, #0
    50de:	f242 002f 	movw	r0, #8239	; 0x202f
    50e2:	f7ff fe39 	bl	4d58 <bt_hci_cmd_send_sync>
		if (err) {
    50e6:	4603      	mov	r3, r0
    50e8:	2800      	cmp	r0, #0
    50ea:	d1cb      	bne.n	5084 <le_init+0x20>
		rp = (void *)rsp->data;
    50ec:	9800      	ldr	r0, [sp, #0]
    50ee:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    50f0:	f8b3 6001 	ldrh.w	r6, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    50f4:	f8b3 5003 	ldrh.w	r5, [r3, #3]
		net_buf_unref(rsp);
    50f8:	f015 fe10 	bl	1ad1c <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    50fc:	2104      	movs	r1, #4
    50fe:	f242 0024 	movw	r0, #8228	; 0x2024
    5102:	f7ff fdfd 	bl	4d00 <bt_hci_cmd_create>
		if (!buf) {
    5106:	4604      	mov	r4, r0
    5108:	2800      	cmp	r0, #0
    510a:	d03a      	beq.n	5182 <le_init+0x11e>
		cp = net_buf_add(buf, sizeof(*cp));
    510c:	2104      	movs	r1, #4
    510e:	3008      	adds	r0, #8
    5110:	f015 fe50 	bl	1adb4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    5114:	8006      	strh	r6, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    5116:	8045      	strh	r5, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    5118:	2200      	movs	r2, #0
    511a:	4621      	mov	r1, r4
    511c:	f242 0024 	movw	r0, #8228	; 0x2024
    5120:	f7ff fe1a 	bl	4d58 <bt_hci_cmd_send_sync>
		if (err) {
    5124:	4603      	mov	r3, r0
    5126:	2800      	cmp	r0, #0
    5128:	d1ac      	bne.n	5084 <le_init+0x20>
	return  le_set_event_mask();
    512a:	f7ff ff25 	bl	4f78 <le_set_event_mask>
    512e:	4603      	mov	r3, r0
    5130:	e7a8      	b.n	5084 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    5132:	2102      	movs	r1, #2
    5134:	f640 406d 	movw	r0, #3181	; 0xc6d
    5138:	f7ff fde2 	bl	4d00 <bt_hci_cmd_create>
		if (!buf) {
    513c:	4604      	mov	r4, r0
    513e:	b338      	cbz	r0, 5190 <le_init+0x12c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    5140:	2102      	movs	r1, #2
    5142:	3008      	adds	r0, #8
    5144:	f015 fe36 	bl	1adb4 <net_buf_simple_add>
		cp_le->le = 0x01;
    5148:	2301      	movs	r3, #1
    514a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    514c:	2200      	movs	r2, #0
    514e:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    5150:	4621      	mov	r1, r4
    5152:	f640 406d 	movw	r0, #3181	; 0xc6d
    5156:	f7ff fdff 	bl	4d58 <bt_hci_cmd_send_sync>
		if (err) {
    515a:	4603      	mov	r3, r0
    515c:	2800      	cmp	r0, #0
    515e:	d0b0      	beq.n	50c2 <le_init+0x5e>
    5160:	e790      	b.n	5084 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    5162:	aa01      	add	r2, sp, #4
    5164:	2100      	movs	r1, #0
    5166:	f242 001c 	movw	r0, #8220	; 0x201c
    516a:	f7ff fdf5 	bl	4d58 <bt_hci_cmd_send_sync>
		if (err) {
    516e:	4603      	mov	r3, r0
    5170:	2800      	cmp	r0, #0
    5172:	d187      	bne.n	5084 <le_init+0x20>
		le_read_supp_states_complete(rsp);
    5174:	9801      	ldr	r0, [sp, #4]
    5176:	f7ff fae5 	bl	4744 <le_read_supp_states_complete>
		net_buf_unref(rsp);
    517a:	9801      	ldr	r0, [sp, #4]
    517c:	f015 fdce 	bl	1ad1c <net_buf_unref>
    5180:	e7a5      	b.n	50ce <le_init+0x6a>
			return -ENOBUFS;
    5182:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5186:	e77d      	b.n	5084 <le_init+0x20>
		return -ENODEV;
    5188:	f06f 0312 	mvn.w	r3, #18
}
    518c:	4618      	mov	r0, r3
    518e:	4770      	bx	lr
			return -ENOBUFS;
    5190:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5194:	e776      	b.n	5084 <le_init+0x20>
    5196:	bf00      	nop
    5198:	2000b980 	.word	0x2000b980

0000519c <br_init>:
{
    519c:	b510      	push	{r4, lr}
    519e:	b082      	sub	sp, #8
	if (bt_dev.le.mtu) {
    51a0:	4b0b      	ldr	r3, [pc, #44]	; (51d0 <br_init+0x34>)
    51a2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    51a6:	b11b      	cbz	r3, 51b0 <br_init+0x14>
		return 0;
    51a8:	2400      	movs	r4, #0
}
    51aa:	4620      	mov	r0, r4
    51ac:	b002      	add	sp, #8
    51ae:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    51b0:	aa01      	add	r2, sp, #4
    51b2:	2100      	movs	r1, #0
    51b4:	f241 0005 	movw	r0, #4101	; 0x1005
    51b8:	f7ff fdce 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    51bc:	4604      	mov	r4, r0
    51be:	2800      	cmp	r0, #0
    51c0:	d1f3      	bne.n	51aa <br_init+0xe>
	read_buffer_size_complete(rsp);
    51c2:	9801      	ldr	r0, [sp, #4]
    51c4:	f7ff fb58 	bl	4878 <read_buffer_size_complete>
	net_buf_unref(rsp);
    51c8:	9801      	ldr	r0, [sp, #4]
    51ca:	f015 fda7 	bl	1ad1c <net_buf_unref>
	return 0;
    51ce:	e7ec      	b.n	51aa <br_init+0xe>
    51d0:	2000b980 	.word	0x2000b980

000051d4 <set_event_mask>:
{
    51d4:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    51d6:	2108      	movs	r1, #8
    51d8:	f640 4001 	movw	r0, #3073	; 0xc01
    51dc:	f7ff fd90 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    51e0:	b348      	cbz	r0, 5236 <set_event_mask+0x62>
    51e2:	4604      	mov	r4, r0
	ev = net_buf_add(buf, sizeof(*ev));
    51e4:	2108      	movs	r1, #8
    51e6:	4408      	add	r0, r1
    51e8:	f015 fde4 	bl	1adb4 <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
    51ec:	4b13      	ldr	r3, [pc, #76]	; (523c <set_event_mask+0x68>)
    51ee:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    51f2:	f013 0f01 	tst.w	r3, #1
    51f6:	d11b      	bne.n	5230 <set_event_mask+0x5c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    51f8:	4a11      	ldr	r2, [pc, #68]	; (5240 <set_event_mask+0x6c>)
    51fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
    51fe:	b291      	uxth	r1, r2
	dst[0] = val;
    5200:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    5202:	0a09      	lsrs	r1, r1, #8
    5204:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    5206:	0c12      	lsrs	r2, r2, #16
    5208:	b291      	uxth	r1, r2
	dst[0] = val;
    520a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    520c:	0a0a      	lsrs	r2, r1, #8
    520e:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
    5210:	b29a      	uxth	r2, r3
	dst[0] = val;
    5212:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    5214:	0a12      	lsrs	r2, r2, #8
    5216:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    5218:	0c1b      	lsrs	r3, r3, #16
    521a:	b29a      	uxth	r2, r3
	dst[0] = val;
    521c:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    521e:	0a13      	lsrs	r3, r2, #8
    5220:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    5222:	2200      	movs	r2, #0
    5224:	4621      	mov	r1, r4
    5226:	f640 4001 	movw	r0, #3073	; 0xc01
    522a:	f7ff fd95 	bl	4d58 <bt_hci_cmd_send_sync>
    522e:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    5230:	4a04      	ldr	r2, [pc, #16]	; (5244 <set_event_mask+0x70>)
    5232:	4b05      	ldr	r3, [pc, #20]	; (5248 <set_event_mask+0x74>)
    5234:	e7e3      	b.n	51fe <set_event_mask+0x2a>
		return -ENOBUFS;
    5236:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    523a:	bd10      	pop	{r4, pc}
    523c:	2000b980 	.word	0x2000b980
    5240:	02008810 	.word	0x02008810
    5244:	02008890 	.word	0x02008890
    5248:	20008000 	.word	0x20008000

0000524c <set_event_mask>:
{
    524c:	b570      	push	{r4, r5, r6, lr}
    524e:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    5250:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    5252:	79da      	ldrb	r2, [r3, #7]
    5254:	7999      	ldrb	r1, [r3, #6]
    5256:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    525a:	7958      	ldrb	r0, [r3, #5]
    525c:	791a      	ldrb	r2, [r3, #4]
    525e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    5262:	2400      	movs	r4, #0
    5264:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    5268:	78d9      	ldrb	r1, [r3, #3]
    526a:	789a      	ldrb	r2, [r3, #2]
    526c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5270:	7859      	ldrb	r1, [r3, #1]
    5272:	781b      	ldrb	r3, [r3, #0]
    5274:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    5278:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    527c:	ea44 0003 	orr.w	r0, r4, r3
    5280:	4629      	mov	r1, r5
	event_mask = sys_get_le64(cmd->events);
    5282:	4b04      	ldr	r3, [pc, #16]	; (5294 <set_event_mask+0x48>)
    5284:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    5288:	2101      	movs	r1, #1
    528a:	4630      	mov	r0, r6
    528c:	f008 f89e 	bl	d3cc <cmd_complete>
	ccst->status = 0x00;
    5290:	7004      	strb	r4, [r0, #0]
    5292:	bd70      	pop	{r4, r5, r6, pc}
    5294:	2000bc70 	.word	0x2000bc70

00005298 <hci_vs_init>:
{
    5298:	b510      	push	{r4, lr}
    529a:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    529c:	aa01      	add	r2, sp, #4
    529e:	2100      	movs	r1, #0
    52a0:	f64f 4001 	movw	r0, #64513	; 0xfc01
    52a4:	f7ff fd58 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    52a8:	b108      	cbz	r0, 52ae <hci_vs_init+0x16>
}
    52aa:	b002      	add	sp, #8
    52ac:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
    52ae:	ac02      	add	r4, sp, #8
    52b0:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    52b4:	f015 fd32 	bl	1ad1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    52b8:	4622      	mov	r2, r4
    52ba:	2100      	movs	r1, #0
    52bc:	f64f 4002 	movw	r0, #64514	; 0xfc02
    52c0:	f7ff fd4a 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    52c4:	2800      	cmp	r0, #0
    52c6:	d1f0      	bne.n	52aa <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
    52c8:	9b01      	ldr	r3, [sp, #4]
    52ca:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    52cc:	2202      	movs	r2, #2
    52ce:	3101      	adds	r1, #1
    52d0:	480d      	ldr	r0, [pc, #52]	; (5308 <hci_vs_init+0x70>)
    52d2:	f7fa fff5 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    52d6:	ac02      	add	r4, sp, #8
    52d8:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    52dc:	f015 fd1e 	bl	1ad1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    52e0:	4622      	mov	r2, r4
    52e2:	2100      	movs	r1, #0
    52e4:	f64f 4003 	movw	r0, #64515	; 0xfc03
    52e8:	f7ff fd36 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    52ec:	2800      	cmp	r0, #0
    52ee:	d1dc      	bne.n	52aa <hci_vs_init+0x12>
	rp.feat = (void *)rsp->data;
    52f0:	9b01      	ldr	r3, [sp, #4]
    52f2:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    52f4:	2201      	movs	r2, #1
    52f6:	4411      	add	r1, r2
    52f8:	4804      	ldr	r0, [pc, #16]	; (530c <hci_vs_init+0x74>)
    52fa:	f7fa ffe1 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    52fe:	9801      	ldr	r0, [sp, #4]
    5300:	f015 fd0c 	bl	1ad1c <net_buf_unref>
    5304:	e7d1      	b.n	52aa <hci_vs_init+0x12>
    5306:	bf00      	nop
    5308:	2000b9df 	.word	0x2000b9df
    530c:	2000b9de 	.word	0x2000b9de

00005310 <set_random_address>:
{
    5310:	b570      	push	{r4, r5, r6, lr}
    5312:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    5314:	2206      	movs	r2, #6
    5316:	4914      	ldr	r1, [pc, #80]	; (5368 <set_random_address+0x58>)
    5318:	f025 fa6a 	bl	2a7f0 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    531c:	4604      	mov	r4, r0
    531e:	b908      	cbnz	r0, 5324 <set_random_address+0x14>
}
    5320:	4620      	mov	r0, r4
    5322:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    5324:	2106      	movs	r1, #6
    5326:	f242 0005 	movw	r0, #8197	; 0x2005
    532a:	f7ff fce9 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    532e:	4604      	mov	r4, r0
    5330:	b1b8      	cbz	r0, 5362 <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    5332:	2206      	movs	r2, #6
    5334:	4629      	mov	r1, r5
    5336:	3008      	adds	r0, #8
    5338:	f015 fd42 	bl	1adc0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    533c:	2200      	movs	r2, #0
    533e:	4621      	mov	r1, r4
    5340:	f242 0005 	movw	r0, #8197	; 0x2005
    5344:	f7ff fd08 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    5348:	4604      	mov	r4, r0
    534a:	2800      	cmp	r0, #0
    534c:	d1e8      	bne.n	5320 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
    534e:	4e07      	ldr	r6, [pc, #28]	; (536c <set_random_address+0x5c>)
    5350:	2206      	movs	r2, #6
    5352:	4629      	mov	r1, r5
    5354:	f106 0008 	add.w	r0, r6, #8
    5358:	f7fa ffb2 	bl	2c0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    535c:	2301      	movs	r3, #1
    535e:	71f3      	strb	r3, [r6, #7]
	return 0;
    5360:	e7de      	b.n	5320 <set_random_address+0x10>
		return -ENOBUFS;
    5362:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5366:	e7db      	b.n	5320 <set_random_address+0x10>
    5368:	2000b988 	.word	0x2000b988
    536c:	2000b980 	.word	0x2000b980

00005370 <le_set_private_addr>:
{
    5370:	b500      	push	{lr}
    5372:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    5374:	2106      	movs	r1, #6
    5376:	4668      	mov	r0, sp
    5378:	f00c f9a6 	bl	116c8 <bt_rand>
	if (err) {
    537c:	4603      	mov	r3, r0
    537e:	b118      	cbz	r0, 5388 <le_set_private_addr+0x18>
}
    5380:	4618      	mov	r0, r3
    5382:	b003      	add	sp, #12
    5384:	f85d fb04 	ldr.w	pc, [sp], #4
	nrpa.val[5] &= 0x3f;
    5388:	f89d 3005 	ldrb.w	r3, [sp, #5]
    538c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5390:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    5394:	4668      	mov	r0, sp
    5396:	f7ff ffbb 	bl	5310 <set_random_address>
    539a:	4603      	mov	r3, r0
    539c:	e7f0      	b.n	5380 <le_set_private_addr+0x10>
	...

000053a0 <bt_hci_stop_scanning>:
{
    53a0:	b530      	push	{r4, r5, lr}
    53a2:	b083      	sub	sp, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    53a4:	f3bf 8f5b 	dmb	ish
    53a8:	4b26      	ldr	r3, [pc, #152]	; (5444 <bt_hci_stop_scanning+0xa4>)
    53aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    53ac:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    53b0:	f013 0f80 	tst.w	r3, #128	; 0x80
    53b4:	d03f      	beq.n	5436 <bt_hci_stop_scanning+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    53b6:	2102      	movs	r1, #2
    53b8:	f242 000c 	movw	r0, #8204	; 0x200c
    53bc:	f7ff fca0 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    53c0:	4604      	mov	r4, r0
    53c2:	2800      	cmp	r0, #0
    53c4:	d03a      	beq.n	543c <bt_hci_stop_scanning+0x9c>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    53c6:	2102      	movs	r1, #2
    53c8:	3008      	adds	r0, #8
    53ca:	f015 fcf3 	bl	1adb4 <net_buf_simple_add>
    53ce:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    53d0:	2202      	movs	r2, #2
    53d2:	2100      	movs	r1, #0
    53d4:	f025 faa0 	bl	2a918 <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    53d8:	2300      	movs	r3, #0
    53da:	706b      	strb	r3, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    53dc:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    53de:	aa01      	add	r2, sp, #4
    53e0:	4621      	mov	r1, r4
    53e2:	f242 000c 	movw	r0, #8204	; 0x200c
    53e6:	f7ff fcb7 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    53ea:	4604      	mov	r4, r0
    53ec:	b930      	cbnz	r0, 53fc <bt_hci_stop_scanning+0x5c>
	err = rsp->data[0];
    53ee:	9b01      	ldr	r3, [sp, #4]
    53f0:	689b      	ldr	r3, [r3, #8]
    53f2:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    53f4:	b12c      	cbz	r4, 5402 <bt_hci_stop_scanning+0x62>
	net_buf_unref(rsp);
    53f6:	9801      	ldr	r0, [sp, #4]
    53f8:	f015 fc90 	bl	1ad1c <net_buf_unref>
}
    53fc:	4620      	mov	r0, r4
    53fe:	b003      	add	sp, #12
    5400:	bd30      	pop	{r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5402:	4b11      	ldr	r3, [pc, #68]	; (5448 <bt_hci_stop_scanning+0xa8>)
    5404:	f3bf 8f5b 	dmb	ish
    5408:	e853 2f00 	ldrex	r2, [r3]
    540c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    5410:	e843 2100 	strex	r1, r2, [r3]
    5414:	2900      	cmp	r1, #0
    5416:	d1f7      	bne.n	5408 <bt_hci_stop_scanning+0x68>
    5418:	f3bf 8f5b 	dmb	ish
    541c:	f3bf 8f5b 	dmb	ish
    5420:	e853 2f00 	ldrex	r2, [r3]
    5424:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    5428:	e843 2100 	strex	r1, r2, [r3]
    542c:	2900      	cmp	r1, #0
    542e:	d1f7      	bne.n	5420 <bt_hci_stop_scanning+0x80>
    5430:	f3bf 8f5b 	dmb	ish
    5434:	e7df      	b.n	53f6 <bt_hci_stop_scanning+0x56>
		return -EALREADY;
    5436:	f06f 0477 	mvn.w	r4, #119	; 0x77
    543a:	e7df      	b.n	53fc <bt_hci_stop_scanning+0x5c>
		return -ENOBUFS;
    543c:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5440:	e7dc      	b.n	53fc <bt_hci_stop_scanning+0x5c>
    5442:	bf00      	nop
    5444:	2000b980 	.word	0x2000b980
    5448:	2000b9f0 	.word	0x2000b9f0

0000544c <set_advertise_enable>:
{
    544c:	b538      	push	{r3, r4, r5, lr}
    544e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    5450:	2101      	movs	r1, #1
    5452:	f242 000a 	movw	r0, #8202	; 0x200a
    5456:	f7ff fc53 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    545a:	b380      	cbz	r0, 54be <set_advertise_enable+0x72>
    545c:	4604      	mov	r4, r0
	if (enable) {
    545e:	b1dd      	cbz	r5, 5498 <set_advertise_enable+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    5460:	2101      	movs	r1, #1
    5462:	3008      	adds	r0, #8
    5464:	f015 fcb7 	bl	1add6 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    5468:	2200      	movs	r2, #0
    546a:	4621      	mov	r1, r4
    546c:	f242 000a 	movw	r0, #8202	; 0x200a
    5470:	f7ff fc72 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    5474:	4603      	mov	r3, r0
    5476:	b968      	cbnz	r0, 5494 <set_advertise_enable+0x48>
	if (enable) {
    5478:	b99d      	cbnz	r5, 54a2 <set_advertise_enable+0x56>
    547a:	4a12      	ldr	r2, [pc, #72]	; (54c4 <set_advertise_enable+0x78>)
    547c:	f3bf 8f5b 	dmb	ish
    5480:	e852 1f00 	ldrex	r1, [r2]
    5484:	f021 0120 	bic.w	r1, r1, #32
    5488:	e842 1000 	strex	r0, r1, [r2]
    548c:	2800      	cmp	r0, #0
    548e:	d1f7      	bne.n	5480 <set_advertise_enable+0x34>
    5490:	f3bf 8f5b 	dmb	ish
}
    5494:	4618      	mov	r0, r3
    5496:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    5498:	2100      	movs	r1, #0
    549a:	3008      	adds	r0, #8
    549c:	f015 fc9b 	bl	1add6 <net_buf_simple_add_u8>
    54a0:	e7e2      	b.n	5468 <set_advertise_enable+0x1c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    54a2:	4a08      	ldr	r2, [pc, #32]	; (54c4 <set_advertise_enable+0x78>)
    54a4:	f3bf 8f5b 	dmb	ish
    54a8:	e852 1f00 	ldrex	r1, [r2]
    54ac:	f041 0120 	orr.w	r1, r1, #32
    54b0:	e842 1000 	strex	r0, r1, [r2]
    54b4:	2800      	cmp	r0, #0
    54b6:	d1f7      	bne.n	54a8 <set_advertise_enable+0x5c>
    54b8:	f3bf 8f5b 	dmb	ish
    54bc:	e7ea      	b.n	5494 <set_advertise_enable+0x48>
		return -ENOBUFS;
    54be:	f06f 0368 	mvn.w	r3, #104	; 0x68
    54c2:	e7e7      	b.n	5494 <set_advertise_enable+0x48>
    54c4:	2000b9f0 	.word	0x2000b9f0

000054c8 <hci_le_create_conn>:
{
    54c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54ca:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    54cc:	2119      	movs	r1, #25
    54ce:	f242 000d 	movw	r0, #8205	; 0x200d
    54d2:	f7ff fc15 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    54d6:	b378      	cbz	r0, 5538 <hci_le_create_conn+0x70>
    54d8:	4607      	mov	r7, r0
	cp = net_buf_add(buf, sizeof(*cp));
    54da:	2119      	movs	r1, #25
    54dc:	3008      	adds	r0, #8
    54de:	f015 fc69 	bl	1adb4 <net_buf_simple_add>
    54e2:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    54e4:	2219      	movs	r2, #25
    54e6:	2100      	movs	r1, #0
    54e8:	f025 fa16 	bl	2a918 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    54ec:	2600      	movs	r6, #0
    54ee:	2360      	movs	r3, #96	; 0x60
    54f0:	7023      	strb	r3, [r4, #0]
    54f2:	7066      	strb	r6, [r4, #1]
	cp->scan_window = cp->scan_interval;
    54f4:	70a3      	strb	r3, [r4, #2]
    54f6:	70e6      	strb	r6, [r4, #3]
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    54f8:	2207      	movs	r2, #7
    54fa:	f105 0156 	add.w	r1, r5, #86	; 0x56
    54fe:	1d60      	adds	r0, r4, #5
    5500:	f7fa fede 	bl	2c0 <memcpy>
	cp->own_addr_type = conn->le.init_addr.type;
    5504:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
    5508:	7323      	strb	r3, [r4, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    550a:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
    550e:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    5512:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    5516:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    551a:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
    551e:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    5522:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    5526:	f8a4 3013 	strh.w	r3, [r4, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    552a:	4632      	mov	r2, r6
    552c:	4639      	mov	r1, r7
    552e:	f242 000d 	movw	r0, #8205	; 0x200d
    5532:	f7ff fc11 	bl	4d58 <bt_hci_cmd_send_sync>
    5536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    5538:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    553c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000553e <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    553e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5542:	4682      	mov	sl, r0
    5544:	460f      	mov	r7, r1
    5546:	4690      	mov	r8, r2
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    5548:	2120      	movs	r1, #32
    554a:	f7ff fbd9 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    554e:	2800      	cmp	r0, #0
    5550:	d03c      	beq.n	55cc <set_ad+0x8e>
    5552:	4681      	mov	r9, r0
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    5554:	2120      	movs	r1, #32
    5556:	3008      	adds	r0, #8
    5558:	f015 fc2c 	bl	1adb4 <net_buf_simple_add>
    555c:	4604      	mov	r4, r0

	memset(set_data, 0, sizeof(*set_data));
    555e:	2220      	movs	r2, #32
    5560:	2100      	movs	r1, #0
    5562:	f025 f9d9 	bl	2a918 <memset>

	for (i = 0; i < ad_len; i++) {
    5566:	2600      	movs	r6, #0
    5568:	4546      	cmp	r6, r8
    556a:	d228      	bcs.n	55be <set_ad+0x80>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    556c:	7822      	ldrb	r2, [r4, #0]
    556e:	eb07 05c6 	add.w	r5, r7, r6, lsl #3
    5572:	786b      	ldrb	r3, [r5, #1]
    5574:	4413      	add	r3, r2
    5576:	3302      	adds	r3, #2
    5578:	2b1f      	cmp	r3, #31
    557a:	dc19      	bgt.n	55b0 <set_ad+0x72>
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    557c:	1c53      	adds	r3, r2, #1
    557e:	b2db      	uxtb	r3, r3
    5580:	7023      	strb	r3, [r4, #0]
    5582:	7869      	ldrb	r1, [r5, #1]
    5584:	3101      	adds	r1, #1
    5586:	4422      	add	r2, r4
    5588:	7051      	strb	r1, [r2, #1]
		set_data->data[set_data->len++] = ad[i].type;
    558a:	1c58      	adds	r0, r3, #1
    558c:	b2c0      	uxtb	r0, r0
    558e:	7020      	strb	r0, [r4, #0]
    5590:	f817 2036 	ldrb.w	r2, [r7, r6, lsl #3]
    5594:	4423      	add	r3, r4
    5596:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    5598:	4420      	add	r0, r4
    559a:	786a      	ldrb	r2, [r5, #1]
    559c:	6869      	ldr	r1, [r5, #4]
    559e:	3001      	adds	r0, #1
    55a0:	f7fa fe8e 	bl	2c0 <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    55a4:	786b      	ldrb	r3, [r5, #1]
    55a6:	7822      	ldrb	r2, [r4, #0]
    55a8:	4413      	add	r3, r2
    55aa:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < ad_len; i++) {
    55ac:	3601      	adds	r6, #1
    55ae:	e7db      	b.n	5568 <set_ad+0x2a>
			net_buf_unref(buf);
    55b0:	4648      	mov	r0, r9
    55b2:	f015 fbb3 	bl	1ad1c <net_buf_unref>
			return -EINVAL;
    55b6:	f06f 0015 	mvn.w	r0, #21
    55ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    55be:	2200      	movs	r2, #0
    55c0:	4649      	mov	r1, r9
    55c2:	4650      	mov	r0, sl
    55c4:	f7ff fbc8 	bl	4d58 <bt_hci_cmd_send_sync>
    55c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
    55cc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    55d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000055d4 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    55d4:	8802      	ldrh	r2, [r0, #0]
    55d6:	8843      	ldrh	r3, [r0, #2]
    55d8:	429a      	cmp	r2, r3
    55da:	d81a      	bhi.n	5612 <bt_le_conn_params_valid+0x3e>
    55dc:	2a05      	cmp	r2, #5
    55de:	d91a      	bls.n	5616 <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
    55e0:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    55e4:	d819      	bhi.n	561a <bt_le_conn_params_valid+0x46>
	if (param->latency > 499) {
    55e6:	8881      	ldrh	r1, [r0, #4]
    55e8:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    55ec:	d217      	bcs.n	561e <bt_le_conn_params_valid+0x4a>
{
    55ee:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
    55f0:	88c0      	ldrh	r0, [r0, #6]
    55f2:	f1a0 020a 	sub.w	r2, r0, #10
    55f6:	b292      	uxth	r2, r2
    55f8:	f640 4476 	movw	r4, #3190	; 0xc76
    55fc:	42a2      	cmp	r2, r4
    55fe:	d810      	bhi.n	5622 <bt_le_conn_params_valid+0x4e>
	     ((1 + param->latency) * param->interval_max))) {
    5600:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    5604:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
    5608:	da01      	bge.n	560e <bt_le_conn_params_valid+0x3a>
	return true;
    560a:	2001      	movs	r0, #1
    560c:	e00a      	b.n	5624 <bt_le_conn_params_valid+0x50>
		return false;
    560e:	2000      	movs	r0, #0
    5610:	e008      	b.n	5624 <bt_le_conn_params_valid+0x50>
		return false;
    5612:	2000      	movs	r0, #0
    5614:	4770      	bx	lr
    5616:	2000      	movs	r0, #0
    5618:	4770      	bx	lr
    561a:	2000      	movs	r0, #0
    561c:	4770      	bx	lr
		return false;
    561e:	2000      	movs	r0, #0
    5620:	4770      	bx	lr
		return false;
    5622:	2000      	movs	r0, #0
}
    5624:	bc10      	pop	{r4}
    5626:	4770      	bx	lr

00005628 <bt_addr_le_create_static>:
{
    5628:	b510      	push	{r4, lr}
    562a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    562c:	2301      	movs	r3, #1
    562e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    5632:	2106      	movs	r1, #6
    5634:	f00c f848 	bl	116c8 <bt_rand>
	if (err) {
    5638:	4602      	mov	r2, r0
    563a:	b918      	cbnz	r0, 5644 <bt_addr_le_create_static+0x1c>
	BT_ADDR_SET_STATIC(&addr->a);
    563c:	79a3      	ldrb	r3, [r4, #6]
    563e:	f063 033f 	orn	r3, r3, #63	; 0x3f
    5642:	71a3      	strb	r3, [r4, #6]
}
    5644:	4610      	mov	r0, r2
    5646:	bd10      	pop	{r4, pc}

00005648 <set_static_addr>:
{
    5648:	b510      	push	{r4, lr}
    564a:	b082      	sub	sp, #8
	if (bt_storage) {
    564c:	4b2e      	ldr	r3, [pc, #184]	; (5708 <set_static_addr+0xc0>)
    564e:	681b      	ldr	r3, [r3, #0]
    5650:	b13b      	cbz	r3, 5662 <set_static_addr+0x1a>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    5652:	681c      	ldr	r4, [r3, #0]
    5654:	2307      	movs	r3, #7
    5656:	4a2d      	ldr	r2, [pc, #180]	; (570c <set_static_addr+0xc4>)
    5658:	2100      	movs	r1, #0
    565a:	4608      	mov	r0, r1
    565c:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    565e:	2807      	cmp	r0, #7
    5660:	d02c      	beq.n	56bc <set_static_addr+0x74>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    5662:	4b2a      	ldr	r3, [pc, #168]	; (570c <set_static_addr+0xc4>)
    5664:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    5668:	f013 0f01 	tst.w	r3, #1
    566c:	d018      	beq.n	56a0 <set_static_addr+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    566e:	aa01      	add	r2, sp, #4
    5670:	2100      	movs	r1, #0
    5672:	f64f 4009 	movw	r0, #64521	; 0xfc09
    5676:	f7ff fb6f 	bl	4d58 <bt_hci_cmd_send_sync>
		if (err) {
    567a:	b988      	cbnz	r0, 56a0 <set_static_addr+0x58>
		rp = (void *)rsp->data;
    567c:	9801      	ldr	r0, [sp, #4]
    567e:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    5680:	784b      	ldrb	r3, [r1, #1]
    5682:	b15b      	cbz	r3, 569c <set_static_addr+0x54>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    5684:	4821      	ldr	r0, [pc, #132]	; (570c <set_static_addr+0xc4>)
    5686:	2301      	movs	r3, #1
    5688:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(dst, src, sizeof(*dst));
    568c:	2206      	movs	r2, #6
    568e:	3102      	adds	r1, #2
    5690:	f7fa fe16 	bl	2c0 <memcpy>
			net_buf_unref(rsp);
    5694:	9801      	ldr	r0, [sp, #4]
    5696:	f015 fb41 	bl	1ad1c <net_buf_unref>
    569a:	e00f      	b.n	56bc <set_static_addr+0x74>
		net_buf_unref(rsp);
    569c:	f015 fb3e 	bl	1ad1c <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    56a0:	481a      	ldr	r0, [pc, #104]	; (570c <set_static_addr+0xc4>)
    56a2:	f7ff ffc1 	bl	5628 <bt_addr_le_create_static>
	if (err) {
    56a6:	4603      	mov	r3, r0
    56a8:	b9b8      	cbnz	r0, 56da <set_static_addr+0x92>
	if (bt_storage) {
    56aa:	4b17      	ldr	r3, [pc, #92]	; (5708 <set_static_addr+0xc0>)
    56ac:	681b      	ldr	r3, [r3, #0]
    56ae:	b12b      	cbz	r3, 56bc <set_static_addr+0x74>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    56b0:	685c      	ldr	r4, [r3, #4]
    56b2:	2307      	movs	r3, #7
    56b4:	4a15      	ldr	r2, [pc, #84]	; (570c <set_static_addr+0xc4>)
    56b6:	2100      	movs	r1, #0
    56b8:	4608      	mov	r0, r1
    56ba:	47a0      	blx	r4
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    56bc:	4b13      	ldr	r3, [pc, #76]	; (570c <set_static_addr+0xc4>)
    56be:	781b      	ldrb	r3, [r3, #0]
    56c0:	2b01      	cmp	r3, #1
    56c2:	d11b      	bne.n	56fc <set_static_addr+0xb4>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
    56c4:	4b11      	ldr	r3, [pc, #68]	; (570c <set_static_addr+0xc4>)
    56c6:	799b      	ldrb	r3, [r3, #6]
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    56c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    56cc:	2bc0      	cmp	r3, #192	; 0xc0
    56ce:	d118      	bne.n	5702 <set_static_addr+0xba>
	err = set_random_address(&bt_dev.id_addr.a);
    56d0:	480f      	ldr	r0, [pc, #60]	; (5710 <set_static_addr+0xc8>)
    56d2:	f7ff fe1d 	bl	5310 <set_random_address>
	if (err) {
    56d6:	4603      	mov	r3, r0
    56d8:	b110      	cbz	r0, 56e0 <set_static_addr+0x98>
}
    56da:	4618      	mov	r0, r3
    56dc:	b002      	add	sp, #8
    56de:	bd10      	pop	{r4, pc}
    56e0:	4a0c      	ldr	r2, [pc, #48]	; (5714 <set_static_addr+0xcc>)
    56e2:	f3bf 8f5b 	dmb	ish
    56e6:	e852 1f00 	ldrex	r1, [r2]
    56ea:	f041 0104 	orr.w	r1, r1, #4
    56ee:	e842 1000 	strex	r0, r1, [r2]
    56f2:	2800      	cmp	r0, #0
    56f4:	d1f7      	bne.n	56e6 <set_static_addr+0x9e>
    56f6:	f3bf 8f5b 	dmb	ish
	return 0;
    56fa:	e7ee      	b.n	56da <set_static_addr+0x92>
		return -EINVAL;
    56fc:	f06f 0315 	mvn.w	r3, #21
    5700:	e7eb      	b.n	56da <set_static_addr+0x92>
    5702:	f06f 0315 	mvn.w	r3, #21
    5706:	e7e8      	b.n	56da <set_static_addr+0x92>
    5708:	20002ac4 	.word	0x20002ac4
    570c:	2000b980 	.word	0x2000b980
    5710:	2000b981 	.word	0x2000b981
    5714:	2000b9f0 	.word	0x2000b9f0

00005718 <hci_init>:
{
    5718:	b510      	push	{r4, lr}
    571a:	b084      	sub	sp, #16
	err = common_init();
    571c:	f7ff fb5c 	bl	4dd8 <common_init>
	if (err) {
    5720:	4604      	mov	r4, r0
    5722:	b110      	cbz	r0, 572a <hci_init+0x12>
}
    5724:	4620      	mov	r0, r4
    5726:	b004      	add	sp, #16
    5728:	bd10      	pop	{r4, pc}
	err = le_init();
    572a:	f7ff fc9b 	bl	5064 <le_init>
	if (err) {
    572e:	4604      	mov	r4, r0
    5730:	2800      	cmp	r0, #0
    5732:	d1f7      	bne.n	5724 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    5734:	4b17      	ldr	r3, [pc, #92]	; (5794 <hci_init+0x7c>)
    5736:	7e9b      	ldrb	r3, [r3, #26]
    5738:	f013 0f20 	tst.w	r3, #32
    573c:	d104      	bne.n	5748 <hci_init+0x30>
		err = br_init();
    573e:	f7ff fd2d 	bl	519c <br_init>
		if (err) {
    5742:	4604      	mov	r4, r0
    5744:	2800      	cmp	r0, #0
    5746:	d1ed      	bne.n	5724 <hci_init+0xc>
	err = set_event_mask();
    5748:	f7ff fd44 	bl	51d4 <set_event_mask>
	if (err) {
    574c:	4604      	mov	r4, r0
    574e:	2800      	cmp	r0, #0
    5750:	d1e8      	bne.n	5724 <hci_init+0xc>
	hci_vs_init();
    5752:	f7ff fda1 	bl	5298 <hci_vs_init>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    5756:	2300      	movs	r3, #0
    5758:	9300      	str	r3, [sp, #0]
    575a:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
    575e:	2207      	movs	r2, #7
    5760:	4669      	mov	r1, sp
    5762:	480c      	ldr	r0, [pc, #48]	; (5794 <hci_init+0x7c>)
    5764:	f025 f844 	bl	2a7f0 <memcmp>
    5768:	b178      	cbz	r0, 578a <hci_init+0x72>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    576a:	4b0b      	ldr	r3, [pc, #44]	; (5798 <hci_init+0x80>)
    576c:	e893 0003 	ldmia.w	r3, {r0, r1}
    5770:	9002      	str	r0, [sp, #8]
    5772:	f8ad 100c 	strh.w	r1, [sp, #12]
    5776:	0c09      	lsrs	r1, r1, #16
    5778:	f88d 100e 	strb.w	r1, [sp, #14]
    577c:	2207      	movs	r2, #7
    577e:	a902      	add	r1, sp, #8
    5780:	4804      	ldr	r0, [pc, #16]	; (5794 <hci_init+0x7c>)
    5782:	f025 f835 	bl	2a7f0 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    5786:	2800      	cmp	r0, #0
    5788:	d1cc      	bne.n	5724 <hci_init+0xc>
		err = set_static_addr();
    578a:	f7ff ff5d 	bl	5648 <set_static_addr>
    578e:	4604      	mov	r4, r0
    5790:	e7c8      	b.n	5724 <hci_init+0xc>
    5792:	bf00      	nop
    5794:	2000b980 	.word	0x2000b980
    5798:	0002e730 	.word	0x0002e730

0000579c <hci_init>:
		return HCI_CLASS_ACL_DATA;
	}
}

void hci_init(struct k_poll_signal *signal_host_buf)
{
    579c:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
    579e:	2100      	movs	r1, #0
    57a0:	4608      	mov	r0, r1
    57a2:	f007 ffb1 	bl	d708 <reset>
    57a6:	bd08      	pop	{r3, pc}

000057a8 <bt_send>:
{
    57a8:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    57aa:	4b03      	ldr	r3, [pc, #12]	; (57b8 <bt_send+0x10>)
    57ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    57b0:	68db      	ldr	r3, [r3, #12]
    57b2:	4798      	blx	r3
}
    57b4:	bd08      	pop	{r3, pc}
    57b6:	bf00      	nop
    57b8:	2000b980 	.word	0x2000b980

000057bc <bt_hci_cmd_send>:
{
    57bc:	b538      	push	{r3, r4, r5, lr}
    57be:	4605      	mov	r5, r0
	if (!buf) {
    57c0:	460c      	mov	r4, r1
    57c2:	b151      	cbz	r1, 57da <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    57c4:	f640 4335 	movw	r3, #3125	; 0xc35
    57c8:	429d      	cmp	r5, r3
    57ca:	d00e      	beq.n	57ea <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    57cc:	4621      	mov	r1, r4
    57ce:	480c      	ldr	r0, [pc, #48]	; (5800 <bt_hci_cmd_send+0x44>)
    57d0:	f015 fa96 	bl	1ad00 <net_buf_put>
	return 0;
    57d4:	2500      	movs	r5, #0
}
    57d6:	4628      	mov	r0, r5
    57d8:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    57da:	f7ff fa91 	bl	4d00 <bt_hci_cmd_create>
		if (!buf) {
    57de:	4604      	mov	r4, r0
    57e0:	2800      	cmp	r0, #0
    57e2:	d1ef      	bne.n	57c4 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
    57e4:	f06f 0568 	mvn.w	r5, #104	; 0x68
    57e8:	e7f5      	b.n	57d6 <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
    57ea:	4620      	mov	r0, r4
    57ec:	f7ff ffdc 	bl	57a8 <bt_send>
		if (err) {
    57f0:	4605      	mov	r5, r0
    57f2:	2800      	cmp	r0, #0
    57f4:	d0ef      	beq.n	57d6 <bt_hci_cmd_send+0x1a>
			net_buf_unref(buf);
    57f6:	4620      	mov	r0, r4
    57f8:	f015 fa90 	bl	1ad1c <net_buf_unref>
    57fc:	e7eb      	b.n	57d6 <bt_hci_cmd_send+0x1a>
    57fe:	bf00      	nop
    5800:	2000ba54 	.word	0x2000ba54

00005804 <start_le_scan>:
{
    5804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5808:	b083      	sub	sp, #12
    580a:	4606      	mov	r6, r0
    580c:	4689      	mov	r9, r1
    580e:	4615      	mov	r5, r2
    5810:	4698      	mov	r8, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM,
    5812:	2107      	movs	r1, #7
    5814:	f242 000b 	movw	r0, #8203	; 0x200b
    5818:	f7ff fa72 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    581c:	2800      	cmp	r0, #0
    581e:	d072      	beq.n	5906 <start_le_scan+0x102>
    5820:	4607      	mov	r7, r0
	set_param = net_buf_add(buf, sizeof(*set_param));
    5822:	2107      	movs	r1, #7
    5824:	3008      	adds	r0, #8
    5826:	f015 fac5 	bl	1adb4 <net_buf_simple_add>
    582a:	4604      	mov	r4, r0
	memset(set_param, 0, sizeof(*set_param));
    582c:	2207      	movs	r2, #7
    582e:	2100      	movs	r1, #0
    5830:	f025 f872 	bl	2a918 <memset>
	set_param->scan_type = scan_type;
    5834:	7026      	strb	r6, [r4, #0]
	set_param->interval = sys_cpu_to_le16(interval);
    5836:	f8a4 9001 	strh.w	r9, [r4, #1]
	set_param->window = sys_cpu_to_le16(window);
    583a:	f8a4 5003 	strh.w	r5, [r4, #3]
	set_param->filter_policy = 0x00;
    583e:	2300      	movs	r3, #0
    5840:	71a3      	strb	r3, [r4, #6]
		set_param->addr_type =  bt_dev.id_addr.type;
    5842:	4b34      	ldr	r3, [pc, #208]	; (5914 <start_le_scan+0x110>)
    5844:	781b      	ldrb	r3, [r3, #0]
    5846:	7163      	strb	r3, [r4, #5]
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    5848:	2e01      	cmp	r6, #1
    584a:	d02c      	beq.n	58a6 <start_le_scan+0xa2>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    584c:	4639      	mov	r1, r7
    584e:	f242 000b 	movw	r0, #8203	; 0x200b
    5852:	f7ff ffb3 	bl	57bc <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    5856:	2102      	movs	r1, #2
    5858:	f242 000c 	movw	r0, #8204	; 0x200c
    585c:	f7ff fa50 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    5860:	4604      	mov	r4, r0
    5862:	2800      	cmp	r0, #0
    5864:	d052      	beq.n	590c <start_le_scan+0x108>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    5866:	2102      	movs	r1, #2
    5868:	3008      	adds	r0, #8
    586a:	f015 faa3 	bl	1adb4 <net_buf_simple_add>
    586e:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    5870:	2202      	movs	r2, #2
    5872:	2100      	movs	r1, #0
    5874:	f025 f850 	bl	2a918 <memset>
	scan_enable->filter_dup = filter_dup;
    5878:	f885 8001 	strb.w	r8, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_ENABLE;
    587c:	2301      	movs	r3, #1
    587e:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    5880:	aa01      	add	r2, sp, #4
    5882:	4621      	mov	r1, r4
    5884:	f242 000c 	movw	r0, #8204	; 0x200c
    5888:	f7ff fa66 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    588c:	4605      	mov	r5, r0
    588e:	b930      	cbnz	r0, 589e <start_le_scan+0x9a>
	err = rsp->data[0];
    5890:	9b01      	ldr	r3, [sp, #4]
    5892:	689b      	ldr	r3, [r3, #8]
    5894:	781d      	ldrb	r5, [r3, #0]
	if (!err) {
    5896:	b1d5      	cbz	r5, 58ce <start_le_scan+0xca>
	net_buf_unref(rsp);
    5898:	9801      	ldr	r0, [sp, #4]
    589a:	f015 fa3f 	bl	1ad1c <net_buf_unref>
}
    589e:	4628      	mov	r0, r5
    58a0:	b003      	add	sp, #12
    58a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    58a6:	f3bf 8f5b 	dmb	ish
    58aa:	4b1a      	ldr	r3, [pc, #104]	; (5914 <start_le_scan+0x110>)
    58ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    58ae:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    58b2:	f013 0f20 	tst.w	r3, #32
    58b6:	d1c9      	bne.n	584c <start_le_scan+0x48>
			err = le_set_private_addr();
    58b8:	f7ff fd5a 	bl	5370 <le_set_private_addr>
			if (err) {
    58bc:	4605      	mov	r5, r0
    58be:	b910      	cbnz	r0, 58c6 <start_le_scan+0xc2>
			set_param->addr_type = BT_ADDR_LE_RANDOM;
    58c0:	2301      	movs	r3, #1
    58c2:	7163      	strb	r3, [r4, #5]
    58c4:	e7c2      	b.n	584c <start_le_scan+0x48>
				net_buf_unref(buf);
    58c6:	4638      	mov	r0, r7
    58c8:	f015 fa28 	bl	1ad1c <net_buf_unref>
				return err;
    58cc:	e7e7      	b.n	589e <start_le_scan+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    58ce:	4b12      	ldr	r3, [pc, #72]	; (5918 <start_le_scan+0x114>)
    58d0:	f3bf 8f5b 	dmb	ish
    58d4:	e853 2f00 	ldrex	r2, [r3]
    58d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    58dc:	e843 2100 	strex	r1, r2, [r3]
    58e0:	2900      	cmp	r1, #0
    58e2:	d1f7      	bne.n	58d4 <start_le_scan+0xd0>
    58e4:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    58e8:	2e01      	cmp	r6, #1
    58ea:	d1d5      	bne.n	5898 <start_le_scan+0x94>
    58ec:	f3bf 8f5b 	dmb	ish
    58f0:	e853 2f00 	ldrex	r2, [r3]
    58f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    58f8:	e843 2100 	strex	r1, r2, [r3]
    58fc:	2900      	cmp	r1, #0
    58fe:	d1f7      	bne.n	58f0 <start_le_scan+0xec>
    5900:	f3bf 8f5b 	dmb	ish
    5904:	e7c8      	b.n	5898 <start_le_scan+0x94>
		return -ENOBUFS;
    5906:	f06f 0568 	mvn.w	r5, #104	; 0x68
    590a:	e7c8      	b.n	589e <start_le_scan+0x9a>
		return -ENOBUFS;
    590c:	f06f 0568 	mvn.w	r5, #104	; 0x68
    5910:	e7c5      	b.n	589e <start_le_scan+0x9a>
    5912:	bf00      	nop
    5914:	2000b980 	.word	0x2000b980
    5918:	2000b9f0 	.word	0x2000b9f0

0000591c <bt_le_scan_update>:
{
    591c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    591e:	f3bf 8f5b 	dmb	ish
    5922:	4b17      	ldr	r3, [pc, #92]	; (5980 <bt_le_scan_update+0x64>)
    5924:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    5926:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    592a:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    592e:	b114      	cbz	r4, 5936 <bt_le_scan_update+0x1a>
		return 0;
    5930:	2300      	movs	r3, #0
}
    5932:	4618      	mov	r0, r3
    5934:	bd38      	pop	{r3, r4, r5, pc}
    5936:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5938:	f3bf 8f5b 	dmb	ish
    593c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    593e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    5942:	f013 0f80 	tst.w	r3, #128	; 0x80
    5946:	d004      	beq.n	5952 <bt_le_scan_update+0x36>
		err = bt_hci_stop_scanning();
    5948:	f7ff fd2a 	bl	53a0 <bt_hci_stop_scanning>
		if (err) {
    594c:	4603      	mov	r3, r0
    594e:	2800      	cmp	r0, #0
    5950:	d1ef      	bne.n	5932 <bt_le_scan_update+0x16>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    5952:	2101      	movs	r1, #1
    5954:	2000      	movs	r0, #0
    5956:	f001 fcd9 	bl	730c <bt_conn_lookup_state_le>
		if (!conn) {
    595a:	b170      	cbz	r0, 597a <bt_le_scan_update+0x5e>
		bt_conn_unref(conn);
    595c:	f001 fd08 	bl	7370 <bt_conn_unref>
		if (fast_scan) {
    5960:	b13d      	cbz	r5, 5972 <bt_le_scan_update+0x56>
			window = BT_GAP_SCAN_FAST_WINDOW;
    5962:	2230      	movs	r2, #48	; 0x30
			interval = BT_GAP_SCAN_FAST_INTERVAL;
    5964:	2160      	movs	r1, #96	; 0x60
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
    5966:	2301      	movs	r3, #1
    5968:	2000      	movs	r0, #0
    596a:	f7ff ff4b 	bl	5804 <start_le_scan>
    596e:	4603      	mov	r3, r0
    5970:	e7df      	b.n	5932 <bt_le_scan_update+0x16>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    5972:	2212      	movs	r2, #18
			interval = BT_GAP_SCAN_SLOW_INTERVAL_1;
    5974:	f44f 6100 	mov.w	r1, #2048	; 0x800
    5978:	e7f5      	b.n	5966 <bt_le_scan_update+0x4a>
			return 0;
    597a:	4623      	mov	r3, r4
    597c:	e7d9      	b.n	5932 <bt_le_scan_update+0x16>
    597e:	bf00      	nop
    5980:	2000b980 	.word	0x2000b980

00005984 <bt_init>:
{
    5984:	b510      	push	{r4, lr}
	err = hci_init();
    5986:	f7ff fec7 	bl	5718 <hci_init>
	if (err) {
    598a:	4604      	mov	r4, r0
    598c:	b108      	cbz	r0, 5992 <bt_init+0xe>
}
    598e:	4620      	mov	r0, r4
    5990:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
    5992:	f002 f83b 	bl	7a0c <bt_conn_init>
		if (err) {
    5996:	4604      	mov	r4, r0
    5998:	2800      	cmp	r0, #0
    599a:	d1f8      	bne.n	598e <bt_init+0xa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    599c:	4b07      	ldr	r3, [pc, #28]	; (59bc <bt_init+0x38>)
    599e:	f3bf 8f5b 	dmb	ish
    59a2:	e853 2f00 	ldrex	r2, [r3]
    59a6:	f042 0202 	orr.w	r2, r2, #2
    59aa:	e843 2100 	strex	r1, r2, [r3]
    59ae:	2900      	cmp	r1, #0
    59b0:	d1f7      	bne.n	59a2 <bt_init+0x1e>
    59b2:	f3bf 8f5b 	dmb	ish
	bt_le_scan_update(false);
    59b6:	f7ff ffb1 	bl	591c <bt_le_scan_update>
	return 0;
    59ba:	e7e8      	b.n	598e <bt_init+0xa>
    59bc:	2000b9f0 	.word	0x2000b9f0

000059c0 <init_work>:
{
    59c0:	b508      	push	{r3, lr}
	err = bt_init();
    59c2:	f7ff ffdf 	bl	5984 <bt_init>
	if (ready_cb) {
    59c6:	4b02      	ldr	r3, [pc, #8]	; (59d0 <init_work+0x10>)
    59c8:	681b      	ldr	r3, [r3, #0]
    59ca:	b103      	cbz	r3, 59ce <init_work+0xe>
		ready_cb(err);
    59cc:	4798      	blx	r3
    59ce:	bd08      	pop	{r3, pc}
    59d0:	20000428 	.word	0x20000428

000059d4 <hci_disconn_complete>:
{
    59d4:	b530      	push	{r4, r5, lr}
    59d6:	b085      	sub	sp, #20
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    59d8:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    59da:	f8b4 0001 	ldrh.w	r0, [r4, #1]
	if (evt->status) {
    59de:	7823      	ldrb	r3, [r4, #0]
    59e0:	b10b      	cbz	r3, 59e6 <hci_disconn_complete+0x12>
}
    59e2:	b005      	add	sp, #20
    59e4:	bd30      	pop	{r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
    59e6:	f001 fc3f 	bl	7268 <bt_conn_lookup_handle>
	if (!conn) {
    59ea:	4605      	mov	r5, r0
    59ec:	2800      	cmp	r0, #0
    59ee:	d034      	beq.n	5a5a <hci_disconn_complete+0x86>
	conn->err = evt->reason;
    59f0:	78e3      	ldrb	r3, [r4, #3]
    59f2:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    59f4:	f022 faf8 	bl	27fe8 <k_call_stacks_analyze>
		} else {
			break;
		}
	}
#else
	for (i = 0; i < size; i++) {
    59f8:	2200      	movs	r2, #0
	size_t unused = 0;
    59fa:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    59fc:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
    5a00:	d206      	bcs.n	5a10 <hci_disconn_complete+0x3c>
		if ((unsigned char)stack[i] == 0xaa) {
    5a02:	4927      	ldr	r1, [pc, #156]	; (5aa0 <hci_disconn_complete+0xcc>)
    5a04:	5c89      	ldrb	r1, [r1, r2]
    5a06:	29aa      	cmp	r1, #170	; 0xaa
    5a08:	d102      	bne.n	5a10 <hci_disconn_complete+0x3c>
			unused++;
    5a0a:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    5a0c:	3201      	adds	r2, #1
    5a0e:	e7f5      	b.n	59fc <hci_disconn_complete+0x28>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    5a10:	f5c3 7120 	rsb	r1, r3, #640	; 0x280
    5a14:	2264      	movs	r2, #100	; 0x64
    5a16:	fb02 f201 	mul.w	r2, r2, r1
    5a1a:	4822      	ldr	r0, [pc, #136]	; (5aa4 <hci_disconn_complete+0xd0>)
    5a1c:	fba0 0202 	umull	r0, r2, r0, r2
    5a20:	0a52      	lsrs	r2, r2, #9

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    5a22:	9202      	str	r2, [sp, #8]
    5a24:	f44f 7220 	mov.w	r2, #640	; 0x280
    5a28:	9201      	str	r2, [sp, #4]
    5a2a:	9100      	str	r1, [sp, #0]
    5a2c:	491e      	ldr	r1, [pc, #120]	; (5aa8 <hci_disconn_complete+0xd4>)
    5a2e:	481f      	ldr	r0, [pc, #124]	; (5aac <hci_disconn_complete+0xd8>)
    5a30:	f7fd fac2 	bl	2fb8 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5a34:	2100      	movs	r1, #0
    5a36:	4628      	mov	r0, r5
    5a38:	f001 fd28 	bl	748c <bt_conn_set_state>
	conn->handle = 0;
    5a3c:	2300      	movs	r3, #0
    5a3e:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    5a40:	78ab      	ldrb	r3, [r5, #2]
    5a42:	bb03      	cbnz	r3, 5a86 <hci_disconn_complete+0xb2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5a44:	f3bf 8f5b 	dmb	ish
    5a48:	686b      	ldr	r3, [r5, #4]
    5a4a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    5a4e:	f013 0f01 	tst.w	r3, #1
    5a52:	d11c      	bne.n	5a8e <hci_disconn_complete+0xba>
	bt_conn_unref(conn);
    5a54:	4628      	mov	r0, r5
    5a56:	f001 fc8b 	bl	7370 <bt_conn_unref>
    5a5a:	f3bf 8f5b 	dmb	ish
    5a5e:	4b14      	ldr	r3, [pc, #80]	; (5ab0 <hci_disconn_complete+0xdc>)
    5a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5a62:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5a66:	f013 0f40 	tst.w	r3, #64	; 0x40
    5a6a:	d0ba      	beq.n	59e2 <hci_disconn_complete+0xe>
    5a6c:	f3bf 8f5b 	dmb	ish
    5a70:	4b0f      	ldr	r3, [pc, #60]	; (5ab0 <hci_disconn_complete+0xdc>)
    5a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5a74:	f3bf 8f5b 	dmb	ish
    5a78:	f013 0f20 	tst.w	r3, #32
    5a7c:	d1b1      	bne.n	59e2 <hci_disconn_complete+0xe>
		set_advertise_enable(true);
    5a7e:	2001      	movs	r0, #1
    5a80:	f7ff fce4 	bl	544c <set_advertise_enable>
    5a84:	e7ad      	b.n	59e2 <hci_disconn_complete+0xe>
		bt_conn_unref(conn);
    5a86:	4628      	mov	r0, r5
    5a88:	f001 fc72 	bl	7370 <bt_conn_unref>
		return;
    5a8c:	e7a9      	b.n	59e2 <hci_disconn_complete+0xe>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5a8e:	2101      	movs	r1, #1
    5a90:	4628      	mov	r0, r5
    5a92:	f001 fcfb 	bl	748c <bt_conn_set_state>
		bt_le_scan_update(false);
    5a96:	2000      	movs	r0, #0
    5a98:	f7ff ff40 	bl	591c <bt_le_scan_update>
    5a9c:	e7da      	b.n	5a54 <hci_disconn_complete+0x80>
    5a9e:	bf00      	nop
    5aa0:	20003d18 	.word	0x20003d18
    5aa4:	cccccccd 	.word	0xcccccccd
    5aa8:	0003154c 	.word	0x0003154c
    5aac:	00031558 	.word	0x00031558
    5ab0:	2000b980 	.word	0x2000b980

00005ab4 <check_pending_conn>:
{
    5ab4:	b538      	push	{r3, r4, r5, lr}
    5ab6:	f3bf 8f5b 	dmb	ish
    5aba:	4b23      	ldr	r3, [pc, #140]	; (5b48 <check_pending_conn+0x94>)
    5abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5abe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5ac2:	f413 7f80 	tst.w	r3, #256	; 0x100
    5ac6:	d101      	bne.n	5acc <check_pending_conn+0x18>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    5ac8:	2a01      	cmp	r2, #1
    5aca:	d900      	bls.n	5ace <check_pending_conn+0x1a>
    5acc:	bd38      	pop	{r3, r4, r5, pc}
    5ace:	460c      	mov	r4, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    5ad0:	2101      	movs	r1, #1
    5ad2:	f001 fc1b 	bl	730c <bt_conn_lookup_state_le>
	if (!conn) {
    5ad6:	4605      	mov	r5, r0
    5ad8:	2800      	cmp	r0, #0
    5ada:	d0f7      	beq.n	5acc <check_pending_conn+0x18>
	if (bt_hci_stop_scanning()) {
    5adc:	f7ff fc60 	bl	53a0 <bt_hci_stop_scanning>
    5ae0:	b9c0      	cbnz	r0, 5b14 <check_pending_conn+0x60>
    5ae2:	f3bf 8f5b 	dmb	ish
    5ae6:	4b18      	ldr	r3, [pc, #96]	; (5b48 <check_pending_conn+0x94>)
    5ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5aea:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    5aee:	f013 0f04 	tst.w	r3, #4
    5af2:	d11c      	bne.n	5b2e <check_pending_conn+0x7a>
	memcpy(dst, src, sizeof(*dst));
    5af4:	2207      	movs	r2, #7
    5af6:	4914      	ldr	r1, [pc, #80]	; (5b48 <check_pending_conn+0x94>)
    5af8:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    5afc:	f7fa fbe0 	bl	2c0 <memcpy>
    5b00:	2207      	movs	r2, #7
    5b02:	4621      	mov	r1, r4
    5b04:	f105 0056 	add.w	r0, r5, #86	; 0x56
    5b08:	f7fa fbda 	bl	2c0 <memcpy>
	if (hci_le_create_conn(conn)) {
    5b0c:	4628      	mov	r0, r5
    5b0e:	f7ff fcdb 	bl	54c8 <hci_le_create_conn>
    5b12:	b180      	cbz	r0, 5b36 <check_pending_conn+0x82>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    5b14:	231f      	movs	r3, #31
    5b16:	72eb      	strb	r3, [r5, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5b18:	2100      	movs	r1, #0
    5b1a:	4628      	mov	r0, r5
    5b1c:	f001 fcb6 	bl	748c <bt_conn_set_state>
	bt_conn_unref(conn);
    5b20:	4628      	mov	r0, r5
    5b22:	f001 fc25 	bl	7370 <bt_conn_unref>
	bt_le_scan_update(false);
    5b26:	2000      	movs	r0, #0
    5b28:	f7ff fef8 	bl	591c <bt_le_scan_update>
    5b2c:	e7ce      	b.n	5acc <check_pending_conn+0x18>
			set_random_address(&bt_dev.id_addr.a);
    5b2e:	4807      	ldr	r0, [pc, #28]	; (5b4c <check_pending_conn+0x98>)
    5b30:	f7ff fbee 	bl	5310 <set_random_address>
    5b34:	e7de      	b.n	5af4 <check_pending_conn+0x40>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    5b36:	2102      	movs	r1, #2
    5b38:	4628      	mov	r0, r5
    5b3a:	f001 fca7 	bl	748c <bt_conn_set_state>
	bt_conn_unref(conn);
    5b3e:	4628      	mov	r0, r5
    5b40:	f001 fc16 	bl	7370 <bt_conn_unref>
	return;
    5b44:	bd38      	pop	{r3, r4, r5, pc}
    5b46:	bf00      	nop
    5b48:	2000b980 	.word	0x2000b980
    5b4c:	2000b981 	.word	0x2000b981

00005b50 <le_adv_report>:
{
    5b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b54:	b083      	sub	sp, #12
    5b56:	4605      	mov	r5, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    5b58:	f100 0308 	add.w	r3, r0, #8
    5b5c:	9300      	str	r3, [sp, #0]
    5b5e:	4618      	mov	r0, r3
    5b60:	f015 f97d 	bl	1ae5e <net_buf_simple_pull_u8>
	while (num_reports--) {
    5b64:	e00a      	b.n	5b7c <le_adv_report+0x2c>
		check_pending_conn(addr, &info->addr, info->evt_type);
    5b66:	7822      	ldrb	r2, [r4, #0]
    5b68:	4631      	mov	r1, r6
    5b6a:	9801      	ldr	r0, [sp, #4]
    5b6c:	f7ff ffa2 	bl	5ab4 <check_pending_conn>
		net_buf_pull(buf, info->length + sizeof(rssi));
    5b70:	7a21      	ldrb	r1, [r4, #8]
    5b72:	3101      	adds	r1, #1
    5b74:	9800      	ldr	r0, [sp, #0]
    5b76:	f015 f96a 	bl	1ae4e <net_buf_simple_pull>
	while (num_reports--) {
    5b7a:	4638      	mov	r0, r7
    5b7c:	1e43      	subs	r3, r0, #1
    5b7e:	b2df      	uxtb	r7, r3
    5b80:	b368      	cbz	r0, 5bde <le_adv_report+0x8e>
		info = (void *)buf->data;
    5b82:	68ac      	ldr	r4, [r5, #8]
		net_buf_pull(buf, sizeof(*info));
    5b84:	2109      	movs	r1, #9
    5b86:	f8dd 9000 	ldr.w	r9, [sp]
    5b8a:	4648      	mov	r0, r9
    5b8c:	f015 f95f 	bl	1ae4e <net_buf_simple_pull>
		rssi = info->data[info->length];
    5b90:	7a23      	ldrb	r3, [r4, #8]
    5b92:	4423      	add	r3, r4
    5b94:	f993 8009 	ldrsb.w	r8, [r3, #9]
		addr = find_id_addr(&info->addr);
    5b98:	1c66      	adds	r6, r4, #1
    5b9a:	4630      	mov	r0, r6
    5b9c:	f7fe ff6b 	bl	4a76 <find_id_addr>
    5ba0:	9001      	str	r0, [sp, #4]
		if (scan_dev_found_cb) {
    5ba2:	4b10      	ldr	r3, [pc, #64]	; (5be4 <le_adv_report+0x94>)
    5ba4:	681b      	ldr	r3, [r3, #0]
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	d0dd      	beq.n	5b66 <le_adv_report+0x16>
	state->offset = net_buf_simple_headroom(buf);
    5baa:	f8cd 9000 	str.w	r9, [sp]
    5bae:	4648      	mov	r0, r9
    5bb0:	f015 f965 	bl	1ae7e <net_buf_simple_headroom>
    5bb4:	fa1f fa80 	uxth.w	sl, r0
	state->len = buf->len;
    5bb8:	f8b5 900c 	ldrh.w	r9, [r5, #12]
			buf->len = info->length;
    5bbc:	7a23      	ldrb	r3, [r4, #8]
    5bbe:	81ab      	strh	r3, [r5, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    5bc0:	4b08      	ldr	r3, [pc, #32]	; (5be4 <le_adv_report+0x94>)
    5bc2:	f8d3 b000 	ldr.w	fp, [r3]
    5bc6:	9b00      	ldr	r3, [sp, #0]
    5bc8:	7822      	ldrb	r2, [r4, #0]
    5bca:	4641      	mov	r1, r8
    5bcc:	9801      	ldr	r0, [sp, #4]
    5bce:	47d8      	blx	fp
	buf->data = buf->__buf + state->offset;
    5bd0:	f105 0310 	add.w	r3, r5, #16
    5bd4:	4453      	add	r3, sl
    5bd6:	60ab      	str	r3, [r5, #8]
	buf->len = state->len;
    5bd8:	f8a5 900c 	strh.w	r9, [r5, #12]
    5bdc:	e7c3      	b.n	5b66 <le_adv_report+0x16>
}
    5bde:	b003      	add	sp, #12
    5be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5be4:	2000042c 	.word	0x2000042c

00005be8 <hci_le_read_remote_features>:
{
    5be8:	b538      	push	{r3, r4, r5, lr}
    5bea:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    5bec:	2102      	movs	r1, #2
    5bee:	f242 0016 	movw	r0, #8214	; 0x2016
    5bf2:	f7ff f885 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    5bf6:	b168      	cbz	r0, 5c14 <hci_le_read_remote_features+0x2c>
    5bf8:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5bfa:	2102      	movs	r1, #2
    5bfc:	3008      	adds	r0, #8
    5bfe:	f015 f8d9 	bl	1adb4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5c02:	882b      	ldrh	r3, [r5, #0]
    5c04:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5c06:	4621      	mov	r1, r4
    5c08:	f242 0016 	movw	r0, #8214	; 0x2016
    5c0c:	f7ff fdd6 	bl	57bc <bt_hci_cmd_send>
	return 0;
    5c10:	2000      	movs	r0, #0
    5c12:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5c14:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5c18:	bd38      	pop	{r3, r4, r5, pc}

00005c1a <hci_le_set_phy>:
{
    5c1a:	b538      	push	{r3, r4, r5, lr}
    5c1c:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    5c1e:	2107      	movs	r1, #7
    5c20:	f242 0032 	movw	r0, #8242	; 0x2032
    5c24:	f7ff f86c 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    5c28:	b1a0      	cbz	r0, 5c54 <hci_le_set_phy+0x3a>
    5c2a:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5c2c:	2107      	movs	r1, #7
    5c2e:	3008      	adds	r0, #8
    5c30:	f015 f8c0 	bl	1adb4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5c34:	8823      	ldrh	r3, [r4, #0]
    5c36:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    5c38:	2400      	movs	r4, #0
    5c3a:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    5c3c:	2302      	movs	r3, #2
    5c3e:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    5c40:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    5c42:	7144      	strb	r4, [r0, #5]
    5c44:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    5c46:	4629      	mov	r1, r5
    5c48:	f242 0032 	movw	r0, #8242	; 0x2032
    5c4c:	f7ff fdb6 	bl	57bc <bt_hci_cmd_send>
	return 0;
    5c50:	4620      	mov	r0, r4
    5c52:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5c54:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5c58:	bd38      	pop	{r3, r4, r5, pc}

00005c5a <hci_le_set_data_len>:
{
    5c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c5c:	b083      	sub	sp, #12
    5c5e:	4604      	mov	r4, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    5c60:	aa01      	add	r2, sp, #4
    5c62:	2100      	movs	r1, #0
    5c64:	f242 002f 	movw	r0, #8239	; 0x202f
    5c68:	f7ff f876 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    5c6c:	4603      	mov	r3, r0
    5c6e:	b110      	cbz	r0, 5c76 <hci_le_set_data_len+0x1c>
}
    5c70:	4618      	mov	r0, r3
    5c72:	b003      	add	sp, #12
    5c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    5c76:	9801      	ldr	r0, [sp, #4]
    5c78:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    5c7a:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    5c7e:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	net_buf_unref(rsp);
    5c82:	f015 f84b 	bl	1ad1c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    5c86:	2106      	movs	r1, #6
    5c88:	f242 0022 	movw	r0, #8226	; 0x2022
    5c8c:	f7ff f838 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    5c90:	4605      	mov	r5, r0
    5c92:	b170      	cbz	r0, 5cb2 <hci_le_set_data_len+0x58>
	cp = net_buf_add(buf, sizeof(*cp));
    5c94:	2106      	movs	r1, #6
    5c96:	3008      	adds	r0, #8
    5c98:	f015 f88c 	bl	1adb4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5c9c:	8823      	ldrh	r3, [r4, #0]
    5c9e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    5ca0:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    5ca2:	8086      	strh	r6, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    5ca4:	4629      	mov	r1, r5
    5ca6:	f242 0022 	movw	r0, #8226	; 0x2022
    5caa:	f7ff fd87 	bl	57bc <bt_hci_cmd_send>
    5cae:	4603      	mov	r3, r0
    5cb0:	e7de      	b.n	5c70 <hci_le_set_data_len+0x16>
		return -ENOBUFS;
    5cb2:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5cb6:	e7db      	b.n	5c70 <hci_le_set_data_len+0x16>

00005cb8 <le_conn_complete>:
{
    5cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    5cbc:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5cbe:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
    5cc2:	7823      	ldrb	r3, [r4, #0]
    5cc4:	b17b      	cbz	r3, 5ce6 <le_conn_complete+0x2e>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    5cc6:	2102      	movs	r1, #2
    5cc8:	2000      	movs	r0, #0
    5cca:	f001 fb1f 	bl	730c <bt_conn_lookup_state_le>
		if (!conn) {
    5cce:	4605      	mov	r5, r0
    5cd0:	b3d0      	cbz	r0, 5d48 <le_conn_complete+0x90>
		conn->err = evt->status;
    5cd2:	7823      	ldrb	r3, [r4, #0]
    5cd4:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5cd6:	2100      	movs	r1, #0
    5cd8:	f001 fbd8 	bl	748c <bt_conn_set_state>
		bt_conn_unref(conn);
    5cdc:	4628      	mov	r0, r5
    5cde:	f001 fb47 	bl	7370 <bt_conn_unref>
		return;
    5ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	id_addr = find_id_addr(&evt->peer_addr);
    5ce6:	1d27      	adds	r7, r4, #4
    5ce8:	4638      	mov	r0, r7
    5cea:	f7fe fec4 	bl	4a76 <find_id_addr>
    5cee:	4680      	mov	r8, r0
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    5cf0:	2102      	movs	r1, #2
    5cf2:	f001 fb0b 	bl	730c <bt_conn_lookup_state_le>
    5cf6:	4605      	mov	r5, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    5cf8:	78e3      	ldrb	r3, [r4, #3]
    5cfa:	2b01      	cmp	r3, #1
    5cfc:	d026      	beq.n	5d4c <le_conn_complete+0x94>
	if (!conn) {
    5cfe:	b31d      	cbz	r5, 5d48 <le_conn_complete+0x90>
	conn->handle   = handle;
    5d00:	4628      	mov	r0, r5
    5d02:	f820 6b48 	strh.w	r6, [r0], #72
    5d06:	2207      	movs	r2, #7
    5d08:	4641      	mov	r1, r8
    5d0a:	f7fa fad9 	bl	2c0 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    5d0e:	f8b4 300b 	ldrh.w	r3, [r4, #11]
    5d12:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    5d16:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    5d1a:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    5d1e:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    5d22:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
	conn->role = evt->role;
    5d26:	78e3      	ldrb	r3, [r4, #3]
    5d28:	70eb      	strb	r3, [r5, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    5d2a:	2b01      	cmp	r3, #1
    5d2c:	d022      	beq.n	5d74 <le_conn_complete+0xbc>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    5d2e:	2103      	movs	r1, #3
    5d30:	4628      	mov	r0, r5
    5d32:	f001 fbab 	bl	748c <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    5d36:	7b2b      	ldrb	r3, [r5, #12]
    5d38:	2b03      	cmp	r3, #3
    5d3a:	d03b      	beq.n	5db4 <le_conn_complete+0xfc>
	bt_conn_unref(conn);
    5d3c:	4628      	mov	r0, r5
    5d3e:	f001 fb17 	bl	7370 <bt_conn_unref>
	bt_le_scan_update(false);
    5d42:	2000      	movs	r0, #0
    5d44:	f7ff fdea 	bl	591c <bt_le_scan_update>
    5d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5d4c:	4b3a      	ldr	r3, [pc, #232]	; (5e38 <le_conn_complete+0x180>)
    5d4e:	f3bf 8f5b 	dmb	ish
    5d52:	e853 2f00 	ldrex	r2, [r3]
    5d56:	f022 0220 	bic.w	r2, r2, #32
    5d5a:	e843 2100 	strex	r1, r2, [r3]
    5d5e:	2900      	cmp	r1, #0
    5d60:	d1f7      	bne.n	5d52 <le_conn_complete+0x9a>
    5d62:	f3bf 8f5b 	dmb	ish
		if (!conn) {
    5d66:	2d00      	cmp	r5, #0
    5d68:	d1c9      	bne.n	5cfe <le_conn_complete+0x46>
			conn = bt_conn_add_le(id_addr);
    5d6a:	4640      	mov	r0, r8
    5d6c:	f001 fa30 	bl	71d0 <bt_conn_add_le>
    5d70:	4605      	mov	r5, r0
    5d72:	e7c4      	b.n	5cfe <le_conn_complete+0x46>
    5d74:	2207      	movs	r2, #7
    5d76:	4639      	mov	r1, r7
    5d78:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    5d7c:	f7fa faa0 	bl	2c0 <memcpy>
    5d80:	4e2e      	ldr	r6, [pc, #184]	; (5e3c <le_conn_complete+0x184>)
    5d82:	2207      	movs	r2, #7
    5d84:	4631      	mov	r1, r6
    5d86:	f105 0056 	add.w	r0, r5, #86	; 0x56
    5d8a:	f7fa fa99 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5d8e:	f3bf 8f5b 	dmb	ish
    5d92:	6f33      	ldr	r3, [r6, #112]	; 0x70
    5d94:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5d98:	f013 0f40 	tst.w	r3, #64	; 0x40
    5d9c:	d0c7      	beq.n	5d2e <le_conn_complete+0x76>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    5d9e:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
    5da2:	2200      	movs	r2, #0
    5da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5da8:	4313      	orrs	r3, r2
    5daa:	d0c0      	beq.n	5d2e <le_conn_complete+0x76>
			set_advertise_enable(true);
    5dac:	2001      	movs	r0, #1
    5dae:	f7ff fb4d 	bl	544c <set_advertise_enable>
    5db2:	e7bc      	b.n	5d2e <le_conn_complete+0x76>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    5db4:	78e3      	ldrb	r3, [r4, #3]
    5db6:	b12b      	cbz	r3, 5dc4 <le_conn_complete+0x10c>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    5db8:	4b20      	ldr	r3, [pc, #128]	; (5e3c <le_conn_complete+0x184>)
    5dba:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    5dbe:	f013 0f08 	tst.w	r3, #8
    5dc2:	d004      	beq.n	5dce <le_conn_complete+0x116>
		err = hci_le_read_remote_features(conn);
    5dc4:	4628      	mov	r0, r5
    5dc6:	f7ff ff0f 	bl	5be8 <hci_le_read_remote_features>
		if (!err) {
    5dca:	2800      	cmp	r0, #0
    5dcc:	d0b6      	beq.n	5d3c <le_conn_complete+0x84>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    5dce:	4b1b      	ldr	r3, [pc, #108]	; (5e3c <le_conn_complete+0x184>)
    5dd0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    5dd4:	f013 0f01 	tst.w	r3, #1
    5dd8:	d10d      	bne.n	5df6 <le_conn_complete+0x13e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    5dda:	4b18      	ldr	r3, [pc, #96]	; (5e3c <le_conn_complete+0x184>)
    5ddc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5de0:	f013 0f20 	tst.w	r3, #32
    5de4:	d003      	beq.n	5dee <le_conn_complete+0x136>
		err = hci_le_set_data_len(conn);
    5de6:	4628      	mov	r0, r5
    5de8:	f7ff ff37 	bl	5c5a <hci_le_set_data_len>
		if (!err) {
    5dec:	b1b0      	cbz	r0, 5e1c <le_conn_complete+0x164>
	update_conn_param(conn);
    5dee:	4628      	mov	r0, r5
    5df0:	f7fe fe4a 	bl	4a88 <update_conn_param>
    5df4:	e7a2      	b.n	5d3c <le_conn_complete+0x84>
		err = hci_le_set_phy(conn);
    5df6:	4628      	mov	r0, r5
    5df8:	f7ff ff0f 	bl	5c1a <hci_le_set_phy>
		if (!err) {
    5dfc:	2800      	cmp	r0, #0
    5dfe:	d1ec      	bne.n	5dda <le_conn_complete+0x122>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    5e00:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5e02:	f3bf 8f5b 	dmb	ish
    5e06:	e853 2f00 	ldrex	r2, [r3]
    5e0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5e0e:	e843 2100 	strex	r1, r2, [r3]
    5e12:	2900      	cmp	r1, #0
    5e14:	d1f7      	bne.n	5e06 <le_conn_complete+0x14e>
    5e16:	f3bf 8f5b 	dmb	ish
    5e1a:	e78f      	b.n	5d3c <le_conn_complete+0x84>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    5e1c:	1d2b      	adds	r3, r5, #4
    5e1e:	f3bf 8f5b 	dmb	ish
    5e22:	e853 2f00 	ldrex	r2, [r3]
    5e26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5e2a:	e843 2100 	strex	r1, r2, [r3]
    5e2e:	2900      	cmp	r1, #0
    5e30:	d1f7      	bne.n	5e22 <le_conn_complete+0x16a>
    5e32:	f3bf 8f5b 	dmb	ish
    5e36:	e781      	b.n	5d3c <le_conn_complete+0x84>
    5e38:	2000b9f0 	.word	0x2000b9f0
    5e3c:	2000b980 	.word	0x2000b980

00005e40 <le_conn_complete>:
{
    5e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e44:	4604      	mov	r4, r0
    5e46:	460f      	mov	r7, r1
    5e48:	4690      	mov	r8, r2
	ll_rl_crpa_set(radio_cc->peer_addr_type, &radio_cc->peer_addr[0],
    5e4a:	1d85      	adds	r5, r0, #6
    5e4c:	f100 060c 	add.w	r6, r0, #12
    5e50:	4633      	mov	r3, r6
    5e52:	22ff      	movs	r2, #255	; 0xff
    5e54:	4629      	mov	r1, r5
    5e56:	7940      	ldrb	r0, [r0, #5]
    5e58:	f014 faf8 	bl	1a44c <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5e5c:	4b40      	ldr	r3, [pc, #256]	; (5f60 <le_conn_complete+0x120>)
    5e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e62:	2200      	movs	r2, #0
    5e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    5e68:	4313      	orrs	r3, r2
    5e6a:	d077      	beq.n	5f5c <le_conn_complete+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    5e6c:	4b3d      	ldr	r3, [pc, #244]	; (5f64 <le_conn_complete+0x124>)
    5e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e72:	f002 0001 	and.w	r0, r2, #1
    5e76:	2100      	movs	r1, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5e78:	4301      	orrs	r1, r0
    5e7a:	d104      	bne.n	5e86 <le_conn_complete+0x46>
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    5e7c:	f402 7000 	and.w	r0, r2, #512	; 0x200
    5e80:	2100      	movs	r1, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    5e82:	4301      	orrs	r1, r0
    5e84:	d06a      	beq.n	5f5c <le_conn_complete+0x11c>
	if (!radio_cc->status) {
    5e86:	78e1      	ldrb	r1, [r4, #3]
    5e88:	b919      	cbnz	r1, 5e92 <le_conn_complete+0x52>
		conn_count++;
    5e8a:	4837      	ldr	r0, [pc, #220]	; (5f68 <le_conn_complete+0x128>)
    5e8c:	6801      	ldr	r1, [r0, #0]
    5e8e:	3101      	adds	r1, #1
    5e90:	6001      	str	r1, [r0, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    5e92:	f402 7200 	and.w	r2, r2, #512	; 0x200
    5e96:	2300      	movs	r3, #0
    5e98:	4313      	orrs	r3, r2
    5e9a:	d03e      	beq.n	5f1a <le_conn_complete+0xda>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    5e9c:	221e      	movs	r2, #30
    5e9e:	210a      	movs	r1, #10
    5ea0:	4640      	mov	r0, r8
    5ea2:	f007 fb2d 	bl	d500 <meta_evt>
    5ea6:	4680      	mov	r8, r0
		leecc->status = radio_cc->status;
    5ea8:	78e3      	ldrb	r3, [r4, #3]
    5eaa:	7003      	strb	r3, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    5eac:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = radio_cc->role;
    5eb0:	7923      	ldrb	r3, [r4, #4]
    5eb2:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    5eb4:	7963      	ldrb	r3, [r4, #5]
    5eb6:	7103      	strb	r3, [r0, #4]
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    5eb8:	2206      	movs	r2, #6
    5eba:	4629      	mov	r1, r5
    5ebc:	3005      	adds	r0, #5
    5ebe:	f7fa f9ff 	bl	2c0 <memcpy>
		if ((radio_cc->own_addr_type) &&
    5ec2:	7ca3      	ldrb	r3, [r4, #18]
    5ec4:	b123      	cbz	r3, 5ed0 <le_conn_complete+0x90>
		    ((radio_cc->own_addr[5] & 0xc0) == 0x40)) {
    5ec6:	7e23      	ldrb	r3, [r4, #24]
		if ((radio_cc->own_addr_type) &&
    5ec8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5ecc:	2b40      	cmp	r3, #64	; 0x40
    5ece:	d01c      	beq.n	5f0a <le_conn_complete+0xca>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    5ed0:	2206      	movs	r2, #6
    5ed2:	2100      	movs	r1, #0
    5ed4:	f108 000b 	add.w	r0, r8, #11
    5ed8:	f024 fd1e 	bl	2a918 <memset>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    5edc:	2206      	movs	r2, #6
    5ede:	4631      	mov	r1, r6
    5ee0:	f108 0011 	add.w	r0, r8, #17
    5ee4:	f7fa f9ec 	bl	2c0 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    5ee8:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    5eec:	f8a8 3017 	strh.w	r3, [r8, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    5ef0:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    5ef4:	f8a8 3019 	strh.w	r3, [r8, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5ef8:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    5efc:	f8a8 301b 	strh.w	r3, [r8, #27]
		leecc->clock_accuracy = radio_cc->mca;
    5f00:	7fe3      	ldrb	r3, [r4, #31]
    5f02:	f888 301d 	strb.w	r3, [r8, #29]
		return;
    5f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    5f0a:	2206      	movs	r2, #6
    5f0c:	f104 0113 	add.w	r1, r4, #19
    5f10:	f108 000b 	add.w	r0, r8, #11
    5f14:	f7fa f9d4 	bl	2c0 <memcpy>
    5f18:	e7e0      	b.n	5edc <le_conn_complete+0x9c>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    5f1a:	2212      	movs	r2, #18
    5f1c:	2101      	movs	r1, #1
    5f1e:	4640      	mov	r0, r8
    5f20:	f007 faee 	bl	d500 <meta_evt>
    5f24:	4606      	mov	r6, r0
	lecc->status = radio_cc->status;
    5f26:	78e3      	ldrb	r3, [r4, #3]
    5f28:	7003      	strb	r3, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    5f2a:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = radio_cc->role;
    5f2e:	7923      	ldrb	r3, [r4, #4]
    5f30:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    5f32:	7963      	ldrb	r3, [r4, #5]
    5f34:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    5f36:	2206      	movs	r2, #6
    5f38:	4629      	mov	r1, r5
    5f3a:	3005      	adds	r0, #5
    5f3c:	f7fa f9c0 	bl	2c0 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    5f40:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    5f44:	f8a6 300b 	strh.w	r3, [r6, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    5f48:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    5f4c:	f8a6 300d 	strh.w	r3, [r6, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5f50:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    5f54:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = radio_cc->mca;
    5f58:	7fe3      	ldrb	r3, [r4, #31]
    5f5a:	7473      	strb	r3, [r6, #17]
    5f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f60:	2000bc70 	.word	0x2000bc70
    5f64:	2000bc78 	.word	0x2000bc78
    5f68:	20000b44 	.word	0x20000b44

00005f6c <le_remote_feat_complete>:
{
    5f6c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    5f6e:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5f70:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    5f74:	f001 f978 	bl	7268 <bt_conn_lookup_handle>
	if (!conn) {
    5f78:	b1f0      	cbz	r0, 5fb8 <le_remote_feat_complete+0x4c>
    5f7a:	4604      	mov	r4, r0
	if (!evt->status) {
    5f7c:	782b      	ldrb	r3, [r5, #0]
    5f7e:	b1e3      	cbz	r3, 5fba <le_remote_feat_complete+0x4e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    5f80:	4b24      	ldr	r3, [pc, #144]	; (6014 <le_remote_feat_complete+0xa8>)
    5f82:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    5f86:	f013 0f01 	tst.w	r3, #1
    5f8a:	d004      	beq.n	5f96 <le_remote_feat_complete+0x2a>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
    5f8c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    5f90:	f013 0f01 	tst.w	r3, #1
    5f94:	d117      	bne.n	5fc6 <le_remote_feat_complete+0x5a>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5f96:	4b1f      	ldr	r3, [pc, #124]	; (6014 <le_remote_feat_complete+0xa8>)
    5f98:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5f9c:	f013 0f20 	tst.w	r3, #32
    5fa0:	d004      	beq.n	5fac <le_remote_feat_complete+0x40>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    5fa2:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5fa6:	f013 0f20 	tst.w	r3, #32
    5faa:	d11f      	bne.n	5fec <le_remote_feat_complete+0x80>
	update_conn_param(conn);
    5fac:	4620      	mov	r0, r4
    5fae:	f7fe fd6b 	bl	4a88 <update_conn_param>
	bt_conn_unref(conn);
    5fb2:	4620      	mov	r0, r4
    5fb4:	f001 f9dc 	bl	7370 <bt_conn_unref>
    5fb8:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(conn->le.features, evt->features,
    5fba:	2208      	movs	r2, #8
    5fbc:	1ce9      	adds	r1, r5, #3
    5fbe:	3068      	adds	r0, #104	; 0x68
    5fc0:	f7fa f97e 	bl	2c0 <memcpy>
    5fc4:	e7dc      	b.n	5f80 <le_remote_feat_complete+0x14>
		err = hci_le_set_phy(conn);
    5fc6:	4620      	mov	r0, r4
    5fc8:	f7ff fe27 	bl	5c1a <hci_le_set_phy>
		if (!err) {
    5fcc:	2800      	cmp	r0, #0
    5fce:	d1e2      	bne.n	5f96 <le_remote_feat_complete+0x2a>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    5fd0:	1d23      	adds	r3, r4, #4
    5fd2:	f3bf 8f5b 	dmb	ish
    5fd6:	e853 2f00 	ldrex	r2, [r3]
    5fda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5fde:	e843 2100 	strex	r1, r2, [r3]
    5fe2:	2900      	cmp	r1, #0
    5fe4:	d1f7      	bne.n	5fd6 <le_remote_feat_complete+0x6a>
    5fe6:	f3bf 8f5b 	dmb	ish
    5fea:	e7e2      	b.n	5fb2 <le_remote_feat_complete+0x46>
		err = hci_le_set_data_len(conn);
    5fec:	4620      	mov	r0, r4
    5fee:	f7ff fe34 	bl	5c5a <hci_le_set_data_len>
		if (!err) {
    5ff2:	2800      	cmp	r0, #0
    5ff4:	d1da      	bne.n	5fac <le_remote_feat_complete+0x40>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    5ff6:	1d23      	adds	r3, r4, #4
    5ff8:	f3bf 8f5b 	dmb	ish
    5ffc:	e853 2f00 	ldrex	r2, [r3]
    6000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    6004:	e843 2100 	strex	r1, r2, [r3]
    6008:	2900      	cmp	r1, #0
    600a:	d1f7      	bne.n	5ffc <le_remote_feat_complete+0x90>
    600c:	f3bf 8f5b 	dmb	ish
    6010:	e7cf      	b.n	5fb2 <le_remote_feat_complete+0x46>
    6012:	bf00      	nop
    6014:	2000b980 	.word	0x2000b980

00006018 <le_remote_feat_complete>:
{
    6018:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    601a:	4c14      	ldr	r4, [pc, #80]	; (606c <le_remote_feat_complete+0x54>)
    601c:	e9d4 4500 	ldrd	r4, r5, [r4]
    6020:	2400      	movs	r4, #0
    6022:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    6026:	432c      	orrs	r4, r5
    6028:	d007      	beq.n	603a <le_remote_feat_complete+0x22>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    602a:	4c11      	ldr	r4, [pc, #68]	; (6070 <le_remote_feat_complete+0x58>)
    602c:	e9d4 4500 	ldrd	r4, r5, [r4]
    6030:	f004 0408 	and.w	r4, r4, #8
    6034:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6036:	432c      	orrs	r4, r5
    6038:	d100      	bne.n	603c <le_remote_feat_complete+0x24>
    603a:	bd70      	pop	{r4, r5, r6, pc}
    603c:	4615      	mov	r5, r2
    603e:	460e      	mov	r6, r1
    6040:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    6042:	220b      	movs	r2, #11
    6044:	2104      	movs	r1, #4
    6046:	4618      	mov	r0, r3
    6048:	f007 fa5a 	bl	d500 <meta_evt>
	sep->status = status;
    604c:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    604e:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    6052:	b12c      	cbz	r4, 6060 <le_remote_feat_complete+0x48>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    6054:	2208      	movs	r2, #8
    6056:	2100      	movs	r1, #0
    6058:	3003      	adds	r0, #3
    605a:	f024 fc5d 	bl	2a918 <memset>
    605e:	e7ec      	b.n	603a <le_remote_feat_complete+0x22>
		memcpy(&sep->features[0],
    6060:	2208      	movs	r2, #8
    6062:	1d31      	adds	r1, r6, #4
    6064:	3003      	adds	r0, #3
    6066:	f7fa f92b 	bl	2c0 <memcpy>
    606a:	bd70      	pop	{r4, r5, r6, pc}
    606c:	2000bc70 	.word	0x2000bc70
    6070:	2000bc78 	.word	0x2000bc78

00006074 <le_phy_update_complete>:
{
    6074:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
    6076:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    6078:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    607c:	f001 f8f4 	bl	7268 <bt_conn_lookup_handle>
	if (!conn) {
    6080:	b308      	cbz	r0, 60c6 <le_phy_update_complete+0x52>
    6082:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    6084:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6086:	f3bf 8f5b 	dmb	ish
    608a:	e855 3f00 	ldrex	r3, [r5]
    608e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    6092:	e845 2100 	strex	r1, r2, [r5]
    6096:	2900      	cmp	r1, #0
    6098:	d1f7      	bne.n	608a <le_phy_update_complete+0x16>
    609a:	f3bf 8f5b 	dmb	ish
    609e:	f013 0f80 	tst.w	r3, #128	; 0x80
    60a2:	d00d      	beq.n	60c0 <le_phy_update_complete+0x4c>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    60a4:	4b11      	ldr	r3, [pc, #68]	; (60ec <le_phy_update_complete+0x78>)
    60a6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    60aa:	f013 0f20 	tst.w	r3, #32
    60ae:	d004      	beq.n	60ba <le_phy_update_complete+0x46>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    60b0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    60b4:	f013 0f20 	tst.w	r3, #32
    60b8:	d106      	bne.n	60c8 <le_phy_update_complete+0x54>
	update_conn_param(conn);
    60ba:	4620      	mov	r0, r4
    60bc:	f7fe fce4 	bl	4a88 <update_conn_param>
	bt_conn_unref(conn);
    60c0:	4620      	mov	r0, r4
    60c2:	f001 f955 	bl	7370 <bt_conn_unref>
    60c6:	bd38      	pop	{r3, r4, r5, pc}
		err = hci_le_set_data_len(conn);
    60c8:	4620      	mov	r0, r4
    60ca:	f7ff fdc6 	bl	5c5a <hci_le_set_data_len>
		if (!err) {
    60ce:	2800      	cmp	r0, #0
    60d0:	d1f3      	bne.n	60ba <le_phy_update_complete+0x46>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    60d2:	f3bf 8f5b 	dmb	ish
    60d6:	e855 3f00 	ldrex	r3, [r5]
    60da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    60de:	e845 3200 	strex	r2, r3, [r5]
    60e2:	2a00      	cmp	r2, #0
    60e4:	d1f7      	bne.n	60d6 <le_phy_update_complete+0x62>
    60e6:	f3bf 8f5b 	dmb	ish
    60ea:	e7e9      	b.n	60c0 <le_phy_update_complete+0x4c>
    60ec:	2000b980 	.word	0x2000b980

000060f0 <le_conn_param_neg_reply>:
{
    60f0:	b570      	push	{r4, r5, r6, lr}
    60f2:	4606      	mov	r6, r0
    60f4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    60f6:	2103      	movs	r1, #3
    60f8:	f242 0021 	movw	r0, #8225	; 0x2021
    60fc:	f7fe fe00 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    6100:	b160      	cbz	r0, 611c <le_conn_param_neg_reply+0x2c>
    6102:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    6104:	2103      	movs	r1, #3
    6106:	3008      	adds	r0, #8
    6108:	f014 fe54 	bl	1adb4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    610c:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    610e:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    6110:	4621      	mov	r1, r4
    6112:	f242 0021 	movw	r0, #8225	; 0x2021
    6116:	f7ff fb51 	bl	57bc <bt_hci_cmd_send>
    611a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    611c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6120:	bd70      	pop	{r4, r5, r6, pc}

00006122 <le_conn_param_req_reply>:
{
    6122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6124:	4607      	mov	r7, r0
    6126:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    6128:	210e      	movs	r1, #14
    612a:	f242 0020 	movw	r0, #8224	; 0x2020
    612e:	f7fe fde7 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    6132:	b1c0      	cbz	r0, 6166 <le_conn_param_req_reply+0x44>
    6134:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    6136:	210e      	movs	r1, #14
    6138:	3008      	adds	r0, #8
    613a:	f014 fe3b 	bl	1adb4 <net_buf_simple_add>
    613e:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    6140:	220e      	movs	r2, #14
    6142:	2100      	movs	r1, #0
    6144:	f024 fbe8 	bl	2a918 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    6148:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    614a:	882b      	ldrh	r3, [r5, #0]
    614c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    614e:	886b      	ldrh	r3, [r5, #2]
    6150:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    6152:	88ab      	ldrh	r3, [r5, #4]
    6154:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    6156:	88eb      	ldrh	r3, [r5, #6]
    6158:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    615a:	4631      	mov	r1, r6
    615c:	f242 0020 	movw	r0, #8224	; 0x2020
    6160:	f7ff fb2c 	bl	57bc <bt_hci_cmd_send>
    6164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    6166:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    616a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000616c <le_conn_param_req_reply>:
{
    616c:	b570      	push	{r4, r5, r6, lr}
    616e:	b082      	sub	sp, #8
    6170:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    6172:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    6174:	8814      	ldrh	r4, [r2, #0]
	interval_max = sys_le16_to_cpu(cmd->interval_max);
    6176:	8893      	ldrh	r3, [r2, #4]
	latency = sys_le16_to_cpu(cmd->latency);
    6178:	88d1      	ldrh	r1, [r2, #6]
	timeout = sys_le16_to_cpu(cmd->timeout);
    617a:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    617c:	9201      	str	r2, [sp, #4]
    617e:	9100      	str	r1, [sp, #0]
    6180:	2200      	movs	r2, #0
    6182:	2102      	movs	r1, #2
    6184:	b2a0      	uxth	r0, r4
    6186:	f012 f927 	bl	183d8 <ll_conn_update>
    618a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    618c:	2103      	movs	r1, #3
    618e:	4630      	mov	r0, r6
    6190:	f007 f91c 	bl	d3cc <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    6194:	b12d      	cbz	r5, 61a2 <le_conn_param_req_reply+0x36>
    6196:	230c      	movs	r3, #12
    6198:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    619a:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    619e:	b002      	add	sp, #8
    61a0:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    61a2:	2300      	movs	r3, #0
    61a4:	e7f8      	b.n	6198 <le_conn_param_req_reply+0x2c>
	...

000061a8 <le_conn_param_req>:
{
    61a8:	b530      	push	{r4, r5, lr}
    61aa:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    61ac:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    61ae:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    61b0:	885a      	ldrh	r2, [r3, #2]
    61b2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    61b6:	889a      	ldrh	r2, [r3, #4]
    61b8:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    61bc:	88da      	ldrh	r2, [r3, #6]
    61be:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    61c2:	891b      	ldrh	r3, [r3, #8]
    61c4:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    61c8:	4620      	mov	r0, r4
    61ca:	f001 f84d 	bl	7268 <bt_conn_lookup_handle>
	if (!conn) {
    61ce:	b178      	cbz	r0, 61f0 <le_conn_param_req+0x48>
    61d0:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
    61d2:	4669      	mov	r1, sp
    61d4:	f000 fdf6 	bl	6dc4 <le_param_req>
    61d8:	b980      	cbnz	r0, 61fc <le_conn_param_req+0x54>
		err = le_conn_param_neg_reply(handle,
    61da:	211e      	movs	r1, #30
    61dc:	4620      	mov	r0, r4
    61de:	f7ff ff87 	bl	60f0 <le_conn_param_neg_reply>
    61e2:	4604      	mov	r4, r0
	bt_conn_unref(conn);
    61e4:	4628      	mov	r0, r5
    61e6:	f001 f8c3 	bl	7370 <bt_conn_unref>
}
    61ea:	4620      	mov	r0, r4
    61ec:	b003      	add	sp, #12
    61ee:	bd30      	pop	{r4, r5, pc}
		return le_conn_param_neg_reply(handle,
    61f0:	2102      	movs	r1, #2
    61f2:	4620      	mov	r0, r4
    61f4:	f7ff ff7c 	bl	60f0 <le_conn_param_neg_reply>
    61f8:	4604      	mov	r4, r0
    61fa:	e7f6      	b.n	61ea <le_conn_param_req+0x42>
		err = le_conn_param_req_reply(handle, &param);
    61fc:	4669      	mov	r1, sp
    61fe:	4620      	mov	r0, r4
    6200:	f7ff ff8f 	bl	6122 <le_conn_param_req_reply>
    6204:	4604      	mov	r4, r0
    6206:	e7ed      	b.n	61e4 <le_conn_param_req+0x3c>

00006208 <le_conn_param_req>:
{
    6208:	b530      	push	{r4, r5, lr}
    620a:	b083      	sub	sp, #12
    620c:	4604      	mov	r4, r0
    620e:	460d      	mov	r5, r1
    6210:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6212:	4b14      	ldr	r3, [pc, #80]	; (6264 <le_conn_param_req+0x5c>)
    6214:	e9d3 2300 	ldrd	r2, r3, [r3]
    6218:	2200      	movs	r2, #0
    621a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    621e:	4313      	orrs	r3, r2
    6220:	d007      	beq.n	6232 <le_conn_param_req+0x2a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    6222:	4b11      	ldr	r3, [pc, #68]	; (6268 <le_conn_param_req+0x60>)
    6224:	e9d3 2300 	ldrd	r2, r3, [r3]
    6228:	f002 0220 	and.w	r2, r2, #32
    622c:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    622e:	4313      	orrs	r3, r2
    6230:	d109      	bne.n	6246 <le_conn_param_req+0x3e>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    6232:	2300      	movs	r3, #0
    6234:	9301      	str	r3, [sp, #4]
    6236:	9300      	str	r3, [sp, #0]
    6238:	221a      	movs	r2, #26
    623a:	2102      	movs	r1, #2
    623c:	4628      	mov	r0, r5
    623e:	f012 f8cb 	bl	183d8 <ll_conn_update>
}
    6242:	b003      	add	sp, #12
    6244:	bd30      	pop	{r4, r5, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    6246:	220a      	movs	r2, #10
    6248:	2106      	movs	r1, #6
    624a:	f007 f959 	bl	d500 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    624e:	8005      	strh	r5, [r0, #0]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    6250:	88a3      	ldrh	r3, [r4, #4]
	sep->interval_min =
    6252:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    6254:	88e3      	ldrh	r3, [r4, #6]
	sep->interval_max =
    6256:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    6258:	8923      	ldrh	r3, [r4, #8]
    625a:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    625c:	8963      	ldrh	r3, [r4, #10]
    625e:	8103      	strh	r3, [r0, #8]
    6260:	e7ef      	b.n	6242 <le_conn_param_req+0x3a>
    6262:	bf00      	nop
    6264:	2000bc70 	.word	0x2000bc70
    6268:	2000bc78 	.word	0x2000bc78

0000626c <le_ltk_request>:
{
    626c:	b5f0      	push	{r4, r5, r6, r7, lr}
    626e:	b085      	sub	sp, #20
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    6270:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    6272:	8820      	ldrh	r0, [r4, #0]
    6274:	f000 fff8 	bl	7268 <bt_conn_lookup_handle>
	if (!conn) {
    6278:	2800      	cmp	r0, #0
    627a:	d040      	beq.n	62fe <le_ltk_request+0x92>
    627c:	4605      	mov	r5, r0
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    627e:	f8d4 2002 	ldr.w	r2, [r4, #2]
    6282:	f8d4 3006 	ldr.w	r3, [r4, #6]
    6286:	4313      	orrs	r3, r2
    6288:	d102      	bne.n	6290 <le_ltk_request+0x24>
    628a:	8963      	ldrh	r3, [r4, #10]
    628c:	2b00      	cmp	r3, #0
    628e:	d038      	beq.n	6302 <le_ltk_request+0x96>
	if (!conn->le.keys) {
    6290:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6292:	2b00      	cmp	r3, #0
    6294:	d053      	beq.n	633e <le_ltk_request+0xd2>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    6296:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6298:	b16b      	cbz	r3, 62b6 <le_ltk_request+0x4a>
    629a:	899a      	ldrh	r2, [r3, #12]
    629c:	f012 0f20 	tst.w	r2, #32
    62a0:	d009      	beq.n	62b6 <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    62a2:	f8d4 0002 	ldr.w	r0, [r4, #2]
    62a6:	f8d4 1006 	ldr.w	r1, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    62aa:	ea50 0201 	orrs.w	r2, r0, r1
    62ae:	d102      	bne.n	62b6 <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    62b0:	8962      	ldrh	r2, [r4, #10]
    62b2:	2a00      	cmp	r2, #0
    62b4:	d052      	beq.n	635c <le_ltk_request+0xf0>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    62b6:	b16b      	cbz	r3, 62d4 <le_ltk_request+0x68>
    62b8:	899a      	ldrh	r2, [r3, #12]
    62ba:	f012 0f01 	tst.w	r2, #1
    62be:	d009      	beq.n	62d4 <le_ltk_request+0x68>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    62c0:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
    62c4:	f8d4 6002 	ldr.w	r6, [r4, #2]
    62c8:	f8d4 7006 	ldr.w	r7, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    62cc:	42b9      	cmp	r1, r7
    62ce:	bf08      	it	eq
    62d0:	42b0      	cmpeq	r0, r6
    62d2:	d06a      	beq.n	63aa <le_ltk_request+0x13e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    62d4:	2102      	movs	r1, #2
    62d6:	f242 001b 	movw	r0, #8219	; 0x201b
    62da:	f7fe fd11 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    62de:	4606      	mov	r6, r0
    62e0:	b150      	cbz	r0, 62f8 <le_ltk_request+0x8c>
	cp = net_buf_add(buf, sizeof(*cp));
    62e2:	2102      	movs	r1, #2
    62e4:	3008      	adds	r0, #8
    62e6:	f014 fd65 	bl	1adb4 <net_buf_simple_add>
	cp->handle = evt->handle;
    62ea:	8823      	ldrh	r3, [r4, #0]
    62ec:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    62ee:	4631      	mov	r1, r6
    62f0:	f242 001b 	movw	r0, #8219	; 0x201b
    62f4:	f7ff fa62 	bl	57bc <bt_hci_cmd_send>
	bt_conn_unref(conn);
    62f8:	4628      	mov	r0, r5
    62fa:	f001 f839 	bl	7370 <bt_conn_unref>
}
    62fe:	b005      	add	sp, #20
    6300:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    6302:	4669      	mov	r1, sp
    6304:	f006 ff14 	bl	d130 <bt_smp_get_tk>
    6308:	2800      	cmp	r0, #0
    630a:	d0c1      	beq.n	6290 <le_ltk_request+0x24>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    630c:	2112      	movs	r1, #18
    630e:	f242 001a 	movw	r0, #8218	; 0x201a
    6312:	f7fe fcf5 	bl	4d00 <bt_hci_cmd_create>
		if (!buf) {
    6316:	4606      	mov	r6, r0
    6318:	2800      	cmp	r0, #0
    631a:	d0ed      	beq.n	62f8 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    631c:	2112      	movs	r1, #18
    631e:	3008      	adds	r0, #8
    6320:	f014 fd48 	bl	1adb4 <net_buf_simple_add>
		cp->handle = evt->handle;
    6324:	8823      	ldrh	r3, [r4, #0]
    6326:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    632a:	2210      	movs	r2, #16
    632c:	4669      	mov	r1, sp
    632e:	f7f9 ffc7 	bl	2c0 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    6332:	4631      	mov	r1, r6
    6334:	f242 001a 	movw	r0, #8218	; 0x201a
    6338:	f7ff fa40 	bl	57bc <bt_hci_cmd_send>
		goto done;
    633c:	e7dc      	b.n	62f8 <le_ltk_request+0x8c>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    633e:	f105 0648 	add.w	r6, r5, #72	; 0x48
    6342:	4631      	mov	r1, r6
    6344:	2020      	movs	r0, #32
    6346:	f006 ff59 	bl	d1fc <bt_keys_find>
    634a:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    634c:	2800      	cmp	r0, #0
    634e:	d1a2      	bne.n	6296 <le_ltk_request+0x2a>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    6350:	4631      	mov	r1, r6
    6352:	2001      	movs	r0, #1
    6354:	f006 ff52 	bl	d1fc <bt_keys_find>
    6358:	6728      	str	r0, [r5, #112]	; 0x70
    635a:	e79c      	b.n	6296 <le_ltk_request+0x2a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    635c:	2112      	movs	r1, #18
    635e:	f242 001a 	movw	r0, #8218	; 0x201a
    6362:	f7fe fccd 	bl	4d00 <bt_hci_cmd_create>
		if (!buf) {
    6366:	4606      	mov	r6, r0
    6368:	2800      	cmp	r0, #0
    636a:	d0c5      	beq.n	62f8 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    636c:	2112      	movs	r1, #18
    636e:	3008      	adds	r0, #8
    6370:	f014 fd20 	bl	1adb4 <net_buf_simple_add>
		cp->handle = evt->handle;
    6374:	8823      	ldrh	r3, [r4, #0]
    6376:	4604      	mov	r4, r0
    6378:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    637c:	6f29      	ldr	r1, [r5, #112]	; 0x70
    637e:	79ca      	ldrb	r2, [r1, #7]
    6380:	311a      	adds	r1, #26
    6382:	4620      	mov	r0, r4
    6384:	f7f9 ff9c 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    6388:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    638a:	79d8      	ldrb	r0, [r3, #7]
    638c:	280f      	cmp	r0, #15
    638e:	d905      	bls.n	639c <le_ltk_request+0x130>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    6390:	4631      	mov	r1, r6
    6392:	f242 001a 	movw	r0, #8218	; 0x201a
    6396:	f7ff fa11 	bl	57bc <bt_hci_cmd_send>
		goto done;
    639a:	e7ad      	b.n	62f8 <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    639c:	f1c0 0210 	rsb	r2, r0, #16
    63a0:	2100      	movs	r1, #0
    63a2:	4420      	add	r0, r4
    63a4:	f024 fab8 	bl	2a918 <memset>
    63a8:	e7f2      	b.n	6390 <le_ltk_request+0x124>
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
    63aa:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
    63ae:	8963      	ldrh	r3, [r4, #10]
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    63b0:	429a      	cmp	r2, r3
    63b2:	d18f      	bne.n	62d4 <le_ltk_request+0x68>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    63b4:	2112      	movs	r1, #18
    63b6:	f242 001a 	movw	r0, #8218	; 0x201a
    63ba:	f7fe fca1 	bl	4d00 <bt_hci_cmd_create>
		if (!buf) {
    63be:	4606      	mov	r6, r0
    63c0:	2800      	cmp	r0, #0
    63c2:	d099      	beq.n	62f8 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    63c4:	2112      	movs	r1, #18
    63c6:	3008      	adds	r0, #8
    63c8:	f014 fcf4 	bl	1adb4 <net_buf_simple_add>
		cp->handle = evt->handle;
    63cc:	8823      	ldrh	r3, [r4, #0]
    63ce:	4604      	mov	r4, r0
    63d0:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    63d4:	6f29      	ldr	r1, [r5, #112]	; 0x70
    63d6:	79ca      	ldrb	r2, [r1, #7]
    63d8:	317a      	adds	r1, #122	; 0x7a
    63da:	4620      	mov	r0, r4
    63dc:	f7f9 ff70 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    63e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    63e2:	79d8      	ldrb	r0, [r3, #7]
    63e4:	280f      	cmp	r0, #15
    63e6:	d905      	bls.n	63f4 <le_ltk_request+0x188>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    63e8:	4631      	mov	r1, r6
    63ea:	f242 001a 	movw	r0, #8218	; 0x201a
    63ee:	f7ff f9e5 	bl	57bc <bt_hci_cmd_send>
		goto done;
    63f2:	e781      	b.n	62f8 <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    63f4:	f1c0 0210 	rsb	r2, r0, #16
    63f8:	2100      	movs	r1, #0
    63fa:	4420      	add	r0, r4
    63fc:	f024 fa8c 	bl	2a918 <memset>
    6400:	e7f2      	b.n	63e8 <le_ltk_request+0x17c>
	...

00006404 <le_ltk_request>:
{
    6404:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6406:	4b15      	ldr	r3, [pc, #84]	; (645c <le_ltk_request+0x58>)
    6408:	e9d3 4500 	ldrd	r4, r5, [r3]
    640c:	2400      	movs	r4, #0
    640e:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    6412:	ea54 0305 	orrs.w	r3, r4, r5
    6416:	d008      	beq.n	642a <le_ltk_request+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    6418:	4b11      	ldr	r3, [pc, #68]	; (6460 <le_ltk_request+0x5c>)
    641a:	e9d3 4500 	ldrd	r4, r5, [r3]
    641e:	f004 0410 	and.w	r4, r4, #16
    6422:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6424:	ea54 0305 	orrs.w	r3, r4, r5
    6428:	d100      	bne.n	642c <le_ltk_request+0x28>
    642a:	bd70      	pop	{r4, r5, r6, pc}
    642c:	4613      	mov	r3, r2
    642e:	460d      	mov	r5, r1
    6430:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    6432:	220c      	movs	r2, #12
    6434:	2105      	movs	r1, #5
    6436:	4618      	mov	r0, r3
    6438:	f007 f862 	bl	d500 <meta_evt>
    643c:	4606      	mov	r6, r0
	sep->handle = sys_cpu_to_le16(handle);
    643e:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    6442:	2208      	movs	r2, #8
    6444:	1d21      	adds	r1, r4, #4
    6446:	f7f9 ff3b 	bl	2c0 <memcpy>
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    644a:	2202      	movs	r2, #2
    644c:	f104 010c 	add.w	r1, r4, #12
    6450:	f106 000a 	add.w	r0, r6, #10
    6454:	f7f9 ff34 	bl	2c0 <memcpy>
    6458:	e7e7      	b.n	642a <le_ltk_request+0x26>
    645a:	bf00      	nop
    645c:	2000bc70 	.word	0x2000bc70
    6460:	2000bc78 	.word	0x2000bc78

00006464 <hci_le_meta_event>:
{
    6464:	b538      	push	{r3, r4, r5, lr}
    6466:	4604      	mov	r4, r0
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    6468:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*evt));
    646c:	2101      	movs	r1, #1
    646e:	f014 fcee 	bl	1ae4e <net_buf_simple_pull>
	switch (evt->subevent) {
    6472:	782b      	ldrb	r3, [r5, #0]
    6474:	3b01      	subs	r3, #1
    6476:	2b0b      	cmp	r3, #11
    6478:	d82e      	bhi.n	64d8 <hci_le_meta_event+0x74>
    647a:	e8df f003 	tbb	[pc, r3]
    647e:	2a06      	.short	0x2a06
    6480:	121e0e0a 	.word	0x121e0e0a
    6484:	2d262216 	.word	0x2d262216
    6488:	1a2d      	.short	0x1a2d
		le_conn_complete(buf);
    648a:	4620      	mov	r0, r4
    648c:	f7ff fc14 	bl	5cb8 <le_conn_complete>
		break;
    6490:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_update_complete(buf);
    6492:	4620      	mov	r0, r4
    6494:	f7fe fb52 	bl	4b3c <le_conn_update_complete>
		break;
    6498:	bd38      	pop	{r3, r4, r5, pc}
		le_remote_feat_complete(buf);
    649a:	4620      	mov	r0, r4
    649c:	f7ff fd66 	bl	5f6c <le_remote_feat_complete>
		break;
    64a0:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_param_req(buf);
    64a2:	4620      	mov	r0, r4
    64a4:	f7ff fe80 	bl	61a8 <le_conn_param_req>
		break;
    64a8:	bd38      	pop	{r3, r4, r5, pc}
		le_data_len_change(buf);
    64aa:	4620      	mov	r0, r4
    64ac:	f7fe fafc 	bl	4aa8 <le_data_len_change>
		break;
    64b0:	bd38      	pop	{r3, r4, r5, pc}
		le_phy_update_complete(buf);
    64b2:	4620      	mov	r0, r4
    64b4:	f7ff fdde 	bl	6074 <le_phy_update_complete>
		break;
    64b8:	bd38      	pop	{r3, r4, r5, pc}
		le_ltk_request(buf);
    64ba:	4620      	mov	r0, r4
    64bc:	f7ff fed6 	bl	626c <le_ltk_request>
		break;
    64c0:	bd38      	pop	{r3, r4, r5, pc}
		le_pkey_complete(buf);
    64c2:	4620      	mov	r0, r4
    64c4:	f7fe f9f0 	bl	48a8 <le_pkey_complete>
		break;
    64c8:	bd38      	pop	{r3, r4, r5, pc}
		le_dhkey_complete(buf);
    64ca:	4620      	mov	r0, r4
    64cc:	f7fe f916 	bl	46fc <le_dhkey_complete>
		break;
    64d0:	bd38      	pop	{r3, r4, r5, pc}
		le_adv_report(buf);
    64d2:	4620      	mov	r0, r4
    64d4:	f7ff fb3c 	bl	5b50 <le_adv_report>
    64d8:	bd38      	pop	{r3, r4, r5, pc}

000064da <hci_event>:
{
    64da:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    64dc:	6885      	ldr	r5, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    64de:	782b      	ldrb	r3, [r5, #0]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    64e0:	2b0e      	cmp	r3, #14
    64e2:	d316      	bcc.n	6512 <hci_event+0x38>
    64e4:	2b0f      	cmp	r3, #15
    64e6:	d901      	bls.n	64ec <hci_event+0x12>
    64e8:	2b13      	cmp	r3, #19
    64ea:	d112      	bne.n	6512 <hci_event+0x38>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
#endif
		return true;
    64ec:	2301      	movs	r3, #1
    64ee:	b993      	cbnz	r3, 6516 <hci_event+0x3c>
    64f0:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    64f2:	2102      	movs	r1, #2
    64f4:	3008      	adds	r0, #8
    64f6:	f014 fcaa 	bl	1ae4e <net_buf_simple_pull>
	switch (hdr->evt) {
    64fa:	782b      	ldrb	r3, [r5, #0]
    64fc:	2b08      	cmp	r3, #8
    64fe:	d019      	beq.n	6534 <hci_event+0x5a>
    6500:	d90f      	bls.n	6522 <hci_event+0x48>
    6502:	2b30      	cmp	r3, #48	; 0x30
    6504:	d01a      	beq.n	653c <hci_event+0x62>
    6506:	2b3e      	cmp	r3, #62	; 0x3e
    6508:	d110      	bne.n	652c <hci_event+0x52>
		hci_le_meta_event(buf);
    650a:	4620      	mov	r0, r4
    650c:	f7ff ffaa 	bl	6464 <hci_le_meta_event>
		break;
    6510:	e00c      	b.n	652c <hci_event+0x52>
	default:
		return false;
    6512:	2300      	movs	r3, #0
    6514:	e7eb      	b.n	64ee <hci_event+0x14>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    6516:	4040      	eors	r0, r0
    6518:	f380 8811 	msr	BASEPRI, r0
    651c:	f04f 0004 	mov.w	r0, #4
    6520:	df02      	svc	2
	switch (hdr->evt) {
    6522:	2b05      	cmp	r3, #5
    6524:	d102      	bne.n	652c <hci_event+0x52>
		hci_disconn_complete(buf);
    6526:	4620      	mov	r0, r4
    6528:	f7ff fa54 	bl	59d4 <hci_disconn_complete>
	net_buf_unref(buf);
    652c:	4620      	mov	r0, r4
    652e:	f014 fbf5 	bl	1ad1c <net_buf_unref>
    6532:	bd38      	pop	{r3, r4, r5, pc}
		hci_encrypt_change(buf);
    6534:	4620      	mov	r0, r4
    6536:	f7fe fa56 	bl	49e6 <hci_encrypt_change>
		break;
    653a:	e7f7      	b.n	652c <hci_event+0x52>
		hci_encrypt_key_refresh_complete(buf);
    653c:	4620      	mov	r0, r4
    653e:	f7fe fa7a 	bl	4a36 <hci_encrypt_key_refresh_complete>
		break;
    6542:	e7f3      	b.n	652c <hci_event+0x52>

00006544 <send_cmd>:
{
    6544:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6546:	2100      	movs	r1, #0
    6548:	4820      	ldr	r0, [pc, #128]	; (65cc <send_cmd+0x88>)
    654a:	f014 fbba 	bl	1acc2 <net_buf_get>
	BT_ASSERT(buf);
    654e:	b1d0      	cbz	r0, 6586 <send_cmd+0x42>
    6550:	4604      	mov	r4, r0
    6552:	4d1f      	ldr	r5, [pc, #124]	; (65d0 <send_cmd+0x8c>)
    6554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6558:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    655c:	f022 ff3c 	bl	293d8 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    6560:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    6564:	b120      	cbz	r0, 6570 <send_cmd+0x2c>
		net_buf_unref(bt_dev.sent_cmd);
    6566:	f014 fbd9 	bl	1ad1c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    656a:	2200      	movs	r2, #0
    656c:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    6570:	4620      	mov	r0, r4
    6572:	f014 fbef 	bl	1ad54 <net_buf_ref>
    6576:	4b16      	ldr	r3, [pc, #88]	; (65d0 <send_cmd+0x8c>)
    6578:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	err = bt_send(buf);
    657c:	4620      	mov	r0, r4
    657e:	f7ff f913 	bl	57a8 <bt_send>
	if (err) {
    6582:	b930      	cbnz	r0, 6592 <send_cmd+0x4e>
    6584:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    6586:	4040      	eors	r0, r0
    6588:	f380 8811 	msr	BASEPRI, r0
    658c:	f04f 0004 	mov.w	r0, #4
    6590:	df02      	svc	2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6592:	4d0f      	ldr	r5, [pc, #60]	; (65d0 <send_cmd+0x8c>)
    6594:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    6598:	f022 ff0b 	bl	293b2 <_impl_k_sem_give>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    659c:	f104 0310 	add.w	r3, r4, #16
    65a0:	89e2      	ldrh	r2, [r4, #14]
    65a2:	4413      	add	r3, r2
    65a4:	3303      	adds	r3, #3
    65a6:	f023 0303 	bic.w	r3, r3, #3
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    65aa:	2200      	movs	r2, #0
    65ac:	211f      	movs	r1, #31
    65ae:	8858      	ldrh	r0, [r3, #2]
    65b0:	f7fe fb10 	bl	4bd4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    65b4:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    65b8:	f014 fbb0 	bl	1ad1c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    65bc:	2300      	movs	r3, #0
    65be:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    65c2:	4620      	mov	r0, r4
    65c4:	f014 fbaa 	bl	1ad1c <net_buf_unref>
}
    65c8:	e7dc      	b.n	6584 <send_cmd+0x40>
    65ca:	bf00      	nop
    65cc:	2000ba54 	.word	0x2000ba54
    65d0:	2000b980 	.word	0x2000b980

000065d4 <process_events>:
{
    65d4:	b538      	push	{r3, r4, r5, lr}
    65d6:	4604      	mov	r4, r0
    65d8:	460d      	mov	r5, r1
	for (; count; ev++, count--) {
    65da:	e003      	b.n	65e4 <process_events+0x10>
				send_cmd();
    65dc:	f7ff ffb2 	bl	6544 <send_cmd>
	for (; count; ev++, count--) {
    65e0:	3414      	adds	r4, #20
    65e2:	3d01      	subs	r5, #1
    65e4:	b1a5      	cbz	r5, 6610 <process_events+0x3c>
		switch (ev->state) {
    65e6:	7b63      	ldrb	r3, [r4, #13]
    65e8:	091b      	lsrs	r3, r3, #4
    65ea:	2b04      	cmp	r3, #4
    65ec:	d1f8      	bne.n	65e0 <process_events+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    65ee:	7b23      	ldrb	r3, [r4, #12]
    65f0:	2b00      	cmp	r3, #0
    65f2:	d0f3      	beq.n	65dc <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    65f4:	2b01      	cmp	r3, #1
    65f6:	d006      	beq.n	6606 <process_events+0x32>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    65f8:	2b02      	cmp	r3, #2
    65fa:	d1f1      	bne.n	65e0 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    65fc:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
    65fe:	382c      	subs	r0, #44	; 0x2c
    6600:	f001 f9c8 	bl	7994 <bt_conn_process_tx>
    6604:	e7ec      	b.n	65e0 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    6606:	6920      	ldr	r0, [r4, #16]
					bt_conn_notify_tx(conn);
    6608:	381c      	subs	r0, #28
    660a:	f000 fd65 	bl	70d8 <bt_conn_notify_tx>
    660e:	e7e7      	b.n	65e0 <process_events+0xc>
}
    6610:	bd38      	pop	{r3, r4, r5, pc}
	...

00006614 <hci_tx_thread>:
{
    6614:	b538      	push	{r3, r4, r5, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    6616:	4c0f      	ldr	r4, [pc, #60]	; (6654 <hci_tx_thread+0x40>)
    6618:	7b63      	ldrb	r3, [r4, #13]
    661a:	f36f 1307 	bfc	r3, #4, #4
    661e:	7363      	strb	r3, [r4, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    6620:	f104 0014 	add.w	r0, r4, #20
    6624:	f000 feca 	bl	73bc <bt_conn_prepare_events>
    6628:	1c45      	adds	r5, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    662a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    662e:	4629      	mov	r1, r5
    6630:	4620      	mov	r0, r4
    6632:	f022 f81d 	bl	28670 <k_poll>
		BT_ASSERT(err == 0);
    6636:	b930      	cbnz	r0, 6646 <hci_tx_thread+0x32>
		process_events(events, ev_count);
    6638:	4629      	mov	r1, r5
    663a:	4806      	ldr	r0, [pc, #24]	; (6654 <hci_tx_thread+0x40>)
    663c:	f7ff ffca 	bl	65d4 <process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    6640:	f022 fd5e 	bl	29100 <_impl_k_yield>
    6644:	e7e7      	b.n	6616 <hci_tx_thread+0x2>
		BT_ASSERT(err == 0);
    6646:	4040      	eors	r0, r0
    6648:	f380 8811 	msr	BASEPRI, r0
    664c:	f04f 0004 	mov.w	r0, #4
    6650:	df02      	svc	2
    6652:	bf00      	nop
    6654:	2000ba68 	.word	0x2000ba68

00006658 <bt_recv>:
{
    6658:	b510      	push	{r4, lr}
    665a:	4604      	mov	r4, r0
	pool = net_buf_pool_get(buf->pool_id);
    665c:	7980      	ldrb	r0, [r0, #6]
    665e:	f014 fae3 	bl	1ac28 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    6662:	8ac3      	ldrh	r3, [r0, #22]
    6664:	2b03      	cmp	r3, #3
    6666:	d910      	bls.n	668a <bt_recv+0x32>
    6668:	f104 0310 	add.w	r3, r4, #16
    666c:	89e2      	ldrh	r2, [r4, #14]
    666e:	4413      	add	r3, r2
    6670:	3303      	adds	r3, #3
    6672:	f023 0303 	bic.w	r3, r3, #3
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    6676:	781b      	ldrb	r3, [r3, #0]
	switch (bt_buf_get_type(buf)) {
    6678:	2b01      	cmp	r3, #1
    667a:	d00c      	beq.n	6696 <bt_recv+0x3e>
    667c:	2b03      	cmp	r3, #3
    667e:	d10f      	bne.n	66a0 <bt_recv+0x48>
		hci_acl(buf);
    6680:	4620      	mov	r0, r4
    6682:	f7fe f949 	bl	4918 <hci_acl>
		return 0;
    6686:	2000      	movs	r0, #0
    6688:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    668a:	4620      	mov	r0, r4
    668c:	f014 fb46 	bl	1ad1c <net_buf_unref>
		return -EINVAL;
    6690:	f06f 0015 	mvn.w	r0, #21
    6694:	bd10      	pop	{r4, pc}
		hci_event(buf);
    6696:	4620      	mov	r0, r4
    6698:	f7ff ff1f 	bl	64da <hci_event>
		return 0;
    669c:	2000      	movs	r0, #0
    669e:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    66a0:	4620      	mov	r0, r4
    66a2:	f014 fb3b 	bl	1ad1c <net_buf_unref>
		return -EINVAL;
    66a6:	f06f 0015 	mvn.w	r0, #21
}
    66aa:	bd10      	pop	{r4, pc}

000066ac <bt_recv_prio>:
{
    66ac:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    66ae:	6885      	ldr	r5, [r0, #8]
    66b0:	f100 0310 	add.w	r3, r0, #16
    66b4:	89c2      	ldrh	r2, [r0, #14]
    66b6:	4413      	add	r3, r2
    66b8:	3303      	adds	r3, #3
    66ba:	f023 0303 	bic.w	r3, r3, #3
    66be:	781b      	ldrb	r3, [r3, #0]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    66c0:	2b01      	cmp	r3, #1
    66c2:	d120      	bne.n	6706 <bt_recv_prio+0x5a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    66c4:	8983      	ldrh	r3, [r0, #12]
    66c6:	2b01      	cmp	r3, #1
    66c8:	d923      	bls.n	6712 <bt_recv_prio+0x66>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    66ca:	782b      	ldrb	r3, [r5, #0]
	switch (evt) {
    66cc:	2b0e      	cmp	r3, #14
    66ce:	d326      	bcc.n	671e <bt_recv_prio+0x72>
    66d0:	2b0f      	cmp	r3, #15
    66d2:	d901      	bls.n	66d8 <bt_recv_prio+0x2c>
    66d4:	2b13      	cmp	r3, #19
    66d6:	d122      	bne.n	671e <bt_recv_prio+0x72>
		return true;
    66d8:	2301      	movs	r3, #1
    66da:	b313      	cbz	r3, 6722 <bt_recv_prio+0x76>
    66dc:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    66de:	2102      	movs	r1, #2
    66e0:	3008      	adds	r0, #8
    66e2:	f014 fbb4 	bl	1ae4e <net_buf_simple_pull>
	switch (hdr->evt) {
    66e6:	782b      	ldrb	r3, [r5, #0]
    66e8:	2b0f      	cmp	r3, #15
    66ea:	d028      	beq.n	673e <bt_recv_prio+0x92>
    66ec:	2b13      	cmp	r3, #19
    66ee:	d02a      	beq.n	6746 <bt_recv_prio+0x9a>
    66f0:	2b0e      	cmp	r3, #14
    66f2:	d01c      	beq.n	672e <bt_recv_prio+0x82>
		net_buf_unref(buf);
    66f4:	4620      	mov	r0, r4
    66f6:	f014 fb11 	bl	1ad1c <net_buf_unref>
		BT_ASSERT(0);
    66fa:	4040      	eors	r0, r0
    66fc:	f380 8811 	msr	BASEPRI, r0
    6700:	f04f 0004 	mov.w	r0, #4
    6704:	df02      	svc	2
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    6706:	4040      	eors	r0, r0
    6708:	f380 8811 	msr	BASEPRI, r0
    670c:	f04f 0004 	mov.w	r0, #4
    6710:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6712:	4040      	eors	r0, r0
    6714:	f380 8811 	msr	BASEPRI, r0
    6718:	f04f 0004 	mov.w	r0, #4
    671c:	df02      	svc	2
		return false;
    671e:	2300      	movs	r3, #0
    6720:	e7db      	b.n	66da <bt_recv_prio+0x2e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    6722:	4040      	eors	r0, r0
    6724:	f380 8811 	msr	BASEPRI, r0
    6728:	f04f 0004 	mov.w	r0, #4
    672c:	df02      	svc	2
		hci_cmd_complete(buf);
    672e:	4620      	mov	r0, r4
    6730:	f7fe fa70 	bl	4c14 <hci_cmd_complete>
	net_buf_unref(buf);
    6734:	4620      	mov	r0, r4
    6736:	f014 faf1 	bl	1ad1c <net_buf_unref>
}
    673a:	2000      	movs	r0, #0
    673c:	bd38      	pop	{r3, r4, r5, pc}
		hci_cmd_status(buf);
    673e:	4620      	mov	r0, r4
    6740:	f7fe fa80 	bl	4c44 <hci_cmd_status>
		break;
    6744:	e7f6      	b.n	6734 <bt_recv_prio+0x88>
		hci_num_completed_packets(buf);
    6746:	4620      	mov	r0, r4
    6748:	f7fe fa92 	bl	4c70 <hci_num_completed_packets>
		break;
    674c:	e7f2      	b.n	6734 <bt_recv_prio+0x88>
	...

00006750 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    6750:	4b0a      	ldr	r3, [pc, #40]	; (677c <bt_hci_driver_register+0x2c>)
    6752:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    6756:	b943      	cbnz	r3, 676a <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    6758:	6883      	ldr	r3, [r0, #8]
    675a:	b14b      	cbz	r3, 6770 <bt_hci_driver_register+0x20>
    675c:	68c3      	ldr	r3, [r0, #12]
    675e:	b153      	cbz	r3, 6776 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    6760:	4b06      	ldr	r3, [pc, #24]	; (677c <bt_hci_driver_register+0x2c>)
    6762:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
	return 0;
    6766:	2000      	movs	r0, #0
    6768:	4770      	bx	lr
		return -EALREADY;
    676a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    676e:	4770      	bx	lr
		return -EINVAL;
    6770:	f06f 0015 	mvn.w	r0, #21
    6774:	4770      	bx	lr
    6776:	f06f 0015 	mvn.w	r0, #21
}
    677a:	4770      	bx	lr
    677c:	2000b980 	.word	0x2000b980

00006780 <bt_enable>:
{
    6780:	b530      	push	{r4, r5, lr}
    6782:	b087      	sub	sp, #28
	if (!bt_dev.drv) {
    6784:	4b29      	ldr	r3, [pc, #164]	; (682c <bt_enable+0xac>)
    6786:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    678a:	2b00      	cmp	r3, #0
    678c:	d047      	beq.n	681e <bt_enable+0x9e>
    678e:	4b28      	ldr	r3, [pc, #160]	; (6830 <bt_enable+0xb0>)
    6790:	f3bf 8f5b 	dmb	ish
    6794:	e853 2f00 	ldrex	r2, [r3]
    6798:	f042 0101 	orr.w	r1, r2, #1
    679c:	e843 1400 	strex	r4, r1, [r3]
    67a0:	2c00      	cmp	r4, #0
    67a2:	d1f7      	bne.n	6794 <bt_enable+0x14>
    67a4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    67a8:	f012 0f01 	tst.w	r2, #1
    67ac:	d13a      	bne.n	6824 <bt_enable+0xa4>
    67ae:	4604      	mov	r4, r0
	ready_cb = cb;
    67b0:	4b20      	ldr	r3, [pc, #128]	; (6834 <bt_enable+0xb4>)
    67b2:	6018      	str	r0, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    67b4:	2300      	movs	r3, #0
    67b6:	9305      	str	r3, [sp, #20]
    67b8:	9304      	str	r3, [sp, #16]
    67ba:	f06f 0208 	mvn.w	r2, #8
    67be:	9203      	str	r2, [sp, #12]
    67c0:	9302      	str	r3, [sp, #8]
    67c2:	9301      	str	r3, [sp, #4]
    67c4:	9300      	str	r3, [sp, #0]
    67c6:	4b1c      	ldr	r3, [pc, #112]	; (6838 <bt_enable+0xb8>)
    67c8:	f44f 7220 	mov.w	r2, #640	; 0x280
    67cc:	491b      	ldr	r1, [pc, #108]	; (683c <bt_enable+0xbc>)
    67ce:	481c      	ldr	r0, [pc, #112]	; (6840 <bt_enable+0xc0>)
    67d0:	f023 f86e 	bl	298b0 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    67d4:	4b15      	ldr	r3, [pc, #84]	; (682c <bt_enable+0xac>)
    67d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    67da:	689b      	ldr	r3, [r3, #8]
    67dc:	4798      	blx	r3
	if (err) {
    67de:	4605      	mov	r5, r0
    67e0:	b980      	cbnz	r0, 6804 <bt_enable+0x84>
	if (!cb) {
    67e2:	b194      	cbz	r4, 680a <bt_enable+0x8a>
    67e4:	4b17      	ldr	r3, [pc, #92]	; (6844 <bt_enable+0xc4>)
    67e6:	f3bf 8f5b 	dmb	ish
    67ea:	e853 2f00 	ldrex	r2, [r3]
    67ee:	f042 0101 	orr.w	r1, r2, #1
    67f2:	e843 1000 	strex	r0, r1, [r3]
    67f6:	2800      	cmp	r0, #0
    67f8:	d1f7      	bne.n	67ea <bt_enable+0x6a>
    67fa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    67fe:	f012 0f01 	tst.w	r2, #1
    6802:	d006      	beq.n	6812 <bt_enable+0x92>
}
    6804:	4628      	mov	r0, r5
    6806:	b007      	add	sp, #28
    6808:	bd30      	pop	{r4, r5, pc}
		return bt_init();
    680a:	f7ff f8bb 	bl	5984 <bt_init>
    680e:	4605      	mov	r5, r0
    6810:	e7f8      	b.n	6804 <bt_enable+0x84>
		k_queue_append(&work_q->queue, work);
    6812:	f1a3 0108 	sub.w	r1, r3, #8
    6816:	480c      	ldr	r0, [pc, #48]	; (6848 <bt_enable+0xc8>)
    6818:	f022 fa34 	bl	28c84 <k_queue_append>
    681c:	e7f2      	b.n	6804 <bt_enable+0x84>
		return -ENODEV;
    681e:	f06f 0512 	mvn.w	r5, #18
    6822:	e7ef      	b.n	6804 <bt_enable+0x84>
		return -EALREADY;
    6824:	f06f 0577 	mvn.w	r5, #119	; 0x77
    6828:	e7ec      	b.n	6804 <bt_enable+0x84>
    682a:	bf00      	nop
    682c:	2000b980 	.word	0x2000b980
    6830:	2000b9f0 	.word	0x2000b9f0
    6834:	20000428 	.word	0x20000428
    6838:	00006615 	.word	0x00006615
    683c:	20003d18 	.word	0x20003d18
    6840:	20000430 	.word	0x20000430
    6844:	2000b9ec 	.word	0x2000b9ec
    6848:	20002c78 	.word	0x20002c78

0000684c <bt_addr_le_is_bonded>:
{
    684c:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    684e:	f006 fd51 	bl	d2f4 <bt_keys_find_addr>
		return keys && keys->keys;
    6852:	b118      	cbz	r0, 685c <bt_addr_le_is_bonded+0x10>
    6854:	8983      	ldrh	r3, [r0, #12]
    6856:	b91b      	cbnz	r3, 6860 <bt_addr_le_is_bonded+0x14>
    6858:	2000      	movs	r0, #0
    685a:	bd08      	pop	{r3, pc}
    685c:	2000      	movs	r0, #0
    685e:	bd08      	pop	{r3, pc}
    6860:	2001      	movs	r0, #1
}
    6862:	bd08      	pop	{r3, pc}

00006864 <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    6864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6868:	4605      	mov	r5, r0
    686a:	460c      	mov	r4, r1
    686c:	4617      	mov	r7, r2
    686e:	461e      	mov	r6, r3
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
    6870:	f7fd ff88 	bl	4784 <valid_adv_param>
    6874:	2800      	cmp	r0, #0
    6876:	f000 808d 	beq.w	6994 <bt_le_adv_start+0x130>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    687a:	f3bf 8f5b 	dmb	ish
    687e:	4b4b      	ldr	r3, [pc, #300]	; (69ac <bt_le_adv_start+0x148>)
    6880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6882:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    6886:	f013 0f20 	tst.w	r3, #32
    688a:	f040 8086 	bne.w	699a <bt_le_adv_start+0x136>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    688e:	463a      	mov	r2, r7
    6890:	4621      	mov	r1, r4
    6892:	f242 0008 	movw	r0, #8200	; 0x2008
    6896:	f7fe fe52 	bl	553e <set_ad>
	if (err) {
    689a:	4604      	mov	r4, r0
    689c:	2800      	cmp	r0, #0
    689e:	d13b      	bne.n	6918 <bt_le_adv_start+0xb4>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    68a0:	2e00      	cmp	r6, #0
    68a2:	d03c      	beq.n	691e <bt_le_adv_start+0xba>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    68a4:	9a06      	ldr	r2, [sp, #24]
    68a6:	4631      	mov	r1, r6
    68a8:	f242 0009 	movw	r0, #8201	; 0x2009
    68ac:	f7fe fe47 	bl	553e <set_ad>
		if (err) {
    68b0:	4604      	mov	r4, r0
    68b2:	bb88      	cbnz	r0, 6918 <bt_le_adv_start+0xb4>
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    68b4:	210f      	movs	r1, #15
    68b6:	f242 0006 	movw	r0, #8198	; 0x2006
    68ba:	f7fe fa21 	bl	4d00 <bt_hci_cmd_create>
				sizeof(*set_param));
	if (!buf) {
    68be:	4680      	mov	r8, r0
    68c0:	2800      	cmp	r0, #0
    68c2:	d06d      	beq.n	69a0 <bt_le_adv_start+0x13c>
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    68c4:	210f      	movs	r1, #15
    68c6:	3008      	adds	r0, #8
    68c8:	f014 fa74 	bl	1adb4 <net_buf_simple_add>
    68cc:	4607      	mov	r7, r0

	memset(set_param, 0, sizeof(*set_param));
    68ce:	220f      	movs	r2, #15
    68d0:	2100      	movs	r1, #0
    68d2:	f024 f821 	bl	2a918 <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    68d6:	886b      	ldrh	r3, [r5, #2]
    68d8:	803b      	strh	r3, [r7, #0]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    68da:	88ab      	ldrh	r3, [r5, #4]
    68dc:	807b      	strh	r3, [r7, #2]
	set_param->channel_map  = 0x07;
    68de:	2307      	movs	r3, #7
    68e0:	737b      	strb	r3, [r7, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    68e2:	782b      	ldrb	r3, [r5, #0]
    68e4:	f013 0f01 	tst.w	r3, #1
    68e8:	d11e      	bne.n	6928 <bt_le_adv_start+0xc4>
			set_param->own_addr_type = bt_dev.id_addr.type;
		}

		set_param->type = BT_LE_ADV_IND;
	} else {
		if (param->own_addr) {
    68ea:	68a8      	ldr	r0, [r5, #8]
    68ec:	b378      	cbz	r0, 694e <bt_le_adv_start+0xea>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    68ee:	7943      	ldrb	r3, [r0, #5]
    68f0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    68f4:	d157      	bne.n	69a6 <bt_le_adv_start+0x142>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    68f6:	f7fe fd0b 	bl	5310 <set_random_address>
    68fa:	4604      	mov	r4, r0
		} else {
			err = le_set_private_addr();
		}

		if (err) {
    68fc:	bb5c      	cbnz	r4, 6956 <bt_le_adv_start+0xf2>
			net_buf_unref(buf);
			return err;
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    68fe:	2301      	movs	r3, #1
    6900:	717b      	strb	r3, [r7, #5]

		if (sd) {
    6902:	b366      	cbz	r6, 695e <bt_le_adv_start+0xfa>
			set_param->type = BT_LE_ADV_SCAN_IND;
    6904:	2302      	movs	r3, #2
    6906:	713b      	strb	r3, [r7, #4]
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    6908:	2200      	movs	r2, #0
    690a:	4641      	mov	r1, r8
    690c:	f242 0006 	movw	r0, #8198	; 0x2006
    6910:	f7fe fa22 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    6914:	4604      	mov	r4, r0
    6916:	b328      	cbz	r0, 6964 <bt_le_adv_start+0x100>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    6918:	4620      	mov	r0, r4
    691a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    691e:	782b      	ldrb	r3, [r5, #0]
    6920:	f013 0f01 	tst.w	r3, #1
    6924:	d0c6      	beq.n	68b4 <bt_le_adv_start+0x50>
    6926:	e7bd      	b.n	68a4 <bt_le_adv_start+0x40>
    6928:	f3bf 8f5b 	dmb	ish
    692c:	4b1f      	ldr	r3, [pc, #124]	; (69ac <bt_le_adv_start+0x148>)
    692e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6930:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(bt_dev.flags,
    6934:	f013 0f04 	tst.w	r3, #4
    6938:	d105      	bne.n	6946 <bt_le_adv_start+0xe2>
			set_param->own_addr_type = bt_dev.id_addr.type;
    693a:	4b1c      	ldr	r3, [pc, #112]	; (69ac <bt_le_adv_start+0x148>)
    693c:	781b      	ldrb	r3, [r3, #0]
    693e:	717b      	strb	r3, [r7, #5]
		set_param->type = BT_LE_ADV_IND;
    6940:	2300      	movs	r3, #0
    6942:	713b      	strb	r3, [r7, #4]
    6944:	e7e0      	b.n	6908 <bt_le_adv_start+0xa4>
				set_random_address(&bt_dev.id_addr.a);
    6946:	481a      	ldr	r0, [pc, #104]	; (69b0 <bt_le_adv_start+0x14c>)
    6948:	f7fe fce2 	bl	5310 <set_random_address>
    694c:	e7f5      	b.n	693a <bt_le_adv_start+0xd6>
			err = le_set_private_addr();
    694e:	f7fe fd0f 	bl	5370 <le_set_private_addr>
    6952:	4604      	mov	r4, r0
    6954:	e7d2      	b.n	68fc <bt_le_adv_start+0x98>
			net_buf_unref(buf);
    6956:	4640      	mov	r0, r8
    6958:	f014 f9e0 	bl	1ad1c <net_buf_unref>
			return err;
    695c:	e7dc      	b.n	6918 <bt_le_adv_start+0xb4>
			set_param->type = BT_LE_ADV_NONCONN_IND;
    695e:	2303      	movs	r3, #3
    6960:	713b      	strb	r3, [r7, #4]
    6962:	e7d1      	b.n	6908 <bt_le_adv_start+0xa4>
	err = set_advertise_enable(true);
    6964:	2001      	movs	r0, #1
    6966:	f7fe fd71 	bl	544c <set_advertise_enable>
	if (err) {
    696a:	4604      	mov	r4, r0
    696c:	2800      	cmp	r0, #0
    696e:	d1d3      	bne.n	6918 <bt_le_adv_start+0xb4>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    6970:	782b      	ldrb	r3, [r5, #0]
    6972:	f013 0f02 	tst.w	r3, #2
    6976:	d1cf      	bne.n	6918 <bt_le_adv_start+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6978:	4b0e      	ldr	r3, [pc, #56]	; (69b4 <bt_le_adv_start+0x150>)
    697a:	f3bf 8f5b 	dmb	ish
    697e:	e853 2f00 	ldrex	r2, [r3]
    6982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    6986:	e843 2100 	strex	r1, r2, [r3]
    698a:	2900      	cmp	r1, #0
    698c:	d1f7      	bne.n	697e <bt_le_adv_start+0x11a>
    698e:	f3bf 8f5b 	dmb	ish
    6992:	e7c1      	b.n	6918 <bt_le_adv_start+0xb4>
		return -EINVAL;
    6994:	f06f 0415 	mvn.w	r4, #21
    6998:	e7be      	b.n	6918 <bt_le_adv_start+0xb4>
		return -EALREADY;
    699a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    699e:	e7bb      	b.n	6918 <bt_le_adv_start+0xb4>
		return -ENOBUFS;
    69a0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    69a4:	e7b8      	b.n	6918 <bt_le_adv_start+0xb4>
				return -EINVAL;
    69a6:	f06f 0415 	mvn.w	r4, #21
    69aa:	e7b5      	b.n	6918 <bt_le_adv_start+0xb4>
    69ac:	2000b980 	.word	0x2000b980
    69b0:	2000b981 	.word	0x2000b981
    69b4:	2000b9f0 	.word	0x2000b9f0

000069b8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    69b8:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    69ba:	4b16      	ldr	r3, [pc, #88]	; (6a14 <bt_le_adv_stop+0x5c>)
    69bc:	f103 0270 	add.w	r2, r3, #112	; 0x70
    69c0:	f3bf 8f5b 	dmb	ish
    69c4:	e852 1f00 	ldrex	r1, [r2]
    69c8:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    69cc:	e842 1000 	strex	r0, r1, [r2]
    69d0:	2800      	cmp	r0, #0
    69d2:	d1f7      	bne.n	69c4 <bt_le_adv_stop+0xc>
    69d4:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    69d8:	f3bf 8f5b 	dmb	ish
    69dc:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    69de:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    69e2:	f3c4 1440 	ubfx	r4, r4, #5, #1
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    69e6:	b90c      	cbnz	r4, 69ec <bt_le_adv_stop+0x34>
			le_set_private_addr();
		}
	}

	return 0;
}
    69e8:	4620      	mov	r0, r4
    69ea:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    69ec:	2000      	movs	r0, #0
    69ee:	f7fe fd2d 	bl	544c <set_advertise_enable>
	if (err) {
    69f2:	4604      	mov	r4, r0
    69f4:	2800      	cmp	r0, #0
    69f6:	d1f7      	bne.n	69e8 <bt_le_adv_stop+0x30>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    69f8:	f3bf 8f5b 	dmb	ish
    69fc:	4b05      	ldr	r3, [pc, #20]	; (6a14 <bt_le_adv_stop+0x5c>)
    69fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6a00:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    6a04:	f3c3 2340 	ubfx	r3, r3, #9, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    6a08:	b90b      	cbnz	r3, 6a0e <bt_le_adv_stop+0x56>
	return 0;
    6a0a:	461c      	mov	r4, r3
    6a0c:	e7ec      	b.n	69e8 <bt_le_adv_stop+0x30>
			le_set_private_addr();
    6a0e:	f7fe fcaf 	bl	5370 <le_set_private_addr>
    6a12:	e7e9      	b.n	69e8 <bt_le_adv_stop+0x30>
    6a14:	2000b980 	.word	0x2000b980

00006a18 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    6a18:	b538      	push	{r3, r4, r5, lr}
    6a1a:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    6a1c:	4808      	ldr	r0, [pc, #32]	; (6a40 <bt_buf_get_rx+0x28>)
    6a1e:	f014 f90f 	bl	1ac40 <net_buf_alloc>
#endif

	if (buf) {
    6a22:	4604      	mov	r4, r0
    6a24:	b150      	cbz	r0, 6a3c <bt_buf_get_rx+0x24>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    6a26:	2100      	movs	r1, #0
    6a28:	f014 f965 	bl	1acf6 <net_buf_reserve>
    6a2c:	f104 0310 	add.w	r3, r4, #16
    6a30:	89e2      	ldrh	r2, [r4, #14]
    6a32:	4413      	add	r3, r2
    6a34:	3303      	adds	r3, #3
    6a36:	f023 0303 	bic.w	r3, r3, #3
	*(u8_t *)net_buf_user_data(buf) = type;
    6a3a:	701d      	strb	r5, [r3, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    6a3c:	4620      	mov	r0, r4
    6a3e:	bd38      	pop	{r3, r4, r5, pc}
    6a40:	2000d240 	.word	0x2000d240

00006a44 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    6a44:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6a46:	f04f 0320 	mov.w	r3, #32
    6a4a:	f3ef 8211 	mrs	r2, BASEPRI
    6a4e:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    6a52:	4b0f      	ldr	r3, [pc, #60]	; (6a90 <bt_buf_get_cmd_complete+0x4c>)
    6a54:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    6a58:	2500      	movs	r5, #0
    6a5a:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6a5e:	f382 8811 	msr	BASEPRI, r2
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    6a62:	b17c      	cbz	r4, 6a84 <bt_buf_get_cmd_complete+0x40>
    6a64:	f104 0310 	add.w	r3, r4, #16
    6a68:	89e2      	ldrh	r2, [r4, #14]
    6a6a:	4413      	add	r3, r2
    6a6c:	3303      	adds	r3, #3
    6a6e:	f023 0303 	bic.w	r3, r3, #3
    6a72:	2201      	movs	r2, #1
    6a74:	701a      	strb	r2, [r3, #0]
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    6a76:	4629      	mov	r1, r5
    6a78:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    6a7a:	4620      	mov	r0, r4
    6a7c:	f014 f93b 	bl	1acf6 <net_buf_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    6a80:	4620      	mov	r0, r4
    6a82:	bd38      	pop	{r3, r4, r5, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6a84:	4601      	mov	r1, r0
    6a86:	2001      	movs	r0, #1
    6a88:	f7ff ffc6 	bl	6a18 <bt_buf_get_rx>
    6a8c:	4604      	mov	r4, r0
    6a8e:	e7f7      	b.n	6a80 <bt_buf_get_cmd_complete+0x3c>
    6a90:	2000b980 	.word	0x2000b980

00006a94 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    6a94:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    6a96:	4b29      	ldr	r3, [pc, #164]	; (6b3c <bt_pub_key_gen+0xa8>)
    6a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    6a9c:	f003 0306 	and.w	r3, r3, #6
    6aa0:	2b06      	cmp	r3, #6
    6aa2:	d148      	bne.n	6b36 <bt_pub_key_gen+0xa2>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    6aa4:	4b26      	ldr	r3, [pc, #152]	; (6b40 <bt_pub_key_gen+0xac>)
    6aa6:	681a      	ldr	r2, [r3, #0]
    6aa8:	6042      	str	r2, [r0, #4]
	pub_key_cb = new_cb;
    6aaa:	6018      	str	r0, [r3, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6aac:	4b25      	ldr	r3, [pc, #148]	; (6b44 <bt_pub_key_gen+0xb0>)
    6aae:	f3bf 8f5b 	dmb	ish
    6ab2:	e853 2f00 	ldrex	r2, [r3]
    6ab6:	f042 0110 	orr.w	r1, r2, #16
    6aba:	e843 1400 	strex	r4, r1, [r3]
    6abe:	2c00      	cmp	r4, #0
    6ac0:	d1f7      	bne.n	6ab2 <bt_pub_key_gen+0x1e>
    6ac2:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6ac6:	f012 0f10 	tst.w	r2, #16
    6aca:	d002      	beq.n	6ad2 <bt_pub_key_gen+0x3e>
		return 0;
    6acc:	2600      	movs	r6, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    6ace:	4630      	mov	r0, r6
    6ad0:	bd70      	pop	{r4, r5, r6, pc}
    6ad2:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6ad4:	f3bf 8f5b 	dmb	ish
    6ad8:	e853 2f00 	ldrex	r2, [r3]
    6adc:	f022 0208 	bic.w	r2, r2, #8
    6ae0:	e843 2100 	strex	r1, r2, [r3]
    6ae4:	2900      	cmp	r1, #0
    6ae6:	d1f7      	bne.n	6ad8 <bt_pub_key_gen+0x44>
    6ae8:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    6aec:	2200      	movs	r2, #0
    6aee:	4611      	mov	r1, r2
    6af0:	f242 0025 	movw	r0, #8229	; 0x2025
    6af4:	f7fe f930 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    6af8:	4606      	mov	r6, r0
    6afa:	b910      	cbnz	r0, 6b02 <bt_pub_key_gen+0x6e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6afc:	4b10      	ldr	r3, [pc, #64]	; (6b40 <bt_pub_key_gen+0xac>)
    6afe:	681c      	ldr	r4, [r3, #0]
    6b00:	e011      	b.n	6b26 <bt_pub_key_gen+0x92>
    6b02:	4b10      	ldr	r3, [pc, #64]	; (6b44 <bt_pub_key_gen+0xb0>)
    6b04:	f3bf 8f5b 	dmb	ish
    6b08:	e853 2f00 	ldrex	r2, [r3]
    6b0c:	f022 0210 	bic.w	r2, r2, #16
    6b10:	e843 2100 	strex	r1, r2, [r3]
    6b14:	2900      	cmp	r1, #0
    6b16:	d1f7      	bne.n	6b08 <bt_pub_key_gen+0x74>
    6b18:	f3bf 8f5b 	dmb	ish
		pub_key_cb = NULL;
    6b1c:	2200      	movs	r2, #0
    6b1e:	4b08      	ldr	r3, [pc, #32]	; (6b40 <bt_pub_key_gen+0xac>)
    6b20:	601a      	str	r2, [r3, #0]
		return err;
    6b22:	e7d4      	b.n	6ace <bt_pub_key_gen+0x3a>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6b24:	6864      	ldr	r4, [r4, #4]
    6b26:	2c00      	cmp	r4, #0
    6b28:	d0d1      	beq.n	6ace <bt_pub_key_gen+0x3a>
		if (cb != new_cb) {
    6b2a:	42ac      	cmp	r4, r5
    6b2c:	d0fa      	beq.n	6b24 <bt_pub_key_gen+0x90>
			cb->func(NULL);
    6b2e:	6823      	ldr	r3, [r4, #0]
    6b30:	2000      	movs	r0, #0
    6b32:	4798      	blx	r3
    6b34:	e7f6      	b.n	6b24 <bt_pub_key_gen+0x90>
		return -ENOTSUP;
    6b36:	f06f 0685 	mvn.w	r6, #133	; 0x85
    6b3a:	e7c8      	b.n	6ace <bt_pub_key_gen+0x3a>
    6b3c:	2000b980 	.word	0x2000b980
    6b40:	20000424 	.word	0x20000424
    6b44:	2000b9f0 	.word	0x2000b9f0

00006b48 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    6b48:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6b4a:	4b21      	ldr	r3, [pc, #132]	; (6bd0 <bt_dh_key_gen+0x88>)
    6b4c:	681b      	ldr	r3, [r3, #0]
    6b4e:	bbab      	cbnz	r3, 6bbc <bt_dh_key_gen+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6b50:	f3bf 8f5b 	dmb	ish
    6b54:	4b1f      	ldr	r3, [pc, #124]	; (6bd4 <bt_dh_key_gen+0x8c>)
    6b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6b58:	f3bf 8f5b 	dmb	ish
    6b5c:	f013 0f10 	tst.w	r3, #16
    6b60:	d130      	bne.n	6bc4 <bt_dh_key_gen+0x7c>
    6b62:	f3bf 8f5b 	dmb	ish
    6b66:	4b1b      	ldr	r3, [pc, #108]	; (6bd4 <bt_dh_key_gen+0x8c>)
    6b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6b6a:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    6b6e:	f013 0f08 	tst.w	r3, #8
    6b72:	d02a      	beq.n	6bca <bt_dh_key_gen+0x82>
    6b74:	4604      	mov	r4, r0
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
    6b76:	4b16      	ldr	r3, [pc, #88]	; (6bd0 <bt_dh_key_gen+0x88>)
    6b78:	6019      	str	r1, [r3, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    6b7a:	2140      	movs	r1, #64	; 0x40
    6b7c:	f242 0026 	movw	r0, #8230	; 0x2026
    6b80:	f7fe f8be 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    6b84:	4605      	mov	r5, r0
    6b86:	b198      	cbz	r0, 6bb0 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    6b88:	2140      	movs	r1, #64	; 0x40
    6b8a:	3008      	adds	r0, #8
    6b8c:	f014 f912 	bl	1adb4 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    6b90:	2240      	movs	r2, #64	; 0x40
    6b92:	4621      	mov	r1, r4
    6b94:	f7f9 fb94 	bl	2c0 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    6b98:	2200      	movs	r2, #0
    6b9a:	4629      	mov	r1, r5
    6b9c:	f242 0026 	movw	r0, #8230	; 0x2026
    6ba0:	f7fe f8da 	bl	4d58 <bt_hci_cmd_send_sync>
	if (err) {
    6ba4:	4603      	mov	r3, r0
    6ba6:	b158      	cbz	r0, 6bc0 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    6ba8:	2100      	movs	r1, #0
    6baa:	4a09      	ldr	r2, [pc, #36]	; (6bd0 <bt_dh_key_gen+0x88>)
    6bac:	6011      	str	r1, [r2, #0]
		return err;
    6bae:	e007      	b.n	6bc0 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    6bb0:	2200      	movs	r2, #0
    6bb2:	4b07      	ldr	r3, [pc, #28]	; (6bd0 <bt_dh_key_gen+0x88>)
    6bb4:	601a      	str	r2, [r3, #0]
		return -ENOBUFS;
    6bb6:	f06f 0368 	mvn.w	r3, #104	; 0x68
    6bba:	e001      	b.n	6bc0 <bt_dh_key_gen+0x78>
		return -EBUSY;
    6bbc:	f06f 030f 	mvn.w	r3, #15
	}

	return 0;
}
    6bc0:	4618      	mov	r0, r3
    6bc2:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    6bc4:	f06f 030f 	mvn.w	r3, #15
    6bc8:	e7fa      	b.n	6bc0 <bt_dh_key_gen+0x78>
		return -EADDRNOTAVAIL;
    6bca:	f06f 037c 	mvn.w	r3, #124	; 0x7c
    6bce:	e7f7      	b.n	6bc0 <bt_dh_key_gen+0x78>
    6bd0:	200003e0 	.word	0x200003e0
    6bd4:	2000b980 	.word	0x2000b980

00006bd8 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    6bd8:	b538      	push	{r3, r4, r5, lr}
    6bda:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    6bdc:	4b06      	ldr	r3, [pc, #24]	; (6bf8 <notify_connected+0x20>)
    6bde:	681c      	ldr	r4, [r3, #0]
    6be0:	e000      	b.n	6be4 <notify_connected+0xc>
    6be2:	69a4      	ldr	r4, [r4, #24]
    6be4:	b134      	cbz	r4, 6bf4 <notify_connected+0x1c>
		if (cb->connected) {
    6be6:	6823      	ldr	r3, [r4, #0]
    6be8:	2b00      	cmp	r3, #0
    6bea:	d0fa      	beq.n	6be2 <notify_connected+0xa>
			cb->connected(conn, conn->err);
    6bec:	7ae9      	ldrb	r1, [r5, #11]
    6bee:	4628      	mov	r0, r5
    6bf0:	4798      	blx	r3
    6bf2:	e7f6      	b.n	6be2 <notify_connected+0xa>
		}
	}
}
    6bf4:	bd38      	pop	{r3, r4, r5, pc}
    6bf6:	bf00      	nop
    6bf8:	20000500 	.word	0x20000500

00006bfc <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
    6bfc:	b538      	push	{r3, r4, r5, lr}
    6bfe:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    6c00:	4b06      	ldr	r3, [pc, #24]	; (6c1c <notify_disconnected+0x20>)
    6c02:	681c      	ldr	r4, [r3, #0]
    6c04:	e000      	b.n	6c08 <notify_disconnected+0xc>
    6c06:	69a4      	ldr	r4, [r4, #24]
    6c08:	b134      	cbz	r4, 6c18 <notify_disconnected+0x1c>
		if (cb->disconnected) {
    6c0a:	6863      	ldr	r3, [r4, #4]
    6c0c:	2b00      	cmp	r3, #0
    6c0e:	d0fa      	beq.n	6c06 <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
    6c10:	7ae9      	ldrb	r1, [r5, #11]
    6c12:	4628      	mov	r0, r5
    6c14:	4798      	blx	r3
    6c16:	e7f6      	b.n	6c06 <notify_disconnected+0xa>
		}
	}
}
    6c18:	bd38      	pop	{r3, r4, r5, pc}
    6c1a:	bf00      	nop
    6c1c:	20000500 	.word	0x20000500

00006c20 <tx_free>:
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    6c20:	2300      	movs	r3, #0
    6c22:	6043      	str	r3, [r0, #4]
	node->next = list->head;
    6c24:	4b04      	ldr	r3, [pc, #16]	; (6c38 <tx_free+0x18>)
    6c26:	681a      	ldr	r2, [r3, #0]
    6c28:	6002      	str	r2, [r0, #0]
	list->head = node;
    6c2a:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
    6c2c:	685b      	ldr	r3, [r3, #4]
    6c2e:	b103      	cbz	r3, 6c32 <tx_free+0x12>
    6c30:	4770      	bx	lr
		list->tail = list->head;
    6c32:	4b01      	ldr	r3, [pc, #4]	; (6c38 <tx_free+0x18>)
    6c34:	6058      	str	r0, [r3, #4]
	sys_slist_prepend(&free_tx, &tx->node);
}
    6c36:	e7fb      	b.n	6c30 <tx_free+0x10>
    6c38:	200006a0 	.word	0x200006a0

00006c3c <add_pending_tx>:
		}
	}
}

static sys_snode_t *add_pending_tx(struct bt_conn *conn, bt_conn_tx_cb_t cb)
{
    6c3c:	b410      	push	{r4}
	sys_snode_t *node = list->head;
    6c3e:	4a0f      	ldr	r2, [pc, #60]	; (6c7c <add_pending_tx+0x40>)
    6c40:	6813      	ldr	r3, [r2, #0]
	list->head = node->next;
    6c42:	681c      	ldr	r4, [r3, #0]
    6c44:	6014      	str	r4, [r2, #0]
	if (list->tail == node) {
    6c46:	6852      	ldr	r2, [r2, #4]
    6c48:	4293      	cmp	r3, r2
    6c4a:	d011      	beq.n	6c70 <add_pending_tx+0x34>
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    6c4c:	6059      	str	r1, [r3, #4]
	__asm__ volatile(
    6c4e:	f04f 0220 	mov.w	r2, #32
    6c52:	f3ef 8111 	mrs	r1, BASEPRI
    6c56:	f382 8811 	msr	BASEPRI, r2
	node->next = NULL;
    6c5a:	2200      	movs	r2, #0
    6c5c:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    6c5e:	6982      	ldr	r2, [r0, #24]
    6c60:	b14a      	cbz	r2, 6c76 <add_pending_tx+0x3a>
		list->tail->next = node;
    6c62:	6013      	str	r3, [r2, #0]
		list->tail = node;
    6c64:	6183      	str	r3, [r0, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6c66:	f381 8811 	msr	BASEPRI, r1
	key = irq_lock();
	sys_slist_append(&conn->tx_pending, node);
	irq_unlock(key);

	return node;
}
    6c6a:	4618      	mov	r0, r3
    6c6c:	bc10      	pop	{r4}
    6c6e:	4770      	bx	lr
		list->tail = list->head;
    6c70:	4a02      	ldr	r2, [pc, #8]	; (6c7c <add_pending_tx+0x40>)
    6c72:	6054      	str	r4, [r2, #4]
    6c74:	e7ea      	b.n	6c4c <add_pending_tx+0x10>
		list->tail = node;
    6c76:	6183      	str	r3, [r0, #24]
		list->head = node;
    6c78:	6143      	str	r3, [r0, #20]
    6c7a:	e7f4      	b.n	6c66 <add_pending_tx+0x2a>
    6c7c:	200006a0 	.word	0x200006a0

00006c80 <remove_pending_tx>:

static void remove_pending_tx(struct bt_conn *conn, sys_snode_t *node)
{
    6c80:	b510      	push	{r4, lr}
	__asm__ volatile(
    6c82:	f04f 0320 	mov.w	r3, #32
    6c86:	f3ef 8411 	mrs	r4, BASEPRI
    6c8a:	f383 8811 	msr	BASEPRI, r3
	return list->head;
    6c8e:	6943      	ldr	r3, [r0, #20]
	sys_snode_t *prev = NULL;
    6c90:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    6c92:	b163      	cbz	r3, 6cae <remove_pending_tx+0x2e>
		if (test == node) {
    6c94:	4299      	cmp	r1, r3
    6c96:	d002      	beq.n	6c9e <remove_pending_tx+0x1e>
		prev = test;
    6c98:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    6c9a:	681b      	ldr	r3, [r3, #0]
    6c9c:	e7f9      	b.n	6c92 <remove_pending_tx+0x12>
	if (!prev_node) {
    6c9e:	b162      	cbz	r2, 6cba <remove_pending_tx+0x3a>
		prev_node->next = node->next;
    6ca0:	680b      	ldr	r3, [r1, #0]
    6ca2:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    6ca4:	6983      	ldr	r3, [r0, #24]
    6ca6:	4299      	cmp	r1, r3
    6ca8:	d00e      	beq.n	6cc8 <remove_pending_tx+0x48>
	node->next = NULL;
    6caa:	2300      	movs	r3, #0
    6cac:	600b      	str	r3, [r1, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6cae:	f384 8811 	msr	BASEPRI, r4

	key = irq_lock();
	sys_slist_find_and_remove(&conn->tx_pending, node);
	irq_unlock(key);

	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    6cb2:	4608      	mov	r0, r1
    6cb4:	f7ff ffb4 	bl	6c20 <tx_free>
    6cb8:	bd10      	pop	{r4, pc}
		list->head = node->next;
    6cba:	680b      	ldr	r3, [r1, #0]
    6cbc:	6143      	str	r3, [r0, #20]
		if (list->tail == node) {
    6cbe:	6982      	ldr	r2, [r0, #24]
    6cc0:	4291      	cmp	r1, r2
    6cc2:	d1f2      	bne.n	6caa <remove_pending_tx+0x2a>
			list->tail = list->head;
    6cc4:	6183      	str	r3, [r0, #24]
    6cc6:	e7f0      	b.n	6caa <remove_pending_tx+0x2a>
			list->tail = prev_node;
    6cc8:	6182      	str	r2, [r0, #24]
    6cca:	e7ee      	b.n	6caa <remove_pending_tx+0x2a>

00006ccc <bt_conn_set_param_le>:

#if defined(CONFIG_BT_CENTRAL)
static void bt_conn_set_param_le(struct bt_conn *conn,
				 const struct bt_le_conn_param *param)
{
	conn->le.interval_max = param->interval_max;
    6ccc:	884b      	ldrh	r3, [r1, #2]
    6cce:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	conn->le.latency = param->latency;
    6cd2:	888b      	ldrh	r3, [r1, #4]
    6cd4:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
	conn->le.timeout = param->timeout;
    6cd8:	88cb      	ldrh	r3, [r1, #6]
    6cda:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    6cde:	4770      	bx	lr

00006ce0 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
    6ce0:	89c3      	ldrh	r3, [r0, #14]
    6ce2:	b903      	cbnz	r3, 6ce6 <bt_conn_reset_rx_state+0x6>
    6ce4:	4770      	bx	lr
{
    6ce6:	b510      	push	{r4, lr}
    6ce8:	4604      	mov	r4, r0
	net_buf_unref(conn->rx);
    6cea:	6900      	ldr	r0, [r0, #16]
    6cec:	f014 f816 	bl	1ad1c <net_buf_unref>
	conn->rx = NULL;
    6cf0:	2300      	movs	r3, #0
    6cf2:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    6cf4:	81e3      	strh	r3, [r4, #14]
    6cf6:	bd10      	pop	{r4, pc}

00006cf8 <conn_new>:
{
    6cf8:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6cfa:	2300      	movs	r3, #0
    6cfc:	b1ab      	cbz	r3, 6d2a <conn_new+0x32>
	struct bt_conn *conn = NULL;
    6cfe:	2400      	movs	r4, #0
	if (!conn) {
    6d00:	b18c      	cbz	r4, 6d26 <conn_new+0x2e>
	memset(conn, 0, sizeof(*conn));
    6d02:	229c      	movs	r2, #156	; 0x9c
    6d04:	2100      	movs	r1, #0
    6d06:	4620      	mov	r0, r4
    6d08:	f023 fe06 	bl	2a918 <memset>
	atomic_set(&conn->ref, 1);
    6d0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6d10:	2201      	movs	r2, #1
    6d12:	f3bf 8f5b 	dmb	ish
    6d16:	e853 1f00 	ldrex	r1, [r3]
    6d1a:	e843 2000 	strex	r0, r2, [r3]
    6d1e:	2800      	cmp	r0, #0
    6d20:	d1f9      	bne.n	6d16 <conn_new+0x1e>
    6d22:	f3bf 8f5b 	dmb	ish
}
    6d26:	4620      	mov	r0, r4
    6d28:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    6d2a:	229c      	movs	r2, #156	; 0x9c
    6d2c:	fb02 f203 	mul.w	r2, r2, r3
    6d30:	3240      	adds	r2, #64	; 0x40
    6d32:	4907      	ldr	r1, [pc, #28]	; (6d50 <conn_new+0x58>)
    6d34:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6d36:	f3bf 8f5b 	dmb	ish
    6d3a:	6852      	ldr	r2, [r2, #4]
    6d3c:	f3bf 8f5b 	dmb	ish
    6d40:	b10a      	cbz	r2, 6d46 <conn_new+0x4e>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6d42:	3301      	adds	r3, #1
    6d44:	e7da      	b.n	6cfc <conn_new+0x4>
			conn = &conns[i];
    6d46:	229c      	movs	r2, #156	; 0x9c
    6d48:	fb02 1403 	mla	r4, r2, r3, r1
			break;
    6d4c:	e7d8      	b.n	6d00 <conn_new+0x8>
    6d4e:	bf00      	nop
    6d50:	20000514 	.word	0x20000514

00006d54 <bt_conn_get_pkts>:
}
    6d54:	4800      	ldr	r0, [pc, #0]	; (6d58 <bt_conn_get_pkts+0x4>)
    6d56:	4770      	bx	lr
    6d58:	2000ba0c 	.word	0x2000ba0c

00006d5c <process_unack_tx>:
{
    6d5c:	b510      	push	{r4, lr}
    6d5e:	4604      	mov	r4, r0
    6d60:	e009      	b.n	6d76 <process_unack_tx+0x1a>
    6d62:	f383 8811 	msr	BASEPRI, r3
		if (!node) {
    6d66:	b1b0      	cbz	r0, 6d96 <process_unack_tx+0x3a>
		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    6d68:	f7ff ff5a 	bl	6c20 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
    6d6c:	4620      	mov	r0, r4
    6d6e:	f7ff fff1 	bl	6d54 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6d72:	f022 fb1e 	bl	293b2 <_impl_k_sem_give>
	__asm__ volatile(
    6d76:	f04f 0220 	mov.w	r2, #32
    6d7a:	f3ef 8311 	mrs	r3, BASEPRI
    6d7e:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    6d82:	6960      	ldr	r0, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    6d84:	2800      	cmp	r0, #0
    6d86:	d0ec      	beq.n	6d62 <process_unack_tx+0x6>
	list->head = node->next;
    6d88:	6802      	ldr	r2, [r0, #0]
    6d8a:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    6d8c:	69a1      	ldr	r1, [r4, #24]
    6d8e:	4288      	cmp	r0, r1
    6d90:	d1e7      	bne.n	6d62 <process_unack_tx+0x6>
		list->tail = list->head;
    6d92:	61a2      	str	r2, [r4, #24]
    6d94:	e7e5      	b.n	6d62 <process_unack_tx+0x6>
    6d96:	bd10      	pop	{r4, pc}

00006d98 <notify_le_param_updated>:
{
    6d98:	b570      	push	{r4, r5, r6, lr}
    6d9a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6d9c:	4b08      	ldr	r3, [pc, #32]	; (6dc0 <notify_le_param_updated+0x28>)
    6d9e:	681c      	ldr	r4, [r3, #0]
    6da0:	e000      	b.n	6da4 <notify_le_param_updated+0xc>
    6da2:	69a4      	ldr	r4, [r4, #24]
    6da4:	b15c      	cbz	r4, 6dbe <notify_le_param_updated+0x26>
		if (cb->le_param_updated) {
    6da6:	68e6      	ldr	r6, [r4, #12]
    6da8:	2e00      	cmp	r6, #0
    6daa:	d0fa      	beq.n	6da2 <notify_le_param_updated+0xa>
			cb->le_param_updated(conn, conn->le.interval,
    6dac:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    6db0:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    6db4:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    6db8:	4628      	mov	r0, r5
    6dba:	47b0      	blx	r6
    6dbc:	e7f1      	b.n	6da2 <notify_le_param_updated+0xa>
}
    6dbe:	bd70      	pop	{r4, r5, r6, pc}
    6dc0:	20000500 	.word	0x20000500

00006dc4 <le_param_req>:
{
    6dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6dc6:	4606      	mov	r6, r0
    6dc8:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6dca:	4608      	mov	r0, r1
    6dcc:	f7fe fc02 	bl	55d4 <bt_le_conn_params_valid>
    6dd0:	4607      	mov	r7, r0
    6dd2:	b198      	cbz	r0, 6dfc <le_param_req+0x38>
	for (cb = callback_list; cb; cb = cb->_next) {
    6dd4:	4b0a      	ldr	r3, [pc, #40]	; (6e00 <le_param_req+0x3c>)
    6dd6:	681c      	ldr	r4, [r3, #0]
    6dd8:	e000      	b.n	6ddc <le_param_req+0x18>
    6dda:	69a4      	ldr	r4, [r4, #24]
    6ddc:	b174      	cbz	r4, 6dfc <le_param_req+0x38>
		if (!cb->le_param_req) {
    6dde:	68a3      	ldr	r3, [r4, #8]
    6de0:	2b00      	cmp	r3, #0
    6de2:	d0fa      	beq.n	6dda <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
    6de4:	4629      	mov	r1, r5
    6de6:	4630      	mov	r0, r6
    6de8:	4798      	blx	r3
    6dea:	b130      	cbz	r0, 6dfa <le_param_req+0x36>
		if (!bt_le_conn_params_valid(param)) {
    6dec:	4628      	mov	r0, r5
    6dee:	f7fe fbf1 	bl	55d4 <bt_le_conn_params_valid>
    6df2:	2800      	cmp	r0, #0
    6df4:	d1f1      	bne.n	6dda <le_param_req+0x16>
			return false;
    6df6:	4607      	mov	r7, r0
    6df8:	e000      	b.n	6dfc <le_param_req+0x38>
			return false;
    6dfa:	4607      	mov	r7, r0
}
    6dfc:	4638      	mov	r0, r7
    6dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e00:	20000500 	.word	0x20000500

00006e04 <bt_conn_identity_resolved>:
{
    6e04:	b570      	push	{r4, r5, r6, lr}
    6e06:	4605      	mov	r5, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6e08:	78c3      	ldrb	r3, [r0, #3]
    6e0a:	b923      	cbnz	r3, 6e16 <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
    6e0c:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    6e10:	4b08      	ldr	r3, [pc, #32]	; (6e34 <bt_conn_identity_resolved+0x30>)
    6e12:	681c      	ldr	r4, [r3, #0]
    6e14:	e003      	b.n	6e1e <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
    6e16:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    6e1a:	e7f9      	b.n	6e10 <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
    6e1c:	69a4      	ldr	r4, [r4, #24]
    6e1e:	b144      	cbz	r4, 6e32 <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
    6e20:	6923      	ldr	r3, [r4, #16]
    6e22:	2b00      	cmp	r3, #0
    6e24:	d0fa      	beq.n	6e1c <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    6e26:	f105 0248 	add.w	r2, r5, #72	; 0x48
    6e2a:	4631      	mov	r1, r6
    6e2c:	4628      	mov	r0, r5
    6e2e:	4798      	blx	r3
    6e30:	e7f4      	b.n	6e1c <bt_conn_identity_resolved+0x18>
}
    6e32:	bd70      	pop	{r4, r5, r6, pc}
    6e34:	20000500 	.word	0x20000500

00006e38 <bt_conn_le_start_encryption>:
{
    6e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e3c:	4680      	mov	r8, r0
    6e3e:	4617      	mov	r7, r2
    6e40:	461c      	mov	r4, r3
    6e42:	9d08      	ldr	r5, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    6e44:	211c      	movs	r1, #28
    6e46:	f242 0019 	movw	r0, #8217	; 0x2019
    6e4a:	f7fd ff59 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    6e4e:	b338      	cbz	r0, 6ea0 <bt_conn_le_start_encryption+0x68>
    6e50:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    6e52:	211c      	movs	r1, #28
    6e54:	3008      	adds	r0, #8
    6e56:	f013 ffad 	bl	1adb4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    6e5a:	f8b8 2000 	ldrh.w	r2, [r8]
    6e5e:	4603      	mov	r3, r0
    6e60:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    6e64:	f8c0 7002 	str.w	r7, [r0, #2]
    6e68:	605c      	str	r4, [r3, #4]
	cp->ediv = ediv;
    6e6a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    6e6e:	8143      	strh	r3, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    6e70:	f100 040c 	add.w	r4, r0, #12
    6e74:	462a      	mov	r2, r5
    6e76:	9907      	ldr	r1, [sp, #28]
    6e78:	4620      	mov	r0, r4
    6e7a:	f7f9 fa21 	bl	2c0 <memcpy>
	if (len < sizeof(cp->ltk)) {
    6e7e:	2d0f      	cmp	r5, #15
    6e80:	d907      	bls.n	6e92 <bt_conn_le_start_encryption+0x5a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    6e82:	2200      	movs	r2, #0
    6e84:	4631      	mov	r1, r6
    6e86:	f242 0019 	movw	r0, #8217	; 0x2019
    6e8a:	f7fd ff65 	bl	4d58 <bt_hci_cmd_send_sync>
    6e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    6e92:	f1c5 0210 	rsb	r2, r5, #16
    6e96:	2100      	movs	r1, #0
    6e98:	1960      	adds	r0, r4, r5
    6e9a:	f023 fd3d 	bl	2a918 <memset>
    6e9e:	e7f0      	b.n	6e82 <bt_conn_le_start_encryption+0x4a>
		return -ENOBUFS;
    6ea0:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006ea8 <start_security>:
{
    6ea8:	b530      	push	{r4, r5, lr}
    6eaa:	b085      	sub	sp, #20
    6eac:	4604      	mov	r4, r0
	switch (conn->role) {
    6eae:	78c3      	ldrb	r3, [r0, #3]
    6eb0:	b123      	cbz	r3, 6ebc <start_security+0x14>
    6eb2:	2b01      	cmp	r3, #1
    6eb4:	d052      	beq.n	6f5c <start_security+0xb4>
		return -EINVAL;
    6eb6:	f06f 0015 	mvn.w	r0, #21
    6eba:	e051      	b.n	6f60 <start_security+0xb8>
		if (!conn->le.keys) {
    6ebc:	6f03      	ldr	r3, [r0, #112]	; 0x70
    6ebe:	b353      	cbz	r3, 6f16 <start_security+0x6e>
		if (!conn->le.keys ||
    6ec0:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6ec2:	2b00      	cmp	r3, #0
    6ec4:	d036      	beq.n	6f34 <start_security+0x8c>
		    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
    6ec6:	899a      	ldrh	r2, [r3, #12]
		if (!conn->le.keys ||
    6ec8:	f012 0f24 	tst.w	r2, #36	; 0x24
    6ecc:	d032      	beq.n	6f34 <start_security+0x8c>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    6ece:	7a62      	ldrb	r2, [r4, #9]
    6ed0:	2a02      	cmp	r2, #2
    6ed2:	d833      	bhi.n	6f3c <start_security+0x94>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    6ed4:	7a63      	ldrb	r3, [r4, #9]
    6ed6:	2b03      	cmp	r3, #3
    6ed8:	d90d      	bls.n	6ef6 <start_security+0x4e>
		    !atomic_test_bit(conn->le.keys->flags,
    6eda:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6edc:	f3bf 8f5b 	dmb	ish
    6ee0:	689b      	ldr	r3, [r3, #8]
    6ee2:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    6ee6:	f013 0f01 	tst.w	r3, #1
    6eea:	d104      	bne.n	6ef6 <start_security+0x4e>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    6eec:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6eee:	899b      	ldrh	r3, [r3, #12]
				     BT_KEYS_AUTHENTICATED) &&
    6ef0:	f013 0f20 	tst.w	r3, #32
    6ef4:	d02e      	beq.n	6f54 <start_security+0xac>
						   conn->le.keys->ltk.rand,
    6ef6:	6f23      	ldr	r3, [r4, #112]	; 0x70
						   conn->le.keys->ltk.val,
    6ef8:	f103 021a 	add.w	r2, r3, #26
						   conn->le.keys->enc_size);
    6efc:	79dd      	ldrb	r5, [r3, #7]
		return bt_conn_le_start_encryption(conn,
    6efe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    6f02:	9502      	str	r5, [sp, #8]
    6f04:	9201      	str	r2, [sp, #4]
    6f06:	8b1b      	ldrh	r3, [r3, #24]
    6f08:	9300      	str	r3, [sp, #0]
    6f0a:	4602      	mov	r2, r0
    6f0c:	460b      	mov	r3, r1
    6f0e:	4620      	mov	r0, r4
    6f10:	f7ff ff92 	bl	6e38 <bt_conn_le_start_encryption>
    6f14:	e024      	b.n	6f60 <start_security+0xb8>
						     &conn->le.dst);
    6f16:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    6f1a:	4629      	mov	r1, r5
    6f1c:	2020      	movs	r0, #32
    6f1e:	f006 f96d 	bl	d1fc <bt_keys_find>
    6f22:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    6f24:	2800      	cmp	r0, #0
    6f26:	d1cb      	bne.n	6ec0 <start_security+0x18>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    6f28:	4629      	mov	r1, r5
    6f2a:	2004      	movs	r0, #4
    6f2c:	f006 f966 	bl	d1fc <bt_keys_find>
    6f30:	6720      	str	r0, [r4, #112]	; 0x70
    6f32:	e7c5      	b.n	6ec0 <start_security+0x18>
			return bt_smp_send_pairing_req(conn);
    6f34:	4620      	mov	r0, r4
    6f36:	f005 ff14 	bl	cd62 <bt_smp_send_pairing_req>
    6f3a:	e011      	b.n	6f60 <start_security+0xb8>
    6f3c:	f3bf 8f5b 	dmb	ish
    6f40:	689b      	ldr	r3, [r3, #8]
    6f42:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    6f46:	f013 0f01 	tst.w	r3, #1
    6f4a:	d1c3      	bne.n	6ed4 <start_security+0x2c>
			return bt_smp_send_pairing_req(conn);
    6f4c:	4620      	mov	r0, r4
    6f4e:	f005 ff08 	bl	cd62 <bt_smp_send_pairing_req>
    6f52:	e005      	b.n	6f60 <start_security+0xb8>
			return bt_smp_send_pairing_req(conn);
    6f54:	4620      	mov	r0, r4
    6f56:	f005 ff04 	bl	cd62 <bt_smp_send_pairing_req>
    6f5a:	e001      	b.n	6f60 <start_security+0xb8>
		return bt_smp_send_security_req(conn);
    6f5c:	f005 feae 	bl	ccbc <bt_smp_send_security_req>
}
    6f60:	b005      	add	sp, #20
    6f62:	bd30      	pop	{r4, r5, pc}

00006f64 <bt_conn_security_changed>:
{
    6f64:	b538      	push	{r3, r4, r5, lr}
    6f66:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6f68:	4b06      	ldr	r3, [pc, #24]	; (6f84 <bt_conn_security_changed+0x20>)
    6f6a:	681c      	ldr	r4, [r3, #0]
    6f6c:	e000      	b.n	6f70 <bt_conn_security_changed+0xc>
    6f6e:	69a4      	ldr	r4, [r4, #24]
    6f70:	b134      	cbz	r4, 6f80 <bt_conn_security_changed+0x1c>
		if (cb->security_changed) {
    6f72:	6963      	ldr	r3, [r4, #20]
    6f74:	2b00      	cmp	r3, #0
    6f76:	d0fa      	beq.n	6f6e <bt_conn_security_changed+0xa>
			cb->security_changed(conn, conn->sec_level);
    6f78:	7a29      	ldrb	r1, [r5, #8]
    6f7a:	4628      	mov	r0, r5
    6f7c:	4798      	blx	r3
    6f7e:	e7f6      	b.n	6f6e <bt_conn_security_changed+0xa>
}
    6f80:	bd38      	pop	{r3, r4, r5, pc}
    6f82:	bf00      	nop
    6f84:	20000500 	.word	0x20000500

00006f88 <bt_conn_security>:
	if (conn->state != BT_CONN_CONNECTED) {
    6f88:	7b03      	ldrb	r3, [r0, #12]
    6f8a:	2b03      	cmp	r3, #3
    6f8c:	d112      	bne.n	6fb4 <bt_conn_security+0x2c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    6f8e:	7a03      	ldrb	r3, [r0, #8]
    6f90:	428b      	cmp	r3, r1
    6f92:	d212      	bcs.n	6fba <bt_conn_security+0x32>
    6f94:	7a43      	ldrb	r3, [r0, #9]
    6f96:	4299      	cmp	r1, r3
    6f98:	d801      	bhi.n	6f9e <bt_conn_security+0x16>
		return 0;
    6f9a:	2300      	movs	r3, #0
    6f9c:	e00e      	b.n	6fbc <bt_conn_security+0x34>
{
    6f9e:	b510      	push	{r4, lr}
    6fa0:	4604      	mov	r4, r0
	conn->required_sec_level = sec;
    6fa2:	7241      	strb	r1, [r0, #9]
	err = start_security(conn);
    6fa4:	f7ff ff80 	bl	6ea8 <start_security>
	if (err) {
    6fa8:	4603      	mov	r3, r0
    6faa:	b108      	cbz	r0, 6fb0 <bt_conn_security+0x28>
		conn->required_sec_level = conn->sec_level;
    6fac:	7a22      	ldrb	r2, [r4, #8]
    6fae:	7262      	strb	r2, [r4, #9]
}
    6fb0:	4618      	mov	r0, r3
    6fb2:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    6fb4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    6fb8:	e000      	b.n	6fbc <bt_conn_security+0x34>
		return 0;
    6fba:	2300      	movs	r3, #0
}
    6fbc:	4618      	mov	r0, r3
    6fbe:	4770      	bx	lr

00006fc0 <bt_conn_cb_register>:
	cb->_next = callback_list;
    6fc0:	4b02      	ldr	r3, [pc, #8]	; (6fcc <bt_conn_cb_register+0xc>)
    6fc2:	681a      	ldr	r2, [r3, #0]
    6fc4:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    6fc6:	6018      	str	r0, [r3, #0]
    6fc8:	4770      	bx	lr
    6fca:	bf00      	nop
    6fcc:	20000500 	.word	0x20000500

00006fd0 <bt_conn_recv>:
{
    6fd0:	b570      	push	{r4, r5, r6, lr}
    6fd2:	4605      	mov	r5, r0
    6fd4:	460c      	mov	r4, r1
	switch (flags) {
    6fd6:	2a01      	cmp	r2, #1
    6fd8:	d01a      	beq.n	7010 <bt_conn_recv+0x40>
    6fda:	2a02      	cmp	r2, #2
    6fdc:	d149      	bne.n	7072 <bt_conn_recv+0xa2>
		hdr = (void *)buf->data;
    6fde:	688b      	ldr	r3, [r1, #8]
		len = sys_le16_to_cpu(hdr->len);
    6fe0:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    6fe2:	89c3      	ldrh	r3, [r0, #14]
    6fe4:	b97b      	cbnz	r3, 7006 <bt_conn_recv+0x36>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    6fe6:	89a3      	ldrh	r3, [r4, #12]
    6fe8:	1af3      	subs	r3, r6, r3
    6fea:	3304      	adds	r3, #4
    6fec:	b29b      	uxth	r3, r3
    6fee:	81eb      	strh	r3, [r5, #14]
		if (conn->rx_len) {
    6ff0:	b963      	cbnz	r3, 700c <bt_conn_recv+0x3c>
	hdr = (void *)buf->data;
    6ff2:	68a3      	ldr	r3, [r4, #8]
	len = sys_le16_to_cpu(hdr->len);
    6ff4:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    6ff6:	3304      	adds	r3, #4
    6ff8:	89a2      	ldrh	r2, [r4, #12]
    6ffa:	4293      	cmp	r3, r2
    6ffc:	d03f      	beq.n	707e <bt_conn_recv+0xae>
		net_buf_unref(buf);
    6ffe:	4620      	mov	r0, r4
    7000:	f013 fe8c 	bl	1ad1c <net_buf_unref>
		return;
    7004:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    7006:	f7ff fe6b 	bl	6ce0 <bt_conn_reset_rx_state>
    700a:	e7ec      	b.n	6fe6 <bt_conn_recv+0x16>
			conn->rx = buf;
    700c:	612c      	str	r4, [r5, #16]
			return;
    700e:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    7010:	89c3      	ldrh	r3, [r0, #14]
    7012:	b1db      	cbz	r3, 704c <bt_conn_recv+0x7c>
		if (buf->len > conn->rx_len) {
    7014:	898e      	ldrh	r6, [r1, #12]
    7016:	42b3      	cmp	r3, r6
    7018:	d31e      	bcc.n	7058 <bt_conn_recv+0x88>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    701a:	6900      	ldr	r0, [r0, #16]
    701c:	3008      	adds	r0, #8
    701e:	f013 ff32 	bl	1ae86 <net_buf_simple_tailroom>
    7022:	4286      	cmp	r6, r0
    7024:	d81e      	bhi.n	7064 <bt_conn_recv+0x94>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    7026:	6928      	ldr	r0, [r5, #16]
    7028:	89a2      	ldrh	r2, [r4, #12]
    702a:	68a1      	ldr	r1, [r4, #8]
    702c:	3008      	adds	r0, #8
    702e:	f013 fec7 	bl	1adc0 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    7032:	89a2      	ldrh	r2, [r4, #12]
    7034:	89eb      	ldrh	r3, [r5, #14]
    7036:	1a9b      	subs	r3, r3, r2
    7038:	81eb      	strh	r3, [r5, #14]
		net_buf_unref(buf);
    703a:	4620      	mov	r0, r4
    703c:	f013 fe6e 	bl	1ad1c <net_buf_unref>
		if (conn->rx_len) {
    7040:	89eb      	ldrh	r3, [r5, #14]
    7042:	bb03      	cbnz	r3, 7086 <bt_conn_recv+0xb6>
		buf = conn->rx;
    7044:	692c      	ldr	r4, [r5, #16]
		conn->rx = NULL;
    7046:	612b      	str	r3, [r5, #16]
		conn->rx_len = 0;
    7048:	81eb      	strh	r3, [r5, #14]
		break;
    704a:	e7d2      	b.n	6ff2 <bt_conn_recv+0x22>
			bt_conn_reset_rx_state(conn);
    704c:	f7ff fe48 	bl	6ce0 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    7050:	4620      	mov	r0, r4
    7052:	f013 fe63 	bl	1ad1c <net_buf_unref>
			return;
    7056:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    7058:	f7ff fe42 	bl	6ce0 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    705c:	4620      	mov	r0, r4
    705e:	f013 fe5d 	bl	1ad1c <net_buf_unref>
			return;
    7062:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    7064:	4628      	mov	r0, r5
    7066:	f7ff fe3b 	bl	6ce0 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    706a:	4620      	mov	r0, r4
    706c:	f013 fe56 	bl	1ad1c <net_buf_unref>
			return;
    7070:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_reset_rx_state(conn);
    7072:	f7ff fe35 	bl	6ce0 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    7076:	4620      	mov	r0, r4
    7078:	f013 fe50 	bl	1ad1c <net_buf_unref>
		return;
    707c:	bd70      	pop	{r4, r5, r6, pc}
	bt_l2cap_recv(conn, buf);
    707e:	4621      	mov	r1, r4
    7080:	4628      	mov	r0, r5
    7082:	f001 fd06 	bl	8a92 <bt_l2cap_recv>
    7086:	bd70      	pop	{r4, r5, r6, pc}

00007088 <bt_conn_send_cb>:
{
    7088:	b570      	push	{r4, r5, r6, lr}
    708a:	4605      	mov	r5, r0
    708c:	460c      	mov	r4, r1
    708e:	4616      	mov	r6, r2
	pool = net_buf_pool_get(buf->pool_id);
    7090:	7988      	ldrb	r0, [r1, #6]
    7092:	f013 fdc9 	bl	1ac28 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    7096:	8ac3      	ldrh	r3, [r0, #22]
    7098:	2b03      	cmp	r3, #3
    709a:	d911      	bls.n	70c0 <bt_conn_send_cb+0x38>
	if (conn->state != BT_CONN_CONNECTED) {
    709c:	7b2b      	ldrb	r3, [r5, #12]
    709e:	2b03      	cmp	r3, #3
    70a0:	d114      	bne.n	70cc <bt_conn_send_cb+0x44>
    70a2:	f104 0310 	add.w	r3, r4, #16
    70a6:	89e2      	ldrh	r2, [r4, #14]
    70a8:	4413      	add	r3, r2
    70aa:	3303      	adds	r3, #3
    70ac:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(buf)->cb = cb;
    70b0:	601e      	str	r6, [r3, #0]
	net_buf_put(&conn->tx_queue, buf);
    70b2:	4621      	mov	r1, r4
    70b4:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    70b8:	f013 fe22 	bl	1ad00 <net_buf_put>
	return 0;
    70bc:	2000      	movs	r0, #0
}
    70be:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    70c0:	4620      	mov	r0, r4
    70c2:	f013 fe2b 	bl	1ad1c <net_buf_unref>
		return -EINVAL;
    70c6:	f06f 0015 	mvn.w	r0, #21
    70ca:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    70cc:	4620      	mov	r0, r4
    70ce:	f013 fe25 	bl	1ad1c <net_buf_unref>
		return -ENOTCONN;
    70d2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    70d6:	bd70      	pop	{r4, r5, r6, pc}

000070d8 <bt_conn_notify_tx>:
{
    70d8:	b538      	push	{r3, r4, r5, lr}
    70da:	4605      	mov	r5, r0
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    70dc:	e002      	b.n	70e4 <bt_conn_notify_tx+0xc>
		tx_free(tx);
    70de:	4620      	mov	r0, r4
    70e0:	f7ff fd9e 	bl	6c20 <tx_free>
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    70e4:	2100      	movs	r1, #0
    70e6:	f105 001c 	add.w	r0, r5, #28
    70ea:	f021 fdf3 	bl	28cd4 <k_queue_get>
    70ee:	4604      	mov	r4, r0
    70f0:	b128      	cbz	r0, 70fe <bt_conn_notify_tx+0x26>
		if (tx->cb) {
    70f2:	6863      	ldr	r3, [r4, #4]
    70f4:	2b00      	cmp	r3, #0
    70f6:	d0f2      	beq.n	70de <bt_conn_notify_tx+0x6>
			tx->cb(conn);
    70f8:	4628      	mov	r0, r5
    70fa:	4798      	blx	r3
    70fc:	e7ef      	b.n	70de <bt_conn_notify_tx+0x6>
}
    70fe:	bd38      	pop	{r3, r4, r5, pc}

00007100 <notify_tx>:
{
    7100:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7102:	2400      	movs	r4, #0
    7104:	b104      	cbz	r4, 7108 <notify_tx+0x8>
}
    7106:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    7108:	239c      	movs	r3, #156	; 0x9c
    710a:	fb03 f304 	mul.w	r3, r3, r4
    710e:	3340      	adds	r3, #64	; 0x40
    7110:	4a0b      	ldr	r2, [pc, #44]	; (7140 <notify_tx+0x40>)
    7112:	4413      	add	r3, r2
    7114:	f3bf 8f5b 	dmb	ish
    7118:	685b      	ldr	r3, [r3, #4]
    711a:	f3bf 8f5b 	dmb	ish
    711e:	b13b      	cbz	r3, 7130 <notify_tx+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    7120:	239c      	movs	r3, #156	; 0x9c
    7122:	fb03 2304 	mla	r3, r3, r4, r2
    7126:	7b1b      	ldrb	r3, [r3, #12]
    7128:	3b03      	subs	r3, #3
    712a:	b2db      	uxtb	r3, r3
    712c:	2b01      	cmp	r3, #1
    712e:	d901      	bls.n	7134 <notify_tx+0x34>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7130:	3401      	adds	r4, #1
    7132:	e7e7      	b.n	7104 <notify_tx+0x4>
			bt_conn_notify_tx(&conns[i]);
    7134:	209c      	movs	r0, #156	; 0x9c
    7136:	fb00 2004 	mla	r0, r0, r4, r2
    713a:	f7ff ffcd 	bl	70d8 <bt_conn_notify_tx>
    713e:	e7f7      	b.n	7130 <notify_tx+0x30>
    7140:	20000514 	.word	0x20000514

00007144 <send_frag>:
{
    7144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7148:	4606      	mov	r6, r0
    714a:	460d      	mov	r5, r1
    714c:	4690      	mov	r8, r2
    714e:	461c      	mov	r4, r3
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    7150:	f7ff fe00 	bl	6d54 <bt_conn_get_pkts>
    7154:	4607      	mov	r7, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7156:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    715a:	f022 f93d 	bl	293d8 <_impl_k_sem_take>
	notify_tx();
    715e:	f7ff ffcf 	bl	7100 <notify_tx>
	if (conn->state != BT_CONN_CONNECTED) {
    7162:	7b33      	ldrb	r3, [r6, #12]
    7164:	2b03      	cmp	r3, #3
    7166:	d006      	beq.n	7176 <send_frag+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    7168:	4638      	mov	r0, r7
    716a:	f022 f922 	bl	293b2 <_impl_k_sem_give>
	if (always_consume) {
    716e:	bb4c      	cbnz	r4, 71c4 <send_frag+0x80>
}
    7170:	4620      	mov	r0, r4
    7172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_push(buf, sizeof(*hdr));
    7176:	2104      	movs	r1, #4
    7178:	f105 0008 	add.w	r0, r5, #8
    717c:	f013 fe51 	bl	1ae22 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    7180:	f9b6 3000 	ldrsh.w	r3, [r6]
    7184:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
    7188:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    718c:	89ab      	ldrh	r3, [r5, #12]
    718e:	3b04      	subs	r3, #4
    7190:	8043      	strh	r3, [r0, #2]
    7192:	f105 0310 	add.w	r3, r5, #16
    7196:	89ea      	ldrh	r2, [r5, #14]
    7198:	4413      	add	r3, r2
    719a:	3303      	adds	r3, #3
    719c:	f023 0303 	bic.w	r3, r3, #3
	cb = conn_tx(buf)->cb;
    71a0:	6819      	ldr	r1, [r3, #0]
    71a2:	2202      	movs	r2, #2
    71a4:	701a      	strb	r2, [r3, #0]
	node = add_pending_tx(conn, cb);
    71a6:	4630      	mov	r0, r6
    71a8:	f7ff fd48 	bl	6c3c <add_pending_tx>
    71ac:	4680      	mov	r8, r0
	err = bt_send(buf);
    71ae:	4628      	mov	r0, r5
    71b0:	f7fe fafa 	bl	57a8 <bt_send>
	if (err) {
    71b4:	b908      	cbnz	r0, 71ba <send_frag+0x76>
	return true;
    71b6:	2401      	movs	r4, #1
    71b8:	e7da      	b.n	7170 <send_frag+0x2c>
		remove_pending_tx(conn, node);
    71ba:	4641      	mov	r1, r8
    71bc:	4630      	mov	r0, r6
    71be:	f7ff fd5f 	bl	6c80 <remove_pending_tx>
		goto fail;
    71c2:	e7d1      	b.n	7168 <send_frag+0x24>
		net_buf_unref(buf);
    71c4:	4628      	mov	r0, r5
    71c6:	f013 fda9 	bl	1ad1c <net_buf_unref>
	return false;
    71ca:	2400      	movs	r4, #0
    71cc:	e7d0      	b.n	7170 <send_frag+0x2c>
	...

000071d0 <bt_conn_add_le>:
{
    71d0:	b538      	push	{r3, r4, r5, lr}
    71d2:	4605      	mov	r5, r0
	struct bt_conn *conn = conn_new();
    71d4:	f7ff fd90 	bl	6cf8 <conn_new>
	if (!conn) {
    71d8:	4604      	mov	r4, r0
    71da:	b1a0      	cbz	r0, 7206 <bt_conn_add_le+0x36>
    71dc:	2207      	movs	r2, #7
    71de:	4629      	mov	r1, r5
    71e0:	3048      	adds	r0, #72	; 0x48
    71e2:	f7f9 f86d 	bl	2c0 <memcpy>
	conn->sec_level = BT_SECURITY_LOW;
    71e6:	2301      	movs	r3, #1
    71e8:	7223      	strb	r3, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    71ea:	7263      	strb	r3, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    71ec:	2300      	movs	r3, #0
    71ee:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    71f0:	2318      	movs	r3, #24
    71f2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    71f6:	2328      	movs	r3, #40	; 0x28
    71f8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    71fc:	4903      	ldr	r1, [pc, #12]	; (720c <bt_conn_add_le+0x3c>)
    71fe:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7202:	f022 fea7 	bl	29f54 <k_delayed_work_init>
}
    7206:	4620      	mov	r0, r4
    7208:	bd38      	pop	{r3, r4, r5, pc}
    720a:	bf00      	nop
    720c:	0000780d 	.word	0x0000780d

00007210 <bt_conn_addr_le_cmp>:
{
    7210:	b538      	push	{r3, r4, r5, lr}
    7212:	4604      	mov	r4, r0
    7214:	460d      	mov	r5, r1
	return memcmp(a, b, sizeof(*a));
    7216:	2207      	movs	r2, #7
    7218:	f100 0148 	add.w	r1, r0, #72	; 0x48
    721c:	4628      	mov	r0, r5
    721e:	f023 fae7 	bl	2a7f0 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    7222:	4603      	mov	r3, r0
    7224:	b140      	cbz	r0, 7238 <bt_conn_addr_le_cmp+0x28>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    7226:	78e3      	ldrb	r3, [r4, #3]
    7228:	b143      	cbz	r3, 723c <bt_conn_addr_le_cmp+0x2c>
    722a:	2207      	movs	r2, #7
    722c:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    7230:	4628      	mov	r0, r5
    7232:	f023 fadd 	bl	2a7f0 <memcmp>
    7236:	4603      	mov	r3, r0
}
    7238:	4618      	mov	r0, r3
    723a:	bd38      	pop	{r3, r4, r5, pc}
    723c:	2207      	movs	r2, #7
    723e:	f104 0156 	add.w	r1, r4, #86	; 0x56
    7242:	4628      	mov	r0, r5
    7244:	f023 fad4 	bl	2a7f0 <memcmp>
    7248:	4603      	mov	r3, r0
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    724a:	e7f5      	b.n	7238 <bt_conn_addr_le_cmp+0x28>

0000724c <bt_conn_ref>:
	atomic_inc(&conn->ref);
    724c:	f100 0344 	add.w	r3, r0, #68	; 0x44
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    7250:	f3bf 8f5b 	dmb	ish
    7254:	e853 2f00 	ldrex	r2, [r3]
    7258:	3201      	adds	r2, #1
    725a:	e843 2100 	strex	r1, r2, [r3]
    725e:	2900      	cmp	r1, #0
    7260:	d1f8      	bne.n	7254 <bt_conn_ref+0x8>
    7262:	f3bf 8f5b 	dmb	ish
}
    7266:	4770      	bx	lr

00007268 <bt_conn_lookup_handle>:
{
    7268:	b508      	push	{r3, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    726a:	2300      	movs	r3, #0
    726c:	b10b      	cbz	r3, 7272 <bt_conn_lookup_handle+0xa>
	return NULL;
    726e:	2000      	movs	r0, #0
}
    7270:	bd08      	pop	{r3, pc}
		if (!atomic_get(&conns[i].ref)) {
    7272:	229c      	movs	r2, #156	; 0x9c
    7274:	fb02 f203 	mul.w	r2, r2, r3
    7278:	3240      	adds	r2, #64	; 0x40
    727a:	490f      	ldr	r1, [pc, #60]	; (72b8 <bt_conn_lookup_handle+0x50>)
    727c:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    727e:	f3bf 8f5b 	dmb	ish
    7282:	6852      	ldr	r2, [r2, #4]
    7284:	f3bf 8f5b 	dmb	ish
    7288:	b13a      	cbz	r2, 729a <bt_conn_lookup_handle+0x32>
		if (conns[i].state != BT_CONN_CONNECTED &&
    728a:	229c      	movs	r2, #156	; 0x9c
    728c:	fb02 1203 	mla	r2, r2, r3, r1
    7290:	7b12      	ldrb	r2, [r2, #12]
    7292:	3a03      	subs	r2, #3
    7294:	b2d2      	uxtb	r2, r2
    7296:	2a01      	cmp	r2, #1
    7298:	d901      	bls.n	729e <bt_conn_lookup_handle+0x36>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    729a:	3301      	adds	r3, #1
    729c:	e7e6      	b.n	726c <bt_conn_lookup_handle+0x4>
		if (conns[i].handle == handle) {
    729e:	229c      	movs	r2, #156	; 0x9c
    72a0:	fb02 f203 	mul.w	r2, r2, r3
    72a4:	5a8a      	ldrh	r2, [r1, r2]
    72a6:	4282      	cmp	r2, r0
    72a8:	d1f7      	bne.n	729a <bt_conn_lookup_handle+0x32>
			return bt_conn_ref(&conns[i]);
    72aa:	209c      	movs	r0, #156	; 0x9c
    72ac:	fb00 1003 	mla	r0, r0, r3, r1
    72b0:	f7ff ffcc 	bl	724c <bt_conn_ref>
    72b4:	bd08      	pop	{r3, pc}
    72b6:	bf00      	nop
    72b8:	20000514 	.word	0x20000514

000072bc <bt_conn_lookup_addr_le>:
{
    72bc:	b570      	push	{r4, r5, r6, lr}
    72be:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    72c0:	2400      	movs	r4, #0
    72c2:	b10c      	cbz	r4, 72c8 <bt_conn_lookup_addr_le+0xc>
	return NULL;
    72c4:	2000      	movs	r0, #0
}
    72c6:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    72c8:	239c      	movs	r3, #156	; 0x9c
    72ca:	fb03 f304 	mul.w	r3, r3, r4
    72ce:	3340      	adds	r3, #64	; 0x40
    72d0:	4a0d      	ldr	r2, [pc, #52]	; (7308 <bt_conn_lookup_addr_le+0x4c>)
    72d2:	4413      	add	r3, r2
    72d4:	f3bf 8f5b 	dmb	ish
    72d8:	685b      	ldr	r3, [r3, #4]
    72da:	f3bf 8f5b 	dmb	ish
    72de:	b123      	cbz	r3, 72ea <bt_conn_lookup_addr_le+0x2e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    72e0:	239c      	movs	r3, #156	; 0x9c
    72e2:	fb03 2304 	mla	r3, r3, r4, r2
    72e6:	789b      	ldrb	r3, [r3, #2]
    72e8:	b10b      	cbz	r3, 72ee <bt_conn_lookup_addr_le+0x32>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    72ea:	3401      	adds	r4, #1
    72ec:	e7e9      	b.n	72c2 <bt_conn_lookup_addr_le+0x6>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    72ee:	269c      	movs	r6, #156	; 0x9c
    72f0:	fb06 2604 	mla	r6, r6, r4, r2
    72f4:	4629      	mov	r1, r5
    72f6:	4630      	mov	r0, r6
    72f8:	f7ff ff8a 	bl	7210 <bt_conn_addr_le_cmp>
    72fc:	2800      	cmp	r0, #0
    72fe:	d1f4      	bne.n	72ea <bt_conn_lookup_addr_le+0x2e>
			return bt_conn_ref(&conns[i]);
    7300:	4630      	mov	r0, r6
    7302:	f7ff ffa3 	bl	724c <bt_conn_ref>
    7306:	bd70      	pop	{r4, r5, r6, pc}
    7308:	20000514 	.word	0x20000514

0000730c <bt_conn_lookup_state_le>:
{
    730c:	b570      	push	{r4, r5, r6, lr}
    730e:	4605      	mov	r5, r0
    7310:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7312:	2400      	movs	r4, #0
    7314:	b10c      	cbz	r4, 731a <bt_conn_lookup_state_le+0xe>
	return NULL;
    7316:	2000      	movs	r0, #0
}
    7318:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    731a:	239c      	movs	r3, #156	; 0x9c
    731c:	fb03 f304 	mul.w	r3, r3, r4
    7320:	3340      	adds	r3, #64	; 0x40
    7322:	4a12      	ldr	r2, [pc, #72]	; (736c <bt_conn_lookup_state_le+0x60>)
    7324:	4413      	add	r3, r2
    7326:	f3bf 8f5b 	dmb	ish
    732a:	685b      	ldr	r3, [r3, #4]
    732c:	f3bf 8f5b 	dmb	ish
    7330:	b19b      	cbz	r3, 735a <bt_conn_lookup_state_le+0x4e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    7332:	239c      	movs	r3, #156	; 0x9c
    7334:	fb03 2304 	mla	r3, r3, r4, r2
    7338:	789b      	ldrb	r3, [r3, #2]
    733a:	b973      	cbnz	r3, 735a <bt_conn_lookup_state_le+0x4e>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    733c:	b135      	cbz	r5, 734c <bt_conn_lookup_state_le+0x40>
    733e:	4629      	mov	r1, r5
    7340:	209c      	movs	r0, #156	; 0x9c
    7342:	fb00 2004 	mla	r0, r0, r4, r2
    7346:	f7ff ff63 	bl	7210 <bt_conn_addr_le_cmp>
    734a:	b930      	cbnz	r0, 735a <bt_conn_lookup_state_le+0x4e>
		if (conns[i].state == state) {
    734c:	239c      	movs	r3, #156	; 0x9c
    734e:	4a07      	ldr	r2, [pc, #28]	; (736c <bt_conn_lookup_state_le+0x60>)
    7350:	fb03 2304 	mla	r3, r3, r4, r2
    7354:	7b1b      	ldrb	r3, [r3, #12]
    7356:	42b3      	cmp	r3, r6
    7358:	d001      	beq.n	735e <bt_conn_lookup_state_le+0x52>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    735a:	3401      	adds	r4, #1
    735c:	e7da      	b.n	7314 <bt_conn_lookup_state_le+0x8>
			return bt_conn_ref(&conns[i]);
    735e:	209c      	movs	r0, #156	; 0x9c
    7360:	fb00 2004 	mla	r0, r0, r4, r2
    7364:	f7ff ff72 	bl	724c <bt_conn_ref>
    7368:	bd70      	pop	{r4, r5, r6, pc}
    736a:	bf00      	nop
    736c:	20000514 	.word	0x20000514

00007370 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    7370:	3044      	adds	r0, #68	; 0x44
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    7372:	f3bf 8f5b 	dmb	ish
    7376:	e850 3f00 	ldrex	r3, [r0]
    737a:	3b01      	subs	r3, #1
    737c:	e840 3200 	strex	r2, r3, [r0]
    7380:	2a00      	cmp	r2, #0
    7382:	d1f8      	bne.n	7376 <bt_conn_unref+0x6>
    7384:	f3bf 8f5b 	dmb	ish
    7388:	4770      	bx	lr

0000738a <conn_cleanup>:
{
    738a:	b510      	push	{r4, lr}
    738c:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    738e:	e002      	b.n	7396 <conn_cleanup+0xc>
		net_buf_unref(buf);
    7390:	4618      	mov	r0, r3
    7392:	f013 fcc3 	bl	1ad1c <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    7396:	2100      	movs	r1, #0
    7398:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    739c:	f013 fc91 	bl	1acc2 <net_buf_get>
    73a0:	4603      	mov	r3, r0
    73a2:	2800      	cmp	r0, #0
    73a4:	d1f4      	bne.n	7390 <conn_cleanup+0x6>
	bt_conn_notify_tx(conn);
    73a6:	4620      	mov	r0, r4
    73a8:	f7ff fe96 	bl	70d8 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    73ac:	4620      	mov	r0, r4
    73ae:	f7ff fc97 	bl	6ce0 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    73b2:	4620      	mov	r0, r4
    73b4:	f7ff ffdc 	bl	7370 <bt_conn_unref>
    73b8:	bd10      	pop	{r4, pc}
	...

000073bc <bt_conn_prepare_events>:
{
    73bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    73c0:	4606      	mov	r6, r0
	conn_change.signaled = 0;
    73c2:	4b30      	ldr	r3, [pc, #192]	; (7484 <bt_conn_prepare_events+0xc8>)
    73c4:	2400      	movs	r4, #0
    73c6:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    73c8:	4622      	mov	r2, r4
    73ca:	2101      	movs	r1, #1
    73cc:	f021 f93c 	bl	28648 <k_poll_event_init>
    73d0:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    73d2:	b114      	cbz	r4, 73da <bt_conn_prepare_events+0x1e>
}
    73d4:	4628      	mov	r0, r5
    73d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = &conns[i];
    73da:	4a2b      	ldr	r2, [pc, #172]	; (7488 <bt_conn_prepare_events+0xcc>)
    73dc:	239c      	movs	r3, #156	; 0x9c
    73de:	fb03 f304 	mul.w	r3, r3, r4
    73e2:	18d0      	adds	r0, r2, r3
		if (!atomic_get(&conn->ref)) {
    73e4:	3340      	adds	r3, #64	; 0x40
    73e6:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    73e8:	f3bf 8f5b 	dmb	ish
    73ec:	685b      	ldr	r3, [r3, #4]
    73ee:	f3bf 8f5b 	dmb	ish
    73f2:	b143      	cbz	r3, 7406 <bt_conn_prepare_events+0x4a>
		if (conn->state == BT_CONN_DISCONNECTED &&
    73f4:	7b03      	ldrb	r3, [r0, #12]
    73f6:	b143      	cbz	r3, 740a <bt_conn_prepare_events+0x4e>
		if (conn->state != BT_CONN_CONNECTED) {
    73f8:	239c      	movs	r3, #156	; 0x9c
    73fa:	4a23      	ldr	r2, [pc, #140]	; (7488 <bt_conn_prepare_events+0xcc>)
    73fc:	fb03 2304 	mla	r3, r3, r4, r2
    7400:	7b1b      	ldrb	r3, [r3, #12]
    7402:	2b03      	cmp	r3, #3
    7404:	d015      	beq.n	7432 <bt_conn_prepare_events+0x76>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7406:	3401      	adds	r4, #1
    7408:	e7e3      	b.n	73d2 <bt_conn_prepare_events+0x16>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    740a:	4603      	mov	r3, r0
    740c:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    740e:	f3bf 8f5b 	dmb	ish
    7412:	e853 2f00 	ldrex	r2, [r3]
    7416:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    741a:	e843 1700 	strex	r7, r1, [r3]
    741e:	2f00      	cmp	r7, #0
    7420:	d1f7      	bne.n	7412 <bt_conn_prepare_events+0x56>
    7422:	f3bf 8f5b 	dmb	ish
		if (conn->state == BT_CONN_DISCONNECTED &&
    7426:	f012 0f40 	tst.w	r2, #64	; 0x40
    742a:	d0e5      	beq.n	73f8 <bt_conn_prepare_events+0x3c>
			conn_cleanup(conn);
    742c:	f7ff ffad 	bl	738a <conn_cleanup>
			continue;
    7430:	e7e9      	b.n	7406 <bt_conn_prepare_events+0x4a>
		k_poll_event_init(&events[ev_count],
    7432:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    7436:	ea4f 0883 	mov.w	r8, r3, lsl #2
    743a:	44b0      	add	r8, r6
				  &conn->tx_notify);
    743c:	4691      	mov	r9, r2
    743e:	279c      	movs	r7, #156	; 0x9c
    7440:	fb07 f704 	mul.w	r7, r7, r4
    7444:	f107 0318 	add.w	r3, r7, #24
    7448:	4413      	add	r3, r2
		k_poll_event_init(&events[ev_count],
    744a:	3304      	adds	r3, #4
    744c:	2200      	movs	r2, #0
    744e:	2104      	movs	r1, #4
    7450:	4640      	mov	r0, r8
    7452:	f021 f8f9 	bl	28648 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    7456:	1c6b      	adds	r3, r5, #1
    7458:	2201      	movs	r2, #1
    745a:	f888 200c 	strb.w	r2, [r8, #12]
		k_poll_event_init(&events[ev_count],
    745e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7462:	ea4f 0883 	mov.w	r8, r3, lsl #2
    7466:	44b0      	add	r8, r6
				  &conn->tx_queue);
    7468:	f107 0328 	add.w	r3, r7, #40	; 0x28
    746c:	444b      	add	r3, r9
		k_poll_event_init(&events[ev_count],
    746e:	3304      	adds	r3, #4
    7470:	2200      	movs	r2, #0
    7472:	2104      	movs	r1, #4
    7474:	4640      	mov	r0, r8
    7476:	f021 f8e7 	bl	28648 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    747a:	3502      	adds	r5, #2
    747c:	2302      	movs	r3, #2
    747e:	f888 300c 	strb.w	r3, [r8, #12]
    7482:	e7c0      	b.n	7406 <bt_conn_prepare_events+0x4a>
    7484:	2000bab8 	.word	0x2000bab8
    7488:	20000514 	.word	0x20000514

0000748c <bt_conn_set_state>:
{
    748c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state == state) {
    748e:	7b05      	ldrb	r5, [r0, #12]
    7490:	428d      	cmp	r5, r1
    7492:	d00a      	beq.n	74aa <bt_conn_set_state+0x1e>
    7494:	4604      	mov	r4, r0
	conn->state = state;
    7496:	7301      	strb	r1, [r0, #12]
	switch (old_state) {
    7498:	b145      	cbz	r5, 74ac <bt_conn_set_state+0x20>
    749a:	2d02      	cmp	r5, #2
    749c:	d009      	beq.n	74b2 <bt_conn_set_state+0x26>
	switch (conn->state) {
    749e:	7b23      	ldrb	r3, [r4, #12]
    74a0:	2b02      	cmp	r3, #2
    74a2:	d068      	beq.n	7576 <bt_conn_set_state+0xea>
    74a4:	2b03      	cmp	r3, #3
    74a6:	d00b      	beq.n	74c0 <bt_conn_set_state+0x34>
    74a8:	b31b      	cbz	r3, 74f2 <bt_conn_set_state+0x66>
    74aa:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_ref(conn);
    74ac:	f7ff fece 	bl	724c <bt_conn_ref>
		break;
    74b0:	e7f5      	b.n	749e <bt_conn_set_state+0x12>
		    conn->type == BT_CONN_TYPE_LE) {
    74b2:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    74b4:	2b00      	cmp	r3, #0
    74b6:	d1f2      	bne.n	749e <bt_conn_set_state+0x12>
			k_delayed_work_cancel(&conn->le.update_work);
    74b8:	3074      	adds	r0, #116	; 0x74
    74ba:	f022 fd69 	bl	29f90 <k_delayed_work_cancel>
    74be:	e7ee      	b.n	749e <bt_conn_set_state+0x12>
		if (conn->type == BT_CONN_TYPE_SCO) {
    74c0:	78a3      	ldrb	r3, [r4, #2]
    74c2:	2b02      	cmp	r3, #2
    74c4:	d0f1      	beq.n	74aa <bt_conn_set_state+0x1e>
		k_fifo_init(&conn->tx_queue);
    74c6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    74ca:	f021 fba8 	bl	28c1e <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    74ce:	f104 001c 	add.w	r0, r4, #28
    74d2:	f021 fba4 	bl	28c1e <k_queue_init>
		k_poll_signal(&conn_change, 0);
    74d6:	2100      	movs	r1, #0
    74d8:	482d      	ldr	r0, [pc, #180]	; (7590 <bt_conn_set_state+0x104>)
    74da:	f021 fb41 	bl	28b60 <k_poll_signal>
	list->head = NULL;
    74de:	2300      	movs	r3, #0
    74e0:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    74e2:	6423      	str	r3, [r4, #64]	; 0x40
		bt_l2cap_connected(conn);
    74e4:	4620      	mov	r0, r4
    74e6:	f001 f87d 	bl	85e4 <bt_l2cap_connected>
		notify_connected(conn);
    74ea:	4620      	mov	r0, r4
    74ec:	f7ff fb74 	bl	6bd8 <notify_connected>
		break;
    74f0:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    74f2:	78a3      	ldrb	r3, [r4, #2]
    74f4:	2b02      	cmp	r3, #2
    74f6:	d00d      	beq.n	7514 <bt_conn_set_state+0x88>
		if (old_state == BT_CONN_CONNECTED ||
    74f8:	1eeb      	subs	r3, r5, #3
    74fa:	b2db      	uxtb	r3, r3
    74fc:	2b01      	cmp	r3, #1
    74fe:	d90d      	bls.n	751c <bt_conn_set_state+0x90>
		} else if (old_state == BT_CONN_CONNECT) {
    7500:	2d02      	cmp	r5, #2
    7502:	d02d      	beq.n	7560 <bt_conn_set_state+0xd4>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    7504:	2d01      	cmp	r5, #1
    7506:	d1d0      	bne.n	74aa <bt_conn_set_state+0x1e>
			if (conn->err) {
    7508:	7ae3      	ldrb	r3, [r4, #11]
    750a:	bb83      	cbnz	r3, 756e <bt_conn_set_state+0xe2>
			bt_conn_unref(conn);
    750c:	4620      	mov	r0, r4
    750e:	f7ff ff2f 	bl	7370 <bt_conn_unref>
    7512:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    7514:	4620      	mov	r0, r4
    7516:	f7ff ff2b 	bl	7370 <bt_conn_unref>
			break;
    751a:	bd38      	pop	{r3, r4, r5, pc}
			bt_l2cap_disconnected(conn);
    751c:	4620      	mov	r0, r4
    751e:	f000 fd21 	bl	7f64 <bt_l2cap_disconnected>
			notify_disconnected(conn);
    7522:	4620      	mov	r0, r4
    7524:	f7ff fb6a 	bl	6bfc <notify_disconnected>
			process_unack_tx(conn);
    7528:	4620      	mov	r0, r4
    752a:	f7ff fc17 	bl	6d5c <process_unack_tx>
			if (conn->type == BT_CONN_TYPE_LE) {
    752e:	78a3      	ldrb	r3, [r4, #2]
    7530:	b18b      	cbz	r3, 7556 <bt_conn_set_state+0xca>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    7532:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7534:	f3bf 8f5b 	dmb	ish
    7538:	e854 3f00 	ldrex	r3, [r4]
    753c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7540:	e844 3200 	strex	r2, r3, [r4]
    7544:	2a00      	cmp	r2, #0
    7546:	d1f7      	bne.n	7538 <bt_conn_set_state+0xac>
    7548:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    754c:	2100      	movs	r1, #0
    754e:	4810      	ldr	r0, [pc, #64]	; (7590 <bt_conn_set_state+0x104>)
    7550:	f021 fb06 	bl	28b60 <k_poll_signal>
    7554:	bd38      	pop	{r3, r4, r5, pc}
				k_delayed_work_cancel(&conn->le.update_work);
    7556:	f104 0074 	add.w	r0, r4, #116	; 0x74
    755a:	f022 fd19 	bl	29f90 <k_delayed_work_cancel>
    755e:	e7e8      	b.n	7532 <bt_conn_set_state+0xa6>
			notify_connected(conn);
    7560:	4620      	mov	r0, r4
    7562:	f7ff fb39 	bl	6bd8 <notify_connected>
			bt_conn_unref(conn);
    7566:	4620      	mov	r0, r4
    7568:	f7ff ff02 	bl	7370 <bt_conn_unref>
    756c:	bd38      	pop	{r3, r4, r5, pc}
				notify_connected(conn);
    756e:	4620      	mov	r0, r4
    7570:	f7ff fb32 	bl	6bd8 <notify_connected>
    7574:	e7ca      	b.n	750c <bt_conn_set_state+0x80>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7576:	78a3      	ldrb	r3, [r4, #2]
    7578:	2b02      	cmp	r3, #2
    757a:	d096      	beq.n	74aa <bt_conn_set_state+0x1e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    757c:	2b00      	cmp	r3, #0
    757e:	d194      	bne.n	74aa <bt_conn_set_state+0x1e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7580:	f640 32b8 	movw	r2, #3000	; 0xbb8
    7584:	f104 0174 	add.w	r1, r4, #116	; 0x74
    7588:	4802      	ldr	r0, [pc, #8]	; (7594 <bt_conn_set_state+0x108>)
    758a:	f022 fd5b 	bl	2a044 <k_delayed_work_submit_to_queue>
    758e:	e78c      	b.n	74aa <bt_conn_set_state+0x1e>
    7590:	2000bab8 	.word	0x2000bab8
    7594:	20002c78 	.word	0x20002c78

00007598 <bt_hci_disconnect>:
{
    7598:	b570      	push	{r4, r5, r6, lr}
    759a:	4605      	mov	r5, r0
    759c:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    759e:	2103      	movs	r1, #3
    75a0:	f240 4006 	movw	r0, #1030	; 0x406
    75a4:	f7fd fbac 	bl	4d00 <bt_hci_cmd_create>
	if (!buf) {
    75a8:	b1a8      	cbz	r0, 75d6 <bt_hci_disconnect+0x3e>
    75aa:	4604      	mov	r4, r0
	disconn = net_buf_add(buf, sizeof(*disconn));
    75ac:	2103      	movs	r1, #3
    75ae:	3008      	adds	r0, #8
    75b0:	f013 fc00 	bl	1adb4 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    75b4:	882b      	ldrh	r3, [r5, #0]
    75b6:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    75b8:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    75ba:	4621      	mov	r1, r4
    75bc:	f240 4006 	movw	r0, #1030	; 0x406
    75c0:	f7fe f8fc 	bl	57bc <bt_hci_cmd_send>
	if (err) {
    75c4:	4604      	mov	r4, r0
    75c6:	b108      	cbz	r0, 75cc <bt_hci_disconnect+0x34>
}
    75c8:	4620      	mov	r0, r4
    75ca:	bd70      	pop	{r4, r5, r6, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    75cc:	2104      	movs	r1, #4
    75ce:	4628      	mov	r0, r5
    75d0:	f7ff ff5c 	bl	748c <bt_conn_set_state>
	return 0;
    75d4:	e7f8      	b.n	75c8 <bt_hci_disconnect+0x30>
		return -ENOBUFS;
    75d6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    75da:	e7f5      	b.n	75c8 <bt_hci_disconnect+0x30>

000075dc <bt_conn_get_info>:
	info->type = conn->type;
    75dc:	7883      	ldrb	r3, [r0, #2]
    75de:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    75e0:	78c3      	ldrb	r3, [r0, #3]
    75e2:	704b      	strb	r3, [r1, #1]
	switch (conn->type) {
    75e4:	7883      	ldrb	r3, [r0, #2]
    75e6:	b9cb      	cbnz	r3, 761c <bt_conn_get_info+0x40>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    75e8:	78c3      	ldrb	r3, [r0, #3]
    75ea:	b983      	cbnz	r3, 760e <bt_conn_get_info+0x32>
			info->le.src = &conn->le.init_addr;
    75ec:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    75f0:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.resp_addr;
    75f2:	f100 0356 	add.w	r3, r0, #86	; 0x56
    75f6:	608b      	str	r3, [r1, #8]
		info->le.interval = conn->le.interval;
    75f8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    75fc:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    75fe:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    7602:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    7604:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    7608:	820b      	strh	r3, [r1, #16]
		return 0;
    760a:	2000      	movs	r0, #0
    760c:	4770      	bx	lr
			info->le.src = &conn->le.resp_addr;
    760e:	f100 0356 	add.w	r3, r0, #86	; 0x56
    7612:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.init_addr;
    7614:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    7618:	608b      	str	r3, [r1, #8]
    761a:	e7ed      	b.n	75f8 <bt_conn_get_info+0x1c>
	return -EINVAL;
    761c:	f06f 0015 	mvn.w	r0, #21
}
    7620:	4770      	bx	lr
	...

00007624 <bt_le_set_auto_conn>:
	return conn;
}

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    7624:	b570      	push	{r4, r5, r6, lr}
    7626:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    7628:	460d      	mov	r5, r1
    762a:	b121      	cbz	r1, 7636 <bt_le_set_auto_conn+0x12>
    762c:	4608      	mov	r0, r1
    762e:	f7fd ffd1 	bl	55d4 <bt_le_conn_params_valid>
    7632:	2800      	cmp	r0, #0
    7634:	d05a      	beq.n	76ec <bt_le_set_auto_conn+0xc8>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    7636:	4630      	mov	r0, r6
    7638:	f7ff fe40 	bl	72bc <bt_conn_lookup_addr_le>
	if (!conn) {
    763c:	4604      	mov	r4, r0
    763e:	b1d8      	cbz	r0, 7678 <bt_le_set_auto_conn+0x54>
		if (!conn) {
			return -ENOMEM;
		}
	}

	if (param) {
    7640:	b33d      	cbz	r5, 7692 <bt_le_set_auto_conn+0x6e>
		bt_conn_set_param_le(conn, param);
    7642:	4629      	mov	r1, r5
    7644:	4620      	mov	r0, r4
    7646:	f7ff fb41 	bl	6ccc <bt_conn_set_param_le>

		if (!atomic_test_and_set_bit(conn->flags,
    764a:	1d23      	adds	r3, r4, #4
    764c:	f3bf 8f5b 	dmb	ish
    7650:	e853 2f00 	ldrex	r2, [r3]
    7654:	f042 0101 	orr.w	r1, r2, #1
    7658:	e843 1000 	strex	r0, r1, [r3]
    765c:	2800      	cmp	r0, #0
    765e:	d1f7      	bne.n	7650 <bt_le_set_auto_conn+0x2c>
    7660:	f3bf 8f5b 	dmb	ish
    7664:	f012 0f01 	tst.w	r2, #1
    7668:	d00f      	beq.n	768a <bt_le_set_auto_conn+0x66>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    766a:	7b23      	ldrb	r3, [r4, #12]
    766c:	b363      	cbz	r3, 76c8 <bt_le_set_auto_conn+0xa4>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
		}
		bt_le_scan_update(false);
	}

	bt_conn_unref(conn);
    766e:	4620      	mov	r0, r4
    7670:	f7ff fe7e 	bl	7370 <bt_conn_unref>

	return 0;
    7674:	2000      	movs	r0, #0
    7676:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_add_le(addr);
    7678:	4630      	mov	r0, r6
    767a:	f7ff fda9 	bl	71d0 <bt_conn_add_le>
		if (!conn) {
    767e:	4604      	mov	r4, r0
    7680:	2800      	cmp	r0, #0
    7682:	d1dd      	bne.n	7640 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    7684:	f06f 000b 	mvn.w	r0, #11
}
    7688:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_ref(conn);
    768a:	4620      	mov	r0, r4
    768c:	f7ff fdde 	bl	724c <bt_conn_ref>
    7690:	e7eb      	b.n	766a <bt_le_set_auto_conn+0x46>
		if (atomic_test_and_clear_bit(conn->flags,
    7692:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7694:	f3bf 8f5b 	dmb	ish
    7698:	e853 2f00 	ldrex	r2, [r3]
    769c:	f022 0101 	bic.w	r1, r2, #1
    76a0:	e843 1000 	strex	r0, r1, [r3]
    76a4:	2800      	cmp	r0, #0
    76a6:	d1f7      	bne.n	7698 <bt_le_set_auto_conn+0x74>
    76a8:	f3bf 8f5b 	dmb	ish
    76ac:	f012 0f01 	tst.w	r2, #1
    76b0:	d0db      	beq.n	766a <bt_le_set_auto_conn+0x46>
			bt_conn_unref(conn);
    76b2:	4620      	mov	r0, r4
    76b4:	f7ff fe5c 	bl	7370 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    76b8:	7b23      	ldrb	r3, [r4, #12]
    76ba:	2b01      	cmp	r3, #1
    76bc:	d1d5      	bne.n	766a <bt_le_set_auto_conn+0x46>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    76be:	2100      	movs	r1, #0
    76c0:	4620      	mov	r0, r4
    76c2:	f7ff fee3 	bl	748c <bt_conn_set_state>
    76c6:	e7d0      	b.n	766a <bt_le_set_auto_conn+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    76c8:	f3bf 8f5b 	dmb	ish
    76cc:	4b09      	ldr	r3, [pc, #36]	; (76f4 <bt_le_set_auto_conn+0xd0>)
    76ce:	681b      	ldr	r3, [r3, #0]
    76d0:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    76d4:	f013 0f02 	tst.w	r3, #2
    76d8:	d0c9      	beq.n	766e <bt_le_set_auto_conn+0x4a>
		if (param) {
    76da:	b11d      	cbz	r5, 76e4 <bt_le_set_auto_conn+0xc0>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    76dc:	2101      	movs	r1, #1
    76de:	4620      	mov	r0, r4
    76e0:	f7ff fed4 	bl	748c <bt_conn_set_state>
		bt_le_scan_update(false);
    76e4:	2000      	movs	r0, #0
    76e6:	f7fe f919 	bl	591c <bt_le_scan_update>
    76ea:	e7c0      	b.n	766e <bt_le_set_auto_conn+0x4a>
		return -EINVAL;
    76ec:	f06f 0015 	mvn.w	r0, #21
    76f0:	bd70      	pop	{r4, r5, r6, pc}
    76f2:	bf00      	nop
    76f4:	2000b9f0 	.word	0x2000b9f0

000076f8 <bt_conn_disconnect>:
{
    76f8:	b538      	push	{r3, r4, r5, lr}
    76fa:	4604      	mov	r4, r0
    76fc:	460d      	mov	r5, r1
	    conn->type == BT_CONN_TYPE_LE) {
    76fe:	7883      	ldrb	r3, [r0, #2]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7700:	b13b      	cbz	r3, 7712 <bt_conn_disconnect+0x1a>
	switch (conn->state) {
    7702:	7b23      	ldrb	r3, [r4, #12]
    7704:	3b01      	subs	r3, #1
    7706:	2b03      	cmp	r3, #3
    7708:	d823      	bhi.n	7752 <bt_conn_disconnect+0x5a>
    770a:	e8df f003 	tbb	[pc, r3]
    770e:	1309      	.short	0x1309
    7710:	071d      	.short	0x071d
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    7712:	2100      	movs	r1, #0
    7714:	3048      	adds	r0, #72	; 0x48
    7716:	f7ff ff85 	bl	7624 <bt_le_set_auto_conn>
    771a:	e7f2      	b.n	7702 <bt_conn_disconnect+0xa>
		return 0;
    771c:	2000      	movs	r0, #0
    771e:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    7720:	72e5      	strb	r5, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7722:	2100      	movs	r1, #0
    7724:	4620      	mov	r0, r4
    7726:	f7ff feb1 	bl	748c <bt_conn_set_state>
		bt_le_scan_update(false);
    772a:	2000      	movs	r0, #0
    772c:	f7fe f8f6 	bl	591c <bt_le_scan_update>
		return 0;
    7730:	2000      	movs	r0, #0
    7732:	bd38      	pop	{r3, r4, r5, pc}
			k_delayed_work_cancel(&conn->le.update_work);
    7734:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7738:	f022 fc2a 	bl	29f90 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    773c:	2100      	movs	r1, #0
    773e:	f242 000e 	movw	r0, #8206	; 0x200e
    7742:	f7fe f83b 	bl	57bc <bt_hci_cmd_send>
    7746:	bd38      	pop	{r3, r4, r5, pc}
		return bt_hci_disconnect(conn, reason);
    7748:	4629      	mov	r1, r5
    774a:	4620      	mov	r0, r4
    774c:	f7ff ff24 	bl	7598 <bt_hci_disconnect>
    7750:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    7752:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    7756:	bd38      	pop	{r3, r4, r5, pc}

00007758 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    7758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    775a:	4607      	mov	r7, r0
    775c:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    775e:	210e      	movs	r1, #14
    7760:	f242 0013 	movw	r0, #8211	; 0x2013
    7764:	f7fd facc 	bl	4d00 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    7768:	b1c8      	cbz	r0, 779e <bt_conn_le_conn_update+0x46>
    776a:	4606      	mov	r6, r0
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    776c:	210e      	movs	r1, #14
    776e:	3008      	adds	r0, #8
    7770:	f013 fb20 	bl	1adb4 <net_buf_simple_add>
    7774:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    7776:	220e      	movs	r2, #14
    7778:	2100      	movs	r1, #0
    777a:	f023 f8cd 	bl	2a918 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    777e:	883b      	ldrh	r3, [r7, #0]
    7780:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    7782:	882b      	ldrh	r3, [r5, #0]
    7784:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    7786:	886b      	ldrh	r3, [r5, #2]
    7788:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    778a:	88ab      	ldrh	r3, [r5, #4]
    778c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    778e:	88eb      	ldrh	r3, [r5, #6]
    7790:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    7792:	4631      	mov	r1, r6
    7794:	f242 0013 	movw	r0, #8211	; 0x2013
    7798:	f7fe f810 	bl	57bc <bt_hci_cmd_send>
    779c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    779e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    77a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000077a4 <bt_conn_le_param_update>:
{
    77a4:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    77a6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    77aa:	880a      	ldrh	r2, [r1, #0]
    77ac:	4293      	cmp	r3, r2
    77ae:	d307      	bcc.n	77c0 <bt_conn_le_param_update+0x1c>
	    conn->le.interval <= param->interval_max &&
    77b0:	884a      	ldrh	r2, [r1, #2]
	if (conn->le.interval >= param->interval_min &&
    77b2:	4293      	cmp	r3, r2
    77b4:	d804      	bhi.n	77c0 <bt_conn_le_param_update+0x1c>
	    conn->le.latency == param->latency &&
    77b6:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    77ba:	888b      	ldrh	r3, [r1, #4]
	    conn->le.interval <= param->interval_max &&
    77bc:	429a      	cmp	r2, r3
    77be:	d016      	beq.n	77ee <bt_conn_le_param_update+0x4a>
    77c0:	460d      	mov	r5, r1
    77c2:	4604      	mov	r4, r0
	k_delayed_work_cancel(&conn->le.update_work);
    77c4:	3074      	adds	r0, #116	; 0x74
    77c6:	f022 fbe3 	bl	29f90 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    77ca:	4b0f      	ldr	r3, [pc, #60]	; (7808 <bt_conn_le_param_update+0x64>)
    77cc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    77d0:	f013 0f02 	tst.w	r3, #2
    77d4:	d004      	beq.n	77e0 <bt_conn_le_param_update+0x3c>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    77d6:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    77da:	f013 0f02 	tst.w	r3, #2
    77de:	d101      	bne.n	77e4 <bt_conn_le_param_update+0x40>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
    77e0:	78e3      	ldrb	r3, [r4, #3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    77e2:	b963      	cbnz	r3, 77fe <bt_conn_le_param_update+0x5a>
		return bt_conn_le_conn_update(conn, param);
    77e4:	4629      	mov	r1, r5
    77e6:	4620      	mov	r0, r4
    77e8:	f7ff ffb6 	bl	7758 <bt_conn_le_conn_update>
    77ec:	bd38      	pop	{r3, r4, r5, pc}
	    conn->le.timeout == param->timeout) {
    77ee:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    77f2:	88cb      	ldrh	r3, [r1, #6]
	    conn->le.latency == param->latency &&
    77f4:	429a      	cmp	r2, r3
    77f6:	d1e3      	bne.n	77c0 <bt_conn_le_param_update+0x1c>
		return -EALREADY;
    77f8:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    77fc:	bd38      	pop	{r3, r4, r5, pc}
	return bt_l2cap_update_conn_param(conn, param);
    77fe:	4629      	mov	r1, r5
    7800:	4620      	mov	r0, r4
    7802:	f001 f821 	bl	8848 <bt_l2cap_update_conn_param>
    7806:	bd38      	pop	{r3, r4, r5, pc}
    7808:	2000b980 	.word	0x2000b980

0000780c <le_conn_update>:
{
    780c:	b500      	push	{lr}
    780e:	b083      	sub	sp, #12
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    7810:	f1a0 0274 	sub.w	r2, r0, #116	; 0x74
	    conn->state == BT_CONN_CONNECT) {
    7814:	f810 3c68 	ldrb.w	r3, [r0, #-104]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7818:	2b02      	cmp	r3, #2
    781a:	d016      	beq.n	784a <le_conn_update+0x3e>
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    781c:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    7820:	f8ad 3000 	strh.w	r3, [sp]
    7824:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    7828:	f8ad 3002 	strh.w	r3, [sp, #2]
    782c:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    7830:	f8ad 3004 	strh.w	r3, [sp, #4]
    7834:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    7838:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    783c:	4669      	mov	r1, sp
    783e:	4610      	mov	r0, r2
    7840:	f7ff ffb0 	bl	77a4 <bt_conn_le_param_update>
}
    7844:	b003      	add	sp, #12
    7846:	f85d fb04 	ldr.w	pc, [sp], #4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    784a:	2113      	movs	r1, #19
    784c:	4610      	mov	r0, r2
    784e:	f7ff ff53 	bl	76f8 <bt_conn_disconnect>
		return;
    7852:	e7f7      	b.n	7844 <le_conn_update+0x38>

00007854 <le_conn_update>:
{
    7854:	b510      	push	{r4, lr}
    7856:	b082      	sub	sp, #8
    7858:	460c      	mov	r4, r1
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    785a:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    785c:	8810      	ldrh	r0, [r2, #0]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    785e:	8893      	ldrh	r3, [r2, #4]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    7860:	88d1      	ldrh	r1, [r2, #6]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    7862:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    7864:	9201      	str	r2, [sp, #4]
    7866:	9100      	str	r1, [sp, #0]
    7868:	2200      	movs	r2, #0
    786a:	4611      	mov	r1, r2
    786c:	f010 fdb4 	bl	183d8 <ll_conn_update>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    7870:	b100      	cbz	r0, 7874 <le_conn_update+0x20>
    7872:	200c      	movs	r0, #12
    7874:	f005 fd82 	bl	d37c <cmd_status>
    7878:	6020      	str	r0, [r4, #0]
}
    787a:	b002      	add	sp, #8
    787c:	bd10      	pop	{r4, pc}
	...

00007880 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    7880:	b538      	push	{r3, r4, r5, lr}
    7882:	460d      	mov	r5, r1
	struct net_buf *buf;

	if (!pool) {
    7884:	4603      	mov	r3, r0
    7886:	b150      	cbz	r0, 789e <bt_conn_create_pdu+0x1e>
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    7888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    788c:	4618      	mov	r0, r3
    788e:	f013 f9d7 	bl	1ac40 <net_buf_alloc>
    7892:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    7894:	1d29      	adds	r1, r5, #4
    7896:	f013 fa2e 	bl	1acf6 <net_buf_reserve>

	return buf;
}
    789a:	4620      	mov	r0, r4
    789c:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
    789e:	4b01      	ldr	r3, [pc, #4]	; (78a4 <bt_conn_create_pdu+0x24>)
    78a0:	e7f2      	b.n	7888 <bt_conn_create_pdu+0x8>
    78a2:	bf00      	nop
    78a4:	2000d200 	.word	0x2000d200

000078a8 <create_frag>:
{
    78a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78aa:	4606      	mov	r6, r0
    78ac:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(NULL, 0);
    78ae:	2100      	movs	r1, #0
    78b0:	4608      	mov	r0, r1
    78b2:	f7ff ffe5 	bl	7880 <bt_conn_create_pdu>
    78b6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    78b8:	7b33      	ldrb	r3, [r6, #12]
    78ba:	2b03      	cmp	r3, #3
    78bc:	d121      	bne.n	7902 <create_frag+0x5a>
    78be:	f100 0310 	add.w	r3, r0, #16
    78c2:	89c2      	ldrh	r2, [r0, #14]
    78c4:	4413      	add	r3, r2
    78c6:	3303      	adds	r3, #3
    78c8:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(frag)->cb = NULL;
    78cc:	2200      	movs	r2, #0
    78ce:	601a      	str	r2, [r3, #0]
	return bt_dev.le.mtu;
    78d0:	4b10      	ldr	r3, [pc, #64]	; (7914 <create_frag+0x6c>)
    78d2:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    78d6:	f100 0608 	add.w	r6, r0, #8
    78da:	4630      	mov	r0, r6
    78dc:	f013 fad3 	bl	1ae86 <net_buf_simple_tailroom>
    78e0:	4287      	cmp	r7, r0
    78e2:	d212      	bcs.n	790a <create_frag+0x62>
	return bt_dev.le.mtu;
    78e4:	4b0b      	ldr	r3, [pc, #44]	; (7914 <create_frag+0x6c>)
    78e6:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    78ea:	463a      	mov	r2, r7
    78ec:	f854 1f08 	ldr.w	r1, [r4, #8]!
    78f0:	4630      	mov	r0, r6
    78f2:	f013 fa65 	bl	1adc0 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    78f6:	4639      	mov	r1, r7
    78f8:	4620      	mov	r0, r4
    78fa:	f013 faa8 	bl	1ae4e <net_buf_simple_pull>
}
    78fe:	4628      	mov	r0, r5
    7900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
    7902:	f013 fa0b 	bl	1ad1c <net_buf_unref>
		return NULL;
    7906:	2500      	movs	r5, #0
    7908:	e7f9      	b.n	78fe <create_frag+0x56>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    790a:	4630      	mov	r0, r6
    790c:	f013 fabb 	bl	1ae86 <net_buf_simple_tailroom>
    7910:	b287      	uxth	r7, r0
    7912:	e7ea      	b.n	78ea <create_frag+0x42>
    7914:	2000b980 	.word	0x2000b980

00007918 <send_buf>:
{
    7918:	b538      	push	{r3, r4, r5, lr}
    791a:	4605      	mov	r5, r0
    791c:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
    791e:	898a      	ldrh	r2, [r1, #12]
	return bt_dev.le.mtu;
    7920:	4b1b      	ldr	r3, [pc, #108]	; (7990 <send_buf+0x78>)
    7922:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
	if (buf->len <= conn_mtu(conn)) {
    7926:	429a      	cmp	r2, r3
    7928:	d91f      	bls.n	796a <send_buf+0x52>
	frag = create_frag(conn, buf);
    792a:	f7ff ffbd 	bl	78a8 <create_frag>
	if (!frag) {
    792e:	4601      	mov	r1, r0
    7930:	b350      	cbz	r0, 7988 <send_buf+0x70>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    7932:	2301      	movs	r3, #1
    7934:	2200      	movs	r2, #0
    7936:	4628      	mov	r0, r5
    7938:	f7ff fc04 	bl	7144 <send_frag>
    793c:	4603      	mov	r3, r0
    793e:	b1c8      	cbz	r0, 7974 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
    7940:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.mtu;
    7942:	4a13      	ldr	r2, [pc, #76]	; (7990 <send_buf+0x78>)
    7944:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
	while (buf->len > conn_mtu(conn)) {
    7948:	429a      	cmp	r2, r3
    794a:	d215      	bcs.n	7978 <send_buf+0x60>
		frag = create_frag(conn, buf);
    794c:	4621      	mov	r1, r4
    794e:	4628      	mov	r0, r5
    7950:	f7ff ffaa 	bl	78a8 <create_frag>
		if (!frag) {
    7954:	4601      	mov	r1, r0
    7956:	b1c8      	cbz	r0, 798c <send_buf+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    7958:	2301      	movs	r3, #1
    795a:	461a      	mov	r2, r3
    795c:	4628      	mov	r0, r5
    795e:	f7ff fbf1 	bl	7144 <send_frag>
    7962:	4603      	mov	r3, r0
    7964:	2800      	cmp	r0, #0
    7966:	d1eb      	bne.n	7940 <send_buf+0x28>
    7968:	e004      	b.n	7974 <send_buf+0x5c>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    796a:	2300      	movs	r3, #0
    796c:	461a      	mov	r2, r3
    796e:	f7ff fbe9 	bl	7144 <send_frag>
    7972:	4603      	mov	r3, r0
}
    7974:	4618      	mov	r0, r3
    7976:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, BT_ACL_CONT, false);
    7978:	2300      	movs	r3, #0
    797a:	2201      	movs	r2, #1
    797c:	4621      	mov	r1, r4
    797e:	4628      	mov	r0, r5
    7980:	f7ff fbe0 	bl	7144 <send_frag>
    7984:	4603      	mov	r3, r0
    7986:	e7f5      	b.n	7974 <send_buf+0x5c>
		return false;
    7988:	2300      	movs	r3, #0
    798a:	e7f3      	b.n	7974 <send_buf+0x5c>
			return false;
    798c:	2300      	movs	r3, #0
    798e:	e7f1      	b.n	7974 <send_buf+0x5c>
    7990:	2000b980 	.word	0x2000b980

00007994 <bt_conn_process_tx>:
{
    7994:	b538      	push	{r3, r4, r5, lr}
    7996:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    7998:	7b03      	ldrb	r3, [r0, #12]
    799a:	b97b      	cbnz	r3, 79bc <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    799c:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    799e:	f3bf 8f5b 	dmb	ish
    79a2:	e853 2f00 	ldrex	r2, [r3]
    79a6:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    79aa:	e843 1000 	strex	r0, r1, [r3]
    79ae:	2800      	cmp	r0, #0
    79b0:	d1f7      	bne.n	79a2 <bt_conn_process_tx+0xe>
    79b2:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    79b6:	f012 0f40 	tst.w	r2, #64	; 0x40
    79ba:	d10c      	bne.n	79d6 <bt_conn_process_tx+0x42>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    79bc:	2100      	movs	r1, #0
    79be:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    79c2:	f013 f97e 	bl	1acc2 <net_buf_get>
	BT_ASSERT(buf);
    79c6:	4605      	mov	r5, r0
    79c8:	b148      	cbz	r0, 79de <bt_conn_process_tx+0x4a>
	if (!send_buf(conn, buf)) {
    79ca:	4601      	mov	r1, r0
    79cc:	4620      	mov	r0, r4
    79ce:	f7ff ffa3 	bl	7918 <send_buf>
    79d2:	b150      	cbz	r0, 79ea <bt_conn_process_tx+0x56>
    79d4:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
    79d6:	4620      	mov	r0, r4
    79d8:	f7ff fcd7 	bl	738a <conn_cleanup>
		return;
    79dc:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    79de:	4040      	eors	r0, r0
    79e0:	f380 8811 	msr	BASEPRI, r0
    79e4:	f04f 0004 	mov.w	r0, #4
    79e8:	df02      	svc	2
		net_buf_unref(buf);
    79ea:	4628      	mov	r0, r5
    79ec:	f013 f996 	bl	1ad1c <net_buf_unref>
    79f0:	e7f0      	b.n	79d4 <bt_conn_process_tx+0x40>
	...

000079f4 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    79f4:	4b03      	ldr	r3, [pc, #12]	; (7a04 <bt_conn_get_id+0x10>)
    79f6:	1ac0      	subs	r0, r0, r3
    79f8:	1080      	asrs	r0, r0, #2
    79fa:	4b03      	ldr	r3, [pc, #12]	; (7a08 <bt_conn_get_id+0x14>)
    79fc:	fb03 f000 	mul.w	r0, r3, r0
}
    7a00:	b2c0      	uxtb	r0, r0
    7a02:	4770      	bx	lr
    7a04:	20000514 	.word	0x20000514
    7a08:	96f96f97 	.word	0x96f96f97

00007a0c <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    7a0c:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    7a0e:	2300      	movs	r3, #0
    7a10:	e000      	b.n	7a14 <bt_conn_init+0x8>
    7a12:	3301      	adds	r3, #1
    7a14:	2b01      	cmp	r3, #1
    7a16:	d80d      	bhi.n	7a34 <bt_conn_init+0x28>
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    7a18:	491a      	ldr	r1, [pc, #104]	; (7a84 <bt_conn_init+0x78>)
    7a1a:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
	node->next = list->head;
    7a1e:	4a1a      	ldr	r2, [pc, #104]	; (7a88 <bt_conn_init+0x7c>)
    7a20:	6814      	ldr	r4, [r2, #0]
    7a22:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
	list->head = node;
    7a26:	6010      	str	r0, [r2, #0]
	if (!list->tail) {
    7a28:	6852      	ldr	r2, [r2, #4]
    7a2a:	2a00      	cmp	r2, #0
    7a2c:	d1f1      	bne.n	7a12 <bt_conn_init+0x6>
		list->tail = list->head;
    7a2e:	4a16      	ldr	r2, [pc, #88]	; (7a88 <bt_conn_init+0x7c>)
    7a30:	6050      	str	r0, [r2, #4]
    7a32:	e7ee      	b.n	7a12 <bt_conn_init+0x6>
	}

	bt_att_init();
    7a34:	f002 fa68 	bl	9f08 <bt_att_init>

	err = bt_smp_init();
    7a38:	f005 fba2 	bl	d180 <bt_smp_init>
	if (err) {
    7a3c:	4605      	mov	r5, r0
    7a3e:	b108      	cbz	r0, 7a44 <bt_conn_init+0x38>
			}
		}
	}

	return 0;
}
    7a40:	4628      	mov	r0, r5
    7a42:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
    7a44:	f000 ff20 	bl	8888 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7a48:	462c      	mov	r4, r5
    7a4a:	2c00      	cmp	r4, #0
    7a4c:	d1f8      	bne.n	7a40 <bt_conn_init+0x34>
			struct bt_conn *conn = &conns[i];
    7a4e:	4a0f      	ldr	r2, [pc, #60]	; (7a8c <bt_conn_init+0x80>)
    7a50:	239c      	movs	r3, #156	; 0x9c
    7a52:	fb03 f304 	mul.w	r3, r3, r4
    7a56:	18d0      	adds	r0, r2, r3
			if (!atomic_get(&conn->ref)) {
    7a58:	3340      	adds	r3, #64	; 0x40
    7a5a:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7a5c:	f3bf 8f5b 	dmb	ish
    7a60:	685b      	ldr	r3, [r3, #4]
    7a62:	f3bf 8f5b 	dmb	ish
    7a66:	b90b      	cbnz	r3, 7a6c <bt_conn_init+0x60>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7a68:	3401      	adds	r4, #1
    7a6a:	e7ee      	b.n	7a4a <bt_conn_init+0x3e>
    7a6c:	f3bf 8f5b 	dmb	ish
    7a70:	6843      	ldr	r3, [r0, #4]
    7a72:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(conn->flags,
    7a76:	f013 0f01 	tst.w	r3, #1
    7a7a:	d0f5      	beq.n	7a68 <bt_conn_init+0x5c>
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7a7c:	2101      	movs	r1, #1
    7a7e:	f7ff fd05 	bl	748c <bt_conn_set_state>
    7a82:	e7f1      	b.n	7a68 <bt_conn_init+0x5c>
    7a84:	20000504 	.word	0x20000504
    7a88:	200006a0 	.word	0x200006a0
    7a8c:	20000514 	.word	0x20000514

00007a90 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    7a90:	4a05      	ldr	r2, [pc, #20]	; (7aa8 <get_ident+0x18>)
    7a92:	7813      	ldrb	r3, [r2, #0]
    7a94:	3301      	adds	r3, #1
    7a96:	b2db      	uxtb	r3, r3
    7a98:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    7a9a:	b90b      	cbnz	r3, 7aa0 <get_ident+0x10>
		ident++;
    7a9c:	3301      	adds	r3, #1
    7a9e:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
    7aa0:	4b01      	ldr	r3, [pc, #4]	; (7aa8 <get_ident+0x18>)
    7aa2:	7818      	ldrb	r0, [r3, #0]
    7aa4:	4770      	bx	lr
    7aa6:	bf00      	nop
    7aa8:	20000744 	.word	0x20000744

00007aac <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    7aac:	b430      	push	{r4, r5}
	return list->head;
    7aae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7ab0:	b113      	cbz	r3, 7ab8 <__l2cap_lookup_ident+0xc>
    7ab2:	3b08      	subs	r3, #8
    7ab4:	2400      	movs	r4, #0
    7ab6:	e01b      	b.n	7af0 <__l2cap_lookup_ident+0x44>
    7ab8:	2300      	movs	r3, #0
    7aba:	e7fb      	b.n	7ab4 <__l2cap_lookup_ident+0x8>
		if (chan->ident == ident) {
			if (remove) {
    7abc:	b35a      	cbz	r2, 7b16 <__l2cap_lookup_ident+0x6a>
				sys_slist_remove(&conn->channels, prev,
    7abe:	f103 0208 	add.w	r2, r3, #8
	if (!prev_node) {
    7ac2:	b144      	cbz	r4, 7ad6 <__l2cap_lookup_ident+0x2a>
		prev_node->next = node->next;
    7ac4:	6899      	ldr	r1, [r3, #8]
    7ac6:	6021      	str	r1, [r4, #0]
		if (list->tail == node) {
    7ac8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    7aca:	428a      	cmp	r2, r1
    7acc:	d00a      	beq.n	7ae4 <__l2cap_lookup_ident+0x38>
	node->next = NULL;
    7ace:	2200      	movs	r2, #0
    7ad0:	609a      	str	r2, [r3, #8]
						 &chan->node);
			}
			return BT_L2CAP_LE_CHAN(chan);
    7ad2:	4618      	mov	r0, r3
    7ad4:	e01d      	b.n	7b12 <__l2cap_lookup_ident+0x66>
		list->head = node->next;
    7ad6:	6899      	ldr	r1, [r3, #8]
    7ad8:	63c1      	str	r1, [r0, #60]	; 0x3c
		if (list->tail == node) {
    7ada:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7adc:	4294      	cmp	r4, r2
    7ade:	d1f6      	bne.n	7ace <__l2cap_lookup_ident+0x22>
			list->tail = list->head;
    7ae0:	6401      	str	r1, [r0, #64]	; 0x40
    7ae2:	e7f4      	b.n	7ace <__l2cap_lookup_ident+0x22>
			list->tail = prev_node;
    7ae4:	6404      	str	r4, [r0, #64]	; 0x40
    7ae6:	e7f2      	b.n	7ace <__l2cap_lookup_ident+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7ae8:	4625      	mov	r5, r4
    7aea:	e00a      	b.n	7b02 <__l2cap_lookup_ident+0x56>
    7aec:	4623      	mov	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7aee:	3b08      	subs	r3, #8
    7af0:	b173      	cbz	r3, 7b10 <__l2cap_lookup_ident+0x64>
		if (chan->ident == ident) {
    7af2:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
    7af6:	428d      	cmp	r5, r1
    7af8:	d0e0      	beq.n	7abc <__l2cap_lookup_ident+0x10>
    7afa:	f113 0408 	adds.w	r4, r3, #8
    7afe:	d0f3      	beq.n	7ae8 <__l2cap_lookup_ident+0x3c>
	return node->next;
    7b00:	689d      	ldr	r5, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7b02:	b11d      	cbz	r5, 7b0c <__l2cap_lookup_ident+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b04:	2c00      	cmp	r4, #0
    7b06:	d0f1      	beq.n	7aec <__l2cap_lookup_ident+0x40>
	return node->next;
    7b08:	689b      	ldr	r3, [r3, #8]
    7b0a:	e7f0      	b.n	7aee <__l2cap_lookup_ident+0x42>
    7b0c:	2300      	movs	r3, #0
    7b0e:	e7ef      	b.n	7af0 <__l2cap_lookup_ident+0x44>
		}

		prev = &chan->node;
	}

	return NULL;
    7b10:	2000      	movs	r0, #0
}
    7b12:	bc30      	pop	{r4, r5}
    7b14:	4770      	bx	lr
			return BT_L2CAP_LE_CHAN(chan);
    7b16:	4618      	mov	r0, r3
    7b18:	e7fb      	b.n	7b12 <__l2cap_lookup_ident+0x66>
	...

00007b1c <l2cap_server_lookup_psm>:
	return list->head;
    7b1c:	4b0d      	ldr	r3, [pc, #52]	; (7b54 <l2cap_server_lookup_psm+0x38>)
    7b1e:	681b      	ldr	r3, [r3, #0]
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    7b20:	b10b      	cbz	r3, 7b26 <l2cap_server_lookup_psm+0xa>
    7b22:	3b08      	subs	r3, #8
    7b24:	e006      	b.n	7b34 <l2cap_server_lookup_psm+0x18>
    7b26:	2300      	movs	r3, #0
    7b28:	e004      	b.n	7b34 <l2cap_server_lookup_psm+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b2a:	4611      	mov	r1, r2
    7b2c:	e00a      	b.n	7b44 <l2cap_server_lookup_psm+0x28>
	return node->next;
    7b2e:	689a      	ldr	r2, [r3, #8]
    7b30:	f1a2 0308 	sub.w	r3, r2, #8
    7b34:	b163      	cbz	r3, 7b50 <l2cap_server_lookup_psm+0x34>
		if (server->psm == psm) {
    7b36:	881a      	ldrh	r2, [r3, #0]
    7b38:	4282      	cmp	r2, r0
    7b3a:	d009      	beq.n	7b50 <l2cap_server_lookup_psm+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b3c:	f113 0208 	adds.w	r2, r3, #8
    7b40:	d0f3      	beq.n	7b2a <l2cap_server_lookup_psm+0xe>
	return node->next;
    7b42:	6899      	ldr	r1, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    7b44:	b111      	cbz	r1, 7b4c <l2cap_server_lookup_psm+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b46:	2a00      	cmp	r2, #0
    7b48:	d1f1      	bne.n	7b2e <l2cap_server_lookup_psm+0x12>
    7b4a:	e7f1      	b.n	7b30 <l2cap_server_lookup_psm+0x14>
    7b4c:	2300      	movs	r3, #0
    7b4e:	e7f1      	b.n	7b34 <l2cap_server_lookup_psm+0x18>
			return server;
		}
	}

	return NULL;
}
    7b50:	4618      	mov	r0, r3
    7b52:	4770      	bx	lr
    7b54:	20000750 	.word	0x20000750

00007b58 <l2cap_remove_tx_cid>:
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    7b58:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    7b5c:	b29b      	uxth	r3, r3
    7b5e:	2b3f      	cmp	r3, #63	; 0x3f
    7b60:	d835      	bhi.n	7bce <l2cap_remove_tx_cid+0x76>
	return list->head;
    7b62:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7b64:	b12b      	cbz	r3, 7b72 <l2cap_remove_tx_cid+0x1a>
    7b66:	3b08      	subs	r3, #8
    7b68:	2200      	movs	r2, #0
    7b6a:	2b00      	cmp	r3, #0
    7b6c:	d031      	beq.n	7bd2 <l2cap_remove_tx_cid+0x7a>
{
    7b6e:	b410      	push	{r4}
    7b70:	e01c      	b.n	7bac <l2cap_remove_tx_cid+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7b72:	2300      	movs	r3, #0
    7b74:	e7f8      	b.n	7b68 <l2cap_remove_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
			sys_slist_remove(&conn->channels, prev, &chan->node);
    7b76:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    7b7a:	b14a      	cbz	r2, 7b90 <l2cap_remove_tx_cid+0x38>
		prev_node->next = node->next;
    7b7c:	689c      	ldr	r4, [r3, #8]
    7b7e:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    7b80:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7b82:	42a1      	cmp	r1, r4
    7b84:	d00b      	beq.n	7b9e <l2cap_remove_tx_cid+0x46>
	node->next = NULL;
    7b86:	2200      	movs	r2, #0
    7b88:	609a      	str	r2, [r3, #8]
			return BT_L2CAP_LE_CHAN(chan);
    7b8a:	4618      	mov	r0, r3

		prev = &chan->node;
	}

	return NULL;
}
    7b8c:	bc10      	pop	{r4}
    7b8e:	4770      	bx	lr
		list->head = node->next;
    7b90:	689a      	ldr	r2, [r3, #8]
    7b92:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    7b94:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7b96:	428c      	cmp	r4, r1
    7b98:	d1f5      	bne.n	7b86 <l2cap_remove_tx_cid+0x2e>
			list->tail = list->head;
    7b9a:	6402      	str	r2, [r0, #64]	; 0x40
    7b9c:	e7f3      	b.n	7b86 <l2cap_remove_tx_cid+0x2e>
			list->tail = prev_node;
    7b9e:	6402      	str	r2, [r0, #64]	; 0x40
    7ba0:	e7f1      	b.n	7b86 <l2cap_remove_tx_cid+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7ba2:	4614      	mov	r4, r2
    7ba4:	e00a      	b.n	7bbc <l2cap_remove_tx_cid+0x64>
    7ba6:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7ba8:	3b08      	subs	r3, #8
    7baa:	b173      	cbz	r3, 7bca <l2cap_remove_tx_cid+0x72>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    7bac:	f8b3 4040 	ldrh.w	r4, [r3, #64]	; 0x40
    7bb0:	42a1      	cmp	r1, r4
    7bb2:	d0e0      	beq.n	7b76 <l2cap_remove_tx_cid+0x1e>
    7bb4:	f113 0208 	adds.w	r2, r3, #8
    7bb8:	d0f3      	beq.n	7ba2 <l2cap_remove_tx_cid+0x4a>
	return node->next;
    7bba:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7bbc:	b11c      	cbz	r4, 7bc6 <l2cap_remove_tx_cid+0x6e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7bbe:	2a00      	cmp	r2, #0
    7bc0:	d0f1      	beq.n	7ba6 <l2cap_remove_tx_cid+0x4e>
	return node->next;
    7bc2:	689b      	ldr	r3, [r3, #8]
    7bc4:	e7f0      	b.n	7ba8 <l2cap_remove_tx_cid+0x50>
    7bc6:	2300      	movs	r3, #0
    7bc8:	e7ef      	b.n	7baa <l2cap_remove_tx_cid+0x52>
	return NULL;
    7bca:	2000      	movs	r0, #0
    7bcc:	e7de      	b.n	7b8c <l2cap_remove_tx_cid+0x34>
		return NULL;
    7bce:	2000      	movs	r0, #0
    7bd0:	4770      	bx	lr
	return NULL;
    7bd2:	2000      	movs	r0, #0
}
    7bd4:	4770      	bx	lr

00007bd6 <l2cap_connected>:

	return 0;
}

static void l2cap_connected(struct bt_l2cap_chan *chan)
{
    7bd6:	4770      	bx	lr

00007bd8 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    7bd8:	4770      	bx	lr
	...

00007bdc <l2cap_accept>:
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    7bdc:	2000      	movs	r0, #0
    7bde:	b110      	cbz	r0, 7be6 <l2cap_accept+0xa>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    7be0:	f06f 000b 	mvn.w	r0, #11
}
    7be4:	4770      	bx	lr
		if (l2cap->chan.chan.conn) {
    7be6:	239c      	movs	r3, #156	; 0x9c
    7be8:	fb03 f300 	mul.w	r3, r3, r0
    7bec:	4a06      	ldr	r2, [pc, #24]	; (7c08 <l2cap_accept+0x2c>)
    7bee:	58d3      	ldr	r3, [r2, r3]
    7bf0:	b10b      	cbz	r3, 7bf6 <l2cap_accept+0x1a>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    7bf2:	3001      	adds	r0, #1
    7bf4:	e7f3      	b.n	7bde <l2cap_accept+0x2>
		l2cap->chan.chan.ops = &ops;
    7bf6:	239c      	movs	r3, #156	; 0x9c
    7bf8:	4a03      	ldr	r2, [pc, #12]	; (7c08 <l2cap_accept+0x2c>)
    7bfa:	fb03 2300 	mla	r3, r3, r0, r2
    7bfe:	4a03      	ldr	r2, [pc, #12]	; (7c0c <l2cap_accept+0x30>)
    7c00:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    7c02:	600b      	str	r3, [r1, #0]
		return 0;
    7c04:	4770      	bx	lr
    7c06:	bf00      	nop
    7c08:	200006a8 	.word	0x200006a8
    7c0c:	2000bad4 	.word	0x2000bad4

00007c10 <l2cap_alloc_frag>:
{
    7c10:	b538      	push	{r3, r4, r5, lr}
    7c12:	4605      	mov	r5, r0
	frag = chan->chan.ops->alloc_buf(&chan->chan);
    7c14:	6843      	ldr	r3, [r0, #4]
    7c16:	68db      	ldr	r3, [r3, #12]
    7c18:	4798      	blx	r3
	if (!frag) {
    7c1a:	4604      	mov	r4, r0
    7c1c:	b120      	cbz	r0, 7c28 <l2cap_alloc_frag+0x18>
	net_buf_frag_add(chan->_sdu, frag);
    7c1e:	4601      	mov	r1, r0
    7c20:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    7c24:	f013 f8ab 	bl	1ad7e <net_buf_frag_add>
}
    7c28:	4620      	mov	r0, r4
    7c2a:	bd38      	pop	{r3, r4, r5, pc}

00007c2c <l2cap_chan_rx_give_credits>:
{
    7c2c:	b538      	push	{r3, r4, r5, lr}
    7c2e:	4605      	mov	r5, r0
	while (credits--) {
    7c30:	e004      	b.n	7c3c <l2cap_chan_rx_give_credits+0x10>
    7c32:	f105 0048 	add.w	r0, r5, #72	; 0x48
    7c36:	f021 fbbc 	bl	293b2 <_impl_k_sem_give>
    7c3a:	4621      	mov	r1, r4
    7c3c:	1e4b      	subs	r3, r1, #1
    7c3e:	b29c      	uxth	r4, r3
    7c40:	2900      	cmp	r1, #0
    7c42:	d1f6      	bne.n	7c32 <l2cap_chan_rx_give_credits+0x6>
}
    7c44:	bd38      	pop	{r3, r4, r5, pc}

00007c46 <l2cap_chan_tx_give_credits>:
{
    7c46:	b538      	push	{r3, r4, r5, lr}
    7c48:	4605      	mov	r5, r0
	while (credits--) {
    7c4a:	e004      	b.n	7c56 <l2cap_chan_tx_give_credits+0x10>
    7c4c:	f105 0068 	add.w	r0, r5, #104	; 0x68
    7c50:	f021 fbaf 	bl	293b2 <_impl_k_sem_give>
    7c54:	4621      	mov	r1, r4
    7c56:	1e4b      	subs	r3, r1, #1
    7c58:	b29c      	uxth	r4, r3
    7c5a:	2900      	cmp	r1, #0
    7c5c:	d1f6      	bne.n	7c4c <l2cap_chan_tx_give_credits+0x6>
}
    7c5e:	bd38      	pop	{r3, r4, r5, pc}

00007c60 <l2cap_chan_destroy>:
{
    7c60:	b510      	push	{r4, lr}
    7c62:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    7c64:	3010      	adds	r0, #16
    7c66:	f022 f993 	bl	29f90 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    7c6a:	e002      	b.n	7c72 <l2cap_chan_destroy+0x12>
		net_buf_unref(buf);
    7c6c:	4618      	mov	r0, r3
    7c6e:	f013 f855 	bl	1ad1c <net_buf_unref>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    7c72:	2100      	movs	r1, #0
    7c74:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7c78:	f013 f823 	bl	1acc2 <net_buf_get>
    7c7c:	4603      	mov	r3, r0
    7c7e:	2800      	cmp	r0, #0
    7c80:	d1f4      	bne.n	7c6c <l2cap_chan_destroy+0xc>
	if (ch->_sdu) {
    7c82:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    7c86:	b130      	cbz	r0, 7c96 <l2cap_chan_destroy+0x36>
		net_buf_unref(ch->_sdu);
    7c88:	f013 f848 	bl	1ad1c <net_buf_unref>
		ch->_sdu = NULL;
    7c8c:	2300      	movs	r3, #0
    7c8e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		ch->_sdu_len = 0;
    7c92:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    7c96:	bd10      	pop	{r4, pc}

00007c98 <l2cap_chan_le_get_tx_buf>:
{
    7c98:	b508      	push	{r3, lr}
    7c9a:	4603      	mov	r3, r0
	if (ch->tx_buf) {
    7c9c:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    7ca0:	b118      	cbz	r0, 7caa <l2cap_chan_le_get_tx_buf+0x12>
		ch->tx_buf = NULL;
    7ca2:	2200      	movs	r2, #0
    7ca4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return buf;
    7ca8:	bd08      	pop	{r3, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    7caa:	2100      	movs	r1, #0
    7cac:	f103 0080 	add.w	r0, r3, #128	; 0x80
    7cb0:	f013 f807 	bl	1acc2 <net_buf_get>
}
    7cb4:	bd08      	pop	{r3, pc}

00007cb6 <l2cap_chan_tx_init>:
{
    7cb6:	b510      	push	{r4, lr}
    7cb8:	4604      	mov	r4, r0
	memset(&chan->tx, 0, sizeof(chan->tx));
    7cba:	2220      	movs	r2, #32
    7cbc:	2100      	movs	r1, #0
    7cbe:	3060      	adds	r0, #96	; 0x60
    7cc0:	f022 fe2a 	bl	2a918 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    7cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7cc8:	2100      	movs	r1, #0
    7cca:	f104 0068 	add.w	r0, r4, #104	; 0x68
    7cce:	f021 fb67 	bl	293a0 <_impl_k_sem_init>
	k_fifo_init(&chan->tx_queue);
    7cd2:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7cd6:	f020 ffa2 	bl	28c1e <k_queue_init>
    7cda:	bd10      	pop	{r4, pc}

00007cdc <l2cap_chan_rx_init>:
{
    7cdc:	b508      	push	{r3, lr}
	if (!chan->rx.mtu) {
    7cde:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7ce2:	b913      	cbnz	r3, 7cea <l2cap_chan_rx_init+0xe>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    7ce4:	2342      	movs	r3, #66	; 0x42
    7ce6:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	if (!chan->rx.init_credits) {
    7cea:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    7cee:	b96b      	cbnz	r3, 7d0c <l2cap_chan_rx_init+0x30>
		if (chan->chan.ops->alloc_buf) {
    7cf0:	6843      	ldr	r3, [r0, #4]
    7cf2:	68db      	ldr	r3, [r3, #12]
    7cf4:	b1cb      	cbz	r3, 7d2a <l2cap_chan_rx_init+0x4e>
			chan->rx.init_credits = (chan->rx.mtu +
    7cf6:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7cfa:	3343      	adds	r3, #67	; 0x43
						 (L2CAP_MAX_LE_MPS - 1)) /
    7cfc:	4a0d      	ldr	r2, [pc, #52]	; (7d34 <l2cap_chan_rx_init+0x58>)
    7cfe:	fb82 1203 	smull	r1, r2, r2, r3
    7d02:	17db      	asrs	r3, r3, #31
    7d04:	ebc3 1362 	rsb	r3, r3, r2, asr #5
			chan->rx.init_credits = (chan->rx.mtu +
    7d08:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    7d0c:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7d10:	3302      	adds	r3, #2
    7d12:	2b44      	cmp	r3, #68	; 0x44
    7d14:	bfa8      	it	ge
    7d16:	2344      	movge	r3, #68	; 0x44
    7d18:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    7d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7d20:	2100      	movs	r1, #0
    7d22:	3048      	adds	r0, #72	; 0x48
    7d24:	f021 fb3c 	bl	293a0 <_impl_k_sem_init>
    7d28:	bd08      	pop	{r3, pc}
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    7d2a:	2302      	movs	r3, #2
    7d2c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    7d30:	e7ec      	b.n	7d0c <l2cap_chan_rx_init+0x30>
    7d32:	bf00      	nop
    7d34:	78787879 	.word	0x78787879

00007d38 <l2cap_change_security>:
{
    7d38:	b508      	push	{r3, lr}
	switch (err) {
    7d3a:	2905      	cmp	r1, #5
    7d3c:	d00e      	beq.n	7d5c <l2cap_change_security+0x24>
    7d3e:	2908      	cmp	r1, #8
    7d40:	d120      	bne.n	7d84 <l2cap_change_security+0x4c>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    7d42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    7d46:	2b01      	cmp	r3, #1
    7d48:	d81f      	bhi.n	7d8a <l2cap_change_security+0x52>
		chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7d4a:	2302      	movs	r3, #2
    7d4c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    7d50:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
    7d54:	6800      	ldr	r0, [r0, #0]
    7d56:	f7ff f917 	bl	6f88 <bt_conn_security>
    7d5a:	bd08      	pop	{r3, pc}
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    7d5c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    7d60:	2b01      	cmp	r3, #1
    7d62:	d905      	bls.n	7d70 <l2cap_change_security+0x38>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    7d64:	2b02      	cmp	r3, #2
    7d66:	d807      	bhi.n	7d78 <l2cap_change_security+0x40>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    7d68:	2303      	movs	r3, #3
    7d6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7d6e:	e7ef      	b.n	7d50 <l2cap_change_security+0x18>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7d70:	2302      	movs	r3, #2
    7d72:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7d76:	e7eb      	b.n	7d50 <l2cap_change_security+0x18>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    7d78:	2b03      	cmp	r3, #3
    7d7a:	d809      	bhi.n	7d90 <l2cap_change_security+0x58>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    7d7c:	2304      	movs	r3, #4
    7d7e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7d82:	e7e5      	b.n	7d50 <l2cap_change_security+0x18>
		return -EINVAL;
    7d84:	f06f 0015 	mvn.w	r0, #21
    7d88:	bd08      	pop	{r3, pc}
			return -EALREADY;
    7d8a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7d8e:	bd08      	pop	{r3, pc}
			return -EALREADY;
    7d90:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    7d94:	bd08      	pop	{r3, pc}
	...

00007d98 <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    7d98:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    7d9c:	2200      	movs	r2, #0
    7d9e:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    7da0:	4a05      	ldr	r2, [pc, #20]	; (7db8 <bt_l2cap_le_fixed_chan_register+0x20>)
    7da2:	6852      	ldr	r2, [r2, #4]
    7da4:	b11a      	cbz	r2, 7dae <bt_l2cap_le_fixed_chan_register+0x16>
		list->tail->next = node;
    7da6:	6013      	str	r3, [r2, #0]
		list->tail = node;
    7da8:	4a03      	ldr	r2, [pc, #12]	; (7db8 <bt_l2cap_le_fixed_chan_register+0x20>)
    7daa:	6053      	str	r3, [r2, #4]
    7dac:	4770      	bx	lr
		list->tail = node;
    7dae:	4a02      	ldr	r2, [pc, #8]	; (7db8 <bt_l2cap_le_fixed_chan_register+0x20>)
    7db0:	6053      	str	r3, [r2, #4]
		list->head = node;
    7db2:	6013      	str	r3, [r2, #0]
    7db4:	4770      	bx	lr
    7db6:	bf00      	nop
    7db8:	20000748 	.word	0x20000748

00007dbc <bt_l2cap_chan_remove>:
	return list->head;
    7dbc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7dbe:	b123      	cbz	r3, 7dca <bt_l2cap_chan_remove+0xe>
    7dc0:	3b08      	subs	r3, #8
    7dc2:	2200      	movs	r2, #0
    7dc4:	b35b      	cbz	r3, 7e1e <bt_l2cap_chan_remove+0x62>
{
    7dc6:	b410      	push	{r4}
    7dc8:	e01c      	b.n	7e04 <bt_l2cap_chan_remove+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7dca:	2300      	movs	r3, #0
    7dcc:	e7f9      	b.n	7dc2 <bt_l2cap_chan_remove+0x6>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    7dce:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    7dd2:	b142      	cbz	r2, 7de6 <bt_l2cap_chan_remove+0x2a>
		prev_node->next = node->next;
    7dd4:	689c      	ldr	r4, [r3, #8]
    7dd6:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    7dd8:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7dda:	42a1      	cmp	r1, r4
    7ddc:	d00a      	beq.n	7df4 <bt_l2cap_chan_remove+0x38>
	node->next = NULL;
    7dde:	2200      	movs	r2, #0
    7de0:	609a      	str	r2, [r3, #8]
}
    7de2:	bc10      	pop	{r4}
    7de4:	4770      	bx	lr
		list->head = node->next;
    7de6:	689a      	ldr	r2, [r3, #8]
    7de8:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    7dea:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7dec:	428c      	cmp	r4, r1
    7dee:	d1f6      	bne.n	7dde <bt_l2cap_chan_remove+0x22>
			list->tail = list->head;
    7df0:	6402      	str	r2, [r0, #64]	; 0x40
    7df2:	e7f4      	b.n	7dde <bt_l2cap_chan_remove+0x22>
			list->tail = prev_node;
    7df4:	6402      	str	r2, [r0, #64]	; 0x40
    7df6:	e7f2      	b.n	7dde <bt_l2cap_chan_remove+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7df8:	4614      	mov	r4, r2
    7dfa:	e009      	b.n	7e10 <bt_l2cap_chan_remove+0x54>
    7dfc:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7dfe:	3b08      	subs	r3, #8
    7e00:	2b00      	cmp	r3, #0
    7e02:	d0ee      	beq.n	7de2 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
    7e04:	428b      	cmp	r3, r1
    7e06:	d0e2      	beq.n	7dce <bt_l2cap_chan_remove+0x12>
    7e08:	f113 0208 	adds.w	r2, r3, #8
    7e0c:	d0f4      	beq.n	7df8 <bt_l2cap_chan_remove+0x3c>
	return node->next;
    7e0e:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7e10:	b11c      	cbz	r4, 7e1a <bt_l2cap_chan_remove+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7e12:	2a00      	cmp	r2, #0
    7e14:	d0f2      	beq.n	7dfc <bt_l2cap_chan_remove+0x40>
	return node->next;
    7e16:	689b      	ldr	r3, [r3, #8]
    7e18:	e7f1      	b.n	7dfe <bt_l2cap_chan_remove+0x42>
    7e1a:	2300      	movs	r3, #0
    7e1c:	e7f0      	b.n	7e00 <bt_l2cap_chan_remove+0x44>
    7e1e:	4770      	bx	lr

00007e20 <bt_l2cap_chan_set_state>:
	chan->state = state;
    7e20:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    7e24:	4770      	bx	lr

00007e26 <bt_l2cap_chan_del>:
{
    7e26:	b510      	push	{r4, lr}
    7e28:	4604      	mov	r4, r0
	if (!chan->conn) {
    7e2a:	6803      	ldr	r3, [r0, #0]
    7e2c:	b12b      	cbz	r3, 7e3a <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    7e2e:	6843      	ldr	r3, [r0, #4]
    7e30:	685b      	ldr	r3, [r3, #4]
    7e32:	b103      	cbz	r3, 7e36 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    7e34:	4798      	blx	r3
	chan->conn = NULL;
    7e36:	2300      	movs	r3, #0
    7e38:	6023      	str	r3, [r4, #0]
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
    7e3a:	2100      	movs	r1, #0
    7e3c:	4620      	mov	r0, r4
    7e3e:	f7ff ffef 	bl	7e20 <bt_l2cap_chan_set_state>
	chan->psm = 0;
    7e42:	2300      	movs	r3, #0
    7e44:	8763      	strh	r3, [r4, #58]	; 0x3a
	if (chan->destroy) {
    7e46:	68e3      	ldr	r3, [r4, #12]
    7e48:	b10b      	cbz	r3, 7e4e <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    7e4a:	4620      	mov	r0, r4
    7e4c:	4798      	blx	r3
    7e4e:	bd10      	pop	{r4, pc}

00007e50 <l2cap_rtx_timeout>:
{
    7e50:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    7e52:	f1a0 0410 	sub.w	r4, r0, #16
    7e56:	4621      	mov	r1, r4
    7e58:	f850 0c10 	ldr.w	r0, [r0, #-16]
    7e5c:	f7ff ffae 	bl	7dbc <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    7e60:	4620      	mov	r0, r4
    7e62:	f7ff ffe0 	bl	7e26 <bt_l2cap_chan_del>
    7e66:	bd10      	pop	{r4, pc}

00007e68 <le_conn_rsp>:
{
    7e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7e6c:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    7e6e:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    7e70:	8992      	ldrh	r2, [r2, #12]
    7e72:	2a09      	cmp	r2, #9
    7e74:	d927      	bls.n	7ec6 <le_conn_rsp+0x5e>
	dcid = sys_le16_to_cpu(rsp->dcid);
    7e76:	f8b3 a000 	ldrh.w	sl, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    7e7a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    7e7e:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    7e82:	88df      	ldrh	r7, [r3, #6]
	result = sys_le16_to_cpu(rsp->result);
    7e84:	891d      	ldrh	r5, [r3, #8]
	if (result == BT_L2CAP_SUCCESS ||
    7e86:	b14d      	cbz	r5, 7e9c <le_conn_rsp+0x34>
    7e88:	2d05      	cmp	r5, #5
    7e8a:	d007      	beq.n	7e9c <le_conn_rsp+0x34>
	    result == BT_L2CAP_ERR_AUTHENTICATION ||
    7e8c:	2d08      	cmp	r5, #8
    7e8e:	d005      	beq.n	7e9c <le_conn_rsp+0x34>
		chan = l2cap_remove_ident(conn, ident);
    7e90:	2201      	movs	r2, #1
    7e92:	4630      	mov	r0, r6
    7e94:	f7ff fe0a 	bl	7aac <__l2cap_lookup_ident>
    7e98:	4604      	mov	r4, r0
    7e9a:	e004      	b.n	7ea6 <le_conn_rsp+0x3e>
		chan = l2cap_lookup_ident(conn, ident);
    7e9c:	2200      	movs	r2, #0
    7e9e:	4630      	mov	r0, r6
    7ea0:	f7ff fe04 	bl	7aac <__l2cap_lookup_ident>
    7ea4:	4604      	mov	r4, r0
	if (!chan) {
    7ea6:	b174      	cbz	r4, 7ec6 <le_conn_rsp+0x5e>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    7ea8:	f104 0010 	add.w	r0, r4, #16
    7eac:	f022 f870 	bl	29f90 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    7eb0:	2300      	movs	r3, #0
    7eb2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	switch (result) {
    7eb6:	2d05      	cmp	r5, #5
    7eb8:	d021      	beq.n	7efe <le_conn_rsp+0x96>
    7eba:	2d08      	cmp	r5, #8
    7ebc:	d01f      	beq.n	7efe <le_conn_rsp+0x96>
    7ebe:	b125      	cbz	r5, 7eca <le_conn_rsp+0x62>
		bt_l2cap_chan_del(&chan->chan);
    7ec0:	4620      	mov	r0, r4
    7ec2:	f7ff ffb0 	bl	7e26 <bt_l2cap_chan_del>
    7ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chan->tx.cid = dcid;
    7eca:	f8a4 a060 	strh.w	sl, [r4, #96]	; 0x60
		chan->tx.mtu = mtu;
    7ece:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
		chan->tx.mps = mps;
    7ed2:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
		bt_l2cap_chan_set_state(&chan->chan, BT_L2CAP_CONNECTED);
    7ed6:	2103      	movs	r1, #3
    7ed8:	4620      	mov	r0, r4
    7eda:	f7ff ffa1 	bl	7e20 <bt_l2cap_chan_set_state>
		if (chan->chan.ops->connected) {
    7ede:	6863      	ldr	r3, [r4, #4]
    7ee0:	681b      	ldr	r3, [r3, #0]
    7ee2:	b10b      	cbz	r3, 7ee8 <le_conn_rsp+0x80>
			chan->chan.ops->connected(&chan->chan);
    7ee4:	4620      	mov	r0, r4
    7ee6:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    7ee8:	4639      	mov	r1, r7
    7eea:	4620      	mov	r0, r4
    7eec:	f7ff feab 	bl	7c46 <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    7ef0:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    7ef4:	4620      	mov	r0, r4
    7ef6:	f7ff fe99 	bl	7c2c <l2cap_chan_rx_give_credits>
		break;
    7efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (l2cap_change_security(chan, result) == 0) {
    7efe:	4629      	mov	r1, r5
    7f00:	4620      	mov	r0, r4
    7f02:	f7ff ff19 	bl	7d38 <l2cap_change_security>
    7f06:	2800      	cmp	r0, #0
    7f08:	d0dd      	beq.n	7ec6 <le_conn_rsp+0x5e>
		bt_l2cap_chan_remove(conn, &chan->chan);
    7f0a:	4621      	mov	r1, r4
    7f0c:	4630      	mov	r0, r6
    7f0e:	f7ff ff55 	bl	7dbc <bt_l2cap_chan_remove>
    7f12:	e7d5      	b.n	7ec0 <le_conn_rsp+0x58>

00007f14 <le_disconn_rsp>:
{
    7f14:	b508      	push	{r3, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7f16:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_disconn_rsp *rsp = (void *)buf->data;
    7f18:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    7f1a:	8993      	ldrh	r3, [r2, #12]
    7f1c:	2b03      	cmp	r3, #3
    7f1e:	d800      	bhi.n	7f22 <le_disconn_rsp+0xe>
    7f20:	bd08      	pop	{r3, pc}
	chan = l2cap_remove_tx_cid(conn, dcid);
    7f22:	8809      	ldrh	r1, [r1, #0]
    7f24:	f7ff fe18 	bl	7b58 <l2cap_remove_tx_cid>
	if (!chan) {
    7f28:	2800      	cmp	r0, #0
    7f2a:	d0f9      	beq.n	7f20 <le_disconn_rsp+0xc>
	bt_l2cap_chan_del(&chan->chan);
    7f2c:	f7ff ff7b 	bl	7e26 <bt_l2cap_chan_del>
    7f30:	e7f6      	b.n	7f20 <le_disconn_rsp+0xc>

00007f32 <reject_cmd>:
{
    7f32:	b508      	push	{r3, lr}
	chan = l2cap_remove_ident(conn, ident);
    7f34:	2201      	movs	r2, #1
    7f36:	6800      	ldr	r0, [r0, #0]
    7f38:	f7ff fdb8 	bl	7aac <__l2cap_lookup_ident>
	if (!chan) {
    7f3c:	b108      	cbz	r0, 7f42 <reject_cmd+0x10>
	bt_l2cap_chan_del(&chan->chan);
    7f3e:	f7ff ff72 	bl	7e26 <bt_l2cap_chan_del>
    7f42:	bd08      	pop	{r3, pc}

00007f44 <bt_l2cap_chan_add>:
{
    7f44:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
    7f46:	f101 0308 	add.w	r3, r1, #8
	node->next = NULL;
    7f4a:	2400      	movs	r4, #0
    7f4c:	608c      	str	r4, [r1, #8]
	if (!list->tail) {
    7f4e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7f50:	b12c      	cbz	r4, 7f5e <bt_l2cap_chan_add+0x1a>
		list->tail->next = node;
    7f52:	6023      	str	r3, [r4, #0]
		list->tail = node;
    7f54:	6403      	str	r3, [r0, #64]	; 0x40
	chan->conn = conn;
    7f56:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
    7f58:	60ca      	str	r2, [r1, #12]
}
    7f5a:	bc10      	pop	{r4}
    7f5c:	4770      	bx	lr
		list->tail = node;
    7f5e:	6403      	str	r3, [r0, #64]	; 0x40
		list->head = node;
    7f60:	63c3      	str	r3, [r0, #60]	; 0x3c
    7f62:	e7f8      	b.n	7f56 <bt_l2cap_chan_add+0x12>

00007f64 <bt_l2cap_disconnected>:
{
    7f64:	b510      	push	{r4, lr}
	return list->head;
    7f66:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    7f68:	b140      	cbz	r0, 7f7c <bt_l2cap_disconnected+0x18>
    7f6a:	3808      	subs	r0, #8
    7f6c:	b140      	cbz	r0, 7f80 <bt_l2cap_disconnected+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7f6e:	f110 0408 	adds.w	r4, r0, #8
    7f72:	d000      	beq.n	7f76 <bt_l2cap_disconnected+0x12>
	return node->next;
    7f74:	6884      	ldr	r4, [r0, #8]
    7f76:	b12c      	cbz	r4, 7f84 <bt_l2cap_disconnected+0x20>
    7f78:	3c08      	subs	r4, #8
    7f7a:	e00a      	b.n	7f92 <bt_l2cap_disconnected+0x2e>
    7f7c:	2000      	movs	r0, #0
    7f7e:	e7f5      	b.n	7f6c <bt_l2cap_disconnected+0x8>
    7f80:	4604      	mov	r4, r0
    7f82:	e006      	b.n	7f92 <bt_l2cap_disconnected+0x2e>
    7f84:	2400      	movs	r4, #0
    7f86:	e004      	b.n	7f92 <bt_l2cap_disconnected+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7f88:	461a      	mov	r2, r3
    7f8a:	e00a      	b.n	7fa2 <bt_l2cap_disconnected+0x3e>
    7f8c:	3b08      	subs	r3, #8
    7f8e:	4620      	mov	r0, r4
    7f90:	461c      	mov	r4, r3
    7f92:	b178      	cbz	r0, 7fb4 <bt_l2cap_disconnected+0x50>
		bt_l2cap_chan_del(chan);
    7f94:	f7ff ff47 	bl	7e26 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    7f98:	b144      	cbz	r4, 7fac <bt_l2cap_disconnected+0x48>
    7f9a:	f114 0308 	adds.w	r3, r4, #8
    7f9e:	d0f3      	beq.n	7f88 <bt_l2cap_disconnected+0x24>
	return node->next;
    7fa0:	68a2      	ldr	r2, [r4, #8]
    7fa2:	b12a      	cbz	r2, 7fb0 <bt_l2cap_disconnected+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7fa4:	2b00      	cmp	r3, #0
    7fa6:	d0f1      	beq.n	7f8c <bt_l2cap_disconnected+0x28>
	return node->next;
    7fa8:	68a3      	ldr	r3, [r4, #8]
    7faa:	e7ef      	b.n	7f8c <bt_l2cap_disconnected+0x28>
    7fac:	4623      	mov	r3, r4
    7fae:	e7ee      	b.n	7f8e <bt_l2cap_disconnected+0x2a>
    7fb0:	2300      	movs	r3, #0
    7fb2:	e7ec      	b.n	7f8e <bt_l2cap_disconnected+0x2a>
}
    7fb4:	bd10      	pop	{r4, pc}

00007fb6 <bt_l2cap_create_pdu>:
{
    7fb6:	b508      	push	{r3, lr}
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    7fb8:	3104      	adds	r1, #4
    7fba:	f7ff fc61 	bl	7880 <bt_conn_create_pdu>
}
    7fbe:	bd08      	pop	{r3, pc}

00007fc0 <l2cap_create_le_sig_pdu>:
{
    7fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7fc2:	460f      	mov	r7, r1
    7fc4:	4616      	mov	r6, r2
    7fc6:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu(NULL, 0);
    7fc8:	2100      	movs	r1, #0
    7fca:	4608      	mov	r0, r1
    7fcc:	f7ff fff3 	bl	7fb6 <bt_l2cap_create_pdu>
    7fd0:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7fd2:	2104      	movs	r1, #4
    7fd4:	3008      	adds	r0, #8
    7fd6:	f012 feed 	bl	1adb4 <net_buf_simple_add>
	hdr->code = code;
    7fda:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    7fdc:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    7fde:	8045      	strh	r5, [r0, #2]
}
    7fe0:	4620      	mov	r0, r4
    7fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007fe4 <l2cap_chan_create_seg>:
{
    7fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7fe8:	4605      	mov	r5, r0
    7fea:	460c      	mov	r4, r1
    7fec:	4690      	mov	r8, r2
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    7fee:	7988      	ldrb	r0, [r1, #6]
    7ff0:	f012 fe1a 	bl	1ac28 <net_buf_pool_get>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    7ff4:	89a3      	ldrh	r3, [r4, #12]
    7ff6:	4443      	add	r3, r8
    7ff8:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    7ffc:	4293      	cmp	r3, r2
    7ffe:	d802      	bhi.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    8000:	8ac3      	ldrh	r3, [r0, #22]
    8002:	2b03      	cmp	r3, #3
    8004:	d815      	bhi.n	8032 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    8006:	79a0      	ldrb	r0, [r4, #6]
    8008:	f012 fe0e 	bl	1ac28 <net_buf_pool_get>
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    800c:	8ac3      	ldrh	r3, [r0, #22]
    800e:	2b03      	cmp	r3, #3
    8010:	d902      	bls.n	8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>
	    pool->buf_size >= BT_L2CAP_BUF_SIZE(L2CAP_MAX_LE_MPS)) {
    8012:	8a83      	ldrh	r3, [r0, #20]
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    8014:	2b4b      	cmp	r3, #75	; 0x4b
    8016:	d82e      	bhi.n	8076 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76>
	return bt_l2cap_create_pdu(NULL, 0);
    8018:	2100      	movs	r1, #0
    801a:	4608      	mov	r0, r1
    801c:	f7ff ffcb 	bl	7fb6 <bt_l2cap_create_pdu>
    8020:	4606      	mov	r6, r0
	if (sdu_hdr_len) {
    8022:	f1b8 0f00 	cmp.w	r8, #0
    8026:	d038      	beq.n	809a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9a>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    8028:	f106 0008 	add.w	r0, r6, #8
    802c:	4623      	mov	r3, r4
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
    802e:	2100      	movs	r1, #0
    8030:	e02e      	b.n	8090 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    8032:	fa1f f688 	uxth.w	r6, r8
    8036:	3608      	adds	r6, #8
    8038:	b2b6      	uxth	r6, r6
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    803a:	f104 0708 	add.w	r7, r4, #8
    803e:	4638      	mov	r0, r7
    8040:	f012 ff1d 	bl	1ae7e <net_buf_simple_headroom>
    8044:	42b0      	cmp	r0, r6
    8046:	d3de      	bcc.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    8048:	6823      	ldr	r3, [r4, #0]
    804a:	2b00      	cmp	r3, #0
    804c:	d1db      	bne.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
		if (sdu_hdr_len) {
    804e:	f1b8 0f00 	cmp.w	r8, #0
    8052:	d00b      	beq.n	806c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c>
    8054:	4623      	mov	r3, r4
    8056:	2100      	movs	r1, #0
    8058:	e002      	b.n	8060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60>

	while (buf) {
		bytes += buf->len;
    805a:	899a      	ldrh	r2, [r3, #12]
    805c:	4411      	add	r1, r2
		buf = buf->frags;
    805e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    8060:	2b00      	cmp	r3, #0
    8062:	d1fa      	bne.n	805a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    8064:	b289      	uxth	r1, r1
    8066:	4638      	mov	r0, r7
    8068:	f012 fee3 	bl	1ae32 <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    806c:	4620      	mov	r0, r4
    806e:	f012 fe71 	bl	1ad54 <net_buf_ref>
    8072:	4606      	mov	r6, r0
    8074:	e02f      	b.n	80d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd6>
		seg = net_buf_alloc(pool, K_NO_WAIT);
    8076:	2100      	movs	r1, #0
    8078:	f012 fde2 	bl	1ac40 <net_buf_alloc>
		if (seg) {
    807c:	4606      	mov	r6, r0
    807e:	2800      	cmp	r0, #0
    8080:	d0ca      	beq.n	8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>
			net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    8082:	2108      	movs	r1, #8
    8084:	f012 fe37 	bl	1acf6 <net_buf_reserve>
    8088:	e7cb      	b.n	8022 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22>
		bytes += buf->len;
    808a:	899a      	ldrh	r2, [r3, #12]
    808c:	4411      	add	r1, r2
		buf = buf->frags;
    808e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    8090:	2b00      	cmp	r3, #0
    8092:	d1fa      	bne.n	808a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    8094:	b289      	uxth	r1, r1
    8096:	f012 fea5 	bl	1ade4 <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    809a:	f106 0708 	add.w	r7, r6, #8
    809e:	4638      	mov	r0, r7
    80a0:	f012 fef1 	bl	1ae86 <net_buf_simple_tailroom>
    80a4:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
    80a8:	eba5 0308 	sub.w	r3, r5, r8
    80ac:	4298      	cmp	r0, r3
    80ae:	d315      	bcc.n	80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>
    80b0:	fa1f f888 	uxth.w	r8, r8
    80b4:	eba5 0508 	sub.w	r5, r5, r8
    80b8:	b2ad      	uxth	r5, r5
	len = min(buf->len, len);
    80ba:	89a0      	ldrh	r0, [r4, #12]
    80bc:	4285      	cmp	r5, r0
    80be:	bf28      	it	cs
    80c0:	4605      	movcs	r5, r0
	net_buf_add_mem(seg, buf->data, len);
    80c2:	462a      	mov	r2, r5
    80c4:	f854 1f08 	ldr.w	r1, [r4, #8]!
    80c8:	4638      	mov	r0, r7
    80ca:	f012 fe79 	bl	1adc0 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    80ce:	4629      	mov	r1, r5
    80d0:	4620      	mov	r0, r4
    80d2:	f012 febc 	bl	1ae4e <net_buf_simple_pull>
}
    80d6:	4630      	mov	r0, r6
    80d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    80dc:	4638      	mov	r0, r7
    80de:	f012 fed2 	bl	1ae86 <net_buf_simple_tailroom>
    80e2:	b285      	uxth	r5, r0
    80e4:	e7e9      	b.n	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>

000080e6 <bt_l2cap_send_cb>:
{
    80e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80e8:	4605      	mov	r5, r0
    80ea:	460f      	mov	r7, r1
    80ec:	4614      	mov	r4, r2
    80ee:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    80f0:	2104      	movs	r1, #4
    80f2:	f102 0008 	add.w	r0, r2, #8
    80f6:	f012 fe94 	bl	1ae22 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    80fa:	89a3      	ldrh	r3, [r4, #12]
    80fc:	3b04      	subs	r3, #4
    80fe:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    8100:	8047      	strh	r7, [r0, #2]
	bt_conn_send_cb(conn, buf, cb);
    8102:	4632      	mov	r2, r6
    8104:	4621      	mov	r1, r4
    8106:	4628      	mov	r0, r5
    8108:	f7fe ffbe 	bl	7088 <bt_conn_send_cb>
    810c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008110 <l2cap_chan_send_req>:
{
    8110:	b538      	push	{r3, r4, r5, lr}
    8112:	4604      	mov	r4, r0
    8114:	460d      	mov	r5, r1
	if (timeout) {
    8116:	b94a      	cbnz	r2, 812c <l2cap_chan_send_req+0x1c>
		k_delayed_work_cancel(&chan->chan.rtx_work);
    8118:	3010      	adds	r0, #16
    811a:	f021 ff39 	bl	29f90 <k_delayed_work_cancel>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    811e:	2300      	movs	r3, #0
    8120:	462a      	mov	r2, r5
    8122:	2105      	movs	r1, #5
    8124:	6820      	ldr	r0, [r4, #0]
    8126:	f7ff ffde 	bl	80e6 <bt_l2cap_send_cb>
    812a:	bd38      	pop	{r3, r4, r5, pc}
    812c:	f100 0110 	add.w	r1, r0, #16
    8130:	4801      	ldr	r0, [pc, #4]	; (8138 <l2cap_chan_send_req+0x28>)
    8132:	f021 ff87 	bl	2a044 <k_delayed_work_submit_to_queue>
    8136:	e7f2      	b.n	811e <l2cap_chan_send_req+0xe>
    8138:	20002c78 	.word	0x20002c78

0000813c <l2cap_le_conn_req>:
{
    813c:	b538      	push	{r3, r4, r5, lr}
    813e:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    8140:	f7ff fca6 	bl	7a90 <get_ident>
    8144:	4602      	mov	r2, r0
    8146:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    814a:	230a      	movs	r3, #10
    814c:	2114      	movs	r1, #20
    814e:	2000      	movs	r0, #0
    8150:	f7ff ff36 	bl	7fc0 <l2cap_create_le_sig_pdu>
    8154:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    8156:	210a      	movs	r1, #10
    8158:	3008      	adds	r0, #8
    815a:	f012 fe2b 	bl	1adb4 <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    815e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    8160:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    8162:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    8166:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    8168:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    816c:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    816e:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    8172:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    8174:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    8178:	8103      	strh	r3, [r0, #8]
	l2cap_chan_send_req(ch, buf, L2CAP_CONN_TIMEOUT);
    817a:	f649 4240 	movw	r2, #40000	; 0x9c40
    817e:	4629      	mov	r1, r5
    8180:	4620      	mov	r0, r4
    8182:	f7ff ffc5 	bl	8110 <l2cap_chan_send_req>
}
    8186:	2000      	movs	r0, #0
    8188:	bd38      	pop	{r3, r4, r5, pc}

0000818a <l2cap_le_encrypt_change>:
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    818a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    818e:	2b01      	cmp	r3, #1
    8190:	d000      	beq.n	8194 <l2cap_le_encrypt_change+0xa>
    8192:	4770      	bx	lr
    8194:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    8198:	2b00      	cmp	r3, #0
    819a:	d1fa      	bne.n	8192 <l2cap_le_encrypt_change+0x8>
{
    819c:	b510      	push	{r4, lr}
    819e:	4604      	mov	r4, r0
	if (status) {
    81a0:	b911      	cbnz	r1, 81a8 <l2cap_le_encrypt_change+0x1e>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    81a2:	f7ff ffcb 	bl	813c <l2cap_le_conn_req>
    81a6:	bd10      	pop	{r4, pc}
		bt_l2cap_chan_remove(chan->conn, chan);
    81a8:	4601      	mov	r1, r0
    81aa:	6800      	ldr	r0, [r0, #0]
    81ac:	f7ff fe06 	bl	7dbc <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    81b0:	4620      	mov	r0, r4
    81b2:	f7ff fe38 	bl	7e26 <bt_l2cap_chan_del>
		return;
    81b6:	bd10      	pop	{r4, pc}

000081b8 <bt_l2cap_encrypt_change>:
{
    81b8:	b538      	push	{r3, r4, r5, lr}
    81ba:	460d      	mov	r5, r1
	return list->head;
    81bc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    81be:	b10c      	cbz	r4, 81c4 <bt_l2cap_encrypt_change+0xc>
    81c0:	3c08      	subs	r4, #8
    81c2:	e00a      	b.n	81da <bt_l2cap_encrypt_change+0x22>
    81c4:	2400      	movs	r4, #0
    81c6:	e008      	b.n	81da <bt_l2cap_encrypt_change+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    81c8:	f114 0308 	adds.w	r3, r4, #8
    81cc:	d012      	beq.n	81f4 <bt_l2cap_encrypt_change+0x3c>
	return node->next;
    81ce:	68a2      	ldr	r2, [r4, #8]
    81d0:	b192      	cbz	r2, 81f8 <bt_l2cap_encrypt_change+0x40>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    81d2:	b103      	cbz	r3, 81d6 <bt_l2cap_encrypt_change+0x1e>
	return node->next;
    81d4:	68a3      	ldr	r3, [r4, #8]
    81d6:	f1a3 0408 	sub.w	r4, r3, #8
    81da:	b17c      	cbz	r4, 81fc <bt_l2cap_encrypt_change+0x44>
		l2cap_le_encrypt_change(chan, hci_status);
    81dc:	4629      	mov	r1, r5
    81de:	4620      	mov	r0, r4
    81e0:	f7ff ffd3 	bl	818a <l2cap_le_encrypt_change>
		if (chan->ops->encrypt_change) {
    81e4:	6863      	ldr	r3, [r4, #4]
    81e6:	689b      	ldr	r3, [r3, #8]
    81e8:	2b00      	cmp	r3, #0
    81ea:	d0ed      	beq.n	81c8 <bt_l2cap_encrypt_change+0x10>
			chan->ops->encrypt_change(chan, hci_status);
    81ec:	4629      	mov	r1, r5
    81ee:	4620      	mov	r0, r4
    81f0:	4798      	blx	r3
    81f2:	e7e9      	b.n	81c8 <bt_l2cap_encrypt_change+0x10>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    81f4:	461a      	mov	r2, r3
    81f6:	e7eb      	b.n	81d0 <bt_l2cap_encrypt_change+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    81f8:	2400      	movs	r4, #0
    81fa:	e7ee      	b.n	81da <bt_l2cap_encrypt_change+0x22>
}
    81fc:	bd38      	pop	{r3, r4, r5, pc}

000081fe <l2cap_chan_update_credits>:
{
    81fe:	b570      	push	{r4, r5, r6, lr}
 */
__syscall unsigned int k_sem_count_get(struct k_sem *sem);

static inline unsigned int _impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    8200:	6d04      	ldr	r4, [r0, #80]	; 0x50
	    L2CAP_LE_CREDITS_THRESHOLD(chan->rx.init_credits)) {
    8202:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	if (k_sem_count_get(&chan->rx.credits) >
    8206:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    820a:	d900      	bls.n	820e <l2cap_chan_update_credits+0x10>
    820c:	bd70      	pop	{r4, r5, r6, pc}
    820e:	460e      	mov	r6, r1
    8210:	4605      	mov	r5, r0
	credits = chan->rx.init_credits - k_sem_count_get(&chan->rx.credits);
    8212:	b2a4      	uxth	r4, r4
    8214:	1b1b      	subs	r3, r3, r4
    8216:	b29c      	uxth	r4, r3
	l2cap_chan_rx_give_credits(chan, credits);
    8218:	4621      	mov	r1, r4
    821a:	f7ff fd07 	bl	7c2c <l2cap_chan_rx_give_credits>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    821e:	f7ff fc37 	bl	7a90 <get_ident>
    8222:	2304      	movs	r3, #4
    8224:	4602      	mov	r2, r0
    8226:	2116      	movs	r1, #22
    8228:	4630      	mov	r0, r6
    822a:	f7ff fec9 	bl	7fc0 <l2cap_create_le_sig_pdu>
    822e:	4606      	mov	r6, r0
	ev = net_buf_add(buf, sizeof(*ev));
    8230:	2104      	movs	r1, #4
    8232:	3008      	adds	r0, #8
    8234:	f012 fdbe 	bl	1adb4 <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    8238:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    823c:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    823e:	8044      	strh	r4, [r0, #2]
    8240:	2300      	movs	r3, #0
    8242:	4632      	mov	r2, r6
    8244:	2105      	movs	r1, #5
    8246:	6828      	ldr	r0, [r5, #0]
    8248:	f7ff ff4d 	bl	80e6 <bt_l2cap_send_cb>
}
    824c:	e7de      	b.n	820c <l2cap_chan_update_credits+0xe>

0000824e <l2cap_chan_le_send>:
{
    824e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8250:	4604      	mov	r4, r0
    8252:	460d      	mov	r5, r1
    8254:	4616      	mov	r6, r2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    8256:	2100      	movs	r1, #0
    8258:	3068      	adds	r0, #104	; 0x68
    825a:	f021 f8bd 	bl	293d8 <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    825e:	b9b0      	cbnz	r0, 828e <l2cap_chan_le_send+0x40>
	buf = l2cap_chan_create_seg(ch, buf, sdu_hdr_len);
    8260:	4632      	mov	r2, r6
    8262:	4629      	mov	r1, r5
    8264:	4620      	mov	r0, r4
    8266:	f7ff febd 	bl	7fe4 <l2cap_chan_create_seg>
	if (!ch->chan.conn) {
    826a:	6827      	ldr	r7, [r4, #0]
    826c:	b157      	cbz	r7, 8284 <l2cap_chan_le_send+0x36>
	len = buf->len - sdu_hdr_len;
    826e:	8985      	ldrh	r5, [r0, #12]
    8270:	1bad      	subs	r5, r5, r6
    8272:	2300      	movs	r3, #0
    8274:	4602      	mov	r2, r0
    8276:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    827a:	4638      	mov	r0, r7
    827c:	f7ff ff33 	bl	80e6 <bt_l2cap_send_cb>
}
    8280:	4628      	mov	r0, r5
    8282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    8284:	f012 fd4a 	bl	1ad1c <net_buf_unref>
		return -ECONNRESET;
    8288:	f06f 0567 	mvn.w	r5, #103	; 0x67
    828c:	e7f8      	b.n	8280 <l2cap_chan_le_send+0x32>
		return -EAGAIN;
    828e:	f06f 050a 	mvn.w	r5, #10
    8292:	e7f5      	b.n	8280 <l2cap_chan_le_send+0x32>

00008294 <l2cap_chan_le_send_sdu>:
{
    8294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8298:	b082      	sub	sp, #8
    829a:	9201      	str	r2, [sp, #4]
	total_len = net_buf_frags_len(*buf) + sent;
    829c:	680d      	ldr	r5, [r1, #0]
    829e:	462b      	mov	r3, r5
	size_t bytes = 0;
    82a0:	2200      	movs	r2, #0
    82a2:	e002      	b.n	82aa <l2cap_chan_le_send_sdu+0x16>
		bytes += buf->len;
    82a4:	899c      	ldrh	r4, [r3, #12]
    82a6:	4422      	add	r2, r4
		buf = buf->frags;
    82a8:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    82aa:	2b00      	cmp	r3, #0
    82ac:	d1fa      	bne.n	82a4 <l2cap_chan_le_send_sdu+0x10>
    82ae:	9b01      	ldr	r3, [sp, #4]
    82b0:	189c      	adds	r4, r3, r2
	if (total_len > ch->tx.mtu) {
    82b2:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    82b6:	4294      	cmp	r4, r2
    82b8:	dc54      	bgt.n	8364 <l2cap_chan_le_send_sdu+0xd0>
	if (!frag->len && frag->frags) {
    82ba:	89aa      	ldrh	r2, [r5, #12]
    82bc:	b912      	cbnz	r2, 82c4 <l2cap_chan_le_send_sdu+0x30>
    82be:	682a      	ldr	r2, [r5, #0]
    82c0:	b102      	cbz	r2, 82c4 <l2cap_chan_le_send_sdu+0x30>
		frag = frag->frags;
    82c2:	4615      	mov	r5, r2
    82c4:	4688      	mov	r8, r1
    82c6:	4607      	mov	r7, r0
	if (!sent) {
    82c8:	b10b      	cbz	r3, 82ce <l2cap_chan_le_send_sdu+0x3a>
		frag = frag->frags;
    82ca:	2600      	movs	r6, #0
    82cc:	e024      	b.n	8318 <l2cap_chan_le_send_sdu+0x84>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    82ce:	2202      	movs	r2, #2
    82d0:	4629      	mov	r1, r5
    82d2:	f7ff ffbc 	bl	824e <l2cap_chan_le_send>
		if (ret < 0) {
    82d6:	1e06      	subs	r6, r0, #0
    82d8:	db01      	blt.n	82de <l2cap_chan_le_send_sdu+0x4a>
		sent = ret;
    82da:	9601      	str	r6, [sp, #4]
    82dc:	e7f5      	b.n	82ca <l2cap_chan_le_send_sdu+0x36>
			if (ret == -EAGAIN) {
    82de:	f116 0f0b 	cmn.w	r6, #11
    82e2:	d002      	beq.n	82ea <l2cap_chan_le_send_sdu+0x56>
			*buf = frag;
    82e4:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    82e8:	e038      	b.n	835c <l2cap_chan_le_send_sdu+0xc8>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    82ea:	f105 0010 	add.w	r0, r5, #16
    82ee:	89eb      	ldrh	r3, [r5, #14]
    82f0:	4418      	add	r0, r3
    82f2:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    82f4:	2204      	movs	r2, #4
    82f6:	eb0d 0102 	add.w	r1, sp, r2
    82fa:	f020 0003 	bic.w	r0, r0, #3
    82fe:	f7f7 ffdf 	bl	2c0 <memcpy>
    8302:	e7ef      	b.n	82e4 <l2cap_chan_le_send_sdu+0x50>
		ret = l2cap_chan_le_send(ch, frag, 0);
    8304:	2200      	movs	r2, #0
    8306:	4629      	mov	r1, r5
    8308:	4638      	mov	r0, r7
    830a:	f7ff ffa0 	bl	824e <l2cap_chan_le_send>
		if (ret < 0) {
    830e:	1e06      	subs	r6, r0, #0
    8310:	db0e      	blt.n	8330 <l2cap_chan_le_send_sdu+0x9c>
	for (ret = 0; sent < total_len; sent += ret) {
    8312:	9b01      	ldr	r3, [sp, #4]
    8314:	4433      	add	r3, r6
    8316:	9301      	str	r3, [sp, #4]
    8318:	9b01      	ldr	r3, [sp, #4]
    831a:	429c      	cmp	r4, r3
    831c:	dd1b      	ble.n	8356 <l2cap_chan_le_send_sdu+0xc2>
		if (!frag->len) {
    831e:	89ab      	ldrh	r3, [r5, #12]
    8320:	2b00      	cmp	r3, #0
    8322:	d1ef      	bne.n	8304 <l2cap_chan_le_send_sdu+0x70>
			frag = net_buf_frag_del(NULL, frag);
    8324:	4629      	mov	r1, r5
    8326:	2000      	movs	r0, #0
    8328:	f012 fd38 	bl	1ad9c <net_buf_frag_del>
    832c:	4605      	mov	r5, r0
    832e:	e7e9      	b.n	8304 <l2cap_chan_le_send_sdu+0x70>
			if (ret == -EAGAIN) {
    8330:	f116 0f0b 	cmn.w	r6, #11
    8334:	d002      	beq.n	833c <l2cap_chan_le_send_sdu+0xa8>
			*buf = frag;
    8336:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    833a:	e00f      	b.n	835c <l2cap_chan_le_send_sdu+0xc8>
    833c:	f105 0010 	add.w	r0, r5, #16
    8340:	89eb      	ldrh	r3, [r5, #14]
    8342:	4418      	add	r0, r3
    8344:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    8346:	2204      	movs	r2, #4
    8348:	eb0d 0102 	add.w	r1, sp, r2
    834c:	f020 0003 	bic.w	r0, r0, #3
    8350:	f7f7 ffb6 	bl	2c0 <memcpy>
    8354:	e7ef      	b.n	8336 <l2cap_chan_le_send_sdu+0xa2>
	net_buf_unref(frag);
    8356:	4628      	mov	r0, r5
    8358:	f012 fce0 	bl	1ad1c <net_buf_unref>
}
    835c:	4630      	mov	r0, r6
    835e:	b002      	add	sp, #8
    8360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
    8364:	f06f 0679 	mvn.w	r6, #121	; 0x79
    8368:	e7f8      	b.n	835c <l2cap_chan_le_send_sdu+0xc8>

0000836a <l2cap_chan_le_send_resume>:
{
    836a:	b510      	push	{r4, lr}
    836c:	b082      	sub	sp, #8
    836e:	4604      	mov	r4, r0
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    8370:	4620      	mov	r0, r4
    8372:	f7ff fc91 	bl	7c98 <l2cap_chan_le_get_tx_buf>
    8376:	9001      	str	r0, [sp, #4]
    8378:	b180      	cbz	r0, 839c <l2cap_chan_le_send_resume+0x32>
    837a:	f100 0310 	add.w	r3, r0, #16
    837e:	89c2      	ldrh	r2, [r0, #14]
    8380:	4413      	add	r3, r2
    8382:	3303      	adds	r3, #3
    8384:	f023 0303 	bic.w	r3, r3, #3
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    8388:	681a      	ldr	r2, [r3, #0]
    838a:	a901      	add	r1, sp, #4
    838c:	4620      	mov	r0, r4
    838e:	f7ff ff81 	bl	8294 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    8392:	2800      	cmp	r0, #0
    8394:	daec      	bge.n	8370 <l2cap_chan_le_send_resume+0x6>
			if (sent == -EAGAIN) {
    8396:	f110 0f0b 	cmn.w	r0, #11
    839a:	d001      	beq.n	83a0 <l2cap_chan_le_send_resume+0x36>
}
    839c:	b002      	add	sp, #8
    839e:	bd10      	pop	{r4, pc}
				ch->tx_buf = buf;
    83a0:	9b01      	ldr	r3, [sp, #4]
    83a2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    83a6:	e7f9      	b.n	839c <l2cap_chan_le_send_resume+0x32>

000083a8 <l2cap_send_reject>:
{
    83a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    83ac:	4680      	mov	r8, r0
    83ae:	4691      	mov	r9, r2
    83b0:	461e      	mov	r6, r3
    83b2:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    83b6:	1cbb      	adds	r3, r7, #2
    83b8:	460a      	mov	r2, r1
    83ba:	2101      	movs	r1, #1
    83bc:	2000      	movs	r0, #0
    83be:	f7ff fdff 	bl	7fc0 <l2cap_create_le_sig_pdu>
    83c2:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    83c4:	f100 0508 	add.w	r5, r0, #8
    83c8:	2102      	movs	r1, #2
    83ca:	4628      	mov	r0, r5
    83cc:	f012 fcf2 	bl	1adb4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    83d0:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    83d4:	b126      	cbz	r6, 83e0 <l2cap_send_reject+0x38>
		net_buf_add_mem(buf, data, data_len);
    83d6:	463a      	mov	r2, r7
    83d8:	4631      	mov	r1, r6
    83da:	4628      	mov	r0, r5
    83dc:	f012 fcf0 	bl	1adc0 <net_buf_simple_add_mem>
    83e0:	2300      	movs	r3, #0
    83e2:	4622      	mov	r2, r4
    83e4:	2105      	movs	r1, #5
    83e6:	4640      	mov	r0, r8
    83e8:	f7ff fe7d 	bl	80e6 <bt_l2cap_send_cb>
    83ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000083f0 <le_conn_param_update_req>:
{
    83f0:	b570      	push	{r4, r5, r6, lr}
    83f2:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    83f4:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    83f6:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    83f8:	8990      	ldrh	r0, [r2, #12]
    83fa:	2807      	cmp	r0, #7
    83fc:	d908      	bls.n	8410 <le_conn_param_update_req+0x20>
    83fe:	4610      	mov	r0, r2
	if (conn->role != BT_HCI_ROLE_MASTER) {
    8400:	78e2      	ldrb	r2, [r4, #3]
    8402:	b13a      	cbz	r2, 8414 <le_conn_param_update_req+0x24>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    8404:	2200      	movs	r2, #0
    8406:	9200      	str	r2, [sp, #0]
    8408:	4613      	mov	r3, r2
    840a:	4620      	mov	r0, r4
    840c:	f7ff ffcc 	bl	83a8 <l2cap_send_reject>
}
    8410:	b004      	add	sp, #16
    8412:	bd70      	pop	{r4, r5, r6, pc}
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    8414:	881a      	ldrh	r2, [r3, #0]
    8416:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    841a:	885a      	ldrh	r2, [r3, #2]
    841c:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    8420:	889a      	ldrh	r2, [r3, #4]
    8422:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    8426:	88db      	ldrh	r3, [r3, #6]
    8428:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    842c:	2302      	movs	r3, #2
    842e:	460a      	mov	r2, r1
    8430:	2113      	movs	r1, #19
    8432:	f7ff fdc5 	bl	7fc0 <l2cap_create_le_sig_pdu>
    8436:	4606      	mov	r6, r0
	accepted = le_param_req(conn, &param);
    8438:	a902      	add	r1, sp, #8
    843a:	4620      	mov	r0, r4
    843c:	f7fe fcc2 	bl	6dc4 <le_param_req>
    8440:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    8442:	2102      	movs	r1, #2
    8444:	f106 0008 	add.w	r0, r6, #8
    8448:	f012 fcb4 	bl	1adb4 <net_buf_simple_add>
	if (accepted) {
    844c:	b17d      	cbz	r5, 846e <le_conn_param_update_req+0x7e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    844e:	2300      	movs	r3, #0
    8450:	7003      	strb	r3, [r0, #0]
    8452:	7043      	strb	r3, [r0, #1]
    8454:	2300      	movs	r3, #0
    8456:	4632      	mov	r2, r6
    8458:	2105      	movs	r1, #5
    845a:	4620      	mov	r0, r4
    845c:	f7ff fe43 	bl	80e6 <bt_l2cap_send_cb>
	if (accepted) {
    8460:	2d00      	cmp	r5, #0
    8462:	d0d5      	beq.n	8410 <le_conn_param_update_req+0x20>
		bt_conn_le_conn_update(conn, &param);
    8464:	a902      	add	r1, sp, #8
    8466:	4620      	mov	r0, r4
    8468:	f7ff f976 	bl	7758 <bt_conn_le_conn_update>
    846c:	e7d0      	b.n	8410 <le_conn_param_update_req+0x20>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    846e:	2301      	movs	r3, #1
    8470:	7003      	strb	r3, [r0, #0]
    8472:	2300      	movs	r3, #0
    8474:	7043      	strb	r3, [r0, #1]
    8476:	e7ed      	b.n	8454 <le_conn_param_update_req+0x64>

00008478 <le_disconn_req>:
{
    8478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    847c:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    847e:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    8480:	6897      	ldr	r7, [r2, #8]
	if (buf->len < sizeof(*req)) {
    8482:	8993      	ldrh	r3, [r2, #12]
    8484:	2b03      	cmp	r3, #3
    8486:	d802      	bhi.n	848e <le_disconn_req+0x16>
}
    8488:	b004      	add	sp, #16
    848a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    848e:	4614      	mov	r4, r2
    8490:	460d      	mov	r5, r1
	chan = l2cap_remove_tx_cid(conn, scid);
    8492:	8879      	ldrh	r1, [r7, #2]
    8494:	4630      	mov	r0, r6
    8496:	f7ff fb5f 	bl	7b58 <l2cap_remove_tx_cid>
	if (!chan) {
    849a:	4680      	mov	r8, r0
    849c:	b1d0      	cbz	r0, 84d4 <le_disconn_req+0x5c>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    849e:	2304      	movs	r3, #4
    84a0:	462a      	mov	r2, r5
    84a2:	2107      	movs	r1, #7
    84a4:	4620      	mov	r0, r4
    84a6:	f7ff fd8b 	bl	7fc0 <l2cap_create_le_sig_pdu>
    84aa:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    84ac:	2104      	movs	r1, #4
    84ae:	3008      	adds	r0, #8
    84b0:	f012 fc80 	bl	1adb4 <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    84b4:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
    84b8:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    84ba:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
    84be:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    84c0:	4640      	mov	r0, r8
    84c2:	f7ff fcb0 	bl	7e26 <bt_l2cap_chan_del>
    84c6:	2300      	movs	r3, #0
    84c8:	4622      	mov	r2, r4
    84ca:	2105      	movs	r1, #5
    84cc:	4630      	mov	r0, r6
    84ce:	f7ff fe0a 	bl	80e6 <bt_l2cap_send_cb>
    84d2:	e7d9      	b.n	8488 <le_disconn_req+0x10>
		data.scid = req->scid;
    84d4:	887b      	ldrh	r3, [r7, #2]
    84d6:	f8ad 300c 	strh.w	r3, [sp, #12]
		data.dcid = req->dcid;
    84da:	883b      	ldrh	r3, [r7, #0]
    84dc:	f8ad 300e 	strh.w	r3, [sp, #14]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    84e0:	2304      	movs	r3, #4
    84e2:	9300      	str	r3, [sp, #0]
    84e4:	ab03      	add	r3, sp, #12
    84e6:	2202      	movs	r2, #2
    84e8:	4629      	mov	r1, r5
    84ea:	4630      	mov	r0, r6
    84ec:	f7ff ff5c 	bl	83a8 <l2cap_send_reject>
    84f0:	e7ca      	b.n	8488 <le_disconn_req+0x10>

000084f2 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
    84f2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    84f4:	b108      	cbz	r0, 84fa <bt_l2cap_le_lookup_tx_cid+0x8>
    84f6:	3808      	subs	r0, #8
    84f8:	e006      	b.n	8508 <bt_l2cap_le_lookup_tx_cid+0x16>
    84fa:	2000      	movs	r0, #0
    84fc:	e004      	b.n	8508 <bt_l2cap_le_lookup_tx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    84fe:	461a      	mov	r2, r3
    8500:	e00b      	b.n	851a <bt_l2cap_le_lookup_tx_cid+0x28>
	return node->next;
    8502:	6883      	ldr	r3, [r0, #8]
    8504:	f1a3 0008 	sub.w	r0, r3, #8
    8508:	b168      	cbz	r0, 8526 <bt_l2cap_le_lookup_tx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    850a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    850e:	428b      	cmp	r3, r1
    8510:	d009      	beq.n	8526 <bt_l2cap_le_lookup_tx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8512:	f110 0308 	adds.w	r3, r0, #8
    8516:	d0f2      	beq.n	84fe <bt_l2cap_le_lookup_tx_cid+0xc>
	return node->next;
    8518:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    851a:	b112      	cbz	r2, 8522 <bt_l2cap_le_lookup_tx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    851c:	2b00      	cmp	r3, #0
    851e:	d1f0      	bne.n	8502 <bt_l2cap_le_lookup_tx_cid+0x10>
    8520:	e7f0      	b.n	8504 <bt_l2cap_le_lookup_tx_cid+0x12>
    8522:	2000      	movs	r0, #0
    8524:	e7f0      	b.n	8508 <bt_l2cap_le_lookup_tx_cid+0x16>
}
    8526:	4770      	bx	lr

00008528 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
    8528:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    852a:	b108      	cbz	r0, 8530 <bt_l2cap_le_lookup_rx_cid+0x8>
    852c:	3808      	subs	r0, #8
    852e:	e006      	b.n	853e <bt_l2cap_le_lookup_rx_cid+0x16>
    8530:	2000      	movs	r0, #0
    8532:	e004      	b.n	853e <bt_l2cap_le_lookup_rx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8534:	461a      	mov	r2, r3
    8536:	e00b      	b.n	8550 <bt_l2cap_le_lookup_rx_cid+0x28>
	return node->next;
    8538:	6883      	ldr	r3, [r0, #8]
    853a:	f1a3 0008 	sub.w	r0, r3, #8
    853e:	b168      	cbz	r0, 855c <bt_l2cap_le_lookup_rx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    8540:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    8544:	428b      	cmp	r3, r1
    8546:	d009      	beq.n	855c <bt_l2cap_le_lookup_rx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8548:	f110 0308 	adds.w	r3, r0, #8
    854c:	d0f2      	beq.n	8534 <bt_l2cap_le_lookup_rx_cid+0xc>
	return node->next;
    854e:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    8550:	b112      	cbz	r2, 8558 <bt_l2cap_le_lookup_rx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8552:	2b00      	cmp	r3, #0
    8554:	d1f0      	bne.n	8538 <bt_l2cap_le_lookup_rx_cid+0x10>
    8556:	e7f0      	b.n	853a <bt_l2cap_le_lookup_rx_cid+0x12>
    8558:	2000      	movs	r0, #0
    855a:	e7f0      	b.n	853e <bt_l2cap_le_lookup_rx_cid+0x16>
}
    855c:	4770      	bx	lr

0000855e <l2cap_chan_alloc_cid>:
{
    855e:	b570      	push	{r4, r5, r6, lr}
    8560:	4606      	mov	r6, r0
	if (ch && ch->rx.cid > 0) {
    8562:	460d      	mov	r5, r1
    8564:	b1a1      	cbz	r1, 8590 <l2cap_chan_alloc_cid+0x32>
    8566:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    856a:	b9ab      	cbnz	r3, 8598 <l2cap_chan_alloc_cid+0x3a>
    856c:	2440      	movs	r4, #64	; 0x40
    856e:	e001      	b.n	8574 <l2cap_chan_alloc_cid+0x16>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    8570:	3401      	adds	r4, #1
    8572:	b2a4      	uxth	r4, r4
    8574:	2c7f      	cmp	r4, #127	; 0x7f
    8576:	d80d      	bhi.n	8594 <l2cap_chan_alloc_cid+0x36>
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    8578:	2d00      	cmp	r5, #0
    857a:	d0f9      	beq.n	8570 <l2cap_chan_alloc_cid+0x12>
    857c:	4621      	mov	r1, r4
    857e:	4630      	mov	r0, r6
    8580:	f7ff ffd2 	bl	8528 <bt_l2cap_le_lookup_rx_cid>
    8584:	2800      	cmp	r0, #0
    8586:	d1f3      	bne.n	8570 <l2cap_chan_alloc_cid+0x12>
			ch->rx.cid = cid;
    8588:	f8a5 4040 	strh.w	r4, [r5, #64]	; 0x40
			return ch;
    858c:	4628      	mov	r0, r5
    858e:	bd70      	pop	{r4, r5, r6, pc}
    8590:	2440      	movs	r4, #64	; 0x40
    8592:	e7ef      	b.n	8574 <l2cap_chan_alloc_cid+0x16>
	return NULL;
    8594:	2000      	movs	r0, #0
    8596:	bd70      	pop	{r4, r5, r6, pc}
		return ch;
    8598:	4608      	mov	r0, r1
}
    859a:	bd70      	pop	{r4, r5, r6, pc}

0000859c <l2cap_chan_add>:
{
    859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    859e:	4606      	mov	r6, r0
    85a0:	460c      	mov	r4, r1
    85a2:	4617      	mov	r7, r2
	ch = l2cap_chan_alloc_cid(conn, chan);
    85a4:	f7ff ffdb 	bl	855e <l2cap_chan_alloc_cid>
	if (!ch) {
    85a8:	b1c0      	cbz	r0, 85dc <l2cap_chan_add+0x40>
    85aa:	4605      	mov	r5, r0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    85ac:	490c      	ldr	r1, [pc, #48]	; (85e0 <l2cap_chan_add+0x44>)
    85ae:	f104 0010 	add.w	r0, r4, #16
    85b2:	f021 fccf 	bl	29f54 <k_delayed_work_init>
	bt_l2cap_chan_add(conn, chan, destroy);
    85b6:	463a      	mov	r2, r7
    85b8:	4621      	mov	r1, r4
    85ba:	4630      	mov	r0, r6
    85bc:	f7ff fcc2 	bl	7f44 <bt_l2cap_chan_add>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    85c0:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    85c4:	3b40      	subs	r3, #64	; 0x40
    85c6:	b29b      	uxth	r3, r3
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    85c8:	2b3f      	cmp	r3, #63	; 0x3f
    85ca:	d901      	bls.n	85d0 <l2cap_chan_add+0x34>
	return true;
    85cc:	2001      	movs	r0, #1
}
    85ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECT);
    85d0:	2101      	movs	r1, #1
    85d2:	4620      	mov	r0, r4
    85d4:	f7ff fc24 	bl	7e20 <bt_l2cap_chan_set_state>
	return true;
    85d8:	2001      	movs	r0, #1
    85da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
    85dc:	2000      	movs	r0, #0
    85de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85e0:	00007e51 	.word	0x00007e51

000085e4 <bt_l2cap_connected>:
{
    85e4:	b530      	push	{r4, r5, lr}
    85e6:	b083      	sub	sp, #12
    85e8:	4605      	mov	r5, r0
	return list->head;
    85ea:	4b18      	ldr	r3, [pc, #96]	; (864c <bt_l2cap_connected+0x68>)
    85ec:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    85ee:	b10c      	cbz	r4, 85f4 <bt_l2cap_connected+0x10>
    85f0:	3c08      	subs	r4, #8
    85f2:	e00a      	b.n	860a <bt_l2cap_connected+0x26>
    85f4:	2400      	movs	r4, #0
    85f6:	e008      	b.n	860a <bt_l2cap_connected+0x26>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    85f8:	f114 0308 	adds.w	r3, r4, #8
    85fc:	d01f      	beq.n	863e <bt_l2cap_connected+0x5a>
	return node->next;
    85fe:	68a2      	ldr	r2, [r4, #8]
    8600:	b1fa      	cbz	r2, 8642 <bt_l2cap_connected+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8602:	b103      	cbz	r3, 8606 <bt_l2cap_connected+0x22>
	return node->next;
    8604:	68a3      	ldr	r3, [r4, #8]
    8606:	f1a3 0408 	sub.w	r4, r3, #8
    860a:	b1e4      	cbz	r4, 8646 <bt_l2cap_connected+0x62>
		if (fchan->accept(conn, &chan) < 0) {
    860c:	6863      	ldr	r3, [r4, #4]
    860e:	a901      	add	r1, sp, #4
    8610:	4628      	mov	r0, r5
    8612:	4798      	blx	r3
    8614:	2800      	cmp	r0, #0
    8616:	dbef      	blt.n	85f8 <bt_l2cap_connected+0x14>
		ch = BT_L2CAP_LE_CHAN(chan);
    8618:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    861a:	8823      	ldrh	r3, [r4, #0]
    861c:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
		ch->tx.cid = fchan->cid;
    8620:	8823      	ldrh	r3, [r4, #0]
    8622:	f8a1 3060 	strh.w	r3, [r1, #96]	; 0x60
		if (!l2cap_chan_add(conn, chan, NULL)) {
    8626:	2200      	movs	r2, #0
    8628:	4628      	mov	r0, r5
    862a:	f7ff ffb7 	bl	859c <l2cap_chan_add>
    862e:	b150      	cbz	r0, 8646 <bt_l2cap_connected+0x62>
		if (chan->ops->connected) {
    8630:	9801      	ldr	r0, [sp, #4]
    8632:	6843      	ldr	r3, [r0, #4]
    8634:	681b      	ldr	r3, [r3, #0]
    8636:	2b00      	cmp	r3, #0
    8638:	d0de      	beq.n	85f8 <bt_l2cap_connected+0x14>
			chan->ops->connected(chan);
    863a:	4798      	blx	r3
    863c:	e7dc      	b.n	85f8 <bt_l2cap_connected+0x14>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    863e:	461a      	mov	r2, r3
    8640:	e7de      	b.n	8600 <bt_l2cap_connected+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    8642:	2400      	movs	r4, #0
    8644:	e7e1      	b.n	860a <bt_l2cap_connected+0x26>
}
    8646:	b003      	add	sp, #12
    8648:	bd30      	pop	{r4, r5, pc}
    864a:	bf00      	nop
    864c:	20000748 	.word	0x20000748

00008650 <le_conn_req>:
{
    8650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8654:	b085      	sub	sp, #20
	struct bt_conn *conn = l2cap->chan.chan.conn;
    8656:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    8658:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    865a:	8990      	ldrh	r0, [r2, #12]
    865c:	2809      	cmp	r0, #9
    865e:	d912      	bls.n	8686 <le_conn_req+0x36>
	psm = sys_le16_to_cpu(req->psm);
    8660:	f8b3 9000 	ldrh.w	r9, [r3]
	scid = sys_le16_to_cpu(req->scid);
    8664:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    8668:	fa1f fa88 	uxth.w	sl, r8
	mtu = sys_le16_to_cpu(req->mtu);
    866c:	889e      	ldrh	r6, [r3, #4]
    866e:	b2b0      	uxth	r0, r6
	mps = sys_le16_to_cpu(req->mps);
    8670:	88df      	ldrh	r7, [r3, #6]
    8672:	fa1f fe87 	uxth.w	lr, r7
	credits = sys_le16_to_cpu(req->credits);
    8676:	891d      	ldrh	r5, [r3, #8]
    8678:	fa1f fb85 	uxth.w	fp, r5
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    867c:	2816      	cmp	r0, #22
    867e:	d902      	bls.n	8686 <le_conn_req+0x36>
    8680:	f1be 0f16 	cmp.w	lr, #22
    8684:	d802      	bhi.n	868c <le_conn_req+0x3c>
}
    8686:	b005      	add	sp, #20
    8688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    868c:	4610      	mov	r0, r2
    868e:	460a      	mov	r2, r1
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    8690:	230a      	movs	r3, #10
    8692:	2115      	movs	r1, #21
    8694:	f7ff fc94 	bl	7fc0 <l2cap_create_le_sig_pdu>
    8698:	9000      	str	r0, [sp, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    869a:	210a      	movs	r1, #10
    869c:	3008      	adds	r0, #8
    869e:	f012 fb89 	bl	1adb4 <net_buf_simple_add>
    86a2:	9001      	str	r0, [sp, #4]
	memset(rsp, 0, sizeof(*rsp));
    86a4:	220a      	movs	r2, #10
    86a6:	2100      	movs	r1, #0
    86a8:	f022 f936 	bl	2a918 <memset>
	server = l2cap_server_lookup_psm(psm);
    86ac:	4648      	mov	r0, r9
    86ae:	f7ff fa35 	bl	7b1c <l2cap_server_lookup_psm>
	if (!server) {
    86b2:	4681      	mov	r9, r0
    86b4:	b168      	cbz	r0, 86d2 <le_conn_req+0x82>
	if (conn->sec_level < server->sec_level) {
    86b6:	7a22      	ldrb	r2, [r4, #8]
    86b8:	7883      	ldrb	r3, [r0, #2]
    86ba:	429a      	cmp	r2, r3
    86bc:	d20d      	bcs.n	86da <le_conn_req+0x8a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_AUTHENTICATION);
    86be:	2305      	movs	r3, #5
    86c0:	9a01      	ldr	r2, [sp, #4]
    86c2:	8113      	strh	r3, [r2, #8]
    86c4:	2300      	movs	r3, #0
    86c6:	9a00      	ldr	r2, [sp, #0]
    86c8:	2105      	movs	r1, #5
    86ca:	4620      	mov	r0, r4
    86cc:	f7ff fd0b 	bl	80e6 <bt_l2cap_send_cb>
    86d0:	e7d9      	b.n	8686 <le_conn_req+0x36>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_PSM_NOT_SUPP);
    86d2:	2302      	movs	r3, #2
    86d4:	9a01      	ldr	r2, [sp, #4]
    86d6:	8113      	strh	r3, [r2, #8]
		goto rsp;
    86d8:	e7f4      	b.n	86c4 <le_conn_req+0x74>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    86da:	f1aa 0340 	sub.w	r3, sl, #64	; 0x40
    86de:	b29b      	uxth	r3, r3
    86e0:	2b3f      	cmp	r3, #63	; 0x3f
    86e2:	d903      	bls.n	86ec <le_conn_req+0x9c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_INVALID_SCID);
    86e4:	2309      	movs	r3, #9
    86e6:	9a01      	ldr	r2, [sp, #4]
    86e8:	8113      	strh	r3, [r2, #8]
		goto rsp;
    86ea:	e7eb      	b.n	86c4 <le_conn_req+0x74>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    86ec:	4651      	mov	r1, sl
    86ee:	4620      	mov	r0, r4
    86f0:	f7ff feff 	bl	84f2 <bt_l2cap_le_lookup_tx_cid>
    86f4:	9003      	str	r0, [sp, #12]
	if (chan) {
    86f6:	b118      	cbz	r0, 8700 <le_conn_req+0xb0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_SCID_IN_USE);
    86f8:	230a      	movs	r3, #10
    86fa:	9a01      	ldr	r2, [sp, #4]
    86fc:	8113      	strh	r3, [r2, #8]
		goto rsp;
    86fe:	e7e1      	b.n	86c4 <le_conn_req+0x74>
	if (server->accept(conn, &chan) < 0) {
    8700:	f8d9 3004 	ldr.w	r3, [r9, #4]
    8704:	a903      	add	r1, sp, #12
    8706:	4620      	mov	r0, r4
    8708:	4798      	blx	r3
    870a:	2800      	cmp	r0, #0
    870c:	da03      	bge.n	8716 <le_conn_req+0xc6>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    870e:	2304      	movs	r3, #4
    8710:	9a01      	ldr	r2, [sp, #4]
    8712:	8113      	strh	r3, [r2, #8]
		goto rsp;
    8714:	e7d6      	b.n	86c4 <le_conn_req+0x74>
	chan->required_sec_level = server->sec_level;
    8716:	9903      	ldr	r1, [sp, #12]
    8718:	f899 3002 	ldrb.w	r3, [r9, #2]
    871c:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    8720:	4a1e      	ldr	r2, [pc, #120]	; (879c <le_conn_req+0x14c>)
    8722:	4620      	mov	r0, r4
    8724:	f7ff ff3a 	bl	859c <l2cap_chan_add>
    8728:	b918      	cbnz	r0, 8732 <le_conn_req+0xe2>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    872a:	2304      	movs	r3, #4
    872c:	9a01      	ldr	r2, [sp, #4]
    872e:	8113      	strh	r3, [r2, #8]
    8730:	e7c8      	b.n	86c4 <le_conn_req+0x74>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    8732:	f8dd a00c 	ldr.w	sl, [sp, #12]
		l2cap_chan_tx_init(ch);
    8736:	4650      	mov	r0, sl
    8738:	f7ff fabd 	bl	7cb6 <l2cap_chan_tx_init>
		ch->tx.cid = scid;
    873c:	f8aa 8060 	strh.w	r8, [sl, #96]	; 0x60
		ch->tx.mps = mps;
    8740:	f8aa 7064 	strh.w	r7, [sl, #100]	; 0x64
		ch->tx.mtu = mtu;
    8744:	f8aa 6062 	strh.w	r6, [sl, #98]	; 0x62
		ch->tx.init_credits = credits;
    8748:	f8aa 5066 	strh.w	r5, [sl, #102]	; 0x66
		l2cap_chan_tx_give_credits(ch, credits);
    874c:	4659      	mov	r1, fp
    874e:	4650      	mov	r0, sl
    8750:	f7ff fa79 	bl	7c46 <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_init(ch);
    8754:	4650      	mov	r0, sl
    8756:	f7ff fac1 	bl	7cdc <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    875a:	f8ba 1046 	ldrh.w	r1, [sl, #70]	; 0x46
    875e:	4650      	mov	r0, sl
    8760:	f7ff fa64 	bl	7c2c <l2cap_chan_rx_give_credits>
		chan->psm = server->psm;
    8764:	9803      	ldr	r0, [sp, #12]
    8766:	f8b9 3000 	ldrh.w	r3, [r9]
    876a:	8743      	strh	r3, [r0, #58]	; 0x3a
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECTED);
    876c:	2103      	movs	r1, #3
    876e:	f7ff fb57 	bl	7e20 <bt_l2cap_chan_set_state>
		if (chan->ops->connected) {
    8772:	9803      	ldr	r0, [sp, #12]
    8774:	6843      	ldr	r3, [r0, #4]
    8776:	681b      	ldr	r3, [r3, #0]
    8778:	b103      	cbz	r3, 877c <le_conn_req+0x12c>
			chan->ops->connected(chan);
    877a:	4798      	blx	r3
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    877c:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    8780:	9901      	ldr	r1, [sp, #4]
    8782:	800b      	strh	r3, [r1, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    8784:	f8ba 3044 	ldrh.w	r3, [sl, #68]	; 0x44
    8788:	808b      	strh	r3, [r1, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    878a:	f8ba 3042 	ldrh.w	r3, [sl, #66]	; 0x42
    878e:	804b      	strh	r3, [r1, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    8790:	f8ba 3046 	ldrh.w	r3, [sl, #70]	; 0x46
    8794:	80cb      	strh	r3, [r1, #6]
		rsp->result = BT_L2CAP_SUCCESS;
    8796:	2300      	movs	r3, #0
    8798:	810b      	strh	r3, [r1, #8]
    879a:	e793      	b.n	86c4 <le_conn_req+0x74>
    879c:	00007c61 	.word	0x00007c61

000087a0 <l2cap_le_connect>:

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static int l2cap_le_connect(struct bt_conn *conn, struct bt_l2cap_le_chan *ch,
			    u16_t psm)
{
	if (psm < L2CAP_LE_PSM_START || psm > L2CAP_LE_PSM_END) {
    87a0:	1e53      	subs	r3, r2, #1
    87a2:	b29b      	uxth	r3, r3
    87a4:	2bfe      	cmp	r3, #254	; 0xfe
    87a6:	d814      	bhi.n	87d2 <l2cap_le_connect+0x32>
{
    87a8:	b570      	push	{r4, r5, r6, lr}
    87aa:	4615      	mov	r5, r2
    87ac:	460c      	mov	r4, r1
    87ae:	4606      	mov	r6, r0
		return -EINVAL;
	}

	l2cap_chan_tx_init(ch);
    87b0:	4608      	mov	r0, r1
    87b2:	f7ff fa80 	bl	7cb6 <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    87b6:	4620      	mov	r0, r4
    87b8:	f7ff fa90 	bl	7cdc <l2cap_chan_rx_init>

	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    87bc:	4a08      	ldr	r2, [pc, #32]	; (87e0 <l2cap_le_connect+0x40>)
    87be:	4621      	mov	r1, r4
    87c0:	4630      	mov	r0, r6
    87c2:	f7ff feeb 	bl	859c <l2cap_chan_add>
    87c6:	b138      	cbz	r0, 87d8 <l2cap_le_connect+0x38>
		return -ENOMEM;
	}

	ch->chan.psm = psm;
    87c8:	8765      	strh	r5, [r4, #58]	; 0x3a

	return l2cap_le_conn_req(ch);
    87ca:	4620      	mov	r0, r4
    87cc:	f7ff fcb6 	bl	813c <l2cap_le_conn_req>
    87d0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    87d2:	f06f 0015 	mvn.w	r0, #21
    87d6:	4770      	bx	lr
		return -ENOMEM;
    87d8:	f06f 000b 	mvn.w	r0, #11
}
    87dc:	bd70      	pop	{r4, r5, r6, pc}
    87de:	bf00      	nop
    87e0:	00007c61 	.word	0x00007c61

000087e4 <bt_l2cap_server_register>:
	if (server->psm < L2CAP_LE_PSM_START ||
    87e4:	8802      	ldrh	r2, [r0, #0]
    87e6:	1e53      	subs	r3, r2, #1
    87e8:	b29b      	uxth	r3, r3
    87ea:	2bfe      	cmp	r3, #254	; 0xfe
    87ec:	d81d      	bhi.n	882a <bt_l2cap_server_register+0x46>
	    server->psm > L2CAP_LE_PSM_END || !server->accept) {
    87ee:	6843      	ldr	r3, [r0, #4]
    87f0:	b1f3      	cbz	r3, 8830 <bt_l2cap_server_register+0x4c>
	if (server->sec_level > BT_SECURITY_FIPS) {
    87f2:	7883      	ldrb	r3, [r0, #2]
    87f4:	2b04      	cmp	r3, #4
    87f6:	d81e      	bhi.n	8836 <bt_l2cap_server_register+0x52>
{
    87f8:	b510      	push	{r4, lr}
	} else if (server->sec_level < BT_SECURITY_LOW) {
    87fa:	b90b      	cbnz	r3, 8800 <bt_l2cap_server_register+0x1c>
		server->sec_level = BT_SECURITY_LOW;
    87fc:	2301      	movs	r3, #1
    87fe:	7083      	strb	r3, [r0, #2]
    8800:	4604      	mov	r4, r0
	if (l2cap_server_lookup_psm(server->psm)) {
    8802:	4610      	mov	r0, r2
    8804:	f7ff f98a 	bl	7b1c <l2cap_server_lookup_psm>
    8808:	b9c0      	cbnz	r0, 883c <bt_l2cap_server_register+0x58>
	sys_slist_append(&servers, &server->node);
    880a:	f104 0308 	add.w	r3, r4, #8
	node->next = NULL;
    880e:	2200      	movs	r2, #0
    8810:	60a2      	str	r2, [r4, #8]
	if (!list->tail) {
    8812:	4a0c      	ldr	r2, [pc, #48]	; (8844 <bt_l2cap_server_register+0x60>)
    8814:	6852      	ldr	r2, [r2, #4]
    8816:	b122      	cbz	r2, 8822 <bt_l2cap_server_register+0x3e>
		list->tail->next = node;
    8818:	6013      	str	r3, [r2, #0]
		list->tail = node;
    881a:	4a0a      	ldr	r2, [pc, #40]	; (8844 <bt_l2cap_server_register+0x60>)
    881c:	6053      	str	r3, [r2, #4]
	return 0;
    881e:	2000      	movs	r0, #0
    8820:	bd10      	pop	{r4, pc}
		list->tail = node;
    8822:	4a08      	ldr	r2, [pc, #32]	; (8844 <bt_l2cap_server_register+0x60>)
    8824:	6053      	str	r3, [r2, #4]
		list->head = node;
    8826:	6013      	str	r3, [r2, #0]
    8828:	bd10      	pop	{r4, pc}
		return -EINVAL;
    882a:	f06f 0015 	mvn.w	r0, #21
    882e:	4770      	bx	lr
    8830:	f06f 0015 	mvn.w	r0, #21
    8834:	4770      	bx	lr
		return -EINVAL;
    8836:	f06f 0015 	mvn.w	r0, #21
    883a:	4770      	bx	lr
		return -EADDRINUSE;
    883c:	f06f 006f 	mvn.w	r0, #111	; 0x6f
}
    8840:	bd10      	pop	{r4, pc}
    8842:	bf00      	nop
    8844:	20000750 	.word	0x20000750

00008848 <bt_l2cap_update_conn_param>:
{
    8848:	b570      	push	{r4, r5, r6, lr}
    884a:	4606      	mov	r6, r0
    884c:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    884e:	f7ff f91f 	bl	7a90 <get_ident>
    8852:	2308      	movs	r3, #8
    8854:	4602      	mov	r2, r0
    8856:	2112      	movs	r1, #18
    8858:	2000      	movs	r0, #0
    885a:	f7ff fbb1 	bl	7fc0 <l2cap_create_le_sig_pdu>
    885e:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    8860:	2108      	movs	r1, #8
    8862:	4408      	add	r0, r1
    8864:	f012 faa6 	bl	1adb4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    8868:	8823      	ldrh	r3, [r4, #0]
    886a:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    886c:	8863      	ldrh	r3, [r4, #2]
    886e:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    8870:	88a3      	ldrh	r3, [r4, #4]
    8872:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    8874:	88e3      	ldrh	r3, [r4, #6]
    8876:	80c3      	strh	r3, [r0, #6]
    8878:	2300      	movs	r3, #0
    887a:	462a      	mov	r2, r5
    887c:	2105      	movs	r1, #5
    887e:	4630      	mov	r0, r6
    8880:	f7ff fc31 	bl	80e6 <bt_l2cap_send_cb>
}
    8884:	2000      	movs	r0, #0
    8886:	bd70      	pop	{r4, r5, r6, pc}

00008888 <bt_l2cap_init>:
{
    8888:	b508      	push	{r3, lr}
	bt_l2cap_le_fixed_chan_register(&chan);
    888a:	4802      	ldr	r0, [pc, #8]	; (8894 <bt_l2cap_init+0xc>)
    888c:	f7ff fa84 	bl	7d98 <bt_l2cap_le_fixed_chan_register>
    8890:	bd08      	pop	{r3, pc}
    8892:	bf00      	nop
    8894:	2000bac8 	.word	0x2000bac8

00008898 <bt_l2cap_chan_connect>:
int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    8898:	b188      	cbz	r0, 88be <bt_l2cap_chan_connect+0x26>
{
    889a:	b508      	push	{r3, lr}
    889c:	4603      	mov	r3, r0
	if (!conn || conn->state != BT_CONN_CONNECTED) {
    889e:	7b00      	ldrb	r0, [r0, #12]
    88a0:	2803      	cmp	r0, #3
    88a2:	d10f      	bne.n	88c4 <bt_l2cap_chan_connect+0x2c>
		return -ENOTCONN;
	}

	if (!chan) {
    88a4:	b189      	cbz	r1, 88ca <bt_l2cap_chan_connect+0x32>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_connect(conn, chan, psm);
	}

	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    88a6:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
    88aa:	2804      	cmp	r0, #4
    88ac:	d810      	bhi.n	88d0 <bt_l2cap_chan_connect+0x38>
		return -EINVAL;
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    88ae:	b910      	cbnz	r0, 88b6 <bt_l2cap_chan_connect+0x1e>
		chan->required_sec_level = BT_SECURITY_LOW;
    88b0:	2001      	movs	r0, #1
    88b2:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
    88b6:	4618      	mov	r0, r3
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
    88b8:	f7ff ff72 	bl	87a0 <l2cap_le_connect>
    88bc:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
    88be:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    88c2:	4770      	bx	lr
    88c4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    88c8:	bd08      	pop	{r3, pc}
		return -EINVAL;
    88ca:	f06f 0015 	mvn.w	r0, #21
    88ce:	bd08      	pop	{r3, pc}
		return -EINVAL;
    88d0:	f06f 0015 	mvn.w	r0, #21
}
    88d4:	bd08      	pop	{r3, pc}

000088d6 <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    88d6:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
    88d8:	6803      	ldr	r3, [r0, #0]
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    88da:	b30b      	cbz	r3, 8920 <bt_l2cap_chan_disconnect+0x4a>
    88dc:	4604      	mov	r4, r0
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    88de:	f7ff f8d7 	bl	7a90 <get_ident>
    88e2:	4602      	mov	r2, r0
    88e4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    88e8:	2304      	movs	r3, #4
    88ea:	2106      	movs	r1, #6
    88ec:	2000      	movs	r0, #0
    88ee:	f7ff fb67 	bl	7fc0 <l2cap_create_le_sig_pdu>
    88f2:	4605      	mov	r5, r0
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    88f4:	2104      	movs	r1, #4
    88f6:	3008      	adds	r0, #8
    88f8:	f012 fa5c 	bl	1adb4 <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    88fc:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    8900:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    8902:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    8906:	8043      	strh	r3, [r0, #2]

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
    8908:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    890c:	4629      	mov	r1, r5
    890e:	4620      	mov	r0, r4
    8910:	f7ff fbfe 	bl	8110 <l2cap_chan_send_req>
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);
    8914:	2104      	movs	r1, #4
    8916:	4620      	mov	r0, r4
    8918:	f7ff fa82 	bl	7e20 <bt_l2cap_chan_set_state>

	return 0;
    891c:	2000      	movs	r0, #0
    891e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    8920:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    8924:	bd38      	pop	{r3, r4, r5, pc}

00008926 <l2cap_chan_le_recv_sdu>:
{
    8926:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    892a:	4681      	mov	r9, r0
    892c:	460e      	mov	r6, r1
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    892e:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    8932:	4603      	mov	r3, r0
	size_t bytes = 0;
    8934:	2200      	movs	r2, #0
    8936:	e002      	b.n	893e <l2cap_chan_le_recv_sdu+0x18>
		bytes += buf->len;
    8938:	8999      	ldrh	r1, [r3, #12]
    893a:	440a      	add	r2, r1
		buf = buf->frags;
    893c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    893e:	2b00      	cmp	r3, #0
    8940:	d1fa      	bne.n	8938 <l2cap_chan_le_recv_sdu+0x12>
    8942:	89b3      	ldrh	r3, [r6, #12]
    8944:	441a      	add	r2, r3
    8946:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    894a:	429a      	cmp	r2, r3
    894c:	d803      	bhi.n	8956 <l2cap_chan_le_recv_sdu+0x30>
	frag = net_buf_frag_last(chan->_sdu);
    894e:	f012 fa05 	bl	1ad5c <net_buf_frag_last>
    8952:	4680      	mov	r8, r0
	while (buf->len) {
    8954:	e017      	b.n	8986 <l2cap_chan_le_recv_sdu+0x60>
		bt_l2cap_chan_disconnect(&chan->chan);
    8956:	4648      	mov	r0, r9
    8958:	f7ff ffbd 	bl	88d6 <bt_l2cap_chan_disconnect>
		return;
    895c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    8960:	f108 0708 	add.w	r7, r8, #8
    8964:	4638      	mov	r0, r7
    8966:	f012 fa8e 	bl	1ae86 <net_buf_simple_tailroom>
    896a:	89b4      	ldrh	r4, [r6, #12]
    896c:	42a0      	cmp	r0, r4
    896e:	d31d      	bcc.n	89ac <l2cap_chan_le_recv_sdu+0x86>
		net_buf_add_mem(frag, buf->data, len);
    8970:	4635      	mov	r5, r6
    8972:	4622      	mov	r2, r4
    8974:	f855 1f08 	ldr.w	r1, [r5, #8]!
    8978:	4638      	mov	r0, r7
    897a:	f012 fa21 	bl	1adc0 <net_buf_simple_add_mem>
		net_buf_pull(buf, len);
    897e:	4621      	mov	r1, r4
    8980:	4628      	mov	r0, r5
    8982:	f012 fa64 	bl	1ae4e <net_buf_simple_pull>
	while (buf->len) {
    8986:	89b3      	ldrh	r3, [r6, #12]
    8988:	b1ab      	cbz	r3, 89b6 <l2cap_chan_le_recv_sdu+0x90>
		if (!net_buf_tailroom(frag)) {
    898a:	f108 0008 	add.w	r0, r8, #8
    898e:	f012 fa7a 	bl	1ae86 <net_buf_simple_tailroom>
    8992:	2800      	cmp	r0, #0
    8994:	d1e4      	bne.n	8960 <l2cap_chan_le_recv_sdu+0x3a>
			frag = l2cap_alloc_frag(chan);
    8996:	4648      	mov	r0, r9
    8998:	f7ff f93a 	bl	7c10 <l2cap_alloc_frag>
			if (!frag) {
    899c:	4680      	mov	r8, r0
    899e:	2800      	cmp	r0, #0
    89a0:	d1de      	bne.n	8960 <l2cap_chan_le_recv_sdu+0x3a>
				bt_l2cap_chan_disconnect(&chan->chan);
    89a2:	4648      	mov	r0, r9
    89a4:	f7ff ff97 	bl	88d6 <bt_l2cap_chan_disconnect>
				return;
    89a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    89ac:	4638      	mov	r0, r7
    89ae:	f012 fa6a 	bl	1ae86 <net_buf_simple_tailroom>
    89b2:	b284      	uxth	r4, r0
    89b4:	e7dc      	b.n	8970 <l2cap_chan_le_recv_sdu+0x4a>
	if (net_buf_frags_len(chan->_sdu) == chan->_sdu_len) {
    89b6:	f8d9 1094 	ldr.w	r1, [r9, #148]	; 0x94
    89ba:	460b      	mov	r3, r1
	size_t bytes = 0;
    89bc:	2200      	movs	r2, #0
    89be:	e002      	b.n	89c6 <l2cap_chan_le_recv_sdu+0xa0>
		bytes += buf->len;
    89c0:	8998      	ldrh	r0, [r3, #12]
    89c2:	4402      	add	r2, r0
		buf = buf->frags;
    89c4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    89c6:	2b00      	cmp	r3, #0
    89c8:	d1fa      	bne.n	89c0 <l2cap_chan_le_recv_sdu+0x9a>
    89ca:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    89ce:	4293      	cmp	r3, r2
    89d0:	d005      	beq.n	89de <l2cap_chan_le_recv_sdu+0xb8>
	l2cap_chan_update_credits(chan, buf);
    89d2:	4631      	mov	r1, r6
    89d4:	4648      	mov	r0, r9
    89d6:	f7ff fc12 	bl	81fe <l2cap_chan_update_credits>
    89da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chan->chan.ops->recv(&chan->chan, chan->_sdu);
    89de:	f8d9 3004 	ldr.w	r3, [r9, #4]
    89e2:	691b      	ldr	r3, [r3, #16]
    89e4:	4648      	mov	r0, r9
    89e6:	4798      	blx	r3
		net_buf_unref(chan->_sdu);
    89e8:	f8d9 0094 	ldr.w	r0, [r9, #148]	; 0x94
    89ec:	f012 f996 	bl	1ad1c <net_buf_unref>
		chan->_sdu = NULL;
    89f0:	2300      	movs	r3, #0
    89f2:	f8c9 3094 	str.w	r3, [r9, #148]	; 0x94
		chan->_sdu_len = 0;
    89f6:	f8a9 3098 	strh.w	r3, [r9, #152]	; 0x98
    89fa:	e7ea      	b.n	89d2 <l2cap_chan_le_recv_sdu+0xac>

000089fc <l2cap_chan_le_recv>:
{
    89fc:	b570      	push	{r4, r5, r6, lr}
    89fe:	4604      	mov	r4, r0
    8a00:	460d      	mov	r5, r1
    8a02:	2100      	movs	r1, #0
    8a04:	3048      	adds	r0, #72	; 0x48
    8a06:	f020 fce7 	bl	293d8 <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    8a0a:	b938      	cbnz	r0, 8a1c <l2cap_chan_le_recv+0x20>
	if (chan->_sdu) {
    8a0c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    8a10:	b143      	cbz	r3, 8a24 <l2cap_chan_le_recv+0x28>
		l2cap_chan_le_recv_sdu(chan, buf);
    8a12:	4629      	mov	r1, r5
    8a14:	4620      	mov	r0, r4
    8a16:	f7ff ff86 	bl	8926 <l2cap_chan_le_recv_sdu>
		return;
    8a1a:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    8a1c:	4620      	mov	r0, r4
    8a1e:	f7ff ff5a 	bl	88d6 <bt_l2cap_chan_disconnect>
		return;
    8a22:	bd70      	pop	{r4, r5, r6, pc}
	sdu_len = net_buf_pull_le16(buf);
    8a24:	f105 0008 	add.w	r0, r5, #8
    8a28:	f012 fa21 	bl	1ae6e <net_buf_simple_pull_le16>
    8a2c:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    8a2e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    8a32:	4298      	cmp	r0, r3
    8a34:	d80e      	bhi.n	8a54 <l2cap_chan_le_recv+0x58>
	if (chan->chan.ops->alloc_buf) {
    8a36:	6862      	ldr	r2, [r4, #4]
    8a38:	68d3      	ldr	r3, [r2, #12]
    8a3a:	b19b      	cbz	r3, 8a64 <l2cap_chan_le_recv+0x68>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    8a3c:	4620      	mov	r0, r4
    8a3e:	4798      	blx	r3
    8a40:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
		if (!chan->_sdu) {
    8a44:	b150      	cbz	r0, 8a5c <l2cap_chan_le_recv+0x60>
		chan->_sdu_len = sdu_len;
    8a46:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
		l2cap_chan_le_recv_sdu(chan, buf);
    8a4a:	4629      	mov	r1, r5
    8a4c:	4620      	mov	r0, r4
    8a4e:	f7ff ff6a 	bl	8926 <l2cap_chan_le_recv_sdu>
		return;
    8a52:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    8a54:	4620      	mov	r0, r4
    8a56:	f7ff ff3e 	bl	88d6 <bt_l2cap_chan_disconnect>
		return;
    8a5a:	bd70      	pop	{r4, r5, r6, pc}
			bt_l2cap_chan_disconnect(&chan->chan);
    8a5c:	4620      	mov	r0, r4
    8a5e:	f7ff ff3a 	bl	88d6 <bt_l2cap_chan_disconnect>
			return;
    8a62:	bd70      	pop	{r4, r5, r6, pc}
	chan->chan.ops->recv(&chan->chan, buf);
    8a64:	6913      	ldr	r3, [r2, #16]
    8a66:	4629      	mov	r1, r5
    8a68:	4620      	mov	r0, r4
    8a6a:	4798      	blx	r3
	l2cap_chan_update_credits(chan, buf);
    8a6c:	4629      	mov	r1, r5
    8a6e:	4620      	mov	r0, r4
    8a70:	f7ff fbc5 	bl	81fe <l2cap_chan_update_credits>
    8a74:	bd70      	pop	{r4, r5, r6, pc}

00008a76 <l2cap_chan_recv>:
{
    8a76:	b508      	push	{r3, lr}
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    8a78:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    8a7c:	3b40      	subs	r3, #64	; 0x40
    8a7e:	b29b      	uxth	r3, r3
    8a80:	2b3f      	cmp	r3, #63	; 0x3f
    8a82:	d903      	bls.n	8a8c <l2cap_chan_recv+0x16>
	chan->ops->recv(chan, buf);
    8a84:	6843      	ldr	r3, [r0, #4]
    8a86:	691b      	ldr	r3, [r3, #16]
    8a88:	4798      	blx	r3
    8a8a:	bd08      	pop	{r3, pc}
		l2cap_chan_le_recv(ch, buf);
    8a8c:	f7ff ffb6 	bl	89fc <l2cap_chan_le_recv>
		return;
    8a90:	bd08      	pop	{r3, pc}

00008a92 <bt_l2cap_recv>:
{
    8a92:	b570      	push	{r4, r5, r6, lr}
    8a94:	460c      	mov	r4, r1
	struct bt_l2cap_hdr *hdr = (void *)buf->data;
    8a96:	688a      	ldr	r2, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    8a98:	898b      	ldrh	r3, [r1, #12]
    8a9a:	2b03      	cmp	r3, #3
    8a9c:	d912      	bls.n	8ac4 <bt_l2cap_recv+0x32>
    8a9e:	4605      	mov	r5, r0
	cid = sys_le16_to_cpu(hdr->cid);
    8aa0:	8856      	ldrh	r6, [r2, #2]
	net_buf_pull(buf, sizeof(*hdr));
    8aa2:	2104      	movs	r1, #4
    8aa4:	f104 0008 	add.w	r0, r4, #8
    8aa8:	f012 f9d1 	bl	1ae4e <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    8aac:	4631      	mov	r1, r6
    8aae:	4628      	mov	r0, r5
    8ab0:	f7ff fd3a 	bl	8528 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8ab4:	b150      	cbz	r0, 8acc <bt_l2cap_recv+0x3a>
	l2cap_chan_recv(chan, buf);
    8ab6:	4621      	mov	r1, r4
    8ab8:	f7ff ffdd 	bl	8a76 <l2cap_chan_recv>
	net_buf_unref(buf);
    8abc:	4620      	mov	r0, r4
    8abe:	f012 f92d 	bl	1ad1c <net_buf_unref>
    8ac2:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    8ac4:	4608      	mov	r0, r1
    8ac6:	f012 f929 	bl	1ad1c <net_buf_unref>
		return;
    8aca:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    8acc:	4620      	mov	r0, r4
    8ace:	f012 f925 	bl	1ad1c <net_buf_unref>
		return;
    8ad2:	bd70      	pop	{r4, r5, r6, pc}

00008ad4 <le_credits>:
{
    8ad4:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    8ad6:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    8ad8:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*ev)) {
    8ada:	8993      	ldrh	r3, [r2, #12]
    8adc:	2b03      	cmp	r3, #3
    8ade:	d800      	bhi.n	8ae2 <le_credits+0xe>
    8ae0:	bd38      	pop	{r3, r4, r5, pc}
	credits = sys_le16_to_cpu(ev->credits);
    8ae2:	884d      	ldrh	r5, [r1, #2]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    8ae4:	8809      	ldrh	r1, [r1, #0]
    8ae6:	f7ff fd04 	bl	84f2 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    8aea:	4604      	mov	r4, r0
    8aec:	2800      	cmp	r0, #0
    8aee:	d0f7      	beq.n	8ae0 <le_credits+0xc>
    8af0:	6f03      	ldr	r3, [r0, #112]	; 0x70
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    8af2:	442b      	add	r3, r5
    8af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8af8:	d206      	bcs.n	8b08 <le_credits+0x34>
	l2cap_chan_tx_give_credits(ch, credits);
    8afa:	4629      	mov	r1, r5
    8afc:	f7ff f8a3 	bl	7c46 <l2cap_chan_tx_give_credits>
	l2cap_chan_le_send_resume(ch);
    8b00:	4620      	mov	r0, r4
    8b02:	f7ff fc32 	bl	836a <l2cap_chan_le_send_resume>
    8b06:	e7eb      	b.n	8ae0 <le_credits+0xc>
		bt_l2cap_chan_disconnect(chan);
    8b08:	f7ff fee5 	bl	88d6 <bt_l2cap_chan_disconnect>
		return;
    8b0c:	bd38      	pop	{r3, r4, r5, pc}
	...

00008b10 <l2cap_recv>:
{
    8b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b12:	b083      	sub	sp, #12
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    8b14:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    8b16:	898b      	ldrh	r3, [r1, #12]
    8b18:	2b03      	cmp	r3, #3
    8b1a:	d801      	bhi.n	8b20 <l2cap_recv+0x10>
}
    8b1c:	b003      	add	sp, #12
    8b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b20:	460c      	mov	r4, r1
    8b22:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
    8b24:	8877      	ldrh	r7, [r6, #2]
	net_buf_pull(buf, sizeof(*hdr));
    8b26:	2104      	movs	r1, #4
    8b28:	f104 0008 	add.w	r0, r4, #8
    8b2c:	f012 f98f 	bl	1ae4e <net_buf_simple_pull>
	if (buf->len != len) {
    8b30:	89a3      	ldrh	r3, [r4, #12]
    8b32:	429f      	cmp	r7, r3
    8b34:	d1f2      	bne.n	8b1c <l2cap_recv+0xc>
	if (!hdr->ident) {
    8b36:	7871      	ldrb	r1, [r6, #1]
    8b38:	2900      	cmp	r1, #0
    8b3a:	d0ef      	beq.n	8b1c <l2cap_recv+0xc>
	switch (hdr->code) {
    8b3c:	7833      	ldrb	r3, [r6, #0]
    8b3e:	3b01      	subs	r3, #1
    8b40:	2b15      	cmp	r3, #21
    8b42:	d852      	bhi.n	8bea <l2cap_recv+0xda>
    8b44:	a201      	add	r2, pc, #4	; (adr r2, 8b4c <l2cap_recv+0x3c>)
    8b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8b4a:	bf00      	nop
    8b4c:	00008be1 	.word	0x00008be1
    8b50:	00008beb 	.word	0x00008beb
    8b54:	00008beb 	.word	0x00008beb
    8b58:	00008beb 	.word	0x00008beb
    8b5c:	00008beb 	.word	0x00008beb
    8b60:	00008bc3 	.word	0x00008bc3
    8b64:	00008bcd 	.word	0x00008bcd
    8b68:	00008beb 	.word	0x00008beb
    8b6c:	00008beb 	.word	0x00008beb
    8b70:	00008beb 	.word	0x00008beb
    8b74:	00008beb 	.word	0x00008beb
    8b78:	00008beb 	.word	0x00008beb
    8b7c:	00008beb 	.word	0x00008beb
    8b80:	00008beb 	.word	0x00008beb
    8b84:	00008beb 	.word	0x00008beb
    8b88:	00008beb 	.word	0x00008beb
    8b8c:	00008beb 	.word	0x00008beb
    8b90:	00008ba5 	.word	0x00008ba5
    8b94:	00008b1d 	.word	0x00008b1d
    8b98:	00008baf 	.word	0x00008baf
    8b9c:	00008bb9 	.word	0x00008bb9
    8ba0:	00008bd7 	.word	0x00008bd7
		le_conn_param_update_req(l2cap, hdr->ident, buf);
    8ba4:	4622      	mov	r2, r4
    8ba6:	4628      	mov	r0, r5
    8ba8:	f7ff fc22 	bl	83f0 <le_conn_param_update_req>
		break;
    8bac:	e7b6      	b.n	8b1c <l2cap_recv+0xc>
		le_conn_req(l2cap, hdr->ident, buf);
    8bae:	4622      	mov	r2, r4
    8bb0:	4628      	mov	r0, r5
    8bb2:	f7ff fd4d 	bl	8650 <le_conn_req>
		break;
    8bb6:	e7b1      	b.n	8b1c <l2cap_recv+0xc>
		le_conn_rsp(l2cap, hdr->ident, buf);
    8bb8:	4622      	mov	r2, r4
    8bba:	4628      	mov	r0, r5
    8bbc:	f7ff f954 	bl	7e68 <le_conn_rsp>
		break;
    8bc0:	e7ac      	b.n	8b1c <l2cap_recv+0xc>
		le_disconn_req(l2cap, hdr->ident, buf);
    8bc2:	4622      	mov	r2, r4
    8bc4:	4628      	mov	r0, r5
    8bc6:	f7ff fc57 	bl	8478 <le_disconn_req>
		break;
    8bca:	e7a7      	b.n	8b1c <l2cap_recv+0xc>
		le_disconn_rsp(l2cap, hdr->ident, buf);
    8bcc:	4622      	mov	r2, r4
    8bce:	4628      	mov	r0, r5
    8bd0:	f7ff f9a0 	bl	7f14 <le_disconn_rsp>
		break;
    8bd4:	e7a2      	b.n	8b1c <l2cap_recv+0xc>
		le_credits(l2cap, hdr->ident, buf);
    8bd6:	4622      	mov	r2, r4
    8bd8:	4628      	mov	r0, r5
    8bda:	f7ff ff7b 	bl	8ad4 <le_credits>
		break;
    8bde:	e79d      	b.n	8b1c <l2cap_recv+0xc>
		reject_cmd(l2cap, hdr->ident, buf);
    8be0:	4622      	mov	r2, r4
    8be2:	4628      	mov	r0, r5
    8be4:	f7ff f9a5 	bl	7f32 <reject_cmd>
		break;
    8be8:	e798      	b.n	8b1c <l2cap_recv+0xc>
		l2cap_send_reject(chan->conn, hdr->ident,
    8bea:	6828      	ldr	r0, [r5, #0]
    8bec:	2200      	movs	r2, #0
    8bee:	9200      	str	r2, [sp, #0]
    8bf0:	4613      	mov	r3, r2
    8bf2:	f7ff fbd9 	bl	83a8 <l2cap_send_reject>
		break;
    8bf6:	e791      	b.n	8b1c <l2cap_recv+0xc>

00008bf8 <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    8bf8:	b510      	push	{r4, lr}
    8bfa:	b082      	sub	sp, #8
    8bfc:	9101      	str	r1, [sp, #4]
	int err;

	if (!buf) {
    8bfe:	b1f9      	cbz	r1, 8c40 <bt_l2cap_chan_send+0x48>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    8c00:	6803      	ldr	r3, [r0, #0]
    8c02:	b303      	cbz	r3, 8c46 <bt_l2cap_chan_send+0x4e>
    8c04:	7b1b      	ldrb	r3, [r3, #12]
    8c06:	2b03      	cmp	r3, #3
    8c08:	d120      	bne.n	8c4c <bt_l2cap_chan_send+0x54>
    8c0a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    8c0c:	2200      	movs	r2, #0
    8c0e:	a901      	add	r1, sp, #4
    8c10:	f7ff fb40 	bl	8294 <l2cap_chan_le_send_sdu>
	if (err < 0) {
    8c14:	2800      	cmp	r0, #0
    8c16:	db01      	blt.n	8c1c <bt_l2cap_chan_send+0x24>
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    8c18:	b002      	add	sp, #8
    8c1a:	bd10      	pop	{r4, pc}
		if (err == -EAGAIN) {
    8c1c:	f110 0f0b 	cmn.w	r0, #11
    8c20:	d1fa      	bne.n	8c18 <bt_l2cap_chan_send+0x20>
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    8c22:	9901      	ldr	r1, [sp, #4]
    8c24:	f104 0080 	add.w	r0, r4, #128	; 0x80
    8c28:	f012 f86a 	bl	1ad00 <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    8c2c:	9a01      	ldr	r2, [sp, #4]
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    8c2e:	f102 0310 	add.w	r3, r2, #16
    8c32:	89d2      	ldrh	r2, [r2, #14]
    8c34:	4413      	add	r3, r2
    8c36:	3303      	adds	r3, #3
    8c38:	f023 0303 	bic.w	r3, r3, #3
    8c3c:	6818      	ldr	r0, [r3, #0]
    8c3e:	e7eb      	b.n	8c18 <bt_l2cap_chan_send+0x20>
		return -EINVAL;
    8c40:	f06f 0015 	mvn.w	r0, #21
    8c44:	e7e8      	b.n	8c18 <bt_l2cap_chan_send+0x20>
		return -ENOTCONN;
    8c46:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8c4a:	e7e5      	b.n	8c18 <bt_l2cap_chan_send+0x20>
    8c4c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8c50:	e7e2      	b.n	8c18 <bt_l2cap_chan_send+0x20>

00008c52 <range_is_valid>:
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    8c52:	b100      	cbz	r0, 8c56 <range_is_valid+0x4>
    8c54:	b919      	cbnz	r1, 8c5e <range_is_valid+0xc>
		if (err) {
    8c56:	b142      	cbz	r2, 8c6a <range_is_valid+0x18>
			*err = 0;
    8c58:	2000      	movs	r0, #0
    8c5a:	8010      	strh	r0, [r2, #0]
    8c5c:	4770      	bx	lr
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    8c5e:	4288      	cmp	r0, r1
    8c60:	d905      	bls.n	8c6e <range_is_valid+0x1c>
		if (err) {
    8c62:	b132      	cbz	r2, 8c72 <range_is_valid+0x20>
			*err = start;
    8c64:	8010      	strh	r0, [r2, #0]
		}
		return false;
    8c66:	2000      	movs	r0, #0
    8c68:	4770      	bx	lr
		return false;
    8c6a:	2000      	movs	r0, #0
    8c6c:	4770      	bx	lr
	}

	return true;
    8c6e:	2001      	movs	r0, #1
    8c70:	4770      	bx	lr
		return false;
    8c72:	2000      	movs	r0, #0
}
    8c74:	4770      	bx	lr

00008c76 <check_perm>:
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    8c76:	f012 0f01 	tst.w	r2, #1
    8c7a:	d007      	beq.n	8c8c <check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    8c7c:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
    8c7e:	f013 0f15 	tst.w	r3, #21
    8c82:	d101      	bne.n	8c88 <check_perm+0x12>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    8c84:	2002      	movs	r0, #2
    8c86:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    8c88:	684b      	ldr	r3, [r1, #4]
    8c8a:	b1eb      	cbz	r3, 8cc8 <check_perm+0x52>
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    8c8c:	f012 0f02 	tst.w	r2, #2
    8c90:	d007      	beq.n	8ca2 <check_perm+0x2c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    8c92:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
    8c94:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    8c98:	d101      	bne.n	8c9e <check_perm+0x28>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    8c9a:	2003      	movs	r0, #3
    8c9c:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    8c9e:	688b      	ldr	r3, [r1, #8]
    8ca0:	b1a3      	cbz	r3, 8ccc <check_perm+0x56>
	}

	mask &= attr->perm;
    8ca2:	7c8b      	ldrb	r3, [r1, #18]
    8ca4:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    8ca6:	f012 0f30 	tst.w	r2, #48	; 0x30
    8caa:	d004      	beq.n	8cb6 <check_perm+0x40>
#if defined(CONFIG_BT_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    8cac:	7a03      	ldrb	r3, [r0, #8]
    8cae:	2b02      	cmp	r3, #2
    8cb0:	d801      	bhi.n	8cb6 <check_perm+0x40>
			return BT_ATT_ERR_AUTHENTICATION;
    8cb2:	2005      	movs	r0, #5
    8cb4:	4770      	bx	lr
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BT_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    8cb6:	f012 0f0c 	tst.w	r2, #12
    8cba:	d009      	beq.n	8cd0 <check_perm+0x5a>
#if defined(CONFIG_BT_SMP)
		if (!conn->encrypt) {
    8cbc:	7a83      	ldrb	r3, [r0, #10]
    8cbe:	b90b      	cbnz	r3, 8cc4 <check_perm+0x4e>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    8cc0:	200f      	movs	r0, #15
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BT_SMP */
	}

	return 0;
}
    8cc2:	4770      	bx	lr
	return 0;
    8cc4:	2000      	movs	r0, #0
    8cc6:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    8cc8:	2002      	movs	r0, #2
    8cca:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    8ccc:	2003      	movs	r0, #3
    8cce:	4770      	bx	lr
	return 0;
    8cd0:	2000      	movs	r0, #0
    8cd2:	4770      	bx	lr

00008cd4 <err_to_att>:

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    8cd4:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    8cd8:	2bfe      	cmp	r3, #254	; 0xfe
    8cda:	d901      	bls.n	8ce0 <err_to_att+0xc>
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    8cdc:	200e      	movs	r0, #14
}
    8cde:	4770      	bx	lr
		return -err;
    8ce0:	4240      	negs	r0, r0
    8ce2:	b2c0      	uxtb	r0, r0
    8ce4:	4770      	bx	lr

00008ce6 <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    8ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8cea:	b082      	sub	sp, #8
    8cec:	4606      	mov	r6, r0
    8cee:	460c      	mov	r4, r1
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    8cf0:	680f      	ldr	r7, [r1, #0]
    8cf2:	222a      	movs	r2, #42	; 0x2a
    8cf4:	4601      	mov	r1, r0
    8cf6:	4638      	mov	r0, r7
    8cf8:	f7ff ffbd 	bl	8c76 <check_perm>
    8cfc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8cfe:	b120      	cbz	r0, 8d0a <write_cb+0x24>
		return BT_GATT_ITER_STOP;
    8d00:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    8d02:	4628      	mov	r0, r5
    8d04:	b002      	add	sp, #8
    8d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d0a:	4605      	mov	r5, r0
	write = attr->write(data->conn, attr, data->value, data->len,
    8d0c:	f8d6 8008 	ldr.w	r8, [r6, #8]
    8d10:	7c23      	ldrb	r3, [r4, #16]
    8d12:	8a62      	ldrh	r2, [r4, #18]
    8d14:	2100      	movs	r1, #0
    8d16:	9101      	str	r1, [sp, #4]
    8d18:	9200      	str	r2, [sp, #0]
    8d1a:	68e2      	ldr	r2, [r4, #12]
    8d1c:	4631      	mov	r1, r6
    8d1e:	4638      	mov	r0, r7
    8d20:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    8d22:	2800      	cmp	r0, #0
    8d24:	db02      	blt.n	8d2c <write_cb+0x46>
    8d26:	7c23      	ldrb	r3, [r4, #16]
    8d28:	4298      	cmp	r0, r3
    8d2a:	d003      	beq.n	8d34 <write_cb+0x4e>
		data->err = err_to_att(write);
    8d2c:	f7ff ffd2 	bl	8cd4 <err_to_att>
    8d30:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8d32:	e7e6      	b.n	8d02 <write_cb+0x1c>
	data->err = 0;
    8d34:	2300      	movs	r3, #0
    8d36:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    8d38:	2501      	movs	r5, #1
    8d3a:	e7e2      	b.n	8d02 <write_cb+0x1c>

00008d3c <att_prepare_write_req>:

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    8d3c:	2006      	movs	r0, #6
    8d3e:	4770      	bx	lr

00008d40 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    8d40:	2006      	movs	r0, #6
    8d42:	4770      	bx	lr

00008d44 <att_op_get_type>:
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8d44:	2300      	movs	r3, #0
    8d46:	2b1a      	cmp	r3, #26
    8d48:	d80b      	bhi.n	8d62 <att_op_get_type+0x1e>
		if (op == handlers[i].op) {
    8d4a:	4a09      	ldr	r2, [pc, #36]	; (8d70 <att_op_get_type+0x2c>)
    8d4c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    8d50:	4282      	cmp	r2, r0
    8d52:	d001      	beq.n	8d58 <att_op_get_type+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8d54:	3301      	adds	r3, #1
    8d56:	e7f6      	b.n	8d46 <att_op_get_type+0x2>
			return handlers[i].type;
    8d58:	4a05      	ldr	r2, [pc, #20]	; (8d70 <att_op_get_type+0x2c>)
    8d5a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8d5e:	7898      	ldrb	r0, [r3, #2]
    8d60:	4770      	bx	lr
		}
	}

	if (op & ATT_CMD_MASK) {
    8d62:	f010 0f40 	tst.w	r0, #64	; 0x40
    8d66:	d101      	bne.n	8d6c <att_op_get_type+0x28>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    8d68:	2006      	movs	r0, #6
}
    8d6a:	4770      	bx	lr
		return ATT_COMMAND;
    8d6c:	2000      	movs	r0, #0
    8d6e:	4770      	bx	lr
    8d70:	0003158c 	.word	0x0003158c

00008d74 <att_cb>:
{
    8d74:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    8d76:	6883      	ldr	r3, [r0, #8]
    8d78:	7818      	ldrb	r0, [r3, #0]
    8d7a:	f7ff ffe3 	bl	8d44 <att_op_get_type>
    8d7e:	3801      	subs	r0, #1
    8d80:	2804      	cmp	r0, #4
    8d82:	d808      	bhi.n	8d96 <att_cb+0x22>
    8d84:	e8df f000 	tbb	[pc, r0]
    8d88:	09070305 	.word	0x09070305
    8d8c:	05          	.byte	0x05
    8d8d:	00          	.byte	0x00
		return att_rsp_sent;
    8d8e:	4804      	ldr	r0, [pc, #16]	; (8da0 <att_cb+0x2c>)
    8d90:	bd08      	pop	{r3, pc}
		return att_req_sent;
    8d92:	4804      	ldr	r0, [pc, #16]	; (8da4 <att_cb+0x30>)
    8d94:	bd08      	pop	{r3, pc}
		return att_pdu_sent;
    8d96:	4804      	ldr	r0, [pc, #16]	; (8da8 <att_cb+0x34>)
    8d98:	bd08      	pop	{r3, pc}
		return att_cfm_sent;
    8d9a:	4804      	ldr	r0, [pc, #16]	; (8dac <att_cb+0x38>)
}
    8d9c:	bd08      	pop	{r3, pc}
    8d9e:	bf00      	nop
    8da0:	00008ee7 	.word	0x00008ee7
    8da4:	00008f59 	.word	0x00008f59
    8da8:	00008f11 	.word	0x00008f11
    8dac:	00008f1f 	.word	0x00008f1f

00008db0 <read_cb>:
{
    8db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8db4:	b083      	sub	sp, #12
    8db6:	4606      	mov	r6, r0
    8db8:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8dba:	f8d1 8000 	ldr.w	r8, [r1]
	struct bt_conn *conn = att->chan.chan.conn;
    8dbe:	f8d8 7000 	ldr.w	r7, [r8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8dc2:	6888      	ldr	r0, [r1, #8]
    8dc4:	2100      	movs	r1, #0
    8dc6:	3008      	adds	r0, #8
    8dc8:	f011 fff4 	bl	1adb4 <net_buf_simple_add>
    8dcc:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    8dce:	2300      	movs	r3, #0
    8dd0:	7423      	strb	r3, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8dd2:	2215      	movs	r2, #21
    8dd4:	4631      	mov	r1, r6
    8dd6:	4638      	mov	r0, r7
    8dd8:	f7ff ff4d 	bl	8c76 <check_perm>
    8ddc:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    8dde:	b120      	cbz	r0, 8dea <read_cb+0x3a>
		return BT_GATT_ITER_STOP;
    8de0:	2500      	movs	r5, #0
}
    8de2:	4628      	mov	r0, r5
    8de4:	b003      	add	sp, #12
    8de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8dea:	4605      	mov	r5, r0
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8dec:	f8d6 9004 	ldr.w	r9, [r6, #4]
    8df0:	68a3      	ldr	r3, [r4, #8]
    8df2:	6899      	ldr	r1, [r3, #8]
    8df4:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, data->offset);
    8df6:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8dfa:	1a9b      	subs	r3, r3, r2
    8dfc:	88a0      	ldrh	r0, [r4, #4]
    8dfe:	9000      	str	r0, [sp, #0]
    8e00:	b29b      	uxth	r3, r3
    8e02:	440a      	add	r2, r1
    8e04:	4631      	mov	r1, r6
    8e06:	4638      	mov	r0, r7
    8e08:	47c8      	blx	r9
	if (read < 0) {
    8e0a:	1e01      	subs	r1, r0, #0
    8e0c:	db05      	blt.n	8e1a <read_cb+0x6a>
	net_buf_add(data->buf, read);
    8e0e:	68a0      	ldr	r0, [r4, #8]
    8e10:	3008      	adds	r0, #8
    8e12:	f011 ffcf 	bl	1adb4 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    8e16:	2501      	movs	r5, #1
    8e18:	e7e3      	b.n	8de2 <read_cb+0x32>
		data->err = err_to_att(read);
    8e1a:	4608      	mov	r0, r1
    8e1c:	f7ff ff5a 	bl	8cd4 <err_to_att>
    8e20:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
    8e22:	e7de      	b.n	8de2 <read_cb+0x32>

00008e24 <att_chan_get>:
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    8e24:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    8e26:	7b03      	ldrb	r3, [r0, #12]
    8e28:	2b03      	cmp	r3, #3
    8e2a:	d10f      	bne.n	8e4c <att_chan_get+0x28>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    8e2c:	2104      	movs	r1, #4
    8e2e:	f7ff fb7b 	bl	8528 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8e32:	b168      	cbz	r0, 8e50 <att_chan_get+0x2c>
    8e34:	f3bf 8f5b 	dmb	ish
    8e38:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    8e3c:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    8e40:	f012 0f04 	tst.w	r2, #4
    8e44:	d100      	bne.n	8e48 <att_chan_get+0x24>
		BT_WARN("ATT context flagged as disconnected");
		return NULL;
	}

	return att;
}
    8e46:	bd08      	pop	{r3, pc}
		return NULL;
    8e48:	2000      	movs	r0, #0
    8e4a:	bd08      	pop	{r3, pc}
		return NULL;
    8e4c:	2000      	movs	r0, #0
    8e4e:	bd08      	pop	{r3, pc}
		return NULL;
    8e50:	2000      	movs	r0, #0
    8e52:	bd08      	pop	{r3, pc}

00008e54 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    8e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CONFIG_BT_SMP */
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    8e56:	2400      	movs	r4, #0
    8e58:	b11c      	cbz	r4, 8e62 <bt_att_accept+0xe>
		return 0;
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    8e5a:	f06f 040b 	mvn.w	r4, #11
}
    8e5e:	4620      	mov	r0, r4
    8e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (att->chan.chan.conn) {
    8e62:	23ec      	movs	r3, #236	; 0xec
    8e64:	fb03 f304 	mul.w	r3, r3, r4
    8e68:	4a12      	ldr	r2, [pc, #72]	; (8eb4 <bt_att_accept+0x60>)
    8e6a:	58d3      	ldr	r3, [r2, r3]
    8e6c:	b10b      	cbz	r3, 8e72 <bt_att_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    8e6e:	3401      	adds	r4, #1
    8e70:	e7f2      	b.n	8e58 <bt_att_accept+0x4>
    8e72:	460d      	mov	r5, r1
		att->chan.chan.ops = &ops;
    8e74:	480f      	ldr	r0, [pc, #60]	; (8eb4 <bt_att_accept+0x60>)
    8e76:	23ec      	movs	r3, #236	; 0xec
    8e78:	fb03 f304 	mul.w	r3, r3, r4
    8e7c:	18c6      	adds	r6, r0, r3
    8e7e:	4a0e      	ldr	r2, [pc, #56]	; (8eb8 <bt_att_accept+0x64>)
    8e80:	6072      	str	r2, [r6, #4]
		atomic_set(att->flags, 0);
    8e82:	f103 0298 	add.w	r2, r3, #152	; 0x98
    8e86:	4402      	add	r2, r0
    8e88:	3204      	adds	r2, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8e8a:	2100      	movs	r1, #0
    8e8c:	f3bf 8f5b 	dmb	ish
    8e90:	e852 7f00 	ldrex	r7, [r2]
    8e94:	e842 1e00 	strex	lr, r1, [r2]
    8e98:	f1be 0f00 	cmp.w	lr, #0
    8e9c:	d1f8      	bne.n	8e90 <bt_att_accept+0x3c>
    8e9e:	f3bf 8f5b 	dmb	ish
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
    8ea2:	33d0      	adds	r3, #208	; 0xd0
    8ea4:	4418      	add	r0, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    8ea6:	2202      	movs	r2, #2
    8ea8:	4611      	mov	r1, r2
    8eaa:	3004      	adds	r0, #4
    8eac:	f020 fa78 	bl	293a0 <_impl_k_sem_init>
		*chan = &att->chan.chan;
    8eb0:	602e      	str	r6, [r5, #0]
		return 0;
    8eb2:	e7d4      	b.n	8e5e <bt_att_accept+0xa>
    8eb4:	20000758 	.word	0x20000758
    8eb8:	2000baf4 	.word	0x2000baf4

00008ebc <att_req_destroy>:
{
    8ebc:	b510      	push	{r4, lr}
    8ebe:	4604      	mov	r4, r0
	if (req->buf) {
    8ec0:	6900      	ldr	r0, [r0, #16]
    8ec2:	b108      	cbz	r0, 8ec8 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    8ec4:	f011 ff2a 	bl	1ad1c <net_buf_unref>
	if (req->destroy) {
    8ec8:	68a3      	ldr	r3, [r4, #8]
    8eca:	b10b      	cbz	r3, 8ed0 <att_req_destroy+0x14>
		req->destroy(req);
    8ecc:	4620      	mov	r0, r4
    8ece:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    8ed0:	2218      	movs	r2, #24
    8ed2:	2100      	movs	r1, #0
    8ed4:	4620      	mov	r0, r4
    8ed6:	f021 fd1f 	bl	2a918 <memset>
    8eda:	bd10      	pop	{r4, pc}

00008edc <att_get>:
{
    8edc:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8ede:	2104      	movs	r1, #4
    8ee0:	f7ff fb07 	bl	84f2 <bt_l2cap_le_lookup_tx_cid>
}
    8ee4:	bd08      	pop	{r3, pc}

00008ee6 <att_rsp_sent>:
{
    8ee6:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8ee8:	f7ff fff8 	bl	8edc <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
    8eec:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8ef0:	f3bf 8f5b 	dmb	ish
    8ef4:	e853 2f00 	ldrex	r2, [r3]
    8ef8:	f022 0201 	bic.w	r2, r2, #1
    8efc:	e843 2100 	strex	r1, r2, [r3]
    8f00:	2900      	cmp	r1, #0
    8f02:	d1f7      	bne.n	8ef4 <att_rsp_sent+0xe>
    8f04:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8f08:	30d4      	adds	r0, #212	; 0xd4
    8f0a:	f020 fa52 	bl	293b2 <_impl_k_sem_give>
    8f0e:	bd08      	pop	{r3, pc}

00008f10 <att_pdu_sent>:
{
    8f10:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8f12:	f7ff ffe3 	bl	8edc <att_get>
    8f16:	30d4      	adds	r0, #212	; 0xd4
    8f18:	f020 fa4b 	bl	293b2 <_impl_k_sem_give>
    8f1c:	bd08      	pop	{r3, pc}

00008f1e <att_cfm_sent>:
{
    8f1e:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8f20:	f7ff ffdc 	bl	8edc <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
    8f24:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    8f28:	f3bf 8f5b 	dmb	ish
    8f2c:	e853 2f00 	ldrex	r2, [r3]
    8f30:	f022 0202 	bic.w	r2, r2, #2
    8f34:	e843 2100 	strex	r1, r2, [r3]
    8f38:	2900      	cmp	r1, #0
    8f3a:	d1f7      	bne.n	8f2c <att_cfm_sent+0xe>
    8f3c:	f3bf 8f5b 	dmb	ish
    8f40:	30d4      	adds	r0, #212	; 0xd4
    8f42:	f020 fa36 	bl	293b2 <_impl_k_sem_give>
    8f46:	bd08      	pop	{r3, pc}

00008f48 <att_notify>:
{
    8f48:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    8f4a:	f101 0008 	add.w	r0, r1, #8
    8f4e:	f011 ff8e 	bl	1ae6e <net_buf_simple_pull_le16>
}
    8f52:	2000      	movs	r0, #0
    8f54:	bd08      	pop	{r3, pc}
	...

00008f58 <att_req_sent>:
{
    8f58:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
    8f5a:	f7ff ffbf 	bl	8edc <att_get>
    8f5e:	4604      	mov	r4, r0
    8f60:	30d4      	adds	r0, #212	; 0xd4
    8f62:	f020 fa26 	bl	293b2 <_impl_k_sem_give>
	if (att->req) {
    8f66:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8f6a:	b133      	cbz	r3, 8f7a <att_req_sent+0x22>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8f6c:	f247 5230 	movw	r2, #30000	; 0x7530
    8f70:	f104 01ac 	add.w	r1, r4, #172	; 0xac
    8f74:	4801      	ldr	r0, [pc, #4]	; (8f7c <att_req_sent+0x24>)
    8f76:	f021 f865 	bl	2a044 <k_delayed_work_submit_to_queue>
    8f7a:	bd10      	pop	{r4, pc}
    8f7c:	20002c78 	.word	0x20002c78

00008f80 <read_group_cb>:
{
    8f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f84:	b084      	sub	sp, #16
    8f86:	4605      	mov	r5, r0
    8f88:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8f8a:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    8f8c:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8f8e:	2300      	movs	r3, #0
    8f90:	f88d 3008 	strb.w	r3, [sp, #8]
    8f94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8f98:	f8ad 300a 	strh.w	r3, [sp, #10]
    8f9c:	a902      	add	r1, sp, #8
    8f9e:	6800      	ldr	r0, [r0, #0]
    8fa0:	f7fb fb8d 	bl	46be <bt_uuid_cmp>
    8fa4:	b1a8      	cbz	r0, 8fd2 <read_group_cb+0x52>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8fa6:	2300      	movs	r3, #0
    8fa8:	f88d 300c 	strb.w	r3, [sp, #12]
    8fac:	f642 0301 	movw	r3, #10241	; 0x2801
    8fb0:	f8ad 300e 	strh.w	r3, [sp, #14]
    8fb4:	a903      	add	r1, sp, #12
    8fb6:	6828      	ldr	r0, [r5, #0]
    8fb8:	f7fb fb81 	bl	46be <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8fbc:	b148      	cbz	r0, 8fd2 <read_group_cb+0x52>
		if (data->group && attr->handle > data->group->end_handle) {
    8fbe:	6923      	ldr	r3, [r4, #16]
    8fc0:	2b00      	cmp	r3, #0
    8fc2:	d04c      	beq.n	905e <read_group_cb+0xde>
    8fc4:	8a2a      	ldrh	r2, [r5, #16]
    8fc6:	8859      	ldrh	r1, [r3, #2]
    8fc8:	428a      	cmp	r2, r1
    8fca:	d94a      	bls.n	9062 <read_group_cb+0xe2>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    8fcc:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    8fce:	2001      	movs	r0, #1
    8fd0:	e039      	b.n	9046 <read_group_cb+0xc6>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8fd2:	6861      	ldr	r1, [r4, #4]
    8fd4:	6828      	ldr	r0, [r5, #0]
    8fd6:	f7fb fb72 	bl	46be <bt_uuid_cmp>
    8fda:	2800      	cmp	r0, #0
    8fdc:	d130      	bne.n	9040 <read_group_cb+0xc0>
	if (data->rsp->len &&
    8fde:	68e3      	ldr	r3, [r4, #12]
    8fe0:	781a      	ldrb	r2, [r3, #0]
    8fe2:	b132      	cbz	r2, 8ff2 <read_group_cb+0x72>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8fe4:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    8fe8:	68a1      	ldr	r1, [r4, #8]
    8fea:	8989      	ldrh	r1, [r1, #12]
    8fec:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    8fee:	4293      	cmp	r3, r2
    8ff0:	db39      	blt.n	9066 <read_group_cb+0xe6>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8ff2:	68a0      	ldr	r0, [r4, #8]
    8ff4:	2104      	movs	r1, #4
    8ff6:	3008      	adds	r0, #8
    8ff8:	f011 fedc 	bl	1adb4 <net_buf_simple_add>
    8ffc:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    8ffe:	8a2b      	ldrh	r3, [r5, #16]
    9000:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    9002:	6923      	ldr	r3, [r4, #16]
    9004:	8a2a      	ldrh	r2, [r5, #16]
    9006:	805a      	strh	r2, [r3, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    9008:	f8d5 8004 	ldr.w	r8, [r5, #4]
    900c:	68a3      	ldr	r3, [r4, #8]
    900e:	6899      	ldr	r1, [r3, #8]
    9010:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    9012:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    9016:	1a9b      	subs	r3, r3, r2
    9018:	2000      	movs	r0, #0
    901a:	9000      	str	r0, [sp, #0]
    901c:	b29b      	uxth	r3, r3
    901e:	440a      	add	r2, r1
    9020:	4629      	mov	r1, r5
    9022:	4638      	mov	r0, r7
    9024:	47c0      	blx	r8
	if (read < 0) {
    9026:	1e01      	subs	r1, r0, #0
    9028:	db1f      	blt.n	906a <read_group_cb+0xea>
	if (!data->rsp->len) {
    902a:	68e2      	ldr	r2, [r4, #12]
    902c:	7813      	ldrb	r3, [r2, #0]
    902e:	b96b      	cbnz	r3, 904c <read_group_cb+0xcc>
		data->rsp->len = read + sizeof(*data->group);
    9030:	1d0b      	adds	r3, r1, #4
    9032:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    9034:	68a0      	ldr	r0, [r4, #8]
    9036:	3008      	adds	r0, #8
    9038:	f011 febc 	bl	1adb4 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    903c:	2001      	movs	r0, #1
    903e:	e002      	b.n	9046 <read_group_cb+0xc6>
		data->group = NULL;
    9040:	2300      	movs	r3, #0
    9042:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    9044:	2001      	movs	r0, #1
}
    9046:	b004      	add	sp, #16
    9048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    904c:	1d0a      	adds	r2, r1, #4
    904e:	4293      	cmp	r3, r2
    9050:	d0f0      	beq.n	9034 <read_group_cb+0xb4>
		data->buf->len -= sizeof(*data->group);
    9052:	68a2      	ldr	r2, [r4, #8]
    9054:	8993      	ldrh	r3, [r2, #12]
    9056:	3b04      	subs	r3, #4
    9058:	8193      	strh	r3, [r2, #12]
		return false;
    905a:	2000      	movs	r0, #0
    905c:	e7f3      	b.n	9046 <read_group_cb+0xc6>
		return BT_GATT_ITER_CONTINUE;
    905e:	2001      	movs	r0, #1
    9060:	e7f1      	b.n	9046 <read_group_cb+0xc6>
    9062:	2001      	movs	r0, #1
    9064:	e7ef      	b.n	9046 <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    9066:	2000      	movs	r0, #0
    9068:	e7ed      	b.n	9046 <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    906a:	2000      	movs	r0, #0
    906c:	e7eb      	b.n	9046 <read_group_cb+0xc6>

0000906e <read_type_cb>:
{
    906e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9072:	b082      	sub	sp, #8
    9074:	4606      	mov	r6, r0
    9076:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    9078:	680f      	ldr	r7, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    907a:	f8d7 8000 	ldr.w	r8, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    907e:	6849      	ldr	r1, [r1, #4]
    9080:	6800      	ldr	r0, [r0, #0]
    9082:	f7fb fb1c 	bl	46be <bt_uuid_cmp>
    9086:	2800      	cmp	r0, #0
    9088:	d14d      	bne.n	9126 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    908a:	2215      	movs	r2, #21
    908c:	4631      	mov	r1, r6
    908e:	4640      	mov	r0, r8
    9090:	f7ff fdf1 	bl	8c76 <check_perm>
    9094:	4605      	mov	r5, r0
    9096:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    9098:	b130      	cbz	r0, 90a8 <read_type_cb+0x3a>
		if (data->rsp->len) {
    909a:	68e3      	ldr	r3, [r4, #12]
    909c:	781d      	ldrb	r5, [r3, #0]
    909e:	2d00      	cmp	r5, #0
    90a0:	d042      	beq.n	9128 <read_type_cb+0xba>
			data->err = 0x00;
    90a2:	2500      	movs	r5, #0
    90a4:	7525      	strb	r5, [r4, #20]
    90a6:	e03f      	b.n	9128 <read_type_cb+0xba>
	data->err = 0x00;
    90a8:	f04f 0900 	mov.w	r9, #0
    90ac:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    90b0:	68a0      	ldr	r0, [r4, #8]
    90b2:	2102      	movs	r1, #2
    90b4:	3008      	adds	r0, #8
    90b6:	f011 fe7d 	bl	1adb4 <net_buf_simple_add>
    90ba:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    90bc:	8a33      	ldrh	r3, [r6, #16]
    90be:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    90c0:	f8d6 a004 	ldr.w	sl, [r6, #4]
    90c4:	68a3      	ldr	r3, [r4, #8]
    90c6:	6899      	ldr	r1, [r3, #8]
    90c8:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    90ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    90ce:	1a9b      	subs	r3, r3, r2
    90d0:	f8cd 9000 	str.w	r9, [sp]
    90d4:	b29b      	uxth	r3, r3
    90d6:	440a      	add	r2, r1
    90d8:	4631      	mov	r1, r6
    90da:	4640      	mov	r0, r8
    90dc:	47d0      	blx	sl
	if (read < 0) {
    90de:	1e01      	subs	r1, r0, #0
    90e0:	db14      	blt.n	910c <read_type_cb+0x9e>
	if (!data->rsp->len) {
    90e2:	68e2      	ldr	r2, [r4, #12]
    90e4:	7813      	ldrb	r3, [r2, #0]
    90e6:	b9b3      	cbnz	r3, 9116 <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
    90e8:	1c8b      	adds	r3, r1, #2
    90ea:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    90ec:	68a0      	ldr	r0, [r4, #8]
    90ee:	3008      	adds	r0, #8
    90f0:	f011 fe60 	bl	1adb4 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    90f4:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
    90f8:	68a3      	ldr	r3, [r4, #8]
    90fa:	899b      	ldrh	r3, [r3, #12]
    90fc:	1aed      	subs	r5, r5, r3
    90fe:	68e3      	ldr	r3, [r4, #12]
    9100:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9102:	429d      	cmp	r5, r3
    9104:	bfd4      	ite	le
    9106:	2500      	movle	r5, #0
    9108:	2501      	movgt	r5, #1
    910a:	e00d      	b.n	9128 <read_type_cb+0xba>
		data->err = err_to_att(read);
    910c:	4608      	mov	r0, r1
    910e:	f7ff fde1 	bl	8cd4 <err_to_att>
    9112:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    9114:	e008      	b.n	9128 <read_type_cb+0xba>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    9116:	1c8a      	adds	r2, r1, #2
    9118:	4293      	cmp	r3, r2
    911a:	d0e7      	beq.n	90ec <read_type_cb+0x7e>
		data->buf->len -= sizeof(*data->item);
    911c:	68a2      	ldr	r2, [r4, #8]
    911e:	8993      	ldrh	r3, [r2, #12]
    9120:	3b02      	subs	r3, #2
    9122:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    9124:	e000      	b.n	9128 <read_type_cb+0xba>
		return BT_GATT_ITER_CONTINUE;
    9126:	2501      	movs	r5, #1
}
    9128:	4628      	mov	r0, r5
    912a:	b002      	add	sp, #8
    912c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00009130 <uuid_create>:
{
    9130:	b510      	push	{r4, lr}
    9132:	4604      	mov	r4, r0
	switch (buf->len) {
    9134:	898b      	ldrh	r3, [r1, #12]
    9136:	2b02      	cmp	r3, #2
    9138:	d003      	beq.n	9142 <uuid_create+0x12>
    913a:	2b10      	cmp	r3, #16
    913c:	d00a      	beq.n	9154 <uuid_create+0x24>
	return false;
    913e:	2000      	movs	r0, #0
}
    9140:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    9142:	2300      	movs	r3, #0
    9144:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    9146:	f101 0008 	add.w	r0, r1, #8
    914a:	f011 fe90 	bl	1ae6e <net_buf_simple_pull_le16>
    914e:	8060      	strh	r0, [r4, #2]
		return true;
    9150:	2001      	movs	r0, #1
    9152:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    9154:	2302      	movs	r3, #2
    9156:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    915a:	898a      	ldrh	r2, [r1, #12]
    915c:	6889      	ldr	r1, [r1, #8]
    915e:	f7f7 f8af 	bl	2c0 <memcpy>
		return true;
    9162:	2001      	movs	r0, #1
    9164:	bd10      	pop	{r4, pc}

00009166 <find_info_cb>:
{
    9166:	b570      	push	{r4, r5, r6, lr}
    9168:	4605      	mov	r5, r0
    916a:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    916c:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    916e:	688b      	ldr	r3, [r1, #8]
    9170:	b13b      	cbz	r3, 9182 <find_info_cb+0x1c>
	switch (data->rsp->format) {
    9172:	68a3      	ldr	r3, [r4, #8]
    9174:	781b      	ldrb	r3, [r3, #0]
    9176:	2b01      	cmp	r3, #1
    9178:	d011      	beq.n	919e <find_info_cb+0x38>
    917a:	2b02      	cmp	r3, #2
    917c:	d02b      	beq.n	91d6 <find_info_cb+0x70>
	return BT_GATT_ITER_STOP;
    917e:	2000      	movs	r0, #0
    9180:	bd70      	pop	{r4, r5, r6, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    9182:	6848      	ldr	r0, [r1, #4]
    9184:	2101      	movs	r1, #1
    9186:	3008      	adds	r0, #8
    9188:	f011 fe14 	bl	1adb4 <net_buf_simple_add>
    918c:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    918e:	682b      	ldr	r3, [r5, #0]
    9190:	781b      	ldrb	r3, [r3, #0]
    9192:	b913      	cbnz	r3, 919a <find_info_cb+0x34>
    9194:	2301      	movs	r3, #1
    9196:	7003      	strb	r3, [r0, #0]
    9198:	e7eb      	b.n	9172 <find_info_cb+0xc>
    919a:	2302      	movs	r3, #2
    919c:	e7fb      	b.n	9196 <find_info_cb+0x30>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    919e:	682b      	ldr	r3, [r5, #0]
    91a0:	781b      	ldrb	r3, [r3, #0]
    91a2:	b10b      	cbz	r3, 91a8 <find_info_cb+0x42>
			return BT_GATT_ITER_STOP;
    91a4:	2000      	movs	r0, #0
    91a6:	bd70      	pop	{r4, r5, r6, pc}
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    91a8:	6860      	ldr	r0, [r4, #4]
    91aa:	2104      	movs	r1, #4
    91ac:	3008      	adds	r0, #8
    91ae:	f011 fe01 	bl	1adb4 <net_buf_simple_add>
    91b2:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    91b4:	8a2b      	ldrh	r3, [r5, #16]
    91b6:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    91b8:	68e3      	ldr	r3, [r4, #12]
    91ba:	682a      	ldr	r2, [r5, #0]
    91bc:	8852      	ldrh	r2, [r2, #2]
    91be:	805a      	strh	r2, [r3, #2]
		if (att->chan.tx.mtu - data->buf->len >
    91c0:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    91c4:	6862      	ldr	r2, [r4, #4]
    91c6:	8992      	ldrh	r2, [r2, #12]
    91c8:	1a9b      	subs	r3, r3, r2
    91ca:	2b04      	cmp	r3, #4
    91cc:	d801      	bhi.n	91d2 <find_info_cb+0x6c>
	return BT_GATT_ITER_STOP;
    91ce:	2000      	movs	r0, #0
    91d0:	bd70      	pop	{r4, r5, r6, pc}
			return BT_GATT_ITER_CONTINUE;
    91d2:	2001      	movs	r0, #1
    91d4:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    91d6:	682b      	ldr	r3, [r5, #0]
    91d8:	781b      	ldrb	r3, [r3, #0]
    91da:	2b02      	cmp	r3, #2
    91dc:	d001      	beq.n	91e2 <find_info_cb+0x7c>
			return BT_GATT_ITER_STOP;
    91de:	2000      	movs	r0, #0
    91e0:	bd70      	pop	{r4, r5, r6, pc}
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    91e2:	6860      	ldr	r0, [r4, #4]
    91e4:	2112      	movs	r1, #18
    91e6:	3008      	adds	r0, #8
    91e8:	f011 fde4 	bl	1adb4 <net_buf_simple_add>
    91ec:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    91ee:	8a2b      	ldrh	r3, [r5, #16]
    91f0:	8003      	strh	r3, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    91f2:	68e0      	ldr	r0, [r4, #12]
    91f4:	6829      	ldr	r1, [r5, #0]
    91f6:	2210      	movs	r2, #16
    91f8:	3101      	adds	r1, #1
    91fa:	3002      	adds	r0, #2
    91fc:	f7f7 f860 	bl	2c0 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    9200:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    9204:	6862      	ldr	r2, [r4, #4]
    9206:	8992      	ldrh	r2, [r2, #12]
    9208:	1a9b      	subs	r3, r3, r2
    920a:	2b12      	cmp	r3, #18
    920c:	d901      	bls.n	9212 <find_info_cb+0xac>
			return BT_GATT_ITER_CONTINUE;
    920e:	2001      	movs	r0, #1
    9210:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_STOP;
    9212:	2000      	movs	r0, #0
}
    9214:	bd70      	pop	{r4, r5, r6, pc}

00009216 <find_type_cb>:
{
    9216:	b5f0      	push	{r4, r5, r6, r7, lr}
    9218:	b089      	sub	sp, #36	; 0x24
    921a:	4605      	mov	r5, r0
    921c:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    921e:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    9220:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    9222:	2300      	movs	r3, #0
    9224:	f88d 3018 	strb.w	r3, [sp, #24]
    9228:	f642 0301 	movw	r3, #10241	; 0x2801
    922c:	f8ad 301a 	strh.w	r3, [sp, #26]
    9230:	a906      	add	r1, sp, #24
    9232:	6800      	ldr	r0, [r0, #0]
    9234:	f7fb fa43 	bl	46be <bt_uuid_cmp>
    9238:	b920      	cbnz	r0, 9244 <find_type_cb+0x2e>
		data->group = NULL;
    923a:	2300      	movs	r3, #0
    923c:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    923e:	2001      	movs	r0, #1
}
    9240:	b009      	add	sp, #36	; 0x24
    9242:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    9244:	2300      	movs	r3, #0
    9246:	f88d 301c 	strb.w	r3, [sp, #28]
    924a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    924e:	f8ad 301e 	strh.w	r3, [sp, #30]
    9252:	a907      	add	r1, sp, #28
    9254:	6828      	ldr	r0, [r5, #0]
    9256:	f7fb fa32 	bl	46be <bt_uuid_cmp>
    925a:	b148      	cbz	r0, 9270 <find_type_cb+0x5a>
		if (data->group && attr->handle > data->group->end_handle) {
    925c:	68a3      	ldr	r3, [r4, #8]
    925e:	2b00      	cmp	r3, #0
    9260:	d039      	beq.n	92d6 <find_type_cb+0xc0>
    9262:	8a2a      	ldrh	r2, [r5, #16]
    9264:	8859      	ldrh	r1, [r3, #2]
    9266:	428a      	cmp	r2, r1
    9268:	d937      	bls.n	92da <find_type_cb+0xc4>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    926a:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    926c:	2001      	movs	r0, #1
    926e:	e7e7      	b.n	9240 <find_type_cb+0x2a>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    9270:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    9274:	6862      	ldr	r2, [r4, #4]
    9276:	8992      	ldrh	r2, [r2, #12]
    9278:	1a9b      	subs	r3, r3, r2
    927a:	2b03      	cmp	r3, #3
    927c:	d801      	bhi.n	9282 <find_type_cb+0x6c>
		return BT_GATT_ITER_STOP;
    927e:	2000      	movs	r0, #0
    9280:	e7de      	b.n	9240 <find_type_cb+0x2a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    9282:	686e      	ldr	r6, [r5, #4]
    9284:	2300      	movs	r3, #0
    9286:	9300      	str	r3, [sp, #0]
    9288:	2310      	movs	r3, #16
    928a:	aa02      	add	r2, sp, #8
    928c:	4629      	mov	r1, r5
    928e:	4638      	mov	r0, r7
    9290:	47b0      	blx	r6
	if (read < 0) {
    9292:	1e02      	subs	r2, r0, #0
    9294:	db06      	blt.n	92a4 <find_type_cb+0x8e>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    9296:	7c23      	ldrb	r3, [r4, #16]
    9298:	429a      	cmp	r2, r3
    929a:	d007      	beq.n	92ac <find_type_cb+0x96>
		data->group = NULL;
    929c:	2300      	movs	r3, #0
    929e:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    92a0:	2001      	movs	r0, #1
    92a2:	e7cd      	b.n	9240 <find_type_cb+0x2a>
		data->group = NULL;
    92a4:	2300      	movs	r3, #0
    92a6:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    92a8:	2001      	movs	r0, #1
    92aa:	e7c9      	b.n	9240 <find_type_cb+0x2a>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    92ac:	a902      	add	r1, sp, #8
    92ae:	68e0      	ldr	r0, [r4, #12]
    92b0:	f021 fa9e 	bl	2a7f0 <memcmp>
    92b4:	2800      	cmp	r0, #0
    92b6:	d1f1      	bne.n	929c <find_type_cb+0x86>
	data->err = 0x00;
    92b8:	2300      	movs	r3, #0
    92ba:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    92bc:	6860      	ldr	r0, [r4, #4]
    92be:	2104      	movs	r1, #4
    92c0:	3008      	adds	r0, #8
    92c2:	f011 fd77 	bl	1adb4 <net_buf_simple_add>
    92c6:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    92c8:	8a2b      	ldrh	r3, [r5, #16]
    92ca:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    92cc:	68a3      	ldr	r3, [r4, #8]
    92ce:	8a2a      	ldrh	r2, [r5, #16]
    92d0:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    92d2:	2001      	movs	r0, #1
    92d4:	e7b4      	b.n	9240 <find_type_cb+0x2a>
		return BT_GATT_ITER_CONTINUE;
    92d6:	2001      	movs	r0, #1
    92d8:	e7b2      	b.n	9240 <find_type_cb+0x2a>
    92da:	2001      	movs	r0, #1
    92dc:	e7b0      	b.n	9240 <find_type_cb+0x2a>

000092de <att_change_security>:
{
    92de:	b508      	push	{r3, lr}
	switch (err) {
    92e0:	2905      	cmp	r1, #5
    92e2:	d008      	beq.n	92f6 <att_change_security+0x18>
    92e4:	290f      	cmp	r1, #15
    92e6:	d113      	bne.n	9310 <att_change_security+0x32>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    92e8:	7a03      	ldrb	r3, [r0, #8]
    92ea:	2b01      	cmp	r3, #1
    92ec:	d813      	bhi.n	9316 <att_change_security+0x38>
		sec = BT_SECURITY_MEDIUM;
    92ee:	2102      	movs	r1, #2
	return bt_conn_security(conn, sec);
    92f0:	f7fd fe4a 	bl	6f88 <bt_conn_security>
    92f4:	bd08      	pop	{r3, pc}
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    92f6:	7a03      	ldrb	r3, [r0, #8]
    92f8:	2b01      	cmp	r3, #1
    92fa:	d905      	bls.n	9308 <att_change_security+0x2a>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    92fc:	2b02      	cmp	r3, #2
    92fe:	d905      	bls.n	930c <att_change_security+0x2e>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    9300:	2b03      	cmp	r3, #3
    9302:	d80b      	bhi.n	931c <att_change_security+0x3e>
			sec = BT_SECURITY_FIPS;
    9304:	2104      	movs	r1, #4
    9306:	e7f3      	b.n	92f0 <att_change_security+0x12>
			sec = BT_SECURITY_MEDIUM;
    9308:	2102      	movs	r1, #2
    930a:	e7f1      	b.n	92f0 <att_change_security+0x12>
			sec = BT_SECURITY_HIGH;
    930c:	2103      	movs	r1, #3
    930e:	e7ef      	b.n	92f0 <att_change_security+0x12>
		return -EINVAL;
    9310:	f06f 0015 	mvn.w	r0, #21
    9314:	bd08      	pop	{r3, pc}
			return -EALREADY;
    9316:	f06f 0077 	mvn.w	r0, #119	; 0x77
    931a:	bd08      	pop	{r3, pc}
			return -EALREADY;
    931c:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    9320:	bd08      	pop	{r3, pc}
	...

00009324 <bt_att_connected>:
{
    9324:	b510      	push	{r4, lr}
    9326:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9328:	2317      	movs	r3, #23
    932a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    932e:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	k_delayed_work_init(&att->timeout_work, att_timeout);
    9332:	4906      	ldr	r1, [pc, #24]	; (934c <bt_att_connected+0x28>)
    9334:	30ac      	adds	r0, #172	; 0xac
    9336:	f020 fe0d 	bl	29f54 <k_delayed_work_init>
	list->head = NULL;
    933a:	2300      	movs	r3, #0
    933c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	list->tail = NULL;
    9340:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	bt_gatt_connected(ch->chan.conn);
    9344:	6820      	ldr	r0, [r4, #0]
    9346:	f001 fadd 	bl	a904 <bt_gatt_connected>
    934a:	bd10      	pop	{r4, pc}
    934c:	000096ab 	.word	0x000096ab

00009350 <att_send_req>:
{
    9350:	b570      	push	{r4, r5, r6, lr}
    9352:	4605      	mov	r5, r0
    9354:	460c      	mov	r4, r1
	att->req = req;
    9356:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
	k_sem_take(&att->tx_sem, K_FOREVER);
    935a:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    935e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9362:	4630      	mov	r0, r6
    9364:	f020 f838 	bl	293d8 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9368:	682b      	ldr	r3, [r5, #0]
    936a:	7b1b      	ldrb	r3, [r3, #12]
    936c:	2b03      	cmp	r3, #3
    936e:	d019      	beq.n	93a4 <att_send_req+0x54>
    9370:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    9372:	b323      	cbz	r3, 93be <att_send_req+0x6e>
	net_buf_simple_save(&req->buf->b, &req->state);
    9374:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    9376:	f106 0008 	add.w	r0, r6, #8
    937a:	f011 fd80 	bl	1ae7e <net_buf_simple_headroom>
    937e:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    9380:	89b3      	ldrh	r3, [r6, #12]
    9382:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    9384:	682d      	ldr	r5, [r5, #0]
    9386:	6920      	ldr	r0, [r4, #16]
    9388:	f011 fce4 	bl	1ad54 <net_buf_ref>
    938c:	4606      	mov	r6, r0
    938e:	6920      	ldr	r0, [r4, #16]
    9390:	f7ff fcf0 	bl	8d74 <att_cb>
    9394:	4603      	mov	r3, r0
    9396:	4632      	mov	r2, r6
    9398:	2104      	movs	r1, #4
    939a:	4628      	mov	r0, r5
    939c:	f7fe fea3 	bl	80e6 <bt_l2cap_send_cb>
	return 0;
    93a0:	2000      	movs	r0, #0
}
    93a2:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    93a4:	f3bf 8f5b 	dmb	ish
    93a8:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    93ac:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    93b0:	f013 0f04 	tst.w	r3, #4
    93b4:	d101      	bne.n	93ba <att_send_req+0x6a>
    93b6:	2301      	movs	r3, #1
    93b8:	e7db      	b.n	9372 <att_send_req+0x22>
    93ba:	2300      	movs	r3, #0
    93bc:	e7d9      	b.n	9372 <att_send_req+0x22>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    93be:	4630      	mov	r0, r6
    93c0:	f01f fff7 	bl	293b2 <_impl_k_sem_give>
		return -ENOTCONN;
    93c4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    93c8:	bd70      	pop	{r4, r5, r6, pc}

000093ca <att_process>:
{
    93ca:	b508      	push	{r3, lr}
	return (!list->head);
    93cc:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    93d0:	b131      	cbz	r1, 93e0 <att_process+0x16>
	list->head = node->next;
    93d2:	680b      	ldr	r3, [r1, #0]
    93d4:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	if (list->tail == node) {
    93d8:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    93dc:	4291      	cmp	r1, r2
    93de:	d003      	beq.n	93e8 <att_process+0x1e>
	if (!node) {
    93e0:	b109      	cbz	r1, 93e6 <att_process+0x1c>
	att_send_req(att, ATT_REQ(node));
    93e2:	f7ff ffb5 	bl	9350 <att_send_req>
    93e6:	bd08      	pop	{r3, pc}
		list->tail = list->head;
    93e8:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    93ec:	e7f8      	b.n	93e0 <att_process+0x16>

000093ee <att_handle_rsp>:
{
    93ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93f2:	b082      	sub	sp, #8
    93f4:	4604      	mov	r4, r0
    93f6:	460e      	mov	r6, r1
    93f8:	4617      	mov	r7, r2
    93fa:	461d      	mov	r5, r3
	k_delayed_work_cancel(&att->timeout_work);
    93fc:	30ac      	adds	r0, #172	; 0xac
    93fe:	f020 fdc7 	bl	29f90 <k_delayed_work_cancel>
	if (!att->req) {
    9402:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9406:	b1e3      	cbz	r3, 9442 <att_handle_rsp+0x54>
	if (att->req->buf) {
    9408:	6918      	ldr	r0, [r3, #16]
    940a:	b128      	cbz	r0, 9418 <att_handle_rsp+0x2a>
		net_buf_unref(att->req->buf);
    940c:	f011 fc86 	bl	1ad1c <net_buf_unref>
		att->req->buf = NULL;
    9410:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9414:	2200      	movs	r2, #0
    9416:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    9418:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    941c:	f8d3 8004 	ldr.w	r8, [r3, #4]
	att->req->func = NULL;
    9420:	2200      	movs	r2, #0
    9422:	605a      	str	r2, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    9424:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9428:	9300      	str	r3, [sp, #0]
    942a:	463b      	mov	r3, r7
    942c:	4632      	mov	r2, r6
    942e:	4629      	mov	r1, r5
    9430:	6820      	ldr	r0, [r4, #0]
    9432:	47c0      	blx	r8
	if (!att->req->func) {
    9434:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    9438:	6843      	ldr	r3, [r0, #4]
    943a:	b14b      	cbz	r3, 9450 <att_handle_rsp+0x62>
	att->req = NULL;
    943c:	2300      	movs	r3, #0
    943e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	att_process(att);
    9442:	4620      	mov	r0, r4
    9444:	f7ff ffc1 	bl	93ca <att_process>
}
    9448:	2000      	movs	r0, #0
    944a:	b002      	add	sp, #8
    944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		att_req_destroy(att->req);
    9450:	f7ff fd34 	bl	8ebc <att_req_destroy>
    9454:	e7f2      	b.n	943c <att_handle_rsp+0x4e>

00009456 <att_confirm>:
{
    9456:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9458:	2300      	movs	r3, #0
    945a:	898a      	ldrh	r2, [r1, #12]
    945c:	6889      	ldr	r1, [r1, #8]
    945e:	f7ff ffc6 	bl	93ee <att_handle_rsp>
}
    9462:	bd08      	pop	{r3, pc}

00009464 <att_handle_exec_write_rsp>:
{
    9464:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9466:	2300      	movs	r3, #0
    9468:	898a      	ldrh	r2, [r1, #12]
    946a:	6889      	ldr	r1, [r1, #8]
    946c:	f7ff ffbf 	bl	93ee <att_handle_rsp>
}
    9470:	bd08      	pop	{r3, pc}

00009472 <att_handle_prepare_write_rsp>:
{
    9472:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9474:	2300      	movs	r3, #0
    9476:	898a      	ldrh	r2, [r1, #12]
    9478:	6889      	ldr	r1, [r1, #8]
    947a:	f7ff ffb8 	bl	93ee <att_handle_rsp>
}
    947e:	bd08      	pop	{r3, pc}

00009480 <att_handle_write_rsp>:
{
    9480:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9482:	2300      	movs	r3, #0
    9484:	898a      	ldrh	r2, [r1, #12]
    9486:	6889      	ldr	r1, [r1, #8]
    9488:	f7ff ffb1 	bl	93ee <att_handle_rsp>
}
    948c:	bd08      	pop	{r3, pc}

0000948e <att_handle_read_mult_rsp>:
{
    948e:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9490:	2300      	movs	r3, #0
    9492:	898a      	ldrh	r2, [r1, #12]
    9494:	6889      	ldr	r1, [r1, #8]
    9496:	f7ff ffaa 	bl	93ee <att_handle_rsp>
}
    949a:	bd08      	pop	{r3, pc}

0000949c <att_handle_read_blob_rsp>:
{
    949c:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    949e:	2300      	movs	r3, #0
    94a0:	898a      	ldrh	r2, [r1, #12]
    94a2:	6889      	ldr	r1, [r1, #8]
    94a4:	f7ff ffa3 	bl	93ee <att_handle_rsp>
}
    94a8:	bd08      	pop	{r3, pc}

000094aa <att_handle_read_rsp>:
{
    94aa:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    94ac:	2300      	movs	r3, #0
    94ae:	898a      	ldrh	r2, [r1, #12]
    94b0:	6889      	ldr	r1, [r1, #8]
    94b2:	f7ff ff9c 	bl	93ee <att_handle_rsp>
}
    94b6:	bd08      	pop	{r3, pc}

000094b8 <att_handle_read_type_rsp>:
{
    94b8:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    94ba:	2300      	movs	r3, #0
    94bc:	898a      	ldrh	r2, [r1, #12]
    94be:	6889      	ldr	r1, [r1, #8]
    94c0:	f7ff ff95 	bl	93ee <att_handle_rsp>
}
    94c4:	bd08      	pop	{r3, pc}

000094c6 <att_handle_find_type_rsp>:
{
    94c6:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    94c8:	2300      	movs	r3, #0
    94ca:	898a      	ldrh	r2, [r1, #12]
    94cc:	6889      	ldr	r1, [r1, #8]
    94ce:	f7ff ff8e 	bl	93ee <att_handle_rsp>
}
    94d2:	bd08      	pop	{r3, pc}

000094d4 <att_handle_find_info_rsp>:
{
    94d4:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    94d6:	2300      	movs	r3, #0
    94d8:	898a      	ldrh	r2, [r1, #12]
    94da:	6889      	ldr	r1, [r1, #8]
    94dc:	f7ff ff87 	bl	93ee <att_handle_rsp>
}
    94e0:	bd08      	pop	{r3, pc}

000094e2 <att_mtu_rsp>:
	if (!att) {
    94e2:	b1b8      	cbz	r0, 9514 <att_mtu_rsp+0x32>
{
    94e4:	b508      	push	{r3, lr}
    94e6:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
    94e8:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    94ea:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    94ec:	2b16      	cmp	r3, #22
    94ee:	d90b      	bls.n	9508 <att_mtu_rsp+0x26>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    94f0:	2b41      	cmp	r3, #65	; 0x41
    94f2:	bf28      	it	cs
    94f4:	2341      	movcs	r3, #65	; 0x41
    94f6:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    94fa:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	return att_handle_rsp(att, rsp, buf->len, 0);
    94fe:	2300      	movs	r3, #0
    9500:	8992      	ldrh	r2, [r2, #12]
    9502:	f7ff ff74 	bl	93ee <att_handle_rsp>
    9506:	bd08      	pop	{r3, pc}
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    9508:	2304      	movs	r3, #4
    950a:	2200      	movs	r2, #0
    950c:	4611      	mov	r1, r2
    950e:	f7ff ff6e 	bl	93ee <att_handle_rsp>
    9512:	bd08      	pop	{r3, pc}
		return 0;
    9514:	2000      	movs	r0, #0
    9516:	4770      	bx	lr

00009518 <bt_att_encrypt_change>:
{
    9518:	b570      	push	{r4, r5, r6, lr}
    951a:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
    951c:	6805      	ldr	r5, [r0, #0]
	if (hci_status) {
    951e:	b941      	cbnz	r1, 9532 <bt_att_encrypt_change+0x1a>
	if (conn->sec_level == BT_SECURITY_LOW) {
    9520:	7a2b      	ldrb	r3, [r5, #8]
    9522:	2b01      	cmp	r3, #1
    9524:	d004      	beq.n	9530 <bt_att_encrypt_change+0x18>
	if (!att->req || !att->req->retrying) {
    9526:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    952a:	b10b      	cbz	r3, 9530 <bt_att_encrypt_change+0x18>
    952c:	7d1b      	ldrb	r3, [r3, #20]
    952e:	b933      	cbnz	r3, 953e <bt_att_encrypt_change+0x26>
    9530:	bd70      	pop	{r4, r5, r6, pc}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    9532:	2305      	movs	r3, #5
    9534:	2200      	movs	r2, #0
    9536:	4611      	mov	r1, r2
    9538:	f7ff ff59 	bl	93ee <att_handle_rsp>
		return;
    953c:	bd70      	pop	{r4, r5, r6, pc}
	k_sem_take(&att->tx_sem, K_FOREVER);
    953e:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    9542:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9546:	4630      	mov	r0, r6
    9548:	f01f ff46 	bl	293d8 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    954c:	6823      	ldr	r3, [r4, #0]
    954e:	7b1b      	ldrb	r3, [r3, #12]
    9550:	2b03      	cmp	r3, #3
    9552:	d012      	beq.n	957a <bt_att_encrypt_change+0x62>
    9554:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    9556:	b1eb      	cbz	r3, 9594 <bt_att_encrypt_change+0x7c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    9558:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    955c:	691e      	ldr	r6, [r3, #16]
    955e:	4630      	mov	r0, r6
    9560:	f7ff fc08 	bl	8d74 <att_cb>
    9564:	4603      	mov	r3, r0
    9566:	4632      	mov	r2, r6
    9568:	2104      	movs	r1, #4
    956a:	4628      	mov	r0, r5
    956c:	f7fe fdbb 	bl	80e6 <bt_l2cap_send_cb>
	att->req->buf = NULL;
    9570:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9574:	2200      	movs	r2, #0
    9576:	611a      	str	r2, [r3, #16]
    9578:	e7da      	b.n	9530 <bt_att_encrypt_change+0x18>
    957a:	f3bf 8f5b 	dmb	ish
    957e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    9582:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9586:	f013 0f04 	tst.w	r3, #4
    958a:	d101      	bne.n	9590 <bt_att_encrypt_change+0x78>
    958c:	2301      	movs	r3, #1
    958e:	e7e2      	b.n	9556 <bt_att_encrypt_change+0x3e>
    9590:	2300      	movs	r3, #0
    9592:	e7e0      	b.n	9556 <bt_att_encrypt_change+0x3e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9594:	4630      	mov	r0, r6
    9596:	f01f ff0c 	bl	293b2 <_impl_k_sem_give>
    959a:	bd70      	pop	{r4, r5, r6, pc}

0000959c <att_error_rsp>:
{
    959c:	b538      	push	{r3, r4, r5, lr}
    959e:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    95a0:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    95a2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    95a6:	b1fb      	cbz	r3, 95e8 <att_error_rsp+0x4c>
	if (att->req->buf) {
    95a8:	691a      	ldr	r2, [r3, #16]
    95aa:	b132      	cbz	r2, 95ba <att_error_rsp+0x1e>
	buf->data = buf->__buf + state->offset;
    95ac:	f102 0110 	add.w	r1, r2, #16
    95b0:	899d      	ldrh	r5, [r3, #12]
    95b2:	4429      	add	r1, r5
    95b4:	6091      	str	r1, [r2, #8]
	buf->len = state->len;
    95b6:	89db      	ldrh	r3, [r3, #14]
    95b8:	8193      	strh	r3, [r2, #12]
	err = rsp->error;
    95ba:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    95bc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    95c0:	7d1b      	ldrb	r3, [r3, #20]
    95c2:	b133      	cbz	r3, 95d2 <att_error_rsp+0x36>
	return att_handle_rsp(att, NULL, 0, err);
    95c4:	462b      	mov	r3, r5
    95c6:	2200      	movs	r2, #0
    95c8:	4611      	mov	r1, r2
    95ca:	4620      	mov	r0, r4
    95cc:	f7ff ff0f 	bl	93ee <att_handle_rsp>
}
    95d0:	bd38      	pop	{r3, r4, r5, pc}
	if (!att_change_security(att->chan.chan.conn, err)) {
    95d2:	4629      	mov	r1, r5
    95d4:	6820      	ldr	r0, [r4, #0]
    95d6:	f7ff fe82 	bl	92de <att_change_security>
    95da:	2800      	cmp	r0, #0
    95dc:	d1f2      	bne.n	95c4 <att_error_rsp+0x28>
		att->req->retrying = true;
    95de:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    95e2:	2201      	movs	r2, #1
    95e4:	751a      	strb	r2, [r3, #20]
		return 0;
    95e6:	bd38      	pop	{r3, r4, r5, pc}
		err = BT_ATT_ERR_UNLIKELY;
    95e8:	250e      	movs	r5, #14
    95ea:	e7eb      	b.n	95c4 <att_error_rsp+0x28>

000095ec <att_reset>:
{
    95ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    95ee:	b083      	sub	sp, #12
    95f0:	4607      	mov	r7, r0
	atomic_set_bit(att->flags, ATT_DISCONNECTED);
    95f2:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    95f6:	f3bf 8f5b 	dmb	ish
    95fa:	e853 2f00 	ldrex	r2, [r3]
    95fe:	f042 0204 	orr.w	r2, r2, #4
    9602:	e843 2100 	strex	r1, r2, [r3]
    9606:	2900      	cmp	r1, #0
    9608:	d1f7      	bne.n	95fa <att_reset+0xe>
    960a:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    960e:	2400      	movs	r4, #0
    9610:	e004      	b.n	961c <att_reset+0x30>
    9612:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
    9616:	f01f fecc 	bl	293b2 <_impl_k_sem_give>
    961a:	3401      	adds	r4, #1
    961c:	2c01      	cmp	r4, #1
    961e:	ddf8      	ble.n	9612 <att_reset+0x26>
	return list->head;
    9620:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9624:	b11d      	cbz	r5, 962e <att_reset+0x42>
    9626:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9628:	b145      	cbz	r5, 963c <att_reset+0x50>
	return node->next;
    962a:	682c      	ldr	r4, [r5, #0]
    962c:	e006      	b.n	963c <att_reset+0x50>
    962e:	462c      	mov	r4, r5
    9630:	e004      	b.n	963c <att_reset+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9632:	4623      	mov	r3, r4
    9634:	e014      	b.n	9660 <att_reset+0x74>
    9636:	4623      	mov	r3, r4
    9638:	4625      	mov	r5, r4
    963a:	461c      	mov	r4, r3
    963c:	b1c5      	cbz	r5, 9670 <att_reset+0x84>
		if (req->func) {
    963e:	686e      	ldr	r6, [r5, #4]
    9640:	b12e      	cbz	r6, 964e <att_reset+0x62>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    9642:	9500      	str	r5, [sp, #0]
    9644:	2300      	movs	r3, #0
    9646:	461a      	mov	r2, r3
    9648:	210e      	movs	r1, #14
    964a:	4618      	mov	r0, r3
    964c:	47b0      	blx	r6
		att_req_destroy(req);
    964e:	4628      	mov	r0, r5
    9650:	f7ff fc34 	bl	8ebc <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9654:	2c00      	cmp	r4, #0
    9656:	d0ee      	beq.n	9636 <att_reset+0x4a>
    9658:	4622      	mov	r2, r4
    965a:	2c00      	cmp	r4, #0
    965c:	d0e9      	beq.n	9632 <att_reset+0x46>
	return node->next;
    965e:	6823      	ldr	r3, [r4, #0]
    9660:	b113      	cbz	r3, 9668 <att_reset+0x7c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9662:	b11a      	cbz	r2, 966c <att_reset+0x80>
	return node->next;
    9664:	6823      	ldr	r3, [r4, #0]
    9666:	e7e7      	b.n	9638 <att_reset+0x4c>
    9668:	2300      	movs	r3, #0
    966a:	e7e5      	b.n	9638 <att_reset+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    966c:	2300      	movs	r3, #0
    966e:	e7e3      	b.n	9638 <att_reset+0x4c>
	list->head = NULL;
    9670:	2300      	movs	r3, #0
    9672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	list->tail = NULL;
    9676:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	if (!att->req) {
    967a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    967e:	b12b      	cbz	r3, 968c <att_reset+0xa0>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    9680:	230e      	movs	r3, #14
    9682:	2200      	movs	r2, #0
    9684:	4611      	mov	r1, r2
    9686:	4638      	mov	r0, r7
    9688:	f7ff feb1 	bl	93ee <att_handle_rsp>
}
    968c:	b003      	add	sp, #12
    968e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009690 <bt_att_disconnected>:
{
    9690:	b510      	push	{r4, lr}
    9692:	4604      	mov	r4, r0
	att_reset(att);
    9694:	f7ff ffaa 	bl	95ec <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    9698:	6820      	ldr	r0, [r4, #0]
    969a:	f001 f93f 	bl	a91c <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    969e:	22ec      	movs	r2, #236	; 0xec
    96a0:	2100      	movs	r1, #0
    96a2:	4620      	mov	r0, r4
    96a4:	f021 f938 	bl	2a918 <memset>
    96a8:	bd10      	pop	{r4, pc}

000096aa <att_timeout>:
{
    96aa:	b510      	push	{r4, lr}
    96ac:	4604      	mov	r4, r0
	att_reset(att);
    96ae:	38ac      	subs	r0, #172	; 0xac
    96b0:	f7ff ff9c 	bl	95ec <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    96b4:	f854 0cac 	ldr.w	r0, [r4, #-172]
    96b8:	f001 f930 	bl	a91c <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    96bc:	2300      	movs	r3, #0
    96be:	f844 3cac 	str.w	r3, [r4, #-172]
    96c2:	bd10      	pop	{r4, pc}

000096c4 <bt_att_create_pdu>:
{
    96c4:	b538      	push	{r3, r4, r5, lr}
    96c6:	460d      	mov	r5, r1
    96c8:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    96ca:	f7ff fbab 	bl	8e24 <att_chan_get>
	if (!att) {
    96ce:	b180      	cbz	r0, 96f2 <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    96d0:	3401      	adds	r4, #1
    96d2:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
    96d6:	429c      	cmp	r4, r3
    96d8:	d80d      	bhi.n	96f6 <bt_att_create_pdu+0x32>
	buf = bt_l2cap_create_pdu(NULL, 0);
    96da:	2100      	movs	r1, #0
    96dc:	4608      	mov	r0, r1
    96de:	f7fe fc6a 	bl	7fb6 <bt_l2cap_create_pdu>
    96e2:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    96e4:	2101      	movs	r1, #1
    96e6:	3008      	adds	r0, #8
    96e8:	f011 fb64 	bl	1adb4 <net_buf_simple_add>
	hdr->code = op;
    96ec:	7005      	strb	r5, [r0, #0]
}
    96ee:	4620      	mov	r0, r4
    96f0:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    96f2:	2400      	movs	r4, #0
    96f4:	e7fb      	b.n	96ee <bt_att_create_pdu+0x2a>
		return NULL;
    96f6:	2400      	movs	r4, #0
    96f8:	e7f9      	b.n	96ee <bt_att_create_pdu+0x2a>
	...

000096fc <att_indicate>:
{
    96fc:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    96fe:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    9700:	f101 0008 	add.w	r0, r1, #8
    9704:	f011 fbb3 	bl	1ae6e <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    9708:	2200      	movs	r2, #0
    970a:	211e      	movs	r1, #30
    970c:	4620      	mov	r0, r4
    970e:	f7ff ffd9 	bl	96c4 <bt_att_create_pdu>
	if (!buf) {
    9712:	b128      	cbz	r0, 9720 <att_indicate+0x24>
    9714:	4602      	mov	r2, r0
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    9716:	4b03      	ldr	r3, [pc, #12]	; (9724 <att_indicate+0x28>)
    9718:	2104      	movs	r1, #4
    971a:	4620      	mov	r0, r4
    971c:	f7fe fce3 	bl	80e6 <bt_l2cap_send_cb>
}
    9720:	2000      	movs	r0, #0
    9722:	bd10      	pop	{r4, pc}
    9724:	00008f1f 	.word	0x00008f1f

00009728 <att_mtu_req>:
{
    9728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    972c:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    972e:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
    9730:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    9732:	2d16      	cmp	r5, #22
    9734:	d802      	bhi.n	973c <att_mtu_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    9736:	2004      	movs	r0, #4
    9738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    973c:	4604      	mov	r4, r0
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    973e:	2202      	movs	r2, #2
    9740:	2103      	movs	r1, #3
    9742:	4638      	mov	r0, r7
    9744:	f7ff ffbe 	bl	96c4 <bt_att_create_pdu>
	if (!pdu) {
    9748:	4680      	mov	r8, r0
    974a:	b1b8      	cbz	r0, 977c <att_mtu_req+0x54>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    974c:	2102      	movs	r1, #2
    974e:	3008      	adds	r0, #8
    9750:	f011 fb30 	bl	1adb4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    9754:	2600      	movs	r6, #0
    9756:	2341      	movs	r3, #65	; 0x41
    9758:	7003      	strb	r3, [r0, #0]
    975a:	7046      	strb	r6, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    975c:	4b09      	ldr	r3, [pc, #36]	; (9784 <att_mtu_req+0x5c>)
    975e:	4642      	mov	r2, r8
    9760:	2104      	movs	r1, #4
    9762:	4638      	mov	r0, r7
    9764:	f7fe fcbf 	bl	80e6 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    9768:	2d41      	cmp	r5, #65	; 0x41
    976a:	bf28      	it	cs
    976c:	2541      	movcs	r5, #65	; 0x41
    976e:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    9772:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	return 0;
    9776:	4630      	mov	r0, r6
    9778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    977c:	200e      	movs	r0, #14
}
    977e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9782:	bf00      	nop
    9784:	00008ee7 	.word	0x00008ee7

00009788 <send_err_rsp>:
	if (!req) {
    9788:	b901      	cbnz	r1, 978c <send_err_rsp+0x4>
    978a:	4770      	bx	lr
{
    978c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9790:	460f      	mov	r7, r1
    9792:	461d      	mov	r5, r3
    9794:	4616      	mov	r6, r2
    9796:	4604      	mov	r4, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    9798:	2204      	movs	r2, #4
    979a:	2101      	movs	r1, #1
    979c:	f7ff ff92 	bl	96c4 <bt_att_create_pdu>
	if (!buf) {
    97a0:	4680      	mov	r8, r0
    97a2:	b168      	cbz	r0, 97c0 <send_err_rsp+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    97a4:	2104      	movs	r1, #4
    97a6:	3008      	adds	r0, #8
    97a8:	f011 fb04 	bl	1adb4 <net_buf_simple_add>
	rsp->request = req;
    97ac:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
    97ae:	f8a0 6001 	strh.w	r6, [r0, #1]
	rsp->error = err;
    97b2:	70c5      	strb	r5, [r0, #3]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    97b4:	4b03      	ldr	r3, [pc, #12]	; (97c4 <send_err_rsp+0x3c>)
    97b6:	4642      	mov	r2, r8
    97b8:	2104      	movs	r1, #4
    97ba:	4620      	mov	r0, r4
    97bc:	f7fe fc93 	bl	80e6 <bt_l2cap_send_cb>
    97c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    97c4:	00008ee7 	.word	0x00008ee7

000097c8 <bt_att_recv>:
{
    97c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
    97ca:	688d      	ldr	r5, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    97cc:	898b      	ldrh	r3, [r1, #12]
    97ce:	b903      	cbnz	r3, 97d2 <bt_att_recv+0xa>
    97d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    97d2:	460e      	mov	r6, r1
    97d4:	4607      	mov	r7, r0
	net_buf_pull(buf, sizeof(*hdr));
    97d6:	2101      	movs	r1, #1
    97d8:	f106 0008 	add.w	r0, r6, #8
    97dc:	f011 fb37 	bl	1ae4e <net_buf_simple_pull>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    97e0:	2300      	movs	r3, #0
    97e2:	2b1a      	cmp	r3, #26
    97e4:	d822      	bhi.n	982c <bt_att_recv+0x64>
		if (hdr->code == handlers[i].op) {
    97e6:	782c      	ldrb	r4, [r5, #0]
    97e8:	4a2c      	ldr	r2, [pc, #176]	; (989c <bt_att_recv+0xd4>)
    97ea:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    97ee:	4294      	cmp	r4, r2
    97f0:	d001      	beq.n	97f6 <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    97f2:	3301      	adds	r3, #1
    97f4:	e7f5      	b.n	97e2 <bt_att_recv+0x1a>
			handler = &handlers[i];
    97f6:	4c29      	ldr	r4, [pc, #164]	; (989c <bt_att_recv+0xd4>)
    97f8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (!handler) {
    97fc:	b1c4      	cbz	r4, 9830 <bt_att_recv+0x68>
		if (handler->type == ATT_REQUEST &&
    97fe:	78a3      	ldrb	r3, [r4, #2]
    9800:	2b01      	cmp	r3, #1
    9802:	d022      	beq.n	984a <bt_att_recv+0x82>
		} else if (handler->type == ATT_INDICATION &&
    9804:	78a3      	ldrb	r3, [r4, #2]
    9806:	2b05      	cmp	r3, #5
    9808:	d031      	beq.n	986e <bt_att_recv+0xa6>
	if (buf->len < handler->expect_len) {
    980a:	89b2      	ldrh	r2, [r6, #12]
    980c:	7863      	ldrb	r3, [r4, #1]
    980e:	429a      	cmp	r2, r3
    9810:	d23f      	bcs.n	9892 <bt_att_recv+0xca>
		err = BT_ATT_ERR_INVALID_PDU;
    9812:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
    9814:	78a2      	ldrb	r2, [r4, #2]
    9816:	2a01      	cmp	r2, #1
    9818:	d1da      	bne.n	97d0 <bt_att_recv+0x8>
    981a:	2800      	cmp	r0, #0
    981c:	d0d8      	beq.n	97d0 <bt_att_recv+0x8>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    981e:	4603      	mov	r3, r0
    9820:	2200      	movs	r2, #0
    9822:	7829      	ldrb	r1, [r5, #0]
    9824:	6838      	ldr	r0, [r7, #0]
    9826:	f7ff ffaf 	bl	9788 <send_err_rsp>
    982a:	e7d1      	b.n	97d0 <bt_att_recv+0x8>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    982c:	2400      	movs	r4, #0
    982e:	e7e5      	b.n	97fc <bt_att_recv+0x34>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    9830:	782c      	ldrb	r4, [r5, #0]
    9832:	4620      	mov	r0, r4
    9834:	f7ff fa86 	bl	8d44 <att_op_get_type>
    9838:	2800      	cmp	r0, #0
    983a:	d0c9      	beq.n	97d0 <bt_att_recv+0x8>
			send_err_rsp(chan->conn, hdr->code, 0,
    983c:	2306      	movs	r3, #6
    983e:	2200      	movs	r2, #0
    9840:	4621      	mov	r1, r4
    9842:	6838      	ldr	r0, [r7, #0]
    9844:	f7ff ffa0 	bl	9788 <send_err_rsp>
    9848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
    984a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    984e:	f3bf 8f5b 	dmb	ish
    9852:	e853 2f00 	ldrex	r2, [r3]
    9856:	f042 0101 	orr.w	r1, r2, #1
    985a:	e843 1000 	strex	r0, r1, [r3]
    985e:	2800      	cmp	r0, #0
    9860:	d1f7      	bne.n	9852 <bt_att_recv+0x8a>
    9862:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    9866:	f012 0f01 	tst.w	r2, #1
    986a:	d0cb      	beq.n	9804 <bt_att_recv+0x3c>
    986c:	e7b0      	b.n	97d0 <bt_att_recv+0x8>
			   atomic_test_and_set_bit(att->flags,
    986e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    9872:	f3bf 8f5b 	dmb	ish
    9876:	e853 2f00 	ldrex	r2, [r3]
    987a:	f042 0102 	orr.w	r1, r2, #2
    987e:	e843 1000 	strex	r0, r1, [r3]
    9882:	2800      	cmp	r0, #0
    9884:	d1f7      	bne.n	9876 <bt_att_recv+0xae>
    9886:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
    988a:	f012 0f02 	tst.w	r2, #2
    988e:	d0bc      	beq.n	980a <bt_att_recv+0x42>
    9890:	e79e      	b.n	97d0 <bt_att_recv+0x8>
		err = handler->func(att, buf);
    9892:	6863      	ldr	r3, [r4, #4]
    9894:	4631      	mov	r1, r6
    9896:	4638      	mov	r0, r7
    9898:	4798      	blx	r3
    989a:	e7bb      	b.n	9814 <bt_att_recv+0x4c>
    989c:	0003158c 	.word	0x0003158c

000098a0 <att_write_rsp>:
{
    98a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98a4:	b086      	sub	sp, #24
	if (!handle) {
    98a6:	b923      	cbnz	r3, 98b2 <att_write_rsp+0x12>
		return BT_ATT_ERR_INVALID_HANDLE;
    98a8:	2401      	movs	r4, #1
}
    98aa:	4620      	mov	r0, r4
    98ac:	b006      	add	sp, #24
    98ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98b2:	4698      	mov	r8, r3
    98b4:	4617      	mov	r7, r2
    98b6:	460e      	mov	r6, r1
    98b8:	4605      	mov	r5, r0
	memset(&data, 0, sizeof(data));
    98ba:	2218      	movs	r2, #24
    98bc:	2100      	movs	r1, #0
    98be:	4668      	mov	r0, sp
    98c0:	f021 f82a 	bl	2a918 <memset>
	if (rsp) {
    98c4:	b137      	cbz	r7, 98d4 <att_write_rsp+0x34>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    98c6:	2200      	movs	r2, #0
    98c8:	4639      	mov	r1, r7
    98ca:	4628      	mov	r0, r5
    98cc:	f7ff fefa 	bl	96c4 <bt_att_create_pdu>
    98d0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    98d2:	b3a0      	cbz	r0, 993e <att_write_rsp+0x9e>
	data.conn = conn;
    98d4:	9500      	str	r5, [sp, #0]
	data.op = op;
    98d6:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    98da:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    98de:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    98e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    98e4:	9303      	str	r3, [sp, #12]
	data.len = len;
    98e6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    98ea:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    98ee:	2301      	movs	r3, #1
    98f0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    98f4:	466b      	mov	r3, sp
    98f6:	4a13      	ldr	r2, [pc, #76]	; (9944 <att_write_rsp+0xa4>)
    98f8:	4641      	mov	r1, r8
    98fa:	4640      	mov	r0, r8
    98fc:	f000 ff26 	bl	a74c <bt_gatt_foreach_attr>
	if (data.err) {
    9900:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9904:	b194      	cbz	r4, 992c <att_write_rsp+0x8c>
		if (rsp) {
    9906:	b91f      	cbnz	r7, 9910 <att_write_rsp+0x70>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    9908:	2e18      	cmp	r6, #24
    990a:	d00c      	beq.n	9926 <att_write_rsp+0x86>
    990c:	2400      	movs	r4, #0
    990e:	e7cc      	b.n	98aa <att_write_rsp+0xa>
			net_buf_unref(data.buf);
    9910:	9801      	ldr	r0, [sp, #4]
    9912:	f011 fa03 	bl	1ad1c <net_buf_unref>
			send_err_rsp(conn, op, handle, data.err);
    9916:	f89d 3014 	ldrb.w	r3, [sp, #20]
    991a:	4642      	mov	r2, r8
    991c:	4631      	mov	r1, r6
    991e:	4628      	mov	r0, r5
    9920:	f7ff ff32 	bl	9788 <send_err_rsp>
    9924:	e7f0      	b.n	9908 <att_write_rsp+0x68>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    9926:	f89d 4014 	ldrb.w	r4, [sp, #20]
    992a:	e7be      	b.n	98aa <att_write_rsp+0xa>
	if (data.buf) {
    992c:	9a01      	ldr	r2, [sp, #4]
    992e:	2a00      	cmp	r2, #0
    9930:	d0bb      	beq.n	98aa <att_write_rsp+0xa>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    9932:	4b05      	ldr	r3, [pc, #20]	; (9948 <att_write_rsp+0xa8>)
    9934:	2104      	movs	r1, #4
    9936:	4628      	mov	r0, r5
    9938:	f7fe fbd5 	bl	80e6 <bt_l2cap_send_cb>
    993c:	e7b5      	b.n	98aa <att_write_rsp+0xa>
			return BT_ATT_ERR_UNLIKELY;
    993e:	240e      	movs	r4, #14
    9940:	e7b3      	b.n	98aa <att_write_rsp+0xa>
    9942:	bf00      	nop
    9944:	00008ce7 	.word	0x00008ce7
    9948:	00008ee7 	.word	0x00008ee7

0000994c <att_signed_write_cmd>:
{
    994c:	b5f0      	push	{r4, r5, r6, r7, lr}
    994e:	b085      	sub	sp, #20
    9950:	460d      	mov	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9952:	6806      	ldr	r6, [r0, #0]
	req = (void *)buf->data;
    9954:	460c      	mov	r4, r1
    9956:	f854 3f08 	ldr.w	r3, [r4, #8]!
	handle = sys_le16_to_cpu(req->handle);
    995a:	881f      	ldrh	r7, [r3, #0]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    995c:	2101      	movs	r1, #1
    995e:	4620      	mov	r0, r4
    9960:	f011 fa5f 	bl	1ae22 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    9964:	4629      	mov	r1, r5
    9966:	4630      	mov	r0, r6
    9968:	f003 faf2 	bl	cf50 <bt_smp_sign_verify>
	if (err) {
    996c:	b110      	cbz	r0, 9974 <att_signed_write_cmd+0x28>
		return 0;
    996e:	2000      	movs	r0, #0
}
    9970:	b005      	add	sp, #20
    9972:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    9974:	2101      	movs	r1, #1
    9976:	4620      	mov	r0, r4
    9978:	f011 fa69 	bl	1ae4e <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    997c:	2102      	movs	r1, #2
    997e:	4620      	mov	r0, r4
    9980:	f011 fa65 	bl	1ae4e <net_buf_simple_pull>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    9984:	68aa      	ldr	r2, [r5, #8]
			     buf->len - sizeof(struct bt_att_signature));
    9986:	89ab      	ldrh	r3, [r5, #12]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    9988:	3b0c      	subs	r3, #12
    998a:	b2db      	uxtb	r3, r3
    998c:	9302      	str	r3, [sp, #8]
    998e:	9201      	str	r2, [sp, #4]
    9990:	2100      	movs	r1, #0
    9992:	9100      	str	r1, [sp, #0]
    9994:	463b      	mov	r3, r7
    9996:	460a      	mov	r2, r1
    9998:	4630      	mov	r0, r6
    999a:	f7ff ff81 	bl	98a0 <att_write_rsp>
    999e:	e7e7      	b.n	9970 <att_signed_write_cmd+0x24>

000099a0 <att_write_cmd>:
{
    99a0:	b530      	push	{r4, r5, lr}
    99a2:	b085      	sub	sp, #20
    99a4:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    99a6:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    99a8:	f101 0008 	add.w	r0, r1, #8
    99ac:	f011 fa5f 	bl	1ae6e <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    99b0:	68a3      	ldr	r3, [r4, #8]
    99b2:	7b22      	ldrb	r2, [r4, #12]
    99b4:	9202      	str	r2, [sp, #8]
    99b6:	9301      	str	r3, [sp, #4]
    99b8:	2100      	movs	r1, #0
    99ba:	9100      	str	r1, [sp, #0]
    99bc:	4603      	mov	r3, r0
    99be:	460a      	mov	r2, r1
    99c0:	4628      	mov	r0, r5
    99c2:	f7ff ff6d 	bl	98a0 <att_write_rsp>
}
    99c6:	b005      	add	sp, #20
    99c8:	bd30      	pop	{r4, r5, pc}

000099ca <att_write_req>:
{
    99ca:	b530      	push	{r4, r5, lr}
    99cc:	b085      	sub	sp, #20
    99ce:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    99d0:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    99d2:	f101 0008 	add.w	r0, r1, #8
    99d6:	f011 fa4a 	bl	1ae6e <net_buf_simple_pull_le16>
			     handle, 0, buf->data, buf->len);
    99da:	68a3      	ldr	r3, [r4, #8]
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    99dc:	7b22      	ldrb	r2, [r4, #12]
    99de:	9202      	str	r2, [sp, #8]
    99e0:	9301      	str	r3, [sp, #4]
    99e2:	2300      	movs	r3, #0
    99e4:	9300      	str	r3, [sp, #0]
    99e6:	4603      	mov	r3, r0
    99e8:	2213      	movs	r2, #19
    99ea:	2112      	movs	r1, #18
    99ec:	4628      	mov	r0, r5
    99ee:	f7ff ff57 	bl	98a0 <att_write_rsp>
}
    99f2:	b005      	add	sp, #20
    99f4:	bd30      	pop	{r4, r5, pc}
	...

000099f8 <att_read_group_rsp>:
{
    99f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99fc:	b086      	sub	sp, #24
    99fe:	4604      	mov	r4, r0
    9a00:	4688      	mov	r8, r1
    9a02:	4616      	mov	r6, r2
    9a04:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    9a06:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    9a08:	2214      	movs	r2, #20
    9a0a:	2100      	movs	r1, #0
    9a0c:	a801      	add	r0, sp, #4
    9a0e:	f020 ff83 	bl	2a918 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    9a12:	2201      	movs	r2, #1
    9a14:	2111      	movs	r1, #17
    9a16:	4628      	mov	r0, r5
    9a18:	f7ff fe54 	bl	96c4 <bt_att_create_pdu>
    9a1c:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9a1e:	b328      	cbz	r0, 9a6c <att_read_group_rsp+0x74>
	data.att = att;
    9a20:	9401      	str	r4, [sp, #4]
	data.uuid = uuid;
    9a22:	f8cd 8008 	str.w	r8, [sp, #8]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9a26:	2101      	movs	r1, #1
    9a28:	3008      	adds	r0, #8
    9a2a:	f011 f9c3 	bl	1adb4 <net_buf_simple_add>
    9a2e:	9004      	str	r0, [sp, #16]
	data.rsp->len = 0;
    9a30:	2300      	movs	r3, #0
    9a32:	7003      	strb	r3, [r0, #0]
	data.group = NULL;
    9a34:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9a36:	ab01      	add	r3, sp, #4
    9a38:	4a0f      	ldr	r2, [pc, #60]	; (9a78 <att_read_group_rsp+0x80>)
    9a3a:	4639      	mov	r1, r7
    9a3c:	4630      	mov	r0, r6
    9a3e:	f000 fe85 	bl	a74c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    9a42:	9b04      	ldr	r3, [sp, #16]
    9a44:	781c      	ldrb	r4, [r3, #0]
    9a46:	b13c      	cbz	r4, 9a58 <att_read_group_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9a48:	4b0c      	ldr	r3, [pc, #48]	; (9a7c <att_read_group_rsp+0x84>)
    9a4a:	9a03      	ldr	r2, [sp, #12]
    9a4c:	2104      	movs	r1, #4
    9a4e:	4628      	mov	r0, r5
    9a50:	f7fe fb49 	bl	80e6 <bt_l2cap_send_cb>
	return 0;
    9a54:	2400      	movs	r4, #0
    9a56:	e00a      	b.n	9a6e <att_read_group_rsp+0x76>
		net_buf_unref(data.buf);
    9a58:	9803      	ldr	r0, [sp, #12]
    9a5a:	f011 f95f 	bl	1ad1c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    9a5e:	230a      	movs	r3, #10
    9a60:	4632      	mov	r2, r6
    9a62:	2110      	movs	r1, #16
    9a64:	4628      	mov	r0, r5
    9a66:	f7ff fe8f 	bl	9788 <send_err_rsp>
		return 0;
    9a6a:	e000      	b.n	9a6e <att_read_group_rsp+0x76>
		return BT_ATT_ERR_UNLIKELY;
    9a6c:	240e      	movs	r4, #14
}
    9a6e:	4620      	mov	r0, r4
    9a70:	b006      	add	sp, #24
    9a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a76:	bf00      	nop
    9a78:	00008f81 	.word	0x00008f81
    9a7c:	00008ee7 	.word	0x00008ee7

00009a80 <att_read_group_req>:
{
    9a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a84:	b088      	sub	sp, #32
	struct bt_conn *conn = att->chan.chan.conn;
    9a86:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    9a88:	898b      	ldrh	r3, [r1, #12]
    9a8a:	2b06      	cmp	r3, #6
    9a8c:	d005      	beq.n	9a9a <att_read_group_req+0x1a>
    9a8e:	2b14      	cmp	r3, #20
    9a90:	d003      	beq.n	9a9a <att_read_group_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    9a92:	2004      	movs	r0, #4
}
    9a94:	b008      	add	sp, #32
    9a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a9a:	460c      	mov	r4, r1
    9a9c:	4605      	mov	r5, r0
	req = (void *)buf->data;
    9a9e:	4608      	mov	r0, r1
    9aa0:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9aa4:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9aa6:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    9aaa:	2104      	movs	r1, #4
    9aac:	f011 f9cf 	bl	1ae4e <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    9ab0:	4621      	mov	r1, r4
    9ab2:	a801      	add	r0, sp, #4
    9ab4:	f7ff fb3c 	bl	9130 <uuid_create>
    9ab8:	b908      	cbnz	r0, 9abe <att_read_group_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    9aba:	200e      	movs	r0, #14
    9abc:	e7ea      	b.n	9a94 <att_read_group_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9abe:	f10d 0216 	add.w	r2, sp, #22
    9ac2:	4641      	mov	r1, r8
    9ac4:	4638      	mov	r0, r7
    9ac6:	f7ff f8c4 	bl	8c52 <range_is_valid>
    9aca:	b1f0      	cbz	r0, 9b0a <att_read_group_req+0x8a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9acc:	2300      	movs	r3, #0
    9ace:	f88d 3018 	strb.w	r3, [sp, #24]
    9ad2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9ad6:	f8ad 301a 	strh.w	r3, [sp, #26]
    9ada:	a906      	add	r1, sp, #24
    9adc:	a801      	add	r0, sp, #4
    9ade:	f7fa fdee 	bl	46be <bt_uuid_cmp>
    9ae2:	b158      	cbz	r0, 9afc <att_read_group_req+0x7c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    9ae4:	2300      	movs	r3, #0
    9ae6:	f88d 301c 	strb.w	r3, [sp, #28]
    9aea:	f642 0301 	movw	r3, #10241	; 0x2801
    9aee:	f8ad 301e 	strh.w	r3, [sp, #30]
    9af2:	a907      	add	r1, sp, #28
    9af4:	a801      	add	r0, sp, #4
    9af6:	f7fa fde2 	bl	46be <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9afa:	b978      	cbnz	r0, 9b1c <att_read_group_req+0x9c>
	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
    9afc:	4643      	mov	r3, r8
    9afe:	463a      	mov	r2, r7
    9b00:	a901      	add	r1, sp, #4
    9b02:	4628      	mov	r0, r5
    9b04:	f7ff ff78 	bl	99f8 <att_read_group_rsp>
    9b08:	e7c4      	b.n	9a94 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
    9b0a:	2301      	movs	r3, #1
    9b0c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9b10:	2110      	movs	r1, #16
    9b12:	4630      	mov	r0, r6
    9b14:	f7ff fe38 	bl	9788 <send_err_rsp>
		return 0;
    9b18:	2000      	movs	r0, #0
    9b1a:	e7bb      	b.n	9a94 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    9b1c:	2310      	movs	r3, #16
    9b1e:	463a      	mov	r2, r7
    9b20:	4619      	mov	r1, r3
    9b22:	4630      	mov	r0, r6
    9b24:	f7ff fe30 	bl	9788 <send_err_rsp>
		return 0;
    9b28:	2000      	movs	r0, #0
    9b2a:	e7b3      	b.n	9a94 <att_read_group_req+0x14>

00009b2c <att_read_mult_req>:
{
    9b2c:	b570      	push	{r4, r5, r6, lr}
    9b2e:	b086      	sub	sp, #24
    9b30:	4605      	mov	r5, r0
    9b32:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9b34:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    9b36:	2214      	movs	r2, #20
    9b38:	2100      	movs	r1, #0
    9b3a:	a801      	add	r0, sp, #4
    9b3c:	f020 feec 	bl	2a918 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    9b40:	2200      	movs	r2, #0
    9b42:	210f      	movs	r1, #15
    9b44:	4630      	mov	r0, r6
    9b46:	f7ff fdbd 	bl	96c4 <bt_att_create_pdu>
    9b4a:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9b4c:	b348      	cbz	r0, 9ba2 <att_read_mult_req+0x76>
	data.att = att;
    9b4e:	9501      	str	r5, [sp, #4]
	while (buf->len >= sizeof(u16_t)) {
    9b50:	89a3      	ldrh	r3, [r4, #12]
    9b52:	2b01      	cmp	r3, #1
    9b54:	d91c      	bls.n	9b90 <att_read_mult_req+0x64>
		handle = net_buf_pull_le16(buf);
    9b56:	f104 0008 	add.w	r0, r4, #8
    9b5a:	f011 f988 	bl	1ae6e <net_buf_simple_pull_le16>
    9b5e:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    9b60:	2301      	movs	r3, #1
    9b62:	f88d 3014 	strb.w	r3, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9b66:	ab01      	add	r3, sp, #4
    9b68:	4a0f      	ldr	r2, [pc, #60]	; (9ba8 <att_read_mult_req+0x7c>)
    9b6a:	4601      	mov	r1, r0
    9b6c:	f000 fdee 	bl	a74c <bt_gatt_foreach_attr>
		if (data.err) {
    9b70:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9b74:	2b00      	cmp	r3, #0
    9b76:	d0eb      	beq.n	9b50 <att_read_mult_req+0x24>
			net_buf_unref(data.buf);
    9b78:	9803      	ldr	r0, [sp, #12]
    9b7a:	f011 f8cf 	bl	1ad1c <net_buf_unref>
			send_err_rsp(conn, BT_ATT_OP_READ_MULT_REQ, handle,
    9b7e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9b82:	462a      	mov	r2, r5
    9b84:	210e      	movs	r1, #14
    9b86:	4630      	mov	r0, r6
    9b88:	f7ff fdfe 	bl	9788 <send_err_rsp>
			return 0;
    9b8c:	2000      	movs	r0, #0
    9b8e:	e006      	b.n	9b9e <att_read_mult_req+0x72>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9b90:	4b06      	ldr	r3, [pc, #24]	; (9bac <att_read_mult_req+0x80>)
    9b92:	9a03      	ldr	r2, [sp, #12]
    9b94:	2104      	movs	r1, #4
    9b96:	4630      	mov	r0, r6
    9b98:	f7fe faa5 	bl	80e6 <bt_l2cap_send_cb>
	return 0;
    9b9c:	2000      	movs	r0, #0
}
    9b9e:	b006      	add	sp, #24
    9ba0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
    9ba2:	200e      	movs	r0, #14
    9ba4:	e7fb      	b.n	9b9e <att_read_mult_req+0x72>
    9ba6:	bf00      	nop
    9ba8:	00008db1 	.word	0x00008db1
    9bac:	00008ee7 	.word	0x00008ee7

00009bb0 <att_read_rsp>:
{
    9bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bb4:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    9bb6:	6807      	ldr	r7, [r0, #0]
	if (!handle) {
    9bb8:	b923      	cbnz	r3, 9bc4 <att_read_rsp+0x14>
		return BT_ATT_ERR_INVALID_HANDLE;
    9bba:	2401      	movs	r4, #1
}
    9bbc:	4620      	mov	r0, r4
    9bbe:	b006      	add	sp, #24
    9bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9bc4:	461d      	mov	r5, r3
    9bc6:	4616      	mov	r6, r2
    9bc8:	4688      	mov	r8, r1
    9bca:	4604      	mov	r4, r0
	memset(&data, 0, sizeof(data));
    9bcc:	2214      	movs	r2, #20
    9bce:	2100      	movs	r1, #0
    9bd0:	a801      	add	r0, sp, #4
    9bd2:	f020 fea1 	bl	2a918 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    9bd6:	2200      	movs	r2, #0
    9bd8:	4631      	mov	r1, r6
    9bda:	4638      	mov	r0, r7
    9bdc:	f7ff fd72 	bl	96c4 <bt_att_create_pdu>
    9be0:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9be2:	b318      	cbz	r0, 9c2c <att_read_rsp+0x7c>
	data.att = att;
    9be4:	9401      	str	r4, [sp, #4]
	data.offset = offset;
    9be6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    9bea:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9bee:	2301      	movs	r3, #1
    9bf0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9bf4:	ab01      	add	r3, sp, #4
    9bf6:	4a0e      	ldr	r2, [pc, #56]	; (9c30 <att_read_rsp+0x80>)
    9bf8:	4629      	mov	r1, r5
    9bfa:	4628      	mov	r0, r5
    9bfc:	f000 fda6 	bl	a74c <bt_gatt_foreach_attr>
	if (data.err) {
    9c00:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9c04:	b934      	cbnz	r4, 9c14 <att_read_rsp+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9c06:	4b0b      	ldr	r3, [pc, #44]	; (9c34 <att_read_rsp+0x84>)
    9c08:	9a03      	ldr	r2, [sp, #12]
    9c0a:	2104      	movs	r1, #4
    9c0c:	4638      	mov	r0, r7
    9c0e:	f7fe fa6a 	bl	80e6 <bt_l2cap_send_cb>
	return 0;
    9c12:	e7d3      	b.n	9bbc <att_read_rsp+0xc>
		net_buf_unref(data.buf);
    9c14:	9803      	ldr	r0, [sp, #12]
    9c16:	f011 f881 	bl	1ad1c <net_buf_unref>
		send_err_rsp(conn, op, handle, data.err);
    9c1a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9c1e:	462a      	mov	r2, r5
    9c20:	4641      	mov	r1, r8
    9c22:	4638      	mov	r0, r7
    9c24:	f7ff fdb0 	bl	9788 <send_err_rsp>
		return 0;
    9c28:	2400      	movs	r4, #0
    9c2a:	e7c7      	b.n	9bbc <att_read_rsp+0xc>
		return BT_ATT_ERR_UNLIKELY;
    9c2c:	240e      	movs	r4, #14
    9c2e:	e7c5      	b.n	9bbc <att_read_rsp+0xc>
    9c30:	00008db1 	.word	0x00008db1
    9c34:	00008ee7 	.word	0x00008ee7

00009c38 <att_read_blob_req>:
{
    9c38:	b500      	push	{lr}
    9c3a:	b083      	sub	sp, #12
	req = (void *)buf->data;
    9c3c:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    9c3e:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
    9c40:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    9c42:	9200      	str	r2, [sp, #0]
    9c44:	220d      	movs	r2, #13
    9c46:	210c      	movs	r1, #12
    9c48:	f7ff ffb2 	bl	9bb0 <att_read_rsp>
}
    9c4c:	b003      	add	sp, #12
    9c4e:	f85d fb04 	ldr.w	pc, [sp], #4

00009c52 <att_read_req>:
{
    9c52:	b500      	push	{lr}
    9c54:	b083      	sub	sp, #12
	req = (void *)buf->data;
    9c56:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    9c58:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    9c5a:	2200      	movs	r2, #0
    9c5c:	9200      	str	r2, [sp, #0]
    9c5e:	220b      	movs	r2, #11
    9c60:	210a      	movs	r1, #10
    9c62:	f7ff ffa5 	bl	9bb0 <att_read_rsp>
}
    9c66:	b003      	add	sp, #12
    9c68:	f85d fb04 	ldr.w	pc, [sp], #4

00009c6c <att_read_type_rsp>:
{
    9c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c70:	b086      	sub	sp, #24
    9c72:	4604      	mov	r4, r0
    9c74:	4688      	mov	r8, r1
    9c76:	4616      	mov	r6, r2
    9c78:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    9c7a:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    9c7c:	2218      	movs	r2, #24
    9c7e:	2100      	movs	r1, #0
    9c80:	4668      	mov	r0, sp
    9c82:	f020 fe49 	bl	2a918 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    9c86:	2201      	movs	r2, #1
    9c88:	2109      	movs	r1, #9
    9c8a:	4628      	mov	r0, r5
    9c8c:	f7ff fd1a 	bl	96c4 <bt_att_create_pdu>
    9c90:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9c92:	b340      	cbz	r0, 9ce6 <att_read_type_rsp+0x7a>
	data.att = att;
    9c94:	9400      	str	r4, [sp, #0]
	data.uuid = uuid;
    9c96:	f8cd 8004 	str.w	r8, [sp, #4]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9c9a:	2101      	movs	r1, #1
    9c9c:	3008      	adds	r0, #8
    9c9e:	f011 f889 	bl	1adb4 <net_buf_simple_add>
    9ca2:	9003      	str	r0, [sp, #12]
	data.rsp->len = 0;
    9ca4:	2300      	movs	r3, #0
    9ca6:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9ca8:	230a      	movs	r3, #10
    9caa:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9cae:	466b      	mov	r3, sp
    9cb0:	4a0f      	ldr	r2, [pc, #60]	; (9cf0 <att_read_type_rsp+0x84>)
    9cb2:	4639      	mov	r1, r7
    9cb4:	4630      	mov	r0, r6
    9cb6:	f000 fd49 	bl	a74c <bt_gatt_foreach_attr>
	if (data.err) {
    9cba:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9cbe:	b934      	cbnz	r4, 9cce <att_read_type_rsp+0x62>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9cc0:	4b0c      	ldr	r3, [pc, #48]	; (9cf4 <att_read_type_rsp+0x88>)
    9cc2:	9a02      	ldr	r2, [sp, #8]
    9cc4:	2104      	movs	r1, #4
    9cc6:	4628      	mov	r0, r5
    9cc8:	f7fe fa0d 	bl	80e6 <bt_l2cap_send_cb>
	return 0;
    9ccc:	e00c      	b.n	9ce8 <att_read_type_rsp+0x7c>
		net_buf_unref(data.buf);
    9cce:	9802      	ldr	r0, [sp, #8]
    9cd0:	f011 f824 	bl	1ad1c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
    9cd4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9cd8:	4632      	mov	r2, r6
    9cda:	2108      	movs	r1, #8
    9cdc:	4628      	mov	r0, r5
    9cde:	f7ff fd53 	bl	9788 <send_err_rsp>
		return 0;
    9ce2:	2400      	movs	r4, #0
    9ce4:	e000      	b.n	9ce8 <att_read_type_rsp+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    9ce6:	240e      	movs	r4, #14
}
    9ce8:	4620      	mov	r0, r4
    9cea:	b006      	add	sp, #24
    9cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9cf0:	0000906f 	.word	0x0000906f
    9cf4:	00008ee7 	.word	0x00008ee7

00009cf8 <att_read_type_req>:
{
    9cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9cfc:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    9cfe:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    9d00:	898b      	ldrh	r3, [r1, #12]
    9d02:	2b06      	cmp	r3, #6
    9d04:	d005      	beq.n	9d12 <att_read_type_req+0x1a>
    9d06:	2b14      	cmp	r3, #20
    9d08:	d003      	beq.n	9d12 <att_read_type_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    9d0a:	2004      	movs	r0, #4
}
    9d0c:	b006      	add	sp, #24
    9d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9d12:	460c      	mov	r4, r1
    9d14:	4605      	mov	r5, r0
	req = (void *)buf->data;
    9d16:	4608      	mov	r0, r1
    9d18:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9d1c:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9d1e:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    9d22:	2104      	movs	r1, #4
    9d24:	f011 f893 	bl	1ae4e <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    9d28:	4621      	mov	r1, r4
    9d2a:	a801      	add	r0, sp, #4
    9d2c:	f7ff fa00 	bl	9130 <uuid_create>
    9d30:	b908      	cbnz	r0, 9d36 <att_read_type_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    9d32:	200e      	movs	r0, #14
    9d34:	e7ea      	b.n	9d0c <att_read_type_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9d36:	f10d 0216 	add.w	r2, sp, #22
    9d3a:	4641      	mov	r1, r8
    9d3c:	4638      	mov	r0, r7
    9d3e:	f7fe ff88 	bl	8c52 <range_is_valid>
    9d42:	b130      	cbz	r0, 9d52 <att_read_type_req+0x5a>
	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
    9d44:	4643      	mov	r3, r8
    9d46:	463a      	mov	r2, r7
    9d48:	a901      	add	r1, sp, #4
    9d4a:	4628      	mov	r0, r5
    9d4c:	f7ff ff8e 	bl	9c6c <att_read_type_rsp>
    9d50:	e7dc      	b.n	9d0c <att_read_type_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
    9d52:	2301      	movs	r3, #1
    9d54:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9d58:	2108      	movs	r1, #8
    9d5a:	4630      	mov	r0, r6
    9d5c:	f7ff fd14 	bl	9788 <send_err_rsp>
		return 0;
    9d60:	2000      	movs	r0, #0
    9d62:	e7d3      	b.n	9d0c <att_read_type_req+0x14>

00009d64 <att_find_type_rsp>:
{
    9d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d68:	b086      	sub	sp, #24
    9d6a:	4604      	mov	r4, r0
    9d6c:	460e      	mov	r6, r1
    9d6e:	4617      	mov	r7, r2
    9d70:	4698      	mov	r8, r3
	struct bt_conn *conn = att->chan.chan.conn;
    9d72:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    9d74:	2214      	movs	r2, #20
    9d76:	2100      	movs	r1, #0
    9d78:	a801      	add	r0, sp, #4
    9d7a:	f020 fdcd 	bl	2a918 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    9d7e:	2200      	movs	r2, #0
    9d80:	2107      	movs	r1, #7
    9d82:	4628      	mov	r0, r5
    9d84:	f7ff fc9e 	bl	96c4 <bt_att_create_pdu>
    9d88:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9d8a:	b338      	cbz	r0, 9ddc <att_find_type_rsp+0x78>
	data.att = att;
    9d8c:	9401      	str	r4, [sp, #4]
	data.group = NULL;
    9d8e:	2300      	movs	r3, #0
    9d90:	9303      	str	r3, [sp, #12]
	data.value = value;
    9d92:	f8cd 8010 	str.w	r8, [sp, #16]
	data.value_len = value_len;
    9d96:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    9d9a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9d9e:	230a      	movs	r3, #10
    9da0:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9da4:	ab01      	add	r3, sp, #4
    9da6:	4a10      	ldr	r2, [pc, #64]	; (9de8 <att_find_type_rsp+0x84>)
    9da8:	4639      	mov	r1, r7
    9daa:	4630      	mov	r0, r6
    9dac:	f000 fcce 	bl	a74c <bt_gatt_foreach_attr>
	if (data.err) {
    9db0:	f89d 4015 	ldrb.w	r4, [sp, #21]
    9db4:	b934      	cbnz	r4, 9dc4 <att_find_type_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9db6:	4b0d      	ldr	r3, [pc, #52]	; (9dec <att_find_type_rsp+0x88>)
    9db8:	9a02      	ldr	r2, [sp, #8]
    9dba:	2104      	movs	r1, #4
    9dbc:	4628      	mov	r0, r5
    9dbe:	f7fe f992 	bl	80e6 <bt_l2cap_send_cb>
	return 0;
    9dc2:	e00c      	b.n	9dde <att_find_type_rsp+0x7a>
		net_buf_unref(data.buf);
    9dc4:	9802      	ldr	r0, [sp, #8]
    9dc6:	f010 ffa9 	bl	1ad1c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    9dca:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9dce:	4632      	mov	r2, r6
    9dd0:	2106      	movs	r1, #6
    9dd2:	4628      	mov	r0, r5
    9dd4:	f7ff fcd8 	bl	9788 <send_err_rsp>
		return 0;
    9dd8:	2400      	movs	r4, #0
    9dda:	e000      	b.n	9dde <att_find_type_rsp+0x7a>
		return BT_ATT_ERR_UNLIKELY;
    9ddc:	240e      	movs	r4, #14
}
    9dde:	4620      	mov	r0, r4
    9de0:	b006      	add	sp, #24
    9de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9de6:	bf00      	nop
    9de8:	00009217 	.word	0x00009217
    9dec:	00008ee7 	.word	0x00008ee7

00009df0 <att_find_type_req>:
{
    9df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9df4:	b084      	sub	sp, #16
    9df6:	4605      	mov	r5, r0
    9df8:	460f      	mov	r7, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9dfa:	f8d0 9000 	ldr.w	r9, [r0]
	req = (void *)buf->data;
    9dfe:	4608      	mov	r0, r1
    9e00:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9e04:	881c      	ldrh	r4, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9e06:	885e      	ldrh	r6, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    9e08:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    9e0c:	2106      	movs	r1, #6
    9e0e:	f011 f81e 	bl	1ae4e <net_buf_simple_pull>
    9e12:	4682      	mov	sl, r0
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9e14:	f10d 020e 	add.w	r2, sp, #14
    9e18:	4631      	mov	r1, r6
    9e1a:	4620      	mov	r0, r4
    9e1c:	f7fe ff19 	bl	8c52 <range_is_valid>
    9e20:	b160      	cbz	r0, 9e3c <att_find_type_req+0x4c>
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    9e22:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
    9e26:	d012      	beq.n	9e4e <att_find_type_req+0x5e>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    9e28:	230a      	movs	r3, #10
    9e2a:	4622      	mov	r2, r4
    9e2c:	2106      	movs	r1, #6
    9e2e:	4648      	mov	r0, r9
    9e30:	f7ff fcaa 	bl	9788 <send_err_rsp>
		return 0;
    9e34:	2000      	movs	r0, #0
}
    9e36:	b004      	add	sp, #16
    9e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
    9e3c:	2301      	movs	r3, #1
    9e3e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9e42:	2106      	movs	r1, #6
    9e44:	4648      	mov	r0, r9
    9e46:	f7ff fc9f 	bl	9788 <send_err_rsp>
		return 0;
    9e4a:	2000      	movs	r0, #0
    9e4c:	e7f3      	b.n	9e36 <att_find_type_req+0x46>
	return att_find_type_rsp(att, start_handle, end_handle, value,
    9e4e:	7b3b      	ldrb	r3, [r7, #12]
    9e50:	9300      	str	r3, [sp, #0]
    9e52:	4653      	mov	r3, sl
    9e54:	4632      	mov	r2, r6
    9e56:	4621      	mov	r1, r4
    9e58:	4628      	mov	r0, r5
    9e5a:	f7ff ff83 	bl	9d64 <att_find_type_rsp>
    9e5e:	e7ea      	b.n	9e36 <att_find_type_req+0x46>

00009e60 <att_find_info_rsp>:
{
    9e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e62:	b085      	sub	sp, #20
    9e64:	4605      	mov	r5, r0
    9e66:	460e      	mov	r6, r1
    9e68:	4617      	mov	r7, r2
	struct bt_conn *conn = att->chan.chan.conn;
    9e6a:	6804      	ldr	r4, [r0, #0]
	memset(&data, 0, sizeof(data));
    9e6c:	2210      	movs	r2, #16
    9e6e:	2100      	movs	r1, #0
    9e70:	4668      	mov	r0, sp
    9e72:	f020 fd51 	bl	2a918 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    9e76:	2200      	movs	r2, #0
    9e78:	2105      	movs	r1, #5
    9e7a:	4620      	mov	r0, r4
    9e7c:	f7ff fc22 	bl	96c4 <bt_att_create_pdu>
    9e80:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    9e82:	b1e8      	cbz	r0, 9ec0 <att_find_info_rsp+0x60>
	data.att = att;
    9e84:	ab04      	add	r3, sp, #16
    9e86:	f843 5d10 	str.w	r5, [r3, #-16]!
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9e8a:	4a0e      	ldr	r2, [pc, #56]	; (9ec4 <att_find_info_rsp+0x64>)
    9e8c:	4639      	mov	r1, r7
    9e8e:	4630      	mov	r0, r6
    9e90:	f000 fc5c 	bl	a74c <bt_gatt_foreach_attr>
	if (!data.rsp) {
    9e94:	9b02      	ldr	r3, [sp, #8]
    9e96:	b143      	cbz	r3, 9eaa <att_find_info_rsp+0x4a>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9e98:	4b0b      	ldr	r3, [pc, #44]	; (9ec8 <att_find_info_rsp+0x68>)
    9e9a:	9a01      	ldr	r2, [sp, #4]
    9e9c:	2104      	movs	r1, #4
    9e9e:	4620      	mov	r0, r4
    9ea0:	f7fe f921 	bl	80e6 <bt_l2cap_send_cb>
	return 0;
    9ea4:	2000      	movs	r0, #0
}
    9ea6:	b005      	add	sp, #20
    9ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
    9eaa:	9801      	ldr	r0, [sp, #4]
    9eac:	f010 ff36 	bl	1ad1c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
    9eb0:	230a      	movs	r3, #10
    9eb2:	4632      	mov	r2, r6
    9eb4:	2104      	movs	r1, #4
    9eb6:	4620      	mov	r0, r4
    9eb8:	f7ff fc66 	bl	9788 <send_err_rsp>
		return 0;
    9ebc:	2000      	movs	r0, #0
    9ebe:	e7f2      	b.n	9ea6 <att_find_info_rsp+0x46>
		return BT_ATT_ERR_UNLIKELY;
    9ec0:	200e      	movs	r0, #14
    9ec2:	e7f0      	b.n	9ea6 <att_find_info_rsp+0x46>
    9ec4:	00009167 	.word	0x00009167
    9ec8:	00008ee7 	.word	0x00008ee7

00009ecc <att_find_info_req>:
{
    9ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ece:	b083      	sub	sp, #12
    9ed0:	4604      	mov	r4, r0
	struct bt_conn *conn = att->chan.chan.conn;
    9ed2:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    9ed4:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    9ed6:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9ed8:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9eda:	f10d 0206 	add.w	r2, sp, #6
    9ede:	4631      	mov	r1, r6
    9ee0:	4628      	mov	r0, r5
    9ee2:	f7fe feb6 	bl	8c52 <range_is_valid>
    9ee6:	b130      	cbz	r0, 9ef6 <att_find_info_req+0x2a>
	return att_find_info_rsp(att, start_handle, end_handle);
    9ee8:	4632      	mov	r2, r6
    9eea:	4629      	mov	r1, r5
    9eec:	4620      	mov	r0, r4
    9eee:	f7ff ffb7 	bl	9e60 <att_find_info_rsp>
}
    9ef2:	b003      	add	sp, #12
    9ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
    9ef6:	2301      	movs	r3, #1
    9ef8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9efc:	2104      	movs	r1, #4
    9efe:	4638      	mov	r0, r7
    9f00:	f7ff fc42 	bl	9788 <send_err_rsp>
		return 0;
    9f04:	2000      	movs	r0, #0
    9f06:	e7f4      	b.n	9ef2 <att_find_info_req+0x26>

00009f08 <bt_att_init>:

void bt_att_init(void)
{
    9f08:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    9f0a:	4803      	ldr	r0, [pc, #12]	; (9f18 <bt_att_init+0x10>)
    9f0c:	f7fd ff44 	bl	7d98 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
    9f10:	f000 fb3c 	bl	a58c <bt_gatt_init>
    9f14:	bd08      	pop	{r3, pc}
    9f16:	bf00      	nop
    9f18:	2000bae8 	.word	0x2000bae8

00009f1c <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    9f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    9f1e:	2800      	cmp	r0, #0
    9f20:	d043      	beq.n	9faa <bt_att_send+0x8e>
    9f22:	4606      	mov	r6, r0
    9f24:	2900      	cmp	r1, #0
    9f26:	d043      	beq.n	9fb0 <bt_att_send+0x94>
    9f28:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    9f2a:	f7fe ff7b 	bl	8e24 <att_chan_get>
	if (!att) {
    9f2e:	4605      	mov	r5, r0
    9f30:	2800      	cmp	r0, #0
    9f32:	d040      	beq.n	9fb6 <bt_att_send+0x9a>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    9f34:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    9f38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9f3c:	4638      	mov	r0, r7
    9f3e:	f01f fa4b 	bl	293d8 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9f42:	682b      	ldr	r3, [r5, #0]
    9f44:	7b1b      	ldrb	r3, [r3, #12]
    9f46:	2b03      	cmp	r3, #3
    9f48:	d011      	beq.n	9f6e <bt_att_send+0x52>
    9f4a:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    9f4c:	b1e3      	cbz	r3, 9f88 <bt_att_send+0x6c>
		BT_WARN("Disconnected");
		k_sem_give(&att->tx_sem);
		return -ENOTCONN;
	}

	hdr = (void *)buf->data;
    9f4e:	68a3      	ldr	r3, [r4, #8]

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9f50:	781b      	ldrb	r3, [r3, #0]
    9f52:	2bd2      	cmp	r3, #210	; 0xd2
    9f54:	d01e      	beq.n	9f94 <bt_att_send+0x78>
			k_sem_give(&att->tx_sem);
			return err;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    9f56:	4620      	mov	r0, r4
    9f58:	f7fe ff0c 	bl	8d74 <att_cb>
    9f5c:	4603      	mov	r3, r0
    9f5e:	4622      	mov	r2, r4
    9f60:	2104      	movs	r1, #4
    9f62:	4630      	mov	r0, r6
    9f64:	f7fe f8bf 	bl	80e6 <bt_l2cap_send_cb>

	return 0;
    9f68:	2500      	movs	r5, #0
}
    9f6a:	4628      	mov	r0, r5
    9f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9f6e:	f3bf 8f5b 	dmb	ish
    9f72:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    9f76:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9f7a:	f013 0f04 	tst.w	r3, #4
    9f7e:	d101      	bne.n	9f84 <bt_att_send+0x68>
    9f80:	2301      	movs	r3, #1
    9f82:	e7e3      	b.n	9f4c <bt_att_send+0x30>
    9f84:	2300      	movs	r3, #0
    9f86:	e7e1      	b.n	9f4c <bt_att_send+0x30>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9f88:	4638      	mov	r0, r7
    9f8a:	f01f fa12 	bl	293b2 <_impl_k_sem_give>
		return -ENOTCONN;
    9f8e:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    9f92:	e7ea      	b.n	9f6a <bt_att_send+0x4e>
		err = bt_smp_sign(conn, buf);
    9f94:	4621      	mov	r1, r4
    9f96:	4630      	mov	r0, r6
    9f98:	f003 f81a 	bl	cfd0 <bt_smp_sign>
		if (err) {
    9f9c:	4605      	mov	r5, r0
    9f9e:	2800      	cmp	r0, #0
    9fa0:	d0d9      	beq.n	9f56 <bt_att_send+0x3a>
    9fa2:	4638      	mov	r0, r7
    9fa4:	f01f fa05 	bl	293b2 <_impl_k_sem_give>
			return err;
    9fa8:	e7df      	b.n	9f6a <bt_att_send+0x4e>
		return -EINVAL;
    9faa:	f06f 0515 	mvn.w	r5, #21
    9fae:	e7dc      	b.n	9f6a <bt_att_send+0x4e>
    9fb0:	f06f 0515 	mvn.w	r5, #21
    9fb4:	e7d9      	b.n	9f6a <bt_att_send+0x4e>
		return -ENOTCONN;
    9fb6:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    9fba:	e7d6      	b.n	9f6a <bt_att_send+0x4e>

00009fbc <bt_att_req_send>:
{
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    9fbc:	b1e0      	cbz	r0, 9ff8 <bt_att_req_send+0x3c>
    9fbe:	b1f1      	cbz	r1, 9ffe <bt_att_req_send+0x42>
{
    9fc0:	b510      	push	{r4, lr}
    9fc2:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    9fc4:	f7fe ff2e 	bl	8e24 <att_chan_get>
	if (!att) {
    9fc8:	b1e0      	cbz	r0, a004 <bt_att_req_send+0x48>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    9fca:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    9fce:	b17a      	cbz	r2, 9ff0 <bt_att_req_send+0x34>
	node->next = NULL;
    9fd0:	2200      	movs	r2, #0
    9fd2:	6022      	str	r2, [r4, #0]
	if (!list->tail) {
    9fd4:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    9fd8:	b122      	cbz	r2, 9fe4 <bt_att_req_send+0x28>
		list->tail->next = node;
    9fda:	6014      	str	r4, [r2, #0]
		list->tail = node;
    9fdc:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    9fe0:	2000      	movs	r0, #0
    9fe2:	bd10      	pop	{r4, pc}
		list->tail = node;
    9fe4:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		list->head = node;
    9fe8:	f8c0 40a4 	str.w	r4, [r0, #164]	; 0xa4
    9fec:	2000      	movs	r0, #0
    9fee:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    9ff0:	4621      	mov	r1, r4
    9ff2:	f7ff f9ad 	bl	9350 <att_send_req>
    9ff6:	bd10      	pop	{r4, pc}
		return -EINVAL;
    9ff8:	f06f 0015 	mvn.w	r0, #21
    9ffc:	4770      	bx	lr
    9ffe:	f06f 0015 	mvn.w	r0, #21
    a002:	4770      	bx	lr
		return -ENOTCONN;
    a004:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    a008:	bd10      	pop	{r4, pc}

0000a00a <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    a00a:	4770      	bx	lr

0000a00c <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    a00c:	b430      	push	{r4, r5}
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    a00e:	6804      	ldr	r4, [r0, #0]
	u16_t count = svc->attr_count;
    a010:	8883      	ldrh	r3, [r0, #4]
	return (!list->head);
    a012:	4a1c      	ldr	r2, [pc, #112]	; (a084 <gatt_register+0x78>)
    a014:	6812      	ldr	r2, [r2, #0]

	if (sys_slist_is_empty(&db)) {
    a016:	b172      	cbz	r2, a036 <gatt_register+0x2a>
	return list->tail;
    a018:	4a1a      	ldr	r2, [pc, #104]	; (a084 <gatt_register+0x78>)
    a01a:	6852      	ldr	r2, [r2, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    a01c:	b14a      	cbz	r2, a032 <gatt_register+0x26>
    a01e:	3a08      	subs	r2, #8
	handle = last->attrs[last->attr_count - 1].handle;
    a020:	6815      	ldr	r5, [r2, #0]
    a022:	8892      	ldrh	r2, [r2, #4]
    a024:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    a028:	0091      	lsls	r1, r2, #2
    a02a:	3914      	subs	r1, #20
    a02c:	4429      	add	r1, r5
    a02e:	8a0a      	ldrh	r2, [r1, #16]
    a030:	e009      	b.n	a046 <gatt_register+0x3a>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    a032:	2200      	movs	r2, #0
    a034:	e7f4      	b.n	a020 <gatt_register+0x14>
		handle = 0;
    a036:	2200      	movs	r2, #0
    a038:	e005      	b.n	a046 <gatt_register+0x3a>
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
		if (!attrs->handle) {
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
		} else if (attrs->handle > handle) {
    a03a:	428a      	cmp	r2, r1
    a03c:	d21e      	bcs.n	a07c <gatt_register+0x70>
			/* Use existing handle if valid */
			handle = attrs->handle;
    a03e:	460a      	mov	r2, r1
	for (; attrs && count; attrs++, count--) {
    a040:	3414      	adds	r4, #20
    a042:	3b01      	subs	r3, #1
    a044:	b29b      	uxth	r3, r3
    a046:	b13c      	cbz	r4, a058 <gatt_register+0x4c>
    a048:	b133      	cbz	r3, a058 <gatt_register+0x4c>
		if (!attrs->handle) {
    a04a:	8a21      	ldrh	r1, [r4, #16]
    a04c:	2900      	cmp	r1, #0
    a04e:	d1f4      	bne.n	a03a <gatt_register+0x2e>
			attrs->handle = ++handle;
    a050:	3201      	adds	r2, #1
    a052:	b292      	uxth	r2, r2
    a054:	8222      	strh	r2, [r4, #16]
    a056:	e7f3      	b.n	a040 <gatt_register+0x34>
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    a058:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    a05c:	2200      	movs	r2, #0
    a05e:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    a060:	4a08      	ldr	r2, [pc, #32]	; (a084 <gatt_register+0x78>)
    a062:	6852      	ldr	r2, [r2, #4]
    a064:	b12a      	cbz	r2, a072 <gatt_register+0x66>
		list->tail->next = node;
    a066:	6013      	str	r3, [r2, #0]
		list->tail = node;
    a068:	4a06      	ldr	r2, [pc, #24]	; (a084 <gatt_register+0x78>)
    a06a:	6053      	str	r3, [r2, #4]

	return 0;
    a06c:	2000      	movs	r0, #0
}
    a06e:	bc30      	pop	{r4, r5}
    a070:	4770      	bx	lr
		list->tail = node;
    a072:	4a04      	ldr	r2, [pc, #16]	; (a084 <gatt_register+0x78>)
    a074:	6053      	str	r3, [r2, #4]
		list->head = node;
    a076:	6013      	str	r3, [r2, #0]
	return 0;
    a078:	2000      	movs	r0, #0
    a07a:	e7f8      	b.n	a06e <gatt_register+0x62>
			return -EINVAL;
    a07c:	f06f 0015 	mvn.w	r0, #21
    a080:	e7f5      	b.n	a06e <gatt_register+0x62>
    a082:	bf00      	nop
    a084:	20000844 	.word	0x20000844

0000a088 <update_range>:
	k_delayed_work_init(&gatt_sc.work, sc_process);
}

static bool update_range(u16_t *start, u16_t *end, u16_t new_start,
			 u16_t new_end)
{
    a088:	b430      	push	{r4, r5}
	BT_DBG("start 0x%04x end 0x%04x new_start 0x%04x new_end 0x%04x",
	       *start, *end, new_start, new_end);

	/* Check if inside existing range */
	if (new_start >= *start && new_end <= *end) {
    a08a:	8804      	ldrh	r4, [r0, #0]
    a08c:	4294      	cmp	r4, r2
    a08e:	d802      	bhi.n	a096 <update_range+0xe>
    a090:	880d      	ldrh	r5, [r1, #0]
    a092:	429d      	cmp	r5, r3
    a094:	d209      	bcs.n	a0aa <update_range+0x22>
		return false;
	}

	/* Update range */
	if (*start > new_start) {
    a096:	4294      	cmp	r4, r2
    a098:	d900      	bls.n	a09c <update_range+0x14>
		*start = new_start;
    a09a:	8002      	strh	r2, [r0, #0]
	}

	if (*end < new_end) {
    a09c:	880a      	ldrh	r2, [r1, #0]
    a09e:	4293      	cmp	r3, r2
    a0a0:	d905      	bls.n	a0ae <update_range+0x26>
		*end = new_end;
    a0a2:	800b      	strh	r3, [r1, #0]
	}

	return true;
    a0a4:	2001      	movs	r0, #1
}
    a0a6:	bc30      	pop	{r4, r5}
    a0a8:	4770      	bx	lr
		return false;
    a0aa:	2000      	movs	r0, #0
    a0ac:	e7fb      	b.n	a0a6 <update_range+0x1e>
	return true;
    a0ae:	2001      	movs	r0, #1
    a0b0:	e7f9      	b.n	a0a6 <update_range+0x1e>

0000a0b2 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    a0b2:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    a0b4:	2000      	movs	r0, #0
    a0b6:	4770      	bx	lr

0000a0b8 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    a0b8:	b510      	push	{r4, lr}
	int i;
	u16_t value = 0x0000;
    a0ba:	2400      	movs	r4, #0

	for (i = 0; i < ccc->cfg_len; i++) {
    a0bc:	4623      	mov	r3, r4
    a0be:	e000      	b.n	a0c2 <gatt_ccc_changed+0xa>
    a0c0:	3301      	adds	r3, #1
    a0c2:	684a      	ldr	r2, [r1, #4]
    a0c4:	429a      	cmp	r2, r3
    a0c6:	d907      	bls.n	a0d8 <gatt_ccc_changed+0x20>
		if (ccc->cfg[i].value > value) {
    a0c8:	680a      	ldr	r2, [r1, #0]
    a0ca:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    a0ce:	8912      	ldrh	r2, [r2, #8]
    a0d0:	4294      	cmp	r4, r2
    a0d2:	d2f5      	bcs.n	a0c0 <gatt_ccc_changed+0x8>
			value = ccc->cfg[i].value;
    a0d4:	4614      	mov	r4, r2
    a0d6:	e7f3      	b.n	a0c0 <gatt_ccc_changed+0x8>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    a0d8:	890b      	ldrh	r3, [r1, #8]
    a0da:	429c      	cmp	r4, r3
    a0dc:	d003      	beq.n	a0e6 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    a0de:	810c      	strh	r4, [r1, #8]
		ccc->cfg_changed(attr, value);
    a0e0:	68cb      	ldr	r3, [r1, #12]
    a0e2:	4621      	mov	r1, r4
    a0e4:	4798      	blx	r3
    a0e6:	bd10      	pop	{r4, pc}

0000a0e8 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    a0e8:	b510      	push	{r4, lr}
    a0ea:	9b02      	ldr	r3, [sp, #8]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    a0ec:	69dc      	ldr	r4, [r3, #28]
    a0ee:	460a      	mov	r2, r1
    a0f0:	6999      	ldr	r1, [r3, #24]
    a0f2:	47a0      	blx	r4
    a0f4:	bd10      	pop	{r4, pc}
	...

0000a0f8 <sc_indicate_rsp>:
{
    a0f8:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a0fa:	4b0f      	ldr	r3, [pc, #60]	; (a138 <sc_indicate_rsp+0x40>)
    a0fc:	f103 0254 	add.w	r2, r3, #84	; 0x54
    a100:	f3bf 8f5b 	dmb	ish
    a104:	e852 1f00 	ldrex	r1, [r2]
    a108:	f021 0102 	bic.w	r1, r1, #2
    a10c:	e842 1000 	strex	r0, r1, [r2]
    a110:	2800      	cmp	r0, #0
    a112:	d1f7      	bne.n	a104 <sc_indicate_rsp+0xc>
    a114:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a118:	f3bf 8f5b 	dmb	ish
    a11c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    a11e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a122:	f013 0f01 	tst.w	r3, #1
    a126:	d100      	bne.n	a12a <sc_indicate_rsp+0x32>
    a128:	bd08      	pop	{r3, pc}
    a12a:	2200      	movs	r2, #0
    a12c:	4903      	ldr	r1, [pc, #12]	; (a13c <sc_indicate_rsp+0x44>)
    a12e:	4804      	ldr	r0, [pc, #16]	; (a140 <sc_indicate_rsp+0x48>)
    a130:	f01f ff88 	bl	2a044 <k_delayed_work_submit_to_queue>
}
    a134:	e7f8      	b.n	a128 <sc_indicate_rsp+0x30>
    a136:	bf00      	nop
    a138:	2000084c 	.word	0x2000084c
    a13c:	20000878 	.word	0x20000878
    a140:	20002c78 	.word	0x20002c78

0000a144 <sc_indicate>:
{
    a144:	b510      	push	{r4, lr}
    a146:	4604      	mov	r4, r0
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    a148:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a14a:	f3bf 8f5b 	dmb	ish
    a14e:	e850 3f00 	ldrex	r3, [r0]
    a152:	f043 0e01 	orr.w	lr, r3, #1
    a156:	e840 ec00 	strex	ip, lr, [r0]
    a15a:	f1bc 0f00 	cmp.w	ip, #0
    a15e:	d1f6      	bne.n	a14e <sc_indicate+0xa>
    a160:	f3bf 8f5b 	dmb	ish
    a164:	f013 0f01 	tst.w	r3, #1
    a168:	d10a      	bne.n	a180 <sc_indicate+0x3c>
		sc->start = start;
    a16a:	8521      	strh	r1, [r4, #40]	; 0x28
		sc->end = end;
    a16c:	8562      	strh	r2, [r4, #42]	; 0x2a
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a16e:	f3bf 8f5b 	dmb	ish
    a172:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a174:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    a178:	f013 0f02 	tst.w	r3, #2
    a17c:	d00b      	beq.n	a196 <sc_indicate+0x52>
    a17e:	bd10      	pop	{r4, pc}
	if (!update_range(&sc->start, &sc->end, start, end)) {
    a180:	4613      	mov	r3, r2
    a182:	460a      	mov	r2, r1
    a184:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    a188:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a18c:	f7ff ff7c 	bl	a088 <update_range>
    a190:	2800      	cmp	r0, #0
    a192:	d1ec      	bne.n	a16e <sc_indicate+0x2a>
    a194:	e7f3      	b.n	a17e <sc_indicate+0x3a>
    a196:	220a      	movs	r2, #10
    a198:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    a19c:	4801      	ldr	r0, [pc, #4]	; (a1a4 <sc_indicate+0x60>)
    a19e:	f01f ff51 	bl	2a044 <k_delayed_work_submit_to_queue>
    a1a2:	e7ec      	b.n	a17e <sc_indicate+0x3a>
    a1a4:	20002c78 	.word	0x20002c78

0000a1a8 <sc_save>:
	u16_t end;
};

static void sc_save(struct bt_gatt_ccc_cfg *cfg,
		    struct bt_gatt_indicate_params *params)
{
    a1a8:	b510      	push	{r4, lr}
    a1aa:	b082      	sub	sp, #8
    a1ac:	4604      	mov	r4, r0
	struct sc_data data;
	struct sc_data *stored;

	memcpy(&data, params->data, params->len);
    a1ae:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    a1b0:	6a09      	ldr	r1, [r1, #32]
    a1b2:	a801      	add	r0, sp, #4
    a1b4:	f7f6 f884 	bl	2c0 <memcpy>

	data.start = sys_le16_to_cpu(data.start);
    a1b8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	data.end = sys_le16_to_cpu(data.end);
    a1bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]

	/* Load data stored */
	stored = (struct sc_data *)cfg->data;

	/* Check if there is any change stored */
	if (!stored->start && !stored->end) {
    a1c0:	89a1      	ldrh	r1, [r4, #12]
    a1c2:	b909      	cbnz	r1, a1c8 <sc_save+0x20>
    a1c4:	89e1      	ldrh	r1, [r4, #14]
    a1c6:	b139      	cbz	r1, a1d8 <sc_save+0x30>
		*stored = data;
		goto done;
	}

	update_range(&stored->start, &stored->end,
    a1c8:	f104 010e 	add.w	r1, r4, #14
    a1cc:	f104 000c 	add.w	r0, r4, #12
    a1d0:	f7ff ff5a 	bl	a088 <update_range>
		     data.start, data.end);

done:
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       stored->start, stored->end);
}
    a1d4:	b002      	add	sp, #8
    a1d6:	bd10      	pop	{r4, pc}
		*stored = data;
    a1d8:	9801      	ldr	r0, [sp, #4]
    a1da:	60e0      	str	r0, [r4, #12]
		goto done;
    a1dc:	e7fa      	b.n	a1d4 <sc_save+0x2c>

0000a1de <bt_gatt_attr_write_ccc>:
{
    a1de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a1e2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    a1e6:	68cd      	ldr	r5, [r1, #12]
	if (offset > sizeof(u16_t)) {
    a1e8:	2c02      	cmp	r4, #2
    a1ea:	d84f      	bhi.n	a28c <bt_gatt_attr_write_ccc+0xae>
	if (offset + len > sizeof(u16_t)) {
    a1ec:	4698      	mov	r8, r3
    a1ee:	441c      	add	r4, r3
    a1f0:	2c02      	cmp	r4, #2
    a1f2:	d84e      	bhi.n	a292 <bt_gatt_attr_write_ccc+0xb4>
    a1f4:	460f      	mov	r7, r1
    a1f6:	4681      	mov	r9, r0
	return ((u16_t)src[1] << 8) | src[0];
    a1f8:	7853      	ldrb	r3, [r2, #1]
    a1fa:	7816      	ldrb	r6, [r2, #0]
    a1fc:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	for (i = 0; i < ccc->cfg_len; i++) {
    a200:	2400      	movs	r4, #0
    a202:	686b      	ldr	r3, [r5, #4]
    a204:	429c      	cmp	r4, r3
    a206:	d209      	bcs.n	a21c <bt_gatt_attr_write_ccc+0x3e>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a208:	6829      	ldr	r1, [r5, #0]
    a20a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    a20e:	3101      	adds	r1, #1
    a210:	4648      	mov	r0, r9
    a212:	f7fc fffd 	bl	7210 <bt_conn_addr_le_cmp>
    a216:	b108      	cbz	r0, a21c <bt_gatt_attr_write_ccc+0x3e>
	for (i = 0; i < ccc->cfg_len; i++) {
    a218:	3401      	adds	r4, #1
    a21a:	e7f2      	b.n	a202 <bt_gatt_attr_write_ccc+0x24>
	if (i == ccc->cfg_len) {
    a21c:	686b      	ldr	r3, [r5, #4]
    a21e:	429c      	cmp	r4, r3
    a220:	d026      	beq.n	a270 <bt_gatt_attr_write_ccc+0x92>
	} else if (!value) {
    a222:	b91e      	cbnz	r6, a22c <bt_gatt_attr_write_ccc+0x4e>
		ccc->cfg[i].valid = false;
    a224:	682a      	ldr	r2, [r5, #0]
    a226:	0123      	lsls	r3, r4, #4
    a228:	2100      	movs	r1, #0
    a22a:	54d1      	strb	r1, [r2, r3]
	ccc->cfg[i].value = value;
    a22c:	682b      	ldr	r3, [r5, #0]
    a22e:	0124      	lsls	r4, r4, #4
    a230:	4423      	add	r3, r4
    a232:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    a234:	682b      	ldr	r3, [r5, #0]
    a236:	441c      	add	r4, r3
    a238:	8922      	ldrh	r2, [r4, #8]
    a23a:	892b      	ldrh	r3, [r5, #8]
    a23c:	429a      	cmp	r2, r3
    a23e:	d003      	beq.n	a248 <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
    a240:	4629      	mov	r1, r5
    a242:	4638      	mov	r0, r7
    a244:	f7ff ff38 	bl	a0b8 <gatt_ccc_changed>
}
    a248:	4640      	mov	r0, r8
    a24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	memcpy(dst, src, sizeof(*dst));
    a24e:	2207      	movs	r2, #7
    a250:	f109 0148 	add.w	r1, r9, #72	; 0x48
    a254:	3001      	adds	r0, #1
    a256:	f7f6 f833 	bl	2c0 <memcpy>
			if (value) {
    a25a:	b11e      	cbz	r6, a264 <bt_gatt_attr_write_ccc+0x86>
				ccc->cfg[i].valid = true;
    a25c:	682b      	ldr	r3, [r5, #0]
    a25e:	2201      	movs	r2, #1
    a260:	f803 200a 	strb.w	r2, [r3, sl]
		if (i == ccc->cfg_len) {
    a264:	686b      	ldr	r3, [r5, #4]
    a266:	429c      	cmp	r4, r3
    a268:	d1e0      	bne.n	a22c <bt_gatt_attr_write_ccc+0x4e>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    a26a:	f06f 0810 	mvn.w	r8, #16
    a26e:	e7eb      	b.n	a248 <bt_gatt_attr_write_ccc+0x6a>
    a270:	2400      	movs	r4, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    a272:	429c      	cmp	r4, r3
    a274:	d2f6      	bcs.n	a264 <bt_gatt_attr_write_ccc+0x86>
			if (ccc->cfg[i].valid) {
    a276:	682a      	ldr	r2, [r5, #0]
    a278:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    a27c:	eb02 000a 	add.w	r0, r2, sl
    a280:	f812 200a 	ldrb.w	r2, [r2, sl]
    a284:	2a00      	cmp	r2, #0
    a286:	d0e2      	beq.n	a24e <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    a288:	3401      	adds	r4, #1
    a28a:	e7f2      	b.n	a272 <bt_gatt_attr_write_ccc+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a28c:	f06f 0806 	mvn.w	r8, #6
    a290:	e7da      	b.n	a248 <bt_gatt_attr_write_ccc+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    a292:	f06f 080c 	mvn.w	r8, #12
    a296:	e7d7      	b.n	a248 <bt_gatt_attr_write_ccc+0x6a>

0000a298 <gatt_send>:
{
    a298:	b538      	push	{r3, r4, r5, lr}
    a29a:	460d      	mov	r5, r1
	if (params) {
    a29c:	b153      	cbz	r3, a2b4 <gatt_send+0x1c>
    a29e:	4619      	mov	r1, r3
		req->buf = buf;
    a2a0:	611d      	str	r5, [r3, #16]
		req->func = func;
    a2a2:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    a2a4:	9b04      	ldr	r3, [sp, #16]
    a2a6:	608b      	str	r3, [r1, #8]
		err = bt_att_req_send(conn, req);
    a2a8:	f7ff fe88 	bl	9fbc <bt_att_req_send>
    a2ac:	4604      	mov	r4, r0
	if (err) {
    a2ae:	b92c      	cbnz	r4, a2bc <gatt_send+0x24>
}
    a2b0:	4620      	mov	r0, r4
    a2b2:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_att_send(conn, buf);
    a2b4:	f7ff fe32 	bl	9f1c <bt_att_send>
    a2b8:	4604      	mov	r4, r0
    a2ba:	e7f8      	b.n	a2ae <gatt_send+0x16>
		net_buf_unref(buf);
    a2bc:	4628      	mov	r0, r5
    a2be:	f010 fd2d 	bl	1ad1c <net_buf_unref>
	return err;
    a2c2:	e7f5      	b.n	a2b0 <gatt_send+0x18>

0000a2c4 <gatt_indicate>:
{
    a2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2c8:	b082      	sub	sp, #8
    a2ca:	4680      	mov	r8, r0
    a2cc:	460c      	mov	r4, r1
				sizeof(*ind) + params->len);
    a2ce:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    a2d0:	3202      	adds	r2, #2
    a2d2:	211d      	movs	r1, #29
    a2d4:	f7ff f9f6 	bl	96c4 <bt_att_create_pdu>
	if (!buf) {
    a2d8:	b1f8      	cbz	r0, a31a <gatt_indicate+0x56>
    a2da:	4606      	mov	r6, r0
	ind = net_buf_add(buf, sizeof(*ind));
    a2dc:	f100 0708 	add.w	r7, r0, #8
    a2e0:	2102      	movs	r1, #2
    a2e2:	4638      	mov	r0, r7
    a2e4:	f010 fd66 	bl	1adb4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    a2e8:	69a3      	ldr	r3, [r4, #24]
    a2ea:	8a1b      	ldrh	r3, [r3, #16]
    a2ec:	4605      	mov	r5, r0
    a2ee:	f825 3b02 	strh.w	r3, [r5], #2
	net_buf_add(buf, params->len);
    a2f2:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    a2f4:	4638      	mov	r0, r7
    a2f6:	f010 fd5d 	bl	1adb4 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    a2fa:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    a2fc:	6a21      	ldr	r1, [r4, #32]
    a2fe:	4628      	mov	r0, r5
    a300:	f7f5 ffde 	bl	2c0 <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    a304:	2300      	movs	r3, #0
    a306:	9300      	str	r3, [sp, #0]
    a308:	4623      	mov	r3, r4
    a30a:	4a05      	ldr	r2, [pc, #20]	; (a320 <gatt_indicate+0x5c>)
    a30c:	4631      	mov	r1, r6
    a30e:	4640      	mov	r0, r8
    a310:	f7ff ffc2 	bl	a298 <gatt_send>
}
    a314:	b002      	add	sp, #8
    a316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
    a31a:	f06f 000b 	mvn.w	r0, #11
    a31e:	e7f9      	b.n	a314 <gatt_indicate+0x50>
    a320:	0000a0e9 	.word	0x0000a0e9

0000a324 <gatt_notify>:
{
    a324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a328:	4680      	mov	r8, r0
    a32a:	468a      	mov	sl, r1
    a32c:	4691      	mov	r9, r2
    a32e:	461c      	mov	r4, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    a330:	1c9a      	adds	r2, r3, #2
    a332:	211b      	movs	r1, #27
    a334:	f7ff f9c6 	bl	96c4 <bt_att_create_pdu>
	if (!buf) {
    a338:	b1d8      	cbz	r0, a372 <gatt_notify+0x4e>
    a33a:	4606      	mov	r6, r0
	nfy = net_buf_add(buf, sizeof(*nfy));
    a33c:	f100 0708 	add.w	r7, r0, #8
    a340:	2102      	movs	r1, #2
    a342:	4638      	mov	r0, r7
    a344:	f010 fd36 	bl	1adb4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    a348:	4605      	mov	r5, r0
    a34a:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    a34e:	4621      	mov	r1, r4
    a350:	4638      	mov	r0, r7
    a352:	f010 fd2f 	bl	1adb4 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    a356:	4622      	mov	r2, r4
    a358:	4649      	mov	r1, r9
    a35a:	4628      	mov	r0, r5
    a35c:	f7f5 ffb0 	bl	2c0 <memcpy>
    a360:	2300      	movs	r3, #0
    a362:	4632      	mov	r2, r6
    a364:	2104      	movs	r1, #4
    a366:	4640      	mov	r0, r8
    a368:	f7fd febd 	bl	80e6 <bt_l2cap_send_cb>
	return 0;
    a36c:	2000      	movs	r0, #0
    a36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    a372:	f06f 000b 	mvn.w	r0, #11
}
    a376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000a37c <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    a37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a380:	b082      	sub	sp, #8
    a382:	4604      	mov	r4, r0
    a384:	460f      	mov	r7, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    a386:	2300      	movs	r3, #0
    a388:	f88d 3000 	strb.w	r3, [sp]
    a38c:	f642 1302 	movw	r3, #10498	; 0x2902
    a390:	f8ad 3002 	strh.w	r3, [sp, #2]
    a394:	4669      	mov	r1, sp
    a396:	6800      	ldr	r0, [r0, #0]
    a398:	f7fa f991 	bl	46be <bt_uuid_cmp>
    a39c:	b938      	cbnz	r0, a3ae <notify_cb+0x32>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a39e:	68a2      	ldr	r2, [r4, #8]
    a3a0:	4b29      	ldr	r3, [pc, #164]	; (a448 <notify_cb+0xcc>)
    a3a2:	429a      	cmp	r2, r3
    a3a4:	d012      	beq.n	a3cc <notify_cb+0x50>
		return BT_GATT_ITER_CONTINUE;
    a3a6:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    a3a8:	b002      	add	sp, #8
    a3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    a3ae:	6820      	ldr	r0, [r4, #0]
    a3b0:	2300      	movs	r3, #0
    a3b2:	f88d 3004 	strb.w	r3, [sp, #4]
    a3b6:	f642 0303 	movw	r3, #10243	; 0x2803
    a3ba:	f8ad 3006 	strh.w	r3, [sp, #6]
    a3be:	a901      	add	r1, sp, #4
    a3c0:	f7fa f97d 	bl	46be <bt_uuid_cmp>
    a3c4:	2800      	cmp	r0, #0
    a3c6:	d0ef      	beq.n	a3a8 <notify_cb+0x2c>
		return BT_GATT_ITER_CONTINUE;
    a3c8:	2001      	movs	r0, #1
    a3ca:	e7ed      	b.n	a3a8 <notify_cb+0x2c>
	ccc = attr->user_data;
    a3cc:	68e5      	ldr	r5, [r4, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a3ce:	2400      	movs	r4, #0
    a3d0:	e01a      	b.n	a408 <notify_cb+0x8c>
			if (ccc->cfg == sc_ccc_cfg) {
    a3d2:	6828      	ldr	r0, [r5, #0]
    a3d4:	4b1d      	ldr	r3, [pc, #116]	; (a44c <notify_cb+0xd0>)
    a3d6:	4298      	cmp	r0, r3
    a3d8:	d115      	bne.n	a406 <notify_cb+0x8a>
				sc_save(&ccc->cfg[i], data->params);
    a3da:	6979      	ldr	r1, [r7, #20]
    a3dc:	4430      	add	r0, r6
    a3de:	f7ff fee3 	bl	a1a8 <sc_save>
			continue;
    a3e2:	e010      	b.n	a406 <notify_cb+0x8a>
		if (data->type == BT_GATT_CCC_INDICATE) {
    a3e4:	88bb      	ldrh	r3, [r7, #4]
    a3e6:	2b02      	cmp	r3, #2
    a3e8:	d024      	beq.n	a434 <notify_cb+0xb8>
			err = gatt_notify(conn, data->attr->handle, data->data,
    a3ea:	68b9      	ldr	r1, [r7, #8]
    a3ec:	8a3b      	ldrh	r3, [r7, #16]
    a3ee:	68fa      	ldr	r2, [r7, #12]
    a3f0:	8a09      	ldrh	r1, [r1, #16]
    a3f2:	f7ff ff97 	bl	a324 <gatt_notify>
    a3f6:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    a3f8:	4640      	mov	r0, r8
    a3fa:	f7fc ffb9 	bl	7370 <bt_conn_unref>
		if (err < 0) {
    a3fe:	2e00      	cmp	r6, #0
    a400:	db1f      	blt.n	a442 <notify_cb+0xc6>
		data->err = 0;
    a402:	2300      	movs	r3, #0
    a404:	603b      	str	r3, [r7, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    a406:	3401      	adds	r4, #1
    a408:	686b      	ldr	r3, [r5, #4]
    a40a:	429c      	cmp	r4, r3
    a40c:	d217      	bcs.n	a43e <notify_cb+0xc2>
		if (ccc->cfg[i].value != data->type) {
    a40e:	6828      	ldr	r0, [r5, #0]
    a410:	0126      	lsls	r6, r4, #4
    a412:	4430      	add	r0, r6
    a414:	8902      	ldrh	r2, [r0, #8]
    a416:	88bb      	ldrh	r3, [r7, #4]
    a418:	429a      	cmp	r2, r3
    a41a:	d1f4      	bne.n	a406 <notify_cb+0x8a>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    a41c:	3001      	adds	r0, #1
    a41e:	f7fc ff4d 	bl	72bc <bt_conn_lookup_addr_le>
		if (!conn) {
    a422:	4680      	mov	r8, r0
    a424:	2800      	cmp	r0, #0
    a426:	d0d4      	beq.n	a3d2 <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
    a428:	7b03      	ldrb	r3, [r0, #12]
    a42a:	2b03      	cmp	r3, #3
    a42c:	d0da      	beq.n	a3e4 <notify_cb+0x68>
			bt_conn_unref(conn);
    a42e:	f7fc ff9f 	bl	7370 <bt_conn_unref>
			continue;
    a432:	e7e8      	b.n	a406 <notify_cb+0x8a>
			err = gatt_indicate(conn, data->params);
    a434:	6979      	ldr	r1, [r7, #20]
    a436:	f7ff ff45 	bl	a2c4 <gatt_indicate>
    a43a:	4606      	mov	r6, r0
    a43c:	e7dc      	b.n	a3f8 <notify_cb+0x7c>
	return BT_GATT_ITER_CONTINUE;
    a43e:	2001      	movs	r0, #1
    a440:	e7b2      	b.n	a3a8 <notify_cb+0x2c>
			return BT_GATT_ITER_STOP;
    a442:	2000      	movs	r0, #0
    a444:	e7b0      	b.n	a3a8 <notify_cb+0x2c>
    a446:	bf00      	nop
    a448:	0000a1df 	.word	0x0000a1df
    a44c:	200008a4 	.word	0x200008a4

0000a450 <sc_restore>:

static void sc_restore(struct bt_gatt_ccc_cfg *cfg)
{
	struct sc_data *data = (struct sc_data *)cfg->data;

	if (!data->start && !data->end) {
    a450:	8981      	ldrh	r1, [r0, #12]
    a452:	b909      	cbnz	r1, a458 <sc_restore+0x8>
    a454:	89c3      	ldrh	r3, [r0, #14]
    a456:	b163      	cbz	r3, a472 <sc_restore+0x22>
{
    a458:	b510      	push	{r4, lr}
    a45a:	4604      	mov	r4, r0
	}

	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       data->start, data->end);

	sc_indicate(&gatt_sc, data->start, data->end);
    a45c:	89c2      	ldrh	r2, [r0, #14]
    a45e:	4805      	ldr	r0, [pc, #20]	; (a474 <sc_restore+0x24>)
    a460:	f7ff fe70 	bl	a144 <sc_indicate>

	/* Reset config data */
	memset(cfg->data, 0, sizeof(cfg->data));
    a464:	2204      	movs	r2, #4
    a466:	2100      	movs	r1, #0
    a468:	f104 000c 	add.w	r0, r4, #12
    a46c:	f020 fa54 	bl	2a918 <memset>
    a470:	bd10      	pop	{r4, pc}
    a472:	4770      	bx	lr
    a474:	2000084c 	.word	0x2000084c

0000a478 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a478:	6882      	ldr	r2, [r0, #8]
    a47a:	4b16      	ldr	r3, [pc, #88]	; (a4d4 <connected_cb+0x5c>)
    a47c:	429a      	cmp	r2, r3
    a47e:	d001      	beq.n	a484 <connected_cb+0xc>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    a480:	2001      	movs	r0, #1
    a482:	4770      	bx	lr
{
    a484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a488:	460f      	mov	r7, r1
    a48a:	4680      	mov	r8, r0
	ccc = attr->user_data;
    a48c:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a48e:	2400      	movs	r4, #0
    a490:	e004      	b.n	a49c <connected_cb+0x24>
				sc_restore(&ccc->cfg[i]);
    a492:	4430      	add	r0, r6
    a494:	f7ff ffdc 	bl	a450 <sc_restore>
    a498:	e019      	b.n	a4ce <connected_cb+0x56>
	for (i = 0; i < ccc->cfg_len; i++) {
    a49a:	3401      	adds	r4, #1
    a49c:	686b      	ldr	r3, [r5, #4]
    a49e:	429c      	cmp	r4, r3
    a4a0:	d215      	bcs.n	a4ce <connected_cb+0x56>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a4a2:	6829      	ldr	r1, [r5, #0]
    a4a4:	0126      	lsls	r6, r4, #4
    a4a6:	4431      	add	r1, r6
    a4a8:	3101      	adds	r1, #1
    a4aa:	4638      	mov	r0, r7
    a4ac:	f7fc feb0 	bl	7210 <bt_conn_addr_le_cmp>
    a4b0:	2800      	cmp	r0, #0
    a4b2:	d1f2      	bne.n	a49a <connected_cb+0x22>
		if (ccc->cfg[i].value) {
    a4b4:	682b      	ldr	r3, [r5, #0]
    a4b6:	4433      	add	r3, r6
    a4b8:	891b      	ldrh	r3, [r3, #8]
    a4ba:	2b00      	cmp	r3, #0
    a4bc:	d0ed      	beq.n	a49a <connected_cb+0x22>
			gatt_ccc_changed(attr, ccc);
    a4be:	4629      	mov	r1, r5
    a4c0:	4640      	mov	r0, r8
    a4c2:	f7ff fdf9 	bl	a0b8 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    a4c6:	6828      	ldr	r0, [r5, #0]
    a4c8:	4b03      	ldr	r3, [pc, #12]	; (a4d8 <connected_cb+0x60>)
    a4ca:	4298      	cmp	r0, r3
    a4cc:	d0e1      	beq.n	a492 <connected_cb+0x1a>
}
    a4ce:	2001      	movs	r0, #1
    a4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4d4:	0000a1df 	.word	0x0000a1df
    a4d8:	200008a4 	.word	0x200008a4

0000a4dc <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    a4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a4e0:	6882      	ldr	r2, [r0, #8]
    a4e2:	4b29      	ldr	r3, [pc, #164]	; (a588 <disconnected_cb+0xac>)
    a4e4:	429a      	cmp	r2, r3
    a4e6:	d002      	beq.n	a4ee <disconnected_cb+0x12>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    a4e8:	2001      	movs	r0, #1
    a4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
    a4ee:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    a4f0:	892b      	ldrh	r3, [r5, #8]
    a4f2:	2b00      	cmp	r3, #0
    a4f4:	d0f8      	beq.n	a4e8 <disconnected_cb+0xc>
    a4f6:	4688      	mov	r8, r1
    a4f8:	4607      	mov	r7, r0
    a4fa:	2400      	movs	r4, #0
    a4fc:	e012      	b.n	a524 <disconnected_cb+0x48>
					bt_conn_unref(tmp);
    a4fe:	f7fc ff37 	bl	7370 <bt_conn_unref>
					return BT_GATT_ITER_CONTINUE;
    a502:	e7f1      	b.n	a4e8 <disconnected_cb+0xc>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    a504:	f108 0948 	add.w	r9, r8, #72	; 0x48
    a508:	4648      	mov	r0, r9
    a50a:	f7fc f99f 	bl	684c <bt_addr_le_is_bonded>
    a50e:	bb28      	cbnz	r0, a55c <disconnected_cb+0x80>
				ccc->cfg[i].valid = false;
    a510:	682b      	ldr	r3, [r5, #0]
    a512:	2100      	movs	r1, #0
    a514:	5599      	strb	r1, [r3, r6]
				memset(&ccc->cfg[i].value, 0,
    a516:	6828      	ldr	r0, [r5, #0]
    a518:	4430      	add	r0, r6
    a51a:	2202      	movs	r2, #2
    a51c:	3008      	adds	r0, #8
    a51e:	f020 f9fb 	bl	2a918 <memset>
	for (i = 0; i < ccc->cfg_len; i++) {
    a522:	3401      	adds	r4, #1
    a524:	686b      	ldr	r3, [r5, #4]
    a526:	429c      	cmp	r4, r3
    a528:	d220      	bcs.n	a56c <disconnected_cb+0x90>
		if (!ccc->cfg[i].value) {
    a52a:	6829      	ldr	r1, [r5, #0]
    a52c:	0126      	lsls	r6, r4, #4
    a52e:	4431      	add	r1, r6
    a530:	890b      	ldrh	r3, [r1, #8]
    a532:	2b00      	cmp	r3, #0
    a534:	d0f5      	beq.n	a522 <disconnected_cb+0x46>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a536:	3101      	adds	r1, #1
    a538:	4640      	mov	r0, r8
    a53a:	f7fc fe69 	bl	7210 <bt_conn_addr_le_cmp>
    a53e:	2800      	cmp	r0, #0
    a540:	d0e0      	beq.n	a504 <disconnected_cb+0x28>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    a542:	6828      	ldr	r0, [r5, #0]
    a544:	4430      	add	r0, r6
    a546:	3001      	adds	r0, #1
    a548:	f7fc feb8 	bl	72bc <bt_conn_lookup_addr_le>
			if (tmp) {
    a54c:	2800      	cmp	r0, #0
    a54e:	d0e8      	beq.n	a522 <disconnected_cb+0x46>
				if (tmp->state == BT_CONN_CONNECTED) {
    a550:	7b02      	ldrb	r2, [r0, #12]
    a552:	2a03      	cmp	r2, #3
    a554:	d0d3      	beq.n	a4fe <disconnected_cb+0x22>
				bt_conn_unref(tmp);
    a556:	f7fc ff0b 	bl	7370 <bt_conn_unref>
    a55a:	e7e2      	b.n	a522 <disconnected_cb+0x46>
				bt_addr_le_copy(&ccc->cfg[i].peer,
    a55c:	6828      	ldr	r0, [r5, #0]
    a55e:	4430      	add	r0, r6
    a560:	2207      	movs	r2, #7
    a562:	4649      	mov	r1, r9
    a564:	3001      	adds	r0, #1
    a566:	f7f5 feab 	bl	2c0 <memcpy>
    a56a:	e7da      	b.n	a522 <disconnected_cb+0x46>
	memset(&ccc->value, 0, sizeof(ccc->value));
    a56c:	2202      	movs	r2, #2
    a56e:	2100      	movs	r1, #0
    a570:	f105 0008 	add.w	r0, r5, #8
    a574:	f020 f9d0 	bl	2a918 <memset>
	if (ccc->cfg_changed) {
    a578:	68eb      	ldr	r3, [r5, #12]
    a57a:	2b00      	cmp	r3, #0
    a57c:	d0b4      	beq.n	a4e8 <disconnected_cb+0xc>
		ccc->cfg_changed(attr, ccc->value);
    a57e:	8929      	ldrh	r1, [r5, #8]
    a580:	4638      	mov	r0, r7
    a582:	4798      	blx	r3
    a584:	e7b0      	b.n	a4e8 <disconnected_cb+0xc>
    a586:	bf00      	nop
    a588:	0000a1df 	.word	0x0000a1df

0000a58c <bt_gatt_init>:
{
    a58c:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    a58e:	4805      	ldr	r0, [pc, #20]	; (a5a4 <bt_gatt_init+0x18>)
    a590:	f7ff fd3c 	bl	a00c <gatt_register>
	gatt_register(&gatt_svc);
    a594:	4804      	ldr	r0, [pc, #16]	; (a5a8 <bt_gatt_init+0x1c>)
    a596:	f7ff fd39 	bl	a00c <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    a59a:	4904      	ldr	r1, [pc, #16]	; (a5ac <bt_gatt_init+0x20>)
    a59c:	4804      	ldr	r0, [pc, #16]	; (a5b0 <bt_gatt_init+0x24>)
    a59e:	f01f fcd9 	bl	29f54 <k_delayed_work_init>
    a5a2:	bd08      	pop	{r3, pc}
    a5a4:	2000bbdc 	.word	0x2000bbdc
    a5a8:	2000bc38 	.word	0x2000bc38
    a5ac:	0000a881 	.word	0x0000a881
    a5b0:	20000878 	.word	0x20000878

0000a5b4 <bt_gatt_service_register>:
{
    a5b4:	b510      	push	{r4, lr}
    a5b6:	b082      	sub	sp, #8
    a5b8:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    a5ba:	6803      	ldr	r3, [r0, #0]
    a5bc:	6818      	ldr	r0, [r3, #0]
    a5be:	2300      	movs	r3, #0
    a5c0:	f88d 3000 	strb.w	r3, [sp]
    a5c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    a5c8:	f8ad 3002 	strh.w	r3, [sp, #2]
    a5cc:	4669      	mov	r1, sp
    a5ce:	f7fa f876 	bl	46be <bt_uuid_cmp>
    a5d2:	b300      	cbz	r0, a616 <bt_gatt_service_register+0x62>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    a5d4:	6823      	ldr	r3, [r4, #0]
    a5d6:	6818      	ldr	r0, [r3, #0]
    a5d8:	2300      	movs	r3, #0
    a5da:	f88d 3004 	strb.w	r3, [sp, #4]
    a5de:	f641 0301 	movw	r3, #6145	; 0x1801
    a5e2:	f8ad 3006 	strh.w	r3, [sp, #6]
    a5e6:	a901      	add	r1, sp, #4
    a5e8:	f7fa f869 	bl	46be <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    a5ec:	b1b0      	cbz	r0, a61c <bt_gatt_service_register+0x68>
	err = gatt_register(svc);
    a5ee:	4620      	mov	r0, r4
    a5f0:	f7ff fd0c 	bl	a00c <gatt_register>
	if (err < 0) {
    a5f4:	2800      	cmp	r0, #0
    a5f6:	db0c      	blt.n	a612 <bt_gatt_service_register+0x5e>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    a5f8:	6821      	ldr	r1, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    a5fa:	88a2      	ldrh	r2, [r4, #4]
    a5fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    a600:	0093      	lsls	r3, r2, #2
    a602:	3b14      	subs	r3, #20
    a604:	440b      	add	r3, r1
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    a606:	8a1a      	ldrh	r2, [r3, #16]
    a608:	8a09      	ldrh	r1, [r1, #16]
    a60a:	4806      	ldr	r0, [pc, #24]	; (a624 <bt_gatt_service_register+0x70>)
    a60c:	f7ff fd9a 	bl	a144 <sc_indicate>
	return 0;
    a610:	2000      	movs	r0, #0
}
    a612:	b002      	add	sp, #8
    a614:	bd10      	pop	{r4, pc}
		return -EALREADY;
    a616:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a61a:	e7fa      	b.n	a612 <bt_gatt_service_register+0x5e>
    a61c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a620:	e7f7      	b.n	a612 <bt_gatt_service_register+0x5e>
    a622:	bf00      	nop
    a624:	2000084c 	.word	0x2000084c

0000a628 <bt_gatt_attr_read>:
{
    a628:	b510      	push	{r4, lr}
    a62a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a62e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
    a632:	42a1      	cmp	r1, r4
    a634:	d80c      	bhi.n	a650 <bt_gatt_attr_read+0x28>
    a636:	4610      	mov	r0, r2
	len = min(buf_len, value_len - offset);
    a638:	1a64      	subs	r4, r4, r1
    a63a:	42a3      	cmp	r3, r4
    a63c:	bfa8      	it	ge
    a63e:	4623      	movge	r3, r4
    a640:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    a642:	4622      	mov	r2, r4
    a644:	9b03      	ldr	r3, [sp, #12]
    a646:	4419      	add	r1, r3
    a648:	f7f5 fe3a 	bl	2c0 <memcpy>
}
    a64c:	4620      	mov	r0, r4
    a64e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a650:	f06f 0406 	mvn.w	r4, #6
    a654:	e7fa      	b.n	a64c <bt_gatt_attr_read+0x24>

0000a656 <read_appearance>:
{
    a656:	b530      	push	{r4, r5, lr}
    a658:	b087      	sub	sp, #28
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    a65a:	ac06      	add	r4, sp, #24
    a65c:	2500      	movs	r5, #0
    a65e:	f824 5d02 	strh.w	r5, [r4, #-2]!
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    a662:	2502      	movs	r5, #2
    a664:	9502      	str	r5, [sp, #8]
    a666:	9401      	str	r4, [sp, #4]
    a668:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    a66c:	9400      	str	r4, [sp, #0]
    a66e:	f7ff ffdb 	bl	a628 <bt_gatt_attr_read>
}
    a672:	b007      	add	sp, #28
    a674:	bd30      	pop	{r4, r5, pc}
	...

0000a678 <read_name>:
{
    a678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a67c:	b084      	sub	sp, #16
    a67e:	4605      	mov	r5, r0
    a680:	460e      	mov	r6, r1
    a682:	4617      	mov	r7, r2
    a684:	4698      	mov	r8, r3
				 strlen(gap_name));
    a686:	4c09      	ldr	r4, [pc, #36]	; (a6ac <read_name+0x34>)
    a688:	4620      	mov	r0, r4
    a68a:	f7f6 f839 	bl	700 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    a68e:	b280      	uxth	r0, r0
    a690:	9002      	str	r0, [sp, #8]
    a692:	9401      	str	r4, [sp, #4]
    a694:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a698:	9300      	str	r3, [sp, #0]
    a69a:	4643      	mov	r3, r8
    a69c:	463a      	mov	r2, r7
    a69e:	4631      	mov	r1, r6
    a6a0:	4628      	mov	r0, r5
    a6a2:	f7ff ffc1 	bl	a628 <bt_gatt_attr_read>
}
    a6a6:	b004      	add	sp, #16
    a6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6ac:	000316d4 	.word	0x000316d4

0000a6b0 <bt_gatt_attr_read_service>:
{
    a6b0:	b570      	push	{r4, r5, r6, lr}
    a6b2:	b086      	sub	sp, #24
    a6b4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
    a6b8:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
    a6ba:	7826      	ldrb	r6, [r4, #0]
    a6bc:	b146      	cbz	r6, a6d0 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
    a6be:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    a6c0:	2610      	movs	r6, #16
    a6c2:	9602      	str	r6, [sp, #8]
    a6c4:	9401      	str	r4, [sp, #4]
    a6c6:	9500      	str	r5, [sp, #0]
    a6c8:	f7ff ffae 	bl	a628 <bt_gatt_attr_read>
}
    a6cc:	b006      	add	sp, #24
    a6ce:	bd70      	pop	{r4, r5, r6, pc}
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    a6d0:	8866      	ldrh	r6, [r4, #2]
    a6d2:	ac06      	add	r4, sp, #24
    a6d4:	f824 6d02 	strh.w	r6, [r4, #-2]!
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    a6d8:	2602      	movs	r6, #2
    a6da:	9602      	str	r6, [sp, #8]
    a6dc:	9401      	str	r4, [sp, #4]
    a6de:	9500      	str	r5, [sp, #0]
    a6e0:	f7ff ffa2 	bl	a628 <bt_gatt_attr_read>
    a6e4:	e7f2      	b.n	a6cc <bt_gatt_attr_read_service+0x1c>

0000a6e6 <bt_gatt_attr_read_ccc>:
{
    a6e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a6ea:	b086      	sub	sp, #24
    a6ec:	4607      	mov	r7, r0
    a6ee:	4688      	mov	r8, r1
    a6f0:	4691      	mov	r9, r2
    a6f2:	469a      	mov	sl, r3
	struct _bt_gatt_ccc *ccc = attr->user_data;
    a6f4:	68cd      	ldr	r5, [r1, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a6f6:	2400      	movs	r4, #0
    a6f8:	686b      	ldr	r3, [r5, #4]
    a6fa:	429c      	cmp	r4, r3
    a6fc:	d20e      	bcs.n	a71c <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a6fe:	6829      	ldr	r1, [r5, #0]
    a700:	0126      	lsls	r6, r4, #4
    a702:	4431      	add	r1, r6
    a704:	3101      	adds	r1, #1
    a706:	4638      	mov	r0, r7
    a708:	f7fc fd82 	bl	7210 <bt_conn_addr_le_cmp>
    a70c:	b108      	cbz	r0, a712 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    a70e:	3401      	adds	r4, #1
    a710:	e7f2      	b.n	a6f8 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    a712:	682b      	ldr	r3, [r5, #0]
    a714:	441e      	add	r6, r3
    a716:	8933      	ldrh	r3, [r6, #8]
    a718:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (i == ccc->cfg_len) {
    a71c:	686b      	ldr	r3, [r5, #4]
    a71e:	429c      	cmp	r4, r3
    a720:	d010      	beq.n	a744 <bt_gatt_attr_read_ccc+0x5e>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    a722:	2302      	movs	r3, #2
    a724:	9302      	str	r3, [sp, #8]
    a726:	f10d 0316 	add.w	r3, sp, #22
    a72a:	9301      	str	r3, [sp, #4]
    a72c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    a730:	9300      	str	r3, [sp, #0]
    a732:	4653      	mov	r3, sl
    a734:	464a      	mov	r2, r9
    a736:	4641      	mov	r1, r8
    a738:	4638      	mov	r0, r7
    a73a:	f7ff ff75 	bl	a628 <bt_gatt_attr_read>
}
    a73e:	b006      	add	sp, #24
    a740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		value = 0x0000;
    a744:	2300      	movs	r3, #0
    a746:	f8ad 3016 	strh.w	r3, [sp, #22]
    a74a:	e7ea      	b.n	a722 <bt_gatt_attr_read_ccc+0x3c>

0000a74c <bt_gatt_foreach_attr>:
{
    a74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a750:	4606      	mov	r6, r0
    a752:	460f      	mov	r7, r1
    a754:	4690      	mov	r8, r2
    a756:	4699      	mov	r9, r3
	return list->head;
    a758:	4b15      	ldr	r3, [pc, #84]	; (a7b0 <bt_gatt_foreach_attr+0x64>)
    a75a:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a75c:	b10d      	cbz	r5, a762 <bt_gatt_foreach_attr+0x16>
    a75e:	3d08      	subs	r5, #8
    a760:	e01e      	b.n	a7a0 <bt_gatt_foreach_attr+0x54>
    a762:	2500      	movs	r5, #0
    a764:	e01c      	b.n	a7a0 <bt_gatt_foreach_attr+0x54>
		for (i = 0; i < svc->attr_count; i++) {
    a766:	3401      	adds	r4, #1
    a768:	88ab      	ldrh	r3, [r5, #4]
    a76a:	429c      	cmp	r4, r3
    a76c:	da0f      	bge.n	a78e <bt_gatt_foreach_attr+0x42>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    a76e:	6828      	ldr	r0, [r5, #0]
    a770:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    a774:	0093      	lsls	r3, r2, #2
    a776:	4418      	add	r0, r3
			if (attr->handle < start_handle ||
    a778:	8a03      	ldrh	r3, [r0, #16]
    a77a:	42b3      	cmp	r3, r6
    a77c:	d3f3      	bcc.n	a766 <bt_gatt_foreach_attr+0x1a>
    a77e:	42bb      	cmp	r3, r7
    a780:	d8f1      	bhi.n	a766 <bt_gatt_foreach_attr+0x1a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    a782:	4649      	mov	r1, r9
    a784:	47c0      	blx	r8
    a786:	2800      	cmp	r0, #0
    a788:	d1ed      	bne.n	a766 <bt_gatt_foreach_attr+0x1a>
    a78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    a78e:	f115 0308 	adds.w	r3, r5, #8
    a792:	d009      	beq.n	a7a8 <bt_gatt_foreach_attr+0x5c>
	return node->next;
    a794:	68aa      	ldr	r2, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a796:	b14a      	cbz	r2, a7ac <bt_gatt_foreach_attr+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    a798:	b103      	cbz	r3, a79c <bt_gatt_foreach_attr+0x50>
	return node->next;
    a79a:	68ab      	ldr	r3, [r5, #8]
    a79c:	f1a3 0508 	sub.w	r5, r3, #8
    a7a0:	2d00      	cmp	r5, #0
    a7a2:	d0f2      	beq.n	a78a <bt_gatt_foreach_attr+0x3e>
    a7a4:	2400      	movs	r4, #0
    a7a6:	e7df      	b.n	a768 <bt_gatt_foreach_attr+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    a7a8:	461a      	mov	r2, r3
    a7aa:	e7f4      	b.n	a796 <bt_gatt_foreach_attr+0x4a>
    a7ac:	2500      	movs	r5, #0
    a7ae:	e7f7      	b.n	a7a0 <bt_gatt_foreach_attr+0x54>
    a7b0:	20000844 	.word	0x20000844

0000a7b4 <bt_gatt_attr_next>:
{
    a7b4:	b500      	push	{lr}
    a7b6:	b083      	sub	sp, #12
	struct bt_gatt_attr *next = NULL;
    a7b8:	ab02      	add	r3, sp, #8
    a7ba:	2200      	movs	r2, #0
    a7bc:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    a7c0:	8a00      	ldrh	r0, [r0, #16]
    a7c2:	3001      	adds	r0, #1
    a7c4:	b280      	uxth	r0, r0
    a7c6:	4a04      	ldr	r2, [pc, #16]	; (a7d8 <bt_gatt_attr_next+0x24>)
    a7c8:	4601      	mov	r1, r0
    a7ca:	f7ff ffbf 	bl	a74c <bt_gatt_foreach_attr>
}
    a7ce:	9801      	ldr	r0, [sp, #4]
    a7d0:	b003      	add	sp, #12
    a7d2:	f85d fb04 	ldr.w	pc, [sp], #4
    a7d6:	bf00      	nop
    a7d8:	0000a0b3 	.word	0x0000a0b3

0000a7dc <bt_gatt_attr_read_chrc>:
{
    a7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7e0:	b08a      	sub	sp, #40	; 0x28
    a7e2:	4606      	mov	r6, r0
    a7e4:	460c      	mov	r4, r1
    a7e6:	4617      	mov	r7, r2
    a7e8:	4698      	mov	r8, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
    a7ea:	68cd      	ldr	r5, [r1, #12]
	pdu.properties = chrc->properties;
    a7ec:	792b      	ldrb	r3, [r5, #4]
    a7ee:	f88d 3014 	strb.w	r3, [sp, #20]
	next = bt_gatt_attr_next(attr);
    a7f2:	4608      	mov	r0, r1
    a7f4:	f7ff ffde 	bl	a7b4 <bt_gatt_attr_next>
	if (!next) {
    a7f8:	b1c0      	cbz	r0, a82c <bt_gatt_attr_read_chrc+0x50>
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    a7fa:	8a03      	ldrh	r3, [r0, #16]
    a7fc:	f8ad 3015 	strh.w	r3, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    a800:	6829      	ldr	r1, [r5, #0]
    a802:	780b      	ldrb	r3, [r1, #0]
    a804:	b9c3      	cbnz	r3, a838 <bt_gatt_attr_read_chrc+0x5c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    a806:	884b      	ldrh	r3, [r1, #2]
    a808:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    a80c:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    a80e:	9302      	str	r3, [sp, #8]
    a810:	ab05      	add	r3, sp, #20
    a812:	9301      	str	r3, [sp, #4]
    a814:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    a818:	9300      	str	r3, [sp, #0]
    a81a:	4643      	mov	r3, r8
    a81c:	463a      	mov	r2, r7
    a81e:	4621      	mov	r1, r4
    a820:	4630      	mov	r0, r6
    a822:	f7ff ff01 	bl	a628 <bt_gatt_attr_read>
}
    a826:	b00a      	add	sp, #40	; 0x28
    a828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu.value_handle = 0x0000;
    a82c:	2300      	movs	r3, #0
    a82e:	f88d 3015 	strb.w	r3, [sp, #21]
    a832:	f88d 3016 	strb.w	r3, [sp, #22]
    a836:	e7e3      	b.n	a800 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    a838:	2210      	movs	r2, #16
    a83a:	3101      	adds	r1, #1
    a83c:	f10d 0017 	add.w	r0, sp, #23
    a840:	f7f5 fd3e 	bl	2c0 <memcpy>
		value_len += 16;
    a844:	2313      	movs	r3, #19
    a846:	e7e2      	b.n	a80e <bt_gatt_attr_read_chrc+0x32>

0000a848 <bt_gatt_indicate>:
{
    a848:	b500      	push	{lr}
    a84a:	b087      	sub	sp, #28
	if (conn) {
    a84c:	b120      	cbz	r0, a858 <bt_gatt_indicate+0x10>
		return gatt_indicate(conn, params);
    a84e:	f7ff fd39 	bl	a2c4 <gatt_indicate>
}
    a852:	b007      	add	sp, #28
    a854:	f85d fb04 	ldr.w	pc, [sp], #4
	nfy.err = -ENOTCONN;
    a858:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    a85c:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    a85e:	2302      	movs	r3, #2
    a860:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.params = params;
    a864:	9105      	str	r1, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    a866:	6988      	ldr	r0, [r1, #24]
    a868:	466b      	mov	r3, sp
    a86a:	4a04      	ldr	r2, [pc, #16]	; (a87c <bt_gatt_indicate+0x34>)
    a86c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a870:	8a00      	ldrh	r0, [r0, #16]
    a872:	f7ff ff6b 	bl	a74c <bt_gatt_foreach_attr>
	return nfy.err;
    a876:	9800      	ldr	r0, [sp, #0]
    a878:	e7eb      	b.n	a852 <bt_gatt_indicate+0xa>
    a87a:	bf00      	nop
    a87c:	0000a37d 	.word	0x0000a37d

0000a880 <sc_process>:
{
    a880:	b510      	push	{r4, lr}
    a882:	b082      	sub	sp, #8
    a884:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    a886:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    a88a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    a88e:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    a892:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    a896:	f1a0 012c 	sub.w	r1, r0, #44	; 0x2c
    a89a:	f100 0428 	add.w	r4, r0, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a89e:	f3bf 8f5b 	dmb	ish
    a8a2:	e854 2f00 	ldrex	r2, [r4]
    a8a6:	f022 0201 	bic.w	r2, r2, #1
    a8aa:	e844 2000 	strex	r0, r2, [r4]
    a8ae:	2800      	cmp	r0, #0
    a8b0:	d1f7      	bne.n	a8a2 <sc_process+0x22>
    a8b2:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    a8b6:	2000      	movs	r0, #0
    a8b8:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0;
    a8bc:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    a8c0:	4a0e      	ldr	r2, [pc, #56]	; (a8fc <sc_process+0x7c>)
    a8c2:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    a8c6:	4a0e      	ldr	r2, [pc, #56]	; (a900 <sc_process+0x80>)
    a8c8:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    a8cc:	aa01      	add	r2, sp, #4
    a8ce:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    a8d2:	2204      	movs	r2, #4
    a8d4:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    a8d8:	f7ff ffb6 	bl	a848 <bt_gatt_indicate>
    a8dc:	b108      	cbz	r0, a8e2 <sc_process+0x62>
}
    a8de:	b002      	add	sp, #8
    a8e0:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a8e2:	f3bf 8f5b 	dmb	ish
    a8e6:	e854 3f00 	ldrex	r3, [r4]
    a8ea:	f043 0302 	orr.w	r3, r3, #2
    a8ee:	e844 3200 	strex	r2, r3, [r4]
    a8f2:	2a00      	cmp	r2, #0
    a8f4:	d1f7      	bne.n	a8e6 <sc_process+0x66>
    a8f6:	f3bf 8f5b 	dmb	ish
    a8fa:	e7f0      	b.n	a8de <sc_process+0x5e>
    a8fc:	2000bc10 	.word	0x2000bc10
    a900:	0000a0f9 	.word	0x0000a0f9

0000a904 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    a904:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    a906:	4603      	mov	r3, r0
    a908:	4a03      	ldr	r2, [pc, #12]	; (a918 <bt_gatt_connected+0x14>)
    a90a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a90e:	2001      	movs	r0, #1
    a910:	f7ff ff1c 	bl	a74c <bt_gatt_foreach_attr>
    a914:	bd08      	pop	{r3, pc}
    a916:	bf00      	nop
    a918:	0000a479 	.word	0x0000a479

0000a91c <bt_gatt_disconnected>:
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    a91c:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    a91e:	4603      	mov	r3, r0
    a920:	4a03      	ldr	r2, [pc, #12]	; (a930 <bt_gatt_disconnected+0x14>)
    a922:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a926:	2001      	movs	r0, #1
    a928:	f7ff ff10 	bl	a74c <bt_gatt_foreach_attr>
    a92c:	bd08      	pop	{r3, pc}
    a92e:	bf00      	nop
    a930:	0000a4dd 	.word	0x0000a4dd

0000a934 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    a934:	4b11      	ldr	r3, [pc, #68]	; (a97c <get_io_capa+0x48>)
    a936:	681b      	ldr	r3, [r3, #0]
    a938:	b1db      	cbz	r3, a972 <get_io_capa+0x3e>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    a93a:	681a      	ldr	r2, [r3, #0]
    a93c:	b152      	cbz	r2, a954 <get_io_capa+0x20>
    a93e:	6859      	ldr	r1, [r3, #4]
    a940:	b141      	cbz	r1, a954 <get_io_capa+0x20>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    a942:	6899      	ldr	r1, [r3, #8]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    a944:	b109      	cbz	r1, a94a <get_io_capa+0x16>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    a946:	2004      	movs	r0, #4
    a948:	4770      	bx	lr
	    (bt_auth->passkey_confirm || !sc_supported)) {
    a94a:	490d      	ldr	r1, [pc, #52]	; (a980 <get_io_capa+0x4c>)
    a94c:	7809      	ldrb	r1, [r1, #0]
    a94e:	b909      	cbnz	r1, a954 <get_io_capa+0x20>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    a950:	2004      	movs	r0, #4
    a952:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    a954:	490a      	ldr	r1, [pc, #40]	; (a980 <get_io_capa+0x4c>)
    a956:	7809      	ldrb	r1, [r1, #0]
    a958:	b121      	cbz	r1, a964 <get_io_capa+0x30>
    a95a:	b11a      	cbz	r2, a964 <get_io_capa+0x30>
	    bt_auth->passkey_confirm) {
    a95c:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && bt_auth->passkey_display &&
    a95e:	b109      	cbz	r1, a964 <get_io_capa+0x30>
		return BT_SMP_IO_DISPLAY_YESNO;
    a960:	2001      	movs	r0, #1
    a962:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
    a964:	685b      	ldr	r3, [r3, #4]
    a966:	b10b      	cbz	r3, a96c <get_io_capa+0x38>
		return BT_SMP_IO_KEYBOARD_ONLY;
    a968:	2002      	movs	r0, #2
    a96a:	4770      	bx	lr
	}

	if (bt_auth->passkey_display) {
    a96c:	b11a      	cbz	r2, a976 <get_io_capa+0x42>
		return BT_SMP_IO_DISPLAY_ONLY;
    a96e:	2000      	movs	r0, #0
    a970:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    a972:	2003      	movs	r0, #3
    a974:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    a976:	2003      	movs	r0, #3
}
    a978:	4770      	bx	lr
    a97a:	bf00      	nop
    a97c:	20002ab0 	.word	0x20002ab0
    a980:	20000aac 	.word	0x20000aac

0000a984 <get_pair_method>:

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    a984:	2904      	cmp	r1, #4
    a986:	d811      	bhi.n	a9ac <get_pair_method+0x28>

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a988:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    a98c:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    a990:	4313      	orrs	r3, r2
    a992:	f013 0f04 	tst.w	r3, #4
    a996:	d00b      	beq.n	a9b0 <get_pair_method+0x2c>
{
    a998:	b510      	push	{r4, lr}
    a99a:	460c      	mov	r4, r1
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
    a99c:	f7ff ffca 	bl	a934 <get_io_capa>
    a9a0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    a9a4:	4c03      	ldr	r4, [pc, #12]	; (a9b4 <get_pair_method+0x30>)
    a9a6:	4421      	add	r1, r4
    a9a8:	5c08      	ldrb	r0, [r1, r0]
    a9aa:	bd10      	pop	{r4, pc}
		return JUST_WORKS;
    a9ac:	2000      	movs	r0, #0
    a9ae:	4770      	bx	lr
		return JUST_WORKS;
    a9b0:	2000      	movs	r0, #0
    a9b2:	4770      	bx	lr
    a9b4:	000316f8 	.word	0x000316f8

0000a9b8 <get_encryption_key_size>:
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    a9b8:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    a9bc:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
}
    a9c0:	4290      	cmp	r0, r2
    a9c2:	bf28      	it	cs
    a9c4:	4610      	movcs	r0, r2
    a9c6:	4770      	bx	lr

0000a9c8 <xor_128>:
	return 0;
}

#if !defined(CONFIG_BT_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
    a9c8:	b430      	push	{r4, r5}
	size_t len = 16;
    a9ca:	2310      	movs	r3, #16

	while (len--) {
    a9cc:	e007      	b.n	a9de <xor_128+0x16>
		*r++ = *p++ ^ *q++;
    a9ce:	7803      	ldrb	r3, [r0, #0]
    a9d0:	780d      	ldrb	r5, [r1, #0]
    a9d2:	406b      	eors	r3, r5
    a9d4:	7013      	strb	r3, [r2, #0]
	while (len--) {
    a9d6:	4623      	mov	r3, r4
		*r++ = *p++ ^ *q++;
    a9d8:	3201      	adds	r2, #1
    a9da:	3101      	adds	r1, #1
    a9dc:	3001      	adds	r0, #1
	while (len--) {
    a9de:	1e5c      	subs	r4, r3, #1
    a9e0:	2b00      	cmp	r3, #0
    a9e2:	d1f4      	bne.n	a9ce <xor_128+0x6>
	}
}
    a9e4:	bc30      	pop	{r4, r5}
    a9e6:	4770      	bx	lr

0000a9e8 <legacy_get_pair_method>:
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    a9e8:	2904      	cmp	r1, #4
    a9ea:	d819      	bhi.n	aa20 <legacy_get_pair_method+0x38>
{
    a9ec:	b538      	push	{r3, r4, r5, lr}

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a9ee:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    a9f2:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    a9f6:	4313      	orrs	r3, r2
    a9f8:	f013 0f04 	tst.w	r3, #4
    a9fc:	d012      	beq.n	aa24 <legacy_get_pair_method+0x3c>
    a9fe:	460c      	mov	r4, r1
    aa00:	4605      	mov	r5, r0
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
    aa02:	f7ff ff97 	bl	a934 <get_io_capa>
    aa06:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    aa0a:	4c08      	ldr	r4, [pc, #32]	; (aa2c <legacy_get_pair_method+0x44>)
    aa0c:	4421      	add	r1, r4
    aa0e:	5c08      	ldrb	r0, [r1, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
    aa10:	2804      	cmp	r0, #4
    aa12:	d000      	beq.n	aa16 <legacy_get_pair_method+0x2e>
			method = PASSKEY_INPUT;
		}
	}

	return method;
}
    aa14:	bd38      	pop	{r3, r4, r5, pc}
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    aa16:	682b      	ldr	r3, [r5, #0]
    aa18:	78db      	ldrb	r3, [r3, #3]
    aa1a:	b92b      	cbnz	r3, aa28 <legacy_get_pair_method+0x40>
			method = PASSKEY_DISPLAY;
    aa1c:	2002      	movs	r0, #2
    aa1e:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    aa20:	2000      	movs	r0, #0
    aa22:	4770      	bx	lr
		return JUST_WORKS;
    aa24:	2000      	movs	r0, #0
    aa26:	bd38      	pop	{r3, r4, r5, pc}
			method = PASSKEY_INPUT;
    aa28:	2001      	movs	r0, #1
    aa2a:	e7f3      	b.n	aa14 <legacy_get_pair_method+0x2c>
    aa2c:	000316dc 	.word	0x000316dc

0000aa30 <get_auth>:

	return 0;
}

static u8_t get_auth(u8_t auth)
{
    aa30:	b510      	push	{r4, lr}
	if (sc_supported) {
    aa32:	4b09      	ldr	r3, [pc, #36]	; (aa58 <get_auth+0x28>)
    aa34:	781b      	ldrb	r3, [r3, #0]
    aa36:	b143      	cbz	r3, aa4a <get_auth+0x1a>
		auth &= BT_SMP_AUTH_MASK_SC;
    aa38:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    aa3c:	f7ff ff7a 	bl	a934 <get_io_capa>
    aa40:	2803      	cmp	r0, #3
    aa42:	d005      	beq.n	aa50 <get_auth+0x20>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    aa44:	f044 0004 	orr.w	r0, r4, #4
	}

	return auth;
}
    aa48:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    aa4a:	f000 0407 	and.w	r4, r0, #7
    aa4e:	e7f5      	b.n	aa3c <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
    aa50:	f004 000b 	and.w	r0, r4, #11
    aa54:	bd10      	pop	{r4, pc}
    aa56:	bf00      	nop
    aa58:	20000aac 	.word	0x20000aac

0000aa5c <sec_level_reachable>:

static bool sec_level_reachable(struct bt_conn *conn)
{
    aa5c:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    aa5e:	7a43      	ldrb	r3, [r0, #9]
    aa60:	3b01      	subs	r3, #1
    aa62:	2b03      	cmp	r3, #3
    aa64:	d818      	bhi.n	aa98 <sec_level_reachable+0x3c>
    aa66:	e8df f003 	tbb	[pc, r3]
    aa6a:	0202      	.short	0x0202
    aa6c:	0a04      	.short	0x0a04
	case BT_SECURITY_LOW:
	case BT_SECURITY_MEDIUM:
		return true;
    aa6e:	2001      	movs	r0, #1
    aa70:	bd08      	pop	{r3, pc}
	case BT_SECURITY_HIGH:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    aa72:	f7ff ff5f 	bl	a934 <get_io_capa>
    aa76:	3803      	subs	r0, #3
    aa78:	bf18      	it	ne
    aa7a:	2001      	movne	r0, #1
    aa7c:	bd08      	pop	{r3, pc}
	case BT_SECURITY_FIPS:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    aa7e:	f7ff ff59 	bl	a934 <get_io_capa>
    aa82:	2803      	cmp	r0, #3
    aa84:	d004      	beq.n	aa90 <sec_level_reachable+0x34>
    aa86:	4b05      	ldr	r3, [pc, #20]	; (aa9c <sec_level_reachable+0x40>)
    aa88:	781b      	ldrb	r3, [r3, #0]
    aa8a:	b91b      	cbnz	r3, aa94 <sec_level_reachable+0x38>
    aa8c:	2000      	movs	r0, #0
    aa8e:	bd08      	pop	{r3, pc}
    aa90:	2000      	movs	r0, #0
    aa92:	bd08      	pop	{r3, pc}
    aa94:	2001      	movs	r0, #1
    aa96:	bd08      	pop	{r3, pc}
		       sc_supported;
	default:
		return false;
    aa98:	2000      	movs	r0, #0
	}
}
    aa9a:	bd08      	pop	{r3, pc}
    aa9c:	20000aac 	.word	0x20000aac

0000aaa0 <bt_smp_accept>:
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    aaa0:	2000      	movs	r0, #0
    aaa2:	b110      	cbz	r0, aaaa <bt_smp_accept+0xa>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    aaa4:	f06f 000b 	mvn.w	r0, #11
}
    aaa8:	4770      	bx	lr
		if (smp->chan.chan.conn) {
    aaaa:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    aaae:	fb03 f300 	mul.w	r3, r3, r0
    aab2:	4a07      	ldr	r2, [pc, #28]	; (aad0 <bt_smp_accept+0x30>)
    aab4:	58d3      	ldr	r3, [r2, r3]
    aab6:	b10b      	cbz	r3, aabc <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    aab8:	3001      	adds	r0, #1
    aaba:	e7f2      	b.n	aaa2 <bt_smp_accept+0x2>
		smp->chan.chan.ops = &ops;
    aabc:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    aac0:	4a03      	ldr	r2, [pc, #12]	; (aad0 <bt_smp_accept+0x30>)
    aac2:	fb03 2300 	mla	r3, r3, r0, r2
    aac6:	4a03      	ldr	r2, [pc, #12]	; (aad4 <bt_smp_accept+0x34>)
    aac8:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
    aaca:	600b      	str	r3, [r1, #0]
		return 0;
    aacc:	4770      	bx	lr
    aace:	bf00      	nop
    aad0:	200008c4 	.word	0x200008c4
    aad4:	2000bc50 	.word	0x2000bc50

0000aad8 <le_sc_supported>:
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    aad8:	4b04      	ldr	r3, [pc, #16]	; (aaec <le_sc_supported+0x14>)
    aada:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    aade:	f000 0006 	and.w	r0, r0, #6
	       (bt_dev.supported_commands[34] & 0x04);
}
    aae2:	2806      	cmp	r0, #6
    aae4:	bf14      	ite	ne
    aae6:	2000      	movne	r0, #0
    aae8:	2001      	moveq	r0, #1
    aaea:	4770      	bx	lr
    aaec:	2000b980 	.word	0x2000b980

0000aaf0 <smp_chan_get>:
{
    aaf0:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    aaf2:	2106      	movs	r1, #6
    aaf4:	f7fd fd18 	bl	8528 <bt_l2cap_le_lookup_rx_cid>
}
    aaf8:	bd08      	pop	{r3, pc}

0000aafa <smp_create_pdu>:
{
    aafa:	b538      	push	{r3, r4, r5, lr}
    aafc:	460d      	mov	r5, r1
	buf = bt_l2cap_create_pdu(NULL, 0);
    aafe:	2100      	movs	r1, #0
    ab00:	4608      	mov	r0, r1
    ab02:	f7fd fa58 	bl	7fb6 <bt_l2cap_create_pdu>
    ab06:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    ab08:	2101      	movs	r1, #1
    ab0a:	3008      	adds	r0, #8
    ab0c:	f010 f952 	bl	1adb4 <net_buf_simple_add>
	hdr->code = op;
    ab10:	7005      	strb	r5, [r0, #0]
}
    ab12:	4620      	mov	r0, r4
    ab14:	bd38      	pop	{r3, r4, r5, pc}

0000ab16 <smp_init>:
{
    ab16:	b510      	push	{r4, lr}
    ab18:	4604      	mov	r4, r0
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    ab1a:	22e0      	movs	r2, #224	; 0xe0
    ab1c:	2100      	movs	r1, #0
    ab1e:	309c      	adds	r0, #156	; 0x9c
    ab20:	f01f fefa 	bl	2a918 <memset>
	if (bt_rand(smp->prnd, 16)) {
    ab24:	2110      	movs	r1, #16
    ab26:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    ab2a:	f006 fdcd 	bl	116c8 <bt_rand>
    ab2e:	b110      	cbz	r0, ab36 <smp_init+0x20>
		return BT_SMP_ERR_UNSPECIFIED;
    ab30:	2308      	movs	r3, #8
}
    ab32:	4618      	mov	r0, r3
    ab34:	bd10      	pop	{r4, pc}
    ab36:	4603      	mov	r3, r0
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    ab38:	349c      	adds	r4, #156	; 0x9c
    ab3a:	f3bf 8f5b 	dmb	ish
    ab3e:	e854 2f00 	ldrex	r2, [r4]
    ab42:	f042 0220 	orr.w	r2, r2, #32
    ab46:	e844 2100 	strex	r1, r2, [r4]
    ab4a:	2900      	cmp	r1, #0
    ab4c:	d1f7      	bne.n	ab3e <smp_init+0x28>
    ab4e:	f3bf 8f5b 	dmb	ish
	return 0;
    ab52:	e7ee      	b.n	ab32 <smp_init+0x1c>

0000ab54 <display_passkey>:
{
    ab54:	b538      	push	{r3, r4, r5, lr}
    ab56:	4604      	mov	r4, r0
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    ab58:	2104      	movs	r1, #4
    ab5a:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    ab5e:	f006 fdb3 	bl	116c8 <bt_rand>
    ab62:	b108      	cbz	r0, ab68 <display_passkey+0x14>
		return BT_SMP_ERR_UNSPECIFIED;
    ab64:	2008      	movs	r0, #8
}
    ab66:	bd38      	pop	{r3, r4, r5, pc}
	smp->passkey %= 1000000;
    ab68:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
    ab6c:	4909      	ldr	r1, [pc, #36]	; (ab94 <display_passkey+0x40>)
    ab6e:	fba1 2103 	umull	r2, r1, r1, r3
    ab72:	0c89      	lsrs	r1, r1, #18
    ab74:	4a08      	ldr	r2, [pc, #32]	; (ab98 <display_passkey+0x44>)
    ab76:	fb02 3111 	mls	r1, r2, r1, r3
    ab7a:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
	smp->passkey_round = 0;
    ab7e:	2500      	movs	r5, #0
    ab80:	f884 5178 	strb.w	r5, [r4, #376]	; 0x178
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    ab84:	4b05      	ldr	r3, [pc, #20]	; (ab9c <display_passkey+0x48>)
    ab86:	681b      	ldr	r3, [r3, #0]
    ab88:	681b      	ldr	r3, [r3, #0]
    ab8a:	6820      	ldr	r0, [r4, #0]
    ab8c:	4798      	blx	r3
	return 0;
    ab8e:	4628      	mov	r0, r5
    ab90:	bd38      	pop	{r3, r4, r5, pc}
    ab92:	bf00      	nop
    ab94:	431bde83 	.word	0x431bde83
    ab98:	000f4240 	.word	0x000f4240
    ab9c:	20002ab0 	.word	0x20002ab0

0000aba0 <smp_send>:
{
    aba0:	b510      	push	{r4, lr}
    aba2:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    aba4:	4613      	mov	r3, r2
    aba6:	460a      	mov	r2, r1
    aba8:	2106      	movs	r1, #6
    abaa:	6800      	ldr	r0, [r0, #0]
    abac:	f7fd fa9b 	bl	80e6 <bt_l2cap_send_cb>
    abb0:	f247 5230 	movw	r2, #30000	; 0x7530
    abb4:	f504 71be 	add.w	r1, r4, #380	; 0x17c
    abb8:	4801      	ldr	r0, [pc, #4]	; (abc0 <smp_send+0x20>)
    abba:	f01f fa43 	bl	2a044 <k_delayed_work_submit_to_queue>
    abbe:	bd10      	pop	{r4, pc}
    abc0:	20002c78 	.word	0x20002c78

0000abc4 <sc_smp_send_dhkey_check>:
{
    abc4:	b570      	push	{r4, r5, r6, lr}
    abc6:	4604      	mov	r4, r0
    abc8:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    abca:	2210      	movs	r2, #16
    abcc:	210d      	movs	r1, #13
    abce:	6800      	ldr	r0, [r0, #0]
    abd0:	f7ff ff93 	bl	aafa <smp_create_pdu>
	if (!buf) {
    abd4:	b178      	cbz	r0, abf6 <sc_smp_send_dhkey_check+0x32>
    abd6:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    abd8:	2110      	movs	r1, #16
    abda:	3008      	adds	r0, #8
    abdc:	f010 f8ea 	bl	1adb4 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    abe0:	2210      	movs	r2, #16
    abe2:	4631      	mov	r1, r6
    abe4:	f7f5 fb6c 	bl	2c0 <memcpy>
	smp_send(smp, buf, NULL);
    abe8:	2200      	movs	r2, #0
    abea:	4629      	mov	r1, r5
    abec:	4620      	mov	r0, r4
    abee:	f7ff ffd7 	bl	aba0 <smp_send>
	return 0;
    abf2:	2000      	movs	r0, #0
    abf4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    abf6:	2008      	movs	r0, #8
}
    abf8:	bd70      	pop	{r4, r5, r6, pc}
	...

0000abfc <sc_send_public_key>:
{
    abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abfe:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    ac00:	2240      	movs	r2, #64	; 0x40
    ac02:	210c      	movs	r1, #12
    ac04:	6800      	ldr	r0, [r0, #0]
    ac06:	f7ff ff78 	bl	aafa <smp_create_pdu>
	if (!req_buf) {
    ac0a:	b1b0      	cbz	r0, ac3a <sc_send_public_key+0x3e>
    ac0c:	4605      	mov	r5, r0
	req = net_buf_add(req_buf, sizeof(*req));
    ac0e:	2140      	movs	r1, #64	; 0x40
    ac10:	3008      	adds	r0, #8
    ac12:	f010 f8cf 	bl	1adb4 <net_buf_simple_add>
    ac16:	4607      	mov	r7, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    ac18:	4e09      	ldr	r6, [pc, #36]	; (ac40 <sc_send_public_key+0x44>)
    ac1a:	2220      	movs	r2, #32
    ac1c:	4631      	mov	r1, r6
    ac1e:	f7f5 fb4f 	bl	2c0 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    ac22:	2220      	movs	r2, #32
    ac24:	18b1      	adds	r1, r6, r2
    ac26:	18b8      	adds	r0, r7, r2
    ac28:	f7f5 fb4a 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    ac2c:	2200      	movs	r2, #0
    ac2e:	4629      	mov	r1, r5
    ac30:	4620      	mov	r0, r4
    ac32:	f7ff ffb5 	bl	aba0 <smp_send>
	return 0;
    ac36:	2000      	movs	r0, #0
    ac38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ac3a:	2008      	movs	r0, #8
}
    ac3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac3e:	bf00      	nop
    ac40:	20000a6c 	.word	0x20000a6c

0000ac44 <send_pairing_rsp>:
{
    ac44:	b538      	push	{r3, r4, r5, lr}
    ac46:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    ac48:	2206      	movs	r2, #6
    ac4a:	2102      	movs	r1, #2
    ac4c:	6800      	ldr	r0, [r0, #0]
    ac4e:	f7ff ff54 	bl	aafa <smp_create_pdu>
	if (!rsp_buf) {
    ac52:	b180      	cbz	r0, ac76 <send_pairing_rsp+0x32>
    ac54:	4605      	mov	r5, r0
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    ac56:	2106      	movs	r1, #6
    ac58:	3008      	adds	r0, #8
    ac5a:	f010 f8ab 	bl	1adb4 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    ac5e:	2206      	movs	r2, #6
    ac60:	f104 01ad 	add.w	r1, r4, #173	; 0xad
    ac64:	f7f5 fb2c 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    ac68:	2200      	movs	r2, #0
    ac6a:	4629      	mov	r1, r5
    ac6c:	4620      	mov	r0, r4
    ac6e:	f7ff ff97 	bl	aba0 <smp_send>
	return 0;
    ac72:	2000      	movs	r0, #0
    ac74:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ac76:	2008      	movs	r0, #8
}
    ac78:	bd38      	pop	{r3, r4, r5, pc}

0000ac7a <smp_send_pairing_random>:
{
    ac7a:	b538      	push	{r3, r4, r5, lr}
    ac7c:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    ac7e:	2210      	movs	r2, #16
    ac80:	2104      	movs	r1, #4
    ac82:	6800      	ldr	r0, [r0, #0]
    ac84:	f7ff ff39 	bl	aafa <smp_create_pdu>
	if (!rsp_buf) {
    ac88:	b180      	cbz	r0, acac <smp_send_pairing_random+0x32>
    ac8a:	4605      	mov	r5, r0
	req = net_buf_add(rsp_buf, sizeof(*req));
    ac8c:	2110      	movs	r1, #16
    ac8e:	3008      	adds	r0, #8
    ac90:	f010 f890 	bl	1adb4 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    ac94:	2210      	movs	r2, #16
    ac96:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    ac9a:	f7f5 fb11 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    ac9e:	2200      	movs	r2, #0
    aca0:	4629      	mov	r1, r5
    aca2:	4620      	mov	r0, r4
    aca4:	f7ff ff7c 	bl	aba0 <smp_send>
	return 0;
    aca8:	2000      	movs	r0, #0
    acaa:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    acac:	2008      	movs	r0, #8
}
    acae:	bd38      	pop	{r3, r4, r5, pc}

0000acb0 <bt_smp_aes_cmac>:
{
    acb0:	b570      	push	{r4, r5, r6, lr}
    acb2:	b0c2      	sub	sp, #264	; 0x108
    acb4:	460c      	mov	r4, r1
    acb6:	4615      	mov	r5, r2
    acb8:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    acba:	aa16      	add	r2, sp, #88	; 0x58
    acbc:	4601      	mov	r1, r0
    acbe:	4668      	mov	r0, sp
    acc0:	f7f8 fdcb 	bl	385a <tc_cmac_setup>
    acc4:	b180      	cbz	r0, ace8 <bt_smp_aes_cmac+0x38>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    acc6:	462a      	mov	r2, r5
    acc8:	4621      	mov	r1, r4
    acca:	4668      	mov	r0, sp
    accc:	f7f8 fdf2 	bl	38b4 <tc_cmac_update>
    acd0:	b168      	cbz	r0, acee <bt_smp_aes_cmac+0x3e>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    acd2:	4669      	mov	r1, sp
    acd4:	4630      	mov	r0, r6
    acd6:	f7f8 fe57 	bl	3988 <tc_cmac_final>
    acda:	b110      	cbz	r0, ace2 <bt_smp_aes_cmac+0x32>
	return 0;
    acdc:	2000      	movs	r0, #0
}
    acde:	b042      	add	sp, #264	; 0x108
    ace0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    ace2:	f06f 0004 	mvn.w	r0, #4
    ace6:	e7fa      	b.n	acde <bt_smp_aes_cmac+0x2e>
		return -EIO;
    ace8:	f06f 0004 	mvn.w	r0, #4
    acec:	e7f7      	b.n	acde <bt_smp_aes_cmac+0x2e>
		return -EIO;
    acee:	f06f 0004 	mvn.w	r0, #4
    acf2:	e7f4      	b.n	acde <bt_smp_aes_cmac+0x2e>

0000acf4 <smp_sign_buf>:
{
    acf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    acf8:	b08b      	sub	sp, #44	; 0x2c
    acfa:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    acfc:	188f      	adds	r7, r1, r2
    acfe:	683b      	ldr	r3, [r7, #0]
    ad00:	9309      	str	r3, [sp, #36]	; 0x24
	sys_mem_swap(m, len + sizeof(cnt));
    ad02:	1d16      	adds	r6, r2, #4
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    ad04:	2300      	movs	r3, #0
    ad06:	e006      	b.n	ad16 <smp_sign_buf+0x22>
		u8_t tmp = ((u8_t *)buf)[i];
    ad08:	5cea      	ldrb	r2, [r5, r3]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ad0a:	1af1      	subs	r1, r6, r3
    ad0c:	3901      	subs	r1, #1
    ad0e:	5c6c      	ldrb	r4, [r5, r1]
    ad10:	54ec      	strb	r4, [r5, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    ad12:	546a      	strb	r2, [r5, r1]
	for (i = 0; i < (length/2); i++) {
    ad14:	3301      	adds	r3, #1
    ad16:	ea4f 0856 	mov.w	r8, r6, lsr #1
    ad1a:	4543      	cmp	r3, r8
    ad1c:	d3f4      	bcc.n	ad08 <smp_sign_buf+0x14>
	src += length - 1;
    ad1e:	300f      	adds	r0, #15
    ad20:	2410      	movs	r4, #16
    ad22:	ab05      	add	r3, sp, #20
    ad24:	e004      	b.n	ad30 <smp_sign_buf+0x3c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad26:	7802      	ldrb	r2, [r0, #0]
    ad28:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    ad2a:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad2c:	3801      	subs	r0, #1
    ad2e:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    ad30:	2c00      	cmp	r4, #0
    ad32:	d1f8      	bne.n	ad26 <smp_sign_buf+0x32>
	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    ad34:	ab01      	add	r3, sp, #4
    ad36:	4632      	mov	r2, r6
    ad38:	4629      	mov	r1, r5
    ad3a:	a805      	add	r0, sp, #20
    ad3c:	f7ff ffb8 	bl	acb0 <bt_smp_aes_cmac>
	if (err) {
    ad40:	4681      	mov	r9, r0
    ad42:	bb08      	cbnz	r0, ad88 <smp_sign_buf+0x94>
    ad44:	4623      	mov	r3, r4
    ad46:	e009      	b.n	ad5c <smp_sign_buf+0x68>
		u8_t tmp = ((u8_t *)buf)[i];
    ad48:	aa01      	add	r2, sp, #4
    ad4a:	5cd0      	ldrb	r0, [r2, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ad4c:	f1c3 010f 	rsb	r1, r3, #15
    ad50:	f812 e001 	ldrb.w	lr, [r2, r1]
    ad54:	f802 e003 	strb.w	lr, [r2, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    ad58:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
    ad5a:	3301      	adds	r3, #1
    ad5c:	2b07      	cmp	r3, #7
    ad5e:	d9f3      	bls.n	ad48 <smp_sign_buf+0x54>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    ad60:	2204      	movs	r2, #4
    ad62:	a909      	add	r1, sp, #36	; 0x24
    ad64:	a802      	add	r0, sp, #8
    ad66:	f7f5 faab 	bl	2c0 <memcpy>
    ad6a:	e006      	b.n	ad7a <smp_sign_buf+0x86>
		u8_t tmp = ((u8_t *)buf)[i];
    ad6c:	5d2a      	ldrb	r2, [r5, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ad6e:	1b33      	subs	r3, r6, r4
    ad70:	3b01      	subs	r3, #1
    ad72:	5ce9      	ldrb	r1, [r5, r3]
    ad74:	5529      	strb	r1, [r5, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    ad76:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
    ad78:	3401      	adds	r4, #1
    ad7a:	45a0      	cmp	r8, r4
    ad7c:	d8f6      	bhi.n	ad6c <smp_sign_buf+0x78>
	memcpy(sig, tmp + 4, 12);
    ad7e:	220c      	movs	r2, #12
    ad80:	a902      	add	r1, sp, #8
    ad82:	4638      	mov	r0, r7
    ad84:	f7f5 fa9c 	bl	2c0 <memcpy>
}
    ad88:	4648      	mov	r0, r9
    ad8a:	b00b      	add	sp, #44	; 0x2c
    ad8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000ad90 <smp_f4>:
{
    ad90:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad92:	b097      	sub	sp, #92	; 0x5c
    ad94:	9e1c      	ldr	r6, [sp, #112]	; 0x70
	src += length - 1;
    ad96:	301f      	adds	r0, #31
    ad98:	2420      	movs	r4, #32
    ad9a:	ad01      	add	r5, sp, #4
    ad9c:	e004      	b.n	ada8 <smp_f4+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad9e:	7807      	ldrb	r7, [r0, #0]
    ada0:	702f      	strb	r7, [r5, #0]
	for (; length > 0; length--) {
    ada2:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ada4:	3801      	subs	r0, #1
    ada6:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    ada8:	2c00      	cmp	r4, #0
    adaa:	d1f8      	bne.n	ad9e <smp_f4+0xe>
	src += length - 1;
    adac:	311f      	adds	r1, #31
    adae:	2020      	movs	r0, #32
    adb0:	ac09      	add	r4, sp, #36	; 0x24
    adb2:	e004      	b.n	adbe <smp_f4+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    adb4:	780d      	ldrb	r5, [r1, #0]
    adb6:	7025      	strb	r5, [r4, #0]
	for (; length > 0; length--) {
    adb8:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    adba:	3901      	subs	r1, #1
    adbc:	3401      	adds	r4, #1
	for (; length > 0; length--) {
    adbe:	2800      	cmp	r0, #0
    adc0:	d1f8      	bne.n	adb4 <smp_f4+0x24>
	m[64] = z;
    adc2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	src += length - 1;
    adc6:	320f      	adds	r2, #15
    adc8:	2410      	movs	r4, #16
    adca:	ab12      	add	r3, sp, #72	; 0x48
    adcc:	e004      	b.n	add8 <smp_f4+0x48>
		*((u8_t *)dst++) = *((u8_t *)src--);
    adce:	7811      	ldrb	r1, [r2, #0]
    add0:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
    add2:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    add4:	3a01      	subs	r2, #1
    add6:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    add8:	2c00      	cmp	r4, #0
    adda:	d1f8      	bne.n	adce <smp_f4+0x3e>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    addc:	4633      	mov	r3, r6
    adde:	2241      	movs	r2, #65	; 0x41
    ade0:	a901      	add	r1, sp, #4
    ade2:	a812      	add	r0, sp, #72	; 0x48
    ade4:	f7ff ff64 	bl	acb0 <bt_smp_aes_cmac>
	if (err) {
    ade8:	4605      	mov	r5, r0
    adea:	b138      	cbz	r0, adfc <smp_f4+0x6c>
    adec:	e008      	b.n	ae00 <smp_f4+0x70>
		u8_t tmp = ((u8_t *)buf)[i];
    adee:	5d32      	ldrb	r2, [r6, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    adf0:	f1c4 030f 	rsb	r3, r4, #15
    adf4:	5cf1      	ldrb	r1, [r6, r3]
    adf6:	5531      	strb	r1, [r6, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    adf8:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < (length/2); i++) {
    adfa:	3401      	adds	r4, #1
    adfc:	2c07      	cmp	r4, #7
    adfe:	d9f6      	bls.n	adee <smp_f4+0x5e>
}
    ae00:	4628      	mov	r0, r5
    ae02:	b017      	add	sp, #92	; 0x5c
    ae04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000ae08 <sc_smp_check_confirm>:
	switch (smp->method) {
    ae08:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    ae0c:	2b03      	cmp	r3, #3
    ae0e:	d827      	bhi.n	ae60 <sc_smp_check_confirm+0x58>
    ae10:	e8df f003 	tbb	[pc, r3]
    ae14:	0d02020d 	.word	0x0d02020d
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    ae18:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
    ae1c:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
    ae20:	40d3      	lsrs	r3, r2
    ae22:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    ae26:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ae2a:	b2db      	uxtb	r3, r3
		break;
    ae2c:	e000      	b.n	ae30 <sc_smp_check_confirm+0x28>
		r = 0;
    ae2e:	2300      	movs	r3, #0
{
    ae30:	b510      	push	{r4, lr}
    ae32:	b086      	sub	sp, #24
    ae34:	4604      	mov	r4, r0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    ae36:	aa02      	add	r2, sp, #8
    ae38:	9200      	str	r2, [sp, #0]
    ae3a:	f100 02d3 	add.w	r2, r0, #211	; 0xd3
    ae3e:	490a      	ldr	r1, [pc, #40]	; (ae68 <sc_smp_check_confirm+0x60>)
    ae40:	30f3      	adds	r0, #243	; 0xf3
    ae42:	f7ff ffa5 	bl	ad90 <smp_f4>
    ae46:	b110      	cbz	r0, ae4e <sc_smp_check_confirm+0x46>
		return BT_SMP_ERR_UNSPECIFIED;
    ae48:	2008      	movs	r0, #8
}
    ae4a:	b006      	add	sp, #24
    ae4c:	bd10      	pop	{r4, pc}
	if (memcmp(smp->pcnf, cfm, 16)) {
    ae4e:	2210      	movs	r2, #16
    ae50:	a902      	add	r1, sp, #8
    ae52:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    ae56:	f01f fccb 	bl	2a7f0 <memcmp>
    ae5a:	b118      	cbz	r0, ae64 <sc_smp_check_confirm+0x5c>
		return BT_SMP_ERR_CONFIRM_FAILED;
    ae5c:	2004      	movs	r0, #4
    ae5e:	e7f4      	b.n	ae4a <sc_smp_check_confirm+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    ae60:	2008      	movs	r0, #8
    ae62:	4770      	bx	lr
	return 0;
    ae64:	2000      	movs	r0, #0
    ae66:	e7f0      	b.n	ae4a <sc_smp_check_confirm+0x42>
    ae68:	20000a6c 	.word	0x20000a6c

0000ae6c <smp_f5>:
{
    ae6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ae70:	b09b      	sub	sp, #108	; 0x6c
    ae72:	4604      	mov	r4, r0
    ae74:	460e      	mov	r6, r1
    ae76:	4615      	mov	r5, r2
    ae78:	461f      	mov	r7, r3
    ae7a:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    ae7e:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	u8_t m[53] = { 0x00, /* counter */
    ae82:	2235      	movs	r2, #53	; 0x35
    ae84:	2100      	movs	r1, #0
    ae86:	a80c      	add	r0, sp, #48	; 0x30
    ae88:	f01f fd46 	bl	2a918 <memset>
    ae8c:	2362      	movs	r3, #98	; 0x62
    ae8e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    ae92:	2374      	movs	r3, #116	; 0x74
    ae94:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    ae98:	236c      	movs	r3, #108	; 0x6c
    ae9a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    ae9e:	2365      	movs	r3, #101	; 0x65
    aea0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    aea4:	2301      	movs	r3, #1
    aea6:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
	src += length - 1;
    aeaa:	f104 001f 	add.w	r0, r4, #31
    aeae:	2320      	movs	r3, #32
    aeb0:	466a      	mov	r2, sp
    aeb2:	e004      	b.n	aebe <smp_f5+0x52>
		*((u8_t *)dst++) = *((u8_t *)src--);
    aeb4:	7801      	ldrb	r1, [r0, #0]
    aeb6:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    aeb8:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    aeba:	3801      	subs	r0, #1
    aebc:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    aebe:	2b00      	cmp	r3, #0
    aec0:	d1f8      	bne.n	aeb4 <smp_f5+0x48>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    aec2:	ab08      	add	r3, sp, #32
    aec4:	2220      	movs	r2, #32
    aec6:	4669      	mov	r1, sp
    aec8:	4838      	ldr	r0, [pc, #224]	; (afac <smp_f5+0x140>)
    aeca:	f7ff fef1 	bl	acb0 <bt_smp_aes_cmac>
	if (err) {
    aece:	4686      	mov	lr, r0
    aed0:	2800      	cmp	r0, #0
    aed2:	d166      	bne.n	afa2 <smp_f5+0x136>
	src += length - 1;
    aed4:	360f      	adds	r6, #15
    aed6:	2310      	movs	r3, #16
    aed8:	f10d 0235 	add.w	r2, sp, #53	; 0x35
    aedc:	e004      	b.n	aee8 <smp_f5+0x7c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    aede:	7831      	ldrb	r1, [r6, #0]
    aee0:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    aee2:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    aee4:	3e01      	subs	r6, #1
    aee6:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    aee8:	2b00      	cmp	r3, #0
    aeea:	d1f8      	bne.n	aede <smp_f5+0x72>
	src += length - 1;
    aeec:	350f      	adds	r5, #15
    aeee:	2310      	movs	r3, #16
    aef0:	f10d 0245 	add.w	r2, sp, #69	; 0x45
    aef4:	e004      	b.n	af00 <smp_f5+0x94>
		*((u8_t *)dst++) = *((u8_t *)src--);
    aef6:	7829      	ldrb	r1, [r5, #0]
    aef8:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    aefa:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    aefc:	3d01      	subs	r5, #1
    aefe:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    af00:	2b00      	cmp	r3, #0
    af02:	d1f8      	bne.n	aef6 <smp_f5+0x8a>
	m[37] = a1->type;
    af04:	f817 3b06 	ldrb.w	r3, [r7], #6
    af08:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	src += length - 1;
    af0c:	2306      	movs	r3, #6
    af0e:	f10d 0256 	add.w	r2, sp, #86	; 0x56
    af12:	e004      	b.n	af1e <smp_f5+0xb2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    af14:	7839      	ldrb	r1, [r7, #0]
    af16:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    af18:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    af1a:	3f01      	subs	r7, #1
    af1c:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    af1e:	2b00      	cmp	r3, #0
    af20:	d1f8      	bne.n	af14 <smp_f5+0xa8>
	m[44] = a2->type;
    af22:	9b22      	ldr	r3, [sp, #136]	; 0x88
    af24:	f813 2b06 	ldrb.w	r2, [r3], #6
    af28:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
	src += length - 1;
    af2c:	2406      	movs	r4, #6
    af2e:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
    af32:	e004      	b.n	af3e <smp_f5+0xd2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    af34:	7819      	ldrb	r1, [r3, #0]
    af36:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    af38:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    af3a:	3b01      	subs	r3, #1
    af3c:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    af3e:	2c00      	cmp	r4, #0
    af40:	d1f8      	bne.n	af34 <smp_f5+0xc8>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    af42:	4643      	mov	r3, r8
    af44:	2235      	movs	r2, #53	; 0x35
    af46:	a90c      	add	r1, sp, #48	; 0x30
    af48:	a808      	add	r0, sp, #32
    af4a:	f7ff feb1 	bl	acb0 <bt_smp_aes_cmac>
	if (err) {
    af4e:	4686      	mov	lr, r0
    af50:	bb38      	cbnz	r0, afa2 <smp_f5+0x136>
    af52:	4623      	mov	r3, r4
    af54:	e00a      	b.n	af6c <smp_f5+0x100>
		u8_t tmp = ((u8_t *)buf)[i];
    af56:	f818 1003 	ldrb.w	r1, [r8, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    af5a:	f1c3 020f 	rsb	r2, r3, #15
    af5e:	f818 0002 	ldrb.w	r0, [r8, r2]
    af62:	f808 0003 	strb.w	r0, [r8, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    af66:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
    af6a:	3301      	adds	r3, #1
    af6c:	2b07      	cmp	r3, #7
    af6e:	d9f2      	bls.n	af56 <smp_f5+0xea>
	m[0] = 0x01;
    af70:	a91a      	add	r1, sp, #104	; 0x68
    af72:	2301      	movs	r3, #1
    af74:	f801 3d38 	strb.w	r3, [r1, #-56]!
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    af78:	464b      	mov	r3, r9
    af7a:	2235      	movs	r2, #53	; 0x35
    af7c:	a808      	add	r0, sp, #32
    af7e:	f7ff fe97 	bl	acb0 <bt_smp_aes_cmac>
	if (err) {
    af82:	4686      	mov	lr, r0
    af84:	b158      	cbz	r0, af9e <smp_f5+0x132>
    af86:	e00c      	b.n	afa2 <smp_f5+0x136>
		u8_t tmp = ((u8_t *)buf)[i];
    af88:	f819 2004 	ldrb.w	r2, [r9, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    af8c:	f1c4 030f 	rsb	r3, r4, #15
    af90:	f819 1003 	ldrb.w	r1, [r9, r3]
    af94:	f809 1004 	strb.w	r1, [r9, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    af98:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
    af9c:	3401      	adds	r4, #1
    af9e:	2c07      	cmp	r4, #7
    afa0:	d9f2      	bls.n	af88 <smp_f5+0x11c>
}
    afa2:	4670      	mov	r0, lr
    afa4:	b01b      	add	sp, #108	; 0x6c
    afa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    afaa:	bf00      	nop
    afac:	00031714 	.word	0x00031714

0000afb0 <smp_f6>:
{
    afb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    afb2:	b097      	sub	sp, #92	; 0x5c
    afb4:	4604      	mov	r4, r0
    afb6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    afb8:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    afba:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	src += length - 1;
    afbc:	310f      	adds	r1, #15
    afbe:	2010      	movs	r0, #16
    afc0:	f10d 0e04 	add.w	lr, sp, #4
    afc4:	e007      	b.n	afd6 <smp_f6+0x26>
		*((u8_t *)dst++) = *((u8_t *)src--);
    afc6:	f891 c000 	ldrb.w	ip, [r1]
    afca:	f88e c000 	strb.w	ip, [lr]
	for (; length > 0; length--) {
    afce:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    afd0:	3901      	subs	r1, #1
    afd2:	f10e 0e01 	add.w	lr, lr, #1
	for (; length > 0; length--) {
    afd6:	2800      	cmp	r0, #0
    afd8:	d1f5      	bne.n	afc6 <smp_f6+0x16>
	src += length - 1;
    afda:	320f      	adds	r2, #15
    afdc:	2110      	movs	r1, #16
    afde:	a805      	add	r0, sp, #20
    afe0:	e006      	b.n	aff0 <smp_f6+0x40>
		*((u8_t *)dst++) = *((u8_t *)src--);
    afe2:	f892 e000 	ldrb.w	lr, [r2]
    afe6:	f880 e000 	strb.w	lr, [r0]
	for (; length > 0; length--) {
    afea:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    afec:	3a01      	subs	r2, #1
    afee:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    aff0:	2900      	cmp	r1, #0
    aff2:	d1f6      	bne.n	afe2 <smp_f6+0x32>
	src += length - 1;
    aff4:	330f      	adds	r3, #15
    aff6:	2210      	movs	r2, #16
    aff8:	a909      	add	r1, sp, #36	; 0x24
    affa:	e004      	b.n	b006 <smp_f6+0x56>
		*((u8_t *)dst++) = *((u8_t *)src--);
    affc:	7818      	ldrb	r0, [r3, #0]
    affe:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    b000:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b002:	3b01      	subs	r3, #1
    b004:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    b006:	2a00      	cmp	r2, #0
    b008:	d1f8      	bne.n	affc <smp_f6+0x4c>
	src += length - 1;
    b00a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b00c:	3302      	adds	r3, #2
    b00e:	2203      	movs	r2, #3
    b010:	a90d      	add	r1, sp, #52	; 0x34
    b012:	e004      	b.n	b01e <smp_f6+0x6e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b014:	7818      	ldrb	r0, [r3, #0]
    b016:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    b018:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b01a:	3b01      	subs	r3, #1
    b01c:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    b01e:	2a00      	cmp	r2, #0
    b020:	d1f8      	bne.n	b014 <smp_f6+0x64>
	m[51] = a1->type;
    b022:	4631      	mov	r1, r6
    b024:	f811 3b01 	ldrb.w	r3, [r1], #1
    b028:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
    b02c:	2206      	movs	r2, #6
    b02e:	a80e      	add	r0, sp, #56	; 0x38
    b030:	f7f5 f946 	bl	2c0 <memcpy>
	src += length - 1;
    b034:	3606      	adds	r6, #6
    b036:	2306      	movs	r3, #6
    b038:	aa0e      	add	r2, sp, #56	; 0x38
    b03a:	e004      	b.n	b046 <smp_f6+0x96>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b03c:	7831      	ldrb	r1, [r6, #0]
    b03e:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    b040:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b042:	3e01      	subs	r6, #1
    b044:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    b046:	2b00      	cmp	r3, #0
    b048:	d1f8      	bne.n	b03c <smp_f6+0x8c>
	m[58] = a2->type;
    b04a:	4629      	mov	r1, r5
    b04c:	f811 3b01 	ldrb.w	r3, [r1], #1
    b050:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
    b054:	2206      	movs	r2, #6
    b056:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
    b05a:	f7f5 f931 	bl	2c0 <memcpy>
	src += length - 1;
    b05e:	3506      	adds	r5, #6
    b060:	2306      	movs	r3, #6
    b062:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
    b066:	e004      	b.n	b072 <smp_f6+0xc2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b068:	7829      	ldrb	r1, [r5, #0]
    b06a:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    b06c:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b06e:	3d01      	subs	r5, #1
    b070:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    b072:	2b00      	cmp	r3, #0
    b074:	d1f8      	bne.n	b068 <smp_f6+0xb8>
	src += length - 1;
    b076:	f104 000f 	add.w	r0, r4, #15
    b07a:	2410      	movs	r4, #16
    b07c:	ab12      	add	r3, sp, #72	; 0x48
    b07e:	e004      	b.n	b08a <smp_f6+0xda>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b080:	7802      	ldrb	r2, [r0, #0]
    b082:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    b084:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b086:	3801      	subs	r0, #1
    b088:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    b08a:	2c00      	cmp	r4, #0
    b08c:	d1f8      	bne.n	b080 <smp_f6+0xd0>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    b08e:	463b      	mov	r3, r7
    b090:	2241      	movs	r2, #65	; 0x41
    b092:	a901      	add	r1, sp, #4
    b094:	a812      	add	r0, sp, #72	; 0x48
    b096:	f7ff fe0b 	bl	acb0 <bt_smp_aes_cmac>
	if (err) {
    b09a:	4605      	mov	r5, r0
    b09c:	b138      	cbz	r0, b0ae <smp_f6+0xfe>
    b09e:	e008      	b.n	b0b2 <smp_f6+0x102>
		u8_t tmp = ((u8_t *)buf)[i];
    b0a0:	5d3a      	ldrb	r2, [r7, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    b0a2:	f1c4 030f 	rsb	r3, r4, #15
    b0a6:	5cf9      	ldrb	r1, [r7, r3]
    b0a8:	5539      	strb	r1, [r7, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    b0aa:	54fa      	strb	r2, [r7, r3]
	for (i = 0; i < (length/2); i++) {
    b0ac:	3401      	adds	r4, #1
    b0ae:	2c07      	cmp	r4, #7
    b0b0:	d9f6      	bls.n	b0a0 <smp_f6+0xf0>
}
    b0b2:	4628      	mov	r0, r5
    b0b4:	b017      	add	sp, #92	; 0x5c
    b0b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b0b8 <compute_and_send_master_dhcheck>:
{
    b0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b0ba:	b08d      	sub	sp, #52	; 0x34
    b0bc:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    b0be:	2210      	movs	r2, #16
    b0c0:	2100      	movs	r1, #0
    b0c2:	eb0d 0002 	add.w	r0, sp, r2
    b0c6:	f01f fc27 	bl	2a918 <memset>
	switch (smp->method) {
    b0ca:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b0ce:	2b03      	cmp	r3, #3
    b0d0:	d84a      	bhi.n	b168 <compute_and_send_master_dhcheck+0xb0>
    b0d2:	e8df f003 	tbb	[pc, r3]
    b0d6:	0208      	.short	0x0208
    b0d8:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b0da:	2204      	movs	r2, #4
    b0dc:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    b0e0:	a804      	add	r0, sp, #16
    b0e2:	f7f5 f8ed 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    b0e6:	f104 06c3 	add.w	r6, r4, #195	; 0xc3
    b0ea:	f104 07d3 	add.w	r7, r4, #211	; 0xd3
		   &smp->chan.chan.conn->le.init_addr,
    b0ee:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    b0f0:	f103 0256 	add.w	r2, r3, #86	; 0x56
    b0f4:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    b0f8:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    b0fc:	9102      	str	r1, [sp, #8]
    b0fe:	9501      	str	r5, [sp, #4]
    b100:	9200      	str	r2, [sp, #0]
    b102:	334f      	adds	r3, #79	; 0x4f
    b104:	463a      	mov	r2, r7
    b106:	4631      	mov	r1, r6
    b108:	f204 1033 	addw	r0, r4, #307	; 0x133
    b10c:	f7ff feae 	bl	ae6c <smp_f5>
    b110:	b110      	cbz	r0, b118 <compute_and_send_master_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    b112:	2008      	movs	r0, #8
}
    b114:	b00d      	add	sp, #52	; 0x34
    b116:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    b118:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    b11c:	6823      	ldr	r3, [r4, #0]
    b11e:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    b122:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    b124:	a808      	add	r0, sp, #32
    b126:	9003      	str	r0, [sp, #12]
    b128:	9302      	str	r3, [sp, #8]
    b12a:	9101      	str	r1, [sp, #4]
    b12c:	9200      	str	r2, [sp, #0]
    b12e:	ab04      	add	r3, sp, #16
    b130:	463a      	mov	r2, r7
    b132:	4631      	mov	r1, r6
    b134:	4628      	mov	r0, r5
    b136:	f7ff ff3b 	bl	afb0 <smp_f6>
    b13a:	b108      	cbz	r0, b140 <compute_and_send_master_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    b13c:	2008      	movs	r0, #8
    b13e:	e7e9      	b.n	b114 <compute_and_send_master_dhcheck+0x5c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    b140:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b144:	f3bf 8f5b 	dmb	ish
    b148:	e853 2f00 	ldrex	r2, [r3]
    b14c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    b150:	e843 2100 	strex	r1, r2, [r3]
    b154:	2900      	cmp	r1, #0
    b156:	d1f7      	bne.n	b148 <compute_and_send_master_dhcheck+0x90>
    b158:	f3bf 8f5b 	dmb	ish
	sc_smp_send_dhkey_check(smp, e);
    b15c:	a908      	add	r1, sp, #32
    b15e:	4620      	mov	r0, r4
    b160:	f7ff fd30 	bl	abc4 <sc_smp_send_dhkey_check>
	return 0;
    b164:	2000      	movs	r0, #0
    b166:	e7d5      	b.n	b114 <compute_and_send_master_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    b168:	2008      	movs	r0, #8
    b16a:	e7d3      	b.n	b114 <compute_and_send_master_dhcheck+0x5c>

0000b16c <compute_and_check_and_send_slave_dhcheck>:
{
    b16c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b16e:	b091      	sub	sp, #68	; 0x44
    b170:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    b172:	2210      	movs	r2, #16
    b174:	2100      	movs	r1, #0
    b176:	eb0d 0002 	add.w	r0, sp, r2
    b17a:	f01f fbcd 	bl	2a918 <memset>
	switch (smp->method) {
    b17e:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b182:	2b03      	cmp	r3, #3
    b184:	d866      	bhi.n	b254 <compute_and_check_and_send_slave_dhcheck+0xe8>
    b186:	e8df f003 	tbb	[pc, r3]
    b18a:	0208      	.short	0x0208
    b18c:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b18e:	2204      	movs	r2, #4
    b190:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    b194:	a804      	add	r0, sp, #16
    b196:	f7f5 f893 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b19a:	f104 06d3 	add.w	r6, r4, #211	; 0xd3
    b19e:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
		   &smp->chan.chan.conn->le.init_addr,
    b1a2:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    b1a4:	f103 0256 	add.w	r2, r3, #86	; 0x56
    b1a8:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    b1ac:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b1b0:	9102      	str	r1, [sp, #8]
    b1b2:	9501      	str	r5, [sp, #4]
    b1b4:	9200      	str	r2, [sp, #0]
    b1b6:	334f      	adds	r3, #79	; 0x4f
    b1b8:	463a      	mov	r2, r7
    b1ba:	4631      	mov	r1, r6
    b1bc:	f204 1033 	addw	r0, r4, #307	; 0x133
    b1c0:	f7ff fe54 	bl	ae6c <smp_f5>
    b1c4:	b110      	cbz	r0, b1cc <compute_and_check_and_send_slave_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    b1c6:	2008      	movs	r0, #8
}
    b1c8:	b011      	add	sp, #68	; 0x44
    b1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b1cc:	f104 02ad 	add.w	r2, r4, #173	; 0xad
		   &smp->chan.chan.conn->le.resp_addr,
    b1d0:	6823      	ldr	r3, [r4, #0]
    b1d2:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr, e)) {
    b1d6:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b1d8:	a808      	add	r0, sp, #32
    b1da:	9003      	str	r0, [sp, #12]
    b1dc:	9302      	str	r3, [sp, #8]
    b1de:	9101      	str	r1, [sp, #4]
    b1e0:	9200      	str	r2, [sp, #0]
    b1e2:	ab04      	add	r3, sp, #16
    b1e4:	4632      	mov	r2, r6
    b1e6:	4639      	mov	r1, r7
    b1e8:	4628      	mov	r0, r5
    b1ea:	f7ff fee1 	bl	afb0 <smp_f6>
    b1ee:	b108      	cbz	r0, b1f4 <compute_and_check_and_send_slave_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    b1f0:	2008      	movs	r0, #8
    b1f2:	e7e9      	b.n	b1c8 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b1f4:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    b1f8:	6823      	ldr	r3, [r4, #0]
    b1fa:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    b1fe:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b200:	a80c      	add	r0, sp, #48	; 0x30
    b202:	9003      	str	r0, [sp, #12]
    b204:	9302      	str	r3, [sp, #8]
    b206:	9101      	str	r1, [sp, #4]
    b208:	9200      	str	r2, [sp, #0]
    b20a:	ab04      	add	r3, sp, #16
    b20c:	463a      	mov	r2, r7
    b20e:	4631      	mov	r1, r6
    b210:	4628      	mov	r0, r5
    b212:	f7ff fecd 	bl	afb0 <smp_f6>
    b216:	b108      	cbz	r0, b21c <compute_and_check_and_send_slave_dhcheck+0xb0>
		return BT_SMP_ERR_UNSPECIFIED;
    b218:	2008      	movs	r0, #8
    b21a:	e7d5      	b.n	b1c8 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
    b21c:	2210      	movs	r2, #16
    b21e:	a90c      	add	r1, sp, #48	; 0x30
    b220:	f204 1053 	addw	r0, r4, #339	; 0x153
    b224:	f01f fae4 	bl	2a7f0 <memcmp>
    b228:	b108      	cbz	r0, b22e <compute_and_check_and_send_slave_dhcheck+0xc2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    b22a:	200b      	movs	r0, #11
    b22c:	e7cc      	b.n	b1c8 <compute_and_check_and_send_slave_dhcheck+0x5c>
	sc_smp_send_dhkey_check(smp, e);
    b22e:	a908      	add	r1, sp, #32
    b230:	4620      	mov	r0, r4
    b232:	f7ff fcc7 	bl	abc4 <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b236:	34a0      	adds	r4, #160	; 0xa0
    b238:	f3bf 8f5b 	dmb	ish
    b23c:	e854 3f00 	ldrex	r3, [r4]
    b240:	f043 0302 	orr.w	r3, r3, #2
    b244:	e844 3200 	strex	r2, r3, [r4]
    b248:	2a00      	cmp	r2, #0
    b24a:	d1f7      	bne.n	b23c <compute_and_check_and_send_slave_dhcheck+0xd0>
    b24c:	f3bf 8f5b 	dmb	ish
	return 0;
    b250:	2000      	movs	r0, #0
    b252:	e7b9      	b.n	b1c8 <compute_and_check_and_send_slave_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    b254:	2008      	movs	r0, #8
    b256:	e7b7      	b.n	b1c8 <compute_and_check_and_send_slave_dhcheck+0x5c>

0000b258 <smp_g2>:
{
    b258:	b5f0      	push	{r4, r5, r6, r7, lr}
    b25a:	b099      	sub	sp, #100	; 0x64
    b25c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	src += length - 1;
    b25e:	301f      	adds	r0, #31
    b260:	2520      	movs	r5, #32
    b262:	ae04      	add	r6, sp, #16
    b264:	e004      	b.n	b270 <smp_g2+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b266:	7807      	ldrb	r7, [r0, #0]
    b268:	7037      	strb	r7, [r6, #0]
	for (; length > 0; length--) {
    b26a:	3d01      	subs	r5, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b26c:	3801      	subs	r0, #1
    b26e:	3601      	adds	r6, #1
	for (; length > 0; length--) {
    b270:	2d00      	cmp	r5, #0
    b272:	d1f8      	bne.n	b266 <smp_g2+0xe>
	src += length - 1;
    b274:	311f      	adds	r1, #31
    b276:	2020      	movs	r0, #32
    b278:	ad0c      	add	r5, sp, #48	; 0x30
    b27a:	e004      	b.n	b286 <smp_g2+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b27c:	780e      	ldrb	r6, [r1, #0]
    b27e:	702e      	strb	r6, [r5, #0]
	for (; length > 0; length--) {
    b280:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b282:	3901      	subs	r1, #1
    b284:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    b286:	2800      	cmp	r0, #0
    b288:	d1f8      	bne.n	b27c <smp_g2+0x24>
	src += length - 1;
    b28a:	330f      	adds	r3, #15
    b28c:	2110      	movs	r1, #16
    b28e:	a814      	add	r0, sp, #80	; 0x50
    b290:	e004      	b.n	b29c <smp_g2+0x44>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b292:	781d      	ldrb	r5, [r3, #0]
    b294:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
    b296:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b298:	3b01      	subs	r3, #1
    b29a:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    b29c:	2900      	cmp	r1, #0
    b29e:	d1f8      	bne.n	b292 <smp_g2+0x3a>
	src += length - 1;
    b2a0:	320f      	adds	r2, #15
    b2a2:	2310      	movs	r3, #16
    b2a4:	4669      	mov	r1, sp
    b2a6:	e004      	b.n	b2b2 <smp_g2+0x5a>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b2a8:	7810      	ldrb	r0, [r2, #0]
    b2aa:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    b2ac:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b2ae:	3a01      	subs	r2, #1
    b2b0:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    b2b2:	2b00      	cmp	r3, #0
    b2b4:	d1f8      	bne.n	b2a8 <smp_g2+0x50>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    b2b6:	466b      	mov	r3, sp
    b2b8:	2250      	movs	r2, #80	; 0x50
    b2ba:	a904      	add	r1, sp, #16
    b2bc:	4668      	mov	r0, sp
    b2be:	f7ff fcf7 	bl	acb0 <bt_smp_aes_cmac>
	if (err) {
    b2c2:	4605      	mov	r5, r0
    b2c4:	b110      	cbz	r0, b2cc <smp_g2+0x74>
}
    b2c6:	4628      	mov	r0, r5
    b2c8:	b019      	add	sp, #100	; 0x64
    b2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
    b2cc:	2204      	movs	r2, #4
    b2ce:	a903      	add	r1, sp, #12
    b2d0:	4620      	mov	r0, r4
    b2d2:	f7f4 fff5 	bl	2c0 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    b2d6:	6822      	ldr	r2, [r4, #0]
    b2d8:	0a13      	lsrs	r3, r2, #8
    b2da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    b2de:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b2e2:	0211      	lsls	r1, r2, #8
    b2e4:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    b2e8:	430b      	orrs	r3, r1
    b2ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    b2ee:	4a04      	ldr	r2, [pc, #16]	; (b300 <smp_g2+0xa8>)
    b2f0:	fba2 1203 	umull	r1, r2, r2, r3
    b2f4:	0c92      	lsrs	r2, r2, #18
    b2f6:	4903      	ldr	r1, [pc, #12]	; (b304 <smp_g2+0xac>)
    b2f8:	fb01 3212 	mls	r2, r1, r2, r3
    b2fc:	6022      	str	r2, [r4, #0]
	return 0;
    b2fe:	e7e2      	b.n	b2c6 <smp_g2+0x6e>
    b300:	431bde83 	.word	0x431bde83
    b304:	000f4240 	.word	0x000f4240

0000b308 <smp_send_pairing_confirm>:
{
    b308:	b570      	push	{r4, r5, r6, lr}
    b30a:	b082      	sub	sp, #8
	struct bt_conn *conn = smp->chan.chan.conn;
    b30c:	6806      	ldr	r6, [r0, #0]
	switch (smp->method) {
    b30e:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    b312:	2b03      	cmp	r3, #3
    b314:	d83f      	bhi.n	b396 <smp_send_pairing_confirm+0x8e>
    b316:	e8df f003 	tbb	[pc, r3]
    b31a:	020d      	.short	0x020d
    b31c:	0d02      	.short	0x0d02
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    b31e:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
    b322:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    b326:	40dd      	lsrs	r5, r3
    b328:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    b32c:	f065 057f 	orn	r5, r5, #127	; 0x7f
    b330:	b2ed      	uxtb	r5, r5
		break;
    b332:	e000      	b.n	b336 <smp_send_pairing_confirm+0x2e>
		r = 0;
    b334:	2500      	movs	r5, #0
    b336:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    b338:	2210      	movs	r2, #16
    b33a:	2103      	movs	r1, #3
    b33c:	4630      	mov	r0, r6
    b33e:	f7ff fbdc 	bl	aafa <smp_create_pdu>
	if (!buf) {
    b342:	4606      	mov	r6, r0
    b344:	b348      	cbz	r0, b39a <smp_send_pairing_confirm+0x92>
	req = net_buf_add(buf, sizeof(*req));
    b346:	2110      	movs	r1, #16
    b348:	3008      	adds	r0, #8
    b34a:	f00f fd33 	bl	1adb4 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    b34e:	9000      	str	r0, [sp, #0]
    b350:	462b      	mov	r3, r5
    b352:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    b356:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    b35a:	4811      	ldr	r0, [pc, #68]	; (b3a0 <smp_send_pairing_confirm+0x98>)
    b35c:	f7ff fd18 	bl	ad90 <smp_f4>
    b360:	b120      	cbz	r0, b36c <smp_send_pairing_confirm+0x64>
		net_buf_unref(buf);
    b362:	4630      	mov	r0, r6
    b364:	f00f fcda 	bl	1ad1c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    b368:	2008      	movs	r0, #8
    b36a:	e017      	b.n	b39c <smp_send_pairing_confirm+0x94>
	smp_send(smp, buf, NULL);
    b36c:	2200      	movs	r2, #0
    b36e:	4631      	mov	r1, r6
    b370:	4620      	mov	r0, r4
    b372:	f7ff fc15 	bl	aba0 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    b376:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b37a:	f3bf 8f5b 	dmb	ish
    b37e:	e850 3f00 	ldrex	r3, [r0]
    b382:	f023 0301 	bic.w	r3, r3, #1
    b386:	e840 3200 	strex	r2, r3, [r0]
    b38a:	2a00      	cmp	r2, #0
    b38c:	d1f7      	bne.n	b37e <smp_send_pairing_confirm+0x76>
    b38e:	f3bf 8f5b 	dmb	ish
	return 0;
    b392:	2000      	movs	r0, #0
    b394:	e002      	b.n	b39c <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    b396:	2008      	movs	r0, #8
    b398:	e000      	b.n	b39c <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    b39a:	2008      	movs	r0, #8
}
    b39c:	b002      	add	sp, #8
    b39e:	bd70      	pop	{r4, r5, r6, pc}
    b3a0:	20000a6c 	.word	0x20000a6c

0000b3a4 <smp_c1>:
{
    b3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3a8:	b088      	sub	sp, #32
    b3aa:	4604      	mov	r4, r0
    b3ac:	460f      	mov	r7, r1
    b3ae:	4611      	mov	r1, r2
    b3b0:	4698      	mov	r8, r3
    b3b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b3b4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	p1[0] = ia->type;
    b3b6:	782b      	ldrb	r3, [r5, #0]
    b3b8:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
    b3bc:	7833      	ldrb	r3, [r6, #0]
    b3be:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
    b3c2:	2207      	movs	r2, #7
    b3c4:	f10d 0012 	add.w	r0, sp, #18
    b3c8:	f7f4 ff7a 	bl	2c0 <memcpy>
	memcpy(p1 + 9, pres, 7);
    b3cc:	2207      	movs	r2, #7
    b3ce:	4641      	mov	r1, r8
    b3d0:	f10d 0019 	add.w	r0, sp, #25
    b3d4:	f7f4 ff74 	bl	2c0 <memcpy>
	xor_128(r, p1, enc_data);
    b3d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b3da:	a904      	add	r1, sp, #16
    b3dc:	4638      	mov	r0, r7
    b3de:	f7ff faf3 	bl	a9c8 <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
    b3e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b3e4:	4611      	mov	r1, r2
    b3e6:	4620      	mov	r0, r4
    b3e8:	f006 f98a 	bl	11700 <bt_encrypt_le>
	if (err) {
    b3ec:	4603      	mov	r3, r0
    b3ee:	b118      	cbz	r0, b3f8 <smp_c1+0x54>
}
    b3f0:	4618      	mov	r0, r3
    b3f2:	b008      	add	sp, #32
    b3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(p2, ra->a.val, 6);
    b3f8:	2206      	movs	r2, #6
    b3fa:	1c71      	adds	r1, r6, #1
    b3fc:	4668      	mov	r0, sp
    b3fe:	f7f4 ff5f 	bl	2c0 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    b402:	2206      	movs	r2, #6
    b404:	1c69      	adds	r1, r5, #1
    b406:	eb0d 0002 	add.w	r0, sp, r2
    b40a:	f7f4 ff59 	bl	2c0 <memcpy>
	memset(p2 + 12, 0, 4);
    b40e:	2204      	movs	r2, #4
    b410:	2100      	movs	r1, #0
    b412:	a803      	add	r0, sp, #12
    b414:	f01f fa80 	bl	2a918 <memset>
	xor_128(enc_data, p2, enc_data);
    b418:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b41a:	4669      	mov	r1, sp
    b41c:	4610      	mov	r0, r2
    b41e:	f7ff fad3 	bl	a9c8 <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
    b422:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b424:	4611      	mov	r1, r2
    b426:	4620      	mov	r0, r4
    b428:	f006 f96a 	bl	11700 <bt_encrypt_le>
    b42c:	4603      	mov	r3, r0
    b42e:	e7df      	b.n	b3f0 <smp_c1+0x4c>

0000b430 <legacy_send_pairing_confirm>:
{
    b430:	b570      	push	{r4, r5, r6, lr}
    b432:	b084      	sub	sp, #16
    b434:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b436:	6805      	ldr	r5, [r0, #0]
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    b438:	2210      	movs	r2, #16
    b43a:	2103      	movs	r1, #3
    b43c:	4628      	mov	r0, r5
    b43e:	f7ff fb5c 	bl	aafa <smp_create_pdu>
	if (!buf) {
    b442:	b370      	cbz	r0, b4a2 <legacy_send_pairing_confirm+0x72>
    b444:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    b446:	2110      	movs	r1, #16
    b448:	3008      	adds	r0, #8
    b44a:	f00f fcb3 	bl	1adb4 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    b44e:	f105 034f 	add.w	r3, r5, #79	; 0x4f
    b452:	3556      	adds	r5, #86	; 0x56
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    b454:	9002      	str	r0, [sp, #8]
    b456:	9501      	str	r5, [sp, #4]
    b458:	9300      	str	r3, [sp, #0]
    b45a:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    b45e:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    b462:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    b466:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    b46a:	f7ff ff9b 	bl	b3a4 <smp_c1>
    b46e:	b120      	cbz	r0, b47a <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
    b470:	4630      	mov	r0, r6
    b472:	f00f fc53 	bl	1ad1c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    b476:	2008      	movs	r0, #8
    b478:	e014      	b.n	b4a4 <legacy_send_pairing_confirm+0x74>
	smp_send(smp, buf, NULL);
    b47a:	2200      	movs	r2, #0
    b47c:	4631      	mov	r1, r6
    b47e:	4620      	mov	r0, r4
    b480:	f7ff fb8e 	bl	aba0 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    b484:	34a0      	adds	r4, #160	; 0xa0
    b486:	f3bf 8f5b 	dmb	ish
    b48a:	e854 3f00 	ldrex	r3, [r4]
    b48e:	f023 0301 	bic.w	r3, r3, #1
    b492:	e844 3200 	strex	r2, r3, [r4]
    b496:	2a00      	cmp	r2, #0
    b498:	d1f7      	bne.n	b48a <legacy_send_pairing_confirm+0x5a>
    b49a:	f3bf 8f5b 	dmb	ish
	return 0;
    b49e:	2000      	movs	r0, #0
    b4a0:	e000      	b.n	b4a4 <legacy_send_pairing_confirm+0x74>
		return BT_SMP_ERR_UNSPECIFIED;
    b4a2:	2008      	movs	r0, #8
}
    b4a4:	b004      	add	sp, #16
    b4a6:	bd70      	pop	{r4, r5, r6, pc}

0000b4a8 <legacy_pairing_confirm>:
{
    b4a8:	b508      	push	{r3, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b4aa:	6803      	ldr	r3, [r0, #0]
    b4ac:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b4ae:	b1c3      	cbz	r3, b4e2 <legacy_pairing_confirm+0x3a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b4b0:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b4b4:	f3bf 8f5b 	dmb	ish
    b4b8:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    b4bc:	f3bf 8f5b 	dmb	ish
    b4c0:	f412 7f00 	tst.w	r2, #512	; 0x200
    b4c4:	d01e      	beq.n	b504 <legacy_pairing_confirm+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b4c6:	f3bf 8f5b 	dmb	ish
    b4ca:	e853 2f00 	ldrex	r2, [r3]
    b4ce:	f042 0201 	orr.w	r2, r2, #1
    b4d2:	e843 2100 	strex	r1, r2, [r3]
    b4d6:	2900      	cmp	r1, #0
    b4d8:	d1f7      	bne.n	b4ca <legacy_pairing_confirm+0x22>
    b4da:	f3bf 8f5b 	dmb	ish
	return 0;
    b4de:	2000      	movs	r0, #0
}
    b4e0:	bd08      	pop	{r3, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b4e2:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    b4e6:	f3bf 8f5b 	dmb	ish
    b4ea:	e853 2f00 	ldrex	r2, [r3]
    b4ee:	f042 0208 	orr.w	r2, r2, #8
    b4f2:	e843 2100 	strex	r1, r2, [r3]
    b4f6:	2900      	cmp	r1, #0
    b4f8:	d1f7      	bne.n	b4ea <legacy_pairing_confirm+0x42>
    b4fa:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    b4fe:	f7ff ff97 	bl	b430 <legacy_send_pairing_confirm>
    b502:	bd08      	pop	{r3, pc}
			atomic_set_bit(&smp->allowed_cmds,
    b504:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    b508:	f3bf 8f5b 	dmb	ish
    b50c:	e853 2f00 	ldrex	r2, [r3]
    b510:	f042 0210 	orr.w	r2, r2, #16
    b514:	e843 2100 	strex	r1, r2, [r3]
    b518:	2900      	cmp	r1, #0
    b51a:	d1f7      	bne.n	b50c <legacy_pairing_confirm+0x64>
    b51c:	f3bf 8f5b 	dmb	ish
			return legacy_send_pairing_confirm(smp);
    b520:	f7ff ff86 	bl	b430 <legacy_send_pairing_confirm>
    b524:	bd08      	pop	{r3, pc}

0000b526 <smp_pairing_confirm>:
{
    b526:	b510      	push	{r4, lr}
    b528:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    b52a:	2210      	movs	r2, #16
    b52c:	6889      	ldr	r1, [r1, #8]
    b52e:	30b3      	adds	r0, #179	; 0xb3
    b530:	f7f4 fec6 	bl	2c0 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b534:	6823      	ldr	r3, [r4, #0]
    b536:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b538:	b313      	cbz	r3, b580 <smp_pairing_confirm+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b53a:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b53e:	f3bf 8f5b 	dmb	ish
    b542:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b546:	f3bf 8f5b 	dmb	ish
    b54a:	f013 0f20 	tst.w	r3, #32
    b54e:	d029      	beq.n	b5a4 <smp_pairing_confirm+0x7e>
	switch (smp->method) {
    b550:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b554:	2b01      	cmp	r3, #1
    b556:	d029      	beq.n	b5ac <smp_pairing_confirm+0x86>
    b558:	2b02      	cmp	r3, #2
    b55a:	d150      	bne.n	b5fe <smp_pairing_confirm+0xd8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b55c:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b560:	f3bf 8f5b 	dmb	ish
    b564:	e853 2f00 	ldrex	r2, [r3]
    b568:	f042 0210 	orr.w	r2, r2, #16
    b56c:	e843 2100 	strex	r1, r2, [r3]
    b570:	2900      	cmp	r1, #0
    b572:	d1f7      	bne.n	b564 <smp_pairing_confirm+0x3e>
    b574:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    b578:	4620      	mov	r0, r4
    b57a:	f7ff fec5 	bl	b308 <smp_send_pairing_confirm>
    b57e:	bd10      	pop	{r4, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b580:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b584:	f3bf 8f5b 	dmb	ish
    b588:	e853 2f00 	ldrex	r2, [r3]
    b58c:	f042 0210 	orr.w	r2, r2, #16
    b590:	e843 2100 	strex	r1, r2, [r3]
    b594:	2900      	cmp	r1, #0
    b596:	d1f7      	bne.n	b588 <smp_pairing_confirm+0x62>
    b598:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
    b59c:	4620      	mov	r0, r4
    b59e:	f7ff fb6c 	bl	ac7a <smp_send_pairing_random>
    b5a2:	bd10      	pop	{r4, pc}
		return legacy_pairing_confirm(smp);
    b5a4:	4620      	mov	r0, r4
    b5a6:	f7ff ff7f 	bl	b4a8 <legacy_pairing_confirm>
    b5aa:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b5ac:	f3bf 8f5b 	dmb	ish
    b5b0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b5b4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b5b8:	f413 7f00 	tst.w	r3, #512	; 0x200
    b5bc:	d111      	bne.n	b5e2 <smp_pairing_confirm+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b5be:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b5c2:	f3bf 8f5b 	dmb	ish
    b5c6:	e853 2f00 	ldrex	r2, [r3]
    b5ca:	f042 0210 	orr.w	r2, r2, #16
    b5ce:	e843 2100 	strex	r1, r2, [r3]
    b5d2:	2900      	cmp	r1, #0
    b5d4:	d1f7      	bne.n	b5c6 <smp_pairing_confirm+0xa0>
    b5d6:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    b5da:	4620      	mov	r0, r4
    b5dc:	f7ff fe94 	bl	b308 <smp_send_pairing_confirm>
    b5e0:	bd10      	pop	{r4, pc}
    b5e2:	f3bf 8f5b 	dmb	ish
    b5e6:	e852 3f00 	ldrex	r3, [r2]
    b5ea:	f043 0301 	orr.w	r3, r3, #1
    b5ee:	e842 3100 	strex	r1, r3, [r2]
    b5f2:	2900      	cmp	r1, #0
    b5f4:	d1f7      	bne.n	b5e6 <smp_pairing_confirm+0xc0>
    b5f6:	f3bf 8f5b 	dmb	ish
			return 0;
    b5fa:	2000      	movs	r0, #0
    b5fc:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b5fe:	2008      	movs	r0, #8
}
    b600:	bd10      	pop	{r4, pc}

0000b602 <smp_s1>:
{
    b602:	b570      	push	{r4, r5, r6, lr}
    b604:	4605      	mov	r5, r0
    b606:	460e      	mov	r6, r1
    b608:	4611      	mov	r1, r2
    b60a:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
    b60c:	2208      	movs	r2, #8
    b60e:	4618      	mov	r0, r3
    b610:	f7f4 fe56 	bl	2c0 <memcpy>
	memcpy(out + 8, r1, 8);
    b614:	2208      	movs	r2, #8
    b616:	4631      	mov	r1, r6
    b618:	18a0      	adds	r0, r4, r2
    b61a:	f7f4 fe51 	bl	2c0 <memcpy>
	return bt_encrypt_le(k, out, out);
    b61e:	4622      	mov	r2, r4
    b620:	4621      	mov	r1, r4
    b622:	4628      	mov	r0, r5
    b624:	f006 f86c 	bl	11700 <bt_encrypt_le>
}
    b628:	bd70      	pop	{r4, r5, r6, pc}

0000b62a <smp_reset>:
{
    b62a:	b538      	push	{r3, r4, r5, lr}
    b62c:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b62e:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    b630:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    b634:	f01e fcac 	bl	29f90 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    b638:	2200      	movs	r2, #0
    b63a:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
	atomic_set(&smp->allowed_cmds, 0);
    b63e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b642:	f3bf 8f5b 	dmb	ish
    b646:	e853 1f00 	ldrex	r1, [r3]
    b64a:	e843 2000 	strex	r0, r2, [r3]
    b64e:	2800      	cmp	r0, #0
    b650:	d1f9      	bne.n	b646 <smp_reset+0x1c>
    b652:	f3bf 8f5b 	dmb	ish
	atomic_set(smp->flags, 0);
    b656:	34a0      	adds	r4, #160	; 0xa0
    b658:	f3bf 8f5b 	dmb	ish
    b65c:	e854 1f00 	ldrex	r1, [r4]
    b660:	e844 2000 	strex	r0, r2, [r4]
    b664:	2800      	cmp	r0, #0
    b666:	d1f9      	bne.n	b65c <smp_reset+0x32>
    b668:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    b66c:	7a69      	ldrb	r1, [r5, #9]
    b66e:	7a2a      	ldrb	r2, [r5, #8]
    b670:	4291      	cmp	r1, r2
    b672:	d000      	beq.n	b676 <smp_reset+0x4c>
		conn->required_sec_level = conn->sec_level;
    b674:	726a      	strb	r2, [r5, #9]
	    conn->role == BT_HCI_ROLE_MASTER) {
    b676:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b678:	b162      	cbz	r2, b694 <smp_reset+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b67a:	f3bf 8f5b 	dmb	ish
    b67e:	e853 2f00 	ldrex	r2, [r3]
    b682:	f042 0202 	orr.w	r2, r2, #2
    b686:	e843 2100 	strex	r1, r2, [r3]
    b68a:	2900      	cmp	r1, #0
    b68c:	d1f7      	bne.n	b67e <smp_reset+0x54>
    b68e:	f3bf 8f5b 	dmb	ish
    b692:	bd38      	pop	{r3, r4, r5, pc}
    b694:	f3bf 8f5b 	dmb	ish
    b698:	e853 2f00 	ldrex	r2, [r3]
    b69c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b6a0:	e843 2100 	strex	r1, r2, [r3]
    b6a4:	2900      	cmp	r1, #0
    b6a6:	d1f7      	bne.n	b698 <smp_reset+0x6e>
    b6a8:	f3bf 8f5b 	dmb	ish
    b6ac:	bd38      	pop	{r3, r4, r5, pc}

0000b6ae <smp_pairing_complete>:
{
    b6ae:	b508      	push	{r3, lr}
	smp_reset(smp);
    b6b0:	f7ff ffbb 	bl	b62a <smp_reset>
    b6b4:	bd08      	pop	{r3, pc}

0000b6b6 <smp_error>:
{
    b6b6:	b570      	push	{r4, r5, r6, lr}
    b6b8:	4604      	mov	r4, r0
    b6ba:	460e      	mov	r6, r1
	smp_pairing_complete(smp, reason);
    b6bc:	f7ff fff7 	bl	b6ae <smp_pairing_complete>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    b6c0:	2201      	movs	r2, #1
    b6c2:	2105      	movs	r1, #5
    b6c4:	6820      	ldr	r0, [r4, #0]
    b6c6:	f7ff fa18 	bl	aafa <smp_create_pdu>
	if (!buf) {
    b6ca:	b168      	cbz	r0, b6e8 <smp_error+0x32>
    b6cc:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    b6ce:	2101      	movs	r1, #1
    b6d0:	3008      	adds	r0, #8
    b6d2:	f00f fb6f 	bl	1adb4 <net_buf_simple_add>
	rsp->reason = reason;
    b6d6:	7006      	strb	r6, [r0, #0]
    b6d8:	2300      	movs	r3, #0
    b6da:	462a      	mov	r2, r5
    b6dc:	2106      	movs	r1, #6
    b6de:	6820      	ldr	r0, [r4, #0]
    b6e0:	f7fc fd01 	bl	80e6 <bt_l2cap_send_cb>
	return 0;
    b6e4:	2000      	movs	r0, #0
    b6e6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    b6e8:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    b6ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0000b6f0 <bt_smp_dhkey_ready>:
{
    b6f0:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b6f2:	2400      	movs	r4, #0
    b6f4:	b384      	cbz	r4, b758 <bt_smp_dhkey_ready+0x68>
	struct bt_smp *smp = NULL;
    b6f6:	2400      	movs	r4, #0
	if (!smp) {
    b6f8:	b36c      	cbz	r4, b756 <bt_smp_dhkey_ready+0x66>
    b6fa:	4601      	mov	r1, r0
	if (!dhkey) {
    b6fc:	2800      	cmp	r0, #0
    b6fe:	d04b      	beq.n	b798 <bt_smp_dhkey_ready+0xa8>
	memcpy(smp->dhkey, dhkey, 32);
    b700:	2220      	movs	r2, #32
    b702:	f204 1033 	addw	r0, r4, #307	; 0x133
    b706:	f7f4 fddb 	bl	2c0 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b70a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b70e:	f3bf 8f5b 	dmb	ish
    b712:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    b716:	f3bf 8f5b 	dmb	ish
    b71a:	f412 7f00 	tst.w	r2, #512	; 0x200
    b71e:	d140      	bne.n	b7a2 <bt_smp_dhkey_ready+0xb2>
    b720:	f3bf 8f5b 	dmb	ish
    b724:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    b728:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    b72c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    b730:	d144      	bne.n	b7bc <bt_smp_dhkey_ready+0xcc>
    b732:	f3bf 8f5b 	dmb	ish
    b736:	681b      	ldr	r3, [r3, #0]
    b738:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    b73c:	f413 7f80 	tst.w	r3, #256	; 0x100
    b740:	d009      	beq.n	b756 <bt_smp_dhkey_ready+0x66>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b742:	6823      	ldr	r3, [r4, #0]
    b744:	78db      	ldrb	r3, [r3, #3]
    b746:	2b00      	cmp	r3, #0
    b748:	d149      	bne.n	b7de <bt_smp_dhkey_ready+0xee>
			err = compute_and_send_master_dhcheck(smp);
    b74a:	4620      	mov	r0, r4
    b74c:	f7ff fcb4 	bl	b0b8 <compute_and_send_master_dhcheck>
			if (err) {
    b750:	4601      	mov	r1, r0
    b752:	2800      	cmp	r0, #0
    b754:	d13f      	bne.n	b7d6 <bt_smp_dhkey_ready+0xe6>
    b756:	bd10      	pop	{r4, pc}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    b758:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b75c:	fb03 f304 	mul.w	r3, r3, r4
    b760:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
    b764:	4b23      	ldr	r3, [pc, #140]	; (b7f4 <bt_smp_dhkey_ready+0x104>)
    b766:	4413      	add	r3, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b768:	f3bf 8f5b 	dmb	ish
    b76c:	e853 2f00 	ldrex	r2, [r3]
    b770:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    b774:	e843 1e00 	strex	lr, r1, [r3]
    b778:	f1be 0f00 	cmp.w	lr, #0
    b77c:	d1f6      	bne.n	b76c <bt_smp_dhkey_ready+0x7c>
    b77e:	f3bf 8f5b 	dmb	ish
    b782:	f012 0f80 	tst.w	r2, #128	; 0x80
    b786:	d101      	bne.n	b78c <bt_smp_dhkey_ready+0x9c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b788:	3401      	adds	r4, #1
    b78a:	e7b3      	b.n	b6f4 <bt_smp_dhkey_ready+0x4>
			smp = &bt_smp_pool[i];
    b78c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    b790:	4b18      	ldr	r3, [pc, #96]	; (b7f4 <bt_smp_dhkey_ready+0x104>)
    b792:	fb02 3404 	mla	r4, r2, r4, r3
			break;
    b796:	e7af      	b.n	b6f8 <bt_smp_dhkey_ready+0x8>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    b798:	210b      	movs	r1, #11
    b79a:	4620      	mov	r0, r4
    b79c:	f7ff ff8b 	bl	b6b6 <smp_error>
		return;
    b7a0:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b7a2:	f3bf 8f5b 	dmb	ish
    b7a6:	e853 2f00 	ldrex	r2, [r3]
    b7aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b7ae:	e843 2100 	strex	r1, r2, [r3]
    b7b2:	2900      	cmp	r1, #0
    b7b4:	d1f7      	bne.n	b7a6 <bt_smp_dhkey_ready+0xb6>
    b7b6:	f3bf 8f5b 	dmb	ish
    b7ba:	bd10      	pop	{r4, pc}
    b7bc:	f3bf 8f5b 	dmb	ish
    b7c0:	e853 2f00 	ldrex	r2, [r3]
    b7c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b7c8:	e843 2100 	strex	r1, r2, [r3]
    b7cc:	2900      	cmp	r1, #0
    b7ce:	d1f7      	bne.n	b7c0 <bt_smp_dhkey_ready+0xd0>
    b7d0:	f3bf 8f5b 	dmb	ish
    b7d4:	bd10      	pop	{r4, pc}
				smp_error(smp, err);
    b7d6:	4620      	mov	r0, r4
    b7d8:	f7ff ff6d 	bl	b6b6 <smp_error>
    b7dc:	bd10      	pop	{r4, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    b7de:	4620      	mov	r0, r4
    b7e0:	f7ff fcc4 	bl	b16c <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    b7e4:	4601      	mov	r1, r0
    b7e6:	2800      	cmp	r0, #0
    b7e8:	d0b5      	beq.n	b756 <bt_smp_dhkey_ready+0x66>
			smp_error(smp, err);
    b7ea:	4620      	mov	r0, r4
    b7ec:	f7ff ff63 	bl	b6b6 <smp_error>
    b7f0:	e7b1      	b.n	b756 <bt_smp_dhkey_ready+0x66>
    b7f2:	bf00      	nop
    b7f4:	200008c4 	.word	0x200008c4

0000b7f8 <smp_pairing_failed>:
{
    b7f8:	b538      	push	{r3, r4, r5, lr}
    b7fa:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b7fc:	6800      	ldr	r0, [r0, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    b7fe:	688d      	ldr	r5, [r1, #8]
	switch (smp->method) {
    b800:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b804:	3b01      	subs	r3, #1
    b806:	2b02      	cmp	r3, #2
    b808:	d913      	bls.n	b832 <smp_pairing_failed+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b80a:	f3bf 8f5b 	dmb	ish
    b80e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b812:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b816:	f013 0f04 	tst.w	r3, #4
    b81a:	d004      	beq.n	b826 <smp_pairing_failed+0x2e>
	    smp->chan.chan.conn->le.keys) {
    b81c:	6823      	ldr	r3, [r4, #0]
    b81e:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b820:	b108      	cbz	r0, b826 <smp_pairing_failed+0x2e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    b822:	f001 fd98 	bl	d356 <bt_keys_clear>
	smp_pairing_complete(smp, req->reason);
    b826:	7829      	ldrb	r1, [r5, #0]
    b828:	4620      	mov	r0, r4
    b82a:	f7ff ff40 	bl	b6ae <smp_pairing_complete>
}
    b82e:	2000      	movs	r0, #0
    b830:	bd38      	pop	{r3, r4, r5, pc}
		bt_auth->cancel(conn);
    b832:	4b02      	ldr	r3, [pc, #8]	; (b83c <smp_pairing_failed+0x44>)
    b834:	681b      	ldr	r3, [r3, #0]
    b836:	68db      	ldr	r3, [r3, #12]
    b838:	4798      	blx	r3
		break;
    b83a:	e7e6      	b.n	b80a <smp_pairing_failed+0x12>
    b83c:	20002ab0 	.word	0x20002ab0

0000b840 <bt_smp_disconnected>:
{
    b840:	b538      	push	{r3, r4, r5, lr}
    b842:	4605      	mov	r5, r0
	struct bt_keys *keys = chan->conn->le.keys;
    b844:	6803      	ldr	r3, [r0, #0]
    b846:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	k_delayed_work_cancel(&smp->work);
    b848:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    b84c:	f01e fba0 	bl	29f90 <k_delayed_work_cancel>
	if (keys) {
    b850:	b164      	cbz	r4, b86c <bt_smp_disconnected+0x2c>
		if (!keys->keys ||
    b852:	89a3      	ldrh	r3, [r4, #12]
    b854:	b13b      	cbz	r3, b866 <bt_smp_disconnected+0x26>
    b856:	f3bf 8f5b 	dmb	ish
    b85a:	68a3      	ldr	r3, [r4, #8]
    b85c:	f3bf 8f5b 	dmb	ish
    b860:	f013 0f02 	tst.w	r3, #2
    b864:	d002      	beq.n	b86c <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    b866:	4620      	mov	r0, r4
    b868:	f001 fd75 	bl	d356 <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    b86c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    b870:	2100      	movs	r1, #0
    b872:	4628      	mov	r0, r5
    b874:	f01f f850 	bl	2a918 <memset>
    b878:	bd38      	pop	{r3, r4, r5, pc}

0000b87a <smp_timeout>:
{
    b87a:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    b87c:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b880:	f1a0 04dc 	sub.w	r4, r0, #220	; 0xdc
    b884:	f3bf 8f5b 	dmb	ish
    b888:	f850 3cdc 	ldr.w	r3, [r0, #-220]
    b88c:	f3bf 8f5b 	dmb	ish
    b890:	f013 0f04 	tst.w	r3, #4
    b894:	d004      	beq.n	b8a0 <smp_timeout+0x26>
	    smp->chan.chan.conn->le.keys) {
    b896:	682b      	ldr	r3, [r5, #0]
    b898:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b89a:	b108      	cbz	r0, b8a0 <smp_timeout+0x26>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    b89c:	f001 fd5b 	bl	d356 <bt_keys_clear>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    b8a0:	2108      	movs	r1, #8
    b8a2:	4628      	mov	r0, r5
    b8a4:	f7ff ff03 	bl	b6ae <smp_pairing_complete>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b8a8:	f3bf 8f5b 	dmb	ish
    b8ac:	e854 3f00 	ldrex	r3, [r4]
    b8b0:	f043 0310 	orr.w	r3, r3, #16
    b8b4:	e844 3200 	strex	r2, r3, [r4]
    b8b8:	2a00      	cmp	r2, #0
    b8ba:	d1f7      	bne.n	b8ac <smp_timeout+0x32>
    b8bc:	f3bf 8f5b 	dmb	ish
    b8c0:	bd38      	pop	{r3, r4, r5, pc}
	...

0000b8c4 <legacy_distribute_keys>:
{
    b8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8c8:	b088      	sub	sp, #32
	struct bt_conn *conn = smp->chan.chan.conn;
    b8ca:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    b8cc:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    b8ce:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
    b8d2:	f013 0f01 	tst.w	r3, #1
    b8d6:	d102      	bne.n	b8de <legacy_distribute_keys+0x1a>
}
    b8d8:	b008      	add	sp, #32
    b8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b8de:	4604      	mov	r4, r0
		bt_rand(key, sizeof(key));
    b8e0:	2110      	movs	r1, #16
    b8e2:	eb0d 0001 	add.w	r0, sp, r1
    b8e6:	f005 feef 	bl	116c8 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    b8ea:	2108      	movs	r1, #8
    b8ec:	eb0d 0001 	add.w	r0, sp, r1
    b8f0:	f005 feea 	bl	116c8 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    b8f4:	2102      	movs	r1, #2
    b8f6:	f10d 0006 	add.w	r0, sp, #6
    b8fa:	f005 fee5 	bl	116c8 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    b8fe:	2210      	movs	r2, #16
    b900:	2106      	movs	r1, #6
    b902:	4628      	mov	r0, r5
    b904:	f7ff f8f9 	bl	aafa <smp_create_pdu>
		if (!buf) {
    b908:	4607      	mov	r7, r0
    b90a:	2800      	cmp	r0, #0
    b90c:	d0e4      	beq.n	b8d8 <legacy_distribute_keys+0x14>
		info = net_buf_add(buf, sizeof(*info));
    b90e:	2110      	movs	r1, #16
    b910:	3008      	adds	r0, #8
    b912:	f00f fa4f 	bl	1adb4 <net_buf_simple_add>
    b916:	4680      	mov	r8, r0
		memcpy(info->ltk, key, keys->enc_size);
    b918:	79f2      	ldrb	r2, [r6, #7]
    b91a:	a904      	add	r1, sp, #16
    b91c:	f7f4 fcd0 	bl	2c0 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    b920:	79f0      	ldrb	r0, [r6, #7]
    b922:	280f      	cmp	r0, #15
    b924:	d93b      	bls.n	b99e <legacy_distribute_keys+0xda>
		smp_send(smp, buf, NULL);
    b926:	2200      	movs	r2, #0
    b928:	4639      	mov	r1, r7
    b92a:	4620      	mov	r0, r4
    b92c:	f7ff f938 	bl	aba0 <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    b930:	220a      	movs	r2, #10
    b932:	2107      	movs	r1, #7
    b934:	4628      	mov	r0, r5
    b936:	f7ff f8e0 	bl	aafa <smp_create_pdu>
		if (!buf) {
    b93a:	4605      	mov	r5, r0
    b93c:	2800      	cmp	r0, #0
    b93e:	d0cb      	beq.n	b8d8 <legacy_distribute_keys+0x14>
		ident = net_buf_add(buf, sizeof(*ident));
    b940:	210a      	movs	r1, #10
    b942:	3008      	adds	r0, #8
    b944:	f00f fa36 	bl	1adb4 <net_buf_simple_add>
		ident->rand = rand;
    b948:	9b03      	ldr	r3, [sp, #12]
    b94a:	9a02      	ldr	r2, [sp, #8]
    b94c:	f8c0 2002 	str.w	r2, [r0, #2]
    b950:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    b954:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b958:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    b95a:	4a14      	ldr	r2, [pc, #80]	; (b9ac <legacy_distribute_keys+0xe8>)
    b95c:	4629      	mov	r1, r5
    b95e:	4620      	mov	r0, r4
    b960:	f7ff f91e 	bl	aba0 <smp_send>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b964:	f3bf 8f5b 	dmb	ish
    b968:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b96c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b970:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b974:	d0b0      	beq.n	b8d8 <legacy_distribute_keys+0x14>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    b976:	2101      	movs	r1, #1
    b978:	4630      	mov	r0, r6
    b97a:	f001 fcd5 	bl	d328 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    b97e:	2210      	movs	r2, #16
    b980:	eb0d 0102 	add.w	r1, sp, r2
    b984:	f106 007a 	add.w	r0, r6, #122	; 0x7a
    b988:	f7f4 fc9a 	bl	2c0 <memcpy>
			keys->slave_ltk.rand = rand;
    b98c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b990:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
			keys->slave_ltk.ediv = ediv;
    b994:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b998:	f8a6 3078 	strh.w	r3, [r6, #120]	; 0x78
    b99c:	e79c      	b.n	b8d8 <legacy_distribute_keys+0x14>
			memset(info->ltk + keys->enc_size, 0,
    b99e:	f1c0 0210 	rsb	r2, r0, #16
    b9a2:	2100      	movs	r1, #0
    b9a4:	4440      	add	r0, r8
    b9a6:	f01e ffb7 	bl	2a918 <memset>
    b9aa:	e7bc      	b.n	b926 <legacy_distribute_keys+0x62>
    b9ac:	0000c5df 	.word	0x0000c5df

0000b9b0 <bt_smp_distribute_keys>:
{
    b9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    b9b2:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    b9b4:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (!keys) {
    b9b6:	b176      	cbz	r6, b9d6 <bt_smp_distribute_keys+0x26>
    b9b8:	4604      	mov	r4, r0
    b9ba:	f3bf 8f5b 	dmb	ish
    b9be:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b9c2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b9c6:	f013 0f20 	tst.w	r3, #32
    b9ca:	d005      	beq.n	b9d8 <bt_smp_distribute_keys+0x28>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    b9cc:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    b9d0:	f013 0f04 	tst.w	r3, #4
    b9d4:	d103      	bne.n	b9de <bt_smp_distribute_keys+0x2e>
    b9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		legacy_distribute_keys(smp);
    b9d8:	f7ff ff74 	bl	b8c4 <legacy_distribute_keys>
    b9dc:	e7f6      	b.n	b9cc <bt_smp_distribute_keys+0x1c>
		buf = smp_create_pdu(conn, BT_SMP_CMD_SIGNING_INFO,
    b9de:	2210      	movs	r2, #16
    b9e0:	210a      	movs	r1, #10
    b9e2:	4628      	mov	r0, r5
    b9e4:	f7ff f889 	bl	aafa <smp_create_pdu>
		if (!buf) {
    b9e8:	4605      	mov	r5, r0
    b9ea:	2800      	cmp	r0, #0
    b9ec:	d0f3      	beq.n	b9d6 <bt_smp_distribute_keys+0x26>
		info = net_buf_add(buf, sizeof(*info));
    b9ee:	2110      	movs	r1, #16
    b9f0:	3008      	adds	r0, #8
    b9f2:	f00f f9df 	bl	1adb4 <net_buf_simple_add>
    b9f6:	4607      	mov	r7, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    b9f8:	2110      	movs	r1, #16
    b9fa:	f005 fe65 	bl	116c8 <bt_rand>
    b9fe:	f3bf 8f5b 	dmb	ish
    ba02:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ba06:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ba0a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    ba0e:	d105      	bne.n	ba1c <bt_smp_distribute_keys+0x6c>
		smp_send(smp, buf, sign_info_sent);
    ba10:	4a09      	ldr	r2, [pc, #36]	; (ba38 <bt_smp_distribute_keys+0x88>)
    ba12:	4629      	mov	r1, r5
    ba14:	4620      	mov	r0, r4
    ba16:	f7ff f8c3 	bl	aba0 <smp_send>
    ba1a:	e7dc      	b.n	b9d6 <bt_smp_distribute_keys+0x26>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    ba1c:	2108      	movs	r1, #8
    ba1e:	4630      	mov	r0, r6
    ba20:	f001 fc82 	bl	d328 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    ba24:	2210      	movs	r2, #16
    ba26:	4639      	mov	r1, r7
    ba28:	f106 0048 	add.w	r0, r6, #72	; 0x48
    ba2c:	f7f4 fc48 	bl	2c0 <memcpy>
			keys->local_csrk.cnt = 0;
    ba30:	2300      	movs	r3, #0
    ba32:	65b3      	str	r3, [r6, #88]	; 0x58
    ba34:	e7ec      	b.n	ba10 <bt_smp_distribute_keys+0x60>
    ba36:	bf00      	nop
    ba38:	0000c5d5 	.word	0x0000c5d5

0000ba3c <bt_smp_encrypt_change>:
	struct bt_conn *conn = chan->conn;
    ba3c:	6803      	ldr	r3, [r0, #0]
	if (hci_status) {
    ba3e:	b911      	cbnz	r1, ba46 <bt_smp_encrypt_change+0xa>
	if (!smp || !conn->encrypt) {
    ba40:	b108      	cbz	r0, ba46 <bt_smp_encrypt_change+0xa>
    ba42:	7a9a      	ldrb	r2, [r3, #10]
    ba44:	b902      	cbnz	r2, ba48 <bt_smp_encrypt_change+0xc>
    ba46:	4770      	bx	lr
{
    ba48:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    ba4a:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ba4e:	f3bf 8f5b 	dmb	ish
    ba52:	e852 1f00 	ldrex	r1, [r2]
    ba56:	f021 0402 	bic.w	r4, r1, #2
    ba5a:	e842 4e00 	strex	lr, r4, [r2]
    ba5e:	f1be 0f00 	cmp.w	lr, #0
    ba62:	d1f6      	bne.n	ba52 <bt_smp_encrypt_change+0x16>
    ba64:	f3bf 8f5b 	dmb	ish
    ba68:	f011 0f02 	tst.w	r1, #2
    ba6c:	d100      	bne.n	ba70 <bt_smp_encrypt_change+0x34>
    ba6e:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ba70:	f3bf 8f5b 	dmb	ish
    ba74:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    ba78:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    ba7c:	f011 0f08 	tst.w	r1, #8
    ba80:	d04b      	beq.n	bb1a <bt_smp_encrypt_change+0xde>
    ba82:	f3bf 8f5b 	dmb	ish
    ba86:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    ba8a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ba8e:	f011 0f20 	tst.w	r1, #32
    ba92:	d015      	beq.n	bac0 <bt_smp_encrypt_change+0x84>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    ba94:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    ba98:	f011 0f08 	tst.w	r1, #8
    ba9c:	d004      	beq.n	baa8 <bt_smp_encrypt_change+0x6c>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
    ba9e:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    baa2:	f011 0f08 	tst.w	r1, #8
    baa6:	d146      	bne.n	bb36 <bt_smp_encrypt_change+0xfa>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    baa8:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    baac:	f021 0108 	bic.w	r1, r1, #8
    bab0:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    bab4:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    bab8:	f021 0108 	bic.w	r1, r1, #8
    babc:	f880 117a 	strb.w	r1, [r0, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    bac0:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    bac4:	f011 0f01 	tst.w	r1, #1
    bac8:	d142      	bne.n	bb50 <bt_smp_encrypt_change+0x114>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    baca:	f011 0f02 	tst.w	r1, #2
    bace:	d14f      	bne.n	bb70 <bt_smp_encrypt_change+0x134>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    bad0:	f011 0f04 	tst.w	r1, #4
    bad4:	d15c      	bne.n	bb90 <bt_smp_encrypt_change+0x154>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bad6:	f3bf 8f5b 	dmb	ish
    bada:	e852 1f00 	ldrex	r1, [r2]
    bade:	f041 0104 	orr.w	r1, r1, #4
    bae2:	e842 1400 	strex	r4, r1, [r2]
    bae6:	2c00      	cmp	r4, #0
    bae8:	d1f7      	bne.n	bada <bt_smp_encrypt_change+0x9e>
    baea:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    baee:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    baf0:	b91b      	cbnz	r3, bafa <bt_smp_encrypt_change+0xbe>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    baf2:	f890 317a 	ldrb.w	r3, [r0, #378]	; 0x17a
    baf6:	2b00      	cmp	r3, #0
    baf8:	d1b9      	bne.n	ba6e <bt_smp_encrypt_change+0x32>
    bafa:	4604      	mov	r4, r0
	bt_smp_distribute_keys(smp);
    bafc:	f7ff ff58 	bl	b9b0 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    bb00:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    bb04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bb08:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bb0c:	2b00      	cmp	r3, #0
    bb0e:	d1ae      	bne.n	ba6e <bt_smp_encrypt_change+0x32>
		smp_pairing_complete(smp, 0);
    bb10:	2100      	movs	r1, #0
    bb12:	4620      	mov	r0, r4
    bb14:	f7ff fdcb 	bl	b6ae <smp_pairing_complete>
    bb18:	e7a9      	b.n	ba6e <bt_smp_encrypt_change+0x32>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    bb1a:	309c      	adds	r0, #156	; 0x9c
    bb1c:	f3bf 8f5b 	dmb	ish
    bb20:	e850 3f00 	ldrex	r3, [r0]
    bb24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    bb28:	e840 3200 	strex	r2, r3, [r0]
    bb2c:	2a00      	cmp	r2, #0
    bb2e:	d1f7      	bne.n	bb20 <bt_smp_encrypt_change+0xe4>
    bb30:	f3bf 8f5b 	dmb	ish
    bb34:	bd10      	pop	{r4, pc}
    bb36:	f3bf 8f5b 	dmb	ish
    bb3a:	e852 1f00 	ldrex	r1, [r2]
    bb3e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
    bb42:	e842 1400 	strex	r4, r1, [r2]
    bb46:	2c00      	cmp	r4, #0
    bb48:	d1f7      	bne.n	bb3a <bt_smp_encrypt_change+0xfe>
    bb4a:	f3bf 8f5b 	dmb	ish
    bb4e:	e7ab      	b.n	baa8 <bt_smp_encrypt_change+0x6c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    bb50:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    bb54:	f3bf 8f5b 	dmb	ish
    bb58:	e851 4f00 	ldrex	r4, [r1]
    bb5c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    bb60:	e841 4e00 	strex	lr, r4, [r1]
    bb64:	f1be 0f00 	cmp.w	lr, #0
    bb68:	d1f6      	bne.n	bb58 <bt_smp_encrypt_change+0x11c>
    bb6a:	f3bf 8f5b 	dmb	ish
    bb6e:	e7b2      	b.n	bad6 <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    bb70:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    bb74:	f3bf 8f5b 	dmb	ish
    bb78:	e851 4f00 	ldrex	r4, [r1]
    bb7c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    bb80:	e841 4e00 	strex	lr, r4, [r1]
    bb84:	f1be 0f00 	cmp.w	lr, #0
    bb88:	d1f6      	bne.n	bb78 <bt_smp_encrypt_change+0x13c>
    bb8a:	f3bf 8f5b 	dmb	ish
    bb8e:	e7a2      	b.n	bad6 <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    bb90:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    bb94:	f3bf 8f5b 	dmb	ish
    bb98:	e851 4f00 	ldrex	r4, [r1]
    bb9c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    bba0:	e841 4e00 	strex	lr, r4, [r1]
    bba4:	f1be 0f00 	cmp.w	lr, #0
    bba8:	d1f6      	bne.n	bb98 <bt_smp_encrypt_change+0x15c>
    bbaa:	f3bf 8f5b 	dmb	ish
    bbae:	e792      	b.n	bad6 <bt_smp_encrypt_change+0x9a>

0000bbb0 <bt_smp_recv>:
{
    bbb0:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    bbb2:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    bbb4:	898b      	ldrh	r3, [r1, #12]
    bbb6:	b903      	cbnz	r3, bbba <bt_smp_recv+0xa>
    bbb8:	bd70      	pop	{r4, r5, r6, pc}
    bbba:	460c      	mov	r4, r1
    bbbc:	4605      	mov	r5, r0
	net_buf_pull(buf, sizeof(*hdr));
    bbbe:	2101      	movs	r1, #1
    bbc0:	f104 0008 	add.w	r0, r4, #8
    bbc4:	f00f f943 	bl	1ae4e <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bbc8:	f3bf 8f5b 	dmb	ish
    bbcc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bbd0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    bbd4:	f013 0f10 	tst.w	r3, #16
    bbd8:	d1ee      	bne.n	bbb8 <bt_smp_recv+0x8>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    bbda:	7833      	ldrb	r3, [r6, #0]
    bbdc:	2b0d      	cmp	r3, #13
    bbde:	d824      	bhi.n	bc2a <bt_smp_recv+0x7a>
    bbe0:	4a21      	ldr	r2, [pc, #132]	; (bc68 <bt_smp_recv+0xb8>)
    bbe2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    bbe6:	b302      	cbz	r2, bc2a <bt_smp_recv+0x7a>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    bbe8:	f105 029c 	add.w	r2, r5, #156	; 0x9c
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    bbec:	f003 001f 	and.w	r0, r3, #31
    bbf0:	2101      	movs	r1, #1
    bbf2:	4081      	lsls	r1, r0
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bbf4:	095b      	lsrs	r3, r3, #5
    bbf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    bbfa:	43c8      	mvns	r0, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bbfc:	f3bf 8f5b 	dmb	ish
    bc00:	e853 2f00 	ldrex	r2, [r3]
    bc04:	ea02 0e00 	and.w	lr, r2, r0
    bc08:	e843 ec00 	strex	ip, lr, [r3]
    bc0c:	f1bc 0f00 	cmp.w	ip, #0
    bc10:	d1f6      	bne.n	bc00 <bt_smp_recv+0x50>
    bc12:	f3bf 8f5b 	dmb	ish
    bc16:	4211      	tst	r1, r2
    bc18:	d10c      	bne.n	bc34 <bt_smp_recv+0x84>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    bc1a:	7833      	ldrb	r3, [r6, #0]
    bc1c:	2b05      	cmp	r3, #5
    bc1e:	d0cb      	beq.n	bbb8 <bt_smp_recv+0x8>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    bc20:	2108      	movs	r1, #8
    bc22:	4628      	mov	r0, r5
    bc24:	f7ff fd47 	bl	b6b6 <smp_error>
    bc28:	bd70      	pop	{r4, r5, r6, pc}
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    bc2a:	2107      	movs	r1, #7
    bc2c:	4628      	mov	r0, r5
    bc2e:	f7ff fd42 	bl	b6b6 <smp_error>
		return;
    bc32:	bd70      	pop	{r4, r5, r6, pc}
	if (buf->len != handlers[hdr->code].expect_len) {
    bc34:	89a1      	ldrh	r1, [r4, #12]
    bc36:	7832      	ldrb	r2, [r6, #0]
    bc38:	4b0b      	ldr	r3, [pc, #44]	; (bc68 <bt_smp_recv+0xb8>)
    bc3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    bc3e:	791b      	ldrb	r3, [r3, #4]
    bc40:	4299      	cmp	r1, r3
    bc42:	d004      	beq.n	bc4e <bt_smp_recv+0x9e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    bc44:	210a      	movs	r1, #10
    bc46:	4628      	mov	r0, r5
    bc48:	f7ff fd35 	bl	b6b6 <smp_error>
		return;
    bc4c:	bd70      	pop	{r4, r5, r6, pc}
	err = handlers[hdr->code].func(smp, buf);
    bc4e:	4b06      	ldr	r3, [pc, #24]	; (bc68 <bt_smp_recv+0xb8>)
    bc50:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    bc54:	4621      	mov	r1, r4
    bc56:	4628      	mov	r0, r5
    bc58:	4798      	blx	r3
	if (err) {
    bc5a:	4601      	mov	r1, r0
    bc5c:	2800      	cmp	r0, #0
    bc5e:	d0ab      	beq.n	bbb8 <bt_smp_recv+0x8>
		smp_error(smp, err);
    bc60:	4628      	mov	r0, r5
    bc62:	f7ff fd28 	bl	b6b6 <smp_error>
    bc66:	e7a7      	b.n	bbb8 <bt_smp_recv+0x8>
    bc68:	00031664 	.word	0x00031664

0000bc6c <smp_dhkey_check>:
{
    bc6c:	b570      	push	{r4, r5, r6, lr}
    bc6e:	b08c      	sub	sp, #48	; 0x30
    bc70:	4605      	mov	r5, r0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    bc72:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    bc74:	6803      	ldr	r3, [r0, #0]
    bc76:	78dc      	ldrb	r4, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bc78:	b12c      	cbz	r4, bc86 <smp_dhkey_check+0x1a>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    bc7a:	2c01      	cmp	r4, #1
    bc7c:	d058      	beq.n	bd30 <smp_dhkey_check+0xc4>
	return 0;
    bc7e:	2400      	movs	r4, #0
}
    bc80:	4620      	mov	r0, r4
    bc82:	b00c      	add	sp, #48	; 0x30
    bc84:	bd70      	pop	{r4, r5, r6, pc}
		memset(r, 0, sizeof(r));
    bc86:	2210      	movs	r2, #16
    bc88:	2100      	movs	r1, #0
    bc8a:	a808      	add	r0, sp, #32
    bc8c:	f01e fe44 	bl	2a918 <memset>
		switch (smp->method) {
    bc90:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    bc94:	2b03      	cmp	r3, #3
    bc96:	d847      	bhi.n	bd28 <smp_dhkey_check+0xbc>
    bc98:	e8df f003 	tbb	[pc, r3]
    bc9c:	08020208 	.word	0x08020208
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    bca0:	2204      	movs	r2, #4
    bca2:	f505 71ba 	add.w	r1, r5, #372	; 0x174
    bca6:	a808      	add	r0, sp, #32
    bca8:	f7f4 fb0a 	bl	2c0 <memcpy>
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    bcac:	f105 02ad 	add.w	r2, r5, #173	; 0xad
			   &smp->chan.chan.conn->le.resp_addr,
    bcb0:	682b      	ldr	r3, [r5, #0]
    bcb2:	f103 0156 	add.w	r1, r3, #86	; 0x56
			   &smp->chan.chan.conn->le.init_addr, e)) {
    bcb6:	334f      	adds	r3, #79	; 0x4f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    bcb8:	a804      	add	r0, sp, #16
    bcba:	9003      	str	r0, [sp, #12]
    bcbc:	9302      	str	r3, [sp, #8]
    bcbe:	9101      	str	r1, [sp, #4]
    bcc0:	9200      	str	r2, [sp, #0]
    bcc2:	ab08      	add	r3, sp, #32
    bcc4:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
    bcc8:	f105 01d3 	add.w	r1, r5, #211	; 0xd3
    bccc:	f205 1063 	addw	r0, r5, #355	; 0x163
    bcd0:	f7ff f96e 	bl	afb0 <smp_f6>
    bcd4:	b108      	cbz	r0, bcda <smp_dhkey_check+0x6e>
			return BT_SMP_ERR_UNSPECIFIED;
    bcd6:	2408      	movs	r4, #8
    bcd8:	e7d2      	b.n	bc80 <smp_dhkey_check+0x14>
		if (memcmp(e, req->e, 16)) {
    bcda:	2210      	movs	r2, #16
    bcdc:	4631      	mov	r1, r6
    bcde:	eb0d 0002 	add.w	r0, sp, r2
    bce2:	f01e fd85 	bl	2a7f0 <memcmp>
    bce6:	b108      	cbz	r0, bcec <smp_dhkey_check+0x80>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    bce8:	240b      	movs	r4, #11
    bcea:	e7c9      	b.n	bc80 <smp_dhkey_check+0x14>
		enc_size = get_encryption_key_size(smp);
    bcec:	4628      	mov	r0, r5
    bcee:	f7fe fe63 	bl	a9b8 <get_encryption_key_size>
						smp->tk, enc_size) < 0) {
    bcf2:	f105 03e3 	add.w	r3, r5, #227	; 0xe3
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    bcf6:	9002      	str	r0, [sp, #8]
    bcf8:	9301      	str	r3, [sp, #4]
    bcfa:	2300      	movs	r3, #0
    bcfc:	9300      	str	r3, [sp, #0]
    bcfe:	2200      	movs	r2, #0
    bd00:	2300      	movs	r3, #0
    bd02:	6828      	ldr	r0, [r5, #0]
    bd04:	f7fb f898 	bl	6e38 <bt_conn_le_start_encryption>
    bd08:	2800      	cmp	r0, #0
    bd0a:	db0f      	blt.n	bd2c <smp_dhkey_check+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    bd0c:	35a0      	adds	r5, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bd0e:	f3bf 8f5b 	dmb	ish
    bd12:	e855 3f00 	ldrex	r3, [r5]
    bd16:	f043 0302 	orr.w	r3, r3, #2
    bd1a:	e845 3200 	strex	r2, r3, [r5]
    bd1e:	2a00      	cmp	r2, #0
    bd20:	d1f7      	bne.n	bd12 <smp_dhkey_check+0xa6>
    bd22:	f3bf 8f5b 	dmb	ish
		return 0;
    bd26:	e7ab      	b.n	bc80 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    bd28:	2408      	movs	r4, #8
    bd2a:	e7a9      	b.n	bc80 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    bd2c:	2408      	movs	r4, #8
    bd2e:	e7a7      	b.n	bc80 <smp_dhkey_check+0x14>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    bd30:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bd34:	f3bf 8f5b 	dmb	ish
    bd38:	e854 3f00 	ldrex	r3, [r4]
    bd3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    bd40:	e844 3200 	strex	r2, r3, [r4]
    bd44:	2a00      	cmp	r2, #0
    bd46:	d1f7      	bne.n	bd38 <smp_dhkey_check+0xcc>
    bd48:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    bd4c:	2210      	movs	r2, #16
    bd4e:	4631      	mov	r1, r6
    bd50:	f205 1053 	addw	r0, r5, #339	; 0x153
    bd54:	f7f4 fab4 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bd58:	f3bf 8f5b 	dmb	ish
    bd5c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bd60:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    bd64:	f013 0f80 	tst.w	r3, #128	; 0x80
    bd68:	d10d      	bne.n	bd86 <smp_dhkey_check+0x11a>
    bd6a:	f3bf 8f5b 	dmb	ish
    bd6e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bd72:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    bd76:	f413 7f00 	tst.w	r3, #512	; 0x200
    bd7a:	d112      	bne.n	bda2 <smp_dhkey_check+0x136>
		return compute_and_check_and_send_slave_dhcheck(smp);
    bd7c:	4628      	mov	r0, r5
    bd7e:	f7ff f9f5 	bl	b16c <compute_and_check_and_send_slave_dhcheck>
    bd82:	4604      	mov	r4, r0
    bd84:	e77c      	b.n	bc80 <smp_dhkey_check+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bd86:	f3bf 8f5b 	dmb	ish
    bd8a:	e854 3f00 	ldrex	r3, [r4]
    bd8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bd92:	e844 3200 	strex	r2, r3, [r4]
    bd96:	2a00      	cmp	r2, #0
    bd98:	d1f7      	bne.n	bd8a <smp_dhkey_check+0x11e>
    bd9a:	f3bf 8f5b 	dmb	ish
			return 0;
    bd9e:	2400      	movs	r4, #0
    bda0:	e76e      	b.n	bc80 <smp_dhkey_check+0x14>
    bda2:	f3bf 8f5b 	dmb	ish
    bda6:	e854 3f00 	ldrex	r3, [r4]
    bdaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bdae:	e844 3200 	strex	r2, r3, [r4]
    bdb2:	2a00      	cmp	r2, #0
    bdb4:	d1f7      	bne.n	bda6 <smp_dhkey_check+0x13a>
    bdb6:	f3bf 8f5b 	dmb	ish
			return 0;
    bdba:	2400      	movs	r4, #0
    bdbc:	e760      	b.n	bc80 <smp_dhkey_check+0x14>

0000bdbe <legacy_pairing_random>:
{
    bdbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bdc2:	b088      	sub	sp, #32
    bdc4:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    bdc6:	4605      	mov	r5, r0
    bdc8:	f855 6be3 	ldr.w	r6, [r5], #227
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    bdcc:	f100 08d3 	add.w	r8, r0, #211	; 0xd3
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    bdd0:	f106 034f 	add.w	r3, r6, #79	; 0x4f
    bdd4:	f106 0256 	add.w	r2, r6, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    bdd8:	a904      	add	r1, sp, #16
    bdda:	9102      	str	r1, [sp, #8]
    bddc:	9201      	str	r2, [sp, #4]
    bdde:	9300      	str	r3, [sp, #0]
    bde0:	f100 03ac 	add.w	r3, r0, #172	; 0xac
    bde4:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
    bde8:	4641      	mov	r1, r8
    bdea:	4628      	mov	r0, r5
    bdec:	f7ff fada 	bl	b3a4 <smp_c1>
	if (err) {
    bdf0:	b120      	cbz	r0, bdfc <legacy_pairing_random+0x3e>
		return BT_SMP_ERR_UNSPECIFIED;
    bdf2:	2708      	movs	r7, #8
}
    bdf4:	4638      	mov	r0, r7
    bdf6:	b008      	add	sp, #32
    bdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    bdfc:	2210      	movs	r2, #16
    bdfe:	eb0d 0102 	add.w	r1, sp, r2
    be02:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    be06:	f01e fcf3 	bl	2a7f0 <memcmp>
    be0a:	b108      	cbz	r0, be10 <legacy_pairing_random+0x52>
		return BT_SMP_ERR_CONFIRM_FAILED;
    be0c:	2704      	movs	r7, #4
    be0e:	e7f1      	b.n	bdf4 <legacy_pairing_random+0x36>
	    conn->role == BT_HCI_ROLE_MASTER) {
    be10:	78f7      	ldrb	r7, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    be12:	bb3f      	cbnz	r7, be64 <legacy_pairing_random+0xa6>
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
    be14:	ab04      	add	r3, sp, #16
    be16:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    be1a:	4641      	mov	r1, r8
    be1c:	4628      	mov	r0, r5
    be1e:	f7ff fbf0 	bl	b602 <smp_s1>
		if (err) {
    be22:	b108      	cbz	r0, be28 <legacy_pairing_random+0x6a>
			return BT_SMP_ERR_UNSPECIFIED;
    be24:	2708      	movs	r7, #8
    be26:	e7e5      	b.n	bdf4 <legacy_pairing_random+0x36>
						get_encryption_key_size(smp))) {
    be28:	4620      	mov	r0, r4
    be2a:	f7fe fdc5 	bl	a9b8 <get_encryption_key_size>
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    be2e:	9002      	str	r0, [sp, #8]
    be30:	ab04      	add	r3, sp, #16
    be32:	9301      	str	r3, [sp, #4]
    be34:	2300      	movs	r3, #0
    be36:	9300      	str	r3, [sp, #0]
    be38:	2200      	movs	r2, #0
    be3a:	2300      	movs	r3, #0
    be3c:	4630      	mov	r0, r6
    be3e:	f7fa fffb 	bl	6e38 <bt_conn_le_start_encryption>
    be42:	b108      	cbz	r0, be48 <legacy_pairing_random+0x8a>
			return BT_SMP_ERR_UNSPECIFIED;
    be44:	2708      	movs	r7, #8
    be46:	e7d5      	b.n	bdf4 <legacy_pairing_random+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    be48:	34a0      	adds	r4, #160	; 0xa0
    be4a:	f3bf 8f5b 	dmb	ish
    be4e:	e854 3f00 	ldrex	r3, [r4]
    be52:	f043 0302 	orr.w	r3, r3, #2
    be56:	e844 3200 	strex	r2, r3, [r4]
    be5a:	2a00      	cmp	r2, #0
    be5c:	d1f7      	bne.n	be4e <legacy_pairing_random+0x90>
    be5e:	f3bf 8f5b 	dmb	ish
		return 0;
    be62:	e7c7      	b.n	bdf4 <legacy_pairing_random+0x36>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
    be64:	ab04      	add	r3, sp, #16
    be66:	4642      	mov	r2, r8
    be68:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    be6c:	4628      	mov	r0, r5
    be6e:	f7ff fbc8 	bl	b602 <smp_s1>
		if (err) {
    be72:	b108      	cbz	r0, be78 <legacy_pairing_random+0xba>
			return BT_SMP_ERR_UNSPECIFIED;
    be74:	2708      	movs	r7, #8
    be76:	e7bd      	b.n	bdf4 <legacy_pairing_random+0x36>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    be78:	2210      	movs	r2, #16
    be7a:	eb0d 0102 	add.w	r1, sp, r2
    be7e:	4628      	mov	r0, r5
    be80:	f7f4 fa1e 	bl	2c0 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    be84:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    be88:	f3bf 8f5b 	dmb	ish
    be8c:	e853 2f00 	ldrex	r2, [r3]
    be90:	f042 0202 	orr.w	r2, r2, #2
    be94:	e843 2100 	strex	r1, r2, [r3]
    be98:	2900      	cmp	r1, #0
    be9a:	d1f7      	bne.n	be8c <legacy_pairing_random+0xce>
    be9c:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    bea0:	4620      	mov	r0, r4
    bea2:	f7fe feea 	bl	ac7a <smp_send_pairing_random>
	return 0;
    bea6:	2700      	movs	r7, #0
    bea8:	e7a4      	b.n	bdf4 <legacy_pairing_random+0x36>
	...

0000beac <smp_pairing_random>:
{
    beac:	b5f0      	push	{r4, r5, r6, r7, lr}
    beae:	b085      	sub	sp, #20
    beb0:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    beb2:	f100 05d3 	add.w	r5, r0, #211	; 0xd3
    beb6:	2210      	movs	r2, #16
    beb8:	6889      	ldr	r1, [r1, #8]
    beba:	4628      	mov	r0, r5
    bebc:	f7f4 fa00 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bec0:	f3bf 8f5b 	dmb	ish
    bec4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bec8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    becc:	f013 0f20 	tst.w	r3, #32
    bed0:	d00d      	beq.n	beee <smp_pairing_random+0x42>
    bed2:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    bed6:	6823      	ldr	r3, [r4, #0]
    bed8:	78db      	ldrb	r3, [r3, #3]
    beda:	b17b      	cbz	r3, befc <smp_pairing_random+0x50>
	switch (smp->method) {
    bedc:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bee0:	2b03      	cmp	r3, #3
    bee2:	f200 8106 	bhi.w	c0f2 <smp_pairing_random+0x246>
    bee6:	e8df f003 	tbb	[pc, r3]
    beea:	bfa0      	.short	0xbfa0
    beec:	81bf      	.short	0x81bf
		return legacy_pairing_random(smp);
    beee:	4620      	mov	r0, r4
    bef0:	f7ff ff65 	bl	bdbe <legacy_pairing_random>
    bef4:	4606      	mov	r6, r0
}
    bef6:	4630      	mov	r0, r6
    bef8:	b005      	add	sp, #20
    befa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sc_smp_check_confirm(smp);
    befc:	4620      	mov	r0, r4
    befe:	f7fe ff83 	bl	ae08 <sc_smp_check_confirm>
		if (err) {
    bf02:	4606      	mov	r6, r0
    bf04:	2800      	cmp	r0, #0
    bf06:	d1f6      	bne.n	bef6 <smp_pairing_random+0x4a>
		switch (smp->method) {
    bf08:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bf0c:	2b03      	cmp	r3, #3
    bf0e:	f200 80ee 	bhi.w	c0ee <smp_pairing_random+0x242>
    bf12:	e8df f003 	tbb	[pc, r3]
    bf16:	2e50      	.short	0x2e50
    bf18:	022e      	.short	0x022e
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    bf1a:	ab03      	add	r3, sp, #12
    bf1c:	9300      	str	r3, [sp, #0]
    bf1e:	462b      	mov	r3, r5
    bf20:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    bf24:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    bf28:	4873      	ldr	r0, [pc, #460]	; (c0f8 <smp_pairing_random+0x24c>)
    bf2a:	f7ff f995 	bl	b258 <smp_g2>
    bf2e:	b108      	cbz	r0, bf34 <smp_pairing_random+0x88>
				return BT_SMP_ERR_UNSPECIFIED;
    bf30:	2608      	movs	r6, #8
    bf32:	e7e0      	b.n	bef6 <smp_pairing_random+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bf34:	f3bf 8f5b 	dmb	ish
    bf38:	e857 3f00 	ldrex	r3, [r7]
    bf3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bf40:	e847 3200 	strex	r2, r3, [r7]
    bf44:	2a00      	cmp	r2, #0
    bf46:	d1f7      	bne.n	bf38 <smp_pairing_random+0x8c>
    bf48:	f3bf 8f5b 	dmb	ish
    bf4c:	f3bf 8f5b 	dmb	ish
    bf50:	e857 3f00 	ldrex	r3, [r7]
    bf54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bf58:	e847 3200 	strex	r2, r3, [r7]
    bf5c:	2a00      	cmp	r2, #0
    bf5e:	d1f7      	bne.n	bf50 <smp_pairing_random+0xa4>
    bf60:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    bf64:	4b65      	ldr	r3, [pc, #404]	; (c0fc <smp_pairing_random+0x250>)
    bf66:	681b      	ldr	r3, [r3, #0]
    bf68:	689b      	ldr	r3, [r3, #8]
    bf6a:	9903      	ldr	r1, [sp, #12]
    bf6c:	6820      	ldr	r0, [r4, #0]
    bf6e:	4798      	blx	r3
			return 0;
    bf70:	e7c1      	b.n	bef6 <smp_pairing_random+0x4a>
			smp->passkey_round++;
    bf72:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    bf76:	3301      	adds	r3, #1
    bf78:	b2db      	uxtb	r3, r3
    bf7a:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			if (smp->passkey_round == 20) {
    bf7e:	2b14      	cmp	r3, #20
    bf80:	d019      	beq.n	bfb6 <smp_pairing_random+0x10a>
			if (bt_rand(smp->prnd, 16)) {
    bf82:	2110      	movs	r1, #16
    bf84:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    bf88:	f005 fb9e 	bl	116c8 <bt_rand>
    bf8c:	b108      	cbz	r0, bf92 <smp_pairing_random+0xe6>
				return BT_SMP_ERR_UNSPECIFIED;
    bf8e:	2608      	movs	r6, #8
    bf90:	e7b1      	b.n	bef6 <smp_pairing_random+0x4a>
			atomic_set_bit(&smp->allowed_cmds,
    bf92:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    bf96:	f3bf 8f5b 	dmb	ish
    bf9a:	e853 2f00 	ldrex	r2, [r3]
    bf9e:	f042 0208 	orr.w	r2, r2, #8
    bfa2:	e843 2100 	strex	r1, r2, [r3]
    bfa6:	2900      	cmp	r1, #0
    bfa8:	d1f7      	bne.n	bf9a <smp_pairing_random+0xee>
    bfaa:	f3bf 8f5b 	dmb	ish
			smp_send_pairing_confirm(smp);
    bfae:	4620      	mov	r0, r4
    bfb0:	f7ff f9aa 	bl	b308 <smp_send_pairing_confirm>
			return 0;
    bfb4:	e79f      	b.n	bef6 <smp_pairing_random+0x4a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bfb6:	f3bf 8f5b 	dmb	ish
    bfba:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bfbe:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    bfc2:	f013 0f80 	tst.w	r3, #128	; 0x80
    bfc6:	d00c      	beq.n	bfe2 <smp_pairing_random+0x136>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bfc8:	f3bf 8f5b 	dmb	ish
    bfcc:	e857 3f00 	ldrex	r3, [r7]
    bfd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bfd4:	e847 3200 	strex	r2, r3, [r7]
    bfd8:	2a00      	cmp	r2, #0
    bfda:	d1f7      	bne.n	bfcc <smp_pairing_random+0x120>
    bfdc:	f3bf 8f5b 	dmb	ish
			return 0;
    bfe0:	e789      	b.n	bef6 <smp_pairing_random+0x4a>
		return compute_and_send_master_dhcheck(smp);
    bfe2:	4620      	mov	r0, r4
    bfe4:	f7ff f868 	bl	b0b8 <compute_and_send_master_dhcheck>
    bfe8:	4606      	mov	r6, r0
    bfea:	e784      	b.n	bef6 <smp_pairing_random+0x4a>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    bfec:	ab03      	add	r3, sp, #12
    bfee:	9300      	str	r3, [sp, #0]
    bff0:	f104 03c3 	add.w	r3, r4, #195	; 0xc3
    bff4:	462a      	mov	r2, r5
    bff6:	4940      	ldr	r1, [pc, #256]	; (c0f8 <smp_pairing_random+0x24c>)
    bff8:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    bffc:	f7ff f92c 	bl	b258 <smp_g2>
    c000:	b108      	cbz	r0, c006 <smp_pairing_random+0x15a>
			return BT_SMP_ERR_UNSPECIFIED;
    c002:	2608      	movs	r6, #8
    c004:	e777      	b.n	bef6 <smp_pairing_random+0x4a>
    c006:	f3bf 8f5b 	dmb	ish
    c00a:	e857 3f00 	ldrex	r3, [r7]
    c00e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c012:	e847 3200 	strex	r2, r3, [r7]
    c016:	2a00      	cmp	r2, #0
    c018:	d1f7      	bne.n	c00a <smp_pairing_random+0x15e>
    c01a:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    c01e:	4b37      	ldr	r3, [pc, #220]	; (c0fc <smp_pairing_random+0x250>)
    c020:	681b      	ldr	r3, [r3, #0]
    c022:	689b      	ldr	r3, [r3, #8]
    c024:	9903      	ldr	r1, [sp, #12]
    c026:	6820      	ldr	r0, [r4, #0]
    c028:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    c02a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c02e:	f3bf 8f5b 	dmb	ish
    c032:	e853 2f00 	ldrex	r2, [r3]
    c036:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    c03a:	e843 2100 	strex	r1, r2, [r3]
    c03e:	2900      	cmp	r1, #0
    c040:	d1f7      	bne.n	c032 <smp_pairing_random+0x186>
    c042:	f3bf 8f5b 	dmb	ish
    c046:	f3bf 8f5b 	dmb	ish
    c04a:	e857 3f00 	ldrex	r3, [r7]
    c04e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c052:	e847 3200 	strex	r2, r3, [r7]
    c056:	2a00      	cmp	r2, #0
    c058:	d1f7      	bne.n	c04a <smp_pairing_random+0x19e>
    c05a:	f3bf 8f5b 	dmb	ish
	smp_send_pairing_random(smp);
    c05e:	4620      	mov	r0, r4
    c060:	f7fe fe0b 	bl	ac7a <smp_send_pairing_random>
	return 0;
    c064:	2600      	movs	r6, #0
    c066:	e746      	b.n	bef6 <smp_pairing_random+0x4a>
		err = sc_smp_check_confirm(smp);
    c068:	4620      	mov	r0, r4
    c06a:	f7fe fecd 	bl	ae08 <sc_smp_check_confirm>
		if (err) {
    c06e:	4606      	mov	r6, r0
    c070:	2800      	cmp	r0, #0
    c072:	f47f af40 	bne.w	bef6 <smp_pairing_random+0x4a>
		atomic_set_bit(&smp->allowed_cmds,
    c076:	f104 059c 	add.w	r5, r4, #156	; 0x9c
    c07a:	f3bf 8f5b 	dmb	ish
    c07e:	e855 3f00 	ldrex	r3, [r5]
    c082:	f043 0308 	orr.w	r3, r3, #8
    c086:	e845 3200 	strex	r2, r3, [r5]
    c08a:	2a00      	cmp	r2, #0
    c08c:	d1f7      	bne.n	c07e <smp_pairing_random+0x1d2>
    c08e:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    c092:	4620      	mov	r0, r4
    c094:	f7fe fdf1 	bl	ac7a <smp_send_pairing_random>
		smp->passkey_round++;
    c098:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    c09c:	3301      	adds	r3, #1
    c09e:	b2db      	uxtb	r3, r3
    c0a0:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		if (smp->passkey_round == 20) {
    c0a4:	2b14      	cmp	r3, #20
    c0a6:	d009      	beq.n	c0bc <smp_pairing_random+0x210>
		if (bt_rand(smp->prnd, 16)) {
    c0a8:	2110      	movs	r1, #16
    c0aa:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    c0ae:	f005 fb0b 	bl	116c8 <bt_rand>
    c0b2:	2800      	cmp	r0, #0
    c0b4:	f43f af1f 	beq.w	bef6 <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    c0b8:	2608      	movs	r6, #8
    c0ba:	e71c      	b.n	bef6 <smp_pairing_random+0x4a>
    c0bc:	f3bf 8f5b 	dmb	ish
    c0c0:	e855 3f00 	ldrex	r3, [r5]
    c0c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c0c8:	e845 3200 	strex	r2, r3, [r5]
    c0cc:	2a00      	cmp	r2, #0
    c0ce:	d1f7      	bne.n	c0c0 <smp_pairing_random+0x214>
    c0d0:	f3bf 8f5b 	dmb	ish
    c0d4:	f3bf 8f5b 	dmb	ish
    c0d8:	e857 3f00 	ldrex	r3, [r7]
    c0dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c0e0:	e847 3200 	strex	r2, r3, [r7]
    c0e4:	2a00      	cmp	r2, #0
    c0e6:	d1f7      	bne.n	c0d8 <smp_pairing_random+0x22c>
    c0e8:	f3bf 8f5b 	dmb	ish
			return 0;
    c0ec:	e703      	b.n	bef6 <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    c0ee:	2608      	movs	r6, #8
    c0f0:	e701      	b.n	bef6 <smp_pairing_random+0x4a>
		return BT_SMP_ERR_UNSPECIFIED;
    c0f2:	2608      	movs	r6, #8
    c0f4:	e6ff      	b.n	bef6 <smp_pairing_random+0x4a>
    c0f6:	bf00      	nop
    c0f8:	20000a6c 	.word	0x20000a6c
    c0fc:	20002ab0 	.word	0x20002ab0

0000c100 <generate_dhkey>:
{
    c100:	b510      	push	{r4, lr}
    c102:	4604      	mov	r4, r0
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    c104:	490a      	ldr	r1, [pc, #40]	; (c130 <generate_dhkey+0x30>)
    c106:	30f3      	adds	r0, #243	; 0xf3
    c108:	f7fa fd1e 	bl	6b48 <bt_dh_key_gen>
    c10c:	b108      	cbz	r0, c112 <generate_dhkey+0x12>
		return BT_SMP_ERR_UNSPECIFIED;
    c10e:	2008      	movs	r0, #8
}
    c110:	bd10      	pop	{r4, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    c112:	34a0      	adds	r4, #160	; 0xa0
    c114:	f3bf 8f5b 	dmb	ish
    c118:	e854 3f00 	ldrex	r3, [r4]
    c11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c120:	e844 3200 	strex	r2, r3, [r4]
    c124:	2a00      	cmp	r2, #0
    c126:	d1f7      	bne.n	c118 <generate_dhkey+0x18>
    c128:	f3bf 8f5b 	dmb	ish
	return 0;
    c12c:	bd10      	pop	{r4, pc}
    c12e:	bf00      	nop
    c130:	0000b6f1 	.word	0x0000b6f1

0000c134 <smp_public_key_slave>:
{
    c134:	b510      	push	{r4, lr}
    c136:	4604      	mov	r4, r0
	err = sc_send_public_key(smp);
    c138:	f7fe fd60 	bl	abfc <sc_send_public_key>
	if (err) {
    c13c:	4603      	mov	r3, r0
    c13e:	2800      	cmp	r0, #0
    c140:	d154      	bne.n	c1ec <smp_public_key_slave+0xb8>
	switch (smp->method) {
    c142:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c146:	2b03      	cmp	r3, #3
    c148:	d852      	bhi.n	c1f0 <smp_public_key_slave+0xbc>
    c14a:	e8df f003 	tbb	[pc, r3]
    c14e:	2a02      	.short	0x2a02
    c150:	0216      	.short	0x0216
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    c152:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c156:	f3bf 8f5b 	dmb	ish
    c15a:	e853 2f00 	ldrex	r2, [r3]
    c15e:	f042 0210 	orr.w	r2, r2, #16
    c162:	e843 2100 	strex	r1, r2, [r3]
    c166:	2900      	cmp	r1, #0
    c168:	d1f7      	bne.n	c15a <smp_public_key_slave+0x26>
    c16a:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
    c16e:	4620      	mov	r0, r4
    c170:	f7ff f8ca 	bl	b308 <smp_send_pairing_confirm>
		if (err) {
    c174:	4603      	mov	r3, r0
    c176:	b3a8      	cbz	r0, c1e4 <smp_public_key_slave+0xb0>
    c178:	e038      	b.n	c1ec <smp_public_key_slave+0xb8>
		err = display_passkey(smp);
    c17a:	4620      	mov	r0, r4
    c17c:	f7fe fcea 	bl	ab54 <display_passkey>
		if (err) {
    c180:	4603      	mov	r3, r0
    c182:	bb98      	cbnz	r0, c1ec <smp_public_key_slave+0xb8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c184:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c188:	f3bf 8f5b 	dmb	ish
    c18c:	e853 2f00 	ldrex	r2, [r3]
    c190:	f042 0208 	orr.w	r2, r2, #8
    c194:	e843 2100 	strex	r1, r2, [r3]
    c198:	2900      	cmp	r1, #0
    c19a:	d1f7      	bne.n	c18c <smp_public_key_slave+0x58>
    c19c:	f3bf 8f5b 	dmb	ish
    c1a0:	e020      	b.n	c1e4 <smp_public_key_slave+0xb0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c1a2:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c1a6:	f3bf 8f5b 	dmb	ish
    c1aa:	e853 2f00 	ldrex	r2, [r3]
    c1ae:	f042 0208 	orr.w	r2, r2, #8
    c1b2:	e843 2100 	strex	r1, r2, [r3]
    c1b6:	2900      	cmp	r1, #0
    c1b8:	d1f7      	bne.n	c1aa <smp_public_key_slave+0x76>
    c1ba:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c1be:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c1c2:	f3bf 8f5b 	dmb	ish
    c1c6:	e853 2f00 	ldrex	r2, [r3]
    c1ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    c1ce:	e843 2100 	strex	r1, r2, [r3]
    c1d2:	2900      	cmp	r1, #0
    c1d4:	d1f7      	bne.n	c1c6 <smp_public_key_slave+0x92>
    c1d6:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(smp->chan.chan.conn);
    c1da:	4b06      	ldr	r3, [pc, #24]	; (c1f4 <smp_public_key_slave+0xc0>)
    c1dc:	681b      	ldr	r3, [r3, #0]
    c1de:	685b      	ldr	r3, [r3, #4]
    c1e0:	6820      	ldr	r0, [r4, #0]
    c1e2:	4798      	blx	r3
	return generate_dhkey(smp);
    c1e4:	4620      	mov	r0, r4
    c1e6:	f7ff ff8b 	bl	c100 <generate_dhkey>
    c1ea:	4603      	mov	r3, r0
}
    c1ec:	4618      	mov	r0, r3
    c1ee:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    c1f0:	2308      	movs	r3, #8
    c1f2:	e7fb      	b.n	c1ec <smp_public_key_slave+0xb8>
    c1f4:	20002ab0 	.word	0x20002ab0

0000c1f8 <bt_smp_pkey_ready>:
{
    c1f8:	b538      	push	{r3, r4, r5, lr}
	if (!pkey) {
    c1fa:	b150      	cbz	r0, c212 <bt_smp_pkey_ready+0x1a>
    c1fc:	4601      	mov	r1, r0
	memcpy(sc_public_key, pkey, 64);
    c1fe:	2240      	movs	r2, #64	; 0x40
    c200:	4826      	ldr	r0, [pc, #152]	; (c29c <bt_smp_pkey_ready+0xa4>)
    c202:	f7f4 f85d 	bl	2c0 <memcpy>
	sc_local_pkey_valid = true;
    c206:	2201      	movs	r2, #1
    c208:	4b25      	ldr	r3, [pc, #148]	; (c2a0 <bt_smp_pkey_ready+0xa8>)
    c20a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    c20c:	2400      	movs	r4, #0
    c20e:	b124      	cbz	r4, c21a <bt_smp_pkey_ready+0x22>
    c210:	bd38      	pop	{r3, r4, r5, pc}
		sc_local_pkey_valid = false;
    c212:	2200      	movs	r2, #0
    c214:	4b22      	ldr	r3, [pc, #136]	; (c2a0 <bt_smp_pkey_ready+0xa8>)
    c216:	701a      	strb	r2, [r3, #0]
		return;
    c218:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_smp *smp = &bt_smp_pool[i];
    c21a:	4a22      	ldr	r2, [pc, #136]	; (c2a4 <bt_smp_pkey_ready+0xac>)
    c21c:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c220:	fb03 f304 	mul.w	r3, r3, r4
    c224:	18d5      	adds	r5, r2, r3
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    c226:	33a0      	adds	r3, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c228:	f3bf 8f5b 	dmb	ish
    c22c:	58d3      	ldr	r3, [r2, r3]
    c22e:	f3bf 8f5b 	dmb	ish
    c232:	f013 0f40 	tst.w	r3, #64	; 0x40
    c236:	d020      	beq.n	c27a <bt_smp_pkey_ready+0x82>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c238:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c23c:	fb03 f304 	mul.w	r3, r3, r4
    c240:	58d3      	ldr	r3, [r2, r3]
    c242:	78db      	ldrb	r3, [r3, #3]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c244:	b9fb      	cbnz	r3, c286 <bt_smp_pkey_ready+0x8e>
			err = sc_send_public_key(smp);
    c246:	4628      	mov	r0, r5
    c248:	f7fe fcd8 	bl	abfc <sc_send_public_key>
			if (err) {
    c24c:	4601      	mov	r1, r0
    c24e:	b9b0      	cbnz	r0, c27e <bt_smp_pkey_ready+0x86>
			atomic_set_bit(&smp->allowed_cmds,
    c250:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c254:	fb03 f304 	mul.w	r3, r3, r4
    c258:	f103 0298 	add.w	r2, r3, #152	; 0x98
    c25c:	4b11      	ldr	r3, [pc, #68]	; (c2a4 <bt_smp_pkey_ready+0xac>)
    c25e:	4413      	add	r3, r2
    c260:	3304      	adds	r3, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c262:	f3bf 8f5b 	dmb	ish
    c266:	e853 2f00 	ldrex	r2, [r3]
    c26a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c26e:	e843 2100 	strex	r1, r2, [r3]
    c272:	2900      	cmp	r1, #0
    c274:	d1f7      	bne.n	c266 <bt_smp_pkey_ready+0x6e>
    c276:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    c27a:	3401      	adds	r4, #1
    c27c:	e7c7      	b.n	c20e <bt_smp_pkey_ready+0x16>
				smp_error(smp, err);
    c27e:	4628      	mov	r0, r5
    c280:	f7ff fa19 	bl	b6b6 <smp_error>
    c284:	e7e4      	b.n	c250 <bt_smp_pkey_ready+0x58>
		err = smp_public_key_slave(smp);
    c286:	4628      	mov	r0, r5
    c288:	f7ff ff54 	bl	c134 <smp_public_key_slave>
		if (err) {
    c28c:	4601      	mov	r1, r0
    c28e:	2800      	cmp	r0, #0
    c290:	d0f3      	beq.n	c27a <bt_smp_pkey_ready+0x82>
			smp_error(smp, err);
    c292:	4628      	mov	r0, r5
    c294:	f7ff fa0f 	bl	b6b6 <smp_error>
    c298:	e7ef      	b.n	c27a <bt_smp_pkey_ready+0x82>
    c29a:	bf00      	nop
    c29c:	20000a6c 	.word	0x20000a6c
    c2a0:	20000a68 	.word	0x20000a68
    c2a4:	200008c4 	.word	0x200008c4

0000c2a8 <smp_public_key>:
{
    c2a8:	b570      	push	{r4, r5, r6, lr}
    c2aa:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
    c2ac:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    c2ae:	f100 05f3 	add.w	r5, r0, #243	; 0xf3
    c2b2:	2220      	movs	r2, #32
    c2b4:	4631      	mov	r1, r6
    c2b6:	4628      	mov	r0, r5
    c2b8:	f7f4 f802 	bl	2c0 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    c2bc:	2220      	movs	r2, #32
    c2be:	18b1      	adds	r1, r6, r2
    c2c0:	f204 1013 	addw	r0, r4, #275	; 0x113
    c2c4:	f7f3 fffc 	bl	2c0 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    c2c8:	2240      	movs	r2, #64	; 0x40
    c2ca:	493d      	ldr	r1, [pc, #244]	; (c3c0 <smp_public_key+0x118>)
    c2cc:	4628      	mov	r0, r5
    c2ce:	f01e fa8f 	bl	2a7f0 <memcmp>
    c2d2:	b158      	cbz	r0, c2ec <smp_public_key+0x44>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c2d4:	6823      	ldr	r3, [r4, #0]
    c2d6:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c2d8:	2b00      	cmp	r3, #0
    c2da:	d156      	bne.n	c38a <smp_public_key+0xe2>
		switch (smp->method) {
    c2dc:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c2e0:	2b03      	cmp	r3, #3
    c2e2:	d86a      	bhi.n	c3ba <smp_public_key+0x112>
    c2e4:	e8df f003 	tbb	[pc, r3]
    c2e8:	11243d11 	.word	0x11243d11
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    c2ec:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c2f0:	f3bf 8f5b 	dmb	ish
    c2f4:	e853 2f00 	ldrex	r2, [r3]
    c2f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    c2fc:	e843 2100 	strex	r1, r2, [r3]
    c300:	2900      	cmp	r1, #0
    c302:	d1f7      	bne.n	c2f4 <smp_public_key+0x4c>
    c304:	f3bf 8f5b 	dmb	ish
    c308:	e7e4      	b.n	c2d4 <smp_public_key+0x2c>
			atomic_set_bit(&smp->allowed_cmds,
    c30a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c30e:	f3bf 8f5b 	dmb	ish
    c312:	e853 2f00 	ldrex	r2, [r3]
    c316:	f042 0208 	orr.w	r2, r2, #8
    c31a:	e843 2100 	strex	r1, r2, [r3]
    c31e:	2900      	cmp	r1, #0
    c320:	d1f7      	bne.n	c312 <smp_public_key+0x6a>
    c322:	f3bf 8f5b 	dmb	ish
		return generate_dhkey(smp);
    c326:	4620      	mov	r0, r4
    c328:	f7ff feea 	bl	c100 <generate_dhkey>
    c32c:	4603      	mov	r3, r0
    c32e:	e033      	b.n	c398 <smp_public_key+0xf0>
			err = display_passkey(smp);
    c330:	4620      	mov	r0, r4
    c332:	f7fe fc0f 	bl	ab54 <display_passkey>
			if (err) {
    c336:	4603      	mov	r3, r0
    c338:	bb70      	cbnz	r0, c398 <smp_public_key+0xf0>
			atomic_set_bit(&smp->allowed_cmds,
    c33a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c33e:	f3bf 8f5b 	dmb	ish
    c342:	e853 2f00 	ldrex	r2, [r3]
    c346:	f042 0208 	orr.w	r2, r2, #8
    c34a:	e843 2100 	strex	r1, r2, [r3]
    c34e:	2900      	cmp	r1, #0
    c350:	d1f7      	bne.n	c342 <smp_public_key+0x9a>
    c352:	f3bf 8f5b 	dmb	ish
			err = smp_send_pairing_confirm(smp);
    c356:	4620      	mov	r0, r4
    c358:	f7fe ffd6 	bl	b308 <smp_send_pairing_confirm>
			if (err) {
    c35c:	4603      	mov	r3, r0
    c35e:	b9d8      	cbnz	r0, c398 <smp_public_key+0xf0>
    c360:	e7e1      	b.n	c326 <smp_public_key+0x7e>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c362:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c366:	f3bf 8f5b 	dmb	ish
    c36a:	e853 2f00 	ldrex	r2, [r3]
    c36e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    c372:	e843 2100 	strex	r1, r2, [r3]
    c376:	2900      	cmp	r1, #0
    c378:	d1f7      	bne.n	c36a <smp_public_key+0xc2>
    c37a:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_entry(smp->chan.chan.conn);
    c37e:	4b11      	ldr	r3, [pc, #68]	; (c3c4 <smp_public_key+0x11c>)
    c380:	681b      	ldr	r3, [r3, #0]
    c382:	685b      	ldr	r3, [r3, #4]
    c384:	6820      	ldr	r0, [r4, #0]
    c386:	4798      	blx	r3
			break;
    c388:	e7cd      	b.n	c326 <smp_public_key+0x7e>
	if (!sc_local_pkey_valid) {
    c38a:	4b0f      	ldr	r3, [pc, #60]	; (c3c8 <smp_public_key+0x120>)
    c38c:	781b      	ldrb	r3, [r3, #0]
    c38e:	b12b      	cbz	r3, c39c <smp_public_key+0xf4>
	err = smp_public_key_slave(smp);
    c390:	4620      	mov	r0, r4
    c392:	f7ff fecf 	bl	c134 <smp_public_key_slave>
    c396:	4603      	mov	r3, r0
}
    c398:	4618      	mov	r0, r3
    c39a:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    c39c:	34a0      	adds	r4, #160	; 0xa0
    c39e:	f3bf 8f5b 	dmb	ish
    c3a2:	e854 3f00 	ldrex	r3, [r4]
    c3a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c3aa:	e844 3200 	strex	r2, r3, [r4]
    c3ae:	2a00      	cmp	r2, #0
    c3b0:	d1f7      	bne.n	c3a2 <smp_public_key+0xfa>
    c3b2:	f3bf 8f5b 	dmb	ish
		return 0;
    c3b6:	2300      	movs	r3, #0
    c3b8:	e7ee      	b.n	c398 <smp_public_key+0xf0>
			return BT_SMP_ERR_UNSPECIFIED;
    c3ba:	2308      	movs	r3, #8
    c3bc:	e7ec      	b.n	c398 <smp_public_key+0xf0>
    c3be:	bf00      	nop
    c3c0:	00031724 	.word	0x00031724
    c3c4:	20002ab0 	.word	0x20002ab0
    c3c8:	20000a68 	.word	0x20000a68

0000c3cc <smp_signing_info>:
{
    c3cc:	b570      	push	{r4, r5, r6, lr}
    c3ce:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c3d0:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c3d2:	f3bf 8f5b 	dmb	ish
    c3d6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c3da:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c3de:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c3e2:	d111      	bne.n	c408 <smp_signing_info+0x3c>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    c3e4:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c3e8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    c3ec:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c3f0:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c3f2:	b902      	cbnz	r2, c3f6 <smp_signing_info+0x2a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c3f4:	b1ab      	cbz	r3, c422 <smp_signing_info+0x56>
	if (!smp->local_dist && !smp->remote_dist) {
    c3f6:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c3fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c3fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c402:	b193      	cbz	r3, c42a <smp_signing_info+0x5e>
	return 0;
    c404:	2000      	movs	r0, #0
}
    c406:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_signing_info *req = (void *)buf->data;
    c408:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    c40a:	f105 0148 	add.w	r1, r5, #72	; 0x48
    c40e:	2010      	movs	r0, #16
    c410:	f000 ff8e 	bl	d330 <bt_keys_get_type>
		if (!keys) {
    c414:	b178      	cbz	r0, c436 <smp_signing_info+0x6a>
		memcpy(keys->remote_csrk.val, req->csrk,
    c416:	2210      	movs	r2, #16
    c418:	4631      	mov	r1, r6
    c41a:	305c      	adds	r0, #92	; 0x5c
    c41c:	f7f3 ff50 	bl	2c0 <memcpy>
    c420:	e7e0      	b.n	c3e4 <smp_signing_info+0x18>
		bt_smp_distribute_keys(smp);
    c422:	4620      	mov	r0, r4
    c424:	f7ff fac4 	bl	b9b0 <bt_smp_distribute_keys>
    c428:	e7e5      	b.n	c3f6 <smp_signing_info+0x2a>
		smp_pairing_complete(smp, 0);
    c42a:	2100      	movs	r1, #0
    c42c:	4620      	mov	r0, r4
    c42e:	f7ff f93e 	bl	b6ae <smp_pairing_complete>
	return 0;
    c432:	2000      	movs	r0, #0
    c434:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c436:	2008      	movs	r0, #8
    c438:	bd70      	pop	{r4, r5, r6, pc}

0000c43a <smp_ident_info>:
{
    c43a:	b538      	push	{r3, r4, r5, lr}
    c43c:	4604      	mov	r4, r0
    c43e:	f3bf 8f5b 	dmb	ish
    c442:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c446:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c44a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c44e:	d00b      	beq.n	c468 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
    c450:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    c452:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    c454:	3148      	adds	r1, #72	; 0x48
    c456:	2002      	movs	r0, #2
    c458:	f000 ff6a 	bl	d330 <bt_keys_get_type>
		if (!keys) {
    c45c:	b198      	cbz	r0, c486 <smp_ident_info+0x4c>
		memcpy(keys->irk.val, req->irk, 16);
    c45e:	2210      	movs	r2, #16
    c460:	4629      	mov	r1, r5
    c462:	3030      	adds	r0, #48	; 0x30
    c464:	f7f3 ff2c 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    c468:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c46a:	f3bf 8f5b 	dmb	ish
    c46e:	e854 3f00 	ldrex	r3, [r4]
    c472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c476:	e844 3200 	strex	r2, r3, [r4]
    c47a:	2a00      	cmp	r2, #0
    c47c:	d1f7      	bne.n	c46e <smp_ident_info+0x34>
    c47e:	f3bf 8f5b 	dmb	ish
	return 0;
    c482:	2000      	movs	r0, #0
    c484:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c486:	2008      	movs	r0, #8
}
    c488:	bd38      	pop	{r3, r4, r5, pc}

0000c48a <smp_master_ident>:
{
    c48a:	b570      	push	{r4, r5, r6, lr}
    c48c:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c48e:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c490:	f3bf 8f5b 	dmb	ish
    c494:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c498:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c49c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c4a0:	d116      	bne.n	c4d0 <smp_master_ident+0x46>
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    c4a2:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c4a6:	f013 0f02 	tst.w	r3, #2
    c4aa:	d127      	bne.n	c4fc <smp_master_ident+0x72>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c4ac:	f013 0f04 	tst.w	r3, #4
    c4b0:	d133      	bne.n	c51a <smp_master_ident+0x90>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c4b2:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c4b4:	b91b      	cbnz	r3, c4be <smp_master_ident+0x34>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c4b6:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c4ba:	2b00      	cmp	r3, #0
    c4bc:	d03c      	beq.n	c538 <smp_master_ident+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
    c4be:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c4c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c4c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c4ca:	b3cb      	cbz	r3, c540 <smp_master_ident+0xb6>
	return 0;
    c4cc:	2000      	movs	r0, #0
}
    c4ce:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_master_ident *req = (void *)buf->data;
    c4d0:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    c4d2:	f105 0148 	add.w	r1, r5, #72	; 0x48
    c4d6:	2004      	movs	r0, #4
    c4d8:	f000 ff2a 	bl	d330 <bt_keys_get_type>
		if (!keys) {
    c4dc:	b3b0      	cbz	r0, c54c <smp_master_ident+0xc2>
		keys->ltk.ediv = req->ediv;
    c4de:	8832      	ldrh	r2, [r6, #0]
    c4e0:	8302      	strh	r2, [r0, #24]
		keys->ltk.rand = req->rand;
    c4e2:	f8d6 1002 	ldr.w	r1, [r6, #2]
    c4e6:	f8d6 2006 	ldr.w	r2, [r6, #6]
    c4ea:	6101      	str	r1, [r0, #16]
    c4ec:	6142      	str	r2, [r0, #20]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    c4ee:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c4f2:	f023 0301 	bic.w	r3, r3, #1
    c4f6:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
    c4fa:	e7d2      	b.n	c4a2 <smp_master_ident+0x18>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    c4fc:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c500:	f3bf 8f5b 	dmb	ish
    c504:	e853 2f00 	ldrex	r2, [r3]
    c508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    c50c:	e843 2100 	strex	r1, r2, [r3]
    c510:	2900      	cmp	r1, #0
    c512:	d1f7      	bne.n	c504 <smp_master_ident+0x7a>
    c514:	f3bf 8f5b 	dmb	ish
    c518:	e7cb      	b.n	c4b2 <smp_master_ident+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c51a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c51e:	f3bf 8f5b 	dmb	ish
    c522:	e853 2f00 	ldrex	r2, [r3]
    c526:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c52a:	e843 2100 	strex	r1, r2, [r3]
    c52e:	2900      	cmp	r1, #0
    c530:	d1f7      	bne.n	c522 <smp_master_ident+0x98>
    c532:	f3bf 8f5b 	dmb	ish
    c536:	e7bc      	b.n	c4b2 <smp_master_ident+0x28>
		bt_smp_distribute_keys(smp);
    c538:	4620      	mov	r0, r4
    c53a:	f7ff fa39 	bl	b9b0 <bt_smp_distribute_keys>
    c53e:	e7be      	b.n	c4be <smp_master_ident+0x34>
		smp_pairing_complete(smp, 0);
    c540:	2100      	movs	r1, #0
    c542:	4620      	mov	r0, r4
    c544:	f7ff f8b3 	bl	b6ae <smp_pairing_complete>
	return 0;
    c548:	2000      	movs	r0, #0
    c54a:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c54c:	2008      	movs	r0, #8
    c54e:	bd70      	pop	{r4, r5, r6, pc}

0000c550 <smp_encrypt_info>:
{
    c550:	b538      	push	{r3, r4, r5, lr}
    c552:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c554:	f3bf 8f5b 	dmb	ish
    c558:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c55c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c560:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c564:	d00b      	beq.n	c57e <smp_encrypt_info+0x2e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    c566:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    c568:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    c56a:	3148      	adds	r1, #72	; 0x48
    c56c:	2004      	movs	r0, #4
    c56e:	f000 fedf 	bl	d330 <bt_keys_get_type>
		if (!keys) {
    c572:	b198      	cbz	r0, c59c <smp_encrypt_info+0x4c>
		memcpy(keys->ltk.val, req->ltk, 16);
    c574:	2210      	movs	r2, #16
    c576:	4629      	mov	r1, r5
    c578:	301a      	adds	r0, #26
    c57a:	f7f3 fea1 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    c57e:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c580:	f3bf 8f5b 	dmb	ish
    c584:	e854 3f00 	ldrex	r3, [r4]
    c588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c58c:	e844 3200 	strex	r2, r3, [r4]
    c590:	2a00      	cmp	r2, #0
    c592:	d1f7      	bne.n	c584 <smp_encrypt_info+0x34>
    c594:	f3bf 8f5b 	dmb	ish
	return 0;
    c598:	2000      	movs	r0, #0
    c59a:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c59c:	2008      	movs	r0, #8
}
    c59e:	bd38      	pop	{r3, r4, r5, pc}

0000c5a0 <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
    c5a0:	7883      	ldrb	r3, [r0, #2]
    c5a2:	b103      	cbz	r3, c5a6 <smp_check_complete+0x6>
    c5a4:	4770      	bx	lr
{
    c5a6:	b510      	push	{r4, lr}
    c5a8:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    c5aa:	2106      	movs	r1, #6
    c5ac:	f7fb ffa1 	bl	84f2 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    c5b0:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    c5b4:	ea21 0104 	bic.w	r1, r1, r4
    c5b8:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		if (!smp->local_dist && !smp->remote_dist) {
    c5bc:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
    c5c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c5c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c5c8:	b103      	cbz	r3, c5cc <smp_check_complete+0x2c>
    c5ca:	bd10      	pop	{r4, pc}
			smp_pairing_complete(smp, 0);
    c5cc:	2100      	movs	r1, #0
    c5ce:	f7ff f86e 	bl	b6ae <smp_pairing_complete>
    c5d2:	e7fa      	b.n	c5ca <smp_check_complete+0x2a>

0000c5d4 <sign_info_sent>:
{
    c5d4:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
    c5d6:	2104      	movs	r1, #4
    c5d8:	f7ff ffe2 	bl	c5a0 <smp_check_complete>
    c5dc:	bd08      	pop	{r3, pc}

0000c5de <ident_sent>:
{
    c5de:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
    c5e0:	2101      	movs	r1, #1
    c5e2:	f7ff ffdd 	bl	c5a0 <smp_check_complete>
    c5e6:	bd08      	pop	{r3, pc}

0000c5e8 <smp_ident_addr_info>:
{
    c5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    c5ec:	6806      	ldr	r6, [r0, #0]
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    c5ee:	688d      	ldr	r5, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c5f0:	782b      	ldrb	r3, [r5, #0]
    c5f2:	b153      	cbz	r3, c60a <smp_ident_addr_info+0x22>
		return true;
	}

	return BT_ADDR_IS_STATIC(&addr->a);
    c5f4:	79ab      	ldrb	r3, [r5, #6]
    c5f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c5fa:	2bc0      	cmp	r3, #192	; 0xc0
    c5fc:	bf14      	ite	ne
    c5fe:	2300      	movne	r3, #0
    c600:	2301      	moveq	r3, #1
	if (!bt_addr_le_is_identity(&req->addr)) {
    c602:	b923      	cbnz	r3, c60e <smp_ident_addr_info+0x26>
		return BT_SMP_ERR_INVALID_PARAMS;
    c604:	200a      	movs	r0, #10
    c606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    c60a:	2301      	movs	r3, #1
    c60c:	e7f9      	b.n	c602 <smp_ident_addr_info+0x1a>
    c60e:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c610:	f3bf 8f5b 	dmb	ish
    c614:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c618:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c61c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c620:	d119      	bne.n	c656 <smp_ident_addr_info+0x6e>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    c622:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c626:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    c62a:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c62e:	f013 0f04 	tst.w	r3, #4
    c632:	d14f      	bne.n	c6d4 <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c634:	78f3      	ldrb	r3, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c636:	b91b      	cbnz	r3, c640 <smp_ident_addr_info+0x58>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c638:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c63c:	2b00      	cmp	r3, #0
    c63e:	d058      	beq.n	c6f2 <smp_ident_addr_info+0x10a>
	if (!smp->local_dist && !smp->remote_dist) {
    c640:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c644:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c648:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c64c:	2b00      	cmp	r3, #0
    c64e:	d054      	beq.n	c6fa <smp_ident_addr_info+0x112>
	return 0;
    c650:	2000      	movs	r0, #0
}
    c652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    c656:	f106 0848 	add.w	r8, r6, #72	; 0x48
    c65a:	4641      	mov	r1, r8
    c65c:	2002      	movs	r0, #2
    c65e:	f000 fe67 	bl	d330 <bt_keys_get_type>
		if (!keys) {
    c662:	4681      	mov	r9, r0
    c664:	2800      	cmp	r0, #0
    c666:	d04f      	beq.n	c708 <smp_ident_addr_info+0x120>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    c668:	78f3      	ldrb	r3, [r6, #3]
    c66a:	bb43      	cbnz	r3, c6be <smp_ident_addr_info+0xd6>
			dst = &conn->le.resp_addr;
    c66c:	f106 0156 	add.w	r1, r6, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    c670:	780b      	ldrb	r3, [r1, #0]
    c672:	2b01      	cmp	r3, #1
    c674:	d026      	beq.n	c6c4 <smp_ident_addr_info+0xdc>
		return false;
    c676:	2700      	movs	r7, #0
		if (bt_addr_le_is_rpa(dst)) {
    c678:	2f00      	cmp	r7, #0
    c67a:	d0d2      	beq.n	c622 <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    c67c:	2206      	movs	r2, #6
    c67e:	3101      	adds	r1, #1
    c680:	f109 0040 	add.w	r0, r9, #64	; 0x40
    c684:	f7f3 fe1c 	bl	2c0 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c688:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    c68c:	b13b      	cbz	r3, c69e <smp_ident_addr_info+0xb6>
	return BT_ADDR_IS_STATIC(&addr->a);
    c68e:	f896 704e 	ldrb.w	r7, [r6, #78]	; 0x4e
    c692:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    c696:	2fc0      	cmp	r7, #192	; 0xc0
    c698:	bf14      	ite	ne
    c69a:	2700      	movne	r7, #0
    c69c:	2701      	moveq	r7, #1
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    c69e:	2f00      	cmp	r7, #0
    c6a0:	d1bf      	bne.n	c622 <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    c6a2:	2207      	movs	r2, #7
    c6a4:	4629      	mov	r1, r5
    c6a6:	4648      	mov	r0, r9
    c6a8:	f7f3 fe0a 	bl	2c0 <memcpy>
    c6ac:	2207      	movs	r2, #7
    c6ae:	4629      	mov	r1, r5
    c6b0:	4640      	mov	r0, r8
    c6b2:	f7f3 fe05 	bl	2c0 <memcpy>
				bt_conn_identity_resolved(conn);
    c6b6:	4630      	mov	r0, r6
    c6b8:	f7fa fba4 	bl	6e04 <bt_conn_identity_resolved>
    c6bc:	e7b1      	b.n	c622 <smp_ident_addr_info+0x3a>
			dst = &conn->le.init_addr;
    c6be:	f106 014f 	add.w	r1, r6, #79	; 0x4f
    c6c2:	e7d5      	b.n	c670 <smp_ident_addr_info+0x88>
	return BT_ADDR_IS_RPA(&addr->a);
    c6c4:	798f      	ldrb	r7, [r1, #6]
    c6c6:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    c6ca:	2f40      	cmp	r7, #64	; 0x40
    c6cc:	bf14      	ite	ne
    c6ce:	2700      	movne	r7, #0
    c6d0:	2701      	moveq	r7, #1
    c6d2:	e7d1      	b.n	c678 <smp_ident_addr_info+0x90>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c6d4:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c6d8:	f3bf 8f5b 	dmb	ish
    c6dc:	e853 2f00 	ldrex	r2, [r3]
    c6e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c6e4:	e843 2100 	strex	r1, r2, [r3]
    c6e8:	2900      	cmp	r1, #0
    c6ea:	d1f7      	bne.n	c6dc <smp_ident_addr_info+0xf4>
    c6ec:	f3bf 8f5b 	dmb	ish
    c6f0:	e7a0      	b.n	c634 <smp_ident_addr_info+0x4c>
		bt_smp_distribute_keys(smp);
    c6f2:	4620      	mov	r0, r4
    c6f4:	f7ff f95c 	bl	b9b0 <bt_smp_distribute_keys>
    c6f8:	e7a2      	b.n	c640 <smp_ident_addr_info+0x58>
		smp_pairing_complete(smp, 0);
    c6fa:	2100      	movs	r1, #0
    c6fc:	4620      	mov	r0, r4
    c6fe:	f7fe ffd6 	bl	b6ae <smp_pairing_complete>
	return 0;
    c702:	2000      	movs	r0, #0
    c704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c708:	2008      	movs	r0, #8
    c70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000c710 <legacy_request_tk>:
{
    c710:	b570      	push	{r4, r5, r6, lr}
    c712:	b082      	sub	sp, #8
    c714:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c716:	6805      	ldr	r5, [r0, #0]
	keys = bt_keys_find_addr(&conn->le.dst);
    c718:	f105 0048 	add.w	r0, r5, #72	; 0x48
    c71c:	f000 fdea 	bl	d2f4 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    c720:	b168      	cbz	r0, c73e <legacy_request_tk+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c722:	f3bf 8f5b 	dmb	ish
    c726:	6883      	ldr	r3, [r0, #8]
    c728:	f3bf 8f5b 	dmb	ish
    c72c:	f013 0f01 	tst.w	r3, #1
    c730:	d005      	beq.n	c73e <legacy_request_tk+0x2e>
	    smp->method == JUST_WORKS) {
    c732:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    c736:	b913      	cbnz	r3, c73e <legacy_request_tk+0x2e>
		return BT_SMP_ERR_UNSPECIFIED;
    c738:	2008      	movs	r0, #8
}
    c73a:	b002      	add	sp, #8
    c73c:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
    c73e:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c742:	2b01      	cmp	r3, #1
    c744:	d025      	beq.n	c792 <legacy_request_tk+0x82>
    c746:	2b00      	cmp	r3, #0
    c748:	d037      	beq.n	c7ba <legacy_request_tk+0xaa>
    c74a:	2b02      	cmp	r3, #2
    c74c:	d001      	beq.n	c752 <legacy_request_tk+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    c74e:	2008      	movs	r0, #8
    c750:	e7f3      	b.n	c73a <legacy_request_tk+0x2a>
		if (bt_rand(&passkey, sizeof(passkey))) {
    c752:	2104      	movs	r1, #4
    c754:	eb0d 0001 	add.w	r0, sp, r1
    c758:	f004 ffb6 	bl	116c8 <bt_rand>
    c75c:	b108      	cbz	r0, c762 <legacy_request_tk+0x52>
			return BT_SMP_ERR_UNSPECIFIED;
    c75e:	2008      	movs	r0, #8
    c760:	e7eb      	b.n	c73a <legacy_request_tk+0x2a>
		passkey %= 1000000;
    c762:	9b01      	ldr	r3, [sp, #4]
    c764:	4916      	ldr	r1, [pc, #88]	; (c7c0 <legacy_request_tk+0xb0>)
    c766:	fba1 2103 	umull	r2, r1, r1, r3
    c76a:	0c89      	lsrs	r1, r1, #18
    c76c:	4a15      	ldr	r2, [pc, #84]	; (c7c4 <legacy_request_tk+0xb4>)
    c76e:	fb02 3111 	mls	r1, r2, r1, r3
    c772:	ae02      	add	r6, sp, #8
    c774:	f846 1d04 	str.w	r1, [r6, #-4]!
		bt_auth->passkey_display(conn, passkey);
    c778:	4b13      	ldr	r3, [pc, #76]	; (c7c8 <legacy_request_tk+0xb8>)
    c77a:	681b      	ldr	r3, [r3, #0]
    c77c:	681b      	ldr	r3, [r3, #0]
    c77e:	4628      	mov	r0, r5
    c780:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    c782:	2204      	movs	r2, #4
    c784:	4631      	mov	r1, r6
    c786:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    c78a:	f7f3 fd99 	bl	2c0 <memcpy>
	return 0;
    c78e:	2000      	movs	r0, #0
		break;
    c790:	e7d3      	b.n	c73a <legacy_request_tk+0x2a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c792:	34a0      	adds	r4, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c794:	f3bf 8f5b 	dmb	ish
    c798:	e854 3f00 	ldrex	r3, [r4]
    c79c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c7a0:	e844 3200 	strex	r2, r3, [r4]
    c7a4:	2a00      	cmp	r2, #0
    c7a6:	d1f7      	bne.n	c798 <legacy_request_tk+0x88>
    c7a8:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(conn);
    c7ac:	4b06      	ldr	r3, [pc, #24]	; (c7c8 <legacy_request_tk+0xb8>)
    c7ae:	681b      	ldr	r3, [r3, #0]
    c7b0:	685b      	ldr	r3, [r3, #4]
    c7b2:	4628      	mov	r0, r5
    c7b4:	4798      	blx	r3
	return 0;
    c7b6:	2000      	movs	r0, #0
		break;
    c7b8:	e7bf      	b.n	c73a <legacy_request_tk+0x2a>
	return 0;
    c7ba:	2000      	movs	r0, #0
    c7bc:	e7bd      	b.n	c73a <legacy_request_tk+0x2a>
    c7be:	bf00      	nop
    c7c0:	431bde83 	.word	0x431bde83
    c7c4:	000f4240 	.word	0x000f4240
    c7c8:	20002ab0 	.word	0x20002ab0

0000c7cc <legacy_pairing_rsp>:
{
    c7cc:	b538      	push	{r3, r4, r5, lr}
    c7ce:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    c7d0:	f7fe f90a 	bl	a9e8 <legacy_get_pair_method>
    c7d4:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    c7d8:	bb10      	cbnz	r0, c820 <legacy_pairing_rsp+0x54>
    c7da:	4604      	mov	r4, r0
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c7dc:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c7e0:	f3bf 8f5b 	dmb	ish
    c7e4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c7e8:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    c7ec:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c7f0:	d016      	beq.n	c820 <legacy_pairing_rsp+0x54>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c7f2:	4b24      	ldr	r3, [pc, #144]	; (c884 <legacy_pairing_rsp+0xb8>)
    c7f4:	681b      	ldr	r3, [r3, #0]
    c7f6:	b19b      	cbz	r3, c820 <legacy_pairing_rsp+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    c7f8:	691b      	ldr	r3, [r3, #16]
    c7fa:	b18b      	cbz	r3, c820 <legacy_pairing_rsp+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c7fc:	f3bf 8f5b 	dmb	ish
    c800:	e852 3f00 	ldrex	r3, [r2]
    c804:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c808:	e842 3100 	strex	r1, r3, [r2]
    c80c:	2900      	cmp	r1, #0
    c80e:	d1f7      	bne.n	c800 <legacy_pairing_rsp+0x34>
    c810:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    c814:	4b1b      	ldr	r3, [pc, #108]	; (c884 <legacy_pairing_rsp+0xb8>)
    c816:	681b      	ldr	r3, [r3, #0]
    c818:	691b      	ldr	r3, [r3, #16]
    c81a:	6828      	ldr	r0, [r5, #0]
    c81c:	4798      	blx	r3
		return 0;
    c81e:	e004      	b.n	c82a <legacy_pairing_rsp+0x5e>
	ret = legacy_request_tk(smp);
    c820:	4628      	mov	r0, r5
    c822:	f7ff ff75 	bl	c710 <legacy_request_tk>
	if (ret) {
    c826:	4604      	mov	r4, r0
    c828:	b108      	cbz	r0, c82e <legacy_pairing_rsp+0x62>
}
    c82a:	4620      	mov	r0, r4
    c82c:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    c82e:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c832:	f3bf 8f5b 	dmb	ish
    c836:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    c83a:	f3bf 8f5b 	dmb	ish
    c83e:	f412 7f00 	tst.w	r2, #512	; 0x200
    c842:	d00c      	beq.n	c85e <legacy_pairing_rsp+0x92>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c844:	f3bf 8f5b 	dmb	ish
    c848:	e853 2f00 	ldrex	r2, [r3]
    c84c:	f042 0201 	orr.w	r2, r2, #1
    c850:	e843 2100 	strex	r1, r2, [r3]
    c854:	2900      	cmp	r1, #0
    c856:	d1f7      	bne.n	c848 <legacy_pairing_rsp+0x7c>
    c858:	f3bf 8f5b 	dmb	ish
	return 0;
    c85c:	e7e5      	b.n	c82a <legacy_pairing_rsp+0x5e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c85e:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    c862:	f3bf 8f5b 	dmb	ish
    c866:	e853 2f00 	ldrex	r2, [r3]
    c86a:	f042 0208 	orr.w	r2, r2, #8
    c86e:	e843 2100 	strex	r1, r2, [r3]
    c872:	2900      	cmp	r1, #0
    c874:	d1f7      	bne.n	c866 <legacy_pairing_rsp+0x9a>
    c876:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    c87a:	4628      	mov	r0, r5
    c87c:	f7fe fdd8 	bl	b430 <legacy_send_pairing_confirm>
    c880:	4604      	mov	r4, r0
    c882:	e7d2      	b.n	c82a <legacy_pairing_rsp+0x5e>
    c884:	20002ab0 	.word	0x20002ab0

0000c888 <smp_pairing_rsp>:
{
    c888:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    c88a:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    c88c:	78eb      	ldrb	r3, [r5, #3]
    c88e:	3b07      	subs	r3, #7
    c890:	b2db      	uxtb	r3, r3
    c892:	2b09      	cmp	r3, #9
    c894:	d902      	bls.n	c89c <smp_pairing_rsp+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    c896:	2506      	movs	r5, #6
}
    c898:	4628      	mov	r0, r5
    c89a:	bd70      	pop	{r4, r5, r6, pc}
    c89c:	4604      	mov	r4, r0
	smp->local_dist &= rsp->init_key_dist;
    c89e:	792b      	ldrb	r3, [r5, #4]
    c8a0:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
    c8a4:	4013      	ands	r3, r2
    c8a6:	f880 3179 	strb.w	r3, [r0, #377]	; 0x179
	smp->remote_dist &= rsp->resp_key_dist;
    c8aa:	796b      	ldrb	r3, [r5, #5]
    c8ac:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    c8b0:	4013      	ands	r3, r2
    c8b2:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    c8b6:	2302      	movs	r3, #2
    c8b8:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    c8bc:	2206      	movs	r2, #6
    c8be:	4629      	mov	r1, r5
    c8c0:	30ad      	adds	r0, #173	; 0xad
    c8c2:	f7f3 fcfd 	bl	2c0 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c8c6:	78ab      	ldrb	r3, [r5, #2]
    c8c8:	f013 0f08 	tst.w	r3, #8
    c8cc:	d004      	beq.n	c8d8 <smp_pairing_rsp+0x50>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    c8ce:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c8d2:	f013 0f08 	tst.w	r3, #8
    c8d6:	d148      	bne.n	c96a <smp_pairing_rsp+0xe2>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c8d8:	78ab      	ldrb	r3, [r5, #2]
    c8da:	f013 0f20 	tst.w	r3, #32
    c8de:	d004      	beq.n	c8ea <smp_pairing_rsp+0x62>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    c8e0:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c8e4:	f013 0f20 	tst.w	r3, #32
    c8e8:	d14e      	bne.n	c988 <smp_pairing_rsp+0x100>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c8ea:	78ab      	ldrb	r3, [r5, #2]
    c8ec:	f013 0f01 	tst.w	r3, #1
    c8f0:	d004      	beq.n	c8fc <smp_pairing_rsp+0x74>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    c8f2:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c8f6:	f013 0f01 	tst.w	r3, #1
    c8fa:	d154      	bne.n	c9a6 <smp_pairing_rsp+0x11e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c8fc:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c900:	f3bf 8f5b 	dmb	ish
    c904:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c908:	f3bf 8f5b 	dmb	ish
    c90c:	f013 0f20 	tst.w	r3, #32
    c910:	d058      	beq.n	c9c4 <smp_pairing_rsp+0x13c>
	smp->method = get_pair_method(smp, rsp->io_capability);
    c912:	7829      	ldrb	r1, [r5, #0]
    c914:	4620      	mov	r0, r4
    c916:	f7fe f835 	bl	a984 <get_pair_method>
    c91a:	4605      	mov	r5, r0
    c91c:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	smp->local_dist &= SEND_KEYS_SC;
    c920:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    c924:	f003 0304 	and.w	r3, r3, #4
    c928:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist &= RECV_KEYS_SC;
    c92c:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c930:	f003 0306 	and.w	r3, r3, #6
    c934:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->method == JUST_WORKS) {
    c938:	2800      	cmp	r0, #0
    c93a:	d049      	beq.n	c9d0 <smp_pairing_rsp+0x148>
	if (!sc_local_pkey_valid) {
    c93c:	4b3c      	ldr	r3, [pc, #240]	; (ca30 <smp_pairing_rsp+0x1a8>)
    c93e:	781b      	ldrb	r3, [r3, #0]
    c940:	2b00      	cmp	r3, #0
    c942:	d067      	beq.n	ca14 <smp_pairing_rsp+0x18c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    c944:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c948:	f3bf 8f5b 	dmb	ish
    c94c:	e853 2f00 	ldrex	r2, [r3]
    c950:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c954:	e843 2100 	strex	r1, r2, [r3]
    c958:	2900      	cmp	r1, #0
    c95a:	d1f7      	bne.n	c94c <smp_pairing_rsp+0xc4>
    c95c:	f3bf 8f5b 	dmb	ish
	return sc_send_public_key(smp);
    c960:	4620      	mov	r0, r4
    c962:	f7fe f94b 	bl	abfc <sc_send_public_key>
    c966:	4605      	mov	r5, r0
    c968:	e796      	b.n	c898 <smp_pairing_rsp+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    c96a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c96e:	f3bf 8f5b 	dmb	ish
    c972:	e853 2f00 	ldrex	r2, [r3]
    c976:	f042 0220 	orr.w	r2, r2, #32
    c97a:	e843 2100 	strex	r1, r2, [r3]
    c97e:	2900      	cmp	r1, #0
    c980:	d1f7      	bne.n	c972 <smp_pairing_rsp+0xea>
    c982:	f3bf 8f5b 	dmb	ish
    c986:	e7a7      	b.n	c8d8 <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    c988:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c98c:	f3bf 8f5b 	dmb	ish
    c990:	e853 2f00 	ldrex	r2, [r3]
    c994:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    c998:	e843 2100 	strex	r1, r2, [r3]
    c99c:	2900      	cmp	r1, #0
    c99e:	d1f7      	bne.n	c990 <smp_pairing_rsp+0x108>
    c9a0:	f3bf 8f5b 	dmb	ish
    c9a4:	e7a1      	b.n	c8ea <smp_pairing_rsp+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    c9a6:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c9aa:	f3bf 8f5b 	dmb	ish
    c9ae:	e853 2f00 	ldrex	r2, [r3]
    c9b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c9b6:	e843 2100 	strex	r1, r2, [r3]
    c9ba:	2900      	cmp	r1, #0
    c9bc:	d1f7      	bne.n	c9ae <smp_pairing_rsp+0x126>
    c9be:	f3bf 8f5b 	dmb	ish
    c9c2:	e79b      	b.n	c8fc <smp_pairing_rsp+0x74>
		return legacy_pairing_rsp(smp, rsp->io_capability);
    c9c4:	7829      	ldrb	r1, [r5, #0]
    c9c6:	4620      	mov	r0, r4
    c9c8:	f7ff ff00 	bl	c7cc <legacy_pairing_rsp>
    c9cc:	4605      	mov	r5, r0
    c9ce:	e763      	b.n	c898 <smp_pairing_rsp+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c9d0:	f3bf 8f5b 	dmb	ish
    c9d4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c9d8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c9dc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c9e0:	d0ac      	beq.n	c93c <smp_pairing_rsp+0xb4>
    c9e2:	4b14      	ldr	r3, [pc, #80]	; (ca34 <smp_pairing_rsp+0x1ac>)
    c9e4:	681b      	ldr	r3, [r3, #0]
    c9e6:	2b00      	cmp	r3, #0
    c9e8:	d0a8      	beq.n	c93c <smp_pairing_rsp+0xb4>
		    bt_auth && bt_auth->pairing_confirm) {
    c9ea:	691b      	ldr	r3, [r3, #16]
    c9ec:	2b00      	cmp	r3, #0
    c9ee:	d0a5      	beq.n	c93c <smp_pairing_rsp+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c9f0:	f3bf 8f5b 	dmb	ish
    c9f4:	e856 3f00 	ldrex	r3, [r6]
    c9f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c9fc:	e846 3200 	strex	r2, r3, [r6]
    ca00:	2a00      	cmp	r2, #0
    ca02:	d1f7      	bne.n	c9f4 <smp_pairing_rsp+0x16c>
    ca04:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    ca08:	4b0a      	ldr	r3, [pc, #40]	; (ca34 <smp_pairing_rsp+0x1ac>)
    ca0a:	681b      	ldr	r3, [r3, #0]
    ca0c:	691b      	ldr	r3, [r3, #16]
    ca0e:	6820      	ldr	r0, [r4, #0]
    ca10:	4798      	blx	r3
			return 0;
    ca12:	e741      	b.n	c898 <smp_pairing_rsp+0x10>
    ca14:	f3bf 8f5b 	dmb	ish
    ca18:	e856 3f00 	ldrex	r3, [r6]
    ca1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ca20:	e846 3200 	strex	r2, r3, [r6]
    ca24:	2a00      	cmp	r2, #0
    ca26:	d1f7      	bne.n	ca18 <smp_pairing_rsp+0x190>
    ca28:	f3bf 8f5b 	dmb	ish
		return 0;
    ca2c:	2500      	movs	r5, #0
    ca2e:	e733      	b.n	c898 <smp_pairing_rsp+0x10>
    ca30:	20000a68 	.word	0x20000a68
    ca34:	20002ab0 	.word	0x20002ab0

0000ca38 <legacy_pairing_req>:
{
    ca38:	b538      	push	{r3, r4, r5, lr}
    ca3a:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    ca3c:	f7fd ffd4 	bl	a9e8 <legacy_get_pair_method>
    ca40:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    ca44:	bb10      	cbnz	r0, ca8c <legacy_pairing_req+0x54>
    ca46:	4604      	mov	r4, r0
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ca48:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ca4c:	f3bf 8f5b 	dmb	ish
    ca50:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    ca54:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    ca58:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    ca5c:	d116      	bne.n	ca8c <legacy_pairing_req+0x54>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ca5e:	4b18      	ldr	r3, [pc, #96]	; (cac0 <legacy_pairing_req+0x88>)
    ca60:	681b      	ldr	r3, [r3, #0]
    ca62:	b19b      	cbz	r3, ca8c <legacy_pairing_req+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    ca64:	691b      	ldr	r3, [r3, #16]
    ca66:	b18b      	cbz	r3, ca8c <legacy_pairing_req+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ca68:	f3bf 8f5b 	dmb	ish
    ca6c:	e852 3f00 	ldrex	r3, [r2]
    ca70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ca74:	e842 3100 	strex	r1, r3, [r2]
    ca78:	2900      	cmp	r1, #0
    ca7a:	d1f7      	bne.n	ca6c <legacy_pairing_req+0x34>
    ca7c:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    ca80:	4b0f      	ldr	r3, [pc, #60]	; (cac0 <legacy_pairing_req+0x88>)
    ca82:	681b      	ldr	r3, [r3, #0]
    ca84:	691b      	ldr	r3, [r3, #16]
    ca86:	6828      	ldr	r0, [r5, #0]
    ca88:	4798      	blx	r3
		return 0;
    ca8a:	e004      	b.n	ca96 <legacy_pairing_req+0x5e>
	ret = send_pairing_rsp(smp);
    ca8c:	4628      	mov	r0, r5
    ca8e:	f7fe f8d9 	bl	ac44 <send_pairing_rsp>
	if (ret) {
    ca92:	4604      	mov	r4, r0
    ca94:	b108      	cbz	r0, ca9a <legacy_pairing_req+0x62>
}
    ca96:	4620      	mov	r0, r4
    ca98:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ca9a:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    ca9e:	f3bf 8f5b 	dmb	ish
    caa2:	e853 2f00 	ldrex	r2, [r3]
    caa6:	f042 0208 	orr.w	r2, r2, #8
    caaa:	e843 2100 	strex	r1, r2, [r3]
    caae:	2900      	cmp	r1, #0
    cab0:	d1f7      	bne.n	caa2 <legacy_pairing_req+0x6a>
    cab2:	f3bf 8f5b 	dmb	ish
	return legacy_request_tk(smp);
    cab6:	4628      	mov	r0, r5
    cab8:	f7ff fe2a 	bl	c710 <legacy_request_tk>
    cabc:	4604      	mov	r4, r0
    cabe:	e7ea      	b.n	ca96 <legacy_pairing_req+0x5e>
    cac0:	20002ab0 	.word	0x20002ab0

0000cac4 <smp_pairing_req>:
{
    cac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    cac6:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    cac8:	78f3      	ldrb	r3, [r6, #3]
    caca:	3b07      	subs	r3, #7
    cacc:	b2db      	uxtb	r3, r3
    cace:	2b09      	cmp	r3, #9
    cad0:	d902      	bls.n	cad8 <smp_pairing_req+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    cad2:	2506      	movs	r5, #6
}
    cad4:	4628      	mov	r0, r5
    cad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cad8:	4604      	mov	r4, r0
	ret = smp_init(smp);
    cada:	f7fe f81c 	bl	ab16 <smp_init>
	if (ret) {
    cade:	b108      	cbz	r0, cae4 <smp_pairing_req+0x20>
		return ret;
    cae0:	b2c5      	uxtb	r5, r0
    cae2:	e7f7      	b.n	cad4 <smp_pairing_req+0x10>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    cae4:	2301      	movs	r3, #1
    cae6:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    caea:	2206      	movs	r2, #6
    caec:	4631      	mov	r1, r6
    caee:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    caf2:	f7f3 fbe5 	bl	2c0 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    caf6:	2302      	movs	r3, #2
    caf8:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	rsp->auth_req = get_auth(req->auth_req);
    cafc:	78b0      	ldrb	r0, [r6, #2]
    cafe:	f7fd ff97 	bl	aa30 <get_auth>
    cb02:	4605      	mov	r5, r0
    cb04:	f884 00af 	strb.w	r0, [r4, #175]	; 0xaf
	rsp->io_capability = get_io_capa();
    cb08:	f7fd ff14 	bl	a934 <get_io_capa>
    cb0c:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    cb10:	2300      	movs	r3, #0
    cb12:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    cb16:	2310      	movs	r3, #16
    cb18:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    cb1c:	7933      	ldrb	r3, [r6, #4]
    cb1e:	f003 0307 	and.w	r3, r3, #7
    cb22:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    cb26:	7973      	ldrb	r3, [r6, #5]
    cb28:	f003 0305 	and.w	r3, r3, #5
    cb2c:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    cb30:	f015 0f08 	tst.w	r5, #8
    cb34:	d003      	beq.n	cb3e <smp_pairing_req+0x7a>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    cb36:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    cb38:	f013 0f08 	tst.w	r3, #8
    cb3c:	d15b      	bne.n	cbf6 <smp_pairing_req+0x132>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    cb3e:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    cb42:	f013 0f20 	tst.w	r3, #32
    cb46:	d003      	beq.n	cb50 <smp_pairing_req+0x8c>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    cb48:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    cb4a:	f013 0f20 	tst.w	r3, #32
    cb4e:	d16d      	bne.n	cc2c <smp_pairing_req+0x168>
	smp->local_dist = rsp->resp_key_dist;
    cb50:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    cb54:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist = rsp->init_key_dist;
    cb58:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    cb5c:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    cb60:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    cb64:	f013 0f01 	tst.w	r3, #1
    cb68:	d003      	beq.n	cb72 <smp_pairing_req+0xae>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    cb6a:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    cb6c:	f013 0f01 	tst.w	r3, #1
    cb70:	d16b      	bne.n	cc4a <smp_pairing_req+0x186>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    cb72:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
    cb76:	f3bf 8f5b 	dmb	ish
    cb7a:	e857 3f00 	ldrex	r3, [r7]
    cb7e:	f043 0308 	orr.w	r3, r3, #8
    cb82:	e847 3200 	strex	r2, r3, [r7]
    cb86:	2a00      	cmp	r2, #0
    cb88:	d1f7      	bne.n	cb7a <smp_pairing_req+0xb6>
    cb8a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cb8e:	f3bf 8f5b 	dmb	ish
    cb92:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    cb96:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    cb9a:	f013 0f20 	tst.w	r3, #32
    cb9e:	d063      	beq.n	cc68 <smp_pairing_req+0x1a4>
	smp->method = get_pair_method(smp, req->io_capability);
    cba0:	7831      	ldrb	r1, [r6, #0]
    cba2:	4620      	mov	r0, r4
    cba4:	f7fd feee 	bl	a984 <get_pair_method>
    cba8:	4605      	mov	r5, r0
    cbaa:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS) {
    cbae:	2800      	cmp	r0, #0
    cbb0:	d160      	bne.n	cc74 <smp_pairing_req+0x1b0>
    cbb2:	f3bf 8f5b 	dmb	ish
    cbb6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    cbba:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    cbbe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    cbc2:	d157      	bne.n	cc74 <smp_pairing_req+0x1b0>
    cbc4:	4b35      	ldr	r3, [pc, #212]	; (cc9c <smp_pairing_req+0x1d8>)
    cbc6:	681b      	ldr	r3, [r3, #0]
    cbc8:	2b00      	cmp	r3, #0
    cbca:	d053      	beq.n	cc74 <smp_pairing_req+0x1b0>
		    bt_auth && bt_auth->pairing_confirm) {
    cbcc:	691b      	ldr	r3, [r3, #16]
    cbce:	2b00      	cmp	r3, #0
    cbd0:	d050      	beq.n	cc74 <smp_pairing_req+0x1b0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cbd2:	f3bf 8f5b 	dmb	ish
    cbd6:	e857 3f00 	ldrex	r3, [r7]
    cbda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    cbde:	e847 3200 	strex	r2, r3, [r7]
    cbe2:	2a00      	cmp	r2, #0
    cbe4:	d1f7      	bne.n	cbd6 <smp_pairing_req+0x112>
    cbe6:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    cbea:	4b2c      	ldr	r3, [pc, #176]	; (cc9c <smp_pairing_req+0x1d8>)
    cbec:	681b      	ldr	r3, [r3, #0]
    cbee:	691b      	ldr	r3, [r3, #16]
    cbf0:	6820      	ldr	r0, [r4, #0]
    cbf2:	4798      	blx	r3
			return 0;
    cbf4:	e76e      	b.n	cad4 <smp_pairing_req+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    cbf6:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    cbfa:	f3bf 8f5b 	dmb	ish
    cbfe:	e853 2f00 	ldrex	r2, [r3]
    cc02:	f042 0220 	orr.w	r2, r2, #32
    cc06:	e843 2100 	strex	r1, r2, [r3]
    cc0a:	2900      	cmp	r1, #0
    cc0c:	d1f7      	bne.n	cbfe <smp_pairing_req+0x13a>
    cc0e:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
    cc12:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    cc16:	f003 0306 	and.w	r3, r3, #6
    cc1a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    cc1e:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    cc22:	f003 0304 	and.w	r3, r3, #4
    cc26:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    cc2a:	e788      	b.n	cb3e <smp_pairing_req+0x7a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    cc2c:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    cc30:	f3bf 8f5b 	dmb	ish
    cc34:	e853 2f00 	ldrex	r2, [r3]
    cc38:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    cc3c:	e843 2100 	strex	r1, r2, [r3]
    cc40:	2900      	cmp	r1, #0
    cc42:	d1f7      	bne.n	cc34 <smp_pairing_req+0x170>
    cc44:	f3bf 8f5b 	dmb	ish
    cc48:	e782      	b.n	cb50 <smp_pairing_req+0x8c>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    cc4a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    cc4e:	f3bf 8f5b 	dmb	ish
    cc52:	e853 2f00 	ldrex	r2, [r3]
    cc56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    cc5a:	e843 2100 	strex	r1, r2, [r3]
    cc5e:	2900      	cmp	r1, #0
    cc60:	d1f7      	bne.n	cc52 <smp_pairing_req+0x18e>
    cc62:	f3bf 8f5b 	dmb	ish
    cc66:	e784      	b.n	cb72 <smp_pairing_req+0xae>
		return legacy_pairing_req(smp, req->io_capability);
    cc68:	7831      	ldrb	r1, [r6, #0]
    cc6a:	4620      	mov	r0, r4
    cc6c:	f7ff fee4 	bl	ca38 <legacy_pairing_req>
    cc70:	4605      	mov	r5, r0
    cc72:	e72f      	b.n	cad4 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    cc74:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    cc78:	f3bf 8f5b 	dmb	ish
    cc7c:	e853 2f00 	ldrex	r2, [r3]
    cc80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    cc84:	e843 2100 	strex	r1, r2, [r3]
    cc88:	2900      	cmp	r1, #0
    cc8a:	d1f7      	bne.n	cc7c <smp_pairing_req+0x1b8>
    cc8c:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
    cc90:	4620      	mov	r0, r4
    cc92:	f7fd ffd7 	bl	ac44 <send_pairing_rsp>
    cc96:	4605      	mov	r5, r0
    cc98:	e71c      	b.n	cad4 <smp_pairing_req+0x10>
    cc9a:	bf00      	nop
    cc9c:	20002ab0 	.word	0x20002ab0

0000cca0 <bt_smp_connected>:
{
    cca0:	b510      	push	{r4, lr}
    cca2:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    cca4:	4904      	ldr	r1, [pc, #16]	; (ccb8 <bt_smp_connected+0x18>)
    cca6:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    ccaa:	f01d f953 	bl	29f54 <k_delayed_work_init>
	smp_reset(smp);
    ccae:	4620      	mov	r0, r4
    ccb0:	f7fe fcbb 	bl	b62a <smp_reset>
    ccb4:	bd10      	pop	{r4, pc}
    ccb6:	bf00      	nop
    ccb8:	0000b87b 	.word	0x0000b87b

0000ccbc <bt_smp_send_security_req>:
{
    ccbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccc0:	4606      	mov	r6, r0
	smp = smp_chan_get(conn);
    ccc2:	f7fd ff15 	bl	aaf0 <smp_chan_get>
	if (!smp) {
    ccc6:	b3e8      	cbz	r0, cd44 <bt_smp_send_security_req+0x88>
    ccc8:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ccca:	f3bf 8f5b 	dmb	ish
    ccce:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    ccd2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    ccd6:	f013 0f10 	tst.w	r3, #16
    ccda:	d136      	bne.n	cd4a <bt_smp_send_security_req+0x8e>
    ccdc:	f3bf 8f5b 	dmb	ish
    cce0:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    cce4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    cce8:	f3c5 05c0 	ubfx	r5, r5, #3, #1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    ccec:	bb85      	cbnz	r5, cd50 <bt_smp_send_security_req+0x94>
	if (!sec_level_reachable(conn)) {
    ccee:	4630      	mov	r0, r6
    ccf0:	f7fd feb4 	bl	aa5c <sec_level_reachable>
    ccf4:	b378      	cbz	r0, cd56 <bt_smp_send_security_req+0x9a>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    ccf6:	2201      	movs	r2, #1
    ccf8:	210b      	movs	r1, #11
    ccfa:	4630      	mov	r0, r6
    ccfc:	f7fd fefd 	bl	aafa <smp_create_pdu>
	if (!req_buf) {
    cd00:	4607      	mov	r7, r0
    cd02:	b358      	cbz	r0, cd5c <bt_smp_send_security_req+0xa0>
	req = net_buf_add(req_buf, sizeof(*req));
    cd04:	2101      	movs	r1, #1
    cd06:	3008      	adds	r0, #8
    cd08:	f00e f854 	bl	1adb4 <net_buf_simple_add>
    cd0c:	4680      	mov	r8, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    cd0e:	2009      	movs	r0, #9
    cd10:	f7fd fe8e 	bl	aa30 <get_auth>
    cd14:	f888 0000 	strb.w	r0, [r8]
    cd18:	2300      	movs	r3, #0
    cd1a:	463a      	mov	r2, r7
    cd1c:	2106      	movs	r1, #6
    cd1e:	4630      	mov	r0, r6
    cd20:	f7fb f9e1 	bl	80e6 <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    cd24:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cd26:	f3bf 8f5b 	dmb	ish
    cd2a:	e854 3f00 	ldrex	r3, [r4]
    cd2e:	f043 0320 	orr.w	r3, r3, #32
    cd32:	e844 3200 	strex	r2, r3, [r4]
    cd36:	2a00      	cmp	r2, #0
    cd38:	d1f7      	bne.n	cd2a <bt_smp_send_security_req+0x6e>
    cd3a:	f3bf 8f5b 	dmb	ish
}
    cd3e:	4628      	mov	r0, r5
    cd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    cd44:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    cd48:	e7f9      	b.n	cd3e <bt_smp_send_security_req+0x82>
		return -EIO;
    cd4a:	f06f 0504 	mvn.w	r5, #4
    cd4e:	e7f6      	b.n	cd3e <bt_smp_send_security_req+0x82>
		return -EBUSY;
    cd50:	f06f 050f 	mvn.w	r5, #15
    cd54:	e7f3      	b.n	cd3e <bt_smp_send_security_req+0x82>
		return -EINVAL;
    cd56:	f06f 0515 	mvn.w	r5, #21
    cd5a:	e7f0      	b.n	cd3e <bt_smp_send_security_req+0x82>
		return -ENOBUFS;
    cd5c:	f06f 0568 	mvn.w	r5, #104	; 0x68
    cd60:	e7ed      	b.n	cd3e <bt_smp_send_security_req+0x82>

0000cd62 <bt_smp_send_pairing_req>:
{
    cd62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd66:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    cd68:	f7fd fec2 	bl	aaf0 <smp_chan_get>
	if (!smp) {
    cd6c:	2800      	cmp	r0, #0
    cd6e:	d06b      	beq.n	ce48 <bt_smp_send_pairing_req+0xe6>
    cd70:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    cd72:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cd76:	f3bf 8f5b 	dmb	ish
    cd7a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cd7e:	f3bf 8f5b 	dmb	ish
    cd82:	f013 0f10 	tst.w	r3, #16
    cd86:	d162      	bne.n	ce4e <bt_smp_send_pairing_req+0xec>
    cd88:	f3bf 8f5b 	dmb	ish
    cd8c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cd90:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cd94:	f013 0f08 	tst.w	r3, #8
    cd98:	d15c      	bne.n	ce54 <bt_smp_send_pairing_req+0xf2>
	if (!sec_level_reachable(conn)) {
    cd9a:	4628      	mov	r0, r5
    cd9c:	f7fd fe5e 	bl	aa5c <sec_level_reachable>
    cda0:	2800      	cmp	r0, #0
    cda2:	d05a      	beq.n	ce5a <bt_smp_send_pairing_req+0xf8>
	if (smp_init(smp)) {
    cda4:	4620      	mov	r0, r4
    cda6:	f7fd feb6 	bl	ab16 <smp_init>
    cdaa:	4680      	mov	r8, r0
    cdac:	2800      	cmp	r0, #0
    cdae:	d157      	bne.n	ce60 <bt_smp_send_pairing_req+0xfe>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    cdb0:	2206      	movs	r2, #6
    cdb2:	2101      	movs	r1, #1
    cdb4:	4628      	mov	r0, r5
    cdb6:	f7fd fea0 	bl	aafa <smp_create_pdu>
	if (!req_buf) {
    cdba:	4607      	mov	r7, r0
    cdbc:	2800      	cmp	r0, #0
    cdbe:	d052      	beq.n	ce66 <bt_smp_send_pairing_req+0x104>
	req = net_buf_add(req_buf, sizeof(*req));
    cdc0:	2106      	movs	r1, #6
    cdc2:	3008      	adds	r0, #8
    cdc4:	f00d fff6 	bl	1adb4 <net_buf_simple_add>
    cdc8:	4605      	mov	r5, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    cdca:	2009      	movs	r0, #9
    cdcc:	f7fd fe30 	bl	aa30 <get_auth>
    cdd0:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
    cdd2:	f7fd fdaf 	bl	a934 <get_io_capa>
    cdd6:	7028      	strb	r0, [r5, #0]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    cdd8:	f04f 0900 	mov.w	r9, #0
    cddc:	f885 9001 	strb.w	r9, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    cde0:	2310      	movs	r3, #16
    cde2:	70eb      	strb	r3, [r5, #3]
	req->init_key_dist = SEND_KEYS;
    cde4:	2205      	movs	r2, #5
    cde6:	712a      	strb	r2, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
    cde8:	2307      	movs	r3, #7
    cdea:	716b      	strb	r3, [r5, #5]
	smp->local_dist = SEND_KEYS;
    cdec:	f884 2179 	strb.w	r2, [r4, #377]	; 0x179
	smp->remote_dist = RECV_KEYS;
    cdf0:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    cdf4:	2301      	movs	r3, #1
    cdf6:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    cdfa:	2206      	movs	r2, #6
    cdfc:	4629      	mov	r1, r5
    cdfe:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    ce02:	f7f3 fa5d 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    ce06:	464a      	mov	r2, r9
    ce08:	4639      	mov	r1, r7
    ce0a:	4620      	mov	r0, r4
    ce0c:	f7fd fec8 	bl	aba0 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    ce10:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ce12:	f3bf 8f5b 	dmb	ish
    ce16:	e854 3f00 	ldrex	r3, [r4]
    ce1a:	f043 0304 	orr.w	r3, r3, #4
    ce1e:	e844 3200 	strex	r2, r3, [r4]
    ce22:	2a00      	cmp	r2, #0
    ce24:	d1f7      	bne.n	ce16 <bt_smp_send_pairing_req+0xb4>
    ce26:	f3bf 8f5b 	dmb	ish
    ce2a:	f3bf 8f5b 	dmb	ish
    ce2e:	e856 3f00 	ldrex	r3, [r6]
    ce32:	f043 0308 	orr.w	r3, r3, #8
    ce36:	e846 3200 	strex	r2, r3, [r6]
    ce3a:	2a00      	cmp	r2, #0
    ce3c:	d1f7      	bne.n	ce2e <bt_smp_send_pairing_req+0xcc>
    ce3e:	f3bf 8f5b 	dmb	ish
}
    ce42:	4640      	mov	r0, r8
    ce44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOTCONN;
    ce48:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    ce4c:	e7f9      	b.n	ce42 <bt_smp_send_pairing_req+0xe0>
		return -EIO;
    ce4e:	f06f 0804 	mvn.w	r8, #4
    ce52:	e7f6      	b.n	ce42 <bt_smp_send_pairing_req+0xe0>
		return -EBUSY;
    ce54:	f06f 080f 	mvn.w	r8, #15
    ce58:	e7f3      	b.n	ce42 <bt_smp_send_pairing_req+0xe0>
		return -EINVAL;
    ce5a:	f06f 0815 	mvn.w	r8, #21
    ce5e:	e7f0      	b.n	ce42 <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    ce60:	f06f 0868 	mvn.w	r8, #104	; 0x68
    ce64:	e7ed      	b.n	ce42 <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    ce66:	f06f 0868 	mvn.w	r8, #104	; 0x68
    ce6a:	e7ea      	b.n	ce42 <bt_smp_send_pairing_req+0xe0>

0000ce6c <smp_security_request>:
{
    ce6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce6e:	b085      	sub	sp, #20
    ce70:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    ce72:	6804      	ldr	r4, [r0, #0]
	struct bt_smp_security_request *req = (void *)buf->data;
    ce74:	688b      	ldr	r3, [r1, #8]
	if (sc_supported) {
    ce76:	4a35      	ldr	r2, [pc, #212]	; (cf4c <smp_security_request+0xe0>)
    ce78:	7812      	ldrb	r2, [r2, #0]
    ce7a:	b332      	cbz	r2, ceca <smp_security_request+0x5e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    ce7c:	781d      	ldrb	r5, [r3, #0]
    ce7e:	f005 050f 	and.w	r5, r5, #15
	if (!conn->le.keys) {
    ce82:	6f23      	ldr	r3, [r4, #112]	; 0x70
    ce84:	b32b      	cbz	r3, ced2 <smp_security_request+0x66>
	if (!conn->le.keys) {
    ce86:	6f23      	ldr	r3, [r4, #112]	; 0x70
    ce88:	2b00      	cmp	r3, #0
    ce8a:	d039      	beq.n	cf00 <smp_security_request+0x94>
	if ((auth & BT_SMP_AUTH_MITM) &&
    ce8c:	f015 0f04 	tst.w	r5, #4
    ce90:	d12e      	bne.n	cef0 <smp_security_request+0x84>
	if ((auth & BT_SMP_AUTH_SC) &&
    ce92:	f015 0f08 	tst.w	r5, #8
    ce96:	d004      	beq.n	cea2 <smp_security_request+0x36>
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    ce98:	6f23      	ldr	r3, [r4, #112]	; 0x70
    ce9a:	899b      	ldrh	r3, [r3, #12]
	if ((auth & BT_SMP_AUTH_SC) &&
    ce9c:	f013 0f20 	tst.w	r3, #32
    cea0:	d02e      	beq.n	cf00 <smp_security_request+0x94>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    cea2:	6f23      	ldr	r3, [r4, #112]	; 0x70
					conn->le.keys->ltk.val,
    cea4:	f103 021a 	add.w	r2, r3, #26
					conn->le.keys->enc_size) < 0) {
    cea8:	79dd      	ldrb	r5, [r3, #7]
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    ceaa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    ceae:	9502      	str	r5, [sp, #8]
    ceb0:	9201      	str	r2, [sp, #4]
    ceb2:	8b1b      	ldrh	r3, [r3, #24]
    ceb4:	9300      	str	r3, [sp, #0]
    ceb6:	4602      	mov	r2, r0
    ceb8:	460b      	mov	r3, r1
    ceba:	4620      	mov	r0, r4
    cebc:	f7f9 ffbc 	bl	6e38 <bt_conn_le_start_encryption>
    cec0:	2800      	cmp	r0, #0
    cec2:	da24      	bge.n	cf0e <smp_security_request+0xa2>
		return BT_SMP_ERR_UNSPECIFIED;
    cec4:	2008      	movs	r0, #8
}
    cec6:	b005      	add	sp, #20
    cec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    ceca:	781d      	ldrb	r5, [r3, #0]
    cecc:	f005 0507 	and.w	r5, r5, #7
    ced0:	e7d7      	b.n	ce82 <smp_security_request+0x16>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    ced2:	f104 0748 	add.w	r7, r4, #72	; 0x48
    ced6:	4639      	mov	r1, r7
    ced8:	2020      	movs	r0, #32
    ceda:	f000 f98f 	bl	d1fc <bt_keys_find>
    cede:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys) {
    cee0:	2800      	cmp	r0, #0
    cee2:	d1d0      	bne.n	ce86 <smp_security_request+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    cee4:	4639      	mov	r1, r7
    cee6:	2004      	movs	r0, #4
    cee8:	f000 f988 	bl	d1fc <bt_keys_find>
    ceec:	6720      	str	r0, [r4, #112]	; 0x70
    ceee:	e7ca      	b.n	ce86 <smp_security_request+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cef0:	f3bf 8f5b 	dmb	ish
    cef4:	689b      	ldr	r3, [r3, #8]
    cef6:	f3bf 8f5b 	dmb	ish
	if ((auth & BT_SMP_AUTH_MITM) &&
    cefa:	f013 0f01 	tst.w	r3, #1
    cefe:	d1c8      	bne.n	ce92 <smp_security_request+0x26>
	if (bt_smp_send_pairing_req(conn) < 0) {
    cf00:	4620      	mov	r0, r4
    cf02:	f7ff ff2e 	bl	cd62 <bt_smp_send_pairing_req>
    cf06:	2800      	cmp	r0, #0
    cf08:	da10      	bge.n	cf2c <smp_security_request+0xc0>
		return BT_SMP_ERR_UNSPECIFIED;
    cf0a:	2008      	movs	r0, #8
    cf0c:	e7db      	b.n	cec6 <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    cf0e:	36a0      	adds	r6, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cf10:	f3bf 8f5b 	dmb	ish
    cf14:	e856 3f00 	ldrex	r3, [r6]
    cf18:	f043 0302 	orr.w	r3, r3, #2
    cf1c:	e846 3200 	strex	r2, r3, [r6]
    cf20:	2a00      	cmp	r2, #0
    cf22:	d1f7      	bne.n	cf14 <smp_security_request+0xa8>
    cf24:	f3bf 8f5b 	dmb	ish
	return 0;
    cf28:	2000      	movs	r0, #0
    cf2a:	e7cc      	b.n	cec6 <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    cf2c:	36a0      	adds	r6, #160	; 0xa0
    cf2e:	f3bf 8f5b 	dmb	ish
    cf32:	e856 3f00 	ldrex	r3, [r6]
    cf36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    cf3a:	e846 3200 	strex	r2, r3, [r6]
    cf3e:	2a00      	cmp	r2, #0
    cf40:	d1f7      	bne.n	cf32 <smp_security_request+0xc6>
    cf42:	f3bf 8f5b 	dmb	ish
	return 0;
    cf46:	2000      	movs	r0, #0
    cf48:	e7bd      	b.n	cec6 <smp_security_request+0x5a>
    cf4a:	bf00      	nop
    cf4c:	20000aac 	.word	0x20000aac

0000cf50 <bt_smp_sign_verify>:
{
    cf50:	b530      	push	{r4, r5, lr}
    cf52:	b085      	sub	sp, #20
    cf54:	4605      	mov	r5, r0
    cf56:	460c      	mov	r4, r1
	return buf->data + buf->len;
    cf58:	6889      	ldr	r1, [r1, #8]
    cf5a:	89a3      	ldrh	r3, [r4, #12]
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    cf5c:	3b0c      	subs	r3, #12
    cf5e:	220c      	movs	r2, #12
    cf60:	4419      	add	r1, r3
    cf62:	a801      	add	r0, sp, #4
    cf64:	f7f3 f9ac 	bl	2c0 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    cf68:	f105 0148 	add.w	r1, r5, #72	; 0x48
    cf6c:	2010      	movs	r0, #16
    cf6e:	f000 f945 	bl	d1fc <bt_keys_find>
	if (!keys) {
    cf72:	b320      	cbz	r0, cfbe <bt_smp_sign_verify+0x6e>
    cf74:	4605      	mov	r5, r0
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    cf76:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    cf78:	a904      	add	r1, sp, #16
    cf7a:	f841 3d10 	str.w	r3, [r1, #-16]!
    cf7e:	68a0      	ldr	r0, [r4, #8]
    cf80:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    cf82:	3b0c      	subs	r3, #12
    cf84:	2204      	movs	r2, #4
    cf86:	4418      	add	r0, r3
    cf88:	f7f3 f99a 	bl	2c0 <memcpy>
			   buf->len - sizeof(sig));
    cf8c:	89a2      	ldrh	r2, [r4, #12]
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    cf8e:	3a0c      	subs	r2, #12
    cf90:	b292      	uxth	r2, r2
    cf92:	68a1      	ldr	r1, [r4, #8]
    cf94:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    cf98:	f7fd feac 	bl	acf4 <smp_sign_buf>
	if (err) {
    cf9c:	b990      	cbnz	r0, cfc4 <bt_smp_sign_verify+0x74>
    cf9e:	68a1      	ldr	r1, [r4, #8]
    cfa0:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    cfa2:	3b0c      	subs	r3, #12
    cfa4:	220c      	movs	r2, #12
    cfa6:	4419      	add	r1, r3
    cfa8:	a801      	add	r0, sp, #4
    cfaa:	f01d fc21 	bl	2a7f0 <memcmp>
    cfae:	4602      	mov	r2, r0
    cfb0:	b958      	cbnz	r0, cfca <bt_smp_sign_verify+0x7a>
	keys->remote_csrk.cnt++;
    cfb2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    cfb4:	3301      	adds	r3, #1
    cfb6:	66eb      	str	r3, [r5, #108]	; 0x6c
}
    cfb8:	4610      	mov	r0, r2
    cfba:	b005      	add	sp, #20
    cfbc:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    cfbe:	f06f 0201 	mvn.w	r2, #1
    cfc2:	e7f9      	b.n	cfb8 <bt_smp_sign_verify+0x68>
		return -EIO;
    cfc4:	f06f 0204 	mvn.w	r2, #4
    cfc8:	e7f6      	b.n	cfb8 <bt_smp_sign_verify+0x68>
		return -EBADMSG;
    cfca:	f06f 024c 	mvn.w	r2, #76	; 0x4c
    cfce:	e7f3      	b.n	cfb8 <bt_smp_sign_verify+0x68>

0000cfd0 <bt_smp_sign>:
{
    cfd0:	b530      	push	{r4, r5, lr}
    cfd2:	b083      	sub	sp, #12
    cfd4:	460c      	mov	r4, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, &conn->le.dst);
    cfd6:	f100 0148 	add.w	r1, r0, #72	; 0x48
    cfda:	2008      	movs	r0, #8
    cfdc:	f000 f90e 	bl	d1fc <bt_keys_find>
	if (!keys) {
    cfe0:	b300      	cbz	r0, d024 <bt_smp_sign+0x54>
    cfe2:	4605      	mov	r5, r0
	net_buf_add(buf, 12);
    cfe4:	210c      	movs	r1, #12
    cfe6:	f104 0008 	add.w	r0, r4, #8
    cfea:	f00d fee3 	bl	1adb4 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    cfee:	6dab      	ldr	r3, [r5, #88]	; 0x58
    cff0:	a902      	add	r1, sp, #8
    cff2:	f841 3d04 	str.w	r3, [r1, #-4]!
    cff6:	68a0      	ldr	r0, [r4, #8]
    cff8:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    cffa:	3b0c      	subs	r3, #12
    cffc:	2204      	movs	r2, #4
    cffe:	4418      	add	r0, r3
    d000:	f7f3 f95e 	bl	2c0 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    d004:	89a2      	ldrh	r2, [r4, #12]
    d006:	3a0c      	subs	r2, #12
    d008:	b292      	uxth	r2, r2
    d00a:	68a1      	ldr	r1, [r4, #8]
    d00c:	f105 0048 	add.w	r0, r5, #72	; 0x48
    d010:	f7fd fe70 	bl	acf4 <smp_sign_buf>
	if (err) {
    d014:	4602      	mov	r2, r0
    d016:	b940      	cbnz	r0, d02a <bt_smp_sign+0x5a>
	keys->local_csrk.cnt++;
    d018:	6dab      	ldr	r3, [r5, #88]	; 0x58
    d01a:	3301      	adds	r3, #1
    d01c:	65ab      	str	r3, [r5, #88]	; 0x58
}
    d01e:	4610      	mov	r0, r2
    d020:	b003      	add	sp, #12
    d022:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    d024:	f06f 0201 	mvn.w	r2, #1
    d028:	e7f9      	b.n	d01e <bt_smp_sign+0x4e>
		return -EIO;
    d02a:	f06f 0204 	mvn.w	r2, #4
    d02e:	e7f6      	b.n	d01e <bt_smp_sign+0x4e>

0000d030 <bt_smp_update_keys>:
{
    d030:	b570      	push	{r4, r5, r6, lr}
    d032:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    d034:	f7fd fd5c 	bl	aaf0 <smp_chan_get>
	if (!smp) {
    d038:	2800      	cmp	r0, #0
    d03a:	d03d      	beq.n	d0b8 <bt_smp_update_keys+0x88>
    d03c:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d03e:	f3bf 8f5b 	dmb	ish
    d042:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    d046:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    d04a:	f013 0f08 	tst.w	r3, #8
    d04e:	d033      	beq.n	d0b8 <bt_smp_update_keys+0x88>
	if (conn->le.keys) {
    d050:	6f20      	ldr	r0, [r4, #112]	; 0x70
    d052:	b108      	cbz	r0, d058 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    d054:	f000 f97f 	bl	d356 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    d058:	f104 0048 	add.w	r0, r4, #72	; 0x48
    d05c:	f000 f8a4 	bl	d1a8 <bt_keys_get_addr>
    d060:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    d062:	b348      	cbz	r0, d0b8 <bt_smp_update_keys+0x88>
    d064:	f3bf 8f5b 	dmb	ish
    d068:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d06c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    d070:	f413 6f00 	tst.w	r3, #2048	; 0x800
    d074:	d121      	bne.n	d0ba <bt_smp_update_keys+0x8a>
	switch (smp->method) {
    d076:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    d07a:	3b01      	subs	r3, #1
    d07c:	2b02      	cmp	r3, #2
    d07e:	d82b      	bhi.n	d0d8 <bt_smp_update_keys+0xa8>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    d080:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d082:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d084:	f3bf 8f5b 	dmb	ish
    d088:	e853 2f00 	ldrex	r2, [r3]
    d08c:	f042 0201 	orr.w	r2, r2, #1
    d090:	e843 2100 	strex	r1, r2, [r3]
    d094:	2900      	cmp	r1, #0
    d096:	d1f7      	bne.n	d088 <bt_smp_update_keys+0x58>
    d098:	f3bf 8f5b 	dmb	ish
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    d09c:	6f26      	ldr	r6, [r4, #112]	; 0x70
    d09e:	4628      	mov	r0, r5
    d0a0:	f7fd fc8a 	bl	a9b8 <get_encryption_key_size>
    d0a4:	71f0      	strb	r0, [r6, #7]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d0a6:	f3bf 8f5b 	dmb	ish
    d0aa:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d0ae:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    d0b2:	f013 0f20 	tst.w	r3, #32
    d0b6:	d11e      	bne.n	d0f6 <bt_smp_update_keys+0xc6>
    d0b8:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    d0ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d0bc:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d0be:	f3bf 8f5b 	dmb	ish
    d0c2:	e853 2f00 	ldrex	r2, [r3]
    d0c6:	f042 0202 	orr.w	r2, r2, #2
    d0ca:	e843 2100 	strex	r1, r2, [r3]
    d0ce:	2900      	cmp	r1, #0
    d0d0:	d1f7      	bne.n	d0c2 <bt_smp_update_keys+0x92>
    d0d2:	f3bf 8f5b 	dmb	ish
    d0d6:	e7ce      	b.n	d076 <bt_smp_update_keys+0x46>
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    d0d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d0da:	3308      	adds	r3, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d0dc:	f3bf 8f5b 	dmb	ish
    d0e0:	e853 2f00 	ldrex	r2, [r3]
    d0e4:	f022 0201 	bic.w	r2, r2, #1
    d0e8:	e843 2100 	strex	r1, r2, [r3]
    d0ec:	2900      	cmp	r1, #0
    d0ee:	d1f7      	bne.n	d0e0 <bt_smp_update_keys+0xb0>
    d0f0:	f3bf 8f5b 	dmb	ish
    d0f4:	e7d2      	b.n	d09c <bt_smp_update_keys+0x6c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d0f6:	f3bf 8f5b 	dmb	ish
    d0fa:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d0fe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    d102:	f413 6f80 	tst.w	r3, #1024	; 0x400
    d106:	d0d7      	beq.n	d0b8 <bt_smp_update_keys+0x88>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    d108:	2120      	movs	r1, #32
    d10a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    d10c:	f000 f90c 	bl	d328 <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    d110:	6f20      	ldr	r0, [r4, #112]	; 0x70
    d112:	2210      	movs	r2, #16
    d114:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    d118:	301a      	adds	r0, #26
    d11a:	f7f3 f8d1 	bl	2c0 <memcpy>
		conn->le.keys->ltk.rand = 0;
    d11e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d120:	2000      	movs	r0, #0
    d122:	2100      	movs	r1, #0
    d124:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    d128:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d12a:	2200      	movs	r2, #0
    d12c:	831a      	strh	r2, [r3, #24]
    d12e:	e7c3      	b.n	d0b8 <bt_smp_update_keys+0x88>

0000d130 <bt_smp_get_tk>:
{
    d130:	b570      	push	{r4, r5, r6, lr}
    d132:	460d      	mov	r5, r1
	smp = smp_chan_get(conn);
    d134:	f7fd fcdc 	bl	aaf0 <smp_chan_get>
	if (!smp) {
    d138:	b300      	cbz	r0, d17c <bt_smp_get_tk+0x4c>
    d13a:	4604      	mov	r4, r0
    d13c:	f3bf 8f5b 	dmb	ish
    d140:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    d144:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    d148:	f013 0f08 	tst.w	r3, #8
    d14c:	d101      	bne.n	d152 <bt_smp_get_tk+0x22>
		return false;
    d14e:	2000      	movs	r0, #0
    d150:	bd70      	pop	{r4, r5, r6, pc}
	enc_size = get_encryption_key_size(smp);
    d152:	f7fd fc31 	bl	a9b8 <get_encryption_key_size>
    d156:	4606      	mov	r6, r0
	memcpy(tk, smp->tk, enc_size);
    d158:	4602      	mov	r2, r0
    d15a:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
    d15e:	4628      	mov	r0, r5
    d160:	f7f3 f8ae 	bl	2c0 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    d164:	2e0f      	cmp	r6, #15
    d166:	d901      	bls.n	d16c <bt_smp_get_tk+0x3c>
	return true;
    d168:	2001      	movs	r0, #1
}
    d16a:	bd70      	pop	{r4, r5, r6, pc}
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    d16c:	f1c6 0210 	rsb	r2, r6, #16
    d170:	2100      	movs	r1, #0
    d172:	19a8      	adds	r0, r5, r6
    d174:	f01d fbd0 	bl	2a918 <memset>
	return true;
    d178:	2001      	movs	r0, #1
    d17a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    d17c:	2000      	movs	r0, #0
    d17e:	bd70      	pop	{r4, r5, r6, pc}

0000d180 <bt_smp_init>:

int bt_smp_init(void)
{
    d180:	b508      	push	{r3, lr}
	};
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
    d182:	f7fd fca9 	bl	aad8 <le_sc_supported>
    d186:	4b05      	ldr	r3, [pc, #20]	; (d19c <bt_smp_init+0x1c>)
    d188:	7018      	strb	r0, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    d18a:	4805      	ldr	r0, [pc, #20]	; (d1a0 <bt_smp_init+0x20>)
    d18c:	f7fa fe04 	bl	7d98 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    d190:	4804      	ldr	r0, [pc, #16]	; (d1a4 <bt_smp_init+0x24>)
    d192:	f7f9 fc7f 	bl	6a94 <bt_pub_key_gen>

	return smp_self_test();
}
    d196:	2000      	movs	r0, #0
    d198:	bd08      	pop	{r3, pc}
    d19a:	bf00      	nop
    d19c:	20000aac 	.word	0x20000aac
    d1a0:	2000bc44 	.word	0x2000bc44
    d1a4:	2000bc64 	.word	0x2000bc64

0000d1a8 <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BT_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(const bt_addr_le_t *addr)
{
    d1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1aa:	b083      	sub	sp, #12
    d1ac:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d1ae:	2500      	movs	r5, #0
    d1b0:	b11d      	cbz	r5, d1ba <bt_keys_get_addr+0x12>
		}
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    d1b2:	2400      	movs	r4, #0
}
    d1b4:	4620      	mov	r0, r4
    d1b6:	b003      	add	sp, #12
    d1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		keys = &key_pool[i];
    d1ba:	00eb      	lsls	r3, r5, #3
    d1bc:	442b      	add	r3, r5
    d1be:	011a      	lsls	r2, r3, #4
    d1c0:	4c0d      	ldr	r4, [pc, #52]	; (d1f8 <bt_keys_get_addr+0x50>)
    d1c2:	4414      	add	r4, r2
	return memcmp(a, b, sizeof(*a));
    d1c4:	2207      	movs	r2, #7
    d1c6:	4631      	mov	r1, r6
    d1c8:	4620      	mov	r0, r4
    d1ca:	f01d fb11 	bl	2a7f0 <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    d1ce:	2800      	cmp	r0, #0
    d1d0:	d0f0      	beq.n	d1b4 <bt_keys_get_addr+0xc>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    d1d2:	2300      	movs	r3, #0
    d1d4:	9300      	str	r3, [sp, #0]
    d1d6:	f8cd 3003 	str.w	r3, [sp, #3]
    d1da:	2207      	movs	r2, #7
    d1dc:	4669      	mov	r1, sp
    d1de:	4620      	mov	r0, r4
    d1e0:	f01d fb06 	bl	2a7f0 <memcmp>
    d1e4:	b108      	cbz	r0, d1ea <bt_keys_get_addr+0x42>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d1e6:	3501      	adds	r5, #1
    d1e8:	e7e2      	b.n	d1b0 <bt_keys_get_addr+0x8>
	memcpy(dst, src, sizeof(*dst));
    d1ea:	2207      	movs	r2, #7
    d1ec:	4631      	mov	r1, r6
    d1ee:	4620      	mov	r0, r4
    d1f0:	f7f3 f866 	bl	2c0 <memcpy>
			return keys;
    d1f4:	e7de      	b.n	d1b4 <bt_keys_get_addr+0xc>
    d1f6:	bf00      	nop
    d1f8:	20000ab0 	.word	0x20000ab0

0000d1fc <bt_keys_find>:
		}
	}
}

struct bt_keys *bt_keys_find(int type, const bt_addr_le_t *addr)
{
    d1fc:	b570      	push	{r4, r5, r6, lr}
    d1fe:	4605      	mov	r5, r0
    d200:	460e      	mov	r6, r1
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d202:	2400      	movs	r4, #0
    d204:	b10c      	cbz	r4, d20a <bt_keys_find+0xe>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    d206:	2000      	movs	r0, #0
}
    d208:	bd70      	pop	{r4, r5, r6, pc}
		if ((key_pool[i].keys & type) &&
    d20a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d20e:	011a      	lsls	r2, r3, #4
    d210:	4b0b      	ldr	r3, [pc, #44]	; (d240 <bt_keys_find+0x44>)
    d212:	4413      	add	r3, r2
    d214:	899b      	ldrh	r3, [r3, #12]
    d216:	422b      	tst	r3, r5
    d218:	d101      	bne.n	d21e <bt_keys_find+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d21a:	3401      	adds	r4, #1
    d21c:	e7f2      	b.n	d204 <bt_keys_find+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    d21e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    d222:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    d224:	2207      	movs	r2, #7
    d226:	4631      	mov	r1, r6
    d228:	4805      	ldr	r0, [pc, #20]	; (d240 <bt_keys_find+0x44>)
    d22a:	4418      	add	r0, r3
    d22c:	f01d fae0 	bl	2a7f0 <memcmp>
		if ((key_pool[i].keys & type) &&
    d230:	2800      	cmp	r0, #0
    d232:	d1f2      	bne.n	d21a <bt_keys_find+0x1e>
			return &key_pool[i];
    d234:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d238:	0123      	lsls	r3, r4, #4
    d23a:	4801      	ldr	r0, [pc, #4]	; (d240 <bt_keys_find+0x44>)
    d23c:	4418      	add	r0, r3
    d23e:	bd70      	pop	{r4, r5, r6, pc}
    d240:	20000ab0 	.word	0x20000ab0

0000d244 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(const bt_addr_le_t *addr)
{
    d244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    d246:	7803      	ldrb	r3, [r0, #0]
    d248:	2b01      	cmp	r3, #1
    d24a:	d004      	beq.n	d256 <bt_keys_find_irk+0x12>
		return false;
    d24c:	2300      	movs	r3, #0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
    d24e:	b153      	cbz	r3, d266 <bt_keys_find_irk+0x22>
    d250:	4605      	mov	r5, r0
    d252:	2400      	movs	r4, #0
    d254:	e00a      	b.n	d26c <bt_keys_find_irk+0x28>
	return BT_ADDR_IS_RPA(&addr->a);
    d256:	7983      	ldrb	r3, [r0, #6]
    d258:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d25c:	2b40      	cmp	r3, #64	; 0x40
    d25e:	bf14      	ite	ne
    d260:	2300      	movne	r3, #0
    d262:	2301      	moveq	r3, #1
    d264:	e7f3      	b.n	d24e <bt_keys_find_irk+0xa>
		return NULL;
    d266:	2000      	movs	r0, #0
    d268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d26a:	3401      	adds	r4, #1
    d26c:	b9c4      	cbnz	r4, d2a0 <bt_keys_find_irk+0x5c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    d26e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d272:	011a      	lsls	r2, r3, #4
    d274:	4b1e      	ldr	r3, [pc, #120]	; (d2f0 <bt_keys_find_irk+0xac>)
    d276:	4413      	add	r3, r2
    d278:	899b      	ldrh	r3, [r3, #12]
    d27a:	f013 0f02 	tst.w	r3, #2
    d27e:	d0f4      	beq.n	d26a <bt_keys_find_irk+0x26>
			continue;
		}

		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    d280:	4611      	mov	r1, r2
    d282:	3140      	adds	r1, #64	; 0x40
	return memcmp(a, b, sizeof(*a));
    d284:	2206      	movs	r2, #6
    d286:	4b1a      	ldr	r3, [pc, #104]	; (d2f0 <bt_keys_find_irk+0xac>)
    d288:	4419      	add	r1, r3
    d28a:	1c68      	adds	r0, r5, #1
    d28c:	f01d fab0 	bl	2a7f0 <memcmp>
    d290:	2800      	cmp	r0, #0
    d292:	d1ea      	bne.n	d26a <bt_keys_find_irk+0x26>
			BT_DBG("cached RPA %s for %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));
			return &key_pool[i];
    d294:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d298:	0123      	lsls	r3, r4, #4
    d29a:	4815      	ldr	r0, [pc, #84]	; (d2f0 <bt_keys_find_irk+0xac>)
    d29c:	4418      	add	r0, r3
    d29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2a0:	2400      	movs	r4, #0
    d2a2:	e000      	b.n	d2a6 <bt_keys_find_irk+0x62>
		}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d2a4:	3401      	adds	r4, #1
    d2a6:	bb04      	cbnz	r4, d2ea <bt_keys_find_irk+0xa6>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    d2a8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d2ac:	011a      	lsls	r2, r3, #4
    d2ae:	4b10      	ldr	r3, [pc, #64]	; (d2f0 <bt_keys_find_irk+0xac>)
    d2b0:	4413      	add	r3, r2
    d2b2:	899b      	ldrh	r3, [r3, #12]
    d2b4:	f013 0f02 	tst.w	r3, #2
    d2b8:	d0f4      	beq.n	d2a4 <bt_keys_find_irk+0x60>
			continue;
		}

		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    d2ba:	4610      	mov	r0, r2
    d2bc:	3030      	adds	r0, #48	; 0x30
    d2be:	1c6e      	adds	r6, r5, #1
    d2c0:	4631      	mov	r1, r6
    d2c2:	4b0b      	ldr	r3, [pc, #44]	; (d2f0 <bt_keys_find_irk+0xac>)
    d2c4:	4418      	add	r0, r3
    d2c6:	f7f7 f987 	bl	45d8 <bt_rpa_irk_matches>
    d2ca:	2800      	cmp	r0, #0
    d2cc:	d0ea      	beq.n	d2a4 <bt_keys_find_irk+0x60>
			BT_DBG("RPA %s matches %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));

			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
    d2ce:	4d08      	ldr	r5, [pc, #32]	; (d2f0 <bt_keys_find_irk+0xac>)
    d2d0:	00e7      	lsls	r7, r4, #3
    d2d2:	193a      	adds	r2, r7, r4
    d2d4:	0113      	lsls	r3, r2, #4
    d2d6:	3340      	adds	r3, #64	; 0x40
	memcpy(dst, src, sizeof(*dst));
    d2d8:	2206      	movs	r2, #6
    d2da:	4631      	mov	r1, r6
    d2dc:	18e8      	adds	r0, r5, r3
    d2de:	f7f2 ffef 	bl	2c0 <memcpy>

			return &key_pool[i];
    d2e2:	443c      	add	r4, r7
    d2e4:	0120      	lsls	r0, r4, #4
    d2e6:	4428      	add	r0, r5
    d2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
    d2ea:	2000      	movs	r0, #0
}
    d2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2ee:	bf00      	nop
    d2f0:	20000ab0 	.word	0x20000ab0

0000d2f4 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(const bt_addr_le_t *addr)
{
    d2f4:	b538      	push	{r3, r4, r5, lr}
    d2f6:	4605      	mov	r5, r0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d2f8:	2400      	movs	r4, #0
    d2fa:	b10c      	cbz	r4, d300 <bt_keys_find_addr+0xc>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    d2fc:	2000      	movs	r0, #0
}
    d2fe:	bd38      	pop	{r3, r4, r5, pc}
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    d300:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    d304:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    d306:	2207      	movs	r2, #7
    d308:	4629      	mov	r1, r5
    d30a:	4806      	ldr	r0, [pc, #24]	; (d324 <bt_keys_find_addr+0x30>)
    d30c:	4418      	add	r0, r3
    d30e:	f01d fa6f 	bl	2a7f0 <memcmp>
    d312:	b108      	cbz	r0, d318 <bt_keys_find_addr+0x24>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d314:	3401      	adds	r4, #1
    d316:	e7f0      	b.n	d2fa <bt_keys_find_addr+0x6>
			return &key_pool[i];
    d318:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d31c:	0123      	lsls	r3, r4, #4
    d31e:	4801      	ldr	r0, [pc, #4]	; (d324 <bt_keys_find_addr+0x30>)
    d320:	4418      	add	r0, r3
    d322:	bd38      	pop	{r3, r4, r5, pc}
    d324:	20000ab0 	.word	0x20000ab0

0000d328 <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    d328:	8983      	ldrh	r3, [r0, #12]
    d32a:	4319      	orrs	r1, r3
    d32c:	8181      	strh	r1, [r0, #12]
    d32e:	4770      	bx	lr

0000d330 <bt_keys_get_type>:
{
    d330:	b570      	push	{r4, r5, r6, lr}
    d332:	4606      	mov	r6, r0
    d334:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    d336:	f7ff ff61 	bl	d1fc <bt_keys_find>
	if (keys) {
    d33a:	4604      	mov	r4, r0
    d33c:	b108      	cbz	r0, d342 <bt_keys_get_type+0x12>
}
    d33e:	4620      	mov	r0, r4
    d340:	bd70      	pop	{r4, r5, r6, pc}
	keys = bt_keys_get_addr(addr);
    d342:	4628      	mov	r0, r5
    d344:	f7ff ff30 	bl	d1a8 <bt_keys_get_addr>
	if (!keys) {
    d348:	4604      	mov	r4, r0
    d34a:	2800      	cmp	r0, #0
    d34c:	d0f7      	beq.n	d33e <bt_keys_get_type+0xe>
	bt_keys_add_type(keys, type);
    d34e:	4631      	mov	r1, r6
    d350:	f7ff ffea 	bl	d328 <bt_keys_add_type>
	return keys;
    d354:	e7f3      	b.n	d33e <bt_keys_get_type+0xe>

0000d356 <bt_keys_clear>:
}

void bt_keys_clear(struct bt_keys *keys)
{
    d356:	b508      	push	{r3, lr}
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	memset(keys, 0, sizeof(*keys));
    d358:	2290      	movs	r2, #144	; 0x90
    d35a:	2100      	movs	r1, #0
    d35c:	f01d fadc 	bl	2a918 <memset>
    d360:	bd08      	pop	{r3, pc}

0000d362 <status_cmd_handle>:
}
    d362:	f06f 0015 	mvn.w	r0, #21
    d366:	4770      	bx	lr

0000d368 <evt_create>:
{
    d368:	b538      	push	{r3, r4, r5, lr}
    d36a:	460d      	mov	r5, r1
    d36c:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    d36e:	2102      	movs	r1, #2
    d370:	3008      	adds	r0, #8
    d372:	f00d fd1f 	bl	1adb4 <net_buf_simple_add>
	hdr->evt = evt;
    d376:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    d378:	7044      	strb	r4, [r0, #1]
    d37a:	bd38      	pop	{r3, r4, r5, pc}

0000d37c <cmd_status>:
{
    d37c:	b538      	push	{r3, r4, r5, lr}
    d37e:	4605      	mov	r5, r0
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    d380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d384:	f7f9 fb5e 	bl	6a44 <bt_buf_get_cmd_complete>
    d388:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    d38a:	2204      	movs	r2, #4
    d38c:	210f      	movs	r1, #15
    d38e:	f7ff ffeb 	bl	d368 <evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
    d392:	2104      	movs	r1, #4
    d394:	f104 0008 	add.w	r0, r4, #8
    d398:	f00d fd0c 	bl	1adb4 <net_buf_simple_add>
	cs->status = status;
    d39c:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
    d39e:	2301      	movs	r3, #1
    d3a0:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    d3a2:	4b02      	ldr	r3, [pc, #8]	; (d3ac <cmd_status+0x30>)
    d3a4:	881b      	ldrh	r3, [r3, #0]
    d3a6:	8043      	strh	r3, [r0, #2]
}
    d3a8:	4620      	mov	r0, r4
    d3aa:	bd38      	pop	{r3, r4, r5, pc}
    d3ac:	20000b40 	.word	0x20000b40

0000d3b0 <disconnect>:
{
    d3b0:	b510      	push	{r4, lr}
    d3b2:	460c      	mov	r4, r1
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    d3b4:	6883      	ldr	r3, [r0, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    d3b6:	7899      	ldrb	r1, [r3, #2]
    d3b8:	8818      	ldrh	r0, [r3, #0]
    d3ba:	f00b f964 	bl	18686 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d3be:	b100      	cbz	r0, d3c2 <disconnect+0x12>
    d3c0:	200c      	movs	r0, #12
    d3c2:	f7ff ffdb 	bl	d37c <cmd_status>
    d3c6:	6020      	str	r0, [r4, #0]
    d3c8:	bd10      	pop	{r4, pc}
	...

0000d3cc <cmd_complete>:
{
    d3cc:	b538      	push	{r3, r4, r5, lr}
    d3ce:	4604      	mov	r4, r0
    d3d0:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    d3d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d3d6:	f7f9 fb35 	bl	6a44 <bt_buf_get_cmd_complete>
    d3da:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    d3dc:	1cea      	adds	r2, r5, #3
    d3de:	b2d2      	uxtb	r2, r2
    d3e0:	210e      	movs	r1, #14
    d3e2:	f7ff ffc1 	bl	d368 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    d3e6:	6820      	ldr	r0, [r4, #0]
    d3e8:	2103      	movs	r1, #3
    d3ea:	3008      	adds	r0, #8
    d3ec:	f00d fce2 	bl	1adb4 <net_buf_simple_add>
	cc->ncmd = 1;
    d3f0:	2301      	movs	r3, #1
    d3f2:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    d3f4:	4b04      	ldr	r3, [pc, #16]	; (d408 <cmd_complete+0x3c>)
    d3f6:	881b      	ldrh	r3, [r3, #0]
    d3f8:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    d3fc:	6820      	ldr	r0, [r4, #0]
    d3fe:	4629      	mov	r1, r5
    d400:	3008      	adds	r0, #8
    d402:	f00d fcd7 	bl	1adb4 <net_buf_simple_add>
}
    d406:	bd38      	pop	{r3, r4, r5, pc}
    d408:	20000b40 	.word	0x20000b40

0000d40c <set_event_mask_page_2>:
{
    d40c:	b570      	push	{r4, r5, r6, lr}
    d40e:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask_page_2 *cmd = (void *)buf->data;
    d410:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    d412:	79da      	ldrb	r2, [r3, #7]
    d414:	7999      	ldrb	r1, [r3, #6]
    d416:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    d41a:	7958      	ldrb	r0, [r3, #5]
    d41c:	791a      	ldrb	r2, [r3, #4]
    d41e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d422:	2400      	movs	r4, #0
    d424:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    d428:	78d9      	ldrb	r1, [r3, #3]
    d42a:	789a      	ldrb	r2, [r3, #2]
    d42c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d430:	7859      	ldrb	r1, [r3, #1]
    d432:	781b      	ldrb	r3, [r3, #0]
    d434:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    d438:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d43c:	ea44 0003 	orr.w	r0, r4, r3
    d440:	4629      	mov	r1, r5
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    d442:	4b04      	ldr	r3, [pc, #16]	; (d454 <set_event_mask_page_2+0x48>)
    d444:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    d448:	2101      	movs	r1, #1
    d44a:	4630      	mov	r0, r6
    d44c:	f7ff ffbe 	bl	d3cc <cmd_complete>
	ccst->status = 0x00;
    d450:	7004      	strb	r4, [r0, #0]
    d452:	bd70      	pop	{r4, r5, r6, pc}
    d454:	20000bd0 	.word	0x20000bd0

0000d458 <read_local_version_info>:
{
    d458:	b508      	push	{r3, lr}
    d45a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d45c:	2109      	movs	r1, #9
    d45e:	f7ff ffb5 	bl	d3cc <cmd_complete>
	rp->status = 0x00;
    d462:	2300      	movs	r3, #0
    d464:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
    d466:	2209      	movs	r2, #9
    d468:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    d46a:	7083      	strb	r3, [r0, #2]
    d46c:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    d46e:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    d470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d474:	7143      	strb	r3, [r0, #5]
    d476:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    d478:	71c3      	strb	r3, [r0, #7]
    d47a:	7203      	strb	r3, [r0, #8]
    d47c:	bd08      	pop	{r3, pc}

0000d47e <le_read_buffer_size>:
{
    d47e:	b508      	push	{r3, lr}
    d480:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d482:	2104      	movs	r1, #4
    d484:	f7ff ffa2 	bl	d3cc <cmd_complete>
	rp->status = 0x00;
    d488:	2300      	movs	r3, #0
    d48a:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    d48c:	221b      	movs	r2, #27
    d48e:	7042      	strb	r2, [r0, #1]
    d490:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    d492:	2302      	movs	r3, #2
    d494:	70c3      	strb	r3, [r0, #3]
    d496:	bd08      	pop	{r3, pc}

0000d498 <le_read_supp_states>:
{
    d498:	b508      	push	{r3, lr}
    d49a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d49c:	2109      	movs	r1, #9
    d49e:	f7ff ff95 	bl	d3cc <cmd_complete>
	rp->status = 0x00;
    d4a2:	2200      	movs	r2, #0
    d4a4:	7002      	strb	r2, [r0, #0]
	dst[0] = val;
    d4a6:	23ff      	movs	r3, #255	; 0xff
    d4a8:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    d4aa:	7083      	strb	r3, [r0, #2]
	dst[0] = val;
    d4ac:	213f      	movs	r1, #63	; 0x3f
    d4ae:	70c1      	strb	r1, [r0, #3]
	dst[1] = val >> 8;
    d4b0:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    d4b2:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    d4b4:	2303      	movs	r3, #3
    d4b6:	7183      	strb	r3, [r0, #6]
	dst[0] = val;
    d4b8:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    d4ba:	7202      	strb	r2, [r0, #8]
    d4bc:	bd08      	pop	{r3, pc}

0000d4be <le_read_adv_chan_tx_power>:
{
    d4be:	b508      	push	{r3, lr}
    d4c0:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d4c2:	2102      	movs	r1, #2
    d4c4:	f7ff ff82 	bl	d3cc <cmd_complete>
	rp->status = 0x00;
    d4c8:	2300      	movs	r3, #0
    d4ca:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    d4cc:	7043      	strb	r3, [r0, #1]
    d4ce:	bd08      	pop	{r3, pc}

0000d4d0 <vs_read_version_info>:
{
    d4d0:	b508      	push	{r3, lr}
    d4d2:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d4d4:	210d      	movs	r1, #13
    d4d6:	f7ff ff79 	bl	d3cc <cmd_complete>
	rp->status = 0x00;
    d4da:	2300      	movs	r3, #0
    d4dc:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    d4de:	2202      	movs	r2, #2
    d4e0:	7042      	strb	r2, [r0, #1]
    d4e2:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    d4e4:	70c2      	strb	r2, [r0, #3]
    d4e6:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    d4e8:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    d4ea:	2201      	movs	r2, #1
    d4ec:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    d4ee:	2209      	movs	r2, #9
    d4f0:	71c2      	strb	r2, [r0, #7]
    d4f2:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    d4f4:	2263      	movs	r2, #99	; 0x63
    d4f6:	7242      	strb	r2, [r0, #9]
    d4f8:	7283      	strb	r3, [r0, #10]
    d4fa:	72c3      	strb	r3, [r0, #11]
    d4fc:	7303      	strb	r3, [r0, #12]
    d4fe:	bd08      	pop	{r3, pc}

0000d500 <meta_evt>:
{
    d500:	b570      	push	{r4, r5, r6, lr}
    d502:	4604      	mov	r4, r0
    d504:	460e      	mov	r6, r1
    d506:	4615      	mov	r5, r2
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    d508:	3201      	adds	r2, #1
    d50a:	b2d2      	uxtb	r2, r2
    d50c:	213e      	movs	r1, #62	; 0x3e
    d50e:	f7ff ff2b 	bl	d368 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    d512:	3408      	adds	r4, #8
    d514:	2101      	movs	r1, #1
    d516:	4620      	mov	r0, r4
    d518:	f00d fc4c 	bl	1adb4 <net_buf_simple_add>
	me->subevent = subevt;
    d51c:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
    d51e:	4629      	mov	r1, r5
    d520:	4620      	mov	r0, r4
    d522:	f00d fc47 	bl	1adb4 <net_buf_simple_add>
}
    d526:	bd70      	pop	{r4, r5, r6, pc}

0000d528 <le_chan_sel_algo>:
{
    d528:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d52a:	4b0f      	ldr	r3, [pc, #60]	; (d568 <le_chan_sel_algo+0x40>)
    d52c:	e9d3 4500 	ldrd	r4, r5, [r3]
    d530:	2400      	movs	r4, #0
    d532:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    d536:	ea54 0305 	orrs.w	r3, r4, r5
    d53a:	d008      	beq.n	d54e <le_chan_sel_algo+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    d53c:	4b0b      	ldr	r3, [pc, #44]	; (d56c <le_chan_sel_algo+0x44>)
    d53e:	e9d3 4500 	ldrd	r4, r5, [r3]
    d542:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
    d546:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d548:	ea54 0305 	orrs.w	r3, r4, r5
    d54c:	d100      	bne.n	d550 <le_chan_sel_algo+0x28>
    d54e:	bd38      	pop	{r3, r4, r5, pc}
    d550:	4613      	mov	r3, r2
    d552:	460d      	mov	r5, r1
    d554:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    d556:	2203      	movs	r2, #3
    d558:	2114      	movs	r1, #20
    d55a:	4618      	mov	r0, r3
    d55c:	f7ff ffd0 	bl	d500 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    d560:	8005      	strh	r5, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    d562:	78e3      	ldrb	r3, [r4, #3]
    d564:	7083      	strb	r3, [r0, #2]
    d566:	e7f2      	b.n	d54e <le_chan_sel_algo+0x26>
    d568:	2000bc70 	.word	0x2000bc70
    d56c:	2000bc78 	.word	0x2000bc78

0000d570 <disconn_complete>:
{
    d570:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    d572:	4b11      	ldr	r3, [pc, #68]	; (d5b8 <disconn_complete+0x48>)
    d574:	e9d3 4500 	ldrd	r4, r5, [r3]
    d578:	f004 0410 	and.w	r4, r4, #16
    d57c:	2500      	movs	r5, #0
    d57e:	ea54 0305 	orrs.w	r3, r4, r5
    d582:	d100      	bne.n	d586 <disconn_complete+0x16>
    d584:	bd70      	pop	{r4, r5, r6, pc}
    d586:	4614      	mov	r4, r2
    d588:	460e      	mov	r6, r1
    d58a:	4605      	mov	r5, r0
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    d58c:	2204      	movs	r2, #4
    d58e:	2105      	movs	r1, #5
    d590:	4620      	mov	r0, r4
    d592:	f7ff fee9 	bl	d368 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d596:	2104      	movs	r1, #4
    d598:	f104 0008 	add.w	r0, r4, #8
    d59c:	f00d fc0a 	bl	1adb4 <net_buf_simple_add>
	ep->status = 0x00;
    d5a0:	2300      	movs	r3, #0
    d5a2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d5a4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    d5a8:	782b      	ldrb	r3, [r5, #0]
    d5aa:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    d5ac:	4a03      	ldr	r2, [pc, #12]	; (d5bc <disconn_complete+0x4c>)
    d5ae:	6813      	ldr	r3, [r2, #0]
    d5b0:	3b01      	subs	r3, #1
    d5b2:	6013      	str	r3, [r2, #0]
    d5b4:	e7e6      	b.n	d584 <disconn_complete+0x14>
    d5b6:	bf00      	nop
    d5b8:	2000bc70 	.word	0x2000bc70
    d5bc:	20000b44 	.word	0x20000b44

0000d5c0 <enc_refresh_complete>:
{
    d5c0:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    d5c2:	4b0d      	ldr	r3, [pc, #52]	; (d5f8 <enc_refresh_complete+0x38>)
    d5c4:	e9d3 4500 	ldrd	r4, r5, [r3]
    d5c8:	2400      	movs	r4, #0
    d5ca:	f405 4500 	and.w	r5, r5, #32768	; 0x8000
    d5ce:	ea54 0305 	orrs.w	r3, r4, r5
    d5d2:	d100      	bne.n	d5d6 <enc_refresh_complete+0x16>
    d5d4:	bd38      	pop	{r3, r4, r5, pc}
    d5d6:	4614      	mov	r4, r2
    d5d8:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    d5da:	2203      	movs	r2, #3
    d5dc:	2130      	movs	r1, #48	; 0x30
    d5de:	4620      	mov	r0, r4
    d5e0:	f7ff fec2 	bl	d368 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d5e4:	2103      	movs	r1, #3
    d5e6:	f104 0008 	add.w	r0, r4, #8
    d5ea:	f00d fbe3 	bl	1adb4 <net_buf_simple_add>
	ep->status = 0x00;
    d5ee:	2300      	movs	r3, #0
    d5f0:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d5f2:	f8a0 5001 	strh.w	r5, [r0, #1]
    d5f6:	e7ed      	b.n	d5d4 <enc_refresh_complete+0x14>
    d5f8:	2000bc70 	.word	0x2000bc70

0000d5fc <auth_payload_timeout_exp>:
{
    d5fc:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    d5fe:	4b0c      	ldr	r3, [pc, #48]	; (d630 <auth_payload_timeout_exp+0x34>)
    d600:	e9d3 4500 	ldrd	r4, r5, [r3]
    d604:	f404 0400 	and.w	r4, r4, #8388608	; 0x800000
    d608:	2500      	movs	r5, #0
    d60a:	ea54 0305 	orrs.w	r3, r4, r5
    d60e:	d100      	bne.n	d612 <auth_payload_timeout_exp+0x16>
    d610:	bd38      	pop	{r3, r4, r5, pc}
    d612:	4614      	mov	r4, r2
    d614:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    d616:	2202      	movs	r2, #2
    d618:	2157      	movs	r1, #87	; 0x57
    d61a:	4620      	mov	r0, r4
    d61c:	f7ff fea4 	bl	d368 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d620:	2102      	movs	r1, #2
    d622:	f104 0008 	add.w	r0, r4, #8
    d626:	f00d fbc5 	bl	1adb4 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    d62a:	8005      	strh	r5, [r0, #0]
    d62c:	e7f0      	b.n	d610 <auth_payload_timeout_exp+0x14>
    d62e:	bf00      	nop
    d630:	20000bd0 	.word	0x20000bd0

0000d634 <remote_version_info>:
{
    d634:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    d636:	4b11      	ldr	r3, [pc, #68]	; (d67c <remote_version_info+0x48>)
    d638:	e9d3 4500 	ldrd	r4, r5, [r3]
    d63c:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    d640:	2500      	movs	r5, #0
    d642:	ea54 0305 	orrs.w	r3, r4, r5
    d646:	d100      	bne.n	d64a <remote_version_info+0x16>
    d648:	bd70      	pop	{r4, r5, r6, pc}
    d64a:	4615      	mov	r5, r2
    d64c:	460e      	mov	r6, r1
    d64e:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    d650:	2208      	movs	r2, #8
    d652:	210c      	movs	r1, #12
    d654:	4628      	mov	r0, r5
    d656:	f7ff fe87 	bl	d368 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d65a:	2108      	movs	r1, #8
    d65c:	1868      	adds	r0, r5, r1
    d65e:	f00d fba9 	bl	1adb4 <net_buf_simple_add>
	ep->status = 0x00;
    d662:	2300      	movs	r3, #0
    d664:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d666:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    d66a:	7923      	ldrb	r3, [r4, #4]
    d66c:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    d66e:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    d672:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    d674:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    d678:	80c3      	strh	r3, [r0, #6]
    d67a:	e7e5      	b.n	d648 <remote_version_info+0x14>
    d67c:	2000bc70 	.word	0x2000bc70

0000d680 <encrypt_change>:
{
    d680:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    d682:	4b0f      	ldr	r3, [pc, #60]	; (d6c0 <encrypt_change+0x40>)
    d684:	e9d3 4500 	ldrd	r4, r5, [r3]
    d688:	f004 0480 	and.w	r4, r4, #128	; 0x80
    d68c:	2500      	movs	r5, #0
    d68e:	ea54 0305 	orrs.w	r3, r4, r5
    d692:	d100      	bne.n	d696 <encrypt_change+0x16>
    d694:	bd70      	pop	{r4, r5, r6, pc}
    d696:	4615      	mov	r5, r2
    d698:	460e      	mov	r6, r1
    d69a:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    d69c:	2204      	movs	r2, #4
    d69e:	2108      	movs	r1, #8
    d6a0:	4628      	mov	r0, r5
    d6a2:	f7ff fe61 	bl	d368 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d6a6:	2104      	movs	r1, #4
    d6a8:	f105 0008 	add.w	r0, r5, #8
    d6ac:	f00d fb82 	bl	1adb4 <net_buf_simple_add>
	ep->status = err;
    d6b0:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d6b2:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    d6b6:	fab4 f384 	clz	r3, r4
    d6ba:	095b      	lsrs	r3, r3, #5
    d6bc:	70c3      	strb	r3, [r0, #3]
    d6be:	e7e9      	b.n	d694 <encrypt_change+0x14>
    d6c0:	2000bc70 	.word	0x2000bc70

0000d6c4 <read_remote_ver_info>:
{
    d6c4:	b510      	push	{r4, lr}
    d6c6:	460c      	mov	r4, r1
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
    d6c8:	6883      	ldr	r3, [r0, #8]
	status = ll_version_ind_send(handle);
    d6ca:	8818      	ldrh	r0, [r3, #0]
    d6cc:	f00a ffc5 	bl	1865a <ll_version_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d6d0:	b100      	cbz	r0, d6d4 <read_remote_ver_info+0x10>
    d6d2:	200c      	movs	r0, #12
    d6d4:	f7ff fe52 	bl	d37c <cmd_status>
    d6d8:	6020      	str	r0, [r4, #0]
    d6da:	bd10      	pop	{r4, pc}

0000d6dc <link_control_cmd_handle>:
{
    d6dc:	b508      	push	{r3, lr}
    d6de:	460b      	mov	r3, r1
	switch (ocf) {
    d6e0:	2806      	cmp	r0, #6
    d6e2:	d004      	beq.n	d6ee <link_control_cmd_handle+0x12>
    d6e4:	281d      	cmp	r0, #29
    d6e6:	d008      	beq.n	d6fa <link_control_cmd_handle+0x1e>
		return -EINVAL;
    d6e8:	f06f 0015 	mvn.w	r0, #21
}
    d6ec:	bd08      	pop	{r3, pc}
		disconnect(cmd, evt);
    d6ee:	4611      	mov	r1, r2
    d6f0:	4618      	mov	r0, r3
    d6f2:	f7ff fe5d 	bl	d3b0 <disconnect>
	return 0;
    d6f6:	2000      	movs	r0, #0
		break;
    d6f8:	bd08      	pop	{r3, pc}
		read_remote_ver_info(cmd, evt);
    d6fa:	4611      	mov	r1, r2
    d6fc:	4618      	mov	r0, r3
    d6fe:	f7ff ffe1 	bl	d6c4 <read_remote_ver_info>
	return 0;
    d702:	2000      	movs	r0, #0
		break;
    d704:	bd08      	pop	{r3, pc}
	...

0000d708 <reset>:
{
    d708:	b538      	push	{r3, r4, r5, lr}
	dup_count = -1;
    d70a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d70e:	4b0f      	ldr	r3, [pc, #60]	; (d74c <reset+0x44>)
    d710:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    d712:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d716:	f641 75ff 	movw	r5, #8191	; 0x1fff
    d71a:	4b0d      	ldr	r3, [pc, #52]	; (d750 <reset+0x48>)
    d71c:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d720:	2400      	movs	r4, #0
    d722:	2500      	movs	r5, #0
    d724:	4b0b      	ldr	r3, [pc, #44]	; (d754 <reset+0x4c>)
    d726:	e9c3 4500 	strd	r4, r5, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d72a:	241f      	movs	r4, #31
    d72c:	2500      	movs	r5, #0
    d72e:	4b0a      	ldr	r3, [pc, #40]	; (d758 <reset+0x50>)
    d730:	e9c3 4500 	strd	r4, r5, [r3]
	if (buf) {
    d734:	b140      	cbz	r0, d748 <reset+0x40>
    d736:	460c      	mov	r4, r1
		ll_reset();
    d738:	f00a fc8a 	bl	18050 <ll_reset>
		ccst = cmd_complete(evt, sizeof(*ccst));
    d73c:	2101      	movs	r1, #1
    d73e:	4620      	mov	r0, r4
    d740:	f7ff fe44 	bl	d3cc <cmd_complete>
		ccst->status = 0x00;
    d744:	2300      	movs	r3, #0
    d746:	7003      	strb	r3, [r0, #0]
    d748:	bd38      	pop	{r3, r4, r5, pc}
    d74a:	bf00      	nop
    d74c:	20000b48 	.word	0x20000b48
    d750:	2000bc70 	.word	0x2000bc70
    d754:	20000bd0 	.word	0x20000bd0
    d758:	2000bc78 	.word	0x2000bc78

0000d75c <read_tx_power_level>:
{
    d75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d75e:	460a      	mov	r2, r1
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    d760:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d762:	881d      	ldrh	r5, [r3, #0]
    d764:	b2ae      	uxth	r6, r5
	type = cmd->type;
    d766:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    d768:	2104      	movs	r1, #4
    d76a:	4610      	mov	r0, r2
    d76c:	f7ff fe2e 	bl	d3cc <cmd_complete>
    d770:	4604      	mov	r4, r0
	status = ll_tx_power_level_get(handle, type, &rp->tx_power_level);
    d772:	1cc2      	adds	r2, r0, #3
    d774:	4639      	mov	r1, r7
    d776:	4630      	mov	r0, r6
    d778:	f00a ff9b 	bl	186b2 <ll_tx_power_level_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d77c:	b120      	cbz	r0, d788 <read_tx_power_level+0x2c>
    d77e:	2302      	movs	r3, #2
    d780:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d782:	f8a4 5001 	strh.w	r5, [r4, #1]
    d786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d788:	2300      	movs	r3, #0
    d78a:	e7f9      	b.n	d780 <read_tx_power_level+0x24>

0000d78c <read_auth_payload_timeout>:
{
    d78c:	b570      	push	{r4, r5, r6, lr}
    d78e:	b082      	sub	sp, #8
    d790:	460e      	mov	r6, r1
	struct bt_hci_cp_read_auth_payload_timeout *cmd = (void *)buf->data;
    d792:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d794:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    d796:	f10d 0106 	add.w	r1, sp, #6
    d79a:	b2a0      	uxth	r0, r4
    d79c:	f00a ff98 	bl	186d0 <ll_apto_get>
    d7a0:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d7a2:	2105      	movs	r1, #5
    d7a4:	4630      	mov	r0, r6
    d7a6:	f7ff fe11 	bl	d3cc <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d7aa:	b14d      	cbz	r5, d7c0 <read_auth_payload_timeout+0x34>
    d7ac:	230c      	movs	r3, #12
    d7ae:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d7b0:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    d7b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d7b8:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    d7bc:	b002      	add	sp, #8
    d7be:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d7c0:	2300      	movs	r3, #0
    d7c2:	e7f4      	b.n	d7ae <read_auth_payload_timeout+0x22>

0000d7c4 <write_auth_payload_timeout>:
{
    d7c4:	b570      	push	{r4, r5, r6, lr}
    d7c6:	460e      	mov	r6, r1
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    d7c8:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d7ca:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    d7cc:	8859      	ldrh	r1, [r3, #2]
    d7ce:	b2a0      	uxth	r0, r4
    d7d0:	f00a ff9a 	bl	18708 <ll_apto_set>
    d7d4:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d7d6:	2103      	movs	r1, #3
    d7d8:	4630      	mov	r0, r6
    d7da:	f7ff fdf7 	bl	d3cc <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d7de:	b125      	cbz	r5, d7ea <write_auth_payload_timeout+0x26>
    d7e0:	230c      	movs	r3, #12
    d7e2:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d7e4:	f8a0 4001 	strh.w	r4, [r0, #1]
    d7e8:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d7ea:	2300      	movs	r3, #0
    d7ec:	e7f9      	b.n	d7e2 <write_auth_payload_timeout+0x1e>

0000d7ee <ctrl_bb_cmd_handle>:
{
    d7ee:	b508      	push	{r3, lr}
    d7f0:	460b      	mov	r3, r1
	switch (ocf) {
    d7f2:	282d      	cmp	r0, #45	; 0x2d
    d7f4:	d01f      	beq.n	d836 <ctrl_bb_cmd_handle+0x48>
    d7f6:	d908      	bls.n	d80a <ctrl_bb_cmd_handle+0x1c>
    d7f8:	287b      	cmp	r0, #123	; 0x7b
    d7fa:	d022      	beq.n	d842 <ctrl_bb_cmd_handle+0x54>
    d7fc:	287c      	cmp	r0, #124	; 0x7c
    d7fe:	d026      	beq.n	d84e <ctrl_bb_cmd_handle+0x60>
    d800:	2863      	cmp	r0, #99	; 0x63
    d802:	d012      	beq.n	d82a <ctrl_bb_cmd_handle+0x3c>
		return -EINVAL;
    d804:	f06f 0015 	mvn.w	r0, #21
}
    d808:	bd08      	pop	{r3, pc}
	switch (ocf) {
    d80a:	2801      	cmp	r0, #1
    d80c:	d007      	beq.n	d81e <ctrl_bb_cmd_handle+0x30>
    d80e:	2803      	cmp	r0, #3
    d810:	d1f8      	bne.n	d804 <ctrl_bb_cmd_handle+0x16>
		reset(cmd, evt);
    d812:	4611      	mov	r1, r2
    d814:	4618      	mov	r0, r3
    d816:	f7ff ff77 	bl	d708 <reset>
	return 0;
    d81a:	2000      	movs	r0, #0
		break;
    d81c:	bd08      	pop	{r3, pc}
		set_event_mask(cmd, evt);
    d81e:	4611      	mov	r1, r2
    d820:	4618      	mov	r0, r3
    d822:	f7f7 fd13 	bl	524c <set_event_mask>
	return 0;
    d826:	2000      	movs	r0, #0
		break;
    d828:	bd08      	pop	{r3, pc}
		set_event_mask_page_2(cmd, evt);
    d82a:	4611      	mov	r1, r2
    d82c:	4618      	mov	r0, r3
    d82e:	f7ff fded 	bl	d40c <set_event_mask_page_2>
	return 0;
    d832:	2000      	movs	r0, #0
		break;
    d834:	bd08      	pop	{r3, pc}
		read_tx_power_level(cmd, evt);
    d836:	4611      	mov	r1, r2
    d838:	4618      	mov	r0, r3
    d83a:	f7ff ff8f 	bl	d75c <read_tx_power_level>
	return 0;
    d83e:	2000      	movs	r0, #0
		break;
    d840:	bd08      	pop	{r3, pc}
		read_auth_payload_timeout(cmd, evt);
    d842:	4611      	mov	r1, r2
    d844:	4618      	mov	r0, r3
    d846:	f7ff ffa1 	bl	d78c <read_auth_payload_timeout>
	return 0;
    d84a:	2000      	movs	r0, #0
		break;
    d84c:	bd08      	pop	{r3, pc}
		write_auth_payload_timeout(cmd, evt);
    d84e:	4611      	mov	r1, r2
    d850:	4618      	mov	r0, r3
    d852:	f7ff ffb7 	bl	d7c4 <write_auth_payload_timeout>
	return 0;
    d856:	2000      	movs	r0, #0
		break;
    d858:	bd08      	pop	{r3, pc}

0000d85a <read_supported_commands>:
{
    d85a:	b510      	push	{r4, lr}
    d85c:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d85e:	2141      	movs	r1, #65	; 0x41
    d860:	f7ff fdb4 	bl	d3cc <cmd_complete>
    d864:	4604      	mov	r4, r0
	rp->status = 0x00;
    d866:	2100      	movs	r1, #0
    d868:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d86c:	2240      	movs	r2, #64	; 0x40
    d86e:	f01d f853 	bl	2a918 <memset>
	rp->commands[2] |= BIT(7);
    d872:	78e3      	ldrb	r3, [r4, #3]
    d874:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d878:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    d87a:	79a3      	ldrb	r3, [r4, #6]
    d87c:	f063 033f 	orn	r3, r3, #63	; 0x3f
    d880:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    d882:	7ae3      	ldrb	r3, [r4, #11]
    d884:	f043 0304 	orr.w	r3, r3, #4
    d888:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    d88a:	7be3      	ldrb	r3, [r4, #15]
    d88c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    d890:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    d892:	7c23      	ldrb	r3, [r4, #16]
    d894:	f043 0302 	orr.w	r3, r3, #2
    d898:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    d89a:	7de3      	ldrb	r3, [r4, #23]
    d89c:	f043 0304 	orr.w	r3, r3, #4
    d8a0:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    d8a2:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[28] |= BIT(3);
    d8a4:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d8a6:	f062 0208 	orn	r2, r2, #8
    d8aa:	76a2      	strb	r2, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
    d8ac:	22ff      	movs	r2, #255	; 0xff
    d8ae:	76e2      	strb	r2, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
    d8b0:	f043 030f 	orr.w	r3, r3, #15
    d8b4:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    d8b6:	7863      	ldrb	r3, [r4, #1]
    d8b8:	f043 0320 	orr.w	r3, r3, #32
    d8bc:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    d8be:	7722      	strb	r2, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    d8c0:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    d8c4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    d8c8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    d8cc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d8d0:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d8d4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    d8d8:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    d8dc:	f040 0004 	orr.w	r0, r0, #4
    d8e0:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
    d8e4:	f061 010f 	orn	r1, r1, #15
    d8e8:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(0);
    d8ec:	f042 02f9 	orr.w	r2, r2, #249	; 0xf9
    d8f0:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    d8f4:	f043 030f 	orr.w	r3, r3, #15
    d8f8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    d8fc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    d900:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d904:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    d908:	bd10      	pop	{r4, pc}

0000d90a <read_local_features>:
{
    d90a:	b510      	push	{r4, lr}
    d90c:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d90e:	2109      	movs	r1, #9
    d910:	f7ff fd5c 	bl	d3cc <cmd_complete>
    d914:	4604      	mov	r4, r0
	rp->status = 0x00;
    d916:	2100      	movs	r1, #0
    d918:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d91c:	2208      	movs	r2, #8
    d91e:	f01c fffb 	bl	2a918 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    d922:	2360      	movs	r3, #96	; 0x60
    d924:	7163      	strb	r3, [r4, #5]
    d926:	bd10      	pop	{r4, pc}

0000d928 <le_read_local_features>:
{
    d928:	b510      	push	{r4, lr}
    d92a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d92c:	2109      	movs	r1, #9
    d92e:	f7ff fd4d 	bl	d3cc <cmd_complete>
    d932:	4604      	mov	r4, r0
	rp->status = 0x00;
    d934:	2100      	movs	r1, #0
    d936:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d93a:	2208      	movs	r2, #8
    d93c:	f01c ffec 	bl	2a918 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    d940:	23ff      	movs	r3, #255	; 0xff
    d942:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    d944:	2341      	movs	r3, #65	; 0x41
    d946:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    d948:	2301      	movs	r3, #1
    d94a:	70e3      	strb	r3, [r4, #3]
    d94c:	bd10      	pop	{r4, pc}

0000d94e <vs_read_supported_commands>:
{
    d94e:	b510      	push	{r4, lr}
    d950:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d952:	2141      	movs	r1, #65	; 0x41
    d954:	f7ff fd3a 	bl	d3cc <cmd_complete>
    d958:	4604      	mov	r4, r0
	rp->status = 0x00;
    d95a:	2100      	movs	r1, #0
    d95c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d960:	2240      	movs	r2, #64	; 0x40
    d962:	f01c ffd9 	bl	2a918 <memset>
	rp->commands[0] |= BIT(0) | BIT(1) | BIT(2);
    d966:	7863      	ldrb	r3, [r4, #1]
	rp->commands[0] |= BIT(5) | BIT(7);
    d968:	f063 0358 	orn	r3, r3, #88	; 0x58
    d96c:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    d96e:	78a3      	ldrb	r3, [r4, #2]
    d970:	f043 0303 	orr.w	r3, r3, #3
    d974:	70a3      	strb	r3, [r4, #2]
    d976:	bd10      	pop	{r4, pc}

0000d978 <vs_read_supported_features>:
{
    d978:	b508      	push	{r3, lr}
    d97a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d97c:	2109      	movs	r1, #9
    d97e:	f7ff fd25 	bl	d3cc <cmd_complete>
	rp->status = 0x00;
    d982:	2100      	movs	r1, #0
    d984:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d988:	2208      	movs	r2, #8
    d98a:	f01c ffc5 	bl	2a918 <memset>
    d98e:	bd08      	pop	{r3, pc}

0000d990 <vs_read_static_addrs>:
{
    d990:	b510      	push	{r4, lr}
    d992:	4608      	mov	r0, r1
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d994:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d998:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    d99c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d9a0:	d00d      	beq.n	d9be <vs_read_static_addrs+0x2e>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    d9a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d9a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    d9aa:	f013 0f01 	tst.w	r3, #1
    d9ae:	d110      	bne.n	d9d2 <vs_read_static_addrs+0x42>
	rp = cmd_complete(evt, sizeof(*rp));
    d9b0:	2102      	movs	r1, #2
    d9b2:	f7ff fd0b 	bl	d3cc <cmd_complete>
	rp->status = 0x00;
    d9b6:	2300      	movs	r3, #0
    d9b8:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    d9ba:	7043      	strb	r3, [r0, #1]
    d9bc:	bd10      	pop	{r4, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    d9be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d9c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    d9c6:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d9c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d9cc:	4293      	cmp	r3, r2
    d9ce:	d1e8      	bne.n	d9a2 <vs_read_static_addrs+0x12>
    d9d0:	e7ee      	b.n	d9b0 <vs_read_static_addrs+0x20>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    d9d2:	2118      	movs	r1, #24
    d9d4:	f7ff fcfa 	bl	d3cc <cmd_complete>
		rp->status = 0x00;
    d9d8:	2100      	movs	r1, #0
    d9da:	7001      	strb	r1, [r0, #0]
		rp->num_addrs = 1;
    d9dc:	2301      	movs	r3, #1
    d9de:	7043      	strb	r3, [r0, #1]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    d9e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d9e4:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
    d9e8:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
    d9ea:	f3c3 2407 	ubfx	r4, r3, #8, #8
    d9ee:	70c4      	strb	r4, [r0, #3]
	sys_put_le16(val >> 16, &dst[2]);
    d9f0:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d9f2:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    d9f4:	0a1b      	lsrs	r3, r3, #8
    d9f6:	7143      	strb	r3, [r0, #5]
		sys_put_le16(NRF_FICR->DEVICEADDR[1] | 0x0200, &addr->bdaddr.val[4]);
    d9f8:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    d9fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    da00:	b29b      	uxth	r3, r3
	dst[0] = val;
    da02:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    da04:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    da06:	f063 033f 	orn	r3, r3, #63	; 0x3f
    da0a:	71c3      	strb	r3, [r0, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    da0c:	2210      	movs	r2, #16
    da0e:	3008      	adds	r0, #8
    da10:	f01c ff82 	bl	2a918 <memset>
		return;
    da14:	bd10      	pop	{r4, pc}

0000da16 <vs_read_key_hierarchy_roots>:
{
    da16:	b510      	push	{r4, lr}
    da18:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    da1a:	2121      	movs	r1, #33	; 0x21
    da1c:	f7ff fcd6 	bl	d3cc <cmd_complete>
    da20:	4604      	mov	r4, r0
	rp->status = 0x00;
    da22:	2300      	movs	r3, #0
    da24:	7003      	strb	r3, [r0, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    da26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    da2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    da2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    da32:	d03f      	beq.n	dab4 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    da34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    da38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    da3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    da40:	d038      	beq.n	dab4 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    da42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    da46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    da4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    da4e:	d031      	beq.n	dab4 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    da50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    da54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    da58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    da5c:	d02a      	beq.n	dab4 <vs_read_key_hierarchy_roots+0x9e>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    da5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    da62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
    da66:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    da68:	f3c3 2107 	ubfx	r1, r3, #8, #8
    da6c:	7081      	strb	r1, [r0, #2]
	sys_put_le16(val >> 16, &dst[2]);
    da6e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    da70:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    da72:	0a1b      	lsrs	r3, r3, #8
    da74:	7103      	strb	r3, [r0, #4]
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    da76:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
    da7a:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    da7c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    da80:	7181      	strb	r1, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
    da82:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    da84:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    da86:	0a1b      	lsrs	r3, r3, #8
    da88:	7203      	strb	r3, [r0, #8]
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    da8a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
    da8e:	7243      	strb	r3, [r0, #9]
	dst[1] = val >> 8;
    da90:	f3c3 2107 	ubfx	r1, r3, #8, #8
    da94:	7281      	strb	r1, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
    da96:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    da98:	72c3      	strb	r3, [r0, #11]
	dst[1] = val >> 8;
    da9a:	0a1b      	lsrs	r3, r3, #8
    da9c:	7303      	strb	r3, [r0, #12]
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    da9e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
    daa2:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    daa4:	f3c3 2207 	ubfx	r2, r3, #8, #8
    daa8:	7382      	strb	r2, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
    daaa:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    daac:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    daae:	0a1b      	lsrs	r3, r3, #8
    dab0:	7403      	strb	r3, [r0, #16]
    dab2:	e004      	b.n	dabe <vs_read_key_hierarchy_roots+0xa8>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    dab4:	2210      	movs	r2, #16
    dab6:	2100      	movs	r1, #0
    dab8:	1c60      	adds	r0, r4, #1
    daba:	f01c ff2d 	bl	2a918 <memset>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    dabe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    dac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    dac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    daca:	d040      	beq.n	db4e <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    dacc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    dad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    dad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    dad8:	d039      	beq.n	db4e <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    dada:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    dade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    dae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    dae6:	d032      	beq.n	db4e <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    dae8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    daec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    daf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    daf4:	d02b      	beq.n	db4e <vs_read_key_hierarchy_roots+0x138>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    daf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    dafa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
    dafe:	7463      	strb	r3, [r4, #17]
	dst[1] = val >> 8;
    db00:	f3c3 2107 	ubfx	r1, r3, #8, #8
    db04:	74a1      	strb	r1, [r4, #18]
	sys_put_le16(val >> 16, &dst[2]);
    db06:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    db08:	74e3      	strb	r3, [r4, #19]
	dst[1] = val >> 8;
    db0a:	0a1b      	lsrs	r3, r3, #8
    db0c:	7523      	strb	r3, [r4, #20]
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    db0e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
    db12:	7563      	strb	r3, [r4, #21]
	dst[1] = val >> 8;
    db14:	f3c3 2107 	ubfx	r1, r3, #8, #8
    db18:	75a1      	strb	r1, [r4, #22]
	sys_put_le16(val >> 16, &dst[2]);
    db1a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    db1c:	75e3      	strb	r3, [r4, #23]
	dst[1] = val >> 8;
    db1e:	0a1b      	lsrs	r3, r3, #8
    db20:	7623      	strb	r3, [r4, #24]
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    db22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
    db26:	7663      	strb	r3, [r4, #25]
	dst[1] = val >> 8;
    db28:	f3c3 2107 	ubfx	r1, r3, #8, #8
    db2c:	76a1      	strb	r1, [r4, #26]
	sys_put_le16(val >> 16, &dst[2]);
    db2e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    db30:	76e3      	strb	r3, [r4, #27]
	dst[1] = val >> 8;
    db32:	0a1b      	lsrs	r3, r3, #8
    db34:	7723      	strb	r3, [r4, #28]
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    db36:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
    db3a:	7763      	strb	r3, [r4, #29]
	dst[1] = val >> 8;
    db3c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    db40:	77a2      	strb	r2, [r4, #30]
	sys_put_le16(val >> 16, &dst[2]);
    db42:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    db44:	77e3      	strb	r3, [r4, #31]
	dst[1] = val >> 8;
    db46:	0a1b      	lsrs	r3, r3, #8
    db48:	f884 3020 	strb.w	r3, [r4, #32]
    db4c:	bd10      	pop	{r4, pc}
		memset(rp->er, 0x00, sizeof(rp->er));
    db4e:	2210      	movs	r2, #16
    db50:	2100      	movs	r1, #0
    db52:	f104 0011 	add.w	r0, r4, #17
    db56:	f01c fedf 	bl	2a918 <memset>
    db5a:	bd10      	pop	{r4, pc}

0000db5c <read_bd_addr>:
{
    db5c:	b508      	push	{r3, lr}
    db5e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    db60:	2107      	movs	r1, #7
    db62:	f7ff fc33 	bl	d3cc <cmd_complete>
	rp->status = 0x00;
    db66:	2300      	movs	r3, #0
    db68:	4601      	mov	r1, r0
    db6a:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    db6e:	4618      	mov	r0, r3
    db70:	f00b fd62 	bl	19638 <ll_addr_get>
    db74:	bd08      	pop	{r3, pc}

0000db76 <info_cmd_handle>:
{
    db76:	b508      	push	{r3, lr}
    db78:	460b      	mov	r3, r1
	switch (ocf) {
    db7a:	3801      	subs	r0, #1
    db7c:	2808      	cmp	r0, #8
    db7e:	d81e      	bhi.n	dbbe <info_cmd_handle+0x48>
    db80:	e8df f000 	tbb	[pc, r0]
    db84:	1d110b05 	.word	0x1d110b05
    db88:	1d1d1d1d 	.word	0x1d1d1d1d
    db8c:	17          	.byte	0x17
    db8d:	00          	.byte	0x00
		read_local_version_info(cmd, evt);
    db8e:	4611      	mov	r1, r2
    db90:	4618      	mov	r0, r3
    db92:	f7ff fc61 	bl	d458 <read_local_version_info>
	return 0;
    db96:	2000      	movs	r0, #0
		break;
    db98:	bd08      	pop	{r3, pc}
		read_supported_commands(cmd, evt);
    db9a:	4611      	mov	r1, r2
    db9c:	4618      	mov	r0, r3
    db9e:	f7ff fe5c 	bl	d85a <read_supported_commands>
	return 0;
    dba2:	2000      	movs	r0, #0
		break;
    dba4:	bd08      	pop	{r3, pc}
		read_local_features(cmd, evt);
    dba6:	4611      	mov	r1, r2
    dba8:	4618      	mov	r0, r3
    dbaa:	f7ff feae 	bl	d90a <read_local_features>
	return 0;
    dbae:	2000      	movs	r0, #0
		break;
    dbb0:	bd08      	pop	{r3, pc}
		read_bd_addr(cmd, evt);
    dbb2:	4611      	mov	r1, r2
    dbb4:	4618      	mov	r0, r3
    dbb6:	f7ff ffd1 	bl	db5c <read_bd_addr>
	return 0;
    dbba:	2000      	movs	r0, #0
		break;
    dbbc:	bd08      	pop	{r3, pc}
		return -EINVAL;
    dbbe:	f06f 0015 	mvn.w	r0, #21
}
    dbc2:	bd08      	pop	{r3, pc}

0000dbc4 <le_set_random_address>:
{
    dbc4:	b510      	push	{r4, lr}
    dbc6:	460c      	mov	r4, r1
	ll_addr_set(1, &cmd->bdaddr.val[0]);
    dbc8:	6881      	ldr	r1, [r0, #8]
    dbca:	2001      	movs	r0, #1
    dbcc:	f00b fd56 	bl	1967c <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    dbd0:	2101      	movs	r1, #1
    dbd2:	4620      	mov	r0, r4
    dbd4:	f7ff fbfa 	bl	d3cc <cmd_complete>
	ccst->status = 0x00;
    dbd8:	2300      	movs	r3, #0
    dbda:	7003      	strb	r3, [r0, #0]
    dbdc:	bd10      	pop	{r4, pc}

0000dbde <vs_write_bd_addr>:
{
    dbde:	b510      	push	{r4, lr}
    dbe0:	460c      	mov	r4, r1
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    dbe2:	6881      	ldr	r1, [r0, #8]
    dbe4:	2000      	movs	r0, #0
    dbe6:	f00b fd49 	bl	1967c <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    dbea:	2101      	movs	r1, #1
    dbec:	4620      	mov	r0, r4
    dbee:	f7ff fbed 	bl	d3cc <cmd_complete>
	ccst->status = 0x00;
    dbf2:	2300      	movs	r3, #0
    dbf4:	7003      	strb	r3, [r0, #0]
    dbf6:	bd10      	pop	{r4, pc}

0000dbf8 <le_read_wl_size>:
{
    dbf8:	b510      	push	{r4, lr}
    dbfa:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    dbfc:	2102      	movs	r1, #2
    dbfe:	f7ff fbe5 	bl	d3cc <cmd_complete>
    dc02:	4604      	mov	r4, r0
	rp->status = 0x00;
    dc04:	2300      	movs	r3, #0
    dc06:	7003      	strb	r3, [r0, #0]
	rp->wl_size = ll_wl_size_get();
    dc08:	f00b ff38 	bl	19a7c <ll_wl_size_get>
    dc0c:	7060      	strb	r0, [r4, #1]
    dc0e:	bd10      	pop	{r4, pc}

0000dc10 <le_clear_wl>:
{
    dc10:	b510      	push	{r4, lr}
    dc12:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc14:	2101      	movs	r1, #1
    dc16:	f7ff fbd9 	bl	d3cc <cmd_complete>
    dc1a:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    dc1c:	f00b ff30 	bl	19a80 <ll_wl_clear>
    dc20:	7020      	strb	r0, [r4, #0]
    dc22:	bd10      	pop	{r4, pc}

0000dc24 <le_add_dev_to_wl>:
{
    dc24:	b538      	push	{r3, r4, r5, lr}
    dc26:	460d      	mov	r5, r1
	status = ll_wl_add(&cmd->addr);
    dc28:	6880      	ldr	r0, [r0, #8]
    dc2a:	f00c f81b 	bl	19c64 <ll_wl_add>
    dc2e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc30:	2101      	movs	r1, #1
    dc32:	4628      	mov	r0, r5
    dc34:	f7ff fbca 	bl	d3cc <cmd_complete>
	ccst->status = status;
    dc38:	7004      	strb	r4, [r0, #0]
    dc3a:	bd38      	pop	{r3, r4, r5, pc}

0000dc3c <le_rem_dev_from_wl>:
{
    dc3c:	b538      	push	{r3, r4, r5, lr}
    dc3e:	460d      	mov	r5, r1
	status = ll_wl_remove(&cmd->addr);
    dc40:	6880      	ldr	r0, [r0, #8]
    dc42:	f00b ff33 	bl	19aac <ll_wl_remove>
    dc46:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc48:	2101      	movs	r1, #1
    dc4a:	4628      	mov	r0, r5
    dc4c:	f7ff fbbe 	bl	d3cc <cmd_complete>
	ccst->status = status;
    dc50:	7004      	strb	r4, [r0, #0]
    dc52:	bd38      	pop	{r3, r4, r5, pc}

0000dc54 <le_encrypt>:
{
    dc54:	b510      	push	{r4, lr}
    dc56:	b084      	sub	sp, #16
    dc58:	460c      	mov	r4, r1
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    dc5a:	6880      	ldr	r0, [r0, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    dc5c:	2300      	movs	r3, #0
    dc5e:	466a      	mov	r2, sp
    dc60:	f100 0110 	add.w	r1, r0, #16
    dc64:	f001 fc9e 	bl	f5a4 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    dc68:	2111      	movs	r1, #17
    dc6a:	4620      	mov	r0, r4
    dc6c:	f7ff fbae 	bl	d3cc <cmd_complete>
	rp->status = 0x00;
    dc70:	2300      	movs	r3, #0
    dc72:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    dc76:	2210      	movs	r2, #16
    dc78:	4669      	mov	r1, sp
    dc7a:	f7f2 fb21 	bl	2c0 <memcpy>
}
    dc7e:	b004      	add	sp, #16
    dc80:	bd10      	pop	{r4, pc}
	...

0000dc84 <vs_read_build_info>:
{
    dc84:	b570      	push	{r4, r5, r6, lr}
    dc86:	b08a      	sub	sp, #40	; 0x28
    dc88:	460e      	mov	r6, r1
	const char build_info[] = HCI_VS_BUILD_INFO;
    dc8a:	466c      	mov	r4, sp
    dc8c:	4d0c      	ldr	r5, [pc, #48]	; (dcc0 <vs_read_build_info+0x3c>)
    dc8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    dc90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    dc92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    dc94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    dc96:	e895 0003 	ldmia.w	r5, {r0, r1}
    dc9a:	f844 0b04 	str.w	r0, [r4], #4
    dc9e:	f824 1b02 	strh.w	r1, [r4], #2
    dca2:	0c09      	lsrs	r1, r1, #16
    dca4:	7021      	strb	r1, [r4, #0]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    dca6:	2128      	movs	r1, #40	; 0x28
    dca8:	4630      	mov	r0, r6
    dcaa:	f7ff fb8f 	bl	d3cc <cmd_complete>
	rp->status = 0x00;
    dcae:	2300      	movs	r3, #0
    dcb0:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    dcb4:	2227      	movs	r2, #39	; 0x27
    dcb6:	4669      	mov	r1, sp
    dcb8:	f7f2 fb02 	bl	2c0 <memcpy>
}
    dcbc:	b00a      	add	sp, #40	; 0x28
    dcbe:	bd70      	pop	{r4, r5, r6, pc}
    dcc0:	000317b8 	.word	0x000317b8

0000dcc4 <vendor_cmd_handle>:
{
    dcc4:	b508      	push	{r3, lr}
    dcc6:	460b      	mov	r3, r1
	switch (ocf) {
    dcc8:	3801      	subs	r0, #1
    dcca:	2809      	cmp	r0, #9
    dccc:	d830      	bhi.n	dd30 <vendor_cmd_handle+0x6c>
    dcce:	e8df f000 	tbb	[pc, r0]
    dcd2:	0b05      	.short	0x0b05
    dcd4:	1d2f2f11 	.word	0x1d2f2f11
    dcd8:	2923172f 	.word	0x2923172f
		vs_read_version_info(cmd, evt);
    dcdc:	4611      	mov	r1, r2
    dcde:	4618      	mov	r0, r3
    dce0:	f7ff fbf6 	bl	d4d0 <vs_read_version_info>
	return 0;
    dce4:	2000      	movs	r0, #0
		break;
    dce6:	bd08      	pop	{r3, pc}
		vs_read_supported_commands(cmd, evt);
    dce8:	4611      	mov	r1, r2
    dcea:	4618      	mov	r0, r3
    dcec:	f7ff fe2f 	bl	d94e <vs_read_supported_commands>
	return 0;
    dcf0:	2000      	movs	r0, #0
		break;
    dcf2:	bd08      	pop	{r3, pc}
		vs_read_supported_features(cmd, evt);
    dcf4:	4611      	mov	r1, r2
    dcf6:	4618      	mov	r0, r3
    dcf8:	f7ff fe3e 	bl	d978 <vs_read_supported_features>
	return 0;
    dcfc:	2000      	movs	r0, #0
		break;
    dcfe:	bd08      	pop	{r3, pc}
		vs_read_build_info(cmd, evt);
    dd00:	4611      	mov	r1, r2
    dd02:	4618      	mov	r0, r3
    dd04:	f7ff ffbe 	bl	dc84 <vs_read_build_info>
	return 0;
    dd08:	2000      	movs	r0, #0
		break;
    dd0a:	bd08      	pop	{r3, pc}
		vs_write_bd_addr(cmd, evt);
    dd0c:	4611      	mov	r1, r2
    dd0e:	4618      	mov	r0, r3
    dd10:	f7ff ff65 	bl	dbde <vs_write_bd_addr>
	return 0;
    dd14:	2000      	movs	r0, #0
		break;
    dd16:	bd08      	pop	{r3, pc}
		vs_read_static_addrs(cmd, evt);
    dd18:	4611      	mov	r1, r2
    dd1a:	4618      	mov	r0, r3
    dd1c:	f7ff fe38 	bl	d990 <vs_read_static_addrs>
	return 0;
    dd20:	2000      	movs	r0, #0
		break;
    dd22:	bd08      	pop	{r3, pc}
		vs_read_key_hierarchy_roots(cmd, evt);
    dd24:	4611      	mov	r1, r2
    dd26:	4618      	mov	r0, r3
    dd28:	f7ff fe75 	bl	da16 <vs_read_key_hierarchy_roots>
	return 0;
    dd2c:	2000      	movs	r0, #0
		break;
    dd2e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    dd30:	f06f 0015 	mvn.w	r0, #21
}
    dd34:	bd08      	pop	{r3, pc}

0000dd36 <le_unknown_rsp>:
{
    dd36:	b508      	push	{r3, lr}
	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    dd38:	7903      	ldrb	r3, [r0, #4]
    dd3a:	2b0e      	cmp	r3, #14
    dd3c:	d000      	beq.n	dd40 <le_unknown_rsp+0xa>
    dd3e:	bd08      	pop	{r3, pc}
    dd40:	4613      	mov	r3, r2
    dd42:	460a      	mov	r2, r1
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    dd44:	2100      	movs	r1, #0
    dd46:	201a      	movs	r0, #26
    dd48:	f7f8 f966 	bl	6018 <le_remote_feat_complete>
}
    dd4c:	e7f7      	b.n	dd3e <le_unknown_rsp+0x8>

0000dd4e <le_rand>:
{
    dd4e:	b508      	push	{r3, lr}
    dd50:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    dd52:	2109      	movs	r1, #9
    dd54:	f7ff fb3a 	bl	d3cc <cmd_complete>
	rp->status = 0x00;
    dd58:	2300      	movs	r3, #0
    dd5a:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    dd5e:	2108      	movs	r1, #8
    dd60:	f003 fcb2 	bl	116c8 <bt_rand>
    dd64:	bd08      	pop	{r3, pc}

0000dd66 <le_set_adv_param>:
{
    dd66:	b570      	push	{r4, r5, r6, lr}
    dd68:	b08c      	sub	sp, #48	; 0x30
    dd6a:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    dd6c:	6881      	ldr	r1, [r0, #8]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    dd6e:	460c      	mov	r4, r1
    dd70:	f834 2b07 	ldrh.w	r2, [r4], #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    dd74:	790b      	ldrb	r3, [r1, #4]
    dd76:	2000      	movs	r0, #0
    dd78:	900a      	str	r0, [sp, #40]	; 0x28
    dd7a:	9009      	str	r0, [sp, #36]	; 0x24
    dd7c:	9008      	str	r0, [sp, #32]
    dd7e:	9007      	str	r0, [sp, #28]
    dd80:	9006      	str	r0, [sp, #24]
    dd82:	9005      	str	r0, [sp, #20]
    dd84:	7b8e      	ldrb	r6, [r1, #14]
    dd86:	9604      	str	r6, [sp, #16]
    dd88:	7b4e      	ldrb	r6, [r1, #13]
    dd8a:	9603      	str	r6, [sp, #12]
    dd8c:	9402      	str	r4, [sp, #8]
    dd8e:	798c      	ldrb	r4, [r1, #6]
    dd90:	9401      	str	r4, [sp, #4]
    dd92:	7949      	ldrb	r1, [r1, #5]
    dd94:	9100      	str	r1, [sp, #0]
    dd96:	4601      	mov	r1, r0
    dd98:	f00c fc40 	bl	1a61c <ll_adv_params_set>
    dd9c:	b2c4      	uxtb	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dd9e:	2101      	movs	r1, #1
    dda0:	4628      	mov	r0, r5
    dda2:	f7ff fb13 	bl	d3cc <cmd_complete>
	ccst->status = status;
    dda6:	7004      	strb	r4, [r0, #0]
}
    dda8:	b00c      	add	sp, #48	; 0x30
    ddaa:	bd70      	pop	{r4, r5, r6, pc}

0000ddac <le_set_adv_data>:
{
    ddac:	b510      	push	{r4, lr}
    ddae:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
    ddb0:	6883      	ldr	r3, [r0, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    ddb2:	1c59      	adds	r1, r3, #1
    ddb4:	7818      	ldrb	r0, [r3, #0]
    ddb6:	f00c fd55 	bl	1a864 <ll_adv_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    ddba:	2101      	movs	r1, #1
    ddbc:	4620      	mov	r0, r4
    ddbe:	f7ff fb05 	bl	d3cc <cmd_complete>
	ccst->status = 0x00;
    ddc2:	2300      	movs	r3, #0
    ddc4:	7003      	strb	r3, [r0, #0]
    ddc6:	bd10      	pop	{r4, pc}

0000ddc8 <le_set_scan_rsp_data>:
{
    ddc8:	b510      	push	{r4, lr}
    ddca:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
    ddcc:	6883      	ldr	r3, [r0, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    ddce:	1c59      	adds	r1, r3, #1
    ddd0:	7818      	ldrb	r0, [r3, #0]
    ddd2:	f00c fda0 	bl	1a916 <ll_scan_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    ddd6:	2101      	movs	r1, #1
    ddd8:	4620      	mov	r0, r4
    ddda:	f7ff faf7 	bl	d3cc <cmd_complete>
	ccst->status = 0x00;
    ddde:	2300      	movs	r3, #0
    dde0:	7003      	strb	r3, [r0, #0]
    dde2:	bd10      	pop	{r4, pc}

0000dde4 <le_set_adv_enable>:
{
    dde4:	b538      	push	{r3, r4, r5, lr}
    dde6:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
    dde8:	6883      	ldr	r3, [r0, #8]
	status = ll_adv_enable(cmd->enable);
    ddea:	7818      	ldrb	r0, [r3, #0]
    ddec:	f00c fdd8 	bl	1a9a0 <ll_adv_enable>
    ddf0:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    ddf2:	2101      	movs	r1, #1
    ddf4:	4628      	mov	r0, r5
    ddf6:	f7ff fae9 	bl	d3cc <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    ddfa:	b114      	cbz	r4, de02 <le_set_adv_enable+0x1e>
    ddfc:	230c      	movs	r3, #12
    ddfe:	7003      	strb	r3, [r0, #0]
    de00:	bd38      	pop	{r3, r4, r5, pc}
    de02:	2300      	movs	r3, #0
    de04:	e7fb      	b.n	ddfe <le_set_adv_enable+0x1a>

0000de06 <le_set_scan_param>:
{
    de06:	b530      	push	{r4, r5, lr}
    de08:	b083      	sub	sp, #12
    de0a:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    de0c:	6884      	ldr	r4, [r0, #8]
	interval = sys_le16_to_cpu(cmd->interval);
    de0e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	window = sys_le16_to_cpu(cmd->window);
    de12:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    de16:	7820      	ldrb	r0, [r4, #0]
    de18:	7963      	ldrb	r3, [r4, #5]
    de1a:	79a4      	ldrb	r4, [r4, #6]
    de1c:	9400      	str	r4, [sp, #0]
    de1e:	f00c fe51 	bl	1aac4 <ll_scan_params_set>
    de22:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    de24:	2101      	movs	r1, #1
    de26:	4628      	mov	r0, r5
    de28:	f7ff fad0 	bl	d3cc <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de2c:	b11c      	cbz	r4, de36 <le_set_scan_param+0x30>
    de2e:	230c      	movs	r3, #12
    de30:	7003      	strb	r3, [r0, #0]
}
    de32:	b003      	add	sp, #12
    de34:	bd30      	pop	{r4, r5, pc}
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de36:	2300      	movs	r3, #0
    de38:	e7fa      	b.n	de30 <le_set_scan_param+0x2a>
	...

0000de3c <le_set_scan_enable>:
{
    de3c:	b538      	push	{r3, r4, r5, lr}
    de3e:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    de40:	6883      	ldr	r3, [r0, #8]
	if (cmd->enable && cmd->filter_dup) {
    de42:	781a      	ldrb	r2, [r3, #0]
    de44:	b13a      	cbz	r2, de56 <le_set_scan_enable+0x1a>
    de46:	785a      	ldrb	r2, [r3, #1]
    de48:	b12a      	cbz	r2, de56 <le_set_scan_enable+0x1a>
		dup_count = 0;
    de4a:	2200      	movs	r2, #0
    de4c:	490b      	ldr	r1, [pc, #44]	; (de7c <le_set_scan_enable+0x40>)
    de4e:	600a      	str	r2, [r1, #0]
		dup_curr = 0;
    de50:	490b      	ldr	r1, [pc, #44]	; (de80 <le_set_scan_enable+0x44>)
    de52:	600a      	str	r2, [r1, #0]
    de54:	e003      	b.n	de5e <le_set_scan_enable+0x22>
		dup_count = -1;
    de56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    de5a:	4a08      	ldr	r2, [pc, #32]	; (de7c <le_set_scan_enable+0x40>)
    de5c:	6011      	str	r1, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    de5e:	7818      	ldrb	r0, [r3, #0]
    de60:	f00c fe4c 	bl	1aafc <ll_scan_enable>
    de64:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    de66:	2101      	movs	r1, #1
    de68:	4628      	mov	r0, r5
    de6a:	f7ff faaf 	bl	d3cc <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de6e:	b114      	cbz	r4, de76 <le_set_scan_enable+0x3a>
    de70:	230c      	movs	r3, #12
    de72:	7003      	strb	r3, [r0, #0]
    de74:	bd38      	pop	{r3, r4, r5, pc}
    de76:	2300      	movs	r3, #0
    de78:	e7fb      	b.n	de72 <le_set_scan_enable+0x36>
    de7a:	bf00      	nop
    de7c:	20000b48 	.word	0x20000b48
    de80:	20000b4c 	.word	0x20000b4c

0000de84 <le_create_connection>:
{
    de84:	b5f0      	push	{r4, r5, r6, r7, lr}
    de86:	b087      	sub	sp, #28
    de88:	460d      	mov	r5, r1
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
    de8a:	6884      	ldr	r4, [r0, #8]
	scan_interval = sys_le16_to_cpu(cmd->scan_interval);
    de8c:	8820      	ldrh	r0, [r4, #0]
	scan_window = sys_le16_to_cpu(cmd->scan_window);
    de8e:	8861      	ldrh	r1, [r4, #2]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    de90:	f8b4 700f 	ldrh.w	r7, [r4, #15]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    de94:	f8b4 e011 	ldrh.w	lr, [r4, #17]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    de98:	f8b4 c013 	ldrh.w	ip, [r4, #19]
	status = ll_create_connection(scan_interval, scan_window,
    de9c:	7922      	ldrb	r2, [r4, #4]
    de9e:	7963      	ldrb	r3, [r4, #5]
    dea0:	1da6      	adds	r6, r4, #6
    dea2:	7b24      	ldrb	r4, [r4, #12]
    dea4:	f8cd c010 	str.w	ip, [sp, #16]
    dea8:	f8cd e00c 	str.w	lr, [sp, #12]
    deac:	9702      	str	r7, [sp, #8]
    deae:	9401      	str	r4, [sp, #4]
    deb0:	9600      	str	r6, [sp, #0]
    deb2:	f00c fe63 	bl	1ab7c <ll_create_connection>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    deb6:	b100      	cbz	r0, deba <le_create_connection+0x36>
    deb8:	200c      	movs	r0, #12
    deba:	f7ff fa5f 	bl	d37c <cmd_status>
    debe:	6028      	str	r0, [r5, #0]
}
    dec0:	b007      	add	sp, #28
    dec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000dec4 <le_create_conn_cancel>:
{
    dec4:	b538      	push	{r3, r4, r5, lr}
    dec6:	460d      	mov	r5, r1
	status = ll_connect_disable();
    dec8:	f00b f9fe 	bl	192c8 <ll_connect_disable>
    decc:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dece:	2101      	movs	r1, #1
    ded0:	4628      	mov	r0, r5
    ded2:	f7ff fa7b 	bl	d3cc <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    ded6:	b114      	cbz	r4, dede <le_create_conn_cancel+0x1a>
    ded8:	230c      	movs	r3, #12
    deda:	7003      	strb	r3, [r0, #0]
    dedc:	bd38      	pop	{r3, r4, r5, pc}
    dede:	2300      	movs	r3, #0
    dee0:	e7fb      	b.n	deda <le_create_conn_cancel+0x16>

0000dee2 <le_set_host_chan_classif>:
{
    dee2:	b538      	push	{r3, r4, r5, lr}
    dee4:	460d      	mov	r5, r1
	status = ll_chm_update(&cmd->ch_map[0]);
    dee6:	6880      	ldr	r0, [r0, #8]
    dee8:	f00a fb06 	bl	184f8 <ll_chm_update>
    deec:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    deee:	2101      	movs	r1, #1
    def0:	4628      	mov	r0, r5
    def2:	f7ff fa6b 	bl	d3cc <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    def6:	b114      	cbz	r4, defe <le_set_host_chan_classif+0x1c>
    def8:	230c      	movs	r3, #12
    defa:	7003      	strb	r3, [r0, #0]
    defc:	bd38      	pop	{r3, r4, r5, pc}
    defe:	2300      	movs	r3, #0
    df00:	e7fb      	b.n	defa <le_set_host_chan_classif+0x18>

0000df02 <le_start_encryption>:
{
    df02:	b510      	push	{r4, lr}
    df04:	460c      	mov	r4, r1
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
    df06:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    df08:	4611      	mov	r1, r2
    df0a:	f831 0b02 	ldrh.w	r0, [r1], #2
	status = ll_enc_req_send(handle,
    df0e:	f102 030c 	add.w	r3, r2, #12
    df12:	320a      	adds	r2, #10
    df14:	f00a fe2a 	bl	18b6c <ll_enc_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    df18:	b100      	cbz	r0, df1c <le_start_encryption+0x1a>
    df1a:	200c      	movs	r0, #12
    df1c:	f7ff fa2e 	bl	d37c <cmd_status>
    df20:	6020      	str	r0, [r4, #0]
    df22:	bd10      	pop	{r4, pc}

0000df24 <le_ltk_req_reply>:
{
    df24:	b570      	push	{r4, r5, r6, lr}
    df26:	460e      	mov	r6, r1
	handle = sys_le16_to_cpu(cmd->handle);
    df28:	6882      	ldr	r2, [r0, #8]
    df2a:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    df2e:	2100      	movs	r1, #0
    df30:	b2a0      	uxth	r0, r4
    df32:	f00a fb34 	bl	1859e <ll_start_enc_req_send>
    df36:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    df38:	2103      	movs	r1, #3
    df3a:	4630      	mov	r0, r6
    df3c:	f7ff fa46 	bl	d3cc <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    df40:	b125      	cbz	r5, df4c <le_ltk_req_reply+0x28>
    df42:	230c      	movs	r3, #12
    df44:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    df46:	f8a0 4001 	strh.w	r4, [r0, #1]
    df4a:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    df4c:	2300      	movs	r3, #0
    df4e:	e7f9      	b.n	df44 <le_ltk_req_reply+0x20>

0000df50 <le_ltk_req_neg_reply>:
{
    df50:	b570      	push	{r4, r5, r6, lr}
    df52:	460e      	mov	r6, r1
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
    df54:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    df56:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    df58:	2200      	movs	r2, #0
    df5a:	2106      	movs	r1, #6
    df5c:	b2a0      	uxth	r0, r4
    df5e:	f00a fb1e 	bl	1859e <ll_start_enc_req_send>
    df62:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    df64:	2103      	movs	r1, #3
    df66:	4630      	mov	r0, r6
    df68:	f7ff fa30 	bl	d3cc <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    df6c:	b125      	cbz	r5, df78 <le_ltk_req_neg_reply+0x28>
    df6e:	230c      	movs	r3, #12
    df70:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_le16_to_cpu(handle);
    df72:	f8a0 4001 	strh.w	r4, [r0, #1]
    df76:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    df78:	2300      	movs	r3, #0
    df7a:	e7f9      	b.n	df70 <le_ltk_req_neg_reply+0x20>

0000df7c <le_read_chan_map>:
{
    df7c:	b570      	push	{r4, r5, r6, lr}
    df7e:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_chan_map *cmd = (void *)buf->data;
    df80:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    df82:	8815      	ldrh	r5, [r2, #0]
    df84:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    df86:	2108      	movs	r1, #8
    df88:	4618      	mov	r0, r3
    df8a:	f7ff fa1f 	bl	d3cc <cmd_complete>
    df8e:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    df90:	1cc1      	adds	r1, r0, #3
    df92:	4630      	mov	r0, r6
    df94:	f00a faee 	bl	18574 <ll_chm_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    df98:	b120      	cbz	r0, dfa4 <le_read_chan_map+0x28>
    df9a:	2302      	movs	r3, #2
    df9c:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    df9e:	f8a4 5001 	strh.w	r5, [r4, #1]
    dfa2:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    dfa4:	2300      	movs	r3, #0
    dfa6:	e7f9      	b.n	df9c <le_read_chan_map+0x20>

0000dfa8 <le_read_remote_features>:
{
    dfa8:	b510      	push	{r4, lr}
    dfaa:	460c      	mov	r4, r1
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
    dfac:	6883      	ldr	r3, [r0, #8]
	status = ll_feature_req_send(handle);
    dfae:	8818      	ldrh	r0, [r3, #0]
    dfb0:	f00a fb3d 	bl	1862e <ll_feature_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    dfb4:	b100      	cbz	r0, dfb8 <le_read_remote_features+0x10>
    dfb6:	200c      	movs	r0, #12
    dfb8:	f7ff f9e0 	bl	d37c <cmd_status>
    dfbc:	6020      	str	r0, [r4, #0]
    dfbe:	bd10      	pop	{r4, pc}

0000dfc0 <le_conn_param_req_neg_reply>:
{
    dfc0:	b570      	push	{r4, r5, r6, lr}
    dfc2:	b082      	sub	sp, #8
    dfc4:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    dfc6:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    dfc8:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    dfca:	789a      	ldrb	r2, [r3, #2]
    dfcc:	2300      	movs	r3, #0
    dfce:	9301      	str	r3, [sp, #4]
    dfd0:	9300      	str	r3, [sp, #0]
    dfd2:	2102      	movs	r1, #2
    dfd4:	b2a0      	uxth	r0, r4
    dfd6:	f00a f9ff 	bl	183d8 <ll_conn_update>
    dfda:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    dfdc:	2103      	movs	r1, #3
    dfde:	4630      	mov	r0, r6
    dfe0:	f7ff f9f4 	bl	d3cc <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dfe4:	b12d      	cbz	r5, dff2 <le_conn_param_req_neg_reply+0x32>
    dfe6:	230c      	movs	r3, #12
    dfe8:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    dfea:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    dfee:	b002      	add	sp, #8
    dff0:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dff2:	2300      	movs	r3, #0
    dff4:	e7f8      	b.n	dfe8 <le_conn_param_req_neg_reply+0x28>

0000dff6 <le_set_data_len>:
{
    dff6:	b570      	push	{r4, r5, r6, lr}
    dff8:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    dffa:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    dffc:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    dffe:	889a      	ldrh	r2, [r3, #4]
    e000:	8859      	ldrh	r1, [r3, #2]
    e002:	b2a0      	uxth	r0, r4
    e004:	f00a fb97 	bl	18736 <ll_length_req_send>
    e008:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    e00a:	2103      	movs	r1, #3
    e00c:	4630      	mov	r0, r6
    e00e:	f7ff f9dd 	bl	d3cc <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e012:	b125      	cbz	r5, e01e <le_set_data_len+0x28>
    e014:	230c      	movs	r3, #12
    e016:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    e018:	f8a0 4001 	strh.w	r4, [r0, #1]
    e01c:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e01e:	2300      	movs	r3, #0
    e020:	e7f9      	b.n	e016 <le_set_data_len+0x20>

0000e022 <le_read_default_data_len>:
{
    e022:	b510      	push	{r4, lr}
    e024:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e026:	2105      	movs	r1, #5
    e028:	f7ff f9d0 	bl	d3cc <cmd_complete>
    e02c:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    e02e:	1cc1      	adds	r1, r0, #3
    e030:	3001      	adds	r0, #1
    e032:	f00a fba7 	bl	18784 <ll_length_default_get>
	rp->status = 0x00;
    e036:	2300      	movs	r3, #0
    e038:	7023      	strb	r3, [r4, #0]
    e03a:	bd10      	pop	{r4, pc}

0000e03c <le_write_default_data_len>:
{
    e03c:	b538      	push	{r3, r4, r5, lr}
    e03e:	460d      	mov	r5, r1
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    e040:	6883      	ldr	r3, [r0, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    e042:	8859      	ldrh	r1, [r3, #2]
    e044:	8818      	ldrh	r0, [r3, #0]
    e046:	f00a fba7 	bl	18798 <ll_length_default_set>
    e04a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e04c:	2101      	movs	r1, #1
    e04e:	4628      	mov	r0, r5
    e050:	f7ff f9bc 	bl	d3cc <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    e054:	b114      	cbz	r4, e05c <le_write_default_data_len+0x20>
    e056:	231e      	movs	r3, #30
    e058:	7003      	strb	r3, [r0, #0]
    e05a:	bd38      	pop	{r3, r4, r5, pc}
    e05c:	2300      	movs	r3, #0
    e05e:	e7fb      	b.n	e058 <le_write_default_data_len+0x1c>

0000e060 <le_read_max_data_len>:
{
    e060:	b510      	push	{r4, lr}
    e062:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e064:	2109      	movs	r1, #9
    e066:	f7ff f9b1 	bl	d3cc <cmd_complete>
    e06a:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    e06c:	1dc3      	adds	r3, r0, #7
    e06e:	1d42      	adds	r2, r0, #5
    e070:	1cc1      	adds	r1, r0, #3
    e072:	3001      	adds	r0, #1
    e074:	f00a fb9a 	bl	187ac <ll_length_max_get>
	rp->status = 0x00;
    e078:	2300      	movs	r3, #0
    e07a:	7023      	strb	r3, [r4, #0]
    e07c:	bd10      	pop	{r4, pc}
	...

0000e080 <le_phy_upd_complete>:
{
    e080:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e082:	4b1a      	ldr	r3, [pc, #104]	; (e0ec <le_phy_upd_complete+0x6c>)
    e084:	e9d3 4500 	ldrd	r4, r5, [r3]
    e088:	2400      	movs	r4, #0
    e08a:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    e08e:	ea54 0305 	orrs.w	r3, r4, r5
    e092:	d008      	beq.n	e0a6 <le_phy_upd_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    e094:	4b16      	ldr	r3, [pc, #88]	; (e0f0 <le_phy_upd_complete+0x70>)
    e096:	e9d3 4500 	ldrd	r4, r5, [r3]
    e09a:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    e09e:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e0a0:	ea54 0305 	orrs.w	r3, r4, r5
    e0a4:	d100      	bne.n	e0a8 <le_phy_upd_complete+0x28>
    e0a6:	bd38      	pop	{r3, r4, r5, pc}
    e0a8:	4613      	mov	r3, r2
    e0aa:	460c      	mov	r4, r1
    e0ac:	4605      	mov	r5, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    e0ae:	2205      	movs	r2, #5
    e0b0:	210c      	movs	r1, #12
    e0b2:	4618      	mov	r0, r3
    e0b4:	f7ff fa24 	bl	d500 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    e0b8:	78eb      	ldrb	r3, [r5, #3]
    e0ba:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    e0bc:	f8a0 4001 	strh.w	r4, [r0, #1]
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    e0c0:	792a      	ldrb	r2, [r5, #4]
	return __builtin_ffs(op);
    e0c2:	fa92 f3a2 	rbit	r3, r2
    e0c6:	fab3 f383 	clz	r3, r3
    e0ca:	b90a      	cbnz	r2, e0d0 <le_phy_upd_complete+0x50>
    e0cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e0d0:	3301      	adds	r3, #1
    e0d2:	70c3      	strb	r3, [r0, #3]
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    e0d4:	796a      	ldrb	r2, [r5, #5]
    e0d6:	fa92 f3a2 	rbit	r3, r2
    e0da:	fab3 f383 	clz	r3, r3
    e0de:	b90a      	cbnz	r2, e0e4 <le_phy_upd_complete+0x64>
    e0e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e0e4:	3301      	adds	r3, #1
    e0e6:	7103      	strb	r3, [r0, #4]
    e0e8:	e7dd      	b.n	e0a6 <le_phy_upd_complete+0x26>
    e0ea:	bf00      	nop
    e0ec:	2000bc70 	.word	0x2000bc70
    e0f0:	2000bc78 	.word	0x2000bc78

0000e0f4 <le_read_phy>:
{
    e0f4:	b570      	push	{r4, r5, r6, lr}
    e0f6:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
    e0f8:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    e0fa:	8815      	ldrh	r5, [r2, #0]
    e0fc:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    e0fe:	2105      	movs	r1, #5
    e100:	4618      	mov	r0, r3
    e102:	f7ff f963 	bl	d3cc <cmd_complete>
    e106:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    e108:	1d02      	adds	r2, r0, #4
    e10a:	1cc1      	adds	r1, r0, #3
    e10c:	4630      	mov	r0, r6
    e10e:	f00a fb57 	bl	187c0 <ll_phy_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e112:	b1c0      	cbz	r0, e146 <le_read_phy+0x52>
    e114:	230c      	movs	r3, #12
    e116:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    e118:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    e11c:	78e2      	ldrb	r2, [r4, #3]
    e11e:	fa92 f3a2 	rbit	r3, r2
    e122:	fab3 f383 	clz	r3, r3
    e126:	b90a      	cbnz	r2, e12c <le_read_phy+0x38>
    e128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e12c:	3301      	adds	r3, #1
    e12e:	70e3      	strb	r3, [r4, #3]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    e130:	7922      	ldrb	r2, [r4, #4]
    e132:	fa92 f3a2 	rbit	r3, r2
    e136:	fab3 f383 	clz	r3, r3
    e13a:	b90a      	cbnz	r2, e140 <le_read_phy+0x4c>
    e13c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e140:	3301      	adds	r3, #1
    e142:	7123      	strb	r3, [r4, #4]
    e144:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e146:	2300      	movs	r3, #0
    e148:	e7e5      	b.n	e116 <le_read_phy+0x22>

0000e14a <le_set_default_phy>:
{
    e14a:	b538      	push	{r3, r4, r5, lr}
    e14c:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    e14e:	6883      	ldr	r3, [r0, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    e150:	781a      	ldrb	r2, [r3, #0]
    e152:	f012 0f01 	tst.w	r2, #1
    e156:	d001      	beq.n	e15c <le_set_default_phy+0x12>
		cmd->tx_phys = 0x07;
    e158:	2107      	movs	r1, #7
    e15a:	7059      	strb	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    e15c:	f012 0f02 	tst.w	r2, #2
    e160:	d001      	beq.n	e166 <le_set_default_phy+0x1c>
		cmd->rx_phys = 0x07;
    e162:	2207      	movs	r2, #7
    e164:	709a      	strb	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    e166:	7899      	ldrb	r1, [r3, #2]
    e168:	7858      	ldrb	r0, [r3, #1]
    e16a:	f00a fb3d 	bl	187e8 <ll_phy_default_set>
    e16e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e170:	2101      	movs	r1, #1
    e172:	4628      	mov	r0, r5
    e174:	f7ff f92a 	bl	d3cc <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    e178:	b114      	cbz	r4, e180 <le_set_default_phy+0x36>
    e17a:	231e      	movs	r3, #30
    e17c:	7003      	strb	r3, [r0, #0]
    e17e:	bd38      	pop	{r3, r4, r5, pc}
    e180:	2300      	movs	r3, #0
    e182:	e7fb      	b.n	e17c <le_set_default_phy+0x32>

0000e184 <le_set_phy>:
{
    e184:	b538      	push	{r3, r4, r5, lr}
    e186:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    e188:	6881      	ldr	r1, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    e18a:	8808      	ldrh	r0, [r1, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    e18c:	f8b1 2005 	ldrh.w	r2, [r1, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    e190:	788b      	ldrb	r3, [r1, #2]
    e192:	f013 0f01 	tst.w	r3, #1
    e196:	d001      	beq.n	e19c <le_set_phy+0x18>
		cmd->tx_phys = 0x07;
    e198:	2507      	movs	r5, #7
    e19a:	70cd      	strb	r5, [r1, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    e19c:	f013 0f02 	tst.w	r3, #2
    e1a0:	d001      	beq.n	e1a6 <le_set_phy+0x22>
		cmd->rx_phys = 0x07;
    e1a2:	2307      	movs	r3, #7
    e1a4:	710b      	strb	r3, [r1, #4]
	if (phy_opts & 0x03) {
    e1a6:	f012 0f03 	tst.w	r2, #3
    e1aa:	d00c      	beq.n	e1c6 <le_set_phy+0x42>
		phy_opts -= 1;
    e1ac:	3a01      	subs	r2, #1
		phy_opts &= 1;
    e1ae:	f002 0201 	and.w	r2, r2, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    e1b2:	790b      	ldrb	r3, [r1, #4]
    e1b4:	78c9      	ldrb	r1, [r1, #3]
    e1b6:	f00a fb21 	bl	187fc <ll_phy_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    e1ba:	b100      	cbz	r0, e1be <le_set_phy+0x3a>
    e1bc:	200c      	movs	r0, #12
    e1be:	f7ff f8dd 	bl	d37c <cmd_status>
    e1c2:	6020      	str	r0, [r4, #0]
    e1c4:	bd38      	pop	{r3, r4, r5, pc}
		phy_opts = 0;
    e1c6:	2200      	movs	r2, #0
    e1c8:	e7f3      	b.n	e1b2 <le_set_phy+0x2e>

0000e1ca <le_add_dev_to_rl>:
{
    e1ca:	b538      	push	{r3, r4, r5, lr}
    e1cc:	460d      	mov	r5, r1
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
    e1ce:	6880      	ldr	r0, [r0, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    e1d0:	f100 0217 	add.w	r2, r0, #23
    e1d4:	1dc1      	adds	r1, r0, #7
    e1d6:	f00b fffb 	bl	1a1d0 <ll_rl_add>
    e1da:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e1dc:	2101      	movs	r1, #1
    e1de:	4628      	mov	r0, r5
    e1e0:	f7ff f8f4 	bl	d3cc <cmd_complete>
	ccst->status = status;
    e1e4:	7004      	strb	r4, [r0, #0]
    e1e6:	bd38      	pop	{r3, r4, r5, pc}

0000e1e8 <le_rem_dev_from_rl>:
{
    e1e8:	b538      	push	{r3, r4, r5, lr}
    e1ea:	460d      	mov	r5, r1
	status = ll_rl_remove(&cmd->peer_id_addr);
    e1ec:	6880      	ldr	r0, [r0, #8]
    e1ee:	f00c f8ad 	bl	1a34c <ll_rl_remove>
    e1f2:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e1f4:	2101      	movs	r1, #1
    e1f6:	4628      	mov	r0, r5
    e1f8:	f7ff f8e8 	bl	d3cc <cmd_complete>
	ccst->status = status;
    e1fc:	7004      	strb	r4, [r0, #0]
    e1fe:	bd38      	pop	{r3, r4, r5, pc}

0000e200 <le_clear_rl>:
{
    e200:	b510      	push	{r4, lr}
    e202:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    e204:	2101      	movs	r1, #1
    e206:	f7ff f8e1 	bl	d3cc <cmd_complete>
    e20a:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    e20c:	f00b ffd4 	bl	1a1b8 <ll_rl_clear>
    e210:	7020      	strb	r0, [r4, #0]
    e212:	bd10      	pop	{r4, pc}

0000e214 <le_read_rl_size>:
{
    e214:	b510      	push	{r4, lr}
    e216:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e218:	2102      	movs	r1, #2
    e21a:	f7ff f8d7 	bl	d3cc <cmd_complete>
    e21e:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    e220:	f00b ffc8 	bl	1a1b4 <ll_rl_size_get>
    e224:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    e226:	2300      	movs	r3, #0
    e228:	7023      	strb	r3, [r4, #0]
    e22a:	bd10      	pop	{r4, pc}

0000e22c <le_read_peer_rpa>:
{
    e22c:	b510      	push	{r4, lr}
    e22e:	b082      	sub	sp, #8
    e230:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
    e232:	2207      	movs	r2, #7
    e234:	6881      	ldr	r1, [r0, #8]
    e236:	4668      	mov	r0, sp
    e238:	f7f2 f842 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    e23c:	2107      	movs	r1, #7
    e23e:	4620      	mov	r0, r4
    e240:	f7ff f8c4 	bl	d3cc <cmd_complete>
    e244:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    e246:	1c41      	adds	r1, r0, #1
    e248:	4668      	mov	r0, sp
    e24a:	f00c f923 	bl	1a494 <ll_rl_crpa_get>
    e24e:	7020      	strb	r0, [r4, #0]
}
    e250:	b002      	add	sp, #8
    e252:	bd10      	pop	{r4, pc}

0000e254 <le_read_local_rpa>:
{
    e254:	b510      	push	{r4, lr}
    e256:	b082      	sub	sp, #8
    e258:	460c      	mov	r4, r1
    e25a:	2207      	movs	r2, #7
    e25c:	6881      	ldr	r1, [r0, #8]
    e25e:	4668      	mov	r0, sp
    e260:	f7f2 f82e 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    e264:	2107      	movs	r1, #7
    e266:	4620      	mov	r0, r4
    e268:	f7ff f8b0 	bl	d3cc <cmd_complete>
    e26c:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    e26e:	1c41      	adds	r1, r0, #1
    e270:	4668      	mov	r0, sp
    e272:	f00c f937 	bl	1a4e4 <ll_rl_lrpa_get>
    e276:	7020      	strb	r0, [r4, #0]
}
    e278:	b002      	add	sp, #8
    e27a:	bd10      	pop	{r4, pc}

0000e27c <le_set_addr_res_enable>:
{
    e27c:	b538      	push	{r3, r4, r5, lr}
    e27e:	460b      	mov	r3, r1
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
    e280:	6882      	ldr	r2, [r0, #8]
	u8_t enable = cmd->enable;
    e282:	7815      	ldrb	r5, [r2, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    e284:	2101      	movs	r1, #1
    e286:	4618      	mov	r0, r3
    e288:	f7ff f8a0 	bl	d3cc <cmd_complete>
    e28c:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    e28e:	4628      	mov	r0, r5
    e290:	f00c f942 	bl	1a518 <ll_rl_enable>
    e294:	7020      	strb	r0, [r4, #0]
    e296:	bd38      	pop	{r3, r4, r5, pc}

0000e298 <le_set_rpa_timeout>:
{
    e298:	b510      	push	{r4, lr}
    e29a:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
    e29c:	6883      	ldr	r3, [r0, #8]
	ll_rl_timeout_set(timeout);
    e29e:	8818      	ldrh	r0, [r3, #0]
    e2a0:	f00c f952 	bl	1a548 <ll_rl_timeout_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    e2a4:	2101      	movs	r1, #1
    e2a6:	4620      	mov	r0, r4
    e2a8:	f7ff f890 	bl	d3cc <cmd_complete>
	ccst->status = 0x00;
    e2ac:	2300      	movs	r3, #0
    e2ae:	7003      	strb	r3, [r0, #0]
    e2b0:	bd10      	pop	{r4, pc}

0000e2b2 <le_set_privacy_mode>:
{
    e2b2:	b538      	push	{r3, r4, r5, lr}
    e2b4:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
    e2b6:	6880      	ldr	r0, [r0, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    e2b8:	79c1      	ldrb	r1, [r0, #7]
    e2ba:	f00c f94f 	bl	1a55c <ll_priv_mode_set>
    e2be:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e2c0:	2101      	movs	r1, #1
    e2c2:	4628      	mov	r0, r5
    e2c4:	f7ff f882 	bl	d3cc <cmd_complete>
	ccst->status = status;
    e2c8:	7004      	strb	r4, [r0, #0]
    e2ca:	bd38      	pop	{r3, r4, r5, pc}

0000e2cc <le_read_tx_power>:
{
    e2cc:	b508      	push	{r3, lr}
    e2ce:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e2d0:	2103      	movs	r1, #3
    e2d2:	f7ff f87b 	bl	d3cc <cmd_complete>
	rp->status = 0x00;
    e2d6:	4601      	mov	r1, r0
    e2d8:	2300      	movs	r3, #0
    e2da:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_power_get(&rp->min_tx_power, &rp->max_tx_power);
    e2de:	3001      	adds	r0, #1
    e2e0:	f00a f9f1 	bl	186c6 <ll_tx_power_get>
    e2e4:	bd08      	pop	{r3, pc}

0000e2e6 <controller_cmd_handle>:
{
    e2e6:	b508      	push	{r3, lr}
    e2e8:	460b      	mov	r3, r1
	switch (ocf) {
    e2ea:	3801      	subs	r0, #1
    e2ec:	284d      	cmp	r0, #77	; 0x4d
    e2ee:	f200 8164 	bhi.w	e5ba <controller_cmd_handle+0x2d4>
    e2f2:	e8df f010 	tbh	[pc, r0, lsl #1]
    e2f6:	004e      	.short	0x004e
    e2f8:	005a0054 	.word	0x005a0054
    e2fc:	00600162 	.word	0x00600162
    e300:	00960090 	.word	0x00960090
    e304:	00a2009c 	.word	0x00a2009c
    e308:	00ae00a8 	.word	0x00ae00a8
    e30c:	00ba00b4 	.word	0x00ba00b4
    e310:	006600c0 	.word	0x006600c0
    e314:	0072006c 	.word	0x0072006c
    e318:	00ea0078 	.word	0x00ea0078
    e31c:	00de00c6 	.word	0x00de00c6
    e320:	007e00e4 	.word	0x007e00e4
    e324:	00cc0084 	.word	0x00cc0084
    e328:	00d800d2 	.word	0x00d800d2
    e32c:	0162008a 	.word	0x0162008a
    e330:	01620162 	.word	0x01620162
    e334:	00f600f0 	.word	0x00f600f0
    e338:	010200fc 	.word	0x010200fc
    e33c:	01620108 	.word	0x01620108
    e340:	01260162 	.word	0x01260162
    e344:	0132012c 	.word	0x0132012c
    e348:	013e0138 	.word	0x013e0138
    e34c:	014a0144 	.word	0x014a0144
    e350:	010e0150 	.word	0x010e0150
    e354:	011a0114 	.word	0x011a0114
    e358:	01620120 	.word	0x01620120
    e35c:	01620162 	.word	0x01620162
    e360:	01620162 	.word	0x01620162
    e364:	01620162 	.word	0x01620162
    e368:	01620162 	.word	0x01620162
    e36c:	01620162 	.word	0x01620162
    e370:	01620162 	.word	0x01620162
    e374:	01620162 	.word	0x01620162
    e378:	01620162 	.word	0x01620162
    e37c:	01620162 	.word	0x01620162
    e380:	01620162 	.word	0x01620162
    e384:	01620162 	.word	0x01620162
    e388:	015c0162 	.word	0x015c0162
    e38c:	01620162 	.word	0x01620162
    e390:	0156      	.short	0x0156
		le_set_event_mask(cmd, evt);
    e392:	4611      	mov	r1, r2
    e394:	4618      	mov	r0, r3
    e396:	f7f6 fe3f 	bl	5018 <le_set_event_mask>
	return 0;
    e39a:	2000      	movs	r0, #0
		break;
    e39c:	bd08      	pop	{r3, pc}
		le_read_buffer_size(cmd, evt);
    e39e:	4611      	mov	r1, r2
    e3a0:	4618      	mov	r0, r3
    e3a2:	f7ff f86c 	bl	d47e <le_read_buffer_size>
	return 0;
    e3a6:	2000      	movs	r0, #0
		break;
    e3a8:	bd08      	pop	{r3, pc}
		le_read_local_features(cmd, evt);
    e3aa:	4611      	mov	r1, r2
    e3ac:	4618      	mov	r0, r3
    e3ae:	f7ff fabb 	bl	d928 <le_read_local_features>
	return 0;
    e3b2:	2000      	movs	r0, #0
		break;
    e3b4:	bd08      	pop	{r3, pc}
		le_set_random_address(cmd, evt);
    e3b6:	4611      	mov	r1, r2
    e3b8:	4618      	mov	r0, r3
    e3ba:	f7ff fc03 	bl	dbc4 <le_set_random_address>
	return 0;
    e3be:	2000      	movs	r0, #0
		break;
    e3c0:	bd08      	pop	{r3, pc}
		le_read_wl_size(cmd, evt);
    e3c2:	4611      	mov	r1, r2
    e3c4:	4618      	mov	r0, r3
    e3c6:	f7ff fc17 	bl	dbf8 <le_read_wl_size>
	return 0;
    e3ca:	2000      	movs	r0, #0
		break;
    e3cc:	bd08      	pop	{r3, pc}
		le_clear_wl(cmd, evt);
    e3ce:	4611      	mov	r1, r2
    e3d0:	4618      	mov	r0, r3
    e3d2:	f7ff fc1d 	bl	dc10 <le_clear_wl>
	return 0;
    e3d6:	2000      	movs	r0, #0
		break;
    e3d8:	bd08      	pop	{r3, pc}
		le_add_dev_to_wl(cmd, evt);
    e3da:	4611      	mov	r1, r2
    e3dc:	4618      	mov	r0, r3
    e3de:	f7ff fc21 	bl	dc24 <le_add_dev_to_wl>
	return 0;
    e3e2:	2000      	movs	r0, #0
		break;
    e3e4:	bd08      	pop	{r3, pc}
		le_rem_dev_from_wl(cmd, evt);
    e3e6:	4611      	mov	r1, r2
    e3e8:	4618      	mov	r0, r3
    e3ea:	f7ff fc27 	bl	dc3c <le_rem_dev_from_wl>
	return 0;
    e3ee:	2000      	movs	r0, #0
		break;
    e3f0:	bd08      	pop	{r3, pc}
		le_encrypt(cmd, evt);
    e3f2:	4611      	mov	r1, r2
    e3f4:	4618      	mov	r0, r3
    e3f6:	f7ff fc2d 	bl	dc54 <le_encrypt>
	return 0;
    e3fa:	2000      	movs	r0, #0
		break;
    e3fc:	bd08      	pop	{r3, pc}
		le_rand(cmd, evt);
    e3fe:	4611      	mov	r1, r2
    e400:	4618      	mov	r0, r3
    e402:	f7ff fca4 	bl	dd4e <le_rand>
	return 0;
    e406:	2000      	movs	r0, #0
		break;
    e408:	bd08      	pop	{r3, pc}
		le_read_supp_states(cmd, evt);
    e40a:	4611      	mov	r1, r2
    e40c:	4618      	mov	r0, r3
    e40e:	f7ff f843 	bl	d498 <le_read_supp_states>
	return 0;
    e412:	2000      	movs	r0, #0
		break;
    e414:	bd08      	pop	{r3, pc}
		le_set_adv_param(cmd, evt);
    e416:	4611      	mov	r1, r2
    e418:	4618      	mov	r0, r3
    e41a:	f7ff fca4 	bl	dd66 <le_set_adv_param>
	return 0;
    e41e:	2000      	movs	r0, #0
		break;
    e420:	bd08      	pop	{r3, pc}
		le_read_adv_chan_tx_power(cmd, evt);
    e422:	4611      	mov	r1, r2
    e424:	4618      	mov	r0, r3
    e426:	f7ff f84a 	bl	d4be <le_read_adv_chan_tx_power>
	return 0;
    e42a:	2000      	movs	r0, #0
		break;
    e42c:	bd08      	pop	{r3, pc}
		le_set_adv_data(cmd, evt);
    e42e:	4611      	mov	r1, r2
    e430:	4618      	mov	r0, r3
    e432:	f7ff fcbb 	bl	ddac <le_set_adv_data>
	return 0;
    e436:	2000      	movs	r0, #0
		break;
    e438:	bd08      	pop	{r3, pc}
		le_set_scan_rsp_data(cmd, evt);
    e43a:	4611      	mov	r1, r2
    e43c:	4618      	mov	r0, r3
    e43e:	f7ff fcc3 	bl	ddc8 <le_set_scan_rsp_data>
	return 0;
    e442:	2000      	movs	r0, #0
		break;
    e444:	bd08      	pop	{r3, pc}
		le_set_adv_enable(cmd, evt);
    e446:	4611      	mov	r1, r2
    e448:	4618      	mov	r0, r3
    e44a:	f7ff fccb 	bl	dde4 <le_set_adv_enable>
	return 0;
    e44e:	2000      	movs	r0, #0
		break;
    e450:	bd08      	pop	{r3, pc}
		le_set_scan_param(cmd, evt);
    e452:	4611      	mov	r1, r2
    e454:	4618      	mov	r0, r3
    e456:	f7ff fcd6 	bl	de06 <le_set_scan_param>
	return 0;
    e45a:	2000      	movs	r0, #0
		break;
    e45c:	bd08      	pop	{r3, pc}
		le_set_scan_enable(cmd, evt);
    e45e:	4611      	mov	r1, r2
    e460:	4618      	mov	r0, r3
    e462:	f7ff fceb 	bl	de3c <le_set_scan_enable>
	return 0;
    e466:	2000      	movs	r0, #0
		break;
    e468:	bd08      	pop	{r3, pc}
		le_create_connection(cmd, evt);
    e46a:	4611      	mov	r1, r2
    e46c:	4618      	mov	r0, r3
    e46e:	f7ff fd09 	bl	de84 <le_create_connection>
	return 0;
    e472:	2000      	movs	r0, #0
		break;
    e474:	bd08      	pop	{r3, pc}
		le_create_conn_cancel(cmd, evt);
    e476:	4611      	mov	r1, r2
    e478:	4618      	mov	r0, r3
    e47a:	f7ff fd23 	bl	dec4 <le_create_conn_cancel>
	return 0;
    e47e:	2000      	movs	r0, #0
		break;
    e480:	bd08      	pop	{r3, pc}
		le_set_host_chan_classif(cmd, evt);
    e482:	4611      	mov	r1, r2
    e484:	4618      	mov	r0, r3
    e486:	f7ff fd2c 	bl	dee2 <le_set_host_chan_classif>
	return 0;
    e48a:	2000      	movs	r0, #0
		break;
    e48c:	bd08      	pop	{r3, pc}
		le_start_encryption(cmd, evt);
    e48e:	4611      	mov	r1, r2
    e490:	4618      	mov	r0, r3
    e492:	f7ff fd36 	bl	df02 <le_start_encryption>
	return 0;
    e496:	2000      	movs	r0, #0
		break;
    e498:	bd08      	pop	{r3, pc}
		le_ltk_req_reply(cmd, evt);
    e49a:	4611      	mov	r1, r2
    e49c:	4618      	mov	r0, r3
    e49e:	f7ff fd41 	bl	df24 <le_ltk_req_reply>
	return 0;
    e4a2:	2000      	movs	r0, #0
		break;
    e4a4:	bd08      	pop	{r3, pc}
		le_ltk_req_neg_reply(cmd, evt);
    e4a6:	4611      	mov	r1, r2
    e4a8:	4618      	mov	r0, r3
    e4aa:	f7ff fd51 	bl	df50 <le_ltk_req_neg_reply>
	return 0;
    e4ae:	2000      	movs	r0, #0
		break;
    e4b0:	bd08      	pop	{r3, pc}
		le_read_chan_map(cmd, evt);
    e4b2:	4611      	mov	r1, r2
    e4b4:	4618      	mov	r0, r3
    e4b6:	f7ff fd61 	bl	df7c <le_read_chan_map>
	return 0;
    e4ba:	2000      	movs	r0, #0
		break;
    e4bc:	bd08      	pop	{r3, pc}
		le_read_remote_features(cmd, evt);
    e4be:	4611      	mov	r1, r2
    e4c0:	4618      	mov	r0, r3
    e4c2:	f7ff fd71 	bl	dfa8 <le_read_remote_features>
	return 0;
    e4c6:	2000      	movs	r0, #0
		break;
    e4c8:	bd08      	pop	{r3, pc}
		le_conn_update(cmd, evt);
    e4ca:	4611      	mov	r1, r2
    e4cc:	4618      	mov	r0, r3
    e4ce:	f7f9 f9c1 	bl	7854 <le_conn_update>
	return 0;
    e4d2:	2000      	movs	r0, #0
		break;
    e4d4:	bd08      	pop	{r3, pc}
		le_conn_param_req_reply(cmd, evt);
    e4d6:	4611      	mov	r1, r2
    e4d8:	4618      	mov	r0, r3
    e4da:	f7f7 fe47 	bl	616c <le_conn_param_req_reply>
	return 0;
    e4de:	2000      	movs	r0, #0
		break;
    e4e0:	bd08      	pop	{r3, pc}
		le_conn_param_req_neg_reply(cmd, evt);
    e4e2:	4611      	mov	r1, r2
    e4e4:	4618      	mov	r0, r3
    e4e6:	f7ff fd6b 	bl	dfc0 <le_conn_param_req_neg_reply>
	return 0;
    e4ea:	2000      	movs	r0, #0
		break;
    e4ec:	bd08      	pop	{r3, pc}
		le_set_data_len(cmd, evt);
    e4ee:	4611      	mov	r1, r2
    e4f0:	4618      	mov	r0, r3
    e4f2:	f7ff fd80 	bl	dff6 <le_set_data_len>
	return 0;
    e4f6:	2000      	movs	r0, #0
		break;
    e4f8:	bd08      	pop	{r3, pc}
		le_read_default_data_len(cmd, evt);
    e4fa:	4611      	mov	r1, r2
    e4fc:	4618      	mov	r0, r3
    e4fe:	f7ff fd90 	bl	e022 <le_read_default_data_len>
	return 0;
    e502:	2000      	movs	r0, #0
		break;
    e504:	bd08      	pop	{r3, pc}
		le_write_default_data_len(cmd, evt);
    e506:	4611      	mov	r1, r2
    e508:	4618      	mov	r0, r3
    e50a:	f7ff fd97 	bl	e03c <le_write_default_data_len>
	return 0;
    e50e:	2000      	movs	r0, #0
		break;
    e510:	bd08      	pop	{r3, pc}
		le_read_max_data_len(cmd, evt);
    e512:	4611      	mov	r1, r2
    e514:	4618      	mov	r0, r3
    e516:	f7ff fda3 	bl	e060 <le_read_max_data_len>
	return 0;
    e51a:	2000      	movs	r0, #0
		break;
    e51c:	bd08      	pop	{r3, pc}
		le_read_phy(cmd, evt);
    e51e:	4611      	mov	r1, r2
    e520:	4618      	mov	r0, r3
    e522:	f7ff fde7 	bl	e0f4 <le_read_phy>
	return 0;
    e526:	2000      	movs	r0, #0
		break;
    e528:	bd08      	pop	{r3, pc}
		le_set_default_phy(cmd, evt);
    e52a:	4611      	mov	r1, r2
    e52c:	4618      	mov	r0, r3
    e52e:	f7ff fe0c 	bl	e14a <le_set_default_phy>
	return 0;
    e532:	2000      	movs	r0, #0
		break;
    e534:	bd08      	pop	{r3, pc}
		le_set_phy(cmd, evt);
    e536:	4611      	mov	r1, r2
    e538:	4618      	mov	r0, r3
    e53a:	f7ff fe23 	bl	e184 <le_set_phy>
	return 0;
    e53e:	2000      	movs	r0, #0
		break;
    e540:	bd08      	pop	{r3, pc}
		le_add_dev_to_rl(cmd, evt);
    e542:	4611      	mov	r1, r2
    e544:	4618      	mov	r0, r3
    e546:	f7ff fe40 	bl	e1ca <le_add_dev_to_rl>
	return 0;
    e54a:	2000      	movs	r0, #0
		break;
    e54c:	bd08      	pop	{r3, pc}
		le_rem_dev_from_rl(cmd, evt);
    e54e:	4611      	mov	r1, r2
    e550:	4618      	mov	r0, r3
    e552:	f7ff fe49 	bl	e1e8 <le_rem_dev_from_rl>
	return 0;
    e556:	2000      	movs	r0, #0
		break;
    e558:	bd08      	pop	{r3, pc}
		le_clear_rl(cmd, evt);
    e55a:	4611      	mov	r1, r2
    e55c:	4618      	mov	r0, r3
    e55e:	f7ff fe4f 	bl	e200 <le_clear_rl>
	return 0;
    e562:	2000      	movs	r0, #0
		break;
    e564:	bd08      	pop	{r3, pc}
		le_read_rl_size(cmd, evt);
    e566:	4611      	mov	r1, r2
    e568:	4618      	mov	r0, r3
    e56a:	f7ff fe53 	bl	e214 <le_read_rl_size>
	return 0;
    e56e:	2000      	movs	r0, #0
		break;
    e570:	bd08      	pop	{r3, pc}
		le_read_peer_rpa(cmd, evt);
    e572:	4611      	mov	r1, r2
    e574:	4618      	mov	r0, r3
    e576:	f7ff fe59 	bl	e22c <le_read_peer_rpa>
	return 0;
    e57a:	2000      	movs	r0, #0
		break;
    e57c:	bd08      	pop	{r3, pc}
		le_read_local_rpa(cmd, evt);
    e57e:	4611      	mov	r1, r2
    e580:	4618      	mov	r0, r3
    e582:	f7ff fe67 	bl	e254 <le_read_local_rpa>
	return 0;
    e586:	2000      	movs	r0, #0
		break;
    e588:	bd08      	pop	{r3, pc}
		le_set_addr_res_enable(cmd, evt);
    e58a:	4611      	mov	r1, r2
    e58c:	4618      	mov	r0, r3
    e58e:	f7ff fe75 	bl	e27c <le_set_addr_res_enable>
	return 0;
    e592:	2000      	movs	r0, #0
		break;
    e594:	bd08      	pop	{r3, pc}
		le_set_rpa_timeout(cmd, evt);
    e596:	4611      	mov	r1, r2
    e598:	4618      	mov	r0, r3
    e59a:	f7ff fe7d 	bl	e298 <le_set_rpa_timeout>
	return 0;
    e59e:	2000      	movs	r0, #0
		break;
    e5a0:	bd08      	pop	{r3, pc}
		le_set_privacy_mode(cmd, evt);
    e5a2:	4611      	mov	r1, r2
    e5a4:	4618      	mov	r0, r3
    e5a6:	f7ff fe84 	bl	e2b2 <le_set_privacy_mode>
	return 0;
    e5aa:	2000      	movs	r0, #0
		break;
    e5ac:	bd08      	pop	{r3, pc}
		le_read_tx_power(cmd, evt);
    e5ae:	4611      	mov	r1, r2
    e5b0:	4618      	mov	r0, r3
    e5b2:	f7ff fe8b 	bl	e2cc <le_read_tx_power>
	return 0;
    e5b6:	2000      	movs	r0, #0
		break;
    e5b8:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e5ba:	f06f 0015 	mvn.w	r0, #21
}
    e5be:	bd08      	pop	{r3, pc}

0000e5c0 <data_buf_overflow>:
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    e5c0:	4b0e      	ldr	r3, [pc, #56]	; (e5fc <data_buf_overflow+0x3c>)
    e5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    e5c6:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    e5ca:	2300      	movs	r3, #0
    e5cc:	4313      	orrs	r3, r2
    e5ce:	d100      	bne.n	e5d2 <data_buf_overflow+0x12>
    e5d0:	4770      	bx	lr
{
    e5d2:	b510      	push	{r4, lr}
    e5d4:	4604      	mov	r4, r0
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e5d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e5da:	2001      	movs	r0, #1
    e5dc:	f7f8 fa1c 	bl	6a18 <bt_buf_get_rx>
    e5e0:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    e5e2:	2201      	movs	r2, #1
    e5e4:	211a      	movs	r1, #26
    e5e6:	f7fe febf 	bl	d368 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    e5ea:	6820      	ldr	r0, [r4, #0]
    e5ec:	2101      	movs	r1, #1
    e5ee:	3008      	adds	r0, #8
    e5f0:	f00c fbe0 	bl	1adb4 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    e5f4:	2301      	movs	r3, #1
    e5f6:	7003      	strb	r3, [r0, #0]
    e5f8:	bd10      	pop	{r4, pc}
    e5fa:	bf00      	nop
    e5fc:	2000bc70 	.word	0x2000bc70

0000e600 <encode_data_ctrl>:
{
    e600:	b510      	push	{r4, lr}
    e602:	460c      	mov	r4, r1
	u16_t handle = node_rx->hdr.handle;
    e604:	88c1      	ldrh	r1, [r0, #6]
	switch (pdu_data->payload.llctrl.opcode) {
    e606:	78e0      	ldrb	r0, [r4, #3]
    e608:	3803      	subs	r0, #3
    e60a:	2812      	cmp	r0, #18
    e60c:	d82e      	bhi.n	e66c <encode_data_ctrl+0x6c>
    e60e:	e8df f000 	tbb	[pc, r0]
    e612:	2d0a      	.short	0x2d0a
    e614:	2d290e2d 	.word	0x2d290e2d
    e618:	192d2d12 	.word	0x192d2d12
    e61c:	2d212d1d 	.word	0x2d212d1d
    e620:	252d2d2d 	.word	0x252d2d2d
    e624:	25          	.byte	0x25
    e625:	00          	.byte	0x00
		le_ltk_request(pdu_data, handle, buf);
    e626:	4620      	mov	r0, r4
    e628:	f7f7 feec 	bl	6404 <le_ltk_request>
		break;
    e62c:	bd10      	pop	{r4, pc}
		encrypt_change(0x00, handle, buf);
    e62e:	2000      	movs	r0, #0
    e630:	f7ff f826 	bl	d680 <encrypt_change>
		break;
    e634:	bd10      	pop	{r4, pc}
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    e636:	4613      	mov	r3, r2
    e638:	460a      	mov	r2, r1
    e63a:	4621      	mov	r1, r4
    e63c:	2000      	movs	r0, #0
    e63e:	f7f7 fceb 	bl	6018 <le_remote_feat_complete>
		break;
    e642:	bd10      	pop	{r4, pc}
		remote_version_info(pdu_data, handle, buf);
    e644:	4620      	mov	r0, r4
    e646:	f7fe fff5 	bl	d634 <remote_version_info>
		break;
    e64a:	bd10      	pop	{r4, pc}
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    e64c:	7920      	ldrb	r0, [r4, #4]
    e64e:	f7ff f817 	bl	d680 <encrypt_change>
		break;
    e652:	bd10      	pop	{r4, pc}
		le_conn_param_req(pdu_data, handle, buf);
    e654:	4620      	mov	r0, r4
    e656:	f7f7 fdd7 	bl	6208 <le_conn_param_req>
		break;
    e65a:	bd10      	pop	{r4, pc}
		le_data_len_change(pdu_data, handle, buf);
    e65c:	4620      	mov	r0, r4
    e65e:	f7f6 fa43 	bl	4ae8 <le_data_len_change>
		break;
    e662:	bd10      	pop	{r4, pc}
		le_unknown_rsp(pdu_data, handle, buf);
    e664:	4620      	mov	r0, r4
    e666:	f7ff fb66 	bl	dd36 <le_unknown_rsp>
		break;
    e66a:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    e66c:	4040      	eors	r0, r0
    e66e:	f380 8811 	msr	BASEPRI, r0
    e672:	f04f 0004 	mov.w	r0, #4
    e676:	df02      	svc	2

0000e678 <le_advertising_report>:
{
    e678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e67c:	b082      	sub	sp, #8
    e67e:	4605      	mov	r5, r0
    e680:	460e      	mov	r6, r1
    e682:	4691      	mov	r9, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    e684:	4b90      	ldr	r3, [pc, #576]	; (e8c8 <le_advertising_report+0x250>)
    e686:	e893 0003 	ldmia.w	r3, {r0, r1}
    e68a:	9000      	str	r0, [sp, #0]
    e68c:	f8ad 1004 	strh.w	r1, [sp, #4]
    e690:	0c09      	lsrs	r1, r1, #16
    e692:	f88d 1006 	strb.w	r1, [sp, #6]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    e696:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e698:	330b      	adds	r3, #11
    e69a:	f816 8003 	ldrb.w	r8, [r6, r3]
	if (adv->tx_addr) {
    e69e:	782b      	ldrb	r3, [r5, #0]
    e6a0:	f013 0f40 	tst.w	r3, #64	; 0x40
    e6a4:	d125      	bne.n	e6f2 <le_advertising_report+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    e6a6:	4b89      	ldr	r3, [pc, #548]	; (e8cc <le_advertising_report+0x254>)
    e6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    e6ac:	2200      	movs	r2, #0
    e6ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e6b2:	4313      	orrs	r3, r2
    e6b4:	f000 80b0 	beq.w	e818 <le_advertising_report+0x1a0>
		   offsetof(struct pdu_adv, payload) + adv->len + 2];
    e6b8:	786b      	ldrb	r3, [r5, #1]
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e6ba:	330c      	adds	r3, #12
    e6bc:	5cf7      	ldrb	r7, [r6, r3]
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    e6be:	b947      	cbnz	r7, e6d2 <le_advertising_report+0x5a>
    e6c0:	4b83      	ldr	r3, [pc, #524]	; (e8d0 <le_advertising_report+0x258>)
    e6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    e6c6:	f002 0202 	and.w	r2, r2, #2
    e6ca:	2300      	movs	r3, #0
    e6cc:	4313      	orrs	r3, r2
    e6ce:	f000 80a3 	beq.w	e818 <le_advertising_report+0x1a0>
    e6d2:	b147      	cbz	r7, e6e6 <le_advertising_report+0x6e>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    e6d4:	4b7e      	ldr	r3, [pc, #504]	; (e8d0 <le_advertising_report+0x258>)
    e6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    e6da:	f002 020b 	and.w	r2, r2, #11
    e6de:	2300      	movs	r3, #0
    e6e0:	4313      	orrs	r3, r2
    e6e2:	f000 8099 	beq.w	e818 <le_advertising_report+0x1a0>
	if (dup_count >= 0) {
    e6e6:	4b7b      	ldr	r3, [pc, #492]	; (e8d4 <le_advertising_report+0x25c>)
    e6e8:	681b      	ldr	r3, [r3, #0]
    e6ea:	2b00      	cmp	r3, #0
    e6ec:	db08      	blt.n	e700 <le_advertising_report+0x88>
    e6ee:	2400      	movs	r4, #0
    e6f0:	e009      	b.n	e706 <le_advertising_report+0x8e>
		ll_rl_crpa_set(0x00, NULL, rl_idx,
    e6f2:	1cab      	adds	r3, r5, #2
    e6f4:	4642      	mov	r2, r8
    e6f6:	2100      	movs	r1, #0
    e6f8:	4608      	mov	r0, r1
    e6fa:	f00b fea7 	bl	1a44c <ll_rl_crpa_set>
    e6fe:	e7d2      	b.n	e6a6 <le_advertising_report+0x2e>
	return false;
    e700:	2300      	movs	r3, #0
    e702:	e054      	b.n	e7ae <le_advertising_report+0x136>
		for (i = 0; i < dup_count; i++) {
    e704:	3401      	adds	r4, #1
    e706:	4b73      	ldr	r3, [pc, #460]	; (e8d4 <le_advertising_report+0x25c>)
    e708:	681b      	ldr	r3, [r3, #0]
    e70a:	429c      	cmp	r4, r3
    e70c:	da26      	bge.n	e75c <le_advertising_report+0xe4>
				    &dup_filter[i].addr.a.val[0],
    e70e:	4972      	ldr	r1, [pc, #456]	; (e8d8 <le_advertising_report+0x260>)
    e710:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
			if (!memcmp(&adv->payload.adv_ind.addr[0],
    e714:	2206      	movs	r2, #6
    e716:	3102      	adds	r1, #2
    e718:	1ca8      	adds	r0, r5, #2
    e71a:	f01c f869 	bl	2a7f0 <memcmp>
    e71e:	2800      	cmp	r0, #0
    e720:	d1f0      	bne.n	e704 <le_advertising_report+0x8c>
			    adv->tx_addr == dup_filter[i].addr.type) {
    e722:	782b      	ldrb	r3, [r5, #0]
    e724:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e728:	4a6b      	ldr	r2, [pc, #428]	; (e8d8 <le_advertising_report+0x260>)
    e72a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    e72e:	7852      	ldrb	r2, [r2, #1]
				    sizeof(bt_addr_t)) &&
    e730:	4293      	cmp	r3, r2
    e732:	d1e7      	bne.n	e704 <le_advertising_report+0x8c>
				if (dup_filter[i].mask & BIT(adv->type)) {
    e734:	4b68      	ldr	r3, [pc, #416]	; (e8d8 <le_advertising_report+0x260>)
    e736:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
    e73a:	782b      	ldrb	r3, [r5, #0]
    e73c:	f003 030f 	and.w	r3, r3, #15
    e740:	fa22 f103 	lsr.w	r1, r2, r3
    e744:	f011 0f01 	tst.w	r1, #1
    e748:	d171      	bne.n	e82e <le_advertising_report+0x1b6>
				dup_filter[i].mask |= BIT(adv->type);
    e74a:	2101      	movs	r1, #1
    e74c:	fa01 f303 	lsl.w	r3, r1, r3
    e750:	431a      	orrs	r2, r3
    e752:	4b61      	ldr	r3, [pc, #388]	; (e8d8 <le_advertising_report+0x260>)
    e754:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
				return false;
    e758:	2300      	movs	r3, #0
    e75a:	e028      	b.n	e7ae <le_advertising_report+0x136>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    e75c:	f8df a17c 	ldr.w	sl, [pc, #380]	; e8dc <le_advertising_report+0x264>
    e760:	f8da 0000 	ldr.w	r0, [sl]
    e764:	4c5c      	ldr	r4, [pc, #368]	; (e8d8 <le_advertising_report+0x260>)
    e766:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    e76a:	2206      	movs	r2, #6
    e76c:	1ca9      	adds	r1, r5, #2
    e76e:	3002      	adds	r0, #2
    e770:	f7f1 fda6 	bl	2c0 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    e774:	f8da 3000 	ldr.w	r3, [sl]
    e778:	782a      	ldrb	r2, [r5, #0]
    e77a:	f3c2 1280 	ubfx	r2, r2, #6, #1
    e77e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    e782:	704a      	strb	r2, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    e784:	782a      	ldrb	r2, [r5, #0]
    e786:	f002 010f 	and.w	r1, r2, #15
    e78a:	2201      	movs	r2, #1
    e78c:	408a      	lsls	r2, r1
    e78e:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    e792:	4a50      	ldr	r2, [pc, #320]	; (e8d4 <le_advertising_report+0x25c>)
    e794:	6812      	ldr	r2, [r2, #0]
    e796:	2a0f      	cmp	r2, #15
    e798:	dc41      	bgt.n	e81e <le_advertising_report+0x1a6>
			dup_count++;
    e79a:	3201      	adds	r2, #1
    e79c:	4b4d      	ldr	r3, [pc, #308]	; (e8d4 <le_advertising_report+0x25c>)
    e79e:	601a      	str	r2, [r3, #0]
			dup_curr = dup_count;
    e7a0:	f8ca 2000 	str.w	r2, [sl]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    e7a4:	4b4d      	ldr	r3, [pc, #308]	; (e8dc <le_advertising_report+0x264>)
    e7a6:	681b      	ldr	r3, [r3, #0]
    e7a8:	2b10      	cmp	r3, #16
    e7aa:	d03c      	beq.n	e826 <le_advertising_report+0x1ae>
	return false;
    e7ac:	2300      	movs	r3, #0
	if (dup_found(adv)) {
    e7ae:	bb9b      	cbnz	r3, e818 <le_advertising_report+0x1a0>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    e7b0:	782b      	ldrb	r3, [r5, #0]
    e7b2:	f003 030f 	and.w	r3, r3, #15
    e7b6:	2b01      	cmp	r3, #1
    e7b8:	d03b      	beq.n	e832 <le_advertising_report+0x1ba>
		data_len = (adv->len - BDADDR_SIZE);
    e7ba:	786c      	ldrb	r4, [r5, #1]
    e7bc:	3c06      	subs	r4, #6
    e7be:	b2e4      	uxtb	r4, r4
		  offsetof(struct pdu_adv, payload) + adv->len];
    e7c0:	786a      	ldrb	r2, [r5, #1]
    e7c2:	320a      	adds	r2, #10
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e7c4:	f816 a002 	ldrb.w	sl, [r6, r2]
    e7c8:	f1ca 0a00 	rsb	sl, sl, #0
    e7cc:	fa4f fa8a 	sxtb.w	sl, sl
	if (direct) {
    e7d0:	2f00      	cmp	r7, #0
    e7d2:	d041      	beq.n	e858 <le_advertising_report+0x1e0>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    e7d4:	2b01      	cmp	r3, #1
    e7d6:	d12e      	bne.n	e836 <le_advertising_report+0x1be>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    e7d8:	2211      	movs	r2, #17
    e7da:	210b      	movs	r1, #11
    e7dc:	4648      	mov	r0, r9
    e7de:	f7fe fe8f 	bl	d500 <meta_evt>
    e7e2:	4604      	mov	r4, r0
		drp->num_reports = 1;
    e7e4:	2301      	movs	r3, #1
    e7e6:	7003      	strb	r3, [r0, #0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    e7e8:	7043      	strb	r3, [r0, #1]
		if (rl_idx < ll_rl_size_get()) {
    e7ea:	f00b fce3 	bl	1a1b4 <ll_rl_size_get>
    e7ee:	4580      	cmp	r8, r0
    e7f0:	d227      	bcs.n	e842 <le_advertising_report+0x1ca>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    e7f2:	1ce2      	adds	r2, r4, #3
    e7f4:	1ca1      	adds	r1, r4, #2
    e7f6:	4640      	mov	r0, r8
    e7f8:	f00b fa84 	bl	19d04 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    e7fc:	78a3      	ldrb	r3, [r4, #2]
    e7fe:	3302      	adds	r3, #2
    e800:	70a3      	strb	r3, [r4, #2]
		dir_info->dir_addr.type = 0x1;
    e802:	2301      	movs	r3, #1
    e804:	7263      	strb	r3, [r4, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    e806:	2206      	movs	r2, #6
    e808:	f105 0108 	add.w	r1, r5, #8
    e80c:	f104 000a 	add.w	r0, r4, #10
    e810:	f7f1 fd56 	bl	2c0 <memcpy>
		dir_info->rssi = rssi;
    e814:	f884 a010 	strb.w	sl, [r4, #16]
}
    e818:	b002      	add	sp, #8
    e81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
    e81e:	3301      	adds	r3, #1
    e820:	4a2e      	ldr	r2, [pc, #184]	; (e8dc <le_advertising_report+0x264>)
    e822:	6013      	str	r3, [r2, #0]
    e824:	e7be      	b.n	e7a4 <le_advertising_report+0x12c>
			dup_curr = 0;
    e826:	2300      	movs	r3, #0
    e828:	4a2c      	ldr	r2, [pc, #176]	; (e8dc <le_advertising_report+0x264>)
    e82a:	6013      	str	r3, [r2, #0]
    e82c:	e7bf      	b.n	e7ae <le_advertising_report+0x136>
					return true;
    e82e:	2301      	movs	r3, #1
    e830:	e7bd      	b.n	e7ae <le_advertising_report+0x136>
		data_len = 0;
    e832:	2400      	movs	r4, #0
    e834:	e7c4      	b.n	e7c0 <le_advertising_report+0x148>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    e836:	4040      	eors	r0, r0
    e838:	f380 8811 	msr	BASEPRI, r0
    e83c:	f04f 0004 	mov.w	r0, #4
    e840:	df02      	svc	2
			dir_info->addr.type = adv->tx_addr;
    e842:	4629      	mov	r1, r5
    e844:	f811 3b02 	ldrb.w	r3, [r1], #2
    e848:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e84c:	70a3      	strb	r3, [r4, #2]
			memcpy(&dir_info->addr.a.val[0],
    e84e:	2206      	movs	r2, #6
    e850:	1ce0      	adds	r0, r4, #3
    e852:	f7f1 fd35 	bl	2c0 <memcpy>
    e856:	e7d4      	b.n	e802 <le_advertising_report+0x18a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    e858:	f104 020b 	add.w	r2, r4, #11
    e85c:	b2d2      	uxtb	r2, r2
    e85e:	2102      	movs	r1, #2
    e860:	4648      	mov	r0, r9
    e862:	f7fe fe4d 	bl	d500 <meta_evt>
    e866:	4607      	mov	r7, r0
	sep->num_reports = 1;
    e868:	2301      	movs	r3, #1
    e86a:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    e86c:	782b      	ldrb	r3, [r5, #0]
    e86e:	f003 030f 	and.w	r3, r3, #15
    e872:	aa02      	add	r2, sp, #8
    e874:	4413      	add	r3, r2
    e876:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    e87a:	7043      	strb	r3, [r0, #1]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    e87c:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e87e:	330b      	adds	r3, #11
    e880:	5cf6      	ldrb	r6, [r6, r3]
	if (rl_idx < ll_rl_size_get()) {
    e882:	f00b fc97 	bl	1a1b4 <ll_rl_size_get>
    e886:	4286      	cmp	r6, r0
    e888:	d212      	bcs.n	e8b0 <le_advertising_report+0x238>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    e88a:	1cfa      	adds	r2, r7, #3
    e88c:	1cb9      	adds	r1, r7, #2
    e88e:	4630      	mov	r0, r6
    e890:	f00b fa38 	bl	19d04 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    e894:	78bb      	ldrb	r3, [r7, #2]
    e896:	3302      	adds	r3, #2
    e898:	70bb      	strb	r3, [r7, #2]
	adv_info->length = data_len;
    e89a:	727c      	strb	r4, [r7, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    e89c:	370a      	adds	r7, #10
    e89e:	4622      	mov	r2, r4
    e8a0:	f105 0108 	add.w	r1, r5, #8
    e8a4:	4638      	mov	r0, r7
    e8a6:	f7f1 fd0b 	bl	2c0 <memcpy>
	*prssi = rssi;
    e8aa:	f807 a004 	strb.w	sl, [r7, r4]
    e8ae:	e7b3      	b.n	e818 <le_advertising_report+0x1a0>
		adv_info->addr.type = adv->tx_addr;
    e8b0:	4629      	mov	r1, r5
    e8b2:	f811 3b02 	ldrb.w	r3, [r1], #2
    e8b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e8ba:	70bb      	strb	r3, [r7, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    e8bc:	2206      	movs	r2, #6
    e8be:	1cf8      	adds	r0, r7, #3
    e8c0:	f7f1 fcfe 	bl	2c0 <memcpy>
    e8c4:	e7e9      	b.n	e89a <le_advertising_report+0x222>
    e8c6:	bf00      	nop
    e8c8:	0002e738 	.word	0x0002e738
    e8cc:	2000bc70 	.word	0x2000bc70
    e8d0:	2000bc78 	.word	0x2000bc78
    e8d4:	20000b48 	.word	0x20000b48
    e8d8:	20000b50 	.word	0x20000b50
    e8dc:	20000b4c 	.word	0x20000b4c

0000e8e0 <le_adv_ext_report>:
		  offsetof(struct pdu_adv, payload) + adv->len];
    e8e0:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    e8e2:	7803      	ldrb	r3, [r0, #0]
    e8e4:	f003 030f 	and.w	r3, r3, #15
    e8e8:	2b07      	cmp	r3, #7
    e8ea:	d000      	beq.n	e8ee <le_adv_ext_report+0xe>
    e8ec:	4770      	bx	lr
    e8ee:	2a00      	cmp	r2, #0
    e8f0:	d0fc      	beq.n	e8ec <le_adv_ext_report+0xc>
		ptr = (u8_t *)h + sizeof(*h);
    e8f2:	1d01      	adds	r1, r0, #4
		if (!p->ext_hdr_len) {
    e8f4:	7883      	ldrb	r3, [r0, #2]
    e8f6:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    e8fa:	d0f7      	beq.n	e8ec <le_adv_ext_report+0xc>
		if (h->adv_addr) {
    e8fc:	78c3      	ldrb	r3, [r0, #3]
    e8fe:	f013 0f01 	tst.w	r3, #1
    e902:	d0f3      	beq.n	e8ec <le_adv_ext_report+0xc>
{
    e904:	b570      	push	{r4, r5, r6, lr}
    e906:	b092      	sub	sp, #72	; 0x48
			addr.type = adv->tx_addr;
    e908:	7803      	ldrb	r3, [r0, #0]
    e90a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e90e:	f88d 3018 	strb.w	r3, [sp, #24]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    e912:	2206      	movs	r2, #6
    e914:	f10d 0019 	add.w	r0, sp, #25
    e918:	f7f1 fcd2 	bl	2c0 <memcpy>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    e91c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e920:	2b03      	cmp	r3, #3
    e922:	d830      	bhi.n	e986 <le_adv_ext_report+0xa6>
    e924:	e8df f003 	tbb	[pc, r3]
    e928:	2a252002 	.word	0x2a252002
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    e92c:	4919      	ldr	r1, [pc, #100]	; (e994 <le_adv_ext_report+0xb4>)
    e92e:	a808      	add	r0, sp, #32
    e930:	f01c f95e 	bl	2abf0 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    e934:	f89d 301e 	ldrb.w	r3, [sp, #30]
    e938:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e93c:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    e940:	f89d 001b 	ldrb.w	r0, [sp, #27]
    e944:	f89d 401a 	ldrb.w	r4, [sp, #26]
    e948:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e94c:	ae08      	add	r6, sp, #32
    e94e:	9605      	str	r6, [sp, #20]
    e950:	9504      	str	r5, [sp, #16]
    e952:	9403      	str	r4, [sp, #12]
    e954:	9002      	str	r0, [sp, #8]
    e956:	9101      	str	r1, [sp, #4]
    e958:	9200      	str	r2, [sp, #0]
    e95a:	4a0f      	ldr	r2, [pc, #60]	; (e998 <le_adv_ext_report+0xb8>)
    e95c:	211b      	movs	r1, #27
    e95e:	a80b      	add	r0, sp, #44	; 0x2c
    e960:	f7f4 fb38 	bl	2fd4 <snprintk>
}
    e964:	b012      	add	sp, #72	; 0x48
    e966:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    e968:	490c      	ldr	r1, [pc, #48]	; (e99c <le_adv_ext_report+0xbc>)
    e96a:	a808      	add	r0, sp, #32
    e96c:	f01c f940 	bl	2abf0 <strcpy>
    e970:	e7e0      	b.n	e934 <le_adv_ext_report+0x54>
		strcpy(type, "public id");
    e972:	490b      	ldr	r1, [pc, #44]	; (e9a0 <le_adv_ext_report+0xc0>)
    e974:	a808      	add	r0, sp, #32
    e976:	f01c f93b 	bl	2abf0 <strcpy>
    e97a:	e7db      	b.n	e934 <le_adv_ext_report+0x54>
		strcpy(type, "random id");
    e97c:	4909      	ldr	r1, [pc, #36]	; (e9a4 <le_adv_ext_report+0xc4>)
    e97e:	a808      	add	r0, sp, #32
    e980:	f01c f936 	bl	2abf0 <strcpy>
    e984:	e7d6      	b.n	e934 <le_adv_ext_report+0x54>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e986:	4a08      	ldr	r2, [pc, #32]	; (e9a8 <le_adv_ext_report+0xc8>)
    e988:	210a      	movs	r1, #10
    e98a:	a808      	add	r0, sp, #32
    e98c:	f7f4 fb22 	bl	2fd4 <snprintk>
    e990:	e7d0      	b.n	e934 <le_adv_ext_report+0x54>
    e992:	bf00      	nop
    e994:	00031764 	.word	0x00031764
    e998:	00031794 	.word	0x00031794
    e99c:	0003176c 	.word	0x0003176c
    e9a0:	00031774 	.word	0x00031774
    e9a4:	00031780 	.word	0x00031780
    e9a8:	0003178c 	.word	0x0003178c

0000e9ac <le_adv_ext_1M_report>:
{
    e9ac:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    e9ae:	2301      	movs	r3, #1
    e9b0:	f7ff ff96 	bl	e8e0 <le_adv_ext_report>
    e9b4:	bd08      	pop	{r3, pc}

0000e9b6 <le_adv_ext_coded_report>:
{
    e9b6:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    e9b8:	2304      	movs	r3, #4
    e9ba:	f7ff ff91 	bl	e8e0 <le_adv_ext_report>
    e9be:	bd08      	pop	{r3, pc}

0000e9c0 <le_scan_req_received>:
{
    e9c0:	b570      	push	{r4, r5, r6, lr}
    e9c2:	b092      	sub	sp, #72	; 0x48
    e9c4:	4604      	mov	r4, r0
    e9c6:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e9c8:	4b33      	ldr	r3, [pc, #204]	; (ea98 <le_scan_req_received+0xd8>)
    e9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    e9ce:	2200      	movs	r2, #0
    e9d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e9d4:	4313      	orrs	r3, r2
    e9d6:	d007      	beq.n	e9e8 <le_scan_req_received+0x28>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    e9d8:	4b30      	ldr	r3, [pc, #192]	; (ea9c <le_scan_req_received+0xdc>)
    e9da:	e9d3 2300 	ldrd	r2, r3, [r3]
    e9de:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    e9e2:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e9e4:	4313      	orrs	r3, r2
    e9e6:	d146      	bne.n	ea76 <le_scan_req_received+0xb6>
		addr.type = adv->tx_addr;
    e9e8:	4621      	mov	r1, r4
    e9ea:	f811 3b02 	ldrb.w	r3, [r1], #2
    e9ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e9f2:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    e9f6:	2206      	movs	r2, #6
    e9f8:	f10d 0019 	add.w	r0, sp, #25
    e9fc:	f7f1 fc60 	bl	2c0 <memcpy>
	switch (addr->type) {
    ea00:	f89d 3018 	ldrb.w	r3, [sp, #24]
    ea04:	2b03      	cmp	r3, #3
    ea06:	d830      	bhi.n	ea6a <le_scan_req_received+0xaa>
    ea08:	e8df f003 	tbb	[pc, r3]
    ea0c:	2a252002 	.word	0x2a252002
		strcpy(type, "public");
    ea10:	4923      	ldr	r1, [pc, #140]	; (eaa0 <le_scan_req_received+0xe0>)
    ea12:	a808      	add	r0, sp, #32
    ea14:	f01c f8ec 	bl	2abf0 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    ea18:	f89d 301e 	ldrb.w	r3, [sp, #30]
    ea1c:	f89d 201d 	ldrb.w	r2, [sp, #29]
    ea20:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    ea24:	f89d 001b 	ldrb.w	r0, [sp, #27]
    ea28:	f89d 401a 	ldrb.w	r4, [sp, #26]
    ea2c:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ea30:	ae08      	add	r6, sp, #32
    ea32:	9605      	str	r6, [sp, #20]
    ea34:	9504      	str	r5, [sp, #16]
    ea36:	9403      	str	r4, [sp, #12]
    ea38:	9002      	str	r0, [sp, #8]
    ea3a:	9101      	str	r1, [sp, #4]
    ea3c:	9200      	str	r2, [sp, #0]
    ea3e:	4a19      	ldr	r2, [pc, #100]	; (eaa4 <le_scan_req_received+0xe4>)
    ea40:	211b      	movs	r1, #27
    ea42:	a80b      	add	r0, sp, #44	; 0x2c
    ea44:	f7f4 fac6 	bl	2fd4 <snprintk>
}
    ea48:	b012      	add	sp, #72	; 0x48
    ea4a:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    ea4c:	4916      	ldr	r1, [pc, #88]	; (eaa8 <le_scan_req_received+0xe8>)
    ea4e:	a808      	add	r0, sp, #32
    ea50:	f01c f8ce 	bl	2abf0 <strcpy>
    ea54:	e7e0      	b.n	ea18 <le_scan_req_received+0x58>
		strcpy(type, "public id");
    ea56:	4915      	ldr	r1, [pc, #84]	; (eaac <le_scan_req_received+0xec>)
    ea58:	a808      	add	r0, sp, #32
    ea5a:	f01c f8c9 	bl	2abf0 <strcpy>
    ea5e:	e7db      	b.n	ea18 <le_scan_req_received+0x58>
		strcpy(type, "random id");
    ea60:	4913      	ldr	r1, [pc, #76]	; (eab0 <le_scan_req_received+0xf0>)
    ea62:	a808      	add	r0, sp, #32
    ea64:	f01c f8c4 	bl	2abf0 <strcpy>
    ea68:	e7d6      	b.n	ea18 <le_scan_req_received+0x58>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    ea6a:	4a12      	ldr	r2, [pc, #72]	; (eab4 <le_scan_req_received+0xf4>)
    ea6c:	210a      	movs	r1, #10
    ea6e:	a808      	add	r0, sp, #32
    ea70:	f7f4 fab0 	bl	2fd4 <snprintk>
    ea74:	e7d0      	b.n	ea18 <le_scan_req_received+0x58>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    ea76:	2208      	movs	r2, #8
    ea78:	2113      	movs	r1, #19
    ea7a:	f7fe fd41 	bl	d500 <meta_evt>
	sep->handle = 0;
    ea7e:	2300      	movs	r3, #0
    ea80:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    ea82:	4621      	mov	r1, r4
    ea84:	f811 3b02 	ldrb.w	r3, [r1], #2
    ea88:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ea8c:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    ea8e:	2206      	movs	r2, #6
    ea90:	3002      	adds	r0, #2
    ea92:	f7f1 fc15 	bl	2c0 <memcpy>
    ea96:	e7d7      	b.n	ea48 <le_scan_req_received+0x88>
    ea98:	2000bc70 	.word	0x2000bc70
    ea9c:	2000bc78 	.word	0x2000bc78
    eaa0:	00031764 	.word	0x00031764
    eaa4:	00031794 	.word	0x00031794
    eaa8:	0003176c 	.word	0x0003176c
    eaac:	00031774 	.word	0x00031774
    eab0:	00031780 	.word	0x00031780
    eab4:	0003178c 	.word	0x0003178c

0000eab8 <encode_control>:
{
    eab8:	b510      	push	{r4, lr}
    eaba:	460c      	mov	r4, r1
	handle = node_rx->hdr.handle;
    eabc:	88c1      	ldrh	r1, [r0, #6]
	switch (node_rx->hdr.type) {
    eabe:	7903      	ldrb	r3, [r0, #4]
    eac0:	3b02      	subs	r3, #2
    eac2:	2b0a      	cmp	r3, #10
    eac4:	d837      	bhi.n	eb36 <encode_control+0x7e>
    eac6:	e8df f003 	tbb	[pc, r3]
    eaca:	0b06      	.short	0x0b06
    eacc:	1e1a1510 	.word	0x1e1a1510
    ead0:	2e2a2622 	.word	0x2e2a2622
    ead4:	32          	.byte	0x32
    ead5:	00          	.byte	0x00
		le_advertising_report(pdu_data, b, buf);
    ead6:	4601      	mov	r1, r0
    ead8:	4620      	mov	r0, r4
    eada:	f7ff fdcd 	bl	e678 <le_advertising_report>
		break;
    eade:	bd10      	pop	{r4, pc}
		le_adv_ext_1M_report(pdu_data, b, buf);
    eae0:	4601      	mov	r1, r0
    eae2:	4620      	mov	r0, r4
    eae4:	f7ff ff62 	bl	e9ac <le_adv_ext_1M_report>
		break;
    eae8:	bd10      	pop	{r4, pc}
		le_adv_ext_coded_report(pdu_data, b, buf);
    eaea:	4601      	mov	r1, r0
    eaec:	4620      	mov	r0, r4
    eaee:	f7ff ff62 	bl	e9b6 <le_adv_ext_coded_report>
		break;
    eaf2:	bd10      	pop	{r4, pc}
		le_scan_req_received(pdu_data, b, buf);
    eaf4:	4601      	mov	r1, r0
    eaf6:	4620      	mov	r0, r4
    eaf8:	f7ff ff62 	bl	e9c0 <le_scan_req_received>
		break;
    eafc:	bd10      	pop	{r4, pc}
		le_conn_complete(pdu_data, handle, buf);
    eafe:	4620      	mov	r0, r4
    eb00:	f7f7 f99e 	bl	5e40 <le_conn_complete>
		break;
    eb04:	bd10      	pop	{r4, pc}
		disconn_complete(pdu_data, handle, buf);
    eb06:	4620      	mov	r0, r4
    eb08:	f7fe fd32 	bl	d570 <disconn_complete>
		break;
    eb0c:	bd10      	pop	{r4, pc}
		le_conn_update_complete(pdu_data, handle, buf);
    eb0e:	4620      	mov	r0, r4
    eb10:	f7f6 f832 	bl	4b78 <le_conn_update_complete>
		break;
    eb14:	bd10      	pop	{r4, pc}
		enc_refresh_complete(pdu_data, handle, buf);
    eb16:	4620      	mov	r0, r4
    eb18:	f7fe fd52 	bl	d5c0 <enc_refresh_complete>
		break;
    eb1c:	bd10      	pop	{r4, pc}
		auth_payload_timeout_exp(pdu_data, handle, buf);
    eb1e:	4620      	mov	r0, r4
    eb20:	f7fe fd6c 	bl	d5fc <auth_payload_timeout_exp>
		break;
    eb24:	bd10      	pop	{r4, pc}
		le_chan_sel_algo(pdu_data, handle, buf);
    eb26:	4620      	mov	r0, r4
    eb28:	f7fe fcfe 	bl	d528 <le_chan_sel_algo>
		break;
    eb2c:	bd10      	pop	{r4, pc}
		le_phy_upd_complete(pdu_data, handle, buf);
    eb2e:	4620      	mov	r0, r4
    eb30:	f7ff faa6 	bl	e080 <le_phy_upd_complete>
		return;
    eb34:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    eb36:	4040      	eors	r0, r0
    eb38:	f380 8811 	msr	BASEPRI, r0
    eb3c:	f04f 0004 	mov.w	r0, #4
    eb40:	df02      	svc	2
	...

0000eb44 <hci_cmd_handle>:
{
    eb44:	b510      	push	{r4, lr}
    eb46:	b082      	sub	sp, #8
	struct net_buf *evt = NULL;
    eb48:	2300      	movs	r3, #0
    eb4a:	9301      	str	r3, [sp, #4]
	if (cmd->len < sizeof(*chdr)) {
    eb4c:	8983      	ldrh	r3, [r0, #12]
    eb4e:	2b02      	cmp	r3, #2
    eb50:	d94a      	bls.n	ebe8 <hci_cmd_handle+0xa4>
	chdr = (void *)cmd->data;
    eb52:	6882      	ldr	r2, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    eb54:	8814      	ldrh	r4, [r2, #0]
    eb56:	4926      	ldr	r1, [pc, #152]	; (ebf0 <hci_cmd_handle+0xac>)
    eb58:	800c      	strh	r4, [r1, #0]
	if (cmd->len < chdr->param_len) {
    eb5a:	7892      	ldrb	r2, [r2, #2]
    eb5c:	4293      	cmp	r3, r2
    eb5e:	d345      	bcc.n	ebec <hci_cmd_handle+0xa8>
    eb60:	4604      	mov	r4, r0
	net_buf_pull(cmd, sizeof(*chdr));
    eb62:	2103      	movs	r1, #3
    eb64:	3008      	adds	r0, #8
    eb66:	f00c f972 	bl	1ae4e <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    eb6a:	4b21      	ldr	r3, [pc, #132]	; (ebf0 <hci_cmd_handle+0xac>)
    eb6c:	881b      	ldrh	r3, [r3, #0]
    eb6e:	f3c3 0009 	ubfx	r0, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    eb72:	0a9b      	lsrs	r3, r3, #10
    eb74:	2b04      	cmp	r3, #4
    eb76:	d01c      	beq.n	ebb2 <hci_cmd_handle+0x6e>
    eb78:	d908      	bls.n	eb8c <hci_cmd_handle+0x48>
    eb7a:	2b08      	cmp	r3, #8
    eb7c:	d023      	beq.n	ebc6 <hci_cmd_handle+0x82>
    eb7e:	2b3f      	cmp	r3, #63	; 0x3f
    eb80:	d026      	beq.n	ebd0 <hci_cmd_handle+0x8c>
    eb82:	2b05      	cmp	r3, #5
    eb84:	d01a      	beq.n	ebbc <hci_cmd_handle+0x78>
		err = -EINVAL;
    eb86:	f06f 0015 	mvn.w	r0, #21
    eb8a:	e00c      	b.n	eba6 <hci_cmd_handle+0x62>
	switch (BT_OGF(_opcode)) {
    eb8c:	2b01      	cmp	r3, #1
    eb8e:	d006      	beq.n	eb9e <hci_cmd_handle+0x5a>
    eb90:	2b03      	cmp	r3, #3
    eb92:	d1f8      	bne.n	eb86 <hci_cmd_handle+0x42>
		err = ctrl_bb_cmd_handle(ocf, cmd, &evt);
    eb94:	aa01      	add	r2, sp, #4
    eb96:	4621      	mov	r1, r4
    eb98:	f7fe fe29 	bl	d7ee <ctrl_bb_cmd_handle>
		break;
    eb9c:	e003      	b.n	eba6 <hci_cmd_handle+0x62>
		err = link_control_cmd_handle(ocf, cmd, &evt);
    eb9e:	aa01      	add	r2, sp, #4
    eba0:	4621      	mov	r1, r4
    eba2:	f7fe fd9b 	bl	d6dc <link_control_cmd_handle>
	if (err == -EINVAL) {
    eba6:	f110 0f16 	cmn.w	r0, #22
    ebaa:	d016      	beq.n	ebda <hci_cmd_handle+0x96>
	return evt;
    ebac:	9801      	ldr	r0, [sp, #4]
}
    ebae:	b002      	add	sp, #8
    ebb0:	bd10      	pop	{r4, pc}
		err = info_cmd_handle(ocf, cmd, &evt);
    ebb2:	aa01      	add	r2, sp, #4
    ebb4:	4621      	mov	r1, r4
    ebb6:	f7fe ffde 	bl	db76 <info_cmd_handle>
		break;
    ebba:	e7f4      	b.n	eba6 <hci_cmd_handle+0x62>
		err = status_cmd_handle(ocf, cmd, &evt);
    ebbc:	aa01      	add	r2, sp, #4
    ebbe:	4621      	mov	r1, r4
    ebc0:	f7fe fbcf 	bl	d362 <status_cmd_handle>
		break;
    ebc4:	e7ef      	b.n	eba6 <hci_cmd_handle+0x62>
		err = controller_cmd_handle(ocf, cmd, &evt);
    ebc6:	aa01      	add	r2, sp, #4
    ebc8:	4621      	mov	r1, r4
    ebca:	f7ff fb8c 	bl	e2e6 <controller_cmd_handle>
		break;
    ebce:	e7ea      	b.n	eba6 <hci_cmd_handle+0x62>
		err = vendor_cmd_handle(ocf, cmd, &evt);
    ebd0:	aa01      	add	r2, sp, #4
    ebd2:	4621      	mov	r1, r4
    ebd4:	f7ff f876 	bl	dcc4 <vendor_cmd_handle>
		break;
    ebd8:	e7e5      	b.n	eba6 <hci_cmd_handle+0x62>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    ebda:	2101      	movs	r1, #1
    ebdc:	a801      	add	r0, sp, #4
    ebde:	f7fe fbf5 	bl	d3cc <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    ebe2:	2301      	movs	r3, #1
    ebe4:	7003      	strb	r3, [r0, #0]
    ebe6:	e7e1      	b.n	ebac <hci_cmd_handle+0x68>
		return NULL;
    ebe8:	2000      	movs	r0, #0
    ebea:	e7e0      	b.n	ebae <hci_cmd_handle+0x6a>
		return NULL;
    ebec:	2000      	movs	r0, #0
    ebee:	e7de      	b.n	ebae <hci_cmd_handle+0x6a>
    ebf0:	20000b40 	.word	0x20000b40

0000ebf4 <hci_acl_handle>:
{
    ebf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    ebf8:	2300      	movs	r3, #0
    ebfa:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    ebfc:	8983      	ldrh	r3, [r0, #12]
    ebfe:	2b03      	cmp	r3, #3
    ec00:	d93e      	bls.n	ec80 <hci_acl_handle+0x8c>
    ec02:	4689      	mov	r9, r1
    ec04:	4604      	mov	r4, r0
	acl = (void *)buf->data;
    ec06:	f850 3f08 	ldr.w	r3, [r0, #8]!
	len = sys_le16_to_cpu(acl->len);
    ec0a:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    ec0e:	881e      	ldrh	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    ec10:	2104      	movs	r1, #4
    ec12:	f00c f91c 	bl	1ae4e <net_buf_simple_pull>
	if (buf->len < len) {
    ec16:	89a3      	ldrh	r3, [r4, #12]
    ec18:	4598      	cmp	r8, r3
    ec1a:	d835      	bhi.n	ec88 <hci_acl_handle+0x94>
	flags = bt_acl_flags(handle);
    ec1c:	0b37      	lsrs	r7, r6, #12
	handle = bt_acl_handle(handle);
    ec1e:	f3c6 060b 	ubfx	r6, r6, #0, #12
	radio_pdu_node_tx = radio_tx_mem_acquire();
    ec22:	f009 ff1d 	bl	18a60 <radio_tx_mem_acquire>
	if (!radio_pdu_node_tx) {
    ec26:	4605      	mov	r5, r0
    ec28:	b140      	cbz	r0, ec3c <hci_acl_handle+0x48>
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    ec2a:	b177      	cbz	r7, ec4a <hci_acl_handle+0x56>
    ec2c:	2f02      	cmp	r7, #2
    ec2e:	d00c      	beq.n	ec4a <hci_acl_handle+0x56>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ec30:	7903      	ldrb	r3, [r0, #4]
    ec32:	2201      	movs	r2, #1
    ec34:	f362 0301 	bfi	r3, r2, #0, #2
    ec38:	7103      	strb	r3, [r0, #4]
    ec3a:	e00b      	b.n	ec54 <hci_acl_handle+0x60>
		data_buf_overflow(evt);
    ec3c:	4648      	mov	r0, r9
    ec3e:	f7ff fcbf 	bl	e5c0 <data_buf_overflow>
		return -ENOBUFS;
    ec42:	f06f 0068 	mvn.w	r0, #104	; 0x68
    ec46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    ec4a:	792b      	ldrb	r3, [r5, #4]
    ec4c:	2202      	movs	r2, #2
    ec4e:	f362 0301 	bfi	r3, r2, #0, #2
    ec52:	712b      	strb	r3, [r5, #4]
	pdu_data->len = len;
    ec54:	f885 8005 	strb.w	r8, [r5, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    ec58:	4642      	mov	r2, r8
    ec5a:	68a1      	ldr	r1, [r4, #8]
    ec5c:	1de8      	adds	r0, r5, #7
    ec5e:	f7f1 fb2f 	bl	2c0 <memcpy>
	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    ec62:	4629      	mov	r1, r5
    ec64:	4630      	mov	r0, r6
    ec66:	f009 ff0b 	bl	18a80 <radio_tx_mem_enqueue>
    ec6a:	b910      	cbnz	r0, ec72 <hci_acl_handle+0x7e>
	return 0;
    ec6c:	2000      	movs	r0, #0
}
    ec6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		radio_tx_mem_release(radio_pdu_node_tx);
    ec72:	4628      	mov	r0, r5
    ec74:	f009 fefc 	bl	18a70 <radio_tx_mem_release>
		return -EINVAL;
    ec78:	f06f 0015 	mvn.w	r0, #21
    ec7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    ec80:	f06f 0015 	mvn.w	r0, #21
    ec84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    ec88:	f06f 0015 	mvn.w	r0, #21
    ec8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ec90 <hci_acl_encode>:
{
    ec90:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
    ec92:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
    ec94:	7a03      	ldrb	r3, [r0, #8]
    ec96:	f003 0303 	and.w	r3, r3, #3
    ec9a:	3b01      	subs	r3, #1
    ec9c:	2b01      	cmp	r3, #1
    ec9e:	d81d      	bhi.n	ecdc <hci_acl_encode+0x4c>
    eca0:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    eca2:	f101 0508 	add.w	r5, r1, #8
    eca6:	2104      	movs	r1, #4
    eca8:	4628      	mov	r0, r5
    ecaa:	f00c f883 	bl	1adb4 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    ecae:	7a23      	ldrb	r3, [r4, #8]
    ecb0:	f003 0303 	and.w	r3, r3, #3
    ecb4:	2b02      	cmp	r3, #2
    ecb6:	d00e      	beq.n	ecd6 <hci_acl_encode+0x46>
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    ecb8:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    ecbc:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    ecbe:	7a63      	ldrb	r3, [r4, #9]
    ecc0:	8043      	strh	r3, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    ecc2:	7a61      	ldrb	r1, [r4, #9]
    ecc4:	4628      	mov	r0, r5
    ecc6:	f00c f875 	bl	1adb4 <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    ecca:	7a62      	ldrb	r2, [r4, #9]
    eccc:	f104 010b 	add.w	r1, r4, #11
    ecd0:	f7f1 faf6 	bl	2c0 <memcpy>
}
    ecd4:	bd70      	pop	{r4, r5, r6, pc}
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    ecd6:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    ecda:	e7ef      	b.n	ecbc <hci_acl_encode+0x2c>
		LL_ASSERT(0);
    ecdc:	4040      	eors	r0, r0
    ecde:	f380 8811 	msr	BASEPRI, r0
    ece2:	f04f 0004 	mov.w	r0, #4
    ece6:	df02      	svc	2

0000ece8 <hci_evt_encode>:
{
    ece8:	b510      	push	{r4, lr}
	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    ecea:	f100 0408 	add.w	r4, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    ecee:	7903      	ldrb	r3, [r0, #4]
    ecf0:	2b01      	cmp	r3, #1
    ecf2:	d004      	beq.n	ecfe <hci_evt_encode+0x16>
		encode_control(node_rx, pdu_data, buf);
    ecf4:	460a      	mov	r2, r1
    ecf6:	4621      	mov	r1, r4
    ecf8:	f7ff fede 	bl	eab8 <encode_control>
    ecfc:	bd10      	pop	{r4, pc}
		encode_data_ctrl(node_rx, pdu_data, buf);
    ecfe:	460a      	mov	r2, r1
    ed00:	4621      	mov	r1, r4
    ed02:	f7ff fc7d 	bl	e600 <encode_data_ctrl>
    ed06:	bd10      	pop	{r4, pc}

0000ed08 <hci_num_cmplt_encode>:
{
    ed08:	b570      	push	{r4, r5, r6, lr}
    ed0a:	4606      	mov	r6, r0
    ed0c:	460d      	mov	r5, r1
    ed0e:	4614      	mov	r4, r2
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    ed10:	2205      	movs	r2, #5
    ed12:	2113      	movs	r1, #19
    ed14:	f7fe fb28 	bl	d368 <evt_create>
	ep = net_buf_add(buf, len);
    ed18:	2105      	movs	r1, #5
    ed1a:	f106 0008 	add.w	r0, r6, #8
    ed1e:	f00c f849 	bl	1adb4 <net_buf_simple_add>
	ep->num_handles = num_handles;
    ed22:	2301      	movs	r3, #1
    ed24:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
    ed26:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    ed2a:	f8a0 4003 	strh.w	r4, [r0, #3]
    ed2e:	bd70      	pop	{r4, r5, r6, pc}

0000ed30 <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    ed30:	7903      	ldrb	r3, [r0, #4]
    ed32:	2b01      	cmp	r3, #1
    ed34:	d011      	beq.n	ed5a <hci_get_class+0x2a>
		switch (node_rx->hdr.type) {
    ed36:	3b02      	subs	r3, #2
    ed38:	2b0a      	cmp	r3, #10
    ed3a:	d80b      	bhi.n	ed54 <hci_get_class+0x24>
    ed3c:	e8df f003 	tbb	[pc, r3]
    ed40:	06060606 	.word	0x06060606
    ed44:	08080816 	.word	0x08080816
    ed48:	0808      	.short	0x0808
    ed4a:	08          	.byte	0x08
    ed4b:	00          	.byte	0x00
			return HCI_CLASS_EVT_DISCARDABLE;
    ed4c:	2001      	movs	r0, #1
    ed4e:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    ed50:	2002      	movs	r0, #2
    ed52:	4770      	bx	lr
			return -1;
    ed54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ed58:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    ed5a:	7a03      	ldrb	r3, [r0, #8]
    ed5c:	f003 0303 	and.w	r3, r3, #3
    ed60:	2b03      	cmp	r3, #3
    ed62:	d001      	beq.n	ed68 <hci_get_class+0x38>
		return HCI_CLASS_ACL_DATA;
    ed64:	2003      	movs	r0, #3
}
    ed66:	4770      	bx	lr
		return HCI_CLASS_EVT_CONNECTION;
    ed68:	2002      	movs	r0, #2
    ed6a:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    ed6c:	2000      	movs	r0, #0
    ed6e:	4770      	bx	lr

0000ed70 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    ed70:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    ed72:	4802      	ldr	r0, [pc, #8]	; (ed7c <_hci_driver_init+0xc>)
    ed74:	f7f7 fcec 	bl	6750 <bt_hci_driver_register>

	return 0;
}
    ed78:	2000      	movs	r0, #0
    ed7a:	bd08      	pop	{r3, pc}
    ed7c:	000317e0 	.word	0x000317e0

0000ed80 <acl_handle>:
{
    ed80:	b510      	push	{r4, lr}
    ed82:	b082      	sub	sp, #8
	err = hci_acl_handle(buf, &evt);
    ed84:	a901      	add	r1, sp, #4
    ed86:	f7ff ff35 	bl	ebf4 <hci_acl_handle>
    ed8a:	4604      	mov	r4, r0
	if (evt) {
    ed8c:	9801      	ldr	r0, [sp, #4]
    ed8e:	b108      	cbz	r0, ed94 <acl_handle+0x14>
		bt_recv_prio(evt);
    ed90:	f7f7 fc8c 	bl	66ac <bt_recv_prio>
}
    ed94:	4620      	mov	r0, r4
    ed96:	b002      	add	sp, #8
    ed98:	bd10      	pop	{r4, pc}

0000ed9a <cmd_handle>:
{
    ed9a:	b508      	push	{r3, lr}
	evt = hci_cmd_handle(buf);
    ed9c:	f7ff fed2 	bl	eb44 <hci_cmd_handle>
	if (evt) {
    eda0:	b108      	cbz	r0, eda6 <cmd_handle+0xc>
		bt_recv_prio(evt);
    eda2:	f7f7 fc83 	bl	66ac <bt_recv_prio>
}
    eda6:	2000      	movs	r0, #0
    eda8:	bd08      	pop	{r3, pc}

0000edaa <hci_driver_send>:
{
    edaa:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
    edac:	8983      	ldrh	r3, [r0, #12]
    edae:	b1cb      	cbz	r3, ede4 <hci_driver_send+0x3a>
    edb0:	4604      	mov	r4, r0
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    edb2:	f100 0310 	add.w	r3, r0, #16
    edb6:	89c2      	ldrh	r2, [r0, #14]
    edb8:	4413      	add	r3, r2
    edba:	3303      	adds	r3, #3
    edbc:	f023 0303 	bic.w	r3, r3, #3
	return *(u8_t *)net_buf_user_data(buf);
    edc0:	781b      	ldrb	r3, [r3, #0]
	switch (type) {
    edc2:	b13b      	cbz	r3, edd4 <hci_driver_send+0x2a>
    edc4:	2b02      	cmp	r3, #2
    edc6:	d110      	bne.n	edea <hci_driver_send+0x40>
		err = acl_handle(buf);
    edc8:	f7ff ffda 	bl	ed80 <acl_handle>
    edcc:	4605      	mov	r5, r0
	if (!err) {
    edce:	b12d      	cbz	r5, eddc <hci_driver_send+0x32>
}
    edd0:	4628      	mov	r0, r5
    edd2:	bd38      	pop	{r3, r4, r5, pc}
		err = cmd_handle(buf);
    edd4:	f7ff ffe1 	bl	ed9a <cmd_handle>
    edd8:	4605      	mov	r5, r0
		break;
    edda:	e7f8      	b.n	edce <hci_driver_send+0x24>
		net_buf_unref(buf);
    eddc:	4620      	mov	r0, r4
    edde:	f00b ff9d 	bl	1ad1c <net_buf_unref>
    ede2:	e7f5      	b.n	edd0 <hci_driver_send+0x26>
		return -EINVAL;
    ede4:	f06f 0515 	mvn.w	r5, #21
    ede8:	e7f2      	b.n	edd0 <hci_driver_send+0x26>
		return -EINVAL;
    edea:	f06f 0515 	mvn.w	r5, #21
    edee:	e7ef      	b.n	edd0 <hci_driver_send+0x26>

0000edf0 <prio_recv_thread>:
{
    edf0:	b530      	push	{r4, r5, lr}
    edf2:	b087      	sub	sp, #28
    edf4:	e00f      	b.n	ee16 <prio_recv_thread+0x26>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    edf6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    edfa:	2001      	movs	r0, #1
    edfc:	f7f7 fe0c 	bl	6a18 <bt_buf_get_rx>
    ee00:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    ee02:	4622      	mov	r2, r4
    ee04:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    ee08:	f7ff ff7e 	bl	ed08 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    ee0c:	4628      	mov	r0, r5
    ee0e:	f7f7 fc4d 	bl	66ac <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    ee12:	f01a f975 	bl	29100 <_impl_k_yield>
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    ee16:	f10d 0112 	add.w	r1, sp, #18
    ee1a:	a805      	add	r0, sp, #20
    ee1c:	f009 fd20 	bl	18860 <radio_rx_get>
    ee20:	4604      	mov	r4, r0
    ee22:	2800      	cmp	r0, #0
    ee24:	d1e7      	bne.n	edf6 <prio_recv_thread+0x6>
		if (node_rx) {
    ee26:	9b05      	ldr	r3, [sp, #20]
    ee28:	b133      	cbz	r3, ee38 <prio_recv_thread+0x48>
			radio_rx_dequeue();
    ee2a:	f00a fa59 	bl	192e0 <radio_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    ee2e:	9905      	ldr	r1, [sp, #20]
    ee30:	481a      	ldr	r0, [pc, #104]	; (ee9c <prio_recv_thread+0xac>)
    ee32:	f019 ff27 	bl	28c84 <k_queue_append>
    ee36:	e7ee      	b.n	ee16 <prio_recv_thread+0x26>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    ee38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ee3c:	4818      	ldr	r0, [pc, #96]	; (eea0 <prio_recv_thread+0xb0>)
    ee3e:	f01a facb 	bl	293d8 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    ee42:	f01a fb15 	bl	29470 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    ee46:	4b17      	ldr	r3, [pc, #92]	; (eea4 <prio_recv_thread+0xb4>)
    ee48:	681b      	ldr	r3, [r3, #0]
    ee4a:	1ac3      	subs	r3, r0, r3
    ee4c:	f241 3288 	movw	r2, #5000	; 0x1388
    ee50:	4293      	cmp	r3, r2
    ee52:	d9e0      	bls.n	ee16 <prio_recv_thread+0x26>
	for (i = 0; i < size; i++) {
    ee54:	2200      	movs	r2, #0
	size_t unused = 0;
    ee56:	4613      	mov	r3, r2
    ee58:	e001      	b.n	ee5e <prio_recv_thread+0x6e>
			unused++;
    ee5a:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    ee5c:	3201      	adds	r2, #1
    ee5e:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
    ee62:	d203      	bcs.n	ee6c <prio_recv_thread+0x7c>
		if ((unsigned char)stack[i] == 0xaa) {
    ee64:	4910      	ldr	r1, [pc, #64]	; (eea8 <prio_recv_thread+0xb8>)
    ee66:	5c89      	ldrb	r1, [r1, r2]
    ee68:	29aa      	cmp	r1, #170	; 0xaa
    ee6a:	d0f6      	beq.n	ee5a <prio_recv_thread+0x6a>
	pcnt = ((size - unused) * 100) / size;
    ee6c:	f5c3 71e0 	rsb	r1, r3, #448	; 0x1c0
    ee70:	2264      	movs	r2, #100	; 0x64
    ee72:	fb02 f201 	mul.w	r2, r2, r1
    ee76:	0992      	lsrs	r2, r2, #6
    ee78:	480c      	ldr	r0, [pc, #48]	; (eeac <prio_recv_thread+0xbc>)
    ee7a:	fba0 0202 	umull	r0, r2, r0, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    ee7e:	9202      	str	r2, [sp, #8]
    ee80:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    ee84:	9201      	str	r2, [sp, #4]
    ee86:	9100      	str	r1, [sp, #0]
    ee88:	4909      	ldr	r1, [pc, #36]	; (eeb0 <prio_recv_thread+0xc0>)
    ee8a:	480a      	ldr	r0, [pc, #40]	; (eeb4 <prio_recv_thread+0xc4>)
    ee8c:	f7f4 f894 	bl	2fb8 <printk>
    ee90:	f01a faee 	bl	29470 <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
    ee94:	4b03      	ldr	r3, [pc, #12]	; (eea4 <prio_recv_thread+0xb4>)
    ee96:	6018      	str	r0, [r3, #0]
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    ee98:	e7bd      	b.n	ee16 <prio_recv_thread+0x26>
    ee9a:	bf00      	nop
    ee9c:	2000d1f0 	.word	0x2000d1f0
    eea0:	2000d180 	.word	0x2000d180
    eea4:	20000bd8 	.word	0x20000bd8
    eea8:	200042a0 	.word	0x200042a0
    eeac:	2492492d 	.word	0x2492492d
    eeb0:	000317f0 	.word	0x000317f0
    eeb4:	00031558 	.word	0x00031558

0000eeb8 <hci_driver_open>:
{
    eeb8:	b530      	push	{r4, r5, lr}
    eeba:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    eebc:	4814      	ldr	r0, [pc, #80]	; (ef10 <hci_driver_open+0x58>)
    eebe:	f00a fb37 	bl	19530 <ll_init>
	if (err) {
    eec2:	4605      	mov	r5, r0
    eec4:	b110      	cbz	r0, eecc <hci_driver_open+0x14>
}
    eec6:	4628      	mov	r0, r5
    eec8:	b007      	add	sp, #28
    eeca:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
    eecc:	f7f6 fc66 	bl	579c <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    eed0:	2400      	movs	r4, #0
    eed2:	9405      	str	r4, [sp, #20]
    eed4:	9404      	str	r4, [sp, #16]
    eed6:	f06f 0309 	mvn.w	r3, #9
    eeda:	9303      	str	r3, [sp, #12]
    eedc:	9402      	str	r4, [sp, #8]
    eede:	9401      	str	r4, [sp, #4]
    eee0:	9400      	str	r4, [sp, #0]
    eee2:	4b0c      	ldr	r3, [pc, #48]	; (ef14 <hci_driver_open+0x5c>)
    eee4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    eee8:	490b      	ldr	r1, [pc, #44]	; (ef18 <hci_driver_open+0x60>)
    eeea:	480c      	ldr	r0, [pc, #48]	; (ef1c <hci_driver_open+0x64>)
    eeec:	f01a fce0 	bl	298b0 <_impl_k_thread_create>
    eef0:	9405      	str	r4, [sp, #20]
    eef2:	9404      	str	r4, [sp, #16]
    eef4:	f06f 0307 	mvn.w	r3, #7
    eef8:	9303      	str	r3, [sp, #12]
    eefa:	9402      	str	r4, [sp, #8]
    eefc:	9401      	str	r4, [sp, #4]
    eefe:	9400      	str	r4, [sp, #0]
    ef00:	4b07      	ldr	r3, [pc, #28]	; (ef20 <hci_driver_open+0x68>)
    ef02:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ef06:	4907      	ldr	r1, [pc, #28]	; (ef24 <hci_driver_open+0x6c>)
    ef08:	4807      	ldr	r0, [pc, #28]	; (ef28 <hci_driver_open+0x70>)
    ef0a:	f01a fcd1 	bl	298b0 <_impl_k_thread_create>
	return 0;
    ef0e:	e7da      	b.n	eec6 <hci_driver_open+0xe>
    ef10:	2000d180 	.word	0x2000d180
    ef14:	0000edf1 	.word	0x0000edf1
    ef18:	200042a0 	.word	0x200042a0
    ef1c:	20002bfc 	.word	0x20002bfc
    ef20:	0000ef2d 	.word	0x0000ef2d
    ef24:	20004460 	.word	0x20004460
    ef28:	20002ac8 	.word	0x20002ac8

0000ef2c <recv_thread>:
{
    ef2c:	b510      	push	{r4, lr}
    ef2e:	b086      	sub	sp, #24
    ef30:	e029      	b.n	ef86 <recv_thread+0x5a>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    ef32:	2801      	cmp	r0, #1
    ef34:	d042      	beq.n	efbc <recv_thread+0x90>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ef36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ef3a:	2001      	movs	r0, #1
    ef3c:	f7f7 fd6c 	bl	6a18 <bt_buf_get_rx>
    ef40:	4604      	mov	r4, r0
		if (buf) {
    ef42:	b11c      	cbz	r4, ef4c <recv_thread+0x20>
			hci_evt_encode(node_rx, buf);
    ef44:	4621      	mov	r1, r4
    ef46:	9805      	ldr	r0, [sp, #20]
    ef48:	f7ff fece 	bl	ece8 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    ef4c:	2100      	movs	r1, #0
    ef4e:	9b05      	ldr	r3, [sp, #20]
    ef50:	88d8      	ldrh	r0, [r3, #6]
    ef52:	f009 fd49 	bl	189e8 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    ef56:	a806      	add	r0, sp, #24
    ef58:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    ef5c:	2200      	movs	r2, #0
    ef5e:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
    ef60:	f009 fcbe 	bl	188e0 <radio_rx_mem_release>
		if (buf) {
    ef64:	b124      	cbz	r4, ef70 <recv_thread+0x44>
			if (buf->len) {
    ef66:	89a3      	ldrh	r3, [r4, #12]
    ef68:	b3ab      	cbz	r3, efd6 <recv_thread+0xaa>
				bt_recv(buf);
    ef6a:	4620      	mov	r0, r4
    ef6c:	f7f7 fb74 	bl	6658 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    ef70:	f01a f8c6 	bl	29100 <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    ef74:	f01a fa7c 	bl	29470 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    ef78:	4b29      	ldr	r3, [pc, #164]	; (f020 <recv_thread+0xf4>)
    ef7a:	681b      	ldr	r3, [r3, #0]
    ef7c:	1ac0      	subs	r0, r0, r3
    ef7e:	f241 3388 	movw	r3, #5000	; 0x1388
    ef82:	4298      	cmp	r0, r3
    ef84:	d82b      	bhi.n	efde <recv_thread+0xb2>
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    ef86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ef8a:	4826      	ldr	r0, [pc, #152]	; (f024 <recv_thread+0xf8>)
    ef8c:	f019 fea2 	bl	28cd4 <k_queue_get>
		if (node_rx && !buf) {
    ef90:	b1f8      	cbz	r0, efd2 <recv_thread+0xa6>
    ef92:	4604      	mov	r4, r0
	s8_t class = hci_get_class(node_rx);
    ef94:	f7ff fecc 	bl	ed30 <hci_get_class>
    ef98:	9405      	str	r4, [sp, #20]
	switch (class) {
    ef9a:	2800      	cmp	r0, #0
    ef9c:	db13      	blt.n	efc6 <recv_thread+0x9a>
    ef9e:	2802      	cmp	r0, #2
    efa0:	ddc7      	ble.n	ef32 <recv_thread+0x6>
    efa2:	2803      	cmp	r0, #3
    efa4:	d10f      	bne.n	efc6 <recv_thread+0x9a>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    efa6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    efaa:	2003      	movs	r0, #3
    efac:	f7f7 fd34 	bl	6a18 <bt_buf_get_rx>
    efb0:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    efb2:	4601      	mov	r1, r0
    efb4:	9805      	ldr	r0, [sp, #20]
    efb6:	f7ff fe6b 	bl	ec90 <hci_acl_encode>
    efba:	e7c7      	b.n	ef4c <recv_thread+0x20>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    efbc:	2100      	movs	r1, #0
    efbe:	f7f7 fd2b 	bl	6a18 <bt_buf_get_rx>
    efc2:	4604      	mov	r4, r0
    efc4:	e7bd      	b.n	ef42 <recv_thread+0x16>
		LL_ASSERT(0);
    efc6:	4040      	eors	r0, r0
    efc8:	f380 8811 	msr	BASEPRI, r0
    efcc:	f04f 0004 	mov.w	r0, #4
    efd0:	df02      	svc	2
		struct net_buf *buf = NULL;
    efd2:	2400      	movs	r4, #0
    efd4:	e7c6      	b.n	ef64 <recv_thread+0x38>
				net_buf_unref(buf);
    efd6:	4620      	mov	r0, r4
    efd8:	f00b fea0 	bl	1ad1c <net_buf_unref>
    efdc:	e7c8      	b.n	ef70 <recv_thread+0x44>
	for (i = 0; i < size; i++) {
    efde:	2200      	movs	r2, #0
	size_t unused = 0;
    efe0:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    efe2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    efe6:	d206      	bcs.n	eff6 <recv_thread+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
    efe8:	490f      	ldr	r1, [pc, #60]	; (f028 <recv_thread+0xfc>)
    efea:	5c89      	ldrb	r1, [r1, r2]
    efec:	29aa      	cmp	r1, #170	; 0xaa
    efee:	d102      	bne.n	eff6 <recv_thread+0xca>
			unused++;
    eff0:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    eff2:	3201      	adds	r2, #1
    eff4:	e7f5      	b.n	efe2 <recv_thread+0xb6>
	pcnt = ((size - unused) * 100) / size;
    eff6:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
    effa:	2264      	movs	r2, #100	; 0x64
    effc:	fb02 f201 	mul.w	r2, r2, r1
    f000:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    f002:	9202      	str	r2, [sp, #8]
    f004:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f008:	9201      	str	r2, [sp, #4]
    f00a:	9100      	str	r1, [sp, #0]
    f00c:	4907      	ldr	r1, [pc, #28]	; (f02c <recv_thread+0x100>)
    f00e:	4808      	ldr	r0, [pc, #32]	; (f030 <recv_thread+0x104>)
    f010:	f7f3 ffd2 	bl	2fb8 <printk>
    f014:	f01a fa2c 	bl	29470 <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
    f018:	4b01      	ldr	r3, [pc, #4]	; (f020 <recv_thread+0xf4>)
    f01a:	6018      	str	r0, [r3, #0]
    f01c:	e7b3      	b.n	ef86 <recv_thread+0x5a>
    f01e:	bf00      	nop
    f020:	20000bdc 	.word	0x20000bdc
    f024:	2000d1f0 	.word	0x2000d1f0
    f028:	20004460 	.word	0x20004460
    f02c:	00031808 	.word	0x00031808
    f030:	00031558 	.word	0x00031558

0000f034 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    f034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    f036:	2304      	movs	r3, #4
	while (callee_id--) {
    f038:	e01d      	b.n	f076 <mayfly_init+0x42>
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    f03a:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    f03e:	4911      	ldr	r1, [pc, #68]	; (f084 <mayfly_init+0x50>)
    f040:	0065      	lsls	r5, r4, #1
    f042:	192b      	adds	r3, r5, r4
    f044:	009a      	lsls	r2, r3, #2
    f046:	0073      	lsls	r3, r6, #1
    f048:	eb03 0e06 	add.w	lr, r3, r6
    f04c:	ea4f 170e 	mov.w	r7, lr, lsl #4
    f050:	46be      	mov	lr, r7
    f052:	443a      	add	r2, r7
    f054:	440a      	add	r2, r1
    f056:	4425      	add	r5, r4
    f058:	00af      	lsls	r7, r5, #2
    f05a:	4477      	add	r7, lr
    f05c:	3204      	adds	r2, #4
    f05e:	4439      	add	r1, r7
    f060:	4b09      	ldr	r3, [pc, #36]	; (f088 <mayfly_init+0x54>)
    f062:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    f066:	f000 f9f5 	bl	f454 <memq_init>
		while (caller_id--) {
    f06a:	4623      	mov	r3, r4
    f06c:	1e5c      	subs	r4, r3, #1
    f06e:	b2e4      	uxtb	r4, r4
    f070:	2b00      	cmp	r3, #0
    f072:	d1e2      	bne.n	f03a <mayfly_init+0x6>
	while (callee_id--) {
    f074:	4633      	mov	r3, r6
    f076:	1e5e      	subs	r6, r3, #1
    f078:	b2f6      	uxtb	r6, r6
    f07a:	b10b      	cbz	r3, f080 <mayfly_init+0x4c>
    f07c:	2304      	movs	r3, #4
    f07e:	e7f5      	b.n	f06c <mayfly_init+0x38>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    f080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f082:	bf00      	nop
    f084:	20000c60 	.word	0x20000c60
    f088:	20000be0 	.word	0x20000be0

0000f08c <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    f08c:	b570      	push	{r4, r5, r6, lr}
	if (enable) {
    f08e:	b1ea      	cbz	r2, f0cc <mayfly_enable+0x40>
    f090:	4615      	mov	r5, r2
		if (mft[callee_id][caller_id].enable_req ==
    f092:	0042      	lsls	r2, r0, #1
    f094:	4402      	add	r2, r0
    f096:	0093      	lsls	r3, r2, #2
    f098:	004c      	lsls	r4, r1, #1
    f09a:	440c      	add	r4, r1
    f09c:	0122      	lsls	r2, r4, #4
    f09e:	441a      	add	r2, r3
    f0a0:	4b18      	ldr	r3, [pc, #96]	; (f104 <mayfly_enable+0x78>)
    f0a2:	4413      	add	r3, r2
    f0a4:	7a1a      	ldrb	r2, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    f0a6:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req ==
    f0a8:	429a      	cmp	r2, r3
    f0aa:	d003      	beq.n	f0b4 <mayfly_enable+0x28>
			mft[callee_id][caller_id].enable_req++;
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    f0ac:	462a      	mov	r2, r5
    f0ae:	f00a f9e6 	bl	1947e <mayfly_enable_cb>
    f0b2:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].enable_req++;
    f0b4:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    f0b8:	00a3      	lsls	r3, r4, #2
    f0ba:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    f0be:	0134      	lsls	r4, r6, #4
    f0c0:	4423      	add	r3, r4
    f0c2:	4c10      	ldr	r4, [pc, #64]	; (f104 <mayfly_enable+0x78>)
    f0c4:	4423      	add	r3, r4
    f0c6:	3201      	adds	r2, #1
    f0c8:	721a      	strb	r2, [r3, #8]
    f0ca:	e7ef      	b.n	f0ac <mayfly_enable+0x20>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    f0cc:	0042      	lsls	r2, r0, #1
    f0ce:	4402      	add	r2, r0
    f0d0:	0093      	lsls	r3, r2, #2
    f0d2:	004c      	lsls	r4, r1, #1
    f0d4:	440c      	add	r4, r1
    f0d6:	0122      	lsls	r2, r4, #4
    f0d8:	441a      	add	r2, r3
    f0da:	4b0a      	ldr	r3, [pc, #40]	; (f104 <mayfly_enable+0x78>)
    f0dc:	4413      	add	r3, r2
    f0de:	7a9a      	ldrb	r2, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    f0e0:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req ==
    f0e2:	429a      	cmp	r2, r3
    f0e4:	d000      	beq.n	f0e8 <mayfly_enable+0x5c>
    f0e6:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].disable_req++;
    f0e8:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    f0ec:	00a3      	lsls	r3, r4, #2
    f0ee:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    f0f2:	012c      	lsls	r4, r5, #4
    f0f4:	4423      	add	r3, r4
    f0f6:	4c03      	ldr	r4, [pc, #12]	; (f104 <mayfly_enable+0x78>)
    f0f8:	4423      	add	r3, r4
    f0fa:	3201      	adds	r2, #1
    f0fc:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
    f0fe:	f00a f9f5 	bl	194ec <mayfly_pend>
		}
	}
}
    f102:	e7f0      	b.n	f0e6 <mayfly_enable+0x5a>
    f104:	20000c60 	.word	0x20000c60

0000f108 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    f108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f10a:	4605      	mov	r5, r0
    f10c:	460e      	mov	r6, r1
    f10e:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    f110:	b19a      	cbz	r2, f13a <mayfly_enqueue+0x32>
    f112:	2101      	movs	r1, #1
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f114:	b2c9      	uxtb	r1, r1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    f116:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    f118:	7823      	ldrb	r3, [r4, #0]
    f11a:	1a9b      	subs	r3, r3, r2
	if (state != 0) {
    f11c:	f013 0303 	ands.w	r3, r3, #3
    f120:	d032      	beq.n	f188 <mayfly_enqueue+0x80>
		if (chain) {
    f122:	b371      	cbz	r1, f182 <mayfly_enqueue+0x7a>
			if (state != 1) {
    f124:	2b01      	cmp	r3, #1
    f126:	d04c      	beq.n	f1c2 <mayfly_enqueue+0xba>
				/* mark as ready in queue */
				m->_req = ack + 1;
    f128:	3201      	adds	r2, #1
    f12a:	b2d2      	uxtb	r2, r2
    f12c:	7022      	strb	r2, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
    f12e:	4631      	mov	r1, r6
    f130:	4628      	mov	r0, r5
    f132:	f00a f9db 	bl	194ec <mayfly_pend>

				return 0;
    f136:	2000      	movs	r0, #0
    f138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f13a:	f00a f9c4 	bl	194c6 <mayfly_prio_is_equal>
    f13e:	b908      	cbnz	r0, f144 <mayfly_enqueue+0x3c>
		!mayfly_is_enabled(caller_id, callee_id) ||
    f140:	2101      	movs	r1, #1
    f142:	e7e7      	b.n	f114 <mayfly_enqueue+0xc>
    f144:	4631      	mov	r1, r6
    f146:	4628      	mov	r0, r5
    f148:	f00a f9ab 	bl	194a2 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f14c:	b1b8      	cbz	r0, f17e <mayfly_enqueue+0x76>
		(mft[callee_id][caller_id].disable_req !=
    f14e:	481e      	ldr	r0, [pc, #120]	; (f1c8 <mayfly_enqueue+0xc0>)
    f150:	0069      	lsls	r1, r5, #1
    f152:	194a      	adds	r2, r1, r5
    f154:	0093      	lsls	r3, r2, #2
    f156:	0072      	lsls	r2, r6, #1
    f158:	eb02 0e06 	add.w	lr, r2, r6
    f15c:	ea4f 170e 	mov.w	r7, lr, lsl #4
    f160:	46be      	mov	lr, r7
    f162:	443b      	add	r3, r7
    f164:	4403      	add	r3, r0
    f166:	7a9f      	ldrb	r7, [r3, #10]
		 mft[callee_id][caller_id].disable_ack);
    f168:	194b      	adds	r3, r1, r5
    f16a:	0099      	lsls	r1, r3, #2
    f16c:	4471      	add	r1, lr
    f16e:	4408      	add	r0, r1
    f170:	7ac3      	ldrb	r3, [r0, #11]
		!mayfly_is_enabled(caller_id, callee_id) ||
    f172:	429f      	cmp	r7, r3
    f174:	d001      	beq.n	f17a <mayfly_enqueue+0x72>
    f176:	2101      	movs	r1, #1
    f178:	e7cc      	b.n	f114 <mayfly_enqueue+0xc>
    f17a:	2100      	movs	r1, #0
    f17c:	e7ca      	b.n	f114 <mayfly_enqueue+0xc>
    f17e:	2101      	movs	r1, #1
    f180:	e7c8      	b.n	f114 <mayfly_enqueue+0xc>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    f182:	1c93      	adds	r3, r2, #2
    f184:	b2db      	uxtb	r3, r3
    f186:	7023      	strb	r3, [r4, #0]
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    f188:	b1b1      	cbz	r1, f1b8 <mayfly_enqueue+0xb0>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    f18a:	3201      	adds	r2, #1
    f18c:	b2d2      	uxtb	r2, r2
    f18e:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    f190:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    f194:	009a      	lsls	r2, r3, #2
    f196:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    f19a:	010b      	lsls	r3, r1, #4
    f19c:	441a      	add	r2, r3
    f19e:	4b0a      	ldr	r3, [pc, #40]	; (f1c8 <mayfly_enqueue+0xc0>)
    f1a0:	441a      	add	r2, r3
    f1a2:	3204      	adds	r2, #4
    f1a4:	6861      	ldr	r1, [r4, #4]
    f1a6:	4620      	mov	r0, r4
    f1a8:	f000 f957 	bl	f45a <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    f1ac:	4631      	mov	r1, r6
    f1ae:	4628      	mov	r0, r5
    f1b0:	f00a f99c 	bl	194ec <mayfly_pend>

	return 0;
    f1b4:	2000      	movs	r0, #0
    f1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		m->fp(m->param);
    f1b8:	68e3      	ldr	r3, [r4, #12]
    f1ba:	68a0      	ldr	r0, [r4, #8]
    f1bc:	4798      	blx	r3
		return 0;
    f1be:	2000      	movs	r0, #0
    f1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return 1;
    f1c2:	2001      	movs	r0, #1
}
    f1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f1c6:	bf00      	nop
    f1c8:	20000c60 	.word	0x20000c60

0000f1cc <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    f1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f1d0:	b085      	sub	sp, #20
    f1d2:	4682      	mov	sl, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    f1d4:	2304      	movs	r3, #4
	u8_t enable = 0;
    f1d6:	f04f 0b00 	mov.w	fp, #0
	u8_t disable = 0;
    f1da:	f8cd b004 	str.w	fp, [sp, #4]
	while (caller_id--) {
    f1de:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    f1e2:	fa5f f989 	uxtb.w	r9, r9
    f1e6:	2b00      	cmp	r3, #0
    f1e8:	f000 809b 	beq.w	f322 <mayfly_run+0x156>
		void *link;
		struct mayfly *m = 0;
    f1ec:	aa04      	add	r2, sp, #16
    f1ee:	2300      	movs	r3, #0
    f1f0:	f842 3d04 	str.w	r3, [r2, #-4]!

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    f1f4:	4657      	mov	r7, sl
    f1f6:	464e      	mov	r6, r9
    f1f8:	4850      	ldr	r0, [pc, #320]	; (f33c <mayfly_run+0x170>)
    f1fa:	ea4f 0149 	mov.w	r1, r9, lsl #1
    f1fe:	4449      	add	r1, r9
    f200:	008b      	lsls	r3, r1, #2
    f202:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f206:	4451      	add	r1, sl
    f208:	010c      	lsls	r4, r1, #4
    f20a:	4423      	add	r3, r4
    f20c:	18c4      	adds	r4, r0, r3
    f20e:	58c1      	ldr	r1, [r0, r3]
    f210:	6860      	ldr	r0, [r4, #4]
    f212:	f000 f929 	bl	f468 <memq_peek>
    f216:	4680      	mov	r8, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    f218:	e017      	b.n	f24a <mayfly_run+0x7e>
			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
			if (state == 1) {
				/* mark mayfly as ran */
				m->_ack--;
    f21a:	3a01      	subs	r2, #1
    f21c:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    f21e:	9b03      	ldr	r3, [sp, #12]
    f220:	68da      	ldr	r2, [r3, #12]
    f222:	6898      	ldr	r0, [r3, #8]
    f224:	4790      	blx	r2
    f226:	e01b      	b.n	f260 <mayfly_run+0x94>
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    f228:	4944      	ldr	r1, [pc, #272]	; (f33c <mayfly_run+0x170>)
    f22a:	0072      	lsls	r2, r6, #1
    f22c:	4432      	add	r2, r6
    f22e:	0093      	lsls	r3, r2, #2
    f230:	007a      	lsls	r2, r7, #1
    f232:	443a      	add	r2, r7
    f234:	0110      	lsls	r0, r2, #4
    f236:	4403      	add	r3, r0
    f238:	18c8      	adds	r0, r1, r3
    f23a:	aa03      	add	r2, sp, #12
    f23c:	58c9      	ldr	r1, [r1, r3]
    f23e:	6840      	ldr	r0, [r0, #4]
    f240:	f000 f912 	bl	f468 <memq_peek>
    f244:	4680      	mov	r8, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    f246:	2c01      	cmp	r4, #1
    f248:	d026      	beq.n	f298 <mayfly_run+0xcc>
		while (link) {
    f24a:	f1b8 0f00 	cmp.w	r8, #0
    f24e:	d030      	beq.n	f2b2 <mayfly_run+0xe6>
			req = m->_req;
    f250:	9b03      	ldr	r3, [sp, #12]
    f252:	781c      	ldrb	r4, [r3, #0]
			state = (req - m->_ack) & 0x03;
    f254:	785a      	ldrb	r2, [r3, #1]
    f256:	1aa4      	subs	r4, r4, r2
    f258:	f004 0403 	and.w	r4, r4, #3
			if (state == 1) {
    f25c:	2c01      	cmp	r4, #1
    f25e:	d0dc      	beq.n	f21a <mayfly_run+0x4e>
			req = m->_req;
    f260:	9b03      	ldr	r3, [sp, #12]
    f262:	781d      	ldrb	r5, [r3, #0]
    f264:	b2ed      	uxtb	r5, r5
			if (((req - m->_ack) & 0x03) != 1) {
    f266:	785b      	ldrb	r3, [r3, #1]
    f268:	1aeb      	subs	r3, r5, r3
    f26a:	f003 0303 	and.w	r3, r3, #3
    f26e:	2b01      	cmp	r3, #1
    f270:	d0da      	beq.n	f228 <mayfly_run+0x5c>
				memq_dequeue(mft[callee_id][caller_id].tail,
    f272:	0072      	lsls	r2, r6, #1
    f274:	4432      	add	r2, r6
    f276:	0093      	lsls	r3, r2, #2
    f278:	0079      	lsls	r1, r7, #1
    f27a:	4439      	add	r1, r7
    f27c:	010a      	lsls	r2, r1, #4
    f27e:	441a      	add	r2, r3
    f280:	4b2e      	ldr	r3, [pc, #184]	; (f33c <mayfly_run+0x170>)
    f282:	4413      	add	r3, r2
    f284:	2200      	movs	r2, #0
    f286:	4619      	mov	r1, r3
    f288:	6858      	ldr	r0, [r3, #4]
    f28a:	f000 f8f6 	bl	f47a <memq_dequeue>
				m->_link = link;
    f28e:	9b03      	ldr	r3, [sp, #12]
    f290:	f8c3 8004 	str.w	r8, [r3, #4]
				m->_ack = req;
    f294:	705d      	strb	r5, [r3, #1]
    f296:	e7c7      	b.n	f228 <mayfly_run+0x5c>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    f298:	f1b9 0f00 	cmp.w	r9, #0
    f29c:	d006      	beq.n	f2ac <mayfly_run+0xe0>
					mayfly_pend(callee_id, callee_id);
    f29e:	4651      	mov	r1, sl
    f2a0:	4650      	mov	r0, sl
    f2a2:	f00a f923 	bl	194ec <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
    f2a6:	b005      	add	sp, #20
    f2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (caller_id || link) {
    f2ac:	2800      	cmp	r0, #0
    f2ae:	d0cc      	beq.n	f24a <mayfly_run+0x7e>
    f2b0:	e7f5      	b.n	f29e <mayfly_run+0xd2>
		if (mft[callee_id][caller_id].disable_req !=
    f2b2:	ea4f 0249 	mov.w	r2, r9, lsl #1
    f2b6:	444a      	add	r2, r9
    f2b8:	0093      	lsls	r3, r2, #2
    f2ba:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f2be:	4451      	add	r1, sl
    f2c0:	010a      	lsls	r2, r1, #4
    f2c2:	441a      	add	r2, r3
    f2c4:	4b1d      	ldr	r3, [pc, #116]	; (f33c <mayfly_run+0x170>)
    f2c6:	4413      	add	r3, r2
    f2c8:	7a99      	ldrb	r1, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    f2ca:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req !=
    f2cc:	4299      	cmp	r1, r3
    f2ce:	d00b      	beq.n	f2e8 <mayfly_run+0x11c>
			mft[callee_id][caller_id].disable_ack =
    f2d0:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    f2d4:	0093      	lsls	r3, r2, #2
    f2d6:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    f2da:	0102      	lsls	r2, r0, #4
    f2dc:	4413      	add	r3, r2
    f2de:	4a17      	ldr	r2, [pc, #92]	; (f33c <mayfly_run+0x170>)
    f2e0:	4413      	add	r3, r2
    f2e2:	72d9      	strb	r1, [r3, #11]
			disable = 1;
    f2e4:	2301      	movs	r3, #1
    f2e6:	9301      	str	r3, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    f2e8:	ea4f 0249 	mov.w	r2, r9, lsl #1
    f2ec:	444a      	add	r2, r9
    f2ee:	0093      	lsls	r3, r2, #2
    f2f0:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f2f4:	4451      	add	r1, sl
    f2f6:	010a      	lsls	r2, r1, #4
    f2f8:	441a      	add	r2, r3
    f2fa:	4b10      	ldr	r3, [pc, #64]	; (f33c <mayfly_run+0x170>)
    f2fc:	4413      	add	r3, r2
    f2fe:	7a19      	ldrb	r1, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    f300:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req !=
    f302:	4299      	cmp	r1, r3
    f304:	d00b      	beq.n	f31e <mayfly_run+0x152>
			mft[callee_id][caller_id].enable_ack =
    f306:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    f30a:	0093      	lsls	r3, r2, #2
    f30c:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    f310:	0102      	lsls	r2, r0, #4
    f312:	4413      	add	r3, r2
    f314:	4a09      	ldr	r2, [pc, #36]	; (f33c <mayfly_run+0x170>)
    f316:	4413      	add	r3, r2
    f318:	7259      	strb	r1, [r3, #9]
			enable = 1;
    f31a:	f04f 0b01 	mov.w	fp, #1
	while (caller_id--) {
    f31e:	464b      	mov	r3, r9
    f320:	e75d      	b.n	f1de <mayfly_run+0x12>
	if (disable && !enable) {
    f322:	9b01      	ldr	r3, [sp, #4]
    f324:	2b00      	cmp	r3, #0
    f326:	d0be      	beq.n	f2a6 <mayfly_run+0xda>
    f328:	f1bb 0f00 	cmp.w	fp, #0
    f32c:	d1bb      	bne.n	f2a6 <mayfly_run+0xda>
		mayfly_enable_cb(callee_id, callee_id, 0);
    f32e:	2200      	movs	r2, #0
    f330:	4651      	mov	r1, sl
    f332:	4650      	mov	r0, sl
    f334:	f00a f8a3 	bl	1947e <mayfly_enable_cb>
    f338:	e7b5      	b.n	f2a6 <mayfly_run+0xda>
    f33a:	bf00      	nop
    f33c:	20000c60 	.word	0x20000c60

0000f340 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    f340:	b5f0      	push	{r4, r5, r6, r7, lr}
    f342:	b083      	sub	sp, #12
    f344:	4607      	mov	r7, r0
    f346:	4608      	mov	r0, r1
	*mem_head = mem_pool;
    f348:	601f      	str	r7, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    f34a:	1dfb      	adds	r3, r7, #7
    f34c:	f023 0303 	bic.w	r3, r3, #3
    f350:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    f352:	460e      	mov	r6, r1
    f354:	3a01      	subs	r2, #1
    f356:	b295      	uxth	r5, r2
    f358:	2204      	movs	r2, #4
    f35a:	2100      	movs	r1, #0
    f35c:	fb05 7000 	mla	r0, r5, r0, r7
    f360:	f01b fada 	bl	2a918 <memset>
	       sizeof(mem_pool));
	while (mem_count--) {
    f364:	e00b      	b.n	f37e <mem_init+0x3e>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    f366:	fb04 6306 	mla	r3, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    f36a:	443b      	add	r3, r7
    f36c:	a902      	add	r1, sp, #8
    f36e:	f841 3d04 	str.w	r3, [r1, #-4]!
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    f372:	2204      	movs	r2, #4
    f374:	fb04 7006 	mla	r0, r4, r6, r7
    f378:	f7f0 ffa2 	bl	2c0 <memcpy>
	while (mem_count--) {
    f37c:	4625      	mov	r5, r4
    f37e:	1e6c      	subs	r4, r5, #1
    f380:	b2a4      	uxth	r4, r4
    f382:	2d00      	cmp	r5, #0
    f384:	d1ef      	bne.n	f366 <mem_init+0x26>
		       (void *)&next, sizeof(next));
	}
}
    f386:	b003      	add	sp, #12
    f388:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f38a <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    f38a:	b570      	push	{r4, r5, r6, lr}
    f38c:	b082      	sub	sp, #8
	if (*mem_head) {
    f38e:	6805      	ldr	r5, [r0, #0]
    f390:	b1a5      	cbz	r5, f3bc <mem_acquire+0x32>
    f392:	4606      	mov	r6, r0
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    f394:	1deb      	adds	r3, r5, #7
    f396:	f023 0303 	bic.w	r3, r3, #3
    f39a:	881b      	ldrh	r3, [r3, #0]
					       sizeof(mem_head)));
		free_count--;
    f39c:	3b01      	subs	r3, #1
    f39e:	b29c      	uxth	r4, r3

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    f3a0:	2204      	movs	r2, #4
    f3a2:	4629      	mov	r1, r5
    f3a4:	eb0d 0002 	add.w	r0, sp, r2
    f3a8:	f7f0 ff8a 	bl	2c0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    f3ac:	9b01      	ldr	r3, [sp, #4]
    f3ae:	b11b      	cbz	r3, f3b8 <mem_acquire+0x2e>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    f3b0:	3307      	adds	r3, #7
    f3b2:	f023 0303 	bic.w	r3, r3, #3
    f3b6:	801c      	strh	r4, [r3, #0]
				free_count;
		}

		*mem_head = head;
    f3b8:	9b01      	ldr	r3, [sp, #4]
    f3ba:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    f3bc:	4628      	mov	r0, r5
    f3be:	b002      	add	sp, #8
    f3c0:	bd70      	pop	{r4, r5, r6, pc}

0000f3c2 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    f3c2:	b570      	push	{r4, r5, r6, lr}
    f3c4:	4606      	mov	r6, r0
    f3c6:	460d      	mov	r5, r1
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    f3c8:	680b      	ldr	r3, [r1, #0]
    f3ca:	b183      	cbz	r3, f3ee <mem_release+0x2c>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    f3cc:	3307      	adds	r3, #7
    f3ce:	f023 0303 	bic.w	r3, r3, #3
    f3d2:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;
    f3d4:	3401      	adds	r4, #1
    f3d6:	b2a4      	uxth	r4, r4

	memcpy(mem, mem_head, sizeof(mem));
    f3d8:	2204      	movs	r2, #4
    f3da:	4629      	mov	r1, r5
    f3dc:	4630      	mov	r0, r6
    f3de:	f7f0 ff6f 	bl	2c0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    f3e2:	1df3      	adds	r3, r6, #7
    f3e4:	f023 0303 	bic.w	r3, r3, #3
    f3e8:	801c      	strh	r4, [r3, #0]

	*mem_head = mem;
    f3ea:	602e      	str	r6, [r5, #0]
    f3ec:	bd70      	pop	{r4, r5, r6, pc}
	u16_t free_count = 0;
    f3ee:	2400      	movs	r4, #0
    f3f0:	e7f0      	b.n	f3d4 <mem_release+0x12>

0000f3f2 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    f3f2:	4603      	mov	r3, r0
    f3f4:	b120      	cbz	r0, f400 <mem_free_count_get+0xe>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    f3f6:	3307      	adds	r3, #7
    f3f8:	f023 0303 	bic.w	r3, r3, #3
    f3fc:	8818      	ldrh	r0, [r3, #0]
    f3fe:	4770      	bx	lr
	u16_t free_count = 0;
    f400:	2000      	movs	r0, #0
					       sizeof(mem_head)));
	}

	return free_count;
}
    f402:	4770      	bx	lr

0000f404 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    f404:	fb02 0001 	mla	r0, r2, r1, r0
    f408:	4770      	bx	lr

0000f40a <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    f40a:	1a40      	subs	r0, r0, r1
    f40c:	b280      	uxth	r0, r0
}
    f40e:	fbb0 f0f2 	udiv	r0, r0, r2
    f412:	4770      	bx	lr

0000f414 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    f414:	4411      	add	r1, r2
	while (len--) {
    f416:	e004      	b.n	f422 <mem_rcopy+0xe>
		*dst++ = *--src;
    f418:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    f41c:	7002      	strb	r2, [r0, #0]
	while (len--) {
    f41e:	461a      	mov	r2, r3
		*dst++ = *--src;
    f420:	3001      	adds	r0, #1
	while (len--) {
    f422:	1e53      	subs	r3, r2, #1
    f424:	b29b      	uxth	r3, r3
    f426:	2a00      	cmp	r2, #0
    f428:	d1f6      	bne.n	f418 <mem_rcopy+0x4>
	}
}
    f42a:	4770      	bx	lr

0000f42c <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
    f42c:	1e4b      	subs	r3, r1, #1
    f42e:	b29b      	uxth	r3, r3
    f430:	b171      	cbz	r1, f450 <mem_nz+0x24>
{
    f432:	b410      	push	{r4}
		if (*src++) {
    f434:	1c44      	adds	r4, r0, #1
    f436:	7802      	ldrb	r2, [r0, #0]
	while (len--) {
    f438:	4619      	mov	r1, r3
		if (*src++) {
    f43a:	b93a      	cbnz	r2, f44c <mem_nz+0x20>
    f43c:	4620      	mov	r0, r4
	while (len--) {
    f43e:	3b01      	subs	r3, #1
    f440:	b29b      	uxth	r3, r3
    f442:	2900      	cmp	r1, #0
    f444:	d1f6      	bne.n	f434 <mem_nz+0x8>
			return 1;
		}
	}

	return 0;
    f446:	2000      	movs	r0, #0
}
    f448:	bc10      	pop	{r4}
    f44a:	4770      	bx	lr
			return 1;
    f44c:	2001      	movs	r0, #1
    f44e:	e7fb      	b.n	f448 <mem_nz+0x1c>
	return 0;
    f450:	2000      	movs	r0, #0
}
    f452:	4770      	bx	lr

0000f454 <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    f454:	6010      	str	r0, [r2, #0]
    f456:	6008      	str	r0, [r1, #0]

	return link;
}
    f458:	4770      	bx	lr

0000f45a <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    f45a:	6813      	ldr	r3, [r2, #0]
    f45c:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    f45e:	6813      	ldr	r3, [r2, #0]
    f460:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;
    f462:	6011      	str	r1, [r2, #0]

	return link;
}
    f464:	4608      	mov	r0, r1
    f466:	4770      	bx	lr

0000f468 <memq_peek>:
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    f468:	4281      	cmp	r1, r0
    f46a:	d004      	beq.n	f476 <memq_peek+0xe>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    f46c:	b10a      	cbz	r2, f472 <memq_peek+0xa>
		*mem = *((void **)link + 1);
    f46e:	684b      	ldr	r3, [r1, #4]
    f470:	6013      	str	r3, [r2, #0]
	}

	return link;
}
    f472:	4608      	mov	r0, r1
    f474:	4770      	bx	lr
		return 0;
    f476:	2100      	movs	r1, #0
    f478:	e7fb      	b.n	f472 <memq_peek+0xa>

0000f47a <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    f47a:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    f47c:	4283      	cmp	r3, r0
    f47e:	d006      	beq.n	f48e <memq_dequeue+0x14>
	if (mem) {
    f480:	b10a      	cbz	r2, f486 <memq_dequeue+0xc>
		*mem = *((void **)link + 1);
    f482:	6858      	ldr	r0, [r3, #4]
    f484:	6010      	str	r0, [r2, #0]

	/* increment the head to next link node */
	*head = *((void **)link);
    f486:	681a      	ldr	r2, [r3, #0]
    f488:	600a      	str	r2, [r1, #0]

	return link;
}
    f48a:	4618      	mov	r0, r3
    f48c:	4770      	bx	lr
		return 0;
    f48e:	2300      	movs	r3, #0
    f490:	e7f9      	b.n	f486 <memq_dequeue+0xc>

0000f492 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    f492:	b410      	push	{r4}
	u8_t one_count = 0;
    f494:	2200      	movs	r2, #0

	while (octets_len--) {
    f496:	e008      	b.n	f4aa <util_ones_count_get+0x18>
		u8_t bite;

		bite = *octets;
		while (bite) {
			bite &= (bite - 1);
    f498:	1e59      	subs	r1, r3, #1
    f49a:	b249      	sxtb	r1, r1
    f49c:	400b      	ands	r3, r1
			one_count++;
    f49e:	3201      	adds	r2, #1
    f4a0:	b2d2      	uxtb	r2, r2
		while (bite) {
    f4a2:	2b00      	cmp	r3, #0
    f4a4:	d1f8      	bne.n	f498 <util_ones_count_get+0x6>
		}
		octets++;
    f4a6:	3001      	adds	r0, #1
	while (octets_len--) {
    f4a8:	4621      	mov	r1, r4
    f4aa:	1e4b      	subs	r3, r1, #1
    f4ac:	b2dc      	uxtb	r4, r3
    f4ae:	b109      	cbz	r1, f4b4 <util_ones_count_get+0x22>
		bite = *octets;
    f4b0:	7803      	ldrb	r3, [r0, #0]
		while (bite) {
    f4b2:	e7f6      	b.n	f4a2 <util_ones_count_get+0x10>
	}

	return one_count;
}
    f4b4:	4610      	mov	r0, r2
    f4b6:	bc10      	pop	{r4}
    f4b8:	4770      	bx	lr
	...

0000f4bc <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    f4bc:	4b05      	ldr	r3, [pc, #20]	; (f4d4 <cntr_init+0x18>)
    f4be:	2200      	movs	r2, #0
    f4c0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    f4c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    f4c8:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    f4cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    f4d0:	4770      	bx	lr
    f4d2:	bf00      	nop
    f4d4:	4000b000 	.word	0x4000b000

0000f4d8 <cntr_start>:
			     RTC_INTENSET_COMPARE1_Msk);
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    f4d8:	4a05      	ldr	r2, [pc, #20]	; (f4f0 <cntr_start+0x18>)
    f4da:	7813      	ldrb	r3, [r2, #0]
    f4dc:	1c59      	adds	r1, r3, #1
    f4de:	7011      	strb	r1, [r2, #0]
    f4e0:	b923      	cbnz	r3, f4ec <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    f4e2:	2201      	movs	r2, #1
    f4e4:	4b03      	ldr	r3, [pc, #12]	; (f4f4 <cntr_start+0x1c>)
    f4e6:	601a      	str	r2, [r3, #0]

	return 0;
    f4e8:	2000      	movs	r0, #0
    f4ea:	4770      	bx	lr
		return 1;
    f4ec:	2001      	movs	r0, #1
}
    f4ee:	4770      	bx	lr
    f4f0:	20000d20 	.word	0x20000d20
    f4f4:	4000b000 	.word	0x4000b000

0000f4f8 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    f4f8:	4b0a      	ldr	r3, [pc, #40]	; (f524 <cntr_stop+0x2c>)
    f4fa:	781b      	ldrb	r3, [r3, #0]
    f4fc:	b14b      	cbz	r3, f512 <cntr_stop+0x1a>

	if (--_refcount) {
    f4fe:	3b01      	subs	r3, #1
    f500:	b2db      	uxtb	r3, r3
    f502:	4a08      	ldr	r2, [pc, #32]	; (f524 <cntr_stop+0x2c>)
    f504:	7013      	strb	r3, [r2, #0]
    f506:	b953      	cbnz	r3, f51e <cntr_stop+0x26>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    f508:	2201      	movs	r2, #1
    f50a:	4b07      	ldr	r3, [pc, #28]	; (f528 <cntr_stop+0x30>)
    f50c:	605a      	str	r2, [r3, #4]

	return 0;
    f50e:	2000      	movs	r0, #0
    f510:	4770      	bx	lr
	LL_ASSERT(_refcount);
    f512:	4040      	eors	r0, r0
    f514:	f380 8811 	msr	BASEPRI, r0
    f518:	f04f 0004 	mov.w	r0, #4
    f51c:	df02      	svc	2
		return 1;
    f51e:	2001      	movs	r0, #1
}
    f520:	4770      	bx	lr
    f522:	bf00      	nop
    f524:	20000d20 	.word	0x20000d20
    f528:	4000b000 	.word	0x4000b000

0000f52c <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    f52c:	4b01      	ldr	r3, [pc, #4]	; (f534 <cntr_cnt_get+0x8>)
    f52e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    f532:	4770      	bx	lr
    f534:	4000b000 	.word	0x4000b000

0000f538 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    f538:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    f53c:	4b01      	ldr	r3, [pc, #4]	; (f544 <cntr_cmp_set+0xc>)
    f53e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    f542:	4770      	bx	lr
    f544:	4000b000 	.word	0x4000b000

0000f548 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    f548:	e009      	b.n	f55e <do_ecb+0x16>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    f54a:	4b15      	ldr	r3, [pc, #84]	; (f5a0 <do_ecb+0x58>)
    f54c:	2201      	movs	r2, #1
    f54e:	605a      	str	r2, [r3, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    f550:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    f554:	b91b      	cbnz	r3, f55e <do_ecb+0x16>
    f556:	4b12      	ldr	r3, [pc, #72]	; (f5a0 <do_ecb+0x58>)
    f558:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    f55c:	b9d3      	cbnz	r3, f594 <do_ecb+0x4c>
		NRF_ECB->TASKS_STOPECB = 1;
    f55e:	4b10      	ldr	r3, [pc, #64]	; (f5a0 <do_ecb+0x58>)
    f560:	2201      	movs	r2, #1
    f562:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    f564:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    f568:	2100      	movs	r1, #0
    f56a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    f56e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    f572:	601a      	str	r2, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    f574:	4b0a      	ldr	r3, [pc, #40]	; (f5a0 <do_ecb+0x58>)
    f576:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    f57a:	2b00      	cmp	r3, #0
    f57c:	d1e5      	bne.n	f54a <do_ecb+0x2>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    f57e:	4b08      	ldr	r3, [pc, #32]	; (f5a0 <do_ecb+0x58>)
    f580:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    f584:	2b00      	cmp	r3, #0
    f586:	d1e0      	bne.n	f54a <do_ecb+0x2>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    f588:	4b05      	ldr	r3, [pc, #20]	; (f5a0 <do_ecb+0x58>)
    f58a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    f58e:	2b00      	cmp	r3, #0
    f590:	d1f0      	bne.n	f574 <do_ecb+0x2c>
    f592:	e7da      	b.n	f54a <do_ecb+0x2>

	NRF_ECB->ECBDATAPTR = 0;
    f594:	2200      	movs	r2, #0
    f596:	4b02      	ldr	r3, [pc, #8]	; (f5a0 <do_ecb+0x58>)
    f598:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f59c:	4770      	bx	lr
    f59e:	bf00      	nop
    f5a0:	4000e000 	.word	0x4000e000

0000f5a4 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    f5a4:	b570      	push	{r4, r5, r6, lr}
    f5a6:	b08c      	sub	sp, #48	; 0x30
    f5a8:	460e      	mov	r6, r1
    f5aa:	4615      	mov	r5, r2
    f5ac:	461c      	mov	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    f5ae:	2210      	movs	r2, #16
    f5b0:	4601      	mov	r1, r0
    f5b2:	4668      	mov	r0, sp
    f5b4:	f7ff ff2e 	bl	f414 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    f5b8:	2210      	movs	r2, #16
    f5ba:	4631      	mov	r1, r6
    f5bc:	eb0d 0002 	add.w	r0, sp, r2
    f5c0:	f7ff ff28 	bl	f414 <mem_rcopy>

	do_ecb(&ecb);
    f5c4:	4668      	mov	r0, sp
    f5c6:	f7ff ffbf 	bl	f548 <do_ecb>

	if (cipher_text_le) {
    f5ca:	b125      	cbz	r5, f5d6 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    f5cc:	2210      	movs	r2, #16
    f5ce:	a908      	add	r1, sp, #32
    f5d0:	4628      	mov	r0, r5
    f5d2:	f7ff ff1f 	bl	f414 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    f5d6:	b124      	cbz	r4, f5e2 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    f5d8:	2210      	movs	r2, #16
    f5da:	a908      	add	r1, sp, #32
    f5dc:	4620      	mov	r0, r4
    f5de:	f7f0 fe6f 	bl	2c0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    f5e2:	b00c      	add	sp, #48	; 0x30
    f5e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0000f5e8 <isr_radio>:
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
    f5e8:	b508      	push	{r3, lr}
	if (sfp_radio_isr) {
    f5ea:	4b02      	ldr	r3, [pc, #8]	; (f5f4 <isr_radio+0xc>)
    f5ec:	681b      	ldr	r3, [r3, #0]
    f5ee:	b103      	cbz	r3, f5f2 <isr_radio+0xa>
		sfp_radio_isr();
    f5f0:	4798      	blx	r3
    f5f2:	bd08      	pop	{r3, pc}
    f5f4:	20000f40 	.word	0x20000f40

0000f5f8 <radio_isr_set>:
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    f5f8:	b508      	push	{r3, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    f5fa:	4b07      	ldr	r3, [pc, #28]	; (f618 <radio_isr_set+0x20>)
    f5fc:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    f5fe:	2210      	movs	r2, #16
    f600:	4b06      	ldr	r3, [pc, #24]	; (f61c <radio_isr_set+0x24>)
    f602:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    f606:	2202      	movs	r2, #2
    f608:	4b05      	ldr	r3, [pc, #20]	; (f620 <radio_isr_set+0x28>)
    f60a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    f60e:	2001      	movs	r0, #1
    f610:	f018 fa3a 	bl	27a88 <_arch_irq_enable>
    f614:	bd08      	pop	{r3, pc}
    f616:	bf00      	nop
    f618:	20000f40 	.word	0x20000f40
    f61c:	40001000 	.word	0x40001000
    f620:	e000e100 	.word	0xe000e100

0000f624 <radio_setup>:
			u32_t volatile PDM;
			u32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    f624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f62c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    f630:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    f634:	2100      	movs	r1, #0
    f636:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    f63a:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    f63e:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    f642:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    f646:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    f64a:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    f64e:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    f652:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    f656:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    f65a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    f65e:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    f662:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    f666:	4770      	bx	lr

0000f668 <radio_reset>:
#endif /* CONFIG_SOC_SERIES_NRF52X */
}

void radio_reset(void)
{
    f668:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    f66a:	2001      	movs	r0, #1
    f66c:	f018 fa1a 	bl	27aa4 <_arch_irq_disable>

	NRF_RADIO->POWER =
    f670:	4b03      	ldr	r3, [pc, #12]	; (f680 <radio_reset+0x18>)
    f672:	2200      	movs	r2, #0
    f674:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    f678:	2201      	movs	r2, #1
    f67a:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    f67e:	bd08      	pop	{r3, pc}
    f680:	40001000 	.word	0x40001000

0000f684 <radio_phy_set>:

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    f684:	2802      	cmp	r0, #2
    f686:	d106      	bne.n	f696 <radio_phy_set+0x12>
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
		break;

#elif defined(CONFIG_SOC_SERIES_NRF52X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
    f688:	2304      	movs	r3, #4
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    f68a:	f003 030f 	and.w	r3, r3, #15
    f68e:	4a03      	ldr	r2, [pc, #12]	; (f69c <radio_phy_set+0x18>)
    f690:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    f694:	4770      	bx	lr
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    f696:	2303      	movs	r3, #3
    f698:	e7f7      	b.n	f68a <radio_phy_set+0x6>
    f69a:	bf00      	nop
    f69c:	40001000 	.word	0x40001000

0000f6a0 <radio_tx_power_set>:
}

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    f6a0:	4b01      	ldr	r3, [pc, #4]	; (f6a8 <radio_tx_power_set+0x8>)
    f6a2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    f6a6:	4770      	bx	lr
    f6a8:	40001000 	.word	0x40001000

0000f6ac <radio_freq_chan_set>:
}

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    f6ac:	4b01      	ldr	r3, [pc, #4]	; (f6b4 <radio_freq_chan_set+0x8>)
    f6ae:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    f6b2:	4770      	bx	lr
    f6b4:	40001000 	.word	0x40001000

0000f6b8 <radio_whiten_iv_set>:
}

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    f6b8:	4b07      	ldr	r3, [pc, #28]	; (f6d8 <radio_whiten_iv_set+0x20>)
    f6ba:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    f6be:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    f6c2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    f6c6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    f6ca:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    f6ce:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    f6d2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    f6d6:	4770      	bx	lr
    f6d8:	40001000 	.word	0x40001000

0000f6dc <radio_aa_set>:
			    RADIO_PCNF1_WHITEEN_Msk;
}

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    f6dc:	4a0a      	ldr	r2, [pc, #40]	; (f708 <radio_aa_set+0x2c>)
    f6de:	2300      	movs	r3, #0
    f6e0:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    f6e4:	2301      	movs	r3, #1
    f6e6:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    f6ea:	78c3      	ldrb	r3, [r0, #3]
    f6ec:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    f6f0:	7881      	ldrb	r1, [r0, #2]
    f6f2:	7843      	ldrb	r3, [r0, #1]
    f6f4:	041b      	lsls	r3, r3, #16
    f6f6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    f6fa:	7801      	ldrb	r1, [r0, #0]
    f6fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    f700:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    f704:	4770      	bx	lr
    f706:	bf00      	nop
    f708:	40001000 	.word	0x40001000

0000f70c <radio_pkt_configure>:
}

void radio_pkt_configure(u8_t bits_len, u8_t max_len, u8_t flags)
{
    f70c:	b410      	push	{r4}
	u8_t dc = flags & 0x01; /* Adv or Data channel */
    f70e:	f002 0401 	and.w	r4, r2, #1
		bits_len = 5;
	}
#elif defined(CONFIG_SOC_SERIES_NRF52X)
	extra = 0;

	phy = (flags >> 1) & 0x07; /* phy */
    f712:	f3c2 0242 	ubfx	r2, r2, #1, #3
	switch (phy) {
    f716:	2a02      	cmp	r2, #2
    f718:	d020      	beq.n	f75c <radio_pkt_configure+0x50>
	case BIT(0):
	default:
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    f71a:	2300      	movs	r3, #0
	}

	/* To use same Data Channel PDU structure with nRF5 specific overhead
	 * byte, include the S1 field in radio packet configuration.
	 */
	if (dc) {
    f71c:	b10c      	cbz	r4, f722 <radio_pkt_configure+0x16>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    f71e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    f722:	f000 020f 	and.w	r2, r0, #15
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    f726:	f1c0 0008 	rsb	r0, r0, #8
    f72a:	0400      	lsls	r0, r0, #16
    f72c:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
			    RADIO_PCNF0_LFLEN_Msk) |
    f730:	4310      	orrs	r0, r2
			    RADIO_PCNF0_S1LEN_Msk) |
    f732:	4303      	orrs	r3, r0
    f734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    f738:	4a0a      	ldr	r2, [pc, #40]	; (f764 <radio_pkt_configure+0x58>)
    f73a:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   extra;

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    f73e:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    f742:	4b09      	ldr	r3, [pc, #36]	; (f768 <radio_pkt_configure+0x5c>)
    f744:	4003      	ands	r3, r0
    f746:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    f74a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    f74e:	4319      	orrs	r1, r3
    f750:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
    f754:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
			    (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			     RADIO_PCNF1_BALEN_Msk) |
			    (((RADIO_PCNF1_ENDIAN_Little) <<
			      RADIO_PCNF1_ENDIAN_Pos) &
			     RADIO_PCNF1_ENDIAN_Msk);
}
    f758:	bc10      	pop	{r4}
    f75a:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
    f75c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    f760:	e7dc      	b.n	f71c <radio_pkt_configure+0x10>
    f762:	bf00      	nop
    f764:	40001000 	.word	0x40001000
    f768:	fef80000 	.word	0xfef80000

0000f76c <radio_pkt_rx_set>:

void radio_pkt_rx_set(void *rx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
    f76c:	4b01      	ldr	r3, [pc, #4]	; (f774 <radio_pkt_rx_set+0x8>)
    f76e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    f772:	4770      	bx	lr
    f774:	40001000 	.word	0x40001000

0000f778 <radio_pkt_tx_set>:
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    f778:	4b01      	ldr	r3, [pc, #4]	; (f780 <radio_pkt_tx_set+0x8>)
    f77a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    f77e:	4770      	bx	lr
    f780:	40001000 	.word	0x40001000

0000f784 <radio_tx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f784:	208c      	movs	r0, #140	; 0x8c
    f786:	4770      	bx	lr

0000f788 <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f788:	2001      	movs	r0, #1
    f78a:	4770      	bx	lr

0000f78c <radio_rx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f78c:	208c      	movs	r0, #140	; 0x8c
    f78e:	4770      	bx	lr

0000f790 <radio_rx_chain_delay_get>:
		} else {
			return 20; /* ciel(19.6) */
		}
	}
#else /* !CONFIG_SOC_NRF52840 */
	switch (phy) {
    f790:	2802      	cmp	r0, #2
    f792:	d101      	bne.n	f798 <radio_rx_chain_delay_get+0x8>
	default:
	case BIT(0):
		return 10; /* ceil(9.4) */
	case BIT(1):
		return 5; /* ceil(5) */
    f794:	2005      	movs	r0, #5
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f796:	4770      	bx	lr
		return 10; /* ceil(9.4) */
    f798:	200a      	movs	r0, #10
    f79a:	4770      	bx	lr

0000f79c <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    f79c:	2201      	movs	r2, #1
    f79e:	4b01      	ldr	r3, [pc, #4]	; (f7a4 <radio_rx_enable+0x8>)
    f7a0:	605a      	str	r2, [r3, #4]
    f7a2:	4770      	bx	lr
    f7a4:	40001000 	.word	0x40001000

0000f7a8 <radio_tx_enable>:
}

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    f7a8:	2201      	movs	r2, #1
    f7aa:	4b01      	ldr	r3, [pc, #4]	; (f7b0 <radio_tx_enable+0x8>)
    f7ac:	601a      	str	r2, [r3, #0]
    f7ae:	4770      	bx	lr
    f7b0:	40001000 	.word	0x40001000

0000f7b4 <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH9_Msk | PPI_CHEN_CH12_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    f7b4:	4b03      	ldr	r3, [pc, #12]	; (f7c4 <radio_disable+0x10>)
    f7b6:	2200      	movs	r2, #0
    f7b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    f7bc:	2201      	movs	r2, #1
    f7be:	611a      	str	r2, [r3, #16]
    f7c0:	4770      	bx	lr
    f7c2:	bf00      	nop
    f7c4:	40001000 	.word	0x40001000

0000f7c8 <radio_status_reset>:
}

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    f7c8:	4b06      	ldr	r3, [pc, #24]	; (f7e4 <radio_status_reset+0x1c>)
    f7ca:	2200      	movs	r2, #0
    f7cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_ADDRESS = 0;
    f7d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    f7d4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NRF_RADIO->EVENTS_END = 0;
    f7d8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    f7dc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    f7e0:	4770      	bx	lr
    f7e2:	bf00      	nop
    f7e4:	40001000 	.word	0x40001000

0000f7e8 <radio_is_ready>:
}

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    f7e8:	4b03      	ldr	r3, [pc, #12]	; (f7f8 <radio_is_ready+0x10>)
    f7ea:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    f7ee:	3000      	adds	r0, #0
    f7f0:	bf18      	it	ne
    f7f2:	2001      	movne	r0, #1
    f7f4:	4770      	bx	lr
    f7f6:	bf00      	nop
    f7f8:	40001000 	.word	0x40001000

0000f7fc <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    f7fc:	4b03      	ldr	r3, [pc, #12]	; (f80c <radio_is_done+0x10>)
    f7fe:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    f802:	3000      	adds	r0, #0
    f804:	bf18      	it	ne
    f806:	2001      	movne	r0, #1
    f808:	4770      	bx	lr
    f80a:	bf00      	nop
    f80c:	40001000 	.word	0x40001000

0000f810 <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    f810:	4b03      	ldr	r3, [pc, #12]	; (f820 <radio_is_idle+0x10>)
    f812:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    f816:	fab0 f080 	clz	r0, r0
    f81a:	0940      	lsrs	r0, r0, #5
    f81c:	4770      	bx	lr
    f81e:	bf00      	nop
    f820:	40001000 	.word	0x40001000

0000f824 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
	NRF_RADIO->CRCCNF =
    f824:	4b04      	ldr	r3, [pc, #16]	; (f838 <radio_crc_configure+0x14>)
    f826:	f240 1203 	movw	r2, #259	; 0x103
    f82a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    f82e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    f832:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    f836:	4770      	bx	lr
    f838:	40001000 	.word	0x40001000

0000f83c <radio_crc_is_valid>:
}

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    f83c:	4b03      	ldr	r3, [pc, #12]	; (f84c <radio_crc_is_valid+0x10>)
    f83e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    f842:	3000      	adds	r0, #0
    f844:	bf18      	it	ne
    f846:	2001      	movne	r0, #1
    f848:	4770      	bx	lr
    f84a:	bf00      	nop
    f84c:	40001000 	.word	0x40001000

0000f850 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    f850:	4800      	ldr	r0, [pc, #0]	; (f854 <radio_pkt_empty_get+0x4>)
    f852:	4770      	bx	lr
    f854:	20000e34 	.word	0x20000e34

0000f858 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    f858:	4800      	ldr	r0, [pc, #0]	; (f85c <radio_pkt_scratch_get+0x4>)
    f85a:	4770      	bx	lr
    f85c:	20000e38 	.word	0x20000e38

0000f860 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy_rx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    f860:	220b      	movs	r2, #11
    f862:	4b02      	ldr	r3, [pc, #8]	; (f86c <radio_switch_complete_and_rx+0xc>)
    f864:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f868:	4770      	bx	lr
    f86a:	bf00      	nop
    f86c:	40001000 	.word	0x40001000

0000f870 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy_rx, u8_t flags_rx, u8_t phy_tx,
				  u8_t flags_tx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    f870:	2207      	movs	r2, #7
    f872:	4b02      	ldr	r3, [pc, #8]	; (f87c <radio_switch_complete_and_tx+0xc>)
    f874:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f878:	4770      	bx	lr
    f87a:	bf00      	nop
    f87c:	40001000 	.word	0x40001000

0000f880 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    f880:	2203      	movs	r2, #3
    f882:	4b02      	ldr	r3, [pc, #8]	; (f88c <radio_switch_complete_and_disable+0xc>)
    f884:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f888:	4770      	bx	lr
    f88a:	bf00      	nop
    f88c:	40001000 	.word	0x40001000

0000f890 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    f890:	4a03      	ldr	r2, [pc, #12]	; (f8a0 <radio_rssi_measure+0x10>)
    f892:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    f896:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    f89a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    f89e:	4770      	bx	lr
    f8a0:	40001000 	.word	0x40001000

0000f8a4 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    f8a4:	4b01      	ldr	r3, [pc, #4]	; (f8ac <radio_rssi_get+0x8>)
    f8a6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    f8aa:	4770      	bx	lr
    f8ac:	40001000 	.word	0x40001000

0000f8b0 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    f8b0:	2200      	movs	r2, #0
    f8b2:	4b02      	ldr	r3, [pc, #8]	; (f8bc <radio_rssi_status_reset+0xc>)
    f8b4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    f8b8:	4770      	bx	lr
    f8ba:	bf00      	nop
    f8bc:	40001000 	.word	0x40001000

0000f8c0 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    f8c0:	4b03      	ldr	r3, [pc, #12]	; (f8d0 <radio_rssi_is_ready+0x10>)
    f8c2:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    f8c6:	3000      	adds	r0, #0
    f8c8:	bf18      	it	ne
    f8ca:	2001      	movne	r0, #1
    f8cc:	4770      	bx	lr
    f8ce:	bf00      	nop
    f8d0:	40001000 	.word	0x40001000

0000f8d4 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    f8d4:	b470      	push	{r4, r5, r6}
	u8_t index;

	for (index = 0; index < 8; index++) {
    f8d6:	2400      	movs	r4, #0
    f8d8:	e019      	b.n	f90e <radio_filter_configure+0x3a>
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f8da:	78d5      	ldrb	r5, [r2, #3]
			((u32_t)bdaddr[2] << 16) |
    f8dc:	7893      	ldrb	r3, [r2, #2]
    f8de:	041b      	lsls	r3, r3, #16
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f8e0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
			((u32_t)bdaddr[1] << 8) |
    f8e4:	7855      	ldrb	r5, [r2, #1]
			((u32_t)bdaddr[2] << 16) |
    f8e6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
			bdaddr[0];
    f8ea:	7815      	ldrb	r5, [r2, #0]
			((u32_t)bdaddr[1] << 8) |
    f8ec:	432b      	orrs	r3, r5
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f8ee:	4d0c      	ldr	r5, [pc, #48]	; (f920 <radio_filter_configure+0x4c>)
    f8f0:	f504 76c0 	add.w	r6, r4, #384	; 0x180
    f8f4:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    f8f8:	7956      	ldrb	r6, [r2, #5]
    f8fa:	7913      	ldrb	r3, [r2, #4]
    f8fc:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    f900:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    f904:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		bdaddr += 6;
    f908:	3206      	adds	r2, #6
	for (index = 0; index < 8; index++) {
    f90a:	3401      	adds	r4, #1
    f90c:	b2e4      	uxtb	r4, r4
    f90e:	2c07      	cmp	r4, #7
    f910:	d9e3      	bls.n	f8da <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    f912:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    f916:	4b02      	ldr	r3, [pc, #8]	; (f920 <radio_filter_configure+0x4c>)
    f918:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
    f91c:	bc70      	pop	{r4, r5, r6}
    f91e:	4770      	bx	lr
    f920:	40001000 	.word	0x40001000

0000f924 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    f924:	4a03      	ldr	r2, [pc, #12]	; (f934 <radio_filter_disable+0x10>)
    f926:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    f92a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    f92e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    f932:	4770      	bx	lr
    f934:	40001000 	.word	0x40001000

0000f938 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    f938:	4b03      	ldr	r3, [pc, #12]	; (f948 <radio_filter_status_reset+0x10>)
    f93a:	2200      	movs	r2, #0
    f93c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	NRF_RADIO->EVENTS_DEVMISS = 0;
    f940:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    f944:	4770      	bx	lr
    f946:	bf00      	nop
    f948:	40001000 	.word	0x40001000

0000f94c <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    f94c:	4b03      	ldr	r3, [pc, #12]	; (f95c <radio_filter_has_match+0x10>)
    f94e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    f952:	3000      	adds	r0, #0
    f954:	bf18      	it	ne
    f956:	2001      	movne	r0, #1
    f958:	4770      	bx	lr
    f95a:	bf00      	nop
    f95c:	40001000 	.word	0x40001000

0000f960 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    f960:	4b01      	ldr	r3, [pc, #4]	; (f968 <radio_filter_match_get+0x8>)
    f962:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    f966:	4770      	bx	lr
    f968:	40001000 	.word	0x40001000

0000f96c <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    f96c:	4b04      	ldr	r3, [pc, #16]	; (f980 <radio_bc_configure+0x14>)
    f96e:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    f972:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f97a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f97e:	4770      	bx	lr
    f980:	40001000 	.word	0x40001000

0000f984 <radio_bc_status_reset>:
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    f984:	2200      	movs	r2, #0
    f986:	4b02      	ldr	r3, [pc, #8]	; (f990 <radio_bc_status_reset+0xc>)
    f988:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    f98c:	4770      	bx	lr
    f98e:	bf00      	nop
    f990:	40001000 	.word	0x40001000

0000f994 <radio_bc_has_match>:
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    f994:	4b03      	ldr	r3, [pc, #12]	; (f9a4 <radio_bc_has_match+0x10>)
    f996:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
}
    f99a:	3000      	adds	r0, #0
    f99c:	bf18      	it	ne
    f99e:	2001      	movne	r0, #1
    f9a0:	4770      	bx	lr
    f9a2:	bf00      	nop
    f9a4:	40001000 	.word	0x40001000

0000f9a8 <radio_tmr_status_reset>:

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    f9a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    f9ac:	4b04      	ldr	r3, [pc, #16]	; (f9c0 <radio_tmr_status_reset+0x18>)
    f9ae:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	NRF_PPI->CHENCLR =
    f9b2:	f248 027f 	movw	r2, #32895	; 0x807f
    f9b6:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    f9ba:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    f9be:	4770      	bx	lr
    f9c0:	4000b000 	.word	0x4000b000

0000f9c4 <radio_tmr_tifs_set>:
}

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    f9c4:	4b01      	ldr	r3, [pc, #4]	; (f9cc <radio_tmr_tifs_set+0x8>)
    f9c6:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    f9ca:	4770      	bx	lr
    f9cc:	40001000 	.word	0x40001000

0000f9d0 <radio_tmr_start>:
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    f9d0:	b470      	push	{r4, r5, r6}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    f9d2:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    f9d6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    f9da:	4c21      	ldr	r4, [pc, #132]	; (fa60 <radio_tmr_start+0x90>)
    f9dc:	42a3      	cmp	r3, r4
    f9de:	d906      	bls.n	f9ee <radio_tmr_start+0x1e>
		ticks_start--;
    f9e0:	3901      	subs	r1, #1
		remainder += 30517578UL;
    f9e2:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
    f9e6:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
    f9ea:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
	}
	remainder /= 1000000UL;
    f9ee:	4b1d      	ldr	r3, [pc, #116]	; (fa64 <radio_tmr_start+0x94>)
    f9f0:	fba3 3202 	umull	r3, r2, r3, r2
    f9f4:	0c92      	lsrs	r2, r2, #18

	NRF_TIMER0->TASKS_CLEAR = 1;
    f9f6:	4b1c      	ldr	r3, [pc, #112]	; (fa68 <radio_tmr_start+0x98>)
    f9f8:	2401      	movs	r4, #1
    f9fa:	60dc      	str	r4, [r3, #12]
	NRF_TIMER0->MODE = 0;
    f9fc:	2500      	movs	r5, #0
    f9fe:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	NRF_TIMER0->PRESCALER = 4;
    fa02:	2404      	movs	r4, #4
    fa04:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    fa08:	2602      	movs	r6, #2
    fa0a:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508

	NRF_TIMER0->CC[0] = remainder;
    fa0e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    fa12:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140

	NRF_RTC0->CC[2] = ticks_start;
    fa16:	4c15      	ldr	r4, [pc, #84]	; (fa6c <radio_tmr_start+0x9c>)
    fa18:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    fa1c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    fa20:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    fa24:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    fa28:	4911      	ldr	r1, [pc, #68]	; (fa70 <radio_tmr_start+0xa0>)
    fa2a:	f504 74a4 	add.w	r4, r4, #328	; 0x148
    fa2e:	f8c1 4518 	str.w	r4, [r1, #1304]	; 0x518
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    fa32:	f8c1 351c 	str.w	r3, [r1, #1308]	; 0x51c
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    fa36:	f8c1 6504 	str.w	r6, [r1, #1284]	; 0x504

	NRF_PPI->CH[0].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
    fa3a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    fa3e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    fa42:	b948      	cbnz	r0, fa58 <radio_tmr_start+0x88>
    fa44:	490b      	ldr	r1, [pc, #44]	; (fa74 <radio_tmr_start+0xa4>)
    fa46:	4b0a      	ldr	r3, [pc, #40]	; (fa70 <radio_tmr_start+0xa0>)
    fa48:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
				     (u32_t)&(NRF_RADIO->TASKS_RXEN);
	NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    fa4c:	2101      	movs	r1, #1
    fa4e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_PPI->CHG[0] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH11_Msk | PPI_CHG_CH14_Msk;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
    fa52:	4610      	mov	r0, r2
    fa54:	bc70      	pop	{r4, r5, r6}
    fa56:	4770      	bx	lr
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    fa58:	f5a1 31f0 	sub.w	r1, r1, #122880	; 0x1e000
    fa5c:	e7f3      	b.n	fa46 <radio_tmr_start+0x76>
    fa5e:	bf00      	nop
    fa60:	7ff0bdbf 	.word	0x7ff0bdbf
    fa64:	431bde83 	.word	0x431bde83
    fa68:	40008000 	.word	0x40008000
    fa6c:	4000b000 	.word	0x4000b000
    fa70:	4001f000 	.word	0x4001f000
    fa74:	40001004 	.word	0x40001004

0000fa78 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
    fa78:	4b02      	ldr	r3, [pc, #8]	; (fa84 <radio_tmr_stop+0xc>)
    fa7a:	2201      	movs	r2, #1
    fa7c:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    fa7e:	611a      	str	r2, [r3, #16]
    fa80:	4770      	bx	lr
    fa82:	bf00      	nop
    fa84:	40008000 	.word	0x40008000

0000fa88 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[1] = hcto;
    fa88:	4b0e      	ldr	r3, [pc, #56]	; (fac4 <radio_tmr_hcto_configure+0x3c>)
    fa8a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	NRF_TIMER0->EVENTS_COMPARE[1] = 0;
    fa8e:	2200      	movs	r2, #0
    fa90:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    fa94:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    fa98:	4a0b      	ldr	r2, [pc, #44]	; (fac8 <radio_tmr_hcto_configure+0x40>)
    fa9a:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    fa9e:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    faa2:	3240      	adds	r2, #64	; 0x40
    faa4:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[1]);
    faa8:	f502 7280 	add.w	r2, r2, #256	; 0x100
    faac:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
    fab0:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    fab4:	3a34      	subs	r2, #52	; 0x34
    fab6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_PPI->CHENSET = (PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk);
    faba:	2218      	movs	r2, #24
    fabc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fac0:	4770      	bx	lr
    fac2:	bf00      	nop
    fac4:	40008000 	.word	0x40008000
    fac8:	40001104 	.word	0x40001104

0000facc <radio_tmr_aa_capture>:
}

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
    facc:	4b0b      	ldr	r3, [pc, #44]	; (fafc <radio_tmr_aa_capture+0x30>)
    face:	4a0c      	ldr	r2, [pc, #48]	; (fb00 <radio_tmr_aa_capture+0x34>)
    fad0:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    fad4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    fad8:	3240      	adds	r2, #64	; 0x40
    fada:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    fade:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    fae2:	3a3c      	subs	r2, #60	; 0x3c
    fae4:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    fae8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    faec:	3240      	adds	r2, #64	; 0x40
    faee:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    faf2:	220c      	movs	r2, #12
    faf4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    faf8:	4770      	bx	lr
    fafa:	bf00      	nop
    fafc:	4001f000 	.word	0x4001f000
    fb00:	40001100 	.word	0x40001100

0000fb04 <radio_tmr_aa_get>:
}

u32_t radio_tmr_aa_get(void)
{
	return NRF_TIMER0->CC[1];
    fb04:	4b01      	ldr	r3, [pc, #4]	; (fb0c <radio_tmr_aa_get+0x8>)
    fb06:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    fb0a:	4770      	bx	lr
    fb0c:	40008000 	.word	0x40008000

0000fb10 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    fb10:	4b01      	ldr	r3, [pc, #4]	; (fb18 <radio_tmr_aa_save+0x8>)
    fb12:	6018      	str	r0, [r3, #0]
    fb14:	4770      	bx	lr
    fb16:	bf00      	nop
    fb18:	20000f3c 	.word	0x20000f3c

0000fb1c <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    fb1c:	4b01      	ldr	r3, [pc, #4]	; (fb24 <radio_tmr_aa_restore+0x8>)
    fb1e:	6818      	ldr	r0, [r3, #0]
    fb20:	4770      	bx	lr
    fb22:	bf00      	nop
    fb24:	20000f3c 	.word	0x20000f3c

0000fb28 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return NRF_TIMER0->CC[0];
    fb28:	4b01      	ldr	r3, [pc, #4]	; (fb30 <radio_tmr_ready_get+0x8>)
    fb2a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    fb2e:	4770      	bx	lr
    fb30:	40008000 	.word	0x40008000

0000fb34 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
    fb34:	4b06      	ldr	r3, [pc, #24]	; (fb50 <radio_tmr_end_capture+0x1c>)
    fb36:	4a07      	ldr	r2, [pc, #28]	; (fb54 <radio_tmr_end_capture+0x20>)
    fb38:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    fb3c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    fb40:	323c      	adds	r2, #60	; 0x3c
    fb42:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	NRF_PPI->CHENSET = PPI_CHEN_CH5_Msk;
    fb46:	2220      	movs	r2, #32
    fb48:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fb4c:	4770      	bx	lr
    fb4e:	bf00      	nop
    fb50:	4001f000 	.word	0x4001f000
    fb54:	4000110c 	.word	0x4000110c

0000fb58 <radio_tmr_end_get>:
}

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
    fb58:	4b01      	ldr	r3, [pc, #4]	; (fb60 <radio_tmr_end_get+0x8>)
    fb5a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    fb5e:	4770      	bx	lr
    fb60:	40008000 	.word	0x40008000

0000fb64 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
    fb64:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    fb66:	4b18      	ldr	r3, [pc, #96]	; (fbc8 <radio_ccm_rx_pkt_set+0x64>)
    fb68:	2400      	movs	r4, #0
    fb6a:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    fb6e:	2402      	movs	r4, #2
    fb70:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
    fb74:	42a1      	cmp	r1, r4
    fb76:	d125      	bne.n	fbc4 <radio_ccm_rx_pkt_set+0x60>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
    fb78:	4914      	ldr	r1, [pc, #80]	; (fbcc <radio_ccm_rx_pkt_set+0x68>)
		NRF_PPI->CHENSET = PPI_CHEN_CH15_Msk;
		break;
#endif /* CONFIG_SOC_NRF52840 */
	}
#endif
	NRF_CCM->MODE = mode;
    fb7a:	4b13      	ldr	r3, [pc, #76]	; (fbc8 <radio_ccm_rx_pkt_set+0x64>)
    fb7c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    fb80:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    fb84:	4812      	ldr	r0, [pc, #72]	; (fbd0 <radio_ccm_rx_pkt_set+0x6c>)
    fb86:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    fb8a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    fb8e:	4a11      	ldr	r2, [pc, #68]	; (fbd4 <radio_ccm_rx_pkt_set+0x70>)
    fb90:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
    fb94:	2200      	movs	r2, #0
    fb96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    fb9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    fb9e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    fba2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    fba6:	4a0c      	ldr	r2, [pc, #48]	; (fbd8 <radio_ccm_rx_pkt_set+0x74>)
    fba8:	490c      	ldr	r1, [pc, #48]	; (fbdc <radio_ccm_rx_pkt_set+0x78>)
    fbaa:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
    fbae:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    fbb2:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    fbb6:	2140      	movs	r1, #64	; 0x40
    fbb8:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504

	NRF_CCM->TASKS_KSGEN = 1;
    fbbc:	2201      	movs	r2, #1
    fbbe:	601a      	str	r2, [r3, #0]

	return _pkt_scratch;
}
    fbc0:	bc10      	pop	{r4}
    fbc2:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    fbc4:	4906      	ldr	r1, [pc, #24]	; (fbe0 <radio_ccm_rx_pkt_set+0x7c>)
    fbc6:	e7d8      	b.n	fb7a <radio_ccm_rx_pkt_set+0x16>
    fbc8:	4000f000 	.word	0x4000f000
    fbcc:	01010001 	.word	0x01010001
    fbd0:	20000e38 	.word	0x20000e38
    fbd4:	20000d28 	.word	0x20000d28
    fbd8:	4001f000 	.word	0x4001f000
    fbdc:	40001104 	.word	0x40001104
    fbe0:	01000001 	.word	0x01000001

0000fbe4 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    fbe4:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    fbe6:	4b10      	ldr	r3, [pc, #64]	; (fc28 <radio_ccm_tx_pkt_set+0x44>)
    fbe8:	2200      	movs	r2, #0
    fbea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    fbee:	2402      	movs	r4, #2
    fbf0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    fbf4:	4c0d      	ldr	r4, [pc, #52]	; (fc2c <radio_ccm_tx_pkt_set+0x48>)
    fbf6:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    fbfa:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    fbfe:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    fc02:	480b      	ldr	r0, [pc, #44]	; (fc30 <radio_ccm_tx_pkt_set+0x4c>)
    fc04:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    fc08:	490a      	ldr	r1, [pc, #40]	; (fc34 <radio_ccm_tx_pkt_set+0x50>)
    fc0a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    fc0e:	2101      	movs	r1, #1
    fc10:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    fc14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    fc18:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    fc1c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    fc20:	6019      	str	r1, [r3, #0]

	return _pkt_scratch;
}
    fc22:	bc10      	pop	{r4}
    fc24:	4770      	bx	lr
    fc26:	bf00      	nop
    fc28:	4000f000 	.word	0x4000f000
    fc2c:	01010000 	.word	0x01010000
    fc30:	20000e38 	.word	0x20000e38
    fc34:	20000d28 	.word	0x20000d28

0000fc38 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    fc38:	2202      	movs	r2, #2
    fc3a:	4b0d      	ldr	r3, [pc, #52]	; (fc70 <radio_ccm_is_done+0x38>)
    fc3c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    fc40:	e002      	b.n	fc48 <radio_ccm_is_done+0x10>
    fc42:	bf20      	wfe
  __ASM volatile ("sev");
    fc44:	bf40      	sev
  __ASM volatile ("wfe");
    fc46:	bf20      	wfe
    fc48:	4b09      	ldr	r3, [pc, #36]	; (fc70 <radio_ccm_is_done+0x38>)
    fc4a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    fc4e:	2b00      	cmp	r3, #0
    fc50:	d0f7      	beq.n	fc42 <radio_ccm_is_done+0xa>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    fc52:	4b07      	ldr	r3, [pc, #28]	; (fc70 <radio_ccm_is_done+0x38>)
    fc54:	2202      	movs	r2, #2
    fc56:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    fc5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    fc5e:	4a05      	ldr	r2, [pc, #20]	; (fc74 <radio_ccm_is_done+0x3c>)
    fc60:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    fc64:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    fc68:	fab0 f080 	clz	r0, r0
    fc6c:	0940      	lsrs	r0, r0, #5
    fc6e:	4770      	bx	lr
    fc70:	4000f000 	.word	0x4000f000
    fc74:	e000e100 	.word	0xe000e100

0000fc78 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    fc78:	4b03      	ldr	r3, [pc, #12]	; (fc88 <radio_ccm_mic_is_valid+0x10>)
    fc7a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    fc7e:	3000      	adds	r0, #0
    fc80:	bf18      	it	ne
    fc82:	2001      	movne	r0, #1
    fc84:	4770      	bx	lr
    fc86:	bf00      	nop
    fc88:	4000f000 	.word	0x4000f000

0000fc8c <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    fc8c:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
    fc8e:	4c13      	ldr	r4, [pc, #76]	; (fcdc <radio_ar_configure+0x50>)
    fc90:	2303      	movs	r3, #3
    fc92:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
    fc96:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
    fc9a:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
    fc9e:	4b10      	ldr	r3, [pc, #64]	; (fce0 <radio_ar_configure+0x54>)
    fca0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    fca4:	3b01      	subs	r3, #1
    fca6:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
    fcaa:	4b0e      	ldr	r3, [pc, #56]	; (fce4 <radio_ar_configure+0x58>)
    fcac:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	NRF_AAR->EVENTS_END = 0;
    fcb0:	2300      	movs	r3, #0
    fcb2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
    fcb6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
    fcba:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

	radio_bc_configure(64);
    fcbe:	2040      	movs	r0, #64	; 0x40
    fcc0:	f7ff fe54 	bl	f96c <radio_bc_configure>
	radio_bc_status_reset();
    fcc4:	f7ff fe5e 	bl	f984 <radio_bc_status_reset>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    fcc8:	4b07      	ldr	r3, [pc, #28]	; (fce8 <radio_ar_configure+0x5c>)
    fcca:	4a08      	ldr	r2, [pc, #32]	; (fcec <radio_ar_configure+0x60>)
    fccc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
    fcd0:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    fcd4:	2240      	movs	r2, #64	; 0x40
    fcd6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fcda:	bd10      	pop	{r4, pc}
    fcdc:	4000f000 	.word	0x4000f000
    fce0:	40001000 	.word	0x40001000
    fce4:	20000d24 	.word	0x20000d24
    fce8:	4001f000 	.word	0x4001f000
    fcec:	40001128 	.word	0x40001128

0000fcf0 <radio_ar_match_get>:
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    fcf0:	4b01      	ldr	r3, [pc, #4]	; (fcf8 <radio_ar_match_get+0x8>)
    fcf2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    fcf6:	4770      	bx	lr
    fcf8:	4000f000 	.word	0x4000f000

0000fcfc <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
    fcfc:	b508      	push	{r3, lr}
	radio_bc_status_reset();
    fcfe:	f7ff fe41 	bl	f984 <radio_bc_status_reset>

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    fd02:	2200      	movs	r2, #0
    fd04:	4b01      	ldr	r3, [pc, #4]	; (fd0c <radio_ar_status_reset+0x10>)
    fd06:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    fd0a:	bd08      	pop	{r3, pc}
    fd0c:	4000f000 	.word	0x4000f000

0000fd10 <radio_ar_has_match>:
			  AAR_ENABLE_ENABLE_Msk;
}

u32_t radio_ar_has_match(void)
{
    fd10:	b508      	push	{r3, lr}
	return (radio_bc_has_match() &&
    fd12:	f7ff fe3f 	bl	f994 <radio_bc_has_match>
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    fd16:	b168      	cbz	r0, fd34 <radio_ar_has_match+0x24>
		NRF_AAR->EVENTS_END &&
    fd18:	4b0a      	ldr	r3, [pc, #40]	; (fd44 <radio_ar_has_match+0x34>)
    fd1a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    fd1e:	b15b      	cbz	r3, fd38 <radio_ar_has_match+0x28>
		NRF_AAR->EVENTS_RESOLVED &&
    fd20:	4b08      	ldr	r3, [pc, #32]	; (fd44 <radio_ar_has_match+0x34>)
    fd22:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    fd26:	b14b      	cbz	r3, fd3c <radio_ar_has_match+0x2c>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    fd28:	4b06      	ldr	r3, [pc, #24]	; (fd44 <radio_ar_has_match+0x34>)
    fd2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    fd2e:	b13b      	cbz	r3, fd40 <radio_ar_has_match+0x30>
    fd30:	2000      	movs	r0, #0
    fd32:	bd08      	pop	{r3, pc}
    fd34:	2000      	movs	r0, #0
    fd36:	bd08      	pop	{r3, pc}
    fd38:	2000      	movs	r0, #0
    fd3a:	bd08      	pop	{r3, pc}
    fd3c:	2000      	movs	r0, #0
    fd3e:	bd08      	pop	{r3, pc}
    fd40:	2001      	movs	r0, #1
}
    fd42:	bd08      	pop	{r3, pc}
    fd44:	4000f000 	.word	0x4000f000

0000fd48 <isr>:

static int isr(struct rand *rng, bool store)
{
	u8_t last;

	if (!rng) {
    fd48:	b1f0      	cbz	r0, fd88 <isr+0x40>
{
    fd4a:	b430      	push	{r4, r5}
    fd4c:	4602      	mov	r2, r0
		return -ENOBUFS;
	}

	last = rng->last + 1;
    fd4e:	78c0      	ldrb	r0, [r0, #3]
    fd50:	1c43      	adds	r3, r0, #1
    fd52:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    fd54:	7815      	ldrb	r5, [r2, #0]
    fd56:	42ab      	cmp	r3, r5
    fd58:	d012      	beq.n	fd80 <isr+0x38>
		last = 0;
	}

	if (last == rng->first) {
    fd5a:	7894      	ldrb	r4, [r2, #2]
    fd5c:	42a3      	cmp	r3, r4
    fd5e:	d016      	beq.n	fd8e <isr+0x46>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    fd60:	b1c1      	cbz	r1, fd94 <isr+0x4c>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    fd62:	490f      	ldr	r1, [pc, #60]	; (fda0 <isr+0x58>)
    fd64:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    fd68:	4410      	add	r0, r2
    fd6a:	7101      	strb	r1, [r0, #4]
	rng->last = last;
    fd6c:	70d3      	strb	r3, [r2, #3]

	last = rng->last + 1;
    fd6e:	3301      	adds	r3, #1
    fd70:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    fd72:	429d      	cmp	r5, r3
    fd74:	d006      	beq.n	fd84 <isr+0x3c>
		last = 0;
	}

	if (last == rng->first) {
    fd76:	42a3      	cmp	r3, r4
    fd78:	d10f      	bne.n	fd9a <isr+0x52>
		return 0;
    fd7a:	2000      	movs	r0, #0
	}

	return -EBUSY;
}
    fd7c:	bc30      	pop	{r4, r5}
    fd7e:	4770      	bx	lr
		last = 0;
    fd80:	2300      	movs	r3, #0
    fd82:	e7ea      	b.n	fd5a <isr+0x12>
		last = 0;
    fd84:	2300      	movs	r3, #0
    fd86:	e7f6      	b.n	fd76 <isr+0x2e>
		return -ENOBUFS;
    fd88:	f06f 0068 	mvn.w	r0, #104	; 0x68
    fd8c:	4770      	bx	lr
		return -ENOBUFS;
    fd8e:	f06f 0068 	mvn.w	r0, #104	; 0x68
    fd92:	e7f3      	b.n	fd7c <isr+0x34>
		return -EBUSY;
    fd94:	f06f 000f 	mvn.w	r0, #15
    fd98:	e7f0      	b.n	fd7c <isr+0x34>
	return -EBUSY;
    fd9a:	f06f 000f 	mvn.w	r0, #15
    fd9e:	e7ed      	b.n	fd7c <isr+0x34>
    fda0:	4000d000 	.word	0x4000d000
    fda4:	00000000 	.word	0x00000000

0000fda8 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    fda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fdac:	b08a      	sub	sp, #40	; 0x28
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    fdae:	f7ff fd25 	bl	f7fc <radio_is_done>
    fdb2:	b2c4      	uxtb	r4, r0
	if (trx_done) {
    fdb4:	b9e4      	cbnz	r4, fdf0 <isr+0x48>
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    fdb6:	46a0      	mov	r8, r4
    fdb8:	46a1      	mov	r9, r4
    fdba:	4627      	mov	r7, r4
    fdbc:	4626      	mov	r6, r4
		devmatch_id = irkmatch_id = 0xFF;
    fdbe:	25ff      	movs	r5, #255	; 0xff
    fdc0:	46aa      	mov	sl, r5
	}

	/* Clear radio status and events */
	radio_status_reset();
    fdc2:	f7ff fd01 	bl	f7c8 <radio_status_reset>
	radio_tmr_status_reset();
    fdc6:	f7ff fdef 	bl	f9a8 <radio_tmr_status_reset>
	radio_filter_status_reset();
    fdca:	f7ff fdb5 	bl	f938 <radio_filter_status_reset>
	radio_ar_status_reset();
    fdce:	f7ff ff95 	bl	fcfc <radio_ar_status_reset>
	radio_rssi_status_reset();
    fdd2:	f7ff fd6d 	bl	f8b0 <radio_rssi_status_reset>
#if defined(CONFIG_BT_CTLR_GPIO_PA_PIN) || \
    defined(CONFIG_BT_CTLR_GPIO_LNA_PIN)
	radio_gpio_pa_lna_disable();
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

	switch (_radio.state) {
    fdd6:	4bb6      	ldr	r3, [pc, #728]	; (100b0 <__kernel_ram_size+0xb0>)
    fdd8:	7c1b      	ldrb	r3, [r3, #16]
    fdda:	2b05      	cmp	r3, #5
    fddc:	f200 8456 	bhi.w	1068c <__kernel_ram_size+0x68c>
    fde0:	e8df f013 	tbh	[pc, r3, lsl #1]
    fde4:	00e801f3 	.word	0x00e801f3
    fde8:	016e001c 	.word	0x016e001c
    fdec:	016e016e 	.word	0x016e016e
		crc_ok = radio_crc_is_valid();
    fdf0:	f7ff fd24 	bl	f83c <radio_crc_is_valid>
    fdf4:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
    fdf6:	f7ff fda9 	bl	f94c <radio_filter_has_match>
    fdfa:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
    fdfc:	f7ff fdb0 	bl	f960 <radio_filter_match_get>
    fe00:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_ok = radio_ar_has_match();
    fe04:	f7ff ff84 	bl	fd10 <radio_ar_has_match>
    fe08:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_id = radio_ar_match_get();
    fe0c:	f7ff ff70 	bl	fcf0 <radio_ar_match_get>
    fe10:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
    fe12:	f7ff fd55 	bl	f8c0 <radio_rssi_is_ready>
    fe16:	fa5f f880 	uxtb.w	r8, r0
    fe1a:	e7d2      	b.n	fdc2 <isr+0x1a>
	_radio.state = STATE_RX;
    fe1c:	4da4      	ldr	r5, [pc, #656]	; (100b0 <__kernel_ram_size+0xb0>)
    fe1e:	2301      	movs	r3, #1
    fe20:	742b      	strb	r3, [r5, #16]
	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    fe22:	f7ff fe99 	bl	fb58 <radio_tmr_end_get>
    fe26:	f100 049b 	add.w	r4, r0, #155	; 0x9b
	radio_tmr_tifs_set(RADIO_TIFS);
    fe2a:	2096      	movs	r0, #150	; 0x96
    fe2c:	f7ff fdca 	bl	f9c4 <radio_tmr_tifs_set>
	switch (_radio.role) {
    fe30:	7beb      	ldrb	r3, [r5, #15]
    fe32:	3b01      	subs	r3, #1
    fe34:	2b03      	cmp	r3, #3
    fe36:	f200 80b7 	bhi.w	ffa8 <isr+0x200>
    fe3a:	e8df f003 	tbb	[pc, r3]
    fe3e:	3202      	.short	0x3202
    fe40:	6868      	.short	0x6868
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fe42:	2300      	movs	r3, #0
    fe44:	461a      	mov	r2, r3
    fe46:	4619      	mov	r1, r3
    fe48:	4618      	mov	r0, r3
    fe4a:	f7ff fd11 	bl	f870 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    fe4e:	f7ff fd03 	bl	f858 <radio_pkt_scratch_get>
    fe52:	f7ff fc8b 	bl	f76c <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    fe56:	f7ff fcc7 	bl	f7e8 <radio_is_ready>
    fe5a:	b990      	cbnz	r0, fe82 <isr+0xda>
		if (ctrl_rl_enabled()) {
    fe5c:	f00a f802 	bl	19e64 <ctrl_rl_enabled>
    fe60:	b9a8      	cbnz	r0, fe8e <isr+0xe6>
		hcto += radio_rx_chain_delay_get(0, 0);
    fe62:	2100      	movs	r1, #0
    fe64:	4608      	mov	r0, r1
    fe66:	f7ff fc93 	bl	f790 <radio_rx_chain_delay_get>
    fe6a:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    fe6c:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    fe6e:	2100      	movs	r1, #0
    fe70:	4608      	mov	r0, r1
    fe72:	f7ff fc89 	bl	f788 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    fe76:	1a20      	subs	r0, r4, r0
    fe78:	f7ff fe06 	bl	fa88 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    fe7c:	f7ff fe5a 	bl	fb34 <radio_tmr_end_capture>
    fe80:	e1a3      	b.n	101ca <__kernel_ram_size+0x1ca>
		LL_ASSERT(!radio_is_ready());
    fe82:	4040      	eors	r0, r0
    fe84:	f380 8811 	msr	BASEPRI, r0
    fe88:	f04f 0004 	mov.w	r0, #4
    fe8c:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    fe8e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    fe92:	f009 fd63 	bl	1995c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    fe96:	4601      	mov	r1, r0
    fe98:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    fe9c:	f7ff fef6 	bl	fc8c <radio_ar_configure>
    fea0:	e7df      	b.n	fe62 <isr+0xba>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fea2:	2300      	movs	r3, #0
    fea4:	461a      	mov	r2, r3
    fea6:	4619      	mov	r1, r3
    fea8:	4618      	mov	r0, r3
    feaa:	f7ff fce1 	bl	f870 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    feae:	4b80      	ldr	r3, [pc, #512]	; (100b0 <__kernel_ram_size+0xb0>)
    feb0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    feb4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    feb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    febc:	3008      	adds	r0, #8
    febe:	f7ff fc55 	bl	f76c <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    fec2:	f7ff fc91 	bl	f7e8 <radio_is_ready>
    fec6:	b990      	cbnz	r0, feee <isr+0x146>
		if (ctrl_rl_enabled()) {
    fec8:	f009 ffcc 	bl	19e64 <ctrl_rl_enabled>
    fecc:	b9a8      	cbnz	r0, fefa <isr+0x152>
		hcto += radio_rx_chain_delay_get(0, 0);
    fece:	2100      	movs	r1, #0
    fed0:	4608      	mov	r0, r1
    fed2:	f7ff fc5d 	bl	f790 <radio_rx_chain_delay_get>
    fed6:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    fed8:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    feda:	2100      	movs	r1, #0
    fedc:	4608      	mov	r0, r1
    fede:	f7ff fc53 	bl	f788 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    fee2:	1a20      	subs	r0, r4, r0
    fee4:	f7ff fdd0 	bl	fa88 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    fee8:	f7ff fcd2 	bl	f890 <radio_rssi_measure>
    feec:	e16d      	b.n	101ca <__kernel_ram_size+0x1ca>
		LL_ASSERT(!radio_is_ready());
    feee:	4040      	eors	r0, r0
    fef0:	f380 8811 	msr	BASEPRI, r0
    fef4:	f04f 0004 	mov.w	r0, #4
    fef8:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    fefa:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    fefe:	f009 fd2d 	bl	1995c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    ff02:	4601      	mov	r1, r0
    ff04:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    ff08:	f7ff fec0 	bl	fc8c <radio_ar_configure>
    ff0c:	e7df      	b.n	fece <isr+0x126>
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    ff0e:	4d68      	ldr	r5, [pc, #416]	; (100b0 <__kernel_ram_size+0xb0>)
    ff10:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    ff14:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
					     _radio.conn_curr->phy_tx,
    ff18:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    ff1c:	09d3      	lsrs	r3, r2, #7
    ff1e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ff22:	2100      	movs	r1, #0
    ff24:	f000 0007 	and.w	r0, r0, #7
    ff28:	f7ff fca2 	bl	f870 <radio_switch_complete_and_tx>
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    ff2c:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    ff30:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
    ff34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    ff38:	3108      	adds	r1, #8
    ff3a:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    ff3e:	f002 fad3 	bl	124e8 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    ff42:	f7ff fc51 	bl	f7e8 <radio_is_ready>
    ff46:	bb20      	cbnz	r0, ff92 <isr+0x1ea>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    ff48:	4d59      	ldr	r5, [pc, #356]	; (100b0 <__kernel_ram_size+0xb0>)
    ff4a:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    ff4e:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    ff52:	2101      	movs	r1, #1
    ff54:	f000 0007 	and.w	r0, r0, #7
    ff58:	f7ff fc1a 	bl	f790 <radio_rx_chain_delay_get>
    ff5c:	4420      	add	r0, r4
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    ff5e:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    ff62:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
    ff66:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
    ff6a:	2b02      	cmp	r3, #2
    ff6c:	d01a      	beq.n	ffa4 <isr+0x1fc>
    ff6e:	2b04      	cmp	r3, #4
    ff70:	d015      	beq.n	ff9e <isr+0x1f6>
		return 40;
    ff72:	2428      	movs	r4, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    ff74:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    ff76:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
    ff7a:	09c1      	lsrs	r1, r0, #7
    ff7c:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    ff80:	f7ff fc02 	bl	f788 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    ff84:	1a20      	subs	r0, r4, r0
    ff86:	f7ff fd7f 	bl	fa88 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    ff8a:	2001      	movs	r0, #1
    ff8c:	f002 fb0a 	bl	125a4 <packet_tx_enqueue>
    ff90:	e11b      	b.n	101ca <__kernel_ram_size+0x1ca>
		LL_ASSERT(!radio_is_ready());
    ff92:	4040      	eors	r0, r0
    ff94:	f380 8811 	msr	BASEPRI, r0
    ff98:	f04f 0004 	mov.w	r0, #4
    ff9c:	df02      	svc	2
		return 376;
    ff9e:	f44f 74bc 	mov.w	r4, #376	; 0x178
    ffa2:	e7e7      	b.n	ff74 <isr+0x1cc>
		return 24;
    ffa4:	2418      	movs	r4, #24
    ffa6:	e7e5      	b.n	ff74 <isr+0x1cc>
		LL_ASSERT(0);
    ffa8:	4040      	eors	r0, r0
    ffaa:	f380 8811 	msr	BASEPRI, r0
    ffae:	f04f 0004 	mov.w	r0, #4
    ffb2:	df02      	svc	2
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    ffb4:	b144      	cbz	r4, ffc8 <isr+0x220>
	switch (_radio.role) {
    ffb6:	4b3e      	ldr	r3, [pc, #248]	; (100b0 <__kernel_ram_size+0xb0>)
    ffb8:	7bdb      	ldrb	r3, [r3, #15]
    ffba:	3b01      	subs	r3, #1
    ffbc:	2b03      	cmp	r3, #3
    ffbe:	d879      	bhi.n	100b4 <__kernel_ram_size+0xb4>
    ffc0:	e8df f003 	tbb	[pc, r3]
    ffc4:	70701c08 	.word	0x70701c08
		_radio.state = STATE_CLOSE;
    ffc8:	2203      	movs	r2, #3
    ffca:	4b39      	ldr	r3, [pc, #228]	; (100b0 <__kernel_ram_size+0xb0>)
    ffcc:	741a      	strb	r2, [r3, #16]
		radio_disable();
    ffce:	f7ff fbf1 	bl	f7b4 <radio_disable>
    ffd2:	e0fa      	b.n	101ca <__kernel_ram_size+0x1ca>
		if (crc_ok) {
    ffd4:	b94e      	cbnz	r6, ffea <isr+0x242>
			err = 1;
    ffd6:	2001      	movs	r0, #1
		if (err) {
    ffd8:	2800      	cmp	r0, #0
    ffda:	f000 80f6 	beq.w	101ca <__kernel_ram_size+0x1ca>
			_radio.state = STATE_CLOSE;
    ffde:	2203      	movs	r2, #3
    ffe0:	4b33      	ldr	r3, [pc, #204]	; (100b0 <__kernel_ram_size+0xb0>)
    ffe2:	741a      	strb	r2, [r3, #16]
			radio_disable();
    ffe4:	f7ff fbe6 	bl	f7b4 <radio_disable>
    ffe8:	e0ef      	b.n	101ca <__kernel_ram_size+0x1ca>
			err = isr_rx_adv(devmatch_ok, devmatch_id, irkmatch_ok,
    ffea:	f8cd 8000 	str.w	r8, [sp]
    ffee:	462b      	mov	r3, r5
    fff0:	464a      	mov	r2, r9
    fff2:	4651      	mov	r1, sl
    fff4:	4638      	mov	r0, r7
    fff6:	f007 fc37 	bl	17868 <isr_rx_adv>
    fffa:	e7ed      	b.n	ffd8 <isr+0x230>
		rl_idx = devmatch_ok ?
    fffc:	b9a7      	cbnz	r7, 10028 <__kernel_ram_size+0x28>
    fffe:	f1b9 0f00 	cmp.w	r9, #0
   10002:	d11b      	bne.n	1003c <__kernel_ram_size+0x3c>
   10004:	24ff      	movs	r4, #255	; 0xff
		if (crc_ok &&
   10006:	b9f6      	cbnz	r6, 10046 <__kernel_ram_size+0x46>
			err = 1;
   10008:	2001      	movs	r0, #1
		if (err) {
   1000a:	2800      	cmp	r0, #0
   1000c:	f000 80dd 	beq.w	101ca <__kernel_ram_size+0x1ca>
			_radio.state = STATE_CLOSE;
   10010:	4c27      	ldr	r4, [pc, #156]	; (100b0 <__kernel_ram_size+0xb0>)
   10012:	2303      	movs	r3, #3
   10014:	7423      	strb	r3, [r4, #16]
			radio_disable();
   10016:	f7ff fbcd 	bl	f7b4 <radio_disable>
			_radio.scanner.state = 0;
   1001a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1001e:	f36f 0341 	bfc	r3, #1, #1
   10022:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   10026:	e0d0      	b.n	101ca <__kernel_ram_size+0x1ca>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
   10028:	4b21      	ldr	r3, [pc, #132]	; (100b0 <__kernel_ram_size+0xb0>)
   1002a:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		rl_idx = devmatch_ok ?
   1002e:	4651      	mov	r1, sl
   10030:	f3c0 1000 	ubfx	r0, r0, #4, #1
   10034:	f009 fc9c 	bl	19970 <ctrl_rl_idx>
   10038:	4604      	mov	r4, r0
   1003a:	e7e4      	b.n	10006 <__kernel_ram_size+0x6>
   1003c:	4628      	mov	r0, r5
   1003e:	f009 fccd 	bl	199dc <ctrl_rl_irk_idx>
   10042:	4604      	mov	r4, r0
   10044:	e7df      	b.n	10006 <__kernel_ram_size+0x6>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   10046:	4b1a      	ldr	r3, [pc, #104]	; (100b0 <__kernel_ram_size+0xb0>)
   10048:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   1004c:	f013 0f10 	tst.w	r3, #16
   10050:	d109      	bne.n	10066 <__kernel_ram_size+0x66>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   10052:	b91f      	cbnz	r7, 1005c <__kernel_ram_size+0x5c>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   10054:	2301      	movs	r3, #1
		if (crc_ok &&
   10056:	b9db      	cbnz	r3, 10090 <__kernel_ram_size+0x90>
			err = 1;
   10058:	2001      	movs	r0, #1
   1005a:	e7d6      	b.n	1000a <__kernel_ram_size+0xa>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   1005c:	4621      	mov	r1, r4
   1005e:	4648      	mov	r0, r9
   10060:	f009 fe1c 	bl	19c9c <ctrl_rl_idx_allowed>
   10064:	b980      	cbnz	r0, 10088 <__kernel_ram_size+0x88>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   10066:	4b12      	ldr	r3, [pc, #72]	; (100b0 <__kernel_ram_size+0xb0>)
   10068:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   1006c:	f013 0f10 	tst.w	r3, #16
   10070:	d00c      	beq.n	1008c <__kernel_ram_size+0x8c>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   10072:	b10f      	cbz	r7, 10078 <__kernel_ram_size+0x78>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   10074:	2301      	movs	r3, #1
   10076:	e7ee      	b.n	10056 <__kernel_ram_size+0x56>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
   10078:	4620      	mov	r0, r4
   1007a:	f009 fcd9 	bl	19a30 <ctrl_irk_whitelisted>
   1007e:	b108      	cbz	r0, 10084 <__kernel_ram_size+0x84>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   10080:	2301      	movs	r3, #1
   10082:	e7e8      	b.n	10056 <__kernel_ram_size+0x56>
   10084:	2300      	movs	r3, #0
   10086:	e7e6      	b.n	10056 <__kernel_ram_size+0x56>
   10088:	2301      	movs	r3, #1
   1008a:	e7e4      	b.n	10056 <__kernel_ram_size+0x56>
   1008c:	2300      	movs	r3, #0
   1008e:	e7e2      	b.n	10056 <__kernel_ram_size+0x56>
			err = isr_rx_scan(devmatch_ok, devmatch_id, irkmatch_ok,
   10090:	f8cd 8004 	str.w	r8, [sp, #4]
   10094:	9400      	str	r4, [sp, #0]
   10096:	462b      	mov	r3, r5
   10098:	464a      	mov	r2, r9
   1009a:	4651      	mov	r1, sl
   1009c:	4638      	mov	r0, r7
   1009e:	f006 ffb7 	bl	17010 <isr_rx_scan>
   100a2:	e7b2      	b.n	1000a <__kernel_ram_size+0xa>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
   100a4:	4642      	mov	r2, r8
   100a6:	4621      	mov	r1, r4
   100a8:	4630      	mov	r0, r6
   100aa:	f004 fabb 	bl	14624 <isr_rx_conn>
   100ae:	e08c      	b.n	101ca <__kernel_ram_size+0x1ca>
   100b0:	20000ff4 	.word	0x20000ff4
		LL_ASSERT(0);
   100b4:	4040      	eors	r0, r0
   100b6:	f380 8811 	msr	BASEPRI, r0
   100ba:	f04f 0004 	mov.w	r0, #4
   100be:	df02      	svc	2
	switch (_radio.role) {
   100c0:	4bb3      	ldr	r3, [pc, #716]	; (10390 <__kernel_ram_size+0x390>)
   100c2:	7bdb      	ldrb	r3, [r3, #15]
   100c4:	b2db      	uxtb	r3, r3
   100c6:	2b04      	cmp	r3, #4
   100c8:	f200 82b2 	bhi.w	10630 <__kernel_ram_size+0x630>
   100cc:	e8df f013 	tbh	[pc, r3, lsl #1]
   100d0:	000502a0 	.word	0x000502a0
   100d4:	00b5006f 	.word	0x00b5006f
   100d8:	00b5      	.short	0x00b5
	if ((_radio.state == STATE_CLOSE) &&
   100da:	4bad      	ldr	r3, [pc, #692]	; (10390 <__kernel_ram_size+0x390>)
   100dc:	7c1b      	ldrb	r3, [r3, #16]
   100de:	2b03      	cmp	r3, #3
   100e0:	d00f      	beq.n	10102 <__kernel_ram_size+0x102>
		radio_filter_disable();
   100e2:	f7ff fc1f 	bl	f924 <radio_filter_disable>
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
   100e6:	4aaa      	ldr	r2, [pc, #680]	; (10390 <__kernel_ram_size+0x390>)
   100e8:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
		pdu_adv = (struct pdu_adv *)
   100ec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   100f0:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
   100f4:	3320      	adds	r3, #32
   100f6:	4413      	add	r3, r2
		if ((_radio.state == STATE_CLOSE) &&
   100f8:	7c12      	ldrb	r2, [r2, #16]
   100fa:	2a03      	cmp	r2, #3
   100fc:	d00f      	beq.n	1011e <__kernel_ram_size+0x11e>
	u32_t dont_close = 0;
   100fe:	2300      	movs	r3, #0
   10100:	e060      	b.n	101c4 <__kernel_ram_size+0x1c4>
	    (_radio.advertiser.chan_map_current != 0)) {
   10102:	4ba3      	ldr	r3, [pc, #652]	; (10390 <__kernel_ram_size+0x390>)
   10104:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if ((_radio.state == STATE_CLOSE) &&
   10108:	f013 0f0e 	tst.w	r3, #14
   1010c:	d0e9      	beq.n	100e2 <__kernel_ram_size+0xe2>
		adv_setup();
   1010e:	f002 fca5 	bl	12a5c <adv_setup>
		radio_tx_enable();
   10112:	f7ff fb49 	bl	f7a8 <radio_tx_enable>
		radio_tmr_end_capture();
   10116:	f7ff fd0d 	bl	fb34 <radio_tmr_end_capture>
		dont_close = 1;
   1011a:	2301      	movs	r3, #1
   1011c:	e052      	b.n	101c4 <__kernel_ram_size+0x1c4>
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
   1011e:	79db      	ldrb	r3, [r3, #7]
   10120:	f003 030f 	and.w	r3, r3, #15
		if ((_radio.state == STATE_CLOSE) &&
   10124:	2b01      	cmp	r3, #1
   10126:	d040      	beq.n	101aa <__kernel_ram_size+0x1aa>
			rand_isr_get(sizeof(random_delay), &random_delay);
   10128:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   1012c:	2001      	movs	r0, #1
   1012e:	f000 fb7d 	bl	1082c <rand_isr_get>
			random_delay %= 10;
   10132:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   10136:	4a97      	ldr	r2, [pc, #604]	; (10394 <__kernel_ram_size+0x394>)
   10138:	fba2 1203 	umull	r1, r2, r2, r3
   1013c:	08d2      	lsrs	r2, r2, #3
   1013e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   10142:	0051      	lsls	r1, r2, #1
   10144:	1a5a      	subs	r2, r3, r1
   10146:	b2d2      	uxtb	r2, r2
			random_delay += 1;
   10148:	3201      	adds	r2, #1
   1014a:	b2d2      	uxtb	r2, r2
   1014c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
					      TICKER_US_TO_TICKS(random_delay *
   10150:	b2d2      	uxtb	r2, r2
   10152:	4891      	ldr	r0, [pc, #580]	; (10398 <__kernel_ram_size+0x398>)
   10154:	fba2 0100 	umull	r0, r1, r2, r0
   10158:	23e8      	movs	r3, #232	; 0xe8
   1015a:	fb03 1102 	mla	r1, r3, r2, r1
   1015e:	a38a      	add	r3, pc, #552	; (adr r3, 10388 <__kernel_ram_size+0x388>)
   10160:	e9d3 2300 	ldrd	r2, r3, [r3]
   10164:	f7f0 ffca 	bl	10fc <__aeabi_uldivmod>
			ticker_status =
   10168:	f640 63a2 	movw	r3, #3746	; 0xea2
   1016c:	9306      	str	r3, [sp, #24]
   1016e:	4b8b      	ldr	r3, [pc, #556]	; (1039c <__kernel_ram_size+0x39c>)
   10170:	9305      	str	r3, [sp, #20]
   10172:	2400      	movs	r4, #0
   10174:	9404      	str	r4, [sp, #16]
   10176:	9403      	str	r4, [sp, #12]
   10178:	9402      	str	r4, [sp, #8]
   1017a:	9401      	str	r4, [sp, #4]
   1017c:	9400      	str	r4, [sp, #0]
   1017e:	b283      	uxth	r3, r0
   10180:	2205      	movs	r2, #5
   10182:	4621      	mov	r1, r4
   10184:	4620      	mov	r0, r4
   10186:	f000 fe1d 	bl	10dc4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1018a:	b130      	cbz	r0, 1019a <__kernel_ram_size+0x19a>
   1018c:	2802      	cmp	r0, #2
   1018e:	d004      	beq.n	1019a <__kernel_ram_size+0x19a>
   10190:	4b7f      	ldr	r3, [pc, #508]	; (10390 <__kernel_ram_size+0x390>)
   10192:	7b9b      	ldrb	r3, [r3, #14]
   10194:	b2db      	uxtb	r3, r3
   10196:	2b05      	cmp	r3, #5
   10198:	d101      	bne.n	1019e <__kernel_ram_size+0x19e>
	u32_t dont_close = 0;
   1019a:	2300      	movs	r3, #0
   1019c:	e012      	b.n	101c4 <__kernel_ram_size+0x1c4>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1019e:	4040      	eors	r0, r0
   101a0:	f380 8811 	msr	BASEPRI, r0
   101a4:	f04f 0004 	mov.w	r0, #4
   101a8:	df02      	svc	2
	u32_t dont_close = 0;
   101aa:	2300      	movs	r3, #0
   101ac:	e00a      	b.n	101c4 <__kernel_ram_size+0x1c4>
	if (_radio.state == STATE_CLOSE) {
   101ae:	4b78      	ldr	r3, [pc, #480]	; (10390 <__kernel_ram_size+0x390>)
   101b0:	7c1b      	ldrb	r3, [r3, #16]
   101b2:	2b03      	cmp	r3, #3
   101b4:	d00c      	beq.n	101d0 <__kernel_ram_size+0x1d0>
		radio_filter_disable();
   101b6:	f7ff fbb5 	bl	f924 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   101ba:	4b75      	ldr	r3, [pc, #468]	; (10390 <__kernel_ram_size+0x390>)
   101bc:	7c1b      	ldrb	r3, [r3, #16]
   101be:	2b05      	cmp	r3, #5
   101c0:	d031      	beq.n	10226 <__kernel_ram_size+0x226>
	u32_t dont_close = 0;
   101c2:	2300      	movs	r3, #0
	if (dont_close) {
   101c4:	2b00      	cmp	r3, #0
   101c6:	f000 8249 	beq.w	1065c <__kernel_ram_size+0x65c>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
   101ca:	b00a      	add	sp, #40	; 0x28
   101cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		radio_tmr_tifs_set(RADIO_TIFS);
   101d0:	2096      	movs	r0, #150	; 0x96
   101d2:	f7ff fbf7 	bl	f9c4 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   101d6:	2300      	movs	r3, #0
   101d8:	461a      	mov	r2, r3
   101da:	4619      	mov	r1, r3
   101dc:	4618      	mov	r0, r3
   101de:	f7ff fb47 	bl	f870 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
   101e2:	4b6b      	ldr	r3, [pc, #428]	; (10390 <__kernel_ram_size+0x390>)
   101e4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   101e8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   101ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   101f0:	3008      	adds	r0, #8
   101f2:	f7ff fabb 	bl	f76c <radio_pkt_rx_set>
		radio_rssi_measure();
   101f6:	f7ff fb4b 	bl	f890 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   101fa:	f009 fe33 	bl	19e64 <ctrl_rl_enabled>
   101fe:	b940      	cbnz	r0, 10212 <__kernel_ram_size+0x212>
		_radio.state = STATE_RX;
   10200:	2401      	movs	r4, #1
   10202:	4b63      	ldr	r3, [pc, #396]	; (10390 <__kernel_ram_size+0x390>)
   10204:	741c      	strb	r4, [r3, #16]
		radio_rx_enable();
   10206:	f7ff fac9 	bl	f79c <radio_rx_enable>
		radio_tmr_end_capture();
   1020a:	f7ff fc93 	bl	fb34 <radio_tmr_end_capture>
		dont_close = 1;
   1020e:	4623      	mov	r3, r4
   10210:	e7d8      	b.n	101c4 <__kernel_ram_size+0x1c4>
			u8_t count, *irks = ctrl_irks_get(&count);
   10212:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   10216:	f009 fba1 	bl	1995c <ctrl_irks_get>
			radio_ar_configure(count, irks);
   1021a:	4601      	mov	r1, r0
   1021c:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   10220:	f7ff fd34 	bl	fc8c <radio_ar_configure>
   10224:	e7ec      	b.n	10200 <__kernel_ram_size+0x200>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10226:	2400      	movs	r4, #0
   10228:	9400      	str	r4, [sp, #0]
   1022a:	4623      	mov	r3, r4
   1022c:	2204      	movs	r2, #4
   1022e:	4621      	mov	r1, r4
   10230:	4620      	mov	r0, r4
   10232:	f000 fe15 	bl	10e60 <ticker_stop>
	u32_t dont_close = 0;
   10236:	4623      	mov	r3, r4
   10238:	e7c4      	b.n	101c4 <__kernel_ram_size+0x1c4>
	if (_radio.conn_curr == 0) {
   1023a:	4b55      	ldr	r3, [pc, #340]	; (10390 <__kernel_ram_size+0x390>)
   1023c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   10240:	2800      	cmp	r0, #0
   10242:	f000 81fb 	beq.w	1063c <__kernel_ram_size+0x63c>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   10246:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   1024a:	b141      	cbz	r1, 1025e <__kernel_ram_size+0x25e>
   1024c:	7bdb      	ldrb	r3, [r3, #15]
   1024e:	b2db      	uxtb	r3, r3
   10250:	2b03      	cmp	r3, #3
   10252:	d046      	beq.n	102e2 <__kernel_ram_size+0x2e2>
   10254:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   10258:	f013 0f01 	tst.w	r3, #1
   1025c:	d141      	bne.n	102e2 <__kernel_ram_size+0x2e2>
	latency_event = _radio.conn_curr->latency_event;
   1025e:	f8b0 802a 	ldrh.w	r8, [r0, #42]	; 0x2a
	elapsed_event = latency_event + 1;
   10262:	f108 0401 	add.w	r4, r8, #1
   10266:	b2a4      	uxth	r4, r4
	if (_radio.packet_counter &&
   10268:	4b49      	ldr	r3, [pc, #292]	; (10390 <__kernel_ram_size+0x390>)
   1026a:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
   1026e:	2b00      	cmp	r3, #0
   10270:	f000 80b8 	beq.w	103e4 <__kernel_ram_size+0x3e4>
		if (_radio.role == ROLE_SLAVE) {
   10274:	4b46      	ldr	r3, [pc, #280]	; (10390 <__kernel_ram_size+0x390>)
   10276:	7bdb      	ldrb	r3, [r3, #15]
   10278:	b2db      	uxtb	r3, r3
   1027a:	2b03      	cmp	r3, #3
   1027c:	d03c      	beq.n	102f8 <__kernel_ram_size+0x2f8>
		} else if (reason_peer) {
   1027e:	2900      	cmp	r1, #0
   10280:	f000 80ad 	beq.w	103de <__kernel_ram_size+0x3de>
			_radio.conn_curr->master.terminate_ack = 1;
   10284:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   10288:	f043 0301 	orr.w	r3, r3, #1
   1028c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   10290:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
   10292:	4635      	mov	r5, r6
		_radio.conn_curr->connect_expire = 0;
   10294:	4b3e      	ldr	r3, [pc, #248]	; (10390 <__kernel_ram_size+0x390>)
   10296:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1029a:	2200      	movs	r2, #0
   1029c:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   1029e:	4b3c      	ldr	r3, [pc, #240]	; (10390 <__kernel_ram_size+0x390>)
   102a0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   102a4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   102a8:	2b00      	cmp	r3, #0
   102aa:	f000 80d8 	beq.w	1045e <__kernel_ram_size+0x45e>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   102ae:	429c      	cmp	r4, r3
   102b0:	f080 80c9 	bcs.w	10446 <__kernel_ram_size+0x446>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   102b4:	1b1b      	subs	r3, r3, r4
   102b6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   102ba:	4b35      	ldr	r3, [pc, #212]	; (10390 <__kernel_ram_size+0x390>)
   102bc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   102c0:	2100      	movs	r1, #0
   102c2:	8551      	strh	r1, [r2, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   102c4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   102c8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   102cc:	2a06      	cmp	r2, #6
   102ce:	f240 8130 	bls.w	10532 <__kernel_ram_size+0x532>
			else if (_radio.role == ROLE_SLAVE) {
   102d2:	4a2f      	ldr	r2, [pc, #188]	; (10390 <__kernel_ram_size+0x390>)
   102d4:	7bd2      	ldrb	r2, [r2, #15]
   102d6:	b2d2      	uxtb	r2, r2
   102d8:	2a03      	cmp	r2, #3
   102da:	f000 80a2 	beq.w	10422 <__kernel_ram_size+0x422>
	force = 0;
   102de:	2700      	movs	r7, #0
   102e0:	e0be      	b.n	10460 <__kernel_ram_size+0x460>
		terminate_ind_rx_enqueue(_radio.conn_curr, reason_peer);
   102e2:	f004 f90b 	bl	144fc <terminate_ind_rx_enqueue>
		connection_release(_radio.conn_curr);
   102e6:	4c2a      	ldr	r4, [pc, #168]	; (10390 <__kernel_ram_size+0x390>)
   102e8:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   102ec:	f002 f9b2 	bl	12654 <connection_release>
		_radio.conn_curr = NULL;
   102f0:	2300      	movs	r3, #0
   102f2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   102f6:	e765      	b.n	101c4 <__kernel_ram_size+0x1c4>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   102f8:	f7ff fc10 	bl	fb1c <radio_tmr_aa_restore>
   102fc:	4682      	mov	sl, r0
						     radio_tmr_ready_get();
   102fe:	f7ff fc13 	bl	fb28 <radio_tmr_ready_get>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10302:	ebaa 0a00 	sub.w	sl, sl, r0
				_radio.conn_curr->slave.window_widening_event_us;
   10306:	4b22      	ldr	r3, [pc, #136]	; (10390 <__kernel_ram_size+0x390>)
   10308:	f8d3 9110 	ldr.w	r9, [r3, #272]	; 0x110
			window_widening_event_us =
   1030c:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
				addr_us_get(_radio.conn_curr->phy_rx);
   10310:	f899 303a 	ldrb.w	r3, [r9, #58]	; 0x3a
   10314:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
   10318:	2b02      	cmp	r3, #2
   1031a:	d031      	beq.n	10380 <__kernel_ram_size+0x380>
   1031c:	2b04      	cmp	r3, #4
   1031e:	d02c      	beq.n	1037a <__kernel_ram_size+0x37a>
		return 40;
   10320:	2628      	movs	r6, #40	; 0x28
				preamble_to_addr_us +
   10322:	1987      	adds	r7, r0, r6
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   10324:	3730      	adds	r7, #48	; 0x30
			if (start_to_address_actual_us <=
   10326:	45ba      	cmp	sl, r7
   10328:	d83c      	bhi.n	103a4 <__kernel_ram_size+0x3a4>
					TICKER_US_TO_TICKS(window_widening_event_us);
   1032a:	4e1d      	ldr	r6, [pc, #116]	; (103a0 <__kernel_ram_size+0x3a0>)
   1032c:	a316      	add	r3, pc, #88	; (adr r3, 10388 <__kernel_ram_size+0x388>)
   1032e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10332:	fba0 0106 	umull	r0, r1, r0, r6
   10336:	f7f0 fee1 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
   1033a:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
   1033c:	eba7 000a 	sub.w	r0, r7, sl
   10340:	a311      	add	r3, pc, #68	; (adr r3, 10388 <__kernel_ram_size+0x388>)
   10342:	e9d3 2300 	ldrd	r2, r3, [r3]
   10346:	fba0 0106 	umull	r0, r1, r0, r6
   1034a:	f7f0 fed7 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
   1034e:	b286      	uxth	r6, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
   10350:	2200      	movs	r2, #0
   10352:	f8c9 2060 	str.w	r2, [r9, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   10356:	4b0e      	ldr	r3, [pc, #56]	; (10390 <__kernel_ram_size+0x390>)
   10358:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1035c:	668a      	str	r2, [r1, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   1035e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10362:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   10366:	b38a      	cbz	r2, 103cc <__kernel_ram_size+0x3cc>
				if (pdu_data_tx->len ||
   10368:	7952      	ldrb	r2, [r2, #5]
   1036a:	b91a      	cbnz	r2, 10374 <__kernel_ram_size+0x374>
				    _radio.conn_curr->packet_tx_head_offset) {
   1036c:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
				if (pdu_data_tx->len ||
   10370:	2a00      	cmp	r2, #0
   10372:	d08f      	beq.n	10294 <__kernel_ram_size+0x294>
					_radio.conn_curr->latency_event = 0;
   10374:	2200      	movs	r2, #0
   10376:	855a      	strh	r2, [r3, #42]	; 0x2a
   10378:	e78c      	b.n	10294 <__kernel_ram_size+0x294>
		return 376;
   1037a:	f44f 76bc 	mov.w	r6, #376	; 0x178
   1037e:	e7d0      	b.n	10322 <__kernel_ram_size+0x322>
		return 24;
   10380:	2618      	movs	r6, #24
   10382:	e7ce      	b.n	10322 <__kernel_ram_size+0x322>
   10384:	f3af 8000 	nop.w
   10388:	1afd498d 	.word	0x1afd498d
   1038c:	00000007 	.word	0x00000007
   10390:	20000ff4 	.word	0x20000ff4
   10394:	cccccccd 	.word	0xcccccccd
   10398:	d4a51000 	.word	0xd4a51000
   1039c:	00011da5 	.word	0x00011da5
   103a0:	3b9aca00 	.word	0x3b9aca00
					TICKER_US_TO_TICKS(start_to_address_actual_us);
   103a4:	4faa      	ldr	r7, [pc, #680]	; (10650 <__kernel_ram_size+0x650>)
   103a6:	a3a8      	add	r3, pc, #672	; (adr r3, 10648 <__kernel_ram_size+0x648>)
   103a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   103ac:	fbaa 0107 	umull	r0, r1, sl, r7
   103b0:	f7f0 fea4 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
   103b4:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US +
   103b6:	f106 0030 	add.w	r0, r6, #48	; 0x30
   103ba:	a3a3      	add	r3, pc, #652	; (adr r3, 10648 <__kernel_ram_size+0x648>)
   103bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   103c0:	fba0 0107 	umull	r0, r1, r0, r7
   103c4:	f7f0 fe9a 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
   103c8:	b286      	uxth	r6, r0
   103ca:	e7c1      	b.n	10350 <__kernel_ram_size+0x350>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   103cc:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   103d0:	f012 0f01 	tst.w	r2, #1
   103d4:	f43f af5e 	beq.w	10294 <__kernel_ram_size+0x294>
					_radio.conn_curr->latency;
   103d8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
				_radio.conn_curr->latency_event =
   103da:	855a      	strh	r2, [r3, #42]	; 0x2a
   103dc:	e75a      	b.n	10294 <__kernel_ram_size+0x294>
	ticks_drift_minus = 0;
   103de:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
   103e0:	4635      	mov	r5, r6
   103e2:	e757      	b.n	10294 <__kernel_ram_size+0x294>
	else if (_radio.conn_curr->connect_expire) {
   103e4:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   103e6:	b195      	cbz	r5, 1040e <__kernel_ram_size+0x40e>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   103e8:	42ac      	cmp	r4, r5
   103ea:	d204      	bcs.n	103f6 <__kernel_ram_size+0x3f6>
			_radio.conn_curr->connect_expire -= elapsed_event;
   103ec:	1b2d      	subs	r5, r5, r4
   103ee:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   103f0:	2500      	movs	r5, #0
	ticks_drift_plus = 0;
   103f2:	462e      	mov	r6, r5
   103f4:	e753      	b.n	1029e <__kernel_ram_size+0x29e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   103f6:	213e      	movs	r1, #62	; 0x3e
   103f8:	f004 f880 	bl	144fc <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   103fc:	4c95      	ldr	r4, [pc, #596]	; (10654 <__kernel_ram_size+0x654>)
   103fe:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   10402:	f002 f927 	bl	12654 <connection_release>
			_radio.conn_curr = NULL;
   10406:	2300      	movs	r3, #0
   10408:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1040c:	e6da      	b.n	101c4 <__kernel_ram_size+0x1c4>
		if (!_radio.conn_curr->supervision_expire) {
   1040e:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
   10412:	b926      	cbnz	r6, 1041e <__kernel_ram_size+0x41e>
				_radio.conn_curr->supervision_reload;
   10414:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   10416:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   1041a:	4635      	mov	r5, r6
   1041c:	e73f      	b.n	1029e <__kernel_ram_size+0x29e>
	ticks_drift_minus = 0;
   1041e:	462e      	mov	r6, r5
   10420:	e73d      	b.n	1029e <__kernel_ram_size+0x29e>
				if (latency_event != 0) {
   10422:	f1b8 0f00 	cmp.w	r8, #0
   10426:	f040 8086 	bne.w	10536 <__kernel_ram_size+0x536>
					force = _radio.conn_curr->slave.force & 0x01;
   1042a:	6edf      	ldr	r7, [r3, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   1042c:	087a      	lsrs	r2, r7, #1
   1042e:	66da      	str	r2, [r3, #108]	; 0x6c
					if (force) {
   10430:	f017 0701 	ands.w	r7, r7, #1
   10434:	d014      	beq.n	10460 <__kernel_ram_size+0x460>
						_radio.conn_curr->slave.force |=
   10436:	4b87      	ldr	r3, [pc, #540]	; (10654 <__kernel_ram_size+0x654>)
   10438:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1043c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1043e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10442:	66d3      	str	r3, [r2, #108]	; 0x6c
   10444:	e00c      	b.n	10460 <__kernel_ram_size+0x460>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   10446:	2108      	movs	r1, #8
   10448:	f004 f858 	bl	144fc <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   1044c:	4c81      	ldr	r4, [pc, #516]	; (10654 <__kernel_ram_size+0x654>)
   1044e:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   10452:	f002 f8ff 	bl	12654 <connection_release>
			_radio.conn_curr = NULL;
   10456:	2300      	movs	r3, #0
   10458:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1045c:	e6b2      	b.n	101c4 <__kernel_ram_size+0x1c4>
	force = 0;
   1045e:	2700      	movs	r7, #0
	if (_radio.conn_curr->procedure_expire != 0) {
   10460:	4b7c      	ldr	r3, [pc, #496]	; (10654 <__kernel_ram_size+0x654>)
   10462:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   10466:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   1046a:	b123      	cbz	r3, 10476 <__kernel_ram_size+0x476>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   1046c:	429c      	cmp	r4, r3
   1046e:	d264      	bcs.n	1053a <__kernel_ram_size+0x53a>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   10470:	1b1b      	subs	r3, r3, r4
   10472:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   10476:	4b77      	ldr	r3, [pc, #476]	; (10654 <__kernel_ram_size+0x654>)
   10478:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1047c:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   10480:	b123      	cbz	r3, 1048c <__kernel_ram_size+0x48c>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   10482:	429c      	cmp	r4, r3
   10484:	d265      	bcs.n	10552 <__kernel_ram_size+0x552>
			_radio.conn_curr->apto_expire -= elapsed_event;
   10486:	1b1b      	subs	r3, r3, r4
   10488:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   1048c:	4b71      	ldr	r3, [pc, #452]	; (10654 <__kernel_ram_size+0x654>)
   1048e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10492:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   10496:	b12b      	cbz	r3, 104a4 <__kernel_ram_size+0x4a4>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   10498:	429c      	cmp	r4, r3
   1049a:	f080 8090 	bcs.w	105be <__kernel_ram_size+0x5be>
			_radio.conn_curr->appto_expire -= elapsed_event;
   1049e:	1b1b      	subs	r3, r3, r4
   104a0:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   104a4:	4b6b      	ldr	r3, [pc, #428]	; (10654 <__kernel_ram_size+0x654>)
   104a6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   104aa:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   104ae:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   104b2:	4299      	cmp	r1, r3
   104b4:	d006      	beq.n	104c4 <__kernel_ram_size+0x4c4>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   104b6:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
   104ba:	3b01      	subs	r3, #1
   104bc:	b2db      	uxtb	r3, r3
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   104be:	2b01      	cmp	r3, #1
   104c0:	f240 809b 	bls.w	105fa <__kernel_ram_size+0x5fa>
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   104c4:	b937      	cbnz	r7, 104d4 <__kernel_ram_size+0x4d4>
   104c6:	4b63      	ldr	r3, [pc, #396]	; (10654 <__kernel_ram_size+0x654>)
   104c8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   104cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   104ce:	4598      	cmp	r8, r3
   104d0:	f000 8096 	beq.w	10600 <__kernel_ram_size+0x600>
		lazy = _radio.conn_curr->latency_event + 1;
   104d4:	4b5f      	ldr	r3, [pc, #380]	; (10654 <__kernel_ram_size+0x654>)
   104d6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   104da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   104dc:	3301      	adds	r3, #1
   104de:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   104e0:	b925      	cbnz	r5, 104ec <__kernel_ram_size+0x4ec>
   104e2:	b91e      	cbnz	r6, 104ec <__kernel_ram_size+0x4ec>
   104e4:	b913      	cbnz	r3, 104ec <__kernel_ram_size+0x4ec>
	    (lazy != 0) || (force != 0)) {
   104e6:	2f00      	cmp	r7, #0
   104e8:	f000 80aa 	beq.w	10640 <__kernel_ram_size+0x640>
				    _radio.conn_curr->handle;
   104ec:	4a59      	ldr	r2, [pc, #356]	; (10654 <__kernel_ram_size+0x654>)
   104ee:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   104f2:	f892 4020 	ldrb.w	r4, [r2, #32]
   104f6:	3407      	adds	r4, #7
   104f8:	b2e4      	uxtb	r4, r4
		ticker_status =
   104fa:	9406      	str	r4, [sp, #24]
   104fc:	4a56      	ldr	r2, [pc, #344]	; (10658 <__kernel_ram_size+0x658>)
   104fe:	9205      	str	r2, [sp, #20]
   10500:	9704      	str	r7, [sp, #16]
   10502:	9303      	str	r3, [sp, #12]
   10504:	2000      	movs	r0, #0
   10506:	9002      	str	r0, [sp, #8]
   10508:	9001      	str	r0, [sp, #4]
   1050a:	9600      	str	r6, [sp, #0]
   1050c:	462b      	mov	r3, r5
   1050e:	4622      	mov	r2, r4
   10510:	4601      	mov	r1, r0
   10512:	f000 fc57 	bl	10dc4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10516:	4603      	mov	r3, r0
   10518:	2800      	cmp	r0, #0
   1051a:	f43f ae53 	beq.w	101c4 <__kernel_ram_size+0x1c4>
   1051e:	2802      	cmp	r0, #2
   10520:	f000 8090 	beq.w	10644 <__kernel_ram_size+0x644>
   10524:	4b4b      	ldr	r3, [pc, #300]	; (10654 <__kernel_ram_size+0x654>)
   10526:	7b9b      	ldrb	r3, [r3, #14]
   10528:	b2db      	uxtb	r3, r3
   1052a:	429c      	cmp	r4, r3
   1052c:	d16a      	bne.n	10604 <__kernel_ram_size+0x604>
	u32_t dont_close = 0;
   1052e:	2300      	movs	r3, #0
   10530:	e648      	b.n	101c4 <__kernel_ram_size+0x1c4>
				force = 1;
   10532:	2701      	movs	r7, #1
   10534:	e794      	b.n	10460 <__kernel_ram_size+0x460>
					force = 1;
   10536:	2701      	movs	r7, #1
   10538:	e792      	b.n	10460 <__kernel_ram_size+0x460>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   1053a:	2122      	movs	r1, #34	; 0x22
   1053c:	f003 ffde 	bl	144fc <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10540:	4c44      	ldr	r4, [pc, #272]	; (10654 <__kernel_ram_size+0x654>)
   10542:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   10546:	f002 f885 	bl	12654 <connection_release>
			_radio.conn_curr = NULL;
   1054a:	2300      	movs	r3, #0
   1054c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10550:	e638      	b.n	101c4 <__kernel_ram_size+0x1c4>
			_radio.conn_curr->apto_expire = 0;
   10552:	2300      	movs	r3, #0
   10554:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
   10558:	4b3e      	ldr	r3, [pc, #248]	; (10654 <__kernel_ram_size+0x654>)
   1055a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1055e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   10562:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   10564:	429a      	cmp	r2, r3
   10566:	d318      	bcc.n	1059a <__kernel_ram_size+0x59a>
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
   10568:	4b3a      	ldr	r3, [pc, #232]	; (10654 <__kernel_ram_size+0x654>)
   1056a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1056e:	1ad3      	subs	r3, r2, r3
   10570:	b2db      	uxtb	r3, r3
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	if (count > packet_rx_acquired_count_get()) {
   10572:	2b01      	cmp	r3, #1
   10574:	d91b      	bls.n	105ae <__kernel_ram_size+0x5ae>
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
   10576:	4b37      	ldr	r3, [pc, #220]	; (10654 <__kernel_ram_size+0x654>)
   10578:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1057c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   10580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   10584:	b1ab      	cbz	r3, 105b2 <__kernel_ram_size+0x5b2>
			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   10586:	4a33      	ldr	r2, [pc, #204]	; (10654 <__kernel_ram_size+0x654>)
   10588:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
   1058c:	8c12      	ldrh	r2, [r2, #32]
   1058e:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
   10590:	220a      	movs	r2, #10
   10592:	711a      	strb	r2, [r3, #4]
			packet_rx_enqueue();
   10594:	f003 ff3e 	bl	14414 <packet_rx_enqueue>
   10598:	e778      	b.n	1048c <__kernel_ram_size+0x48c>
		return (_radio.packet_rx_count -
   1059a:	492e      	ldr	r1, [pc, #184]	; (10654 <__kernel_ram_size+0x654>)
   1059c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   105a0:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   105a4:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   105a6:	fa52 f383 	uxtab	r3, r2, r3
   105aa:	b2db      	uxtb	r3, r3
   105ac:	e7e1      	b.n	10572 <__kernel_ram_size+0x572>
		return 0;
   105ae:	2300      	movs	r3, #0
   105b0:	e7e8      	b.n	10584 <__kernel_ram_size+0x584>
			LL_ASSERT(radio_pdu_node_rx);
   105b2:	4040      	eors	r0, r0
   105b4:	f380 8811 	msr	BASEPRI, r0
   105b8:	f04f 0004 	mov.w	r0, #4
   105bc:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   105be:	2300      	movs	r3, #0
   105c0:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   105c4:	4b23      	ldr	r3, [pc, #140]	; (10654 <__kernel_ram_size+0x654>)
   105c6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   105ca:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   105ce:	2a00      	cmp	r2, #0
   105d0:	f47f af68 	bne.w	104a4 <__kernel_ram_size+0x4a4>
			    (_radio.conn_curr->llcp_req ==
   105d4:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
			     _radio.conn_curr->llcp_ack)) {
   105d8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
			if ((_radio.conn_curr->procedure_expire == 0) &&
   105dc:	4291      	cmp	r1, r2
   105de:	f47f af61 	bne.w	104a4 <__kernel_ram_size+0x4a4>
				_radio.conn_curr->llcp_type = LLCP_PING;
   105e2:	2207      	movs	r2, #7
   105e4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   105e8:	4b1a      	ldr	r3, [pc, #104]	; (10654 <__kernel_ram_size+0x654>)
   105ea:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   105ee:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   105f2:	3b01      	subs	r3, #1
   105f4:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   105f8:	e754      	b.n	104a4 <__kernel_ram_size+0x4a4>
		_radio.conn_curr->latency_event = 0;
   105fa:	2300      	movs	r3, #0
   105fc:	8553      	strh	r3, [r2, #42]	; 0x2a
   105fe:	e761      	b.n	104c4 <__kernel_ram_size+0x4c4>
	lazy = 0;
   10600:	2300      	movs	r3, #0
   10602:	e76d      	b.n	104e0 <__kernel_ram_size+0x4e0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10604:	4040      	eors	r0, r0
   10606:	f380 8811 	msr	BASEPRI, r0
   1060a:	f04f 0004 	mov.w	r0, #4
   1060e:	df02      	svc	2
		LL_ASSERT((_radio.state == STATE_STOP) ||
   10610:	4b10      	ldr	r3, [pc, #64]	; (10654 <__kernel_ram_size+0x654>)
   10612:	7c1b      	ldrb	r3, [r3, #16]
   10614:	3b04      	subs	r3, #4
   10616:	b2db      	uxtb	r3, r3
   10618:	2b01      	cmp	r3, #1
   1061a:	d803      	bhi.n	10624 <__kernel_ram_size+0x624>
		_radio.state = STATE_NONE;
   1061c:	2200      	movs	r2, #0
   1061e:	4b0d      	ldr	r3, [pc, #52]	; (10654 <__kernel_ram_size+0x654>)
   10620:	741a      	strb	r2, [r3, #16]
   10622:	e5d2      	b.n	101ca <__kernel_ram_size+0x1ca>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   10624:	4040      	eors	r0, r0
   10626:	f380 8811 	msr	BASEPRI, r0
   1062a:	f04f 0004 	mov.w	r0, #4
   1062e:	df02      	svc	2
		LL_ASSERT(0);
   10630:	4040      	eors	r0, r0
   10632:	f380 8811 	msr	BASEPRI, r0
   10636:	f04f 0004 	mov.w	r0, #4
   1063a:	df02      	svc	2
	u32_t dont_close = 0;
   1063c:	2300      	movs	r3, #0
   1063e:	e5c1      	b.n	101c4 <__kernel_ram_size+0x1c4>
   10640:	2300      	movs	r3, #0
   10642:	e5bf      	b.n	101c4 <__kernel_ram_size+0x1c4>
   10644:	2300      	movs	r3, #0
   10646:	e5bd      	b.n	101c4 <__kernel_ram_size+0x1c4>
   10648:	1afd498d 	.word	0x1afd498d
   1064c:	00000007 	.word	0x00000007
   10650:	3b9aca00 	.word	0x3b9aca00
   10654:	20000ff4 	.word	0x20000ff4
   10658:	00011dc5 	.word	0x00011dc5
	_radio.role = ROLE_NONE;
   1065c:	4d0e      	ldr	r5, [pc, #56]	; (10698 <__kernel_ram_size+0x698>)
   1065e:	2400      	movs	r4, #0
   10660:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
   10662:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
   10664:	736c      	strb	r4, [r5, #13]
	radio_tmr_stop();
   10666:	f7ff fa07 	bl	fa78 <radio_tmr_stop>
	event_inactive(0, 0, 0, NULL);
   1066a:	4623      	mov	r3, r4
   1066c:	4622      	mov	r2, r4
   1066e:	4621      	mov	r1, r4
   10670:	4620      	mov	r0, r4
   10672:	f001 fe29 	bl	122c8 <event_inactive>
	clock_control_off(_radio.hf_clock, NULL);
   10676:	6828      	ldr	r0, [r5, #0]
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
   10678:	6843      	ldr	r3, [r0, #4]

	return api->off(dev, sys);
   1067a:	685b      	ldr	r3, [r3, #4]
   1067c:	4621      	mov	r1, r4
   1067e:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   10680:	2201      	movs	r2, #1
   10682:	4611      	mov	r1, r2
   10684:	4620      	mov	r0, r4
   10686:	f7fe fd01 	bl	f08c <mayfly_enable>
   1068a:	e59e      	b.n	101ca <__kernel_ram_size+0x1ca>
		LL_ASSERT(0);
   1068c:	4040      	eors	r0, r0
   1068e:	f380 8811 	msr	BASEPRI, r0
   10692:	f04f 0004 	mov.w	r0, #4
   10696:	df02      	svc	2
   10698:	20000ff4 	.word	0x20000ff4

0001069c <init>:
{
   1069c:	b410      	push	{r4}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
   1069e:	1d1c      	adds	r4, r3, #4
   106a0:	42a2      	cmp	r2, r4
   106a2:	d90e      	bls.n	106c2 <init+0x26>
	*rng = (struct rand *)context;
   106a4:	6001      	str	r1, [r0, #0]
	p->count = len - offsetof(struct rand, rand);
   106a6:	3a04      	subs	r2, #4
   106a8:	700a      	strb	r2, [r1, #0]
	p->threshold = threshold;
   106aa:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
   106ac:	2300      	movs	r3, #0
   106ae:	70cb      	strb	r3, [r1, #3]
   106b0:	708b      	strb	r3, [r1, #2]
	if (!rng_isr || !rng_thr) {
   106b2:	4b0c      	ldr	r3, [pc, #48]	; (106e4 <init+0x48>)
   106b4:	681b      	ldr	r3, [r3, #0]
   106b6:	b153      	cbz	r3, 106ce <init+0x32>
   106b8:	4b0b      	ldr	r3, [pc, #44]	; (106e8 <init+0x4c>)
   106ba:	681b      	ldr	r3, [r3, #0]
   106bc:	b13b      	cbz	r3, 106ce <init+0x32>
}
   106be:	bc10      	pop	{r4}
   106c0:	4770      	bx	lr
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
   106c2:	4040      	eors	r0, r0
   106c4:	f380 8811 	msr	BASEPRI, r0
   106c8:	f04f 0004 	mov.w	r0, #4
   106cc:	df02      	svc	2
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
   106ce:	4b07      	ldr	r3, [pc, #28]	; (106ec <init+0x50>)
   106d0:	2201      	movs	r2, #1
   106d2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_RNG->EVENTS_VALRDY = 0;
   106d6:	2100      	movs	r1, #0
   106d8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   106dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_RNG->TASKS_START = 1;
   106e0:	601a      	str	r2, [r3, #0]
}
   106e2:	e7ec      	b.n	106be <init+0x22>
   106e4:	20000f44 	.word	0x20000f44
   106e8:	20000f48 	.word	0x20000f48
   106ec:	4000d000 	.word	0x4000d000

000106f0 <get>:
	LL_ASSERT(rng);
   106f0:	b1d0      	cbz	r0, 10728 <get+0x38>
{
   106f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106f6:	4607      	mov	r7, r0
	first = rng->first;
   106f8:	f890 e002 	ldrb.w	lr, [r0, #2]
	last = rng->last;
   106fc:	78c5      	ldrb	r5, [r0, #3]
	if (first <= last) {
   106fe:	45ae      	cmp	lr, r5
   10700:	d82e      	bhi.n	10760 <get+0x70>
		d = &rand[octets];
   10702:	440a      	add	r2, r1
		s = &rng->rand[first];
   10704:	eb00 060e 	add.w	r6, r0, lr
   10708:	3604      	adds	r6, #4
		avail = last - first;
   1070a:	eba5 040e 	sub.w	r4, r5, lr
   1070e:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   10710:	42a1      	cmp	r1, r4
   10712:	d20f      	bcs.n	10734 <get+0x44>
			remaining = avail - octets;
   10714:	b2cb      	uxtb	r3, r1
   10716:	1ae4      	subs	r4, r4, r3
   10718:	fa5f fc84 	uxtb.w	ip, r4
			avail = octets;
   1071c:	461c      	mov	r4, r3
		first += avail;
   1071e:	44a6      	add	lr, r4
   10720:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
   10724:	1b08      	subs	r0, r1, r4
		while (avail--) {
   10726:	e00d      	b.n	10744 <get+0x54>
	LL_ASSERT(rng);
   10728:	4040      	eors	r0, r0
   1072a:	f380 8811 	msr	BASEPRI, r0
   1072e:	f04f 0004 	mov.w	r0, #4
   10732:	df02      	svc	2
			remaining = 0;
   10734:	f04f 0c00 	mov.w	ip, #0
   10738:	e7f1      	b.n	1071e <get+0x2e>
			*(--d) = *s++;
   1073a:	7835      	ldrb	r5, [r6, #0]
   1073c:	f802 5d01 	strb.w	r5, [r2, #-1]!
		while (avail--) {
   10740:	461c      	mov	r4, r3
			*(--d) = *s++;
   10742:	3601      	adds	r6, #1
		while (avail--) {
   10744:	1e63      	subs	r3, r4, #1
   10746:	b2db      	uxtb	r3, r3
   10748:	2c00      	cmp	r4, #0
   1074a:	d1f6      	bne.n	1073a <get+0x4a>
		rng->first = first;
   1074c:	f887 e002 	strb.w	lr, [r7, #2]
	if (remaining < rng->threshold) {
   10750:	787b      	ldrb	r3, [r7, #1]
   10752:	459c      	cmp	ip, r3
   10754:	d202      	bcs.n	1075c <get+0x6c>
		NRF_RNG->TASKS_START = 1;
   10756:	2201      	movs	r2, #1
   10758:	4b24      	ldr	r3, [pc, #144]	; (107ec <get+0xfc>)
   1075a:	601a      	str	r2, [r3, #0]
}
   1075c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		d = &rand[octets];
   10760:	440a      	add	r2, r1
		s = &rng->rand[first];
   10762:	eb00 080e 	add.w	r8, r0, lr
   10766:	f108 0804 	add.w	r8, r8, #4
		avail = rng->count - first;
   1076a:	7804      	ldrb	r4, [r0, #0]
   1076c:	eba4 040e 	sub.w	r4, r4, lr
   10770:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   10772:	42a1      	cmp	r1, r4
   10774:	d20d      	bcs.n	10792 <get+0xa2>
			remaining = avail + last - octets;
   10776:	eb05 0c04 	add.w	ip, r5, r4
   1077a:	fa5f fc8c 	uxtb.w	ip, ip
   1077e:	b2cc      	uxtb	r4, r1
   10780:	ebac 0c04 	sub.w	ip, ip, r4
   10784:	fa5f fc8c 	uxtb.w	ip, ip
			first += avail;
   10788:	44a6      	add	lr, r4
   1078a:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
   1078e:	1b08      	subs	r0, r1, r4
		while (avail--) {
   10790:	e00a      	b.n	107a8 <get+0xb8>
			remaining = last;
   10792:	46ac      	mov	ip, r5
			first = 0;
   10794:	f04f 0e00 	mov.w	lr, #0
   10798:	e7f9      	b.n	1078e <get+0x9e>
			*(--d) = *s++;
   1079a:	f898 6000 	ldrb.w	r6, [r8]
   1079e:	f802 6d01 	strb.w	r6, [r2, #-1]!
		while (avail--) {
   107a2:	461c      	mov	r4, r3
			*(--d) = *s++;
   107a4:	f108 0801 	add.w	r8, r8, #1
		while (avail--) {
   107a8:	1e63      	subs	r3, r4, #1
   107aa:	b2db      	uxtb	r3, r3
   107ac:	2c00      	cmp	r4, #0
   107ae:	d1f4      	bne.n	1079a <get+0xaa>
		if (octets && last) {
   107b0:	b1c8      	cbz	r0, 107e6 <get+0xf6>
   107b2:	b1c5      	cbz	r5, 107e6 <get+0xf6>
			s = &rng->rand[0];
   107b4:	1d3e      	adds	r6, r7, #4
			if (octets < last) {
   107b6:	42a8      	cmp	r0, r5
   107b8:	d206      	bcs.n	107c8 <get+0xd8>
				remaining = last - octets;
   107ba:	fa5f fe80 	uxtb.w	lr, r0
   107be:	eba5 040e 	sub.w	r4, r5, lr
   107c2:	fa5f fc84 	uxtb.w	ip, r4
   107c6:	e001      	b.n	107cc <get+0xdc>
				remaining = 0;
   107c8:	46a4      	mov	ip, r4
	last = rng->last;
   107ca:	46ae      	mov	lr, r5
			octets -= last;
   107cc:	eba0 000e 	sub.w	r0, r0, lr
			while (last--) {
   107d0:	4671      	mov	r1, lr
   107d2:	e004      	b.n	107de <get+0xee>
				*(--d) = *s++;
   107d4:	7831      	ldrb	r1, [r6, #0]
   107d6:	f802 1d01 	strb.w	r1, [r2, #-1]!
   107da:	3601      	adds	r6, #1
			while (last--) {
   107dc:	4619      	mov	r1, r3
   107de:	1e4b      	subs	r3, r1, #1
   107e0:	b2db      	uxtb	r3, r3
   107e2:	2900      	cmp	r1, #0
   107e4:	d1f6      	bne.n	107d4 <get+0xe4>
		rng->first = first;
   107e6:	f887 e002 	strb.w	lr, [r7, #2]
   107ea:	e7b1      	b.n	10750 <get+0x60>
   107ec:	4000d000 	.word	0x4000d000

000107f0 <rand_init>:
{
   107f0:	b508      	push	{r3, lr}
	init(&rng_thr, context, context_len, threshold);
   107f2:	4613      	mov	r3, r2
   107f4:	460a      	mov	r2, r1
   107f6:	4601      	mov	r1, r0
   107f8:	4801      	ldr	r0, [pc, #4]	; (10800 <rand_init+0x10>)
   107fa:	f7ff ff4f 	bl	1069c <init>
   107fe:	bd08      	pop	{r3, pc}
   10800:	20000f48 	.word	0x20000f48

00010804 <rand_isr_init>:
{
   10804:	b508      	push	{r3, lr}
	init(&rng_isr, context, context_len, threshold);
   10806:	4613      	mov	r3, r2
   10808:	460a      	mov	r2, r1
   1080a:	4601      	mov	r1, r0
   1080c:	4801      	ldr	r0, [pc, #4]	; (10814 <rand_isr_init+0x10>)
   1080e:	f7ff ff45 	bl	1069c <init>
   10812:	bd08      	pop	{r3, pc}
   10814:	20000f44 	.word	0x20000f44

00010818 <rand_get>:
{
   10818:	b508      	push	{r3, lr}
	return get(rng_thr, octets, rand);
   1081a:	460a      	mov	r2, r1
   1081c:	4601      	mov	r1, r0
   1081e:	4b02      	ldr	r3, [pc, #8]	; (10828 <rand_get+0x10>)
   10820:	6818      	ldr	r0, [r3, #0]
   10822:	f7ff ff65 	bl	106f0 <get>
}
   10826:	bd08      	pop	{r3, pc}
   10828:	20000f48 	.word	0x20000f48

0001082c <rand_isr_get>:
{
   1082c:	b508      	push	{r3, lr}
	return get(rng_isr, octets, rand);
   1082e:	460a      	mov	r2, r1
   10830:	4601      	mov	r1, r0
   10832:	4b02      	ldr	r3, [pc, #8]	; (1083c <rand_isr_get+0x10>)
   10834:	6818      	ldr	r0, [r3, #0]
   10836:	f7ff ff5b 	bl	106f0 <get>
}
   1083a:	bd08      	pop	{r3, pc}
   1083c:	20000f44 	.word	0x20000f44

00010840 <isr_rand>:

void isr_rand(void *param)
{
   10840:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
   10842:	4b10      	ldr	r3, [pc, #64]	; (10884 <isr_rand+0x44>)
   10844:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10848:	b903      	cbnz	r3, 1084c <isr_rand+0xc>
   1084a:	bd08      	pop	{r3, pc}
		int ret;

		ret = isr(rng_isr, true);
   1084c:	2101      	movs	r1, #1
   1084e:	4b0e      	ldr	r3, [pc, #56]	; (10888 <isr_rand+0x48>)
   10850:	6818      	ldr	r0, [r3, #0]
   10852:	f7ff fa79 	bl	fd48 <isr>
		if (ret != -EBUSY) {
   10856:	f110 0f10 	cmn.w	r0, #16
   1085a:	d008      	beq.n	1086e <isr_rand+0x2e>
			ret = isr(rng_thr, (ret == -ENOBUFS));
   1085c:	f110 0f69 	cmn.w	r0, #105	; 0x69
   10860:	bf14      	ite	ne
   10862:	2100      	movne	r1, #0
   10864:	2101      	moveq	r1, #1
   10866:	4b09      	ldr	r3, [pc, #36]	; (1088c <isr_rand+0x4c>)
   10868:	6818      	ldr	r0, [r3, #0]
   1086a:	f7ff fa6d 	bl	fd48 <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
   1086e:	2200      	movs	r2, #0
   10870:	4b04      	ldr	r3, [pc, #16]	; (10884 <isr_rand+0x44>)
   10872:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (ret != -EBUSY) {
   10876:	f110 0f10 	cmn.w	r0, #16
   1087a:	d0e6      	beq.n	1084a <isr_rand+0xa>
			NRF_RNG->TASKS_STOP = 1;
   1087c:	2201      	movs	r2, #1
   1087e:	605a      	str	r2, [r3, #4]
		}
	}
}
   10880:	e7e3      	b.n	1084a <isr_rand+0xa>
   10882:	bf00      	nop
   10884:	4000d000 	.word	0x4000d000
   10888:	20000f44 	.word	0x20000f44
   1088c:	20000f48 	.word	0x20000f48

00010890 <ticker_by_slot_get>:
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
   10890:	29ff      	cmp	r1, #255	; 0xff
   10892:	d012      	beq.n	108ba <ticker_by_slot_get+0x2a>
{
   10894:	b430      	push	{r4, r5}
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
   10896:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   1089a:	00a3      	lsls	r3, r4, #2
   1089c:	18c4      	adds	r4, r0, r3
		ticks_to_expire = ticker->ticks_to_expire;
   1089e:	68a5      	ldr	r5, [r4, #8]

		if (ticks_slot <= ticks_to_expire) {
   108a0:	42aa      	cmp	r2, r5
   108a2:	d906      	bls.n	108b2 <ticker_by_slot_get+0x22>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
   108a4:	8ae4      	ldrh	r4, [r4, #22]
   108a6:	b92c      	cbnz	r4, 108b4 <ticker_by_slot_get+0x24>
			break;
		}

		ticks_slot -= ticks_to_expire;
   108a8:	1b52      	subs	r2, r2, r5
		ticker_id_head = ticker->next;
   108aa:	5cc1      	ldrb	r1, [r0, r3]
	while (ticker_id_head != TICKER_NULL) {
   108ac:	29ff      	cmp	r1, #255	; 0xff
   108ae:	d1f2      	bne.n	10896 <ticker_by_slot_get+0x6>
   108b0:	e000      	b.n	108b4 <ticker_by_slot_get+0x24>
			return TICKER_NULL;
   108b2:	21ff      	movs	r1, #255	; 0xff
	}

	return ticker_id_head;
}
   108b4:	4608      	mov	r0, r1
   108b6:	bc30      	pop	{r4, r5}
   108b8:	4770      	bx	lr
   108ba:	4608      	mov	r0, r1
   108bc:	4770      	bx	lr

000108be <ticker_by_next_slot_get>:

static void ticker_by_next_slot_get(struct ticker_instance *instance,
				    u8_t *ticker_id_head, u32_t *ticks_current,
				    u32_t *ticks_to_expire)
{
   108be:	b5f0      	push	{r4, r5, r6, r7, lr}
   108c0:	4694      	mov	ip, r2
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
   108c2:	6807      	ldr	r7, [r0, #0]

	_ticker_id_head = *ticker_id_head;
   108c4:	f891 e000 	ldrb.w	lr, [r1]
	_ticks_to_expire = *ticks_to_expire;
   108c8:	681e      	ldr	r6, [r3, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
   108ca:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   108ce:	d004      	beq.n	108da <ticker_by_next_slot_get+0x1c>
	    (*ticks_current != instance->ticks_current)) {
   108d0:	6942      	ldr	r2, [r0, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   108d2:	f8dc 4000 	ldr.w	r4, [ip]
   108d6:	4294      	cmp	r4, r2
   108d8:	d005      	beq.n	108e6 <ticker_by_next_slot_get+0x28>
		_ticker_id_head = instance->ticker_id_head;
   108da:	7e04      	ldrb	r4, [r0, #24]
		*ticks_current = instance->ticks_current;
   108dc:	6940      	ldr	r0, [r0, #20]
   108de:	f8cc 0000 	str.w	r0, [ip]
		_ticks_to_expire = 0;
   108e2:	2600      	movs	r6, #0
   108e4:	e00a      	b.n	108fc <ticker_by_next_slot_get+0x3e>
	} else {
		ticker = &node[_ticker_id_head];
   108e6:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
   108ea:	ea4f 028e 	mov.w	r2, lr, lsl #2
   108ee:	4696      	mov	lr, r2
   108f0:	18bd      	adds	r5, r7, r2
		_ticker_id_head = ticker->next;
   108f2:	5cbc      	ldrb	r4, [r7, r2]
   108f4:	e002      	b.n	108fc <ticker_by_next_slot_get+0x3e>
	}

	while ((_ticker_id_head != TICKER_NULL) &&
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
		_ticks_to_expire += ticker->ticks_to_expire;
   108f6:	68a8      	ldr	r0, [r5, #8]
   108f8:	4406      	add	r6, r0
		_ticker_id_head = ticker->next;
   108fa:	5cbc      	ldrb	r4, [r7, r2]
	while ((_ticker_id_head != TICKER_NULL) &&
   108fc:	2cff      	cmp	r4, #255	; 0xff
   108fe:	d006      	beq.n	1090e <ticker_by_next_slot_get+0x50>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
   10900:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
   10904:	0082      	lsls	r2, r0, #2
   10906:	18bd      	adds	r5, r7, r2
   10908:	8ae8      	ldrh	r0, [r5, #22]
	while ((_ticker_id_head != TICKER_NULL) &&
   1090a:	2800      	cmp	r0, #0
   1090c:	d0f3      	beq.n	108f6 <ticker_by_next_slot_get+0x38>
	}

	if (_ticker_id_head != TICKER_NULL) {
   1090e:	2cff      	cmp	r4, #255	; 0xff
   10910:	d001      	beq.n	10916 <ticker_by_next_slot_get+0x58>
		_ticks_to_expire += ticker->ticks_to_expire;
   10912:	68aa      	ldr	r2, [r5, #8]
   10914:	4416      	add	r6, r2
	}

	*ticker_id_head = _ticker_id_head;
   10916:	700c      	strb	r4, [r1, #0]
	*ticks_to_expire = _ticks_to_expire;
   10918:	601e      	str	r6, [r3, #0]
   1091a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001091c <ticker_enqueue>:
}

static u8_t ticker_enqueue(struct ticker_instance *instance, u8_t id)
{
   1091c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10920:	b085      	sub	sp, #20
   10922:	4681      	mov	r9, r0
   10924:	9102      	str	r1, [sp, #8]
	u32_t ticks_to_expire;
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
   10926:	6806      	ldr	r6, [r0, #0]
	ticker_new = &node[id];
   10928:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   1092c:	009b      	lsls	r3, r3, #2
   1092e:	9303      	str	r3, [sp, #12]
   10930:	eb06 0a03 	add.w	sl, r6, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
   10934:	f8da 5008 	ldr.w	r5, [sl, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
   10938:	f890 8018 	ldrb.w	r8, [r0, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
   1093c:	8b47      	ldrh	r7, [r0, #26]
	current = instance->ticker_id_head;
   1093e:	4644      	mov	r4, r8
	collide = ticker_id_slot_previous = TICKER_NULL;
   10940:	23ff      	movs	r3, #255	; 0xff
   10942:	9301      	str	r3, [sp, #4]
	while ((current != TICKER_NULL) &&
   10944:	e004      	b.n	10950 <ticker_enqueue+0x34>

		if (ticker_current->ticks_slot != 0) {
			ticks_slot_previous = ticker_current->ticks_slot;
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
   10946:	4297      	cmp	r7, r2
   10948:	d912      	bls.n	10970 <ticker_enqueue+0x54>
				ticks_slot_previous -= ticks_to_expire_current;
   1094a:	1abf      	subs	r7, r7, r2
			} else {
				ticks_slot_previous = 0;
			}
		}
		previous = current;
   1094c:	46a0      	mov	r8, r4
		current = ticker_current->next;
   1094e:	5cf4      	ldrb	r4, [r6, r3]
	while ((current != TICKER_NULL) &&
   10950:	2cff      	cmp	r4, #255	; 0xff
   10952:	d00f      	beq.n	10974 <ticker_enqueue+0x58>
		 (ticker_current = &node[current])->ticks_to_expire))) {
   10954:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   10958:	0093      	lsls	r3, r2, #2
   1095a:	18f1      	adds	r1, r6, r3
		(ticks_to_expire_current =
   1095c:	688a      	ldr	r2, [r1, #8]
	while ((current != TICKER_NULL) &&
   1095e:	4295      	cmp	r5, r2
   10960:	d908      	bls.n	10974 <ticker_enqueue+0x58>
		ticks_to_expire -= ticks_to_expire_current;
   10962:	1aad      	subs	r5, r5, r2
		if (ticker_current->ticks_slot != 0) {
   10964:	8ac9      	ldrh	r1, [r1, #22]
   10966:	2900      	cmp	r1, #0
   10968:	d0ed      	beq.n	10946 <ticker_enqueue+0x2a>
			ticks_slot_previous = ticker_current->ticks_slot;
   1096a:	460f      	mov	r7, r1
			ticker_id_slot_previous = current;
   1096c:	9401      	str	r4, [sp, #4]
   1096e:	e7ed      	b.n	1094c <ticker_enqueue+0x30>
				ticks_slot_previous = 0;
   10970:	2700      	movs	r7, #0
   10972:	e7eb      	b.n	1094c <ticker_enqueue+0x30>
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);
   10974:	f8ba b016 	ldrh.w	fp, [sl, #22]
	collide = ticker_by_slot_get(&node[0], current,
   10978:	eb05 020b 	add.w	r2, r5, fp
   1097c:	4621      	mov	r1, r4
   1097e:	4630      	mov	r0, r6
   10980:	f7ff ff86 	bl	10890 <ticker_by_slot_get>

	if ((ticker_new->ticks_slot == 0) ||
   10984:	f1bb 0f00 	cmp.w	fp, #0
   10988:	d007      	beq.n	1099a <ticker_enqueue+0x7e>
   1098a:	42af      	cmp	r7, r5
   1098c:	d801      	bhi.n	10992 <ticker_enqueue+0x76>
	    ((ticks_slot_previous <= ticks_to_expire) &&
   1098e:	28ff      	cmp	r0, #255	; 0xff
   10990:	d003      	beq.n	1099a <ticker_enqueue+0x7e>

		if (current != TICKER_NULL) {
			node[current].ticks_to_expire -= ticks_to_expire;
		}
	} else {
		if (ticks_slot_previous > ticks_to_expire) {
   10992:	42af      	cmp	r7, r5
   10994:	d918      	bls.n	109c8 <ticker_enqueue+0xac>
			id = ticker_id_slot_previous;
   10996:	9801      	ldr	r0, [sp, #4]
   10998:	e016      	b.n	109c8 <ticker_enqueue+0xac>
		ticker_new->ticks_to_expire = ticks_to_expire;
   1099a:	f8ca 5008 	str.w	r5, [sl, #8]
		ticker_new->next = current;
   1099e:	9b03      	ldr	r3, [sp, #12]
   109a0:	54f4      	strb	r4, [r6, r3]
		if (previous == current) {
   109a2:	45a0      	cmp	r8, r4
   109a4:	d013      	beq.n	109ce <ticker_enqueue+0xb2>
			node[previous].next = id;
   109a6:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
   109aa:	ea4f 0388 	mov.w	r3, r8, lsl #2
   109ae:	f89d 2008 	ldrb.w	r2, [sp, #8]
   109b2:	54f2      	strb	r2, [r6, r3]
		if (current != TICKER_NULL) {
   109b4:	2cff      	cmp	r4, #255	; 0xff
   109b6:	d00f      	beq.n	109d8 <ticker_enqueue+0xbc>
			node[current].ticks_to_expire -= ticks_to_expire;
   109b8:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   109bc:	00a3      	lsls	r3, r4, #2
   109be:	441e      	add	r6, r3
   109c0:	68b3      	ldr	r3, [r6, #8]
   109c2:	1b5d      	subs	r5, r3, r5
   109c4:	60b5      	str	r5, [r6, #8]
   109c6:	9802      	ldr	r0, [sp, #8]
			id = collide;
		}
	}

	return id;
}
   109c8:	b005      	add	sp, #20
   109ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			instance->ticker_id_head = id;
   109ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
   109d2:	f889 3018 	strb.w	r3, [r9, #24]
   109d6:	e7ed      	b.n	109b4 <ticker_enqueue+0x98>
   109d8:	9802      	ldr	r0, [sp, #8]
   109da:	e7f5      	b.n	109c8 <ticker_enqueue+0xac>

000109dc <ticker_dequeue>:

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
   109dc:	b4f0      	push	{r4, r5, r6, r7}
	u32_t timeout;
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
   109de:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
   109e0:	7e07      	ldrb	r7, [r0, #24]
	current = previous;
   109e2:	463b      	mov	r3, r7
	total = 0;
   109e4:	2500      	movs	r5, #0
	ticker_current = 0;
   109e6:	462c      	mov	r4, r5
	while (current != TICKER_NULL) {
   109e8:	2bff      	cmp	r3, #255	; 0xff
   109ea:	d00a      	beq.n	10a02 <ticker_dequeue+0x26>

		ticker_current = &node[current];
   109ec:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
   109f0:	00a2      	lsls	r2, r4, #2
   109f2:	18b4      	adds	r4, r6, r2

		if (current == id) {
   109f4:	428b      	cmp	r3, r1
   109f6:	d004      	beq.n	10a02 <ticker_dequeue+0x26>
			break;
		}

		total += ticker_current->ticks_to_expire;
   109f8:	68a7      	ldr	r7, [r4, #8]
   109fa:	443d      	add	r5, r7
		previous = current;
   109fc:	461f      	mov	r7, r3
		current = ticker_current->next;
   109fe:	5cb3      	ldrb	r3, [r6, r2]
   10a00:	e7f2      	b.n	109e8 <ticker_dequeue+0xc>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
   10a02:	2bff      	cmp	r3, #255	; 0xff
   10a04:	d017      	beq.n	10a36 <ticker_dequeue+0x5a>
		return 0;
	}

	/* ticker is the first in the list */
	if (previous == current) {
   10a06:	429f      	cmp	r7, r3
   10a08:	d012      	beq.n	10a30 <ticker_dequeue+0x54>
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
   10a0a:	68a0      	ldr	r0, [r4, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
   10a0c:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
   10a10:	00bb      	lsls	r3, r7, #2
   10a12:	7822      	ldrb	r2, [r4, #0]
   10a14:	54f2      	strb	r2, [r6, r3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
   10a16:	7823      	ldrb	r3, [r4, #0]
   10a18:	2bff      	cmp	r3, #255	; 0xff
   10a1a:	d006      	beq.n	10a2a <ticker_dequeue+0x4e>
		node[ticker_current->next].ticks_to_expire += timeout;
   10a1c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10a20:	009a      	lsls	r2, r3, #2
   10a22:	4416      	add	r6, r2
   10a24:	68b3      	ldr	r3, [r6, #8]
   10a26:	4403      	add	r3, r0
   10a28:	60b3      	str	r3, [r6, #8]
	}

	return (total + timeout);
   10a2a:	4428      	add	r0, r5
}
   10a2c:	bcf0      	pop	{r4, r5, r6, r7}
   10a2e:	4770      	bx	lr
		instance->ticker_id_head = ticker_current->next;
   10a30:	7823      	ldrb	r3, [r4, #0]
   10a32:	7603      	strb	r3, [r0, #24]
   10a34:	e7e9      	b.n	10a0a <ticker_dequeue+0x2e>
		return 0;
   10a36:	2000      	movs	r0, #0
   10a38:	e7f8      	b.n	10a2c <ticker_dequeue+0x50>
	...

00010a3c <ticker_remainder_inc>:
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
   10a3c:	69c3      	ldr	r3, [r0, #28]
   10a3e:	6a02      	ldr	r2, [r0, #32]
   10a40:	4413      	add	r3, r2
   10a42:	6203      	str	r3, [r0, #32]
	if ((ticker->remainder_current < BIT(31)) &&
   10a44:	4a05      	ldr	r2, [pc, #20]	; (10a5c <ticker_remainder_inc+0x20>)
   10a46:	441a      	add	r2, r3
   10a48:	4905      	ldr	r1, [pc, #20]	; (10a60 <ticker_remainder_inc+0x24>)
   10a4a:	428a      	cmp	r2, r1
   10a4c:	d804      	bhi.n	10a58 <ticker_remainder_inc+0x1c>
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
   10a4e:	4a05      	ldr	r2, [pc, #20]	; (10a64 <ticker_remainder_inc+0x28>)
   10a50:	441a      	add	r2, r3
   10a52:	6202      	str	r2, [r0, #32]
		return 1;
   10a54:	2001      	movs	r0, #1
   10a56:	4770      	bx	lr
	}
	return 0;
   10a58:	2000      	movs	r0, #0
}
   10a5a:	4770      	bx	lr
   10a5c:	ff172b5a 	.word	0xff172b5a
   10a60:	7f172b59 	.word	0x7f172b59
   10a64:	fe2e56b6 	.word	0xfe2e56b6

00010a68 <ticker_remainder_dec>:

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
   10a68:	4603      	mov	r3, r0
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
   10a6a:	6a01      	ldr	r1, [r0, #32]
   10a6c:	4a07      	ldr	r2, [pc, #28]	; (10a8c <ticker_remainder_dec+0x24>)
   10a6e:	440a      	add	r2, r1
   10a70:	4807      	ldr	r0, [pc, #28]	; (10a90 <ticker_remainder_dec+0x28>)
   10a72:	4282      	cmp	r2, r0
   10a74:	d908      	bls.n	10a88 <ticker_remainder_dec+0x20>
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
   10a76:	4a07      	ldr	r2, [pc, #28]	; (10a94 <ticker_remainder_dec+0x2c>)
   10a78:	440a      	add	r2, r1
   10a7a:	621a      	str	r2, [r3, #32]
		decrement++;
   10a7c:	2001      	movs	r0, #1
	}
	ticker->remainder_current -= ticker->remainder_periodic;
   10a7e:	69d9      	ldr	r1, [r3, #28]
   10a80:	6a1a      	ldr	r2, [r3, #32]
   10a82:	1a52      	subs	r2, r2, r1
   10a84:	621a      	str	r2, [r3, #32]

	return decrement;
}
   10a86:	4770      	bx	lr
	u8_t decrement = 0;
   10a88:	2000      	movs	r0, #0
   10a8a:	e7f8      	b.n	10a7e <ticker_remainder_dec+0x16>
   10a8c:	ff172b5a 	.word	0xff172b5a
   10a90:	7f172b59 	.word	0x7f172b59
   10a94:	01d1a94a 	.word	0x01d1a94a

00010a98 <ticker_job_op_cb>:

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
   10a98:	b510      	push	{r4, lr}
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10a9a:	2300      	movs	r3, #0
   10a9c:	7003      	strb	r3, [r0, #0]
	user_op->status = status;
   10a9e:	6201      	str	r1, [r0, #32]
	if (user_op->fp_op_func) {
   10aa0:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10aa2:	b11c      	cbz	r4, 10aac <ticker_job_op_cb+0x14>
   10aa4:	460a      	mov	r2, r1
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10aa6:	6a81      	ldr	r1, [r0, #40]	; 0x28
   10aa8:	4610      	mov	r0, r2
   10aaa:	47a0      	blx	r4
   10aac:	bd10      	pop	{r4, pc}

00010aae <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
   10aae:	b508      	push	{r3, lr}
	cntr_cmp_set(1, value);
   10ab0:	4601      	mov	r1, r0
   10ab2:	2001      	movs	r0, #1
   10ab4:	f7fe fd40 	bl	f538 <cntr_cmp_set>
   10ab8:	bd08      	pop	{r3, pc}

00010aba <ticker_instance0_cmp_set>:
{
   10aba:	b508      	push	{r3, lr}
	cntr_cmp_set(0, value);
   10abc:	4601      	mov	r1, r0
   10abe:	2000      	movs	r0, #0
   10ac0:	f7fe fd3a 	bl	f538 <cntr_cmp_set>
   10ac4:	bd08      	pop	{r3, pc}
	...

00010ac8 <ticker_instance1_sched>:
{
   10ac8:	b508      	push	{r3, lr}
	switch (caller_id) {
   10aca:	2803      	cmp	r0, #3
   10acc:	d841      	bhi.n	10b52 <ticker_instance1_sched+0x8a>
   10ace:	e8df f000 	tbb	[pc, r0]
   10ad2:	1002      	.short	0x1002
   10ad4:	331d      	.short	0x331d
		switch (callee_id) {
   10ad6:	2901      	cmp	r1, #1
   10ad8:	d105      	bne.n	10ae6 <ticker_instance1_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   10ada:	4b21      	ldr	r3, [pc, #132]	; (10b60 <ticker_instance1_sched+0x98>)
   10adc:	2102      	movs	r1, #2
   10ade:	2000      	movs	r0, #0
   10ae0:	f7fe fb12 	bl	f108 <mayfly_enqueue>
		break;
   10ae4:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10ae6:	4040      	eors	r0, r0
   10ae8:	f380 8811 	msr	BASEPRI, r0
   10aec:	f04f 0004 	mov.w	r0, #4
   10af0:	df02      	svc	2
		switch (callee_id) {
   10af2:	2902      	cmp	r1, #2
   10af4:	d104      	bne.n	10b00 <ticker_instance1_sched+0x38>
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10af6:	4b1b      	ldr	r3, [pc, #108]	; (10b64 <ticker_instance1_sched+0x9c>)
   10af8:	4608      	mov	r0, r1
   10afa:	f7fe fb05 	bl	f108 <mayfly_enqueue>
		break;
   10afe:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10b00:	4040      	eors	r0, r0
   10b02:	f380 8811 	msr	BASEPRI, r0
   10b06:	f04f 0004 	mov.w	r0, #4
   10b0a:	df02      	svc	2
		switch (callee_id) {
   10b0c:	2901      	cmp	r1, #1
   10b0e:	d007      	beq.n	10b20 <ticker_instance1_sched+0x58>
   10b10:	2902      	cmp	r1, #2
   10b12:	d00b      	beq.n	10b2c <ticker_instance1_sched+0x64>
			LL_ASSERT(0);
   10b14:	4040      	eors	r0, r0
   10b16:	f380 8811 	msr	BASEPRI, r0
   10b1a:	f04f 0004 	mov.w	r0, #4
   10b1e:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10b20:	4b11      	ldr	r3, [pc, #68]	; (10b68 <ticker_instance1_sched+0xa0>)
   10b22:	2102      	movs	r1, #2
   10b24:	4608      	mov	r0, r1
   10b26:	f7fe faef 	bl	f108 <mayfly_enqueue>
		break;
   10b2a:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10b2c:	4b0f      	ldr	r3, [pc, #60]	; (10b6c <ticker_instance1_sched+0xa4>)
   10b2e:	2102      	movs	r1, #2
   10b30:	4608      	mov	r0, r1
   10b32:	f7fe fae9 	bl	f108 <mayfly_enqueue>
		break;
   10b36:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   10b38:	2902      	cmp	r1, #2
   10b3a:	d104      	bne.n	10b46 <ticker_instance1_sched+0x7e>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   10b3c:	4b0c      	ldr	r3, [pc, #48]	; (10b70 <ticker_instance1_sched+0xa8>)
   10b3e:	2003      	movs	r0, #3
   10b40:	f7fe fae2 	bl	f108 <mayfly_enqueue>
		break;
   10b44:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10b46:	4040      	eors	r0, r0
   10b48:	f380 8811 	msr	BASEPRI, r0
   10b4c:	f04f 0004 	mov.w	r0, #4
   10b50:	df02      	svc	2
		LL_ASSERT(0);
   10b52:	4040      	eors	r0, r0
   10b54:	f380 8811 	msr	BASEPRI, r0
   10b58:	f04f 0004 	mov.w	r0, #4
   10b5c:	df02      	svc	2
   10b5e:	bf00      	nop
   10b60:	2000bcd0 	.word	0x2000bcd0
   10b64:	2000bce0 	.word	0x2000bce0
   10b68:	2000bcf0 	.word	0x2000bcf0
   10b6c:	2000bd00 	.word	0x2000bd00
   10b70:	2000bd10 	.word	0x2000bd10

00010b74 <ticker_instance1_caller_id_get>:
	switch (user_id) {
   10b74:	1e83      	subs	r3, r0, #2
   10b76:	2b01      	cmp	r3, #1
   10b78:	d800      	bhi.n	10b7c <ticker_instance1_caller_id_get+0x8>
}
   10b7a:	4770      	bx	lr
		LL_ASSERT(0);
   10b7c:	4040      	eors	r0, r0
   10b7e:	f380 8811 	msr	BASEPRI, r0
   10b82:	f04f 0004 	mov.w	r0, #4
   10b86:	df02      	svc	2

00010b88 <ticker_instance0_sched>:
{
   10b88:	b508      	push	{r3, lr}
	switch (caller_id) {
   10b8a:	2803      	cmp	r0, #3
   10b8c:	d843      	bhi.n	10c16 <ticker_instance0_sched+0x8e>
   10b8e:	e8df f000 	tbb	[pc, r0]
   10b92:	1002      	.short	0x1002
   10b94:	341e      	.short	0x341e
		switch (callee_id) {
   10b96:	2901      	cmp	r1, #1
   10b98:	d105      	bne.n	10ba6 <ticker_instance0_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   10b9a:	4b22      	ldr	r3, [pc, #136]	; (10c24 <ticker_instance0_sched+0x9c>)
   10b9c:	2100      	movs	r1, #0
   10b9e:	4608      	mov	r0, r1
   10ba0:	f7fe fab2 	bl	f108 <mayfly_enqueue>
		break;
   10ba4:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10ba6:	4040      	eors	r0, r0
   10ba8:	f380 8811 	msr	BASEPRI, r0
   10bac:	f04f 0004 	mov.w	r0, #4
   10bb0:	df02      	svc	2
		switch (callee_id) {
   10bb2:	2902      	cmp	r1, #2
   10bb4:	d105      	bne.n	10bc2 <ticker_instance0_sched+0x3a>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   10bb6:	4b1c      	ldr	r3, [pc, #112]	; (10c28 <ticker_instance0_sched+0xa0>)
   10bb8:	2101      	movs	r1, #1
   10bba:	2000      	movs	r0, #0
   10bbc:	f7fe faa4 	bl	f108 <mayfly_enqueue>
		break;
   10bc0:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10bc2:	4040      	eors	r0, r0
   10bc4:	f380 8811 	msr	BASEPRI, r0
   10bc8:	f04f 0004 	mov.w	r0, #4
   10bcc:	df02      	svc	2
		switch (callee_id) {
   10bce:	2901      	cmp	r1, #1
   10bd0:	d007      	beq.n	10be2 <ticker_instance0_sched+0x5a>
   10bd2:	2902      	cmp	r1, #2
   10bd4:	d00b      	beq.n	10bee <ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   10bd6:	4040      	eors	r0, r0
   10bd8:	f380 8811 	msr	BASEPRI, r0
   10bdc:	f04f 0004 	mov.w	r0, #4
   10be0:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   10be2:	4b12      	ldr	r3, [pc, #72]	; (10c2c <ticker_instance0_sched+0xa4>)
   10be4:	2100      	movs	r1, #0
   10be6:	2001      	movs	r0, #1
   10be8:	f7fe fa8e 	bl	f108 <mayfly_enqueue>
		break;
   10bec:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   10bee:	4b10      	ldr	r3, [pc, #64]	; (10c30 <ticker_instance0_sched+0xa8>)
   10bf0:	2101      	movs	r1, #1
   10bf2:	4608      	mov	r0, r1
   10bf4:	f7fe fa88 	bl	f108 <mayfly_enqueue>
		break;
   10bf8:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   10bfa:	2902      	cmp	r1, #2
   10bfc:	d105      	bne.n	10c0a <ticker_instance0_sched+0x82>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   10bfe:	4b0d      	ldr	r3, [pc, #52]	; (10c34 <ticker_instance0_sched+0xac>)
   10c00:	2101      	movs	r1, #1
   10c02:	2003      	movs	r0, #3
   10c04:	f7fe fa80 	bl	f108 <mayfly_enqueue>
		break;
   10c08:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10c0a:	4040      	eors	r0, r0
   10c0c:	f380 8811 	msr	BASEPRI, r0
   10c10:	f04f 0004 	mov.w	r0, #4
   10c14:	df02      	svc	2
		LL_ASSERT(0);
   10c16:	4040      	eors	r0, r0
   10c18:	f380 8811 	msr	BASEPRI, r0
   10c1c:	f04f 0004 	mov.w	r0, #4
   10c20:	df02      	svc	2
   10c22:	bf00      	nop
   10c24:	2000bc80 	.word	0x2000bc80
   10c28:	2000bc90 	.word	0x2000bc90
   10c2c:	2000bca0 	.word	0x2000bca0
   10c30:	2000bcb0 	.word	0x2000bcb0
   10c34:	2000bcc0 	.word	0x2000bcc0

00010c38 <ticker_instance0_caller_id_get>:
	switch (user_id) {
   10c38:	2801      	cmp	r0, #1
   10c3a:	d00a      	beq.n	10c52 <ticker_instance0_caller_id_get+0x1a>
   10c3c:	b138      	cbz	r0, 10c4e <ticker_instance0_caller_id_get+0x16>
   10c3e:	2803      	cmp	r0, #3
   10c40:	d008      	beq.n	10c54 <ticker_instance0_caller_id_get+0x1c>
		LL_ASSERT(0);
   10c42:	4040      	eors	r0, r0
   10c44:	f380 8811 	msr	BASEPRI, r0
   10c48:	f04f 0004 	mov.w	r0, #4
   10c4c:	df02      	svc	2
		return CALL_ID_WORKER;
   10c4e:	2001      	movs	r0, #1
   10c50:	4770      	bx	lr
		return CALL_ID_JOB;
   10c52:	2002      	movs	r0, #2
}
   10c54:	4770      	bx	lr
	...

00010c58 <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
   10c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c5a:	9d05      	ldr	r5, [sp, #20]
   10c5c:	f89d 4018 	ldrb.w	r4, [sp, #24]
	    (sizeof(struct ticker_user) != TICKER_USER_T_SIZE) ||
	    (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
   10c60:	4606      	mov	r6, r0
   10c62:	b118      	cbz	r0, 10c6c <ticker_init+0x14>
   10c64:	2801      	cmp	r0, #1
   10c66:	d019      	beq.n	10c9c <ticker_init+0x44>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
   10c68:	2001      	movs	r0, #1
   10c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
   10c6c:	202c      	movs	r0, #44	; 0x2c
   10c6e:	4f20      	ldr	r7, [pc, #128]	; (10cf0 <ticker_init+0x98>)
   10c70:	fb00 7006 	mla	r0, r0, r6, r7
   10c74:	4f1f      	ldr	r7, [pc, #124]	; (10cf4 <ticker_init+0x9c>)
   10c76:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
   10c78:	4f1f      	ldr	r7, [pc, #124]	; (10cf8 <ticker_init+0xa0>)
   10c7a:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
   10c7c:	4f1f      	ldr	r7, [pc, #124]	; (10cfc <ticker_init+0xa4>)
   10c7e:	6287      	str	r7, [r0, #40]	; 0x28
	}

	instance->count_node = count_node;
   10c80:	f8df e06c 	ldr.w	lr, [pc, #108]	; 10cf0 <ticker_init+0x98>
   10c84:	202c      	movs	r0, #44	; 0x2c
   10c86:	fb00 f006 	mul.w	r0, r0, r6
   10c8a:	eb0e 0700 	add.w	r7, lr, r0
   10c8e:	7239      	strb	r1, [r7, #8]
	instance->node = node;
   10c90:	f84e 2000 	str.w	r2, [lr, r0]

	instance->count_user = count_user;
   10c94:	727b      	strb	r3, [r7, #9]
	instance->user = user;
   10c96:	607d      	str	r5, [r7, #4]
	struct ticker_user_op *user_op_ = (void *)user_op;
   10c98:	9907      	ldr	r1, [sp, #28]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
   10c9a:	e015      	b.n	10cc8 <ticker_init+0x70>
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
   10c9c:	202c      	movs	r0, #44	; 0x2c
   10c9e:	4f14      	ldr	r7, [pc, #80]	; (10cf0 <ticker_init+0x98>)
   10ca0:	fb00 7006 	mla	r0, r0, r6, r7
   10ca4:	4f16      	ldr	r7, [pc, #88]	; (10d00 <ticker_init+0xa8>)
   10ca6:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance1_sched;
   10ca8:	4f16      	ldr	r7, [pc, #88]	; (10d04 <ticker_init+0xac>)
   10caa:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance1_cmp_set;
   10cac:	4f16      	ldr	r7, [pc, #88]	; (10d08 <ticker_init+0xb0>)
   10cae:	6287      	str	r7, [r0, #40]	; 0x28
		break;
   10cb0:	e7e6      	b.n	10c80 <ticker_init+0x28>
		users[count_user].user_op = user_op_;
   10cb2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   10cb6:	6059      	str	r1, [r3, #4]
		user_op_ += users[count_user].count_user_op;
   10cb8:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   10cbc:	202c      	movs	r0, #44	; 0x2c
   10cbe:	fb00 1103 	mla	r1, r0, r3, r1
		count_op -= users[count_user].count_user_op;
   10cc2:	1ae3      	subs	r3, r4, r3
   10cc4:	b2dc      	uxtb	r4, r3
	while (count_user--) {
   10cc6:	4613      	mov	r3, r2
   10cc8:	1e5a      	subs	r2, r3, #1
   10cca:	b2d2      	uxtb	r2, r2
   10ccc:	2b00      	cmp	r3, #0
   10cce:	d1f0      	bne.n	10cb2 <ticker_init+0x5a>
	}

	if (count_op) {
   10cd0:	b964      	cbnz	r4, 10cec <ticker_init+0x94>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
   10cd2:	222c      	movs	r2, #44	; 0x2c
   10cd4:	4b06      	ldr	r3, [pc, #24]	; (10cf0 <ticker_init+0x98>)
   10cd6:	fb02 3606 	mla	r6, r2, r6, r3
   10cda:	23ff      	movs	r3, #255	; 0xff
   10cdc:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
   10cde:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
   10ce0:	2000      	movs	r0, #0
   10ce2:	8370      	strh	r0, [r6, #26]
	instance->ticks_current = 0;
   10ce4:	6170      	str	r0, [r6, #20]
	instance->ticks_elapsed_first = 0;
   10ce6:	72b0      	strb	r0, [r6, #10]
	instance->ticks_elapsed_last = 0;
   10ce8:	72f0      	strb	r0, [r6, #11]

	return TICKER_STATUS_SUCCESS;
   10cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
   10cec:	2001      	movs	r0, #1
}
   10cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10cf0:	20000f4c 	.word	0x20000f4c
   10cf4:	00010c39 	.word	0x00010c39
   10cf8:	00010b89 	.word	0x00010b89
   10cfc:	00010abb 	.word	0x00010abb
   10d00:	00010b75 	.word	0x00010b75
   10d04:	00010ac9 	.word	0x00010ac9
   10d08:	00010aaf 	.word	0x00010aaf

00010d0c <ticker_trigger>:
{
	return !!(_instance[instance_index].count_node);
}

void ticker_trigger(u8_t instance_index)
{
   10d0c:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
   10d0e:	232c      	movs	r3, #44	; 0x2c
   10d10:	4a04      	ldr	r2, [pc, #16]	; (10d24 <ticker_trigger+0x18>)
   10d12:	fb03 2000 	mla	r0, r3, r0, r2
   10d16:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10d18:	b11b      	cbz	r3, 10d22 <ticker_trigger+0x16>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
   10d1a:	2201      	movs	r2, #1
   10d1c:	4611      	mov	r1, r2
   10d1e:	2000      	movs	r0, #0
   10d20:	4798      	blx	r3
   10d22:	bd08      	pop	{r3, pc}
   10d24:	20000f4c 	.word	0x20000f4c

00010d28 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
   10d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10d2c:	242c      	movs	r4, #44	; 0x2c
   10d2e:	4d24      	ldr	r5, [pc, #144]	; (10dc0 <ticker_start+0x98>)
   10d30:	fb04 5400 	mla	r4, r4, r0, r5
   10d34:	6866      	ldr	r6, [r4, #4]
   10d36:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10d3a:	f89e 4003 	ldrb.w	r4, [lr, #3]
   10d3e:	1c65      	adds	r5, r4, #1
   10d40:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   10d42:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10d46:	42b5      	cmp	r5, r6
   10d48:	d300      	bcc.n	10d4c <ticker_start+0x24>
		last = 0;
   10d4a:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   10d4c:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10d50:	42b5      	cmp	r5, r6
   10d52:	d032      	beq.n	10dba <ticker_start+0x92>
   10d54:	469c      	mov	ip, r3
   10d56:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10d58:	f8de 3004 	ldr.w	r3, [lr, #4]
   10d5c:	f04f 082c 	mov.w	r8, #44	; 0x2c
   10d60:	fb08 f604 	mul.w	r6, r8, r4
   10d64:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_START;
   10d66:	2003      	movs	r0, #3
   10d68:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   10d6a:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
   10d6c:	f8c4 c004 	str.w	ip, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   10d70:	9b06      	ldr	r3, [sp, #24]
   10d72:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   10d74:	9b07      	ldr	r3, [sp, #28]
   10d76:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   10d78:	9b08      	ldr	r3, [sp, #32]
   10d7a:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   10d7c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   10d80:	82e3      	strh	r3, [r4, #22]
	user_op->params.start.lazy = lazy;
   10d82:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10d86:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
   10d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d8a:	61a3      	str	r3, [r4, #24]
	user_op->params.start.context = context;
   10d8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10d8e:	61e3      	str	r3, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
   10d90:	2602      	movs	r6, #2
   10d92:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10d96:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   10d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10d9a:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   10d9c:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10da0:	4b07      	ldr	r3, [pc, #28]	; (10dc0 <ticker_start+0x98>)
   10da2:	fb08 3307 	mla	r3, r8, r7, r3
   10da6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   10da8:	6a1b      	ldr	r3, [r3, #32]
   10daa:	4608      	mov	r0, r1
   10dac:	4798      	blx	r3
   10dae:	2200      	movs	r2, #0
   10db0:	4631      	mov	r1, r6
   10db2:	47a8      	blx	r5

	return user_op->status;
   10db4:	6a20      	ldr	r0, [r4, #32]
   10db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10dba:	2001      	movs	r0, #1
}
   10dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10dc0:	20000f4c 	.word	0x20000f4c

00010dc4 <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
   10dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10dc8:	242c      	movs	r4, #44	; 0x2c
   10dca:	4d24      	ldr	r5, [pc, #144]	; (10e5c <ticker_update+0x98>)
   10dcc:	fb04 5400 	mla	r4, r4, r0, r5
   10dd0:	6866      	ldr	r6, [r4, #4]
   10dd2:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10dd6:	f89e 4003 	ldrb.w	r4, [lr, #3]
   10dda:	1c65      	adds	r5, r4, #1
   10ddc:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   10dde:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10de2:	42b5      	cmp	r5, r6
   10de4:	d300      	bcc.n	10de8 <ticker_update+0x24>
		last = 0;
   10de6:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   10de8:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10dec:	42b5      	cmp	r5, r6
   10dee:	d031      	beq.n	10e54 <ticker_update+0x90>
   10df0:	469c      	mov	ip, r3
   10df2:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10df4:	f8de 3004 	ldr.w	r3, [lr, #4]
   10df8:	f04f 082c 	mov.w	r8, #44	; 0x2c
   10dfc:	fb08 f604 	mul.w	r6, r8, r4
   10e00:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   10e02:	2004      	movs	r0, #4
   10e04:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   10e06:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   10e08:	f8a4 c004 	strh.w	ip, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   10e0c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10e10:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   10e12:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   10e16:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   10e18:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   10e1c:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
   10e1e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10e22:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
   10e24:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   10e28:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
   10e2a:	2602      	movs	r6, #2
   10e2c:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10e30:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   10e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10e34:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   10e36:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10e3a:	4b08      	ldr	r3, [pc, #32]	; (10e5c <ticker_update+0x98>)
   10e3c:	fb08 3307 	mla	r3, r8, r7, r3
   10e40:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   10e42:	6a1b      	ldr	r3, [r3, #32]
   10e44:	4608      	mov	r0, r1
   10e46:	4798      	blx	r3
   10e48:	2200      	movs	r2, #0
   10e4a:	4631      	mov	r1, r6
   10e4c:	47a8      	blx	r5

	return user_op->status;
   10e4e:	6a20      	ldr	r0, [r4, #32]
   10e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10e54:	2001      	movs	r0, #1
}
   10e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e5a:	bf00      	nop
   10e5c:	20000f4c 	.word	0x20000f4c

00010e60 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
   10e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10e64:	242c      	movs	r4, #44	; 0x2c
   10e66:	4d1b      	ldr	r5, [pc, #108]	; (10ed4 <ticker_stop+0x74>)
   10e68:	fb04 5400 	mla	r4, r4, r0, r5
   10e6c:	6866      	ldr	r6, [r4, #4]
   10e6e:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10e72:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10e76:	1c6c      	adds	r4, r5, #1
   10e78:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10e7a:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10e7e:	42b4      	cmp	r4, r6
   10e80:	d300      	bcc.n	10e84 <ticker_stop+0x24>
		last = 0;
   10e82:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10e84:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10e88:	42b4      	cmp	r4, r6
   10e8a:	d020      	beq.n	10ece <ticker_stop+0x6e>
   10e8c:	4698      	mov	r8, r3
   10e8e:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10e90:	f8de 3004 	ldr.w	r3, [lr, #4]
   10e94:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   10e98:	fb0c f505 	mul.w	r5, ip, r5
   10e9c:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   10e9e:	2005      	movs	r0, #5
   10ea0:	5558      	strb	r0, [r3, r5]
	user_op->id = ticker_id;
   10ea2:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10ea4:	2502      	movs	r5, #2
   10ea6:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   10ea8:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   10eac:	9b06      	ldr	r3, [sp, #24]
   10eae:	62b3      	str	r3, [r6, #40]	; 0x28

	user->last = last;
   10eb0:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10eb4:	4b07      	ldr	r3, [pc, #28]	; (10ed4 <ticker_stop+0x74>)
   10eb6:	fb0c 3307 	mla	r3, ip, r7, r3
   10eba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10ebc:	6a1b      	ldr	r3, [r3, #32]
   10ebe:	4608      	mov	r0, r1
   10ec0:	4798      	blx	r3
   10ec2:	2200      	movs	r2, #0
   10ec4:	4629      	mov	r1, r5
   10ec6:	47a0      	blx	r4

	return user_op->status;
   10ec8:	6a30      	ldr	r0, [r6, #32]
   10eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10ece:	2001      	movs	r0, #1
}
   10ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ed4:	20000f4c 	.word	0x20000f4c

00010ed8 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
   10ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10edc:	242c      	movs	r4, #44	; 0x2c
   10ede:	4d1f      	ldr	r5, [pc, #124]	; (10f5c <ticker_next_slot_get+0x84>)
   10ee0:	fb04 5400 	mla	r4, r4, r0, r5
   10ee4:	6866      	ldr	r6, [r4, #4]
   10ee6:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10eea:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10eee:	1c6c      	adds	r4, r5, #1
   10ef0:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10ef2:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10ef6:	42b4      	cmp	r4, r6
   10ef8:	d300      	bcc.n	10efc <ticker_next_slot_get+0x24>
		last = 0;
   10efa:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10efc:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10f00:	42b4      	cmp	r4, r6
   10f02:	d027      	beq.n	10f54 <ticker_next_slot_get+0x7c>
   10f04:	469c      	mov	ip, r3
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10f06:	f8de 3004 	ldr.w	r3, [lr, #4]
   10f0a:	f04f 092c 	mov.w	r9, #44	; 0x2c
   10f0e:	fb09 f605 	mul.w	r6, r9, r5
   10f12:	199d      	adds	r5, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   10f14:	f04f 0802 	mov.w	r8, #2
   10f18:	f803 8006 	strb.w	r8, [r3, r6]
	user_op->id = TICKER_NULL;
   10f1c:	23ff      	movs	r3, #255	; 0xff
   10f1e:	706b      	strb	r3, [r5, #1]
	user_op->params.slot_get.ticker_id = ticker_id;
   10f20:	606a      	str	r2, [r5, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
   10f22:	f8c5 c008 	str.w	ip, [r5, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   10f26:	9b08      	ldr	r3, [sp, #32]
   10f28:	60eb      	str	r3, [r5, #12]
	user_op->status = TICKER_STATUS_BUSY;
   10f2a:	f8c5 8020 	str.w	r8, [r5, #32]
	user_op->fp_op_func = fp_op_func;
   10f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f30:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->op_context = op_context;
   10f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10f34:	62ab      	str	r3, [r5, #40]	; 0x28

	user->last = last;
   10f36:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10f3a:	4b08      	ldr	r3, [pc, #32]	; (10f5c <ticker_next_slot_get+0x84>)
   10f3c:	fb09 3300 	mla	r3, r9, r0, r3
   10f40:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10f42:	6a1b      	ldr	r3, [r3, #32]
   10f44:	4608      	mov	r0, r1
   10f46:	4798      	blx	r3
   10f48:	2200      	movs	r2, #0
   10f4a:	4641      	mov	r1, r8
   10f4c:	47a0      	blx	r4

	return user_op->status;
   10f4e:	6a28      	ldr	r0, [r5, #32]
   10f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   10f54:	2001      	movs	r0, #1
}
   10f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10f5a:	bf00      	nop
   10f5c:	20000f4c 	.word	0x20000f4c

00010f60 <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
   10f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10f64:	242c      	movs	r4, #44	; 0x2c
   10f66:	4d1b      	ldr	r5, [pc, #108]	; (10fd4 <ticker_job_idle_get+0x74>)
   10f68:	fb04 5400 	mla	r4, r4, r0, r5
   10f6c:	6866      	ldr	r6, [r4, #4]
   10f6e:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10f72:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10f76:	1c6c      	adds	r4, r5, #1
   10f78:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10f7a:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10f7e:	42b4      	cmp	r4, r6
   10f80:	d300      	bcc.n	10f84 <ticker_job_idle_get+0x24>
		last = 0;
   10f82:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10f84:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10f88:	42b4      	cmp	r4, r6
   10f8a:	d020      	beq.n	10fce <ticker_job_idle_get+0x6e>
   10f8c:	4698      	mov	r8, r3
   10f8e:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10f90:	f8de 3004 	ldr.w	r3, [lr, #4]
   10f94:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   10f98:	fb0c f505 	mul.w	r5, ip, r5
   10f9c:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   10f9e:	2001      	movs	r0, #1
   10fa0:	5558      	strb	r0, [r3, r5]
	user_op->id = TICKER_NULL;
   10fa2:	23ff      	movs	r3, #255	; 0xff
   10fa4:	7073      	strb	r3, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10fa6:	2502      	movs	r5, #2
   10fa8:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   10faa:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   10fac:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28

	user->last = last;
   10fb0:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10fb4:	4b07      	ldr	r3, [pc, #28]	; (10fd4 <ticker_job_idle_get+0x74>)
   10fb6:	fb0c 3307 	mla	r3, ip, r7, r3
   10fba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10fbc:	6a1b      	ldr	r3, [r3, #32]
   10fbe:	4608      	mov	r0, r1
   10fc0:	4798      	blx	r3
   10fc2:	2200      	movs	r2, #0
   10fc4:	4629      	mov	r1, r5
   10fc6:	47a0      	blx	r4

	return user_op->status;
   10fc8:	6a30      	ldr	r0, [r6, #32]
   10fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10fce:	2001      	movs	r0, #1
}
   10fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10fd4:	20000f4c 	.word	0x20000f4c

00010fd8 <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
   10fd8:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10fda:	232c      	movs	r3, #44	; 0x2c
   10fdc:	4a05      	ldr	r2, [pc, #20]	; (10ff4 <ticker_job_sched+0x1c>)
   10fde:	fb03 2000 	mla	r0, r3, r0, r2
   10fe2:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10fe4:	6a03      	ldr	r3, [r0, #32]
   10fe6:	4608      	mov	r0, r1
   10fe8:	4798      	blx	r3
   10fea:	2200      	movs	r2, #0
   10fec:	2102      	movs	r1, #2
   10fee:	47a0      	blx	r4
   10ff0:	bd10      	pop	{r4, pc}
   10ff2:	bf00      	nop
   10ff4:	20000f4c 	.word	0x20000f4c

00010ff8 <ticker_ticks_now_get>:
}

u32_t ticker_ticks_now_get(void)
{
   10ff8:	b508      	push	{r3, lr}
	return cntr_cnt_get();
   10ffa:	f7fe fa97 	bl	f52c <cntr_cnt_get>
}
   10ffe:	bd08      	pop	{r3, pc}

00011000 <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   11000:	1a40      	subs	r0, r0, r1
}
   11002:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11006:	4770      	bx	lr

00011008 <ticker_worker>:
{
   11008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->worker_trigger = 1;
   1100c:	2301      	movs	r3, #1
   1100e:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
   11010:	f890 901c 	ldrb.w	r9, [r0, #28]
   11014:	f1b9 0f00 	cmp.w	r9, #0
   11018:	d147      	bne.n	110aa <ticker_worker+0xa2>
	if (instance->ticker_id_head == TICKER_NULL) {
   1101a:	7e03      	ldrb	r3, [r0, #24]
   1101c:	2bff      	cmp	r3, #255	; 0xff
   1101e:	d030      	beq.n	11082 <ticker_worker+0x7a>
   11020:	4607      	mov	r7, r0
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   11022:	f7fe fa83 	bl	f52c <cntr_cnt_get>
   11026:	6979      	ldr	r1, [r7, #20]
   11028:	f7ff ffea 	bl	11000 <ticker_ticks_diff_get>
   1102c:	4605      	mov	r5, r0
	ticker_id_head = instance->ticker_id_head;
   1102e:	7e3c      	ldrb	r4, [r7, #24]
	node = &instance->node[0];
   11030:	f8d7 8000 	ldr.w	r8, [r7]
	ticks_expired = 0;
   11034:	2600      	movs	r6, #0
	while (ticker_id_head != TICKER_NULL) {
   11036:	2cff      	cmp	r4, #255	; 0xff
   11038:	d027      	beq.n	1108a <ticker_worker+0x82>
		ticker = &node[ticker_id_head];
   1103a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1103e:	00a3      	lsls	r3, r4, #2
   11040:	eb08 0103 	add.w	r1, r8, r3
		ticks_to_expire = ticker->ticks_to_expire;
   11044:	688a      	ldr	r2, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   11046:	4295      	cmp	r5, r2
   11048:	d31f      	bcc.n	1108a <ticker_worker+0x82>
		ticks_elapsed -= ticks_to_expire;
   1104a:	1aad      	subs	r5, r5, r2
		ticks_expired += ticks_to_expire;
   1104c:	4416      	add	r6, r2
		ticker_id_head = ticker->next;
   1104e:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   11052:	784b      	ldrb	r3, [r1, #1]
   11054:	788a      	ldrb	r2, [r1, #2]
   11056:	1a9b      	subs	r3, r3, r2
   11058:	b2db      	uxtb	r3, r3
   1105a:	2b01      	cmp	r3, #1
   1105c:	d1eb      	bne.n	11036 <ticker_worker+0x2e>
		ticker->ack--;
   1105e:	3a01      	subs	r2, #1
   11060:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   11062:	f8d1 a00c 	ldr.w	sl, [r1, #12]
   11066:	f1ba 0f00 	cmp.w	sl, #0
   1106a:	d0e4      	beq.n	11036 <ticker_worker+0x2e>
			ticks_at_expire = (instance->ticks_current +
   1106c:	6978      	ldr	r0, [r7, #20]
   1106e:	4430      	add	r0, r6
					   ticker->ticks_to_expire_minus) &
   11070:	8a8b      	ldrh	r3, [r1, #20]
					   ticks_expired -
   11072:	1ac0      	subs	r0, r0, r3
			ticker->timeout_func(ticks_at_expire,
   11074:	690b      	ldr	r3, [r1, #16]
   11076:	8b4a      	ldrh	r2, [r1, #26]
   11078:	6a09      	ldr	r1, [r1, #32]
   1107a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1107e:	47d0      	blx	sl
   11080:	e7d9      	b.n	11036 <ticker_worker+0x2e>
		instance->worker_trigger = 0;
   11082:	2300      	movs	r3, #0
   11084:	7743      	strb	r3, [r0, #29]
		return;
   11086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1108a:	7aba      	ldrb	r2, [r7, #10]
   1108c:	7afb      	ldrb	r3, [r7, #11]
   1108e:	429a      	cmp	r2, r3
   11090:	d00d      	beq.n	110ae <ticker_worker+0xa6>
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   11092:	7afb      	ldrb	r3, [r7, #11]
   11094:	3302      	adds	r3, #2
   11096:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   1109a:	605e      	str	r6, [r3, #4]
	instance->worker_trigger = 0;
   1109c:	2300      	movs	r3, #0
   1109e:	777b      	strb	r3, [r7, #29]
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
   110a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   110a2:	2201      	movs	r2, #1
   110a4:	2102      	movs	r1, #2
   110a6:	4610      	mov	r0, r2
   110a8:	4798      	blx	r3
   110aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		last = instance->ticks_elapsed_last + 1;
   110ae:	3301      	adds	r3, #1
   110b0:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   110b2:	2b02      	cmp	r3, #2
   110b4:	d001      	beq.n	110ba <ticker_worker+0xb2>
		instance->ticks_elapsed_last = last;
   110b6:	72fb      	strb	r3, [r7, #11]
   110b8:	e7eb      	b.n	11092 <ticker_worker+0x8a>
			last = 0;
   110ba:	464b      	mov	r3, r9
   110bc:	e7fb      	b.n	110b6 <ticker_worker+0xae>

000110be <ticks_to_expire_prep>:
{
   110be:	b570      	push	{r4, r5, r6, lr}
   110c0:	4606      	mov	r6, r0
   110c2:	4608      	mov	r0, r1
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   110c4:	68b4      	ldr	r4, [r6, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   110c6:	8ab5      	ldrh	r5, [r6, #20]
	if (((ticks_at_start - ticks_current) & BIT(23)) == 0) {
   110c8:	1a51      	subs	r1, r2, r1
   110ca:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
   110ce:	d10c      	bne.n	110ea <ticks_to_expire_prep+0x2c>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   110d0:	4601      	mov	r1, r0
   110d2:	4610      	mov	r0, r2
   110d4:	f7ff ff94 	bl	11000 <ticker_ticks_diff_get>
   110d8:	4420      	add	r0, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
   110da:	42a8      	cmp	r0, r5
   110dc:	d812      	bhi.n	11104 <ticks_to_expire_prep+0x46>
		ticks_to_expire_minus -= ticks_to_expire;
   110de:	1a28      	subs	r0, r5, r0
   110e0:	b285      	uxth	r5, r0
		ticks_to_expire = 0;
   110e2:	2000      	movs	r0, #0
	ticker->ticks_to_expire = ticks_to_expire;
   110e4:	60b0      	str	r0, [r6, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   110e6:	82b5      	strh	r5, [r6, #20]
   110e8:	bd70      	pop	{r4, r5, r6, pc}
		delta_current_start = ticker_ticks_diff_get(ticks_current,
   110ea:	4611      	mov	r1, r2
   110ec:	f7ff ff88 	bl	11000 <ticker_ticks_diff_get>
		if (ticks_to_expire > delta_current_start) {
   110f0:	4284      	cmp	r4, r0
   110f2:	d901      	bls.n	110f8 <ticks_to_expire_prep+0x3a>
			ticks_to_expire -= delta_current_start;
   110f4:	1a20      	subs	r0, r4, r0
   110f6:	e7f0      	b.n	110da <ticks_to_expire_prep+0x1c>
			    (delta_current_start - ticks_to_expire);
   110f8:	1b00      	subs	r0, r0, r4
			ticks_to_expire_minus +=
   110fa:	fa15 f080 	uxtah	r0, r5, r0
   110fe:	b285      	uxth	r5, r0
			ticks_to_expire = 0;
   11100:	2000      	movs	r0, #0
   11102:	e7ea      	b.n	110da <ticks_to_expire_prep+0x1c>
		ticks_to_expire -= ticks_to_expire_minus;
   11104:	1b40      	subs	r0, r0, r5
		ticks_to_expire_minus = 0;
   11106:	2500      	movs	r5, #0
   11108:	e7ec      	b.n	110e4 <ticks_to_expire_prep+0x26>

0001110a <ticker_job>:
{
   1110a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1110e:	b08d      	sub	sp, #52	; 0x34
	if (instance->worker_trigger) {
   11110:	7f43      	ldrb	r3, [r0, #29]
   11112:	9301      	str	r3, [sp, #4]
   11114:	2b00      	cmp	r3, #0
   11116:	f040 8254 	bne.w	115c2 <ticker_job+0x4b8>
	instance->job_guard = 1;
   1111a:	2301      	movs	r3, #1
   1111c:	7703      	strb	r3, [r0, #28]
	ticks_previous = instance->ticks_current;
   1111e:	6943      	ldr	r3, [r0, #20]
   11120:	930b      	str	r3, [sp, #44]	; 0x2c
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   11122:	7a83      	ldrb	r3, [r0, #10]
   11124:	7ac2      	ldrb	r2, [r0, #11]
   11126:	4293      	cmp	r3, r2
   11128:	d021      	beq.n	1116e <ticker_job+0x64>
		first = instance->ticks_elapsed_first + 1;
   1112a:	3301      	adds	r3, #1
   1112c:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   1112e:	2b02      	cmp	r3, #2
   11130:	d100      	bne.n	11134 <ticker_job+0x2a>
			first = 0;
   11132:	9b01      	ldr	r3, [sp, #4]
		instance->ticks_elapsed_first = first;
   11134:	7283      	strb	r3, [r0, #10]
		ticks_elapsed =
   11136:	3302      	adds	r3, #2
   11138:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1113c:	685b      	ldr	r3, [r3, #4]
   1113e:	9303      	str	r3, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   11140:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11142:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= 0x00FFFFFF;
   11144:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   11148:	6143      	str	r3, [r0, #20]
		flag_elapsed = 1;
   1114a:	2301      	movs	r3, #1
   1114c:	9304      	str	r3, [sp, #16]
   1114e:	9000      	str	r0, [sp, #0]
	ticker_id_old_head = instance->ticker_id_head;
   11150:	7e03      	ldrb	r3, [r0, #24]
   11152:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->node[0];
   11154:	6803      	ldr	r3, [r0, #0]
   11156:	4619      	mov	r1, r3
	users = &instance->user[0];
   11158:	6843      	ldr	r3, [r0, #4]
   1115a:	9305      	str	r3, [sp, #20]
	count_user = instance->count_user;
   1115c:	7a43      	ldrb	r3, [r0, #9]
	pending = 0;
   1115e:	9a01      	ldr	r2, [sp, #4]
   11160:	920a      	str	r2, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   11162:	f04f 0bff 	mov.w	fp, #255	; 0xff
   11166:	f8cd b01c 	str.w	fp, [sp, #28]
   1116a:	468b      	mov	fp, r1
   1116c:	e0cc      	b.n	11308 <ticker_job+0x1fe>
		flag_elapsed = 0;
   1116e:	9b01      	ldr	r3, [sp, #4]
   11170:	9304      	str	r3, [sp, #16]
		ticks_elapsed = 0;
   11172:	2300      	movs	r3, #0
   11174:	9303      	str	r3, [sp, #12]
   11176:	e7ea      	b.n	1114e <ticker_job+0x44>
				middle = 0;
   11178:	9b01      	ldr	r3, [sp, #4]
   1117a:	e01d      	b.n	111b8 <ticker_job+0xae>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   1117c:	6872      	ldr	r2, [r6, #4]
   1117e:	bb82      	cbnz	r2, 111e2 <ticker_job+0xd8>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   11180:	68b2      	ldr	r2, [r6, #8]
   11182:	bb72      	cbnz	r2, 111e2 <ticker_job+0xd8>
			     (user_op->params.update.lazy == 0) &&
   11184:	68f2      	ldr	r2, [r6, #12]
   11186:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1118a:	d12a      	bne.n	111e2 <ticker_job+0xd8>
				ticker_job_op_cb(user_op,
   1118c:	2101      	movs	r1, #1
   1118e:	4630      	mov	r0, r6
   11190:	f7ff fc82 	bl	10a98 <ticker_job_op_cb>
		while (user->middle != user->last) {
   11194:	f894 a002 	ldrb.w	sl, [r4, #2]
   11198:	78e3      	ldrb	r3, [r4, #3]
   1119a:	459a      	cmp	sl, r3
   1119c:	f000 80b3 	beq.w	11306 <ticker_job+0x1fc>
			user_op = &user_ops[user->middle];
   111a0:	f04f 092c 	mov.w	r9, #44	; 0x2c
   111a4:	fb09 f90a 	mul.w	r9, r9, sl
   111a8:	eb08 0609 	add.w	r6, r8, r9
			middle = user->middle + 1;
   111ac:	f10a 0301 	add.w	r3, sl, #1
   111b0:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
   111b2:	7822      	ldrb	r2, [r4, #0]
   111b4:	4293      	cmp	r3, r2
   111b6:	d0df      	beq.n	11178 <ticker_job+0x6e>
			user->middle = middle;
   111b8:	70a3      	strb	r3, [r4, #2]
			ticker = &node[user_op->id];
   111ba:	7873      	ldrb	r3, [r6, #1]
   111bc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   111c0:	009f      	lsls	r7, r3, #2
   111c2:	eb0b 0507 	add.w	r5, fp, r7
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   111c6:	f818 2009 	ldrb.w	r2, [r8, r9]
   111ca:	2a03      	cmp	r2, #3
   111cc:	d9e2      	bls.n	11194 <ticker_job+0x8a>
			state = (ticker->req - ticker->ack) & 0xff;
   111ce:	786b      	ldrb	r3, [r5, #1]
   111d0:	78a9      	ldrb	r1, [r5, #2]
   111d2:	1a5b      	subs	r3, r3, r1
   111d4:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   111d6:	2a05      	cmp	r2, #5
   111d8:	d8d8      	bhi.n	1118c <ticker_job+0x82>
   111da:	2b00      	cmp	r3, #0
   111dc:	d0d6      	beq.n	1118c <ticker_job+0x82>
			    (state == 0) ||
   111de:	2a04      	cmp	r2, #4
   111e0:	d0cc      	beq.n	1117c <ticker_job+0x72>
			if (state == 1) {
   111e2:	2b01      	cmp	r3, #1
   111e4:	f040 8085 	bne.w	112f2 <ticker_job+0x1e8>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   111e8:	7871      	ldrb	r1, [r6, #1]
   111ea:	9800      	ldr	r0, [sp, #0]
   111ec:	f7ff fbf6 	bl	109dc <ticker_dequeue>
   111f0:	60a8      	str	r0, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   111f2:	f818 3009 	ldrb.w	r3, [r8, r9]
   111f6:	2b04      	cmp	r3, #4
   111f8:	d00b      	beq.n	11212 <ticker_job+0x108>
		ticker->req = ticker->ack;
   111fa:	78ab      	ldrb	r3, [r5, #2]
   111fc:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   111fe:	9b00      	ldr	r3, [sp, #0]
   11200:	7e5a      	ldrb	r2, [r3, #25]
   11202:	7873      	ldrb	r3, [r6, #1]
   11204:	429a      	cmp	r2, r3
   11206:	d06e      	beq.n	112e6 <ticker_job+0x1dc>
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   11208:	2100      	movs	r1, #0
   1120a:	4630      	mov	r0, r6
   1120c:	f7ff fc44 	bl	10a98 <ticker_job_op_cb>
   11210:	e7c0      	b.n	11194 <ticker_job+0x8a>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   11212:	9b00      	ldr	r3, [sp, #0]
   11214:	695b      	ldr	r3, [r3, #20]
   11216:	9306      	str	r3, [sp, #24]
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   11218:	4681      	mov	r9, r0
	ticks_now = cntr_cnt_get();
   1121a:	f7fe f987 	bl	f52c <cntr_cnt_get>
   1121e:	9008      	str	r0, [sp, #32]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   11220:	9906      	ldr	r1, [sp, #24]
   11222:	f7ff feed 	bl	11000 <ticker_ticks_diff_get>
   11226:	9b03      	ldr	r3, [sp, #12]
   11228:	4418      	add	r0, r3
	if (ticks_to_expire > ticks_elapsed) {
   1122a:	4581      	cmp	r9, r0
   1122c:	d909      	bls.n	11242 <ticker_job+0x138>
		ticks_to_expire -= ticks_elapsed;
   1122e:	eba9 0900 	sub.w	r9, r9, r0
	if ((ticker->ticks_periodic != 0) &&
   11232:	686b      	ldr	r3, [r5, #4]
   11234:	b37b      	cbz	r3, 11296 <ticker_job+0x18c>
	    (user_op->params.update.lazy != 0)) {
   11236:	89b3      	ldrh	r3, [r6, #12]
	if ((ticker->ticks_periodic != 0) &&
   11238:	b36b      	cbz	r3, 11296 <ticker_job+0x18c>
		user_op->params.update.lazy--;
   1123a:	3b01      	subs	r3, #1
   1123c:	81b3      	strh	r3, [r6, #12]
   1123e:	46a2      	mov	sl, r4
   11240:	e011      	b.n	11266 <ticker_job+0x15c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   11242:	eba0 0909 	sub.w	r9, r0, r9
   11246:	8aab      	ldrh	r3, [r5, #20]
   11248:	fa13 f389 	uxtah	r3, r3, r9
   1124c:	82ab      	strh	r3, [r5, #20]
		ticks_to_expire = 0;
   1124e:	f04f 0900 	mov.w	r9, #0
   11252:	e7ee      	b.n	11232 <ticker_job+0x128>
					   ticker_remainder_dec(ticker);
   11254:	4628      	mov	r0, r5
   11256:	f7ff fc07 	bl	10a68 <ticker_remainder_dec>
			ticks_to_expire -= ticker->ticks_periodic +
   1125a:	4420      	add	r0, r4
   1125c:	eba9 0900 	sub.w	r9, r9, r0
			ticker->lazy_current--;
   11260:	8b6b      	ldrh	r3, [r5, #26]
   11262:	3b01      	subs	r3, #1
   11264:	836b      	strh	r3, [r5, #26]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11266:	686c      	ldr	r4, [r5, #4]
   11268:	454c      	cmp	r4, r9
   1126a:	d237      	bcs.n	112dc <ticker_job+0x1d2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   1126c:	8b6a      	ldrh	r2, [r5, #26]
   1126e:	89b3      	ldrh	r3, [r6, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11270:	429a      	cmp	r2, r3
   11272:	d8ef      	bhi.n	11254 <ticker_job+0x14a>
   11274:	4654      	mov	r4, sl
   11276:	e009      	b.n	1128c <ticker_job+0x182>
			ticks_to_expire += ticker->ticks_periodic +
   11278:	f8d5 a004 	ldr.w	sl, [r5, #4]
					   ticker_remainder_inc(ticker);
   1127c:	4628      	mov	r0, r5
   1127e:	f7ff fbdd 	bl	10a3c <ticker_remainder_inc>
			ticks_to_expire += ticker->ticks_periodic +
   11282:	4450      	add	r0, sl
   11284:	4481      	add	r9, r0
			ticker->lazy_current++;
   11286:	8b6b      	ldrh	r3, [r5, #26]
   11288:	3301      	adds	r3, #1
   1128a:	836b      	strh	r3, [r5, #26]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1128c:	8b6a      	ldrh	r2, [r5, #26]
   1128e:	89b3      	ldrh	r3, [r6, #12]
   11290:	429a      	cmp	r2, r3
   11292:	d3f1      	bcc.n	11278 <ticker_job+0x16e>
		ticker->lazy_periodic = user_op->params.update.lazy;
   11294:	832b      	strh	r3, [r5, #24]
				  user_op->params.update.ticks_drift_plus;
   11296:	88b3      	ldrh	r3, [r6, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   11298:	444b      	add	r3, r9
   1129a:	60ab      	str	r3, [r5, #8]
				user_op->params.update.ticks_drift_minus;
   1129c:	88f3      	ldrh	r3, [r6, #6]
	ticker->ticks_to_expire_minus +=
   1129e:	8aaa      	ldrh	r2, [r5, #20]
   112a0:	4413      	add	r3, r2
   112a2:	82ab      	strh	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   112a4:	9a08      	ldr	r2, [sp, #32]
   112a6:	9906      	ldr	r1, [sp, #24]
   112a8:	4628      	mov	r0, r5
   112aa:	f7ff ff08 	bl	110be <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   112ae:	8933      	ldrh	r3, [r6, #8]
   112b0:	8aea      	ldrh	r2, [r5, #22]
   112b2:	4413      	add	r3, r2
   112b4:	b29b      	uxth	r3, r3
   112b6:	82eb      	strh	r3, [r5, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   112b8:	8972      	ldrh	r2, [r6, #10]
   112ba:	4293      	cmp	r3, r2
   112bc:	d910      	bls.n	112e0 <ticker_job+0x1d6>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   112be:	1a9b      	subs	r3, r3, r2
   112c0:	82eb      	strh	r3, [r5, #22]
	if (user_op->params.update.force != 0) {
   112c2:	7bb3      	ldrb	r3, [r6, #14]
   112c4:	b103      	cbz	r3, 112c8 <ticker_job+0x1be>
		ticker->force = user_op->params.update.force;
   112c6:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
   112c8:	f89d 301c 	ldrb.w	r3, [sp, #28]
   112cc:	f80b 3007 	strb.w	r3, [fp, r7]
	*insert_head = user_op->id;
   112d0:	7873      	ldrb	r3, [r6, #1]
   112d2:	9307      	str	r3, [sp, #28]
		ticker->req++;
   112d4:	786b      	ldrb	r3, [r5, #1]
   112d6:	3301      	adds	r3, #1
   112d8:	706b      	strb	r3, [r5, #1]
   112da:	e795      	b.n	11208 <ticker_job+0xfe>
   112dc:	4654      	mov	r4, sl
   112de:	e7d5      	b.n	1128c <ticker_job+0x182>
		ticker->ticks_slot = 0;
   112e0:	2300      	movs	r3, #0
   112e2:	82eb      	strh	r3, [r5, #22]
   112e4:	e7ed      	b.n	112c2 <ticker_job+0x1b8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   112e6:	23ff      	movs	r3, #255	; 0xff
   112e8:	9900      	ldr	r1, [sp, #0]
   112ea:	764b      	strb	r3, [r1, #25]
			instance->ticks_slot_previous = 0;
   112ec:	2300      	movs	r3, #0
   112ee:	834b      	strh	r3, [r1, #26]
   112f0:	e78a      	b.n	11208 <ticker_job+0xfe>
				instance->fp_sched(CALL_ID_JOB, CALL_ID_JOB, 1);
   112f2:	9b00      	ldr	r3, [sp, #0]
   112f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   112f6:	2201      	movs	r2, #1
   112f8:	2102      	movs	r1, #2
   112fa:	4608      	mov	r0, r1
   112fc:	4798      	blx	r3
				user->middle = prev;
   112fe:	f884 a002 	strb.w	sl, [r4, #2]
				pending = 1;
   11302:	2301      	movs	r3, #1
   11304:	930a      	str	r3, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   11306:	9b02      	ldr	r3, [sp, #8]
	while (count_user--) {
   11308:	1e5a      	subs	r2, r3, #1
   1130a:	b2d2      	uxtb	r2, r2
   1130c:	9202      	str	r2, [sp, #8]
   1130e:	b133      	cbz	r3, 1131e <ticker_job+0x214>
		user = &users[count_user];
   11310:	9b05      	ldr	r3, [sp, #20]
   11312:	9a02      	ldr	r2, [sp, #8]
   11314:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   11318:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1131c:	e73a      	b.n	11194 <ticker_job+0x8a>
   1131e:	9306      	str	r3, [sp, #24]
   11320:	f8dd b01c 	ldr.w	fp, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
   11324:	9b00      	ldr	r3, [sp, #0]
   11326:	7e1b      	ldrb	r3, [r3, #24]
   11328:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1132a:	429a      	cmp	r2, r3
   1132c:	d00a      	beq.n	11344 <ticker_job+0x23a>
		flag_compare_update = 1;
   1132e:	2301      	movs	r3, #1
   11330:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   11332:	9b04      	ldr	r3, [sp, #16]
   11334:	b94b      	cbnz	r3, 1134a <ticker_job+0x240>
	node = &instance->node[0];
   11336:	9a00      	ldr	r2, [sp, #0]
   11338:	6813      	ldr	r3, [r2, #0]
   1133a:	9302      	str	r3, [sp, #8]
	users = &instance->user[0];
   1133c:	6853      	ldr	r3, [r2, #4]
   1133e:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
   11340:	7a53      	ldrb	r3, [r2, #9]
   11342:	e117      	b.n	11574 <ticker_job+0x46a>
	flag_compare_update = 0;
   11344:	9b06      	ldr	r3, [sp, #24]
   11346:	9308      	str	r3, [sp, #32]
   11348:	e7f3      	b.n	11332 <ticker_job+0x228>
	node = &instance->node[0];
   1134a:	9e00      	ldr	r6, [sp, #0]
   1134c:	f8d6 9000 	ldr.w	r9, [r6]
	ticks_expired = 0;
   11350:	f04f 0a00 	mov.w	sl, #0
   11354:	f8cd b004 	str.w	fp, [sp, #4]
   11358:	e02f      	b.n	113ba <ticker_job+0x2b0>
   1135a:	f8dd b004 	ldr.w	fp, [sp, #4]
			ticker->ticks_to_expire -= ticks_elapsed;
   1135e:	1a9b      	subs	r3, r3, r2
   11360:	60ab      	str	r3, [r5, #8]
		if (instance->ticker_id_head != ticker_id_old_head) {
   11362:	9b00      	ldr	r3, [sp, #0]
   11364:	7e1b      	ldrb	r3, [r3, #24]
   11366:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11368:	429a      	cmp	r2, r3
   1136a:	d0e4      	beq.n	11336 <ticker_job+0x22c>
			flag_compare_update = 1;
   1136c:	9b04      	ldr	r3, [sp, #16]
   1136e:	9308      	str	r3, [sp, #32]
   11370:	e7e1      	b.n	11336 <ticker_job+0x22c>
			instance->ticker_id_slot_previous = TICKER_NULL;
   11372:	23ff      	movs	r3, #255	; 0xff
   11374:	7673      	strb	r3, [r6, #25]
			instance->ticks_slot_previous = 0;
   11376:	2300      	movs	r3, #0
   11378:	8373      	strh	r3, [r6, #26]
   1137a:	e036      	b.n	113ea <ticker_job+0x2e0>
				ticks_to_expire += ticker->ticks_periodic;
   1137c:	686c      	ldr	r4, [r5, #4]
   1137e:	4404      	add	r4, r0
				ticks_to_expire += ticker_remainder_inc(ticker);
   11380:	4628      	mov	r0, r5
   11382:	f7ff fb5b 	bl	10a3c <ticker_remainder_inc>
   11386:	4420      	add	r0, r4
			while (count--) {
   11388:	463b      	mov	r3, r7
   1138a:	1e5f      	subs	r7, r3, #1
   1138c:	2b00      	cmp	r3, #0
   1138e:	d1f5      	bne.n	1137c <ticker_job+0x272>
			ticker->ticks_to_expire = ticks_to_expire;
   11390:	60a8      	str	r0, [r5, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   11392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11394:	eb03 020a 	add.w	r2, r3, sl
   11398:	6971      	ldr	r1, [r6, #20]
   1139a:	4628      	mov	r0, r5
   1139c:	f7ff fe8f 	bl	110be <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   113a0:	8b2b      	ldrh	r3, [r5, #24]
   113a2:	836b      	strh	r3, [r5, #26]
			ticker->force = 0;
   113a4:	2300      	movs	r3, #0
   113a6:	70eb      	strb	r3, [r5, #3]
			ticker->next = *insert_head;
   113a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   113ac:	f809 300b 	strb.w	r3, [r9, fp]
			ticker->req++;
   113b0:	786b      	ldrb	r3, [r5, #1]
   113b2:	3301      	adds	r3, #1
   113b4:	706b      	strb	r3, [r5, #1]
			*insert_head = id_expired;
   113b6:	f8cd 8004 	str.w	r8, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   113ba:	f896 8018 	ldrb.w	r8, [r6, #24]
   113be:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   113c2:	d026      	beq.n	11412 <ticker_job+0x308>
		ticker = &node[id_expired];
   113c4:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
   113c8:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   113cc:	eb09 050b 	add.w	r5, r9, fp
		ticks_to_expire = ticker->ticks_to_expire;
   113d0:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   113d2:	9a03      	ldr	r2, [sp, #12]
   113d4:	4293      	cmp	r3, r2
   113d6:	d8c0      	bhi.n	1135a <ticker_job+0x250>
		ticks_elapsed -= ticks_to_expire;
   113d8:	9a03      	ldr	r2, [sp, #12]
   113da:	1ad2      	subs	r2, r2, r3
   113dc:	9203      	str	r2, [sp, #12]
		ticks_expired += ticks_to_expire;
   113de:	449a      	add	sl, r3
		if (instance->ticks_slot_previous > ticks_to_expire) {
   113e0:	8b72      	ldrh	r2, [r6, #26]
   113e2:	4293      	cmp	r3, r2
   113e4:	d2c5      	bcs.n	11372 <ticker_job+0x268>
			instance->ticks_slot_previous -= ticks_to_expire;
   113e6:	1ad3      	subs	r3, r2, r3
   113e8:	8373      	strh	r3, [r6, #26]
		if (ticker->ticks_slot != 0) {
   113ea:	8aeb      	ldrh	r3, [r5, #22]
   113ec:	b11b      	cbz	r3, 113f6 <ticker_job+0x2ec>
			instance->ticker_id_slot_previous = id_expired;
   113ee:	f886 8019 	strb.w	r8, [r6, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
   113f2:	8aeb      	ldrh	r3, [r5, #22]
   113f4:	8373      	strh	r3, [r6, #26]
		ticker->ticks_to_expire = 0;
   113f6:	2300      	movs	r3, #0
   113f8:	60ab      	str	r3, [r5, #8]
		instance->ticker_id_head = ticker->next;
   113fa:	f819 300b 	ldrb.w	r3, [r9, fp]
   113fe:	7633      	strb	r3, [r6, #24]
		if (ticker->ticks_periodic != 0) {
   11400:	686b      	ldr	r3, [r5, #4]
   11402:	b11b      	cbz	r3, 1140c <ticker_job+0x302>
			count = 1 + ticker->lazy_periodic;
   11404:	8b2b      	ldrh	r3, [r5, #24]
   11406:	3301      	adds	r3, #1
			ticks_to_expire = 0;
   11408:	2000      	movs	r0, #0
   1140a:	e7be      	b.n	1138a <ticker_job+0x280>
			ticker->req = ticker->ack;
   1140c:	78ab      	ldrb	r3, [r5, #2]
   1140e:	706b      	strb	r3, [r5, #1]
   11410:	e7d3      	b.n	113ba <ticker_job+0x2b0>
   11412:	f8dd b004 	ldr.w	fp, [sp, #4]
   11416:	e7a4      	b.n	11362 <ticker_job+0x258>
				user_op = &user_ops[user_ops_first];
   11418:	232c      	movs	r3, #44	; 0x2c
   1141a:	9a03      	ldr	r2, [sp, #12]
   1141c:	fb03 f302 	mul.w	r3, r3, r2
   11420:	9905      	ldr	r1, [sp, #20]
   11422:	4419      	add	r1, r3
   11424:	9101      	str	r1, [sp, #4]
				first = user_ops_first + 1;
   11426:	3201      	adds	r2, #1
   11428:	b2d2      	uxtb	r2, r2
   1142a:	4611      	mov	r1, r2
   1142c:	9203      	str	r2, [sp, #12]
				if (first == user->count_user_op) {
   1142e:	9a04      	ldr	r2, [sp, #16]
   11430:	7812      	ldrb	r2, [r2, #0]
   11432:	4291      	cmp	r1, r2
   11434:	d013      	beq.n	1145e <ticker_job+0x354>
				id_insert = user_op->id;
   11436:	9a01      	ldr	r2, [sp, #4]
   11438:	7857      	ldrb	r7, [r2, #1]
				ticker = &node[id_insert];
   1143a:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
   1143e:	0094      	lsls	r4, r2, #2
   11440:	9a02      	ldr	r2, [sp, #8]
   11442:	4414      	add	r4, r2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   11444:	9a05      	ldr	r2, [sp, #20]
   11446:	5cd3      	ldrb	r3, [r2, r3]
   11448:	2b03      	cmp	r3, #3
   1144a:	d16b      	bne.n	11524 <ticker_job+0x41a>
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   1144c:	7862      	ldrb	r2, [r4, #1]
   1144e:	78a3      	ldrb	r3, [r4, #2]
   11450:	429a      	cmp	r2, r3
   11452:	d007      	beq.n	11464 <ticker_job+0x35a>
					ticker_job_op_cb(user_op,
   11454:	2101      	movs	r1, #1
   11456:	9801      	ldr	r0, [sp, #4]
   11458:	f7ff fb1e 	bl	10a98 <ticker_job_op_cb>
   1145c:	e062      	b.n	11524 <ticker_job+0x41a>
					first = 0;
   1145e:	9a06      	ldr	r2, [sp, #24]
   11460:	9203      	str	r2, [sp, #12]
   11462:	e7e8      	b.n	11436 <ticker_job+0x32c>
				ticker_job_op_start(ticker, user_op,
   11464:	9b00      	ldr	r3, [sp, #0]
   11466:	6959      	ldr	r1, [r3, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   11468:	9801      	ldr	r0, [sp, #4]
   1146a:	68c3      	ldr	r3, [r0, #12]
   1146c:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1146e:	6903      	ldr	r3, [r0, #16]
   11470:	61e3      	str	r3, [r4, #28]
	ticker->lazy_periodic = start->lazy;
   11472:	8a83      	ldrh	r3, [r0, #20]
   11474:	8323      	strh	r3, [r4, #24]
	ticker->ticks_slot = start->ticks_slot;
   11476:	8ac3      	ldrh	r3, [r0, #22]
   11478:	82e3      	strh	r3, [r4, #22]
	ticker->timeout_func = start->fp_timeout_func;
   1147a:	6983      	ldr	r3, [r0, #24]
   1147c:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   1147e:	69c3      	ldr	r3, [r0, #28]
   11480:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   11482:	6883      	ldr	r3, [r0, #8]
   11484:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
   11486:	2500      	movs	r5, #0
   11488:	82a5      	strh	r5, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1148a:	6842      	ldr	r2, [r0, #4]
   1148c:	4620      	mov	r0, r4
   1148e:	f7ff fe16 	bl	110be <ticks_to_expire_prep>
	ticker->remainder_current = 0;
   11492:	6225      	str	r5, [r4, #32]
	ticker->lazy_current = 0;
   11494:	8365      	strh	r5, [r4, #26]
	ticker->force = 1;
   11496:	2301      	movs	r3, #1
   11498:	70e3      	strb	r3, [r4, #3]
   1149a:	e054      	b.n	11546 <ticker_job+0x43c>
		skip = 0;
   1149c:	f04f 0a00 	mov.w	sl, #0
   114a0:	e00e      	b.n	114c0 <ticker_job+0x3b6>
				skip_collide = 0;
   114a2:	2300      	movs	r3, #0
   114a4:	e021      	b.n	114ea <ticker_job+0x3e0>
		if (ticker->ticks_periodic != 0) {
   114a6:	6865      	ldr	r5, [r4, #4]
   114a8:	2d00      	cmp	r5, #0
   114aa:	d05b      	beq.n	11564 <ticker_job+0x45a>
						   ticker_remainder_inc(ticker);
   114ac:	4620      	mov	r0, r4
   114ae:	f7ff fac5 	bl	10a3c <ticker_remainder_inc>
			ticker->ticks_to_expire += ticker->ticks_periodic +
   114b2:	4428      	add	r0, r5
   114b4:	68a5      	ldr	r5, [r4, #8]
   114b6:	4405      	add	r5, r0
   114b8:	60a5      	str	r5, [r4, #8]
			ticker->lazy_current++;
   114ba:	8b63      	ldrh	r3, [r4, #26]
   114bc:	3301      	adds	r3, #1
   114be:	8363      	strh	r3, [r4, #26]
	while (id_insert !=
   114c0:	4639      	mov	r1, r7
   114c2:	9800      	ldr	r0, [sp, #0]
   114c4:	f7ff fa2a 	bl	1091c <ticker_enqueue>
   114c8:	4605      	mov	r5, r0
   114ca:	4287      	cmp	r7, r0
   114cc:	d021      	beq.n	11512 <ticker_job+0x408>
		if (id_collide != TICKER_NULL) {
   114ce:	2dff      	cmp	r5, #255	; 0xff
   114d0:	d0e9      	beq.n	114a6 <ticker_job+0x39c>
			struct ticker_node *ticker_collide = &node[id_collide];
   114d2:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   114d6:	ea4f 0883 	mov.w	r8, r3, lsl #2
   114da:	eb09 0608 	add.w	r6, r9, r8
			if (ticker_collide->lazy_current >
   114de:	8b73      	ldrh	r3, [r6, #26]
			    ticker_collide->lazy_periodic) {
   114e0:	8b32      	ldrh	r2, [r6, #24]
			if (ticker_collide->lazy_current >
   114e2:	4293      	cmp	r3, r2
   114e4:	d9dd      	bls.n	114a2 <ticker_job+0x398>
				skip_collide = ticker_collide->lazy_current -
   114e6:	1a9b      	subs	r3, r3, r2
   114e8:	b29b      	uxth	r3, r3
			if (ticker_collide->ticks_periodic &&
   114ea:	6872      	ldr	r2, [r6, #4]
   114ec:	2a00      	cmp	r2, #0
   114ee:	d0da      	beq.n	114a6 <ticker_job+0x39c>
   114f0:	4553      	cmp	r3, sl
   114f2:	d8d8      	bhi.n	114a6 <ticker_job+0x39c>
			    ticker_collide->force < ticker->force) {
   114f4:	78f2      	ldrb	r2, [r6, #3]
   114f6:	78e3      	ldrb	r3, [r4, #3]
			    skip_collide <= skip &&
   114f8:	429a      	cmp	r2, r3
   114fa:	d2d4      	bcs.n	114a6 <ticker_job+0x39c>
					ticker_dequeue(instance, id_collide);
   114fc:	4629      	mov	r1, r5
   114fe:	9800      	ldr	r0, [sp, #0]
   11500:	f7ff fa6c 	bl	109dc <ticker_dequeue>
				ticker_collide->ticks_to_expire =
   11504:	60b0      	str	r0, [r6, #8]
				ticker_collide->req = ticker_collide->ack;
   11506:	78b3      	ldrb	r3, [r6, #2]
   11508:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
   1150a:	f809 b008 	strb.w	fp, [r9, r8]
				*insert_head = id_collide;
   1150e:	46ab      	mov	fp, r5
   11510:	e7d6      	b.n	114c0 <ticker_job+0x3b6>
	ticker->req = ticker->ack + 1;
   11512:	78a3      	ldrb	r3, [r4, #2]
   11514:	3301      	adds	r3, #1
   11516:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   11518:	2100      	movs	r1, #0
			if (user_op) {
   1151a:	9b01      	ldr	r3, [sp, #4]
   1151c:	b113      	cbz	r3, 11524 <ticker_job+0x41a>
				ticker_job_op_cb(user_op, status);
   1151e:	4618      	mov	r0, r3
   11520:	f7ff faba 	bl	10a98 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   11524:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   11528:	d01e      	beq.n	11568 <ticker_job+0x45e>
			if (insert_head != TICKER_NULL) {
   1152a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   1152e:	f43f af73 	beq.w	11418 <ticker_job+0x30e>
				ticker = &node[id_insert];
   11532:	eb0b 02cb 	add.w	r2, fp, fp, lsl #3
   11536:	0093      	lsls	r3, r2, #2
   11538:	9a02      	ldr	r2, [sp, #8]
   1153a:	18d4      	adds	r4, r2, r3
				id_insert = insert_head;
   1153c:	465f      	mov	r7, fp
				insert_head = ticker->next;
   1153e:	f812 b003 	ldrb.w	fp, [r2, r3]
				user_op = NULL;
   11542:	2300      	movs	r3, #0
   11544:	9301      	str	r3, [sp, #4]
	struct ticker_node *node = &instance->node[0];
   11546:	9b00      	ldr	r3, [sp, #0]
   11548:	f8d3 9000 	ldr.w	r9, [r3]
	ticker->next = TICKER_NULL;
   1154c:	23ff      	movs	r3, #255	; 0xff
   1154e:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   11550:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
   11554:	8b23      	ldrh	r3, [r4, #24]
   11556:	459a      	cmp	sl, r3
   11558:	d9a0      	bls.n	1149c <ticker_job+0x392>
		skip = ticker->lazy_current -
   1155a:	ebaa 0a03 	sub.w	sl, sl, r3
   1155e:	fa1f fa8a 	uxth.w	sl, sl
   11562:	e7ad      	b.n	114c0 <ticker_job+0x3b6>
			return TICKER_STATUS_FAILURE;
   11564:	2101      	movs	r1, #1
   11566:	e7d8      	b.n	1151a <ticker_job+0x410>
		       (user_ops_first != user->middle)) {
   11568:	9b04      	ldr	r3, [sp, #16]
   1156a:	789b      	ldrb	r3, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   1156c:	9a03      	ldr	r2, [sp, #12]
   1156e:	429a      	cmp	r2, r3
   11570:	d1db      	bne.n	1152a <ticker_job+0x420>
	while (count_user--) {
   11572:	9b07      	ldr	r3, [sp, #28]
   11574:	1e5a      	subs	r2, r3, #1
   11576:	b2d2      	uxtb	r2, r2
   11578:	9207      	str	r2, [sp, #28]
   1157a:	b153      	cbz	r3, 11592 <ticker_job+0x488>
		user = &users[count_user];
   1157c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1157e:	9a07      	ldr	r2, [sp, #28]
   11580:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11584:	461a      	mov	r2, r3
   11586:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
   11588:	685b      	ldr	r3, [r3, #4]
   1158a:	9305      	str	r3, [sp, #20]
		user_ops_first = user->first;
   1158c:	7853      	ldrb	r3, [r2, #1]
   1158e:	9303      	str	r3, [sp, #12]
   11590:	e7c8      	b.n	11524 <ticker_job+0x41a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11592:	9b00      	ldr	r3, [sp, #0]
   11594:	7e1b      	ldrb	r3, [r3, #24]
   11596:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11598:	429a      	cmp	r2, r3
   1159a:	d001      	beq.n	115a0 <ticker_job+0x496>
		flag_compare_update = 1;
   1159c:	2301      	movs	r3, #1
   1159e:	9308      	str	r3, [sp, #32]
	if (!pending) {
   115a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   115a2:	b18b      	cbz	r3, 115c8 <ticker_job+0x4be>
	instance->job_guard = 0;
   115a4:	2300      	movs	r3, #0
   115a6:	9a00      	ldr	r2, [sp, #0]
   115a8:	7713      	strb	r3, [r2, #28]
	if (flag_compare_update) {
   115aa:	9b08      	ldr	r3, [sp, #32]
   115ac:	2b00      	cmp	r3, #0
   115ae:	d13f      	bne.n	11630 <ticker_job+0x526>
	if (instance->worker_trigger) {
   115b0:	9b00      	ldr	r3, [sp, #0]
   115b2:	7f5b      	ldrb	r3, [r3, #29]
   115b4:	b12b      	cbz	r3, 115c2 <ticker_job+0x4b8>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
   115b6:	9b00      	ldr	r3, [sp, #0]
   115b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   115ba:	2201      	movs	r2, #1
   115bc:	4611      	mov	r1, r2
   115be:	2002      	movs	r0, #2
   115c0:	4798      	blx	r3
}
   115c2:	b00d      	add	sp, #52	; 0x34
   115c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	users = &instance->user[0];
   115c8:	9a00      	ldr	r2, [sp, #0]
   115ca:	f8d2 8004 	ldr.w	r8, [r2, #4]
	count_user = instance->count_user;
   115ce:	7a53      	ldrb	r3, [r2, #9]
   115d0:	e026      	b.n	11620 <ticker_job+0x516>
		uop->status = TICKER_STATUS_SUCCESS;
   115d2:	2300      	movs	r3, #0
   115d4:	623b      	str	r3, [r7, #32]
		fp_op_func = uop->fp_op_func;
   115d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (fp_op_func) {
   115d8:	b113      	cbz	r3, 115e0 <ticker_job+0x4d6>
		fp_op_func(uop->status, uop->op_context);
   115da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   115dc:	6a38      	ldr	r0, [r7, #32]
   115de:	4798      	blx	r3
			first = user->first + 1;
   115e0:	7863      	ldrb	r3, [r4, #1]
   115e2:	3301      	adds	r3, #1
   115e4:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
   115e6:	7822      	ldrb	r2, [r4, #0]
   115e8:	4293      	cmp	r3, r2
   115ea:	d016      	beq.n	1161a <ticker_job+0x510>
			user->first = first;
   115ec:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   115ee:	7862      	ldrb	r2, [r4, #1]
   115f0:	78e3      	ldrb	r3, [r4, #3]
   115f2:	429a      	cmp	r2, r3
   115f4:	d013      	beq.n	1161e <ticker_job+0x514>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   115f6:	232c      	movs	r3, #44	; 0x2c
   115f8:	fb03 f302 	mul.w	r3, r3, r2
   115fc:	18ef      	adds	r7, r5, r3
	switch (uop->op) {
   115fe:	5ceb      	ldrb	r3, [r5, r3]
   11600:	2b01      	cmp	r3, #1
   11602:	d0e6      	beq.n	115d2 <ticker_job+0x4c8>
   11604:	2b02      	cmp	r3, #2
   11606:	d106      	bne.n	11616 <ticker_job+0x50c>
		ticker_by_next_slot_get(instance,
   11608:	68fb      	ldr	r3, [r7, #12]
   1160a:	68ba      	ldr	r2, [r7, #8]
   1160c:	6879      	ldr	r1, [r7, #4]
   1160e:	9800      	ldr	r0, [sp, #0]
   11610:	f7ff f955 	bl	108be <ticker_by_next_slot_get>
   11614:	e7dd      	b.n	115d2 <ticker_job+0x4c8>
	fp_op_func = NULL;
   11616:	2300      	movs	r3, #0
   11618:	e7de      	b.n	115d8 <ticker_job+0x4ce>
				first = 0;
   1161a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1161c:	e7e6      	b.n	115ec <ticker_job+0x4e2>
	while (count_user--) {
   1161e:	4633      	mov	r3, r6
   11620:	1e5e      	subs	r6, r3, #1
   11622:	b2f6      	uxtb	r6, r6
   11624:	2b00      	cmp	r3, #0
   11626:	d0bd      	beq.n	115a4 <ticker_job+0x49a>
		user = &users[count_user];
   11628:	eb08 04c6 	add.w	r4, r8, r6, lsl #3
		user_op = &user->user_op[0];
   1162c:	6865      	ldr	r5, [r4, #4]
   1162e:	e7de      	b.n	115ee <ticker_job+0x4e4>
	if (instance->ticker_id_head == TICKER_NULL) {
   11630:	7e13      	ldrb	r3, [r2, #24]
   11632:	2bff      	cmp	r3, #255	; 0xff
   11634:	d02f      	beq.n	11696 <ticker_job+0x58c>
	if (ticker_id_old_head == TICKER_NULL) {
   11636:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11638:	2bff      	cmp	r3, #255	; 0xff
   1163a:	d034      	beq.n	116a6 <ticker_job+0x59c>
	ticker = &instance->node[instance->ticker_id_head];
   1163c:	9800      	ldr	r0, [sp, #0]
   1163e:	6802      	ldr	r2, [r0, #0]
   11640:	7e03      	ldrb	r3, [r0, #24]
   11642:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   11646:	0099      	lsls	r1, r3, #2
   11648:	440a      	add	r2, r1
	ticks_to_expire = ticker->ticks_to_expire;
   1164a:	6897      	ldr	r7, [r2, #8]
	i = 10;
   1164c:	250a      	movs	r5, #10
   1164e:	4680      	mov	r8, r0
		LL_ASSERT(i);
   11650:	b39d      	cbz	r5, 116ba <ticker_job+0x5b0>
		i--;
   11652:	3d01      	subs	r5, #1
		ctr = cntr_cnt_get();
   11654:	f7fd ff6a 	bl	f52c <cntr_cnt_get>
   11658:	4606      	mov	r6, r0
		cc = instance->ticks_current;
   1165a:	f8d8 4014 	ldr.w	r4, [r8, #20]
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   1165e:	4621      	mov	r1, r4
   11660:	f7ff fcce 	bl	11000 <ticker_ticks_diff_get>
   11664:	3003      	adds	r0, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
   11666:	4287      	cmp	r7, r0
   11668:	bf2c      	ite	cs
   1166a:	19e4      	addcs	r4, r4, r7
   1166c:	1824      	addcc	r4, r4, r0
		cc &= 0x00FFFFFF;
   1166e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->fp_cmp_set(cc);
   11672:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   11676:	4620      	mov	r0, r4
   11678:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   1167a:	f7fd ff57 	bl	f52c <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   1167e:	4631      	mov	r1, r6
   11680:	f7ff fcbe 	bl	11000 <ticker_ticks_diff_get>
   11684:	f100 0903 	add.w	r9, r0, #3
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
   11688:	4631      	mov	r1, r6
   1168a:	4620      	mov	r0, r4
   1168c:	f7ff fcb8 	bl	11000 <ticker_ticks_diff_get>
   11690:	4581      	cmp	r9, r0
   11692:	d8dd      	bhi.n	11650 <ticker_job+0x546>
   11694:	e78c      	b.n	115b0 <ticker_job+0x4a6>
		if (cntr_stop() == 0) {
   11696:	f7fd ff2f 	bl	f4f8 <cntr_stop>
   1169a:	2800      	cmp	r0, #0
   1169c:	d188      	bne.n	115b0 <ticker_job+0x4a6>
			instance->ticks_slot_previous = 0;
   1169e:	2300      	movs	r3, #0
   116a0:	9a00      	ldr	r2, [sp, #0]
   116a2:	8353      	strh	r3, [r2, #26]
   116a4:	e784      	b.n	115b0 <ticker_job+0x4a6>
		ticks_current = cntr_cnt_get();
   116a6:	f7fd ff41 	bl	f52c <cntr_cnt_get>
   116aa:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   116ac:	f7fd ff14 	bl	f4d8 <cntr_start>
   116b0:	2800      	cmp	r0, #0
   116b2:	d1c3      	bne.n	1163c <ticker_job+0x532>
			instance->ticks_current = ticks_current;
   116b4:	9b00      	ldr	r3, [sp, #0]
   116b6:	615c      	str	r4, [r3, #20]
   116b8:	e7c0      	b.n	1163c <ticker_job+0x532>
		LL_ASSERT(i);
   116ba:	4040      	eors	r0, r0
   116bc:	f380 8811 	msr	BASEPRI, r0
   116c0:	f04f 0004 	mov.w	r0, #4
   116c4:	df02      	svc	2
	...

000116c8 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
   116c8:	b570      	push	{r4, r5, r6, lr}
   116ca:	4606      	mov	r6, r0
   116cc:	460c      	mov	r4, r1
	while (len) {
   116ce:	b19c      	cbz	r4, 116f8 <bt_rand+0x30>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
   116d0:	4d0a      	ldr	r5, [pc, #40]	; (116fc <bt_rand+0x34>)
   116d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   116d6:	4628      	mov	r0, r5
   116d8:	f016 fe48 	bl	2836c <_impl_k_mutex_lock>
		k_mutex_lock(&mutex_rand, K_FOREVER);
		len = rand_get(len, buf);
   116dc:	4631      	mov	r1, r6
   116de:	4620      	mov	r0, r4
   116e0:	f7ff f89a 	bl	10818 <rand_get>
   116e4:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
   116e6:	4628      	mov	r0, r5
   116e8:	f016 feaa 	bl	28440 <_impl_k_mutex_unlock>
		k_mutex_unlock(&mutex_rand);
		if (len) {
   116ec:	2c00      	cmp	r4, #0
   116ee:	d0ee      	beq.n	116ce <bt_rand+0x6>
   116f0:	bf20      	wfe
  __ASM volatile ("sev");
   116f2:	bf40      	sev
  __ASM volatile ("wfe");
   116f4:	bf20      	wfe
   116f6:	e7ea      	b.n	116ce <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
   116f8:	2000      	movs	r0, #0
   116fa:	bd70      	pop	{r4, r5, r6, pc}
   116fc:	2000d1c8 	.word	0x2000d1c8

00011700 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   11700:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   11702:	2300      	movs	r3, #0
   11704:	f7fd ff4e 	bl	f5a4 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   11708:	2000      	movs	r0, #0
   1170a:	bd08      	pop	{r3, pc}

0001170c <ticker_if_done>:
	*((u32_t volatile *)ops_context) = status;
   1170c:	6008      	str	r0, [r1, #0]
   1170e:	4770      	bx	lr

00011710 <mayfly_xtal_start>:
{
   11710:	b508      	push	{r3, lr}
	clock_control_on(_radio.hf_clock, NULL);
   11712:	4b03      	ldr	r3, [pc, #12]	; (11720 <mayfly_xtal_start+0x10>)
   11714:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   11716:	6843      	ldr	r3, [r0, #4]
	return api->on(dev, sys);
   11718:	681b      	ldr	r3, [r3, #0]
   1171a:	2100      	movs	r1, #0
   1171c:	4798      	blx	r3
   1171e:	bd08      	pop	{r3, pc}
   11720:	20000ff4 	.word	0x20000ff4

00011724 <mayfly_xtal_stop>:
{
   11724:	b508      	push	{r3, lr}
	clock_control_off(_radio.hf_clock, NULL);
   11726:	4b03      	ldr	r3, [pc, #12]	; (11734 <mayfly_xtal_stop+0x10>)
   11728:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   1172a:	6843      	ldr	r3, [r0, #4]
	return api->off(dev, sys);
   1172c:	685b      	ldr	r3, [r3, #4]
   1172e:	2100      	movs	r1, #0
   11730:	4798      	blx	r3
   11732:	bd08      	pop	{r3, pc}
   11734:	20000ff4 	.word	0x20000ff4

00011738 <prepare_reduced>:
	if (status == 0) {
   11738:	b918      	cbnz	r0, 11742 <prepare_reduced+0xa>
		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
   1173a:	680b      	ldr	r3, [r1, #0]
   1173c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11740:	600b      	str	r3, [r1, #0]
   11742:	4770      	bx	lr

00011744 <prepare_normal>:
	if (status == 0) {
   11744:	b918      	cbnz	r0, 1174e <prepare_normal+0xa>
		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
   11746:	680b      	ldr	r3, [r1, #0]
   11748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1174c:	600b      	str	r3, [r1, #0]
   1174e:	4770      	bx	lr

00011750 <chan_sel_remap>:
{
   11750:	b470      	push	{r4, r5, r6}
	byte_count = 5;
   11752:	2405      	movs	r4, #5
	chan_next = 0;
   11754:	2200      	movs	r2, #0
	while (byte_count--) {
   11756:	e011      	b.n	1177c <chan_sel_remap+0x2c>
			chan_next++;
   11758:	3201      	adds	r2, #1
   1175a:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   1175c:	086d      	lsrs	r5, r5, #1
		while (bit_count--) {
   1175e:	461c      	mov	r4, r3
   11760:	1e63      	subs	r3, r4, #1
   11762:	b2db      	uxtb	r3, r3
   11764:	b134      	cbz	r4, 11774 <chan_sel_remap+0x24>
			if (bite & 0x01) {
   11766:	f015 0f01 	tst.w	r5, #1
   1176a:	d0f5      	beq.n	11758 <chan_sel_remap+0x8>
				if (chan_index == 0) {
   1176c:	b111      	cbz	r1, 11774 <chan_sel_remap+0x24>
				chan_index--;
   1176e:	3901      	subs	r1, #1
   11770:	b2c9      	uxtb	r1, r1
   11772:	e7f1      	b.n	11758 <chan_sel_remap+0x8>
		if (bit_count < 8) {
   11774:	2b07      	cmp	r3, #7
   11776:	d907      	bls.n	11788 <chan_sel_remap+0x38>
		chan_map++;
   11778:	3001      	adds	r0, #1
	while (byte_count--) {
   1177a:	4634      	mov	r4, r6
   1177c:	1e63      	subs	r3, r4, #1
   1177e:	b2de      	uxtb	r6, r3
   11780:	b114      	cbz	r4, 11788 <chan_sel_remap+0x38>
		bite = *chan_map;
   11782:	7805      	ldrb	r5, [r0, #0]
		bit_count = 8;
   11784:	2408      	movs	r4, #8
		while (bit_count--) {
   11786:	e7eb      	b.n	11760 <chan_sel_remap+0x10>
}
   11788:	4610      	mov	r0, r2
   1178a:	bc70      	pop	{r4, r5, r6}
   1178c:	4770      	bx	lr
	...

00011790 <chan_sel_1>:
{
   11790:	b570      	push	{r4, r5, r6, lr}
   11792:	4605      	mov	r5, r0
   11794:	f89d 6010 	ldrb.w	r6, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   11798:	7804      	ldrb	r4, [r0, #0]
   1179a:	fb02 1101 	mla	r1, r2, r1, r1
   1179e:	4421      	add	r1, r4
   117a0:	4c0f      	ldr	r4, [pc, #60]	; (117e0 <chan_sel_1+0x50>)
   117a2:	fb84 2401 	smull	r2, r4, r4, r1
   117a6:	1862      	adds	r2, r4, r1
   117a8:	17cc      	asrs	r4, r1, #31
   117aa:	ebc4 1462 	rsb	r4, r4, r2, asr #5
   117ae:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   117b2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   117b6:	1b0c      	subs	r4, r1, r4
   117b8:	b2e0      	uxtb	r0, r4
	*chan_use = chan_next;
   117ba:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   117bc:	08c2      	lsrs	r2, r0, #3
   117be:	5c9a      	ldrb	r2, [r3, r2]
   117c0:	f004 0407 	and.w	r4, r4, #7
   117c4:	fa42 f404 	asr.w	r4, r2, r4
   117c8:	f014 0f01 	tst.w	r4, #1
   117cc:	d107      	bne.n	117de <chan_sel_1+0x4e>
		chan_index = chan_next % chan_count;
   117ce:	fbb0 f1f6 	udiv	r1, r0, r6
   117d2:	fb06 0111 	mls	r1, r6, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   117d6:	b2c9      	uxtb	r1, r1
   117d8:	4618      	mov	r0, r3
   117da:	f7ff ffb9 	bl	11750 <chan_sel_remap>
}
   117de:	bd70      	pop	{r4, r5, r6, pc}
   117e0:	dd67c8a7 	.word	0xdd67c8a7

000117e4 <chan_rev_8>:
	o = 0;
   117e4:	2300      	movs	r3, #0
	for (iterate = 0; iterate < 8; iterate++) {
   117e6:	461a      	mov	r2, r3
   117e8:	e007      	b.n	117fa <chan_rev_8+0x16>
		o <<= 1;
   117ea:	005b      	lsls	r3, r3, #1
   117ec:	b2db      	uxtb	r3, r3
		o |= (i & 1);
   117ee:	f000 0101 	and.w	r1, r0, #1
   117f2:	430b      	orrs	r3, r1
		i >>= 1;
   117f4:	0840      	lsrs	r0, r0, #1
	for (iterate = 0; iterate < 8; iterate++) {
   117f6:	3201      	adds	r2, #1
   117f8:	b2d2      	uxtb	r2, r2
   117fa:	2a07      	cmp	r2, #7
   117fc:	d9f5      	bls.n	117ea <chan_rev_8+0x6>
}
   117fe:	4618      	mov	r0, r3
   11800:	4770      	bx	lr

00011802 <chan_perm>:
{
   11802:	b538      	push	{r3, r4, r5, lr}
   11804:	4604      	mov	r4, r0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   11806:	0a00      	lsrs	r0, r0, #8
   11808:	f7ff ffec 	bl	117e4 <chan_rev_8>
   1180c:	0205      	lsls	r5, r0, #8
   1180e:	b2e0      	uxtb	r0, r4
   11810:	f7ff ffe8 	bl	117e4 <chan_rev_8>
   11814:	b200      	sxth	r0, r0
   11816:	4328      	orrs	r0, r5
}
   11818:	b280      	uxth	r0, r0
   1181a:	bd38      	pop	{r3, r4, r5, pc}

0001181c <chan_mam>:
	return ((u32_t)a * 17 + b) & 0xFFFF;
   1181c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   11820:	fa11 f080 	uxtah	r0, r1, r0
}
   11824:	b280      	uxth	r0, r0
   11826:	4770      	bx	lr

00011828 <chan_prn>:
{
   11828:	b538      	push	{r3, r4, r5, lr}
   1182a:	460d      	mov	r5, r1
	prn_e = counter ^ chan_id;
   1182c:	4048      	eors	r0, r1
	for (iterate = 0; iterate < 3; iterate++) {
   1182e:	2400      	movs	r4, #0
   11830:	e006      	b.n	11840 <chan_prn+0x18>
		prn_e = chan_perm(prn_e);
   11832:	f7ff ffe6 	bl	11802 <chan_perm>
		prn_e = chan_mam(prn_e, chan_id);
   11836:	4629      	mov	r1, r5
   11838:	f7ff fff0 	bl	1181c <chan_mam>
	for (iterate = 0; iterate < 3; iterate++) {
   1183c:	3401      	adds	r4, #1
   1183e:	b2e4      	uxtb	r4, r4
   11840:	2c02      	cmp	r4, #2
   11842:	d9f6      	bls.n	11832 <chan_prn+0xa>
	prn_e ^= chan_id;
   11844:	4068      	eors	r0, r5
}
   11846:	b280      	uxth	r0, r0
   11848:	bd38      	pop	{r3, r4, r5, pc}
	...

0001184c <chan_sel_2>:
{
   1184c:	b538      	push	{r3, r4, r5, lr}
   1184e:	4615      	mov	r5, r2
   11850:	461c      	mov	r4, r3
	prn_e = chan_prn(counter, chan_id);
   11852:	f7ff ffe9 	bl	11828 <chan_prn>
   11856:	4601      	mov	r1, r0
	chan_next = prn_e % 37;
   11858:	4a0e      	ldr	r2, [pc, #56]	; (11894 <chan_sel_2+0x48>)
   1185a:	fba2 3200 	umull	r3, r2, r2, r0
   1185e:	1a80      	subs	r0, r0, r2
   11860:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   11864:	0952      	lsrs	r2, r2, #5
   11866:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   1186a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   1186e:	1a8a      	subs	r2, r1, r2
   11870:	b2d0      	uxtb	r0, r2
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   11872:	08c3      	lsrs	r3, r0, #3
   11874:	5ceb      	ldrb	r3, [r5, r3]
   11876:	f000 0207 	and.w	r2, r0, #7
   1187a:	4113      	asrs	r3, r2
   1187c:	f013 0f01 	tst.w	r3, #1
   11880:	d106      	bne.n	11890 <chan_sel_2+0x44>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   11882:	fb04 f101 	mul.w	r1, r4, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
   11886:	f3c1 4107 	ubfx	r1, r1, #16, #8
   1188a:	4628      	mov	r0, r5
   1188c:	f7ff ff60 	bl	11750 <chan_sel_remap>
}
   11890:	bd38      	pop	{r3, r4, r5, pc}
   11892:	bf00      	nop
   11894:	bacf914d 	.word	0xbacf914d

00011898 <ctrl_tx_last_enqueue>:
}

static void ctrl_tx_last_enqueue(struct connection *conn,
				 struct radio_pdu_node_tx *node_tx)
{
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   11898:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   1189c:	681b      	ldr	r3, [r3, #0]
   1189e:	600b      	str	r3, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   118a0:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   118a4:	6019      	str	r1, [r3, #0]
	conn->pkt_tx_ctrl_last = node_tx;
   118a6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   118aa:	4770      	bx	lr

000118ac <ctrl_tx_enqueue>:
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
   118ac:	b538      	push	{r3, r4, r5, lr}
   118ae:	4604      	mov	r4, r0
   118b0:	460d      	mov	r5, r1
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    !conn->empty &&
   118b2:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
	if (
   118b6:	f013 0f80 	tst.w	r3, #128	; 0x80
   118ba:	d11f      	bne.n	118fc <ctrl_tx_enqueue+0x50>
	    /* and data/ctrl packet is in the head */
	    conn->pkt_tx_head &&
   118bc:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
	    !conn->empty &&
   118c0:	b1e2      	cbz	r2, 118fc <ctrl_tx_enqueue+0x50>
	    conn->pkt_tx_head &&
   118c2:	f013 0f08 	tst.w	r3, #8
   118c6:	d119      	bne.n	118fc <ctrl_tx_enqueue+0x50>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   118c8:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   118cc:	429a      	cmp	r2, r3
   118ce:	d007      	beq.n	118e0 <ctrl_tx_enqueue+0x34>
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
   118d0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   118d4:	b143      	cbz	r3, 118e8 <ctrl_tx_enqueue+0x3c>
			node_tx->next = conn->pkt_tx_head->next;
			conn->pkt_tx_head->next = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   118d6:	4629      	mov	r1, r5
   118d8:	4620      	mov	r0, r4
   118da:	f7ff ffdd 	bl	11898 <ctrl_tx_last_enqueue>
   118de:	e014      	b.n	1190a <ctrl_tx_enqueue+0x5e>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   118e0:	681b      	ldr	r3, [r3, #0]
   118e2:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
   118e6:	e7f3      	b.n	118d0 <ctrl_tx_enqueue+0x24>
			node_tx->next = conn->pkt_tx_head->next;
   118e8:	6813      	ldr	r3, [r2, #0]
   118ea:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head->next = node_tx;
   118ec:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   118f0:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   118f2:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   118f6:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   118fa:	e006      	b.n	1190a <ctrl_tx_enqueue+0x5e>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
   118fc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   11900:	b133      	cbz	r3, 11910 <ctrl_tx_enqueue+0x64>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   11902:	4629      	mov	r1, r5
   11904:	4620      	mov	r0, r4
   11906:	f7ff ffc7 	bl	11898 <ctrl_tx_last_enqueue>
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
   1190a:	682b      	ldr	r3, [r5, #0]
   1190c:	b153      	cbz	r3, 11924 <ctrl_tx_enqueue+0x78>
   1190e:	bd38      	pop	{r3, r4, r5, pc}
			node_tx->next = conn->pkt_tx_head;
   11910:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11914:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head = node_tx;
   11916:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
			conn->pkt_tx_ctrl = node_tx;
   1191a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   1191e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   11922:	e7f2      	b.n	1190a <ctrl_tx_enqueue+0x5e>
		conn->pkt_tx_last = node_tx;
   11924:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
	}
}
   11928:	e7f1      	b.n	1190e <ctrl_tx_enqueue+0x62>

0001192a <ctrl_tx_sec_enqueue>:

static void ctrl_tx_sec_enqueue(struct connection *conn,
				  struct radio_pdu_node_tx *node_tx)
{
   1192a:	b508      	push	{r3, lr}
	if (conn->pause_tx) {
   1192c:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   11930:	f013 0f08 	tst.w	r3, #8
   11934:	d010      	beq.n	11958 <ctrl_tx_sec_enqueue+0x2e>
		if (!conn->pkt_tx_ctrl) {
   11936:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   1193a:	b13b      	cbz	r3, 1194c <ctrl_tx_sec_enqueue+0x22>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
		} else {
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   1193c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   11940:	681b      	ldr	r3, [r3, #0]
   11942:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   11944:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   11948:	6019      	str	r1, [r3, #0]
   1194a:	bd08      	pop	{r3, pc}
			node_tx->next = conn->pkt_tx_head;
   1194c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11950:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   11952:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
   11956:	bd08      	pop	{r3, pc}
		}
	} else {
		ctrl_tx_enqueue(conn, node_tx);
   11958:	f7ff ffa8 	bl	118ac <ctrl_tx_enqueue>
   1195c:	bd08      	pop	{r3, pc}
	...

00011960 <conn_update_req>:
}

#if defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
   11960:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   11964:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   11968:	428b      	cmp	r3, r1
   1196a:	d001      	beq.n	11970 <conn_update_req+0x10>
		return 1;
   1196c:	2001      	movs	r0, #1
   1196e:	4770      	bx	lr
{
   11970:	b530      	push	{r4, r5, lr}
	}

	if (!conn->role) {
   11972:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11976:	2b00      	cmp	r3, #0
   11978:	db2a      	blt.n	119d0 <conn_update_req+0x70>
		conn->llcp.conn_upd.win_size = 1;
   1197a:	2401      	movs	r4, #1
   1197c:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   11980:	2200      	movs	r2, #0
   11982:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->conn_interval;
   11986:	8c85      	ldrh	r5, [r0, #36]	; 0x24
   11988:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->latency;
   1198c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   1198e:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
   11992:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   11994:	fb03 f305 	mul.w	r3, r3, r5
					      conn->supervision_reload *
   11998:	ebc3 1543 	rsb	r5, r3, r3, lsl #5
   1199c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
					      125 / 1000;
   119a0:	4d26      	ldr	r5, [pc, #152]	; (11a3c <conn_update_req+0xdc>)
   119a2:	fb85 e503 	smull	lr, r5, r5, r3
   119a6:	17db      	asrs	r3, r3, #31
   119a8:	ebc3 13a5 	rsb	r3, r3, r5, asr #6
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   119ac:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   119b0:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   119b4:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
   119b8:	b2db      	uxtb	r3, r3
   119ba:	f043 0304 	orr.w	r3, r3, #4
   119be:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78

		conn->llcp_type = LLCP_CONN_UPD;
   119c2:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_ack--;
   119c6:	3901      	subs	r1, #1
   119c8:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75

		return 0;
   119cc:	4610      	mov	r0, r2
   119ce:	bd30      	pop	{r4, r5, pc}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	} else if (conn->common.fex_valid &&
   119d0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   119d4:	f013 0f20 	tst.w	r3, #32
   119d8:	d101      	bne.n	119de <conn_update_req+0x7e>
		return 0;
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
   119da:	2002      	movs	r0, #2
   119dc:	bd30      	pop	{r4, r5, pc}
		   (conn->llcp_features &
   119de:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
	} else if (conn->common.fex_valid &&
   119e2:	f013 0f02 	tst.w	r3, #2
   119e6:	d101      	bne.n	119ec <conn_update_req+0x8c>
	return 2;
   119e8:	2002      	movs	r0, #2
}
   119ea:	bd30      	pop	{r4, r5, pc}
		conn->llcp_conn_param.status = 0;
   119ec:	2300      	movs	r3, #0
   119ee:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.interval = conn->conn_interval;
   119f2:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   119f4:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
		conn->llcp_conn_param.latency = conn->latency;
   119f8:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
   119fa:	f8a0 20c6 	strh.w	r2, [r0, #198]	; 0xc6
						conn->supervision_reload *
   119fe:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
		conn->llcp_conn_param.timeout = conn->conn_interval *
   11a00:	fb02 f201 	mul.w	r2, r2, r1
						conn->supervision_reload *
   11a04:	ebc2 1142 	rsb	r1, r2, r2, lsl #5
   11a08:	eb02 0281 	add.w	r2, r2, r1, lsl #2
						125 / 1000;
   11a0c:	490b      	ldr	r1, [pc, #44]	; (11a3c <conn_update_req+0xdc>)
   11a0e:	fb81 4102 	smull	r4, r1, r1, r2
   11a12:	17d2      	asrs	r2, r2, #31
   11a14:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
		conn->llcp_conn_param.timeout = conn->conn_interval *
   11a18:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   11a1c:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.cmd = 0;
   11a20:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   11a24:	f363 02c3 	bfi	r2, r3, #3, #1
   11a28:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
   11a2c:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   11a30:	3a01      	subs	r2, #1
   11a32:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
		return 0;
   11a36:	4618      	mov	r0, r3
   11a38:	bd30      	pop	{r4, r5, pc}
   11a3a:	bf00      	nop
   11a3c:	10624dd3 	.word	0x10624dd3

00011a40 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   11a40:	4a0d      	ldr	r2, [pc, #52]	; (11a78 <rx_fc_lock+0x38>)
   11a42:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   11a46:	b2db      	uxtb	r3, r3
   11a48:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   11a4c:	4293      	cmp	r3, r2
   11a4e:	d000      	beq.n	11a52 <rx_fc_lock+0x12>
   11a50:	4770      	bx	lr
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   11a52:	4a09      	ldr	r2, [pc, #36]	; (11a78 <rx_fc_lock+0x38>)
   11a54:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   11a58:	33b8      	adds	r3, #184	; 0xb8
   11a5a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   11a5e:	80d8      	strh	r0, [r3, #6]
		req = _radio.fc_req + 1;
   11a60:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   11a64:	3301      	adds	r3, #1
   11a66:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
   11a68:	2b03      	cmp	r3, #3
   11a6a:	d003      	beq.n	11a74 <rx_fc_lock+0x34>
			req = 0;
		}
		_radio.fc_req = req;
   11a6c:	4a02      	ldr	r2, [pc, #8]	; (11a78 <rx_fc_lock+0x38>)
   11a6e:	f882 317c 	strb.w	r3, [r2, #380]	; 0x17c
	}
}
   11a72:	e7ed      	b.n	11a50 <rx_fc_lock+0x10>
			req = 0;
   11a74:	2300      	movs	r3, #0
   11a76:	e7f9      	b.n	11a6c <rx_fc_lock+0x2c>
   11a78:	20000ff4 	.word	0x20000ff4

00011a7c <ticker_success_assert>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11a7c:	b900      	cbnz	r0, 11a80 <ticker_success_assert+0x4>
   11a7e:	4770      	bx	lr
   11a80:	4040      	eors	r0, r0
   11a82:	f380 8811 	msr	BASEPRI, r0
   11a86:	f04f 0004 	mov.w	r0, #4
   11a8a:	df02      	svc	2

00011a8c <start_enc_rsp_send>:
{
   11a8c:	b510      	push	{r4, lr}
   11a8e:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   11a90:	b171      	cbz	r1, 11ab0 <start_enc_rsp_send+0x24>
   11a92:	460b      	mov	r3, r1
	struct radio_pdu_node_tx *node_tx = NULL;
   11a94:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11a96:	781a      	ldrb	r2, [r3, #0]
   11a98:	f042 0203 	orr.w	r2, r2, #3
   11a9c:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11a9e:	2201      	movs	r2, #1
   11aa0:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11aa2:	2206      	movs	r2, #6
   11aa4:	70da      	strb	r2, [r3, #3]
	if (node_tx) {
   11aa6:	b111      	cbz	r1, 11aae <start_enc_rsp_send+0x22>
		ctrl_tx_enqueue(conn, node_tx);
   11aa8:	4620      	mov	r0, r4
   11aaa:	f7ff feff 	bl	118ac <ctrl_tx_enqueue>
   11aae:	bd10      	pop	{r4, pc}
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11ab0:	4806      	ldr	r0, [pc, #24]	; (11acc <start_enc_rsp_send+0x40>)
   11ab2:	f7fd fc6a 	bl	f38a <mem_acquire>
		LL_ASSERT(node_tx);
   11ab6:	4601      	mov	r1, r0
   11ab8:	b108      	cbz	r0, 11abe <start_enc_rsp_send+0x32>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   11aba:	1d03      	adds	r3, r0, #4
   11abc:	e7eb      	b.n	11a96 <start_enc_rsp_send+0xa>
		LL_ASSERT(node_tx);
   11abe:	4040      	eors	r0, r0
   11ac0:	f380 8811 	msr	BASEPRI, r0
   11ac4:	f04f 0004 	mov.w	r0, #4
   11ac8:	df02      	svc	2
   11aca:	bf00      	nop
   11acc:	2000114c 	.word	0x2000114c

00011ad0 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   11ad0:	2801      	cmp	r0, #1
   11ad2:	d005      	beq.n	11ae0 <ticker_stop_adv_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   11ad4:	4b0d      	ldr	r3, [pc, #52]	; (11b0c <ticker_stop_adv_assert+0x3c>)
   11ad6:	7b1b      	ldrb	r3, [r3, #12]
   11ad8:	b2db      	uxtb	r3, r3
   11ada:	2b05      	cmp	r3, #5
   11adc:	d00f      	beq.n	11afe <ticker_stop_adv_assert+0x2e>
   11ade:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   11ae0:	4b0a      	ldr	r3, [pc, #40]	; (11b0c <ticker_stop_adv_assert+0x3c>)
   11ae2:	7b9b      	ldrb	r3, [r3, #14]
   11ae4:	b2db      	uxtb	r3, r3
   11ae6:	2b05      	cmp	r3, #5
   11ae8:	d103      	bne.n	11af2 <ticker_stop_adv_assert+0x22>
			_radio.ticker_id_stop = 0;
   11aea:	2200      	movs	r2, #0
   11aec:	4b07      	ldr	r3, [pc, #28]	; (11b0c <ticker_stop_adv_assert+0x3c>)
   11aee:	739a      	strb	r2, [r3, #14]
   11af0:	4770      	bx	lr
			LL_ASSERT(0);
   11af2:	4040      	eors	r0, r0
   11af4:	f380 8811 	msr	BASEPRI, r0
   11af8:	f04f 0004 	mov.w	r0, #4
   11afc:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   11afe:	4040      	eors	r0, r0
   11b00:	f380 8811 	msr	BASEPRI, r0
   11b04:	f04f 0004 	mov.w	r0, #4
   11b08:	df02      	svc	2
   11b0a:	bf00      	nop
   11b0c:	20000ff4 	.word	0x20000ff4

00011b10 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   11b10:	2801      	cmp	r0, #1
   11b12:	d005      	beq.n	11b20 <ticker_stop_scan_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   11b14:	4b0d      	ldr	r3, [pc, #52]	; (11b4c <ticker_stop_scan_assert+0x3c>)
   11b16:	7b1b      	ldrb	r3, [r3, #12]
   11b18:	b2db      	uxtb	r3, r3
   11b1a:	2b06      	cmp	r3, #6
   11b1c:	d00f      	beq.n	11b3e <ticker_stop_scan_assert+0x2e>
   11b1e:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
   11b20:	4b0a      	ldr	r3, [pc, #40]	; (11b4c <ticker_stop_scan_assert+0x3c>)
   11b22:	7b9b      	ldrb	r3, [r3, #14]
   11b24:	b2db      	uxtb	r3, r3
   11b26:	2b06      	cmp	r3, #6
   11b28:	d103      	bne.n	11b32 <ticker_stop_scan_assert+0x22>
			_radio.ticker_id_stop = 0;
   11b2a:	2200      	movs	r2, #0
   11b2c:	4b07      	ldr	r3, [pc, #28]	; (11b4c <ticker_stop_scan_assert+0x3c>)
   11b2e:	739a      	strb	r2, [r3, #14]
   11b30:	4770      	bx	lr
			LL_ASSERT(0);
   11b32:	4040      	eors	r0, r0
   11b34:	f380 8811 	msr	BASEPRI, r0
   11b38:	f04f 0004 	mov.w	r0, #4
   11b3c:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   11b3e:	4040      	eors	r0, r0
   11b40:	f380 8811 	msr	BASEPRI, r0
   11b44:	f04f 0004 	mov.w	r0, #4
   11b48:	df02      	svc	2
   11b4a:	bf00      	nop
   11b4c:	20000ff4 	.word	0x20000ff4

00011b50 <conn_update>:
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   11b50:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   11b54:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   11b56:	1a9b      	subs	r3, r3, r2
   11b58:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   11b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11b5e:	da5b      	bge.n	11c18 <conn_update+0xc8>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11b60:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11b64:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11b68:	429a      	cmp	r2, r3
   11b6a:	d13d      	bne.n	11be8 <conn_update+0x98>
	if (_radio.conn_upd == 0) {
   11b6c:	4b2c      	ldr	r3, [pc, #176]	; (11c20 <conn_update+0xd0>)
   11b6e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   11b72:	2b00      	cmp	r3, #0
   11b74:	d03e      	beq.n	11bf4 <conn_update+0xa4>
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
   11b76:	790b      	ldrb	r3, [r1, #4]
	conn->llcp.conn_upd.win_size =
   11b78:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
   11b7c:	f8b1 2005 	ldrh.w	r2, [r1, #5]
   11b80:	f240 43e2 	movw	r3, #1250	; 0x4e2
   11b84:	fb03 f302 	mul.w	r3, r3, r2
	conn->llcp.conn_upd.win_offset_us =
   11b88:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
   11b8c:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	conn->llcp.conn_upd.interval =
   11b90:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
   11b94:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	conn->llcp.conn_upd.latency =
   11b98:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
   11b9c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
	conn->llcp.conn_upd.timeout =
   11ba0:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
   11ba4:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	conn->llcp.conn_upd.instant =
   11ba8:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   11bac:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   11bb0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   11bb4:	f36f 0382 	bfc	r3, #2, #1
   11bb8:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   11bbc:	2301      	movs	r3, #1
   11bbe:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
	conn->llcp_ack--;
   11bc2:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11bc6:	3b01      	subs	r3, #1
   11bc8:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11bcc:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
   11bd0:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   11bd4:	429a      	cmp	r2, r3
   11bd6:	d021      	beq.n	11c1c <conn_update+0xcc>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   11bd8:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   11bdc:	f003 0307 	and.w	r3, r3, #7
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11be0:	2b04      	cmp	r3, #4
   11be2:	d015      	beq.n	11c10 <conn_update+0xc0>
	return 0;
   11be4:	2000      	movs	r0, #0
}
   11be6:	4770      	bx	lr
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11be8:	4040      	eors	r0, r0
   11bea:	f380 8811 	msr	BASEPRI, r0
   11bee:	f04f 0004 	mov.w	r0, #4
   11bf2:	df02      	svc	2
		LL_ASSERT(conn->role);
   11bf4:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11bf8:	2b00      	cmp	r3, #0
   11bfa:	da03      	bge.n	11c04 <conn_update+0xb4>
		_radio.conn_upd = conn;
   11bfc:	4b08      	ldr	r3, [pc, #32]	; (11c20 <conn_update+0xd0>)
   11bfe:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
   11c02:	e7b8      	b.n	11b76 <conn_update+0x26>
		LL_ASSERT(conn->role);
   11c04:	4040      	eors	r0, r0
   11c06:	f380 8811 	msr	BASEPRI, r0
   11c0a:	f04f 0004 	mov.w	r0, #4
   11c0e:	df02      	svc	2
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11c10:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
	return 0;
   11c14:	2000      	movs	r0, #0
   11c16:	4770      	bx	lr
		return 1;
   11c18:	2001      	movs	r0, #1
   11c1a:	4770      	bx	lr
	return 0;
   11c1c:	2000      	movs	r0, #0
   11c1e:	4770      	bx	lr
   11c20:	20000ff4 	.word	0x20000ff4

00011c24 <pause_enc_rsp_send>:
{
   11c24:	b510      	push	{r4, lr}
   11c26:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11c28:	480b      	ldr	r0, [pc, #44]	; (11c58 <pause_enc_rsp_send+0x34>)
   11c2a:	f7fd fbae 	bl	f38a <mem_acquire>
	LL_ASSERT(node_tx);
   11c2e:	b160      	cbz	r0, 11c4a <pause_enc_rsp_send+0x26>
   11c30:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11c32:	7903      	ldrb	r3, [r0, #4]
   11c34:	f043 0303 	orr.w	r3, r3, #3
   11c38:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11c3a:	2301      	movs	r3, #1
   11c3c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11c3e:	230b      	movs	r3, #11
   11c40:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11c42:	4620      	mov	r0, r4
   11c44:	f7ff fe32 	bl	118ac <ctrl_tx_enqueue>
   11c48:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11c4a:	4040      	eors	r0, r0
   11c4c:	f380 8811 	msr	BASEPRI, r0
   11c50:	f04f 0004 	mov.w	r0, #4
   11c54:	df02      	svc	2
   11c56:	bf00      	nop
   11c58:	2000114c 	.word	0x2000114c

00011c5c <ping_resp_send>:
{
   11c5c:	b510      	push	{r4, lr}
   11c5e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11c60:	480b      	ldr	r0, [pc, #44]	; (11c90 <ping_resp_send+0x34>)
   11c62:	f7fd fb92 	bl	f38a <mem_acquire>
	LL_ASSERT(node_tx);
   11c66:	b160      	cbz	r0, 11c82 <ping_resp_send+0x26>
   11c68:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11c6a:	7903      	ldrb	r3, [r0, #4]
   11c6c:	f043 0303 	orr.w	r3, r3, #3
   11c70:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11c72:	2301      	movs	r3, #1
   11c74:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   11c76:	2313      	movs	r3, #19
   11c78:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11c7a:	4620      	mov	r0, r4
   11c7c:	f7ff fe16 	bl	118ac <ctrl_tx_enqueue>
   11c80:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11c82:	4040      	eors	r0, r0
   11c84:	f380 8811 	msr	BASEPRI, r0
   11c88:	f04f 0004 	mov.w	r0, #4
   11c8c:	df02      	svc	2
   11c8e:	bf00      	nop
   11c90:	2000114c 	.word	0x2000114c

00011c94 <length_resp_send>:
{
   11c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c96:	4604      	mov	r4, r0
   11c98:	460f      	mov	r7, r1
   11c9a:	4615      	mov	r5, r2
   11c9c:	461e      	mov	r6, r3
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11c9e:	480e      	ldr	r0, [pc, #56]	; (11cd8 <length_resp_send+0x44>)
   11ca0:	f7fd fb73 	bl	f38a <mem_acquire>
	LL_ASSERT(node_tx);
   11ca4:	b190      	cbz	r0, 11ccc <length_resp_send+0x38>
   11ca6:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ca8:	7903      	ldrb	r3, [r0, #4]
   11caa:	f043 0303 	orr.w	r3, r3, #3
   11cae:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11cb0:	2309      	movs	r3, #9
   11cb2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11cb4:	2315      	movs	r3, #21
   11cb6:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
   11cb8:	8107      	strh	r7, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
   11cba:	8186      	strh	r6, [r0, #12]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
   11cbc:	8145      	strh	r5, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
   11cbe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   11cc2:	81c3      	strh	r3, [r0, #14]
	ctrl_tx_enqueue(conn, node_tx);
   11cc4:	4620      	mov	r0, r4
   11cc6:	f7ff fdf1 	bl	118ac <ctrl_tx_enqueue>
   11cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(node_tx);
   11ccc:	4040      	eors	r0, r0
   11cce:	f380 8811 	msr	BASEPRI, r0
   11cd2:	f04f 0004 	mov.w	r0, #4
   11cd6:	df02      	svc	2
   11cd8:	2000114c 	.word	0x2000114c

00011cdc <reject_ext_ind_send>:
{
   11cdc:	b570      	push	{r4, r5, r6, lr}
   11cde:	4604      	mov	r4, r0
   11ce0:	460e      	mov	r6, r1
   11ce2:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11ce4:	480c      	ldr	r0, [pc, #48]	; (11d18 <reject_ext_ind_send+0x3c>)
   11ce6:	f7fd fb50 	bl	f38a <mem_acquire>
	LL_ASSERT(node_tx);
   11cea:	b170      	cbz	r0, 11d0a <reject_ext_ind_send+0x2e>
   11cec:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11cee:	7903      	ldrb	r3, [r0, #4]
   11cf0:	f043 0303 	orr.w	r3, r3, #3
   11cf4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11cf6:	2303      	movs	r3, #3
   11cf8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11cfa:	2311      	movs	r3, #17
   11cfc:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
   11cfe:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
   11d00:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11d02:	4620      	mov	r0, r4
   11d04:	f7ff fdd2 	bl	118ac <ctrl_tx_enqueue>
   11d08:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(node_tx);
   11d0a:	4040      	eors	r0, r0
   11d0c:	f380 8811 	msr	BASEPRI, r0
   11d10:	f04f 0004 	mov.w	r0, #4
   11d14:	df02      	svc	2
   11d16:	bf00      	nop
   11d18:	2000114c 	.word	0x2000114c

00011d1c <phy_rsp_send>:
{
   11d1c:	b510      	push	{r4, lr}
   11d1e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11d20:	4810      	ldr	r0, [pc, #64]	; (11d64 <phy_rsp_send+0x48>)
   11d22:	f7fd fb32 	bl	f38a <mem_acquire>
	LL_ASSERT(node_tx);
   11d26:	b1b0      	cbz	r0, 11d56 <phy_rsp_send+0x3a>
   11d28:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d2a:	7903      	ldrb	r3, [r0, #4]
   11d2c:	f043 0303 	orr.w	r3, r3, #3
   11d30:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11d32:	2303      	movs	r3, #3
   11d34:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11d36:	2317      	movs	r3, #23
   11d38:	71c3      	strb	r3, [r0, #7]
		conn->phy_pref_tx;
   11d3a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   11d3e:	f3c3 0302 	ubfx	r3, r3, #0, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
   11d42:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_rx;
   11d44:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   11d48:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
   11d4c:	7243      	strb	r3, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11d4e:	4620      	mov	r0, r4
   11d50:	f7ff fdac 	bl	118ac <ctrl_tx_enqueue>
   11d54:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11d56:	4040      	eors	r0, r0
   11d58:	f380 8811 	msr	BASEPRI, r0
   11d5c:	f04f 0004 	mov.w	r0, #4
   11d60:	df02      	svc	2
   11d62:	bf00      	nop
   11d64:	2000114c 	.word	0x2000114c

00011d68 <unknown_rsp_send>:
{
   11d68:	b538      	push	{r3, r4, r5, lr}
   11d6a:	4604      	mov	r4, r0
   11d6c:	460d      	mov	r5, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11d6e:	480c      	ldr	r0, [pc, #48]	; (11da0 <unknown_rsp_send+0x38>)
   11d70:	f7fd fb0b 	bl	f38a <mem_acquire>
	LL_ASSERT(node_tx);
   11d74:	b168      	cbz	r0, 11d92 <unknown_rsp_send+0x2a>
   11d76:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d78:	7903      	ldrb	r3, [r0, #4]
   11d7a:	f043 0303 	orr.w	r3, r3, #3
   11d7e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   11d80:	2302      	movs	r3, #2
   11d82:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   11d84:	2307      	movs	r3, #7
   11d86:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
   11d88:	7205      	strb	r5, [r0, #8]
	ctrl_tx_enqueue(conn, node_tx);
   11d8a:	4620      	mov	r0, r4
   11d8c:	f7ff fd8e 	bl	118ac <ctrl_tx_enqueue>
   11d90:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   11d92:	4040      	eors	r0, r0
   11d94:	f380 8811 	msr	BASEPRI, r0
   11d98:	f04f 0004 	mov.w	r0, #4
   11d9c:	df02      	svc	2
   11d9e:	bf00      	nop
   11da0:	2000114c 	.word	0x2000114c

00011da4 <ticker_update_adv_assert>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11da4:	b120      	cbz	r0, 11db0 <ticker_update_adv_assert+0xc>
   11da6:	4b06      	ldr	r3, [pc, #24]	; (11dc0 <ticker_update_adv_assert+0x1c>)
   11da8:	7b9b      	ldrb	r3, [r3, #14]
   11daa:	b2db      	uxtb	r3, r3
   11dac:	2b05      	cmp	r3, #5
   11dae:	d100      	bne.n	11db2 <ticker_update_adv_assert+0xe>
   11db0:	4770      	bx	lr
   11db2:	4040      	eors	r0, r0
   11db4:	f380 8811 	msr	BASEPRI, r0
   11db8:	f04f 0004 	mov.w	r0, #4
   11dbc:	df02      	svc	2
   11dbe:	bf00      	nop
   11dc0:	20000ff4 	.word	0x20000ff4

00011dc4 <ticker_update_slave_assert>:
	u8_t ticker_id = (u32_t)params & 0xFF;
   11dc4:	b2c9      	uxtb	r1, r1
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11dc6:	b120      	cbz	r0, 11dd2 <ticker_update_slave_assert+0xe>
   11dc8:	4b05      	ldr	r3, [pc, #20]	; (11de0 <ticker_update_slave_assert+0x1c>)
   11dca:	7b9b      	ldrb	r3, [r3, #14]
   11dcc:	b2db      	uxtb	r3, r3
   11dce:	4299      	cmp	r1, r3
   11dd0:	d100      	bne.n	11dd4 <ticker_update_slave_assert+0x10>
   11dd2:	4770      	bx	lr
   11dd4:	4040      	eors	r0, r0
   11dd6:	f380 8811 	msr	BASEPRI, r0
   11dda:	f04f 0004 	mov.w	r0, #4
   11dde:	df02      	svc	2
   11de0:	20000ff4 	.word	0x20000ff4

00011de4 <ticker_op_latency_cancelled>:

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11de4:	b930      	cbnz	r0, 11df4 <ticker_op_latency_cancelled+0x10>

	conn = (struct connection *)params;
	conn->slave.latency_cancel = 0;
   11de6:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   11dea:	f36f 0341 	bfc	r3, #1, #1
   11dee:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
   11df2:	4770      	bx	lr
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11df4:	4040      	eors	r0, r0
   11df6:	f380 8811 	msr	BASEPRI, r0
   11dfa:	f04f 0004 	mov.w	r0, #4
   11dfe:	df02      	svc	2

00011e00 <packet_rx_allocate>:
{
   11e00:	b570      	push	{r4, r5, r6, lr}
	if (max > _radio.link_rx_data_quota) {
   11e02:	4b22      	ldr	r3, [pc, #136]	; (11e8c <packet_rx_allocate+0x8c>)
   11e04:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
   11e08:	4283      	cmp	r3, r0
   11e0a:	d300      	bcc.n	11e0e <packet_rx_allocate+0xe>
   11e0c:	4603      	mov	r3, r0
	acquire = _radio.packet_rx_acquire + 1;
   11e0e:	4a1f      	ldr	r2, [pc, #124]	; (11e8c <packet_rx_allocate+0x8c>)
   11e10:	f892 413e 	ldrb.w	r4, [r2, #318]	; 0x13e
   11e14:	3401      	adds	r4, #1
   11e16:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
   11e18:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   11e1c:	4294      	cmp	r4, r2
   11e1e:	d10d      	bne.n	11e3c <packet_rx_allocate+0x3c>
		acquire = 0;
   11e20:	2400      	movs	r4, #0
   11e22:	e00b      	b.n	11e3c <packet_rx_allocate+0x3c>
			mem_release(link, &_radio.link_rx_free);
   11e24:	491a      	ldr	r1, [pc, #104]	; (11e90 <packet_rx_allocate+0x90>)
   11e26:	4630      	mov	r0, r6
   11e28:	f7fd facb 	bl	f3c2 <mem_release>
			break;
   11e2c:	bd70      	pop	{r4, r5, r6, pc}
		_radio.link_rx_data_quota--;
   11e2e:	4a17      	ldr	r2, [pc, #92]	; (11e8c <packet_rx_allocate+0x8c>)
   11e30:	f892 3150 	ldrb.w	r3, [r2, #336]	; 0x150
   11e34:	3b01      	subs	r3, #1
   11e36:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   11e3a:	462b      	mov	r3, r5
   11e3c:	1e5d      	subs	r5, r3, #1
   11e3e:	b2ed      	uxtb	r5, r5
   11e40:	b313      	cbz	r3, 11e88 <packet_rx_allocate+0x88>
   11e42:	4b12      	ldr	r3, [pc, #72]	; (11e8c <packet_rx_allocate+0x8c>)
   11e44:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   11e48:	b2db      	uxtb	r3, r3
   11e4a:	429c      	cmp	r4, r3
   11e4c:	d01c      	beq.n	11e88 <packet_rx_allocate+0x88>
		link = mem_acquire(&_radio.link_rx_free);
   11e4e:	4810      	ldr	r0, [pc, #64]	; (11e90 <packet_rx_allocate+0x90>)
   11e50:	f7fd fa9b 	bl	f38a <mem_acquire>
		if (!link) {
   11e54:	4606      	mov	r6, r0
   11e56:	b1b8      	cbz	r0, 11e88 <packet_rx_allocate+0x88>
		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   11e58:	480e      	ldr	r0, [pc, #56]	; (11e94 <packet_rx_allocate+0x94>)
   11e5a:	f7fd fa96 	bl	f38a <mem_acquire>
		if (!radio_pdu_node_rx) {
   11e5e:	4602      	mov	r2, r0
   11e60:	2800      	cmp	r0, #0
   11e62:	d0df      	beq.n	11e24 <packet_rx_allocate+0x24>
		radio_pdu_node_rx->hdr.onion.link = link;
   11e64:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
   11e66:	4b09      	ldr	r3, [pc, #36]	; (11e8c <packet_rx_allocate+0x8c>)
   11e68:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   11e6c:	f893 013e 	ldrb.w	r0, [r3, #318]	; 0x13e
   11e70:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		_radio.packet_rx_acquire = acquire;
   11e74:	f883 413e 	strb.w	r4, [r3, #318]	; 0x13e
		acquire = _radio.packet_rx_acquire + 1;
   11e78:	3401      	adds	r4, #1
   11e7a:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
   11e7c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
   11e80:	429c      	cmp	r4, r3
   11e82:	d1d4      	bne.n	11e2e <packet_rx_allocate+0x2e>
			acquire = 0;
   11e84:	2400      	movs	r4, #0
   11e86:	e7d2      	b.n	11e2e <packet_rx_allocate+0x2e>
   11e88:	bd70      	pop	{r4, r5, r6, pc}
   11e8a:	bf00      	nop
   11e8c:	20000ff4 	.word	0x20000ff4
   11e90:	20001138 	.word	0x20001138
   11e94:	20001120 	.word	0x20001120

00011e98 <tx_cmplt_get>:
{
   11e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_first = *first;
   11e9c:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   11e9e:	4294      	cmp	r4, r2
   11ea0:	d043      	beq.n	11f2a <tx_cmplt_get+0x92>
   11ea2:	4690      	mov	r8, r2
   11ea4:	4689      	mov	r9, r1
   11ea6:	4607      	mov	r7, r0
	*handle = _radio.pkt_release[_first].handle;
   11ea8:	4b21      	ldr	r3, [pc, #132]	; (11f30 <tx_cmplt_get+0x98>)
   11eaa:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   11eae:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   11eb2:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
   11eb4:	2600      	movs	r6, #0
   11eb6:	e00f      	b.n	11ed8 <tx_cmplt_get+0x40>
			_radio.pkt_release[_first].node_tx =
   11eb8:	2301      	movs	r3, #1
   11eba:	606b      	str	r3, [r5, #4]
			cmplt++;
   11ebc:	441e      	add	r6, r3
   11ebe:	b2f6      	uxtb	r6, r6
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   11ec0:	f030 0303 	bics.w	r3, r0, #3
   11ec4:	d126      	bne.n	11f14 <tx_cmplt_get+0x7c>
		_first = _first + 1;
   11ec6:	3401      	adds	r4, #1
   11ec8:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
   11eca:	4b19      	ldr	r3, [pc, #100]	; (11f30 <tx_cmplt_get+0x98>)
   11ecc:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   11ed0:	429c      	cmp	r4, r3
   11ed2:	d023      	beq.n	11f1c <tx_cmplt_get+0x84>
	} while (_first != last);
   11ed4:	4544      	cmp	r4, r8
   11ed6:	d023      	beq.n	11f20 <tx_cmplt_get+0x88>
		if (*handle != _radio.pkt_release[_first].handle) {
   11ed8:	883a      	ldrh	r2, [r7, #0]
   11eda:	4b15      	ldr	r3, [pc, #84]	; (11f30 <tx_cmplt_get+0x98>)
   11edc:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   11ee0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   11ee4:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   11ee8:	429a      	cmp	r2, r3
   11eea:	d119      	bne.n	11f20 <tx_cmplt_get+0x88>
		node_tx = _radio.pkt_release[_first].node_tx;
   11eec:	6868      	ldr	r0, [r5, #4]
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
   11eee:	1d03      	adds	r3, r0, #4
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
   11ef0:	2801      	cmp	r0, #1
   11ef2:	d9e1      	bls.n	11eb8 <tx_cmplt_get+0x20>
   11ef4:	f030 0203 	bics.w	r2, r0, #3
   11ef8:	d009      	beq.n	11f0e <tx_cmplt_get+0x76>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   11efa:	b143      	cbz	r3, 11f0e <tx_cmplt_get+0x76>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   11efc:	7943      	ldrb	r3, [r0, #5]
   11efe:	b133      	cbz	r3, 11f0e <tx_cmplt_get+0x76>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   11f00:	7903      	ldrb	r3, [r0, #4]
   11f02:	f003 0303 	and.w	r3, r3, #3
   11f06:	3b01      	subs	r3, #1
   11f08:	b2db      	uxtb	r3, r3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   11f0a:	2b01      	cmp	r3, #1
   11f0c:	d9d4      	bls.n	11eb8 <tx_cmplt_get+0x20>
			_radio.pkt_release[_first].node_tx =
   11f0e:	2302      	movs	r3, #2
   11f10:	606b      	str	r3, [r5, #4]
   11f12:	e7d5      	b.n	11ec0 <tx_cmplt_get+0x28>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   11f14:	4907      	ldr	r1, [pc, #28]	; (11f34 <tx_cmplt_get+0x9c>)
   11f16:	f7fd fa54 	bl	f3c2 <mem_release>
   11f1a:	e7d4      	b.n	11ec6 <tx_cmplt_get+0x2e>
			_first = 0;
   11f1c:	2400      	movs	r4, #0
   11f1e:	e7d9      	b.n	11ed4 <tx_cmplt_get+0x3c>
	*first = _first;
   11f20:	f889 4000 	strb.w	r4, [r9]
}
   11f24:	4630      	mov	r0, r6
   11f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
   11f2a:	2600      	movs	r6, #0
   11f2c:	e7fa      	b.n	11f24 <tx_cmplt_get+0x8c>
   11f2e:	bf00      	nop
   11f30:	20000ff4 	.word	0x20000ff4
   11f34:	20001154 	.word	0x20001154

00011f38 <ticker_job_disable>:
{
   11f38:	b508      	push	{r3, lr}
	if (_radio.state != STATE_NONE) {
   11f3a:	4b05      	ldr	r3, [pc, #20]	; (11f50 <ticker_job_disable+0x18>)
   11f3c:	7c1b      	ldrb	r3, [r3, #16]
   11f3e:	b903      	cbnz	r3, 11f42 <ticker_job_disable+0xa>
   11f40:	bd08      	pop	{r3, pc}
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   11f42:	2200      	movs	r2, #0
   11f44:	2101      	movs	r1, #1
   11f46:	4608      	mov	r0, r1
   11f48:	f7fd f8a0 	bl	f08c <mayfly_enable>
}
   11f4c:	e7f8      	b.n	11f40 <ticker_job_disable+0x8>
   11f4e:	bf00      	nop
   11f50:	20000ff4 	.word	0x20000ff4

00011f54 <connection_get>:
	if (handle < _radio.connection_count) {
   11f54:	4b0d      	ldr	r3, [pc, #52]	; (11f8c <connection_get+0x38>)
   11f56:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   11f5a:	4283      	cmp	r3, r0
   11f5c:	d910      	bls.n	11f80 <connection_get+0x2c>
{
   11f5e:	b510      	push	{r4, lr}
   11f60:	4604      	mov	r4, r0
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   11f62:	4602      	mov	r2, r0
   11f64:	f44f 71aa 	mov.w	r1, #340	; 0x154
   11f68:	4b08      	ldr	r3, [pc, #32]	; (11f8c <connection_get+0x38>)
   11f6a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   11f6e:	f7fd fa49 	bl	f404 <mem_get>
		if ((conn) && (conn->handle == handle)) {
   11f72:	4603      	mov	r3, r0
   11f74:	b110      	cbz	r0, 11f7c <connection_get+0x28>
   11f76:	8c02      	ldrh	r2, [r0, #32]
   11f78:	4294      	cmp	r4, r2
   11f7a:	d104      	bne.n	11f86 <connection_get+0x32>
}
   11f7c:	4618      	mov	r0, r3
   11f7e:	bd10      	pop	{r4, pc}
	return 0;
   11f80:	2300      	movs	r3, #0
}
   11f82:	4618      	mov	r0, r3
   11f84:	4770      	bx	lr
	return 0;
   11f86:	2300      	movs	r3, #0
   11f88:	e7f8      	b.n	11f7c <connection_get+0x28>
   11f8a:	bf00      	nop
   11f8c:	20000ff4 	.word	0x20000ff4

00011f90 <role_disable>:
{
   11f90:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f92:	b087      	sub	sp, #28
   11f94:	4604      	mov	r4, r0
   11f96:	460d      	mov	r5, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11f98:	2302      	movs	r3, #2
   11f9a:	9305      	str	r3, [sp, #20]
	switch (ticker_id_primary) {
   11f9c:	2805      	cmp	r0, #5
   11f9e:	d00d      	beq.n	11fbc <role_disable+0x2c>
   11fa0:	2806      	cmp	r0, #6
   11fa2:	d02a      	beq.n	11ffa <role_disable+0x6a>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   11fa4:	2806      	cmp	r0, #6
   11fa6:	d957      	bls.n	12058 <role_disable+0xc8>
			conn_handle = ticker_id_primary -
   11fa8:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   11faa:	b280      	uxth	r0, r0
   11fac:	f7ff ffd2 	bl	11f54 <connection_get>
			if (!conn) {
   11fb0:	2800      	cmp	r0, #0
   11fb2:	f000 8153 	beq.w	1225c <role_disable+0x2cc>
			ticks_xtal_to_start =
   11fb6:	6806      	ldr	r6, [r0, #0]
			ticks_active_to_start =
   11fb8:	6847      	ldr	r7, [r0, #4]
		break;
   11fba:	e023      	b.n	12004 <role_disable+0x74>
		ticks_xtal_to_start =
   11fbc:	4b9f      	ldr	r3, [pc, #636]	; (1223c <role_disable+0x2ac>)
   11fbe:	695e      	ldr	r6, [r3, #20]
		ticks_active_to_start =
   11fc0:	699f      	ldr	r7, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11fc2:	ab05      	add	r3, sp, #20
   11fc4:	9300      	str	r3, [sp, #0]
   11fc6:	4b9e      	ldr	r3, [pc, #632]	; (12240 <role_disable+0x2b0>)
   11fc8:	460a      	mov	r2, r1
   11fca:	2103      	movs	r1, #3
   11fcc:	2000      	movs	r0, #0
   11fce:	f7fe ff47 	bl	10e60 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11fd2:	2802      	cmp	r0, #2
   11fd4:	d00d      	beq.n	11ff2 <role_disable+0x62>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   11fd6:	9b05      	ldr	r3, [sp, #20]
   11fd8:	b1a3      	cbz	r3, 12004 <role_disable+0x74>
   11fda:	9b05      	ldr	r3, [sp, #20]
   11fdc:	2b01      	cmp	r3, #1
   11fde:	d011      	beq.n	12004 <role_disable+0x74>
   11fe0:	4040      	eors	r0, r0
   11fe2:	f380 8811 	msr	BASEPRI, r0
   11fe6:	f04f 0004 	mov.w	r0, #4
   11fea:	df02      	svc	2
   11fec:	bf20      	wfe
  __ASM volatile ("sev");
   11fee:	bf40      	sev
  __ASM volatile ("wfe");
   11ff0:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   11ff2:	9b05      	ldr	r3, [sp, #20]
   11ff4:	2b02      	cmp	r3, #2
   11ff6:	d0f9      	beq.n	11fec <role_disable+0x5c>
   11ff8:	e7ed      	b.n	11fd6 <role_disable+0x46>
		ticks_xtal_to_start =
   11ffa:	4b90      	ldr	r3, [pc, #576]	; (1223c <role_disable+0x2ac>)
   11ffc:	f8d3 60cc 	ldr.w	r6, [r3, #204]	; 0xcc
		ticks_active_to_start =
   12000:	f8d3 70d0 	ldr.w	r7, [r3, #208]	; 0xd0
	LL_ASSERT(!_radio.ticker_id_stop);
   12004:	4b8d      	ldr	r3, [pc, #564]	; (1223c <role_disable+0x2ac>)
   12006:	7b9b      	ldrb	r3, [r3, #14]
   12008:	2b00      	cmp	r3, #0
   1200a:	d12b      	bne.n	12064 <role_disable+0xd4>
	_radio.ticker_id_stop = ticker_id_primary;
   1200c:	4b8b      	ldr	r3, [pc, #556]	; (1223c <role_disable+0x2ac>)
   1200e:	739c      	strb	r4, [r3, #14]
	ret_cb = TICKER_STATUS_BUSY;
   12010:	ab06      	add	r3, sp, #24
   12012:	2202      	movs	r2, #2
   12014:	f843 2d04 	str.w	r2, [r3, #-4]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12018:	9300      	str	r3, [sp, #0]
   1201a:	4b89      	ldr	r3, [pc, #548]	; (12240 <role_disable+0x2b0>)
   1201c:	4622      	mov	r2, r4
   1201e:	2103      	movs	r1, #3
   12020:	2000      	movs	r0, #0
   12022:	f7fe ff1d 	bl	10e60 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   12026:	2802      	cmp	r0, #2
   12028:	d022      	beq.n	12070 <role_disable+0xe0>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   1202a:	9b05      	ldr	r3, [sp, #20]
   1202c:	b973      	cbnz	r3, 1204c <role_disable+0xbc>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   1202e:	4b83      	ldr	r3, [pc, #524]	; (1223c <role_disable+0x2ac>)
   12030:	7b1b      	ldrb	r3, [r3, #12]
   12032:	b2db      	uxtb	r3, r3
   12034:	429c      	cmp	r4, r3
   12036:	d02d      	beq.n	12094 <role_disable+0x104>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   12038:	4b80      	ldr	r3, [pc, #512]	; (1223c <role_disable+0x2ac>)
   1203a:	7b5b      	ldrb	r3, [r3, #13]
   1203c:	b2db      	uxtb	r3, r3
   1203e:	429c      	cmp	r4, r3
   12040:	d028      	beq.n	12094 <role_disable+0x104>
	if (!_radio.ticker_id_stop) {
   12042:	4b7e      	ldr	r3, [pc, #504]	; (1223c <role_disable+0x2ac>)
   12044:	7b9b      	ldrb	r3, [r3, #14]
   12046:	b90b      	cbnz	r3, 1204c <role_disable+0xbc>
		ret_cb = TICKER_STATUS_FAILURE;
   12048:	2301      	movs	r3, #1
   1204a:	9305      	str	r3, [sp, #20]
	_radio.ticker_id_stop = 0;
   1204c:	2200      	movs	r2, #0
   1204e:	4b7b      	ldr	r3, [pc, #492]	; (1223c <role_disable+0x2ac>)
   12050:	739a      	strb	r2, [r3, #14]
	return ret_cb;
   12052:	9805      	ldr	r0, [sp, #20]
}
   12054:	b007      	add	sp, #28
   12056:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LL_ASSERT(0);
   12058:	4040      	eors	r0, r0
   1205a:	f380 8811 	msr	BASEPRI, r0
   1205e:	f04f 0004 	mov.w	r0, #4
   12062:	df02      	svc	2
	LL_ASSERT(!_radio.ticker_id_stop);
   12064:	4040      	eors	r0, r0
   12066:	f380 8811 	msr	BASEPRI, r0
   1206a:	f04f 0004 	mov.w	r0, #4
   1206e:	df02      	svc	2
		if (_radio.ticker_id_event == ticker_id_primary) {
   12070:	4b72      	ldr	r3, [pc, #456]	; (1223c <role_disable+0x2ac>)
   12072:	7b5b      	ldrb	r3, [r3, #13]
   12074:	b2db      	uxtb	r3, r3
   12076:	429c      	cmp	r4, r3
   12078:	d108      	bne.n	1208c <role_disable+0xfc>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1207a:	2201      	movs	r2, #1
   1207c:	4611      	mov	r1, r2
   1207e:	2003      	movs	r0, #3
   12080:	f7fd f804 	bl	f08c <mayfly_enable>
   12084:	e002      	b.n	1208c <role_disable+0xfc>
   12086:	bf20      	wfe
  __ASM volatile ("sev");
   12088:	bf40      	sev
  __ASM volatile ("wfe");
   1208a:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   1208c:	9b05      	ldr	r3, [sp, #20]
   1208e:	2b02      	cmp	r3, #2
   12090:	d0f9      	beq.n	12086 <role_disable+0xf6>
   12092:	e7ca      	b.n	1202a <role_disable+0x9a>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12094:	ab06      	add	r3, sp, #24
   12096:	2202      	movs	r2, #2
   12098:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1209c:	9300      	str	r3, [sp, #0]
   1209e:	4b68      	ldr	r3, [pc, #416]	; (12240 <role_disable+0x2b0>)
   120a0:	2200      	movs	r2, #0
   120a2:	2103      	movs	r1, #3
   120a4:	4610      	mov	r0, r2
   120a6:	f7fe fedb 	bl	10e60 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   120aa:	2802      	cmp	r0, #2
   120ac:	d029      	beq.n	12102 <role_disable+0x172>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   120ae:	9b02      	ldr	r3, [sp, #8]
   120b0:	2b00      	cmp	r3, #0
   120b2:	d17c      	bne.n	121ae <role_disable+0x21e>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   120b4:	2302      	movs	r3, #2
   120b6:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   120b8:	4b60      	ldr	r3, [pc, #384]	; (1223c <role_disable+0x2ac>)
   120ba:	7b1b      	ldrb	r3, [r3, #12]
   120bc:	2b00      	cmp	r3, #0
   120be:	d02e      	beq.n	1211e <role_disable+0x18e>
		_radio.ticker_id_prepare = 0;
   120c0:	2000      	movs	r0, #0
   120c2:	4b5e      	ldr	r3, [pc, #376]	; (1223c <role_disable+0x2ac>)
   120c4:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   120c6:	ab03      	add	r3, sp, #12
   120c8:	9300      	str	r3, [sp, #0]
   120ca:	4b5d      	ldr	r3, [pc, #372]	; (12240 <role_disable+0x2b0>)
   120cc:	2201      	movs	r2, #1
   120ce:	2103      	movs	r1, #3
   120d0:	f7fe fec6 	bl	10e60 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   120d4:	2802      	cmp	r0, #2
   120d6:	d028      	beq.n	1212a <role_disable+0x19a>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   120d8:	9b03      	ldr	r3, [sp, #12]
   120da:	2b00      	cmp	r3, #0
   120dc:	d142      	bne.n	12164 <role_disable+0x1d4>
			ticks_xtal_to_start &= ~BIT(31);
   120de:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   120e2:	42b7      	cmp	r7, r6
   120e4:	d92f      	bls.n	12146 <role_disable+0x1b6>
				retval = mayfly_enqueue(
   120e6:	4b57      	ldr	r3, [pc, #348]	; (12244 <role_disable+0x2b4>)
   120e8:	2200      	movs	r2, #0
   120ea:	4611      	mov	r1, r2
   120ec:	2003      	movs	r0, #3
   120ee:	f7fd f80b 	bl	f108 <mayfly_enqueue>
				LL_ASSERT(!retval);
   120f2:	2800      	cmp	r0, #0
   120f4:	d0a5      	beq.n	12042 <role_disable+0xb2>
   120f6:	4040      	eors	r0, r0
   120f8:	f380 8811 	msr	BASEPRI, r0
   120fc:	f04f 0004 	mov.w	r0, #4
   12100:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   12102:	2201      	movs	r2, #1
   12104:	4611      	mov	r1, r2
   12106:	2003      	movs	r0, #3
   12108:	f7fc ffc0 	bl	f08c <mayfly_enable>
		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   1210c:	9b02      	ldr	r3, [sp, #8]
   1210e:	2b02      	cmp	r3, #2
   12110:	d1cd      	bne.n	120ae <role_disable+0x11e>
   12112:	4040      	eors	r0, r0
   12114:	f380 8811 	msr	BASEPRI, r0
   12118:	f04f 0004 	mov.w	r0, #4
   1211c:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare);
   1211e:	4040      	eors	r0, r0
   12120:	f380 8811 	msr	BASEPRI, r0
   12124:	f04f 0004 	mov.w	r0, #4
   12128:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1212a:	2201      	movs	r2, #1
   1212c:	4611      	mov	r1, r2
   1212e:	2003      	movs	r0, #3
   12130:	f7fc ffac 	bl	f08c <mayfly_enable>
			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   12134:	9b03      	ldr	r3, [sp, #12]
   12136:	2b02      	cmp	r3, #2
   12138:	d1ce      	bne.n	120d8 <role_disable+0x148>
   1213a:	4040      	eors	r0, r0
   1213c:	f380 8811 	msr	BASEPRI, r0
   12140:	f04f 0004 	mov.w	r0, #4
   12144:	df02      	svc	2
				retval = mayfly_enqueue(
   12146:	4b40      	ldr	r3, [pc, #256]	; (12248 <role_disable+0x2b8>)
   12148:	2200      	movs	r2, #0
   1214a:	4611      	mov	r1, r2
   1214c:	2003      	movs	r0, #3
   1214e:	f7fc ffdb 	bl	f108 <mayfly_enqueue>
				LL_ASSERT(!retval);
   12152:	2800      	cmp	r0, #0
   12154:	f43f af75 	beq.w	12042 <role_disable+0xb2>
   12158:	4040      	eors	r0, r0
   1215a:	f380 8811 	msr	BASEPRI, r0
   1215e:	f04f 0004 	mov.w	r0, #4
   12162:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12164:	9b03      	ldr	r3, [sp, #12]
   12166:	2b01      	cmp	r3, #1
   12168:	d11b      	bne.n	121a2 <role_disable+0x212>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   1216a:	4b36      	ldr	r3, [pc, #216]	; (12244 <role_disable+0x2b4>)
   1216c:	2200      	movs	r2, #0
   1216e:	4611      	mov	r1, r2
   12170:	2003      	movs	r0, #3
   12172:	f7fc ffc9 	bl	f108 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12176:	b970      	cbnz	r0, 12196 <role_disable+0x206>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   12178:	4b33      	ldr	r3, [pc, #204]	; (12248 <role_disable+0x2b8>)
   1217a:	2200      	movs	r2, #0
   1217c:	4611      	mov	r1, r2
   1217e:	2003      	movs	r0, #3
   12180:	f7fc ffc2 	bl	f108 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12184:	2800      	cmp	r0, #0
   12186:	f43f af5c 	beq.w	12042 <role_disable+0xb2>
   1218a:	4040      	eors	r0, r0
   1218c:	f380 8811 	msr	BASEPRI, r0
   12190:	f04f 0004 	mov.w	r0, #4
   12194:	df02      	svc	2
			LL_ASSERT(!retval);
   12196:	4040      	eors	r0, r0
   12198:	f380 8811 	msr	BASEPRI, r0
   1219c:	f04f 0004 	mov.w	r0, #4
   121a0:	df02      	svc	2
			LL_ASSERT(0);
   121a2:	4040      	eors	r0, r0
   121a4:	f380 8811 	msr	BASEPRI, r0
   121a8:	f04f 0004 	mov.w	r0, #4
   121ac:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   121ae:	9b02      	ldr	r3, [sp, #8]
   121b0:	2b01      	cmp	r3, #1
   121b2:	d14d      	bne.n	12250 <role_disable+0x2c0>
		if (ticker_id_stop != TICKER_NULL) {
   121b4:	2dff      	cmp	r5, #255	; 0xff
   121b6:	d011      	beq.n	121dc <role_disable+0x24c>
			u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   121b8:	ab06      	add	r3, sp, #24
   121ba:	2202      	movs	r2, #2
   121bc:	f843 2d08 	str.w	r2, [r3, #-8]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   121c0:	9300      	str	r3, [sp, #0]
   121c2:	4b1f      	ldr	r3, [pc, #124]	; (12240 <role_disable+0x2b0>)
   121c4:	462a      	mov	r2, r5
   121c6:	2103      	movs	r1, #3
   121c8:	2000      	movs	r0, #0
   121ca:	f7fe fe49 	bl	10e60 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   121ce:	2802      	cmp	r0, #2
   121d0:	d018      	beq.n	12204 <role_disable+0x274>
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   121d2:	9b04      	ldr	r3, [sp, #16]
   121d4:	b113      	cbz	r3, 121dc <role_disable+0x24c>
   121d6:	9b04      	ldr	r3, [sp, #16]
   121d8:	2b01      	cmp	r3, #1
   121da:	d121      	bne.n	12220 <role_disable+0x290>
		if (_radio.role != ROLE_NONE) {
   121dc:	4b17      	ldr	r3, [pc, #92]	; (1223c <role_disable+0x2ac>)
   121de:	7bdb      	ldrb	r3, [r3, #15]
   121e0:	2b00      	cmp	r3, #0
   121e2:	f43f af2e 	beq.w	12042 <role_disable+0xb2>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   121e6:	4b19      	ldr	r3, [pc, #100]	; (1224c <role_disable+0x2bc>)
   121e8:	2204      	movs	r2, #4
   121ea:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   121ec:	2200      	movs	r2, #0
   121ee:	4611      	mov	r1, r2
   121f0:	2003      	movs	r0, #3
   121f2:	f7fc ff89 	bl	f108 <mayfly_enqueue>
			LL_ASSERT(!retval);
   121f6:	b1e0      	cbz	r0, 12232 <role_disable+0x2a2>
   121f8:	4040      	eors	r0, r0
   121fa:	f380 8811 	msr	BASEPRI, r0
   121fe:	f04f 0004 	mov.w	r0, #4
   12202:	df02      	svc	2
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   12204:	2201      	movs	r2, #1
   12206:	4611      	mov	r1, r2
   12208:	2003      	movs	r0, #3
   1220a:	f7fc ff3f 	bl	f08c <mayfly_enable>
				LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   1220e:	9b04      	ldr	r3, [sp, #16]
   12210:	2b02      	cmp	r3, #2
   12212:	d1de      	bne.n	121d2 <role_disable+0x242>
   12214:	4040      	eors	r0, r0
   12216:	f380 8811 	msr	BASEPRI, r0
   1221a:	f04f 0004 	mov.w	r0, #4
   1221e:	df02      	svc	2
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   12220:	4040      	eors	r0, r0
   12222:	f380 8811 	msr	BASEPRI, r0
   12226:	f04f 0004 	mov.w	r0, #4
   1222a:	df02      	svc	2
   1222c:	bf20      	wfe
  __ASM volatile ("sev");
   1222e:	bf40      	sev
  __ASM volatile ("wfe");
   12230:	bf20      	wfe
			while (_radio.role != ROLE_NONE) {
   12232:	4b02      	ldr	r3, [pc, #8]	; (1223c <role_disable+0x2ac>)
   12234:	7bdb      	ldrb	r3, [r3, #15]
   12236:	2b00      	cmp	r3, #0
   12238:	d1f8      	bne.n	1222c <role_disable+0x29c>
   1223a:	e702      	b.n	12042 <role_disable+0xb2>
   1223c:	20000ff4 	.word	0x20000ff4
   12240:	0001170d 	.word	0x0001170d
   12244:	2000bd60 	.word	0x2000bd60
   12248:	2000be20 	.word	0x2000be20
   1224c:	2000bd90 	.word	0x2000bd90
		LL_ASSERT(0);
   12250:	4040      	eors	r0, r0
   12252:	f380 8811 	msr	BASEPRI, r0
   12256:	f04f 0004 	mov.w	r0, #4
   1225a:	df02      	svc	2
				return 1;
   1225c:	2001      	movs	r0, #1
   1225e:	e6f9      	b.n	12054 <role_disable+0xc4>

00012260 <event_stop>:
{
   12260:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   12262:	4a08      	ldr	r2, [pc, #32]	; (12284 <event_stop+0x24>)
   12264:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12266:	4613      	mov	r3, r2
   12268:	2200      	movs	r2, #0
   1226a:	4611      	mov	r1, r2
   1226c:	4610      	mov	r0, r2
   1226e:	f7fc ff4b 	bl	f108 <mayfly_enqueue>
	LL_ASSERT(!retval);
   12272:	b900      	cbnz	r0, 12276 <event_stop+0x16>
   12274:	bd08      	pop	{r3, pc}
   12276:	4040      	eors	r0, r0
   12278:	f380 8811 	msr	BASEPRI, r0
   1227c:	f04f 0004 	mov.w	r0, #4
   12280:	df02      	svc	2
   12282:	bf00      	nop
   12284:	2000bd70 	.word	0x2000bd70

00012288 <event_adv_stop>:
{
   12288:	b500      	push	{lr}
   1228a:	b083      	sub	sp, #12
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   1228c:	2305      	movs	r3, #5
   1228e:	2200      	movs	r2, #0
   12290:	4611      	mov	r1, r2
   12292:	4610      	mov	r0, r2
   12294:	f7ff ffe4 	bl	12260 <event_stop>
	ticker_status =
   12298:	f241 73e4 	movw	r3, #6116	; 0x17e4
   1229c:	9300      	str	r3, [sp, #0]
   1229e:	4b09      	ldr	r3, [pc, #36]	; (122c4 <event_adv_stop+0x3c>)
   122a0:	2205      	movs	r2, #5
   122a2:	2100      	movs	r1, #0
   122a4:	4608      	mov	r0, r1
   122a6:	f7fe fddb 	bl	10e60 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   122aa:	b108      	cbz	r0, 122b0 <event_adv_stop+0x28>
   122ac:	2802      	cmp	r0, #2
   122ae:	d102      	bne.n	122b6 <event_adv_stop+0x2e>
}
   122b0:	b003      	add	sp, #12
   122b2:	f85d fb04 	ldr.w	pc, [sp], #4
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   122b6:	4040      	eors	r0, r0
   122b8:	f380 8811 	msr	BASEPRI, r0
   122bc:	f04f 0004 	mov.w	r0, #4
   122c0:	df02      	svc	2
   122c2:	bf00      	nop
   122c4:	00012b49 	.word	0x00012b49

000122c8 <event_inactive>:
{
   122c8:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   122ca:	4b07      	ldr	r3, [pc, #28]	; (122e8 <event_inactive+0x20>)
   122cc:	2200      	movs	r2, #0
   122ce:	4611      	mov	r1, r2
   122d0:	4610      	mov	r0, r2
   122d2:	f7fc ff19 	bl	f108 <mayfly_enqueue>
	LL_ASSERT(!retval);
   122d6:	b900      	cbnz	r0, 122da <event_inactive+0x12>
   122d8:	bd08      	pop	{r3, pc}
   122da:	4040      	eors	r0, r0
   122dc:	f380 8811 	msr	BASEPRI, r0
   122e0:	f04f 0004 	mov.w	r0, #4
   122e4:	df02      	svc	2
   122e6:	bf00      	nop
   122e8:	2000bd40 	.word	0x2000bd40

000122ec <mayfly_xtal_retain>:
{
   122ec:	b508      	push	{r3, lr}
	if (retain) {
   122ee:	b1d1      	cbz	r1, 12326 <mayfly_xtal_retain+0x3a>
		if (!s_xtal_retained) {
   122f0:	4b1c      	ldr	r3, [pc, #112]	; (12364 <mayfly_xtal_retain+0x78>)
   122f2:	781b      	ldrb	r3, [r3, #0]
   122f4:	b953      	cbnz	r3, 1230c <mayfly_xtal_retain+0x20>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   122f6:	2801      	cmp	r0, #1
   122f8:	d109      	bne.n	1230e <mayfly_xtal_retain+0x22>
			s_xtal_retained = 1;
   122fa:	2201      	movs	r2, #1
   122fc:	4b19      	ldr	r3, [pc, #100]	; (12364 <mayfly_xtal_retain+0x78>)
   122fe:	701a      	strb	r2, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   12300:	4b19      	ldr	r3, [pc, #100]	; (12368 <mayfly_xtal_retain+0x7c>)
   12302:	2200      	movs	r2, #0
   12304:	4611      	mov	r1, r2
   12306:	f7fc feff 	bl	f108 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1230a:	b930      	cbnz	r0, 1231a <mayfly_xtal_retain+0x2e>
   1230c:	bd08      	pop	{r3, pc}
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   1230e:	4040      	eors	r0, r0
   12310:	f380 8811 	msr	BASEPRI, r0
   12314:	f04f 0004 	mov.w	r0, #4
   12318:	df02      	svc	2
			LL_ASSERT(!retval);
   1231a:	4040      	eors	r0, r0
   1231c:	f380 8811 	msr	BASEPRI, r0
   12320:	f04f 0004 	mov.w	r0, #4
   12324:	df02      	svc	2
		if (s_xtal_retained) {
   12326:	4b0f      	ldr	r3, [pc, #60]	; (12364 <mayfly_xtal_retain+0x78>)
   12328:	781b      	ldrb	r3, [r3, #0]
   1232a:	2b00      	cmp	r3, #0
   1232c:	d0ee      	beq.n	1230c <mayfly_xtal_retain+0x20>
			s_xtal_retained = 0;
   1232e:	2200      	movs	r2, #0
   12330:	4b0c      	ldr	r3, [pc, #48]	; (12364 <mayfly_xtal_retain+0x78>)
   12332:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
   12334:	b138      	cbz	r0, 12346 <mayfly_xtal_retain+0x5a>
   12336:	2801      	cmp	r0, #1
   12338:	d012      	beq.n	12360 <mayfly_xtal_retain+0x74>
				LL_ASSERT(0);
   1233a:	4040      	eors	r0, r0
   1233c:	f380 8811 	msr	BASEPRI, r0
   12340:	f04f 0004 	mov.w	r0, #4
   12344:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
   12346:	4b09      	ldr	r3, [pc, #36]	; (1236c <mayfly_xtal_retain+0x80>)
			retval = mayfly_enqueue(caller_id,
   12348:	2200      	movs	r2, #0
   1234a:	4611      	mov	r1, r2
   1234c:	f7fc fedc 	bl	f108 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12350:	2800      	cmp	r0, #0
   12352:	d0db      	beq.n	1230c <mayfly_xtal_retain+0x20>
   12354:	4040      	eors	r0, r0
   12356:	f380 8811 	msr	BASEPRI, r0
   1235a:	f04f 0004 	mov.w	r0, #4
   1235e:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
   12360:	4b03      	ldr	r3, [pc, #12]	; (12370 <mayfly_xtal_retain+0x84>)
   12362:	e7f1      	b.n	12348 <mayfly_xtal_retain+0x5c>
   12364:	2000156c 	.word	0x2000156c
   12368:	2000bde0 	.word	0x2000bde0
   1236c:	2000bdf0 	.word	0x2000bdf0
   12370:	2000be00 	.word	0x2000be00

00012374 <event_active>:
{
   12374:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12376:	4b07      	ldr	r3, [pc, #28]	; (12394 <event_active+0x20>)
   12378:	2200      	movs	r2, #0
   1237a:	4611      	mov	r1, r2
   1237c:	4610      	mov	r0, r2
   1237e:	f7fc fec3 	bl	f108 <mayfly_enqueue>
	LL_ASSERT(!retval);
   12382:	b900      	cbnz	r0, 12386 <event_active+0x12>
   12384:	bd08      	pop	{r3, pc}
   12386:	4040      	eors	r0, r0
   12388:	f380 8811 	msr	BASEPRI, r0
   1238c:	f04f 0004 	mov.w	r0, #4
   12390:	df02      	svc	2
   12392:	bf00      	nop
   12394:	2000bd30 	.word	0x2000bd30

00012398 <event_xtal>:
{
   12398:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1239a:	4b07      	ldr	r3, [pc, #28]	; (123b8 <event_xtal+0x20>)
   1239c:	2200      	movs	r2, #0
   1239e:	4611      	mov	r1, r2
   123a0:	4610      	mov	r0, r2
   123a2:	f7fc feb1 	bl	f108 <mayfly_enqueue>
	LL_ASSERT(!retval);
   123a6:	b900      	cbnz	r0, 123aa <event_xtal+0x12>
   123a8:	bd08      	pop	{r3, pc}
   123aa:	4040      	eors	r0, r0
   123ac:	f380 8811 	msr	BASEPRI, r0
   123b0:	f04f 0004 	mov.w	r0, #4
   123b4:	df02      	svc	2
   123b6:	bf00      	nop
   123b8:	2000bdd0 	.word	0x2000bdd0

000123bc <mayfly_radio_active>:
{
   123bc:	b508      	push	{r3, lr}
	if ((u32_t)params) {
   123be:	b148      	cbz	r0, 123d4 <mayfly_radio_active+0x18>
		if (s_active++) {
   123c0:	4a0e      	ldr	r2, [pc, #56]	; (123fc <mayfly_radio_active+0x40>)
   123c2:	7813      	ldrb	r3, [r2, #0]
   123c4:	1c59      	adds	r1, r3, #1
   123c6:	7011      	strb	r1, [r2, #0]
   123c8:	b103      	cbz	r3, 123cc <mayfly_radio_active+0x10>
   123ca:	bd08      	pop	{r3, pc}
		radio_active_callback(1);
   123cc:	2001      	movs	r0, #1
   123ce:	f007 f8a5 	bl	1951c <radio_active_callback>
   123d2:	bd08      	pop	{r3, pc}
		LL_ASSERT(s_active);
   123d4:	4b09      	ldr	r3, [pc, #36]	; (123fc <mayfly_radio_active+0x40>)
   123d6:	781b      	ldrb	r3, [r3, #0]
   123d8:	b14b      	cbz	r3, 123ee <mayfly_radio_active+0x32>
		if (--s_active) {
   123da:	3b01      	subs	r3, #1
   123dc:	b2db      	uxtb	r3, r3
   123de:	4a07      	ldr	r2, [pc, #28]	; (123fc <mayfly_radio_active+0x40>)
   123e0:	7013      	strb	r3, [r2, #0]
   123e2:	2b00      	cmp	r3, #0
   123e4:	d1f1      	bne.n	123ca <mayfly_radio_active+0xe>
		radio_active_callback(0);
   123e6:	2000      	movs	r0, #0
   123e8:	f007 f898 	bl	1951c <radio_active_callback>
   123ec:	e7ed      	b.n	123ca <mayfly_radio_active+0xe>
		LL_ASSERT(s_active);
   123ee:	4040      	eors	r0, r0
   123f0:	f380 8811 	msr	BASEPRI, r0
   123f4:	f04f 0004 	mov.w	r0, #4
   123f8:	df02      	svc	2
   123fa:	bf00      	nop
   123fc:	200014d8 	.word	0x200014d8

00012400 <mayfly_radio_inactive>:
{
   12400:	b508      	push	{r3, lr}
	mayfly_radio_active(0);
   12402:	2000      	movs	r0, #0
   12404:	f7ff ffda 	bl	123bc <mayfly_radio_active>
   12408:	bd08      	pop	{r3, pc}
	...

0001240c <mayfly_radio_stop>:
{
   1240c:	b538      	push	{r3, r4, r5, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
   1240e:	b2c4      	uxtb	r4, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   12410:	1f23      	subs	r3, r4, #4
   12412:	b2db      	uxtb	r3, r3
   12414:	2b01      	cmp	r3, #1
   12416:	d808      	bhi.n	1242a <mayfly_radio_stop+0x1e>
	radio_used = ((_radio.state != STATE_NONE) &&
   12418:	4b10      	ldr	r3, [pc, #64]	; (1245c <mayfly_radio_stop+0x50>)
   1241a:	7c1b      	ldrb	r3, [r3, #16]
		      (_radio.state != STATE_STOP) &&
   1241c:	b16b      	cbz	r3, 1243a <mayfly_radio_stop+0x2e>
	radio_used = ((_radio.state != STATE_NONE) &&
   1241e:	2b04      	cmp	r3, #4
   12420:	d014      	beq.n	1244c <mayfly_radio_stop+0x40>
		      (_radio.state != STATE_STOP) &&
   12422:	2b05      	cmp	r3, #5
   12424:	d007      	beq.n	12436 <mayfly_radio_stop+0x2a>
   12426:	2301      	movs	r3, #1
   12428:	e008      	b.n	1243c <mayfly_radio_stop+0x30>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   1242a:	4040      	eors	r0, r0
   1242c:	f380 8811 	msr	BASEPRI, r0
   12430:	f04f 0004 	mov.w	r0, #4
   12434:	df02      	svc	2
		      (_radio.state != STATE_STOP) &&
   12436:	2300      	movs	r3, #0
   12438:	e000      	b.n	1243c <mayfly_radio_stop+0x30>
   1243a:	2300      	movs	r3, #0
	radio_used = ((_radio.state != STATE_NONE) &&
   1243c:	461d      	mov	r5, r3
	if (radio_used || !radio_is_idle()) {
   1243e:	b13b      	cbz	r3, 12450 <mayfly_radio_stop+0x44>
		if (radio_used) {
   12440:	b10d      	cbz	r5, 12446 <mayfly_radio_stop+0x3a>
			_radio.state = state;
   12442:	4b06      	ldr	r3, [pc, #24]	; (1245c <mayfly_radio_stop+0x50>)
   12444:	741c      	strb	r4, [r3, #16]
		radio_disable();
   12446:	f7fd f9b5 	bl	f7b4 <radio_disable>
   1244a:	bd38      	pop	{r3, r4, r5, pc}
		      (_radio.state != STATE_STOP) &&
   1244c:	2300      	movs	r3, #0
   1244e:	e7f5      	b.n	1243c <mayfly_radio_stop+0x30>
	if (radio_used || !radio_is_idle()) {
   12450:	f7fd f9de 	bl	f810 <radio_is_idle>
   12454:	2800      	cmp	r0, #0
   12456:	d0f3      	beq.n	12440 <mayfly_radio_stop+0x34>
   12458:	e7f7      	b.n	1244a <mayfly_radio_stop+0x3e>
   1245a:	bf00      	nop
   1245c:	20000ff4 	.word	0x20000ff4

00012460 <adv_scan_conn_configure>:
{
   12460:	b508      	push	{r3, lr}
	radio_reset();
   12462:	f7fd f901 	bl	f668 <radio_reset>
	radio_tx_power_set(0);
   12466:	2000      	movs	r0, #0
   12468:	f7fd f91a 	bl	f6a0 <radio_tx_power_set>
	radio_isr_set(isr);
   1246c:	4801      	ldr	r0, [pc, #4]	; (12474 <adv_scan_conn_configure+0x14>)
   1246e:	f7fd f8c3 	bl	f5f8 <radio_isr_set>
   12472:	bd08      	pop	{r3, pc}
   12474:	0000fda9 	.word	0x0000fda9

00012478 <adv_scan_configure>:
{
   12478:	b570      	push	{r4, r5, r6, lr}
   1247a:	b082      	sub	sp, #8
   1247c:	4604      	mov	r4, r0
   1247e:	460e      	mov	r6, r1
	u32_t aa = 0x8e89bed6;
   12480:	ad02      	add	r5, sp, #8
   12482:	4b0d      	ldr	r3, [pc, #52]	; (124b8 <adv_scan_configure+0x40>)
   12484:	f845 3d04 	str.w	r3, [r5, #-4]!
	adv_scan_conn_configure();
   12488:	f7ff ffea 	bl	12460 <adv_scan_conn_configure>
	radio_phy_set(phy, flags);
   1248c:	4631      	mov	r1, r6
   1248e:	4620      	mov	r0, r4
   12490:	f7fd f8f8 	bl	f684 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   12494:	4628      	mov	r0, r5
   12496:	f7fd f921 	bl	f6dc <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   1249a:	0062      	lsls	r2, r4, #1
   1249c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   124a0:	2125      	movs	r1, #37	; 0x25
   124a2:	2008      	movs	r0, #8
   124a4:	f7fd f932 	bl	f70c <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   124a8:	4904      	ldr	r1, [pc, #16]	; (124bc <adv_scan_configure+0x44>)
   124aa:	f240 605b 	movw	r0, #1627	; 0x65b
   124ae:	f7fd f9b9 	bl	f824 <radio_crc_configure>
}
   124b2:	b002      	add	sp, #8
   124b4:	bd70      	pop	{r4, r5, r6, pc}
   124b6:	bf00      	nop
   124b8:	8e89bed6 	.word	0x8e89bed6
   124bc:	00555555 	.word	0x00555555

000124c0 <connection_configure>:
{
   124c0:	b510      	push	{r4, lr}
   124c2:	4604      	mov	r4, r0
	adv_scan_conn_configure();
   124c4:	f7ff ffcc 	bl	12460 <adv_scan_conn_configure>
	radio_aa_set(conn->access_addr);
   124c8:	f104 0010 	add.w	r0, r4, #16
   124cc:	f7fd f906 	bl	f6dc <radio_aa_set>
			    (((u32_t)conn->crc_init[2] << 16) |
   124d0:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   124d2:	7d63      	ldrb	r3, [r4, #21]
   124d4:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   124d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   124da:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   124dc:	4319      	orrs	r1, r3
   124de:	f240 605b 	movw	r0, #1627	; 0x65b
   124e2:	f7fd f99f 	bl	f824 <radio_crc_configure>
   124e6:	bd10      	pop	{r4, pc}

000124e8 <rx_packet_set>:
{
   124e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   124ea:	4605      	mov	r5, r0
   124ec:	460f      	mov	r7, r1
	max_rx_octets = conn->max_rx_octets;
   124ee:	8e06      	ldrh	r6, [r0, #48]	; 0x30
	phy = conn->phy_rx;
   124f0:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
   124f4:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   124f8:	2100      	movs	r1, #0
   124fa:	4620      	mov	r0, r4
   124fc:	f7fd f8c2 	bl	f684 <radio_phy_set>
	if (conn->enc_rx) {
   12500:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12504:	f013 0f10 	tst.w	r3, #16
   12508:	d10a      	bne.n	12520 <rx_packet_set+0x38>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1250a:	0062      	lsls	r2, r4, #1
   1250c:	f042 0201 	orr.w	r2, r2, #1
   12510:	b2f1      	uxtb	r1, r6
   12512:	2008      	movs	r0, #8
   12514:	f7fd f8fa 	bl	f70c <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   12518:	4638      	mov	r0, r7
   1251a:	f7fd f927 	bl	f76c <radio_pkt_rx_set>
   1251e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   12520:	0062      	lsls	r2, r4, #1
   12522:	1d31      	adds	r1, r6, #4
   12524:	f042 0201 	orr.w	r2, r2, #1
   12528:	b2c9      	uxtb	r1, r1
   1252a:	2008      	movs	r0, #8
   1252c:	f7fd f8ee 	bl	f70c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   12530:	463a      	mov	r2, r7
   12532:	4621      	mov	r1, r4
   12534:	f105 00f9 	add.w	r0, r5, #249	; 0xf9
   12538:	f7fd fb14 	bl	fb64 <radio_ccm_rx_pkt_set>
   1253c:	f7fd f916 	bl	f76c <radio_pkt_rx_set>
   12540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012542 <packet_rx_callback>:
{
   12542:	b508      	push	{r3, lr}
	radio_event_callback();
   12544:	f006 ffec 	bl	19520 <radio_event_callback>
   12548:	bd08      	pop	{r3, pc}
	...

0001254c <pdu_node_tx_release>:
{
   1254c:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   1254e:	4a14      	ldr	r2, [pc, #80]	; (125a0 <pdu_node_tx_release+0x54>)
   12550:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
   12554:	3301      	adds	r3, #1
   12556:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
   12558:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   1255c:	4293      	cmp	r3, r2
   1255e:	d017      	beq.n	12590 <pdu_node_tx_release+0x44>
	LL_ASSERT(last != _radio.packet_release_first);
   12560:	4a0f      	ldr	r2, [pc, #60]	; (125a0 <pdu_node_tx_release+0x54>)
   12562:	f892 2173 	ldrb.w	r2, [r2, #371]	; 0x173
   12566:	4293      	cmp	r3, r2
   12568:	d014      	beq.n	12594 <pdu_node_tx_release+0x48>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   1256a:	4a0d      	ldr	r2, [pc, #52]	; (125a0 <pdu_node_tx_release+0x54>)
   1256c:	f8d2 416c 	ldr.w	r4, [r2, #364]	; 0x16c
   12570:	f892 5174 	ldrb.w	r5, [r2, #372]	; 0x174
   12574:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   12578:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   1257c:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
   12580:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   12584:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
   12586:	f882 3174 	strb.w	r3, [r2, #372]	; 0x174
	packet_rx_callback();
   1258a:	f7ff ffda 	bl	12542 <packet_rx_callback>
   1258e:	bd38      	pop	{r3, r4, r5, pc}
		last = 0;
   12590:	2300      	movs	r3, #0
   12592:	e7e5      	b.n	12560 <pdu_node_tx_release+0x14>
	LL_ASSERT(last != _radio.packet_release_first);
   12594:	4040      	eors	r0, r0
   12596:	f380 8811 	msr	BASEPRI, r0
   1259a:	f04f 0004 	mov.w	r0, #4
   1259e:	df02      	svc	2
   125a0:	20000ff4 	.word	0x20000ff4

000125a4 <packet_tx_enqueue>:
{
   125a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   125a6:	e016      	b.n	125d6 <packet_tx_enqueue+0x32>
			if (conn->pkt_tx_data == 0) {
   125a8:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   125ac:	2b00      	cmp	r3, #0
   125ae:	d040      	beq.n	12632 <packet_tx_enqueue+0x8e>
			if (conn->pkt_tx_last) {
   125b0:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
   125b4:	b103      	cbz	r3, 125b8 <packet_tx_enqueue+0x14>
				conn->pkt_tx_last->next = node_tx_new;
   125b6:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
   125b8:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
   125bc:	4a24      	ldr	r2, [pc, #144]	; (12650 <packet_tx_enqueue+0xac>)
   125be:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   125c2:	3301      	adds	r3, #1
   125c4:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
   125c6:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   125ca:	4293      	cmp	r3, r2
   125cc:	d03c      	beq.n	12648 <packet_tx_enqueue+0xa4>
		_radio.packet_tx_first = first;
   125ce:	4a20      	ldr	r2, [pc, #128]	; (12650 <packet_tx_enqueue+0xac>)
   125d0:	f882 3171 	strb.w	r3, [r2, #369]	; 0x171
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   125d4:	4638      	mov	r0, r7
   125d6:	1e47      	subs	r7, r0, #1
   125d8:	b2ff      	uxtb	r7, r7
   125da:	2800      	cmp	r0, #0
   125dc:	d036      	beq.n	1264c <packet_tx_enqueue+0xa8>
   125de:	4a1c      	ldr	r2, [pc, #112]	; (12650 <packet_tx_enqueue+0xac>)
   125e0:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   125e4:	b2db      	uxtb	r3, r3
   125e6:	f892 2172 	ldrb.w	r2, [r2, #370]	; 0x172
   125ea:	4293      	cmp	r3, r2
   125ec:	d02e      	beq.n	1264c <packet_tx_enqueue+0xa8>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   125ee:	4b18      	ldr	r3, [pc, #96]	; (12650 <packet_tx_enqueue+0xac>)
   125f0:	f8d3 6168 	ldr.w	r6, [r3, #360]	; 0x168
   125f4:	f893 4171 	ldrb.w	r4, [r3, #369]	; 0x171
   125f8:	b2e4      	uxtb	r4, r4
   125fa:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
		node_tx_new = pdu_data_q_tx->node_tx;
   125fe:	6855      	ldr	r5, [r2, #4]
		node_tx_new->next = NULL;
   12600:	2200      	movs	r2, #0
   12602:	602a      	str	r2, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12604:	f836 2034 	ldrh.w	r2, [r6, r4, lsl #3]
   12608:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1260c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12610:	f7fc fef8 	bl	f404 <mem_get>
		if (conn->handle == pdu_data_q_tx->handle) {
   12614:	8c02      	ldrh	r2, [r0, #32]
   12616:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
   1261a:	429a      	cmp	r2, r3
   1261c:	d0c4      	beq.n	125a8 <packet_tx_enqueue+0x4>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   1261e:	792b      	ldrb	r3, [r5, #4]
   12620:	f36f 0301 	bfc	r3, #0, #2
   12624:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   12626:	4629      	mov	r1, r5
   12628:	f836 0034 	ldrh.w	r0, [r6, r4, lsl #3]
   1262c:	f7ff ff8e 	bl	1254c <pdu_node_tx_release>
   12630:	e7c4      	b.n	125bc <packet_tx_enqueue+0x18>
				conn->pkt_tx_data = node_tx_new;
   12632:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
   12636:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   1263a:	2b00      	cmp	r3, #0
   1263c:	d1b8      	bne.n	125b0 <packet_tx_enqueue+0xc>
					conn->pkt_tx_head = node_tx_new;
   1263e:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
   12642:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
   12646:	e7b3      	b.n	125b0 <packet_tx_enqueue+0xc>
			first = 0;
   12648:	2300      	movs	r3, #0
   1264a:	e7c0      	b.n	125ce <packet_tx_enqueue+0x2a>
   1264c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1264e:	bf00      	nop
   12650:	20000ff4 	.word	0x20000ff4

00012654 <connection_release>:
{
   12654:	b510      	push	{r4, lr}
   12656:	b082      	sub	sp, #8
   12658:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   1265a:	2201      	movs	r2, #1
   1265c:	4611      	mov	r1, r2
   1265e:	2000      	movs	r0, #0
   12660:	f7fc fd14 	bl	f08c <mayfly_enable>
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   12664:	8c22      	ldrh	r2, [r4, #32]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12666:	3207      	adds	r2, #7
	ticker_status =
   12668:	f242 2345 	movw	r3, #8773	; 0x2245
   1266c:	9300      	str	r3, [sp, #0]
   1266e:	4b46      	ldr	r3, [pc, #280]	; (12788 <connection_release+0x134>)
   12670:	b2d2      	uxtb	r2, r2
   12672:	2100      	movs	r1, #0
   12674:	4608      	mov	r0, r1
   12676:	f7fe fbf3 	bl	10e60 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1267a:	b108      	cbz	r0, 12680 <connection_release+0x2c>
   1267c:	2802      	cmp	r0, #2
   1267e:	d12a      	bne.n	126d6 <connection_release+0x82>
	if ((_radio.state == STATE_ABORT) &&
   12680:	4b42      	ldr	r3, [pc, #264]	; (1278c <connection_release+0x138>)
   12682:	7c1b      	ldrb	r3, [r3, #16]
   12684:	2b05      	cmp	r3, #5
   12686:	d13e      	bne.n	12706 <connection_release+0xb2>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   12688:	4b40      	ldr	r3, [pc, #256]	; (1278c <connection_release+0x138>)
   1268a:	7b1a      	ldrb	r2, [r3, #12]
   1268c:	b2d2      	uxtb	r2, r2
					  conn->handle))) {
   1268e:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   12690:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
   12692:	429a      	cmp	r2, r3
   12694:	d137      	bne.n	12706 <connection_release+0xb2>
		_radio.ticker_id_prepare = 0;
   12696:	2000      	movs	r0, #0
   12698:	4b3c      	ldr	r3, [pc, #240]	; (1278c <connection_release+0x138>)
   1269a:	7318      	strb	r0, [r3, #12]
		ticker_status =
   1269c:	f242 2356 	movw	r3, #8790	; 0x2256
   126a0:	9300      	str	r3, [sp, #0]
   126a2:	4b39      	ldr	r3, [pc, #228]	; (12788 <connection_release+0x134>)
   126a4:	2201      	movs	r2, #1
   126a6:	4601      	mov	r1, r0
   126a8:	f7fe fbda 	bl	10e60 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   126ac:	b108      	cbz	r0, 126b2 <connection_release+0x5e>
   126ae:	2802      	cmp	r0, #2
   126b0:	d117      	bne.n	126e2 <connection_release+0x8e>
		ticker_status =
   126b2:	f242 235d 	movw	r3, #8797	; 0x225d
   126b6:	9300      	str	r3, [sp, #0]
   126b8:	4b33      	ldr	r3, [pc, #204]	; (12788 <connection_release+0x134>)
   126ba:	2200      	movs	r2, #0
   126bc:	4611      	mov	r1, r2
   126be:	4610      	mov	r0, r2
   126c0:	f7fe fbce 	bl	10e60 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   126c4:	b1f8      	cbz	r0, 12706 <connection_release+0xb2>
   126c6:	2802      	cmp	r0, #2
   126c8:	d01d      	beq.n	12706 <connection_release+0xb2>
   126ca:	4040      	eors	r0, r0
   126cc:	f380 8811 	msr	BASEPRI, r0
   126d0:	f04f 0004 	mov.w	r0, #4
   126d4:	df02      	svc	2
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   126d6:	4040      	eors	r0, r0
   126d8:	f380 8811 	msr	BASEPRI, r0
   126dc:	f04f 0004 	mov.w	r0, #4
   126e0:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   126e2:	4040      	eors	r0, r0
   126e4:	f380 8811 	msr	BASEPRI, r0
   126e8:	f04f 0004 	mov.w	r0, #4
   126ec:	df02      	svc	2
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   126ee:	790b      	ldrb	r3, [r1, #4]
   126f0:	f36f 0301 	bfc	r3, #0, #2
   126f4:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   126f6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   126fa:	681b      	ldr	r3, [r3, #0]
   126fc:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
   12700:	8c20      	ldrh	r0, [r4, #32]
   12702:	f7ff ff23 	bl	1254c <pdu_node_tx_release>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   12706:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   1270a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1270e:	4299      	cmp	r1, r3
   12710:	d00c      	beq.n	1272c <connection_release+0xd8>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   12712:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   12716:	4299      	cmp	r1, r3
   12718:	d1e9      	bne.n	126ee <connection_release+0x9a>
   1271a:	e007      	b.n	1272c <connection_release+0xd8>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1271c:	6803      	ldr	r3, [r0, #0]
   1271e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   12722:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   12726:	491a      	ldr	r1, [pc, #104]	; (12790 <connection_release+0x13c>)
   12728:	f7fc fe4b 	bl	f3c2 <mem_release>
	while ((conn->pkt_tx_head) &&
   1272c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   12730:	b118      	cbz	r0, 1273a <connection_release+0xe6>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   12732:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head) &&
   12736:	4298      	cmp	r0, r3
   12738:	d1f0      	bne.n	1271c <connection_release+0xc8>
	conn->pkt_tx_ctrl = NULL;
   1273a:	2300      	movs	r3, #0
   1273c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   12740:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
   12744:	e00d      	b.n	12762 <connection_release+0x10e>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   12746:	790b      	ldrb	r3, [r1, #4]
   12748:	f36f 0301 	bfc	r3, #0, #2
   1274c:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1274e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   12752:	681b      	ldr	r3, [r3, #0]
   12754:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
   12758:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
   1275c:	8c20      	ldrh	r0, [r4, #32]
   1275e:	f7ff fef5 	bl	1254c <pdu_node_tx_release>
	while (conn->pkt_tx_head) {
   12762:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   12766:	2900      	cmp	r1, #0
   12768:	d1ed      	bne.n	12746 <connection_release+0xf2>
	conn->handle = 0xffff;
   1276a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1276e:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   12770:	4b06      	ldr	r3, [pc, #24]	; (1278c <connection_release+0x138>)
   12772:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   12776:	429c      	cmp	r4, r3
   12778:	d001      	beq.n	1277e <connection_release+0x12a>
}
   1277a:	b002      	add	sp, #8
   1277c:	bd10      	pop	{r4, pc}
		_radio.conn_upd = NULL;
   1277e:	2200      	movs	r2, #0
   12780:	4b02      	ldr	r3, [pc, #8]	; (1278c <connection_release+0x138>)
   12782:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
}
   12786:	e7f8      	b.n	1277a <connection_release+0x126>
   12788:	00011a7d 	.word	0x00011a7d
   1278c:	20000ff4 	.word	0x20000ff4
   12790:	2000114c 	.word	0x2000114c

00012794 <chan_map_update>:
{
   12794:	b538      	push	{r3, r4, r5, lr}
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   12796:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   1279a:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   1279c:	1a9b      	subs	r3, r3, r2
   1279e:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   127a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   127a4:	da22      	bge.n	127ec <chan_map_update+0x58>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   127a6:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   127aa:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   127ae:	429a      	cmp	r2, r3
   127b0:	d116      	bne.n	127e0 <chan_map_update+0x4c>
   127b2:	460d      	mov	r5, r1
   127b4:	4604      	mov	r4, r0
	memcpy(&conn->llcp.chan_map.chm[0],
   127b6:	2205      	movs	r2, #5
   127b8:	3104      	adds	r1, #4
   127ba:	3079      	adds	r0, #121	; 0x79
   127bc:	f7ed fd80 	bl	2c0 <memcpy>
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
   127c0:	f8b5 3009 	ldrh.w	r3, [r5, #9]
	conn->llcp.chan_map.instant =
   127c4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
	conn->llcp.chan_map.initiate = 0;
   127c8:	2000      	movs	r0, #0
   127ca:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	conn->llcp_type = LLCP_CHAN_MAP;
   127ce:	2302      	movs	r3, #2
   127d0:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	conn->llcp_ack--;
   127d4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   127d8:	3b01      	subs	r3, #1
   127da:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	return 0;
   127de:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   127e0:	4040      	eors	r0, r0
   127e2:	f380 8811 	msr	BASEPRI, r0
   127e6:	f04f 0004 	mov.w	r0, #4
   127ea:	df02      	svc	2
		return 1;
   127ec:	2001      	movs	r0, #1
}
   127ee:	bd38      	pop	{r3, r4, r5, pc}

000127f0 <feature_rsp_send>:
{
   127f0:	b538      	push	{r3, r4, r5, lr}
   127f2:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   127f4:	4812      	ldr	r0, [pc, #72]	; (12840 <feature_rsp_send+0x50>)
   127f6:	f7fc fdc8 	bl	f38a <mem_acquire>
	LL_ASSERT(node_tx);
   127fa:	b1d8      	cbz	r0, 12834 <feature_rsp_send+0x44>
   127fc:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   127fe:	7903      	ldrb	r3, [r0, #4]
   12800:	f043 0303 	orr.w	r3, r3, #3
   12804:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   12806:	2309      	movs	r3, #9
   12808:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1280a:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   1280c:	2208      	movs	r2, #8
   1280e:	2100      	movs	r1, #0
   12810:	4410      	add	r0, r2
   12812:	f018 f881 	bl	2a918 <memset>
		conn->llcp_features & 0xFF;
   12816:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   1281a:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   1281c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   12820:	0a1b      	lsrs	r3, r3, #8
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   12822:	7263      	strb	r3, [r4, #9]
		(conn->llcp_features >> 16) & 0xFF;
   12824:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   12828:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   1282a:	4621      	mov	r1, r4
   1282c:	4628      	mov	r0, r5
   1282e:	f7ff f87c 	bl	1192a <ctrl_tx_sec_enqueue>
   12832:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   12834:	4040      	eors	r0, r0
   12836:	f380 8811 	msr	BASEPRI, r0
   1283a:	f04f 0004 	mov.w	r0, #4
   1283e:	df02      	svc	2
   12840:	2000114c 	.word	0x2000114c

00012844 <empty_tx_enqueue>:
{
   12844:	b510      	push	{r4, lr}
   12846:	4604      	mov	r4, r0
	conn->empty = 1;
   12848:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   1284c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12850:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
   12854:	f7fc fffc 	bl	f850 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12858:	7803      	ldrb	r3, [r0, #0]
   1285a:	2201      	movs	r2, #1
   1285c:	f362 0301 	bfi	r3, r2, #0, #2
   12860:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   12862:	2300      	movs	r3, #0
   12864:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
   12866:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1286a:	b123      	cbz	r3, 12876 <empty_tx_enqueue+0x32>
		pdu_data_tx->md = 1;
   1286c:	7803      	ldrb	r3, [r0, #0]
   1286e:	f043 0310 	orr.w	r3, r3, #16
   12872:	7003      	strb	r3, [r0, #0]
   12874:	bd10      	pop	{r4, pc}
		pdu_data_tx->md = 0;
   12876:	7803      	ldrb	r3, [r0, #0]
   12878:	f36f 1304 	bfc	r3, #4, #1
   1287c:	7003      	strb	r3, [r0, #0]
}
   1287e:	bd10      	pop	{r4, pc}

00012880 <prepare_pdu_data_tx>:
{
   12880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12882:	460c      	mov	r4, r1
	    conn->empty ||
   12884:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
	if (/* empty packet */
   12888:	f012 0f80 	tst.w	r2, #128	; 0x80
   1288c:	d109      	bne.n	128a2 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   1288e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    conn->empty ||
   12892:	b133      	cbz	r3, 128a2 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   12894:	f012 0f08 	tst.w	r2, #8
   12898:	d00e      	beq.n	128b8 <prepare_pdu_data_tx+0x38>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   1289a:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
   1289e:	4293      	cmp	r3, r2
   128a0:	d00a      	beq.n	128b8 <prepare_pdu_data_tx+0x38>
			_pdu_data_tx = empty_tx_enqueue(conn);
   128a2:	f7ff ffcf 	bl	12844 <empty_tx_enqueue>
   128a6:	4602      	mov	r2, r0
	_pdu_data_tx->rfu = 0;
   128a8:	7813      	ldrb	r3, [r2, #0]
   128aa:	f36f 1347 	bfc	r3, #5, #3
   128ae:	7013      	strb	r3, [r2, #0]
	_pdu_data_tx->resv = 0;
   128b0:	2300      	movs	r3, #0
   128b2:	7093      	strb	r3, [r2, #2]
	*pdu_data_tx = _pdu_data_tx;
   128b4:	6022      	str	r2, [r4, #0]
   128b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   128b8:	3304      	adds	r3, #4
					conn->packet_tx_head_offset);
   128ba:	f890 6151 	ldrb.w	r6, [r0, #337]	; 0x151
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   128be:	199a      	adds	r2, r3, r6
		if (!conn->packet_tx_head_len) {
   128c0:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
   128c4:	b911      	cbnz	r1, 128cc <prepare_pdu_data_tx+0x4c>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   128c6:	7851      	ldrb	r1, [r2, #1]
   128c8:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   128cc:	b126      	cbz	r6, 128d8 <prepare_pdu_data_tx+0x58>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   128ce:	5d99      	ldrb	r1, [r3, r6]
   128d0:	2501      	movs	r5, #1
   128d2:	f365 0101 	bfi	r1, r5, #0, #2
   128d6:	5599      	strb	r1, [r3, r6]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   128d8:	f890 5150 	ldrb.w	r5, [r0, #336]	; 0x150
				    conn->packet_tx_head_offset;
   128dc:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
		_pdu_data_tx->len = conn->packet_tx_head_len -
   128e0:	1a6d      	subs	r5, r5, r1
   128e2:	b2ed      	uxtb	r5, r5
   128e4:	7055      	strb	r5, [r2, #1]
		_pdu_data_tx->md = 0;
   128e6:	5d99      	ldrb	r1, [r3, r6]
   128e8:	f36f 1104 	bfc	r1, #4, #1
   128ec:	5599      	strb	r1, [r3, r6]
		switch (conn->phy_tx_time) {
   128ee:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   128f2:	f001 0107 	and.w	r1, r1, #7
   128f6:	2902      	cmp	r1, #2
   128f8:	d02d      	beq.n	12956 <prepare_pdu_data_tx+0xd6>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   128fa:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   128fc:	08c9      	lsrs	r1, r1, #3
   128fe:	390a      	subs	r1, #10
   12900:	b289      	uxth	r1, r1
		if (conn->enc_tx) {
   12902:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
   12906:	f017 0f20 	tst.w	r7, #32
   1290a:	d001      	beq.n	12910 <prepare_pdu_data_tx+0x90>
			max_tx_octets -= 4;
   1290c:	3904      	subs	r1, #4
   1290e:	b289      	uxth	r1, r1
		if (max_tx_octets > conn->max_tx_octets) {
   12910:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
   12912:	42b9      	cmp	r1, r7
   12914:	d800      	bhi.n	12918 <prepare_pdu_data_tx+0x98>
   12916:	460f      	mov	r7, r1
		if (_pdu_data_tx->len > max_tx_octets) {
   12918:	b2ad      	uxth	r5, r5
   1291a:	42af      	cmp	r7, r5
   1291c:	d204      	bcs.n	12928 <prepare_pdu_data_tx+0xa8>
			_pdu_data_tx->len = max_tx_octets;
   1291e:	7057      	strb	r7, [r2, #1]
			_pdu_data_tx->md = 1;
   12920:	5d99      	ldrb	r1, [r3, r6]
   12922:	f041 0110 	orr.w	r1, r1, #16
   12926:	5599      	strb	r1, [r3, r6]
		if (conn->pkt_tx_head->next) {
   12928:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   1292c:	6809      	ldr	r1, [r1, #0]
   1292e:	b119      	cbz	r1, 12938 <prepare_pdu_data_tx+0xb8>
			_pdu_data_tx->md = 1;
   12930:	5d99      	ldrb	r1, [r3, r6]
   12932:	f041 0110 	orr.w	r1, r1, #16
   12936:	5599      	strb	r1, [r3, r6]
		if (!conn->pkt_tx_ctrl &&
   12938:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   1293c:	2b00      	cmp	r3, #0
   1293e:	d1b3      	bne.n	128a8 <prepare_pdu_data_tx+0x28>
		    (conn->pkt_tx_head != conn->pkt_tx_data)) {
   12940:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   12944:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl &&
   12948:	428b      	cmp	r3, r1
   1294a:	d0ad      	beq.n	128a8 <prepare_pdu_data_tx+0x28>
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   1294c:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   12950:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
   12954:	e7a8      	b.n	128a8 <prepare_pdu_data_tx+0x28>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   12956:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   12958:	0889      	lsrs	r1, r1, #2
   1295a:	390b      	subs	r1, #11
   1295c:	b289      	uxth	r1, r1
			break;
   1295e:	e7d0      	b.n	12902 <prepare_pdu_data_tx+0x82>

00012960 <version_ind_send>:
{
   12960:	b510      	push	{r4, lr}
   12962:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12964:	4810      	ldr	r0, [pc, #64]	; (129a8 <version_ind_send+0x48>)
   12966:	f7fc fd10 	bl	f38a <mem_acquire>
	LL_ASSERT(node_tx);
   1296a:	b1b8      	cbz	r0, 1299c <version_ind_send+0x3c>
   1296c:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1296e:	7903      	ldrb	r3, [r0, #4]
   12970:	f043 0303 	orr.w	r3, r3, #3
   12974:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   12976:	2306      	movs	r3, #6
   12978:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1297a:	230c      	movs	r3, #12
   1297c:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   1297e:	2309      	movs	r3, #9
   12980:	7203      	strb	r3, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   12982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12986:	7243      	strb	r3, [r0, #9]
   12988:	7283      	strb	r3, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   1298a:	72c3      	strb	r3, [r0, #11]
   1298c:	7303      	strb	r3, [r0, #12]
	ctrl_tx_sec_enqueue(conn, node_tx);
   1298e:	4620      	mov	r0, r4
   12990:	f7fe ffcb 	bl	1192a <ctrl_tx_sec_enqueue>
	empty_tx_enqueue(conn);
   12994:	4620      	mov	r0, r4
   12996:	f7ff ff55 	bl	12844 <empty_tx_enqueue>
   1299a:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   1299c:	4040      	eors	r0, r0
   1299e:	f380 8811 	msr	BASEPRI, r0
   129a2:	f04f 0004 	mov.w	r0, #4
   129a6:	df02      	svc	2
   129a8:	2000114c 	.word	0x2000114c

000129ac <tx_packet_set>:
{
   129ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129ae:	4605      	mov	r5, r0
   129b0:	460f      	mov	r7, r1
	max_tx_octets = conn->max_tx_octets;
   129b2:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
   129b4:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   129b8:	f3c1 04c2 	ubfx	r4, r1, #3, #3
	radio_phy_set(phy, flags);
   129bc:	09c9      	lsrs	r1, r1, #7
   129be:	4620      	mov	r0, r4
   129c0:	f7fc fe60 	bl	f684 <radio_phy_set>
	if (conn->enc_tx) {
   129c4:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   129c8:	f013 0f20 	tst.w	r3, #32
   129cc:	d10a      	bne.n	129e4 <tx_packet_set+0x38>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   129ce:	0062      	lsls	r2, r4, #1
   129d0:	f042 0201 	orr.w	r2, r2, #1
   129d4:	b2f1      	uxtb	r1, r6
   129d6:	2008      	movs	r0, #8
   129d8:	f7fc fe98 	bl	f70c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   129dc:	4638      	mov	r0, r7
   129de:	f7fc fecb 	bl	f778 <radio_pkt_tx_set>
   129e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
   129e4:	0062      	lsls	r2, r4, #1
   129e6:	1d31      	adds	r1, r6, #4
   129e8:	f042 0201 	orr.w	r2, r2, #1
   129ec:	b2c9      	uxtb	r1, r1
   129ee:	2008      	movs	r0, #8
   129f0:	f7fc fe8c 	bl	f70c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
   129f4:	4639      	mov	r1, r7
   129f6:	f505 708d 	add.w	r0, r5, #282	; 0x11a
   129fa:	f7fd f8f3 	bl	fbe4 <radio_ccm_tx_pkt_set>
   129fe:	f7fc febb 	bl	f778 <radio_pkt_tx_set>
   12a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012a04 <chan_set>:
{
   12a04:	b510      	push	{r4, lr}
   12a06:	4604      	mov	r4, r0
	switch (chan) {
   12a08:	2826      	cmp	r0, #38	; 0x26
   12a0a:	d013      	beq.n	12a34 <chan_set+0x30>
   12a0c:	2827      	cmp	r0, #39	; 0x27
   12a0e:	d015      	beq.n	12a3c <chan_set+0x38>
   12a10:	2825      	cmp	r0, #37	; 0x25
   12a12:	d008      	beq.n	12a26 <chan_set+0x22>
		if (chan < 11) {
   12a14:	280a      	cmp	r0, #10
   12a16:	d915      	bls.n	12a44 <chan_set+0x40>
		} else if (chan < 40) {
   12a18:	2827      	cmp	r0, #39	; 0x27
   12a1a:	d818      	bhi.n	12a4e <chan_set+0x4a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   12a1c:	3003      	adds	r0, #3
   12a1e:	0040      	lsls	r0, r0, #1
   12a20:	f7fc fe44 	bl	f6ac <radio_freq_chan_set>
   12a24:	e002      	b.n	12a2c <chan_set+0x28>
		radio_freq_chan_set(2);
   12a26:	2002      	movs	r0, #2
   12a28:	f7fc fe40 	bl	f6ac <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   12a2c:	4620      	mov	r0, r4
   12a2e:	f7fc fe43 	bl	f6b8 <radio_whiten_iv_set>
   12a32:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(26);
   12a34:	201a      	movs	r0, #26
   12a36:	f7fc fe39 	bl	f6ac <radio_freq_chan_set>
		break;
   12a3a:	e7f7      	b.n	12a2c <chan_set+0x28>
		radio_freq_chan_set(80);
   12a3c:	2050      	movs	r0, #80	; 0x50
   12a3e:	f7fc fe35 	bl	f6ac <radio_freq_chan_set>
		break;
   12a42:	e7f3      	b.n	12a2c <chan_set+0x28>
			radio_freq_chan_set(4 + (2 * chan));
   12a44:	3002      	adds	r0, #2
   12a46:	0040      	lsls	r0, r0, #1
   12a48:	f7fc fe30 	bl	f6ac <radio_freq_chan_set>
   12a4c:	e7ee      	b.n	12a2c <chan_set+0x28>
			LL_ASSERT(0);
   12a4e:	4040      	eors	r0, r0
   12a50:	f380 8811 	msr	BASEPRI, r0
   12a54:	f04f 0004 	mov.w	r0, #4
   12a58:	df02      	svc	2
	...

00012a5c <adv_setup>:
{
   12a5c:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
   12a5e:	4a39      	ldr	r2, [pc, #228]	; (12b44 <adv_setup+0xe8>)
   12a60:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
	    _radio.advertiser.adv_data.last) {
   12a64:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
	if (_radio.advertiser.adv_data.first !=
   12a68:	4293      	cmp	r3, r2
   12a6a:	d037      	beq.n	12adc <adv_setup+0x80>
		first = _radio.advertiser.adv_data.first + 1;
   12a6c:	3301      	adds	r3, #1
   12a6e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   12a70:	2b02      	cmp	r3, #2
   12a72:	d031      	beq.n	12ad8 <adv_setup+0x7c>
		_radio.advertiser.adv_data.first = first;
   12a74:	4a33      	ldr	r2, [pc, #204]	; (12b44 <adv_setup+0xe8>)
   12a76:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
		upd = 1;
   12a7a:	2101      	movs	r1, #1
	if (_radio.advertiser.scan_data.first != _radio.
   12a7c:	4a31      	ldr	r2, [pc, #196]	; (12b44 <adv_setup+0xe8>)
   12a7e:	f892 30c5 	ldrb.w	r3, [r2, #197]	; 0xc5
	    advertiser.scan_data.last) {
   12a82:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
	if (_radio.advertiser.scan_data.first != _radio.
   12a86:	4293      	cmp	r3, r2
   12a88:	d007      	beq.n	12a9a <adv_setup+0x3e>
		first = _radio.advertiser.scan_data.first + 1;
   12a8a:	3301      	adds	r3, #1
   12a8c:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   12a8e:	2b02      	cmp	r3, #2
   12a90:	d026      	beq.n	12ae0 <adv_setup+0x84>
		_radio.advertiser.scan_data.first = first;
   12a92:	4a2c      	ldr	r2, [pc, #176]	; (12b44 <adv_setup+0xe8>)
   12a94:	f882 30c5 	strb.w	r3, [r2, #197]	; 0xc5
		upd = 1;
   12a98:	2101      	movs	r1, #1
			_radio.advertiser.adv_data.first];
   12a9a:	4c2a      	ldr	r4, [pc, #168]	; (12b44 <adv_setup+0xe8>)
   12a9c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
	pdu = (struct pdu_adv *)
   12aa0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   12aa4:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   12aa8:	3320      	adds	r3, #32
   12aaa:	441c      	add	r4, r3
   12aac:	1de5      	adds	r5, r4, #7
	if (upd) {
   12aae:	b9c9      	cbnz	r1, 12ae4 <adv_setup+0x88>
	radio_pkt_tx_set(pdu);
   12ab0:	4628      	mov	r0, r5
   12ab2:	f7fc fe61 	bl	f778 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   12ab6:	79e3      	ldrb	r3, [r4, #7]
   12ab8:	f003 030f 	and.w	r3, r3, #15
   12abc:	2b02      	cmp	r3, #2
   12abe:	d020      	beq.n	12b02 <adv_setup+0xa6>
   12ac0:	2b07      	cmp	r3, #7
   12ac2:	d01e      	beq.n	12b02 <adv_setup+0xa6>
		_radio.state = STATE_TX;
   12ac4:	2202      	movs	r2, #2
   12ac6:	4b1f      	ldr	r3, [pc, #124]	; (12b44 <adv_setup+0xe8>)
   12ac8:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   12aca:	2096      	movs	r0, #150	; 0x96
   12acc:	f7fc ff7a 	bl	f9c4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   12ad0:	2000      	movs	r0, #0
   12ad2:	f7fc fec5 	bl	f860 <radio_switch_complete_and_rx>
   12ad6:	e019      	b.n	12b0c <adv_setup+0xb0>
			first = 0;
   12ad8:	2300      	movs	r3, #0
   12ada:	e7cb      	b.n	12a74 <adv_setup+0x18>
	u8_t upd = 0;
   12adc:	2100      	movs	r1, #0
   12ade:	e7cd      	b.n	12a7c <adv_setup+0x20>
			first = 0;
   12ae0:	2300      	movs	r3, #0
   12ae2:	e7d6      	b.n	12a92 <adv_setup+0x36>
			_radio.advertiser.scan_data.first];
   12ae4:	4817      	ldr	r0, [pc, #92]	; (12b44 <adv_setup+0xe8>)
   12ae6:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
   12aea:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   12aee:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   12af2:	3370      	adds	r3, #112	; 0x70
   12af4:	4418      	add	r0, r3
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
   12af6:	2206      	movs	r2, #6
   12af8:	1ca9      	adds	r1, r5, #2
   12afa:	3009      	adds	r0, #9
   12afc:	f7ed fbe0 	bl	2c0 <memcpy>
   12b00:	e7d6      	b.n	12ab0 <adv_setup+0x54>
		_radio.state = STATE_CLOSE;
   12b02:	2203      	movs	r2, #3
   12b04:	4b0f      	ldr	r3, [pc, #60]	; (12b44 <adv_setup+0xe8>)
   12b06:	741a      	strb	r2, [r3, #16]
		radio_switch_complete_and_disable();
   12b08:	f7fc feba 	bl	f880 <radio_switch_complete_and_disable>
	bitmap = _radio.advertiser.chan_map_current;
   12b0c:	4b0d      	ldr	r3, [pc, #52]	; (12b44 <adv_setup+0xe8>)
   12b0e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   12b12:	f3c2 0142 	ubfx	r1, r2, #1, #3
   12b16:	b2ca      	uxtb	r2, r1
   12b18:	4613      	mov	r3, r2
	chan = 0;
   12b1a:	2000      	movs	r0, #0
	while ((bitmap & 0x01) == 0) {
   12b1c:	e002      	b.n	12b24 <adv_setup+0xc8>
		chan++;
   12b1e:	3001      	adds	r0, #1
   12b20:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
   12b22:	085b      	lsrs	r3, r3, #1
	while ((bitmap & 0x01) == 0) {
   12b24:	f013 0f01 	tst.w	r3, #1
   12b28:	d0f9      	beq.n	12b1e <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
   12b2a:	3a01      	subs	r2, #1
	_radio.advertiser.chan_map_current &=
   12b2c:	4b05      	ldr	r3, [pc, #20]	; (12b44 <adv_setup+0xe8>)
   12b2e:	400a      	ands	r2, r1
   12b30:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   12b34:	f362 0143 	bfi	r1, r2, #1, #3
   12b38:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	chan_set(37 + chan);
   12b3c:	3025      	adds	r0, #37	; 0x25
   12b3e:	f7ff ff61 	bl	12a04 <chan_set>
   12b42:	bd38      	pop	{r3, r4, r5, pc}
   12b44:	20000ff4 	.word	0x20000ff4

00012b48 <ticker_stop_adv_stop>:
	if (status != TICKER_STATUS_SUCCESS) {
   12b48:	b158      	cbz	r0, 12b62 <ticker_stop_adv_stop+0x1a>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   12b4a:	4b6c      	ldr	r3, [pc, #432]	; (12cfc <ticker_stop_adv_stop+0x1b4>)
   12b4c:	7b9b      	ldrb	r3, [r3, #14]
   12b4e:	b2db      	uxtb	r3, r3
   12b50:	2b05      	cmp	r3, #5
   12b52:	d100      	bne.n	12b56 <ticker_stop_adv_stop+0xe>
   12b54:	4770      	bx	lr
   12b56:	4040      	eors	r0, r0
   12b58:	f380 8811 	msr	BASEPRI, r0
   12b5c:	f04f 0004 	mov.w	r0, #4
   12b60:	df02      	svc	2
{
   12b62:	b500      	push	{lr}
   12b64:	b085      	sub	sp, #20
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   12b66:	4b65      	ldr	r3, [pc, #404]	; (12cfc <ticker_stop_adv_stop+0x1b4>)
   12b68:	7b1b      	ldrb	r3, [r3, #12]
   12b6a:	b2db      	uxtb	r3, r3
   12b6c:	2b05      	cmp	r3, #5
   12b6e:	d010      	beq.n	12b92 <ticker_stop_adv_stop+0x4a>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   12b70:	4b62      	ldr	r3, [pc, #392]	; (12cfc <ticker_stop_adv_stop+0x1b4>)
   12b72:	7b5b      	ldrb	r3, [r3, #13]
   12b74:	b2db      	uxtb	r3, r3
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   12b76:	2b05      	cmp	r3, #5
   12b78:	d00b      	beq.n	12b92 <ticker_stop_adv_stop+0x4a>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12b7a:	4b61      	ldr	r3, [pc, #388]	; (12d00 <ticker_stop_adv_stop+0x1b8>)
   12b7c:	2200      	movs	r2, #0
   12b7e:	4611      	mov	r1, r2
   12b80:	2001      	movs	r0, #1
   12b82:	f7fc fac1 	bl	f108 <mayfly_enqueue>
	LL_ASSERT(!retval);
   12b86:	2800      	cmp	r0, #0
   12b88:	f040 80b1 	bne.w	12cee <ticker_stop_adv_stop+0x1a6>
}
   12b8c:	b005      	add	sp, #20
   12b8e:	f85d fb04 	ldr.w	pc, [sp], #4
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12b92:	ab04      	add	r3, sp, #16
   12b94:	2202      	movs	r2, #2
   12b96:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12b9a:	9300      	str	r3, [sp, #0]
   12b9c:	4b59      	ldr	r3, [pc, #356]	; (12d04 <ticker_stop_adv_stop+0x1bc>)
   12b9e:	2200      	movs	r2, #0
   12ba0:	2101      	movs	r1, #1
   12ba2:	4610      	mov	r0, r2
   12ba4:	f7fe f95c 	bl	10e60 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   12ba8:	2802      	cmp	r0, #2
   12baa:	d02c      	beq.n	12c06 <ticker_stop_adv_stop+0xbe>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   12bac:	9b02      	ldr	r3, [sp, #8]
   12bae:	2b00      	cmp	r3, #0
   12bb0:	d17e      	bne.n	12cb0 <ticker_stop_adv_stop+0x168>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12bb2:	2302      	movs	r3, #2
   12bb4:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   12bb6:	4b51      	ldr	r3, [pc, #324]	; (12cfc <ticker_stop_adv_stop+0x1b4>)
   12bb8:	7b1b      	ldrb	r3, [r3, #12]
   12bba:	2b00      	cmp	r3, #0
   12bbc:	d031      	beq.n	12c22 <ticker_stop_adv_stop+0xda>
		_radio.ticker_id_prepare = 0;
   12bbe:	2000      	movs	r0, #0
   12bc0:	4b4e      	ldr	r3, [pc, #312]	; (12cfc <ticker_stop_adv_stop+0x1b4>)
   12bc2:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12bc4:	ab03      	add	r3, sp, #12
   12bc6:	9300      	str	r3, [sp, #0]
   12bc8:	4b4e      	ldr	r3, [pc, #312]	; (12d04 <ticker_stop_adv_stop+0x1bc>)
   12bca:	2201      	movs	r2, #1
   12bcc:	4611      	mov	r1, r2
   12bce:	f7fe f947 	bl	10e60 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   12bd2:	2802      	cmp	r0, #2
   12bd4:	d02b      	beq.n	12c2e <ticker_stop_adv_stop+0xe6>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   12bd6:	9b03      	ldr	r3, [sp, #12]
   12bd8:	2b00      	cmp	r3, #0
   12bda:	d144      	bne.n	12c66 <ticker_stop_adv_stop+0x11e>
			if (_radio.advertiser.hdr.ticks_active_to_start >
   12bdc:	4b47      	ldr	r3, [pc, #284]	; (12cfc <ticker_stop_adv_stop+0x1b4>)
   12bde:	699a      	ldr	r2, [r3, #24]
			    (_radio.advertiser.hdr.ticks_xtal_to_start &
   12be0:	695b      	ldr	r3, [r3, #20]
   12be2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   12be6:	429a      	cmp	r2, r3
   12be8:	d92f      	bls.n	12c4a <ticker_stop_adv_stop+0x102>
				retval = mayfly_enqueue(
   12bea:	4b47      	ldr	r3, [pc, #284]	; (12d08 <ticker_stop_adv_stop+0x1c0>)
   12bec:	2200      	movs	r2, #0
   12bee:	4611      	mov	r1, r2
   12bf0:	2001      	movs	r0, #1
   12bf2:	f7fc fa89 	bl	f108 <mayfly_enqueue>
				LL_ASSERT(!retval);
   12bf6:	2800      	cmp	r0, #0
   12bf8:	d0bf      	beq.n	12b7a <ticker_stop_adv_stop+0x32>
   12bfa:	4040      	eors	r0, r0
   12bfc:	f380 8811 	msr	BASEPRI, r0
   12c00:	f04f 0004 	mov.w	r0, #4
   12c04:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   12c06:	2201      	movs	r2, #1
   12c08:	4611      	mov	r1, r2
   12c0a:	4610      	mov	r0, r2
   12c0c:	f7fc fa3e 	bl	f08c <mayfly_enable>
   12c10:	e003      	b.n	12c1a <ticker_stop_adv_stop+0xd2>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c12:	2101      	movs	r1, #1
   12c14:	2000      	movs	r0, #0
   12c16:	f7fe f9df 	bl	10fd8 <ticker_job_sched>
		while (ret_cb == TICKER_STATUS_BUSY) {
   12c1a:	9b02      	ldr	r3, [sp, #8]
   12c1c:	2b02      	cmp	r3, #2
   12c1e:	d0f8      	beq.n	12c12 <ticker_stop_adv_stop+0xca>
   12c20:	e7c4      	b.n	12bac <ticker_stop_adv_stop+0x64>
		LL_ASSERT(_radio.ticker_id_prepare);
   12c22:	4040      	eors	r0, r0
   12c24:	f380 8811 	msr	BASEPRI, r0
   12c28:	f04f 0004 	mov.w	r0, #4
   12c2c:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   12c2e:	2201      	movs	r2, #1
   12c30:	4611      	mov	r1, r2
   12c32:	4610      	mov	r0, r2
   12c34:	f7fc fa2a 	bl	f08c <mayfly_enable>
   12c38:	e003      	b.n	12c42 <ticker_stop_adv_stop+0xfa>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c3a:	2101      	movs	r1, #1
   12c3c:	2000      	movs	r0, #0
   12c3e:	f7fe f9cb 	bl	10fd8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12c42:	9b03      	ldr	r3, [sp, #12]
   12c44:	2b02      	cmp	r3, #2
   12c46:	d0f8      	beq.n	12c3a <ticker_stop_adv_stop+0xf2>
   12c48:	e7c5      	b.n	12bd6 <ticker_stop_adv_stop+0x8e>
				retval = mayfly_enqueue(
   12c4a:	4b30      	ldr	r3, [pc, #192]	; (12d0c <ticker_stop_adv_stop+0x1c4>)
   12c4c:	2200      	movs	r2, #0
   12c4e:	4611      	mov	r1, r2
   12c50:	2001      	movs	r0, #1
   12c52:	f7fc fa59 	bl	f108 <mayfly_enqueue>
				LL_ASSERT(!retval);
   12c56:	2800      	cmp	r0, #0
   12c58:	d08f      	beq.n	12b7a <ticker_stop_adv_stop+0x32>
   12c5a:	4040      	eors	r0, r0
   12c5c:	f380 8811 	msr	BASEPRI, r0
   12c60:	f04f 0004 	mov.w	r0, #4
   12c64:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12c66:	9b03      	ldr	r3, [sp, #12]
   12c68:	2b01      	cmp	r3, #1
   12c6a:	d11b      	bne.n	12ca4 <ticker_stop_adv_stop+0x15c>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12c6c:	4b26      	ldr	r3, [pc, #152]	; (12d08 <ticker_stop_adv_stop+0x1c0>)
   12c6e:	2200      	movs	r2, #0
   12c70:	4611      	mov	r1, r2
   12c72:	2001      	movs	r0, #1
   12c74:	f7fc fa48 	bl	f108 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12c78:	b970      	cbnz	r0, 12c98 <ticker_stop_adv_stop+0x150>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12c7a:	4b24      	ldr	r3, [pc, #144]	; (12d0c <ticker_stop_adv_stop+0x1c4>)
   12c7c:	2200      	movs	r2, #0
   12c7e:	4611      	mov	r1, r2
   12c80:	2001      	movs	r0, #1
   12c82:	f7fc fa41 	bl	f108 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12c86:	2800      	cmp	r0, #0
   12c88:	f43f af77 	beq.w	12b7a <ticker_stop_adv_stop+0x32>
   12c8c:	4040      	eors	r0, r0
   12c8e:	f380 8811 	msr	BASEPRI, r0
   12c92:	f04f 0004 	mov.w	r0, #4
   12c96:	df02      	svc	2
			LL_ASSERT(!retval);
   12c98:	4040      	eors	r0, r0
   12c9a:	f380 8811 	msr	BASEPRI, r0
   12c9e:	f04f 0004 	mov.w	r0, #4
   12ca2:	df02      	svc	2
			LL_ASSERT(0);
   12ca4:	4040      	eors	r0, r0
   12ca6:	f380 8811 	msr	BASEPRI, r0
   12caa:	f04f 0004 	mov.w	r0, #4
   12cae:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12cb0:	9b02      	ldr	r3, [sp, #8]
   12cb2:	2b01      	cmp	r3, #1
   12cb4:	d115      	bne.n	12ce2 <ticker_stop_adv_stop+0x19a>
		if (_radio.role != ROLE_NONE) {
   12cb6:	4b11      	ldr	r3, [pc, #68]	; (12cfc <ticker_stop_adv_stop+0x1b4>)
   12cb8:	7bdb      	ldrb	r3, [r3, #15]
   12cba:	2b00      	cmp	r3, #0
   12cbc:	f43f af5d 	beq.w	12b7a <ticker_stop_adv_stop+0x32>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   12cc0:	4b13      	ldr	r3, [pc, #76]	; (12d10 <ticker_stop_adv_stop+0x1c8>)
   12cc2:	2204      	movs	r2, #4
   12cc4:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12cc6:	2200      	movs	r2, #0
   12cc8:	4611      	mov	r1, r2
   12cca:	2001      	movs	r0, #1
   12ccc:	f7fc fa1c 	bl	f108 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12cd0:	2800      	cmp	r0, #0
   12cd2:	f43f af52 	beq.w	12b7a <ticker_stop_adv_stop+0x32>
   12cd6:	4040      	eors	r0, r0
   12cd8:	f380 8811 	msr	BASEPRI, r0
   12cdc:	f04f 0004 	mov.w	r0, #4
   12ce0:	df02      	svc	2
		LL_ASSERT(0);
   12ce2:	4040      	eors	r0, r0
   12ce4:	f380 8811 	msr	BASEPRI, r0
   12ce8:	f04f 0004 	mov.w	r0, #4
   12cec:	df02      	svc	2
	LL_ASSERT(!retval);
   12cee:	4040      	eors	r0, r0
   12cf0:	f380 8811 	msr	BASEPRI, r0
   12cf4:	f04f 0004 	mov.w	r0, #4
   12cf8:	df02      	svc	2
   12cfa:	bf00      	nop
   12cfc:	20000ff4 	.word	0x20000ff4
   12d00:	2000bd20 	.word	0x2000bd20
   12d04:	0001170d 	.word	0x0001170d
   12d08:	2000bd50 	.word	0x2000bd50
   12d0c:	2000be10 	.word	0x2000be10
   12d10:	2000bd80 	.word	0x2000bd80
   12d14:	00000000 	.word	0x00000000

00012d18 <sched_free_win_offset_calc>:
{
   12d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d1c:	b091      	sub	sp, #68	; 0x44
   12d1e:	9009      	str	r0, [sp, #36]	; 0x24
   12d20:	910a      	str	r1, [sp, #40]	; 0x28
   12d22:	9207      	str	r2, [sp, #28]
   12d24:	469b      	mov	fp, r3
   12d26:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   12d28:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
	if (conn_curr->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   12d2c:	6803      	ldr	r3, [r0, #0]
   12d2e:	2b00      	cmp	r3, #0
   12d30:	db0f      	blt.n	12d52 <sched_free_win_offset_calc+0x3a>
	u32_t ticks_prepare_reduced = 0;
   12d32:	2300      	movs	r3, #0
   12d34:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12d36:	27ff      	movs	r7, #255	; 0xff
   12d38:	f88d 7037 	strb.w	r7, [sp, #55]	; 0x37
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12d3c:	2300      	movs	r3, #0
   12d3e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   12d42:	930f      	str	r3, [sp, #60]	; 0x3c
   12d44:	930e      	str	r3, [sp, #56]	; 0x38
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12d46:	461c      	mov	r4, r3
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12d48:	9706      	str	r7, [sp, #24]
	ticks_slot_prev_abs = 0;
   12d4a:	461e      	mov	r6, r3
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   12d4c:	9308      	str	r3, [sp, #32]
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12d4e:	4698      	mov	r8, r3
   12d50:	e06d      	b.n	12e2e <sched_free_win_offset_calc+0x116>
				conn_curr->hdr.ticks_preempt_to_start;
   12d52:	6881      	ldr	r1, [r0, #8]
				conn_curr->hdr.ticks_active_to_start :
   12d54:	6842      	ldr	r2, [r0, #4]
		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
   12d56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12d5a:	4291      	cmp	r1, r2
   12d5c:	bf2c      	ite	cs
   12d5e:	1a5b      	subcs	r3, r3, r1
   12d60:	1a9b      	subcc	r3, r3, r2
   12d62:	930b      	str	r3, [sp, #44]	; 0x2c
   12d64:	e7e7      	b.n	12d36 <sched_free_win_offset_calc+0x1e>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12d66:	2101      	movs	r1, #1
   12d68:	2000      	movs	r0, #0
   12d6a:	f7fe f935 	bl	10fd8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12d6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12d70:	2b02      	cmp	r3, #2
   12d72:	d0f8      	beq.n	12d66 <sched_free_win_offset_calc+0x4e>
   12d74:	e06c      	b.n	12e50 <sched_free_win_offset_calc+0x138>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12d76:	4040      	eors	r0, r0
   12d78:	f380 8811 	msr	BASEPRI, r0
   12d7c:	f04f 0004 	mov.w	r0, #4
   12d80:	df02      	svc	2
			LL_ASSERT(0);
   12d82:	4040      	eors	r0, r0
   12d84:	f380 8811 	msr	BASEPRI, r0
   12d88:	f04f 0004 	mov.w	r0, #4
   12d8c:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   12d8e:	f8d9 1008 	ldr.w	r1, [r9, #8]
					conn->hdr.ticks_active_to_start :
   12d92:	f8d9 2004 	ldr.w	r2, [r9, #4]
					((conn->hdr.ticks_xtal_to_start &
   12d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   12d9a:	4291      	cmp	r1, r2
   12d9c:	bf2c      	ite	cs
   12d9e:	ebc3 0301 	rsbcs	r3, r3, r1
   12da2:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   12da6:	9a05      	ldr	r2, [sp, #20]
   12da8:	441a      	add	r2, r3
   12daa:	9205      	str	r2, [sp, #20]
   12dac:	e085      	b.n	12eba <sched_free_win_offset_calc+0x1a2>
					memcpy(win_offset +
   12dae:	2202      	movs	r2, #2
   12db0:	a90d      	add	r1, sp, #52	; 0x34
   12db2:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   12db6:	f7ed fa83 	bl	2c0 <memcpy>
					offset_index++;
   12dba:	3401      	adds	r4, #1
   12dbc:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
   12dbe:	3728      	adds	r7, #40	; 0x28
				while ((offset_index < *offset_max) &&
   12dc0:	782b      	ldrb	r3, [r5, #0]
   12dc2:	429c      	cmp	r4, r3
   12dc4:	d21f      	bcs.n	12e06 <sched_free_win_offset_calc+0xee>
				       (ticker_ticks_diff_get(ticks_to_expire_normal,
   12dc6:	4639      	mov	r1, r7
   12dc8:	9805      	ldr	r0, [sp, #20]
   12dca:	f7fe f919 	bl	11000 <ticker_ticks_diff_get>
					 conn->hdr.ticks_slot))) {
   12dce:	f8d9 300c 	ldr.w	r3, [r9, #12]
							    625 + 1250) +
   12dd2:	4433      	add	r3, r6
   12dd4:	3364      	adds	r3, #100	; 0x64
				while ((offset_index < *offset_max) &&
   12dd6:	4298      	cmp	r0, r3
   12dd8:	d315      	bcc.n	12e06 <sched_free_win_offset_calc+0xee>
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12dda:	19bb      	adds	r3, r7, r6
   12ddc:	485a      	ldr	r0, [pc, #360]	; (12f48 <sched_free_win_offset_calc+0x230>)
   12dde:	fba3 0100 	umull	r0, r1, r3, r0
   12de2:	2207      	movs	r2, #7
   12de4:	fb02 1103 	mla	r1, r2, r3, r1
   12de8:	a355      	add	r3, pc, #340	; (adr r3, 12f40 <sched_free_win_offset_calc+0x228>)
   12dea:	e9d3 2300 	ldrd	r2, r3, [r3]
   12dee:	f7ee f985 	bl	10fc <__aeabi_uldivmod>
								   ticks_slot_prev_abs) / 1250;
   12df2:	4b56      	ldr	r3, [pc, #344]	; (12f4c <sched_free_win_offset_calc+0x234>)
   12df4:	fba3 3000 	umull	r3, r0, r3, r0
					_win_offset =
   12df8:	f3c0 208f 	ubfx	r0, r0, #10, #16
   12dfc:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
					if (_win_offset >= conn_interval) {
   12e00:	4558      	cmp	r0, fp
   12e02:	d3d4      	bcc.n	12dae <sched_free_win_offset_calc+0x96>
						ticks_to_expire_prev = 0;
   12e04:	2700      	movs	r7, #0
				*ticks_to_offset_next = ticks_to_expire_prev;
   12e06:	9b07      	ldr	r3, [sp, #28]
   12e08:	601f      	str	r7, [r3, #0]
				if (_win_offset >= conn_interval) {
   12e0a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   12e0e:	459b      	cmp	fp, r3
   12e10:	d95e      	bls.n	12ed0 <sched_free_win_offset_calc+0x1b8>
			ticks_anchor_prev = ticks_anchor;
   12e12:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
			ticker_id_prev = ticker_id;
   12e16:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
				conn->hdr.ticks_slot;
   12e1a:	f8d9 600c 	ldr.w	r6, [r9, #12]
			ticks_slot_prev_abs =
   12e1e:	3664      	adds	r6, #100	; 0x64
			ticks_to_expire_prev = ticks_to_expire_normal;
   12e20:	9b05      	ldr	r3, [sp, #20]
   12e22:	9308      	str	r3, [sp, #32]
   12e24:	e000      	b.n	12e28 <sched_free_win_offset_calc+0x110>
			ticker_id_other = ticker_id;
   12e26:	9206      	str	r2, [sp, #24]
	} while (offset_index < *offset_max);
   12e28:	782b      	ldrb	r3, [r5, #0]
   12e2a:	429c      	cmp	r4, r3
   12e2c:	d251      	bcs.n	12ed2 <sched_free_win_offset_calc+0x1ba>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12e2e:	2302      	movs	r3, #2
   12e30:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   12e32:	ab0c      	add	r3, sp, #48	; 0x30
   12e34:	9302      	str	r3, [sp, #8]
   12e36:	4b46      	ldr	r3, [pc, #280]	; (12f50 <sched_free_win_offset_calc+0x238>)
   12e38:	9301      	str	r3, [sp, #4]
   12e3a:	ab0e      	add	r3, sp, #56	; 0x38
   12e3c:	9300      	str	r3, [sp, #0]
   12e3e:	ab0f      	add	r3, sp, #60	; 0x3c
   12e40:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   12e44:	2101      	movs	r1, #1
   12e46:	2000      	movs	r0, #0
   12e48:	f7fe f846 	bl	10ed8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   12e4c:	2802      	cmp	r0, #2
   12e4e:	d08e      	beq.n	12d6e <sched_free_win_offset_calc+0x56>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12e52:	2b00      	cmp	r3, #0
   12e54:	d18f      	bne.n	12d76 <sched_free_win_offset_calc+0x5e>
		if (ticker_id == 0xff) {
   12e56:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   12e5a:	2aff      	cmp	r2, #255	; 0xff
   12e5c:	d039      	beq.n	12ed2 <sched_free_win_offset_calc+0x1ba>
		if ((ticker_id_prev != 0xff) &&
   12e5e:	2fff      	cmp	r7, #255	; 0xff
   12e60:	d002      	beq.n	12e68 <sched_free_win_offset_calc+0x150>
		    (ticks_anchor != ticks_anchor_prev)) {
   12e62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if ((ticker_id_prev != 0xff) &&
   12e64:	4598      	cmp	r8, r3
   12e66:	d18c      	bne.n	12d82 <sched_free_win_offset_calc+0x6a>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12e68:	2a05      	cmp	r2, #5
   12e6a:	d9dd      	bls.n	12e28 <sched_free_win_offset_calc+0x110>
				  _radio.connection_count)) {
   12e6c:	4b39      	ldr	r3, [pc, #228]	; (12f54 <sched_free_win_offset_calc+0x23c>)
   12e6e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   12e72:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12e74:	429a      	cmp	r2, r3
   12e76:	dad7      	bge.n	12e28 <sched_free_win_offset_calc+0x110>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
   12e78:	2a06      	cmp	r2, #6
   12e7a:	d9d4      	bls.n	12e26 <sched_free_win_offset_calc+0x10e>
		if (ticker_id_other != 0xFF) {
   12e7c:	9b06      	ldr	r3, [sp, #24]
   12e7e:	2bff      	cmp	r3, #255	; 0xff
   12e80:	d127      	bne.n	12ed2 <sched_free_win_offset_calc+0x1ba>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12e82:	3a07      	subs	r2, #7
   12e84:	b292      	uxth	r2, r2
   12e86:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12e8a:	4b32      	ldr	r3, [pc, #200]	; (12f54 <sched_free_win_offset_calc+0x23c>)
   12e8c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12e90:	f7fc fab8 	bl	f404 <mem_get>
   12e94:	4681      	mov	r9, r0
		if ((conn != conn_curr) && (is_select || !conn->role)) {
   12e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12e98:	4283      	cmp	r3, r0
   12e9a:	d0c5      	beq.n	12e28 <sched_free_win_offset_calc+0x110>
   12e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12e9e:	b91b      	cbnz	r3, 12ea8 <sched_free_win_offset_calc+0x190>
   12ea0:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12ea4:	2b00      	cmp	r3, #0
   12ea6:	dbbf      	blt.n	12e28 <sched_free_win_offset_calc+0x110>
				ticks_to_expire + ticks_prepare_reduced;
   12ea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			u32_t ticks_to_expire_normal =
   12eaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12eac:	18d3      	adds	r3, r2, r3
   12eae:	9305      	str	r3, [sp, #20]
			if (conn->hdr.ticks_xtal_to_start &
   12eb0:	f8d9 3000 	ldr.w	r3, [r9]
   12eb4:	2b00      	cmp	r3, #0
   12eb6:	f6ff af6a 	blt.w	12d8e <sched_free_win_offset_calc+0x76>
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   12eba:	9b07      	ldr	r3, [sp, #28]
   12ebc:	681f      	ldr	r7, [r3, #0]
   12ebe:	9b05      	ldr	r3, [sp, #20]
   12ec0:	42bb      	cmp	r3, r7
   12ec2:	d9a6      	bls.n	12e12 <sched_free_win_offset_calc+0xfa>
				if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12ec4:	9a08      	ldr	r2, [sp, #32]
   12ec6:	42ba      	cmp	r2, r7
   12ec8:	f4ff af7a 	bcc.w	12dc0 <sched_free_win_offset_calc+0xa8>
   12ecc:	4617      	mov	r7, r2
   12ece:	e777      	b.n	12dc0 <sched_free_win_offset_calc+0xa8>
   12ed0:	9708      	str	r7, [sp, #32]
	if (ticker_id == 0xFF) {
   12ed2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   12ed6:	2bff      	cmp	r3, #255	; 0xff
   12ed8:	d003      	beq.n	12ee2 <sched_free_win_offset_calc+0x1ca>
	*offset_max = offset_index;
   12eda:	702c      	strb	r4, [r5, #0]
}
   12edc:	b011      	add	sp, #68	; 0x44
   12ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12ee2:	9b07      	ldr	r3, [sp, #28]
   12ee4:	681f      	ldr	r7, [r3, #0]
   12ee6:	9a08      	ldr	r2, [sp, #32]
   12ee8:	42ba      	cmp	r2, r7
   12eea:	d300      	bcc.n	12eee <sched_free_win_offset_calc+0x1d6>
   12eec:	4617      	mov	r7, r2
		while (offset_index < *offset_max) {
   12eee:	782b      	ldrb	r3, [r5, #0]
   12ef0:	429c      	cmp	r4, r3
   12ef2:	d21f      	bcs.n	12f34 <sched_free_win_offset_calc+0x21c>
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12ef4:	19bb      	adds	r3, r7, r6
   12ef6:	4814      	ldr	r0, [pc, #80]	; (12f48 <sched_free_win_offset_calc+0x230>)
   12ef8:	fba3 0100 	umull	r0, r1, r3, r0
   12efc:	2207      	movs	r2, #7
   12efe:	fb02 1103 	mla	r1, r2, r3, r1
   12f02:	a30f      	add	r3, pc, #60	; (adr r3, 12f40 <sched_free_win_offset_calc+0x228>)
   12f04:	e9d3 2300 	ldrd	r2, r3, [r3]
   12f08:	f7ee f8f8 	bl	10fc <__aeabi_uldivmod>
						   ticks_slot_prev_abs) / 1250;
   12f0c:	4b0f      	ldr	r3, [pc, #60]	; (12f4c <sched_free_win_offset_calc+0x234>)
   12f0e:	fba3 2300 	umull	r2, r3, r3, r0
			_win_offset =
   12f12:	f3c3 238f 	ubfx	r3, r3, #10, #16
   12f16:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			if (_win_offset >= conn_interval) {
   12f1a:	459b      	cmp	fp, r3
   12f1c:	d909      	bls.n	12f32 <sched_free_win_offset_calc+0x21a>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
   12f1e:	2202      	movs	r2, #2
   12f20:	a90d      	add	r1, sp, #52	; 0x34
   12f22:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   12f26:	f7ed f9cb 	bl	2c0 <memcpy>
			offset_index++;
   12f2a:	3401      	adds	r4, #1
   12f2c:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += TICKER_US_TO_TICKS(1250);
   12f2e:	3728      	adds	r7, #40	; 0x28
   12f30:	e7dd      	b.n	12eee <sched_free_win_offset_calc+0x1d6>
				ticks_to_expire_prev = 0;
   12f32:	2700      	movs	r7, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   12f34:	9b07      	ldr	r3, [sp, #28]
   12f36:	601f      	str	r7, [r3, #0]
   12f38:	e7cf      	b.n	12eda <sched_free_win_offset_calc+0x1c2>
   12f3a:	bf00      	nop
   12f3c:	f3af 8000 	nop.w
   12f40:	3b9aca00 	.word	0x3b9aca00
   12f44:	00000000 	.word	0x00000000
   12f48:	1afd498d 	.word	0x1afd498d
   12f4c:	d1b71759 	.word	0xd1b71759
   12f50:	0001170d 	.word	0x0001170d
   12f54:	20000ff4 	.word	0x20000ff4

00012f58 <mayfly_sched_free_win_offset_calc>:
{
   12f58:	b500      	push	{lr}
   12f5a:	b085      	sub	sp, #20
	u32_t ticks_to_offset_default = 0;
   12f5c:	2300      	movs	r3, #0
   12f5e:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
   12f60:	2306      	movs	r3, #6
   12f62:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
   12f66:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12f6a:	2b00      	cmp	r3, #0
   12f6c:	db0e      	blt.n	12f8c <mayfly_sched_free_win_offset_calc+0x34>
	ticks_to_offset_next = &ticks_to_offset_default;
   12f6e:	aa03      	add	r2, sp, #12
				   (u8_t *)conn->llcp_conn_param.pdu_win_offset0);
   12f70:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   12f74:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
   12f78:	9101      	str	r1, [sp, #4]
   12f7a:	f10d 010b 	add.w	r1, sp, #11
   12f7e:	9100      	str	r1, [sp, #0]
   12f80:	2100      	movs	r1, #0
   12f82:	f7ff fec9 	bl	12d18 <sched_free_win_offset_calc>
}
   12f86:	b005      	add	sp, #20
   12f88:	f85d fb04 	ldr.w	pc, [sp], #4
			conn->slave.ticks_to_offset;
   12f8c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		conn->llcp_conn_param.ticks_to_offset_next =
   12f8e:	4602      	mov	r2, r0
   12f90:	f842 3fe4 	str.w	r3, [r2, #228]!
   12f94:	e7ec      	b.n	12f70 <mayfly_sched_free_win_offset_calc+0x18>
	...

00012f98 <mayfly_sched_win_offset_select>:
{
   12f98:	b570      	push	{r4, r5, r6, lr}
   12f9a:	b088      	sub	sp, #32
   12f9c:	4606      	mov	r6, r0
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   12f9e:	ac05      	add	r4, sp, #20
   12fa0:	2500      	movs	r5, #0
   12fa2:	9505      	str	r5, [sp, #20]
   12fa4:	9506      	str	r5, [sp, #24]
   12fa6:	9507      	str	r5, [sp, #28]
	u8_t offset_m_max = OFFSET_M_MAX;
   12fa8:	2306      	movs	r3, #6
   12faa:	f88d 3013 	strb.w	r3, [sp, #19]
		TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
   12fae:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
   12fb2:	4843      	ldr	r0, [pc, #268]	; (130c0 <mayfly_sched_win_offset_select+0x128>)
   12fb4:	fba2 0100 	umull	r0, r1, r2, r0
   12fb8:	f240 1323 	movw	r3, #291	; 0x123
   12fbc:	fb03 1102 	mla	r1, r3, r2, r1
   12fc0:	a33d      	add	r3, pc, #244	; (adr r3, 130b8 <mayfly_sched_win_offset_select+0x120>)
   12fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   12fc6:	f7ee f899 	bl	10fc <__aeabi_uldivmod>
   12fca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ticks_to_offset =
   12fce:	aa08      	add	r2, sp, #32
   12fd0:	f842 0d14 	str.w	r0, [r2, #-20]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
   12fd4:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   12fd8:	9401      	str	r4, [sp, #4]
   12fda:	f10d 0113 	add.w	r1, sp, #19
   12fde:	9100      	str	r1, [sp, #0]
   12fe0:	2101      	movs	r1, #1
   12fe2:	4630      	mov	r0, r6
   12fe4:	f7ff fe98 	bl	12d18 <sched_free_win_offset_calc>
	u8_t has_offset_s = 0;
   12fe8:	462c      	mov	r4, r5
	while (offset_index_s < OFFSET_S_MAX) {
   12fea:	e018      	b.n	1301e <mayfly_sched_win_offset_select+0x86>
			offset_index_m++;
   12fec:	3301      	adds	r3, #1
   12fee:	b2db      	uxtb	r3, r3
		while (offset_index_m < offset_m_max) {
   12ff0:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12ff4:	428b      	cmp	r3, r1
   12ff6:	d20e      	bcs.n	13016 <mayfly_sched_win_offset_select+0x7e>
			if (win_offset_s != 0xffff) {
   12ff8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   12ffc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   13000:	4282      	cmp	r2, r0
   13002:	d0f3      	beq.n	12fec <mayfly_sched_win_offset_select+0x54>
				    win_offset_m[offset_index_m]) {
   13004:	a808      	add	r0, sp, #32
   13006:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   1300a:	f830 0c0c 	ldrh.w	r0, [r0, #-12]
				if (win_offset_s ==
   1300e:	4282      	cmp	r2, r0
   13010:	d001      	beq.n	13016 <mayfly_sched_win_offset_select+0x7e>
				has_offset_s = 1;
   13012:	2401      	movs	r4, #1
   13014:	e7ea      	b.n	12fec <mayfly_sched_win_offset_select+0x54>
		if (offset_index_m < offset_m_max) {
   13016:	428b      	cmp	r3, r1
   13018:	d30e      	bcc.n	13038 <mayfly_sched_win_offset_select+0xa0>
		offset_index_s++;
   1301a:	3501      	adds	r5, #1
   1301c:	b2ed      	uxtb	r5, r5
	while (offset_index_s < OFFSET_S_MAX) {
   1301e:	2d05      	cmp	r5, #5
   13020:	d80a      	bhi.n	13038 <mayfly_sched_win_offset_select+0xa0>
		       ((u8_t *)&conn->llcp_conn_param.offset0 +
   13022:	f106 01ce 	add.w	r1, r6, #206	; 0xce
		memcpy((u8_t *)&win_offset_s,
   13026:	2202      	movs	r2, #2
   13028:	eb01 0145 	add.w	r1, r1, r5, lsl #1
   1302c:	f10d 000a 	add.w	r0, sp, #10
   13030:	f7ed f946 	bl	2c0 <memcpy>
		u8_t offset_index_m = 0;
   13034:	2300      	movs	r3, #0
		while (offset_index_m < offset_m_max) {
   13036:	e7db      	b.n	12ff0 <mayfly_sched_win_offset_select+0x58>
	if (offset_index_s < OFFSET_S_MAX) {
   13038:	2d05      	cmp	r5, #5
   1303a:	d91d      	bls.n	13078 <mayfly_sched_win_offset_select+0xe0>
	} else if (!has_offset_s) {
   1303c:	b35c      	cbz	r4, 13096 <mayfly_sched_win_offset_select+0xfe>
		conn->llcp_ack = conn->llcp_req;
   1303e:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
   13042:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		_radio.conn_upd = NULL;
   13046:	2200      	movs	r2, #0
   13048:	4b1e      	ldr	r3, [pc, #120]	; (130c4 <mayfly_sched_win_offset_select+0x12c>)
   1304a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
   1304e:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13052:	f813 2c05 	ldrb.w	r2, [r3, #-5]
   13056:	f042 0203 	orr.w	r2, r2, #3
   1305a:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
   1305e:	2203      	movs	r2, #3
   13060:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->payload.llctrl.opcode =
   13064:	2211      	movs	r2, #17
   13066:	f803 2c02 	strb.w	r2, [r3, #-2]
			reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1306a:	220f      	movs	r2, #15
   1306c:	f803 2c01 	strb.w	r2, [r3, #-1]
			error_code = 0x20; /* Unsupported parameter value */
   13070:	2220      	movs	r2, #32
   13072:	701a      	strb	r2, [r3, #0]
}
   13074:	b008      	add	sp, #32
   13076:	bd70      	pop	{r4, r5, r6, pc}
			win_offset_s * 1250;
   13078:	a908      	add	r1, sp, #32
   1307a:	f831 2d16 	ldrh.w	r2, [r1, #-22]!
   1307e:	f240 43e2 	movw	r3, #1250	; 0x4e2
   13082:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   13086:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   1308a:	2202      	movs	r2, #2
   1308c:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   13090:	f7ed f916 	bl	2c0 <memcpy>
   13094:	e7ee      	b.n	13074 <mayfly_sched_win_offset_select+0xdc>
			win_offset_m[0] * 1250;
   13096:	a908      	add	r1, sp, #32
   13098:	f831 2d0c 	ldrh.w	r2, [r1, #-12]!
   1309c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   130a0:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   130a4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   130a8:	2202      	movs	r2, #2
   130aa:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   130ae:	f7ed f907 	bl	2c0 <memcpy>
   130b2:	e7df      	b.n	13074 <mayfly_sched_win_offset_select+0xdc>
   130b4:	f3af 8000 	nop.w
   130b8:	1afd498d 	.word	0x1afd498d
   130bc:	00000007 	.word	0x00000007
   130c0:	09ce5400 	.word	0x09ce5400
   130c4:	20000ff4 	.word	0x20000ff4

000130c8 <sched_after_mstr_free_slot_get>:
{
   130c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130cc:	b08b      	sub	sp, #44	; 0x2c
   130ce:	4604      	mov	r4, r0
   130d0:	468b      	mov	fp, r1
   130d2:	4615      	mov	r5, r2
   130d4:	469a      	mov	sl, r3
	ticker_id = ticker_id_prev = 0xff;
   130d6:	f04f 08ff 	mov.w	r8, #255	; 0xff
   130da:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   130de:	2300      	movs	r3, #0
   130e0:	f8ca 3000 	str.w	r3, [sl]
   130e4:	9308      	str	r3, [sp, #32]
	ticks_slot_prev_abs = 0;
   130e6:	461f      	mov	r7, r3
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   130e8:	9305      	str	r3, [sp, #20]
   130ea:	e01f      	b.n	1312c <sched_after_mstr_free_slot_get+0x64>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   130ec:	4621      	mov	r1, r4
   130ee:	2000      	movs	r0, #0
   130f0:	f7fd ff72 	bl	10fd8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   130f4:	9b07      	ldr	r3, [sp, #28]
   130f6:	2b02      	cmp	r3, #2
   130f8:	d0f8      	beq.n	130ec <sched_after_mstr_free_slot_get+0x24>
   130fa:	e028      	b.n	1314e <sched_after_mstr_free_slot_get+0x86>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   130fc:	4040      	eors	r0, r0
   130fe:	f380 8811 	msr	BASEPRI, r0
   13102:	f04f 0004 	mov.w	r0, #4
   13106:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   13108:	6881      	ldr	r1, [r0, #8]
					conn->hdr.ticks_active_to_start :
   1310a:	6842      	ldr	r2, [r0, #4]
					((conn->hdr.ticks_xtal_to_start &
   1310c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   13110:	4291      	cmp	r1, r2
   13112:	bf2c      	ite	cs
   13114:	ebc3 0301 	rsbcs	r3, r3, r1
   13118:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   1311c:	4499      	add	r9, r3
   1311e:	e03a      	b.n	13196 <sched_after_mstr_free_slot_get+0xce>
			ticker_id_prev = ticker_id;
   13120:	f89d 8027 	ldrb.w	r8, [sp, #39]	; 0x27
				conn->hdr.ticks_slot;
   13124:	68f7      	ldr	r7, [r6, #12]
			ticks_slot_prev_abs =
   13126:	3727      	adds	r7, #39	; 0x27
			ticks_to_expire_prev = ticks_to_expire_normal;
   13128:	f8cd 9014 	str.w	r9, [sp, #20]
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1312c:	2302      	movs	r3, #2
   1312e:	9307      	str	r3, [sp, #28]
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   13130:	ab07      	add	r3, sp, #28
   13132:	9302      	str	r3, [sp, #8]
   13134:	4b2c      	ldr	r3, [pc, #176]	; (131e8 <sched_after_mstr_free_slot_get+0x120>)
   13136:	9301      	str	r3, [sp, #4]
   13138:	ab08      	add	r3, sp, #32
   1313a:	9300      	str	r3, [sp, #0]
   1313c:	462b      	mov	r3, r5
   1313e:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   13142:	4621      	mov	r1, r4
   13144:	2000      	movs	r0, #0
   13146:	f7fd fec7 	bl	10ed8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   1314a:	2802      	cmp	r0, #2
   1314c:	d0d2      	beq.n	130f4 <sched_after_mstr_free_slot_get+0x2c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   1314e:	9b07      	ldr	r3, [sp, #28]
   13150:	2b00      	cmp	r3, #0
   13152:	d1d3      	bne.n	130fc <sched_after_mstr_free_slot_get+0x34>
		if (ticker_id == 0xff) {
   13154:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   13158:	2aff      	cmp	r2, #255	; 0xff
   1315a:	d028      	beq.n	131ae <sched_after_mstr_free_slot_get+0xe6>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   1315c:	2a06      	cmp	r2, #6
   1315e:	d9e5      	bls.n	1312c <sched_after_mstr_free_slot_get+0x64>
				  _radio.connection_count)) {
   13160:	4b22      	ldr	r3, [pc, #136]	; (131ec <sched_after_mstr_free_slot_get+0x124>)
   13162:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   13166:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   13168:	429a      	cmp	r2, r3
   1316a:	dadf      	bge.n	1312c <sched_after_mstr_free_slot_get+0x64>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1316c:	3a07      	subs	r2, #7
   1316e:	b292      	uxth	r2, r2
   13170:	f44f 71aa 	mov.w	r1, #340	; 0x154
   13174:	4b1d      	ldr	r3, [pc, #116]	; (131ec <sched_after_mstr_free_slot_get+0x124>)
   13176:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   1317a:	f7fc f943 	bl	f404 <mem_get>
		if (conn && !conn->role) {
   1317e:	4606      	mov	r6, r0
   13180:	2800      	cmp	r0, #0
   13182:	d0d3      	beq.n	1312c <sched_after_mstr_free_slot_get+0x64>
   13184:	f990 301d 	ldrsb.w	r3, [r0, #29]
   13188:	2b00      	cmp	r3, #0
   1318a:	dbcf      	blt.n	1312c <sched_after_mstr_free_slot_get+0x64>
			u32_t ticks_to_expire_normal = ticks_to_expire;
   1318c:	f8dd 9020 	ldr.w	r9, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   13190:	6803      	ldr	r3, [r0, #0]
   13192:	2b00      	cmp	r3, #0
   13194:	dbb8      	blt.n	13108 <sched_after_mstr_free_slot_get+0x40>
			if ((ticker_id_prev != 0xFF) &&
   13196:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1319a:	d0c1      	beq.n	13120 <sched_after_mstr_free_slot_get+0x58>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   1319c:	9905      	ldr	r1, [sp, #20]
   1319e:	4648      	mov	r0, r9
   131a0:	f7fd ff2e 	bl	11000 <ticker_ticks_diff_get>
			     (ticks_slot_prev_abs + ticks_slot_abs +
   131a4:	eb07 030b 	add.w	r3, r7, fp
   131a8:	3302      	adds	r3, #2
			if ((ticker_id_prev != 0xFF) &&
   131aa:	4298      	cmp	r0, r3
   131ac:	d9b8      	bls.n	13120 <sched_after_mstr_free_slot_get+0x58>
	if (ticker_id_prev != 0xff) {
   131ae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   131b2:	d010      	beq.n	131d6 <sched_after_mstr_free_slot_get+0x10e>
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   131b4:	9b05      	ldr	r3, [sp, #20]
   131b6:	443b      	add	r3, r7
   131b8:	461f      	mov	r7, r3
   131ba:	480d      	ldr	r0, [pc, #52]	; (131f0 <sched_after_mstr_free_slot_get+0x128>)
   131bc:	fba3 0100 	umull	r0, r1, r3, r0
   131c0:	2307      	movs	r3, #7
   131c2:	fb03 1107 	mla	r1, r3, r7, r1
   131c6:	a306      	add	r3, pc, #24	; (adr r3, 131e0 <sched_after_mstr_free_slot_get+0x118>)
   131c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   131cc:	f7ed ff96 	bl	10fc <__aeabi_uldivmod>
						ticks_slot_prev_abs) +
   131d0:	3020      	adds	r0, #32
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   131d2:	f8ca 0000 	str.w	r0, [sl]
}
   131d6:	b00b      	add	sp, #44	; 0x2c
   131d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131dc:	f3af 8000 	nop.w
   131e0:	3b9aca00 	.word	0x3b9aca00
   131e4:	00000000 	.word	0x00000000
   131e8:	0001170d 	.word	0x0001170d
   131ec:	20000ff4 	.word	0x20000ff4
   131f0:	1afd498d 	.word	0x1afd498d
   131f4:	00000000 	.word	0x00000000

000131f8 <sched_after_mstr_free_offset_get>:
{
   131f8:	b570      	push	{r4, r5, r6, lr}
   131fa:	b082      	sub	sp, #8
   131fc:	4606      	mov	r6, r0
   131fe:	4615      	mov	r5, r2
   13200:	461c      	mov	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;
   13202:	aa02      	add	r2, sp, #8
   13204:	f842 5d04 	str.w	r5, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
   13208:	3127      	adds	r1, #39	; 0x27
   1320a:	2001      	movs	r0, #1
   1320c:	f7ff ff5c 	bl	130c8 <sched_after_mstr_free_slot_get>
	if (ticks_anchor_offset != ticks_anchor) {
   13210:	9801      	ldr	r0, [sp, #4]
   13212:	4285      	cmp	r5, r0
   13214:	d011      	beq.n	1323a <sched_after_mstr_free_offset_get+0x42>
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
   13216:	4629      	mov	r1, r5
   13218:	f7fd fef2 	bl	11000 <ticker_ticks_diff_get>
   1321c:	4602      	mov	r2, r0
   1321e:	4810      	ldr	r0, [pc, #64]	; (13260 <sched_after_mstr_free_offset_get+0x68>)
   13220:	fba2 0100 	umull	r0, r1, r2, r0
   13224:	2307      	movs	r3, #7
   13226:	fb03 1102 	mla	r1, r3, r2, r1
   1322a:	a30b      	add	r3, pc, #44	; (adr r3, 13258 <sched_after_mstr_free_offset_get+0x60>)
   1322c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13230:	f7ed ff64 	bl	10fc <__aeabi_uldivmod>
		*win_offset_us +=
   13234:	6823      	ldr	r3, [r4, #0]
   13236:	4418      	add	r0, r3
   13238:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & ((u32_t)1 << 31)) == 0) {
   1323a:	6823      	ldr	r3, [r4, #0]
   1323c:	2b00      	cmp	r3, #0
   1323e:	db09      	blt.n	13254 <sched_after_mstr_free_offset_get+0x5c>
		u32_t conn_interval_us = conn_interval * 1250;
   13240:	f240 40e2 	movw	r0, #1250	; 0x4e2
   13244:	fb00 f006 	mul.w	r0, r0, r6
		while (*win_offset_us > conn_interval_us) {
   13248:	e001      	b.n	1324e <sched_after_mstr_free_offset_get+0x56>
			*win_offset_us -= conn_interval_us;
   1324a:	1a1b      	subs	r3, r3, r0
   1324c:	6023      	str	r3, [r4, #0]
		while (*win_offset_us > conn_interval_us) {
   1324e:	6823      	ldr	r3, [r4, #0]
   13250:	4298      	cmp	r0, r3
   13252:	d3fa      	bcc.n	1324a <sched_after_mstr_free_offset_get+0x52>
}
   13254:	b002      	add	sp, #8
   13256:	bd70      	pop	{r4, r5, r6, pc}
   13258:	3b9aca00 	.word	0x3b9aca00
   1325c:	00000000 	.word	0x00000000
   13260:	1afd498d 	.word	0x1afd498d

00013264 <mayfly_sched_win_offset_use>:
{
   13264:	b510      	push	{r4, lr}
   13266:	b082      	sub	sp, #8
   13268:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
   1326a:	f100 0384 	add.w	r3, r0, #132	; 0x84
   1326e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   13272:	68c1      	ldr	r1, [r0, #12]
   13274:	8c80      	ldrh	r0, [r0, #36]	; 0x24
   13276:	f7ff ffbf 	bl	131f8 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   1327a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   1327e:	4a07      	ldr	r2, [pc, #28]	; (1329c <mayfly_sched_win_offset_use+0x38>)
   13280:	fba2 2303 	umull	r2, r3, r2, r3
   13284:	0a9b      	lsrs	r3, r3, #10
   13286:	a902      	add	r1, sp, #8
   13288:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   1328c:	2202      	movs	r2, #2
   1328e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   13292:	f7ed f815 	bl	2c0 <memcpy>
}
   13296:	b002      	add	sp, #8
   13298:	bd10      	pop	{r4, pc}
   1329a:	bf00      	nop
   1329c:	d1b71759 	.word	0xd1b71759

000132a0 <mayfly_sched_after_mstr_free_offset_get>:
{
   132a0:	b510      	push	{r4, lr}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   132a2:	4c05      	ldr	r4, [pc, #20]	; (132b8 <mayfly_sched_after_mstr_free_offset_get+0x18>)
   132a4:	f504 7380 	add.w	r3, r4, #256	; 0x100
   132a8:	4602      	mov	r2, r0
   132aa:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   132ae:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
   132b2:	f7ff ffa1 	bl	131f8 <sched_after_mstr_free_offset_get>
   132b6:	bd10      	pop	{r4, pc}
   132b8:	20000ff4 	.word	0x20000ff4

000132bc <enc_rsp_send>:
{
   132bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   132c0:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   132c2:	4818      	ldr	r0, [pc, #96]	; (13324 <enc_rsp_send+0x68>)
   132c4:	f7fc f861 	bl	f38a <mem_acquire>
	LL_ASSERT(node_tx);
   132c8:	b330      	cbz	r0, 13318 <enc_rsp_send+0x5c>
   132ca:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   132cc:	7903      	ldrb	r3, [r0, #4]
   132ce:	f043 0303 	orr.w	r3, r3, #3
   132d2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   132d4:	230d      	movs	r3, #13
   132d6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   132d8:	2604      	movs	r6, #4
   132da:	71c6      	strb	r6, [r0, #7]
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds);
   132dc:	f100 0808 	add.w	r8, r0, #8
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds),
   132e0:	4641      	mov	r1, r8
   132e2:	2008      	movs	r0, #8
   132e4:	f7fd faa2 	bl	1082c <rand_isr_get>
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs);
   132e8:	f104 0710 	add.w	r7, r4, #16
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs),
   132ec:	4639      	mov	r1, r7
   132ee:	4630      	mov	r0, r6
   132f0:	f7fd fa9c 	bl	1082c <rand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   132f4:	2208      	movs	r2, #8
   132f6:	4641      	mov	r1, r8
   132f8:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   132fc:	f7ec ffe0 	bl	2c0 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   13300:	4632      	mov	r2, r6
   13302:	4639      	mov	r1, r7
   13304:	f505 708b 	add.w	r0, r5, #278	; 0x116
   13308:	f7ec ffda 	bl	2c0 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   1330c:	4621      	mov	r1, r4
   1330e:	4628      	mov	r0, r5
   13310:	f7fe facc 	bl	118ac <ctrl_tx_enqueue>
   13314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(node_tx);
   13318:	4040      	eors	r0, r0
   1331a:	f380 8811 	msr	BASEPRI, r0
   1331e:	f04f 0004 	mov.w	r0, #4
   13322:	df02      	svc	2
   13324:	2000114c 	.word	0x2000114c

00013328 <enc_req_reused_send>:
{
   13328:	b538      	push	{r3, r4, r5, lr}
   1332a:	4605      	mov	r5, r0
   1332c:	460c      	mov	r4, r1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1332e:	790b      	ldrb	r3, [r1, #4]
   13330:	f043 0303 	orr.w	r3, r3, #3
   13334:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   13336:	2317      	movs	r3, #23
   13338:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1333a:	2303      	movs	r3, #3
   1333c:	71cb      	strb	r3, [r1, #7]
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
   1333e:	2208      	movs	r2, #8
   13340:	f100 0179 	add.w	r1, r0, #121	; 0x79
   13344:	18a0      	adds	r0, r4, r2
   13346:	f7ec ffbb 	bl	2c0 <memcpy>
		conn->llcp.encryption.ediv[0];
   1334a:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
   1334e:	7423      	strb	r3, [r4, #16]
		conn->llcp.encryption.ediv[1];
   13350:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
   13354:	7463      	strb	r3, [r4, #17]
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm),
   13356:	f104 0112 	add.w	r1, r4, #18
   1335a:	2008      	movs	r0, #8
   1335c:	f7fd fa66 	bl	1082c <rand_isr_get>
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm),
   13360:	f104 011a 	add.w	r1, r4, #26
   13364:	2004      	movs	r0, #4
   13366:	f7fd fa61 	bl	1082c <rand_isr_get>
   1336a:	bd38      	pop	{r3, r4, r5, pc}

0001336c <isr_rx_conn_pkt_ctrl>:
{
   1336c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13370:	b082      	sub	sp, #8
   13372:	4604      	mov	r4, r0
   13374:	460f      	mov	r7, r1
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   13376:	f100 0608 	add.w	r6, r0, #8
	if (_radio.conn_curr->role) {
   1337a:	4ba0      	ldr	r3, [pc, #640]	; (135fc <isr_rx_conn_pkt_ctrl+0x290>)
   1337c:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
   13380:	f995 301d 	ldrsb.w	r3, [r5, #29]
   13384:	2b00      	cmp	r3, #0
   13386:	db11      	blt.n	133ac <isr_rx_conn_pkt_ctrl+0x40>
		switch (pdu_data_rx->payload.llctrl.opcode) {
   13388:	7ac1      	ldrb	r1, [r0, #11]
   1338a:	2918      	cmp	r1, #24
   1338c:	d82c      	bhi.n	133e8 <isr_rx_conn_pkt_ctrl+0x7c>
   1338e:	e8df f001 	tbb	[pc, r1]
   13392:	2323      	.short	0x2323
   13394:	2b2b232b 	.word	0x2b2b232b
   13398:	2b232b2b 	.word	0x2b232b2b
   1339c:	2b2b2b23 	.word	0x2b2b2b23
   133a0:	2b2b2b2b 	.word	0x2b2b2b2b
   133a4:	2b2b2b2b 	.word	0x2b2b2b2b
   133a8:	2b2b      	.short	0x2b2b
   133aa:	23          	.byte	0x23
   133ab:	00          	.byte	0x00
		switch (pdu_data_rx->payload.llctrl.opcode) {
   133ac:	7ac1      	ldrb	r1, [r0, #11]
   133ae:	1f0a      	subs	r2, r1, #4
   133b0:	2a15      	cmp	r2, #21
   133b2:	d819      	bhi.n	133e8 <isr_rx_conn_pkt_ctrl+0x7c>
   133b4:	e8df f002 	tbb	[pc, r2]
   133b8:	18180b0b 	.word	0x18180b0b
   133bc:	18181818 	.word	0x18181818
   133c0:	180b1818 	.word	0x180b1818
   133c4:	1818180b 	.word	0x1818180b
   133c8:	0b181818 	.word	0x0b181818
   133cc:	0b18      	.short	0x0b18
			unknown_rsp_send(_radio.conn_curr,
   133ce:	4628      	mov	r0, r5
   133d0:	f7fe fcca 	bl	11d68 <unknown_rsp_send>
			return 0;
   133d4:	2400      	movs	r4, #0
   133d6:	e003      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
			unknown_rsp_send(_radio.conn_curr,
   133d8:	4628      	mov	r0, r5
   133da:	f7fe fcc5 	bl	11d68 <unknown_rsp_send>
			return 0;
   133de:	2400      	movs	r4, #0
}
   133e0:	4620      	mov	r0, r4
   133e2:	b002      	add	sp, #8
   133e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (pdu_data_rx->payload.llctrl.opcode) {
   133e8:	7ae1      	ldrb	r1, [r4, #11]
   133ea:	2919      	cmp	r1, #25
   133ec:	f200 87e6 	bhi.w	143bc <isr_rx_conn_pkt_ctrl+0x1050>
   133f0:	e8df f011 	tbh	[pc, r1, lsl #1]
   133f4:	002e001a 	.word	0x002e001a
   133f8:	0042003d 	.word	0x0042003d
   133fc:	00800065 	.word	0x00800065
   13400:	04c60099 	.word	0x04c60099
   13404:	010600de 	.word	0x010600de
   13408:	014b012d 	.word	0x014b012d
   1340c:	01ad0170 	.word	0x01ad0170
   13410:	01c400de 	.word	0x01c400de
   13414:	0395032d 	.word	0x0395032d
   13418:	04c104bb 	.word	0x04c104bb
   1341c:	05180518 	.word	0x05180518
   13420:	06de0606 	.word	0x06de0606
   13424:	07b9071b 	.word	0x07b9071b
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
   13428:	4631      	mov	r1, r6
   1342a:	4628      	mov	r0, r5
   1342c:	f7fe fb90 	bl	11b50 <conn_update>
   13430:	b930      	cbnz	r0, 13440 <isr_rx_conn_pkt_ctrl+0xd4>
			_radio.conn_curr->procedure_expire = 0;
   13432:	4b72      	ldr	r3, [pc, #456]	; (135fc <isr_rx_conn_pkt_ctrl+0x290>)
   13434:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13438:	2400      	movs	r4, #0
   1343a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   1343e:	e7cf      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   13440:	4b6e      	ldr	r3, [pc, #440]	; (135fc <isr_rx_conn_pkt_ctrl+0x290>)
   13442:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13446:	2228      	movs	r2, #40	; 0x28
   13448:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   1344c:	2400      	movs	r4, #0
   1344e:	e7c7      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		if (chan_map_update(_radio.conn_curr, pdu_data_rx)) {
   13450:	4631      	mov	r1, r6
   13452:	4628      	mov	r0, r5
   13454:	f7ff f99e 	bl	12794 <chan_map_update>
   13458:	2800      	cmp	r0, #0
   1345a:	f000 87b5 	beq.w	143c8 <isr_rx_conn_pkt_ctrl+0x105c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   1345e:	4b67      	ldr	r3, [pc, #412]	; (135fc <isr_rx_conn_pkt_ctrl+0x290>)
   13460:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13464:	2228      	movs	r2, #40	; 0x28
   13466:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   1346a:	2400      	movs	r4, #0
   1346c:	e7b8      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
   1346e:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_terminate.reason_peer =
   13470:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
	u8_t nack = 0;
   13474:	2400      	movs	r4, #0
		break;
   13476:	e7b3      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   13478:	2208      	movs	r2, #8
   1347a:	f104 0116 	add.w	r1, r4, #22
   1347e:	f105 0093 	add.w	r0, r5, #147	; 0x93
   13482:	f7ec ff1d 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   13486:	4d5d      	ldr	r5, [pc, #372]	; (135fc <isr_rx_conn_pkt_ctrl+0x290>)
   13488:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   1348c:	2204      	movs	r2, #4
   1348e:	f104 011e 	add.w	r1, r4, #30
   13492:	f500 7089 	add.w	r0, r0, #274	; 0x112
   13496:	f7ec ff13 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   1349a:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   1349e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   134a2:	f043 0304 	orr.w	r3, r3, #4
   134a6:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   134aa:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   134ae:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   134b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   134b6:	2301      	movs	r3, #1
   134b8:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   134ba:	2400      	movs	r4, #0
		break;
   134bc:	e790      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   134be:	2208      	movs	r2, #8
   134c0:	f104 010c 	add.w	r1, r4, #12
   134c4:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   134c8:	f7ec fefa 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   134cc:	4d4b      	ldr	r5, [pc, #300]	; (135fc <isr_rx_conn_pkt_ctrl+0x290>)
   134ce:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   134d2:	2204      	movs	r2, #4
   134d4:	f104 0114 	add.w	r1, r4, #20
   134d8:	f500 708b 	add.w	r0, r0, #278	; 0x116
   134dc:	f7ec fef0 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   134e0:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   134e4:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   134e8:	f043 0304 	orr.w	r3, r3, #4
   134ec:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t nack = 0;
   134f0:	2400      	movs	r4, #0
		break;
   134f2:	e775      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   134f4:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   134f8:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   134fc:	429a      	cmp	r2, r3
   134fe:	d10c      	bne.n	1351a <isr_rx_conn_pkt_ctrl+0x1ae>
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   13500:	2303      	movs	r3, #3
   13502:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   13506:	4b3d      	ldr	r3, [pc, #244]	; (135fc <isr_rx_conn_pkt_ctrl+0x290>)
   13508:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1350c:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   13510:	3b01      	subs	r3, #1
   13512:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
	u8_t nack = 0;
   13516:	2400      	movs	r4, #0
		break;
   13518:	e762      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   1351a:	4040      	eors	r0, r0
   1351c:	f380 8811 	msr	BASEPRI, r0
   13520:	f04f 0004 	mov.w	r0, #4
   13524:	df02      	svc	2
		if (_radio.role == ROLE_SLAVE) {
   13526:	4b35      	ldr	r3, [pc, #212]	; (135fc <isr_rx_conn_pkt_ctrl+0x290>)
   13528:	7bdb      	ldrb	r3, [r3, #15]
   1352a:	b2db      	uxtb	r3, r3
   1352c:	2b03      	cmp	r3, #3
   1352e:	d027      	beq.n	13580 <isr_rx_conn_pkt_ctrl+0x214>
			_radio.conn_curr->pause_rx = 0;
   13530:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   13534:	f36f 0382 	bfc	r3, #2, #1
   13538:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   1353c:	4b2f      	ldr	r3, [pc, #188]	; (135fc <isr_rx_conn_pkt_ctrl+0x290>)
   1353e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13542:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13546:	f36f 02c3 	bfc	r2, #3, #1
   1354a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		if (_radio.conn_curr->refresh) {
   1354e:	4b2b      	ldr	r3, [pc, #172]	; (135fc <isr_rx_conn_pkt_ctrl+0x290>)
   13550:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13554:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13558:	f012 0f40 	tst.w	r2, #64	; 0x40
   1355c:	d007      	beq.n	1356e <isr_rx_conn_pkt_ctrl+0x202>
			_radio.conn_curr->refresh = 0;
   1355e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13562:	f36f 1286 	bfc	r2, #6, #1
   13566:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1356a:	2309      	movs	r3, #9
   1356c:	7123      	strb	r3, [r4, #4]
		*rx_enqueue = 1;
   1356e:	2301      	movs	r3, #1
   13570:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   13572:	4b22      	ldr	r3, [pc, #136]	; (135fc <isr_rx_conn_pkt_ctrl+0x290>)
   13574:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13578:	2400      	movs	r4, #0
   1357a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   1357e:	e72f      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   13580:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   13584:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13588:	429a      	cmp	r2, r3
   1358a:	d10b      	bne.n	135a4 <isr_rx_conn_pkt_ctrl+0x238>
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   1358c:	2303      	movs	r3, #3
   1358e:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   13592:	4b1a      	ldr	r3, [pc, #104]	; (135fc <isr_rx_conn_pkt_ctrl+0x290>)
   13594:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13598:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   1359c:	3b01      	subs	r3, #1
   1359e:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   135a2:	e7d4      	b.n	1354e <isr_rx_conn_pkt_ctrl+0x1e2>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   135a4:	4040      	eors	r0, r0
   135a6:	f380 8811 	msr	BASEPRI, r0
   135aa:	f04f 0004 	mov.w	r0, #4
   135ae:	df02      	svc	2
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   135b0:	7b23      	ldrb	r3, [r4, #12]
   135b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   135b6:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   135ba:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   135be:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   135c2:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   135c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   135c8:	7ba2      	ldrb	r2, [r4, #14]
   135ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   135ce:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   135d2:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   135d6:	4013      	ands	r3, r2
   135d8:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   135dc:	4a07      	ldr	r2, [pc, #28]	; (135fc <isr_rx_conn_pkt_ctrl+0x290>)
   135de:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   135e2:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   135e6:	f043 0320 	orr.w	r3, r3, #32
   135ea:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		feature_rsp_send(_radio.conn_curr);
   135ee:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   135f2:	f7ff f8fd 	bl	127f0 <feature_rsp_send>
	u8_t nack = 0;
   135f6:	2400      	movs	r4, #0
	break;
   135f8:	e6f2      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
   135fa:	bf00      	nop
   135fc:	20000ff4 	.word	0x20000ff4
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   13600:	7b23      	ldrb	r3, [r4, #12]
   13602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   13606:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   1360a:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   1360e:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   13612:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   13614:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   13618:	7ba2      	ldrb	r2, [r4, #14]
   1361a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   1361e:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   13622:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   13626:	4013      	ands	r3, r2
   13628:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   1362c:	4ad2      	ldr	r2, [pc, #840]	; (13978 <isr_rx_conn_pkt_ctrl+0x60c>)
   1362e:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   13632:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   13636:	f043 0320 	orr.w	r3, r3, #32
   1363a:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		*rx_enqueue = 1;
   1363e:	2301      	movs	r3, #1
   13640:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   13642:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13646:	2400      	movs	r4, #0
   13648:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	break;
   1364c:	e6c8      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		pause_enc_rsp_send(_radio.conn_curr);
   1364e:	4628      	mov	r0, r5
   13650:	f7fe fae8 	bl	11c24 <pause_enc_rsp_send>
		_radio.conn_curr->pause_rx = 1;
   13654:	4bc8      	ldr	r3, [pc, #800]	; (13978 <isr_rx_conn_pkt_ctrl+0x60c>)
   13656:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1365a:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   1365e:	f042 0204 	orr.w	r2, r2, #4
   13662:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   13666:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1366a:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   1366e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13672:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->enc_rx = 0;
   13676:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1367a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1367e:	f36f 1204 	bfc	r2, #4, #1
   13682:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   13686:	2400      	movs	r4, #0
		break;
   13688:	e6aa      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.role == ROLE_MASTER) {
   1368a:	4bbb      	ldr	r3, [pc, #748]	; (13978 <isr_rx_conn_pkt_ctrl+0x60c>)
   1368c:	7bdb      	ldrb	r3, [r3, #15]
   1368e:	b2db      	uxtb	r3, r3
   13690:	2b04      	cmp	r3, #4
   13692:	d00a      	beq.n	136aa <isr_rx_conn_pkt_ctrl+0x33e>
		_radio.conn_curr->enc_tx = 0;
   13694:	4bb8      	ldr	r3, [pc, #736]	; (13978 <isr_rx_conn_pkt_ctrl+0x60c>)
   13696:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1369a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1369e:	f36f 1245 	bfc	r2, #5, #1
   136a2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   136a6:	2400      	movs	r4, #0
		break;
   136a8:	e69a      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
			pause_enc_rsp_send(_radio.conn_curr);
   136aa:	4628      	mov	r0, r5
   136ac:	f7fe faba 	bl	11c24 <pause_enc_rsp_send>
			_radio.conn_curr->pause_rx = 1;
   136b0:	4ab1      	ldr	r2, [pc, #708]	; (13978 <isr_rx_conn_pkt_ctrl+0x60c>)
   136b2:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   136b6:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   136ba:	f043 0304 	orr.w	r3, r3, #4
   136be:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			_radio.conn_curr->enc_rx = 0;
   136c2:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   136c6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   136ca:	f36f 1204 	bfc	r2, #4, #1
   136ce:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   136d2:	e7df      	b.n	13694 <isr_rx_conn_pkt_ctrl+0x328>
			version_ind.version_number;
   136d4:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_version.version_number =
   136d6:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
		_radio.conn_curr->llcp_version. company_id =
   136da:	4ba7      	ldr	r3, [pc, #668]	; (13978 <isr_rx_conn_pkt_ctrl+0x60c>)
   136dc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
   136e0:	f8b4 100d 	ldrh.w	r1, [r4, #13]
		_radio.conn_curr->llcp_version. company_id =
   136e4:	f8a2 10aa 	strh.w	r1, [r2, #170]	; 0xaa
		_radio.conn_curr->llcp_version.sub_version_number =
   136e8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
   136ec:	f8b4 100f 	ldrh.w	r1, [r4, #15]
		_radio.conn_curr->llcp_version.sub_version_number =
   136f0:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
		if ((_radio.conn_curr->llcp_version.tx != 0) &&
   136f4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   136f8:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
   136fc:	f003 0303 	and.w	r3, r3, #3
   13700:	2b01      	cmp	r3, #1
   13702:	d011      	beq.n	13728 <isr_rx_conn_pkt_ctrl+0x3bc>
		_radio.conn_curr->llcp_version.rx = 1;
   13704:	4a9c      	ldr	r2, [pc, #624]	; (13978 <isr_rx_conn_pkt_ctrl+0x60c>)
   13706:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   1370a:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
   1370e:	f043 0302 	orr.w	r3, r3, #2
   13712:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
		if (_radio.conn_curr->llcp_version.tx == 0) {
   13716:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   1371a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
   1371e:	f012 0f01 	tst.w	r2, #1
   13722:	d009      	beq.n	13738 <isr_rx_conn_pkt_ctrl+0x3cc>
	u8_t nack = 0;
   13724:	2400      	movs	r4, #0
   13726:	e65b      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
			*rx_enqueue = 1;
   13728:	703b      	strb	r3, [r7, #0]
			_radio.conn_curr->procedure_expire = 0;
   1372a:	4b93      	ldr	r3, [pc, #588]	; (13978 <isr_rx_conn_pkt_ctrl+0x60c>)
   1372c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13730:	2200      	movs	r2, #0
   13732:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   13736:	e7e5      	b.n	13704 <isr_rx_conn_pkt_ctrl+0x398>
			_radio.conn_curr->llcp_version.tx = 1;
   13738:	f042 0201 	orr.w	r2, r2, #1
   1373c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			version_ind_send(_radio.conn_curr);
   13740:	4b8d      	ldr	r3, [pc, #564]	; (13978 <isr_rx_conn_pkt_ctrl+0x60c>)
   13742:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13746:	f7ff f90b 	bl	12960 <version_ind_send>
	u8_t nack = 0;
   1374a:	2400      	movs	r4, #0
   1374c:	e648      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->pause_rx = 0;
   1374e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   13752:	f36f 0382 	bfc	r3, #2, #1
   13756:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   1375a:	4b87      	ldr	r3, [pc, #540]	; (13978 <isr_rx_conn_pkt_ctrl+0x60c>)
   1375c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13760:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13764:	f36f 01c3 	bfc	r1, #3, #1
   13768:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   1376c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13770:	2400      	movs	r4, #0
   13772:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   13776:	2301      	movs	r3, #1
   13778:	703b      	strb	r3, [r7, #0]
		break;
   1377a:	e631      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   1377c:	4a7e      	ldr	r2, [pc, #504]	; (13978 <isr_rx_conn_pkt_ctrl+0x60c>)
   1377e:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   13782:	b142      	cbz	r2, 13796 <isr_rx_conn_pkt_ctrl+0x42a>
   13784:	4295      	cmp	r5, r2
   13786:	d006      	beq.n	13796 <isr_rx_conn_pkt_ctrl+0x42a>
			reject_ext_ind_send(_radio.conn_curr,
   13788:	2220      	movs	r2, #32
   1378a:	210f      	movs	r1, #15
   1378c:	4628      	mov	r0, r5
   1378e:	f7fe faa5 	bl	11cdc <reject_ext_ind_send>
	u8_t nack = 0;
   13792:	2400      	movs	r4, #0
			break;
   13794:	e624      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		if (!_radio.conn_curr->role) {
   13796:	2b00      	cmp	r3, #0
   13798:	f2c0 80bc 	blt.w	13914 <isr_rx_conn_pkt_ctrl+0x5a8>
			if ((conn->llcp_conn_param.req !=
   1379c:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
					conn->llcp_conn_param.ack) &&
   137a0:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
			if ((conn->llcp_conn_param.req !=
   137a4:	429a      	cmp	r2, r3
   137a6:	d008      	beq.n	137ba <isr_rx_conn_pkt_ctrl+0x44e>
			    ((conn->llcp_conn_param.state ==
   137a8:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   137ac:	f013 0307 	ands.w	r3, r3, #7
   137b0:	d016      	beq.n	137e0 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_REQ) ||
   137b2:	2b04      	cmp	r3, #4
   137b4:	d014      	beq.n	137e0 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   137b6:	2b05      	cmp	r3, #5
   137b8:	d012      	beq.n	137e0 <isr_rx_conn_pkt_ctrl+0x474>
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   137ba:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   137be:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   137c2:	429a      	cmp	r2, r3
   137c4:	d105      	bne.n	137d2 <isr_rx_conn_pkt_ctrl+0x466>
				   (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   137c6:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
   137ca:	f895 30f5 	ldrb.w	r3, [r5, #245]	; 0xf5
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   137ce:	429a      	cmp	r2, r3
   137d0:	d00d      	beq.n	137ee <isr_rx_conn_pkt_ctrl+0x482>
				reject_ext_ind_send(_radio.conn_curr,
   137d2:	222a      	movs	r2, #42	; 0x2a
   137d4:	210f      	movs	r1, #15
   137d6:	4628      	mov	r0, r5
   137d8:	f7fe fa80 	bl	11cdc <reject_ext_ind_send>
	u8_t nack = 0;
   137dc:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   137de:	e5ff      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   137e0:	2223      	movs	r2, #35	; 0x23
   137e2:	210f      	movs	r1, #15
   137e4:	4628      	mov	r0, r5
   137e6:	f7fe fa79 	bl	11cdc <reject_ext_ind_send>
	u8_t nack = 0;
   137ea:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   137ec:	e5f8      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
				if ((cpr->interval_min < 6) ||
   137ee:	89a0      	ldrh	r0, [r4, #12]
   137f0:	b282      	uxth	r2, r0
   137f2:	2a05      	cmp	r2, #5
   137f4:	d970      	bls.n	138d8 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   137f6:	89e3      	ldrh	r3, [r4, #14]
				if ((cpr->interval_min < 6) ||
   137f8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   137fc:	d86c      	bhi.n	138d8 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   137fe:	429a      	cmp	r2, r3
   13800:	d86a      	bhi.n	138d8 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->latency > 499) ||
   13802:	8a22      	ldrh	r2, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   13804:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   13808:	d266      	bcs.n	138d8 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   1380a:	8a61      	ldrh	r1, [r4, #18]
				    (cpr->latency > 499) ||
   1380c:	2909      	cmp	r1, #9
   1380e:	d963      	bls.n	138d8 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   13810:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   13814:	d860      	bhi.n	138d8 <isr_rx_conn_pkt_ctrl+0x56c>
				     ((cpr->latency + 1) *
   13816:	fb02 3203 	mla	r2, r2, r3, r3
				    (cpr->timeout > 3200) ||
   1381a:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   1381e:	da5b      	bge.n	138d8 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->preferred_periodicity >
   13820:	7d22      	ldrb	r2, [r4, #20]
				      cpr->interval_max)) ||
   13822:	4293      	cmp	r3, r2
   13824:	d358      	bcc.n	138d8 <isr_rx_conn_pkt_ctrl+0x56c>
				conn->llcp_conn_param.interval = cpr->interval_min;
   13826:	f8a5 00c4 	strh.w	r0, [r5, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   1382a:	8a23      	ldrh	r3, [r4, #16]
   1382c:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   13830:	8a62      	ldrh	r2, [r4, #18]
   13832:	b293      	uxth	r3, r2
   13834:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
					cpr->preferred_periodicity;
   13838:	7d22      	ldrb	r2, [r4, #20]
				conn->llcp_conn_param.preferred_periodicity =
   1383a:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
					cpr->reference_conn_event_count;
   1383e:	f8b4 2015 	ldrh.w	r2, [r4, #21]
				conn->llcp_conn_param.reference_conn_event_count =
   13842:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   13846:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   1384a:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   1384e:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   13852:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   13856:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   1385a:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   1385e:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   13862:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   13866:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   1386a:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   1386e:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   13872:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				     conn->conn_interval) ||
   13876:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   1387a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
				if ((conn->llcp_conn_param.interval !=
   1387c:	4291      	cmp	r1, r2
   1387e:	d10f      	bne.n	138a0 <isr_rx_conn_pkt_ctrl+0x534>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   13880:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   13882:	f240 42e2 	movw	r2, #1250	; 0x4e2
   13886:	fb02 f201 	mul.w	r2, r2, r1
   1388a:	f242 7110 	movw	r1, #10000	; 0x2710
   1388e:	fb01 2303 	mla	r3, r1, r3, r2
   13892:	3b01      	subs	r3, #1
   13894:	fb93 f3f2 	sdiv	r3, r3, r2
   13898:	b29b      	uxth	r3, r3
				     conn->supervision_reload)) {
   1389a:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
				     conn->latency) ||
   1389c:	4293      	cmp	r3, r2
   1389e:	d02c      	beq.n	138fa <isr_rx_conn_pkt_ctrl+0x58e>
					if (conn->pause_tx) {
   138a0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   138a4:	f013 0f08 	tst.w	r3, #8
   138a8:	d01d      	beq.n	138e6 <isr_rx_conn_pkt_ctrl+0x57a>
						conn->llcp_conn_param.state =
   138aa:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   138ae:	2202      	movs	r2, #2
   138b0:	f362 0302 	bfi	r3, r2, #0, #3
   138b4:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.ack--;
   138b8:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   138bc:	3b01      	subs	r3, #1
   138be:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
				if (_radio.conn_upd == 0) {
   138c2:	4b2d      	ldr	r3, [pc, #180]	; (13978 <isr_rx_conn_pkt_ctrl+0x60c>)
   138c4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   138c8:	2b00      	cmp	r3, #0
   138ca:	f040 8580 	bne.w	143ce <isr_rx_conn_pkt_ctrl+0x1062>
					_radio.conn_upd = conn;
   138ce:	4b2a      	ldr	r3, [pc, #168]	; (13978 <isr_rx_conn_pkt_ctrl+0x60c>)
   138d0:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   138d4:	2400      	movs	r4, #0
   138d6:	e583      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
					reject_ext_ind_send(conn,
   138d8:	221e      	movs	r2, #30
   138da:	210f      	movs	r1, #15
   138dc:	4628      	mov	r0, r5
   138de:	f7fe f9fd 	bl	11cdc <reject_ext_ind_send>
	u8_t nack = 0;
   138e2:	2400      	movs	r4, #0
					break;
   138e4:	e57c      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
						*rx_enqueue = 1;
   138e6:	2301      	movs	r3, #1
   138e8:	703b      	strb	r3, [r7, #0]
						conn->llcp_conn_param.state =
   138ea:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   138ee:	2203      	movs	r2, #3
   138f0:	f362 0302 	bfi	r3, r2, #0, #3
   138f4:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   138f8:	e7de      	b.n	138b8 <isr_rx_conn_pkt_ctrl+0x54c>
					conn->llcp_conn_param.status = 0;
   138fa:	2300      	movs	r3, #0
   138fc:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
					conn->llcp_conn_param.cmd = 0;
   13900:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.state =
   13904:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   13908:	2201      	movs	r2, #1
   1390a:	f362 0302 	bfi	r3, r2, #0, #3
   1390e:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   13912:	e7d1      	b.n	138b8 <isr_rx_conn_pkt_ctrl+0x54c>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   13914:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
			    _radio.conn_curr->llcp_conn_param.ack) ||
   13918:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   1391c:	429a      	cmp	r2, r3
   1391e:	d007      	beq.n	13930 <isr_rx_conn_pkt_ctrl+0x5c4>
			   (_radio.conn_curr->llcp_conn_param.state ==
   13920:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
			    _radio.conn_curr->llcp_conn_param.ack) ||
   13924:	f013 0307 	ands.w	r3, r3, #7
   13928:	d002      	beq.n	13930 <isr_rx_conn_pkt_ctrl+0x5c4>
			    LLCP_CPR_STATE_REQ) ||
   1392a:	2b04      	cmp	r3, #4
   1392c:	f040 8089 	bne.w	13a42 <isr_rx_conn_pkt_ctrl+0x6d6>
			if ((cpr->interval_min < 6) ||
   13930:	89a1      	ldrh	r1, [r4, #12]
   13932:	b28a      	uxth	r2, r1
   13934:	2a05      	cmp	r2, #5
   13936:	d917      	bls.n	13968 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   13938:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   1393a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1393e:	d813      	bhi.n	13968 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   13940:	429a      	cmp	r2, r3
   13942:	d811      	bhi.n	13968 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->latency > 499) ||
   13944:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   13946:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1394a:	d20d      	bcs.n	13968 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   1394c:	8a60      	ldrh	r0, [r4, #18]
			    (cpr->latency > 499) ||
   1394e:	2809      	cmp	r0, #9
   13950:	d90a      	bls.n	13968 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13952:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   13956:	d807      	bhi.n	13968 <isr_rx_conn_pkt_ctrl+0x5fc>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   13958:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   1395c:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   13960:	da02      	bge.n	13968 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   13962:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   13964:	4293      	cmp	r3, r2
   13966:	d209      	bcs.n	1397c <isr_rx_conn_pkt_ctrl+0x610>
				reject_ext_ind_send(conn,
   13968:	221e      	movs	r2, #30
   1396a:	210f      	movs	r1, #15
   1396c:	4628      	mov	r0, r5
   1396e:	f7fe f9b5 	bl	11cdc <reject_ext_ind_send>
	u8_t nack = 0;
   13972:	2400      	movs	r4, #0
				break;
   13974:	e534      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
   13976:	bf00      	nop
   13978:	20000ff4 	.word	0x20000ff4
			conn->llcp_conn_param.interval = cpr->interval_min;
   1397c:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   13980:	8a23      	ldrh	r3, [r4, #16]
   13982:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   13986:	8a62      	ldrh	r2, [r4, #18]
   13988:	b293      	uxth	r3, r2
   1398a:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   1398e:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   13990:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   13994:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   13998:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   1399c:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   139a0:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   139a4:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   139a8:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   139ac:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   139b0:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   139b4:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   139b8:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   139bc:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   139c0:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   139c4:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   139c8:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			     conn->conn_interval) ||
   139cc:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   139d0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			if ((conn->llcp_conn_param.interval !=
   139d2:	4291      	cmp	r1, r2
   139d4:	d013      	beq.n	139fe <isr_rx_conn_pkt_ctrl+0x692>
				*rx_enqueue = 1;
   139d6:	2301      	movs	r3, #1
   139d8:	703b      	strb	r3, [r7, #0]
				conn->llcp_conn_param.state =
   139da:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   139de:	2203      	movs	r2, #3
   139e0:	f362 0302 	bfi	r3, r2, #0, #3
   139e4:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   139e8:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   139ec:	3b01      	subs	r3, #1
   139ee:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   139f2:	4bcb      	ldr	r3, [pc, #812]	; (13d20 <isr_rx_conn_pkt_ctrl+0x9b4>)
   139f4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   139f8:	b1f3      	cbz	r3, 13a38 <isr_rx_conn_pkt_ctrl+0x6cc>
	u8_t nack = 0;
   139fa:	2400      	movs	r4, #0
   139fc:	e4f0      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   139fe:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   13a00:	f240 42e2 	movw	r2, #1250	; 0x4e2
   13a04:	fb02 f201 	mul.w	r2, r2, r1
   13a08:	f242 7110 	movw	r1, #10000	; 0x2710
   13a0c:	fb01 2303 	mla	r3, r1, r3, r2
   13a10:	3b01      	subs	r3, #1
   13a12:	fb93 f3f2 	sdiv	r3, r3, r2
   13a16:	b29b      	uxth	r3, r3
			     conn->supervision_reload)) {
   13a18:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
			    (conn->llcp_conn_param.latency != conn->latency) ||
   13a1a:	4293      	cmp	r3, r2
   13a1c:	d1db      	bne.n	139d6 <isr_rx_conn_pkt_ctrl+0x66a>
				conn->llcp_conn_param.status = 0;
   13a1e:	2300      	movs	r3, #0
   13a20:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   13a24:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.state =
   13a28:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   13a2c:	2201      	movs	r2, #1
   13a2e:	f362 0302 	bfi	r3, r2, #0, #3
   13a32:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   13a36:	e7d7      	b.n	139e8 <isr_rx_conn_pkt_ctrl+0x67c>
				_radio.conn_upd = conn;
   13a38:	4bb9      	ldr	r3, [pc, #740]	; (13d20 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13a3a:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   13a3e:	2400      	movs	r4, #0
   13a40:	e4ce      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(0);
   13a42:	4040      	eors	r0, r0
   13a44:	f380 8811 	msr	BASEPRI, r0
   13a48:	f04f 0004 	mov.w	r0, #4
   13a4c:	df02      	svc	2
		if (!_radio.conn_curr->role &&
   13a4e:	2b00      	cmp	r3, #0
   13a50:	f2c0 84c0 	blt.w	143d4 <isr_rx_conn_pkt_ctrl+0x1068>
		    (_radio.conn_curr->llcp_conn_param.req !=
   13a54:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		     _radio.conn_curr->llcp_conn_param.ack) &&
   13a58:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		if (!_radio.conn_curr->role &&
   13a5c:	429a      	cmp	r2, r3
   13a5e:	f000 84bc 	beq.w	143da <isr_rx_conn_pkt_ctrl+0x106e>
		    (_radio.conn_curr->llcp_conn_param.state ==
   13a62:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   13a66:	f003 0307 	and.w	r3, r3, #7
		     _radio.conn_curr->llcp_conn_param.ack) &&
   13a6a:	2b04      	cmp	r3, #4
   13a6c:	d001      	beq.n	13a72 <isr_rx_conn_pkt_ctrl+0x706>
	u8_t nack = 0;
   13a6e:	2400      	movs	r4, #0
   13a70:	e4b6      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
			if ((cpr->interval_min < 6) ||
   13a72:	89a2      	ldrh	r2, [r4, #12]
   13a74:	2a05      	cmp	r2, #5
   13a76:	d917      	bls.n	13aa8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   13a78:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   13a7a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   13a7e:	d813      	bhi.n	13aa8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   13a80:	429a      	cmp	r2, r3
   13a82:	d811      	bhi.n	13aa8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->latency > 499) ||
   13a84:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   13a86:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   13a8a:	d20d      	bcs.n	13aa8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13a8c:	8a61      	ldrh	r1, [r4, #18]
			    (cpr->latency > 499) ||
   13a8e:	2909      	cmp	r1, #9
   13a90:	d90a      	bls.n	13aa8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13a92:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   13a96:	d807      	bhi.n	13aa8 <isr_rx_conn_pkt_ctrl+0x73c>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   13a98:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13a9c:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   13aa0:	da02      	bge.n	13aa8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   13aa2:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   13aa4:	4293      	cmp	r3, r2
   13aa6:	d206      	bcs.n	13ab6 <isr_rx_conn_pkt_ctrl+0x74a>
				reject_ext_ind_send(conn,
   13aa8:	221e      	movs	r2, #30
   13aaa:	2110      	movs	r1, #16
   13aac:	4628      	mov	r0, r5
   13aae:	f7fe f915 	bl	11cdc <reject_ext_ind_send>
	u8_t nack = 0;
   13ab2:	2400      	movs	r4, #0
				break;
   13ab4:	e494      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->procedure_expire = 0;
   13ab6:	2300      	movs	r3, #0
   13ab8:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   13abc:	89a2      	ldrh	r2, [r4, #12]
   13abe:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   13ac2:	8a22      	ldrh	r2, [r4, #16]
   13ac4:	f8a5 20c6 	strh.w	r2, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   13ac8:	8a62      	ldrh	r2, [r4, #18]
   13aca:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   13ace:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   13ad0:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   13ad4:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   13ad8:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   13adc:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   13ae0:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   13ae4:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   13ae8:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   13aec:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   13af0:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   13af4:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   13af8:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   13afc:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   13b00:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   13b04:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   13b08:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   13b0c:	f895 20c2 	ldrb.w	r2, [r5, #194]	; 0xc2
   13b10:	2101      	movs	r1, #1
   13b12:	f361 0202 	bfi	r2, r1, #0, #3
   13b16:	f885 20c2 	strb.w	r2, [r5, #194]	; 0xc2
	u8_t nack = 0;
   13b1a:	461c      	mov	r4, r3
   13b1c:	e460      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   13b1e:	4b80      	ldr	r3, [pc, #512]	; (13d20 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13b20:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13b24:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   13b28:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   13b2c:	4291      	cmp	r1, r2
   13b2e:	d112      	bne.n	13b56 <isr_rx_conn_pkt_ctrl+0x7ea>
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   13b30:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
		   _radio.conn_curr->llcp_conn_param.req) {
   13b34:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   13b38:	4291      	cmp	r1, r2
   13b3a:	d14c      	bne.n	13bd6 <isr_rx_conn_pkt_ctrl+0x86a>
	} else if (_radio.conn_curr->llcp_length.ack !=
   13b3c:	f893 10e9 	ldrb.w	r1, [r3, #233]	; 0xe9
		   _radio.conn_curr->llcp_length.req) {
   13b40:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   13b44:	4291      	cmp	r1, r2
   13b46:	f000 80ef 	beq.w	13d28 <isr_rx_conn_pkt_ctrl+0x9bc>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   13b4a:	7b21      	ldrb	r1, [r4, #12]
   13b4c:	2914      	cmp	r1, #20
   13b4e:	f000 80cb 	beq.w	13ce8 <isr_rx_conn_pkt_ctrl+0x97c>
	u8_t nack = 0;
   13b52:	2400      	movs	r4, #0
   13b54:	e444      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   13b56:	7b23      	ldrb	r3, [r4, #12]
   13b58:	2b16      	cmp	r3, #22
   13b5a:	d001      	beq.n	13b60 <isr_rx_conn_pkt_ctrl+0x7f4>
	u8_t nack = 0;
   13b5c:	2400      	movs	r4, #0
   13b5e:	e43f      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		if (rej_ext_ind->error_code != 0x23) {
   13b60:	7b63      	ldrb	r3, [r4, #13]
   13b62:	2b23      	cmp	r3, #35	; 0x23
   13b64:	d017      	beq.n	13b96 <isr_rx_conn_pkt_ctrl+0x82a>
			_radio.conn_curr->llcp_phy.ack =
   13b66:	4b6e      	ldr	r3, [pc, #440]	; (13d20 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13b68:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_phy.req;
   13b6c:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
			_radio.conn_curr->llcp_phy.ack =
   13b70:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   13b74:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   13b78:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   13b7c:	f3c1 01c2 	ubfx	r1, r1, #3, #3
			_radio.conn_curr->phy_tx_time =
   13b80:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
   13b84:	f361 0002 	bfi	r0, r1, #0, #3
   13b88:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   13b8c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13b90:	2200      	movs	r2, #0
   13b92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   13b96:	4b62      	ldr	r3, [pc, #392]	; (13d20 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13b98:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13b9c:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   13ba0:	f013 0f02 	tst.w	r3, #2
   13ba4:	f000 841c 	beq.w	143e0 <isr_rx_conn_pkt_ctrl+0x1074>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13ba8:	230c      	movs	r3, #12
   13baa:	7123      	strb	r3, [r4, #4]
		p->status = rej_ext_ind->error_code;
   13bac:	7b63      	ldrb	r3, [r4, #13]
   13bae:	72e3      	strb	r3, [r4, #11]
		p->tx = _radio.conn_curr->phy_tx;
   13bb0:	4a5b      	ldr	r2, [pc, #364]	; (13d20 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13bb2:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13bb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   13bba:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13bbe:	7323      	strb	r3, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   13bc0:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13bc4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   13bc8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13bcc:	7363      	strb	r3, [r4, #13]
		*rx_enqueue = 1;
   13bce:	2301      	movs	r3, #1
   13bd0:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13bd2:	2400      	movs	r4, #0
   13bd4:	e404      	b.n	133e0 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   13bd6:	7b23      	ldrb	r3, [r4, #12]
   13bd8:	2b0f      	cmp	r3, #15
   13bda:	d002      	beq.n	13be2 <isr_rx_conn_pkt_ctrl+0x876>
	u8_t nack = 0;
   13bdc:	2400      	movs	r4, #0
   13bde:	f7ff bbff 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
	conn = _radio.conn_curr;
   13be2:	4b4f      	ldr	r3, [pc, #316]	; (13d20 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13be4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   13be8:	f993 201d 	ldrsb.w	r2, [r3, #29]
   13bec:	2a00      	cmp	r2, #0
   13bee:	db02      	blt.n	13bf6 <isr_rx_conn_pkt_ctrl+0x88a>
   13bf0:	7b62      	ldrb	r2, [r4, #13]
   13bf2:	2a1a      	cmp	r2, #26
   13bf4:	d037      	beq.n	13c66 <isr_rx_conn_pkt_ctrl+0x8fa>
	else if (rej_ext_ind->error_code != 0x23) {
   13bf6:	7b62      	ldrb	r2, [r4, #13]
   13bf8:	2a23      	cmp	r2, #35	; 0x23
   13bfa:	d012      	beq.n	13c22 <isr_rx_conn_pkt_ctrl+0x8b6>
		LL_ASSERT(_radio.conn_upd == conn);
   13bfc:	4a48      	ldr	r2, [pc, #288]	; (13d20 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13bfe:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   13c02:	4293      	cmp	r3, r2
   13c04:	d166      	bne.n	13cd4 <isr_rx_conn_pkt_ctrl+0x968>
		_radio.conn_upd = NULL;
   13c06:	2200      	movs	r2, #0
   13c08:	4945      	ldr	r1, [pc, #276]	; (13d20 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13c0a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			conn->llcp_conn_param.req;
   13c0e:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
		conn->llcp_conn_param.ack =
   13c12:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   13c16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (conn->role) {
   13c1a:	f993 201d 	ldrsb.w	r2, [r3, #29]
   13c1e:	2a00      	cmp	r2, #0
   13c20:	db5e      	blt.n	13ce0 <isr_rx_conn_pkt_ctrl+0x974>
	if (!conn->llcp_conn_param.cmd) {
   13c22:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   13c26:	f012 0f08 	tst.w	r2, #8
   13c2a:	f000 83dc 	beq.w	143e6 <isr_rx_conn_pkt_ctrl+0x107a>
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13c2e:	2208      	movs	r2, #8
   13c30:	7122      	strb	r2, [r4, #4]
	cp->status = rej_ext_ind->error_code;
   13c32:	7b62      	ldrb	r2, [r4, #13]
   13c34:	72e2      	strb	r2, [r4, #11]
	cp->interval = conn->conn_interval;
   13c36:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   13c38:	81a2      	strh	r2, [r4, #12]
	cp->latency = conn->latency;
   13c3a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   13c3c:	81e2      	strh	r2, [r4, #14]
	cp->timeout = conn->supervision_reload *
   13c3e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		      conn->conn_interval * 125 / 1000;
   13c40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   13c42:	fb03 f302 	mul.w	r3, r3, r2
		      conn->conn_interval * 125 / 1000;
   13c46:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   13c4a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   13c4e:	4a35      	ldr	r2, [pc, #212]	; (13d24 <isr_rx_conn_pkt_ctrl+0x9b8>)
   13c50:	fb82 1203 	smull	r1, r2, r2, r3
   13c54:	17db      	asrs	r3, r3, #31
	cp->timeout = conn->supervision_reload *
   13c56:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
   13c5a:	8223      	strh	r3, [r4, #16]
	*rx_enqueue = 1;
   13c5c:	2301      	movs	r3, #1
   13c5e:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13c60:	2400      	movs	r4, #0
   13c62:	f7ff bbbd 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13c66:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   13c6a:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
   13c6e:	4282      	cmp	r2, r0
   13c70:	d12a      	bne.n	13cc8 <isr_rx_conn_pkt_ctrl+0x95c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13c72:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   13c76:	2105      	movs	r1, #5
   13c78:	f361 0202 	bfi	r2, r1, #0, #3
   13c7c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   13c80:	2501      	movs	r5, #1
   13c82:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   13c86:	2400      	movs	r4, #0
   13c88:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   13c8c:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   13c90:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   13c94:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   13c98:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   13c9c:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   13ca0:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   13ca4:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   13ca8:	f365 0101 	bfi	r1, r5, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   13cac:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   13cb0:	406a      	eors	r2, r5
   13cb2:	f362 0182 	bfi	r1, r2, #2, #1
   13cb6:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   13cba:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
		conn->llcp_ack--;
   13cbe:	3801      	subs	r0, #1
   13cc0:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
   13cc4:	f7ff bb8c 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13cc8:	4040      	eors	r0, r0
   13cca:	f380 8811 	msr	BASEPRI, r0
   13cce:	f04f 0004 	mov.w	r0, #4
   13cd2:	df02      	svc	2
		LL_ASSERT(_radio.conn_upd == conn);
   13cd4:	4040      	eors	r0, r0
   13cd6:	f380 8811 	msr	BASEPRI, r0
   13cda:	f04f 0004 	mov.w	r0, #4
   13cde:	df02      	svc	2
			    conn->llcp_conn_param.ticks_to_offset_next;
   13ce0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
			conn->slave.ticks_to_offset =
   13ce4:	671a      	str	r2, [r3, #112]	; 0x70
   13ce6:	e79c      	b.n	13c22 <isr_rx_conn_pkt_ctrl+0x8b6>
		conn->llcp_length.ack = conn->llcp_length.req;
   13ce8:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->procedure_expire = 0;
   13cec:	2200      	movs	r2, #0
   13cee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		conn->pause_tx = 0;
   13cf2:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
   13cf6:	f362 01c3 	bfi	r1, r2, #3, #1
   13cfa:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   13cfe:	2109      	movs	r1, #9
   13d00:	7261      	strb	r1, [r4, #9]
		pdu_data_rx->payload.llctrl.opcode =
   13d02:	2115      	movs	r1, #21
   13d04:	72e1      	strb	r1, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   13d06:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   13d08:	81a1      	strh	r1, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   13d0a:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
   13d0c:	8221      	strh	r1, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   13d0e:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   13d10:	81e1      	strh	r1, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   13d12:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   13d14:	8263      	strh	r3, [r4, #18]
		*rx_enqueue = 1;
   13d16:	2301      	movs	r3, #1
   13d18:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13d1a:	4614      	mov	r4, r2
   13d1c:	f7ff bb60 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
   13d20:	20000ff4 	.word	0x20000ff4
   13d24:	10624dd3 	.word	0x10624dd3
		switch (rej_ext_ind->reject_opcode) {
   13d28:	7b22      	ldrb	r2, [r4, #12]
   13d2a:	2a03      	cmp	r2, #3
   13d2c:	f040 835e 	bne.w	143ec <isr_rx_conn_pkt_ctrl+0x1080>
			_radio.conn_curr->pause_rx = 0;
   13d30:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13d34:	f36f 0282 	bfc	r2, #2, #1
   13d38:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   13d3c:	4bcb      	ldr	r3, [pc, #812]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   13d3e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13d42:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13d46:	f36f 01c3 	bfc	r1, #3, #1
   13d4a:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   13d4e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13d52:	2300      	movs	r3, #0
   13d54:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
			pdu_rx->payload.llctrl.opcode =
   13d58:	220d      	movs	r2, #13
   13d5a:	72e2      	strb	r2, [r4, #11]
				rej_ext_ind->error_code;
   13d5c:	7b62      	ldrb	r2, [r4, #13]
			pdu_rx->payload.llctrl.ctrldata.reject_ind.error_code =
   13d5e:	7322      	strb	r2, [r4, #12]
			*rx_enqueue = 1;
   13d60:	2201      	movs	r2, #1
   13d62:	703a      	strb	r2, [r7, #0]
	u8_t nack = 0;
   13d64:	461c      	mov	r4, r3
   13d66:	f7ff bb3b 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		ping_resp_send(_radio.conn_curr);
   13d6a:	4628      	mov	r0, r5
   13d6c:	f7fd ff76 	bl	11c5c <ping_resp_send>
	u8_t nack = 0;
   13d70:	2400      	movs	r4, #0
		break;
   13d72:	f7ff bb35 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->procedure_expire = 0;
   13d76:	2400      	movs	r4, #0
   13d78:	f8a5 4044 	strh.w	r4, [r5, #68]	; 0x44
		break;
   13d7c:	f7ff bb30 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_length.req !=
   13d80:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
			   _radio.conn_curr->llcp_length.ack) {
   13d84:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
		} else if (_radio.conn_curr->llcp_length.req !=
   13d88:	4293      	cmp	r3, r2
   13d8a:	d014      	beq.n	13db6 <isr_rx_conn_pkt_ctrl+0xa4a>
			_radio.conn_curr->llcp_length.ack =
   13d8c:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   13d90:	4bb6      	ldr	r3, [pc, #728]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   13d92:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13d96:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13d9a:	f36f 02c3 	bfc	r2, #3, #1
   13d9e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			*rx_enqueue = 1;
   13da2:	2301      	movs	r3, #1
   13da4:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   13da6:	4bb1      	ldr	r3, [pc, #708]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   13da8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13dac:	2400      	movs	r4, #0
   13dae:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   13db2:	f7ff bb15 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_phy.req !=
   13db6:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			   _radio.conn_curr->llcp_phy.ack) {
   13dba:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		} else if (_radio.conn_curr->llcp_phy.req !=
   13dbe:	4293      	cmp	r3, r2
   13dc0:	d02a      	beq.n	13e18 <isr_rx_conn_pkt_ctrl+0xaac>
			_radio.conn_curr->llcp_phy.ack =
   13dc2:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   13dc6:	49a9      	ldr	r1, [pc, #676]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   13dc8:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   13dcc:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   13dd0:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   13dd4:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   13dd8:	f362 0002 	bfi	r0, r2, #0, #3
   13ddc:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   13de0:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13de4:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   13de8:	f013 0f02 	tst.w	r3, #2
   13dec:	d0db      	beq.n	13da6 <isr_rx_conn_pkt_ctrl+0xa3a>
				radio_pdu_node_rx->hdr.type =
   13dee:	230c      	movs	r3, #12
   13df0:	7123      	strb	r3, [r4, #4]
				p->status = 0;
   13df2:	2300      	movs	r3, #0
   13df4:	72e3      	strb	r3, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   13df6:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   13dfe:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13e02:	7323      	strb	r3, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   13e04:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13e08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   13e0c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13e10:	7363      	strb	r3, [r4, #13]
				*rx_enqueue = 1;
   13e12:	2301      	movs	r3, #1
   13e14:	703b      	strb	r3, [r7, #0]
   13e16:	e7c6      	b.n	13da6 <isr_rx_conn_pkt_ctrl+0xa3a>
			switch (llctrl->ctrldata.unknown_rsp.type) {
   13e18:	7b23      	ldrb	r3, [r4, #12]
   13e1a:	2b12      	cmp	r3, #18
   13e1c:	d0c3      	beq.n	13da6 <isr_rx_conn_pkt_ctrl+0xa3a>
				*rx_enqueue = 1;
   13e1e:	2301      	movs	r3, #1
   13e20:	703b      	strb	r3, [r7, #0]
				break;
   13e22:	e7c0      	b.n	13da6 <isr_rx_conn_pkt_ctrl+0xa3a>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13e24:	4b91      	ldr	r3, [pc, #580]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   13e26:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13e2a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   13e2c:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   13e2e:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   13e32:	f8b0 8034 	ldrh.w	r8, [r0, #52]	; 0x34
	    ((_radio.conn_curr->llcp_length.req ==
   13e36:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	      _radio.conn_curr->llcp_length.ack) &&
   13e3a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	if (/* Local idle, and Peer request then complete the Peer procedure
   13e3e:	429a      	cmp	r2, r3
   13e40:	d020      	beq.n	13e84 <isr_rx_conn_pkt_ctrl+0xb18>
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   13e42:	429a      	cmp	r2, r3
   13e44:	d007      	beq.n	13e56 <isr_rx_conn_pkt_ctrl+0xaea>
	     ((((_radio.conn_curr->llcp_length.state ==
   13e46:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
		 LLCP_LENGTH_STATE_REQ) ||
   13e4a:	f003 0303 	and.w	r3, r3, #3
	      _radio.conn_curr->llcp_length.ack) &&
   13e4e:	2b01      	cmp	r3, #1
   13e50:	d960      	bls.n	13f14 <isr_rx_conn_pkt_ctrl+0xba8>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   13e52:	2b02      	cmp	r3, #2
   13e54:	d062      	beq.n	13f1c <isr_rx_conn_pkt_ctrl+0xbb0>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   13e56:	78f3      	ldrb	r3, [r6, #3]
   13e58:	2b15      	cmp	r3, #21
   13e5a:	f040 80cb 	bne.w	13ff4 <isr_rx_conn_pkt_ctrl+0xc88>
	u8_t nack = 0;
   13e5e:	2400      	movs	r4, #0
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   13e60:	78f3      	ldrb	r3, [r6, #3]
	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
   13e62:	2b14      	cmp	r3, #20
   13e64:	f47f aabc 	bne.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   13e68:	2c00      	cmp	r4, #0
   13e6a:	f47f aab9 	bne.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		length_resp_send(_radio.conn_curr, eff_rx_octets, eff_rx_time,
   13e6e:	4b7f      	ldr	r3, [pc, #508]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   13e70:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13e74:	f8cd 8000 	str.w	r8, [sp]
   13e78:	462b      	mov	r3, r5
   13e7a:	464a      	mov	r2, r9
   13e7c:	f7fd ff0a 	bl	11c94 <length_resp_send>
		break;
   13e80:	f7ff baae 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
	     (pdu_data_rx->payload.llctrl.opcode ==
   13e84:	78f4      	ldrb	r4, [r6, #3]
	      _radio.conn_curr->llcp_length.ack) &&
   13e86:	2c14      	cmp	r4, #20
   13e88:	d1db      	bne.n	13e42 <isr_rx_conn_pkt_ctrl+0xad6>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   13e8a:	88b3      	ldrh	r3, [r6, #4]
   13e8c:	2b1a      	cmp	r3, #26
   13e8e:	d903      	bls.n	13e98 <isr_rx_conn_pkt_ctrl+0xb2c>
			eff_tx_octets = min(lr->max_rx_octets,
   13e90:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   13e92:	429d      	cmp	r5, r3
   13e94:	bf28      	it	cs
   13e96:	461d      	movcs	r5, r3
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   13e98:	f8b6 a008 	ldrh.w	sl, [r6, #8]
   13e9c:	f1ba 0f1a 	cmp.w	sl, #26
   13ea0:	d942      	bls.n	13f28 <isr_rx_conn_pkt_ctrl+0xbbc>
			eff_rx_octets = min(lr->max_tx_octets,
   13ea2:	f1ba 0f1b 	cmp.w	sl, #27
   13ea6:	bf28      	it	cs
   13ea8:	f04f 0a1b 	movcs.w	sl, #27
		if (lr->max_rx_time >=
   13eac:	88f3      	ldrh	r3, [r6, #6]
   13eae:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13eb2:	d304      	bcc.n	13ebe <isr_rx_conn_pkt_ctrl+0xb52>
			eff_tx_time = min(lr->max_rx_time,
   13eb4:	f8b0 8032 	ldrh.w	r8, [r0, #50]	; 0x32
   13eb8:	4598      	cmp	r8, r3
   13eba:	bf28      	it	cs
   13ebc:	4698      	movcs	r8, r3
		if (lr->max_tx_time >=
   13ebe:	8973      	ldrh	r3, [r6, #10]
   13ec0:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13ec4:	d305      	bcc.n	13ed2 <isr_rx_conn_pkt_ctrl+0xb66>
			eff_rx_time = min(lr->max_tx_time,
   13ec6:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13eca:	bf28      	it	cs
   13ecc:	f44f 73a4 	movcs.w	r3, #328	; 0x148
   13ed0:	4699      	mov	r9, r3
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   13ed2:	4551      	cmp	r1, sl
   13ed4:	d066      	beq.n	13fa4 <isr_rx_conn_pkt_ctrl+0xc38>
	if (_radio.packet_rx_acquire >=
   13ed6:	4b65      	ldr	r3, [pc, #404]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   13ed8:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   13edc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13ee0:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   13ee2:	429a      	cmp	r2, r3
   13ee4:	d322      	bcc.n	13f2c <isr_rx_conn_pkt_ctrl+0xbc0>
			_radio.packet_rx_last);
   13ee6:	4b61      	ldr	r3, [pc, #388]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   13ee8:	f893 413d 	ldrb.w	r4, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   13eec:	1b14      	subs	r4, r2, r4
   13eee:	b2e4      	uxtb	r4, r4
			free_count_rx = packet_rx_acquired_count_get()
   13ef0:	b2a4      	uxth	r4, r4
				+ mem_free_count_get(_radio.pkt_rx_data_free);
   13ef2:	4b5e      	ldr	r3, [pc, #376]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   13ef4:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   13ef8:	f7fb fa7b 	bl	f3f2 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get()
   13efc:	1823      	adds	r3, r4, r0
   13efe:	b29b      	uxth	r3, r3
			LL_ASSERT(free_count_rx <= 0xFF);
   13f00:	2bff      	cmp	r3, #255	; 0xff
   13f02:	d81d      	bhi.n	13f40 <isr_rx_conn_pkt_ctrl+0xbd4>
			if (_radio.packet_rx_data_count == free_count_rx) {
   13f04:	4a59      	ldr	r2, [pc, #356]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   13f06:	f892 2136 	ldrb.w	r2, [r2, #310]	; 0x136
   13f0a:	4293      	cmp	r3, r2
   13f0c:	d01e      	beq.n	13f4c <isr_rx_conn_pkt_ctrl+0xbe0>
   13f0e:	4651      	mov	r1, sl
				nack = 1;
   13f10:	2401      	movs	r4, #1
   13f12:	e7a5      	b.n	13e60 <isr_rx_conn_pkt_ctrl+0xaf4>
	       (pdu_data_rx->payload.llctrl.opcode ==
   13f14:	78f2      	ldrb	r2, [r6, #3]
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
   13f16:	2a14      	cmp	r2, #20
   13f18:	d19b      	bne.n	13e52 <isr_rx_conn_pkt_ctrl+0xae6>
   13f1a:	e7b6      	b.n	13e8a <isr_rx_conn_pkt_ctrl+0xb1e>
	       ((pdu_data_rx->payload.llctrl.opcode ==
   13f1c:	78f3      	ldrb	r3, [r6, #3]
		 PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) ||
   13f1e:	3b14      	subs	r3, #20
   13f20:	b2db      	uxtb	r3, r3
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   13f22:	2b01      	cmp	r3, #1
   13f24:	d897      	bhi.n	13e56 <isr_rx_conn_pkt_ctrl+0xaea>
   13f26:	e7b0      	b.n	13e8a <isr_rx_conn_pkt_ctrl+0xb1e>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13f28:	468a      	mov	sl, r1
   13f2a:	e7bf      	b.n	13eac <isr_rx_conn_pkt_ctrl+0xb40>
		return (_radio.packet_rx_count -
   13f2c:	4b4f      	ldr	r3, [pc, #316]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   13f2e:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   13f32:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   13f36:	1ae4      	subs	r4, r4, r3
			_radio.packet_rx_last +
   13f38:	fa52 f484 	uxtab	r4, r2, r4
   13f3c:	b2e4      	uxtb	r4, r4
   13f3e:	e7d7      	b.n	13ef0 <isr_rx_conn_pkt_ctrl+0xb84>
			LL_ASSERT(free_count_rx <= 0xFF);
   13f40:	4040      	eors	r0, r0
   13f42:	f380 8811 	msr	BASEPRI, r0
   13f46:	f04f 0004 	mov.w	r0, #4
   13f4a:	df02      	svc	2
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13f4c:	4b47      	ldr	r3, [pc, #284]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   13f4e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f52:	85d5      	strh	r5, [r2, #46]	; 0x2e
				_radio.conn_curr->llcp_length.rx_octets =
   13f54:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f58:	f8a2 a0ec 	strh.w	sl, [r2, #236]	; 0xec
				_radio.conn_curr->llcp_length.tx_octets =
   13f5c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f60:	f8a2 50ee 	strh.w	r5, [r2, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   13f64:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f68:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   13f6c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f70:	f8a2 90f0 	strh.w	r9, [r2, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   13f74:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f78:	f8a2 80f2 	strh.w	r8, [r2, #242]	; 0xf2
				_radio.conn_curr->llcp_length.ack =
   13f7c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
					(_radio.conn_curr->llcp_length.req - 1);
   13f80:	f891 20e8 	ldrb.w	r2, [r1, #232]	; 0xe8
   13f84:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   13f86:	f881 20e9 	strb.w	r2, [r1, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   13f8a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13f8e:	f891 20ea 	ldrb.w	r2, [r1, #234]	; 0xea
   13f92:	f042 0203 	orr.w	r2, r2, #3
   13f96:	f881 20ea 	strb.w	r2, [r1, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   13f9a:	2203      	movs	r2, #3
   13f9c:	741a      	strb	r2, [r3, #16]
   13f9e:	4651      	mov	r1, sl
	u8_t nack = 0;
   13fa0:	2400      	movs	r4, #0
   13fa2:	e75d      	b.n	13e60 <isr_rx_conn_pkt_ctrl+0xaf4>
			_radio.conn_curr->pause_tx = 0;
   13fa4:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   13fa8:	f36f 03c3 	bfc	r3, #3, #1
   13fac:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13fb0:	4b2e      	ldr	r3, [pc, #184]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   13fb2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13fb6:	85d5      	strh	r5, [r2, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   13fb8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13fbc:	f8a2 9036 	strh.w	r9, [r2, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   13fc0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13fc4:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
			_radio.conn_curr->llcp_length.ack =
   13fc8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_length.req;
   13fcc:	f892 10e8 	ldrb.w	r1, [r2, #232]	; 0xe8
			_radio.conn_curr->llcp_length.ack =
   13fd0:	f882 10e9 	strb.w	r1, [r2, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
   13fd4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13fd8:	2400      	movs	r4, #0
   13fda:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
			lr->max_rx_octets = eff_rx_octets;
   13fde:	f8a6 a004 	strh.w	sl, [r6, #4]
			lr->max_tx_octets = eff_tx_octets;
   13fe2:	8135      	strh	r5, [r6, #8]
			lr->max_rx_time = eff_rx_time;
   13fe4:	f8a6 9006 	strh.w	r9, [r6, #6]
			lr->max_tx_time = eff_tx_time;
   13fe8:	f8a6 800a 	strh.w	r8, [r6, #10]
			*rx_enqueue = 1;
   13fec:	2301      	movs	r3, #1
   13fee:	703b      	strb	r3, [r7, #0]
   13ff0:	4651      	mov	r1, sl
   13ff2:	e735      	b.n	13e60 <isr_rx_conn_pkt_ctrl+0xaf4>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   13ff4:	4040      	eors	r0, r0
   13ff6:	f380 8811 	msr	BASEPRI, r0
   13ffa:	f04f 0004 	mov.w	r0, #4
   13ffe:	df02      	svc	2
		if (_radio.role == ROLE_MASTER) {
   14000:	4b1a      	ldr	r3, [pc, #104]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   14002:	7bdb      	ldrb	r3, [r3, #15]
   14004:	b2db      	uxtb	r3, r3
   14006:	2b04      	cmp	r3, #4
   14008:	d032      	beq.n	14070 <isr_rx_conn_pkt_ctrl+0xd04>
			_radio.conn_curr->llcp_phy.state =
   1400a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1400e:	2202      	movs	r2, #2
   14010:	f362 0301 	bfi	r3, r2, #0, #2
   14014:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			if (_radio.conn_curr->llcp_phy.ack ==
   14018:	4b14      	ldr	r3, [pc, #80]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   1401a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1401e:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
			    _radio.conn_curr->llcp_phy.req) {
   14022:	f893 10f4 	ldrb.w	r1, [r3, #244]	; 0xf4
			if (_radio.conn_curr->llcp_phy.ack ==
   14026:	428a      	cmp	r2, r1
   14028:	f000 8099 	beq.w	1415e <isr_rx_conn_pkt_ctrl+0xdf2>
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   1402c:	4a0f      	ldr	r2, [pc, #60]	; (1406c <isr_rx_conn_pkt_ctrl+0xd00>)
   1402e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   14032:	7b61      	ldrb	r1, [r4, #13]
   14034:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   14038:	f3c3 0582 	ubfx	r5, r3, #2, #3
   1403c:	4029      	ands	r1, r5
   1403e:	f361 0384 	bfi	r3, r1, #2, #3
   14042:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   14046:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1404a:	7b21      	ldrb	r1, [r4, #12]
   1404c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   14050:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   14054:	f361 1347 	bfi	r3, r1, #5, #3
   14058:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			phy_rsp_send(_radio.conn_curr);
   1405c:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   14060:	f7fd fe5c 	bl	11d1c <phy_rsp_send>
	u8_t nack = 0;
   14064:	2400      	movs	r4, #0
   14066:	f7ff b9bb 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
   1406a:	bf00      	nop
   1406c:	20000ff4 	.word	0x20000ff4
			if ((_radio.conn_curr->llcp_phy.ack !=
   14070:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   14074:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   14078:	429a      	cmp	r2, r3
   1407a:	d007      	beq.n	1408c <isr_rx_conn_pkt_ctrl+0xd20>
			    ((_radio.conn_curr->llcp_phy.state ==
   1407c:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
			      LLCP_PHY_STATE_RSP_WAIT) ||
   14080:	f003 0303 	and.w	r3, r3, #3
   14084:	3b01      	subs	r3, #1
   14086:	b2db      	uxtb	r3, r3
			     _radio.conn_curr->llcp_phy.req) &&
   14088:	2b02      	cmp	r3, #2
   1408a:	d913      	bls.n	140b4 <isr_rx_conn_pkt_ctrl+0xd48>
			} else if ((_radio.conn_curr->llcp_req !=
   1408c:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
				    _radio.conn_curr->llcp_ack) ||
   14090:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
			} else if ((_radio.conn_curr->llcp_req !=
   14094:	429a      	cmp	r2, r3
   14096:	d105      	bne.n	140a4 <isr_rx_conn_pkt_ctrl+0xd38>
				   (_radio.conn_curr->llcp_conn_param.req !=
   14098:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
				    _radio.conn_curr->llcp_conn_param.ack)) {
   1409c:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
				    _radio.conn_curr->llcp_ack) ||
   140a0:	429a      	cmp	r2, r3
   140a2:	d00f      	beq.n	140c4 <isr_rx_conn_pkt_ctrl+0xd58>
				reject_ext_ind_send(_radio.conn_curr,
   140a4:	222a      	movs	r2, #42	; 0x2a
   140a6:	2116      	movs	r1, #22
   140a8:	4628      	mov	r0, r5
   140aa:	f7fd fe17 	bl	11cdc <reject_ext_ind_send>
	u8_t nack = 0;
   140ae:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   140b0:	f7ff b996 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   140b4:	2223      	movs	r2, #35	; 0x23
   140b6:	2116      	movs	r1, #22
   140b8:	4628      	mov	r0, r5
   140ba:	f7fd fe0f 	bl	11cdc <reject_ext_ind_send>
	u8_t nack = 0;
   140be:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   140c0:	f7ff b98e 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
				_radio.conn_curr->llcp_phy.state =
   140c4:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   140c8:	f043 0303 	orr.w	r3, r3, #3
   140cc:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   140d0:	4bce      	ldr	r3, [pc, #824]	; (1440c <isr_rx_conn_pkt_ctrl+0x10a0>)
   140d2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   140d6:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
				    _radio.conn_curr->llcp_phy.req) {
   140da:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
				if (_radio.conn_curr->llcp_phy.ack ==
   140de:	428b      	cmp	r3, r1
   140e0:	d01a      	beq.n	14118 <isr_rx_conn_pkt_ctrl+0xdac>
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   140e2:	49ca      	ldr	r1, [pc, #808]	; (1440c <isr_rx_conn_pkt_ctrl+0x10a0>)
   140e4:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
   140e8:	7b62      	ldrb	r2, [r4, #13]
   140ea:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   140ee:	f3c3 0582 	ubfx	r5, r3, #2, #3
   140f2:	402a      	ands	r2, r5
   140f4:	f362 0384 	bfi	r3, r2, #2, #3
   140f8:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   140fc:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
   14100:	7b22      	ldrb	r2, [r4, #12]
   14102:	f891 30f6 	ldrb.w	r3, [r1, #246]	; 0xf6
   14106:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   1410a:	f362 1347 	bfi	r3, r2, #5, #3
   1410e:	f881 30f6 	strb.w	r3, [r1, #246]	; 0xf6
	u8_t nack = 0;
   14112:	2400      	movs	r4, #0
   14114:	f7ff b964 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
					_radio.conn_curr->llcp_phy.ack--;
   14118:	3b01      	subs	r3, #1
   1411a:	f882 30f5 	strb.w	r3, [r2, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   1411e:	4bbb      	ldr	r3, [pc, #748]	; (1440c <isr_rx_conn_pkt_ctrl+0x10a0>)
   14120:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14124:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   14128:	f36f 0141 	bfc	r1, #1, #1
   1412c:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   14130:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_tx;
   14134:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
					_radio.conn_curr->llcp_phy.tx =
   14138:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   1413c:	f360 0184 	bfi	r1, r0, #2, #3
   14140:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
					_radio.conn_curr->llcp_phy.rx =
   14144:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_rx;
   14148:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   1414c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
					_radio.conn_curr->llcp_phy.rx =
   14150:	f893 10f6 	ldrb.w	r1, [r3, #246]	; 0xf6
   14154:	f362 1147 	bfi	r1, r2, #5, #3
   14158:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
   1415c:	e7c1      	b.n	140e2 <isr_rx_conn_pkt_ctrl+0xd76>
				_radio.conn_curr->llcp_phy.ack--;
   1415e:	3a01      	subs	r2, #1
   14160:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->llcp_phy.cmd = 0;
   14164:	4ba9      	ldr	r3, [pc, #676]	; (1440c <isr_rx_conn_pkt_ctrl+0x10a0>)
   14166:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1416a:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   1416e:	f36f 0141 	bfc	r1, #1, #1
   14172:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
				_radio.conn_curr->llcp_phy.tx =
   14176:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_tx;
   1417a:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
				_radio.conn_curr->llcp_phy.tx =
   1417e:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   14182:	f360 0184 	bfi	r1, r0, #2, #3
   14186:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx =
   1418a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_rx;
   1418e:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
   14192:	f3c1 01c2 	ubfx	r1, r1, #3, #3
				_radio.conn_curr->llcp_phy.rx =
   14196:	f892 00f6 	ldrb.w	r0, [r2, #246]	; 0xf6
   1419a:	f361 1047 	bfi	r0, r1, #5, #3
   1419e:	f882 00f6 	strb.w	r0, [r2, #246]	; 0xf6
				_radio.conn_curr->procedure_expire =
   141a2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
					_radio.conn_curr->procedure_reload;
   141a6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
				_radio.conn_curr->procedure_expire =
   141aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   141ae:	e73d      	b.n	1402c <isr_rx_conn_pkt_ctrl+0xcc0>
		if ((_radio.role == ROLE_MASTER) &&
   141b0:	4b96      	ldr	r3, [pc, #600]	; (1440c <isr_rx_conn_pkt_ctrl+0x10a0>)
   141b2:	7bdb      	ldrb	r3, [r3, #15]
   141b4:	b2db      	uxtb	r3, r3
   141b6:	2b04      	cmp	r3, #4
   141b8:	d002      	beq.n	141c0 <isr_rx_conn_pkt_ctrl+0xe54>
	u8_t nack = 0;
   141ba:	2400      	movs	r4, #0
   141bc:	f7ff b910 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		    (_radio.conn_curr->llcp_phy.ack !=
   141c0:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		     _radio.conn_curr->llcp_phy.req) &&
   141c4:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
		if ((_radio.role == ROLE_MASTER) &&
   141c8:	429a      	cmp	r2, r3
   141ca:	f000 8112 	beq.w	143f2 <isr_rx_conn_pkt_ctrl+0x1086>
		    (_radio.conn_curr->llcp_phy.state ==
   141ce:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   141d2:	f003 0303 	and.w	r3, r3, #3
		     _radio.conn_curr->llcp_phy.req) &&
   141d6:	2b02      	cmp	r3, #2
   141d8:	d002      	beq.n	141e0 <isr_rx_conn_pkt_ctrl+0xe74>
	u8_t nack = 0;
   141da:	2400      	movs	r4, #0
   141dc:	f7ff b900 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   141e0:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   141e4:	f043 0303 	orr.w	r3, r3, #3
   141e8:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   141ec:	4a87      	ldr	r2, [pc, #540]	; (1440c <isr_rx_conn_pkt_ctrl+0x10a0>)
   141ee:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   141f2:	7b61      	ldrb	r1, [r4, #13]
   141f4:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   141f8:	f3c3 0582 	ubfx	r5, r3, #2, #3
   141fc:	4029      	ands	r1, r5
   141fe:	f361 0384 	bfi	r3, r1, #2, #3
   14202:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   14206:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1420a:	7b21      	ldrb	r1, [r4, #12]
   1420c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   14210:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   14214:	f361 1347 	bfi	r3, r1, #5, #3
   14218:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->procedure_expire = 0;
   1421c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14220:	2400      	movs	r4, #0
   14222:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   14226:	f7ff b8db 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
	struct connection *conn = _radio.conn_curr;
   1422a:	4b78      	ldr	r3, [pc, #480]	; (1440c <isr_rx_conn_pkt_ctrl+0x10a0>)
   1422c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
   14230:	7b23      	ldrb	r3, [r4, #12]
   14232:	7b61      	ldrb	r1, [r4, #13]
   14234:	430b      	orrs	r3, r1
   14236:	f013 0f07 	tst.w	r3, #7
   1423a:	d134      	bne.n	142a6 <isr_rx_conn_pkt_ctrl+0xf3a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   1423c:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   14240:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
   14244:	428b      	cmp	r3, r1
   14246:	f000 8086 	beq.w	14356 <isr_rx_conn_pkt_ctrl+0xfea>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   1424a:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   1424e:	f003 0303 	and.w	r3, r3, #3
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   14252:	2b02      	cmp	r3, #2
   14254:	d00c      	beq.n	14270 <isr_rx_conn_pkt_ctrl+0xf04>
			return 0;
   14256:	2300      	movs	r3, #0
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
   14258:	2b00      	cmp	r3, #0
   1425a:	f000 80cd 	beq.w	143f8 <isr_rx_conn_pkt_ctrl+0x108c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   1425e:	4b6b      	ldr	r3, [pc, #428]	; (1440c <isr_rx_conn_pkt_ctrl+0x10a0>)
   14260:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14264:	2228      	movs	r2, #40	; 0x28
   14266:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   1426a:	2400      	movs	r4, #0
   1426c:	f7ff b8b8 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   14270:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
		conn->procedure_expire = 0;
   14274:	2300      	movs	r3, #0
   14276:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   1427a:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   1427e:	f013 0f02 	tst.w	r3, #2
   14282:	d06a      	beq.n	1435a <isr_rx_conn_pkt_ctrl+0xfee>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   14284:	230c      	movs	r3, #12
   14286:	7123      	strb	r3, [r4, #4]
		p->status = 0;
   14288:	2300      	movs	r3, #0
   1428a:	72e3      	strb	r3, [r4, #11]
		p->tx = conn->phy_tx;
   1428c:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   14290:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   14294:	7321      	strb	r1, [r4, #12]
		p->rx = conn->phy_rx;
   14296:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
   1429a:	f3c2 0202 	ubfx	r2, r2, #0, #3
   1429e:	7362      	strb	r2, [r4, #13]
		*rx_enqueue = 1;
   142a0:	2201      	movs	r2, #1
   142a2:	703a      	strb	r2, [r7, #0]
   142a4:	e7d8      	b.n	14258 <isr_rx_conn_pkt_ctrl+0xeec>
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   142a6:	89e3      	ldrh	r3, [r4, #14]
   142a8:	8c51      	ldrh	r1, [r2, #34]	; 0x22
   142aa:	1a5b      	subs	r3, r3, r1
   142ac:	b29b      	uxth	r3, r3
   142ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   142b2:	da54      	bge.n	1435e <isr_rx_conn_pkt_ctrl+0xff2>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   142b4:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   142b8:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   142bc:	428b      	cmp	r3, r1
   142be:	d134      	bne.n	1432a <isr_rx_conn_pkt_ctrl+0xfbe>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   142c0:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   142c4:	f892 00f4 	ldrb.w	r0, [r2, #244]	; 0xf4
   142c8:	4283      	cmp	r3, r0
   142ca:	d005      	beq.n	142d8 <isr_rx_conn_pkt_ctrl+0xf6c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   142cc:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   142d0:	f003 0303 	and.w	r3, r3, #3
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   142d4:	2b02      	cmp	r3, #2
   142d6:	d02e      	beq.n	14336 <isr_rx_conn_pkt_ctrl+0xfca>
	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
   142d8:	7b60      	ldrb	r0, [r4, #13]
   142da:	f000 0007 	and.w	r0, r0, #7
   142de:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   142e2:	f360 0384 	bfi	r3, r0, #2, #3
   142e6:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
   142ea:	7b25      	ldrb	r5, [r4, #12]
   142ec:	b2db      	uxtb	r3, r3
   142ee:	f365 1347 	bfi	r3, r5, #5, #3
   142f2:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = p->instant;
   142f6:	89e3      	ldrh	r3, [r4, #14]
   142f8:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
	conn->llcp.phy_upd_ind.initiate = 0;
   142fc:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   14300:	f36f 0300 	bfc	r3, #0, #1
   14304:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   14308:	2408      	movs	r4, #8
   1430a:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
	conn->llcp_ack--;
   1430e:	3901      	subs	r1, #1
   14310:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   14314:	f003 031c 	and.w	r3, r3, #28
   14318:	b31b      	cbz	r3, 14362 <isr_rx_conn_pkt_ctrl+0xff6>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1431a:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   1431e:	f360 0302 	bfi	r3, r0, #0, #3
   14322:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	return 0;
   14326:	2300      	movs	r3, #0
   14328:	e796      	b.n	14258 <isr_rx_conn_pkt_ctrl+0xeec>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1432a:	4040      	eors	r0, r0
   1432c:	f380 8811 	msr	BASEPRI, r0
   14330:	f04f 0004 	mov.w	r0, #4
   14334:	df02      	svc	2
		conn->llcp_phy.ack = conn->llcp_phy.req;
   14336:	f882 00f5 	strb.w	r0, [r2, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1433a:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   1433e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   14342:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
   14346:	f363 0041 	bfi	r0, r3, #1, #1
   1434a:	f882 0078 	strb.w	r0, [r2, #120]	; 0x78
		conn->procedure_expire = 0;
   1434e:	2300      	movs	r3, #0
   14350:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
   14354:	e7c0      	b.n	142d8 <isr_rx_conn_pkt_ctrl+0xf6c>
			return 0;
   14356:	2300      	movs	r3, #0
   14358:	e77e      	b.n	14258 <isr_rx_conn_pkt_ctrl+0xeec>
			return 0;
   1435a:	2300      	movs	r3, #0
   1435c:	e77c      	b.n	14258 <isr_rx_conn_pkt_ctrl+0xeec>
		return 1;
   1435e:	2301      	movs	r3, #1
   14360:	e77a      	b.n	14258 <isr_rx_conn_pkt_ctrl+0xeec>
	return 0;
   14362:	2300      	movs	r3, #0
   14364:	e778      	b.n	14258 <isr_rx_conn_pkt_ctrl+0xeec>
		if (!_radio.conn_curr->role) {
   14366:	2b00      	cmp	r3, #0
   14368:	db49      	blt.n	143fe <isr_rx_conn_pkt_ctrl+0x1092>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   1436a:	7b21      	ldrb	r1, [r4, #12]
   1436c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   14370:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   14374:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   14378:	f002 0207 	and.w	r2, r2, #7
   1437c:	4313      	orrs	r3, r2
   1437e:	4219      	tst	r1, r3
   14380:	d040      	beq.n	14404 <isr_rx_conn_pkt_ctrl+0x1098>
			if (conn->llcp_req != conn->llcp_ack) {
   14382:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   14386:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   1438a:	429a      	cmp	r2, r3
   1438c:	d002      	beq.n	14394 <isr_rx_conn_pkt_ctrl+0x1028>
	u8_t nack = 0;
   1438e:	2400      	movs	r4, #0
   14390:	f7ff b826 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
			memcpy(&conn->llcp.chan_map.chm[0],
   14394:	2205      	movs	r2, #5
   14396:	491e      	ldr	r1, [pc, #120]	; (14410 <isr_rx_conn_pkt_ctrl+0x10a4>)
   14398:	f105 0079 	add.w	r0, r5, #121	; 0x79
   1439c:	f7eb ff90 	bl	2c0 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   143a0:	2301      	movs	r3, #1
   143a2:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   143a6:	2302      	movs	r3, #2
   143a8:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   143ac:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   143b0:	3b01      	subs	r3, #1
   143b2:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	u8_t nack = 0;
   143b6:	2400      	movs	r4, #0
   143b8:	f7ff b812 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
		unknown_rsp_send(_radio.conn_curr,
   143bc:	4628      	mov	r0, r5
   143be:	f7fd fcd3 	bl	11d68 <unknown_rsp_send>
	u8_t nack = 0;
   143c2:	2400      	movs	r4, #0
		break;
   143c4:	f7ff b80c 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
	u8_t nack = 0;
   143c8:	2400      	movs	r4, #0
   143ca:	f7ff b809 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
   143ce:	2400      	movs	r4, #0
   143d0:	f7ff b806 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
   143d4:	2400      	movs	r4, #0
   143d6:	f7ff b803 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
   143da:	2400      	movs	r4, #0
   143dc:	f7ff b800 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
   143e0:	2400      	movs	r4, #0
   143e2:	f7fe bffd 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
   143e6:	2400      	movs	r4, #0
   143e8:	f7fe bffa 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
   143ec:	2400      	movs	r4, #0
   143ee:	f7fe bff7 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
   143f2:	2400      	movs	r4, #0
   143f4:	f7fe bff4 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
   143f8:	2400      	movs	r4, #0
   143fa:	f7fe bff1 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
   143fe:	2400      	movs	r4, #0
   14400:	f7fe bfee 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
   14404:	2400      	movs	r4, #0
   14406:	f7fe bfeb 	b.w	133e0 <isr_rx_conn_pkt_ctrl+0x74>
   1440a:	bf00      	nop
   1440c:	20000ff4 	.word	0x20000ff4
   14410:	2000110a 	.word	0x2000110a

00014414 <packet_rx_enqueue>:
{
   14414:	b508      	push	{r3, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   14416:	4a1a      	ldr	r2, [pc, #104]	; (14480 <packet_rx_enqueue+0x6c>)
   14418:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   1441c:	b2db      	uxtb	r3, r3
   1441e:	f892 213e 	ldrb.w	r2, [r2, #318]	; 0x13e
   14422:	4293      	cmp	r3, r2
   14424:	d01d      	beq.n	14462 <packet_rx_enqueue+0x4e>
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   14426:	4a16      	ldr	r2, [pc, #88]	; (14480 <packet_rx_enqueue+0x6c>)
   14428:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   1442c:	f892 113d 	ldrb.w	r1, [r2, #317]	; 0x13d
   14430:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	link = radio_pdu_node_rx->hdr.onion.link;
   14434:	6801      	ldr	r1, [r0, #0]
	    _radio.packet_release_last;
   14436:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   1443a:	7003      	strb	r3, [r0, #0]
	last = _radio.packet_rx_last + 1;
   1443c:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   14440:	3301      	adds	r3, #1
   14442:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
   14444:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   14448:	4293      	cmp	r3, r2
   1444a:	d010      	beq.n	1446e <packet_rx_enqueue+0x5a>
	_radio.packet_rx_last = last;
   1444c:	4a0c      	ldr	r2, [pc, #48]	; (14480 <packet_rx_enqueue+0x6c>)
   1444e:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	link = memq_enqueue(radio_pdu_node_rx, link,
   14452:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   14456:	f7fb f800 	bl	f45a <memq_enqueue>
	LL_ASSERT(link);
   1445a:	b150      	cbz	r0, 14472 <packet_rx_enqueue+0x5e>
	packet_rx_callback();
   1445c:	f7fe f871 	bl	12542 <packet_rx_callback>
   14460:	bd08      	pop	{r3, pc}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   14462:	4040      	eors	r0, r0
   14464:	f380 8811 	msr	BASEPRI, r0
   14468:	f04f 0004 	mov.w	r0, #4
   1446c:	df02      	svc	2
		last = 0;
   1446e:	2300      	movs	r3, #0
   14470:	e7ec      	b.n	1444c <packet_rx_enqueue+0x38>
	LL_ASSERT(link);
   14472:	4040      	eors	r0, r0
   14474:	f380 8811 	msr	BASEPRI, r0
   14478:	f04f 0004 	mov.w	r0, #4
   1447c:	df02      	svc	2
   1447e:	bf00      	nop
   14480:	20000ff4 	.word	0x20000ff4

00014484 <mayfly_adv_stop>:
{
   14484:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
   14486:	4b1c      	ldr	r3, [pc, #112]	; (144f8 <mayfly_adv_stop+0x74>)
   14488:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1448c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14490:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   14492:	429a      	cmp	r2, r3
   14494:	d31d      	bcc.n	144d2 <mayfly_adv_stop+0x4e>
			_radio.packet_rx_last);
   14496:	4b18      	ldr	r3, [pc, #96]	; (144f8 <mayfly_adv_stop+0x74>)
   14498:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1449c:	1ad3      	subs	r3, r2, r3
   1449e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   144a0:	b30b      	cbz	r3, 144e6 <mayfly_adv_stop+0x62>
	return _radio.packet_rx[_radio.packet_rx_last];
   144a2:	4b15      	ldr	r3, [pc, #84]	; (144f8 <mayfly_adv_stop+0x74>)
   144a4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   144a8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   144ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
	LL_ASSERT(radio_pdu_node_rx);
   144b0:	b1dc      	cbz	r4, 144ea <mayfly_adv_stop+0x66>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   144b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   144b6:	80e3      	strh	r3, [r4, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   144b8:	2306      	movs	r3, #6
   144ba:	7123      	strb	r3, [r4, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
   144bc:	221d      	movs	r2, #29
   144be:	2100      	movs	r1, #0
   144c0:	f104 000b 	add.w	r0, r4, #11
   144c4:	f016 fa28 	bl	2a918 <memset>
	radio_le_conn_cmplt->status = 0x3c;
   144c8:	233c      	movs	r3, #60	; 0x3c
   144ca:	72e3      	strb	r3, [r4, #11]
	packet_rx_enqueue();
   144cc:	f7ff ffa2 	bl	14414 <packet_rx_enqueue>
   144d0:	bd10      	pop	{r4, pc}
		return (_radio.packet_rx_count -
   144d2:	4909      	ldr	r1, [pc, #36]	; (144f8 <mayfly_adv_stop+0x74>)
   144d4:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   144d8:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   144dc:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   144de:	fa52 f383 	uxtab	r3, r2, r3
   144e2:	b2db      	uxtb	r3, r3
   144e4:	e7dc      	b.n	144a0 <mayfly_adv_stop+0x1c>
		return 0;
   144e6:	2400      	movs	r4, #0
   144e8:	e7e2      	b.n	144b0 <mayfly_adv_stop+0x2c>
	LL_ASSERT(radio_pdu_node_rx);
   144ea:	4040      	eors	r0, r0
   144ec:	f380 8811 	msr	BASEPRI, r0
   144f0:	f04f 0004 	mov.w	r0, #4
   144f4:	df02      	svc	2
   144f6:	bf00      	nop
   144f8:	20000ff4 	.word	0x20000ff4

000144fc <terminate_ind_rx_enqueue>:
{
   144fc:	b510      	push	{r4, lr}
   144fe:	4603      	mov	r3, r0
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   14500:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
   14504:	b1bc      	cbz	r4, 14536 <terminate_ind_rx_enqueue+0x3a>
   14506:	30b4      	adds	r0, #180	; 0xb4
   14508:	460a      	mov	r2, r1
	radio_pdu_node_rx->hdr.handle = conn->handle;
   1450a:	8c19      	ldrh	r1, [r3, #32]
   1450c:	f8a3 10ba 	strh.w	r1, [r3, #186]	; 0xba
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   14510:	2107      	movs	r1, #7
   14512:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
   14516:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	    _radio.packet_release_last;
   1451a:	4a0d      	ldr	r2, [pc, #52]	; (14550 <terminate_ind_rx_enqueue+0x54>)
   1451c:	f892 1174 	ldrb.w	r1, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   14520:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	link = memq_enqueue(radio_pdu_node_rx, link,
   14524:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   14528:	4621      	mov	r1, r4
   1452a:	f7fa ff96 	bl	f45a <memq_enqueue>
	LL_ASSERT(link);
   1452e:	b140      	cbz	r0, 14542 <terminate_ind_rx_enqueue+0x46>
	packet_rx_callback();
   14530:	f7fe f807 	bl	12542 <packet_rx_callback>
   14534:	bd10      	pop	{r4, pc}
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   14536:	4040      	eors	r0, r0
   14538:	f380 8811 	msr	BASEPRI, r0
   1453c:	f04f 0004 	mov.w	r0, #4
   14540:	df02      	svc	2
	LL_ASSERT(link);
   14542:	4040      	eors	r0, r0
   14544:	f380 8811 	msr	BASEPRI, r0
   14548:	f04f 0004 	mov.w	r0, #4
   1454c:	df02      	svc	2
   1454e:	bf00      	nop
   14550:	20000ff4 	.word	0x20000ff4

00014554 <isr_rx_scan_report>:
{
   14554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_radio.packet_rx_acquire >=
   14558:	4b31      	ldr	r3, [pc, #196]	; (14620 <isr_rx_scan_report+0xcc>)
   1455a:	f893 413e 	ldrb.w	r4, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1455e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14562:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   14564:	429c      	cmp	r4, r3
   14566:	d327      	bcc.n	145b8 <isr_rx_scan_report+0x64>
			_radio.packet_rx_last);
   14568:	4b2d      	ldr	r3, [pc, #180]	; (14620 <isr_rx_scan_report+0xcc>)
   1456a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1456e:	1ae3      	subs	r3, r4, r3
   14570:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14572:	2b02      	cmp	r3, #2
   14574:	d92a      	bls.n	145cc <isr_rx_scan_report+0x78>
	return _radio.packet_rx[_radio.packet_rx_last];
   14576:	4b2a      	ldr	r3, [pc, #168]	; (14620 <isr_rx_scan_report+0xcc>)
   14578:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
   1457c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14580:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
	if (radio_pdu_node_rx == 0) {
   14584:	2c00      	cmp	r4, #0
   14586:	d047      	beq.n	14618 <isr_rx_scan_report+0xc4>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   14588:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1458c:	80e3      	strh	r3, [r4, #6]
	} else if (_radio.scanner.phy) {
   1458e:	4b24      	ldr	r3, [pc, #144]	; (14620 <isr_rx_scan_report+0xcc>)
   14590:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   14594:	f013 0f07 	tst.w	r3, #7
   14598:	d020      	beq.n	145dc <isr_rx_scan_report+0x88>
		switch (_radio.scanner.phy) {
   1459a:	4b21      	ldr	r3, [pc, #132]	; (14620 <isr_rx_scan_report+0xcc>)
   1459c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   145a0:	f003 0307 	and.w	r3, r3, #7
   145a4:	2b01      	cmp	r3, #1
   145a6:	d013      	beq.n	145d0 <isr_rx_scan_report+0x7c>
   145a8:	2b04      	cmp	r3, #4
   145aa:	d014      	beq.n	145d6 <isr_rx_scan_report+0x82>
			LL_ASSERT(0);
   145ac:	4040      	eors	r0, r0
   145ae:	f380 8811 	msr	BASEPRI, r0
   145b2:	f04f 0004 	mov.w	r0, #4
   145b6:	df02      	svc	2
		return (_radio.packet_rx_count -
   145b8:	4d19      	ldr	r5, [pc, #100]	; (14620 <isr_rx_scan_report+0xcc>)
   145ba:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
			_radio.packet_rx_last +
   145be:	f895 513d 	ldrb.w	r5, [r5, #317]	; 0x13d
		return (_radio.packet_rx_count -
   145c2:	1b5b      	subs	r3, r3, r5
			_radio.packet_rx_last +
   145c4:	fa54 f383 	uxtab	r3, r4, r3
   145c8:	b2db      	uxtb	r3, r3
   145ca:	e7d2      	b.n	14572 <isr_rx_scan_report+0x1e>
		return 0;
   145cc:	2400      	movs	r4, #0
   145ce:	e7d9      	b.n	14584 <isr_rx_scan_report+0x30>
			radio_pdu_node_rx->hdr.type =
   145d0:	2303      	movs	r3, #3
   145d2:	7123      	strb	r3, [r4, #4]
			break;
   145d4:	e004      	b.n	145e0 <isr_rx_scan_report+0x8c>
			radio_pdu_node_rx->hdr.type =
   145d6:	2304      	movs	r3, #4
   145d8:	7123      	strb	r3, [r4, #4]
			break;
   145da:	e001      	b.n	145e0 <isr_rx_scan_report+0x8c>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   145dc:	2302      	movs	r3, #2
   145de:	7123      	strb	r3, [r4, #4]
   145e0:	4615      	mov	r5, r2
   145e2:	460e      	mov	r6, r1
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
   145e4:	f104 0708 	add.w	r7, r4, #8
			     pdu_adv_rx->len] =
   145e8:	f894 8009 	ldrb.w	r8, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   145ec:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
   145f0:	b968      	cbnz	r0, 1460e <isr_rx_scan_report+0xba>
   145f2:	207f      	movs	r0, #127	; 0x7f
   145f4:	f807 0008 	strb.w	r0, [r7, r8]
			     pdu_adv_rx->len + 1] = rl_idx;
   145f8:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   145fa:	3303      	adds	r3, #3
			     pdu_adv_rx->len + 1] = rl_idx;
   145fc:	54fe      	strb	r6, [r7, r3]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   145fe:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   14600:	3304      	adds	r3, #4
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   14602:	54fd      	strb	r5, [r7, r3]
	packet_rx_enqueue();
   14604:	f7ff ff06 	bl	14414 <packet_rx_enqueue>
	return 0;
   14608:	2000      	movs	r0, #0
   1460a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   1460e:	f7fb f949 	bl	f8a4 <radio_rssi_get>
			     pdu_adv_rx->len] =
   14612:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   14616:	e7ed      	b.n	145f4 <isr_rx_scan_report+0xa0>
		return 1;
   14618:	2001      	movs	r0, #1
}
   1461a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1461e:	bf00      	nop
   14620:	20000ff4 	.word	0x20000ff4

00014624 <isr_rx_conn>:
{
   14624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14628:	b084      	sub	sp, #16
	u8_t rx_enqueue = 0;
   1462a:	2300      	movs	r3, #0
   1462c:	f88d 300b 	strb.w	r3, [sp, #11]
	_radio.packet_counter++;
   14630:	4bc1      	ldr	r3, [pc, #772]	; (14938 <isr_rx_conn+0x314>)
   14632:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
   14636:	3201      	adds	r2, #1
   14638:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   1463c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14640:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14644:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14648:	2301      	movs	r3, #1
   1464a:	712b      	strb	r3, [r5, #4]
	if (crc_ok) {
   1464c:	4607      	mov	r7, r0
   1464e:	2800      	cmp	r0, #0
   14650:	d143      	bne.n	146da <isr_rx_conn+0xb6>
		if (_radio.crc_expire == 0) {
   14652:	4bb9      	ldr	r3, [pc, #740]	; (14938 <isr_rx_conn+0x314>)
   14654:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
   14658:	b91b      	cbnz	r3, 14662 <isr_rx_conn+0x3e>
			_radio.crc_expire = 2;
   1465a:	2202      	movs	r2, #2
   1465c:	4bb6      	ldr	r3, [pc, #728]	; (14938 <isr_rx_conn+0x314>)
   1465e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		_radio.crc_expire--;
   14662:	4bb5      	ldr	r3, [pc, #724]	; (14938 <isr_rx_conn+0x314>)
   14664:	f893 4115 	ldrb.w	r4, [r3, #277]	; 0x115
   14668:	3c01      	subs	r4, #1
   1466a:	b2e4      	uxtb	r4, r4
   1466c:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		crc_close = (_radio.crc_expire == 0);
   14670:	fab4 f484 	clz	r4, r4
   14674:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
   14676:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1467a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   1467e:	2a00      	cmp	r2, #0
   14680:	f040 8387 	bne.w	14d92 <isr_rx_conn+0x76e>
				_radio.conn_curr->supervision_reload;
   14684:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   14686:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	struct radio_pdu_node_tx *tx_release = NULL;
   1468a:	2600      	movs	r6, #0
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   1468c:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 14938 <isr_rx_conn+0x314>
   14690:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   14694:	f890 80f8 	ldrb.w	r8, [r0, #248]	; 0xf8
   14698:	ea4f 18d8 	mov.w	r8, r8, lsr #7
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   1469c:	a903      	add	r1, sp, #12
   1469e:	f7fe f8ef 	bl	12880 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   146a2:	f899 3010 	ldrb.w	r3, [r9, #16]
			STATE_CLOSE : STATE_TX;
   146a6:	2b03      	cmp	r3, #3
   146a8:	f000 8376 	beq.w	14d98 <isr_rx_conn+0x774>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   146ac:	2c00      	cmp	r4, #0
   146ae:	f040 8372 	bne.w	14d96 <isr_rx_conn+0x772>
   146b2:	b147      	cbz	r7, 146c6 <isr_rx_conn+0xa2>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   146b4:	7a2b      	ldrb	r3, [r5, #8]
   146b6:	f013 0f10 	tst.w	r3, #16
   146ba:	d104      	bne.n	146c6 <isr_rx_conn+0xa2>
			 (pdu_data_tx->len == 0)) ||
   146bc:	9b03      	ldr	r3, [sp, #12]
   146be:	785b      	ldrb	r3, [r3, #1]
			((crc_ok) && (pdu_data_rx->md == 0) &&
   146c0:	2b00      	cmp	r3, #0
   146c2:	f000 83aa 	beq.w	14e1a <isr_rx_conn+0x7f6>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   146c6:	4b9c      	ldr	r3, [pc, #624]	; (14938 <isr_rx_conn+0x314>)
   146c8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   146cc:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
			 (pdu_data_tx->len == 0)) ||
   146d0:	2b00      	cmp	r3, #0
   146d2:	f000 83a4 	beq.w	14e1e <isr_rx_conn+0x7fa>
			STATE_CLOSE : STATE_TX;
   146d6:	2303      	movs	r3, #3
   146d8:	e35e      	b.n	14d98 <isr_rx_conn+0x774>
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   146da:	f105 0808 	add.w	r8, r5, #8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   146de:	7a2a      	ldrb	r2, [r5, #8]
   146e0:	f3c2 0280 	ubfx	r2, r2, #2, #1
   146e4:	4b94      	ldr	r3, [pc, #592]	; (14938 <isr_rx_conn+0x314>)
   146e6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   146ea:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   146ee:	f003 0301 	and.w	r3, r3, #1
   146f2:	429a      	cmp	r2, r3
   146f4:	f000 81cd 	beq.w	14a92 <isr_rx_conn+0x46e>
		_radio.conn_curr->sn++;
   146f8:	f083 0301 	eor.w	r3, r3, #1
   146fc:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   14700:	f363 0200 	bfi	r2, r3, #0, #1
   14704:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   14708:	4b8b      	ldr	r3, [pc, #556]	; (14938 <isr_rx_conn+0x314>)
   1470a:	7bdb      	ldrb	r3, [r3, #15]
   1470c:	b2db      	uxtb	r3, r3
   1470e:	2b03      	cmp	r3, #3
   14710:	d02c      	beq.n	1476c <isr_rx_conn+0x148>
		if (_radio.conn_curr->empty == 0) {
   14712:	4b89      	ldr	r3, [pc, #548]	; (14938 <isr_rx_conn+0x314>)
   14714:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14718:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1471c:	f012 0f80 	tst.w	r2, #128	; 0x80
   14720:	f040 81ae 	bne.w	14a80 <isr_rx_conn+0x45c>
			node_tx = _radio.conn_curr->pkt_tx_head;
   14724:	f8d3 613c 	ldr.w	r6, [r3, #316]	; 0x13c
				(node_tx->pdu_data +
   14728:	f106 0c04 	add.w	ip, r6, #4
				 _radio.conn_curr->packet_tx_head_offset);
   1472c:	f893 e151 	ldrb.w	lr, [r3, #337]	; 0x151
			pdu_data_tx = (struct pdu_data *)
   14730:	eb0c 090e 	add.w	r9, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
   14734:	f899 4001 	ldrb.w	r4, [r9, #1]
			if (pdu_data_tx_len != 0) {
   14738:	2c00      	cmp	r4, #0
   1473a:	f000 8145 	beq.w	149c8 <isr_rx_conn+0x3a4>
				if (_radio.conn_curr->enc_tx) {
   1473e:	f012 0f20 	tst.w	r2, #32
   14742:	d00a      	beq.n	1475a <isr_rx_conn+0x136>
					_radio.conn_curr->ccm_tx.counter++;
   14744:	f8d3 012a 	ldr.w	r0, [r3, #298]	; 0x12a
   14748:	f8d3 112e 	ldr.w	r1, [r3, #302]	; 0x12e
   1474c:	3001      	adds	r0, #1
   1474e:	f141 0100 	adc.w	r1, r1, #0
   14752:	f8c3 012a 	str.w	r0, [r3, #298]	; 0x12a
   14756:	f8c3 112e 	str.w	r1, [r3, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1475a:	f81c 300e 	ldrb.w	r3, [ip, lr]
   1475e:	f003 0303 	and.w	r3, r3, #3
   14762:	2b03      	cmp	r3, #3
   14764:	d00c      	beq.n	14780 <isr_rx_conn+0x15c>
	u8_t terminate = 0;
   14766:	f04f 0900 	mov.w	r9, #0
   1476a:	e12e      	b.n	149ca <isr_rx_conn+0x3a6>
			_radio.conn_curr->slave.latency_enabled = 1;
   1476c:	4b72      	ldr	r3, [pc, #456]	; (14938 <isr_rx_conn+0x314>)
   1476e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14772:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   14776:	f043 0301 	orr.w	r3, r3, #1
   1477a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   1477e:	e7c8      	b.n	14712 <isr_rx_conn+0xee>
	switch (pdu_data_tx->payload.llctrl.opcode) {
   14780:	f899 3003 	ldrb.w	r3, [r9, #3]
   14784:	3b02      	subs	r3, #2
   14786:	2b16      	cmp	r3, #22
   14788:	f200 8118 	bhi.w	149bc <isr_rx_conn+0x398>
   1478c:	e8df f013 	tbh	[pc, r3, lsl #1]
   14790:	00330017 	.word	0x00330017
   14794:	01160057 	.word	0x01160057
   14798:	01160116 	.word	0x01160116
   1479c:	01160116 	.word	0x01160116
   147a0:	007d0063 	.word	0x007d0063
   147a4:	00970116 	.word	0x00970116
   147a8:	01160116 	.word	0x01160116
   147ac:	01160116 	.word	0x01160116
   147b0:	01160116 	.word	0x01160116
   147b4:	011600af 	.word	0x011600af
   147b8:	00e000d6 	.word	0x00e000d6
   147bc:	0106      	.short	0x0106
		_radio.state = STATE_CLOSE;
   147be:	2203      	movs	r2, #3
   147c0:	4b5d      	ldr	r3, [pc, #372]	; (14938 <isr_rx_conn+0x314>)
   147c2:	741a      	strb	r2, [r3, #16]
		radio_disable();
   147c4:	f7fa fff6 	bl	f7b4 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   147c8:	f7fb f80e 	bl	f7e8 <radio_is_ready>
   147cc:	b958      	cbnz	r0, 147e6 <isr_rx_conn+0x1c2>
		terminate_ind_rx_enqueue(_radio.conn_curr,
   147ce:	4b5a      	ldr	r3, [pc, #360]	; (14938 <isr_rx_conn+0x314>)
   147d0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
   147d4:	f899 1004 	ldrb.w	r1, [r9, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   147d8:	2913      	cmp	r1, #19
   147da:	d00a      	beq.n	147f2 <isr_rx_conn+0x1ce>
   147dc:	f7ff fe8e 	bl	144fc <terminate_ind_rx_enqueue>
		terminate = 1;
   147e0:	f04f 0901 	mov.w	r9, #1
   147e4:	e0f1      	b.n	149ca <isr_rx_conn+0x3a6>
		LL_ASSERT(!radio_is_ready());
   147e6:	4040      	eors	r0, r0
   147e8:	f380 8811 	msr	BASEPRI, r0
   147ec:	f04f 0004 	mov.w	r0, #4
   147f0:	df02      	svc	2
		terminate_ind_rx_enqueue(_radio.conn_curr,
   147f2:	2116      	movs	r1, #22
   147f4:	e7f2      	b.n	147dc <isr_rx_conn+0x1b8>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   147f6:	f8df a140 	ldr.w	sl, [pc, #320]	; 14938 <isr_rx_conn+0x314>
   147fa:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   147fe:	2208      	movs	r2, #8
   14800:	f109 010e 	add.w	r1, r9, #14
   14804:	3093      	adds	r0, #147	; 0x93
   14806:	f7eb fd5b 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   1480a:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   1480e:	2204      	movs	r2, #4
   14810:	f109 0116 	add.w	r1, r9, #22
   14814:	f500 7089 	add.w	r0, r0, #274	; 0x112
   14818:	f7eb fd52 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   1481c:	f8da 2110 	ldr.w	r2, [sl, #272]	; 0x110
   14820:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   14824:	f043 0308 	orr.w	r3, r3, #8
   14828:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   1482c:	f8da 3110 	ldr.w	r3, [sl, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   14830:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   14834:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   14838:	f04f 0900 	mov.w	r9, #0
   1483c:	e0c5      	b.n	149ca <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   1483e:	4b3e      	ldr	r3, [pc, #248]	; (14938 <isr_rx_conn+0x314>)
   14840:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14844:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   14848:	f043 0308 	orr.w	r3, r3, #8
   1484c:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   14850:	f04f 0900 	mov.w	r9, #0
   14854:	e0b9      	b.n	149ca <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   14856:	4b38      	ldr	r3, [pc, #224]	; (14938 <isr_rx_conn+0x314>)
   14858:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1485c:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   14860:	f042 0208 	orr.w	r2, r2, #8
   14864:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   14868:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1486c:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   14870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14874:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   14878:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   1487c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   14880:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   14884:	f04f 0900 	mov.w	r9, #0
   14888:	e09f      	b.n	149ca <isr_rx_conn+0x3a6>
		if (_radio.role == ROLE_MASTER) {
   1488a:	4b2b      	ldr	r3, [pc, #172]	; (14938 <isr_rx_conn+0x314>)
   1488c:	7bdb      	ldrb	r3, [r3, #15]
   1488e:	b2db      	uxtb	r3, r3
   14890:	2b04      	cmp	r3, #4
   14892:	d00b      	beq.n	148ac <isr_rx_conn+0x288>
			_radio.conn_curr->pause_tx = 1;
   14894:	4b28      	ldr	r3, [pc, #160]	; (14938 <isr_rx_conn+0x314>)
   14896:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1489a:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1489e:	f043 0308 	orr.w	r3, r3, #8
   148a2:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   148a6:	f04f 0900 	mov.w	r9, #0
   148aa:	e08e      	b.n	149ca <isr_rx_conn+0x3a6>
			enc_req_reused_send(_radio.conn_curr, *node_tx);
   148ac:	4631      	mov	r1, r6
   148ae:	4b22      	ldr	r3, [pc, #136]	; (14938 <isr_rx_conn+0x314>)
   148b0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   148b4:	f7fe fd38 	bl	13328 <enc_req_reused_send>
			*node_tx = NULL;
   148b8:	2600      	movs	r6, #0
	u8_t terminate = 0;
   148ba:	46b1      	mov	r9, r6
   148bc:	e085      	b.n	149ca <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_rx = 0;
   148be:	4b1e      	ldr	r3, [pc, #120]	; (14938 <isr_rx_conn+0x314>)
   148c0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   148c4:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   148c8:	f36f 0182 	bfc	r1, #2, #1
   148cc:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   148d0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   148d4:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   148d8:	f36f 01c3 	bfc	r1, #3, #1
   148dc:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   148e0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   148e4:	f04f 0900 	mov.w	r9, #0
   148e8:	f8a3 9044 	strh.w	r9, [r3, #68]	; 0x44
   148ec:	e06d      	b.n	149ca <isr_rx_conn+0x3a6>
		if ((_radio.conn_curr->llcp_length.req !=
   148ee:	4b12      	ldr	r3, [pc, #72]	; (14938 <isr_rx_conn+0x314>)
   148f0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   148f4:	f893 10e8 	ldrb.w	r1, [r3, #232]	; 0xe8
		     _radio.conn_curr->llcp_length.ack) &&
   148f8:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
		if ((_radio.conn_curr->llcp_length.req !=
   148fc:	4291      	cmp	r1, r2
   148fe:	d060      	beq.n	149c2 <isr_rx_conn+0x39e>
		    (_radio.conn_curr->llcp_length.state ==
   14900:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   14904:	f002 0203 	and.w	r2, r2, #3
		     _radio.conn_curr->llcp_length.ack) &&
   14908:	2a01      	cmp	r2, #1
   1490a:	d002      	beq.n	14912 <isr_rx_conn+0x2ee>
	u8_t terminate = 0;
   1490c:	f04f 0900 	mov.w	r9, #0
   14910:	e05b      	b.n	149ca <isr_rx_conn+0x3a6>
			_radio.conn_curr->pause_tx = 1;
   14912:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14916:	f042 0208 	orr.w	r2, r2, #8
   1491a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   1491e:	4b06      	ldr	r3, [pc, #24]	; (14938 <isr_rx_conn+0x314>)
   14920:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14924:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   14928:	2102      	movs	r1, #2
   1492a:	f361 0201 	bfi	r2, r1, #0, #2
   1492e:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	u8_t terminate = 0;
   14932:	f04f 0900 	mov.w	r9, #0
   14936:	e048      	b.n	149ca <isr_rx_conn+0x3a6>
   14938:	20000ff4 	.word	0x20000ff4
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1493c:	4bbe      	ldr	r3, [pc, #760]	; (14c38 <isr_rx_conn+0x614>)
   1493e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14942:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
   14946:	2102      	movs	r1, #2
   14948:	f361 0201 	bfi	r2, r1, #0, #2
   1494c:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   14950:	4bb9      	ldr	r3, [pc, #740]	; (14c38 <isr_rx_conn+0x614>)
   14952:	7bdb      	ldrb	r3, [r3, #15]
   14954:	b2db      	uxtb	r3, r3
   14956:	2b03      	cmp	r3, #3
   14958:	d002      	beq.n	14960 <isr_rx_conn+0x33c>
	u8_t terminate = 0;
   1495a:	f04f 0900 	mov.w	r9, #0
   1495e:	e034      	b.n	149ca <isr_rx_conn+0x3a6>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   14960:	4ab6      	ldr	r2, [pc, #728]	; (14c3c <isr_rx_conn+0x618>)
   14962:	e892 0003 	ldmia.w	r2, {r0, r1}
   14966:	e88d 0003 	stmia.w	sp, {r0, r1}
	struct connection *conn = _radio.conn_curr;
   1496a:	4bb3      	ldr	r3, [pc, #716]	; (14c38 <isr_rx_conn+0x614>)
   1496c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   14970:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   14974:	f3c3 0382 	ubfx	r3, r3, #2, #3
   14978:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   1497c:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   14980:	430b      	orrs	r3, r1
	conn->phy_tx_time = phy_tx_time[phys];
   14982:	a904      	add	r1, sp, #16
   14984:	440b      	add	r3, r1
   14986:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   1498a:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   1498e:	f361 0302 	bfi	r3, r1, #0, #3
   14992:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	u8_t terminate = 0;
   14996:	f04f 0900 	mov.w	r9, #0
   1499a:	e016      	b.n	149ca <isr_rx_conn+0x3a6>
		_radio.conn_curr->phy_tx_time =
   1499c:	4ba6      	ldr	r3, [pc, #664]	; (14c38 <isr_rx_conn+0x614>)
   1499e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   149a2:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   149a6:	f3c2 0282 	ubfx	r2, r2, #2, #3
		_radio.conn_curr->phy_tx_time =
   149aa:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   149ae:	f362 0102 	bfi	r1, r2, #0, #3
   149b2:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
	u8_t terminate = 0;
   149b6:	f04f 0900 	mov.w	r9, #0
   149ba:	e006      	b.n	149ca <isr_rx_conn+0x3a6>
   149bc:	f04f 0900 	mov.w	r9, #0
   149c0:	e003      	b.n	149ca <isr_rx_conn+0x3a6>
   149c2:	f04f 0900 	mov.w	r9, #0
   149c6:	e000      	b.n	149ca <isr_rx_conn+0x3a6>
	u8_t terminate = 0;
   149c8:	46a1      	mov	r9, r4
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   149ca:	4b9b      	ldr	r3, [pc, #620]	; (14c38 <isr_rx_conn+0x614>)
   149cc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   149d0:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
   149d4:	4414      	add	r4, r2
   149d6:	b2e4      	uxtb	r4, r4
   149d8:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
			    _radio.conn_curr->packet_tx_head_len) {
   149dc:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
			if (_radio.conn_curr->packet_tx_head_offset ==
   149e0:	429c      	cmp	r4, r3
   149e2:	d01c      	beq.n	14a1e <isr_rx_conn+0x3fa>
	struct radio_pdu_node_tx *tx_release = NULL;
   149e4:	2600      	movs	r6, #0
	if (terminate) {
   149e6:	f1b9 0f00 	cmp.w	r9, #0
   149ea:	d155      	bne.n	14a98 <isr_rx_conn+0x474>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   149ec:	7a2a      	ldrb	r2, [r5, #8]
   149ee:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   149f2:	4b91      	ldr	r3, [pc, #580]	; (14c38 <isr_rx_conn+0x614>)
   149f4:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   149f8:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   149fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
   14a00:	429a      	cmp	r2, r3
   14a02:	d053      	beq.n	14aac <isr_rx_conn+0x488>
	return 0;
   14a04:	2300      	movs	r3, #0
		if (terminate) {
   14a06:	2b00      	cmp	r3, #0
   14a08:	f040 81f5 	bne.w	14df6 <isr_rx_conn+0x7d2>
		_radio.crc_expire = 0;
   14a0c:	4b8a      	ldr	r3, [pc, #552]	; (14c38 <isr_rx_conn+0x614>)
   14a0e:	2400      	movs	r4, #0
   14a10:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		_radio.conn_curr->supervision_expire = 0;
   14a14:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14a18:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
   14a1c:	e636      	b.n	1468c <isr_rx_conn+0x68>
	struct connection *conn = _radio.conn_curr;
   14a1e:	4b86      	ldr	r3, [pc, #536]	; (14c38 <isr_rx_conn+0x614>)
   14a20:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	conn->packet_tx_head_len = 0;
   14a24:	2200      	movs	r2, #0
   14a26:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   14a2a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   14a2e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   14a32:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   14a36:	428a      	cmp	r2, r1
   14a38:	d007      	beq.n	14a4a <isr_rx_conn+0x426>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   14a3a:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
   14a3e:	428a      	cmp	r2, r1
   14a40:	d01a      	beq.n	14a78 <isr_rx_conn+0x454>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   14a42:	6812      	ldr	r2, [r2, #0]
   14a44:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   14a48:	e7cd      	b.n	149e6 <isr_rx_conn+0x3c2>
		if (node_tx) {
   14a4a:	2e00      	cmp	r6, #0
   14a4c:	d0cb      	beq.n	149e6 <isr_rx_conn+0x3c2>
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   14a4e:	6812      	ldr	r2, [r2, #0]
   14a50:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   14a54:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   14a58:	4281      	cmp	r1, r0
   14a5a:	d007      	beq.n	14a6c <isr_rx_conn+0x448>
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   14a5c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
   14a60:	4977      	ldr	r1, [pc, #476]	; (14c40 <isr_rx_conn+0x61c>)
   14a62:	4630      	mov	r0, r6
   14a64:	f7fa fcad 	bl	f3c2 <mem_release>
	return NULL;
   14a68:	2600      	movs	r6, #0
   14a6a:	e7bc      	b.n	149e6 <isr_rx_conn+0x3c2>
				conn->pkt_tx_ctrl = NULL;
   14a6c:	2200      	movs	r2, #0
   14a6e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   14a72:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   14a76:	e7f3      	b.n	14a60 <isr_rx_conn+0x43c>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   14a78:	6809      	ldr	r1, [r1, #0]
   14a7a:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
   14a7e:	e7e0      	b.n	14a42 <isr_rx_conn+0x41e>
			_radio.conn_curr->empty = 0;
   14a80:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14a84:	f36f 12c7 	bfc	r2, #7, #1
   14a88:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	struct radio_pdu_node_tx *tx_release = NULL;
   14a8c:	2600      	movs	r6, #0
	u8_t terminate = 0;
   14a8e:	46b1      	mov	r9, r6
   14a90:	e7a9      	b.n	149e6 <isr_rx_conn+0x3c2>
	struct radio_pdu_node_tx *tx_release = NULL;
   14a92:	2600      	movs	r6, #0
	u8_t terminate = 0;
   14a94:	46b1      	mov	r9, r6
   14a96:	e7a6      	b.n	149e6 <isr_rx_conn+0x3c2>
		connection_release(_radio.conn_curr);
   14a98:	4c67      	ldr	r4, [pc, #412]	; (14c38 <isr_rx_conn+0x614>)
   14a9a:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14a9e:	f7fd fdd9 	bl	12654 <connection_release>
		_radio.conn_curr = NULL;
   14aa2:	2300      	movs	r3, #0
   14aa4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		return terminate;
   14aa8:	464b      	mov	r3, r9
   14aaa:	e7ac      	b.n	14a06 <isr_rx_conn+0x3e2>
	if (_radio.packet_rx_acquire >=
   14aac:	4a62      	ldr	r2, [pc, #392]	; (14c38 <isr_rx_conn+0x614>)
   14aae:	f892 013e 	ldrb.w	r0, [r2, #318]	; 0x13e
	    _radio.packet_rx_last) {
   14ab2:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   14ab6:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   14ab8:	4290      	cmp	r0, r2
   14aba:	d347      	bcc.n	14b4c <isr_rx_conn+0x528>
			_radio.packet_rx_last);
   14abc:	4b5e      	ldr	r3, [pc, #376]	; (14c38 <isr_rx_conn+0x614>)
   14abe:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   14ac2:	1ac3      	subs	r3, r0, r3
   14ac4:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14ac6:	2b02      	cmp	r3, #2
   14ac8:	d94a      	bls.n	14b60 <isr_rx_conn+0x53c>
	return _radio.packet_rx[_radio.packet_rx_last];
   14aca:	4b5b      	ldr	r3, [pc, #364]	; (14c38 <isr_rx_conn+0x614>)
   14acc:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14ad0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   14ad8:	2b00      	cmp	r3, #0
   14ada:	f000 814e 	beq.w	14d7a <isr_rx_conn+0x756>
	    ((_radio.fc_ena == 0) ||
   14ade:	4b56      	ldr	r3, [pc, #344]	; (14c38 <isr_rx_conn+0x614>)
   14ae0:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
	    (packet_rx_reserve_get(3) != 0) &&
   14ae4:	2b00      	cmp	r3, #0
   14ae6:	d045      	beq.n	14b74 <isr_rx_conn+0x550>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14ae8:	4b53      	ldr	r3, [pc, #332]	; (14c38 <isr_rx_conn+0x614>)
   14aea:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   14aee:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	    ((_radio.fc_ena == 0) ||
   14af2:	429a      	cmp	r2, r3
   14af4:	d036      	beq.n	14b64 <isr_rx_conn+0x540>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14af6:	4b50      	ldr	r3, [pc, #320]	; (14c38 <isr_rx_conn+0x614>)
   14af8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	      (_radio.fc_req == _radio.fc_ack)) ||
   14afc:	429a      	cmp	r2, r3
   14afe:	f000 813e 	beq.w	14d7e <isr_rx_conn+0x75a>
	      (_radio.fc_req != _radio.fc_ack) &&
   14b02:	4a4d      	ldr	r2, [pc, #308]	; (14c38 <isr_rx_conn+0x614>)
   14b04:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   14b08:	b2db      	uxtb	r3, r3
   14b0a:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14b0e:	4293      	cmp	r3, r2
   14b10:	f000 8137 	beq.w	14d82 <isr_rx_conn+0x75e>
		(((_radio.fc_req == 0) &&
   14b14:	4b48      	ldr	r3, [pc, #288]	; (14c38 <isr_rx_conn+0x614>)
   14b16:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	      (_radio.fc_req != _radio.fc_ack) &&
   14b1a:	b92b      	cbnz	r3, 14b28 <isr_rx_conn+0x504>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
   14b1c:	4b46      	ldr	r3, [pc, #280]	; (14c38 <isr_rx_conn+0x614>)
   14b1e:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
		   _radio.conn_curr->handle)) ||
   14b22:	8c0b      	ldrh	r3, [r1, #32]
		(((_radio.fc_req == 0) &&
   14b24:	429a      	cmp	r2, r3
   14b26:	d025      	beq.n	14b74 <isr_rx_conn+0x550>
		 ((_radio.fc_req != 0) &&
   14b28:	4b43      	ldr	r3, [pc, #268]	; (14c38 <isr_rx_conn+0x614>)
   14b2a:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		   _radio.conn_curr->handle)) ||
   14b2e:	2b00      	cmp	r3, #0
   14b30:	f000 8129 	beq.w	14d86 <isr_rx_conn+0x762>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   14b34:	4b40      	ldr	r3, [pc, #256]	; (14c38 <isr_rx_conn+0x614>)
   14b36:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   14b3a:	32b7      	adds	r2, #183	; 0xb7
   14b3c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   14b40:	88da      	ldrh	r2, [r3, #6]
		   _radio.conn_curr->handle)))))) {
   14b42:	8c0b      	ldrh	r3, [r1, #32]
		 ((_radio.fc_req != 0) &&
   14b44:	429a      	cmp	r2, r3
   14b46:	d015      	beq.n	14b74 <isr_rx_conn+0x550>
	return 0;
   14b48:	2300      	movs	r3, #0
   14b4a:	e75c      	b.n	14a06 <isr_rx_conn+0x3e2>
		return (_radio.packet_rx_count -
   14b4c:	4a3a      	ldr	r2, [pc, #232]	; (14c38 <isr_rx_conn+0x614>)
   14b4e:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   14b52:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   14b56:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   14b58:	fa50 f383 	uxtab	r3, r0, r3
   14b5c:	b2db      	uxtb	r3, r3
   14b5e:	e7b2      	b.n	14ac6 <isr_rx_conn+0x4a2>
		return 0;
   14b60:	2300      	movs	r3, #0
   14b62:	e7b9      	b.n	14ad8 <isr_rx_conn+0x4b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
   14b64:	4834      	ldr	r0, [pc, #208]	; (14c38 <isr_rx_conn+0x614>)
   14b66:	f890 317c 	ldrb.w	r3, [r0, #380]	; 0x17c
   14b6a:	b2db      	uxtb	r3, r3
   14b6c:	f890 017d 	ldrb.w	r0, [r0, #381]	; 0x17d
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14b70:	4283      	cmp	r3, r0
   14b72:	d1c0      	bne.n	14af6 <isr_rx_conn+0x4d2>
		if (pdu_data_rx->len != 0) {
   14b74:	7a68      	ldrb	r0, [r5, #9]
   14b76:	2800      	cmp	r0, #0
   14b78:	f000 80b8 	beq.w	14cec <isr_rx_conn+0x6c8>
			if (_radio.conn_curr->enc_rx) {
   14b7c:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14b80:	f013 0f10 	tst.w	r3, #16
   14b84:	d133      	bne.n	14bee <isr_rx_conn+0x5ca>
		u8_t ccm_rx_increment = 0;
   14b86:	464c      	mov	r4, r9
			if ((_radio.conn_curr->enc_rx &&
   14b88:	4b2b      	ldr	r3, [pc, #172]	; (14c38 <isr_rx_conn+0x614>)
   14b8a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14b8e:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   14b92:	f013 0f10 	tst.w	r3, #16
   14b96:	d135      	bne.n	14c04 <isr_rx_conn+0x5e0>
			    (_radio.conn_curr->pause_rx &&
   14b98:	4b27      	ldr	r3, [pc, #156]	; (14c38 <isr_rx_conn+0x614>)
   14b9a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14b9e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   14ba2:	f012 0f04 	tst.w	r2, #4
   14ba6:	f000 8082 	beq.w	14cae <isr_rx_conn+0x68a>
	u8_t opcode = pdu_data->payload.llctrl.opcode;
   14baa:	f898 1003 	ldrb.w	r1, [r8, #3]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14bae:	7a2a      	ldrb	r2, [r5, #8]
   14bb0:	f002 0203 	and.w	r2, r2, #3
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14bb4:	2a03      	cmp	r2, #3
   14bb6:	d02a      	beq.n	14c0e <isr_rx_conn+0x5ea>
   14bb8:	2201      	movs	r2, #1
			    (_radio.conn_curr->pause_rx &&
   14bba:	2a00      	cmp	r2, #0
   14bbc:	d077      	beq.n	14cae <isr_rx_conn+0x68a>
				_radio.state = STATE_CLOSE;
   14bbe:	2203      	movs	r2, #3
   14bc0:	4b1d      	ldr	r3, [pc, #116]	; (14c38 <isr_rx_conn+0x614>)
   14bc2:	741a      	strb	r2, [r3, #16]
				radio_disable();
   14bc4:	f7fa fdf6 	bl	f7b4 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   14bc8:	f7fa fe0e 	bl	f7e8 <radio_is_ready>
   14bcc:	2800      	cmp	r0, #0
   14bce:	d168      	bne.n	14ca2 <isr_rx_conn+0x67e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   14bd0:	4c19      	ldr	r4, [pc, #100]	; (14c38 <isr_rx_conn+0x614>)
   14bd2:	213d      	movs	r1, #61	; 0x3d
   14bd4:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14bd8:	f7ff fc90 	bl	144fc <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   14bdc:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14be0:	f7fd fd38 	bl	12654 <connection_release>
				_radio.conn_curr = NULL;
   14be4:	2300      	movs	r3, #0
   14be6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
				return 1; /* terminated */
   14bea:	2301      	movs	r3, #1
   14bec:	e70b      	b.n	14a06 <isr_rx_conn+0x3e2>
				done = radio_ccm_is_done();
   14bee:	f7fb f823 	bl	fc38 <radio_ccm_is_done>
				LL_ASSERT(done);
   14bf2:	b108      	cbz	r0, 14bf8 <isr_rx_conn+0x5d4>
				ccm_rx_increment = 1;
   14bf4:	2401      	movs	r4, #1
   14bf6:	e7c7      	b.n	14b88 <isr_rx_conn+0x564>
				LL_ASSERT(done);
   14bf8:	4040      	eors	r0, r0
   14bfa:	f380 8811 	msr	BASEPRI, r0
   14bfe:	f04f 0004 	mov.w	r0, #4
   14c02:	df02      	svc	2
			     !radio_ccm_mic_is_valid()) ||
   14c04:	f7fb f838 	bl	fc78 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   14c08:	2800      	cmp	r0, #0
   14c0a:	d0d8      	beq.n	14bbe <isr_rx_conn+0x59a>
   14c0c:	e7c4      	b.n	14b98 <isr_rx_conn+0x574>
   14c0e:	f993 201d 	ldrsb.w	r2, [r3, #29]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14c12:	2a00      	cmp	r2, #0
   14c14:	db1d      	blt.n	14c52 <isr_rx_conn+0x62e>
		((!conn->refresh &&
   14c16:	f893 00f8 	ldrb.w	r0, [r3, #248]	; 0xf8
	       (!conn->role &&
   14c1a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   14c1e:	d111      	bne.n	14c44 <isr_rx_conn+0x620>
		((!conn->refresh &&
   14c20:	2902      	cmp	r1, #2
   14c22:	d00f      	beq.n	14c44 <isr_rx_conn+0x620>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14c24:	2905      	cmp	r1, #5
   14c26:	d014      	beq.n	14c52 <isr_rx_conn+0x62e>
   14c28:	2906      	cmp	r1, #6
   14c2a:	d012      	beq.n	14c52 <isr_rx_conn+0x62e>
   14c2c:	290d      	cmp	r1, #13
   14c2e:	d010      	beq.n	14c52 <isr_rx_conn+0x62e>
   14c30:	2911      	cmp	r1, #17
   14c32:	d00e      	beq.n	14c52 <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14c34:	2201      	movs	r2, #1
   14c36:	e7c0      	b.n	14bba <isr_rx_conn+0x596>
   14c38:	20000ff4 	.word	0x20000ff4
   14c3c:	0002e750 	.word	0x0002e750
   14c40:	2000114c 	.word	0x2000114c
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14c44:	b128      	cbz	r0, 14c52 <isr_rx_conn+0x62e>
		 (conn->refresh &&
   14c46:	2902      	cmp	r1, #2
   14c48:	d003      	beq.n	14c52 <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14c4a:	290b      	cmp	r1, #11
   14c4c:	d001      	beq.n	14c52 <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14c4e:	2904      	cmp	r1, #4
   14c50:	d1e8      	bne.n	14c24 <isr_rx_conn+0x600>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14c52:	2a00      	cmp	r2, #0
   14c54:	db01      	blt.n	14c5a <isr_rx_conn+0x636>
   14c56:	2200      	movs	r2, #0
   14c58:	e7af      	b.n	14bba <isr_rx_conn+0x596>
		((!conn->refresh &&
   14c5a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	       (conn->role &&
   14c5e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   14c62:	d109      	bne.n	14c78 <isr_rx_conn+0x654>
		((!conn->refresh &&
   14c64:	2902      	cmp	r1, #2
   14c66:	d007      	beq.n	14c78 <isr_rx_conn+0x654>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14c68:	2906      	cmp	r1, #6
   14c6a:	d014      	beq.n	14c96 <isr_rx_conn+0x672>
   14c6c:	290d      	cmp	r1, #13
   14c6e:	d014      	beq.n	14c9a <isr_rx_conn+0x676>
   14c70:	2911      	cmp	r1, #17
   14c72:	d114      	bne.n	14c9e <isr_rx_conn+0x67a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14c74:	2200      	movs	r2, #0
   14c76:	e7a0      	b.n	14bba <isr_rx_conn+0x596>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14c78:	b13a      	cbz	r2, 14c8a <isr_rx_conn+0x666>
		 (conn->refresh &&
   14c7a:	2902      	cmp	r1, #2
   14c7c:	d007      	beq.n	14c8e <isr_rx_conn+0x66a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14c7e:	290b      	cmp	r1, #11
   14c80:	d007      	beq.n	14c92 <isr_rx_conn+0x66e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14c82:	2903      	cmp	r1, #3
   14c84:	d1f0      	bne.n	14c68 <isr_rx_conn+0x644>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14c86:	2200      	movs	r2, #0
   14c88:	e797      	b.n	14bba <isr_rx_conn+0x596>
   14c8a:	2200      	movs	r2, #0
   14c8c:	e795      	b.n	14bba <isr_rx_conn+0x596>
   14c8e:	2200      	movs	r2, #0
   14c90:	e793      	b.n	14bba <isr_rx_conn+0x596>
   14c92:	2200      	movs	r2, #0
   14c94:	e791      	b.n	14bba <isr_rx_conn+0x596>
   14c96:	2200      	movs	r2, #0
   14c98:	e78f      	b.n	14bba <isr_rx_conn+0x596>
   14c9a:	2200      	movs	r2, #0
   14c9c:	e78d      	b.n	14bba <isr_rx_conn+0x596>
   14c9e:	2201      	movs	r2, #1
   14ca0:	e78b      	b.n	14bba <isr_rx_conn+0x596>
				LL_ASSERT(!radio_is_ready());
   14ca2:	4040      	eors	r0, r0
   14ca4:	f380 8811 	msr	BASEPRI, r0
   14ca8:	f04f 0004 	mov.w	r0, #4
   14cac:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   14cae:	2200      	movs	r2, #0
   14cb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   14cb4:	4b70      	ldr	r3, [pc, #448]	; (14e78 <isr_rx_conn+0x854>)
   14cb6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14cba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   14cbe:	7a2b      	ldrb	r3, [r5, #8]
   14cc0:	f013 0303 	ands.w	r3, r3, #3
   14cc4:	d00c      	beq.n	14ce0 <isr_rx_conn+0x6bc>
   14cc6:	2b02      	cmp	r3, #2
   14cc8:	d905      	bls.n	14cd6 <isr_rx_conn+0x6b2>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
   14cca:	f10d 010b 	add.w	r1, sp, #11
   14cce:	4628      	mov	r0, r5
   14cd0:	f7fe fb4c 	bl	1336c <isr_rx_conn_pkt_ctrl>
   14cd4:	e030      	b.n	14d38 <isr_rx_conn+0x714>
				*rx_enqueue = 1;
   14cd6:	2301      	movs	r3, #1
   14cd8:	f88d 300b 	strb.w	r3, [sp, #11]
	u8_t nack = 0;
   14cdc:	4648      	mov	r0, r9
   14cde:	e02b      	b.n	14d38 <isr_rx_conn+0x714>
				LL_ASSERT(0);
   14ce0:	4040      	eors	r0, r0
   14ce2:	f380 8811 	msr	BASEPRI, r0
   14ce6:	f04f 0004 	mov.w	r0, #4
   14cea:	df02      	svc	2
		} else if ((_radio.conn_curr->enc_rx) ||
   14cec:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14cf0:	f013 0f14 	tst.w	r3, #20
   14cf4:	d01f      	beq.n	14d36 <isr_rx_conn+0x712>
			appto_reload_new = (conn->apto_reload >
   14cf6:	f8b1 204a 	ldrh.w	r2, [r1, #74]	; 0x4a
					    (conn->latency + 6)) ?
   14cfa:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
   14cfc:	1d9c      	adds	r4, r3, #6
			appto_reload_new = (conn->apto_reload >
   14cfe:	42a2      	cmp	r2, r4
   14d00:	dd04      	ble.n	14d0c <isr_rx_conn+0x6e8>
					   (conn->apto_reload -
   14d02:	1ad3      	subs	r3, r2, r3
   14d04:	b29b      	uxth	r3, r3
			appto_reload_new = (conn->apto_reload >
   14d06:	3b06      	subs	r3, #6
   14d08:	b29b      	uxth	r3, r3
   14d0a:	e000      	b.n	14d0e <isr_rx_conn+0x6ea>
   14d0c:	4613      	mov	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   14d0e:	f8b1 4046 	ldrh.w	r4, [r1, #70]	; 0x46
   14d12:	429c      	cmp	r4, r3
   14d14:	d004      	beq.n	14d20 <isr_rx_conn+0x6fc>
				conn->appto_reload = appto_reload_new;
   14d16:	f8a1 3046 	strh.w	r3, [r1, #70]	; 0x46
				conn->apto_expire = 0;
   14d1a:	2300      	movs	r3, #0
   14d1c:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   14d20:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
   14d24:	bb3b      	cbnz	r3, 14d76 <isr_rx_conn+0x752>
				conn->appto_expire = conn->appto_reload;
   14d26:	f8b1 3046 	ldrh.w	r3, [r1, #70]	; 0x46
   14d2a:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   14d2e:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		u8_t ccm_rx_increment = 0;
   14d32:	4604      	mov	r4, r0
   14d34:	e000      	b.n	14d38 <isr_rx_conn+0x714>
   14d36:	4604      	mov	r4, r0
		if (!nack) {
   14d38:	bb38      	cbnz	r0, 14d8a <isr_rx_conn+0x766>
			_radio.conn_curr->nesn++;
   14d3a:	4b4f      	ldr	r3, [pc, #316]	; (14e78 <isr_rx_conn+0x854>)
   14d3c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14d40:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14d44:	f3c3 0240 	ubfx	r2, r3, #1, #1
   14d48:	f082 0201 	eor.w	r2, r2, #1
   14d4c:	f362 0341 	bfi	r3, r2, #1, #1
   14d50:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			if (ccm_rx_increment) {
   14d54:	b1dc      	cbz	r4, 14d8e <isr_rx_conn+0x76a>
				_radio.conn_curr->ccm_rx.counter++;
   14d56:	4b48      	ldr	r3, [pc, #288]	; (14e78 <isr_rx_conn+0x854>)
   14d58:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14d5c:	f8d1 2109 	ldr.w	r2, [r1, #265]	; 0x109
   14d60:	f8d1 310d 	ldr.w	r3, [r1, #269]	; 0x10d
   14d64:	3201      	adds	r2, #1
   14d66:	f143 0300 	adc.w	r3, r3, #0
   14d6a:	f8c1 2109 	str.w	r2, [r1, #265]	; 0x109
   14d6e:	f8c1 310d 	str.w	r3, [r1, #269]	; 0x10d
	return 0;
   14d72:	2300      	movs	r3, #0
   14d74:	e647      	b.n	14a06 <isr_rx_conn+0x3e2>
		u8_t ccm_rx_increment = 0;
   14d76:	4604      	mov	r4, r0
   14d78:	e7de      	b.n	14d38 <isr_rx_conn+0x714>
	return 0;
   14d7a:	2300      	movs	r3, #0
   14d7c:	e643      	b.n	14a06 <isr_rx_conn+0x3e2>
   14d7e:	2300      	movs	r3, #0
   14d80:	e641      	b.n	14a06 <isr_rx_conn+0x3e2>
   14d82:	2300      	movs	r3, #0
   14d84:	e63f      	b.n	14a06 <isr_rx_conn+0x3e2>
   14d86:	2300      	movs	r3, #0
   14d88:	e63d      	b.n	14a06 <isr_rx_conn+0x3e2>
   14d8a:	2300      	movs	r3, #0
   14d8c:	e63b      	b.n	14a06 <isr_rx_conn+0x3e2>
   14d8e:	2300      	movs	r3, #0
   14d90:	e639      	b.n	14a06 <isr_rx_conn+0x3e2>
	struct radio_pdu_node_tx *tx_release = NULL;
   14d92:	2600      	movs	r6, #0
   14d94:	e47a      	b.n	1468c <isr_rx_conn+0x68>
			STATE_CLOSE : STATE_TX;
   14d96:	2303      	movs	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14d98:	4a37      	ldr	r2, [pc, #220]	; (14e78 <isr_rx_conn+0x854>)
   14d9a:	7413      	strb	r3, [r2, #16]
	if (_radio.state == STATE_CLOSE) {
   14d9c:	2b03      	cmp	r3, #3
   14d9e:	d040      	beq.n	14e22 <isr_rx_conn+0x7fe>
		radio_tmr_tifs_set(RADIO_TIFS);
   14da0:	2096      	movs	r0, #150	; 0x96
   14da2:	f7fa fe0f 	bl	f9c4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   14da6:	4b34      	ldr	r3, [pc, #208]	; (14e78 <isr_rx_conn+0x854>)
   14da8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14dac:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   14db0:	f000 0007 	and.w	r0, r0, #7
   14db4:	f7fa fd54 	bl	f860 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   14db8:	f7fa febc 	bl	fb34 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   14dbc:	9a03      	ldr	r2, [sp, #12]
   14dbe:	4b2e      	ldr	r3, [pc, #184]	; (14e78 <isr_rx_conn+0x854>)
   14dc0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14dc4:	f891 00f8 	ldrb.w	r0, [r1, #248]	; 0xf8
   14dc8:	7811      	ldrb	r1, [r2, #0]
   14dca:	f360 01c3 	bfi	r1, r0, #3, #1
   14dce:	7011      	strb	r1, [r2, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   14dd0:	9903      	ldr	r1, [sp, #12]
   14dd2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14dd6:	f892 20f8 	ldrb.w	r2, [r2, #248]	; 0xf8
   14dda:	f3c2 0240 	ubfx	r2, r2, #1, #1
   14dde:	7808      	ldrb	r0, [r1, #0]
   14de0:	f362 0082 	bfi	r0, r2, #2, #1
   14de4:	7008      	strb	r0, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   14de6:	9903      	ldr	r1, [sp, #12]
   14de8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   14dec:	f7fd fdde 	bl	129ac <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   14df0:	f7fa fcfa 	bl	f7e8 <radio_is_ready>
   14df4:	bb38      	cbnz	r0, 14e46 <isr_rx_conn+0x822>
	if (!radio_tmr_aa_restore()) {
   14df6:	f7fa fe91 	bl	fb1c <radio_tmr_aa_restore>
   14dfa:	b350      	cbz	r0, 14e52 <isr_rx_conn+0x82e>
	if (!_radio.conn_curr) {
   14dfc:	4b1e      	ldr	r3, [pc, #120]	; (14e78 <isr_rx_conn+0x854>)
   14dfe:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14e02:	b13b      	cbz	r3, 14e14 <isr_rx_conn+0x7f0>
	if (tx_release) {
   14e04:	b11e      	cbz	r6, 14e0e <isr_rx_conn+0x7ea>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   14e06:	4631      	mov	r1, r6
   14e08:	8c18      	ldrh	r0, [r3, #32]
   14e0a:	f7fd fb9f 	bl	1254c <pdu_node_tx_release>
	if (rx_enqueue) {
   14e0e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14e12:	bb1b      	cbnz	r3, 14e5c <isr_rx_conn+0x838>
}
   14e14:	b004      	add	sp, #16
   14e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			STATE_CLOSE : STATE_TX;
   14e1a:	2303      	movs	r3, #3
   14e1c:	e7bc      	b.n	14d98 <isr_rx_conn+0x774>
   14e1e:	2302      	movs	r3, #2
   14e20:	e7ba      	b.n	14d98 <isr_rx_conn+0x774>
		if (_radio.role == ROLE_MASTER) {
   14e22:	7bd3      	ldrb	r3, [r2, #15]
   14e24:	b2db      	uxtb	r3, r3
   14e26:	2b04      	cmp	r3, #4
   14e28:	d002      	beq.n	14e30 <isr_rx_conn+0x80c>
			radio_switch_complete_and_disable();
   14e2a:	f7fa fd29 	bl	f880 <radio_switch_complete_and_disable>
   14e2e:	e7c5      	b.n	14dbc <isr_rx_conn+0x798>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   14e30:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14e34:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14e38:	f368 12c7 	bfi	r2, r8, #7, #1
   14e3c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   14e40:	f7fa fcb8 	bl	f7b4 <radio_disable>
			goto isr_rx_conn_exit;
   14e44:	e7d7      	b.n	14df6 <isr_rx_conn+0x7d2>
	LL_ASSERT(!radio_is_ready());
   14e46:	4040      	eors	r0, r0
   14e48:	f380 8811 	msr	BASEPRI, r0
   14e4c:	f04f 0004 	mov.w	r0, #4
   14e50:	df02      	svc	2
		radio_tmr_aa_save(radio_tmr_aa_get());
   14e52:	f7fa fe57 	bl	fb04 <radio_tmr_aa_get>
   14e56:	f7fa fe5b 	bl	fb10 <radio_tmr_aa_save>
   14e5a:	e7cf      	b.n	14dfc <isr_rx_conn+0x7d8>
		rx_fc_lock(_radio.conn_curr->handle);
   14e5c:	4c06      	ldr	r4, [pc, #24]	; (14e78 <isr_rx_conn+0x854>)
   14e5e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14e62:	8c18      	ldrh	r0, [r3, #32]
   14e64:	f7fc fdec 	bl	11a40 <rx_fc_lock>
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   14e68:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14e6c:	8c1b      	ldrh	r3, [r3, #32]
   14e6e:	80eb      	strh	r3, [r5, #6]
		packet_rx_enqueue();
   14e70:	f7ff fad0 	bl	14414 <packet_rx_enqueue>
	return;
   14e74:	e7ce      	b.n	14e14 <isr_rx_conn+0x7f0>
   14e76:	bf00      	nop
   14e78:	20000ff4 	.word	0x20000ff4

00014e7c <prepare_normal_set>:
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14e7c:	6803      	ldr	r3, [r0, #0]
   14e7e:	2b00      	cmp	r3, #0
   14e80:	db00      	blt.n	14e84 <prepare_normal_set+0x8>
   14e82:	4770      	bx	lr
{
   14e84:	b530      	push	{r4, r5, lr}
   14e86:	b089      	sub	sp, #36	; 0x24
			ticks_active_to_start : hdr->ticks_preempt_to_start;
   14e88:	6885      	ldr	r5, [r0, #8]
			 hdr->ticks_preempt_to_start) ? hdr->
   14e8a:	6844      	ldr	r4, [r0, #4]
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
   14e8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		u32_t ticks_drift_minus =
   14e90:	42a5      	cmp	r5, r4
   14e92:	bf2c      	ite	cs
   14e94:	1b5b      	subcs	r3, r3, r5
   14e96:	1b1b      	subcc	r3, r3, r4
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14e98:	b29b      	uxth	r3, r3
		ticker_status =
   14e9a:	9006      	str	r0, [sp, #24]
   14e9c:	480a      	ldr	r0, [pc, #40]	; (14ec8 <prepare_normal_set+0x4c>)
   14e9e:	9005      	str	r0, [sp, #20]
   14ea0:	2000      	movs	r0, #0
   14ea2:	9004      	str	r0, [sp, #16]
   14ea4:	9003      	str	r0, [sp, #12]
   14ea6:	9002      	str	r0, [sp, #8]
   14ea8:	9301      	str	r3, [sp, #4]
   14eaa:	9300      	str	r3, [sp, #0]
   14eac:	4603      	mov	r3, r0
   14eae:	f7fb ff89 	bl	10dc4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14eb2:	b108      	cbz	r0, 14eb8 <prepare_normal_set+0x3c>
   14eb4:	2802      	cmp	r0, #2
   14eb6:	d101      	bne.n	14ebc <prepare_normal_set+0x40>
}
   14eb8:	b009      	add	sp, #36	; 0x24
   14eba:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14ebc:	4040      	eors	r0, r0
   14ebe:	f380 8811 	msr	BASEPRI, r0
   14ec2:	f04f 0004 	mov.w	r0, #4
   14ec6:	df02      	svc	2
   14ec8:	00011745 	.word	0x00011745

00014ecc <event_common_prepare>:
{
   14ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14ed0:	b08a      	sub	sp, #40	; 0x28
   14ed2:	4681      	mov	r9, r0
   14ed4:	468a      	mov	sl, r1
   14ed6:	4616      	mov	r6, r2
   14ed8:	461f      	mov	r7, r3
   14eda:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   14ede:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   14ee0:	f8d3 8000 	ldr.w	r8, [r3]
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14ee4:	2c00      	cmp	r4, #0
   14ee6:	db25      	blt.n	14f34 <event_common_prepare+0x68>
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   14ee8:	4544      	cmp	r4, r8
   14eea:	d828      	bhi.n	14f3e <event_common_prepare+0x72>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   14eec:	4544      	cmp	r4, r8
   14eee:	d251      	bcs.n	14f94 <event_common_prepare+0xc8>
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   14ef0:	eba8 0404 	sub.w	r4, r8, r4
		event_active(0, 0, 0, NULL);
   14ef4:	2300      	movs	r3, #0
   14ef6:	461a      	mov	r2, r3
   14ef8:	4619      	mov	r1, r3
   14efa:	4618      	mov	r0, r3
   14efc:	f7fd fa3a 	bl	12374 <event_active>
		ticker_status =
   14f00:	f241 43d1 	movw	r3, #5329	; 0x14d1
   14f04:	9308      	str	r3, [sp, #32]
   14f06:	4b5e      	ldr	r3, [pc, #376]	; (15080 <event_common_prepare+0x1b4>)
   14f08:	9307      	str	r3, [sp, #28]
   14f0a:	2000      	movs	r0, #0
   14f0c:	9006      	str	r0, [sp, #24]
   14f0e:	4b5d      	ldr	r3, [pc, #372]	; (15084 <event_common_prepare+0x1b8>)
   14f10:	9305      	str	r3, [sp, #20]
   14f12:	9004      	str	r0, [sp, #16]
   14f14:	9003      	str	r0, [sp, #12]
   14f16:	9002      	str	r0, [sp, #8]
   14f18:	9001      	str	r0, [sp, #4]
   14f1a:	9400      	str	r4, [sp, #0]
   14f1c:	464b      	mov	r3, r9
   14f1e:	2201      	movs	r2, #1
   14f20:	4601      	mov	r1, r0
   14f22:	f7fb ff01 	bl	10d28 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f26:	2800      	cmp	r0, #0
   14f28:	f000 8091 	beq.w	1504e <event_common_prepare+0x182>
   14f2c:	2802      	cmp	r0, #2
   14f2e:	d12b      	bne.n	14f88 <event_common_prepare+0xbc>
		ticks_to_start = _ticks_active_to_start;
   14f30:	4644      	mov	r4, r8
   14f32:	e03b      	b.n	14fac <event_common_prepare+0xe0>
		_ticks_xtal_to_start =
   14f34:	9c12      	ldr	r4, [sp, #72]	; 0x48
   14f36:	4544      	cmp	r4, r8
   14f38:	bf38      	it	cc
   14f3a:	4644      	movcc	r4, r8
   14f3c:	e7d4      	b.n	14ee8 <event_common_prepare+0x1c>
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   14f3e:	eba4 0308 	sub.w	r3, r4, r8
		ticker_status =
   14f42:	f241 42bc 	movw	r2, #5308	; 0x14bc
   14f46:	9208      	str	r2, [sp, #32]
   14f48:	4a4d      	ldr	r2, [pc, #308]	; (15080 <event_common_prepare+0x1b4>)
   14f4a:	9207      	str	r2, [sp, #28]
   14f4c:	2000      	movs	r0, #0
   14f4e:	9006      	str	r0, [sp, #24]
   14f50:	4a4d      	ldr	r2, [pc, #308]	; (15088 <event_common_prepare+0x1bc>)
   14f52:	9205      	str	r2, [sp, #20]
   14f54:	9004      	str	r0, [sp, #16]
   14f56:	9003      	str	r0, [sp, #12]
   14f58:	9002      	str	r0, [sp, #8]
   14f5a:	9001      	str	r0, [sp, #4]
   14f5c:	9300      	str	r3, [sp, #0]
   14f5e:	464b      	mov	r3, r9
   14f60:	2201      	movs	r2, #1
   14f62:	4601      	mov	r1, r0
   14f64:	f7fb fee0 	bl	10d28 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f68:	b108      	cbz	r0, 14f6e <event_common_prepare+0xa2>
   14f6a:	2802      	cmp	r0, #2
   14f6c:	d106      	bne.n	14f7c <event_common_prepare+0xb0>
		event_xtal(0, 0, 0, NULL);
   14f6e:	2300      	movs	r3, #0
   14f70:	461a      	mov	r2, r3
   14f72:	4619      	mov	r1, r3
   14f74:	4618      	mov	r0, r3
   14f76:	f7fd fa0f 	bl	12398 <event_xtal>
   14f7a:	e017      	b.n	14fac <event_common_prepare+0xe0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f7c:	4040      	eors	r0, r0
   14f7e:	f380 8811 	msr	BASEPRI, r0
   14f82:	f04f 0004 	mov.w	r0, #4
   14f86:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f88:	4040      	eors	r0, r0
   14f8a:	f380 8811 	msr	BASEPRI, r0
   14f8e:	f04f 0004 	mov.w	r0, #4
   14f92:	df02      	svc	2
		event_active(0, 0, 0, NULL);
   14f94:	2300      	movs	r3, #0
   14f96:	461a      	mov	r2, r3
   14f98:	4619      	mov	r1, r3
   14f9a:	4618      	mov	r0, r3
   14f9c:	f7fd f9ea 	bl	12374 <event_active>
		event_xtal(0, 0, 0, NULL);
   14fa0:	2300      	movs	r3, #0
   14fa2:	461a      	mov	r2, r3
   14fa4:	4619      	mov	r1, r3
   14fa6:	4618      	mov	r0, r3
   14fa8:	f7fd f9f6 	bl	12398 <event_xtal>
	_radio.remainder_anchor = remainder;
   14fac:	4b37      	ldr	r3, [pc, #220]	; (1508c <event_common_prepare+0x1c0>)
   14fae:	f8c3 a008 	str.w	sl, [r3, #8]
	ticker_status =
   14fb2:	f241 43e9 	movw	r3, #5353	; 0x14e9
   14fb6:	9308      	str	r3, [sp, #32]
   14fb8:	4b31      	ldr	r3, [pc, #196]	; (15080 <event_common_prepare+0x1b4>)
   14fba:	9307      	str	r3, [sp, #28]
   14fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14fbe:	9306      	str	r3, [sp, #24]
   14fc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14fc2:	9305      	str	r3, [sp, #20]
   14fc4:	2000      	movs	r0, #0
   14fc6:	9004      	str	r0, [sp, #16]
   14fc8:	9003      	str	r0, [sp, #12]
   14fca:	9002      	str	r0, [sp, #8]
   14fcc:	9001      	str	r0, [sp, #4]
   14fce:	9400      	str	r4, [sp, #0]
   14fd0:	464b      	mov	r3, r9
   14fd2:	4602      	mov	r2, r0
   14fd4:	4601      	mov	r1, r0
   14fd6:	f7fb fea7 	bl	10d28 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14fda:	b108      	cbz	r0, 14fe0 <event_common_prepare+0x114>
   14fdc:	2802      	cmp	r0, #2
   14fde:	d138      	bne.n	15052 <event_common_prepare+0x186>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   14fe0:	2305      	movs	r3, #5
   14fe2:	2200      	movs	r2, #0
   14fe4:	4611      	mov	r1, r2
   14fe6:	4610      	mov	r0, r2
   14fe8:	f7fd f93a 	bl	12260 <event_stop>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   14fec:	4b27      	ldr	r3, [pc, #156]	; (1508c <event_common_prepare+0x1c0>)
   14fee:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
   14ff2:	4598      	cmp	r8, r3
   14ff4:	d01d      	beq.n	15032 <event_common_prepare+0x166>
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
   14ff6:	6832      	ldr	r2, [r6, #0]
   14ff8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		u32_t ticks_to_start_new =
   14ffc:	429a      	cmp	r2, r3
   14ffe:	bf38      	it	cc
   15000:	461a      	movcc	r2, r3
		*ticks_active_to_start = _radio.ticks_active_to_start;
   15002:	603b      	str	r3, [r7, #0]
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
   15004:	6833      	ldr	r3, [r6, #0]
   15006:	2b00      	cmp	r3, #0
   15008:	db29      	blt.n	1505e <event_common_prepare+0x192>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1500a:	b2a3      	uxth	r3, r4
   1500c:	b292      	uxth	r2, r2
		ticker_status =
   1500e:	f241 5116 	movw	r1, #5398	; 0x1516
   15012:	9106      	str	r1, [sp, #24]
   15014:	491a      	ldr	r1, [pc, #104]	; (15080 <event_common_prepare+0x1b4>)
   15016:	9105      	str	r1, [sp, #20]
   15018:	2000      	movs	r0, #0
   1501a:	9004      	str	r0, [sp, #16]
   1501c:	9003      	str	r0, [sp, #12]
   1501e:	9302      	str	r3, [sp, #8]
   15020:	9201      	str	r2, [sp, #4]
   15022:	9200      	str	r2, [sp, #0]
   15024:	462a      	mov	r2, r5
   15026:	4601      	mov	r1, r0
   15028:	f7fb fecc 	bl	10dc4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1502c:	b108      	cbz	r0, 15032 <event_common_prepare+0x166>
   1502e:	2802      	cmp	r0, #2
   15030:	d119      	bne.n	15066 <event_common_prepare+0x19a>
	packet_tx_enqueue(0xFF);
   15032:	20ff      	movs	r0, #255	; 0xff
   15034:	f7fd fab6 	bl	125a4 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   15038:	4b15      	ldr	r3, [pc, #84]	; (15090 <event_common_prepare+0x1c4>)
   1503a:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1503c:	2201      	movs	r2, #1
   1503e:	4611      	mov	r1, r2
   15040:	2000      	movs	r0, #0
   15042:	f7fa f861 	bl	f108 <mayfly_enqueue>
		LL_ASSERT(!retval);
   15046:	b9a0      	cbnz	r0, 15072 <event_common_prepare+0x1a6>
}
   15048:	b00a      	add	sp, #40	; 0x28
   1504a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ticks_to_start = _ticks_active_to_start;
   1504e:	4644      	mov	r4, r8
   15050:	e7ac      	b.n	14fac <event_common_prepare+0xe0>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15052:	4040      	eors	r0, r0
   15054:	f380 8811 	msr	BASEPRI, r0
   15058:	f04f 0004 	mov.w	r0, #4
   1505c:	df02      	svc	2
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
   1505e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   15062:	6033      	str	r3, [r6, #0]
   15064:	e7d1      	b.n	1500a <event_common_prepare+0x13e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15066:	4040      	eors	r0, r0
   15068:	f380 8811 	msr	BASEPRI, r0
   1506c:	f04f 0004 	mov.w	r0, #4
   15070:	df02      	svc	2
		LL_ASSERT(!retval);
   15072:	4040      	eors	r0, r0
   15074:	f380 8811 	msr	BASEPRI, r0
   15078:	f04f 0004 	mov.w	r0, #4
   1507c:	df02      	svc	2
   1507e:	bf00      	nop
   15080:	00011a7d 	.word	0x00011a7d
   15084:	00012399 	.word	0x00012399
   15088:	00012375 	.word	0x00012375
   1508c:	20000ff4 	.word	0x20000ff4
   15090:	2000be30 	.word	0x2000be30

00015094 <radio_event_adv_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   15094:	4b0d      	ldr	r3, [pc, #52]	; (150cc <radio_event_adv_prepare+0x38>)
   15096:	7b1b      	ldrb	r3, [r3, #12]
   15098:	b993      	cbnz	r3, 150c0 <radio_event_adv_prepare+0x2c>
{
   1509a:	b510      	push	{r4, lr}
   1509c:	b084      	sub	sp, #16
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   1509e:	4a0b      	ldr	r2, [pc, #44]	; (150cc <radio_event_adv_prepare+0x38>)
   150a0:	2305      	movs	r3, #5
   150a2:	7313      	strb	r3, [r2, #12]
	event_common_prepare(ticks_at_expire, remainder,
   150a4:	2400      	movs	r4, #0
   150a6:	9403      	str	r4, [sp, #12]
   150a8:	4c09      	ldr	r4, [pc, #36]	; (150d0 <radio_event_adv_prepare+0x3c>)
   150aa:	9402      	str	r4, [sp, #8]
   150ac:	9301      	str	r3, [sp, #4]
   150ae:	69d3      	ldr	r3, [r2, #28]
   150b0:	9300      	str	r3, [sp, #0]
   150b2:	f102 0318 	add.w	r3, r2, #24
   150b6:	3214      	adds	r2, #20
   150b8:	f7ff ff08 	bl	14ecc <event_common_prepare>
}
   150bc:	b004      	add	sp, #16
   150be:	bd10      	pop	{r4, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   150c0:	4040      	eors	r0, r0
   150c2:	f380 8811 	msr	BASEPRI, r0
   150c6:	f04f 0004 	mov.w	r0, #4
   150ca:	df02      	svc	2
   150cc:	20000ff4 	.word	0x20000ff4
   150d0:	00016991 	.word	0x00016991
   150d4:	00000000 	.word	0x00000000

000150d8 <event_connection_prepare>:
{
   150d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150dc:	b08f      	sub	sp, #60	; 0x3c
	LL_ASSERT(!_radio.ticker_id_prepare);
   150de:	4ccb      	ldr	r4, [pc, #812]	; (1540c <event_connection_prepare+0x334>)
   150e0:	7b24      	ldrb	r4, [r4, #12]
   150e2:	2c00      	cmp	r4, #0
   150e4:	d135      	bne.n	15152 <event_connection_prepare+0x7a>
				   conn->handle;
   150e6:	8c1d      	ldrh	r5, [r3, #32]
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   150e8:	3507      	adds	r5, #7
   150ea:	b2ed      	uxtb	r5, r5
   150ec:	4cc7      	ldr	r4, [pc, #796]	; (1540c <event_connection_prepare+0x334>)
   150ee:	7325      	strb	r5, [r4, #12]
	if (conn->role) {
   150f0:	f993 401d 	ldrsb.w	r4, [r3, #29]
   150f4:	2c00      	cmp	r4, #0
   150f6:	db32      	blt.n	1515e <event_connection_prepare+0x86>
   150f8:	461c      	mov	r4, r3
   150fa:	910a      	str	r1, [sp, #40]	; 0x28
   150fc:	4606      	mov	r6, r0
	conn->latency_prepare += lazy;
   150fe:	8d1d      	ldrh	r5, [r3, #40]	; 0x28
   15100:	4415      	add	r5, r2
   15102:	b2ad      	uxth	r5, r5
   15104:	851d      	strh	r5, [r3, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   15106:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   15108:	441d      	add	r5, r3
   1510a:	b2ad      	uxth	r5, r5
	if (conn->llcp_ack == conn->llcp_req) {
   1510c:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   15110:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15114:	429a      	cmp	r2, r3
   15116:	d02d      	beq.n	15174 <event_connection_prepare+0x9c>
	if (conn->llcp_ack != conn->llcp_req) {
   15118:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   1511c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15120:	429a      	cmp	r2, r3
   15122:	f000 861a 	beq.w	15d5a <event_connection_prepare+0xc82>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15126:	2305      	movs	r3, #5
   15128:	2200      	movs	r2, #0
   1512a:	4611      	mov	r1, r2
   1512c:	4610      	mov	r0, r2
   1512e:	f7fd f897 	bl	12260 <event_stop>
		switch (conn->llcp_type) {
   15132:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   15136:	3b01      	subs	r3, #1
   15138:	2b07      	cmp	r3, #7
   1513a:	f201 80d6 	bhi.w	162ea <event_connection_prepare+0x1212>
   1513e:	e8df f013 	tbh	[pc, r3, lsl #1]
   15142:	029f      	.short	0x029f
   15144:	05b1054e 	.word	0x05b1054e
   15148:	072706ee 	.word	0x072706ee
   1514c:	07ac08d4 	.word	0x07ac08d4
   15150:	07c7      	.short	0x07c7
	LL_ASSERT(!_radio.ticker_id_prepare);
   15152:	4040      	eors	r0, r0
   15154:	f380 8811 	msr	BASEPRI, r0
   15158:	f04f 0004 	mov.w	r0, #4
   1515c:	df02      	svc	2
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   1515e:	6d5c      	ldr	r4, [r3, #84]	; 0x54
   15160:	fb02 4404 	mla	r4, r2, r4, r4
		conn->slave.window_widening_prepare_us +=
   15164:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
   15166:	442c      	add	r4, r5
   15168:	65dc      	str	r4, [r3, #92]	; 0x5c
		    conn->slave.window_widening_max_us) {
   1516a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
		if (conn->slave.window_widening_prepare_us >
   1516c:	42ac      	cmp	r4, r5
   1516e:	d9c3      	bls.n	150f8 <event_connection_prepare+0x20>
			conn->slave.window_widening_prepare_us =
   15170:	65dd      	str	r5, [r3, #92]	; 0x5c
   15172:	e7c1      	b.n	150f8 <event_connection_prepare+0x20>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   15174:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   15178:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   1517c:	429a      	cmp	r2, r3
   1517e:	d00b      	beq.n	15198 <event_connection_prepare+0xc0>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   15180:	2305      	movs	r3, #5
   15182:	2200      	movs	r2, #0
   15184:	4611      	mov	r1, r2
   15186:	4610      	mov	r0, r2
   15188:	f7fd f86a 	bl	12260 <event_stop>
	conn_upd = _radio.conn_upd;
   1518c:	4b9f      	ldr	r3, [pc, #636]	; (1540c <event_connection_prepare+0x334>)
   1518e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (conn_upd && (conn_upd != conn)) {
   15192:	b1fb      	cbz	r3, 151d4 <event_connection_prepare+0xfc>
   15194:	429c      	cmp	r4, r3
   15196:	d01d      	beq.n	151d4 <event_connection_prepare+0xfc>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   15198:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   1519c:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   151a0:	429a      	cmp	r2, r3
   151a2:	d0b9      	beq.n	15118 <event_connection_prepare+0x40>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   151a4:	2305      	movs	r3, #5
   151a6:	2200      	movs	r2, #0
   151a8:	4611      	mov	r1, r2
   151aa:	4610      	mov	r0, r2
   151ac:	f7fd f858 	bl	12260 <event_stop>
	switch (conn->llcp_phy.state) {
   151b0:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   151b4:	f003 0303 	and.w	r3, r3, #3
   151b8:	2b03      	cmp	r3, #3
   151ba:	f200 8257 	bhi.w	1566c <event_connection_prepare+0x594>
   151be:	a201      	add	r2, pc, #4	; (adr r2, 151c4 <event_connection_prepare+0xec>)
   151c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   151c4:	000154bd 	.word	0x000154bd
   151c8:	00015119 	.word	0x00015119
   151cc:	00015119 	.word	0x00015119
   151d0:	00015537 	.word	0x00015537
	switch (conn->llcp_conn_param.state) {
   151d4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   151d8:	f003 0307 	and.w	r3, r3, #7
   151dc:	2b05      	cmp	r3, #5
   151de:	f200 8167 	bhi.w	154b0 <event_connection_prepare+0x3d8>
   151e2:	a201      	add	r2, pc, #4	; (adr r2, 151e8 <event_connection_prepare+0x110>)
   151e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   151e8:	00015201 	.word	0x00015201
   151ec:	000152cb 	.word	0x000152cb
   151f0:	00015419 	.word	0x00015419
   151f4:	00015199 	.word	0x00015199
   151f8:	00015199 	.word	0x00015199
   151fc:	00015199 	.word	0x00015199
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15200:	4883      	ldr	r0, [pc, #524]	; (15410 <event_connection_prepare+0x338>)
   15202:	f7fa f8c2 	bl	f38a <mem_acquire>
	if (!node_tx) {
   15206:	4680      	mov	r8, r0
   15208:	2800      	cmp	r0, #0
   1520a:	d0c5      	beq.n	15198 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   1520c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   15210:	2204      	movs	r2, #4
   15212:	f362 0302 	bfi	r3, r2, #0, #3
   15216:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1521a:	7903      	ldrb	r3, [r0, #4]
   1521c:	f043 0303 	orr.w	r3, r3, #3
   15220:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15222:	2318      	movs	r3, #24
   15224:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   15226:	230f      	movs	r3, #15
   15228:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   1522a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1522e:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   15230:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   15234:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   15236:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1523a:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   1523c:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   15240:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   15242:	2300      	movs	r3, #0
   15244:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count = event_counter;
   15246:	f8a0 5011 	strh.w	r5, [r0, #17]
	p->offset0 = 0x0000;
   1524a:	74c3      	strb	r3, [r0, #19]
   1524c:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   1524e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15252:	7543      	strb	r3, [r0, #21]
   15254:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   15256:	75c3      	strb	r3, [r0, #23]
   15258:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   1525a:	7643      	strb	r3, [r0, #25]
   1525c:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   1525e:	76c3      	strb	r3, [r0, #27]
   15260:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   15262:	7743      	strb	r3, [r0, #29]
   15264:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, node_tx);
   15266:	4601      	mov	r1, r0
   15268:	4620      	mov	r0, r4
   1526a:	f7fc fb1f 	bl	118ac <ctrl_tx_enqueue>
	_radio.conn_upd = conn;
   1526e:	4b67      	ldr	r3, [pc, #412]	; (1540c <event_connection_prepare+0x334>)
   15270:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
	conn->procedure_expire = conn->procedure_reload;
   15274:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15278:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   1527c:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   15280:	6823      	ldr	r3, [r4, #0]
   15282:	2b00      	cmp	r3, #0
   15284:	db13      	blt.n	152ae <event_connection_prepare+0x1d6>
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   15286:	f108 0313 	add.w	r3, r8, #19
   1528a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		s_mfy_sched_offset.param = (void *)conn;
   1528e:	4b61      	ldr	r3, [pc, #388]	; (15414 <event_connection_prepare+0x33c>)
   15290:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   15292:	2201      	movs	r2, #1
   15294:	4611      	mov	r1, r2
   15296:	2000      	movs	r0, #0
   15298:	f7f9 ff36 	bl	f108 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1529c:	2800      	cmp	r0, #0
   1529e:	f43f af7b 	beq.w	15198 <event_connection_prepare+0xc0>
   152a2:	4040      	eors	r0, r0
   152a4:	f380 8811 	msr	BASEPRI, r0
   152a8:	f04f 0004 	mov.w	r0, #4
   152ac:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   152ae:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   152b0:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   152b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   152b6:	4291      	cmp	r1, r2
   152b8:	bf2c      	ite	cs
   152ba:	ebc3 0301 	rsbcs	r3, r3, r1
   152be:	ebc3 0302 	rsbcc	r3, r3, r2
			conn->llcp_conn_param.ticks_ref -=
   152c2:	4433      	add	r3, r6
   152c4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   152c8:	e7dd      	b.n	15286 <event_connection_prepare+0x1ae>
	if (conn->llcp_conn_param.status) {
   152ca:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   152ce:	bbb3      	cbnz	r3, 1533e <event_connection_prepare+0x266>
	if (!conn->role) {
   152d0:	f994 301d 	ldrsb.w	r3, [r4, #29]
   152d4:	2b00      	cmp	r3, #0
   152d6:	db52      	blt.n	1537e <event_connection_prepare+0x2a6>
		if (conn->llcp_req != conn->llcp_ack) {
   152d8:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   152dc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   152e0:	429a      	cmp	r2, r3
   152e2:	f47f af59 	bne.w	15198 <event_connection_prepare+0xc0>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   152e6:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   152ea:	2105      	movs	r1, #5
   152ec:	f361 0202 	bfi	r2, r1, #0, #3
   152f0:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   152f4:	2001      	movs	r0, #1
   152f6:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   152fa:	2100      	movs	r1, #0
   152fc:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   15300:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
   15304:	f8a4 107a 	strh.w	r1, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   15308:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   1530c:	f8a4 107c 	strh.w	r1, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   15310:	f8b4 10c8 	ldrh.w	r1, [r4, #200]	; 0xc8
   15314:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   15318:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   1531c:	f04f 0e02 	mov.w	lr, #2
   15320:	f36e 0101 	bfi	r1, lr, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   15324:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   15328:	4042      	eors	r2, r0
   1532a:	f362 0182 	bfi	r1, r2, #2, #1
   1532e:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   15332:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
		conn->llcp_ack--;
   15336:	3b01      	subs	r3, #1
   15338:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   1533c:	e72c      	b.n	15198 <event_connection_prepare+0xc0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1533e:	4834      	ldr	r0, [pc, #208]	; (15410 <event_connection_prepare+0x338>)
   15340:	f7fa f823 	bl	f38a <mem_acquire>
		if (!node_tx) {
   15344:	4601      	mov	r1, r0
   15346:	2800      	cmp	r0, #0
   15348:	f43f af26 	beq.w	15198 <event_connection_prepare+0xc0>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1534c:	7903      	ldrb	r3, [r0, #4]
   1534e:	f043 0303 	orr.w	r3, r3, #3
   15352:	7103      	strb	r3, [r0, #4]
		pdu->payload.llctrl.opcode =
   15354:	2311      	movs	r3, #17
   15356:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15358:	2303      	movs	r3, #3
   1535a:	7143      	strb	r3, [r0, #5]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1535c:	230f      	movs	r3, #15
   1535e:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp_conn_param.status;
   15360:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   15364:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   15366:	4620      	mov	r0, r4
   15368:	f7fc faa0 	bl	118ac <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1536c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   15370:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   15374:	2200      	movs	r2, #0
   15376:	4b25      	ldr	r3, [pc, #148]	; (1540c <event_connection_prepare+0x334>)
   15378:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1537c:	e70c      	b.n	15198 <event_connection_prepare+0xc0>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1537e:	4824      	ldr	r0, [pc, #144]	; (15410 <event_connection_prepare+0x338>)
   15380:	f7fa f803 	bl	f38a <mem_acquire>
	if (!node_tx) {
   15384:	4601      	mov	r1, r0
   15386:	2800      	cmp	r0, #0
   15388:	f43f af06 	beq.w	15198 <event_connection_prepare+0xc0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1538c:	7903      	ldrb	r3, [r0, #4]
   1538e:	f043 0303 	orr.w	r3, r3, #3
   15392:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15394:	2318      	movs	r3, #24
   15396:	7143      	strb	r3, [r0, #5]
	pdu->payload.llctrl.opcode =
   15398:	2310      	movs	r3, #16
   1539a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   1539c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   153a0:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   153a2:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   153a6:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   153a8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   153ac:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   153ae:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   153b2:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   153b4:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   153b8:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count =
   153ba:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   153be:	f8a0 3011 	strh.w	r3, [r0, #17]
	p->offset0 = conn->llcp_conn_param.offset0;
   153c2:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   153c6:	f8a0 3013 	strh.w	r3, [r0, #19]
	p->offset1 = conn->llcp_conn_param.offset1;
   153ca:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   153ce:	f8a0 3015 	strh.w	r3, [r0, #21]
	p->offset2 = conn->llcp_conn_param.offset2;
   153d2:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   153d6:	f8a0 3017 	strh.w	r3, [r0, #23]
	p->offset3 = conn->llcp_conn_param.offset3;
   153da:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   153de:	f8a0 3019 	strh.w	r3, [r0, #25]
	p->offset4 = conn->llcp_conn_param.offset4;
   153e2:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
   153e6:	f8a0 301b 	strh.w	r3, [r0, #27]
	p->offset5 = conn->llcp_conn_param.offset5;
   153ea:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   153ee:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   153f2:	4620      	mov	r0, r4
   153f4:	f7fc fa5a 	bl	118ac <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   153f8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   153fc:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
   15400:	2200      	movs	r2, #0
   15402:	4b02      	ldr	r3, [pc, #8]	; (1540c <event_connection_prepare+0x334>)
   15404:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   15408:	e6c6      	b.n	15198 <event_connection_prepare+0xc0>
   1540a:	bf00      	nop
   1540c:	20000ff4 	.word	0x20000ff4
   15410:	2000114c 	.word	0x2000114c
   15414:	2000bdc0 	.word	0x2000bdc0
	if (conn->pause_tx) {
   15418:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   1541c:	f013 0f08 	tst.w	r3, #8
   15420:	f47f aeba 	bne.w	15198 <event_connection_prepare+0xc0>
	if (_radio.packet_rx_acquire >=
   15424:	4b94      	ldr	r3, [pc, #592]	; (15678 <event_connection_prepare+0x5a0>)
   15426:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1542a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1542e:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15430:	429a      	cmp	r2, r3
   15432:	d331      	bcc.n	15498 <event_connection_prepare+0x3c0>
			_radio.packet_rx_last);
   15434:	4b90      	ldr	r3, [pc, #576]	; (15678 <event_connection_prepare+0x5a0>)
   15436:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1543a:	1ad3      	subs	r3, r2, r3
   1543c:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1543e:	2b01      	cmp	r3, #1
   15440:	d934      	bls.n	154ac <event_connection_prepare+0x3d4>
	return _radio.packet_rx[_radio.packet_rx_last];
   15442:	4b8d      	ldr	r3, [pc, #564]	; (15678 <event_connection_prepare+0x5a0>)
   15444:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15448:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1544c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (!node_rx) {
   15450:	2b00      	cmp	r3, #0
   15452:	f43f aea1 	beq.w	15198 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   15456:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   1545a:	2103      	movs	r1, #3
   1545c:	f361 0202 	bfi	r2, r1, #0, #3
   15460:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
   15464:	8c22      	ldrh	r2, [r4, #32]
   15466:	80da      	strh	r2, [r3, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15468:	2201      	movs	r2, #1
   1546a:	711a      	strb	r2, [r3, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1546c:	7a1a      	ldrb	r2, [r3, #8]
   1546e:	430a      	orrs	r2, r1
   15470:	721a      	strb	r2, [r3, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15472:	2218      	movs	r2, #24
   15474:	725a      	strb	r2, [r3, #9]
	pdu->payload.llctrl.opcode =
   15476:	220f      	movs	r2, #15
   15478:	72da      	strb	r2, [r3, #11]
	p->interval_min = conn->llcp_conn_param.interval;
   1547a:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   1547e:	819a      	strh	r2, [r3, #12]
	p->interval_max = conn->llcp_conn_param.interval;
   15480:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   15484:	81da      	strh	r2, [r3, #14]
	p->latency = conn->llcp_conn_param.latency;
   15486:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   1548a:	821a      	strh	r2, [r3, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   1548c:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
   15490:	825a      	strh	r2, [r3, #18]
	packet_rx_enqueue();
   15492:	f7fe ffbf 	bl	14414 <packet_rx_enqueue>
   15496:	e67f      	b.n	15198 <event_connection_prepare+0xc0>
		return (_radio.packet_rx_count -
   15498:	4977      	ldr	r1, [pc, #476]	; (15678 <event_connection_prepare+0x5a0>)
   1549a:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   1549e:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   154a2:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   154a4:	fa52 f383 	uxtab	r3, r2, r3
   154a8:	b2db      	uxtb	r3, r3
   154aa:	e7c8      	b.n	1543e <event_connection_prepare+0x366>
		return 0;
   154ac:	2300      	movs	r3, #0
   154ae:	e7cf      	b.n	15450 <event_connection_prepare+0x378>
		LL_ASSERT(0);
   154b0:	4040      	eors	r0, r0
   154b2:	f380 8811 	msr	BASEPRI, r0
   154b6:	f04f 0004 	mov.w	r0, #4
   154ba:	df02      	svc	2
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   154bc:	486f      	ldr	r0, [pc, #444]	; (1567c <event_connection_prepare+0x5a4>)
   154be:	f7f9 ff64 	bl	f38a <mem_acquire>
		if (!node_tx) {
   154c2:	4601      	mov	r1, r0
   154c4:	2800      	cmp	r0, #0
   154c6:	f43f ae27 	beq.w	15118 <event_connection_prepare+0x40>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   154ca:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   154ce:	2201      	movs	r2, #1
   154d0:	f362 0301 	bfi	r3, r2, #0, #2
   154d4:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   154d8:	b2db      	uxtb	r3, r3
   154da:	f3c3 0082 	ubfx	r0, r3, #2, #3
   154de:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   154e2:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   154e6:	095b      	lsrs	r3, r3, #5
   154e8:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
   154ec:	f363 00c5 	bfi	r0, r3, #3, #3
   154f0:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
   154f4:	f894 00f7 	ldrb.w	r0, [r4, #247]	; 0xf7
   154f8:	4613      	mov	r3, r2
   154fa:	f360 1386 	bfi	r3, r0, #6, #1
   154fe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15502:	790b      	ldrb	r3, [r1, #4]
   15504:	f043 0303 	orr.w	r3, r3, #3
   15508:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1550a:	2303      	movs	r3, #3
   1550c:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   1550e:	2316      	movs	r3, #22
   15510:	71cb      	strb	r3, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
   15512:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15516:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1551a:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   1551c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15520:	f3c3 1342 	ubfx	r3, r3, #5, #3
   15524:	724b      	strb	r3, [r1, #9]
		ctrl_tx_enqueue(conn, node_tx);
   15526:	4620      	mov	r0, r4
   15528:	f7fc f9c0 	bl	118ac <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   1552c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15530:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15534:	e5f0      	b.n	15118 <event_connection_prepare+0x40>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   15536:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1553a:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
   1553e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15542:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15546:	f013 0f02 	tst.w	r3, #2
   1554a:	d047      	beq.n	155dc <event_connection_prepare+0x504>
			conn->llcp_phy.tx = BIT(1);
   1554c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15550:	2202      	movs	r2, #2
   15552:	f362 0384 	bfi	r3, r2, #2, #3
   15556:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
   1555a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1555e:	095b      	lsrs	r3, r3, #5
   15560:	f013 0f02 	tst.w	r3, #2
   15564:	d057      	beq.n	15616 <event_connection_prepare+0x53e>
			conn->llcp_phy.rx = BIT(1);
   15566:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1556a:	2202      	movs	r2, #2
   1556c:	f362 1347 	bfi	r3, r2, #5, #3
   15570:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
   15574:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15578:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1557c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   15580:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   15584:	4293      	cmp	r3, r2
   15586:	d063      	beq.n	15650 <event_connection_prepare+0x578>
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
   15588:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1558c:	f363 0284 	bfi	r2, r3, #2, #3
   15590:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
   15594:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15598:	095b      	lsrs	r3, r3, #5
   1559a:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   1559e:	f002 0207 	and.w	r2, r2, #7
   155a2:	4293      	cmp	r3, r2
   155a4:	d05b      	beq.n	1565e <event_connection_prepare+0x586>
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   155a6:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   155aa:	f363 1247 	bfi	r2, r3, #5, #3
   155ae:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   155b2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   155b6:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   155ba:	f3c2 0240 	ubfx	r2, r2, #1, #1
   155be:	f043 0301 	orr.w	r3, r3, #1
   155c2:	f362 0341 	bfi	r3, r2, #1, #1
   155c6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   155ca:	2308      	movs	r3, #8
   155cc:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   155d0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   155d4:	3b01      	subs	r3, #1
   155d6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   155da:	e59d      	b.n	15118 <event_connection_prepare+0x40>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   155dc:	f013 0f01 	tst.w	r3, #1
   155e0:	d007      	beq.n	155f2 <event_connection_prepare+0x51a>
			conn->llcp_phy.tx = BIT(0);
   155e2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   155e6:	2201      	movs	r2, #1
   155e8:	f362 0384 	bfi	r3, r2, #2, #3
   155ec:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   155f0:	e7b3      	b.n	1555a <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   155f2:	f013 0f04 	tst.w	r3, #4
   155f6:	d007      	beq.n	15608 <event_connection_prepare+0x530>
			conn->llcp_phy.tx = BIT(2);
   155f8:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   155fc:	2204      	movs	r2, #4
   155fe:	f362 0384 	bfi	r3, r2, #2, #3
   15602:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15606:	e7a8      	b.n	1555a <event_connection_prepare+0x482>
			conn->llcp_phy.tx = 0;
   15608:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1560c:	f36f 0384 	bfc	r3, #2, #3
   15610:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15614:	e7a1      	b.n	1555a <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   15616:	f013 0f01 	tst.w	r3, #1
   1561a:	d007      	beq.n	1562c <event_connection_prepare+0x554>
			conn->llcp_phy.rx = BIT(0);
   1561c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15620:	2201      	movs	r2, #1
   15622:	f362 1347 	bfi	r3, r2, #5, #3
   15626:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   1562a:	e7a3      	b.n	15574 <event_connection_prepare+0x49c>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   1562c:	f013 0f04 	tst.w	r3, #4
   15630:	d007      	beq.n	15642 <event_connection_prepare+0x56a>
			conn->llcp_phy.rx = BIT(2);
   15632:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15636:	2204      	movs	r2, #4
   15638:	f362 1347 	bfi	r3, r2, #5, #3
   1563c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15640:	e798      	b.n	15574 <event_connection_prepare+0x49c>
			conn->llcp_phy.rx = 0;
   15642:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15646:	f36f 1347 	bfc	r3, #5, #3
   1564a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   1564e:	e791      	b.n	15574 <event_connection_prepare+0x49c>
			conn->llcp.phy_upd_ind.tx = 0;
   15650:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15654:	f36f 0384 	bfc	r3, #2, #3
   15658:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1565c:	e79a      	b.n	15594 <event_connection_prepare+0x4bc>
			conn->llcp.phy_upd_ind.rx = 0;
   1565e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15662:	f36f 1347 	bfc	r3, #5, #3
   15666:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1566a:	e7a2      	b.n	155b2 <event_connection_prepare+0x4da>
		LL_ASSERT(0);
   1566c:	4040      	eors	r0, r0
   1566e:	f380 8811 	msr	BASEPRI, r0
   15672:	f04f 0004 	mov.w	r0, #4
   15676:	df02      	svc	2
   15678:	20000ff4 	.word	0x20000ff4
   1567c:	2000114c 	.word	0x2000114c
	conn_upd = _radio.conn_upd;
   15680:	4bb7      	ldr	r3, [pc, #732]	; (15960 <event_connection_prepare+0x888>)
   15682:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (!conn_upd) {
   15686:	2b00      	cmp	r3, #0
   15688:	f000 814b 	beq.w	15922 <event_connection_prepare+0x84a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   1568c:	f8b4 8080 	ldrh.w	r8, [r4, #128]	; 0x80
   15690:	eba5 0808 	sub.w	r8, r5, r8
   15694:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   15698:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1569c:	f013 0f03 	tst.w	r3, #3
   156a0:	f040 8143 	bne.w	1592a <event_connection_prepare+0x852>
	} else if (instant_latency <= 0x7FFF) {
   156a4:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   156a8:	f040 8296 	bne.w	15bd8 <event_connection_prepare+0xb00>
		conn->llcp_ack = conn->llcp_req;
   156ac:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   156b0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   156b4:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
   156b8:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
   156bc:	429a      	cmp	r2, r3
   156be:	d006      	beq.n	156ce <event_connection_prepare+0x5f6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   156c0:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   156c4:	f003 0307 	and.w	r3, r3, #7
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   156c8:	2b05      	cmp	r3, #5
   156ca:	f000 81bb 	beq.w	15a44 <event_connection_prepare+0x96c>
		_radio.ticker_id_prepare = 0;
   156ce:	4ba4      	ldr	r3, [pc, #656]	; (15960 <event_connection_prepare+0x888>)
   156d0:	2200      	movs	r2, #0
   156d2:	731a      	strb	r2, [r3, #12]
		if (_radio.conn_upd == conn) {
   156d4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   156d8:	429c      	cmp	r4, r3
   156da:	f000 81b9 	beq.w	15a50 <event_connection_prepare+0x978>
		if ((conn->llcp.conn_upd.interval !=
   156de:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
		     conn->conn_interval) ||
   156e2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		if ((conn->llcp.conn_upd.interval !=
   156e4:	429a      	cmp	r2, r3
   156e6:	f000 81b7 	beq.w	15a58 <event_connection_prepare+0x980>
	if (_radio.packet_rx_acquire >=
   156ea:	4b9d      	ldr	r3, [pc, #628]	; (15960 <event_connection_prepare+0x888>)
   156ec:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   156f0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   156f4:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   156f6:	429a      	cmp	r2, r3
   156f8:	f0c0 81c7 	bcc.w	15a8a <event_connection_prepare+0x9b2>
			_radio.packet_rx_last);
   156fc:	4b98      	ldr	r3, [pc, #608]	; (15960 <event_connection_prepare+0x888>)
   156fe:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15702:	1ad3      	subs	r3, r2, r3
   15704:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15706:	2b01      	cmp	r3, #1
   15708:	f240 81c9 	bls.w	15a9e <event_connection_prepare+0x9c6>
	return _radio.packet_rx[_radio.packet_rx_last];
   1570c:	4b94      	ldr	r3, [pc, #592]	; (15960 <event_connection_prepare+0x888>)
   1570e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15712:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   1571a:	2b00      	cmp	r3, #0
   1571c:	f000 81c1 	beq.w	15aa2 <event_connection_prepare+0x9ca>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   15720:	8c22      	ldrh	r2, [r4, #32]
   15722:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   15724:	2208      	movs	r2, #8
   15726:	711a      	strb	r2, [r3, #4]
			radio_le_conn_update_cmplt->status = 0x00;
   15728:	2200      	movs	r2, #0
   1572a:	72da      	strb	r2, [r3, #11]
			radio_le_conn_update_cmplt->interval =
   1572c:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   15730:	819a      	strh	r2, [r3, #12]
			radio_le_conn_update_cmplt->latency =
   15732:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   15736:	81da      	strh	r2, [r3, #14]
			radio_le_conn_update_cmplt->timeout =
   15738:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   1573c:	821a      	strh	r2, [r3, #16]
			packet_rx_enqueue();
   1573e:	f7fe fe69 	bl	14414 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   15742:	6823      	ldr	r3, [r4, #0]
   15744:	2b00      	cmp	r3, #0
   15746:	f2c0 81b2 	blt.w	15aae <event_connection_prepare+0x9d6>
   1574a:	46b1      	mov	r9, r6
		conn_interval_old = instant_latency * conn->conn_interval;
   1574c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1574e:	fb18 f303 	smulbb	r3, r8, r3
   15752:	b29b      	uxth	r3, r3
			conn->llcp.conn_upd.interval;
   15754:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
		latency = conn_interval_old /
   15758:	fbb3 fbfa 	udiv	fp, r3, sl
		conn_interval_new = latency *
   1575c:	fb1a f00b 	smulbb	r0, sl, fp
   15760:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   15762:	4283      	cmp	r3, r0
   15764:	f080 81b1 	bcs.w	15aca <event_connection_prepare+0x9f2>
				TICKER_US_TO_TICKS((conn_interval_new -
   15768:	1ac3      	subs	r3, r0, r3
   1576a:	17d9      	asrs	r1, r3, #31
   1576c:	487d      	ldr	r0, [pc, #500]	; (15964 <event_connection_prepare+0x88c>)
   1576e:	f240 1223 	movw	r2, #291	; 0x123
   15772:	fb02 f203 	mul.w	r2, r2, r3
   15776:	fb00 2201 	mla	r2, r0, r1, r2
   1577a:	fba3 0100 	umull	r0, r1, r3, r0
   1577e:	4411      	add	r1, r2
   15780:	a375      	add	r3, pc, #468	; (adr r3, 15958 <event_connection_prepare+0x880>)
   15782:	e9d3 2300 	ldrd	r2, r3, [r3]
   15786:	f7eb fcb9 	bl	10fc <__aeabi_uldivmod>
   1578a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire +=
   1578e:	eb00 0309 	add.w	r3, r0, r9
   15792:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
   15794:	ebab 0308 	sub.w	r3, fp, r8
   15798:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   1579a:	fa12 f383 	uxtah	r3, r2, r3
   1579e:	8523      	strh	r3, [r4, #40]	; 0x28
			conn->hdr.ticks_active_to_start;
   157a0:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start :
   157a2:	6823      	ldr	r3, [r4, #0]
		ticks_slot_offset =
   157a4:	429a      	cmp	r2, r3
   157a6:	bf38      	it	cc
   157a8:	461a      	movcc	r2, r3
   157aa:	920c      	str	r2, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   157ac:	f240 49e2 	movw	r9, #1250	; 0x4e2
   157b0:	fb09 f90a 	mul.w	r9, r9, sl
		if (conn->role) {
   157b4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   157b8:	2b00      	cmp	r3, #0
   157ba:	f2c0 819d 	blt.w	15af8 <event_connection_prepare+0xa20>
				TICKER_US_TO_TICKS(conn->llcp.conn_upd.win_offset_us);
   157be:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   157c2:	a365      	add	r3, pc, #404	; (adr r3, 15958 <event_connection_prepare+0x880>)
   157c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   157c8:	4967      	ldr	r1, [pc, #412]	; (15968 <event_connection_prepare+0x890>)
   157ca:	fba0 0101 	umull	r0, r1, r0, r1
   157ce:	f7eb fc95 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   157d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   157d6:	f100 0b01 	add.w	fp, r0, #1
		periodic_us = conn_interval_us;
   157da:	46c8      	mov	r8, r9
		conn->conn_interval = conn->llcp.conn_upd.interval;
   157dc:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
		conn->latency = conn->llcp.conn_upd.latency;
   157e0:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   157e4:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   157e6:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   157ea:	f242 7110 	movw	r1, #10000	; 0x2710
   157ee:	fb01 9303 	mla	r3, r1, r3, r9
   157f2:	3b01      	subs	r3, #1
   157f4:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->supervision_reload =
   157f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   157fa:	4b5c      	ldr	r3, [pc, #368]	; (1596c <event_connection_prepare+0x894>)
   157fc:	444b      	add	r3, r9
   157fe:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->procedure_reload =
   15802:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   15806:	4b5a      	ldr	r3, [pc, #360]	; (15970 <event_connection_prepare+0x898>)
   15808:	444b      	add	r3, r9
   1580a:	fbb3 f9f9 	udiv	r9, r3, r9
   1580e:	fa1f f989 	uxth.w	r9, r9
   15812:	f8a4 904a 	strh.w	r9, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15816:	1d93      	adds	r3, r2, #6
   15818:	4599      	cmp	r9, r3
   1581a:	dd07      	ble.n	1582c <event_connection_prepare+0x754>
				     (conn->apto_reload - (conn->latency + 6)) :
   1581c:	eba9 0902 	sub.w	r9, r9, r2
   15820:	fa1f f989 	uxth.w	r9, r9
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15824:	f1a9 0906 	sub.w	r9, r9, #6
   15828:	fa1f f989 	uxth.w	r9, r9
   1582c:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
		if (!conn->llcp.conn_upd.is_internal) {
   15830:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15834:	f013 0f04 	tst.w	r3, #4
   15838:	d102      	bne.n	15840 <event_connection_prepare+0x768>
			conn->supervision_expire = 0;
   1583a:	2300      	movs	r3, #0
   1583c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		mayfly_was_enabled =
   15840:	2101      	movs	r1, #1
   15842:	2000      	movs	r0, #0
   15844:	f003 fe2d 	bl	194a2 <mayfly_is_enabled>
   15848:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   1584a:	2200      	movs	r2, #0
   1584c:	2101      	movs	r1, #1
   1584e:	4610      	mov	r0, r2
   15850:	f7f9 fc1c 	bl	f08c <mayfly_enable>
				    conn->handle, ticker_success_assert,
   15854:	8c22      	ldrh	r2, [r4, #32]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   15856:	3207      	adds	r2, #7
		ticker_status =
   15858:	f641 13e3 	movw	r3, #6627	; 0x19e3
   1585c:	9300      	str	r3, [sp, #0]
   1585e:	4b45      	ldr	r3, [pc, #276]	; (15974 <event_connection_prepare+0x89c>)
   15860:	b2d2      	uxtb	r2, r2
   15862:	2100      	movs	r1, #0
   15864:	4608      	mov	r0, r1
   15866:	f7fb fafb 	bl	10e60 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1586a:	b110      	cbz	r0, 15872 <event_connection_prepare+0x79a>
   1586c:	2802      	cmp	r0, #2
   1586e:	f040 819a 	bne.w	15ba6 <event_connection_prepare+0xace>
				     conn->handle,
   15872:	f8b4 a020 	ldrh.w	sl, [r4, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15876:	f10a 0a07 	add.w	sl, sl, #7
   1587a:	fa5f fa8a 	uxtb.w	sl, sl
				     TICKER_US_TO_TICKS(periodic_us),
   1587e:	4b3a      	ldr	r3, [pc, #232]	; (15968 <event_connection_prepare+0x890>)
   15880:	fba8 2303 	umull	r2, r3, r8, r3
   15884:	4617      	mov	r7, r2
   15886:	4698      	mov	r8, r3
   15888:	a333      	add	r3, pc, #204	; (adr r3, 15958 <event_connection_prepare+0x880>)
   1588a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1588e:	4638      	mov	r0, r7
   15890:	4641      	mov	r1, r8
   15892:	f7eb fc33 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15896:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   1589a:	930d      	str	r3, [sp, #52]	; 0x34
				     TICKER_REMAINDER(periodic_us),
   1589c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   158a0:	2100      	movs	r1, #0
   158a2:	4a35      	ldr	r2, [pc, #212]	; (15978 <event_connection_prepare+0x8a0>)
   158a4:	2307      	movs	r3, #7
   158a6:	fb03 f300 	mul.w	r3, r3, r0
   158aa:	fb02 3301 	mla	r3, r2, r1, r3
   158ae:	fba0 0102 	umull	r0, r1, r0, r2
   158b2:	4419      	add	r1, r3
   158b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   158b8:	2300      	movs	r3, #0
   158ba:	1a3f      	subs	r7, r7, r0
   158bc:	eb68 0801 	sbc.w	r8, r8, r1
   158c0:	4638      	mov	r0, r7
   158c2:	4641      	mov	r1, r8
   158c4:	f7eb fc1a 	bl	10fc <__aeabi_uldivmod>
   158c8:	4602      	mov	r2, r0
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   158ca:	68e3      	ldr	r3, [r4, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   158cc:	990c      	ldr	r1, [sp, #48]	; 0x30
   158ce:	440b      	add	r3, r1
   158d0:	b29b      	uxth	r3, r3
   158d2:	f994 101d 	ldrsb.w	r1, [r4, #29]
   158d6:	2900      	cmp	r1, #0
   158d8:	f2c0 816b 	blt.w	15bb2 <event_connection_prepare+0xada>
   158dc:	4927      	ldr	r1, [pc, #156]	; (1597c <event_connection_prepare+0x8a4>)
		ticker_status =
   158de:	f641 10f3 	movw	r0, #6643	; 0x19f3
   158e2:	9008      	str	r0, [sp, #32]
   158e4:	4823      	ldr	r0, [pc, #140]	; (15974 <event_connection_prepare+0x89c>)
   158e6:	9007      	str	r0, [sp, #28]
   158e8:	9406      	str	r4, [sp, #24]
   158ea:	9105      	str	r1, [sp, #20]
   158ec:	9304      	str	r3, [sp, #16]
   158ee:	2000      	movs	r0, #0
   158f0:	9003      	str	r0, [sp, #12]
   158f2:	9202      	str	r2, [sp, #8]
   158f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   158f6:	9301      	str	r3, [sp, #4]
   158f8:	f8cd b000 	str.w	fp, [sp]
   158fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   158fe:	4652      	mov	r2, sl
   15900:	4601      	mov	r1, r0
   15902:	f7fb fa11 	bl	10d28 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15906:	b110      	cbz	r0, 1590e <event_connection_prepare+0x836>
   15908:	2802      	cmp	r0, #2
   1590a:	f040 8154 	bne.w	15bb6 <event_connection_prepare+0xade>
		if (mayfly_was_enabled) {
   1590e:	f1b9 0f00 	cmp.w	r9, #0
   15912:	f040 8156 	bne.w	15bc2 <event_connection_prepare+0xaea>
			if (event_conn_upd_prep(conn, event_counter,
   15916:	f1b9 0f00 	cmp.w	r9, #0
   1591a:	f040 821e 	bne.w	15d5a <event_connection_prepare+0xc82>
   1591e:	f000 be59 	b.w	165d4 <event_connection_prepare+0x14fc>
		_radio.conn_upd = conn;
   15922:	4b0f      	ldr	r3, [pc, #60]	; (15960 <event_connection_prepare+0x888>)
   15924:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
   15928:	e6b0      	b.n	1568c <event_connection_prepare+0x5b4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1592a:	4815      	ldr	r0, [pc, #84]	; (15980 <event_connection_prepare+0x8a8>)
   1592c:	f7f9 fd2d 	bl	f38a <mem_acquire>
		if (!node_tx) {
   15930:	4680      	mov	r8, r0
   15932:	2800      	cmp	r0, #0
   15934:	f000 814d 	beq.w	15bd2 <event_connection_prepare+0xafa>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   15938:	1d03      	adds	r3, r0, #4
		switch (conn->llcp.conn_upd.state) {
   1593a:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1593e:	f002 0203 	and.w	r2, r2, #3
   15942:	2a01      	cmp	r2, #1
   15944:	d01e      	beq.n	15984 <event_connection_prepare+0x8ac>
   15946:	2a02      	cmp	r2, #2
   15948:	d066      	beq.n	15a18 <event_connection_prepare+0x940>
			LL_ASSERT(0);
   1594a:	4040      	eors	r0, r0
   1594c:	f380 8811 	msr	BASEPRI, r0
   15950:	f04f 0004 	mov.w	r0, #4
   15954:	df02      	svc	2
   15956:	bf00      	nop
   15958:	1afd498d 	.word	0x1afd498d
   1595c:	00000007 	.word	0x00000007
   15960:	20000ff4 	.word	0x20000ff4
   15964:	09ce5400 	.word	0x09ce5400
   15968:	3b9aca00 	.word	0x3b9aca00
   1596c:	026259ff 	.word	0x026259ff
   15970:	01c9c37f 	.word	0x01c9c37f
   15974:	00011a7d 	.word	0x00011a7d
   15978:	1afd498d 	.word	0x1afd498d
   1597c:	0001663d 	.word	0x0001663d
   15980:	2000114c 	.word	0x2000114c
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   15984:	49bc      	ldr	r1, [pc, #752]	; (15c78 <event_connection_prepare+0xba0>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   15986:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1598a:	f36f 0201 	bfc	r2, #0, #2
   1598e:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   15992:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   15994:	442a      	add	r2, r5
   15996:	b292      	uxth	r2, r2
   15998:	3206      	adds	r2, #6
	conn->llcp.conn_upd.instant =
   1599a:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1599e:	f898 2004 	ldrb.w	r2, [r8, #4]
   159a2:	f042 0203 	orr.w	r2, r2, #3
   159a6:	f888 2004 	strb.w	r2, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   159aa:	220c      	movs	r2, #12
   159ac:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   159ae:	2200      	movs	r2, #0
   159b0:	70da      	strb	r2, [r3, #3]
		conn->llcp.conn_upd.win_size;
   159b2:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
   159b6:	711a      	strb	r2, [r3, #4]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   159b8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   159bc:	48af      	ldr	r0, [pc, #700]	; (15c7c <event_connection_prepare+0xba4>)
   159be:	fba0 0202 	umull	r0, r2, r0, r2
   159c2:	0a92      	lsrs	r2, r2, #10
   159c4:	f8a3 2005 	strh.w	r2, [r3, #5]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
   159c8:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   159cc:	f8a3 2007 	strh.w	r2, [r3, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
   159d0:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   159d4:	f8a3 2009 	strh.w	r2, [r3, #9]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
   159d8:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   159dc:	f8a3 200b 	strh.w	r2, [r3, #11]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
   159e0:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
   159e4:	f8a3 200d 	strh.w	r2, [r3, #13]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   159e8:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   159ec:	6820      	ldr	r0, [r4, #0]
   159ee:	2800      	cmp	r0, #0
   159f0:	db14      	blt.n	15a1c <event_connection_prepare+0x944>
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   159f2:	3305      	adds	r3, #5
   159f4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   159f8:	4ba1      	ldr	r3, [pc, #644]	; (15c80 <event_connection_prepare+0xba8>)
   159fa:	60d9      	str	r1, [r3, #12]
		mayfly_sched_offset->param = (void *)conn;
   159fc:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   159fe:	2201      	movs	r2, #1
   15a00:	4611      	mov	r1, r2
   15a02:	2000      	movs	r0, #0
   15a04:	f7f9 fb80 	bl	f108 <mayfly_enqueue>
		LL_ASSERT(!retval);
   15a08:	b9b0      	cbnz	r0, 15a38 <event_connection_prepare+0x960>
		ctrl_tx_enqueue(conn, node_tx);
   15a0a:	4641      	mov	r1, r8
   15a0c:	4620      	mov	r0, r4
   15a0e:	f7fb ff4d 	bl	118ac <ctrl_tx_enqueue>
	return 1;
   15a12:	f04f 0901 	mov.w	r9, #1
   15a16:	e77e      	b.n	15916 <event_connection_prepare+0x83e>
			fp_mayfly_select_or_use =
   15a18:	499a      	ldr	r1, [pc, #616]	; (15c84 <event_connection_prepare+0xbac>)
   15a1a:	e7b4      	b.n	15986 <event_connection_prepare+0x8ae>
				conn->hdr.ticks_preempt_to_start;
   15a1c:	68a7      	ldr	r7, [r4, #8]
				conn->hdr.ticks_active_to_start :
   15a1e:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   15a20:	f020 4e00 	bic.w	lr, r0, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   15a24:	4297      	cmp	r7, r2
   15a26:	bf2c      	ite	cs
   15a28:	ebce 0207 	rsbcs	r2, lr, r7
   15a2c:	ebce 0202 	rsbcc	r2, lr, r2
			conn->llcp.conn_upd.ticks_anchor -=
   15a30:	4432      	add	r2, r6
   15a32:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
   15a36:	e7dc      	b.n	159f2 <event_connection_prepare+0x91a>
		LL_ASSERT(!retval);
   15a38:	4040      	eors	r0, r0
   15a3a:	f380 8811 	msr	BASEPRI, r0
   15a3e:	f04f 0004 	mov.w	r0, #4
   15a42:	df02      	svc	2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15a44:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   15a48:	2300      	movs	r3, #0
   15a4a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15a4e:	e63e      	b.n	156ce <event_connection_prepare+0x5f6>
			_radio.conn_upd = NULL;
   15a50:	4b8d      	ldr	r3, [pc, #564]	; (15c88 <event_connection_prepare+0xbb0>)
   15a52:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   15a56:	e642      	b.n	156de <event_connection_prepare+0x606>
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   15a58:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   15a5c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		     conn->conn_interval) ||
   15a5e:	4291      	cmp	r1, r2
   15a60:	f47f ae43 	bne.w	156ea <event_connection_prepare+0x612>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   15a64:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   15a68:	f240 41e2 	movw	r1, #1250	; 0x4e2
   15a6c:	fb01 f103 	mul.w	r1, r1, r3
   15a70:	f242 7310 	movw	r3, #10000	; 0x2710
   15a74:	fb03 1302 	mla	r3, r3, r2, r1
   15a78:	3b01      	subs	r3, #1
   15a7a:	fb93 f3f1 	sdiv	r3, r3, r1
   15a7e:	b29b      	uxth	r3, r3
		     conn->supervision_reload)) {
   15a80:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   15a82:	4293      	cmp	r3, r2
   15a84:	f47f ae31 	bne.w	156ea <event_connection_prepare+0x612>
   15a88:	e65b      	b.n	15742 <event_connection_prepare+0x66a>
		return (_radio.packet_rx_count -
   15a8a:	497f      	ldr	r1, [pc, #508]	; (15c88 <event_connection_prepare+0xbb0>)
   15a8c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   15a90:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15a94:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15a96:	fa52 f383 	uxtab	r3, r2, r3
   15a9a:	b2db      	uxtb	r3, r3
   15a9c:	e633      	b.n	15706 <event_connection_prepare+0x62e>
		return 0;
   15a9e:	2300      	movs	r3, #0
   15aa0:	e63b      	b.n	1571a <event_connection_prepare+0x642>
			LL_ASSERT(radio_pdu_node_rx);
   15aa2:	4040      	eors	r0, r0
   15aa4:	f380 8811 	msr	BASEPRI, r0
   15aa8:	f04f 0004 	mov.w	r0, #4
   15aac:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   15aae:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   15ab0:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
   15ab2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   15ab6:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   15ab8:	4291      	cmp	r1, r2
   15aba:	bf2c      	ite	cs
   15abc:	ebc3 0301 	rsbcs	r3, r3, r1
   15ac0:	ebc3 0302 	rsbcc	r3, r3, r2
   15ac4:	eb06 0903 	add.w	r9, r6, r3
   15ac8:	e640      	b.n	1574c <event_connection_prepare+0x674>
				TICKER_US_TO_TICKS((conn_interval_old -
   15aca:	1a1b      	subs	r3, r3, r0
   15acc:	17d9      	asrs	r1, r3, #31
   15ace:	486f      	ldr	r0, [pc, #444]	; (15c8c <event_connection_prepare+0xbb4>)
   15ad0:	f240 1223 	movw	r2, #291	; 0x123
   15ad4:	fb02 f203 	mul.w	r2, r2, r3
   15ad8:	fb00 2201 	mla	r2, r0, r1, r2
   15adc:	fba3 0100 	umull	r0, r1, r3, r0
   15ae0:	4411      	add	r1, r2
   15ae2:	a363      	add	r3, pc, #396	; (adr r3, 15c70 <event_connection_prepare+0xb98>)
   15ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ae8:	f7eb fb08 	bl	10fc <__aeabi_uldivmod>
   15aec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   15af0:	eba9 0300 	sub.w	r3, r9, r0
   15af4:	930b      	str	r3, [sp, #44]	; 0x2c
   15af6:	e64d      	b.n	15794 <event_connection_prepare+0x6bc>
				conn->slave.window_widening_periodic_us *
   15af8:	6d62      	ldr	r2, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   15afa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   15afc:	fb02 3218 	mls	r2, r2, r8, r3
   15b00:	65e2      	str	r2, [r4, #92]	; 0x5c
				(((gc_lookup_ppm[_radio.sca] +
   15b02:	4b61      	ldr	r3, [pc, #388]	; (15c88 <event_connection_prepare+0xbb0>)
   15b04:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
   15b08:	4861      	ldr	r0, [pc, #388]	; (15c90 <event_connection_prepare+0xbb8>)
   15b0a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   15b0e:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   15b12:	f3c1 0182 	ubfx	r1, r1, #2, #3
   15b16:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
				(((gc_lookup_ppm[_radio.sca] +
   15b1a:	440b      	add	r3, r1
				   gc_lookup_ppm[conn->slave.sca]) *
   15b1c:	fb03 f309 	mul.w	r3, r3, r9
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   15b20:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   15b24:	f203 233f 	addw	r3, r3, #575	; 0x23f
   15b28:	495a      	ldr	r1, [pc, #360]	; (15c94 <event_connection_prepare+0xbbc>)
   15b2a:	fba1 1303 	umull	r1, r3, r1, r3
   15b2e:	ea4f 4893 	mov.w	r8, r3, lsr #18
			conn->slave.window_widening_periodic_us =
   15b32:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
				(conn_interval_us >> 1) - RADIO_TIFS;
   15b36:	ea4f 0359 	mov.w	r3, r9, lsr #1
   15b3a:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_max_us =
   15b3c:	65a3      	str	r3, [r4, #88]	; 0x58
				conn->llcp.conn_upd.win_size * 1250;
   15b3e:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
   15b42:	f240 41e2 	movw	r1, #1250	; 0x4e2
   15b46:	fb01 f100 	mul.w	r1, r1, r0
			conn->slave.window_size_prepare_us =
   15b4a:	6661      	str	r1, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   15b4c:	2100      	movs	r1, #0
   15b4e:	6721      	str	r1, [r4, #112]	; 0x70
				conn->slave.window_widening_periodic_us *
   15b50:	fb08 f00b 	mul.w	r0, r8, fp
			conn->slave.window_widening_prepare_us +=
   15b54:	4402      	add	r2, r0
   15b56:	65e2      	str	r2, [r4, #92]	; 0x5c
			if (conn->slave.window_widening_prepare_us >
   15b58:	4293      	cmp	r3, r2
   15b5a:	d200      	bcs.n	15b5e <event_connection_prepare+0xa86>
				conn->slave.window_widening_prepare_us =
   15b5c:	65e3      	str	r3, [r4, #92]	; 0x5c
				TICKER_US_TO_TICKS(conn->slave.window_widening_periodic_us *
   15b5e:	f8df b140 	ldr.w	fp, [pc, #320]	; 15ca0 <event_connection_prepare+0xbc8>
   15b62:	a343      	add	r3, pc, #268	; (adr r3, 15c70 <event_connection_prepare+0xb98>)
   15b64:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b68:	fba0 010b 	umull	r0, r1, r0, fp
   15b6c:	f7eb fac6 	bl	10fc <__aeabi_uldivmod>
   15b70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   15b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15b76:	1a1b      	subs	r3, r3, r0
   15b78:	930b      	str	r3, [sp, #44]	; 0x2c
				TICKER_US_TO_TICKS((conn->llcp.conn_upd.win_offset_us /
   15b7a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   15b7e:	4a3f      	ldr	r2, [pc, #252]	; (15c7c <event_connection_prepare+0xba4>)
   15b80:	fba2 2303 	umull	r2, r3, r2, r3
   15b84:	0a9b      	lsrs	r3, r3, #10
   15b86:	f240 40e2 	movw	r0, #1250	; 0x4e2
   15b8a:	fb00 f003 	mul.w	r0, r0, r3
   15b8e:	a338      	add	r3, pc, #224	; (adr r3, 15c70 <event_connection_prepare+0xb98>)
   15b90:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b94:	fba0 010b 	umull	r0, r1, r0, fp
   15b98:	f7eb fab0 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   15b9c:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
			periodic_us -=
   15ba0:	eba9 0808 	sub.w	r8, r9, r8
   15ba4:	e61a      	b.n	157dc <event_connection_prepare+0x704>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15ba6:	4040      	eors	r0, r0
   15ba8:	f380 8811 	msr	BASEPRI, r0
   15bac:	f04f 0004 	mov.w	r0, #4
   15bb0:	df02      	svc	2
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15bb2:	4939      	ldr	r1, [pc, #228]	; (15c98 <event_connection_prepare+0xbc0>)
   15bb4:	e693      	b.n	158de <event_connection_prepare+0x806>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15bb6:	4040      	eors	r0, r0
   15bb8:	f380 8811 	msr	BASEPRI, r0
   15bbc:	f04f 0004 	mov.w	r0, #4
   15bc0:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   15bc2:	2201      	movs	r2, #1
   15bc4:	4611      	mov	r1, r2
   15bc6:	2000      	movs	r0, #0
   15bc8:	f7f9 fa60 	bl	f08c <mayfly_enable>
		return 0;
   15bcc:	f04f 0900 	mov.w	r9, #0
   15bd0:	e6a1      	b.n	15916 <event_connection_prepare+0x83e>
			return 1;
   15bd2:	f04f 0901 	mov.w	r9, #1
   15bd6:	e69e      	b.n	15916 <event_connection_prepare+0x83e>
	return 1;
   15bd8:	f04f 0901 	mov.w	r9, #1
   15bdc:	e69b      	b.n	15916 <event_connection_prepare+0x83e>
	if (conn->llcp.chan_map.initiate) {
   15bde:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15be2:	b9f3      	cbnz	r3, 15c22 <event_connection_prepare+0xb4a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   15be4:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15be8:	1aeb      	subs	r3, r5, r3
   15bea:	b29b      	uxth	r3, r3
   15bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15bf0:	f280 80b3 	bge.w	15d5a <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15bf4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15bf8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   15bfc:	f104 0817 	add.w	r8, r4, #23
   15c00:	2205      	movs	r2, #5
   15c02:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15c06:	4640      	mov	r0, r8
   15c08:	f7ea fb5a 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   15c0c:	2105      	movs	r1, #5
   15c0e:	4640      	mov	r0, r8
   15c10:	f7f9 fc3f 	bl	f492 <util_ones_count_get>
		conn->data_chan_count =
   15c14:	7f63      	ldrb	r3, [r4, #29]
   15c16:	f360 0305 	bfi	r3, r0, #0, #6
   15c1a:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   15c1c:	2301      	movs	r3, #1
   15c1e:	7723      	strb	r3, [r4, #28]
   15c20:	e09b      	b.n	15d5a <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15c22:	481e      	ldr	r0, [pc, #120]	; (15c9c <event_connection_prepare+0xbc4>)
   15c24:	f7f9 fbb1 	bl	f38a <mem_acquire>
		if (node_tx) {
   15c28:	4680      	mov	r8, r0
   15c2a:	2800      	cmp	r0, #0
   15c2c:	f000 8095 	beq.w	15d5a <event_connection_prepare+0xc82>
			conn->llcp.chan_map.initiate = 0;
   15c30:	2300      	movs	r3, #0
   15c32:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   15c36:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15c38:	442b      	add	r3, r5
   15c3a:	b29b      	uxth	r3, r3
   15c3c:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant =
   15c3e:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15c42:	7903      	ldrb	r3, [r0, #4]
   15c44:	f043 0303 	orr.w	r3, r3, #3
   15c48:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15c4a:	2308      	movs	r3, #8
   15c4c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15c4e:	2301      	movs	r3, #1
   15c50:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
   15c52:	2205      	movs	r2, #5
   15c54:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15c58:	3008      	adds	r0, #8
   15c5a:	f7ea fb31 	bl	2c0 <memcpy>
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
   15c5e:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15c62:	f8a8 300d 	strh.w	r3, [r8, #13]
			ctrl_tx_enqueue(conn, node_tx);
   15c66:	4641      	mov	r1, r8
   15c68:	4620      	mov	r0, r4
   15c6a:	f7fb fe1f 	bl	118ac <ctrl_tx_enqueue>
   15c6e:	e074      	b.n	15d5a <event_connection_prepare+0xc82>
   15c70:	1afd498d 	.word	0x1afd498d
   15c74:	00000007 	.word	0x00000007
   15c78:	00013265 	.word	0x00013265
   15c7c:	d1b71759 	.word	0xd1b71759
   15c80:	2000bdb0 	.word	0x2000bdb0
   15c84:	00012f99 	.word	0x00012f99
   15c88:	20000ff4 	.word	0x20000ff4
   15c8c:	09ce5400 	.word	0x09ce5400
   15c90:	00031c50 	.word	0x00031c50
   15c94:	431bde83 	.word	0x431bde83
   15c98:	00016635 	.word	0x00016635
   15c9c:	2000114c 	.word	0x2000114c
   15ca0:	3b9aca00 	.word	0x3b9aca00
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15ca4:	48d9      	ldr	r0, [pc, #868]	; (1600c <event_connection_prepare+0xf34>)
   15ca6:	f7f9 fb70 	bl	f38a <mem_acquire>
	if (node_tx) {
   15caa:	4680      	mov	r8, r0
   15cac:	2800      	cmp	r0, #0
   15cae:	d054      	beq.n	15d5a <event_connection_prepare+0xc82>
		struct pdu_data *pdu_ctrl_tx =
   15cb0:	f100 0904 	add.w	r9, r0, #4
		conn->llcp_ack = conn->llcp_req;
   15cb4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15cb8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (!conn->role) {
   15cbc:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15cc0:	2b00      	cmp	r3, #0
   15cc2:	f2c0 808c 	blt.w	15dde <event_connection_prepare+0xd06>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   15cc6:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
   15cca:	4653      	mov	r3, sl
   15ccc:	2200      	movs	r2, #0
   15cce:	f104 0193 	add.w	r1, r4, #147	; 0x93
   15cd2:	f104 0083 	add.w	r0, r4, #131	; 0x83
   15cd6:	f7f9 fc65 	bl	f5a4 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   15cda:	2210      	movs	r2, #16
   15cdc:	4651      	mov	r1, sl
   15cde:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15ce2:	f7ea faed 	bl	2c0 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15ce6:	2208      	movs	r2, #8
   15ce8:	f504 7189 	add.w	r1, r4, #274	; 0x112
   15cec:	f204 1033 	addw	r0, r4, #307	; 0x133
   15cf0:	f7ea fae6 	bl	2c0 <memcpy>
			conn->ccm_rx.counter = 0;
   15cf4:	2300      	movs	r3, #0
   15cf6:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   15cfa:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   15cfe:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   15d02:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   15d06:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   15d0a:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   15d0e:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   15d12:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   15d16:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   15d1a:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   15d1e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   15d22:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
			conn->ccm_rx.direction = 0;
   15d26:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   15d2a:	f363 0200 	bfi	r2, r3, #0, #1
   15d2e:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 1;
   15d32:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   15d36:	f043 0301 	orr.w	r3, r3, #1
   15d3a:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   15d3e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->enc_tx = 1;
   15d42:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   15d46:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			start_enc_rsp_send(conn, pdu_ctrl_tx);
   15d4a:	4649      	mov	r1, r9
   15d4c:	4620      	mov	r0, r4
   15d4e:	f7fb fe9d 	bl	11a8c <start_enc_rsp_send>
		ctrl_tx_enqueue(conn, node_tx);
   15d52:	4641      	mov	r1, r8
   15d54:	4620      	mov	r0, r4
   15d56:	f7fb fda9 	bl	118ac <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   15d5a:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   15d5e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15d62:	429a      	cmp	r2, r3
   15d64:	d021      	beq.n	15daa <event_connection_prepare+0xcd2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15d66:	2305      	movs	r3, #5
   15d68:	2200      	movs	r2, #0
   15d6a:	4611      	mov	r1, r2
   15d6c:	4610      	mov	r0, r2
   15d6e:	f7fc fa77 	bl	12260 <event_stop>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15d72:	48a6      	ldr	r0, [pc, #664]	; (1600c <event_connection_prepare+0xf34>)
   15d74:	f7f9 fb09 	bl	f38a <mem_acquire>
		if (node_tx) {
   15d78:	4601      	mov	r1, r0
   15d7a:	b1b0      	cbz	r0, 15daa <event_connection_prepare+0xcd2>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   15d7c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15d80:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15d84:	7903      	ldrb	r3, [r0, #4]
   15d86:	f043 0303 	orr.w	r3, r3, #3
   15d8a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   15d8c:	2302      	movs	r3, #2
   15d8e:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15d90:	71c3      	strb	r3, [r0, #7]
				error_code = conn->llcp_terminate.reason_own;
   15d92:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   15d96:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   15d98:	4620      	mov	r0, r4
   15d9a:	f7fb fd87 	bl	118ac <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   15d9e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   15da0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
			if (conn->procedure_expire <= 1) {
   15da4:	2b01      	cmp	r3, #1
   15da6:	f240 82a6 	bls.w	162f6 <event_connection_prepare+0x121e>
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   15daa:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15dae:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15db2:	429a      	cmp	r2, r3
   15db4:	f000 83f9 	beq.w	165aa <event_connection_prepare+0x14d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15db8:	2305      	movs	r3, #5
   15dba:	2200      	movs	r2, #0
   15dbc:	4611      	mov	r1, r2
   15dbe:	4610      	mov	r0, r2
   15dc0:	f7fc fa4e 	bl	12260 <event_stop>
	switch (conn->llcp_length.state) {
   15dc4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   15dc8:	f003 0303 	and.w	r3, r3, #3
   15dcc:	2b03      	cmp	r3, #3
   15dce:	f200 8427 	bhi.w	16620 <event_connection_prepare+0x1548>
   15dd2:	e8df f013 	tbh	[pc, r3, lsl #1]
   15dd6:	0299      	.short	0x0299
   15dd8:	03ea03ea 	.word	0x03ea03ea
   15ddc:	02fa      	.short	0x02fa
		else if (!conn->pause_tx || conn->refresh) {
   15dde:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15de2:	f003 0348 	and.w	r3, r3, #72	; 0x48
   15de6:	2b08      	cmp	r3, #8
   15de8:	d079      	beq.n	15ede <event_connection_prepare+0xe06>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15dea:	7903      	ldrb	r3, [r0, #4]
   15dec:	f043 0303 	orr.w	r3, r3, #3
   15df0:	7103      	strb	r3, [r0, #4]
			if (conn->llcp.encryption.error_code) {
   15df2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15df6:	b333      	cbz	r3, 15e46 <event_connection_prepare+0xd6e>
	if (conn->common.fex_valid &&
   15df8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   15dfc:	f013 0f20 	tst.w	r3, #32
   15e00:	d00e      	beq.n	15e20 <event_connection_prepare+0xd48>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   15e02:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   15e06:	f013 0f04 	tst.w	r3, #4
   15e0a:	d009      	beq.n	15e20 <event_connection_prepare+0xd48>
		pdu->payload.llctrl.opcode =
   15e0c:	2311      	movs	r3, #17
   15e0e:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   15e10:	2303      	movs	r3, #3
   15e12:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   15e14:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15e18:	7243      	strb	r3, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   15e1a:	2302      	movs	r3, #2
   15e1c:	7143      	strb	r3, [r0, #5]
   15e1e:	e009      	b.n	15e34 <event_connection_prepare+0xd5c>
		pdu->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   15e20:	230d      	movs	r3, #13
   15e22:	f888 3007 	strb.w	r3, [r8, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   15e26:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15e2a:	f888 3008 	strb.w	r3, [r8, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   15e2e:	2301      	movs	r3, #1
   15e30:	f888 3005 	strb.w	r3, [r8, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, ctrldata);
   15e34:	f898 3005 	ldrb.w	r3, [r8, #5]
   15e38:	3301      	adds	r3, #1
   15e3a:	f888 3005 	strb.w	r3, [r8, #5]
	conn->llcp.encryption.error_code = 0;
   15e3e:	2300      	movs	r3, #0
   15e40:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   15e44:	e785      	b.n	15d52 <event_connection_prepare+0xc7a>
				enc_rsp_send(conn);
   15e46:	4620      	mov	r0, r4
   15e48:	f7fd fa38 	bl	132bc <enc_rsp_send>
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
   15e4c:	f104 09f9 	add.w	r9, r4, #249	; 0xf9
   15e50:	464b      	mov	r3, r9
   15e52:	2200      	movs	r2, #0
   15e54:	f104 0193 	add.w	r1, r4, #147	; 0x93
   15e58:	f104 0083 	add.w	r0, r4, #131	; 0x83
   15e5c:	f7f9 fba2 	bl	f5a4 <ecb_encrypt>
				memcpy(&conn->ccm_tx.key[0],
   15e60:	2210      	movs	r2, #16
   15e62:	4649      	mov	r1, r9
   15e64:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15e68:	f7ea fa2a 	bl	2c0 <memcpy>
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15e6c:	2208      	movs	r2, #8
   15e6e:	f504 7189 	add.w	r1, r4, #274	; 0x112
   15e72:	f204 1033 	addw	r0, r4, #307	; 0x133
   15e76:	f7ea fa23 	bl	2c0 <memcpy>
				conn->ccm_rx.counter = 0;
   15e7a:	2300      	movs	r3, #0
   15e7c:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   15e80:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   15e84:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   15e88:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   15e8c:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   15e90:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   15e94:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   15e98:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
				conn->ccm_tx.counter = 0;
   15e9c:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   15ea0:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   15ea4:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   15ea8:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
				conn->ccm_rx.direction = 1;
   15eac:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   15eb0:	f042 0201 	orr.w	r2, r2, #1
   15eb4:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
				conn->ccm_tx.direction = 0;
   15eb8:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
   15ebc:	f363 0200 	bfi	r2, r3, #0, #1
   15ec0:	f884 2132 	strb.w	r2, [r4, #306]	; 0x132
				conn->enc_rx = 1;
   15ec4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15ec8:	f043 0310 	orr.w	r3, r3, #16
   15ecc:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				pdu_ctrl_tx->len =
   15ed0:	2301      	movs	r3, #1
   15ed2:	f888 3005 	strb.w	r3, [r8, #5]
				pdu_ctrl_tx->payload.llctrl.opcode =
   15ed6:	2305      	movs	r3, #5
   15ed8:	f888 3007 	strb.w	r3, [r8, #7]
   15edc:	e739      	b.n	15d52 <event_connection_prepare+0xc7a>
			_radio.conn_curr->enc_tx = 1;
   15ede:	f8df 9134 	ldr.w	r9, [pc, #308]	; 16014 <event_connection_prepare+0xf3c>
   15ee2:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   15ee6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   15eea:	f043 0320 	orr.w	r3, r3, #32
   15eee:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			start_enc_rsp_send(_radio.conn_curr, NULL);
   15ef2:	2100      	movs	r1, #0
   15ef4:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   15ef8:	f7fb fdc8 	bl	11a8c <start_enc_rsp_send>
			_radio.conn_curr->pause_rx = 0;
   15efc:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15f00:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15f04:	f36f 0282 	bfc	r2, #2, #1
   15f08:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   15f0c:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15f10:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15f14:	f36f 02c3 	bfc	r2, #3, #1
   15f18:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   15f1c:	e719      	b.n	15d52 <event_connection_prepare+0xc7a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15f1e:	483b      	ldr	r0, [pc, #236]	; (1600c <event_connection_prepare+0xf34>)
   15f20:	f7f9 fa33 	bl	f38a <mem_acquire>
	if (node_tx) {
   15f24:	4680      	mov	r8, r0
   15f26:	2800      	cmp	r0, #0
   15f28:	f43f af17 	beq.w	15d5a <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15f2c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15f30:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   15f34:	4b36      	ldr	r3, [pc, #216]	; (16010 <event_connection_prepare+0xf38>)
   15f36:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f3a:	7903      	ldrb	r3, [r0, #4]
   15f3c:	f043 0303 	orr.w	r3, r3, #3
   15f40:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15f42:	2309      	movs	r3, #9
   15f44:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   15f46:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15f4a:	2b00      	cmp	r3, #0
   15f4c:	db1e      	blt.n	15f8c <event_connection_prepare+0xeb4>
   15f4e:	2308      	movs	r3, #8
   15f50:	f888 3007 	strb.w	r3, [r8, #7]
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
   15f54:	2208      	movs	r2, #8
   15f56:	2100      	movs	r1, #0
   15f58:	eb08 0002 	add.w	r0, r8, r2
   15f5c:	f014 fcdc 	bl	2a918 <memset>
			conn->llcp_features & 0xFF;
   15f60:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   15f64:	f888 3008 	strb.w	r3, [r8, #8]
			(conn->llcp_features >> 8) & 0xFF;
   15f68:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   15f6c:	0a1b      	lsrs	r3, r3, #8
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   15f6e:	f888 3009 	strb.w	r3, [r8, #9]
			(conn->llcp_features >> 16) & 0xFF;
   15f72:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   15f76:	f888 300a 	strb.w	r3, [r8, #10]
		ctrl_tx_enqueue(conn, node_tx);
   15f7a:	4641      	mov	r1, r8
   15f7c:	4620      	mov	r0, r4
   15f7e:	f7fb fc95 	bl	118ac <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   15f82:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15f86:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15f8a:	e6e6      	b.n	15d5a <event_connection_prepare+0xc82>
		pdu_ctrl_tx->payload.llctrl.opcode =
   15f8c:	230e      	movs	r3, #14
   15f8e:	e7df      	b.n	15f50 <event_connection_prepare+0xe78>
	if (conn->llcp_version.tx == 0) {
   15f90:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15f94:	f013 0f01 	tst.w	r3, #1
   15f98:	d03e      	beq.n	16018 <event_connection_prepare+0xf40>
	} else if (conn->llcp_version.rx != 0) {
   15f9a:	f013 0f02 	tst.w	r3, #2
   15f9e:	d076      	beq.n	1608e <event_connection_prepare+0xfb6>
		conn->llcp_ack = conn->llcp_req;
   15fa0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15fa4:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	if (_radio.packet_rx_acquire >=
   15fa8:	4b1a      	ldr	r3, [pc, #104]	; (16014 <event_connection_prepare+0xf3c>)
   15faa:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15fae:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15fb2:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15fb4:	429a      	cmp	r2, r3
   15fb6:	d358      	bcc.n	1606a <event_connection_prepare+0xf92>
			_radio.packet_rx_last);
   15fb8:	4b16      	ldr	r3, [pc, #88]	; (16014 <event_connection_prepare+0xf3c>)
   15fba:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15fbe:	1ad3      	subs	r3, r2, r3
   15fc0:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15fc2:	2b01      	cmp	r3, #1
   15fc4:	d95b      	bls.n	1607e <event_connection_prepare+0xfa6>
	return _radio.packet_rx[_radio.packet_rx_last];
   15fc6:	4b13      	ldr	r3, [pc, #76]	; (16014 <event_connection_prepare+0xf3c>)
   15fc8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15fcc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(radio_pdu_node_rx);
   15fd4:	2b00      	cmp	r3, #0
   15fd6:	d054      	beq.n	16082 <event_connection_prepare+0xfaa>
		radio_pdu_node_rx->hdr.handle = conn->handle;
   15fd8:	8c22      	ldrh	r2, [r4, #32]
   15fda:	80da      	strh	r2, [r3, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15fdc:	2201      	movs	r2, #1
   15fde:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15fe0:	7a1a      	ldrb	r2, [r3, #8]
   15fe2:	f042 0203 	orr.w	r2, r2, #3
   15fe6:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15fe8:	2206      	movs	r2, #6
   15fea:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   15fec:	220c      	movs	r2, #12
   15fee:	72da      	strb	r2, [r3, #11]
			conn->llcp_version.version_number;
   15ff0:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
   15ff4:	731a      	strb	r2, [r3, #12]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
   15ff6:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   15ffa:	f8a3 200d 	strh.w	r2, [r3, #13]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   15ffe:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   16002:	f8a3 200f 	strh.w	r2, [r3, #15]
		packet_rx_enqueue();
   16006:	f7fe fa05 	bl	14414 <packet_rx_enqueue>
   1600a:	e6a6      	b.n	15d5a <event_connection_prepare+0xc82>
   1600c:	2000114c 	.word	0x2000114c
   16010:	000141ff 	.word	0x000141ff
   16014:	20000ff4 	.word	0x20000ff4
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16018:	48b9      	ldr	r0, [pc, #740]	; (16300 <event_connection_prepare+0x1228>)
   1601a:	f7f9 f9b6 	bl	f38a <mem_acquire>
		if (node_tx) {
   1601e:	4601      	mov	r1, r0
   16020:	2800      	cmp	r0, #0
   16022:	f43f ae9a 	beq.w	15d5a <event_connection_prepare+0xc82>
			conn->llcp_ack = conn->llcp_req;
   16026:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1602a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   1602e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   16032:	f043 0301 	orr.w	r3, r3, #1
   16036:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1603a:	7903      	ldrb	r3, [r0, #4]
   1603c:	f043 0303 	orr.w	r3, r3, #3
   16040:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   16042:	2306      	movs	r3, #6
   16044:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   16046:	230c      	movs	r3, #12
   16048:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   1604a:	2309      	movs	r3, #9
   1604c:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   1604e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16052:	7243      	strb	r3, [r0, #9]
   16054:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   16056:	72c3      	strb	r3, [r0, #11]
   16058:	7303      	strb	r3, [r0, #12]
			ctrl_tx_enqueue(conn, node_tx);
   1605a:	4620      	mov	r0, r4
   1605c:	f7fb fc26 	bl	118ac <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
   16060:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   16064:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   16068:	e677      	b.n	15d5a <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   1606a:	49a6      	ldr	r1, [pc, #664]	; (16304 <event_connection_prepare+0x122c>)
   1606c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   16070:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16074:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   16076:	fa52 f383 	uxtab	r3, r2, r3
   1607a:	b2db      	uxtb	r3, r3
   1607c:	e7a1      	b.n	15fc2 <event_connection_prepare+0xeea>
		return 0;
   1607e:	2300      	movs	r3, #0
   16080:	e7a8      	b.n	15fd4 <event_connection_prepare+0xefc>
		LL_ASSERT(radio_pdu_node_rx);
   16082:	4040      	eors	r0, r0
   16084:	f380 8811 	msr	BASEPRI, r0
   16088:	f04f 0004 	mov.w	r0, #4
   1608c:	df02      	svc	2
		LL_ASSERT(0);
   1608e:	4040      	eors	r0, r0
   16090:	f380 8811 	msr	BASEPRI, r0
   16094:	f04f 0004 	mov.w	r0, #4
   16098:	df02      	svc	2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1609a:	4899      	ldr	r0, [pc, #612]	; (16300 <event_connection_prepare+0x1228>)
   1609c:	f7f9 f975 	bl	f38a <mem_acquire>
	if (node_tx) {
   160a0:	4601      	mov	r1, r0
   160a2:	2800      	cmp	r0, #0
   160a4:	f43f ae59 	beq.w	15d5a <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   160a8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   160ac:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   160b0:	7903      	ldrb	r3, [r0, #4]
   160b2:	f043 0303 	orr.w	r3, r3, #3
   160b6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   160b8:	2301      	movs	r3, #1
   160ba:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   160bc:	2312      	movs	r3, #18
   160be:	71c3      	strb	r3, [r0, #7]
		ctrl_tx_enqueue(conn, node_tx);
   160c0:	4620      	mov	r0, r4
   160c2:	f7fb fbf3 	bl	118ac <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   160c6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   160ca:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   160ce:	e644      	b.n	15d5a <event_connection_prepare+0xc82>
	if (conn->llcp.phy_upd_ind.initiate) {
   160d0:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   160d4:	f012 0f01 	tst.w	r2, #1
   160d8:	d16b      	bne.n	161b2 <event_connection_prepare+0x10da>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   160da:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   160de:	1aeb      	subs	r3, r5, r3
   160e0:	b29b      	uxth	r3, r3
   160e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   160e6:	f6bf ae38 	bge.w	15d5a <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   160ea:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   160ee:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		old_tx = conn->phy_tx;
   160f2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   160f6:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		old_rx = conn->phy_rx;
   160fa:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   160fe:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp.phy_upd_ind.tx) {
   16102:	f012 0f1c 	tst.w	r2, #28
   16106:	d009      	beq.n	1611c <event_connection_prepare+0x1044>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   16108:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1610c:	f3c3 0382 	ubfx	r3, r3, #2, #3
   16110:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
   16114:	f363 0ec5 	bfi	lr, r3, #3, #3
   16118:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   1611c:	f012 0fe0 	tst.w	r2, #224	; 0xe0
   16120:	d008      	beq.n	16134 <event_connection_prepare+0x105c>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   16122:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16126:	095b      	lsrs	r3, r3, #5
   16128:	f894 e03a 	ldrb.w	lr, [r4, #58]	; 0x3a
   1612c:	f363 0e02 	bfi	lr, r3, #0, #3
   16130:	f884 e03a 	strb.w	lr, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   16134:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   16138:	f3c3 1e80 	ubfx	lr, r3, #6, #1
   1613c:	f36e 13c7 	bfi	r3, lr, #7, #1
   16140:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   16144:	f012 0f02 	tst.w	r2, #2
   16148:	d105      	bne.n	16156 <event_connection_prepare+0x107e>
   1614a:	b2db      	uxtb	r3, r3
   1614c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   16150:	4299      	cmp	r1, r3
   16152:	f000 80b0 	beq.w	162b6 <event_connection_prepare+0x11de>
	if (_radio.packet_rx_acquire >=
   16156:	4b6b      	ldr	r3, [pc, #428]	; (16304 <event_connection_prepare+0x122c>)
   16158:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1615c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16160:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16162:	429a      	cmp	r2, r3
   16164:	f0c0 80af 	bcc.w	162c6 <event_connection_prepare+0x11ee>
			_radio.packet_rx_last);
   16168:	4b66      	ldr	r3, [pc, #408]	; (16304 <event_connection_prepare+0x122c>)
   1616a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1616e:	1ad3      	subs	r3, r2, r3
   16170:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16172:	2b01      	cmp	r3, #1
   16174:	f240 80b1 	bls.w	162da <event_connection_prepare+0x1202>
	return _radio.packet_rx[_radio.packet_rx_last];
   16178:	4b62      	ldr	r3, [pc, #392]	; (16304 <event_connection_prepare+0x122c>)
   1617a:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1617e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   16186:	2b00      	cmp	r3, #0
   16188:	f000 80a9 	beq.w	162de <event_connection_prepare+0x1206>
		node_rx->hdr.handle = conn->handle;
   1618c:	8c22      	ldrh	r2, [r4, #32]
   1618e:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16190:	220c      	movs	r2, #12
   16192:	711a      	strb	r2, [r3, #4]
		p->status = 0;
   16194:	2200      	movs	r2, #0
   16196:	72da      	strb	r2, [r3, #11]
		p->tx = conn->phy_tx;
   16198:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1619c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   161a0:	731a      	strb	r2, [r3, #12]
		p->rx = conn->phy_rx;
   161a2:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   161a6:	f3c2 0202 	ubfx	r2, r2, #0, #3
   161aa:	735a      	strb	r2, [r3, #13]
		packet_rx_enqueue();
   161ac:	f7fe f932 	bl	14414 <packet_rx_enqueue>
   161b0:	e5d3      	b.n	15d5a <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   161b2:	4853      	ldr	r0, [pc, #332]	; (16300 <event_connection_prepare+0x1228>)
   161b4:	f7f9 f8e9 	bl	f38a <mem_acquire>
		if (node_tx) {
   161b8:	4680      	mov	r8, r0
   161ba:	2800      	cmp	r0, #0
   161bc:	f43f adcd 	beq.w	15d5a <event_connection_prepare+0xc82>
			conn->llcp.phy_upd_ind.initiate = 0;
   161c0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   161c4:	f36f 0300 	bfc	r3, #0, #1
   161c8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   161cc:	b2db      	uxtb	r3, r3
   161ce:	f3c3 0282 	ubfx	r2, r3, #2, #3
   161d2:	ea52 1353 	orrs.w	r3, r2, r3, lsr #5
   161d6:	d147      	bne.n	16268 <event_connection_prepare+0x1190>
				conn->llcp_ack = conn->llcp_req;
   161d8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   161dc:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
				conn->llcp.phy_upd_ind.instant = 0;
   161e0:	2300      	movs	r3, #0
   161e2:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   161e6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   161ea:	f013 0f02 	tst.w	r3, #2
   161ee:	d041      	beq.n	16274 <event_connection_prepare+0x119c>
	if (_radio.packet_rx_acquire >=
   161f0:	4b44      	ldr	r3, [pc, #272]	; (16304 <event_connection_prepare+0x122c>)
   161f2:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   161f6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   161fa:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   161fc:	429a      	cmp	r2, r3
   161fe:	d321      	bcc.n	16244 <event_connection_prepare+0x116c>
			_radio.packet_rx_last);
   16200:	4b40      	ldr	r3, [pc, #256]	; (16304 <event_connection_prepare+0x122c>)
   16202:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16206:	1ad3      	subs	r3, r2, r3
   16208:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1620a:	2b01      	cmp	r3, #1
   1620c:	d924      	bls.n	16258 <event_connection_prepare+0x1180>
	return _radio.packet_rx[_radio.packet_rx_last];
   1620e:	4b3d      	ldr	r3, [pc, #244]	; (16304 <event_connection_prepare+0x122c>)
   16210:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16214:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					LL_ASSERT(node_rx);
   1621c:	b1f3      	cbz	r3, 1625c <event_connection_prepare+0x1184>
					node_rx->hdr.handle = conn->handle;
   1621e:	8c22      	ldrh	r2, [r4, #32]
   16220:	80da      	strh	r2, [r3, #6]
					node_rx->hdr.type =
   16222:	220c      	movs	r2, #12
   16224:	711a      	strb	r2, [r3, #4]
					p->status = 0;
   16226:	2200      	movs	r2, #0
   16228:	72da      	strb	r2, [r3, #11]
					p->tx = conn->phy_tx;
   1622a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1622e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   16232:	731a      	strb	r2, [r3, #12]
					p->rx = conn->phy_rx;
   16234:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   16238:	f3c2 0202 	ubfx	r2, r2, #0, #3
   1623c:	735a      	strb	r2, [r3, #13]
					packet_rx_enqueue();
   1623e:	f7fe f8e9 	bl	14414 <packet_rx_enqueue>
   16242:	e017      	b.n	16274 <event_connection_prepare+0x119c>
		return (_radio.packet_rx_count -
   16244:	492f      	ldr	r1, [pc, #188]	; (16304 <event_connection_prepare+0x122c>)
   16246:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   1624a:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1624e:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   16250:	fa52 f383 	uxtab	r3, r2, r3
   16254:	b2db      	uxtb	r3, r3
   16256:	e7d8      	b.n	1620a <event_connection_prepare+0x1132>
		return 0;
   16258:	2300      	movs	r3, #0
   1625a:	e7df      	b.n	1621c <event_connection_prepare+0x1144>
					LL_ASSERT(node_rx);
   1625c:	4040      	eors	r0, r0
   1625e:	f380 8811 	msr	BASEPRI, r0
   16262:	f04f 0004 	mov.w	r0, #4
   16266:	df02      	svc	2
								 conn->latency +
   16268:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
				conn->llcp.phy_upd_ind.instant = event_counter +
   1626a:	442b      	add	r3, r5
   1626c:	b29b      	uxth	r3, r3
								 conn->latency +
   1626e:	3306      	adds	r3, #6
				conn->llcp.phy_upd_ind.instant = event_counter +
   16270:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16274:	f898 3004 	ldrb.w	r3, [r8, #4]
   16278:	f043 0303 	orr.w	r3, r3, #3
   1627c:	f888 3004 	strb.w	r3, [r8, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   16280:	2305      	movs	r3, #5
   16282:	f888 3005 	strb.w	r3, [r8, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   16286:	2318      	movs	r3, #24
   16288:	f888 3007 	strb.w	r3, [r8, #7]
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1628c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16290:	f3c3 0382 	ubfx	r3, r3, #2, #3
   16294:	f888 3008 	strb.w	r3, [r8, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   16298:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1629c:	f3c3 1342 	ubfx	r3, r3, #5, #3
   162a0:	f888 3009 	strb.w	r3, [r8, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
   162a4:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   162a8:	f8a8 300a 	strh.w	r3, [r8, #10]
			ctrl_tx_enqueue(conn, node_tx);
   162ac:	4641      	mov	r1, r8
   162ae:	4620      	mov	r0, r4
   162b0:	f7fb fafc 	bl	118ac <ctrl_tx_enqueue>
   162b4:	e551      	b.n	15d5a <event_connection_prepare+0xc82>
		    (conn->phy_rx == old_rx)) {
   162b6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   162ba:	f003 0307 	and.w	r3, r3, #7
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   162be:	4298      	cmp	r0, r3
   162c0:	f47f af49 	bne.w	16156 <event_connection_prepare+0x107e>
   162c4:	e549      	b.n	15d5a <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   162c6:	490f      	ldr	r1, [pc, #60]	; (16304 <event_connection_prepare+0x122c>)
   162c8:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   162cc:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   162d0:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   162d2:	fa52 f383 	uxtab	r3, r2, r3
   162d6:	b2db      	uxtb	r3, r3
   162d8:	e74b      	b.n	16172 <event_connection_prepare+0x109a>
		return 0;
   162da:	2300      	movs	r3, #0
   162dc:	e753      	b.n	16186 <event_connection_prepare+0x10ae>
		LL_ASSERT(node_rx);
   162de:	4040      	eors	r0, r0
   162e0:	f380 8811 	msr	BASEPRI, r0
   162e4:	f04f 0004 	mov.w	r0, #4
   162e8:	df02      	svc	2
			LL_ASSERT(0);
   162ea:	4040      	eors	r0, r0
   162ec:	f380 8811 	msr	BASEPRI, r0
   162f0:	f04f 0004 	mov.w	r0, #4
   162f4:	df02      	svc	2
				conn->procedure_expire++;
   162f6:	3301      	adds	r3, #1
   162f8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   162fc:	e555      	b.n	15daa <event_connection_prepare+0xcd2>
   162fe:	bf00      	nop
   16300:	2000114c 	.word	0x2000114c
   16304:	20000ff4 	.word	0x20000ff4
	if (_radio.packet_rx_acquire >=
   16308:	4bbf      	ldr	r3, [pc, #764]	; (16608 <event_connection_prepare+0x1530>)
   1630a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1630e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16312:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16314:	429a      	cmp	r2, r3
   16316:	d346      	bcc.n	163a6 <event_connection_prepare+0x12ce>
			_radio.packet_rx_last);
   16318:	4bbb      	ldr	r3, [pc, #748]	; (16608 <event_connection_prepare+0x1530>)
   1631a:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1631e:	eba2 0808 	sub.w	r8, r2, r8
   16322:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   16326:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   1632a:	4bb7      	ldr	r3, [pc, #732]	; (16608 <event_connection_prepare+0x1530>)
   1632c:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   16330:	f7f9 f85f 	bl	f3f2 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   16334:	4440      	add	r0, r8
   16336:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   16338:	28ff      	cmp	r0, #255	; 0xff
   1633a:	d840      	bhi.n	163be <event_connection_prepare+0x12e6>
		if (_radio.packet_rx_data_count != free_count_rx) {
   1633c:	4bb2      	ldr	r3, [pc, #712]	; (16608 <event_connection_prepare+0x1530>)
   1633e:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   16342:	4298      	cmp	r0, r3
   16344:	f040 8131 	bne.w	165aa <event_connection_prepare+0x14d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16348:	48b0      	ldr	r0, [pc, #704]	; (1660c <event_connection_prepare+0x1534>)
   1634a:	f7f9 f81e 	bl	f38a <mem_acquire>
		if (!node_tx) {
   1634e:	4601      	mov	r1, r0
   16350:	2800      	cmp	r0, #0
   16352:	f000 812a 	beq.w	165aa <event_connection_prepare+0x14d2>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   16356:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   1635a:	2201      	movs	r2, #1
   1635c:	f362 0301 	bfi	r3, r2, #0, #2
   16360:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   16364:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   16368:	85a3      	strh	r3, [r4, #44]	; 0x2c
		conn->default_tx_time = conn->llcp_length.tx_time;
   1636a:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   1636e:	8663      	strh	r3, [r4, #50]	; 0x32
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16370:	7903      	ldrb	r3, [r0, #4]
   16372:	f043 0303 	orr.w	r3, r3, #3
   16376:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   16378:	2309      	movs	r3, #9
   1637a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   1637c:	2314      	movs	r3, #20
   1637e:	71c3      	strb	r3, [r0, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   16380:	231b      	movs	r3, #27
   16382:	7203      	strb	r3, [r0, #8]
   16384:	2300      	movs	r3, #0
   16386:	7243      	strb	r3, [r0, #9]
		lr->max_tx_octets = conn->default_tx_octets;
   16388:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1638a:	8183      	strh	r3, [r0, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   1638c:	2348      	movs	r3, #72	; 0x48
   1638e:	7283      	strb	r3, [r0, #10]
   16390:	72ca      	strb	r2, [r1, #11]
		lr->max_tx_time = conn->default_tx_time;
   16392:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   16394:	81c3      	strh	r3, [r0, #14]
		ctrl_tx_enqueue(conn, node_tx);
   16396:	4620      	mov	r0, r4
   16398:	f7fb fa88 	bl	118ac <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   1639c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   163a0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   163a4:	e101      	b.n	165aa <event_connection_prepare+0x14d2>
		return (_radio.packet_rx_count -
   163a6:	4b98      	ldr	r3, [pc, #608]	; (16608 <event_connection_prepare+0x1530>)
   163a8:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   163ac:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   163b0:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   163b4:	fa52 f888 	uxtab	r8, r2, r8
   163b8:	fa5f f888 	uxtb.w	r8, r8
   163bc:	e7b3      	b.n	16326 <event_connection_prepare+0x124e>
		LL_ASSERT(free_count_rx <= 0xFF);
   163be:	4040      	eors	r0, r0
   163c0:	f380 8811 	msr	BASEPRI, r0
   163c4:	f04f 0004 	mov.w	r0, #4
   163c8:	df02      	svc	2
	if (_radio.packet_rx_acquire >=
   163ca:	4b8f      	ldr	r3, [pc, #572]	; (16608 <event_connection_prepare+0x1530>)
   163cc:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   163d0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   163d4:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   163d6:	429a      	cmp	r2, r3
   163d8:	d352      	bcc.n	16480 <event_connection_prepare+0x13a8>
			_radio.packet_rx_last);
   163da:	4b8b      	ldr	r3, [pc, #556]	; (16608 <event_connection_prepare+0x1530>)
   163dc:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   163e0:	eba2 0808 	sub.w	r8, r2, r8
   163e4:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   163e8:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   163ec:	4b86      	ldr	r3, [pc, #536]	; (16608 <event_connection_prepare+0x1530>)
   163ee:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   163f2:	f7f8 fffe 	bl	f3f2 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   163f6:	4440      	add	r0, r8
   163f8:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   163fa:	28ff      	cmp	r0, #255	; 0xff
   163fc:	d84c      	bhi.n	16498 <event_connection_prepare+0x13c0>
		if (_radio.packet_rx_data_count != free_count_rx) {
   163fe:	4b82      	ldr	r3, [pc, #520]	; (16608 <event_connection_prepare+0x1530>)
   16400:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   16404:	4298      	cmp	r0, r3
   16406:	d14d      	bne.n	164a4 <event_connection_prepare+0x13cc>
		conn->llcp_length.ack = conn->llcp_length.req;
   16408:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1640c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->procedure_expire = 0;
   16410:	2100      	movs	r1, #0
   16412:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   16416:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 16608 <event_connection_prepare+0x1530>
   1641a:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
   1641e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   16422:	f361 02c3 	bfi	r2, r1, #3, #1
   16426:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   1642a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   1642e:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   16430:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   16434:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   16436:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
   1643a:	f7f8 ffda 	bl	f3f2 <mem_free_count_get>
		if (_radio.advertiser.conn) {
   1643e:	f8d8 30c8 	ldr.w	r3, [r8, #200]	; 0xc8
   16442:	b10b      	cbz	r3, 16448 <event_connection_prepare+0x1370>
			free_count_conn++;
   16444:	3001      	adds	r0, #1
   16446:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   16448:	4b6f      	ldr	r3, [pc, #444]	; (16608 <event_connection_prepare+0x1530>)
   1644a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   1644e:	b10b      	cbz	r3, 16454 <event_connection_prepare+0x137c>
			free_count_conn++;
   16450:	3001      	adds	r0, #1
   16452:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   16454:	f8b4 9030 	ldrh.w	r9, [r4, #48]	; 0x30
   16458:	f109 090e 	add.w	r9, r9, #14
   1645c:	fa1f f989 	uxth.w	r9, r9
   16460:	f029 0903 	bic.w	r9, r9, #3
   16464:	fa1f f989 	uxth.w	r9, r9
		if (((free_count_conn + 1) == _radio.connection_count) ||
   16468:	3001      	adds	r0, #1
   1646a:	4b67      	ldr	r3, [pc, #412]	; (16608 <event_connection_prepare+0x1530>)
   1646c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   16470:	4298      	cmp	r0, r3
   16472:	d038      	beq.n	164e6 <event_connection_prepare+0x140e>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
   16474:	4b64      	ldr	r3, [pc, #400]	; (16608 <event_connection_prepare+0x1530>)
   16476:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
		if (((free_count_conn + 1) == _radio.connection_count) ||
   1647a:	4599      	cmp	r9, r3
   1647c:	d833      	bhi.n	164e6 <event_connection_prepare+0x140e>
   1647e:	e066      	b.n	1654e <event_connection_prepare+0x1476>
		return (_radio.packet_rx_count -
   16480:	4b61      	ldr	r3, [pc, #388]	; (16608 <event_connection_prepare+0x1530>)
   16482:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   16486:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1648a:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   1648e:	fa52 f888 	uxtab	r8, r2, r8
   16492:	fa5f f888 	uxtb.w	r8, r8
   16496:	e7a7      	b.n	163e8 <event_connection_prepare+0x1310>
		LL_ASSERT(free_count_rx <= 0xFF);
   16498:	4040      	eors	r0, r0
   1649a:	f380 8811 	msr	BASEPRI, r0
   1649e:	f04f 0004 	mov.w	r0, #4
   164a2:	df02      	svc	2
			LL_ASSERT(0);
   164a4:	4040      	eors	r0, r0
   164a6:	f380 8811 	msr	BASEPRI, r0
   164aa:	f04f 0004 	mov.w	r0, #4
   164ae:	df02      	svc	2
					_radio.packet_rx_acquire -= 1;
   164b0:	3b01      	subs	r3, #1
   164b2:	4a55      	ldr	r2, [pc, #340]	; (16608 <event_connection_prepare+0x1530>)
   164b4:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   164b8:	4f53      	ldr	r7, [pc, #332]	; (16608 <event_connection_prepare+0x1530>)
   164ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
						_radio.packet_rx_acquire];
   164be:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   164c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				mem_release(node_rx->hdr.onion.link,
   164c6:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   164ca:	6818      	ldr	r0, [r3, #0]
   164cc:	f7f8 ff79 	bl	f3c2 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   164d0:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
   164d4:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
   164d8:	3a01      	subs	r2, #1
   164da:	4293      	cmp	r3, r2
   164dc:	da14      	bge.n	16508 <event_connection_prepare+0x1430>
				_radio.link_rx_data_quota++;
   164de:	3301      	adds	r3, #1
   164e0:	4a49      	ldr	r2, [pc, #292]	; (16608 <event_connection_prepare+0x1530>)
   164e2:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
			while (_radio.packet_rx_acquire !=
   164e6:	4a48      	ldr	r2, [pc, #288]	; (16608 <event_connection_prepare+0x1530>)
   164e8:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
				_radio.packet_rx_last) {
   164ec:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   164f0:	b2d2      	uxtb	r2, r2
			while (_radio.packet_rx_acquire !=
   164f2:	4293      	cmp	r3, r2
   164f4:	d00e      	beq.n	16514 <event_connection_prepare+0x143c>
				if (_radio.packet_rx_acquire == 0) {
   164f6:	2b00      	cmp	r3, #0
   164f8:	d1da      	bne.n	164b0 <event_connection_prepare+0x13d8>
						_radio.packet_rx_count - 1;
   164fa:	4a43      	ldr	r2, [pc, #268]	; (16608 <event_connection_prepare+0x1530>)
   164fc:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
   16500:	3b01      	subs	r3, #1
					_radio.packet_rx_acquire =
   16502:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
   16506:	e7d7      	b.n	164b8 <event_connection_prepare+0x13e0>
				LL_ASSERT(_radio.link_rx_data_quota <
   16508:	4040      	eors	r0, r0
   1650a:	f380 8811 	msr	BASEPRI, r0
   1650e:	f04f 0004 	mov.w	r0, #4
   16512:	df02      	svc	2
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   16514:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   16516:	2b29      	cmp	r3, #41	; 0x29
   16518:	d85f      	bhi.n	165da <event_connection_prepare+0x1502>
				_radio.packet_rx_data_size =
   1651a:	2234      	movs	r2, #52	; 0x34
   1651c:	4b3a      	ldr	r3, [pc, #232]	; (16608 <event_connection_prepare+0x1530>)
   1651e:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				_radio.packet_rx_data_pool_size /
   16522:	4b39      	ldr	r3, [pc, #228]	; (16608 <event_connection_prepare+0x1530>)
   16524:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
				_radio.packet_rx_data_size;
   16528:	f8b3 1134 	ldrh.w	r1, [r3, #308]	; 0x134
			_radio.packet_rx_data_count =
   1652c:	fbb2 f2f1 	udiv	r2, r2, r1
   16530:	b2d2      	uxtb	r2, r2
   16532:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
			LL_ASSERT(_radio.packet_rx_data_count);
   16536:	2a00      	cmp	r2, #0
   16538:	d053      	beq.n	165e2 <event_connection_prepare+0x150a>
			mem_init(_radio.pkt_rx_data_pool,
   1653a:	4833      	ldr	r0, [pc, #204]	; (16608 <event_connection_prepare+0x1530>)
   1653c:	f500 7396 	add.w	r3, r0, #300	; 0x12c
   16540:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
   16544:	f7f8 fefc 	bl	f340 <mem_init>
			packet_rx_allocate(4);
   16548:	2004      	movs	r0, #4
   1654a:	f7fb fc59 	bl	11e00 <packet_rx_allocate>
	if (_radio.packet_rx_acquire >=
   1654e:	4b2e      	ldr	r3, [pc, #184]	; (16608 <event_connection_prepare+0x1530>)
   16550:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16554:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16558:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1655a:	429a      	cmp	r2, r3
   1655c:	d347      	bcc.n	165ee <event_connection_prepare+0x1516>
			_radio.packet_rx_last);
   1655e:	4b2a      	ldr	r3, [pc, #168]	; (16608 <event_connection_prepare+0x1530>)
   16560:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16564:	1ad3      	subs	r3, r2, r3
   16566:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16568:	2b01      	cmp	r3, #1
   1656a:	d94a      	bls.n	16602 <event_connection_prepare+0x152a>
	return _radio.packet_rx[_radio.packet_rx_last];
   1656c:	4b26      	ldr	r3, [pc, #152]	; (16608 <event_connection_prepare+0x1530>)
   1656e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16572:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   1657a:	2b00      	cmp	r3, #0
   1657c:	d04a      	beq.n	16614 <event_connection_prepare+0x153c>
		node_rx->hdr.handle = conn->handle;
   1657e:	8c22      	ldrh	r2, [r4, #32]
   16580:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16582:	2201      	movs	r2, #1
   16584:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   16586:	7a1a      	ldrb	r2, [r3, #8]
   16588:	f042 0203 	orr.w	r2, r2, #3
   1658c:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
   1658e:	2209      	movs	r2, #9
   16590:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   16592:	2215      	movs	r2, #21
   16594:	72da      	strb	r2, [r3, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   16596:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   16598:	819a      	strh	r2, [r3, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   1659a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   1659c:	821a      	strh	r2, [r3, #16]
		lr->max_rx_time = conn->max_rx_time;
   1659e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   165a0:	81da      	strh	r2, [r3, #14]
		lr->max_tx_time = conn->max_tx_time;
   165a2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   165a4:	825a      	strh	r2, [r3, #18]
		packet_rx_enqueue();
   165a6:	f7fd ff35 	bl	14414 <packet_rx_enqueue>
	event_common_prepare(ticks_at_expire, remainder,
   165aa:	1d23      	adds	r3, r4, #4
   165ac:	68a1      	ldr	r1, [r4, #8]
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   165ae:	8c22      	ldrh	r2, [r4, #32]
	event_common_prepare(ticks_at_expire, remainder,
   165b0:	3207      	adds	r2, #7
   165b2:	b2d2      	uxtb	r2, r2
   165b4:	f994 001d 	ldrsb.w	r0, [r4, #29]
   165b8:	2800      	cmp	r0, #0
   165ba:	db37      	blt.n	1662c <event_connection_prepare+0x1554>
   165bc:	4814      	ldr	r0, [pc, #80]	; (16610 <event_connection_prepare+0x1538>)
   165be:	9403      	str	r4, [sp, #12]
   165c0:	9002      	str	r0, [sp, #8]
   165c2:	9201      	str	r2, [sp, #4]
   165c4:	9100      	str	r1, [sp, #0]
   165c6:	4622      	mov	r2, r4
   165c8:	990a      	ldr	r1, [sp, #40]	; 0x28
   165ca:	4630      	mov	r0, r6
   165cc:	f7fe fc7e 	bl	14ecc <event_common_prepare>
	conn->event_counter = event_counter + 1;
   165d0:	3501      	adds	r5, #1
   165d2:	8465      	strh	r5, [r4, #34]	; 0x22
}
   165d4:	b00f      	add	sp, #60	; 0x3c
   165d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				_radio.packet_rx_data_size =
   165da:	4b0b      	ldr	r3, [pc, #44]	; (16608 <event_connection_prepare+0x1530>)
   165dc:	f8a3 9134 	strh.w	r9, [r3, #308]	; 0x134
   165e0:	e79f      	b.n	16522 <event_connection_prepare+0x144a>
			LL_ASSERT(_radio.packet_rx_data_count);
   165e2:	4040      	eors	r0, r0
   165e4:	f380 8811 	msr	BASEPRI, r0
   165e8:	f04f 0004 	mov.w	r0, #4
   165ec:	df02      	svc	2
		return (_radio.packet_rx_count -
   165ee:	4906      	ldr	r1, [pc, #24]	; (16608 <event_connection_prepare+0x1530>)
   165f0:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   165f4:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   165f8:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   165fa:	fa52 f383 	uxtab	r3, r2, r3
   165fe:	b2db      	uxtb	r3, r3
   16600:	e7b2      	b.n	16568 <event_connection_prepare+0x1490>
		return 0;
   16602:	2300      	movs	r3, #0
   16604:	e7b9      	b.n	1657a <event_connection_prepare+0x14a2>
   16606:	bf00      	nop
   16608:	20000ff4 	.word	0x20000ff4
   1660c:	2000114c 	.word	0x2000114c
   16610:	00016a89 	.word	0x00016a89
		LL_ASSERT(node_rx);
   16614:	4040      	eors	r0, r0
   16616:	f380 8811 	msr	BASEPRI, r0
   1661a:	f04f 0004 	mov.w	r0, #4
   1661e:	df02      	svc	2
		LL_ASSERT(0);
   16620:	4040      	eors	r0, r0
   16622:	f380 8811 	msr	BASEPRI, r0
   16626:	f04f 0004 	mov.w	r0, #4
   1662a:	df02      	svc	2
	event_common_prepare(ticks_at_expire, remainder,
   1662c:	4800      	ldr	r0, [pc, #0]	; (16630 <event_connection_prepare+0x1558>)
   1662e:	e7c6      	b.n	165be <event_connection_prepare+0x14e6>
   16630:	00016bc5 	.word	0x00016bc5

00016634 <event_slave_prepare>:
{
   16634:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   16636:	f7fe fd4f 	bl	150d8 <event_connection_prepare>
   1663a:	bd08      	pop	{r3, pc}

0001663c <event_master_prepare>:
{
   1663c:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   1663e:	f7fe fd4b 	bl	150d8 <event_connection_prepare>
   16642:	bd08      	pop	{r3, pc}

00016644 <event_scan_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   16644:	4b20      	ldr	r3, [pc, #128]	; (166c8 <event_scan_prepare+0x84>)
   16646:	7b1b      	ldrb	r3, [r3, #12]
   16648:	bb23      	cbnz	r3, 16694 <event_scan_prepare+0x50>
{
   1664a:	b530      	push	{r4, r5, lr}
   1664c:	b085      	sub	sp, #20
   1664e:	4605      	mov	r5, r0
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   16650:	4c1d      	ldr	r4, [pc, #116]	; (166c8 <event_scan_prepare+0x84>)
   16652:	2306      	movs	r3, #6
   16654:	7323      	strb	r3, [r4, #12]
	event_common_prepare(ticks_at_expire, remainder,
   16656:	2200      	movs	r2, #0
   16658:	9203      	str	r2, [sp, #12]
   1665a:	4a1c      	ldr	r2, [pc, #112]	; (166cc <event_scan_prepare+0x88>)
   1665c:	9202      	str	r2, [sp, #8]
   1665e:	9301      	str	r3, [sp, #4]
   16660:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   16664:	9300      	str	r3, [sp, #0]
   16666:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   1666a:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   1666e:	f7fe fc2d 	bl	14ecc <event_common_prepare>
	if (_radio.scanner.conn) {
   16672:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   16676:	b15b      	cbz	r3, 16690 <event_scan_prepare+0x4c>
		if (_radio.scanner.hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   16678:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1667c:	2b00      	cmp	r3, #0
   1667e:	db0f      	blt.n	166a0 <event_scan_prepare+0x5c>
		s_mfy_sched_after_mstr_free_offset_get.param =
   16680:	4b13      	ldr	r3, [pc, #76]	; (166d0 <event_scan_prepare+0x8c>)
   16682:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   16684:	2201      	movs	r2, #1
   16686:	4611      	mov	r1, r2
   16688:	2000      	movs	r0, #0
   1668a:	f7f8 fd3d 	bl	f108 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1668e:	b9a8      	cbnz	r0, 166bc <event_scan_prepare+0x78>
}
   16690:	b005      	add	sp, #20
   16692:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   16694:	4040      	eors	r0, r0
   16696:	f380 8811 	msr	BASEPRI, r0
   1669a:	f04f 0004 	mov.w	r0, #4
   1669e:	df02      	svc	2
				_radio.scanner.hdr.ticks_preempt_to_start;
   166a0:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
				_radio.scanner.hdr.ticks_active_to_start :
   166a4:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
				((_radio.scanner.hdr.ticks_xtal_to_start &
   166a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   166ac:	4291      	cmp	r1, r2
   166ae:	bf2c      	ite	cs
   166b0:	ebc3 0301 	rsbcs	r3, r3, r1
   166b4:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
   166b8:	441d      	add	r5, r3
   166ba:	e7e1      	b.n	16680 <event_scan_prepare+0x3c>
		LL_ASSERT(!retval);
   166bc:	4040      	eors	r0, r0
   166be:	f380 8811 	msr	BASEPRI, r0
   166c2:	f04f 0004 	mov.w	r0, #4
   166c6:	df02      	svc	2
   166c8:	20000ff4 	.word	0x20000ff4
   166cc:	00016d61 	.word	0x00016d61
   166d0:	2000bda0 	.word	0x2000bda0
   166d4:	00000000 	.word	0x00000000

000166d8 <mayfly_xtal_stop_calc>:
{
   166d8:	b530      	push	{r4, r5, lr}
   166da:	b08d      	sub	sp, #52	; 0x34
   166dc:	4604      	mov	r4, r0
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   166de:	2302      	movs	r3, #2
   166e0:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = 0xff;
   166e2:	23ff      	movs	r3, #255	; 0xff
   166e4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	ticks_to_expire = 0;
   166e8:	2300      	movs	r3, #0
   166ea:	930a      	str	r3, [sp, #40]	; 0x28
   166ec:	e012      	b.n	16714 <mayfly_xtal_stop_calc+0x3c>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   166ee:	2101      	movs	r1, #1
   166f0:	2000      	movs	r0, #0
   166f2:	f7fa fc71 	bl	10fd8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   166f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   166f8:	2b02      	cmp	r3, #2
   166fa:	d0f8      	beq.n	166ee <mayfly_xtal_stop_calc+0x16>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   166fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   166fe:	b9cb      	cbnz	r3, 16734 <mayfly_xtal_stop_calc+0x5c>
	} while (ticker_id != 0xff &&
   16700:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
			       _radio.connection_count));
   16704:	2aff      	cmp	r2, #255	; 0xff
   16706:	d01b      	beq.n	16740 <mayfly_xtal_stop_calc+0x68>
   16708:	4b8b      	ldr	r3, [pc, #556]	; (16938 <mayfly_xtal_stop_calc+0x260>)
   1670a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   1670e:	3307      	adds	r3, #7
	} while (ticker_id != 0xff &&
   16710:	429a      	cmp	r2, r3
   16712:	db15      	blt.n	16740 <mayfly_xtal_stop_calc+0x68>
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   16714:	ab0b      	add	r3, sp, #44	; 0x2c
   16716:	9302      	str	r3, [sp, #8]
   16718:	4b88      	ldr	r3, [pc, #544]	; (1693c <mayfly_xtal_stop_calc+0x264>)
   1671a:	9301      	str	r3, [sp, #4]
   1671c:	ab0a      	add	r3, sp, #40	; 0x28
   1671e:	9300      	str	r3, [sp, #0]
   16720:	ab09      	add	r3, sp, #36	; 0x24
   16722:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   16726:	2101      	movs	r1, #1
   16728:	2000      	movs	r0, #0
   1672a:	f7fa fbd5 	bl	10ed8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   1672e:	2802      	cmp	r0, #2
   16730:	d1e4      	bne.n	166fc <mayfly_xtal_stop_calc+0x24>
   16732:	e7e0      	b.n	166f6 <mayfly_xtal_stop_calc+0x1e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   16734:	4040      	eors	r0, r0
   16736:	f380 8811 	msr	BASEPRI, r0
   1673a:	f04f 0004 	mov.w	r0, #4
   1673e:	df02      	svc	2
	if ((ticker_id != 0xff) &&
   16740:	2aff      	cmp	r2, #255	; 0xff
   16742:	d002      	beq.n	1674a <mayfly_xtal_stop_calc+0x72>
	    (ticks_to_expire <
   16744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	if ((ticker_id != 0xff) &&
   16746:	2ba8      	cmp	r3, #168	; 0xa8
   16748:	d91a      	bls.n	16780 <mayfly_xtal_stop_calc+0xa8>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   1674a:	2100      	movs	r1, #0
   1674c:	2001      	movs	r0, #1
   1674e:	f7fb fdcd 	bl	122ec <mayfly_xtal_retain>
		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
   16752:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   16756:	1f53      	subs	r3, r2, #5
   16758:	b2db      	uxtb	r3, r3
   1675a:	2bf9      	cmp	r3, #249	; 0xf9
   1675c:	d80e      	bhi.n	1677c <mayfly_xtal_stop_calc+0xa4>
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   1675e:	2a06      	cmp	r2, #6
   16760:	f200 80d1 	bhi.w	16906 <mayfly_xtal_stop_calc+0x22e>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   16764:	2a05      	cmp	r2, #5
   16766:	f000 80de 	beq.w	16926 <mayfly_xtal_stop_calc+0x24e>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   1676a:	2a06      	cmp	r2, #6
   1676c:	f040 80d5 	bne.w	1691a <mayfly_xtal_stop_calc+0x242>
				hdr = &_radio.scanner.hdr;
   16770:	4873      	ldr	r0, [pc, #460]	; (16940 <mayfly_xtal_stop_calc+0x268>)
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
   16772:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   16776:	2101      	movs	r1, #1
   16778:	f7fe fb80 	bl	14e7c <prepare_normal_set>
}
   1677c:	b00d      	add	sp, #52	; 0x34
   1677e:	bd30      	pop	{r4, r5, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   16780:	2101      	movs	r1, #1
   16782:	4608      	mov	r0, r1
   16784:	f7fb fdb2 	bl	122ec <mayfly_xtal_retain>
		if (ticker_id >= RADIO_TICKER_ID_ADV) {
   16788:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1678c:	2b04      	cmp	r3, #4
   1678e:	d9f5      	bls.n	1677c <mayfly_xtal_stop_calc+0xa4>
			u8_t ticker_id_current = ((u32_t)params & 0xff);
   16790:	b2e4      	uxtb	r4, r4
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   16792:	2b06      	cmp	r3, #6
   16794:	d82a      	bhi.n	167ec <mayfly_xtal_stop_calc+0x114>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   16796:	2b05      	cmp	r3, #5
   16798:	d03a      	beq.n	16810 <mayfly_xtal_stop_calc+0x138>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   1679a:	2b06      	cmp	r3, #6
   1679c:	d132      	bne.n	16804 <mayfly_xtal_stop_calc+0x12c>
				hdr = &_radio.scanner.hdr;
   1679e:	4968      	ldr	r1, [pc, #416]	; (16940 <mayfly_xtal_stop_calc+0x268>)
			struct connection *conn = NULL;
   167a0:	2500      	movs	r5, #0
				hdr->ticks_preempt_to_start;
   167a2:	688b      	ldr	r3, [r1, #8]
				hdr->ticks_active_to_start :
   167a4:	684a      	ldr	r2, [r1, #4]
			ticks_prepare_to_start =
   167a6:	429a      	cmp	r2, r3
   167a8:	bf38      	it	cc
   167aa:	461a      	movcc	r2, r3
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
   167ac:	680b      	ldr	r3, [r1, #0]
   167ae:	2b00      	cmp	r3, #0
   167b0:	db31      	blt.n	16816 <mayfly_xtal_stop_calc+0x13e>
				if (hdr->ticks_xtal_to_start >
   167b2:	429a      	cmp	r2, r3
   167b4:	d336      	bcc.n	16824 <mayfly_xtal_stop_calc+0x14c>
			if (ticker_id_current >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   167b6:	2c06      	cmp	r4, #6
   167b8:	d84e      	bhi.n	16858 <mayfly_xtal_stop_calc+0x180>
			struct connection *conn_curr = NULL;
   167ba:	2400      	movs	r4, #0
			if ((conn) && (conn_curr) &&
   167bc:	2d00      	cmp	r5, #0
   167be:	d0dd      	beq.n	1677c <mayfly_xtal_stop_calc+0xa4>
   167c0:	2c00      	cmp	r4, #0
   167c2:	d0db      	beq.n	1677c <mayfly_xtal_stop_calc+0xa4>
			    (conn_curr->conn_interval == conn->conn_interval)) {
   167c4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   167c6:	8caa      	ldrh	r2, [r5, #36]	; 0x24
			if ((conn) && (conn_curr) &&
   167c8:	4293      	cmp	r3, r2
   167ca:	d1d7      	bne.n	1677c <mayfly_xtal_stop_calc+0xa4>
					TICKER_US_TO_TICKS(conn->conn_interval * 1250);
   167cc:	b292      	uxth	r2, r2
   167ce:	485d      	ldr	r0, [pc, #372]	; (16944 <mayfly_xtal_stop_calc+0x26c>)
   167d0:	fba2 0100 	umull	r0, r1, r2, r0
   167d4:	f240 1323 	movw	r3, #291	; 0x123
   167d8:	fb03 1102 	mla	r1, r3, r2, r1
   167dc:	a354      	add	r3, pc, #336	; (adr r3, 16930 <mayfly_xtal_stop_calc+0x258>)
   167de:	e9d3 2300 	ldrd	r2, r3, [r3]
   167e2:	f7ea fc8b 	bl	10fc <__aeabi_uldivmod>
				u32_t ticks_conn_interval =
   167e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				while (ticks_to_expire > ticks_conn_interval) {
   167ea:	e050      	b.n	1688e <mayfly_xtal_stop_calc+0x1b6>
				conn = mem_get(_radio.conn_pool,
   167ec:	3b07      	subs	r3, #7
   167ee:	b29a      	uxth	r2, r3
   167f0:	f44f 71aa 	mov.w	r1, #340	; 0x154
   167f4:	4b50      	ldr	r3, [pc, #320]	; (16938 <mayfly_xtal_stop_calc+0x260>)
   167f6:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   167fa:	f7f8 fe03 	bl	f404 <mem_get>
   167fe:	4605      	mov	r5, r0
				hdr = &conn->hdr;
   16800:	4601      	mov	r1, r0
   16802:	e7ce      	b.n	167a2 <mayfly_xtal_stop_calc+0xca>
				LL_ASSERT(0);
   16804:	4040      	eors	r0, r0
   16806:	f380 8811 	msr	BASEPRI, r0
   1680a:	f04f 0004 	mov.w	r0, #4
   1680e:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   16810:	494d      	ldr	r1, [pc, #308]	; (16948 <mayfly_xtal_stop_calc+0x270>)
			struct connection *conn = NULL;
   16812:	2500      	movs	r5, #0
   16814:	e7c5      	b.n	167a2 <mayfly_xtal_stop_calc+0xca>
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   16816:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						     (~((u32_t)1 << 31))) -
   1681a:	1ad3      	subs	r3, r2, r3
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   1681c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1681e:	4413      	add	r3, r2
   16820:	930a      	str	r3, [sp, #40]	; 0x28
   16822:	e7c8      	b.n	167b6 <mayfly_xtal_stop_calc+0xde>
					u32_t ticks_drift_plus =
   16824:	1a9b      	subs	r3, r3, r2
						ticker_update(
   16826:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1682a:	b29b      	uxth	r3, r3
					ticker_status =
   1682c:	9106      	str	r1, [sp, #24]
   1682e:	4947      	ldr	r1, [pc, #284]	; (1694c <mayfly_xtal_stop_calc+0x274>)
   16830:	9105      	str	r1, [sp, #20]
   16832:	2000      	movs	r0, #0
   16834:	9004      	str	r0, [sp, #16]
   16836:	9003      	str	r0, [sp, #12]
   16838:	9302      	str	r3, [sp, #8]
   1683a:	9001      	str	r0, [sp, #4]
   1683c:	9000      	str	r0, [sp, #0]
   1683e:	2101      	movs	r1, #1
   16840:	f7fa fac0 	bl	10dc4 <ticker_update>
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
   16844:	2800      	cmp	r0, #0
   16846:	d0b6      	beq.n	167b6 <mayfly_xtal_stop_calc+0xde>
   16848:	2802      	cmp	r0, #2
   1684a:	d0b4      	beq.n	167b6 <mayfly_xtal_stop_calc+0xde>
   1684c:	4040      	eors	r0, r0
   1684e:	f380 8811 	msr	BASEPRI, r0
   16852:	f04f 0004 	mov.w	r0, #4
   16856:	df02      	svc	2
					mem_get(_radio.conn_pool,
   16858:	3c07      	subs	r4, #7
				conn_curr =
   1685a:	b2a2      	uxth	r2, r4
   1685c:	f44f 71aa 	mov.w	r1, #340	; 0x154
   16860:	4b35      	ldr	r3, [pc, #212]	; (16938 <mayfly_xtal_stop_calc+0x260>)
   16862:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   16866:	f7f8 fdcd 	bl	f404 <mem_get>
   1686a:	4604      	mov	r4, r0
					conn_curr->hdr.ticks_preempt_to_start;
   1686c:	6883      	ldr	r3, [r0, #8]
					conn_curr->hdr.ticks_active_to_start :
   1686e:	6842      	ldr	r2, [r0, #4]
				ticks_prepare_to_start =
   16870:	429a      	cmp	r2, r3
   16872:	bf38      	it	cc
   16874:	461a      	movcc	r2, r3
				if ((conn_curr->hdr.ticks_xtal_to_start &
   16876:	6803      	ldr	r3, [r0, #0]
   16878:	2b00      	cmp	r3, #0
   1687a:	da9f      	bge.n	167bc <mayfly_xtal_stop_calc+0xe4>
						((conn_curr->hdr.ticks_xtal_to_start &
   1687c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						  (~((u32_t)1 << 31))) -
   16880:	1a9b      	subs	r3, r3, r2
					ticks_to_expire +=
   16882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16884:	4413      	add	r3, r2
   16886:	930a      	str	r3, [sp, #40]	; 0x28
   16888:	e798      	b.n	167bc <mayfly_xtal_stop_calc+0xe4>
					ticks_to_expire -= ticks_conn_interval;
   1688a:	1a1b      	subs	r3, r3, r0
   1688c:	930a      	str	r3, [sp, #40]	; 0x28
				while (ticks_to_expire > ticks_conn_interval) {
   1688e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16890:	4298      	cmp	r0, r3
   16892:	d3fa      	bcc.n	1688a <mayfly_xtal_stop_calc+0x1b2>
   16894:	f994 101d 	ldrsb.w	r1, [r4, #29]
				if (conn_curr->role && !conn->role &&
   16898:	2900      	cmp	r1, #0
   1689a:	db1c      	blt.n	168d6 <mayfly_xtal_stop_calc+0x1fe>
				} else if (!conn_curr->role && conn->role &&
   1689c:	2900      	cmp	r1, #0
   1689e:	f6ff af6d 	blt.w	1677c <mayfly_xtal_stop_calc+0xa4>
   168a2:	f995 201d 	ldrsb.w	r2, [r5, #29]
   168a6:	2a00      	cmp	r2, #0
   168a8:	f6bf af68 	bge.w	1677c <mayfly_xtal_stop_calc+0xa4>
					     conn_curr->hdr.ticks_slot))) {
   168ac:	68e2      	ldr	r2, [r4, #12]
								625) +
   168ae:	323b      	adds	r2, #59	; 0x3b
				} else if (!conn_curr->role && conn->role &&
   168b0:	4293      	cmp	r3, r2
   168b2:	f4bf af63 	bcs.w	1677c <mayfly_xtal_stop_calc+0xa4>
					status = conn_update_req(conn);
   168b6:	4628      	mov	r0, r5
   168b8:	f7fb f852 	bl	11960 <conn_update_req>
					if ((status == 2) &&
   168bc:	2802      	cmp	r0, #2
   168be:	f47f af5d 	bne.w	1677c <mayfly_xtal_stop_calc+0xa4>
   168c2:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   168c6:	f013 0f02 	tst.w	r3, #2
   168ca:	f43f af57 	beq.w	1677c <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn_curr);
   168ce:	4620      	mov	r0, r4
   168d0:	f7fb f846 	bl	11960 <conn_update_req>
   168d4:	e752      	b.n	1677c <mayfly_xtal_stop_calc+0xa4>
				if (conn_curr->role && !conn->role &&
   168d6:	f995 201d 	ldrsb.w	r2, [r5, #29]
   168da:	2a00      	cmp	r2, #0
   168dc:	dbde      	blt.n	1689c <mayfly_xtal_stop_calc+0x1c4>
				      conn_curr->hdr.ticks_slot))) {
   168de:	68e2      	ldr	r2, [r4, #12]
							 625) +
   168e0:	323b      	adds	r2, #59	; 0x3b
				if (conn_curr->role && !conn->role &&
   168e2:	4293      	cmp	r3, r2
   168e4:	d2da      	bcs.n	1689c <mayfly_xtal_stop_calc+0x1c4>
					status = conn_update_req(conn_curr);
   168e6:	4620      	mov	r0, r4
   168e8:	f7fb f83a 	bl	11960 <conn_update_req>
					if ((status == 2) &&
   168ec:	2802      	cmp	r0, #2
   168ee:	f47f af45 	bne.w	1677c <mayfly_xtal_stop_calc+0xa4>
   168f2:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   168f6:	f013 0f02 	tst.w	r3, #2
   168fa:	f43f af3f 	beq.w	1677c <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn);
   168fe:	4628      	mov	r0, r5
   16900:	f7fb f82e 	bl	11960 <conn_update_req>
   16904:	e73a      	b.n	1677c <mayfly_xtal_stop_calc+0xa4>
				conn = mem_get(_radio.conn_pool,
   16906:	3a07      	subs	r2, #7
   16908:	b292      	uxth	r2, r2
   1690a:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1690e:	4b0a      	ldr	r3, [pc, #40]	; (16938 <mayfly_xtal_stop_calc+0x260>)
   16910:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   16914:	f7f8 fd76 	bl	f404 <mem_get>
   16918:	e72b      	b.n	16772 <mayfly_xtal_stop_calc+0x9a>
				LL_ASSERT(0);
   1691a:	4040      	eors	r0, r0
   1691c:	f380 8811 	msr	BASEPRI, r0
   16920:	f04f 0004 	mov.w	r0, #4
   16924:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   16926:	4808      	ldr	r0, [pc, #32]	; (16948 <mayfly_xtal_stop_calc+0x270>)
   16928:	e723      	b.n	16772 <mayfly_xtal_stop_calc+0x9a>
   1692a:	bf00      	nop
   1692c:	f3af 8000 	nop.w
   16930:	1afd498d 	.word	0x1afd498d
   16934:	00000007 	.word	0x00000007
   16938:	20000ff4 	.word	0x20000ff4
   1693c:	0001170d 	.word	0x0001170d
   16940:	200010c0 	.word	0x200010c0
   16944:	09ce5400 	.word	0x09ce5400
   16948:	20001008 	.word	0x20001008
   1694c:	00011739 	.word	0x00011739

00016950 <preempt_calc>:
{
   16950:	b570      	push	{r4, r5, r6, lr}
   16952:	4605      	mov	r5, r0
   16954:	460e      	mov	r6, r1
   16956:	4614      	mov	r4, r2
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   16958:	f7fa fb4e 	bl	10ff8 <ticker_ticks_now_get>
	u32_t diff =
   1695c:	4621      	mov	r1, r4
   1695e:	f7fa fb4f 	bl	11000 <ticker_ticks_diff_get>
	diff += 3;
   16962:	1cc4      	adds	r4, r0, #3
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   16964:	2c09      	cmp	r4, #9
   16966:	d801      	bhi.n	1696c <preempt_calc+0x1c>
	return 0;
   16968:	2000      	movs	r0, #0
   1696a:	bd70      	pop	{r4, r5, r6, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   1696c:	2100      	movs	r1, #0
   1696e:	4608      	mov	r0, r1
   16970:	f7fb fcbc 	bl	122ec <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   16974:	4632      	mov	r2, r6
   16976:	2100      	movs	r1, #0
   16978:	4628      	mov	r0, r5
   1697a:	f7fe fa7f 	bl	14e7c <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   1697e:	68ab      	ldr	r3, [r5, #8]
   16980:	441c      	add	r4, r3
		if (diff <
   16982:	2c26      	cmp	r4, #38	; 0x26
   16984:	d802      	bhi.n	1698c <preempt_calc+0x3c>
			hdr->ticks_preempt_to_start = diff;
   16986:	60ac      	str	r4, [r5, #8]
		return 1;
   16988:	2001      	movs	r0, #1
   1698a:	bd70      	pop	{r4, r5, r6, pc}
   1698c:	2001      	movs	r0, #1
}
   1698e:	bd70      	pop	{r4, r5, r6, pc}

00016990 <event_adv>:
{
   16990:	b538      	push	{r3, r4, r5, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   16992:	4b3b      	ldr	r3, [pc, #236]	; (16a80 <event_adv+0xf0>)
   16994:	7bdb      	ldrb	r3, [r3, #15]
   16996:	2b00      	cmp	r3, #0
   16998:	d142      	bne.n	16a20 <event_adv+0x90>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   1699a:	4b39      	ldr	r3, [pc, #228]	; (16a80 <event_adv+0xf0>)
   1699c:	7b1b      	ldrb	r3, [r3, #12]
   1699e:	b2db      	uxtb	r3, r3
   169a0:	2b05      	cmp	r3, #5
   169a2:	d143      	bne.n	16a2c <event_adv+0x9c>
   169a4:	4605      	mov	r5, r0
	_radio.role = ROLE_ADV;
   169a6:	4c36      	ldr	r4, [pc, #216]	; (16a80 <event_adv+0xf0>)
   169a8:	2101      	movs	r1, #1
   169aa:	73e1      	strb	r1, [r4, #15]
	_radio.ticker_id_prepare = 0;
   169ac:	2300      	movs	r3, #0
   169ae:	7323      	strb	r3, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   169b0:	2305      	movs	r3, #5
   169b2:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   169b4:	6060      	str	r0, [r4, #4]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   169b6:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   169ba:	f000 0007 	and.w	r0, r0, #7
   169be:	f7fb fd5b 	bl	12478 <adv_scan_configure>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   169c2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   169c6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   169ca:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   169ce:	f363 0243 	bfi	r2, r3, #1, #3
   169d2:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	adv_setup();
   169d6:	f7fc f841 	bl	12a5c <adv_setup>
	if (ctrl_rl_enabled()) {
   169da:	f003 fa43 	bl	19e64 <ctrl_rl_enabled>
   169de:	bb58      	cbnz	r0, 16a38 <event_adv+0xa8>
	if (_radio.advertiser.filter_policy) {
   169e0:	4b27      	ldr	r3, [pc, #156]	; (16a80 <event_adv+0xf0>)
   169e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   169e6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   169ea:	d134      	bne.n	16a56 <event_adv+0xc6>
	remainder_us = radio_tmr_start(1,
   169ec:	4c24      	ldr	r4, [pc, #144]	; (16a80 <event_adv+0xf0>)
   169ee:	68a2      	ldr	r2, [r4, #8]
   169f0:	f105 0109 	add.w	r1, r5, #9
   169f4:	2001      	movs	r0, #1
   169f6:	f7f8 ffeb 	bl	f9d0 <radio_tmr_start>
	radio_tmr_end_capture();
   169fa:	f7f9 f89b 	bl	fb34 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   169fe:	462a      	mov	r2, r5
   16a00:	2105      	movs	r1, #5
   16a02:	f104 0014 	add.w	r0, r4, #20
   16a06:	f7ff ffa3 	bl	16950 <preempt_calc>
   16a0a:	bb68      	cbnz	r0, 16a68 <event_adv+0xd8>
		ticker_status =
   16a0c:	2300      	movs	r3, #0
   16a0e:	4a1d      	ldr	r2, [pc, #116]	; (16a84 <event_adv+0xf4>)
   16a10:	4619      	mov	r1, r3
   16a12:	4618      	mov	r0, r3
   16a14:	f7fa faa4 	bl	10f60 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16a18:	b108      	cbz	r0, 16a1e <event_adv+0x8e>
   16a1a:	2802      	cmp	r0, #2
   16a1c:	d129      	bne.n	16a72 <event_adv+0xe2>
   16a1e:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(_radio.role == ROLE_NONE);
   16a20:	4040      	eors	r0, r0
   16a22:	f380 8811 	msr	BASEPRI, r0
   16a26:	f04f 0004 	mov.w	r0, #4
   16a2a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   16a2c:	4040      	eors	r0, r0
   16a2e:	f380 8811 	msr	BASEPRI, r0
   16a32:	f04f 0004 	mov.w	r0, #4
   16a36:	df02      	svc	2
			ctrl_filter_get(!!(_radio.advertiser.filter_policy));
   16a38:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   16a3c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
		struct ll_filter *filter =
   16a40:	bf14      	ite	ne
   16a42:	2001      	movne	r0, #1
   16a44:	2000      	moveq	r0, #0
   16a46:	f003 f80f 	bl	19a68 <ctrl_filter_get>
		radio_filter_configure(filter->enable_bitmask,
   16a4a:	1c82      	adds	r2, r0, #2
   16a4c:	7841      	ldrb	r1, [r0, #1]
   16a4e:	7800      	ldrb	r0, [r0, #0]
   16a50:	f7f8 ff40 	bl	f8d4 <radio_filter_configure>
   16a54:	e7ca      	b.n	169ec <event_adv+0x5c>
		struct ll_filter *wl = ctrl_filter_get(true);
   16a56:	2001      	movs	r0, #1
   16a58:	f003 f806 	bl	19a68 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   16a5c:	1c82      	adds	r2, r0, #2
   16a5e:	7841      	ldrb	r1, [r0, #1]
   16a60:	7800      	ldrb	r0, [r0, #0]
   16a62:	f7f8 ff37 	bl	f8d4 <radio_filter_configure>
   16a66:	e7c1      	b.n	169ec <event_adv+0x5c>
		_radio.state = STATE_STOP;
   16a68:	2204      	movs	r2, #4
   16a6a:	7422      	strb	r2, [r4, #16]
		radio_disable();
   16a6c:	f7f8 fea2 	bl	f7b4 <radio_disable>
   16a70:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16a72:	4040      	eors	r0, r0
   16a74:	f380 8811 	msr	BASEPRI, r0
   16a78:	f04f 0004 	mov.w	r0, #4
   16a7c:	df02      	svc	2
   16a7e:	bf00      	nop
   16a80:	20000ff4 	.word	0x20000ff4
   16a84:	00011f39 	.word	0x00011f39

00016a88 <event_master>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16a88:	4a4c      	ldr	r2, [pc, #304]	; (16bbc <event_master+0x134>)
   16a8a:	7bd2      	ldrb	r2, [r2, #15]
   16a8c:	2a00      	cmp	r2, #0
   16a8e:	d174      	bne.n	16b7a <event_master+0xf2>
{
   16a90:	b530      	push	{r4, r5, lr}
   16a92:	b085      	sub	sp, #20
	LL_ASSERT(_radio.ticker_id_prepare ==
   16a94:	4a49      	ldr	r2, [pc, #292]	; (16bbc <event_master+0x134>)
   16a96:	7b12      	ldrb	r2, [r2, #12]
   16a98:	b2d2      	uxtb	r2, r2
   16a9a:	8c19      	ldrh	r1, [r3, #32]
   16a9c:	1dcc      	adds	r4, r1, #7
   16a9e:	42a2      	cmp	r2, r4
   16aa0:	d171      	bne.n	16b86 <event_master+0xfe>
   16aa2:	461c      	mov	r4, r3
   16aa4:	4605      	mov	r5, r0
	_radio.role = ROLE_MASTER;
   16aa6:	4b45      	ldr	r3, [pc, #276]	; (16bbc <event_master+0x134>)
   16aa8:	2204      	movs	r2, #4
   16aaa:	73da      	strb	r2, [r3, #15]
	_radio.state = STATE_TX;
   16aac:	2002      	movs	r0, #2
   16aae:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
   16ab0:	2200      	movs	r2, #0
   16ab2:	731a      	strb	r2, [r3, #12]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   16ab4:	3107      	adds	r1, #7
   16ab6:	b2c9      	uxtb	r1, r1
	_radio.ticker_id_event =
   16ab8:	7359      	strb	r1, [r3, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16aba:	605d      	str	r5, [r3, #4]
	_radio.packet_counter = 0;
   16abc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	_radio.crc_expire = 0;
   16ac0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	_radio.conn_curr = conn;
   16ac4:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   16ac8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   16aca:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   16acc:	8522      	strh	r2, [r4, #40]	; 0x28
	packet_tx_enqueue(2);
   16ace:	f7fb fd69 	bl	125a4 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   16ad2:	a903      	add	r1, sp, #12
   16ad4:	4620      	mov	r0, r4
   16ad6:	f7fb fed3 	bl	12880 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   16ada:	9b03      	ldr	r3, [sp, #12]
   16adc:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   16ae0:	781a      	ldrb	r2, [r3, #0]
   16ae2:	f361 02c3 	bfi	r2, r1, #3, #1
   16ae6:	701a      	strb	r2, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
   16ae8:	9a03      	ldr	r2, [sp, #12]
   16aea:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   16aee:	f3c3 0340 	ubfx	r3, r3, #1, #1
   16af2:	7811      	ldrb	r1, [r2, #0]
   16af4:	f363 0182 	bfi	r1, r3, #2, #1
   16af8:	7011      	strb	r1, [r2, #0]
	connection_configure(conn);
   16afa:	4620      	mov	r0, r4
   16afc:	f7fb fce0 	bl	124c0 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   16b00:	2096      	movs	r0, #150	; 0x96
   16b02:	f7f8 ff5f 	bl	f9c4 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   16b06:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16b0a:	f000 0007 	and.w	r0, r0, #7
   16b0e:	f7f8 fea7 	bl	f860 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   16b12:	9903      	ldr	r1, [sp, #12]
   16b14:	4620      	mov	r0, r4
   16b16:	f7fb ff49 	bl	129ac <tx_packet_set>
	if (conn->data_chan_sel) {
   16b1a:	7f63      	ldrb	r3, [r4, #29]
   16b1c:	f013 0f40 	tst.w	r3, #64	; 0x40
   16b20:	d037      	beq.n	16b92 <event_master+0x10a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   16b22:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   16b24:	3801      	subs	r0, #1
   16b26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16b2a:	f104 0217 	add.w	r2, r4, #23
   16b2e:	8be1      	ldrh	r1, [r4, #30]
   16b30:	b280      	uxth	r0, r0
   16b32:	f7fa fe8b 	bl	1184c <chan_sel_2>
	chan_set(data_chan_use);
   16b36:	f7fb ff65 	bl	12a04 <chan_set>
		remainder_us = radio_tmr_start(1,
   16b3a:	4b20      	ldr	r3, [pc, #128]	; (16bbc <event_master+0x134>)
   16b3c:	689a      	ldr	r2, [r3, #8]
   16b3e:	f105 0109 	add.w	r1, r5, #9
   16b42:	2001      	movs	r0, #1
   16b44:	f7f8 ff44 	bl	f9d0 <radio_tmr_start>
		radio_tmr_end_capture();
   16b48:	f7f8 fff4 	bl	fb34 <radio_tmr_end_capture>
				      conn->handle), ticks_at_expire)) {
   16b4c:	8c21      	ldrh	r1, [r4, #32]
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   16b4e:	3107      	adds	r1, #7
   16b50:	462a      	mov	r2, r5
   16b52:	b2c9      	uxtb	r1, r1
   16b54:	4620      	mov	r0, r4
   16b56:	f7ff fefb 	bl	16950 <preempt_calc>
	if (0 !=
   16b5a:	bb38      	cbnz	r0, 16bac <event_master+0x124>
		ticker_status =
   16b5c:	2300      	movs	r3, #0
   16b5e:	4a18      	ldr	r2, [pc, #96]	; (16bc0 <event_master+0x138>)
   16b60:	4619      	mov	r1, r3
   16b62:	4618      	mov	r0, r3
   16b64:	f7fa f9fc 	bl	10f60 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16b68:	b328      	cbz	r0, 16bb6 <event_master+0x12e>
   16b6a:	2802      	cmp	r0, #2
   16b6c:	d023      	beq.n	16bb6 <event_master+0x12e>
   16b6e:	4040      	eors	r0, r0
   16b70:	f380 8811 	msr	BASEPRI, r0
   16b74:	f04f 0004 	mov.w	r0, #4
   16b78:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16b7a:	4040      	eors	r0, r0
   16b7c:	f380 8811 	msr	BASEPRI, r0
   16b80:	f04f 0004 	mov.w	r0, #4
   16b84:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   16b86:	4040      	eors	r0, r0
   16b88:	f380 8811 	msr	BASEPRI, r0
   16b8c:	f04f 0004 	mov.w	r0, #4
   16b90:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16b92:	7fa1      	ldrb	r1, [r4, #30]
   16b94:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   16b96:	7f63      	ldrb	r3, [r4, #29]
   16b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16b9c:	9300      	str	r3, [sp, #0]
   16b9e:	f104 0317 	add.w	r3, r4, #23
   16ba2:	f104 001f 	add.w	r0, r4, #31
   16ba6:	f7fa fdf3 	bl	11790 <chan_sel_1>
   16baa:	e7c4      	b.n	16b36 <event_master+0xae>
		_radio.state = STATE_STOP;
   16bac:	2204      	movs	r2, #4
   16bae:	4b03      	ldr	r3, [pc, #12]	; (16bbc <event_master+0x134>)
   16bb0:	741a      	strb	r2, [r3, #16]
		radio_disable();
   16bb2:	f7f8 fdff 	bl	f7b4 <radio_disable>
}
   16bb6:	b005      	add	sp, #20
   16bb8:	bd30      	pop	{r4, r5, pc}
   16bba:	bf00      	nop
   16bbc:	20000ff4 	.word	0x20000ff4
   16bc0:	00011f39 	.word	0x00011f39

00016bc4 <event_slave>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16bc4:	4a64      	ldr	r2, [pc, #400]	; (16d58 <event_slave+0x194>)
   16bc6:	7bd2      	ldrb	r2, [r2, #15]
   16bc8:	2a00      	cmp	r2, #0
   16bca:	f040 809d 	bne.w	16d08 <event_slave+0x144>
{
   16bce:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bd0:	b083      	sub	sp, #12
	LL_ASSERT(_radio.ticker_id_prepare ==
   16bd2:	4a61      	ldr	r2, [pc, #388]	; (16d58 <event_slave+0x194>)
   16bd4:	7b11      	ldrb	r1, [r2, #12]
   16bd6:	b2c9      	uxtb	r1, r1
   16bd8:	8c1a      	ldrh	r2, [r3, #32]
   16bda:	1dd4      	adds	r4, r2, #7
   16bdc:	42a1      	cmp	r1, r4
   16bde:	f040 8099 	bne.w	16d14 <event_slave+0x150>
   16be2:	461c      	mov	r4, r3
   16be4:	4606      	mov	r6, r0
	_radio.role = ROLE_SLAVE;
   16be6:	4d5c      	ldr	r5, [pc, #368]	; (16d58 <event_slave+0x194>)
   16be8:	2303      	movs	r3, #3
   16bea:	73eb      	strb	r3, [r5, #15]
	_radio.state = STATE_RX;
   16bec:	2301      	movs	r3, #1
   16bee:	742b      	strb	r3, [r5, #16]
	_radio.ticker_id_prepare = 0;
   16bf0:	2700      	movs	r7, #0
   16bf2:	732f      	strb	r7, [r5, #12]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   16bf4:	3207      	adds	r2, #7
   16bf6:	b2d2      	uxtb	r2, r2
	_radio.ticker_id_event =
   16bf8:	736a      	strb	r2, [r5, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16bfa:	6068      	str	r0, [r5, #4]
	_radio.packet_counter = 0;
   16bfc:	f885 7114 	strb.w	r7, [r5, #276]	; 0x114
	_radio.crc_expire = 0;
   16c00:	f885 7115 	strb.w	r7, [r5, #277]	; 0x115
	_radio.conn_curr = conn;
   16c04:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   16c08:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   16c0a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   16c0c:	8527      	strh	r7, [r4, #40]	; 0x28
	connection_configure(conn);
   16c0e:	4620      	mov	r0, r4
   16c10:	f7fb fc56 	bl	124c0 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   16c14:	2096      	movs	r0, #150	; 0x96
   16c16:	f7f8 fed5 	bl	f9c4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   16c1a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16c1e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   16c22:	09d3      	lsrs	r3, r2, #7
   16c24:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   16c28:	4639      	mov	r1, r7
   16c2a:	f000 0007 	and.w	r0, r0, #7
   16c2e:	f7f8 fe1f 	bl	f870 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   16c32:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   16c36:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   16c3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (struct pdu_data *)
   16c3e:	3108      	adds	r1, #8
   16c40:	4620      	mov	r0, r4
   16c42:	f7fb fc51 	bl	124e8 <rx_packet_set>
	if (conn->data_chan_sel) {
   16c46:	7f63      	ldrb	r3, [r4, #29]
   16c48:	f013 0f40 	tst.w	r3, #64	; 0x40
   16c4c:	d068      	beq.n	16d20 <event_slave+0x15c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   16c4e:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   16c50:	3801      	subs	r0, #1
   16c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16c56:	f104 0217 	add.w	r2, r4, #23
   16c5a:	8be1      	ldrh	r1, [r4, #30]
   16c5c:	b280      	uxth	r0, r0
   16c5e:	f7fa fdf5 	bl	1184c <chan_sel_2>
	chan_set(data_chan_use);
   16c62:	f7fb fecf 	bl	12a04 <chan_set>
		conn->slave.window_widening_prepare_us;
   16c66:	6de3      	ldr	r3, [r4, #92]	; 0x5c
	conn->slave.window_widening_event_us +=
   16c68:	6e22      	ldr	r2, [r4, #96]	; 0x60
   16c6a:	4413      	add	r3, r2
   16c6c:	6623      	str	r3, [r4, #96]	; 0x60
	conn->slave.window_widening_prepare_us = 0;
   16c6e:	2200      	movs	r2, #0
   16c70:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   16c72:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (conn->slave.window_widening_event_us >
   16c74:	4293      	cmp	r3, r2
   16c76:	d900      	bls.n	16c7a <event_slave+0xb6>
		conn->slave.window_widening_event_us =
   16c78:	6622      	str	r2, [r4, #96]	; 0x60
		conn->slave.window_size_prepare_us;
   16c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_event_us +=
   16c7c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   16c7e:	4413      	add	r3, r2
   16c80:	66a3      	str	r3, [r4, #104]	; 0x68
	conn->slave.window_size_prepare_us = 0;
   16c82:	2700      	movs	r7, #0
   16c84:	6667      	str	r7, [r4, #100]	; 0x64
	remainder_us =
   16c86:	4b34      	ldr	r3, [pc, #208]	; (16d58 <event_slave+0x194>)
   16c88:	689a      	ldr	r2, [r3, #8]
   16c8a:	f106 0109 	add.w	r1, r6, #9
   16c8e:	4638      	mov	r0, r7
   16c90:	f7f8 fe9e 	bl	f9d0 <radio_tmr_start>
   16c94:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   16c96:	f7f8 ff19 	bl	facc <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   16c9a:	4638      	mov	r0, r7
   16c9c:	f7f8 ff38 	bl	fb10 <radio_tmr_aa_save>
	       (conn->slave.window_widening_event_us << 1) +
   16ca0:	6e20      	ldr	r0, [r4, #96]	; 0x60
	       (RADIO_TICKER_JITTER_US << 2) +
   16ca2:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	       conn->slave.window_size_event_us;
   16ca6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   16ca8:	4405      	add	r5, r0
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   16caa:	3550      	adds	r5, #80	; 0x50
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
   16cac:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16cb0:	f000 0007 	and.w	r0, r0, #7
   16cb4:	f7f8 fd6a 	bl	f78c <radio_rx_ready_delay_get>
   16cb8:	4405      	add	r5, r0
	hcto += addr_us_get(conn->phy_rx);
   16cba:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16cbe:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   16cc2:	2802      	cmp	r0, #2
   16cc4:	d03c      	beq.n	16d40 <event_slave+0x17c>
   16cc6:	2804      	cmp	r0, #4
   16cc8:	d037      	beq.n	16d3a <event_slave+0x176>
		return 40;
   16cca:	2328      	movs	r3, #40	; 0x28
	hcto += addr_us_get(conn->phy_rx);
   16ccc:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   16cce:	2101      	movs	r1, #1
   16cd0:	f7f8 fd5e 	bl	f790 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   16cd4:	4428      	add	r0, r5
   16cd6:	f7f8 fed7 	bl	fa88 <radio_tmr_hcto_configure>
				      conn->handle), ticks_at_expire) != 0) {
   16cda:	8c21      	ldrh	r1, [r4, #32]
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   16cdc:	3107      	adds	r1, #7
   16cde:	4632      	mov	r2, r6
   16ce0:	b2c9      	uxtb	r1, r1
   16ce2:	4620      	mov	r0, r4
   16ce4:	f7ff fe34 	bl	16950 <preempt_calc>
   16ce8:	bb60      	cbnz	r0, 16d44 <event_slave+0x180>
		ticker_status =
   16cea:	2300      	movs	r3, #0
   16cec:	4a1b      	ldr	r2, [pc, #108]	; (16d5c <event_slave+0x198>)
   16cee:	4619      	mov	r1, r3
   16cf0:	4618      	mov	r0, r3
   16cf2:	f7fa f935 	bl	10f60 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16cf6:	b350      	cbz	r0, 16d4e <event_slave+0x18a>
   16cf8:	2802      	cmp	r0, #2
   16cfa:	d028      	beq.n	16d4e <event_slave+0x18a>
   16cfc:	4040      	eors	r0, r0
   16cfe:	f380 8811 	msr	BASEPRI, r0
   16d02:	f04f 0004 	mov.w	r0, #4
   16d06:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16d08:	4040      	eors	r0, r0
   16d0a:	f380 8811 	msr	BASEPRI, r0
   16d0e:	f04f 0004 	mov.w	r0, #4
   16d12:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   16d14:	4040      	eors	r0, r0
   16d16:	f380 8811 	msr	BASEPRI, r0
   16d1a:	f04f 0004 	mov.w	r0, #4
   16d1e:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16d20:	7fa1      	ldrb	r1, [r4, #30]
   16d22:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   16d24:	7f63      	ldrb	r3, [r4, #29]
   16d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16d2a:	9300      	str	r3, [sp, #0]
   16d2c:	f104 0317 	add.w	r3, r4, #23
   16d30:	f104 001f 	add.w	r0, r4, #31
   16d34:	f7fa fd2c 	bl	11790 <chan_sel_1>
   16d38:	e793      	b.n	16c62 <event_slave+0x9e>
		return 376;
   16d3a:	f44f 73bc 	mov.w	r3, #376	; 0x178
   16d3e:	e7c5      	b.n	16ccc <event_slave+0x108>
		return 24;
   16d40:	2318      	movs	r3, #24
   16d42:	e7c3      	b.n	16ccc <event_slave+0x108>
		_radio.state = STATE_STOP;
   16d44:	2204      	movs	r2, #4
   16d46:	4b04      	ldr	r3, [pc, #16]	; (16d58 <event_slave+0x194>)
   16d48:	741a      	strb	r2, [r3, #16]
		radio_disable();
   16d4a:	f7f8 fd33 	bl	f7b4 <radio_disable>
	packet_tx_enqueue(2);
   16d4e:	2002      	movs	r0, #2
   16d50:	f7fb fc28 	bl	125a4 <packet_tx_enqueue>
}
   16d54:	b003      	add	sp, #12
   16d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d58:	20000ff4 	.word	0x20000ff4
   16d5c:	00011f39 	.word	0x00011f39

00016d60 <event_scan>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16d60:	4b67      	ldr	r3, [pc, #412]	; (16f00 <event_scan+0x1a0>)
   16d62:	7bdb      	ldrb	r3, [r3, #15]
   16d64:	2b00      	cmp	r3, #0
   16d66:	f040 808b 	bne.w	16e80 <event_scan+0x120>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   16d6a:	4b65      	ldr	r3, [pc, #404]	; (16f00 <event_scan+0x1a0>)
   16d6c:	7b1b      	ldrb	r3, [r3, #12]
   16d6e:	b2db      	uxtb	r3, r3
   16d70:	2b06      	cmp	r3, #6
   16d72:	f040 808b 	bne.w	16e8c <event_scan+0x12c>
{
   16d76:	b570      	push	{r4, r5, r6, lr}
   16d78:	b08c      	sub	sp, #48	; 0x30
   16d7a:	4605      	mov	r5, r0
	_radio.role = ROLE_SCAN;
   16d7c:	4c60      	ldr	r4, [pc, #384]	; (16f00 <event_scan+0x1a0>)
   16d7e:	2302      	movs	r3, #2
   16d80:	73e3      	strb	r3, [r4, #15]
	_radio.state = STATE_RX;
   16d82:	2101      	movs	r1, #1
   16d84:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_prepare = 0;
   16d86:	2200      	movs	r2, #0
   16d88:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   16d8a:	2306      	movs	r3, #6
   16d8c:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16d8e:	6060      	str	r0, [r4, #4]
	_radio.scanner.state = 0;
   16d90:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16d94:	f362 0341 	bfi	r3, r2, #1, #1
   16d98:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   16d9c:	f894 00dd 	ldrb.w	r0, [r4, #221]	; 0xdd
   16da0:	f000 0007 	and.w	r0, r0, #7
   16da4:	f7fb fb68 	bl	12478 <adv_scan_configure>
	chan_set(37 + _radio.scanner.chan++);
   16da8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16dac:	f3c3 0081 	ubfx	r0, r3, #2, #2
   16db0:	1c42      	adds	r2, r0, #1
   16db2:	f362 0383 	bfi	r3, r2, #2, #2
   16db6:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   16dba:	3025      	adds	r0, #37	; 0x25
   16dbc:	f7fb fe22 	bl	12a04 <chan_set>
	if (_radio.scanner.chan == 3) {
   16dc0:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16dc4:	f003 030c 	and.w	r3, r3, #12
   16dc8:	2b0c      	cmp	r3, #12
   16dca:	d065      	beq.n	16e98 <event_scan+0x138>
	radio_tmr_tifs_set(RADIO_TIFS);
   16dcc:	2096      	movs	r0, #150	; 0x96
   16dce:	f7f8 fdf9 	bl	f9c4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   16dd2:	2300      	movs	r3, #0
   16dd4:	461a      	mov	r2, r3
   16dd6:	4619      	mov	r1, r3
   16dd8:	4618      	mov	r0, r3
   16dda:	f7f8 fd49 	bl	f870 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   16dde:	4b48      	ldr	r3, [pc, #288]	; (16f00 <event_scan+0x1a0>)
   16de0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16de4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16de8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   16dec:	3008      	adds	r0, #8
   16dee:	f7f8 fcbd 	bl	f76c <radio_pkt_rx_set>
	radio_rssi_measure();
   16df2:	f7f8 fd4d 	bl	f890 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
   16df6:	f003 f835 	bl	19e64 <ctrl_rl_enabled>
   16dfa:	2800      	cmp	r0, #0
   16dfc:	d153      	bne.n	16ea6 <event_scan+0x146>
	if (_radio.scanner.filter_policy) {
   16dfe:	4b40      	ldr	r3, [pc, #256]	; (16f00 <event_scan+0x1a0>)
   16e00:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   16e04:	f013 0f30 	tst.w	r3, #48	; 0x30
   16e08:	d165      	bne.n	16ed6 <event_scan+0x176>
	remainder_us = radio_tmr_start(0,
   16e0a:	4c3d      	ldr	r4, [pc, #244]	; (16f00 <event_scan+0x1a0>)
   16e0c:	68a2      	ldr	r2, [r4, #8]
   16e0e:	f105 0109 	add.w	r1, r5, #9
   16e12:	2000      	movs	r0, #0
   16e14:	f7f8 fddc 	bl	f9d0 <radio_tmr_start>
	radio_tmr_end_capture();
   16e18:	f7f8 fe8c 	bl	fb34 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   16e1c:	462a      	mov	r2, r5
   16e1e:	2106      	movs	r1, #6
   16e20:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   16e24:	f7ff fd94 	bl	16950 <preempt_calc>
   16e28:	2800      	cmp	r0, #0
   16e2a:	d15d      	bne.n	16ee8 <event_scan+0x188>
				     _radio.scanner.ticks_window +
   16e2c:	4b34      	ldr	r3, [pc, #208]	; (16f00 <event_scan+0x1a0>)
   16e2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16e32:	3309      	adds	r3, #9
		ticker_status =
   16e34:	f641 0287 	movw	r2, #6279	; 0x1887
   16e38:	9208      	str	r2, [sp, #32]
   16e3a:	4a32      	ldr	r2, [pc, #200]	; (16f04 <event_scan+0x1a4>)
   16e3c:	9207      	str	r2, [sp, #28]
   16e3e:	2204      	movs	r2, #4
   16e40:	9206      	str	r2, [sp, #24]
   16e42:	4931      	ldr	r1, [pc, #196]	; (16f08 <event_scan+0x1a8>)
   16e44:	9105      	str	r1, [sp, #20]
   16e46:	2000      	movs	r0, #0
   16e48:	9004      	str	r0, [sp, #16]
   16e4a:	9003      	str	r0, [sp, #12]
   16e4c:	9002      	str	r0, [sp, #8]
   16e4e:	9001      	str	r0, [sp, #4]
   16e50:	9300      	str	r3, [sp, #0]
   16e52:	462b      	mov	r3, r5
   16e54:	4601      	mov	r1, r0
   16e56:	f7f9 ff67 	bl	10d28 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16e5a:	b108      	cbz	r0, 16e60 <event_scan+0x100>
   16e5c:	2802      	cmp	r0, #2
   16e5e:	d149      	bne.n	16ef4 <event_scan+0x194>
			ticker_status =
   16e60:	2300      	movs	r3, #0
   16e62:	4a2a      	ldr	r2, [pc, #168]	; (16f0c <event_scan+0x1ac>)
   16e64:	4619      	mov	r1, r3
   16e66:	4618      	mov	r0, r3
   16e68:	f7fa f87a 	bl	10f60 <ticker_job_idle_get>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16e6c:	2800      	cmp	r0, #0
   16e6e:	d03f      	beq.n	16ef0 <event_scan+0x190>
   16e70:	2802      	cmp	r0, #2
   16e72:	d03d      	beq.n	16ef0 <event_scan+0x190>
   16e74:	4040      	eors	r0, r0
   16e76:	f380 8811 	msr	BASEPRI, r0
   16e7a:	f04f 0004 	mov.w	r0, #4
   16e7e:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16e80:	4040      	eors	r0, r0
   16e82:	f380 8811 	msr	BASEPRI, r0
   16e86:	f04f 0004 	mov.w	r0, #4
   16e8a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   16e8c:	4040      	eors	r0, r0
   16e8e:	f380 8811 	msr	BASEPRI, r0
   16e92:	f04f 0004 	mov.w	r0, #4
   16e96:	df02      	svc	2
		_radio.scanner.chan = 0;
   16e98:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   16e9c:	f36f 0283 	bfc	r2, #2, #2
   16ea0:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
   16ea4:	e792      	b.n	16dcc <event_scan+0x6c>
			ctrl_filter_get(!!(_radio.scanner.filter_policy & 0x1));
   16ea6:	4b16      	ldr	r3, [pc, #88]	; (16f00 <event_scan+0x1a0>)
   16ea8:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		struct ll_filter *filter =
   16eac:	f3c0 1000 	ubfx	r0, r0, #4, #1
   16eb0:	f002 fdda 	bl	19a68 <ctrl_filter_get>
   16eb4:	4604      	mov	r4, r0
		u8_t count, *irks = ctrl_irks_get(&count);
   16eb6:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   16eba:	f002 fd4f 	bl	1995c <ctrl_irks_get>
   16ebe:	4606      	mov	r6, r0
		radio_filter_configure(filter->enable_bitmask,
   16ec0:	1ca2      	adds	r2, r4, #2
   16ec2:	7861      	ldrb	r1, [r4, #1]
   16ec4:	7820      	ldrb	r0, [r4, #0]
   16ec6:	f7f8 fd05 	bl	f8d4 <radio_filter_configure>
		radio_ar_configure(count, irks);
   16eca:	4631      	mov	r1, r6
   16ecc:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   16ed0:	f7f8 fedc 	bl	fc8c <radio_ar_configure>
   16ed4:	e799      	b.n	16e0a <event_scan+0xaa>
		struct ll_filter *wl = ctrl_filter_get(true);
   16ed6:	2001      	movs	r0, #1
   16ed8:	f002 fdc6 	bl	19a68 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   16edc:	1c82      	adds	r2, r0, #2
   16ede:	7841      	ldrb	r1, [r0, #1]
   16ee0:	7800      	ldrb	r0, [r0, #0]
   16ee2:	f7f8 fcf7 	bl	f8d4 <radio_filter_configure>
   16ee6:	e790      	b.n	16e0a <event_scan+0xaa>
		_radio.state = STATE_STOP;
   16ee8:	2204      	movs	r2, #4
   16eea:	7422      	strb	r2, [r4, #16]
		radio_disable();
   16eec:	f7f8 fc62 	bl	f7b4 <radio_disable>
}
   16ef0:	b00c      	add	sp, #48	; 0x30
   16ef2:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16ef4:	4040      	eors	r0, r0
   16ef6:	f380 8811 	msr	BASEPRI, r0
   16efa:	f04f 0004 	mov.w	r0, #4
   16efe:	df02      	svc	2
   16f00:	20000ff4 	.word	0x20000ff4
   16f04:	00011a7d 	.word	0x00011a7d
   16f08:	00012261 	.word	0x00012261
   16f0c:	00011f39 	.word	0x00011f39

00016f10 <access_addr_get>:
{
   16f10:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f12:	b083      	sub	sp, #12
	retry = 3;
   16f14:	2403      	movs	r4, #3
   16f16:	e059      	b.n	16fcc <access_addr_get+0xbc>
	LL_ASSERT(retry);
   16f18:	4040      	eors	r0, r0
   16f1a:	f380 8811 	msr	BASEPRI, r0
   16f1e:	f04f 0004 	mov.w	r0, #4
   16f22:	df02      	svc	2
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   16f24:	9900      	ldr	r1, [sp, #0]
   16f26:	0fc9      	lsrs	r1, r1, #31
	transitions = 0;
   16f28:	4607      	mov	r7, r0
	bit_idx = 31;
   16f2a:	221f      	movs	r2, #31
	consecutive_cnt = 1;
   16f2c:	2501      	movs	r5, #1
	while (bit_idx--) {
   16f2e:	e010      	b.n	16f52 <access_addr_get+0x42>
			consecutive_cnt++;
   16f30:	3501      	adds	r5, #1
   16f32:	b2ed      	uxtb	r5, r5
   16f34:	e01c      	b.n	16f70 <access_addr_get+0x60>
		    ((bit_idx < 28) && (transitions < 1)) ||
   16f36:	b9ff      	cbnz	r7, 16f78 <access_addr_get+0x68>
			if (consecutive_bit) {
   16f38:	b319      	cbz	r1, 16f82 <access_addr_get+0x72>
				access_addr &= ~BIT(bit_idx);
   16f3a:	2201      	movs	r2, #1
   16f3c:	409a      	lsls	r2, r3
   16f3e:	ea26 0602 	bic.w	r6, r6, r2
   16f42:	9600      	str	r6, [sp, #0]
				consecutive_bit = 0;
   16f44:	4601      	mov	r1, r0
			transitions++;
   16f46:	3701      	adds	r7, #1
   16f48:	b2ff      	uxtb	r7, r7
			consecutive_cnt = 1;
   16f4a:	2501      	movs	r5, #1
	while (bit_idx--) {
   16f4c:	461a      	mov	r2, r3
		if (transitions > 24) {
   16f4e:	2f18      	cmp	r7, #24
   16f50:	d81d      	bhi.n	16f8e <access_addr_get+0x7e>
	while (bit_idx--) {
   16f52:	1e53      	subs	r3, r2, #1
   16f54:	b2db      	uxtb	r3, r3
   16f56:	b32a      	cbz	r2, 16fa4 <access_addr_get+0x94>
		bit = (access_addr >> bit_idx) & 0x01;
   16f58:	9e00      	ldr	r6, [sp, #0]
   16f5a:	469e      	mov	lr, r3
   16f5c:	fa26 f203 	lsr.w	r2, r6, r3
   16f60:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   16f64:	4291      	cmp	r1, r2
   16f66:	d0e3      	beq.n	16f30 <access_addr_get+0x20>
			transitions++;
   16f68:	3701      	adds	r7, #1
   16f6a:	b2ff      	uxtb	r7, r7
			consecutive_bit = bit;
   16f6c:	4611      	mov	r1, r2
			consecutive_cnt = 1;
   16f6e:	2501      	movs	r5, #1
		if ((consecutive_cnt > 6) ||
   16f70:	2d06      	cmp	r5, #6
   16f72:	d8e1      	bhi.n	16f38 <access_addr_get+0x28>
   16f74:	2b1b      	cmp	r3, #27
   16f76:	d9de      	bls.n	16f36 <access_addr_get+0x26>
		    ((bit_idx < 28) && (transitions < 1)) ||
   16f78:	2b1a      	cmp	r3, #26
   16f7a:	d8e7      	bhi.n	16f4c <access_addr_get+0x3c>
		    ((bit_idx < 27) && (transitions < 2))) {
   16f7c:	2f01      	cmp	r7, #1
   16f7e:	d8e5      	bhi.n	16f4c <access_addr_get+0x3c>
   16f80:	e7da      	b.n	16f38 <access_addr_get+0x28>
				access_addr |= BIT(bit_idx);
   16f82:	2101      	movs	r1, #1
   16f84:	fa01 f203 	lsl.w	r2, r1, r3
   16f88:	4316      	orrs	r6, r2
   16f8a:	9600      	str	r6, [sp, #0]
   16f8c:	e7db      	b.n	16f46 <access_addr_get+0x36>
			if (consecutive_bit) {
   16f8e:	2900      	cmp	r1, #0
   16f90:	d02d      	beq.n	16fee <access_addr_get+0xde>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   16f92:	f10e 0e01 	add.w	lr, lr, #1
   16f96:	2301      	movs	r3, #1
   16f98:	fa03 f30e 	lsl.w	r3, r3, lr
   16f9c:	425b      	negs	r3, r3
   16f9e:	9a00      	ldr	r2, [sp, #0]
   16fa0:	4013      	ands	r3, r2
   16fa2:	9300      	str	r3, [sp, #0]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   16fa4:	4b19      	ldr	r3, [pc, #100]	; (1700c <access_addr_get+0xfc>)
   16fa6:	9a00      	ldr	r2, [sp, #0]
   16fa8:	4053      	eors	r3, r2
   16faa:	a802      	add	r0, sp, #8
   16fac:	f840 3d04 	str.w	r3, [r0, #-4]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   16fb0:	2104      	movs	r1, #4
   16fb2:	f7f8 fa6e 	bl	f492 <util_ones_count_get>
   16fb6:	2801      	cmp	r0, #1
   16fb8:	d908      	bls.n	16fcc <access_addr_get+0xbc>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   16fba:	9800      	ldr	r0, [sp, #0]
   16fbc:	b283      	uxth	r3, r0
   16fbe:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   16fc2:	d120      	bne.n	17006 <access_addr_get+0xf6>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   16fc4:	b2c3      	uxtb	r3, r0
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   16fc6:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   16fca:	d11c      	bne.n	17006 <access_addr_get+0xf6>
	LL_ASSERT(retry);
   16fcc:	2c00      	cmp	r4, #0
   16fce:	d0a3      	beq.n	16f18 <access_addr_get+0x8>
	retry--;
   16fd0:	3c01      	subs	r4, #1
   16fd2:	b2e4      	uxtb	r4, r4
	len = sizeof(u32_t);
   16fd4:	2004      	movs	r0, #4
	while (len) {
   16fd6:	2800      	cmp	r0, #0
   16fd8:	d0a4      	beq.n	16f24 <access_addr_get+0x14>
		len = rand_get(len, (u8_t *)&access_addr);
   16fda:	4669      	mov	r1, sp
   16fdc:	f7f9 fc1c 	bl	10818 <rand_get>
   16fe0:	b2c0      	uxtb	r0, r0
		if (len) {
   16fe2:	2800      	cmp	r0, #0
   16fe4:	d0f7      	beq.n	16fd6 <access_addr_get+0xc6>
   16fe6:	bf20      	wfe
  __ASM volatile ("sev");
   16fe8:	bf40      	sev
  __ASM volatile ("wfe");
   16fea:	bf20      	wfe
   16fec:	e7f3      	b.n	16fd6 <access_addr_get+0xc6>
				access_addr |= (BIT(bit_idx + 1) - 1);
   16fee:	f10e 0e01 	add.w	lr, lr, #1
   16ff2:	2301      	movs	r3, #1
   16ff4:	fa03 fe0e 	lsl.w	lr, r3, lr
   16ff8:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   16ffc:	9b00      	ldr	r3, [sp, #0]
   16ffe:	ea43 030e 	orr.w	r3, r3, lr
   17002:	9300      	str	r3, [sp, #0]
   17004:	e7ce      	b.n	16fa4 <access_addr_get+0x94>
}
   17006:	b003      	add	sp, #12
   17008:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1700a:	bf00      	nop
   1700c:	8e89bed6 	.word	0x8e89bed6

00017010 <isr_rx_scan>:
{
   17010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17014:	b08f      	sub	sp, #60	; 0x3c
   17016:	4617      	mov	r7, r2
   17018:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
   1701c:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   17020:	4b99      	ldr	r3, [pc, #612]	; (17288 <isr_rx_scan+0x278>)
   17022:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17026:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
   1702a:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
	pdu_adv_rx = (struct pdu_adv *)
   1702e:	f104 0808 	add.w	r8, r4, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   17032:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   17036:	b15b      	cbz	r3, 17050 <isr_rx_scan+0x40>
   17038:	4b93      	ldr	r3, [pc, #588]	; (17288 <isr_rx_scan+0x278>)
   1703a:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   1703e:	b34b      	cbz	r3, 17094 <isr_rx_scan+0x84>
				      (_radio.fc_req == _radio.fc_ack)) &&
   17040:	4a91      	ldr	r2, [pc, #580]	; (17288 <isr_rx_scan+0x278>)
   17042:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   17046:	b2db      	uxtb	r3, r3
   17048:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   1704c:	4293      	cmp	r3, r2
   1704e:	d021      	beq.n	17094 <isr_rx_scan+0x84>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   17050:	7a23      	ldrb	r3, [r4, #8]
   17052:	f013 030f 	ands.w	r3, r3, #15
   17056:	f000 82e9 	beq.w	1762c <isr_rx_scan+0x61c>
   1705a:	2b06      	cmp	r3, #6
   1705c:	f000 82e6 	beq.w	1762c <isr_rx_scan+0x61c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   17060:	2b00      	cmp	r3, #0
   17062:	f000 83d9 	beq.w	17818 <isr_rx_scan+0x808>
   17066:	2b01      	cmp	r3, #1
   17068:	f000 8355 	beq.w	17716 <isr_rx_scan+0x706>
	bool dir_report = false;
   1706c:	f04f 0900 	mov.w	r9, #0
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   17070:	7a23      	ldrb	r3, [r4, #8]
   17072:	f003 030f 	and.w	r3, r3, #15
					&dir_report))) ||
   17076:	2b02      	cmp	r3, #2
   17078:	f000 83d0 	beq.w	1781c <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1707c:	2b06      	cmp	r3, #6
   1707e:	f000 83cd 	beq.w	1781c <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   17082:	2b07      	cmp	r3, #7
   17084:	f000 839f 	beq.w	177c6 <isr_rx_scan+0x7b6>
		   (_radio.scanner.phy)) ||
   17088:	2b04      	cmp	r3, #4
   1708a:	f000 83a3 	beq.w	177d4 <isr_rx_scan+0x7c4>
		return 1;
   1708e:	f04f 0a01 	mov.w	sl, #1
   17092:	e3cb      	b.n	1782c <isr_rx_scan+0x81c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   17094:	4b7c      	ldr	r3, [pc, #496]	; (17288 <isr_rx_scan+0x278>)
   17096:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1709a:	f013 0f10 	tst.w	r3, #16
   1709e:	d072      	beq.n	17186 <isr_rx_scan+0x176>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   170a0:	7a23      	ldrb	r3, [r4, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   170a2:	f013 030f 	ands.w	r3, r3, #15
   170a6:	f000 80da 	beq.w	1725e <isr_rx_scan+0x24e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   170aa:	2b01      	cmp	r3, #1
   170ac:	f000 808f 	beq.w	171ce <isr_rx_scan+0x1be>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   170b0:	2300      	movs	r3, #0
				      (_radio.fc_req == _radio.fc_ack)) &&
   170b2:	2b00      	cmp	r3, #0
   170b4:	d0cc      	beq.n	17050 <isr_rx_scan+0x40>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   170b6:	f7f8 fd4f 	bl	fb58 <radio_tmr_end_get>
   170ba:	f200 2916 	addw	r9, r0, #534	; 0x216
	     (TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   170be:	4b72      	ldr	r3, [pc, #456]	; (17288 <isr_rx_scan+0x278>)
   170c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   170c4:	4871      	ldr	r0, [pc, #452]	; (1728c <isr_rx_scan+0x27c>)
   170c6:	fba3 0100 	umull	r0, r1, r3, r0
   170ca:	2207      	movs	r2, #7
   170cc:	fb02 1103 	mla	r1, r2, r3, r1
   170d0:	a36b      	add	r3, pc, #428	; (adr r3, 17280 <isr_rx_scan+0x270>)
   170d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   170d6:	f7ea f811 	bl	10fc <__aeabi_uldivmod>
   170da:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   170de:	4581      	cmp	r9, r0
   170e0:	d2b6      	bcs.n	17050 <isr_rx_scan+0x40>
	if (_radio.packet_rx_acquire >=
   170e2:	4b69      	ldr	r3, [pc, #420]	; (17288 <isr_rx_scan+0x278>)
   170e4:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   170e8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   170ec:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   170ee:	429a      	cmp	r2, r3
   170f0:	f0c0 80b7 	bcc.w	17262 <isr_rx_scan+0x252>
			_radio.packet_rx_last);
   170f4:	4b64      	ldr	r3, [pc, #400]	; (17288 <isr_rx_scan+0x278>)
   170f6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   170fa:	1ad3      	subs	r3, r2, r3
   170fc:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   170fe:	2b03      	cmp	r3, #3
   17100:	f240 80b9 	bls.w	17276 <isr_rx_scan+0x266>
	return _radio.packet_rx[_radio.packet_rx_last];
   17104:	4b60      	ldr	r3, [pc, #384]	; (17288 <isr_rx_scan+0x278>)
   17106:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1710a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1710e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   17112:	f1b9 0f00 	cmp.w	r9, #0
   17116:	f000 839a 	beq.w	1784e <isr_rx_scan+0x83e>
		_radio.state = STATE_STOP;
   1711a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 17288 <isr_rx_scan+0x278>
   1711e:	2304      	movs	r3, #4
   17120:	f88a 3010 	strb.w	r3, [sl, #16]
		conn = _radio.scanner.conn;
   17124:	f8da 80fc 	ldr.w	r8, [sl, #252]	; 0xfc
		_radio.scanner.conn = NULL;
   17128:	2300      	movs	r3, #0
   1712a:	f8ca 30fc 	str.w	r3, [sl, #252]	; 0xfc
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   1712e:	f7f8 fb93 	bl	f858 <radio_pkt_scratch_get>
   17132:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   17134:	7803      	ldrb	r3, [r0, #0]
   17136:	2205      	movs	r2, #5
   17138:	f362 0303 	bfi	r3, r2, #0, #4
			pdu_adv_tx->chan_sel = 1;
   1713c:	b2db      	uxtb	r3, r3
   1713e:	f043 0320 	orr.w	r3, r3, #32
   17142:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   17144:	7a23      	ldrb	r3, [r4, #8]
   17146:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1714a:	7802      	ldrb	r2, [r0, #0]
   1714c:	f363 12c7 	bfi	r2, r3, #7, #1
   17150:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
   17152:	2322      	movs	r3, #34	; 0x22
   17154:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   17156:	4628      	mov	r0, r5
   17158:	f002 fbde 	bl	19918 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   1715c:	f89a 30de 	ldrb.w	r3, [sl, #222]	; 0xde
   17160:	f013 0f01 	tst.w	r3, #1
   17164:	f000 8098 	beq.w	17298 <isr_rx_scan+0x288>
   17168:	2800      	cmp	r0, #0
   1716a:	f000 8095 	beq.w	17298 <isr_rx_scan+0x288>
			pdu_adv_tx->tx_addr = 1;
   1716e:	7832      	ldrb	r2, [r6, #0]
   17170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   17174:	4633      	mov	r3, r6
   17176:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   1717a:	2206      	movs	r2, #6
   1717c:	4601      	mov	r1, r0
   1717e:	4618      	mov	r0, r3
   17180:	f7e9 f89e 	bl	2c0 <memcpy>
   17184:	e096      	b.n	172b4 <isr_rx_scan+0x2a4>
	if (rl_idx != FILTER_IDX_NONE) {
   17186:	2dff      	cmp	r5, #255	; 0xff
   17188:	d00a      	beq.n	171a0 <isr_rx_scan+0x190>
		return (rl_idx == _radio.scanner.rl_idx);
   1718a:	4b3f      	ldr	r3, [pc, #252]	; (17288 <isr_rx_scan+0x278>)
   1718c:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
   17190:	429d      	cmp	r5, r3
   17192:	bf14      	ite	ne
   17194:	2300      	movne	r3, #0
   17196:	2301      	moveq	r3, #1
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   17198:	2b00      	cmp	r3, #0
   1719a:	d181      	bne.n	170a0 <isr_rx_scan+0x90>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1719c:	2300      	movs	r3, #0
   1719e:	e788      	b.n	170b2 <isr_rx_scan+0xa2>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   171a0:	4b39      	ldr	r3, [pc, #228]	; (17288 <isr_rx_scan+0x278>)
   171a2:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   171a6:	f3c2 1280 	ubfx	r2, r2, #6, #1
   171aa:	7a23      	ldrb	r3, [r4, #8]
   171ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
   171b0:	429a      	cmp	r2, r3
   171b2:	d001      	beq.n	171b8 <isr_rx_scan+0x1a8>
   171b4:	2300      	movs	r3, #0
   171b6:	e7ef      	b.n	17198 <isr_rx_scan+0x188>
		(memcmp(&_radio.scanner.adv_addr[0],
   171b8:	2206      	movs	r2, #6
   171ba:	f108 0102 	add.w	r1, r8, #2
   171be:	4834      	ldr	r0, [pc, #208]	; (17290 <isr_rx_scan+0x280>)
   171c0:	f013 fb16 	bl	2a7f0 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   171c4:	b908      	cbnz	r0, 171ca <isr_rx_scan+0x1ba>
   171c6:	2301      	movs	r3, #1
   171c8:	e7e6      	b.n	17198 <isr_rx_scan+0x188>
   171ca:	2300      	movs	r3, #0
   171cc:	e7e4      	b.n	17198 <isr_rx_scan+0x188>
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   171ce:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   171d0:	f108 0a08 	add.w	sl, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   171d4:	462a      	mov	r2, r5
   171d6:	4651      	mov	r1, sl
   171d8:	09c0      	lsrs	r0, r0, #7
   171da:	f002 fe17 	bl	19e0c <ctrl_rl_addr_resolve>
   171de:	4681      	mov	r9, r0
   171e0:	b9d0      	cbnz	r0, 17218 <isr_rx_scan+0x208>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   171e2:	4b29      	ldr	r3, [pc, #164]	; (17288 <isr_rx_scan+0x278>)
   171e4:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   171e8:	f013 0f01 	tst.w	r3, #1
   171ec:	d119      	bne.n	17222 <isr_rx_scan+0x212>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   171ee:	4b26      	ldr	r3, [pc, #152]	; (17288 <isr_rx_scan+0x278>)
   171f0:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   171f4:	7a23      	ldrb	r3, [r4, #8]
   171f6:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   171f8:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   171fc:	d017      	beq.n	1722e <isr_rx_scan+0x21e>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   171fe:	4b22      	ldr	r3, [pc, #136]	; (17288 <isr_rx_scan+0x278>)
   17200:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   17204:	f013 0f20 	tst.w	r3, #32
   17208:	d003      	beq.n	17212 <isr_rx_scan+0x202>
   1720a:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1720e:	2b00      	cmp	r3, #0
   17210:	db17      	blt.n	17242 <isr_rx_scan+0x232>
			BDADDR_SIZE) == 0))) ||
   17212:	f1b9 0f00 	cmp.w	r9, #0
   17216:	d11d      	bne.n	17254 <isr_rx_scan+0x244>
		((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17218:	f1b9 0f00 	cmp.w	r9, #0
   1721c:	d01d      	beq.n	1725a <isr_rx_scan+0x24a>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1721e:	2301      	movs	r3, #1
   17220:	e747      	b.n	170b2 <isr_rx_scan+0xa2>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   17222:	4628      	mov	r0, r5
   17224:	f002 fb78 	bl	19918 <ctrl_lrpa_get>
   17228:	2800      	cmp	r0, #0
   1722a:	d1f5      	bne.n	17218 <isr_rx_scan+0x208>
   1722c:	e7df      	b.n	171ee <isr_rx_scan+0x1de>
		(memcmp(&_radio.scanner.init_addr[0],
   1722e:	2206      	movs	r2, #6
   17230:	4651      	mov	r1, sl
   17232:	4818      	ldr	r0, [pc, #96]	; (17294 <isr_rx_scan+0x284>)
   17234:	f013 fadc 	bl	2a7f0 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   17238:	2800      	cmp	r0, #0
   1723a:	d1e0      	bne.n	171fe <isr_rx_scan+0x1ee>
			BDADDR_SIZE) == 0))) ||
   1723c:	f04f 0901 	mov.w	r9, #1
   17240:	e7ea      	b.n	17218 <isr_rx_scan+0x208>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   17242:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   17246:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1724a:	2b40      	cmp	r3, #64	; 0x40
   1724c:	d1e1      	bne.n	17212 <isr_rx_scan+0x202>
		return true;
   1724e:	f04f 0901 	mov.w	r9, #1
   17252:	e7de      	b.n	17212 <isr_rx_scan+0x202>
			BDADDR_SIZE) == 0))) ||
   17254:	f04f 0901 	mov.w	r9, #1
   17258:	e7de      	b.n	17218 <isr_rx_scan+0x208>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1725a:	2300      	movs	r3, #0
   1725c:	e729      	b.n	170b2 <isr_rx_scan+0xa2>
   1725e:	2301      	movs	r3, #1
   17260:	e727      	b.n	170b2 <isr_rx_scan+0xa2>
		return (_radio.packet_rx_count -
   17262:	4909      	ldr	r1, [pc, #36]	; (17288 <isr_rx_scan+0x278>)
   17264:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17268:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1726c:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1726e:	fa52 f383 	uxtab	r3, r2, r3
   17272:	b2db      	uxtb	r3, r3
   17274:	e743      	b.n	170fe <isr_rx_scan+0xee>
		return 0;
   17276:	f04f 0900 	mov.w	r9, #0
   1727a:	e74a      	b.n	17112 <isr_rx_scan+0x102>
   1727c:	f3af 8000 	nop.w
   17280:	3b9aca00 	.word	0x3b9aca00
   17284:	00000000 	.word	0x00000000
   17288:	20000ff4 	.word	0x20000ff4
   1728c:	1afd498d 	.word	0x1afd498d
   17290:	200010da 	.word	0x200010da
   17294:	200010d4 	.word	0x200010d4
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   17298:	4962      	ldr	r1, [pc, #392]	; (17424 <isr_rx_scan+0x414>)
   1729a:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   1729e:	09db      	lsrs	r3, r3, #7
   172a0:	7832      	ldrb	r2, [r6, #0]
   172a2:	f363 1286 	bfi	r2, r3, #6, #1
   172a6:	4630      	mov	r0, r6
   172a8:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   172ac:	2206      	movs	r2, #6
   172ae:	31e0      	adds	r1, #224	; 0xe0
   172b0:	f7e9 f806 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
   172b4:	f106 0308 	add.w	r3, r6, #8
   172b8:	930b      	str	r3, [sp, #44]	; 0x2c
   172ba:	2206      	movs	r2, #6
   172bc:	f104 010a 	add.w	r1, r4, #10
   172c0:	4618      	mov	r0, r3
   172c2:	f7e8 fffd 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
   172c6:	2204      	movs	r2, #4
   172c8:	f108 0110 	add.w	r1, r8, #16
   172cc:	f106 000e 	add.w	r0, r6, #14
   172d0:	f7e8 fff6 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
   172d4:	2203      	movs	r2, #3
   172d6:	f108 0114 	add.w	r1, r8, #20
   172da:	f106 0012 	add.w	r0, r6, #18
   172de:	f7e8 ffef 	bl	2c0 <memcpy>
		pdu_adv_tx->payload.connect_ind.lldata.win_size = 1;
   172e2:	2301      	movs	r3, #1
   172e4:	7573      	strb	r3, [r6, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   172e6:	4b4f      	ldr	r3, [pc, #316]	; (17424 <isr_rx_scan+0x414>)
   172e8:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
		conn_interval_us =
   172ec:	f240 42e2 	movw	r2, #1250	; 0x4e2
   172f0:	fb02 fb03 	mul.w	fp, r2, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   172f4:	f7f8 fc30 	bl	fb58 <radio_tmr_end_get>
   172f8:	f500 6adb 	add.w	sl, r0, #1752	; 0x6d8
		if (!_radio.remainder_anchor ||
   172fc:	4b49      	ldr	r3, [pc, #292]	; (17424 <isr_rx_scan+0x414>)
   172fe:	689b      	ldr	r3, [r3, #8]
   17300:	2b00      	cmp	r3, #0
   17302:	dd75      	ble.n	173f0 <isr_rx_scan+0x3e0>
		if (_radio.scanner.win_offset_us == 0) {
   17304:	4b47      	ldr	r3, [pc, #284]	; (17424 <isr_rx_scan+0x414>)
   17306:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1730a:	2b00      	cmp	r3, #0
   1730c:	d174      	bne.n	173f8 <isr_rx_scan+0x3e8>
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
   1730e:	75b3      	strb	r3, [r6, #22]
   17310:	75f3      	strb	r3, [r6, #23]
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   17312:	2100      	movs	r1, #0
   17314:	4608      	mov	r0, r1
   17316:	f7f8 fa35 	bl	f784 <radio_tx_ready_delay_get>
   1731a:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   1731e:	2100      	movs	r1, #0
   17320:	4608      	mov	r0, r1
   17322:	f7f8 fa31 	bl	f788 <radio_tx_chain_delay_get>
   17326:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us += TICKER_TICKS_TO_US(1);
   1732a:	f10a 031e 	add.w	r3, sl, #30
   1732e:	930c      	str	r3, [sp, #48]	; 0x30
			_radio.scanner.conn_interval;
   17330:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 17424 <isr_rx_scan+0x414>
		pdu_adv_tx->payload.connect_ind.lldata.interval =
   17334:	f8ba 30f0 	ldrh.w	r3, [sl, #240]	; 0xf0
   17338:	8333      	strh	r3, [r6, #24]
		pdu_adv_tx->payload.connect_ind.lldata.latency =
   1733a:	f8ba 30f2 	ldrh.w	r3, [sl, #242]	; 0xf2
   1733e:	8373      	strh	r3, [r6, #26]
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
   17340:	f8ba 30f4 	ldrh.w	r3, [sl, #244]	; 0xf4
   17344:	83b3      	strh	r3, [r6, #28]
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
   17346:	2205      	movs	r2, #5
   17348:	f108 0117 	add.w	r1, r8, #23
   1734c:	f106 001e 	add.w	r0, r6, #30
   17350:	f7e8 ffb6 	bl	2c0 <memcpy>
			conn->data_chan_hop;
   17354:	f898 201e 	ldrb.w	r2, [r8, #30]
		pdu_adv_tx->payload.connect_ind.lldata.hop =
   17358:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   1735c:	f362 0304 	bfi	r3, r2, #0, #5
   17360:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
   17364:	f89a 211c 	ldrb.w	r2, [sl, #284]	; 0x11c
   17368:	b2db      	uxtb	r3, r3
   1736a:	f362 1347 	bfi	r3, r2, #5, #3
   1736e:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		radio_switch_complete_and_disable();
   17372:	f7f8 fa85 	bl	f880 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   17376:	4630      	mov	r0, r6
   17378:	f7f8 f9fe 	bl	f778 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1737c:	f7f8 fa34 	bl	f7e8 <radio_is_ready>
   17380:	4682      	mov	sl, r0
   17382:	2800      	cmp	r0, #0
   17384:	d148      	bne.n	17418 <isr_rx_scan+0x408>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   17386:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1738a:	4b26      	ldr	r3, [pc, #152]	; (17424 <isr_rx_scan+0x414>)
   1738c:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   17390:	4640      	mov	r0, r8
   17392:	f7f8 f83a 	bl	f40a <mem_index_get>
   17396:	f8a8 0020 	strh.w	r0, [r8, #32]
		radio_pdu_node_rx->hdr.handle = conn->handle;
   1739a:	f8a9 0006 	strh.w	r0, [r9, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1739e:	2206      	movs	r2, #6
   173a0:	f889 2004 	strb.w	r2, [r9, #4]
		radio_le_conn_cmplt->status = 0x00;
   173a4:	2300      	movs	r3, #0
   173a6:	f889 300b 	strb.w	r3, [r9, #11]
		radio_le_conn_cmplt->role = 0x00;
   173aa:	f889 300c 	strb.w	r3, [r9, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   173ae:	4631      	mov	r1, r6
   173b0:	f811 3b02 	ldrb.w	r3, [r1], #2
   173b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   173b8:	f889 301a 	strb.w	r3, [r9, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   173bc:	f109 001b 	add.w	r0, r9, #27
   173c0:	f7e8 ff7e 	bl	2c0 <memcpy>
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   173c4:	b397      	cbz	r7, 1742c <isr_rx_scan+0x41c>
   173c6:	2dff      	cmp	r5, #255	; 0xff
   173c8:	d030      	beq.n	1742c <isr_rx_scan+0x41c>
			ll_rl_id_addr_get(rl_idx,
   173ca:	f109 020e 	add.w	r2, r9, #14
   173ce:	f109 010d 	add.w	r1, r9, #13
   173d2:	4628      	mov	r0, r5
   173d4:	f002 fc96 	bl	19d04 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   173d8:	f899 300d 	ldrb.w	r3, [r9, #13]
   173dc:	3302      	adds	r3, #2
   173de:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   173e2:	2206      	movs	r2, #6
   173e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   173e6:	f109 0014 	add.w	r0, r9, #20
   173ea:	f7e8 ff69 	bl	2c0 <memcpy>
   173ee:	e02e      	b.n	1744e <isr_rx_scan+0x43e>
			conn_offset_us -= TICKER_TICKS_TO_US(1);
   173f0:	f200 6aba 	addw	sl, r0, #1722	; 0x6ba
   173f4:	e786      	b.n	17304 <isr_rx_scan+0x2f4>
				conn_space_us += conn_interval_us;
   173f6:	445b      	add	r3, fp
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   173f8:	2b00      	cmp	r3, #0
   173fa:	dbfc      	blt.n	173f6 <isr_rx_scan+0x3e6>
   173fc:	459a      	cmp	sl, r3
   173fe:	d8fa      	bhi.n	173f6 <isr_rx_scan+0x3e6>
				(conn_space_us - conn_offset_us) / 1250;
   17400:	eba3 020a 	sub.w	r2, r3, sl
   17404:	4908      	ldr	r1, [pc, #32]	; (17428 <isr_rx_scan+0x418>)
   17406:	fba1 1202 	umull	r1, r2, r1, r2
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
   1740a:	0a92      	lsrs	r2, r2, #10
   1740c:	82f2      	strh	r2, [r6, #22]
			pdu_adv_tx->payload.connect_ind.lldata.win_size++;
   1740e:	7d72      	ldrb	r2, [r6, #21]
   17410:	3201      	adds	r2, #1
   17412:	7572      	strb	r2, [r6, #21]
   17414:	469a      	mov	sl, r3
   17416:	e77c      	b.n	17312 <isr_rx_scan+0x302>
		LL_ASSERT(!radio_is_ready());
   17418:	4040      	eors	r0, r0
   1741a:	f380 8811 	msr	BASEPRI, r0
   1741e:	f04f 0004 	mov.w	r0, #4
   17422:	df02      	svc	2
   17424:	20000ff4 	.word	0x20000ff4
   17428:	d1b71759 	.word	0xd1b71759
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   1742c:	2206      	movs	r2, #6
   1742e:	2100      	movs	r1, #0
   17430:	f109 0014 	add.w	r0, r9, #20
   17434:	f013 fa70 	bl	2a918 <memset>
				pdu_adv_tx->rx_addr;
   17438:	7833      	ldrb	r3, [r6, #0]
   1743a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   1743e:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   17442:	2206      	movs	r2, #6
   17444:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17446:	f109 000e 	add.w	r0, r9, #14
   1744a:	f7e8 ff39 	bl	2c0 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   1744e:	4dce      	ldr	r5, [pc, #824]	; (17788 <isr_rx_scan+0x778>)
   17450:	f8b5 30f0 	ldrh.w	r3, [r5, #240]	; 0xf0
   17454:	f8a9 3021 	strh.w	r3, [r9, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
   17458:	f8b5 30f2 	ldrh.w	r3, [r5, #242]	; 0xf2
   1745c:	f8a9 3023 	strh.w	r3, [r9, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   17460:	f8b5 30f4 	ldrh.w	r3, [r5, #244]	; 0xf4
   17464:	f8a9 3025 	strh.w	r3, [r9, #37]	; 0x25
			pdu_adv_tx->payload.connect_ind.lldata.sca;
   17468:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   1746c:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   17470:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
		rx_fc_lock(conn->handle);
   17474:	f8b8 0020 	ldrh.w	r0, [r8, #32]
   17478:	f7fa fae2 	bl	11a40 <rx_fc_lock>
		packet_rx_enqueue();
   1747c:	f7fc ffca 	bl	14414 <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   17480:	f895 113e 	ldrb.w	r1, [r5, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17484:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   17488:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   1748a:	4291      	cmp	r1, r2
   1748c:	f0c0 80b9 	bcc.w	17602 <isr_rx_scan+0x5f2>
			_radio.packet_rx_last);
   17490:	f895 313d 	ldrb.w	r3, [r5, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17494:	1acb      	subs	r3, r1, r3
   17496:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17498:	2b02      	cmp	r3, #2
   1749a:	f240 80bc 	bls.w	17616 <isr_rx_scan+0x606>
	return _radio.packet_rx[_radio.packet_rx_last];
   1749e:	4bba      	ldr	r3, [pc, #744]	; (17788 <isr_rx_scan+0x778>)
   174a0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   174a4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   174a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   174ac:	2b00      	cmp	r3, #0
   174ae:	f000 80b4 	beq.w	1761a <isr_rx_scan+0x60a>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   174b2:	f8b8 2020 	ldrh.w	r2, [r8, #32]
   174b6:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   174b8:	220b      	movs	r2, #11
   174ba:	711a      	strb	r2, [r3, #4]
			if (pdu_adv_rx->chan_sel) {
   174bc:	7a22      	ldrb	r2, [r4, #8]
   174be:	f012 0f20 	tst.w	r2, #32
   174c2:	f000 80b0 	beq.w	17626 <isr_rx_scan+0x616>
					((u16_t)conn->access_addr[1] << 8) |
   174c6:	f898 1011 	ldrb.w	r1, [r8, #17]
					conn->access_addr[0];
   174ca:	f898 2010 	ldrb.w	r2, [r8, #16]
				u16_t aa_ls =
   174ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   174d2:	f898 0013 	ldrb.w	r0, [r8, #19]
					 conn->access_addr[2];
   174d6:	f898 1012 	ldrb.w	r1, [r8, #18]
				u16_t aa_ms =
   174da:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   174de:	f898 001d 	ldrb.w	r0, [r8, #29]
   174e2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   174e6:	f888 001d 	strb.w	r0, [r8, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   174ea:	404a      	eors	r2, r1
   174ec:	f8a8 201e 	strh.w	r2, [r8, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   174f0:	2201      	movs	r2, #1
   174f2:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   174f4:	f7fc ff8e 	bl	14414 <packet_rx_enqueue>
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   174f8:	4ea3      	ldr	r6, [pc, #652]	; (17788 <isr_rx_scan+0x778>)
   174fa:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   174fe:	f8c8 300c 	str.w	r3, [r8, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   17502:	f8d6 5180 	ldr.w	r5, [r6, #384]	; 0x180
   17506:	f8c8 5004 	str.w	r5, [r8, #4]
		conn->hdr.ticks_xtal_to_start =
   1750a:	2327      	movs	r3, #39	; 0x27
   1750c:	f8c8 3000 	str.w	r3, [r8]
		conn->hdr.ticks_preempt_to_start =
   17510:	2400      	movs	r4, #0
   17512:	f8c8 4008 	str.w	r4, [r8, #8]
		ticks_slot_offset =
   17516:	429d      	cmp	r5, r3
   17518:	bf38      	it	cc
   1751a:	461d      	movcc	r5, r3
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1751c:	f44f 63c6 	mov.w	r3, #1584	; 0x630
   17520:	9300      	str	r3, [sp, #0]
   17522:	4b9a      	ldr	r3, [pc, #616]	; (1778c <isr_rx_scan+0x77c>)
   17524:	2206      	movs	r2, #6
   17526:	4621      	mov	r1, r4
   17528:	4620      	mov	r0, r4
   1752a:	f7f9 fc99 	bl	10e60 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   1752e:	f240 6131 	movw	r1, #1585	; 0x631
   17532:	f7fa faed 	bl	11b10 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17536:	9400      	str	r4, [sp, #0]
   17538:	4623      	mov	r3, r4
   1753a:	2204      	movs	r2, #4
   1753c:	4621      	mov	r1, r4
   1753e:	4620      	mov	r0, r4
   17540:	f7f9 fc8e 	bl	10e60 <ticker_stop>
				     conn->handle,
   17544:	f8b8 3020 	ldrh.w	r3, [r8, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17548:	3307      	adds	r3, #7
   1754a:	b2db      	uxtb	r3, r3
   1754c:	930b      	str	r3, [sp, #44]	; 0x2c
				     (_radio.ticks_anchor - ticks_slot_offset),
   1754e:	6876      	ldr	r6, [r6, #4]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17550:	1b76      	subs	r6, r6, r5
				     TICKER_US_TO_TICKS(conn_space_us),
   17552:	4f8f      	ldr	r7, [pc, #572]	; (17790 <isr_rx_scan+0x780>)
   17554:	a38a      	add	r3, pc, #552	; (adr r3, 17780 <isr_rx_scan+0x770>)
   17556:	e9d3 2300 	ldrd	r2, r3, [r3]
   1755a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1755c:	fba1 0107 	umull	r0, r1, r1, r7
   17560:	f7e9 fdcc 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17564:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
				     TICKER_US_TO_TICKS(conn_interval_us),
   17568:	fbab 1207 	umull	r1, r2, fp, r7
   1756c:	468b      	mov	fp, r1
   1756e:	4694      	mov	ip, r2
   17570:	a383      	add	r3, pc, #524	; (adr r3, 17780 <isr_rx_scan+0x770>)
   17572:	e9d3 2300 	ldrd	r2, r3, [r3]
   17576:	e9cd bc0c 	strd	fp, ip, [sp, #48]	; 0x30
   1757a:	4658      	mov	r0, fp
   1757c:	4661      	mov	r1, ip
   1757e:	f7e9 fdbd 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17582:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
				     TICKER_REMAINDER(conn_interval_us),
   17586:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1758a:	2100      	movs	r1, #0
   1758c:	4a81      	ldr	r2, [pc, #516]	; (17794 <isr_rx_scan+0x784>)
   1758e:	2307      	movs	r3, #7
   17590:	fb03 f300 	mul.w	r3, r3, r0
   17594:	fb02 3301 	mla	r3, r2, r1, r3
   17598:	fba0 0102 	umull	r0, r1, r0, r2
   1759c:	4419      	add	r1, r3
   1759e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   175a2:	2300      	movs	r3, #0
   175a4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	; 0x30
   175a8:	ebbb 0b00 	subs.w	fp, fp, r0
   175ac:	eb6c 0c01 	sbc.w	ip, ip, r1
   175b0:	4658      	mov	r0, fp
   175b2:	4661      	mov	r1, ip
   175b4:	f7e9 fda2 	bl	10fc <__aeabi_uldivmod>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   175b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   175bc:	442b      	add	r3, r5
   175be:	b29b      	uxth	r3, r3
		ticker_status =
   175c0:	f44f 62c9 	mov.w	r2, #1608	; 0x648
   175c4:	9208      	str	r2, [sp, #32]
   175c6:	4a74      	ldr	r2, [pc, #464]	; (17798 <isr_rx_scan+0x788>)
   175c8:	9207      	str	r2, [sp, #28]
   175ca:	f8cd 8018 	str.w	r8, [sp, #24]
   175ce:	4a73      	ldr	r2, [pc, #460]	; (1779c <isr_rx_scan+0x78c>)
   175d0:	9205      	str	r2, [sp, #20]
   175d2:	9304      	str	r3, [sp, #16]
   175d4:	9403      	str	r4, [sp, #12]
   175d6:	9002      	str	r0, [sp, #8]
   175d8:	9701      	str	r7, [sp, #4]
   175da:	f8cd 9000 	str.w	r9, [sp]
   175de:	4633      	mov	r3, r6
   175e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   175e2:	4621      	mov	r1, r4
   175e4:	4620      	mov	r0, r4
   175e6:	f7f9 fb9f 	bl	10d28 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   175ea:	2800      	cmp	r0, #0
   175ec:	f000 8132 	beq.w	17854 <isr_rx_scan+0x844>
   175f0:	2802      	cmp	r0, #2
   175f2:	f000 811b 	beq.w	1782c <isr_rx_scan+0x81c>
   175f6:	4040      	eors	r0, r0
   175f8:	f380 8811 	msr	BASEPRI, r0
   175fc:	f04f 0004 	mov.w	r0, #4
   17600:	df02      	svc	2
		return (_radio.packet_rx_count -
   17602:	4a61      	ldr	r2, [pc, #388]	; (17788 <isr_rx_scan+0x778>)
   17604:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   17608:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1760c:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   1760e:	fa51 f383 	uxtab	r3, r1, r3
   17612:	b2db      	uxtb	r3, r3
   17614:	e740      	b.n	17498 <isr_rx_scan+0x488>
		return 0;
   17616:	2300      	movs	r3, #0
   17618:	e748      	b.n	174ac <isr_rx_scan+0x49c>
			LL_ASSERT(radio_pdu_node_rx);
   1761a:	4040      	eors	r0, r0
   1761c:	f380 8811 	msr	BASEPRI, r0
   17620:	f04f 0004 	mov.w	r0, #4
   17624:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   17626:	2200      	movs	r2, #0
   17628:	72da      	strb	r2, [r3, #11]
   1762a:	e763      	b.n	174f4 <isr_rx_scan+0x4e4>
		 (_radio.scanner.type != 0) &&
   1762c:	4a56      	ldr	r2, [pc, #344]	; (17788 <isr_rx_scan+0x778>)
   1762e:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   17632:	f012 0f08 	tst.w	r2, #8
   17636:	f43f ad13 	beq.w	17060 <isr_rx_scan+0x50>
		 (_radio.scanner.conn == 0)) {
   1763a:	4a53      	ldr	r2, [pc, #332]	; (17788 <isr_rx_scan+0x778>)
   1763c:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
		 (_radio.scanner.type != 0) &&
   17640:	2a00      	cmp	r2, #0
   17642:	f47f ad0d 	bne.w	17060 <isr_rx_scan+0x50>
		err = isr_rx_scan_report(rssi_ready,
   17646:	b37f      	cbz	r7, 176a8 <isr_rx_scan+0x698>
   17648:	4629      	mov	r1, r5
   1764a:	2200      	movs	r2, #0
   1764c:	4630      	mov	r0, r6
   1764e:	f7fc ff81 	bl	14554 <isr_rx_scan_report>
		if (err) {
   17652:	4682      	mov	sl, r0
   17654:	2800      	cmp	r0, #0
   17656:	f040 80e9 	bne.w	1782c <isr_rx_scan+0x81c>
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   1765a:	f7f8 f8fd 	bl	f858 <radio_pkt_scratch_get>
   1765e:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   17660:	7803      	ldrb	r3, [r0, #0]
   17662:	2203      	movs	r2, #3
   17664:	f362 0303 	bfi	r3, r2, #0, #4
   17668:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   1766a:	7a23      	ldrb	r3, [r4, #8]
   1766c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17670:	7802      	ldrb	r2, [r0, #0]
   17672:	f363 12c7 	bfi	r2, r3, #7, #1
   17676:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
   17678:	230c      	movs	r3, #12
   1767a:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   1767c:	4628      	mov	r0, r5
   1767e:	f002 f94b 	bl	19918 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   17682:	4b41      	ldr	r3, [pc, #260]	; (17788 <isr_rx_scan+0x778>)
   17684:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   17688:	f013 0f01 	tst.w	r3, #1
   1768c:	d00e      	beq.n	176ac <isr_rx_scan+0x69c>
   1768e:	b168      	cbz	r0, 176ac <isr_rx_scan+0x69c>
			pdu_adv_tx->tx_addr = 1;
   17690:	7832      	ldrb	r2, [r6, #0]
   17692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   17696:	4633      	mov	r3, r6
   17698:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   1769c:	2206      	movs	r2, #6
   1769e:	4601      	mov	r1, r0
   176a0:	4618      	mov	r0, r3
   176a2:	f7e8 fe0d 	bl	2c0 <memcpy>
   176a6:	e00f      	b.n	176c8 <isr_rx_scan+0x6b8>
		err = isr_rx_scan_report(rssi_ready,
   176a8:	21ff      	movs	r1, #255	; 0xff
   176aa:	e7ce      	b.n	1764a <isr_rx_scan+0x63a>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   176ac:	4936      	ldr	r1, [pc, #216]	; (17788 <isr_rx_scan+0x778>)
   176ae:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   176b2:	09db      	lsrs	r3, r3, #7
   176b4:	7832      	ldrb	r2, [r6, #0]
   176b6:	f363 1286 	bfi	r2, r3, #6, #1
   176ba:	4630      	mov	r0, r6
   176bc:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   176c0:	2206      	movs	r2, #6
   176c2:	31e0      	adds	r1, #224	; 0xe0
   176c4:	f7e8 fdfc 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
   176c8:	2206      	movs	r2, #6
   176ca:	f104 010a 	add.w	r1, r4, #10
   176ce:	f106 0008 	add.w	r0, r6, #8
   176d2:	f7e8 fdf5 	bl	2c0 <memcpy>
		_radio.scanner.state = 1;
   176d6:	4b2c      	ldr	r3, [pc, #176]	; (17788 <isr_rx_scan+0x778>)
   176d8:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   176dc:	f042 0202 	orr.w	r2, r2, #2
   176e0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		_radio.state = STATE_TX;
   176e4:	2202      	movs	r2, #2
   176e6:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   176e8:	2096      	movs	r0, #150	; 0x96
   176ea:	f7f8 f96b 	bl	f9c4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   176ee:	2000      	movs	r0, #0
   176f0:	f7f8 f8b6 	bl	f860 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   176f4:	4630      	mov	r0, r6
   176f6:	f7f8 f83f 	bl	f778 <radio_pkt_tx_set>
		radio_tmr_end_capture();
   176fa:	f7f8 fa1b 	bl	fb34 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   176fe:	f7f8 f873 	bl	f7e8 <radio_is_ready>
   17702:	4682      	mov	sl, r0
   17704:	2800      	cmp	r0, #0
   17706:	f000 8091 	beq.w	1782c <isr_rx_scan+0x81c>
   1770a:	4040      	eors	r0, r0
   1770c:	f380 8811 	msr	BASEPRI, r0
   17710:	f04f 0004 	mov.w	r0, #4
   17714:	df02      	svc	2
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   17716:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   17718:	f108 0908 	add.w	r9, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   1771c:	462a      	mov	r2, r5
   1771e:	4649      	mov	r1, r9
   17720:	09c0      	lsrs	r0, r0, #7
   17722:	f002 fb73 	bl	19e0c <ctrl_rl_addr_resolve>
   17726:	4682      	mov	sl, r0
   17728:	2800      	cmp	r0, #0
   1772a:	d146      	bne.n	177ba <isr_rx_scan+0x7aa>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   1772c:	4b16      	ldr	r3, [pc, #88]	; (17788 <isr_rx_scan+0x778>)
   1772e:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   17732:	7a23      	ldrb	r3, [r4, #8]
   17734:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   17736:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1773a:	d00b      	beq.n	17754 <isr_rx_scan+0x744>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   1773c:	4b12      	ldr	r3, [pc, #72]	; (17788 <isr_rx_scan+0x778>)
   1773e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   17742:	f013 0f20 	tst.w	r3, #32
   17746:	d02d      	beq.n	177a4 <isr_rx_scan+0x794>
   17748:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1774c:	2b00      	cmp	r3, #0
   1774e:	db0c      	blt.n	1776a <isr_rx_scan+0x75a>
	bool dir_report = false;
   17750:	46d1      	mov	r9, sl
   17752:	e028      	b.n	177a6 <isr_rx_scan+0x796>
		(memcmp(&_radio.scanner.init_addr[0],
   17754:	2206      	movs	r2, #6
   17756:	4649      	mov	r1, r9
   17758:	4811      	ldr	r0, [pc, #68]	; (177a0 <isr_rx_scan+0x790>)
   1775a:	f013 f849 	bl	2a7f0 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   1775e:	2800      	cmp	r0, #0
   17760:	d1ec      	bne.n	1773c <isr_rx_scan+0x72c>
	bool dir_report = false;
   17762:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   17764:	f04f 0a01 	mov.w	sl, #1
   17768:	e029      	b.n	177be <isr_rx_scan+0x7ae>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   1776a:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   1776e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17772:	2b40      	cmp	r3, #64	; 0x40
   17774:	d01d      	beq.n	177b2 <isr_rx_scan+0x7a2>
	bool dir_report = false;
   17776:	46d1      	mov	r9, sl
   17778:	e015      	b.n	177a6 <isr_rx_scan+0x796>
   1777a:	bf00      	nop
   1777c:	f3af 8000 	nop.w
   17780:	1afd498d 	.word	0x1afd498d
   17784:	00000007 	.word	0x00000007
   17788:	20000ff4 	.word	0x20000ff4
   1778c:	00011b11 	.word	0x00011b11
   17790:	3b9aca00 	.word	0x3b9aca00
   17794:	1afd498d 	.word	0x1afd498d
   17798:	00011a7d 	.word	0x00011a7d
   1779c:	0001663d 	.word	0x0001663d
   177a0:	200010d4 	.word	0x200010d4
   177a4:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   177a6:	f1ba 0f00 	cmp.w	sl, #0
   177aa:	d008      	beq.n	177be <isr_rx_scan+0x7ae>
   177ac:	f04f 0a01 	mov.w	sl, #1
   177b0:	e005      	b.n	177be <isr_rx_scan+0x7ae>
			*dir_report = true;
   177b2:	f04f 0901 	mov.w	r9, #1
		return true;
   177b6:	46ca      	mov	sl, r9
   177b8:	e7f5      	b.n	177a6 <isr_rx_scan+0x796>
	bool dir_report = false;
   177ba:	f04f 0900 	mov.w	r9, #0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   177be:	f1ba 0f00 	cmp.w	sl, #0
   177c2:	d12b      	bne.n	1781c <isr_rx_scan+0x80c>
   177c4:	e454      	b.n	17070 <isr_rx_scan+0x60>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   177c6:	4a26      	ldr	r2, [pc, #152]	; (17860 <isr_rx_scan+0x850>)
   177c8:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
   177cc:	f012 0f07 	tst.w	r2, #7
   177d0:	d124      	bne.n	1781c <isr_rx_scan+0x80c>
   177d2:	e459      	b.n	17088 <isr_rx_scan+0x78>
		   (_radio.scanner.state != 0) &&
   177d4:	4b22      	ldr	r3, [pc, #136]	; (17860 <isr_rx_scan+0x850>)
   177d6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   177da:	f013 0f02 	tst.w	r3, #2
   177de:	d102      	bne.n	177e6 <isr_rx_scan+0x7d6>
		return 1;
   177e0:	f04f 0a01 	mov.w	sl, #1
   177e4:	e022      	b.n	1782c <isr_rx_scan+0x81c>
	struct pdu_adv *sreq = (struct pdu_adv *)radio_pkt_scratch_get();
   177e6:	f7f8 f837 	bl	f858 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   177ea:	7802      	ldrb	r2, [r0, #0]
   177ec:	7a23      	ldrb	r3, [r4, #8]
   177ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
   177f2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   177f6:	d004      	beq.n	17802 <isr_rx_scan+0x7f2>
   177f8:	2300      	movs	r3, #0
		   (_radio.scanner.state != 0) &&
   177fa:	b97b      	cbnz	r3, 1781c <isr_rx_scan+0x80c>
		return 1;
   177fc:	f04f 0a01 	mov.w	sl, #1
   17800:	e014      	b.n	1782c <isr_rx_scan+0x81c>
		(memcmp(&sreq->payload.scan_req.adv_addr[0],
   17802:	2206      	movs	r2, #6
   17804:	f108 0102 	add.w	r1, r8, #2
   17808:	3008      	adds	r0, #8
   1780a:	f012 fff1 	bl	2a7f0 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   1780e:	b108      	cbz	r0, 17814 <isr_rx_scan+0x804>
   17810:	2300      	movs	r3, #0
   17812:	e7f2      	b.n	177fa <isr_rx_scan+0x7ea>
   17814:	2301      	movs	r3, #1
   17816:	e7f0      	b.n	177fa <isr_rx_scan+0x7ea>
	bool dir_report = false;
   17818:	f04f 0900 	mov.w	r9, #0
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   1781c:	7a63      	ldrb	r3, [r4, #9]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   1781e:	b1db      	cbz	r3, 17858 <isr_rx_scan+0x848>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   17820:	4b0f      	ldr	r3, [pc, #60]	; (17860 <isr_rx_scan+0x850>)
   17822:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   17826:	b12b      	cbz	r3, 17834 <isr_rx_scan+0x824>
		return 1;
   17828:	f04f 0a01 	mov.w	sl, #1
}
   1782c:	4650      	mov	r0, sl
   1782e:	b00f      	add	sp, #60	; 0x3c
   17830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = isr_rx_scan_report(rssi_ready,
   17834:	b907      	cbnz	r7, 17838 <isr_rx_scan+0x828>
   17836:	25ff      	movs	r5, #255	; 0xff
   17838:	464a      	mov	r2, r9
   1783a:	4629      	mov	r1, r5
   1783c:	4630      	mov	r0, r6
   1783e:	f7fc fe89 	bl	14554 <isr_rx_scan_report>
		if (err) {
   17842:	4682      	mov	sl, r0
   17844:	2800      	cmp	r0, #0
   17846:	d1f1      	bne.n	1782c <isr_rx_scan+0x81c>
	return 1;
   17848:	f04f 0a01 	mov.w	sl, #1
   1784c:	e7ee      	b.n	1782c <isr_rx_scan+0x81c>
			return 1;
   1784e:	f04f 0a01 	mov.w	sl, #1
   17852:	e7eb      	b.n	1782c <isr_rx_scan+0x81c>
		return 0;
   17854:	4682      	mov	sl, r0
   17856:	e7e9      	b.n	1782c <isr_rx_scan+0x81c>
		return 1;
   17858:	f04f 0a01 	mov.w	sl, #1
   1785c:	e7e6      	b.n	1782c <isr_rx_scan+0x81c>
   1785e:	bf00      	nop
   17860:	20000ff4 	.word	0x20000ff4
   17864:	00000000 	.word	0x00000000

00017868 <isr_rx_adv>:
{
   17868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1786c:	b08f      	sub	sp, #60	; 0x3c
   1786e:	4604      	mov	r4, r0
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   17870:	b9fa      	cbnz	r2, 178b2 <isr_rx_adv+0x4a>
   17872:	20ff      	movs	r0, #255	; 0xff
   17874:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
   17878:	f7f7 ffee 	bl	f858 <radio_pkt_scratch_get>
   1787c:	4680      	mov	r8, r0
		[_radio.advertiser.adv_data.first][0];
   1787e:	4f9d      	ldr	r7, [pc, #628]	; (17af4 <isr_rx_adv+0x28c>)
   17880:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
   17884:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   17888:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1788c:	3320      	adds	r3, #32
   1788e:	441f      	add	r7, r3
   17890:	1dfd      	adds	r5, r7, #7
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   17892:	7803      	ldrb	r3, [r0, #0]
   17894:	f003 030f 	and.w	r3, r3, #15
   17898:	2b03      	cmp	r3, #3
   1789a:	d00e      	beq.n	178ba <isr_rx_adv+0x52>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1789c:	f898 3000 	ldrb.w	r3, [r8]
   178a0:	f003 030f 	and.w	r3, r3, #15
   178a4:	2b05      	cmp	r3, #5
   178a6:	d065      	beq.n	17974 <isr_rx_adv+0x10c>
	return 1;
   178a8:	2301      	movs	r3, #1
}
   178aa:	4618      	mov	r0, r3
   178ac:	b00f      	add	sp, #60	; 0x3c
   178ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   178b2:	4618      	mov	r0, r3
   178b4:	f002 f892 	bl	199dc <ctrl_rl_irk_idx>
   178b8:	e7dc      	b.n	17874 <isr_rx_adv+0xc>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   178ba:	7843      	ldrb	r3, [r0, #1]
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   178bc:	2b0c      	cmp	r3, #12
   178be:	d1ed      	bne.n	1789c <isr_rx_adv+0x34>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   178c0:	4b8c      	ldr	r3, [pc, #560]	; (17af4 <isr_rx_adv+0x28c>)
   178c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   178c6:	f013 0f40 	tst.w	r3, #64	; 0x40
   178ca:	d030      	beq.n	1792e <isr_rx_adv+0xc6>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   178cc:	4b89      	ldr	r3, [pc, #548]	; (17af4 <isr_rx_adv+0x28c>)
   178ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   178d2:	f013 0f40 	tst.w	r3, #64	; 0x40
   178d6:	d04b      	beq.n	17970 <isr_rx_adv+0x108>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   178d8:	2c00      	cmp	r4, #0
   178da:	d034      	beq.n	17946 <isr_rx_adv+0xde>
	return (adv->tx_addr == sr->rx_addr) &&
   178dc:	79fb      	ldrb	r3, [r7, #7]
   178de:	f3c3 1380 	ubfx	r3, r3, #6, #1
   178e2:	f898 2000 	ldrb.w	r2, [r8]
   178e6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   178ea:	d034      	beq.n	17956 <isr_rx_adv+0xee>
   178ec:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   178ee:	2b00      	cmp	r3, #0
   178f0:	d13c      	bne.n	1796c <isr_rx_adv+0x104>
   178f2:	2300      	movs	r3, #0
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   178f4:	2b00      	cmp	r3, #0
   178f6:	d0d1      	beq.n	1789c <isr_rx_adv+0x34>
		_radio.state = STATE_CLOSE;
   178f8:	4c7e      	ldr	r4, [pc, #504]	; (17af4 <isr_rx_adv+0x28c>)
   178fa:	2303      	movs	r3, #3
   178fc:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
   178fe:	f7f7 ffbf 	bl	f880 <radio_switch_complete_and_disable>
		     data[_radio.advertiser.scan_data.first][0]);
   17902:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
   17906:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1790a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1790e:	3370      	adds	r3, #112	; 0x70
   17910:	4423      	add	r3, r4
   17912:	1dd8      	adds	r0, r3, #7
   17914:	f7f7 ff30 	bl	f778 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   17918:	f7f7 ff66 	bl	f7e8 <radio_is_ready>
   1791c:	4603      	mov	r3, r0
   1791e:	2800      	cmp	r0, #0
   17920:	d0c3      	beq.n	178aa <isr_rx_adv+0x42>
   17922:	4040      	eors	r0, r0
   17924:	f380 8811 	msr	BASEPRI, r0
   17928:	f04f 0004 	mov.w	r0, #4
   1792c:	df02      	svc	2
		 ctrl_rl_addr_allowed(sr->tx_addr,
   1792e:	4601      	mov	r1, r0
   17930:	f811 0b02 	ldrb.w	r0, [r1], #2
   17934:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   17938:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1793c:	f002 fa0e 	bl	19d5c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   17940:	2800      	cmp	r0, #0
   17942:	d1cb      	bne.n	178dc <isr_rx_adv+0x74>
   17944:	e7c2      	b.n	178cc <isr_rx_adv+0x64>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17946:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   1794a:	f002 f871 	bl	19a30 <ctrl_irk_whitelisted>
   1794e:	2800      	cmp	r0, #0
   17950:	d1c4      	bne.n	178dc <isr_rx_adv+0x74>
   17952:	2300      	movs	r3, #0
   17954:	e7ce      	b.n	178f4 <isr_rx_adv+0x8c>
		 !memcmp(adv->payload.adv_ind.addr,
   17956:	2206      	movs	r2, #6
   17958:	f108 0108 	add.w	r1, r8, #8
   1795c:	1ca8      	adds	r0, r5, #2
   1795e:	f012 ff47 	bl	2a7f0 <memcmp>
	return (adv->tx_addr == sr->rx_addr) &&
   17962:	b908      	cbnz	r0, 17968 <isr_rx_adv+0x100>
   17964:	2301      	movs	r3, #1
   17966:	e7c2      	b.n	178ee <isr_rx_adv+0x86>
   17968:	2300      	movs	r3, #0
   1796a:	e7c0      	b.n	178ee <isr_rx_adv+0x86>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1796c:	2301      	movs	r3, #1
   1796e:	e7c1      	b.n	178f4 <isr_rx_adv+0x8c>
   17970:	2300      	movs	r3, #0
   17972:	e7bf      	b.n	178f4 <isr_rx_adv+0x8c>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   17974:	f898 3001 	ldrb.w	r3, [r8, #1]
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   17978:	2b22      	cmp	r3, #34	; 0x22
   1797a:	d001      	beq.n	17980 <isr_rx_adv+0x118>
	return 1;
   1797c:	2301      	movs	r3, #1
   1797e:	e794      	b.n	178aa <isr_rx_adv+0x42>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   17980:	79fb      	ldrb	r3, [r7, #7]
   17982:	f003 030f 	and.w	r3, r3, #15
   17986:	2b01      	cmp	r3, #1
   17988:	d01a      	beq.n	179c0 <isr_rx_adv+0x158>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   1798a:	4b5a      	ldr	r3, [pc, #360]	; (17af4 <isr_rx_adv+0x28c>)
   1798c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17990:	09db      	lsrs	r3, r3, #7
   17992:	d06d      	beq.n	17a70 <isr_rx_adv+0x208>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   17994:	4b57      	ldr	r3, [pc, #348]	; (17af4 <isr_rx_adv+0x28c>)
   17996:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   1799a:	09db      	lsrs	r3, r3, #7
   1799c:	f000 8096 	beq.w	17acc <isr_rx_adv+0x264>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   179a0:	2c00      	cmp	r4, #0
   179a2:	d071      	beq.n	17a88 <isr_rx_adv+0x220>
	return (adv->tx_addr == ci->rx_addr) &&
   179a4:	79fb      	ldrb	r3, [r7, #7]
   179a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   179aa:	f898 2000 	ldrb.w	r2, [r8]
   179ae:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   179b2:	d071      	beq.n	17a98 <isr_rx_adv+0x230>
   179b4:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   179b6:	2b00      	cmp	r3, #0
   179b8:	f000 809a 	beq.w	17af0 <isr_rx_adv+0x288>
   179bc:	2301      	movs	r3, #1
   179be:	e086      	b.n	17ace <isr_rx_adv+0x266>
		return ctrl_rl_addr_allowed(ci->tx_addr,
   179c0:	4641      	mov	r1, r8
   179c2:	f811 0b02 	ldrb.w	r0, [r1], #2
   179c6:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   179ca:	f3c0 1080 	ubfx	r0, r0, #6, #1
   179ce:	f002 f9c5 	bl	19d5c <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   179d2:	b908      	cbnz	r0, 179d8 <isr_rx_adv+0x170>
   179d4:	2300      	movs	r3, #0
   179d6:	e07a      	b.n	17ace <isr_rx_adv+0x266>
	return (adv->tx_addr == ci->rx_addr) &&
   179d8:	79fb      	ldrb	r3, [r7, #7]
   179da:	f3c3 1380 	ubfx	r3, r3, #6, #1
   179de:	f898 2000 	ldrb.w	r2, [r8]
   179e2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   179e6:	d003      	beq.n	179f0 <isr_rx_adv+0x188>
   179e8:	2300      	movs	r3, #0
					    rl_idx) &&
   179ea:	b9db      	cbnz	r3, 17a24 <isr_rx_adv+0x1bc>
		       isr_adv_ci_adva_check(adv, ci) &&
   179ec:	2300      	movs	r3, #0
   179ee:	e06e      	b.n	17ace <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   179f0:	79fb      	ldrb	r3, [r7, #7]
   179f2:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   179f6:	2b01      	cmp	r3, #1
   179f8:	d008      	beq.n	17a0c <isr_rx_adv+0x1a4>
		 (!memcmp(adv->payload.adv_ind.addr,
   179fa:	2206      	movs	r2, #6
   179fc:	f108 0108 	add.w	r1, r8, #8
   17a00:	1ca8      	adds	r0, r5, #2
   17a02:	f012 fef5 	bl	2a7f0 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   17a06:	b958      	cbnz	r0, 17a20 <isr_rx_adv+0x1b8>
	return (adv->tx_addr == ci->rx_addr) &&
   17a08:	2301      	movs	r3, #1
   17a0a:	e7ee      	b.n	179ea <isr_rx_adv+0x182>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   17a0c:	2206      	movs	r2, #6
   17a0e:	f108 0108 	add.w	r1, r8, #8
   17a12:	1ca8      	adds	r0, r5, #2
   17a14:	f012 feec 	bl	2a7f0 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17a18:	2800      	cmp	r0, #0
   17a1a:	d1ee      	bne.n	179fa <isr_rx_adv+0x192>
	return (adv->tx_addr == ci->rx_addr) &&
   17a1c:	2301      	movs	r3, #1
   17a1e:	e7e4      	b.n	179ea <isr_rx_adv+0x182>
   17a20:	2300      	movs	r3, #0
   17a22:	e7e2      	b.n	179ea <isr_rx_adv+0x182>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   17a24:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
	if (rl_idx != FILTER_IDX_NONE) {
   17a28:	2bff      	cmp	r3, #255	; 0xff
   17a2a:	d009      	beq.n	17a40 <isr_rx_adv+0x1d8>
		return rl_idx == _radio.advertiser.rl_idx;
   17a2c:	4a31      	ldr	r2, [pc, #196]	; (17af4 <isr_rx_adv+0x28c>)
   17a2e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   17a32:	4293      	cmp	r3, r2
   17a34:	bf14      	ite	ne
   17a36:	2300      	movne	r3, #0
   17a38:	2301      	moveq	r3, #1
		       isr_adv_ci_adva_check(adv, ci) &&
   17a3a:	b9bb      	cbnz	r3, 17a6c <isr_rx_adv+0x204>
   17a3c:	2300      	movs	r3, #0
   17a3e:	e046      	b.n	17ace <isr_rx_adv+0x266>
	return (adv->rx_addr == ci->tx_addr) &&
   17a40:	79fa      	ldrb	r2, [r7, #7]
   17a42:	f898 3000 	ldrb.w	r3, [r8]
   17a46:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17a4a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17a4e:	d001      	beq.n	17a54 <isr_rx_adv+0x1ec>
   17a50:	2300      	movs	r3, #0
   17a52:	e7f2      	b.n	17a3a <isr_rx_adv+0x1d2>
	       !memcmp(adv->payload.direct_ind.tgt_addr,
   17a54:	2206      	movs	r2, #6
   17a56:	f108 0102 	add.w	r1, r8, #2
   17a5a:	f105 0008 	add.w	r0, r5, #8
   17a5e:	f012 fec7 	bl	2a7f0 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   17a62:	b908      	cbnz	r0, 17a68 <isr_rx_adv+0x200>
   17a64:	2301      	movs	r3, #1
   17a66:	e7e8      	b.n	17a3a <isr_rx_adv+0x1d2>
   17a68:	2300      	movs	r3, #0
   17a6a:	e7e6      	b.n	17a3a <isr_rx_adv+0x1d2>
		       isr_adv_ci_adva_check(adv, ci) &&
   17a6c:	2301      	movs	r3, #1
   17a6e:	e02e      	b.n	17ace <isr_rx_adv+0x266>
		 ctrl_rl_addr_allowed(ci->tx_addr,
   17a70:	4641      	mov	r1, r8
   17a72:	f811 0b02 	ldrb.w	r0, [r1], #2
   17a76:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   17a7a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17a7e:	f002 f96d 	bl	19d5c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   17a82:	2800      	cmp	r0, #0
   17a84:	d18e      	bne.n	179a4 <isr_rx_adv+0x13c>
   17a86:	e785      	b.n	17994 <isr_rx_adv+0x12c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17a88:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   17a8c:	f001 ffd0 	bl	19a30 <ctrl_irk_whitelisted>
   17a90:	2800      	cmp	r0, #0
   17a92:	d187      	bne.n	179a4 <isr_rx_adv+0x13c>
   17a94:	2300      	movs	r3, #0
   17a96:	e01a      	b.n	17ace <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17a98:	79fb      	ldrb	r3, [r7, #7]
   17a9a:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   17a9e:	2b01      	cmp	r3, #1
   17aa0:	d008      	beq.n	17ab4 <isr_rx_adv+0x24c>
		 (!memcmp(adv->payload.adv_ind.addr,
   17aa2:	2206      	movs	r2, #6
   17aa4:	f108 0108 	add.w	r1, r8, #8
   17aa8:	1ca8      	adds	r0, r5, #2
   17aaa:	f012 fea1 	bl	2a7f0 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   17aae:	b958      	cbnz	r0, 17ac8 <isr_rx_adv+0x260>
	return (adv->tx_addr == ci->rx_addr) &&
   17ab0:	2301      	movs	r3, #1
   17ab2:	e780      	b.n	179b6 <isr_rx_adv+0x14e>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   17ab4:	2206      	movs	r2, #6
   17ab6:	f108 0108 	add.w	r1, r8, #8
   17aba:	1ca8      	adds	r0, r5, #2
   17abc:	f012 fe98 	bl	2a7f0 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17ac0:	2800      	cmp	r0, #0
   17ac2:	d1ee      	bne.n	17aa2 <isr_rx_adv+0x23a>
	return (adv->tx_addr == ci->rx_addr) &&
   17ac4:	2301      	movs	r3, #1
   17ac6:	e776      	b.n	179b6 <isr_rx_adv+0x14e>
   17ac8:	2300      	movs	r3, #0
   17aca:	e774      	b.n	179b6 <isr_rx_adv+0x14e>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17acc:	2300      	movs	r3, #0
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   17ace:	2b00      	cmp	r3, #0
   17ad0:	f000 8232 	beq.w	17f38 <isr_rx_adv+0x6d0>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   17ad4:	4b07      	ldr	r3, [pc, #28]	; (17af4 <isr_rx_adv+0x28c>)
   17ad6:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   17ada:	b16b      	cbz	r3, 17af8 <isr_rx_adv+0x290>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   17adc:	4a05      	ldr	r2, [pc, #20]	; (17af4 <isr_rx_adv+0x28c>)
   17ade:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   17ae2:	b2db      	uxtb	r3, r3
   17ae4:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   17ae8:	4293      	cmp	r3, r2
   17aea:	d005      	beq.n	17af8 <isr_rx_adv+0x290>
	return 1;
   17aec:	2301      	movs	r3, #1
   17aee:	e6dc      	b.n	178aa <isr_rx_adv+0x42>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17af0:	2300      	movs	r3, #0
   17af2:	e7ec      	b.n	17ace <isr_rx_adv+0x266>
   17af4:	20000ff4 	.word	0x20000ff4
		   (_radio.advertiser.conn)) {
   17af8:	4bd9      	ldr	r3, [pc, #868]	; (17e60 <isr_rx_adv+0x5f8>)
   17afa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   17afe:	2b00      	cmp	r3, #0
   17b00:	f000 821c 	beq.w	17f3c <isr_rx_adv+0x6d4>
	if (_radio.packet_rx_acquire >=
   17b04:	4bd6      	ldr	r3, [pc, #856]	; (17e60 <isr_rx_adv+0x5f8>)
   17b06:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17b0a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17b0e:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17b10:	429a      	cmp	r2, r3
   17b12:	f0c0 81cf 	bcc.w	17eb4 <isr_rx_adv+0x64c>
			_radio.packet_rx_last);
   17b16:	4bd2      	ldr	r3, [pc, #840]	; (17e60 <isr_rx_adv+0x5f8>)
   17b18:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17b1c:	1ad3      	subs	r3, r2, r3
   17b1e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17b20:	2b03      	cmp	r3, #3
   17b22:	f240 81d1 	bls.w	17ec8 <isr_rx_adv+0x660>
	return _radio.packet_rx[_radio.packet_rx_last];
   17b26:	4bce      	ldr	r3, [pc, #824]	; (17e60 <isr_rx_adv+0x5f8>)
   17b28:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17b2c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17b30:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   17b34:	2d00      	cmp	r5, #0
   17b36:	f000 8203 	beq.w	17f40 <isr_rx_adv+0x6d8>
		_radio.state = STATE_STOP;
   17b3a:	4ec9      	ldr	r6, [pc, #804]	; (17e60 <isr_rx_adv+0x5f8>)
   17b3c:	f04f 0904 	mov.w	r9, #4
   17b40:	f886 9010 	strb.w	r9, [r6, #16]
		radio_disable();
   17b44:	f7f7 fe36 	bl	f7b4 <radio_disable>
		conn = _radio.advertiser.conn;
   17b48:	f8d6 40c8 	ldr.w	r4, [r6, #200]	; 0xc8
		_radio.advertiser.conn = NULL;
   17b4c:	2300      	movs	r3, #0
   17b4e:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   17b52:	f44f 72aa 	mov.w	r2, #340	; 0x154
   17b56:	f8d6 1104 	ldr.w	r1, [r6, #260]	; 0x104
   17b5a:	4620      	mov	r0, r4
   17b5c:	f7f7 fc55 	bl	f40a <mem_index_get>
   17b60:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
   17b62:	2203      	movs	r2, #3
   17b64:	f108 0112 	add.w	r1, r8, #18
   17b68:	f104 0014 	add.w	r0, r4, #20
   17b6c:	f7e8 fba8 	bl	2c0 <memcpy>
		memcpy(&conn->access_addr[0],
   17b70:	f104 0a10 	add.w	sl, r4, #16
   17b74:	464a      	mov	r2, r9
   17b76:	f108 010e 	add.w	r1, r8, #14
   17b7a:	4650      	mov	r0, sl
   17b7c:	f7e8 fba0 	bl	2c0 <memcpy>
		memcpy(&conn->data_chan_map[0],
   17b80:	f104 0617 	add.w	r6, r4, #23
   17b84:	2205      	movs	r2, #5
   17b86:	f108 011e 	add.w	r1, r8, #30
   17b8a:	4630      	mov	r0, r6
   17b8c:	f7e8 fb98 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   17b90:	2105      	movs	r1, #5
   17b92:	4630      	mov	r0, r6
   17b94:	f7f7 fc7d 	bl	f492 <util_ones_count_get>
		conn->data_chan_count =
   17b98:	7f63      	ldrb	r3, [r4, #29]
   17b9a:	f360 0305 	bfi	r3, r0, #0, #6
   17b9e:	7763      	strb	r3, [r4, #29]
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
   17ba0:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   17ba4:	f3c3 0304 	ubfx	r3, r3, #0, #5
   17ba8:	77a3      	strb	r3, [r4, #30]
			pdu_adv->payload.connect_ind.lldata.interval;
   17baa:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		conn->conn_interval =
   17bae:	84a3      	strh	r3, [r4, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
   17bb0:	f8b8 3018 	ldrh.w	r3, [r8, #24]
   17bb4:	f240 46e2 	movw	r6, #1250	; 0x4e2
   17bb8:	fb06 f603 	mul.w	r6, r6, r3
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
   17bbc:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   17bc0:	84e3      	strh	r3, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   17bc2:	464a      	mov	r2, r9
   17bc4:	4651      	mov	r1, sl
   17bc6:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   17bca:	f7e8 fb79 	bl	2c0 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
   17bce:	f8b8 301c 	ldrh.w	r3, [r8, #28]
   17bd2:	f242 7210 	movw	r2, #10000	; 0x2710
   17bd6:	fb02 6303 	mla	r3, r2, r3, r6
   17bda:	3b01      	subs	r3, #1
   17bdc:	fbb3 f3f6 	udiv	r3, r3, r6
		conn->supervision_reload =
   17be0:	87e3      	strh	r3, [r4, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   17be2:	4ba0      	ldr	r3, [pc, #640]	; (17e64 <isr_rx_adv+0x5fc>)
   17be4:	4433      	add	r3, r6
   17be6:	fbb3 f3f6 	udiv	r3, r3, r6
   17bea:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   17bee:	4b9e      	ldr	r3, [pc, #632]	; (17e68 <isr_rx_adv+0x600>)
   17bf0:	4433      	add	r3, r6
   17bf2:	fbb3 f3f6 	udiv	r3, r3, r6
   17bf6:	b29b      	uxth	r3, r3
   17bf8:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17bfc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   17bfe:	1d91      	adds	r1, r2, #6
   17c00:	428b      	cmp	r3, r1
   17c02:	dd03      	ble.n	17c0c <isr_rx_adv+0x3a4>
				     (conn->apto_reload - (conn->latency + 6)) :
   17c04:	1a9b      	subs	r3, r3, r2
   17c06:	b29b      	uxth	r3, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17c08:	3b06      	subs	r3, #6
   17c0a:	b29b      	uxth	r3, r3
   17c0c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
		radio_pdu_node_rx->hdr.handle = conn->handle;
   17c10:	8c23      	ldrh	r3, [r4, #32]
   17c12:	80eb      	strh	r3, [r5, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17c14:	2206      	movs	r2, #6
   17c16:	712a      	strb	r2, [r5, #4]
		radio_le_conn_cmplt->status = 0x00;
   17c18:	2300      	movs	r3, #0
   17c1a:	72eb      	strb	r3, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
   17c1c:	2301      	movs	r3, #1
   17c1e:	732b      	strb	r3, [r5, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   17c20:	4641      	mov	r1, r8
   17c22:	f811 3b08 	ldrb.w	r3, [r1], #8
   17c26:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   17c2a:	76ab      	strb	r3, [r5, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   17c2c:	f105 001b 	add.w	r0, r5, #27
   17c30:	f7e8 fb46 	bl	2c0 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   17c34:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   17c38:	28ff      	cmp	r0, #255	; 0xff
   17c3a:	f000 8147 	beq.w	17ecc <isr_rx_adv+0x664>
			ll_rl_id_addr_get(rl_idx,
   17c3e:	f105 020e 	add.w	r2, r5, #14
   17c42:	f105 010d 	add.w	r1, r5, #13
   17c46:	f002 f85d 	bl	19d04 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   17c4a:	7b6b      	ldrb	r3, [r5, #13]
   17c4c:	3302      	adds	r3, #2
   17c4e:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   17c50:	2206      	movs	r2, #6
   17c52:	f108 0102 	add.w	r1, r8, #2
   17c56:	f105 0014 	add.w	r0, r5, #20
   17c5a:	f7e8 fb31 	bl	2c0 <memcpy>
			pdu_adv->payload.connect_ind.lldata.interval;
   17c5e:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		radio_le_conn_cmplt->interval =
   17c62:	f8a5 3021 	strh.w	r3, [r5, #33]	; 0x21
			pdu_adv->payload.connect_ind.lldata.latency;
   17c66:	f8b8 301a 	ldrh.w	r3, [r8, #26]
		radio_le_conn_cmplt->latency =
   17c6a:	f8a5 3023 	strh.w	r3, [r5, #35]	; 0x23
			pdu_adv->payload.connect_ind.lldata.timeout;
   17c6e:	f8b8 301c 	ldrh.w	r3, [r8, #28]
		radio_le_conn_cmplt->timeout =
   17c72:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
			pdu_adv->payload.connect_ind.lldata.sca;
   17c76:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   17c7a:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   17c7e:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		rx_fc_lock(conn->handle);
   17c82:	8c20      	ldrh	r0, [r4, #32]
   17c84:	f7f9 fedc 	bl	11a40 <rx_fc_lock>
		packet_rx_enqueue();
   17c88:	f7fc fbc4 	bl	14414 <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   17c8c:	4b74      	ldr	r3, [pc, #464]	; (17e60 <isr_rx_adv+0x5f8>)
   17c8e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17c92:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17c96:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17c98:	429a      	cmp	r2, r3
   17c9a:	f0c0 8129 	bcc.w	17ef0 <isr_rx_adv+0x688>
			_radio.packet_rx_last);
   17c9e:	4b70      	ldr	r3, [pc, #448]	; (17e60 <isr_rx_adv+0x5f8>)
   17ca0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17ca4:	1ad3      	subs	r3, r2, r3
   17ca6:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17ca8:	2b02      	cmp	r3, #2
   17caa:	f240 812b 	bls.w	17f04 <isr_rx_adv+0x69c>
	return _radio.packet_rx[_radio.packet_rx_last];
   17cae:	4b6c      	ldr	r3, [pc, #432]	; (17e60 <isr_rx_adv+0x5f8>)
   17cb0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17cb4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   17cbc:	2b00      	cmp	r3, #0
   17cbe:	f000 8123 	beq.w	17f08 <isr_rx_adv+0x6a0>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   17cc2:	8c22      	ldrh	r2, [r4, #32]
   17cc4:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   17cc6:	220b      	movs	r2, #11
   17cc8:	711a      	strb	r2, [r3, #4]
			if (pdu_adv->chan_sel) {
   17cca:	f898 2000 	ldrb.w	r2, [r8]
   17cce:	f012 0f20 	tst.w	r2, #32
   17cd2:	f000 811f 	beq.w	17f14 <isr_rx_adv+0x6ac>
					((u16_t)conn->access_addr[1] << 8) |
   17cd6:	7c61      	ldrb	r1, [r4, #17]
					conn->access_addr[0];
   17cd8:	7c22      	ldrb	r2, [r4, #16]
				u16_t aa_ls =
   17cda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   17cde:	7ce0      	ldrb	r0, [r4, #19]
					 conn->access_addr[2];
   17ce0:	7ca1      	ldrb	r1, [r4, #18]
				u16_t aa_ms =
   17ce2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   17ce6:	7f60      	ldrb	r0, [r4, #29]
   17ce8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   17cec:	7760      	strb	r0, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   17cee:	404a      	eors	r2, r1
   17cf0:	83e2      	strh	r2, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   17cf2:	2201      	movs	r2, #1
   17cf4:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   17cf6:	f7fc fb8d 	bl	14414 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
   17cfa:	f898 2023 	ldrb.w	r2, [r8, #35]	; 0x23
   17cfe:	0952      	lsrs	r2, r2, #5
   17d00:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   17d04:	f362 0384 	bfi	r3, r2, #2, #3
   17d08:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   17d0c:	4d54      	ldr	r5, [pc, #336]	; (17e60 <isr_rx_adv+0x5f8>)
   17d0e:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
   17d12:	4956      	ldr	r1, [pc, #344]	; (17e6c <isr_rx_adv+0x604>)
   17d14:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			   gc_lookup_ppm[conn->slave.sca]) *
   17d18:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   17d1c:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   17d1e:	fb03 f306 	mul.w	r3, r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   17d22:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   17d26:	f203 233f 	addw	r3, r3, #575	; 0x23f
   17d2a:	4a51      	ldr	r2, [pc, #324]	; (17e70 <isr_rx_adv+0x608>)
   17d2c:	fba2 2303 	umull	r2, r3, r2, r3
   17d30:	0c9b      	lsrs	r3, r3, #18
		conn->slave.window_widening_periodic_us =
   17d32:	6563      	str	r3, [r4, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   17d34:	0873      	lsrs	r3, r6, #1
   17d36:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   17d38:	65a3      	str	r3, [r4, #88]	; 0x58
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
   17d3a:	f898 3015 	ldrb.w	r3, [r8, #21]
   17d3e:	f240 49e2 	movw	r9, #1250	; 0x4e2
   17d42:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   17d46:	66a3      	str	r3, [r4, #104]	; 0x68
		conn->slave.window_size_prepare_us = 0;
   17d48:	f04f 0b00 	mov.w	fp, #0
   17d4c:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0);
   17d50:	4658      	mov	r0, fp
   17d52:	f7f7 fd1b 	bl	f78c <radio_rx_ready_delay_get>
   17d56:	4682      	mov	sl, r0
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   17d58:	f200 4052 	addw	r0, r0, #1106	; 0x452
   17d5c:	a33e      	add	r3, pc, #248	; (adr r3, 17e58 <isr_rx_adv+0x5f0>)
   17d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   17d62:	4944      	ldr	r1, [pc, #272]	; (17e74 <isr_rx_adv+0x60c>)
   17d64:	fba0 0101 	umull	r0, r1, r0, r1
   17d68:	f7e9 f9c8 	bl	10fc <__aeabi_uldivmod>
   17d6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_slot =
   17d70:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   17d72:	f8d5 5180 	ldr.w	r5, [r5, #384]	; 0x180
   17d76:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
   17d78:	2327      	movs	r3, #39	; 0x27
   17d7a:	6023      	str	r3, [r4, #0]
		conn->hdr.ticks_preempt_to_start =
   17d7c:	f8c4 b008 	str.w	fp, [r4, #8]
		ticks_slot_offset =
   17d80:	429d      	cmp	r5, r3
   17d82:	bf38      	it	cc
   17d84:	461d      	movcc	r5, r3
			conn->slave.window_widening_periodic_us;
   17d86:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn_interval_us -=
   17d88:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
   17d8a:	f7f7 fee5 	bl	fb58 <radio_tmr_end_get>
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
   17d8e:	f8b8 2016 	ldrh.w	r2, [r8, #22]
   17d92:	b292      	uxth	r2, r2
		conn_offset_us +=
   17d94:	fb09 9902 	mla	r9, r9, r2, r9
   17d98:	4481      	add	r9, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   17d9a:	4659      	mov	r1, fp
   17d9c:	4658      	mov	r0, fp
   17d9e:	f7f7 fcf3 	bl	f788 <radio_tx_chain_delay_get>
   17da2:	eba9 0000 	sub.w	r0, r9, r0
		conn_offset_us -= rx_ready_delay;
   17da6:	eba0 0a0a 	sub.w	sl, r0, sl
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   17daa:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17dae:	f240 4372 	movw	r3, #1138	; 0x472
   17db2:	9300      	str	r3, [sp, #0]
   17db4:	4b30      	ldr	r3, [pc, #192]	; (17e78 <isr_rx_adv+0x610>)
   17db6:	2205      	movs	r2, #5
   17db8:	4659      	mov	r1, fp
   17dba:	4658      	mov	r0, fp
   17dbc:	f7f9 f850 	bl	10e60 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   17dc0:	f240 4173 	movw	r1, #1139	; 0x473
   17dc4:	f7f9 fe84 	bl	11ad0 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   17dc8:	79fb      	ldrb	r3, [r7, #7]
   17dca:	f003 030f 	and.w	r3, r3, #15
   17dce:	2b01      	cmp	r3, #1
   17dd0:	f000 80a3 	beq.w	17f1a <isr_rx_adv+0x6b2>
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
   17dd4:	8c23      	ldrh	r3, [r4, #32]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17dd6:	3307      	adds	r3, #7
   17dd8:	b2db      	uxtb	r3, r3
   17dda:	930b      	str	r3, [sp, #44]	; 0x2c
		     (_radio.ticks_anchor - ticks_slot_offset),
   17ddc:	4b20      	ldr	r3, [pc, #128]	; (17e60 <isr_rx_adv+0x5f8>)
   17dde:	685b      	ldr	r3, [r3, #4]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17de0:	eba3 0905 	sub.w	r9, r3, r5
		     TICKER_US_TO_TICKS(conn_offset_us),
   17de4:	f04f 0800 	mov.w	r8, #0
   17de8:	4f22      	ldr	r7, [pc, #136]	; (17e74 <isr_rx_adv+0x60c>)
   17dea:	a31b      	add	r3, pc, #108	; (adr r3, 17e58 <isr_rx_adv+0x5f0>)
   17dec:	e9d3 2300 	ldrd	r2, r3, [r3]
   17df0:	fbaa 0107 	umull	r0, r1, sl, r7
   17df4:	f7e9 f982 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17df8:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
		     TICKER_US_TO_TICKS(conn_interval_us),
   17dfc:	fba6 6707 	umull	r6, r7, r6, r7
   17e00:	a315      	add	r3, pc, #84	; (adr r3, 17e58 <isr_rx_adv+0x5f0>)
   17e02:	e9d3 2300 	ldrd	r2, r3, [r3]
   17e06:	4630      	mov	r0, r6
   17e08:	4639      	mov	r1, r7
   17e0a:	f7e9 f977 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17e0e:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   17e12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17e16:	2100      	movs	r1, #0
   17e18:	4a18      	ldr	r2, [pc, #96]	; (17e7c <isr_rx_adv+0x614>)
   17e1a:	2307      	movs	r3, #7
   17e1c:	fb03 f300 	mul.w	r3, r3, r0
   17e20:	fb02 3301 	mla	r3, r2, r1, r3
   17e24:	fba0 0102 	umull	r0, r1, r0, r2
   17e28:	4419      	add	r1, r3
   17e2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17e2e:	2300      	movs	r3, #0
   17e30:	1a30      	subs	r0, r6, r0
   17e32:	eb67 0101 	sbc.w	r1, r7, r1
   17e36:	f7e9 f961 	bl	10fc <__aeabi_uldivmod>
		     (ticks_slot_offset + conn->hdr.ticks_slot),
   17e3a:	68e3      	ldr	r3, [r4, #12]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17e3c:	442b      	add	r3, r5
   17e3e:	b29b      	uxth	r3, r3
   17e40:	f240 428a 	movw	r2, #1162	; 0x48a
   17e44:	9208      	str	r2, [sp, #32]
   17e46:	4a0e      	ldr	r2, [pc, #56]	; (17e80 <isr_rx_adv+0x618>)
   17e48:	9207      	str	r2, [sp, #28]
   17e4a:	9406      	str	r4, [sp, #24]
   17e4c:	4a0d      	ldr	r2, [pc, #52]	; (17e84 <isr_rx_adv+0x61c>)
   17e4e:	9205      	str	r2, [sp, #20]
   17e50:	e01a      	b.n	17e88 <isr_rx_adv+0x620>
   17e52:	bf00      	nop
   17e54:	f3af 8000 	nop.w
   17e58:	1afd498d 	.word	0x1afd498d
   17e5c:	00000007 	.word	0x00000007
   17e60:	20000ff4 	.word	0x20000ff4
   17e64:	026259ff 	.word	0x026259ff
   17e68:	01c9c37f 	.word	0x01c9c37f
   17e6c:	00031c50 	.word	0x00031c50
   17e70:	431bde83 	.word	0x431bde83
   17e74:	3b9aca00 	.word	0x3b9aca00
   17e78:	00011ad1 	.word	0x00011ad1
   17e7c:	1afd498d 	.word	0x1afd498d
   17e80:	00011a7d 	.word	0x00011a7d
   17e84:	00016635 	.word	0x00016635
   17e88:	9304      	str	r3, [sp, #16]
   17e8a:	f8cd 800c 	str.w	r8, [sp, #12]
   17e8e:	9002      	str	r0, [sp, #8]
   17e90:	f8cd b004 	str.w	fp, [sp, #4]
   17e94:	f8cd a000 	str.w	sl, [sp]
   17e98:	464b      	mov	r3, r9
   17e9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17e9c:	4641      	mov	r1, r8
   17e9e:	4640      	mov	r0, r8
   17ea0:	f7f8 ff42 	bl	10d28 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17ea4:	4603      	mov	r3, r0
   17ea6:	2800      	cmp	r0, #0
   17ea8:	f43f acff 	beq.w	178aa <isr_rx_adv+0x42>
   17eac:	2802      	cmp	r0, #2
   17eae:	d13d      	bne.n	17f2c <isr_rx_adv+0x6c4>
		return 0;
   17eb0:	2300      	movs	r3, #0
   17eb2:	e4fa      	b.n	178aa <isr_rx_adv+0x42>
		return (_radio.packet_rx_count -
   17eb4:	4923      	ldr	r1, [pc, #140]	; (17f44 <isr_rx_adv+0x6dc>)
   17eb6:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17eba:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17ebe:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   17ec0:	fa52 f383 	uxtab	r3, r2, r3
   17ec4:	b2db      	uxtb	r3, r3
   17ec6:	e62b      	b.n	17b20 <isr_rx_adv+0x2b8>
		return 0;
   17ec8:	2500      	movs	r5, #0
   17eca:	e633      	b.n	17b34 <isr_rx_adv+0x2cc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   17ecc:	2206      	movs	r2, #6
   17ece:	2100      	movs	r1, #0
   17ed0:	f105 0014 	add.w	r0, r5, #20
   17ed4:	f012 fd20 	bl	2a918 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   17ed8:	4641      	mov	r1, r8
   17eda:	f811 3b02 	ldrb.w	r3, [r1], #2
   17ede:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17ee2:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   17ee4:	2206      	movs	r2, #6
   17ee6:	f105 000e 	add.w	r0, r5, #14
   17eea:	f7e8 f9e9 	bl	2c0 <memcpy>
   17eee:	e6b6      	b.n	17c5e <isr_rx_adv+0x3f6>
		return (_radio.packet_rx_count -
   17ef0:	4914      	ldr	r1, [pc, #80]	; (17f44 <isr_rx_adv+0x6dc>)
   17ef2:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17ef6:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17efa:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   17efc:	fa52 f383 	uxtab	r3, r2, r3
   17f00:	b2db      	uxtb	r3, r3
   17f02:	e6d1      	b.n	17ca8 <isr_rx_adv+0x440>
		return 0;
   17f04:	2300      	movs	r3, #0
   17f06:	e6d9      	b.n	17cbc <isr_rx_adv+0x454>
			LL_ASSERT(radio_pdu_node_rx);
   17f08:	4040      	eors	r0, r0
   17f0a:	f380 8811 	msr	BASEPRI, r0
   17f0e:	f04f 0004 	mov.w	r0, #4
   17f12:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   17f14:	2200      	movs	r2, #0
   17f16:	72da      	strb	r2, [r3, #11]
   17f18:	e6ed      	b.n	17cf6 <isr_rx_adv+0x48e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17f1a:	4658      	mov	r0, fp
   17f1c:	f8cd b000 	str.w	fp, [sp]
   17f20:	465b      	mov	r3, fp
   17f22:	2203      	movs	r2, #3
   17f24:	4659      	mov	r1, fp
   17f26:	f7f8 ff9b 	bl	10e60 <ticker_stop>
   17f2a:	e753      	b.n	17dd4 <isr_rx_adv+0x56c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17f2c:	4040      	eors	r0, r0
   17f2e:	f380 8811 	msr	BASEPRI, r0
   17f32:	f04f 0004 	mov.w	r0, #4
   17f36:	df02      	svc	2
	return 1;
   17f38:	2301      	movs	r3, #1
   17f3a:	e4b6      	b.n	178aa <isr_rx_adv+0x42>
   17f3c:	2301      	movs	r3, #1
   17f3e:	e4b4      	b.n	178aa <isr_rx_adv+0x42>
			return 1;
   17f40:	2301      	movs	r3, #1
   17f42:	e4b2      	b.n	178aa <isr_rx_adv+0x42>
   17f44:	20000ff4 	.word	0x20000ff4

00017f48 <radio_init>:
{
   17f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f4c:	f89d e018 	ldrb.w	lr, [sp, #24]
   17f50:	f8bd c01c 	ldrh.w	ip, [sp, #28]
   17f54:	9d09      	ldr	r5, [sp, #36]	; 0x24
   17f56:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	_radio.hf_clock = hf_clock;
   17f5a:	4c3b      	ldr	r4, [pc, #236]	; (18048 <radio_init+0x100>)
   17f5c:	6020      	str	r0, [r4, #0]
	_radio.sca = sca;
   17f5e:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
	mem_radio_end = mem_radio + mem_size;
   17f62:	19a8      	adds	r0, r5, r6
	_radio.connection_count = connection_count_max;
   17f64:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
	_radio.conn_pool = mem_radio;
   17f68:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   17f6c:	f44f 71aa 	mov.w	r1, #340	; 0x154
   17f70:	fb01 5102 	mla	r1, r1, r2, r5
	rx_count_max += 3;
   17f74:	f103 0803 	add.w	r8, r3, #3
   17f78:	fa5f f888 	uxtb.w	r8, r8
	tx_count_max += 1;
   17f7c:	f10e 0701 	add.w	r7, lr, #1
   17f80:	b2ff      	uxtb	r7, r7
	_radio.packet_rx_count = (rx_count_max + 1);
   17f82:	3304      	adds	r3, #4
   17f84:	b2dd      	uxtb	r5, r3
   17f86:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
	_radio.packet_tx_count = (tx_count_max + 1);
   17f8a:	f10e 0e02 	add.w	lr, lr, #2
   17f8e:	fa5f fe8e 	uxtb.w	lr, lr
   17f92:	f884 e170 	strb.w	lr, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = rx_count_max;
   17f96:	f884 8150 	strb.w	r8, [r4, #336]	; 0x150
	_radio.packet_rx = (void *)mem_radio;
   17f9a:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
	mem_radio +=
   17f9e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
	_radio.pkt_tx = (void *)mem_radio;
   17fa2:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   17fa6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   17faa:	4471      	add	r1, lr
	_radio.pkt_release = (void *)mem_radio;
   17fac:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   17fb0:	4471      	add	r1, lr
	_radio.packet_data_octets_max = packet_data_octets_max;
   17fb2:	f8a4 c130 	strh.w	ip, [r4, #304]	; 0x130
	    (offsetof(struct pdu_data, payload) +
   17fb6:	f10c 0303 	add.w	r3, ip, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   17fba:	2b2a      	cmp	r3, #42	; 0x2a
   17fbc:	d931      	bls.n	18022 <radio_init+0xda>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   17fbe:	f10c 0c0e 	add.w	ip, ip, #14
		_radio.packet_rx_data_pool_size =
   17fc2:	f02c 0c03 	bic.w	ip, ip, #3
   17fc6:	fb1c f808 	smulbb	r8, ip, r8
   17fca:	f8a4 8132 	strh.w	r8, [r4, #306]	; 0x132
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   17fce:	4c1e      	ldr	r4, [pc, #120]	; (18048 <radio_init+0x100>)
   17fd0:	2334      	movs	r3, #52	; 0x34
   17fd2:	f8a4 3134 	strh.w	r3, [r4, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   17fd6:	f8b4 e132 	ldrh.w	lr, [r4, #306]	; 0x132
   17fda:	4b1c      	ldr	r3, [pc, #112]	; (1804c <radio_init+0x104>)
   17fdc:	fba3 c30e 	umull	ip, r3, r3, lr
   17fe0:	091b      	lsrs	r3, r3, #4
   17fe2:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
	_radio.pkt_rx_data_pool = mem_radio;
   17fe6:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
	mem_radio += _radio.packet_rx_data_pool_size;
   17fea:	4471      	add	r1, lr
	_radio.link_rx_pool = mem_radio;
   17fec:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   17ff0:	442a      	add	r2, r5
   17ff2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	_radio.pkt_tx_ctrl_pool = mem_radio;
   17ff6:	f8c4 2154 	str.w	r2, [r4, #340]	; 0x154
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   17ffa:	3248      	adds	r2, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   17ffc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   18000:	330a      	adds	r3, #10
   18002:	b29b      	uxth	r3, r3
   18004:	f023 0303 	bic.w	r3, r3, #3
   18008:	b29b      	uxth	r3, r3
	_radio.packet_tx_data_size =
   1800a:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
	_radio.pkt_tx_data_pool = mem_radio;
   1800e:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   18012:	fb03 2707 	mla	r7, r3, r7, r2
	if (retcode) {
   18016:	1a3f      	subs	r7, r7, r0
   18018:	d00d      	beq.n	18036 <radio_init+0xee>
		return (retcode + mem_size);
   1801a:	4437      	add	r7, r6
}
   1801c:	4638      	mov	r0, r7
   1801e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   18022:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   18026:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   1802a:	ea4f 0388 	mov.w	r3, r8, lsl #2
		_radio.packet_rx_data_pool_size =
   1802e:	4c06      	ldr	r4, [pc, #24]	; (18048 <radio_init+0x100>)
   18030:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
   18034:	e7cb      	b.n	17fce <radio_init+0x86>
	_radio.fc_ena = 1;
   18036:	2201      	movs	r2, #1
   18038:	4b03      	ldr	r3, [pc, #12]	; (18048 <radio_init+0x100>)
   1803a:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
	common_init();
   1803e:	f7ec ff23 	bl	4e88 <common_init>
	radio_setup();
   18042:	f7f7 faef 	bl	f624 <radio_setup>
	return retcode;
   18046:	e7e9      	b.n	1801c <radio_init+0xd4>
   18048:	20000ff4 	.word	0x20000ff4
   1804c:	4ec4ec4f 	.word	0x4ec4ec4f

00018050 <ll_reset>:
{
   18050:	b510      	push	{r4, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   18052:	2103      	movs	r1, #3
   18054:	2005      	movs	r0, #5
   18056:	f7f9 ff9b 	bl	11f90 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   1805a:	2104      	movs	r1, #4
   1805c:	2006      	movs	r0, #6
   1805e:	f7f9 ff97 	bl	11f90 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   18062:	2400      	movs	r4, #0
   18064:	e006      	b.n	18074 <ll_reset+0x24>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   18066:	1de0      	adds	r0, r4, #7
   18068:	21ff      	movs	r1, #255	; 0xff
   1806a:	b2c0      	uxtb	r0, r0
   1806c:	f7f9 ff90 	bl	11f90 <role_disable>
	     conn_handle++) {
   18070:	3401      	adds	r4, #1
   18072:	b2a4      	uxth	r4, r4
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   18074:	4b1d      	ldr	r3, [pc, #116]	; (180ec <ll_reset+0x9c>)
   18076:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   1807a:	429c      	cmp	r4, r3
   1807c:	d3f3      	bcc.n	18066 <ll_reset+0x16>
	_radio.advertiser.is_enabled = 0;
   1807e:	4b1b      	ldr	r3, [pc, #108]	; (180ec <ll_reset+0x9c>)
   18080:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18084:	f36f 0200 	bfc	r2, #0, #1
   18088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	_radio.advertiser.conn = NULL;
   1808c:	2000      	movs	r0, #0
   1808e:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
	_radio.scanner.is_enabled = 0;
   18092:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   18096:	f360 0200 	bfi	r2, r0, #0, #1
   1809a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	_radio.scanner.conn = NULL;
   1809e:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   180a2:	2234      	movs	r2, #52	; 0x34
   180a4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   180a8:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
   180ac:	4910      	ldr	r1, [pc, #64]	; (180f0 <ll_reset+0xa0>)
   180ae:	fba1 1202 	umull	r1, r2, r1, r2
   180b2:	0912      	lsrs	r2, r2, #4
   180b4:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	_radio.packet_rx_last = 0;
   180b8:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
	_radio.packet_rx_acquire = 0;
   180bc:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   180c0:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
   180c4:	3a01      	subs	r2, #1
   180c6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	_radio.packet_tx_first = 0;
   180ca:	f883 0171 	strb.w	r0, [r3, #369]	; 0x171
	_radio.packet_tx_last = 0;
   180ce:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
	_radio.packet_release_first = 0;
   180d2:	f883 0173 	strb.w	r0, [r3, #371]	; 0x173
	_radio.packet_release_last = 0;
   180d6:	f883 0174 	strb.w	r0, [r3, #372]	; 0x174
	_radio.fc_ack = _radio.fc_req;
   180da:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   180de:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	ll_filter_reset(false);
   180e2:	f002 fa69 	bl	1a5b8 <ll_filter_reset>
	common_init();
   180e6:	f7ec fecf 	bl	4e88 <common_init>
   180ea:	bd10      	pop	{r4, pc}
   180ec:	20000ff4 	.word	0x20000ff4
   180f0:	4ec4ec4f 	.word	0x4ec4ec4f

000180f4 <radio_adv_data_get>:
}
   180f4:	4800      	ldr	r0, [pc, #0]	; (180f8 <radio_adv_data_get+0x4>)
   180f6:	4770      	bx	lr
   180f8:	2000101b 	.word	0x2000101b

000180fc <radio_scan_data_get>:
}
   180fc:	4800      	ldr	r0, [pc, #0]	; (18100 <radio_scan_data_get+0x4>)
   180fe:	4770      	bx	lr
   18100:	2000106b 	.word	0x2000106b

00018104 <radio_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   18104:	4b02      	ldr	r3, [pc, #8]	; (18110 <radio_adv_is_enabled+0xc>)
   18106:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
}
   1810a:	f000 0001 	and.w	r0, r0, #1
   1810e:	4770      	bx	lr
   18110:	20000ff4 	.word	0x20000ff4

00018114 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   18114:	4b06      	ldr	r3, [pc, #24]	; (18130 <radio_adv_filter_pol_get+0x1c>)
   18116:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1811a:	f013 0f01 	tst.w	r3, #1
   1811e:	d004      	beq.n	1812a <radio_adv_filter_pol_get+0x16>
		return _radio.advertiser.filter_policy;
   18120:	4b03      	ldr	r3, [pc, #12]	; (18130 <radio_adv_filter_pol_get+0x1c>)
   18122:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   18126:	0980      	lsrs	r0, r0, #6
   18128:	4770      	bx	lr
	return 0;
   1812a:	2000      	movs	r0, #0
}
   1812c:	4770      	bx	lr
   1812e:	bf00      	nop
   18130:	20000ff4 	.word	0x20000ff4

00018134 <radio_scan_is_enabled>:
	return _radio.scanner.is_enabled;
   18134:	4b02      	ldr	r3, [pc, #8]	; (18140 <radio_scan_is_enabled+0xc>)
   18136:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
}
   1813a:	f000 0001 	and.w	r0, r0, #1
   1813e:	4770      	bx	lr
   18140:	20000ff4 	.word	0x20000ff4

00018144 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   18144:	4b06      	ldr	r3, [pc, #24]	; (18160 <radio_scan_filter_pol_get+0x1c>)
   18146:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   1814a:	f013 0f01 	tst.w	r3, #1
   1814e:	d005      	beq.n	1815c <radio_scan_filter_pol_get+0x18>
		return _radio.scanner.filter_policy;
   18150:	4b03      	ldr	r3, [pc, #12]	; (18160 <radio_scan_filter_pol_get+0x1c>)
   18152:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
   18156:	f3c0 1001 	ubfx	r0, r0, #4, #2
   1815a:	4770      	bx	lr
	return 0;
   1815c:	2000      	movs	r0, #0
}
   1815e:	4770      	bx	lr
   18160:	20000ff4 	.word	0x20000ff4
   18164:	00000000 	.word	0x00000000

00018168 <radio_connect_enable>:
{
   18168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1816c:	b083      	sub	sp, #12
	if (_radio.scanner.conn) {
   1816e:	4c94      	ldr	r4, [pc, #592]	; (183c0 <radio_connect_enable+0x258>)
   18170:	f8d4 40fc 	ldr.w	r4, [r4, #252]	; 0xfc
   18174:	b11c      	cbz	r4, 1817e <radio_connect_enable+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18176:	200c      	movs	r0, #12
}
   18178:	b003      	add	sp, #12
   1817a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1817e:	461f      	mov	r7, r3
   18180:	4616      	mov	r6, r2
   18182:	460d      	mov	r5, r1
   18184:	4604      	mov	r4, r0
	link = mem_acquire(&_radio.link_rx_free);
   18186:	488f      	ldr	r0, [pc, #572]	; (183c4 <radio_connect_enable+0x25c>)
   18188:	f7f7 f8ff 	bl	f38a <mem_acquire>
	if (!link) {
   1818c:	4681      	mov	r9, r0
   1818e:	2800      	cmp	r0, #0
   18190:	f000 810f 	beq.w	183b2 <radio_connect_enable+0x24a>
	conn = mem_acquire(&_radio.conn_free);
   18194:	488c      	ldr	r0, [pc, #560]	; (183c8 <radio_connect_enable+0x260>)
   18196:	f7f7 f8f8 	bl	f38a <mem_acquire>
   1819a:	9001      	str	r0, [sp, #4]
	if (!conn) {
   1819c:	2800      	cmp	r0, #0
   1819e:	f000 8102 	beq.w	183a6 <radio_connect_enable+0x23e>
	_radio.scanner.adv_addr_type = adv_addr_type;
   181a2:	f8df 821c 	ldr.w	r8, [pc, #540]	; 183c0 <radio_connect_enable+0x258>
   181a6:	f898 30dd 	ldrb.w	r3, [r8, #221]	; 0xdd
   181aa:	f364 1386 	bfi	r3, r4, #6, #1
   181ae:	f888 30dd 	strb.w	r3, [r8, #221]	; 0xdd
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   181b2:	2206      	movs	r2, #6
   181b4:	4629      	mov	r1, r5
   181b6:	f108 00e6 	add.w	r0, r8, #230	; 0xe6
   181ba:	f7e8 f881 	bl	2c0 <memcpy>
	_radio.scanner.conn_interval = interval;
   181be:	f8a8 60f0 	strh.w	r6, [r8, #240]	; 0xf0
	_radio.scanner.conn_latency = latency;
   181c2:	f8a8 70f2 	strh.w	r7, [r8, #242]	; 0xf2
	_radio.scanner.conn_timeout = timeout;
   181c6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   181ca:	f8a8 30f4 	strh.w	r3, [r8, #244]	; 0xf4
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   181ce:	2100      	movs	r1, #0
   181d0:	4608      	mov	r0, r1
   181d2:	f7f7 fad7 	bl	f784 <radio_tx_ready_delay_get>
   181d6:	f200 4052 	addw	r0, r0, #1106	; 0x452
   181da:	2400      	movs	r4, #0
   181dc:	a376      	add	r3, pc, #472	; (adr r3, 183b8 <radio_connect_enable+0x250>)
   181de:	e9d3 2300 	ldrd	r2, r3, [r3]
   181e2:	497a      	ldr	r1, [pc, #488]	; (183cc <radio_connect_enable+0x264>)
   181e4:	fba0 0101 	umull	r0, r1, r0, r1
   181e8:	f7e8 ff88 	bl	10fc <__aeabi_uldivmod>
   181ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_conn_slot =
   181f0:	f8c8 00f8 	str.w	r0, [r8, #248]	; 0xf8
	conn->handle = 0xFFFF;
   181f4:	9b01      	ldr	r3, [sp, #4]
   181f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   181fa:	841a      	strh	r2, [r3, #32]
	conn->llcp_features = RADIO_BLE_FEAT;
   181fc:	f502 4284 	add.w	r2, r2, #16896	; 0x4200
   18200:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	access_addr = access_addr_get();
   18204:	f7fe fe84 	bl	16f10 <access_addr_get>
   18208:	9000      	str	r0, [sp, #0]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   1820a:	2204      	movs	r2, #4
   1820c:	4669      	mov	r1, sp
   1820e:	9801      	ldr	r0, [sp, #4]
   18210:	3010      	adds	r0, #16
   18212:	f7e8 f855 	bl	2c0 <memcpy>
	memcpy(&conn->crc_init[0], &conn, 3);
   18216:	a902      	add	r1, sp, #8
   18218:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   1821c:	2203      	movs	r2, #3
   1821e:	3014      	adds	r0, #20
   18220:	f7e8 f84e 	bl	2c0 <memcpy>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   18224:	2205      	movs	r2, #5
   18226:	f508 718b 	add.w	r1, r8, #278	; 0x116
   1822a:	9801      	ldr	r0, [sp, #4]
   1822c:	3017      	adds	r0, #23
   1822e:	f7e8 f847 	bl	2c0 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   18232:	9b01      	ldr	r3, [sp, #4]
   18234:	f898 111b 	ldrb.w	r1, [r8, #283]	; 0x11b
   18238:	7f5a      	ldrb	r2, [r3, #29]
   1823a:	f361 0205 	bfi	r2, r1, #0, #6
	conn->data_chan_sel = 0;
   1823e:	f364 1286 	bfi	r2, r4, #6, #1
   18242:	775a      	strb	r2, [r3, #29]
	conn->data_chan_hop = 6;
   18244:	2506      	movs	r5, #6
   18246:	779d      	strb	r5, [r3, #30]
	conn->data_chan_use = 0;
   18248:	77dc      	strb	r4, [r3, #31]
	conn->event_counter = 0;
   1824a:	845c      	strh	r4, [r3, #34]	; 0x22
	conn->conn_interval = _radio.scanner.conn_interval;
   1824c:	f8b8 20f0 	ldrh.w	r2, [r8, #240]	; 0xf0
   18250:	849a      	strh	r2, [r3, #36]	; 0x24
	conn->latency_prepare = 0;
   18252:	851c      	strh	r4, [r3, #40]	; 0x28
	conn->latency_event = 0;
   18254:	855c      	strh	r4, [r3, #42]	; 0x2a
	conn->latency = _radio.scanner.conn_latency;
   18256:	f8b8 00f2 	ldrh.w	r0, [r8, #242]	; 0xf2
   1825a:	84d8      	strh	r0, [r3, #38]	; 0x26
	conn->default_tx_octets = _radio.default_tx_octets;
   1825c:	f8b8 211e 	ldrh.w	r2, [r8, #286]	; 0x11e
   18260:	859a      	strh	r2, [r3, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18262:	221b      	movs	r2, #27
   18264:	85da      	strh	r2, [r3, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18266:	861a      	strh	r2, [r3, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   18268:	f8b8 2120 	ldrh.w	r2, [r8, #288]	; 0x120
   1826c:	865a      	strh	r2, [r3, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1826e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18272:	869a      	strh	r2, [r3, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   18274:	86da      	strh	r2, [r3, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   18276:	f898 1122 	ldrb.w	r1, [r8, #290]	; 0x122
   1827a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1827e:	f361 0202 	bfi	r2, r1, #0, #3
	conn->phy_tx = BIT(0);
   18282:	2101      	movs	r1, #1
   18284:	f361 02c5 	bfi	r2, r1, #3, #3
	conn->phy_flags = 0;
   18288:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   1828c:	f364 12c7 	bfi	r2, r4, #7, #1
   18290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   18294:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   18298:	f361 0202 	bfi	r2, r1, #0, #3
   1829c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   182a0:	f898 6124 	ldrb.w	r6, [r8, #292]	; 0x124
   182a4:	b2d2      	uxtb	r2, r2
   182a6:	f366 02c5 	bfi	r2, r6, #3, #3
   182aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_rx = BIT(0);
   182ae:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   182b2:	f361 0202 	bfi	r2, r1, #0, #3
   182b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	conn->role = 0;
   182ba:	7f5a      	ldrb	r2, [r3, #29]
   182bc:	f364 12c7 	bfi	r2, r4, #7, #1
   182c0:	775a      	strb	r2, [r3, #29]
	conn->connect_expire = 6;
   182c2:	879d      	strh	r5, [r3, #60]	; 0x3c
	conn->common.fex_valid = 0;
   182c4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	conn->master.terminate_ack = 0;
   182c8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   182cc:	f364 0200 	bfi	r2, r4, #0, #1
   182d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		(u32_t)_radio.scanner.conn_interval * 1250;
   182d4:	f8b8 10f0 	ldrh.w	r1, [r8, #240]	; 0xf0
	conn_interval_us =
   182d8:	f240 42e2 	movw	r2, #1250	; 0x4e2
   182dc:	fb02 f101 	mul.w	r1, r2, r1
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   182e0:	f8b8 20f4 	ldrh.w	r2, [r8, #244]	; 0xf4
   182e4:	f242 7510 	movw	r5, #10000	; 0x2710
   182e8:	fb05 1202 	mla	r2, r5, r2, r1
   182ec:	3a01      	subs	r2, #1
   182ee:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->supervision_reload =
   182f2:	87da      	strh	r2, [r3, #62]	; 0x3e
	conn->supervision_expire = 0;
   182f4:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   182f8:	4a35      	ldr	r2, [pc, #212]	; (183d0 <radio_connect_enable+0x268>)
   182fa:	440a      	add	r2, r1
   182fc:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->procedure_reload =
   18300:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	conn->procedure_expire = 0;
   18304:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   18308:	4a32      	ldr	r2, [pc, #200]	; (183d4 <radio_connect_enable+0x26c>)
   1830a:	440a      	add	r2, r1
   1830c:	fbb2 f2f1 	udiv	r2, r2, r1
   18310:	b292      	uxth	r2, r2
   18312:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   18316:	1d81      	adds	r1, r0, #6
   18318:	428a      	cmp	r2, r1
   1831a:	dd03      	ble.n	18324 <radio_connect_enable+0x1bc>
			     (conn->apto_reload - (conn->latency + 6)) :
   1831c:	1a12      	subs	r2, r2, r0
   1831e:	b292      	uxth	r2, r2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   18320:	3a06      	subs	r2, #6
   18322:	b292      	uxth	r2, r2
   18324:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	conn->apto_expire = 0;
   18328:	2000      	movs	r0, #0
   1832a:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
	conn->appto_expire = 0;
   1832e:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
	conn->llcp_req = 0;
   18332:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
	conn->llcp_ack = 0;
   18336:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
	conn->llcp_version.tx = 0;
   1833a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_version.rx = 0;
   1833e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   18342:	f360 0241 	bfi	r2, r0, #1, #1
   18346:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_terminate.req = 0;
   1834a:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   1834e:	f883 00b1 	strb.w	r0, [r3, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   18352:	f883 00b3 	strb.w	r0, [r3, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   18356:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   1835a:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   1835e:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
	conn->llcp_length.req = 0;
   18362:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   18366:	f883 00e9 	strb.w	r0, [r3, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   1836a:	f883 00f4 	strb.w	r0, [r3, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   1836e:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
	conn->sn = 0;
   18372:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	conn->empty = 0;
   18376:	f002 0280 	and.w	r2, r2, #128	; 0x80
   1837a:	f360 12c7 	bfi	r2, r0, #7, #1
   1837e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   18382:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   18386:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   1838a:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   1838e:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   18392:	f8c3 014c 	str.w	r0, [r3, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   18396:	f883 0150 	strb.w	r0, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   1839a:	f883 0151 	strb.w	r0, [r3, #337]	; 0x151
	_radio.scanner.conn = conn;
   1839e:	4a08      	ldr	r2, [pc, #32]	; (183c0 <radio_connect_enable+0x258>)
   183a0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
	return 0;
   183a4:	e6e8      	b.n	18178 <radio_connect_enable+0x10>
		mem_release(link, &_radio.link_rx_free);
   183a6:	4907      	ldr	r1, [pc, #28]	; (183c4 <radio_connect_enable+0x25c>)
   183a8:	4648      	mov	r0, r9
   183aa:	f7f7 f80a 	bl	f3c2 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   183ae:	2007      	movs	r0, #7
   183b0:	e6e2      	b.n	18178 <radio_connect_enable+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   183b2:	2007      	movs	r0, #7
   183b4:	e6e0      	b.n	18178 <radio_connect_enable+0x10>
   183b6:	bf00      	nop
   183b8:	1afd498d 	.word	0x1afd498d
   183bc:	00000007 	.word	0x00000007
   183c0:	20000ff4 	.word	0x20000ff4
   183c4:	20001138 	.word	0x20001138
   183c8:	200010fc 	.word	0x200010fc
   183cc:	3b9aca00 	.word	0x3b9aca00
   183d0:	026259ff 	.word	0x026259ff
   183d4:	01c9c37f 	.word	0x01c9c37f

000183d8 <ll_conn_update>:
{
   183d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183dc:	460c      	mov	r4, r1
   183de:	4690      	mov	r8, r2
   183e0:	461f      	mov	r7, r3
   183e2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   183e6:	f8bd 501c 	ldrh.w	r5, [sp, #28]
	conn = connection_get(handle);
   183ea:	f7f9 fdb3 	bl	11f54 <connection_get>
	if (!conn) {
   183ee:	2800      	cmp	r0, #0
   183f0:	d078      	beq.n	184e4 <ll_conn_update+0x10c>
   183f2:	4603      	mov	r3, r0
	if (!cmd) {
   183f4:	b984      	cbnz	r4, 18418 <ll_conn_update+0x40>
		if (conn->common.fex_valid &&
   183f6:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   183fa:	f012 0f20 	tst.w	r2, #32
   183fe:	d007      	beq.n	18410 <ll_conn_update+0x38>
		    (conn->llcp_features &
   18400:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
		if (conn->common.fex_valid &&
   18404:	f012 0f02 	tst.w	r2, #2
   18408:	d002      	beq.n	18410 <ll_conn_update+0x38>
			cmd++;
   1840a:	3401      	adds	r4, #1
   1840c:	b2e4      	uxtb	r4, r4
   1840e:	e003      	b.n	18418 <ll_conn_update+0x40>
		} else if (conn->role) {
   18410:	f993 201d 	ldrsb.w	r2, [r3, #29]
   18414:	2a00      	cmp	r2, #0
   18416:	db68      	blt.n	184ea <ll_conn_update+0x112>
	if (!cmd) {
   18418:	bb1c      	cbnz	r4, 18462 <ll_conn_update+0x8a>
		if (conn->llcp_req != conn->llcp_ack) {
   1841a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   1841e:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
   18422:	428a      	cmp	r2, r1
   18424:	d002      	beq.n	1842c <ll_conn_update+0x54>
			return 1;
   18426:	2001      	movs	r0, #1
   18428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->llcp.conn_upd.win_size = 1;
   1842c:	2401      	movs	r4, #1
   1842e:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   18432:	2000      	movs	r0, #0
   18434:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = interval;
   18438:	f8a3 707a 	strh.w	r7, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = latency;
   1843c:	f8a3 607c 	strh.w	r6, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   18440:	f8a3 507e 	strh.w	r5, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   18444:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   18448:	f364 0101 	bfi	r1, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   1844c:	f360 0182 	bfi	r1, r0, #2, #1
   18450:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   18454:	f883 4076 	strb.w	r4, [r3, #118]	; 0x76
		conn->llcp_req++;
   18458:	4422      	add	r2, r4
   1845a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   1845e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cmd--;
   18462:	3c01      	subs	r4, #1
		if (cmd) {
   18464:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   18468:	d01c      	beq.n	184a4 <ll_conn_update+0xcc>
			if ((conn->llcp_conn_param.req ==
   1846a:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
			     conn->llcp_conn_param.ack) ||
   1846e:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
			if ((conn->llcp_conn_param.req ==
   18472:	4291      	cmp	r1, r2
   18474:	d03c      	beq.n	184f0 <ll_conn_update+0x118>
			    (conn->llcp_conn_param.state !=
   18476:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   1847a:	f002 0207 	and.w	r2, r2, #7
			     conn->llcp_conn_param.ack) ||
   1847e:	2a03      	cmp	r2, #3
   18480:	d002      	beq.n	18488 <ll_conn_update+0xb0>
				return 1;
   18482:	2001      	movs	r0, #1
   18484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = status;
   18488:	f883 80c3 	strb.w	r8, [r3, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   1848c:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   18490:	f364 0202 	bfi	r2, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   18494:	b2d2      	uxtb	r2, r2
   18496:	f042 0208 	orr.w	r2, r2, #8
   1849a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	return 0;
   1849e:	2000      	movs	r0, #0
   184a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (conn->llcp_conn_param.req !=
   184a4:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
			    conn->llcp_conn_param.ack) {
   184a8:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			if (conn->llcp_conn_param.req !=
   184ac:	428a      	cmp	r2, r1
   184ae:	d002      	beq.n	184b6 <ll_conn_update+0xde>
				return 1;
   184b0:	2001      	movs	r0, #1
}
   184b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = 0;
   184b6:	2000      	movs	r0, #0
   184b8:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
			conn->llcp_conn_param.interval = interval;
   184bc:	f8a3 70c4 	strh.w	r7, [r3, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   184c0:	f8a3 60c6 	strh.w	r6, [r3, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   184c4:	f8a3 50c8 	strh.w	r5, [r3, #200]	; 0xc8
			conn->llcp_conn_param.state = cmd;
   184c8:	f893 10c2 	ldrb.w	r1, [r3, #194]	; 0xc2
   184cc:	f364 0102 	bfi	r1, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   184d0:	b2c9      	uxtb	r1, r1
   184d2:	f041 0108 	orr.w	r1, r1, #8
   184d6:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   184da:	3201      	adds	r2, #1
   184dc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
   184e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
   184e4:	2001      	movs	r0, #1
   184e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return 1;
   184ea:	2001      	movs	r0, #1
   184ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return 1;
   184f0:	2001      	movs	r0, #1
   184f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000184f8 <ll_chm_update>:
{
   184f8:	b570      	push	{r4, r5, r6, lr}
   184fa:	4606      	mov	r6, r0
	memcpy(&_radio.data_chan_map[0], chm,
   184fc:	4c1c      	ldr	r4, [pc, #112]	; (18570 <ll_chm_update+0x78>)
   184fe:	f504 758b 	add.w	r5, r4, #278	; 0x116
   18502:	2205      	movs	r2, #5
   18504:	4601      	mov	r1, r0
   18506:	4628      	mov	r0, r5
   18508:	f7e7 feda 	bl	2c0 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   1850c:	2105      	movs	r1, #5
   1850e:	4628      	mov	r0, r5
   18510:	f7f6 ffbf 	bl	f492 <util_ones_count_get>
	_radio.data_chan_count =
   18514:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	instance = _radio.connection_count;
   18518:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
	while (instance--) {
   1851c:	e000      	b.n	18520 <ll_chm_update+0x28>
{
   1851e:	462b      	mov	r3, r5
	while (instance--) {
   18520:	1e5d      	subs	r5, r3, #1
   18522:	b2ed      	uxtb	r5, r5
   18524:	b303      	cbz	r3, 18568 <ll_chm_update+0x70>
		conn = connection_get(instance);
   18526:	4628      	mov	r0, r5
   18528:	f7f9 fd14 	bl	11f54 <connection_get>
		if (!conn || conn->role) {
   1852c:	4604      	mov	r4, r0
   1852e:	2800      	cmp	r0, #0
   18530:	d0f5      	beq.n	1851e <ll_chm_update+0x26>
   18532:	f990 301d 	ldrsb.w	r3, [r0, #29]
   18536:	2b00      	cmp	r3, #0
   18538:	dbf1      	blt.n	1851e <ll_chm_update+0x26>
		if (conn->llcp_req != conn->llcp_ack) {
   1853a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1853e:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   18542:	429a      	cmp	r2, r3
   18544:	d112      	bne.n	1856c <ll_chm_update+0x74>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   18546:	2205      	movs	r2, #5
   18548:	4631      	mov	r1, r6
   1854a:	3079      	adds	r0, #121	; 0x79
   1854c:	f7e7 feb8 	bl	2c0 <memcpy>
		conn->llcp.chan_map.initiate = 1;
   18550:	2301      	movs	r3, #1
   18552:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CHAN_MAP;
   18556:	2302      	movs	r3, #2
   18558:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_req++;
   1855c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   18560:	3301      	adds	r3, #1
   18562:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   18566:	e7da      	b.n	1851e <ll_chm_update+0x26>
	return 0;
   18568:	2000      	movs	r0, #0
   1856a:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   1856c:	2001      	movs	r0, #1
}
   1856e:	bd70      	pop	{r4, r5, r6, pc}
   18570:	20000ff4 	.word	0x20000ff4

00018574 <ll_chm_get>:
{
   18574:	b538      	push	{r3, r4, r5, lr}
   18576:	460d      	mov	r5, r1
	conn = connection_get(handle);
   18578:	f7f9 fcec 	bl	11f54 <connection_get>
	if (!conn) {
   1857c:	4604      	mov	r4, r0
   1857e:	b160      	cbz	r0, 1859a <ll_chm_get+0x26>
		conn->chm_update = 0;
   18580:	2300      	movs	r3, #0
   18582:	7723      	strb	r3, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   18584:	2205      	movs	r2, #5
   18586:	f104 0117 	add.w	r1, r4, #23
   1858a:	4628      	mov	r0, r5
   1858c:	f7e7 fe98 	bl	2c0 <memcpy>
	} while (conn->chm_update);
   18590:	7f23      	ldrb	r3, [r4, #28]
   18592:	2b00      	cmp	r3, #0
   18594:	d1f4      	bne.n	18580 <ll_chm_get+0xc>
	return 0;
   18596:	2000      	movs	r0, #0
   18598:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   1859a:	2001      	movs	r0, #1
}
   1859c:	bd38      	pop	{r3, r4, r5, pc}

0001859e <ll_start_enc_req_send>:
{
   1859e:	b570      	push	{r4, r5, r6, lr}
   185a0:	460d      	mov	r5, r1
   185a2:	4616      	mov	r6, r2
	conn = connection_get(handle);
   185a4:	f7f9 fcd6 	bl	11f54 <connection_get>
	if (!conn) {
   185a8:	2800      	cmp	r0, #0
   185aa:	d03e      	beq.n	1862a <ll_start_enc_req_send+0x8c>
   185ac:	4604      	mov	r4, r0
	if (error_code) {
   185ae:	b32d      	cbz	r5, 185fc <ll_start_enc_req_send+0x5e>
		if (conn->refresh == 0) {
   185b0:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   185b4:	f013 0f40 	tst.w	r3, #64	; 0x40
   185b8:	d111      	bne.n	185de <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   185ba:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   185be:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   185c2:	4293      	cmp	r3, r2
   185c4:	d001      	beq.n	185ca <ll_start_enc_req_send+0x2c>
				return 1;
   185c6:	2001      	movs	r0, #1
   185c8:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp.encryption.error_code = error_code;
   185ca:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
			conn->llcp_type = LLCP_ENCRYPTION;
   185ce:	2203      	movs	r2, #3
   185d0:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
			conn->llcp_req++;
   185d4:	3301      	adds	r3, #1
   185d6:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   185da:	2000      	movs	r0, #0
   185dc:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   185de:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
			    conn->llcp_terminate.req) {
   185e2:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
			if (conn->llcp_terminate.ack !=
   185e6:	429a      	cmp	r2, r3
   185e8:	d001      	beq.n	185ee <ll_start_enc_req_send+0x50>
				return 1;
   185ea:	2001      	movs	r0, #1
   185ec:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_own = error_code;
   185ee:	f880 50b2 	strb.w	r5, [r0, #178]	; 0xb2
			conn->llcp_terminate.req++;
   185f2:	3301      	adds	r3, #1
   185f4:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   185f8:	2000      	movs	r0, #0
   185fa:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   185fc:	2210      	movs	r2, #16
   185fe:	4631      	mov	r1, r6
   18600:	3083      	adds	r0, #131	; 0x83
   18602:	f7e7 fe5d 	bl	2c0 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   18606:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1860a:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   1860e:	4293      	cmp	r3, r2
   18610:	d001      	beq.n	18616 <ll_start_enc_req_send+0x78>
			return 1;
   18612:	2001      	movs	r0, #1
}
   18614:	bd70      	pop	{r4, r5, r6, pc}
		conn->llcp.encryption.error_code = 0;
   18616:	2000      	movs	r0, #0
   18618:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   1861c:	2203      	movs	r2, #3
   1861e:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   18622:	3301      	adds	r3, #1
   18624:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   18628:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   1862a:	2001      	movs	r0, #1
   1862c:	bd70      	pop	{r4, r5, r6, pc}

0001862e <ll_feature_req_send>:
{
   1862e:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   18630:	f7f9 fc90 	bl	11f54 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   18634:	b178      	cbz	r0, 18656 <ll_feature_req_send+0x28>
   18636:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1863a:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   1863e:	428a      	cmp	r2, r1
   18640:	d001      	beq.n	18646 <ll_feature_req_send+0x18>
		return 1;
   18642:	2001      	movs	r0, #1
}
   18644:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   18646:	2104      	movs	r1, #4
   18648:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   1864c:	3201      	adds	r2, #1
   1864e:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   18652:	2000      	movs	r0, #0
   18654:	bd08      	pop	{r3, pc}
		return 1;
   18656:	2001      	movs	r0, #1
   18658:	bd08      	pop	{r3, pc}

0001865a <ll_version_ind_send>:
{
   1865a:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   1865c:	f7f9 fc7a 	bl	11f54 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   18660:	b178      	cbz	r0, 18682 <ll_version_ind_send+0x28>
   18662:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   18666:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   1866a:	428a      	cmp	r2, r1
   1866c:	d001      	beq.n	18672 <ll_version_ind_send+0x18>
		return 1;
   1866e:	2001      	movs	r0, #1
}
   18670:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   18672:	2105      	movs	r1, #5
   18674:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   18678:	3201      	adds	r2, #1
   1867a:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   1867e:	2000      	movs	r0, #0
   18680:	bd08      	pop	{r3, pc}
		return 1;
   18682:	2001      	movs	r0, #1
   18684:	bd08      	pop	{r3, pc}

00018686 <ll_terminate_ind_send>:
{
   18686:	b510      	push	{r4, lr}
   18688:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1868a:	f7f9 fc63 	bl	11f54 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   1868e:	b170      	cbz	r0, 186ae <ll_terminate_ind_send+0x28>
   18690:	f890 10b1 	ldrb.w	r1, [r0, #177]	; 0xb1
   18694:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
   18698:	4291      	cmp	r1, r2
   1869a:	d001      	beq.n	186a0 <ll_terminate_ind_send+0x1a>
		return 1;
   1869c:	2001      	movs	r0, #1
}
   1869e:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.reason_own = reason;
   186a0:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   186a4:	3201      	adds	r2, #1
   186a6:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	return 0;
   186aa:	2000      	movs	r0, #0
   186ac:	bd10      	pop	{r4, pc}
		return 1;
   186ae:	2001      	movs	r0, #1
   186b0:	bd10      	pop	{r4, pc}

000186b2 <ll_tx_power_level_get>:
{
   186b2:	b510      	push	{r4, lr}
   186b4:	4614      	mov	r4, r2
	conn = connection_get(handle);
   186b6:	f7f9 fc4d 	bl	11f54 <connection_get>
	if (!conn) {
   186ba:	b110      	cbz	r0, 186c2 <ll_tx_power_level_get+0x10>
	*tx_power_level = 0;
   186bc:	2000      	movs	r0, #0
   186be:	7020      	strb	r0, [r4, #0]
	return 0;
   186c0:	bd10      	pop	{r4, pc}
		return 1;
   186c2:	2001      	movs	r0, #1
}
   186c4:	bd10      	pop	{r4, pc}

000186c6 <ll_tx_power_get>:
	*min = 0;
   186c6:	2300      	movs	r3, #0
   186c8:	7003      	strb	r3, [r0, #0]
	*max = 0;
   186ca:	700b      	strb	r3, [r1, #0]
   186cc:	4770      	bx	lr
	...

000186d0 <ll_apto_get>:
{
   186d0:	b510      	push	{r4, lr}
   186d2:	460c      	mov	r4, r1
	conn = connection_get(handle);
   186d4:	f7f9 fc3e 	bl	11f54 <connection_get>
	if (!conn) {
   186d8:	b188      	cbz	r0, 186fe <ll_apto_get+0x2e>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   186da:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   186de:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   186e0:	fb03 f301 	mul.w	r3, r3, r1
   186e4:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   186e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   186ec:	4a05      	ldr	r2, [pc, #20]	; (18704 <ll_apto_get+0x34>)
   186ee:	fb82 1203 	smull	r1, r2, r2, r3
   186f2:	17db      	asrs	r3, r3, #31
   186f4:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   186f8:	8023      	strh	r3, [r4, #0]
	return 0;
   186fa:	2000      	movs	r0, #0
   186fc:	bd10      	pop	{r4, pc}
		return 1;
   186fe:	2001      	movs	r0, #1
}
   18700:	bd10      	pop	{r4, pc}
   18702:	bf00      	nop
   18704:	10624dd3 	.word	0x10624dd3

00018708 <ll_apto_set>:
{
   18708:	b510      	push	{r4, lr}
   1870a:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1870c:	f7f9 fc22 	bl	11f54 <connection_get>
	if (!conn) {
   18710:	b178      	cbz	r0, 18732 <ll_apto_set+0x2a>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   18712:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   18714:	f240 43e2 	movw	r3, #1250	; 0x4e2
   18718:	fb03 f301 	mul.w	r3, r3, r1
   1871c:	f242 7110 	movw	r1, #10000	; 0x2710
   18720:	fb01 3404 	mla	r4, r1, r4, r3
   18724:	3c01      	subs	r4, #1
   18726:	fb94 f4f3 	sdiv	r4, r4, r3
   1872a:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   1872e:	2000      	movs	r0, #0
   18730:	bd10      	pop	{r4, pc}
		return 1;
   18732:	2001      	movs	r0, #1
}
   18734:	bd10      	pop	{r4, pc}

00018736 <ll_length_req_send>:
{
   18736:	b538      	push	{r3, r4, r5, lr}
   18738:	460d      	mov	r5, r1
   1873a:	4614      	mov	r4, r2
	conn = connection_get(handle);
   1873c:	f7f9 fc0a 	bl	11f54 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   18740:	b1f0      	cbz	r0, 18780 <ll_length_req_send+0x4a>
   18742:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   18746:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   1874a:	4291      	cmp	r1, r2
   1874c:	d001      	beq.n	18752 <ll_length_req_send+0x1c>
		return 1;
   1874e:	2001      	movs	r0, #1
   18750:	bd38      	pop	{r3, r4, r5, pc}
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   18752:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   18756:	f890 10e9 	ldrb.w	r1, [r0, #233]	; 0xe9
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1875a:	428a      	cmp	r2, r1
   1875c:	d001      	beq.n	18762 <ll_length_req_send+0x2c>
		return 1;
   1875e:	2001      	movs	r0, #1
}
   18760:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   18762:	f890 10ea 	ldrb.w	r1, [r0, #234]	; 0xea
   18766:	f36f 0101 	bfc	r1, #0, #2
   1876a:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   1876e:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
	conn->llcp_length.tx_time = tx_time;
   18772:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
	conn->llcp_length.req++;
   18776:	3201      	adds	r2, #1
   18778:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
	return 0;
   1877c:	2000      	movs	r0, #0
   1877e:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   18780:	2001      	movs	r0, #1
   18782:	bd38      	pop	{r3, r4, r5, pc}

00018784 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   18784:	4b03      	ldr	r3, [pc, #12]	; (18794 <ll_length_default_get+0x10>)
   18786:	f8b3 211e 	ldrh.w	r2, [r3, #286]	; 0x11e
   1878a:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   1878c:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
   18790:	800b      	strh	r3, [r1, #0]
   18792:	4770      	bx	lr
   18794:	20000ff4 	.word	0x20000ff4

00018798 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   18798:	4b03      	ldr	r3, [pc, #12]	; (187a8 <ll_length_default_set+0x10>)
   1879a:	f8a3 011e 	strh.w	r0, [r3, #286]	; 0x11e
	_radio.default_tx_time = max_tx_time;
   1879e:	f8a3 1120 	strh.w	r1, [r3, #288]	; 0x120
}
   187a2:	2000      	movs	r0, #0
   187a4:	4770      	bx	lr
   187a6:	bf00      	nop
   187a8:	20000ff4 	.word	0x20000ff4

000187ac <ll_length_max_get>:
{
   187ac:	b410      	push	{r4}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   187ae:	241b      	movs	r4, #27
   187b0:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   187b2:	f44f 70a4 	mov.w	r0, #328	; 0x148
   187b6:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   187b8:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   187ba:	8018      	strh	r0, [r3, #0]
}
   187bc:	bc10      	pop	{r4}
   187be:	4770      	bx	lr

000187c0 <ll_phy_get>:
{
   187c0:	b538      	push	{r3, r4, r5, lr}
   187c2:	460d      	mov	r5, r1
   187c4:	4614      	mov	r4, r2
	conn = connection_get(handle);
   187c6:	f7f9 fbc5 	bl	11f54 <connection_get>
	if (!conn) {
   187ca:	b158      	cbz	r0, 187e4 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   187cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   187d0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   187d4:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   187d6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   187da:	f3c3 0302 	ubfx	r3, r3, #0, #3
   187de:	7023      	strb	r3, [r4, #0]
	return 0;
   187e0:	2000      	movs	r0, #0
   187e2:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   187e4:	2001      	movs	r0, #1
}
   187e6:	bd38      	pop	{r3, r4, r5, pc}

000187e8 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   187e8:	4b03      	ldr	r3, [pc, #12]	; (187f8 <ll_phy_default_set+0x10>)
   187ea:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_phy_rx = rx;
   187ee:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   187f2:	2000      	movs	r0, #0
   187f4:	4770      	bx	lr
   187f6:	bf00      	nop
   187f8:	20000ff4 	.word	0x20000ff4

000187fc <ll_phy_req_send>:
{
   187fc:	b570      	push	{r4, r5, r6, lr}
   187fe:	460e      	mov	r6, r1
   18800:	4615      	mov	r5, r2
   18802:	461c      	mov	r4, r3
	conn = connection_get(handle);
   18804:	f7f9 fba6 	bl	11f54 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   18808:	b338      	cbz	r0, 1885a <ll_phy_req_send+0x5e>
   1880a:	4603      	mov	r3, r0
   1880c:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   18810:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   18814:	4291      	cmp	r1, r2
   18816:	d001      	beq.n	1881c <ll_phy_req_send+0x20>
		return 1;
   18818:	2001      	movs	r0, #1
   1881a:	bd70      	pop	{r4, r5, r6, pc}
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   1881c:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
   18820:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   18824:	428a      	cmp	r2, r1
   18826:	d001      	beq.n	1882c <ll_phy_req_send+0x30>
		return 1;
   18828:	2001      	movs	r0, #1
}
   1882a:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1882c:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   18830:	f890 00f7 	ldrb.w	r0, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   18834:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   18838:	f366 0184 	bfi	r1, r6, #2, #3
	conn->llcp_phy.flags = flags;
   1883c:	f040 0002 	orr.w	r0, r0, #2
   18840:	f365 0000 	bfi	r0, r5, #0, #1
   18844:	f883 00f7 	strb.w	r0, [r3, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   18848:	f364 1147 	bfi	r1, r4, #5, #3
   1884c:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
	conn->llcp_phy.req++;
   18850:	3201      	adds	r2, #1
   18852:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	return 0;
   18856:	2000      	movs	r0, #0
   18858:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   1885a:	2001      	movs	r0, #1
   1885c:	bd70      	pop	{r4, r5, r6, pc}
	...

00018860 <radio_rx_get>:
{
   18860:	b5f0      	push	{r4, r5, r6, r7, lr}
   18862:	b083      	sub	sp, #12
   18864:	4606      	mov	r6, r0
   18866:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   18868:	4b1b      	ldr	r3, [pc, #108]	; (188d8 <radio_rx_get+0x78>)
   1886a:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   1886e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   18872:	429a      	cmp	r2, r3
   18874:	d024      	beq.n	188c0 <radio_rx_get+0x60>
		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   18876:	6857      	ldr	r7, [r2, #4]
		cmplt = tx_cmplt_get(handle,
   18878:	783a      	ldrb	r2, [r7, #0]
   1887a:	4918      	ldr	r1, [pc, #96]	; (188dc <radio_rx_get+0x7c>)
   1887c:	f7f9 fb0c 	bl	11e98 <tx_cmplt_get>
		if (!cmplt) {
   18880:	4605      	mov	r5, r0
   18882:	b9d0      	cbnz	r0, 188ba <radio_rx_get+0x5a>
			first = _radio.packet_release_first;
   18884:	4b14      	ldr	r3, [pc, #80]	; (188d8 <radio_rx_get+0x78>)
   18886:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
   1888a:	f88d 3005 	strb.w	r3, [sp, #5]
			cmplt_curr = 0;
   1888e:	4604      	mov	r4, r0
   18890:	e000      	b.n	18894 <radio_rx_get+0x34>
   18892:	4604      	mov	r4, r0
				cmplt_curr = tx_cmplt_get(&handle, &first,
   18894:	4b10      	ldr	r3, [pc, #64]	; (188d8 <radio_rx_get+0x78>)
   18896:	f893 2174 	ldrb.w	r2, [r3, #372]	; 0x174
   1889a:	f10d 0105 	add.w	r1, sp, #5
   1889e:	f10d 0006 	add.w	r0, sp, #6
   188a2:	f7f9 faf9 	bl	11e98 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   188a6:	2c00      	cmp	r4, #0
   188a8:	d1f3      	bne.n	18892 <radio_rx_get+0x32>
			} while ((cmplt_prev != 0) ||
   188aa:	4284      	cmp	r4, r0
   188ac:	d001      	beq.n	188b2 <radio_rx_get+0x52>
   188ae:	4604      	mov	r4, r0
   188b0:	e7f0      	b.n	18894 <radio_rx_get+0x34>
			*radio_pdu_node_rx = _radio_pdu_node_rx;
   188b2:	6037      	str	r7, [r6, #0]
}
   188b4:	4628      	mov	r0, r5
   188b6:	b003      	add	sp, #12
   188b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*radio_pdu_node_rx = NULL;
   188ba:	2300      	movs	r3, #0
   188bc:	6033      	str	r3, [r6, #0]
   188be:	e7f9      	b.n	188b4 <radio_rx_get+0x54>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   188c0:	4905      	ldr	r1, [pc, #20]	; (188d8 <radio_rx_get+0x78>)
   188c2:	f891 2174 	ldrb.w	r2, [r1, #372]	; 0x174
   188c6:	f201 1173 	addw	r1, r1, #371	; 0x173
   188ca:	f7f9 fae5 	bl	11e98 <tx_cmplt_get>
   188ce:	4605      	mov	r5, r0
		*radio_pdu_node_rx = NULL;
   188d0:	2300      	movs	r3, #0
   188d2:	6033      	str	r3, [r6, #0]
   188d4:	e7ee      	b.n	188b4 <radio_rx_get+0x54>
   188d6:	bf00      	nop
   188d8:	20000ff4 	.word	0x20000ff4
   188dc:	20001167 	.word	0x20001167

000188e0 <radio_rx_mem_release>:
{
   188e0:	b570      	push	{r4, r5, r6, lr}
   188e2:	4606      	mov	r6, r0
	_radio_pdu_node_rx = *radio_pdu_node_rx;
   188e4:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
   188e6:	e003      	b.n	188f0 <radio_rx_mem_release+0x10>
			mem_release(_radio_pdu_node_rx_free,
   188e8:	491e      	ldr	r1, [pc, #120]	; (18964 <radio_rx_mem_release+0x84>)
   188ea:	f7f6 fd6a 	bl	f3c2 <mem_release>
{
   188ee:	4620      	mov	r0, r4
	while (_radio_pdu_node_rx) {
   188f0:	b398      	cbz	r0, 1895a <radio_rx_mem_release+0x7a>
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
   188f2:	6804      	ldr	r4, [r0, #0]
		switch (_radio_pdu_node_rx_free->hdr.type) {
   188f4:	7903      	ldrb	r3, [r0, #4]
   188f6:	3b01      	subs	r3, #1
   188f8:	2b0b      	cmp	r3, #11
   188fa:	d828      	bhi.n	1894e <radio_rx_mem_release+0x6e>
   188fc:	a201      	add	r2, pc, #4	; (adr r2, 18904 <radio_rx_mem_release+0x24>)
   188fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18902:	bf00      	nop
   18904:	000188e9 	.word	0x000188e9
   18908:	000188e9 	.word	0x000188e9
   1890c:	000188e9 	.word	0x000188e9
   18910:	000188e9 	.word	0x000188e9
   18914:	000188e9 	.word	0x000188e9
   18918:	000188e9 	.word	0x000188e9
   1891c:	00018935 	.word	0x00018935
   18920:	000188e9 	.word	0x000188e9
   18924:	000188e9 	.word	0x000188e9
   18928:	000188e9 	.word	0x000188e9
   1892c:	000188e9 	.word	0x000188e9
   18930:	000188e9 	.word	0x000188e9
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   18934:	4d0c      	ldr	r5, [pc, #48]	; (18968 <radio_rx_mem_release+0x88>)
   18936:	88c2      	ldrh	r2, [r0, #6]
   18938:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1893c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   18940:	f7f6 fd60 	bl	f404 <mem_get>
			mem_release(conn, &_radio.conn_free);
   18944:	f505 7184 	add.w	r1, r5, #264	; 0x108
   18948:	f7f6 fd3b 	bl	f3c2 <mem_release>
			break;
   1894c:	e7cf      	b.n	188ee <radio_rx_mem_release+0xe>
			LL_ASSERT(0);
   1894e:	4040      	eors	r0, r0
   18950:	f380 8811 	msr	BASEPRI, r0
   18954:	f04f 0004 	mov.w	r0, #4
   18958:	df02      	svc	2
	*radio_pdu_node_rx = _radio_pdu_node_rx;
   1895a:	6030      	str	r0, [r6, #0]
	packet_rx_allocate(0xff);
   1895c:	20ff      	movs	r0, #255	; 0xff
   1895e:	f7f9 fa4f 	bl	11e00 <packet_rx_allocate>
   18962:	bd70      	pop	{r4, r5, r6, pc}
   18964:	20001120 	.word	0x20001120
   18968:	20000ff4 	.word	0x20000ff4

0001896c <do_radio_rx_fc_set>:
	if (req == ack) {
   1896c:	4291      	cmp	r1, r2
   1896e:	d007      	beq.n	18980 <do_radio_rx_fc_set+0x14>
	} else if (((req == 0) &&
   18970:	bb41      	cbnz	r1, 189c4 <do_radio_rx_fc_set+0x58>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   18972:	4b1c      	ldr	r3, [pc, #112]	; (189e4 <do_radio_rx_fc_set+0x78>)
   18974:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
	} else if (((req == 0) &&
   18978:	4298      	cmp	r0, r3
   1897a:	d023      	beq.n	189c4 <do_radio_rx_fc_set+0x58>
		return 1;
   1897c:	2001      	movs	r0, #1
   1897e:	4770      	bx	lr
{
   18980:	b430      	push	{r4, r5}
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   18982:	4b18      	ldr	r3, [pc, #96]	; (189e4 <do_radio_rx_fc_set+0x78>)
   18984:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   18988:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   1898c:	429c      	cmp	r4, r3
   1898e:	d002      	beq.n	18996 <do_radio_rx_fc_set+0x2a>
			return 1;
   18990:	2001      	movs	r0, #1
}
   18992:	bc30      	pop	{r4, r5}
   18994:	4770      	bx	lr
			if (ack1 == 0) {
   18996:	b19a      	cbz	r2, 189c0 <do_radio_rx_fc_set+0x54>
			u8_t ack1 = ack;
   18998:	4613      	mov	r3, r2
			_radio.fc_handle[--ack1] = handle;
   1899a:	3b01      	subs	r3, #1
   1899c:	b2db      	uxtb	r3, r3
   1899e:	4c11      	ldr	r4, [pc, #68]	; (189e4 <do_radio_rx_fc_set+0x78>)
   189a0:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
   189a4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
   189a8:	80e8      	strh	r0, [r5, #6]
			_radio.fc_ack = ack1;
   189aa:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
			if (req != _radio.fc_req) {
   189ae:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   189b2:	b2db      	uxtb	r3, r3
   189b4:	4299      	cmp	r1, r3
   189b6:	d00f      	beq.n	189d8 <do_radio_rx_fc_set+0x6c>
				_radio.fc_ack = ack;
   189b8:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
				return 1;
   189bc:	2001      	movs	r0, #1
   189be:	e7e8      	b.n	18992 <do_radio_rx_fc_set+0x26>
				ack1 = TRIPLE_BUFFER_SIZE;
   189c0:	2303      	movs	r3, #3
   189c2:	e7ea      	b.n	1899a <do_radio_rx_fc_set+0x2e>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   189c4:	b151      	cbz	r1, 189dc <do_radio_rx_fc_set+0x70>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   189c6:	31b7      	adds	r1, #183	; 0xb7
   189c8:	4b06      	ldr	r3, [pc, #24]	; (189e4 <do_radio_rx_fc_set+0x78>)
   189ca:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   189ce:	88cb      	ldrh	r3, [r1, #6]
   189d0:	4298      	cmp	r0, r3
   189d2:	d005      	beq.n	189e0 <do_radio_rx_fc_set+0x74>
		return 1;
   189d4:	2001      	movs	r0, #1
   189d6:	4770      	bx	lr
	return 0;
   189d8:	2000      	movs	r0, #0
   189da:	e7da      	b.n	18992 <do_radio_rx_fc_set+0x26>
   189dc:	4608      	mov	r0, r1
   189de:	4770      	bx	lr
   189e0:	2000      	movs	r0, #0
   189e2:	4770      	bx	lr
   189e4:	20000ff4 	.word	0x20000ff4

000189e8 <radio_rx_fc_set>:
{
   189e8:	b538      	push	{r3, r4, r5, lr}
   189ea:	4604      	mov	r4, r0
	if (_radio.fc_ena) {
   189ec:	4b1b      	ldr	r3, [pc, #108]	; (18a5c <radio_rx_fc_set+0x74>)
   189ee:	f893 017e 	ldrb.w	r0, [r3, #382]	; 0x17e
   189f2:	b338      	cbz	r0, 18a44 <radio_rx_fc_set+0x5c>
		u8_t req = _radio.fc_req;
   189f4:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   189f8:	b2d5      	uxtb	r5, r2
		u8_t ack = _radio.fc_ack;
   189fa:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
		if (fc) {
   189fe:	b141      	cbz	r1, 18a12 <radio_rx_fc_set+0x2a>
			if (handle != 0xffff) {
   18a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18a04:	429c      	cmp	r4, r3
   18a06:	d023      	beq.n	18a50 <radio_rx_fc_set+0x68>
   18a08:	4620      	mov	r0, r4
				return do_radio_rx_fc_set(handle, req, ack);
   18a0a:	4629      	mov	r1, r5
   18a0c:	f7ff ffae 	bl	1896c <do_radio_rx_fc_set>
   18a10:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   18a12:	4b12      	ldr	r3, [pc, #72]	; (18a5c <radio_rx_fc_set+0x74>)
   18a14:	f8d3 0148 	ldr.w	r0, [r3, #328]	; 0x148
   18a18:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   18a1c:	4298      	cmp	r0, r3
   18a1e:	d001      	beq.n	18a24 <radio_rx_fc_set+0x3c>
	return 0;
   18a20:	4608      	mov	r0, r1
   18a22:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   18a24:	4295      	cmp	r5, r2
   18a26:	d015      	beq.n	18a54 <radio_rx_fc_set+0x6c>
			_radio.fc_ack = req;
   18a28:	4b0c      	ldr	r3, [pc, #48]	; (18a5c <radio_rx_fc_set+0x74>)
   18a2a:	f883 517d 	strb.w	r5, [r3, #381]	; 0x17d
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   18a2e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   18a32:	4298      	cmp	r0, r3
   18a34:	d010      	beq.n	18a58 <radio_rx_fc_set+0x70>
			    (req == _radio.fc_req)) {
   18a36:	4b09      	ldr	r3, [pc, #36]	; (18a5c <radio_rx_fc_set+0x74>)
   18a38:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
   18a3c:	b2db      	uxtb	r3, r3
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   18a3e:	429d      	cmp	r5, r3
   18a40:	d001      	beq.n	18a46 <radio_rx_fc_set+0x5e>
	return 0;
   18a42:	4608      	mov	r0, r1
}
   18a44:	bd38      	pop	{r3, r4, r5, pc}
				_radio.fc_ack = ack;
   18a46:	4b05      	ldr	r3, [pc, #20]	; (18a5c <radio_rx_fc_set+0x74>)
   18a48:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	return 0;
   18a4c:	4608      	mov	r0, r1
   18a4e:	bd38      	pop	{r3, r4, r5, pc}
   18a50:	2000      	movs	r0, #0
   18a52:	bd38      	pop	{r3, r4, r5, pc}
   18a54:	4608      	mov	r0, r1
   18a56:	bd38      	pop	{r3, r4, r5, pc}
   18a58:	4608      	mov	r0, r1
   18a5a:	bd38      	pop	{r3, r4, r5, pc}
   18a5c:	20000ff4 	.word	0x20000ff4

00018a60 <radio_tx_mem_acquire>:
{
   18a60:	b508      	push	{r3, lr}
	return mem_acquire(&_radio.pkt_tx_data_free);
   18a62:	4802      	ldr	r0, [pc, #8]	; (18a6c <radio_tx_mem_acquire+0xc>)
   18a64:	f7f6 fc91 	bl	f38a <mem_acquire>
}
   18a68:	bd08      	pop	{r3, pc}
   18a6a:	bf00      	nop
   18a6c:	20001154 	.word	0x20001154

00018a70 <radio_tx_mem_release>:
{
   18a70:	b508      	push	{r3, lr}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   18a72:	4902      	ldr	r1, [pc, #8]	; (18a7c <radio_tx_mem_release+0xc>)
   18a74:	f7f6 fca5 	bl	f3c2 <mem_release>
   18a78:	bd08      	pop	{r3, pc}
   18a7a:	bf00      	nop
   18a7c:	20001154 	.word	0x20001154

00018a80 <radio_tx_mem_enqueue>:
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   18a80:	b570      	push	{r4, r5, r6, lr}
   18a82:	b088      	sub	sp, #32
   18a84:	4605      	mov	r5, r0
   18a86:	460e      	mov	r6, r1
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   18a88:	4b36      	ldr	r3, [pc, #216]	; (18b64 <radio_tx_mem_enqueue+0xe4>)
   18a8a:	f893 4172 	ldrb.w	r4, [r3, #370]	; 0x172
   18a8e:	3401      	adds	r4, #1
   18a90:	b2e4      	uxtb	r4, r4
	if (last == _radio.packet_tx_count) {
   18a92:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   18a96:	429c      	cmp	r4, r3
   18a98:	d02a      	beq.n	18af0 <radio_tx_mem_enqueue+0x70>
		last = 0;
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
   18a9a:	4628      	mov	r0, r5
   18a9c:	f7f9 fa5a 	bl	11f54 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   18aa0:	4601      	mov	r1, r0
   18aa2:	2800      	cmp	r0, #0
   18aa4:	d057      	beq.n	18b56 <radio_tx_mem_enqueue+0xd6>
   18aa6:	4b2f      	ldr	r3, [pc, #188]	; (18b64 <radio_tx_mem_enqueue+0xe4>)
   18aa8:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
   18aac:	b2db      	uxtb	r3, r3
   18aae:	429c      	cmp	r4, r3
   18ab0:	d053      	beq.n	18b5a <radio_tx_mem_enqueue+0xda>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   18ab2:	7972      	ldrb	r2, [r6, #5]
   18ab4:	4b2b      	ldr	r3, [pc, #172]	; (18b64 <radio_tx_mem_enqueue+0xe4>)
   18ab6:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
   18aba:	3b07      	subs	r3, #7
   18abc:	429a      	cmp	r2, r3
   18abe:	d819      	bhi.n	18af4 <radio_tx_mem_enqueue+0x74>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   18ac0:	4b28      	ldr	r3, [pc, #160]	; (18b64 <radio_tx_mem_enqueue+0xe4>)
   18ac2:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   18ac6:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   18aca:	f822 5030 	strh.w	r5, [r2, r0, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
   18ace:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   18ad2:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   18ad6:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   18ada:	6056      	str	r6, [r2, #4]
	_radio.packet_tx_last = last;
   18adc:	f883 4172 	strb.w	r4, [r3, #370]	; 0x172

	/* break slave latency */
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   18ae0:	f991 301d 	ldrsb.w	r3, [r1, #29]
   18ae4:	2b00      	cmp	r3, #0
   18ae6:	db0b      	blt.n	18b00 <radio_tx_mem_enqueue+0x80>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   18ae8:	2300      	movs	r3, #0
}
   18aea:	4618      	mov	r0, r3
   18aec:	b008      	add	sp, #32
   18aee:	bd70      	pop	{r4, r5, r6, pc}
		last = 0;
   18af0:	2400      	movs	r4, #0
   18af2:	e7d2      	b.n	18a9a <radio_tx_mem_enqueue+0x1a>
	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   18af4:	4040      	eors	r0, r0
   18af6:	f380 8811 	msr	BASEPRI, r0
   18afa:	f04f 0004 	mov.w	r0, #4
   18afe:	df02      	svc	2
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   18b00:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
   18b02:	b363      	cbz	r3, 18b5e <radio_tx_mem_enqueue+0xde>
   18b04:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   18b08:	f013 0f02 	tst.w	r3, #2
   18b0c:	d001      	beq.n	18b12 <radio_tx_mem_enqueue+0x92>
	return 0;
   18b0e:	2300      	movs	r3, #0
   18b10:	e7eb      	b.n	18aea <radio_tx_mem_enqueue+0x6a>
		conn->slave.latency_cancel = 1;
   18b12:	f043 0302 	orr.w	r3, r3, #2
   18b16:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
				 conn->handle, 0, 0, 0, 0, 1, 0,
   18b1a:	8c0a      	ldrh	r2, [r1, #32]
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   18b1c:	3207      	adds	r2, #7
   18b1e:	9106      	str	r1, [sp, #24]
   18b20:	4b11      	ldr	r3, [pc, #68]	; (18b68 <radio_tx_mem_enqueue+0xe8>)
   18b22:	9305      	str	r3, [sp, #20]
   18b24:	2000      	movs	r0, #0
   18b26:	9004      	str	r0, [sp, #16]
   18b28:	2301      	movs	r3, #1
   18b2a:	9303      	str	r3, [sp, #12]
   18b2c:	9002      	str	r0, [sp, #8]
   18b2e:	9001      	str	r0, [sp, #4]
   18b30:	9000      	str	r0, [sp, #0]
   18b32:	4603      	mov	r3, r0
   18b34:	b2d2      	uxtb	r2, r2
   18b36:	2103      	movs	r1, #3
   18b38:	f7f8 f944 	bl	10dc4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18b3c:	4603      	mov	r3, r0
   18b3e:	2800      	cmp	r0, #0
   18b40:	d0d3      	beq.n	18aea <radio_tx_mem_enqueue+0x6a>
   18b42:	2802      	cmp	r0, #2
   18b44:	d101      	bne.n	18b4a <radio_tx_mem_enqueue+0xca>
	return 0;
   18b46:	2300      	movs	r3, #0
   18b48:	e7cf      	b.n	18aea <radio_tx_mem_enqueue+0x6a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18b4a:	4040      	eors	r0, r0
   18b4c:	f380 8811 	msr	BASEPRI, r0
   18b50:	f04f 0004 	mov.w	r0, #4
   18b54:	df02      	svc	2
		return 1;
   18b56:	2301      	movs	r3, #1
   18b58:	e7c7      	b.n	18aea <radio_tx_mem_enqueue+0x6a>
   18b5a:	2301      	movs	r3, #1
   18b5c:	e7c5      	b.n	18aea <radio_tx_mem_enqueue+0x6a>
	return 0;
   18b5e:	2300      	movs	r3, #0
   18b60:	e7c3      	b.n	18aea <radio_tx_mem_enqueue+0x6a>
   18b62:	bf00      	nop
   18b64:	20000ff4 	.word	0x20000ff4
   18b68:	00011de5 	.word	0x00011de5

00018b6c <ll_enc_req_send>:
{
   18b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18b70:	4680      	mov	r8, r0
   18b72:	4689      	mov	r9, r1
   18b74:	4616      	mov	r6, r2
   18b76:	461f      	mov	r7, r3
	conn = connection_get(handle);
   18b78:	f7f9 f9ec 	bl	11f54 <connection_get>
	if (!conn) {
   18b7c:	2800      	cmp	r0, #0
   18b7e:	d055      	beq.n	18c2c <ll_enc_req_send+0xc0>
   18b80:	4605      	mov	r5, r0
	node_tx = radio_tx_mem_acquire();
   18b82:	f7ff ff6d 	bl	18a60 <radio_tx_mem_acquire>
	if (node_tx) {
   18b86:	4604      	mov	r4, r0
   18b88:	2800      	cmp	r0, #0
   18b8a:	d051      	beq.n	18c30 <ll_enc_req_send+0xc4>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   18b8c:	2210      	movs	r2, #16
   18b8e:	4639      	mov	r1, r7
   18b90:	f105 0083 	add.w	r0, r5, #131	; 0x83
   18b94:	f7e7 fb94 	bl	2c0 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   18b98:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   18b9c:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   18ba0:	d008      	beq.n	18bb4 <ll_enc_req_send+0x48>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   18ba2:	2b30      	cmp	r3, #48	; 0x30
   18ba4:	d02d      	beq.n	18c02 <ll_enc_req_send+0x96>
			radio_tx_mem_release(node_tx);
   18ba6:	4620      	mov	r0, r4
   18ba8:	f7ff ff62 	bl	18a70 <radio_tx_mem_release>
			return 1;
   18bac:	2301      	movs	r3, #1
}
   18bae:	4618      	mov	r0, r3
   18bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18bb4:	7923      	ldrb	r3, [r4, #4]
   18bb6:	f043 0303 	orr.w	r3, r3, #3
   18bba:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   18bbc:	2317      	movs	r3, #23
   18bbe:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   18bc0:	2303      	movs	r3, #3
   18bc2:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   18bc4:	2208      	movs	r2, #8
   18bc6:	4649      	mov	r1, r9
   18bc8:	18a0      	adds	r0, r4, r2
   18bca:	f7e7 fb79 	bl	2c0 <memcpy>
			enc_req->ediv[0] = ediv[0];
   18bce:	7833      	ldrb	r3, [r6, #0]
   18bd0:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   18bd2:	7873      	ldrb	r3, [r6, #1]
   18bd4:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   18bd6:	2108      	movs	r1, #8
   18bd8:	f104 0012 	add.w	r0, r4, #18
   18bdc:	f7f8 fd74 	bl	116c8 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   18be0:	2104      	movs	r1, #4
   18be2:	f104 001a 	add.w	r0, r4, #26
   18be6:	f7f8 fd6f 	bl	116c8 <bt_rand>
		if (radio_tx_mem_enqueue(handle, node_tx)) {
   18bea:	4621      	mov	r1, r4
   18bec:	4640      	mov	r0, r8
   18bee:	f7ff ff47 	bl	18a80 <radio_tx_mem_enqueue>
   18bf2:	4603      	mov	r3, r0
   18bf4:	2800      	cmp	r0, #0
   18bf6:	d0da      	beq.n	18bae <ll_enc_req_send+0x42>
			radio_tx_mem_release(node_tx);
   18bf8:	4620      	mov	r0, r4
   18bfa:	f7ff ff39 	bl	18a70 <radio_tx_mem_release>
			return 1;
   18bfe:	2301      	movs	r3, #1
   18c00:	e7d5      	b.n	18bae <ll_enc_req_send+0x42>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   18c02:	2208      	movs	r2, #8
   18c04:	4649      	mov	r1, r9
   18c06:	f105 0079 	add.w	r0, r5, #121	; 0x79
   18c0a:	f7e7 fb59 	bl	2c0 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   18c0e:	7833      	ldrb	r3, [r6, #0]
   18c10:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
			conn->llcp.encryption.ediv[1] = ediv[1];
   18c14:	7873      	ldrb	r3, [r6, #1]
   18c16:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18c1a:	7923      	ldrb	r3, [r4, #4]
   18c1c:	f043 0303 	orr.w	r3, r3, #3
   18c20:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   18c22:	2301      	movs	r3, #1
   18c24:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   18c26:	230a      	movs	r3, #10
   18c28:	71e3      	strb	r3, [r4, #7]
   18c2a:	e7de      	b.n	18bea <ll_enc_req_send+0x7e>
		return 1;
   18c2c:	2301      	movs	r3, #1
   18c2e:	e7be      	b.n	18bae <ll_enc_req_send+0x42>
	return 1;
   18c30:	2301      	movs	r3, #1
   18c32:	e7bc      	b.n	18bae <ll_enc_req_send+0x42>

void __weak ll_adv_scan_state_cb(u8_t bm)
{
   18c34:	4770      	bx	lr

00018c36 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   18c36:	b508      	push	{r3, lr}
	if (bm) {
   18c38:	b910      	cbnz	r0, 18c40 <ll_adv_scan_state_cb+0xa>
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
   18c3a:	f000 fe5f 	bl	198fc <rpa_refresh_stop>
   18c3e:	bd08      	pop	{r3, pc}
		rpa_refresh_start();
   18c40:	f000 fe48 	bl	198d4 <rpa_refresh_start>
   18c44:	bd08      	pop	{r3, pc}
	...

00018c48 <radio_adv_enable>:
{
   18c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18c4c:	b08f      	sub	sp, #60	; 0x3c
   18c4e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   18c52:	2202      	movs	r2, #2
   18c54:	920d      	str	r2, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
   18c56:	4aca      	ldr	r2, [pc, #808]	; (18f80 <radio_adv_enable+0x338>)
   18c58:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   18c5c:	f012 0f01 	tst.w	r2, #1
   18c60:	d003      	beq.n	18c6a <radio_adv_enable+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18c62:	200c      	movs	r0, #12
}
   18c64:	b00f      	add	sp, #60	; 0x3c
   18c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18c6a:	461d      	mov	r5, r3
   18c6c:	460c      	mov	r4, r1
   18c6e:	4607      	mov	r7, r0
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
   18c70:	4bc3      	ldr	r3, [pc, #780]	; (18f80 <radio_adv_enable+0x338>)
   18c72:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
	pdu_adv = (struct pdu_adv *)
   18c76:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   18c7a:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
   18c7e:	3220      	adds	r2, #32
   18c80:	eb03 0802 	add.w	r8, r3, r2
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   18c84:	f898 3007 	ldrb.w	r3, [r8, #7]
   18c88:	f003 030f 	and.w	r3, r3, #15
   18c8c:	2b01      	cmp	r3, #1
   18c8e:	d97f      	bls.n	18d90 <radio_adv_enable+0x148>
		conn = NULL;
   18c90:	2600      	movs	r6, #0
	_radio.advertiser.phy_p = phy_p;
   18c92:	4abb      	ldr	r2, [pc, #748]	; (18f80 <radio_adv_enable+0x338>)
   18c94:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
   18c98:	f367 0302 	bfi	r3, r7, #0, #3
	_radio.advertiser.chan_map = chan_map;
   18c9c:	a80e      	add	r0, sp, #56	; 0x38
   18c9e:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
   18ca2:	f361 03c5 	bfi	r3, r1, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
   18ca6:	f365 1387 	bfi	r3, r5, #6, #2
   18caa:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	_radio.advertiser.rl_idx = rl_idx;
   18cae:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   18cb2:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
		_radio.ticks_active_to_start;
   18cb6:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
	_radio.advertiser.hdr.ticks_active_to_start =
   18cba:	6193      	str	r3, [r2, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   18cbc:	2327      	movs	r3, #39	; 0x27
   18cbe:	6153      	str	r3, [r2, #20]
	_radio.advertiser.hdr.ticks_preempt_to_start =
   18cc0:	2300      	movs	r3, #0
   18cc2:	61d3      	str	r3, [r2, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   18cc4:	2101      	movs	r1, #1
   18cc6:	f7f6 fbe4 	bl	f492 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   18cca:	f898 5007 	ldrb.w	r5, [r8, #7]
   18cce:	f005 050f 	and.w	r5, r5, #15
   18cd2:	2d01      	cmp	r5, #1
   18cd4:	f000 8108 	beq.w	18ee8 <radio_adv_enable+0x2a0>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   18cd8:	2d02      	cmp	r5, #2
   18cda:	f000 8111 	beq.w	18f00 <radio_adv_enable+0x2b8>
			      152 + 376) * chan_cnt;
   18cde:	b280      	uxth	r0, r0
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
   18ce0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18ce4:	ebc0 10c3 	rsb	r0, r0, r3, lsl #7
   18ce8:	0080      	lsls	r0, r0, #2
   18cea:	b280      	uxth	r0, r0
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   18cec:	a3a2      	add	r3, pc, #648	; (adr r3, 18f78 <radio_adv_enable+0x330>)
   18cee:	e9d3 2300 	ldrd	r2, r3, [r3]
   18cf2:	49a4      	ldr	r1, [pc, #656]	; (18f84 <radio_adv_enable+0x33c>)
   18cf4:	fba0 0101 	umull	r0, r1, r0, r1
   18cf8:	f7e8 fa00 	bl	10fc <__aeabi_uldivmod>
   18cfc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18d00:	4a9f      	ldr	r2, [pc, #636]	; (18f80 <radio_adv_enable+0x338>)
   18d02:	6210      	str	r0, [r2, #32]
		_radio.advertiser.hdr.ticks_active_to_start;
   18d04:	6991      	ldr	r1, [r2, #24]
		_radio.advertiser.hdr.ticks_xtal_to_start :
   18d06:	6953      	ldr	r3, [r2, #20]
	ticks_slot_offset =
   18d08:	4299      	cmp	r1, r3
   18d0a:	bf38      	it	cc
   18d0c:	4619      	movcc	r1, r3
   18d0e:	4688      	mov	r8, r1
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18d10:	2d01      	cmp	r5, #1
   18d12:	f000 80ff 	beq.w	18f14 <radio_adv_enable+0x2cc>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18d16:	f7f8 f96f 	bl	10ff8 <ticker_ticks_now_get>
   18d1a:	4607      	mov	r7, r0
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   18d1c:	b2a4      	uxth	r4, r4
   18d1e:	489a      	ldr	r0, [pc, #616]	; (18f88 <radio_adv_enable+0x340>)
   18d20:	fba4 0100 	umull	r0, r1, r4, r0
   18d24:	2391      	movs	r3, #145	; 0x91
   18d26:	fb03 1104 	mla	r1, r3, r4, r1
   18d2a:	a393      	add	r3, pc, #588	; (adr r3, 18f78 <radio_adv_enable+0x330>)
   18d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   18d30:	f7e8 f9e4 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18d34:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
				      _radio.advertiser.hdr.ticks_slot),
   18d38:	4b91      	ldr	r3, [pc, #580]	; (18f80 <radio_adv_enable+0x338>)
   18d3a:	6a1b      	ldr	r3, [r3, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18d3c:	4443      	add	r3, r8
   18d3e:	b29b      	uxth	r3, r3
		ret =
   18d40:	a90d      	add	r1, sp, #52	; 0x34
   18d42:	9108      	str	r1, [sp, #32]
   18d44:	4991      	ldr	r1, [pc, #580]	; (18f8c <radio_adv_enable+0x344>)
   18d46:	9107      	str	r1, [sp, #28]
   18d48:	2000      	movs	r0, #0
   18d4a:	9006      	str	r0, [sp, #24]
   18d4c:	4990      	ldr	r1, [pc, #576]	; (18f90 <radio_adv_enable+0x348>)
   18d4e:	9105      	str	r1, [sp, #20]
   18d50:	9304      	str	r3, [sp, #16]
   18d52:	9003      	str	r0, [sp, #12]
   18d54:	9002      	str	r0, [sp, #8]
   18d56:	9201      	str	r2, [sp, #4]
   18d58:	9000      	str	r0, [sp, #0]
   18d5a:	463b      	mov	r3, r7
   18d5c:	2205      	movs	r2, #5
   18d5e:	2103      	movs	r1, #3
   18d60:	f7f7 ffe2 	bl	10d28 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   18d64:	2802      	cmp	r0, #2
   18d66:	f000 813b 	beq.w	18fe0 <radio_adv_enable+0x398>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   18d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18d6c:	2b00      	cmp	r3, #0
   18d6e:	f040 80f2 	bne.w	18f56 <radio_adv_enable+0x30e>
		_radio.advertiser.is_enabled = 1;
   18d72:	4b83      	ldr	r3, [pc, #524]	; (18f80 <radio_adv_enable+0x338>)
   18d74:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18d78:	f042 0201 	orr.w	r2, r2, #1
   18d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   18d80:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   18d84:	f013 0f01 	tst.w	r3, #1
   18d88:	f000 812e 	beq.w	18fe8 <radio_adv_enable+0x3a0>
		return 0;
   18d8c:	2000      	movs	r0, #0
   18d8e:	e769      	b.n	18c64 <radio_adv_enable+0x1c>
		if (_radio.advertiser.conn) {
   18d90:	4b7b      	ldr	r3, [pc, #492]	; (18f80 <radio_adv_enable+0x338>)
   18d92:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   18d96:	b10b      	cbz	r3, 18d9c <radio_adv_enable+0x154>
			return BT_HCI_ERR_CMD_DISALLOWED;
   18d98:	200c      	movs	r0, #12
   18d9a:	e763      	b.n	18c64 <radio_adv_enable+0x1c>
		link = mem_acquire(&_radio.link_rx_free);
   18d9c:	487d      	ldr	r0, [pc, #500]	; (18f94 <radio_adv_enable+0x34c>)
   18d9e:	f7f6 faf4 	bl	f38a <mem_acquire>
		if (!link) {
   18da2:	4681      	mov	r9, r0
   18da4:	2800      	cmp	r0, #0
   18da6:	f000 8124 	beq.w	18ff2 <radio_adv_enable+0x3aa>
		conn = mem_acquire(&_radio.conn_free);
   18daa:	487b      	ldr	r0, [pc, #492]	; (18f98 <radio_adv_enable+0x350>)
   18dac:	f7f6 faed 	bl	f38a <mem_acquire>
		if (!conn) {
   18db0:	4606      	mov	r6, r0
   18db2:	2800      	cmp	r0, #0
   18db4:	f000 8092 	beq.w	18edc <radio_adv_enable+0x294>
		conn->handle = 0xFFFF;
   18db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18dbc:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   18dbe:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   18dc2:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   18dc6:	7f43      	ldrb	r3, [r0, #29]
   18dc8:	f36f 1386 	bfc	r3, #6, #1
   18dcc:	7743      	strb	r3, [r0, #29]
		conn->data_chan_use = 0;
   18dce:	2300      	movs	r3, #0
   18dd0:	77c3      	strb	r3, [r0, #31]
		conn->event_counter = 0;
   18dd2:	8443      	strh	r3, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   18dd4:	8503      	strh	r3, [r0, #40]	; 0x28
		conn->latency_event = 0;
   18dd6:	8543      	strh	r3, [r0, #42]	; 0x2a
		conn->default_tx_octets = _radio.default_tx_octets;
   18dd8:	4969      	ldr	r1, [pc, #420]	; (18f80 <radio_adv_enable+0x338>)
   18dda:	f8b1 211e 	ldrh.w	r2, [r1, #286]	; 0x11e
   18dde:	8582      	strh	r2, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18de0:	221b      	movs	r2, #27
   18de2:	85c2      	strh	r2, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18de4:	8602      	strh	r2, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   18de6:	f8b1 2120 	ldrh.w	r2, [r1, #288]	; 0x120
   18dea:	8642      	strh	r2, [r0, #50]	; 0x32
		conn->max_tx_time =
   18dec:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18df0:	8682      	strh	r2, [r0, #52]	; 0x34
		conn->max_rx_time =
   18df2:	86c2      	strh	r2, [r0, #54]	; 0x36
		conn->phy_pref_tx = _radio.default_phy_tx;
   18df4:	f891 0122 	ldrb.w	r0, [r1, #290]	; 0x122
   18df8:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
   18dfc:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_tx = BIT(0);
   18e00:	2001      	movs	r0, #1
   18e02:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->phy_flags = 0;
   18e06:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   18e0a:	f363 12c7 	bfi	r2, r3, #7, #1
   18e0e:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   18e12:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
   18e16:	f360 0202 	bfi	r2, r0, #0, #3
   18e1a:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   18e1e:	f891 e124 	ldrb.w	lr, [r1, #292]	; 0x124
   18e22:	b2d2      	uxtb	r2, r2
   18e24:	f36e 02c5 	bfi	r2, lr, #3, #3
   18e28:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_rx = BIT(0);
   18e2c:	f896 203a 	ldrb.w	r2, [r6, #58]	; 0x3a
   18e30:	f360 0202 	bfi	r2, r0, #0, #3
   18e34:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
		conn->role = 1;
   18e38:	7f72      	ldrb	r2, [r6, #29]
   18e3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   18e3e:	7772      	strb	r2, [r6, #29]
		conn->connect_expire = 6;
   18e40:	2206      	movs	r2, #6
   18e42:	87b2      	strh	r2, [r6, #60]	; 0x3c
		conn->common.fex_valid = 0;
   18e44:	f896 2050 	ldrb.w	r2, [r6, #80]	; 0x50
		conn->slave.latency_cancel = 0;
   18e48:	f002 02de 	and.w	r2, r2, #222	; 0xde
   18e4c:	f363 0241 	bfi	r2, r3, #1, #1
   18e50:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
		conn->slave.window_widening_prepare_us = 0;
   18e54:	65f3      	str	r3, [r6, #92]	; 0x5c
		conn->slave.window_widening_event_us = 0;
   18e56:	6633      	str	r3, [r6, #96]	; 0x60
		conn->slave.ticks_to_offset = 0;
   18e58:	6733      	str	r3, [r6, #112]	; 0x70
		conn->supervision_expire = 0;
   18e5a:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		conn->procedure_expire = 0;
   18e5e:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		conn->apto_expire = 0;
   18e62:	f8a6 304c 	strh.w	r3, [r6, #76]	; 0x4c
		conn->appto_expire = 0;
   18e66:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
		conn->llcp_req = 0;
   18e6a:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
		conn->llcp_ack = 0;
   18e6e:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		conn->llcp_version.tx = 0;
   18e72:	f896 20a8 	ldrb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_version.rx = 0;
   18e76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   18e7a:	f363 0241 	bfi	r2, r3, #1, #1
   18e7e:	f886 20a8 	strb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_terminate.req = 0;
   18e82:	f886 30b0 	strb.w	r3, [r6, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   18e86:	f886 30b1 	strb.w	r3, [r6, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   18e8a:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   18e8e:	f8c6 90b4 	str.w	r9, [r6, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   18e92:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   18e96:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
		conn->llcp_length.req = 0;
   18e9a:	f886 30e8 	strb.w	r3, [r6, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   18e9e:	f886 30e9 	strb.w	r3, [r6, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   18ea2:	f886 30f4 	strb.w	r3, [r6, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   18ea6:	f886 30f5 	strb.w	r3, [r6, #245]	; 0xf5
		conn->sn = 0;
   18eaa:	f896 20f8 	ldrb.w	r2, [r6, #248]	; 0xf8
		conn->empty = 0;
   18eae:	f002 0280 	and.w	r2, r2, #128	; 0x80
   18eb2:	f363 12c7 	bfi	r2, r3, #7, #1
   18eb6:	f886 20f8 	strb.w	r2, [r6, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   18eba:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   18ebe:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   18ec2:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   18ec6:	f8c6 3148 	str.w	r3, [r6, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   18eca:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   18ece:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   18ed2:	f886 3151 	strb.w	r3, [r6, #337]	; 0x151
		_radio.advertiser.conn = conn;
   18ed6:	f8c1 60c8 	str.w	r6, [r1, #200]	; 0xc8
   18eda:	e6da      	b.n	18c92 <radio_adv_enable+0x4a>
			mem_release(link, &_radio.link_rx_free);
   18edc:	492d      	ldr	r1, [pc, #180]	; (18f94 <radio_adv_enable+0x34c>)
   18ede:	4648      	mov	r0, r9
   18ee0:	f7f6 fa6f 	bl	f3c2 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18ee4:	2007      	movs	r0, #7
   18ee6:	e6bd      	b.n	18c64 <radio_adv_enable+0x1c>
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   18ee8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18eec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18ef0:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
   18ef4:	0080      	lsls	r0, r0, #2
   18ef6:	b280      	uxth	r0, r0
   18ef8:	f500 709c 	add.w	r0, r0, #312	; 0x138
   18efc:	b280      	uxth	r0, r0
   18efe:	e6f5      	b.n	18cec <radio_adv_enable+0xa4>
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   18f00:	b280      	uxth	r0, r0
   18f02:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18f06:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18f0a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   18f0e:	0080      	lsls	r0, r0, #2
   18f10:	b280      	uxth	r0, r0
   18f12:	e6eb      	b.n	18cec <radio_adv_enable+0xa4>
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18f14:	2c00      	cmp	r4, #0
   18f16:	f47f aefe 	bne.w	18d16 <radio_adv_enable+0xce>
		u32_t ticks_now = ticker_ticks_now_get();
   18f1a:	f7f8 f86d 	bl	10ff8 <ticker_ticks_now_get>
   18f1e:	4604      	mov	r4, r0
				    _radio.advertiser.hdr.ticks_slot),
   18f20:	4b17      	ldr	r3, [pc, #92]	; (18f80 <radio_adv_enable+0x338>)
   18f22:	6a1b      	ldr	r3, [r3, #32]
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18f24:	eb08 0203 	add.w	r2, r8, r3
   18f28:	b293      	uxth	r3, r2
   18f2a:	a90d      	add	r1, sp, #52	; 0x34
   18f2c:	9108      	str	r1, [sp, #32]
   18f2e:	4917      	ldr	r1, [pc, #92]	; (18f8c <radio_adv_enable+0x344>)
   18f30:	9107      	str	r1, [sp, #28]
   18f32:	2000      	movs	r0, #0
   18f34:	9006      	str	r0, [sp, #24]
   18f36:	4916      	ldr	r1, [pc, #88]	; (18f90 <radio_adv_enable+0x348>)
   18f38:	9105      	str	r1, [sp, #20]
   18f3a:	9304      	str	r3, [sp, #16]
   18f3c:	9003      	str	r0, [sp, #12]
   18f3e:	9002      	str	r0, [sp, #8]
   18f40:	9201      	str	r2, [sp, #4]
   18f42:	9000      	str	r0, [sp, #0]
   18f44:	4623      	mov	r3, r4
   18f46:	2205      	movs	r2, #5
   18f48:	2103      	movs	r1, #3
   18f4a:	f7f7 feed 	bl	10d28 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   18f4e:	2802      	cmp	r0, #2
   18f50:	d027      	beq.n	18fa2 <radio_adv_enable+0x35a>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   18f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18f54:	b34b      	cbz	r3, 18faa <radio_adv_enable+0x362>
	if (conn) {
   18f56:	2e00      	cmp	r6, #0
   18f58:	d04d      	beq.n	18ff6 <radio_adv_enable+0x3ae>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   18f5a:	4c09      	ldr	r4, [pc, #36]	; (18f80 <radio_adv_enable+0x338>)
   18f5c:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   18f60:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   18f64:	f7f6 fa2d 	bl	f3c2 <mem_release>
		mem_release(conn, &_radio.conn_free);
   18f68:	f504 7184 	add.w	r1, r4, #264	; 0x108
   18f6c:	4630      	mov	r0, r6
   18f6e:	f7f6 fa28 	bl	f3c2 <mem_release>
	return BT_HCI_ERR_CMD_DISALLOWED;
   18f72:	200c      	movs	r0, #12
   18f74:	e676      	b.n	18c64 <radio_adv_enable+0x1c>
   18f76:	bf00      	nop
   18f78:	1afd498d 	.word	0x1afd498d
   18f7c:	00000007 	.word	0x00000007
   18f80:	20000ff4 	.word	0x20000ff4
   18f84:	3b9aca00 	.word	0x3b9aca00
   18f88:	84e72a00 	.word	0x84e72a00
   18f8c:	0001170d 	.word	0x0001170d
   18f90:	00015095 	.word	0x00015095
   18f94:	20001138 	.word	0x20001138
   18f98:	200010fc 	.word	0x200010fc
   18f9c:	bf20      	wfe
  __ASM volatile ("sev");
   18f9e:	bf40      	sev
  __ASM volatile ("wfe");
   18fa0:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   18fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18fa4:	2b02      	cmp	r3, #2
   18fa6:	d0f9      	beq.n	18f9c <radio_adv_enable+0x354>
   18fa8:	e7d3      	b.n	18f52 <radio_adv_enable+0x30a>
		ret_cb = TICKER_STATUS_BUSY;
   18faa:	ab0e      	add	r3, sp, #56	; 0x38
   18fac:	2202      	movs	r2, #2
   18fae:	f843 2d04 	str.w	r2, [r3, #-4]!
		ret =
   18fb2:	9308      	str	r3, [sp, #32]
   18fb4:	4b11      	ldr	r3, [pc, #68]	; (18ffc <radio_adv_enable+0x3b4>)
   18fb6:	9307      	str	r3, [sp, #28]
   18fb8:	2000      	movs	r0, #0
   18fba:	9006      	str	r0, [sp, #24]
   18fbc:	4b10      	ldr	r3, [pc, #64]	; (19000 <radio_adv_enable+0x3b8>)
   18fbe:	9305      	str	r3, [sp, #20]
   18fc0:	9004      	str	r0, [sp, #16]
   18fc2:	9003      	str	r0, [sp, #12]
   18fc4:	9002      	str	r0, [sp, #8]
   18fc6:	9001      	str	r0, [sp, #4]
   18fc8:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   18fcc:	9300      	str	r3, [sp, #0]
   18fce:	4623      	mov	r3, r4
   18fd0:	2203      	movs	r2, #3
   18fd2:	4611      	mov	r1, r2
   18fd4:	f7f7 fea8 	bl	10d28 <ticker_start>
	    !interval) {
   18fd8:	e6c4      	b.n	18d64 <radio_adv_enable+0x11c>
   18fda:	bf20      	wfe
  __ASM volatile ("sev");
   18fdc:	bf40      	sev
  __ASM volatile ("wfe");
   18fde:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   18fe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18fe2:	2b02      	cmp	r3, #2
   18fe4:	d0f9      	beq.n	18fda <radio_adv_enable+0x392>
   18fe6:	e6c0      	b.n	18d6a <radio_adv_enable+0x122>
			ll_adv_scan_state_cb(BIT(0));
   18fe8:	2001      	movs	r0, #1
   18fea:	f7ff fe24 	bl	18c36 <ll_adv_scan_state_cb>
		return 0;
   18fee:	2000      	movs	r0, #0
   18ff0:	e638      	b.n	18c64 <radio_adv_enable+0x1c>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18ff2:	2007      	movs	r0, #7
   18ff4:	e636      	b.n	18c64 <radio_adv_enable+0x1c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   18ff6:	200c      	movs	r0, #12
   18ff8:	e634      	b.n	18c64 <radio_adv_enable+0x1c>
   18ffa:	bf00      	nop
   18ffc:	0001170d 	.word	0x0001170d
   19000:	00012289 	.word	0x00012289

00019004 <radio_adv_disable>:
{
   19004:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   19006:	2103      	movs	r1, #3
   19008:	2005      	movs	r0, #5
   1900a:	f7f8 ffc1 	bl	11f90 <role_disable>
	if (!status) {
   1900e:	4604      	mov	r4, r0
   19010:	b9f0      	cbnz	r0, 19050 <radio_adv_disable+0x4c>
		_radio.advertiser.is_enabled = 0;
   19012:	4b13      	ldr	r3, [pc, #76]	; (19060 <radio_adv_disable+0x5c>)
   19014:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   19018:	f36f 0200 	bfc	r2, #0, #1
   1901c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   19020:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   19024:	f013 0f01 	tst.w	r3, #1
   19028:	d016      	beq.n	19058 <radio_adv_disable+0x54>
		conn = _radio.advertiser.conn;
   1902a:	4b0d      	ldr	r3, [pc, #52]	; (19060 <radio_adv_disable+0x5c>)
   1902c:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
		if (conn) {
   19030:	b175      	cbz	r5, 19050 <radio_adv_disable+0x4c>
			_radio.advertiser.conn = NULL;
   19032:	461e      	mov	r6, r3
   19034:	2300      	movs	r3, #0
   19036:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   1903a:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   1903e:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   19042:	f7f6 f9be 	bl	f3c2 <mem_release>
			mem_release(conn, &_radio.conn_free);
   19046:	f506 7184 	add.w	r1, r6, #264	; 0x108
   1904a:	4628      	mov	r0, r5
   1904c:	f7f6 f9b9 	bl	f3c2 <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   19050:	b104      	cbz	r4, 19054 <radio_adv_disable+0x50>
   19052:	240c      	movs	r4, #12
}
   19054:	4620      	mov	r0, r4
   19056:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   19058:	f7ff fded 	bl	18c36 <ll_adv_scan_state_cb>
   1905c:	e7e5      	b.n	1902a <radio_adv_disable+0x26>
   1905e:	bf00      	nop
   19060:	20000ff4 	.word	0x20000ff4
   19064:	00000000 	.word	0x00000000

00019068 <radio_scan_enable>:
{
   19068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1906c:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1906e:	2402      	movs	r4, #2
   19070:	940d      	str	r4, [sp, #52]	; 0x34
	if (_radio.scanner.is_enabled) {
   19072:	4c77      	ldr	r4, [pc, #476]	; (19250 <radio_scan_enable+0x1e8>)
   19074:	f894 40dc 	ldrb.w	r4, [r4, #220]	; 0xdc
   19078:	f014 0f01 	tst.w	r4, #1
   1907c:	d003      	beq.n	19086 <radio_scan_enable+0x1e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1907e:	200c      	movs	r0, #12
}
   19080:	b00f      	add	sp, #60	; 0x3c
   19082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19086:	461d      	mov	r5, r3
   19088:	4617      	mov	r7, r2
   1908a:	460e      	mov	r6, r1
	_radio.scanner.type = type;
   1908c:	4c70      	ldr	r4, [pc, #448]	; (19250 <radio_scan_enable+0x1e8>)
   1908e:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   19092:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   19096:	f3c0 0042 	ubfx	r0, r0, #1, #3
   1909a:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   1909e:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
   190a2:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
   190a6:	f361 0200 	bfi	r2, r1, #0, #1
   190aa:	f884 20de 	strb.w	r2, [r4, #222]	; 0xde
	_radio.scanner.rl_idx = rl_idx;
   190ae:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
   190b2:	f884 20df 	strb.w	r2, [r4, #223]	; 0xdf
	_radio.scanner.init_addr_type = init_addr_type;
   190b6:	f366 13c7 	bfi	r3, r6, #7, #1
   190ba:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   190be:	2206      	movs	r2, #6
   190c0:	4639      	mov	r1, r7
   190c2:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   190c6:	f7e7 f8fb 	bl	2c0 <memcpy>
		TICKER_US_TO_TICKS((u64_t) window * 625);
   190ca:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
   190ce:	4e61      	ldr	r6, [pc, #388]	; (19254 <radio_scan_enable+0x1ec>)
   190d0:	f04f 0a91 	mov.w	sl, #145	; 0x91
   190d4:	fba2 0106 	umull	r0, r1, r2, r6
   190d8:	fb0a 1102 	mla	r1, sl, r2, r1
   190dc:	a35a      	add	r3, pc, #360	; (adr r3, 19248 <radio_scan_enable+0x1e0>)
   190de:	e9d3 2300 	ldrd	r2, r3, [r3]
   190e2:	f7e8 f80b 	bl	10fc <__aeabi_uldivmod>
   190e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_window =
   190ea:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
	_radio.scanner.filter_policy = filter_policy;
   190ee:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   190f2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   190f6:	f362 1305 	bfi	r3, r2, #4, #2
   190fa:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
		_radio.ticks_active_to_start;
   190fe:	f8d4 9180 	ldr.w	r9, [r4, #384]	; 0x180
	_radio.scanner.hdr.ticks_active_to_start =
   19102:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_xtal_to_start =
   19106:	2327      	movs	r3, #39	; 0x27
   19108:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	_radio.scanner.hdr.ticks_preempt_to_start =
   1910c:	2300      	movs	r3, #0
   1910e:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		_radio.scanner.ticks_window +
   19112:	f100 0809 	add.w	r8, r0, #9
	_radio.scanner.hdr.ticks_slot =
   19116:	f8c4 80d8 	str.w	r8, [r4, #216]	; 0xd8
	ticks_interval = TICKER_US_TO_TICKS((u64_t) interval * 625);
   1911a:	b2aa      	uxth	r2, r5
   1911c:	fba2 6706 	umull	r6, r7, r2, r6
   19120:	fb0a 7702 	mla	r7, sl, r2, r7
   19124:	a348      	add	r3, pc, #288	; (adr r3, 19248 <radio_scan_enable+0x1e0>)
   19126:	e9d3 2300 	ldrd	r2, r3, [r3]
   1912a:	4630      	mov	r0, r6
   1912c:	4639      	mov	r1, r7
   1912e:	f7e7 ffe5 	bl	10fc <__aeabi_uldivmod>
   19132:	4604      	mov	r4, r0
   19134:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
	    (ticks_interval -
   19138:	f1aa 0327 	sub.w	r3, sl, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   1913c:	4598      	cmp	r8, r3
   1913e:	d902      	bls.n	19146 <radio_scan_enable+0xde>
		_radio.scanner.hdr.ticks_slot =
   19140:	4a43      	ldr	r2, [pc, #268]	; (19250 <radio_scan_enable+0x1e8>)
   19142:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	ticks_slot_offset =
   19146:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   1914a:	bf38      	it	cc
   1914c:	f04f 0927 	movcc.w	r9, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   19150:	f7f7 ff52 	bl	10ff8 <ticker_ticks_now_get>
   19154:	4683      	mov	fp, r0
	if ((_radio.scanner.conn) ||
   19156:	4b3e      	ldr	r3, [pc, #248]	; (19250 <radio_scan_enable+0x1e8>)
   19158:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   1915c:	2b00      	cmp	r3, #0
   1915e:	d045      	beq.n	191ec <radio_scan_enable+0x184>
		us_offset = 0;
   19160:	2300      	movs	r3, #0
   19162:	930c      	str	r3, [sp, #48]	; 0x30
			   (ticks_anchor + TICKER_US_TO_TICKS(us_offset)), 0,
   19164:	f04f 0800 	mov.w	r8, #0
   19168:	a337      	add	r3, pc, #220	; (adr r3, 19248 <radio_scan_enable+0x1e0>)
   1916a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1916e:	493a      	ldr	r1, [pc, #232]	; (19258 <radio_scan_enable+0x1f0>)
   19170:	980c      	ldr	r0, [sp, #48]	; 0x30
   19172:	fba0 0101 	umull	r0, r1, r0, r1
   19176:	f7e7 ffc1 	bl	10fc <__aeabi_uldivmod>
   1917a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1917e:	4483      	add	fp, r0
			   TICKER_REMAINDER((u64_t) interval * 625),
   19180:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   19184:	2500      	movs	r5, #0
   19186:	4835      	ldr	r0, [pc, #212]	; (1925c <radio_scan_enable+0x1f4>)
   19188:	2307      	movs	r3, #7
   1918a:	fb03 f304 	mul.w	r3, r3, r4
   1918e:	fb00 3305 	mla	r3, r0, r5, r3
   19192:	fba4 0100 	umull	r0, r1, r4, r0
   19196:	4419      	add	r1, r3
   19198:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1919c:	2300      	movs	r3, #0
   1919e:	1a30      	subs	r0, r6, r0
   191a0:	eb67 0101 	sbc.w	r1, r7, r1
   191a4:	f7e7 ffaa 	bl	10fc <__aeabi_uldivmod>
			    _radio.scanner.hdr.ticks_slot),
   191a8:	4b29      	ldr	r3, [pc, #164]	; (19250 <radio_scan_enable+0x1e8>)
   191aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   191ae:	4499      	add	r9, r3
   191b0:	fa1f f389 	uxth.w	r3, r9
   191b4:	aa0d      	add	r2, sp, #52	; 0x34
   191b6:	9208      	str	r2, [sp, #32]
   191b8:	4a29      	ldr	r2, [pc, #164]	; (19260 <radio_scan_enable+0x1f8>)
   191ba:	9207      	str	r2, [sp, #28]
   191bc:	f8cd 8018 	str.w	r8, [sp, #24]
   191c0:	4a28      	ldr	r2, [pc, #160]	; (19264 <radio_scan_enable+0x1fc>)
   191c2:	9205      	str	r2, [sp, #20]
   191c4:	9304      	str	r3, [sp, #16]
   191c6:	f8cd 800c 	str.w	r8, [sp, #12]
   191ca:	9002      	str	r0, [sp, #8]
   191cc:	f8cd a004 	str.w	sl, [sp, #4]
   191d0:	f8cd 8000 	str.w	r8, [sp]
   191d4:	465b      	mov	r3, fp
   191d6:	2206      	movs	r2, #6
   191d8:	2103      	movs	r1, #3
   191da:	4640      	mov	r0, r8
   191dc:	f7f7 fda4 	bl	10d28 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   191e0:	2802      	cmp	r0, #2
   191e2:	d017      	beq.n	19214 <radio_scan_enable+0x1ac>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   191e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   191e6:	b1cb      	cbz	r3, 1921c <radio_scan_enable+0x1b4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   191e8:	200c      	movs	r0, #12
   191ea:	e749      	b.n	19080 <radio_scan_enable+0x18>
		u32_t ticks_ref = 0;
   191ec:	2300      	movs	r3, #0
   191ee:	930b      	str	r3, [sp, #44]	; 0x2c
						_radio.scanner.hdr.ticks_slot),
   191f0:	4b17      	ldr	r3, [pc, #92]	; (19250 <radio_scan_enable+0x1e8>)
   191f2:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   191f6:	ab0c      	add	r3, sp, #48	; 0x30
   191f8:	aa0b      	add	r2, sp, #44	; 0x2c
   191fa:	4449      	add	r1, r9
   191fc:	2003      	movs	r0, #3
   191fe:	f7f9 ff63 	bl	130c8 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   19202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19204:	2b00      	cmp	r3, #0
   19206:	d0ad      	beq.n	19164 <radio_scan_enable+0xfc>
			ticks_anchor = ticks_ref;
   19208:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   1920c:	e7aa      	b.n	19164 <radio_scan_enable+0xfc>
   1920e:	bf20      	wfe
  __ASM volatile ("sev");
   19210:	bf40      	sev
  __ASM volatile ("wfe");
   19212:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   19214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19216:	2b02      	cmp	r3, #2
   19218:	d0f9      	beq.n	1920e <radio_scan_enable+0x1a6>
   1921a:	e7e3      	b.n	191e4 <radio_scan_enable+0x17c>
	_radio.scanner.is_enabled = 1;
   1921c:	4b0c      	ldr	r3, [pc, #48]	; (19250 <radio_scan_enable+0x1e8>)
   1921e:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   19222:	f042 0201 	orr.w	r2, r2, #1
   19226:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	if (!_radio.advertiser.is_enabled) {
   1922a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1922e:	f013 0f01 	tst.w	r3, #1
   19232:	d001      	beq.n	19238 <radio_scan_enable+0x1d0>
	return 0;
   19234:	2000      	movs	r0, #0
   19236:	e723      	b.n	19080 <radio_scan_enable+0x18>
		ll_adv_scan_state_cb(BIT(1));
   19238:	2002      	movs	r0, #2
   1923a:	f7ff fcfc 	bl	18c36 <ll_adv_scan_state_cb>
	return 0;
   1923e:	2000      	movs	r0, #0
   19240:	e71e      	b.n	19080 <radio_scan_enable+0x18>
   19242:	bf00      	nop
   19244:	f3af 8000 	nop.w
   19248:	1afd498d 	.word	0x1afd498d
   1924c:	00000007 	.word	0x00000007
   19250:	20000ff4 	.word	0x20000ff4
   19254:	84e72a00 	.word	0x84e72a00
   19258:	3b9aca00 	.word	0x3b9aca00
   1925c:	1afd498d 	.word	0x1afd498d
   19260:	0001170d 	.word	0x0001170d
   19264:	00016645 	.word	0x00016645

00019268 <radio_scan_disable>:
{
   19268:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   1926a:	2104      	movs	r1, #4
   1926c:	2006      	movs	r0, #6
   1926e:	f7f8 fe8f 	bl	11f90 <role_disable>
	if (!status) {
   19272:	4604      	mov	r4, r0
   19274:	b9f0      	cbnz	r0, 192b4 <radio_scan_disable+0x4c>
		_radio.scanner.is_enabled = 0;
   19276:	4b13      	ldr	r3, [pc, #76]	; (192c4 <radio_scan_disable+0x5c>)
   19278:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1927c:	f36f 0200 	bfc	r2, #0, #1
   19280:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		if (!_radio.advertiser.is_enabled) {
   19284:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   19288:	f013 0f01 	tst.w	r3, #1
   1928c:	d016      	beq.n	192bc <radio_scan_disable+0x54>
		conn = _radio.scanner.conn;
   1928e:	4b0d      	ldr	r3, [pc, #52]	; (192c4 <radio_scan_disable+0x5c>)
   19290:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
		if (conn) {
   19294:	b175      	cbz	r5, 192b4 <radio_scan_disable+0x4c>
			_radio.scanner.conn = NULL;
   19296:	461e      	mov	r6, r3
   19298:	2300      	movs	r3, #0
   1929a:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
			mem_release(conn->llcp_terminate.
   1929e:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   192a2:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   192a6:	f7f6 f88c 	bl	f3c2 <mem_release>
			mem_release(conn, &_radio.conn_free);
   192aa:	f506 7184 	add.w	r1, r6, #264	; 0x108
   192ae:	4628      	mov	r0, r5
   192b0:	f7f6 f887 	bl	f3c2 <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   192b4:	b104      	cbz	r4, 192b8 <radio_scan_disable+0x50>
   192b6:	240c      	movs	r4, #12
}
   192b8:	4620      	mov	r0, r4
   192ba:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   192bc:	f7ff fcbb 	bl	18c36 <ll_adv_scan_state_cb>
   192c0:	e7e5      	b.n	1928e <radio_scan_disable+0x26>
   192c2:	bf00      	nop
   192c4:	20000ff4 	.word	0x20000ff4

000192c8 <ll_connect_disable>:
{
   192c8:	b508      	push	{r3, lr}
	if (_radio.scanner.conn == 0) {
   192ca:	4b04      	ldr	r3, [pc, #16]	; (192dc <ll_connect_disable+0x14>)
   192cc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   192d0:	b113      	cbz	r3, 192d8 <ll_connect_disable+0x10>
	status = radio_scan_disable();
   192d2:	f7ff ffc9 	bl	19268 <radio_scan_disable>
	return status;
   192d6:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   192d8:	200c      	movs	r0, #12
}
   192da:	bd08      	pop	{r3, pc}
   192dc:	20000ff4 	.word	0x20000ff4

000192e0 <radio_rx_dequeue>:
{
   192e0:	b530      	push	{r4, r5, lr}
   192e2:	b083      	sub	sp, #12
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   192e4:	aa02      	add	r2, sp, #8
   192e6:	2300      	movs	r3, #0
   192e8:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   192ec:	4947      	ldr	r1, [pc, #284]	; (1940c <radio_rx_dequeue+0x12c>)
   192ee:	f8d1 014c 	ldr.w	r0, [r1, #332]	; 0x14c
   192f2:	f501 71a4 	add.w	r1, r1, #328	; 0x148
   192f6:	f7f6 f8c0 	bl	f47a <memq_dequeue>
	LL_ASSERT(link);
   192fa:	b178      	cbz	r0, 1931c <radio_rx_dequeue+0x3c>
	mem_release(link, &_radio.link_rx_free);
   192fc:	4944      	ldr	r1, [pc, #272]	; (19410 <radio_rx_dequeue+0x130>)
   192fe:	f7f6 f860 	bl	f3c2 <mem_release>
	switch (radio_pdu_node_rx->hdr.type) {
   19302:	9a01      	ldr	r2, [sp, #4]
   19304:	7913      	ldrb	r3, [r2, #4]
   19306:	3b01      	subs	r3, #1
   19308:	2b0b      	cmp	r3, #11
   1930a:	d824      	bhi.n	19356 <radio_rx_dequeue+0x76>
   1930c:	e8df f003 	tbb	[pc, r3]
   19310:	0c0c0c0c 	.word	0x0c0c0c0c
   19314:	0c180c0c 	.word	0x0c180c0c
   19318:	0c0c0c0c 	.word	0x0c0c0c0c
	LL_ASSERT(link);
   1931c:	4040      	eors	r0, r0
   1931e:	f380 8811 	msr	BASEPRI, r0
   19322:	f04f 0004 	mov.w	r0, #4
   19326:	df02      	svc	2
		LL_ASSERT(_radio.link_rx_data_quota <
   19328:	4938      	ldr	r1, [pc, #224]	; (1940c <radio_rx_dequeue+0x12c>)
   1932a:	f891 3150 	ldrb.w	r3, [r1, #336]	; 0x150
   1932e:	f891 113c 	ldrb.w	r1, [r1, #316]	; 0x13c
   19332:	3901      	subs	r1, #1
   19334:	428b      	cmp	r3, r1
   19336:	da08      	bge.n	1934a <radio_rx_dequeue+0x6a>
		_radio.link_rx_data_quota++;
   19338:	3301      	adds	r3, #1
   1933a:	4934      	ldr	r1, [pc, #208]	; (1940c <radio_rx_dequeue+0x12c>)
   1933c:	f881 3150 	strb.w	r3, [r1, #336]	; 0x150
	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   19340:	7913      	ldrb	r3, [r2, #4]
   19342:	2b06      	cmp	r3, #6
   19344:	d00d      	beq.n	19362 <radio_rx_dequeue+0x82>
}
   19346:	b003      	add	sp, #12
   19348:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(_radio.link_rx_data_quota <
   1934a:	4040      	eors	r0, r0
   1934c:	f380 8811 	msr	BASEPRI, r0
   19350:	f04f 0004 	mov.w	r0, #4
   19354:	df02      	svc	2
		LL_ASSERT(0);
   19356:	4040      	eors	r0, r0
   19358:	f380 8811 	msr	BASEPRI, r0
   1935c:	f04f 0004 	mov.w	r0, #4
   19360:	df02      	svc	2
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   19362:	7ad3      	ldrb	r3, [r2, #11]
   19364:	2b3c      	cmp	r3, #60	; 0x3c
   19366:	d002      	beq.n	1936e <radio_rx_dequeue+0x8e>
		    radio_le_conn_cmplt->role) {
   19368:	7b12      	ldrb	r2, [r2, #12]
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   1936a:	2a00      	cmp	r2, #0
   1936c:	d039      	beq.n	193e2 <radio_rx_dequeue+0x102>
			if (radio_le_conn_cmplt->status == 0x3c) {
   1936e:	2b3c      	cmp	r3, #60	; 0x3c
   19370:	d02a      	beq.n	193c8 <radio_rx_dequeue+0xe8>
		struct connection *conn = NULL;
   19372:	2400      	movs	r4, #0
			LL_ASSERT(_radio.advertiser.is_enabled);
   19374:	4b25      	ldr	r3, [pc, #148]	; (1940c <radio_rx_dequeue+0x12c>)
   19376:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1937a:	f013 0f01 	tst.w	r3, #1
   1937e:	d02a      	beq.n	193d6 <radio_rx_dequeue+0xf6>
			_radio.advertiser.is_enabled = 0;
   19380:	4b22      	ldr	r3, [pc, #136]	; (1940c <radio_rx_dequeue+0x12c>)
   19382:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   19386:	f36f 0200 	bfc	r2, #0, #1
   1938a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (conn) {
   1938e:	b15c      	cbz	r4, 193a8 <radio_rx_dequeue+0xc8>
			mem_release(node_rx->hdr.onion.link,
   19390:	4d1e      	ldr	r5, [pc, #120]	; (1940c <radio_rx_dequeue+0x12c>)
   19392:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   19396:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1939a:	f7f6 f812 	bl	f3c2 <mem_release>
			mem_release(conn, &_radio.conn_free);
   1939e:	f505 7184 	add.w	r1, r5, #264	; 0x108
   193a2:	4620      	mov	r0, r4
   193a4:	f7f6 f80d 	bl	f3c2 <mem_release>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   193a8:	4b18      	ldr	r3, [pc, #96]	; (1940c <radio_rx_dequeue+0x12c>)
   193aa:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   193ae:	f002 0201 	and.w	r2, r2, #1
		     _radio.advertiser.is_enabled;
   193b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   193b6:	f003 0301 	and.w	r3, r3, #1
		if (!bm) {
   193ba:	ea53 0342 	orrs.w	r3, r3, r2, lsl #1
   193be:	d1c2      	bne.n	19346 <radio_rx_dequeue+0x66>
			ll_adv_scan_state_cb(0);
   193c0:	2000      	movs	r0, #0
   193c2:	f7ff fc38 	bl	18c36 <ll_adv_scan_state_cb>
}
   193c6:	e7be      	b.n	19346 <radio_rx_dequeue+0x66>
				conn = _radio.advertiser.conn;
   193c8:	4b10      	ldr	r3, [pc, #64]	; (1940c <radio_rx_dequeue+0x12c>)
   193ca:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
				_radio.advertiser.conn = NULL;
   193ce:	2200      	movs	r2, #0
   193d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
   193d4:	e7ce      	b.n	19374 <radio_rx_dequeue+0x94>
			LL_ASSERT(_radio.advertiser.is_enabled);
   193d6:	4040      	eors	r0, r0
   193d8:	f380 8811 	msr	BASEPRI, r0
   193dc:	f04f 0004 	mov.w	r0, #4
   193e0:	df02      	svc	2
			LL_ASSERT(_radio.scanner.is_enabled);
   193e2:	4b0a      	ldr	r3, [pc, #40]	; (1940c <radio_rx_dequeue+0x12c>)
   193e4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   193e8:	f013 0f01 	tst.w	r3, #1
   193ec:	d008      	beq.n	19400 <radio_rx_dequeue+0x120>
			_radio.scanner.is_enabled = 0;
   193ee:	4b07      	ldr	r3, [pc, #28]	; (1940c <radio_rx_dequeue+0x12c>)
   193f0:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   193f4:	f36f 0200 	bfc	r2, #0, #1
   193f8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		struct connection *conn = NULL;
   193fc:	2400      	movs	r4, #0
   193fe:	e7c6      	b.n	1938e <radio_rx_dequeue+0xae>
			LL_ASSERT(_radio.scanner.is_enabled);
   19400:	4040      	eors	r0, r0
   19402:	f380 8811 	msr	BASEPRI, r0
   19406:	f04f 0004 	mov.w	r0, #4
   1940a:	df02      	svc	2
   1940c:	20000ff4 	.word	0x20000ff4
   19410:	20001138 	.word	0x20001138

00019414 <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   19414:	4668      	mov	r0, sp
   19416:	f020 0107 	bic.w	r1, r0, #7
   1941a:	468d      	mov	sp, r1
   1941c:	b501      	push	{r0, lr}
{
	isr_radio();
   1941e:	f7f6 f8e3 	bl	f5e8 <isr_radio>

	ISR_DIRECT_PM();
   19422:	f00e fb75 	bl	27b10 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   19426:	f00e f90f 	bl	27648 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1942a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1942e:	4685      	mov	sp, r0
   19430:	4770      	bx	lr
	...

00019434 <rtc0_nrf5_isr>:
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   19434:	b510      	push	{r4, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   19436:	4b0c      	ldr	r3, [pc, #48]	; (19468 <rtc0_nrf5_isr+0x34>)
   19438:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   1943c:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   19440:	b922      	cbnz	r2, 1944c <rtc0_nrf5_isr+0x18>

		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   19442:	b94c      	cbnz	r4, 19458 <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;

		ticker_trigger(1);
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   19444:	2000      	movs	r0, #0
   19446:	f7f5 fec1 	bl	f1cc <mayfly_run>
   1944a:	bd10      	pop	{r4, pc}
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1944c:	2000      	movs	r0, #0
   1944e:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   19452:	f7f7 fc5b 	bl	10d0c <ticker_trigger>
   19456:	e7f4      	b.n	19442 <rtc0_nrf5_isr+0xe>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   19458:	2200      	movs	r2, #0
   1945a:	4b03      	ldr	r3, [pc, #12]	; (19468 <rtc0_nrf5_isr+0x34>)
   1945c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		ticker_trigger(1);
   19460:	2001      	movs	r0, #1
   19462:	f7f7 fc53 	bl	10d0c <ticker_trigger>
   19466:	e7ed      	b.n	19444 <rtc0_nrf5_isr+0x10>
   19468:	4000b000 	.word	0x4000b000

0001946c <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
   1946c:	b508      	push	{r3, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
   1946e:	2001      	movs	r0, #1
   19470:	f7f5 feac 	bl	f1cc <mayfly_run>
   19474:	bd08      	pop	{r3, pc}

00019476 <rng_nrf5_isr>:
{
   19476:	b508      	push	{r3, lr}
	isr_rand(arg);
   19478:	f7f7 f9e2 	bl	10840 <isr_rand>
   1947c:	bd08      	pop	{r3, pc}

0001947e <mayfly_enable_cb>:
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   1947e:	2901      	cmp	r1, #1
   19480:	d105      	bne.n	1948e <mayfly_enable_cb+0x10>
{
   19482:	b508      	push	{r3, lr}
	if (enable) {
   19484:	b94a      	cbnz	r2, 1949a <mayfly_enable_cb+0x1c>
		irq_disable(SWI4_IRQn);
   19486:	2018      	movs	r0, #24
   19488:	f00e fb0c 	bl	27aa4 <_arch_irq_disable>
   1948c:	bd08      	pop	{r3, pc}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   1948e:	4040      	eors	r0, r0
   19490:	f380 8811 	msr	BASEPRI, r0
   19494:	f04f 0004 	mov.w	r0, #4
   19498:	df02      	svc	2
		irq_enable(SWI4_IRQn);
   1949a:	2018      	movs	r0, #24
   1949c:	f00e faf4 	bl	27a88 <_arch_irq_enable>
   194a0:	bd08      	pop	{r3, pc}

000194a2 <mayfly_is_enabled>:
{
   194a2:	b508      	push	{r3, lr}
	if (callee_id == MAYFLY_CALL_ID_0) {
   194a4:	b129      	cbz	r1, 194b2 <mayfly_is_enabled+0x10>
	} else if (callee_id == MAYFLY_CALL_ID_1) {
   194a6:	2901      	cmp	r1, #1
   194a8:	d107      	bne.n	194ba <mayfly_is_enabled+0x18>
		return irq_is_enabled(SWI4_IRQn);
   194aa:	2018      	movs	r0, #24
   194ac:	f00e fb08 	bl	27ac0 <_arch_irq_is_enabled>
   194b0:	bd08      	pop	{r3, pc}
		return irq_is_enabled(RTC0_IRQn);
   194b2:	200b      	movs	r0, #11
   194b4:	f00e fb04 	bl	27ac0 <_arch_irq_is_enabled>
   194b8:	bd08      	pop	{r3, pc}
	LL_ASSERT(0);
   194ba:	4040      	eors	r0, r0
   194bc:	f380 8811 	msr	BASEPRI, r0
   194c0:	f04f 0004 	mov.w	r0, #4
   194c4:	df02      	svc	2

000194c6 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_1)) ||
   194c6:	4288      	cmp	r0, r1
   194c8:	d009      	beq.n	194de <mayfly_prio_is_equal+0x18>
	return (caller_id == callee_id) ||
   194ca:	b908      	cbnz	r0, 194d0 <mayfly_prio_is_equal+0xa>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
   194cc:	2901      	cmp	r1, #1
   194ce:	d008      	beq.n	194e2 <mayfly_prio_is_equal+0x1c>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   194d0:	2801      	cmp	r0, #1
   194d2:	d001      	beq.n	194d8 <mayfly_prio_is_equal+0x12>
   194d4:	2000      	movs	r0, #0
   194d6:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_1) &&
   194d8:	b129      	cbz	r1, 194e6 <mayfly_prio_is_equal+0x20>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   194da:	2000      	movs	r0, #0
   194dc:	4770      	bx	lr
   194de:	2001      	movs	r0, #1
   194e0:	4770      	bx	lr
   194e2:	2001      	movs	r0, #1
   194e4:	4770      	bx	lr
   194e6:	2001      	movs	r0, #1
}
   194e8:	4770      	bx	lr
	...

000194ec <mayfly_pend>:
	switch (callee_id) {
   194ec:	b139      	cbz	r1, 194fe <mayfly_pend+0x12>
   194ee:	2901      	cmp	r1, #1
   194f0:	d00b      	beq.n	1950a <mayfly_pend+0x1e>
		LL_ASSERT(0);
   194f2:	4040      	eors	r0, r0
   194f4:	f380 8811 	msr	BASEPRI, r0
   194f8:	f04f 0004 	mov.w	r0, #4
   194fc:	df02      	svc	2
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   194fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19502:	4b05      	ldr	r3, [pc, #20]	; (19518 <mayfly_pend+0x2c>)
   19504:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19508:	4770      	bx	lr
   1950a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1950e:	4b02      	ldr	r3, [pc, #8]	; (19518 <mayfly_pend+0x2c>)
   19510:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19514:	4770      	bx	lr
   19516:	bf00      	nop
   19518:	e000e100 	.word	0xe000e100

0001951c <radio_active_callback>:
{
   1951c:	4770      	bx	lr
	...

00019520 <radio_event_callback>:
{
   19520:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   19522:	4b02      	ldr	r3, [pc, #8]	; (1952c <radio_event_callback+0xc>)
   19524:	6818      	ldr	r0, [r3, #0]
   19526:	f00f ff44 	bl	293b2 <_impl_k_sem_give>
   1952a:	bd08      	pop	{r3, pc}
   1952c:	20001918 	.word	0x20001918

00019530 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   19530:	b510      	push	{r4, lr}
   19532:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   19534:	4b37      	ldr	r3, [pc, #220]	; (19614 <ll_init+0xe4>)
   19536:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
   19538:	2204      	movs	r2, #4
   1953a:	2109      	movs	r1, #9
   1953c:	4836      	ldr	r0, [pc, #216]	; (19618 <ll_init+0xe8>)
   1953e:	f7f7 f957 	bl	107f0 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
   19542:	220c      	movs	r2, #12
   19544:	2111      	movs	r1, #17
   19546:	4835      	ldr	r0, [pc, #212]	; (1961c <ll_init+0xec>)
   19548:	f7f7 f95c 	bl	10804 <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   1954c:	4834      	ldr	r0, [pc, #208]	; (19620 <ll_init+0xf0>)
   1954e:	f00e fc69 	bl	27e24 <device_get_binding>
	if (!clk_k32) {
   19552:	2800      	cmp	r0, #0
   19554:	d054      	beq.n	19600 <ll_init+0xd0>
	const struct clock_control_driver_api *api = dev->driver_api;
   19556:	6842      	ldr	r2, [r0, #4]
	return api->on(dev, sys);
   19558:	6812      	ldr	r2, [r2, #0]
   1955a:	2101      	movs	r1, #1
   1955c:	4790      	blx	r2
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
   1955e:	f7f5 ffad 	bl	f4bc <cntr_init>

	mayfly_init();
   19562:	f7f5 fd67 	bl	f034 <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   19566:	4b2f      	ldr	r3, [pc, #188]	; (19624 <ll_init+0xf4>)
   19568:	2108      	movs	r1, #8
   1956a:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   1956c:	2203      	movs	r2, #3
   1956e:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   19570:	2000      	movs	r0, #0
   19572:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   19574:	2202      	movs	r2, #2
   19576:	761a      	strb	r2, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   19578:	4a2b      	ldr	r2, [pc, #172]	; (19628 <ll_init+0xf8>)
   1957a:	9202      	str	r2, [sp, #8]
   1957c:	220d      	movs	r2, #13
   1957e:	9201      	str	r2, [sp, #4]
   19580:	9300      	str	r3, [sp, #0]
   19582:	2304      	movs	r3, #4
   19584:	4a29      	ldr	r2, [pc, #164]	; (1962c <ll_init+0xfc>)
   19586:	f7f7 fb67 	bl	10c58 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   1958a:	4829      	ldr	r0, [pc, #164]	; (19630 <ll_init+0x100>)
   1958c:	f00e fc4a 	bl	27e24 <device_get_binding>
	if (!clk_m16) {
   19590:	2800      	cmp	r0, #0
   19592:	d038      	beq.n	19606 <ll_init+0xd6>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
   19594:	f44f 7357 	mov.w	r3, #860	; 0x35c
   19598:	9304      	str	r3, [sp, #16]
   1959a:	4b26      	ldr	r3, [pc, #152]	; (19634 <ll_init+0x104>)
   1959c:	9303      	str	r3, [sp, #12]
   1959e:	231b      	movs	r3, #27
   195a0:	9302      	str	r3, [sp, #8]
   195a2:	9301      	str	r3, [sp, #4]
   195a4:	2302      	movs	r3, #2
   195a6:	9300      	str	r3, [sp, #0]
   195a8:	2301      	movs	r3, #1
   195aa:	461a      	mov	r2, r3
   195ac:	2107      	movs	r1, #7
   195ae:	f7fe fccb 	bl	17f48 <radio_init>
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
   195b2:	bb58      	cbnz	r0, 1960c <ll_init+0xdc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
	}

	ll_filter_reset(true);
   195b4:	2001      	movs	r0, #1
   195b6:	f000 ffff 	bl	1a5b8 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   195ba:	2200      	movs	r2, #0
   195bc:	4611      	mov	r1, r2
   195be:	2001      	movs	r0, #1
   195c0:	f00e fa8c 	bl	27adc <_irq_priority_set>
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   195c4:	2200      	movs	r2, #0
   195c6:	4611      	mov	r1, r2
   195c8:	200b      	movs	r0, #11
   195ca:	f00e fa87 	bl	27adc <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   195ce:	2200      	movs	r2, #0
   195d0:	4611      	mov	r1, r2
   195d2:	2018      	movs	r0, #24
   195d4:	f00e fa82 	bl	27adc <_irq_priority_set>
		    NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
   195d8:	2200      	movs	r2, #0
   195da:	2101      	movs	r1, #1
   195dc:	200d      	movs	r0, #13
   195de:	f00e fa7d 	bl	27adc <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
   195e2:	2001      	movs	r0, #1
   195e4:	f00e fa50 	bl	27a88 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   195e8:	200b      	movs	r0, #11
   195ea:	f00e fa4d 	bl	27a88 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   195ee:	2018      	movs	r0, #24
   195f0:	f00e fa4a 	bl	27a88 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
   195f4:	200d      	movs	r0, #13
   195f6:	f00e fa47 	bl	27a88 <_arch_irq_enable>

	return 0;
   195fa:	2000      	movs	r0, #0
}
   195fc:	b006      	add	sp, #24
   195fe:	bd10      	pop	{r4, pc}
		return -ENODEV;
   19600:	f06f 0012 	mvn.w	r0, #18
   19604:	e7fa      	b.n	195fc <ll_init+0xcc>
		return -ENODEV;
   19606:	f06f 0012 	mvn.w	r0, #18
   1960a:	e7f7      	b.n	195fc <ll_init+0xcc>
		return -ENOMEM;
   1960c:	f06f 000b 	mvn.w	r0, #11
   19610:	e7f4      	b.n	195fc <ll_init+0xcc>
   19612:	bf00      	nop
   19614:	20001918 	.word	0x20001918
   19618:	200018f8 	.word	0x200018f8
   1961c:	20001904 	.word	0x20001904
   19620:	0002ea88 	.word	0x0002ea88
   19624:	200018d8 	.word	0x200018d8
   19628:	2000169c 	.word	0x2000169c
   1962c:	2000157c 	.word	0x2000157c
   19630:	0002ea94 	.word	0x0002ea94
   19634:	2000117c 	.word	0x2000117c

00019638 <ll_addr_get>:
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
   19638:	2801      	cmp	r0, #1
   1963a:	d814      	bhi.n	19666 <ll_addr_get+0x2e>
{
   1963c:	b538      	push	{r3, r4, r5, lr}
   1963e:	460c      	mov	r4, r1
		return NULL;
	}

	if (addr_type) {
   19640:	b140      	cbz	r0, 19654 <ll_addr_get+0x1c>
		if (bdaddr) {
   19642:	b191      	cbz	r1, 1966a <ll_addr_get+0x32>
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
   19644:	4d0b      	ldr	r5, [pc, #44]	; (19674 <ll_addr_get+0x3c>)
   19646:	2206      	movs	r2, #6
   19648:	4629      	mov	r1, r5
   1964a:	4620      	mov	r0, r4
   1964c:	f7e6 fe38 	bl	2c0 <memcpy>
		}

		return _ll_context.rnd_addr;
   19650:	4628      	mov	r0, r5
   19652:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (bdaddr) {
   19654:	b159      	cbz	r1, 1966e <ll_addr_get+0x36>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
   19656:	4d08      	ldr	r5, [pc, #32]	; (19678 <ll_addr_get+0x40>)
   19658:	2206      	movs	r2, #6
   1965a:	4629      	mov	r1, r5
   1965c:	4620      	mov	r0, r4
   1965e:	f7e6 fe2f 	bl	2c0 <memcpy>
	}

	return _ll_context.pub_addr;
   19662:	4628      	mov	r0, r5
   19664:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   19666:	2000      	movs	r0, #0
   19668:	4770      	bx	lr
		return _ll_context.rnd_addr;
   1966a:	4802      	ldr	r0, [pc, #8]	; (19674 <ll_addr_get+0x3c>)
   1966c:	bd38      	pop	{r3, r4, r5, pc}
	return _ll_context.pub_addr;
   1966e:	4802      	ldr	r0, [pc, #8]	; (19678 <ll_addr_get+0x40>)
}
   19670:	bd38      	pop	{r3, r4, r5, pc}
   19672:	bf00      	nop
   19674:	20001576 	.word	0x20001576
   19678:	20001570 	.word	0x20001570

0001967c <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   1967c:	b508      	push	{r3, lr}
	if (addr_type) {
   1967e:	b920      	cbnz	r0, 1968a <ll_addr_set+0xe>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
   19680:	2206      	movs	r2, #6
   19682:	4804      	ldr	r0, [pc, #16]	; (19694 <ll_addr_set+0x18>)
   19684:	f7e6 fe1c 	bl	2c0 <memcpy>
   19688:	bd08      	pop	{r3, pc}
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
   1968a:	2206      	movs	r2, #6
   1968c:	4802      	ldr	r0, [pc, #8]	; (19698 <ll_addr_set+0x1c>)
   1968e:	f7e6 fe17 	bl	2c0 <memcpy>
   19692:	bd08      	pop	{r3, pc}
   19694:	20001570 	.word	0x20001570
   19698:	20001576 	.word	0x20001576

0001969c <wl_clear>:
	for (int i = 0; i < WL_SIZE; i++) {
   1969c:	2300      	movs	r3, #0
   1969e:	e007      	b.n	196b0 <wl_clear+0x14>
		wl[i].taken = 0;
   196a0:	4a05      	ldr	r2, [pc, #20]	; (196b8 <wl_clear+0x1c>)
   196a2:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   196a6:	f36f 0100 	bfc	r1, #0, #1
   196aa:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   196ae:	3301      	adds	r3, #1
   196b0:	2b07      	cmp	r3, #7
   196b2:	ddf5      	ble.n	196a0 <wl_clear+0x4>
}
   196b4:	4770      	bx	lr
   196b6:	bf00      	nop
   196b8:	20001b50 	.word	0x20001b50

000196bc <filter_clear>:
	filter->enable_bitmask = 0;
   196bc:	2300      	movs	r3, #0
   196be:	7003      	strb	r3, [r0, #0]
	filter->addr_type_bitmask = 0;
   196c0:	7043      	strb	r3, [r0, #1]
   196c2:	4770      	bx	lr

000196c4 <rl_clear>:
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   196c4:	2300      	movs	r3, #0
   196c6:	e009      	b.n	196dc <rl_clear+0x18>
		rl[i].taken = 0;
   196c8:	4907      	ldr	r1, [pc, #28]	; (196e8 <rl_clear+0x24>)
   196ca:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   196ce:	00c2      	lsls	r2, r0, #3
   196d0:	5c88      	ldrb	r0, [r1, r2]
   196d2:	f36f 0000 	bfc	r0, #0, #1
   196d6:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   196d8:	3301      	adds	r3, #1
   196da:	b2db      	uxtb	r3, r3
   196dc:	2b07      	cmp	r3, #7
   196de:	d9f3      	bls.n	196c8 <rl_clear+0x4>
	peer_irk_count = 0;
   196e0:	2200      	movs	r2, #0
   196e2:	4b02      	ldr	r3, [pc, #8]	; (196ec <rl_clear+0x28>)
   196e4:	701a      	strb	r2, [r3, #0]
   196e6:	4770      	bx	lr
   196e8:	200019d8 	.word	0x200019d8
   196ec:	2000194c 	.word	0x2000194c

000196f0 <wl_find>:
{
   196f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   196f2:	4606      	mov	r6, r0
   196f4:	460f      	mov	r7, r1
	if (free) {
   196f6:	4615      	mov	r5, r2
   196f8:	b10a      	cbz	r2, 196fe <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   196fa:	23ff      	movs	r3, #255	; 0xff
   196fc:	7013      	strb	r3, [r2, #0]
{
   196fe:	2400      	movs	r4, #0
   19700:	e00c      	b.n	1971c <wl_find+0x2c>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19702:	4816      	ldr	r0, [pc, #88]	; (1975c <wl_find+0x6c>)
   19704:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   19708:	2206      	movs	r2, #6
   1970a:	4639      	mov	r1, r7
   1970c:	3002      	adds	r0, #2
   1970e:	f011 f86f 	bl	2a7f0 <memcmp>
   19712:	b9a0      	cbnz	r0, 1973e <wl_find+0x4e>
			return i;
   19714:	b2e0      	uxtb	r0, r4
   19716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*free = i;
   19718:	702c      	strb	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   1971a:	3401      	adds	r4, #1
   1971c:	2c07      	cmp	r4, #7
   1971e:	dc1a      	bgt.n	19756 <wl_find+0x66>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19720:	4b0e      	ldr	r3, [pc, #56]	; (1975c <wl_find+0x6c>)
   19722:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   19726:	f013 0f01 	tst.w	r3, #1
   1972a:	d008      	beq.n	1973e <wl_find+0x4e>
   1972c:	4b0b      	ldr	r3, [pc, #44]	; (1975c <wl_find+0x6c>)
   1972e:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   19732:	f3c3 0340 	ubfx	r3, r3, #1, #1
   19736:	f006 0201 	and.w	r2, r6, #1
   1973a:	4293      	cmp	r3, r2
   1973c:	d0e1      	beq.n	19702 <wl_find+0x12>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1973e:	2d00      	cmp	r5, #0
   19740:	d0eb      	beq.n	1971a <wl_find+0x2a>
   19742:	4b06      	ldr	r3, [pc, #24]	; (1975c <wl_find+0x6c>)
   19744:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   19748:	f013 0f01 	tst.w	r3, #1
   1974c:	d1e5      	bne.n	1971a <wl_find+0x2a>
   1974e:	782b      	ldrb	r3, [r5, #0]
   19750:	2bff      	cmp	r3, #255	; 0xff
   19752:	d1e2      	bne.n	1971a <wl_find+0x2a>
   19754:	e7e0      	b.n	19718 <wl_find+0x28>
	return FILTER_IDX_NONE;
   19756:	20ff      	movs	r0, #255	; 0xff
}
   19758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1975a:	bf00      	nop
   1975c:	20001b50 	.word	0x20001b50

00019760 <wl_remove>:
{
   19760:	b508      	push	{r3, lr}
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   19762:	4601      	mov	r1, r0
   19764:	f811 0b01 	ldrb.w	r0, [r1], #1
   19768:	2200      	movs	r2, #0
   1976a:	f7ff ffc1 	bl	196f0 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1976e:	2807      	cmp	r0, #7
   19770:	d901      	bls.n	19776 <wl_remove+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19772:	2002      	movs	r0, #2
}
   19774:	bd08      	pop	{r3, pc}
		u8_t j = wl[i].rl_idx;
   19776:	4b0b      	ldr	r3, [pc, #44]	; (197a4 <wl_remove+0x44>)
   19778:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1977c:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1977e:	2b07      	cmp	r3, #7
   19780:	d807      	bhi.n	19792 <wl_remove+0x32>
			rl[j].wl = 0;
   19782:	4909      	ldr	r1, [pc, #36]	; (197a8 <wl_remove+0x48>)
   19784:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   19788:	00da      	lsls	r2, r3, #3
   1978a:	5c8b      	ldrb	r3, [r1, r2]
   1978c:	f36f 1345 	bfc	r3, #5, #1
   19790:	548b      	strb	r3, [r1, r2]
		wl[i].taken = 0;
   19792:	4b04      	ldr	r3, [pc, #16]	; (197a4 <wl_remove+0x44>)
   19794:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   19798:	f36f 0200 	bfc	r2, #0, #1
   1979c:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
		return 0;
   197a0:	2000      	movs	r0, #0
   197a2:	bd08      	pop	{r3, pc}
   197a4:	20001b50 	.word	0x20001b50
   197a8:	200019d8 	.word	0x200019d8

000197ac <filter_insert>:
{
   197ac:	b538      	push	{r3, r4, r5, lr}
	filter->enable_bitmask |= BIT(index);
   197ae:	2401      	movs	r4, #1
   197b0:	fa04 f501 	lsl.w	r5, r4, r1
   197b4:	7804      	ldrb	r4, [r0, #0]
   197b6:	432c      	orrs	r4, r5
   197b8:	7004      	strb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   197ba:	f002 0201 	and.w	r2, r2, #1
   197be:	fa02 f401 	lsl.w	r4, r2, r1
   197c2:	7842      	ldrb	r2, [r0, #1]
   197c4:	4322      	orrs	r2, r4
   197c6:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   197c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   197cc:	004a      	lsls	r2, r1, #1
   197ce:	4410      	add	r0, r2
   197d0:	2206      	movs	r2, #6
   197d2:	4619      	mov	r1, r3
   197d4:	3002      	adds	r0, #2
   197d6:	f7e6 fd73 	bl	2c0 <memcpy>
   197da:	bd38      	pop	{r3, r4, r5, pc}

000197dc <filter_wl_update>:
{
   197dc:	b510      	push	{r4, lr}
	filter_clear(&wl_filter);
   197de:	481b      	ldr	r0, [pc, #108]	; (1984c <filter_wl_update+0x70>)
   197e0:	f7ff ff6c 	bl	196bc <filter_clear>
	for (i = 0; i < WL_SIZE; i++) {
   197e4:	2400      	movs	r4, #0
   197e6:	e00c      	b.n	19802 <filter_wl_update+0x26>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   197e8:	4b19      	ldr	r3, [pc, #100]	; (19850 <filter_wl_update+0x74>)
   197ea:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
				      wl[i].id_addr.val);
   197ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   197f2:	3302      	adds	r3, #2
   197f4:	f3c2 0240 	ubfx	r2, r2, #1, #1
   197f8:	4814      	ldr	r0, [pc, #80]	; (1984c <filter_wl_update+0x70>)
   197fa:	f7ff ffd7 	bl	197ac <filter_insert>
	for (i = 0; i < WL_SIZE; i++) {
   197fe:	3401      	adds	r4, #1
   19800:	b2e4      	uxtb	r4, r4
   19802:	2c07      	cmp	r4, #7
   19804:	d820      	bhi.n	19848 <filter_wl_update+0x6c>
		if (!wl[i].taken) {
   19806:	4621      	mov	r1, r4
   19808:	4b11      	ldr	r3, [pc, #68]	; (19850 <filter_wl_update+0x74>)
   1980a:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   1980e:	f013 0f01 	tst.w	r3, #1
   19812:	d0f4      	beq.n	197fe <filter_wl_update+0x22>
		j = wl[i].rl_idx;
   19814:	4b0e      	ldr	r3, [pc, #56]	; (19850 <filter_wl_update+0x74>)
   19816:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1981a:	785b      	ldrb	r3, [r3, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1981c:	4a0d      	ldr	r2, [pc, #52]	; (19854 <filter_wl_update+0x78>)
   1981e:	7812      	ldrb	r2, [r2, #0]
   19820:	2a00      	cmp	r2, #0
   19822:	d0e1      	beq.n	197e8 <filter_wl_update+0xc>
   19824:	2b07      	cmp	r3, #7
   19826:	d8df      	bhi.n	197e8 <filter_wl_update+0xc>
   19828:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1982c:	00c2      	lsls	r2, r0, #3
   1982e:	480a      	ldr	r0, [pc, #40]	; (19858 <filter_wl_update+0x7c>)
   19830:	5c82      	ldrb	r2, [r0, r2]
   19832:	f012 0f04 	tst.w	r2, #4
   19836:	d0d7      	beq.n	197e8 <filter_wl_update+0xc>
		    rl[j].dev) {
   19838:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1983c:	00da      	lsls	r2, r3, #3
   1983e:	5c83      	ldrb	r3, [r0, r2]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19840:	f013 0f10 	tst.w	r3, #16
   19844:	d0db      	beq.n	197fe <filter_wl_update+0x22>
   19846:	e7cf      	b.n	197e8 <filter_wl_update+0xc>
}
   19848:	bd10      	pop	{r4, pc}
   1984a:	bf00      	nop
   1984c:	20001b90 	.word	0x20001b90
   19850:	20001b50 	.word	0x20001b50
   19854:	20001b18 	.word	0x20001b18
   19858:	200019d8 	.word	0x200019d8

0001985c <filter_rl_update>:
{
   1985c:	b510      	push	{r4, lr}
	filter_clear(&rl_filter);
   1985e:	4810      	ldr	r0, [pc, #64]	; (198a0 <filter_rl_update+0x44>)
   19860:	f7ff ff2c 	bl	196bc <filter_clear>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19864:	2400      	movs	r4, #0
   19866:	e001      	b.n	1986c <filter_rl_update+0x10>
   19868:	3401      	adds	r4, #1
   1986a:	b2e4      	uxtb	r4, r4
   1986c:	2c07      	cmp	r4, #7
   1986e:	d815      	bhi.n	1989c <filter_rl_update+0x40>
		if (rl[i].taken) {
   19870:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19874:	00d3      	lsls	r3, r2, #3
   19876:	4a0b      	ldr	r2, [pc, #44]	; (198a4 <filter_rl_update+0x48>)
   19878:	5cd3      	ldrb	r3, [r2, r3]
   1987a:	f013 0f01 	tst.w	r3, #1
   1987e:	d0f3      	beq.n	19868 <filter_rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   19880:	4611      	mov	r1, r2
   19882:	00a3      	lsls	r3, r4, #2
   19884:	4423      	add	r3, r4
   19886:	00da      	lsls	r2, r3, #3
   19888:	188b      	adds	r3, r1, r2
   1988a:	5c8a      	ldrb	r2, [r1, r2]
   1988c:	3301      	adds	r3, #1
   1988e:	f3c2 1280 	ubfx	r2, r2, #6, #1
   19892:	4621      	mov	r1, r4
   19894:	4802      	ldr	r0, [pc, #8]	; (198a0 <filter_rl_update+0x44>)
   19896:	f7ff ff89 	bl	197ac <filter_insert>
   1989a:	e7e5      	b.n	19868 <filter_rl_update+0xc>
}
   1989c:	bd10      	pop	{r4, pc}
   1989e:	bf00      	nop
   198a0:	20001b1c 	.word	0x20001b1c
   198a4:	200019d8 	.word	0x200019d8

000198a8 <rl_access_check>:
{
   198a8:	b508      	push	{r3, lr}
	if (check_ar) {
   198aa:	b110      	cbz	r0, 198b2 <rl_access_check+0xa>
		if (!rl_enable) {
   198ac:	4b08      	ldr	r3, [pc, #32]	; (198d0 <rl_access_check+0x28>)
   198ae:	781b      	ldrb	r3, [r3, #0]
   198b0:	b15b      	cbz	r3, 198ca <rl_access_check+0x22>
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   198b2:	f7fe fc27 	bl	18104 <radio_adv_is_enabled>
   198b6:	b108      	cbz	r0, 198bc <rl_access_check+0x14>
   198b8:	2000      	movs	r0, #0
   198ba:	bd08      	pop	{r3, pc}
   198bc:	f7fe fc3a 	bl	18134 <radio_scan_is_enabled>
   198c0:	b108      	cbz	r0, 198c6 <rl_access_check+0x1e>
   198c2:	2000      	movs	r0, #0
}
   198c4:	bd08      	pop	{r3, pc}
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   198c6:	2001      	movs	r0, #1
   198c8:	bd08      	pop	{r3, pc}
			return -1;
   198ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   198ce:	bd08      	pop	{r3, pc}
   198d0:	20001b18 	.word	0x20001b18

000198d4 <rpa_refresh_start>:
{
   198d4:	b508      	push	{r3, lr}
	if (!rl_enable) {
   198d6:	4b05      	ldr	r3, [pc, #20]	; (198ec <rpa_refresh_start+0x18>)
   198d8:	781b      	ldrb	r3, [r3, #0]
   198da:	b903      	cbnz	r3, 198de <rpa_refresh_start+0xa>
   198dc:	bd08      	pop	{r3, pc}
   198de:	4b04      	ldr	r3, [pc, #16]	; (198f0 <rpa_refresh_start+0x1c>)
   198e0:	681a      	ldr	r2, [r3, #0]
   198e2:	4904      	ldr	r1, [pc, #16]	; (198f4 <rpa_refresh_start+0x20>)
   198e4:	4804      	ldr	r0, [pc, #16]	; (198f8 <rpa_refresh_start+0x24>)
   198e6:	f010 fbad 	bl	2a044 <k_delayed_work_submit_to_queue>
   198ea:	e7f7      	b.n	198dc <rpa_refresh_start+0x8>
   198ec:	20001b18 	.word	0x20001b18
   198f0:	20002c64 	.word	0x20002c64
   198f4:	20002b30 	.word	0x20002b30
   198f8:	20002c78 	.word	0x20002c78

000198fc <rpa_refresh_stop>:
{
   198fc:	b508      	push	{r3, lr}
	if (!rl_enable) {
   198fe:	4b04      	ldr	r3, [pc, #16]	; (19910 <rpa_refresh_stop+0x14>)
   19900:	781b      	ldrb	r3, [r3, #0]
   19902:	b903      	cbnz	r3, 19906 <rpa_refresh_stop+0xa>
   19904:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&rpa_work);
   19906:	4803      	ldr	r0, [pc, #12]	; (19914 <rpa_refresh_stop+0x18>)
   19908:	f010 fb42 	bl	29f90 <k_delayed_work_cancel>
   1990c:	e7fa      	b.n	19904 <rpa_refresh_stop+0x8>
   1990e:	bf00      	nop
   19910:	20001b18 	.word	0x20001b18
   19914:	20002b30 	.word	0x20002b30

00019918 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   19918:	2807      	cmp	r0, #7
   1991a:	d816      	bhi.n	1994a <ctrl_lrpa_get+0x32>
   1991c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19920:	00d3      	lsls	r3, r2, #3
   19922:	4a0d      	ldr	r2, [pc, #52]	; (19958 <ctrl_lrpa_get+0x40>)
   19924:	5cd3      	ldrb	r3, [r2, r3]
   19926:	f013 0f08 	tst.w	r3, #8
   1992a:	d010      	beq.n	1994e <ctrl_lrpa_get+0x36>
	    !rl[rl_idx].rpas_ready) {
   1992c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19930:	00d3      	lsls	r3, r2, #3
   19932:	4a09      	ldr	r2, [pc, #36]	; (19958 <ctrl_lrpa_get+0x40>)
   19934:	5cd3      	ldrb	r3, [r2, r3]
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   19936:	f013 0f02 	tst.w	r3, #2
   1993a:	d00a      	beq.n	19952 <ctrl_lrpa_get+0x3a>
	return rl[rl_idx].local_rpa;
   1993c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19940:	00c2      	lsls	r2, r0, #3
   19942:	4b05      	ldr	r3, [pc, #20]	; (19958 <ctrl_lrpa_get+0x40>)
   19944:	4413      	add	r3, r2
   19946:	6a58      	ldr	r0, [r3, #36]	; 0x24
   19948:	4770      	bx	lr
		return NULL;
   1994a:	2000      	movs	r0, #0
   1994c:	4770      	bx	lr
   1994e:	2000      	movs	r0, #0
   19950:	4770      	bx	lr
   19952:	2000      	movs	r0, #0
}
   19954:	4770      	bx	lr
   19956:	bf00      	nop
   19958:	200019d8 	.word	0x200019d8

0001995c <ctrl_irks_get>:
	*count = peer_irk_count;
   1995c:	4b02      	ldr	r3, [pc, #8]	; (19968 <ctrl_irks_get+0xc>)
   1995e:	781b      	ldrb	r3, [r3, #0]
   19960:	7003      	strb	r3, [r0, #0]
}
   19962:	4802      	ldr	r0, [pc, #8]	; (1996c <ctrl_irks_get+0x10>)
   19964:	4770      	bx	lr
   19966:	bf00      	nop
   19968:	2000194c 	.word	0x2000194c
   1996c:	20001958 	.word	0x20001958

00019970 <ctrl_rl_idx>:
	if (whitelist) {
   19970:	b1c8      	cbz	r0, 199a6 <ctrl_rl_idx+0x36>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   19972:	2907      	cmp	r1, #7
   19974:	d80b      	bhi.n	1998e <ctrl_rl_idx+0x1e>
		LL_ASSERT(wl[devmatch_id].taken);
   19976:	4b17      	ldr	r3, [pc, #92]	; (199d4 <ctrl_rl_idx+0x64>)
   19978:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
   1997c:	f013 0f01 	tst.w	r3, #1
   19980:	d00b      	beq.n	1999a <ctrl_rl_idx+0x2a>
		i = wl[devmatch_id].rl_idx;
   19982:	4b14      	ldr	r3, [pc, #80]	; (199d4 <ctrl_rl_idx+0x64>)
   19984:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   19988:	7849      	ldrb	r1, [r1, #1]
}
   1998a:	4608      	mov	r0, r1
   1998c:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1998e:	4040      	eors	r0, r0
   19990:	f380 8811 	msr	BASEPRI, r0
   19994:	f04f 0004 	mov.w	r0, #4
   19998:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   1999a:	4040      	eors	r0, r0
   1999c:	f380 8811 	msr	BASEPRI, r0
   199a0:	f04f 0004 	mov.w	r0, #4
   199a4:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   199a6:	2907      	cmp	r1, #7
   199a8:	d80d      	bhi.n	199c6 <ctrl_rl_idx+0x56>
		LL_ASSERT(rl[i].taken);
   199aa:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   199ae:	00d3      	lsls	r3, r2, #3
   199b0:	4a09      	ldr	r2, [pc, #36]	; (199d8 <ctrl_rl_idx+0x68>)
   199b2:	5cd3      	ldrb	r3, [r2, r3]
   199b4:	f013 0f01 	tst.w	r3, #1
   199b8:	d1e7      	bne.n	1998a <ctrl_rl_idx+0x1a>
   199ba:	4040      	eors	r0, r0
   199bc:	f380 8811 	msr	BASEPRI, r0
   199c0:	f04f 0004 	mov.w	r0, #4
   199c4:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   199c6:	4040      	eors	r0, r0
   199c8:	f380 8811 	msr	BASEPRI, r0
   199cc:	f04f 0004 	mov.w	r0, #4
   199d0:	df02      	svc	2
   199d2:	bf00      	nop
   199d4:	20001b50 	.word	0x20001b50
   199d8:	200019d8 	.word	0x200019d8

000199dc <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
   199dc:	4b11      	ldr	r3, [pc, #68]	; (19a24 <ctrl_rl_irk_idx+0x48>)
   199de:	781b      	ldrb	r3, [r3, #0]
   199e0:	4283      	cmp	r3, r0
   199e2:	d90c      	bls.n	199fe <ctrl_rl_irk_idx+0x22>
	i = peer_irk_rl_ids[irkmatch_id];
   199e4:	4b10      	ldr	r3, [pc, #64]	; (19a28 <ctrl_rl_irk_idx+0x4c>)
   199e6:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   199e8:	2807      	cmp	r0, #7
   199ea:	d80e      	bhi.n	19a0a <ctrl_rl_irk_idx+0x2e>
	LL_ASSERT(rl[i].taken);
   199ec:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   199f0:	00d3      	lsls	r3, r2, #3
   199f2:	4a0e      	ldr	r2, [pc, #56]	; (19a2c <ctrl_rl_irk_idx+0x50>)
   199f4:	5cd3      	ldrb	r3, [r2, r3]
   199f6:	f013 0f01 	tst.w	r3, #1
   199fa:	d00c      	beq.n	19a16 <ctrl_rl_irk_idx+0x3a>
}
   199fc:	4770      	bx	lr
	LL_ASSERT(irkmatch_id < peer_irk_count);
   199fe:	4040      	eors	r0, r0
   19a00:	f380 8811 	msr	BASEPRI, r0
   19a04:	f04f 0004 	mov.w	r0, #4
   19a08:	df02      	svc	2
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19a0a:	4040      	eors	r0, r0
   19a0c:	f380 8811 	msr	BASEPRI, r0
   19a10:	f04f 0004 	mov.w	r0, #4
   19a14:	df02      	svc	2
	LL_ASSERT(rl[i].taken);
   19a16:	4040      	eors	r0, r0
   19a18:	f380 8811 	msr	BASEPRI, r0
   19a1c:	f04f 0004 	mov.w	r0, #4
   19a20:	df02      	svc	2
   19a22:	bf00      	nop
   19a24:	2000194c 	.word	0x2000194c
   19a28:	20001950 	.word	0x20001950
   19a2c:	200019d8 	.word	0x200019d8

00019a30 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   19a30:	2807      	cmp	r0, #7
   19a32:	d815      	bhi.n	19a60 <ctrl_irk_whitelisted+0x30>
	LL_ASSERT(rl[rl_idx].taken);
   19a34:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19a38:	00d3      	lsls	r3, r2, #3
   19a3a:	4a0a      	ldr	r2, [pc, #40]	; (19a64 <ctrl_irk_whitelisted+0x34>)
   19a3c:	5cd3      	ldrb	r3, [r2, r3]
   19a3e:	f013 0f01 	tst.w	r3, #1
   19a42:	d007      	beq.n	19a54 <ctrl_irk_whitelisted+0x24>
	return rl[rl_idx].wl;
   19a44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19a48:	00c3      	lsls	r3, r0, #3
   19a4a:	4a06      	ldr	r2, [pc, #24]	; (19a64 <ctrl_irk_whitelisted+0x34>)
   19a4c:	5cd0      	ldrb	r0, [r2, r3]
   19a4e:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19a52:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   19a54:	4040      	eors	r0, r0
   19a56:	f380 8811 	msr	BASEPRI, r0
   19a5a:	f04f 0004 	mov.w	r0, #4
   19a5e:	df02      	svc	2
		return false;
   19a60:	2000      	movs	r0, #0
}
   19a62:	4770      	bx	lr
   19a64:	200019d8 	.word	0x200019d8

00019a68 <ctrl_filter_get>:
	if (whitelist) {
   19a68:	b908      	cbnz	r0, 19a6e <ctrl_filter_get+0x6>
	return &rl_filter;
   19a6a:	4802      	ldr	r0, [pc, #8]	; (19a74 <ctrl_filter_get+0xc>)
}
   19a6c:	4770      	bx	lr
		return &wl_filter;
   19a6e:	4802      	ldr	r0, [pc, #8]	; (19a78 <ctrl_filter_get+0x10>)
   19a70:	4770      	bx	lr
   19a72:	bf00      	nop
   19a74:	20001b1c 	.word	0x20001b1c
   19a78:	20001b90 	.word	0x20001b90

00019a7c <ll_wl_size_get>:
}
   19a7c:	2008      	movs	r0, #8
   19a7e:	4770      	bx	lr

00019a80 <ll_wl_clear>:
{
   19a80:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19a82:	f7fe fb47 	bl	18114 <radio_adv_filter_pol_get>
   19a86:	b110      	cbz	r0, 19a8e <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19a88:	240c      	movs	r4, #12
}
   19a8a:	4620      	mov	r0, r4
   19a8c:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19a8e:	f7fe fb59 	bl	18144 <radio_scan_filter_pol_get>
   19a92:	f010 0401 	ands.w	r4, r0, #1
   19a96:	d001      	beq.n	19a9c <ll_wl_clear+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19a98:	240c      	movs	r4, #12
   19a9a:	e7f6      	b.n	19a8a <ll_wl_clear+0xa>
	wl_clear();
   19a9c:	f7ff fdfe 	bl	1969c <wl_clear>
	wl_anon = 0;
   19aa0:	2200      	movs	r2, #0
   19aa2:	4b01      	ldr	r3, [pc, #4]	; (19aa8 <ll_wl_clear+0x28>)
   19aa4:	701a      	strb	r2, [r3, #0]
	return 0;
   19aa6:	e7f0      	b.n	19a8a <ll_wl_clear+0xa>
   19aa8:	20002ac0 	.word	0x20002ac0

00019aac <ll_wl_remove>:
{
   19aac:	b510      	push	{r4, lr}
   19aae:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19ab0:	f7fe fb30 	bl	18114 <radio_adv_filter_pol_get>
   19ab4:	b108      	cbz	r0, 19aba <ll_wl_remove+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19ab6:	200c      	movs	r0, #12
   19ab8:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19aba:	f7fe fb43 	bl	18144 <radio_scan_filter_pol_get>
   19abe:	f010 0001 	ands.w	r0, r0, #1
   19ac2:	d001      	beq.n	19ac8 <ll_wl_remove+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19ac4:	200c      	movs	r0, #12
}
   19ac6:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   19ac8:	7823      	ldrb	r3, [r4, #0]
   19aca:	2bff      	cmp	r3, #255	; 0xff
   19acc:	d003      	beq.n	19ad6 <ll_wl_remove+0x2a>
	return wl_remove(addr);
   19ace:	4620      	mov	r0, r4
   19ad0:	f7ff fe46 	bl	19760 <wl_remove>
   19ad4:	bd10      	pop	{r4, pc}
		wl_anon = 0;
   19ad6:	2200      	movs	r2, #0
   19ad8:	4b01      	ldr	r3, [pc, #4]	; (19ae0 <ll_wl_remove+0x34>)
   19ada:	701a      	strb	r2, [r3, #0]
		return 0;
   19adc:	bd10      	pop	{r4, pc}
   19ade:	bf00      	nop
   19ae0:	20002ac0 	.word	0x20002ac0

00019ae4 <ll_filters_adv_update>:
{
   19ae4:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   19ae6:	b918      	cbnz	r0, 19af0 <ll_filters_adv_update+0xc>
	if (rl_enable && !radio_scan_is_enabled()) {
   19ae8:	4b09      	ldr	r3, [pc, #36]	; (19b10 <ll_filters_adv_update+0x2c>)
   19aea:	781b      	ldrb	r3, [r3, #0]
   19aec:	b943      	cbnz	r3, 19b00 <ll_filters_adv_update+0x1c>
   19aee:	bd08      	pop	{r3, pc}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   19af0:	f7fe fb28 	bl	18144 <radio_scan_filter_pol_get>
   19af4:	f010 0f01 	tst.w	r0, #1
   19af8:	d1f6      	bne.n	19ae8 <ll_filters_adv_update+0x4>
		filter_wl_update();
   19afa:	f7ff fe6f 	bl	197dc <filter_wl_update>
   19afe:	e7f3      	b.n	19ae8 <ll_filters_adv_update+0x4>
	if (rl_enable && !radio_scan_is_enabled()) {
   19b00:	f7fe fb18 	bl	18134 <radio_scan_is_enabled>
   19b04:	2800      	cmp	r0, #0
   19b06:	d1f2      	bne.n	19aee <ll_filters_adv_update+0xa>
		filter_rl_update();
   19b08:	f7ff fea8 	bl	1985c <filter_rl_update>
}
   19b0c:	e7ef      	b.n	19aee <ll_filters_adv_update+0xa>
   19b0e:	bf00      	nop
   19b10:	20001b18 	.word	0x20001b18

00019b14 <ll_filters_scan_update>:
{
   19b14:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   19b16:	f010 0f01 	tst.w	r0, #1
   19b1a:	d103      	bne.n	19b24 <ll_filters_scan_update+0x10>
	if (rl_enable && !radio_adv_is_enabled()) {
   19b1c:	4b08      	ldr	r3, [pc, #32]	; (19b40 <ll_filters_scan_update+0x2c>)
   19b1e:	781b      	ldrb	r3, [r3, #0]
   19b20:	b93b      	cbnz	r3, 19b32 <ll_filters_scan_update+0x1e>
   19b22:	bd08      	pop	{r3, pc}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   19b24:	f7fe faf6 	bl	18114 <radio_adv_filter_pol_get>
   19b28:	2800      	cmp	r0, #0
   19b2a:	d1f7      	bne.n	19b1c <ll_filters_scan_update+0x8>
		filter_wl_update();
   19b2c:	f7ff fe56 	bl	197dc <filter_wl_update>
   19b30:	e7f4      	b.n	19b1c <ll_filters_scan_update+0x8>
	if (rl_enable && !radio_adv_is_enabled()) {
   19b32:	f7fe fae7 	bl	18104 <radio_adv_is_enabled>
   19b36:	2800      	cmp	r0, #0
   19b38:	d1f3      	bne.n	19b22 <ll_filters_scan_update+0xe>
		filter_rl_update();
   19b3a:	f7ff fe8f 	bl	1985c <filter_rl_update>
}
   19b3e:	e7f0      	b.n	19b22 <ll_filters_scan_update+0xe>
   19b40:	20001b18 	.word	0x20001b18

00019b44 <ll_rl_find>:
{
   19b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b48:	4607      	mov	r7, r0
   19b4a:	4688      	mov	r8, r1
	if (free) {
   19b4c:	4616      	mov	r6, r2
   19b4e:	b10a      	cbz	r2, 19b54 <ll_rl_find+0x10>
		*free = FILTER_IDX_NONE;
   19b50:	23ff      	movs	r3, #255	; 0xff
   19b52:	7013      	strb	r3, [r2, #0]
{
   19b54:	2400      	movs	r4, #0
   19b56:	e00e      	b.n	19b76 <ll_rl_find+0x32>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19b58:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19b5c:	00d3      	lsls	r3, r2, #3
   19b5e:	481a      	ldr	r0, [pc, #104]	; (19bc8 <ll_rl_find+0x84>)
   19b60:	4418      	add	r0, r3
   19b62:	2206      	movs	r2, #6
   19b64:	4641      	mov	r1, r8
   19b66:	3001      	adds	r0, #1
   19b68:	f010 fe42 	bl	2a7f0 <memcmp>
   19b6c:	b9c8      	cbnz	r0, 19ba2 <ll_rl_find+0x5e>
   19b6e:	e027      	b.n	19bc0 <ll_rl_find+0x7c>
			*free = i;
   19b70:	7034      	strb	r4, [r6, #0]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19b72:	3401      	adds	r4, #1
   19b74:	b2e4      	uxtb	r4, r4
   19b76:	2c07      	cmp	r4, #7
   19b78:	d821      	bhi.n	19bbe <ll_rl_find+0x7a>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19b7a:	4625      	mov	r5, r4
   19b7c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19b80:	00d3      	lsls	r3, r2, #3
   19b82:	4a11      	ldr	r2, [pc, #68]	; (19bc8 <ll_rl_find+0x84>)
   19b84:	5cd3      	ldrb	r3, [r2, r3]
   19b86:	f013 0f01 	tst.w	r3, #1
   19b8a:	d00a      	beq.n	19ba2 <ll_rl_find+0x5e>
   19b8c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19b90:	00d3      	lsls	r3, r2, #3
   19b92:	4a0d      	ldr	r2, [pc, #52]	; (19bc8 <ll_rl_find+0x84>)
   19b94:	5cd3      	ldrb	r3, [r2, r3]
   19b96:	f3c3 1380 	ubfx	r3, r3, #6, #1
   19b9a:	f007 0201 	and.w	r2, r7, #1
   19b9e:	4293      	cmp	r3, r2
   19ba0:	d0da      	beq.n	19b58 <ll_rl_find+0x14>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   19ba2:	2e00      	cmp	r6, #0
   19ba4:	d0e5      	beq.n	19b72 <ll_rl_find+0x2e>
   19ba6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19baa:	00eb      	lsls	r3, r5, #3
   19bac:	4a06      	ldr	r2, [pc, #24]	; (19bc8 <ll_rl_find+0x84>)
   19bae:	5cd3      	ldrb	r3, [r2, r3]
   19bb0:	f013 0f01 	tst.w	r3, #1
   19bb4:	d1dd      	bne.n	19b72 <ll_rl_find+0x2e>
   19bb6:	7833      	ldrb	r3, [r6, #0]
   19bb8:	2bff      	cmp	r3, #255	; 0xff
   19bba:	d1da      	bne.n	19b72 <ll_rl_find+0x2e>
   19bbc:	e7d8      	b.n	19b70 <ll_rl_find+0x2c>
	return FILTER_IDX_NONE;
   19bbe:	24ff      	movs	r4, #255	; 0xff
}
   19bc0:	4620      	mov	r0, r4
   19bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19bc6:	bf00      	nop
   19bc8:	200019d8 	.word	0x200019d8

00019bcc <wl_add>:
{
   19bcc:	b570      	push	{r4, r5, r6, lr}
   19bce:	b082      	sub	sp, #8
   19bd0:	4605      	mov	r5, r0
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   19bd2:	4604      	mov	r4, r0
   19bd4:	f814 0b01 	ldrb.w	r0, [r4], #1
   19bd8:	f10d 0207 	add.w	r2, sp, #7
   19bdc:	4621      	mov	r1, r4
   19bde:	f7ff fd87 	bl	196f0 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   19be2:	2807      	cmp	r0, #7
   19be4:	d802      	bhi.n	19bec <wl_add+0x20>
		return BT_HCI_ERR_INVALID_PARAM;
   19be6:	2012      	movs	r0, #18
}
   19be8:	b002      	add	sp, #8
   19bea:	bd70      	pop	{r4, r5, r6, pc}
	} else if (j >= ARRAY_SIZE(wl)) {
   19bec:	f89d 6007 	ldrb.w	r6, [sp, #7]
   19bf0:	2e07      	cmp	r6, #7
   19bf2:	d901      	bls.n	19bf8 <wl_add+0x2c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19bf4:	2007      	movs	r0, #7
   19bf6:	e7f7      	b.n	19be8 <wl_add+0x1c>
	wl[i].id_addr_type = id_addr->type & 0x1;
   19bf8:	4629      	mov	r1, r5
   19bfa:	f811 2b01 	ldrb.w	r2, [r1], #1
   19bfe:	4817      	ldr	r0, [pc, #92]	; (19c5c <wl_add+0x90>)
   19c00:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
   19c04:	f362 0341 	bfi	r3, r2, #1, #1
   19c08:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   19c0c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
	memcpy(dst, src, sizeof(*dst));
   19c10:	2206      	movs	r2, #6
   19c12:	3002      	adds	r0, #2
   19c14:	f7e6 fb54 	bl	2c0 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19c18:	2200      	movs	r2, #0
   19c1a:	4621      	mov	r1, r4
   19c1c:	7828      	ldrb	r0, [r5, #0]
   19c1e:	f7ff ff91 	bl	19b44 <ll_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   19c22:	2807      	cmp	r0, #7
   19c24:	d814      	bhi.n	19c50 <wl_add+0x84>
		wl[i].rl_idx = j;
   19c26:	4b0d      	ldr	r3, [pc, #52]	; (19c5c <wl_add+0x90>)
   19c28:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   19c2c:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   19c2e:	490c      	ldr	r1, [pc, #48]	; (19c60 <wl_add+0x94>)
   19c30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19c34:	00c3      	lsls	r3, r0, #3
   19c36:	5cca      	ldrb	r2, [r1, r3]
   19c38:	f042 0220 	orr.w	r2, r2, #32
   19c3c:	54ca      	strb	r2, [r1, r3]
	wl[i].taken = 1;
   19c3e:	4a07      	ldr	r2, [pc, #28]	; (19c5c <wl_add+0x90>)
   19c40:	f812 3036 	ldrb.w	r3, [r2, r6, lsl #3]
   19c44:	f043 0301 	orr.w	r3, r3, #1
   19c48:	f802 3036 	strb.w	r3, [r2, r6, lsl #3]
	return 0;
   19c4c:	2000      	movs	r0, #0
   19c4e:	e7cb      	b.n	19be8 <wl_add+0x1c>
		wl[i].rl_idx = FILTER_IDX_NONE;
   19c50:	4b02      	ldr	r3, [pc, #8]	; (19c5c <wl_add+0x90>)
   19c52:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   19c56:	22ff      	movs	r2, #255	; 0xff
   19c58:	705a      	strb	r2, [r3, #1]
   19c5a:	e7f0      	b.n	19c3e <wl_add+0x72>
   19c5c:	20001b50 	.word	0x20001b50
   19c60:	200019d8 	.word	0x200019d8

00019c64 <ll_wl_add>:
{
   19c64:	b510      	push	{r4, lr}
   19c66:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19c68:	f7fe fa54 	bl	18114 <radio_adv_filter_pol_get>
   19c6c:	b108      	cbz	r0, 19c72 <ll_wl_add+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19c6e:	200c      	movs	r0, #12
   19c70:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19c72:	f7fe fa67 	bl	18144 <radio_scan_filter_pol_get>
   19c76:	f010 0001 	ands.w	r0, r0, #1
   19c7a:	d001      	beq.n	19c80 <ll_wl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19c7c:	200c      	movs	r0, #12
}
   19c7e:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   19c80:	7823      	ldrb	r3, [r4, #0]
   19c82:	2bff      	cmp	r3, #255	; 0xff
   19c84:	d003      	beq.n	19c8e <ll_wl_add+0x2a>
	return wl_add(addr);
   19c86:	4620      	mov	r0, r4
   19c88:	f7ff ffa0 	bl	19bcc <wl_add>
   19c8c:	bd10      	pop	{r4, pc}
		wl_anon = 1;
   19c8e:	2201      	movs	r2, #1
   19c90:	4b01      	ldr	r3, [pc, #4]	; (19c98 <ll_wl_add+0x34>)
   19c92:	701a      	strb	r2, [r3, #0]
		return 0;
   19c94:	bd10      	pop	{r4, pc}
   19c96:	bf00      	nop
   19c98:	20002ac0 	.word	0x20002ac0

00019c9c <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   19c9c:	4b17      	ldr	r3, [pc, #92]	; (19cfc <ctrl_rl_idx_allowed+0x60>)
   19c9e:	781b      	ldrb	r3, [r3, #0]
   19ca0:	b32b      	cbz	r3, 19cee <ctrl_rl_idx_allowed+0x52>
   19ca2:	2907      	cmp	r1, #7
   19ca4:	d825      	bhi.n	19cf2 <ctrl_rl_idx_allowed+0x56>
   19ca6:	bb30      	cbnz	r0, 19cf6 <ctrl_rl_idx_allowed+0x5a>
	LL_ASSERT(rl[rl_idx].taken);
   19ca8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   19cac:	00d3      	lsls	r3, r2, #3
   19cae:	4a14      	ldr	r2, [pc, #80]	; (19d00 <ctrl_rl_idx_allowed+0x64>)
   19cb0:	5cd3      	ldrb	r3, [r2, r3]
   19cb2:	f013 0f01 	tst.w	r3, #1
   19cb6:	d010      	beq.n	19cda <ctrl_rl_idx_allowed+0x3e>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19cb8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   19cbc:	00d3      	lsls	r3, r2, #3
   19cbe:	4a10      	ldr	r2, [pc, #64]	; (19d00 <ctrl_rl_idx_allowed+0x64>)
   19cc0:	5cd3      	ldrb	r3, [r2, r3]
   19cc2:	f013 0f04 	tst.w	r3, #4
   19cc6:	d00e      	beq.n	19ce6 <ctrl_rl_idx_allowed+0x4a>
   19cc8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   19ccc:	00cb      	lsls	r3, r1, #3
   19cce:	5cd3      	ldrb	r3, [r2, r3]
   19cd0:	f013 0f10 	tst.w	r3, #16
   19cd4:	d009      	beq.n	19cea <ctrl_rl_idx_allowed+0x4e>
   19cd6:	2001      	movs	r0, #1
   19cd8:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   19cda:	4040      	eors	r0, r0
   19cdc:	f380 8811 	msr	BASEPRI, r0
   19ce0:	f04f 0004 	mov.w	r0, #4
   19ce4:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19ce6:	2001      	movs	r0, #1
   19ce8:	4770      	bx	lr
   19cea:	2000      	movs	r0, #0
   19cec:	4770      	bx	lr
		return true;
   19cee:	2001      	movs	r0, #1
   19cf0:	4770      	bx	lr
   19cf2:	2001      	movs	r0, #1
   19cf4:	4770      	bx	lr
   19cf6:	2001      	movs	r0, #1
}
   19cf8:	4770      	bx	lr
   19cfa:	bf00      	nop
   19cfc:	20001b18 	.word	0x20001b18
   19d00:	200019d8 	.word	0x200019d8

00019d04 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19d04:	2807      	cmp	r0, #7
   19d06:	d81a      	bhi.n	19d3e <ll_rl_id_addr_get+0x3a>
{
   19d08:	b570      	push	{r4, r5, r6, lr}
   19d0a:	4603      	mov	r3, r0
	LL_ASSERT(rl[rl_idx].taken);
   19d0c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   19d10:	00ec      	lsls	r4, r5, #3
   19d12:	4811      	ldr	r0, [pc, #68]	; (19d58 <ll_rl_id_addr_get+0x54>)
   19d14:	5d00      	ldrb	r0, [r0, r4]
   19d16:	f010 0f01 	tst.w	r0, #1
   19d1a:	d016      	beq.n	19d4a <ll_rl_id_addr_get+0x46>
   19d1c:	4610      	mov	r0, r2
	*id_addr_type = rl[rl_idx].id_addr_type;
   19d1e:	4d0e      	ldr	r5, [pc, #56]	; (19d58 <ll_rl_id_addr_get+0x54>)
   19d20:	009c      	lsls	r4, r3, #2
   19d22:	18e6      	adds	r6, r4, r3
   19d24:	00f2      	lsls	r2, r6, #3
   19d26:	4616      	mov	r6, r2
   19d28:	5caa      	ldrb	r2, [r5, r2]
   19d2a:	f3c2 1280 	ubfx	r2, r2, #6, #1
   19d2e:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19d30:	4631      	mov	r1, r6
   19d32:	4429      	add	r1, r5
   19d34:	2206      	movs	r2, #6
   19d36:	3101      	adds	r1, #1
   19d38:	f7e6 fac2 	bl	2c0 <memcpy>
   19d3c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19d3e:	4040      	eors	r0, r0
   19d40:	f380 8811 	msr	BASEPRI, r0
   19d44:	f04f 0004 	mov.w	r0, #4
   19d48:	df02      	svc	2
	LL_ASSERT(rl[rl_idx].taken);
   19d4a:	4040      	eors	r0, r0
   19d4c:	f380 8811 	msr	BASEPRI, r0
   19d50:	f04f 0004 	mov.w	r0, #4
   19d54:	df02      	svc	2
   19d56:	bf00      	nop
   19d58:	200019d8 	.word	0x200019d8

00019d5c <ctrl_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   19d5c:	4b29      	ldr	r3, [pc, #164]	; (19e04 <ctrl_rl_addr_allowed+0xa8>)
   19d5e:	781b      	ldrb	r3, [r3, #0]
   19d60:	2b00      	cmp	r3, #0
   19d62:	d04a      	beq.n	19dfa <ctrl_rl_addr_allowed+0x9e>
   19d64:	7813      	ldrb	r3, [r2, #0]
   19d66:	2bff      	cmp	r3, #255	; 0xff
   19d68:	d001      	beq.n	19d6e <ctrl_rl_addr_allowed+0x12>
		return true;
   19d6a:	2001      	movs	r0, #1
   19d6c:	4770      	bx	lr
   19d6e:	2300      	movs	r3, #0
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19d70:	2b07      	cmp	r3, #7
   19d72:	d844      	bhi.n	19dfe <ctrl_rl_addr_allowed+0xa2>
{
   19d74:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d76:	e005      	b.n	19d84 <ctrl_rl_addr_allowed+0x28>
			if (j == BDADDR_SIZE) {
   19d78:	2c06      	cmp	r4, #6
   19d7a:	d026      	beq.n	19dca <ctrl_rl_addr_allowed+0x6e>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19d7c:	3301      	adds	r3, #1
   19d7e:	b2db      	uxtb	r3, r3
   19d80:	2b07      	cmp	r3, #7
   19d82:	d838      	bhi.n	19df6 <ctrl_rl_addr_allowed+0x9a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   19d84:	461e      	mov	r6, r3
   19d86:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19d8a:	00ec      	lsls	r4, r5, #3
   19d8c:	4d1e      	ldr	r5, [pc, #120]	; (19e08 <ctrl_rl_addr_allowed+0xac>)
   19d8e:	5d2c      	ldrb	r4, [r5, r4]
   19d90:	f014 0f01 	tst.w	r4, #1
   19d94:	d0f2      	beq.n	19d7c <ctrl_rl_addr_allowed+0x20>
   19d96:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19d9a:	00ec      	lsls	r4, r5, #3
   19d9c:	4d1a      	ldr	r5, [pc, #104]	; (19e08 <ctrl_rl_addr_allowed+0xac>)
   19d9e:	5d2c      	ldrb	r4, [r5, r4]
   19da0:	f3c4 1480 	ubfx	r4, r4, #6, #1
   19da4:	4284      	cmp	r4, r0
   19da6:	d1e9      	bne.n	19d7c <ctrl_rl_addr_allowed+0x20>
			u8_t *addr = rl[i].id_addr.val;
   19da8:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19dac:	00ec      	lsls	r4, r5, #3
   19dae:	4d16      	ldr	r5, [pc, #88]	; (19e08 <ctrl_rl_addr_allowed+0xac>)
   19db0:	4425      	add	r5, r4
   19db2:	3501      	adds	r5, #1
			for (j = 0; j < BDADDR_SIZE; j++) {
   19db4:	2400      	movs	r4, #0
   19db6:	2c05      	cmp	r4, #5
   19db8:	d8de      	bhi.n	19d78 <ctrl_rl_addr_allowed+0x1c>
				if (addr[j] != id_addr[j]) {
   19dba:	f815 e004 	ldrb.w	lr, [r5, r4]
   19dbe:	5d0f      	ldrb	r7, [r1, r4]
   19dc0:	45be      	cmp	lr, r7
   19dc2:	d1d9      	bne.n	19d78 <ctrl_rl_addr_allowed+0x1c>
			for (j = 0; j < BDADDR_SIZE; j++) {
   19dc4:	3401      	adds	r4, #1
   19dc6:	b2e4      	uxtb	r4, r4
   19dc8:	e7f5      	b.n	19db6 <ctrl_rl_addr_allowed+0x5a>
				*rl_idx = i;
   19dca:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   19dcc:	eb06 0286 	add.w	r2, r6, r6, lsl #2
   19dd0:	00d3      	lsls	r3, r2, #3
   19dd2:	4a0d      	ldr	r2, [pc, #52]	; (19e08 <ctrl_rl_addr_allowed+0xac>)
   19dd4:	5cd3      	ldrb	r3, [r2, r3]
   19dd6:	f013 0f04 	tst.w	r3, #4
   19dda:	d00a      	beq.n	19df2 <ctrl_rl_addr_allowed+0x96>
   19ddc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   19de0:	00f3      	lsls	r3, r6, #3
   19de2:	5cd3      	ldrb	r3, [r2, r3]
   19de4:	f013 0f10 	tst.w	r3, #16
   19de8:	d101      	bne.n	19dee <ctrl_rl_addr_allowed+0x92>
   19dea:	2000      	movs	r0, #0
   19dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19dee:	2001      	movs	r0, #1
   19df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19df2:	2001      	movs	r0, #1
   19df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   19df6:	2001      	movs	r0, #1
   19df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return true;
   19dfa:	2001      	movs	r0, #1
   19dfc:	4770      	bx	lr
	return true;
   19dfe:	2001      	movs	r0, #1
}
   19e00:	4770      	bx	lr
   19e02:	bf00      	nop
   19e04:	20001b18 	.word	0x20001b18
   19e08:	200019d8 	.word	0x200019d8

00019e0c <ctrl_rl_addr_resolve>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   19e0c:	4b13      	ldr	r3, [pc, #76]	; (19e5c <ctrl_rl_addr_resolve+0x50>)
   19e0e:	781b      	ldrb	r3, [r3, #0]
   19e10:	b1db      	cbz	r3, 19e4a <ctrl_rl_addr_resolve+0x3e>
   19e12:	2a07      	cmp	r2, #7
   19e14:	d81b      	bhi.n	19e4e <ctrl_rl_addr_resolve+0x42>
{
   19e16:	b510      	push	{r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   19e18:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   19e1c:	00e3      	lsls	r3, r4, #3
   19e1e:	4c10      	ldr	r4, [pc, #64]	; (19e60 <ctrl_rl_addr_resolve+0x54>)
   19e20:	5ce3      	ldrb	r3, [r4, r3]
   19e22:	f013 0f08 	tst.w	r3, #8
   19e26:	d014      	beq.n	19e52 <ctrl_rl_addr_resolve+0x46>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   19e28:	b1a8      	cbz	r0, 19e56 <ctrl_rl_addr_resolve+0x4a>
   19e2a:	794b      	ldrb	r3, [r1, #5]
   19e2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19e30:	2b40      	cmp	r3, #64	; 0x40
   19e32:	d001      	beq.n	19e38 <ctrl_rl_addr_resolve+0x2c>
	return false;
   19e34:	2000      	movs	r0, #0
}
   19e36:	bd10      	pop	{r4, pc}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   19e38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   19e3c:	00d3      	lsls	r3, r2, #3
   19e3e:	4620      	mov	r0, r4
   19e40:	4418      	add	r0, r3
   19e42:	3007      	adds	r0, #7
   19e44:	f7ea fbc8 	bl	45d8 <bt_rpa_irk_matches>
   19e48:	bd10      	pop	{r4, pc}
		return false;
   19e4a:	2000      	movs	r0, #0
   19e4c:	4770      	bx	lr
   19e4e:	2000      	movs	r0, #0
   19e50:	4770      	bx	lr
   19e52:	2000      	movs	r0, #0
   19e54:	bd10      	pop	{r4, pc}
	return false;
   19e56:	2000      	movs	r0, #0
   19e58:	bd10      	pop	{r4, pc}
   19e5a:	bf00      	nop
   19e5c:	20001b18 	.word	0x20001b18
   19e60:	200019d8 	.word	0x200019d8

00019e64 <ctrl_rl_enabled>:
	return rl_enable;
   19e64:	4b02      	ldr	r3, [pc, #8]	; (19e70 <ctrl_rl_enabled+0xc>)
   19e66:	7818      	ldrb	r0, [r3, #0]
}
   19e68:	3000      	adds	r0, #0
   19e6a:	bf18      	it	ne
   19e6c:	2001      	movne	r0, #1
   19e6e:	4770      	bx	lr
   19e70:	20001b18 	.word	0x20001b18

00019e74 <ll_rl_pdu_adv_update>:
{
   19e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e76:	4605      	mov	r5, r0
   19e78:	460c      	mov	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
   19e7a:	780b      	ldrb	r3, [r1, #0]
   19e7c:	f003 030f 	and.w	r3, r3, #15
				  &pdu->payload.scan_rsp.addr[0] :
   19e80:	2b04      	cmp	r3, #4
   19e82:	d024      	beq.n	19ece <ll_rl_pdu_adv_update+0x5a>
   19e84:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   19e86:	f000 fbc5 	bl	1a614 <ll_adv_set_get>
   19e8a:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   19e8c:	2d07      	cmp	r5, #7
   19e8e:	d826      	bhi.n	19ede <ll_rl_pdu_adv_update+0x6a>
   19e90:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19e94:	00d3      	lsls	r3, r2, #3
   19e96:	4a30      	ldr	r2, [pc, #192]	; (19f58 <ll_rl_pdu_adv_update+0xe4>)
   19e98:	5cd3      	ldrb	r3, [r2, r3]
   19e9a:	f013 0f08 	tst.w	r3, #8
   19e9e:	d01e      	beq.n	19ede <ll_rl_pdu_adv_update+0x6a>
		LL_ASSERT(rl[idx].rpas_ready);
   19ea0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19ea4:	00d3      	lsls	r3, r2, #3
   19ea6:	4a2c      	ldr	r2, [pc, #176]	; (19f58 <ll_rl_pdu_adv_update+0xe4>)
   19ea8:	5cd3      	ldrb	r3, [r2, r3]
   19eaa:	f013 0f02 	tst.w	r3, #2
   19eae:	d010      	beq.n	19ed2 <ll_rl_pdu_adv_update+0x5e>
		pdu->tx_addr = 1;
   19eb0:	7823      	ldrb	r3, [r4, #0]
   19eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19eb6:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   19eb8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19ebc:	00da      	lsls	r2, r3, #3
   19ebe:	4b26      	ldr	r3, [pc, #152]	; (19f58 <ll_rl_pdu_adv_update+0xe4>)
   19ec0:	4413      	add	r3, r2
   19ec2:	2206      	movs	r2, #6
   19ec4:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19ec6:	4638      	mov	r0, r7
   19ec8:	f7e6 f9fa 	bl	2c0 <memcpy>
   19ecc:	e014      	b.n	19ef8 <ll_rl_pdu_adv_update+0x84>
				  &pdu->payload.scan_rsp.addr[0] :
   19ece:	1c8f      	adds	r7, r1, #2
   19ed0:	e7d9      	b.n	19e86 <ll_rl_pdu_adv_update+0x12>
		LL_ASSERT(rl[idx].rpas_ready);
   19ed2:	4040      	eors	r0, r0
   19ed4:	f380 8811 	msr	BASEPRI, r0
   19ed8:	f04f 0004 	mov.w	r0, #4
   19edc:	df02      	svc	2
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   19ede:	7833      	ldrb	r3, [r6, #0]
   19ee0:	f3c3 1340 	ubfx	r3, r3, #5, #1
   19ee4:	7822      	ldrb	r2, [r4, #0]
   19ee6:	f363 1286 	bfi	r2, r3, #6, #1
   19eea:	7022      	strb	r2, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   19eec:	7830      	ldrb	r0, [r6, #0]
   19eee:	4639      	mov	r1, r7
   19ef0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19ef4:	f7ff fba0 	bl	19638 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19ef8:	7823      	ldrb	r3, [r4, #0]
   19efa:	f003 030f 	and.w	r3, r3, #15
   19efe:	2b01      	cmp	r3, #1
   19f00:	d000      	beq.n	19f04 <ll_rl_pdu_adv_update+0x90>
   19f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   19f04:	2d07      	cmp	r5, #7
   19f06:	d807      	bhi.n	19f18 <ll_rl_pdu_adv_update+0xa4>
   19f08:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19f0c:	00d3      	lsls	r3, r2, #3
   19f0e:	4a12      	ldr	r2, [pc, #72]	; (19f58 <ll_rl_pdu_adv_update+0xe4>)
   19f10:	5cd3      	ldrb	r3, [r2, r3]
   19f12:	f013 0f04 	tst.w	r3, #4
   19f16:	d10d      	bne.n	19f34 <ll_rl_pdu_adv_update+0xc0>
			pdu->rx_addr = ll_adv->id_addr_type;
   19f18:	4631      	mov	r1, r6
   19f1a:	f811 3b02 	ldrb.w	r3, [r1], #2
   19f1e:	09db      	lsrs	r3, r3, #7
   19f20:	7822      	ldrb	r2, [r4, #0]
   19f22:	f363 12c7 	bfi	r2, r3, #7, #1
   19f26:	4620      	mov	r0, r4
   19f28:	f800 2b08 	strb.w	r2, [r0], #8
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   19f2c:	2206      	movs	r2, #6
   19f2e:	f7e6 f9c7 	bl	2c0 <memcpy>
}
   19f32:	e7e6      	b.n	19f02 <ll_rl_pdu_adv_update+0x8e>
			pdu->rx_addr = 1;
   19f34:	7823      	ldrb	r3, [r4, #0]
   19f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19f3a:	4620      	mov	r0, r4
   19f3c:	f800 3b08 	strb.w	r3, [r0], #8
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   19f40:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19f44:	00eb      	lsls	r3, r5, #3
   19f46:	3318      	adds	r3, #24
   19f48:	4611      	mov	r1, r2
   19f4a:	4419      	add	r1, r3
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   19f4c:	2206      	movs	r2, #6
   19f4e:	4411      	add	r1, r2
   19f50:	f7e6 f9b6 	bl	2c0 <memcpy>
   19f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19f56:	bf00      	nop
   19f58:	200019d8 	.word	0x200019d8

00019f5c <rpa_adv_refresh>:
{
   19f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ll_adv = ll_adv_set_get();
   19f60:	f000 fb58 	bl	1a614 <ll_adv_set_get>
   19f64:	4606      	mov	r6, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   19f66:	7803      	ldrb	r3, [r0, #0]
   19f68:	f003 0360 	and.w	r3, r3, #96	; 0x60
   19f6c:	2b40      	cmp	r3, #64	; 0x40
   19f6e:	d003      	beq.n	19f78 <rpa_adv_refresh+0x1c>
   19f70:	2b60      	cmp	r3, #96	; 0x60
   19f72:	d001      	beq.n	19f78 <rpa_adv_refresh+0x1c>
   19f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   19f78:	f7fe f8bc 	bl	180f4 <radio_adv_data_get>
   19f7c:	4604      	mov	r4, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19f7e:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   19f82:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19f86:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   19f8a:	1887      	adds	r7, r0, r2
	if (radio_adv_data->first == radio_adv_data->last) {
   19f8c:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   19f90:	429d      	cmp	r5, r3
   19f92:	d02d      	beq.n	19ff0 <rpa_adv_refresh+0x94>
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   19f94:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19f98:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   19f9c:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   19fa0:	5ca0      	ldrb	r0, [r4, r2]
   19fa2:	5ce1      	ldrb	r1, [r4, r3]
   19fa4:	f360 0103 	bfi	r1, r0, #0, #4
	pdu->rfu = 0;
   19fa8:	f36f 1104 	bfc	r1, #4, #1
   19fac:	54e1      	strb	r1, [r4, r3]
		pdu->chan_sel = prev->chan_sel;
   19fae:	5ca2      	ldrb	r2, [r4, r2]
   19fb0:	f3c2 1240 	ubfx	r2, r2, #5, #1
   19fb4:	b2c9      	uxtb	r1, r1
   19fb6:	f362 1145 	bfi	r1, r2, #5, #1
   19fba:	54e1      	strb	r1, [r4, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   19fbc:	4631      	mov	r1, r6
   19fbe:	f811 0b02 	ldrb.w	r0, [r1], #2
   19fc2:	2200      	movs	r2, #0
   19fc4:	09c0      	lsrs	r0, r0, #7
   19fc6:	f7ff fdbd 	bl	19b44 <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   19fca:	2807      	cmp	r0, #7
   19fcc:	d816      	bhi.n	19ffc <rpa_adv_refresh+0xa0>
	ll_rl_pdu_adv_update(idx, pdu);
   19fce:	4641      	mov	r1, r8
   19fd0:	f7ff ff50 	bl	19e74 <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   19fd4:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
   19fd6:	3a06      	subs	r2, #6
   19fd8:	f107 0108 	add.w	r1, r7, #8
   19fdc:	f108 0008 	add.w	r0, r8, #8
   19fe0:	f7e6 f96e 	bl	2c0 <memcpy>
	pdu->len = prev->len;
   19fe4:	787b      	ldrb	r3, [r7, #1]
   19fe6:	f888 3001 	strb.w	r3, [r8, #1]
	radio_adv_data->last = last;
   19fea:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   19fee:	e7c1      	b.n	19f74 <rpa_adv_refresh+0x18>
		last = radio_adv_data->last + 1;
   19ff0:	3501      	adds	r5, #1
   19ff2:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   19ff4:	2d02      	cmp	r5, #2
   19ff6:	d1cd      	bne.n	19f94 <rpa_adv_refresh+0x38>
			last = 0;
   19ff8:	2500      	movs	r5, #0
   19ffa:	e7cb      	b.n	19f94 <rpa_adv_refresh+0x38>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   19ffc:	4040      	eors	r0, r0
   19ffe:	f380 8811 	msr	BASEPRI, r0
   1a002:	f04f 0004 	mov.w	r0, #4
   1a006:	df02      	svc	2

0001a008 <ll_rl_rpa_update>:
{
   1a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a00c:	b085      	sub	sp, #20
   1a00e:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   1a010:	f00f fa44 	bl	2949c <_impl_k_uptime_get>
   1a014:	4606      	mov	r6, r0
   1a016:	460f      	mov	r7, r1
	bool all = timeout || (rpa_last_ms == -1) ||
   1a018:	f1b9 0f00 	cmp.w	r9, #0
   1a01c:	d115      	bne.n	1a04a <ll_rl_rpa_update+0x42>
   1a01e:	4b57      	ldr	r3, [pc, #348]	; (1a17c <ll_rl_rpa_update+0x174>)
   1a020:	e9d3 0100 	ldrd	r0, r1, [r3]
   1a024:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1a028:	bf08      	it	eq
   1a02a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1a02e:	d010      	beq.n	1a052 <ll_rl_rpa_update+0x4a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1a030:	1a30      	subs	r0, r6, r0
   1a032:	eb67 0101 	sbc.w	r1, r7, r1
   1a036:	4b52      	ldr	r3, [pc, #328]	; (1a180 <ll_rl_rpa_update+0x178>)
   1a038:	681a      	ldr	r2, [r3, #0]
   1a03a:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   1a03c:	4290      	cmp	r0, r2
   1a03e:	eb71 0303 	sbcs.w	r3, r1, r3
   1a042:	db09      	blt.n	1a058 <ll_rl_rpa_update+0x50>
   1a044:	f04f 0801 	mov.w	r8, #1
   1a048:	e001      	b.n	1a04e <ll_rl_rpa_update+0x46>
   1a04a:	f04f 0801 	mov.w	r8, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a04e:	2400      	movs	r4, #0
   1a050:	e02a      	b.n	1a0a8 <ll_rl_rpa_update+0xa0>
	bool all = timeout || (rpa_last_ms == -1) ||
   1a052:	f04f 0801 	mov.w	r8, #1
   1a056:	e7fa      	b.n	1a04e <ll_rl_rpa_update+0x46>
   1a058:	f04f 0800 	mov.w	r8, #0
   1a05c:	e7f7      	b.n	1a04e <ll_rl_rpa_update+0x46>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a05e:	7818      	ldrb	r0, [r3, #0]
   1a060:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1a062:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a064:	3b01      	subs	r3, #1
   1a066:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1a068:	2a00      	cmp	r2, #0
   1a06a:	d1f8      	bne.n	1a05e <ll_rl_rpa_update+0x56>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1a06c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a070:	00d3      	lsls	r3, r2, #3
   1a072:	3318      	adds	r3, #24
   1a074:	4943      	ldr	r1, [pc, #268]	; (1a184 <ll_rl_rpa_update+0x17c>)
   1a076:	4419      	add	r1, r3
   1a078:	3106      	adds	r1, #6
   1a07a:	4668      	mov	r0, sp
   1a07c:	f7ea fac0 	bl	4600 <bt_rpa_create>
				LL_ASSERT(!err);
   1a080:	2800      	cmp	r0, #0
   1a082:	d13c      	bne.n	1a0fe <ll_rl_rpa_update+0xf6>
			if (rl[i].lirk) {
   1a084:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a088:	00d3      	lsls	r3, r2, #3
   1a08a:	4a3e      	ldr	r2, [pc, #248]	; (1a184 <ll_rl_rpa_update+0x17c>)
   1a08c:	5cd3      	ldrb	r3, [r2, r3]
   1a08e:	f013 0f08 	tst.w	r3, #8
   1a092:	d13a      	bne.n	1a10a <ll_rl_rpa_update+0x102>
			rl[i].rpas_ready = 1;
   1a094:	493b      	ldr	r1, [pc, #236]	; (1a184 <ll_rl_rpa_update+0x17c>)
   1a096:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a09a:	00eb      	lsls	r3, r5, #3
   1a09c:	5cca      	ldrb	r2, [r1, r3]
   1a09e:	f042 0202 	orr.w	r2, r2, #2
   1a0a2:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a0a4:	3401      	adds	r4, #1
   1a0a6:	b2e4      	uxtb	r4, r4
   1a0a8:	2c07      	cmp	r4, #7
   1a0aa:	d854      	bhi.n	1a156 <ll_rl_rpa_update+0x14e>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1a0ac:	4625      	mov	r5, r4
   1a0ae:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a0b2:	00d3      	lsls	r3, r2, #3
   1a0b4:	4a33      	ldr	r2, [pc, #204]	; (1a184 <ll_rl_rpa_update+0x17c>)
   1a0b6:	5cd3      	ldrb	r3, [r2, r3]
   1a0b8:	f013 0f01 	tst.w	r3, #1
   1a0bc:	d0f2      	beq.n	1a0a4 <ll_rl_rpa_update+0x9c>
   1a0be:	f1b8 0f00 	cmp.w	r8, #0
   1a0c2:	d107      	bne.n	1a0d4 <ll_rl_rpa_update+0xcc>
   1a0c4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a0c8:	00d3      	lsls	r3, r2, #3
   1a0ca:	4a2e      	ldr	r2, [pc, #184]	; (1a184 <ll_rl_rpa_update+0x17c>)
   1a0cc:	5cd3      	ldrb	r3, [r2, r3]
   1a0ce:	f013 0f02 	tst.w	r3, #2
   1a0d2:	d1e7      	bne.n	1a0a4 <ll_rl_rpa_update+0x9c>
			if (rl[i].pirk) {
   1a0d4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a0d8:	00d3      	lsls	r3, r2, #3
   1a0da:	4a2a      	ldr	r2, [pc, #168]	; (1a184 <ll_rl_rpa_update+0x17c>)
   1a0dc:	5cd3      	ldrb	r3, [r2, r3]
   1a0de:	f013 0f04 	tst.w	r3, #4
   1a0e2:	d0cf      	beq.n	1a084 <ll_rl_rpa_update+0x7c>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   1a0e4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1a0e8:	00da      	lsls	r2, r3, #3
   1a0ea:	4b26      	ldr	r3, [pc, #152]	; (1a184 <ll_rl_rpa_update+0x17c>)
   1a0ec:	4413      	add	r3, r2
   1a0ee:	7dda      	ldrb	r2, [r3, #23]
   1a0f0:	4b25      	ldr	r3, [pc, #148]	; (1a188 <ll_rl_rpa_update+0x180>)
   1a0f2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	src += length - 1;
   1a0f6:	330f      	adds	r3, #15
   1a0f8:	2210      	movs	r2, #16
   1a0fa:	4669      	mov	r1, sp
   1a0fc:	e7b4      	b.n	1a068 <ll_rl_rpa_update+0x60>
				LL_ASSERT(!err);
   1a0fe:	4040      	eors	r0, r0
   1a100:	f380 8811 	msr	BASEPRI, r0
   1a104:	f04f 0004 	mov.w	r0, #4
   1a108:	df02      	svc	2
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1a10a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a10e:	00d3      	lsls	r3, r2, #3
   1a110:	481c      	ldr	r0, [pc, #112]	; (1a184 <ll_rl_rpa_update+0x17c>)
   1a112:	4418      	add	r0, r3
   1a114:	4669      	mov	r1, sp
   1a116:	3007      	adds	r0, #7
   1a118:	f7ea fa72 	bl	4600 <bt_rpa_create>
				LL_ASSERT(!err);
   1a11c:	b9a8      	cbnz	r0, 1a14a <ll_rl_rpa_update+0x142>
				rl[i].local_rpa = &rpa;
   1a11e:	00ab      	lsls	r3, r5, #2
   1a120:	442b      	add	r3, r5
   1a122:	00da      	lsls	r2, r3, #3
   1a124:	4b17      	ldr	r3, [pc, #92]	; (1a184 <ll_rl_rpa_update+0x17c>)
   1a126:	eb03 0a02 	add.w	sl, r3, r2
   1a12a:	f8ca d024 	str.w	sp, [sl, #36]	; 0x24
				bt_addr_copy(&local_rpas[i], &rpa);
   1a12e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1a132:	ea4f 0b43 	mov.w	fp, r3, lsl #1
   1a136:	4b15      	ldr	r3, [pc, #84]	; (1a18c <ll_rl_rpa_update+0x184>)
   1a138:	449b      	add	fp, r3
   1a13a:	2206      	movs	r2, #6
   1a13c:	4669      	mov	r1, sp
   1a13e:	4658      	mov	r0, fp
   1a140:	f7e6 f8be 	bl	2c0 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1a144:	f8ca b024 	str.w	fp, [sl, #36]	; 0x24
   1a148:	e7a4      	b.n	1a094 <ll_rl_rpa_update+0x8c>
				LL_ASSERT(!err);
   1a14a:	4040      	eors	r0, r0
   1a14c:	f380 8811 	msr	BASEPRI, r0
   1a150:	f04f 0004 	mov.w	r0, #4
   1a154:	df02      	svc	2
	if (all) {
   1a156:	f1b8 0f00 	cmp.w	r8, #0
   1a15a:	d002      	beq.n	1a162 <ll_rl_rpa_update+0x15a>
		rpa_last_ms = now;
   1a15c:	4b07      	ldr	r3, [pc, #28]	; (1a17c <ll_rl_rpa_update+0x174>)
   1a15e:	e9c3 6700 	strd	r6, r7, [r3]
	if (timeout) {
   1a162:	f1b9 0f00 	cmp.w	r9, #0
   1a166:	d102      	bne.n	1a16e <ll_rl_rpa_update+0x166>
}
   1a168:	b005      	add	sp, #20
   1a16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (radio_adv_is_enabled()) {
   1a16e:	f7fd ffc9 	bl	18104 <radio_adv_is_enabled>
   1a172:	2800      	cmp	r0, #0
   1a174:	d0f8      	beq.n	1a168 <ll_rl_rpa_update+0x160>
			rpa_adv_refresh();
   1a176:	f7ff fef1 	bl	19f5c <rpa_adv_refresh>
}
   1a17a:	e7f5      	b.n	1a168 <ll_rl_rpa_update+0x160>
   1a17c:	20002ab8 	.word	0x20002ab8
   1a180:	20002c64 	.word	0x20002c64
   1a184:	200019d8 	.word	0x200019d8
   1a188:	20001958 	.word	0x20001958
   1a18c:	2000191c 	.word	0x2000191c

0001a190 <rpa_timeout>:
{
   1a190:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   1a192:	2001      	movs	r0, #1
   1a194:	f7ff ff38 	bl	1a008 <ll_rl_rpa_update>
   1a198:	4b03      	ldr	r3, [pc, #12]	; (1a1a8 <rpa_timeout+0x18>)
   1a19a:	681a      	ldr	r2, [r3, #0]
   1a19c:	4903      	ldr	r1, [pc, #12]	; (1a1ac <rpa_timeout+0x1c>)
   1a19e:	4804      	ldr	r0, [pc, #16]	; (1a1b0 <rpa_timeout+0x20>)
   1a1a0:	f00f ff50 	bl	2a044 <k_delayed_work_submit_to_queue>
   1a1a4:	bd08      	pop	{r3, pc}
   1a1a6:	bf00      	nop
   1a1a8:	20002c64 	.word	0x20002c64
   1a1ac:	20002b30 	.word	0x20002b30
   1a1b0:	20002c78 	.word	0x20002c78

0001a1b4 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   1a1b4:	2008      	movs	r0, #8
   1a1b6:	4770      	bx	lr

0001a1b8 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   1a1b8:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
   1a1ba:	2000      	movs	r0, #0
   1a1bc:	f7ff fb74 	bl	198a8 <rl_access_check>
   1a1c0:	b908      	cbnz	r0, 1a1c6 <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a1c2:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   1a1c4:	bd08      	pop	{r3, pc}
	rl_clear();
   1a1c6:	f7ff fa7d 	bl	196c4 <rl_clear>
	return 0;
   1a1ca:	2000      	movs	r0, #0
   1a1cc:	bd08      	pop	{r3, pc}
	...

0001a1d0 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   1a1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a1d4:	b082      	sub	sp, #8
   1a1d6:	4605      	mov	r5, r0
   1a1d8:	460c      	mov	r4, r1
   1a1da:	4616      	mov	r6, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   1a1dc:	2000      	movs	r0, #0
   1a1de:	f7ff fb63 	bl	198a8 <rl_access_check>
   1a1e2:	b918      	cbnz	r0, 1a1ec <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a1e4:	200c      	movs	r0, #12
		rl[i].wl = 0;
	}
	rl[i].taken = 1;

	return 0;
}
   1a1e6:	b002      	add	sp, #8
   1a1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   1a1ec:	462f      	mov	r7, r5
   1a1ee:	f817 0b01 	ldrb.w	r0, [r7], #1
   1a1f2:	f10d 0207 	add.w	r2, sp, #7
   1a1f6:	4639      	mov	r1, r7
   1a1f8:	f7ff fca4 	bl	19b44 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a1fc:	2807      	cmp	r0, #7
   1a1fe:	d801      	bhi.n	1a204 <ll_rl_add+0x34>
		return BT_HCI_ERR_INVALID_PARAM;
   1a200:	2012      	movs	r0, #18
   1a202:	e7f0      	b.n	1a1e6 <ll_rl_add+0x16>
	} else if (j >= ARRAY_SIZE(rl)) {
   1a204:	f89d 8007 	ldrb.w	r8, [sp, #7]
   1a208:	f1b8 0f07 	cmp.w	r8, #7
   1a20c:	d901      	bls.n	1a212 <ll_rl_add+0x42>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1a20e:	2007      	movs	r0, #7
   1a210:	e7e9      	b.n	1a1e6 <ll_rl_add+0x16>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1a212:	f8df a130 	ldr.w	sl, [pc, #304]	; 1a344 <ll_rl_add+0x174>
   1a216:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1a21a:	4443      	add	r3, r8
   1a21c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   1a220:	eb0a 0009 	add.w	r0, sl, r9
   1a224:	2206      	movs	r2, #6
   1a226:	4639      	mov	r1, r7
   1a228:	3001      	adds	r0, #1
   1a22a:	f7e6 f849 	bl	2c0 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a22e:	782a      	ldrb	r2, [r5, #0]
   1a230:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a234:	f362 1386 	bfi	r3, r2, #6, #1
   1a238:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1a23c:	2110      	movs	r1, #16
   1a23e:	4620      	mov	r0, r4
   1a240:	f7f5 f8f4 	bl	f42c <mem_nz>
   1a244:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a248:	f360 0382 	bfi	r3, r0, #2, #1
   1a24c:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1a250:	2110      	movs	r1, #16
   1a252:	4630      	mov	r0, r6
   1a254:	f7f5 f8ea 	bl	f42c <mem_nz>
   1a258:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a25c:	f360 03c3 	bfi	r3, r0, #3, #1
   1a260:	f80a 3009 	strb.w	r3, [sl, r9]
	if (rl[i].pirk) {
   1a264:	f013 0f04 	tst.w	r3, #4
   1a268:	d016      	beq.n	1a298 <ll_rl_add+0xc8>
		rl[i].pirk_idx = peer_irk_count;
   1a26a:	4933      	ldr	r1, [pc, #204]	; (1a338 <ll_rl_add+0x168>)
   1a26c:	780a      	ldrb	r2, [r1, #0]
   1a26e:	4653      	mov	r3, sl
   1a270:	444b      	add	r3, r9
   1a272:	75da      	strb	r2, [r3, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1a274:	4b31      	ldr	r3, [pc, #196]	; (1a33c <ll_rl_add+0x16c>)
   1a276:	f803 8002 	strb.w	r8, [r3, r2]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   1a27a:	1c53      	adds	r3, r2, #1
   1a27c:	700b      	strb	r3, [r1, #0]
   1a27e:	340f      	adds	r4, #15
   1a280:	4b2f      	ldr	r3, [pc, #188]	; (1a340 <ll_rl_add+0x170>)
   1a282:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1a286:	2210      	movs	r2, #16
   1a288:	e004      	b.n	1a294 <ll_rl_add+0xc4>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a28a:	7821      	ldrb	r1, [r4, #0]
   1a28c:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   1a28e:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a290:	3c01      	subs	r4, #1
   1a292:	3301      	adds	r3, #1
	for (; length > 0; length--) {
   1a294:	2a00      	cmp	r2, #0
   1a296:	d1f8      	bne.n	1a28a <ll_rl_add+0xba>
	if (rl[i].lirk) {
   1a298:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   1a29c:	00d3      	lsls	r3, r2, #3
   1a29e:	4a29      	ldr	r2, [pc, #164]	; (1a344 <ll_rl_add+0x174>)
   1a2a0:	5cd3      	ldrb	r3, [r2, r3]
   1a2a2:	f013 0f08 	tst.w	r3, #8
   1a2a6:	d12f      	bne.n	1a308 <ll_rl_add+0x138>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1a2a8:	4e26      	ldr	r6, [pc, #152]	; (1a344 <ll_rl_add+0x174>)
   1a2aa:	ea4f 0488 	mov.w	r4, r8, lsl #2
   1a2ae:	eb04 0208 	add.w	r2, r4, r8
   1a2b2:	00d3      	lsls	r3, r2, #3
   1a2b4:	3318      	adds	r3, #24
   1a2b6:	2206      	movs	r2, #6
   1a2b8:	2100      	movs	r1, #0
   1a2ba:	18f0      	adds	r0, r6, r3
   1a2bc:	f010 fb2c 	bl	2a918 <memset>
	rl[i].rpas_ready = 0;
   1a2c0:	4444      	add	r4, r8
   1a2c2:	00e2      	lsls	r2, r4, #3
   1a2c4:	5cb3      	ldrb	r3, [r6, r2]
	rl[i].dev = 0;
   1a2c6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1a2ca:	f36f 1304 	bfc	r3, #4, #1
   1a2ce:	54b3      	strb	r3, [r6, r2]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a2d0:	2200      	movs	r2, #0
   1a2d2:	4639      	mov	r1, r7
   1a2d4:	7828      	ldrb	r0, [r5, #0]
   1a2d6:	f7ff fa0b 	bl	196f0 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1a2da:	2807      	cmp	r0, #7
   1a2dc:	d822      	bhi.n	1a324 <ll_rl_add+0x154>
		wl[j].rl_idx = i;
   1a2de:	4b1a      	ldr	r3, [pc, #104]	; (1a348 <ll_rl_add+0x178>)
   1a2e0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a2e4:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1;
   1a2e8:	00e3      	lsls	r3, r4, #3
   1a2ea:	5cf2      	ldrb	r2, [r6, r3]
   1a2ec:	f042 0220 	orr.w	r2, r2, #32
   1a2f0:	54f2      	strb	r2, [r6, r3]
	rl[i].taken = 1;
   1a2f2:	4914      	ldr	r1, [pc, #80]	; (1a344 <ll_rl_add+0x174>)
   1a2f4:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1a2f8:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   1a2fc:	5cca      	ldrb	r2, [r1, r3]
   1a2fe:	f042 0201 	orr.w	r2, r2, #1
   1a302:	54ca      	strb	r2, [r1, r3]
	return 0;
   1a304:	2000      	movs	r0, #0
   1a306:	e76e      	b.n	1a1e6 <ll_rl_add+0x16>
		memcpy(rl[i].local_irk, lirk, 16);
   1a308:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1a30c:	4443      	add	r3, r8
   1a30e:	00da      	lsls	r2, r3, #3
   1a310:	4c0c      	ldr	r4, [pc, #48]	; (1a344 <ll_rl_add+0x174>)
   1a312:	4414      	add	r4, r2
   1a314:	2210      	movs	r2, #16
   1a316:	4631      	mov	r1, r6
   1a318:	1de0      	adds	r0, r4, #7
   1a31a:	f7e5 ffd1 	bl	2c0 <memcpy>
		rl[i].local_rpa = NULL;
   1a31e:	2300      	movs	r3, #0
   1a320:	6263      	str	r3, [r4, #36]	; 0x24
   1a322:	e7c1      	b.n	1a2a8 <ll_rl_add+0xd8>
		rl[i].wl = 0;
   1a324:	4a07      	ldr	r2, [pc, #28]	; (1a344 <ll_rl_add+0x174>)
   1a326:	eb08 0188 	add.w	r1, r8, r8, lsl #2
   1a32a:	00cb      	lsls	r3, r1, #3
   1a32c:	5cd1      	ldrb	r1, [r2, r3]
   1a32e:	f36f 1145 	bfc	r1, #5, #1
   1a332:	54d1      	strb	r1, [r2, r3]
   1a334:	e7dd      	b.n	1a2f2 <ll_rl_add+0x122>
   1a336:	bf00      	nop
   1a338:	2000194c 	.word	0x2000194c
   1a33c:	20001950 	.word	0x20001950
   1a340:	20001958 	.word	0x20001958
   1a344:	200019d8 	.word	0x200019d8
   1a348:	20001b50 	.word	0x20001b50

0001a34c <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   1a34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a350:	4604      	mov	r4, r0
	u8_t i;

	if (!rl_access_check(false)) {
   1a352:	2000      	movs	r0, #0
   1a354:	f7ff faa8 	bl	198a8 <rl_access_check>
   1a358:	b910      	cbnz	r0, 1a360 <ll_rl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a35a:	200c      	movs	r0, #12
   1a35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a360:	4626      	mov	r6, r4
   1a362:	f816 0b01 	ldrb.w	r0, [r6], #1
   1a366:	2200      	movs	r2, #0
   1a368:	4631      	mov	r1, r6
   1a36a:	f7ff fbeb 	bl	19b44 <ll_rl_find>
   1a36e:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   1a370:	2807      	cmp	r0, #7
   1a372:	d902      	bls.n	1a37a <ll_rl_remove+0x2e>
		}
		rl[i].taken = 0;
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a374:	2002      	movs	r0, #2
}
   1a376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rl[i].pirk) {
   1a37a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1a37e:	00d3      	lsls	r3, r2, #3
   1a380:	4a2d      	ldr	r2, [pc, #180]	; (1a438 <ll_rl_remove+0xec>)
   1a382:	5cd3      	ldrb	r3, [r2, r3]
   1a384:	f013 0f04 	tst.w	r3, #4
   1a388:	d03e      	beq.n	1a408 <ll_rl_remove+0xbc>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1a38a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a38e:	00da      	lsls	r2, r3, #3
   1a390:	4b29      	ldr	r3, [pc, #164]	; (1a438 <ll_rl_remove+0xec>)
   1a392:	4413      	add	r3, r2
   1a394:	7ddf      	ldrb	r7, [r3, #23]
   1a396:	4b29      	ldr	r3, [pc, #164]	; (1a43c <ll_rl_remove+0xf0>)
   1a398:	781b      	ldrb	r3, [r3, #0]
   1a39a:	3b01      	subs	r3, #1
			if (pj && pi != pj) {
   1a39c:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
   1a3a0:	d02e      	beq.n	1a400 <ll_rl_remove+0xb4>
   1a3a2:	4547      	cmp	r7, r8
   1a3a4:	d02c      	beq.n	1a400 <ll_rl_remove+0xb4>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   1a3a6:	4826      	ldr	r0, [pc, #152]	; (1a440 <ll_rl_remove+0xf4>)
   1a3a8:	2210      	movs	r2, #16
   1a3aa:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   1a3ae:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   1a3b2:	f7e5 ff85 	bl	2c0 <memcpy>
				for (k = 0;
   1a3b6:	2300      	movs	r3, #0
   1a3b8:	e001      	b.n	1a3be <ll_rl_remove+0x72>
				     k++) {
   1a3ba:	3301      	adds	r3, #1
   1a3bc:	b2db      	uxtb	r3, r3
				for (k = 0;
   1a3be:	2b07      	cmp	r3, #7
   1a3c0:	d81e      	bhi.n	1a400 <ll_rl_remove+0xb4>
					if (rl[k].taken && rl[k].pirk &&
   1a3c2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a3c6:	00ca      	lsls	r2, r1, #3
   1a3c8:	491b      	ldr	r1, [pc, #108]	; (1a438 <ll_rl_remove+0xec>)
   1a3ca:	5c8a      	ldrb	r2, [r1, r2]
   1a3cc:	f012 0f01 	tst.w	r2, #1
   1a3d0:	d0f3      	beq.n	1a3ba <ll_rl_remove+0x6e>
   1a3d2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a3d6:	00ca      	lsls	r2, r1, #3
   1a3d8:	4917      	ldr	r1, [pc, #92]	; (1a438 <ll_rl_remove+0xec>)
   1a3da:	5c8a      	ldrb	r2, [r1, r2]
   1a3dc:	f012 0f04 	tst.w	r2, #4
   1a3e0:	d0eb      	beq.n	1a3ba <ll_rl_remove+0x6e>
					    rl[k].pirk_idx == pj) {
   1a3e2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a3e6:	00d1      	lsls	r1, r2, #3
   1a3e8:	4a13      	ldr	r2, [pc, #76]	; (1a438 <ll_rl_remove+0xec>)
   1a3ea:	440a      	add	r2, r1
   1a3ec:	7dd2      	ldrb	r2, [r2, #23]
					if (rl[k].taken && rl[k].pirk &&
   1a3ee:	4590      	cmp	r8, r2
   1a3f0:	d1e3      	bne.n	1a3ba <ll_rl_remove+0x6e>
						rl[k].pirk_idx = pi;
   1a3f2:	2128      	movs	r1, #40	; 0x28
   1a3f4:	4a10      	ldr	r2, [pc, #64]	; (1a438 <ll_rl_remove+0xec>)
   1a3f6:	fb01 2003 	mla	r0, r1, r3, r2
   1a3fa:	75c7      	strb	r7, [r0, #23]
						peer_irk_rl_ids[pi] = k;
   1a3fc:	4a11      	ldr	r2, [pc, #68]	; (1a444 <ll_rl_remove+0xf8>)
   1a3fe:	55d3      	strb	r3, [r2, r7]
			peer_irk_count--;
   1a400:	4a0e      	ldr	r2, [pc, #56]	; (1a43c <ll_rl_remove+0xf0>)
   1a402:	7813      	ldrb	r3, [r2, #0]
   1a404:	3b01      	subs	r3, #1
   1a406:	7013      	strb	r3, [r2, #0]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a408:	2200      	movs	r2, #0
   1a40a:	4631      	mov	r1, r6
   1a40c:	7820      	ldrb	r0, [r4, #0]
   1a40e:	f7ff f96f 	bl	196f0 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1a412:	2807      	cmp	r0, #7
   1a414:	d804      	bhi.n	1a420 <ll_rl_remove+0xd4>
			wl[j].rl_idx = FILTER_IDX_NONE;
   1a416:	4b0c      	ldr	r3, [pc, #48]	; (1a448 <ll_rl_remove+0xfc>)
   1a418:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a41c:	23ff      	movs	r3, #255	; 0xff
   1a41e:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0;
   1a420:	4a05      	ldr	r2, [pc, #20]	; (1a438 <ll_rl_remove+0xec>)
   1a422:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a426:	00eb      	lsls	r3, r5, #3
   1a428:	5cd1      	ldrb	r1, [r2, r3]
   1a42a:	f36f 0100 	bfc	r1, #0, #1
   1a42e:	54d1      	strb	r1, [r2, r3]
		return 0;
   1a430:	2000      	movs	r0, #0
   1a432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a436:	bf00      	nop
   1a438:	200019d8 	.word	0x200019d8
   1a43c:	2000194c 	.word	0x2000194c
   1a440:	20001958 	.word	0x20001958
   1a444:	20001950 	.word	0x20001950
   1a448:	20001b50 	.word	0x20001b50

0001a44c <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   1a44c:	b510      	push	{r4, lr}
   1a44e:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   1a450:	795b      	ldrb	r3, [r3, #5]
   1a452:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a456:	2b40      	cmp	r3, #64	; 0x40
   1a458:	d000      	beq.n	1a45c <ll_rl_crpa_set+0x10>
   1a45a:	bd10      	pop	{r4, pc}

		if (id_addr) {
   1a45c:	b119      	cbz	r1, 1a466 <ll_rl_crpa_set+0x1a>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   1a45e:	2200      	movs	r2, #0
   1a460:	f7ff fb70 	bl	19b44 <ll_rl_find>
   1a464:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1a466:	2a07      	cmp	r2, #7
   1a468:	d8f7      	bhi.n	1a45a <ll_rl_crpa_set+0xe>
   1a46a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1a46e:	00cb      	lsls	r3, r1, #3
   1a470:	4907      	ldr	r1, [pc, #28]	; (1a490 <ll_rl_crpa_set+0x44>)
   1a472:	5ccb      	ldrb	r3, [r1, r3]
   1a474:	f013 0f01 	tst.w	r3, #1
   1a478:	d0ef      	beq.n	1a45a <ll_rl_crpa_set+0xe>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1a47a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1a47e:	00d0      	lsls	r0, r2, #3
   1a480:	3018      	adds	r0, #24
   1a482:	2206      	movs	r2, #6
   1a484:	4621      	mov	r1, r4
   1a486:	4b02      	ldr	r3, [pc, #8]	; (1a490 <ll_rl_crpa_set+0x44>)
   1a488:	4418      	add	r0, r3
   1a48a:	f7e5 ff19 	bl	2c0 <memcpy>
				       sizeof(bt_addr_t));
		}
	}
}
   1a48e:	e7e4      	b.n	1a45a <ll_rl_crpa_set+0xe>
   1a490:	200019d8 	.word	0x200019d8

0001a494 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   1a494:	b538      	push	{r3, r4, r5, lr}
   1a496:	460d      	mov	r5, r1
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a498:	4601      	mov	r1, r0
   1a49a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a49e:	2200      	movs	r2, #0
   1a4a0:	f7ff fb50 	bl	19b44 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1a4a4:	2807      	cmp	r0, #7
   1a4a6:	d901      	bls.n	1a4ac <ll_rl_crpa_get+0x18>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a4a8:	2002      	movs	r0, #2
   1a4aa:	bd38      	pop	{r3, r4, r5, pc}
   1a4ac:	4604      	mov	r4, r0
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1a4ae:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a4b2:	00d8      	lsls	r0, r3, #3
   1a4b4:	3018      	adds	r0, #24
   1a4b6:	2106      	movs	r1, #6
   1a4b8:	4b09      	ldr	r3, [pc, #36]	; (1a4e0 <ll_rl_crpa_get+0x4c>)
   1a4ba:	4418      	add	r0, r3
   1a4bc:	f7f4 ffb6 	bl	f42c <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1a4c0:	b908      	cbnz	r0, 1a4c6 <ll_rl_crpa_get+0x32>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a4c2:	2002      	movs	r0, #2
}
   1a4c4:	bd38      	pop	{r3, r4, r5, pc}
			bt_addr_copy(crpa, &rl[i].curr_rpa);
   1a4c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1a4ca:	00e1      	lsls	r1, r4, #3
   1a4cc:	3118      	adds	r1, #24
   1a4ce:	2206      	movs	r2, #6
   1a4d0:	4b03      	ldr	r3, [pc, #12]	; (1a4e0 <ll_rl_crpa_get+0x4c>)
   1a4d2:	4419      	add	r1, r3
   1a4d4:	4628      	mov	r0, r5
   1a4d6:	f7e5 fef3 	bl	2c0 <memcpy>
			return 0;
   1a4da:	2000      	movs	r0, #0
   1a4dc:	bd38      	pop	{r3, r4, r5, pc}
   1a4de:	bf00      	nop
   1a4e0:	200019d8 	.word	0x200019d8

0001a4e4 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   1a4e4:	b510      	push	{r4, lr}
   1a4e6:	460c      	mov	r4, r1
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a4e8:	4601      	mov	r1, r0
   1a4ea:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a4ee:	2200      	movs	r2, #0
   1a4f0:	f7ff fb28 	bl	19b44 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a4f4:	2807      	cmp	r0, #7
   1a4f6:	d901      	bls.n	1a4fc <ll_rl_lrpa_get+0x18>
		bt_addr_copy(lrpa, rl[i].local_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a4f8:	2002      	movs	r0, #2
}
   1a4fa:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1a4fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a500:	00c2      	lsls	r2, r0, #3
   1a502:	4b04      	ldr	r3, [pc, #16]	; (1a514 <ll_rl_lrpa_get+0x30>)
   1a504:	4413      	add	r3, r2
   1a506:	2206      	movs	r2, #6
   1a508:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a50a:	4620      	mov	r0, r4
   1a50c:	f7e5 fed8 	bl	2c0 <memcpy>
		return 0;
   1a510:	2000      	movs	r0, #0
   1a512:	bd10      	pop	{r4, pc}
   1a514:	200019d8 	.word	0x200019d8

0001a518 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   1a518:	b510      	push	{r4, lr}
   1a51a:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   1a51c:	2000      	movs	r0, #0
   1a51e:	f7ff f9c3 	bl	198a8 <rl_access_check>
   1a522:	b908      	cbnz	r0, 1a528 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a524:	200c      	movs	r0, #12
   1a526:	bd10      	pop	{r4, pc}
	}

	switch (enable) {
   1a528:	b11c      	cbz	r4, 1a532 <ll_rl_enable+0x1a>
   1a52a:	2c01      	cmp	r4, #1
   1a52c:	d005      	beq.n	1a53a <ll_rl_enable+0x22>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   1a52e:	2012      	movs	r0, #18
	}

	return 0;
}
   1a530:	bd10      	pop	{r4, pc}
		rl_enable = 0;
   1a532:	2000      	movs	r0, #0
   1a534:	4b03      	ldr	r3, [pc, #12]	; (1a544 <ll_rl_enable+0x2c>)
   1a536:	7018      	strb	r0, [r3, #0]
		break;
   1a538:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   1a53a:	2201      	movs	r2, #1
   1a53c:	4b01      	ldr	r3, [pc, #4]	; (1a544 <ll_rl_enable+0x2c>)
   1a53e:	701a      	strb	r2, [r3, #0]
	return 0;
   1a540:	2000      	movs	r0, #0
		break;
   1a542:	bd10      	pop	{r4, pc}
   1a544:	20001b18 	.word	0x20001b18

0001a548 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   1a548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a54c:	fb03 f000 	mul.w	r0, r3, r0
   1a550:	4b01      	ldr	r3, [pc, #4]	; (1a558 <ll_rl_timeout_set+0x10>)
   1a552:	6018      	str	r0, [r3, #0]
   1a554:	4770      	bx	lr
   1a556:	bf00      	nop
   1a558:	20002c64 	.word	0x20002c64

0001a55c <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   1a55c:	b538      	push	{r3, r4, r5, lr}
   1a55e:	4604      	mov	r4, r0
   1a560:	460d      	mov	r5, r1
	u8_t i;

	if (!rl_access_check(false)) {
   1a562:	2000      	movs	r0, #0
   1a564:	f7ff f9a0 	bl	198a8 <rl_access_check>
   1a568:	b908      	cbnz	r0, 1a56e <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a56a:	200c      	movs	r0, #12
   1a56c:	bd38      	pop	{r3, r4, r5, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a56e:	4621      	mov	r1, r4
   1a570:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a574:	2200      	movs	r2, #0
   1a576:	f7ff fae5 	bl	19b44 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a57a:	2807      	cmp	r0, #7
   1a57c:	d901      	bls.n	1a582 <ll_priv_mode_set+0x26>
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a57e:	2002      	movs	r0, #2
   1a580:	bd38      	pop	{r3, r4, r5, pc}
		switch (mode) {
   1a582:	b11d      	cbz	r5, 1a58c <ll_priv_mode_set+0x30>
   1a584:	2d01      	cmp	r5, #1
   1a586:	d00b      	beq.n	1a5a0 <ll_priv_mode_set+0x44>
			return BT_HCI_ERR_INVALID_PARAM;
   1a588:	2012      	movs	r0, #18
	}

	return 0;
}
   1a58a:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   1a58c:	4a09      	ldr	r2, [pc, #36]	; (1a5b4 <ll_priv_mode_set+0x58>)
   1a58e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a592:	00c3      	lsls	r3, r0, #3
   1a594:	5cd1      	ldrb	r1, [r2, r3]
   1a596:	f36f 1104 	bfc	r1, #4, #1
   1a59a:	54d1      	strb	r1, [r2, r3]
	return 0;
   1a59c:	2000      	movs	r0, #0
			break;
   1a59e:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   1a5a0:	4904      	ldr	r1, [pc, #16]	; (1a5b4 <ll_priv_mode_set+0x58>)
   1a5a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a5a6:	00c3      	lsls	r3, r0, #3
   1a5a8:	5cca      	ldrb	r2, [r1, r3]
   1a5aa:	f042 0210 	orr.w	r2, r2, #16
   1a5ae:	54ca      	strb	r2, [r1, r3]
	return 0;
   1a5b0:	2000      	movs	r0, #0
			break;
   1a5b2:	bd38      	pop	{r3, r4, r5, pc}
   1a5b4:	200019d8 	.word	0x200019d8

0001a5b8 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
   1a5b8:	b538      	push	{r3, r4, r5, lr}
   1a5ba:	4605      	mov	r5, r0
	wl_anon = 0;
   1a5bc:	2400      	movs	r4, #0
   1a5be:	4b0e      	ldr	r3, [pc, #56]	; (1a5f8 <ll_filter_reset+0x40>)
   1a5c0:	701c      	strb	r4, [r3, #0]

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();
   1a5c2:	f7ff f86b 	bl	1969c <wl_clear>

	rl_enable = 0;
   1a5c6:	4b0d      	ldr	r3, [pc, #52]	; (1a5fc <ll_filter_reset+0x44>)
   1a5c8:	701c      	strb	r4, [r3, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a5ca:	4a0d      	ldr	r2, [pc, #52]	; (1a600 <ll_filter_reset+0x48>)
   1a5cc:	4b0d      	ldr	r3, [pc, #52]	; (1a604 <ll_filter_reset+0x4c>)
   1a5ce:	601a      	str	r2, [r3, #0]
	rpa_last_ms = -1;
   1a5d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a5d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a5d8:	4b0b      	ldr	r3, [pc, #44]	; (1a608 <ll_filter_reset+0x50>)
   1a5da:	e9c3 0100 	strd	r0, r1, [r3]
	rl_clear();
   1a5de:	f7ff f871 	bl	196c4 <rl_clear>
	if (init) {
   1a5e2:	b91d      	cbnz	r5, 1a5ec <ll_filter_reset+0x34>
		k_delayed_work_init(&rpa_work, rpa_timeout);
	} else {
		k_delayed_work_cancel(&rpa_work);
   1a5e4:	4809      	ldr	r0, [pc, #36]	; (1a60c <ll_filter_reset+0x54>)
   1a5e6:	f00f fcd3 	bl	29f90 <k_delayed_work_cancel>
   1a5ea:	bd38      	pop	{r3, r4, r5, pc}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1a5ec:	4908      	ldr	r1, [pc, #32]	; (1a610 <ll_filter_reset+0x58>)
   1a5ee:	4807      	ldr	r0, [pc, #28]	; (1a60c <ll_filter_reset+0x54>)
   1a5f0:	f00f fcb0 	bl	29f54 <k_delayed_work_init>
   1a5f4:	bd38      	pop	{r3, r4, r5, pc}
   1a5f6:	bf00      	nop
   1a5f8:	20002ac0 	.word	0x20002ac0
   1a5fc:	20001b18 	.word	0x20001b18
   1a600:	000dbba0 	.word	0x000dbba0
   1a604:	20002c64 	.word	0x20002c64
   1a608:	20002ab8 	.word	0x20002ab8
   1a60c:	20002b30 	.word	0x20002b30
   1a610:	0001a191 	.word	0x0001a191

0001a614 <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   1a614:	4800      	ldr	r0, [pc, #0]	; (1a618 <ll_adv_set_get+0x4>)
   1a616:	4770      	bx	lr
   1a618:	20001bc4 	.word	0x20001bc4

0001a61c <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   1a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a620:	b087      	sub	sp, #28
   1a622:	4689      	mov	r9, r1
   1a624:	4614      	mov	r4, r2
   1a626:	461e      	mov	r6, r3
   1a628:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   1a62c:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   1a630:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1a634:	4b89      	ldr	r3, [pc, #548]	; (1a85c <ll_adv_params_set+0x240>)
   1a636:	e893 0003 	ldmia.w	r3, {r0, r1}
   1a63a:	9004      	str	r0, [sp, #16]
   1a63c:	f8ad 1014 	strh.w	r1, [sp, #20]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   1a640:	f7fd fd60 	bl	18104 <radio_adv_is_enabled>
   1a644:	9001      	str	r0, [sp, #4]
   1a646:	b128      	cbz	r0, 1a654 <ll_adv_params_set+0x38>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a648:	230c      	movs	r3, #12
   1a64a:	9301      	str	r3, [sp, #4]
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
   1a64c:	9801      	ldr	r0, [sp, #4]
   1a64e:	b007      	add	sp, #28
   1a650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ll_adv.phy_p = BIT(0);
   1a654:	4b82      	ldr	r3, [pc, #520]	; (1a860 <ll_adv_params_set+0x244>)
   1a656:	7a1a      	ldrb	r2, [r3, #8]
   1a658:	2101      	movs	r1, #1
   1a65a:	f361 0202 	bfi	r2, r1, #0, #3
   1a65e:	721a      	strb	r2, [r3, #8]
	if (adv_type > 0x04) {
   1a660:	2e04      	cmp	r6, #4
   1a662:	d90f      	bls.n	1a684 <ll_adv_params_set+0x68>
		if (evt_prop & BIT(4)) {
   1a664:	f019 0f10 	tst.w	r9, #16
   1a668:	d071      	beq.n	1a74e <ll_adv_params_set+0x132>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   1a66a:	4b7c      	ldr	r3, [pc, #496]	; (1a85c <ll_adv_params_set+0x240>)
   1a66c:	689b      	ldr	r3, [r3, #8]
   1a66e:	9303      	str	r3, [sp, #12]
			adv_type = leg_adv_type[evt_prop & 0x03];
   1a670:	f009 0303 	and.w	r3, r9, #3
   1a674:	aa06      	add	r2, sp, #24
   1a676:	4413      	add	r3, r2
   1a678:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
			if (evt_prop & BIT(3)) {
   1a67c:	f019 0f08 	tst.w	r9, #8
   1a680:	d000      	beq.n	1a684 <ll_adv_params_set+0x68>
				adv_type = 0x01;
   1a682:	460e      	mov	r6, r1
	if (adv_type != 0x01) {
   1a684:	2e01      	cmp	r6, #1
   1a686:	d071      	beq.n	1a76c <ll_adv_params_set+0x150>
		ll_adv.interval = interval;
   1a688:	4b75      	ldr	r3, [pc, #468]	; (1a860 <ll_adv_params_set+0x244>)
   1a68a:	60dc      	str	r4, [r3, #12]
	ll_adv.chan_map = chan_map;
   1a68c:	4a74      	ldr	r2, [pc, #464]	; (1a860 <ll_adv_params_set+0x244>)
   1a68e:	7813      	ldrb	r3, [r2, #0]
   1a690:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
   1a694:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
   1a698:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
   1a69c:	f361 03c4 	bfi	r3, r1, #3, #2
   1a6a0:	7013      	strb	r3, [r2, #0]
	radio_adv_data = radio_adv_data_get();
   1a6a2:	f7fd fd27 	bl	180f4 <radio_adv_data_get>
   1a6a6:	4607      	mov	r7, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a6a8:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   1a6ac:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a6b0:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
   1a6b4:	eb00 0a04 	add.w	sl, r0, r4
	pdu->type = pdu_adv_type[adv_type];
   1a6b8:	ab06      	add	r3, sp, #24
   1a6ba:	441e      	add	r6, r3
   1a6bc:	f816 2c08 	ldrb.w	r2, [r6, #-8]
   1a6c0:	5d03      	ldrb	r3, [r0, r4]
   1a6c2:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   1a6c6:	f36f 1304 	bfc	r3, #4, #1
   1a6ca:	5503      	strb	r3, [r0, r4]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1a6cc:	f003 030f 	and.w	r3, r3, #15
   1a6d0:	2b01      	cmp	r3, #1
   1a6d2:	d94f      	bls.n	1a774 <ll_adv_params_set+0x158>
		pdu->chan_sel = 0;
   1a6d4:	5d03      	ldrb	r3, [r0, r4]
   1a6d6:	f36f 1345 	bfc	r3, #5, #1
   1a6da:	5503      	strb	r3, [r0, r4]
	ll_adv.own_addr_type = own_addr_type;
   1a6dc:	4a60      	ldr	r2, [pc, #384]	; (1a860 <ll_adv_params_set+0x244>)
   1a6de:	7813      	ldrb	r3, [r2, #0]
   1a6e0:	f368 1346 	bfi	r3, r8, #5, #2
   1a6e4:	7013      	strb	r3, [r2, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a6e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1a6ea:	2b40      	cmp	r3, #64	; 0x40
   1a6ec:	d047      	beq.n	1a77e <ll_adv_params_set+0x162>
   1a6ee:	2b60      	cmp	r3, #96	; 0x60
   1a6f0:	d045      	beq.n	1a77e <ll_adv_params_set+0x162>
	pdu->tx_addr = own_addr_type & 0x1;
   1a6f2:	f008 0801 	and.w	r8, r8, #1
   1a6f6:	5d3b      	ldrb	r3, [r7, r4]
   1a6f8:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   1a6fc:	f36f 13c7 	bfc	r3, #7, #1
   1a700:	553b      	strb	r3, [r7, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1a702:	f003 030f 	and.w	r3, r3, #15
   1a706:	2b01      	cmp	r3, #1
   1a708:	d044      	beq.n	1a794 <ll_adv_params_set+0x178>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   1a70a:	2b07      	cmp	r3, #7
   1a70c:	d050      	beq.n	1a7b0 <ll_adv_params_set+0x194>
	} else if (pdu->len == 0) {
   1a70e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1a712:	b913      	cbnz	r3, 1a71a <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
   1a714:	2306      	movs	r3, #6
   1a716:	f88a 3001 	strb.w	r3, [sl, #1]
	radio_adv_data = radio_scan_data_get();
   1a71a:	f7fd fcef 	bl	180fc <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a71e:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   1a722:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   1a726:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
   1a72a:	1881      	adds	r1, r0, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1a72c:	5c83      	ldrb	r3, [r0, r2]
   1a72e:	2404      	movs	r4, #4
   1a730:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->tx_addr = own_addr_type & 0x1;
   1a734:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   1a738:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   1a73c:	f36f 13c7 	bfc	r3, #7, #1
   1a740:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   1a742:	784b      	ldrb	r3, [r1, #1]
   1a744:	2b00      	cmp	r3, #0
   1a746:	d181      	bne.n	1a64c <ll_adv_params_set+0x30>
		pdu->len = BDADDR_SIZE;
   1a748:	2306      	movs	r3, #6
   1a74a:	704b      	strb	r3, [r1, #1]
   1a74c:	e77e      	b.n	1a64c <ll_adv_params_set+0x30>
			if (((evt_prop & 0x03) == 0x03) ||
   1a74e:	f009 0303 	and.w	r3, r9, #3
   1a752:	2b03      	cmp	r3, #3
   1a754:	d07c      	beq.n	1a850 <ll_adv_params_set+0x234>
   1a756:	f009 030c 	and.w	r3, r9, #12
   1a75a:	2b0c      	cmp	r3, #12
   1a75c:	d07b      	beq.n	1a856 <ll_adv_params_set+0x23a>
			ll_adv.phy_p = phy_p;
   1a75e:	4b40      	ldr	r3, [pc, #256]	; (1a860 <ll_adv_params_set+0x244>)
   1a760:	7a1a      	ldrb	r2, [r3, #8]
   1a762:	f365 0202 	bfi	r2, r5, #0, #3
   1a766:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   1a768:	2605      	movs	r6, #5
   1a76a:	e78b      	b.n	1a684 <ll_adv_params_set+0x68>
		ll_adv.interval = 0;
   1a76c:	2200      	movs	r2, #0
   1a76e:	4b3c      	ldr	r3, [pc, #240]	; (1a860 <ll_adv_params_set+0x244>)
   1a770:	60da      	str	r2, [r3, #12]
   1a772:	e78b      	b.n	1a68c <ll_adv_params_set+0x70>
		pdu->chan_sel = 1;
   1a774:	5d03      	ldrb	r3, [r0, r4]
   1a776:	f043 0320 	orr.w	r3, r3, #32
   1a77a:	5503      	strb	r3, [r0, r4]
   1a77c:	e7ae      	b.n	1a6dc <ll_adv_params_set+0xc0>
		ll_adv.id_addr_type = direct_addr_type;
   1a77e:	4838      	ldr	r0, [pc, #224]	; (1a860 <ll_adv_params_set+0x244>)
   1a780:	7803      	ldrb	r3, [r0, #0]
   1a782:	f36b 13c7 	bfi	r3, fp, #7, #1
   1a786:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   1a78a:	2206      	movs	r2, #6
   1a78c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a78e:	f7e5 fd97 	bl	2c0 <memcpy>
   1a792:	e7ae      	b.n	1a6f2 <ll_adv_params_set+0xd6>
		pdu->rx_addr = direct_addr_type;
   1a794:	5d3b      	ldrb	r3, [r7, r4]
   1a796:	f36b 13c7 	bfi	r3, fp, #7, #1
   1a79a:	553b      	strb	r3, [r7, r4]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   1a79c:	2206      	movs	r2, #6
   1a79e:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a7a0:	f10a 0008 	add.w	r0, sl, #8
   1a7a4:	f7e5 fd8c 	bl	2c0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   1a7a8:	230c      	movs	r3, #12
   1a7aa:	f88a 3001 	strb.w	r3, [sl, #1]
   1a7ae:	e7b4      	b.n	1a71a <ll_adv_params_set+0xfe>
		p = (void *)&pdu->payload.adv_ext_ind;
   1a7b0:	f10a 0302 	add.w	r3, sl, #2
		ptr = (u8_t *)h + sizeof(*h);
   1a7b4:	f10a 0104 	add.w	r1, sl, #4
		p->ext_hdr_len = 0;
   1a7b8:	f89a 2002 	ldrb.w	r2, [sl, #2]
		p->adv_mode = evt_prop & 0x03;
   1a7bc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1a7c0:	f369 1287 	bfi	r2, r9, #6, #2
   1a7c4:	f88a 2002 	strb.w	r2, [sl, #2]
		*(u8_t *)h = 0;
   1a7c8:	2200      	movs	r2, #0
   1a7ca:	f88a 2003 	strb.w	r2, [sl, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   1a7ce:	f019 0f20 	tst.w	r9, #32
   1a7d2:	d10e      	bne.n	1a7f2 <ll_adv_params_set+0x1d6>
   1a7d4:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1a7d8:	f012 0fc0 	tst.w	r2, #192	; 0xc0
   1a7dc:	d109      	bne.n	1a7f2 <ll_adv_params_set+0x1d6>
   1a7de:	2d04      	cmp	r5, #4
   1a7e0:	d007      	beq.n	1a7f2 <ll_adv_params_set+0x1d6>
			h->adv_addr = 1;
   1a7e2:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1a7e6:	f042 0201 	orr.w	r2, r2, #1
   1a7ea:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr += BDADDR_SIZE;
   1a7ee:	f10a 010a 	add.w	r1, sl, #10
		if (evt_prop & BIT(6)) {
   1a7f2:	f019 0f40 	tst.w	r9, #64	; 0x40
   1a7f6:	d006      	beq.n	1a806 <ll_adv_params_set+0x1ea>
			h->tx_pwr = 1;
   1a7f8:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1a7fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1a800:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr++;
   1a804:	3101      	adds	r1, #1
		len = ptr - (u8_t *)p;
   1a806:	1acb      	subs	r3, r1, r3
   1a808:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
   1a80a:	2b02      	cmp	r3, #2
   1a80c:	d916      	bls.n	1a83c <ll_adv_params_set+0x220>
			p->ext_hdr_len = len -
   1a80e:	1e58      	subs	r0, r3, #1
   1a810:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1a814:	f360 0205 	bfi	r2, r0, #0, #6
   1a818:	f88a 2002 	strb.w	r2, [sl, #2]
			pdu->len = len;
   1a81c:	f88a 3001 	strb.w	r3, [sl, #1]
		if (h->tx_pwr) {
   1a820:	f89a 3003 	ldrb.w	r3, [sl, #3]
   1a824:	f013 0f40 	tst.w	r3, #64	; 0x40
   1a828:	f43f af77 	beq.w	1a71a <ll_adv_params_set+0xfe>
			if (tx_pwr) {
   1a82c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a82e:	b16b      	cbz	r3, 1a84c <ll_adv_params_set+0x230>
				if (*tx_pwr != 0x7F) {
   1a830:	781b      	ldrb	r3, [r3, #0]
   1a832:	2b7f      	cmp	r3, #127	; 0x7f
   1a834:	d006      	beq.n	1a844 <ll_adv_params_set+0x228>
			*ptr = _tx_pwr;
   1a836:	f801 3c01 	strb.w	r3, [r1, #-1]
   1a83a:	e76e      	b.n	1a71a <ll_adv_params_set+0xfe>
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   1a83c:	2301      	movs	r3, #1
   1a83e:	f88a 3001 	strb.w	r3, [sl, #1]
   1a842:	e7ed      	b.n	1a820 <ll_adv_params_set+0x204>
					*tx_pwr = _tx_pwr;
   1a844:	2300      	movs	r3, #0
   1a846:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1a848:	7013      	strb	r3, [r2, #0]
   1a84a:	e7f4      	b.n	1a836 <ll_adv_params_set+0x21a>
			_tx_pwr = 0;
   1a84c:	2300      	movs	r3, #0
   1a84e:	e7f2      	b.n	1a836 <ll_adv_params_set+0x21a>
				return 0x12; /* invalid HCI cmd param */
   1a850:	2312      	movs	r3, #18
   1a852:	9301      	str	r3, [sp, #4]
   1a854:	e6fa      	b.n	1a64c <ll_adv_params_set+0x30>
   1a856:	2312      	movs	r3, #18
   1a858:	9301      	str	r3, [sp, #4]
   1a85a:	e6f7      	b.n	1a64c <ll_adv_params_set+0x30>
   1a85c:	0002e758 	.word	0x0002e758
   1a860:	20001bc4 	.word	0x20001bc4

0001a864 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   1a864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a868:	4606      	mov	r6, r0
   1a86a:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   1a86c:	f7fd fc42 	bl	180f4 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a870:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   1a874:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a878:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1a87c:	1881      	adds	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1a87e:	5c83      	ldrb	r3, [r0, r2]
   1a880:	f003 030f 	and.w	r3, r3, #15
   1a884:	2b01      	cmp	r3, #1
   1a886:	d03e      	beq.n	1a906 <ll_adv_data_set+0xa2>
   1a888:	4604      	mov	r4, r0
   1a88a:	2b07      	cmp	r3, #7
   1a88c:	d03b      	beq.n	1a906 <ll_adv_data_set+0xa2>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   1a88e:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1a892:	429d      	cmp	r5, r3
   1a894:	d039      	beq.n	1a90a <ll_adv_data_set+0xa6>
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1a896:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1a89a:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   1a89e:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   1a8a2:	f814 e002 	ldrb.w	lr, [r4, r2]
   1a8a6:	5ce0      	ldrb	r0, [r4, r3]
   1a8a8:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
   1a8ac:	f36f 1004 	bfc	r0, #4, #1
   1a8b0:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   1a8b2:	5ca0      	ldrb	r0, [r4, r2]
   1a8b4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1a8b8:	f814 e003 	ldrb.w	lr, [r4, r3]
   1a8bc:	f360 1e45 	bfi	lr, r0, #5, #1
   1a8c0:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   1a8c4:	5ca0      	ldrb	r0, [r4, r2]
   1a8c6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a8ca:	fa5f fe8e 	uxtb.w	lr, lr
   1a8ce:	f360 1e86 	bfi	lr, r0, #6, #1
   1a8d2:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   1a8d6:	5ca2      	ldrb	r2, [r4, r2]
   1a8d8:	09d2      	lsrs	r2, r2, #7
   1a8da:	fa5f f08e 	uxtb.w	r0, lr
   1a8de:	f362 10c7 	bfi	r0, r2, #7, #1
   1a8e2:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->payload.adv_ind.addr[0],
   1a8e4:	2206      	movs	r2, #6
   1a8e6:	3102      	adds	r1, #2
   1a8e8:	f108 0002 	add.w	r0, r8, #2
   1a8ec:	f7e5 fce8 	bl	2c0 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   1a8f0:	4632      	mov	r2, r6
   1a8f2:	4639      	mov	r1, r7
   1a8f4:	f108 0008 	add.w	r0, r8, #8
   1a8f8:	f7e5 fce2 	bl	2c0 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1a8fc:	3606      	adds	r6, #6
   1a8fe:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   1a902:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1a906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_adv_data->last + 1;
   1a90a:	3501      	adds	r5, #1
   1a90c:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1a90e:	2d02      	cmp	r5, #2
   1a910:	d1c1      	bne.n	1a896 <ll_adv_data_set+0x32>
			last = 0;
   1a912:	2500      	movs	r5, #0
   1a914:	e7bf      	b.n	1a896 <ll_adv_data_set+0x32>

0001a916 <ll_scan_data_set>:
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   1a916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a91a:	4606      	mov	r6, r0
   1a91c:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   1a91e:	f7fd fbed 	bl	180fc <radio_scan_data_get>
   1a922:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   1a924:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   1a928:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   1a92c:	429a      	cmp	r2, r3
   1a92e:	d031      	beq.n	1a994 <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
	} else {
		last = radio_scan_data->last;
   1a930:	461d      	mov	r5, r3
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   1a932:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a936:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1a93a:	18e1      	adds	r1, r4, r3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1a93c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a940:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1a944:	eb04 0802 	add.w	r8, r4, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1a948:	5ca0      	ldrb	r0, [r4, r2]
   1a94a:	f04f 0e04 	mov.w	lr, #4
   1a94e:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   1a952:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   1a956:	f36f 1045 	bfc	r0, #5, #1
   1a95a:	54a0      	strb	r0, [r4, r2]
	pdu->tx_addr = prev->tx_addr;
   1a95c:	5ce0      	ldrb	r0, [r4, r3]
   1a95e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a962:	5ca3      	ldrb	r3, [r4, r2]
   1a964:	f360 1386 	bfi	r3, r0, #6, #1
	pdu->rx_addr = 0;
   1a968:	f36f 13c7 	bfc	r3, #7, #1
   1a96c:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   1a96e:	1db3      	adds	r3, r6, #6
   1a970:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   1a974:	2206      	movs	r2, #6
   1a976:	3102      	adds	r1, #2
   1a978:	f108 0002 	add.w	r0, r8, #2
   1a97c:	f7e5 fca0 	bl	2c0 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   1a980:	4632      	mov	r2, r6
   1a982:	4639      	mov	r1, r7
   1a984:	f108 0008 	add.w	r0, r8, #8
   1a988:	f7e5 fc9a 	bl	2c0 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   1a98c:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1a990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_scan_data->last + 1;
   1a994:	1c5d      	adds	r5, r3, #1
   1a996:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1a998:	2d02      	cmp	r5, #2
   1a99a:	d1ca      	bne.n	1a932 <ll_scan_data_set+0x1c>
			last = 0;
   1a99c:	2500      	movs	r5, #0
   1a99e:	e7c8      	b.n	1a932 <ll_scan_data_set+0x1c>

0001a9a0 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   1a9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9a4:	b082      	sub	sp, #8
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   1a9a6:	b120      	cbz	r0, 1a9b2 <ll_adv_enable+0x12>
		return radio_adv_disable();
	} else if (radio_adv_is_enabled()) {
   1a9a8:	f7fd fbac 	bl	18104 <radio_adv_is_enabled>
   1a9ac:	b130      	cbz	r0, 1a9bc <ll_adv_enable+0x1c>
		return 0;
   1a9ae:	2000      	movs	r0, #0
   1a9b0:	e001      	b.n	1a9b6 <ll_adv_enable+0x16>
		return radio_adv_disable();
   1a9b2:	f7fe fb27 	bl	19004 <radio_adv_disable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   1a9b6:	b002      	add	sp, #8
   1a9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   1a9bc:	f7fd fb9a 	bl	180f4 <radio_adv_data_get>
   1a9c0:	4605      	mov	r5, r0
	radio_scan_data = radio_scan_data_get();
   1a9c2:	f7fd fb9b 	bl	180fc <radio_scan_data_get>
			[radio_adv_data->last][0];
   1a9c6:	f895 204f 	ldrb.w	r2, [r5, #79]	; 0x4f
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   1a9ca:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   1a9ce:	ebc2 04c4 	rsb	r4, r2, r4, lsl #3
   1a9d2:	192e      	adds	r6, r5, r4
			[radio_scan_data->last][0];
   1a9d4:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   1a9d8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a9dc:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1a9e0:	18c7      	adds	r7, r0, r3
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   1a9e2:	5d2b      	ldrb	r3, [r5, r4]
   1a9e4:	f003 030f 	and.w	r3, r3, #15
   1a9e8:	2b07      	cmp	r3, #7
   1a9ea:	d023      	beq.n	1aa34 <ll_adv_enable+0x94>
		ll_filters_adv_update(ll_adv.filter_policy);
   1a9ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1aac0 <ll_adv_enable+0x120>
   1a9f0:	f898 0000 	ldrb.w	r0, [r8]
   1a9f4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1a9f8:	f7ff f874 	bl	19ae4 <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a9fc:	f898 3000 	ldrb.w	r3, [r8]
   1aa00:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1aa04:	2b40      	cmp	r3, #64	; 0x40
   1aa06:	d02b      	beq.n	1aa60 <ll_adv_enable+0xc0>
   1aa08:	2b60      	cmp	r3, #96	; 0x60
   1aa0a:	d029      	beq.n	1aa60 <ll_adv_enable+0xc0>
		bool priv = false;
   1aa0c:	2300      	movs	r3, #0
	u8_t   rl_idx = FILTER_IDX_NONE;
   1aa0e:	f04f 08ff 	mov.w	r8, #255	; 0xff
		if (!priv) {
   1aa12:	2b00      	cmp	r3, #0
   1aa14:	d03b      	beq.n	1aa8e <ll_adv_enable+0xee>
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1aa16:	4b2a      	ldr	r3, [pc, #168]	; (1aac0 <ll_adv_enable+0x120>)
   1aa18:	7a18      	ldrb	r0, [r3, #8]
   1aa1a:	8999      	ldrh	r1, [r3, #12]
				  ll_adv.chan_map, ll_adv.filter_policy,
   1aa1c:	781a      	ldrb	r2, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1aa1e:	f8cd 8000 	str.w	r8, [sp]
   1aa22:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   1aa26:	f002 0207 	and.w	r2, r2, #7
   1aa2a:	f000 0007 	and.w	r0, r0, #7
   1aa2e:	f7fe f90b 	bl	18c48 <radio_adv_enable>
	return status;
   1aa32:	e7c0      	b.n	1a9b6 <ll_adv_enable+0x16>
		ptr = (u8_t *)h + sizeof(*h);
   1aa34:	1d37      	adds	r7, r6, #4
		if (h->adv_addr) {
   1aa36:	78f3      	ldrb	r3, [r6, #3]
   1aa38:	f013 0f01 	tst.w	r3, #1
   1aa3c:	d102      	bne.n	1aa44 <ll_adv_enable+0xa4>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1aa3e:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1aa42:	e7e8      	b.n	1aa16 <ll_adv_enable+0x76>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   1aa44:	5d28      	ldrb	r0, [r5, r4]
   1aa46:	2100      	movs	r1, #0
   1aa48:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1aa4c:	f7fe fdf4 	bl	19638 <ll_addr_get>
   1aa50:	2206      	movs	r2, #6
   1aa52:	4601      	mov	r1, r0
   1aa54:	4638      	mov	r0, r7
   1aa56:	f7e5 fc33 	bl	2c0 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1aa5a:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1aa5e:	e7da      	b.n	1aa16 <ll_adv_enable+0x76>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   1aa60:	4917      	ldr	r1, [pc, #92]	; (1aac0 <ll_adv_enable+0x120>)
   1aa62:	f811 0b02 	ldrb.w	r0, [r1], #2
   1aa66:	2200      	movs	r2, #0
   1aa68:	09c0      	lsrs	r0, r0, #7
   1aa6a:	f7ff f86b 	bl	19b44 <ll_rl_find>
   1aa6e:	4680      	mov	r8, r0
			if (rl_idx != FILTER_IDX_NONE) {
   1aa70:	28ff      	cmp	r0, #255	; 0xff
   1aa72:	d002      	beq.n	1aa7a <ll_adv_enable+0xda>
				ll_rl_rpa_update(false);
   1aa74:	2000      	movs	r0, #0
   1aa76:	f7ff fac7 	bl	1a008 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   1aa7a:	4631      	mov	r1, r6
   1aa7c:	4640      	mov	r0, r8
   1aa7e:	f7ff f9f9 	bl	19e74 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   1aa82:	4639      	mov	r1, r7
   1aa84:	4640      	mov	r0, r8
   1aa86:	f7ff f9f5 	bl	19e74 <ll_rl_pdu_adv_update>
			priv = true;
   1aa8a:	2301      	movs	r3, #1
   1aa8c:	e7c1      	b.n	1aa12 <ll_adv_enable+0x72>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1aa8e:	3602      	adds	r6, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1aa90:	5d28      	ldrb	r0, [r5, r4]
   1aa92:	2100      	movs	r1, #0
   1aa94:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1aa98:	f7fe fdce 	bl	19638 <ll_addr_get>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1aa9c:	2206      	movs	r2, #6
   1aa9e:	4601      	mov	r1, r0
   1aaa0:	4630      	mov	r0, r6
   1aaa2:	f7e5 fc0d 	bl	2c0 <memcpy>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1aaa6:	3702      	adds	r7, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1aaa8:	5d28      	ldrb	r0, [r5, r4]
   1aaaa:	2100      	movs	r1, #0
   1aaac:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1aab0:	f7fe fdc2 	bl	19638 <ll_addr_get>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1aab4:	2206      	movs	r2, #6
   1aab6:	4601      	mov	r1, r0
   1aab8:	4638      	mov	r0, r7
   1aaba:	f7e5 fc01 	bl	2c0 <memcpy>
   1aabe:	e7aa      	b.n	1aa16 <ll_adv_enable+0x76>
   1aac0:	20001bc4 	.word	0x20001bc4

0001aac4 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   1aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aac6:	4607      	mov	r7, r0
   1aac8:	460e      	mov	r6, r1
   1aaca:	4615      	mov	r5, r2
   1aacc:	461c      	mov	r4, r3
	if (radio_scan_is_enabled()) {
   1aace:	f7fd fb31 	bl	18134 <radio_scan_is_enabled>
   1aad2:	b110      	cbz	r0, 1aada <ll_scan_params_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1aad4:	220c      	movs	r2, #12
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
	ll_scan.filter_policy = filter_policy;

	return 0;
}
   1aad6:	4610      	mov	r0, r2
   1aad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aada:	4602      	mov	r2, r0
	ll_scan.type = type;
   1aadc:	4906      	ldr	r1, [pc, #24]	; (1aaf8 <ll_scan_params_set+0x34>)
   1aade:	790b      	ldrb	r3, [r1, #4]
   1aae0:	f367 0303 	bfi	r3, r7, #0, #4
	ll_scan.interval = interval;
   1aae4:	800e      	strh	r6, [r1, #0]
	ll_scan.window = window;
   1aae6:	804d      	strh	r5, [r1, #2]
	ll_scan.own_addr_type = own_addr_type;
   1aae8:	f364 1305 	bfi	r3, r4, #4, #2
	ll_scan.filter_policy = filter_policy;
   1aaec:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1aaf0:	f360 1387 	bfi	r3, r0, #6, #2
   1aaf4:	710b      	strb	r3, [r1, #4]
	return 0;
   1aaf6:	e7ee      	b.n	1aad6 <ll_scan_params_set+0x12>
   1aaf8:	20001bd4 	.word	0x20001bd4

0001aafc <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   1aafc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aafe:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   1ab00:	b120      	cbz	r0, 1ab0c <ll_scan_enable+0x10>
		return radio_scan_disable();
	} else if (radio_scan_is_enabled()) {
   1ab02:	f7fd fb17 	bl	18134 <radio_scan_is_enabled>
   1ab06:	b128      	cbz	r0, 1ab14 <ll_scan_enable+0x18>
		/* Duplicate filtering is processed in the HCI layer */
		return 0;
   1ab08:	2000      	movs	r0, #0
   1ab0a:	e001      	b.n	1ab10 <ll_scan_enable+0x14>
		return radio_scan_disable();
   1ab0c:	f7fe fbac 	bl	19268 <radio_scan_disable>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   1ab10:	b005      	add	sp, #20
   1ab12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_filters_scan_update(ll_scan.filter_policy);
   1ab14:	4c18      	ldr	r4, [pc, #96]	; (1ab78 <ll_scan_enable+0x7c>)
   1ab16:	7920      	ldrb	r0, [r4, #4]
   1ab18:	0980      	lsrs	r0, r0, #6
   1ab1a:	f7fe fffb 	bl	19b14 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   1ab1e:	7923      	ldrb	r3, [r4, #4]
   1ab20:	f013 0f01 	tst.w	r3, #1
   1ab24:	d00d      	beq.n	1ab42 <ll_scan_enable+0x46>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1ab26:	7923      	ldrb	r3, [r4, #4]
   1ab28:	f003 0330 	and.w	r3, r3, #48	; 0x30
	if ((ll_scan.type & 0x1) &&
   1ab2c:	2b20      	cmp	r3, #32
   1ab2e:	d003      	beq.n	1ab38 <ll_scan_enable+0x3c>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1ab30:	2b30      	cmp	r3, #48	; 0x30
   1ab32:	d001      	beq.n	1ab38 <ll_scan_enable+0x3c>
	u8_t  rpa_gen = 0;
   1ab34:	2700      	movs	r7, #0
   1ab36:	e005      	b.n	1ab44 <ll_scan_enable+0x48>
		ll_rl_rpa_update(false);
   1ab38:	2000      	movs	r0, #0
   1ab3a:	f7ff fa65 	bl	1a008 <ll_rl_rpa_update>
		rpa_gen = 1;
   1ab3e:	2701      	movs	r7, #1
   1ab40:	e000      	b.n	1ab44 <ll_scan_enable+0x48>
	u8_t  rpa_gen = 0;
   1ab42:	2700      	movs	r7, #0
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1ab44:	4d0c      	ldr	r5, [pc, #48]	; (1ab78 <ll_scan_enable+0x7c>)
   1ab46:	792c      	ldrb	r4, [r5, #4]
   1ab48:	f004 060f 	and.w	r6, r4, #15
   1ab4c:	f3c4 1400 	ubfx	r4, r4, #4, #1
   1ab50:	2100      	movs	r1, #0
   1ab52:	4620      	mov	r0, r4
   1ab54:	f7fe fd70 	bl	19638 <ll_addr_get>
   1ab58:	882b      	ldrh	r3, [r5, #0]
   1ab5a:	8869      	ldrh	r1, [r5, #2]
				   ll_scan.filter_policy, rpa_gen,
   1ab5c:	792a      	ldrb	r2, [r5, #4]
   1ab5e:	0992      	lsrs	r2, r2, #6
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1ab60:	25ff      	movs	r5, #255	; 0xff
   1ab62:	9503      	str	r5, [sp, #12]
   1ab64:	9702      	str	r7, [sp, #8]
   1ab66:	9201      	str	r2, [sp, #4]
   1ab68:	9100      	str	r1, [sp, #0]
   1ab6a:	4602      	mov	r2, r0
   1ab6c:	4621      	mov	r1, r4
   1ab6e:	4630      	mov	r0, r6
   1ab70:	f7fe fa7a 	bl	19068 <radio_scan_enable>
	return status;
   1ab74:	e7cc      	b.n	1ab10 <ll_scan_enable+0x14>
   1ab76:	bf00      	nop
   1ab78:	20001bd4 	.word	0x20001bd4

0001ab7c <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   1ab7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ab80:	b085      	sub	sp, #20
   1ab82:	4607      	mov	r7, r0
   1ab84:	4688      	mov	r8, r1
   1ab86:	4615      	mov	r5, r2
   1ab88:	461e      	mov	r6, r3
   1ab8a:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (radio_scan_is_enabled()) {
   1ab8e:	f7fd fad1 	bl	18134 <radio_scan_is_enabled>
   1ab92:	b120      	cbz	r0, 1ab9e <ll_create_connection+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ab94:	230c      	movs	r3, #12
#endif
	return radio_scan_enable(0, own_addr_type,
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   1ab96:	4618      	mov	r0, r3
   1ab98:	b005      	add	sp, #20
   1ab9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1ab9e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1aba2:	9300      	str	r3, [sp, #0]
   1aba4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   1aba8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1abac:	990c      	ldr	r1, [sp, #48]	; 0x30
   1abae:	4630      	mov	r0, r6
   1abb0:	f7fd fada 	bl	18168 <radio_connect_enable>
	if (status) {
   1abb4:	4603      	mov	r3, r0
   1abb6:	2800      	cmp	r0, #0
   1abb8:	d1ed      	bne.n	1ab96 <ll_create_connection+0x1a>
	ll_filters_scan_update(filter_policy);
   1abba:	4628      	mov	r0, r5
   1abbc:	f7fe ffaa 	bl	19b14 <ll_filters_scan_update>
	if (!filter_policy && ctrl_rl_enabled()) {
   1abc0:	b1c5      	cbz	r5, 1abf4 <ll_create_connection+0x78>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1abc2:	f04f 09ff 	mov.w	r9, #255	; 0xff
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1abc6:	1ea3      	subs	r3, r4, #2
   1abc8:	b2db      	uxtb	r3, r3
   1abca:	2b01      	cmp	r3, #1
   1abcc:	d91f      	bls.n	1ac0e <ll_create_connection+0x92>
	u8_t  rpa_gen = 0;
   1abce:	2600      	movs	r6, #0
	return radio_scan_enable(0, own_addr_type,
   1abd0:	2100      	movs	r1, #0
   1abd2:	4620      	mov	r0, r4
   1abd4:	f7fe fd30 	bl	19638 <ll_addr_get>
   1abd8:	f8cd 900c 	str.w	r9, [sp, #12]
   1abdc:	9602      	str	r6, [sp, #8]
   1abde:	9501      	str	r5, [sp, #4]
   1abe0:	f8cd 8000 	str.w	r8, [sp]
   1abe4:	463b      	mov	r3, r7
   1abe6:	4602      	mov	r2, r0
   1abe8:	4621      	mov	r1, r4
   1abea:	2000      	movs	r0, #0
   1abec:	f7fe fa3c 	bl	19068 <radio_scan_enable>
   1abf0:	4603      	mov	r3, r0
   1abf2:	e7d0      	b.n	1ab96 <ll_create_connection+0x1a>
	if (!filter_policy && ctrl_rl_enabled()) {
   1abf4:	f7ff f936 	bl	19e64 <ctrl_rl_enabled>
   1abf8:	b910      	cbnz	r0, 1ac00 <ll_create_connection+0x84>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1abfa:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1abfe:	e7e2      	b.n	1abc6 <ll_create_connection+0x4a>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1ac00:	2200      	movs	r2, #0
   1ac02:	990c      	ldr	r1, [sp, #48]	; 0x30
   1ac04:	4630      	mov	r0, r6
   1ac06:	f7fe ff9d 	bl	19b44 <ll_rl_find>
   1ac0a:	4681      	mov	r9, r0
   1ac0c:	e7db      	b.n	1abc6 <ll_create_connection+0x4a>
		ll_rl_rpa_update(false);
   1ac0e:	2000      	movs	r0, #0
   1ac10:	f7ff f9fa 	bl	1a008 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   1ac14:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   1ac18:	2601      	movs	r6, #1
   1ac1a:	e7d9      	b.n	1abd0 <ll_create_connection+0x54>

0001ac1c <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1ac1c:	4b01      	ldr	r3, [pc, #4]	; (1ac24 <pool_id+0x8>)
   1ac1e:	1ac0      	subs	r0, r0, r3
}
   1ac20:	1140      	asrs	r0, r0, #5
   1ac22:	4770      	bx	lr
   1ac24:	2000d200 	.word	0x2000d200

0001ac28 <net_buf_pool_get>:
}
   1ac28:	4b01      	ldr	r3, [pc, #4]	; (1ac30 <net_buf_pool_get+0x8>)
   1ac2a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1ac2e:	4770      	bx	lr
   1ac30:	2000d200 	.word	0x2000d200

0001ac34 <net_buf_reset>:
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
   1ac34:	2300      	movs	r3, #0
   1ac36:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   1ac38:	f100 0310 	add.w	r3, r0, #16
   1ac3c:	6083      	str	r3, [r0, #8]
   1ac3e:	4770      	bx	lr

0001ac40 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   1ac40:	b570      	push	{r4, r5, r6, lr}
   1ac42:	4605      	mov	r5, r0
	__asm__ volatile(
   1ac44:	f04f 0320 	mov.w	r3, #32
   1ac48:	f3ef 8611 	mrs	r6, BASEPRI
   1ac4c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1ac50:	8a43      	ldrh	r3, [r0, #18]
   1ac52:	b373      	cbz	r3, 1acb2 <net_buf_alloc+0x72>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1ac54:	8a02      	ldrh	r2, [r0, #16]
   1ac56:	4293      	cmp	r3, r2
   1ac58:	d207      	bcs.n	1ac6a <net_buf_alloc+0x2a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   1ac5a:	2100      	movs	r1, #0
   1ac5c:	f00e f83a 	bl	28cd4 <k_queue_get>
			if (buf) {
   1ac60:	4604      	mov	r4, r0
   1ac62:	b110      	cbz	r0, 1ac6a <net_buf_alloc+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1ac64:	f386 8811 	msr	BASEPRI, r6
   1ac68:	e019      	b.n	1ac9e <net_buf_alloc+0x5e>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   1ac6a:	8a6b      	ldrh	r3, [r5, #18]
   1ac6c:	1e5a      	subs	r2, r3, #1
   1ac6e:	826a      	strh	r2, [r5, #18]
   1ac70:	f386 8811 	msr	BASEPRI, r6
	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   1ac74:	69ea      	ldr	r2, [r5, #28]
   1ac76:	8a2c      	ldrh	r4, [r5, #16]
   1ac78:	1ae4      	subs	r4, r4, r3
   1ac7a:	8aab      	ldrh	r3, [r5, #20]
   1ac7c:	3303      	adds	r3, #3
   1ac7e:	f023 0303 	bic.w	r3, r3, #3
   1ac82:	8ae9      	ldrh	r1, [r5, #22]
   1ac84:	3103      	adds	r1, #3
   1ac86:	f021 0103 	bic.w	r1, r1, #3
   1ac8a:	440b      	add	r3, r1
   1ac8c:	3310      	adds	r3, #16
   1ac8e:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   1ac92:	4628      	mov	r0, r5
   1ac94:	f7ff ffc2 	bl	1ac1c <pool_id>
   1ac98:	71a0      	strb	r0, [r4, #6]
	buf->size = pool->buf_size;
   1ac9a:	8aab      	ldrh	r3, [r5, #20]
   1ac9c:	81e3      	strh	r3, [r4, #14]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   1ac9e:	2301      	movs	r3, #1
   1aca0:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   1aca2:	2300      	movs	r3, #0
   1aca4:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1aca6:	6023      	str	r3, [r4, #0]
	net_buf_reset(buf);
   1aca8:	4620      	mov	r0, r4
   1acaa:	f7ff ffc3 	bl	1ac34 <net_buf_reset>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1acae:	4620      	mov	r0, r4
   1acb0:	bd70      	pop	{r4, r5, r6, pc}
   1acb2:	f386 8811 	msr	BASEPRI, r6
	buf = k_lifo_get(&pool->free, timeout);
   1acb6:	f00e f80d 	bl	28cd4 <k_queue_get>
	if (!buf) {
   1acba:	4604      	mov	r4, r0
   1acbc:	2800      	cmp	r0, #0
   1acbe:	d1ee      	bne.n	1ac9e <net_buf_alloc+0x5e>
   1acc0:	e7f5      	b.n	1acae <net_buf_alloc+0x6e>

0001acc2 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1acc2:	b570      	push	{r4, r5, r6, lr}
   1acc4:	4605      	mov	r5, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   1acc6:	f00e f805 	bl	28cd4 <k_queue_get>
	if (!buf) {
   1acca:	4606      	mov	r6, r0
   1accc:	b188      	cbz	r0, 1acf2 <net_buf_get+0x30>
   1acce:	4604      	mov	r4, r0
   1acd0:	e009      	b.n	1ace6 <net_buf_get+0x24>

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1acd2:	2100      	movs	r1, #0
   1acd4:	4628      	mov	r0, r5
   1acd6:	f00d fffd 	bl	28cd4 <k_queue_get>
   1acda:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1acdc:	7963      	ldrb	r3, [r4, #5]
   1acde:	f023 0301 	bic.w	r3, r3, #1
   1ace2:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ace4:	4604      	mov	r4, r0
   1ace6:	7963      	ldrb	r3, [r4, #5]
   1ace8:	f013 0f01 	tst.w	r3, #1
   1acec:	d1f1      	bne.n	1acd2 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1acee:	2300      	movs	r3, #0
   1acf0:	6023      	str	r3, [r4, #0]

	return buf;
}
   1acf2:	4630      	mov	r0, r6
   1acf4:	bd70      	pop	{r4, r5, r6, pc}

0001acf6 <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1acf6:	f100 0310 	add.w	r3, r0, #16
   1acfa:	4419      	add	r1, r3
   1acfc:	6081      	str	r1, [r0, #8]
   1acfe:	4770      	bx	lr

0001ad00 <net_buf_put>:
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1ad00:	b510      	push	{r4, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1ad02:	460a      	mov	r2, r1
   1ad04:	e004      	b.n	1ad10 <net_buf_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1ad06:	7953      	ldrb	r3, [r2, #5]
   1ad08:	f043 0301 	orr.w	r3, r3, #1
   1ad0c:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1ad0e:	4622      	mov	r2, r4
   1ad10:	6814      	ldr	r4, [r2, #0]
   1ad12:	2c00      	cmp	r4, #0
   1ad14:	d1f7      	bne.n	1ad06 <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   1ad16:	f00d ffc1 	bl	28c9c <k_queue_append_list>
   1ad1a:	bd10      	pop	{r4, pc}

0001ad1c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1ad1c:	b538      	push	{r3, r4, r5, lr}
   1ad1e:	4604      	mov	r4, r0
	NET_BUF_ASSERT(buf);

	while (buf) {
   1ad20:	e006      	b.n	1ad30 <net_buf_unref+0x14>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ad22:	79a0      	ldrb	r0, [r4, #6]
   1ad24:	f7ff ff80 	bl	1ac28 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1ad28:	4621      	mov	r1, r4
   1ad2a:	f00d ffb1 	bl	28c90 <k_queue_prepend>
{
   1ad2e:	462c      	mov	r4, r5
	while (buf) {
   1ad30:	b17c      	cbz	r4, 1ad52 <net_buf_unref+0x36>
		struct net_buf *frags = buf->frags;
   1ad32:	6825      	ldr	r5, [r4, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   1ad34:	7923      	ldrb	r3, [r4, #4]
   1ad36:	3b01      	subs	r3, #1
   1ad38:	b2db      	uxtb	r3, r3
   1ad3a:	7123      	strb	r3, [r4, #4]
   1ad3c:	b94b      	cbnz	r3, 1ad52 <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;
   1ad3e:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1ad40:	79a0      	ldrb	r0, [r4, #6]
   1ad42:	f7ff ff71 	bl	1ac28 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1ad46:	6983      	ldr	r3, [r0, #24]
   1ad48:	2b00      	cmp	r3, #0
   1ad4a:	d0ea      	beq.n	1ad22 <net_buf_unref+0x6>
			pool->destroy(buf);
   1ad4c:	4620      	mov	r0, r4
   1ad4e:	4798      	blx	r3
   1ad50:	e7ed      	b.n	1ad2e <net_buf_unref+0x12>
   1ad52:	bd38      	pop	{r3, r4, r5, pc}

0001ad54 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1ad54:	7903      	ldrb	r3, [r0, #4]
   1ad56:	3301      	adds	r3, #1
   1ad58:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1ad5a:	4770      	bx	lr

0001ad5c <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   1ad5c:	e000      	b.n	1ad60 <net_buf_frag_last+0x4>
		buf = buf->frags;
   1ad5e:	4618      	mov	r0, r3
	while (buf->frags) {
   1ad60:	6803      	ldr	r3, [r0, #0]
   1ad62:	2b00      	cmp	r3, #0
   1ad64:	d1fb      	bne.n	1ad5e <net_buf_frag_last+0x2>
	}

	return buf;
}
   1ad66:	4770      	bx	lr

0001ad68 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1ad68:	b570      	push	{r4, r5, r6, lr}
   1ad6a:	4604      	mov	r4, r0
   1ad6c:	460d      	mov	r5, r1
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   1ad6e:	6806      	ldr	r6, [r0, #0]
   1ad70:	b11e      	cbz	r6, 1ad7a <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1ad72:	4608      	mov	r0, r1
   1ad74:	f7ff fff2 	bl	1ad5c <net_buf_frag_last>
   1ad78:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1ad7a:	6025      	str	r5, [r4, #0]
   1ad7c:	bd70      	pop	{r4, r5, r6, pc}

0001ad7e <net_buf_frag_add>:
}

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1ad7e:	b538      	push	{r3, r4, r5, lr}
   1ad80:	460d      	mov	r5, r1
	NET_BUF_ASSERT(frag);

	if (!head) {
   1ad82:	b138      	cbz	r0, 1ad94 <net_buf_frag_add+0x16>
   1ad84:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1ad86:	f7ff ffe9 	bl	1ad5c <net_buf_frag_last>
   1ad8a:	4629      	mov	r1, r5
   1ad8c:	f7ff ffec 	bl	1ad68 <net_buf_frag_insert>

	return head;
   1ad90:	4620      	mov	r0, r4
}
   1ad92:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   1ad94:	4608      	mov	r0, r1
   1ad96:	f7ff ffdd 	bl	1ad54 <net_buf_ref>
   1ad9a:	bd38      	pop	{r3, r4, r5, pc}

0001ad9c <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1ad9c:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   1ad9e:	b108      	cbz	r0, 1ada4 <net_buf_frag_del+0x8>
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   1ada0:	680a      	ldr	r2, [r1, #0]
   1ada2:	6002      	str	r2, [r0, #0]
	}

	next_frag = frag->frags;
   1ada4:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1ada6:	2300      	movs	r3, #0
   1ada8:	600b      	str	r3, [r1, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1adaa:	4608      	mov	r0, r1
   1adac:	f7ff ffb6 	bl	1ad1c <net_buf_unref>
#endif

	return next_frag;
}
   1adb0:	4620      	mov	r0, r4
   1adb2:	bd10      	pop	{r4, pc}

0001adb4 <net_buf_simple_add>:
	return buf->data + buf->len;
   1adb4:	6802      	ldr	r2, [r0, #0]
   1adb6:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1adb8:	4419      	add	r1, r3
   1adba:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1adbc:	18d0      	adds	r0, r2, r3
   1adbe:	4770      	bx	lr

0001adc0 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1adc0:	b538      	push	{r3, r4, r5, lr}
   1adc2:	460d      	mov	r5, r1
   1adc4:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1adc6:	4611      	mov	r1, r2
   1adc8:	f7ff fff4 	bl	1adb4 <net_buf_simple_add>
   1adcc:	4622      	mov	r2, r4
   1adce:	4629      	mov	r1, r5
   1add0:	f7e5 fa76 	bl	2c0 <memcpy>
}
   1add4:	bd38      	pop	{r3, r4, r5, pc}

0001add6 <net_buf_simple_add_u8>:

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1add6:	b510      	push	{r4, lr}
   1add8:	460c      	mov	r4, r1
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   1adda:	2101      	movs	r1, #1
   1addc:	f7ff ffea 	bl	1adb4 <net_buf_simple_add>
	*u8 = val;
   1ade0:	7004      	strb	r4, [r0, #0]

	return u8;
}
   1ade2:	bd10      	pop	{r4, pc}

0001ade4 <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1ade4:	b510      	push	{r4, lr}
   1ade6:	b082      	sub	sp, #8
   1ade8:	ac02      	add	r4, sp, #8
   1adea:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1adee:	2102      	movs	r1, #2
   1adf0:	f7ff ffe0 	bl	1adb4 <net_buf_simple_add>
   1adf4:	2202      	movs	r2, #2
   1adf6:	4621      	mov	r1, r4
   1adf8:	f7e5 fa62 	bl	2c0 <memcpy>
}
   1adfc:	b002      	add	sp, #8
   1adfe:	bd10      	pop	{r4, pc}

0001ae00 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   1ae00:	b510      	push	{r4, lr}
   1ae02:	b082      	sub	sp, #8
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   1ae04:	0a0b      	lsrs	r3, r1, #8
   1ae06:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1ae0a:	ac02      	add	r4, sp, #8
   1ae0c:	f824 1d02 	strh.w	r1, [r4, #-2]!
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1ae10:	2102      	movs	r1, #2
   1ae12:	f7ff ffcf 	bl	1adb4 <net_buf_simple_add>
   1ae16:	2202      	movs	r2, #2
   1ae18:	4621      	mov	r1, r4
   1ae1a:	f7e5 fa51 	bl	2c0 <memcpy>
}
   1ae1e:	b002      	add	sp, #8
   1ae20:	bd10      	pop	{r4, pc}

0001ae22 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1ae22:	6803      	ldr	r3, [r0, #0]
   1ae24:	1a5b      	subs	r3, r3, r1
   1ae26:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1ae28:	8882      	ldrh	r2, [r0, #4]
   1ae2a:	4411      	add	r1, r2
   1ae2c:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1ae2e:	4618      	mov	r0, r3
   1ae30:	4770      	bx	lr

0001ae32 <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   1ae32:	b510      	push	{r4, lr}
   1ae34:	b082      	sub	sp, #8
   1ae36:	ac02      	add	r4, sp, #8
   1ae38:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   1ae3c:	2102      	movs	r1, #2
   1ae3e:	f7ff fff0 	bl	1ae22 <net_buf_simple_push>
   1ae42:	2202      	movs	r2, #2
   1ae44:	4621      	mov	r1, r4
   1ae46:	f7e5 fa3b 	bl	2c0 <memcpy>
}
   1ae4a:	b002      	add	sp, #8
   1ae4c:	bd10      	pop	{r4, pc}

0001ae4e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1ae4e:	8883      	ldrh	r3, [r0, #4]
   1ae50:	1a5b      	subs	r3, r3, r1
   1ae52:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1ae54:	6803      	ldr	r3, [r0, #0]
   1ae56:	4419      	add	r1, r3
   1ae58:	6001      	str	r1, [r0, #0]
}
   1ae5a:	4608      	mov	r0, r1
   1ae5c:	4770      	bx	lr

0001ae5e <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1ae5e:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
   1ae60:	6803      	ldr	r3, [r0, #0]
   1ae62:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1ae64:	2101      	movs	r1, #1
   1ae66:	f7ff fff2 	bl	1ae4e <net_buf_simple_pull>

	return val;
}
   1ae6a:	4620      	mov	r0, r4
   1ae6c:	bd10      	pop	{r4, pc}

0001ae6e <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1ae6e:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1ae70:	6803      	ldr	r3, [r0, #0]
   1ae72:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1ae74:	2102      	movs	r1, #2
   1ae76:	f7ff ffea 	bl	1ae4e <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1ae7a:	4620      	mov	r0, r4
   1ae7c:	bd10      	pop	{r4, pc}

0001ae7e <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1ae7e:	f850 3b08 	ldr.w	r3, [r0], #8
}
   1ae82:	1a18      	subs	r0, r3, r0
   1ae84:	4770      	bx	lr

0001ae86 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   1ae86:	b538      	push	{r3, r4, r5, lr}
   1ae88:	4605      	mov	r5, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1ae8a:	88c4      	ldrh	r4, [r0, #6]
   1ae8c:	f7ff fff7 	bl	1ae7e <net_buf_simple_headroom>
   1ae90:	1a20      	subs	r0, r4, r0
   1ae92:	88ab      	ldrh	r3, [r5, #4]
}
   1ae94:	1ac0      	subs	r0, r0, r3
   1ae96:	bd38      	pop	{r3, r4, r5, pc}

0001ae98 <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   1ae98:	b510      	push	{r4, lr}
   1ae9a:	4604      	mov	r4, r0
	if (!pkt->frags) {
   1ae9c:	6883      	ldr	r3, [r0, #8]
   1ae9e:	b18b      	cbz	r3, 1aec4 <processing_data+0x2c>
	if (!is_loopback && !locally_routed) {
   1aea0:	b1b1      	cbz	r1, 1aed0 <processing_data+0x38>
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
   1aea2:	68a3      	ldr	r3, [r4, #8]
   1aea4:	689b      	ldr	r3, [r3, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1aea6:	781b      	ldrb	r3, [r3, #0]
   1aea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1aeac:	2b60      	cmp	r3, #96	; 0x60
   1aeae:	d01d      	beq.n	1aeec <processing_data+0x54>
	net_stats.processing_error++;
}

static inline void net_stats_update_ip_errors_protoerr(void)
{
	net_stats.ip_errors.protoerr++;
   1aeb0:	4b18      	ldr	r3, [pc, #96]	; (1af14 <processing_data+0x7c>)
   1aeb2:	6a1a      	ldr	r2, [r3, #32]
   1aeb4:	3201      	adds	r2, #1
   1aeb6:	621a      	str	r2, [r3, #32]
}

static inline void net_stats_update_ip_errors_vhlerr(void)
{
	net_stats.ip_errors.vhlerr++;
   1aeb8:	68da      	ldr	r2, [r3, #12]
   1aeba:	3201      	adds	r2, #1
   1aebc:	60da      	str	r2, [r3, #12]
	return NET_DROP;
   1aebe:	2002      	movs	r0, #2
	switch (process_data(pkt, is_loopback)) {
   1aec0:	bb18      	cbnz	r0, 1af0a <processing_data+0x72>
   1aec2:	bd10      	pop	{r4, pc}
	net_stats.processing_error++;
   1aec4:	4a13      	ldr	r2, [pc, #76]	; (1af14 <processing_data+0x7c>)
   1aec6:	6813      	ldr	r3, [r2, #0]
   1aec8:	3301      	adds	r3, #1
   1aeca:	6013      	str	r3, [r2, #0]
		return NET_DROP;
   1aecc:	2002      	movs	r0, #2
   1aece:	e7f7      	b.n	1aec0 <processing_data+0x28>
	return pkt->iface;
   1aed0:	6940      	ldr	r0, [r0, #20]
 * @return verdict about the packet
 */
static inline enum net_verdict net_if_recv_data(struct net_if *iface,
						struct net_pkt *pkt)
{
	return iface->l2->recv(iface, pkt);
   1aed2:	6843      	ldr	r3, [r0, #4]
   1aed4:	681b      	ldr	r3, [r3, #0]
   1aed6:	4621      	mov	r1, r4
   1aed8:	4798      	blx	r3
		if (ret != NET_CONTINUE) {
   1aeda:	2801      	cmp	r0, #1
   1aedc:	d0e1      	beq.n	1aea2 <processing_data+0xa>
			if (ret == NET_DROP) {
   1aede:	2802      	cmp	r0, #2
   1aee0:	d1ee      	bne.n	1aec0 <processing_data+0x28>
   1aee2:	4a0c      	ldr	r2, [pc, #48]	; (1af14 <processing_data+0x7c>)
   1aee4:	6813      	ldr	r3, [r2, #0]
   1aee6:	3301      	adds	r3, #1
   1aee8:	6013      	str	r3, [r2, #0]
   1aeea:	e7e9      	b.n	1aec0 <processing_data+0x28>
	net_stats.ipv6.sent++;
}

static inline void net_stats_update_ipv6_recv(void)
{
	net_stats.ipv6.recv++;
   1aeec:	4a09      	ldr	r2, [pc, #36]	; (1af14 <processing_data+0x7c>)
   1aeee:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1aef0:	3301      	adds	r3, #1
   1aef2:	6253      	str	r3, [r2, #36]	; 0x24
	pkt->family = family;
   1aef4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1aef8:	220a      	movs	r2, #10
   1aefa:	f362 03c6 	bfi	r3, r2, #3, #4
   1aefe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		return net_ipv6_process_pkt(pkt);
   1af02:	4620      	mov	r0, r4
   1af04:	f006 fd1e 	bl	21944 <net_ipv6_process_pkt>
   1af08:	e7da      	b.n	1aec0 <processing_data+0x28>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   1af0a:	4620      	mov	r0, r4
   1af0c:	f002 fc75 	bl	1d7fa <net_pkt_unref>
		break;
	}
}
   1af10:	e7d7      	b.n	1aec2 <processing_data+0x2a>
   1af12:	bf00      	nop
   1af14:	20002b58 	.word	0x20002b58

0001af18 <net_rx_thread>:

static void net_rx_thread(void)
{
   1af18:	b510      	push	{r4, lr}
	 * can only be started when RX side is ready to receive packets.
	 * We synchronize the startup of the device so that both RX and TX
	 * are only started fully when both are ready to receive or send
	 * data.
	 */
	net_if_init(&startup_sync);
   1af1a:	4c16      	ldr	r4, [pc, #88]	; (1af74 <net_rx_thread+0x5c>)
   1af1c:	4620      	mov	r0, r4
   1af1e:	f001 faaf 	bl	1c480 <net_if_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1af22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1af26:	4620      	mov	r0, r4
   1af28:	f00e fa56 	bl	293d8 <_impl_k_sem_take>

	k_sem_take(&startup_sync, K_FOREVER);

	/* This will take the interface up and start everything. */
	net_if_post_init();
   1af2c:	f001 faee 	bl	1c50c <net_if_post_init>
   1af30:	e010      	b.n	1af54 <net_rx_thread+0x3c>
	return net_buf_frags_len(pkt->frags);
   1af32:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1af34:	2200      	movs	r2, #0
   1af36:	e002      	b.n	1af3e <net_rx_thread+0x26>
		bytes += buf->len;
   1af38:	8999      	ldrh	r1, [r3, #12]
   1af3a:	440a      	add	r2, r1
		buf = buf->frags;
   1af3c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1af3e:	2b00      	cmp	r3, #0
   1af40:	d1fa      	bne.n	1af38 <net_rx_thread+0x20>
	net_stats.bytes.received += bytes;
   1af42:	490d      	ldr	r1, [pc, #52]	; (1af78 <net_rx_thread+0x60>)
   1af44:	688b      	ldr	r3, [r1, #8]
   1af46:	441a      	add	r2, r3
   1af48:	608a      	str	r2, [r1, #8]
#endif
		NET_DBG("Received pkt %p len %zu", pkt, pkt_len);

		net_stats_update_bytes_recv(pkt_len);

		processing_data(pkt, false);
   1af4a:	2100      	movs	r1, #0
   1af4c:	f7ff ffa4 	bl	1ae98 <processing_data>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1af50:	f00e f8d6 	bl	29100 <_impl_k_yield>
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1af54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1af58:	4808      	ldr	r0, [pc, #32]	; (1af7c <net_rx_thread+0x64>)
   1af5a:	f00d febb 	bl	28cd4 <k_queue_get>
	for (i = 0; i < size; i++) {
   1af5e:	2300      	movs	r3, #0
   1af60:	f240 52db 	movw	r2, #1499	; 0x5db
   1af64:	4293      	cmp	r3, r2
   1af66:	d8e4      	bhi.n	1af32 <net_rx_thread+0x1a>
		if ((unsigned char)stack[i] == 0xaa) {
   1af68:	4a05      	ldr	r2, [pc, #20]	; (1af80 <net_rx_thread+0x68>)
   1af6a:	5cd2      	ldrb	r2, [r2, r3]
   1af6c:	2aaa      	cmp	r2, #170	; 0xaa
   1af6e:	d1e0      	bne.n	1af32 <net_rx_thread+0x1a>
	for (i = 0; i < size; i++) {
   1af70:	3301      	adds	r3, #1
   1af72:	e7f5      	b.n	1af60 <net_rx_thread+0x48>
   1af74:	2000d198 	.word	0x2000d198
   1af78:	20002b58 	.word	0x20002b58
   1af7c:	20001bdc 	.word	0x20001bdc
   1af80:	20004860 	.word	0x20004860

0001af84 <init_rx_queue>:
		k_yield();
	}
}

static void init_rx_queue(void)
{
   1af84:	b500      	push	{lr}
   1af86:	b087      	sub	sp, #28
	k_fifo_init(&rx_queue);
   1af88:	480b      	ldr	r0, [pc, #44]	; (1afb8 <init_rx_queue+0x34>)
   1af8a:	f00d fe48 	bl	28c1e <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1af8e:	2300      	movs	r3, #0
   1af90:	9305      	str	r3, [sp, #20]
   1af92:	2201      	movs	r2, #1
   1af94:	9204      	str	r2, [sp, #16]
   1af96:	f06f 0207 	mvn.w	r2, #7
   1af9a:	9203      	str	r2, [sp, #12]
   1af9c:	9302      	str	r3, [sp, #8]
   1af9e:	9301      	str	r3, [sp, #4]
   1afa0:	9300      	str	r3, [sp, #0]
   1afa2:	4b06      	ldr	r3, [pc, #24]	; (1afbc <init_rx_queue+0x38>)
   1afa4:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1afa8:	4905      	ldr	r1, [pc, #20]	; (1afc0 <init_rx_queue+0x3c>)
   1afaa:	4806      	ldr	r0, [pc, #24]	; (1afc4 <init_rx_queue+0x40>)
   1afac:	f00e fc80 	bl	298b0 <_impl_k_thread_create>
	rx_tid = k_thread_create(&rx_thread_data, rx_stack,
				 K_THREAD_STACK_SIZEOF(rx_stack),
				 (k_thread_entry_t)net_rx_thread,
				 NULL, NULL, NULL, K_PRIO_COOP(8),
				 K_ESSENTIAL, K_NO_WAIT);
}
   1afb0:	b007      	add	sp, #28
   1afb2:	f85d fb04 	ldr.w	pc, [sp], #4
   1afb6:	bf00      	nop
   1afb8:	20001bdc 	.word	0x20001bdc
   1afbc:	0001af19 	.word	0x0001af19
   1afc0:	20004860 	.word	0x20004860
   1afc4:	20001bec 	.word	0x20001bec

0001afc8 <net_init>:

	NET_DBG("Network L2 init done");
}

static int net_init(struct device *unused)
{
   1afc8:	b508      	push	{r3, lr}

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1afca:	f002 ffb2 	bl	1df32 <net_pkt_init>

	net_context_init();
   1afce:	f002 faf1 	bl	1d5b4 <net_context_init>
	net_icmpv6_init();
   1afd2:	f004 fa0b 	bl	1f3ec <net_icmpv6_init>
	net_ipv6_init();
   1afd6:	f006 fe89 	bl	21cec <net_ipv6_init>
	net_conn_init();
   1afda:	f00a fb55 	bl	25688 <net_conn_init>
	net_udp_init();
   1afde:	f008 fa6b 	bl	234b8 <net_udp_init>
	net_tcp_init();
   1afe2:	f008 fc4f 	bl	23884 <net_tcp_init>
	net_route_init();
   1afe6:	f007 ffca 	bl	22f7e <net_route_init>

	l2_init();
	l3_init();

	net_mgmt_event_init();
   1afea:	f008 f8b3 	bl	23154 <net_mgmt_event_init>

	init_rx_queue();
   1afee:	f7ff ffc9 	bl	1af84 <init_rx_queue>
		return status;
	}
#endif

	return status;
}
   1aff2:	2000      	movs	r0, #0
   1aff4:	bd08      	pop	{r3, pc}
	...

0001aff8 <net_send_data>:
	if (!pkt || !pkt->frags) {
   1aff8:	2800      	cmp	r0, #0
   1affa:	f000 80bc 	beq.w	1b176 <net_send_data+0x17e>
{
   1affe:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b000:	b091      	sub	sp, #68	; 0x44
   1b002:	4604      	mov	r4, r0
	if (!pkt || !pkt->frags) {
   1b004:	6883      	ldr	r3, [r0, #8]
   1b006:	2b00      	cmp	r3, #0
   1b008:	f000 80b8 	beq.w	1b17c <net_send_data+0x184>
	return pkt->iface;
   1b00c:	6943      	ldr	r3, [r0, #20]
	if (!net_pkt_iface(pkt)) {
   1b00e:	2b00      	cmp	r3, #0
   1b010:	f000 80b7 	beq.w	1b182 <net_send_data+0x18a>
	return pkt->family;
   1b014:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1b018:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1b01c:	2b0a      	cmp	r3, #10
   1b01e:	d103      	bne.n	1b028 <net_send_data+0x30>
	net_stats.ipv6.sent++;
   1b020:	4a59      	ldr	r2, [pc, #356]	; (1b188 <net_send_data+0x190>)
   1b022:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1b024:	3301      	adds	r3, #1
   1b026:	6293      	str	r3, [r2, #40]	; 0x28
   1b028:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1b02c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1b030:	2b0a      	cmp	r3, #10
   1b032:	d00b      	beq.n	1b04c <net_send_data+0x54>
	return 0;
   1b034:	2000      	movs	r0, #0
	if (status < 0) {
   1b036:	2800      	cmp	r0, #0
   1b038:	db06      	blt.n	1b048 <net_send_data+0x50>
	} else if (status > 0) {
   1b03a:	f340 8091 	ble.w	1b160 <net_send_data+0x168>
		processing_data(pkt, true);
   1b03e:	2101      	movs	r1, #1
   1b040:	4620      	mov	r0, r4
   1b042:	f7ff ff29 	bl	1ae98 <processing_data>
		return 0;
   1b046:	2000      	movs	r0, #0
}
   1b048:	b011      	add	sp, #68	; 0x44
   1b04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return pkt->frags->data;
   1b04c:	68a3      	ldr	r3, [r4, #8]
   1b04e:	689d      	ldr	r5, [r3, #8]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1b050:	3518      	adds	r5, #24
   1b052:	f004 fd93 	bl	1fb7c <net_ipv6_unspecified_address>
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv6_addr_cmp(const struct in6_addr *addr1,
				     const struct in6_addr *addr2)
{
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b056:	2210      	movs	r2, #16
   1b058:	4601      	mov	r1, r0
   1b05a:	4628      	mov	r0, r5
   1b05c:	f00f fbc8 	bl	2a7f0 <memcmp>
   1b060:	2800      	cmp	r0, #0
   1b062:	d07a      	beq.n	1b15a <net_send_data+0x162>
   1b064:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1b066:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b068:	f850 3f18 	ldr.w	r3, [r0, #24]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b06c:	b9ab      	cbnz	r3, 1b09a <net_send_data+0xa2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b06e:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b070:	2b00      	cmp	r3, #0
   1b072:	d141      	bne.n	1b0f8 <net_send_data+0x100>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b074:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b076:	2b00      	cmp	r3, #0
   1b078:	d140      	bne.n	1b0fc <net_send_data+0x104>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1b07a:	68c2      	ldr	r2, [r0, #12]
   1b07c:	0a13      	lsrs	r3, r2, #8
   1b07e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1b082:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1b086:	0211      	lsls	r1, r2, #8
   1b088:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1b08c:	430b      	orrs	r3, r1
   1b08e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b092:	2b01      	cmp	r3, #1
   1b094:	d034      	beq.n	1b100 <net_send_data+0x108>
   1b096:	2300      	movs	r3, #0
   1b098:	e000      	b.n	1b09c <net_send_data+0xa4>
   1b09a:	2300      	movs	r3, #0
   1b09c:	b393      	cbz	r3, 1b104 <net_send_data+0x10c>
   1b09e:	68a3      	ldr	r3, [r4, #8]
   1b0a0:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1b0a4:	ae0c      	add	r6, sp, #48	; 0x30
   1b0a6:	4675      	mov	r5, lr
   1b0a8:	f855 0f08 	ldr.w	r0, [r5, #8]!
   1b0ac:	6869      	ldr	r1, [r5, #4]
   1b0ae:	68aa      	ldr	r2, [r5, #8]
   1b0b0:	68eb      	ldr	r3, [r5, #12]
   1b0b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1b0b4:	ab10      	add	r3, sp, #64	; 0x40
   1b0b6:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1b0ba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1b0be:	af08      	add	r7, sp, #32
   1b0c0:	4673      	mov	r3, lr
   1b0c2:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1b0c6:	6859      	ldr	r1, [r3, #4]
   1b0c8:	689a      	ldr	r2, [r3, #8]
   1b0ca:	68db      	ldr	r3, [r3, #12]
   1b0cc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1b0ce:	af08      	add	r7, sp, #32
   1b0d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1b0d2:	f8ce 0008 	str.w	r0, [lr, #8]
   1b0d6:	6069      	str	r1, [r5, #4]
   1b0d8:	60aa      	str	r2, [r5, #8]
   1b0da:	60eb      	str	r3, [r5, #12]
   1b0dc:	68a3      	ldr	r3, [r4, #8]
   1b0de:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1b0e0:	ad04      	add	r5, sp, #16
   1b0e2:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   1b0e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1b0ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b0ec:	61b8      	str	r0, [r7, #24]
   1b0ee:	61f9      	str	r1, [r7, #28]
   1b0f0:	623a      	str	r2, [r7, #32]
   1b0f2:	627b      	str	r3, [r7, #36]	; 0x24
			return 1;
   1b0f4:	2001      	movs	r0, #1
   1b0f6:	e79e      	b.n	1b036 <net_send_data+0x3e>
   1b0f8:	2300      	movs	r3, #0
   1b0fa:	e7cf      	b.n	1b09c <net_send_data+0xa4>
   1b0fc:	2300      	movs	r3, #0
   1b0fe:	e7cd      	b.n	1b09c <net_send_data+0xa4>
   1b100:	2301      	movs	r3, #1
   1b102:	e7cb      	b.n	1b09c <net_send_data+0xa4>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1b104:	2100      	movs	r1, #0
   1b106:	f000 f9c5 	bl	1b494 <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1b10a:	2800      	cmp	r0, #0
   1b10c:	d1c7      	bne.n	1b09e <net_send_data+0xa6>
   1b10e:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1b110:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b112:	f853 2f08 	ldr.w	r2, [r3, #8]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b116:	b99a      	cbnz	r2, 1b140 <net_send_data+0x148>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b118:	685a      	ldr	r2, [r3, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b11a:	b9aa      	cbnz	r2, 1b148 <net_send_data+0x150>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b11c:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b11e:	b9aa      	cbnz	r2, 1b14c <net_send_data+0x154>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1b120:	68da      	ldr	r2, [r3, #12]
   1b122:	0a13      	lsrs	r3, r2, #8
   1b124:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1b128:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1b12c:	0211      	lsls	r1, r2, #8
   1b12e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1b132:	430b      	orrs	r3, r1
   1b134:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b138:	2b01      	cmp	r3, #1
   1b13a:	d009      	beq.n	1b150 <net_send_data+0x158>
   1b13c:	2300      	movs	r3, #0
   1b13e:	e000      	b.n	1b142 <net_send_data+0x14a>
   1b140:	2300      	movs	r3, #0
   1b142:	b93b      	cbnz	r3, 1b154 <net_send_data+0x15c>
	return 0;
   1b144:	2000      	movs	r0, #0
   1b146:	e776      	b.n	1b036 <net_send_data+0x3e>
   1b148:	2300      	movs	r3, #0
   1b14a:	e7fa      	b.n	1b142 <net_send_data+0x14a>
   1b14c:	2300      	movs	r3, #0
   1b14e:	e7f8      	b.n	1b142 <net_send_data+0x14a>
   1b150:	2301      	movs	r3, #1
   1b152:	e7f6      	b.n	1b142 <net_send_data+0x14a>
			return -EADDRNOTAVAIL;
   1b154:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1b158:	e76d      	b.n	1b036 <net_send_data+0x3e>
			return -EADDRNOTAVAIL;
   1b15a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1b15e:	e76a      	b.n	1b036 <net_send_data+0x3e>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1b160:	4621      	mov	r1, r4
   1b162:	6960      	ldr	r0, [r4, #20]
   1b164:	f000 ffe0 	bl	1c128 <net_if_send_data>
   1b168:	2802      	cmp	r0, #2
   1b16a:	d001      	beq.n	1b170 <net_send_data+0x178>
	return 0;
   1b16c:	2000      	movs	r0, #0
   1b16e:	e76b      	b.n	1b048 <net_send_data+0x50>
		return -EIO;
   1b170:	f06f 0004 	mvn.w	r0, #4
   1b174:	e768      	b.n	1b048 <net_send_data+0x50>
		return -ENODATA;
   1b176:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1b17a:	4770      	bx	lr
   1b17c:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1b180:	e762      	b.n	1b048 <net_send_data+0x50>
		return -EINVAL;
   1b182:	f06f 0015 	mvn.w	r0, #21
   1b186:	e75f      	b.n	1b048 <net_send_data+0x50>
   1b188:	20002b58 	.word	0x20002b58

0001b18c <net_recv_data>:
{
   1b18c:	b508      	push	{r3, lr}
	if (!pkt->frags) {
   1b18e:	688b      	ldr	r3, [r1, #8]
   1b190:	b19b      	cbz	r3, 1b1ba <net_recv_data+0x2e>
   1b192:	f3bf 8f5b 	dmb	ish
   1b196:	68c3      	ldr	r3, [r0, #12]
   1b198:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b19c:	f013 0f01 	tst.w	r3, #1
   1b1a0:	d00e      	beq.n	1b1c0 <net_recv_data+0x34>
	pkt->iface = iface;
   1b1a2:	6148      	str	r0, [r1, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1b1a4:	7d43      	ldrb	r3, [r0, #21]
   1b1a6:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1b1aa:	7d43      	ldrb	r3, [r0, #21]
   1b1ac:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
	k_fifo_put(&rx_queue, pkt);
   1b1b0:	4805      	ldr	r0, [pc, #20]	; (1b1c8 <net_recv_data+0x3c>)
   1b1b2:	f00d fd67 	bl	28c84 <k_queue_append>
	return 0;
   1b1b6:	2000      	movs	r0, #0
   1b1b8:	bd08      	pop	{r3, pc}
		return -ENODATA;
   1b1ba:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1b1be:	bd08      	pop	{r3, pc}
		return -ENETDOWN;
   1b1c0:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1b1c4:	bd08      	pop	{r3, pc}
   1b1c6:	bf00      	nop
   1b1c8:	20001bdc 	.word	0x20001bdc

0001b1cc <ipv6_addr_expired>:
						  lifetime);

	NET_DBG("IPv6 address %s is deprecated",
		net_sprint_ipv6_addr(&ifaddr->address.in6_addr));

	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1b1cc:	2302      	movs	r3, #2
   1b1ce:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
   1b1d2:	4770      	bx	lr

0001b1d4 <prefix_lf_timeout>:
		CONTAINER_OF(work, struct net_if_ipv6_prefix, lifetime);

	NET_DBG("Prefix %s/%d expired",
		net_sprint_ipv6_addr(&prefix->prefix), prefix->len);

	prefix->is_used = false;
   1b1d4:	2300      	movs	r3, #0
   1b1d6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   1b1da:	4770      	bx	lr

0001b1dc <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		net_sprint_ipv6_addr(&router->address.in6_addr));

	router->is_used = false;
   1b1dc:	2300      	movs	r3, #0
   1b1de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1b1e2:	4770      	bx	lr

0001b1e4 <ipv6_addr_find>:
{
   1b1e4:	b570      	push	{r4, r5, r6, lr}
   1b1e6:	4605      	mov	r5, r0
   1b1e8:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b1ea:	2400      	movs	r4, #0
   1b1ec:	e000      	b.n	1b1f0 <ipv6_addr_find+0xc>
   1b1ee:	3401      	adds	r4, #1
   1b1f0:	2c02      	cmp	r4, #2
   1b1f2:	dc19      	bgt.n	1b228 <ipv6_addr_find+0x44>
		if (!iface->ipv6.unicast[i].is_used) {
   1b1f4:	236c      	movs	r3, #108	; 0x6c
   1b1f6:	fb03 5304 	mla	r3, r3, r4, r5
   1b1fa:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b1fe:	2b00      	cmp	r3, #0
   1b200:	d0f5      	beq.n	1b1ee <ipv6_addr_find+0xa>
				&iface->ipv6.unicast[i].address.in6_addr)) {
   1b202:	216c      	movs	r1, #108	; 0x6c
   1b204:	fb01 f104 	mul.w	r1, r1, r4
   1b208:	3120      	adds	r1, #32
   1b20a:	4429      	add	r1, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b20c:	2210      	movs	r2, #16
   1b20e:	4411      	add	r1, r2
   1b210:	4630      	mov	r0, r6
   1b212:	f00f faed 	bl	2a7f0 <memcmp>
		if (net_ipv6_addr_cmp(addr,
   1b216:	2800      	cmp	r0, #0
   1b218:	d1e9      	bne.n	1b1ee <ipv6_addr_find+0xa>
			return &iface->ipv6.unicast[i];
   1b21a:	206c      	movs	r0, #108	; 0x6c
   1b21c:	fb00 f004 	mul.w	r0, r0, r4
   1b220:	3020      	adds	r0, #32
   1b222:	4428      	add	r0, r5
   1b224:	300c      	adds	r0, #12
   1b226:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1b228:	2000      	movs	r0, #0
}
   1b22a:	bd70      	pop	{r4, r5, r6, pc}

0001b22c <ipv6_prefix_find>:
{
   1b22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b22e:	4605      	mov	r5, r0
   1b230:	460e      	mov	r6, r1
   1b232:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b234:	2400      	movs	r4, #0
   1b236:	e000      	b.n	1b23a <ipv6_prefix_find+0xe>
   1b238:	3401      	adds	r4, #1
   1b23a:	2c01      	cmp	r4, #1
   1b23c:	dc21      	bgt.n	1b282 <ipv6_prefix_find+0x56>
		if (!iface->ipv6.unicast[i].is_used) {
   1b23e:	236c      	movs	r3, #108	; 0x6c
   1b240:	fb03 5304 	mla	r3, r3, r4, r5
   1b244:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b248:	2b00      	cmp	r3, #0
   1b24a:	d0f5      	beq.n	1b238 <ipv6_prefix_find+0xc>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1b24c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1b250:	0099      	lsls	r1, r3, #2
   1b252:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1b256:	4429      	add	r1, r5
   1b258:	2210      	movs	r2, #16
   1b25a:	4411      	add	r1, r2
   1b25c:	4630      	mov	r0, r6
   1b25e:	f00f fac7 	bl	2a7f0 <memcmp>
   1b262:	2800      	cmp	r0, #0
   1b264:	d1e8      	bne.n	1b238 <ipv6_prefix_find+0xc>
		    prefix_len == iface->ipv6.prefix[i].len) {
   1b266:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b26a:	0093      	lsls	r3, r2, #2
   1b26c:	461a      	mov	r2, r3
   1b26e:	442b      	add	r3, r5
   1b270:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1b274:	42bb      	cmp	r3, r7
   1b276:	d1df      	bne.n	1b238 <ipv6_prefix_find+0xc>
			return &iface->ipv6.prefix[i];
   1b278:	f502 70ec 	add.w	r0, r2, #472	; 0x1d8
   1b27c:	4428      	add	r0, r5
   1b27e:	3010      	adds	r0, #16
   1b280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
   1b282:	2000      	movs	r0, #0
}
   1b284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001b288 <net_if_ipv6_start_dad>:
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1b288:	2300      	movs	r3, #0
   1b28a:	f881 3065 	strb.w	r3, [r1, #101]	; 0x65
   1b28e:	f3bf 8f5b 	dmb	ish
   1b292:	68c3      	ldr	r3, [r0, #12]
   1b294:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
   1b298:	f013 0f01 	tst.w	r3, #1
   1b29c:	d100      	bne.n	1b2a0 <net_if_ipv6_start_dad+0x18>
   1b29e:	4770      	bx	lr
{
   1b2a0:	b510      	push	{r4, lr}
   1b2a2:	460c      	mov	r4, r1
		ifaddr->dad_count = 1;
   1b2a4:	2301      	movs	r3, #1
   1b2a6:	f881 3066 	strb.w	r3, [r1, #102]	; 0x66
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   1b2aa:	f006 f969 	bl	21580 <net_ipv6_start_dad>
   1b2ae:	b100      	cbz	r0, 1b2b2 <net_if_ipv6_start_dad+0x2a>
   1b2b0:	bd10      	pop	{r4, pc}
   1b2b2:	2264      	movs	r2, #100	; 0x64
   1b2b4:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1b2b8:	4801      	ldr	r0, [pc, #4]	; (1b2c0 <net_if_ipv6_start_dad+0x38>)
   1b2ba:	f00e fec3 	bl	2a044 <k_delayed_work_submit_to_queue>
}
   1b2be:	e7f7      	b.n	1b2b0 <net_if_ipv6_start_dad+0x28>
   1b2c0:	20002c78 	.word	0x20002c78

0001b2c4 <net_if_ipv6_prefix_init>:
{
   1b2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b2c6:	b085      	sub	sp, #20
   1b2c8:	4605      	mov	r5, r0
   1b2ca:	460e      	mov	r6, r1
   1b2cc:	461f      	mov	r7, r3
	prefix->is_used = true;
   1b2ce:	2301      	movs	r3, #1
   1b2d0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
	prefix->len = len;
   1b2d4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	net_ipaddr_copy(&prefix->prefix, addr);
   1b2d8:	466c      	mov	r4, sp
   1b2da:	6808      	ldr	r0, [r1, #0]
   1b2dc:	6849      	ldr	r1, [r1, #4]
   1b2de:	68b2      	ldr	r2, [r6, #8]
   1b2e0:	68f3      	ldr	r3, [r6, #12]
   1b2e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b2e4:	466c      	mov	r4, sp
   1b2e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1b2e8:	62a8      	str	r0, [r5, #40]	; 0x28
   1b2ea:	62e9      	str	r1, [r5, #44]	; 0x2c
   1b2ec:	632a      	str	r2, [r5, #48]	; 0x30
   1b2ee:	636b      	str	r3, [r5, #52]	; 0x34
	k_delayed_work_init(&prefix->lifetime, prefix_lf_timeout);
   1b2f0:	4907      	ldr	r1, [pc, #28]	; (1b310 <net_if_ipv6_prefix_init+0x4c>)
   1b2f2:	4628      	mov	r0, r5
   1b2f4:	f00e fe2e 	bl	29f54 <k_delayed_work_init>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   1b2f8:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1b2fc:	d004      	beq.n	1b308 <net_if_ipv6_prefix_init+0x44>
		prefix->is_infinite = false;
   1b2fe:	2300      	movs	r3, #0
   1b300:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
}
   1b304:	b005      	add	sp, #20
   1b306:	bdf0      	pop	{r4, r5, r6, r7, pc}
		prefix->is_infinite = true;
   1b308:	2301      	movs	r3, #1
   1b30a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   1b30e:	e7f9      	b.n	1b304 <net_if_ipv6_prefix_init+0x40>
   1b310:	0001b1d5 	.word	0x0001b1d5

0001b314 <join_mcast_allnodes>:
{
   1b314:	b500      	push	{lr}
   1b316:	b085      	sub	sp, #20
					u16_t addr0, u16_t addr1,
					u16_t addr2, u16_t addr3,
					u16_t addr4, u16_t addr5,
					u16_t addr6, u16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1b318:	f240 23ff 	movw	r3, #767	; 0x2ff
   1b31c:	f8ad 3000 	strh.w	r3, [sp]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1b320:	2300      	movs	r3, #0
   1b322:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1b326:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1b32a:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1b32e:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1b332:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1b336:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1b33a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1b33e:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1b342:	4669      	mov	r1, sp
   1b344:	f006 faa4 	bl	21890 <net_ipv6_mld_join>
}
   1b348:	b005      	add	sp, #20
   1b34a:	f85d fb04 	ldr.w	pc, [sp], #4

0001b34e <join_mcast_solicit_node>:
{
   1b34e:	b500      	push	{lr}
   1b350:	b085      	sub	sp, #20
	dst->s6_addr[0]   = 0xFF;
   1b352:	22ff      	movs	r2, #255	; 0xff
   1b354:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[1]   = 0x02;
   1b358:	2302      	movs	r3, #2
   1b35a:	f88d 3001 	strb.w	r3, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1b35e:	2300      	movs	r3, #0
   1b360:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1b364:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1b368:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1b36c:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0;
   1b370:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1b374:	2301      	movs	r3, #1
   1b376:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1b37a:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1b37e:	7b4b      	ldrb	r3, [r1, #13]
   1b380:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1b384:	89cb      	ldrh	r3, [r1, #14]
   1b386:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1b38a:	4669      	mov	r1, sp
   1b38c:	f006 fa80 	bl	21890 <net_ipv6_mld_join>
}
   1b390:	b005      	add	sp, #20
   1b392:	f85d fb04 	ldr.w	pc, [sp], #4

0001b396 <leave_mcast_all>:
{
   1b396:	b538      	push	{r3, r4, r5, lr}
   1b398:	4605      	mov	r5, r0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b39a:	2400      	movs	r4, #0
   1b39c:	e000      	b.n	1b3a0 <leave_mcast_all+0xa>
   1b39e:	3401      	adds	r4, #1
   1b3a0:	2c04      	cmp	r4, #4
   1b3a2:	dc1a      	bgt.n	1b3da <leave_mcast_all+0x44>
		if (!iface->ipv6.mcast[i].is_used ||
   1b3a4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b3a8:	00d3      	lsls	r3, r2, #3
   1b3aa:	442b      	add	r3, r5
   1b3ac:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b3b0:	f013 0f01 	tst.w	r3, #1
   1b3b4:	d0f3      	beq.n	1b39e <leave_mcast_all+0x8>
		    !iface->ipv6.mcast[i].is_joined) {
   1b3b6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b3ba:	00d3      	lsls	r3, r2, #3
   1b3bc:	461a      	mov	r2, r3
   1b3be:	442b      	add	r3, r5
   1b3c0:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1b3c4:	f013 0f02 	tst.w	r3, #2
   1b3c8:	d0e9      	beq.n	1b39e <leave_mcast_all+0x8>
				   &iface->ipv6.mcast[i].address.in6_addr);
   1b3ca:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1b3ce:	4429      	add	r1, r5
		net_ipv6_mld_leave(iface,
   1b3d0:	3118      	adds	r1, #24
   1b3d2:	4628      	mov	r0, r5
   1b3d4:	f006 fa96 	bl	21904 <net_ipv6_mld_leave>
   1b3d8:	e7e1      	b.n	1b39e <leave_mcast_all+0x8>
}
   1b3da:	bd38      	pop	{r3, r4, r5, pc}

0001b3dc <net_if_prepare_events>:
{
   1b3dc:	b570      	push	{r4, r5, r6, lr}
	int ev_count = 0;
   1b3de:	2400      	movs	r4, #0
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b3e0:	4d0a      	ldr	r5, [pc, #40]	; (1b40c <net_if_prepare_events+0x30>)
   1b3e2:	e00d      	b.n	1b400 <net_if_prepare_events+0x24>
		k_poll_event_init(&__net_if_event_start[ev_count],
   1b3e4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b3e8:	0098      	lsls	r0, r3, #2
   1b3ea:	f105 0318 	add.w	r3, r5, #24
   1b3ee:	2200      	movs	r2, #0
   1b3f0:	2104      	movs	r1, #4
   1b3f2:	4e07      	ldr	r6, [pc, #28]	; (1b410 <net_if_prepare_events+0x34>)
   1b3f4:	4430      	add	r0, r6
   1b3f6:	f00d f927 	bl	28648 <k_poll_event_init>
		ev_count++;
   1b3fa:	3401      	adds	r4, #1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b3fc:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b400:	4b04      	ldr	r3, [pc, #16]	; (1b414 <net_if_prepare_events+0x38>)
   1b402:	429d      	cmp	r5, r3
   1b404:	d1ee      	bne.n	1b3e4 <net_if_prepare_events+0x8>
}
   1b406:	4620      	mov	r0, r4
   1b408:	bd70      	pop	{r4, r5, r6, pc}
   1b40a:	bf00      	nop
   1b40c:	2000d2c0 	.word	0x2000d2c0
   1b410:	2000d560 	.word	0x2000d560
   1b414:	2000d560 	.word	0x2000d560

0001b418 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b418:	4b06      	ldr	r3, [pc, #24]	; (1b434 <net_if_lookup_by_dev+0x1c>)
   1b41a:	4a07      	ldr	r2, [pc, #28]	; (1b438 <net_if_lookup_by_dev+0x20>)
   1b41c:	4293      	cmp	r3, r2
   1b41e:	d005      	beq.n	1b42c <net_if_lookup_by_dev+0x14>
		if (iface->dev == dev) {
   1b420:	681a      	ldr	r2, [r3, #0]
   1b422:	4282      	cmp	r2, r0
   1b424:	d003      	beq.n	1b42e <net_if_lookup_by_dev+0x16>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b426:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   1b42a:	e7f6      	b.n	1b41a <net_if_lookup_by_dev+0x2>
	return NULL;
   1b42c:	2300      	movs	r3, #0
}
   1b42e:	4618      	mov	r0, r3
   1b430:	4770      	bx	lr
   1b432:	bf00      	nop
   1b434:	2000d2c0 	.word	0x2000d2c0
   1b438:	2000d560 	.word	0x2000d560

0001b43c <net_if_get_default>:
	if (__net_if_start == __net_if_end) {
   1b43c:	4b03      	ldr	r3, [pc, #12]	; (1b44c <net_if_get_default+0x10>)
   1b43e:	4a04      	ldr	r2, [pc, #16]	; (1b450 <net_if_get_default+0x14>)
   1b440:	429a      	cmp	r2, r3
   1b442:	d001      	beq.n	1b448 <net_if_get_default+0xc>
	return __net_if_start;
   1b444:	4802      	ldr	r0, [pc, #8]	; (1b450 <net_if_get_default+0x14>)
}
   1b446:	4770      	bx	lr
		return NULL;
   1b448:	2000      	movs	r0, #0
   1b44a:	4770      	bx	lr
   1b44c:	2000d560 	.word	0x2000d560
   1b450:	2000d2c0 	.word	0x2000d2c0

0001b454 <net_if_start_rs>:
{
   1b454:	b510      	push	{r4, lr}
   1b456:	4604      	mov	r4, r0
	if (!net_ipv6_start_rs(iface)) {
   1b458:	f006 fa16 	bl	21888 <net_ipv6_start_rs>
   1b45c:	b100      	cbz	r0, 1b460 <net_if_start_rs+0xc>
   1b45e:	bd10      	pop	{r4, pc}
   1b460:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b464:	f504 7118 	add.w	r1, r4, #608	; 0x260
   1b468:	4801      	ldr	r0, [pc, #4]	; (1b470 <net_if_start_rs+0x1c>)
   1b46a:	f00e fdeb 	bl	2a044 <k_delayed_work_submit_to_queue>
}
   1b46e:	e7f6      	b.n	1b45e <net_if_start_rs+0xa>
   1b470:	20002c78 	.word	0x20002c78

0001b474 <rs_timeout>:
{
   1b474:	b508      	push	{r3, lr}
	struct net_if *iface = CONTAINER_OF(work, struct net_if, ipv6.rs_timer);
   1b476:	f5a0 7018 	sub.w	r0, r0, #608	; 0x260
	iface->ipv6.rs_count++;
   1b47a:	f890 3296 	ldrb.w	r3, [r0, #662]	; 0x296
   1b47e:	3301      	adds	r3, #1
   1b480:	b2db      	uxtb	r3, r3
   1b482:	f880 3296 	strb.w	r3, [r0, #662]	; 0x296
	if (iface->ipv6.rs_count < RS_COUNT) {
   1b486:	2b02      	cmp	r3, #2
   1b488:	d900      	bls.n	1b48c <rs_timeout+0x18>
   1b48a:	bd08      	pop	{r3, pc}
		net_if_start_rs(iface);
   1b48c:	f7ff ffe2 	bl	1b454 <net_if_start_rs>
}
   1b490:	e7fb      	b.n	1b48a <rs_timeout+0x16>
	...

0001b494 <net_if_ipv6_addr_lookup>:
{
   1b494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b498:	4607      	mov	r7, r0
   1b49a:	4688      	mov	r8, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b49c:	4d1b      	ldr	r5, [pc, #108]	; (1b50c <net_if_ipv6_addr_lookup+0x78>)
   1b49e:	e02d      	b.n	1b4fc <net_if_ipv6_addr_lookup+0x68>
			if (net_is_ipv6_prefix(addr->s6_addr,
   1b4a0:	b9ee      	cbnz	r6, 1b4de <net_if_ipv6_addr_lookup+0x4a>
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b4a2:	3401      	adds	r4, #1
   1b4a4:	2c02      	cmp	r4, #2
   1b4a6:	dc27      	bgt.n	1b4f8 <net_if_ipv6_addr_lookup+0x64>
			if (!iface->ipv6.unicast[i].is_used ||
   1b4a8:	236c      	movs	r3, #108	; 0x6c
   1b4aa:	fb03 5304 	mla	r3, r3, r4, r5
   1b4ae:	f893 6094 	ldrb.w	r6, [r3, #148]	; 0x94
   1b4b2:	2e00      	cmp	r6, #0
   1b4b4:	d0f5      	beq.n	1b4a2 <net_if_ipv6_addr_lookup+0xe>
			    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1b4b6:	236c      	movs	r3, #108	; 0x6c
   1b4b8:	fb03 5304 	mla	r3, r3, r4, r5
   1b4bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
			if (!iface->ipv6.unicast[i].is_used ||
   1b4be:	2b0a      	cmp	r3, #10
   1b4c0:	d1ef      	bne.n	1b4a2 <net_if_ipv6_addr_lookup+0xe>
				iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   1b4c2:	216c      	movs	r1, #108	; 0x6c
   1b4c4:	fb01 f104 	mul.w	r1, r1, r4
   1b4c8:	3120      	adds	r1, #32
   1b4ca:	4429      	add	r1, r5
	if (memcmp(addr1, addr2, bytes)) {
   1b4cc:	2210      	movs	r2, #16
   1b4ce:	4411      	add	r1, r2
   1b4d0:	4638      	mov	r0, r7
   1b4d2:	f00f f98d 	bl	2a7f0 <memcmp>
   1b4d6:	2800      	cmp	r0, #0
   1b4d8:	d0e2      	beq.n	1b4a0 <net_if_ipv6_addr_lookup+0xc>
		return false;
   1b4da:	2600      	movs	r6, #0
   1b4dc:	e7e0      	b.n	1b4a0 <net_if_ipv6_addr_lookup+0xc>
				if (ret) {
   1b4de:	f1b8 0f00 	cmp.w	r8, #0
   1b4e2:	d001      	beq.n	1b4e8 <net_if_ipv6_addr_lookup+0x54>
					*ret = iface;
   1b4e4:	f8c8 5000 	str.w	r5, [r8]
				return &iface->ipv6.unicast[i];
   1b4e8:	206c      	movs	r0, #108	; 0x6c
   1b4ea:	fb00 f004 	mul.w	r0, r0, r4
   1b4ee:	3020      	adds	r0, #32
   1b4f0:	4428      	add	r0, r5
   1b4f2:	300c      	adds	r0, #12
   1b4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b4f8:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b4fc:	4b04      	ldr	r3, [pc, #16]	; (1b510 <net_if_ipv6_addr_lookup+0x7c>)
   1b4fe:	429d      	cmp	r5, r3
   1b500:	d001      	beq.n	1b506 <net_if_ipv6_addr_lookup+0x72>
   1b502:	2400      	movs	r4, #0
   1b504:	e7ce      	b.n	1b4a4 <net_if_ipv6_addr_lookup+0x10>
	return NULL;
   1b506:	2000      	movs	r0, #0
}
   1b508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b50c:	2000d2c0 	.word	0x2000d2c0
   1b510:	2000d560 	.word	0x2000d560

0001b514 <dad_timeout>:
{
   1b514:	b530      	push	{r4, r5, lr}
   1b516:	b083      	sub	sp, #12
	struct net_if_addr *tmp, *ifaddr = CONTAINER_OF(work,
   1b518:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
	struct net_if *iface = NULL;
   1b51c:	a902      	add	r1, sp, #8
   1b51e:	2300      	movs	r3, #0
   1b520:	f841 3d04 	str.w	r3, [r1, #-4]!
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   1b524:	2301      	movs	r3, #1
   1b526:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1b52a:	f1a0 0438 	sub.w	r4, r0, #56	; 0x38
   1b52e:	4620      	mov	r0, r4
   1b530:	f7ff ffb0 	bl	1b494 <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   1b534:	4285      	cmp	r5, r0
   1b536:	d001      	beq.n	1b53c <dad_timeout+0x28>
}
   1b538:	b003      	add	sp, #12
   1b53a:	bd30      	pop	{r4, r5, pc}
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   1b53c:	2300      	movs	r3, #0
   1b53e:	461a      	mov	r2, r3
   1b540:	9901      	ldr	r1, [sp, #4]
   1b542:	4807      	ldr	r0, [pc, #28]	; (1b560 <dad_timeout+0x4c>)
   1b544:	f007 fdcc 	bl	230e0 <net_mgmt_event_notify_with_info>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   1b548:	4621      	mov	r1, r4
   1b54a:	9801      	ldr	r0, [sp, #4]
   1b54c:	f004 faf6 	bl	1fb3c <net_ipv6_nbr_rm>
		join_mcast_allnodes(iface);
   1b550:	9801      	ldr	r0, [sp, #4]
   1b552:	f7ff fedf 	bl	1b314 <join_mcast_allnodes>
		join_mcast_solicit_node(iface, &ifaddr->address.in6_addr);
   1b556:	4621      	mov	r1, r4
   1b558:	9801      	ldr	r0, [sp, #4]
   1b55a:	f7ff fef8 	bl	1b34e <join_mcast_solicit_node>
}
   1b55e:	e7eb      	b.n	1b538 <dad_timeout+0x24>
   1b560:	f060000d 	.word	0xf060000d

0001b564 <net_if_ipv6_addr_update_lifetime>:
{
   1b564:	b508      	push	{r3, lr}
   1b566:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b56a:	fb02 f201 	mul.w	r2, r2, r1
   1b56e:	f100 0114 	add.w	r1, r0, #20
   1b572:	4802      	ldr	r0, [pc, #8]	; (1b57c <net_if_ipv6_addr_update_lifetime+0x18>)
   1b574:	f00e fd66 	bl	2a044 <k_delayed_work_submit_to_queue>
   1b578:	bd08      	pop	{r3, pc}
   1b57a:	bf00      	nop
   1b57c:	20002c78 	.word	0x20002c78

0001b580 <net_if_ipv6_addr_add>:
{
   1b580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b584:	b084      	sub	sp, #16
   1b586:	4605      	mov	r5, r0
   1b588:	460e      	mov	r6, r1
   1b58a:	4690      	mov	r8, r2
   1b58c:	461f      	mov	r7, r3
	ifaddr = ipv6_addr_find(iface, addr);
   1b58e:	f7ff fe29 	bl	1b1e4 <ipv6_addr_find>
	if (ifaddr) {
   1b592:	4604      	mov	r4, r0
   1b594:	b118      	cbz	r0, 1b59e <net_if_ipv6_addr_add+0x1e>
}
   1b596:	4620      	mov	r0, r4
   1b598:	b004      	add	sp, #16
   1b59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b59e:	2300      	movs	r3, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b5a0:	2b02      	cmp	r3, #2
   1b5a2:	dcf8      	bgt.n	1b596 <net_if_ipv6_addr_add+0x16>
		if (iface->ipv6.unicast[i].is_used) {
   1b5a4:	226c      	movs	r2, #108	; 0x6c
   1b5a6:	fb02 5203 	mla	r2, r2, r3, r5
   1b5aa:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1b5ae:	b10a      	cbz	r2, 1b5b4 <net_if_ipv6_addr_add+0x34>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b5b0:	3301      	adds	r3, #1
   1b5b2:	e7f5      	b.n	1b5a0 <net_if_ipv6_addr_add+0x20>
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   1b5b4:	f04f 0e6c 	mov.w	lr, #108	; 0x6c
   1b5b8:	fb0e fe03 	mul.w	lr, lr, r3
   1b5bc:	f10e 0e20 	add.w	lr, lr, #32
   1b5c0:	44ae      	add	lr, r5
   1b5c2:	f10e 040c 	add.w	r4, lr, #12
	ifaddr->is_used = true;
   1b5c6:	2301      	movs	r3, #1
   1b5c8:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ifaddr->address.family = AF_INET6;
   1b5cc:	230a      	movs	r3, #10
   1b5ce:	f8ae 300c 	strh.w	r3, [lr, #12]
	ifaddr->addr_type = addr_type;
   1b5d2:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1b5d6:	46ec      	mov	ip, sp
   1b5d8:	6830      	ldr	r0, [r6, #0]
   1b5da:	6871      	ldr	r1, [r6, #4]
   1b5dc:	68b2      	ldr	r2, [r6, #8]
   1b5de:	68f3      	ldr	r3, [r6, #12]
   1b5e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1b5e4:	466e      	mov	r6, sp
   1b5e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1b5e8:	f8ce 0010 	str.w	r0, [lr, #16]
   1b5ec:	f8ce 1014 	str.w	r1, [lr, #20]
   1b5f0:	f8ce 2018 	str.w	r2, [lr, #24]
   1b5f4:	f8ce 301c 	str.w	r3, [lr, #28]
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   1b5f8:	4910      	ldr	r1, [pc, #64]	; (1b63c <net_if_ipv6_addr_add+0xbc>)
   1b5fa:	f10e 0048 	add.w	r0, lr, #72	; 0x48
   1b5fe:	f00e fca9 	bl	29f54 <k_delayed_work_init>
	if (vlifetime) {
   1b602:	b96f      	cbnz	r7, 1b620 <net_if_ipv6_addr_add+0xa0>
		ifaddr->is_infinite = true;
   1b604:	2301      	movs	r3, #1
   1b606:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1b60a:	4621      	mov	r1, r4
   1b60c:	4628      	mov	r0, r5
   1b60e:	f7ff fe3b 	bl	1b288 <net_if_ipv6_start_dad>
   1b612:	2300      	movs	r3, #0
   1b614:	461a      	mov	r2, r3
   1b616:	4629      	mov	r1, r5
   1b618:	4809      	ldr	r0, [pc, #36]	; (1b640 <net_if_ipv6_addr_add+0xc0>)
   1b61a:	f007 fd61 	bl	230e0 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.unicast[i];
   1b61e:	e7ba      	b.n	1b596 <net_if_ipv6_addr_add+0x16>
		ifaddr->is_infinite = false;
   1b620:	2300      	movs	r3, #0
   1b622:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   1b626:	4907      	ldr	r1, [pc, #28]	; (1b644 <net_if_ipv6_addr_add+0xc4>)
   1b628:	f104 0014 	add.w	r0, r4, #20
   1b62c:	f00e fc92 	bl	29f54 <k_delayed_work_init>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   1b630:	4639      	mov	r1, r7
   1b632:	4620      	mov	r0, r4
   1b634:	f7ff ff96 	bl	1b564 <net_if_ipv6_addr_update_lifetime>
   1b638:	e7e7      	b.n	1b60a <net_if_ipv6_addr_add+0x8a>
   1b63a:	bf00      	nop
   1b63c:	0001b515 	.word	0x0001b515
   1b640:	f0600001 	.word	0xf0600001
   1b644:	0001b1cd 	.word	0x0001b1cd

0001b648 <net_if_start_dad>:
{
   1b648:	b570      	push	{r4, r5, r6, lr}
   1b64a:	b084      	sub	sp, #16
   1b64c:	4605      	mov	r5, r0
	struct in6_addr addr = { };
   1b64e:	2300      	movs	r3, #0
   1b650:	9302      	str	r3, [sp, #8]
   1b652:	9303      	str	r3, [sp, #12]
	net_ipv6_addr_create_iid(&addr, &iface->link_addr);
   1b654:	f100 0410 	add.w	r4, r0, #16
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   1b658:	22fe      	movs	r2, #254	; 0xfe
   1b65a:	f88d 2000 	strb.w	r2, [sp]
	addr->s6_addr[1] = 0x80;
   1b65e:	2280      	movs	r2, #128	; 0x80
   1b660:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1b664:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1b668:	9301      	str	r3, [sp, #4]

	switch (lladdr->len) {
   1b66a:	7922      	ldrb	r2, [r4, #4]
   1b66c:	2a06      	cmp	r2, #6
   1b66e:	d020      	beq.n	1b6b2 <net_if_start_dad+0x6a>
   1b670:	2a08      	cmp	r2, #8
   1b672:	d044      	beq.n	1b6fe <net_if_start_dad+0xb6>
   1b674:	2a02      	cmp	r2, #2
   1b676:	d008      	beq.n	1b68a <net_if_start_dad+0x42>
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   1b678:	2300      	movs	r3, #0
   1b67a:	2201      	movs	r2, #1
   1b67c:	4669      	mov	r1, sp
   1b67e:	4628      	mov	r0, r5
   1b680:	f7ff ff7e 	bl	1b580 <net_if_ipv6_addr_add>
   1b684:	4606      	mov	r6, r0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b686:	2400      	movs	r4, #0
   1b688:	e045      	b.n	1b716 <net_if_start_dad+0xce>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
   1b68a:	7963      	ldrb	r3, [r4, #5]
   1b68c:	2b01      	cmp	r3, #1
   1b68e:	d1f3      	bne.n	1b678 <net_if_start_dad+0x30>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1b690:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   1b692:	22ff      	movs	r2, #255	; 0xff
   1b694:	f88d 200b 	strb.w	r2, [sp, #11]
			addr->s6_addr[12] = 0xfe;
   1b698:	22fe      	movs	r2, #254	; 0xfe
   1b69a:	f88d 200c 	strb.w	r2, [sp, #12]
			addr->s6_addr[13] = 0;
   1b69e:	f88d 300d 	strb.w	r3, [sp, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   1b6a2:	6903      	ldr	r3, [r0, #16]
   1b6a4:	781a      	ldrb	r2, [r3, #0]
   1b6a6:	f88d 200e 	strb.w	r2, [sp, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1b6aa:	785b      	ldrb	r3, [r3, #1]
   1b6ac:	f88d 300f 	strb.w	r3, [sp, #15]
   1b6b0:	e7e2      	b.n	1b678 <net_if_start_dad+0x30>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1b6b2:	2203      	movs	r2, #3
   1b6b4:	6901      	ldr	r1, [r0, #16]
   1b6b6:	a802      	add	r0, sp, #8
   1b6b8:	f7e4 fe02 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1b6bc:	23ff      	movs	r3, #255	; 0xff
   1b6be:	f88d 300b 	strb.w	r3, [sp, #11]
		addr->s6_addr[12] = 0xfe;
   1b6c2:	23fe      	movs	r3, #254	; 0xfe
   1b6c4:	f88d 300c 	strb.w	r3, [sp, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1b6c8:	6929      	ldr	r1, [r5, #16]
   1b6ca:	2203      	movs	r2, #3
   1b6cc:	4411      	add	r1, r2
   1b6ce:	f10d 000d 	add.w	r0, sp, #13
   1b6d2:	f7e4 fdf5 	bl	2c0 <memcpy>

#if defined(CONFIG_NET_L2_BT_ZEP1656)
		/* Workaround against older Linux kernel BT IPSP code.
		 * This will be removed eventually.
		 */
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1b6d6:	7963      	ldrb	r3, [r4, #5]
   1b6d8:	2b02      	cmp	r3, #2
   1b6da:	d009      	beq.n	1b6f0 <net_if_start_dad+0xa8>
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   1b6dc:	7963      	ldrb	r3, [r4, #5]
   1b6de:	2b03      	cmp	r3, #3
   1b6e0:	d1ca      	bne.n	1b678 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1b6e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b6e6:	f083 0302 	eor.w	r3, r3, #2
   1b6ea:	f88d 3008 	strb.w	r3, [sp, #8]
   1b6ee:	e7c3      	b.n	1b678 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1b6f0:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b6f4:	f083 0302 	eor.w	r3, r3, #2
   1b6f8:	f88d 3008 	strb.w	r3, [sp, #8]
   1b6fc:	e7ee      	b.n	1b6dc <net_if_start_dad+0x94>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1b6fe:	6901      	ldr	r1, [r0, #16]
   1b700:	a802      	add	r0, sp, #8
   1b702:	f7e4 fddd 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   1b706:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b70a:	f083 0302 	eor.w	r3, r3, #2
   1b70e:	f88d 3008 	strb.w	r3, [sp, #8]
   1b712:	e7b1      	b.n	1b678 <net_if_start_dad+0x30>
   1b714:	3401      	adds	r4, #1
   1b716:	2c02      	cmp	r4, #2
   1b718:	dc18      	bgt.n	1b74c <net_if_start_dad+0x104>
		if (!iface->ipv6.unicast[i].is_used ||
   1b71a:	236c      	movs	r3, #108	; 0x6c
   1b71c:	fb03 5304 	mla	r3, r3, r4, r5
   1b720:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b724:	2b00      	cmp	r3, #0
   1b726:	d0f5      	beq.n	1b714 <net_if_start_dad+0xcc>
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1b728:	236c      	movs	r3, #108	; 0x6c
   1b72a:	fb03 5304 	mla	r3, r3, r4, r5
   1b72e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   1b730:	2b0a      	cmp	r3, #10
   1b732:	d1ef      	bne.n	1b714 <net_if_start_dad+0xcc>
		    &iface->ipv6.unicast[i] == ifaddr) {
   1b734:	216c      	movs	r1, #108	; 0x6c
   1b736:	fb01 f104 	mul.w	r1, r1, r4
   1b73a:	3120      	adds	r1, #32
   1b73c:	4429      	add	r1, r5
   1b73e:	310c      	adds	r1, #12
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1b740:	428e      	cmp	r6, r1
   1b742:	d0e7      	beq.n	1b714 <net_if_start_dad+0xcc>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1b744:	4628      	mov	r0, r5
   1b746:	f7ff fd9f 	bl	1b288 <net_if_ipv6_start_dad>
   1b74a:	e7e3      	b.n	1b714 <net_if_start_dad+0xcc>
}
   1b74c:	b004      	add	sp, #16
   1b74e:	bd70      	pop	{r4, r5, r6, pc}

0001b750 <net_if_ipv6_maddr_add>:
	return addr->s6_addr[0] == 0xFF;
   1b750:	780b      	ldrb	r3, [r1, #0]
	if (!net_is_ipv6_addr_mcast(addr)) {
   1b752:	2bff      	cmp	r3, #255	; 0xff
   1b754:	d134      	bne.n	1b7c0 <net_if_ipv6_maddr_add+0x70>
{
   1b756:	b570      	push	{r4, r5, r6, lr}
   1b758:	2400      	movs	r4, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b75a:	2c04      	cmp	r4, #4
   1b75c:	dc2e      	bgt.n	1b7bc <net_if_ipv6_maddr_add+0x6c>
		if (iface->ipv6.mcast[i].is_used) {
   1b75e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b762:	00d3      	lsls	r3, r2, #3
   1b764:	4403      	add	r3, r0
   1b766:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b76a:	f013 0f01 	tst.w	r3, #1
   1b76e:	d001      	beq.n	1b774 <net_if_ipv6_maddr_add+0x24>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b770:	3401      	adds	r4, #1
   1b772:	e7f2      	b.n	1b75a <net_if_ipv6_maddr_add+0xa>
   1b774:	4605      	mov	r5, r0
		iface->ipv6.mcast[i].is_used = true;
   1b776:	0066      	lsls	r6, r4, #1
   1b778:	1932      	adds	r2, r6, r4
   1b77a:	00d3      	lsls	r3, r2, #3
   1b77c:	4403      	add	r3, r0
   1b77e:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1b782:	f042 0201 	orr.w	r2, r2, #1
   1b786:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		iface->ipv6.mcast[i].address.family = AF_INET6;
   1b78a:	220a      	movs	r2, #10
   1b78c:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   1b790:	1933      	adds	r3, r6, r4
   1b792:	00d8      	lsls	r0, r3, #3
   1b794:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1b798:	4428      	add	r0, r5
   1b79a:	2210      	movs	r2, #16
   1b79c:	3018      	adds	r0, #24
   1b79e:	f7e4 fd8f 	bl	2c0 <memcpy>
   1b7a2:	2300      	movs	r3, #0
   1b7a4:	461a      	mov	r2, r3
   1b7a6:	4629      	mov	r1, r5
   1b7a8:	4806      	ldr	r0, [pc, #24]	; (1b7c4 <net_if_ipv6_maddr_add+0x74>)
   1b7aa:	f007 fc99 	bl	230e0 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.mcast[i];
   1b7ae:	4434      	add	r4, r6
   1b7b0:	00e0      	lsls	r0, r4, #3
   1b7b2:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1b7b6:	4428      	add	r0, r5
   1b7b8:	3010      	adds	r0, #16
   1b7ba:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1b7bc:	2000      	movs	r0, #0
   1b7be:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1b7c0:	2000      	movs	r0, #0
   1b7c2:	4770      	bx	lr
   1b7c4:	f0600003 	.word	0xf0600003

0001b7c8 <net_if_ipv6_maddr_rm>:
{
   1b7c8:	b570      	push	{r4, r5, r6, lr}
   1b7ca:	4605      	mov	r5, r0
   1b7cc:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b7ce:	2400      	movs	r4, #0
   1b7d0:	e000      	b.n	1b7d4 <net_if_ipv6_maddr_rm+0xc>
   1b7d2:	3401      	adds	r4, #1
   1b7d4:	2c04      	cmp	r4, #4
   1b7d6:	dc25      	bgt.n	1b824 <net_if_ipv6_maddr_rm+0x5c>
		if (!iface->ipv6.mcast[i].is_used) {
   1b7d8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b7dc:	00d3      	lsls	r3, r2, #3
   1b7de:	461a      	mov	r2, r3
   1b7e0:	442b      	add	r3, r5
   1b7e2:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b7e6:	f013 0f01 	tst.w	r3, #1
   1b7ea:	d0f2      	beq.n	1b7d2 <net_if_ipv6_maddr_rm+0xa>
			    &iface->ipv6.mcast[i].address.in6_addr,
   1b7ec:	f502 70b0 	add.w	r0, r2, #352	; 0x160
   1b7f0:	4428      	add	r0, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b7f2:	2210      	movs	r2, #16
   1b7f4:	4631      	mov	r1, r6
   1b7f6:	3018      	adds	r0, #24
   1b7f8:	f00e fffa 	bl	2a7f0 <memcmp>
		if (!net_ipv6_addr_cmp(
   1b7fc:	2800      	cmp	r0, #0
   1b7fe:	d1e8      	bne.n	1b7d2 <net_if_ipv6_maddr_rm+0xa>
		iface->ipv6.mcast[i].is_used = false;
   1b800:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b804:	00e3      	lsls	r3, r4, #3
   1b806:	442b      	add	r3, r5
   1b808:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1b80c:	f36f 0200 	bfc	r2, #0, #1
   1b810:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
   1b814:	2300      	movs	r3, #0
   1b816:	461a      	mov	r2, r3
   1b818:	4629      	mov	r1, r5
   1b81a:	4803      	ldr	r0, [pc, #12]	; (1b828 <net_if_ipv6_maddr_rm+0x60>)
   1b81c:	f007 fc60 	bl	230e0 <net_mgmt_event_notify_with_info>
		return true;
   1b820:	2001      	movs	r0, #1
   1b822:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   1b824:	2000      	movs	r0, #0
}
   1b826:	bd70      	pop	{r4, r5, r6, pc}
   1b828:	f0600004 	.word	0xf0600004

0001b82c <net_if_ipv6_addr_rm>:
{
   1b82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b830:	b084      	sub	sp, #16
   1b832:	4606      	mov	r6, r0
   1b834:	460f      	mov	r7, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b836:	2400      	movs	r4, #0
   1b838:	e009      	b.n	1b84e <net_if_ipv6_addr_rm+0x22>
			k_delayed_work_cancel(&iface->ipv6.unicast[i].lifetime);
   1b83a:	206c      	movs	r0, #108	; 0x6c
   1b83c:	fb00 f004 	mul.w	r0, r0, r4
   1b840:	3030      	adds	r0, #48	; 0x30
   1b842:	4430      	add	r0, r6
   1b844:	3010      	adds	r0, #16
   1b846:	f00e fba3 	bl	29f90 <k_delayed_work_cancel>
   1b84a:	e01c      	b.n	1b886 <net_if_ipv6_addr_rm+0x5a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b84c:	3401      	adds	r4, #1
   1b84e:	2c02      	cmp	r4, #2
   1b850:	dc46      	bgt.n	1b8e0 <net_if_ipv6_addr_rm+0xb4>
		if (!iface->ipv6.unicast[i].is_used) {
   1b852:	236c      	movs	r3, #108	; 0x6c
   1b854:	fb03 6304 	mla	r3, r3, r4, r6
   1b858:	f893 5094 	ldrb.w	r5, [r3, #148]	; 0x94
   1b85c:	2d00      	cmp	r5, #0
   1b85e:	d0f5      	beq.n	1b84c <net_if_ipv6_addr_rm+0x20>
			    &iface->ipv6.unicast[i].address.in6_addr,
   1b860:	206c      	movs	r0, #108	; 0x6c
   1b862:	fb00 f004 	mul.w	r0, r0, r4
   1b866:	3020      	adds	r0, #32
   1b868:	4430      	add	r0, r6
   1b86a:	2210      	movs	r2, #16
   1b86c:	4639      	mov	r1, r7
   1b86e:	4410      	add	r0, r2
   1b870:	f00e ffbe 	bl	2a7f0 <memcmp>
		if (!net_ipv6_addr_cmp(
   1b874:	2800      	cmp	r0, #0
   1b876:	d1e9      	bne.n	1b84c <net_if_ipv6_addr_rm+0x20>
		if (!iface->ipv6.unicast[i].is_infinite) {
   1b878:	236c      	movs	r3, #108	; 0x6c
   1b87a:	fb03 6304 	mla	r3, r3, r4, r6
   1b87e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   1b882:	2b00      	cmp	r3, #0
   1b884:	d0d9      	beq.n	1b83a <net_if_ipv6_addr_rm+0xe>
		iface->ipv6.unicast[i].is_used = false;
   1b886:	236c      	movs	r3, #108	; 0x6c
   1b888:	fb03 6404 	mla	r4, r3, r4, r6
   1b88c:	f04f 0800 	mov.w	r8, #0
   1b890:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
	dst->s6_addr[0]   = 0xFF;
   1b894:	23ff      	movs	r3, #255	; 0xff
   1b896:	f88d 3000 	strb.w	r3, [sp]
	dst->s6_addr[1]   = 0x02;
   1b89a:	2202      	movs	r2, #2
   1b89c:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1b8a0:	f8ad 8002 	strh.w	r8, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1b8a4:	f8ad 8004 	strh.w	r8, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1b8a8:	f8ad 8006 	strh.w	r8, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1b8ac:	f8ad 8008 	strh.w	r8, [sp, #8]
	dst->s6_addr[10]  = 0;
   1b8b0:	f88d 800a 	strb.w	r8, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1b8b4:	2201      	movs	r2, #1
   1b8b6:	f88d 200b 	strb.w	r2, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1b8ba:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1b8be:	7b7b      	ldrb	r3, [r7, #13]
   1b8c0:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1b8c4:	89fb      	ldrh	r3, [r7, #14]
   1b8c6:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
   1b8ca:	4669      	mov	r1, sp
   1b8cc:	4630      	mov	r0, r6
   1b8ce:	f7ff ff7b 	bl	1b7c8 <net_if_ipv6_maddr_rm>
   1b8d2:	4643      	mov	r3, r8
   1b8d4:	4642      	mov	r2, r8
   1b8d6:	4631      	mov	r1, r6
   1b8d8:	4804      	ldr	r0, [pc, #16]	; (1b8ec <net_if_ipv6_addr_rm+0xc0>)
   1b8da:	f007 fc01 	bl	230e0 <net_mgmt_event_notify_with_info>
   1b8de:	e000      	b.n	1b8e2 <net_if_ipv6_addr_rm+0xb6>
	return false;
   1b8e0:	2500      	movs	r5, #0
}
   1b8e2:	4628      	mov	r0, r5
   1b8e4:	b004      	add	sp, #16
   1b8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b8ea:	bf00      	nop
   1b8ec:	f0600002 	.word	0xf0600002

0001b8f0 <net_if_ipv6_dad_failed>:
{
   1b8f0:	b510      	push	{r4, lr}
   1b8f2:	b082      	sub	sp, #8
   1b8f4:	ab02      	add	r3, sp, #8
   1b8f6:	f843 0d04 	str.w	r0, [r3, #-4]!
   1b8fa:	460c      	mov	r4, r1
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   1b8fc:	4619      	mov	r1, r3
   1b8fe:	4620      	mov	r0, r4
   1b900:	f7ff fdc8 	bl	1b494 <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   1b904:	b160      	cbz	r0, 1b920 <net_if_ipv6_dad_failed+0x30>
	k_delayed_work_cancel(&ifaddr->dad_timer);
   1b906:	303c      	adds	r0, #60	; 0x3c
   1b908:	f00e fb42 	bl	29f90 <k_delayed_work_cancel>
   1b90c:	2300      	movs	r3, #0
   1b90e:	461a      	mov	r2, r3
   1b910:	9901      	ldr	r1, [sp, #4]
   1b912:	4804      	ldr	r0, [pc, #16]	; (1b924 <net_if_ipv6_dad_failed+0x34>)
   1b914:	f007 fbe4 	bl	230e0 <net_mgmt_event_notify_with_info>
	net_if_ipv6_addr_rm(iface, addr);
   1b918:	4621      	mov	r1, r4
   1b91a:	9801      	ldr	r0, [sp, #4]
   1b91c:	f7ff ff86 	bl	1b82c <net_if_ipv6_addr_rm>
}
   1b920:	b002      	add	sp, #8
   1b922:	bd10      	pop	{r4, pc}
   1b924:	f060000e 	.word	0xf060000e

0001b928 <net_if_ipv6_maddr_lookup>:
{
   1b928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b92a:	4607      	mov	r7, r0
   1b92c:	460e      	mov	r6, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b92e:	4d22      	ldr	r5, [pc, #136]	; (1b9b8 <net_if_ipv6_maddr_lookup+0x90>)
   1b930:	e034      	b.n	1b99c <net_if_ipv6_maddr_lookup+0x74>
		return false;
   1b932:	2300      	movs	r3, #0
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1b934:	bb13      	cbnz	r3, 1b97c <net_if_ipv6_maddr_lookup+0x54>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b936:	3401      	adds	r4, #1
   1b938:	2c04      	cmp	r4, #4
   1b93a:	dc2d      	bgt.n	1b998 <net_if_ipv6_maddr_lookup+0x70>
			if (!iface->ipv6.mcast[i].is_used ||
   1b93c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b940:	00d3      	lsls	r3, r2, #3
   1b942:	442b      	add	r3, r5
   1b944:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b948:	f013 0f01 	tst.w	r3, #1
   1b94c:	d0f3      	beq.n	1b936 <net_if_ipv6_maddr_lookup+0xe>
			    iface->ipv6.mcast[i].address.family != AF_INET6) {
   1b94e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b952:	00d3      	lsls	r3, r2, #3
   1b954:	442b      	add	r3, r5
   1b956:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
			if (!iface->ipv6.mcast[i].is_used ||
   1b95a:	2b0a      	cmp	r3, #10
   1b95c:	d1eb      	bne.n	1b936 <net_if_ipv6_maddr_lookup+0xe>
				iface->ipv6.mcast[i].address.in6_addr.s6_addr,
   1b95e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b962:	00d3      	lsls	r3, r2, #3
   1b964:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1b968:	18e9      	adds	r1, r5, r3
	if (memcmp(addr1, addr2, bytes)) {
   1b96a:	2210      	movs	r2, #16
   1b96c:	3118      	adds	r1, #24
   1b96e:	4638      	mov	r0, r7
   1b970:	f00e ff3e 	bl	2a7f0 <memcmp>
   1b974:	2800      	cmp	r0, #0
   1b976:	d1dc      	bne.n	1b932 <net_if_ipv6_maddr_lookup+0xa>
		return true;
   1b978:	2301      	movs	r3, #1
   1b97a:	e7db      	b.n	1b934 <net_if_ipv6_maddr_lookup+0xc>
				if (ret) {
   1b97c:	b106      	cbz	r6, 1b980 <net_if_ipv6_maddr_lookup+0x58>
					*ret = iface;
   1b97e:	6035      	str	r5, [r6, #0]
				return &iface->ipv6.mcast[i];
   1b980:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b984:	00e3      	lsls	r3, r4, #3
   1b986:	f503 70b0 	add.w	r0, r3, #352	; 0x160
   1b98a:	4428      	add	r0, r5
   1b98c:	3010      	adds	r0, #16
   1b98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b990:	2400      	movs	r4, #0
   1b992:	e7d1      	b.n	1b938 <net_if_ipv6_maddr_lookup+0x10>
   1b994:	2400      	movs	r4, #0
   1b996:	e7cf      	b.n	1b938 <net_if_ipv6_maddr_lookup+0x10>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b998:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b99c:	4b07      	ldr	r3, [pc, #28]	; (1b9bc <net_if_ipv6_maddr_lookup+0x94>)
   1b99e:	429d      	cmp	r5, r3
   1b9a0:	d008      	beq.n	1b9b4 <net_if_ipv6_maddr_lookup+0x8c>
		if (ret && *ret && iface != *ret) {
   1b9a2:	2e00      	cmp	r6, #0
   1b9a4:	d0f4      	beq.n	1b990 <net_if_ipv6_maddr_lookup+0x68>
   1b9a6:	6833      	ldr	r3, [r6, #0]
   1b9a8:	2b00      	cmp	r3, #0
   1b9aa:	d0f3      	beq.n	1b994 <net_if_ipv6_maddr_lookup+0x6c>
   1b9ac:	429d      	cmp	r5, r3
   1b9ae:	d1f3      	bne.n	1b998 <net_if_ipv6_maddr_lookup+0x70>
   1b9b0:	2400      	movs	r4, #0
   1b9b2:	e7c1      	b.n	1b938 <net_if_ipv6_maddr_lookup+0x10>
	return NULL;
   1b9b4:	2000      	movs	r0, #0
}
   1b9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b9b8:	2000d2c0 	.word	0x2000d2c0
   1b9bc:	2000d560 	.word	0x2000d560

0001b9c0 <net_if_mcast_monitor>:
{
   1b9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b9c2:	4605      	mov	r5, r0
   1b9c4:	460e      	mov	r6, r1
   1b9c6:	4617      	mov	r7, r2
	return list->head;
   1b9c8:	4b13      	ldr	r3, [pc, #76]	; (1ba18 <net_if_mcast_monitor+0x58>)
   1b9ca:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1b9cc:	b11b      	cbz	r3, 1b9d6 <net_if_mcast_monitor+0x16>
   1b9ce:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b9d0:	b173      	cbz	r3, 1b9f0 <net_if_mcast_monitor+0x30>
	return node->next;
   1b9d2:	681c      	ldr	r4, [r3, #0]
   1b9d4:	e00c      	b.n	1b9f0 <net_if_mcast_monitor+0x30>
   1b9d6:	461c      	mov	r4, r3
   1b9d8:	e00a      	b.n	1b9f0 <net_if_mcast_monitor+0x30>
			mon->cb(iface, addr, is_joined);
   1b9da:	689b      	ldr	r3, [r3, #8]
   1b9dc:	463a      	mov	r2, r7
   1b9de:	4631      	mov	r1, r6
   1b9e0:	4628      	mov	r0, r5
   1b9e2:	4798      	blx	r3
   1b9e4:	e008      	b.n	1b9f8 <net_if_mcast_monitor+0x38>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b9e6:	4623      	mov	r3, r4
   1b9e8:	e00c      	b.n	1ba04 <net_if_mcast_monitor+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1b9ea:	4622      	mov	r2, r4
   1b9ec:	4623      	mov	r3, r4
   1b9ee:	4614      	mov	r4, r2
   1b9f0:	b183      	cbz	r3, 1ba14 <net_if_mcast_monitor+0x54>
		if (iface == mon->iface) {
   1b9f2:	685a      	ldr	r2, [r3, #4]
   1b9f4:	42aa      	cmp	r2, r5
   1b9f6:	d0f0      	beq.n	1b9da <net_if_mcast_monitor+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1b9f8:	2c00      	cmp	r4, #0
   1b9fa:	d0f6      	beq.n	1b9ea <net_if_mcast_monitor+0x2a>
   1b9fc:	4622      	mov	r2, r4
   1b9fe:	2c00      	cmp	r4, #0
   1ba00:	d0f1      	beq.n	1b9e6 <net_if_mcast_monitor+0x26>
	return node->next;
   1ba02:	6823      	ldr	r3, [r4, #0]
   1ba04:	b113      	cbz	r3, 1ba0c <net_if_mcast_monitor+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1ba06:	b11a      	cbz	r2, 1ba10 <net_if_mcast_monitor+0x50>
	return node->next;
   1ba08:	6822      	ldr	r2, [r4, #0]
   1ba0a:	e7ef      	b.n	1b9ec <net_if_mcast_monitor+0x2c>
   1ba0c:	2200      	movs	r2, #0
   1ba0e:	e7ed      	b.n	1b9ec <net_if_mcast_monitor+0x2c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1ba10:	2200      	movs	r2, #0
   1ba12:	e7eb      	b.n	1b9ec <net_if_mcast_monitor+0x2c>
}
   1ba14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ba16:	bf00      	nop
   1ba18:	20001c5c 	.word	0x20001c5c

0001ba1c <net_if_ipv6_prefix_add>:
{
   1ba1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba20:	4605      	mov	r5, r0
   1ba22:	460e      	mov	r6, r1
   1ba24:	4617      	mov	r7, r2
   1ba26:	4698      	mov	r8, r3
	if_prefix = ipv6_prefix_find(iface, prefix, len);
   1ba28:	f7ff fc00 	bl	1b22c <ipv6_prefix_find>
	if (if_prefix) {
   1ba2c:	4604      	mov	r4, r0
   1ba2e:	b110      	cbz	r0, 1ba36 <net_if_ipv6_prefix_add+0x1a>
}
   1ba30:	4620      	mov	r0, r4
   1ba32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba36:	2300      	movs	r3, #0
   1ba38:	e000      	b.n	1ba3c <net_if_ipv6_prefix_add+0x20>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ba3a:	3301      	adds	r3, #1
   1ba3c:	2b01      	cmp	r3, #1
   1ba3e:	dcf7      	bgt.n	1ba30 <net_if_ipv6_prefix_add+0x14>
		if (iface->ipv6.prefix[i].is_used) {
   1ba40:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1ba44:	008a      	lsls	r2, r1, #2
   1ba46:	442a      	add	r2, r5
   1ba48:	f892 2222 	ldrb.w	r2, [r2, #546]	; 0x222
   1ba4c:	2a00      	cmp	r2, #0
   1ba4e:	d1f4      	bne.n	1ba3a <net_if_ipv6_prefix_add+0x1e>
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   1ba50:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1ba54:	009a      	lsls	r2, r3, #2
   1ba56:	f502 74ec 	add.w	r4, r2, #472	; 0x1d8
   1ba5a:	442c      	add	r4, r5
   1ba5c:	3410      	adds	r4, #16
   1ba5e:	4643      	mov	r3, r8
   1ba60:	463a      	mov	r2, r7
   1ba62:	4631      	mov	r1, r6
   1ba64:	4620      	mov	r0, r4
   1ba66:	f7ff fc2d 	bl	1b2c4 <net_if_ipv6_prefix_init>
   1ba6a:	2300      	movs	r3, #0
   1ba6c:	461a      	mov	r2, r3
   1ba6e:	4629      	mov	r1, r5
   1ba70:	4801      	ldr	r0, [pc, #4]	; (1ba78 <net_if_ipv6_prefix_add+0x5c>)
   1ba72:	f007 fb35 	bl	230e0 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.prefix[i];
   1ba76:	e7db      	b.n	1ba30 <net_if_ipv6_prefix_add+0x14>
   1ba78:	f0600005 	.word	0xf0600005

0001ba7c <net_if_ipv6_prefix_lookup>:
{
   1ba7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba80:	4605      	mov	r5, r0
   1ba82:	4688      	mov	r8, r1
   1ba84:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ba86:	2400      	movs	r4, #0
   1ba88:	e01d      	b.n	1bac6 <net_if_ipv6_prefix_lookup+0x4a>
	if (memcmp(addr1, addr2, bytes)) {
   1ba8a:	4652      	mov	r2, sl
   1ba8c:	4641      	mov	r1, r8
   1ba8e:	4648      	mov	r0, r9
   1ba90:	f00e feae 	bl	2a7f0 <memcmp>
   1ba94:	b9a0      	cbnz	r0, 1bac0 <net_if_ipv6_prefix_lookup+0x44>
	if (!remain) {
   1ba96:	f1bb 0f00 	cmp.w	fp, #0
   1ba9a:	d012      	beq.n	1bac2 <net_if_ipv6_prefix_lookup+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1ba9c:	f1cb 0208 	rsb	r2, fp, #8
   1baa0:	23ff      	movs	r3, #255	; 0xff
   1baa2:	4093      	lsls	r3, r2
   1baa4:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1baa8:	fa03 f30b 	lsl.w	r3, r3, fp
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1baac:	f819 200a 	ldrb.w	r2, [r9, sl]
   1bab0:	f818 100a 	ldrb.w	r1, [r8, sl]
   1bab4:	404a      	eors	r2, r1
   1bab6:	4213      	tst	r3, r2
   1bab8:	bf0c      	ite	eq
   1baba:	2601      	moveq	r6, #1
   1babc:	2600      	movne	r6, #0
   1babe:	e000      	b.n	1bac2 <net_if_ipv6_prefix_lookup+0x46>
		return false;
   1bac0:	2600      	movs	r6, #0
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1bac2:	b9e6      	cbnz	r6, 1bafe <net_if_ipv6_prefix_lookup+0x82>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1bac4:	3401      	adds	r4, #1
   1bac6:	2c01      	cmp	r4, #1
   1bac8:	dc22      	bgt.n	1bb10 <net_if_ipv6_prefix_lookup+0x94>
		if (!iface->ipv6.prefix[i].is_used) {
   1baca:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1bace:	0093      	lsls	r3, r2, #2
   1bad0:	442b      	add	r3, r5
   1bad2:	f893 6222 	ldrb.w	r6, [r3, #546]	; 0x222
   1bad6:	2e00      	cmp	r6, #0
   1bad8:	d0f4      	beq.n	1bac4 <net_if_ipv6_prefix_lookup+0x48>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1bada:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1bade:	0093      	lsls	r3, r2, #2
   1bae0:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1bae4:	442b      	add	r3, r5
   1bae6:	f103 0910 	add.w	r9, r3, #16
	u8_t bits = 128 - length;
   1baea:	f1c7 0380 	rsb	r3, r7, #128	; 0x80
	u8_t bytes = length / 8;
   1baee:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
	u8_t remain = bits % 8;
   1baf2:	f003 0b07 	and.w	fp, r3, #7
	if (length > 128) {
   1baf6:	2f80      	cmp	r7, #128	; 0x80
   1baf8:	d9c7      	bls.n	1ba8a <net_if_ipv6_prefix_lookup+0xe>
		return false;
   1bafa:	2600      	movs	r6, #0
   1bafc:	e7e1      	b.n	1bac2 <net_if_ipv6_prefix_lookup+0x46>
			return &iface->ipv6.prefix[i];
   1bafe:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   1bb02:	00a3      	lsls	r3, r4, #2
   1bb04:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
   1bb08:	4428      	add	r0, r5
   1bb0a:	3010      	adds	r0, #16
   1bb0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return NULL;
   1bb10:	2000      	movs	r0, #0
}
   1bb12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0001bb18 <net_if_ipv6_addr_onlink>:
{
   1bb18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb1c:	4606      	mov	r6, r0
   1bb1e:	4688      	mov	r8, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1bb20:	4d2d      	ldr	r5, [pc, #180]	; (1bbd8 <net_if_ipv6_addr_onlink+0xc0>)
   1bb22:	e048      	b.n	1bbb6 <net_if_ipv6_addr_onlink+0x9e>
	if (memcmp(addr1, addr2, bytes)) {
   1bb24:	465a      	mov	r2, fp
   1bb26:	4641      	mov	r1, r8
   1bb28:	4648      	mov	r0, r9
   1bb2a:	f00e fe61 	bl	2a7f0 <memcmp>
   1bb2e:	b9a8      	cbnz	r0, 1bb5c <net_if_ipv6_addr_onlink+0x44>
	if (!remain) {
   1bb30:	f1ba 0f00 	cmp.w	sl, #0
   1bb34:	d013      	beq.n	1bb5e <net_if_ipv6_addr_onlink+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1bb36:	f1ca 0208 	rsb	r2, sl, #8
   1bb3a:	23ff      	movs	r3, #255	; 0xff
   1bb3c:	4093      	lsls	r3, r2
   1bb3e:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1bb42:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1bb46:	f819 300b 	ldrb.w	r3, [r9, fp]
   1bb4a:	f818 200b 	ldrb.w	r2, [r8, fp]
   1bb4e:	4053      	eors	r3, r2
   1bb50:	ea1a 0f03 	tst.w	sl, r3
   1bb54:	bf0c      	ite	eq
   1bb56:	2701      	moveq	r7, #1
   1bb58:	2700      	movne	r7, #0
   1bb5a:	e000      	b.n	1bb5e <net_if_ipv6_addr_onlink+0x46>
		return false;
   1bb5c:	2700      	movs	r7, #0
			if (tmp->ipv6.prefix[i].is_used &&
   1bb5e:	bb0f      	cbnz	r7, 1bba4 <net_if_ipv6_addr_onlink+0x8c>
		for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1bb60:	3401      	adds	r4, #1
   1bb62:	2c01      	cmp	r4, #1
   1bb64:	dc25      	bgt.n	1bbb2 <net_if_ipv6_addr_onlink+0x9a>
			if (tmp->ipv6.prefix[i].is_used &&
   1bb66:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1bb6a:	0093      	lsls	r3, r2, #2
   1bb6c:	442b      	add	r3, r5
   1bb6e:	f893 7222 	ldrb.w	r7, [r3, #546]	; 0x222
   1bb72:	2f00      	cmp	r7, #0
   1bb74:	d0f4      	beq.n	1bb60 <net_if_ipv6_addr_onlink+0x48>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   1bb76:	0122      	lsls	r2, r4, #4
   1bb78:	1b11      	subs	r1, r2, r4
   1bb7a:	008b      	lsls	r3, r1, #2
   1bb7c:	4619      	mov	r1, r3
   1bb7e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1bb82:	442b      	add	r3, r5
   1bb84:	f103 0910 	add.w	r9, r3, #16
   1bb88:	460a      	mov	r2, r1
   1bb8a:	442a      	add	r2, r5
   1bb8c:	f892 3220 	ldrb.w	r3, [r2, #544]	; 0x220
	u8_t bits = 128 - length;
   1bb90:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   1bb94:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   1bb98:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   1bb9c:	2b80      	cmp	r3, #128	; 0x80
   1bb9e:	d9c1      	bls.n	1bb24 <net_if_ipv6_addr_onlink+0xc>
		return false;
   1bba0:	2700      	movs	r7, #0
   1bba2:	e7dc      	b.n	1bb5e <net_if_ipv6_addr_onlink+0x46>
				if (iface) {
   1bba4:	b1a6      	cbz	r6, 1bbd0 <net_if_ipv6_addr_onlink+0xb8>
					*iface = tmp;
   1bba6:	6035      	str	r5, [r6, #0]
   1bba8:	e012      	b.n	1bbd0 <net_if_ipv6_addr_onlink+0xb8>
   1bbaa:	2400      	movs	r4, #0
   1bbac:	e7d9      	b.n	1bb62 <net_if_ipv6_addr_onlink+0x4a>
   1bbae:	2400      	movs	r4, #0
   1bbb0:	e7d7      	b.n	1bb62 <net_if_ipv6_addr_onlink+0x4a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1bbb2:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1bbb6:	4b09      	ldr	r3, [pc, #36]	; (1bbdc <net_if_ipv6_addr_onlink+0xc4>)
   1bbb8:	429d      	cmp	r5, r3
   1bbba:	d008      	beq.n	1bbce <net_if_ipv6_addr_onlink+0xb6>
		if (iface && *iface && *iface != tmp) {
   1bbbc:	2e00      	cmp	r6, #0
   1bbbe:	d0f4      	beq.n	1bbaa <net_if_ipv6_addr_onlink+0x92>
   1bbc0:	6833      	ldr	r3, [r6, #0]
   1bbc2:	2b00      	cmp	r3, #0
   1bbc4:	d0f3      	beq.n	1bbae <net_if_ipv6_addr_onlink+0x96>
   1bbc6:	429d      	cmp	r5, r3
   1bbc8:	d1f3      	bne.n	1bbb2 <net_if_ipv6_addr_onlink+0x9a>
   1bbca:	2400      	movs	r4, #0
   1bbcc:	e7c9      	b.n	1bb62 <net_if_ipv6_addr_onlink+0x4a>
	return false;
   1bbce:	2700      	movs	r7, #0
}
   1bbd0:	4638      	mov	r0, r7
   1bbd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbd6:	bf00      	nop
   1bbd8:	2000d2c0 	.word	0x2000d2c0
   1bbdc:	2000d560 	.word	0x2000d560

0001bbe0 <net_if_ipv6_prefix_set_timer>:
{
   1bbe0:	b508      	push	{r3, lr}
	u32_t timeout = lifetime * MSEC_PER_SEC;
   1bbe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bbe6:	fb02 f201 	mul.w	r2, r2, r1
	if (lifetime > (0xfffffffe / MSEC_PER_SEC)) {
   1bbea:	4b05      	ldr	r3, [pc, #20]	; (1bc00 <net_if_ipv6_prefix_set_timer+0x20>)
   1bbec:	4299      	cmp	r1, r3
   1bbee:	d901      	bls.n	1bbf4 <net_if_ipv6_prefix_set_timer+0x14>
		timeout = 0xfffffffe;
   1bbf0:	f06f 0201 	mvn.w	r2, #1
   1bbf4:	4601      	mov	r1, r0
   1bbf6:	4803      	ldr	r0, [pc, #12]	; (1bc04 <net_if_ipv6_prefix_set_timer+0x24>)
   1bbf8:	f00e fa24 	bl	2a044 <k_delayed_work_submit_to_queue>
   1bbfc:	bd08      	pop	{r3, pc}
   1bbfe:	bf00      	nop
   1bc00:	00418937 	.word	0x00418937
   1bc04:	20002c78 	.word	0x20002c78

0001bc08 <net_if_ipv6_prefix_unset_timer>:
{
   1bc08:	b508      	push	{r3, lr}
	if (!prefix->is_used) {
   1bc0a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1bc0e:	b903      	cbnz	r3, 1bc12 <net_if_ipv6_prefix_unset_timer+0xa>
   1bc10:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&prefix->lifetime);
   1bc12:	f00e f9bd 	bl	29f90 <k_delayed_work_cancel>
   1bc16:	e7fb      	b.n	1bc10 <net_if_ipv6_prefix_unset_timer+0x8>

0001bc18 <net_if_ipv6_prefix_rm>:
{
   1bc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc1c:	4606      	mov	r6, r0
   1bc1e:	460f      	mov	r7, r1
   1bc20:	4690      	mov	r8, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1bc22:	2400      	movs	r4, #0
   1bc24:	e000      	b.n	1bc28 <net_if_ipv6_prefix_rm+0x10>
   1bc26:	3401      	adds	r4, #1
   1bc28:	2c01      	cmp	r4, #1
   1bc2a:	dc2f      	bgt.n	1bc8c <net_if_ipv6_prefix_rm+0x74>
		if (!iface->ipv6.prefix[i].is_used) {
   1bc2c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1bc30:	0093      	lsls	r3, r2, #2
   1bc32:	461a      	mov	r2, r3
   1bc34:	4433      	add	r3, r6
   1bc36:	f893 5222 	ldrb.w	r5, [r3, #546]	; 0x222
   1bc3a:	2d00      	cmp	r5, #0
   1bc3c:	d0f3      	beq.n	1bc26 <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1bc3e:	f502 7000 	add.w	r0, r2, #512	; 0x200
   1bc42:	4430      	add	r0, r6
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1bc44:	2210      	movs	r2, #16
   1bc46:	4639      	mov	r1, r7
   1bc48:	4410      	add	r0, r2
   1bc4a:	f00e fdd1 	bl	2a7f0 <memcmp>
   1bc4e:	2800      	cmp	r0, #0
   1bc50:	d1e9      	bne.n	1bc26 <net_if_ipv6_prefix_rm+0xe>
		    iface->ipv6.prefix[i].len != len) {
   1bc52:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1bc56:	0093      	lsls	r3, r2, #2
   1bc58:	4433      	add	r3, r6
   1bc5a:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1bc5e:	4543      	cmp	r3, r8
   1bc60:	d1e1      	bne.n	1bc26 <net_if_ipv6_prefix_rm+0xe>
		net_if_ipv6_prefix_unset_timer(&iface->ipv6.prefix[i]);
   1bc62:	0127      	lsls	r7, r4, #4
   1bc64:	1b3a      	subs	r2, r7, r4
   1bc66:	0093      	lsls	r3, r2, #2
   1bc68:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   1bc6c:	18f0      	adds	r0, r6, r3
   1bc6e:	3010      	adds	r0, #16
   1bc70:	f7ff ffca 	bl	1bc08 <net_if_ipv6_prefix_unset_timer>
		iface->ipv6.prefix[i].is_used = false;
   1bc74:	1b3c      	subs	r4, r7, r4
   1bc76:	00a3      	lsls	r3, r4, #2
   1bc78:	4433      	add	r3, r6
   1bc7a:	2200      	movs	r2, #0
   1bc7c:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
   1bc80:	4613      	mov	r3, r2
   1bc82:	4631      	mov	r1, r6
   1bc84:	4803      	ldr	r0, [pc, #12]	; (1bc94 <net_if_ipv6_prefix_rm+0x7c>)
   1bc86:	f007 fa2b 	bl	230e0 <net_mgmt_event_notify_with_info>
		return true;
   1bc8a:	e000      	b.n	1bc8e <net_if_ipv6_prefix_rm+0x76>
	return false;
   1bc8c:	2500      	movs	r5, #0
}
   1bc8e:	4628      	mov	r0, r5
   1bc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bc94:	f0600006 	.word	0xf0600006

0001bc98 <net_if_ipv6_router_lookup>:
{
   1bc98:	b570      	push	{r4, r5, r6, lr}
   1bc9a:	4605      	mov	r5, r0
   1bc9c:	460e      	mov	r6, r1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bc9e:	2400      	movs	r4, #0
   1bca0:	2c00      	cmp	r4, #0
   1bca2:	dd01      	ble.n	1bca8 <net_if_ipv6_router_lookup+0x10>
	return NULL;
   1bca4:	2000      	movs	r0, #0
}
   1bca6:	bd70      	pop	{r4, r5, r6, pc}
		if (!routers[i].is_used ||
   1bca8:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1bcac:	009a      	lsls	r2, r3, #2
   1bcae:	4b11      	ldr	r3, [pc, #68]	; (1bcf4 <net_if_ipv6_router_lookup+0x5c>)
   1bcb0:	4413      	add	r3, r2
   1bcb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1bcb6:	b123      	cbz	r3, 1bcc2 <net_if_ipv6_router_lookup+0x2a>
		    routers[i].address.family != AF_INET6 ||
   1bcb8:	4b0e      	ldr	r3, [pc, #56]	; (1bcf4 <net_if_ipv6_router_lookup+0x5c>)
   1bcba:	4413      	add	r3, r2
   1bcbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		if (!routers[i].is_used ||
   1bcbe:	2b0a      	cmp	r3, #10
   1bcc0:	d001      	beq.n	1bcc6 <net_if_ipv6_router_lookup+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bcc2:	3401      	adds	r4, #1
   1bcc4:	e7ec      	b.n	1bca0 <net_if_ipv6_router_lookup+0x8>
		    routers[i].iface != iface) {
   1bcc6:	4b0b      	ldr	r3, [pc, #44]	; (1bcf4 <net_if_ipv6_router_lookup+0x5c>)
   1bcc8:	4413      	add	r3, r2
   1bcca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		    routers[i].address.family != AF_INET6 ||
   1bccc:	42ab      	cmp	r3, r5
   1bcce:	d1f8      	bne.n	1bcc2 <net_if_ipv6_router_lookup+0x2a>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   1bcd0:	eb04 1204 	add.w	r2, r4, r4, lsl #4
   1bcd4:	0093      	lsls	r3, r2, #2
   1bcd6:	3328      	adds	r3, #40	; 0x28
   1bcd8:	4a06      	ldr	r2, [pc, #24]	; (1bcf4 <net_if_ipv6_router_lookup+0x5c>)
   1bcda:	4413      	add	r3, r2
   1bcdc:	2210      	movs	r2, #16
   1bcde:	4631      	mov	r1, r6
   1bce0:	1d18      	adds	r0, r3, #4
   1bce2:	f00e fd85 	bl	2a7f0 <memcmp>
   1bce6:	2800      	cmp	r0, #0
   1bce8:	d1eb      	bne.n	1bcc2 <net_if_ipv6_router_lookup+0x2a>
			return &routers[i];
   1bcea:	2344      	movs	r3, #68	; 0x44
   1bcec:	4801      	ldr	r0, [pc, #4]	; (1bcf4 <net_if_ipv6_router_lookup+0x5c>)
   1bcee:	fb03 0004 	mla	r0, r3, r4, r0
   1bcf2:	bd70      	pop	{r4, r5, r6, pc}
   1bcf4:	20001c64 	.word	0x20001c64

0001bcf8 <net_if_ipv6_router_find_default>:
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bcf8:	2300      	movs	r3, #0
   1bcfa:	2b00      	cmp	r3, #0
   1bcfc:	dd01      	ble.n	1bd02 <net_if_ipv6_router_find_default+0xa>
	return NULL;
   1bcfe:	2000      	movs	r0, #0
}
   1bd00:	4770      	bx	lr
		if (!routers[i].is_used ||
   1bd02:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   1bd06:	0091      	lsls	r1, r2, #2
   1bd08:	4a0e      	ldr	r2, [pc, #56]	; (1bd44 <net_if_ipv6_router_find_default+0x4c>)
   1bd0a:	440a      	add	r2, r1
   1bd0c:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
   1bd10:	b14a      	cbz	r2, 1bd26 <net_if_ipv6_router_find_default+0x2e>
		    !routers[i].is_default ||
   1bd12:	4a0c      	ldr	r2, [pc, #48]	; (1bd44 <net_if_ipv6_router_find_default+0x4c>)
   1bd14:	440a      	add	r2, r1
   1bd16:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
		if (!routers[i].is_used ||
   1bd1a:	b122      	cbz	r2, 1bd26 <net_if_ipv6_router_find_default+0x2e>
		    routers[i].address.family != AF_INET6) {
   1bd1c:	4a09      	ldr	r2, [pc, #36]	; (1bd44 <net_if_ipv6_router_find_default+0x4c>)
   1bd1e:	440a      	add	r2, r1
   1bd20:	8d12      	ldrh	r2, [r2, #40]	; 0x28
		    !routers[i].is_default ||
   1bd22:	2a0a      	cmp	r2, #10
   1bd24:	d001      	beq.n	1bd2a <net_if_ipv6_router_find_default+0x32>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bd26:	3301      	adds	r3, #1
   1bd28:	e7e7      	b.n	1bcfa <net_if_ipv6_router_find_default+0x2>
		if (iface && iface != routers[i].iface) {
   1bd2a:	b120      	cbz	r0, 1bd36 <net_if_ipv6_router_find_default+0x3e>
   1bd2c:	4a05      	ldr	r2, [pc, #20]	; (1bd44 <net_if_ipv6_router_find_default+0x4c>)
   1bd2e:	440a      	add	r2, r1
   1bd30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   1bd32:	4290      	cmp	r0, r2
   1bd34:	d1f7      	bne.n	1bd26 <net_if_ipv6_router_find_default+0x2e>
		return &routers[i];
   1bd36:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1bd3a:	009a      	lsls	r2, r3, #2
   1bd3c:	4801      	ldr	r0, [pc, #4]	; (1bd44 <net_if_ipv6_router_find_default+0x4c>)
   1bd3e:	4410      	add	r0, r2
   1bd40:	4770      	bx	lr
   1bd42:	bf00      	nop
   1bd44:	20001c64 	.word	0x20001c64

0001bd48 <net_if_ipv6_router_update_lifetime>:
}

void net_if_ipv6_router_update_lifetime(struct net_if_router *router,
					u32_t lifetime)
{
   1bd48:	b508      	push	{r3, lr}
   1bd4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bd4e:	fb02 f201 	mul.w	r2, r2, r1
   1bd52:	4601      	mov	r1, r0
   1bd54:	4801      	ldr	r0, [pc, #4]	; (1bd5c <net_if_ipv6_router_update_lifetime+0x14>)
   1bd56:	f00e f975 	bl	2a044 <k_delayed_work_submit_to_queue>
   1bd5a:	bd08      	pop	{r3, pc}
   1bd5c:	20002c78 	.word	0x20002c78

0001bd60 <net_if_ipv6_router_add>:
}

struct net_if_router *net_if_ipv6_router_add(struct net_if *iface,
					     struct in6_addr *addr,
					     u16_t lifetime)
{
   1bd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd64:	b084      	sub	sp, #16
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bd66:	2300      	movs	r3, #0
   1bd68:	2b00      	cmp	r3, #0
   1bd6a:	dd04      	ble.n	1bd76 <net_if_ipv6_router_add+0x16>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);

		return &routers[i];
	}

	return NULL;
   1bd6c:	2400      	movs	r4, #0
}
   1bd6e:	4620      	mov	r0, r4
   1bd70:	b004      	add	sp, #16
   1bd72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (routers[i].is_used) {
   1bd76:	eb03 1403 	add.w	r4, r3, r3, lsl #4
   1bd7a:	00a5      	lsls	r5, r4, #2
   1bd7c:	4c20      	ldr	r4, [pc, #128]	; (1be00 <net_if_ipv6_router_add+0xa0>)
   1bd7e:	442c      	add	r4, r5
   1bd80:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
   1bd84:	b10c      	cbz	r4, 1bd8a <net_if_ipv6_router_add+0x2a>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bd86:	3301      	adds	r3, #1
   1bd88:	e7ee      	b.n	1bd68 <net_if_ipv6_router_add+0x8>
   1bd8a:	4616      	mov	r6, r2
   1bd8c:	460f      	mov	r7, r1
   1bd8e:	4680      	mov	r8, r0
		net_if_router_init(&routers[i], iface, addr, lifetime);
   1bd90:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1bd94:	009a      	lsls	r2, r3, #2
   1bd96:	4c1a      	ldr	r4, [pc, #104]	; (1be00 <net_if_ipv6_router_add+0xa0>)
   1bd98:	4414      	add	r4, r2
	router->is_used = true;
   1bd9a:	2301      	movs	r3, #1
   1bd9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	router->iface = iface;
   1bda0:	63e0      	str	r0, [r4, #60]	; 0x3c
	router->address.family = AF_INET6;
   1bda2:	230a      	movs	r3, #10
   1bda4:	8523      	strh	r3, [r4, #40]	; 0x28
	net_ipaddr_copy(&router->address.in6_addr, addr);
   1bda6:	466d      	mov	r5, sp
   1bda8:	6808      	ldr	r0, [r1, #0]
   1bdaa:	6849      	ldr	r1, [r1, #4]
   1bdac:	68ba      	ldr	r2, [r7, #8]
   1bdae:	68fb      	ldr	r3, [r7, #12]
   1bdb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1bdb2:	466d      	mov	r5, sp
   1bdb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1bdb6:	62e0      	str	r0, [r4, #44]	; 0x2c
   1bdb8:	6321      	str	r1, [r4, #48]	; 0x30
   1bdba:	6362      	str	r2, [r4, #52]	; 0x34
   1bdbc:	63a3      	str	r3, [r4, #56]	; 0x38
	if (lifetime) {
   1bdbe:	b966      	cbnz	r6, 1bdda <net_if_ipv6_router_add+0x7a>
		router->is_default = false;
   1bdc0:	2300      	movs	r3, #0
   1bdc2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = true;
   1bdc6:	2301      	movs	r3, #1
   1bdc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1bdcc:	2300      	movs	r3, #0
   1bdce:	461a      	mov	r2, r3
   1bdd0:	4641      	mov	r1, r8
   1bdd2:	480c      	ldr	r0, [pc, #48]	; (1be04 <net_if_ipv6_router_add+0xa4>)
   1bdd4:	f007 f984 	bl	230e0 <net_mgmt_event_notify_with_info>
		return &routers[i];
   1bdd8:	e7c9      	b.n	1bd6e <net_if_ipv6_router_add+0xe>
		router->is_default = true;
   1bdda:	2301      	movs	r3, #1
   1bddc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = false;
   1bde0:	2300      	movs	r3, #0
   1bde2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1bde6:	4908      	ldr	r1, [pc, #32]	; (1be08 <net_if_ipv6_router_add+0xa8>)
   1bde8:	4620      	mov	r0, r4
   1bdea:	f00e f8b3 	bl	29f54 <k_delayed_work_init>
   1bdee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bdf2:	fb02 f206 	mul.w	r2, r2, r6
   1bdf6:	4621      	mov	r1, r4
   1bdf8:	4804      	ldr	r0, [pc, #16]	; (1be0c <net_if_ipv6_router_add+0xac>)
   1bdfa:	f00e f923 	bl	2a044 <k_delayed_work_submit_to_queue>
   1bdfe:	e7e5      	b.n	1bdcc <net_if_ipv6_router_add+0x6c>
   1be00:	20001c64 	.word	0x20001c64
   1be04:	f0600009 	.word	0xf0600009
   1be08:	0001b1dd 	.word	0x0001b1dd
   1be0c:	20002c78 	.word	0x20002c78

0001be10 <net_if_ipv6_router_rm>:

bool net_if_ipv6_router_rm(struct net_if_router *router)
{
   1be10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1be14:	2400      	movs	r4, #0
   1be16:	2c00      	cmp	r4, #0
   1be18:	dd03      	ble.n	1be22 <net_if_ipv6_router_rm+0x12>
			i, net_sprint_ipv6_addr(&routers[i].address.in6_addr));

		return true;
	}

	return false;
   1be1a:	2500      	movs	r5, #0
}
   1be1c:	4628      	mov	r0, r5
   1be1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!routers[i].is_used) {
   1be22:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1be26:	009a      	lsls	r2, r3, #2
   1be28:	4b0d      	ldr	r3, [pc, #52]	; (1be60 <net_if_ipv6_router_rm+0x50>)
   1be2a:	4413      	add	r3, r2
   1be2c:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
   1be30:	b11d      	cbz	r5, 1be3a <net_if_ipv6_router_rm+0x2a>
		if (&routers[i] != router) {
   1be32:	4b0b      	ldr	r3, [pc, #44]	; (1be60 <net_if_ipv6_router_rm+0x50>)
   1be34:	4413      	add	r3, r2
   1be36:	4283      	cmp	r3, r0
   1be38:	d001      	beq.n	1be3e <net_if_ipv6_router_rm+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1be3a:	3401      	adds	r4, #1
   1be3c:	e7eb      	b.n	1be16 <net_if_ipv6_router_rm+0x6>
		k_delayed_work_cancel(&routers[i].lifetime);
   1be3e:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1be60 <net_if_ipv6_router_rm+0x50>
   1be42:	4617      	mov	r7, r2
   1be44:	4447      	add	r7, r8
   1be46:	4638      	mov	r0, r7
   1be48:	f00e f8a2 	bl	29f90 <k_delayed_work_cancel>
		routers[i].is_used = false;
   1be4c:	2200      	movs	r2, #0
   1be4e:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
   1be52:	4613      	mov	r3, r2
   1be54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1be56:	4803      	ldr	r0, [pc, #12]	; (1be64 <net_if_ipv6_router_rm+0x54>)
   1be58:	f007 f942 	bl	230e0 <net_mgmt_event_notify_with_info>
		return true;
   1be5c:	e7de      	b.n	1be1c <net_if_ipv6_router_rm+0xc>
   1be5e:	bf00      	nop
   1be60:	20001c64 	.word	0x20001c64
   1be64:	f060000a 	.word	0xf060000a

0001be68 <net_if_ipv6_get_ll>:

struct in6_addr *net_if_ipv6_get_ll(struct net_if *iface,
				    enum net_addr_state addr_state)
{
   1be68:	b430      	push	{r4, r5}
   1be6a:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1be6c:	2300      	movs	r3, #0
   1be6e:	e006      	b.n	1be7e <net_if_ipv6_get_ll+0x16>
		if (!iface->ipv6.unicast[i].is_used ||
		    (addr_state != NET_ADDR_ANY_STATE &&
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1be70:	226c      	movs	r2, #108	; 0x6c
   1be72:	fb02 4203 	mla	r2, r2, r3, r4
   1be76:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1be78:	2a0a      	cmp	r2, #10
   1be7a:	d014      	beq.n	1bea6 <net_if_ipv6_get_ll+0x3e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1be7c:	3301      	adds	r3, #1
   1be7e:	2b02      	cmp	r3, #2
   1be80:	dc1d      	bgt.n	1bebe <net_if_ipv6_get_ll+0x56>
		if (!iface->ipv6.unicast[i].is_used ||
   1be82:	226c      	movs	r2, #108	; 0x6c
   1be84:	fb02 4203 	mla	r2, r2, r3, r4
   1be88:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1be8c:	2a00      	cmp	r2, #0
   1be8e:	d0f5      	beq.n	1be7c <net_if_ipv6_get_ll+0x14>
   1be90:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1be94:	d0ec      	beq.n	1be70 <net_if_ipv6_get_ll+0x8>
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1be96:	226c      	movs	r2, #108	; 0x6c
   1be98:	fb02 4203 	mla	r2, r2, r3, r4
   1be9c:	f992 2091 	ldrsb.w	r2, [r2, #145]	; 0x91
		    (addr_state != NET_ADDR_ANY_STATE &&
   1bea0:	4291      	cmp	r1, r2
   1bea2:	d1eb      	bne.n	1be7c <net_if_ipv6_get_ll+0x14>
   1bea4:	e7e4      	b.n	1be70 <net_if_ipv6_get_ll+0x8>
			continue;
		}
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   1bea6:	206c      	movs	r0, #108	; 0x6c
   1bea8:	fb00 f003 	mul.w	r0, r0, r3
   1beac:	3020      	adds	r0, #32
   1beae:	4420      	add	r0, r4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1beb0:	f830 5f10 	ldrh.w	r5, [r0, #16]!
   1beb4:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1beb8:	4295      	cmp	r5, r2
   1beba:	d1df      	bne.n	1be7c <net_if_ipv6_get_ll+0x14>
   1bebc:	e000      	b.n	1bec0 <net_if_ipv6_get_ll+0x58>
			return &iface->ipv6.unicast[i].address.in6_addr;
		}
	}

	return NULL;
   1bebe:	2000      	movs	r0, #0
}
   1bec0:	bc30      	pop	{r4, r5}
   1bec2:	4770      	bx	lr

0001bec4 <net_if_ipv6_select_src_addr>:
	return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   1bec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bec8:	4607      	mov	r7, r0
   1beca:	880a      	ldrh	r2, [r1, #0]
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1becc:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1bed0:	429a      	cmp	r2, r3
   1bed2:	f000 80d7 	beq.w	1c084 <net_if_ipv6_select_src_addr+0x1c0>
	return addr->s6_addr[0] == 0xFF;
   1bed6:	780b      	ldrb	r3, [r1, #0]
   1bed8:	2bff      	cmp	r3, #255	; 0xff
   1beda:	d004      	beq.n	1bee6 <net_if_ipv6_select_src_addr+0x22>
	u8_t best_match = 0;
   1bedc:	f04f 0900 	mov.w	r9, #0
   1bee0:	4e74      	ldr	r6, [pc, #464]	; (1c0b4 <net_if_ipv6_select_src_addr+0x1f0>)
   1bee2:	46c8      	mov	r8, r9
   1bee4:	e05b      	b.n	1bf9e <net_if_ipv6_select_src_addr+0xda>
   1bee6:	4c73      	ldr	r4, [pc, #460]	; (1c0b4 <net_if_ipv6_select_src_addr+0x1f0>)
   1bee8:	e0c0      	b.n	1c06c <net_if_ipv6_select_src_addr+0x1a8>
	    addr->address.family == AF_INET6 &&
   1beea:	246c      	movs	r4, #108	; 0x6c
   1beec:	fb04 640e 	mla	r4, r4, lr, r6
   1bef0:	8da4      	ldrh	r4, [r4, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1bef2:	2c0a      	cmp	r4, #10
   1bef4:	d01e      	beq.n	1bf34 <net_if_ipv6_select_src_addr+0x70>
	return false;
   1bef6:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bef8:	bb8b      	cbnz	r3, 1bf5e <net_if_ipv6_select_src_addr+0x9a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1befa:	f10e 0e01 	add.w	lr, lr, #1
   1befe:	fa5f fe8e 	uxtb.w	lr, lr
   1bf02:	f1be 0f02 	cmp.w	lr, #2
   1bf06:	d846      	bhi.n	1bf96 <net_if_ipv6_select_src_addr+0xd2>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bf08:	46f4      	mov	ip, lr
   1bf0a:	236c      	movs	r3, #108	; 0x6c
   1bf0c:	fb03 f30e 	mul.w	r3, r3, lr
   1bf10:	f103 0220 	add.w	r2, r3, #32
   1bf14:	4432      	add	r2, r6
   1bf16:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1bf18:	4433      	add	r3, r6
   1bf1a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1bf1e:	2b00      	cmp	r3, #0
   1bf20:	d0ea      	beq.n	1bef8 <net_if_ipv6_select_src_addr+0x34>
   1bf22:	246c      	movs	r4, #108	; 0x6c
   1bf24:	fb04 640e 	mla	r4, r4, lr, r6
   1bf28:	f994 4091 	ldrsb.w	r4, [r4, #145]	; 0x91
   1bf2c:	2c01      	cmp	r4, #1
   1bf2e:	d0dc      	beq.n	1beea <net_if_ipv6_select_src_addr+0x26>
	return false;
   1bf30:	2300      	movs	r3, #0
   1bf32:	e7e1      	b.n	1bef8 <net_if_ipv6_select_src_addr+0x34>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1bf34:	8894      	ldrh	r4, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1bf36:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1bf3a:	4294      	cmp	r4, r2
   1bf3c:	d1dc      	bne.n	1bef8 <net_if_ipv6_select_src_addr+0x34>
	return false;
   1bf3e:	2300      	movs	r3, #0
   1bf40:	e7da      	b.n	1bef8 <net_if_ipv6_select_src_addr+0x34>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1bf42:	4055      	eors	r5, r2
			for (k = 0; k < 8; k++) {
   1bf44:	2300      	movs	r3, #0
   1bf46:	2b07      	cmp	r3, #7
   1bf48:	d81b      	bhi.n	1bf82 <net_if_ipv6_select_src_addr+0xbe>
				if (!(xor & 0x80)) {
   1bf4a:	f015 0f80 	tst.w	r5, #128	; 0x80
   1bf4e:	d118      	bne.n	1bf82 <net_if_ipv6_select_src_addr+0xbe>
					len++;
   1bf50:	3401      	adds	r4, #1
   1bf52:	b2e4      	uxtb	r4, r4
					xor <<= 1;
   1bf54:	006d      	lsls	r5, r5, #1
   1bf56:	b2ed      	uxtb	r5, r5
			for (k = 0; k < 8; k++) {
   1bf58:	3301      	adds	r3, #1
   1bf5a:	b2db      	uxtb	r3, r3
   1bf5c:	e7f3      	b.n	1bf46 <net_if_ipv6_select_src_addr+0x82>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bf5e:	2400      	movs	r4, #0
   1bf60:	4623      	mov	r3, r4
	for (j = 0; j < 16; j++) {
   1bf62:	2b0f      	cmp	r3, #15
   1bf64:	d80d      	bhi.n	1bf82 <net_if_ipv6_select_src_addr+0xbe>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1bf66:	5ccd      	ldrb	r5, [r1, r3]
   1bf68:	226c      	movs	r2, #108	; 0x6c
   1bf6a:	fb02 620c 	mla	r2, r2, ip, r6
   1bf6e:	441a      	add	r2, r3
   1bf70:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1bf74:	4295      	cmp	r5, r2
   1bf76:	d1e4      	bne.n	1bf42 <net_if_ipv6_select_src_addr+0x7e>
			len += 8;
   1bf78:	3408      	adds	r4, #8
   1bf7a:	b2e4      	uxtb	r4, r4
	for (j = 0; j < 16; j++) {
   1bf7c:	3301      	adds	r3, #1
   1bf7e:	b2db      	uxtb	r3, r3
   1bf80:	e7ef      	b.n	1bf62 <net_if_ipv6_select_src_addr+0x9e>
		if (len >= *best_so_far) {
   1bf82:	454c      	cmp	r4, r9
   1bf84:	d3b9      	bcc.n	1befa <net_if_ipv6_select_src_addr+0x36>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1bf86:	206c      	movs	r0, #108	; 0x6c
   1bf88:	fb00 f00c 	mul.w	r0, r0, ip
   1bf8c:	3020      	adds	r0, #32
   1bf8e:	4430      	add	r0, r6
   1bf90:	3010      	adds	r0, #16
			*best_so_far = len;
   1bf92:	46a1      	mov	r9, r4
   1bf94:	e7b1      	b.n	1befa <net_if_ipv6_select_src_addr+0x36>
		     iface++) {
			struct in6_addr *addr;

			addr = net_if_ipv6_get_best_match(iface, dst,
							  &best_match);
			if (addr) {
   1bf96:	b150      	cbz	r0, 1bfae <net_if_ipv6_select_src_addr+0xea>
		     iface++) {
   1bf98:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
   1bf9c:	4680      	mov	r8, r0
		for (iface = __net_if_start;
   1bf9e:	b947      	cbnz	r7, 1bfb2 <net_if_ipv6_select_src_addr+0xee>
		     !dst_iface && iface != __net_if_end;
   1bfa0:	4b45      	ldr	r3, [pc, #276]	; (1c0b8 <net_if_ipv6_select_src_addr+0x1f4>)
   1bfa2:	429e      	cmp	r6, r3
   1bfa4:	d005      	beq.n	1bfb2 <net_if_ipv6_select_src_addr+0xee>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bfa6:	f04f 0e00 	mov.w	lr, #0
	struct in6_addr *src = NULL;
   1bfaa:	4670      	mov	r0, lr
   1bfac:	e7a9      	b.n	1bf02 <net_if_ipv6_select_src_addr+0x3e>
			if (addr) {
   1bfae:	4640      	mov	r0, r8
   1bfb0:	e7f2      	b.n	1bf98 <net_if_ipv6_select_src_addr+0xd4>
				src = addr;
			}
		}

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
   1bfb2:	2f00      	cmp	r7, #0
   1bfb4:	d073      	beq.n	1c09e <net_if_ipv6_select_src_addr+0x1da>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bfb6:	2500      	movs	r5, #0
	struct in6_addr *src = NULL;
   1bfb8:	46a8      	mov	r8, r5
   1bfba:	e009      	b.n	1bfd0 <net_if_ipv6_select_src_addr+0x10c>
	    addr->address.family == AF_INET6 &&
   1bfbc:	206c      	movs	r0, #108	; 0x6c
   1bfbe:	fb00 7005 	mla	r0, r0, r5, r7
   1bfc2:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1bfc4:	280a      	cmp	r0, #10
   1bfc6:	d01b      	beq.n	1c000 <net_if_ipv6_select_src_addr+0x13c>
	return false;
   1bfc8:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bfca:	bb73      	cbnz	r3, 1c02a <net_if_ipv6_select_src_addr+0x166>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bfcc:	3501      	adds	r5, #1
   1bfce:	b2ed      	uxtb	r5, r5
   1bfd0:	2d02      	cmp	r5, #2
   1bfd2:	d864      	bhi.n	1c09e <net_if_ipv6_select_src_addr+0x1da>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bfd4:	462e      	mov	r6, r5
   1bfd6:	236c      	movs	r3, #108	; 0x6c
   1bfd8:	fb03 f305 	mul.w	r3, r3, r5
   1bfdc:	f103 0220 	add.w	r2, r3, #32
   1bfe0:	443a      	add	r2, r7
   1bfe2:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1bfe4:	443b      	add	r3, r7
   1bfe6:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1bfea:	2b00      	cmp	r3, #0
   1bfec:	d0ed      	beq.n	1bfca <net_if_ipv6_select_src_addr+0x106>
   1bfee:	206c      	movs	r0, #108	; 0x6c
   1bff0:	fb00 7005 	mla	r0, r0, r5, r7
   1bff4:	f990 0091 	ldrsb.w	r0, [r0, #145]	; 0x91
   1bff8:	2801      	cmp	r0, #1
   1bffa:	d0df      	beq.n	1bfbc <net_if_ipv6_select_src_addr+0xf8>
	return false;
   1bffc:	2300      	movs	r3, #0
   1bffe:	e7e4      	b.n	1bfca <net_if_ipv6_select_src_addr+0x106>
   1c000:	8890      	ldrh	r0, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1c002:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1c006:	4290      	cmp	r0, r2
   1c008:	d1df      	bne.n	1bfca <net_if_ipv6_select_src_addr+0x106>
	return false;
   1c00a:	2300      	movs	r3, #0
   1c00c:	e7dd      	b.n	1bfca <net_if_ipv6_select_src_addr+0x106>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1c00e:	4054      	eors	r4, r2
			for (k = 0; k < 8; k++) {
   1c010:	2300      	movs	r3, #0
   1c012:	2b07      	cmp	r3, #7
   1c014:	d81b      	bhi.n	1c04e <net_if_ipv6_select_src_addr+0x18a>
				if (!(xor & 0x80)) {
   1c016:	f014 0f80 	tst.w	r4, #128	; 0x80
   1c01a:	d118      	bne.n	1c04e <net_if_ipv6_select_src_addr+0x18a>
					len++;
   1c01c:	3001      	adds	r0, #1
   1c01e:	b2c0      	uxtb	r0, r0
					xor <<= 1;
   1c020:	0064      	lsls	r4, r4, #1
   1c022:	b2e4      	uxtb	r4, r4
			for (k = 0; k < 8; k++) {
   1c024:	3301      	adds	r3, #1
   1c026:	b2db      	uxtb	r3, r3
   1c028:	e7f3      	b.n	1c012 <net_if_ipv6_select_src_addr+0x14e>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1c02a:	2000      	movs	r0, #0
   1c02c:	4603      	mov	r3, r0
	for (j = 0; j < 16; j++) {
   1c02e:	2b0f      	cmp	r3, #15
   1c030:	d80d      	bhi.n	1c04e <net_if_ipv6_select_src_addr+0x18a>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1c032:	5ccc      	ldrb	r4, [r1, r3]
   1c034:	226c      	movs	r2, #108	; 0x6c
   1c036:	fb02 7206 	mla	r2, r2, r6, r7
   1c03a:	441a      	add	r2, r3
   1c03c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1c040:	4294      	cmp	r4, r2
   1c042:	d1e4      	bne.n	1c00e <net_if_ipv6_select_src_addr+0x14a>
			len += 8;
   1c044:	3008      	adds	r0, #8
   1c046:	b2c0      	uxtb	r0, r0
	for (j = 0; j < 16; j++) {
   1c048:	3301      	adds	r3, #1
   1c04a:	b2db      	uxtb	r3, r3
   1c04c:	e7ef      	b.n	1c02e <net_if_ipv6_select_src_addr+0x16a>
		if (len >= *best_so_far) {
   1c04e:	4548      	cmp	r0, r9
   1c050:	d3bc      	bcc.n	1bfcc <net_if_ipv6_select_src_addr+0x108>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1c052:	f04f 086c 	mov.w	r8, #108	; 0x6c
   1c056:	fb08 f806 	mul.w	r8, r8, r6
   1c05a:	f108 0820 	add.w	r8, r8, #32
   1c05e:	44b8      	add	r8, r7
   1c060:	f108 0810 	add.w	r8, r8, #16
			*best_so_far = len;
   1c064:	4681      	mov	r9, r0
   1c066:	e7b1      	b.n	1bfcc <net_if_ipv6_select_src_addr+0x108>
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
		     iface++) {
   1c068:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
		for (iface = __net_if_start;
   1c06c:	b97f      	cbnz	r7, 1c08e <net_if_ipv6_select_src_addr+0x1ca>
		     !dst_iface && iface != __net_if_end;
   1c06e:	4b12      	ldr	r3, [pc, #72]	; (1c0b8 <net_if_ipv6_select_src_addr+0x1f4>)
   1c070:	429c      	cmp	r4, r3
   1c072:	d009      	beq.n	1c088 <net_if_ipv6_select_src_addr+0x1c4>
			struct in6_addr *addr;

			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   1c074:	2101      	movs	r1, #1
   1c076:	4620      	mov	r0, r4
   1c078:	f7ff fef6 	bl	1be68 <net_if_ipv6_get_ll>
			if (addr) {
   1c07c:	4680      	mov	r8, r0
   1c07e:	2800      	cmp	r0, #0
   1c080:	d0f2      	beq.n	1c068 <net_if_ipv6_select_src_addr+0x1a4>
   1c082:	e006      	b.n	1c092 <net_if_ipv6_select_src_addr+0x1ce>
   1c084:	4c0b      	ldr	r4, [pc, #44]	; (1c0b4 <net_if_ipv6_select_src_addr+0x1f0>)
   1c086:	e7f1      	b.n	1c06c <net_if_ipv6_select_src_addr+0x1a8>
	struct in6_addr *src = NULL;
   1c088:	f04f 0800 	mov.w	r8, #0
   1c08c:	e001      	b.n	1c092 <net_if_ipv6_select_src_addr+0x1ce>
   1c08e:	f04f 0800 	mov.w	r8, #0
				src = addr;
				break;
			}
		}

		if (dst_iface) {
   1c092:	b127      	cbz	r7, 1c09e <net_if_ipv6_select_src_addr+0x1da>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1c094:	2101      	movs	r1, #1
   1c096:	4638      	mov	r0, r7
   1c098:	f7ff fee6 	bl	1be68 <net_if_ipv6_get_ll>
   1c09c:	4680      	mov	r8, r0
		}
	}

	if (!src) {
   1c09e:	f1b8 0f00 	cmp.w	r8, #0
   1c0a2:	d002      	beq.n	1c0aa <net_if_ipv6_select_src_addr+0x1e6>
		return net_ipv6_unspecified_address();
	}

	return src;
   1c0a4:	4640      	mov	r0, r8
}
   1c0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return net_ipv6_unspecified_address();
   1c0aa:	f003 fd67 	bl	1fb7c <net_ipv6_unspecified_address>
   1c0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c0b2:	bf00      	nop
   1c0b4:	2000d2c0 	.word	0x2000d2c0
   1c0b8:	2000d560 	.word	0x2000d560

0001c0bc <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if *iface)
{
   1c0bc:	b510      	push	{r4, lr}
   1c0be:	4604      	mov	r4, r0
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
		sys_rand32_get() %
   1c0c0:	f7e5 ffe0 	bl	2084 <sys_rand32_get>
		(MAX_RANDOM_FACTOR * iface->ipv6.base_reachable_time -
   1c0c4:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
   1c0c8:	fbb0 f2f3 	udiv	r2, r0, r3
		 MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time);
}
   1c0cc:	fb03 0012 	mls	r0, r3, r2, r0
   1c0d0:	bd10      	pop	{r4, pc}
	...

0001c0d4 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   1c0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c0d6:	4605      	mov	r5, r0
   1c0d8:	460e      	mov	r6, r1
   1c0da:	4617      	mov	r7, r2
	return list->head;
   1c0dc:	4b11      	ldr	r3, [pc, #68]	; (1c124 <net_if_call_link_cb+0x50>)
   1c0de:	681b      	ldr	r3, [r3, #0]
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1c0e0:	b11b      	cbz	r3, 1c0ea <net_if_call_link_cb+0x16>
   1c0e2:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c0e4:	b143      	cbz	r3, 1c0f8 <net_if_call_link_cb+0x24>
	return node->next;
   1c0e6:	681c      	ldr	r4, [r3, #0]
   1c0e8:	e006      	b.n	1c0f8 <net_if_call_link_cb+0x24>
   1c0ea:	461c      	mov	r4, r3
   1c0ec:	e004      	b.n	1c0f8 <net_if_call_link_cb+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c0ee:	4623      	mov	r3, r4
   1c0f0:	e00e      	b.n	1c110 <net_if_call_link_cb+0x3c>
   1c0f2:	4622      	mov	r2, r4
   1c0f4:	4623      	mov	r3, r4
   1c0f6:	4614      	mov	r4, r2
   1c0f8:	b193      	cbz	r3, 1c120 <net_if_call_link_cb+0x4c>
		link->cb(iface, lladdr, status);
   1c0fa:	685b      	ldr	r3, [r3, #4]
   1c0fc:	463a      	mov	r2, r7
   1c0fe:	4631      	mov	r1, r6
   1c100:	4628      	mov	r0, r5
   1c102:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1c104:	2c00      	cmp	r4, #0
   1c106:	d0f4      	beq.n	1c0f2 <net_if_call_link_cb+0x1e>
   1c108:	4622      	mov	r2, r4
   1c10a:	2c00      	cmp	r4, #0
   1c10c:	d0ef      	beq.n	1c0ee <net_if_call_link_cb+0x1a>
	return node->next;
   1c10e:	6823      	ldr	r3, [r4, #0]
   1c110:	b113      	cbz	r3, 1c118 <net_if_call_link_cb+0x44>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c112:	b11a      	cbz	r2, 1c11c <net_if_call_link_cb+0x48>
	return node->next;
   1c114:	6822      	ldr	r2, [r4, #0]
   1c116:	e7ed      	b.n	1c0f4 <net_if_call_link_cb+0x20>
   1c118:	2200      	movs	r2, #0
   1c11a:	e7eb      	b.n	1c0f4 <net_if_call_link_cb+0x20>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c11c:	2200      	movs	r2, #0
   1c11e:	e7e9      	b.n	1c0f4 <net_if_call_link_cb+0x20>
	}
}
   1c120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c122:	bf00      	nop
   1c124:	20001c54 	.word	0x20001c54

0001c128 <net_if_send_data>:
{
   1c128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c12c:	4606      	mov	r6, r0
   1c12e:	460c      	mov	r4, r1
	return pkt->context;
   1c130:	68cf      	ldr	r7, [r1, #12]
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_ll_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
   1c132:	f101 0928 	add.w	r9, r1, #40	; 0x28
	return pkt->token;
   1c136:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1c13a:	f3bf 8f5b 	dmb	ish
   1c13e:	68c3      	ldr	r3, [r0, #12]
   1c140:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c144:	f013 0f01 	tst.w	r3, #1
   1c148:	d10a      	bne.n	1c160 <net_if_send_data+0x38>
		status = -ENETDOWN;
   1c14a:	f06f 0872 	mvn.w	r8, #114	; 0x72
		verdict = NET_DROP;
   1c14e:	2502      	movs	r5, #2
	if (context && verdict == NET_DROP) {
   1c150:	b10f      	cbz	r7, 1c156 <net_if_send_data+0x2e>
   1c152:	2d02      	cmp	r5, #2
   1c154:	d02e      	beq.n	1c1b4 <net_if_send_data+0x8c>
	if (verdict == NET_DROP && dst->addr) {
   1c156:	2d02      	cmp	r5, #2
   1c158:	d050      	beq.n	1c1fc <net_if_send_data+0xd4>
}
   1c15a:	4628      	mov	r0, r5
   1c15c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c160:	f3bf 8f5b 	dmb	ish
   1c164:	68c3      	ldr	r3, [r0, #12]
   1c166:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1c16a:	f013 0f02 	tst.w	r3, #2
   1c16e:	d101      	bne.n	1c174 <net_if_send_data+0x4c>
	    !net_pkt_ll_src(pkt)->addr) {
   1c170:	6a0b      	ldr	r3, [r1, #32]
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1c172:	b173      	cbz	r3, 1c192 <net_if_send_data+0x6a>
	return pkt->family;
   1c174:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1c178:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1c17c:	2b0a      	cmp	r3, #10
   1c17e:	d00f      	beq.n	1c1a0 <net_if_send_data+0x78>
   1c180:	4621      	mov	r1, r4
	verdict = iface->l2->send(iface, pkt);
   1c182:	6873      	ldr	r3, [r6, #4]
   1c184:	685b      	ldr	r3, [r3, #4]
   1c186:	4630      	mov	r0, r6
   1c188:	4798      	blx	r3
   1c18a:	4605      	mov	r5, r0
	int status = -EIO;
   1c18c:	f06f 0804 	mvn.w	r8, #4
   1c190:	e7de      	b.n	1c150 <net_if_send_data+0x28>
	return net_if_get_link_addr(pkt->iface);
   1c192:	694b      	ldr	r3, [r1, #20]
		net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1c194:	691a      	ldr	r2, [r3, #16]
   1c196:	620a      	str	r2, [r1, #32]
		net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1c198:	7d1b      	ldrb	r3, [r3, #20]
   1c19a:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
   1c19e:	e7e9      	b.n	1c174 <net_if_send_data+0x4c>
		pkt = net_ipv6_prepare_for_send(pkt);
   1c1a0:	4620      	mov	r0, r4
   1c1a2:	f005 f9fb 	bl	2159c <net_ipv6_prepare_for_send>
		if (!pkt) {
   1c1a6:	4601      	mov	r1, r0
   1c1a8:	2800      	cmp	r0, #0
   1c1aa:	d1ea      	bne.n	1c182 <net_if_send_data+0x5a>
	int status = -EIO;
   1c1ac:	f06f 0804 	mvn.w	r8, #4
			verdict = NET_CONTINUE;
   1c1b0:	2501      	movs	r5, #1
   1c1b2:	e7cd      	b.n	1c150 <net_if_send_data+0x28>
	if (!context) {
   1c1b4:	2f00      	cmp	r7, #0
   1c1b6:	d0ce      	beq.n	1c156 <net_if_send_data+0x2e>
	if (context->send_cb) {
   1c1b8:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
   1c1bc:	f1bb 0f00 	cmp.w	fp, #0
   1c1c0:	d004      	beq.n	1c1cc <net_if_send_data+0xa4>
		context->send_cb(context, status, token, context->user_data);
   1c1c2:	683b      	ldr	r3, [r7, #0]
   1c1c4:	4652      	mov	r2, sl
   1c1c6:	4641      	mov	r1, r8
   1c1c8:	4638      	mov	r0, r7
   1c1ca:	47d8      	blx	fp
static inline
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_PROTO) {
   1c1cc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1c1d0:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c1d4:	d009      	beq.n	1c1ea <net_if_send_data+0xc2>
		return IPPROTO_TCP;
   1c1d6:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c1d8:	2b11      	cmp	r3, #17
   1c1da:	d008      	beq.n	1c1ee <net_if_send_data+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c1dc:	2b06      	cmp	r3, #6
   1c1de:	d1ba      	bne.n	1c156 <net_if_send_data+0x2e>
	net_stats.tcp.resent += bytes;
}

static inline void net_stats_update_tcp_seg_sent(void)
{
	net_stats.tcp.sent++;
   1c1e0:	4a0b      	ldr	r2, [pc, #44]	; (1c210 <net_if_send_data+0xe8>)
   1c1e2:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1c1e4:	3301      	adds	r3, #1
   1c1e6:	6593      	str	r3, [r2, #88]	; 0x58
   1c1e8:	e7b5      	b.n	1c156 <net_if_send_data+0x2e>
	}

	return IPPROTO_UDP;
   1c1ea:	2311      	movs	r3, #17
   1c1ec:	e7f4      	b.n	1c1d8 <net_if_send_data+0xb0>
	net_stats.udp.sent++;
   1c1ee:	4a08      	ldr	r2, [pc, #32]	; (1c210 <net_if_send_data+0xe8>)
   1c1f0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1c1f4:	3301      	adds	r3, #1
   1c1f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1c1fa:	e7ac      	b.n	1c156 <net_if_send_data+0x2e>
	if (verdict == NET_DROP && dst->addr) {
   1c1fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c1fe:	2b00      	cmp	r3, #0
   1c200:	d0ab      	beq.n	1c15a <net_if_send_data+0x32>
		net_if_call_link_cb(iface, dst, status);
   1c202:	4642      	mov	r2, r8
   1c204:	4649      	mov	r1, r9
   1c206:	4630      	mov	r0, r6
   1c208:	f7ff ff64 	bl	1c0d4 <net_if_call_link_cb>
   1c20c:	e7a5      	b.n	1c15a <net_if_send_data+0x32>
   1c20e:	bf00      	nop
   1c210:	20002b58 	.word	0x20002b58

0001c214 <net_if_tx>:
{
   1c214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c218:	4606      	mov	r6, r0
	const struct net_if_api *api = iface->dev->driver_api;
   1c21a:	f850 3b18 	ldr.w	r3, [r0], #24
   1c21e:	f8d3 9004 	ldr.w	r9, [r3, #4]
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1c222:	2100      	movs	r1, #0
   1c224:	f00c fd56 	bl	28cd4 <k_queue_get>
	if (!pkt) {
   1c228:	2800      	cmp	r0, #0
   1c22a:	d062      	beq.n	1c2f2 <net_if_tx+0xde>
   1c22c:	4605      	mov	r5, r0
	return &pkt->lladdr_dst;
   1c22e:	f100 0828 	add.w	r8, r0, #40	; 0x28
	return pkt->context;
   1c232:	68c7      	ldr	r7, [r0, #12]
	return pkt->token;
   1c234:	f8d0 a010 	ldr.w	sl, [r0, #16]
   1c238:	f3bf 8f5b 	dmb	ish
   1c23c:	68f3      	ldr	r3, [r6, #12]
   1c23e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c242:	f013 0f01 	tst.w	r3, #1
   1c246:	d039      	beq.n	1c2bc <net_if_tx+0xa8>
	return net_buf_frags_len(pkt->frags);
   1c248:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1c24a:	2400      	movs	r4, #0
   1c24c:	e002      	b.n	1c254 <net_if_tx+0x40>
		bytes += buf->len;
   1c24e:	899a      	ldrh	r2, [r3, #12]
   1c250:	4414      	add	r4, r2
		buf = buf->frags;
   1c252:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c254:	2b00      	cmp	r3, #0
   1c256:	d1fa      	bne.n	1c24e <net_if_tx+0x3a>
	pkt->sent_or_eof = sent;
   1c258:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
	pkt->pkt_queued = send;
   1c25c:	f043 0301 	orr.w	r3, r3, #1
   1c260:	f36f 0341 	bfc	r3, #1, #1
   1c264:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		status = api->send(iface, pkt);
   1c268:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1c26c:	4629      	mov	r1, r5
   1c26e:	4630      	mov	r0, r6
   1c270:	4798      	blx	r3
   1c272:	4681      	mov	r9, r0
	if (status < 0) {
   1c274:	f1b9 0f00 	cmp.w	r9, #0
   1c278:	db23      	blt.n	1c2c2 <net_if_tx+0xae>
	net_stats.bytes.sent += bytes;
   1c27a:	4a21      	ldr	r2, [pc, #132]	; (1c300 <net_if_tx+0xec>)
   1c27c:	6853      	ldr	r3, [r2, #4]
   1c27e:	441c      	add	r4, r3
   1c280:	6054      	str	r4, [r2, #4]
	if (context) {
   1c282:	b18f      	cbz	r7, 1c2a8 <net_if_tx+0x94>
	if (!context) {
   1c284:	b187      	cbz	r7, 1c2a8 <net_if_tx+0x94>
	if (context->send_cb) {
   1c286:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   1c288:	b124      	cbz	r4, 1c294 <net_if_tx+0x80>
		context->send_cb(context, status, token, context->user_data);
   1c28a:	683b      	ldr	r3, [r7, #0]
   1c28c:	4652      	mov	r2, sl
   1c28e:	4649      	mov	r1, r9
   1c290:	4638      	mov	r0, r7
   1c292:	47a0      	blx	r4
	if (context->flags & NET_CONTEXT_PROTO) {
   1c294:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1c298:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c29c:	d01b      	beq.n	1c2d6 <net_if_tx+0xc2>
		return IPPROTO_TCP;
   1c29e:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c2a0:	2b11      	cmp	r3, #17
   1c2a2:	d01a      	beq.n	1c2da <net_if_tx+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c2a4:	2b06      	cmp	r3, #6
   1c2a6:	d01f      	beq.n	1c2e8 <net_if_tx+0xd4>
	if (dst->addr) {
   1c2a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c2aa:	b32b      	cbz	r3, 1c2f8 <net_if_tx+0xe4>
		net_if_call_link_cb(iface, dst, status);
   1c2ac:	464a      	mov	r2, r9
   1c2ae:	4641      	mov	r1, r8
   1c2b0:	4630      	mov	r0, r6
   1c2b2:	f7ff ff0f 	bl	1c0d4 <net_if_call_link_cb>
	return true;
   1c2b6:	2001      	movs	r0, #1
   1c2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = -ENETDOWN;
   1c2bc:	f06f 0972 	mvn.w	r9, #114	; 0x72
   1c2c0:	e7d8      	b.n	1c274 <net_if_tx+0x60>
	pkt->sent_or_eof = sent;
   1c2c2:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1c2c6:	f36f 0300 	bfc	r3, #0, #1
   1c2ca:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		net_pkt_unref(pkt);
   1c2ce:	4628      	mov	r0, r5
   1c2d0:	f001 fa93 	bl	1d7fa <net_pkt_unref>
   1c2d4:	e7d5      	b.n	1c282 <net_if_tx+0x6e>
	return IPPROTO_UDP;
   1c2d6:	2311      	movs	r3, #17
   1c2d8:	e7e2      	b.n	1c2a0 <net_if_tx+0x8c>
	net_stats.udp.sent++;
   1c2da:	4a09      	ldr	r2, [pc, #36]	; (1c300 <net_if_tx+0xec>)
   1c2dc:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1c2e0:	3301      	adds	r3, #1
   1c2e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1c2e6:	e7df      	b.n	1c2a8 <net_if_tx+0x94>
	net_stats.tcp.sent++;
   1c2e8:	4a05      	ldr	r2, [pc, #20]	; (1c300 <net_if_tx+0xec>)
   1c2ea:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1c2ec:	3301      	adds	r3, #1
   1c2ee:	6593      	str	r3, [r2, #88]	; 0x58
   1c2f0:	e7da      	b.n	1c2a8 <net_if_tx+0x94>
		return false;
   1c2f2:	2000      	movs	r0, #0
   1c2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return true;
   1c2f8:	2001      	movs	r0, #1
}
   1c2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c2fe:	bf00      	nop
   1c300:	20002b58 	.word	0x20002b58

0001c304 <net_if_flush_tx>:
	return (!list->head);
   1c304:	6983      	ldr	r3, [r0, #24]
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1c306:	b14b      	cbz	r3, 1c31c <net_if_flush_tx+0x18>
{
   1c308:	b510      	push	{r4, lr}
   1c30a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1c30c:	f00c fef8 	bl	29100 <_impl_k_yield>
		if (!net_if_tx(iface)) {
   1c310:	4620      	mov	r0, r4
   1c312:	f7ff ff7f 	bl	1c214 <net_if_tx>
   1c316:	2800      	cmp	r0, #0
   1c318:	d1fa      	bne.n	1c310 <net_if_flush_tx+0xc>
   1c31a:	bd10      	pop	{r4, pc}
   1c31c:	4770      	bx	lr

0001c31e <net_if_process_events>:
{
   1c31e:	b538      	push	{r3, r4, r5, lr}
   1c320:	4604      	mov	r4, r0
   1c322:	460d      	mov	r5, r1
	for (; ev_count; event++, ev_count--) {
   1c324:	e001      	b.n	1c32a <net_if_process_events+0xc>
   1c326:	3414      	adds	r4, #20
   1c328:	3d01      	subs	r5, #1
   1c32a:	b145      	cbz	r5, 1c33e <net_if_process_events+0x20>
		switch (event->state) {
   1c32c:	7b63      	ldrb	r3, [r4, #13]
   1c32e:	091b      	lsrs	r3, r3, #4
   1c330:	2b04      	cmp	r3, #4
   1c332:	d1f8      	bne.n	1c326 <net_if_process_events+0x8>
			iface = CONTAINER_OF(event->fifo, struct net_if,
   1c334:	6920      	ldr	r0, [r4, #16]
			net_if_tx(iface);
   1c336:	3818      	subs	r0, #24
   1c338:	f7ff ff6c 	bl	1c214 <net_if_tx>
			break;
   1c33c:	e7f3      	b.n	1c326 <net_if_process_events+0x8>
}
   1c33e:	bd38      	pop	{r3, r4, r5, pc}

0001c340 <net_if_tx_thread>:
{
   1c340:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c342:	f00d f836 	bl	293b2 <_impl_k_sem_give>
		ev_count = net_if_prepare_events();
   1c346:	f7ff f849 	bl	1b3dc <net_if_prepare_events>
   1c34a:	4605      	mov	r5, r0
		ret = k_poll(__net_if_event_start, ev_count, K_FOREVER);
   1c34c:	4c06      	ldr	r4, [pc, #24]	; (1c368 <net_if_tx_thread+0x28>)
   1c34e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c352:	4601      	mov	r1, r0
   1c354:	4620      	mov	r0, r4
   1c356:	f00c f98b 	bl	28670 <k_poll>
		net_if_process_events(__net_if_event_start, ev_count);
   1c35a:	4629      	mov	r1, r5
   1c35c:	4620      	mov	r0, r4
   1c35e:	f7ff ffde 	bl	1c31e <net_if_process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1c362:	f00c fecd 	bl	29100 <_impl_k_yield>
   1c366:	e7ee      	b.n	1c346 <net_if_tx_thread+0x6>
   1c368:	2000d560 	.word	0x2000d560

0001c36c <net_if_get_by_index>:

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   1c36c:	4a05      	ldr	r2, [pc, #20]	; (1c384 <net_if_get_by_index+0x18>)
   1c36e:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   1c372:	fb03 2000 	mla	r0, r3, r0, r2
   1c376:	4b04      	ldr	r3, [pc, #16]	; (1c388 <net_if_get_by_index+0x1c>)
   1c378:	4298      	cmp	r0, r3
   1c37a:	d200      	bcs.n	1c37e <net_if_get_by_index+0x12>
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   1c37c:	4770      	bx	lr
		return NULL;
   1c37e:	2000      	movs	r0, #0
   1c380:	e7fc      	b.n	1c37c <net_if_get_by_index+0x10>
   1c382:	bf00      	nop
   1c384:	2000d2c0 	.word	0x2000d2c0
   1c388:	2000d560 	.word	0x2000d560

0001c38c <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);

	return iface - __net_if_start;
   1c38c:	4b03      	ldr	r3, [pc, #12]	; (1c39c <net_if_get_by_iface+0x10>)
   1c38e:	1ac0      	subs	r0, r0, r3
   1c390:	1140      	asrs	r0, r0, #5
   1c392:	4b03      	ldr	r3, [pc, #12]	; (1c3a0 <net_if_get_by_iface+0x14>)
   1c394:	fb03 f000 	mul.w	r0, r3, r0
}
   1c398:	b2c0      	uxtb	r0, r0
   1c39a:	4770      	bx	lr
   1c39c:	2000d2c0 	.word	0x2000d2c0
   1c3a0:	3cf3cf3d 	.word	0x3cf3cf3d

0001c3a4 <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
   1c3a4:	b570      	push	{r4, r5, r6, lr}
   1c3a6:	4606      	mov	r6, r0
   1c3a8:	460d      	mov	r5, r1
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c3aa:	4c05      	ldr	r4, [pc, #20]	; (1c3c0 <net_if_foreach+0x1c>)
   1c3ac:	e004      	b.n	1c3b8 <net_if_foreach+0x14>
		cb(iface, user_data);
   1c3ae:	4629      	mov	r1, r5
   1c3b0:	4620      	mov	r0, r4
   1c3b2:	47b0      	blx	r6
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c3b4:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1c3b8:	4b02      	ldr	r3, [pc, #8]	; (1c3c4 <net_if_foreach+0x20>)
   1c3ba:	429c      	cmp	r4, r3
   1c3bc:	d1f7      	bne.n	1c3ae <net_if_foreach+0xa>
	}
}
   1c3be:	bd70      	pop	{r4, r5, r6, pc}
   1c3c0:	2000d2c0 	.word	0x2000d2c0
   1c3c4:	2000d560 	.word	0x2000d560

0001c3c8 <net_if_up>:

int net_if_up(struct net_if *iface)
{
   1c3c8:	b570      	push	{r4, r5, r6, lr}
   1c3ca:	f3bf 8f5b 	dmb	ish
   1c3ce:	68c5      	ldr	r5, [r0, #12]
   1c3d0:	f3bf 8f5b 	dmb	ish
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c3d4:	f015 0501 	ands.w	r5, r5, #1
   1c3d8:	d123      	bne.n	1c422 <net_if_up+0x5a>
   1c3da:	f100 060c 	add.w	r6, r0, #12
   1c3de:	4604      	mov	r4, r0
		return 0;
	}

	/* If the L2 does not support enable just set the flag */
	if (!iface->l2->enable) {
   1c3e0:	6843      	ldr	r3, [r0, #4]
   1c3e2:	68db      	ldr	r3, [r3, #12]
   1c3e4:	b11b      	cbz	r3, 1c3ee <net_if_up+0x26>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = iface->l2->enable(iface, true);
   1c3e6:	2101      	movs	r1, #1
   1c3e8:	4798      	blx	r3
	if (status < 0) {
   1c3ea:	2800      	cmp	r0, #0
   1c3ec:	db1b      	blt.n	1c426 <net_if_up+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c3ee:	f3bf 8f5b 	dmb	ish
   1c3f2:	e856 3f00 	ldrex	r3, [r6]
   1c3f6:	f043 0301 	orr.w	r3, r3, #1
   1c3fa:	e846 3200 	strex	r2, r3, [r6]
   1c3fe:	2a00      	cmp	r2, #0
   1c400:	d1f7      	bne.n	1c3f2 <net_if_up+0x2a>
   1c402:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   1c406:	4620      	mov	r0, r4
   1c408:	f7ff f91e 	bl	1b648 <net_if_start_dad>
	join_mcast_solicit_node(iface, &iface->ipv6.mcast[0].address.in6_addr);
#endif

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   1c40c:	4620      	mov	r0, r4
   1c40e:	f7ff f821 	bl	1b454 <net_if_start_rs>
   1c412:	2300      	movs	r3, #0
   1c414:	461a      	mov	r2, r3
   1c416:	4621      	mov	r1, r4
   1c418:	4804      	ldr	r0, [pc, #16]	; (1c42c <net_if_up+0x64>)
   1c41a:	f006 fe61 	bl	230e0 <net_mgmt_event_notify_with_info>
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   1c41e:	4628      	mov	r0, r5
   1c420:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1c422:	2500      	movs	r5, #0
   1c424:	e7fb      	b.n	1c41e <net_if_up+0x56>
		return status;
   1c426:	4605      	mov	r5, r0
   1c428:	e7f9      	b.n	1c41e <net_if_up+0x56>
   1c42a:	bf00      	nop
   1c42c:	d0010002 	.word	0xd0010002

0001c430 <net_if_down>:

int net_if_down(struct net_if *iface)
{
   1c430:	b510      	push	{r4, lr}
   1c432:	4604      	mov	r4, r0
	int status;

	NET_DBG("iface %p", iface);

	leave_mcast_all(iface);
   1c434:	f7fe ffaf 	bl	1b396 <leave_mcast_all>

	net_if_flush_tx(iface);
   1c438:	4620      	mov	r0, r4
   1c43a:	f7ff ff63 	bl	1c304 <net_if_flush_tx>

	/* If the L2 does not support enable just clear the flag */
	if (!iface->l2->enable) {
   1c43e:	6863      	ldr	r3, [r4, #4]
   1c440:	68db      	ldr	r3, [r3, #12]
   1c442:	b123      	cbz	r3, 1c44e <net_if_down+0x1e>
		goto done;
	}

	/* Notify L2 to disable the interface */
	status = iface->l2->enable(iface, false);
   1c444:	2100      	movs	r1, #0
   1c446:	4620      	mov	r0, r4
   1c448:	4798      	blx	r3
	if (status < 0) {
   1c44a:	2800      	cmp	r0, #0
   1c44c:	db14      	blt.n	1c478 <net_if_down+0x48>
		return status;
	}

done:
	atomic_clear_bit(iface->flags, NET_IF_UP);
   1c44e:	f104 030c 	add.w	r3, r4, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c452:	f3bf 8f5b 	dmb	ish
   1c456:	e853 2f00 	ldrex	r2, [r3]
   1c45a:	f022 0201 	bic.w	r2, r2, #1
   1c45e:	e843 2100 	strex	r1, r2, [r3]
   1c462:	2900      	cmp	r1, #0
   1c464:	d1f7      	bne.n	1c456 <net_if_down+0x26>
   1c466:	f3bf 8f5b 	dmb	ish
   1c46a:	2300      	movs	r3, #0
   1c46c:	461a      	mov	r2, r3
   1c46e:	4621      	mov	r1, r4
   1c470:	4802      	ldr	r0, [pc, #8]	; (1c47c <net_if_down+0x4c>)
   1c472:	f006 fe35 	bl	230e0 <net_mgmt_event_notify_with_info>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);

	return 0;
   1c476:	2000      	movs	r0, #0
}
   1c478:	bd10      	pop	{r4, pc}
   1c47a:	bf00      	nop
   1c47c:	d0010001 	.word	0xd0010001

0001c480 <net_if_init>:

void net_if_init(struct k_sem *startup_sync)
{
   1c480:	b570      	push	{r4, r5, r6, lr}
   1c482:	b086      	sub	sp, #24
   1c484:	4606      	mov	r6, r0
	struct net_if *iface;

	NET_DBG("");

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c486:	4c1b      	ldr	r4, [pc, #108]	; (1c4f4 <net_if_init+0x74>)
   1c488:	e01b      	b.n	1c4c2 <net_if_init+0x42>
	const struct net_if_api *api = iface->dev->driver_api;
   1c48a:	4620      	mov	r0, r4
   1c48c:	f850 3b18 	ldr.w	r3, [r0], #24
   1c490:	685d      	ldr	r5, [r3, #4]
	k_fifo_init(&iface->tx_queue);
   1c492:	f00c fbc4 	bl	28c1e <k_queue_init>
	api->init(iface);
   1c496:	682b      	ldr	r3, [r5, #0]
   1c498:	4620      	mov	r0, r4
   1c49a:	4798      	blx	r3
#if defined(CONFIG_NET_IPV4)
		iface->ipv4.ttl = CONFIG_NET_INITIAL_TTL;
#endif

#if defined(CONFIG_NET_IPV6)
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1c49c:	2340      	movs	r3, #64	; 0x40
   1c49e:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
		iface->ipv6.base_reachable_time = REACHABLE_TIME;
   1c4a2:	f247 5330 	movw	r3, #30000	; 0x7530
   1c4a6:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
 *
 * @param iface Network interface
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if *iface)
{
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1c4aa:	4620      	mov	r0, r4
   1c4ac:	f7ff fe06 	bl	1c0bc <net_if_ipv6_calc_reachable_time>
   1c4b0:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c

		net_if_ipv6_set_reachable_time(iface);

#if defined(CONFIG_NET_IPV6_ND)
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1c4b4:	4910      	ldr	r1, [pc, #64]	; (1c4f8 <net_if_init+0x78>)
   1c4b6:	f504 7018 	add.w	r0, r4, #608	; 0x260
   1c4ba:	f00d fd4b 	bl	29f54 <k_delayed_work_init>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c4be:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1c4c2:	4b0e      	ldr	r3, [pc, #56]	; (1c4fc <net_if_init+0x7c>)
   1c4c4:	429c      	cmp	r4, r3
   1c4c6:	d1e0      	bne.n	1c48a <net_if_init+0xa>
#endif
#endif
	}

	if (iface == __net_if_start) {
   1c4c8:	4b0a      	ldr	r3, [pc, #40]	; (1c4f4 <net_if_init+0x74>)
   1c4ca:	429c      	cmp	r4, r3
   1c4cc:	d010      	beq.n	1c4f0 <net_if_init+0x70>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1c4ce:	2300      	movs	r3, #0
   1c4d0:	9305      	str	r3, [sp, #20]
   1c4d2:	2201      	movs	r2, #1
   1c4d4:	9204      	str	r2, [sp, #16]
   1c4d6:	f06f 0208 	mvn.w	r2, #8
   1c4da:	9203      	str	r2, [sp, #12]
   1c4dc:	9302      	str	r3, [sp, #8]
   1c4de:	9301      	str	r3, [sp, #4]
   1c4e0:	9600      	str	r6, [sp, #0]
   1c4e2:	4b07      	ldr	r3, [pc, #28]	; (1c500 <net_if_init+0x80>)
   1c4e4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1c4e8:	4906      	ldr	r1, [pc, #24]	; (1c504 <net_if_init+0x84>)
   1c4ea:	4807      	ldr	r0, [pc, #28]	; (1c508 <net_if_init+0x88>)
   1c4ec:	f00d f9e0 	bl	298b0 <_impl_k_thread_create>
	k_thread_create(&tx_thread_data, tx_stack,
			K_THREAD_STACK_SIZEOF(tx_stack),
			(k_thread_entry_t)net_if_tx_thread,
			startup_sync, NULL, NULL, K_PRIO_COOP(7),
			K_ESSENTIAL, K_NO_WAIT);
}
   1c4f0:	b006      	add	sp, #24
   1c4f2:	bd70      	pop	{r4, r5, r6, pc}
   1c4f4:	2000d2c0 	.word	0x2000d2c0
   1c4f8:	0001b475 	.word	0x0001b475
   1c4fc:	2000d560 	.word	0x2000d560
   1c500:	0001c341 	.word	0x0001c341
   1c504:	20004e40 	.word	0x20004e40
   1c508:	20000498 	.word	0x20000498

0001c50c <net_if_post_init>:

void net_if_post_init(void)
{
   1c50c:	b510      	push	{r4, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c50e:	4c05      	ldr	r4, [pc, #20]	; (1c524 <net_if_post_init+0x18>)
   1c510:	e004      	b.n	1c51c <net_if_post_init+0x10>
		net_if_up(iface);
   1c512:	4620      	mov	r0, r4
   1c514:	f7ff ff58 	bl	1c3c8 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c518:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1c51c:	4b02      	ldr	r3, [pc, #8]	; (1c528 <net_if_post_init+0x1c>)
   1c51e:	429c      	cmp	r4, r3
   1c520:	d1f7      	bne.n	1c512 <net_if_post_init+0x6>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   1c522:	bd10      	pop	{r4, pc}
   1c524:	2000d2c0 	.word	0x2000d2c0
   1c528:	2000d560 	.word	0x2000d560

0001c52c <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   1c52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c52e:	4605      	mov	r5, r0
   1c530:	460e      	mov	r6, r1
   1c532:	4617      	mov	r7, r2
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c534:	2400      	movs	r4, #0
   1c536:	e003      	b.n	1c540 <check_used_port+0x14>
   1c538:	2311      	movs	r3, #17
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1c53a:	42ab      	cmp	r3, r5
   1c53c:	d010      	beq.n	1c560 <check_used_port+0x34>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c53e:	3401      	adds	r4, #1
   1c540:	2c05      	cmp	r4, #5
   1c542:	dc2b      	bgt.n	1c59c <check_used_port+0x70>
	return context->flags & NET_CONTEXT_IN_USE;
   1c544:	2368      	movs	r3, #104	; 0x68
   1c546:	4a16      	ldr	r2, [pc, #88]	; (1c5a0 <check_used_port+0x74>)
   1c548:	fb03 2304 	mla	r3, r3, r4, r2
   1c54c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1c550:	f013 0f01 	tst.w	r3, #1
   1c554:	d0f3      	beq.n	1c53e <check_used_port+0x12>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c556:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c55a:	d0ed      	beq.n	1c538 <check_used_port+0xc>
		return IPPROTO_TCP;
   1c55c:	2306      	movs	r3, #6
   1c55e:	e7ec      	b.n	1c53a <check_used_port+0xe>
		      net_sin((struct sockaddr *)&
   1c560:	2368      	movs	r3, #104	; 0x68
   1c562:	fb03 f304 	mul.w	r3, r3, r4
   1c566:	3308      	adds	r3, #8
   1c568:	4a0d      	ldr	r2, [pc, #52]	; (1c5a0 <check_used_port+0x74>)
   1c56a:	4413      	add	r3, r2
			      contexts[i].local)->sin_port == local_port)) {
   1c56c:	885a      	ldrh	r2, [r3, #2]
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1c56e:	42b2      	cmp	r2, r6
   1c570:	d1e5      	bne.n	1c53e <check_used_port+0x12>
			continue;
		}

		if (local_addr->sa_family == AF_INET6) {
   1c572:	883a      	ldrh	r2, [r7, #0]
   1c574:	2a0a      	cmp	r2, #10
   1c576:	d007      	beq.n	1c588 <check_used_port+0x5c>
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else {
			if (net_ipv4_addr_cmp(
				    net_sin_ptr(&contexts[i].local)->
   1c578:	685b      	ldr	r3, [r3, #4]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1c57a:	681a      	ldr	r2, [r3, #0]
   1c57c:	687b      	ldr	r3, [r7, #4]
			if (net_ipv4_addr_cmp(
   1c57e:	429a      	cmp	r2, r3
   1c580:	d1dd      	bne.n	1c53e <check_used_port+0x12>
							      sin_addr,
				    &((struct sockaddr_in *)
				      local_addr)->sin_addr)) {
				return -EEXIST;
   1c582:	f06f 0010 	mvn.w	r0, #16
			}
		}
	}

	return 0;
}
   1c586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1c588:	2210      	movs	r2, #16
   1c58a:	1d39      	adds	r1, r7, #4
   1c58c:	6858      	ldr	r0, [r3, #4]
   1c58e:	f00e f92f 	bl	2a7f0 <memcmp>
			if (net_ipv6_addr_cmp(
   1c592:	2800      	cmp	r0, #0
   1c594:	d1d3      	bne.n	1c53e <check_used_port+0x12>
				return -EEXIST;
   1c596:	f06f 0010 	mvn.w	r0, #16
   1c59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
   1c59c:	2000      	movs	r0, #0
   1c59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c5a0:	20001ca8 	.word	0x20001ca8

0001c5a4 <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1c5a4:	b570      	push	{r4, r5, r6, lr}
   1c5a6:	4606      	mov	r6, r0
   1c5a8:	460d      	mov	r5, r1
	if (!net_sin(addr)->sin_port) {
   1c5aa:	884c      	ldrh	r4, [r1, #2]
   1c5ac:	b16c      	cbz	r4, 1c5ca <find_available_port+0x26>

		return htons(local_port);
	}

	return net_sin(addr)->sin_port;
}
   1c5ae:	4620      	mov	r0, r4
   1c5b0:	bd70      	pop	{r4, r5, r6, pc}
	return IPPROTO_UDP;
   1c5b2:	2011      	movs	r0, #17
				 htons(local_port), addr) == -EEXIST);
   1c5b4:	0a1c      	lsrs	r4, r3, #8
   1c5b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
		} while (check_used_port(
   1c5ba:	b29c      	uxth	r4, r3
   1c5bc:	462a      	mov	r2, r5
   1c5be:	4621      	mov	r1, r4
   1c5c0:	f7ff ffb4 	bl	1c52c <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   1c5c4:	f110 0f11 	cmn.w	r0, #17
   1c5c8:	d1f1      	bne.n	1c5ae <find_available_port+0xa>
			local_port = sys_rand32_get() | 0x8000;
   1c5ca:	f7e5 fd5b 	bl	2084 <sys_rand32_get>
   1c5ce:	ea6f 4040 	mvn.w	r0, r0, lsl #17
   1c5d2:	ea6f 4050 	mvn.w	r0, r0, lsr #17
   1c5d6:	b283      	uxth	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1c5d8:	f896 205d 	ldrb.w	r2, [r6, #93]	; 0x5d
   1c5dc:	f012 0f40 	tst.w	r2, #64	; 0x40
   1c5e0:	d0e7      	beq.n	1c5b2 <find_available_port+0xe>
		return IPPROTO_TCP;
   1c5e2:	2006      	movs	r0, #6
   1c5e4:	e7e6      	b.n	1c5b4 <find_available_port+0x10>

0001c5e6 <queue_fin>:
	return ret;
}

#if defined(CONFIG_NET_TCP)
static void queue_fin(struct net_context *ctx)
{
   1c5e6:	b500      	push	{lr}
   1c5e8:	b087      	sub	sp, #28
   1c5ea:	4603      	mov	r3, r0
	struct net_pkt *pkt = NULL;
   1c5ec:	2200      	movs	r2, #0
   1c5ee:	a906      	add	r1, sp, #24
   1c5f0:	f841 2d04 	str.w	r2, [r1, #-4]!
	int ret;

	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1c5f4:	6e00      	ldr	r0, [r0, #96]	; 0x60
				      NULL, &ctx->remote, &pkt);
   1c5f6:	3314      	adds	r3, #20
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1c5f8:	9102      	str	r1, [sp, #8]
   1c5fa:	9301      	str	r3, [sp, #4]
   1c5fc:	9200      	str	r2, [sp, #0]
   1c5fe:	4613      	mov	r3, r2
   1c600:	2101      	movs	r1, #1
   1c602:	f007 f9dd 	bl	239c0 <net_tcp_prepare_segment>
	if (ret || !pkt) {
   1c606:	b928      	cbnz	r0, 1c614 <queue_fin+0x2e>
   1c608:	9805      	ldr	r0, [sp, #20]
   1c60a:	b118      	cbz	r0, 1c614 <queue_fin+0x2e>
		return;
	}

	ret = net_tcp_send_pkt(pkt);
   1c60c:	f007 fcdc 	bl	23fc8 <net_tcp_send_pkt>
	if (ret < 0) {
   1c610:	2800      	cmp	r0, #0
   1c612:	db02      	blt.n	1c61a <queue_fin+0x34>
		net_pkt_unref(pkt);
	}
}
   1c614:	b007      	add	sp, #28
   1c616:	f85d fb04 	ldr.w	pc, [sp], #4
		net_pkt_unref(pkt);
   1c61a:	9805      	ldr	r0, [sp, #20]
   1c61c:	f001 f8ed 	bl	1d7fa <net_pkt_unref>
   1c620:	e7f8      	b.n	1c614 <queue_fin+0x2e>

0001c622 <tcp_hdr_len>:

	return ret;
}

static int tcp_hdr_len(struct net_pkt *pkt)
{
   1c622:	b500      	push	{lr}
   1c624:	b087      	sub	sp, #28
	struct net_tcp_hdr hdr, *tcp_hdr;

	/* "Offset": 4-bit field in high nibble, units of dwords */
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1c626:	a901      	add	r1, sp, #4
   1c628:	f007 fb1c 	bl	23c64 <net_tcp_get_hdr>
	if (tcp_hdr) {
   1c62c:	b128      	cbz	r0, 1c63a <tcp_hdr_len+0x18>
		return 4 * (tcp_hdr->offset >> 4);
   1c62e:	7b00      	ldrb	r0, [r0, #12]
   1c630:	0900      	lsrs	r0, r0, #4
   1c632:	0080      	lsls	r0, r0, #2
	}

	return 0;
}
   1c634:	b007      	add	sp, #28
   1c636:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
   1c63a:	2000      	movs	r0, #0
   1c63c:	e7fa      	b.n	1c634 <tcp_hdr_len+0x12>

0001c63e <set_appdata_values>:

	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
}

static void set_appdata_values(struct net_pkt *pkt, enum net_ip_protocol proto)
{
   1c63e:	b570      	push	{r4, r5, r6, lr}
   1c640:	b082      	sub	sp, #8
   1c642:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1c644:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1c646:	2400      	movs	r4, #0
   1c648:	e002      	b.n	1c650 <set_appdata_values+0x12>
		bytes += buf->len;
   1c64a:	899a      	ldrh	r2, [r3, #12]
   1c64c:	4414      	add	r4, r2
		buf = buf->frags;
   1c64e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c650:	2b00      	cmp	r3, #0
   1c652:	d1fa      	bne.n	1c64a <set_appdata_values+0xc>
	u16_t proto_len = 0;
	struct net_buf *frag;
	u16_t offset;

#if defined(CONFIG_NET_UDP)
	if (proto == IPPROTO_UDP) {
   1c654:	2911      	cmp	r1, #17
   1c656:	d020      	beq.n	1c69a <set_appdata_values+0x5c>
	u16_t proto_len = 0;
   1c658:	2600      	movs	r6, #0
		proto_len = sizeof(struct net_udp_hdr);
	}
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (proto == IPPROTO_TCP) {
   1c65a:	2906      	cmp	r1, #6
   1c65c:	d01f      	beq.n	1c69e <set_appdata_values+0x60>
		proto_len = tcp_hdr_len(pkt);
	}
#endif /* CONFIG_NET_TCP */

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1c65e:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1c662:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1c666:	4419      	add	r1, r3
   1c668:	4431      	add	r1, r6
   1c66a:	f10d 0206 	add.w	r2, sp, #6
   1c66e:	b289      	uxth	r1, r1
   1c670:	4628      	mov	r0, r5
   1c672:	f001 fb91 	bl	1dd98 <net_frag_get_pos>
				proto_len,
				&offset);
	if (frag) {
   1c676:	b120      	cbz	r0, 1c682 <set_appdata_values+0x44>
		net_pkt_set_appdata(pkt, frag->data + offset);
   1c678:	6883      	ldr	r3, [r0, #8]
   1c67a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1c67e:	4413      	add	r3, r2
	pkt->appdata = data;
   1c680:	61ab      	str	r3, [r5, #24]
	}

	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1c682:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1c686:	1ae3      	subs	r3, r4, r3
   1c688:	b29b      	uxth	r3, r3
			       net_pkt_ipv6_ext_len(pkt) - proto_len);
   1c68a:	f895 403b 	ldrb.w	r4, [r5, #59]	; 0x3b
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1c68e:	1b1b      	subs	r3, r3, r4
   1c690:	b29b      	uxth	r3, r3
   1c692:	1b9b      	subs	r3, r3, r6
	pkt->appdatalen = len;
   1c694:	862b      	strh	r3, [r5, #48]	; 0x30

	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
			"Wrong appdatalen %u, total %zu",
			net_pkt_appdatalen(pkt), total_len);
}
   1c696:	b002      	add	sp, #8
   1c698:	bd70      	pop	{r4, r5, r6, pc}
		proto_len = sizeof(struct net_udp_hdr);
   1c69a:	2608      	movs	r6, #8
   1c69c:	e7dd      	b.n	1c65a <set_appdata_values+0x1c>
		proto_len = tcp_hdr_len(pkt);
   1c69e:	4628      	mov	r0, r5
   1c6a0:	f7ff ffbf 	bl	1c622 <tcp_hdr_len>
   1c6a4:	b286      	uxth	r6, r0
   1c6a6:	e7da      	b.n	1c65e <set_appdata_values+0x20>

0001c6a8 <packet_received>:

static enum net_verdict packet_received(struct net_conn *conn,
					struct net_pkt *pkt,
					void *user_data)
{
   1c6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c6aa:	460d      	mov	r5, r1
   1c6ac:	4616      	mov	r6, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c6ae:	2300      	movs	r3, #0
   1c6b0:	e000      	b.n	1c6b4 <packet_received+0xc>
   1c6b2:	3301      	adds	r3, #1
   1c6b4:	2b05      	cmp	r3, #5
   1c6b6:	dc12      	bgt.n	1c6de <packet_received+0x36>
	return context->flags & NET_CONTEXT_IN_USE;
   1c6b8:	2268      	movs	r2, #104	; 0x68
   1c6ba:	4926      	ldr	r1, [pc, #152]	; (1c754 <packet_received+0xac>)
   1c6bc:	fb02 1203 	mla	r2, r2, r3, r1
   1c6c0:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1c6c4:	f012 0f01 	tst.w	r2, #1
   1c6c8:	d0f3      	beq.n	1c6b2 <packet_received+0xa>
		if (contexts[i].conn_handler == conn_handler) {
   1c6ca:	2268      	movs	r2, #104	; 0x68
   1c6cc:	fb02 1203 	mla	r2, r2, r3, r1
   1c6d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1c6d2:	4290      	cmp	r0, r2
   1c6d4:	d1ed      	bne.n	1c6b2 <packet_received+0xa>
			return &contexts[i];
   1c6d6:	2268      	movs	r2, #104	; 0x68
   1c6d8:	fb02 1403 	mla	r4, r2, r3, r1
   1c6dc:	e000      	b.n	1c6e0 <packet_received+0x38>
	return NULL;
   1c6de:	2400      	movs	r4, #0
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   1c6e0:	6968      	ldr	r0, [r5, #20]
   1c6e2:	f7ff fe53 	bl	1c38c <net_if_get_by_iface>
   1c6e6:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
	pkt->context = ctx;
   1c6ea:	60ec      	str	r4, [r5, #12]

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   1c6ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c6ee:	b373      	cbz	r3, 1c74e <packet_received+0xa6>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c6f0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c6f4:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c6f8:	d017      	beq.n	1c72a <packet_received+0x82>
		return IPPROTO_TCP;
   1c6fa:	2206      	movs	r2, #6
		return NET_DROP;
	}

	if (net_context_get_ip_proto(context) != IPPROTO_TCP) {
   1c6fc:	2a06      	cmp	r2, #6
   1c6fe:	d016      	beq.n	1c72e <packet_received+0x86>
		/* TCP packets get appdata earlier in tcp_established(). */
		set_appdata_values(pkt, IPPROTO_UDP);
   1c700:	2111      	movs	r1, #17
   1c702:	4628      	mov	r0, r5
   1c704:	f7ff ff9b 	bl	1c63e <set_appdata_values>
	return pkt->appdatalen;
   1c708:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	net_stats.tcp.bytes.received += bytes;
   1c70a:	4a13      	ldr	r2, [pc, #76]	; (1c758 <packet_received+0xb0>)
   1c70c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1c70e:	440b      	add	r3, r1
   1c710:	64d3      	str	r3, [r2, #76]	; 0x4c
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	net_stats_update_tcp_recv(net_pkt_appdatalen(pkt));

	context->recv_cb(context, pkt, 0, user_data);
   1c712:	6b27      	ldr	r7, [r4, #48]	; 0x30
   1c714:	4633      	mov	r3, r6
   1c716:	2200      	movs	r2, #0
   1c718:	4629      	mov	r1, r5
   1c71a:	4620      	mov	r0, r4
   1c71c:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c71e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1c722:	f00c fe46 	bl	293b2 <_impl_k_sem_give>

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   1c726:	2000      	movs	r0, #0
   1c728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1c72a:	2211      	movs	r2, #17
   1c72c:	e7e6      	b.n	1c6fc <packet_received+0x54>
	if (context->flags & NET_CONTEXT_TYPE) {
   1c72e:	f013 0f20 	tst.w	r3, #32
   1c732:	d00a      	beq.n	1c74a <packet_received+0xa2>
		return SOCK_STREAM;
   1c734:	2301      	movs	r3, #1
	else if (net_context_get_type(context) == SOCK_STREAM) {
   1c736:	2b01      	cmp	r3, #1
   1c738:	d1e6      	bne.n	1c708 <packet_received+0x60>
   1c73a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
		if (net_pkt_appdatalen(pkt) == 0) {
   1c73c:	2b00      	cmp	r3, #0
   1c73e:	d1e3      	bne.n	1c708 <packet_received+0x60>
			net_pkt_unref(pkt);
   1c740:	4628      	mov	r0, r5
   1c742:	f001 f85a 	bl	1d7fa <net_pkt_unref>
			return NET_OK;
   1c746:	2000      	movs	r0, #0
   1c748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return SOCK_DGRAM;
   1c74a:	2302      	movs	r3, #2
   1c74c:	e7f3      	b.n	1c736 <packet_received+0x8e>
		return NET_DROP;
   1c74e:	2002      	movs	r0, #2
}
   1c750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c752:	bf00      	nop
   1c754:	20001ca8 	.word	0x20001ca8
   1c758:	20002b58 	.word	0x20002b58

0001c75c <send_reset>:
{
   1c75c:	b510      	push	{r4, lr}
   1c75e:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1c760:	aa02      	add	r2, sp, #8
   1c762:	2300      	movs	r3, #0
   1c764:	f842 3d04 	str.w	r3, [r2, #-4]!
	ret = net_tcp_prepare_reset(context->tcp, remote, &pkt);
   1c768:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1c76a:	f007 f85a 	bl	23822 <net_tcp_prepare_reset>
	if (ret || !pkt) {
   1c76e:	4604      	mov	r4, r0
   1c770:	b928      	cbnz	r0, 1c77e <send_reset+0x22>
   1c772:	9801      	ldr	r0, [sp, #4]
   1c774:	b118      	cbz	r0, 1c77e <send_reset+0x22>
	ret = net_send_data(pkt);
   1c776:	f7fe fc3f 	bl	1aff8 <net_send_data>
	if (ret < 0) {
   1c77a:	1e04      	subs	r4, r0, #0
   1c77c:	db02      	blt.n	1c784 <send_reset+0x28>
}
   1c77e:	4620      	mov	r0, r4
   1c780:	b002      	add	sp, #8
   1c782:	bd10      	pop	{r4, pc}
		net_pkt_unref(pkt);
   1c784:	9801      	ldr	r0, [sp, #4]
   1c786:	f001 f838 	bl	1d7fa <net_pkt_unref>
   1c78a:	e7f8      	b.n	1c77e <send_reset+0x22>

0001c78c <send_ack>:
{
   1c78c:	b510      	push	{r4, lr}
   1c78e:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1c790:	2300      	movs	r3, #0
   1c792:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   1c794:	b932      	cbnz	r2, 1c7a4 <send_ack+0x18>
   1c796:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1c798:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1c79c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1c7a0:	429a      	cmp	r2, r3
   1c7a2:	d011      	beq.n	1c7c8 <send_ack+0x3c>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   1c7a4:	aa01      	add	r2, sp, #4
   1c7a6:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1c7a8:	f007 f99c 	bl	23ae4 <net_tcp_prepare_ack>
	if (ret) {
   1c7ac:	4604      	mov	r4, r0
   1c7ae:	b110      	cbz	r0, 1c7b6 <send_ack+0x2a>
}
   1c7b0:	4620      	mov	r0, r4
   1c7b2:	b002      	add	sp, #8
   1c7b4:	bd10      	pop	{r4, pc}
	ret = net_tcp_send_pkt(pkt);
   1c7b6:	9801      	ldr	r0, [sp, #4]
   1c7b8:	f007 fc06 	bl	23fc8 <net_tcp_send_pkt>
	if (ret < 0) {
   1c7bc:	1e04      	subs	r4, r0, #0
   1c7be:	daf7      	bge.n	1c7b0 <send_ack+0x24>
		net_pkt_unref(pkt);
   1c7c0:	9801      	ldr	r0, [sp, #4]
   1c7c2:	f001 f81a 	bl	1d7fa <net_pkt_unref>
   1c7c6:	e7f3      	b.n	1c7b0 <send_ack+0x24>
		return 0;
   1c7c8:	2400      	movs	r4, #0
   1c7ca:	e7f1      	b.n	1c7b0 <send_ack+0x24>

0001c7cc <_tcp_synack_received>:
	switch (net_tcp_get_state(context->tcp)) {
   1c7cc:	6e13      	ldr	r3, [r2, #96]	; 0x60
 *
 * @param tcp TCP context
 */
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   1c7ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c7d2:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1c7d6:	2b02      	cmp	r3, #2
   1c7d8:	d001      	beq.n	1c7de <_tcp_synack_received+0x12>
}
   1c7da:	2002      	movs	r0, #2
   1c7dc:	4770      	bx	lr
{
   1c7de:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c7e0:	b09f      	sub	sp, #124	; 0x7c
   1c7e2:	4615      	mov	r5, r2
   1c7e4:	460c      	mov	r4, r1
	context->iface = net_if_get_by_iface(iface);
   1c7e6:	6948      	ldr	r0, [r1, #20]
   1c7e8:	f7ff fdd0 	bl	1c38c <net_if_get_by_iface>
   1c7ec:	f885 005c 	strb.w	r0, [r5, #92]	; 0x5c
	pkt->context = ctx;
   1c7f0:	60e5      	str	r5, [r4, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1c7f2:	a911      	add	r1, sp, #68	; 0x44
   1c7f4:	4620      	mov	r0, r4
   1c7f6:	f007 fa35 	bl	23c64 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1c7fa:	4606      	mov	r6, r0
   1c7fc:	b1f8      	cbz	r0, 1c83e <_tcp_synack_received+0x72>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1c7fe:	7b43      	ldrb	r3, [r0, #13]
   1c800:	f013 0f04 	tst.w	r3, #4
   1c804:	d11e      	bne.n	1c844 <_tcp_synack_received+0x78>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   1c806:	f013 0f02 	tst.w	r3, #2
   1c80a:	d013      	beq.n	1c834 <_tcp_synack_received+0x68>
		context->tcp->send_ack =
   1c80c:	6e2a      	ldr	r2, [r5, #96]	; 0x60
	return ((u16_t)src[0] << 8) | src[1];
   1c80e:	7901      	ldrb	r1, [r0, #4]
   1c810:	7943      	ldrb	r3, [r0, #5]
   1c812:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1c816:	7980      	ldrb	r0, [r0, #6]
   1c818:	79f3      	ldrb	r3, [r6, #7]
   1c81a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1c81e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			sys_get_be32(tcp_hdr->seq) + 1;
   1c822:	3301      	adds	r3, #1
		context->tcp->send_ack =
   1c824:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		context->tcp->recv_max_ack = context->tcp->send_seq + 1;
   1c828:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1c82a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1c82e:	3301      	adds	r3, #1
   1c830:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   1c834:	7b73      	ldrb	r3, [r6, #13]
   1c836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c83a:	2b12      	cmp	r3, #18
   1c83c:	d019      	beq.n	1c872 <_tcp_synack_received+0xa6>
}
   1c83e:	2002      	movs	r0, #2
   1c840:	b01f      	add	sp, #124	; 0x7c
   1c842:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1c844:	4621      	mov	r1, r4
   1c846:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c848:	f007 fa87 	bl	23d5a <net_tcp_validate_seq>
   1c84c:	b160      	cbz	r0, 1c868 <_tcp_synack_received+0x9c>
	net_stats.tcp.drop++;
}

static inline void net_stats_update_tcp_seg_rst(void)
{
	net_stats.tcp.rst++;
   1c84e:	4a40      	ldr	r2, [pc, #256]	; (1c950 <_tcp_synack_received+0x184>)
   1c850:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1c852:	3301      	adds	r3, #1
   1c854:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->connect_cb) {
   1c856:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1c858:	2b00      	cmp	r3, #0
   1c85a:	d0f0      	beq.n	1c83e <_tcp_synack_received+0x72>
			context->connect_cb(context, -ECONNREFUSED,
   1c85c:	682a      	ldr	r2, [r5, #0]
   1c85e:	f06f 016e 	mvn.w	r1, #110	; 0x6e
   1c862:	4628      	mov	r0, r5
   1c864:	4798      	blx	r3
   1c866:	e7ea      	b.n	1c83e <_tcp_synack_received+0x72>
	net_stats.tcp.ackerr++;
}

static inline void net_stats_update_tcp_seg_rsterr(void)
{
	net_stats.tcp.rsterr++;
   1c868:	4a39      	ldr	r2, [pc, #228]	; (1c950 <_tcp_synack_received+0x184>)
   1c86a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1c86c:	3301      	adds	r3, #1
   1c86e:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1c870:	e7e5      	b.n	1c83e <_tcp_synack_received+0x72>
	return pkt->family;
   1c872:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1c876:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_pkt_family(pkt) == AF_INET6) {
   1c87a:	2b0a      	cmp	r3, #10
   1c87c:	d1df      	bne.n	1c83e <_tcp_synack_received+0x72>
			r6addr.sin6_family = AF_INET6;
   1c87e:	f04f 0e0a 	mov.w	lr, #10
   1c882:	f8ad e014 	strh.w	lr, [sp, #20]
			r6addr.sin6_port = tcp_hdr->src_port;
   1c886:	8833      	ldrh	r3, [r6, #0]
   1c888:	f8ad 3016 	strh.w	r3, [sp, #22]
	return pkt->frags->data;
   1c88c:	68a7      	ldr	r7, [r4, #8]
			net_ipaddr_copy(&r6addr.sin6_addr,
   1c88e:	ac16      	add	r4, sp, #88	; 0x58
   1c890:	68bb      	ldr	r3, [r7, #8]
   1c892:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1c896:	6859      	ldr	r1, [r3, #4]
   1c898:	689a      	ldr	r2, [r3, #8]
   1c89a:	68db      	ldr	r3, [r3, #12]
   1c89c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c89e:	ac06      	add	r4, sp, #24
   1c8a0:	ab16      	add	r3, sp, #88	; 0x58
   1c8a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1c8a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			l6addr.sin6_family = AF_INET6;
   1c8a8:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
			l6addr.sin6_port = htons(tcp_hdr->dst_port);
   1c8ac:	8872      	ldrh	r2, [r6, #2]
   1c8ae:	0a13      	lsrs	r3, r2, #8
   1c8b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1c8b4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			net_ipaddr_copy(&l6addr.sin6_addr,
   1c8b8:	ac1a      	add	r4, sp, #104	; 0x68
   1c8ba:	68bb      	ldr	r3, [r7, #8]
   1c8bc:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1c8c0:	6859      	ldr	r1, [r3, #4]
   1c8c2:	689a      	ldr	r2, [r3, #8]
   1c8c4:	68db      	ldr	r3, [r3, #12]
   1c8c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c8c8:	ac0c      	add	r4, sp, #48	; 0x30
   1c8ca:	ab1e      	add	r3, sp, #120	; 0x78
   1c8cc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c8d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		net_tcp_unregister(context->conn_handler);
   1c8d4:	462c      	mov	r4, r5
	return net_conn_unregister(handle);
   1c8d6:	f854 0f2c 	ldr.w	r0, [r4, #44]!
   1c8da:	f008 fcdb 	bl	25294 <net_conn_unregister>
				       ntohs(tcp_hdr->src_port),
   1c8de:	8832      	ldrh	r2, [r6, #0]
   1c8e0:	0a13      	lsrs	r3, r2, #8
   1c8e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				       ntohs(tcp_hdr->dst_port),
   1c8e6:	8871      	ldrh	r1, [r6, #2]
   1c8e8:	0a0a      	lsrs	r2, r1, #8
   1c8ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		ret = net_tcp_register(raddr,
   1c8ee:	b292      	uxth	r2, r2
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1c8f0:	9403      	str	r4, [sp, #12]
   1c8f2:	9502      	str	r5, [sp, #8]
   1c8f4:	4917      	ldr	r1, [pc, #92]	; (1c954 <_tcp_synack_received+0x188>)
   1c8f6:	9101      	str	r1, [sp, #4]
   1c8f8:	9200      	str	r2, [sp, #0]
   1c8fa:	b29b      	uxth	r3, r3
   1c8fc:	aa0b      	add	r2, sp, #44	; 0x2c
   1c8fe:	a905      	add	r1, sp, #20
   1c900:	2006      	movs	r0, #6
   1c902:	f008 fce5 	bl	252d0 <net_conn_register>
		if (ret < 0) {
   1c906:	2800      	cmp	r0, #0
   1c908:	db1c      	blt.n	1c944 <_tcp_synack_received+0x178>
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   1c90a:	2104      	movs	r1, #4
   1c90c:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c90e:	f006 ffba 	bl	23886 <net_tcp_change_state>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1c912:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1c916:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1c91a:	f043 0304 	orr.w	r3, r3, #4
   1c91e:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		send_ack(context, raddr, false);
   1c922:	2200      	movs	r2, #0
   1c924:	a905      	add	r1, sp, #20
   1c926:	4628      	mov	r0, r5
   1c928:	f7ff ff30 	bl	1c78c <send_ack>
		k_sem_give(&context->tcp->connect_wait);
   1c92c:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c92e:	30ac      	adds	r0, #172	; 0xac
   1c930:	f00c fd3f 	bl	293b2 <_impl_k_sem_give>
		if (context->connect_cb) {
   1c934:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1c936:	2b00      	cmp	r3, #0
   1c938:	d081      	beq.n	1c83e <_tcp_synack_received+0x72>
			context->connect_cb(context, 0, context->user_data);
   1c93a:	682a      	ldr	r2, [r5, #0]
   1c93c:	2100      	movs	r1, #0
   1c93e:	4628      	mov	r0, r5
   1c940:	4798      	blx	r3
   1c942:	e77c      	b.n	1c83e <_tcp_synack_received+0x72>
			send_reset(context, raddr);
   1c944:	a905      	add	r1, sp, #20
   1c946:	4628      	mov	r0, r5
   1c948:	f7ff ff08 	bl	1c75c <send_reset>
			return NET_DROP;
   1c94c:	e777      	b.n	1c83e <_tcp_synack_received+0x72>
   1c94e:	bf00      	nop
   1c950:	20002b58 	.word	0x20002b58
   1c954:	0001cead 	.word	0x0001cead

0001c958 <create_udp_packet>:
{
   1c958:	b570      	push	{r4, r5, r6, lr}
	return pkt->family;
   1c95a:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
   1c95e:	f3c4 04c3 	ubfx	r4, r4, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1c962:	2c0a      	cmp	r4, #10
   1c964:	d118      	bne.n	1c998 <create_udp_packet+0x40>
   1c966:	461e      	mov	r6, r3
   1c968:	4615      	mov	r5, r2
   1c96a:	4604      	mov	r4, r0
		pkt = net_ipv6_create(context, pkt, NULL, &addr6->sin6_addr);
   1c96c:	1d13      	adds	r3, r2, #4
   1c96e:	2200      	movs	r2, #0
   1c970:	f003 f9a4 	bl	1fcbc <net_ipv6_create>
   1c974:	4601      	mov	r1, r0
				     net_pkt_ip_hdr_len(pkt) +
   1c976:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
				     net_pkt_ipv6_ext_len(pkt),
   1c97a:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
		tmp = net_udp_insert(context, pkt,
   1c97e:	886b      	ldrh	r3, [r5, #2]
   1c980:	4402      	add	r2, r0
   1c982:	4620      	mov	r0, r4
   1c984:	f006 fd90 	bl	234a8 <net_udp_insert>
		if (!tmp) {
   1c988:	4605      	mov	r5, r0
   1c98a:	b140      	cbz	r0, 1c99e <create_udp_packet+0x46>
		r = net_ipv6_finalize(context, pkt);
   1c98c:	4601      	mov	r1, r0
   1c98e:	4620      	mov	r0, r4
   1c990:	f003 fbf0 	bl	20174 <net_ipv6_finalize>
	*out_pkt = pkt;
   1c994:	6035      	str	r5, [r6, #0]
	return r;
   1c996:	bd70      	pop	{r4, r5, r6, pc}
		return -EPROTONOSUPPORT;
   1c998:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   1c99c:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1c99e:	f06f 000b 	mvn.w	r0, #11
}
   1c9a2:	bd70      	pop	{r4, r5, r6, pc}

0001c9a4 <send_data>:
{
   1c9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9a8:	4604      	mov	r4, r0
   1c9aa:	4615      	mov	r5, r2
   1c9ac:	9e06      	ldr	r6, [sp, #24]
   1c9ae:	9f07      	ldr	r7, [sp, #28]
	context->send_cb = cb;
   1c9b0:	6342      	str	r2, [r0, #52]	; 0x34
	context->user_data = user_data;
   1c9b2:	6007      	str	r7, [r0, #0]
	pkt->token = token;
   1c9b4:	610e      	str	r6, [r1, #16]
	if (context->flags & NET_CONTEXT_PROTO) {
   1c9b6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1c9ba:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c9be:	d011      	beq.n	1c9e4 <send_data+0x40>
		return IPPROTO_TCP;
   1c9c0:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c9c2:	2b11      	cmp	r3, #17
   1c9c4:	d010      	beq.n	1c9e8 <send_data+0x44>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c9c6:	2b06      	cmp	r3, #6
   1c9c8:	d113      	bne.n	1c9f2 <send_data+0x4e>
		int ret = net_tcp_send_data(context);
   1c9ca:	4620      	mov	r0, r4
   1c9cc:	f007 fbf8 	bl	241c0 <net_tcp_send_data>
   1c9d0:	4680      	mov	r8, r0
		if (cb) {
   1c9d2:	b125      	cbz	r5, 1c9de <send_data+0x3a>
			cb(context, ret, token, user_data);
   1c9d4:	463b      	mov	r3, r7
   1c9d6:	4632      	mov	r2, r6
   1c9d8:	4601      	mov	r1, r0
   1c9da:	4620      	mov	r0, r4
   1c9dc:	47a8      	blx	r5
}
   1c9de:	4640      	mov	r0, r8
   1c9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return IPPROTO_UDP;
   1c9e4:	2311      	movs	r3, #17
   1c9e6:	e7ec      	b.n	1c9c2 <send_data+0x1e>
		return net_send_data(pkt);
   1c9e8:	4608      	mov	r0, r1
   1c9ea:	f7fe fb05 	bl	1aff8 <net_send_data>
   1c9ee:	4680      	mov	r8, r0
   1c9f0:	e7f5      	b.n	1c9de <send_data+0x3a>
	return -EPROTONOSUPPORT;
   1c9f2:	f06f 087a 	mvn.w	r8, #122	; 0x7a
   1c9f6:	e7f2      	b.n	1c9de <send_data+0x3a>

0001c9f8 <net_context_get>:
{
   1c9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (family == AF_INET) {
   1c9fc:	2802      	cmp	r0, #2
   1c9fe:	f000 80e9 	beq.w	1cbd4 <net_context_get+0x1dc>
	if (family != AF_INET && family != AF_INET6) {
   1ca02:	280a      	cmp	r0, #10
   1ca04:	f040 80e9 	bne.w	1cbda <net_context_get+0x1e2>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   1ca08:	1e4c      	subs	r4, r1, #1
   1ca0a:	b2e4      	uxtb	r4, r4
   1ca0c:	2c01      	cmp	r4, #1
   1ca0e:	f200 80e7 	bhi.w	1cbe0 <net_context_get+0x1e8>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   1ca12:	2a11      	cmp	r2, #17
   1ca14:	d002      	beq.n	1ca1c <net_context_get+0x24>
   1ca16:	2a06      	cmp	r2, #6
   1ca18:	f040 80e5 	bne.w	1cbe6 <net_context_get+0x1ee>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1ca1c:	2901      	cmp	r1, #1
   1ca1e:	d01c      	beq.n	1ca5a <net_context_get+0x62>
   1ca20:	2902      	cmp	r1, #2
   1ca22:	d01f      	beq.n	1ca64 <net_context_get+0x6c>
	if (!context) {
   1ca24:	2b00      	cmp	r3, #0
   1ca26:	f000 80e1 	beq.w	1cbec <net_context_get+0x1f4>
   1ca2a:	461f      	mov	r7, r3
   1ca2c:	4690      	mov	r8, r2
   1ca2e:	460e      	mov	r6, r1
   1ca30:	4681      	mov	r9, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1ca32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ca36:	4870      	ldr	r0, [pc, #448]	; (1cbf8 <net_context_get+0x200>)
   1ca38:	f00c fcce 	bl	293d8 <_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1ca3c:	2400      	movs	r4, #0
   1ca3e:	2c05      	cmp	r4, #5
   1ca40:	f300 80c5 	bgt.w	1cbce <net_context_get+0x1d6>
	return context->flags & NET_CONTEXT_IN_USE;
   1ca44:	2568      	movs	r5, #104	; 0x68
   1ca46:	4b6d      	ldr	r3, [pc, #436]	; (1cbfc <net_context_get+0x204>)
   1ca48:	fb05 3504 	mla	r5, r5, r4, r3
   1ca4c:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
		if (net_context_is_used(&contexts[i])) {
   1ca50:	f013 0f01 	tst.w	r3, #1
   1ca54:	d00b      	beq.n	1ca6e <net_context_get+0x76>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1ca56:	3401      	adds	r4, #1
   1ca58:	e7f1      	b.n	1ca3e <net_context_get+0x46>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1ca5a:	2a11      	cmp	r2, #17
   1ca5c:	d1e0      	bne.n	1ca20 <net_context_get+0x28>
		return -EOPNOTSUPP;
   1ca5e:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1ca62:	e076      	b.n	1cb52 <net_context_get+0x15a>
	    (type == SOCK_DGRAM && ip_proto == IPPROTO_TCP)) {
   1ca64:	2a06      	cmp	r2, #6
   1ca66:	d1dd      	bne.n	1ca24 <net_context_get+0x2c>
		return -EOPNOTSUPP;
   1ca68:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1ca6c:	e071      	b.n	1cb52 <net_context_get+0x15a>
		if (ip_proto == IPPROTO_TCP) {
   1ca6e:	f1b8 0f06 	cmp.w	r8, #6
   1ca72:	d071      	beq.n	1cb58 <net_context_get+0x160>
		contexts[i].flags = 0;
   1ca74:	f04f 0a68 	mov.w	sl, #104	; 0x68
   1ca78:	4b60      	ldr	r3, [pc, #384]	; (1cbfc <net_context_get+0x204>)
   1ca7a:	fb0a 3a04 	mla	sl, sl, r4, r3
   1ca7e:	2300      	movs	r3, #0
   1ca80:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
		atomic_set(&contexts[i].refcount, 1);
   1ca84:	f10a 0304 	add.w	r3, sl, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ca88:	2201      	movs	r2, #1
   1ca8a:	f3bf 8f5b 	dmb	ish
   1ca8e:	e853 1f00 	ldrex	r1, [r3]
   1ca92:	e843 2000 	strex	r0, r2, [r3]
   1ca96:	2800      	cmp	r0, #0
   1ca98:	d1f9      	bne.n	1ca8e <net_context_get+0x96>
   1ca9a:	f3bf 8f5b 	dmb	ish
	if (family == AF_INET6) {
   1ca9e:	f1b9 0f0a 	cmp.w	r9, #10
   1caa2:	d06d      	beq.n	1cb80 <net_context_get+0x188>
	context->flags &= ~NET_CONTEXT_FAMILY;
   1caa4:	2368      	movs	r3, #104	; 0x68
   1caa6:	4a55      	ldr	r2, [pc, #340]	; (1cbfc <net_context_get+0x204>)
   1caa8:	fb03 2304 	mla	r3, r3, r4, r2
   1caac:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1cab0:	f022 0210 	bic.w	r2, r2, #16
   1cab4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (type == SOCK_STREAM) {
   1cab8:	2e01      	cmp	r6, #1
   1caba:	d068      	beq.n	1cb8e <net_context_get+0x196>
	context->flags &= ~NET_CONTEXT_TYPE;
   1cabc:	2368      	movs	r3, #104	; 0x68
   1cabe:	4a4f      	ldr	r2, [pc, #316]	; (1cbfc <net_context_get+0x204>)
   1cac0:	fb03 2304 	mla	r3, r3, r4, r2
   1cac4:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1cac8:	f022 0220 	bic.w	r2, r2, #32
   1cacc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (ip_proto == IPPROTO_TCP) {
   1cad0:	f1b8 0f06 	cmp.w	r8, #6
   1cad4:	d066      	beq.n	1cba4 <net_context_get+0x1ac>
	context->flags &= ~NET_CONTEXT_PROTO;
   1cad6:	2368      	movs	r3, #104	; 0x68
   1cad8:	4a48      	ldr	r2, [pc, #288]	; (1cbfc <net_context_get+0x204>)
   1cada:	fb03 2304 	mla	r3, r3, r4, r2
   1cade:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1cae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1cae6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1caea:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1cbfc <net_context_get+0x204>
   1caee:	2568      	movs	r5, #104	; 0x68
   1caf0:	fb05 f504 	mul.w	r5, r5, r4
   1caf4:	eb08 0305 	add.w	r3, r8, r5
   1caf8:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1cafc:	f042 0201 	orr.w	r2, r2, #1
   1cb00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].iface = 0;
   1cb04:	2600      	movs	r6, #0
   1cb06:	f883 605c 	strb.w	r6, [r3, #92]	; 0x5c
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1cb0a:	f105 0010 	add.w	r0, r5, #16
   1cb0e:	4440      	add	r0, r8
   1cb10:	2218      	movs	r2, #24
   1cb12:	4631      	mov	r1, r6
   1cb14:	3004      	adds	r0, #4
   1cb16:	f00d feff 	bl	2a918 <memset>
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   1cb1a:	3508      	adds	r5, #8
   1cb1c:	4445      	add	r5, r8
   1cb1e:	220c      	movs	r2, #12
   1cb20:	4631      	mov	r1, r6
   1cb22:	4628      	mov	r0, r5
   1cb24:	f00d fef8 	bl	2a918 <memset>
		if (family == AF_INET6) {
   1cb28:	f1b9 0f0a 	cmp.w	r9, #10
   1cb2c:	d045      	beq.n	1cbba <net_context_get+0x1c2>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1cb2e:	2068      	movs	r0, #104	; 0x68
   1cb30:	fb00 f404 	mul.w	r4, r0, r4
   1cb34:	3440      	adds	r4, #64	; 0x40
   1cb36:	4831      	ldr	r0, [pc, #196]	; (1cbfc <net_context_get+0x204>)
   1cb38:	4420      	add	r0, r4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1cb3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cb3e:	2101      	movs	r1, #1
   1cb40:	3004      	adds	r0, #4
   1cb42:	f00c fc2d 	bl	293a0 <_impl_k_sem_init>
		*context = &contexts[i];
   1cb46:	f8c7 a000 	str.w	sl, [r7]
		ret = 0;
   1cb4a:	2400      	movs	r4, #0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1cb4c:	482a      	ldr	r0, [pc, #168]	; (1cbf8 <net_context_get+0x200>)
   1cb4e:	f00c fc30 	bl	293b2 <_impl_k_sem_give>
}
   1cb52:	4620      	mov	r0, r4
   1cb54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			contexts[i].tcp = net_tcp_alloc(&contexts[i]);
   1cb58:	2568      	movs	r5, #104	; 0x68
   1cb5a:	4b28      	ldr	r3, [pc, #160]	; (1cbfc <net_context_get+0x204>)
   1cb5c:	fb05 3504 	mla	r5, r5, r4, r3
   1cb60:	4628      	mov	r0, r5
   1cb62:	f006 fdab 	bl	236bc <net_tcp_alloc>
   1cb66:	6628      	str	r0, [r5, #96]	; 0x60
			if (!contexts[i].tcp) {
   1cb68:	2800      	cmp	r0, #0
   1cb6a:	d042      	beq.n	1cbf2 <net_context_get+0x1fa>
			k_delayed_work_init(&contexts[i].tcp->ack_timer,
   1cb6c:	4924      	ldr	r1, [pc, #144]	; (1cc00 <net_context_get+0x208>)
   1cb6e:	3008      	adds	r0, #8
   1cb70:	f00d f9f0 	bl	29f54 <k_delayed_work_init>
			k_delayed_work_init(&contexts[i].tcp->fin_timer,
   1cb74:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1cb76:	4923      	ldr	r1, [pc, #140]	; (1cc04 <net_context_get+0x20c>)
   1cb78:	3030      	adds	r0, #48	; 0x30
   1cb7a:	f00d f9eb 	bl	29f54 <k_delayed_work_init>
   1cb7e:	e779      	b.n	1ca74 <net_context_get+0x7c>
		context->flags |= NET_CONTEXT_FAMILY;
   1cb80:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
   1cb84:	f042 0210 	orr.w	r2, r2, #16
   1cb88:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
   1cb8c:	e794      	b.n	1cab8 <net_context_get+0xc0>
		context->flags |= NET_CONTEXT_TYPE;
   1cb8e:	2368      	movs	r3, #104	; 0x68
   1cb90:	4a1a      	ldr	r2, [pc, #104]	; (1cbfc <net_context_get+0x204>)
   1cb92:	fb03 2304 	mla	r3, r3, r4, r2
   1cb96:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1cb9a:	f042 0220 	orr.w	r2, r2, #32
   1cb9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1cba2:	e795      	b.n	1cad0 <net_context_get+0xd8>
		context->flags |= NET_CONTEXT_PROTO;
   1cba4:	2368      	movs	r3, #104	; 0x68
   1cba6:	4a15      	ldr	r2, [pc, #84]	; (1cbfc <net_context_get+0x204>)
   1cba8:	fb03 2304 	mla	r3, r3, r4, r2
   1cbac:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1cbb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1cbb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1cbb8:	e797      	b.n	1caea <net_context_get+0xf2>
			addr6->sin6_port = find_available_port(&contexts[i],
   1cbba:	4629      	mov	r1, r5
   1cbbc:	4650      	mov	r0, sl
   1cbbe:	f7ff fcf1 	bl	1c5a4 <find_available_port>
   1cbc2:	8068      	strh	r0, [r5, #2]
			if (!addr6->sin6_port) {
   1cbc4:	2800      	cmp	r0, #0
   1cbc6:	d1b2      	bne.n	1cb2e <net_context_get+0x136>
				return -EADDRINUSE;
   1cbc8:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1cbcc:	e7c1      	b.n	1cb52 <net_context_get+0x15a>
	int i, ret = -ENOENT;
   1cbce:	f06f 0401 	mvn.w	r4, #1
   1cbd2:	e7bb      	b.n	1cb4c <net_context_get+0x154>
		return -EPFNOSUPPORT;
   1cbd4:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   1cbd8:	e7bb      	b.n	1cb52 <net_context_get+0x15a>
		return -EAFNOSUPPORT;
   1cbda:	f06f 0469 	mvn.w	r4, #105	; 0x69
   1cbde:	e7b8      	b.n	1cb52 <net_context_get+0x15a>
		return -EPROTOTYPE;
   1cbe0:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   1cbe4:	e7b5      	b.n	1cb52 <net_context_get+0x15a>
		return -EPROTONOSUPPORT;
   1cbe6:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   1cbea:	e7b2      	b.n	1cb52 <net_context_get+0x15a>
		return -EINVAL;
   1cbec:	f06f 0415 	mvn.w	r4, #21
   1cbf0:	e7af      	b.n	1cb52 <net_context_get+0x15a>
				return -ENOBUFS;
   1cbf2:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1cbf6:	e7ac      	b.n	1cb52 <net_context_get+0x15a>
   1cbf8:	20001f18 	.word	0x20001f18
   1cbfc:	20001ca8 	.word	0x20001ca8
   1cc00:	0001ccd1 	.word	0x0001ccd1
   1cc04:	0001ccc5 	.word	0x0001ccc5

0001cc08 <net_context_ref>:
	int old_rc = atomic_inc(&context->refcount);
   1cc08:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1cc0a:	f3bf 8f5b 	dmb	ish
   1cc0e:	e853 0f00 	ldrex	r0, [r3]
   1cc12:	1c42      	adds	r2, r0, #1
   1cc14:	e843 2100 	strex	r1, r2, [r3]
   1cc18:	2900      	cmp	r1, #0
   1cc1a:	d1f8      	bne.n	1cc0e <net_context_ref+0x6>
   1cc1c:	f3bf 8f5b 	dmb	ish
}
   1cc20:	3001      	adds	r0, #1
   1cc22:	4770      	bx	lr

0001cc24 <net_context_unref>:
{
   1cc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int old_rc = atomic_dec(&context->refcount);
   1cc26:	1d02      	adds	r2, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1cc28:	f3bf 8f5b 	dmb	ish
   1cc2c:	e852 3f00 	ldrex	r3, [r2]
   1cc30:	1e59      	subs	r1, r3, #1
   1cc32:	e842 1400 	strex	r4, r1, [r2]
   1cc36:	2c00      	cmp	r4, #0
   1cc38:	d1f8      	bne.n	1cc2c <net_context_unref+0x8>
   1cc3a:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   1cc3e:	2b01      	cmp	r3, #1
   1cc40:	d001      	beq.n	1cc46 <net_context_unref+0x22>
		return old_rc - 1;
   1cc42:	1e58      	subs	r0, r3, #1
   1cc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cc46:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1cc48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cc4c:	481b      	ldr	r0, [pc, #108]	; (1ccbc <net_context_unref+0x98>)
   1cc4e:	f00c fbc3 	bl	293d8 <_impl_k_sem_take>
	if (context->tcp) {
   1cc52:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1cc54:	b13b      	cbz	r3, 1cc66 <net_context_unref+0x42>
   1cc56:	2500      	movs	r5, #0
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1cc58:	2d00      	cmp	r5, #0
   1cc5a:	dd15      	ble.n	1cc88 <net_context_unref+0x64>
		net_tcp_release(context->tcp);
   1cc5c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1cc5e:	f006 fe3d 	bl	238dc <net_tcp_release>
		context->tcp = NULL;
   1cc62:	2300      	movs	r3, #0
   1cc64:	6623      	str	r3, [r4, #96]	; 0x60
	if (context->conn_handler) {
   1cc66:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1cc68:	b118      	cbz	r0, 1cc72 <net_context_unref+0x4e>
		net_conn_unregister(context->conn_handler);
   1cc6a:	f008 fb13 	bl	25294 <net_conn_unregister>
		context->conn_handler = NULL;
   1cc6e:	2300      	movs	r3, #0
   1cc70:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1cc72:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	context->flags &= ~NET_CONTEXT_IN_USE;
   1cc76:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1cc7a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1cc7e:	480f      	ldr	r0, [pc, #60]	; (1ccbc <net_context_unref+0x98>)
   1cc80:	f00c fb97 	bl	293b2 <_impl_k_sem_give>
	return 0;
   1cc84:	2000      	movs	r0, #0
}
   1cc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (tcp_backlog[i].tcp != context->tcp) {
   1cc88:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1cc8c:	0113      	lsls	r3, r2, #4
   1cc8e:	4a0c      	ldr	r2, [pc, #48]	; (1ccc0 <net_context_unref+0x9c>)
   1cc90:	58d2      	ldr	r2, [r2, r3]
   1cc92:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1cc94:	429a      	cmp	r2, r3
   1cc96:	d001      	beq.n	1cc9c <net_context_unref+0x78>
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1cc98:	3501      	adds	r5, #1
   1cc9a:	e7dd      	b.n	1cc58 <net_context_unref+0x34>
			k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   1cc9c:	4f08      	ldr	r7, [pc, #32]	; (1ccc0 <net_context_unref+0x9c>)
   1cc9e:	00ae      	lsls	r6, r5, #2
   1cca0:	1972      	adds	r2, r6, r5
   1cca2:	0113      	lsls	r3, r2, #4
   1cca4:	3328      	adds	r3, #40	; 0x28
   1cca6:	18f8      	adds	r0, r7, r3
   1cca8:	f00d f972 	bl	29f90 <k_delayed_work_cancel>
			memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   1ccac:	442e      	add	r6, r5
   1ccae:	0130      	lsls	r0, r6, #4
   1ccb0:	2250      	movs	r2, #80	; 0x50
   1ccb2:	2100      	movs	r1, #0
   1ccb4:	4438      	add	r0, r7
   1ccb6:	f00d fe2f 	bl	2a918 <memset>
   1ccba:	e7ed      	b.n	1cc98 <net_context_unref+0x74>
   1ccbc:	20001f18 	.word	0x20001f18
   1ccc0:	20001f30 	.word	0x20001f30

0001ccc4 <handle_fin_timeout>:
{
   1ccc4:	b508      	push	{r3, lr}
	net_context_unref(tcp->context);
   1ccc6:	f850 0c30 	ldr.w	r0, [r0, #-48]
   1ccca:	f7ff ffab 	bl	1cc24 <net_context_unref>
   1ccce:	bd08      	pop	{r3, pc}

0001ccd0 <handle_ack_timeout>:
	return (enum net_tcp_state)tcp->state;
   1ccd0:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1ccd4:	f3c3 3343 	ubfx	r3, r3, #13, #4
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   1ccd8:	2b06      	cmp	r3, #6
   1ccda:	d000      	beq.n	1ccde <handle_ack_timeout+0xe>
   1ccdc:	4770      	bx	lr
{
   1ccde:	b510      	push	{r4, lr}
   1cce0:	f1a0 0208 	sub.w	r2, r0, #8
   1cce4:	4604      	mov	r4, r0
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   1cce6:	2100      	movs	r1, #0
   1cce8:	4610      	mov	r0, r2
   1ccea:	f006 fdcc 	bl	23886 <net_tcp_change_state>
		net_context_unref(tcp->context);
   1ccee:	f854 0c08 	ldr.w	r0, [r4, #-8]
   1ccf2:	f7ff ff97 	bl	1cc24 <net_context_unref>
   1ccf6:	bd10      	pop	{r4, pc}

0001ccf8 <tcp_synack_received>:
NET_CONN_CB(tcp_synack_received)
   1ccf8:	b570      	push	{r4, r5, r6, lr}
   1ccfa:	4605      	mov	r5, r0
   1ccfc:	460e      	mov	r6, r1
   1ccfe:	4614      	mov	r4, r2
   1cd00:	4610      	mov	r0, r2
   1cd02:	f7ff ff81 	bl	1cc08 <net_context_ref>
   1cd06:	4622      	mov	r2, r4
   1cd08:	4631      	mov	r1, r6
   1cd0a:	4628      	mov	r0, r5
   1cd0c:	f7ff fd5e 	bl	1c7cc <_tcp_synack_received>
   1cd10:	4605      	mov	r5, r0
   1cd12:	4620      	mov	r0, r4
   1cd14:	f7ff ff86 	bl	1cc24 <net_context_unref>
   1cd18:	4628      	mov	r0, r5
   1cd1a:	bd70      	pop	{r4, r5, r6, pc}

0001cd1c <_tcp_established>:
{
   1cd1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cd20:	b087      	sub	sp, #28
   1cd22:	4607      	mov	r7, r0
   1cd24:	460e      	mov	r6, r1
   1cd26:	4614      	mov	r4, r2
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1cd28:	a901      	add	r1, sp, #4
   1cd2a:	4630      	mov	r0, r6
   1cd2c:	f006 ff9a 	bl	23c64 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1cd30:	2800      	cmp	r0, #0
   1cd32:	f000 80b5 	beq.w	1cea0 <_tcp_established+0x184>
   1cd36:	4605      	mov	r5, r0
	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   1cd38:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1cd3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1cd3e:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1cd42:	2b03      	cmp	r3, #3
   1cd44:	d804      	bhi.n	1cd50 <_tcp_established+0x34>
		return NET_DROP;
   1cd46:	2502      	movs	r5, #2
}
   1cd48:	4628      	mov	r0, r5
   1cd4a:	b007      	add	sp, #28
   1cd4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   1cd50:	f890 800d 	ldrb.w	r8, [r0, #13]
	if (tcp_flags & NET_TCP_ACK) {
   1cd54:	f018 0f10 	tst.w	r8, #16
   1cd58:	d116      	bne.n	1cd88 <_tcp_established+0x6c>
	if (tcp_flags & NET_TCP_RST) {
   1cd5a:	f018 0f04 	tst.w	r8, #4
   1cd5e:	d121      	bne.n	1cda4 <_tcp_established+0x88>
	return ((u16_t)src[0] << 8) | src[1];
   1cd60:	792a      	ldrb	r2, [r5, #4]
   1cd62:	796b      	ldrb	r3, [r5, #5]
   1cd64:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   1cd68:	79a9      	ldrb	r1, [r5, #6]
   1cd6a:	79eb      	ldrb	r3, [r5, #7]
   1cd6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1cd70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			    context->tcp->send_ack) < 0) {
   1cd74:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1cd76:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   1cd7a:	1a99      	subs	r1, r3, r2
   1cd7c:	2900      	cmp	r1, #0
   1cd7e:	db2e      	blt.n	1cdde <_tcp_established+0xc2>
	if (sys_get_be32(tcp_hdr->seq) - context->tcp->send_ack) {
   1cd80:	429a      	cmp	r2, r3
   1cd82:	d033      	beq.n	1cdec <_tcp_established+0xd0>
		return NET_DROP;
   1cd84:	2502      	movs	r5, #2
   1cd86:	e7df      	b.n	1cd48 <_tcp_established+0x2c>
	return ((u16_t)src[0] << 8) | src[1];
   1cd88:	7a03      	ldrb	r3, [r0, #8]
   1cd8a:	7a41      	ldrb	r1, [r0, #9]
   1cd8c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1cd90:	7a82      	ldrb	r2, [r0, #10]
   1cd92:	7ac3      	ldrb	r3, [r0, #11]
   1cd94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		net_tcp_ack_received(context,
   1cd98:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1cd9c:	4620      	mov	r0, r4
   1cd9e:	f007 fa49 	bl	24234 <net_tcp_ack_received>
   1cda2:	e7da      	b.n	1cd5a <_tcp_established+0x3e>
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1cda4:	4631      	mov	r1, r6
   1cda6:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1cda8:	f006 ffd7 	bl	23d5a <net_tcp_validate_seq>
   1cdac:	b928      	cbnz	r0, 1cdba <_tcp_established+0x9e>
   1cdae:	4a3d      	ldr	r2, [pc, #244]	; (1cea4 <_tcp_established+0x188>)
   1cdb0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1cdb2:	3301      	adds	r3, #1
   1cdb4:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1cdb6:	2502      	movs	r5, #2
   1cdb8:	e7c6      	b.n	1cd48 <_tcp_established+0x2c>
	net_stats.tcp.rst++;
   1cdba:	4a3a      	ldr	r2, [pc, #232]	; (1cea4 <_tcp_established+0x188>)
   1cdbc:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1cdbe:	3301      	adds	r3, #1
   1cdc0:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->recv_cb) {
   1cdc2:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1cdc4:	b135      	cbz	r5, 1cdd4 <_tcp_established+0xb8>
					 context->tcp->recv_user_data);
   1cdc6:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, -ECONNRESET,
   1cdc8:	685b      	ldr	r3, [r3, #4]
   1cdca:	f06f 0267 	mvn.w	r2, #103	; 0x67
   1cdce:	2100      	movs	r1, #0
   1cdd0:	4620      	mov	r0, r4
   1cdd2:	47a8      	blx	r5
		net_context_unref(context);
   1cdd4:	4620      	mov	r0, r4
   1cdd6:	f7ff ff25 	bl	1cc24 <net_context_unref>
		return NET_DROP;
   1cdda:	2502      	movs	r5, #2
   1cddc:	e7b4      	b.n	1cd48 <_tcp_established+0x2c>
		send_ack(context, &conn->remote_addr, true);
   1cdde:	2201      	movs	r2, #1
   1cde0:	4639      	mov	r1, r7
   1cde2:	4620      	mov	r0, r4
   1cde4:	f7ff fcd2 	bl	1c78c <send_ack>
		return NET_DROP;
   1cde8:	2502      	movs	r5, #2
   1cdea:	e7ad      	b.n	1cd48 <_tcp_established+0x2c>
	set_appdata_values(pkt, IPPROTO_TCP);
   1cdec:	2106      	movs	r1, #6
   1cdee:	4630      	mov	r0, r6
   1cdf0:	f7ff fc25 	bl	1c63e <set_appdata_values>
	return pkt->appdatalen;
   1cdf4:	f8b6 9030 	ldrh.w	r9, [r6, #48]	; 0x30
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   1cdf8:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1cdfa:	f006 fcc5 	bl	23788 <net_tcp_get_recv_wnd>
   1cdfe:	4581      	cmp	r9, r0
   1ce00:	d901      	bls.n	1ce06 <_tcp_established+0xea>
		return NET_DROP;
   1ce02:	2502      	movs	r5, #2
   1ce04:	e7a0      	b.n	1cd48 <_tcp_established+0x2c>
	ret = packet_received(conn, pkt, context->tcp->recv_user_data);
   1ce06:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ce08:	685a      	ldr	r2, [r3, #4]
   1ce0a:	4631      	mov	r1, r6
   1ce0c:	4638      	mov	r0, r7
   1ce0e:	f7ff fc4b 	bl	1c6a8 <packet_received>
   1ce12:	4605      	mov	r5, r0
	context->tcp->send_ack += data_len;
   1ce14:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1ce16:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1ce1a:	444b      	add	r3, r9
   1ce1c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	if (tcp_flags & NET_TCP_FIN) {
   1ce20:	f018 0f01 	tst.w	r8, #1
   1ce24:	d022      	beq.n	1ce6c <_tcp_established+0x150>
		context->tcp->fin_rcvd = 1;
   1ce26:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1ce28:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   1ce2c:	f043 0304 	orr.w	r3, r3, #4
   1ce30:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   1ce34:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1ce36:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   1ce3a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1ce3e:	2b04      	cmp	r3, #4
   1ce40:	d02a      	beq.n	1ce98 <_tcp_established+0x17c>
		context->tcp->send_ack += 1;
   1ce42:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1ce44:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1ce48:	3301      	adds	r3, #1
   1ce4a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		if (context->recv_cb) {
   1ce4e:	6b26      	ldr	r6, [r4, #48]	; 0x30
   1ce50:	b12e      	cbz	r6, 1ce5e <_tcp_established+0x142>
					 context->tcp->recv_user_data);
   1ce52:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, 0,
   1ce54:	685b      	ldr	r3, [r3, #4]
   1ce56:	2200      	movs	r2, #0
   1ce58:	4611      	mov	r1, r2
   1ce5a:	4620      	mov	r0, r4
   1ce5c:	47b0      	blx	r6
		k_delayed_work_submit(&context->tcp->ack_timer, ACK_TIMEOUT);
   1ce5e:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1ce60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ce64:	3108      	adds	r1, #8
   1ce66:	4810      	ldr	r0, [pc, #64]	; (1cea8 <_tcp_established+0x18c>)
   1ce68:	f00d f8ec 	bl	2a044 <k_delayed_work_submit_to_queue>
	send_ack(context, &conn->remote_addr, false);
   1ce6c:	2200      	movs	r2, #0
   1ce6e:	4639      	mov	r1, r7
   1ce70:	4620      	mov	r0, r4
   1ce72:	f7ff fc8b 	bl	1c78c <send_ack>
	if (sys_slist_is_empty(&context->tcp->sent_list)
   1ce76:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ce78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   1ce7c:	2a00      	cmp	r2, #0
   1ce7e:	f47f af63 	bne.w	1cd48 <_tcp_established+0x2c>
	    && context->tcp->fin_sent) {
   1ce82:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
   1ce86:	f003 0306 	and.w	r3, r3, #6
   1ce8a:	2b06      	cmp	r3, #6
   1ce8c:	f47f af5c 	bne.w	1cd48 <_tcp_established+0x2c>
		net_context_unref(context);
   1ce90:	4620      	mov	r0, r4
   1ce92:	f7ff fec7 	bl	1cc24 <net_context_unref>
   1ce96:	e757      	b.n	1cd48 <_tcp_established+0x2c>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   1ce98:	2105      	movs	r1, #5
   1ce9a:	f006 fcf4 	bl	23886 <net_tcp_change_state>
   1ce9e:	e7d0      	b.n	1ce42 <_tcp_established+0x126>
		return NET_DROP;
   1cea0:	2502      	movs	r5, #2
   1cea2:	e751      	b.n	1cd48 <_tcp_established+0x2c>
   1cea4:	20002b58 	.word	0x20002b58
   1cea8:	20002c78 	.word	0x20002c78

0001ceac <tcp_established>:
NET_CONN_CB(tcp_established)
   1ceac:	b570      	push	{r4, r5, r6, lr}
   1ceae:	4605      	mov	r5, r0
   1ceb0:	460e      	mov	r6, r1
   1ceb2:	4614      	mov	r4, r2
   1ceb4:	4610      	mov	r0, r2
   1ceb6:	f7ff fea7 	bl	1cc08 <net_context_ref>
   1ceba:	4622      	mov	r2, r4
   1cebc:	4631      	mov	r1, r6
   1cebe:	4628      	mov	r0, r5
   1cec0:	f7ff ff2c 	bl	1cd1c <_tcp_established>
   1cec4:	4605      	mov	r5, r0
   1cec6:	4620      	mov	r0, r4
   1cec8:	f7ff feac 	bl	1cc24 <net_context_unref>
   1cecc:	4628      	mov	r0, r5
   1cece:	bd70      	pop	{r4, r5, r6, pc}

0001ced0 <net_context_put>:
	if (!PART_OF_ARRAY(contexts, context)) {
   1ced0:	b390      	cbz	r0, 1cf38 <net_context_put+0x68>
{
   1ced2:	b510      	push	{r4, lr}
   1ced4:	4604      	mov	r4, r0
	if (!PART_OF_ARRAY(contexts, context)) {
   1ced6:	4a1d      	ldr	r2, [pc, #116]	; (1cf4c <net_context_put+0x7c>)
   1ced8:	4290      	cmp	r0, r2
   1ceda:	d330      	bcc.n	1cf3e <net_context_put+0x6e>
   1cedc:	f502 721c 	add.w	r2, r2, #624	; 0x270
   1cee0:	4290      	cmp	r0, r2
   1cee2:	d22f      	bcs.n	1cf44 <net_context_put+0x74>
	context->connect_cb = NULL;
   1cee4:	2200      	movs	r2, #0
   1cee6:	6382      	str	r2, [r0, #56]	; 0x38
	context->recv_cb = NULL;
   1cee8:	6302      	str	r2, [r0, #48]	; 0x30
	context->send_cb = NULL;
   1ceea:	6342      	str	r2, [r0, #52]	; 0x34
	if (context->flags & NET_CONTEXT_PROTO) {
   1ceec:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1cef0:	f012 0f40 	tst.w	r2, #64	; 0x40
   1cef4:	d007      	beq.n	1cf06 <net_context_put+0x36>
		return IPPROTO_TCP;
   1cef6:	2106      	movs	r1, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1cef8:	2906      	cmp	r1, #6
   1cefa:	d006      	beq.n	1cf0a <net_context_put+0x3a>
	net_context_unref(context);
   1cefc:	4620      	mov	r0, r4
   1cefe:	f7ff fe91 	bl	1cc24 <net_context_unref>
	return 0;
   1cf02:	2000      	movs	r0, #0
   1cf04:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1cf06:	2111      	movs	r1, #17
   1cf08:	e7f6      	b.n	1cef8 <net_context_put+0x28>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1cf0a:	f3c2 0241 	ubfx	r2, r2, #1, #2
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   1cf0e:	2a02      	cmp	r2, #2
   1cf10:	d001      	beq.n	1cf16 <net_context_put+0x46>
   1cf12:	2a03      	cmp	r2, #3
   1cf14:	d1f2      	bne.n	1cefc <net_context_put+0x2c>
		    && !context->tcp->fin_rcvd) {
   1cf16:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1cf18:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
   1cf1c:	f013 0f04 	tst.w	r3, #4
   1cf20:	d1ec      	bne.n	1cefc <net_context_put+0x2c>
   1cf22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cf26:	3130      	adds	r1, #48	; 0x30
   1cf28:	4809      	ldr	r0, [pc, #36]	; (1cf50 <net_context_put+0x80>)
   1cf2a:	f00d f88b 	bl	2a044 <k_delayed_work_submit_to_queue>
			queue_fin(context);
   1cf2e:	4620      	mov	r0, r4
   1cf30:	f7ff fb59 	bl	1c5e6 <queue_fin>
			return 0;
   1cf34:	2000      	movs	r0, #0
   1cf36:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1cf38:	f06f 0015 	mvn.w	r0, #21
   1cf3c:	4770      	bx	lr
   1cf3e:	f06f 0015 	mvn.w	r0, #21
   1cf42:	bd10      	pop	{r4, pc}
   1cf44:	f06f 0015 	mvn.w	r0, #21
}
   1cf48:	bd10      	pop	{r4, pc}
   1cf4a:	bf00      	nop
   1cf4c:	20001ca8 	.word	0x20001ca8
   1cf50:	20002c78 	.word	0x20002c78

0001cf54 <net_context_bind>:
	if (context->conn_handler) {
   1cf54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1cf56:	2b00      	cmp	r3, #0
   1cf58:	d15c      	bne.n	1d014 <net_context_bind+0xc0>
	if (addr->sa_family == AF_INET6) {
   1cf5a:	880b      	ldrh	r3, [r1, #0]
   1cf5c:	2b0a      	cmp	r3, #10
   1cf5e:	d15d      	bne.n	1d01c <net_context_bind+0xc8>
{
   1cf60:	b570      	push	{r4, r5, r6, lr}
   1cf62:	b082      	sub	sp, #8
		struct net_if *iface = NULL;
   1cf64:	2300      	movs	r3, #0
   1cf66:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1cf68:	2a17      	cmp	r2, #23
   1cf6a:	d945      	bls.n	1cff8 <net_context_bind+0xa4>
   1cf6c:	460d      	mov	r5, r1
   1cf6e:	4604      	mov	r4, r0
	return addr->s6_addr[0] == 0xFF;
   1cf70:	790b      	ldrb	r3, [r1, #4]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1cf72:	2bff      	cmp	r3, #255	; 0xff
   1cf74:	d009      	beq.n	1cf8a <net_context_bind+0x36>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1cf76:	684b      	ldr	r3, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cf78:	b983      	cbnz	r3, 1cf9c <net_context_bind+0x48>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1cf7a:	688b      	ldr	r3, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1cf7c:	bb2b      	cbnz	r3, 1cfca <net_context_bind+0x76>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cf7e:	68cb      	ldr	r3, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1cf80:	bb2b      	cbnz	r3, 1cfce <net_context_bind+0x7a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1cf82:	690b      	ldr	r3, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cf84:	b32b      	cbz	r3, 1cfd2 <net_context_bind+0x7e>
   1cf86:	2300      	movs	r3, #0
   1cf88:	e009      	b.n	1cf9e <net_context_bind+0x4a>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   1cf8a:	a901      	add	r1, sp, #4
   1cf8c:	1d28      	adds	r0, r5, #4
   1cf8e:	f7fe fccb 	bl	1b928 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   1cf92:	4606      	mov	r6, r0
   1cf94:	2800      	cmp	r0, #0
   1cf96:	d034      	beq.n	1d002 <net_context_bind+0xae>
			ptr = &maddr->address.in6_addr;
   1cf98:	3608      	adds	r6, #8
   1cf9a:	e007      	b.n	1cfac <net_context_bind+0x58>
   1cf9c:	2300      	movs	r3, #0
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1cf9e:	b1d3      	cbz	r3, 1cfd6 <net_context_bind+0x82>
			iface = net_if_get_default();
   1cfa0:	f7fe fa4c 	bl	1b43c <net_if_get_default>
   1cfa4:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   1cfa6:	f002 fde9 	bl	1fb7c <net_ipv6_unspecified_address>
   1cfaa:	4606      	mov	r6, r0
		if (!iface) {
   1cfac:	9801      	ldr	r0, [sp, #4]
   1cfae:	b370      	cbz	r0, 1d00e <net_context_bind+0xba>
	context->iface = net_if_get_by_iface(iface);
   1cfb0:	f7ff f9ec 	bl	1c38c <net_if_get_by_iface>
   1cfb4:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1cfb8:	230a      	movs	r3, #10
   1cfba:	8123      	strh	r3, [r4, #8]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   1cfbc:	60e6      	str	r6, [r4, #12]
		if (addr6->sin6_port) {
   1cfbe:	8869      	ldrh	r1, [r5, #2]
   1cfc0:	b989      	cbnz	r1, 1cfe6 <net_context_bind+0x92>
				net_sin6_ptr(&context->local)->sin6_port;
   1cfc2:	8963      	ldrh	r3, [r4, #10]
			addr6->sin6_port =
   1cfc4:	806b      	strh	r3, [r5, #2]
		return 0;
   1cfc6:	2300      	movs	r3, #0
   1cfc8:	e018      	b.n	1cffc <net_context_bind+0xa8>
   1cfca:	2300      	movs	r3, #0
   1cfcc:	e7e7      	b.n	1cf9e <net_context_bind+0x4a>
   1cfce:	2300      	movs	r3, #0
   1cfd0:	e7e5      	b.n	1cf9e <net_context_bind+0x4a>
   1cfd2:	2301      	movs	r3, #1
   1cfd4:	e7e3      	b.n	1cf9e <net_context_bind+0x4a>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   1cfd6:	a901      	add	r1, sp, #4
   1cfd8:	1d28      	adds	r0, r5, #4
   1cfda:	f7fe fa5b 	bl	1b494 <net_if_ipv6_addr_lookup>
			if (!ifaddr) {
   1cfde:	4606      	mov	r6, r0
   1cfe0:	b190      	cbz	r0, 1d008 <net_context_bind+0xb4>
			ptr = &ifaddr->address.in6_addr;
   1cfe2:	3604      	adds	r6, #4
   1cfe4:	e7e2      	b.n	1cfac <net_context_bind+0x58>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   1cfe6:	462a      	mov	r2, r5
   1cfe8:	4618      	mov	r0, r3
   1cfea:	f7ff fa9f 	bl	1c52c <check_used_port>
			if (!ret) {
   1cfee:	4603      	mov	r3, r0
   1cff0:	b920      	cbnz	r0, 1cffc <net_context_bind+0xa8>
					addr6->sin6_port;
   1cff2:	886a      	ldrh	r2, [r5, #2]
				net_sin6_ptr(&context->local)->sin6_port =
   1cff4:	8162      	strh	r2, [r4, #10]
   1cff6:	e001      	b.n	1cffc <net_context_bind+0xa8>
			return -EINVAL;
   1cff8:	f06f 0315 	mvn.w	r3, #21
}
   1cffc:	4618      	mov	r0, r3
   1cffe:	b002      	add	sp, #8
   1d000:	bd70      	pop	{r4, r5, r6, pc}
				return -ENOENT;
   1d002:	f06f 0301 	mvn.w	r3, #1
   1d006:	e7f9      	b.n	1cffc <net_context_bind+0xa8>
				return -ENOENT;
   1d008:	f06f 0301 	mvn.w	r3, #1
   1d00c:	e7f6      	b.n	1cffc <net_context_bind+0xa8>
			return -EADDRNOTAVAIL;
   1d00e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
   1d012:	e7f3      	b.n	1cffc <net_context_bind+0xa8>
		return -EISCONN;
   1d014:	f06f 037e 	mvn.w	r3, #126	; 0x7e
}
   1d018:	4618      	mov	r0, r3
   1d01a:	4770      	bx	lr
	return -EINVAL;
   1d01c:	f06f 0315 	mvn.w	r3, #21
   1d020:	e7fa      	b.n	1d018 <net_context_bind+0xc4>

0001d022 <bind_default>:
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d022:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1d026:	f013 0f10 	tst.w	r3, #16
   1d02a:	d006      	beq.n	1d03a <bind_default+0x18>
		return AF_INET6;
   1d02c:	230a      	movs	r3, #10
	if (family == AF_INET6) {
   1d02e:	2b0a      	cmp	r3, #10
   1d030:	d120      	bne.n	1d074 <bind_default+0x52>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1d032:	68c3      	ldr	r3, [r0, #12]
   1d034:	b11b      	cbz	r3, 1d03e <bind_default+0x1c>
			return 0;
   1d036:	2000      	movs	r0, #0
   1d038:	4770      	bx	lr
	return AF_INET;
   1d03a:	2302      	movs	r3, #2
   1d03c:	e7f7      	b.n	1d02e <bind_default+0xc>
{
   1d03e:	b530      	push	{r4, r5, lr}
   1d040:	b087      	sub	sp, #28
   1d042:	4604      	mov	r4, r0
		addr6.sin6_family = AF_INET6;
   1d044:	ad06      	add	r5, sp, #24
   1d046:	230a      	movs	r3, #10
   1d048:	f825 3d18 	strh.w	r3, [r5, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   1d04c:	f002 fd96 	bl	1fb7c <net_ipv6_unspecified_address>
   1d050:	2210      	movs	r2, #16
   1d052:	4601      	mov	r1, r0
   1d054:	a801      	add	r0, sp, #4
   1d056:	f7e3 f933 	bl	2c0 <memcpy>
			find_available_port(context,
   1d05a:	4629      	mov	r1, r5
   1d05c:	4620      	mov	r0, r4
   1d05e:	f7ff faa1 	bl	1c5a4 <find_available_port>
		addr6.sin6_port =
   1d062:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   1d066:	2218      	movs	r2, #24
   1d068:	4629      	mov	r1, r5
   1d06a:	4620      	mov	r0, r4
   1d06c:	f7ff ff72 	bl	1cf54 <net_context_bind>
}
   1d070:	b007      	add	sp, #28
   1d072:	bd30      	pop	{r4, r5, pc}
	return -EINVAL;
   1d074:	f06f 0015 	mvn.w	r0, #21
   1d078:	4770      	bx	lr

0001d07a <sendto>:
{
   1d07a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d07c:	b085      	sub	sp, #20
   1d07e:	9003      	str	r0, [sp, #12]
	return pkt->context;
   1d080:	68c5      	ldr	r5, [r0, #12]
	return context->flags & NET_CONTEXT_IN_USE;
   1d082:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1d086:	f010 0f01 	tst.w	r0, #1
   1d08a:	d072      	beq.n	1d172 <sendto+0xf8>
	if (context->flags & NET_CONTEXT_PROTO) {
   1d08c:	f010 0f40 	tst.w	r0, #64	; 0x40
   1d090:	d01f      	beq.n	1d0d2 <sendto+0x58>
		return IPPROTO_TCP;
   1d092:	f04f 0e06 	mov.w	lr, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d096:	f1be 0f06 	cmp.w	lr, #6
   1d09a:	d01d      	beq.n	1d0d8 <sendto+0x5e>
   1d09c:	461f      	mov	r7, r3
   1d09e:	4616      	mov	r6, r2
   1d0a0:	460c      	mov	r4, r1
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d0a2:	f1be 0f11 	cmp.w	lr, #17
   1d0a6:	d024      	beq.n	1d0f2 <sendto+0x78>
	if (!dst_addr) {
   1d0a8:	2c00      	cmp	r4, #0
   1d0aa:	d068      	beq.n	1d17e <sendto+0x104>
	if (net_pkt_family(pkt) == AF_INET6) {
   1d0ac:	9903      	ldr	r1, [sp, #12]
	return pkt->family;
   1d0ae:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1d0b2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1d0b6:	2b0a      	cmp	r3, #10
   1d0b8:	d164      	bne.n	1d184 <sendto+0x10a>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1d0ba:	2e17      	cmp	r6, #23
   1d0bc:	d965      	bls.n	1d18a <sendto+0x110>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d0be:	6863      	ldr	r3, [r4, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d0c0:	b9f3      	cbnz	r3, 1d100 <sendto+0x86>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d0c2:	68a3      	ldr	r3, [r4, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d0c4:	bb63      	cbnz	r3, 1d120 <sendto+0xa6>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d0c6:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d0c8:	bb63      	cbnz	r3, 1d124 <sendto+0xaa>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1d0ca:	6923      	ldr	r3, [r4, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d0cc:	b363      	cbz	r3, 1d128 <sendto+0xae>
   1d0ce:	2300      	movs	r3, #0
   1d0d0:	e017      	b.n	1d102 <sendto+0x88>
	return IPPROTO_UDP;
   1d0d2:	f04f 0e11 	mov.w	lr, #17
   1d0d6:	e7de      	b.n	1d096 <sendto+0x1c>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d0d8:	f3c0 0041 	ubfx	r0, r0, #1, #2
		if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1d0dc:	2802      	cmp	r0, #2
   1d0de:	d14b      	bne.n	1d178 <sendto+0xfe>
		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1d0e0:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1d0e2:	f8b0 00a4 	ldrh.w	r0, [r0, #164]	; 0xa4
   1d0e6:	f410 7f80 	tst.w	r0, #256	; 0x100
   1d0ea:	d0d7      	beq.n	1d09c <sendto+0x22>
			return -ESHUTDOWN;
   1d0ec:	f06f 036d 	mvn.w	r3, #109	; 0x6d
   1d0f0:	e03c      	b.n	1d16c <sendto+0xf2>
		ret = bind_default(context);
   1d0f2:	4628      	mov	r0, r5
   1d0f4:	f7ff ff95 	bl	1d022 <bind_default>
		if (ret) {
   1d0f8:	4603      	mov	r3, r0
   1d0fa:	2800      	cmp	r0, #0
   1d0fc:	d0d4      	beq.n	1d0a8 <sendto+0x2e>
   1d0fe:	e035      	b.n	1d16c <sendto+0xf2>
   1d100:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1d102:	2b00      	cmp	r3, #0
   1d104:	d144      	bne.n	1d190 <sendto+0x116>
	if (context->flags & NET_CONTEXT_PROTO) {
   1d106:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1d10a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d10e:	d00d      	beq.n	1d12c <sendto+0xb2>
		return IPPROTO_TCP;
   1d110:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d112:	2b11      	cmp	r3, #17
   1d114:	d00c      	beq.n	1d130 <sendto+0xb6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d116:	2b06      	cmp	r3, #6
   1d118:	d13d      	bne.n	1d196 <sendto+0x11c>
	return net_buf_frags_len(pkt->frags);
   1d11a:	688a      	ldr	r2, [r1, #8]
	size_t bytes = 0;
   1d11c:	2000      	movs	r0, #0
   1d11e:	e011      	b.n	1d144 <sendto+0xca>
   1d120:	2300      	movs	r3, #0
   1d122:	e7ee      	b.n	1d102 <sendto+0x88>
   1d124:	2300      	movs	r3, #0
   1d126:	e7ec      	b.n	1d102 <sendto+0x88>
   1d128:	2301      	movs	r3, #1
   1d12a:	e7ea      	b.n	1d102 <sendto+0x88>
	return IPPROTO_UDP;
   1d12c:	2311      	movs	r3, #17
   1d12e:	e7f0      	b.n	1d112 <sendto+0x98>
		ret = create_udp_packet(context, pkt, dst_addr, &pkt);
   1d130:	ab03      	add	r3, sp, #12
   1d132:	4622      	mov	r2, r4
   1d134:	4628      	mov	r0, r5
   1d136:	f7ff fc0f 	bl	1c958 <create_udp_packet>
   1d13a:	4603      	mov	r3, r0
   1d13c:	e009      	b.n	1d152 <sendto+0xd8>
		bytes += buf->len;
   1d13e:	8994      	ldrh	r4, [r2, #12]
   1d140:	4420      	add	r0, r4
		buf = buf->frags;
   1d142:	6812      	ldr	r2, [r2, #0]
	while (buf) {
   1d144:	2a00      	cmp	r2, #0
   1d146:	d1fa      	bne.n	1d13e <sendto+0xc4>
	pkt->appdatalen = len;
   1d148:	8608      	strh	r0, [r1, #48]	; 0x30
		ret = net_tcp_queue_data(context, pkt);
   1d14a:	4628      	mov	r0, r5
   1d14c:	f006 fd08 	bl	23b60 <net_tcp_queue_data>
   1d150:	4603      	mov	r3, r0
	if (ret < 0) {
   1d152:	2b00      	cmp	r3, #0
   1d154:	db0a      	blt.n	1d16c <sendto+0xf2>
	return send_data(context, pkt, cb, timeout, token, user_data);
   1d156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d158:	9301      	str	r3, [sp, #4]
   1d15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d15c:	9300      	str	r3, [sp, #0]
   1d15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d160:	463a      	mov	r2, r7
   1d162:	9903      	ldr	r1, [sp, #12]
   1d164:	4628      	mov	r0, r5
   1d166:	f7ff fc1d 	bl	1c9a4 <send_data>
   1d16a:	4603      	mov	r3, r0
}
   1d16c:	4618      	mov	r0, r3
   1d16e:	b005      	add	sp, #20
   1d170:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBADF;
   1d172:	f06f 0308 	mvn.w	r3, #8
   1d176:	e7f9      	b.n	1d16c <sendto+0xf2>
			return -ENOTCONN;
   1d178:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d17c:	e7f6      	b.n	1d16c <sendto+0xf2>
		return -EDESTADDRREQ;
   1d17e:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1d182:	e7f3      	b.n	1d16c <sendto+0xf2>
		return -EINVAL;
   1d184:	f06f 0315 	mvn.w	r3, #21
   1d188:	e7f0      	b.n	1d16c <sendto+0xf2>
			return -EINVAL;
   1d18a:	f06f 0315 	mvn.w	r3, #21
   1d18e:	e7ed      	b.n	1d16c <sendto+0xf2>
			return -EDESTADDRREQ;
   1d190:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1d194:	e7ea      	b.n	1d16c <sendto+0xf2>
		return -EPROTONOSUPPORT;
   1d196:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   1d19a:	e7e7      	b.n	1d16c <sendto+0xf2>

0001d19c <recv_udp>:
#if defined(CONFIG_NET_UDP)
static int recv_udp(struct net_context *context,
		    net_context_recv_cb_t cb,
		    s32_t timeout,
		    void *user_data)
{
   1d19c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d19e:	b08f      	sub	sp, #60	; 0x3c
   1d1a0:	4604      	mov	r4, r0
   1d1a2:	460d      	mov	r5, r1
   1d1a4:	461e      	mov	r6, r3
	struct sockaddr local_addr = {
   1d1a6:	2300      	movs	r3, #0
   1d1a8:	9304      	str	r3, [sp, #16]
   1d1aa:	9305      	str	r3, [sp, #20]
   1d1ac:	9306      	str	r3, [sp, #24]
   1d1ae:	9307      	str	r3, [sp, #28]
   1d1b0:	9308      	str	r3, [sp, #32]
   1d1b2:	9309      	str	r3, [sp, #36]	; 0x24
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d1b4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1d1b8:	f013 0f10 	tst.w	r3, #16
   1d1bc:	d037      	beq.n	1d22e <recv_udp+0x92>
		return AF_INET6;
   1d1be:	230a      	movs	r3, #10
   1d1c0:	f8ad 3010 	strh.w	r3, [sp, #16]
	u16_t lport = 0;
	int ret;

	ARG_UNUSED(timeout);

	if (context->conn_handler) {
   1d1c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d1c6:	b118      	cbz	r0, 1d1d0 <recv_udp+0x34>
		net_conn_unregister(context->conn_handler);
   1d1c8:	f008 f864 	bl	25294 <net_conn_unregister>
		context->conn_handler = NULL;
   1d1cc:	2300      	movs	r3, #0
   1d1ce:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	ret = bind_default(context);
   1d1d0:	4620      	mov	r0, r4
   1d1d2:	f7ff ff26 	bl	1d022 <bind_default>
	if (ret) {
   1d1d6:	4603      	mov	r3, r0
   1d1d8:	bb30      	cbnz	r0, 1d228 <recv_udp+0x8c>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d1da:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   1d1de:	f017 0f10 	tst.w	r7, #16
   1d1e2:	d026      	beq.n	1d232 <recv_udp+0x96>
		return AF_INET6;
   1d1e4:	230a      	movs	r3, #10
		return ret;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_context_get_family(context) == AF_INET6) {
   1d1e6:	2b0a      	cmp	r3, #10
   1d1e8:	d025      	beq.n	1d236 <recv_udp+0x9a>
	u16_t lport = 0;
   1d1ea:	f04f 0e00 	mov.w	lr, #0
	struct sockaddr *laddr = NULL;
   1d1ee:	4672      	mov	r2, lr

		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
	}
#endif /* CONFIG_NET_IPV4 */

	context->recv_cb = cb;
   1d1f0:	6325      	str	r5, [r4, #48]	; 0x30
	if (context->flags & NET_CONTEXT_PROTO) {
   1d1f2:	f017 0f40 	tst.w	r7, #64	; 0x40
   1d1f6:	d037      	beq.n	1d268 <recv_udp+0xcc>
		return IPPROTO_TCP;
   1d1f8:	2006      	movs	r0, #6

	ret = net_conn_register(net_context_get_ip_proto(context),
   1d1fa:	f017 0f80 	tst.w	r7, #128	; 0x80
   1d1fe:	d135      	bne.n	1d26c <recv_udp+0xd0>
   1d200:	2100      	movs	r1, #0
				context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
							&context->remote : NULL,
				laddr,
				ntohs(net_sin(&context->remote)->sin_port),
   1d202:	8ae5      	ldrh	r5, [r4, #22]
   1d204:	022b      	lsls	r3, r5, #8
   1d206:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
				ntohs(lport),
   1d20a:	ea4f 251e 	mov.w	r5, lr, lsr #8
   1d20e:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d212:	b2ad      	uxth	r5, r5
   1d214:	342c      	adds	r4, #44	; 0x2c
   1d216:	9403      	str	r4, [sp, #12]
   1d218:	9602      	str	r6, [sp, #8]
   1d21a:	4c16      	ldr	r4, [pc, #88]	; (1d274 <recv_udp+0xd8>)
   1d21c:	9401      	str	r4, [sp, #4]
   1d21e:	9500      	str	r5, [sp, #0]
   1d220:	b29b      	uxth	r3, r3
   1d222:	f008 f855 	bl	252d0 <net_conn_register>
   1d226:	4603      	mov	r3, r0
				packet_received,
				user_data,
				&context->conn_handler);

	return ret;
}
   1d228:	4618      	mov	r0, r3
   1d22a:	b00f      	add	sp, #60	; 0x3c
   1d22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   1d22e:	2302      	movs	r3, #2
   1d230:	e7c6      	b.n	1d1c0 <recv_udp+0x24>
   1d232:	2302      	movs	r3, #2
   1d234:	e7d7      	b.n	1d1e6 <recv_udp+0x4a>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1d236:	68e3      	ldr	r3, [r4, #12]
   1d238:	b1a3      	cbz	r3, 1d264 <recv_udp+0xc8>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1d23a:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1d23e:	6818      	ldr	r0, [r3, #0]
   1d240:	6859      	ldr	r1, [r3, #4]
   1d242:	689a      	ldr	r2, [r3, #8]
   1d244:	68db      	ldr	r3, [r3, #12]
   1d246:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1d24a:	f10d 0e14 	add.w	lr, sp, #20
   1d24e:	ab0e      	add	r3, sp, #56	; 0x38
   1d250:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1d254:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			laddr = &local_addr;
   1d258:	aa04      	add	r2, sp, #16
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   1d25a:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   1d25e:	f8ad e012 	strh.w	lr, [sp, #18]
   1d262:	e7c5      	b.n	1d1f0 <recv_udp+0x54>
	struct sockaddr *laddr = NULL;
   1d264:	2200      	movs	r2, #0
   1d266:	e7f8      	b.n	1d25a <recv_udp+0xbe>
	return IPPROTO_UDP;
   1d268:	2011      	movs	r0, #17
   1d26a:	e7c6      	b.n	1d1fa <recv_udp+0x5e>
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d26c:	f104 0114 	add.w	r1, r4, #20
   1d270:	e7c7      	b.n	1d202 <recv_udp+0x66>
   1d272:	bf00      	nop
   1d274:	0001c6a9 	.word	0x0001c6a9

0001d278 <net_context_connect>:
{
   1d278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d27c:	b090      	sub	sp, #64	; 0x40
	return context->flags & NET_CONTEXT_IN_USE;
   1d27e:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1d282:	f014 0f01 	tst.w	r4, #1
   1d286:	f000 80c9 	beq.w	1d41c <net_context_connect+0x1a4>
   1d28a:	461f      	mov	r7, r3
   1d28c:	4615      	mov	r5, r2
   1d28e:	460e      	mov	r6, r1
   1d290:	4604      	mov	r4, r0
	ret = bind_default(context);
   1d292:	f7ff fec6 	bl	1d022 <bind_default>
	if (ret) {
   1d296:	4680      	mov	r8, r0
   1d298:	2800      	cmp	r0, #0
   1d29a:	f040 80c1 	bne.w	1d420 <net_context_connect+0x1a8>
	if (addr->sa_family != net_context_get_family(context)) {
   1d29e:	8831      	ldrh	r1, [r6, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d2a0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d2a4:	f013 0f10 	tst.w	r3, #16
   1d2a8:	d02b      	beq.n	1d302 <net_context_connect+0x8a>
		return AF_INET6;
   1d2aa:	220a      	movs	r2, #10
   1d2ac:	4291      	cmp	r1, r2
   1d2ae:	f040 80bb 	bne.w	1d428 <net_context_connect+0x1b0>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d2b2:	f3c3 0341 	ubfx	r3, r3, #1, #2
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1d2b6:	2b03      	cmp	r3, #3
   1d2b8:	f000 80b9 	beq.w	1d42e <net_context_connect+0x1b6>
	if (net_context_get_family(context) == AF_INET6) {
   1d2bc:	2a0a      	cmp	r2, #10
   1d2be:	f040 80b9 	bne.w	1d434 <net_context_connect+0x1bc>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1d2c2:	2d17      	cmp	r5, #23
   1d2c4:	f240 80b9 	bls.w	1d43a <net_context_connect+0x1c2>
	return addr->s6_addr[0] == 0xFF;
   1d2c8:	7e23      	ldrb	r3, [r4, #24]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1d2ca:	2bff      	cmp	r3, #255	; 0xff
   1d2cc:	f000 80b8 	beq.w	1d440 <net_context_connect+0x1c8>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   1d2d0:	2210      	movs	r2, #16
   1d2d2:	1d31      	adds	r1, r6, #4
   1d2d4:	f104 0018 	add.w	r0, r4, #24
   1d2d8:	f7e2 fff2 	bl	2c0 <memcpy>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   1d2dc:	f8b6 c002 	ldrh.w	ip, [r6, #2]
   1d2e0:	f8a4 c016 	strh.w	ip, [r4, #22]
		addr6->sin6_family = AF_INET6;
   1d2e4:	230a      	movs	r3, #10
   1d2e6:	82a3      	strh	r3, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d2e8:	69a3      	ldr	r3, [r4, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d2ea:	b963      	cbnz	r3, 1d306 <net_context_connect+0x8e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d2ec:	69e3      	ldr	r3, [r4, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d2ee:	2b00      	cmp	r3, #0
   1d2f0:	d174      	bne.n	1d3dc <net_context_connect+0x164>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d2f2:	6a23      	ldr	r3, [r4, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d2f4:	2b00      	cmp	r3, #0
   1d2f6:	d173      	bne.n	1d3e0 <net_context_connect+0x168>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1d2f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d2fa:	2b00      	cmp	r3, #0
   1d2fc:	d072      	beq.n	1d3e4 <net_context_connect+0x16c>
   1d2fe:	4643      	mov	r3, r8
   1d300:	e002      	b.n	1d308 <net_context_connect+0x90>
	return AF_INET;
   1d302:	2202      	movs	r2, #2
   1d304:	e7d2      	b.n	1d2ac <net_context_connect+0x34>
   1d306:	4643      	mov	r3, r8
		if (!net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1d308:	f013 0f01 	tst.w	r3, #1
   1d30c:	d16c      	bne.n	1d3e8 <net_context_connect+0x170>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1d30e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d312:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d316:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1d31a:	230a      	movs	r3, #10
   1d31c:	8123      	strh	r3, [r4, #8]
		net_sin6(&local_addr)->sin6_family = AF_INET6;
   1d31e:	f8ad 3018 	strh.w	r3, [sp, #24]
		net_sin6(&local_addr)->sin6_port = lport =
   1d322:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
   1d326:	f8ad e01a 	strh.w	lr, [sp, #26]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1d32a:	68e3      	ldr	r3, [r4, #12]
   1d32c:	2b00      	cmp	r3, #0
   1d32e:	d062      	beq.n	1d3f6 <net_context_connect+0x17e>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1d330:	ad0c      	add	r5, sp, #48	; 0x30
   1d332:	6818      	ldr	r0, [r3, #0]
   1d334:	6859      	ldr	r1, [r3, #4]
   1d336:	689a      	ldr	r2, [r3, #8]
   1d338:	68db      	ldr	r3, [r3, #12]
   1d33a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d33c:	ad07      	add	r5, sp, #28
   1d33e:	ab10      	add	r3, sp, #64	; 0x40
   1d340:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1d344:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   1d348:	aa06      	add	r2, sp, #24
	if (context->flags & NET_CONTEXT_TYPE) {
   1d34a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d34e:	f013 0f20 	tst.w	r3, #32
   1d352:	d052      	beq.n	1d3fa <net_context_connect+0x182>
		return SOCK_STREAM;
   1d354:	2301      	movs	r3, #1
	if (net_context_get_type(context) == SOCK_DGRAM) {
   1d356:	2b02      	cmp	r3, #2
   1d358:	d051      	beq.n	1d3fe <net_context_connect+0x186>
	if (net_context_get_type(context) != SOCK_STREAM) {
   1d35a:	2b01      	cmp	r3, #1
   1d35c:	d173      	bne.n	1d446 <net_context_connect+0x1ce>
			       ntohs(rport),
   1d35e:	ea4f 231c 	mov.w	r3, ip, lsr #8
   1d362:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			       ntohs(lport),
   1d366:	ea4f 211e 	mov.w	r1, lr, lsr #8
   1d36a:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	ret = net_tcp_register(addr,
   1d36e:	b289      	uxth	r1, r1
   1d370:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1d374:	9003      	str	r0, [sp, #12]
   1d376:	9402      	str	r4, [sp, #8]
   1d378:	4835      	ldr	r0, [pc, #212]	; (1d450 <net_context_connect+0x1d8>)
   1d37a:	9001      	str	r0, [sp, #4]
   1d37c:	9100      	str	r1, [sp, #0]
   1d37e:	b29b      	uxth	r3, r3
   1d380:	4631      	mov	r1, r6
   1d382:	2006      	movs	r0, #6
   1d384:	f007 ffa4 	bl	252d0 <net_conn_register>
	if (ret < 0) {
   1d388:	2800      	cmp	r0, #0
   1d38a:	db5f      	blt.n	1d44c <net_context_connect+0x1d4>
	context->connect_cb = cb;
   1d38c:	63a7      	str	r7, [r4, #56]	; 0x38
	context->user_data = user_data;
   1d38e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d390:	6023      	str	r3, [r4, #0]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1d392:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d396:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1d39a:	f043 0302 	orr.w	r3, r3, #2
   1d39e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1d3a2:	2102      	movs	r1, #2
   1d3a4:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1d3a6:	f006 fa6e 	bl	23886 <net_tcp_change_state>
	struct net_pkt *pkt = NULL;
   1d3aa:	2200      	movs	r2, #0
   1d3ac:	ab10      	add	r3, sp, #64	; 0x40
   1d3ae:	f843 2d2c 	str.w	r2, [r3, #-44]!
	ret = net_tcp_prepare_segment(context->tcp, flags, NULL, 0,
   1d3b2:	9302      	str	r3, [sp, #8]
   1d3b4:	9601      	str	r6, [sp, #4]
   1d3b6:	9200      	str	r2, [sp, #0]
   1d3b8:	4613      	mov	r3, r2
   1d3ba:	2102      	movs	r1, #2
   1d3bc:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1d3be:	f006 faff 	bl	239c0 <net_tcp_prepare_segment>
	if (ret) {
   1d3c2:	b310      	cbz	r0, 1d40a <net_context_connect+0x192>
	if (timeout != 0 && k_sem_take(&context->tcp->connect_wait, timeout)) {
   1d3c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d3c6:	b35b      	cbz	r3, 1d420 <net_context_connect+0x1a8>
   1d3c8:	6e20      	ldr	r0, [r4, #96]	; 0x60
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1d3ca:	4619      	mov	r1, r3
   1d3cc:	30ac      	adds	r0, #172	; 0xac
   1d3ce:	f00c f803 	bl	293d8 <_impl_k_sem_take>
   1d3d2:	4680      	mov	r8, r0
   1d3d4:	b320      	cbz	r0, 1d420 <net_context_connect+0x1a8>
		return -ETIMEDOUT;
   1d3d6:	f06f 0873 	mvn.w	r8, #115	; 0x73
   1d3da:	e021      	b.n	1d420 <net_context_connect+0x1a8>
   1d3dc:	4643      	mov	r3, r8
   1d3de:	e793      	b.n	1d308 <net_context_connect+0x90>
   1d3e0:	4643      	mov	r3, r8
   1d3e2:	e791      	b.n	1d308 <net_context_connect+0x90>
   1d3e4:	2301      	movs	r3, #1
   1d3e6:	e78f      	b.n	1d308 <net_context_connect+0x90>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1d3e8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d3ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d3f0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   1d3f4:	e791      	b.n	1d31a <net_context_connect+0xa2>
	struct sockaddr *laddr = NULL;
   1d3f6:	2200      	movs	r2, #0
   1d3f8:	e7a7      	b.n	1d34a <net_context_connect+0xd2>
	return SOCK_DGRAM;
   1d3fa:	2302      	movs	r3, #2
   1d3fc:	e7ab      	b.n	1d356 <net_context_connect+0xde>
		if (cb) {
   1d3fe:	b17f      	cbz	r7, 1d420 <net_context_connect+0x1a8>
			cb(context, 0, user_data);
   1d400:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1d402:	2100      	movs	r1, #0
   1d404:	4620      	mov	r0, r4
   1d406:	47b8      	blx	r7
   1d408:	e00a      	b.n	1d420 <net_context_connect+0x1a8>
	ret = net_send_data(pkt);
   1d40a:	9805      	ldr	r0, [sp, #20]
   1d40c:	f7fd fdf4 	bl	1aff8 <net_send_data>
	if (ret < 0) {
   1d410:	2800      	cmp	r0, #0
   1d412:	dad7      	bge.n	1d3c4 <net_context_connect+0x14c>
		net_pkt_unref(pkt);
   1d414:	9805      	ldr	r0, [sp, #20]
   1d416:	f000 f9f0 	bl	1d7fa <net_pkt_unref>
   1d41a:	e7d3      	b.n	1d3c4 <net_context_connect+0x14c>
		return -EBADF;
   1d41c:	f06f 0808 	mvn.w	r8, #8
}
   1d420:	4640      	mov	r0, r8
   1d422:	b010      	add	sp, #64	; 0x40
   1d424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   1d428:	f06f 0815 	mvn.w	r8, #21
   1d42c:	e7f8      	b.n	1d420 <net_context_connect+0x1a8>
		return -EOPNOTSUPP;
   1d42e:	f06f 085e 	mvn.w	r8, #94	; 0x5e
   1d432:	e7f5      	b.n	1d420 <net_context_connect+0x1a8>
		return -EINVAL; /* Not IPv4 or IPv6 */
   1d434:	f06f 0815 	mvn.w	r8, #21
   1d438:	e7f2      	b.n	1d420 <net_context_connect+0x1a8>
			return -EINVAL;
   1d43a:	f06f 0815 	mvn.w	r8, #21
   1d43e:	e7ef      	b.n	1d420 <net_context_connect+0x1a8>
			return -EADDRNOTAVAIL;
   1d440:	f06f 087c 	mvn.w	r8, #124	; 0x7c
   1d444:	e7ec      	b.n	1d420 <net_context_connect+0x1a8>
		return -ENOTSUP;
   1d446:	f06f 0885 	mvn.w	r8, #133	; 0x85
   1d44a:	e7e9      	b.n	1d420 <net_context_connect+0x1a8>
		return ret;
   1d44c:	4680      	mov	r8, r0
   1d44e:	e7e7      	b.n	1d420 <net_context_connect+0x1a8>
   1d450:	0001ccf9 	.word	0x0001ccf9

0001d454 <net_context_send>:
{
   1d454:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d456:	b085      	sub	sp, #20
	return pkt->context;
   1d458:	68c4      	ldr	r4, [r0, #12]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1d45a:	f994 505d 	ldrsb.w	r5, [r4, #93]	; 0x5d
   1d45e:	2d00      	cmp	r5, #0
   1d460:	da17      	bge.n	1d492 <net_context_send+0x3e>
	    !net_sin(&context->remote)->sin_port) {
   1d462:	8ae5      	ldrh	r5, [r4, #22]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1d464:	b1c5      	cbz	r5, 1d498 <net_context_send+0x44>
	return pkt->family;
   1d466:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
   1d46a:	f3c5 05c3 	ubfx	r5, r5, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1d46e:	2d0a      	cmp	r5, #10
   1d470:	d00d      	beq.n	1d48e <net_context_send+0x3a>
		addrlen = 0;
   1d472:	2700      	movs	r7, #0
   1d474:	461e      	mov	r6, r3
   1d476:	460b      	mov	r3, r1
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1d478:	990a      	ldr	r1, [sp, #40]	; 0x28
   1d47a:	9102      	str	r1, [sp, #8]
   1d47c:	9601      	str	r6, [sp, #4]
   1d47e:	9200      	str	r2, [sp, #0]
   1d480:	463a      	mov	r2, r7
   1d482:	f104 0114 	add.w	r1, r4, #20
   1d486:	f7ff fdf8 	bl	1d07a <sendto>
}
   1d48a:	b005      	add	sp, #20
   1d48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		addrlen = sizeof(struct sockaddr_in6);
   1d48e:	2718      	movs	r7, #24
   1d490:	e7f0      	b.n	1d474 <net_context_send+0x20>
		return -EDESTADDRREQ;
   1d492:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1d496:	e7f8      	b.n	1d48a <net_context_send+0x36>
   1d498:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1d49c:	e7f5      	b.n	1d48a <net_context_send+0x36>

0001d49e <net_context_sendto>:
{
   1d49e:	b510      	push	{r4, lr}
   1d4a0:	b084      	sub	sp, #16
   1d4a2:	461c      	mov	r4, r3
	return pkt->context;
   1d4a4:	68c3      	ldr	r3, [r0, #12]
	if (context->flags & NET_CONTEXT_PROTO) {
   1d4a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   1d4aa:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d4ae:	d00d      	beq.n	1d4cc <net_context_sendto+0x2e>
		return IPPROTO_TCP;
   1d4b0:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d4b2:	2b06      	cmp	r3, #6
   1d4b4:	d00c      	beq.n	1d4d0 <net_context_sendto+0x32>
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1d4b6:	9b08      	ldr	r3, [sp, #32]
   1d4b8:	9302      	str	r3, [sp, #8]
   1d4ba:	9b07      	ldr	r3, [sp, #28]
   1d4bc:	9301      	str	r3, [sp, #4]
   1d4be:	9b06      	ldr	r3, [sp, #24]
   1d4c0:	9300      	str	r3, [sp, #0]
   1d4c2:	4623      	mov	r3, r4
   1d4c4:	f7ff fdd9 	bl	1d07a <sendto>
}
   1d4c8:	b004      	add	sp, #16
   1d4ca:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1d4cc:	2311      	movs	r3, #17
   1d4ce:	e7f0      	b.n	1d4b2 <net_context_sendto+0x14>
		return net_context_send(pkt, cb, timeout, token, user_data);
   1d4d0:	9b08      	ldr	r3, [sp, #32]
   1d4d2:	9300      	str	r3, [sp, #0]
   1d4d4:	9b07      	ldr	r3, [sp, #28]
   1d4d6:	9a06      	ldr	r2, [sp, #24]
   1d4d8:	4621      	mov	r1, r4
   1d4da:	f7ff ffbb 	bl	1d454 <net_context_send>
   1d4de:	e7f3      	b.n	1d4c8 <net_context_sendto+0x2a>

0001d4e0 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   1d4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   1d4e2:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   1d4e6:	f014 0f01 	tst.w	r4, #1
   1d4ea:	d030      	beq.n	1d54e <net_context_recv+0x6e>
	if (context->flags & NET_CONTEXT_PROTO) {
   1d4ec:	f014 0f40 	tst.w	r4, #64	; 0x40
   1d4f0:	d023      	beq.n	1d53a <net_context_recv+0x5a>
		return IPPROTO_TCP;
   1d4f2:	2606      	movs	r6, #6
   1d4f4:	4617      	mov	r7, r2
   1d4f6:	4605      	mov	r5, r0
			context, cb, timeout, user_data);
	}
#endif /* CONFIG_NET_OFFLOAD */

#if defined(CONFIG_NET_UDP)
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d4f8:	2e11      	cmp	r6, #17
   1d4fa:	d020      	beq.n	1d53e <net_context_recv+0x5e>
		}
	} else
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d4fc:	2e06      	cmp	r6, #6
   1d4fe:	d129      	bne.n	1d554 <net_context_recv+0x74>
		NET_ASSERT(context->tcp);

		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1d500:	6e02      	ldr	r2, [r0, #96]	; 0x60
   1d502:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
   1d506:	f410 7f80 	tst.w	r0, #256	; 0x100
   1d50a:	d126      	bne.n	1d55a <net_context_recv+0x7a>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d50c:	f3c4 0441 	ubfx	r4, r4, #1, #2
			return -ESHUTDOWN;
		} else if (net_context_get_state(context)
   1d510:	2c02      	cmp	r4, #2
   1d512:	d125      	bne.n	1d560 <net_context_recv+0x80>
			   != NET_CONTEXT_CONNECTED) {
			return -ENOTCONN;
		}

		context->recv_cb = cb;
   1d514:	6329      	str	r1, [r5, #48]	; 0x30
		context->tcp->recv_user_data = user_data;
   1d516:	6053      	str	r3, [r2, #4]
	{
		return -EPROTOTYPE;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
   1d518:	b32f      	cbz	r7, 1d566 <net_context_recv+0x86>
		/* Make sure we have the lock, then the packet_received()
		 * callback will release the semaphore when data has been
		 * received.
		 */
		while (k_sem_take(&context->recv_data_wait, K_NO_WAIT)) {
   1d51a:	f105 0444 	add.w	r4, r5, #68	; 0x44
   1d51e:	2100      	movs	r1, #0
   1d520:	4620      	mov	r0, r4
   1d522:	f00b ff59 	bl	293d8 <_impl_k_sem_take>
   1d526:	4606      	mov	r6, r0
   1d528:	2800      	cmp	r0, #0
   1d52a:	d1f6      	bne.n	1d51a <net_context_recv+0x3a>
   1d52c:	4639      	mov	r1, r7
   1d52e:	4620      	mov	r0, r4
   1d530:	f00b ff52 	bl	293d8 <_impl_k_sem_take>
			;
		}

		if (!k_sem_take(&context->recv_data_wait, timeout)) {
   1d534:	b140      	cbz	r0, 1d548 <net_context_recv+0x68>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
}
   1d536:	4630      	mov	r0, r6
   1d538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1d53a:	2611      	movs	r6, #17
   1d53c:	e7da      	b.n	1d4f4 <net_context_recv+0x14>
		int ret = recv_udp(context, cb, timeout, user_data);
   1d53e:	f7ff fe2d 	bl	1d19c <recv_udp>
		if (ret < 0) {
   1d542:	1e06      	subs	r6, r0, #0
   1d544:	dae8      	bge.n	1d518 <net_context_recv+0x38>
   1d546:	e7f6      	b.n	1d536 <net_context_recv+0x56>
			return -ETIMEDOUT;
   1d548:	f06f 0673 	mvn.w	r6, #115	; 0x73
   1d54c:	e7f3      	b.n	1d536 <net_context_recv+0x56>
		return -EBADF;
   1d54e:	f06f 0608 	mvn.w	r6, #8
   1d552:	e7f0      	b.n	1d536 <net_context_recv+0x56>
		return -EPROTOTYPE;
   1d554:	f06f 066a 	mvn.w	r6, #106	; 0x6a
   1d558:	e7ed      	b.n	1d536 <net_context_recv+0x56>
			return -ESHUTDOWN;
   1d55a:	f06f 066d 	mvn.w	r6, #109	; 0x6d
   1d55e:	e7ea      	b.n	1d536 <net_context_recv+0x56>
			return -ENOTCONN;
   1d560:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1d564:	e7e7      	b.n	1d536 <net_context_recv+0x56>
	return 0;
   1d566:	2600      	movs	r6, #0
   1d568:	e7e5      	b.n	1d536 <net_context_recv+0x56>
	...

0001d56c <net_context_foreach>:
#else
	return -EPROTOTYPE;
#endif
}
void net_context_foreach(net_context_cb_t cb, void *user_data)
{
   1d56c:	b570      	push	{r4, r5, r6, lr}
   1d56e:	4606      	mov	r6, r0
   1d570:	460d      	mov	r5, r1
   1d572:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d576:	480d      	ldr	r0, [pc, #52]	; (1d5ac <net_context_foreach+0x40>)
   1d578:	f00b ff2e 	bl	293d8 <_impl_k_sem_take>
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1d57c:	2400      	movs	r4, #0
   1d57e:	e000      	b.n	1d582 <net_context_foreach+0x16>
   1d580:	3401      	adds	r4, #1
   1d582:	2c05      	cmp	r4, #5
   1d584:	dc0e      	bgt.n	1d5a4 <net_context_foreach+0x38>
	return context->flags & NET_CONTEXT_IN_USE;
   1d586:	2368      	movs	r3, #104	; 0x68
   1d588:	4a09      	ldr	r2, [pc, #36]	; (1d5b0 <net_context_foreach+0x44>)
   1d58a:	fb03 2304 	mla	r3, r3, r4, r2
   1d58e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1d592:	f013 0f01 	tst.w	r3, #1
   1d596:	d0f3      	beq.n	1d580 <net_context_foreach+0x14>
			continue;
		}

		cb(&contexts[i], user_data);
   1d598:	4629      	mov	r1, r5
   1d59a:	2068      	movs	r0, #104	; 0x68
   1d59c:	fb00 2004 	mla	r0, r0, r4, r2
   1d5a0:	47b0      	blx	r6
   1d5a2:	e7ed      	b.n	1d580 <net_context_foreach+0x14>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1d5a4:	4801      	ldr	r0, [pc, #4]	; (1d5ac <net_context_foreach+0x40>)
   1d5a6:	f00b ff04 	bl	293b2 <_impl_k_sem_give>
   1d5aa:	bd70      	pop	{r4, r5, r6, pc}
   1d5ac:	20001f18 	.word	0x20001f18
   1d5b0:	20001ca8 	.word	0x20001ca8

0001d5b4 <net_context_init>:

	k_sem_give(&contexts_lock);
}

void net_context_init(void)
{
   1d5b4:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1d5b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d5ba:	2101      	movs	r1, #1
   1d5bc:	4801      	ldr	r0, [pc, #4]	; (1d5c4 <net_context_init+0x10>)
   1d5be:	f00b feef 	bl	293a0 <_impl_k_sem_init>
   1d5c2:	bd08      	pop	{r3, pc}
   1d5c4:	20001f18 	.word	0x20001f18

0001d5c8 <net_pkt_get_reserve>:
#else /* CONFIG_NET_DEBUG_NET_PKT */
struct net_pkt *net_pkt_get_reserve(struct k_mem_slab *slab,
				    u16_t reserve_head,
				    s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1d5c8:	b570      	push	{r4, r5, r6, lr}
   1d5ca:	b082      	sub	sp, #8
   1d5cc:	4604      	mov	r4, r0
   1d5ce:	460d      	mov	r5, r1
   1d5d0:	4616      	mov	r6, r2
	struct net_pkt *pkt;
	int ret;

	if (k_is_in_isr()) {
   1d5d2:	f00c f863 	bl	2969c <k_is_in_isr>
   1d5d6:	b198      	cbz	r0, 1d600 <net_pkt_get_reserve+0x38>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   1d5d8:	2200      	movs	r2, #0
   1d5da:	a901      	add	r1, sp, #4
   1d5dc:	4620      	mov	r0, r4
   1d5de:	f00a fde9 	bl	281b4 <k_mem_slab_alloc>
	} else {
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
	}

	if (ret) {
   1d5e2:	b998      	cbnz	r0, 1d60c <net_pkt_get_reserve+0x44>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
   1d5e4:	2244      	movs	r2, #68	; 0x44
   1d5e6:	2100      	movs	r1, #0
   1d5e8:	9801      	ldr	r0, [sp, #4]
   1d5ea:	f00d f995 	bl	2a918 <memset>

	net_pkt_set_ll_reserve(pkt, reserve_head);
   1d5ee:	9801      	ldr	r0, [sp, #4]
	pkt->ll_reserve = len;
   1d5f0:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32

	pkt->ref = 1;
   1d5f4:	2301      	movs	r3, #1
   1d5f6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	pkt->slab = slab;
   1d5fa:	6044      	str	r4, [r0, #4]
	NET_DBG("%s [%u] pkt %p reserve %u ref %d (%s():%d)",
		slab2str(slab), k_mem_slab_num_free_get(slab),
		pkt, reserve_head, pkt->ref, caller, line);
#endif
	return pkt;
}
   1d5fc:	b002      	add	sp, #8
   1d5fe:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1d600:	4632      	mov	r2, r6
   1d602:	a901      	add	r1, sp, #4
   1d604:	4620      	mov	r0, r4
   1d606:	f00a fdd5 	bl	281b4 <k_mem_slab_alloc>
   1d60a:	e7ea      	b.n	1d5e2 <net_pkt_get_reserve+0x1a>
		return NULL;
   1d60c:	2000      	movs	r0, #0
   1d60e:	e7f5      	b.n	1d5fc <net_pkt_get_reserve+0x34>

0001d610 <net_pkt_get>:
#else
static struct net_pkt *net_pkt_get(struct k_mem_slab *slab,
				   struct net_context *context,
				   s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1d610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_pkt *pkt;

	if (!context) {
   1d612:	2900      	cmp	r1, #0
   1d614:	d038      	beq.n	1d688 <net_pkt_get+0x78>
   1d616:	460c      	mov	r4, r1
   1d618:	4617      	mov	r7, r2
   1d61a:	4606      	mov	r6, r0
	return net_if_get_by_index(context->iface);
   1d61c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1d620:	f7fe fea4 	bl	1c36c <net_if_get_by_index>
   1d624:	4605      	mov	r5, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d626:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d62a:	f013 0f10 	tst.w	r3, #16
   1d62e:	d024      	beq.n	1d67a <net_pkt_get+0x6a>
		return AF_INET6;
   1d630:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1d632:	2b0a      	cmp	r3, #10
   1d634:	d023      	beq.n	1d67e <net_pkt_get+0x6e>
	struct in6_addr *addr6 = NULL;
   1d636:	2100      	movs	r1, #0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1d638:	686b      	ldr	r3, [r5, #4]
   1d63a:	689b      	ldr	r3, [r3, #8]
   1d63c:	4628      	mov	r0, r5
   1d63e:	4798      	blx	r3
#if defined(CONFIG_NET_DEBUG_NET_PKT)
	pkt = net_pkt_get_reserve_debug(slab,
					net_if_get_ll_reserve(iface, addr6),
					timeout, caller, line);
#else
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   1d640:	463a      	mov	r2, r7
   1d642:	4601      	mov	r1, r0
   1d644:	4630      	mov	r0, r6
   1d646:	f7ff ffbf 	bl	1d5c8 <net_pkt_get_reserve>
				  timeout);
#endif
	if (pkt) {
   1d64a:	4603      	mov	r3, r0
   1d64c:	b198      	cbz	r0, 1d676 <net_pkt_get+0x66>
	pkt->context = ctx;
   1d64e:	60c4      	str	r4, [r0, #12]
	pkt->iface = iface;
   1d650:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1d652:	7d6a      	ldrb	r2, [r5, #21]
   1d654:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1d658:	7d6a      	ldrb	r2, [r5, #21]
   1d65a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d65e:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   1d662:	f012 0f10 	tst.w	r2, #16
   1d666:	d00d      	beq.n	1d684 <net_pkt_get+0x74>
		return AF_INET6;
   1d668:	210a      	movs	r1, #10
	pkt->family = family;
   1d66a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1d66e:	f361 02c6 	bfi	r2, r1, #3, #4
   1d672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					   net_context_get_family(context));
		}
	}

	return pkt;
}
   1d676:	4618      	mov	r0, r3
   1d678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return AF_INET;
   1d67a:	2302      	movs	r3, #2
   1d67c:	e7d9      	b.n	1d632 <net_pkt_get+0x22>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1d67e:	f104 0118 	add.w	r1, r4, #24
   1d682:	e7d9      	b.n	1d638 <net_pkt_get+0x28>
   1d684:	2102      	movs	r1, #2
   1d686:	e7f0      	b.n	1d66a <net_pkt_get+0x5a>
		return NULL;
   1d688:	2300      	movs	r3, #0
   1d68a:	e7f4      	b.n	1d676 <net_pkt_get+0x66>

0001d68c <net_pkt_get_reserve_data>:
{
   1d68c:	b570      	push	{r4, r5, r6, lr}
   1d68e:	4604      	mov	r4, r0
   1d690:	460d      	mov	r5, r1
   1d692:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   1d694:	f00c f802 	bl	2969c <k_is_in_isr>
   1d698:	b158      	cbz	r0, 1d6b2 <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   1d69a:	2100      	movs	r1, #0
   1d69c:	4620      	mov	r0, r4
   1d69e:	f7fd facf 	bl	1ac40 <net_buf_alloc>
   1d6a2:	4604      	mov	r4, r0
	if (!frag) {
   1d6a4:	b11c      	cbz	r4, 1d6ae <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   1d6a6:	4629      	mov	r1, r5
   1d6a8:	4620      	mov	r0, r4
   1d6aa:	f7fd fb24 	bl	1acf6 <net_buf_reserve>
}
   1d6ae:	4620      	mov	r0, r4
   1d6b0:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   1d6b2:	4631      	mov	r1, r6
   1d6b4:	4620      	mov	r0, r4
   1d6b6:	f7fd fac3 	bl	1ac40 <net_buf_alloc>
   1d6ba:	4604      	mov	r4, r0
   1d6bc:	e7f2      	b.n	1d6a4 <net_pkt_get_reserve_data+0x18>

0001d6be <_pkt_get_data>:
{
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_buf *frag;

	if (!context) {
   1d6be:	b1f1      	cbz	r1, 1d6fe <_pkt_get_data+0x40>
{
   1d6c0:	b570      	push	{r4, r5, r6, lr}
   1d6c2:	460c      	mov	r4, r1
   1d6c4:	4616      	mov	r6, r2
   1d6c6:	4605      	mov	r5, r0
	return net_if_get_by_index(context->iface);
   1d6c8:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1d6cc:	f7fe fe4e 	bl	1c36c <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d6d0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d6d4:	f013 0f10 	tst.w	r3, #16
   1d6d8:	d00c      	beq.n	1d6f4 <_pkt_get_data+0x36>
		return AF_INET6;
   1d6da:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1d6dc:	2b0a      	cmp	r3, #10
   1d6de:	d00b      	beq.n	1d6f8 <_pkt_get_data+0x3a>
	struct in6_addr *addr6 = NULL;
   1d6e0:	2100      	movs	r1, #0
   1d6e2:	6843      	ldr	r3, [r0, #4]
   1d6e4:	689b      	ldr	r3, [r3, #8]
   1d6e6:	4798      	blx	r3
	frag = net_pkt_get_reserve_data_debug(pool,
					      net_if_get_ll_reserve(iface,
								    addr6),
					      timeout, caller, line);
#else
	frag = net_pkt_get_reserve_data(pool,
   1d6e8:	4632      	mov	r2, r6
   1d6ea:	4601      	mov	r1, r0
   1d6ec:	4628      	mov	r0, r5
   1d6ee:	f7ff ffcd 	bl	1d68c <net_pkt_get_reserve_data>
					net_if_get_ll_reserve(iface, addr6),
					timeout);
#endif
	return frag;
   1d6f2:	bd70      	pop	{r4, r5, r6, pc}
	return AF_INET;
   1d6f4:	2302      	movs	r3, #2
   1d6f6:	e7f1      	b.n	1d6dc <_pkt_get_data+0x1e>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1d6f8:	f104 0118 	add.w	r1, r4, #24
   1d6fc:	e7f1      	b.n	1d6e2 <_pkt_get_data+0x24>
		return NULL;
   1d6fe:	2000      	movs	r0, #0
   1d700:	4770      	bx	lr
	...

0001d704 <net_pkt_get_reserve_rx>:
{
   1d704:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   1d706:	460a      	mov	r2, r1
   1d708:	4601      	mov	r1, r0
   1d70a:	4802      	ldr	r0, [pc, #8]	; (1d714 <net_pkt_get_reserve_rx+0x10>)
   1d70c:	f7ff ff5c 	bl	1d5c8 <net_pkt_get_reserve>
}
   1d710:	bd08      	pop	{r3, pc}
   1d712:	bf00      	nop
   1d714:	2000d100 	.word	0x2000d100

0001d718 <net_pkt_get_reserve_tx>:
{
   1d718:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   1d71a:	460a      	mov	r2, r1
   1d71c:	4601      	mov	r1, r0
   1d71e:	4802      	ldr	r0, [pc, #8]	; (1d728 <net_pkt_get_reserve_tx+0x10>)
   1d720:	f7ff ff52 	bl	1d5c8 <net_pkt_get_reserve>
}
   1d724:	bd08      	pop	{r3, pc}
   1d726:	bf00      	nop
   1d728:	2000d11c 	.word	0x2000d11c

0001d72c <net_pkt_get_reserve_rx_data>:
{
   1d72c:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   1d72e:	460a      	mov	r2, r1
   1d730:	4601      	mov	r1, r0
   1d732:	4802      	ldr	r0, [pc, #8]	; (1d73c <net_pkt_get_reserve_rx_data+0x10>)
   1d734:	f7ff ffaa 	bl	1d68c <net_pkt_get_reserve_data>
}
   1d738:	bd08      	pop	{r3, pc}
   1d73a:	bf00      	nop
   1d73c:	2000d280 	.word	0x2000d280

0001d740 <net_pkt_get_reserve_tx_data>:
{
   1d740:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   1d742:	460a      	mov	r2, r1
   1d744:	4601      	mov	r1, r0
   1d746:	4802      	ldr	r0, [pc, #8]	; (1d750 <net_pkt_get_reserve_tx_data+0x10>)
   1d748:	f7ff ffa0 	bl	1d68c <net_pkt_get_reserve_data>
}
   1d74c:	bd08      	pop	{r3, pc}
   1d74e:	bf00      	nop
   1d750:	2000d2a0 	.word	0x2000d2a0

0001d754 <net_pkt_get_frag>:
{
   1d754:	b538      	push	{r3, r4, r5, lr}
   1d756:	4604      	mov	r4, r0
   1d758:	460d      	mov	r5, r1
	return pkt->context;
   1d75a:	68c3      	ldr	r3, [r0, #12]
	if (context && context->data_pool) {
   1d75c:	b143      	cbz	r3, 1d770 <net_pkt_get_frag+0x1c>
   1d75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d760:	b133      	cbz	r3, 1d770 <net_pkt_get_frag+0x1c>
		return net_pkt_get_reserve_data(context->data_pool(),
   1d762:	4798      	blx	r3
   1d764:	462a      	mov	r2, r5
   1d766:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1d76a:	f7ff ff8f 	bl	1d68c <net_pkt_get_reserve_data>
   1d76e:	bd38      	pop	{r3, r4, r5, pc}
	if (pkt->slab == &rx_pkts) {
   1d770:	6862      	ldr	r2, [r4, #4]
   1d772:	4b07      	ldr	r3, [pc, #28]	; (1d790 <net_pkt_get_frag+0x3c>)
   1d774:	429a      	cmp	r2, r3
   1d776:	d005      	beq.n	1d784 <net_pkt_get_frag+0x30>
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   1d778:	4629      	mov	r1, r5
   1d77a:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1d77e:	f7ff ffdf 	bl	1d740 <net_pkt_get_reserve_tx_data>
}
   1d782:	bd38      	pop	{r3, r4, r5, pc}
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   1d784:	4629      	mov	r1, r5
   1d786:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1d78a:	f7ff ffcf 	bl	1d72c <net_pkt_get_reserve_rx_data>
   1d78e:	bd38      	pop	{r3, r4, r5, pc}
   1d790:	2000d100 	.word	0x2000d100

0001d794 <net_pkt_get_tx>:

	return net_pkt_get(&rx_pkts, context, timeout);
}

struct net_pkt *net_pkt_get_tx(struct net_context *context, s32_t timeout)
{
   1d794:	b538      	push	{r3, r4, r5, lr}
   1d796:	4604      	mov	r4, r0
   1d798:	460d      	mov	r5, r1
	if (context->tx_slab) {
   1d79a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1d79c:	b133      	cbz	r3, 1d7ac <net_pkt_get_tx+0x18>
		return context->tx_slab();
   1d79e:	4798      	blx	r3

	NET_ASSERT_INFO(context, "TX context not set");

	slab = get_tx_slab(context);

	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1d7a0:	b130      	cbz	r0, 1d7b0 <net_pkt_get_tx+0x1c>
   1d7a2:	462a      	mov	r2, r5
   1d7a4:	4621      	mov	r1, r4
   1d7a6:	f7ff ff33 	bl	1d610 <net_pkt_get>
}
   1d7aa:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1d7ac:	2000      	movs	r0, #0
   1d7ae:	e7f7      	b.n	1d7a0 <net_pkt_get_tx+0xc>
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1d7b0:	4800      	ldr	r0, [pc, #0]	; (1d7b4 <net_pkt_get_tx+0x20>)
   1d7b2:	e7f6      	b.n	1d7a2 <net_pkt_get_tx+0xe>
   1d7b4:	2000d11c 	.word	0x2000d11c

0001d7b8 <net_pkt_get_data>:

struct net_buf *net_pkt_get_data(struct net_context *context, s32_t timeout)
{
   1d7b8:	b538      	push	{r3, r4, r5, lr}
   1d7ba:	4604      	mov	r4, r0
   1d7bc:	460d      	mov	r5, r1
	if (context->data_pool) {
   1d7be:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1d7c0:	b133      	cbz	r3, 1d7d0 <net_pkt_get_data+0x18>
		return context->data_pool();
   1d7c2:	4798      	blx	r3
	pool = get_data_pool(context);

	/* The context is not known in RX path so we can only have TX
	 * data here.
	 */
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1d7c4:	b130      	cbz	r0, 1d7d4 <net_pkt_get_data+0x1c>
   1d7c6:	462a      	mov	r2, r5
   1d7c8:	4621      	mov	r1, r4
   1d7ca:	f7ff ff78 	bl	1d6be <_pkt_get_data>
}
   1d7ce:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1d7d0:	2000      	movs	r0, #0
   1d7d2:	e7f7      	b.n	1d7c4 <net_pkt_get_data+0xc>
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1d7d4:	4800      	ldr	r0, [pc, #0]	; (1d7d8 <net_pkt_get_data+0x20>)
   1d7d6:	e7f6      	b.n	1d7c6 <net_pkt_get_data+0xe>
   1d7d8:	2000d2a0 	.word	0x2000d2a0

0001d7dc <net_pkt_ref>:
				  int line)
#else
struct net_pkt *net_pkt_ref(struct net_pkt *pkt)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!pkt) {
   1d7dc:	4603      	mov	r3, r0
   1d7de:	b120      	cbz	r0, 1d7ea <net_pkt_ref+0xe>
	NET_DBG("%s [%d] pkt %p ref %d (%s():%d)",
		slab2str(pkt->slab), k_mem_slab_num_free_get(pkt->slab),
		pkt, pkt->ref + 1, caller, line);
#endif

	pkt->ref++;
   1d7e0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   1d7e4:	3201      	adds	r2, #1
   1d7e6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

	return pkt;
}
   1d7ea:	4618      	mov	r0, r3
   1d7ec:	4770      	bx	lr

0001d7ee <net_pkt_frag_unref>:
			      const char *caller, int line)
#else
void net_pkt_frag_unref(struct net_buf *frag)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!frag) {
   1d7ee:	b118      	cbz	r0, 1d7f8 <net_pkt_frag_unref+0xa>
{
   1d7f0:	b508      	push	{r3, lr}

	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif
	net_buf_unref(frag);
   1d7f2:	f7fd fa93 	bl	1ad1c <net_buf_unref>
   1d7f6:	bd08      	pop	{r3, pc}
   1d7f8:	4770      	bx	lr

0001d7fa <net_pkt_unref>:
{
   1d7fa:	b500      	push	{lr}
   1d7fc:	b083      	sub	sp, #12
   1d7fe:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1d800:	b188      	cbz	r0, 1d826 <net_pkt_unref+0x2c>
	if (!pkt->ref) {
   1d802:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1d806:	b173      	cbz	r3, 1d826 <net_pkt_unref+0x2c>
	if (--pkt->ref > 0) {
   1d808:	3b01      	subs	r3, #1
   1d80a:	b2db      	uxtb	r3, r3
   1d80c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1d810:	b94b      	cbnz	r3, 1d826 <net_pkt_unref+0x2c>
	if (pkt->frags) {
   1d812:	6880      	ldr	r0, [r0, #8]
   1d814:	b108      	cbz	r0, 1d81a <net_pkt_unref+0x20>
		net_pkt_frag_unref(pkt->frags);
   1d816:	f7ff ffea 	bl	1d7ee <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1d81a:	a902      	add	r1, sp, #8
   1d81c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1d820:	6858      	ldr	r0, [r3, #4]
   1d822:	f00a fcf5 	bl	28210 <k_mem_slab_free>
}
   1d826:	b003      	add	sp, #12
   1d828:	f85d fb04 	ldr.w	pc, [sp], #4

0001d82c <net_pkt_frag_del>:
#else
struct net_buf *net_pkt_frag_del(struct net_pkt *pkt,
				 struct net_buf *parent,
				 struct net_buf *frag)
#endif
{
   1d82c:	b510      	push	{r4, lr}
   1d82e:	4604      	mov	r4, r0
   1d830:	4608      	mov	r0, r1
	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif

	if (pkt->frags == frag && !parent) {
   1d832:	68a3      	ldr	r3, [r4, #8]
   1d834:	4293      	cmp	r3, r2
   1d836:	d003      	beq.n	1d840 <net_pkt_frag_del+0x14>
		pkt->frags = tmp;

		return tmp;
	}

	return net_buf_frag_del(parent, frag);
   1d838:	4611      	mov	r1, r2
   1d83a:	f7fd faaf 	bl	1ad9c <net_buf_frag_del>
}
   1d83e:	bd10      	pop	{r4, pc}
	if (pkt->frags == frag && !parent) {
   1d840:	2900      	cmp	r1, #0
   1d842:	d1f9      	bne.n	1d838 <net_pkt_frag_del+0xc>
		tmp = net_buf_frag_del(NULL, frag);
   1d844:	4611      	mov	r1, r2
   1d846:	f7fd faa9 	bl	1ad9c <net_buf_frag_del>
		pkt->frags = tmp;
   1d84a:	60a0      	str	r0, [r4, #8]
		return tmp;
   1d84c:	bd10      	pop	{r4, pc}

0001d84e <net_pkt_frag_add>:
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	/* We do not use net_buf_frag_add() as this one will refcount
	 * the frag once more if !pkt->frags
	 */
	if (!pkt->frags) {
   1d84e:	6883      	ldr	r3, [r0, #8]
   1d850:	b143      	cbz	r3, 1d864 <net_pkt_frag_add+0x16>
{
   1d852:	b510      	push	{r4, lr}
   1d854:	460c      	mov	r4, r1
		pkt->frags = frag;
		return;
	}

	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   1d856:	4618      	mov	r0, r3
   1d858:	f7fd fa80 	bl	1ad5c <net_buf_frag_last>
   1d85c:	4621      	mov	r1, r4
   1d85e:	f7fd fa83 	bl	1ad68 <net_buf_frag_insert>
   1d862:	bd10      	pop	{r4, pc}
		pkt->frags = frag;
   1d864:	6081      	str	r1, [r0, #8]
		return;
   1d866:	4770      	bx	lr

0001d868 <net_pkt_frag_insert>:
void net_pkt_frag_insert_debug(struct net_pkt *pkt, struct net_buf *frag,
			       const char *caller, int line)
#else
void net_pkt_frag_insert(struct net_pkt *pkt, struct net_buf *frag)
#endif
{
   1d868:	b538      	push	{r3, r4, r5, lr}
   1d86a:	4604      	mov	r4, r0
   1d86c:	460d      	mov	r5, r1
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	net_buf_frag_last(frag)->frags = pkt->frags;
   1d86e:	4608      	mov	r0, r1
   1d870:	f7fd fa74 	bl	1ad5c <net_buf_frag_last>
   1d874:	68a3      	ldr	r3, [r4, #8]
   1d876:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   1d878:	60a5      	str	r5, [r4, #8]
   1d87a:	bd38      	pop	{r3, r4, r5, pc}

0001d87c <net_pkt_copy>:
}

struct net_buf *net_pkt_copy(struct net_pkt *pkt, size_t amount,
			     size_t reserve, s32_t timeout)
{
   1d87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d880:	b085      	sub	sp, #20
   1d882:	9002      	str	r0, [sp, #8]
   1d884:	460d      	mov	r5, r1
   1d886:	4614      	mov	r4, r2
   1d888:	9303      	str	r3, [sp, #12]
	struct net_buf *frag, *first, *orig;
	u8_t *orig_data;
	size_t orig_len;

	orig = pkt->frags;
   1d88a:	f8d0 a008 	ldr.w	sl, [r0, #8]

	frag = net_pkt_get_frag(pkt, timeout);
   1d88e:	4619      	mov	r1, r3
   1d890:	f7ff ff60 	bl	1d754 <net_pkt_get_frag>
	if (!frag) {
   1d894:	9001      	str	r0, [sp, #4]
   1d896:	b1b8      	cbz	r0, 1d8c8 <net_pkt_copy+0x4c>
		return NULL;
	}

	if (reserve > net_buf_tailroom(frag)) {
   1d898:	f100 0608 	add.w	r6, r0, #8
   1d89c:	4630      	mov	r0, r6
   1d89e:	f7fd faf2 	bl	1ae86 <net_buf_simple_tailroom>
   1d8a2:	42a0      	cmp	r0, r4
   1d8a4:	d30b      	bcc.n	1d8be <net_pkt_copy+0x42>
			reserve, net_buf_tailroom(frag));
		net_pkt_frag_unref(frag);
		return NULL;
	}

	net_buf_add(frag, reserve);
   1d8a6:	4621      	mov	r1, r4
   1d8a8:	4630      	mov	r0, r6
   1d8aa:	f7fd fa83 	bl	1adb4 <net_buf_simple_add>
	first = frag;

	NET_DBG("Copying frag %p with %zu bytes and reserving %zu bytes",
		first, amount, reserve);

	if (!orig->len) {
   1d8ae:	f8ba 700c 	ldrh.w	r7, [sl, #12]
   1d8b2:	b14f      	cbz	r7, 1d8c8 <net_pkt_copy+0x4c>
		NET_DBG("Original fragment empty!");
		return frag;
	}

	orig_len = orig->len;
	orig_data = orig->data;
   1d8b4:	f8da 9008 	ldr.w	r9, [sl, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1d8b8:	f8dd b004 	ldr.w	fp, [sp, #4]

	while (orig && amount) {
   1d8bc:	e01c      	b.n	1d8f8 <net_pkt_copy+0x7c>
		net_pkt_frag_unref(frag);
   1d8be:	9801      	ldr	r0, [sp, #4]
   1d8c0:	f7ff ff95 	bl	1d7ee <net_pkt_frag_unref>
		return NULL;
   1d8c4:	2300      	movs	r3, #0
   1d8c6:	9301      	str	r3, [sp, #4]
			orig_data = orig->data;
		}
	}

	return first;
}
   1d8c8:	9801      	ldr	r0, [sp, #4]
   1d8ca:	b005      	add	sp, #20
   1d8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_len = amount;
   1d8d0:	46a8      	mov	r8, r5
		if ((copy_len - left_len) >= 0) {
   1d8d2:	eba8 0304 	sub.w	r3, r8, r4
   1d8d6:	2b00      	cmp	r3, #0
   1d8d8:	db2e      	blt.n	1d938 <net_pkt_copy+0xbc>
			amount -= left_len;
   1d8da:	1b2d      	subs	r5, r5, r4
			memcpy(net_buf_add(frag, left_len), orig_data,
   1d8dc:	4621      	mov	r1, r4
   1d8de:	4630      	mov	r0, r6
   1d8e0:	f7fd fa68 	bl	1adb4 <net_buf_simple_add>
   1d8e4:	4622      	mov	r2, r4
   1d8e6:	4649      	mov	r1, r9
   1d8e8:	f7e2 fcea 	bl	2c0 <memcpy>
			if (!net_buf_tailroom(frag)) {
   1d8ec:	4630      	mov	r0, r6
   1d8ee:	f7fd faca 	bl	1ae86 <net_buf_simple_tailroom>
   1d8f2:	b180      	cbz	r0, 1d916 <net_pkt_copy+0x9a>
			orig_len -= left_len;
   1d8f4:	1b3f      	subs	r7, r7, r4
			orig_data += left_len;
   1d8f6:	44a1      	add	r9, r4
	while (orig && amount) {
   1d8f8:	f1ba 0f00 	cmp.w	sl, #0
   1d8fc:	d0e4      	beq.n	1d8c8 <net_pkt_copy+0x4c>
   1d8fe:	2d00      	cmp	r5, #0
   1d900:	d0e2      	beq.n	1d8c8 <net_pkt_copy+0x4c>
		int left_len = net_buf_tailroom(frag);
   1d902:	f10b 0608 	add.w	r6, fp, #8
   1d906:	4630      	mov	r0, r6
   1d908:	f7fd fabd 	bl	1ae86 <net_buf_simple_tailroom>
   1d90c:	4604      	mov	r4, r0
		if (amount > orig_len) {
   1d90e:	42bd      	cmp	r5, r7
   1d910:	d9de      	bls.n	1d8d0 <net_pkt_copy+0x54>
			copy_len = orig_len;
   1d912:	46b8      	mov	r8, r7
   1d914:	e7dd      	b.n	1d8d2 <net_pkt_copy+0x56>
				struct net_buf *new_frag =
   1d916:	9903      	ldr	r1, [sp, #12]
   1d918:	9802      	ldr	r0, [sp, #8]
   1d91a:	f7ff ff1b 	bl	1d754 <net_pkt_get_frag>
				if (!new_frag) {
   1d91e:	4606      	mov	r6, r0
   1d920:	b128      	cbz	r0, 1d92e <net_pkt_copy+0xb2>
				net_buf_frag_add(frag, new_frag);
   1d922:	4601      	mov	r1, r0
   1d924:	4658      	mov	r0, fp
   1d926:	f7fd fa2a 	bl	1ad7e <net_buf_frag_add>
				frag = new_frag;
   1d92a:	46b3      	mov	fp, r6
   1d92c:	e7e2      	b.n	1d8f4 <net_pkt_copy+0x78>
					net_pkt_frag_unref(first);
   1d92e:	9801      	ldr	r0, [sp, #4]
   1d930:	f7ff ff5d 	bl	1d7ee <net_pkt_frag_unref>
					return NULL;
   1d934:	9601      	str	r6, [sp, #4]
   1d936:	e7c7      	b.n	1d8c8 <net_pkt_copy+0x4c>
			amount -= copy_len;
   1d938:	eba5 0508 	sub.w	r5, r5, r8
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1d93c:	4641      	mov	r1, r8
   1d93e:	4630      	mov	r0, r6
   1d940:	f7fd fa38 	bl	1adb4 <net_buf_simple_add>
   1d944:	4642      	mov	r2, r8
   1d946:	4649      	mov	r1, r9
   1d948:	f7e2 fcba 	bl	2c0 <memcpy>
		orig = orig->frags;
   1d94c:	f8da a000 	ldr.w	sl, [sl]
		if (orig) {
   1d950:	f1ba 0f00 	cmp.w	sl, #0
   1d954:	d0d0      	beq.n	1d8f8 <net_pkt_copy+0x7c>
			orig_len = orig->len;
   1d956:	f8ba 700c 	ldrh.w	r7, [sl, #12]
			orig_data = orig->data;
   1d95a:	f8da 9008 	ldr.w	r9, [sl, #8]
   1d95e:	e7cb      	b.n	1d8f8 <net_pkt_copy+0x7c>

0001d960 <net_frag_linear_copy>:

int net_frag_linear_copy(struct net_buf *dst, struct net_buf *src,
			 u16_t offset, u16_t len)
{
   1d960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d964:	4680      	mov	r8, r0
   1d966:	460e      	mov	r6, r1
   1d968:	4615      	mov	r5, r2
   1d96a:	4699      	mov	r9, r3
	u16_t to_copy;
	u16_t copied;

	if (dst->size < len) {
   1d96c:	89c3      	ldrh	r3, [r0, #14]
   1d96e:	454b      	cmp	r3, r9
   1d970:	d206      	bcs.n	1d980 <net_frag_linear_copy+0x20>
		return -ENOMEM;
   1d972:	f06f 000b 	mvn.w	r0, #11
   1d976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	/* find the right fragment to start copying from */
	while (src && offset >= src->len) {
		offset -= src->len;
   1d97a:	1a6d      	subs	r5, r5, r1
   1d97c:	b2ad      	uxth	r5, r5
		src = src->frags;
   1d97e:	6836      	ldr	r6, [r6, #0]
	while (src && offset >= src->len) {
   1d980:	b336      	cbz	r6, 1d9d0 <net_frag_linear_copy+0x70>
   1d982:	89b1      	ldrh	r1, [r6, #12]
   1d984:	428d      	cmp	r5, r1
   1d986:	d2f8      	bcs.n	1d97a <net_frag_linear_copy+0x1a>
   1d988:	2700      	movs	r7, #0
   1d98a:	e015      	b.n	1d9b8 <net_frag_linear_copy+0x58>
	}

	/* traverse the fragment chain until len bytes are copied */
	copied = 0;
	while (src && len > 0) {
		to_copy = min(len, src->len - offset);
   1d98c:	89b4      	ldrh	r4, [r6, #12]
   1d98e:	1b64      	subs	r4, r4, r5
   1d990:	454c      	cmp	r4, r9
   1d992:	bfa8      	it	ge
   1d994:	464c      	movge	r4, r9
   1d996:	b2a4      	uxth	r4, r4
		memcpy(dst->data + copied, src->data + offset, to_copy);
   1d998:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1d99c:	68b1      	ldr	r1, [r6, #8]
   1d99e:	4622      	mov	r2, r4
   1d9a0:	4429      	add	r1, r5
   1d9a2:	4438      	add	r0, r7
   1d9a4:	f7e2 fc8c 	bl	2c0 <memcpy>

		copied += to_copy;
   1d9a8:	4427      	add	r7, r4
   1d9aa:	b2bf      	uxth	r7, r7
		/* to_copy is always <= len */
		len -= to_copy;
   1d9ac:	eba9 0404 	sub.w	r4, r9, r4
   1d9b0:	fa1f f984 	uxth.w	r9, r4
		src = src->frags;
   1d9b4:	6836      	ldr	r6, [r6, #0]
		/* after the first iteration, this value will be 0 */
		offset = 0;
   1d9b6:	2500      	movs	r5, #0
	while (src && len > 0) {
   1d9b8:	b116      	cbz	r6, 1d9c0 <net_frag_linear_copy+0x60>
   1d9ba:	f1b9 0f00 	cmp.w	r9, #0
   1d9be:	d1e5      	bne.n	1d98c <net_frag_linear_copy+0x2c>
	}

	if (len > 0) {
   1d9c0:	f1b9 0f00 	cmp.w	r9, #0
   1d9c4:	d106      	bne.n	1d9d4 <net_frag_linear_copy+0x74>
		return -ENOMEM;
	}

	dst->len = copied;
   1d9c6:	f8a8 700c 	strh.w	r7, [r8, #12]

	return 0;
   1d9ca:	2000      	movs	r0, #0
   1d9cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d9d0:	2700      	movs	r7, #0
   1d9d2:	e7f1      	b.n	1d9b8 <net_frag_linear_copy+0x58>
		return -ENOMEM;
   1d9d4:	f06f 000b 	mvn.w	r0, #11
}
   1d9d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d9dc <net_pkt_compact>:

	return copied;
}

bool net_pkt_compact(struct net_pkt *pkt)
{
   1d9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d9e0:	4680      	mov	r8, r0
	struct net_buf *frag, *prev;

	NET_DBG("Compacting data in pkt %p", pkt);

	frag = pkt->frags;
   1d9e2:	6884      	ldr	r4, [r0, #8]
	prev = NULL;
   1d9e4:	2700      	movs	r7, #0

	while (frag) {
   1d9e6:	e009      	b.n	1d9fc <net_pkt_compact+0x20>
			 */
			size_t copy_len;

			copy_len = frag->frags->len;
			if (copy_len > net_buf_tailroom(frag)) {
				copy_len = net_buf_tailroom(frag);
   1d9e8:	4630      	mov	r0, r6
   1d9ea:	f7fd fa4c 	bl	1ae86 <net_buf_simple_tailroom>
   1d9ee:	4605      	mov	r5, r0
   1d9f0:	e011      	b.n	1da16 <net_pkt_compact+0x3a>

				/* Then check next fragment */
				continue;
			}
		} else {
			if (!frag->len) {
   1d9f2:	89a3      	ldrh	r3, [r4, #12]
   1d9f4:	2b00      	cmp	r3, #0
   1d9f6:	d030      	beq.n	1da5a <net_pkt_compact+0x7e>

				break;
			}
		}

		prev = frag;
   1d9f8:	4627      	mov	r7, r4
		frag = frag->frags;
   1d9fa:	6824      	ldr	r4, [r4, #0]
	while (frag) {
   1d9fc:	2c00      	cmp	r4, #0
   1d9fe:	d031      	beq.n	1da64 <net_pkt_compact+0x88>
		if (frag->frags) {
   1da00:	6823      	ldr	r3, [r4, #0]
   1da02:	2b00      	cmp	r3, #0
   1da04:	d0f5      	beq.n	1d9f2 <net_pkt_compact+0x16>
			copy_len = frag->frags->len;
   1da06:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   1da08:	f104 0608 	add.w	r6, r4, #8
   1da0c:	4630      	mov	r0, r6
   1da0e:	f7fd fa3a 	bl	1ae86 <net_buf_simple_tailroom>
   1da12:	4285      	cmp	r5, r0
   1da14:	d8e8      	bhi.n	1d9e8 <net_pkt_compact+0xc>
	return buf->data + buf->len;
   1da16:	68a0      	ldr	r0, [r4, #8]
   1da18:	89a3      	ldrh	r3, [r4, #12]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   1da1a:	6821      	ldr	r1, [r4, #0]
   1da1c:	462a      	mov	r2, r5
   1da1e:	6889      	ldr	r1, [r1, #8]
   1da20:	4418      	add	r0, r3
   1da22:	f7e2 fc4d 	bl	2c0 <memcpy>
			net_buf_add(frag, copy_len);
   1da26:	4629      	mov	r1, r5
   1da28:	4630      	mov	r0, r6
   1da2a:	f7fd f9c3 	bl	1adb4 <net_buf_simple_add>
			memmove(frag->frags->data,
   1da2e:	6823      	ldr	r3, [r4, #0]
   1da30:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   1da32:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   1da34:	1b52      	subs	r2, r2, r5
   1da36:	1941      	adds	r1, r0, r5
   1da38:	f00c ff0a 	bl	2a850 <memmove>
			frag->frags->len -= copy_len;
   1da3c:	6822      	ldr	r2, [r4, #0]
   1da3e:	8993      	ldrh	r3, [r2, #12]
   1da40:	1b5d      	subs	r5, r3, r5
   1da42:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   1da44:	4630      	mov	r0, r6
   1da46:	f7fd fa1e 	bl	1ae86 <net_buf_simple_tailroom>
   1da4a:	2800      	cmp	r0, #0
   1da4c:	d0d4      	beq.n	1d9f8 <net_pkt_compact+0x1c>
				net_pkt_frag_del(pkt, frag, frag->frags);
   1da4e:	6822      	ldr	r2, [r4, #0]
   1da50:	4621      	mov	r1, r4
   1da52:	4640      	mov	r0, r8
   1da54:	f7ff feea 	bl	1d82c <net_pkt_frag_del>
				continue;
   1da58:	e7d0      	b.n	1d9fc <net_pkt_compact+0x20>
				net_pkt_frag_del(pkt, prev, frag);
   1da5a:	4622      	mov	r2, r4
   1da5c:	4639      	mov	r1, r7
   1da5e:	4640      	mov	r0, r8
   1da60:	f7ff fee4 	bl	1d82c <net_pkt_frag_del>
	}

	return true;
}
   1da64:	2001      	movs	r0, #1
   1da66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001da6a <net_pkt_append>:
	return 0;
}

u16_t net_pkt_append(struct net_pkt *pkt, u16_t len, const u8_t *data,
		    s32_t timeout)
{
   1da6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *frag;

	if (!pkt || !data) {
   1da6e:	b3d0      	cbz	r0, 1dae6 <net_pkt_append+0x7c>
   1da70:	460c      	mov	r4, r1
   1da72:	4690      	mov	r8, r2
   1da74:	469a      	mov	sl, r3
   1da76:	4681      	mov	r9, r0
   1da78:	b3ca      	cbz	r2, 1daee <net_pkt_append+0x84>
		return 0;
	}

	if (!pkt->frags) {
   1da7a:	6883      	ldr	r3, [r0, #8]
   1da7c:	b133      	cbz	r3, 1da8c <net_pkt_append+0x22>
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   1da7e:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1da82:	f7fd f96b 	bl	1ad5c <net_buf_frag_last>
   1da86:	4605      	mov	r5, r0
	u16_t added_len = 0;
   1da88:	2700      	movs	r7, #0
   1da8a:	e024      	b.n	1dad6 <net_pkt_append+0x6c>
		frag = net_pkt_get_frag(pkt, timeout);
   1da8c:	4651      	mov	r1, sl
   1da8e:	f7ff fe61 	bl	1d754 <net_pkt_get_frag>
		if (!frag) {
   1da92:	4601      	mov	r1, r0
   1da94:	b368      	cbz	r0, 1daf2 <net_pkt_append+0x88>
			return 0;
		}

		net_pkt_frag_add(pkt, frag);
   1da96:	4648      	mov	r0, r9
   1da98:	f7ff fed9 	bl	1d84e <net_pkt_frag_add>
   1da9c:	e7ef      	b.n	1da7e <net_pkt_append+0x14>
		u16_t count = min(len, net_buf_tailroom(frag));
   1da9e:	4628      	mov	r0, r5
   1daa0:	f7fd f9f1 	bl	1ae86 <net_buf_simple_tailroom>
   1daa4:	b286      	uxth	r6, r0
		void *data = net_buf_add(frag, count);
   1daa6:	4631      	mov	r1, r6
   1daa8:	4628      	mov	r0, r5
   1daaa:	f7fd f983 	bl	1adb4 <net_buf_simple_add>
		memcpy(data, value, count);
   1daae:	4632      	mov	r2, r6
   1dab0:	4641      	mov	r1, r8
   1dab2:	f7e2 fc05 	bl	2c0 <memcpy>
		len -= count;
   1dab6:	1ba4      	subs	r4, r4, r6
   1dab8:	b2a4      	uxth	r4, r4
		added_len += count;
   1daba:	4437      	add	r7, r6
   1dabc:	b2bf      	uxth	r7, r7
		value += count;
   1dabe:	44b0      	add	r8, r6
		if (len == 0) {
   1dac0:	b194      	cbz	r4, 1dae8 <net_pkt_append+0x7e>
		frag = net_pkt_get_frag(pkt, timeout);
   1dac2:	4651      	mov	r1, sl
   1dac4:	4648      	mov	r0, r9
   1dac6:	f7ff fe45 	bl	1d754 <net_pkt_get_frag>
		if (!frag) {
   1daca:	4605      	mov	r5, r0
   1dacc:	b160      	cbz	r0, 1dae8 <net_pkt_append+0x7e>
		net_pkt_frag_add(pkt, frag);
   1dace:	4601      	mov	r1, r0
   1dad0:	4648      	mov	r0, r9
   1dad2:	f7ff febc 	bl	1d84e <net_pkt_frag_add>
		u16_t count = min(len, net_buf_tailroom(frag));
   1dad6:	3508      	adds	r5, #8
   1dad8:	4628      	mov	r0, r5
   1dada:	f7fd f9d4 	bl	1ae86 <net_buf_simple_tailroom>
   1dade:	4284      	cmp	r4, r0
   1dae0:	d2dd      	bcs.n	1da9e <net_pkt_append+0x34>
   1dae2:	4626      	mov	r6, r4
   1dae4:	e7df      	b.n	1daa6 <net_pkt_append+0x3c>
		return 0;
   1dae6:	2700      	movs	r7, #0
	}

	return net_pkt_append_bytes(pkt, data, len, timeout);
}
   1dae8:	4638      	mov	r0, r7
   1daea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   1daee:	2700      	movs	r7, #0
   1daf0:	e7fa      	b.n	1dae8 <net_pkt_append+0x7e>
			return 0;
   1daf2:	2700      	movs	r7, #0
   1daf4:	e7f8      	b.n	1dae8 <net_pkt_append+0x7e>

0001daf6 <net_frag_read>:
	return NULL;
}

struct net_buf *net_frag_read(struct net_buf *frag, u16_t offset,
			      u16_t *pos, u16_t len, u8_t *data)
{
   1daf6:	b4f0      	push	{r4, r5, r6, r7}
   1daf8:	9e04      	ldr	r6, [sp, #16]
	if (!frag) {
   1dafa:	4604      	mov	r4, r0
   1dafc:	b188      	cbz	r0, 1db22 <net_frag_read+0x2c>
	while (frag) {
   1dafe:	b17c      	cbz	r4, 1db20 <net_frag_read+0x2a>
		if (offset == frag->len) {
   1db00:	89a0      	ldrh	r0, [r4, #12]
   1db02:	4288      	cmp	r0, r1
   1db04:	d005      	beq.n	1db12 <net_frag_read+0x1c>
		} else if (offset < frag->len) {
   1db06:	4288      	cmp	r0, r1
   1db08:	d807      	bhi.n	1db1a <net_frag_read+0x24>
		offset -= frag->len;
   1db0a:	1a09      	subs	r1, r1, r0
   1db0c:	b289      	uxth	r1, r1
		frag = frag->frags;
   1db0e:	6824      	ldr	r4, [r4, #0]
   1db10:	e7f5      	b.n	1dafe <net_frag_read+0x8>
			*pos = 0;
   1db12:	2100      	movs	r1, #0
   1db14:	8011      	strh	r1, [r2, #0]
			return frag->frags;
   1db16:	6820      	ldr	r0, [r4, #0]
   1db18:	e003      	b.n	1db22 <net_frag_read+0x2c>
			*pos = offset;
   1db1a:	8011      	strh	r1, [r2, #0]
			return frag;
   1db1c:	4620      	mov	r0, r4
   1db1e:	e000      	b.n	1db22 <net_frag_read+0x2c>
	return NULL;
   1db20:	4620      	mov	r0, r4
	u16_t copy = 0;

	frag = adjust_offset(frag, offset, pos);
	if (!frag) {
   1db22:	b350      	cbz	r0, 1db7a <net_frag_read+0x84>
   1db24:	2500      	movs	r5, #0
   1db26:	e00d      	b.n	1db44 <net_frag_read+0x4e>
	while (len-- > 0 && frag) {
		if (data) {
			frag = net_frag_read_byte(frag, *pos,
						  pos, data + copy++);
		} else {
			frag = net_frag_read_byte(frag, *pos, pos, NULL);
   1db28:	8813      	ldrh	r3, [r2, #0]
	*pos = offset + 1;
   1db2a:	3301      	adds	r3, #1
   1db2c:	b29b      	uxth	r3, r3
   1db2e:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1db30:	8984      	ldrh	r4, [r0, #12]
   1db32:	42a3      	cmp	r3, r4
   1db34:	d304      	bcc.n	1db40 <net_frag_read+0x4a>
		*pos = 0;
   1db36:	2300      	movs	r3, #0
   1db38:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1db3a:	6800      	ldr	r0, [r0, #0]
   1db3c:	e000      	b.n	1db40 <net_frag_read+0x4a>
						  pos, data + copy++);
   1db3e:	4625      	mov	r5, r4
   1db40:	460b      	mov	r3, r1
		}

		/* Error: Still reamining length to be read, but no data. */
		if (!frag && len) {
   1db42:	b1c0      	cbz	r0, 1db76 <net_frag_read+0x80>
	while (len-- > 0 && frag) {
   1db44:	1e59      	subs	r1, r3, #1
   1db46:	b289      	uxth	r1, r1
   1db48:	b1db      	cbz	r3, 1db82 <net_frag_read+0x8c>
   1db4a:	b1d0      	cbz	r0, 1db82 <net_frag_read+0x8c>
		if (data) {
   1db4c:	2e00      	cmp	r6, #0
   1db4e:	d0eb      	beq.n	1db28 <net_frag_read+0x32>
			frag = net_frag_read_byte(frag, *pos,
   1db50:	8813      	ldrh	r3, [r2, #0]
						  pos, data + copy++);
   1db52:	1c6c      	adds	r4, r5, #1
   1db54:	b2a4      	uxth	r4, r4
	if (data) {
   1db56:	42ee      	cmn	r6, r5
   1db58:	d002      	beq.n	1db60 <net_frag_read+0x6a>
		*data = frag->data[offset];
   1db5a:	6887      	ldr	r7, [r0, #8]
   1db5c:	5cff      	ldrb	r7, [r7, r3]
   1db5e:	5577      	strb	r7, [r6, r5]
	*pos = offset + 1;
   1db60:	3301      	adds	r3, #1
   1db62:	b29b      	uxth	r3, r3
   1db64:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1db66:	8985      	ldrh	r5, [r0, #12]
   1db68:	42ab      	cmp	r3, r5
   1db6a:	d3e8      	bcc.n	1db3e <net_frag_read+0x48>
		*pos = 0;
   1db6c:	2300      	movs	r3, #0
   1db6e:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1db70:	6800      	ldr	r0, [r0, #0]
						  pos, data + copy++);
   1db72:	4625      	mov	r5, r4
   1db74:	e7e4      	b.n	1db40 <net_frag_read+0x4a>
		if (!frag && len) {
   1db76:	2900      	cmp	r1, #0
   1db78:	d0e4      	beq.n	1db44 <net_frag_read+0x4e>
	}

	return frag;

error:
	*pos = 0xffff;
   1db7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1db7e:	8013      	strh	r3, [r2, #0]

	return NULL;
   1db80:	2000      	movs	r0, #0
}
   1db82:	bcf0      	pop	{r4, r5, r6, r7}
   1db84:	4770      	bx	lr

0001db86 <net_frag_read_be16>:

struct net_buf *net_frag_read_be16(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u16_t *value)
{
   1db86:	b510      	push	{r4, lr}
   1db88:	b084      	sub	sp, #16
   1db8a:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v16[2];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   1db8c:	ab03      	add	r3, sp, #12
   1db8e:	9300      	str	r3, [sp, #0]
   1db90:	2302      	movs	r3, #2
   1db92:	f7ff ffb0 	bl	1daf6 <net_frag_read>

	*value = v16[0] << 8 | v16[1];
   1db96:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1db9a:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1db9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1dba2:	8023      	strh	r3, [r4, #0]

	return ret_frag;
}
   1dba4:	b004      	add	sp, #16
   1dba6:	bd10      	pop	{r4, pc}

0001dba8 <net_frag_read_be32>:

struct net_buf *net_frag_read_be32(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u32_t *value)
{
   1dba8:	b510      	push	{r4, lr}
   1dbaa:	b084      	sub	sp, #16
   1dbac:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v32[4];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   1dbae:	ab03      	add	r3, sp, #12
   1dbb0:	9300      	str	r3, [sp, #0]
   1dbb2:	2304      	movs	r3, #4
   1dbb4:	f7ff ff9f 	bl	1daf6 <net_frag_read>

	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   1dbb8:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1dbbc:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1dbc0:	041b      	lsls	r3, r3, #16
   1dbc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1dbc6:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1dbca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1dbce:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1dbd2:	4313      	orrs	r3, r2
   1dbd4:	6023      	str	r3, [r4, #0]

	return ret_frag;
}
   1dbd6:	b004      	add	sp, #16
   1dbd8:	bd10      	pop	{r4, pc}

0001dbda <net_pkt_write>:

struct net_buf *net_pkt_write(struct net_pkt *pkt, struct net_buf *frag,
			      u16_t offset, u16_t *pos,
			      u16_t len, u8_t *data,
			      s32_t timeout)
{
   1dbda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbde:	b083      	sub	sp, #12
   1dbe0:	9201      	str	r2, [sp, #4]
   1dbe2:	469b      	mov	fp, r3
   1dbe4:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1dbe8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	if (!pkt) {
   1dbea:	2800      	cmp	r0, #0
   1dbec:	d06d      	beq.n	1dcca <net_pkt_write+0xf0>
   1dbee:	460c      	mov	r4, r1
   1dbf0:	4682      	mov	sl, r0
   1dbf2:	4615      	mov	r5, r2
	if (data) {
   1dbf4:	b364      	cbz	r4, 1dc50 <net_pkt_write+0x76>
		if (!frag) {
   1dbf6:	2c00      	cmp	r4, #0
   1dbf8:	d065      	beq.n	1dcc6 <net_pkt_write+0xec>
		if (offset < frag->len) {
   1dbfa:	89a3      	ldrh	r3, [r4, #12]
   1dbfc:	42ab      	cmp	r3, r5
   1dbfe:	d863      	bhi.n	1dcc8 <net_pkt_write+0xee>
		if (offset == frag->len) {
   1dc00:	d032      	beq.n	1dc68 <net_pkt_write+0x8e>
		if (offset > frag->len) {
   1dc02:	42ab      	cmp	r3, r5
   1dc04:	d2f6      	bcs.n	1dbf4 <net_pkt_write+0x1a>
			offset -= frag->len;
   1dc06:	1aed      	subs	r5, r5, r3
   1dc08:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   1dc0a:	f104 0908 	add.w	r9, r4, #8
   1dc0e:	4648      	mov	r0, r9
   1dc10:	f7fd f939 	bl	1ae86 <net_buf_simple_tailroom>
   1dc14:	fa1f f880 	uxth.w	r8, r0
			if (offset < tailroom) {
   1dc18:	4545      	cmp	r5, r8
   1dc1a:	d33a      	bcc.n	1dc92 <net_pkt_write+0xb8>
			if (offset == tailroom) {
   1dc1c:	4545      	cmp	r5, r8
   1dc1e:	d03e      	beq.n	1dc9e <net_pkt_write+0xc4>
			if (offset > tailroom) {
   1dc20:	4545      	cmp	r5, r8
   1dc22:	d9e7      	bls.n	1dbf4 <net_pkt_write+0x1a>
				net_buf_add(frag, tailroom);
   1dc24:	b281      	uxth	r1, r0
   1dc26:	4648      	mov	r0, r9
   1dc28:	f7fd f8c4 	bl	1adb4 <net_buf_simple_add>
				offset -= tailroom;
   1dc2c:	eba5 0508 	sub.w	r5, r5, r8
   1dc30:	b2ad      	uxth	r5, r5
				frag = check_and_create_data(pkt,
   1dc32:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1dc34:	2c00      	cmp	r4, #0
   1dc36:	d1dd      	bne.n	1dbf4 <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1dc38:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dc3a:	4650      	mov	r0, sl
   1dc3c:	f7ff fd8a 	bl	1d754 <net_pkt_get_frag>
	if (!frag) {
   1dc40:	4604      	mov	r4, r0
   1dc42:	2800      	cmp	r0, #0
   1dc44:	d0d6      	beq.n	1dbf4 <net_pkt_write+0x1a>
	net_pkt_frag_add(pkt, frag);
   1dc46:	4601      	mov	r1, r0
   1dc48:	4650      	mov	r0, sl
   1dc4a:	f7ff fe00 	bl	1d84e <net_pkt_frag_add>
   1dc4e:	e7d1      	b.n	1dbf4 <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1dc50:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dc52:	4650      	mov	r0, sl
   1dc54:	f7ff fd7e 	bl	1d754 <net_pkt_get_frag>
	if (!frag) {
   1dc58:	4604      	mov	r4, r0
   1dc5a:	2800      	cmp	r0, #0
   1dc5c:	d0cb      	beq.n	1dbf6 <net_pkt_write+0x1c>
	net_pkt_frag_add(pkt, frag);
   1dc5e:	4601      	mov	r1, r0
   1dc60:	4650      	mov	r0, sl
   1dc62:	f7ff fdf4 	bl	1d84e <net_pkt_frag_add>
   1dc66:	e7c6      	b.n	1dbf6 <net_pkt_write+0x1c>
			if (net_buf_tailroom(frag)) {
   1dc68:	f104 0008 	add.w	r0, r4, #8
   1dc6c:	f7fd f90b 	bl	1ae86 <net_buf_simple_tailroom>
   1dc70:	bb50      	cbnz	r0, 1dcc8 <net_pkt_write+0xee>
			return check_and_create_data(pkt, frag->frags,
   1dc72:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1dc74:	b10c      	cbz	r4, 1dc7a <net_pkt_write+0xa0>
			*pos = 0;
   1dc76:	2500      	movs	r5, #0
   1dc78:	e026      	b.n	1dcc8 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1dc7a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dc7c:	4650      	mov	r0, sl
   1dc7e:	f7ff fd69 	bl	1d754 <net_pkt_get_frag>
	if (!frag) {
   1dc82:	4604      	mov	r4, r0
   1dc84:	2800      	cmp	r0, #0
   1dc86:	d0f6      	beq.n	1dc76 <net_pkt_write+0x9c>
	net_pkt_frag_add(pkt, frag);
   1dc88:	4601      	mov	r1, r0
   1dc8a:	4650      	mov	r0, sl
   1dc8c:	f7ff fddf 	bl	1d84e <net_pkt_frag_add>
   1dc90:	e7f1      	b.n	1dc76 <net_pkt_write+0x9c>
				net_buf_add(frag, offset);
   1dc92:	4629      	mov	r1, r5
   1dc94:	4648      	mov	r0, r9
   1dc96:	f7fd f88d 	bl	1adb4 <net_buf_simple_add>
				*pos = frag->len;
   1dc9a:	89a5      	ldrh	r5, [r4, #12]
   1dc9c:	e014      	b.n	1dcc8 <net_pkt_write+0xee>
				net_buf_add(frag, tailroom);
   1dc9e:	b281      	uxth	r1, r0
   1dca0:	4648      	mov	r0, r9
   1dca2:	f7fd f887 	bl	1adb4 <net_buf_simple_add>
				return check_and_create_data(pkt,
   1dca6:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1dca8:	b10c      	cbz	r4, 1dcae <net_pkt_write+0xd4>
				*pos = 0;
   1dcaa:	2500      	movs	r5, #0
   1dcac:	e00c      	b.n	1dcc8 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1dcae:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dcb0:	4650      	mov	r0, sl
   1dcb2:	f7ff fd4f 	bl	1d754 <net_pkt_get_frag>
	if (!frag) {
   1dcb6:	4604      	mov	r4, r0
   1dcb8:	2800      	cmp	r0, #0
   1dcba:	d0f6      	beq.n	1dcaa <net_pkt_write+0xd0>
	net_pkt_frag_add(pkt, frag);
   1dcbc:	4601      	mov	r1, r0
   1dcbe:	4650      	mov	r0, sl
   1dcc0:	f7ff fdc5 	bl	1d84e <net_pkt_frag_add>
   1dcc4:	e7f1      	b.n	1dcaa <net_pkt_write+0xd0>
		if (!frag) {
   1dcc6:	9d01      	ldr	r5, [sp, #4]
		NET_ERR("Invalid packet");
		goto error;
	}

	frag = adjust_write_offset(pkt, frag, offset, &offset, timeout);
	if (!frag) {
   1dcc8:	b96c      	cbnz	r4, 1dce6 <net_pkt_write+0x10c>
			net_pkt_frag_add(pkt, frag);
		}
	} while (1);

error:
	*pos = 0xffff;
   1dcca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1dcce:	f8ab 3000 	strh.w	r3, [fp]

	return NULL;
   1dcd2:	2000      	movs	r0, #0
   1dcd4:	e02d      	b.n	1dd32 <net_pkt_write+0x158>
		len -= count;
   1dcd6:	eba6 0608 	sub.w	r6, r6, r8
   1dcda:	b2b6      	uxth	r6, r6
		if (len == 0) {
   1dcdc:	b32e      	cbz	r6, 1dd2a <net_pkt_write+0x150>
		data += count;
   1dcde:	4447      	add	r7, r8
		frag = frag->frags;
   1dce0:	6824      	ldr	r4, [r4, #0]
		if (!frag) {
   1dce2:	b34c      	cbz	r4, 1dd38 <net_pkt_write+0x15e>
		offset = 0;
   1dce4:	2500      	movs	r5, #0
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   1dce6:	f8b4 800e 	ldrh.w	r8, [r4, #14]
   1dcea:	f104 0908 	add.w	r9, r4, #8
   1dcee:	4648      	mov	r0, r9
   1dcf0:	f7fd f8c5 	bl	1ae7e <net_buf_simple_headroom>
   1dcf4:	eba8 0800 	sub.w	r8, r8, r0
   1dcf8:	fa1f f888 	uxth.w	r8, r8
   1dcfc:	eba8 0805 	sub.w	r8, r8, r5
   1dd00:	fa1f f888 	uxth.w	r8, r8
		u16_t count = min(len, space);
   1dd04:	45b0      	cmp	r8, r6
   1dd06:	bf28      	it	cs
   1dd08:	46b0      	movcs	r8, r6
		memcpy(frag->data + offset, data, count);
   1dd0a:	68a0      	ldr	r0, [r4, #8]
   1dd0c:	4642      	mov	r2, r8
   1dd0e:	4639      	mov	r1, r7
   1dd10:	4428      	add	r0, r5
   1dd12:	f7e2 fad5 	bl	2c0 <memcpy>
		size_to_add = offset + count - frag->len;
   1dd16:	eb05 0108 	add.w	r1, r5, r8
   1dd1a:	89a3      	ldrh	r3, [r4, #12]
   1dd1c:	1ac9      	subs	r1, r1, r3
		if (size_to_add > 0) {
   1dd1e:	2900      	cmp	r1, #0
   1dd20:	ddd9      	ble.n	1dcd6 <net_pkt_write+0xfc>
			net_buf_add(frag, size_to_add);
   1dd22:	4648      	mov	r0, r9
   1dd24:	f7fd f846 	bl	1adb4 <net_buf_simple_add>
   1dd28:	e7d5      	b.n	1dcd6 <net_pkt_write+0xfc>
			*pos = offset + count;
   1dd2a:	4445      	add	r5, r8
   1dd2c:	f8ab 5000 	strh.w	r5, [fp]
			return frag;
   1dd30:	4620      	mov	r0, r4
}
   1dd32:	b003      	add	sp, #12
   1dd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			frag = net_pkt_get_frag(pkt, timeout);
   1dd38:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dd3a:	4650      	mov	r0, sl
   1dd3c:	f7ff fd0a 	bl	1d754 <net_pkt_get_frag>
			if (!frag) {
   1dd40:	4604      	mov	r4, r0
   1dd42:	2800      	cmp	r0, #0
   1dd44:	d0c1      	beq.n	1dcca <net_pkt_write+0xf0>
			net_pkt_frag_add(pkt, frag);
   1dd46:	4601      	mov	r1, r0
   1dd48:	4650      	mov	r0, sl
   1dd4a:	f7ff fd80 	bl	1d84e <net_pkt_frag_add>
   1dd4e:	e7c9      	b.n	1dce4 <net_pkt_write+0x10a>

0001dd50 <net_pkt_get_info>:
void net_pkt_get_info(struct k_mem_slab **rx,
		      struct k_mem_slab **tx,
		      struct net_buf_pool **rx_data,
		      struct net_buf_pool **tx_data)
{
	if (rx) {
   1dd50:	b170      	cbz	r0, 1dd70 <net_pkt_get_info+0x20>
{
   1dd52:	b410      	push	{r4}
   1dd54:	4604      	mov	r4, r0
		*rx = &rx_pkts;
   1dd56:	480c      	ldr	r0, [pc, #48]	; (1dd88 <net_pkt_get_info+0x38>)
   1dd58:	6020      	str	r0, [r4, #0]
	}

	if (tx) {
   1dd5a:	b109      	cbz	r1, 1dd60 <net_pkt_get_info+0x10>
		*tx = &tx_pkts;
   1dd5c:	480b      	ldr	r0, [pc, #44]	; (1dd8c <net_pkt_get_info+0x3c>)
   1dd5e:	6008      	str	r0, [r1, #0]
	}

	if (rx_data) {
   1dd60:	b10a      	cbz	r2, 1dd66 <net_pkt_get_info+0x16>
		*rx_data = &rx_bufs;
   1dd62:	490b      	ldr	r1, [pc, #44]	; (1dd90 <net_pkt_get_info+0x40>)
   1dd64:	6011      	str	r1, [r2, #0]
	}

	if (tx_data) {
   1dd66:	b10b      	cbz	r3, 1dd6c <net_pkt_get_info+0x1c>
		*tx_data = &tx_bufs;
   1dd68:	4a0a      	ldr	r2, [pc, #40]	; (1dd94 <net_pkt_get_info+0x44>)
   1dd6a:	601a      	str	r2, [r3, #0]
	}
}
   1dd6c:	bc10      	pop	{r4}
   1dd6e:	4770      	bx	lr
	if (tx) {
   1dd70:	b109      	cbz	r1, 1dd76 <net_pkt_get_info+0x26>
		*tx = &tx_pkts;
   1dd72:	4806      	ldr	r0, [pc, #24]	; (1dd8c <net_pkt_get_info+0x3c>)
   1dd74:	6008      	str	r0, [r1, #0]
	if (rx_data) {
   1dd76:	b10a      	cbz	r2, 1dd7c <net_pkt_get_info+0x2c>
		*rx_data = &rx_bufs;
   1dd78:	4905      	ldr	r1, [pc, #20]	; (1dd90 <net_pkt_get_info+0x40>)
   1dd7a:	6011      	str	r1, [r2, #0]
	if (tx_data) {
   1dd7c:	2b00      	cmp	r3, #0
   1dd7e:	d0f6      	beq.n	1dd6e <net_pkt_get_info+0x1e>
		*tx_data = &tx_bufs;
   1dd80:	4a04      	ldr	r2, [pc, #16]	; (1dd94 <net_pkt_get_info+0x44>)
   1dd82:	601a      	str	r2, [r3, #0]
   1dd84:	4770      	bx	lr
   1dd86:	bf00      	nop
   1dd88:	2000d100 	.word	0x2000d100
   1dd8c:	2000d11c 	.word	0x2000d11c
   1dd90:	2000d280 	.word	0x2000d280
   1dd94:	2000d2a0 	.word	0x2000d2a0

0001dd98 <net_frag_get_pos>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   1dd98:	b500      	push	{lr}
   1dd9a:	b083      	sub	sp, #12
	struct net_buf *frag;

	frag = net_frag_skip(pkt->frags, offset, pos, 0);
   1dd9c:	6880      	ldr	r0, [r0, #8]
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   1dd9e:	2300      	movs	r3, #0
   1dda0:	9300      	str	r3, [sp, #0]
   1dda2:	f7ff fea8 	bl	1daf6 <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   1dda6:	b003      	add	sp, #12
   1dda8:	f85d fb04 	ldr.w	pc, [sp], #4

0001ddac <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   1ddac:	b500      	push	{lr}
   1ddae:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1ddb0:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1ddb4:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1ddb8:	f10d 0206 	add.w	r2, sp, #6
   1ddbc:	4419      	add	r1, r3
   1ddbe:	f7ff ffeb 	bl	1dd98 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1ddc2:	b130      	cbz	r0, 1ddd2 <net_pkt_icmp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   1ddc4:	6880      	ldr	r0, [r0, #8]
   1ddc6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ddca:	4418      	add	r0, r3
}
   1ddcc:	b003      	add	sp, #12
   1ddce:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1ddd2:	2000      	movs	r0, #0
   1ddd4:	e7fa      	b.n	1ddcc <net_pkt_icmp_data+0x20>

0001ddd6 <net_pkt_icmp_opt_data>:

u8_t *net_pkt_icmp_opt_data(struct net_pkt *pkt, size_t opt_len)
{
   1ddd6:	b500      	push	{lr}
   1ddd8:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1ddda:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) + opt_len,
   1ddde:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1dde2:	4413      	add	r3, r2
	frag = net_frag_get_pos(pkt,
   1dde4:	4419      	add	r1, r3
   1dde6:	f10d 0206 	add.w	r2, sp, #6
   1ddea:	b289      	uxth	r1, r1
   1ddec:	f7ff ffd4 	bl	1dd98 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1ddf0:	b130      	cbz	r0, 1de00 <net_pkt_icmp_opt_data+0x2a>
		/* We tried to read past the end of the data */
		too_short_msg("icmp opt data", pkt, offset, opt_len);
		return NULL;
	}

	return frag->data + offset;
   1ddf2:	6880      	ldr	r0, [r0, #8]
   1ddf4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ddf8:	4418      	add	r0, r3
}
   1ddfa:	b003      	add	sp, #12
   1ddfc:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1de00:	2000      	movs	r0, #0
   1de02:	e7fa      	b.n	1ddfa <net_pkt_icmp_opt_data+0x24>

0001de04 <net_pkt_udp_data>:

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   1de04:	b500      	push	{lr}
   1de06:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1de08:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1de0c:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1de10:	f10d 0206 	add.w	r2, sp, #6
   1de14:	4419      	add	r1, r3
   1de16:	f7ff ffbf 	bl	1dd98 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1de1a:	b130      	cbz	r0, 1de2a <net_pkt_udp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   1de1c:	6880      	ldr	r0, [r0, #8]
   1de1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1de22:	4418      	add	r0, r3
}
   1de24:	b003      	add	sp, #12
   1de26:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1de2a:	2000      	movs	r0, #0
   1de2c:	e7fa      	b.n	1de24 <net_pkt_udp_data+0x20>

0001de2e <net_pkt_tcp_data>:

struct net_tcp_hdr *net_pkt_tcp_data(struct net_pkt *pkt)
{
   1de2e:	b500      	push	{lr}
   1de30:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1de32:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1de36:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1de3a:	f10d 0206 	add.w	r2, sp, #6
   1de3e:	4419      	add	r1, r3
   1de40:	f7ff ffaa 	bl	1dd98 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1de44:	b130      	cbz	r0, 1de54 <net_pkt_tcp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("tcp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_tcp_hdr *)(frag->data + offset);
   1de46:	6880      	ldr	r0, [r0, #8]
   1de48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1de4c:	4418      	add	r0, r3
}
   1de4e:	b003      	add	sp, #12
   1de50:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1de54:	2000      	movs	r0, #0
   1de56:	e7fa      	b.n	1de4e <net_pkt_tcp_data+0x20>

0001de58 <net_pkt_clone>:

struct net_pkt *net_pkt_clone(struct net_pkt *pkt, s32_t timeout)
{
   1de58:	b570      	push	{r4, r5, r6, lr}
   1de5a:	b082      	sub	sp, #8
	struct net_pkt *clone;
	struct net_buf *frag;
	u16_t pos;

	if (!pkt) {
   1de5c:	4605      	mov	r5, r0
   1de5e:	2800      	cmp	r0, #0
   1de60:	d065      	beq.n	1df2e <net_pkt_clone+0xd6>
   1de62:	460e      	mov	r6, r1
		return NULL;
	}

	clone = net_pkt_get_reserve(pkt->slab, 0, timeout);
   1de64:	460a      	mov	r2, r1
   1de66:	2100      	movs	r1, #0
   1de68:	6840      	ldr	r0, [r0, #4]
   1de6a:	f7ff fbad 	bl	1d5c8 <net_pkt_get_reserve>
	if (!clone) {
   1de6e:	4604      	mov	r4, r0
   1de70:	2800      	cmp	r0, #0
   1de72:	d054      	beq.n	1df1e <net_pkt_clone+0xc6>
		return NULL;
	}

	clone->frags = NULL;
   1de74:	2300      	movs	r3, #0
   1de76:	6083      	str	r3, [r0, #8]

	if (pkt->frags) {
   1de78:	68ab      	ldr	r3, [r5, #8]
   1de7a:	b173      	cbz	r3, 1de9a <net_pkt_clone+0x42>
   1de7c:	2100      	movs	r1, #0
   1de7e:	e002      	b.n	1de86 <net_pkt_clone+0x2e>
		bytes += buf->len;
   1de80:	899a      	ldrh	r2, [r3, #12]
   1de82:	4411      	add	r1, r2
		buf = buf->frags;
   1de84:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1de86:	2b00      	cmp	r3, #0
   1de88:	d1fa      	bne.n	1de80 <net_pkt_clone+0x28>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1de8a:	4633      	mov	r3, r6
   1de8c:	2200      	movs	r2, #0
   1de8e:	4628      	mov	r0, r5
   1de90:	f7ff fcf4 	bl	1d87c <net_pkt_copy>
		clone->frags = net_pkt_copy_all(pkt, 0, timeout);
   1de94:	60a0      	str	r0, [r4, #8]
		if (!clone->frags) {
   1de96:	2800      	cmp	r0, #0
   1de98:	d044      	beq.n	1df24 <net_pkt_clone+0xcc>
			net_pkt_unref(clone);
			return NULL;
		}
	}

	clone->context = pkt->context;
   1de9a:	68eb      	ldr	r3, [r5, #12]
   1de9c:	60e3      	str	r3, [r4, #12]
	clone->token = pkt->token;
   1de9e:	692b      	ldr	r3, [r5, #16]
   1dea0:	6123      	str	r3, [r4, #16]
	clone->iface = pkt->iface;
   1dea2:	696b      	ldr	r3, [r5, #20]
   1dea4:	6163      	str	r3, [r4, #20]

	if (clone->frags) {
   1dea6:	68a3      	ldr	r3, [r4, #8]
   1dea8:	b1db      	cbz	r3, 1dee2 <net_pkt_clone+0x8a>
		frag = net_frag_get_pos(clone, net_pkt_ip_hdr_len(pkt), &pos);
   1deaa:	f10d 0206 	add.w	r2, sp, #6
   1deae:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   1deb2:	4620      	mov	r0, r4
   1deb4:	f7ff ff70 	bl	1dd98 <net_frag_get_pos>

		net_pkt_set_appdata(clone, frag->data + pos);
   1deb8:	6883      	ldr	r3, [r0, #8]
   1deba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1debe:	4413      	add	r3, r2
	pkt->appdata = data;
   1dec0:	61a3      	str	r3, [r4, #24]
	return pkt->appdatalen;
   1dec2:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
	pkt->appdatalen = len;
   1dec4:	8623      	strh	r3, [r4, #48]	; 0x30

		/* The link header pointers are only usable if there is
		 * a fragment that we copied because those pointers point
		 * to start of the fragment which we do not have right now.
		 */
		memcpy(&clone->lladdr_src, &pkt->lladdr_src,
   1dec6:	2208      	movs	r2, #8
   1dec8:	f105 0120 	add.w	r1, r5, #32
   1decc:	f104 0020 	add.w	r0, r4, #32
   1ded0:	f7e2 f9f6 	bl	2c0 <memcpy>
		       sizeof(clone->lladdr_src));
		memcpy(&clone->lladdr_dst, &pkt->lladdr_dst,
   1ded4:	2208      	movs	r2, #8
   1ded6:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1deda:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1dede:	f7e2 f9ef 	bl	2c0 <memcpy>
	pkt->next_hdr = hdr;
   1dee2:	2300      	movs	r3, #0
   1dee4:	61e3      	str	r3, [r4, #28]
	return pkt->ip_hdr_len;
   1dee6:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	pkt->ip_hdr_len = len;
   1deea:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->family;
   1deee:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1def2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	pkt->family = family;
   1def6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1defa:	f363 02c6 	bfi	r2, r3, #3, #4
   1defe:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	net_pkt_set_ip_hdr_len(clone, net_pkt_ip_hdr_len(pkt));

	net_pkt_set_family(clone, net_pkt_family(pkt));

#if defined(CONFIG_NET_IPV6)
	clone->ipv6_hop_limit = pkt->ipv6_hop_limit;
   1df02:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1df06:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	clone->ipv6_ext_len = pkt->ipv6_ext_len;
   1df0a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   1df0e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	clone->ipv6_ext_opt_len = pkt->ipv6_ext_opt_len;
   1df12:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1df16:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	clone->ipv6_prev_hdr_start = pkt->ipv6_prev_hdr_start;
   1df1a:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   1df1c:	87e3      	strh	r3, [r4, #62]	; 0x3e
#endif

	NET_DBG("Cloned %p to %p", pkt, clone);

	return clone;
}
   1df1e:	4620      	mov	r0, r4
   1df20:	b002      	add	sp, #8
   1df22:	bd70      	pop	{r4, r5, r6, pc}
			net_pkt_unref(clone);
   1df24:	4620      	mov	r0, r4
   1df26:	f7ff fc68 	bl	1d7fa <net_pkt_unref>
			return NULL;
   1df2a:	2400      	movs	r4, #0
   1df2c:	e7f7      	b.n	1df1e <net_pkt_clone+0xc6>
		return NULL;
   1df2e:	4604      	mov	r4, r0
   1df30:	e7f5      	b.n	1df1e <net_pkt_clone+0xc6>

0001df32 <net_pkt_init>:

void net_pkt_init(void)
{
   1df32:	4770      	bx	lr

0001df34 <net_value_to_udec>:
	*(ptr - 1) = '\0';
	return buf;
}

static int net_value_to_udec(char *buf, u32_t value, int precision)
{
   1df34:	b470      	push	{r4, r5, r6}
	int i;
	int temp;
	char *start = buf;

	divisor = 1000000000;
	if (precision < 0)
   1df36:	2a00      	cmp	r2, #0
   1df38:	db03      	blt.n	1df42 <net_value_to_udec+0xe>
	for (i = 9; i >= 0; i--, divisor /= 10) {
		temp = value / divisor;
		value = value % divisor;
		if ((precision > i) || (temp != 0)) {
			precision = i;
			*buf++ = (char) (temp + '0');
   1df3a:	4606      	mov	r6, r0
   1df3c:	2409      	movs	r4, #9
   1df3e:	4b0e      	ldr	r3, [pc, #56]	; (1df78 <net_value_to_udec+0x44>)
   1df40:	e00a      	b.n	1df58 <net_value_to_udec+0x24>
		precision = 1;
   1df42:	2201      	movs	r2, #1
   1df44:	e7f9      	b.n	1df3a <net_value_to_udec+0x6>
			*buf++ = (char) (temp + '0');
   1df46:	3530      	adds	r5, #48	; 0x30
   1df48:	7035      	strb	r5, [r6, #0]
			precision = i;
   1df4a:	4622      	mov	r2, r4
			*buf++ = (char) (temp + '0');
   1df4c:	3601      	adds	r6, #1
	for (i = 9; i >= 0; i--, divisor /= 10) {
   1df4e:	3c01      	subs	r4, #1
   1df50:	4d0a      	ldr	r5, [pc, #40]	; (1df7c <net_value_to_udec+0x48>)
   1df52:	fba5 5303 	umull	r5, r3, r5, r3
   1df56:	08db      	lsrs	r3, r3, #3
   1df58:	2c00      	cmp	r4, #0
   1df5a:	db08      	blt.n	1df6e <net_value_to_udec+0x3a>
		temp = value / divisor;
   1df5c:	fbb1 f5f3 	udiv	r5, r1, r3
		value = value % divisor;
   1df60:	fb03 1115 	mls	r1, r3, r5, r1
		if ((precision > i) || (temp != 0)) {
   1df64:	42a2      	cmp	r2, r4
   1df66:	dcee      	bgt.n	1df46 <net_value_to_udec+0x12>
   1df68:	2d00      	cmp	r5, #0
   1df6a:	d0f0      	beq.n	1df4e <net_value_to_udec+0x1a>
   1df6c:	e7eb      	b.n	1df46 <net_value_to_udec+0x12>
		}
	}
	*buf = 0;
   1df6e:	2300      	movs	r3, #0
   1df70:	7033      	strb	r3, [r6, #0]

	return buf - start;
}
   1df72:	1a30      	subs	r0, r6, r0
   1df74:	bc70      	pop	{r4, r5, r6}
   1df76:	4770      	bx	lr
   1df78:	3b9aca00 	.word	0x3b9aca00
   1df7c:	cccccccd 	.word	0xcccccccd

0001df80 <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   1df80:	b410      	push	{r4}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   1df82:	3a01      	subs	r2, #1
   1df84:	440a      	add	r2, r1

	while (ptr < end) {
   1df86:	e000      	b.n	1df8a <calc_chksum+0xa>
		tmp = (ptr[0] << 8) + ptr[1];
		sum += tmp;
		if (sum < tmp) {
			sum++;
		}
		ptr += 2;
   1df88:	3102      	adds	r1, #2
	while (ptr < end) {
   1df8a:	4291      	cmp	r1, r2
   1df8c:	d20b      	bcs.n	1dfa6 <calc_chksum+0x26>
		tmp = (ptr[0] << 8) + ptr[1];
   1df8e:	780c      	ldrb	r4, [r1, #0]
   1df90:	784b      	ldrb	r3, [r1, #1]
   1df92:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1df96:	b29b      	uxth	r3, r3
		sum += tmp;
   1df98:	4418      	add	r0, r3
   1df9a:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1df9c:	4283      	cmp	r3, r0
   1df9e:	d9f3      	bls.n	1df88 <calc_chksum+0x8>
			sum++;
   1dfa0:	3001      	adds	r0, #1
   1dfa2:	b280      	uxth	r0, r0
   1dfa4:	e7f0      	b.n	1df88 <calc_chksum+0x8>
	}

	if (ptr == end) {
   1dfa6:	d001      	beq.n	1dfac <calc_chksum+0x2c>
			sum++;
		}
	}

	return sum;
}
   1dfa8:	bc10      	pop	{r4}
   1dfaa:	4770      	bx	lr
		tmp = ptr[0] << 8;
   1dfac:	780b      	ldrb	r3, [r1, #0]
   1dfae:	021b      	lsls	r3, r3, #8
		sum += tmp;
   1dfb0:	4418      	add	r0, r3
   1dfb2:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1dfb4:	4283      	cmp	r3, r0
   1dfb6:	d9f7      	bls.n	1dfa8 <calc_chksum+0x28>
			sum++;
   1dfb8:	3001      	adds	r0, #1
   1dfba:	b280      	uxth	r0, r0
   1dfbc:	e7f4      	b.n	1dfa8 <calc_chksum+0x28>

0001dfbe <convert_port>:
	return false;
}

#if defined(CONFIG_NET_IPV6) || defined(CONFIG_NET_IPV4)
static bool convert_port(const char *buf, u16_t *port)
{
   1dfbe:	b530      	push	{r4, r5, lr}
   1dfc0:	b083      	sub	sp, #12
   1dfc2:	4604      	mov	r4, r0
   1dfc4:	460d      	mov	r5, r1
	unsigned long tmp;
	char *endptr;

	tmp = strtoul(buf, &endptr, 10);
   1dfc6:	220a      	movs	r2, #10
   1dfc8:	a901      	add	r1, sp, #4
   1dfca:	f00d fab7 	bl	2b53c <strtoul>
	if ((endptr == buf && tmp == 0) ||
   1dfce:	9b01      	ldr	r3, [sp, #4]
   1dfd0:	429c      	cmp	r4, r3
   1dfd2:	d008      	beq.n	1dfe6 <convert_port+0x28>
	    !(*buf != '\0' && *endptr == '\0') ||
   1dfd4:	7822      	ldrb	r2, [r4, #0]
	if ((endptr == buf && tmp == 0) ||
   1dfd6:	b16a      	cbz	r2, 1dff4 <convert_port+0x36>
	    !(*buf != '\0' && *endptr == '\0') ||
   1dfd8:	781b      	ldrb	r3, [r3, #0]
   1dfda:	b973      	cbnz	r3, 1dffa <convert_port+0x3c>
	    ((unsigned long)(unsigned short)tmp != tmp)) {
   1dfdc:	b283      	uxth	r3, r0
	    !(*buf != '\0' && *endptr == '\0') ||
   1dfde:	4298      	cmp	r0, r3
   1dfe0:	d005      	beq.n	1dfee <convert_port+0x30>
		return false;
   1dfe2:	2000      	movs	r0, #0
   1dfe4:	e007      	b.n	1dff6 <convert_port+0x38>
	if ((endptr == buf && tmp == 0) ||
   1dfe6:	2800      	cmp	r0, #0
   1dfe8:	d1f4      	bne.n	1dfd4 <convert_port+0x16>
		return false;
   1dfea:	2000      	movs	r0, #0
   1dfec:	e003      	b.n	1dff6 <convert_port+0x38>
	}

	*port = tmp;
   1dfee:	802b      	strh	r3, [r5, #0]

	return true;
   1dff0:	2001      	movs	r0, #1
   1dff2:	e000      	b.n	1dff6 <convert_port+0x38>
		return false;
   1dff4:	2000      	movs	r0, #0
}
   1dff6:	b003      	add	sp, #12
   1dff8:	bd30      	pop	{r4, r5, pc}
		return false;
   1dffa:	2000      	movs	r0, #0
   1dffc:	e7fb      	b.n	1dff6 <convert_port+0x38>

0001dffe <net_byte_to_hex>:
{
   1dffe:	b430      	push	{r4, r5}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1e000:	090c      	lsrs	r4, r1, #4
   1e002:	2500      	movs	r5, #0
   1e004:	e00a      	b.n	1e01c <net_byte_to_hex+0x1e>
		if (i == 0 && !pad && !val) {
   1e006:	b96b      	cbnz	r3, 1e024 <net_byte_to_hex+0x26>
   1e008:	b12c      	cbz	r4, 1e016 <net_byte_to_hex+0x18>
   1e00a:	e00b      	b.n	1e024 <net_byte_to_hex+0x26>
			*ptr++ = (char) (val - 10 + base);
   1e00c:	4414      	add	r4, r2
   1e00e:	b2e4      	uxtb	r4, r4
   1e010:	3c0a      	subs	r4, #10
   1e012:	7004      	strb	r4, [r0, #0]
   1e014:	3001      	adds	r0, #1
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1e016:	3501      	adds	r5, #1
   1e018:	f001 040f 	and.w	r4, r1, #15
   1e01c:	2d01      	cmp	r5, #1
   1e01e:	dc07      	bgt.n	1e030 <net_byte_to_hex+0x32>
		if (i == 0 && !pad && !val) {
   1e020:	2d00      	cmp	r5, #0
   1e022:	d0f0      	beq.n	1e006 <net_byte_to_hex+0x8>
		if (val < 10) {
   1e024:	2c09      	cmp	r4, #9
   1e026:	dcf1      	bgt.n	1e00c <net_byte_to_hex+0xe>
			*ptr++ = (char) (val + '0');
   1e028:	3430      	adds	r4, #48	; 0x30
   1e02a:	7004      	strb	r4, [r0, #0]
   1e02c:	3001      	adds	r0, #1
   1e02e:	e7f2      	b.n	1e016 <net_byte_to_hex+0x18>
	*ptr = '\0';
   1e030:	2300      	movs	r3, #0
   1e032:	7003      	strb	r3, [r0, #0]
}
   1e034:	bc30      	pop	{r4, r5}
   1e036:	4770      	bx	lr

0001e038 <net_sprint_ll_addr_buf>:
{
   1e038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e03c:	4607      	mov	r7, r0
   1e03e:	460e      	mov	r6, r1
   1e040:	4690      	mov	r8, r2
	switch (ll_len) {
   1e042:	2906      	cmp	r1, #6
   1e044:	d002      	beq.n	1e04c <net_sprint_ll_addr_buf+0x14>
   1e046:	2908      	cmp	r1, #8
   1e048:	d000      	beq.n	1e04c <net_sprint_ll_addr_buf+0x14>
		len = 6;
   1e04a:	2606      	movs	r6, #6
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1e04c:	b2dd      	uxtb	r5, r3
	char *ptr = buf;
   1e04e:	4640      	mov	r0, r8
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1e050:	2400      	movs	r4, #0
   1e052:	e00c      	b.n	1e06e <net_sprint_ll_addr_buf+0x36>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   1e054:	2301      	movs	r3, #1
   1e056:	2241      	movs	r2, #65	; 0x41
   1e058:	5d39      	ldrb	r1, [r7, r4]
   1e05a:	f7ff ffd0 	bl	1dffe <net_byte_to_hex>
   1e05e:	4602      	mov	r2, r0
		*ptr++ = ':';
   1e060:	3001      	adds	r0, #1
   1e062:	233a      	movs	r3, #58	; 0x3a
   1e064:	7013      	strb	r3, [r2, #0]
		blen -= 3;
   1e066:	3d03      	subs	r5, #3
   1e068:	b2ed      	uxtb	r5, r5
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1e06a:	3401      	adds	r4, #1
   1e06c:	b2e4      	uxtb	r4, r4
   1e06e:	42b4      	cmp	r4, r6
   1e070:	d201      	bcs.n	1e076 <net_sprint_ll_addr_buf+0x3e>
   1e072:	2d00      	cmp	r5, #0
   1e074:	d1ee      	bne.n	1e054 <net_sprint_ll_addr_buf+0x1c>
	if (!(ptr - buf)) {
   1e076:	4540      	cmp	r0, r8
   1e078:	d005      	beq.n	1e086 <net_sprint_ll_addr_buf+0x4e>
	*(ptr - 1) = '\0';
   1e07a:	2300      	movs	r3, #0
   1e07c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return buf;
   1e080:	4640      	mov	r0, r8
   1e082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   1e086:	2000      	movs	r0, #0
}
   1e088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e08c <net_addr_ntop>:
{
   1e08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e090:	b087      	sub	sp, #28
	unsigned char zeros[8] = { 0 };
   1e092:	2300      	movs	r3, #0
   1e094:	9304      	str	r3, [sp, #16]
   1e096:	9305      	str	r3, [sp, #20]
	if (family == AF_INET6) {
   1e098:	280a      	cmp	r0, #10
   1e09a:	d011      	beq.n	1e0c0 <net_addr_ntop+0x34>
	} else if (family == AF_INET) {
   1e09c:	2802      	cmp	r0, #2
   1e09e:	f040 80c8 	bne.w	1e232 <net_addr_ntop+0x1a6>
		addr = (struct in_addr *)src;
   1e0a2:	9101      	str	r1, [sp, #4]
		len = 4;
   1e0a4:	f04f 0804 	mov.w	r8, #4
		delim = '.';
   1e0a8:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
	s8_t pos = -1;
   1e0ac:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   1e0b0:	f04f 0a01 	mov.w	sl, #1
   1e0b4:	9202      	str	r2, [sp, #8]
   1e0b6:	9003      	str	r0, [sp, #12]
	char *ptr = dst;
   1e0b8:	4616      	mov	r6, r2
	bool needcolon = false;
   1e0ba:	2500      	movs	r5, #0
	for (i = 0; i < len; i++) {
   1e0bc:	462c      	mov	r4, r5
   1e0be:	e072      	b.n	1e1a6 <net_addr_ntop+0x11a>
		w = (u16_t *)addr6->s6_addr16;
   1e0c0:	460f      	mov	r7, r1
		for (i = 0; i < 8; i++) {
   1e0c2:	461d      	mov	r5, r3
   1e0c4:	e001      	b.n	1e0ca <net_addr_ntop+0x3e>
   1e0c6:	3501      	adds	r5, #1
   1e0c8:	b2ed      	uxtb	r5, r5
   1e0ca:	2d07      	cmp	r5, #7
   1e0cc:	d810      	bhi.n	1e0f0 <net_addr_ntop+0x64>
   1e0ce:	462b      	mov	r3, r5
			for (j = i; j < 8; j++) {
   1e0d0:	2b07      	cmp	r3, #7
   1e0d2:	d8f8      	bhi.n	1e0c6 <net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1e0d4:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
   1e0d8:	2900      	cmp	r1, #0
   1e0da:	d1f4      	bne.n	1e0c6 <net_addr_ntop+0x3a>
				zeros[i]++;
   1e0dc:	a906      	add	r1, sp, #24
   1e0de:	194c      	adds	r4, r1, r5
   1e0e0:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1e0e4:	3101      	adds	r1, #1
   1e0e6:	f804 1c08 	strb.w	r1, [r4, #-8]
			for (j = i; j < 8; j++) {
   1e0ea:	3301      	adds	r3, #1
   1e0ec:	b2db      	uxtb	r3, r3
   1e0ee:	e7ef      	b.n	1e0d0 <net_addr_ntop+0x44>
   1e0f0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e0f4:	f04f 0a01 	mov.w	sl, #1
   1e0f8:	2300      	movs	r3, #0
   1e0fa:	e001      	b.n	1e100 <net_addr_ntop+0x74>
		for (i = 0; i < 8; i++) {
   1e0fc:	3301      	adds	r3, #1
   1e0fe:	b2db      	uxtb	r3, r3
   1e100:	2b07      	cmp	r3, #7
   1e102:	d809      	bhi.n	1e118 <net_addr_ntop+0x8c>
			if (zeros[i] > longest) {
   1e104:	a906      	add	r1, sp, #24
   1e106:	4419      	add	r1, r3
   1e108:	f811 1c08 	ldrb.w	r1, [r1, #-8]
   1e10c:	458a      	cmp	sl, r1
   1e10e:	d2f5      	bcs.n	1e0fc <net_addr_ntop+0x70>
				pos = i;
   1e110:	fa4f f983 	sxtb.w	r9, r3
				longest = zeros[i];
   1e114:	468a      	mov	sl, r1
   1e116:	e7f1      	b.n	1e0fc <net_addr_ntop+0x70>
		if (longest == 1) {
   1e118:	f1ba 0f01 	cmp.w	sl, #1
   1e11c:	d004      	beq.n	1e128 <net_addr_ntop+0x9c>
		len = 8;
   1e11e:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1e122:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
   1e126:	e7c5      	b.n	1e0b4 <net_addr_ntop+0x28>
		len = 8;
   1e128:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1e12c:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
			pos = -1;
   1e130:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e134:	e7be      	b.n	1e0b4 <net_addr_ntop+0x28>
			value = (u32_t)addr->s4_addr[i];
   1e136:	9a01      	ldr	r2, [sp, #4]
   1e138:	5cd1      	ldrb	r1, [r2, r3]
   1e13a:	b28b      	uxth	r3, r1
			if (value == 0) {
   1e13c:	b93b      	cbnz	r3, 1e14e <net_addr_ntop+0xc2>
				*ptr++ = '0';
   1e13e:	4633      	mov	r3, r6
   1e140:	2230      	movs	r2, #48	; 0x30
   1e142:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
   1e146:	f886 b001 	strb.w	fp, [r6, #1]
   1e14a:	461e      	mov	r6, r3
				continue;
   1e14c:	e029      	b.n	1e1a2 <net_addr_ntop+0x116>
			l = net_value_to_udec(ptr, value, 0);
   1e14e:	2200      	movs	r2, #0
   1e150:	4630      	mov	r0, r6
   1e152:	f7ff feef 	bl	1df34 <net_value_to_udec>
			ptr += l;
   1e156:	fa56 f080 	uxtab	r0, r6, r0
			*ptr++ = delim;
   1e15a:	1c46      	adds	r6, r0, #1
   1e15c:	f880 b000 	strb.w	fp, [r0]
			continue;
   1e160:	e01f      	b.n	1e1a2 <net_addr_ntop+0x116>
			if (needcolon || i == 0) {
   1e162:	b905      	cbnz	r5, 1e166 <net_addr_ntop+0xda>
   1e164:	b95c      	cbnz	r4, 1e17e <net_addr_ntop+0xf2>
				*ptr++ = ':';
   1e166:	1c73      	adds	r3, r6, #1
   1e168:	223a      	movs	r2, #58	; 0x3a
   1e16a:	7032      	strb	r2, [r6, #0]
			*ptr++ = ':';
   1e16c:	1c5e      	adds	r6, r3, #1
   1e16e:	223a      	movs	r2, #58	; 0x3a
   1e170:	701a      	strb	r2, [r3, #0]
			i += longest - 1;
   1e172:	4454      	add	r4, sl
   1e174:	b2e4      	uxtb	r4, r4
   1e176:	3c01      	subs	r4, #1
   1e178:	b2e4      	uxtb	r4, r4
			needcolon = false;
   1e17a:	2500      	movs	r5, #0
			continue;
   1e17c:	e011      	b.n	1e1a2 <net_addr_ntop+0x116>
   1e17e:	4633      	mov	r3, r6
   1e180:	e7f4      	b.n	1e16c <net_addr_ntop+0xe0>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1e182:	2300      	movs	r3, #0
   1e184:	2261      	movs	r2, #97	; 0x61
   1e186:	4630      	mov	r0, r6
   1e188:	f7ff ff39 	bl	1dffe <net_byte_to_hex>
   1e18c:	e002      	b.n	1e194 <net_addr_ntop+0x108>
					*ptr++ = (char) (bh - 10 + 'a');
   1e18e:	1c70      	adds	r0, r6, #1
   1e190:	3157      	adds	r1, #87	; 0x57
   1e192:	7031      	strb	r1, [r6, #0]
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1e194:	2301      	movs	r3, #1
   1e196:	2261      	movs	r2, #97	; 0x61
   1e198:	4629      	mov	r1, r5
   1e19a:	f7ff ff30 	bl	1dffe <net_byte_to_hex>
   1e19e:	4606      	mov	r6, r0
		needcolon = true;
   1e1a0:	2501      	movs	r5, #1
	for (i = 0; i < len; i++) {
   1e1a2:	3401      	adds	r4, #1
   1e1a4:	b2e4      	uxtb	r4, r4
   1e1a6:	4623      	mov	r3, r4
   1e1a8:	45a0      	cmp	r8, r4
   1e1aa:	dd31      	ble.n	1e210 <net_addr_ntop+0x184>
		if (len == 4) {
   1e1ac:	f1b8 0f04 	cmp.w	r8, #4
   1e1b0:	d0c1      	beq.n	1e136 <net_addr_ntop+0xaa>
		if (i == pos) {
   1e1b2:	454b      	cmp	r3, r9
   1e1b4:	d0d5      	beq.n	1e162 <net_addr_ntop+0xd6>
		if (needcolon) {
   1e1b6:	b115      	cbz	r5, 1e1be <net_addr_ntop+0x132>
			*ptr++ = ':';
   1e1b8:	233a      	movs	r3, #58	; 0x3a
   1e1ba:	7033      	strb	r3, [r6, #0]
   1e1bc:	3601      	adds	r6, #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1e1be:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   1e1c2:	021d      	lsls	r5, r3, #8
   1e1c4:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   1e1c8:	b22d      	sxth	r5, r5
		bh = value >> 8;
   1e1ca:	f3c5 2107 	ubfx	r1, r5, #8, #8
		bl = value & 0xff;
   1e1ce:	b2ed      	uxtb	r5, r5
		if (bh) {
   1e1d0:	b139      	cbz	r1, 1e1e2 <net_addr_ntop+0x156>
			if (bh > 0x0f) {
   1e1d2:	290f      	cmp	r1, #15
   1e1d4:	d8d5      	bhi.n	1e182 <net_addr_ntop+0xf6>
				if (bh < 10) {
   1e1d6:	2909      	cmp	r1, #9
   1e1d8:	d8d9      	bhi.n	1e18e <net_addr_ntop+0x102>
					*ptr++ = (char)(bh + '0');
   1e1da:	1c70      	adds	r0, r6, #1
   1e1dc:	3130      	adds	r1, #48	; 0x30
   1e1de:	7031      	strb	r1, [r6, #0]
   1e1e0:	e7d8      	b.n	1e194 <net_addr_ntop+0x108>
		} else if (bl > 0x0f) {
   1e1e2:	2d0f      	cmp	r5, #15
   1e1e4:	d806      	bhi.n	1e1f4 <net_addr_ntop+0x168>
			if (bl < 10) {
   1e1e6:	2d09      	cmp	r5, #9
   1e1e8:	d80d      	bhi.n	1e206 <net_addr_ntop+0x17a>
				*ptr++ = (char)(bl + '0');
   1e1ea:	3530      	adds	r5, #48	; 0x30
   1e1ec:	7035      	strb	r5, [r6, #0]
   1e1ee:	3601      	adds	r6, #1
		needcolon = true;
   1e1f0:	2501      	movs	r5, #1
   1e1f2:	e7d6      	b.n	1e1a2 <net_addr_ntop+0x116>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1e1f4:	2300      	movs	r3, #0
   1e1f6:	2261      	movs	r2, #97	; 0x61
   1e1f8:	4629      	mov	r1, r5
   1e1fa:	4630      	mov	r0, r6
   1e1fc:	f7ff feff 	bl	1dffe <net_byte_to_hex>
   1e200:	4606      	mov	r6, r0
		needcolon = true;
   1e202:	2501      	movs	r5, #1
   1e204:	e7cd      	b.n	1e1a2 <net_addr_ntop+0x116>
				*ptr++ = (char) (bl - 10 + 'a');
   1e206:	3557      	adds	r5, #87	; 0x57
   1e208:	7035      	strb	r5, [r6, #0]
   1e20a:	3601      	adds	r6, #1
		needcolon = true;
   1e20c:	2501      	movs	r5, #1
   1e20e:	e7c8      	b.n	1e1a2 <net_addr_ntop+0x116>
	if (!(ptr - dst)) {
   1e210:	9b02      	ldr	r3, [sp, #8]
   1e212:	429e      	cmp	r6, r3
   1e214:	d00f      	beq.n	1e236 <net_addr_ntop+0x1aa>
	if (family == AF_INET) {
   1e216:	9b03      	ldr	r3, [sp, #12]
   1e218:	2b02      	cmp	r3, #2
   1e21a:	d005      	beq.n	1e228 <net_addr_ntop+0x19c>
		*ptr = '\0';
   1e21c:	2300      	movs	r3, #0
   1e21e:	7033      	strb	r3, [r6, #0]
	return dst;
   1e220:	9802      	ldr	r0, [sp, #8]
}
   1e222:	b007      	add	sp, #28
   1e224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*(ptr - 1) = '\0';
   1e228:	2300      	movs	r3, #0
   1e22a:	f806 3c01 	strb.w	r3, [r6, #-1]
	return dst;
   1e22e:	9802      	ldr	r0, [sp, #8]
   1e230:	e7f7      	b.n	1e222 <net_addr_ntop+0x196>
		return NULL;
   1e232:	2000      	movs	r0, #0
   1e234:	e7f5      	b.n	1e222 <net_addr_ntop+0x196>
		return NULL;
   1e236:	2000      	movs	r0, #0
   1e238:	e7f3      	b.n	1e222 <net_addr_ntop+0x196>

0001e23a <net_addr_pton>:
{
   1e23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e23e:	b082      	sub	sp, #8
   1e240:	460d      	mov	r5, r1
   1e242:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1e244:	2802      	cmp	r0, #2
   1e246:	d010      	beq.n	1e26a <net_addr_pton+0x30>
	} else if (family == AF_INET6) {
   1e248:	280a      	cmp	r0, #10
   1e24a:	f040 80c6 	bne.w	1e3da <net_addr_pton+0x1a0>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1e24e:	212e      	movs	r1, #46	; 0x2e
   1e250:	4628      	mov	r0, r5
   1e252:	f00c fc59 	bl	2ab08 <strchr>
   1e256:	b378      	cbz	r0, 1e2b8 <net_addr_pton+0x7e>
   1e258:	2706      	movs	r7, #6
		if (*src == ':') {
   1e25a:	782b      	ldrb	r3, [r5, #0]
   1e25c:	2b3a      	cmp	r3, #58	; 0x3a
   1e25e:	d02d      	beq.n	1e2bc <net_addr_pton+0x82>
		len = strlen(src);
   1e260:	4628      	mov	r0, r5
   1e262:	f7e2 fa4d 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1e266:	2300      	movs	r3, #0
   1e268:	e02b      	b.n	1e2c2 <net_addr_pton+0x88>
		len = strlen(src);
   1e26a:	4608      	mov	r0, r1
   1e26c:	f7e2 fa48 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1e270:	2300      	movs	r3, #0
   1e272:	e000      	b.n	1e276 <net_addr_pton+0x3c>
   1e274:	3301      	adds	r3, #1
   1e276:	4283      	cmp	r3, r0
   1e278:	d20a      	bcs.n	1e290 <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e27a:	5ce9      	ldrb	r1, [r5, r3]
   1e27c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1e280:	b2d2      	uxtb	r2, r2
   1e282:	2a09      	cmp	r2, #9
   1e284:	d9f6      	bls.n	1e274 <net_addr_pton+0x3a>
   1e286:	292e      	cmp	r1, #46	; 0x2e
   1e288:	d0f4      	beq.n	1e274 <net_addr_pton+0x3a>
				return -EINVAL;
   1e28a:	f06f 0015 	mvn.w	r0, #21
   1e28e:	e0a9      	b.n	1e3e4 <net_addr_pton+0x1aa>
		memset(addr, 0, sizeof(struct in_addr));
   1e290:	2204      	movs	r2, #4
   1e292:	2100      	movs	r1, #0
   1e294:	4630      	mov	r0, r6
   1e296:	f00c fb3f 	bl	2a918 <memset>
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e29a:	2400      	movs	r4, #0
   1e29c:	e008      	b.n	1e2b0 <net_addr_pton+0x76>
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1e29e:	220a      	movs	r2, #10
   1e2a0:	a901      	add	r1, sp, #4
   1e2a2:	4628      	mov	r0, r5
   1e2a4:	f00d f890 	bl	2b3c8 <strtol>
   1e2a8:	5530      	strb	r0, [r6, r4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e2aa:	3401      	adds	r4, #1
			src = ++endptr;
   1e2ac:	9d01      	ldr	r5, [sp, #4]
   1e2ae:	3501      	adds	r5, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e2b0:	2c03      	cmp	r4, #3
   1e2b2:	d9f4      	bls.n	1e29e <net_addr_pton+0x64>
	return 0;
   1e2b4:	2000      	movs	r0, #0
   1e2b6:	e095      	b.n	1e3e4 <net_addr_pton+0x1aa>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1e2b8:	2708      	movs	r7, #8
   1e2ba:	e7ce      	b.n	1e25a <net_addr_pton+0x20>
			src++;
   1e2bc:	3501      	adds	r5, #1
   1e2be:	e7cf      	b.n	1e260 <net_addr_pton+0x26>
		for (i = 0; i < len; i++) {
   1e2c0:	3301      	adds	r3, #1
   1e2c2:	4283      	cmp	r3, r0
   1e2c4:	da16      	bge.n	1e2f4 <net_addr_pton+0xba>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e2c6:	5ce9      	ldrb	r1, [r5, r3]
   1e2c8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1e2cc:	b2d2      	uxtb	r2, r2
   1e2ce:	2a09      	cmp	r2, #9
   1e2d0:	d9f6      	bls.n	1e2c0 <net_addr_pton+0x86>
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1e2d2:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1e2d6:	b2d2      	uxtb	r2, r2
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e2d8:	2a05      	cmp	r2, #5
   1e2da:	d9f1      	bls.n	1e2c0 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1e2dc:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1e2e0:	b2d2      	uxtb	r2, r2
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1e2e2:	2a05      	cmp	r2, #5
   1e2e4:	d9ec      	bls.n	1e2c0 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1e2e6:	292e      	cmp	r1, #46	; 0x2e
   1e2e8:	d0ea      	beq.n	1e2c0 <net_addr_pton+0x86>
			    src[i] != '.' && src[i] != ':')
   1e2ea:	293a      	cmp	r1, #58	; 0x3a
   1e2ec:	d0e8      	beq.n	1e2c0 <net_addr_pton+0x86>
				return -EINVAL;
   1e2ee:	f06f 0015 	mvn.w	r0, #21
   1e2f2:	e077      	b.n	1e3e4 <net_addr_pton+0x1aa>
   1e2f4:	2400      	movs	r4, #0
   1e2f6:	e001      	b.n	1e2fc <net_addr_pton+0xc2>
				src++;
   1e2f8:	3501      	adds	r5, #1
		for (i = 0; i < expected_groups; i++) {
   1e2fa:	3401      	adds	r4, #1
   1e2fc:	42bc      	cmp	r4, r7
   1e2fe:	da3c      	bge.n	1e37a <net_addr_pton+0x140>
			if (!src || *src == '\0') {
   1e300:	2d00      	cmp	r5, #0
   1e302:	d06d      	beq.n	1e3e0 <net_addr_pton+0x1a6>
   1e304:	782b      	ldrb	r3, [r5, #0]
   1e306:	2b00      	cmp	r3, #0
   1e308:	d06f      	beq.n	1e3ea <net_addr_pton+0x1b0>
			if (*src != ':') {
   1e30a:	2b3a      	cmp	r3, #58	; 0x3a
   1e30c:	d023      	beq.n	1e356 <net_addr_pton+0x11c>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1e30e:	2210      	movs	r2, #16
   1e310:	2100      	movs	r1, #0
   1e312:	4628      	mov	r0, r5
   1e314:	f00d f858 	bl	2b3c8 <strtol>
   1e318:	f3c0 2807 	ubfx	r8, r0, #8, #8
   1e31c:	2210      	movs	r2, #16
   1e31e:	2100      	movs	r1, #0
   1e320:	4628      	mov	r0, r5
   1e322:	f00d f851 	bl	2b3c8 <strtol>
   1e326:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
   1e32a:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
				src = strchr(src, ':');
   1e32e:	213a      	movs	r1, #58	; 0x3a
   1e330:	4628      	mov	r0, r5
   1e332:	f00c fbe9 	bl	2ab08 <strchr>
				if (!src && i < expected_groups - 1) {
   1e336:	4605      	mov	r5, r0
   1e338:	2800      	cmp	r0, #0
   1e33a:	d1dd      	bne.n	1e2f8 <net_addr_pton+0xbe>
   1e33c:	1e7b      	subs	r3, r7, #1
   1e33e:	429c      	cmp	r4, r3
   1e340:	dada      	bge.n	1e2f8 <net_addr_pton+0xbe>
					return -EINVAL;
   1e342:	f06f 0015 	mvn.w	r0, #21
   1e346:	e04d      	b.n	1e3e4 <net_addr_pton+0x1aa>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1e348:	eb06 0244 	add.w	r2, r6, r4, lsl #1
   1e34c:	2300      	movs	r3, #0
   1e34e:	f806 3014 	strb.w	r3, [r6, r4, lsl #1]
   1e352:	7053      	strb	r3, [r2, #1]
			for (; i < expected_groups; i++) {
   1e354:	3401      	adds	r4, #1
   1e356:	42bc      	cmp	r4, r7
   1e358:	dbf6      	blt.n	1e348 <net_addr_pton+0x10e>
			tmp = strrchr(src, ':');
   1e35a:	213a      	movs	r1, #58	; 0x3a
   1e35c:	4628      	mov	r0, r5
   1e35e:	f00c fd29 	bl	2adb4 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1e362:	4285      	cmp	r5, r0
   1e364:	d003      	beq.n	1e36e <net_addr_pton+0x134>
			if (expected_groups == 6) {
   1e366:	2f06      	cmp	r7, #6
   1e368:	d00b      	beq.n	1e382 <net_addr_pton+0x148>
			i = expected_groups - 1;
   1e36a:	1e7c      	subs	r4, r7, #1
   1e36c:	e00f      	b.n	1e38e <net_addr_pton+0x154>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1e36e:	2f06      	cmp	r7, #6
   1e370:	d002      	beq.n	1e378 <net_addr_pton+0x13e>
   1e372:	786b      	ldrb	r3, [r5, #1]
   1e374:	2b00      	cmp	r3, #0
   1e376:	d1f6      	bne.n	1e366 <net_addr_pton+0x12c>
				src++;
   1e378:	3501      	adds	r5, #1
		if (expected_groups == 6) {
   1e37a:	2f06      	cmp	r7, #6
   1e37c:	d029      	beq.n	1e3d2 <net_addr_pton+0x198>
	return 0;
   1e37e:	2000      	movs	r0, #0
   1e380:	e030      	b.n	1e3e4 <net_addr_pton+0x1aa>
				tmp--;
   1e382:	3801      	subs	r0, #1
   1e384:	e7f1      	b.n	1e36a <net_addr_pton+0x130>
			} while (tmp-- != src);
   1e386:	1e43      	subs	r3, r0, #1
   1e388:	4285      	cmp	r5, r0
   1e38a:	d005      	beq.n	1e398 <net_addr_pton+0x15e>
   1e38c:	4618      	mov	r0, r3
				if (*tmp == ':') {
   1e38e:	7803      	ldrb	r3, [r0, #0]
   1e390:	2b3a      	cmp	r3, #58	; 0x3a
   1e392:	d1f8      	bne.n	1e386 <net_addr_pton+0x14c>
					i--;
   1e394:	3c01      	subs	r4, #1
   1e396:	e7f6      	b.n	1e386 <net_addr_pton+0x14c>
			src++;
   1e398:	3501      	adds	r5, #1
   1e39a:	e7ae      	b.n	1e2fa <net_addr_pton+0xc0>
				src++;
   1e39c:	3501      	adds	r5, #1
			for (i = 0; i < 4; i++) {
   1e39e:	3401      	adds	r4, #1
   1e3a0:	2c03      	cmp	r4, #3
   1e3a2:	dc18      	bgt.n	1e3d6 <net_addr_pton+0x19c>
				if (!src || !*src) {
   1e3a4:	b325      	cbz	r5, 1e3f0 <net_addr_pton+0x1b6>
   1e3a6:	782b      	ldrb	r3, [r5, #0]
   1e3a8:	b32b      	cbz	r3, 1e3f6 <net_addr_pton+0x1bc>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1e3aa:	f104 070c 	add.w	r7, r4, #12
   1e3ae:	220a      	movs	r2, #10
   1e3b0:	2100      	movs	r1, #0
   1e3b2:	4628      	mov	r0, r5
   1e3b4:	f00d f808 	bl	2b3c8 <strtol>
   1e3b8:	55f0      	strb	r0, [r6, r7]
				src = strchr(src, '.');
   1e3ba:	212e      	movs	r1, #46	; 0x2e
   1e3bc:	4628      	mov	r0, r5
   1e3be:	f00c fba3 	bl	2ab08 <strchr>
				if (!src && i < 3) {
   1e3c2:	4605      	mov	r5, r0
   1e3c4:	2800      	cmp	r0, #0
   1e3c6:	d1e9      	bne.n	1e39c <net_addr_pton+0x162>
   1e3c8:	2c02      	cmp	r4, #2
   1e3ca:	dce7      	bgt.n	1e39c <net_addr_pton+0x162>
					return -EINVAL;
   1e3cc:	f06f 0015 	mvn.w	r0, #21
   1e3d0:	e008      	b.n	1e3e4 <net_addr_pton+0x1aa>
   1e3d2:	2400      	movs	r4, #0
   1e3d4:	e7e4      	b.n	1e3a0 <net_addr_pton+0x166>
	return 0;
   1e3d6:	2000      	movs	r0, #0
   1e3d8:	e004      	b.n	1e3e4 <net_addr_pton+0x1aa>
		return -EINVAL;
   1e3da:	f06f 0015 	mvn.w	r0, #21
   1e3de:	e001      	b.n	1e3e4 <net_addr_pton+0x1aa>
				return -EINVAL;
   1e3e0:	f06f 0015 	mvn.w	r0, #21
}
   1e3e4:	b002      	add	sp, #8
   1e3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -EINVAL;
   1e3ea:	f06f 0015 	mvn.w	r0, #21
   1e3ee:	e7f9      	b.n	1e3e4 <net_addr_pton+0x1aa>
					return -EINVAL;
   1e3f0:	f06f 0015 	mvn.w	r0, #21
   1e3f4:	e7f6      	b.n	1e3e4 <net_addr_pton+0x1aa>
   1e3f6:	f06f 0015 	mvn.w	r0, #21
   1e3fa:	e7f3      	b.n	1e3e4 <net_addr_pton+0x1aa>

0001e3fc <parse_ipv6>:
#endif /* CONFIG_NET_IPV6 || CONFIG_NET_IPV4 */

#if defined(CONFIG_NET_IPV6)
static bool parse_ipv6(const char *str, size_t str_len,
		       struct sockaddr *addr, bool has_port)
{
   1e3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e400:	b08f      	sub	sp, #60	; 0x3c
   1e402:	4605      	mov	r5, r0
   1e404:	4688      	mov	r8, r1
   1e406:	4617      	mov	r7, r2
   1e408:	461e      	mov	r6, r3
	struct in6_addr *addr6;
	char ipaddr[INET6_ADDRSTRLEN + 1];
	int end, len, ret, i;
	u16_t port;

	len = min(INET6_ADDRSTRLEN, str_len);
   1e40a:	460c      	mov	r4, r1
   1e40c:	292e      	cmp	r1, #46	; 0x2e
   1e40e:	bf28      	it	cs
   1e410:	242e      	movcs	r4, #46	; 0x2e

	for (i = 0; i < len; i++) {
   1e412:	2300      	movs	r3, #0
   1e414:	42a3      	cmp	r3, r4
   1e416:	da04      	bge.n	1e422 <parse_ipv6+0x26>
		if (!str[i]) {
   1e418:	5cea      	ldrb	r2, [r5, r3]
   1e41a:	b10a      	cbz	r2, 1e420 <parse_ipv6+0x24>
	for (i = 0; i < len; i++) {
   1e41c:	3301      	adds	r3, #1
   1e41e:	e7f9      	b.n	1e414 <parse_ipv6+0x18>
			len = i;
   1e420:	461c      	mov	r4, r3
			break;
		}
	}

	if (has_port) {
   1e422:	b18e      	cbz	r6, 1e448 <parse_ipv6+0x4c>
		/* IPv6 address with port number */
		ptr = memchr(str, ']', len);
   1e424:	4622      	mov	r2, r4
   1e426:	215d      	movs	r1, #93	; 0x5d
   1e428:	4628      	mov	r0, r5
   1e42a:	f7e1 fef9 	bl	220 <memchr>
		if (!ptr) {
   1e42e:	4681      	mov	r9, r0
   1e430:	2800      	cmp	r0, #0
   1e432:	d043      	beq.n	1e4bc <parse_ipv6+0xc0>
			return false;
		}

		end = min(len, ptr - (str + 1));
   1e434:	1c69      	adds	r1, r5, #1
   1e436:	1a43      	subs	r3, r0, r1
   1e438:	429c      	cmp	r4, r3
   1e43a:	bfa8      	it	ge
   1e43c:	461c      	movge	r4, r3
		memcpy(ipaddr, str + 1, end);
   1e43e:	4622      	mov	r2, r4
   1e440:	a802      	add	r0, sp, #8
   1e442:	f7e1 ff3d 	bl	2c0 <memcpy>
   1e446:	e006      	b.n	1e456 <parse_ipv6+0x5a>
	} else {
		end = len;
		memcpy(ipaddr, str, end);
   1e448:	4622      	mov	r2, r4
   1e44a:	4629      	mov	r1, r5
   1e44c:	a802      	add	r0, sp, #8
   1e44e:	f7e1 ff37 	bl	2c0 <memcpy>
	char *ptr = NULL;
   1e452:	f04f 0900 	mov.w	r9, #0
	}

	ipaddr[end] = '\0';
   1e456:	2200      	movs	r2, #0
   1e458:	ab0e      	add	r3, sp, #56	; 0x38
   1e45a:	4423      	add	r3, r4
   1e45c:	f803 2c30 	strb.w	r2, [r3, #-48]

	addr6 = &net_sin6(addr)->sin6_addr;

	ret = net_addr_pton(AF_INET6, ipaddr, addr6);
   1e460:	1d3a      	adds	r2, r7, #4
   1e462:	a902      	add	r1, sp, #8
   1e464:	200a      	movs	r0, #10
   1e466:	f7ff fee8 	bl	1e23a <net_addr_pton>
	if (ret < 0) {
   1e46a:	2800      	cmp	r0, #0
   1e46c:	db28      	blt.n	1e4c0 <parse_ipv6+0xc4>
		return false;
	}

	net_sin6(addr)->sin6_family = AF_INET6;
   1e46e:	230a      	movs	r3, #10
   1e470:	803b      	strh	r3, [r7, #0]

	if (!has_port) {
   1e472:	b33e      	cbz	r6, 1e4c4 <parse_ipv6+0xc8>
		return true;
	}

	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   1e474:	f109 0301 	add.w	r3, r9, #1
   1e478:	4445      	add	r5, r8
   1e47a:	42ab      	cmp	r3, r5
   1e47c:	d223      	bcs.n	1e4c6 <parse_ipv6+0xca>
   1e47e:	f899 3001 	ldrb.w	r3, [r9, #1]
   1e482:	2b3a      	cmp	r3, #58	; 0x3a
   1e484:	d11f      	bne.n	1e4c6 <parse_ipv6+0xca>
		len = str_len - end;
   1e486:	eba8 0404 	sub.w	r4, r8, r4

		/* Re-use the ipaddr buf for port conversion */
		memcpy(ipaddr, ptr + 2, len);
   1e48a:	4622      	mov	r2, r4
   1e48c:	f109 0102 	add.w	r1, r9, #2
   1e490:	a802      	add	r0, sp, #8
   1e492:	f7e1 ff15 	bl	2c0 <memcpy>
		ipaddr[len] = '\0';
   1e496:	ab0e      	add	r3, sp, #56	; 0x38
   1e498:	441c      	add	r4, r3
   1e49a:	2300      	movs	r3, #0
   1e49c:	f804 3c30 	strb.w	r3, [r4, #-48]

		ret = convert_port(ipaddr, &port);
   1e4a0:	f10d 0106 	add.w	r1, sp, #6
   1e4a4:	a802      	add	r0, sp, #8
   1e4a6:	f7ff fd8a 	bl	1dfbe <convert_port>
		if (!ret) {
   1e4aa:	4606      	mov	r6, r0
   1e4ac:	b158      	cbz	r0, 1e4c6 <parse_ipv6+0xca>
			return false;
		}

		net_sin6(addr)->sin6_port = htons(port);
   1e4ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1e4b2:	0a13      	lsrs	r3, r2, #8
   1e4b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e4b8:	807b      	strh	r3, [r7, #2]
   1e4ba:	e004      	b.n	1e4c6 <parse_ipv6+0xca>
			return false;
   1e4bc:	2600      	movs	r6, #0
   1e4be:	e002      	b.n	1e4c6 <parse_ipv6+0xca>
		return false;
   1e4c0:	2600      	movs	r6, #0
   1e4c2:	e000      	b.n	1e4c6 <parse_ipv6+0xca>
		return true;
   1e4c4:	2601      	movs	r6, #1
			net_addr_ntop(AF_INET6, addr6,
				      ipaddr, sizeof(ipaddr) - 1));
	}

	return true;
}
   1e4c6:	4630      	mov	r0, r6
   1e4c8:	b00f      	add	sp, #60	; 0x3c
   1e4ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001e4ce <net_calc_chksum>:
	return pkt->family;
   1e4ce:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1e4d2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1e4d6:	2b0a      	cmp	r3, #10
   1e4d8:	d001      	beq.n	1e4de <net_calc_chksum+0x10>
		return 0;
   1e4da:	2000      	movs	r0, #0
   1e4dc:	4770      	bx	lr
{
   1e4de:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e4e0:	b085      	sub	sp, #20
   1e4e2:	4604      	mov	r4, r0
	return pkt->frags->data;
   1e4e4:	6885      	ldr	r5, [r0, #8]
   1e4e6:	68a8      	ldr	r0, [r5, #8]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1e4e8:	7902      	ldrb	r2, [r0, #4]
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1e4ea:	7943      	ldrb	r3, [r0, #5]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1e4ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1e4f0:	b29b      	uxth	r3, r3
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1e4f2:	f894 703b 	ldrb.w	r7, [r4, #59]	; 0x3b
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1e4f6:	1bdb      	subs	r3, r3, r7
		sum = calc_chksum(upper_layer_len + proto,
   1e4f8:	fa11 f383 	uxtah	r3, r1, r3
   1e4fc:	2220      	movs	r2, #32
   1e4fe:	f100 0108 	add.w	r1, r0, #8
   1e502:	b298      	uxth	r0, r3
   1e504:	f7ff fd3c 	bl	1df80 <calc_chksum>
   1e508:	4606      	mov	r6, r0
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   1e50a:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
	return net_frag_read(frag, offset, pos, len, NULL);
   1e50e:	2300      	movs	r3, #0
   1e510:	9300      	str	r3, [sp, #0]
   1e512:	f10d 020e 	add.w	r2, sp, #14
   1e516:	4439      	add	r1, r7
   1e518:	4628      	mov	r0, r5
   1e51a:	f7ff faec 	bl	1daf6 <net_frag_read>
	if (!frag) {
   1e51e:	4605      	mov	r5, r0
   1e520:	b318      	cbz	r0, 1e56a <net_calc_chksum+0x9c>
	ptr = frag->data + offset;
   1e522:	6881      	ldr	r1, [r0, #8]
   1e524:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e528:	4419      	add	r1, r3
	len = frag->len - offset;
   1e52a:	8984      	ldrh	r4, [r0, #12]
   1e52c:	1ae4      	subs	r4, r4, r3
   1e52e:	b224      	sxth	r4, r4
   1e530:	e003      	b.n	1e53a <net_calc_chksum+0x6c>
			len = frag->len - 1;
   1e532:	89ac      	ldrh	r4, [r5, #12]
   1e534:	3c01      	subs	r4, #1
   1e536:	b224      	sxth	r4, r4
			ptr++;
   1e538:	3101      	adds	r1, #1
	while (frag) {
   1e53a:	b1bd      	cbz	r5, 1e56c <net_calc_chksum+0x9e>
		sum = calc_chksum(sum, ptr, len);
   1e53c:	b2a4      	uxth	r4, r4
   1e53e:	4622      	mov	r2, r4
   1e540:	4630      	mov	r0, r6
   1e542:	f7ff fd1d 	bl	1df80 <calc_chksum>
   1e546:	4606      	mov	r6, r0
		frag = frag->frags;
   1e548:	682d      	ldr	r5, [r5, #0]
		if (!frag) {
   1e54a:	b17d      	cbz	r5, 1e56c <net_calc_chksum+0x9e>
		ptr = frag->data;
   1e54c:	68a9      	ldr	r1, [r5, #8]
		if (len % 2) {
   1e54e:	f014 0f01 	tst.w	r4, #1
   1e552:	d007      	beq.n	1e564 <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   1e554:	780b      	ldrb	r3, [r1, #0]
			sum += tmp;
   1e556:	441e      	add	r6, r3
   1e558:	b2b6      	uxth	r6, r6
			if (sum < tmp) {
   1e55a:	42b3      	cmp	r3, r6
   1e55c:	d9e9      	bls.n	1e532 <net_calc_chksum+0x64>
				sum++;
   1e55e:	3601      	adds	r6, #1
   1e560:	b2b6      	uxth	r6, r6
   1e562:	e7e6      	b.n	1e532 <net_calc_chksum+0x64>
			len = frag->len;
   1e564:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
   1e568:	e7e7      	b.n	1e53a <net_calc_chksum+0x6c>
		return 0;
   1e56a:	2600      	movs	r6, #0
	sum = (sum == 0) ? 0xffff : htons(sum);
   1e56c:	b91e      	cbnz	r6, 1e576 <net_calc_chksum+0xa8>
   1e56e:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   1e572:	b005      	add	sp, #20
   1e574:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sum = (sum == 0) ? 0xffff : htons(sum);
   1e576:	0a30      	lsrs	r0, r6, #8
   1e578:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   1e57c:	b280      	uxth	r0, r0
   1e57e:	e7f8      	b.n	1e572 <net_calc_chksum+0xa4>

0001e580 <net_header_fits>:
	if (hdr && hdr > pkt->frags->data &&
   1e580:	460b      	mov	r3, r1
   1e582:	b151      	cbz	r1, 1e59a <net_header_fits+0x1a>
   1e584:	6880      	ldr	r0, [r0, #8]
   1e586:	6881      	ldr	r1, [r0, #8]
   1e588:	428b      	cmp	r3, r1
   1e58a:	d908      	bls.n	1e59e <net_header_fits+0x1e>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   1e58c:	4413      	add	r3, r2
   1e58e:	8982      	ldrh	r2, [r0, #12]
   1e590:	4411      	add	r1, r2
	if (hdr && hdr > pkt->frags->data &&
   1e592:	428b      	cmp	r3, r1
   1e594:	d905      	bls.n	1e5a2 <net_header_fits+0x22>
	return false;
   1e596:	2000      	movs	r0, #0
   1e598:	4770      	bx	lr
   1e59a:	2000      	movs	r0, #0
   1e59c:	4770      	bx	lr
   1e59e:	2000      	movs	r0, #0
   1e5a0:	4770      	bx	lr
		return true;
   1e5a2:	2001      	movs	r0, #1
}
   1e5a4:	4770      	bx	lr

0001e5a6 <net_ipaddr_parse>:

bool net_ipaddr_parse(const char *str, size_t str_len, struct sockaddr *addr)
{
	int i, count;

	if (!str || str_len == 0) {
   1e5a6:	b1d8      	cbz	r0, 1e5e0 <net_ipaddr_parse+0x3a>
{
   1e5a8:	b538      	push	{r3, r4, r5, lr}
	if (!str || str_len == 0) {
   1e5aa:	b1d9      	cbz	r1, 1e5e4 <net_ipaddr_parse+0x3e>
		return false;
	}

	/* We cannot accept empty string here */
	if (*str == '\0') {
   1e5ac:	7804      	ldrb	r4, [r0, #0]
   1e5ae:	b1dc      	cbz	r4, 1e5e8 <net_ipaddr_parse+0x42>
		return false;
	}

	if (*str == '[') {
   1e5b0:	2c5b      	cmp	r4, #91	; 0x5b
   1e5b2:	d002      	beq.n	1e5ba <net_ipaddr_parse+0x14>
   1e5b4:	2500      	movs	r5, #0
   1e5b6:	462b      	mov	r3, r5
   1e5b8:	e004      	b.n	1e5c4 <net_ipaddr_parse+0x1e>
#if defined(CONFIG_NET_IPV6)
		return parse_ipv6(str, str_len, addr, true);
   1e5ba:	2301      	movs	r3, #1
   1e5bc:	f7ff ff1e 	bl	1e3fc <parse_ipv6>
   1e5c0:	bd38      	pop	{r3, r4, r5, pc}
#else
		return false;
#endif /* CONFIG_NET_IPV6 */
	}

	for (count = i = 0; str[i] && i < str_len; i++) {
   1e5c2:	3301      	adds	r3, #1
   1e5c4:	5cc4      	ldrb	r4, [r0, r3]
   1e5c6:	b12c      	cbz	r4, 1e5d4 <net_ipaddr_parse+0x2e>
   1e5c8:	4299      	cmp	r1, r3
   1e5ca:	d903      	bls.n	1e5d4 <net_ipaddr_parse+0x2e>
		if (str[i] == ':') {
   1e5cc:	2c3a      	cmp	r4, #58	; 0x3a
   1e5ce:	d1f8      	bne.n	1e5c2 <net_ipaddr_parse+0x1c>
			count++;
   1e5d0:	3501      	adds	r5, #1
   1e5d2:	e7f6      	b.n	1e5c2 <net_ipaddr_parse+0x1c>
		}
	}

	if (count == 1) {
   1e5d4:	2d01      	cmp	r5, #1
   1e5d6:	d009      	beq.n	1e5ec <net_ipaddr_parse+0x46>
#if defined(CONFIG_NET_IPV4) && !defined(CONFIG_NET_IPV6)
	return parse_ipv4(str, str_len, addr, false);
#endif

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	return parse_ipv6(str, str_len, addr, false);
   1e5d8:	2300      	movs	r3, #0
   1e5da:	f7ff ff0f 	bl	1e3fc <parse_ipv6>
   1e5de:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1e5e0:	2000      	movs	r0, #0
   1e5e2:	4770      	bx	lr
   1e5e4:	2000      	movs	r0, #0
   1e5e6:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1e5e8:	2000      	movs	r0, #0
   1e5ea:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1e5ec:	2000      	movs	r0, #0
#endif
}
   1e5ee:	bd38      	pop	{r3, r4, r5, pc}

0001e5f0 <net_bt_reserve>:
{
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	return 0;
}
   1e5f0:	2000      	movs	r0, #0
   1e5f2:	4770      	bx	lr

0001e5f4 <net_bt_enable>:
	return iface->dev;
   1e5f4:	6803      	ldr	r3, [r0, #0]

static int net_bt_enable(struct net_if *iface, bool state)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e5f6:	689b      	ldr	r3, [r3, #8]

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1e5f8:	b129      	cbz	r1, 1e606 <net_bt_enable+0x12>
   1e5fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1e5fe:	2b03      	cmp	r3, #3
   1e600:	d103      	bne.n	1e60a <net_bt_enable+0x16>
		return -ENETDOWN;
	}

	return 0;
   1e602:	2000      	movs	r0, #0
   1e604:	4770      	bx	lr
   1e606:	2000      	movs	r0, #0
   1e608:	4770      	bx	lr
		return -ENETDOWN;
   1e60a:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1e60e:	4770      	bx	lr

0001e610 <ipsp_accept>:

static int ipsp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
	NET_DBG("Incoming conn %p", conn);

	if (bt_context_data.ipsp_chan.chan.conn) {
   1e610:	4b04      	ldr	r3, [pc, #16]	; (1e624 <ipsp_accept+0x14>)
   1e612:	685b      	ldr	r3, [r3, #4]
   1e614:	b91b      	cbnz	r3, 1e61e <ipsp_accept+0xe>
		NET_ERR("No channels available");
		return -ENOMEM;
	}

	*chan = &bt_context_data.ipsp_chan.chan;
   1e616:	4b04      	ldr	r3, [pc, #16]	; (1e628 <ipsp_accept+0x18>)
   1e618:	600b      	str	r3, [r1, #0]

	return 0;
   1e61a:	2000      	movs	r0, #0
   1e61c:	4770      	bx	lr
		return -ENOMEM;
   1e61e:	f06f 000b 	mvn.w	r0, #11
}
   1e622:	4770      	bx	lr
   1e624:	2000be40 	.word	0x2000be40
   1e628:	2000be44 	.word	0x2000be44

0001e62c <net_bt_send>:
{
   1e62c:	b538      	push	{r3, r4, r5, lr}
   1e62e:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e630:	689d      	ldr	r5, [r3, #8]
	return pkt->family;
   1e632:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1e636:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) != AF_INET6) {
   1e63a:	2b0a      	cmp	r3, #10
   1e63c:	d001      	beq.n	1e642 <net_bt_send+0x16>
		return NET_DROP;
   1e63e:	2002      	movs	r0, #2
   1e640:	bd38      	pop	{r3, r4, r5, pc}
   1e642:	460c      	mov	r4, r1
	if (!net_6lo_compress(pkt, true, NULL)) {
   1e644:	2200      	movs	r2, #0
   1e646:	2101      	movs	r1, #1
   1e648:	4620      	mov	r0, r4
   1e64a:	f003 fe95 	bl	22378 <net_6lo_compress>
   1e64e:	b908      	cbnz	r0, 1e654 <net_bt_send+0x28>
		return NET_DROP;
   1e650:	2002      	movs	r0, #2
}
   1e652:	bd38      	pop	{r3, r4, r5, pc}
	net_if_queue_tx(ctxt->iface, pkt);
   1e654:	6828      	ldr	r0, [r5, #0]
	k_fifo_put(&iface->tx_queue, pkt);
   1e656:	4621      	mov	r1, r4
   1e658:	3018      	adds	r0, #24
   1e65a:	f00a fb13 	bl	28c84 <k_queue_append>
	return NET_OK;
   1e65e:	2000      	movs	r0, #0
   1e660:	bd38      	pop	{r3, r4, r5, pc}

0001e662 <net_bt_recv>:
{
   1e662:	b508      	push	{r3, lr}
	if (!net_6lo_uncompress(pkt)) {
   1e664:	4608      	mov	r0, r1
   1e666:	f004 fad4 	bl	22c12 <net_6lo_uncompress>
   1e66a:	b908      	cbnz	r0, 1e670 <net_bt_recv+0xe>
		return NET_DROP;
   1e66c:	2002      	movs	r0, #2
   1e66e:	bd08      	pop	{r3, pc}
	return NET_CONTINUE;
   1e670:	2001      	movs	r0, #1
}
   1e672:	bd08      	pop	{r3, pc}

0001e674 <connected>:
	return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
}

static void connected(struct bt_conn *conn, u8_t err)
{
	if (err) {
   1e674:	b951      	cbnz	r1, 1e68c <connected+0x18>
{
   1e676:	b508      	push	{r3, lr}
		NET_ERR("Failed to connect to %s (%u)\n", addr, err);
#endif
		return;
	}

	if (conn != default_conn) {
   1e678:	4b05      	ldr	r3, [pc, #20]	; (1e690 <connected+0x1c>)
   1e67a:	681b      	ldr	r3, [r3, #0]
   1e67c:	4283      	cmp	r3, r0
   1e67e:	d000      	beq.n	1e682 <connected+0xe>
   1e680:	bd08      	pop	{r3, pc}
		return;
	}

	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   1e682:	2223      	movs	r2, #35	; 0x23
   1e684:	4903      	ldr	r1, [pc, #12]	; (1e694 <connected+0x20>)
   1e686:	f7ea f907 	bl	8898 <bt_l2cap_chan_connect>
   1e68a:	e7f9      	b.n	1e680 <connected+0xc>
   1e68c:	4770      	bx	lr
   1e68e:	bf00      	nop
   1e690:	20001f80 	.word	0x20001f80
   1e694:	2000be44 	.word	0x2000be44

0001e698 <ipsp_recv>:
{
   1e698:	b570      	push	{r4, r5, r6, lr}
   1e69a:	4605      	mov	r5, r0
   1e69c:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1e69e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e6a2:	2000      	movs	r0, #0
   1e6a4:	f7ff f82e 	bl	1d704 <net_pkt_get_reserve_rx>
   1e6a8:	4604      	mov	r4, r0
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   1e6aa:	f105 039c 	add.w	r3, r5, #156	; 0x9c
   1e6ae:	6283      	str	r3, [r0, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   1e6b0:	2206      	movs	r2, #6
   1e6b2:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1e6b6:	2302      	movs	r3, #2
   1e6b8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   1e6bc:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
   1e6c0:	6201      	str	r1, [r0, #32]
	net_pkt_ll_src(pkt)->len = sizeof(ctxt->dst);
   1e6c2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   1e6c6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   1e6ca:	4630      	mov	r0, r6
   1e6cc:	f7fc fb42 	bl	1ad54 <net_buf_ref>
   1e6d0:	4601      	mov	r1, r0
   1e6d2:	4620      	mov	r0, r4
   1e6d4:	f7ff f8bb 	bl	1d84e <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {
   1e6d8:	4621      	mov	r1, r4
   1e6da:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1e6de:	f7fc fd55 	bl	1b18c <net_recv_data>
   1e6e2:	2800      	cmp	r0, #0
   1e6e4:	db00      	blt.n	1e6e8 <ipsp_recv+0x50>
   1e6e6:	bd70      	pop	{r4, r5, r6, pc}
		net_pkt_unref(pkt);
   1e6e8:	4620      	mov	r0, r4
   1e6ea:	f7ff f886 	bl	1d7fa <net_pkt_unref>
}
   1e6ee:	e7fa      	b.n	1e6e6 <ipsp_recv+0x4e>

0001e6f0 <ipsp_alloc_buf>:
{
   1e6f0:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   1e6f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e6f6:	2000      	movs	r0, #0
   1e6f8:	f7ff f818 	bl	1d72c <net_pkt_get_reserve_rx_data>
}
   1e6fc:	bd08      	pop	{r3, pc}
	...

0001e700 <ipsp_disconnected>:
{
   1e700:	b510      	push	{r4, lr}
   1e702:	4604      	mov	r4, r0
	net_if_down(ctxt->iface);
   1e704:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1e708:	f7fd fe92 	bl	1c430 <net_if_down>
	if (chan->conn != default_conn) {
   1e70c:	6823      	ldr	r3, [r4, #0]
   1e70e:	4a05      	ldr	r2, [pc, #20]	; (1e724 <ipsp_disconnected+0x24>)
   1e710:	6810      	ldr	r0, [r2, #0]
   1e712:	4283      	cmp	r3, r0
   1e714:	d000      	beq.n	1e718 <ipsp_disconnected+0x18>
   1e716:	bd10      	pop	{r4, pc}
	bt_conn_unref(default_conn);
   1e718:	f7e8 fe2a 	bl	7370 <bt_conn_unref>
	default_conn = NULL;
   1e71c:	2200      	movs	r2, #0
   1e71e:	4b01      	ldr	r3, [pc, #4]	; (1e724 <ipsp_disconnected+0x24>)
   1e720:	601a      	str	r2, [r3, #0]
   1e722:	e7f8      	b.n	1e716 <ipsp_disconnected+0x16>
   1e724:	20001f80 	.word	0x20001f80

0001e728 <disconnected>:
			      L2CAP_IPSP_PSM);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   1e728:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_L2_BT)
	char addr[BT_ADDR_LE_STR_LEN];
#endif

	if (conn != default_conn) {
   1e72a:	4b06      	ldr	r3, [pc, #24]	; (1e744 <disconnected+0x1c>)
   1e72c:	681b      	ldr	r3, [r3, #0]
   1e72e:	4283      	cmp	r3, r0
   1e730:	d000      	beq.n	1e734 <disconnected+0xc>
   1e732:	bd08      	pop	{r3, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

	NET_DBG("Disconnected: %s (reason %u)\n", addr, reason);
#endif

	bt_conn_unref(default_conn);
   1e734:	4618      	mov	r0, r3
   1e736:	f7e8 fe1b 	bl	7370 <bt_conn_unref>
	default_conn = NULL;
   1e73a:	2200      	movs	r2, #0
   1e73c:	4b01      	ldr	r3, [pc, #4]	; (1e744 <disconnected+0x1c>)
   1e73e:	601a      	str	r2, [r3, #0]
   1e740:	e7f7      	b.n	1e732 <disconnected+0xa>
   1e742:	bf00      	nop
   1e744:	20001f80 	.word	0x20001f80

0001e748 <ipsp_connected>:
{
   1e748:	b570      	push	{r4, r5, r6, lr}
   1e74a:	b08e      	sub	sp, #56	; 0x38
   1e74c:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   1e74e:	a909      	add	r1, sp, #36	; 0x24
   1e750:	6800      	ldr	r0, [r0, #0]
   1e752:	f7e8 ff43 	bl	75dc <bt_conn_get_info>
   1e756:	2800      	cmp	r0, #0
   1e758:	db06      	blt.n	1e768 <ipsp_connected+0x20>
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   1e75a:	f104 069c 	add.w	r6, r4, #156	; 0x9c
   1e75e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	src += length - 1;
   1e760:	3306      	adds	r3, #6
   1e762:	4631      	mov	r1, r6
   1e764:	2206      	movs	r2, #6
   1e766:	e008      	b.n	1e77a <ipsp_connected+0x32>
		bt_l2cap_chan_disconnect(chan);
   1e768:	4620      	mov	r0, r4
   1e76a:	f7ea f8b4 	bl	88d6 <bt_l2cap_chan_disconnect>
   1e76e:	e05a      	b.n	1e826 <ipsp_connected+0xde>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e770:	7818      	ldrb	r0, [r3, #0]
   1e772:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1e774:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e776:	3b01      	subs	r3, #1
   1e778:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1e77a:	2a00      	cmp	r2, #0
   1e77c:	d1f8      	bne.n	1e770 <ipsp_connected+0x28>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   1e77e:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
   1e782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	src += length - 1;
   1e784:	3306      	adds	r3, #6
   1e786:	4608      	mov	r0, r1
   1e788:	2206      	movs	r2, #6
   1e78a:	e004      	b.n	1e796 <ipsp_connected+0x4e>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e78c:	781d      	ldrb	r5, [r3, #0]
   1e78e:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
   1e790:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e792:	3b01      	subs	r3, #1
   1e794:	3001      	adds	r0, #1
	for (; length > 0; length--) {
   1e796:	2a00      	cmp	r2, #0
   1e798:	d1f8      	bne.n	1e78c <ipsp_connected+0x44>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   1e79a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e79e:	f3bf 8f5b 	dmb	ish
   1e7a2:	68da      	ldr	r2, [r3, #12]
   1e7a4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1e7a8:	f012 0f01 	tst.w	r2, #1
   1e7ac:	d104      	bne.n	1e7b8 <ipsp_connected+0x70>
	iface->link_addr.addr = addr;
   1e7ae:	611e      	str	r6, [r3, #16]
	iface->link_addr.len = len;
   1e7b0:	2206      	movs	r2, #6
   1e7b2:	751a      	strb	r2, [r3, #20]
	iface->link_addr.type = type;
   1e7b4:	2202      	movs	r2, #2
   1e7b6:	755a      	strb	r2, [r3, #21]
	ll.addr = ctxt->dst.val;
   1e7b8:	9107      	str	r1, [sp, #28]
	ll.len = sizeof(ctxt->dst.val);
   1e7ba:	2306      	movs	r3, #6
   1e7bc:	f88d 3020 	strb.w	r3, [sp, #32]
	ll.type = NET_LINK_BLUETOOTH;
   1e7c0:	2302      	movs	r3, #2
   1e7c2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	addr->s6_addr[0] = 0xfe;
   1e7c6:	23fe      	movs	r3, #254	; 0xfe
   1e7c8:	f88d 300c 	strb.w	r3, [sp, #12]
	addr->s6_addr[1] = 0x80;
   1e7cc:	2380      	movs	r3, #128	; 0x80
   1e7ce:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1e7d2:	2300      	movs	r3, #0
   1e7d4:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1e7d8:	9304      	str	r3, [sp, #16]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1e7da:	2203      	movs	r2, #3
   1e7dc:	a805      	add	r0, sp, #20
   1e7de:	f7e1 fd6f 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1e7e2:	23ff      	movs	r3, #255	; 0xff
   1e7e4:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   1e7e8:	23fe      	movs	r3, #254	; 0xfe
   1e7ea:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e7ee:	2203      	movs	r2, #3
   1e7f0:	9907      	ldr	r1, [sp, #28]
   1e7f2:	4411      	add	r1, r2
   1e7f4:	f10d 0019 	add.w	r0, sp, #25
   1e7f8:	f7e1 fd62 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1e7fc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1e800:	2b02      	cmp	r3, #2
   1e802:	d012      	beq.n	1e82a <ipsp_connected+0xe2>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1e804:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1e808:	2b03      	cmp	r3, #3
   1e80a:	d015      	beq.n	1e838 <ipsp_connected+0xf0>
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   1e80c:	2305      	movs	r3, #5
   1e80e:	9300      	str	r3, [sp, #0]
   1e810:	2300      	movs	r3, #0
   1e812:	aa07      	add	r2, sp, #28
   1e814:	a903      	add	r1, sp, #12
   1e816:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1e81a:	f002 f903 	bl	20a24 <net_ipv6_nbr_add>
	net_if_up(ctxt->iface);
   1e81e:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1e822:	f7fd fdd1 	bl	1c3c8 <net_if_up>
}
   1e826:	b00e      	add	sp, #56	; 0x38
   1e828:	bd70      	pop	{r4, r5, r6, pc}
			addr->s6_addr[8] ^= 0x02;
   1e82a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1e82e:	f083 0302 	eor.w	r3, r3, #2
   1e832:	f88d 3014 	strb.w	r3, [sp, #20]
   1e836:	e7e5      	b.n	1e804 <ipsp_connected+0xbc>
			addr->s6_addr[8] ^= 0x02;
   1e838:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1e83c:	f083 0302 	eor.w	r3, r3, #2
   1e840:	f88d 3014 	strb.w	r3, [sp, #20]
   1e844:	e7e2      	b.n	1e80c <ipsp_connected+0xc4>
	...

0001e848 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   1e848:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   1e84a:	4804      	ldr	r0, [pc, #16]	; (1e85c <net_bt_init+0x14>)
   1e84c:	f7e8 fbb8 	bl	6fc0 <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   1e850:	4803      	ldr	r0, [pc, #12]	; (1e860 <net_bt_init+0x18>)
   1e852:	f7e9 ffc7 	bl	87e4 <bt_l2cap_server_register>

	return 0;
}
   1e856:	2000      	movs	r0, #0
   1e858:	bd08      	pop	{r3, pc}
   1e85a:	bf00      	nop
   1e85c:	2000bef4 	.word	0x2000bef4
   1e860:	2000bf24 	.word	0x2000bf24

0001e864 <bt_iface_send>:
{
   1e864:	b538      	push	{r3, r4, r5, lr}
	return iface->dev;
   1e866:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e868:	689c      	ldr	r4, [r3, #8]
	frags = pkt->frags;
   1e86a:	688d      	ldr	r5, [r1, #8]
	pkt->frags = NULL;
   1e86c:	2300      	movs	r3, #0
   1e86e:	608b      	str	r3, [r1, #8]
	net_pkt_unref(pkt);
   1e870:	4608      	mov	r0, r1
   1e872:	f7fe ffc2 	bl	1d7fa <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1e876:	4629      	mov	r1, r5
   1e878:	1d20      	adds	r0, r4, #4
   1e87a:	f7ea f9bd 	bl	8bf8 <bt_l2cap_chan_send>
}
   1e87e:	bd38      	pop	{r3, r4, r5, pc}

0001e880 <bt_iface_init>:
   1e880:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e882:	689b      	ldr	r3, [r3, #8]
	ctxt->iface = iface;
   1e884:	6018      	str	r0, [r3, #0]
	atomic_set_bit(iface->flags, NET_IF_POINTOPOINT);
   1e886:	300c      	adds	r0, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e888:	f3bf 8f5b 	dmb	ish
   1e88c:	e850 3f00 	ldrex	r3, [r0]
   1e890:	f043 0302 	orr.w	r3, r3, #2
   1e894:	e840 3200 	strex	r2, r3, [r0]
   1e898:	2a00      	cmp	r2, #0
   1e89a:	d1f7      	bne.n	1e88c <bt_iface_init+0xc>
   1e89c:	f3bf 8f5b 	dmb	ish
   1e8a0:	4770      	bx	lr
	...

0001e8a4 <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   1e8a4:	b510      	push	{r4, lr}
   1e8a6:	b086      	sub	sp, #24
   1e8a8:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   1e8aa:	4913      	ldr	r1, [pc, #76]	; (1e8f8 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   1e8ac:	4610      	mov	r0, r2
   1e8ae:	f7e1 fdab 	bl	408 <strcmp>
   1e8b2:	b140      	cbz	r0, 1e8c6 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x22>
	} else if (!strcmp(data, "off")) {
   1e8b4:	4911      	ldr	r1, [pc, #68]	; (1e8fc <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   1e8b6:	4620      	mov	r0, r4
   1e8b8:	f7e1 fda6 	bl	408 <strcmp>
   1e8bc:	b9c0      	cbnz	r0, 1e8f0 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4c>
		return bt_le_adv_stop();
   1e8be:	f7e8 f87b 	bl	69b8 <bt_le_adv_stop>
}
   1e8c2:	b006      	add	sp, #24
   1e8c4:	bd10      	pop	{r4, pc}
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1e8c6:	2300      	movs	r3, #0
   1e8c8:	9303      	str	r3, [sp, #12]
   1e8ca:	9304      	str	r3, [sp, #16]
   1e8cc:	9305      	str	r3, [sp, #20]
   1e8ce:	2301      	movs	r3, #1
   1e8d0:	f88d 300c 	strb.w	r3, [sp, #12]
   1e8d4:	22a0      	movs	r2, #160	; 0xa0
   1e8d6:	f8ad 200e 	strh.w	r2, [sp, #14]
   1e8da:	22f0      	movs	r2, #240	; 0xf0
   1e8dc:	f8ad 2010 	strh.w	r2, [sp, #16]
   1e8e0:	9300      	str	r3, [sp, #0]
   1e8e2:	4b07      	ldr	r3, [pc, #28]	; (1e900 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x5c>)
   1e8e4:	2202      	movs	r2, #2
   1e8e6:	4907      	ldr	r1, [pc, #28]	; (1e904 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x60>)
   1e8e8:	a803      	add	r0, sp, #12
   1e8ea:	f7e7 ffbb 	bl	6864 <bt_le_adv_start>
   1e8ee:	e7e8      	b.n	1e8c2 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
		return -EINVAL;
   1e8f0:	f06f 0015 	mvn.w	r0, #21
   1e8f4:	e7e5      	b.n	1e8c2 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
   1e8f6:	bf00      	nop
   1e8f8:	00031c70 	.word	0x00031c70
   1e8fc:	00031c74 	.word	0x00031c74
   1e900:	00031c78 	.word	0x00031c78
   1e904:	00031c60 	.word	0x00031c60

0001e908 <net_icmpv6_register_handler>:
	node->next = list->head;
   1e908:	4b04      	ldr	r3, [pc, #16]	; (1e91c <net_icmpv6_register_handler+0x14>)
   1e90a:	681a      	ldr	r2, [r3, #0]
   1e90c:	6002      	str	r2, [r0, #0]
	list->head = node;
   1e90e:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   1e910:	685b      	ldr	r3, [r3, #4]
   1e912:	b103      	cbz	r3, 1e916 <net_icmpv6_register_handler+0xe>
   1e914:	4770      	bx	lr
		list->tail = list->head;
   1e916:	4b01      	ldr	r3, [pc, #4]	; (1e91c <net_icmpv6_register_handler+0x14>)
   1e918:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   1e91a:	e7fb      	b.n	1e914 <net_icmpv6_register_handler+0xc>
   1e91c:	20001f84 	.word	0x20001f84

0001e920 <net_icmpv6_unregister_handler>:

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
   1e920:	4601      	mov	r1, r0
	return list->head;
   1e922:	4b10      	ldr	r3, [pc, #64]	; (1e964 <net_icmpv6_unregister_handler+0x44>)
   1e924:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   1e926:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1e928:	b1d3      	cbz	r3, 1e960 <net_icmpv6_unregister_handler+0x40>
		if (test == node) {
   1e92a:	4299      	cmp	r1, r3
   1e92c:	d002      	beq.n	1e934 <net_icmpv6_unregister_handler+0x14>
		prev = test;
   1e92e:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1e930:	681b      	ldr	r3, [r3, #0]
   1e932:	e7f9      	b.n	1e928 <net_icmpv6_unregister_handler+0x8>
	if (!prev_node) {
   1e934:	b142      	cbz	r2, 1e948 <net_icmpv6_unregister_handler+0x28>
		prev_node->next = node->next;
   1e936:	6803      	ldr	r3, [r0, #0]
   1e938:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   1e93a:	4b0a      	ldr	r3, [pc, #40]	; (1e964 <net_icmpv6_unregister_handler+0x44>)
   1e93c:	685b      	ldr	r3, [r3, #4]
   1e93e:	4298      	cmp	r0, r3
   1e940:	d00b      	beq.n	1e95a <net_icmpv6_unregister_handler+0x3a>
	node->next = NULL;
   1e942:	2300      	movs	r3, #0
   1e944:	6003      	str	r3, [r0, #0]
   1e946:	4770      	bx	lr
		list->head = node->next;
   1e948:	6802      	ldr	r2, [r0, #0]
   1e94a:	4b06      	ldr	r3, [pc, #24]	; (1e964 <net_icmpv6_unregister_handler+0x44>)
   1e94c:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1e94e:	685b      	ldr	r3, [r3, #4]
   1e950:	4298      	cmp	r0, r3
   1e952:	d1f6      	bne.n	1e942 <net_icmpv6_unregister_handler+0x22>
			list->tail = list->head;
   1e954:	4b03      	ldr	r3, [pc, #12]	; (1e964 <net_icmpv6_unregister_handler+0x44>)
   1e956:	605a      	str	r2, [r3, #4]
   1e958:	e7f3      	b.n	1e942 <net_icmpv6_unregister_handler+0x22>
			list->tail = prev_node;
   1e95a:	4b02      	ldr	r3, [pc, #8]	; (1e964 <net_icmpv6_unregister_handler+0x44>)
   1e95c:	605a      	str	r2, [r3, #4]
   1e95e:	e7f0      	b.n	1e942 <net_icmpv6_unregister_handler+0x22>
   1e960:	4770      	bx	lr
   1e962:	bf00      	nop
   1e964:	20001f84 	.word	0x20001f84

0001e968 <net_icmpv6_set_chksum>:
#define echo_reply_debug(pkt)
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

struct net_buf *net_icmpv6_set_chksum(struct net_pkt *pkt,
				      struct net_buf *frag)
{
   1e968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e96c:	b086      	sub	sp, #24
   1e96e:	4606      	mov	r6, r0
   1e970:	460d      	mov	r5, r1
	struct net_icmp_hdr *icmp_hdr;
	u16_t chksum = 0;
   1e972:	2300      	movs	r3, #0
   1e974:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	icmp_hdr = net_pkt_icmp_data(pkt);
   1e978:	f7ff fa18 	bl	1ddac <net_pkt_icmp_data>
   1e97c:	4604      	mov	r4, r0
 */
static inline
struct net_icmp_hdr *net_icmp_header_fits(struct net_pkt *pkt,
					  struct net_icmp_hdr *hdr)
{
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1e97e:	2204      	movs	r2, #4
   1e980:	4601      	mov	r1, r0
   1e982:	4630      	mov	r0, r6
   1e984:	f7ff fdfc 	bl	1e580 <net_header_fits>
   1e988:	b170      	cbz	r0, 1e9a8 <net_icmpv6_set_chksum+0x40>
		return hdr;
   1e98a:	4623      	mov	r3, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1e98c:	b173      	cbz	r3, 1e9ac <net_icmpv6_set_chksum+0x44>
		icmp_hdr->chksum = 0;
   1e98e:	2300      	movs	r3, #0
   1e990:	70a3      	strb	r3, [r4, #2]
   1e992:	70e3      	strb	r3, [r4, #3]
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1e994:	213a      	movs	r1, #58	; 0x3a
   1e996:	4630      	mov	r0, r6
   1e998:	f7ff fd99 	bl	1e4ce <net_calc_chksum>
		icmp_hdr->chksum = ~net_calc_chksum_icmpv6(pkt);
   1e99c:	43c0      	mvns	r0, r0
   1e99e:	8060      	strh	r0, [r4, #2]

		return frag;
   1e9a0:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1e9a2:	b006      	add	sp, #24
   1e9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1e9a8:	2300      	movs	r3, #0
   1e9aa:	e7ef      	b.n	1e98c <net_icmpv6_set_chksum+0x24>
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1e9ac:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e9b0:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1e9b4:	441a      	add	r2, r3
   1e9b6:	3202      	adds	r2, #2
   1e9b8:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1e9bc:	f8cd 8008 	str.w	r8, [sp, #8]
   1e9c0:	f10d 0416 	add.w	r4, sp, #22
   1e9c4:	9401      	str	r4, [sp, #4]
   1e9c6:	2702      	movs	r7, #2
   1e9c8:	9700      	str	r7, [sp, #0]
   1e9ca:	ab05      	add	r3, sp, #20
   1e9cc:	b292      	uxth	r2, r2
   1e9ce:	4629      	mov	r1, r5
   1e9d0:	4630      	mov	r0, r6
   1e9d2:	f7ff f902 	bl	1dbda <net_pkt_write>
   1e9d6:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1e9d8:	213a      	movs	r1, #58	; 0x3a
   1e9da:	4630      	mov	r0, r6
   1e9dc:	f7ff fd77 	bl	1e4ce <net_calc_chksum>
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1e9e0:	43c0      	mvns	r0, r0
   1e9e2:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1e9e6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1e9ea:	3a02      	subs	r2, #2
   1e9ec:	f8cd 8008 	str.w	r8, [sp, #8]
   1e9f0:	9401      	str	r4, [sp, #4]
   1e9f2:	9700      	str	r7, [sp, #0]
   1e9f4:	ab05      	add	r3, sp, #20
   1e9f6:	b292      	uxth	r2, r2
   1e9f8:	4629      	mov	r1, r5
   1e9fa:	4630      	mov	r0, r6
   1e9fc:	f7ff f8ed 	bl	1dbda <net_pkt_write>
	return frag;
   1ea00:	e7cf      	b.n	1e9a2 <net_icmpv6_set_chksum+0x3a>

0001ea02 <net_icmpv6_get_hdr>:

struct net_icmp_hdr *net_icmpv6_get_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1ea02:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea04:	b085      	sub	sp, #20
   1ea06:	4605      	mov	r5, r0
   1ea08:	460f      	mov	r7, r1
	/* If the ICMP header can fit the first fragment, then access it
	 * directly (fast path), otherwise read the values one by one
	 * using net_frag_read*() functions (slow path).
	 */

	icmp_hdr = net_pkt_icmp_data(pkt);
   1ea0a:	f7ff f9cf 	bl	1ddac <net_pkt_icmp_data>
   1ea0e:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1ea10:	2204      	movs	r2, #4
   1ea12:	4601      	mov	r1, r0
   1ea14:	4628      	mov	r0, r5
   1ea16:	f7ff fdb3 	bl	1e580 <net_header_fits>
   1ea1a:	b120      	cbz	r0, 1ea26 <net_icmpv6_get_hdr+0x24>
		return hdr;
   1ea1c:	4626      	mov	r6, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1ea1e:	b126      	cbz	r6, 1ea2a <net_icmpv6_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1ea20:	4620      	mov	r0, r4
   1ea22:	b005      	add	sp, #20
   1ea24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   1ea26:	2600      	movs	r6, #0
   1ea28:	e7f9      	b.n	1ea1e <net_icmpv6_get_hdr+0x1c>
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ea2a:	68a8      	ldr	r0, [r5, #8]
   1ea2c:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt), &pos, &hdr->type);
   1ea30:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   1ea34:	9700      	str	r7, [sp, #0]
   1ea36:	2301      	movs	r3, #1
   1ea38:	f10d 020e 	add.w	r2, sp, #14
   1ea3c:	4421      	add	r1, r4
   1ea3e:	f7ff f85a 	bl	1daf6 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->code);
   1ea42:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ea46:	1c7b      	adds	r3, r7, #1
   1ea48:	9300      	str	r3, [sp, #0]
   1ea4a:	2301      	movs	r3, #1
   1ea4c:	f10d 020e 	add.w	r2, sp, #14
   1ea50:	f7ff f851 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1ea54:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   1ea58:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1ea5a:	9300      	str	r3, [sp, #0]
   1ea5c:	2302      	movs	r3, #2
   1ea5e:	f10d 020e 	add.w	r2, sp, #14
   1ea62:	f7ff f848 	bl	1daf6 <net_frag_read>
	if (!frag) {
   1ea66:	b108      	cbz	r0, 1ea6c <net_icmpv6_get_hdr+0x6a>
	return hdr;
   1ea68:	463c      	mov	r4, r7
   1ea6a:	e7d9      	b.n	1ea20 <net_icmpv6_get_hdr+0x1e>
		return NULL;
   1ea6c:	4634      	mov	r4, r6
   1ea6e:	e7d7      	b.n	1ea20 <net_icmpv6_get_hdr+0x1e>

0001ea70 <net_icmpv6_set_hdr>:

struct net_icmp_hdr *net_icmpv6_set_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1ea70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea74:	b086      	sub	sp, #24
   1ea76:	4606      	mov	r6, r0
   1ea78:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1ea7a:	2204      	movs	r2, #4
   1ea7c:	f7ff fd80 	bl	1e580 <net_header_fits>
   1ea80:	b128      	cbz	r0, 1ea8e <net_icmpv6_set_hdr+0x1e>
		return hdr;
   1ea82:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_icmp_header_fits(pkt, hdr)) {
   1ea84:	b12d      	cbz	r5, 1ea92 <net_icmpv6_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1ea86:	4620      	mov	r0, r4
   1ea88:	b006      	add	sp, #24
   1ea8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1ea8e:	2500      	movs	r5, #0
   1ea90:	e7f8      	b.n	1ea84 <net_icmpv6_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ea92:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt), &pos,
   1ea96:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ea9a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1ea9e:	9702      	str	r7, [sp, #8]
   1eaa0:	9401      	str	r4, [sp, #4]
   1eaa2:	f04f 0801 	mov.w	r8, #1
   1eaa6:	f8cd 8000 	str.w	r8, [sp]
   1eaaa:	f10d 0316 	add.w	r3, sp, #22
   1eaae:	440a      	add	r2, r1
   1eab0:	68b1      	ldr	r1, [r6, #8]
   1eab2:	4630      	mov	r0, r6
   1eab4:	f7ff f891 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->code),
   1eab8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1eabc:	eb04 0308 	add.w	r3, r4, r8
   1eac0:	9702      	str	r7, [sp, #8]
   1eac2:	9301      	str	r3, [sp, #4]
   1eac4:	f8cd 8000 	str.w	r8, [sp]
   1eac8:	f10d 0316 	add.w	r3, sp, #22
   1eacc:	4601      	mov	r1, r0
   1eace:	4630      	mov	r0, r6
   1ead0:	f7ff f883 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1ead4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1ead8:	1ca3      	adds	r3, r4, #2
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1eada:	9702      	str	r7, [sp, #8]
   1eadc:	9301      	str	r3, [sp, #4]
   1eade:	2302      	movs	r3, #2
   1eae0:	9300      	str	r3, [sp, #0]
   1eae2:	f10d 0316 	add.w	r3, sp, #22
   1eae6:	4601      	mov	r1, r0
   1eae8:	4630      	mov	r0, r6
   1eaea:	f7ff f876 	bl	1dbda <net_pkt_write>
	if (!frag) {
   1eaee:	2800      	cmp	r0, #0
   1eaf0:	d1c9      	bne.n	1ea86 <net_icmpv6_set_hdr+0x16>
		return NULL;
   1eaf2:	462c      	mov	r4, r5
   1eaf4:	e7c7      	b.n	1ea86 <net_icmpv6_set_hdr+0x16>
	...

0001eaf8 <handle_echo_request>:

	return hdr;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   1eaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eafc:	b09a      	sub	sp, #104	; 0x68
   1eafe:	4606      	mov	r6, r0
	return pkt->iface;
   1eb00:	6945      	ldr	r5, [r0, #20]

	echo_request_debug(orig);

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1eb02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1eb06:	2000      	movs	r0, #0
   1eb08:	f7fe fe06 	bl	1d718 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1eb0c:	2800      	cmp	r0, #0
   1eb0e:	f000 80a1 	beq.w	1ec54 <handle_echo_request+0x15c>
   1eb12:	4604      	mov	r4, r0
	return pkt->frags->data;
   1eb14:	68b3      	ldr	r3, [r6, #8]
	size_t bytes = 0;
   1eb16:	2100      	movs	r1, #0
   1eb18:	e002      	b.n	1eb20 <handle_echo_request+0x28>
		bytes += buf->len;
   1eb1a:	899a      	ldrh	r2, [r3, #12]
   1eb1c:	4411      	add	r1, r2
		buf = buf->frags;
   1eb1e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1eb20:	2b00      	cmp	r3, #0
   1eb22:	d1fa      	bne.n	1eb1a <handle_echo_request+0x22>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1eb24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1eb28:	2200      	movs	r2, #0
   1eb2a:	4630      	mov	r0, r6
   1eb2c:	f7fe fea6 	bl	1d87c <net_pkt_copy>

	payload_len = sys_get_be16(NET_IPV6_HDR(orig)->len) -
		sizeof(NET_ICMPH_LEN) - NET_ICMPV6_UNUSED_LEN;

	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   1eb30:	4607      	mov	r7, r0
   1eb32:	2800      	cmp	r0, #0
   1eb34:	f000 808b 	beq.w	1ec4e <handle_echo_request+0x156>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1eb38:	4601      	mov	r1, r0
   1eb3a:	4620      	mov	r0, r4
   1eb3c:	f7fe fe87 	bl	1d84e <net_pkt_frag_add>
	pkt->family = family;
   1eb40:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1eb44:	220a      	movs	r2, #10
   1eb46:	f362 03c6 	bfi	r3, r2, #3, #4
   1eb4a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1eb4e:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1eb50:	7d6b      	ldrb	r3, [r5, #21]
   1eb52:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1eb56:	7d6b      	ldrb	r3, [r5, #21]
   1eb58:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1eb5c:	f107 0008 	add.w	r0, r7, #8
   1eb60:	f7fc f98d 	bl	1ae7e <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1eb64:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ip_hdr_len = len;
   1eb68:	2328      	movs	r3, #40	; 0x28
   1eb6a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->ipv6_ext_len;
   1eb6e:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   1eb72:	2b00      	cmp	r3, #0
   1eb74:	d076      	beq.n	1ec64 <handle_echo_request+0x16c>
	pkt->ipv6_ext_len = len;
   1eb76:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1eb7a:	68a3      	ldr	r3, [r4, #8]
   1eb7c:	689b      	ldr	r3, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1eb7e:	2260      	movs	r2, #96	; 0x60
   1eb80:	701a      	strb	r2, [r3, #0]
   1eb82:	68a3      	ldr	r3, [r4, #8]
   1eb84:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1eb86:	2300      	movs	r3, #0
   1eb88:	7053      	strb	r3, [r2, #1]
   1eb8a:	68a2      	ldr	r2, [r4, #8]
   1eb8c:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1eb8e:	7093      	strb	r3, [r2, #2]
   1eb90:	70d3      	strb	r3, [r2, #3]
   1eb92:	68a3      	ldr	r3, [r4, #8]
   1eb94:	689b      	ldr	r3, [r3, #8]
	return iface->ipv6.hop_limit;
   1eb96:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   1eb9a:	71da      	strb	r2, [r3, #7]
   1eb9c:	68a3      	ldr	r3, [r4, #8]
   1eb9e:	f8d3 c008 	ldr.w	ip, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   1eba2:	f89c 3018 	ldrb.w	r3, [ip, #24]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1eba6:	2bff      	cmp	r3, #255	; 0xff
   1eba8:	d060      	beq.n	1ec6c <handle_echo_request+0x174>
   1ebaa:	68b3      	ldr	r3, [r6, #8]
   1ebac:	689d      	ldr	r5, [r3, #8]
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1ebae:	af0e      	add	r7, sp, #56	; 0x38
   1ebb0:	462b      	mov	r3, r5
   1ebb2:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1ebb6:	6859      	ldr	r1, [r3, #4]
   1ebb8:	689a      	ldr	r2, [r3, #8]
   1ebba:	68db      	ldr	r3, [r3, #12]
   1ebbc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1ebbe:	af01      	add	r7, sp, #4
   1ebc0:	ab0e      	add	r3, sp, #56	; 0x38
   1ebc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1ebc4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ebc8:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   1ebcc:	462b      	mov	r3, r5
   1ebce:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1ebd2:	6859      	ldr	r1, [r3, #4]
   1ebd4:	689a      	ldr	r2, [r3, #8]
   1ebd6:	68db      	ldr	r3, [r3, #12]
   1ebd8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1ebdc:	ad12      	add	r5, sp, #72	; 0x48
   1ebde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ebe0:	f8cc 0008 	str.w	r0, [ip, #8]
   1ebe4:	f8cc 100c 	str.w	r1, [ip, #12]
   1ebe8:	f8cc 2010 	str.w	r2, [ip, #16]
   1ebec:	f8cc 3014 	str.w	r3, [ip, #20]
   1ebf0:	68a3      	ldr	r3, [r4, #8]
   1ebf2:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1ebf6:	ad16      	add	r5, sp, #88	; 0x58
   1ebf8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1ebfc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1ec00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ec02:	f8ce 0018 	str.w	r0, [lr, #24]
   1ec06:	f8ce 101c 	str.w	r1, [lr, #28]
   1ec0a:	f8ce 2020 	str.w	r2, [lr, #32]
   1ec0e:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
			goto drop;
		}
#endif
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1ec12:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1ec14:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1ec16:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   1ec1a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_ll_dst(pkt)->addr = NULL;
   1ec1e:	2500      	movs	r5, #0
   1ec20:	62a5      	str	r5, [r4, #40]	; 0x28

	/* ICMPv6 fields */
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ec22:	a905      	add	r1, sp, #20
   1ec24:	4620      	mov	r0, r4
   1ec26:	f7ff feec 	bl	1ea02 <net_icmpv6_get_hdr>
   1ec2a:	4601      	mov	r1, r0
	icmp_hdr->type = NET_ICMPV6_ECHO_REPLY;
   1ec2c:	2381      	movs	r3, #129	; 0x81
   1ec2e:	7003      	strb	r3, [r0, #0]
	icmp_hdr->code = 0;
   1ec30:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0;
   1ec32:	7085      	strb	r5, [r0, #2]
   1ec34:	70c5      	strb	r5, [r0, #3]
	net_icmpv6_set_hdr(pkt, icmp_hdr);
   1ec36:	4620      	mov	r0, r4
   1ec38:	f7ff ff1a 	bl	1ea70 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1ec3c:	68a1      	ldr	r1, [r4, #8]
   1ec3e:	4620      	mov	r0, r4
   1ec40:	f7ff fe92 	bl	1e968 <net_icmpv6_set_chksum>

	echo_reply_debug(pkt);

	if (net_send_data(pkt) < 0) {
   1ec44:	4620      	mov	r0, r4
   1ec46:	f7fc f9d7 	bl	1aff8 <net_send_data>
   1ec4a:	42a8      	cmp	r0, r5
   1ec4c:	da3c      	bge.n	1ecc8 <handle_echo_request+0x1d0>
	net_stats_update_icmp_sent();

	return NET_OK;

drop:
	net_pkt_unref(pkt);
   1ec4e:	4620      	mov	r0, r4
   1ec50:	f7fe fdd3 	bl	1d7fa <net_pkt_unref>
	net_stats.icmp.drop++;
   1ec54:	4a21      	ldr	r2, [pc, #132]	; (1ecdc <handle_echo_request+0x1e4>)
   1ec56:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1ec58:	3301      	adds	r3, #1
   1ec5a:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return NET_DROP;
   1ec5c:	2002      	movs	r0, #2
}
   1ec5e:	b01a      	add	sp, #104	; 0x68
   1ec60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pkt->ipv6_ext_len = len;
   1ec64:	2300      	movs	r3, #0
   1ec66:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   1ec6a:	e786      	b.n	1eb7a <handle_echo_request+0x82>
	return pkt->frags->data;
   1ec6c:	68b3      	ldr	r3, [r6, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1ec6e:	af06      	add	r7, sp, #24
   1ec70:	689b      	ldr	r3, [r3, #8]
   1ec72:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1ec76:	6859      	ldr	r1, [r3, #4]
   1ec78:	689a      	ldr	r2, [r3, #8]
   1ec7a:	68db      	ldr	r3, [r3, #12]
   1ec7c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1ec7e:	af06      	add	r7, sp, #24
   1ec80:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1ec82:	f8cc 0018 	str.w	r0, [ip, #24]
   1ec86:	f8cc 101c 	str.w	r1, [ip, #28]
   1ec8a:	f8cc 2020 	str.w	r2, [ip, #32]
   1ec8e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1ec92:	68a3      	ldr	r3, [r4, #8]
   1ec94:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1ec98:	68b3      	ldr	r3, [r6, #8]
   1ec9a:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ec9c:	3118      	adds	r1, #24
   1ec9e:	4628      	mov	r0, r5
   1eca0:	f7fd f910 	bl	1bec4 <net_if_ipv6_select_src_addr>
   1eca4:	4603      	mov	r3, r0
   1eca6:	ad0a      	add	r5, sp, #40	; 0x28
   1eca8:	6800      	ldr	r0, [r0, #0]
   1ecaa:	6859      	ldr	r1, [r3, #4]
   1ecac:	689a      	ldr	r2, [r3, #8]
   1ecae:	68db      	ldr	r3, [r3, #12]
   1ecb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ecb2:	ad0a      	add	r5, sp, #40	; 0x28
   1ecb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ecb6:	f8c8 0008 	str.w	r0, [r8, #8]
   1ecba:	f8c8 100c 	str.w	r1, [r8, #12]
   1ecbe:	f8c8 2010 	str.w	r2, [r8, #16]
   1ecc2:	f8c8 3014 	str.w	r3, [r8, #20]
   1ecc6:	e7a4      	b.n	1ec12 <handle_echo_request+0x11a>
	net_pkt_unref(orig);
   1ecc8:	4630      	mov	r0, r6
   1ecca:	f7fe fd96 	bl	1d7fa <net_pkt_unref>
	net_stats.icmp.sent++;
   1ecce:	4a03      	ldr	r2, [pc, #12]	; (1ecdc <handle_echo_request+0x1e4>)
   1ecd0:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1ecd2:	3301      	adds	r3, #1
   1ecd4:	6393      	str	r3, [r2, #56]	; 0x38
	return NET_OK;
   1ecd6:	4628      	mov	r0, r5
   1ecd8:	e7c1      	b.n	1ec5e <handle_echo_request+0x166>
   1ecda:	bf00      	nop
   1ecdc:	20002b58 	.word	0x20002b58

0001ece0 <net_icmpv6_get_ns_hdr>:
{
   1ece0:	b570      	push	{r4, r5, r6, lr}
   1ece2:	b084      	sub	sp, #16
   1ece4:	4605      	mov	r5, r0
   1ece6:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ece8:	2104      	movs	r1, #4
   1ecea:	f7ff f874 	bl	1ddd6 <net_pkt_icmp_opt_data>
   1ecee:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ecf0:	2214      	movs	r2, #20
   1ecf2:	4601      	mov	r1, r0
   1ecf4:	4628      	mov	r0, r5
   1ecf6:	f7ff fc43 	bl	1e580 <net_header_fits>
   1ecfa:	b110      	cbz	r0, 1ed02 <net_icmpv6_get_ns_hdr+0x22>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1ecfc:	4620      	mov	r0, r4
}
   1ecfe:	b004      	add	sp, #16
   1ed00:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read(pkt->frags,
   1ed02:	68a8      	ldr	r0, [r5, #8]
			     net_pkt_ip_hdr_len(pkt) +
   1ed04:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1ed08:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1ed0c:	4419      	add	r1, r3
	frag = net_frag_read(pkt->frags,
   1ed0e:	3108      	adds	r1, #8
			     &pos, sizeof(struct in6_addr), (u8_t *)&hdr->tgt);
   1ed10:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(pkt->frags,
   1ed12:	9300      	str	r3, [sp, #0]
   1ed14:	2310      	movs	r3, #16
   1ed16:	f10d 020e 	add.w	r2, sp, #14
   1ed1a:	b289      	uxth	r1, r1
   1ed1c:	f7fe feeb 	bl	1daf6 <net_frag_read>
	if (!frag) {
   1ed20:	2800      	cmp	r0, #0
   1ed22:	d0ec      	beq.n	1ecfe <net_icmpv6_get_ns_hdr+0x1e>
	return hdr;
   1ed24:	4630      	mov	r0, r6
   1ed26:	e7ea      	b.n	1ecfe <net_icmpv6_get_ns_hdr+0x1e>

0001ed28 <net_icmpv6_set_ns_hdr>:
{
   1ed28:	b570      	push	{r4, r5, r6, lr}
   1ed2a:	b086      	sub	sp, #24
   1ed2c:	4605      	mov	r5, r0
   1ed2e:	460e      	mov	r6, r1
	const u32_t reserved = 0;
   1ed30:	2300      	movs	r3, #0
   1ed32:	9305      	str	r3, [sp, #20]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ed34:	2104      	movs	r1, #4
   1ed36:	f7ff f84e 	bl	1ddd6 <net_pkt_icmp_opt_data>
   1ed3a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ed3c:	2214      	movs	r2, #20
   1ed3e:	4601      	mov	r1, r0
   1ed40:	4628      	mov	r0, r5
   1ed42:	f7ff fc1d 	bl	1e580 <net_header_fits>
   1ed46:	b110      	cbz	r0, 1ed4e <net_icmpv6_set_ns_hdr+0x26>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1ed48:	4620      	mov	r0, r4
}
   1ed4a:	b006      	add	sp, #24
   1ed4c:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ed4e:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1ed52:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ed56:	441a      	add	r2, r3
   1ed58:	3204      	adds	r2, #4
   1ed5a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1ed5e:	9402      	str	r4, [sp, #8]
   1ed60:	ab05      	add	r3, sp, #20
   1ed62:	9301      	str	r3, [sp, #4]
   1ed64:	2304      	movs	r3, #4
   1ed66:	9300      	str	r3, [sp, #0]
   1ed68:	f10d 0312 	add.w	r3, sp, #18
   1ed6c:	b292      	uxth	r2, r2
   1ed6e:	68a9      	ldr	r1, [r5, #8]
   1ed70:	4628      	mov	r0, r5
   1ed72:	f7fe ff32 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1ed76:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1ed7a:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1ed7c:	9402      	str	r4, [sp, #8]
   1ed7e:	9301      	str	r3, [sp, #4]
   1ed80:	2310      	movs	r3, #16
   1ed82:	9300      	str	r3, [sp, #0]
   1ed84:	f10d 0312 	add.w	r3, sp, #18
   1ed88:	4601      	mov	r1, r0
   1ed8a:	4628      	mov	r0, r5
   1ed8c:	f7fe ff25 	bl	1dbda <net_pkt_write>
	if (!frag) {
   1ed90:	2800      	cmp	r0, #0
   1ed92:	d0da      	beq.n	1ed4a <net_icmpv6_set_ns_hdr+0x22>
	return hdr;
   1ed94:	4630      	mov	r0, r6
   1ed96:	e7d8      	b.n	1ed4a <net_icmpv6_set_ns_hdr+0x22>

0001ed98 <net_icmpv6_get_nd_opt_hdr>:
{
   1ed98:	b570      	push	{r4, r5, r6, lr}
   1ed9a:	b084      	sub	sp, #16
   1ed9c:	4605      	mov	r5, r0
   1ed9e:	460e      	mov	r6, r1
	return pkt->ipv6_ext_opt_len;
   1eda0:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1eda4:	3104      	adds	r1, #4
   1eda6:	f7ff f816 	bl	1ddd6 <net_pkt_icmp_opt_data>
   1edaa:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1edac:	2202      	movs	r2, #2
   1edae:	4601      	mov	r1, r0
   1edb0:	4628      	mov	r0, r5
   1edb2:	f7ff fbe5 	bl	1e580 <net_header_fits>
   1edb6:	b110      	cbz	r0, 1edbe <net_icmpv6_get_nd_opt_hdr+0x26>
		return (struct net_icmpv6_nd_opt_hdr *)opt_data;
   1edb8:	4620      	mov	r0, r4
}
   1edba:	b004      	add	sp, #16
   1edbc:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags,
   1edbe:	68a8      	ldr	r0, [r5, #8]
				net_pkt_ip_hdr_len(pkt) +
   1edc0:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1edc4:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1edc8:	4419      	add	r1, r3
				net_pkt_ipv6_ext_opt_len(pkt),
   1edca:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
				sizeof(struct net_icmp_hdr) +
   1edce:	4419      	add	r1, r3
   1edd0:	b289      	uxth	r1, r1
	frag = net_frag_read_u8(pkt->frags,
   1edd2:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1edd4:	9600      	str	r6, [sp, #0]
   1edd6:	2301      	movs	r3, #1
   1edd8:	f10d 020e 	add.w	r2, sp, #14
   1eddc:	b289      	uxth	r1, r1
   1edde:	f7fe fe8a 	bl	1daf6 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->len);
   1ede2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ede6:	1c73      	adds	r3, r6, #1
   1ede8:	9300      	str	r3, [sp, #0]
   1edea:	2301      	movs	r3, #1
   1edec:	f10d 020e 	add.w	r2, sp, #14
   1edf0:	f7fe fe81 	bl	1daf6 <net_frag_read>
	if (!frag) {
   1edf4:	2800      	cmp	r0, #0
   1edf6:	d0e0      	beq.n	1edba <net_icmpv6_get_nd_opt_hdr+0x22>
	return hdr;
   1edf8:	4630      	mov	r0, r6
   1edfa:	e7de      	b.n	1edba <net_icmpv6_get_nd_opt_hdr+0x22>

0001edfc <net_icmpv6_get_na_hdr>:
{
   1edfc:	b570      	push	{r4, r5, r6, lr}
   1edfe:	b084      	sub	sp, #16
   1ee00:	4605      	mov	r5, r0
   1ee02:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ee04:	2104      	movs	r1, #4
   1ee06:	f7fe ffe6 	bl	1ddd6 <net_pkt_icmp_opt_data>
   1ee0a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ee0c:	2214      	movs	r2, #20
   1ee0e:	4601      	mov	r1, r0
   1ee10:	4628      	mov	r0, r5
   1ee12:	f7ff fbb5 	bl	1e580 <net_header_fits>
   1ee16:	b110      	cbz	r0, 1ee1e <net_icmpv6_get_na_hdr+0x22>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1ee18:	4620      	mov	r0, r4
}
   1ee1a:	b004      	add	sp, #16
   1ee1c:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ee1e:	68a8      	ldr	r0, [r5, #8]
   1ee20:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1ee24:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ee28:	4419      	add	r1, r3
   1ee2a:	3104      	adds	r1, #4
   1ee2c:	9600      	str	r6, [sp, #0]
   1ee2e:	2301      	movs	r3, #1
   1ee30:	f10d 020e 	add.w	r2, sp, #14
   1ee34:	b289      	uxth	r1, r1
   1ee36:	f7fe fe5e 	bl	1daf6 <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 3); /* reserved */
   1ee3a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
	return net_frag_read(frag, offset, pos, len, NULL);
   1ee3e:	2300      	movs	r3, #0
   1ee40:	9300      	str	r3, [sp, #0]
   1ee42:	2303      	movs	r3, #3
   1ee44:	f10d 020e 	add.w	r2, sp, #14
   1ee48:	f7fe fe55 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1ee4c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->tgt);
   1ee50:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1ee52:	9300      	str	r3, [sp, #0]
   1ee54:	2310      	movs	r3, #16
   1ee56:	f10d 020e 	add.w	r2, sp, #14
   1ee5a:	f7fe fe4c 	bl	1daf6 <net_frag_read>
	if (!frag) {
   1ee5e:	2800      	cmp	r0, #0
   1ee60:	d0db      	beq.n	1ee1a <net_icmpv6_get_na_hdr+0x1e>
	return hdr;
   1ee62:	4630      	mov	r0, r6
   1ee64:	e7d9      	b.n	1ee1a <net_icmpv6_get_na_hdr+0x1e>

0001ee66 <net_icmpv6_set_na_hdr>:
{
   1ee66:	b570      	push	{r4, r5, r6, lr}
   1ee68:	b086      	sub	sp, #24
   1ee6a:	4605      	mov	r5, r0
   1ee6c:	460e      	mov	r6, r1
	const u8_t reserved[3] = { 0 };
   1ee6e:	2300      	movs	r3, #0
   1ee70:	f8ad 3014 	strh.w	r3, [sp, #20]
   1ee74:	f88d 3016 	strb.w	r3, [sp, #22]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ee78:	2104      	movs	r1, #4
   1ee7a:	f7fe ffac 	bl	1ddd6 <net_pkt_icmp_opt_data>
   1ee7e:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ee80:	2214      	movs	r2, #20
   1ee82:	4601      	mov	r1, r0
   1ee84:	4628      	mov	r0, r5
   1ee86:	f7ff fb7b 	bl	1e580 <net_header_fits>
   1ee8a:	b110      	cbz	r0, 1ee92 <net_icmpv6_set_na_hdr+0x2c>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1ee8c:	4620      	mov	r0, r4
}
   1ee8e:	b006      	add	sp, #24
   1ee90:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ip_hdr_len(pkt) +
   1ee92:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1ee96:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1ee9a:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, pkt->frags,
   1ee9c:	3204      	adds	r2, #4
   1ee9e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1eea2:	9402      	str	r4, [sp, #8]
   1eea4:	9601      	str	r6, [sp, #4]
   1eea6:	2301      	movs	r3, #1
   1eea8:	9300      	str	r3, [sp, #0]
   1eeaa:	f10d 0312 	add.w	r3, sp, #18
   1eeae:	b292      	uxth	r2, r2
   1eeb0:	68a9      	ldr	r1, [r5, #8]
   1eeb2:	4628      	mov	r0, r5
   1eeb4:	f7fe fe91 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(reserved),
   1eeb8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1eebc:	9402      	str	r4, [sp, #8]
   1eebe:	ab05      	add	r3, sp, #20
   1eec0:	9301      	str	r3, [sp, #4]
   1eec2:	2303      	movs	r3, #3
   1eec4:	9300      	str	r3, [sp, #0]
   1eec6:	f10d 0312 	add.w	r3, sp, #18
   1eeca:	4601      	mov	r1, r0
   1eecc:	4628      	mov	r0, r5
   1eece:	f7fe fe84 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1eed2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1eed6:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1eed8:	9402      	str	r4, [sp, #8]
   1eeda:	9301      	str	r3, [sp, #4]
   1eedc:	2310      	movs	r3, #16
   1eede:	9300      	str	r3, [sp, #0]
   1eee0:	f10d 0312 	add.w	r3, sp, #18
   1eee4:	4601      	mov	r1, r0
   1eee6:	4628      	mov	r0, r5
   1eee8:	f7fe fe77 	bl	1dbda <net_pkt_write>
	if (!frag) {
   1eeec:	2800      	cmp	r0, #0
   1eeee:	d0ce      	beq.n	1ee8e <net_icmpv6_set_na_hdr+0x28>
	return hdr;
   1eef0:	4630      	mov	r0, r6
   1eef2:	e7cc      	b.n	1ee8e <net_icmpv6_set_na_hdr+0x28>

0001eef4 <net_icmpv6_get_ra_hdr>:
{
   1eef4:	b570      	push	{r4, r5, r6, lr}
   1eef6:	b084      	sub	sp, #16
   1eef8:	4606      	mov	r6, r0
   1eefa:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1eefc:	2104      	movs	r1, #4
   1eefe:	f7fe ff6a 	bl	1ddd6 <net_pkt_icmp_opt_data>
   1ef02:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ef04:	220c      	movs	r2, #12
   1ef06:	4601      	mov	r1, r0
   1ef08:	4630      	mov	r0, r6
   1ef0a:	f7ff fb39 	bl	1e580 <net_header_fits>
   1ef0e:	b110      	cbz	r0, 1ef16 <net_icmpv6_get_ra_hdr+0x22>
		return (struct net_icmpv6_ra_hdr *)opt_data;
   1ef10:	4620      	mov	r0, r4
}
   1ef12:	b004      	add	sp, #16
   1ef14:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ef16:	68b0      	ldr	r0, [r6, #8]
   1ef18:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1ef1c:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ef20:	4419      	add	r1, r3
   1ef22:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1ef24:	9500      	str	r5, [sp, #0]
   1ef26:	2301      	movs	r3, #1
   1ef28:	f10d 020e 	add.w	r2, sp, #14
   1ef2c:	b289      	uxth	r1, r1
   1ef2e:	f7fe fde2 	bl	1daf6 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   1ef32:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ef36:	1c6b      	adds	r3, r5, #1
   1ef38:	9300      	str	r3, [sp, #0]
   1ef3a:	2301      	movs	r3, #1
   1ef3c:	f10d 020e 	add.w	r2, sp, #14
   1ef40:	f7fe fdd9 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1ef44:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->router_lifetime);
   1ef48:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1ef4a:	9300      	str	r3, [sp, #0]
   1ef4c:	2302      	movs	r3, #2
   1ef4e:	f10d 020e 	add.w	r2, sp, #14
   1ef52:	f7fe fdd0 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1ef56:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->reachable_time);
   1ef5a:	1d2b      	adds	r3, r5, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1ef5c:	9300      	str	r3, [sp, #0]
   1ef5e:	2304      	movs	r3, #4
   1ef60:	f10d 020e 	add.w	r2, sp, #14
   1ef64:	f7fe fdc7 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1ef68:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->retrans_timer);
   1ef6c:	f105 0308 	add.w	r3, r5, #8
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1ef70:	9300      	str	r3, [sp, #0]
   1ef72:	2304      	movs	r3, #4
   1ef74:	f10d 020e 	add.w	r2, sp, #14
   1ef78:	f7fe fdbd 	bl	1daf6 <net_frag_read>
	if (!frag) {
   1ef7c:	2800      	cmp	r0, #0
   1ef7e:	d0c8      	beq.n	1ef12 <net_icmpv6_get_ra_hdr+0x1e>
	return hdr;
   1ef80:	4628      	mov	r0, r5
   1ef82:	e7c6      	b.n	1ef12 <net_icmpv6_get_ra_hdr+0x1e>

0001ef84 <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   1ef84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef88:	b09f      	sub	sp, #124	; 0x7c
   1ef8a:	4605      	mov	r5, r0
   1ef8c:	4688      	mov	r8, r1
   1ef8e:	4692      	mov	sl, r2
   1ef90:	4699      	mov	r9, r3
	return pkt->frags->data;
   1ef92:	6883      	ldr	r3, [r0, #8]
   1ef94:	689b      	ldr	r3, [r3, #8]
	struct net_buf *frag;
	struct net_if *iface;
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1ef96:	799b      	ldrb	r3, [r3, #6]
   1ef98:	2b3a      	cmp	r3, #58	; 0x3a
   1ef9a:	d01d      	beq.n	1efd8 <net_icmpv6_send_error+0x54>
	return pkt->iface;
   1ef9c:	696f      	ldr	r7, [r5, #20]
		}
	}

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1ef9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1efa2:	2000      	movs	r0, #0
   1efa4:	f7fe fbb8 	bl	1d718 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1efa8:	4604      	mov	r4, r0
   1efaa:	2800      	cmp	r0, #0
   1efac:	f000 8141 	beq.w	1f232 <net_icmpv6_send_error+0x2ae>
	return pkt->frags->data;
   1efb0:	68ab      	ldr	r3, [r5, #8]
   1efb2:	6899      	ldr	r1, [r3, #8]
	 * to store the param variable.
	 */
	reserve = sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr) +
		NET_ICMPV6_UNUSED_LEN;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   1efb4:	798b      	ldrb	r3, [r1, #6]
   1efb6:	2b11      	cmp	r3, #17
   1efb8:	d019      	beq.n	1efee <net_icmpv6_send_error+0x6a>
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_udp_hdr);
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   1efba:	2b06      	cmp	r3, #6
   1efbc:	d019      	beq.n	1eff2 <net_icmpv6_send_error+0x6e>
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1efbe:	687b      	ldr	r3, [r7, #4]
   1efc0:	689b      	ldr	r3, [r3, #8]
   1efc2:	3118      	adds	r1, #24
   1efc4:	4638      	mov	r0, r7
   1efc6:	4798      	blx	r3
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_tcp_hdr);
	} else {
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   1efc8:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
			net_if_get_ll_reserve(iface,
					      &NET_IPV6_HDR(orig)->dst);

		if (reserve > space) {
   1efcc:	282f      	cmp	r0, #47	; 0x2f
   1efce:	f240 80de 	bls.w	1f18e <net_icmpv6_send_error+0x20a>
			extra_len = 0;
		} else {
			extra_len = space - reserve;
   1efd2:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
   1efd6:	e00d      	b.n	1eff4 <net_icmpv6_send_error+0x70>
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1efd8:	a906      	add	r1, sp, #24
   1efda:	f7ff fd12 	bl	1ea02 <net_icmpv6_get_hdr>
   1efde:	b118      	cbz	r0, 1efe8 <net_icmpv6_send_error+0x64>
		    icmp_hdr->code < 128) {
   1efe0:	f99d 3019 	ldrsb.w	r3, [sp, #25]
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1efe4:	2b00      	cmp	r3, #0
   1efe6:	dbd9      	blt.n	1ef9c <net_icmpv6_send_error+0x18>
			err = -EINVAL;
   1efe8:	f06f 0515 	mvn.w	r5, #21
   1efec:	e119      	b.n	1f222 <net_icmpv6_send_error+0x29e>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1efee:	2630      	movs	r6, #48	; 0x30
   1eff0:	e000      	b.n	1eff4 <net_icmpv6_send_error+0x70>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1eff2:	263c      	movs	r6, #60	; 0x3c
	}

	/* We only copy minimal IPv6 + next header from original message.
	 * This is so that the memory pressure is minimized.
	 */
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   1eff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1eff8:	2230      	movs	r2, #48	; 0x30
   1effa:	4631      	mov	r1, r6
   1effc:	4628      	mov	r0, r5
   1effe:	f7fe fc3d 	bl	1d87c <net_pkt_copy>
	if (!frag) {
   1f002:	4683      	mov	fp, r0
   1f004:	2800      	cmp	r0, #0
   1f006:	f000 8104 	beq.w	1f212 <net_icmpv6_send_error+0x28e>
		err = -ENOMEM;
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1f00a:	4601      	mov	r1, r0
   1f00c:	4620      	mov	r0, r4
   1f00e:	f7fe fc1e 	bl	1d84e <net_pkt_frag_add>
	pkt->family = family;
   1f012:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1f016:	220a      	movs	r2, #10
   1f018:	f362 03c6 	bfi	r3, r2, #3, #4
   1f01c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1f020:	6167      	str	r7, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f022:	7d7b      	ldrb	r3, [r7, #21]
   1f024:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f028:	7d7b      	ldrb	r3, [r7, #21]
   1f02a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1f02e:	f10b 0008 	add.w	r0, fp, #8
   1f032:	f7fb ff24 	bl	1ae7e <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1f036:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ipv6_ext_len = len;
   1f03a:	2000      	movs	r0, #0
   1f03c:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	net_pkt_set_ipv6_ext_len(pkt, 0);

	setup_ipv6_header(pkt, extra_len, net_if_ipv6_get_hop_limit(iface),
   1f040:	b2b6      	uxth	r6, r6
	return iface->ipv6.hop_limit;
   1f042:	f897 3294 	ldrb.w	r3, [r7, #660]	; 0x294
   1f046:	f88d 8014 	strb.w	r8, [sp, #20]
   1f04a:	f88d a015 	strb.w	sl, [sp, #21]
	struct net_buf *frag = pkt->frags;
   1f04e:	68a1      	ldr	r1, [r4, #8]
	const u32_t unused = 0;
   1f050:	9006      	str	r0, [sp, #24]
	return pkt->frags->data;
   1f052:	688a      	ldr	r2, [r1, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1f054:	f04f 0e60 	mov.w	lr, #96	; 0x60
   1f058:	f882 e000 	strb.w	lr, [r2]
   1f05c:	68a2      	ldr	r2, [r4, #8]
   1f05e:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1f060:	7050      	strb	r0, [r2, #1]
   1f062:	68a2      	ldr	r2, [r4, #8]
   1f064:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1f066:	7090      	strb	r0, [r2, #2]
   1f068:	70d0      	strb	r0, [r2, #3]
	sys_put_be16(NET_ICMPH_LEN + extra_len + NET_ICMPV6_UNUSED_LEN,
   1f06a:	3608      	adds	r6, #8
   1f06c:	b2b6      	uxth	r6, r6
   1f06e:	68a2      	ldr	r2, [r4, #8]
   1f070:	6892      	ldr	r2, [r2, #8]
	dst[0] = val >> 8;
   1f072:	0a30      	lsrs	r0, r6, #8
   1f074:	7110      	strb	r0, [r2, #4]
	dst[1] = val;
   1f076:	7156      	strb	r6, [r2, #5]
   1f078:	68a2      	ldr	r2, [r4, #8]
   1f07a:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1f07c:	203a      	movs	r0, #58	; 0x3a
   1f07e:	7190      	strb	r0, [r2, #6]
   1f080:	68a2      	ldr	r2, [r4, #8]
   1f082:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   1f084:	71d3      	strb	r3, [r2, #7]
	pkt->ip_hdr_len = len;
   1f086:	2228      	movs	r2, #40	; 0x28
   1f088:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   1f08c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1f090:	9602      	str	r6, [sp, #8]
   1f092:	ab05      	add	r3, sp, #20
   1f094:	9301      	str	r3, [sp, #4]
   1f096:	f04f 0a01 	mov.w	sl, #1
   1f09a:	f8cd a000 	str.w	sl, [sp]
   1f09e:	f10d 0316 	add.w	r3, sp, #22
   1f0a2:	4620      	mov	r0, r4
   1f0a4:	f7fe fd99 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   1f0a8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1f0ac:	9602      	str	r6, [sp, #8]
   1f0ae:	f10d 0315 	add.w	r3, sp, #21
   1f0b2:	9301      	str	r3, [sp, #4]
   1f0b4:	f8cd a000 	str.w	sl, [sp]
   1f0b8:	f10d 0316 	add.w	r3, sp, #22
   1f0bc:	4601      	mov	r1, r0
   1f0be:	4620      	mov	r0, r4
   1f0c0:	f7fe fd8b 	bl	1dbda <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   1f0c4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1f0c8:	9602      	str	r6, [sp, #8]
   1f0ca:	ab06      	add	r3, sp, #24
   1f0cc:	9301      	str	r3, [sp, #4]
   1f0ce:	2304      	movs	r3, #4
   1f0d0:	9300      	str	r3, [sp, #0]
   1f0d2:	f10d 0316 	add.w	r3, sp, #22
   1f0d6:	4601      	mov	r1, r0
   1f0d8:	4620      	mov	r0, r4
   1f0da:	f7fe fd7e 	bl	1dbda <net_pkt_write>
			  type, code);

	/* Depending on error option, we store the param into the ICMP message.
	 */
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   1f0de:	f1b8 0f04 	cmp.w	r8, #4
   1f0e2:	d056      	beq.n	1f192 <net_icmpv6_send_error+0x20e>
	return pkt->frags->data;
   1f0e4:	68ab      	ldr	r3, [r5, #8]
   1f0e6:	689e      	ldr	r6, [r3, #8]
   1f0e8:	7e33      	ldrb	r3, [r6, #24]
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
			     sizeof(struct net_icmp_hdr));
	}

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   1f0ea:	2bff      	cmp	r3, #255	; 0xff
   1f0ec:	d05f      	beq.n	1f1ae <net_icmpv6_send_error+0x22a>
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1f0ee:	af12      	add	r7, sp, #72	; 0x48
   1f0f0:	4633      	mov	r3, r6
   1f0f2:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1f0f6:	6859      	ldr	r1, [r3, #4]
   1f0f8:	689a      	ldr	r2, [r3, #8]
   1f0fa:	68db      	ldr	r3, [r3, #12]
   1f0fc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1f0fe:	af06      	add	r7, sp, #24
   1f100:	ab12      	add	r3, sp, #72	; 0x48
   1f102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1f104:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1f108:	68a3      	ldr	r3, [r4, #8]
   1f10a:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1f10e:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   1f112:	4633      	mov	r3, r6
   1f114:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1f118:	6859      	ldr	r1, [r3, #4]
   1f11a:	689a      	ldr	r2, [r3, #8]
   1f11c:	68db      	ldr	r3, [r3, #12]
   1f11e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f122:	ae16      	add	r6, sp, #88	; 0x58
   1f124:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f126:	f8cc 0008 	str.w	r0, [ip, #8]
   1f12a:	f8cc 100c 	str.w	r1, [ip, #12]
   1f12e:	f8cc 2010 	str.w	r2, [ip, #16]
   1f132:	f8cc 3014 	str.w	r3, [ip, #20]
   1f136:	68a3      	ldr	r3, [r4, #8]
   1f138:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1f13c:	ae1a      	add	r6, sp, #104	; 0x68
   1f13e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1f142:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1f146:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f148:	f8ce 0018 	str.w	r0, [lr, #24]
   1f14c:	f8ce 101c 	str.w	r1, [lr, #28]
   1f150:	f8ce 2020 	str.w	r2, [lr, #32]
   1f154:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1f158:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1f15a:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1f15c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1f160:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_dst(pkt)->addr = net_pkt_ll_src(orig)->addr;
   1f164:	6a2b      	ldr	r3, [r5, #32]
   1f166:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = net_pkt_ll_src(orig)->len;
   1f168:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1f16c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	/* Clear and then set the chksum */
	frag = net_icmpv6_set_chksum(pkt, pkt->frags);
   1f170:	68a1      	ldr	r1, [r4, #8]
   1f172:	4620      	mov	r0, r4
   1f174:	f7ff fbf8 	bl	1e968 <net_icmpv6_set_chksum>
			" from %s to %s", type, code, param,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1f178:	4620      	mov	r0, r4
   1f17a:	f7fb ff3d 	bl	1aff8 <net_send_data>
   1f17e:	2800      	cmp	r0, #0
   1f180:	db4a      	blt.n	1f218 <net_icmpv6_send_error+0x294>
   1f182:	4a2d      	ldr	r2, [pc, #180]	; (1f238 <net_icmpv6_send_error+0x2b4>)
   1f184:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1f186:	3301      	adds	r3, #1
   1f188:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1f18a:	2500      	movs	r5, #0
   1f18c:	e04d      	b.n	1f22a <net_icmpv6_send_error+0x2a6>
			extra_len = 0;
   1f18e:	2600      	movs	r6, #0
   1f190:	e730      	b.n	1eff4 <net_icmpv6_send_error+0x70>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   1f192:	4620      	mov	r0, r4
   1f194:	f7fe fe0a 	bl	1ddac <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   1f198:	ea4f 4319 	mov.w	r3, r9, lsr #16
	dst[0] = val >> 8;
   1f19c:	0a1a      	lsrs	r2, r3, #8
   1f19e:	7102      	strb	r2, [r0, #4]
	dst[1] = val;
   1f1a0:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   1f1a2:	f3c9 2307 	ubfx	r3, r9, #8, #8
   1f1a6:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   1f1a8:	f880 9007 	strb.w	r9, [r0, #7]
   1f1ac:	e79a      	b.n	1f0e4 <net_icmpv6_send_error+0x160>
   1f1ae:	68a3      	ldr	r3, [r4, #8]
   1f1b0:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1f1b4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1f1b8:	4633      	mov	r3, r6
   1f1ba:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1f1be:	6859      	ldr	r1, [r3, #4]
   1f1c0:	689a      	ldr	r2, [r3, #8]
   1f1c2:	68db      	ldr	r3, [r3, #12]
   1f1c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f1c8:	ae0a      	add	r6, sp, #40	; 0x28
   1f1ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f1cc:	f8cc 0018 	str.w	r0, [ip, #24]
   1f1d0:	f8cc 101c 	str.w	r1, [ip, #28]
   1f1d4:	f8cc 2020 	str.w	r2, [ip, #32]
   1f1d8:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1f1dc:	68a3      	ldr	r3, [r4, #8]
   1f1de:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f1e2:	68ab      	ldr	r3, [r5, #8]
   1f1e4:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1f1e6:	3118      	adds	r1, #24
   1f1e8:	4638      	mov	r0, r7
   1f1ea:	f7fc fe6b 	bl	1bec4 <net_if_ipv6_select_src_addr>
   1f1ee:	4603      	mov	r3, r0
   1f1f0:	ae0e      	add	r6, sp, #56	; 0x38
   1f1f2:	6800      	ldr	r0, [r0, #0]
   1f1f4:	6859      	ldr	r1, [r3, #4]
   1f1f6:	689a      	ldr	r2, [r3, #8]
   1f1f8:	68db      	ldr	r3, [r3, #12]
   1f1fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1f1fc:	ae0e      	add	r6, sp, #56	; 0x38
   1f1fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f200:	f8c8 0008 	str.w	r0, [r8, #8]
   1f204:	f8c8 100c 	str.w	r1, [r8, #12]
   1f208:	f8c8 2010 	str.w	r2, [r8, #16]
   1f20c:	f8c8 3014 	str.w	r3, [r8, #20]
   1f210:	e7a2      	b.n	1f158 <net_icmpv6_send_error+0x1d4>
		err = -ENOMEM;
   1f212:	f06f 050b 	mvn.w	r5, #11
   1f216:	e001      	b.n	1f21c <net_icmpv6_send_error+0x298>
	int err = -EIO;
   1f218:	f06f 0504 	mvn.w	r5, #4
	}

drop:
	net_pkt_unref(pkt);
   1f21c:	4620      	mov	r0, r4
   1f21e:	f7fe faec 	bl	1d7fa <net_pkt_unref>
	net_stats.icmp.drop++;
   1f222:	4a05      	ldr	r2, [pc, #20]	; (1f238 <net_icmpv6_send_error+0x2b4>)
   1f224:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f226:	3301      	adds	r3, #1
   1f228:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return err;
}
   1f22a:	4628      	mov	r0, r5
   1f22c:	b01f      	add	sp, #124	; 0x7c
   1f22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = -ENOMEM;
   1f232:	f06f 050b 	mvn.w	r5, #11
   1f236:	e7f4      	b.n	1f222 <net_icmpv6_send_error+0x29e>
   1f238:	20002b58 	.word	0x20002b58

0001f23c <net_icmpv6_send_echo_request>:

int net_icmpv6_send_echo_request(struct net_if *iface,
				 struct in6_addr *dst,
				 u16_t identifier,
				 u16_t sequence)
{
   1f23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f240:	b08d      	sub	sp, #52	; 0x34
   1f242:	4605      	mov	r5, r0
   1f244:	460e      	mov	r6, r1
   1f246:	4692      	mov	sl, r2
   1f248:	4699      	mov	r9, r3
	const struct in6_addr *src;
	struct net_pkt *pkt;

	src = net_if_ipv6_select_src_addr(iface, dst);
   1f24a:	f7fc fe3b 	bl	1bec4 <net_if_ipv6_select_src_addr>
   1f24e:	4680      	mov	r8, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1f250:	686b      	ldr	r3, [r5, #4]
   1f252:	689b      	ldr	r3, [r3, #8]
   1f254:	4631      	mov	r1, r6
   1f256:	4628      	mov	r0, r5
   1f258:	4798      	blx	r3

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1f25a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f25e:	f7fe fa5b 	bl	1d718 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt, src, dst, iface, IPPROTO_ICMPV6);
   1f262:	273a      	movs	r7, #58	; 0x3a
   1f264:	9700      	str	r7, [sp, #0]
   1f266:	462b      	mov	r3, r5
   1f268:	4632      	mov	r2, r6
   1f26a:	4641      	mov	r1, r8
   1f26c:	f000 fcc1 	bl	1fbf2 <net_ipv6_create_raw>
   1f270:	4604      	mov	r4, r0
	pkt->family = family;
   1f272:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1f276:	220a      	movs	r2, #10
   1f278:	f362 03c6 	bfi	r3, r2, #3, #4
   1f27c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	pkt->iface = iface;
   1f280:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f282:	7d6b      	ldrb	r3, [r5, #21]
   1f284:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f288:	7d6b      	ldrb	r3, [r5, #21]
   1f28a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   1f28e:	aa0c      	add	r2, sp, #48	; 0x30
   1f290:	2380      	movs	r3, #128	; 0x80
   1f292:	f802 3d23 	strb.w	r3, [r2, #-35]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f29a:	2101      	movs	r1, #1
   1f29c:	f7fe fbe5 	bl	1da6a <net_pkt_append>
   1f2a0:	f04f 0b00 	mov.w	fp, #0
   1f2a4:	aa0c      	add	r2, sp, #48	; 0x30
   1f2a6:	f802 bd24 	strb.w	fp, [r2, #-36]!
   1f2aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f2ae:	2101      	movs	r1, #1
   1f2b0:	4620      	mov	r0, r4
   1f2b2:	f7fe fbda 	bl	1da6a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f2b6:	ad0c      	add	r5, sp, #48	; 0x30
   1f2b8:	f825 bd22 	strh.w	fp, [r5, #-34]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f2bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f2c0:	462a      	mov	r2, r5
   1f2c2:	2102      	movs	r1, #2
   1f2c4:	4620      	mov	r0, r4
   1f2c6:	f7fe fbd0 	bl	1da6a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f2ca:	ea4f 221a 	mov.w	r2, sl, lsr #8
   1f2ce:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
   1f2d2:	f8ad 200e 	strh.w	r2, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f2d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f2da:	462a      	mov	r2, r5
   1f2dc:	2102      	movs	r1, #2
   1f2de:	4620      	mov	r0, r4
   1f2e0:	f7fe fbc3 	bl	1da6a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f2e4:	ea4f 2319 	mov.w	r3, r9, lsr #8
   1f2e8:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   1f2ec:	f8ad 300e 	strh.w	r3, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f2f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f2f4:	462a      	mov	r2, r5
   1f2f6:	2102      	movs	r1, #2
   1f2f8:	4620      	mov	r0, r4
   1f2fa:	f7fe fbb6 	bl	1da6a <net_pkt_append>
	return pkt->frags->data;
   1f2fe:	68a3      	ldr	r3, [r4, #8]
   1f300:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_pkt_append_u8(pkt, 0);   /* code */
	net_pkt_append_be16(pkt, 0); /* checksum */
	net_pkt_append_be16(pkt, identifier);
	net_pkt_append_be16(pkt, sequence);

	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1f304:	ad04      	add	r5, sp, #16
   1f306:	f8d8 0000 	ldr.w	r0, [r8]
   1f30a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1f30e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1f312:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1f316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f318:	ad04      	add	r5, sp, #16
   1f31a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f31c:	f8cc 0008 	str.w	r0, [ip, #8]
   1f320:	f8cc 100c 	str.w	r1, [ip, #12]
   1f324:	f8cc 2010 	str.w	r2, [ip, #16]
   1f328:	f8cc 3014 	str.w	r3, [ip, #20]
   1f32c:	68a3      	ldr	r3, [r4, #8]
   1f32e:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1f332:	ad08      	add	r5, sp, #32
   1f334:	6830      	ldr	r0, [r6, #0]
   1f336:	6871      	ldr	r1, [r6, #4]
   1f338:	68b2      	ldr	r2, [r6, #8]
   1f33a:	68f3      	ldr	r3, [r6, #12]
   1f33c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f33e:	ad08      	add	r5, sp, #32
   1f340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f342:	f8ce 0018 	str.w	r0, [lr, #24]
   1f346:	f8ce 101c 	str.w	r1, [lr, #28]
   1f34a:	f8ce 2020 	str.w	r2, [lr, #32]
   1f34e:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24

	/* Clear and then set the chksum */
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1f352:	68a1      	ldr	r1, [r4, #8]
   1f354:	4620      	mov	r0, r4
   1f356:	f7ff fb07 	bl	1e968 <net_icmpv6_set_chksum>

	if (net_ipv6_finalize_raw(pkt, IPPROTO_ICMPV6) < 0) {
   1f35a:	4639      	mov	r1, r7
   1f35c:	4620      	mov	r0, r4
   1f35e:	f000 fce6 	bl	1fd2e <net_ipv6_finalize_raw>
   1f362:	4558      	cmp	r0, fp
   1f364:	db0c      	blt.n	1f380 <net_icmpv6_send_echo_request+0x144>
			" from %s to %s", NET_ICMPV6_ECHO_REQUEST,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1f366:	4620      	mov	r0, r4
   1f368:	f7fb fe46 	bl	1aff8 <net_send_data>
   1f36c:	4558      	cmp	r0, fp
   1f36e:	db07      	blt.n	1f380 <net_icmpv6_send_echo_request+0x144>
	net_stats.icmp.sent++;
   1f370:	4a08      	ldr	r2, [pc, #32]	; (1f394 <net_icmpv6_send_echo_request+0x158>)
   1f372:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1f374:	3301      	adds	r3, #1
   1f376:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1f378:	4658      	mov	r0, fp
drop:
	net_pkt_unref(pkt);
	net_stats_update_icmp_drop();

	return -EIO;
}
   1f37a:	b00d      	add	sp, #52	; 0x34
   1f37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_pkt_unref(pkt);
   1f380:	4620      	mov	r0, r4
   1f382:	f7fe fa3a 	bl	1d7fa <net_pkt_unref>
	net_stats.icmp.drop++;
   1f386:	4a03      	ldr	r2, [pc, #12]	; (1f394 <net_icmpv6_send_echo_request+0x158>)
   1f388:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f38a:	3301      	adds	r3, #1
   1f38c:	63d3      	str	r3, [r2, #60]	; 0x3c
	return -EIO;
   1f38e:	f06f 0004 	mvn.w	r0, #4
   1f392:	e7f2      	b.n	1f37a <net_icmpv6_send_echo_request+0x13e>
   1f394:	20002b58 	.word	0x20002b58

0001f398 <net_icmpv6_input>:

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   1f398:	b538      	push	{r3, r4, r5, lr}
	net_stats.icmp.recv++;
   1f39a:	4c12      	ldr	r4, [pc, #72]	; (1f3e4 <net_icmpv6_input+0x4c>)
   1f39c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f39e:	3301      	adds	r3, #1
   1f3a0:	6363      	str	r3, [r4, #52]	; 0x34
	return list->head;
   1f3a2:	4b11      	ldr	r3, [pc, #68]	; (1f3e8 <net_icmpv6_input+0x50>)
   1f3a4:	681b      	ldr	r3, [r3, #0]
   1f3a6:	e005      	b.n	1f3b4 <net_icmpv6_input+0x1c>
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv();

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1f3a8:	461d      	mov	r5, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1f3aa:	b17b      	cbz	r3, 1f3cc <net_icmpv6_input+0x34>
	return node->next;
   1f3ac:	681c      	ldr	r4, [r3, #0]
   1f3ae:	b18c      	cbz	r4, 1f3d4 <net_icmpv6_input+0x3c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1f3b0:	b175      	cbz	r5, 1f3d0 <net_icmpv6_input+0x38>
	return node->next;
   1f3b2:	681b      	ldr	r3, [r3, #0]
   1f3b4:	b183      	cbz	r3, 1f3d8 <net_icmpv6_input+0x40>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1f3b6:	791c      	ldrb	r4, [r3, #4]
   1f3b8:	428c      	cmp	r4, r1
   1f3ba:	d1f5      	bne.n	1f3a8 <net_icmpv6_input+0x10>
   1f3bc:	795c      	ldrb	r4, [r3, #5]
   1f3be:	4294      	cmp	r4, r2
   1f3c0:	d001      	beq.n	1f3c6 <net_icmpv6_input+0x2e>
   1f3c2:	2c00      	cmp	r4, #0
   1f3c4:	d1f0      	bne.n	1f3a8 <net_icmpv6_input+0x10>
			return cb->handler(pkt);
   1f3c6:	689b      	ldr	r3, [r3, #8]
   1f3c8:	4798      	blx	r3
   1f3ca:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1f3cc:	461c      	mov	r4, r3
   1f3ce:	e7ee      	b.n	1f3ae <net_icmpv6_input+0x16>
   1f3d0:	2300      	movs	r3, #0
   1f3d2:	e7ef      	b.n	1f3b4 <net_icmpv6_input+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1f3d4:	2300      	movs	r3, #0
   1f3d6:	e7ed      	b.n	1f3b4 <net_icmpv6_input+0x1c>
	net_stats.icmp.drop++;
   1f3d8:	4a02      	ldr	r2, [pc, #8]	; (1f3e4 <net_icmpv6_input+0x4c>)
   1f3da:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f3dc:	3301      	adds	r3, #1
   1f3de:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
	}

	net_stats_update_icmp_drop();

	return NET_DROP;
   1f3e0:	2002      	movs	r0, #2
}
   1f3e2:	bd38      	pop	{r3, r4, r5, pc}
   1f3e4:	20002b58 	.word	0x20002b58
   1f3e8:	20001f84 	.word	0x20001f84

0001f3ec <net_icmpv6_init>:
	.code = 0,
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
   1f3ec:	b508      	push	{r3, lr}
	net_icmpv6_register_handler(&echo_request_handler);
   1f3ee:	4802      	ldr	r0, [pc, #8]	; (1f3f8 <net_icmpv6_init+0xc>)
   1f3f0:	f7ff fa8a 	bl	1e908 <net_icmpv6_register_handler>
   1f3f4:	bd08      	pop	{r3, pc}
   1f3f6:	bf00      	nop
   1f3f8:	2000bf30 	.word	0x2000bf30

0001f3fc <net_nbr_unref>:
void net_nbr_unref_debug(struct net_nbr *nbr, const char *caller, int line)
#define net_nbr_unref(nbr) net_nbr_unref_debug(nbr, __func__, __LINE__)
#else
void net_nbr_unref(struct net_nbr *nbr)
#endif
{
   1f3fc:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref - 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref - 1);
#endif
	if (--nbr->ref) {
   1f3fe:	7803      	ldrb	r3, [r0, #0]
   1f400:	3b01      	subs	r3, #1
   1f402:	b2db      	uxtb	r3, r3
   1f404:	7003      	strb	r3, [r0, #0]
   1f406:	b913      	cbnz	r3, 1f40e <net_nbr_unref+0x12>
		return;
	}

	if (nbr->remove) {
   1f408:	6903      	ldr	r3, [r0, #16]
   1f40a:	b103      	cbz	r3, 1f40e <net_nbr_unref+0x12>
		nbr->remove(nbr);
   1f40c:	4798      	blx	r3
   1f40e:	bd08      	pop	{r3, pc}

0001f410 <net_nbr_ref>:
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref + 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref + 1);
#endif
	nbr->ref++;
   1f410:	7803      	ldrb	r3, [r0, #0]
   1f412:	3301      	adds	r3, #1
   1f414:	7003      	strb	r3, [r0, #0]

	return nbr;
}
   1f416:	4770      	bx	lr

0001f418 <net_nbr_get>:

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   1f418:	2100      	movs	r1, #0
   1f41a:	8903      	ldrh	r3, [r0, #8]
   1f41c:	4299      	cmp	r1, r3
   1f41e:	da17      	bge.n	1f450 <net_nbr_get+0x38>
{
   1f420:	b510      	push	{r4, lr}
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   1f422:	6802      	ldr	r2, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   1f424:	8853      	ldrh	r3, [r2, #2]
   1f426:	8894      	ldrh	r4, [r2, #4]
   1f428:	4423      	add	r3, r4
   1f42a:	3314      	adds	r3, #20
   1f42c:	fb03 f301 	mul.w	r3, r3, r1
	return (struct net_nbr *)((void *)start +
   1f430:	18d4      	adds	r4, r2, r3

		if (!nbr->ref) {
   1f432:	5cd3      	ldrb	r3, [r2, r3]
   1f434:	b12b      	cbz	r3, 1f442 <net_nbr_get+0x2a>
	for (i = 0; i < table->nbr_count; i++) {
   1f436:	3101      	adds	r1, #1
   1f438:	8903      	ldrh	r3, [r0, #8]
   1f43a:	4299      	cmp	r1, r3
   1f43c:	dbf1      	blt.n	1f422 <net_nbr_get+0xa>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   1f43e:	2000      	movs	r0, #0
}
   1f440:	bd10      	pop	{r4, pc}
			nbr->data = nbr->__nbr;
   1f442:	f104 0314 	add.w	r3, r4, #20
   1f446:	60e3      	str	r3, [r4, #12]
			return net_nbr_ref(nbr);
   1f448:	4620      	mov	r0, r4
   1f44a:	f7ff ffe1 	bl	1f410 <net_nbr_ref>
   1f44e:	bd10      	pop	{r4, pc}
	return NULL;
   1f450:	2000      	movs	r0, #0
   1f452:	4770      	bx	lr

0001f454 <net_nbr_link>:
int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1f454:	7843      	ldrb	r3, [r0, #1]
   1f456:	2bff      	cmp	r3, #255	; 0xff
   1f458:	d158      	bne.n	1f50c <net_nbr_link+0xb8>
{
   1f45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f45e:	4690      	mov	r8, r2
   1f460:	460f      	mov	r7, r1
   1f462:	4606      	mov	r6, r0
   1f464:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f468:	2400      	movs	r4, #0
   1f46a:	e008      	b.n	1f47e <net_nbr_link+0x2a>
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1f46c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1f470:	4b2a      	ldr	r3, [pc, #168]	; (1f51c <net_nbr_link+0xc8>)
   1f472:	4413      	add	r3, r2
   1f474:	7a1b      	ldrb	r3, [r3, #8]
   1f476:	b933      	cbnz	r3, 1f486 <net_nbr_link+0x32>
			avail = i;
   1f478:	4625      	mov	r5, r4
   1f47a:	e004      	b.n	1f486 <net_nbr_link+0x32>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f47c:	3401      	adds	r4, #1
   1f47e:	2c07      	cmp	r4, #7
   1f480:	dc1e      	bgt.n	1f4c0 <net_nbr_link+0x6c>
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1f482:	2d00      	cmp	r5, #0
   1f484:	dbf2      	blt.n	1f46c <net_nbr_link+0x18>
		}

		if (net_neighbor_lladdr[i].ref &&
   1f486:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1f48a:	4b24      	ldr	r3, [pc, #144]	; (1f51c <net_nbr_link+0xc8>)
   1f48c:	4413      	add	r3, r2
   1f48e:	7a1b      	ldrb	r3, [r3, #8]
   1f490:	2b00      	cmp	r3, #0
   1f492:	d0f3      	beq.n	1f47c <net_nbr_link+0x28>
		    !memcmp(lladdr->addr,
			    net_neighbor_lladdr[i].lladdr.addr,
   1f494:	4921      	ldr	r1, [pc, #132]	; (1f51c <net_nbr_link+0xc8>)
   1f496:	4411      	add	r1, r2
		    !memcmp(lladdr->addr,
   1f498:	f898 2004 	ldrb.w	r2, [r8, #4]
   1f49c:	3102      	adds	r1, #2
   1f49e:	f8d8 0000 	ldr.w	r0, [r8]
   1f4a2:	f00b f9a5 	bl	2a7f0 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   1f4a6:	4603      	mov	r3, r0
   1f4a8:	2800      	cmp	r0, #0
   1f4aa:	d1e7      	bne.n	1f47c <net_nbr_link+0x28>
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   1f4ac:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
   1f4b0:	4a1a      	ldr	r2, [pc, #104]	; (1f51c <net_nbr_link+0xc8>)
   1f4b2:	440a      	add	r2, r1
   1f4b4:	7a11      	ldrb	r1, [r2, #8]
   1f4b6:	3101      	adds	r1, #1
   1f4b8:	7211      	strb	r1, [r2, #8]

			nbr->idx = i;
   1f4ba:	7074      	strb	r4, [r6, #1]
			nbr->iface = iface;
   1f4bc:	60b7      	str	r7, [r6, #8]

			return 0;
   1f4be:	e019      	b.n	1f4f4 <net_nbr_link+0xa0>
		}
	}

	if (avail < 0) {
   1f4c0:	2d00      	cmp	r5, #0
   1f4c2:	db27      	blt.n	1f514 <net_nbr_link+0xc0>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
   1f4c4:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   1f4c8:	4b14      	ldr	r3, [pc, #80]	; (1f51c <net_nbr_link+0xc8>)
   1f4ca:	4413      	add	r3, r2
   1f4cc:	7a1a      	ldrb	r2, [r3, #8]
   1f4ce:	3201      	adds	r2, #1
   1f4d0:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   1f4d2:	7075      	strb	r5, [r6, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   1f4d4:	f8d8 1000 	ldr.w	r1, [r8]
   1f4d8:	f898 2004 	ldrb.w	r2, [r8, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1f4dc:	b109      	cbz	r1, 1f4e2 <net_nbr_link+0x8e>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1f4de:	2a06      	cmp	r2, #6
   1f4e0:	d90b      	bls.n	1f4fa <net_nbr_link+0xa6>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   1f4e2:	f898 2004 	ldrb.w	r2, [r8, #4]
   1f4e6:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1f4ea:	4b0c      	ldr	r3, [pc, #48]	; (1f51c <net_nbr_link+0xc8>)
   1f4ec:	441d      	add	r5, r3
   1f4ee:	706a      	strb	r2, [r5, #1]

	nbr->iface = iface;
   1f4f0:	60b7      	str	r7, [r6, #8]

	return 0;
   1f4f2:	2300      	movs	r3, #0
}
   1f4f4:	4618      	mov	r0, r3
   1f4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
   1f4fa:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1f4fe:	4807      	ldr	r0, [pc, #28]	; (1f51c <net_nbr_link+0xc8>)
   1f500:	4418      	add	r0, r3
   1f502:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1f504:	3002      	adds	r0, #2
   1f506:	f7e0 fedb 	bl	2c0 <memcpy>
   1f50a:	e7ea      	b.n	1f4e2 <net_nbr_link+0x8e>
		return -EALREADY;
   1f50c:	f06f 0377 	mvn.w	r3, #119	; 0x77
}
   1f510:	4618      	mov	r0, r3
   1f512:	4770      	bx	lr
		return -ENOENT;
   1f514:	f06f 0301 	mvn.w	r3, #1
   1f518:	e7ec      	b.n	1f4f4 <net_nbr_link+0xa0>
   1f51a:	bf00      	nop
   1f51c:	20001f8c 	.word	0x20001f8c

0001f520 <net_nbr_get_lladdr>:
{
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
   1f520:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1f524:	4b01      	ldr	r3, [pc, #4]	; (1f52c <net_nbr_get_lladdr+0xc>)
   1f526:	4418      	add	r0, r3
   1f528:	4770      	bx	lr
   1f52a:	bf00      	nop
   1f52c:	20001f8c 	.word	0x20001f8c

0001f530 <ipv6_nbr_set_state>:
	bool is_router;
};

static inline struct net_ipv6_nbr_data *net_ipv6_nbr_data(struct net_nbr *nbr)
{
	return (struct net_ipv6_nbr_data *)nbr->data;
   1f530:	68c2      	ldr	r2, [r0, #12]
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   1f532:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
   1f536:	428b      	cmp	r3, r1
   1f538:	d003      	beq.n	1f542 <ipv6_nbr_set_state+0x12>
   1f53a:	2b05      	cmp	r3, #5
   1f53c:	d001      	beq.n	1f542 <ipv6_nbr_set_state+0x12>

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   1f53e:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
   1f542:	4770      	bx	lr

0001f544 <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
   1f544:	b570      	push	{r4, r5, r6, lr}
   1f546:	4605      	mov	r5, r0
   1f548:	460e      	mov	r6, r1
	struct iface_cb_data *data = user_data;
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f54a:	2400      	movs	r4, #0
   1f54c:	e000      	b.n	1f550 <iface_cb+0xc>
   1f54e:	3401      	adds	r4, #1
   1f550:	2c07      	cmp	r4, #7
   1f552:	dc0c      	bgt.n	1f56e <iface_cb+0x2a>
	return &net_neighbor_pool[idx].nbr;
   1f554:	4a06      	ldr	r2, [pc, #24]	; (1f570 <iface_cb+0x2c>)
   1f556:	01e3      	lsls	r3, r4, #7
   1f558:	18d0      	adds	r0, r2, r3
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
   1f55a:	5cd3      	ldrb	r3, [r2, r3]
   1f55c:	2b00      	cmp	r3, #0
   1f55e:	d0f6      	beq.n	1f54e <iface_cb+0xa>
   1f560:	6883      	ldr	r3, [r0, #8]
   1f562:	42ab      	cmp	r3, r5
   1f564:	d1f3      	bne.n	1f54e <iface_cb+0xa>
			continue;
		}

		data->cb(nbr, data->user_data);
   1f566:	6833      	ldr	r3, [r6, #0]
   1f568:	6871      	ldr	r1, [r6, #4]
   1f56a:	4798      	blx	r3
   1f56c:	e7ef      	b.n	1f54e <iface_cb+0xa>
	}
}
   1f56e:	bd70      	pop	{r4, r5, r6, pc}
   1f570:	2000bf60 	.word	0x2000bf60

0001f574 <iface_cb>:

	return "<unknown type>";
}

static void iface_cb(struct net_if *iface, void *user_data)
{
   1f574:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f576:	b085      	sub	sp, #20
   1f578:	4605      	mov	r5, r0
	const char *extra;
	int i, count;

	ARG_UNUSED(user_data);

	printk("\nInterface %p (%s)\n", iface, iface2str(iface, &extra));
   1f57a:	a903      	add	r1, sp, #12
   1f57c:	f004 ff0a 	bl	24394 <iface2str>
   1f580:	4602      	mov	r2, r0
   1f582:	4629      	mov	r1, r5
   1f584:	4885      	ldr	r0, [pc, #532]	; (1f79c <iface_cb+0x228>)
   1f586:	f7e3 fd17 	bl	2fb8 <printk>
	printk("=======================%s\n", extra);
   1f58a:	9903      	ldr	r1, [sp, #12]
   1f58c:	4884      	ldr	r0, [pc, #528]	; (1f7a0 <iface_cb+0x22c>)
   1f58e:	f7e3 fd13 	bl	2fb8 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f592:	f3bf 8f5b 	dmb	ish
   1f596:	68eb      	ldr	r3, [r5, #12]
   1f598:	f3bf 8f5b 	dmb	ish

	if (!net_if_is_up(iface)) {
   1f59c:	f013 0f01 	tst.w	r3, #1
   1f5a0:	d014      	beq.n	1f5cc <iface_cb+0x58>
#if NET_LOG_ENABLED > 0
static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   1f5a2:	2318      	movs	r3, #24
   1f5a4:	4a7f      	ldr	r2, [pc, #508]	; (1f7a4 <iface_cb+0x230>)
   1f5a6:	7d29      	ldrb	r1, [r5, #20]
   1f5a8:	6928      	ldr	r0, [r5, #16]
   1f5aa:	f7fe fd45 	bl	1e038 <net_sprint_ll_addr_buf>
		printk("Interface is down.\n");
		return;
	}

	printk("Link addr : %s\n", net_sprint_ll_addr(iface->link_addr.addr,
   1f5ae:	4601      	mov	r1, r0
   1f5b0:	487d      	ldr	r0, [pc, #500]	; (1f7a8 <iface_cb+0x234>)
   1f5b2:	f7e3 fd01 	bl	2fb8 <printk>
						      iface->link_addr.len));
	printk("MTU       : %d\n", iface->mtu);
   1f5b6:	8d29      	ldrh	r1, [r5, #40]	; 0x28
   1f5b8:	487c      	ldr	r0, [pc, #496]	; (1f7ac <iface_cb+0x238>)
   1f5ba:	f7e3 fcfd 	bl	2fb8 <printk>

#if defined(CONFIG_NET_IPV6)
	count = 0;

	printk("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   1f5be:	2103      	movs	r1, #3
   1f5c0:	487b      	ldr	r0, [pc, #492]	; (1f7b0 <iface_cb+0x23c>)
   1f5c2:	f7e3 fcf9 	bl	2fb8 <printk>
	count = 0;
   1f5c6:	2700      	movs	r7, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f5c8:	463c      	mov	r4, r7
   1f5ca:	e02e      	b.n	1f62a <iface_cb+0xb6>
		printk("Interface is down.\n");
   1f5cc:	4879      	ldr	r0, [pc, #484]	; (1f7b4 <iface_cb+0x240>)
   1f5ce:	f7e3 fcf3 	bl	2fb8 <printk>
   1f5d2:	e0db      	b.n	1f78c <iface_cb+0x218>
		return "<unknown type>";
   1f5d4:	4a78      	ldr	r2, [pc, #480]	; (1f7b8 <iface_cb+0x244>)
   1f5d6:	e006      	b.n	1f5e6 <iface_cb+0x72>
		return "DHCP";
   1f5d8:	4a78      	ldr	r2, [pc, #480]	; (1f7bc <iface_cb+0x248>)
   1f5da:	e004      	b.n	1f5e6 <iface_cb+0x72>
		return "manual";
   1f5dc:	4a78      	ldr	r2, [pc, #480]	; (1f7c0 <iface_cb+0x24c>)
   1f5de:	e002      	b.n	1f5e6 <iface_cb+0x72>
	return "<invalid type>";
   1f5e0:	4a78      	ldr	r2, [pc, #480]	; (1f7c4 <iface_cb+0x250>)
   1f5e2:	e000      	b.n	1f5e6 <iface_cb+0x72>
		return "autoconf";
   1f5e4:	4a78      	ldr	r2, [pc, #480]	; (1f7c8 <iface_cb+0x254>)

		if (!unicast->is_used) {
			continue;
		}

		printk("\t%s %s %s%s\n",
   1f5e6:	236c      	movs	r3, #108	; 0x6c
   1f5e8:	fb03 5304 	mla	r3, r3, r4, r5
   1f5ec:	f993 3091 	ldrsb.w	r3, [r3, #145]	; 0x91
	switch (addr_state) {
   1f5f0:	3301      	adds	r3, #1
   1f5f2:	2b03      	cmp	r3, #3
   1f5f4:	d809      	bhi.n	1f60a <iface_cb+0x96>
   1f5f6:	e8df f003 	tbb	[pc, r3]
   1f5fa:	0a02      	.short	0x0a02
   1f5fc:	0604      	.short	0x0604
		return "<unknown state>";
   1f5fe:	4b73      	ldr	r3, [pc, #460]	; (1f7cc <iface_cb+0x258>)
   1f600:	e006      	b.n	1f610 <iface_cb+0x9c>
		return "preferred";
   1f602:	4b73      	ldr	r3, [pc, #460]	; (1f7d0 <iface_cb+0x25c>)
   1f604:	e004      	b.n	1f610 <iface_cb+0x9c>
		return "deprecated";
   1f606:	4b73      	ldr	r3, [pc, #460]	; (1f7d4 <iface_cb+0x260>)
   1f608:	e002      	b.n	1f610 <iface_cb+0x9c>
	return "<invalid state>";
   1f60a:	4b73      	ldr	r3, [pc, #460]	; (1f7d8 <iface_cb+0x264>)
   1f60c:	e000      	b.n	1f610 <iface_cb+0x9c>
		return "tentative";
   1f60e:	4b73      	ldr	r3, [pc, #460]	; (1f7dc <iface_cb+0x268>)
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
		       addrtype2str(unicast->addr_type),
		       addrstate2str(unicast->addr_state),
		       unicast->is_infinite ? " infinite" : "");
   1f610:	266c      	movs	r6, #108	; 0x6c
   1f612:	fb06 5604 	mla	r6, r6, r4, r5
   1f616:	f896 0093 	ldrb.w	r0, [r6, #147]	; 0x93
		printk("\t%s %s %s%s\n",
   1f61a:	b368      	cbz	r0, 1f678 <iface_cb+0x104>
   1f61c:	4870      	ldr	r0, [pc, #448]	; (1f7e0 <iface_cb+0x26c>)
   1f61e:	9000      	str	r0, [sp, #0]
   1f620:	4870      	ldr	r0, [pc, #448]	; (1f7e4 <iface_cb+0x270>)
   1f622:	f7e3 fcc9 	bl	2fb8 <printk>
		count++;
   1f626:	3701      	adds	r7, #1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f628:	3401      	adds	r4, #1
   1f62a:	2c02      	cmp	r4, #2
   1f62c:	dc26      	bgt.n	1f67c <iface_cb+0x108>
		if (!unicast->is_used) {
   1f62e:	236c      	movs	r3, #108	; 0x6c
   1f630:	fb03 5304 	mla	r3, r3, r4, r5
   1f634:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1f638:	2b00      	cmp	r3, #0
   1f63a:	d0f5      	beq.n	1f628 <iface_cb+0xb4>
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
   1f63c:	266c      	movs	r6, #108	; 0x6c
   1f63e:	fb06 f604 	mul.w	r6, r6, r4
   1f642:	f106 0120 	add.w	r1, r6, #32
   1f646:	4429      	add	r1, r5
static inline char *net_sprint_ipv6_addr(const struct in6_addr *addr)
{
#if defined(CONFIG_NET_IPV6)
	static char buf[NET_IPV6_ADDR_LEN];

	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   1f648:	2328      	movs	r3, #40	; 0x28
   1f64a:	4a67      	ldr	r2, [pc, #412]	; (1f7e8 <iface_cb+0x274>)
   1f64c:	3110      	adds	r1, #16
   1f64e:	200a      	movs	r0, #10
   1f650:	f7fe fd1c 	bl	1e08c <net_addr_ntop>
   1f654:	4601      	mov	r1, r0
		printk("\t%s %s %s%s\n",
   1f656:	442e      	add	r6, r5
   1f658:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
	switch (addr_type) {
   1f65c:	2b03      	cmp	r3, #3
   1f65e:	d8bf      	bhi.n	1f5e0 <iface_cb+0x6c>
   1f660:	a201      	add	r2, pc, #4	; (adr r2, 1f668 <iface_cb+0xf4>)
   1f662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f666:	bf00      	nop
   1f668:	0001f5d5 	.word	0x0001f5d5
   1f66c:	0001f5e5 	.word	0x0001f5e5
   1f670:	0001f5d9 	.word	0x0001f5d9
   1f674:	0001f5dd 	.word	0x0001f5dd
		printk("\t%s %s %s%s\n",
   1f678:	485c      	ldr	r0, [pc, #368]	; (1f7ec <iface_cb+0x278>)
   1f67a:	e7d0      	b.n	1f61e <iface_cb+0xaa>
	}

	if (count == 0) {
   1f67c:	b137      	cbz	r7, 1f68c <iface_cb+0x118>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   1f67e:	2105      	movs	r1, #5
   1f680:	485b      	ldr	r0, [pc, #364]	; (1f7f0 <iface_cb+0x27c>)
   1f682:	f7e3 fc99 	bl	2fb8 <printk>
	count = 0;
   1f686:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f688:	4634      	mov	r4, r6
   1f68a:	e004      	b.n	1f696 <iface_cb+0x122>
		printk("\t<none>\n");
   1f68c:	4859      	ldr	r0, [pc, #356]	; (1f7f4 <iface_cb+0x280>)
   1f68e:	f7e3 fc93 	bl	2fb8 <printk>
   1f692:	e7f4      	b.n	1f67e <iface_cb+0x10a>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f694:	3401      	adds	r4, #1
   1f696:	2c04      	cmp	r4, #4
   1f698:	dc18      	bgt.n	1f6cc <iface_cb+0x158>
		mcast = &iface->ipv6.mcast[i];

		if (!mcast->is_used) {
   1f69a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1f69e:	00d3      	lsls	r3, r2, #3
   1f6a0:	461a      	mov	r2, r3
   1f6a2:	442b      	add	r3, r5
   1f6a4:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1f6a8:	f013 0f01 	tst.w	r3, #1
   1f6ac:	d0f2      	beq.n	1f694 <iface_cb+0x120>
			continue;
		}

		printk("\t%s\n",
		       net_sprint_ipv6_addr(&mcast->address.in6_addr));
   1f6ae:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1f6b2:	4429      	add	r1, r5
   1f6b4:	2328      	movs	r3, #40	; 0x28
   1f6b6:	4a4c      	ldr	r2, [pc, #304]	; (1f7e8 <iface_cb+0x274>)
   1f6b8:	3118      	adds	r1, #24
   1f6ba:	200a      	movs	r0, #10
   1f6bc:	f7fe fce6 	bl	1e08c <net_addr_ntop>
		printk("\t%s\n",
   1f6c0:	4601      	mov	r1, r0
   1f6c2:	484d      	ldr	r0, [pc, #308]	; (1f7f8 <iface_cb+0x284>)
   1f6c4:	f7e3 fc78 	bl	2fb8 <printk>

		count++;
   1f6c8:	3601      	adds	r6, #1
   1f6ca:	e7e3      	b.n	1f694 <iface_cb+0x120>
	}

	if (count == 0) {
   1f6cc:	b136      	cbz	r6, 1f6dc <iface_cb+0x168>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   1f6ce:	2102      	movs	r1, #2
   1f6d0:	484a      	ldr	r0, [pc, #296]	; (1f7fc <iface_cb+0x288>)
   1f6d2:	f7e3 fc71 	bl	2fb8 <printk>
	count = 0;
   1f6d6:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1f6d8:	4634      	mov	r4, r6
   1f6da:	e009      	b.n	1f6f0 <iface_cb+0x17c>
		printk("\t<none>\n");
   1f6dc:	4845      	ldr	r0, [pc, #276]	; (1f7f4 <iface_cb+0x280>)
   1f6de:	f7e3 fc6b 	bl	2fb8 <printk>
   1f6e2:	e7f4      	b.n	1f6ce <iface_cb+0x15a>

		if (!prefix->is_used) {
			continue;
		}

		printk("\t%s/%d%s\n",
   1f6e4:	4b41      	ldr	r3, [pc, #260]	; (1f7ec <iface_cb+0x278>)
   1f6e6:	4846      	ldr	r0, [pc, #280]	; (1f800 <iface_cb+0x28c>)
   1f6e8:	f7e3 fc66 	bl	2fb8 <printk>
		       net_sprint_ipv6_addr(&prefix->prefix),
		       prefix->len,
		       prefix->is_infinite ? " infinite" : "");

		count++;
   1f6ec:	3601      	adds	r6, #1
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1f6ee:	3401      	adds	r4, #1
   1f6f0:	2c01      	cmp	r4, #1
   1f6f2:	dc1e      	bgt.n	1f732 <iface_cb+0x1be>
		if (!prefix->is_used) {
   1f6f4:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1f6f8:	0093      	lsls	r3, r2, #2
   1f6fa:	461a      	mov	r2, r3
   1f6fc:	442b      	add	r3, r5
   1f6fe:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
   1f702:	2b00      	cmp	r3, #0
   1f704:	d0f3      	beq.n	1f6ee <iface_cb+0x17a>
		       net_sprint_ipv6_addr(&prefix->prefix),
   1f706:	0127      	lsls	r7, r4, #4
   1f708:	f502 7100 	add.w	r1, r2, #512	; 0x200
   1f70c:	4429      	add	r1, r5
   1f70e:	2328      	movs	r3, #40	; 0x28
   1f710:	4a35      	ldr	r2, [pc, #212]	; (1f7e8 <iface_cb+0x274>)
   1f712:	3110      	adds	r1, #16
   1f714:	200a      	movs	r0, #10
   1f716:	f7fe fcb9 	bl	1e08c <net_addr_ntop>
   1f71a:	4601      	mov	r1, r0
		       prefix->len,
   1f71c:	1b3f      	subs	r7, r7, r4
   1f71e:	00bb      	lsls	r3, r7, #2
   1f720:	442b      	add	r3, r5
   1f722:	f893 2220 	ldrb.w	r2, [r3, #544]	; 0x220
		       prefix->is_infinite ? " infinite" : "");
   1f726:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
		printk("\t%s/%d%s\n",
   1f72a:	2b00      	cmp	r3, #0
   1f72c:	d0da      	beq.n	1f6e4 <iface_cb+0x170>
   1f72e:	4b2c      	ldr	r3, [pc, #176]	; (1f7e0 <iface_cb+0x26c>)
   1f730:	e7d9      	b.n	1f6e6 <iface_cb+0x172>
	}

	if (count == 0) {
   1f732:	b36e      	cbz	r6, 1f790 <iface_cb+0x21c>
		printk("\t<none>\n");
	}

	router = net_if_ipv6_router_find_default(iface, NULL);
   1f734:	2100      	movs	r1, #0
   1f736:	4628      	mov	r0, r5
   1f738:	f7fc fade 	bl	1bcf8 <net_if_ipv6_router_find_default>
	if (router) {
   1f73c:	4604      	mov	r4, r0
   1f73e:	b188      	cbz	r0, 1f764 <iface_cb+0x1f0>
		printk("IPv6 default router :\n");
   1f740:	4830      	ldr	r0, [pc, #192]	; (1f804 <iface_cb+0x290>)
   1f742:	f7e3 fc39 	bl	2fb8 <printk>
   1f746:	2328      	movs	r3, #40	; 0x28
   1f748:	4a27      	ldr	r2, [pc, #156]	; (1f7e8 <iface_cb+0x274>)
   1f74a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   1f74e:	200a      	movs	r0, #10
   1f750:	f7fe fc9c 	bl	1e08c <net_addr_ntop>
   1f754:	4601      	mov	r1, r0
		printk("\t%s%s\n",
		       net_sprint_ipv6_addr(&router->address.in6_addr),
		       router->is_infinite ? " infinite" : "");
   1f756:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		printk("\t%s%s\n",
   1f75a:	b1eb      	cbz	r3, 1f798 <iface_cb+0x224>
   1f75c:	4a20      	ldr	r2, [pc, #128]	; (1f7e0 <iface_cb+0x26c>)
   1f75e:	482a      	ldr	r0, [pc, #168]	; (1f808 <iface_cb+0x294>)
   1f760:	f7e3 fc2a 	bl	2fb8 <printk>
	}

	printk("IPv6 hop limit           : %d\n", iface->ipv6.hop_limit);
   1f764:	f895 1294 	ldrb.w	r1, [r5, #660]	; 0x294
   1f768:	4828      	ldr	r0, [pc, #160]	; (1f80c <iface_cb+0x298>)
   1f76a:	f7e3 fc25 	bl	2fb8 <printk>
	printk("IPv6 base reachable time : %d\n",
   1f76e:	f8d5 1288 	ldr.w	r1, [r5, #648]	; 0x288
   1f772:	4827      	ldr	r0, [pc, #156]	; (1f810 <iface_cb+0x29c>)
   1f774:	f7e3 fc20 	bl	2fb8 <printk>
	       iface->ipv6.base_reachable_time);
	printk("IPv6 reachable time      : %d\n", iface->ipv6.reachable_time);
   1f778:	f8d5 128c 	ldr.w	r1, [r5, #652]	; 0x28c
   1f77c:	4825      	ldr	r0, [pc, #148]	; (1f814 <iface_cb+0x2a0>)
   1f77e:	f7e3 fc1b 	bl	2fb8 <printk>
	printk("IPv6 retransmit timer    : %d\n", iface->ipv6.retrans_timer);
   1f782:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
   1f786:	4824      	ldr	r0, [pc, #144]	; (1f818 <iface_cb+0x2a4>)
   1f788:	f7e3 fc16 	bl	2fb8 <printk>
	       net_sprint_ipv4_addr(&iface->dhcpv4.requested_ip));
	printk("DHCPv4 state      : %s\n",
	       net_dhcpv4_state_name(iface->dhcpv4.state));
	printk("DHCPv4 attempts   : %d\n", iface->dhcpv4.attempts);
#endif /* CONFIG_NET_DHCPV4 */
}
   1f78c:	b005      	add	sp, #20
   1f78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("\t<none>\n");
   1f790:	4818      	ldr	r0, [pc, #96]	; (1f7f4 <iface_cb+0x280>)
   1f792:	f7e3 fc11 	bl	2fb8 <printk>
   1f796:	e7cd      	b.n	1f734 <iface_cb+0x1c0>
		printk("\t%s%s\n",
   1f798:	4a14      	ldr	r2, [pc, #80]	; (1f7ec <iface_cb+0x278>)
   1f79a:	e7e0      	b.n	1f75e <iface_cb+0x1ea>
   1f79c:	00031e14 	.word	0x00031e14
   1f7a0:	00031fc4 	.word	0x00031fc4
   1f7a4:	20002518 	.word	0x20002518
   1f7a8:	00031e3c 	.word	0x00031e3c
   1f7ac:	00031e4c 	.word	0x00031e4c
   1f7b0:	00031e5c 	.word	0x00031e5c
   1f7b4:	00031e28 	.word	0x00031e28
   1f7b8:	00031d7c 	.word	0x00031d7c
   1f7bc:	00031db4 	.word	0x00031db4
   1f7c0:	00031dbc 	.word	0x00031dbc
   1f7c4:	00031dc4 	.word	0x00031dc4
   1f7c8:	00031da8 	.word	0x00031da8
   1f7cc:	00031dd4 	.word	0x00031dd4
   1f7d0:	00031df0 	.word	0x00031df0
   1f7d4:	00031dfc 	.word	0x00031dfc
   1f7d8:	00031cc8 	.word	0x00031cc8
   1f7dc:	00031de4 	.word	0x00031de4
   1f7e0:	00031e08 	.word	0x00031e08
   1f7e4:	00031e80 	.word	0x00031e80
   1f7e8:	20002530 	.word	0x20002530
   1f7ec:	0002f114 	.word	0x0002f114
   1f7f0:	00031e9c 	.word	0x00031e9c
   1f7f4:	00031e90 	.word	0x00031e90
   1f7f8:	00031ec0 	.word	0x00031ec0
   1f7fc:	00031ec8 	.word	0x00031ec8
   1f800:	00031ee4 	.word	0x00031ee4
   1f804:	00031ef0 	.word	0x00031ef0
   1f808:	00031f08 	.word	0x00031f08
   1f80c:	00031f10 	.word	0x00031f10
   1f810:	00031f30 	.word	0x00031f30
   1f814:	00031f50 	.word	0x00031f50
   1f818:	00031f70 	.word	0x00031f70

0001f81c <net_neighbor_data_remove>:
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
				lladdr, is_router, state);
}

void net_neighbor_data_remove(struct net_nbr *nbr)
{
   1f81c:	4770      	bx	lr

0001f81e <net_neighbor_table_clear>:

	return;
}

void net_neighbor_table_clear(struct net_nbr_table *table)
{
   1f81e:	4770      	bx	lr

0001f820 <nbr_lookup>:
{
   1f820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f822:	460e      	mov	r6, r1
   1f824:	4617      	mov	r7, r2
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f826:	2400      	movs	r4, #0
   1f828:	e000      	b.n	1f82c <nbr_lookup+0xc>
   1f82a:	3401      	adds	r4, #1
   1f82c:	2c07      	cmp	r4, #7
   1f82e:	dc11      	bgt.n	1f854 <nbr_lookup+0x34>
	return &net_neighbor_pool[idx].nbr;
   1f830:	4a0a      	ldr	r2, [pc, #40]	; (1f85c <nbr_lookup+0x3c>)
   1f832:	01e3      	lsls	r3, r4, #7
   1f834:	18d5      	adds	r5, r2, r3
		if (!nbr->ref) {
   1f836:	5cd3      	ldrb	r3, [r2, r3]
   1f838:	2b00      	cmp	r3, #0
   1f83a:	d0f6      	beq.n	1f82a <nbr_lookup+0xa>
		if (nbr->iface == iface &&
   1f83c:	68ab      	ldr	r3, [r5, #8]
   1f83e:	42b3      	cmp	r3, r6
   1f840:	d1f3      	bne.n	1f82a <nbr_lookup+0xa>
   1f842:	68e8      	ldr	r0, [r5, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1f844:	2210      	movs	r2, #16
   1f846:	4639      	mov	r1, r7
   1f848:	3004      	adds	r0, #4
   1f84a:	f00a ffd1 	bl	2a7f0 <memcmp>
   1f84e:	2800      	cmp	r0, #0
   1f850:	d1eb      	bne.n	1f82a <nbr_lookup+0xa>
   1f852:	e000      	b.n	1f856 <nbr_lookup+0x36>
	return NULL;
   1f854:	2500      	movs	r5, #0
}
   1f856:	4628      	mov	r0, r5
   1f858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f85a:	bf00      	nop
   1f85c:	2000bf60 	.word	0x2000bf60

0001f860 <nbr_clear_ns_pending>:
{
   1f860:	b510      	push	{r4, lr}
   1f862:	4604      	mov	r4, r0
	k_delayed_work_cancel(&data->send_ns);
   1f864:	303c      	adds	r0, #60	; 0x3c
   1f866:	f00a fb93 	bl	29f90 <k_delayed_work_cancel>
	if (data->pending) {
   1f86a:	6820      	ldr	r0, [r4, #0]
   1f86c:	b118      	cbz	r0, 1f876 <nbr_clear_ns_pending+0x16>
		net_pkt_unref(data->pending);
   1f86e:	f7fd ffc4 	bl	1d7fa <net_pkt_unref>
		data->pending = NULL;
   1f872:	2300      	movs	r3, #0
   1f874:	6023      	str	r3, [r4, #0]
   1f876:	bd10      	pop	{r4, pc}

0001f878 <ns_reply_timeout>:
{
   1f878:	b538      	push	{r3, r4, r5, lr}
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1f87a:	f1a0 013c 	sub.w	r1, r0, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f87e:	2300      	movs	r3, #0
   1f880:	2b07      	cmp	r3, #7
   1f882:	dc07      	bgt.n	1f894 <ns_reply_timeout+0x1c>
	return &net_neighbor_pool[idx].nbr;
   1f884:	4c0d      	ldr	r4, [pc, #52]	; (1f8bc <ns_reply_timeout+0x44>)
   1f886:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   1f88a:	68e2      	ldr	r2, [r4, #12]
   1f88c:	4291      	cmp	r1, r2
   1f88e:	d002      	beq.n	1f896 <ns_reply_timeout+0x1e>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f890:	3301      	adds	r3, #1
   1f892:	e7f5      	b.n	1f880 <ns_reply_timeout+0x8>
	return NULL;
   1f894:	2400      	movs	r4, #0
	if (!nbr) {
   1f896:	b184      	cbz	r4, 1f8ba <ns_reply_timeout+0x42>
	if (!data->pending) {
   1f898:	f850 3c3c 	ldr.w	r3, [r0, #-60]
   1f89c:	b16b      	cbz	r3, 1f8ba <ns_reply_timeout+0x42>
   1f89e:	4605      	mov	r5, r0
	net_pkt_unref(data->pending);
   1f8a0:	4618      	mov	r0, r3
   1f8a2:	f7fd ffaa 	bl	1d7fa <net_pkt_unref>
	net_pkt_unref(data->pending);
   1f8a6:	f855 0c3c 	ldr.w	r0, [r5, #-60]
   1f8aa:	f7fd ffa6 	bl	1d7fa <net_pkt_unref>
	data->pending = NULL;
   1f8ae:	2300      	movs	r3, #0
   1f8b0:	f845 3c3c 	str.w	r3, [r5, #-60]
	net_nbr_unref(nbr);
   1f8b4:	4620      	mov	r0, r4
   1f8b6:	f7ff fda1 	bl	1f3fc <net_nbr_unref>
   1f8ba:	bd38      	pop	{r3, r4, r5, pc}
   1f8bc:	2000bf60 	.word	0x2000bf60

0001f8c0 <nbr_init>:
{
   1f8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f8c4:	b084      	sub	sp, #16
   1f8c6:	4604      	mov	r4, r0
   1f8c8:	4616      	mov	r6, r2
   1f8ca:	4698      	mov	r8, r3
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1f8cc:	23ff      	movs	r3, #255	; 0xff
   1f8ce:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   1f8d0:	6081      	str	r1, [r0, #8]
   1f8d2:	68c7      	ldr	r7, [r0, #12]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1f8d4:	466d      	mov	r5, sp
   1f8d6:	6810      	ldr	r0, [r2, #0]
   1f8d8:	6851      	ldr	r1, [r2, #4]
   1f8da:	6892      	ldr	r2, [r2, #8]
   1f8dc:	68f3      	ldr	r3, [r6, #12]
   1f8de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f8e0:	466d      	mov	r5, sp
   1f8e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f8e4:	6078      	str	r0, [r7, #4]
   1f8e6:	60b9      	str	r1, [r7, #8]
   1f8e8:	60fa      	str	r2, [r7, #12]
   1f8ea:	613b      	str	r3, [r7, #16]
	ipv6_nbr_set_state(nbr, state);
   1f8ec:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   1f8f0:	4620      	mov	r0, r4
   1f8f2:	f7ff fe1d 	bl	1f530 <ipv6_nbr_set_state>
   1f8f6:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1f8f8:	f883 8069 	strb.w	r8, [r3, #105]	; 0x69
   1f8fc:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1f8fe:	2200      	movs	r2, #0
   1f900:	601a      	str	r2, [r3, #0]
   1f902:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1f904:	4905      	ldr	r1, [pc, #20]	; (1f91c <nbr_init+0x5c>)
   1f906:	3014      	adds	r0, #20
   1f908:	f00a fb24 	bl	29f54 <k_delayed_work_init>
   1f90c:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->send_ns,
   1f90e:	4904      	ldr	r1, [pc, #16]	; (1f920 <nbr_init+0x60>)
   1f910:	303c      	adds	r0, #60	; 0x3c
   1f912:	f00a fb1f 	bl	29f54 <k_delayed_work_init>
}
   1f916:	b004      	add	sp, #16
   1f918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f91c:	0002144d 	.word	0x0002144d
   1f920:	0001f879 	.word	0x0001f879

0001f924 <nbr_new>:
{
   1f924:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f926:	b083      	sub	sp, #12
   1f928:	4605      	mov	r5, r0
   1f92a:	460e      	mov	r6, r1
   1f92c:	461f      	mov	r7, r3
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1f92e:	4807      	ldr	r0, [pc, #28]	; (1f94c <nbr_new+0x28>)
   1f930:	f7ff fd72 	bl	1f418 <net_nbr_get>
	if (!nbr) {
   1f934:	4604      	mov	r4, r0
   1f936:	b128      	cbz	r0, 1f944 <nbr_new+0x20>
	nbr_init(nbr, iface, addr, true, state);
   1f938:	9700      	str	r7, [sp, #0]
   1f93a:	2301      	movs	r3, #1
   1f93c:	4632      	mov	r2, r6
   1f93e:	4629      	mov	r1, r5
   1f940:	f7ff ffbe 	bl	1f8c0 <nbr_init>
}
   1f944:	4620      	mov	r0, r4
   1f946:	b003      	add	sp, #12
   1f948:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f94a:	bf00      	nop
   1f94c:	2000bf54 	.word	0x2000bf54

0001f950 <nbr_new>:
}

static struct net_nbr *nbr_new(struct net_if *iface,
			       struct in6_addr *addr,
			       u8_t prefix_len)
{
   1f950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f954:	b084      	sub	sp, #16
   1f956:	4604      	mov	r4, r0
   1f958:	460e      	mov	r6, r1
   1f95a:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_nbr_routes.table);
   1f95c:	480c      	ldr	r0, [pc, #48]	; (1f990 <nbr_new+0x40>)
   1f95e:	f7ff fd5b 	bl	1f418 <net_nbr_get>

	if (!nbr) {
   1f962:	4605      	mov	r5, r0
   1f964:	b180      	cbz	r0, 1f988 <nbr_new+0x38>
		return NULL;
	}

	nbr->iface = iface;
   1f966:	6084      	str	r4, [r0, #8]
	return (struct net_route_entry *)nbr->data;
   1f968:	68c7      	ldr	r7, [r0, #12]

	net_ipaddr_copy(&net_route_data(nbr)->addr, addr);
   1f96a:	466c      	mov	r4, sp
   1f96c:	6830      	ldr	r0, [r6, #0]
   1f96e:	6871      	ldr	r1, [r6, #4]
   1f970:	68b2      	ldr	r2, [r6, #8]
   1f972:	68f3      	ldr	r3, [r6, #12]
   1f974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f976:	466c      	mov	r4, sp
   1f978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1f97a:	6138      	str	r0, [r7, #16]
   1f97c:	6179      	str	r1, [r7, #20]
   1f97e:	61ba      	str	r2, [r7, #24]
   1f980:	61fb      	str	r3, [r7, #28]
	return (struct net_route_entry *)nbr->data;
   1f982:	68eb      	ldr	r3, [r5, #12]
	net_route_data(nbr)->prefix_len = prefix_len;
   1f984:	f883 8020 	strb.w	r8, [r3, #32]
		nbr->idx, nbr, iface,
		net_sprint_ipv6_addr(&net_route_data(nbr)->addr),
		prefix_len);

	return nbr;
}
   1f988:	4628      	mov	r0, r5
   1f98a:	b004      	add	sp, #16
   1f98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f990:	2000c378 	.word	0x2000c378

0001f994 <update_ll_reserve>:
 * Thus we need to check it here. Note that this cannot happen for IPv4
 * as 802.15.4 supports IPv6 only.
 */
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
					 struct in6_addr *addr)
{
   1f994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f998:	4682      	mov	sl, r0
	return pkt->forwarding;
   1f99a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38

	/* No need to do anything if we are forwarding the packet
	 * as we already know everything about the destination of
	 * the packet.
	 */
	if (net_pkt_forwarding(pkt)) {
   1f99e:	f013 0f04 	tst.w	r3, #4
   1f9a2:	d002      	beq.n	1f9aa <update_ll_reserve+0x16>
			pos = 0;
		}
	}

	return pkt;
}
   1f9a4:	4650      	mov	r0, sl
   1f9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return pkt->iface;
   1f9aa:	6940      	ldr	r0, [r0, #20]
   1f9ac:	6843      	ldr	r3, [r0, #4]
   1f9ae:	689b      	ldr	r3, [r3, #8]
   1f9b0:	4798      	blx	r3
	if (reserve == net_pkt_ll_reserve(pkt)) {
   1f9b2:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
   1f9b6:	4283      	cmp	r3, r0
   1f9b8:	d0f4      	beq.n	1f9a4 <update_ll_reserve+0x10>
	pkt->ll_reserve = len;
   1f9ba:	f88a 0032 	strb.w	r0, [sl, #50]	; 0x32
	orig_frag = pkt->frags;
   1f9be:	f8da 7008 	ldr.w	r7, [sl, #8]
	copy_len = orig_frag->len;
   1f9c2:	89be      	ldrh	r6, [r7, #12]
	pkt->frags = NULL;
   1f9c4:	2400      	movs	r4, #0
   1f9c6:	f8ca 4008 	str.w	r4, [sl, #8]
	frag = NULL;
   1f9ca:	46a1      	mov	r9, r4
	pos = 0;
   1f9cc:	46a0      	mov	r8, r4
	while (orig_frag) {
   1f9ce:	e020      	b.n	1fa12 <update_ll_reserve+0x7e>
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1f9d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f9d4:	4650      	mov	r0, sl
   1f9d6:	f7fd febd 	bl	1d754 <net_pkt_get_frag>
   1f9da:	4681      	mov	r9, r0
			net_pkt_frag_add(pkt, frag);
   1f9dc:	4601      	mov	r1, r0
   1f9de:	4650      	mov	r0, sl
   1f9e0:	f7fd ff35 	bl	1d84e <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   1f9e4:	f109 0008 	add.w	r0, r9, #8
   1f9e8:	f7fb fa4d 	bl	1ae86 <net_buf_simple_tailroom>
   1f9ec:	b284      	uxth	r4, r0
   1f9ee:	e014      	b.n	1fa1a <update_ll_reserve+0x86>
			memcpy(net_buf_add(frag, room_len),
   1f9f0:	4621      	mov	r1, r4
   1f9f2:	f109 0008 	add.w	r0, r9, #8
   1f9f6:	f7fb f9dd 	bl	1adb4 <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   1f9fa:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, room_len),
   1f9fc:	4622      	mov	r2, r4
   1f9fe:	4441      	add	r1, r8
   1fa00:	f7e0 fc5e 	bl	2c0 <memcpy>
			copy_len -= room_len;
   1fa04:	1b36      	subs	r6, r6, r4
   1fa06:	b2b6      	uxth	r6, r6
			pos += room_len;
   1fa08:	4444      	add	r4, r8
   1fa0a:	fa1f f884 	uxth.w	r8, r4
			room_len = 0;
   1fa0e:	2400      	movs	r4, #0
		if (!copy_len) {
   1fa10:	b19e      	cbz	r6, 1fa3a <update_ll_reserve+0xa6>
	while (orig_frag) {
   1fa12:	2f00      	cmp	r7, #0
   1fa14:	d0c6      	beq.n	1f9a4 <update_ll_reserve+0x10>
		if (!room_len) {
   1fa16:	2c00      	cmp	r4, #0
   1fa18:	d0da      	beq.n	1f9d0 <update_ll_reserve+0x3c>
		if (room_len >= copy_len) {
   1fa1a:	42b4      	cmp	r4, r6
   1fa1c:	d3e8      	bcc.n	1f9f0 <update_ll_reserve+0x5c>
			memcpy(net_buf_add(frag, copy_len),
   1fa1e:	4631      	mov	r1, r6
   1fa20:	f109 0008 	add.w	r0, r9, #8
   1fa24:	f7fb f9c6 	bl	1adb4 <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   1fa28:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, copy_len),
   1fa2a:	4632      	mov	r2, r6
   1fa2c:	4441      	add	r1, r8
   1fa2e:	f7e0 fc47 	bl	2c0 <memcpy>
			room_len -= copy_len;
   1fa32:	1ba4      	subs	r4, r4, r6
   1fa34:	b2a4      	uxth	r4, r4
			copy_len = 0;
   1fa36:	2600      	movs	r6, #0
   1fa38:	e7ea      	b.n	1fa10 <update_ll_reserve+0x7c>
			orig_frag = orig_frag->frags;
   1fa3a:	683d      	ldr	r5, [r7, #0]
			tmp->frags = NULL;
   1fa3c:	2300      	movs	r3, #0
   1fa3e:	603b      	str	r3, [r7, #0]
			net_pkt_frag_unref(tmp);
   1fa40:	4638      	mov	r0, r7
   1fa42:	f7fd fed4 	bl	1d7ee <net_pkt_frag_unref>
			if (!orig_frag) {
   1fa46:	2d00      	cmp	r5, #0
   1fa48:	d0ac      	beq.n	1f9a4 <update_ll_reserve+0x10>
			orig_frag = orig_frag->frags;
   1fa4a:	462f      	mov	r7, r5
			pos = 0;
   1fa4c:	46b0      	mov	r8, r6
			copy_len = orig_frag->len;
   1fa4e:	89ae      	ldrh	r6, [r5, #12]
   1fa50:	e7df      	b.n	1fa12 <update_ll_reserve+0x7e>

0001fa52 <setup_headers>:
	       llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   1fa52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fa54:	4604      	mov	r4, r0
   1fa56:	460e      	mov	r6, r1
   1fa58:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   1fa5a:	6880      	ldr	r0, [r0, #8]
   1fa5c:	212c      	movs	r1, #44	; 0x2c
   1fa5e:	3008      	adds	r0, #8
   1fa60:	f7fb f9a8 	bl	1adb4 <net_buf_simple_add>
	return pkt->frags->data;
   1fa64:	68a3      	ldr	r3, [r4, #8]
   1fa66:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1fa68:	2260      	movs	r2, #96	; 0x60
   1fa6a:	701a      	strb	r2, [r3, #0]
   1fa6c:	68a3      	ldr	r3, [r4, #8]
   1fa6e:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1fa70:	2500      	movs	r5, #0
   1fa72:	705d      	strb	r5, [r3, #1]
   1fa74:	68a3      	ldr	r3, [r4, #8]
   1fa76:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1fa78:	709d      	strb	r5, [r3, #2]
   1fa7a:	70dd      	strb	r5, [r3, #3]
   1fa7c:	68a3      	ldr	r3, [r4, #8]
   1fa7e:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[0] = 0;
   1fa80:	711d      	strb	r5, [r3, #4]
   1fa82:	68a3      	ldr	r3, [r4, #8]
   1fa84:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1fa86:	3604      	adds	r6, #4
   1fa88:	715e      	strb	r6, [r3, #5]
   1fa8a:	68a3      	ldr	r3, [r4, #8]
   1fa8c:	689b      	ldr	r3, [r3, #8]

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1fa8e:	223a      	movs	r2, #58	; 0x3a
   1fa90:	719a      	strb	r2, [r3, #6]
   1fa92:	68a3      	ldr	r3, [r4, #8]
   1fa94:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1fa96:	22ff      	movs	r2, #255	; 0xff
   1fa98:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   1fa9a:	4620      	mov	r0, r4
   1fa9c:	f7fe f986 	bl	1ddac <net_pkt_icmp_data>
   1faa0:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   1faa2:	4620      	mov	r0, r4
   1faa4:	f7fe f982 	bl	1ddac <net_pkt_icmp_data>
   1faa8:	7045      	strb	r5, [r0, #1]
   1faaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001faac <nbr_free>:
{
   1faac:	b538      	push	{r3, r4, r5, lr}
   1faae:	4604      	mov	r4, r0
   1fab0:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1fab2:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1fab6:	f00a fa6b 	bl	29f90 <k_delayed_work_cancel>
	if (data->pending) {
   1faba:	6828      	ldr	r0, [r5, #0]
   1fabc:	b118      	cbz	r0, 1fac6 <nbr_free+0x1a>
		net_pkt_unref(data->pending);
   1fabe:	f7fd fe9c 	bl	1d7fa <net_pkt_unref>
		data->pending = NULL;
   1fac2:	2300      	movs	r3, #0
   1fac4:	602b      	str	r3, [r5, #0]
   1fac6:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1fac8:	3014      	adds	r0, #20
   1faca:	f00a fa61 	bl	29f90 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1face:	4620      	mov	r0, r4
   1fad0:	f7ff fc94 	bl	1f3fc <net_nbr_unref>
   1fad4:	bd38      	pop	{r3, r4, r5, pc}
	...

0001fad8 <net_ipv6_nbr_state2str>:
	switch (state) {
   1fad8:	2805      	cmp	r0, #5
   1fada:	d80e      	bhi.n	1fafa <net_ipv6_nbr_state2str+0x22>
   1fadc:	e8df f000 	tbb	[pc, r0]
   1fae0:	07050f03 	.word	0x07050f03
   1fae4:	0b09      	.short	0x0b09
		return "incomplete";
   1fae6:	4807      	ldr	r0, [pc, #28]	; (1fb04 <net_ipv6_nbr_state2str+0x2c>)
   1fae8:	4770      	bx	lr
		return "stale";
   1faea:	4807      	ldr	r0, [pc, #28]	; (1fb08 <net_ipv6_nbr_state2str+0x30>)
   1faec:	4770      	bx	lr
		return "delay";
   1faee:	4807      	ldr	r0, [pc, #28]	; (1fb0c <net_ipv6_nbr_state2str+0x34>)
   1faf0:	4770      	bx	lr
		return "probe";
   1faf2:	4807      	ldr	r0, [pc, #28]	; (1fb10 <net_ipv6_nbr_state2str+0x38>)
   1faf4:	4770      	bx	lr
		return "static";
   1faf6:	4807      	ldr	r0, [pc, #28]	; (1fb14 <net_ipv6_nbr_state2str+0x3c>)
   1faf8:	4770      	bx	lr
	return "<invalid state>";
   1fafa:	4807      	ldr	r0, [pc, #28]	; (1fb18 <net_ipv6_nbr_state2str+0x40>)
   1fafc:	4770      	bx	lr
		return "reachable";
   1fafe:	4807      	ldr	r0, [pc, #28]	; (1fb1c <net_ipv6_nbr_state2str+0x44>)
}
   1fb00:	4770      	bx	lr
   1fb02:	bf00      	nop
   1fb04:	00031c90 	.word	0x00031c90
   1fb08:	00031ca8 	.word	0x00031ca8
   1fb0c:	00031cb0 	.word	0x00031cb0
   1fb10:	00031cb8 	.word	0x00031cb8
   1fb14:	00031cc0 	.word	0x00031cc0
   1fb18:	00031cc8 	.word	0x00031cc8
   1fb1c:	00031c9c 	.word	0x00031c9c

0001fb20 <net_ipv6_nbr_foreach>:
{
   1fb20:	b500      	push	{lr}
   1fb22:	b083      	sub	sp, #12
	struct iface_cb_data cb_data = {
   1fb24:	9000      	str	r0, [sp, #0]
   1fb26:	9101      	str	r1, [sp, #4]
	net_if_foreach(iface_cb, &cb_data);
   1fb28:	4669      	mov	r1, sp
   1fb2a:	4803      	ldr	r0, [pc, #12]	; (1fb38 <net_ipv6_nbr_foreach+0x18>)
   1fb2c:	f7fc fc3a 	bl	1c3a4 <net_if_foreach>
}
   1fb30:	b003      	add	sp, #12
   1fb32:	f85d fb04 	ldr.w	pc, [sp], #4
   1fb36:	bf00      	nop
   1fb38:	0001f545 	.word	0x0001f545

0001fb3c <net_ipv6_nbr_rm>:
{
   1fb3c:	b538      	push	{r3, r4, r5, lr}
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1fb3e:	460a      	mov	r2, r1
   1fb40:	4601      	mov	r1, r0
   1fb42:	480d      	ldr	r0, [pc, #52]	; (1fb78 <net_ipv6_nbr_rm+0x3c>)
   1fb44:	f7ff fe6c 	bl	1f820 <nbr_lookup>
	if (!nbr) {
   1fb48:	b1a0      	cbz	r0, 1fb74 <net_ipv6_nbr_rm+0x38>
   1fb4a:	4604      	mov	r4, r0
   1fb4c:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1fb4e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1fb52:	f00a fa1d 	bl	29f90 <k_delayed_work_cancel>
	if (data->pending) {
   1fb56:	6828      	ldr	r0, [r5, #0]
   1fb58:	b118      	cbz	r0, 1fb62 <net_ipv6_nbr_rm+0x26>
		net_pkt_unref(data->pending);
   1fb5a:	f7fd fe4e 	bl	1d7fa <net_pkt_unref>
		data->pending = NULL;
   1fb5e:	2300      	movs	r3, #0
   1fb60:	602b      	str	r3, [r5, #0]
   1fb62:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1fb64:	3014      	adds	r0, #20
   1fb66:	f00a fa13 	bl	29f90 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1fb6a:	4620      	mov	r0, r4
   1fb6c:	f7ff fc46 	bl	1f3fc <net_nbr_unref>
	return true;
   1fb70:	2001      	movs	r0, #1
   1fb72:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1fb74:	2000      	movs	r0, #0
}
   1fb76:	bd38      	pop	{r3, r4, r5, pc}
   1fb78:	2000bf54 	.word	0x2000bf54

0001fb7c <net_ipv6_unspecified_address>:
}
   1fb7c:	4800      	ldr	r0, [pc, #0]	; (1fb80 <net_ipv6_unspecified_address+0x4>)
   1fb7e:	4770      	bx	lr
   1fb80:	00031c80 	.word	0x00031c80

0001fb84 <create_mldv2>:

static struct net_pkt *create_mldv2(struct net_pkt *pkt,
				    const struct in6_addr *addr,
				    u16_t record_type,
				    u8_t num_sources)
{
   1fb84:	b570      	push	{r4, r5, r6, lr}
   1fb86:	b082      	sub	sp, #8
   1fb88:	4604      	mov	r4, r0
   1fb8a:	460e      	mov	r6, r1
   1fb8c:	461d      	mov	r5, r3
   1fb8e:	a902      	add	r1, sp, #8
   1fb90:	f801 2d03 	strb.w	r2, [r1, #-3]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fb94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fb98:	460a      	mov	r2, r1
   1fb9a:	2101      	movs	r1, #1
   1fb9c:	f7fd ff65 	bl	1da6a <net_pkt_append>
   1fba0:	aa02      	add	r2, sp, #8
   1fba2:	2300      	movs	r3, #0
   1fba4:	f802 3d04 	strb.w	r3, [r2, #-4]!
   1fba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fbac:	2101      	movs	r1, #1
   1fbae:	4620      	mov	r0, r4
   1fbb0:	f7fd ff5b 	bl	1da6a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fbb4:	022b      	lsls	r3, r5, #8
   1fbb6:	aa02      	add	r2, sp, #8
   1fbb8:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fbbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fbc0:	2102      	movs	r1, #2
   1fbc2:	4620      	mov	r0, r4
   1fbc4:	f7fd ff51 	bl	1da6a <net_pkt_append>
   1fbc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fbcc:	4632      	mov	r2, r6
   1fbce:	2110      	movs	r1, #16
   1fbd0:	4620      	mov	r0, r4
   1fbd2:	f7fd ff4a 	bl	1da6a <net_pkt_append>
	net_pkt_append_u8(pkt, 0); /* aux data len */
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
	net_pkt_append_all(pkt, sizeof(struct in6_addr), addr->s6_addr,
			K_FOREVER);

	if (num_sources > 0) {
   1fbd6:	b915      	cbnz	r5, 1fbde <create_mldv2+0x5a>
				net_ipv6_unspecified_address()->s6_addr,
				K_FOREVER);
	}

	return pkt;
}
   1fbd8:	4620      	mov	r0, r4
   1fbda:	b002      	add	sp, #8
   1fbdc:	bd70      	pop	{r4, r5, r6, pc}
				net_ipv6_unspecified_address()->s6_addr,
   1fbde:	f7ff ffcd 	bl	1fb7c <net_ipv6_unspecified_address>
   1fbe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fbe6:	4602      	mov	r2, r0
   1fbe8:	2110      	movs	r1, #16
   1fbea:	4620      	mov	r0, r4
   1fbec:	f7fd ff3d 	bl	1da6a <net_pkt_append>
   1fbf0:	e7f2      	b.n	1fbd8 <create_mldv2+0x54>

0001fbf2 <net_ipv6_create_raw>:
{
   1fbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fbf6:	b088      	sub	sp, #32
   1fbf8:	4604      	mov	r4, r0
   1fbfa:	460e      	mov	r6, r1
   1fbfc:	4617      	mov	r7, r2
   1fbfe:	461d      	mov	r5, r3
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1fc00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fc04:	f7fd fda6 	bl	1d754 <net_pkt_get_frag>
   1fc08:	4680      	mov	r8, r0
	net_pkt_frag_insert(pkt, header);
   1fc0a:	4601      	mov	r1, r0
   1fc0c:	4620      	mov	r0, r4
   1fc0e:	f7fd fe2b 	bl	1d868 <net_pkt_frag_insert>
	return pkt->frags->data;
   1fc12:	68a3      	ldr	r3, [r4, #8]
   1fc14:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1fc16:	2260      	movs	r2, #96	; 0x60
   1fc18:	701a      	strb	r2, [r3, #0]
   1fc1a:	68a3      	ldr	r3, [r4, #8]
   1fc1c:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1fc1e:	2300      	movs	r3, #0
   1fc20:	7053      	strb	r3, [r2, #1]
   1fc22:	68a2      	ldr	r2, [r4, #8]
   1fc24:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1fc26:	7093      	strb	r3, [r2, #2]
   1fc28:	70d3      	strb	r3, [r2, #3]
   1fc2a:	68a2      	ldr	r2, [r4, #8]
   1fc2c:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   1fc2e:	7193      	strb	r3, [r2, #6]
   1fc30:	68a3      	ldr	r3, [r4, #8]
   1fc32:	689b      	ldr	r3, [r3, #8]
	return pkt->ipv6_hop_limit;
   1fc34:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   1fc38:	71da      	strb	r2, [r3, #7]
	return pkt->frags->data;
   1fc3a:	68a3      	ldr	r3, [r4, #8]
   1fc3c:	689b      	ldr	r3, [r3, #8]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   1fc3e:	79da      	ldrb	r2, [r3, #7]
   1fc40:	b912      	cbnz	r2, 1fc48 <net_ipv6_create_raw+0x56>
	return iface->ipv6.hop_limit;
   1fc42:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
		NET_IPV6_HDR(pkt)->hop_limit =
   1fc46:	71da      	strb	r2, [r3, #7]
   1fc48:	68a3      	ldr	r3, [r4, #8]
   1fc4a:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1fc4e:	466d      	mov	r5, sp
   1fc50:	6838      	ldr	r0, [r7, #0]
   1fc52:	6879      	ldr	r1, [r7, #4]
   1fc54:	68ba      	ldr	r2, [r7, #8]
   1fc56:	68fb      	ldr	r3, [r7, #12]
   1fc58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1fc5a:	466d      	mov	r5, sp
   1fc5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1fc5e:	f8ce 0018 	str.w	r0, [lr, #24]
   1fc62:	f8ce 101c 	str.w	r1, [lr, #28]
   1fc66:	f8ce 2020 	str.w	r2, [lr, #32]
   1fc6a:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
   1fc6e:	68a3      	ldr	r3, [r4, #8]
   1fc70:	689f      	ldr	r7, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1fc72:	6830      	ldr	r0, [r6, #0]
   1fc74:	6871      	ldr	r1, [r6, #4]
   1fc76:	68b2      	ldr	r2, [r6, #8]
   1fc78:	68f3      	ldr	r3, [r6, #12]
   1fc7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1fc7c:	ad04      	add	r5, sp, #16
   1fc7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1fc80:	60b8      	str	r0, [r7, #8]
   1fc82:	60f9      	str	r1, [r7, #12]
   1fc84:	613a      	str	r2, [r7, #16]
   1fc86:	617b      	str	r3, [r7, #20]
	pkt->ipv6_ext_len = len;
   1fc88:	2300      	movs	r3, #0
   1fc8a:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1fc8e:	68a3      	ldr	r3, [r4, #8]
   1fc90:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->nexthdr = next_header;
   1fc92:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1fc96:	719a      	strb	r2, [r3, #6]
	pkt->ip_hdr_len = len;
   1fc98:	2128      	movs	r1, #40	; 0x28
   1fc9a:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
	pkt->family = family;
   1fc9e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1fca2:	220a      	movs	r2, #10
   1fca4:	f362 03c6 	bfi	r3, r2, #3, #4
   1fca8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   1fcac:	f108 0008 	add.w	r0, r8, #8
   1fcb0:	f7fb f880 	bl	1adb4 <net_buf_simple_add>
}
   1fcb4:	4620      	mov	r0, r4
   1fcb6:	b008      	add	sp, #32
   1fcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fcbc <net_ipv6_create>:
{
   1fcbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fcbe:	b083      	sub	sp, #12
   1fcc0:	4605      	mov	r5, r0
   1fcc2:	460e      	mov	r6, r1
   1fcc4:	461f      	mov	r7, r3
	if (!src) {
   1fcc6:	4614      	mov	r4, r2
   1fcc8:	b14a      	cbz	r2, 1fcde <net_ipv6_create+0x22>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1fcca:	6823      	ldr	r3, [r4, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fccc:	b94b      	cbnz	r3, 1fce2 <net_ipv6_create+0x26>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1fcce:	6863      	ldr	r3, [r4, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1fcd0:	b9fb      	cbnz	r3, 1fd12 <net_ipv6_create+0x56>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fcd2:	68a3      	ldr	r3, [r4, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1fcd4:	b9fb      	cbnz	r3, 1fd16 <net_ipv6_create+0x5a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1fcd6:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fcd8:	b1fb      	cbz	r3, 1fd1a <net_ipv6_create+0x5e>
   1fcda:	2300      	movs	r3, #0
   1fcdc:	e002      	b.n	1fce4 <net_ipv6_create+0x28>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   1fcde:	68c4      	ldr	r4, [r0, #12]
   1fce0:	e7f3      	b.n	1fcca <net_ipv6_create+0xe>
   1fce2:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(src)
   1fce4:	b9db      	cbnz	r3, 1fd1e <net_ipv6_create+0x62>
	return addr->s6_addr[0] == 0xFF;
   1fce6:	7823      	ldrb	r3, [r4, #0]
	    || net_is_ipv6_addr_mcast(src)) {
   1fce8:	2bff      	cmp	r3, #255	; 0xff
   1fcea:	d018      	beq.n	1fd1e <net_ipv6_create+0x62>
	return net_if_get_by_index(context->iface);
   1fcec:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
   1fcf0:	f7fc fb3c 	bl	1c36c <net_if_get_by_index>
   1fcf4:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1fcf6:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
   1fcfa:	f012 0f40 	tst.w	r2, #64	; 0x40
   1fcfe:	d114      	bne.n	1fd2a <net_ipv6_create+0x6e>
	return IPPROTO_UDP;
   1fd00:	2211      	movs	r2, #17
	return net_ipv6_create_raw(pkt,
   1fd02:	9200      	str	r2, [sp, #0]
   1fd04:	463a      	mov	r2, r7
   1fd06:	4621      	mov	r1, r4
   1fd08:	4630      	mov	r0, r6
   1fd0a:	f7ff ff72 	bl	1fbf2 <net_ipv6_create_raw>
}
   1fd0e:	b003      	add	sp, #12
   1fd10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fd12:	2300      	movs	r3, #0
   1fd14:	e7e6      	b.n	1fce4 <net_ipv6_create+0x28>
   1fd16:	2300      	movs	r3, #0
   1fd18:	e7e4      	b.n	1fce4 <net_ipv6_create+0x28>
   1fd1a:	2301      	movs	r3, #1
   1fd1c:	e7e2      	b.n	1fce4 <net_ipv6_create+0x28>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1fd1e:	4639      	mov	r1, r7
   1fd20:	6970      	ldr	r0, [r6, #20]
   1fd22:	f7fc f8cf 	bl	1bec4 <net_if_ipv6_select_src_addr>
   1fd26:	4604      	mov	r4, r0
   1fd28:	e7e0      	b.n	1fcec <net_ipv6_create+0x30>
		return IPPROTO_TCP;
   1fd2a:	2206      	movs	r2, #6
   1fd2c:	e7e9      	b.n	1fd02 <net_ipv6_create+0x46>

0001fd2e <net_ipv6_finalize_raw>:
{
   1fd2e:	b538      	push	{r3, r4, r5, lr}
   1fd30:	4605      	mov	r5, r0
   1fd32:	460c      	mov	r4, r1
	net_pkt_compact(pkt);
   1fd34:	f7fd fe52 	bl	1d9dc <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   1fd38:	68a8      	ldr	r0, [r5, #8]
   1fd3a:	4603      	mov	r3, r0
	size_t bytes = 0;
   1fd3c:	2200      	movs	r2, #0
   1fd3e:	e002      	b.n	1fd46 <net_ipv6_finalize_raw+0x18>
		bytes += buf->len;
   1fd40:	8999      	ldrh	r1, [r3, #12]
   1fd42:	440a      	add	r2, r1
		buf = buf->frags;
   1fd44:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1fd46:	2b00      	cmp	r3, #0
   1fd48:	d1fa      	bne.n	1fd40 <net_ipv6_finalize_raw+0x12>
	total_len -= sizeof(struct net_ipv6_hdr);
   1fd4a:	3a28      	subs	r2, #40	; 0x28
	return pkt->frags->data;
   1fd4c:	6883      	ldr	r3, [r0, #8]
	NET_IPV6_HDR(pkt)->len[0] = total_len / 256;
   1fd4e:	0a11      	lsrs	r1, r2, #8
   1fd50:	7119      	strb	r1, [r3, #4]
   1fd52:	68ab      	ldr	r3, [r5, #8]
   1fd54:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = total_len - NET_IPV6_HDR(pkt)->len[0] * 256;
   1fd56:	715a      	strb	r2, [r3, #5]
	if (next_header == IPPROTO_UDP) {
   1fd58:	2c11      	cmp	r4, #17
   1fd5a:	d005      	beq.n	1fd68 <net_ipv6_finalize_raw+0x3a>
	if (next_header == IPPROTO_TCP) {
   1fd5c:	2c06      	cmp	r4, #6
   1fd5e:	d008      	beq.n	1fd72 <net_ipv6_finalize_raw+0x44>
	if (next_header == IPPROTO_ICMPV6) {
   1fd60:	2c3a      	cmp	r4, #58	; 0x3a
   1fd62:	d00b      	beq.n	1fd7c <net_ipv6_finalize_raw+0x4e>
}
   1fd64:	2000      	movs	r0, #0
   1fd66:	bd38      	pop	{r3, r4, r5, pc}
		net_udp_set_chksum(pkt, pkt->frags);
   1fd68:	68a9      	ldr	r1, [r5, #8]
   1fd6a:	4628      	mov	r0, r5
   1fd6c:	f003 fa9b 	bl	232a6 <net_udp_set_chksum>
   1fd70:	e7f8      	b.n	1fd64 <net_ipv6_finalize_raw+0x36>
		net_tcp_set_chksum(pkt, pkt->frags);
   1fd72:	68a9      	ldr	r1, [r5, #8]
   1fd74:	4628      	mov	r0, r5
   1fd76:	f004 f8da 	bl	23f2e <net_tcp_set_chksum>
   1fd7a:	e7f3      	b.n	1fd64 <net_ipv6_finalize_raw+0x36>
		net_icmpv6_set_chksum(pkt, pkt->frags);
   1fd7c:	68a9      	ldr	r1, [r5, #8]
   1fd7e:	4628      	mov	r0, r5
   1fd80:	f7fe fdf2 	bl	1e968 <net_icmpv6_set_chksum>
   1fd84:	e7ee      	b.n	1fd64 <net_ipv6_finalize_raw+0x36>
	...

0001fd88 <send_mldv2_raw>:

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   1fd88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fd8c:	b08d      	sub	sp, #52	; 0x34
   1fd8e:	4680      	mov	r8, r0
   1fd90:	4689      	mov	r9, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1fd92:	f240 23ff 	movw	r3, #767	; 0x2ff
   1fd96:	f8ad 3020 	strh.w	r3, [sp, #32]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1fd9a:	2500      	movs	r5, #0
   1fd9c:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1fda0:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1fda4:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1fda8:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1fdac:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1fdb0:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1fdb4:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   1fdb8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1fdbc:	6843      	ldr	r3, [r0, #4]
   1fdbe:	689b      	ldr	r3, [r3, #8]
   1fdc0:	a908      	add	r1, sp, #32
   1fdc2:	4798      	blx	r3
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1fdc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fdc8:	f7fd fca6 	bl	1d718 <net_pkt_get_reserve_tx>
   1fdcc:	4604      	mov	r4, r0
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt,
   1fdce:	a908      	add	r1, sp, #32
   1fdd0:	4640      	mov	r0, r8
   1fdd2:	f7fc f877 	bl	1bec4 <net_if_ipv6_select_src_addr>
   1fdd6:	9500      	str	r5, [sp, #0]
   1fdd8:	4643      	mov	r3, r8
   1fdda:	aa08      	add	r2, sp, #32
   1fddc:	4601      	mov	r1, r0
   1fdde:	4620      	mov	r0, r4
   1fde0:	f7ff ff07 	bl	1fbf2 <net_ipv6_create_raw>
   1fde4:	4604      	mov	r4, r0
   1fde6:	6883      	ldr	r3, [r0, #8]
   1fde8:	689b      	ldr	r3, [r3, #8]
				  net_if_ipv6_select_src_addr(iface, &dst),
				  &dst,
				  iface,
				  NET_IPV6_NEXTHDR_HBHO);

	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   1fdea:	2601      	movs	r6, #1
   1fdec:	71de      	strb	r6, [r3, #7]

	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   1fdee:	6883      	ldr	r3, [r0, #8]
   1fdf0:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   1fdf2:	87c3      	strh	r3, [r0, #62]	; 0x3e
   1fdf4:	aa0c      	add	r2, sp, #48	; 0x30
   1fdf6:	233a      	movs	r3, #58	; 0x3a
   1fdf8:	f802 3d15 	strb.w	r3, [r2, #-21]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fdfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe00:	4631      	mov	r1, r6
   1fe02:	f7fd fe32 	bl	1da6a <net_pkt_append>
   1fe06:	aa0c      	add	r2, sp, #48	; 0x30
   1fe08:	f802 5d16 	strb.w	r5, [r2, #-22]!
   1fe0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe10:	4631      	mov	r1, r6
   1fe12:	4620      	mov	r0, r4
   1fe14:	f7fd fe29 	bl	1da6a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fe18:	af0c      	add	r7, sp, #48	; 0x30
   1fe1a:	f240 2305 	movw	r3, #517	; 0x205
   1fe1e:	f827 3d14 	strh.w	r3, [r7, #-20]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fe22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe26:	463a      	mov	r2, r7
   1fe28:	2102      	movs	r1, #2
   1fe2a:	4620      	mov	r0, r4
   1fe2c:	f7fd fe1d 	bl	1da6a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fe30:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fe34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe38:	463a      	mov	r2, r7
   1fe3a:	2102      	movs	r1, #2
   1fe3c:	4620      	mov	r0, r4
   1fe3e:	f7fd fe14 	bl	1da6a <net_pkt_append>
   1fe42:	aa0c      	add	r2, sp, #48	; 0x30
   1fe44:	f802 5d17 	strb.w	r5, [r2, #-23]!
   1fe48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe4c:	4631      	mov	r1, r6
   1fe4e:	4620      	mov	r0, r4
   1fe50:	f7fd fe0b 	bl	1da6a <net_pkt_append>
   1fe54:	aa0c      	add	r2, sp, #48	; 0x30
   1fe56:	f802 5d18 	strb.w	r5, [r2, #-24]!
   1fe5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe5e:	4631      	mov	r1, r6
   1fe60:	4620      	mov	r0, r4
   1fe62:	f7fd fe02 	bl	1da6a <net_pkt_append>
   1fe66:	aa0c      	add	r2, sp, #48	; 0x30
   1fe68:	238f      	movs	r3, #143	; 0x8f
   1fe6a:	f802 3d19 	strb.w	r3, [r2, #-25]!
   1fe6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe72:	4631      	mov	r1, r6
   1fe74:	4620      	mov	r0, r4
   1fe76:	f7fd fdf8 	bl	1da6a <net_pkt_append>
   1fe7a:	aa0c      	add	r2, sp, #48	; 0x30
   1fe7c:	f802 5d1a 	strb.w	r5, [r2, #-26]!
   1fe80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe84:	4631      	mov	r1, r6
   1fe86:	4620      	mov	r0, r4
   1fe88:	f7fd fdef 	bl	1da6a <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fe8c:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fe90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe94:	463a      	mov	r2, r7
   1fe96:	2102      	movs	r1, #2
   1fe98:	4620      	mov	r0, r4
   1fe9a:	f7fd fde6 	bl	1da6a <net_pkt_append>
	/* ICMPv6 header */
	net_pkt_append_u8(pkt, NET_ICMPV6_MLDv2); /* type */
	net_pkt_append_u8(pkt, 0); /* code */
	net_pkt_append_be16(pkt, 0); /* chksum */

	pkt->frags->len = NET_IPV6ICMPH_LEN + ROUTER_ALERT_LEN;
   1fe9e:	68a3      	ldr	r3, [r4, #8]
   1fea0:	2234      	movs	r2, #52	; 0x34
   1fea2:	819a      	strh	r2, [r3, #12]
	pkt->iface = iface;
   1fea4:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1fea8:	f898 3015 	ldrb.w	r3, [r8, #21]
   1feac:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1feb0:	f898 3015 	ldrb.w	r3, [r8, #21]
   1feb4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	u16_t value = sys_cpu_to_be16(data);
   1feb8:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1febc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fec0:	463a      	mov	r2, r7
   1fec2:	2102      	movs	r1, #2
   1fec4:	4620      	mov	r0, r4
   1fec6:	f7fd fdd0 	bl	1da6a <net_pkt_append>
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_be16(pkt, 0); /* reserved field */

	/* Insert the actual multicast record(s) here */
	net_pkt_frag_add(pkt, frags);
   1feca:	4649      	mov	r1, r9
   1fecc:	4620      	mov	r0, r4
   1fece:	f7fd fcbe 	bl	1d84e <net_pkt_frag_add>

	ret = net_ipv6_finalize_raw(pkt, NET_IPV6_NEXTHDR_HBHO);
   1fed2:	4629      	mov	r1, r5
   1fed4:	4620      	mov	r0, r4
   1fed6:	f7ff ff2a 	bl	1fd2e <net_ipv6_finalize_raw>
	if (ret < 0) {
   1feda:	1e05      	subs	r5, r0, #0
   1fedc:	db35      	blt.n	1ff4a <send_mldv2_raw+0x1c2>
	pkt->ipv6_ext_len = len;
   1fede:	2308      	movs	r3, #8
   1fee0:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		goto drop;
	}

	net_pkt_set_ipv6_ext_len(pkt, ROUTER_ALERT_LEN);

	net_pkt_write_be16(pkt, pkt->frags,
   1fee4:	68a6      	ldr	r6, [r4, #8]
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1fee6:	213a      	movs	r1, #58	; 0x3a
   1fee8:	4620      	mov	r0, r4
   1feea:	f7fe faf0 	bl	1e4ce <net_calc_chksum>
			   NET_IPV6H_LEN + ROUTER_ALERT_LEN + 2,
			   &pos, ntohs(~net_calc_chksum_icmpv6(pkt)));
   1feee:	ea6f 2020 	mvn.w	r0, r0, asr #8
   1fef2:	b2c5      	uxtb	r5, r0
   1fef4:	213a      	movs	r1, #58	; 0x3a
   1fef6:	4620      	mov	r0, r4
   1fef8:	f7fe fae9 	bl	1e4ce <net_calc_chksum>
   1fefc:	43c0      	mvns	r0, r0
   1fefe:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	net_pkt_write_be16(pkt, pkt->frags,
   1ff02:	b280      	uxth	r0, r0
						 struct net_buf *frag,
						 u16_t offset,
						 u16_t *pos,
						 u16_t data)
{
	u16_t value = htons(data);
   1ff04:	0a03      	lsrs	r3, r0, #8
   1ff06:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1ff0a:	f8ad 001c 	strh.w	r0, [sp, #28]

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1ff0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ff12:	9302      	str	r3, [sp, #8]
   1ff14:	ab07      	add	r3, sp, #28
   1ff16:	9301      	str	r3, [sp, #4]
   1ff18:	2302      	movs	r3, #2
   1ff1a:	9300      	str	r3, [sp, #0]
   1ff1c:	f10d 031e 	add.w	r3, sp, #30
   1ff20:	2232      	movs	r2, #50	; 0x32
   1ff22:	4631      	mov	r1, r6
   1ff24:	4620      	mov	r0, r4
   1ff26:	f7fd fe58 	bl	1dbda <net_pkt_write>

	ret = net_send_data(pkt);
   1ff2a:	4620      	mov	r0, r4
   1ff2c:	f7fb f864 	bl	1aff8 <net_send_data>
	if (ret < 0) {
   1ff30:	1e05      	subs	r5, r0, #0
   1ff32:	db0a      	blt.n	1ff4a <send_mldv2_raw+0x1c2>
	net_stats.icmp.sent++;
   1ff34:	4b0d      	ldr	r3, [pc, #52]	; (1ff6c <send_mldv2_raw+0x1e4>)
   1ff36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ff38:	3201      	adds	r2, #1
   1ff3a:	639a      	str	r2, [r3, #56]	; 0x38
	net_stats.ipv6_mld.recv++;
}

static inline void net_stats_update_ipv6_mld_sent(void)
{
	net_stats.ipv6_mld.sent++;
   1ff3c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1ff40:	3201      	adds	r2, #1
   1ff42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}

	net_stats_update_icmp_sent();
	net_stats_update_ipv6_mld_sent();

	return 0;
   1ff46:	2500      	movs	r5, #0
   1ff48:	e00b      	b.n	1ff62 <send_mldv2_raw+0x1da>

drop:
	net_pkt_unref(pkt);
   1ff4a:	4620      	mov	r0, r4
   1ff4c:	f7fd fc55 	bl	1d7fa <net_pkt_unref>
	net_stats.icmp.drop++;
   1ff50:	4b06      	ldr	r3, [pc, #24]	; (1ff6c <send_mldv2_raw+0x1e4>)
   1ff52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1ff54:	3201      	adds	r2, #1
   1ff56:	63da      	str	r2, [r3, #60]	; 0x3c
}

static inline void net_stats_update_ipv6_mld_drop(void)
{
	net_stats.ipv6_mld.drop++;
   1ff58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1ff5c:	3201      	adds	r2, #1
   1ff5e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_stats_update_icmp_drop();
	net_stats_update_ipv6_mld_drop();

	return ret;
}
   1ff62:	4628      	mov	r0, r5
   1ff64:	b00d      	add	sp, #52	; 0x34
   1ff66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ff6a:	bf00      	nop
   1ff6c:	20002b58 	.word	0x20002b58

0001ff70 <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   1ff70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff72:	b083      	sub	sp, #12
   1ff74:	4605      	mov	r5, r0
   1ff76:	460e      	mov	r6, r1
   1ff78:	4617      	mov	r7, r2
   1ff7a:	6843      	ldr	r3, [r0, #4]
   1ff7c:	689b      	ldr	r3, [r3, #8]
   1ff7e:	2100      	movs	r1, #0
   1ff80:	4798      	blx	r3
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1ff82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ff86:	f7fd fbc7 	bl	1d718 <net_pkt_get_reserve_tx>
   1ff8a:	4604      	mov	r4, r0
	u16_t value = sys_cpu_to_be16(data);
   1ff8c:	aa02      	add	r2, sp, #8
   1ff8e:	f44f 7380 	mov.w	r3, #256	; 0x100
   1ff92:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1ff96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ff9a:	2102      	movs	r1, #2
   1ff9c:	f7fd fd65 	bl	1da6a <net_pkt_append>
				     K_FOREVER);

	net_pkt_append_be16(pkt, 1); /* number of records */

	pkt = create_mldv2(pkt, addr, mode, 1);
   1ffa0:	2301      	movs	r3, #1
   1ffa2:	463a      	mov	r2, r7
   1ffa4:	4631      	mov	r1, r6
   1ffa6:	4620      	mov	r0, r4
   1ffa8:	f7ff fdec 	bl	1fb84 <create_mldv2>
   1ffac:	4604      	mov	r4, r0

	ret = send_mldv2_raw(iface, pkt->frags);
   1ffae:	6881      	ldr	r1, [r0, #8]
   1ffb0:	4628      	mov	r0, r5
   1ffb2:	f7ff fee9 	bl	1fd88 <send_mldv2_raw>
   1ffb6:	4605      	mov	r5, r0

	pkt->frags = NULL;
   1ffb8:	2300      	movs	r3, #0
   1ffba:	60a3      	str	r3, [r4, #8]

	net_pkt_unref(pkt);
   1ffbc:	4620      	mov	r0, r4
   1ffbe:	f7fd fc1c 	bl	1d7fa <net_pkt_unref>

	return ret;
}
   1ffc2:	4628      	mov	r0, r5
   1ffc4:	b003      	add	sp, #12
   1ffc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ffc8 <send_mld_report>:

	return ret;
}

static void send_mld_report(struct net_if *iface)
{
   1ffc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ffca:	b087      	sub	sp, #28
   1ffcc:	4605      	mov	r5, r0
   1ffce:	6843      	ldr	r3, [r0, #4]
   1ffd0:	689b      	ldr	r3, [r3, #8]
   1ffd2:	2100      	movs	r1, #0
   1ffd4:	4798      	blx	r3
	struct net_pkt *pkt;
	int i, count = 0;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1ffd6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ffda:	f7fd fb9d 	bl	1d718 <net_pkt_get_reserve_tx>
   1ffde:	4606      	mov	r6, r0
   1ffe0:	2400      	movs	r4, #0
   1ffe2:	aa06      	add	r2, sp, #24
   1ffe4:	f802 4d04 	strb.w	r4, [r2, #-4]!
   1ffe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ffec:	2101      	movs	r1, #1
   1ffee:	f7fd fd3c 	bl	1da6a <net_pkt_append>
	int i, count = 0;
   1fff2:	4627      	mov	r7, r4
				     K_FOREVER);

	net_pkt_append_u8(pkt, 0); /* This will be the record count */

	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1fff4:	e000      	b.n	1fff8 <send_mld_report+0x30>
   1fff6:	3401      	adds	r4, #1
   1fff8:	2c04      	cmp	r4, #4
   1fffa:	dc1e      	bgt.n	2003a <send_mld_report+0x72>
		if (!iface->ipv6.mcast[i].is_used ||
   1fffc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   20000:	00d3      	lsls	r3, r2, #3
   20002:	442b      	add	r3, r5
   20004:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   20008:	f013 0f01 	tst.w	r3, #1
   2000c:	d0f3      	beq.n	1fff6 <send_mld_report+0x2e>
		    !iface->ipv6.mcast[i].is_joined) {
   2000e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   20012:	00d3      	lsls	r3, r2, #3
   20014:	461a      	mov	r2, r3
   20016:	442b      	add	r3, r5
   20018:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   2001c:	f013 0f02 	tst.w	r3, #2
   20020:	d0e9      	beq.n	1fff6 <send_mld_report+0x2e>
			continue;
		}

		pkt = create_mldv2(pkt, &iface->ipv6.mcast[i].address.in6_addr,
   20022:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   20026:	4429      	add	r1, r5
   20028:	2300      	movs	r3, #0
   2002a:	2202      	movs	r2, #2
   2002c:	3118      	adds	r1, #24
   2002e:	4630      	mov	r0, r6
   20030:	f7ff fda8 	bl	1fb84 <create_mldv2>
   20034:	4606      	mov	r6, r0
				   NET_IPV6_MLDv2_MODE_IS_EXCLUDE, 0);
		count++;
   20036:	3701      	adds	r7, #1
   20038:	e7dd      	b.n	1fff6 <send_mld_report+0x2e>
	}

	if (count > 0) {
   2003a:	2f00      	cmp	r7, #0
   2003c:	dd16      	ble.n	2006c <send_mld_report+0xa4>
		u16_t pos;

		/* Write back the record count */
		net_pkt_write_u8(pkt, pkt->frags, 0, &pos, count);
   2003e:	68b1      	ldr	r1, [r6, #8]
   20040:	f88d 7015 	strb.w	r7, [sp, #21]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   20044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20048:	9302      	str	r3, [sp, #8]
   2004a:	f10d 0315 	add.w	r3, sp, #21
   2004e:	9301      	str	r3, [sp, #4]
   20050:	2301      	movs	r3, #1
   20052:	9300      	str	r3, [sp, #0]
   20054:	f10d 0316 	add.w	r3, sp, #22
   20058:	2200      	movs	r2, #0
   2005a:	4630      	mov	r0, r6
   2005c:	f7fd fdbd 	bl	1dbda <net_pkt_write>

		send_mldv2_raw(iface, pkt->frags);
   20060:	68b1      	ldr	r1, [r6, #8]
   20062:	4628      	mov	r0, r5
   20064:	f7ff fe90 	bl	1fd88 <send_mldv2_raw>

		pkt->frags = NULL;
   20068:	2300      	movs	r3, #0
   2006a:	60b3      	str	r3, [r6, #8]
	}

	net_pkt_unref(pkt);
   2006c:	4630      	mov	r0, r6
   2006e:	f7fd fbc4 	bl	1d7fa <net_pkt_unref>
}
   20072:	b007      	add	sp, #28
   20074:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00020078 <handle_mld_query>:

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   20078:	b570      	push	{r4, r5, r6, lr}
   2007a:	b08a      	sub	sp, #40	; 0x28
   2007c:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   2007e:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   20080:	2200      	movs	r2, #0
   20082:	e002      	b.n	2008a <handle_mld_query+0x12>
		bytes += buf->len;
   20084:	8999      	ldrh	r1, [r3, #12]
   20086:	440a      	add	r2, r1
		buf = buf->frags;
   20088:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2008a:	2b00      	cmp	r3, #0
   2008c:	d1fa      	bne.n	20084 <handle_mld_query+0xc>
	u16_t total_len = net_pkt_get_len(pkt);
   2008e:	b294      	uxth	r4, r2
	net_stats.ipv6_mld.recv++;
   20090:	4a37      	ldr	r2, [pc, #220]	; (20170 <handle_mld_query+0xf8>)
   20092:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   20096:	3301      	adds	r3, #1
   20098:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	net_stats_update_ipv6_mld_recv();

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   2009c:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   200a0:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   200a4:	4419      	add	r1, r3
	frag = net_frag_get_pos(pkt,
   200a6:	3104      	adds	r1, #4
   200a8:	f10d 0212 	add.w	r2, sp, #18
   200ac:	b289      	uxth	r1, r1
   200ae:	4628      	mov	r0, r5
   200b0:	f7fd fe72 	bl	1dd98 <net_frag_get_pos>
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   200b4:	f10d 0316 	add.w	r3, sp, #22
   200b8:	aa04      	add	r2, sp, #16
   200ba:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   200be:	f7fd fd62 	bl	1db86 <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
   200c2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	return net_frag_read(frag, offset, pos, len, NULL);
   200c6:	2600      	movs	r6, #0
   200c8:	9600      	str	r6, [sp, #0]
   200ca:	2302      	movs	r3, #2
   200cc:	aa04      	add	r2, sp, #16
   200ce:	f7fd fd12 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   200d2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   200d6:	ab06      	add	r3, sp, #24
   200d8:	9300      	str	r3, [sp, #0]
   200da:	2310      	movs	r3, #16
   200dc:	eb0d 0203 	add.w	r2, sp, r3
   200e0:	f7fd fd09 	bl	1daf6 <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
   200e4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   200e8:	9600      	str	r6, [sp, #0]
   200ea:	2302      	movs	r3, #2
   200ec:	aa04      	add	r2, sp, #16
   200ee:	f7fd fd02 	bl	1daf6 <net_frag_read>
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   200f2:	ab05      	add	r3, sp, #20
   200f4:	aa04      	add	r2, sp, #16
   200f6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   200fa:	68a8      	ldr	r0, [r5, #8]
   200fc:	f7fd fd43 	bl	1db86 <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   20100:	b358      	cbz	r0, 2015a <handle_mld_query+0xe2>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   20102:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   20106:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2010a:	0112      	lsls	r2, r2, #4
   2010c:	b292      	uxth	r2, r2
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
   2010e:	4413      	add	r3, r2
   20110:	b29b      	uxth	r3, r3
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   20112:	3344      	adds	r3, #68	; 0x44
   20114:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   20116:	429c      	cmp	r4, r3
   20118:	d307      	bcc.n	2012a <handle_mld_query+0xb2>
   2011a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   2011e:	d804      	bhi.n	2012a <handle_mld_query+0xb2>
	return pkt->frags->data;
   20120:	68ab      	ldr	r3, [r5, #8]
   20122:	689b      	ldr	r3, [r3, #8]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   20124:	79db      	ldrb	r3, [r3, #7]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   20126:	2b01      	cmp	r3, #1
   20128:	d006      	beq.n	20138 <handle_mld_query+0xc0>
		struct net_icmp_hdr hdr, *icmp_hdr;

		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   2012a:	a903      	add	r1, sp, #12
   2012c:	4628      	mov	r0, r5
   2012e:	f7fe fc68 	bl	1ea02 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   20132:	b148      	cbz	r0, 20148 <handle_mld_query+0xd0>
   20134:	7843      	ldrb	r3, [r0, #1]
   20136:	b93b      	cbnz	r3, 20148 <handle_mld_query+0xd0>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   20138:	f7ff fd20 	bl	1fb7c <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   2013c:	2210      	movs	r2, #16
   2013e:	4601      	mov	r1, r0
   20140:	a806      	add	r0, sp, #24
   20142:	f00a fb55 	bl	2a7f0 <memcmp>
   20146:	b178      	cbz	r0, 20168 <handle_mld_query+0xf0>
	net_stats.ipv6_mld.drop++;
   20148:	4a09      	ldr	r2, [pc, #36]	; (20170 <handle_mld_query+0xf8>)
   2014a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   2014e:	3301      	adds	r3, #1
   20150:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

drop:
	net_stats_update_ipv6_mld_drop();

	return NET_DROP;
}
   20154:	2002      	movs	r0, #2
   20156:	b00a      	add	sp, #40	; 0x28
   20158:	bd70      	pop	{r4, r5, r6, pc}
	if (!frag && pos == 0xffff) {
   2015a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   2015e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20162:	429a      	cmp	r2, r3
   20164:	d1cd      	bne.n	20102 <handle_mld_query+0x8a>
   20166:	e7ef      	b.n	20148 <handle_mld_query+0xd0>
	send_mld_report(net_pkt_iface(pkt));
   20168:	6968      	ldr	r0, [r5, #20]
   2016a:	f7ff ff2d 	bl	1ffc8 <send_mld_report>
   2016e:	e7eb      	b.n	20148 <handle_mld_query+0xd0>
   20170:	20002b58 	.word	0x20002b58

00020174 <net_ipv6_finalize>:
{
   20174:	b508      	push	{r3, lr}
   20176:	460b      	mov	r3, r1
	if (context->flags & NET_CONTEXT_PROTO) {
   20178:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   2017c:	f012 0f40 	tst.w	r2, #64	; 0x40
   20180:	d104      	bne.n	2018c <net_ipv6_finalize+0x18>
	return IPPROTO_UDP;
   20182:	2111      	movs	r1, #17
	return net_ipv6_finalize_raw(pkt, net_context_get_ip_proto(context));
   20184:	4618      	mov	r0, r3
   20186:	f7ff fdd2 	bl	1fd2e <net_ipv6_finalize_raw>
}
   2018a:	bd08      	pop	{r3, pc}
		return IPPROTO_TCP;
   2018c:	2106      	movs	r1, #6
   2018e:	e7f9      	b.n	20184 <net_ipv6_finalize+0x10>

00020190 <net_ipv6_nbr_lookup>:
{
   20190:	b508      	push	{r3, lr}
	return nbr_lookup(&net_neighbor.table, iface, addr);
   20192:	460a      	mov	r2, r1
   20194:	4601      	mov	r1, r0
   20196:	4802      	ldr	r0, [pc, #8]	; (201a0 <net_ipv6_nbr_lookup+0x10>)
   20198:	f7ff fb42 	bl	1f820 <nbr_lookup>
}
   2019c:	bd08      	pop	{r3, pc}
   2019e:	bf00      	nop
   201a0:	2000bf54 	.word	0x2000bf54

000201a4 <net_ipv6_send_na>:
{
   201a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201a8:	b093      	sub	sp, #76	; 0x4c
   201aa:	4605      	mov	r5, r0
   201ac:	468b      	mov	fp, r1
   201ae:	4692      	mov	sl, r2
   201b0:	4699      	mov	r9, r3
   201b2:	6843      	ldr	r3, [r0, #4]
   201b4:	689b      	ldr	r3, [r3, #8]
   201b6:	4611      	mov	r1, r2
   201b8:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   201ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   201be:	f7fd faab 	bl	1d718 <net_pkt_get_reserve_tx>
   201c2:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   201c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   201c8:	f7fd fac4 	bl	1d754 <net_pkt_get_frag>
   201cc:	4607      	mov	r7, r0
	net_pkt_frag_add(pkt, frag);
   201ce:	4601      	mov	r1, r0
   201d0:	4620      	mov	r0, r4
   201d2:	f7fd fb3c 	bl	1d84e <net_pkt_frag_add>
	pkt->iface = iface;
   201d6:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   201d8:	7d6b      	ldrb	r3, [r5, #21]
   201da:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   201de:	7d6b      	ldrb	r3, [r5, #21]
   201e0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   201e4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   201e8:	220a      	movs	r2, #10
   201ea:	f362 03c6 	bfi	r3, r2, #3, #4
   201ee:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   201f2:	2328      	movs	r3, #40	; 0x28
   201f4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   201f8:	68a3      	ldr	r3, [r4, #8]
   201fa:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   201fc:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   20200:	461a      	mov	r2, r3
   20202:	2100      	movs	r1, #0
   20204:	1ac0      	subs	r0, r0, r3
   20206:	f00a fb87 	bl	2a918 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   2020a:	2300      	movs	r3, #0
   2020c:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   2020e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (iface->link_addr.len == 6) {
   20212:	7d2b      	ldrb	r3, [r5, #20]
   20214:	2b06      	cmp	r3, #6
   20216:	f000 8092 	beq.w	2033e <net_ipv6_send_na+0x19a>
	} else if (iface->link_addr.len == 8) {
   2021a:	2b08      	cmp	r3, #8
   2021c:	f000 808d 	beq.w	2033a <net_ipv6_send_na+0x196>
	return 0;
   20220:	2600      	movs	r6, #0
	pkt->ipv6_ext_len = len;
   20222:	f04f 0800 	mov.w	r8, #0
   20226:	f884 803b 	strb.w	r8, [r4, #59]	; 0x3b
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   2022a:	f106 0514 	add.w	r5, r6, #20
   2022e:	2288      	movs	r2, #136	; 0x88
   20230:	f005 01fc 	and.w	r1, r5, #252	; 0xfc
   20234:	4620      	mov	r0, r4
   20236:	f7ff fc0c 	bl	1fa52 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   2023a:	4629      	mov	r1, r5
   2023c:	f107 0008 	add.w	r0, r7, #8
   20240:	f7fa fdb8 	bl	1adb4 <net_buf_simple_add>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20244:	a901      	add	r1, sp, #4
   20246:	4620      	mov	r0, r4
   20248:	f7fe fdd8 	bl	1edfc <net_icmpv6_get_na_hdr>
   2024c:	4607      	mov	r7, r0
	return pkt->frags->data;
   2024e:	68a3      	ldr	r3, [r4, #8]
   20250:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   20254:	ad06      	add	r5, sp, #24
   20256:	f8db 0000 	ldr.w	r0, [fp]
   2025a:	f8db 1004 	ldr.w	r1, [fp, #4]
   2025e:	f8db 2008 	ldr.w	r2, [fp, #8]
   20262:	f8db 300c 	ldr.w	r3, [fp, #12]
   20266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20268:	ad06      	add	r5, sp, #24
   2026a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2026c:	f8ce 0008 	str.w	r0, [lr, #8]
   20270:	f8ce 100c 	str.w	r1, [lr, #12]
   20274:	f8ce 2010 	str.w	r2, [lr, #16]
   20278:	f8ce 3014 	str.w	r3, [lr, #20]
   2027c:	68a3      	ldr	r3, [r4, #8]
   2027e:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   20282:	ad0a      	add	r5, sp, #40	; 0x28
   20284:	f8da 0000 	ldr.w	r0, [sl]
   20288:	f8da 1004 	ldr.w	r1, [sl, #4]
   2028c:	f8da 2008 	ldr.w	r2, [sl, #8]
   20290:	f8da 300c 	ldr.w	r3, [sl, #12]
   20294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20296:	ad0a      	add	r5, sp, #40	; 0x28
   20298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2029a:	f8cc 0018 	str.w	r0, [ip, #24]
   2029e:	f8cc 101c 	str.w	r1, [ip, #28]
   202a2:	f8cc 2020 	str.w	r2, [ip, #32]
   202a6:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   202aa:	ad0e      	add	r5, sp, #56	; 0x38
   202ac:	f8d9 0000 	ldr.w	r0, [r9]
   202b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   202b4:	f8d9 2008 	ldr.w	r2, [r9, #8]
   202b8:	f8d9 300c 	ldr.w	r3, [r9, #12]
   202bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   202be:	ad0e      	add	r5, sp, #56	; 0x38
   202c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   202c2:	6078      	str	r0, [r7, #4]
   202c4:	60b9      	str	r1, [r7, #8]
   202c6:	60fa      	str	r2, [r7, #12]
   202c8:	613b      	str	r3, [r7, #16]
	return pkt->iface;
   202ca:	f8d4 a014 	ldr.w	sl, [r4, #20]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   202ce:	4620      	mov	r0, r4
   202d0:	f7fd fd6c 	bl	1ddac <net_pkt_icmp_data>
	set_llao(&net_pkt_iface(pkt)->link_addr,
   202d4:	f100 0518 	add.w	r5, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   202d8:	2302      	movs	r3, #2
   202da:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   202dc:	08f3      	lsrs	r3, r6, #3
   202de:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   202e0:	f89a 2014 	ldrb.w	r2, [sl, #20]
   202e4:	f8da 1010 	ldr.w	r1, [sl, #16]
   202e8:	301a      	adds	r0, #26
   202ea:	f7df ffe9 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   202ee:	f89a 2014 	ldrb.w	r2, [sl, #20]
   202f2:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   202f4:	1ab2      	subs	r2, r6, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   202f6:	3a02      	subs	r2, #2
   202f8:	4641      	mov	r1, r8
   202fa:	4428      	add	r0, r5
   202fc:	f00a fb0c 	bl	2a918 <memset>
	na_hdr->flags = flags;
   20300:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   20304:	703b      	strb	r3, [r7, #0]
	net_icmpv6_set_na_hdr(pkt, na_hdr);
   20306:	4639      	mov	r1, r7
   20308:	4620      	mov	r0, r4
   2030a:	f7fe fdac 	bl	1ee66 <net_icmpv6_set_na_hdr>
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   2030e:	68a3      	ldr	r3, [r4, #8]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   20310:	3640      	adds	r6, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   20312:	819e      	strh	r6, [r3, #12]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   20314:	68a1      	ldr	r1, [r4, #8]
   20316:	4620      	mov	r0, r4
   20318:	f7fe fb26 	bl	1e968 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   2031c:	4620      	mov	r0, r4
   2031e:	f7fa fe6b 	bl	1aff8 <net_send_data>
   20322:	4540      	cmp	r0, r8
   20324:	db0d      	blt.n	20342 <net_ipv6_send_na+0x19e>
	net_stats.ipv6_nd.sent++;
   20326:	4a0d      	ldr	r2, [pc, #52]	; (2035c <net_ipv6_send_na+0x1b8>)
   20328:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   2032c:	3301      	adds	r3, #1
   2032e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   20332:	4640      	mov	r0, r8
}
   20334:	b013      	add	sp, #76	; 0x4c
   20336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   2033a:	2610      	movs	r6, #16
   2033c:	e771      	b.n	20222 <net_ipv6_send_na+0x7e>
		return 8;
   2033e:	2608      	movs	r6, #8
   20340:	e76f      	b.n	20222 <net_ipv6_send_na+0x7e>
	net_pkt_unref(pkt);
   20342:	4620      	mov	r0, r4
   20344:	f7fd fa59 	bl	1d7fa <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   20348:	4a04      	ldr	r2, [pc, #16]	; (2035c <net_ipv6_send_na+0x1b8>)
   2034a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   2034e:	3301      	adds	r3, #1
   20350:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   20354:	f06f 0015 	mvn.w	r0, #21
   20358:	e7ec      	b.n	20334 <net_ipv6_send_na+0x190>
   2035a:	bf00      	nop
   2035c:	20002b58 	.word	0x20002b58

00020360 <net_ipv6_nbr_set_reachable_timer>:
{
   20360:	b508      	push	{r3, lr}
   20362:	68c9      	ldr	r1, [r1, #12]
   20364:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
   20368:	3114      	adds	r1, #20
   2036a:	4802      	ldr	r0, [pc, #8]	; (20374 <net_ipv6_nbr_set_reachable_timer+0x14>)
   2036c:	f009 fe6a 	bl	2a044 <k_delayed_work_submit_to_queue>
   20370:	bd08      	pop	{r3, pc}
   20372:	bf00      	nop
   20374:	20002c78 	.word	0x20002c78

00020378 <handle_na_input>:
{
   20378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2037c:	b090      	sub	sp, #64	; 0x40
   2037e:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   20380:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   20382:	2200      	movs	r2, #0
   20384:	e002      	b.n	2038c <handle_na_input+0x14>
		bytes += buf->len;
   20386:	8999      	ldrh	r1, [r3, #12]
   20388:	440a      	add	r2, r1
		buf = buf->frags;
   2038a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2038c:	2b00      	cmp	r3, #0
   2038e:	d1fa      	bne.n	20386 <handle_na_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   20390:	b295      	uxth	r5, r2
	na_hdr = net_icmpv6_get_na_hdr(pkt, &nahdr);
   20392:	a90a      	add	r1, sp, #40	; 0x28
   20394:	4620      	mov	r0, r4
   20396:	f7fe fd31 	bl	1edfc <net_icmpv6_get_na_hdr>
   2039a:	4607      	mov	r7, r0
	net_stats.ipv6_nd.recv++;
   2039c:	4aaf      	ldr	r2, [pc, #700]	; (2065c <handle_na_input+0x2e4>)
   2039e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   203a2:	3301      	adds	r3, #1
   203a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   203a8:	2d41      	cmp	r5, #65	; 0x41
   203aa:	d904      	bls.n	203b6 <handle_na_input+0x3e>
	return pkt->frags->data;
   203ac:	68a3      	ldr	r3, [r4, #8]
   203ae:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   203b0:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   203b2:	2bff      	cmp	r3, #255	; 0xff
   203b4:	d010      	beq.n	203d8 <handle_na_input+0x60>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   203b6:	a905      	add	r1, sp, #20
   203b8:	4620      	mov	r0, r4
   203ba:	f7fe fb22 	bl	1ea02 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   203be:	b108      	cbz	r0, 203c4 <handle_na_input+0x4c>
   203c0:	7843      	ldrb	r3, [r0, #1]
   203c2:	b1cb      	cbz	r3, 203f8 <handle_na_input+0x80>
	net_stats.ipv6_nd.drop++;
   203c4:	4aa5      	ldr	r2, [pc, #660]	; (2065c <handle_na_input+0x2e4>)
   203c6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   203ca:	3301      	adds	r3, #1
   203cc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   203d0:	2002      	movs	r0, #2
}
   203d2:	b010      	add	sp, #64	; 0x40
   203d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return addr->s6_addr[0] == 0xFF;
   203d8:	7903      	ldrb	r3, [r0, #4]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   203da:	2bff      	cmp	r3, #255	; 0xff
   203dc:	d0eb      	beq.n	203b6 <handle_na_input+0x3e>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   203de:	a905      	add	r1, sp, #20
   203e0:	4620      	mov	r0, r4
   203e2:	f7fe fd0b 	bl	1edfc <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   203e6:	7803      	ldrb	r3, [r0, #0]
	    net_is_ipv6_addr_mcast(&na_hdr->tgt) ||
   203e8:	f013 0f40 	tst.w	r3, #64	; 0x40
   203ec:	d004      	beq.n	203f8 <handle_na_input+0x80>
   203ee:	68a3      	ldr	r3, [r4, #8]
   203f0:	689b      	ldr	r3, [r3, #8]
   203f2:	7e1b      	ldrb	r3, [r3, #24]
	    (net_is_solicited(pkt) &&
   203f4:	2bff      	cmp	r3, #255	; 0xff
   203f6:	d0de      	beq.n	203b6 <handle_na_input+0x3e>
	pkt->ipv6_ext_opt_len = len;
   203f8:	2314      	movs	r3, #20
   203fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   203fe:	a90f      	add	r1, sp, #60	; 0x3c
   20400:	4620      	mov	r0, r4
   20402:	f7fe fcc9 	bl	1ed98 <net_icmpv6_get_nd_opt_hdr>
	return net_buf_frags_len(pkt->frags);
   20406:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   20408:	2600      	movs	r6, #0
	while (buf) {
   2040a:	b11b      	cbz	r3, 20414 <handle_na_input+0x9c>
		bytes += buf->len;
   2040c:	899a      	ldrh	r2, [r3, #12]
   2040e:	4416      	add	r6, r2
		buf = buf->frags;
   20410:	681b      	ldr	r3, [r3, #0]
   20412:	e7fa      	b.n	2040a <handle_na_input+0x92>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   20414:	3e2c      	subs	r6, #44	; 0x2c
	u16_t tllao_offset = 0;
   20416:	2500      	movs	r5, #0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   20418:	e00b      	b.n	20432 <handle_na_input+0xba>
					     (nd_opt_hdr->len << 3));
   2041a:	00db      	lsls	r3, r3, #3
   2041c:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   2041e:	4413      	add	r3, r2
   20420:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   20422:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   20426:	4293      	cmp	r3, r2
   20428:	d9cc      	bls.n	203c4 <handle_na_input+0x4c>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   2042a:	a90f      	add	r1, sp, #60	; 0x3c
   2042c:	4620      	mov	r0, r4
   2042e:	f7fe fcb3 	bl	1ed98 <net_icmpv6_get_nd_opt_hdr>
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   20432:	b190      	cbz	r0, 2045a <handle_na_input+0xe2>
	return pkt->ipv6_ext_opt_len;
   20434:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   20438:	4296      	cmp	r6, r2
   2043a:	d90e      	bls.n	2045a <handle_na_input+0xe2>
		if (!nd_opt_hdr->len) {
   2043c:	7843      	ldrb	r3, [r0, #1]
   2043e:	b163      	cbz	r3, 2045a <handle_na_input+0xe2>
		switch (nd_opt_hdr->type) {
   20440:	7801      	ldrb	r1, [r0, #0]
   20442:	2902      	cmp	r1, #2
   20444:	d1e9      	bne.n	2041a <handle_na_input+0xa2>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   20446:	f894 5033 	ldrb.w	r5, [r4, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   2044a:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   2044e:	440d      	add	r5, r1
				sizeof(struct net_icmp_hdr) +
   20450:	4415      	add	r5, r2
   20452:	b2ad      	uxth	r5, r5
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   20454:	3506      	adds	r5, #6
   20456:	b2ad      	uxth	r5, r5
			break;
   20458:	e7df      	b.n	2041a <handle_na_input+0xa2>
	return pkt->iface;
   2045a:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   2045e:	f107 0904 	add.w	r9, r7, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20462:	2600      	movs	r6, #0
   20464:	e003      	b.n	2046e <handle_na_input+0xf6>
		if (net_is_ipv6_prefix(addr->s6_addr,
   20466:	f1ba 0f00 	cmp.w	sl, #0
   2046a:	d11f      	bne.n	204ac <handle_na_input+0x134>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2046c:	3601      	adds	r6, #1
   2046e:	2e02      	cmp	r6, #2
   20470:	dc23      	bgt.n	204ba <handle_na_input+0x142>
		if (!iface->ipv6.unicast[i].is_used ||
   20472:	236c      	movs	r3, #108	; 0x6c
   20474:	fb03 8306 	mla	r3, r3, r6, r8
   20478:	f893 a094 	ldrb.w	sl, [r3, #148]	; 0x94
   2047c:	f1ba 0f00 	cmp.w	sl, #0
   20480:	d0f4      	beq.n	2046c <handle_na_input+0xf4>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   20482:	236c      	movs	r3, #108	; 0x6c
   20484:	fb03 8306 	mla	r3, r3, r6, r8
   20488:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   2048a:	2b0a      	cmp	r3, #10
   2048c:	d1ee      	bne.n	2046c <handle_na_input+0xf4>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   2048e:	216c      	movs	r1, #108	; 0x6c
   20490:	fb01 f106 	mul.w	r1, r1, r6
   20494:	3120      	adds	r1, #32
   20496:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   20498:	2210      	movs	r2, #16
   2049a:	4411      	add	r1, r2
   2049c:	4648      	mov	r0, r9
   2049e:	f00a f9a7 	bl	2a7f0 <memcmp>
   204a2:	2800      	cmp	r0, #0
   204a4:	d0df      	beq.n	20466 <handle_na_input+0xee>
		return false;
   204a6:	f04f 0a00 	mov.w	sl, #0
   204aa:	e7dc      	b.n	20466 <handle_na_input+0xee>
			return &iface->ipv6.unicast[i];
   204ac:	236c      	movs	r3, #108	; 0x6c
   204ae:	fb03 f306 	mul.w	r3, r3, r6
   204b2:	3320      	adds	r3, #32
   204b4:	4443      	add	r3, r8
   204b6:	330c      	adds	r3, #12
   204b8:	e000      	b.n	204bc <handle_na_input+0x144>
	return NULL;
   204ba:	2300      	movs	r3, #0
	if (ifaddr) {
   204bc:	b17b      	cbz	r3, 204de <handle_na_input+0x166>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   204be:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
   204c2:	2b00      	cmp	r3, #0
   204c4:	f47f af7e 	bne.w	203c4 <handle_na_input+0x4c>
   204c8:	6960      	ldr	r0, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   204ca:	88ba      	ldrh	r2, [r7, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   204cc:	f248 03fe 	movw	r3, #33022	; 0x80fe
   204d0:	429a      	cmp	r2, r3
   204d2:	f43f af77 	beq.w	203c4 <handle_na_input+0x4c>
	net_if_ipv6_dad_failed(iface, addr);
   204d6:	4649      	mov	r1, r9
   204d8:	f7fb fa0a 	bl	1b8f0 <net_if_ipv6_dad_failed>
   204dc:	e772      	b.n	203c4 <handle_na_input+0x4c>
	struct net_linkaddr_storage lladdr = { 0 };
   204de:	2300      	movs	r3, #0
   204e0:	9303      	str	r3, [sp, #12]
   204e2:	9304      	str	r3, [sp, #16]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   204e4:	1d3a      	adds	r2, r7, #4
   204e6:	6961      	ldr	r1, [r4, #20]
   204e8:	485d      	ldr	r0, [pc, #372]	; (20660 <handle_na_input+0x2e8>)
   204ea:	f7ff f999 	bl	1f820 <nbr_lookup>
	if (!nbr) {
   204ee:	4606      	mov	r6, r0
   204f0:	2800      	cmp	r0, #0
   204f2:	f000 8107 	beq.w	20704 <handle_na_input+0x38c>
	if (tllao_offset) {
   204f6:	b995      	cbnz	r5, 2051e <handle_na_input+0x1a6>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   204f8:	7873      	ldrb	r3, [r6, #1]
   204fa:	2bff      	cmp	r3, #255	; 0xff
   204fc:	d135      	bne.n	2056a <handle_na_input+0x1f2>
		if (!tllao_offset) {
   204fe:	bb2d      	cbnz	r5, 2054c <handle_na_input+0x1d4>
			return false;
   20500:	2300      	movs	r3, #0
	if (!handle_na_neighbor(pkt, na_hdr, tllao_offset)) {
   20502:	2b00      	cmp	r3, #0
   20504:	f43f af5e 	beq.w	203c4 <handle_na_input+0x4c>
	net_pkt_unref(pkt);
   20508:	4620      	mov	r0, r4
   2050a:	f7fd f976 	bl	1d7fa <net_pkt_unref>
	net_stats.ipv6_nd.sent++;
   2050e:	4a53      	ldr	r2, [pc, #332]	; (2065c <handle_na_input+0x2e4>)
   20510:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   20514:	3301      	adds	r3, #1
   20516:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return NET_OK;
   2051a:	2000      	movs	r0, #0
   2051c:	e759      	b.n	203d2 <handle_na_input+0x5a>
   2051e:	6963      	ldr	r3, [r4, #20]
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   20520:	7d1b      	ldrb	r3, [r3, #20]
   20522:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   20526:	f10d 020e 	add.w	r2, sp, #14
   2052a:	9200      	str	r2, [sp, #0]
   2052c:	f10d 020a 	add.w	r2, sp, #10
   20530:	4629      	mov	r1, r5
   20532:	68a0      	ldr	r0, [r4, #8]
   20534:	f7fd fadf 	bl	1daf6 <net_frag_read>
		if (!frag && pos == 0xffff) {
   20538:	2800      	cmp	r0, #0
   2053a:	d1dd      	bne.n	204f8 <handle_na_input+0x180>
   2053c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   20540:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20544:	429a      	cmp	r2, r3
   20546:	d1d7      	bne.n	204f8 <handle_na_input+0x180>
			return false;
   20548:	2300      	movs	r3, #0
   2054a:	e7da      	b.n	20502 <handle_na_input+0x18a>
		nbr_lladdr.len = lladdr.len;
   2054c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   20550:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   20554:	aa10      	add	r2, sp, #64	; 0x40
   20556:	f10d 030e 	add.w	r3, sp, #14
   2055a:	f842 3d2c 	str.w	r3, [r2, #-44]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   2055e:	6961      	ldr	r1, [r4, #20]
   20560:	4630      	mov	r0, r6
   20562:	f7fe ff77 	bl	1f454 <net_nbr_link>
   20566:	2800      	cmp	r0, #0
   20568:	d14a      	bne.n	20600 <handle_na_input+0x288>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   2056a:	7870      	ldrb	r0, [r6, #1]
   2056c:	f7fe ffd8 	bl	1f520 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   20570:	4680      	mov	r8, r0
   20572:	2800      	cmp	r0, #0
   20574:	f000 80c8 	beq.w	20708 <handle_na_input+0x390>
	if (tllao_offset) {
   20578:	2d00      	cmp	r5, #0
   2057a:	d145      	bne.n	20608 <handle_na_input+0x290>
	bool lladdr_changed = false;
   2057c:	2700      	movs	r7, #0
   2057e:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   20580:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   20584:	2b00      	cmp	r3, #0
   20586:	d155      	bne.n	20634 <handle_na_input+0x2bc>
		if (!tllao_offset) {
   20588:	2d00      	cmp	r5, #0
   2058a:	f000 80bf 	beq.w	2070c <handle_na_input+0x394>
		if (lladdr_changed) {
   2058e:	b11f      	cbz	r7, 20598 <handle_na_input+0x220>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   20590:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   20594:	2a06      	cmp	r2, #6
   20596:	d941      	bls.n	2061c <handle_na_input+0x2a4>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20598:	a905      	add	r1, sp, #20
   2059a:	4620      	mov	r0, r4
   2059c:	f7fe fc2e 	bl	1edfc <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   205a0:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   205a2:	f013 0f40 	tst.w	r3, #64	; 0x40
   205a6:	d040      	beq.n	2062a <handle_na_input+0x2b2>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   205a8:	2101      	movs	r1, #1
   205aa:	4630      	mov	r0, r6
   205ac:	f7fe ffc0 	bl	1f530 <ipv6_nbr_set_state>
   205b0:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   205b2:	2200      	movs	r2, #0
   205b4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   205b8:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   205ba:	3014      	adds	r0, #20
   205bc:	f009 fce8 	bl	29f90 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   205c0:	4631      	mov	r1, r6
   205c2:	6960      	ldr	r0, [r4, #20]
   205c4:	f7ff fecc 	bl	20360 <net_ipv6_nbr_set_reachable_timer>
   205c8:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   205ca:	a905      	add	r1, sp, #20
   205cc:	4620      	mov	r0, r4
   205ce:	f7fe fc15 	bl	1edfc <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   205d2:	7803      	ldrb	r3, [r0, #0]
   205d4:	09db      	lsrs	r3, r3, #7
		net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   205d6:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   205da:	68f3      	ldr	r3, [r6, #12]
	pending = net_ipv6_nbr_data(nbr)->pending;
   205dc:	681d      	ldr	r5, [r3, #0]
	if (pending) {
   205de:	2d00      	cmp	r5, #0
   205e0:	f000 8098 	beq.w	20714 <handle_na_input+0x39c>
		if (net_send_data(pending) < 0) {
   205e4:	4628      	mov	r0, r5
   205e6:	f7fa fd07 	bl	1aff8 <net_send_data>
   205ea:	2800      	cmp	r0, #0
   205ec:	f2c0 8086 	blt.w	206fc <handle_na_input+0x384>
   205f0:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->pending = NULL;
   205f2:	2200      	movs	r2, #0
   205f4:	601a      	str	r2, [r3, #0]
		net_pkt_unref(pending);
   205f6:	4628      	mov	r0, r5
   205f8:	f7fd f8ff 	bl	1d7fa <net_pkt_unref>
	return true;
   205fc:	2301      	movs	r3, #1
   205fe:	e780      	b.n	20502 <handle_na_input+0x18a>
			nbr_free(nbr);
   20600:	4630      	mov	r0, r6
   20602:	f7ff fa53 	bl	1faac <nbr_free>
   20606:	e77b      	b.n	20500 <handle_na_input+0x188>
		lladdr_changed = memcmp(lladdr.addr,
   20608:	7842      	ldrb	r2, [r0, #1]
   2060a:	1c81      	adds	r1, r0, #2
   2060c:	f10d 000e 	add.w	r0, sp, #14
   20610:	f00a f8ee 	bl	2a7f0 <memcmp>
   20614:	1c07      	adds	r7, r0, #0
   20616:	bf18      	it	ne
   20618:	2701      	movne	r7, #1
   2061a:	e7b0      	b.n	2057e <handle_na_input+0x206>
	memcpy(lladdr_store->addr, new_addr, new_len);
   2061c:	f10d 010e 	add.w	r1, sp, #14
   20620:	f108 0002 	add.w	r0, r8, #2
   20624:	f7df fe4c 	bl	2c0 <memcpy>
   20628:	e7b6      	b.n	20598 <handle_na_input+0x220>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   2062a:	2102      	movs	r1, #2
   2062c:	4630      	mov	r0, r6
   2062e:	f7fe ff7f 	bl	1f530 <ipv6_nbr_set_state>
   20632:	e7c9      	b.n	205c8 <handle_na_input+0x250>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20634:	a905      	add	r1, sp, #20
   20636:	4620      	mov	r0, r4
   20638:	f7fe fbe0 	bl	1edfc <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   2063c:	7803      	ldrb	r3, [r0, #0]
	if (!net_is_override(pkt) && lladdr_changed) {
   2063e:	f013 0f20 	tst.w	r3, #32
   20642:	d10f      	bne.n	20664 <handle_na_input+0x2ec>
   20644:	b177      	cbz	r7, 20664 <handle_na_input+0x2ec>
   20646:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state ==
   20648:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   2064c:	2b01      	cmp	r3, #1
   2064e:	d15f      	bne.n	20710 <handle_na_input+0x398>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   20650:	2102      	movs	r1, #2
   20652:	4630      	mov	r0, r6
   20654:	f7fe ff6c 	bl	1f530 <ipv6_nbr_set_state>
		return false;
   20658:	2300      	movs	r3, #0
   2065a:	e752      	b.n	20502 <handle_na_input+0x18a>
   2065c:	20002b58 	.word	0x20002b58
   20660:	2000bf54 	.word	0x2000bf54
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20664:	a905      	add	r1, sp, #20
   20666:	4620      	mov	r0, r4
   20668:	f7fe fbc8 	bl	1edfc <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   2066c:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   2066e:	f013 0f20 	tst.w	r3, #32
   20672:	d018      	beq.n	206a6 <handle_na_input+0x32e>
		if (lladdr_changed) {
   20674:	b14f      	cbz	r7, 2068a <handle_na_input+0x312>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   20676:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   2067a:	2a06      	cmp	r2, #6
   2067c:	d805      	bhi.n	2068a <handle_na_input+0x312>
	memcpy(lladdr_store->addr, new_addr, new_len);
   2067e:	f10d 010e 	add.w	r1, sp, #14
   20682:	f108 0002 	add.w	r0, r8, #2
   20686:	f7df fe1b 	bl	2c0 <memcpy>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2068a:	a905      	add	r1, sp, #20
   2068c:	4620      	mov	r0, r4
   2068e:	f7fe fbb5 	bl	1edfc <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   20692:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   20694:	f013 0f40 	tst.w	r3, #64	; 0x40
   20698:	d11e      	bne.n	206d8 <handle_na_input+0x360>
			if (lladdr_changed) {
   2069a:	b17f      	cbz	r7, 206bc <handle_na_input+0x344>
				ipv6_nbr_set_state(nbr,
   2069c:	2102      	movs	r1, #2
   2069e:	4630      	mov	r0, r6
   206a0:	f7fe ff46 	bl	1f530 <ipv6_nbr_set_state>
   206a4:	e00a      	b.n	206bc <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   206a6:	a905      	add	r1, sp, #20
   206a8:	4620      	mov	r0, r4
   206aa:	f7fe fba7 	bl	1edfc <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   206ae:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   206b0:	f013 0f20 	tst.w	r3, #32
   206b4:	d102      	bne.n	206bc <handle_na_input+0x344>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   206b6:	b10d      	cbz	r5, 206bc <handle_na_input+0x344>
   206b8:	2f00      	cmp	r7, #0
   206ba:	d0db      	beq.n	20674 <handle_na_input+0x2fc>
   206bc:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   206be:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   206c2:	b9b3      	cbnz	r3, 206f2 <handle_na_input+0x37a>
   206c4:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   206c6:	a905      	add	r1, sp, #20
   206c8:	4620      	mov	r0, r4
   206ca:	f7fe fb97 	bl	1edfc <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   206ce:	7803      	ldrb	r3, [r0, #0]
   206d0:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   206d2:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   206d6:	e780      	b.n	205da <handle_na_input+0x262>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   206d8:	2101      	movs	r1, #1
   206da:	4630      	mov	r0, r6
   206dc:	f7fe ff28 	bl	1f530 <ipv6_nbr_set_state>
   206e0:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   206e2:	3014      	adds	r0, #20
   206e4:	f009 fc54 	bl	29f90 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   206e8:	4631      	mov	r1, r6
   206ea:	6960      	ldr	r0, [r4, #20]
   206ec:	f7ff fe38 	bl	20360 <net_ipv6_nbr_set_reachable_timer>
   206f0:	e7e4      	b.n	206bc <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   206f2:	a905      	add	r1, sp, #20
   206f4:	4620      	mov	r0, r4
   206f6:	f7fe fb81 	bl	1edfc <net_icmpv6_get_na_hdr>
   206fa:	e7e3      	b.n	206c4 <handle_na_input+0x34c>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   206fc:	68f0      	ldr	r0, [r6, #12]
   206fe:	f7ff f8af 	bl	1f860 <nbr_clear_ns_pending>
   20702:	e778      	b.n	205f6 <handle_na_input+0x27e>
		return false;
   20704:	2300      	movs	r3, #0
   20706:	e6fc      	b.n	20502 <handle_na_input+0x18a>
		return false;
   20708:	2300      	movs	r3, #0
   2070a:	e6fa      	b.n	20502 <handle_na_input+0x18a>
			return false;
   2070c:	2300      	movs	r3, #0
   2070e:	e6f8      	b.n	20502 <handle_na_input+0x18a>
		return false;
   20710:	2300      	movs	r3, #0
   20712:	e6f6      	b.n	20502 <handle_na_input+0x18a>
	return true;
   20714:	2301      	movs	r3, #1
   20716:	e6f4      	b.n	20502 <handle_na_input+0x18a>

00020718 <net_ipv6_send_ns>:
{
   20718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2071c:	b09d      	sub	sp, #116	; 0x74
   2071e:	4605      	mov	r5, r0
   20720:	9101      	str	r1, [sp, #4]
   20722:	4691      	mov	r9, r2
   20724:	461e      	mov	r6, r3
   20726:	9f26      	ldr	r7, [sp, #152]	; 0x98
   20728:	f89d b09c 	ldrb.w	fp, [sp, #156]	; 0x9c
	return iface->l2->reserve(iface, (void *)dst_ip6);
   2072c:	6843      	ldr	r3, [r0, #4]
   2072e:	689b      	ldr	r3, [r3, #8]
   20730:	4631      	mov	r1, r6
   20732:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   20734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20738:	f7fc ffee 	bl	1d718 <net_pkt_get_reserve_tx>
   2073c:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   2073e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20742:	f7fd f807 	bl	1d754 <net_pkt_get_frag>
   20746:	4682      	mov	sl, r0
	net_pkt_frag_add(pkt, frag);
   20748:	4601      	mov	r1, r0
   2074a:	4620      	mov	r0, r4
   2074c:	f7fd f87f 	bl	1d84e <net_pkt_frag_add>
	pkt->iface = iface;
   20750:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20752:	7d6b      	ldrb	r3, [r5, #21]
   20754:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20758:	7d6b      	ldrb	r3, [r5, #21]
   2075a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   2075e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   20762:	220a      	movs	r2, #10
   20764:	f362 03c6 	bfi	r3, r2, #3, #4
   20768:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   2076c:	2328      	movs	r3, #40	; 0x28
   2076e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	pkt->ipv6_ext_len = len;
   20772:	2500      	movs	r5, #0
   20774:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
	return pkt->frags->data;
   20778:	68a3      	ldr	r3, [r4, #8]
   2077a:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   2077c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   20780:	461a      	mov	r2, r3
   20782:	4629      	mov	r1, r5
   20784:	1ac0      	subs	r0, r0, r3
   20786:	f00a f8c7 	bl	2a918 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   2078a:	6225      	str	r5, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   2078c:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return pkt->iface;
   20790:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   20792:	7d1b      	ldrb	r3, [r3, #20]
   20794:	2b06      	cmp	r3, #6
   20796:	f000 808b 	beq.w	208b0 <net_ipv6_send_ns+0x198>
	} else if (iface->link_addr.len == 8) {
   2079a:	2b08      	cmp	r3, #8
   2079c:	f000 8085 	beq.w	208aa <net_ipv6_send_ns+0x192>
	return 0;
   207a0:	f04f 0800 	mov.w	r8, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   207a4:	2287      	movs	r2, #135	; 0x87
   207a6:	f108 0114 	add.w	r1, r8, #20
   207aa:	4620      	mov	r0, r4
   207ac:	f7ff f951 	bl	1fa52 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   207b0:	f10a 0a08 	add.w	sl, sl, #8
   207b4:	2114      	movs	r1, #20
   207b6:	4650      	mov	r0, sl
   207b8:	f7fa fafc 	bl	1adb4 <net_buf_simple_add>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &hdr);
   207bc:	a903      	add	r1, sp, #12
   207be:	4620      	mov	r0, r4
   207c0:	f7fe fa8e 	bl	1ece0 <net_icmpv6_get_ns_hdr>
   207c4:	4605      	mov	r5, r0
	if (!dst) {
   207c6:	2e00      	cmp	r6, #0
   207c8:	d075      	beq.n	208b6 <net_ipv6_send_ns+0x19e>
	return pkt->frags->data;
   207ca:	68a3      	ldr	r3, [r4, #8]
   207cc:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   207d0:	f10d 0c20 	add.w	ip, sp, #32
   207d4:	6830      	ldr	r0, [r6, #0]
   207d6:	6871      	ldr	r1, [r6, #4]
   207d8:	68b2      	ldr	r2, [r6, #8]
   207da:	68f3      	ldr	r3, [r6, #12]
   207dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   207e0:	ae08      	add	r6, sp, #32
   207e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   207e4:	f8ce 0018 	str.w	r0, [lr, #24]
   207e8:	f8ce 101c 	str.w	r1, [lr, #28]
   207ec:	f8ce 2020 	str.w	r2, [lr, #32]
   207f0:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   207f4:	ae0c      	add	r6, sp, #48	; 0x30
   207f6:	6838      	ldr	r0, [r7, #0]
   207f8:	6879      	ldr	r1, [r7, #4]
   207fa:	68ba      	ldr	r2, [r7, #8]
   207fc:	68fb      	ldr	r3, [r7, #12]
   207fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20800:	1d2f      	adds	r7, r5, #4
   20802:	ae0c      	add	r6, sp, #48	; 0x30
   20804:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20806:	6068      	str	r0, [r5, #4]
   20808:	6079      	str	r1, [r7, #4]
   2080a:	60ba      	str	r2, [r7, #8]
   2080c:	60fb      	str	r3, [r7, #12]
	net_icmpv6_set_ns_hdr(pkt, ns_hdr);
   2080e:	4629      	mov	r1, r5
   20810:	4620      	mov	r0, r4
   20812:	f7fe fa89 	bl	1ed28 <net_icmpv6_set_ns_hdr>
	if (is_my_address) {
   20816:	f1bb 0f00 	cmp.w	fp, #0
   2081a:	d06a      	beq.n	208f2 <net_ipv6_send_ns+0x1da>
   2081c:	68a3      	ldr	r3, [r4, #8]
   2081e:	689f      	ldr	r7, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   20820:	f7ff f9ac 	bl	1fb7c <net_ipv6_unspecified_address>
   20824:	4603      	mov	r3, r0
   20826:	ae10      	add	r6, sp, #64	; 0x40
   20828:	6800      	ldr	r0, [r0, #0]
   2082a:	6859      	ldr	r1, [r3, #4]
   2082c:	689a      	ldr	r2, [r3, #8]
   2082e:	68db      	ldr	r3, [r3, #12]
   20830:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20832:	ae10      	add	r6, sp, #64	; 0x40
   20834:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20836:	60b8      	str	r0, [r7, #8]
   20838:	60f9      	str	r1, [r7, #12]
   2083a:	613a      	str	r2, [r7, #16]
   2083c:	617b      	str	r3, [r7, #20]
   2083e:	68a3      	ldr	r3, [r4, #8]
   20840:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->len[1] -= llao_len;
   20842:	795a      	ldrb	r2, [r3, #5]
   20844:	eba2 0808 	sub.w	r8, r2, r8
   20848:	f883 8005 	strb.w	r8, [r3, #5]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   2084c:	68a1      	ldr	r1, [r4, #8]
   2084e:	4620      	mov	r0, r4
   20850:	f7fe f88a 	bl	1e968 <net_icmpv6_set_chksum>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr->tgt);
   20854:	3504      	adds	r5, #4
   20856:	462a      	mov	r2, r5
   20858:	6961      	ldr	r1, [r4, #20]
   2085a:	486f      	ldr	r0, [pc, #444]	; (20a18 <net_ipv6_send_ns+0x300>)
   2085c:	f7fe ffe0 	bl	1f820 <nbr_lookup>
	if (!nbr) {
   20860:	4606      	mov	r6, r0
   20862:	2800      	cmp	r0, #0
   20864:	f000 80ad 	beq.w	209c2 <net_ipv6_send_ns+0x2aa>
	if (pending) {
   20868:	9801      	ldr	r0, [sp, #4]
   2086a:	b170      	cbz	r0, 2088a <net_ipv6_send_ns+0x172>
   2086c:	68f5      	ldr	r5, [r6, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
   2086e:	682b      	ldr	r3, [r5, #0]
   20870:	2b00      	cmp	r3, #0
   20872:	f040 80b1 	bne.w	209d8 <net_ipv6_send_ns+0x2c0>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   20876:	f7fc ffb1 	bl	1d7dc <net_pkt_ref>
   2087a:	6028      	str	r0, [r5, #0]
   2087c:	68f1      	ldr	r1, [r6, #12]
   2087e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20882:	313c      	adds	r1, #60	; 0x3c
   20884:	4865      	ldr	r0, [pc, #404]	; (20a1c <net_ipv6_send_ns+0x304>)
   20886:	f009 fbdd 	bl	2a044 <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   2088a:	4620      	mov	r0, r4
   2088c:	f7fa fbb4 	bl	1aff8 <net_send_data>
   20890:	2800      	cmp	r0, #0
   20892:	f2c0 80b0 	blt.w	209f6 <net_ipv6_send_ns+0x2de>
   20896:	4a62      	ldr	r2, [pc, #392]	; (20a20 <net_ipv6_send_ns+0x308>)
   20898:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   2089c:	3301      	adds	r3, #1
   2089e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   208a2:	2000      	movs	r0, #0
}
   208a4:	b01d      	add	sp, #116	; 0x74
   208a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   208aa:	f04f 0810 	mov.w	r8, #16
   208ae:	e779      	b.n	207a4 <net_ipv6_send_ns+0x8c>
		return 8;
   208b0:	f04f 0808 	mov.w	r8, #8
   208b4:	e776      	b.n	207a4 <net_ipv6_send_ns+0x8c>
   208b6:	68a3      	ldr	r3, [r4, #8]
   208b8:	689b      	ldr	r3, [r3, #8]
	dst->s6_addr[0]   = 0xFF;
   208ba:	21ff      	movs	r1, #255	; 0xff
   208bc:	7619      	strb	r1, [r3, #24]
	dst->s6_addr[1]   = 0x02;
   208be:	2202      	movs	r2, #2
   208c0:	765a      	strb	r2, [r3, #25]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   208c2:	2200      	movs	r2, #0
   208c4:	769a      	strb	r2, [r3, #26]
   208c6:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   208c8:	771a      	strb	r2, [r3, #28]
   208ca:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   208cc:	779a      	strb	r2, [r3, #30]
   208ce:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   208d0:	f883 2020 	strb.w	r2, [r3, #32]
   208d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	dst->s6_addr[10]  = 0;
   208d8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   208dc:	2201      	movs	r2, #1
   208de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	dst->s6_addr[12]  = 0xFF;
   208e2:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   208e6:	7b7a      	ldrb	r2, [r7, #13]
   208e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   208ec:	89fa      	ldrh	r2, [r7, #14]
   208ee:	84da      	strh	r2, [r3, #38]	; 0x26
   208f0:	e780      	b.n	207f4 <net_ipv6_send_ns+0xdc>
		if (src) {
   208f2:	f1b9 0f00 	cmp.w	r9, #0
   208f6:	d025      	beq.n	20944 <net_ipv6_send_ns+0x22c>
   208f8:	68a3      	ldr	r3, [r4, #8]
   208fa:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   208fe:	ae14      	add	r6, sp, #80	; 0x50
   20900:	f8d9 0000 	ldr.w	r0, [r9]
   20904:	f8d9 1004 	ldr.w	r1, [r9, #4]
   20908:	f8d9 2008 	ldr.w	r2, [r9, #8]
   2090c:	f8d9 300c 	ldr.w	r3, [r9, #12]
   20910:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20912:	ae14      	add	r6, sp, #80	; 0x50
   20914:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20916:	f8ce 0008 	str.w	r0, [lr, #8]
   2091a:	f8ce 100c 	str.w	r1, [lr, #12]
   2091e:	f8ce 2010 	str.w	r2, [lr, #16]
   20922:	f8ce 3014 	str.w	r3, [lr, #20]
   20926:	68a3      	ldr	r3, [r4, #8]
   20928:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2092a:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2092c:	b9fa      	cbnz	r2, 2096e <net_ipv6_send_ns+0x256>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2092e:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20930:	2a00      	cmp	r2, #0
   20932:	d140      	bne.n	209b6 <net_ipv6_send_ns+0x29e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20934:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20936:	2a00      	cmp	r2, #0
   20938:	d13f      	bne.n	209ba <net_ipv6_send_ns+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2093a:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2093c:	2b00      	cmp	r3, #0
   2093e:	d03e      	beq.n	209be <net_ipv6_send_ns+0x2a6>
   20940:	2300      	movs	r3, #0
   20942:	e015      	b.n	20970 <net_ipv6_send_ns+0x258>
   20944:	68a3      	ldr	r3, [r4, #8]
   20946:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   20948:	f107 0118 	add.w	r1, r7, #24
   2094c:	6960      	ldr	r0, [r4, #20]
   2094e:	f7fb fab9 	bl	1bec4 <net_if_ipv6_select_src_addr>
   20952:	4603      	mov	r3, r0
   20954:	ae18      	add	r6, sp, #96	; 0x60
   20956:	6800      	ldr	r0, [r0, #0]
   20958:	6859      	ldr	r1, [r3, #4]
   2095a:	689a      	ldr	r2, [r3, #8]
   2095c:	68db      	ldr	r3, [r3, #12]
   2095e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20960:	ae18      	add	r6, sp, #96	; 0x60
   20962:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20964:	60b8      	str	r0, [r7, #8]
   20966:	60f9      	str	r1, [r7, #12]
   20968:	613a      	str	r2, [r7, #16]
   2096a:	617b      	str	r3, [r7, #20]
   2096c:	e7db      	b.n	20926 <net_ipv6_send_ns+0x20e>
   2096e:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   20970:	bbab      	cbnz	r3, 209de <net_ipv6_send_ns+0x2c6>
		net_buf_add(frag, llao_len);
   20972:	4641      	mov	r1, r8
   20974:	4650      	mov	r0, sl
   20976:	f7fa fa1d 	bl	1adb4 <net_buf_simple_add>
	return pkt->iface;
   2097a:	f8d4 9014 	ldr.w	r9, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   2097e:	4620      	mov	r0, r4
   20980:	f7fd fa14 	bl	1ddac <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   20984:	f100 0618 	add.w	r6, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   20988:	2301      	movs	r3, #1
   2098a:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   2098c:	ea4f 03d8 	mov.w	r3, r8, lsr #3
   20990:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   20992:	f899 2014 	ldrb.w	r2, [r9, #20]
   20996:	f8d9 1010 	ldr.w	r1, [r9, #16]
   2099a:	301a      	adds	r0, #26
   2099c:	f7df fc90 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   209a0:	f899 2014 	ldrb.w	r2, [r9, #20]
   209a4:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   209a6:	eba8 0202 	sub.w	r2, r8, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   209aa:	3a02      	subs	r2, #2
   209ac:	2100      	movs	r1, #0
   209ae:	4430      	add	r0, r6
   209b0:	f009 ffb2 	bl	2a918 <memset>
   209b4:	e74a      	b.n	2084c <net_ipv6_send_ns+0x134>
   209b6:	2300      	movs	r3, #0
   209b8:	e7da      	b.n	20970 <net_ipv6_send_ns+0x258>
   209ba:	2300      	movs	r3, #0
   209bc:	e7d8      	b.n	20970 <net_ipv6_send_ns+0x258>
   209be:	2301      	movs	r3, #1
   209c0:	e7d6      	b.n	20970 <net_ipv6_send_ns+0x258>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr->tgt, false,
   209c2:	2300      	movs	r3, #0
   209c4:	461a      	mov	r2, r3
   209c6:	4629      	mov	r1, r5
   209c8:	6960      	ldr	r0, [r4, #20]
   209ca:	f7fe ffab 	bl	1f924 <nbr_new>
		if (!nbr) {
   209ce:	4606      	mov	r6, r0
   209d0:	2800      	cmp	r0, #0
   209d2:	f47f af49 	bne.w	20868 <net_ipv6_send_ns+0x150>
   209d6:	e002      	b.n	209de <net_ipv6_send_ns+0x2c6>
			net_pkt_unref(pending);
   209d8:	9801      	ldr	r0, [sp, #4]
   209da:	f7fc ff0e 	bl	1d7fa <net_pkt_unref>
	net_pkt_unref(pkt);
   209de:	4620      	mov	r0, r4
   209e0:	f7fc ff0b 	bl	1d7fa <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   209e4:	4a0e      	ldr	r2, [pc, #56]	; (20a20 <net_ipv6_send_ns+0x308>)
   209e6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   209ea:	3301      	adds	r3, #1
   209ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   209f0:	f06f 0015 	mvn.w	r0, #21
   209f4:	e756      	b.n	208a4 <net_ipv6_send_ns+0x18c>
		if (pending) {
   209f6:	9b01      	ldr	r3, [sp, #4]
   209f8:	2b00      	cmp	r3, #0
   209fa:	d0f0      	beq.n	209de <net_ipv6_send_ns+0x2c6>
   209fc:	68f5      	ldr	r5, [r6, #12]
	k_delayed_work_cancel(&data->send_ns);
   209fe:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   20a02:	f009 fac5 	bl	29f90 <k_delayed_work_cancel>
	if (data->pending) {
   20a06:	6828      	ldr	r0, [r5, #0]
   20a08:	2800      	cmp	r0, #0
   20a0a:	d0e8      	beq.n	209de <net_ipv6_send_ns+0x2c6>
		net_pkt_unref(data->pending);
   20a0c:	f7fc fef5 	bl	1d7fa <net_pkt_unref>
		data->pending = NULL;
   20a10:	2300      	movs	r3, #0
   20a12:	602b      	str	r3, [r5, #0]
   20a14:	e7e3      	b.n	209de <net_ipv6_send_ns+0x2c6>
   20a16:	bf00      	nop
   20a18:	2000bf54 	.word	0x2000bf54
   20a1c:	20002c78 	.word	0x20002c78
   20a20:	20002b58 	.word	0x20002b58

00020a24 <net_ipv6_nbr_add>:
{
   20a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20a28:	b083      	sub	sp, #12
   20a2a:	4605      	mov	r5, r0
   20a2c:	460e      	mov	r6, r1
   20a2e:	4617      	mov	r7, r2
   20a30:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   20a32:	460a      	mov	r2, r1
   20a34:	4601      	mov	r1, r0
   20a36:	482c      	ldr	r0, [pc, #176]	; (20ae8 <net_ipv6_nbr_add+0xc4>)
   20a38:	f7fe fef2 	bl	1f820 <nbr_lookup>
	if (!nbr) {
   20a3c:	4604      	mov	r4, r0
   20a3e:	b180      	cbz	r0, 20a62 <net_ipv6_nbr_add+0x3e>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   20a40:	463a      	mov	r2, r7
   20a42:	4629      	mov	r1, r5
   20a44:	4620      	mov	r0, r4
   20a46:	f7fe fd05 	bl	1f454 <net_nbr_link>
   20a4a:	f110 0f78 	cmn.w	r0, #120	; 0x78
   20a4e:	d013      	beq.n	20a78 <net_ipv6_nbr_add+0x54>
   20a50:	68e3      	ldr	r3, [r4, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   20a52:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   20a56:	2b00      	cmp	r3, #0
   20a58:	d03c      	beq.n	20ad4 <net_ipv6_nbr_add+0xb0>
}
   20a5a:	4620      	mov	r0, r4
   20a5c:	b003      	add	sp, #12
   20a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nbr = nbr_new(iface, addr, is_router, state);
   20a62:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   20a66:	4642      	mov	r2, r8
   20a68:	4631      	mov	r1, r6
   20a6a:	4628      	mov	r0, r5
   20a6c:	f7fe ff5a 	bl	1f924 <nbr_new>
		if (!nbr) {
   20a70:	4604      	mov	r4, r0
   20a72:	2800      	cmp	r0, #0
   20a74:	d1e4      	bne.n	20a40 <net_ipv6_nbr_add+0x1c>
   20a76:	e7f0      	b.n	20a5a <net_ipv6_nbr_add+0x36>
   20a78:	68e3      	ldr	r3, [r4, #12]
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   20a7a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   20a7e:	2b05      	cmp	r3, #5
   20a80:	d0e6      	beq.n	20a50 <net_ipv6_nbr_add+0x2c>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   20a82:	7860      	ldrb	r0, [r4, #1]
   20a84:	f7fe fd4c 	bl	1f520 <net_nbr_get_lladdr>
   20a88:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   20a8a:	f100 0902 	add.w	r9, r0, #2
   20a8e:	793a      	ldrb	r2, [r7, #4]
   20a90:	6839      	ldr	r1, [r7, #0]
   20a92:	4648      	mov	r0, r9
   20a94:	f009 feac 	bl	2a7f0 <memcmp>
   20a98:	b190      	cbz	r0, 20ac0 <net_ipv6_nbr_add+0x9c>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   20a9a:	6839      	ldr	r1, [r7, #0]
   20a9c:	793a      	ldrb	r2, [r7, #4]
	if (!lladdr_store || !new_addr) {
   20a9e:	f1b8 0f00 	cmp.w	r8, #0
   20aa2:	d002      	beq.n	20aaa <net_ipv6_nbr_add+0x86>
   20aa4:	b109      	cbz	r1, 20aaa <net_ipv6_nbr_add+0x86>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   20aa6:	2a06      	cmp	r2, #6
   20aa8:	d904      	bls.n	20ab4 <net_ipv6_nbr_add+0x90>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   20aaa:	2102      	movs	r1, #2
   20aac:	4620      	mov	r0, r4
   20aae:	f7fe fd3f 	bl	1f530 <ipv6_nbr_set_state>
   20ab2:	e7cd      	b.n	20a50 <net_ipv6_nbr_add+0x2c>
	lladdr_store->len = new_len;
   20ab4:	f888 2001 	strb.w	r2, [r8, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   20ab8:	4648      	mov	r0, r9
   20aba:	f7df fc01 	bl	2c0 <memcpy>
   20abe:	e7f4      	b.n	20aaa <net_ipv6_nbr_add+0x86>
   20ac0:	68e3      	ldr	r3, [r4, #12]
		} else if (net_ipv6_nbr_data(nbr)->state ==
   20ac2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   20ac6:	2b00      	cmp	r3, #0
   20ac8:	d1c2      	bne.n	20a50 <net_ipv6_nbr_add+0x2c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   20aca:	2102      	movs	r1, #2
   20acc:	4620      	mov	r0, r4
   20ace:	f7fe fd2f 	bl	1f530 <ipv6_nbr_set_state>
   20ad2:	e7bd      	b.n	20a50 <net_ipv6_nbr_add+0x2c>
		net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   20ad4:	2100      	movs	r1, #0
   20ad6:	9101      	str	r1, [sp, #4]
   20ad8:	9600      	str	r6, [sp, #0]
   20ada:	460b      	mov	r3, r1
   20adc:	460a      	mov	r2, r1
   20ade:	4628      	mov	r0, r5
   20ae0:	f7ff fe1a 	bl	20718 <net_ipv6_send_ns>
   20ae4:	e7b9      	b.n	20a5a <net_ipv6_nbr_add+0x36>
   20ae6:	bf00      	nop
   20ae8:	2000bf54 	.word	0x2000bf54

00020aec <handle_ra_input>:
{
   20aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20af0:	b098      	sub	sp, #96	; 0x60
   20af2:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
   20af4:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   20af6:	2200      	movs	r2, #0
   20af8:	e002      	b.n	20b00 <handle_ra_input+0x14>
		bytes += buf->len;
   20afa:	8999      	ldrh	r1, [r3, #12]
   20afc:	440a      	add	r2, r1
		buf = buf->frags;
   20afe:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20b00:	2b00      	cmp	r3, #0
   20b02:	d1fa      	bne.n	20afa <handle_ra_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   20b04:	b292      	uxth	r2, r2
	net_stats.ipv6_nd.recv++;
   20b06:	49b7      	ldr	r1, [pc, #732]	; (20de4 <handle_ra_input+0x2f8>)
   20b08:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   20b0c:	3301      	adds	r3, #1
   20b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   20b12:	2a39      	cmp	r2, #57	; 0x39
   20b14:	d904      	bls.n	20b20 <handle_ra_input+0x34>
	return pkt->frags->data;
   20b16:	68b3      	ldr	r3, [r6, #8]
   20b18:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20b1a:	79da      	ldrb	r2, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   20b1c:	2aff      	cmp	r2, #255	; 0xff
   20b1e:	d010      	beq.n	20b42 <handle_ra_input+0x56>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &icmphdr);
   20b20:	a907      	add	r1, sp, #28
   20b22:	4630      	mov	r0, r6
   20b24:	f7fd ff6d 	bl	1ea02 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   20b28:	b108      	cbz	r0, 20b2e <handle_ra_input+0x42>
   20b2a:	7843      	ldrb	r3, [r0, #1]
   20b2c:	b173      	cbz	r3, 20b4c <handle_ra_input+0x60>
	net_stats.ipv6_nd.drop++;
   20b2e:	4aad      	ldr	r2, [pc, #692]	; (20de4 <handle_ra_input+0x2f8>)
   20b30:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20b34:	3301      	adds	r3, #1
   20b36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   20b3a:	2002      	movs	r0, #2
}
   20b3c:	b018      	add	sp, #96	; 0x60
   20b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   20b42:	891a      	ldrh	r2, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20b44:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20b48:	429a      	cmp	r2, r3
   20b4a:	d1e9      	bne.n	20b20 <handle_ra_input+0x34>
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   20b4c:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
   20b50:	312c      	adds	r1, #44	; 0x2c
   20b52:	ac18      	add	r4, sp, #96	; 0x60
   20b54:	f824 1d1c 	strh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, 1, value);
   20b58:	f10d 0347 	add.w	r3, sp, #71	; 0x47
   20b5c:	9300      	str	r3, [sp, #0]
   20b5e:	2301      	movs	r3, #1
   20b60:	4622      	mov	r2, r4
   20b62:	68b0      	ldr	r0, [r6, #8]
   20b64:	f7fc ffc7 	bl	1daf6 <net_frag_read>
	frag = net_frag_skip(frag, offset, &offset, 1); /* flags */
   20b68:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	return net_frag_read(frag, offset, pos, len, NULL);
   20b6c:	2300      	movs	r3, #0
   20b6e:	9300      	str	r3, [sp, #0]
   20b70:	2301      	movs	r3, #1
   20b72:	4622      	mov	r2, r4
   20b74:	f7fc ffbf 	bl	1daf6 <net_frag_read>
	if (!frag) {
   20b78:	4604      	mov	r4, r0
   20b7a:	2800      	cmp	r0, #0
   20b7c:	d0d7      	beq.n	20b2e <handle_ra_input+0x42>
	if (hop_limit) {
   20b7e:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   20b82:	b113      	cbz	r3, 20b8a <handle_ra_input+0x9e>
	return pkt->iface;
   20b84:	6972      	ldr	r2, [r6, #20]
	iface->ipv6.hop_limit = hop_limit;
   20b86:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   20b8a:	f10d 0352 	add.w	r3, sp, #82	; 0x52
   20b8e:	aa11      	add	r2, sp, #68	; 0x44
   20b90:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20b94:	4620      	mov	r0, r4
   20b96:	f7fc fff6 	bl	1db86 <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   20b9a:	ab13      	add	r3, sp, #76	; 0x4c
   20b9c:	aa11      	add	r2, sp, #68	; 0x44
   20b9e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20ba2:	f7fd f801 	bl	1dba8 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   20ba6:	ab12      	add	r3, sp, #72	; 0x48
   20ba8:	aa11      	add	r2, sp, #68	; 0x44
   20baa:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20bae:	f7fc fffb 	bl	1dba8 <net_frag_read_be32>
	if (!frag) {
   20bb2:	4605      	mov	r5, r0
   20bb4:	2800      	cmp	r0, #0
   20bb6:	d0ba      	beq.n	20b2e <handle_ra_input+0x42>
	ra_hdr = net_icmpv6_get_ra_hdr(pkt, &hdr);
   20bb8:	a915      	add	r1, sp, #84	; 0x54
   20bba:	4630      	mov	r0, r6
   20bbc:	f7fe f99a 	bl	1eef4 <net_icmpv6_get_ra_hdr>
	if (reachable_time &&
   20bc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   20bc2:	b16b      	cbz	r3, 20be0 <handle_ra_input+0xf4>
   20bc4:	6972      	ldr	r2, [r6, #20]
	return iface->ipv6.reachable_time;
   20bc6:	f8d2 428c 	ldr.w	r4, [r2, #652]	; 0x28c
	     ra_hdr->reachable_time)) {
   20bca:	6841      	ldr	r1, [r0, #4]
	if (reachable_time &&
   20bcc:	428c      	cmp	r4, r1
   20bce:	d007      	beq.n	20be0 <handle_ra_input+0xf4>
	iface->ipv6.base_reachable_time = reachable_time;
   20bd0:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   20bd4:	6974      	ldr	r4, [r6, #20]
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   20bd6:	4620      	mov	r0, r4
   20bd8:	f7fb fa70 	bl	1c0bc <net_if_ipv6_calc_reachable_time>
   20bdc:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c
	if (retrans_timer) {
   20be0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20be2:	b113      	cbz	r3, 20bea <handle_ra_input+0xfe>
   20be4:	6972      	ldr	r2, [r6, #20]
 * @param retrans_timer New retransmit timer
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
	iface->ipv6.retrans_timer = retrans_timer;
   20be6:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	struct net_nbr *nbr = NULL;
   20bea:	2700      	movs	r7, #0
   20bec:	e060      	b.n	20cb0 <handle_ra_input+0x1c4>
			frag = handle_ra_neighbor(pkt, frag, length, offset,
   20bee:	f89d 4043 	ldrb.w	r4, [sp, #67]	; 0x43
   20bf2:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   20bf6:	2306      	movs	r3, #6
   20bf8:	f88d 301d 	strb.w	r3, [sp, #29]
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   20bfc:	f88d 3010 	strb.w	r3, [sp, #16]
	lladdr.addr = llstorage.addr;
   20c00:	f10d 031e 	add.w	r3, sp, #30
   20c04:	9303      	str	r3, [sp, #12]
	if (net_pkt_ll_src(pkt)->len < lladdr.len) {
   20c06:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   20c0a:	2b05      	cmp	r3, #5
   20c0c:	d801      	bhi.n	20c12 <handle_ra_input+0x126>
		lladdr.len = net_pkt_ll_src(pkt)->len;
   20c0e:	f88d 3010 	strb.w	r3, [sp, #16]
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   20c12:	f89d 3010 	ldrb.w	r3, [sp, #16]
   20c16:	f10d 021e 	add.w	r2, sp, #30
   20c1a:	9200      	str	r2, [sp, #0]
   20c1c:	aa11      	add	r2, sp, #68	; 0x44
   20c1e:	4641      	mov	r1, r8
   20c20:	4628      	mov	r0, r5
   20c22:	f7fc ff68 	bl	1daf6 <net_frag_read>
	if (!frag && offset) {
   20c26:	4605      	mov	r5, r0
   20c28:	b318      	cbz	r0, 20c72 <handle_ra_input+0x186>
	padding = len * 8 - 2 - lladdr.len;
   20c2a:	00e3      	lsls	r3, r4, #3
   20c2c:	b2db      	uxtb	r3, r3
   20c2e:	f89d 2010 	ldrb.w	r2, [sp, #16]
   20c32:	1a9b      	subs	r3, r3, r2
   20c34:	b2db      	uxtb	r3, r3
   20c36:	3b02      	subs	r3, #2
	if (padding) {
   20c38:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   20c3c:	d009      	beq.n	20c52 <handle_ra_input+0x166>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   20c3e:	aa18      	add	r2, sp, #96	; 0x60
   20c40:	f832 1d1c 	ldrh.w	r1, [r2, #-28]!
   20c44:	2000      	movs	r0, #0
   20c46:	9000      	str	r0, [sp, #0]
   20c48:	4628      	mov	r0, r5
   20c4a:	f7fc ff54 	bl	1daf6 <net_frag_read>
		if (!frag && *pos) {
   20c4e:	4605      	mov	r5, r0
   20c50:	b198      	cbz	r0, 20c7a <handle_ra_input+0x18e>
	return pkt->frags->data;
   20c52:	68b3      	ldr	r3, [r6, #8]
   20c54:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   20c56:	2302      	movs	r3, #2
   20c58:	9300      	str	r3, [sp, #0]
   20c5a:	2301      	movs	r3, #1
   20c5c:	aa03      	add	r2, sp, #12
   20c5e:	3108      	adds	r1, #8
   20c60:	6970      	ldr	r0, [r6, #20]
   20c62:	f7ff fedf 	bl	20a24 <net_ipv6_nbr_add>
   20c66:	4607      	mov	r7, r0
			if (!frag && offset) {
   20c68:	bb15      	cbnz	r5, 20cb0 <handle_ra_input+0x1c4>
   20c6a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20c6e:	b1fb      	cbz	r3, 20cb0 <handle_ra_input+0x1c4>
   20c70:	e75d      	b.n	20b2e <handle_ra_input+0x42>
	if (!frag && offset) {
   20c72:	f1b8 0f00 	cmp.w	r8, #0
   20c76:	d0d8      	beq.n	20c2a <handle_ra_input+0x13e>
   20c78:	e7f6      	b.n	20c68 <handle_ra_input+0x17c>
		if (!frag && *pos) {
   20c7a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20c7e:	2b00      	cmp	r3, #0
   20c80:	d0e7      	beq.n	20c52 <handle_ra_input+0x166>
   20c82:	e7f1      	b.n	20c68 <handle_ra_input+0x17c>
			frag = net_frag_skip(frag, offset, &offset, 2);
   20c84:	ac18      	add	r4, sp, #96	; 0x60
   20c86:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, len, NULL);
   20c8a:	2300      	movs	r3, #0
   20c8c:	9300      	str	r3, [sp, #0]
   20c8e:	2302      	movs	r3, #2
   20c90:	4622      	mov	r2, r4
   20c92:	f7fc ff30 	bl	1daf6 <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   20c96:	ab0f      	add	r3, sp, #60	; 0x3c
   20c98:	4622      	mov	r2, r4
   20c9a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20c9e:	f7fc ff83 	bl	1dba8 <net_frag_read_be32>
			if (!frag && offset) {
   20ca2:	4605      	mov	r5, r0
   20ca4:	2800      	cmp	r0, #0
   20ca6:	d03b      	beq.n	20d20 <handle_ra_input+0x234>
	return pkt->iface;
   20ca8:	6973      	ldr	r3, [r6, #20]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   20caa:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
	iface->mtu = mtu;
   20cae:	851a      	strh	r2, [r3, #40]	; 0x28
	while (frag) {
   20cb0:	2d00      	cmp	r5, #0
   20cb2:	f000 8170 	beq.w	20f96 <handle_ra_input+0x4aa>
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   20cb6:	ac18      	add	r4, sp, #96	; 0x60
   20cb8:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
   20cbc:	f10d 0342 	add.w	r3, sp, #66	; 0x42
   20cc0:	9300      	str	r3, [sp, #0]
   20cc2:	2301      	movs	r3, #1
   20cc4:	4622      	mov	r2, r4
   20cc6:	4628      	mov	r0, r5
   20cc8:	f7fc ff15 	bl	1daf6 <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   20ccc:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20cd0:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   20cd4:	9300      	str	r3, [sp, #0]
   20cd6:	2301      	movs	r3, #1
   20cd8:	4622      	mov	r2, r4
   20cda:	f7fc ff0c 	bl	1daf6 <net_frag_read>
		if (!frag) {
   20cde:	4605      	mov	r5, r0
   20ce0:	2800      	cmp	r0, #0
   20ce2:	f43f af24 	beq.w	20b2e <handle_ra_input+0x42>
		switch (type) {
   20ce6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   20cea:	2b03      	cmp	r3, #3
   20cec:	d01d      	beq.n	20d2a <handle_ra_input+0x23e>
   20cee:	2b05      	cmp	r3, #5
   20cf0:	d0c8      	beq.n	20c84 <handle_ra_input+0x198>
   20cf2:	2b01      	cmp	r3, #1
   20cf4:	f43f af7b 	beq.w	20bee <handle_ra_input+0x102>
			frag = net_frag_skip(frag, offset, &offset,
   20cf8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
					     length * 8 - 2);
   20cfc:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   20d00:	00db      	lsls	r3, r3, #3
			frag = net_frag_skip(frag, offset, &offset,
   20d02:	3b02      	subs	r3, #2
   20d04:	b29b      	uxth	r3, r3
	return net_frag_read(frag, offset, pos, len, NULL);
   20d06:	2200      	movs	r2, #0
   20d08:	9200      	str	r2, [sp, #0]
   20d0a:	aa11      	add	r2, sp, #68	; 0x44
   20d0c:	f7fc fef3 	bl	1daf6 <net_frag_read>
			if (!frag && offset) {
   20d10:	4605      	mov	r5, r0
   20d12:	2800      	cmp	r0, #0
   20d14:	d1cc      	bne.n	20cb0 <handle_ra_input+0x1c4>
   20d16:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20d1a:	2b00      	cmp	r3, #0
   20d1c:	d0c8      	beq.n	20cb0 <handle_ra_input+0x1c4>
   20d1e:	e706      	b.n	20b2e <handle_ra_input+0x42>
			if (!frag && offset) {
   20d20:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20d24:	2b00      	cmp	r3, #0
   20d26:	d0bf      	beq.n	20ca8 <handle_ra_input+0x1bc>
   20d28:	e701      	b.n	20b2e <handle_ra_input+0x42>
			frag = handle_ra_prefix(pkt, frag, length, offset,
   20d2a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   20d2e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   20d32:	2203      	movs	r2, #3
   20d34:	f88d 201c 	strb.w	r2, [sp, #28]
	prefix_info.len = len * 8 - 2;
   20d38:	4093      	lsls	r3, r2
   20d3a:	b2db      	uxtb	r3, r3
   20d3c:	3b02      	subs	r3, #2
   20d3e:	f88d 301d 	strb.w	r3, [sp, #29]
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   20d42:	f10d 031e 	add.w	r3, sp, #30
   20d46:	9300      	str	r3, [sp, #0]
   20d48:	2301      	movs	r3, #1
   20d4a:	aa11      	add	r2, sp, #68	; 0x44
   20d4c:	f7fc fed3 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   20d50:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20d54:	f10d 031f 	add.w	r3, sp, #31
   20d58:	9300      	str	r3, [sp, #0]
   20d5a:	2301      	movs	r3, #1
   20d5c:	aa11      	add	r2, sp, #68	; 0x44
   20d5e:	f7fc feca 	bl	1daf6 <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   20d62:	ab08      	add	r3, sp, #32
   20d64:	aa11      	add	r2, sp, #68	; 0x44
   20d66:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20d6a:	f7fc ff1d 	bl	1dba8 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   20d6e:	ab09      	add	r3, sp, #36	; 0x24
   20d70:	aa11      	add	r2, sp, #68	; 0x44
   20d72:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20d76:	f7fc ff17 	bl	1dba8 <net_frag_read_be32>
	frag = net_frag_skip(frag, *pos, pos, 4);
   20d7a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20d7e:	2300      	movs	r3, #0
   20d80:	9300      	str	r3, [sp, #0]
   20d82:	2304      	movs	r3, #4
   20d84:	aa11      	add	r2, sp, #68	; 0x44
   20d86:	f7fc feb6 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   20d8a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20d8e:	ab0b      	add	r3, sp, #44	; 0x2c
   20d90:	9300      	str	r3, [sp, #0]
   20d92:	2310      	movs	r3, #16
   20d94:	aa11      	add	r2, sp, #68	; 0x44
   20d96:	f7fc feae 	bl	1daf6 <net_frag_read>
	if (!frag && *pos) {
   20d9a:	4605      	mov	r5, r0
   20d9c:	b320      	cbz	r0, 20de8 <handle_ra_input+0x2fc>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   20d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20da0:	9a08      	ldr	r2, [sp, #32]
   20da2:	429a      	cmp	r2, r3
   20da4:	d314      	bcc.n	20dd0 <handle_ra_input+0x2e4>
   20da6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   20daa:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20dae:	429a      	cmp	r2, r3
   20db0:	d00e      	beq.n	20dd0 <handle_ra_input+0x2e4>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   20db2:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   20db6:	2b00      	cmp	r3, #0
   20db8:	db1b      	blt.n	20df2 <handle_ra_input+0x306>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   20dba:	f89d 301f 	ldrb.w	r3, [sp, #31]
   20dbe:	f013 0f40 	tst.w	r3, #64	; 0x40
   20dc2:	d005      	beq.n	20dd0 <handle_ra_input+0x2e4>
		    prefix_info.valid_lifetime &&
   20dc4:	9b08      	ldr	r3, [sp, #32]
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   20dc6:	b11b      	cbz	r3, 20dd0 <handle_ra_input+0x2e4>
		    (prefix_info.prefix_len == NET_IPV6_DEFAULT_PREFIX_LEN)) {
   20dc8:	f89d 301e 	ldrb.w	r3, [sp, #30]
		    prefix_info.valid_lifetime &&
   20dcc:	2b40      	cmp	r3, #64	; 0x40
   20dce:	d03e      	beq.n	20e4e <handle_ra_input+0x362>
			if (!frag && offset) {
   20dd0:	2d00      	cmp	r5, #0
   20dd2:	f47f af6d 	bne.w	20cb0 <handle_ra_input+0x1c4>
   20dd6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20dda:	2b00      	cmp	r3, #0
   20ddc:	f43f af68 	beq.w	20cb0 <handle_ra_input+0x1c4>
   20de0:	e6a5      	b.n	20b2e <handle_ra_input+0x42>
   20de2:	bf00      	nop
   20de4:	20002b58 	.word	0x20002b58
	if (!frag && *pos) {
   20de8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20dec:	2b00      	cmp	r3, #0
   20dee:	d0d6      	beq.n	20d9e <handle_ra_input+0x2b2>
   20df0:	e7ee      	b.n	20dd0 <handle_ra_input+0x2e4>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   20df2:	f89d 201e 	ldrb.w	r2, [sp, #30]
   20df6:	a90b      	add	r1, sp, #44	; 0x2c
   20df8:	6970      	ldr	r0, [r6, #20]
   20dfa:	f7fa fe3f 	bl	1ba7c <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   20dfe:	4603      	mov	r3, r0
   20e00:	b160      	cbz	r0, 20e1c <handle_ra_input+0x330>
	switch (prefix_info->valid_lifetime) {
   20e02:	9a08      	ldr	r2, [sp, #32]
   20e04:	b1ba      	cbz	r2, 20e36 <handle_ra_input+0x34a>
   20e06:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   20e0a:	d01c      	beq.n	20e46 <handle_ra_input+0x35a>
	prefix->is_infinite = is_infinite;
   20e0c:	2200      	movs	r2, #0
   20e0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		net_if_ipv6_prefix_set_timer(prefix,
   20e12:	9908      	ldr	r1, [sp, #32]
   20e14:	4618      	mov	r0, r3
   20e16:	f7fa fee3 	bl	1bbe0 <net_if_ipv6_prefix_set_timer>
   20e1a:	e7ce      	b.n	20dba <handle_ra_input+0x2ce>
		if (!prefix_info->valid_lifetime) {
   20e1c:	9b08      	ldr	r3, [sp, #32]
   20e1e:	2b00      	cmp	r3, #0
   20e20:	d0cb      	beq.n	20dba <handle_ra_input+0x2ce>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   20e22:	f89d 201e 	ldrb.w	r2, [sp, #30]
   20e26:	a90b      	add	r1, sp, #44	; 0x2c
   20e28:	6970      	ldr	r0, [r6, #20]
   20e2a:	f7fa fdf7 	bl	1ba1c <net_if_ipv6_prefix_add>
		if (prefix) {
   20e2e:	4603      	mov	r3, r0
   20e30:	2800      	cmp	r0, #0
   20e32:	d1e6      	bne.n	20e02 <handle_ra_input+0x316>
   20e34:	e7c1      	b.n	20dba <handle_ra_input+0x2ce>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   20e36:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   20e3a:	f103 0128 	add.w	r1, r3, #40	; 0x28
   20e3e:	6970      	ldr	r0, [r6, #20]
   20e40:	f7fa feea 	bl	1bc18 <net_if_ipv6_prefix_rm>
   20e44:	e7b9      	b.n	20dba <handle_ra_input+0x2ce>
   20e46:	2201      	movs	r2, #1
   20e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   20e4c:	e7b5      	b.n	20dba <handle_ra_input+0x2ce>
	struct in6_addr addr = { };
   20e4e:	2300      	movs	r3, #0
   20e50:	9305      	str	r3, [sp, #20]
   20e52:	9306      	str	r3, [sp, #24]
	return pkt->iface;
   20e54:	6974      	ldr	r4, [r6, #20]
	return &iface->link_addr;
   20e56:	f104 0810 	add.w	r8, r4, #16
	addr->s6_addr[0] = 0xfe;
   20e5a:	22fe      	movs	r2, #254	; 0xfe
   20e5c:	f88d 200c 	strb.w	r2, [sp, #12]
	addr->s6_addr[1] = 0x80;
   20e60:	2280      	movs	r2, #128	; 0x80
   20e62:	f88d 200d 	strb.w	r2, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   20e66:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   20e6a:	9304      	str	r3, [sp, #16]
	switch (lladdr->len) {
   20e6c:	f898 2004 	ldrb.w	r2, [r8, #4]
   20e70:	2a06      	cmp	r2, #6
   20e72:	d032      	beq.n	20eda <handle_ra_input+0x3ee>
   20e74:	2a08      	cmp	r2, #8
   20e76:	d058      	beq.n	20f2a <handle_ra_input+0x43e>
   20e78:	2a02      	cmp	r2, #2
   20e7a:	d018      	beq.n	20eae <handle_ra_input+0x3c2>
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   20e7c:	2208      	movs	r2, #8
   20e7e:	a90b      	add	r1, sp, #44	; 0x2c
   20e80:	a803      	add	r0, sp, #12
   20e82:	f7df fa1d 	bl	2c0 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   20e86:	2100      	movs	r1, #0
   20e88:	a803      	add	r0, sp, #12
   20e8a:	f7fa fb03 	bl	1b494 <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   20e8e:	4604      	mov	r4, r0
   20e90:	b118      	cbz	r0, 20e9a <handle_ra_input+0x3ae>
   20e92:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   20e96:	2b01      	cmp	r3, #1
   20e98:	d052      	beq.n	20f40 <handle_ra_input+0x454>
		if (prefix_info->valid_lifetime ==
   20e9a:	9b08      	ldr	r3, [sp, #32]
   20e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20ea0:	d072      	beq.n	20f88 <handle_ra_input+0x49c>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   20ea2:	2201      	movs	r2, #1
   20ea4:	a903      	add	r1, sp, #12
   20ea6:	6970      	ldr	r0, [r6, #20]
   20ea8:	f7fa fb6a 	bl	1b580 <net_if_ipv6_addr_add>
   20eac:	e790      	b.n	20dd0 <handle_ra_input+0x2e4>
		if (lladdr->type == NET_LINK_IEEE802154) {
   20eae:	f898 3005 	ldrb.w	r3, [r8, #5]
   20eb2:	2b01      	cmp	r3, #1
   20eb4:	d1e2      	bne.n	20e7c <handle_ra_input+0x390>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   20eb6:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   20eb8:	22ff      	movs	r2, #255	; 0xff
   20eba:	f88d 2017 	strb.w	r2, [sp, #23]
			addr->s6_addr[12] = 0xfe;
   20ebe:	22fe      	movs	r2, #254	; 0xfe
   20ec0:	f88d 2018 	strb.w	r2, [sp, #24]
			addr->s6_addr[13] = 0;
   20ec4:	f88d 3019 	strb.w	r3, [sp, #25]
			addr->s6_addr[14] = lladdr->addr[0];
   20ec8:	6923      	ldr	r3, [r4, #16]
   20eca:	781b      	ldrb	r3, [r3, #0]
   20ecc:	f88d 301a 	strb.w	r3, [sp, #26]
			addr->s6_addr[15] = lladdr->addr[1];
   20ed0:	6923      	ldr	r3, [r4, #16]
   20ed2:	785b      	ldrb	r3, [r3, #1]
   20ed4:	f88d 301b 	strb.w	r3, [sp, #27]
   20ed8:	e7d0      	b.n	20e7c <handle_ra_input+0x390>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   20eda:	2203      	movs	r2, #3
   20edc:	6921      	ldr	r1, [r4, #16]
   20ede:	a805      	add	r0, sp, #20
   20ee0:	f7df f9ee 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   20ee4:	23ff      	movs	r3, #255	; 0xff
   20ee6:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   20eea:	23fe      	movs	r3, #254	; 0xfe
   20eec:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20ef0:	6921      	ldr	r1, [r4, #16]
   20ef2:	2203      	movs	r2, #3
   20ef4:	4411      	add	r1, r2
   20ef6:	f10d 0019 	add.w	r0, sp, #25
   20efa:	f7df f9e1 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   20efe:	f898 3005 	ldrb.w	r3, [r8, #5]
   20f02:	2b02      	cmp	r3, #2
   20f04:	d00a      	beq.n	20f1c <handle_ra_input+0x430>
		if (lladdr->type == NET_LINK_ETHERNET) {
   20f06:	f898 3005 	ldrb.w	r3, [r8, #5]
   20f0a:	2b03      	cmp	r3, #3
   20f0c:	d1b6      	bne.n	20e7c <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   20f0e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20f12:	f083 0302 	eor.w	r3, r3, #2
   20f16:	f88d 3014 	strb.w	r3, [sp, #20]
   20f1a:	e7af      	b.n	20e7c <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   20f1c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20f20:	f083 0302 	eor.w	r3, r3, #2
   20f24:	f88d 3014 	strb.w	r3, [sp, #20]
   20f28:	e7ed      	b.n	20f06 <handle_ra_input+0x41a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   20f2a:	6921      	ldr	r1, [r4, #16]
   20f2c:	a805      	add	r0, sp, #20
   20f2e:	f7df f9c7 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   20f32:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20f36:	f083 0302 	eor.w	r3, r3, #2
   20f3a:	f88d 3014 	strb.w	r3, [sp, #20]
   20f3e:	e79d      	b.n	20e7c <handle_ra_input+0x390>
		if (prefix_info->valid_lifetime ==
   20f40:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20f44:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   20f48:	d015      	beq.n	20f76 <handle_ra_input+0x48a>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   20f4a:	f5b8 5fe1 	cmp.w	r8, #7200	; 0x1c20
   20f4e:	d80a      	bhi.n	20f66 <handle_ra_input+0x47a>
	return _timeout_remaining_get(&work->timeout);
   20f50:	3020      	adds	r0, #32
   20f52:	f008 ff79 	bl	29e48 <_timeout_remaining_get>
	return k_delayed_work_remaining_get(work) / MSEC_PER_SEC;
   20f56:	4a30      	ldr	r2, [pc, #192]	; (21018 <handle_ra_input+0x52c>)
   20f58:	fb82 3200 	smull	r3, r2, r2, r0
   20f5c:	17c3      	asrs	r3, r0, #31
   20f5e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   20f62:	4598      	cmp	r8, r3
   20f64:	d90a      	bls.n	20f7c <handle_ra_input+0x490>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   20f66:	9908      	ldr	r1, [sp, #32]
   20f68:	4620      	mov	r0, r4
   20f6a:	f7fa fafb 	bl	1b564 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   20f6e:	2300      	movs	r3, #0
   20f70:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   20f74:	e72c      	b.n	20dd0 <handle_ra_input+0x2e4>
   20f76:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
   20f7a:	e729      	b.n	20dd0 <handle_ra_input+0x2e4>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   20f7c:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   20f80:	4620      	mov	r0, r4
   20f82:	f7fa faef 	bl	1b564 <net_if_ipv6_addr_update_lifetime>
   20f86:	e7f2      	b.n	20f6e <handle_ra_input+0x482>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   20f88:	2300      	movs	r3, #0
   20f8a:	2201      	movs	r2, #1
   20f8c:	a903      	add	r1, sp, #12
   20f8e:	6970      	ldr	r0, [r6, #20]
   20f90:	f7fa faf6 	bl	1b580 <net_if_ipv6_addr_add>
   20f94:	e71c      	b.n	20dd0 <handle_ra_input+0x2e4>
	return pkt->frags->data;
   20f96:	68b3      	ldr	r3, [r6, #8]
   20f98:	6899      	ldr	r1, [r3, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   20f9a:	3108      	adds	r1, #8
   20f9c:	6970      	ldr	r0, [r6, #20]
   20f9e:	f7fa fe7b 	bl	1bc98 <net_if_ipv6_router_lookup>
	if (router) {
   20fa2:	4603      	mov	r3, r0
   20fa4:	b350      	cbz	r0, 20ffc <handle_ra_input+0x510>
		if (!router_lifetime) {
   20fa6:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
   20faa:	b321      	cbz	r1, 20ff6 <handle_ra_input+0x50a>
			if (nbr) {
   20fac:	b11f      	cbz	r7, 20fb6 <handle_ra_input+0x4ca>
   20fae:	68fa      	ldr	r2, [r7, #12]
				net_ipv6_nbr_data(nbr)->is_router = true;
   20fb0:	2001      	movs	r0, #1
   20fb2:	f882 0069 	strb.w	r0, [r2, #105]	; 0x69
			net_if_ipv6_router_update_lifetime(router,
   20fb6:	4618      	mov	r0, r3
   20fb8:	f7fa fec6 	bl	1bd48 <net_if_ipv6_router_update_lifetime>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   20fbc:	b18f      	cbz	r7, 20fe2 <handle_ra_input+0x4f6>
   20fbe:	68fb      	ldr	r3, [r7, #12]
   20fc0:	6818      	ldr	r0, [r3, #0]
   20fc2:	b170      	cbz	r0, 20fe2 <handle_ra_input+0x4f6>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   20fc4:	f7fa f818 	bl	1aff8 <net_send_data>
   20fc8:	2800      	cmp	r0, #0
   20fca:	db20      	blt.n	2100e <handle_ra_input+0x522>
   20fcc:	68fc      	ldr	r4, [r7, #12]
	k_delayed_work_cancel(&data->send_ns);
   20fce:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   20fd2:	f008 ffdd 	bl	29f90 <k_delayed_work_cancel>
	if (data->pending) {
   20fd6:	6820      	ldr	r0, [r4, #0]
   20fd8:	b118      	cbz	r0, 20fe2 <handle_ra_input+0x4f6>
		net_pkt_unref(data->pending);
   20fda:	f7fc fc0e 	bl	1d7fa <net_pkt_unref>
		data->pending = NULL;
   20fde:	2300      	movs	r3, #0
   20fe0:	6023      	str	r3, [r4, #0]
	return pkt->iface;
   20fe2:	6970      	ldr	r0, [r6, #20]
	k_delayed_work_cancel(&net_pkt_iface(pkt)->ipv6.rs_timer);
   20fe4:	f500 7018 	add.w	r0, r0, #608	; 0x260
   20fe8:	f008 ffd2 	bl	29f90 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   20fec:	4630      	mov	r0, r6
   20fee:	f7fc fc04 	bl	1d7fa <net_pkt_unref>
	return NET_OK;
   20ff2:	2000      	movs	r0, #0
   20ff4:	e5a2      	b.n	20b3c <handle_ra_input+0x50>
			net_if_ipv6_router_rm(router);
   20ff6:	f7fa ff0b 	bl	1be10 <net_if_ipv6_router_rm>
   20ffa:	e7df      	b.n	20fbc <handle_ra_input+0x4d0>
	return pkt->frags->data;
   20ffc:	68b3      	ldr	r3, [r6, #8]
   20ffe:	6899      	ldr	r1, [r3, #8]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   21000:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
   21004:	3108      	adds	r1, #8
   21006:	6970      	ldr	r0, [r6, #20]
   21008:	f7fa feaa 	bl	1bd60 <net_if_ipv6_router_add>
   2100c:	e7d6      	b.n	20fbc <handle_ra_input+0x4d0>
   2100e:	68fb      	ldr	r3, [r7, #12]
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   21010:	6818      	ldr	r0, [r3, #0]
   21012:	f7fc fbf2 	bl	1d7fa <net_pkt_unref>
   21016:	e7d9      	b.n	20fcc <handle_ra_input+0x4e0>
   21018:	10624dd3 	.word	0x10624dd3

0002101c <handle_ns_input>:
{
   2101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21020:	b0a5      	sub	sp, #148	; 0x94
   21022:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   21024:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   21026:	2200      	movs	r2, #0
   21028:	e002      	b.n	21030 <handle_ns_input+0x14>
		bytes += buf->len;
   2102a:	8999      	ldrh	r1, [r3, #12]
   2102c:	440a      	add	r2, r1
		buf = buf->frags;
   2102e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   21030:	2b00      	cmp	r3, #0
   21032:	d1fa      	bne.n	2102a <handle_ns_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   21034:	b295      	uxth	r5, r2
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &nshdr);
   21036:	a90a      	add	r1, sp, #40	; 0x28
   21038:	4620      	mov	r0, r4
   2103a:	f7fd fe51 	bl	1ece0 <net_icmpv6_get_ns_hdr>
   2103e:	4606      	mov	r6, r0
	net_stats.ipv6_nd.recv++;
   21040:	4aa6      	ldr	r2, [pc, #664]	; (212dc <handle_ns_input+0x2c0>)
   21042:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   21046:	3301      	adds	r3, #1
   21048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   2104c:	2d3f      	cmp	r5, #63	; 0x3f
   2104e:	d904      	bls.n	2105a <handle_ns_input+0x3e>
	return pkt->frags->data;
   21050:	68a3      	ldr	r3, [r4, #8]
   21052:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   21054:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   21056:	2bff      	cmp	r3, #255	; 0xff
   21058:	d002      	beq.n	21060 <handle_ns_input+0x44>
	return addr->s6_addr[0] == 0xFF;
   2105a:	7933      	ldrb	r3, [r6, #4]
		if (net_is_ipv6_addr_mcast(&ns_hdr->tgt)) {
   2105c:	2bff      	cmp	r3, #255	; 0xff
   2105e:	d00a      	beq.n	21076 <handle_ns_input+0x5a>
	pkt->ipv6_ext_opt_len = len;
   21060:	2314      	movs	r3, #20
   21062:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   21066:	a90f      	add	r1, sp, #60	; 0x3c
   21068:	4620      	mov	r0, r4
   2106a:	f7fd fe95 	bl	1ed98 <net_icmpv6_get_nd_opt_hdr>
   2106e:	4607      	mov	r7, r0
	return net_buf_frags_len(pkt->frags);
   21070:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   21072:	2500      	movs	r5, #0
   21074:	e00e      	b.n	21094 <handle_ns_input+0x78>
			icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   21076:	a908      	add	r1, sp, #32
   21078:	4620      	mov	r0, r4
   2107a:	f7fd fcc2 	bl	1ea02 <net_icmpv6_get_hdr>
			if (!icmp_hdr || icmp_hdr->code != 0) {
   2107e:	2800      	cmp	r0, #0
   21080:	f000 80b7 	beq.w	211f2 <handle_ns_input+0x1d6>
   21084:	7843      	ldrb	r3, [r0, #1]
   21086:	2b00      	cmp	r3, #0
   21088:	f040 80b3 	bne.w	211f2 <handle_ns_input+0x1d6>
   2108c:	e7e8      	b.n	21060 <handle_ns_input+0x44>
		bytes += buf->len;
   2108e:	899a      	ldrh	r2, [r3, #12]
   21090:	4415      	add	r5, r2
		buf = buf->frags;
   21092:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   21094:	2b00      	cmp	r3, #0
   21096:	d1fa      	bne.n	2108e <handle_ns_input+0x72>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   21098:	3d2c      	subs	r5, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   2109a:	e042      	b.n	21122 <handle_ns_input+0x106>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2109c:	2100      	movs	r1, #0
			if (net_is_ipv6_addr_unspecified(
   2109e:	2900      	cmp	r1, #0
   210a0:	f040 80a7 	bne.w	211f2 <handle_ns_input+0x1d6>
					   net_pkt_ip_hdr_len(pkt) +
   210a4:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
					   net_pkt_ipv6_ext_len(pkt) +
   210a8:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
					   net_pkt_ip_hdr_len(pkt) +
   210ac:	4401      	add	r1, r0
					   sizeof(struct net_icmp_hdr) +
   210ae:	4411      	add	r1, r2
   210b0:	b289      	uxth	r1, r1
			handle_ns_neighbor(pkt, nd_opt_hdr->len,
   210b2:	3106      	adds	r1, #6
	lladdr.len = 8 * ll_len - 2;
   210b4:	00db      	lsls	r3, r3, #3
   210b6:	b2db      	uxtb	r3, r3
   210b8:	3b02      	subs	r3, #2
   210ba:	b2db      	uxtb	r3, r3
   210bc:	f88d 3019 	strb.w	r3, [sp, #25]
	frag = net_frag_read(pkt->frags, sllao_offset,
   210c0:	f10d 021a 	add.w	r2, sp, #26
   210c4:	9200      	str	r2, [sp, #0]
   210c6:	f10d 0216 	add.w	r2, sp, #22
   210ca:	b289      	uxth	r1, r1
   210cc:	68a0      	ldr	r0, [r4, #8]
   210ce:	f7fc fd12 	bl	1daf6 <net_frag_read>
	if (!frag && pos == 0xffff) {
   210d2:	2800      	cmp	r0, #0
   210d4:	d042      	beq.n	2115c <handle_ns_input+0x140>
	nbr_lladdr.len = lladdr.len;
   210d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
   210da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	nbr_lladdr.addr = lladdr.addr;
   210de:	f10d 021a 	add.w	r2, sp, #26
   210e2:	9208      	str	r2, [sp, #32]
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   210e4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   210e8:	4293      	cmp	r3, r2
   210ea:	d901      	bls.n	210f0 <handle_ns_input+0xd4>
		nbr_lladdr.len = net_pkt_ll_src(pkt)->len;
   210ec:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return pkt->frags->data;
   210f0:	68a3      	ldr	r3, [r4, #8]
   210f2:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   210f4:	2300      	movs	r3, #0
   210f6:	9300      	str	r3, [sp, #0]
   210f8:	aa08      	add	r2, sp, #32
   210fa:	3108      	adds	r1, #8
   210fc:	6960      	ldr	r0, [r4, #20]
   210fe:	f7ff fc91 	bl	20a24 <net_ipv6_nbr_add>
	return pkt->ipv6_ext_opt_len;
   21102:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
					     (nd_opt_hdr->len << 3));
   21106:	787b      	ldrb	r3, [r7, #1]
   21108:	00db      	lsls	r3, r3, #3
   2110a:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   2110c:	4413      	add	r3, r2
   2110e:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   21110:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   21114:	429a      	cmp	r2, r3
   21116:	d26c      	bcs.n	211f2 <handle_ns_input+0x1d6>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   21118:	a90f      	add	r1, sp, #60	; 0x3c
   2111a:	4620      	mov	r0, r4
   2111c:	f7fd fe3c 	bl	1ed98 <net_icmpv6_get_nd_opt_hdr>
   21120:	4607      	mov	r7, r0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   21122:	b317      	cbz	r7, 2116a <handle_ns_input+0x14e>
	return pkt->ipv6_ext_opt_len;
   21124:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   21128:	4295      	cmp	r5, r2
   2112a:	d91e      	bls.n	2116a <handle_ns_input+0x14e>
		if (!nd_opt_hdr->len) {
   2112c:	787b      	ldrb	r3, [r7, #1]
   2112e:	b1e3      	cbz	r3, 2116a <handle_ns_input+0x14e>
		switch (nd_opt_hdr->type) {
   21130:	7839      	ldrb	r1, [r7, #0]
   21132:	2901      	cmp	r1, #1
   21134:	d1e5      	bne.n	21102 <handle_ns_input+0xe6>
	return pkt->frags->data;
   21136:	68a1      	ldr	r1, [r4, #8]
   21138:	6889      	ldr	r1, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2113a:	6888      	ldr	r0, [r1, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2113c:	2800      	cmp	r0, #0
   2113e:	d1ad      	bne.n	2109c <handle_ns_input+0x80>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21140:	68c8      	ldr	r0, [r1, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21142:	b928      	cbnz	r0, 21150 <handle_ns_input+0x134>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21144:	6908      	ldr	r0, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21146:	b928      	cbnz	r0, 21154 <handle_ns_input+0x138>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   21148:	6949      	ldr	r1, [r1, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2114a:	b129      	cbz	r1, 21158 <handle_ns_input+0x13c>
   2114c:	2100      	movs	r1, #0
   2114e:	e7a6      	b.n	2109e <handle_ns_input+0x82>
   21150:	2100      	movs	r1, #0
   21152:	e7a4      	b.n	2109e <handle_ns_input+0x82>
   21154:	2100      	movs	r1, #0
   21156:	e7a2      	b.n	2109e <handle_ns_input+0x82>
   21158:	2101      	movs	r1, #1
   2115a:	e7a0      	b.n	2109e <handle_ns_input+0x82>
	if (!frag && pos == 0xffff) {
   2115c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   21160:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21164:	429a      	cmp	r2, r3
   21166:	d1b6      	bne.n	210d6 <handle_ns_input+0xba>
   21168:	e7cb      	b.n	21102 <handle_ns_input+0xe6>
	return pkt->iface;
   2116a:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   2116e:	f106 0904 	add.w	r9, r6, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   21172:	2500      	movs	r5, #0
   21174:	e001      	b.n	2117a <handle_ns_input+0x15e>
		if (net_is_ipv6_prefix(addr->s6_addr,
   21176:	b9ef      	cbnz	r7, 211b4 <handle_ns_input+0x198>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   21178:	3501      	adds	r5, #1
   2117a:	2d02      	cmp	r5, #2
   2117c:	dc21      	bgt.n	211c2 <handle_ns_input+0x1a6>
		if (!iface->ipv6.unicast[i].is_used ||
   2117e:	236c      	movs	r3, #108	; 0x6c
   21180:	fb03 8305 	mla	r3, r3, r5, r8
   21184:	f893 7094 	ldrb.w	r7, [r3, #148]	; 0x94
   21188:	2f00      	cmp	r7, #0
   2118a:	d0f5      	beq.n	21178 <handle_ns_input+0x15c>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   2118c:	236c      	movs	r3, #108	; 0x6c
   2118e:	fb03 8305 	mla	r3, r3, r5, r8
   21192:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   21194:	2b0a      	cmp	r3, #10
   21196:	d1ef      	bne.n	21178 <handle_ns_input+0x15c>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   21198:	216c      	movs	r1, #108	; 0x6c
   2119a:	fb01 f105 	mul.w	r1, r1, r5
   2119e:	3120      	adds	r1, #32
   211a0:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   211a2:	2210      	movs	r2, #16
   211a4:	4411      	add	r1, r2
   211a6:	4648      	mov	r0, r9
   211a8:	f009 fb22 	bl	2a7f0 <memcmp>
   211ac:	2800      	cmp	r0, #0
   211ae:	d0e2      	beq.n	21176 <handle_ns_input+0x15a>
		return false;
   211b0:	2700      	movs	r7, #0
   211b2:	e7e0      	b.n	21176 <handle_ns_input+0x15a>
			return &iface->ipv6.unicast[i];
   211b4:	236c      	movs	r3, #108	; 0x6c
   211b6:	fb03 f505 	mul.w	r5, r3, r5
   211ba:	3520      	adds	r5, #32
   211bc:	4445      	add	r5, r8
   211be:	350c      	adds	r5, #12
   211c0:	e000      	b.n	211c4 <handle_ns_input+0x1a8>
	return NULL;
   211c2:	2500      	movs	r5, #0
	if (!ifaddr) {
   211c4:	b1ad      	cbz	r5, 211f2 <handle_ns_input+0x1d6>
	return pkt->frags->data;
   211c6:	68a3      	ldr	r3, [r4, #8]
   211c8:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   211ca:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   211cc:	b93b      	cbnz	r3, 211de <handle_ns_input+0x1c2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   211ce:	68c3      	ldr	r3, [r0, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   211d0:	b9cb      	cbnz	r3, 21206 <handle_ns_input+0x1ea>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   211d2:	6903      	ldr	r3, [r0, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   211d4:	b9cb      	cbnz	r3, 2120a <handle_ns_input+0x1ee>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   211d6:	6943      	ldr	r3, [r0, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   211d8:	b1cb      	cbz	r3, 2120e <handle_ns_input+0x1f2>
   211da:	2300      	movs	r3, #0
   211dc:	e000      	b.n	211e0 <handle_ns_input+0x1c4>
   211de:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   211e0:	2b00      	cmp	r3, #0
   211e2:	d07d      	beq.n	212e0 <handle_ns_input+0x2c4>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   211e4:	6982      	ldr	r2, [r0, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   211e6:	f240 23ff 	movw	r3, #767	; 0x2ff
   211ea:	429a      	cmp	r2, r3
   211ec:	d011      	beq.n	21212 <handle_ns_input+0x1f6>
   211ee:	2300      	movs	r3, #0
		if (!net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   211f0:	bb0b      	cbnz	r3, 21236 <handle_ns_input+0x21a>
	net_stats.ipv6_nd.drop++;
   211f2:	4a3a      	ldr	r2, [pc, #232]	; (212dc <handle_ns_input+0x2c0>)
   211f4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   211f8:	3301      	adds	r3, #1
   211fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   211fe:	2002      	movs	r0, #2
}
   21200:	b025      	add	sp, #148	; 0x94
   21202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21206:	2300      	movs	r3, #0
   21208:	e7ea      	b.n	211e0 <handle_ns_input+0x1c4>
   2120a:	2300      	movs	r3, #0
   2120c:	e7e8      	b.n	211e0 <handle_ns_input+0x1c4>
   2120e:	2301      	movs	r3, #1
   21210:	e7e6      	b.n	211e0 <handle_ns_input+0x1c4>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   21212:	69c3      	ldr	r3, [r0, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   21214:	b95b      	cbnz	r3, 2122e <handle_ns_input+0x212>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21216:	6a03      	ldr	r3, [r0, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   21218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2121c:	d001      	beq.n	21222 <handle_ns_input+0x206>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2121e:	2300      	movs	r3, #0
   21220:	e7e6      	b.n	211f0 <handle_ns_input+0x1d4>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   21222:	6a43      	ldr	r3, [r0, #36]	; 0x24
   21224:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21226:	2bff      	cmp	r3, #255	; 0xff
   21228:	d003      	beq.n	21232 <handle_ns_input+0x216>
   2122a:	2300      	movs	r3, #0
   2122c:	e7e0      	b.n	211f0 <handle_ns_input+0x1d4>
   2122e:	2300      	movs	r3, #0
   21230:	e7de      	b.n	211f0 <handle_ns_input+0x1d4>
   21232:	2301      	movs	r3, #1
   21234:	e7dc      	b.n	211f0 <handle_ns_input+0x1d4>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   21236:	f995 3065 	ldrsb.w	r3, [r5, #101]	; 0x65
   2123a:	b94b      	cbnz	r3, 21250 <handle_ns_input+0x234>
	return pkt->iface;
   2123c:	6960      	ldr	r0, [r4, #20]
			dad_failed(net_pkt_iface(pkt),
   2123e:	1d29      	adds	r1, r5, #4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   21240:	88aa      	ldrh	r2, [r5, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   21242:	f248 03fe 	movw	r3, #33022	; 0x80fe
   21246:	429a      	cmp	r2, r3
   21248:	d0d3      	beq.n	211f2 <handle_ns_input+0x1d6>
	net_if_ipv6_dad_failed(iface, addr);
   2124a:	f7fa fb51 	bl	1b8f0 <net_if_ipv6_dad_failed>
   2124e:	e7d0      	b.n	211f2 <handle_ns_input+0x1d6>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   21250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21254:	7603      	strb	r3, [r0, #24]
   21256:	2300      	movs	r3, #0
   21258:	2202      	movs	r2, #2
   2125a:	7642      	strb	r2, [r0, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   2125c:	7683      	strb	r3, [r0, #26]
   2125e:	76c3      	strb	r3, [r0, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   21260:	7703      	strb	r3, [r0, #28]
   21262:	7743      	strb	r3, [r0, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   21264:	7783      	strb	r3, [r0, #30]
   21266:	77c3      	strb	r3, [r0, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   21268:	f880 3020 	strb.w	r3, [r0, #32]
   2126c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   21270:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   21274:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   21278:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   2127c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   21280:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
   21284:	2301      	movs	r3, #1
   21286:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	return pkt->frags->data;
   2128a:	68a3      	ldr	r3, [r4, #8]
   2128c:	f8d3 8008 	ldr.w	r8, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   21290:	f108 0118 	add.w	r1, r8, #24
   21294:	6960      	ldr	r0, [r4, #20]
   21296:	f7fa fe15 	bl	1bec4 <net_if_ipv6_select_src_addr>
   2129a:	4603      	mov	r3, r0
   2129c:	ae10      	add	r6, sp, #64	; 0x40
   2129e:	6800      	ldr	r0, [r0, #0]
   212a0:	6859      	ldr	r1, [r3, #4]
   212a2:	689a      	ldr	r2, [r3, #8]
   212a4:	68db      	ldr	r3, [r3, #12]
   212a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   212a8:	ae10      	add	r6, sp, #64	; 0x40
   212aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   212ac:	f8c8 0008 	str.w	r0, [r8, #8]
   212b0:	f8c8 100c 	str.w	r1, [r8, #12]
   212b4:	f8c8 2010 	str.w	r2, [r8, #16]
   212b8:	f8c8 3014 	str.w	r3, [r8, #20]
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   212bc:	2320      	movs	r3, #32
   212be:	68a2      	ldr	r2, [r4, #8]
   212c0:	6891      	ldr	r1, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   212c2:	9300      	str	r3, [sp, #0]
   212c4:	1d2b      	adds	r3, r5, #4
   212c6:	f101 0218 	add.w	r2, r1, #24
   212ca:	3108      	adds	r1, #8
   212cc:	6960      	ldr	r0, [r4, #20]
   212ce:	f7fe ff69 	bl	201a4 <net_ipv6_send_na>
	if (!ret) {
   212d2:	2800      	cmp	r0, #0
   212d4:	f000 80b5 	beq.w	21442 <handle_ns_input+0x426>
	return NET_DROP;
   212d8:	2002      	movs	r0, #2
   212da:	e791      	b.n	21200 <handle_ns_input+0x1e4>
   212dc:	20002b58 	.word	0x20002b58
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   212e0:	2100      	movs	r1, #0
   212e2:	3008      	adds	r0, #8
   212e4:	f7fa f8d6 	bl	1b494 <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   212e8:	4607      	mov	r7, r0
   212ea:	2800      	cmp	r0, #0
   212ec:	d181      	bne.n	211f2 <handle_ns_input+0x1d6>
   212ee:	68a3      	ldr	r3, [r4, #8]
   212f0:	f8d3 8008 	ldr.w	r8, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   212f4:	f8d8 2018 	ldr.w	r2, [r8, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   212f8:	f240 23ff 	movw	r3, #767	; 0x2ff
   212fc:	429a      	cmp	r2, r3
   212fe:	d02b      	beq.n	21358 <handle_ns_input+0x33c>
   21300:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   21302:	9303      	str	r3, [sp, #12]
   21304:	2b00      	cmp	r3, #0
   21306:	d03c      	beq.n	21382 <handle_ns_input+0x366>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   21308:	af14      	add	r7, sp, #80	; 0x50
   2130a:	4643      	mov	r3, r8
   2130c:	f853 0f08 	ldr.w	r0, [r3, #8]!
   21310:	6859      	ldr	r1, [r3, #4]
   21312:	689a      	ldr	r2, [r3, #8]
   21314:	68db      	ldr	r3, [r3, #12]
   21316:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   21318:	af14      	add	r7, sp, #80	; 0x50
   2131a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2131c:	f8c8 0018 	str.w	r0, [r8, #24]
   21320:	f8c8 101c 	str.w	r1, [r8, #28]
   21324:	f8c8 2020 	str.w	r2, [r8, #32]
   21328:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
   2132c:	68a3      	ldr	r3, [r4, #8]
   2132e:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   21332:	af18      	add	r7, sp, #96	; 0x60
   21334:	f856 0f04 	ldr.w	r0, [r6, #4]!
   21338:	6871      	ldr	r1, [r6, #4]
   2133a:	68b2      	ldr	r2, [r6, #8]
   2133c:	68f3      	ldr	r3, [r6, #12]
   2133e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   21340:	ae18      	add	r6, sp, #96	; 0x60
   21342:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21344:	f8ce 0008 	str.w	r0, [lr, #8]
   21348:	f8ce 100c 	str.w	r1, [lr, #12]
   2134c:	f8ce 2010 	str.w	r2, [lr, #16]
   21350:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   21354:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   21356:	e7b2      	b.n	212be <handle_ns_input+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   21358:	f8d8 301c 	ldr.w	r3, [r8, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2135c:	b96b      	cbnz	r3, 2137a <handle_ns_input+0x35e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2135e:	f8d8 3020 	ldr.w	r3, [r8, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   21362:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   21366:	d001      	beq.n	2136c <handle_ns_input+0x350>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21368:	2300      	movs	r3, #0
   2136a:	e7ca      	b.n	21302 <handle_ns_input+0x2e6>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   2136c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   21370:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21372:	2bff      	cmp	r3, #255	; 0xff
   21374:	d003      	beq.n	2137e <handle_ns_input+0x362>
   21376:	2300      	movs	r3, #0
   21378:	e7c3      	b.n	21302 <handle_ns_input+0x2e6>
   2137a:	2300      	movs	r3, #0
   2137c:	e7c1      	b.n	21302 <handle_ns_input+0x2e6>
   2137e:	2301      	movs	r3, #1
   21380:	e7bf      	b.n	21302 <handle_ns_input+0x2e6>
	return pkt->iface;
   21382:	f8d4 a014 	ldr.w	sl, [r4, #20]
	if (net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   21386:	f108 0818 	add.w	r8, r8, #24
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2138a:	f04f 0900 	mov.w	r9, #0
   2138e:	e004      	b.n	2139a <handle_ns_input+0x37e>
		return false;
   21390:	f8dd b00c 	ldr.w	fp, [sp, #12]
   21394:	e01e      	b.n	213d4 <handle_ns_input+0x3b8>
   21396:	f109 0901 	add.w	r9, r9, #1
   2139a:	f1b9 0f02 	cmp.w	r9, #2
   2139e:	dc22      	bgt.n	213e6 <handle_ns_input+0x3ca>
		if (!iface->ipv6.unicast[i].is_used ||
   213a0:	236c      	movs	r3, #108	; 0x6c
   213a2:	fb03 a309 	mla	r3, r3, r9, sl
   213a6:	f893 b094 	ldrb.w	fp, [r3, #148]	; 0x94
   213aa:	f1bb 0f00 	cmp.w	fp, #0
   213ae:	d0f2      	beq.n	21396 <handle_ns_input+0x37a>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   213b0:	236c      	movs	r3, #108	; 0x6c
   213b2:	fb03 a309 	mla	r3, r3, r9, sl
   213b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   213b8:	2b0a      	cmp	r3, #10
   213ba:	d1ec      	bne.n	21396 <handle_ns_input+0x37a>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   213bc:	216c      	movs	r1, #108	; 0x6c
   213be:	fb01 f109 	mul.w	r1, r1, r9
   213c2:	3120      	adds	r1, #32
   213c4:	4451      	add	r1, sl
	if (memcmp(addr1, addr2, bytes)) {
   213c6:	2210      	movs	r2, #16
   213c8:	4411      	add	r1, r2
   213ca:	4640      	mov	r0, r8
   213cc:	f009 fa10 	bl	2a7f0 <memcmp>
   213d0:	2800      	cmp	r0, #0
   213d2:	d1dd      	bne.n	21390 <handle_ns_input+0x374>
		if (net_is_ipv6_prefix(addr->s6_addr,
   213d4:	f1bb 0f00 	cmp.w	fp, #0
   213d8:	d0dd      	beq.n	21396 <handle_ns_input+0x37a>
			return &iface->ipv6.unicast[i];
   213da:	276c      	movs	r7, #108	; 0x6c
   213dc:	fb07 f709 	mul.w	r7, r7, r9
   213e0:	3720      	adds	r7, #32
   213e2:	4457      	add	r7, sl
   213e4:	370c      	adds	r7, #12
   213e6:	2f00      	cmp	r7, #0
   213e8:	f43f af03 	beq.w	211f2 <handle_ns_input+0x1d6>
	return pkt->frags->data;
   213ec:	68a3      	ldr	r3, [r4, #8]
   213ee:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   213f2:	af1c      	add	r7, sp, #112	; 0x70
   213f4:	4663      	mov	r3, ip
   213f6:	f853 0f08 	ldr.w	r0, [r3, #8]!
   213fa:	6859      	ldr	r1, [r3, #4]
   213fc:	689a      	ldr	r2, [r3, #8]
   213fe:	68db      	ldr	r3, [r3, #12]
   21400:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   21402:	af1c      	add	r7, sp, #112	; 0x70
   21404:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   21406:	f8cc 0018 	str.w	r0, [ip, #24]
   2140a:	f8cc 101c 	str.w	r1, [ip, #28]
   2140e:	f8cc 2020 	str.w	r2, [ip, #32]
   21412:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   21416:	68a3      	ldr	r3, [r4, #8]
   21418:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   2141c:	af20      	add	r7, sp, #128	; 0x80
   2141e:	f856 0f04 	ldr.w	r0, [r6, #4]!
   21422:	6871      	ldr	r1, [r6, #4]
   21424:	68b2      	ldr	r2, [r6, #8]
   21426:	68f3      	ldr	r3, [r6, #12]
   21428:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   2142a:	ae20      	add	r6, sp, #128	; 0x80
   2142c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2142e:	f8ce 0008 	str.w	r0, [lr, #8]
   21432:	f8ce 100c 	str.w	r1, [lr, #12]
   21436:	f8ce 2010 	str.w	r2, [lr, #16]
   2143a:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   2143e:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   21440:	e73d      	b.n	212be <handle_ns_input+0x2a2>
		net_pkt_unref(pkt);
   21442:	4620      	mov	r0, r4
   21444:	f7fc f9d9 	bl	1d7fa <net_pkt_unref>
		return NET_OK;
   21448:	2000      	movs	r0, #0
   2144a:	e6d9      	b.n	21200 <handle_ns_input+0x1e4>

0002144c <nd_reachable_timeout>:
{
   2144c:	b530      	push	{r4, r5, lr}
   2144e:	b083      	sub	sp, #12
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   21450:	f1a0 0514 	sub.w	r5, r0, #20
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   21454:	2300      	movs	r3, #0
   21456:	2b07      	cmp	r3, #7
   21458:	dc07      	bgt.n	2146a <nd_reachable_timeout+0x1e>
	return &net_neighbor_pool[idx].nbr;
   2145a:	4c47      	ldr	r4, [pc, #284]	; (21578 <nd_reachable_timeout+0x12c>)
   2145c:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   21460:	68e2      	ldr	r2, [r4, #12]
   21462:	4295      	cmp	r5, r2
   21464:	d002      	beq.n	2146c <nd_reachable_timeout+0x20>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   21466:	3301      	adds	r3, #1
   21468:	e7f5      	b.n	21456 <nd_reachable_timeout+0xa>
	return NULL;
   2146a:	2400      	movs	r4, #0
	if (!data || !nbr) {
   2146c:	b38d      	cbz	r5, 214d2 <nd_reachable_timeout+0x86>
   2146e:	b384      	cbz	r4, 214d2 <nd_reachable_timeout+0x86>
   21470:	4603      	mov	r3, r0
	switch (data->state) {
   21472:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   21476:	2a04      	cmp	r2, #4
   21478:	d82b      	bhi.n	214d2 <nd_reachable_timeout+0x86>
   2147a:	e8df f002 	tbb	[pc, r2]
   2147e:	2703      	.short	0x2703
   21480:	3f2c      	.short	0x3f2c
   21482:	45          	.byte	0x45
   21483:	00          	.byte	0x00
		if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   21484:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   21488:	2a02      	cmp	r2, #2
   2148a:	d912      	bls.n	214b2 <nd_reachable_timeout+0x66>
   2148c:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   2148e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   21492:	f008 fd7d 	bl	29f90 <k_delayed_work_cancel>
	if (data->pending) {
   21496:	6828      	ldr	r0, [r5, #0]
   21498:	b118      	cbz	r0, 214a2 <nd_reachable_timeout+0x56>
		net_pkt_unref(data->pending);
   2149a:	f7fc f9ae 	bl	1d7fa <net_pkt_unref>
		data->pending = NULL;
   2149e:	2300      	movs	r3, #0
   214a0:	602b      	str	r3, [r5, #0]
   214a2:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   214a4:	3014      	adds	r0, #20
   214a6:	f008 fd73 	bl	29f90 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   214aa:	4620      	mov	r0, r4
   214ac:	f7fd ffa6 	bl	1f3fc <net_nbr_unref>
   214b0:	e00f      	b.n	214d2 <nd_reachable_timeout+0x86>
			data->ns_count++;
   214b2:	3201      	adds	r2, #1
   214b4:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   214b8:	68a0      	ldr	r0, [r4, #8]
   214ba:	2100      	movs	r1, #0
   214bc:	9101      	str	r1, [sp, #4]
   214be:	3b10      	subs	r3, #16
   214c0:	9300      	str	r3, [sp, #0]
   214c2:	460b      	mov	r3, r1
   214c4:	460a      	mov	r2, r1
   214c6:	f7ff f927 	bl	20718 <net_ipv6_send_ns>
   214ca:	e002      	b.n	214d2 <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_STALE;
   214cc:	2202      	movs	r2, #2
   214ce:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
}
   214d2:	b003      	add	sp, #12
   214d4:	bd30      	pop	{r4, r5, pc}
   214d6:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   214d8:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   214dc:	f008 fd58 	bl	29f90 <k_delayed_work_cancel>
	if (data->pending) {
   214e0:	6828      	ldr	r0, [r5, #0]
   214e2:	b118      	cbz	r0, 214ec <nd_reachable_timeout+0xa0>
		net_pkt_unref(data->pending);
   214e4:	f7fc f989 	bl	1d7fa <net_pkt_unref>
		data->pending = NULL;
   214e8:	2300      	movs	r3, #0
   214ea:	602b      	str	r3, [r5, #0]
   214ec:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   214ee:	3014      	adds	r0, #20
   214f0:	f008 fd4e 	bl	29f90 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   214f4:	4620      	mov	r0, r4
   214f6:	f7fd ff81 	bl	1f3fc <net_nbr_unref>
   214fa:	e7ea      	b.n	214d2 <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_PROBE;
   214fc:	2204      	movs	r2, #4
   214fe:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		data->ns_count = 0;
   21502:	2200      	movs	r2, #0
   21504:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
		if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   21508:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
   2150c:	2a02      	cmp	r2, #2
   2150e:	d91f      	bls.n	21550 <nd_reachable_timeout+0x104>
			router = net_if_ipv6_router_lookup(nbr->iface,
   21510:	f1a3 0110 	sub.w	r1, r3, #16
   21514:	68a0      	ldr	r0, [r4, #8]
   21516:	f7fa fbbf 	bl	1bc98 <net_if_ipv6_router_lookup>
			if (router && !router->is_infinite) {
   2151a:	2800      	cmp	r0, #0
   2151c:	d0d9      	beq.n	214d2 <nd_reachable_timeout+0x86>
   2151e:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
   21522:	2a00      	cmp	r2, #0
   21524:	d1d5      	bne.n	214d2 <nd_reachable_timeout+0x86>
				net_if_ipv6_router_rm(router);
   21526:	f7fa fc73 	bl	1be10 <net_if_ipv6_router_rm>
   2152a:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   2152c:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   21530:	f008 fd2e 	bl	29f90 <k_delayed_work_cancel>
	if (data->pending) {
   21534:	6828      	ldr	r0, [r5, #0]
   21536:	b118      	cbz	r0, 21540 <nd_reachable_timeout+0xf4>
		net_pkt_unref(data->pending);
   21538:	f7fc f95f 	bl	1d7fa <net_pkt_unref>
		data->pending = NULL;
   2153c:	2300      	movs	r3, #0
   2153e:	602b      	str	r3, [r5, #0]
   21540:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   21542:	3014      	adds	r0, #20
   21544:	f008 fd24 	bl	29f90 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   21548:	4620      	mov	r0, r4
   2154a:	f7fd ff57 	bl	1f3fc <net_nbr_unref>
   2154e:	e7c0      	b.n	214d2 <nd_reachable_timeout+0x86>
			data->ns_count++;
   21550:	3201      	adds	r2, #1
   21552:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   21556:	68a0      	ldr	r0, [r4, #8]
   21558:	2100      	movs	r1, #0
   2155a:	9101      	str	r1, [sp, #4]
   2155c:	3b10      	subs	r3, #16
   2155e:	9300      	str	r3, [sp, #0]
   21560:	460b      	mov	r3, r1
   21562:	460a      	mov	r2, r1
   21564:	f7ff f8d8 	bl	20718 <net_ipv6_send_ns>
   21568:	68e1      	ldr	r1, [r4, #12]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2156a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2156e:	3114      	adds	r1, #20
   21570:	4802      	ldr	r0, [pc, #8]	; (2157c <nd_reachable_timeout+0x130>)
   21572:	f008 fd67 	bl	2a044 <k_delayed_work_submit_to_queue>
   21576:	e7ac      	b.n	214d2 <nd_reachable_timeout+0x86>
   21578:	2000bf60 	.word	0x2000bf60
   2157c:	20002c78 	.word	0x20002c78

00021580 <net_ipv6_start_dad>:
{
   21580:	b500      	push	{lr}
   21582:	b083      	sub	sp, #12
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   21584:	2301      	movs	r3, #1
   21586:	9301      	str	r3, [sp, #4]
   21588:	3104      	adds	r1, #4
   2158a:	9100      	str	r1, [sp, #0]
   2158c:	2300      	movs	r3, #0
   2158e:	461a      	mov	r2, r3
   21590:	4619      	mov	r1, r3
   21592:	f7ff f8c1 	bl	20718 <net_ipv6_send_ns>
}
   21596:	b003      	add	sp, #12
   21598:	f85d fb04 	ldr.w	pc, [sp], #4

0002159c <net_ipv6_prepare_for_send>:
{
   2159c:	b570      	push	{r4, r5, r6, lr}
   2159e:	b084      	sub	sp, #16
	struct net_if *iface = NULL;
   215a0:	2300      	movs	r3, #0
   215a2:	9303      	str	r3, [sp, #12]
	return pkt->iface;
   215a4:	6943      	ldr	r3, [r0, #20]
   215a6:	f3bf 8f5b 	dmb	ish
   215aa:	68db      	ldr	r3, [r3, #12]
   215ac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   215b0:	f013 0f02 	tst.w	r3, #2
   215b4:	d108      	bne.n	215c8 <net_ipv6_prepare_for_send+0x2c>
   215b6:	4604      	mov	r4, r0
	if (net_pkt_ll_dst(pkt)->addr ||
   215b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
   215ba:	b13b      	cbz	r3, 215cc <net_ipv6_prepare_for_send+0x30>
	return pkt->frags->data;
   215bc:	68a3      	ldr	r3, [r4, #8]
   215be:	6899      	ldr	r1, [r3, #8]
		return update_ll_reserve(pkt, &NET_IPV6_HDR(pkt)->dst);
   215c0:	3118      	adds	r1, #24
   215c2:	4620      	mov	r0, r4
   215c4:	f7fe f9e6 	bl	1f994 <update_ll_reserve>
}
   215c8:	b004      	add	sp, #16
   215ca:	bd70      	pop	{r4, r5, r6, pc}
   215cc:	6883      	ldr	r3, [r0, #8]
   215ce:	6899      	ldr	r1, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   215d0:	7e0b      	ldrb	r3, [r1, #24]
	if (net_pkt_ll_dst(pkt)->addr ||
   215d2:	2bff      	cmp	r3, #255	; 0xff
   215d4:	d0f2      	beq.n	215bc <net_ipv6_prepare_for_send+0x20>
	if (net_if_ipv6_addr_onlink(&iface,
   215d6:	3118      	adds	r1, #24
   215d8:	a803      	add	r0, sp, #12
   215da:	f7fa fa9d 	bl	1bb18 <net_if_ipv6_addr_onlink>
   215de:	b348      	cbz	r0, 21634 <net_ipv6_prepare_for_send+0x98>
   215e0:	68a3      	ldr	r3, [r4, #8]
   215e2:	689d      	ldr	r5, [r3, #8]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   215e4:	3518      	adds	r5, #24
		net_pkt_set_iface(pkt, iface);
   215e6:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   215e8:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   215ea:	7d5a      	ldrb	r2, [r3, #21]
   215ec:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   215f0:	7d5b      	ldrb	r3, [r3, #21]
   215f2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (!iface) {
   215f6:	9b03      	ldr	r3, [sp, #12]
   215f8:	2b00      	cmp	r3, #0
   215fa:	d03e      	beq.n	2167a <net_ipv6_prepare_for_send+0xde>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), nexthop);
   215fc:	462a      	mov	r2, r5
   215fe:	6961      	ldr	r1, [r4, #20]
   21600:	4832      	ldr	r0, [pc, #200]	; (216cc <net_ipv6_prepare_for_send+0x130>)
   21602:	f7fe f90d 	bl	1f820 <nbr_lookup>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   21606:	4606      	mov	r6, r0
   21608:	2800      	cmp	r0, #0
   2160a:	d051      	beq.n	216b0 <net_ipv6_prepare_for_send+0x114>
   2160c:	7840      	ldrb	r0, [r0, #1]
   2160e:	28ff      	cmp	r0, #255	; 0xff
   21610:	d04e      	beq.n	216b0 <net_ipv6_prepare_for_send+0x114>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   21612:	f7fd ff85 	bl	1f520 <net_nbr_get_lladdr>
		net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   21616:	1c83      	adds	r3, r0, #2
   21618:	62a3      	str	r3, [r4, #40]	; 0x28
		net_pkt_ll_dst(pkt)->len = lladdr->len;
   2161a:	7843      	ldrb	r3, [r0, #1]
   2161c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   21620:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   21622:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   21626:	2b02      	cmp	r3, #2
   21628:	d036      	beq.n	21698 <net_ipv6_prepare_for_send+0xfc>
		return update_ll_reserve(pkt, nexthop);
   2162a:	4629      	mov	r1, r5
   2162c:	4620      	mov	r0, r4
   2162e:	f7fe f9b1 	bl	1f994 <update_ll_reserve>
   21632:	e7c9      	b.n	215c8 <net_ipv6_prepare_for_send+0x2c>
	return pkt->frags->data;
   21634:	68a3      	ldr	r3, [r4, #8]
   21636:	6899      	ldr	r1, [r3, #8]
		route = net_route_lookup(NULL, &NET_IPV6_HDR(pkt)->dst);
   21638:	3118      	adds	r1, #24
   2163a:	2000      	movs	r0, #0
   2163c:	f001 fb26 	bl	22c8c <net_route_lookup>
		if (route) {
   21640:	4606      	mov	r6, r0
   21642:	b160      	cbz	r0, 2165e <net_ipv6_prepare_for_send+0xc2>
			nexthop = net_route_get_nexthop(route);
   21644:	f001 fc06 	bl	22e54 <net_route_get_nexthop>
			if (!nexthop) {
   21648:	4605      	mov	r5, r0
   2164a:	2800      	cmp	r0, #0
   2164c:	d1d3      	bne.n	215f6 <net_ipv6_prepare_for_send+0x5a>
				net_route_del(route);
   2164e:	4630      	mov	r0, r6
   21650:	f001 fbac 	bl	22dac <net_route_del>
				net_pkt_unref(pkt);
   21654:	4620      	mov	r0, r4
   21656:	f7fc f8d0 	bl	1d7fa <net_pkt_unref>
				return NULL;
   2165a:	2000      	movs	r0, #0
   2165c:	e7b4      	b.n	215c8 <net_ipv6_prepare_for_send+0x2c>
   2165e:	68a3      	ldr	r3, [r4, #8]
   21660:	6899      	ldr	r1, [r3, #8]
			router = net_if_ipv6_router_find_default(NULL,
   21662:	3118      	adds	r1, #24
   21664:	2000      	movs	r0, #0
   21666:	f7fa fb47 	bl	1bcf8 <net_if_ipv6_router_find_default>
			if (!router) {
   2166a:	4605      	mov	r5, r0
   2166c:	b108      	cbz	r0, 21672 <net_ipv6_prepare_for_send+0xd6>
			nexthop = &router->address.in6_addr;
   2166e:	352c      	adds	r5, #44	; 0x2c
   21670:	e7c1      	b.n	215f6 <net_ipv6_prepare_for_send+0x5a>
   21672:	68a3      	ldr	r3, [r4, #8]
   21674:	689d      	ldr	r5, [r3, #8]
				nexthop = &NET_IPV6_HDR(pkt)->dst;
   21676:	3518      	adds	r5, #24
				goto try_send;
   21678:	e7c0      	b.n	215fc <net_ipv6_prepare_for_send+0x60>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   2167a:	4629      	mov	r1, r5
   2167c:	a803      	add	r0, sp, #12
   2167e:	f7fa fa4b 	bl	1bb18 <net_if_ipv6_addr_onlink>
   21682:	2800      	cmp	r0, #0
   21684:	d0ba      	beq.n	215fc <net_ipv6_prepare_for_send+0x60>
			net_pkt_set_iface(pkt, iface);
   21686:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   21688:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   2168a:	7d5a      	ldrb	r2, [r3, #21]
   2168c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21690:	7d5b      	ldrb	r3, [r3, #21]
   21692:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   21696:	e7b1      	b.n	215fc <net_ipv6_prepare_for_send+0x60>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   21698:	2103      	movs	r1, #3
   2169a:	4630      	mov	r0, r6
   2169c:	f7fd ff48 	bl	1f530 <ipv6_nbr_set_state>
   216a0:	68f1      	ldr	r1, [r6, #12]
   216a2:	f241 3288 	movw	r2, #5000	; 0x1388
   216a6:	3114      	adds	r1, #20
   216a8:	4809      	ldr	r0, [pc, #36]	; (216d0 <net_ipv6_prepare_for_send+0x134>)
   216aa:	f008 fccb 	bl	2a044 <k_delayed_work_submit_to_queue>
   216ae:	e7bc      	b.n	2162a <net_ipv6_prepare_for_send+0x8e>
	return pkt->iface;
   216b0:	6960      	ldr	r0, [r4, #20]
	return pkt->frags->data;
   216b2:	68a3      	ldr	r3, [r4, #8]
   216b4:	689a      	ldr	r2, [r3, #8]
	if (net_ipv6_send_ns(net_pkt_iface(pkt),
   216b6:	2600      	movs	r6, #0
   216b8:	9601      	str	r6, [sp, #4]
   216ba:	9500      	str	r5, [sp, #0]
   216bc:	4633      	mov	r3, r6
   216be:	3208      	adds	r2, #8
   216c0:	4621      	mov	r1, r4
   216c2:	f7ff f829 	bl	20718 <net_ipv6_send_ns>
		return NULL;
   216c6:	4630      	mov	r0, r6
   216c8:	e77e      	b.n	215c8 <net_ipv6_prepare_for_send+0x2c>
   216ca:	bf00      	nop
   216cc:	2000bf54 	.word	0x2000bf54
   216d0:	20002c78 	.word	0x20002c78

000216d4 <net_ipv6_send_rs>:
{
   216d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   216d8:	b084      	sub	sp, #16
   216da:	4605      	mov	r5, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   216dc:	6843      	ldr	r3, [r0, #4]
   216de:	689b      	ldr	r3, [r3, #8]
   216e0:	2100      	movs	r1, #0
   216e2:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   216e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   216e8:	f7fc f816 	bl	1d718 <net_pkt_get_reserve_tx>
   216ec:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   216ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   216f2:	f7fc f82f 	bl	1d754 <net_pkt_get_frag>
   216f6:	4606      	mov	r6, r0
	net_pkt_frag_add(pkt, frag);
   216f8:	4601      	mov	r1, r0
   216fa:	4620      	mov	r0, r4
   216fc:	f7fc f8a7 	bl	1d84e <net_pkt_frag_add>
	pkt->iface = iface;
   21700:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21702:	7d6b      	ldrb	r3, [r5, #21]
   21704:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21708:	7d6b      	ldrb	r3, [r5, #21]
   2170a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   2170e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   21712:	220a      	movs	r2, #10
   21714:	f362 03c6 	bfi	r3, r2, #3, #4
   21718:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   2171c:	2328      	movs	r3, #40	; 0x28
   2171e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   21722:	68a3      	ldr	r3, [r4, #8]
   21724:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   21726:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   2172a:	461a      	mov	r2, r3
   2172c:	2100      	movs	r1, #0
   2172e:	1ac0      	subs	r0, r0, r3
   21730:	f009 f8f2 	bl	2a918 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   21734:	2200      	movs	r2, #0
   21736:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   21738:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return pkt->frags->data;
   2173c:	68a3      	ldr	r3, [r4, #8]
   2173e:	689b      	ldr	r3, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   21740:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21744:	7619      	strb	r1, [r3, #24]
   21746:	2102      	movs	r1, #2
   21748:	7659      	strb	r1, [r3, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   2174a:	769a      	strb	r2, [r3, #26]
   2174c:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   2174e:	771a      	strb	r2, [r3, #28]
   21750:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   21752:	779a      	strb	r2, [r3, #30]
   21754:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   21756:	f883 2020 	strb.w	r2, [r3, #32]
   2175a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   2175e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   21762:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   21766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   2176a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   2176e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   21772:	2201      	movs	r2, #1
   21774:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   21778:	68a3      	ldr	r3, [r4, #8]
   2177a:	f8d3 8008 	ldr.w	r8, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   2177e:	f108 0118 	add.w	r1, r8, #24
   21782:	4628      	mov	r0, r5
   21784:	f7fa fb9e 	bl	1bec4 <net_if_ipv6_select_src_addr>
   21788:	4603      	mov	r3, r0
   2178a:	466d      	mov	r5, sp
   2178c:	6800      	ldr	r0, [r0, #0]
   2178e:	6859      	ldr	r1, [r3, #4]
   21790:	689a      	ldr	r2, [r3, #8]
   21792:	68db      	ldr	r3, [r3, #12]
   21794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   21796:	466d      	mov	r5, sp
   21798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2179a:	f8c8 0008 	str.w	r0, [r8, #8]
   2179e:	f8c8 100c 	str.w	r1, [r8, #12]
   217a2:	f8c8 2010 	str.w	r2, [r8, #16]
   217a6:	f8c8 3014 	str.w	r3, [r8, #20]
   217aa:	68a3      	ldr	r3, [r4, #8]
   217ac:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   217ae:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   217b0:	b93a      	cbnz	r2, 217c2 <net_ipv6_send_rs+0xee>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   217b2:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   217b4:	b982      	cbnz	r2, 217d8 <net_ipv6_send_rs+0x104>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   217b6:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   217b8:	b982      	cbnz	r2, 217dc <net_ipv6_send_rs+0x108>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   217ba:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   217bc:	b183      	cbz	r3, 217e0 <net_ipv6_send_rs+0x10c>
   217be:	2300      	movs	r3, #0
   217c0:	e000      	b.n	217c4 <net_ipv6_send_rs+0xf0>
   217c2:	2300      	movs	r3, #0
	if (!unspec_src) {
   217c4:	461f      	mov	r7, r3
   217c6:	b97b      	cbnz	r3, 217e8 <net_ipv6_send_rs+0x114>
	return pkt->iface;
   217c8:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   217ca:	7d1b      	ldrb	r3, [r3, #20]
   217cc:	2b06      	cmp	r3, #6
   217ce:	d02a      	beq.n	21826 <net_ipv6_send_rs+0x152>
	} else if (iface->link_addr.len == 8) {
   217d0:	2b08      	cmp	r3, #8
   217d2:	d007      	beq.n	217e4 <net_ipv6_send_rs+0x110>
	return 0;
   217d4:	2500      	movs	r5, #0
   217d6:	e008      	b.n	217ea <net_ipv6_send_rs+0x116>
   217d8:	2300      	movs	r3, #0
   217da:	e7f3      	b.n	217c4 <net_ipv6_send_rs+0xf0>
   217dc:	2300      	movs	r3, #0
   217de:	e7f1      	b.n	217c4 <net_ipv6_send_rs+0xf0>
   217e0:	2301      	movs	r3, #1
   217e2:	e7ef      	b.n	217c4 <net_ipv6_send_rs+0xf0>
		return 16;
   217e4:	2510      	movs	r5, #16
   217e6:	e000      	b.n	217ea <net_ipv6_send_rs+0x116>
	u8_t llao_len = 0;
   217e8:	2500      	movs	r5, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   217ea:	2285      	movs	r2, #133	; 0x85
   217ec:	1d29      	adds	r1, r5, #4
   217ee:	4620      	mov	r0, r4
   217f0:	f7fe f92f 	bl	1fa52 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   217f4:	3608      	adds	r6, #8
   217f6:	2104      	movs	r1, #4
   217f8:	4630      	mov	r0, r6
   217fa:	f7f9 fadb 	bl	1adb4 <net_buf_simple_add>
	if (!unspec_src) {
   217fe:	b1a7      	cbz	r7, 2182a <net_ipv6_send_rs+0x156>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   21800:	68a1      	ldr	r1, [r4, #8]
   21802:	4620      	mov	r0, r4
   21804:	f7fd f8b0 	bl	1e968 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   21808:	4620      	mov	r0, r4
   2180a:	f7f9 fbf5 	bl	1aff8 <net_send_data>
   2180e:	2800      	cmp	r0, #0
   21810:	db2b      	blt.n	2186a <net_ipv6_send_rs+0x196>
	net_stats.ipv6_nd.sent++;
   21812:	4a1c      	ldr	r2, [pc, #112]	; (21884 <net_ipv6_send_rs+0x1b0>)
   21814:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   21818:	3301      	adds	r3, #1
   2181a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   2181e:	2000      	movs	r0, #0
}
   21820:	b004      	add	sp, #16
   21822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 8;
   21826:	2508      	movs	r5, #8
   21828:	e7df      	b.n	217ea <net_ipv6_send_rs+0x116>
		net_buf_add(frag, llao_len);
   2182a:	4629      	mov	r1, r5
   2182c:	4630      	mov	r0, r6
   2182e:	f7f9 fac1 	bl	1adb4 <net_buf_simple_add>
   21832:	f8d4 8014 	ldr.w	r8, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   21836:	4620      	mov	r0, r4
   21838:	f7fc fab8 	bl	1ddac <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   2183c:	f100 0608 	add.w	r6, r0, #8
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   21840:	2301      	movs	r3, #1
   21842:	7203      	strb	r3, [r0, #8]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   21844:	08eb      	lsrs	r3, r5, #3
   21846:	7243      	strb	r3, [r0, #9]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   21848:	f898 2014 	ldrb.w	r2, [r8, #20]
   2184c:	f8d8 1010 	ldr.w	r1, [r8, #16]
   21850:	300a      	adds	r0, #10
   21852:	f7de fd35 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   21856:	f898 2014 	ldrb.w	r2, [r8, #20]
   2185a:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   2185c:	1aaa      	subs	r2, r5, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   2185e:	3a02      	subs	r2, #2
   21860:	2100      	movs	r1, #0
   21862:	4430      	add	r0, r6
   21864:	f009 f858 	bl	2a918 <memset>
   21868:	e7ca      	b.n	21800 <net_ipv6_send_rs+0x12c>
	net_pkt_unref(pkt);
   2186a:	4620      	mov	r0, r4
   2186c:	f7fb ffc5 	bl	1d7fa <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   21870:	4a04      	ldr	r2, [pc, #16]	; (21884 <net_ipv6_send_rs+0x1b0>)
   21872:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   21876:	3301      	adds	r3, #1
   21878:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   2187c:	f06f 0015 	mvn.w	r0, #21
   21880:	e7ce      	b.n	21820 <net_ipv6_send_rs+0x14c>
   21882:	bf00      	nop
   21884:	20002b58 	.word	0x20002b58

00021888 <net_ipv6_start_rs>:
{
   21888:	b508      	push	{r3, lr}
	return net_ipv6_send_rs(iface);
   2188a:	f7ff ff23 	bl	216d4 <net_ipv6_send_rs>
}
   2188e:	bd08      	pop	{r3, pc}

00021890 <net_ipv6_mld_join>:
{
   21890:	b570      	push	{r4, r5, r6, lr}
   21892:	b082      	sub	sp, #8
   21894:	ab02      	add	r3, sp, #8
   21896:	f843 0d04 	str.w	r0, [r3, #-4]!
   2189a:	460d      	mov	r5, r1
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   2189c:	4619      	mov	r1, r3
   2189e:	4628      	mov	r0, r5
   218a0:	f7fa f842 	bl	1b928 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   218a4:	4604      	mov	r4, r0
   218a6:	b118      	cbz	r0, 218b0 <net_ipv6_mld_join+0x20>
	return addr->is_joined;
   218a8:	7803      	ldrb	r3, [r0, #0]
   218aa:	f013 0f02 	tst.w	r3, #2
   218ae:	d123      	bne.n	218f8 <net_ipv6_mld_join+0x68>
	if (!maddr) {
   218b0:	b1c4      	cbz	r4, 218e4 <net_ipv6_mld_join+0x54>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   218b2:	2202      	movs	r2, #2
   218b4:	4629      	mov	r1, r5
   218b6:	9801      	ldr	r0, [sp, #4]
   218b8:	f7fe fb5a 	bl	1ff70 <send_mldv2>
	if (ret < 0) {
   218bc:	1e06      	subs	r6, r0, #0
   218be:	db0e      	blt.n	218de <net_ipv6_mld_join+0x4e>
	addr->is_joined = true;
   218c0:	7823      	ldrb	r3, [r4, #0]
   218c2:	f043 0302 	orr.w	r3, r3, #2
   218c6:	7023      	strb	r3, [r4, #0]
	net_if_mcast_monitor(iface, addr, true);
   218c8:	2201      	movs	r2, #1
   218ca:	4629      	mov	r1, r5
   218cc:	9801      	ldr	r0, [sp, #4]
   218ce:	f7fa f877 	bl	1b9c0 <net_if_mcast_monitor>
   218d2:	2300      	movs	r3, #0
   218d4:	461a      	mov	r2, r3
   218d6:	9901      	ldr	r1, [sp, #4]
   218d8:	4809      	ldr	r0, [pc, #36]	; (21900 <net_ipv6_mld_join+0x70>)
   218da:	f001 fc01 	bl	230e0 <net_mgmt_event_notify_with_info>
}
   218de:	4630      	mov	r0, r6
   218e0:	b002      	add	sp, #8
   218e2:	bd70      	pop	{r4, r5, r6, pc}
		maddr = net_if_ipv6_maddr_add(iface, addr);
   218e4:	4629      	mov	r1, r5
   218e6:	9801      	ldr	r0, [sp, #4]
   218e8:	f7f9 ff32 	bl	1b750 <net_if_ipv6_maddr_add>
		if (!maddr) {
   218ec:	4604      	mov	r4, r0
   218ee:	2800      	cmp	r0, #0
   218f0:	d1df      	bne.n	218b2 <net_ipv6_mld_join+0x22>
			return -ENOMEM;
   218f2:	f06f 060b 	mvn.w	r6, #11
   218f6:	e7f2      	b.n	218de <net_ipv6_mld_join+0x4e>
		return -EALREADY;
   218f8:	f06f 0677 	mvn.w	r6, #119	; 0x77
   218fc:	e7ef      	b.n	218de <net_ipv6_mld_join+0x4e>
   218fe:	bf00      	nop
   21900:	f0600007 	.word	0xf0600007

00021904 <net_ipv6_mld_leave>:
{
   21904:	b570      	push	{r4, r5, r6, lr}
   21906:	4604      	mov	r4, r0
   21908:	460d      	mov	r5, r1
	if (!net_if_ipv6_maddr_rm(iface, addr)) {
   2190a:	f7f9 ff5d 	bl	1b7c8 <net_if_ipv6_maddr_rm>
   2190e:	b198      	cbz	r0, 21938 <net_ipv6_mld_leave+0x34>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_INCLUDE);
   21910:	2201      	movs	r2, #1
   21912:	4629      	mov	r1, r5
   21914:	4620      	mov	r0, r4
   21916:	f7fe fb2b 	bl	1ff70 <send_mldv2>
	if (ret < 0) {
   2191a:	1e06      	subs	r6, r0, #0
   2191c:	db0a      	blt.n	21934 <net_ipv6_mld_leave+0x30>
	net_if_mcast_monitor(iface, addr, false);
   2191e:	2200      	movs	r2, #0
   21920:	4629      	mov	r1, r5
   21922:	4620      	mov	r0, r4
   21924:	f7fa f84c 	bl	1b9c0 <net_if_mcast_monitor>
   21928:	2300      	movs	r3, #0
   2192a:	461a      	mov	r2, r3
   2192c:	4621      	mov	r1, r4
   2192e:	4804      	ldr	r0, [pc, #16]	; (21940 <net_ipv6_mld_leave+0x3c>)
   21930:	f001 fbd6 	bl	230e0 <net_mgmt_event_notify_with_info>
}
   21934:	4630      	mov	r0, r6
   21936:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   21938:	f06f 0615 	mvn.w	r6, #21
   2193c:	e7fa      	b.n	21934 <net_ipv6_mld_leave+0x30>
   2193e:	bf00      	nop
   21940:	f0600008 	.word	0xf0600008

00021944 <net_ipv6_process_pkt>:
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
		proto == IPPROTO_TCP);
}

enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   21944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21948:	b089      	sub	sp, #36	; 0x24
	return pkt->frags->data;
   2194a:	6884      	ldr	r4, [r0, #8]
   2194c:	68a7      	ldr	r7, [r4, #8]
	size_t bytes = 0;
   2194e:	2300      	movs	r3, #0
   21950:	e002      	b.n	21958 <net_ipv6_process_pkt+0x14>
		bytes += buf->len;
   21952:	89a2      	ldrh	r2, [r4, #12]
   21954:	4413      	add	r3, r2
		buf = buf->frags;
   21956:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   21958:	2c00      	cmp	r4, #0
   2195a:	d1fa      	bne.n	21952 <net_ipv6_process_pkt+0xe>
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
	int real_len = net_pkt_get_len(pkt);
   2195c:	461e      	mov	r6, r3
	int pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   2195e:	7939      	ldrb	r1, [r7, #4]
   21960:	797a      	ldrb	r2, [r7, #5]
   21962:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   21966:	3228      	adds	r2, #40	; 0x28
	u8_t next, next_hdr, length;
	u8_t first_option;
	u16_t offset, total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   21968:	4293      	cmp	r3, r2
   2196a:	d007      	beq.n	2197c <net_ipv6_process_pkt+0x38>
	net_stats.ipv6.drop++;
   2196c:	4abd      	ldr	r2, [pc, #756]	; (21c64 <net_ipv6_process_pkt+0x320>)
   2196e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   21970:	3301      	adds	r3, #1
   21972:	6313      	str	r3, [r2, #48]	; 0x30
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   21974:	2002      	movs	r0, #2

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr();

	return NET_DROP;
}
   21976:	b009      	add	sp, #36	; 0x24
   21978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return addr->s6_addr[0] == 0xFF;
   2197c:	7a3b      	ldrb	r3, [r7, #8]
	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   2197e:	2bff      	cmp	r3, #255	; 0xff
   21980:	d105      	bne.n	2198e <net_ipv6_process_pkt+0x4a>
   21982:	4ab8      	ldr	r2, [pc, #736]	; (21c64 <net_ipv6_process_pkt+0x320>)
   21984:	6b13      	ldr	r3, [r2, #48]	; 0x30
   21986:	3301      	adds	r3, #1
   21988:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   2198a:	2002      	movs	r0, #2
   2198c:	e7f3      	b.n	21976 <net_ipv6_process_pkt+0x32>
   2198e:	4605      	mov	r5, r0
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   21990:	f107 0818 	add.w	r8, r7, #24
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   21994:	2100      	movs	r1, #0
   21996:	4640      	mov	r0, r8
   21998:	f7f9 fd7c 	bl	1b494 <net_if_ipv6_addr_lookup>
   2199c:	2800      	cmp	r0, #0
   2199e:	d06f      	beq.n	21a80 <net_ipv6_process_pkt+0x13c>
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   219a0:	1dbb      	adds	r3, r7, #6
	pkt->next_hdr = hdr;
   219a2:	61eb      	str	r3, [r5, #28]
	pkt->ipv6_ext_len = len;
   219a4:	2300      	movs	r3, #0
   219a6:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	pkt->ip_hdr_len = len;
   219aa:	2328      	movs	r3, #40	; 0x28
   219ac:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	next = *(net_pkt_next_hdr(pkt));
   219b0:	f897 9006 	ldrb.w	r9, [r7, #6]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   219b4:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   219b8:	f000 80b0 	beq.w	21b1c <net_ipv6_process_pkt+0x1d8>
   219bc:	f1b9 0f11 	cmp.w	r9, #17
   219c0:	f000 80ae 	beq.w	21b20 <net_ipv6_process_pkt+0x1dc>
   219c4:	f1b9 0f06 	cmp.w	r9, #6
   219c8:	f000 80a6 	beq.w	21b18 <net_ipv6_process_pkt+0x1d4>
   219cc:	2300      	movs	r3, #0
	if (is_upper_layer_protocol_header(next)) {
   219ce:	2b00      	cmp	r3, #0
   219d0:	f040 8166 	bne.w	21ca0 <net_ipv6_process_pkt+0x35c>
	frag = pkt->frags;
   219d4:	f8d5 a008 	ldr.w	sl, [r5, #8]
	offset = sizeof(struct net_ipv6_hdr);
   219d8:	2328      	movs	r3, #40	; 0x28
   219da:	f8ad 301c 	strh.w	r3, [sp, #28]
	next = hdr->nexthdr;
   219de:	464f      	mov	r7, r9
	ext_bitmap = 0;
   219e0:	2300      	movs	r3, #0
   219e2:	9303      	str	r3, [sp, #12]
	u16_t offset, total_len = 0;
   219e4:	9302      	str	r3, [sp, #8]
   219e6:	46a3      	mov	fp, r4
   219e8:	4654      	mov	r4, sl
	while (frag) {
   219ea:	2c00      	cmp	r4, #0
   219ec:	f000 8156 	beq.w	21c9c <net_ipv6_process_pkt+0x358>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   219f0:	2f3a      	cmp	r7, #58	; 0x3a
   219f2:	f000 8099 	beq.w	21b28 <net_ipv6_process_pkt+0x1e4>
   219f6:	2f11      	cmp	r7, #17
   219f8:	f000 8098 	beq.w	21b2c <net_ipv6_process_pkt+0x1e8>
   219fc:	2f06      	cmp	r7, #6
   219fe:	f000 8091 	beq.w	21b24 <net_ipv6_process_pkt+0x1e0>
   21a02:	2300      	movs	r3, #0
		if (is_upper_layer_protocol_header(next)) {
   21a04:	2b00      	cmp	r3, #0
   21a06:	f040 8093 	bne.w	21b30 <net_ipv6_process_pkt+0x1ec>
		start_of_ext = offset;
   21a0a:	f10d 0820 	add.w	r8, sp, #32
   21a0e:	f838 1d04 	ldrh.w	r1, [r8, #-4]!
	return net_frag_read(frag, offset, pos, 1, value);
   21a12:	f10d 031f 	add.w	r3, sp, #31
   21a16:	9300      	str	r3, [sp, #0]
   21a18:	2301      	movs	r3, #1
   21a1a:	4642      	mov	r2, r8
   21a1c:	4620      	mov	r0, r4
   21a1e:	f7fc f86a 	bl	1daf6 <net_frag_read>
		frag = net_frag_read_u8(frag, offset, &offset, &length);
   21a22:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   21a26:	f10d 031e 	add.w	r3, sp, #30
   21a2a:	9300      	str	r3, [sp, #0]
   21a2c:	2301      	movs	r3, #1
   21a2e:	4642      	mov	r2, r8
   21a30:	f7fc f861 	bl	1daf6 <net_frag_read>
		if (!frag && offset == 0xffff) {
   21a34:	4604      	mov	r4, r0
   21a36:	2800      	cmp	r0, #0
   21a38:	f000 8081 	beq.w	21b3e <net_ipv6_process_pkt+0x1fa>
		length = length * 8 + 8;
   21a3c:	f89d 801e 	ldrb.w	r8, [sp, #30]
   21a40:	f108 0801 	add.w	r8, r8, #1
   21a44:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   21a48:	fa5f f888 	uxtb.w	r8, r8
   21a4c:	f88d 801e 	strb.w	r8, [sp, #30]
		total_len += length;
   21a50:	fa1f f888 	uxth.w	r8, r8
   21a54:	9b02      	ldr	r3, [sp, #8]
   21a56:	4443      	add	r3, r8
   21a58:	b29b      	uxth	r3, r3
   21a5a:	9302      	str	r3, [sp, #8]
		switch (next) {
   21a5c:	2f00      	cmp	r7, #0
   21a5e:	d077      	beq.n	21b50 <net_ipv6_process_pkt+0x20c>
   21a60:	2f3b      	cmp	r7, #59	; 0x3b
   21a62:	d073      	beq.n	21b4c <net_ipv6_process_pkt+0x208>
			      offset - 1);
   21a64:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   21a68:	3b01      	subs	r3, #1
   21a6a:	2201      	movs	r2, #1
   21a6c:	2104      	movs	r1, #4
   21a6e:	4628      	mov	r0, r5
   21a70:	f7fd fa88 	bl	1ef84 <net_icmpv6_send_error>
	net_stats.ip_errors.protoerr++;
   21a74:	4a7b      	ldr	r2, [pc, #492]	; (21c64 <net_ipv6_process_pkt+0x320>)
   21a76:	6a13      	ldr	r3, [r2, #32]
   21a78:	3301      	adds	r3, #1
   21a7a:	6213      	str	r3, [r2, #32]
	return NET_DROP;
   21a7c:	2002      	movs	r0, #2
   21a7e:	e77a      	b.n	21976 <net_ipv6_process_pkt+0x32>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   21a80:	2100      	movs	r1, #0
   21a82:	4640      	mov	r0, r8
   21a84:	f7f9 ff50 	bl	1b928 <net_if_ipv6_maddr_lookup>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   21a88:	2800      	cmp	r0, #0
   21a8a:	d189      	bne.n	219a0 <net_ipv6_process_pkt+0x5c>
	return addr->s6_addr[0] == 0xFF;
   21a8c:	7e3b      	ldrb	r3, [r7, #24]
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   21a8e:	2bff      	cmp	r3, #255	; 0xff
   21a90:	d086      	beq.n	219a0 <net_ipv6_process_pkt+0x5c>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21a92:	f8d8 3000 	ldr.w	r3, [r8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21a96:	bb8b      	cbnz	r3, 21afc <net_ipv6_process_pkt+0x1b8>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21a98:	f8d8 3004 	ldr.w	r3, [r8, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21a9c:	bb83      	cbnz	r3, 21b00 <net_ipv6_process_pkt+0x1bc>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21a9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21aa2:	bb7b      	cbnz	r3, 21b04 <net_ipv6_process_pkt+0x1c0>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   21aa4:	f8d8 200c 	ldr.w	r2, [r8, #12]
   21aa8:	0a13      	lsrs	r3, r2, #8
   21aaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   21aae:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   21ab2:	0211      	lsls	r1, r2, #8
   21ab4:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   21ab8:	430b      	orrs	r3, r1
   21aba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21abe:	2b01      	cmp	r3, #1
   21ac0:	d022      	beq.n	21b08 <net_ipv6_process_pkt+0x1c4>
   21ac2:	2300      	movs	r3, #0
	    !net_is_ipv6_addr_mcast(&hdr->dst) &&
   21ac4:	2b00      	cmp	r3, #0
   21ac6:	f47f af6b 	bne.w	219a0 <net_ipv6_process_pkt+0x5c>
		if (net_route_get_info(net_pkt_iface(pkt), &hdr->dst, &route,
   21aca:	ab06      	add	r3, sp, #24
   21acc:	aa05      	add	r2, sp, #20
   21ace:	4641      	mov	r1, r8
   21ad0:	6968      	ldr	r0, [r5, #20]
   21ad2:	f001 f9f5 	bl	22ec0 <net_route_get_info>
   21ad6:	b1c8      	cbz	r0, 21b0c <net_ipv6_process_pkt+0x1c8>
			if (route) {
   21ad8:	9b05      	ldr	r3, [sp, #20]
   21ada:	b13b      	cbz	r3, 21aec <net_ipv6_process_pkt+0x1a8>
				net_pkt_set_iface(pkt, route->iface);
   21adc:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   21ade:	616b      	str	r3, [r5, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21ae0:	7d5a      	ldrb	r2, [r3, #21]
   21ae2:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21ae6:	7d5b      	ldrb	r3, [r3, #21]
   21ae8:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
			ret = net_route_packet(pkt, nexthop);
   21aec:	9906      	ldr	r1, [sp, #24]
   21aee:	4628      	mov	r0, r5
   21af0:	f001 fa0c 	bl	22f0c <net_route_packet>
			if (ret < 0) {
   21af4:	2800      	cmp	r0, #0
   21af6:	db09      	blt.n	21b0c <net_ipv6_process_pkt+0x1c8>
				return NET_OK;
   21af8:	2000      	movs	r0, #0
   21afa:	e73c      	b.n	21976 <net_ipv6_process_pkt+0x32>
   21afc:	2300      	movs	r3, #0
   21afe:	e7e1      	b.n	21ac4 <net_ipv6_process_pkt+0x180>
   21b00:	2300      	movs	r3, #0
   21b02:	e7df      	b.n	21ac4 <net_ipv6_process_pkt+0x180>
   21b04:	2300      	movs	r3, #0
   21b06:	e7dd      	b.n	21ac4 <net_ipv6_process_pkt+0x180>
   21b08:	2301      	movs	r3, #1
   21b0a:	e7db      	b.n	21ac4 <net_ipv6_process_pkt+0x180>
	net_stats.ipv6.drop++;
   21b0c:	4a55      	ldr	r2, [pc, #340]	; (21c64 <net_ipv6_process_pkt+0x320>)
   21b0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   21b10:	3301      	adds	r3, #1
   21b12:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   21b14:	2002      	movs	r0, #2
   21b16:	e72e      	b.n	21976 <net_ipv6_process_pkt+0x32>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   21b18:	2301      	movs	r3, #1
   21b1a:	e758      	b.n	219ce <net_ipv6_process_pkt+0x8a>
   21b1c:	2301      	movs	r3, #1
   21b1e:	e756      	b.n	219ce <net_ipv6_process_pkt+0x8a>
   21b20:	2301      	movs	r3, #1
   21b22:	e754      	b.n	219ce <net_ipv6_process_pkt+0x8a>
   21b24:	2301      	movs	r3, #1
   21b26:	e76d      	b.n	21a04 <net_ipv6_process_pkt+0xc0>
   21b28:	2301      	movs	r3, #1
   21b2a:	e76b      	b.n	21a04 <net_ipv6_process_pkt+0xc0>
   21b2c:	2301      	movs	r3, #1
   21b2e:	e769      	b.n	21a04 <net_ipv6_process_pkt+0xc0>
			net_pkt_set_ipv6_ext_len(pkt, offset -
   21b30:	f89d 301c 	ldrb.w	r3, [sp, #28]
   21b34:	3b28      	subs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   21b36:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   21b3a:	46b9      	mov	r9, r7
   21b3c:	e0b2      	b.n	21ca4 <net_ipv6_process_pkt+0x360>
		if (!frag && offset == 0xffff) {
   21b3e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   21b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21b46:	429a      	cmp	r2, r3
   21b48:	f47f af78 	bne.w	21a3c <net_ipv6_process_pkt+0xf8>
	return NET_DROP;
   21b4c:	2002      	movs	r0, #2
   21b4e:	e712      	b.n	21976 <net_ipv6_process_pkt+0x32>
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   21b50:	f1b9 0f00 	cmp.w	r9, #0
   21b54:	d186      	bne.n	21a64 <net_ipv6_process_pkt+0x120>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   21b56:	9a03      	ldr	r2, [sp, #12]
   21b58:	f012 0f01 	tst.w	r2, #1
   21b5c:	d182      	bne.n	21a64 <net_ipv6_process_pkt+0x120>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   21b5e:	f042 0301 	orr.w	r3, r2, #1
   21b62:	9303      	str	r3, [sp, #12]
			frag = handle_ext_hdr_options(pkt, frag, real_len,
   21b64:	f8bd 101c 	ldrh.w	r1, [sp, #28]
	if (len > total_len) {
   21b68:	4546      	cmp	r6, r8
   21b6a:	f2c0 8094 	blt.w	21c96 <net_ipv6_process_pkt+0x352>
	return net_frag_read(frag, offset, pos, 1, value);
   21b6e:	f10d 0313 	add.w	r3, sp, #19
   21b72:	9300      	str	r3, [sp, #0]
   21b74:	2301      	movs	r3, #1
   21b76:	aa06      	add	r2, sp, #24
   21b78:	4620      	mov	r0, r4
   21b7a:	f7fb ffbc 	bl	1daf6 <net_frag_read>
	frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   21b7e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   21b82:	ab05      	add	r3, sp, #20
   21b84:	9300      	str	r3, [sp, #0]
   21b86:	2301      	movs	r3, #1
   21b88:	aa06      	add	r2, sp, #24
   21b8a:	f7fb ffb4 	bl	1daf6 <net_frag_read>
	if (!frag && loc == 0xffff) {
   21b8e:	4604      	mov	r4, r0
   21b90:	b108      	cbz	r0, 21b96 <net_ipv6_process_pkt+0x252>
   21b92:	2702      	movs	r7, #2
   21b94:	e027      	b.n	21be6 <net_ipv6_process_pkt+0x2a2>
   21b96:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21b9e:	429a      	cmp	r2, r3
   21ba0:	d068      	beq.n	21c74 <net_ipv6_process_pkt+0x330>
   21ba2:	2702      	movs	r7, #2
   21ba4:	e01f      	b.n	21be6 <net_ipv6_process_pkt+0x2a2>
			length++;
   21ba6:	3701      	adds	r7, #1
   21ba8:	b2bf      	uxth	r7, r7
			loc--;
   21baa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   21bae:	3b01      	subs	r3, #1
   21bb0:	f8ad 3018 	strh.w	r3, [sp, #24]
		if (length >= len) {
   21bb4:	45b8      	cmp	r8, r7
   21bb6:	d960      	bls.n	21c7a <net_ipv6_process_pkt+0x336>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_type);
   21bb8:	f10d 0a20 	add.w	sl, sp, #32
   21bbc:	f83a 1d08 	ldrh.w	r1, [sl, #-8]!
   21bc0:	f10d 0313 	add.w	r3, sp, #19
   21bc4:	9300      	str	r3, [sp, #0]
   21bc6:	2301      	movs	r3, #1
   21bc8:	4652      	mov	r2, sl
   21bca:	4620      	mov	r0, r4
   21bcc:	f7fb ff93 	bl	1daf6 <net_frag_read>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   21bd0:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   21bd4:	ab05      	add	r3, sp, #20
   21bd6:	9300      	str	r3, [sp, #0]
   21bd8:	2301      	movs	r3, #1
   21bda:	4652      	mov	r2, sl
   21bdc:	f7fb ff8b 	bl	1daf6 <net_frag_read>
		if (!frag && loc == 0xffff) {
   21be0:	4604      	mov	r4, r0
   21be2:	2800      	cmp	r0, #0
   21be4:	d040      	beq.n	21c68 <net_ipv6_process_pkt+0x324>
	while (frag && (length < len)) {
   21be6:	2c00      	cmp	r4, #0
   21be8:	d047      	beq.n	21c7a <net_ipv6_process_pkt+0x336>
   21bea:	45b8      	cmp	r8, r7
   21bec:	d945      	bls.n	21c7a <net_ipv6_process_pkt+0x336>
		switch (opt_type) {
   21bee:	f89d 3013 	ldrb.w	r3, [sp, #19]
   21bf2:	2b00      	cmp	r3, #0
   21bf4:	d0d7      	beq.n	21ba6 <net_ipv6_process_pkt+0x262>
   21bf6:	2b01      	cmp	r3, #1
   21bf8:	d009      	beq.n	21c0e <net_ipv6_process_pkt+0x2ca>
	switch (opt_type & 0xc0) {
   21bfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   21bfe:	2b80      	cmp	r3, #128	; 0x80
   21c00:	d019      	beq.n	21c36 <net_ipv6_process_pkt+0x2f2>
   21c02:	2bc0      	cmp	r3, #192	; 0xc0
   21c04:	d012      	beq.n	21c2c <net_ipv6_process_pkt+0x2e8>
   21c06:	2b40      	cmp	r3, #64	; 0x40
   21c08:	d00e      	beq.n	21c28 <net_ipv6_process_pkt+0x2e4>
	return pkt;
   21c0a:	462b      	mov	r3, r5
   21c0c:	e01a      	b.n	21c44 <net_ipv6_process_pkt+0x300>
			length += opt_len + 2;
   21c0e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21c12:	441f      	add	r7, r3
   21c14:	b2bf      	uxth	r7, r7
   21c16:	3702      	adds	r7, #2
   21c18:	b2bf      	uxth	r7, r7
			loc += opt_len + 2;
   21c1a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21c1e:	4413      	add	r3, r2
   21c20:	3302      	adds	r3, #2
   21c22:	f8ad 3018 	strh.w	r3, [sp, #24]
   21c26:	e7c5      	b.n	21bb4 <net_ipv6_process_pkt+0x270>
		return NULL;
   21c28:	2300      	movs	r3, #0
   21c2a:	e00b      	b.n	21c44 <net_ipv6_process_pkt+0x300>
	return pkt->frags->data;
   21c2c:	68ab      	ldr	r3, [r5, #8]
   21c2e:	689b      	ldr	r3, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   21c30:	7e1b      	ldrb	r3, [r3, #24]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   21c32:	2bff      	cmp	r3, #255	; 0xff
   21c34:	d013      	beq.n	21c5e <net_ipv6_process_pkt+0x31a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   21c36:	463b      	mov	r3, r7
   21c38:	2202      	movs	r2, #2
   21c3a:	2104      	movs	r1, #4
   21c3c:	4628      	mov	r0, r5
   21c3e:	f7fd f9a1 	bl	1ef84 <net_icmpv6_send_error>
		return NULL;
   21c42:	2300      	movs	r3, #0
			if (!check_unknown_option(pkt, opt_type, length)) {
   21c44:	b1b3      	cbz	r3, 21c74 <net_ipv6_process_pkt+0x330>
			length += opt_len + 2;
   21c46:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21c4a:	441f      	add	r7, r3
   21c4c:	b2bf      	uxth	r7, r7
   21c4e:	3702      	adds	r7, #2
   21c50:	b2bf      	uxth	r7, r7
			loc += opt_len;
   21c52:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21c56:	4413      	add	r3, r2
   21c58:	f8ad 3018 	strh.w	r3, [sp, #24]
   21c5c:	e7aa      	b.n	21bb4 <net_ipv6_process_pkt+0x270>
			return NULL;
   21c5e:	2300      	movs	r3, #0
   21c60:	e7f0      	b.n	21c44 <net_ipv6_process_pkt+0x300>
   21c62:	bf00      	nop
   21c64:	20002b58 	.word	0x20002b58
		if (!frag && loc == 0xffff) {
   21c68:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21c70:	429a      	cmp	r2, r3
   21c72:	d1b8      	bne.n	21be6 <net_ipv6_process_pkt+0x2a2>
	return NULL;
   21c74:	465c      	mov	r4, fp
	*verdict = NET_DROP;
   21c76:	2302      	movs	r3, #2
   21c78:	e007      	b.n	21c8a <net_ipv6_process_pkt+0x346>
	if (length != len) {
   21c7a:	45b8      	cmp	r8, r7
   21c7c:	d1fa      	bne.n	21c74 <net_ipv6_process_pkt+0x330>
	*pos += length;
   21c7e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   21c82:	441f      	add	r7, r3
   21c84:	f8ad 701c 	strh.w	r7, [sp, #28]
	*verdict = NET_CONTINUE;
   21c88:	2301      	movs	r3, #1
		if (verdict == NET_DROP) {
   21c8a:	2b02      	cmp	r3, #2
   21c8c:	f43f af5e 	beq.w	21b4c <net_ipv6_process_pkt+0x208>
		next = next_hdr;
   21c90:	f89d 701f 	ldrb.w	r7, [sp, #31]
   21c94:	e6a9      	b.n	219ea <net_ipv6_process_pkt+0xa6>
		return NULL;
   21c96:	465c      	mov	r4, fp
		*verdict = NET_DROP;
   21c98:	2302      	movs	r3, #2
   21c9a:	e7f6      	b.n	21c8a <net_ipv6_process_pkt+0x346>
   21c9c:	46b9      	mov	r9, r7
   21c9e:	e001      	b.n	21ca4 <net_ipv6_process_pkt+0x360>
	u16_t offset, total_len = 0;
   21ca0:	2300      	movs	r3, #0
   21ca2:	9302      	str	r3, [sp, #8]
	if (total_len > 0) {
   21ca4:	9b02      	ldr	r3, [sp, #8]
   21ca6:	b10b      	cbz	r3, 21cac <net_ipv6_process_pkt+0x368>
	pkt->ipv6_ext_len = len;
   21ca8:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	switch (next) {
   21cac:	f1b9 0f11 	cmp.w	r9, #17
   21cb0:	d011      	beq.n	21cd6 <net_ipv6_process_pkt+0x392>
   21cb2:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   21cb6:	d004      	beq.n	21cc2 <net_ipv6_process_pkt+0x37e>
   21cb8:	f1b9 0f06 	cmp.w	r9, #6
   21cbc:	d010      	beq.n	21ce0 <net_ipv6_process_pkt+0x39c>
	return NET_DROP;
   21cbe:	2002      	movs	r0, #2
   21cc0:	e659      	b.n	21976 <net_ipv6_process_pkt+0x32>
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   21cc2:	a906      	add	r1, sp, #24
   21cc4:	4628      	mov	r0, r5
   21cc6:	f7fc fe9c 	bl	1ea02 <net_icmpv6_get_hdr>
	return net_icmpv6_input(pkt, icmp_hdr->type, icmp_hdr->code);
   21cca:	7842      	ldrb	r2, [r0, #1]
   21ccc:	7801      	ldrb	r1, [r0, #0]
   21cce:	4628      	mov	r0, r5
   21cd0:	f7fd fb62 	bl	1f398 <net_icmpv6_input>
		return process_icmpv6_pkt(pkt, hdr);
   21cd4:	e64f      	b.n	21976 <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_UDP, pkt);
   21cd6:	4629      	mov	r1, r5
   21cd8:	2011      	movs	r0, #17
   21cda:	f003 fbd3 	bl	25484 <net_conn_input>
   21cde:	e64a      	b.n	21976 <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_TCP, pkt);
   21ce0:	4629      	mov	r1, r5
   21ce2:	2006      	movs	r0, #6
   21ce4:	f003 fbce 	bl	25484 <net_conn_input>
   21ce8:	e645      	b.n	21976 <net_ipv6_process_pkt+0x32>
   21cea:	bf00      	nop

00021cec <net_ipv6_init>:

void net_ipv6_init(void)
{
   21cec:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   21cee:	4806      	ldr	r0, [pc, #24]	; (21d08 <net_ipv6_init+0x1c>)
   21cf0:	f7fc fe0a 	bl	1e908 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   21cf4:	4805      	ldr	r0, [pc, #20]	; (21d0c <net_ipv6_init+0x20>)
   21cf6:	f7fc fe07 	bl	1e908 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   21cfa:	4805      	ldr	r0, [pc, #20]	; (21d10 <net_ipv6_init+0x24>)
   21cfc:	f7fc fe04 	bl	1e908 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_MLD)
	net_icmpv6_register_handler(&mld_query_input_handler);
   21d00:	4804      	ldr	r0, [pc, #16]	; (21d14 <net_ipv6_init+0x28>)
   21d02:	f7fc fe01 	bl	1e908 <net_icmpv6_register_handler>
   21d06:	bd08      	pop	{r3, pc}
   21d08:	2000c360 	.word	0x2000c360
   21d0c:	2000bf48 	.word	0x2000bf48
   21d10:	2000c36c 	.word	0x2000c36c
   21d14:	2000bf3c 	.word	0x2000bf3c

00021d18 <uncompress_IPHC_header>:
	}
}
#endif

static inline bool uncompress_IPHC_header(struct net_pkt *pkt)
{
   21d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(CONFIG_NET_6LO_CONTEXT)
	struct net_6lo_context *src = NULL;
	struct net_6lo_context *dst = NULL;
#endif

	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   21d1c:	6883      	ldr	r3, [r0, #8]
   21d1e:	689b      	ldr	r3, [r3, #8]
   21d20:	f993 3001 	ldrsb.w	r3, [r3, #1]
   21d24:	2b00      	cmp	r3, #0
   21d26:	f2c0 831e 	blt.w	22366 <uncompress_IPHC_header+0x64e>
   21d2a:	4604      	mov	r4, r0
		NET_WARN("Context based uncompression not enabled");
		return false;
#endif
	}

	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   21d2c:	2164      	movs	r1, #100	; 0x64
   21d2e:	f7fb fd11 	bl	1d754 <net_pkt_get_frag>
	if (!frag) {
   21d32:	4607      	mov	r7, r0
   21d34:	2800      	cmp	r0, #0
   21d36:	f000 8319 	beq.w	2236c <uncompress_IPHC_header+0x654>
		return false;
	}

	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   21d3a:	6886      	ldr	r6, [r0, #8]

	/* Version is always 6 */
	ipv6->vtc = 0x60;
   21d3c:	2360      	movs	r3, #96	; 0x60
   21d3e:	7033      	strb	r3, [r6, #0]
	pkt->ip_hdr_len = len;
   21d40:	2328      	movs	r3, #40	; 0x28
   21d42:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   21d46:	68a3      	ldr	r3, [r4, #8]
   21d48:	689a      	ldr	r2, [r3, #8]
   21d4a:	7813      	ldrb	r3, [r2, #0]
   21d4c:	f003 0318 	and.w	r3, r3, #24
   21d50:	2b18      	cmp	r3, #24
   21d52:	d863      	bhi.n	21e1c <uncompress_IPHC_header+0x104>
   21d54:	e8df f003 	tbb	[pc, r3]
   21d58:	6262620d 	.word	0x6262620d
   21d5c:	62626262 	.word	0x62626262
   21d60:	6262623c 	.word	0x6262623c
   21d64:	62626262 	.word	0x62626262
   21d68:	6262624c 	.word	0x6262624c
   21d6c:	62626262 	.word	0x62626262
   21d70:	5c          	.byte	0x5c
   21d71:	00          	.byte	0x00
		tcl = CIPHC[offset++];
   21d72:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   21d74:	0993      	lsrs	r3, r2, #6
   21d76:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   21d7a:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   21d7c:	7832      	ldrb	r2, [r6, #0]
   21d7e:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   21d82:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   21d84:	68a2      	ldr	r2, [r4, #8]
   21d86:	6892      	ldr	r2, [r2, #8]
   21d88:	f992 2003 	ldrsb.w	r2, [r2, #3]
   21d8c:	f002 020f 	and.w	r2, r2, #15
   21d90:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
   21d94:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   21d96:	68a3      	ldr	r3, [r4, #8]
   21d98:	6899      	ldr	r1, [r3, #8]
   21d9a:	2202      	movs	r2, #2
   21d9c:	3104      	adds	r1, #4
   21d9e:	18b0      	adds	r0, r6, r2
   21da0:	f7de fa8e 	bl	2c0 <memcpy>
		offset += 2;
   21da4:	2506      	movs	r5, #6
	net_pkt_set_ip_hdr_len(pkt, NET_IPV6H_LEN);

	/* Uncompress Traffic class and Flow label */
	offset = uncompress_tfl(pkt, ipv6, offset);

	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   21da6:	68a3      	ldr	r3, [r4, #8]
   21da8:	689b      	ldr	r3, [r3, #8]
   21daa:	781a      	ldrb	r2, [r3, #0]
   21dac:	f012 0f04 	tst.w	r2, #4
   21db0:	d103      	bne.n	21dba <uncompress_IPHC_header+0xa2>
		ipv6->nexthdr = CIPHC[offset];
   21db2:	5d5b      	ldrb	r3, [r3, r5]
   21db4:	71b3      	strb	r3, [r6, #6]
		offset++;
   21db6:	3501      	adds	r5, #1
   21db8:	b2ed      	uxtb	r5, r5
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   21dba:	68a3      	ldr	r3, [r4, #8]
   21dbc:	689a      	ldr	r2, [r3, #8]
   21dbe:	7813      	ldrb	r3, [r2, #0]
   21dc0:	f003 0303 	and.w	r3, r3, #3
   21dc4:	2b03      	cmp	r3, #3
   21dc6:	d82f      	bhi.n	21e28 <uncompress_IPHC_header+0x110>
   21dc8:	e8df f003 	tbb	[pc, r3]
   21dcc:	4f4c492a 	.word	0x4f4c492a
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   21dd0:	7893      	ldrb	r3, [r2, #2]
   21dd2:	099a      	lsrs	r2, r3, #6
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   21dd4:	f003 030f 	and.w	r3, r3, #15
   21dd8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   21ddc:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   21dde:	68a3      	ldr	r3, [r4, #8]
   21de0:	6899      	ldr	r1, [r3, #8]
   21de2:	2202      	movs	r2, #2
   21de4:	3103      	adds	r1, #3
   21de6:	18b0      	adds	r0, r6, r2
   21de8:	f7de fa6a 	bl	2c0 <memcpy>
		offset += 2;
   21dec:	2505      	movs	r5, #5
   21dee:	e7da      	b.n	21da6 <uncompress_IPHC_header+0x8e>
		tcl = CIPHC[offset];
   21df0:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   21df2:	0993      	lsrs	r3, r2, #6
   21df4:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   21df8:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   21dfa:	7832      	ldrb	r2, [r6, #0]
   21dfc:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   21e00:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = (tcl & 0x0F) << 4;
   21e02:	011b      	lsls	r3, r3, #4
   21e04:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21e06:	2300      	movs	r3, #0
   21e08:	70b3      	strb	r3, [r6, #2]
   21e0a:	70f3      	strb	r3, [r6, #3]
		offset++;
   21e0c:	2503      	movs	r5, #3
   21e0e:	e7ca      	b.n	21da6 <uncompress_IPHC_header+0x8e>
		ipv6->tcflow = 0;
   21e10:	2300      	movs	r3, #0
   21e12:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21e14:	70b3      	strb	r3, [r6, #2]
   21e16:	70f3      	strb	r3, [r6, #3]
   21e18:	2502      	movs	r5, #2
   21e1a:	e7c4      	b.n	21da6 <uncompress_IPHC_header+0x8e>
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   21e1c:	2502      	movs	r5, #2
   21e1e:	e7c2      	b.n	21da6 <uncompress_IPHC_header+0x8e>
		ipv6->hop_limit = CIPHC[offset++];
   21e20:	1c6b      	adds	r3, r5, #1
   21e22:	5d52      	ldrb	r2, [r2, r5]
   21e24:	71f2      	strb	r2, [r6, #7]
   21e26:	b2dd      	uxtb	r5, r3

	/* Uncompress Hoplimit */
	offset = uncompress_hoplimit(pkt, ipv6, offset);

	/* First set to zero and copy relevant bits */
	memset(&ipv6->src.s6_addr[0], 0, 16);
   21e28:	2210      	movs	r2, #16
   21e2a:	2100      	movs	r1, #0
   21e2c:	f106 0008 	add.w	r0, r6, #8
   21e30:	f008 fd72 	bl	2a918 <memset>
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   21e34:	2210      	movs	r2, #16
   21e36:	2100      	movs	r1, #0
   21e38:	f106 0018 	add.w	r0, r6, #24
   21e3c:	f008 fd6c 	bl	2a918 <memset>

	/* Uncompress Source Address */
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   21e40:	68a3      	ldr	r3, [r4, #8]
   21e42:	689b      	ldr	r3, [r3, #8]
   21e44:	785b      	ldrb	r3, [r3, #1]
   21e46:	f013 0f40 	tst.w	r3, #64	; 0x40
   21e4a:	d011      	beq.n	21e70 <uncompress_IPHC_header+0x158>
		NET_DBG("SAC_1");

		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   21e4c:	f013 0f30 	tst.w	r3, #48	; 0x30
   21e50:	d05e      	beq.n	21f10 <uncompress_IPHC_header+0x1f8>
	}

	return true;

fail:
	net_pkt_frag_unref(frag);
   21e52:	4638      	mov	r0, r7
   21e54:	f7fb fccb 	bl	1d7ee <net_pkt_frag_unref>
	return false;
   21e58:	2000      	movs	r0, #0
   21e5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ipv6->hop_limit = 1;
   21e5e:	2301      	movs	r3, #1
   21e60:	71f3      	strb	r3, [r6, #7]
   21e62:	e7e1      	b.n	21e28 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 64;
   21e64:	2340      	movs	r3, #64	; 0x40
   21e66:	71f3      	strb	r3, [r6, #7]
   21e68:	e7de      	b.n	21e28 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 255;
   21e6a:	23ff      	movs	r3, #255	; 0xff
   21e6c:	71f3      	strb	r3, [r6, #7]
   21e6e:	e7db      	b.n	21e28 <uncompress_IPHC_header+0x110>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   21e70:	68a3      	ldr	r3, [r4, #8]
   21e72:	6899      	ldr	r1, [r3, #8]
   21e74:	784b      	ldrb	r3, [r1, #1]
   21e76:	f003 0330 	and.w	r3, r3, #48	; 0x30
   21e7a:	2b10      	cmp	r3, #16
   21e7c:	d059      	beq.n	21f32 <uncompress_IPHC_header+0x21a>
   21e7e:	d93e      	bls.n	21efe <uncompress_IPHC_header+0x1e6>
   21e80:	2b20      	cmp	r3, #32
   21e82:	d065      	beq.n	21f50 <uncompress_IPHC_header+0x238>
   21e84:	2b30      	cmp	r3, #48	; 0x30
   21e86:	d143      	bne.n	21f10 <uncompress_IPHC_header+0x1f8>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_ll_src(pkt));
   21e88:	f106 0808 	add.w	r8, r6, #8
	return &pkt->lladdr_src;
   21e8c:	f104 0920 	add.w	r9, r4, #32
	addr->s6_addr[0] = 0xfe;
   21e90:	23fe      	movs	r3, #254	; 0xfe
   21e92:	7233      	strb	r3, [r6, #8]
	addr->s6_addr[1] = 0x80;
   21e94:	2380      	movs	r3, #128	; 0x80
   21e96:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   21e9a:	2300      	movs	r3, #0
   21e9c:	f888 3002 	strb.w	r3, [r8, #2]
   21ea0:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   21ea4:	f888 3004 	strb.w	r3, [r8, #4]
   21ea8:	f888 3005 	strb.w	r3, [r8, #5]
   21eac:	f888 3006 	strb.w	r3, [r8, #6]
   21eb0:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   21eb4:	f899 2004 	ldrb.w	r2, [r9, #4]
   21eb8:	2a06      	cmp	r2, #6
   21eba:	d05b      	beq.n	21f74 <uncompress_IPHC_header+0x25c>
   21ebc:	2a08      	cmp	r2, #8
   21ebe:	f000 8082 	beq.w	21fc6 <uncompress_IPHC_header+0x2ae>
   21ec2:	2a02      	cmp	r2, #2
   21ec4:	d124      	bne.n	21f10 <uncompress_IPHC_header+0x1f8>
		if (lladdr->type == NET_LINK_IEEE802154) {
   21ec6:	f899 3005 	ldrb.w	r3, [r9, #5]
   21eca:	2b01      	cmp	r3, #1
   21ecc:	d120      	bne.n	21f10 <uncompress_IPHC_header+0x1f8>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   21ece:	2300      	movs	r3, #0
   21ed0:	f888 3008 	strb.w	r3, [r8, #8]
   21ed4:	f888 3009 	strb.w	r3, [r8, #9]
   21ed8:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   21edc:	22ff      	movs	r2, #255	; 0xff
   21ede:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   21ee2:	22fe      	movs	r2, #254	; 0xfe
   21ee4:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   21ee8:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   21eec:	6a23      	ldr	r3, [r4, #32]
   21eee:	781b      	ldrb	r3, [r3, #0]
   21ef0:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   21ef4:	6a23      	ldr	r3, [r4, #32]
   21ef6:	785b      	ldrb	r3, [r3, #1]
   21ef8:	f888 300f 	strb.w	r3, [r8, #15]
   21efc:	e008      	b.n	21f10 <uncompress_IPHC_header+0x1f8>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   21efe:	b93b      	cbnz	r3, 21f10 <uncompress_IPHC_header+0x1f8>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   21f00:	2210      	movs	r2, #16
   21f02:	4429      	add	r1, r5
   21f04:	f106 0008 	add.w	r0, r6, #8
   21f08:	f7de f9da 	bl	2c0 <memcpy>
		offset += 16;
   21f0c:	3510      	adds	r5, #16
   21f0e:	b2ed      	uxtb	r5, r5
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   21f10:	68a3      	ldr	r3, [r4, #8]
   21f12:	6899      	ldr	r1, [r3, #8]
   21f14:	784b      	ldrb	r3, [r1, #1]
   21f16:	f013 0f08 	tst.w	r3, #8
   21f1a:	d160      	bne.n	21fde <uncompress_IPHC_header+0x2c6>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   21f1c:	f003 0303 	and.w	r3, r3, #3
   21f20:	2b03      	cmp	r3, #3
   21f22:	f200 80ad 	bhi.w	22080 <uncompress_IPHC_header+0x368>
   21f26:	e8df f013 	tbh	[pc, r3, lsl #1]
   21f2a:	00a3      	.short	0x00a3
   21f2c:	00e500d6 	.word	0x00e500d6
   21f30:	00f9      	.short	0x00f9
		ipv6->src.s6_addr[0] = 0xFE;
   21f32:	23fe      	movs	r3, #254	; 0xfe
   21f34:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   21f36:	2380      	movs	r3, #128	; 0x80
   21f38:	7273      	strb	r3, [r6, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   21f3a:	68a3      	ldr	r3, [r4, #8]
   21f3c:	6899      	ldr	r1, [r3, #8]
   21f3e:	2208      	movs	r2, #8
   21f40:	4429      	add	r1, r5
   21f42:	f106 0010 	add.w	r0, r6, #16
   21f46:	f7de f9bb 	bl	2c0 <memcpy>
		offset += 8;
   21f4a:	3508      	adds	r5, #8
   21f4c:	b2ed      	uxtb	r5, r5
   21f4e:	e7df      	b.n	21f10 <uncompress_IPHC_header+0x1f8>
		ipv6->src.s6_addr[0] = 0xFE;
   21f50:	23fe      	movs	r3, #254	; 0xfe
   21f52:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   21f54:	2280      	movs	r2, #128	; 0x80
   21f56:	7272      	strb	r2, [r6, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   21f58:	22ff      	movs	r2, #255	; 0xff
   21f5a:	74f2      	strb	r2, [r6, #19]
		ipv6->src.s6_addr[12] = 0xFE;
   21f5c:	7533      	strb	r3, [r6, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   21f5e:	68a3      	ldr	r3, [r4, #8]
   21f60:	6899      	ldr	r1, [r3, #8]
   21f62:	2202      	movs	r2, #2
   21f64:	4429      	add	r1, r5
   21f66:	f106 0016 	add.w	r0, r6, #22
   21f6a:	f7de f9a9 	bl	2c0 <memcpy>
		offset += 2;
   21f6e:	3502      	adds	r5, #2
   21f70:	b2ed      	uxtb	r5, r5
   21f72:	e7cd      	b.n	21f10 <uncompress_IPHC_header+0x1f8>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   21f74:	2203      	movs	r2, #3
   21f76:	6a21      	ldr	r1, [r4, #32]
   21f78:	f108 0008 	add.w	r0, r8, #8
   21f7c:	f7de f9a0 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   21f80:	23ff      	movs	r3, #255	; 0xff
   21f82:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   21f86:	23fe      	movs	r3, #254	; 0xfe
   21f88:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   21f8c:	6a21      	ldr	r1, [r4, #32]
   21f8e:	2203      	movs	r2, #3
   21f90:	4411      	add	r1, r2
   21f92:	f108 000d 	add.w	r0, r8, #13
   21f96:	f7de f993 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   21f9a:	f899 3005 	ldrb.w	r3, [r9, #5]
   21f9e:	2b02      	cmp	r3, #2
   21fa0:	d00a      	beq.n	21fb8 <uncompress_IPHC_header+0x2a0>
		if (lladdr->type == NET_LINK_ETHERNET) {
   21fa2:	f899 3005 	ldrb.w	r3, [r9, #5]
   21fa6:	2b03      	cmp	r3, #3
   21fa8:	d1b2      	bne.n	21f10 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   21faa:	f898 3008 	ldrb.w	r3, [r8, #8]
   21fae:	f083 0302 	eor.w	r3, r3, #2
   21fb2:	f888 3008 	strb.w	r3, [r8, #8]
   21fb6:	e7ab      	b.n	21f10 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   21fb8:	f898 3008 	ldrb.w	r3, [r8, #8]
   21fbc:	f083 0302 	eor.w	r3, r3, #2
   21fc0:	f888 3008 	strb.w	r3, [r8, #8]
   21fc4:	e7ed      	b.n	21fa2 <uncompress_IPHC_header+0x28a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   21fc6:	6a21      	ldr	r1, [r4, #32]
   21fc8:	f108 0008 	add.w	r0, r8, #8
   21fcc:	f7de f978 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   21fd0:	f898 3008 	ldrb.w	r3, [r8, #8]
   21fd4:	f083 0302 	eor.w	r3, r3, #2
   21fd8:	f888 3008 	strb.w	r3, [r8, #8]
   21fdc:	e798      	b.n	21f10 <uncompress_IPHC_header+0x1f8>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   21fde:	784b      	ldrb	r3, [r1, #1]
   21fe0:	f013 0f04 	tst.w	r3, #4
   21fe4:	d142      	bne.n	2206c <uncompress_IPHC_header+0x354>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   21fe6:	f003 0303 	and.w	r3, r3, #3
   21fea:	2b03      	cmp	r3, #3
   21fec:	d848      	bhi.n	22080 <uncompress_IPHC_header+0x368>
   21fee:	e8df f003 	tbb	[pc, r3]
   21ff2:	0b02      	.short	0x0b02
   21ff4:	311e      	.short	0x311e
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   21ff6:	2210      	movs	r2, #16
   21ff8:	4429      	add	r1, r5
   21ffa:	f106 0018 	add.w	r0, r6, #24
   21ffe:	f7de f95f 	bl	2c0 <memcpy>
		offset += 16;
   22002:	3510      	adds	r5, #16
   22004:	b2ed      	uxtb	r5, r5
   22006:	e03b      	b.n	22080 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   22008:	23ff      	movs	r3, #255	; 0xff
   2200a:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   2200c:	68a3      	ldr	r3, [r4, #8]
   2200e:	689b      	ldr	r3, [r3, #8]
   22010:	1c69      	adds	r1, r5, #1
   22012:	5d5b      	ldrb	r3, [r3, r5]
   22014:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   22016:	68a3      	ldr	r3, [r4, #8]
   22018:	689b      	ldr	r3, [r3, #8]
   2201a:	2205      	movs	r2, #5
   2201c:	fa53 f181 	uxtab	r1, r3, r1
   22020:	f106 0023 	add.w	r0, r6, #35	; 0x23
   22024:	f7de f94c 	bl	2c0 <memcpy>
		offset += 5;
   22028:	3506      	adds	r5, #6
   2202a:	b2ed      	uxtb	r5, r5
   2202c:	e028      	b.n	22080 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   2202e:	23ff      	movs	r3, #255	; 0xff
   22030:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   22032:	68a3      	ldr	r3, [r4, #8]
   22034:	689b      	ldr	r3, [r3, #8]
   22036:	1c69      	adds	r1, r5, #1
   22038:	5d5b      	ldrb	r3, [r3, r5]
   2203a:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   2203c:	68a3      	ldr	r3, [r4, #8]
   2203e:	689b      	ldr	r3, [r3, #8]
   22040:	2203      	movs	r2, #3
   22042:	fa53 f181 	uxtab	r1, r3, r1
   22046:	f106 0025 	add.w	r0, r6, #37	; 0x25
   2204a:	f7de f939 	bl	2c0 <memcpy>
		offset += 3;
   2204e:	3504      	adds	r5, #4
   22050:	b2ed      	uxtb	r5, r5
   22052:	e015      	b.n	22080 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   22054:	23ff      	movs	r3, #255	; 0xff
   22056:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   22058:	2302      	movs	r3, #2
   2205a:	7673      	strb	r3, [r6, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   2205c:	68a3      	ldr	r3, [r4, #8]
   2205e:	689a      	ldr	r2, [r3, #8]
   22060:	1c6b      	adds	r3, r5, #1
   22062:	5d52      	ldrb	r2, [r2, r5]
   22064:	f886 2027 	strb.w	r2, [r6, #39]	; 0x27
   22068:	b2dd      	uxtb	r5, r3
   2206a:	e009      	b.n	22080 <uncompress_IPHC_header+0x368>
		return 0;
   2206c:	2500      	movs	r5, #0
   2206e:	e007      	b.n	22080 <uncompress_IPHC_header+0x368>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   22070:	2210      	movs	r2, #16
   22072:	4429      	add	r1, r5
   22074:	f106 0018 	add.w	r0, r6, #24
   22078:	f7de f922 	bl	2c0 <memcpy>
		offset += 16;
   2207c:	3510      	adds	r5, #16
   2207e:	b2ed      	uxtb	r5, r5
	net_buf_add(frag, NET_IPV6H_LEN);
   22080:	f107 0a08 	add.w	sl, r7, #8
   22084:	2128      	movs	r1, #40	; 0x28
   22086:	4650      	mov	r0, sl
   22088:	f7f8 fe94 	bl	1adb4 <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   2208c:	68a3      	ldr	r3, [r4, #8]
   2208e:	689b      	ldr	r3, [r3, #8]
   22090:	781a      	ldrb	r2, [r3, #0]
   22092:	f012 0f04 	tst.w	r2, #4
   22096:	f000 8114 	beq.w	222c2 <uncompress_IPHC_header+0x5aa>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   2209a:	5d5b      	ldrb	r3, [r3, r5]
   2209c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   220a0:	2bf0      	cmp	r3, #240	; 0xf0
   220a2:	f47f aed6 	bne.w	21e52 <uncompress_IPHC_header+0x13a>
	ipv6->nexthdr = IPPROTO_UDP;
   220a6:	2311      	movs	r3, #17
   220a8:	71b3      	strb	r3, [r6, #6]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   220aa:	f8d7 b008 	ldr.w	fp, [r7, #8]
   220ae:	f10b 0928 	add.w	r9, fp, #40	; 0x28
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   220b2:	68a3      	ldr	r3, [r4, #8]
   220b4:	6898      	ldr	r0, [r3, #8]
   220b6:	f810 8005 	ldrb.w	r8, [r0, r5]
   220ba:	f008 0808 	and.w	r8, r8, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   220be:	1c69      	adds	r1, r5, #1
   220c0:	b2c9      	uxtb	r1, r1
   220c2:	5d43      	ldrb	r3, [r0, r5]
   220c4:	f003 0303 	and.w	r3, r3, #3
   220c8:	2b03      	cmp	r3, #3
   220ca:	f200 80ed 	bhi.w	222a8 <uncompress_IPHC_header+0x590>
   220ce:	e8df f003 	tbb	[pc, r3]
   220d2:	ae95      	.short	0xae95
   220d4:	d3c0      	.short	0xd3c0
		ipv6->dst.s6_addr[0] = 0xFE;
   220d6:	23fe      	movs	r3, #254	; 0xfe
   220d8:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   220da:	2380      	movs	r3, #128	; 0x80
   220dc:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   220de:	68a3      	ldr	r3, [r4, #8]
   220e0:	6899      	ldr	r1, [r3, #8]
   220e2:	2208      	movs	r2, #8
   220e4:	4429      	add	r1, r5
   220e6:	f106 0020 	add.w	r0, r6, #32
   220ea:	f7de f8e9 	bl	2c0 <memcpy>
		offset += 8;
   220ee:	3508      	adds	r5, #8
   220f0:	b2ed      	uxtb	r5, r5
   220f2:	e7c5      	b.n	22080 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFE;
   220f4:	23fe      	movs	r3, #254	; 0xfe
   220f6:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   220f8:	2280      	movs	r2, #128	; 0x80
   220fa:	7672      	strb	r2, [r6, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   220fc:	22ff      	movs	r2, #255	; 0xff
   220fe:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
		ipv6->dst.s6_addr[12] = 0xFE;
   22102:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   22106:	68a3      	ldr	r3, [r4, #8]
   22108:	6899      	ldr	r1, [r3, #8]
   2210a:	2202      	movs	r2, #2
   2210c:	4429      	add	r1, r5
   2210e:	f106 0026 	add.w	r0, r6, #38	; 0x26
   22112:	f7de f8d5 	bl	2c0 <memcpy>
		offset += 2;
   22116:	3502      	adds	r5, #2
   22118:	b2ed      	uxtb	r5, r5
   2211a:	e7b1      	b.n	22080 <uncompress_IPHC_header+0x368>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_ll_dst(pkt));
   2211c:	f106 0818 	add.w	r8, r6, #24
	return &pkt->lladdr_dst;
   22120:	f104 0928 	add.w	r9, r4, #40	; 0x28
	addr->s6_addr[0] = 0xfe;
   22124:	23fe      	movs	r3, #254	; 0xfe
   22126:	7633      	strb	r3, [r6, #24]
	addr->s6_addr[1] = 0x80;
   22128:	2380      	movs	r3, #128	; 0x80
   2212a:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   2212e:	2300      	movs	r3, #0
   22130:	f888 3002 	strb.w	r3, [r8, #2]
   22134:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   22138:	f888 3004 	strb.w	r3, [r8, #4]
   2213c:	f888 3005 	strb.w	r3, [r8, #5]
   22140:	f888 3006 	strb.w	r3, [r8, #6]
   22144:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   22148:	f899 2004 	ldrb.w	r2, [r9, #4]
   2214c:	2a06      	cmp	r2, #6
   2214e:	d01f      	beq.n	22190 <uncompress_IPHC_header+0x478>
   22150:	2a08      	cmp	r2, #8
   22152:	d047      	beq.n	221e4 <uncompress_IPHC_header+0x4cc>
   22154:	2a02      	cmp	r2, #2
   22156:	d193      	bne.n	22080 <uncompress_IPHC_header+0x368>
		if (lladdr->type == NET_LINK_IEEE802154) {
   22158:	f899 3005 	ldrb.w	r3, [r9, #5]
   2215c:	2b01      	cmp	r3, #1
   2215e:	d18f      	bne.n	22080 <uncompress_IPHC_header+0x368>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   22160:	2300      	movs	r3, #0
   22162:	f888 3008 	strb.w	r3, [r8, #8]
   22166:	f888 3009 	strb.w	r3, [r8, #9]
   2216a:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   2216e:	22ff      	movs	r2, #255	; 0xff
   22170:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   22174:	22fe      	movs	r2, #254	; 0xfe
   22176:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   2217a:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   2217e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22180:	781b      	ldrb	r3, [r3, #0]
   22182:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   22186:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22188:	785b      	ldrb	r3, [r3, #1]
   2218a:	f888 300f 	strb.w	r3, [r8, #15]
   2218e:	e777      	b.n	22080 <uncompress_IPHC_header+0x368>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   22190:	2203      	movs	r2, #3
   22192:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22194:	f108 0008 	add.w	r0, r8, #8
   22198:	f7de f892 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   2219c:	23ff      	movs	r3, #255	; 0xff
   2219e:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   221a2:	23fe      	movs	r3, #254	; 0xfe
   221a4:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   221a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   221aa:	2203      	movs	r2, #3
   221ac:	4411      	add	r1, r2
   221ae:	f108 000d 	add.w	r0, r8, #13
   221b2:	f7de f885 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   221b6:	f899 3005 	ldrb.w	r3, [r9, #5]
   221ba:	2b02      	cmp	r3, #2
   221bc:	d00b      	beq.n	221d6 <uncompress_IPHC_header+0x4be>
		if (lladdr->type == NET_LINK_ETHERNET) {
   221be:	f899 3005 	ldrb.w	r3, [r9, #5]
   221c2:	2b03      	cmp	r3, #3
   221c4:	f47f af5c 	bne.w	22080 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   221c8:	f898 3008 	ldrb.w	r3, [r8, #8]
   221cc:	f083 0302 	eor.w	r3, r3, #2
   221d0:	f888 3008 	strb.w	r3, [r8, #8]
   221d4:	e754      	b.n	22080 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   221d6:	f898 3008 	ldrb.w	r3, [r8, #8]
   221da:	f083 0302 	eor.w	r3, r3, #2
   221de:	f888 3008 	strb.w	r3, [r8, #8]
   221e2:	e7ec      	b.n	221be <uncompress_IPHC_header+0x4a6>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   221e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   221e6:	f108 0008 	add.w	r0, r8, #8
   221ea:	f7de f869 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   221ee:	f898 3008 	ldrb.w	r3, [r8, #8]
   221f2:	f083 0302 	eor.w	r3, r3, #2
   221f6:	f888 3008 	strb.w	r3, [r8, #8]
   221fa:	e741      	b.n	22080 <uncompress_IPHC_header+0x368>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   221fc:	2202      	movs	r2, #2
   221fe:	4401      	add	r1, r0
   22200:	4648      	mov	r0, r9
   22202:	f7de f85d 	bl	2c0 <memcpy>
		offset += 2;
   22206:	1ce9      	adds	r1, r5, #3
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   22208:	68a3      	ldr	r3, [r4, #8]
   2220a:	689b      	ldr	r3, [r3, #8]
   2220c:	2202      	movs	r2, #2
   2220e:	fa53 f181 	uxtab	r1, r3, r1
   22212:	eb09 0002 	add.w	r0, r9, r2
   22216:	f7de f853 	bl	2c0 <memcpy>
		offset += 2;
   2221a:	3505      	adds	r5, #5
   2221c:	b2ed      	uxtb	r5, r5
	if (!chksum) {
   2221e:	f1b8 0f00 	cmp.w	r8, #0
   22222:	d043      	beq.n	222ac <uncompress_IPHC_header+0x594>
	net_buf_add(frag, NET_UDPH_LEN);
   22224:	2108      	movs	r1, #8
   22226:	4650      	mov	r0, sl
   22228:	f7f8 fdc4 	bl	1adb4 <net_buf_simple_add>
   2222c:	e04c      	b.n	222c8 <uncompress_IPHC_header+0x5b0>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   2222e:	2202      	movs	r2, #2
   22230:	4401      	add	r1, r0
   22232:	4648      	mov	r0, r9
   22234:	f7de f844 	bl	2c0 <memcpy>
		offset += 2;
   22238:	1ceb      	adds	r3, r5, #3
   2223a:	b2db      	uxtb	r3, r3
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   2223c:	68a2      	ldr	r2, [r4, #8]
   2223e:	6892      	ldr	r2, [r2, #8]
   22240:	5cd3      	ldrb	r3, [r2, r3]
   22242:	021b      	lsls	r3, r3, #8
   22244:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   22248:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   2224c:	3504      	adds	r5, #4
   2224e:	b2ed      	uxtb	r5, r5
   22250:	e7e5      	b.n	2221e <uncompress_IPHC_header+0x506>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   22252:	5c43      	ldrb	r3, [r0, r1]
   22254:	021b      	lsls	r3, r3, #8
   22256:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   2225a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		offset++;
   2225e:	1ca9      	adds	r1, r5, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   22260:	68a3      	ldr	r3, [r4, #8]
   22262:	689b      	ldr	r3, [r3, #8]
   22264:	2202      	movs	r2, #2
   22266:	fa53 f181 	uxtab	r1, r3, r1
   2226a:	eb09 0002 	add.w	r0, r9, r2
   2226e:	f7de f827 	bl	2c0 <memcpy>
		offset += 2;
   22272:	3504      	adds	r5, #4
   22274:	b2ed      	uxtb	r5, r5
   22276:	e7d2      	b.n	2221e <uncompress_IPHC_header+0x506>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   22278:	5c43      	ldrb	r3, [r0, r1]
   2227a:	091b      	lsrs	r3, r3, #4
   2227c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
   22280:	021b      	lsls	r3, r3, #8
   22282:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   22286:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   2228a:	68a3      	ldr	r3, [r4, #8]
   2228c:	689b      	ldr	r3, [r3, #8]
   2228e:	5c5b      	ldrb	r3, [r3, r1]
   22290:	021b      	lsls	r3, r3, #8
   22292:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   22296:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
   2229a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   2229e:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   222a2:	3502      	adds	r5, #2
   222a4:	b2ed      	uxtb	r5, r5
   222a6:	e7ba      	b.n	2221e <uncompress_IPHC_header+0x506>
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   222a8:	460d      	mov	r5, r1
   222aa:	e7b8      	b.n	2221e <uncompress_IPHC_header+0x506>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   222ac:	68a3      	ldr	r3, [r4, #8]
   222ae:	6899      	ldr	r1, [r3, #8]
   222b0:	2202      	movs	r2, #2
   222b2:	4429      	add	r1, r5
   222b4:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   222b8:	f7de f802 	bl	2c0 <memcpy>
		offset += 2;
   222bc:	3502      	adds	r5, #2
   222be:	b2ed      	uxtb	r5, r5
   222c0:	e7b0      	b.n	22224 <uncompress_IPHC_header+0x50c>
	u8_t chksum = 0;
   222c2:	f04f 0800 	mov.w	r8, #0
	struct net_udp_hdr *udp = NULL;
   222c6:	46c1      	mov	r9, r8
	if (pkt->frags->len < offset) {
   222c8:	68a3      	ldr	r3, [r4, #8]
   222ca:	899a      	ldrh	r2, [r3, #12]
   222cc:	fa1f fa85 	uxth.w	sl, r5
   222d0:	4552      	cmp	r2, sl
   222d2:	f4ff adbe 	bcc.w	21e52 <uncompress_IPHC_header+0x13a>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   222d6:	6898      	ldr	r0, [r3, #8]
   222d8:	1b52      	subs	r2, r2, r5
   222da:	1941      	adds	r1, r0, r5
   222dc:	f008 fab8 	bl	2a850 <memmove>
	pkt->frags->len -= offset;
   222e0:	68a2      	ldr	r2, [r4, #8]
   222e2:	8993      	ldrh	r3, [r2, #12]
   222e4:	eba3 0a0a 	sub.w	sl, r3, sl
   222e8:	f8a2 a00c 	strh.w	sl, [r2, #12]
	return pkt->ll_reserve;
   222ec:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	if (net_pkt_ll_reserve(pkt)) {
   222f0:	b94a      	cbnz	r2, 22306 <uncompress_IPHC_header+0x5ee>
	net_pkt_frag_insert(pkt, frag);
   222f2:	4639      	mov	r1, r7
   222f4:	4620      	mov	r0, r4
   222f6:	f7fb fab7 	bl	1d868 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   222fa:	4620      	mov	r0, r4
   222fc:	f7fb fb6e 	bl	1d9dc <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   22300:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   22302:	2200      	movs	r2, #0
   22304:	e00b      	b.n	2231e <uncompress_IPHC_header+0x606>
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   22306:	68bb      	ldr	r3, [r7, #8]
   22308:	4250      	negs	r0, r2
	return pkt->frags->data;
   2230a:	68a1      	ldr	r1, [r4, #8]
   2230c:	6889      	ldr	r1, [r1, #8]
   2230e:	4401      	add	r1, r0
   22310:	4418      	add	r0, r3
   22312:	f7dd ffd5 	bl	2c0 <memcpy>
   22316:	e7ec      	b.n	222f2 <uncompress_IPHC_header+0x5da>
		bytes += buf->len;
   22318:	8999      	ldrh	r1, [r3, #12]
   2231a:	440a      	add	r2, r1
		buf = buf->frags;
   2231c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2231e:	2b00      	cmp	r3, #0
   22320:	d1fa      	bne.n	22318 <uncompress_IPHC_header+0x600>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   22322:	b293      	uxth	r3, r2
   22324:	3b28      	subs	r3, #40	; 0x28
   22326:	b29b      	uxth	r3, r3
	ipv6->len[0] = len >> 8;
   22328:	0a1a      	lsrs	r2, r3, #8
   2232a:	7132      	strb	r2, [r6, #4]
	ipv6->len[1] = (u8_t)len;
   2232c:	7173      	strb	r3, [r6, #5]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   2232e:	79b1      	ldrb	r1, [r6, #6]
   22330:	2911      	cmp	r1, #17
   22332:	d002      	beq.n	2233a <uncompress_IPHC_header+0x622>
	return true;
   22334:	2001      	movs	r0, #1
   22336:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   2233a:	f1b9 0f00 	cmp.w	r9, #0
   2233e:	d018      	beq.n	22372 <uncompress_IPHC_header+0x65a>
		udp->len = htons(len);
   22340:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   22344:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   22348:	f1b8 0f00 	cmp.w	r8, #0
   2234c:	d102      	bne.n	22354 <uncompress_IPHC_header+0x63c>
	return true;
   2234e:	2001      	movs	r0, #1
}
   22350:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_calc_chksum(pkt, IPPROTO_UDP);
   22354:	4620      	mov	r0, r4
   22356:	f7fc f8ba 	bl	1e4ce <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   2235a:	43c0      	mvns	r0, r0
   2235c:	f8a9 0006 	strh.w	r0, [r9, #6]
	return true;
   22360:	2001      	movs	r0, #1
   22362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   22366:	2000      	movs	r0, #0
   22368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   2236c:	2000      	movs	r0, #0
   2236e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return true;
   22372:	2001      	movs	r0, #1
   22374:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022378 <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   22378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2237c:	b085      	sub	sp, #20
   2237e:	4604      	mov	r4, r0
   22380:	4617      	mov	r7, r2
	if (iphc) {
   22382:	460d      	mov	r5, r1
   22384:	b9f9      	cbnz	r1, 223c6 <net_6lo_compress+0x4e>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   22386:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2238a:	f7fb f9e3 	bl	1d754 <net_pkt_get_frag>
	if (!frag) {
   2238e:	4606      	mov	r6, r0
   22390:	2800      	cmp	r0, #0
   22392:	f000 8438 	beq.w	22c06 <net_6lo_compress+0x88e>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   22396:	f850 3f08 	ldr.w	r3, [r0, #8]!
   2239a:	2241      	movs	r2, #65	; 0x41
   2239c:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   2239e:	2101      	movs	r1, #1
   223a0:	f7f8 fd08 	bl	1adb4 <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   223a4:	4631      	mov	r1, r6
   223a6:	4620      	mov	r0, r4
   223a8:	f7fb fa5e 	bl	1d868 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   223ac:	4620      	mov	r0, r4
   223ae:	f7fb fb15 	bl	1d9dc <net_pkt_compact>
	if (fragment) {
   223b2:	2f00      	cmp	r7, #0
   223b4:	f000 842a 	beq.w	22c0c <net_6lo_compress+0x894>
		return fragment(pkt, -1);
   223b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   223bc:	4620      	mov	r0, r4
   223be:	47b8      	blx	r7
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   223c0:	b005      	add	sp, #20
   223c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223c6:	6883      	ldr	r3, [r0, #8]
   223c8:	689e      	ldr	r6, [r3, #8]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   223ca:	899b      	ldrh	r3, [r3, #12]
   223cc:	2b27      	cmp	r3, #39	; 0x27
   223ce:	f240 8411 	bls.w	22bf4 <net_6lo_compress+0x87c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   223d2:	79b2      	ldrb	r2, [r6, #6]
   223d4:	2a11      	cmp	r2, #17
   223d6:	d02f      	beq.n	22438 <net_6lo_compress+0xc0>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   223d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   223dc:	4620      	mov	r0, r4
   223de:	f7fb f9b9 	bl	1d754 <net_pkt_get_frag>
	if (!frag) {
   223e2:	4680      	mov	r8, r0
   223e4:	2800      	cmp	r0, #0
   223e6:	f000 8408 	beq.w	22bfa <net_6lo_compress+0x882>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   223ea:	6883      	ldr	r3, [r0, #8]
   223ec:	2260      	movs	r2, #96	; 0x60
   223ee:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   223f0:	6883      	ldr	r3, [r0, #8]
   223f2:	2200      	movs	r2, #0
   223f4:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   223f6:	7830      	ldrb	r0, [r6, #0]
   223f8:	7871      	ldrb	r1, [r6, #1]
   223fa:	090b      	lsrs	r3, r1, #4
   223fc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   22400:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   22402:	089a      	lsrs	r2, r3, #2
   22404:	ea42 1383 	orr.w	r3, r2, r3, lsl #6
   22408:	b25b      	sxtb	r3, r3
   2240a:	b2da      	uxtb	r2, r3
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   2240c:	f011 0f0f 	tst.w	r1, #15
   22410:	d121      	bne.n	22456 <net_6lo_compress+0xde>
   22412:	f8b6 e002 	ldrh.w	lr, [r6, #2]
   22416:	f1be 0f00 	cmp.w	lr, #0
   2241a:	d11c      	bne.n	22456 <net_6lo_compress+0xde>
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   2241c:	f010 0f0f 	tst.w	r0, #15
   22420:	d10e      	bne.n	22440 <net_6lo_compress+0xc8>
   22422:	f011 0ff0 	tst.w	r1, #240	; 0xf0
   22426:	d10b      	bne.n	22440 <net_6lo_compress+0xc8>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   22428:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2242c:	7813      	ldrb	r3, [r2, #0]
   2242e:	f043 0318 	orr.w	r3, r3, #24
   22432:	7013      	strb	r3, [r2, #0]
   22434:	2202      	movs	r2, #2
   22436:	e025      	b.n	22484 <net_6lo_compress+0x10c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   22438:	2b2f      	cmp	r3, #47	; 0x2f
   2243a:	d8cd      	bhi.n	223d8 <net_6lo_compress+0x60>
		return false;
   2243c:	2000      	movs	r0, #0
   2243e:	e7bf      	b.n	223c0 <net_6lo_compress+0x48>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   22440:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22444:	780b      	ldrb	r3, [r1, #0]
   22446:	f043 0310 	orr.w	r3, r3, #16
   2244a:	700b      	strb	r3, [r1, #0]
			IPHC[offset++] = tcl;
   2244c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22450:	709a      	strb	r2, [r3, #2]
   22452:	2203      	movs	r2, #3
   22454:	e016      	b.n	22484 <net_6lo_compress+0x10c>
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   22456:	f010 0f0f 	tst.w	r0, #15
   2245a:	d102      	bne.n	22462 <net_6lo_compress+0xea>
   2245c:	f011 0f30 	tst.w	r1, #48	; 0x30
   22460:	d128      	bne.n	224b4 <net_6lo_compress+0x13c>
			IPHC[0] |= NET_6LO_IPHC_TF_00;
   22462:	f8d8 3008 	ldr.w	r3, [r8, #8]
			IPHC[offset++] = tcl;
   22466:	709a      	strb	r2, [r3, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   22468:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2246c:	7873      	ldrb	r3, [r6, #1]
   2246e:	f003 030f 	and.w	r3, r3, #15
   22472:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   22474:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22478:	2202      	movs	r2, #2
   2247a:	18b1      	adds	r1, r6, r2
   2247c:	3004      	adds	r0, #4
   2247e:	f7dd ff1f 	bl	2c0 <memcpy>
			offset += 2;
   22482:	2206      	movs	r2, #6
	if (ipv6->nexthdr == IPPROTO_UDP) {
   22484:	79b3      	ldrb	r3, [r6, #6]
   22486:	2b11      	cmp	r3, #17
   22488:	d02d      	beq.n	224e6 <net_6lo_compress+0x16e>
		IPHC[offset++] = ipv6->nexthdr;
   2248a:	f8d8 1008 	ldr.w	r1, [r8, #8]
   2248e:	f102 0901 	add.w	r9, r2, #1
   22492:	548b      	strb	r3, [r1, r2]
	switch (ipv6->hop_limit) {
   22494:	79f3      	ldrb	r3, [r6, #7]
   22496:	2b40      	cmp	r3, #64	; 0x40
   22498:	d040      	beq.n	2251c <net_6lo_compress+0x1a4>
   2249a:	2bff      	cmp	r3, #255	; 0xff
   2249c:	d045      	beq.n	2252a <net_6lo_compress+0x1b2>
   2249e:	2b01      	cmp	r3, #1
   224a0:	d029      	beq.n	224f6 <net_6lo_compress+0x17e>
		IPHC[offset++] = ipv6->hop_limit;
   224a2:	f8d8 1008 	ldr.w	r1, [r8, #8]
   224a6:	f109 0201 	add.w	r2, r9, #1
   224aa:	f801 3009 	strb.w	r3, [r1, r9]
   224ae:	fa5f f982 	uxtb.w	r9, r2
   224b2:	e026      	b.n	22502 <net_6lo_compress+0x18a>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   224b4:	f8d8 1008 	ldr.w	r1, [r8, #8]
   224b8:	780a      	ldrb	r2, [r1, #0]
   224ba:	f042 0208 	orr.w	r2, r2, #8
   224be:	700a      	strb	r2, [r1, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   224c0:	f8d8 2008 	ldr.w	r2, [r8, #8]
   224c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   224c8:	f996 1001 	ldrsb.w	r1, [r6, #1]
   224cc:	f001 010f 	and.w	r1, r1, #15
   224d0:	430b      	orrs	r3, r1
   224d2:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   224d4:	f8d8 0008 	ldr.w	r0, [r8, #8]
   224d8:	2202      	movs	r2, #2
   224da:	18b1      	adds	r1, r6, r2
   224dc:	3003      	adds	r0, #3
   224de:	f7dd feef 	bl	2c0 <memcpy>
			offset += 2;
   224e2:	2205      	movs	r2, #5
   224e4:	e7ce      	b.n	22484 <net_6lo_compress+0x10c>
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   224e6:	f8d8 1008 	ldr.w	r1, [r8, #8]
   224ea:	780b      	ldrb	r3, [r1, #0]
   224ec:	f043 0304 	orr.w	r3, r3, #4
   224f0:	700b      	strb	r3, [r1, #0]
   224f2:	4691      	mov	r9, r2
   224f4:	e7ce      	b.n	22494 <net_6lo_compress+0x11c>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   224f6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   224fa:	7813      	ldrb	r3, [r2, #0]
   224fc:	f043 0301 	orr.w	r3, r3, #1
   22500:	7013      	strb	r3, [r2, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22502:	68b3      	ldr	r3, [r6, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22504:	b9c3      	cbnz	r3, 22538 <net_6lo_compress+0x1c0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22506:	68f3      	ldr	r3, [r6, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22508:	2b00      	cmp	r3, #0
   2250a:	d176      	bne.n	225fa <net_6lo_compress+0x282>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2250c:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2250e:	2b00      	cmp	r3, #0
   22510:	d175      	bne.n	225fe <net_6lo_compress+0x286>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   22512:	6973      	ldr	r3, [r6, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22514:	2b00      	cmp	r3, #0
   22516:	d074      	beq.n	22602 <net_6lo_compress+0x28a>
   22518:	2300      	movs	r3, #0
   2251a:	e00e      	b.n	2253a <net_6lo_compress+0x1c2>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   2251c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22520:	7813      	ldrb	r3, [r2, #0]
   22522:	f043 0302 	orr.w	r3, r3, #2
   22526:	7013      	strb	r3, [r2, #0]
   22528:	e7eb      	b.n	22502 <net_6lo_compress+0x18a>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   2252a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2252e:	7813      	ldrb	r3, [r2, #0]
   22530:	f043 0303 	orr.w	r3, r3, #3
   22534:	7013      	strb	r3, [r2, #0]
   22536:	e7e4      	b.n	22502 <net_6lo_compress+0x18a>
   22538:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   2253a:	2b00      	cmp	r3, #0
   2253c:	d163      	bne.n	22606 <net_6lo_compress+0x28e>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   2253e:	8932      	ldrh	r2, [r6, #8]
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   22540:	f248 03fe 	movw	r3, #33022	; 0x80fe
   22544:	429a      	cmp	r2, r3
   22546:	d065      	beq.n	22614 <net_6lo_compress+0x29c>
		IPHC[1] |= NET_6LO_IPHC_SAM_00;
   22548:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   2254c:	2210      	movs	r2, #16
   2254e:	f106 0108 	add.w	r1, r6, #8
   22552:	4448      	add	r0, r9
   22554:	f7dd feb4 	bl	2c0 <memcpy>
		offset += sizeof(struct in6_addr);
   22558:	f109 0910 	add.w	r9, r9, #16
   2255c:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   22560:	f1b9 0f00 	cmp.w	r9, #0
   22564:	f000 812d 	beq.w	227c2 <net_6lo_compress+0x44a>
	return addr->s6_addr[0] == 0xFF;
   22568:	7e33      	ldrb	r3, [r6, #24]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   2256a:	2bff      	cmp	r3, #255	; 0xff
   2256c:	f000 812e 	beq.w	227cc <net_6lo_compress+0x454>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   22570:	8b32      	ldrh	r2, [r6, #24]
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   22572:	f248 03fe 	movw	r3, #33022	; 0x80fe
   22576:	429a      	cmp	r2, r3
   22578:	f000 81bf 	beq.w	228fa <net_6lo_compress+0x582>
		IPHC[1] |= NET_6LO_IPHC_DAM_00;
   2257c:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   22580:	2210      	movs	r2, #16
   22582:	f106 0118 	add.w	r1, r6, #24
   22586:	4448      	add	r0, r9
   22588:	f7dd fe9a 	bl	2c0 <memcpy>
		offset += 16;
   2258c:	f109 0910 	add.w	r9, r9, #16
   22590:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   22594:	f1b9 0f00 	cmp.w	r9, #0
   22598:	f000 8287 	beq.w	22aaa <net_6lo_compress+0x732>
	if (ipv6->nexthdr != IPPROTO_UDP) {
   2259c:	79b3      	ldrb	r3, [r6, #6]
   2259e:	2b11      	cmp	r3, #17
   225a0:	f000 8288 	beq.w	22ab4 <net_6lo_compress+0x73c>
	compressed = NET_IPV6H_LEN;
   225a4:	2628      	movs	r6, #40	; 0x28
	net_buf_add(frag, offset);
   225a6:	f108 0a08 	add.w	sl, r8, #8
   225aa:	4649      	mov	r1, r9
   225ac:	4650      	mov	r0, sl
   225ae:	f7f8 fc01 	bl	1adb4 <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   225b2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   225b6:	68a3      	ldr	r3, [r4, #8]
   225b8:	6899      	ldr	r1, [r3, #8]
	       pkt->frags->len - compressed);
   225ba:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   225bc:	1b92      	subs	r2, r2, r6
   225be:	4431      	add	r1, r6
   225c0:	4448      	add	r0, r9
   225c2:	f7dd fe7d 	bl	2c0 <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   225c6:	68a3      	ldr	r3, [r4, #8]
   225c8:	8999      	ldrh	r1, [r3, #12]
   225ca:	1b89      	subs	r1, r1, r6
   225cc:	4650      	mov	r0, sl
   225ce:	f7f8 fbf1 	bl	1adb4 <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   225d2:	68a2      	ldr	r2, [r4, #8]
   225d4:	2100      	movs	r1, #0
   225d6:	4620      	mov	r0, r4
   225d8:	f7fb f928 	bl	1d82c <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   225dc:	4641      	mov	r1, r8
   225de:	4620      	mov	r0, r4
   225e0:	f7fb f942 	bl	1d868 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   225e4:	4620      	mov	r0, r4
   225e6:	f7fb f9f9 	bl	1d9dc <net_pkt_compact>
	if (fragment) {
   225ea:	2f00      	cmp	r7, #0
   225ec:	f000 8308 	beq.w	22c00 <net_6lo_compress+0x888>
		return fragment(pkt, compressed - offset);
   225f0:	eba6 0109 	sub.w	r1, r6, r9
   225f4:	4620      	mov	r0, r4
   225f6:	47b8      	blx	r7
   225f8:	e6e2      	b.n	223c0 <net_6lo_compress+0x48>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   225fa:	2300      	movs	r3, #0
   225fc:	e79d      	b.n	2253a <net_6lo_compress+0x1c2>
   225fe:	2300      	movs	r3, #0
   22600:	e79b      	b.n	2253a <net_6lo_compress+0x1c2>
   22602:	2301      	movs	r3, #1
   22604:	e799      	b.n	2253a <net_6lo_compress+0x1c2>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   22606:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2260a:	7853      	ldrb	r3, [r2, #1]
   2260c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22610:	7053      	strb	r3, [r2, #1]
   22612:	e7a5      	b.n	22560 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22614:	8973      	ldrh	r3, [r6, #10]
   22616:	b91b      	cbnz	r3, 22620 <net_6lo_compress+0x2a8>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   22618:	68f3      	ldr	r3, [r6, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2261a:	b33b      	cbz	r3, 2266c <net_6lo_compress+0x2f4>
   2261c:	2300      	movs	r3, #0
   2261e:	e000      	b.n	22622 <net_6lo_compress+0x2aa>
   22620:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   22622:	9301      	str	r3, [sp, #4]
   22624:	2b00      	cmp	r3, #0
   22626:	d08f      	beq.n	22548 <net_6lo_compress+0x1d0>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   22628:	6933      	ldr	r3, [r6, #16]
   2262a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   2262e:	d01f      	beq.n	22670 <net_6lo_compress+0x2f8>
   22630:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->src)) {
   22632:	469a      	mov	sl, r3
   22634:	bb1b      	cbnz	r3, 2267e <net_6lo_compress+0x306>
			if (!net_pkt_ll_src(pkt)) {
   22636:	f114 0320 	adds.w	r3, r4, #32
   2263a:	f000 80bf 	beq.w	227bc <net_6lo_compress+0x444>
	if (!addr || !lladdr) {
   2263e:	f116 0b08 	adds.w	fp, r6, #8
   22642:	d008      	beq.n	22656 <net_6lo_compress+0x2de>
   22644:	b13b      	cbz	r3, 22656 <net_6lo_compress+0x2de>
	switch (lladdr->len) {
   22646:	791a      	ldrb	r2, [r3, #4]
   22648:	2a06      	cmp	r2, #6
   2264a:	d03e      	beq.n	226ca <net_6lo_compress+0x352>
   2264c:	2a08      	cmp	r2, #8
   2264e:	f000 808c 	beq.w	2276a <net_6lo_compress+0x3f2>
   22652:	2a02      	cmp	r2, #2
   22654:	d026      	beq.n	226a4 <net_6lo_compress+0x32c>
			if (net_ipv6_addr_based_on_ll(&ipv6->src,
   22656:	f1ba 0f00 	cmp.w	sl, #0
   2265a:	f000 809c 	beq.w	22796 <net_6lo_compress+0x41e>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   2265e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22662:	7853      	ldrb	r3, [r2, #1]
   22664:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   22668:	7053      	strb	r3, [r2, #1]
   2266a:	e779      	b.n	22560 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2266c:	2301      	movs	r3, #1
   2266e:	e7d8      	b.n	22622 <net_6lo_compress+0x2aa>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   22670:	8ab3      	ldrh	r3, [r6, #20]
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   22672:	2bfe      	cmp	r3, #254	; 0xfe
   22674:	d001      	beq.n	2267a <net_6lo_compress+0x302>
   22676:	2300      	movs	r3, #0
   22678:	e7db      	b.n	22632 <net_6lo_compress+0x2ba>
   2267a:	2301      	movs	r3, #1
   2267c:	e7d9      	b.n	22632 <net_6lo_compress+0x2ba>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   2267e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22682:	7853      	ldrb	r3, [r2, #1]
   22684:	f043 0320 	orr.w	r3, r3, #32
   22688:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   2268a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2268e:	2202      	movs	r2, #2
   22690:	f106 0116 	add.w	r1, r6, #22
   22694:	4448      	add	r0, r9
   22696:	f7dd fe13 	bl	2c0 <memcpy>
			offset += 2;
   2269a:	f109 0902 	add.w	r9, r9, #2
   2269e:	fa5f f989 	uxtb.w	r9, r9
   226a2:	e75d      	b.n	22560 <net_6lo_compress+0x1e8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   226a4:	6a21      	ldr	r1, [r4, #32]
   226a6:	f10b 000e 	add.w	r0, fp, #14
   226aa:	f008 f8a1 	bl	2a7f0 <memcmp>
   226ae:	2800      	cmp	r0, #0
   226b0:	d1d1      	bne.n	22656 <net_6lo_compress+0x2de>
		    addr->s6_addr[10] == 0 &&
   226b2:	f8db 3008 	ldr.w	r3, [fp, #8]
   226b6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   226ba:	d1cc      	bne.n	22656 <net_6lo_compress+0x2de>
		    addr->s6_addr[12] == 0xfe) {
   226bc:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   226c0:	2bfe      	cmp	r3, #254	; 0xfe
   226c2:	d1c8      	bne.n	22656 <net_6lo_compress+0x2de>
			return true;
   226c4:	f8dd a004 	ldr.w	sl, [sp, #4]
   226c8:	e7c5      	b.n	22656 <net_6lo_compress+0x2de>
		if (lladdr->type == NET_LINK_ETHERNET) {
   226ca:	795b      	ldrb	r3, [r3, #5]
   226cc:	2b03      	cmp	r3, #3
   226ce:	d026      	beq.n	2271e <net_6lo_compress+0x3a6>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   226d0:	2b02      	cmp	r3, #2
   226d2:	d1c0      	bne.n	22656 <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   226d4:	6a21      	ldr	r1, [r4, #32]
   226d6:	2202      	movs	r2, #2
   226d8:	3101      	adds	r1, #1
   226da:	f10b 0009 	add.w	r0, fp, #9
   226de:	f008 f887 	bl	2a7f0 <memcmp>
   226e2:	2800      	cmp	r0, #0
   226e4:	d1b7      	bne.n	22656 <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   226e6:	6a21      	ldr	r1, [r4, #32]
   226e8:	2203      	movs	r2, #3
   226ea:	4411      	add	r1, r2
   226ec:	f10b 000d 	add.w	r0, fp, #13
   226f0:	f008 f87e 	bl	2a7f0 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   226f4:	2800      	cmp	r0, #0
   226f6:	d1ae      	bne.n	22656 <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   226f8:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   226fc:	2bff      	cmp	r3, #255	; 0xff
   226fe:	d1aa      	bne.n	22656 <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe
   22700:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   22704:	2bfe      	cmp	r3, #254	; 0xfe
   22706:	d1a6      	bne.n	22656 <net_6lo_compress+0x2de>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   22708:	f89b 3008 	ldrb.w	r3, [fp, #8]
   2270c:	f083 0302 	eor.w	r3, r3, #2
   22710:	6a22      	ldr	r2, [r4, #32]
   22712:	7812      	ldrb	r2, [r2, #0]
   22714:	4293      	cmp	r3, r2
   22716:	d19e      	bne.n	22656 <net_6lo_compress+0x2de>
				return true;
   22718:	f8dd a004 	ldr.w	sl, [sp, #4]
   2271c:	e79b      	b.n	22656 <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   2271e:	6a21      	ldr	r1, [r4, #32]
   22720:	2202      	movs	r2, #2
   22722:	3101      	adds	r1, #1
   22724:	f10b 0009 	add.w	r0, fp, #9
   22728:	f008 f862 	bl	2a7f0 <memcmp>
   2272c:	2800      	cmp	r0, #0
   2272e:	d192      	bne.n	22656 <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22730:	6a21      	ldr	r1, [r4, #32]
   22732:	2203      	movs	r2, #3
   22734:	4411      	add	r1, r2
   22736:	f10b 000d 	add.w	r0, fp, #13
   2273a:	f008 f859 	bl	2a7f0 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   2273e:	2800      	cmp	r0, #0
   22740:	d189      	bne.n	22656 <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   22742:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22746:	2bff      	cmp	r3, #255	; 0xff
   22748:	d185      	bne.n	22656 <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe &&
   2274a:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   2274e:	2bfe      	cmp	r3, #254	; 0xfe
   22750:	d181      	bne.n	22656 <net_6lo_compress+0x2de>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   22752:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22756:	f083 0302 	eor.w	r3, r3, #2
   2275a:	6a22      	ldr	r2, [r4, #32]
   2275c:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   2275e:	4293      	cmp	r3, r2
   22760:	f47f af79 	bne.w	22656 <net_6lo_compress+0x2de>
				return true;
   22764:	f8dd a004 	ldr.w	sl, [sp, #4]
   22768:	e775      	b.n	22656 <net_6lo_compress+0x2de>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   2276a:	6a21      	ldr	r1, [r4, #32]
   2276c:	3a01      	subs	r2, #1
   2276e:	3101      	adds	r1, #1
   22770:	f10b 0009 	add.w	r0, fp, #9
   22774:	f008 f83c 	bl	2a7f0 <memcmp>
   22778:	2800      	cmp	r0, #0
   2277a:	f47f af6c 	bne.w	22656 <net_6lo_compress+0x2de>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   2277e:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22782:	f083 0302 	eor.w	r3, r3, #2
   22786:	6a22      	ldr	r2, [r4, #32]
   22788:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   2278a:	4293      	cmp	r3, r2
   2278c:	f47f af63 	bne.w	22656 <net_6lo_compress+0x2de>
			return true;
   22790:	f8dd a004 	ldr.w	sl, [sp, #4]
   22794:	e75f      	b.n	22656 <net_6lo_compress+0x2de>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   22796:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2279a:	7853      	ldrb	r3, [r2, #1]
   2279c:	f043 0310 	orr.w	r3, r3, #16
   227a0:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   227a2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   227a6:	2208      	movs	r2, #8
   227a8:	f106 0110 	add.w	r1, r6, #16
   227ac:	4448      	add	r0, r9
   227ae:	f7dd fd87 	bl	2c0 <memcpy>
				offset += 8;
   227b2:	f109 0908 	add.w	r9, r9, #8
   227b6:	fa5f f989 	uxtb.w	r9, r9
   227ba:	e6d1      	b.n	22560 <net_6lo_compress+0x1e8>
				return 0;
   227bc:	f04f 0900 	mov.w	r9, #0
   227c0:	e6ce      	b.n	22560 <net_6lo_compress+0x1e8>
		net_pkt_frag_unref(frag);
   227c2:	4640      	mov	r0, r8
   227c4:	f7fb f813 	bl	1d7ee <net_pkt_frag_unref>
		return false;
   227c8:	2000      	movs	r0, #0
   227ca:	e5f9      	b.n	223c0 <net_6lo_compress+0x48>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   227cc:	f8d8 2008 	ldr.w	r2, [r8, #8]
   227d0:	7853      	ldrb	r3, [r2, #1]
   227d2:	f043 0308 	orr.w	r3, r3, #8
   227d6:	7053      	strb	r3, [r2, #1]
	return ((addr->s6_addr[1] == 0x02) &&
   227d8:	7e73      	ldrb	r3, [r6, #25]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   227da:	2b02      	cmp	r3, #2
   227dc:	d00a      	beq.n	227f4 <net_6lo_compress+0x47c>
   227de:	2300      	movs	r3, #0
	if (net_6lo_maddr_8_bit_compressible(&ipv6->dst)) {
   227e0:	b9db      	cbnz	r3, 2281a <net_6lo_compress+0x4a2>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   227e2:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   227e4:	bb63      	cbnz	r3, 22840 <net_6lo_compress+0x4c8>
   227e6:	6a32      	ldr	r2, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   227e8:	bba2      	cbnz	r2, 22854 <net_6lo_compress+0x4dc>
		 (addr->s6_addr[12] == 0x00));
   227ea:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   227ee:	b39a      	cbz	r2, 22858 <net_6lo_compress+0x4e0>
   227f0:	2200      	movs	r2, #0
   227f2:	e026      	b.n	22842 <net_6lo_compress+0x4ca>
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   227f4:	8b73      	ldrh	r3, [r6, #26]
	return ((addr->s6_addr[1] == 0x02) &&
   227f6:	b943      	cbnz	r3, 2280a <net_6lo_compress+0x492>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   227f8:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   227fa:	b943      	cbnz	r3, 2280e <net_6lo_compress+0x496>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   227fc:	6a33      	ldr	r3, [r6, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   227fe:	b943      	cbnz	r3, 22812 <net_6lo_compress+0x49a>
		 (addr->s6_addr[14] == 0x00));
   22800:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22804:	b13b      	cbz	r3, 22816 <net_6lo_compress+0x49e>
   22806:	2300      	movs	r3, #0
   22808:	e7ea      	b.n	227e0 <net_6lo_compress+0x468>
   2280a:	2300      	movs	r3, #0
   2280c:	e7e8      	b.n	227e0 <net_6lo_compress+0x468>
   2280e:	2300      	movs	r3, #0
   22810:	e7e6      	b.n	227e0 <net_6lo_compress+0x468>
   22812:	2300      	movs	r3, #0
   22814:	e7e4      	b.n	227e0 <net_6lo_compress+0x468>
   22816:	2301      	movs	r3, #1
   22818:	e7e2      	b.n	227e0 <net_6lo_compress+0x468>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   2281a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2281e:	7853      	ldrb	r3, [r2, #1]
   22820:	f043 0303 	orr.w	r3, r3, #3
   22824:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   22826:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2282a:	2201      	movs	r2, #1
   2282c:	f106 0127 	add.w	r1, r6, #39	; 0x27
   22830:	4448      	add	r0, r9
   22832:	f7dd fd45 	bl	2c0 <memcpy>
		offset++;
   22836:	f109 0901 	add.w	r9, r9, #1
   2283a:	fa5f f989 	uxtb.w	r9, r9
   2283e:	e6a9      	b.n	22594 <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22840:	2200      	movs	r2, #0
	} else if (net_6lo_maddr_32_bit_compressible(&ipv6->dst)) {
   22842:	b95a      	cbnz	r2, 2285c <net_6lo_compress+0x4e4>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   22844:	bb43      	cbnz	r3, 22898 <net_6lo_compress+0x520>
   22846:	8c33      	ldrh	r3, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22848:	bbab      	cbnz	r3, 228b6 <net_6lo_compress+0x53e>
		 (addr->s6_addr[10] == 0x00));
   2284a:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   2284e:	b3a3      	cbz	r3, 228ba <net_6lo_compress+0x542>
   22850:	2300      	movs	r3, #0
   22852:	e022      	b.n	2289a <net_6lo_compress+0x522>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22854:	2200      	movs	r2, #0
   22856:	e7f4      	b.n	22842 <net_6lo_compress+0x4ca>
   22858:	2201      	movs	r2, #1
   2285a:	e7f2      	b.n	22842 <net_6lo_compress+0x4ca>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   2285c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22860:	7853      	ldrb	r3, [r2, #1]
   22862:	f043 0302 	orr.w	r3, r3, #2
   22866:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   22868:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2286c:	2201      	movs	r2, #1
   2286e:	f106 0119 	add.w	r1, r6, #25
   22872:	4448      	add	r0, r9
   22874:	f7dd fd24 	bl	2c0 <memcpy>
		offset++;
   22878:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   2287c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22880:	2203      	movs	r2, #3
   22882:	f106 0125 	add.w	r1, r6, #37	; 0x25
   22886:	fa53 f080 	uxtab	r0, r3, r0
   2288a:	f7dd fd19 	bl	2c0 <memcpy>
		offset += 3;
   2288e:	f109 0904 	add.w	r9, r9, #4
   22892:	fa5f f989 	uxtb.w	r9, r9
   22896:	e67d      	b.n	22594 <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   22898:	2300      	movs	r3, #0
	} else if (net_6lo_maddr_48_bit_compressible(&ipv6->dst)) {
   2289a:	b983      	cbnz	r3, 228be <net_6lo_compress+0x546>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   2289c:	f8d8 0008 	ldr.w	r0, [r8, #8]
   228a0:	2210      	movs	r2, #16
   228a2:	f106 0118 	add.w	r1, r6, #24
   228a6:	4448      	add	r0, r9
   228a8:	f7dd fd0a 	bl	2c0 <memcpy>
		offset += 16;
   228ac:	f109 0910 	add.w	r9, r9, #16
   228b0:	fa5f f989 	uxtb.w	r9, r9
   228b4:	e66e      	b.n	22594 <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   228b6:	2300      	movs	r3, #0
   228b8:	e7ef      	b.n	2289a <net_6lo_compress+0x522>
   228ba:	2301      	movs	r3, #1
   228bc:	e7ed      	b.n	2289a <net_6lo_compress+0x522>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   228be:	f8d8 2008 	ldr.w	r2, [r8, #8]
   228c2:	7853      	ldrb	r3, [r2, #1]
   228c4:	f043 0301 	orr.w	r3, r3, #1
   228c8:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   228ca:	f8d8 0008 	ldr.w	r0, [r8, #8]
   228ce:	2201      	movs	r2, #1
   228d0:	f106 0119 	add.w	r1, r6, #25
   228d4:	4448      	add	r0, r9
   228d6:	f7dd fcf3 	bl	2c0 <memcpy>
		offset++;
   228da:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   228de:	f8d8 3008 	ldr.w	r3, [r8, #8]
   228e2:	2205      	movs	r2, #5
   228e4:	f106 0123 	add.w	r1, r6, #35	; 0x23
   228e8:	fa53 f080 	uxtab	r0, r3, r0
   228ec:	f7dd fce8 	bl	2c0 <memcpy>
		offset += 5;
   228f0:	f109 0906 	add.w	r9, r9, #6
   228f4:	fa5f f989 	uxtb.w	r9, r9
   228f8:	e64c      	b.n	22594 <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   228fa:	8b73      	ldrh	r3, [r6, #26]
   228fc:	b91b      	cbnz	r3, 22906 <net_6lo_compress+0x58e>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   228fe:	69f3      	ldr	r3, [r6, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22900:	b343      	cbz	r3, 22954 <net_6lo_compress+0x5dc>
   22902:	2300      	movs	r3, #0
   22904:	e000      	b.n	22908 <net_6lo_compress+0x590>
   22906:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   22908:	9301      	str	r3, [sp, #4]
   2290a:	2b00      	cmp	r3, #0
   2290c:	f43f ae36 	beq.w	2257c <net_6lo_compress+0x204>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   22910:	6a33      	ldr	r3, [r6, #32]
   22912:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   22916:	d01f      	beq.n	22958 <net_6lo_compress+0x5e0>
   22918:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->dst)) {
   2291a:	469a      	mov	sl, r3
   2291c:	bb1b      	cbnz	r3, 22966 <net_6lo_compress+0x5ee>
			if (!net_pkt_ll_dst(pkt)) {
   2291e:	f114 0328 	adds.w	r3, r4, #40	; 0x28
   22922:	f000 80bf 	beq.w	22aa4 <net_6lo_compress+0x72c>
	if (!addr || !lladdr) {
   22926:	f116 0b18 	adds.w	fp, r6, #24
   2292a:	d008      	beq.n	2293e <net_6lo_compress+0x5c6>
   2292c:	b13b      	cbz	r3, 2293e <net_6lo_compress+0x5c6>
	switch (lladdr->len) {
   2292e:	791a      	ldrb	r2, [r3, #4]
   22930:	2a06      	cmp	r2, #6
   22932:	d03e      	beq.n	229b2 <net_6lo_compress+0x63a>
   22934:	2a08      	cmp	r2, #8
   22936:	f000 808c 	beq.w	22a52 <net_6lo_compress+0x6da>
   2293a:	2a02      	cmp	r2, #2
   2293c:	d026      	beq.n	2298c <net_6lo_compress+0x614>
			if (net_ipv6_addr_based_on_ll(&ipv6->dst,
   2293e:	f1ba 0f00 	cmp.w	sl, #0
   22942:	f000 809c 	beq.w	22a7e <net_6lo_compress+0x706>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   22946:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2294a:	7853      	ldrb	r3, [r2, #1]
   2294c:	f043 0303 	orr.w	r3, r3, #3
   22950:	7053      	strb	r3, [r2, #1]
   22952:	e61f      	b.n	22594 <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22954:	2301      	movs	r3, #1
   22956:	e7d7      	b.n	22908 <net_6lo_compress+0x590>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   22958:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   2295a:	2bfe      	cmp	r3, #254	; 0xfe
   2295c:	d001      	beq.n	22962 <net_6lo_compress+0x5ea>
   2295e:	2300      	movs	r3, #0
   22960:	e7db      	b.n	2291a <net_6lo_compress+0x5a2>
   22962:	2301      	movs	r3, #1
   22964:	e7d9      	b.n	2291a <net_6lo_compress+0x5a2>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   22966:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2296a:	7853      	ldrb	r3, [r2, #1]
   2296c:	f043 0302 	orr.w	r3, r3, #2
   22970:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   22972:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22976:	2202      	movs	r2, #2
   22978:	f106 0126 	add.w	r1, r6, #38	; 0x26
   2297c:	4448      	add	r0, r9
   2297e:	f7dd fc9f 	bl	2c0 <memcpy>
			offset += 2;
   22982:	f109 0902 	add.w	r9, r9, #2
   22986:	fa5f f989 	uxtb.w	r9, r9
   2298a:	e603      	b.n	22594 <net_6lo_compress+0x21c>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   2298c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2298e:	f10b 000e 	add.w	r0, fp, #14
   22992:	f007 ff2d 	bl	2a7f0 <memcmp>
   22996:	2800      	cmp	r0, #0
   22998:	d1d1      	bne.n	2293e <net_6lo_compress+0x5c6>
		    addr->s6_addr[10] == 0 &&
   2299a:	f8db 3008 	ldr.w	r3, [fp, #8]
   2299e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   229a2:	d1cc      	bne.n	2293e <net_6lo_compress+0x5c6>
		    addr->s6_addr[12] == 0xfe) {
   229a4:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   229a8:	2bfe      	cmp	r3, #254	; 0xfe
   229aa:	d1c8      	bne.n	2293e <net_6lo_compress+0x5c6>
			return true;
   229ac:	f8dd a004 	ldr.w	sl, [sp, #4]
   229b0:	e7c5      	b.n	2293e <net_6lo_compress+0x5c6>
		if (lladdr->type == NET_LINK_ETHERNET) {
   229b2:	795b      	ldrb	r3, [r3, #5]
   229b4:	2b03      	cmp	r3, #3
   229b6:	d026      	beq.n	22a06 <net_6lo_compress+0x68e>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   229b8:	2b02      	cmp	r3, #2
   229ba:	d1c0      	bne.n	2293e <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   229bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   229be:	2202      	movs	r2, #2
   229c0:	3101      	adds	r1, #1
   229c2:	f10b 0009 	add.w	r0, fp, #9
   229c6:	f007 ff13 	bl	2a7f0 <memcmp>
   229ca:	2800      	cmp	r0, #0
   229cc:	d1b7      	bne.n	2293e <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   229ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   229d0:	2203      	movs	r2, #3
   229d2:	4411      	add	r1, r2
   229d4:	f10b 000d 	add.w	r0, fp, #13
   229d8:	f007 ff0a 	bl	2a7f0 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   229dc:	2800      	cmp	r0, #0
   229de:	d1ae      	bne.n	2293e <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   229e0:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   229e4:	2bff      	cmp	r3, #255	; 0xff
   229e6:	d1aa      	bne.n	2293e <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe
   229e8:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   229ec:	2bfe      	cmp	r3, #254	; 0xfe
   229ee:	d1a6      	bne.n	2293e <net_6lo_compress+0x5c6>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   229f0:	f89b 3008 	ldrb.w	r3, [fp, #8]
   229f4:	f083 0302 	eor.w	r3, r3, #2
   229f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   229fa:	7812      	ldrb	r2, [r2, #0]
   229fc:	4293      	cmp	r3, r2
   229fe:	d19e      	bne.n	2293e <net_6lo_compress+0x5c6>
				return true;
   22a00:	f8dd a004 	ldr.w	sl, [sp, #4]
   22a04:	e79b      	b.n	2293e <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22a06:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22a08:	2202      	movs	r2, #2
   22a0a:	3101      	adds	r1, #1
   22a0c:	f10b 0009 	add.w	r0, fp, #9
   22a10:	f007 feee 	bl	2a7f0 <memcmp>
   22a14:	2800      	cmp	r0, #0
   22a16:	d192      	bne.n	2293e <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22a18:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22a1a:	2203      	movs	r2, #3
   22a1c:	4411      	add	r1, r2
   22a1e:	f10b 000d 	add.w	r0, fp, #13
   22a22:	f007 fee5 	bl	2a7f0 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22a26:	2800      	cmp	r0, #0
   22a28:	d189      	bne.n	2293e <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   22a2a:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22a2e:	2bff      	cmp	r3, #255	; 0xff
   22a30:	d185      	bne.n	2293e <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe &&
   22a32:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   22a36:	2bfe      	cmp	r3, #254	; 0xfe
   22a38:	d181      	bne.n	2293e <net_6lo_compress+0x5c6>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   22a3a:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22a3e:	f083 0302 	eor.w	r3, r3, #2
   22a42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   22a44:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   22a46:	4293      	cmp	r3, r2
   22a48:	f47f af79 	bne.w	2293e <net_6lo_compress+0x5c6>
				return true;
   22a4c:	f8dd a004 	ldr.w	sl, [sp, #4]
   22a50:	e775      	b.n	2293e <net_6lo_compress+0x5c6>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   22a52:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22a54:	3a01      	subs	r2, #1
   22a56:	3101      	adds	r1, #1
   22a58:	f10b 0009 	add.w	r0, fp, #9
   22a5c:	f007 fec8 	bl	2a7f0 <memcmp>
   22a60:	2800      	cmp	r0, #0
   22a62:	f47f af6c 	bne.w	2293e <net_6lo_compress+0x5c6>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   22a66:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22a6a:	f083 0302 	eor.w	r3, r3, #2
   22a6e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   22a70:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   22a72:	4293      	cmp	r3, r2
   22a74:	f47f af63 	bne.w	2293e <net_6lo_compress+0x5c6>
			return true;
   22a78:	f8dd a004 	ldr.w	sl, [sp, #4]
   22a7c:	e75f      	b.n	2293e <net_6lo_compress+0x5c6>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   22a7e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22a82:	7853      	ldrb	r3, [r2, #1]
   22a84:	f043 0301 	orr.w	r3, r3, #1
   22a88:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   22a8a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22a8e:	2208      	movs	r2, #8
   22a90:	f106 0120 	add.w	r1, r6, #32
   22a94:	4448      	add	r0, r9
   22a96:	f7dd fc13 	bl	2c0 <memcpy>
				offset += 8;
   22a9a:	f109 0908 	add.w	r9, r9, #8
   22a9e:	fa5f f989 	uxtb.w	r9, r9
   22aa2:	e577      	b.n	22594 <net_6lo_compress+0x21c>
				return 0;
   22aa4:	f04f 0900 	mov.w	r9, #0
   22aa8:	e574      	b.n	22594 <net_6lo_compress+0x21c>
		net_pkt_frag_unref(frag);
   22aaa:	4640      	mov	r0, r8
   22aac:	f7fa fe9f 	bl	1d7ee <net_pkt_frag_unref>
		return false;
   22ab0:	2000      	movs	r0, #0
   22ab2:	e485      	b.n	223c0 <net_6lo_compress+0x48>
		udp = net_udp_get_hdr(pkt, &hdr);
   22ab4:	a902      	add	r1, sp, #8
   22ab6:	4620      	mov	r0, r4
   22ab8:	f000 fc68 	bl	2338c <net_udp_get_hdr>
   22abc:	4606      	mov	r6, r0
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   22abe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22ac2:	22f0      	movs	r2, #240	; 0xf0
   22ac4:	f803 2009 	strb.w	r2, [r3, r9]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   22ac8:	8802      	ldrh	r2, [r0, #0]
   22aca:	0a13      	lsrs	r3, r2, #8
   22acc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22ad0:	b29b      	uxth	r3, r3
   22ad2:	f640 720b 	movw	r2, #3851	; 0xf0b
   22ad6:	ebb2 1f13 	cmp.w	r2, r3, lsr #4
   22ada:	d025      	beq.n	22b28 <net_6lo_compress+0x7b0>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   22adc:	8872      	ldrh	r2, [r6, #2]
   22ade:	b2d2      	uxtb	r2, r2
   22ae0:	2af0      	cmp	r2, #240	; 0xf0
   22ae2:	d046      	beq.n	22b72 <net_6lo_compress+0x7fa>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   22ae4:	0a1b      	lsrs	r3, r3, #8
   22ae6:	2bf0      	cmp	r3, #240	; 0xf0
   22ae8:	d062      	beq.n	22bb0 <net_6lo_compress+0x838>
		offset++;
   22aea:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 4);
   22aee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22af2:	2204      	movs	r2, #4
   22af4:	4631      	mov	r1, r6
   22af6:	fa53 f080 	uxtab	r0, r3, r0
   22afa:	f7dd fbe1 	bl	2c0 <memcpy>
		offset += 4;
   22afe:	f109 0905 	add.w	r9, r9, #5
   22b02:	fa5f f989 	uxtb.w	r9, r9
	memcpy(&IPHC[offset], &udp->chksum, 2);
   22b06:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22b0a:	2202      	movs	r2, #2
   22b0c:	1db1      	adds	r1, r6, #6
   22b0e:	4448      	add	r0, r9
   22b10:	f7dd fbd6 	bl	2c0 <memcpy>
	offset += 2;
   22b14:	f109 0902 	add.w	r9, r9, #2
   22b18:	fa5f f989 	uxtb.w	r9, r9
		net_udp_set_hdr(pkt, udp);
   22b1c:	4631      	mov	r1, r6
   22b1e:	4620      	mov	r0, r4
   22b20:	f000 fc74 	bl	2340c <net_udp_set_hdr>
		compressed += NET_UDPH_LEN;
   22b24:	2630      	movs	r6, #48	; 0x30
   22b26:	e53e      	b.n	225a6 <net_6lo_compress+0x22e>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   22b28:	8841      	ldrh	r1, [r0, #2]
   22b2a:	0a0a      	lsrs	r2, r1, #8
   22b2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   22b30:	f3c2 120b 	ubfx	r2, r2, #4, #12
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   22b34:	f640 710b 	movw	r1, #3851	; 0xf0b
   22b38:	428a      	cmp	r2, r1
   22b3a:	d1cf      	bne.n	22adc <net_6lo_compress+0x764>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   22b3c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22b40:	f812 3009 	ldrb.w	r3, [r2, r9]
   22b44:	f043 0303 	orr.w	r3, r3, #3
   22b48:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   22b4c:	f109 0101 	add.w	r1, r9, #1
   22b50:	b2c9      	uxtb	r1, r1
		tmp = (u8_t)(htons(udp->src_port));
   22b52:	8803      	ldrh	r3, [r0, #0]
   22b54:	0a1b      	lsrs	r3, r3, #8
		tmp = tmp << 4;
   22b56:	011b      	lsls	r3, r3, #4
   22b58:	b2db      	uxtb	r3, r3
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   22b5a:	8842      	ldrh	r2, [r0, #2]
   22b5c:	f3c2 2203 	ubfx	r2, r2, #8, #4
   22b60:	4313      	orrs	r3, r2
		IPHC[offset++] = tmp;
   22b62:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22b66:	f109 0902 	add.w	r9, r9, #2
   22b6a:	fa5f f989 	uxtb.w	r9, r9
   22b6e:	5453      	strb	r3, [r2, r1]
   22b70:	e7c9      	b.n	22b06 <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   22b72:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22b76:	f812 3009 	ldrb.w	r3, [r2, r9]
   22b7a:	f043 0301 	orr.w	r3, r3, #1
   22b7e:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   22b82:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 2);
   22b86:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22b8a:	2202      	movs	r2, #2
   22b8c:	4631      	mov	r1, r6
   22b8e:	fa53 f080 	uxtab	r0, r3, r0
   22b92:	f7dd fb95 	bl	2c0 <memcpy>
		offset += 2;
   22b96:	f109 0303 	add.w	r3, r9, #3
   22b9a:	b2db      	uxtb	r3, r3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   22b9c:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22ba0:	f109 0904 	add.w	r9, r9, #4
   22ba4:	fa5f f989 	uxtb.w	r9, r9
   22ba8:	8872      	ldrh	r2, [r6, #2]
   22baa:	0a12      	lsrs	r2, r2, #8
   22bac:	54ca      	strb	r2, [r1, r3]
   22bae:	e7aa      	b.n	22b06 <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   22bb0:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22bb4:	f812 3009 	ldrb.w	r3, [r2, r9]
   22bb8:	f043 0302 	orr.w	r3, r3, #2
   22bbc:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   22bc0:	f109 0301 	add.w	r3, r9, #1
   22bc4:	fa5f fe83 	uxtb.w	lr, r3
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   22bc8:	f109 0002 	add.w	r0, r9, #2
   22bcc:	4631      	mov	r1, r6
   22bce:	f831 2b02 	ldrh.w	r2, [r1], #2
   22bd2:	0a12      	lsrs	r2, r2, #8
   22bd4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22bd8:	f803 200e 	strb.w	r2, [r3, lr]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   22bdc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22be0:	2202      	movs	r2, #2
   22be2:	fa53 f080 	uxtab	r0, r3, r0
   22be6:	f7dd fb6b 	bl	2c0 <memcpy>
		offset += 2;
   22bea:	f109 0904 	add.w	r9, r9, #4
   22bee:	fa5f f989 	uxtb.w	r9, r9
   22bf2:	e788      	b.n	22b06 <net_6lo_compress+0x78e>
		return false;
   22bf4:	2000      	movs	r0, #0
   22bf6:	f7ff bbe3 	b.w	223c0 <net_6lo_compress+0x48>
		return false;
   22bfa:	2000      	movs	r0, #0
   22bfc:	f7ff bbe0 	b.w	223c0 <net_6lo_compress+0x48>
	return true;
   22c00:	4628      	mov	r0, r5
		return compress_IPHC_header(pkt, fragment);
   22c02:	f7ff bbdd 	b.w	223c0 <net_6lo_compress+0x48>
		return false;
   22c06:	4628      	mov	r0, r5
   22c08:	f7ff bbda 	b.w	223c0 <net_6lo_compress+0x48>
	return true;
   22c0c:	2001      	movs	r0, #1
		return compress_ipv6_header(pkt, fragment);
   22c0e:	f7ff bbd7 	b.w	223c0 <net_6lo_compress+0x48>

00022c12 <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   22c12:	b510      	push	{r4, lr}
	NET_ASSERT(pkt && pkt->frags);

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   22c14:	6883      	ldr	r3, [r0, #8]
   22c16:	689b      	ldr	r3, [r3, #8]
   22c18:	781b      	ldrb	r3, [r3, #0]
   22c1a:	f003 0260 	and.w	r2, r3, #96	; 0x60
   22c1e:	2a60      	cmp	r2, #96	; 0x60
   22c20:	d005      	beq.n	22c2e <net_6lo_uncompress+0x1c>
	    NET_6LO_DISPATCH_IPHC) {
		/* Uncompress IPHC header */
		return uncompress_IPHC_header(pkt);

	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   22c22:	f003 0341 	and.w	r3, r3, #65	; 0x41
   22c26:	2b41      	cmp	r3, #65	; 0x41
   22c28:	d004      	beq.n	22c34 <net_6lo_uncompress+0x22>
		return uncompress_ipv6_header(pkt);
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
   22c2a:	2001      	movs	r0, #1
}
   22c2c:	bd10      	pop	{r4, pc}
		return uncompress_IPHC_header(pkt);
   22c2e:	f7ff f873 	bl	21d18 <uncompress_IPHC_header>
   22c32:	bd10      	pop	{r4, pc}
	struct net_buf *frag = pkt->frags;
   22c34:	6884      	ldr	r4, [r0, #8]
	memmove(frag->data, frag->data + 1, frag->len - 1);
   22c36:	68a0      	ldr	r0, [r4, #8]
   22c38:	89a2      	ldrh	r2, [r4, #12]
   22c3a:	3a01      	subs	r2, #1
   22c3c:	1c41      	adds	r1, r0, #1
   22c3e:	f007 fe07 	bl	2a850 <memmove>
	frag->len -= 1;
   22c42:	89a3      	ldrh	r3, [r4, #12]
   22c44:	3b01      	subs	r3, #1
   22c46:	81a3      	strh	r3, [r4, #12]
		return uncompress_ipv6_header(pkt);
   22c48:	2001      	movs	r0, #1
   22c4a:	bd10      	pop	{r4, pc}

00022c4c <net_route_entry_remove>:
{
   22c4c:	4770      	bx	lr

00022c4e <net_route_entries_table_clear>:
{
   22c4e:	4770      	bx	lr

00022c50 <nbr_nexthop_put>:

	return nbr;
}

static int nbr_nexthop_put(struct net_nbr *nbr)
{
   22c50:	b508      	push	{r3, lr}
	NET_ASSERT(nbr);

	NET_DBG("[%d] nbr %p iface %p", nbr->idx, nbr, nbr->iface);

	net_nbr_unref(nbr);
   22c52:	f7fc fbd3 	bl	1f3fc <net_nbr_unref>

	return 0;
}
   22c56:	2000      	movs	r0, #0
   22c58:	bd08      	pop	{r3, pc}
	...

00022c5c <net_route_get_nbr>:
{
   22c5c:	b430      	push	{r4, r5}
   22c5e:	4605      	mov	r5, r0
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   22c60:	2300      	movs	r3, #0
   22c62:	e000      	b.n	22c66 <net_route_get_nbr+0xa>
   22c64:	3301      	adds	r3, #1
   22c66:	2b07      	cmp	r3, #7
   22c68:	dc0b      	bgt.n	22c82 <net_route_get_nbr+0x26>
	return &net_route_entries_pool[idx].nbr;
   22c6a:	4c07      	ldr	r4, [pc, #28]	; (22c88 <net_route_get_nbr+0x2c>)
   22c6c:	00da      	lsls	r2, r3, #3
   22c6e:	1ad2      	subs	r2, r2, r3
   22c70:	00d1      	lsls	r1, r2, #3
   22c72:	1860      	adds	r0, r4, r1
		if (!nbr->ref) {
   22c74:	5c62      	ldrb	r2, [r4, r1]
   22c76:	2a00      	cmp	r2, #0
   22c78:	d0f4      	beq.n	22c64 <net_route_get_nbr+0x8>
		if (nbr->data == (u8_t *)route) {
   22c7a:	68c2      	ldr	r2, [r0, #12]
   22c7c:	42aa      	cmp	r2, r5
   22c7e:	d1f1      	bne.n	22c64 <net_route_get_nbr+0x8>
   22c80:	e000      	b.n	22c84 <net_route_get_nbr+0x28>
	return NULL;
   22c82:	2000      	movs	r0, #0
}
   22c84:	bc30      	pop	{r4, r5}
   22c86:	4770      	bx	lr
   22c88:	2000c384 	.word	0x2000c384

00022c8c <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   22c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c90:	b083      	sub	sp, #12
   22c92:	4606      	mov	r6, r0
   22c94:	9101      	str	r1, [sp, #4]
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22c96:	2400      	movs	r4, #0
	u8_t longest_match = 0;
   22c98:	4625      	mov	r5, r4
	struct net_route_entry *route, *found = NULL;
   22c9a:	4627      	mov	r7, r4
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22c9c:	e00b      	b.n	22cb6 <net_route_lookup+0x2a>
	return (struct net_route_entry *)nbr->data;
   22c9e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22ca2:	00da      	lsls	r2, r3, #3
   22ca4:	4b3f      	ldr	r3, [pc, #252]	; (22da4 <net_route_lookup+0x118>)
   22ca6:	4413      	add	r3, r2
   22ca8:	f8d3 800c 	ldr.w	r8, [r3, #12]
			continue;
		}

		route = net_route_data(nbr);

		if (route->prefix_len >= longest_match &&
   22cac:	f898 3020 	ldrb.w	r3, [r8, #32]
   22cb0:	429d      	cmp	r5, r3
   22cb2:	d917      	bls.n	22ce4 <net_route_lookup+0x58>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22cb4:	3401      	adds	r4, #1
   22cb6:	2c07      	cmp	r4, #7
   22cb8:	dc46      	bgt.n	22d48 <net_route_lookup+0xbc>
   22cba:	f015 0f80 	tst.w	r5, #128	; 0x80
   22cbe:	d143      	bne.n	22d48 <net_route_lookup+0xbc>
		if (!nbr->ref) {
   22cc0:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   22cc4:	00d3      	lsls	r3, r2, #3
   22cc6:	4a37      	ldr	r2, [pc, #220]	; (22da4 <net_route_lookup+0x118>)
   22cc8:	5cd3      	ldrb	r3, [r2, r3]
   22cca:	2b00      	cmp	r3, #0
   22ccc:	d0f2      	beq.n	22cb4 <net_route_lookup+0x28>
		if (iface && nbr->iface != iface) {
   22cce:	2e00      	cmp	r6, #0
   22cd0:	d0e5      	beq.n	22c9e <net_route_lookup+0x12>
   22cd2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22cd6:	00da      	lsls	r2, r3, #3
   22cd8:	4b32      	ldr	r3, [pc, #200]	; (22da4 <net_route_lookup+0x118>)
   22cda:	4413      	add	r3, r2
   22cdc:	689b      	ldr	r3, [r3, #8]
   22cde:	429e      	cmp	r6, r3
   22ce0:	d1e8      	bne.n	22cb4 <net_route_lookup+0x28>
   22ce2:	e7dc      	b.n	22c9e <net_route_lookup+0x12>
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   22ce4:	f108 0910 	add.w	r9, r8, #16
	u8_t bits = 128 - length;
   22ce8:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   22cec:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   22cf0:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   22cf4:	2b80      	cmp	r3, #128	; 0x80
   22cf6:	d906      	bls.n	22d06 <net_route_lookup+0x7a>
		return false;
   22cf8:	2300      	movs	r3, #0
		if (route->prefix_len >= longest_match &&
   22cfa:	2b00      	cmp	r3, #0
   22cfc:	d0da      	beq.n	22cb4 <net_route_lookup+0x28>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   22cfe:	f898 5020 	ldrb.w	r5, [r8, #32]
			found = route;
   22d02:	4647      	mov	r7, r8
   22d04:	e7d6      	b.n	22cb4 <net_route_lookup+0x28>
	if (memcmp(addr1, addr2, bytes)) {
   22d06:	465a      	mov	r2, fp
   22d08:	4649      	mov	r1, r9
   22d0a:	9801      	ldr	r0, [sp, #4]
   22d0c:	f007 fd70 	bl	2a7f0 <memcmp>
   22d10:	b9b0      	cbnz	r0, 22d40 <net_route_lookup+0xb4>
	if (!remain) {
   22d12:	f1ba 0f00 	cmp.w	sl, #0
   22d16:	d015      	beq.n	22d44 <net_route_lookup+0xb8>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   22d18:	f1ca 0208 	rsb	r2, sl, #8
   22d1c:	23ff      	movs	r3, #255	; 0xff
   22d1e:	4093      	lsls	r3, r2
   22d20:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   22d24:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   22d28:	9b01      	ldr	r3, [sp, #4]
   22d2a:	f813 300b 	ldrb.w	r3, [r3, fp]
   22d2e:	f819 200b 	ldrb.w	r2, [r9, fp]
   22d32:	4053      	eors	r3, r2
   22d34:	ea1a 0f03 	tst.w	sl, r3
   22d38:	bf0c      	ite	eq
   22d3a:	2301      	moveq	r3, #1
   22d3c:	2300      	movne	r3, #0
   22d3e:	e7dc      	b.n	22cfa <net_route_lookup+0x6e>
		return false;
   22d40:	2300      	movs	r3, #0
   22d42:	e7da      	b.n	22cfa <net_route_lookup+0x6e>
		return true;
   22d44:	2301      	movs	r3, #1
   22d46:	e7d8      	b.n	22cfa <net_route_lookup+0x6e>
		}
	}

	if (found) {
   22d48:	b1c7      	cbz	r7, 22d7c <net_route_lookup+0xf0>
	sys_slist_find_and_remove(&routes, &route->node);
   22d4a:	463a      	mov	r2, r7
	return list->head;
   22d4c:	4b16      	ldr	r3, [pc, #88]	; (22da8 <net_route_lookup+0x11c>)
   22d4e:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   22d50:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22d52:	b16b      	cbz	r3, 22d70 <net_route_lookup+0xe4>
		if (test == node) {
   22d54:	429a      	cmp	r2, r3
   22d56:	d002      	beq.n	22d5e <net_route_lookup+0xd2>
		prev = test;
   22d58:	4619      	mov	r1, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22d5a:	681b      	ldr	r3, [r3, #0]
   22d5c:	e7f9      	b.n	22d52 <net_route_lookup+0xc6>
	if (!prev_node) {
   22d5e:	b189      	cbz	r1, 22d84 <net_route_lookup+0xf8>
		prev_node->next = node->next;
   22d60:	683b      	ldr	r3, [r7, #0]
   22d62:	600b      	str	r3, [r1, #0]
		if (list->tail == node) {
   22d64:	4b10      	ldr	r3, [pc, #64]	; (22da8 <net_route_lookup+0x11c>)
   22d66:	685b      	ldr	r3, [r3, #4]
   22d68:	429a      	cmp	r2, r3
   22d6a:	d014      	beq.n	22d96 <net_route_lookup+0x10a>
	node->next = NULL;
   22d6c:	2300      	movs	r3, #0
   22d6e:	603b      	str	r3, [r7, #0]
	node->next = list->head;
   22d70:	4b0d      	ldr	r3, [pc, #52]	; (22da8 <net_route_lookup+0x11c>)
   22d72:	6819      	ldr	r1, [r3, #0]
   22d74:	6039      	str	r1, [r7, #0]
	list->head = node;
   22d76:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
   22d78:	685b      	ldr	r3, [r3, #4]
   22d7a:	b17b      	cbz	r3, 22d9c <net_route_lookup+0x110>

		update_route_access(found);
	}

	return found;
}
   22d7c:	4638      	mov	r0, r7
   22d7e:	b003      	add	sp, #12
   22d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		list->head = node->next;
   22d84:	6839      	ldr	r1, [r7, #0]
   22d86:	4b08      	ldr	r3, [pc, #32]	; (22da8 <net_route_lookup+0x11c>)
   22d88:	6019      	str	r1, [r3, #0]
		if (list->tail == node) {
   22d8a:	685b      	ldr	r3, [r3, #4]
   22d8c:	429a      	cmp	r2, r3
   22d8e:	d1ed      	bne.n	22d6c <net_route_lookup+0xe0>
			list->tail = list->head;
   22d90:	4b05      	ldr	r3, [pc, #20]	; (22da8 <net_route_lookup+0x11c>)
   22d92:	6059      	str	r1, [r3, #4]
   22d94:	e7ea      	b.n	22d6c <net_route_lookup+0xe0>
			list->tail = prev_node;
   22d96:	4b04      	ldr	r3, [pc, #16]	; (22da8 <net_route_lookup+0x11c>)
   22d98:	6059      	str	r1, [r3, #4]
   22d9a:	e7e7      	b.n	22d6c <net_route_lookup+0xe0>
		list->tail = list->head;
   22d9c:	4b02      	ldr	r3, [pc, #8]	; (22da8 <net_route_lookup+0x11c>)
   22d9e:	605a      	str	r2, [r3, #4]
	return found;
   22da0:	e7ec      	b.n	22d7c <net_route_lookup+0xf0>
   22da2:	bf00      	nop
   22da4:	2000c384 	.word	0x2000c384
   22da8:	20001fd4 	.word	0x20001fd4

00022dac <net_route_del>:
int net_route_del(struct net_route_entry *route)
{
	struct net_nbr *nbr;
	struct net_route_nexthop *nexthop_route;

	if (!route) {
   22dac:	2800      	cmp	r0, #0
   22dae:	d046      	beq.n	22e3e <net_route_del+0x92>
{
   22db0:	b538      	push	{r3, r4, r5, lr}
   22db2:	4604      	mov	r4, r0
		return -EINVAL;
	}

	sys_slist_find_and_remove(&routes, &route->node);
   22db4:	4601      	mov	r1, r0
	return list->head;
   22db6:	4b25      	ldr	r3, [pc, #148]	; (22e4c <net_route_del+0xa0>)
   22db8:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   22dba:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22dbc:	b16b      	cbz	r3, 22dda <net_route_del+0x2e>
		if (test == node) {
   22dbe:	4299      	cmp	r1, r3
   22dc0:	d002      	beq.n	22dc8 <net_route_del+0x1c>
		prev = test;
   22dc2:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22dc4:	681b      	ldr	r3, [r3, #0]
   22dc6:	e7f9      	b.n	22dbc <net_route_del+0x10>
	if (!prev_node) {
   22dc8:	b1aa      	cbz	r2, 22df6 <net_route_del+0x4a>
		prev_node->next = node->next;
   22dca:	6823      	ldr	r3, [r4, #0]
   22dcc:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   22dce:	4b1f      	ldr	r3, [pc, #124]	; (22e4c <net_route_del+0xa0>)
   22dd0:	685b      	ldr	r3, [r3, #4]
   22dd2:	429c      	cmp	r4, r3
   22dd4:	d018      	beq.n	22e08 <net_route_del+0x5c>
	node->next = NULL;
   22dd6:	2300      	movs	r3, #0
   22dd8:	6023      	str	r3, [r4, #0]

	nbr = net_route_get_nbr(route);
   22dda:	4620      	mov	r0, r4
   22ddc:	f7ff ff3e 	bl	22c5c <net_route_get_nbr>
	if (!nbr) {
   22de0:	4605      	mov	r5, r0
   22de2:	2800      	cmp	r0, #0
   22de4:	d02e      	beq.n	22e44 <net_route_del+0x98>
   22de6:	2300      	movs	r3, #0
   22de8:	461a      	mov	r2, r3
   22dea:	6881      	ldr	r1, [r0, #8]
   22dec:	4818      	ldr	r0, [pc, #96]	; (22e50 <net_route_del+0xa4>)
   22dee:	f000 f977 	bl	230e0 <net_mgmt_event_notify_with_info>
	return list->head;
   22df2:	6864      	ldr	r4, [r4, #4]
   22df4:	e011      	b.n	22e1a <net_route_del+0x6e>
		list->head = node->next;
   22df6:	6822      	ldr	r2, [r4, #0]
   22df8:	4b14      	ldr	r3, [pc, #80]	; (22e4c <net_route_del+0xa0>)
   22dfa:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   22dfc:	685b      	ldr	r3, [r3, #4]
   22dfe:	429c      	cmp	r4, r3
   22e00:	d1e9      	bne.n	22dd6 <net_route_del+0x2a>
			list->tail = list->head;
   22e02:	4b12      	ldr	r3, [pc, #72]	; (22e4c <net_route_del+0xa0>)
   22e04:	605a      	str	r2, [r3, #4]
   22e06:	e7e6      	b.n	22dd6 <net_route_del+0x2a>
			list->tail = prev_node;
   22e08:	4b10      	ldr	r3, [pc, #64]	; (22e4c <net_route_del+0xa0>)
   22e0a:	605a      	str	r2, [r3, #4]
   22e0c:	e7e3      	b.n	22dd6 <net_route_del+0x2a>

	net_route_info("Deleted", route, &route->addr);

	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, nbr->iface);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22e0e:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e10:	b154      	cbz	r4, 22e28 <net_route_del+0x7c>
	return node->next;
   22e12:	6823      	ldr	r3, [r4, #0]
   22e14:	b153      	cbz	r3, 22e2c <net_route_del+0x80>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e16:	b15a      	cbz	r2, 22e30 <net_route_del+0x84>
	return node->next;
   22e18:	6824      	ldr	r4, [r4, #0]
   22e1a:	b15c      	cbz	r4, 22e34 <net_route_del+0x88>
		if (!nexthop_route->nbr) {
   22e1c:	6860      	ldr	r0, [r4, #4]
   22e1e:	2800      	cmp	r0, #0
   22e20:	d0f5      	beq.n	22e0e <net_route_del+0x62>
			continue;
		}

		nbr_nexthop_put(nexthop_route->nbr);
   22e22:	f7ff ff15 	bl	22c50 <nbr_nexthop_put>
   22e26:	e7f2      	b.n	22e0e <net_route_del+0x62>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e28:	4623      	mov	r3, r4
   22e2a:	e7f3      	b.n	22e14 <net_route_del+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22e2c:	2400      	movs	r4, #0
   22e2e:	e7f4      	b.n	22e1a <net_route_del+0x6e>
   22e30:	2400      	movs	r4, #0
   22e32:	e7f2      	b.n	22e1a <net_route_del+0x6e>
	net_nbr_unref(nbr);
   22e34:	4628      	mov	r0, r5
   22e36:	f7fc fae1 	bl	1f3fc <net_nbr_unref>
	}

	nbr_free(nbr);

	return 0;
   22e3a:	2000      	movs	r0, #0
   22e3c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22e3e:	f06f 0015 	mvn.w	r0, #21
   22e42:	4770      	bx	lr
		return -ENOENT;
   22e44:	f06f 0001 	mvn.w	r0, #1
}
   22e48:	bd38      	pop	{r3, r4, r5, pc}
   22e4a:	bf00      	nop
   22e4c:	20001fd4 	.word	0x20001fd4
   22e50:	f060000c 	.word	0xf060000c

00022e54 <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   22e54:	b1b8      	cbz	r0, 22e86 <net_route_get_nexthop+0x32>
	return list->head;
   22e56:	6843      	ldr	r3, [r0, #4]
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22e58:	b19b      	cbz	r3, 22e82 <net_route_get_nexthop+0x2e>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   22e5a:	685a      	ldr	r2, [r3, #4]
   22e5c:	7851      	ldrb	r1, [r2, #1]
   22e5e:	29ff      	cmp	r1, #255	; 0xff
   22e60:	d002      	beq.n	22e68 <net_route_get_nexthop+0x14>
   22e62:	68d0      	ldr	r0, [r2, #12]
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		NET_ASSERT(ipv6_nbr_data);

		addr = &ipv6_nbr_data->addr;
   22e64:	3004      	adds	r0, #4
		NET_ASSERT(addr);

		return addr;
   22e66:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22e68:	4619      	mov	r1, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e6a:	b123      	cbz	r3, 22e76 <net_route_get_nexthop+0x22>
	return node->next;
   22e6c:	681a      	ldr	r2, [r3, #0]
   22e6e:	b132      	cbz	r2, 22e7e <net_route_get_nexthop+0x2a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e70:	b119      	cbz	r1, 22e7a <net_route_get_nexthop+0x26>
	return node->next;
   22e72:	681b      	ldr	r3, [r3, #0]
   22e74:	e7f0      	b.n	22e58 <net_route_get_nexthop+0x4>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e76:	461a      	mov	r2, r3
   22e78:	e7f9      	b.n	22e6e <net_route_get_nexthop+0x1a>
   22e7a:	2300      	movs	r3, #0
   22e7c:	e7ec      	b.n	22e58 <net_route_get_nexthop+0x4>
   22e7e:	2300      	movs	r3, #0
   22e80:	e7ea      	b.n	22e58 <net_route_get_nexthop+0x4>
	}

	return NULL;
   22e82:	2000      	movs	r0, #0
   22e84:	4770      	bx	lr
		return NULL;
   22e86:	2000      	movs	r0, #0
}
   22e88:	4770      	bx	lr
	...

00022e8c <net_route_foreach>:

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
   22e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22e8e:	4607      	mov	r7, r0
   22e90:	460e      	mov	r6, r1
	int i, ret = 0;
   22e92:	2500      	movs	r5, #0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   22e94:	462c      	mov	r4, r5
   22e96:	e000      	b.n	22e9a <net_route_foreach+0xe>
   22e98:	3401      	adds	r4, #1
   22e9a:	2c07      	cmp	r4, #7
   22e9c:	dc0b      	bgt.n	22eb6 <net_route_foreach+0x2a>
	return (struct net_route_entry *)nbr->data;
   22e9e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22ea2:	00da      	lsls	r2, r3, #3
   22ea4:	4b05      	ldr	r3, [pc, #20]	; (22ebc <net_route_foreach+0x30>)
   22ea6:	4413      	add	r3, r2
   22ea8:	68d8      	ldr	r0, [r3, #12]
		if (!nbr) {
			continue;
		}

		route = net_route_data(nbr);
		if (!route) {
   22eaa:	2800      	cmp	r0, #0
   22eac:	d0f4      	beq.n	22e98 <net_route_foreach+0xc>
			continue;
		}

		cb(route, user_data);
   22eae:	4631      	mov	r1, r6
   22eb0:	47b8      	blx	r7

		ret++;
   22eb2:	3501      	adds	r5, #1
   22eb4:	e7f0      	b.n	22e98 <net_route_foreach+0xc>
	}

	return ret;
}
   22eb6:	4628      	mov	r0, r5
   22eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22eba:	bf00      	nop
   22ebc:	2000c384 	.word	0x2000c384

00022ec0 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   22ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22ec2:	4607      	mov	r7, r0
   22ec4:	460c      	mov	r4, r1
   22ec6:	4615      	mov	r5, r2
   22ec8:	461e      	mov	r6, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   22eca:	f7fd f961 	bl	20190 <net_ipv6_nbr_lookup>
   22ece:	b120      	cbz	r0, 22eda <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   22ed0:	2300      	movs	r3, #0
   22ed2:	602b      	str	r3, [r5, #0]
		*nexthop = dst;
   22ed4:	6034      	str	r4, [r6, #0]

		return true;
   22ed6:	2001      	movs	r0, #1
   22ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	*route = net_route_lookup(iface, dst);
   22eda:	4621      	mov	r1, r4
   22edc:	4638      	mov	r0, r7
   22ede:	f7ff fed5 	bl	22c8c <net_route_lookup>
   22ee2:	6028      	str	r0, [r5, #0]
	if (*route) {
   22ee4:	b130      	cbz	r0, 22ef4 <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   22ee6:	f7ff ffb5 	bl	22e54 <net_route_get_nexthop>
   22eea:	6030      	str	r0, [r6, #0]
		if (!*nexthop) {
   22eec:	b108      	cbz	r0, 22ef2 <net_route_get_info+0x32>
			return false;
		}

		return true;
   22eee:	2001      	movs	r0, #1
   22ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		/* No specific route to this host, use the default
		 * route instead.
		 */
		router = net_if_ipv6_router_find_default(NULL, dst);
   22ef4:	4621      	mov	r1, r4
   22ef6:	2000      	movs	r0, #0
   22ef8:	f7f8 fefe 	bl	1bcf8 <net_if_ipv6_router_find_default>
		if (!router) {
   22efc:	4603      	mov	r3, r0
   22efe:	b118      	cbz	r0, 22f08 <net_route_get_info+0x48>
			return false;
		}

		*nexthop = &router->address.in6_addr;
   22f00:	332c      	adds	r3, #44	; 0x2c
   22f02:	6033      	str	r3, [r6, #0]

		return true;
   22f04:	2001      	movs	r0, #1
   22f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   22f08:	2000      	movs	r0, #0
	}

	return false;
}
   22f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022f0c <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   22f0c:	b570      	push	{r4, r5, r6, lr}
   22f0e:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(net_pkt_iface(pkt), nexthop);
   22f10:	6940      	ldr	r0, [r0, #20]
   22f12:	f7fd f93d 	bl	20190 <net_ipv6_nbr_lookup>
	if (!nbr) {
   22f16:	b330      	cbz	r0, 22f66 <net_route_packet+0x5a>
		NET_DBG("Cannot find %s neighbor.",
			net_sprint_ipv6_addr(nexthop));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   22f18:	7840      	ldrb	r0, [r0, #1]
   22f1a:	f7fc fb01 	bl	1f520 <net_nbr_get_lladdr>
	if (!lladdr) {
   22f1e:	4605      	mov	r5, r0
   22f20:	b320      	cbz	r0, 22f6c <net_route_packet+0x60>
		NET_DBG("Cannot find %s neighbor link layer address.",
			net_sprint_ipv6_addr(nexthop));
		return -ESRCH;
	}

	if (!net_pkt_ll_src(pkt)->addr) {
   22f22:	6a20      	ldr	r0, [r4, #32]
   22f24:	b328      	cbz	r0, 22f72 <net_route_packet+0x66>
	}

	/* Sanitycheck: If src and dst ll addresses are going to be same,
	 * then something went wrong in route lookup.
	 */
	if (!memcmp(net_pkt_ll_src(pkt)->addr, lladdr->addr, lladdr->len)) {
   22f26:	1cae      	adds	r6, r5, #2
   22f28:	786a      	ldrb	r2, [r5, #1]
   22f2a:	4631      	mov	r1, r6
   22f2c:	f007 fc60 	bl	2a7f0 <memcmp>
   22f30:	b310      	cbz	r0, 22f78 <net_route_packet+0x6c>
	pkt->forwarding = forward;
   22f32:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   22f36:	f043 0304 	orr.w	r3, r3, #4
   22f3a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return net_if_get_link_addr(pkt->iface);
   22f3e:	6963      	ldr	r3, [r4, #20]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   22f40:	691a      	ldr	r2, [r3, #16]
   22f42:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->type = net_pkt_ll_if(pkt)->type;
   22f44:	7d5a      	ldrb	r2, [r3, #21]
   22f46:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   22f4a:	7d1b      	ldrb	r3, [r3, #20]
   22f4c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   22f50:	62a6      	str	r6, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->type = lladdr->type;
   22f52:	782b      	ldrb	r3, [r5, #0]
   22f54:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_ll_dst(pkt)->len = lladdr->len;
   22f58:	786b      	ldrb	r3, [r5, #1]
   22f5a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	return net_send_data(pkt);
   22f5e:	4620      	mov	r0, r4
   22f60:	f7f8 f84a 	bl	1aff8 <net_send_data>
   22f64:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   22f66:	f06f 0001 	mvn.w	r0, #1
   22f6a:	bd70      	pop	{r4, r5, r6, pc}
		return -ESRCH;
   22f6c:	f06f 0002 	mvn.w	r0, #2
   22f70:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22f72:	f06f 0015 	mvn.w	r0, #21
   22f76:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22f78:	f06f 0015 	mvn.w	r0, #21
}
   22f7c:	bd70      	pop	{r4, r5, r6, pc}

00022f7e <net_route_init>:

void net_route_init(void)
{
   22f7e:	4770      	bx	lr

00022f80 <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   22f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22f82:	e079      	b.n	23078 <mgmt_thread+0xf8>
		out_event = 0;
   22f84:	2100      	movs	r1, #0
   22f86:	4a48      	ldr	r2, [pc, #288]	; (230a8 <mgmt_thread+0x128>)
   22f88:	8011      	strh	r1, [r2, #0]
   22f8a:	e089      	b.n	230a0 <mgmt_thread+0x120>
		return NULL;
   22f8c:	2600      	movs	r6, #0
		k_sem_take(&network_event, K_FOREVER);

		NET_DBG("Handling events, forwarding it relevantly");

		mgmt_event = mgmt_pop_event();
		if (!mgmt_event) {
   22f8e:	b13e      	cbz	r6, 22fa0 <mgmt_thread+0x20>
	return list->head;
   22f90:	4b46      	ldr	r3, [pc, #280]	; (230ac <mgmt_thread+0x12c>)
   22f92:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22f94:	b15d      	cbz	r5, 22fae <mgmt_thread+0x2e>
   22f96:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22f98:	b105      	cbz	r5, 22f9c <mgmt_thread+0x1c>
	return node->next;
   22f9a:	682c      	ldr	r4, [r5, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22f9c:	2700      	movs	r7, #0
   22f9e:	e01f      	b.n	22fe0 <mgmt_thread+0x60>
   22fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22fa4:	2100      	movs	r1, #0
   22fa6:	4842      	ldr	r0, [pc, #264]	; (230b0 <mgmt_thread+0x130>)
   22fa8:	f006 f9fa 	bl	293a0 <_impl_k_sem_init>
			NET_DBG("Some event got probably lost (%u)",
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);

			continue;
   22fac:	e064      	b.n	23078 <mgmt_thread+0xf8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22fae:	462c      	mov	r4, r5
   22fb0:	e7f4      	b.n	22f9c <mgmt_thread+0x1c>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   22fb2:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   22fb6:	d04c      	beq.n	23052 <mgmt_thread+0xd2>
			struct mgmt_event_wait *sync_data =
   22fb8:	686a      	ldr	r2, [r5, #4]
			if (sync_data->iface &&
   22fba:	6993      	ldr	r3, [r2, #24]
   22fbc:	2b00      	cmp	r3, #0
   22fbe:	d02c      	beq.n	2301a <mgmt_thread+0x9a>
			    sync_data->iface != mgmt_event->iface) {
   22fc0:	6870      	ldr	r0, [r6, #4]
			if (sync_data->iface &&
   22fc2:	4283      	cmp	r3, r0
   22fc4:	d029      	beq.n	2301a <mgmt_thread+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22fc6:	2c00      	cmp	r4, #0
   22fc8:	d04b      	beq.n	23062 <mgmt_thread+0xe2>
   22fca:	4622      	mov	r2, r4
   22fcc:	2c00      	cmp	r4, #0
   22fce:	d046      	beq.n	2305e <mgmt_thread+0xde>
	return node->next;
   22fd0:	6823      	ldr	r3, [r4, #0]
   22fd2:	2b00      	cmp	r3, #0
   22fd4:	d047      	beq.n	23066 <mgmt_thread+0xe6>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22fd6:	2a00      	cmp	r2, #0
   22fd8:	d047      	beq.n	2306a <mgmt_thread+0xea>
	return node->next;
   22fda:	6823      	ldr	r3, [r4, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22fdc:	4625      	mov	r5, r4
   22fde:	461c      	mov	r4, r3
   22fe0:	2d00      	cmp	r5, #0
   22fe2:	d044      	beq.n	2306e <mgmt_thread+0xee>
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   22fe4:	6831      	ldr	r1, [r6, #0]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   22fe6:	68aa      	ldr	r2, [r5, #8]
   22fe8:	0f13      	lsrs	r3, r2, #28
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   22fea:	ea03 7311 	and.w	r3, r3, r1, lsr #28
   22fee:	f013 0f03 	tst.w	r3, #3
   22ff2:	d0e8      	beq.n	22fc6 <mgmt_thread+0x46>
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   22ff4:	0c13      	lsrs	r3, r2, #16
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) &
   22ff6:	ea03 4311 	and.w	r3, r3, r1, lsr #16
   22ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   22ffe:	2b00      	cmp	r3, #0
   23000:	d0e1      	beq.n	22fc6 <mgmt_thread+0x46>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   23002:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   23004:	2b00      	cmp	r3, #0
   23006:	d0d4      	beq.n	22fb2 <mgmt_thread+0x32>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   23008:	b293      	uxth	r3, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   2300a:	2b00      	cmp	r3, #0
   2300c:	d0d1      	beq.n	22fb2 <mgmt_thread+0x32>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
   2300e:	ea01 0302 	and.w	r3, r1, r2
   23012:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   23014:	2b00      	cmp	r3, #0
   23016:	d0d6      	beq.n	22fc6 <mgmt_thread+0x46>
   23018:	e7cb      	b.n	22fb2 <mgmt_thread+0x32>
			cb->raised_event = mgmt_event->event;
   2301a:	60a9      	str	r1, [r5, #8]
			sync_data->iface = mgmt_event->iface;
   2301c:	6873      	ldr	r3, [r6, #4]
   2301e:	6193      	str	r3, [r2, #24]
	if (!prev_node) {
   23020:	b15f      	cbz	r7, 2303a <mgmt_thread+0xba>
		prev_node->next = node->next;
   23022:	682b      	ldr	r3, [r5, #0]
   23024:	603b      	str	r3, [r7, #0]
		if (list->tail == node) {
   23026:	4b21      	ldr	r3, [pc, #132]	; (230ac <mgmt_thread+0x12c>)
   23028:	685b      	ldr	r3, [r3, #4]
   2302a:	429d      	cmp	r5, r3
   2302c:	d00e      	beq.n	2304c <mgmt_thread+0xcc>
	node->next = NULL;
   2302e:	2300      	movs	r3, #0
   23030:	602b      	str	r3, [r5, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   23032:	6868      	ldr	r0, [r5, #4]
   23034:	f006 f9bd 	bl	293b2 <_impl_k_sem_give>
   23038:	e7c5      	b.n	22fc6 <mgmt_thread+0x46>
		list->head = node->next;
   2303a:	682a      	ldr	r2, [r5, #0]
   2303c:	4b1b      	ldr	r3, [pc, #108]	; (230ac <mgmt_thread+0x12c>)
   2303e:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   23040:	685b      	ldr	r3, [r3, #4]
   23042:	429d      	cmp	r5, r3
   23044:	d1f3      	bne.n	2302e <mgmt_thread+0xae>
			list->tail = list->head;
   23046:	4b19      	ldr	r3, [pc, #100]	; (230ac <mgmt_thread+0x12c>)
   23048:	605a      	str	r2, [r3, #4]
   2304a:	e7f0      	b.n	2302e <mgmt_thread+0xae>
			list->tail = prev_node;
   2304c:	4b17      	ldr	r3, [pc, #92]	; (230ac <mgmt_thread+0x12c>)
   2304e:	605f      	str	r7, [r3, #4]
   23050:	e7ed      	b.n	2302e <mgmt_thread+0xae>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   23052:	686b      	ldr	r3, [r5, #4]
   23054:	6872      	ldr	r2, [r6, #4]
   23056:	4628      	mov	r0, r5
   23058:	4798      	blx	r3
			prev = &cb->node;
   2305a:	462f      	mov	r7, r5
   2305c:	e7b3      	b.n	22fc6 <mgmt_thread+0x46>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2305e:	4623      	mov	r3, r4
   23060:	e7b7      	b.n	22fd2 <mgmt_thread+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   23062:	4623      	mov	r3, r4
   23064:	e7ba      	b.n	22fdc <mgmt_thread+0x5c>
   23066:	2300      	movs	r3, #0
   23068:	e7b8      	b.n	22fdc <mgmt_thread+0x5c>
   2306a:	2300      	movs	r3, #0
   2306c:	e7b6      	b.n	22fdc <mgmt_thread+0x5c>
	mgmt_event->event = 0;
   2306e:	2300      	movs	r3, #0
   23070:	6033      	str	r3, [r6, #0]
	mgmt_event->iface = NULL;
   23072:	6073      	str	r3, [r6, #4]
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   23074:	f006 f844 	bl	29100 <_impl_k_yield>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   23078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2307c:	480c      	ldr	r0, [pc, #48]	; (230b0 <mgmt_thread+0x130>)
   2307e:	f006 f9ab 	bl	293d8 <_impl_k_sem_take>
	if (!events[out_event].event) {
   23082:	4b09      	ldr	r3, [pc, #36]	; (230a8 <mgmt_thread+0x128>)
   23084:	881b      	ldrh	r3, [r3, #0]
   23086:	4a0b      	ldr	r2, [pc, #44]	; (230b4 <mgmt_thread+0x134>)
   23088:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   2308c:	2a00      	cmp	r2, #0
   2308e:	f43f af7d 	beq.w	22f8c <mgmt_thread+0xc>
	out_event++;
   23092:	1c5a      	adds	r2, r3, #1
   23094:	b292      	uxth	r2, r2
   23096:	4904      	ldr	r1, [pc, #16]	; (230a8 <mgmt_thread+0x128>)
   23098:	800a      	strh	r2, [r1, #0]
	if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   2309a:	2a02      	cmp	r2, #2
   2309c:	f43f af72 	beq.w	22f84 <mgmt_thread+0x4>
	return &events[o_idx];
   230a0:	4e04      	ldr	r6, [pc, #16]	; (230b4 <mgmt_thread+0x134>)
   230a2:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   230a6:	e772      	b.n	22f8e <mgmt_thread+0xe>
   230a8:	20002064 	.word	0x20002064
   230ac:	20001fdc 	.word	0x20001fdc
   230b0:	2000d138 	.word	0x2000d138
   230b4:	20001fe4 	.word	0x20001fe4

000230b8 <net_mgmt_add_event_callback>:
	node->next = list->head;
   230b8:	4b07      	ldr	r3, [pc, #28]	; (230d8 <net_mgmt_add_event_callback+0x20>)
   230ba:	681a      	ldr	r2, [r3, #0]
   230bc:	6002      	str	r2, [r0, #0]
	list->head = node;
   230be:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   230c0:	685b      	ldr	r3, [r3, #4]
   230c2:	b12b      	cbz	r3, 230d0 <net_mgmt_add_event_callback+0x18>
{
	NET_DBG("Adding event callback %p", cb);

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);
   230c4:	6881      	ldr	r1, [r0, #8]
	global_event_mask |= event_mask;
   230c6:	4a05      	ldr	r2, [pc, #20]	; (230dc <net_mgmt_add_event_callback+0x24>)
   230c8:	6813      	ldr	r3, [r2, #0]
   230ca:	430b      	orrs	r3, r1
   230cc:	6013      	str	r3, [r2, #0]
   230ce:	4770      	bx	lr
		list->tail = list->head;
   230d0:	4b01      	ldr	r3, [pc, #4]	; (230d8 <net_mgmt_add_event_callback+0x20>)
   230d2:	6058      	str	r0, [r3, #4]
   230d4:	e7f6      	b.n	230c4 <net_mgmt_add_event_callback+0xc>
   230d6:	bf00      	nop
   230d8:	20001fdc 	.word	0x20001fdc
   230dc:	20001ff4 	.word	0x20001ff4

000230e0 <net_mgmt_event_notify_with_info>:
	return ((mgmt_event & global_event_mask) == mgmt_event);
   230e0:	4b17      	ldr	r3, [pc, #92]	; (23140 <net_mgmt_event_notify_with_info+0x60>)
   230e2:	681b      	ldr	r3, [r3, #0]
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
	if (mgmt_is_event_handled(mgmt_event)) {
   230e4:	ea30 0303 	bics.w	r3, r0, r3
   230e8:	d000      	beq.n	230ec <net_mgmt_event_notify_with_info+0xc>
   230ea:	4770      	bx	lr
{
   230ec:	b510      	push	{r4, lr}
	events[in_event].event = mgmt_event;
   230ee:	4c15      	ldr	r4, [pc, #84]	; (23144 <net_mgmt_event_notify_with_info+0x64>)
   230f0:	8823      	ldrh	r3, [r4, #0]
   230f2:	4a15      	ldr	r2, [pc, #84]	; (23148 <net_mgmt_event_notify_with_info+0x68>)
   230f4:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
	events[in_event].iface = iface;
   230f8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   230fc:	6051      	str	r1, [r2, #4]
	in_event++;
   230fe:	3301      	adds	r3, #1
   23100:	b29b      	uxth	r3, r3
   23102:	8023      	strh	r3, [r4, #0]
	if (in_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   23104:	2b02      	cmp	r3, #2
   23106:	d009      	beq.n	2311c <net_mgmt_event_notify_with_info+0x3c>
	if (in_event == out_event) {
   23108:	4b0e      	ldr	r3, [pc, #56]	; (23144 <net_mgmt_event_notify_with_info+0x64>)
   2310a:	881a      	ldrh	r2, [r3, #0]
   2310c:	4b0f      	ldr	r3, [pc, #60]	; (2314c <net_mgmt_event_notify_with_info+0x6c>)
   2310e:	881b      	ldrh	r3, [r3, #0]
   23110:	429a      	cmp	r2, r3
   23112:	d006      	beq.n	23122 <net_mgmt_event_notify_with_info+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   23114:	480e      	ldr	r0, [pc, #56]	; (23150 <net_mgmt_event_notify_with_info+0x70>)
   23116:	f006 f94c 	bl	293b2 <_impl_k_sem_give>
   2311a:	bd10      	pop	{r4, pc}
		in_event = 0;
   2311c:	2200      	movs	r2, #0
   2311e:	8022      	strh	r2, [r4, #0]
   23120:	e7f2      	b.n	23108 <net_mgmt_event_notify_with_info+0x28>
		u16_t o_idx = out_event + 1;
   23122:	3301      	adds	r3, #1
   23124:	b29b      	uxth	r3, r3
		if (o_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   23126:	2b02      	cmp	r3, #2
   23128:	d007      	beq.n	2313a <net_mgmt_event_notify_with_info+0x5a>
		if (events[o_idx].event) {
   2312a:	4a07      	ldr	r2, [pc, #28]	; (23148 <net_mgmt_event_notify_with_info+0x68>)
   2312c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   23130:	2a00      	cmp	r2, #0
   23132:	d0ef      	beq.n	23114 <net_mgmt_event_notify_with_info+0x34>
			out_event = o_idx;
   23134:	4a05      	ldr	r2, [pc, #20]	; (2314c <net_mgmt_event_notify_with_info+0x6c>)
   23136:	8013      	strh	r3, [r2, #0]
   23138:	e7ec      	b.n	23114 <net_mgmt_event_notify_with_info+0x34>
			o_idx = 0;
   2313a:	2300      	movs	r3, #0
   2313c:	e7f5      	b.n	2312a <net_mgmt_event_notify_with_info+0x4a>
   2313e:	bf00      	nop
   23140:	20001ff4 	.word	0x20001ff4
   23144:	20001ff8 	.word	0x20001ff8
   23148:	20001fe4 	.word	0x20001fe4
   2314c:	20002064 	.word	0x20002064
   23150:	2000d138 	.word	0x2000d138

00023154 <net_mgmt_event_init>:
	return mgmt_event_wait_call(iface, mgmt_event_mask,
				    raised_event, NULL, info, timeout);
}

void net_mgmt_event_init(void)
{
   23154:	b510      	push	{r4, lr}
   23156:	b086      	sub	sp, #24
	list->head = NULL;
   23158:	4b0f      	ldr	r3, [pc, #60]	; (23198 <net_mgmt_event_init+0x44>)
   2315a:	2400      	movs	r4, #0
   2315c:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   2315e:	605c      	str	r4, [r3, #4]
	sys_slist_init(&event_callbacks);
	global_event_mask = 0;
   23160:	4b0e      	ldr	r3, [pc, #56]	; (2319c <net_mgmt_event_init+0x48>)
   23162:	601c      	str	r4, [r3, #0]

	in_event = 0;
   23164:	4b0e      	ldr	r3, [pc, #56]	; (231a0 <net_mgmt_event_init+0x4c>)
   23166:	801c      	strh	r4, [r3, #0]
	out_event = 0;
   23168:	4b0e      	ldr	r3, [pc, #56]	; (231a4 <net_mgmt_event_init+0x50>)
   2316a:	801c      	strh	r4, [r3, #0]

	memset(events, 0,
   2316c:	2210      	movs	r2, #16
   2316e:	4621      	mov	r1, r4
   23170:	480d      	ldr	r0, [pc, #52]	; (231a8 <net_mgmt_event_init+0x54>)
   23172:	f007 fbd1 	bl	2a918 <memset>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   23176:	9405      	str	r4, [sp, #20]
   23178:	9404      	str	r4, [sp, #16]
   2317a:	f06f 0308 	mvn.w	r3, #8
   2317e:	9303      	str	r3, [sp, #12]
   23180:	9402      	str	r4, [sp, #8]
   23182:	9401      	str	r4, [sp, #4]
   23184:	9400      	str	r4, [sp, #0]
   23186:	4b09      	ldr	r3, [pc, #36]	; (231ac <net_mgmt_event_init+0x58>)
   23188:	f44f 7200 	mov.w	r2, #512	; 0x200
   2318c:	4908      	ldr	r1, [pc, #32]	; (231b0 <net_mgmt_event_init+0x5c>)
   2318e:	4809      	ldr	r0, [pc, #36]	; (231b4 <net_mgmt_event_init+0x60>)
   23190:	f006 fb8e 	bl	298b0 <_impl_k_thread_create>
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   23194:	b006      	add	sp, #24
   23196:	bd10      	pop	{r4, pc}
   23198:	20001fdc 	.word	0x20001fdc
   2319c:	20001ff4 	.word	0x20001ff4
   231a0:	20001ff8 	.word	0x20001ff8
   231a4:	20002064 	.word	0x20002064
   231a8:	20001fe4 	.word	0x20001fe4
   231ac:	00022f81 	.word	0x00022f81
   231b0:	200099c8 	.word	0x200099c8
   231b4:	20001ffc 	.word	0x20001ffc

000231b8 <net_udp_insert_raw>:

struct net_pkt *net_udp_insert_raw(struct net_pkt *pkt,
				   u16_t offset,
				   u16_t src_port,
				   u16_t dst_port)
{
   231b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   231ba:	b085      	sub	sp, #20
   231bc:	4605      	mov	r5, r0
   231be:	f8ad 2006 	strh.w	r2, [sp, #6]
   231c2:	f8ad 3004 	strh.w	r3, [sp, #4]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   231c6:	f10d 020e 	add.w	r2, sp, #14
   231ca:	f7fa fde5 	bl	1dd98 <net_frag_get_pos>
	if (!frag && pos == 0xffff) {
   231ce:	4602      	mov	r2, r0
   231d0:	b168      	cbz	r0, 231ee <net_udp_insert_raw+0x36>
	}

	/* We can only insert the UDP header between existing two
	 * fragments.
	 */
	if (frag && pos != 0) {
   231d2:	b11a      	cbz	r2, 231dc <net_udp_insert_raw+0x24>
   231d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   231d8:	2b00      	cmp	r3, #0
   231da:	d15c      	bne.n	23296 <net_udp_insert_raw+0xde>
		NET_DBG("Cannot insert UDP data into offset %d", offset);
		return NULL;
	}

	if (pkt->frags != frag) {
   231dc:	68ab      	ldr	r3, [r5, #8]
   231de:	429a      	cmp	r2, r3
   231e0:	d00d      	beq.n	231fe <net_udp_insert_raw+0x46>
		struct net_buf *tmp = pkt->frags;

		prev = NULL;

		while (tmp->frags) {
   231e2:	681c      	ldr	r4, [r3, #0]
   231e4:	b174      	cbz	r4, 23204 <net_udp_insert_raw+0x4c>
			if (tmp->frags == frag) {
   231e6:	42a2      	cmp	r2, r4
   231e8:	d00b      	beq.n	23202 <net_udp_insert_raw+0x4a>
				prev = tmp;
				break;
			}

			tmp = tmp->frags;
   231ea:	4623      	mov	r3, r4
   231ec:	e7f9      	b.n	231e2 <net_udp_insert_raw+0x2a>
	if (!frag && pos == 0xffff) {
   231ee:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   231f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   231f6:	4299      	cmp	r1, r3
   231f8:	d1eb      	bne.n	231d2 <net_udp_insert_raw+0x1a>
		return NULL;
   231fa:	2000      	movs	r0, #0
   231fc:	e049      	b.n	23292 <net_udp_insert_raw+0xda>
		}
	} else {
		prev = pkt->frags;
   231fe:	461c      	mov	r4, r3
   23200:	e000      	b.n	23204 <net_udp_insert_raw+0x4c>
				prev = tmp;
   23202:	461c      	mov	r4, r3
	}

	if (!prev) {
   23204:	2c00      	cmp	r4, #0
   23206:	d048      	beq.n	2329a <net_udp_insert_raw+0xe2>
		goto fail;
	}

	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   23208:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2320c:	4628      	mov	r0, r5
   2320e:	f7fa faa1 	bl	1d754 <net_pkt_get_frag>
	if (!udp) {
   23212:	4607      	mov	r7, r0
   23214:	2800      	cmp	r0, #0
   23216:	d042      	beq.n	2329e <net_udp_insert_raw+0xe6>
		goto fail;
	}

	/* Source and destination ports are already in network byte order */
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   23218:	f100 0608 	add.w	r6, r0, #8
   2321c:	2202      	movs	r2, #2
   2321e:	f10d 0106 	add.w	r1, sp, #6
   23222:	4630      	mov	r0, r6
   23224:	f7f7 fdcc 	bl	1adc0 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   23228:	2202      	movs	r2, #2
   2322a:	a901      	add	r1, sp, #4
   2322c:	4630      	mov	r0, r6
   2322e:	f7f7 fdc7 	bl	1adc0 <net_buf_simple_add_mem>
	return net_buf_frags_len(pkt->frags);
   23232:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   23234:	2200      	movs	r2, #0
   23236:	e002      	b.n	2323e <net_udp_insert_raw+0x86>
		bytes += buf->len;
   23238:	8999      	ldrh	r1, [r3, #12]
   2323a:	440a      	add	r2, r1
		buf = buf->frags;
   2323c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2323e:	2b00      	cmp	r3, #0
   23240:	d1fa      	bne.n	23238 <net_udp_insert_raw+0x80>

	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   23242:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   23246:	1a51      	subs	r1, r2, r1
   23248:	b289      	uxth	r1, r1
   2324a:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
   2324e:	1a89      	subs	r1, r1, r2
   23250:	b289      	uxth	r1, r1
   23252:	3108      	adds	r1, #8
   23254:	b289      	uxth	r1, r1
   23256:	4630      	mov	r0, r6
   23258:	f7f7 fdd2 	bl	1ae00 <net_buf_simple_add_be16>
			 net_pkt_ip_hdr_len(pkt) -
			 net_pkt_ipv6_ext_len(pkt) +
			 sizeof(struct net_udp_hdr));

	net_buf_add_be16(udp, 0); /* chksum */
   2325c:	2100      	movs	r1, #0
   2325e:	4630      	mov	r0, r6
   23260:	f7f7 fdce 	bl	1ae00 <net_buf_simple_add_be16>

	net_buf_frag_insert(prev, udp);
   23264:	4639      	mov	r1, r7
   23266:	4620      	mov	r0, r4
   23268:	f7f7 fd7e 	bl	1ad68 <net_buf_frag_insert>

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   2326c:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   23270:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   23274:	4419      	add	r1, r3
   23276:	3108      	adds	r1, #8
   23278:	f10d 020e 	add.w	r2, sp, #14
   2327c:	b289      	uxth	r1, r1
   2327e:	4628      	mov	r0, r5
   23280:	f7fa fd8a 	bl	1dd98 <net_frag_get_pos>
				sizeof(struct net_udp_hdr),
				&pos);
	if (frag) {
   23284:	b168      	cbz	r0, 232a2 <net_udp_insert_raw+0xea>
		net_pkt_set_appdata(pkt, frag->data + pos);
   23286:	6883      	ldr	r3, [r0, #8]
   23288:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2328c:	4413      	add	r3, r2
	pkt->appdata = data;
   2328e:	61ab      	str	r3, [r5, #24]
	}

	return pkt;
   23290:	4628      	mov	r0, r5

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   23292:	b005      	add	sp, #20
   23294:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   23296:	2000      	movs	r0, #0
   23298:	e7fb      	b.n	23292 <net_udp_insert_raw+0xda>
	return NULL;
   2329a:	2000      	movs	r0, #0
   2329c:	e7f9      	b.n	23292 <net_udp_insert_raw+0xda>
   2329e:	2000      	movs	r0, #0
   232a0:	e7f7      	b.n	23292 <net_udp_insert_raw+0xda>
	return pkt;
   232a2:	4628      	mov	r0, r5
   232a4:	e7f5      	b.n	23292 <net_udp_insert_raw+0xda>

000232a6 <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   232a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   232aa:	b086      	sub	sp, #24
   232ac:	4606      	mov	r6, r0
   232ae:	460d      	mov	r5, r1
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   232b0:	2300      	movs	r3, #0
   232b2:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   232b6:	f7fa fda5 	bl	1de04 <net_pkt_udp_data>
   232ba:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   232bc:	2208      	movs	r2, #8
   232be:	4601      	mov	r1, r0
   232c0:	4630      	mov	r0, r6
   232c2:	f7fb f95d 	bl	1e580 <net_header_fits>
   232c6:	b170      	cbz	r0, 232e6 <net_udp_set_chksum+0x40>
		return hdr;
   232c8:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   232ca:	b173      	cbz	r3, 232ea <net_udp_set_chksum+0x44>
		hdr->chksum = 0;
   232cc:	2300      	movs	r3, #0
   232ce:	71a3      	strb	r3, [r4, #6]
   232d0:	71e3      	strb	r3, [r4, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   232d2:	2111      	movs	r1, #17
   232d4:	4630      	mov	r0, r6
   232d6:	f7fb f8fa 	bl	1e4ce <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   232da:	43c0      	mvns	r0, r0
   232dc:	80e0      	strh	r0, [r4, #6]

		return frag;
   232de:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   232e0:	b006      	add	sp, #24
   232e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   232e6:	2300      	movs	r3, #0
   232e8:	e7ef      	b.n	232ca <net_udp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   232ea:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   232ee:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   232f2:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   232f4:	3206      	adds	r2, #6
   232f6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   232fa:	f8cd 8008 	str.w	r8, [sp, #8]
   232fe:	f10d 0416 	add.w	r4, sp, #22
   23302:	9401      	str	r4, [sp, #4]
   23304:	2702      	movs	r7, #2
   23306:	9700      	str	r7, [sp, #0]
   23308:	ab05      	add	r3, sp, #20
   2330a:	b292      	uxth	r2, r2
   2330c:	4629      	mov	r1, r5
   2330e:	4630      	mov	r0, r6
   23310:	f7fa fc63 	bl	1dbda <net_pkt_write>
   23314:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_UDP);
   23316:	2111      	movs	r1, #17
   23318:	4630      	mov	r0, r6
   2331a:	f7fb f8d8 	bl	1e4ce <net_calc_chksum>
	chksum = ~net_calc_chksum_udp(pkt);
   2331e:	43c0      	mvns	r0, r0
   23320:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   23324:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   23328:	3a02      	subs	r2, #2
   2332a:	f8cd 8008 	str.w	r8, [sp, #8]
   2332e:	9401      	str	r4, [sp, #4]
   23330:	9700      	str	r7, [sp, #0]
   23332:	ab05      	add	r3, sp, #20
   23334:	b292      	uxth	r2, r2
   23336:	4629      	mov	r1, r5
   23338:	4630      	mov	r0, r6
   2333a:	f7fa fc4e 	bl	1dbda <net_pkt_write>
	return frag;
   2333e:	e7cf      	b.n	232e0 <net_udp_set_chksum+0x3a>

00023340 <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23340:	b570      	push	{r4, r5, r6, lr}
   23342:	b084      	sub	sp, #16
   23344:	4605      	mov	r5, r0
   23346:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   23348:	f7fa fd5c 	bl	1de04 <net_pkt_udp_data>
   2334c:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2334e:	2208      	movs	r2, #8
   23350:	4601      	mov	r1, r0
   23352:	4628      	mov	r0, r5
   23354:	f7fb f914 	bl	1e580 <net_header_fits>
   23358:	b120      	cbz	r0, 23364 <net_udp_get_chksum+0x24>
		return hdr;
   2335a:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   2335c:	b123      	cbz	r3, 23368 <net_udp_get_chksum+0x28>
		return hdr->chksum;
   2335e:	88e0      	ldrh	r0, [r4, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   23360:	b004      	add	sp, #16
   23362:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   23364:	2300      	movs	r3, #0
   23366:	e7f9      	b.n	2335c <net_udp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   23368:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   2336c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23370:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   23372:	3106      	adds	r1, #6
   23374:	f10d 030e 	add.w	r3, sp, #14
   23378:	9300      	str	r3, [sp, #0]
   2337a:	2302      	movs	r3, #2
   2337c:	aa03      	add	r2, sp, #12
   2337e:	b289      	uxth	r1, r1
   23380:	4630      	mov	r0, r6
   23382:	f7fa fbb8 	bl	1daf6 <net_frag_read>
	return chksum;
   23386:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2338a:	e7e9      	b.n	23360 <net_udp_get_chksum+0x20>

0002338c <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   2338c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2338e:	b085      	sub	sp, #20
   23390:	4605      	mov	r5, r0
   23392:	460f      	mov	r7, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   23394:	f7fa fd36 	bl	1de04 <net_pkt_udp_data>
   23398:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2339a:	2208      	movs	r2, #8
   2339c:	4601      	mov	r1, r0
   2339e:	4628      	mov	r0, r5
   233a0:	f7fb f8ee 	bl	1e580 <net_header_fits>
   233a4:	b120      	cbz	r0, 233b0 <net_udp_get_hdr+0x24>
		return hdr;
   233a6:	4626      	mov	r6, r4
	if (net_udp_header_fits(pkt, udp_hdr)) {
   233a8:	b126      	cbz	r6, 233b4 <net_udp_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   233aa:	4620      	mov	r0, r4
   233ac:	b005      	add	sp, #20
   233ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   233b0:	2600      	movs	r6, #0
   233b2:	e7f9      	b.n	233a8 <net_udp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   233b4:	68a8      	ldr	r0, [r5, #8]
   233b6:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   233ba:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   233be:	9700      	str	r7, [sp, #0]
   233c0:	2302      	movs	r3, #2
   233c2:	f10d 020e 	add.w	r2, sp, #14
   233c6:	4421      	add	r1, r4
   233c8:	f7fa fb95 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   233cc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   233d0:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   233d2:	9300      	str	r3, [sp, #0]
   233d4:	2302      	movs	r3, #2
   233d6:	f10d 020e 	add.w	r2, sp, #14
   233da:	f7fa fb8c 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   233de:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->len);
   233e2:	1d3b      	adds	r3, r7, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   233e4:	9300      	str	r3, [sp, #0]
   233e6:	2302      	movs	r3, #2
   233e8:	f10d 020e 	add.w	r2, sp, #14
   233ec:	f7fa fb83 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   233f0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   233f4:	1dbb      	adds	r3, r7, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   233f6:	9300      	str	r3, [sp, #0]
   233f8:	2302      	movs	r3, #2
   233fa:	f10d 020e 	add.w	r2, sp, #14
   233fe:	f7fa fb7a 	bl	1daf6 <net_frag_read>
	if (!frag) {
   23402:	b108      	cbz	r0, 23408 <net_udp_get_hdr+0x7c>
	return hdr;
   23404:	463c      	mov	r4, r7
   23406:	e7d0      	b.n	233aa <net_udp_get_hdr+0x1e>
		return NULL;
   23408:	4634      	mov	r4, r6
   2340a:	e7ce      	b.n	233aa <net_udp_get_hdr+0x1e>

0002340c <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   2340c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23410:	b086      	sub	sp, #24
   23412:	4606      	mov	r6, r0
   23414:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23416:	2208      	movs	r2, #8
   23418:	f7fb f8b2 	bl	1e580 <net_header_fits>
   2341c:	b128      	cbz	r0, 2342a <net_udp_set_hdr+0x1e>
		return hdr;
   2341e:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   23420:	b12d      	cbz	r5, 2342e <net_udp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   23422:	4620      	mov	r0, r4
   23424:	b006      	add	sp, #24
   23426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   2342a:	2500      	movs	r5, #0
   2342c:	e7f8      	b.n	23420 <net_udp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2342e:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23432:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23436:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   2343a:	f8cd 8008 	str.w	r8, [sp, #8]
   2343e:	9401      	str	r4, [sp, #4]
   23440:	2702      	movs	r7, #2
   23442:	9700      	str	r7, [sp, #0]
   23444:	f10d 0316 	add.w	r3, sp, #22
   23448:	440a      	add	r2, r1
   2344a:	68b1      	ldr	r1, [r6, #8]
   2344c:	4630      	mov	r0, r6
   2344e:	f7fa fbc4 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23452:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   23456:	19e3      	adds	r3, r4, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23458:	f8cd 8008 	str.w	r8, [sp, #8]
   2345c:	9301      	str	r3, [sp, #4]
   2345e:	9700      	str	r7, [sp, #0]
   23460:	f10d 0316 	add.w	r3, sp, #22
   23464:	4601      	mov	r1, r0
   23466:	4630      	mov	r0, r6
   23468:	f7fa fbb7 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   2346c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   23470:	1d23      	adds	r3, r4, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   23472:	f8cd 8008 	str.w	r8, [sp, #8]
   23476:	9301      	str	r3, [sp, #4]
   23478:	9700      	str	r7, [sp, #0]
   2347a:	f10d 0316 	add.w	r3, sp, #22
   2347e:	4601      	mov	r1, r0
   23480:	4630      	mov	r0, r6
   23482:	f7fa fbaa 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23486:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   2348a:	1da3      	adds	r3, r4, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   2348c:	f8cd 8008 	str.w	r8, [sp, #8]
   23490:	9301      	str	r3, [sp, #4]
   23492:	9700      	str	r7, [sp, #0]
   23494:	f10d 0316 	add.w	r3, sp, #22
   23498:	4601      	mov	r1, r0
   2349a:	4630      	mov	r0, r6
   2349c:	f7fa fb9d 	bl	1dbda <net_pkt_write>
	if (!frag) {
   234a0:	2800      	cmp	r0, #0
   234a2:	d1be      	bne.n	23422 <net_udp_set_hdr+0x16>
		return NULL;
   234a4:	462c      	mov	r4, r5
   234a6:	e7bc      	b.n	23422 <net_udp_set_hdr+0x16>

000234a8 <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_context *context,
			       struct net_pkt *pkt,
			       u16_t offset,
			       u16_t port)
{
   234a8:	b510      	push	{r4, lr}
   234aa:	460c      	mov	r4, r1
   234ac:	4611      	mov	r1, r2
	return net_udp_insert_raw(pkt,
   234ae:	8942      	ldrh	r2, [r0, #10]
   234b0:	4620      	mov	r0, r4
   234b2:	f7ff fe81 	bl	231b8 <net_udp_insert_raw>
				  offset,
				  net_sin((struct sockaddr *)
					  &context->local)->sin_port,
				  port);
}
   234b6:	bd10      	pop	{r4, pc}

000234b8 <net_udp_init>:
{
	return net_conn_unregister(handle);
}

void net_udp_init(void)
{
   234b8:	4770      	bx	lr

000234ba <abort_connection>:
			pkt = net_pkt_ref(pkt);				\
		}							\
	} while (0)

static void abort_connection(struct net_tcp *tcp)
{
   234ba:	b538      	push	{r3, r4, r5, lr}
	struct net_context *ctx = tcp->context;
   234bc:	6804      	ldr	r4, [r0, #0]

	NET_DBG("[%p] segment retransmission exceeds %d, resetting context %p",
		tcp, CONFIG_NET_TCP_RETRY_COUNT, ctx);

	if (ctx->recv_cb) {
   234be:	6b25      	ldr	r5, [r4, #48]	; 0x30
   234c0:	b12d      	cbz	r5, 234ce <abort_connection+0x14>
		ctx->recv_cb(ctx, NULL, -ECONNRESET, tcp->recv_user_data);
   234c2:	6843      	ldr	r3, [r0, #4]
   234c4:	f06f 0267 	mvn.w	r2, #103	; 0x67
   234c8:	2100      	movs	r1, #0
   234ca:	4620      	mov	r0, r4
   234cc:	47a8      	blx	r5
	}

	net_context_unref(ctx);
   234ce:	4620      	mov	r0, r4
   234d0:	f7f9 fba8 	bl	1cc24 <net_context_unref>
   234d4:	bd38      	pop	{r3, r4, r5, pc}

000234d6 <restart_timer>:

	return net_send_data(pkt);
}

static void restart_timer(struct net_tcp *tcp)
{
   234d6:	b510      	push	{r4, lr}
   234d8:	4604      	mov	r4, r0
	return (!list->head);
   234da:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   234de:	b17b      	cbz	r3, 23500 <restart_timer+0x2a>
		tcp->flags |= NET_TCP_RETRYING;
   234e0:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   234e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   234e8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		tcp->retry_timeout_shift = 0;
   234ec:	f36f 0304 	bfc	r3, #0, #5
   234f0:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   234f4:	2200      	movs	r2, #0
   234f6:	21c8      	movs	r1, #200	; 0xc8
   234f8:	3058      	adds	r0, #88	; 0x58
   234fa:	f006 fb63 	bl	29bc4 <_impl_k_timer_start>
   234fe:	bd10      	pop	{r4, pc}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   23500:	3058      	adds	r0, #88	; 0x58
   23502:	f006 fc17 	bl	29d34 <_impl_k_timer_stop>
			k_timer_start(&tcp->retry_timer, TIME_WAIT_MS, 0);
			net_context_ref(tcp->context);
		}
	} else {
		k_timer_stop(&tcp->retry_timer);
		tcp->flags &= ~NET_TCP_RETRYING;
   23506:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   2350a:	f3c3 1247 	ubfx	r2, r3, #5, #8
   2350e:	f022 0210 	bic.w	r2, r2, #16
   23512:	f362 134c 	bfi	r3, r2, #5, #8
   23516:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
   2351a:	bd10      	pop	{r4, pc}

0002351c <ack_timer_cancel>:
{
   2351c:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->ack_timer);
   2351e:	3008      	adds	r0, #8
   23520:	f006 fd36 	bl	29f90 <k_delayed_work_cancel>
   23524:	bd08      	pop	{r3, pc}

00023526 <fin_timer_cancel>:
{
   23526:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->fin_timer);
   23528:	3030      	adds	r0, #48	; 0x30
   2352a:	f006 fd31 	bl	29f90 <k_delayed_work_cancel>
   2352e:	bd08      	pop	{r3, pc}

00023530 <finalize_segment>:
{
   23530:	b508      	push	{r3, lr}
	return pkt->family;
   23532:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   23536:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   2353a:	2b0a      	cmp	r3, #10
   2353c:	d001      	beq.n	23542 <finalize_segment+0x12>
	return 0;
   2353e:	2000      	movs	r0, #0
}
   23540:	bd08      	pop	{r3, pc}
		return net_ipv6_finalize(context, pkt);
   23542:	f7fc fe17 	bl	20174 <net_ipv6_finalize>
   23546:	bd08      	pop	{r3, pc}

00023548 <prepare_segment>:
{
   23548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2354c:	b085      	sub	sp, #20
   2354e:	4606      	mov	r6, r0
   23550:	460d      	mov	r5, r1
	struct net_context *context = tcp->context;
   23552:	6807      	ldr	r7, [r0, #0]
	if (pkt) {
   23554:	b192      	cbz	r2, 2357c <prepare_segment+0x34>
   23556:	4614      	mov	r4, r2
		tail = pkt->frags;
   23558:	f8d2 8008 	ldr.w	r8, [r2, #8]
		pkt->frags = NULL;
   2355c:	2300      	movs	r3, #0
   2355e:	6093      	str	r3, [r2, #8]
		pkt_allocated = false;
   23560:	469a      	mov	sl, r3
   23562:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23566:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   2356a:	2b0a      	cmp	r3, #10
   2356c:	d013      	beq.n	23596 <prepare_segment+0x4e>
		if (pkt_allocated) {
   2356e:	f1ba 0f00 	cmp.w	sl, #0
   23572:	d174      	bne.n	2365e <prepare_segment+0x116>
		return NULL;
   23574:	2000      	movs	r0, #0
}
   23576:	b005      	add	sp, #20
   23578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = net_pkt_get_tx(context, ALLOC_TIMEOUT);
   2357c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   23580:	4638      	mov	r0, r7
   23582:	f7fa f907 	bl	1d794 <net_pkt_get_tx>
		if (!pkt) {
   23586:	4604      	mov	r4, r0
   23588:	2800      	cmp	r0, #0
   2358a:	d0f4      	beq.n	23576 <prepare_segment+0x2e>
		pkt_allocated = true;
   2358c:	f04f 0a01 	mov.w	sl, #1
	struct net_buf *header, *tail = NULL;
   23590:	f04f 0800 	mov.w	r8, #0
   23594:	e7e5      	b.n	23562 <prepare_segment+0x1a>
				net_sin6_ptr(segment->src_addr)->sin6_addr,
   23596:	692a      	ldr	r2, [r5, #16]
				&(net_sin6(segment->dst_addr)->sin6_addr));
   23598:	696b      	ldr	r3, [r5, #20]
		net_ipv6_create(tcp->context, pkt,
   2359a:	3304      	adds	r3, #4
   2359c:	6852      	ldr	r2, [r2, #4]
   2359e:	4621      	mov	r1, r4
   235a0:	6830      	ldr	r0, [r6, #0]
   235a2:	f7fc fb8b 	bl	1fcbc <net_ipv6_create>
		dst_port = net_sin6(segment->dst_addr)->sin6_port;
   235a6:	696b      	ldr	r3, [r5, #20]
   235a8:	f8b3 b002 	ldrh.w	fp, [r3, #2]
		src_port = ((struct sockaddr_in6_ptr *)&context->local)->
   235ac:	897b      	ldrh	r3, [r7, #10]
   235ae:	9302      	str	r3, [sp, #8]
	return pkt->frags->data;
   235b0:	68a3      	ldr	r3, [r4, #8]
   235b2:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_TCP;
   235b4:	2206      	movs	r2, #6
   235b6:	719a      	strb	r2, [r3, #6]
	header = net_pkt_get_data(context, ALLOC_TIMEOUT);
   235b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   235bc:	4638      	mov	r0, r7
   235be:	f7fa f8fb 	bl	1d7b8 <net_pkt_get_data>
	if (!header) {
   235c2:	9001      	str	r0, [sp, #4]
   235c4:	2800      	cmp	r0, #0
   235c6:	d04f      	beq.n	23668 <prepare_segment+0x120>
	net_pkt_frag_add(pkt, header);
   235c8:	9e01      	ldr	r6, [sp, #4]
   235ca:	4631      	mov	r1, r6
   235cc:	4620      	mov	r0, r4
   235ce:	f7fa f93e 	bl	1d84e <net_pkt_frag_add>
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   235d2:	2114      	movs	r1, #20
   235d4:	f106 0008 	add.w	r0, r6, #8
   235d8:	f7f7 fbec 	bl	1adb4 <net_buf_simple_add>
   235dc:	4606      	mov	r6, r0
	if (segment->options && segment->optlen) {
   235de:	68eb      	ldr	r3, [r5, #12]
   235e0:	9303      	str	r3, [sp, #12]
   235e2:	2b00      	cmp	r3, #0
   235e4:	d05d      	beq.n	236a2 <prepare_segment+0x15a>
   235e6:	f895 900b 	ldrb.w	r9, [r5, #11]
   235ea:	f1b9 0f00 	cmp.w	r9, #0
   235ee:	d145      	bne.n	2367c <prepare_segment+0x134>
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   235f0:	f109 0914 	add.w	r9, r9, #20
   235f4:	fa5f f989 	uxtb.w	r9, r9
   235f8:	ea4f 0989 	mov.w	r9, r9, lsl #2
   235fc:	f886 900c 	strb.w	r9, [r6, #12]
	tcp_hdr->src_port = src_port;
   23600:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   23604:	8033      	strh	r3, [r6, #0]
	tcp_hdr->dst_port = dst_port;
   23606:	f8a6 b002 	strh.w	fp, [r6, #2]
	sys_put_be32(segment->seq, tcp_hdr->seq);
   2360a:	682b      	ldr	r3, [r5, #0]
	sys_put_be16(val >> 16, dst);
   2360c:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   2360e:	0a11      	lsrs	r1, r2, #8
   23610:	7131      	strb	r1, [r6, #4]
	dst[1] = val;
   23612:	7172      	strb	r2, [r6, #5]
	dst[0] = val >> 8;
   23614:	f3c3 2207 	ubfx	r2, r3, #8, #8
   23618:	71b2      	strb	r2, [r6, #6]
	dst[1] = val;
   2361a:	71f3      	strb	r3, [r6, #7]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   2361c:	686b      	ldr	r3, [r5, #4]
	sys_put_be16(val >> 16, dst);
   2361e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   23620:	0a11      	lsrs	r1, r2, #8
   23622:	7231      	strb	r1, [r6, #8]
	dst[1] = val;
   23624:	7272      	strb	r2, [r6, #9]
	dst[0] = val >> 8;
   23626:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2362a:	72b2      	strb	r2, [r6, #10]
	dst[1] = val;
   2362c:	72f3      	strb	r3, [r6, #11]
	tcp_hdr->flags = segment->flags;
   2362e:	7aab      	ldrb	r3, [r5, #10]
   23630:	7373      	strb	r3, [r6, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   23632:	892b      	ldrh	r3, [r5, #8]
	dst[0] = val >> 8;
   23634:	0a1a      	lsrs	r2, r3, #8
   23636:	73b2      	strb	r2, [r6, #14]
	dst[1] = val;
   23638:	73f3      	strb	r3, [r6, #15]
	tcp_hdr->urg[0] = 0;
   2363a:	2300      	movs	r3, #0
   2363c:	74b3      	strb	r3, [r6, #18]
	tcp_hdr->urg[1] = 0;
   2363e:	74f3      	strb	r3, [r6, #19]
	if (tail) {
   23640:	f1b8 0f00 	cmp.w	r8, #0
   23644:	d003      	beq.n	2364e <prepare_segment+0x106>
		net_pkt_frag_add(pkt, tail);
   23646:	4641      	mov	r1, r8
   23648:	4620      	mov	r0, r4
   2364a:	f7fa f900 	bl	1d84e <net_pkt_frag_add>
	if (finalize_segment(context, pkt) < 0) {
   2364e:	4621      	mov	r1, r4
   23650:	4638      	mov	r0, r7
   23652:	f7ff ff6d 	bl	23530 <finalize_segment>
   23656:	2800      	cmp	r0, #0
   23658:	db26      	blt.n	236a8 <prepare_segment+0x160>
	return pkt;
   2365a:	4620      	mov	r0, r4
   2365c:	e78b      	b.n	23576 <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   2365e:	4620      	mov	r0, r4
   23660:	f7fa f8cb 	bl	1d7fa <net_pkt_unref>
		return NULL;
   23664:	2000      	movs	r0, #0
   23666:	e786      	b.n	23576 <prepare_segment+0x2e>
		if (pkt_allocated) {
   23668:	f1ba 0f00 	cmp.w	sl, #0
   2366c:	d101      	bne.n	23672 <prepare_segment+0x12a>
		return NULL;
   2366e:	2000      	movs	r0, #0
   23670:	e781      	b.n	23576 <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   23672:	4620      	mov	r0, r4
   23674:	f7fa f8c1 	bl	1d7fa <net_pkt_unref>
		return NULL;
   23678:	2000      	movs	r0, #0
   2367a:	e77c      	b.n	23576 <prepare_segment+0x2e>
	memcpy(net_buf_add(header, len), data, len);
   2367c:	4649      	mov	r1, r9
   2367e:	9801      	ldr	r0, [sp, #4]
   23680:	3008      	adds	r0, #8
   23682:	f7f7 fb97 	bl	1adb4 <net_buf_simple_add>
   23686:	464a      	mov	r2, r9
   23688:	9903      	ldr	r1, [sp, #12]
   2368a:	f7dc fe19 	bl	2c0 <memcpy>
	if ((len & 0x3u) != 0u) {
   2368e:	f019 0f03 	tst.w	r9, #3
   23692:	d0ad      	beq.n	235f0 <prepare_segment+0xa8>
		optlen = (len & 0xfffCu) + 4u;
   23694:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
   23698:	f109 0904 	add.w	r9, r9, #4
   2369c:	fa5f f989 	uxtb.w	r9, r9
   236a0:	e7a6      	b.n	235f0 <prepare_segment+0xa8>
	u8_t optlen = 0;
   236a2:	f04f 0900 	mov.w	r9, #0
   236a6:	e7a3      	b.n	235f0 <prepare_segment+0xa8>
		if (pkt_allocated) {
   236a8:	f1ba 0f00 	cmp.w	sl, #0
   236ac:	d101      	bne.n	236b2 <prepare_segment+0x16a>
		return NULL;
   236ae:	2000      	movs	r0, #0
   236b0:	e761      	b.n	23576 <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   236b2:	4620      	mov	r0, r4
   236b4:	f7fa f8a1 	bl	1d7fa <net_pkt_unref>
		return NULL;
   236b8:	2000      	movs	r0, #0
   236ba:	e75c      	b.n	23576 <prepare_segment+0x2e>

000236bc <net_tcp_alloc>:
{
   236bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   236be:	f04f 0320 	mov.w	r3, #32
   236c2:	f3ef 8411 	mrs	r4, BASEPRI
   236c6:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   236ca:	2300      	movs	r3, #0
   236cc:	2b05      	cmp	r3, #5
   236ce:	dc18      	bgt.n	23702 <net_tcp_alloc+0x46>
	return tcp->flags & NET_TCP_IN_USE;
   236d0:	22c8      	movs	r2, #200	; 0xc8
   236d2:	492b      	ldr	r1, [pc, #172]	; (23780 <net_tcp_alloc+0xc4>)
   236d4:	fb02 1203 	mla	r2, r2, r3, r1
   236d8:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
   236dc:	f3c2 1247 	ubfx	r2, r2, #5, #8
		if (!net_tcp_is_used(&tcp_context[i])) {
   236e0:	f012 0f01 	tst.w	r2, #1
   236e4:	d001      	beq.n	236ea <net_tcp_alloc+0x2e>
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   236e6:	3301      	adds	r3, #1
   236e8:	e7f0      	b.n	236cc <net_tcp_alloc+0x10>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   236ea:	21c8      	movs	r1, #200	; 0xc8
   236ec:	4d24      	ldr	r5, [pc, #144]	; (23780 <net_tcp_alloc+0xc4>)
   236ee:	fb01 5103 	mla	r1, r1, r3, r5
   236f2:	f042 0201 	orr.w	r2, r2, #1
   236f6:	f8b1 50a4 	ldrh.w	r5, [r1, #164]	; 0xa4
   236fa:	f362 154c 	bfi	r5, r2, #5, #8
   236fe:	f8a1 50a4 	strh.w	r5, [r1, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   23702:	f384 8811 	msr	BASEPRI, r4
	if (i >= NET_MAX_TCP_CONTEXT) {
   23706:	2b05      	cmp	r3, #5
   23708:	dc37      	bgt.n	2377a <net_tcp_alloc+0xbe>
   2370a:	4607      	mov	r7, r0
	memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   2370c:	4e1c      	ldr	r6, [pc, #112]	; (23780 <net_tcp_alloc+0xc4>)
   2370e:	22c8      	movs	r2, #200	; 0xc8
   23710:	fb02 f403 	mul.w	r4, r2, r3
   23714:	1935      	adds	r5, r6, r4
   23716:	2100      	movs	r1, #0
   23718:	4628      	mov	r0, r5
   2371a:	f007 f8fd 	bl	2a918 <memset>
	tcp_context[i].flags = NET_TCP_IN_USE;
   2371e:	f8b5 20a4 	ldrh.w	r2, [r5, #164]	; 0xa4
   23722:	2101      	movs	r1, #1
   23724:	f361 124c 	bfi	r2, r1, #5, #8
   23728:	f8a5 20a4 	strh.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].state = NET_TCP_CLOSED;
   2372c:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   23730:	f36f 3250 	bfc	r2, #13, #4
   23734:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].context = context;
   23738:	5137      	str	r7, [r6, r4]
	return sys_rand32_get();
   2373a:	f7de fca3 	bl	2084 <sys_rand32_get>
	tcp_context[i].send_seq = tcp_init_isn();
   2373e:	f8c5 0098 	str.w	r0, [r5, #152]	; 0x98
	tcp_context[i].recv_max_ack = tcp_context[i].send_seq + 1u;
   23742:	3001      	adds	r0, #1
   23744:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   23748:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   2374c:	f8a5 30c4 	strh.w	r3, [r5, #196]	; 0xc4
	tcp_context[i].accept_cb = NULL;
   23750:	2700      	movs	r7, #0
   23752:	f8c5 70a8 	str.w	r7, [r5, #168]	; 0xa8
	k_timer_init(&tcp_context[i].retry_timer, tcp_retry_expired, NULL);
   23756:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2375a:	463a      	mov	r2, r7
   2375c:	4909      	ldr	r1, [pc, #36]	; (23784 <net_tcp_alloc+0xc8>)
   2375e:	4430      	add	r0, r6
   23760:	f006 fa1c 	bl	29b9c <k_timer_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   23764:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   23768:	18f0      	adds	r0, r6, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   2376a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2376e:	4639      	mov	r1, r7
   23770:	3004      	adds	r0, #4
   23772:	f005 fe15 	bl	293a0 <_impl_k_sem_init>
}
   23776:	4628      	mov	r0, r5
   23778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   2377a:	2500      	movs	r5, #0
   2377c:	e7fb      	b.n	23776 <net_tcp_alloc+0xba>
   2377e:	bf00      	nop
   23780:	20002068 	.word	0x20002068
   23784:	000240f9 	.word	0x000240f9

00023788 <net_tcp_get_recv_wnd>:
}
   23788:	f8b0 00c4 	ldrh.w	r0, [r0, #196]	; 0xc4
   2378c:	4770      	bx	lr

0002378e <net_tcp_get_recv_mss>:
{
   2378e:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(tcp->context);
   23790:	6802      	ldr	r2, [r0, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   23792:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
   23796:	f013 0f10 	tst.w	r3, #16
   2379a:	d006      	beq.n	237aa <net_tcp_get_recv_mss+0x1c>
		return AF_INET6;
   2379c:	230a      	movs	r3, #10
	if (family == AF_INET) {
   2379e:	2b02      	cmp	r3, #2
   237a0:	d019      	beq.n	237d6 <net_tcp_get_recv_mss+0x48>
	else if (family == AF_INET6) {
   237a2:	2b0a      	cmp	r3, #10
   237a4:	d003      	beq.n	237ae <net_tcp_get_recv_mss+0x20>
	return 0;
   237a6:	2000      	movs	r0, #0
}
   237a8:	bd08      	pop	{r3, pc}
	return AF_INET;
   237aa:	2302      	movs	r3, #2
   237ac:	e7f7      	b.n	2379e <net_tcp_get_recv_mss+0x10>
	return net_if_get_by_index(context->iface);
   237ae:	f892 005c 	ldrb.w	r0, [r2, #92]	; 0x5c
   237b2:	f7f8 fddb 	bl	1c36c <net_if_get_by_index>
		if (iface && iface->mtu >= NET_IPV6TCPH_LEN) {
   237b6:	b120      	cbz	r0, 237c2 <net_tcp_get_recv_mss+0x34>
   237b8:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   237ba:	283b      	cmp	r0, #59	; 0x3b
   237bc:	d903      	bls.n	237c6 <net_tcp_get_recv_mss+0x38>
			mss = iface->mtu - NET_IPV6TCPH_LEN;
   237be:	383c      	subs	r0, #60	; 0x3c
   237c0:	e002      	b.n	237c8 <net_tcp_get_recv_mss+0x3a>
		int mss = 0;
   237c2:	2000      	movs	r0, #0
   237c4:	e000      	b.n	237c8 <net_tcp_get_recv_mss+0x3a>
   237c6:	2000      	movs	r0, #0
		if (mss < NET_IPV6_MTU) {
   237c8:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   237cc:	da01      	bge.n	237d2 <net_tcp_get_recv_mss+0x44>
			mss = NET_IPV6_MTU;
   237ce:	f44f 60a0 	mov.w	r0, #1280	; 0x500
		return mss;
   237d2:	b280      	uxth	r0, r0
   237d4:	bd08      	pop	{r3, pc}
		return 0;
   237d6:	2000      	movs	r0, #0
   237d8:	bd08      	pop	{r3, pc}

000237da <net_tcp_set_syn_opt>:
{
   237da:	b570      	push	{r4, r5, r6, lr}
   237dc:	460e      	mov	r6, r1
   237de:	4614      	mov	r4, r2
	*optionlen = 0;
   237e0:	2300      	movs	r3, #0
   237e2:	7013      	strb	r3, [r2, #0]
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   237e4:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   237e8:	f413 6f80 	tst.w	r3, #1024	; 0x400
   237ec:	d00f      	beq.n	2380e <net_tcp_set_syn_opt+0x34>
		recv_mss = 0;
   237ee:	2000      	movs	r0, #0
	UNALIGNED_PUT(htonl((u32_t)recv_mss | NET_TCP_MSS_HEADER),
   237f0:	7822      	ldrb	r2, [r4, #0]
   237f2:	0203      	lsls	r3, r0, #8
   237f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   237f8:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   237fc:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   23800:	f040 0002 	orr.w	r0, r0, #2
   23804:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   23806:	7823      	ldrb	r3, [r4, #0]
   23808:	3304      	adds	r3, #4
   2380a:	7023      	strb	r3, [r4, #0]
   2380c:	bd70      	pop	{r4, r5, r6, pc}
   2380e:	4605      	mov	r5, r0
		recv_mss = net_tcp_get_recv_mss(tcp);
   23810:	f7ff ffbd 	bl	2378e <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   23814:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   23818:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2381c:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
   23820:	e7e6      	b.n	237f0 <net_tcp_set_syn_opt+0x16>

00023822 <net_tcp_prepare_reset>:
{
   23822:	b510      	push	{r4, lr}
   23824:	b086      	sub	sp, #24
	struct tcp_segment segment = { 0 };
   23826:	2300      	movs	r3, #0
   23828:	9300      	str	r3, [sp, #0]
   2382a:	9301      	str	r3, [sp, #4]
   2382c:	9302      	str	r3, [sp, #8]
   2382e:	9303      	str	r3, [sp, #12]
   23830:	9304      	str	r3, [sp, #16]
   23832:	9305      	str	r3, [sp, #20]
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   23834:	6803      	ldr	r3, [r0, #0]
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   23836:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   2383a:	f013 0f06 	tst.w	r3, #6
   2383e:	d01a      	beq.n	23876 <net_tcp_prepare_reset+0x54>
	return (enum net_tcp_state)tcp->state;
   23840:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   23844:	f3c3 3343 	ubfx	r3, r3, #13, #4
   23848:	2b02      	cmp	r3, #2
   2384a:	d014      	beq.n	23876 <net_tcp_prepare_reset+0x54>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   2384c:	2b09      	cmp	r3, #9
   2384e:	d012      	beq.n	23876 <net_tcp_prepare_reset+0x54>
   23850:	4614      	mov	r4, r2
		segment.ack = tcp->send_ack;
   23852:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   23856:	9301      	str	r3, [sp, #4]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   23858:	2314      	movs	r3, #20
   2385a:	f88d 300a 	strb.w	r3, [sp, #10]
		segment.seq = tcp->send_seq;
   2385e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   23862:	9300      	str	r3, [sp, #0]
		segment.src_addr = &tcp->context->local;
   23864:	6803      	ldr	r3, [r0, #0]
   23866:	3308      	adds	r3, #8
   23868:	9304      	str	r3, [sp, #16]
		segment.dst_addr = remote;
   2386a:	9105      	str	r1, [sp, #20]
		*pkt = prepare_segment(tcp, &segment, NULL);
   2386c:	2200      	movs	r2, #0
   2386e:	4669      	mov	r1, sp
   23870:	f7ff fe6a 	bl	23548 <prepare_segment>
   23874:	6020      	str	r0, [r4, #0]
}
   23876:	2000      	movs	r0, #0
   23878:	b006      	add	sp, #24
   2387a:	bd10      	pop	{r4, pc}

0002387c <net_tcp_state_str>:
}
   2387c:	4800      	ldr	r0, [pc, #0]	; (23880 <net_tcp_state_str+0x4>)
   2387e:	4770      	bx	lr
   23880:	0002f114 	.word	0x0002f114

00023884 <net_tcp_init>:
		}
	}
}

void net_tcp_init(void)
{
   23884:	4770      	bx	lr

00023886 <net_tcp_change_state>:
   23886:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   2388a:	f3c3 3343 	ubfx	r3, r3, #13, #4
void net_tcp_change_state(struct net_tcp *tcp,
			  enum net_tcp_state new_state)
{
	NET_ASSERT(tcp);

	if (net_tcp_get_state(tcp) == new_state) {
   2388e:	428b      	cmp	r3, r1
   23890:	d022      	beq.n	238d8 <net_tcp_change_state+0x52>

#if defined(CONFIG_NET_DEBUG_TCP)
	validate_state_transition(tcp->state, new_state);
#endif /* CONFIG_NET_DEBUG_TCP */

	tcp->state = new_state;
   23892:	f001 010f 	and.w	r1, r1, #15
   23896:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   2389a:	f361 3350 	bfi	r3, r1, #13, #4
   2389e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   238a2:	b9c9      	cbnz	r1, 238d8 <net_tcp_change_state+0x52>
		return;
	}

	if (!tcp->context) {
   238a4:	6803      	ldr	r3, [r0, #0]
   238a6:	b1bb      	cbz	r3, 238d8 <net_tcp_change_state+0x52>
{
   238a8:	b530      	push	{r4, r5, lr}
   238aa:	b083      	sub	sp, #12
   238ac:	4604      	mov	r4, r0
		return;
	}

	/* Remove any port handlers if we are closing */
	if (tcp->context->conn_handler) {
   238ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   238b0:	b120      	cbz	r0, 238bc <net_tcp_change_state+0x36>
	return net_conn_unregister(handle);
   238b2:	f001 fcef 	bl	25294 <net_conn_unregister>
		net_tcp_unregister(tcp->context->conn_handler);
		tcp->context->conn_handler = NULL;
   238b6:	6823      	ldr	r3, [r4, #0]
   238b8:	2200      	movs	r2, #0
   238ba:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if (tcp->accept_cb) {
   238bc:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
   238c0:	b145      	cbz	r5, 238d4 <net_tcp_change_state+0x4e>
		tcp->accept_cb(tcp->context,
   238c2:	6820      	ldr	r0, [r4, #0]
   238c4:	6803      	ldr	r3, [r0, #0]
   238c6:	9300      	str	r3, [sp, #0]
   238c8:	f06f 037d 	mvn.w	r3, #125	; 0x7d
   238cc:	2218      	movs	r2, #24
   238ce:	f100 0114 	add.w	r1, r0, #20
   238d2:	47a8      	blx	r5
			       &tcp->context->remote,
			       sizeof(struct sockaddr),
			       -ENETRESET,
			       tcp->context->user_data);
	}
}
   238d4:	b003      	add	sp, #12
   238d6:	bd30      	pop	{r4, r5, pc}
   238d8:	4770      	bx	lr
	...

000238dc <net_tcp_release>:
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   238dc:	2800      	cmp	r0, #0
   238de:	d064      	beq.n	239aa <net_tcp_release+0xce>
{
   238e0:	b538      	push	{r3, r4, r5, lr}
   238e2:	4605      	mov	r5, r0
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   238e4:	4b35      	ldr	r3, [pc, #212]	; (239bc <net_tcp_release+0xe0>)
   238e6:	4298      	cmp	r0, r3
   238e8:	d362      	bcc.n	239b0 <net_tcp_release+0xd4>
   238ea:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
   238ee:	4298      	cmp	r0, r3
   238f0:	d261      	bcs.n	239b6 <net_tcp_release+0xda>
	return list->head;
   238f2:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   238f6:	b140      	cbz	r0, 2390a <net_tcp_release+0x2e>
   238f8:	3834      	subs	r0, #52	; 0x34
   238fa:	b140      	cbz	r0, 2390e <net_tcp_release+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   238fc:	f110 0434 	adds.w	r4, r0, #52	; 0x34
   23900:	d000      	beq.n	23904 <net_tcp_release+0x28>
	return node->next;
   23902:	6b44      	ldr	r4, [r0, #52]	; 0x34
   23904:	b12c      	cbz	r4, 23912 <net_tcp_release+0x36>
   23906:	3c34      	subs	r4, #52	; 0x34
   23908:	e00d      	b.n	23926 <net_tcp_release+0x4a>
   2390a:	2000      	movs	r0, #0
   2390c:	e7f5      	b.n	238fa <net_tcp_release+0x1e>
   2390e:	4604      	mov	r4, r0
   23910:	e009      	b.n	23926 <net_tcp_release+0x4a>
   23912:	2400      	movs	r4, #0
   23914:	e007      	b.n	23926 <net_tcp_release+0x4a>
			list->tail = list->head;
   23916:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
   2391a:	e00e      	b.n	2393a <net_tcp_release+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2391c:	461a      	mov	r2, r3
   2391e:	e015      	b.n	2394c <net_tcp_release+0x70>
   23920:	3b34      	subs	r3, #52	; 0x34
   23922:	4620      	mov	r0, r4
   23924:	461c      	mov	r4, r3
   23926:	b1d0      	cbz	r0, 2395e <net_tcp_release+0x82>
		sys_slist_remove(&tcp->sent_list, NULL, &pkt->sent_list);
   23928:	f100 0334 	add.w	r3, r0, #52	; 0x34
		list->head = node->next;
   2392c:	6b42      	ldr	r2, [r0, #52]	; 0x34
   2392e:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
		if (list->tail == node) {
   23932:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
   23936:	428b      	cmp	r3, r1
   23938:	d0ed      	beq.n	23916 <net_tcp_release+0x3a>
	node->next = NULL;
   2393a:	2300      	movs	r3, #0
   2393c:	6343      	str	r3, [r0, #52]	; 0x34
		net_pkt_unref(pkt);
   2393e:	f7f9 ff5c 	bl	1d7fa <net_pkt_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   23942:	b144      	cbz	r4, 23956 <net_tcp_release+0x7a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23944:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   23948:	d0e8      	beq.n	2391c <net_tcp_release+0x40>
	return node->next;
   2394a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   2394c:	b12a      	cbz	r2, 2395a <net_tcp_release+0x7e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2394e:	2b00      	cmp	r3, #0
   23950:	d0e6      	beq.n	23920 <net_tcp_release+0x44>
	return node->next;
   23952:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23954:	e7e4      	b.n	23920 <net_tcp_release+0x44>
   23956:	4623      	mov	r3, r4
   23958:	e7e3      	b.n	23922 <net_tcp_release+0x46>
   2395a:	2300      	movs	r3, #0
   2395c:	e7e1      	b.n	23922 <net_tcp_release+0x46>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   2395e:	f105 0058 	add.w	r0, r5, #88	; 0x58
   23962:	f006 f9e7 	bl	29d34 <_impl_k_timer_stop>
	sem->count = 0;
   23966:	2400      	movs	r4, #0
   23968:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
	ack_timer_cancel(tcp);
   2396c:	4628      	mov	r0, r5
   2396e:	f7ff fdd5 	bl	2351c <ack_timer_cancel>
	fin_timer_cancel(tcp);
   23972:	4628      	mov	r0, r5
   23974:	f7ff fdd7 	bl	23526 <fin_timer_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   23978:	4621      	mov	r1, r4
   2397a:	4628      	mov	r0, r5
   2397c:	f7ff ff83 	bl	23886 <net_tcp_change_state>
	tcp->context = NULL;
   23980:	602c      	str	r4, [r5, #0]
	__asm__ volatile(
   23982:	f04f 0320 	mov.w	r3, #32
   23986:	f3ef 8111 	mrs	r1, BASEPRI
   2398a:	f383 8811 	msr	BASEPRI, r3
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   2398e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   23992:	f3c3 1247 	ubfx	r2, r3, #5, #8
   23996:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   2399a:	f362 134c 	bfi	r3, r2, #5, #8
   2399e:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   239a2:	f381 8811 	msr	BASEPRI, r1
	return 0;
   239a6:	4620      	mov	r0, r4
   239a8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   239aa:	f06f 0015 	mvn.w	r0, #21
   239ae:	4770      	bx	lr
   239b0:	f06f 0015 	mvn.w	r0, #21
   239b4:	bd38      	pop	{r3, r4, r5, pc}
   239b6:	f06f 0015 	mvn.w	r0, #21
}
   239ba:	bd38      	pop	{r3, r4, r5, pc}
   239bc:	20002068 	.word	0x20002068

000239c0 <net_tcp_prepare_segment>:
{
   239c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   239c4:	b086      	sub	sp, #24
   239c6:	4604      	mov	r4, r0
   239c8:	460d      	mov	r5, r1
   239ca:	4692      	mov	sl, r2
   239cc:	4699      	mov	r9, r3
   239ce:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   239d0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	struct tcp_segment segment = { 0 };
   239d4:	2300      	movs	r3, #0
   239d6:	9300      	str	r3, [sp, #0]
   239d8:	9301      	str	r3, [sp, #4]
   239da:	9302      	str	r3, [sp, #8]
   239dc:	9303      	str	r3, [sp, #12]
   239de:	9304      	str	r3, [sp, #16]
   239e0:	9305      	str	r3, [sp, #20]
	if (!local) {
   239e2:	2f00      	cmp	r7, #0
   239e4:	d050      	beq.n	23a88 <net_tcp_prepare_segment+0xc8>
	seq = tcp->send_seq;
   239e6:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
	if (flags & NET_TCP_ACK) {
   239ea:	f015 0f10 	tst.w	r5, #16
   239ee:	d009      	beq.n	23a04 <net_tcp_prepare_segment+0x44>
	return (enum net_tcp_state)tcp->state;
   239f0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   239f4:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   239f8:	2b07      	cmp	r3, #7
   239fa:	d048      	beq.n	23a8e <net_tcp_prepare_segment+0xce>
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   239fc:	2b08      	cmp	r3, #8
   239fe:	d055      	beq.n	23aac <net_tcp_prepare_segment+0xec>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   23a00:	2b05      	cmp	r3, #5
   23a02:	d058      	beq.n	23ab6 <net_tcp_prepare_segment+0xf6>
	if (flags & NET_TCP_FIN) {
   23a04:	f015 0f01 	tst.w	r5, #1
   23a08:	d010      	beq.n	23a2c <net_tcp_prepare_segment+0x6c>
		tcp->flags |= NET_TCP_FINAL_SENT;
   23a0a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   23a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23a12:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		flags |= NET_TCP_ACK;
   23a16:	f045 0510 	orr.w	r5, r5, #16
		seq += 2;
   23a1a:	3602      	adds	r6, #2
   23a1c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   23a20:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   23a24:	2b04      	cmp	r3, #4
   23a26:	d053      	beq.n	23ad0 <net_tcp_prepare_segment+0x110>
   23a28:	2b03      	cmp	r3, #3
   23a2a:	d051      	beq.n	23ad0 <net_tcp_prepare_segment+0x110>
	if (flags & NET_TCP_SYN) {
   23a2c:	f015 0f02 	tst.w	r5, #2
   23a30:	d000      	beq.n	23a34 <net_tcp_prepare_segment+0x74>
		seq++;
   23a32:	3601      	adds	r6, #1
	wnd = net_tcp_get_recv_wnd(tcp);
   23a34:	4620      	mov	r0, r4
   23a36:	f7ff fea7 	bl	23788 <net_tcp_get_recv_wnd>
	segment.src_addr = (struct sockaddr_ptr *)local;
   23a3a:	9704      	str	r7, [sp, #16]
	segment.dst_addr = remote;
   23a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   23a3e:	9305      	str	r3, [sp, #20]
	segment.seq = tcp->send_seq;
   23a40:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   23a44:	9300      	str	r3, [sp, #0]
	segment.ack = tcp->send_ack;
   23a46:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   23a4a:	9301      	str	r3, [sp, #4]
	segment.flags = flags;
   23a4c:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.wnd = wnd;
   23a50:	f8ad 0008 	strh.w	r0, [sp, #8]
	segment.options = options;
   23a54:	f8cd a00c 	str.w	sl, [sp, #12]
	segment.optlen = optlen;
   23a58:	f88d 900b 	strb.w	r9, [sp, #11]
	*send_pkt = prepare_segment(tcp, &segment, *send_pkt);
   23a5c:	f8d8 2000 	ldr.w	r2, [r8]
   23a60:	4669      	mov	r1, sp
   23a62:	4620      	mov	r0, r4
   23a64:	f7ff fd70 	bl	23548 <prepare_segment>
   23a68:	f8c8 0000 	str.w	r0, [r8]
	if (!*send_pkt) {
   23a6c:	b3a8      	cbz	r0, 23ada <net_tcp_prepare_segment+0x11a>
	tcp->send_seq = seq;
   23a6e:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
	if (net_tcp_seq_greater(tcp->send_seq, tcp->recv_max_ack)) {
   23a72:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	return (s32_t)(seq1 - seq2);
   23a76:	1af3      	subs	r3, r6, r3
   23a78:	2b00      	cmp	r3, #0
   23a7a:	dd31      	ble.n	23ae0 <net_tcp_prepare_segment+0x120>
		tcp->recv_max_ack = tcp->send_seq;
   23a7c:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	return 0;
   23a80:	2000      	movs	r0, #0
}
   23a82:	b006      	add	sp, #24
   23a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		local = &tcp->context->local;
   23a88:	6807      	ldr	r7, [r0, #0]
   23a8a:	3708      	adds	r7, #8
   23a8c:	e7ab      	b.n	239e6 <net_tcp_prepare_segment+0x26>
			if (flags & NET_TCP_FIN) {
   23a8e:	f015 0f01 	tst.w	r5, #1
   23a92:	d006      	beq.n	23aa2 <net_tcp_prepare_segment+0xe2>
				flags &= ~NET_TCP_FIN;
   23a94:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   23a98:	2109      	movs	r1, #9
   23a9a:	4620      	mov	r0, r4
   23a9c:	f7ff fef3 	bl	23886 <net_tcp_change_state>
   23aa0:	e7b0      	b.n	23a04 <net_tcp_prepare_segment+0x44>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   23aa2:	210a      	movs	r1, #10
   23aa4:	4620      	mov	r0, r4
   23aa6:	f7ff feee 	bl	23886 <net_tcp_change_state>
   23aaa:	e7ab      	b.n	23a04 <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   23aac:	2109      	movs	r1, #9
   23aae:	4620      	mov	r0, r4
   23ab0:	f7ff fee9 	bl	23886 <net_tcp_change_state>
   23ab4:	e7a6      	b.n	23a04 <net_tcp_prepare_segment+0x44>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   23ab6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   23aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23abe:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			flags |= NET_TCP_FIN;
   23ac2:	f045 0501 	orr.w	r5, r5, #1
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   23ac6:	2106      	movs	r1, #6
   23ac8:	4620      	mov	r0, r4
   23aca:	f7ff fedc 	bl	23886 <net_tcp_change_state>
   23ace:	e799      	b.n	23a04 <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   23ad0:	2107      	movs	r1, #7
   23ad2:	4620      	mov	r0, r4
   23ad4:	f7ff fed7 	bl	23886 <net_tcp_change_state>
   23ad8:	e7a8      	b.n	23a2c <net_tcp_prepare_segment+0x6c>
		return -EINVAL;
   23ada:	f06f 0015 	mvn.w	r0, #21
   23ade:	e7d0      	b.n	23a82 <net_tcp_prepare_segment+0xc2>
	return 0;
   23ae0:	2000      	movs	r0, #0
   23ae2:	e7ce      	b.n	23a82 <net_tcp_prepare_segment+0xc2>

00023ae4 <net_tcp_prepare_ack>:
{
   23ae4:	b570      	push	{r4, r5, r6, lr}
   23ae6:	b088      	sub	sp, #32
   23ae8:	4604      	mov	r4, r0
   23aea:	460d      	mov	r5, r1
   23aec:	4616      	mov	r6, r2
   23aee:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   23af2:	f3c3 3343 	ubfx	r3, r3, #13, #4
	switch (net_tcp_get_state(tcp)) {
   23af6:	2b03      	cmp	r3, #3
   23af8:	d011      	beq.n	23b1e <net_tcp_prepare_ack+0x3a>
   23afa:	d327      	bcc.n	23b4c <net_tcp_prepare_ack+0x68>
   23afc:	3b06      	subs	r3, #6
   23afe:	2b01      	cmp	r3, #1
   23b00:	d824      	bhi.n	23b4c <net_tcp_prepare_ack+0x68>
		tcp->send_seq--;
   23b02:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   23b06:	3b01      	subs	r3, #1
   23b08:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   23b0c:	9202      	str	r2, [sp, #8]
   23b0e:	9101      	str	r1, [sp, #4]
   23b10:	2200      	movs	r2, #0
   23b12:	9200      	str	r2, [sp, #0]
   23b14:	4613      	mov	r3, r2
   23b16:	2111      	movs	r1, #17
   23b18:	f7ff ff52 	bl	239c0 <net_tcp_prepare_segment>
   23b1c:	e014      	b.n	23b48 <net_tcp_prepare_ack+0x64>
		tcp->send_seq--;
   23b1e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   23b22:	3b01      	subs	r3, #1
   23b24:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   23b28:	f10d 0217 	add.w	r2, sp, #23
   23b2c:	a906      	add	r1, sp, #24
   23b2e:	f7ff fe54 	bl	237da <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   23b32:	f89d 3017 	ldrb.w	r3, [sp, #23]
   23b36:	9602      	str	r6, [sp, #8]
   23b38:	9501      	str	r5, [sp, #4]
   23b3a:	2200      	movs	r2, #0
   23b3c:	9200      	str	r2, [sp, #0]
   23b3e:	aa06      	add	r2, sp, #24
   23b40:	2112      	movs	r1, #18
   23b42:	4620      	mov	r0, r4
   23b44:	f7ff ff3c 	bl	239c0 <net_tcp_prepare_segment>
}
   23b48:	b008      	add	sp, #32
   23b4a:	bd70      	pop	{r4, r5, r6, pc}
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   23b4c:	9602      	str	r6, [sp, #8]
   23b4e:	9501      	str	r5, [sp, #4]
   23b50:	2200      	movs	r2, #0
   23b52:	9200      	str	r2, [sp, #0]
   23b54:	4613      	mov	r3, r2
   23b56:	2110      	movs	r1, #16
   23b58:	4620      	mov	r0, r4
   23b5a:	f7ff ff31 	bl	239c0 <net_tcp_prepare_segment>
   23b5e:	e7f3      	b.n	23b48 <net_tcp_prepare_ack+0x64>

00023b60 <net_tcp_queue_data>:
{
   23b60:	b570      	push	{r4, r5, r6, lr}
   23b62:	b086      	sub	sp, #24
   23b64:	4605      	mov	r5, r0
   23b66:	9105      	str	r1, [sp, #20]
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   23b68:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	return net_buf_frags_len(pkt->frags);
   23b6a:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   23b6c:	2400      	movs	r4, #0
   23b6e:	e002      	b.n	23b76 <net_tcp_queue_data+0x16>
		bytes += buf->len;
   23b70:	899a      	ldrh	r2, [r3, #12]
   23b72:	4414      	add	r4, r2
		buf = buf->frags;
   23b74:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   23b76:	2b00      	cmp	r3, #0
   23b78:	d1fa      	bne.n	23b70 <net_tcp_queue_data+0x10>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   23b7a:	ab05      	add	r3, sp, #20
   23b7c:	9302      	str	r3, [sp, #8]
   23b7e:	9001      	str	r0, [sp, #4]
   23b80:	2200      	movs	r2, #0
   23b82:	9200      	str	r2, [sp, #0]
   23b84:	4613      	mov	r3, r2
   23b86:	2118      	movs	r1, #24
   23b88:	6e28      	ldr	r0, [r5, #96]	; 0x60
   23b8a:	f7ff ff19 	bl	239c0 <net_tcp_prepare_segment>
	if (ret) {
   23b8e:	4606      	mov	r6, r0
   23b90:	bb10      	cbnz	r0, 23bd8 <net_tcp_queue_data+0x78>
	context->tcp->send_seq += data_len;
   23b92:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   23b94:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   23b98:	4423      	add	r3, r4
   23b9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	net_stats.tcp.bytes.sent += bytes;
   23b9e:	4a1b      	ldr	r2, [pc, #108]	; (23c0c <net_tcp_queue_data+0xac>)
   23ba0:	6c93      	ldr	r3, [r2, #72]	; 0x48
   23ba2:	441c      	add	r4, r3
   23ba4:	6494      	str	r4, [r2, #72]	; 0x48
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   23ba6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   23ba8:	9905      	ldr	r1, [sp, #20]
   23baa:	f101 0234 	add.w	r2, r1, #52	; 0x34
	node->next = NULL;
   23bae:	6348      	str	r0, [r1, #52]	; 0x34
	if (!list->tail) {
   23bb0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   23bb4:	b199      	cbz	r1, 23bde <net_tcp_queue_data+0x7e>
		list->tail->next = node;
   23bb6:	600a      	str	r2, [r1, #0]
		list->tail = node;
   23bb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (k_timer_remaining_get(&context->tcp->retry_timer) == 0) {
   23bbc:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return _timeout_remaining_get(&timer->timeout);
   23bbe:	3058      	adds	r0, #88	; 0x58
   23bc0:	f006 f942 	bl	29e48 <_timeout_remaining_get>
   23bc4:	b180      	cbz	r0, 23be8 <net_tcp_queue_data+0x88>
	do_ref_if_needed(context->tcp, pkt);
   23bc6:	9805      	ldr	r0, [sp, #20]
	return pkt->family;
   23bc8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   23bcc:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   23bd0:	2b0a      	cmp	r3, #10
   23bd2:	d015      	beq.n	23c00 <net_tcp_queue_data+0xa0>
   23bd4:	f7f9 fe02 	bl	1d7dc <net_pkt_ref>
}
   23bd8:	4630      	mov	r0, r6
   23bda:	b006      	add	sp, #24
   23bdc:	bd70      	pop	{r4, r5, r6, pc}
		list->tail = node;
   23bde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		list->head = node;
   23be2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   23be6:	e7e9      	b.n	23bbc <net_tcp_queue_data+0x5c>
		k_timer_start(&context->tcp->retry_timer,
   23be8:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return ((u32_t)1 << tcp->retry_timeout_shift) * INIT_RETRY_MS;
   23bea:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
   23bee:	f003 031f 	and.w	r3, r3, #31
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   23bf2:	2200      	movs	r2, #0
   23bf4:	21c8      	movs	r1, #200	; 0xc8
   23bf6:	4099      	lsls	r1, r3
   23bf8:	3058      	adds	r0, #88	; 0x58
   23bfa:	f005 ffe3 	bl	29bc4 <_impl_k_timer_start>
   23bfe:	e7e2      	b.n	23bc6 <net_tcp_queue_data+0x66>
	do_ref_if_needed(context->tcp, pkt);
   23c00:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   23c04:	2b02      	cmp	r3, #2
   23c06:	d1e5      	bne.n	23bd4 <net_tcp_queue_data+0x74>
   23c08:	e7e6      	b.n	23bd8 <net_tcp_queue_data+0x78>
   23c0a:	bf00      	nop
   23c0c:	20002b58 	.word	0x20002b58

00023c10 <net_tcp_foreach>:

void net_tcp_foreach(net_tcp_cb_t cb, void *user_data)
{
   23c10:	b570      	push	{r4, r5, r6, lr}
   23c12:	4606      	mov	r6, r0
   23c14:	460d      	mov	r5, r1
	__asm__ volatile(
   23c16:	f04f 0320 	mov.w	r3, #32
   23c1a:	f3ef 8111 	mrs	r1, BASEPRI
   23c1e:	f383 8811 	msr	BASEPRI, r3
	int i, key;

	key = irq_lock();

	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   23c22:	2400      	movs	r4, #0
   23c24:	e000      	b.n	23c28 <net_tcp_foreach+0x18>
   23c26:	3401      	adds	r4, #1
   23c28:	2c05      	cmp	r4, #5
   23c2a:	dc16      	bgt.n	23c5a <net_tcp_foreach+0x4a>
	return tcp->flags & NET_TCP_IN_USE;
   23c2c:	23c8      	movs	r3, #200	; 0xc8
   23c2e:	4a0c      	ldr	r2, [pc, #48]	; (23c60 <net_tcp_foreach+0x50>)
   23c30:	fb03 2304 	mla	r3, r3, r4, r2
   23c34:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
		if (!net_tcp_is_used(&tcp_context[i])) {
   23c38:	f013 0f20 	tst.w	r3, #32
   23c3c:	d0f3      	beq.n	23c26 <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   23c3e:	f381 8811 	msr	BASEPRI, r1
			continue;
		}

		irq_unlock(key);

		cb(&tcp_context[i], user_data);
   23c42:	4629      	mov	r1, r5
   23c44:	20c8      	movs	r0, #200	; 0xc8
   23c46:	fb00 2004 	mla	r0, r0, r4, r2
   23c4a:	47b0      	blx	r6
	__asm__ volatile(
   23c4c:	f04f 0320 	mov.w	r3, #32
   23c50:	f3ef 8111 	mrs	r1, BASEPRI
   23c54:	f383 8811 	msr	BASEPRI, r3
   23c58:	e7e5      	b.n	23c26 <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   23c5a:	f381 8811 	msr	BASEPRI, r1
   23c5e:	bd70      	pop	{r4, r5, r6, pc}
   23c60:	20002068 	.word	0x20002068

00023c64 <net_tcp_get_hdr>:
					+ net_tcp_get_recv_wnd(tcp)) < 0);
}

struct net_tcp_hdr *net_tcp_get_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   23c64:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c66:	b085      	sub	sp, #20
   23c68:	4605      	mov	r5, r0
   23c6a:	460e      	mov	r6, r1
	struct net_tcp_hdr *tcp_hdr;
	struct net_buf *frag;
	u16_t pos;

	tcp_hdr = net_pkt_tcp_data(pkt);
   23c6c:	f7fa f8df 	bl	1de2e <net_pkt_tcp_data>
   23c70:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23c72:	2214      	movs	r2, #20
   23c74:	4601      	mov	r1, r0
   23c76:	4628      	mov	r0, r5
   23c78:	f7fa fc82 	bl	1e580 <net_header_fits>
   23c7c:	b120      	cbz	r0, 23c88 <net_tcp_get_hdr+0x24>
		return hdr;
   23c7e:	4627      	mov	r7, r4
	if (net_tcp_header_fits(pkt, tcp_hdr)) {
   23c80:	b127      	cbz	r7, 23c8c <net_tcp_get_hdr+0x28>

		return NULL;
	}

	return hdr;
}
   23c82:	4620      	mov	r0, r4
   23c84:	b005      	add	sp, #20
   23c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   23c88:	2700      	movs	r7, #0
   23c8a:	e7f9      	b.n	23c80 <net_tcp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23c8c:	68a8      	ldr	r0, [r5, #8]
   23c8e:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23c92:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23c96:	9600      	str	r6, [sp, #0]
   23c98:	2302      	movs	r3, #2
   23c9a:	f10d 020e 	add.w	r2, sp, #14
   23c9e:	4421      	add	r1, r4
   23ca0:	f7f9 ff29 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23ca4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   23ca8:	1cb3      	adds	r3, r6, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23caa:	9300      	str	r3, [sp, #0]
   23cac:	2302      	movs	r3, #2
   23cae:	f10d 020e 	add.w	r2, sp, #14
   23cb2:	f7f9 ff20 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->seq), hdr->seq);
   23cb6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23cba:	1d33      	adds	r3, r6, #4
   23cbc:	9300      	str	r3, [sp, #0]
   23cbe:	2304      	movs	r3, #4
   23cc0:	f10d 020e 	add.w	r2, sp, #14
   23cc4:	f7f9 ff17 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->ack), hdr->ack);
   23cc8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23ccc:	f106 0308 	add.w	r3, r6, #8
   23cd0:	9300      	str	r3, [sp, #0]
   23cd2:	2304      	movs	r3, #4
   23cd4:	f10d 020e 	add.w	r2, sp, #14
   23cd8:	f7f9 ff0d 	bl	1daf6 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->offset);
   23cdc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23ce0:	f106 030c 	add.w	r3, r6, #12
	return net_frag_read(frag, offset, pos, 1, value);
   23ce4:	9300      	str	r3, [sp, #0]
   23ce6:	2301      	movs	r3, #1
   23ce8:	f10d 020e 	add.w	r2, sp, #14
   23cec:	f7f9 ff03 	bl	1daf6 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   23cf0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23cf4:	f106 030d 	add.w	r3, r6, #13
   23cf8:	9300      	str	r3, [sp, #0]
   23cfa:	2301      	movs	r3, #1
   23cfc:	f10d 020e 	add.w	r2, sp, #14
   23d00:	f7f9 fef9 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd);
   23d04:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23d08:	f106 030e 	add.w	r3, r6, #14
   23d0c:	9300      	str	r3, [sp, #0]
   23d0e:	2302      	movs	r3, #2
   23d10:	f10d 020e 	add.w	r2, sp, #14
   23d14:	f7f9 feef 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23d18:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   23d1c:	f106 0310 	add.w	r3, r6, #16
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23d20:	9300      	str	r3, [sp, #0]
   23d22:	2302      	movs	r3, #2
   23d24:	f10d 020e 	add.w	r2, sp, #14
   23d28:	f7f9 fee5 	bl	1daf6 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->urg), hdr->urg);
   23d2c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23d30:	f106 0312 	add.w	r3, r6, #18
   23d34:	9300      	str	r3, [sp, #0]
   23d36:	2302      	movs	r3, #2
   23d38:	f10d 020e 	add.w	r2, sp, #14
   23d3c:	f7f9 fedb 	bl	1daf6 <net_frag_read>
	if (!frag && pos == 0xffff) {
   23d40:	b108      	cbz	r0, 23d46 <net_tcp_get_hdr+0xe2>
	return hdr;
   23d42:	4634      	mov	r4, r6
   23d44:	e79d      	b.n	23c82 <net_tcp_get_hdr+0x1e>
	if (!frag && pos == 0xffff) {
   23d46:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   23d4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23d4e:	429a      	cmp	r2, r3
   23d50:	d001      	beq.n	23d56 <net_tcp_get_hdr+0xf2>
	return hdr;
   23d52:	4634      	mov	r4, r6
   23d54:	e795      	b.n	23c82 <net_tcp_get_hdr+0x1e>
		return NULL;
   23d56:	463c      	mov	r4, r7
   23d58:	e793      	b.n	23c82 <net_tcp_get_hdr+0x1e>

00023d5a <net_tcp_validate_seq>:
{
   23d5a:	b570      	push	{r4, r5, r6, lr}
   23d5c:	b086      	sub	sp, #24
   23d5e:	4606      	mov	r6, r0
   23d60:	4608      	mov	r0, r1
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   23d62:	a901      	add	r1, sp, #4
   23d64:	f7ff ff7e 	bl	23c64 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   23d68:	b1e8      	cbz	r0, 23da6 <net_tcp_validate_seq+0x4c>
   23d6a:	4603      	mov	r3, r0
	return ((u16_t)src[0] << 8) | src[1];
   23d6c:	7900      	ldrb	r0, [r0, #4]
   23d6e:	795c      	ldrb	r4, [r3, #5]
   23d70:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   23d74:	799a      	ldrb	r2, [r3, #6]
   23d76:	79dc      	ldrb	r4, [r3, #7]
   23d78:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   23d7c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   23d80:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
   23d84:	1b63      	subs	r3, r4, r5
				tcp->send_ack) >= 0) &&
   23d86:	2b00      	cmp	r3, #0
   23d88:	db0b      	blt.n	23da2 <net_tcp_validate_seq+0x48>
					+ net_tcp_get_recv_wnd(tcp)) < 0);
   23d8a:	4630      	mov	r0, r6
   23d8c:	f7ff fcfc 	bl	23788 <net_tcp_get_recv_wnd>
		(net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   23d90:	4428      	add	r0, r5
   23d92:	1a24      	subs	r4, r4, r0
				tcp->send_ack) >= 0) &&
   23d94:	2c00      	cmp	r4, #0
   23d96:	db02      	blt.n	23d9e <net_tcp_validate_seq+0x44>
   23d98:	2000      	movs	r0, #0
}
   23d9a:	b006      	add	sp, #24
   23d9c:	bd70      	pop	{r4, r5, r6, pc}
				tcp->send_ack) >= 0) &&
   23d9e:	2001      	movs	r0, #1
   23da0:	e7fb      	b.n	23d9a <net_tcp_validate_seq+0x40>
   23da2:	2000      	movs	r0, #0
   23da4:	e7f9      	b.n	23d9a <net_tcp_validate_seq+0x40>
		return false;
   23da6:	2000      	movs	r0, #0
   23da8:	e7f7      	b.n	23d9a <net_tcp_validate_seq+0x40>

00023daa <net_tcp_set_hdr>:

struct net_tcp_hdr *net_tcp_set_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   23daa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23dae:	b087      	sub	sp, #28
   23db0:	4605      	mov	r5, r0
   23db2:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23db4:	2214      	movs	r2, #20
   23db6:	f7fa fbe3 	bl	1e580 <net_header_fits>
   23dba:	b128      	cbz	r0, 23dc8 <net_tcp_set_hdr+0x1e>
		return hdr;
   23dbc:	4626      	mov	r6, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_tcp_header_fits(pkt, hdr)) {
   23dbe:	b12e      	cbz	r6, 23dcc <net_tcp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   23dc0:	4620      	mov	r0, r4
   23dc2:	b007      	add	sp, #28
   23dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return NULL;
   23dc8:	2600      	movs	r6, #0
   23dca:	e7f8      	b.n	23dbe <net_tcp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23dcc:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23dd0:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23dd4:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
   23dd8:	9702      	str	r7, [sp, #8]
   23dda:	9401      	str	r4, [sp, #4]
   23ddc:	f04f 0802 	mov.w	r8, #2
   23de0:	f8cd 8000 	str.w	r8, [sp]
   23de4:	f10d 0316 	add.w	r3, sp, #22
   23de8:	440a      	add	r2, r1
   23dea:	68a9      	ldr	r1, [r5, #8]
   23dec:	4628      	mov	r0, r5
   23dee:	f7f9 fef4 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23df2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, ALLOC_TIMEOUT);
   23df6:	eb04 0308 	add.w	r3, r4, r8
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23dfa:	9702      	str	r7, [sp, #8]
   23dfc:	9301      	str	r3, [sp, #4]
   23dfe:	f8cd 8000 	str.w	r8, [sp]
   23e02:	f10d 0316 	add.w	r3, sp, #22
   23e06:	4601      	mov	r1, r0
   23e08:	4628      	mov	r0, r5
   23e0a:	f7f9 fee6 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->seq), hdr->seq,
   23e0e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23e12:	1d23      	adds	r3, r4, #4
   23e14:	9702      	str	r7, [sp, #8]
   23e16:	9301      	str	r3, [sp, #4]
   23e18:	f04f 0904 	mov.w	r9, #4
   23e1c:	f8cd 9000 	str.w	r9, [sp]
   23e20:	f10d 0316 	add.w	r3, sp, #22
   23e24:	4601      	mov	r1, r0
   23e26:	4628      	mov	r0, r5
   23e28:	f7f9 fed7 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->ack), hdr->ack,
   23e2c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23e30:	f104 0308 	add.w	r3, r4, #8
   23e34:	9702      	str	r7, [sp, #8]
   23e36:	9301      	str	r3, [sp, #4]
   23e38:	f8cd 9000 	str.w	r9, [sp]
   23e3c:	f10d 0316 	add.w	r3, sp, #22
   23e40:	4601      	mov	r1, r0
   23e42:	4628      	mov	r0, r5
   23e44:	f7f9 fec9 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->offset),
   23e48:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23e4c:	f104 030c 	add.w	r3, r4, #12
   23e50:	9702      	str	r7, [sp, #8]
   23e52:	9301      	str	r3, [sp, #4]
   23e54:	f04f 0901 	mov.w	r9, #1
   23e58:	f8cd 9000 	str.w	r9, [sp]
   23e5c:	f10d 0316 	add.w	r3, sp, #22
   23e60:	4601      	mov	r1, r0
   23e62:	4628      	mov	r0, r5
   23e64:	f7f9 feb9 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->flags),
   23e68:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23e6c:	f104 030d 	add.w	r3, r4, #13
   23e70:	9702      	str	r7, [sp, #8]
   23e72:	9301      	str	r3, [sp, #4]
   23e74:	f8cd 9000 	str.w	r9, [sp]
   23e78:	f10d 0316 	add.w	r3, sp, #22
   23e7c:	4601      	mov	r1, r0
   23e7e:	4628      	mov	r0, r5
   23e80:	f7f9 feab 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd,
   23e84:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23e88:	f104 030e 	add.w	r3, r4, #14
   23e8c:	9702      	str	r7, [sp, #8]
   23e8e:	9301      	str	r3, [sp, #4]
   23e90:	f8cd 8000 	str.w	r8, [sp]
   23e94:	f10d 0316 	add.w	r3, sp, #22
   23e98:	4601      	mov	r1, r0
   23e9a:	4628      	mov	r0, r5
   23e9c:	f7f9 fe9d 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23ea0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, ALLOC_TIMEOUT);
   23ea4:	f104 0310 	add.w	r3, r4, #16
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23ea8:	9702      	str	r7, [sp, #8]
   23eaa:	9301      	str	r3, [sp, #4]
   23eac:	f8cd 8000 	str.w	r8, [sp]
   23eb0:	f10d 0316 	add.w	r3, sp, #22
   23eb4:	4601      	mov	r1, r0
   23eb6:	4628      	mov	r0, r5
   23eb8:	f7f9 fe8f 	bl	1dbda <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->urg), hdr->urg,
   23ebc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23ec0:	f104 0312 	add.w	r3, r4, #18
   23ec4:	9702      	str	r7, [sp, #8]
   23ec6:	9301      	str	r3, [sp, #4]
   23ec8:	f8cd 8000 	str.w	r8, [sp]
   23ecc:	f10d 0316 	add.w	r3, sp, #22
   23ed0:	4601      	mov	r1, r0
   23ed2:	4628      	mov	r0, r5
   23ed4:	f7f9 fe81 	bl	1dbda <net_pkt_write>
	if (!frag) {
   23ed8:	2800      	cmp	r0, #0
   23eda:	f47f af71 	bne.w	23dc0 <net_tcp_set_hdr+0x16>
		return NULL;
   23ede:	4634      	mov	r4, r6
   23ee0:	e76e      	b.n	23dc0 <net_tcp_set_hdr+0x16>

00023ee2 <net_tcp_get_chksum>:

u16_t net_tcp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23ee2:	b570      	push	{r4, r5, r6, lr}
   23ee4:	b084      	sub	sp, #16
   23ee6:	4605      	mov	r5, r0
   23ee8:	460e      	mov	r6, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   23eea:	f7f9 ffa0 	bl	1de2e <net_pkt_tcp_data>
   23eee:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23ef0:	2214      	movs	r2, #20
   23ef2:	4601      	mov	r1, r0
   23ef4:	4628      	mov	r0, r5
   23ef6:	f7fa fb43 	bl	1e580 <net_header_fits>
   23efa:	b120      	cbz	r0, 23f06 <net_tcp_get_chksum+0x24>
		return hdr;
   23efc:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   23efe:	b123      	cbz	r3, 23f0a <net_tcp_get_chksum+0x28>
		return hdr->chksum;
   23f00:	8a20      	ldrh	r0, [r4, #16]
			     1 + 1 + 2 /* offset + flags + wnd */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   23f02:	b004      	add	sp, #16
   23f04:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   23f06:	2300      	movs	r3, #0
   23f08:	e7f9      	b.n	23efe <net_tcp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   23f0a:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23f0e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23f12:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   23f14:	3110      	adds	r1, #16
   23f16:	f10d 030e 	add.w	r3, sp, #14
   23f1a:	9300      	str	r3, [sp, #0]
   23f1c:	2302      	movs	r3, #2
   23f1e:	aa03      	add	r2, sp, #12
   23f20:	b289      	uxth	r1, r1
   23f22:	4630      	mov	r0, r6
   23f24:	f7f9 fde7 	bl	1daf6 <net_frag_read>
	return chksum;
   23f28:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   23f2c:	e7e9      	b.n	23f02 <net_tcp_get_chksum+0x20>

00023f2e <net_tcp_set_chksum>:

struct net_buf *net_tcp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f32:	b086      	sub	sp, #24
   23f34:	4606      	mov	r6, r0
   23f36:	460d      	mov	r5, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum = 0;
   23f38:	2300      	movs	r3, #0
   23f3a:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   23f3e:	f7f9 ff76 	bl	1de2e <net_pkt_tcp_data>
   23f42:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23f44:	2214      	movs	r2, #20
   23f46:	4601      	mov	r1, r0
   23f48:	4630      	mov	r0, r6
   23f4a:	f7fa fb19 	bl	1e580 <net_header_fits>
   23f4e:	b170      	cbz	r0, 23f6e <net_tcp_set_chksum+0x40>
		return hdr;
   23f50:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   23f52:	b173      	cbz	r3, 23f72 <net_tcp_set_chksum+0x44>
		hdr->chksum = 0;
   23f54:	2300      	movs	r3, #0
   23f56:	7423      	strb	r3, [r4, #16]
   23f58:	7463      	strb	r3, [r4, #17]
	return net_calc_chksum(pkt, IPPROTO_TCP);
   23f5a:	2106      	movs	r1, #6
   23f5c:	4630      	mov	r0, r6
   23f5e:	f7fa fab6 	bl	1e4ce <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_tcp(pkt);
   23f62:	43c0      	mvns	r0, r0
   23f64:	8220      	strh	r0, [r4, #16]

		return frag;
   23f66:	4628      	mov	r0, r5
			     (u8_t *)&chksum, ALLOC_TIMEOUT);

	NET_ASSERT(frag);

	return frag;
}
   23f68:	b006      	add	sp, #24
   23f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   23f6e:	2300      	movs	r3, #0
   23f70:	e7ef      	b.n	23f52 <net_tcp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   23f72:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23f76:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23f7a:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   23f7c:	3210      	adds	r2, #16
   23f7e:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
   23f82:	f8cd 8008 	str.w	r8, [sp, #8]
   23f86:	f10d 0416 	add.w	r4, sp, #22
   23f8a:	9401      	str	r4, [sp, #4]
   23f8c:	2702      	movs	r7, #2
   23f8e:	9700      	str	r7, [sp, #0]
   23f90:	ab05      	add	r3, sp, #20
   23f92:	b292      	uxth	r2, r2
   23f94:	4629      	mov	r1, r5
   23f96:	4630      	mov	r0, r6
   23f98:	f7f9 fe1f 	bl	1dbda <net_pkt_write>
   23f9c:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_TCP);
   23f9e:	2106      	movs	r1, #6
   23fa0:	4630      	mov	r0, r6
   23fa2:	f7fa fa94 	bl	1e4ce <net_calc_chksum>
	chksum = ~net_calc_chksum_tcp(pkt);
   23fa6:	43c0      	mvns	r0, r0
   23fa8:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   23fac:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   23fb0:	3a02      	subs	r2, #2
   23fb2:	f8cd 8008 	str.w	r8, [sp, #8]
   23fb6:	9401      	str	r4, [sp, #4]
   23fb8:	9700      	str	r7, [sp, #0]
   23fba:	ab05      	add	r3, sp, #20
   23fbc:	b292      	uxth	r2, r2
   23fbe:	4629      	mov	r1, r5
   23fc0:	4630      	mov	r0, r6
   23fc2:	f7f9 fe0a 	bl	1dbda <net_pkt_write>
	return frag;
   23fc6:	e7cf      	b.n	23f68 <net_tcp_set_chksum+0x3a>

00023fc8 <net_tcp_send_pkt>:
{
   23fc8:	b570      	push	{r4, r5, r6, lr}
   23fca:	b086      	sub	sp, #24
   23fcc:	4605      	mov	r5, r0
	return pkt->context;
   23fce:	68c6      	ldr	r6, [r0, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   23fd0:	a901      	add	r1, sp, #4
   23fd2:	f7ff fe47 	bl	23c64 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   23fd6:	2800      	cmp	r0, #0
   23fd8:	f000 8086 	beq.w	240e8 <net_tcp_send_pkt+0x120>
   23fdc:	4604      	mov	r4, r0
	return ((u16_t)src[0] << 8) | src[1];
   23fde:	7a02      	ldrb	r2, [r0, #8]
   23fe0:	7a43      	ldrb	r3, [r0, #9]
   23fe2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   23fe6:	7a81      	ldrb	r1, [r0, #10]
   23fe8:	7ac3      	ldrb	r3, [r0, #11]
   23fea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   23fee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   23ff2:	6e32      	ldr	r2, [r6, #96]	; 0x60
   23ff4:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
   23ff8:	429a      	cmp	r2, r3
   23ffa:	d039      	beq.n	24070 <net_tcp_send_pkt+0xa8>
	sys_put_be16(val >> 16, dst);
   23ffc:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
   23ffe:	0a19      	lsrs	r1, r3, #8
   24000:	7201      	strb	r1, [r0, #8]
	dst[1] = val;
   24002:	7243      	strb	r3, [r0, #9]
	dst[0] = val >> 8;
   24004:	f3c2 2307 	ubfx	r3, r2, #8, #8
   24008:	7283      	strb	r3, [r0, #10]
	dst[1] = val;
   2400a:	72c2      	strb	r2, [r0, #11]
		calc_chksum = true;
   2400c:	2201      	movs	r2, #1
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   2400e:	6e33      	ldr	r3, [r6, #96]	; 0x60
   24010:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   24014:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   24018:	4299      	cmp	r1, r3
   2401a:	d007      	beq.n	2402c <net_tcp_send_pkt+0x64>
		(tcp_hdr->flags & NET_TCP_ACK) == 0) {
   2401c:	7b63      	ldrb	r3, [r4, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   2401e:	f013 0f10 	tst.w	r3, #16
   24022:	d103      	bne.n	2402c <net_tcp_send_pkt+0x64>
		tcp_hdr->flags |= NET_TCP_ACK;
   24024:	f043 0310 	orr.w	r3, r3, #16
   24028:	7363      	strb	r3, [r4, #13]
		calc_chksum = true;
   2402a:	2201      	movs	r2, #1
	if (calc_chksum) {
   2402c:	bb12      	cbnz	r2, 24074 <net_tcp_send_pkt+0xac>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   2402e:	7b63      	ldrb	r3, [r4, #13]
   24030:	f013 0f01 	tst.w	r3, #1
   24034:	d006      	beq.n	24044 <net_tcp_send_pkt+0x7c>
		ctx->tcp->fin_sent = 1;
   24036:	6e32      	ldr	r2, [r6, #96]	; 0x60
   24038:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   2403c:	f043 0302 	orr.w	r3, r3, #2
   24040:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   24044:	6e33      	ldr	r3, [r6, #96]	; 0x60
   24046:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   2404a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_tcp_set_hdr(pkt, tcp_hdr);
   2404e:	4621      	mov	r1, r4
   24050:	4628      	mov	r0, r5
   24052:	f7ff feaa 	bl	23daa <net_tcp_set_hdr>
	return pkt->family;
   24056:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   2405a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (is_6lo_technology(pkt)) {
   2405e:	2b0a      	cmp	r3, #10
   24060:	d00d      	beq.n	2407e <net_tcp_send_pkt+0xb6>
	return net_send_data(pkt);
   24062:	4628      	mov	r0, r5
   24064:	f7f6 ffc8 	bl	1aff8 <net_send_data>
   24068:	4604      	mov	r4, r0
}
   2406a:	4620      	mov	r0, r4
   2406c:	b006      	add	sp, #24
   2406e:	bd70      	pop	{r4, r5, r6, pc}
	bool calc_chksum = false;
   24070:	2200      	movs	r2, #0
   24072:	e7cc      	b.n	2400e <net_tcp_send_pkt+0x46>
		net_tcp_set_chksum(pkt, pkt->frags);
   24074:	68a9      	ldr	r1, [r5, #8]
   24076:	4628      	mov	r0, r5
   24078:	f7ff ff59 	bl	23f2e <net_tcp_set_chksum>
   2407c:	e7d7      	b.n	2402e <net_tcp_send_pkt+0x66>
	if (is_6lo_technology(pkt)) {
   2407e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   24082:	2b02      	cmp	r3, #2
   24084:	d1ed      	bne.n	24062 <net_tcp_send_pkt+0x9a>
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   24086:	6e33      	ldr	r3, [r6, #96]	; 0x60
	return list->head;
   24088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   2408c:	b10b      	cbz	r3, 24092 <net_tcp_send_pkt+0xca>
   2408e:	3b34      	subs	r3, #52	; 0x34
   24090:	e006      	b.n	240a0 <net_tcp_send_pkt+0xd8>
   24092:	2300      	movs	r3, #0
   24094:	e004      	b.n	240a0 <net_tcp_send_pkt+0xd8>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24096:	4611      	mov	r1, r2
   24098:	e009      	b.n	240ae <net_tcp_send_pkt+0xe6>
	return node->next;
   2409a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2409c:	f1a2 0334 	sub.w	r3, r2, #52	; 0x34
   240a0:	b163      	cbz	r3, 240bc <net_tcp_send_pkt+0xf4>
			if (check_pkt == pkt) {
   240a2:	42ab      	cmp	r3, r5
   240a4:	d009      	beq.n	240ba <net_tcp_send_pkt+0xf2>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   240a6:	f113 0234 	adds.w	r2, r3, #52	; 0x34
   240aa:	d0f4      	beq.n	24096 <net_tcp_send_pkt+0xce>
	return node->next;
   240ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   240ae:	b111      	cbz	r1, 240b6 <net_tcp_send_pkt+0xee>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   240b0:	2a00      	cmp	r2, #0
   240b2:	d1f2      	bne.n	2409a <net_tcp_send_pkt+0xd2>
   240b4:	e7f2      	b.n	2409c <net_tcp_send_pkt+0xd4>
   240b6:	2300      	movs	r3, #0
   240b8:	e7f2      	b.n	240a0 <net_tcp_send_pkt+0xd8>
				pkt_in_slist = true;
   240ba:	2301      	movs	r3, #1
		if (pkt_in_slist) {
   240bc:	2b00      	cmp	r3, #0
   240be:	d0d0      	beq.n	24062 <net_tcp_send_pkt+0x9a>
			new_pkt = net_pkt_clone(pkt, ALLOC_TIMEOUT);
   240c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   240c4:	4628      	mov	r0, r5
   240c6:	f7f9 fec7 	bl	1de58 <net_pkt_clone>
			if (!new_pkt) {
   240ca:	4605      	mov	r5, r0
   240cc:	b178      	cbz	r0, 240ee <net_tcp_send_pkt+0x126>
			ret = net_send_data(new_pkt);
   240ce:	f7f6 ff93 	bl	1aff8 <net_send_data>
			if (ret < 0) {
   240d2:	1e04      	subs	r4, r0, #0
   240d4:	db04      	blt.n	240e0 <net_tcp_send_pkt+0x118>
	net_stats.tcp.rexmit++;
   240d6:	4a07      	ldr	r2, [pc, #28]	; (240f4 <net_tcp_send_pkt+0x12c>)
   240d8:	6f13      	ldr	r3, [r2, #112]	; 0x70
   240da:	3301      	adds	r3, #1
   240dc:	6713      	str	r3, [r2, #112]	; 0x70
   240de:	e7c4      	b.n	2406a <net_tcp_send_pkt+0xa2>
				net_pkt_unref(new_pkt);
   240e0:	4628      	mov	r0, r5
   240e2:	f7f9 fb8a 	bl	1d7fa <net_pkt_unref>
   240e6:	e7c0      	b.n	2406a <net_tcp_send_pkt+0xa2>
		return -EMSGSIZE;
   240e8:	f06f 0479 	mvn.w	r4, #121	; 0x79
   240ec:	e7bd      	b.n	2406a <net_tcp_send_pkt+0xa2>
				return -ENOMEM;
   240ee:	f06f 040b 	mvn.w	r4, #11
   240f2:	e7ba      	b.n	2406a <net_tcp_send_pkt+0xa2>
   240f4:	20002b58 	.word	0x20002b58

000240f8 <tcp_retry_expired>:
	return (!list->head);
   240f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   240fa:	2b00      	cmp	r3, #0
   240fc:	d05c      	beq.n	241b8 <tcp_retry_expired+0xc0>
{
   240fe:	b510      	push	{r4, lr}
   24100:	f1a0 0158 	sub.w	r1, r0, #88	; 0x58
   24104:	4604      	mov	r4, r0
		tcp->retry_timeout_shift++;
   24106:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   2410a:	f002 031f 	and.w	r3, r2, #31
   2410e:	3301      	adds	r3, #1
   24110:	f003 031f 	and.w	r3, r3, #31
   24114:	f363 0204 	bfi	r2, r3, #0, #5
   24118:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   2411c:	2b09      	cmp	r3, #9
   2411e:	dc2f      	bgt.n	24180 <tcp_retry_expired+0x88>
   24120:	2200      	movs	r2, #0
   24122:	21c8      	movs	r1, #200	; 0xc8
   24124:	4099      	lsls	r1, r3
   24126:	f005 fd4d 	bl	29bc4 <_impl_k_timer_start>
	return list->head;
   2412a:	6b63      	ldr	r3, [r4, #52]	; 0x34
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   2412c:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
	return pkt->sent_or_eof;
   24130:	791a      	ldrb	r2, [r3, #4]
		if (net_pkt_sent(pkt)) {
   24132:	f012 0f01 	tst.w	r2, #1
   24136:	d00d      	beq.n	24154 <tcp_retry_expired+0x5c>
	return pkt->family;
   24138:	f3c2 02c3 	ubfx	r2, r2, #3, #4
			do_ref_if_needed(tcp, pkt);
   2413c:	2a0a      	cmp	r2, #10
   2413e:	d023      	beq.n	24188 <tcp_retry_expired+0x90>
   24140:	4620      	mov	r0, r4
   24142:	f7f9 fb4b 	bl	1d7dc <net_pkt_ref>
   24146:	4604      	mov	r4, r0
	pkt->sent_or_eof = sent;
   24148:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2414c:	f36f 0300 	bfc	r3, #0, #1
   24150:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->pkt_queued = send;
   24154:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   24158:	f043 0302 	orr.w	r3, r3, #2
   2415c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   24160:	4620      	mov	r0, r4
   24162:	f7ff ff31 	bl	23fc8 <net_tcp_send_pkt>
   24166:	2800      	cmp	r0, #0
   24168:	db13      	blt.n	24192 <tcp_retry_expired+0x9a>
	return pkt->family;
   2416a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2416e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   24172:	2b0a      	cmp	r3, #10
   24174:	d01b      	beq.n	241ae <tcp_retry_expired+0xb6>
   24176:	4a11      	ldr	r2, [pc, #68]	; (241bc <tcp_retry_expired+0xc4>)
   24178:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2417a:	3301      	adds	r3, #1
   2417c:	6713      	str	r3, [r2, #112]	; 0x70
   2417e:	bd10      	pop	{r4, pc}
			abort_connection(tcp);
   24180:	4608      	mov	r0, r1
   24182:	f7ff f99a 	bl	234ba <abort_connection>
			return;
   24186:	bd10      	pop	{r4, pc}
			do_ref_if_needed(tcp, pkt);
   24188:	f813 3c07 	ldrb.w	r3, [r3, #-7]
   2418c:	2b02      	cmp	r3, #2
   2418e:	d1d7      	bne.n	24140 <tcp_retry_expired+0x48>
   24190:	e7da      	b.n	24148 <tcp_retry_expired+0x50>
   24192:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   24196:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   2419a:	2b0a      	cmp	r3, #10
   2419c:	d103      	bne.n	241a6 <tcp_retry_expired+0xae>
   2419e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   241a2:	2b02      	cmp	r3, #2
   241a4:	d0e1      	beq.n	2416a <tcp_retry_expired+0x72>
			net_pkt_unref(pkt);
   241a6:	4620      	mov	r0, r4
   241a8:	f7f9 fb27 	bl	1d7fa <net_pkt_unref>
   241ac:	bd10      	pop	{r4, pc}
			    !is_6lo_technology(pkt)) {
   241ae:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   241b2:	2b02      	cmp	r3, #2
   241b4:	d1df      	bne.n	24176 <tcp_retry_expired+0x7e>
   241b6:	e7e2      	b.n	2417e <tcp_retry_expired+0x86>
   241b8:	4770      	bx	lr
   241ba:	bf00      	nop
   241bc:	20002b58 	.word	0x20002b58

000241c0 <net_tcp_send_data>:
{
   241c0:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   241c2:	6e03      	ldr	r3, [r0, #96]	; 0x60
   241c4:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
   241c8:	b10c      	cbz	r4, 241ce <net_tcp_send_data+0xe>
   241ca:	3c34      	subs	r4, #52	; 0x34
   241cc:	e013      	b.n	241f6 <net_tcp_send_data+0x36>
   241ce:	2400      	movs	r4, #0
   241d0:	e011      	b.n	241f6 <net_tcp_send_data+0x36>
				net_pkt_unref(pkt);
   241d2:	4620      	mov	r0, r4
   241d4:	f7f9 fb11 	bl	1d7fa <net_pkt_unref>
	pkt->pkt_queued = send;
   241d8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   241dc:	f043 0302 	orr.w	r3, r3, #2
   241e0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   241e4:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   241e8:	d01e      	beq.n	24228 <net_tcp_send_data+0x68>
	return node->next;
   241ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   241ec:	b1f2      	cbz	r2, 2422c <net_tcp_send_data+0x6c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   241ee:	b103      	cbz	r3, 241f2 <net_tcp_send_data+0x32>
	return node->next;
   241f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   241f2:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
   241f6:	b1dc      	cbz	r4, 24230 <net_tcp_send_data+0x70>
	return pkt->pkt_queued;
   241f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		if (net_pkt_queued(pkt)) {
   241fc:	f013 0f02 	tst.w	r3, #2
   24200:	d1f0      	bne.n	241e4 <net_tcp_send_data+0x24>
		if (!net_pkt_sent(pkt)) {
   24202:	f013 0f01 	tst.w	r3, #1
   24206:	d1ed      	bne.n	241e4 <net_tcp_send_data+0x24>
			ret = net_tcp_send_pkt(pkt);
   24208:	4620      	mov	r0, r4
   2420a:	f7ff fedd 	bl	23fc8 <net_tcp_send_pkt>
			if (ret < 0 && !is_6lo_technology(pkt)) {
   2420e:	2800      	cmp	r0, #0
   24210:	dae2      	bge.n	241d8 <net_tcp_send_data+0x18>
	return pkt->family;
   24212:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   24216:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2421a:	2b0a      	cmp	r3, #10
   2421c:	d1d9      	bne.n	241d2 <net_tcp_send_data+0x12>
   2421e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   24222:	2b02      	cmp	r3, #2
   24224:	d1d5      	bne.n	241d2 <net_tcp_send_data+0x12>
   24226:	e7d7      	b.n	241d8 <net_tcp_send_data+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24228:	461a      	mov	r2, r3
   2422a:	e7df      	b.n	241ec <net_tcp_send_data+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   2422c:	2400      	movs	r4, #0
   2422e:	e7e2      	b.n	241f6 <net_tcp_send_data+0x36>
}
   24230:	2000      	movs	r0, #0
   24232:	bd10      	pop	{r4, pc}

00024234 <net_tcp_ack_received>:
{
   24234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24238:	b087      	sub	sp, #28
   2423a:	4681      	mov	r9, r0
   2423c:	4688      	mov	r8, r1
	struct net_tcp *tcp = ctx->tcp;
   2423e:	6e05      	ldr	r5, [r0, #96]	; 0x60
	return (!list->head);
   24240:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   24244:	b10b      	cbz	r3, 2424a <net_tcp_ack_received+0x16>
		valid_ack = true;
   24246:	2700      	movs	r7, #0
   24248:	e033      	b.n	242b2 <net_tcp_ack_received+0x7e>
	net_stats.tcp.ackerr++;
   2424a:	4a51      	ldr	r2, [pc, #324]	; (24390 <net_tcp_ack_received+0x15c>)
   2424c:	6e53      	ldr	r3, [r2, #100]	; 0x64
   2424e:	3301      	adds	r3, #1
   24250:	6653      	str	r3, [r2, #100]	; 0x64
   24252:	e7f8      	b.n	24246 <net_tcp_ack_received+0x12>
		list->head = node->next;
   24254:	6823      	ldr	r3, [r4, #0]
   24256:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   2425a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   2425e:	42a2      	cmp	r2, r4
   24260:	d005      	beq.n	2426e <net_tcp_ack_received+0x3a>
	node->next = NULL;
   24262:	2300      	movs	r3, #0
   24264:	6023      	str	r3, [r4, #0]
			net_pkt_unref(pkt);
   24266:	4630      	mov	r0, r6
   24268:	f7f9 fac7 	bl	1d7fa <net_pkt_unref>
   2426c:	e021      	b.n	242b2 <net_tcp_ack_received+0x7e>
			list->tail = list->head;
   2426e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   24272:	e7f6      	b.n	24262 <net_tcp_ack_received+0x2e>
   24274:	4a46      	ldr	r2, [pc, #280]	; (24390 <net_tcp_ack_received+0x15c>)
   24276:	6e53      	ldr	r3, [r2, #100]	; 0x64
   24278:	3301      	adds	r3, #1
   2427a:	6653      	str	r3, [r2, #100]	; 0x64
	if (valid_ack && net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED) {
   2427c:	b12f      	cbz	r7, 2428a <net_tcp_ack_received+0x56>
	return (enum net_tcp_state)tcp->state;
   2427e:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   24282:	f3c3 3343 	ubfx	r3, r3, #13, #4
   24286:	2b04      	cmp	r3, #4
   24288:	d046      	beq.n	24318 <net_tcp_ack_received+0xe4>
}
   2428a:	b007      	add	sp, #28
   2428c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   24290:	2108      	movs	r1, #8
   24292:	4628      	mov	r0, r5
   24294:	f7ff faf7 	bl	23886 <net_tcp_change_state>
		list->head = node->next;
   24298:	6823      	ldr	r3, [r4, #0]
   2429a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   2429e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   242a2:	42a2      	cmp	r2, r4
   242a4:	d035      	beq.n	24312 <net_tcp_ack_received+0xde>
	node->next = NULL;
   242a6:	2300      	movs	r3, #0
   242a8:	6023      	str	r3, [r4, #0]
		net_pkt_unref(pkt);
   242aa:	4630      	mov	r0, r6
   242ac:	f7f9 faa5 	bl	1d7fa <net_pkt_unref>
		valid_ack = true;
   242b0:	2701      	movs	r7, #1
	return (!list->head);
   242b2:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
	while (!sys_slist_is_empty(list)) {
   242b6:	2c00      	cmp	r4, #0
   242b8:	d0e0      	beq.n	2427c <net_tcp_ack_received+0x48>
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   242ba:	f1a4 0634 	sub.w	r6, r4, #52	; 0x34
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   242be:	a901      	add	r1, sp, #4
   242c0:	4630      	mov	r0, r6
   242c2:	f7ff fccf 	bl	23c64 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   242c6:	4602      	mov	r2, r0
   242c8:	2800      	cmp	r0, #0
   242ca:	d0c3      	beq.n	24254 <net_tcp_ack_received+0x20>
	return ((u16_t)src[0] << 8) | src[1];
   242cc:	7903      	ldrb	r3, [r0, #4]
   242ce:	7941      	ldrb	r1, [r0, #5]
   242d0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   242d4:	7980      	ldrb	r0, [r0, #6]
   242d6:	79d3      	ldrb	r3, [r2, #7]
   242d8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   242dc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	return pkt->appdatalen;
   242e0:	f834 3c04 	ldrh.w	r3, [r4, #-4]
		seq = sys_get_be32(tcp_hdr->seq) + net_pkt_appdatalen(pkt) - 1;
   242e4:	440b      	add	r3, r1
   242e6:	3b01      	subs	r3, #1
   242e8:	eba8 0303 	sub.w	r3, r8, r3
		if (!net_tcp_seq_greater(ack, seq)) {
   242ec:	2b00      	cmp	r3, #0
   242ee:	ddc1      	ble.n	24274 <net_tcp_ack_received+0x40>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   242f0:	7b53      	ldrb	r3, [r2, #13]
   242f2:	f013 0f01 	tst.w	r3, #1
   242f6:	d0cf      	beq.n	24298 <net_tcp_ack_received+0x64>
   242f8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   242fc:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   24300:	2b07      	cmp	r3, #7
   24302:	d0c5      	beq.n	24290 <net_tcp_ack_received+0x5c>
			} else if (s == NET_TCP_CLOSING) {
   24304:	2b0a      	cmp	r3, #10
   24306:	d1c7      	bne.n	24298 <net_tcp_ack_received+0x64>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   24308:	2109      	movs	r1, #9
   2430a:	4628      	mov	r0, r5
   2430c:	f7ff fabb 	bl	23886 <net_tcp_change_state>
   24310:	e7c2      	b.n	24298 <net_tcp_ack_received+0x64>
			list->tail = list->head;
   24312:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   24316:	e7c6      	b.n	242a6 <net_tcp_ack_received+0x72>
		restart_timer(ctx->tcp);
   24318:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
   2431c:	f7ff f8db 	bl	234d6 <restart_timer>
		if (ctx->tcp->flags & NET_TCP_RETRYING) {
   24320:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
   24324:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
   24328:	f412 7f00 	tst.w	r2, #512	; 0x200
   2432c:	d0ad      	beq.n	2428a <net_tcp_ack_received+0x56>
	return list->head;
   2432e:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   24332:	b108      	cbz	r0, 24338 <net_tcp_ack_received+0x104>
   24334:	3834      	subs	r0, #52	; 0x34
   24336:	e013      	b.n	24360 <net_tcp_ack_received+0x12c>
   24338:	2000      	movs	r0, #0
   2433a:	e011      	b.n	24360 <net_tcp_ack_received+0x12c>
					do_ref_if_needed(ctx->tcp, pkt);
   2433c:	f7f9 fa4e 	bl	1d7dc <net_pkt_ref>
	pkt->sent_or_eof = sent;
   24340:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   24344:	f36f 0300 	bfc	r3, #0, #1
   24348:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   2434c:	b140      	cbz	r0, 24360 <net_tcp_ack_received+0x12c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2434e:	f110 0334 	adds.w	r3, r0, #52	; 0x34
   24352:	d014      	beq.n	2437e <net_tcp_ack_received+0x14a>
	return node->next;
   24354:	6b42      	ldr	r2, [r0, #52]	; 0x34
   24356:	b1a2      	cbz	r2, 24382 <net_tcp_ack_received+0x14e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24358:	b103      	cbz	r3, 2435c <net_tcp_ack_received+0x128>
	return node->next;
   2435a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2435c:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
   24360:	b188      	cbz	r0, 24386 <net_tcp_ack_received+0x152>
	return pkt->sent_or_eof;
   24362:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
				if (net_pkt_sent(pkt)) {
   24366:	f013 0f01 	tst.w	r3, #1
   2436a:	d0ef      	beq.n	2434c <net_tcp_ack_received+0x118>
	return pkt->family;
   2436c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
					do_ref_if_needed(ctx->tcp, pkt);
   24370:	2b0a      	cmp	r3, #10
   24372:	d1e3      	bne.n	2433c <net_tcp_ack_received+0x108>
   24374:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   24378:	2b02      	cmp	r3, #2
   2437a:	d1df      	bne.n	2433c <net_tcp_ack_received+0x108>
   2437c:	e7e0      	b.n	24340 <net_tcp_ack_received+0x10c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2437e:	461a      	mov	r2, r3
   24380:	e7e9      	b.n	24356 <net_tcp_ack_received+0x122>
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   24382:	2000      	movs	r0, #0
   24384:	e7ec      	b.n	24360 <net_tcp_ack_received+0x12c>
			net_tcp_send_data(ctx);
   24386:	4648      	mov	r0, r9
   24388:	f7ff ff1a 	bl	241c0 <net_tcp_send_data>
}
   2438c:	e77d      	b.n	2428a <net_tcp_ack_received+0x56>
   2438e:	bf00      	nop
   24390:	20002b58 	.word	0x20002b58

00024394 <iface2str>:
	if (iface->l2 == &NET_L2_GET_NAME(BLUETOOTH)) {
   24394:	6842      	ldr	r2, [r0, #4]
   24396:	4b08      	ldr	r3, [pc, #32]	; (243b8 <iface2str+0x24>)
   24398:	429a      	cmp	r2, r3
   2439a:	d004      	beq.n	243a6 <iface2str+0x12>
	if (extra) {
   2439c:	b151      	cbz	r1, 243b4 <iface2str+0x20>
		*extra = "==============";
   2439e:	4b07      	ldr	r3, [pc, #28]	; (243bc <iface2str+0x28>)
   243a0:	600b      	str	r3, [r1, #0]
	return "<unknown type>";
   243a2:	4807      	ldr	r0, [pc, #28]	; (243c0 <iface2str+0x2c>)
   243a4:	4770      	bx	lr
		if (extra) {
   243a6:	b119      	cbz	r1, 243b0 <iface2str+0x1c>
			*extra = "=========";
   243a8:	4b06      	ldr	r3, [pc, #24]	; (243c4 <iface2str+0x30>)
   243aa:	600b      	str	r3, [r1, #0]
		return "Bluetooth";
   243ac:	4806      	ldr	r0, [pc, #24]	; (243c8 <iface2str+0x34>)
   243ae:	4770      	bx	lr
   243b0:	4805      	ldr	r0, [pc, #20]	; (243c8 <iface2str+0x34>)
   243b2:	4770      	bx	lr
	return "<unknown type>";
   243b4:	4802      	ldr	r0, [pc, #8]	; (243c0 <iface2str+0x2c>)
}
   243b6:	4770      	bx	lr
   243b8:	0002e6f0 	.word	0x0002e6f0
   243bc:	00031d98 	.word	0x00031d98
   243c0:	00031d7c 	.word	0x00031d7c
   243c4:	00031d8c 	.word	0x00031d8c
   243c8:	00031d70 	.word	0x00031d70

000243cc <slab_pool_found_already>:
				    struct k_mem_slab *slab,
				    struct net_buf_pool *pool)
{
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   243cc:	2300      	movs	r3, #0
   243ce:	2b05      	cmp	r3, #5
   243d0:	dc18      	bgt.n	24404 <slab_pool_found_already+0x38>
{
   243d2:	b410      	push	{r4}
   243d4:	e008      	b.n	243e8 <slab_pool_found_already+0x1c>
		if (slab) {
			if (info->tx_slabs[i] == slab) {
				return true;
			}
		} else {
			if (info->data_pools[i] == pool) {
   243d6:	f103 0408 	add.w	r4, r3, #8
   243da:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   243de:	4294      	cmp	r4, r2
   243e0:	d00e      	beq.n	24400 <slab_pool_found_already+0x34>
	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   243e2:	3301      	adds	r3, #1
   243e4:	2b05      	cmp	r3, #5
   243e6:	dc08      	bgt.n	243fa <slab_pool_found_already+0x2e>
		if (slab) {
   243e8:	2900      	cmp	r1, #0
   243ea:	d0f4      	beq.n	243d6 <slab_pool_found_already+0xa>
			if (info->tx_slabs[i] == slab) {
   243ec:	1c9c      	adds	r4, r3, #2
   243ee:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   243f2:	42a1      	cmp	r1, r4
   243f4:	d1f5      	bne.n	243e2 <slab_pool_found_already+0x16>
				return true;
   243f6:	2001      	movs	r0, #1
   243f8:	e000      	b.n	243fc <slab_pool_found_already+0x30>
				return true;
			}
		}
	}

	return false;
   243fa:	2000      	movs	r0, #0
}
   243fc:	bc10      	pop	{r4}
   243fe:	4770      	bx	lr
				return true;
   24400:	2001      	movs	r0, #1
   24402:	e7fb      	b.n	243fc <slab_pool_found_already+0x30>
	return false;
   24404:	2000      	movs	r0, #0
}
   24406:	4770      	bx	lr

00024408 <net_shell_cmd_allocs>:
{
   24408:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_NET_PKT to see allocations.\n");
   2440a:	4802      	ldr	r0, [pc, #8]	; (24414 <net_shell_cmd_allocs+0xc>)
   2440c:	f7de fdd4 	bl	2fb8 <printk>
}
   24410:	2000      	movs	r0, #0
   24412:	bd08      	pop	{r3, pc}
   24414:	00032074 	.word	0x00032074

00024418 <net_shell_cmd_app>:
{
   24418:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_APP and either CONFIG_NET_APP_CLIENT "
   2441a:	4802      	ldr	r0, [pc, #8]	; (24424 <net_shell_cmd_app+0xc>)
   2441c:	f7de fdcc 	bl	2fb8 <printk>
}
   24420:	2000      	movs	r0, #0
   24422:	bd08      	pop	{r3, pc}
   24424:	000320ac 	.word	0x000320ac

00024428 <net_shell_cmd_arp>:
{
   24428:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   2442a:	4802      	ldr	r0, [pc, #8]	; (24434 <net_shell_cmd_arp+0xc>)
   2442c:	f7de fdc4 	bl	2fb8 <printk>
}
   24430:	2000      	movs	r0, #0
   24432:	bd08      	pop	{r3, pc}
   24434:	00032130 	.word	0x00032130

00024438 <net_shell_cmd_dns>:
{
   24438:	b508      	push	{r3, lr}
	printk("DNS resolver not supported.\n");
   2443a:	4802      	ldr	r0, [pc, #8]	; (24444 <net_shell_cmd_dns+0xc>)
   2443c:	f7de fdbc 	bl	2fb8 <printk>
}
   24440:	2000      	movs	r0, #0
   24442:	bd08      	pop	{r3, pc}
   24444:	00032230 	.word	0x00032230

00024448 <net_shell_cmd_http>:
{
   24448:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   2444a:	4802      	ldr	r0, [pc, #8]	; (24454 <net_shell_cmd_http+0xc>)
   2444c:	f7de fdb4 	bl	2fb8 <printk>
}
   24450:	2000      	movs	r0, #0
   24452:	bd08      	pop	{r3, pc}
   24454:	00032250 	.word	0x00032250

00024458 <context_info>:
	return context->flags & NET_CONTEXT_IN_USE;
   24458:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
#if defined(CONFIG_NET_CONTEXT_NET_PKT_POOL)
	struct ctx_info *info = user_data;
	struct k_mem_slab *slab;
	struct net_buf_pool *pool;

	if (!net_context_is_used(context)) {
   2445c:	f013 0f01 	tst.w	r3, #1
   24460:	d032      	beq.n	244c8 <context_info+0x70>
{
   24462:	b570      	push	{r4, r5, r6, lr}
   24464:	460d      	mov	r5, r1
   24466:	4604      	mov	r4, r0
		return;
	}

	if (context->tx_slab) {
   24468:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   2446a:	b19b      	cbz	r3, 24494 <context_info+0x3c>
		slab = context->tx_slab();
   2446c:	4798      	blx	r3
   2446e:	4606      	mov	r6, r0

		if (slab_pool_found_already(info, slab, NULL)) {
   24470:	2200      	movs	r2, #0
   24472:	4601      	mov	r1, r0
   24474:	4628      	mov	r0, r5
   24476:	f7ff ffa9 	bl	243cc <slab_pool_found_already>
   2447a:	b100      	cbz	r0, 2447e <context_info+0x26>
   2447c:	bd70      	pop	{r4, r5, r6, pc}
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%zu\t%u\t%u\tETX\n",
		       slab, slab->num_blocks * slab->block_size,
		       slab->num_blocks, k_mem_slab_num_free_get(slab));
#else
		printk("%p\t%d\tETX\n", slab, slab->num_blocks);
   2447e:	68b2      	ldr	r2, [r6, #8]
   24480:	4631      	mov	r1, r6
   24482:	4812      	ldr	r0, [pc, #72]	; (244cc <context_info+0x74>)
   24484:	f7de fd98 	bl	2fb8 <printk>
#endif
		info->are_external_pools = true;
   24488:	2301      	movs	r3, #1
   2448a:	712b      	strb	r3, [r5, #4]
		info->tx_slabs[info->pos] = slab;
   2448c:	682b      	ldr	r3, [r5, #0]
   2448e:	3302      	adds	r3, #2
   24490:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
	}

	if (context->data_pool) {
   24494:	6c23      	ldr	r3, [r4, #64]	; 0x40
   24496:	b19b      	cbz	r3, 244c0 <context_info+0x68>
		pool = context->data_pool();
   24498:	4798      	blx	r3
   2449a:	4604      	mov	r4, r0

		if (slab_pool_found_already(info, NULL, pool)) {
   2449c:	4602      	mov	r2, r0
   2449e:	2100      	movs	r1, #0
   244a0:	4628      	mov	r0, r5
   244a2:	f7ff ff93 	bl	243cc <slab_pool_found_already>
   244a6:	2800      	cmp	r0, #0
   244a8:	d1e8      	bne.n	2447c <context_info+0x24>
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%d\t%d\t%d\tEDATA (%s)\n",
		       pool, pool->pool_size, pool->buf_count,
		       pool->avail_count, pool->name);
#else
		printk("%p\t%d\tEDATA\n", pool, pool->buf_count);
   244aa:	8a22      	ldrh	r2, [r4, #16]
   244ac:	4621      	mov	r1, r4
   244ae:	4808      	ldr	r0, [pc, #32]	; (244d0 <context_info+0x78>)
   244b0:	f7de fd82 	bl	2fb8 <printk>
#endif
		info->are_external_pools = true;
   244b4:	2301      	movs	r3, #1
   244b6:	712b      	strb	r3, [r5, #4]
		info->data_pools[info->pos] = pool;
   244b8:	682b      	ldr	r3, [r5, #0]
   244ba:	3308      	adds	r3, #8
   244bc:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	}

	info->pos++;
   244c0:	682b      	ldr	r3, [r5, #0]
   244c2:	3301      	adds	r3, #1
   244c4:	602b      	str	r3, [r5, #0]
   244c6:	e7d9      	b.n	2447c <context_info+0x24>
   244c8:	4770      	bx	lr
   244ca:	bf00      	nop
   244cc:	00031d34 	.word	0x00031d34
   244d0:	00031d40 	.word	0x00031d40

000244d4 <net_shell_cmd_rpl>:
}

#endif /* CONFIG_NET_RPL */

int net_shell_cmd_rpl(int argc, char *argv[])
{
   244d4:	b508      	push	{r3, lr}
		printk("No parents found.\n");
	}

	printk("\n");
#else
	printk("RPL not enabled, set CONFIG_NET_RPL to enable it.\n");
   244d6:	4802      	ldr	r0, [pc, #8]	; (244e0 <net_shell_cmd_rpl+0xc>)
   244d8:	f7de fd6e 	bl	2fb8 <printk>
#endif

	return 0;
}
   244dc:	2000      	movs	r0, #0
   244de:	bd08      	pop	{r3, pc}
   244e0:	00032460 	.word	0x00032460

000244e4 <net_shell_cmd_stacks>:
extern K_THREAD_STACK_DEFINE(sys_work_q_stack,
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);
#endif

int net_shell_cmd_stacks(int argc, char *argv[])
{
   244e4:	b530      	push	{r4, r5, lr}
   244e6:	b087      	sub	sp, #28
	struct net_stack_info *info;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	for (info = __net_stack_start; info != __net_stack_end; info++) {
   244e8:	4d3f      	ldr	r5, [pc, #252]	; (245e8 <net_shell_cmd_stacks+0x104>)
   244ea:	e011      	b.n	24510 <net_shell_cmd_stacks+0x2c>
						unsigned *unused)
{
	*unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	*pcnt = ((size - *unused) * 100) / size;
   244ec:	1a81      	subs	r1, r0, r2
   244ee:	2364      	movs	r3, #100	; 0x64
   244f0:	fb03 f301 	mul.w	r3, r3, r1
   244f4:	fbb3 f3f0 	udiv	r3, r3, r0
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
					     info->size, &pcnt, &unused);

#if defined(CONFIG_INIT_STACKS)
		printk("%s [%s] stack size %zu/%zu bytes unused %u usage"
   244f8:	9304      	str	r3, [sp, #16]
   244fa:	9003      	str	r0, [sp, #12]
   244fc:	9102      	str	r1, [sp, #8]
   244fe:	9201      	str	r2, [sp, #4]
   24500:	9000      	str	r0, [sp, #0]
   24502:	68eb      	ldr	r3, [r5, #12]
   24504:	68aa      	ldr	r2, [r5, #8]
   24506:	6869      	ldr	r1, [r5, #4]
   24508:	4838      	ldr	r0, [pc, #224]	; (245ec <net_shell_cmd_stacks+0x108>)
   2450a:	f7de fd55 	bl	2fb8 <printk>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   2450e:	3514      	adds	r5, #20
   24510:	4b37      	ldr	r3, [pc, #220]	; (245f0 <net_shell_cmd_stacks+0x10c>)
   24512:	429d      	cmp	r5, r3
   24514:	d00b      	beq.n	2452e <net_shell_cmd_stacks+0x4a>
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   24516:	682c      	ldr	r4, [r5, #0]
   24518:	6928      	ldr	r0, [r5, #16]
   2451a:	2300      	movs	r3, #0
	size_t unused = 0;
   2451c:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   2451e:	4298      	cmp	r0, r3
   24520:	d9e4      	bls.n	244ec <net_shell_cmd_stacks+0x8>
		if ((unsigned char)stack[i] == 0xaa) {
   24522:	5ce1      	ldrb	r1, [r4, r3]
   24524:	29aa      	cmp	r1, #170	; 0xaa
   24526:	d1e1      	bne.n	244ec <net_shell_cmd_stacks+0x8>
			unused++;
   24528:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   2452a:	3301      	adds	r3, #1
   2452c:	e7f7      	b.n	2451e <net_shell_cmd_stacks+0x3a>
   2452e:	2300      	movs	r3, #0
   24530:	461a      	mov	r2, r3
   24532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   24536:	d206      	bcs.n	24546 <net_shell_cmd_stacks+0x62>
		if ((unsigned char)stack[i] == 0xaa) {
   24538:	492e      	ldr	r1, [pc, #184]	; (245f4 <net_shell_cmd_stacks+0x110>)
   2453a:	5cc9      	ldrb	r1, [r1, r3]
   2453c:	29aa      	cmp	r1, #170	; 0xaa
   2453e:	d102      	bne.n	24546 <net_shell_cmd_stacks+0x62>
			unused++;
   24540:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   24542:	3301      	adds	r3, #1
   24544:	e7f5      	b.n	24532 <net_shell_cmd_stacks+0x4e>
   24546:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   2454a:	2364      	movs	r3, #100	; 0x64
   2454c:	fb03 f301 	mul.w	r3, r3, r1
   24550:	0adb      	lsrs	r3, r3, #11

#if defined(CONFIG_INIT_STACKS)
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_main_stack),
				     K_THREAD_STACK_SIZEOF(_main_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   24552:	9304      	str	r3, [sp, #16]
   24554:	f44f 6300 	mov.w	r3, #2048	; 0x800
   24558:	9303      	str	r3, [sp, #12]
   2455a:	9102      	str	r1, [sp, #8]
   2455c:	9201      	str	r2, [sp, #4]
   2455e:	9300      	str	r3, [sp, #0]
   24560:	4a25      	ldr	r2, [pc, #148]	; (245f8 <net_shell_cmd_stacks+0x114>)
   24562:	4926      	ldr	r1, [pc, #152]	; (245fc <net_shell_cmd_stacks+0x118>)
   24564:	4826      	ldr	r0, [pc, #152]	; (24600 <net_shell_cmd_stacks+0x11c>)
   24566:	f7de fd27 	bl	2fb8 <printk>
   2456a:	2300      	movs	r3, #0
	size_t unused = 0;
   2456c:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   2456e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   24572:	d206      	bcs.n	24582 <net_shell_cmd_stacks+0x9e>
		if ((unsigned char)stack[i] == 0xaa) {
   24574:	4923      	ldr	r1, [pc, #140]	; (24604 <net_shell_cmd_stacks+0x120>)
   24576:	5cc9      	ldrb	r1, [r1, r3]
   24578:	29aa      	cmp	r1, #170	; 0xaa
   2457a:	d102      	bne.n	24582 <net_shell_cmd_stacks+0x9e>
			unused++;
   2457c:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   2457e:	3301      	adds	r3, #1
   24580:	e7f5      	b.n	2456e <net_shell_cmd_stacks+0x8a>
   24582:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   24586:	2364      	movs	r3, #100	; 0x64
   24588:	fb03 f301 	mul.w	r3, r3, r1
   2458c:	0adb      	lsrs	r3, r3, #11
	       CONFIG_MAIN_STACK_SIZE - unused, CONFIG_MAIN_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_interrupt_stack),
				     K_THREAD_STACK_SIZEOF(_interrupt_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   2458e:	9304      	str	r3, [sp, #16]
   24590:	f44f 6300 	mov.w	r3, #2048	; 0x800
   24594:	9303      	str	r3, [sp, #12]
   24596:	9102      	str	r1, [sp, #8]
   24598:	9201      	str	r2, [sp, #4]
   2459a:	9300      	str	r3, [sp, #0]
   2459c:	4a1a      	ldr	r2, [pc, #104]	; (24608 <net_shell_cmd_stacks+0x124>)
   2459e:	491b      	ldr	r1, [pc, #108]	; (2460c <net_shell_cmd_stacks+0x128>)
   245a0:	4817      	ldr	r0, [pc, #92]	; (24600 <net_shell_cmd_stacks+0x11c>)
   245a2:	f7de fd09 	bl	2fb8 <printk>
   245a6:	2300      	movs	r3, #0
	size_t unused = 0;
   245a8:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   245aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   245ae:	d206      	bcs.n	245be <net_shell_cmd_stacks+0xda>
		if ((unsigned char)stack[i] == 0xaa) {
   245b0:	4917      	ldr	r1, [pc, #92]	; (24610 <net_shell_cmd_stacks+0x12c>)
   245b2:	5cc9      	ldrb	r1, [r1, r3]
   245b4:	29aa      	cmp	r1, #170	; 0xaa
   245b6:	d102      	bne.n	245be <net_shell_cmd_stacks+0xda>
			unused++;
   245b8:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   245ba:	3301      	adds	r3, #1
   245bc:	e7f5      	b.n	245aa <net_shell_cmd_stacks+0xc6>
   245be:	f5c2 6180 	rsb	r1, r2, #1024	; 0x400
   245c2:	2364      	movs	r3, #100	; 0x64
   245c4:	fb03 f301 	mul.w	r3, r3, r1
   245c8:	0a9b      	lsrs	r3, r3, #10
	       CONFIG_ISR_STACK_SIZE - unused, CONFIG_ISR_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(sys_work_q_stack),
				     K_THREAD_STACK_SIZEOF(sys_work_q_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   245ca:	9304      	str	r3, [sp, #16]
   245cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   245d0:	9303      	str	r3, [sp, #12]
   245d2:	9102      	str	r1, [sp, #8]
   245d4:	9201      	str	r2, [sp, #4]
   245d6:	9300      	str	r3, [sp, #0]
   245d8:	4a0e      	ldr	r2, [pc, #56]	; (24614 <net_shell_cmd_stacks+0x130>)
   245da:	490f      	ldr	r1, [pc, #60]	; (24618 <net_shell_cmd_stacks+0x134>)
   245dc:	4808      	ldr	r0, [pc, #32]	; (24600 <net_shell_cmd_stacks+0x11c>)
   245de:	f7de fceb 	bl	2fb8 <printk>
#else
	printk("Enable CONFIG_INIT_STACKS to see usage information.\n");
#endif

	return 0;
}
   245e2:	2000      	movs	r0, #0
   245e4:	b007      	add	sp, #28
   245e6:	bd30      	pop	{r4, r5, pc}
   245e8:	2000d574 	.word	0x2000d574
   245ec:	00032494 	.word	0x00032494
   245f0:	2000d5b0 	.word	0x2000d5b0
   245f4:	2000a428 	.word	0x2000a428
   245f8:	000324d8 	.word	0x000324d8
   245fc:	000324e4 	.word	0x000324e4
   24600:	000324ec 	.word	0x000324ec
   24604:	2000ad68 	.word	0x2000ad68
   24608:	0003252c 	.word	0x0003252c
   2460c:	00032540 	.word	0x00032540
   24610:	2000b568 	.word	0x2000b568
   24614:	00032544 	.word	0x00032544
   24618:	00032558 	.word	0x00032558

0002461c <net_shell_cmd_stats>:

int net_shell_cmd_stats(int argc, char *argv[])
{
   2461c:	b510      	push	{r4, lr}
   2461e:	b082      	sub	sp, #8
	printk("IPv6 recv      %d\tsent\t%d\tdrop\t%d\tforwarded\t%d\n",
   24620:	4c34      	ldr	r4, [pc, #208]	; (246f4 <net_shell_cmd_stats+0xd8>)
   24622:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24624:	9300      	str	r3, [sp, #0]
   24626:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24628:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   2462a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2462c:	4832      	ldr	r0, [pc, #200]	; (246f8 <net_shell_cmd_stats+0xdc>)
   2462e:	f7de fcc3 	bl	2fb8 <printk>
	printk("IPv6 ND recv   %d\tsent\t%d\tdrop\t%d\n",
   24632:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   24636:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   2463a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   2463e:	482f      	ldr	r0, [pc, #188]	; (246fc <net_shell_cmd_stats+0xe0>)
   24640:	f7de fcba 	bl	2fb8 <printk>
	printk("IPv6 MLD recv  %d\tsent\t%d\tdrop\t%d\n",
   24644:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   24648:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   2464c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   24650:	482b      	ldr	r0, [pc, #172]	; (24700 <net_shell_cmd_stats+0xe4>)
   24652:	f7de fcb1 	bl	2fb8 <printk>
	printk("IP vhlerr      %d\thblener\t%d\tlblener\t%d\n",
   24656:	6963      	ldr	r3, [r4, #20]
   24658:	6922      	ldr	r2, [r4, #16]
   2465a:	68e1      	ldr	r1, [r4, #12]
   2465c:	4829      	ldr	r0, [pc, #164]	; (24704 <net_shell_cmd_stats+0xe8>)
   2465e:	f7de fcab 	bl	2fb8 <printk>
	printk("IP fragerr     %d\tchkerr\t%d\tprotoer\t%d\n",
   24662:	6a23      	ldr	r3, [r4, #32]
   24664:	69e2      	ldr	r2, [r4, #28]
   24666:	69a1      	ldr	r1, [r4, #24]
   24668:	4827      	ldr	r0, [pc, #156]	; (24708 <net_shell_cmd_stats+0xec>)
   2466a:	f7de fca5 	bl	2fb8 <printk>
	printk("ICMP recv      %d\tsent\t%d\tdrop\t%d\n",
   2466e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   24670:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   24672:	6b61      	ldr	r1, [r4, #52]	; 0x34
   24674:	4825      	ldr	r0, [pc, #148]	; (2470c <net_shell_cmd_stats+0xf0>)
   24676:	f7de fc9f 	bl	2fb8 <printk>
	printk("ICMP typeer    %d\tchkerr\t%d\n",
   2467a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2467c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   2467e:	4824      	ldr	r0, [pc, #144]	; (24710 <net_shell_cmd_stats+0xf4>)
   24680:	f7de fc9a 	bl	2fb8 <printk>
	printk("UDP recv       %d\tsent\t%d\tdrop\t%d\n",
   24684:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   24686:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   2468a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   2468e:	4821      	ldr	r0, [pc, #132]	; (24714 <net_shell_cmd_stats+0xf8>)
   24690:	f7de fc92 	bl	2fb8 <printk>
	printk("UDP chkerr     %d\n",
   24694:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   24698:	481f      	ldr	r0, [pc, #124]	; (24718 <net_shell_cmd_stats+0xfc>)
   2469a:	f7de fc8d 	bl	2fb8 <printk>
	printk("TCP bytes recv %u\tsent\t%d\n",
   2469e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   246a0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   246a2:	481e      	ldr	r0, [pc, #120]	; (2471c <net_shell_cmd_stats+0x100>)
   246a4:	f7de fc88 	bl	2fb8 <printk>
	printk("TCP seg recv   %d\tsent\t%d\tdrop\t%d\n",
   246a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   246aa:	6da2      	ldr	r2, [r4, #88]	; 0x58
   246ac:	6d61      	ldr	r1, [r4, #84]	; 0x54
   246ae:	481c      	ldr	r0, [pc, #112]	; (24720 <net_shell_cmd_stats+0x104>)
   246b0:	f7de fc82 	bl	2fb8 <printk>
	printk("TCP seg resent %d\tchkerr\t%d\tackerr\t%d\n",
   246b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   246b6:	6e22      	ldr	r2, [r4, #96]	; 0x60
   246b8:	6d21      	ldr	r1, [r4, #80]	; 0x50
   246ba:	481a      	ldr	r0, [pc, #104]	; (24724 <net_shell_cmd_stats+0x108>)
   246bc:	f7de fc7c 	bl	2fb8 <printk>
	printk("TCP seg rsterr %d\trst\t%d\tre-xmit\t%d\n",
   246c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
   246c2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   246c4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   246c6:	4818      	ldr	r0, [pc, #96]	; (24728 <net_shell_cmd_stats+0x10c>)
   246c8:	f7de fc76 	bl	2fb8 <printk>
	printk("TCP conn drop  %d\tconnrst\t%d\n",
   246cc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   246ce:	6f61      	ldr	r1, [r4, #116]	; 0x74
   246d0:	4816      	ldr	r0, [pc, #88]	; (2472c <net_shell_cmd_stats+0x110>)
   246d2:	f7de fc71 	bl	2fb8 <printk>
	printk("Bytes received %u\n", GET_STAT(bytes.received));
   246d6:	68a1      	ldr	r1, [r4, #8]
   246d8:	4815      	ldr	r0, [pc, #84]	; (24730 <net_shell_cmd_stats+0x114>)
   246da:	f7de fc6d 	bl	2fb8 <printk>
	printk("Bytes sent     %u\n", GET_STAT(bytes.sent));
   246de:	6861      	ldr	r1, [r4, #4]
   246e0:	4814      	ldr	r0, [pc, #80]	; (24734 <net_shell_cmd_stats+0x118>)
   246e2:	f7de fc69 	bl	2fb8 <printk>
	printk("Processing err %d\n", GET_STAT(processing_error));
   246e6:	6821      	ldr	r1, [r4, #0]
   246e8:	4813      	ldr	r0, [pc, #76]	; (24738 <net_shell_cmd_stats+0x11c>)
   246ea:	f7de fc65 	bl	2fb8 <printk>
#else
	printk("Network statistics not compiled in.\n");
#endif

	return 0;
}
   246ee:	2000      	movs	r0, #0
   246f0:	b002      	add	sp, #8
   246f2:	bd10      	pop	{r4, pc}
   246f4:	20002b58 	.word	0x20002b58
   246f8:	00032560 	.word	0x00032560
   246fc:	00032590 	.word	0x00032590
   24700:	000325b4 	.word	0x000325b4
   24704:	000325d8 	.word	0x000325d8
   24708:	00032604 	.word	0x00032604
   2470c:	0003262c 	.word	0x0003262c
   24710:	00032650 	.word	0x00032650
   24714:	00032670 	.word	0x00032670
   24718:	00032694 	.word	0x00032694
   2471c:	000326a8 	.word	0x000326a8
   24720:	000326c4 	.word	0x000326c4
   24724:	000326e8 	.word	0x000326e8
   24728:	00032710 	.word	0x00032710
   2472c:	00032738 	.word	0x00032738
   24730:	00032758 	.word	0x00032758
   24734:	0003276c 	.word	0x0003276c
   24738:	00032780 	.word	0x00032780

0002473c <tcp_sent_cb>:

static void tcp_sent_cb(struct net_context *context,
			int status,
			void *token,
			void *user_data)
{
   2473c:	b508      	push	{r3, lr}
	printk("Message sent\n");
   2473e:	4802      	ldr	r0, [pc, #8]	; (24748 <tcp_sent_cb+0xc>)
   24740:	f7de fc3a 	bl	2fb8 <printk>
   24744:	bd08      	pop	{r3, pc}
   24746:	bf00      	nop
   24748:	00032a40 	.word	0x00032a40

0002474c <net_shell_cmd_conn>:
{
   2474c:	b510      	push	{r4, lr}
   2474e:	b082      	sub	sp, #8
	int count = 0;
   24750:	ac02      	add	r4, sp, #8
   24752:	2300      	movs	r3, #0
   24754:	f844 3d04 	str.w	r3, [r4, #-4]!
	printk("     Context   \tIface         Flags "
   24758:	4810      	ldr	r0, [pc, #64]	; (2479c <net_shell_cmd_conn+0x50>)
   2475a:	f7de fc2d 	bl	2fb8 <printk>
	net_context_foreach(context_cb, &count);
   2475e:	4621      	mov	r1, r4
   24760:	480f      	ldr	r0, [pc, #60]	; (247a0 <net_shell_cmd_conn+0x54>)
   24762:	f7f8 ff03 	bl	1d56c <net_context_foreach>
	if (count == 0) {
   24766:	9b01      	ldr	r3, [sp, #4]
   24768:	b17b      	cbz	r3, 2478a <net_shell_cmd_conn+0x3e>
	printk("\nTCP        Src port  Dst port   Send-Seq   Send-Ack  MSS"
   2476a:	490e      	ldr	r1, [pc, #56]	; (247a4 <net_shell_cmd_conn+0x58>)
   2476c:	480e      	ldr	r0, [pc, #56]	; (247a8 <net_shell_cmd_conn+0x5c>)
   2476e:	f7de fc23 	bl	2fb8 <printk>
	count = 0;
   24772:	a902      	add	r1, sp, #8
   24774:	2300      	movs	r3, #0
   24776:	f841 3d04 	str.w	r3, [r1, #-4]!
	net_tcp_foreach(tcp_cb, &count);
   2477a:	480c      	ldr	r0, [pc, #48]	; (247ac <net_shell_cmd_conn+0x60>)
   2477c:	f7ff fa48 	bl	23c10 <net_tcp_foreach>
	if (count == 0) {
   24780:	9b01      	ldr	r3, [sp, #4]
   24782:	b133      	cbz	r3, 24792 <net_shell_cmd_conn+0x46>
}
   24784:	2000      	movs	r0, #0
   24786:	b002      	add	sp, #8
   24788:	bd10      	pop	{r4, pc}
		printk("No connections\n");
   2478a:	4809      	ldr	r0, [pc, #36]	; (247b0 <net_shell_cmd_conn+0x64>)
   2478c:	f7de fc14 	bl	2fb8 <printk>
   24790:	e7eb      	b.n	2476a <net_shell_cmd_conn+0x1e>
		printk("No TCP connections\n");
   24792:	4808      	ldr	r0, [pc, #32]	; (247b4 <net_shell_cmd_conn+0x68>)
   24794:	f7de fc10 	bl	2fb8 <printk>
   24798:	e7f4      	b.n	24784 <net_shell_cmd_conn+0x38>
   2479a:	bf00      	nop
   2479c:	0003218c 	.word	0x0003218c
   247a0:	00024929 	.word	0x00024929
   247a4:	0002f114 	.word	0x0002f114
   247a8:	000321dc 	.word	0x000321dc
   247ac:	000247b9 	.word	0x000247b9
   247b0:	000321cc 	.word	0x000321cc
   247b4:	0003221c 	.word	0x0003221c

000247b8 <tcp_cb>:
{
   247b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   247bc:	b084      	sub	sp, #16
   247be:	4604      	mov	r4, r0
   247c0:	460f      	mov	r7, r1
	u16_t recv_mss = net_tcp_get_recv_mss(tcp);
   247c2:	f7fe ffe4 	bl	2378e <net_tcp_get_recv_mss>
   247c6:	4680      	mov	r8, r0
	       ntohs(net_sin6_ptr(&tcp->context->local)->sin6_port),
   247c8:	6823      	ldr	r3, [r4, #0]
   247ca:	895a      	ldrh	r2, [r3, #10]
   247cc:	0215      	lsls	r5, r2, #8
   247ce:	ea45 2512 	orr.w	r5, r5, r2, lsr #8
   247d2:	b2ad      	uxth	r5, r5
	       ntohs(net_sin6(&tcp->context->remote)->sin6_port),
   247d4:	8adb      	ldrh	r3, [r3, #22]
   247d6:	021e      	lsls	r6, r3, #8
   247d8:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
   247dc:	b2b6      	uxth	r6, r6
	printk("%p    %5u     %5u %10u %10u %5u   %s\n",
   247de:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
   247e2:	f8d4 a09c 	ldr.w	sl, [r4, #156]	; 0x9c
   247e6:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   247ea:	f3c0 3043 	ubfx	r0, r0, #13, #4
   247ee:	f7ff f845 	bl	2387c <net_tcp_state_str>
   247f2:	9003      	str	r0, [sp, #12]
   247f4:	f8cd 8008 	str.w	r8, [sp, #8]
   247f8:	f8cd a004 	str.w	sl, [sp, #4]
   247fc:	f8cd 9000 	str.w	r9, [sp]
   24800:	4633      	mov	r3, r6
   24802:	462a      	mov	r2, r5
   24804:	4621      	mov	r1, r4
   24806:	4804      	ldr	r0, [pc, #16]	; (24818 <tcp_cb+0x60>)
   24808:	f7de fbd6 	bl	2fb8 <printk>
	(*count)++;
   2480c:	683b      	ldr	r3, [r7, #0]
   2480e:	3301      	adds	r3, #1
   24810:	603b      	str	r3, [r7, #0]
}
   24812:	b004      	add	sp, #16
   24814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24818:	0003299c 	.word	0x0003299c

0002481c <get_addresses>:
{
   2481c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24820:	b083      	sub	sp, #12
   24822:	460d      	mov	r5, r1
   24824:	4616      	mov	r6, r2
   24826:	461f      	mov	r7, r3
	if (context->local.family == AF_INET6) {
   24828:	8903      	ldrh	r3, [r0, #8]
   2482a:	2b0a      	cmp	r3, #10
   2482c:	d008      	beq.n	24840 <get_addresses+0x24>
	if (context->local.family == AF_UNSPEC) {
   2482e:	b393      	cbz	r3, 24896 <get_addresses+0x7a>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
   24830:	4a1c      	ldr	r2, [pc, #112]	; (248a4 <get_addresses+0x88>)
   24832:	4631      	mov	r1, r6
   24834:	4628      	mov	r0, r5
   24836:	f7de fbcd 	bl	2fd4 <snprintk>
}
   2483a:	b003      	add	sp, #12
   2483c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24840:	4604      	mov	r4, r0
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   24842:	f8df 9068 	ldr.w	r9, [pc, #104]	; 248ac <get_addresses+0x90>
   24846:	2328      	movs	r3, #40	; 0x28
   24848:	464a      	mov	r2, r9
   2484a:	68c1      	ldr	r1, [r0, #12]
   2484c:	200a      	movs	r0, #10
   2484e:	f7f9 fc1d 	bl	1e08c <net_addr_ntop>
			 ntohs(net_sin6_ptr(&context->local)->sin6_port));
   24852:	8962      	ldrh	r2, [r4, #10]
   24854:	0213      	lsls	r3, r2, #8
   24856:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2485a:	b29b      	uxth	r3, r3
		snprintk(addr_local, local_len, "[%s]:%u",
   2485c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 248b0 <get_addresses+0x94>
   24860:	9300      	str	r3, [sp, #0]
   24862:	4603      	mov	r3, r0
   24864:	4642      	mov	r2, r8
   24866:	4631      	mov	r1, r6
   24868:	4628      	mov	r0, r5
   2486a:	f7de fbb3 	bl	2fd4 <snprintk>
   2486e:	2328      	movs	r3, #40	; 0x28
   24870:	464a      	mov	r2, r9
   24872:	f104 0118 	add.w	r1, r4, #24
   24876:	200a      	movs	r0, #10
   24878:	f7f9 fc08 	bl	1e08c <net_addr_ntop>
			 ntohs(net_sin6(&context->remote)->sin6_port));
   2487c:	8ae2      	ldrh	r2, [r4, #22]
   2487e:	0213      	lsls	r3, r2, #8
   24880:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   24884:	b29b      	uxth	r3, r3
		snprintk(addr_remote, remote_len, "[%s]:%u",
   24886:	9300      	str	r3, [sp, #0]
   24888:	4603      	mov	r3, r0
   2488a:	4642      	mov	r2, r8
   2488c:	990a      	ldr	r1, [sp, #40]	; 0x28
   2488e:	4638      	mov	r0, r7
   24890:	f7de fba0 	bl	2fd4 <snprintk>
   24894:	e7d1      	b.n	2483a <get_addresses+0x1e>
		snprintk(addr_local, local_len, "AF_UNSPEC");
   24896:	4a04      	ldr	r2, [pc, #16]	; (248a8 <get_addresses+0x8c>)
   24898:	4631      	mov	r1, r6
   2489a:	4628      	mov	r0, r5
   2489c:	f7de fb9a 	bl	2fd4 <snprintk>
   248a0:	e7cb      	b.n	2483a <get_addresses+0x1e>
   248a2:	bf00      	nop
   248a4:	00031d64 	.word	0x00031d64
   248a8:	00031d58 	.word	0x00031d58
   248ac:	20002530 	.word	0x20002530
   248b0:	00031d50 	.word	0x00031d50

000248b4 <print_connect_info>:
{
   248b4:	b570      	push	{r4, r5, r6, lr}
	switch (family) {
   248b6:	2802      	cmp	r0, #2
   248b8:	d008      	beq.n	248cc <print_connect_info+0x18>
   248ba:	460d      	mov	r5, r1
   248bc:	4614      	mov	r4, r2
   248be:	280a      	cmp	r0, #10
   248c0:	d008      	beq.n	248d4 <print_connect_info+0x20>
		printk("Unknown protocol family (%d)\n", family);
   248c2:	4601      	mov	r1, r0
   248c4:	4813      	ldr	r0, [pc, #76]	; (24914 <print_connect_info+0x60>)
   248c6:	f7de fb77 	bl	2fb8 <printk>
   248ca:	bd70      	pop	{r4, r5, r6, pc}
		printk("IPv4 not supported\n");
   248cc:	4812      	ldr	r0, [pc, #72]	; (24918 <print_connect_info+0x64>)
   248ce:	f7de fb73 	bl	2fb8 <printk>
		break;
   248d2:	bd70      	pop	{r4, r5, r6, pc}
   248d4:	4e11      	ldr	r6, [pc, #68]	; (2491c <print_connect_info+0x68>)
   248d6:	2328      	movs	r3, #40	; 0x28
   248d8:	4632      	mov	r2, r6
   248da:	3104      	adds	r1, #4
   248dc:	200a      	movs	r0, #10
   248de:	f7f9 fbd5 	bl	1e08c <net_addr_ntop>
		       ntohs(net_sin6(myaddr)->sin6_port));
   248e2:	886b      	ldrh	r3, [r5, #2]
   248e4:	021a      	lsls	r2, r3, #8
   248e6:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("Connecting from [%s]:%u ",
   248ea:	b292      	uxth	r2, r2
   248ec:	4601      	mov	r1, r0
   248ee:	480c      	ldr	r0, [pc, #48]	; (24920 <print_connect_info+0x6c>)
   248f0:	f7de fb62 	bl	2fb8 <printk>
   248f4:	2328      	movs	r3, #40	; 0x28
   248f6:	4632      	mov	r2, r6
   248f8:	1d21      	adds	r1, r4, #4
   248fa:	200a      	movs	r0, #10
   248fc:	f7f9 fbc6 	bl	1e08c <net_addr_ntop>
		       ntohs(net_sin6(addr)->sin6_port));
   24900:	8863      	ldrh	r3, [r4, #2]
   24902:	021a      	lsls	r2, r3, #8
   24904:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("to [%s]:%u\n",
   24908:	b292      	uxth	r2, r2
   2490a:	4601      	mov	r1, r0
   2490c:	4805      	ldr	r0, [pc, #20]	; (24924 <print_connect_info+0x70>)
   2490e:	f7de fb53 	bl	2fb8 <printk>
		break;
   24912:	bd70      	pop	{r4, r5, r6, pc}
   24914:	00032934 	.word	0x00032934
   24918:	000328f8 	.word	0x000328f8
   2491c:	20002530 	.word	0x20002530
   24920:	0003290c 	.word	0x0003290c
   24924:	00032928 	.word	0x00032928

00024928 <context_cb>:
{
   24928:	b5f0      	push	{r4, r5, r6, r7, lr}
   2492a:	b09f      	sub	sp, #124	; 0x7c
   2492c:	4604      	mov	r4, r0
   2492e:	460d      	mov	r5, r1
	char addr_remote[ADDR_LEN + 7] = "";
   24930:	2100      	movs	r1, #0
   24932:	9106      	str	r1, [sp, #24]
   24934:	222b      	movs	r2, #43	; 0x2b
   24936:	a807      	add	r0, sp, #28
   24938:	f005 ffee 	bl	2a918 <memset>
	get_addresses(context, addr_local, sizeof(addr_local),
   2493c:	222f      	movs	r2, #47	; 0x2f
   2493e:	9200      	str	r2, [sp, #0]
   24940:	ab06      	add	r3, sp, #24
   24942:	a912      	add	r1, sp, #72	; 0x48
   24944:	4620      	mov	r0, r4
   24946:	f7ff ff69 	bl	2481c <get_addresses>
	       (*count) + 1, context,
   2494a:	682e      	ldr	r6, [r5, #0]
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   2494c:	3601      	adds	r6, #1
	return net_if_get_by_index(context->iface);
   2494e:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   24952:	f7f7 fd0b 	bl	1c36c <net_if_get_by_index>
   24956:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   24958:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   2495c:	f012 0f10 	tst.w	r2, #16
   24960:	d022      	beq.n	249a8 <context_cb+0x80>
		return AF_INET6;
   24962:	210a      	movs	r1, #10
   24964:	290a      	cmp	r1, #10
   24966:	d021      	beq.n	249ac <context_cb+0x84>
   24968:	2134      	movs	r1, #52	; 0x34
	if (context->flags & NET_CONTEXT_TYPE) {
   2496a:	f012 0f20 	tst.w	r2, #32
   2496e:	d01f      	beq.n	249b0 <context_cb+0x88>
		return SOCK_STREAM;
   24970:	2001      	movs	r0, #1
   24972:	2802      	cmp	r0, #2
   24974:	d01e      	beq.n	249b4 <context_cb+0x8c>
   24976:	2053      	movs	r0, #83	; 0x53
	if (context->flags & NET_CONTEXT_PROTO) {
   24978:	f012 0f40 	tst.w	r2, #64	; 0x40
   2497c:	d01c      	beq.n	249b8 <context_cb+0x90>
		return IPPROTO_TCP;
   2497e:	2206      	movs	r2, #6
   24980:	2a11      	cmp	r2, #17
   24982:	d01b      	beq.n	249bc <context_cb+0x94>
   24984:	2754      	movs	r7, #84	; 0x54
   24986:	aa06      	add	r2, sp, #24
   24988:	9204      	str	r2, [sp, #16]
   2498a:	aa12      	add	r2, sp, #72	; 0x48
   2498c:	9203      	str	r2, [sp, #12]
   2498e:	9702      	str	r7, [sp, #8]
   24990:	9001      	str	r0, [sp, #4]
   24992:	9100      	str	r1, [sp, #0]
   24994:	4622      	mov	r2, r4
   24996:	4631      	mov	r1, r6
   24998:	4809      	ldr	r0, [pc, #36]	; (249c0 <context_cb+0x98>)
   2499a:	f7de fb0d 	bl	2fb8 <printk>
	(*count)++;
   2499e:	682b      	ldr	r3, [r5, #0]
   249a0:	3301      	adds	r3, #1
   249a2:	602b      	str	r3, [r5, #0]
}
   249a4:	b01f      	add	sp, #124	; 0x7c
   249a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   249a8:	2102      	movs	r1, #2
   249aa:	e7db      	b.n	24964 <context_cb+0x3c>
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   249ac:	2136      	movs	r1, #54	; 0x36
   249ae:	e7dc      	b.n	2496a <context_cb+0x42>
	return SOCK_DGRAM;
   249b0:	2002      	movs	r0, #2
   249b2:	e7de      	b.n	24972 <context_cb+0x4a>
   249b4:	2044      	movs	r0, #68	; 0x44
   249b6:	e7df      	b.n	24978 <context_cb+0x50>
	return IPPROTO_UDP;
   249b8:	2211      	movs	r2, #17
   249ba:	e7e1      	b.n	24980 <context_cb+0x58>
   249bc:	2755      	movs	r7, #85	; 0x55
   249be:	e7e2      	b.n	24986 <context_cb+0x5e>
   249c0:	00031d10 	.word	0x00031d10

000249c4 <net_shell_cmd_iface>:
{
   249c4:	b508      	push	{r3, lr}
	net_if_foreach(iface_cb, NULL);
   249c6:	2100      	movs	r1, #0
   249c8:	4802      	ldr	r0, [pc, #8]	; (249d4 <net_shell_cmd_iface+0x10>)
   249ca:	f7f7 fceb 	bl	1c3a4 <net_if_foreach>
}
   249ce:	2000      	movs	r0, #0
   249d0:	bd08      	pop	{r3, pc}
   249d2:	bf00      	nop
   249d4:	0001f575 	.word	0x0001f575

000249d8 <net_shell_cmd_route>:
{
   249d8:	b508      	push	{r3, lr}
	net_if_foreach(iface_per_route_cb, NULL);
   249da:	2100      	movs	r1, #0
   249dc:	4802      	ldr	r0, [pc, #8]	; (249e8 <net_shell_cmd_route+0x10>)
   249de:	f7f7 fce1 	bl	1c3a4 <net_if_foreach>
}
   249e2:	2000      	movs	r0, #0
   249e4:	bd08      	pop	{r3, pc}
   249e6:	bf00      	nop
   249e8:	00024e15 	.word	0x00024e15

000249ec <net_shell_cmd_mem>:
{
   249ec:	b500      	push	{lr}
   249ee:	b093      	sub	sp, #76	; 0x4c
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
   249f0:	ab0e      	add	r3, sp, #56	; 0x38
   249f2:	aa0f      	add	r2, sp, #60	; 0x3c
   249f4:	a910      	add	r1, sp, #64	; 0x40
   249f6:	a811      	add	r0, sp, #68	; 0x44
   249f8:	f7f9 f9aa 	bl	1dd50 <net_pkt_get_info>
	printk("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
   249fc:	f44f 7100 	mov.w	r1, #512	; 0x200
   24a00:	4819      	ldr	r0, [pc, #100]	; (24a68 <net_shell_cmd_mem+0x7c>)
   24a02:	f7de fad9 	bl	2fb8 <printk>
	printk("Network buffer pools:\n");
   24a06:	4819      	ldr	r0, [pc, #100]	; (24a6c <net_shell_cmd_mem+0x80>)
   24a08:	f7de fad6 	bl	2fb8 <printk>
	printk("(CONFIG_NET_BUF_POOL_USAGE to see free #s)\n");
   24a0c:	4818      	ldr	r0, [pc, #96]	; (24a70 <net_shell_cmd_mem+0x84>)
   24a0e:	f7de fad3 	bl	2fb8 <printk>
	printk("Address\t\tTotal\tName\n");
   24a12:	4818      	ldr	r0, [pc, #96]	; (24a74 <net_shell_cmd_mem+0x88>)
   24a14:	f7de fad0 	bl	2fb8 <printk>
	printk("%p\t%d\tRX\n", rx, rx->num_blocks);
   24a18:	9911      	ldr	r1, [sp, #68]	; 0x44
   24a1a:	688a      	ldr	r2, [r1, #8]
   24a1c:	4816      	ldr	r0, [pc, #88]	; (24a78 <net_shell_cmd_mem+0x8c>)
   24a1e:	f7de facb 	bl	2fb8 <printk>
	printk("%p\t%d\tTX\n", tx, tx->num_blocks);
   24a22:	9910      	ldr	r1, [sp, #64]	; 0x40
   24a24:	688a      	ldr	r2, [r1, #8]
   24a26:	4815      	ldr	r0, [pc, #84]	; (24a7c <net_shell_cmd_mem+0x90>)
   24a28:	f7de fac6 	bl	2fb8 <printk>
	printk("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
   24a2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   24a2e:	8a0a      	ldrh	r2, [r1, #16]
   24a30:	4813      	ldr	r0, [pc, #76]	; (24a80 <net_shell_cmd_mem+0x94>)
   24a32:	f7de fac1 	bl	2fb8 <printk>
	printk("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   24a36:	990e      	ldr	r1, [sp, #56]	; 0x38
   24a38:	8a0a      	ldrh	r2, [r1, #16]
   24a3a:	4812      	ldr	r0, [pc, #72]	; (24a84 <net_shell_cmd_mem+0x98>)
   24a3c:	f7de fabc 	bl	2fb8 <printk>
		memset(&info, 0, sizeof(info));
   24a40:	2238      	movs	r2, #56	; 0x38
   24a42:	2100      	movs	r1, #0
   24a44:	4668      	mov	r0, sp
   24a46:	f005 ff67 	bl	2a918 <memset>
		net_context_foreach(context_info, &info);
   24a4a:	4669      	mov	r1, sp
   24a4c:	480e      	ldr	r0, [pc, #56]	; (24a88 <net_shell_cmd_mem+0x9c>)
   24a4e:	f7f8 fd8d 	bl	1d56c <net_context_foreach>
		if (!info.are_external_pools) {
   24a52:	f89d 3004 	ldrb.w	r3, [sp, #4]
   24a56:	b11b      	cbz	r3, 24a60 <net_shell_cmd_mem+0x74>
}
   24a58:	2000      	movs	r0, #0
   24a5a:	b013      	add	sp, #76	; 0x4c
   24a5c:	f85d fb04 	ldr.w	pc, [sp], #4
			printk("No external memory pools found.\n");
   24a60:	480a      	ldr	r0, [pc, #40]	; (24a8c <net_shell_cmd_mem+0xa0>)
   24a62:	f7de faa9 	bl	2fb8 <printk>
   24a66:	e7f7      	b.n	24a58 <net_shell_cmd_mem+0x6c>
   24a68:	000322b4 	.word	0x000322b4
   24a6c:	000322d0 	.word	0x000322d0
   24a70:	000322e8 	.word	0x000322e8
   24a74:	00032314 	.word	0x00032314
   24a78:	0003232c 	.word	0x0003232c
   24a7c:	00032338 	.word	0x00032338
   24a80:	00032344 	.word	0x00032344
   24a84:	00032354 	.word	0x00032354
   24a88:	00024459 	.word	0x00024459
   24a8c:	00032364 	.word	0x00032364

00024a90 <net_shell_cmd_nbr>:
{
   24a90:	b510      	push	{r4, lr}
   24a92:	b086      	sub	sp, #24
	int count = 0;
   24a94:	2300      	movs	r3, #0
   24a96:	9305      	str	r3, [sp, #20]
	if (argv[arg]) {
   24a98:	6848      	ldr	r0, [r1, #4]
   24a9a:	b1d8      	cbz	r0, 24ad4 <net_shell_cmd_nbr+0x44>
   24a9c:	460c      	mov	r4, r1
		if (strcmp(argv[arg], "rm")) {
   24a9e:	4920      	ldr	r1, [pc, #128]	; (24b20 <net_shell_cmd_nbr+0x90>)
   24aa0:	f7db fcb2 	bl	408 <strcmp>
   24aa4:	b9f8      	cbnz	r0, 24ae6 <net_shell_cmd_nbr+0x56>
		if (!argv[++arg]) {
   24aa6:	68a1      	ldr	r1, [r4, #8]
   24aa8:	b311      	cbz	r1, 24af0 <net_shell_cmd_nbr+0x60>
		ret = net_addr_pton(AF_INET6, argv[arg], &addr);
   24aaa:	aa01      	add	r2, sp, #4
   24aac:	200a      	movs	r0, #10
   24aae:	f7f9 fbc4 	bl	1e23a <net_addr_pton>
		if (ret < 0) {
   24ab2:	2800      	cmp	r0, #0
   24ab4:	db20      	blt.n	24af8 <net_shell_cmd_nbr+0x68>
		if (!net_ipv6_nbr_rm(NULL, &addr)) {
   24ab6:	a901      	add	r1, sp, #4
   24ab8:	2000      	movs	r0, #0
   24aba:	f7fb f83f 	bl	1fb3c <net_ipv6_nbr_rm>
   24abe:	bb00      	cbnz	r0, 24b02 <net_shell_cmd_nbr+0x72>
   24ac0:	2328      	movs	r3, #40	; 0x28
   24ac2:	4a18      	ldr	r2, [pc, #96]	; (24b24 <net_shell_cmd_nbr+0x94>)
   24ac4:	a901      	add	r1, sp, #4
   24ac6:	200a      	movs	r0, #10
   24ac8:	f7f9 fae0 	bl	1e08c <net_addr_ntop>
			printk("Cannot remove neighbor %s\n",
   24acc:	4601      	mov	r1, r0
   24ace:	4816      	ldr	r0, [pc, #88]	; (24b28 <net_shell_cmd_nbr+0x98>)
   24ad0:	f7de fa72 	bl	2fb8 <printk>
	net_ipv6_nbr_foreach(nbr_cb, &count);
   24ad4:	a905      	add	r1, sp, #20
   24ad6:	4815      	ldr	r0, [pc, #84]	; (24b2c <net_shell_cmd_nbr+0x9c>)
   24ad8:	f7fb f822 	bl	1fb20 <net_ipv6_nbr_foreach>
	if (count == 0) {
   24adc:	9b05      	ldr	r3, [sp, #20]
   24ade:	b1db      	cbz	r3, 24b18 <net_shell_cmd_nbr+0x88>
}
   24ae0:	2000      	movs	r0, #0
   24ae2:	b006      	add	sp, #24
   24ae4:	bd10      	pop	{r4, pc}
			printk("Unknown command '%s'\n", argv[arg]);
   24ae6:	6861      	ldr	r1, [r4, #4]
   24ae8:	4811      	ldr	r0, [pc, #68]	; (24b30 <net_shell_cmd_nbr+0xa0>)
   24aea:	f7de fa65 	bl	2fb8 <printk>
			return 0;
   24aee:	e7f7      	b.n	24ae0 <net_shell_cmd_nbr+0x50>
			printk("Neighbor IPv6 address missing.\n");
   24af0:	4810      	ldr	r0, [pc, #64]	; (24b34 <net_shell_cmd_nbr+0xa4>)
   24af2:	f7de fa61 	bl	2fb8 <printk>
			return 0;
   24af6:	e7f3      	b.n	24ae0 <net_shell_cmd_nbr+0x50>
			printk("Cannot parse '%s'\n", argv[arg]);
   24af8:	68a1      	ldr	r1, [r4, #8]
   24afa:	480f      	ldr	r0, [pc, #60]	; (24b38 <net_shell_cmd_nbr+0xa8>)
   24afc:	f7de fa5c 	bl	2fb8 <printk>
			return 0;
   24b00:	e7ee      	b.n	24ae0 <net_shell_cmd_nbr+0x50>
   24b02:	2328      	movs	r3, #40	; 0x28
   24b04:	4a07      	ldr	r2, [pc, #28]	; (24b24 <net_shell_cmd_nbr+0x94>)
   24b06:	a901      	add	r1, sp, #4
   24b08:	200a      	movs	r0, #10
   24b0a:	f7f9 fabf 	bl	1e08c <net_addr_ntop>
			printk("Neighbor %s removed.\n",
   24b0e:	4601      	mov	r1, r0
   24b10:	480a      	ldr	r0, [pc, #40]	; (24b3c <net_shell_cmd_nbr+0xac>)
   24b12:	f7de fa51 	bl	2fb8 <printk>
   24b16:	e7dd      	b.n	24ad4 <net_shell_cmd_nbr+0x44>
		printk("No neighbors.\n");
   24b18:	4809      	ldr	r0, [pc, #36]	; (24b40 <net_shell_cmd_nbr+0xb0>)
   24b1a:	f7de fa4d 	bl	2fb8 <printk>
   24b1e:	e7df      	b.n	24ae0 <net_shell_cmd_nbr+0x50>
   24b20:	00032388 	.word	0x00032388
   24b24:	20002530 	.word	0x20002530
   24b28:	000323d8 	.word	0x000323d8
   24b2c:	00024be9 	.word	0x00024be9
   24b30:	0003238c 	.word	0x0003238c
   24b34:	000323a4 	.word	0x000323a4
   24b38:	000323c4 	.word	0x000323c4
   24b3c:	000323f4 	.word	0x000323f4
   24b40:	0003240c 	.word	0x0003240c

00024b44 <route_cb>:
{
   24b44:	b538      	push	{r3, r4, r5, lr}
	if (entry->iface != iface) {
   24b46:	68c3      	ldr	r3, [r0, #12]
   24b48:	428b      	cmp	r3, r1
   24b4a:	d000      	beq.n	24b4e <route_cb+0xa>
   24b4c:	bd38      	pop	{r3, r4, r5, pc}
   24b4e:	4604      	mov	r4, r0
   24b50:	2328      	movs	r3, #40	; 0x28
   24b52:	4a1e      	ldr	r2, [pc, #120]	; (24bcc <route_cb+0x88>)
   24b54:	f100 0110 	add.w	r1, r0, #16
   24b58:	200a      	movs	r0, #10
   24b5a:	f7f9 fa97 	bl	1e08c <net_addr_ntop>
	printk("IPv6 prefix : %s/%d\n",
   24b5e:	f894 2020 	ldrb.w	r2, [r4, #32]
   24b62:	4601      	mov	r1, r0
   24b64:	481a      	ldr	r0, [pc, #104]	; (24bd0 <route_cb+0x8c>)
   24b66:	f7de fa27 	bl	2fb8 <printk>
	return list->head;
   24b6a:	6864      	ldr	r4, [r4, #4]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24b6c:	2500      	movs	r5, #0
   24b6e:	e009      	b.n	24b84 <route_cb+0x40>
			printk("addr : <unknown>\n");
   24b70:	4818      	ldr	r0, [pc, #96]	; (24bd4 <route_cb+0x90>)
   24b72:	f7de fa21 	bl	2fb8 <printk>
		count++;
   24b76:	3501      	adds	r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   24b78:	4622      	mov	r2, r4
   24b7a:	b1dc      	cbz	r4, 24bb4 <route_cb+0x70>
	return node->next;
   24b7c:	6823      	ldr	r3, [r4, #0]
   24b7e:	b1db      	cbz	r3, 24bb8 <route_cb+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24b80:	b1e2      	cbz	r2, 24bbc <route_cb+0x78>
	return node->next;
   24b82:	6824      	ldr	r4, [r4, #0]
   24b84:	b1e4      	cbz	r4, 24bc0 <route_cb+0x7c>
		if (!nexthop_route->nbr) {
   24b86:	6861      	ldr	r1, [r4, #4]
   24b88:	2900      	cmp	r1, #0
   24b8a:	d0f5      	beq.n	24b78 <route_cb+0x34>
		printk("\tneighbor : %p\t", nexthop_route->nbr);
   24b8c:	4812      	ldr	r0, [pc, #72]	; (24bd8 <route_cb+0x94>)
   24b8e:	f7de fa13 	bl	2fb8 <printk>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   24b92:	6863      	ldr	r3, [r4, #4]
   24b94:	7858      	ldrb	r0, [r3, #1]
   24b96:	28ff      	cmp	r0, #255	; 0xff
   24b98:	d0ea      	beq.n	24b70 <route_cb+0x2c>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
   24b9a:	f7fa fcc1 	bl	1f520 <net_nbr_get_lladdr>
	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   24b9e:	2318      	movs	r3, #24
   24ba0:	4a0e      	ldr	r2, [pc, #56]	; (24bdc <route_cb+0x98>)
   24ba2:	7841      	ldrb	r1, [r0, #1]
   24ba4:	3002      	adds	r0, #2
   24ba6:	f7f9 fa47 	bl	1e038 <net_sprint_ll_addr_buf>
			printk("addr : %s\n",
   24baa:	4601      	mov	r1, r0
   24bac:	480c      	ldr	r0, [pc, #48]	; (24be0 <route_cb+0x9c>)
   24bae:	f7de fa03 	bl	2fb8 <printk>
   24bb2:	e7e0      	b.n	24b76 <route_cb+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24bb4:	4623      	mov	r3, r4
   24bb6:	e7e2      	b.n	24b7e <route_cb+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   24bb8:	2400      	movs	r4, #0
   24bba:	e7e3      	b.n	24b84 <route_cb+0x40>
   24bbc:	2400      	movs	r4, #0
   24bbe:	e7e1      	b.n	24b84 <route_cb+0x40>
	if (count == 0) {
   24bc0:	2d00      	cmp	r5, #0
   24bc2:	d1c3      	bne.n	24b4c <route_cb+0x8>
		printk("\t<none>\n");
   24bc4:	4807      	ldr	r0, [pc, #28]	; (24be4 <route_cb+0xa0>)
   24bc6:	f7de f9f7 	bl	2fb8 <printk>
   24bca:	e7bf      	b.n	24b4c <route_cb+0x8>
   24bcc:	20002530 	.word	0x20002530
   24bd0:	00032954 	.word	0x00032954
   24bd4:	0003297c 	.word	0x0003297c
   24bd8:	0003296c 	.word	0x0003296c
   24bdc:	20002518 	.word	0x20002518
   24be0:	00032990 	.word	0x00032990
   24be4:	00031e90 	.word	0x00031e90

00024be8 <nbr_cb>:
{
   24be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24bec:	b08f      	sub	sp, #60	; 0x3c
   24bee:	4604      	mov	r4, r0
   24bf0:	460d      	mov	r5, r1
	if (*count == 0) {
   24bf2:	680b      	ldr	r3, [r1, #0]
   24bf4:	2b00      	cmp	r3, #0
   24bf6:	d052      	beq.n	24c9e <nbr_cb+0xb6>
	(*count)++;
   24bf8:	682b      	ldr	r3, [r5, #0]
   24bfa:	3301      	adds	r3, #1
   24bfc:	602b      	str	r3, [r5, #0]
   24bfe:	68e3      	ldr	r3, [r4, #12]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
   24c00:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   24c04:	f7fa ff68 	bl	1fad8 <net_ipv6_nbr_state2str>
   24c08:	900b      	str	r0, [sp, #44]	; 0x2c
	if (strlen(state_str) == 5) {
   24c0a:	f7db fd79 	bl	700 <strlen>
   24c0e:	2805      	cmp	r0, #5
   24c10:	d04a      	beq.n	24ca8 <nbr_cb+0xc0>
	char *state_pad = "";
   24c12:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 24cbc <nbr_cb+0xd4>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24c16:	682b      	ldr	r3, [r5, #0]
   24c18:	930c      	str	r3, [sp, #48]	; 0x30
   24c1a:	68a3      	ldr	r3, [r4, #8]
   24c1c:	930d      	str	r3, [sp, #52]	; 0x34
   24c1e:	68e0      	ldr	r0, [r4, #12]
	       net_ipv6_nbr_data(nbr)->link_metric,
   24c20:	f8b0 5066 	ldrh.w	r5, [r0, #102]	; 0x66
	       nbr->ref,
   24c24:	7826      	ldrb	r6, [r4, #0]
	       net_ipv6_nbr_data(nbr)->ns_count,
   24c26:	f890 7068 	ldrb.w	r7, [r0, #104]	; 0x68
	       net_ipv6_nbr_data(nbr)->is_router,
   24c2a:	f890 8069 	ldrb.w	r8, [r0, #105]	; 0x69
	return _timeout_remaining_get(&work->timeout);
   24c2e:	3020      	adds	r0, #32
   24c30:	f005 f90a 	bl	29e48 <_timeout_remaining_get>
   24c34:	4682      	mov	sl, r0
	       nbr->idx == NET_NBR_LLADDR_UNKNOWN ? "?" :
   24c36:	7860      	ldrb	r0, [r4, #1]
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24c38:	28ff      	cmp	r0, #255	; 0xff
   24c3a:	d038      	beq.n	24cae <nbr_cb+0xc6>
		       net_nbr_get_lladdr(nbr->idx)->addr,
   24c3c:	f7fa fc70 	bl	1f520 <net_nbr_get_lladdr>
   24c40:	f100 0b02 	add.w	fp, r0, #2
		       net_nbr_get_lladdr(nbr->idx)->len),
   24c44:	7860      	ldrb	r0, [r4, #1]
   24c46:	f7fa fc6b 	bl	1f520 <net_nbr_get_lladdr>
   24c4a:	2318      	movs	r3, #24
   24c4c:	4a19      	ldr	r2, [pc, #100]	; (24cb4 <nbr_cb+0xcc>)
   24c4e:	7841      	ldrb	r1, [r0, #1]
   24c50:	4658      	mov	r0, fp
   24c52:	f7f9 f9f1 	bl	1e038 <net_sprint_ll_addr_buf>
   24c56:	4683      	mov	fp, r0
	       net_nbr_get_lladdr(nbr->idx)->len == 8 ? "" : padding,
   24c58:	7860      	ldrb	r0, [r4, #1]
   24c5a:	f7fa fc61 	bl	1f520 <net_nbr_get_lladdr>
   24c5e:	68e1      	ldr	r1, [r4, #12]
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   24c60:	2328      	movs	r3, #40	; 0x28
   24c62:	4a15      	ldr	r2, [pc, #84]	; (24cb8 <nbr_cb+0xd0>)
   24c64:	3104      	adds	r1, #4
   24c66:	200a      	movs	r0, #10
   24c68:	f7f9 fa10 	bl	1e08c <net_addr_ntop>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24c6c:	9009      	str	r0, [sp, #36]	; 0x24
   24c6e:	4b13      	ldr	r3, [pc, #76]	; (24cbc <nbr_cb+0xd4>)
   24c70:	9308      	str	r3, [sp, #32]
   24c72:	f8cd b01c 	str.w	fp, [sp, #28]
   24c76:	f8cd a018 	str.w	sl, [sp, #24]
   24c7a:	f8cd 9014 	str.w	r9, [sp, #20]
   24c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24c80:	9304      	str	r3, [sp, #16]
   24c82:	f8cd 800c 	str.w	r8, [sp, #12]
   24c86:	9702      	str	r7, [sp, #8]
   24c88:	9601      	str	r6, [sp, #4]
   24c8a:	9500      	str	r5, [sp, #0]
   24c8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24c8e:	4622      	mov	r2, r4
   24c90:	990c      	ldr	r1, [sp, #48]	; 0x30
   24c92:	480b      	ldr	r0, [pc, #44]	; (24cc0 <nbr_cb+0xd8>)
   24c94:	f7de f990 	bl	2fb8 <printk>
}
   24c98:	b00f      	add	sp, #60	; 0x3c
   24c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printk("     Neighbor   Interface        Flags State     "
   24c9e:	4907      	ldr	r1, [pc, #28]	; (24cbc <nbr_cb+0xd4>)
   24ca0:	4808      	ldr	r0, [pc, #32]	; (24cc4 <nbr_cb+0xdc>)
   24ca2:	f7de f989 	bl	2fb8 <printk>
   24ca6:	e7a7      	b.n	24bf8 <nbr_cb+0x10>
		state_pad = "    ";
   24ca8:	f8df 901c 	ldr.w	r9, [pc, #28]	; 24cc8 <nbr_cb+0xe0>
   24cac:	e7b3      	b.n	24c16 <nbr_cb+0x2e>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24cae:	f8df b01c 	ldr.w	fp, [pc, #28]	; 24ccc <nbr_cb+0xe4>
   24cb2:	e7d1      	b.n	24c58 <nbr_cb+0x70>
   24cb4:	20002518 	.word	0x20002518
   24cb8:	20002530 	.word	0x20002530
   24cbc:	0002f114 	.word	0x0002f114
   24cc0:	00032044 	.word	0x00032044
   24cc4:	00031fec 	.word	0x00031fec
   24cc8:	00031fe0 	.word	0x00031fe0
   24ccc:	00031fe8 	.word	0x00031fe8

00024cd0 <_ping_ipv6>:
{
   24cd0:	b570      	push	{r4, r5, r6, lr}
   24cd2:	b084      	sub	sp, #16
   24cd4:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
   24cd6:	f7f6 fbb1 	bl	1b43c <net_if_get_default>
   24cda:	4604      	mov	r4, r0
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   24cdc:	466a      	mov	r2, sp
   24cde:	4629      	mov	r1, r5
   24ce0:	200a      	movs	r0, #10
   24ce2:	f7f9 faaa 	bl	1e23a <net_addr_pton>
   24ce6:	2800      	cmp	r0, #0
   24ce8:	db26      	blt.n	24d38 <_ping_ipv6+0x68>
	net_icmpv6_register_handler(&ping6_handler);
   24cea:	4815      	ldr	r0, [pc, #84]	; (24d40 <_ping_ipv6+0x70>)
   24cec:	f7f9 fe0c 	bl	1e908 <net_icmpv6_register_handler>
	nbr = net_ipv6_nbr_lookup(NULL, &ipv6_target);
   24cf0:	4669      	mov	r1, sp
   24cf2:	2000      	movs	r0, #0
   24cf4:	f7fb fa4c 	bl	20190 <net_ipv6_nbr_lookup>
	if (nbr) {
   24cf8:	b100      	cbz	r0, 24cfc <_ping_ipv6+0x2c>
		iface = nbr->iface;
   24cfa:	6884      	ldr	r4, [r0, #8]
	route = net_route_lookup(NULL, &ipv6_target);
   24cfc:	4669      	mov	r1, sp
   24cfe:	2000      	movs	r0, #0
   24d00:	f7fd ffc4 	bl	22c8c <net_route_lookup>
	if (route) {
   24d04:	b100      	cbz	r0, 24d08 <_ping_ipv6+0x38>
		iface = route->iface;
   24d06:	68c4      	ldr	r4, [r0, #12]
					   sys_rand32_get(),
   24d08:	f7dd f9bc 	bl	2084 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   24d0c:	b286      	uxth	r6, r0
					   sys_rand32_get());
   24d0e:	f7dd f9b9 	bl	2084 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   24d12:	b283      	uxth	r3, r0
   24d14:	4632      	mov	r2, r6
   24d16:	4669      	mov	r1, sp
   24d18:	4620      	mov	r0, r4
   24d1a:	f7fa fa8f 	bl	1f23c <net_icmpv6_send_echo_request>
	if (ret) {
   24d1e:	4604      	mov	r4, r0
   24d20:	b930      	cbnz	r0, 24d30 <_ping_ipv6+0x60>
		printk("Sent a ping to %s\n", host);
   24d22:	4629      	mov	r1, r5
   24d24:	4807      	ldr	r0, [pc, #28]	; (24d44 <_ping_ipv6+0x74>)
   24d26:	f7de f947 	bl	2fb8 <printk>
}
   24d2a:	4620      	mov	r0, r4
   24d2c:	b004      	add	sp, #16
   24d2e:	bd70      	pop	{r4, r5, r6, pc}
	net_icmpv6_unregister_handler(&ping6_handler);
   24d30:	4803      	ldr	r0, [pc, #12]	; (24d40 <_ping_ipv6+0x70>)
   24d32:	f7f9 fdf5 	bl	1e920 <net_icmpv6_unregister_handler>
   24d36:	e7f8      	b.n	24d2a <_ping_ipv6+0x5a>
		return -EINVAL;
   24d38:	f06f 0415 	mvn.w	r4, #21
   24d3c:	e7f5      	b.n	24d2a <_ping_ipv6+0x5a>
   24d3e:	bf00      	nop
   24d40:	2000c604 	.word	0x2000c604
   24d44:	00031cfc 	.word	0x00031cfc

00024d48 <net_shell_cmd_ping>:
{
   24d48:	b510      	push	{r4, lr}
   24d4a:	460c      	mov	r4, r1
	if (!strcmp(argv[0], "ping")) {
   24d4c:	4912      	ldr	r1, [pc, #72]	; (24d98 <net_shell_cmd_ping+0x50>)
   24d4e:	6820      	ldr	r0, [r4, #0]
   24d50:	f7db fb5a 	bl	408 <strcmp>
   24d54:	b958      	cbnz	r0, 24d6e <net_shell_cmd_ping+0x26>
		host = argv[1];
   24d56:	6860      	ldr	r0, [r4, #4]
	ret = _ping_ipv6(host);
   24d58:	f7ff ffba 	bl	24cd0 <_ping_ipv6>
	if (!ret) {
   24d5c:	b168      	cbz	r0, 24d7a <net_shell_cmd_ping+0x32>
	} else if (ret == -EIO) {
   24d5e:	f110 0f05 	cmn.w	r0, #5
   24d62:	d006      	beq.n	24d72 <net_shell_cmd_ping+0x2a>
			printk("Invalid IP address\n");
   24d64:	480d      	ldr	r0, [pc, #52]	; (24d9c <net_shell_cmd_ping+0x54>)
   24d66:	f7de f927 	bl	2fb8 <printk>
}
   24d6a:	2000      	movs	r0, #0
   24d6c:	bd10      	pop	{r4, pc}
		host = argv[2];
   24d6e:	68a0      	ldr	r0, [r4, #8]
   24d70:	e7f2      	b.n	24d58 <net_shell_cmd_ping+0x10>
		printk("Cannot send IPv6 ping\n");
   24d72:	480b      	ldr	r0, [pc, #44]	; (24da0 <net_shell_cmd_ping+0x58>)
   24d74:	f7de f920 	bl	2fb8 <printk>
		return 0;
   24d78:	e7f7      	b.n	24d6a <net_shell_cmd_ping+0x22>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   24d7a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   24d7e:	4809      	ldr	r0, [pc, #36]	; (24da4 <net_shell_cmd_ping+0x5c>)
   24d80:	f004 fb2a 	bl	293d8 <_impl_k_sem_take>
	if (ret == -EAGAIN) {
   24d84:	f110 0f0b 	cmn.w	r0, #11
   24d88:	d1ef      	bne.n	24d6a <net_shell_cmd_ping+0x22>
		printk("Ping timeout\n");
   24d8a:	4807      	ldr	r0, [pc, #28]	; (24da8 <net_shell_cmd_ping+0x60>)
   24d8c:	f7de f914 	bl	2fb8 <printk>
	net_icmpv6_unregister_handler(&ping6_handler);
   24d90:	4806      	ldr	r0, [pc, #24]	; (24dac <net_shell_cmd_ping+0x64>)
   24d92:	f7f9 fdc5 	bl	1e920 <net_icmpv6_unregister_handler>
   24d96:	e7e8      	b.n	24d6a <net_shell_cmd_ping+0x22>
   24d98:	0003241c 	.word	0x0003241c
   24d9c:	0003243c 	.word	0x0003243c
   24da0:	00032424 	.word	0x00032424
   24da4:	2000d150 	.word	0x2000d150
   24da8:	00032450 	.word	0x00032450
   24dac:	2000c604 	.word	0x2000c604

00024db0 <_handle_ipv6_echo_reply>:
{
   24db0:	b530      	push	{r4, r5, lr}
   24db2:	b08b      	sub	sp, #44	; 0x2c
   24db4:	4605      	mov	r5, r0
	return pkt->frags->data;
   24db6:	6883      	ldr	r3, [r0, #8]
   24db8:	6899      	ldr	r1, [r3, #8]
   24dba:	4c11      	ldr	r4, [pc, #68]	; (24e00 <_handle_ipv6_echo_reply+0x50>)
   24dbc:	2328      	movs	r3, #40	; 0x28
   24dbe:	4622      	mov	r2, r4
   24dc0:	3118      	adds	r1, #24
   24dc2:	200a      	movs	r0, #10
   24dc4:	f7f9 f962 	bl	1e08c <net_addr_ntop>
	snprintk(addr, sizeof(addr), "%s",
   24dc8:	4603      	mov	r3, r0
   24dca:	4a0e      	ldr	r2, [pc, #56]	; (24e04 <_handle_ipv6_echo_reply+0x54>)
   24dcc:	2128      	movs	r1, #40	; 0x28
   24dce:	4668      	mov	r0, sp
   24dd0:	f7de f900 	bl	2fd4 <snprintk>
   24dd4:	68ab      	ldr	r3, [r5, #8]
   24dd6:	6899      	ldr	r1, [r3, #8]
   24dd8:	2328      	movs	r3, #40	; 0x28
   24dda:	4622      	mov	r2, r4
   24ddc:	3108      	adds	r1, #8
   24dde:	200a      	movs	r0, #10
   24de0:	f7f9 f954 	bl	1e08c <net_addr_ntop>
	printk("Received echo reply from %s to %s\n",
   24de4:	466a      	mov	r2, sp
   24de6:	4601      	mov	r1, r0
   24de8:	4807      	ldr	r0, [pc, #28]	; (24e08 <_handle_ipv6_echo_reply+0x58>)
   24dea:	f7de f8e5 	bl	2fb8 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   24dee:	4807      	ldr	r0, [pc, #28]	; (24e0c <_handle_ipv6_echo_reply+0x5c>)
   24df0:	f004 fadf 	bl	293b2 <_impl_k_sem_give>
	net_icmpv6_unregister_handler(&ping6_handler);
   24df4:	4806      	ldr	r0, [pc, #24]	; (24e10 <_handle_ipv6_echo_reply+0x60>)
   24df6:	f7f9 fd93 	bl	1e920 <net_icmpv6_unregister_handler>
}
   24dfa:	2000      	movs	r0, #0
   24dfc:	b00b      	add	sp, #44	; 0x2c
   24dfe:	bd30      	pop	{r4, r5, pc}
   24e00:	20002530 	.word	0x20002530
   24e04:	0002e7ec 	.word	0x0002e7ec
   24e08:	00031cd8 	.word	0x00031cd8
   24e0c:	2000d150 	.word	0x2000d150
   24e10:	2000c604 	.word	0x2000c604

00024e14 <iface_per_route_cb>:
{
   24e14:	b510      	push	{r4, lr}
   24e16:	b082      	sub	sp, #8
   24e18:	4604      	mov	r4, r0
	printk("\nIPv6 routes for interface %p (%s)\n", iface,
   24e1a:	a901      	add	r1, sp, #4
   24e1c:	f7ff faba 	bl	24394 <iface2str>
   24e20:	4602      	mov	r2, r0
   24e22:	4621      	mov	r1, r4
   24e24:	4806      	ldr	r0, [pc, #24]	; (24e40 <iface_per_route_cb+0x2c>)
   24e26:	f7de f8c7 	bl	2fb8 <printk>
	printk("=======================================%s\n", extra);
   24e2a:	9901      	ldr	r1, [sp, #4]
   24e2c:	4805      	ldr	r0, [pc, #20]	; (24e44 <iface_per_route_cb+0x30>)
   24e2e:	f7de f8c3 	bl	2fb8 <printk>
	net_route_foreach(route_cb, iface);
   24e32:	4621      	mov	r1, r4
   24e34:	4804      	ldr	r0, [pc, #16]	; (24e48 <iface_per_route_cb+0x34>)
   24e36:	f7fe f829 	bl	22e8c <net_route_foreach>
}
   24e3a:	b002      	add	sp, #8
   24e3c:	bd10      	pop	{r4, pc}
   24e3e:	bf00      	nop
   24e40:	00031f90 	.word	0x00031f90
   24e44:	00031fb4 	.word	0x00031fb4
   24e48:	00024b45 	.word	0x00024b45

00024e4c <tcp_connected>:
{
   24e4c:	b510      	push	{r4, lr}
	if (status < 0) {
   24e4e:	2900      	cmp	r1, #0
   24e50:	db03      	blt.n	24e5a <tcp_connected+0xe>
		printk("TCP connected\n");
   24e52:	4807      	ldr	r0, [pc, #28]	; (24e70 <tcp_connected+0x24>)
   24e54:	f7de f8b0 	bl	2fb8 <printk>
   24e58:	bd10      	pop	{r4, pc}
   24e5a:	4604      	mov	r4, r0
		printk("TCP connection failed (%d)\n", status);
   24e5c:	4805      	ldr	r0, [pc, #20]	; (24e74 <tcp_connected+0x28>)
   24e5e:	f7de f8ab 	bl	2fb8 <printk>
		net_context_put(context);
   24e62:	4620      	mov	r0, r4
   24e64:	f7f8 f834 	bl	1ced0 <net_context_put>
		tcp_ctx = NULL;
   24e68:	2200      	movs	r2, #0
   24e6a:	4b03      	ldr	r3, [pc, #12]	; (24e78 <tcp_connected+0x2c>)
   24e6c:	601a      	str	r2, [r3, #0]
   24e6e:	bd10      	pop	{r4, pc}
   24e70:	00032a30 	.word	0x00032a30
   24e74:	00032a14 	.word	0x00032a14
   24e78:	20002558 	.word	0x20002558

00024e7c <get_my_ipv6_addr>:
{
   24e7c:	b538      	push	{r3, r4, r5, lr}
   24e7e:	460c      	mov	r4, r1
	my6addr = net_if_ipv6_select_src_addr(iface,
   24e80:	1d0d      	adds	r5, r1, #4
   24e82:	4629      	mov	r1, r5
   24e84:	f7f7 f81e 	bl	1bec4 <net_if_ipv6_select_src_addr>
	memcpy(&net_sin6(myaddr)->sin6_addr, my6addr, sizeof(struct in6_addr));
   24e88:	2210      	movs	r2, #16
   24e8a:	4601      	mov	r1, r0
   24e8c:	4628      	mov	r0, r5
   24e8e:	f7db fa17 	bl	2c0 <memcpy>
	net_sin6(myaddr)->sin6_port = 0; /* let the IP stack to select */
   24e92:	2300      	movs	r3, #0
   24e94:	8063      	strh	r3, [r4, #2]
   24e96:	bd38      	pop	{r3, r4, r5, pc}

00024e98 <tcp_connect>:
{
   24e98:	b5f0      	push	{r4, r5, r6, r7, lr}
   24e9a:	b08f      	sub	sp, #60	; 0x3c
   24e9c:	4607      	mov	r7, r0
   24e9e:	460c      	mov	r4, r1
   24ea0:	4615      	mov	r5, r2
	struct net_if *iface = net_if_get_default();
   24ea2:	f7f6 facb 	bl	1b43c <net_if_get_default>
   24ea6:	4606      	mov	r6, r0
	ret = net_addr_pton(AF_INET6, host, &net_sin6(&addr)->sin6_addr);
   24ea8:	aa09      	add	r2, sp, #36	; 0x24
   24eaa:	4639      	mov	r1, r7
   24eac:	200a      	movs	r0, #10
   24eae:	f7f9 f9c4 	bl	1e23a <net_addr_pton>
	if (ret < 0) {
   24eb2:	2800      	cmp	r0, #0
   24eb4:	db34      	blt.n	24f20 <tcp_connect+0x88>
	net_sin6(&addr)->sin6_port = htons(port);
   24eb6:	0a21      	lsrs	r1, r4, #8
   24eb8:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   24ebc:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
	nbr = net_ipv6_nbr_lookup(NULL, &net_sin6(&addr)->sin6_addr);
   24ec0:	a909      	add	r1, sp, #36	; 0x24
   24ec2:	2000      	movs	r0, #0
   24ec4:	f7fb f964 	bl	20190 <net_ipv6_nbr_lookup>
	if (nbr) {
   24ec8:	b100      	cbz	r0, 24ecc <tcp_connect+0x34>
		iface = nbr->iface;
   24eca:	6886      	ldr	r6, [r0, #8]
	get_my_ipv6_addr(iface, &myaddr);
   24ecc:	a902      	add	r1, sp, #8
   24ece:	4630      	mov	r0, r6
   24ed0:	f7ff ffd4 	bl	24e7c <get_my_ipv6_addr>
	family = addr.sa_family = myaddr.sa_family = AF_INET6;
   24ed4:	240a      	movs	r4, #10
   24ed6:	f8ad 4008 	strh.w	r4, [sp, #8]
   24eda:	aa0e      	add	r2, sp, #56	; 0x38
   24edc:	f822 4d18 	strh.w	r4, [r2, #-24]!
	print_connect_info(family, &myaddr, &addr);
   24ee0:	a902      	add	r1, sp, #8
   24ee2:	4620      	mov	r0, r4
   24ee4:	f7ff fce6 	bl	248b4 <print_connect_info>
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
   24ee8:	462b      	mov	r3, r5
   24eea:	2206      	movs	r2, #6
   24eec:	2101      	movs	r1, #1
   24eee:	4620      	mov	r0, r4
   24ef0:	f7f7 fd82 	bl	1c9f8 <net_context_get>
	if (ret < 0) {
   24ef4:	1e04      	subs	r4, r0, #0
   24ef6:	db18      	blt.n	24f2a <tcp_connect+0x92>
	ret = net_context_bind(*ctx, &myaddr, addrlen);
   24ef8:	2218      	movs	r2, #24
   24efa:	a902      	add	r1, sp, #8
   24efc:	6828      	ldr	r0, [r5, #0]
   24efe:	f7f8 f829 	bl	1cf54 <net_context_bind>
	if (ret < 0) {
   24f02:	1e04      	subs	r4, r0, #0
   24f04:	db16      	blt.n	24f34 <tcp_connect+0x9c>
	return net_context_connect(*ctx, &addr, addrlen, tcp_connected,
   24f06:	6828      	ldr	r0, [r5, #0]
   24f08:	2300      	movs	r3, #0
   24f0a:	9301      	str	r3, [sp, #4]
   24f0c:	9300      	str	r3, [sp, #0]
   24f0e:	4b0c      	ldr	r3, [pc, #48]	; (24f40 <tcp_connect+0xa8>)
   24f10:	2218      	movs	r2, #24
   24f12:	a908      	add	r1, sp, #32
   24f14:	f7f8 f9b0 	bl	1d278 <net_context_connect>
   24f18:	4604      	mov	r4, r0
}
   24f1a:	4620      	mov	r0, r4
   24f1c:	b00f      	add	sp, #60	; 0x3c
   24f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("Invalid IPv6 address\n");
   24f20:	4808      	ldr	r0, [pc, #32]	; (24f44 <tcp_connect+0xac>)
   24f22:	f7de f849 	bl	2fb8 <printk>
		return 0;
   24f26:	2400      	movs	r4, #0
   24f28:	e7f7      	b.n	24f1a <tcp_connect+0x82>
		printk("Cannot get TCP context (%d)\n", ret);
   24f2a:	4621      	mov	r1, r4
   24f2c:	4806      	ldr	r0, [pc, #24]	; (24f48 <tcp_connect+0xb0>)
   24f2e:	f7de f843 	bl	2fb8 <printk>
		return ret;
   24f32:	e7f2      	b.n	24f1a <tcp_connect+0x82>
		printk("Cannot bind TCP (%d)\n", ret);
   24f34:	4621      	mov	r1, r4
   24f36:	4805      	ldr	r0, [pc, #20]	; (24f4c <tcp_connect+0xb4>)
   24f38:	f7de f83e 	bl	2fb8 <printk>
		return ret;
   24f3c:	e7ed      	b.n	24f1a <tcp_connect+0x82>
   24f3e:	bf00      	nop
   24f40:	00024e4d 	.word	0x00024e4d
   24f44:	000329c4 	.word	0x000329c4
   24f48:	000329dc 	.word	0x000329dc
   24f4c:	000329fc 	.word	0x000329fc

00024f50 <net_shell_cmd_tcp>:
}
#endif

int net_shell_cmd_tcp(int argc, char *argv[])
{
   24f50:	b5f0      	push	{r4, r5, r6, r7, lr}
   24f52:	b083      	sub	sp, #12
#if defined(CONFIG_NET_TCP)
	int arg = 1;
	int ret;

	if (argv[arg]) {
   24f54:	6848      	ldr	r0, [r1, #4]
   24f56:	2800      	cmp	r0, #0
   24f58:	f000 8099 	beq.w	2508e <net_shell_cmd_tcp+0x13e>
   24f5c:	460c      	mov	r4, r1
		if (!strcmp(argv[arg], "connect")) {
   24f5e:	4954      	ldr	r1, [pc, #336]	; (250b0 <net_shell_cmd_tcp+0x160>)
   24f60:	f7db fa52 	bl	408 <strcmp>
   24f64:	4605      	mov	r5, r0
   24f66:	bb20      	cbnz	r0, 24fb2 <net_shell_cmd_tcp+0x62>
			/* tcp connect <ip> port */
			char *ip;
			u16_t port;

			if (tcp_ctx && net_context_is_used(tcp_ctx)) {
   24f68:	4b52      	ldr	r3, [pc, #328]	; (250b4 <net_shell_cmd_tcp+0x164>)
   24f6a:	681b      	ldr	r3, [r3, #0]
   24f6c:	b123      	cbz	r3, 24f78 <net_shell_cmd_tcp+0x28>
	return context->flags & NET_CONTEXT_IN_USE;
   24f6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   24f72:	f013 0f01 	tst.w	r3, #1
   24f76:	d110      	bne.n	24f9a <net_shell_cmd_tcp+0x4a>
				printk("Already connected\n");
				return 0;
			}

			if (!argv[++arg]) {
   24f78:	68a6      	ldr	r6, [r4, #8]
   24f7a:	b196      	cbz	r6, 24fa2 <net_shell_cmd_tcp+0x52>
				return 0;
			}

			ip = argv[arg];

			if (!argv[++arg]) {
   24f7c:	68e0      	ldr	r0, [r4, #12]
   24f7e:	b1a0      	cbz	r0, 24faa <net_shell_cmd_tcp+0x5a>
				printk("Peer port missing.\n");
				return 0;
			}

			port = strtol(argv[arg], NULL, 10);
   24f80:	220a      	movs	r2, #10
   24f82:	2100      	movs	r1, #0
   24f84:	f006 fa20 	bl	2b3c8 <strtol>

			return tcp_connect(ip, port, &tcp_ctx);
   24f88:	4a4a      	ldr	r2, [pc, #296]	; (250b4 <net_shell_cmd_tcp+0x164>)
   24f8a:	b281      	uxth	r1, r0
   24f8c:	4630      	mov	r0, r6
   24f8e:	f7ff ff83 	bl	24e98 <tcp_connect>
   24f92:	4605      	mov	r5, r0
#else
	printk("TCP not enabled.\n");
#endif /* CONFIG_NET_TCP */

	return 0;
}
   24f94:	4628      	mov	r0, r5
   24f96:	b003      	add	sp, #12
   24f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printk("Already connected\n");
   24f9a:	4847      	ldr	r0, [pc, #284]	; (250b8 <net_shell_cmd_tcp+0x168>)
   24f9c:	f7de f80c 	bl	2fb8 <printk>
				return 0;
   24fa0:	e7f8      	b.n	24f94 <net_shell_cmd_tcp+0x44>
				printk("Peer IP address missing.\n");
   24fa2:	4846      	ldr	r0, [pc, #280]	; (250bc <net_shell_cmd_tcp+0x16c>)
   24fa4:	f7de f808 	bl	2fb8 <printk>
				return 0;
   24fa8:	e7f4      	b.n	24f94 <net_shell_cmd_tcp+0x44>
				printk("Peer port missing.\n");
   24faa:	4845      	ldr	r0, [pc, #276]	; (250c0 <net_shell_cmd_tcp+0x170>)
   24fac:	f7de f804 	bl	2fb8 <printk>
				return 0;
   24fb0:	e7f0      	b.n	24f94 <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "send")) {
   24fb2:	4944      	ldr	r1, [pc, #272]	; (250c4 <net_shell_cmd_tcp+0x174>)
   24fb4:	6860      	ldr	r0, [r4, #4]
   24fb6:	f7db fa27 	bl	408 <strcmp>
   24fba:	4605      	mov	r5, r0
   24fbc:	2800      	cmp	r0, #0
   24fbe:	d140      	bne.n	25042 <net_shell_cmd_tcp+0xf2>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   24fc0:	4b3c      	ldr	r3, [pc, #240]	; (250b4 <net_shell_cmd_tcp+0x164>)
   24fc2:	6818      	ldr	r0, [r3, #0]
   24fc4:	b300      	cbz	r0, 25008 <net_shell_cmd_tcp+0xb8>
   24fc6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   24fca:	f013 0f01 	tst.w	r3, #1
   24fce:	d01b      	beq.n	25008 <net_shell_cmd_tcp+0xb8>
			if (!argv[++arg]) {
   24fd0:	68a3      	ldr	r3, [r4, #8]
   24fd2:	b1eb      	cbz	r3, 25010 <net_shell_cmd_tcp+0xc0>
			pkt = net_pkt_get_tx(tcp_ctx, TCP_TIMEOUT);
   24fd4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   24fd8:	f7f8 fbdc 	bl	1d794 <net_pkt_get_tx>
			if (!pkt) {
   24fdc:	4606      	mov	r6, r0
   24fde:	b1d8      	cbz	r0, 25018 <net_shell_cmd_tcp+0xc8>
			ret = net_pkt_append_all(pkt, strlen(argv[arg]),
   24fe0:	68a0      	ldr	r0, [r4, #8]
   24fe2:	f7db fb8d 	bl	700 <strlen>
   24fe6:	b287      	uxth	r7, r0
	return net_pkt_append(pkt, len, data, timeout) == len;
   24fe8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   24fec:	68a2      	ldr	r2, [r4, #8]
   24fee:	4639      	mov	r1, r7
   24ff0:	4630      	mov	r0, r6
   24ff2:	f7f8 fd3a 	bl	1da6a <net_pkt_append>
			if (!ret) {
   24ff6:	4287      	cmp	r7, r0
   24ff8:	d012      	beq.n	25020 <net_shell_cmd_tcp+0xd0>
				printk("Cannot build msg (out of pkts)\n");
   24ffa:	4833      	ldr	r0, [pc, #204]	; (250c8 <net_shell_cmd_tcp+0x178>)
   24ffc:	f7dd ffdc 	bl	2fb8 <printk>
				net_pkt_unref(pkt);
   25000:	4630      	mov	r0, r6
   25002:	f7f8 fbfa 	bl	1d7fa <net_pkt_unref>
				return 0;
   25006:	e7c5      	b.n	24f94 <net_shell_cmd_tcp+0x44>
				printk("Not connected\n");
   25008:	4830      	ldr	r0, [pc, #192]	; (250cc <net_shell_cmd_tcp+0x17c>)
   2500a:	f7dd ffd5 	bl	2fb8 <printk>
				return 0;
   2500e:	e7c1      	b.n	24f94 <net_shell_cmd_tcp+0x44>
				printk("No data to send.\n");
   25010:	482f      	ldr	r0, [pc, #188]	; (250d0 <net_shell_cmd_tcp+0x180>)
   25012:	f7dd ffd1 	bl	2fb8 <printk>
				return 0;
   25016:	e7bd      	b.n	24f94 <net_shell_cmd_tcp+0x44>
				printk("Out of pkts, msg cannot be sent.\n");
   25018:	482e      	ldr	r0, [pc, #184]	; (250d4 <net_shell_cmd_tcp+0x184>)
   2501a:	f7dd ffcd 	bl	2fb8 <printk>
				return 0;
   2501e:	e7b9      	b.n	24f94 <net_shell_cmd_tcp+0x44>
			ret = net_context_send(pkt, tcp_sent_cb, TCP_TIMEOUT,
   25020:	2300      	movs	r3, #0
   25022:	9300      	str	r3, [sp, #0]
   25024:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   25028:	492b      	ldr	r1, [pc, #172]	; (250d8 <net_shell_cmd_tcp+0x188>)
   2502a:	4630      	mov	r0, r6
   2502c:	f7f8 fa12 	bl	1d454 <net_context_send>
			if (ret < 0) {
   25030:	1e01      	subs	r1, r0, #0
   25032:	daaf      	bge.n	24f94 <net_shell_cmd_tcp+0x44>
				printk("Cannot send msg (%d)\n", ret);
   25034:	4829      	ldr	r0, [pc, #164]	; (250dc <net_shell_cmd_tcp+0x18c>)
   25036:	f7dd ffbf 	bl	2fb8 <printk>
				net_pkt_unref(pkt);
   2503a:	4630      	mov	r0, r6
   2503c:	f7f8 fbdd 	bl	1d7fa <net_pkt_unref>
				return 0;
   25040:	e7a8      	b.n	24f94 <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "close")) {
   25042:	4927      	ldr	r1, [pc, #156]	; (250e0 <net_shell_cmd_tcp+0x190>)
   25044:	6860      	ldr	r0, [r4, #4]
   25046:	f7db f9df 	bl	408 <strcmp>
   2504a:	4605      	mov	r5, r0
   2504c:	b9d0      	cbnz	r0, 25084 <net_shell_cmd_tcp+0x134>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   2504e:	4b19      	ldr	r3, [pc, #100]	; (250b4 <net_shell_cmd_tcp+0x164>)
   25050:	6818      	ldr	r0, [r3, #0]
   25052:	b120      	cbz	r0, 2505e <net_shell_cmd_tcp+0x10e>
   25054:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   25058:	f013 0f01 	tst.w	r3, #1
   2505c:	d103      	bne.n	25066 <net_shell_cmd_tcp+0x116>
				printk("Not connected\n");
   2505e:	481b      	ldr	r0, [pc, #108]	; (250cc <net_shell_cmd_tcp+0x17c>)
   25060:	f7dd ffaa 	bl	2fb8 <printk>
				return 0;
   25064:	e796      	b.n	24f94 <net_shell_cmd_tcp+0x44>
			ret = net_context_put(tcp_ctx);
   25066:	f7f7 ff33 	bl	1ced0 <net_context_put>
			if (ret < 0) {
   2506a:	1e01      	subs	r1, r0, #0
   2506c:	db06      	blt.n	2507c <net_shell_cmd_tcp+0x12c>
			printk("Connection closed.\n");
   2506e:	481d      	ldr	r0, [pc, #116]	; (250e4 <net_shell_cmd_tcp+0x194>)
   25070:	f7dd ffa2 	bl	2fb8 <printk>
			tcp_ctx = NULL;
   25074:	2200      	movs	r2, #0
   25076:	4b0f      	ldr	r3, [pc, #60]	; (250b4 <net_shell_cmd_tcp+0x164>)
   25078:	601a      	str	r2, [r3, #0]
			return 0;
   2507a:	e78b      	b.n	24f94 <net_shell_cmd_tcp+0x44>
				printk("Cannot close the connection (%d)\n",
   2507c:	481a      	ldr	r0, [pc, #104]	; (250e8 <net_shell_cmd_tcp+0x198>)
   2507e:	f7dd ff9b 	bl	2fb8 <printk>
				return 0;
   25082:	e787      	b.n	24f94 <net_shell_cmd_tcp+0x44>
		printk("Unknown command '%s'\n", argv[arg]);
   25084:	6861      	ldr	r1, [r4, #4]
   25086:	4819      	ldr	r0, [pc, #100]	; (250ec <net_shell_cmd_tcp+0x19c>)
   25088:	f7dd ff96 	bl	2fb8 <printk>
		goto usage;
   2508c:	e002      	b.n	25094 <net_shell_cmd_tcp+0x144>
		printk("Invalid command.\n");
   2508e:	4818      	ldr	r0, [pc, #96]	; (250f0 <net_shell_cmd_tcp+0x1a0>)
   25090:	f7dd ff92 	bl	2fb8 <printk>
		printk("Usage:\n");
   25094:	4817      	ldr	r0, [pc, #92]	; (250f4 <net_shell_cmd_tcp+0x1a4>)
   25096:	f7dd ff8f 	bl	2fb8 <printk>
		printk("\ttcp connect <ipaddr> port\n");
   2509a:	4817      	ldr	r0, [pc, #92]	; (250f8 <net_shell_cmd_tcp+0x1a8>)
   2509c:	f7dd ff8c 	bl	2fb8 <printk>
		printk("\ttcp send <data>\n");
   250a0:	4816      	ldr	r0, [pc, #88]	; (250fc <net_shell_cmd_tcp+0x1ac>)
   250a2:	f7dd ff89 	bl	2fb8 <printk>
		printk("\ttcp close\n");
   250a6:	4816      	ldr	r0, [pc, #88]	; (25100 <net_shell_cmd_tcp+0x1b0>)
   250a8:	f7dd ff86 	bl	2fb8 <printk>
	return 0;
   250ac:	2500      	movs	r5, #0
   250ae:	e771      	b.n	24f94 <net_shell_cmd_tcp+0x44>
   250b0:	0002e974 	.word	0x0002e974
   250b4:	20002558 	.word	0x20002558
   250b8:	00032794 	.word	0x00032794
   250bc:	000327a8 	.word	0x000327a8
   250c0:	000327c4 	.word	0x000327c4
   250c4:	000327d8 	.word	0x000327d8
   250c8:	00032828 	.word	0x00032828
   250cc:	000327e0 	.word	0x000327e0
   250d0:	000327f0 	.word	0x000327f0
   250d4:	00032804 	.word	0x00032804
   250d8:	0002473d 	.word	0x0002473d
   250dc:	00032848 	.word	0x00032848
   250e0:	00032860 	.word	0x00032860
   250e4:	0003288c 	.word	0x0003288c
   250e8:	00032868 	.word	0x00032868
   250ec:	0003238c 	.word	0x0003238c
   250f0:	000328a0 	.word	0x000328a0
   250f4:	000328b4 	.word	0x000328b4
   250f8:	000328bc 	.word	0x000328bc
   250fc:	000328d8 	.word	0x000328d8
   25100:	000328ec 	.word	0x000328ec

00025104 <find_conn_handler>:
static int find_conn_handler(enum net_ip_protocol proto,
			     const struct sockaddr *remote_addr,
			     const struct sockaddr *local_addr,
			     u16_t remote_port,
			     u16_t local_port)
{
   25104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25108:	4605      	mov	r5, r0
   2510a:	460e      	mov	r6, r1
   2510c:	4617      	mov	r7, r2
   2510e:	4699      	mov	r9, r3
   25110:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   25114:	2400      	movs	r4, #0
   25116:	e012      	b.n	2513e <find_conn_handler+0x3a>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   25118:	f013 0f02 	tst.w	r3, #2
   2511c:	d10e      	bne.n	2513c <find_conn_handler+0x38>
				continue;
			}
		}

		if (local_addr) {
   2511e:	2f00      	cmp	r7, #0
   25120:	d051      	beq.n	251c6 <find_conn_handler+0xc2>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   25122:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25126:	009a      	lsls	r2, r3, #2
   25128:	4b3c      	ldr	r3, [pc, #240]	; (2521c <find_conn_handler+0x118>)
   2512a:	4413      	add	r3, r2
   2512c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   25130:	f013 0f04 	tst.w	r3, #4
   25134:	d002      	beq.n	2513c <find_conn_handler+0x38>
				continue;
			}

#if defined(CONFIG_NET_IPV6)
			if (local_addr->sa_family == AF_INET6 &&
   25136:	883b      	ldrh	r3, [r7, #0]
   25138:	2b0a      	cmp	r3, #10
   2513a:	d030      	beq.n	2519e <find_conn_handler+0x9a>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2513c:	3401      	adds	r4, #1
   2513e:	2c03      	cmp	r4, #3
   25140:	dc67      	bgt.n	25212 <find_conn_handler+0x10e>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   25142:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25146:	009a      	lsls	r2, r3, #2
   25148:	4b34      	ldr	r3, [pc, #208]	; (2521c <find_conn_handler+0x118>)
   2514a:	4413      	add	r3, r2
   2514c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   25150:	f013 0f01 	tst.w	r3, #1
   25154:	d0f2      	beq.n	2513c <find_conn_handler+0x38>
		if (conns[i].proto != proto) {
   25156:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   2515a:	0091      	lsls	r1, r2, #2
   2515c:	4a2f      	ldr	r2, [pc, #188]	; (2521c <find_conn_handler+0x118>)
   2515e:	440a      	add	r2, r1
   25160:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   25164:	42aa      	cmp	r2, r5
   25166:	d1e9      	bne.n	2513c <find_conn_handler+0x38>
		if (remote_addr) {
   25168:	2e00      	cmp	r6, #0
   2516a:	d0d5      	beq.n	25118 <find_conn_handler+0x14>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   2516c:	f013 0f02 	tst.w	r3, #2
   25170:	d0e4      	beq.n	2513c <find_conn_handler+0x38>
			if (remote_addr->sa_family == AF_INET6 &&
   25172:	8833      	ldrh	r3, [r6, #0]
   25174:	2b0a      	cmp	r3, #10
   25176:	d1e1      	bne.n	2513c <find_conn_handler+0x38>
			    conns[i].remote_addr.sa_family) {
   25178:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
   2517c:	008a      	lsls	r2, r1, #2
   2517e:	4927      	ldr	r1, [pc, #156]	; (2521c <find_conn_handler+0x118>)
   25180:	5a8a      	ldrh	r2, [r1, r2]
			if (remote_addr->sa_family == AF_INET6 &&
   25182:	4293      	cmp	r3, r2
   25184:	d1da      	bne.n	2513c <find_conn_handler+0x38>
					    &net_sin6(&conns[i].remote_addr)->
   25186:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   2518a:	0093      	lsls	r3, r2, #2
   2518c:	4419      	add	r1, r3
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   2518e:	2210      	movs	r2, #16
   25190:	3104      	adds	r1, #4
   25192:	1d30      	adds	r0, r6, #4
   25194:	f005 fb2c 	bl	2a7f0 <memcmp>
				if (!net_ipv6_addr_cmp(
   25198:	2800      	cmp	r0, #0
   2519a:	d1cf      	bne.n	2513c <find_conn_handler+0x38>
   2519c:	e7bf      	b.n	2511e <find_conn_handler+0x1a>
			    local_addr->sa_family ==
			    conns[i].local_addr.sa_family) {
   2519e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   251a2:	0091      	lsls	r1, r2, #2
   251a4:	4a1d      	ldr	r2, [pc, #116]	; (2521c <find_conn_handler+0x118>)
   251a6:	440a      	add	r2, r1
   251a8:	8b12      	ldrh	r2, [r2, #24]
			if (local_addr->sa_family == AF_INET6 &&
   251aa:	4293      	cmp	r3, r2
   251ac:	d1c6      	bne.n	2513c <find_conn_handler+0x38>
				if (!net_ipv6_addr_cmp(
					    &net_sin6(local_addr)->sin6_addr,
					    &net_sin6(&conns[i].local_addr)->
   251ae:	460b      	mov	r3, r1
   251b0:	3318      	adds	r3, #24
   251b2:	4a1a      	ldr	r2, [pc, #104]	; (2521c <find_conn_handler+0x118>)
   251b4:	4413      	add	r3, r2
   251b6:	2210      	movs	r2, #16
   251b8:	1d19      	adds	r1, r3, #4
   251ba:	1d38      	adds	r0, r7, #4
   251bc:	f005 fb18 	bl	2a7f0 <memcmp>
				if (!net_ipv6_addr_cmp(
   251c0:	2800      	cmp	r0, #0
   251c2:	d1bb      	bne.n	2513c <find_conn_handler+0x38>
   251c4:	e009      	b.n	251da <find_conn_handler+0xd6>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   251c6:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   251ca:	009a      	lsls	r2, r3, #2
   251cc:	4b13      	ldr	r3, [pc, #76]	; (2521c <find_conn_handler+0x118>)
   251ce:	4413      	add	r3, r2
   251d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   251d4:	f013 0f04 	tst.w	r3, #4
   251d8:	d1b0      	bne.n	2513c <find_conn_handler+0x38>
				continue;
			}
		}

		if (net_sin(&conns[i].remote_addr)->sin_port !=
   251da:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   251de:	009a      	lsls	r2, r3, #2
   251e0:	4b0e      	ldr	r3, [pc, #56]	; (2521c <find_conn_handler+0x118>)
   251e2:	4413      	add	r3, r2
   251e4:	885a      	ldrh	r2, [r3, #2]
		    htons(remote_port)) {
   251e6:	ea4f 2319 	mov.w	r3, r9, lsr #8
   251ea:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   251ee:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   251f0:	429a      	cmp	r2, r3
   251f2:	d1a3      	bne.n	2513c <find_conn_handler+0x38>
			continue;
		}

		if (net_sin(&conns[i].local_addr)->sin_port !=
   251f4:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   251f8:	0093      	lsls	r3, r2, #2
   251fa:	3318      	adds	r3, #24
   251fc:	4a07      	ldr	r2, [pc, #28]	; (2521c <find_conn_handler+0x118>)
   251fe:	4413      	add	r3, r2
   25200:	885a      	ldrh	r2, [r3, #2]
		    htons(local_port)) {
   25202:	ea4f 2318 	mov.w	r3, r8, lsr #8
   25206:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
   2520a:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].local_addr)->sin_port !=
   2520c:	429a      	cmp	r2, r3
   2520e:	d195      	bne.n	2513c <find_conn_handler+0x38>
   25210:	e001      	b.n	25216 <find_conn_handler+0x112>
		}

		return i;
	}

	return -ENOENT;
   25212:	f06f 0401 	mvn.w	r4, #1
}
   25216:	4620      	mov	r0, r4
   25218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2521c:	200005b0 	.word	0x200005b0

00025220 <check_addr>:
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   25220:	b538      	push	{r3, r4, r5, lr}
	if (addr->sa_family != net_pkt_family(pkt)) {
   25222:	880c      	ldrh	r4, [r1, #0]
	return pkt->family;
   25224:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   25228:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2522c:	b29d      	uxth	r5, r3
   2522e:	42ac      	cmp	r4, r5
   25230:	d002      	beq.n	25238 <check_addr+0x18>
		return false;
   25232:	2400      	movs	r4, #0
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
}
   25234:	4620      	mov	r0, r4
   25236:	bd38      	pop	{r3, r4, r5, pc}
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   25238:	2b0a      	cmp	r3, #10
   2523a:	d001      	beq.n	25240 <check_addr+0x20>
	return true;
   2523c:	2401      	movs	r4, #1
   2523e:	e7f9      	b.n	25234 <check_addr+0x14>
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   25240:	2c0a      	cmp	r4, #10
   25242:	d001      	beq.n	25248 <check_addr+0x28>
	return true;
   25244:	2401      	movs	r4, #1
   25246:	e7f5      	b.n	25234 <check_addr+0x14>
		if (is_remote) {
   25248:	b162      	cbz	r2, 25264 <check_addr+0x44>
	return pkt->frags->data;
   2524a:	6883      	ldr	r3, [r0, #8]
   2524c:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->src;
   2524e:	3308      	adds	r3, #8
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25250:	684a      	ldr	r2, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25252:	b95a      	cbnz	r2, 2526c <check_addr+0x4c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25254:	688a      	ldr	r2, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25256:	b9ba      	cbnz	r2, 25288 <check_addr+0x68>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25258:	68ca      	ldr	r2, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2525a:	b9ba      	cbnz	r2, 2528c <check_addr+0x6c>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2525c:	690a      	ldr	r2, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2525e:	b1ba      	cbz	r2, 25290 <check_addr+0x70>
   25260:	2200      	movs	r2, #0
   25262:	e004      	b.n	2526e <check_addr+0x4e>
   25264:	6883      	ldr	r3, [r0, #8]
   25266:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   25268:	3318      	adds	r3, #24
   2526a:	e7f1      	b.n	25250 <check_addr+0x30>
   2526c:	2200      	movs	r2, #0
		if (!net_is_ipv6_addr_unspecified(
   2526e:	4614      	mov	r4, r2
   25270:	2a00      	cmp	r2, #0
   25272:	d1df      	bne.n	25234 <check_addr+0x14>
   25274:	4608      	mov	r0, r1
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   25276:	2210      	movs	r2, #16
   25278:	4619      	mov	r1, r3
   2527a:	3004      	adds	r0, #4
   2527c:	f005 fab8 	bl	2a7f0 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   25280:	2800      	cmp	r0, #0
   25282:	d1d7      	bne.n	25234 <check_addr+0x14>
		return true;
   25284:	2401      	movs	r4, #1
   25286:	e7d5      	b.n	25234 <check_addr+0x14>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25288:	2200      	movs	r2, #0
   2528a:	e7f0      	b.n	2526e <check_addr+0x4e>
   2528c:	2200      	movs	r2, #0
   2528e:	e7ee      	b.n	2526e <check_addr+0x4e>
   25290:	2201      	movs	r2, #1
   25292:	e7ec      	b.n	2526e <check_addr+0x4e>

00025294 <net_conn_unregister>:
{
   25294:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   25296:	4b0d      	ldr	r3, [pc, #52]	; (252cc <net_conn_unregister+0x38>)
   25298:	4298      	cmp	r0, r3
   2529a:	d30d      	bcc.n	252b8 <net_conn_unregister+0x24>
   2529c:	33f0      	adds	r3, #240	; 0xf0
   2529e:	4298      	cmp	r0, r3
   252a0:	d80d      	bhi.n	252be <net_conn_unregister+0x2a>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   252a2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   252a6:	f013 0f01 	tst.w	r3, #1
   252aa:	d00b      	beq.n	252c4 <net_conn_unregister+0x30>
	memset(conn, 0, sizeof(*conn));
   252ac:	223c      	movs	r2, #60	; 0x3c
   252ae:	2100      	movs	r1, #0
   252b0:	f005 fb32 	bl	2a918 <memset>
	return 0;
   252b4:	2000      	movs	r0, #0
   252b6:	bd08      	pop	{r3, pc}
		return -EINVAL;
   252b8:	f06f 0015 	mvn.w	r0, #21
   252bc:	bd08      	pop	{r3, pc}
   252be:	f06f 0015 	mvn.w	r0, #21
   252c2:	bd08      	pop	{r3, pc}
		return -ENOENT;
   252c4:	f06f 0001 	mvn.w	r0, #1
}
   252c8:	bd08      	pop	{r3, pc}
   252ca:	bf00      	nop
   252cc:	200005b0 	.word	0x200005b0

000252d0 <net_conn_register>:
{
   252d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   252d4:	b082      	sub	sp, #8
   252d6:	4681      	mov	r9, r0
   252d8:	460d      	mov	r5, r1
   252da:	4616      	mov	r6, r2
   252dc:	4698      	mov	r8, r3
   252de:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	i = find_conn_handler(proto, remote_addr, local_addr, remote_port,
   252e2:	9700      	str	r7, [sp, #0]
   252e4:	f7ff ff0e 	bl	25104 <find_conn_handler>
	if (i != -ENOENT) {
   252e8:	f110 0f02 	cmn.w	r0, #2
   252ec:	f040 80ba 	bne.w	25464 <net_conn_register+0x194>
   252f0:	2400      	movs	r4, #0
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   252f2:	2c03      	cmp	r4, #3
   252f4:	f300 80aa 	bgt.w	2544c <net_conn_register+0x17c>
		if (conns[i].flags & NET_CONN_IN_USE) {
   252f8:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   252fc:	009a      	lsls	r2, r3, #2
   252fe:	4b60      	ldr	r3, [pc, #384]	; (25480 <net_conn_register+0x1b0>)
   25300:	4413      	add	r3, r2
   25302:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   25306:	f013 0f01 	tst.w	r3, #1
   2530a:	d001      	beq.n	25310 <net_conn_register+0x40>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2530c:	3401      	adds	r4, #1
   2530e:	e7f0      	b.n	252f2 <net_conn_register+0x22>
		if (remote_addr) {
   25310:	2d00      	cmp	r5, #0
   25312:	d04b      	beq.n	253ac <net_conn_register+0xdc>
			if (remote_addr->sa_family == AF_INET6) {
   25314:	882b      	ldrh	r3, [r5, #0]
   25316:	2b0a      	cmp	r3, #10
   25318:	f040 80a7 	bne.w	2546a <net_conn_register+0x19a>
				memcpy(&conns[i].remote_addr, remote_addr,
   2531c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25320:	0093      	lsls	r3, r2, #2
   25322:	2218      	movs	r2, #24
   25324:	4629      	mov	r1, r5
   25326:	4856      	ldr	r0, [pc, #344]	; (25480 <net_conn_register+0x1b0>)
   25328:	4418      	add	r0, r3
   2532a:	f7da ffc9 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2532e:	686b      	ldr	r3, [r5, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25330:	b93b      	cbnz	r3, 25342 <net_conn_register+0x72>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25332:	68ab      	ldr	r3, [r5, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25334:	bb8b      	cbnz	r3, 2539a <net_conn_register+0xca>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25336:	68eb      	ldr	r3, [r5, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25338:	bb8b      	cbnz	r3, 2539e <net_conn_register+0xce>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2533a:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2533c:	b38b      	cbz	r3, 253a2 <net_conn_register+0xd2>
   2533e:	2300      	movs	r3, #0
   25340:	e000      	b.n	25344 <net_conn_register+0x74>
   25342:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   25344:	b37b      	cbz	r3, 253a6 <net_conn_register+0xd6>
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   25346:	f04f 0a08 	mov.w	sl, #8
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   2534a:	0122      	lsls	r2, r4, #4
   2534c:	1b12      	subs	r2, r2, r4
   2534e:	0091      	lsls	r1, r2, #2
   25350:	4b4b      	ldr	r3, [pc, #300]	; (25480 <net_conn_register+0x1b0>)
   25352:	440b      	add	r3, r1
   25354:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   25358:	f042 0202 	orr.w	r2, r2, #2
   2535c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (local_addr) {
   25360:	2e00      	cmp	r6, #0
   25362:	d036      	beq.n	253d2 <net_conn_register+0x102>
			if (local_addr->sa_family == AF_INET6) {
   25364:	8833      	ldrh	r3, [r6, #0]
   25366:	2b0a      	cmp	r3, #10
   25368:	f040 8082 	bne.w	25470 <net_conn_register+0x1a0>
				memcpy(&conns[i].local_addr, local_addr,
   2536c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25370:	0098      	lsls	r0, r3, #2
   25372:	3018      	adds	r0, #24
   25374:	2218      	movs	r2, #24
   25376:	4631      	mov	r1, r6
   25378:	4b41      	ldr	r3, [pc, #260]	; (25480 <net_conn_register+0x1b0>)
   2537a:	4418      	add	r0, r3
   2537c:	f7da ffa0 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25380:	6873      	ldr	r3, [r6, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25382:	b9b3      	cbnz	r3, 253b2 <net_conn_register+0xe2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25384:	68b3      	ldr	r3, [r6, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25386:	2b00      	cmp	r3, #0
   25388:	d163      	bne.n	25452 <net_conn_register+0x182>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2538a:	68f3      	ldr	r3, [r6, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2538c:	2b00      	cmp	r3, #0
   2538e:	d162      	bne.n	25456 <net_conn_register+0x186>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   25390:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25392:	2b00      	cmp	r3, #0
   25394:	d061      	beq.n	2545a <net_conn_register+0x18a>
   25396:	2300      	movs	r3, #0
   25398:	e00c      	b.n	253b4 <net_conn_register+0xe4>
   2539a:	2300      	movs	r3, #0
   2539c:	e7d2      	b.n	25344 <net_conn_register+0x74>
   2539e:	2300      	movs	r3, #0
   253a0:	e7d0      	b.n	25344 <net_conn_register+0x74>
   253a2:	2301      	movs	r3, #1
   253a4:	e7ce      	b.n	25344 <net_conn_register+0x74>
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   253a6:	f04f 0a20 	mov.w	sl, #32
   253aa:	e7ce      	b.n	2534a <net_conn_register+0x7a>
	u8_t rank = 0;
   253ac:	f04f 0a00 	mov.w	sl, #0
   253b0:	e7d6      	b.n	25360 <net_conn_register+0x90>
   253b2:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   253b4:	2b00      	cmp	r3, #0
   253b6:	d052      	beq.n	2545e <net_conn_register+0x18e>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   253b8:	f04a 0a04 	orr.w	sl, sl, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   253bc:	0122      	lsls	r2, r4, #4
   253be:	1b12      	subs	r2, r2, r4
   253c0:	0091      	lsls	r1, r2, #2
   253c2:	4b2f      	ldr	r3, [pc, #188]	; (25480 <net_conn_register+0x1b0>)
   253c4:	440b      	add	r3, r1
   253c6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   253ca:	f042 0204 	orr.w	r2, r2, #4
   253ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   253d2:	b125      	cbz	r5, 253de <net_conn_register+0x10e>
   253d4:	b11e      	cbz	r6, 253de <net_conn_register+0x10e>
			if (remote_addr->sa_family != local_addr->sa_family) {
   253d6:	882a      	ldrh	r2, [r5, #0]
   253d8:	8833      	ldrh	r3, [r6, #0]
   253da:	429a      	cmp	r2, r3
   253dc:	d14b      	bne.n	25476 <net_conn_register+0x1a6>
		if (remote_port) {
   253de:	f1b8 0f00 	cmp.w	r8, #0
   253e2:	d00c      	beq.n	253fe <net_conn_register+0x12e>
			rank |= NET_RANK_REMOTE_PORT;
   253e4:	f04a 0a02 	orr.w	sl, sl, #2
			net_sin(&conns[i].remote_addr)->sin_port =
   253e8:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   253ec:	009a      	lsls	r2, r3, #2
   253ee:	4b24      	ldr	r3, [pc, #144]	; (25480 <net_conn_register+0x1b0>)
   253f0:	4413      	add	r3, r2
				htons(remote_port);
   253f2:	ea4f 2218 	mov.w	r2, r8, lsr #8
   253f6:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
			net_sin(&conns[i].remote_addr)->sin_port =
   253fa:	f8a3 8002 	strh.w	r8, [r3, #2]
		if (local_port) {
   253fe:	b15f      	cbz	r7, 25418 <net_conn_register+0x148>
			rank |= NET_RANK_LOCAL_PORT;
   25400:	f04a 0a01 	orr.w	sl, sl, #1
			net_sin(&conns[i].local_addr)->sin_port =
   25404:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25408:	0093      	lsls	r3, r2, #2
   2540a:	3318      	adds	r3, #24
   2540c:	4a1c      	ldr	r2, [pc, #112]	; (25480 <net_conn_register+0x1b0>)
   2540e:	4413      	add	r3, r2
				htons(local_port);
   25410:	0a3a      	lsrs	r2, r7, #8
   25412:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
			net_sin(&conns[i].local_addr)->sin_port =
   25416:	805f      	strh	r7, [r3, #2]
		conns[i].flags |= NET_CONN_IN_USE;
   25418:	0122      	lsls	r2, r4, #4
   2541a:	1b12      	subs	r2, r2, r4
   2541c:	0091      	lsls	r1, r2, #2
   2541e:	4b18      	ldr	r3, [pc, #96]	; (25480 <net_conn_register+0x1b0>)
   25420:	440b      	add	r3, r1
   25422:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   25426:	f042 0201 	orr.w	r2, r2, #1
   2542a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		conns[i].cb = cb;
   2542e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   25430:	631a      	str	r2, [r3, #48]	; 0x30
		conns[i].user_data = user_data;
   25432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   25434:	635a      	str	r2, [r3, #52]	; 0x34
		conns[i].rank = rank;
   25436:	f883 a03a 	strb.w	sl, [r3, #58]	; 0x3a
		conns[i].proto = proto;
   2543a:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
		if (handle) {
   2543e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25440:	b1e3      	cbz	r3, 2547c <net_conn_register+0x1ac>
			*handle = (struct net_conn_handle *)&conns[i];
   25442:	4b0f      	ldr	r3, [pc, #60]	; (25480 <net_conn_register+0x1b0>)
   25444:	440b      	add	r3, r1
   25446:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   25448:	6013      	str	r3, [r2, #0]
		return 0;
   2544a:	2000      	movs	r0, #0
}
   2544c:	b002      	add	sp, #8
   2544e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25452:	2300      	movs	r3, #0
   25454:	e7ae      	b.n	253b4 <net_conn_register+0xe4>
   25456:	2300      	movs	r3, #0
   25458:	e7ac      	b.n	253b4 <net_conn_register+0xe4>
   2545a:	2301      	movs	r3, #1
   2545c:	e7aa      	b.n	253b4 <net_conn_register+0xe4>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   2545e:	f04a 0a10 	orr.w	sl, sl, #16
   25462:	e7ab      	b.n	253bc <net_conn_register+0xec>
		return -EALREADY;
   25464:	f06f 0077 	mvn.w	r0, #119	; 0x77
   25468:	e7f0      	b.n	2544c <net_conn_register+0x17c>
				return -EINVAL;
   2546a:	f06f 0015 	mvn.w	r0, #21
   2546e:	e7ed      	b.n	2544c <net_conn_register+0x17c>
				return -EINVAL;
   25470:	f06f 0015 	mvn.w	r0, #21
   25474:	e7ea      	b.n	2544c <net_conn_register+0x17c>
				return -EINVAL;
   25476:	f06f 0015 	mvn.w	r0, #21
   2547a:	e7e7      	b.n	2544c <net_conn_register+0x17c>
		return 0;
   2547c:	2000      	movs	r0, #0
   2547e:	e7e5      	b.n	2544c <net_conn_register+0x17c>
   25480:	200005b0 	.word	0x200005b0

00025484 <net_conn_input>:
#endif /* CONFIG_NET_IPV4 */
	}
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   25484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25488:	b089      	sub	sp, #36	; 0x24
   2548a:	4605      	mov	r5, r0
   2548c:	460e      	mov	r6, r1

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   2548e:	2811      	cmp	r0, #17
   25490:	d005      	beq.n	2549e <net_conn_input+0x1a>
		}

		src_port = udp_hdr->src_port;
		dst_port = udp_hdr->dst_port;
		chksum = udp_hdr->chksum;
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   25492:	2806      	cmp	r0, #6
   25494:	d015      	beq.n	254c2 <net_conn_input+0x3e>
		src_port = tcp_hdr->src_port;
		dst_port = tcp_hdr->dst_port;
		chksum = tcp_hdr->chksum;
	} else {
		NET_DBG("No UDP or TCP configured, dropping packet.");
		return NET_DROP;
   25496:	2002      	movs	r0, #2

drop:
	net_stats_update_per_proto_drop(proto);

	return NET_DROP;
}
   25498:	b009      	add	sp, #36	; 0x24
   2549a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   2549e:	a903      	add	r1, sp, #12
   254a0:	4630      	mov	r0, r6
   254a2:	f7fd ff73 	bl	2338c <net_udp_get_hdr>
		if (!udp_hdr) {
   254a6:	b150      	cbz	r0, 254be <net_conn_input+0x3a>
		src_port = udp_hdr->src_port;
   254a8:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = udp_hdr->dst_port;
   254ac:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = udp_hdr->chksum;
   254b0:	f8b0 a006 	ldrh.w	sl, [r0, #6]
	s16_t best_rank = -1;
   254b4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	int i, best_match = -1;
   254b8:	4647      	mov	r7, r8
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   254ba:	2400      	movs	r4, #0
   254bc:	e01b      	b.n	254f6 <net_conn_input+0x72>
			return NET_DROP;
   254be:	2002      	movs	r0, #2
   254c0:	e7ea      	b.n	25498 <net_conn_input+0x14>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   254c2:	a903      	add	r1, sp, #12
   254c4:	4630      	mov	r0, r6
   254c6:	f7fe fbcd 	bl	23c64 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   254ca:	b130      	cbz	r0, 254da <net_conn_input+0x56>
		src_port = tcp_hdr->src_port;
   254cc:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = tcp_hdr->dst_port;
   254d0:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = tcp_hdr->chksum;
   254d4:	f8b0 a010 	ldrh.w	sl, [r0, #16]
   254d8:	e7ec      	b.n	254b4 <net_conn_input+0x30>
			return NET_DROP;
   254da:	2002      	movs	r0, #2
   254dc:	e7dc      	b.n	25498 <net_conn_input+0x14>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   254de:	ebc4 1004 	rsb	r0, r4, r4, lsl #4
   254e2:	0082      	lsls	r2, r0, #2
   254e4:	3218      	adds	r2, #24
   254e6:	4866      	ldr	r0, [pc, #408]	; (25680 <net_conn_input+0x1fc>)
   254e8:	1882      	adds	r2, r0, r2
   254ea:	9201      	str	r2, [sp, #4]
   254ec:	8852      	ldrh	r2, [r2, #2]
   254ee:	b1fa      	cbz	r2, 25530 <net_conn_input+0xac>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   254f0:	4593      	cmp	fp, r2
   254f2:	d01d      	beq.n	25530 <net_conn_input+0xac>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   254f4:	3401      	adds	r4, #1
   254f6:	2c03      	cmp	r4, #3
   254f8:	dc4d      	bgt.n	25596 <net_conn_input+0x112>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   254fa:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   254fe:	009a      	lsls	r2, r3, #2
   25500:	4b5f      	ldr	r3, [pc, #380]	; (25680 <net_conn_input+0x1fc>)
   25502:	4413      	add	r3, r2
   25504:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   25508:	f013 0f01 	tst.w	r3, #1
   2550c:	d0f2      	beq.n	254f4 <net_conn_input+0x70>
		if (conns[i].proto != proto) {
   2550e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25512:	0091      	lsls	r1, r2, #2
   25514:	4a5a      	ldr	r2, [pc, #360]	; (25680 <net_conn_input+0x1fc>)
   25516:	440a      	add	r2, r1
   25518:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   2551c:	4295      	cmp	r5, r2
   2551e:	d1e9      	bne.n	254f4 <net_conn_input+0x70>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   25520:	4a57      	ldr	r2, [pc, #348]	; (25680 <net_conn_input+0x1fc>)
   25522:	4411      	add	r1, r2
   25524:	884a      	ldrh	r2, [r1, #2]
   25526:	2a00      	cmp	r2, #0
   25528:	d0d9      	beq.n	254de <net_conn_input+0x5a>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   2552a:	4591      	cmp	r9, r2
   2552c:	d1e2      	bne.n	254f4 <net_conn_input+0x70>
   2552e:	e7d6      	b.n	254de <net_conn_input+0x5a>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   25530:	f013 0f02 	tst.w	r3, #2
   25534:	d120      	bne.n	25578 <net_conn_input+0xf4>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   25536:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2553a:	009a      	lsls	r2, r3, #2
   2553c:	4b50      	ldr	r3, [pc, #320]	; (25680 <net_conn_input+0x1fc>)
   2553e:	4413      	add	r3, r2
   25540:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   25544:	f013 0f04 	tst.w	r3, #4
   25548:	d11d      	bne.n	25586 <net_conn_input+0x102>
		if (best_match >= 0 &&
   2554a:	2f00      	cmp	r7, #0
   2554c:	db07      	blt.n	2555e <net_conn_input+0xda>
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   2554e:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
   25552:	009a      	lsls	r2, r3, #2
   25554:	4b4a      	ldr	r3, [pc, #296]	; (25680 <net_conn_input+0x1fc>)
   25556:	4413      	add	r3, r2
   25558:	885b      	ldrh	r3, [r3, #2]
		if (best_match >= 0 &&
   2555a:	2b00      	cmp	r3, #0
   2555c:	d1ca      	bne.n	254f4 <net_conn_input+0x70>
		if (best_rank < conns[i].rank) {
   2555e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25562:	009a      	lsls	r2, r3, #2
   25564:	4b46      	ldr	r3, [pc, #280]	; (25680 <net_conn_input+0x1fc>)
   25566:	4413      	add	r3, r2
   25568:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   2556c:	4598      	cmp	r8, r3
   2556e:	dac1      	bge.n	254f4 <net_conn_input+0x70>
			best_rank = conns[i].rank;
   25570:	fa0f f883 	sxth.w	r8, r3
			best_match = i;
   25574:	4627      	mov	r7, r4
   25576:	e7bd      	b.n	254f4 <net_conn_input+0x70>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   25578:	2201      	movs	r2, #1
   2557a:	4630      	mov	r0, r6
   2557c:	f7ff fe50 	bl	25220 <check_addr>
   25580:	2800      	cmp	r0, #0
   25582:	d0b7      	beq.n	254f4 <net_conn_input+0x70>
   25584:	e7d7      	b.n	25536 <net_conn_input+0xb2>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   25586:	2200      	movs	r2, #0
   25588:	9901      	ldr	r1, [sp, #4]
   2558a:	4630      	mov	r0, r6
   2558c:	f7ff fe48 	bl	25220 <check_addr>
   25590:	2800      	cmp	r0, #0
   25592:	d0af      	beq.n	254f4 <net_conn_input+0x70>
   25594:	e7d9      	b.n	2554a <net_conn_input+0xc6>
	if (best_match >= 0) {
   25596:	2f00      	cmp	r7, #0
   25598:	db44      	blt.n	25624 <net_conn_input+0x1a0>
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   2559a:	2d11      	cmp	r5, #17
   2559c:	d014      	beq.n	255c8 <net_conn_input+0x144>
		} else if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   2559e:	2d06      	cmp	r5, #6
   255a0:	d023      	beq.n	255ea <net_conn_input+0x166>
		if (conns[best_match].cb(&conns[best_match], pkt,
   255a2:	4c37      	ldr	r4, [pc, #220]	; (25680 <net_conn_input+0x1fc>)
   255a4:	013a      	lsls	r2, r7, #4
   255a6:	1bd1      	subs	r1, r2, r7
   255a8:	008b      	lsls	r3, r1, #2
   255aa:	4423      	add	r3, r4
   255ac:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   255b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   255b2:	4631      	mov	r1, r6
   255b4:	4618      	mov	r0, r3
   255b6:	47c0      	blx	r8
   255b8:	2802      	cmp	r0, #2
   255ba:	d03d      	beq.n	25638 <net_conn_input+0x1b4>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   255bc:	2d11      	cmp	r5, #17
   255be:	d023      	beq.n	25608 <net_conn_input+0x184>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   255c0:	2d06      	cmp	r5, #6
   255c2:	d029      	beq.n	25618 <net_conn_input+0x194>
		return NET_OK;
   255c4:	2000      	movs	r0, #0
   255c6:	e767      	b.n	25498 <net_conn_input+0x14>
			net_udp_set_chksum(pkt, pkt->frags);
   255c8:	68b1      	ldr	r1, [r6, #8]
   255ca:	4630      	mov	r0, r6
   255cc:	f7fd fe6b 	bl	232a6 <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   255d0:	68b1      	ldr	r1, [r6, #8]
   255d2:	4630      	mov	r0, r6
   255d4:	f7fd feb4 	bl	23340 <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   255d8:	4582      	cmp	sl, r0
   255da:	d0e2      	beq.n	255a2 <net_conn_input+0x11e>
	net_stats.udp.chkerr++;
   255dc:	4a29      	ldr	r2, [pc, #164]	; (25684 <net_conn_input+0x200>)
   255de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   255e2:	3301      	adds	r3, #1
   255e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
   255e8:	e026      	b.n	25638 <net_conn_input+0x1b4>
			net_tcp_set_chksum(pkt, pkt->frags);
   255ea:	68b1      	ldr	r1, [r6, #8]
   255ec:	4630      	mov	r0, r6
   255ee:	f7fe fc9e 	bl	23f2e <net_tcp_set_chksum>
			chksum_calc = net_tcp_get_chksum(pkt, pkt->frags);
   255f2:	68b1      	ldr	r1, [r6, #8]
   255f4:	4630      	mov	r0, r6
   255f6:	f7fe fc74 	bl	23ee2 <net_tcp_get_chksum>
			if (chksum != chksum_calc) {
   255fa:	4582      	cmp	sl, r0
   255fc:	d0d1      	beq.n	255a2 <net_conn_input+0x11e>
	net_stats.tcp.chkerr++;
   255fe:	4a21      	ldr	r2, [pc, #132]	; (25684 <net_conn_input+0x200>)
   25600:	6e13      	ldr	r3, [r2, #96]	; 0x60
   25602:	3301      	adds	r3, #1
   25604:	6613      	str	r3, [r2, #96]	; 0x60
   25606:	e017      	b.n	25638 <net_conn_input+0x1b4>
	net_stats.udp.recv++;
   25608:	4a1e      	ldr	r2, [pc, #120]	; (25684 <net_conn_input+0x200>)
   2560a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   2560e:	3301      	adds	r3, #1
   25610:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		return NET_OK;
   25614:	2000      	movs	r0, #0
   25616:	e73f      	b.n	25498 <net_conn_input+0x14>
	net_stats.tcp.recv++;
   25618:	4a1a      	ldr	r2, [pc, #104]	; (25684 <net_conn_input+0x200>)
   2561a:	6d53      	ldr	r3, [r2, #84]	; 0x54
   2561c:	3301      	adds	r3, #1
   2561e:	6553      	str	r3, [r2, #84]	; 0x54
   25620:	2000      	movs	r0, #0
   25622:	e739      	b.n	25498 <net_conn_input+0x14>
	return pkt->family;
   25624:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   25628:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6 &&
   2562c:	2b0a      	cmp	r3, #10
   2562e:	d009      	beq.n	25644 <net_conn_input+0x1c0>
	if (net_pkt_family(pkt) == AF_INET6) {
   25630:	2b0a      	cmp	r3, #10
   25632:	d00d      	beq.n	25650 <net_conn_input+0x1cc>
		if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   25634:	2d06      	cmp	r5, #6
   25636:	d012      	beq.n	2565e <net_conn_input+0x1da>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   25638:	2d11      	cmp	r5, #17
   2563a:	d015      	beq.n	25668 <net_conn_input+0x1e4>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   2563c:	2d06      	cmp	r5, #6
   2563e:	d019      	beq.n	25674 <net_conn_input+0x1f0>
	return NET_DROP;
   25640:	2002      	movs	r0, #2
   25642:	e729      	b.n	25498 <net_conn_input+0x14>
	return pkt->frags->data;
   25644:	68b2      	ldr	r2, [r6, #8]
   25646:	6892      	ldr	r2, [r2, #8]
	return addr->s6_addr[0] == 0xFF;
   25648:	7e12      	ldrb	r2, [r2, #24]
	if (net_pkt_family(pkt) == AF_INET6 &&
   2564a:	2aff      	cmp	r2, #255	; 0xff
   2564c:	d1f0      	bne.n	25630 <net_conn_input+0x1ac>
   2564e:	e7f3      	b.n	25638 <net_conn_input+0x1b4>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   25650:	2300      	movs	r3, #0
   25652:	2204      	movs	r2, #4
   25654:	2101      	movs	r1, #1
   25656:	4630      	mov	r0, r6
   25658:	f7f9 fc94 	bl	1ef84 <net_icmpv6_send_error>
   2565c:	e7ea      	b.n	25634 <net_conn_input+0x1b0>
	net_stats.tcp.connrst++;
   2565e:	4a09      	ldr	r2, [pc, #36]	; (25684 <net_conn_input+0x200>)
   25660:	6f93      	ldr	r3, [r2, #120]	; 0x78
   25662:	3301      	adds	r3, #1
   25664:	6793      	str	r3, [r2, #120]	; 0x78
   25666:	e7e7      	b.n	25638 <net_conn_input+0x1b4>
	net_stats.udp.drop++;
   25668:	4a06      	ldr	r2, [pc, #24]	; (25684 <net_conn_input+0x200>)
   2566a:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   2566c:	3301      	adds	r3, #1
   2566e:	67d3      	str	r3, [r2, #124]	; 0x7c
	return NET_DROP;
   25670:	2002      	movs	r0, #2
   25672:	e711      	b.n	25498 <net_conn_input+0x14>
	net_stats.tcp.drop++;
   25674:	4a03      	ldr	r2, [pc, #12]	; (25684 <net_conn_input+0x200>)
   25676:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   25678:	3301      	adds	r3, #1
   2567a:	65d3      	str	r3, [r2, #92]	; 0x5c
   2567c:	2002      	movs	r0, #2
   2567e:	e70b      	b.n	25498 <net_conn_input+0x14>
   25680:	200005b0 	.word	0x200005b0
   25684:	20002b58 	.word	0x20002b58

00025688 <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   25688:	4770      	bx	lr

0002568a <compute_rlen_size>:
 * @retval -EINVAL
 */
static
int compute_rlen_size(u16_t *size, u32_t len)
{
	if (len <= 127) {
   2568a:	297f      	cmp	r1, #127	; 0x7f
   2568c:	d912      	bls.n	256b4 <compute_rlen_size+0x2a>
		*size = 1;
	} else if (len >= 128 && len <= 16383) {
   2568e:	f1a1 0380 	sub.w	r3, r1, #128	; 0x80
   25692:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
   25696:	d311      	bcc.n	256bc <compute_rlen_size+0x32>
		*size = 2;
	} else if (len >= 16384 && len <= 2097151) {
   25698:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
   2569c:	f5b3 1ffe 	cmp.w	r3, #2080768	; 0x1fc000
   256a0:	d310      	bcc.n	256c4 <compute_rlen_size+0x3a>
		*size = 3;
	} else if (len >= 2097152 && len <= 268435455) {
   256a2:	f5a1 1100 	sub.w	r1, r1, #2097152	; 0x200000
   256a6:	f1b1 6f7e 	cmp.w	r1, #266338304	; 0xfe00000
   256aa:	d20f      	bcs.n	256cc <compute_rlen_size+0x42>
		*size = 4;
   256ac:	2304      	movs	r3, #4
   256ae:	8003      	strh	r3, [r0, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   256b0:	2000      	movs	r0, #0
   256b2:	4770      	bx	lr
		*size = 1;
   256b4:	2301      	movs	r3, #1
   256b6:	8003      	strh	r3, [r0, #0]
	return 0;
   256b8:	2000      	movs	r0, #0
   256ba:	4770      	bx	lr
		*size = 2;
   256bc:	2302      	movs	r3, #2
   256be:	8003      	strh	r3, [r0, #0]
	return 0;
   256c0:	2000      	movs	r0, #0
   256c2:	4770      	bx	lr
		*size = 3;
   256c4:	2303      	movs	r3, #3
   256c6:	8003      	strh	r3, [r0, #0]
	return 0;
   256c8:	2000      	movs	r0, #0
   256ca:	4770      	bx	lr
		return -EINVAL;
   256cc:	f06f 0015 	mvn.w	r0, #21
}
   256d0:	4770      	bx	lr

000256d2 <rlen_encode>:
 * @param [in] len Value to encode
 *
 * @retval 0 always
 */
static int rlen_encode(u8_t *buf, u32_t len)
{
   256d2:	b410      	push	{r4}
	u8_t encoded;
	u8_t i;

	i = 0;
   256d4:	2200      	movs	r2, #0
   256d6:	e004      	b.n	256e2 <rlen_encode+0x10>
		 * set the top bit of this byte
		 */
		if (len > 0) {
			encoded = encoded | 128;
		}
		buf[i++] = encoded;
   256d8:	1c53      	adds	r3, r2, #1
   256da:	b2db      	uxtb	r3, r3
   256dc:	5484      	strb	r4, [r0, r2]
	} while (len > 0);
   256de:	b139      	cbz	r1, 256f0 <rlen_encode+0x1e>
		buf[i++] = encoded;
   256e0:	461a      	mov	r2, r3
		encoded = len % 128;
   256e2:	f001 047f 	and.w	r4, r1, #127	; 0x7f
		if (len > 0) {
   256e6:	09c9      	lsrs	r1, r1, #7
   256e8:	d0f6      	beq.n	256d8 <rlen_encode+0x6>
			encoded = encoded | 128;
   256ea:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   256ee:	e7f3      	b.n	256d8 <rlen_encode+0x6>

	return 0;
}
   256f0:	2000      	movs	r0, #0
   256f2:	bc10      	pop	{r4}
   256f4:	4770      	bx	lr

000256f6 <rlen_decode>:
 * @retval 0 on success
 * @retval -ENOMEM if size < 4
 */
static int rlen_decode(u32_t *rlen, u16_t *rlen_size,
		       u8_t *buf, u16_t size)
{
   256f6:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t value = 0;
	u32_t mult = 1;
	u16_t i = 0;
   256f8:	2400      	movs	r4, #0
	u32_t mult = 1;
   256fa:	2601      	movs	r6, #1
	u32_t value = 0;
   256fc:	4627      	mov	r7, r4
   256fe:	e000      	b.n	25702 <rlen_decode+0xc>
	do {
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
			return -ENOMEM;
		}

		encoded = buf[i++];
   25700:	462c      	mov	r4, r5
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
   25702:	2c03      	cmp	r4, #3
   25704:	d810      	bhi.n	25728 <rlen_decode+0x32>
   25706:	429c      	cmp	r4, r3
   25708:	d211      	bcs.n	2572e <rlen_decode+0x38>
		encoded = buf[i++];
   2570a:	1c65      	adds	r5, r4, #1
   2570c:	b2ad      	uxth	r5, r5
   2570e:	5d14      	ldrb	r4, [r2, r4]
		value += (encoded & 127) * mult;
   25710:	f004 0e7f 	and.w	lr, r4, #127	; 0x7f
   25714:	fb0e 7706 	mla	r7, lr, r6, r7
		mult *= 128;
   25718:	01f6      	lsls	r6, r6, #7
	} while ((encoded & 128) != 0);
   2571a:	f014 0f80 	tst.w	r4, #128	; 0x80
   2571e:	d1ef      	bne.n	25700 <rlen_decode+0xa>

	*rlen = value;
   25720:	6007      	str	r7, [r0, #0]
	*rlen_size = i;
   25722:	800d      	strh	r5, [r1, #0]

	return 0;
   25724:	2000      	movs	r0, #0
   25726:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOMEM;
   25728:	f06f 000b 	mvn.w	r0, #11
   2572c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2572e:	f06f 000b 	mvn.w	r0, #11
}
   25732:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025734 <pack_pkt_id>:
 * @retval -ENOMEM if size < 4
 */
static
int pack_pkt_id(u8_t *buf, u16_t *length, u16_t size,
		enum mqtt_packet type, u8_t reserved, u16_t pkt_id)
{
   25734:	b410      	push	{r4}
   25736:	f8bd 4008 	ldrh.w	r4, [sp, #8]
	if (size < MSG_PKTID_ONLY_SIZE) {
   2573a:	2a03      	cmp	r2, #3
   2573c:	d912      	bls.n	25764 <pack_pkt_id+0x30>
		return -ENOMEM;
	}

	buf[0] = (type << 4) + (reserved & 0x0F);
   2573e:	011b      	lsls	r3, r3, #4
   25740:	b2db      	uxtb	r3, r3
   25742:	f89d 2004 	ldrb.w	r2, [sp, #4]
   25746:	f002 020f 	and.w	r2, r2, #15
   2574a:	4413      	add	r3, r2
   2574c:	7003      	strb	r3, [r0, #0]
	buf[1] = PACKET_ID_SIZE;
   2574e:	2302      	movs	r3, #2
   25750:	7043      	strb	r3, [r0, #1]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   25752:	0a23      	lsrs	r3, r4, #8
   25754:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   25758:	8043      	strh	r3, [r0, #2]
	*length = MSG_PKTID_ONLY_SIZE;
   2575a:	2304      	movs	r3, #4
   2575c:	800b      	strh	r3, [r1, #0]

	return 0;
   2575e:	2000      	movs	r0, #0
}
   25760:	bc10      	pop	{r4}
   25762:	4770      	bx	lr
		return -ENOMEM;
   25764:	f06f 000b 	mvn.w	r0, #11
   25768:	e7fa      	b.n	25760 <pack_pkt_id+0x2c>

0002576a <pack_zerolen>:
 */
static
int pack_zerolen(u8_t *buf, u16_t *length, u16_t size,
		 enum mqtt_packet pkt_type, u8_t reserved)
{
	if (size < MSG_ZEROLEN_SIZE) {
   2576a:	2a01      	cmp	r2, #1
   2576c:	d90d      	bls.n	2578a <pack_zerolen+0x20>
		return -ENOMEM;
	}

	buf[0] = (pkt_type << 4) + (reserved & 0x0F);
   2576e:	011b      	lsls	r3, r3, #4
   25770:	b2db      	uxtb	r3, r3
   25772:	f89d 2000 	ldrb.w	r2, [sp]
   25776:	f002 020f 	and.w	r2, r2, #15
   2577a:	4413      	add	r3, r2
   2577c:	7003      	strb	r3, [r0, #0]
	buf[1] = 0x00;
   2577e:	2300      	movs	r3, #0
   25780:	7043      	strb	r3, [r0, #1]
	*length = MSG_ZEROLEN_SIZE;
   25782:	2202      	movs	r2, #2
   25784:	800a      	strh	r2, [r1, #0]

	return 0;
   25786:	4618      	mov	r0, r3
   25788:	4770      	bx	lr
		return -ENOMEM;
   2578a:	f06f 000b 	mvn.w	r0, #11
}
   2578e:	4770      	bx	lr

00025790 <unpack_pktid>:
 */
static
int unpack_pktid(u8_t *buf, u16_t length, enum mqtt_packet *type,
		 u8_t *reserved, u16_t *pkt_id)
{
	if (length < MSG_PKTID_ONLY_SIZE) {
   25790:	2903      	cmp	r1, #3
   25792:	d911      	bls.n	257b8 <unpack_pktid+0x28>
		return -EINVAL;
	}

	if (buf[1] != PACKET_ID_SIZE) {
   25794:	7841      	ldrb	r1, [r0, #1]
   25796:	2902      	cmp	r1, #2
   25798:	d111      	bne.n	257be <unpack_pktid+0x2e>
		return -EINVAL;
	}

	*type = buf[0] >> 4;
   2579a:	7801      	ldrb	r1, [r0, #0]
   2579c:	0909      	lsrs	r1, r1, #4
   2579e:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   257a0:	7802      	ldrb	r2, [r0, #0]
   257a2:	f002 020f 	and.w	r2, r2, #15
   257a6:	701a      	strb	r2, [r3, #0]
	*pkt_id = ntohs(*(u16_t *)(buf + 2));
   257a8:	8842      	ldrh	r2, [r0, #2]
   257aa:	0a13      	lsrs	r3, r2, #8
   257ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   257b0:	9a00      	ldr	r2, [sp, #0]
   257b2:	8013      	strh	r3, [r2, #0]

	return 0;
   257b4:	2000      	movs	r0, #0
   257b6:	4770      	bx	lr
		return -EINVAL;
   257b8:	f06f 0015 	mvn.w	r0, #21
   257bc:	4770      	bx	lr
		return -EINVAL;
   257be:	f06f 0015 	mvn.w	r0, #21
}
   257c2:	4770      	bx	lr

000257c4 <unpack_pktid_validate>:
 * @retval -EINVAL
 */
static
int unpack_pktid_validate(u8_t *buf, u16_t length, u16_t *pkt_id,
			  u8_t expected_type, u8_t expected_reserv)
{
   257c4:	b510      	push	{r4, lr}
   257c6:	b084      	sub	sp, #16
   257c8:	461c      	mov	r4, r3
	enum mqtt_packet type;
	u8_t reserved;
	int rc;

	rc = unpack_pktid(buf, length, &type, &reserved, pkt_id);
   257ca:	9200      	str	r2, [sp, #0]
   257cc:	f10d 030e 	add.w	r3, sp, #14
   257d0:	f10d 020f 	add.w	r2, sp, #15
   257d4:	f7ff ffdc 	bl	25790 <unpack_pktid>
	if (rc != 0) {
   257d8:	4603      	mov	r3, r0
   257da:	b948      	cbnz	r0, 257f0 <unpack_pktid_validate+0x2c>
		return rc;
	}

	if (type != expected_type || reserved != expected_reserv) {
   257dc:	f89d 200f 	ldrb.w	r2, [sp, #15]
   257e0:	42a2      	cmp	r2, r4
   257e2:	d10b      	bne.n	257fc <unpack_pktid_validate+0x38>
   257e4:	f89d 100e 	ldrb.w	r1, [sp, #14]
   257e8:	f89d 2018 	ldrb.w	r2, [sp, #24]
   257ec:	4291      	cmp	r1, r2
   257ee:	d102      	bne.n	257f6 <unpack_pktid_validate+0x32>
		return -EINVAL;
	}

	return 0;
}
   257f0:	4618      	mov	r0, r3
   257f2:	b004      	add	sp, #16
   257f4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   257f6:	f06f 0315 	mvn.w	r3, #21
   257fa:	e7f9      	b.n	257f0 <unpack_pktid_validate+0x2c>
   257fc:	f06f 0315 	mvn.w	r3, #21
   25800:	e7f6      	b.n	257f0 <unpack_pktid_validate+0x2c>

00025802 <unpack_zerolen>:
 */
static
int unpack_zerolen(u8_t *buf, u16_t length, enum mqtt_packet *pkt_type,
		   u8_t *reserved)
{
	if (length < MSG_ZEROLEN_SIZE) {
   25802:	2901      	cmp	r1, #1
   25804:	d90d      	bls.n	25822 <unpack_zerolen+0x20>
		return -EINVAL;
	}

	*pkt_type = buf[0] >> 4;
   25806:	7801      	ldrb	r1, [r0, #0]
   25808:	0909      	lsrs	r1, r1, #4
   2580a:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   2580c:	7802      	ldrb	r2, [r0, #0]
   2580e:	f002 020f 	and.w	r2, r2, #15
   25812:	701a      	strb	r2, [r3, #0]

	if (buf[1] != 0) {
   25814:	7843      	ldrb	r3, [r0, #1]
   25816:	b90b      	cbnz	r3, 2581c <unpack_zerolen+0x1a>
		return -EINVAL;
	}

	return 0;
   25818:	2000      	movs	r0, #0
}
   2581a:	4770      	bx	lr
		return -EINVAL;
   2581c:	f06f 0015 	mvn.w	r0, #21
   25820:	4770      	bx	lr
		return -EINVAL;
   25822:	f06f 0015 	mvn.w	r0, #21
   25826:	4770      	bx	lr

00025828 <unpack_zerolen_validate>:
 */
static
int unpack_zerolen_validate(u8_t *buf, u16_t length,
			    enum mqtt_packet expected_type,
			    u8_t expected_reserved)
{
   25828:	b530      	push	{r4, r5, lr}
   2582a:	b083      	sub	sp, #12
   2582c:	4614      	mov	r4, r2
   2582e:	461d      	mov	r5, r3
	enum mqtt_packet pkt_type;
	u8_t reserved;
	int rc;

	rc = unpack_zerolen(buf, length, &pkt_type, &reserved);
   25830:	f10d 0306 	add.w	r3, sp, #6
   25834:	f10d 0207 	add.w	r2, sp, #7
   25838:	f7ff ffe3 	bl	25802 <unpack_zerolen>
	if (rc != 0) {
   2583c:	4603      	mov	r3, r0
   2583e:	b938      	cbnz	r0, 25850 <unpack_zerolen_validate+0x28>
		return rc;
	}

	if (pkt_type != expected_type || reserved != expected_reserved) {
   25840:	f89d 2007 	ldrb.w	r2, [sp, #7]
   25844:	42a2      	cmp	r2, r4
   25846:	d109      	bne.n	2585c <unpack_zerolen_validate+0x34>
   25848:	f89d 2006 	ldrb.w	r2, [sp, #6]
   2584c:	42aa      	cmp	r2, r5
   2584e:	d102      	bne.n	25856 <unpack_zerolen_validate+0x2e>
		return -EINVAL;
	}

	return 0;
}
   25850:	4618      	mov	r0, r3
   25852:	b003      	add	sp, #12
   25854:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   25856:	f06f 0315 	mvn.w	r3, #21
   2585a:	e7f9      	b.n	25850 <unpack_zerolen_validate+0x28>
   2585c:	f06f 0315 	mvn.w	r3, #21
   25860:	e7f6      	b.n	25850 <unpack_zerolen_validate+0x28>

00025862 <mqtt_pack_puback>:
{
   25862:	b500      	push	{lr}
   25864:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBACK, 0, pkt_id);
   25866:	9301      	str	r3, [sp, #4]
   25868:	2300      	movs	r3, #0
   2586a:	9300      	str	r3, [sp, #0]
   2586c:	2304      	movs	r3, #4
   2586e:	f7ff ff61 	bl	25734 <pack_pkt_id>
}
   25872:	b003      	add	sp, #12
   25874:	f85d fb04 	ldr.w	pc, [sp], #4

00025878 <mqtt_pack_pubrec>:
{
   25878:	b500      	push	{lr}
   2587a:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREC, 0, pkt_id);
   2587c:	9301      	str	r3, [sp, #4]
   2587e:	2300      	movs	r3, #0
   25880:	9300      	str	r3, [sp, #0]
   25882:	2305      	movs	r3, #5
   25884:	f7ff ff56 	bl	25734 <pack_pkt_id>
}
   25888:	b003      	add	sp, #12
   2588a:	f85d fb04 	ldr.w	pc, [sp], #4

0002588e <mqtt_pack_pubrel>:
{
   2588e:	b500      	push	{lr}
   25890:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREL, PUBREL_RESERVED,
   25892:	9301      	str	r3, [sp, #4]
   25894:	2302      	movs	r3, #2
   25896:	9300      	str	r3, [sp, #0]
   25898:	2306      	movs	r3, #6
   2589a:	f7ff ff4b 	bl	25734 <pack_pkt_id>
}
   2589e:	b003      	add	sp, #12
   258a0:	f85d fb04 	ldr.w	pc, [sp], #4

000258a4 <mqtt_pack_pubcomp>:
{
   258a4:	b500      	push	{lr}
   258a6:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBCOMP, 0, pkt_id);
   258a8:	9301      	str	r3, [sp, #4]
   258aa:	2300      	movs	r3, #0
   258ac:	9300      	str	r3, [sp, #0]
   258ae:	2307      	movs	r3, #7
   258b0:	f7ff ff40 	bl	25734 <pack_pkt_id>
}
   258b4:	b003      	add	sp, #12
   258b6:	f85d fb04 	ldr.w	pc, [sp], #4

000258ba <mqtt_pack_connect>:
{
   258ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   258be:	b082      	sub	sp, #8
   258c0:	4605      	mov	r5, r0
   258c2:	460e      	mov	r6, r1
   258c4:	4617      	mov	r7, r2
   258c6:	461c      	mov	r4, r3
	pkt_size += msg->client_id_len;
   258c8:	891b      	ldrh	r3, [r3, #8]
   258ca:	1c99      	adds	r1, r3, #2
   258cc:	b289      	uxth	r1, r1
	if (msg->will_flag) {
   258ce:	7aa2      	ldrb	r2, [r4, #10]
   258d0:	f012 0f01 	tst.w	r2, #1
   258d4:	d009      	beq.n	258ea <mqtt_pack_connect+0x30>
		pkt_size += INT_SIZE;
   258d6:	1d19      	adds	r1, r3, #4
		pkt_size += msg->will_topic_len;
   258d8:	8aa3      	ldrh	r3, [r4, #20]
   258da:	fa13 f181 	uxtah	r1, r3, r1
   258de:	b289      	uxth	r1, r1
		pkt_size += INT_SIZE;
   258e0:	3102      	adds	r1, #2
		pkt_size += msg->will_msg_len;
   258e2:	8ba3      	ldrh	r3, [r4, #28]
   258e4:	fa13 f181 	uxtah	r1, r3, r1
   258e8:	b289      	uxth	r1, r1
	if (msg->user_name) {
   258ea:	6a23      	ldr	r3, [r4, #32]
   258ec:	b123      	cbz	r3, 258f8 <mqtt_pack_connect+0x3e>
		pkt_size += INT_SIZE;
   258ee:	3102      	adds	r1, #2
		pkt_size += msg->user_name_len;
   258f0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   258f2:	fa13 f181 	uxtah	r1, r3, r1
   258f6:	b289      	uxth	r1, r1
	if (msg->password) {
   258f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   258fa:	b123      	cbz	r3, 25906 <mqtt_pack_connect+0x4c>
		pkt_size += INT_SIZE;
   258fc:	3102      	adds	r1, #2
		pkt_size += msg->password_len;
   258fe:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   25900:	fa13 f181 	uxtah	r1, r3, r1
   25904:	b289      	uxth	r1, r1
	pkt_size += CONNECT_VARIABLE_HDR_SIZE;
   25906:	310a      	adds	r1, #10
   25908:	fa1f fa81 	uxth.w	sl, r1
	rc = compute_rlen_size(&rlen_size, pkt_size);
   2590c:	4651      	mov	r1, sl
   2590e:	f10d 0006 	add.w	r0, sp, #6
   25912:	f7ff feba 	bl	2568a <compute_rlen_size>
	if (rc != 0) {
   25916:	4681      	mov	r9, r0
   25918:	2800      	cmp	r0, #0
   2591a:	f040 80b6 	bne.w	25a8a <mqtt_pack_connect+0x1d0>
	total_buf_size = PACKET_TYPE_SIZE + rlen_size + pkt_size;
   2591e:	f8bd 8006 	ldrh.w	r8, [sp, #6]
   25922:	44d0      	add	r8, sl
   25924:	fa1f f888 	uxth.w	r8, r8
   25928:	f108 0801 	add.w	r8, r8, #1
   2592c:	fa1f f888 	uxth.w	r8, r8
	if (total_buf_size > size) {
   25930:	45b8      	cmp	r8, r7
   25932:	f200 80ad 	bhi.w	25a90 <mqtt_pack_connect+0x1d6>
	buf[0] = MQTT_CONNECT << 4;
   25936:	4628      	mov	r0, r5
   25938:	2310      	movs	r3, #16
   2593a:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, pkt_size);
   2593e:	4651      	mov	r1, sl
   25940:	f7ff fec7 	bl	256d2 <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   25944:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   25948:	1c43      	adds	r3, r0, #1
   2594a:	b29b      	uxth	r3, r3
	buf[offset + 0] = 0x00;
   2594c:	2200      	movs	r2, #0
   2594e:	54ea      	strb	r2, [r5, r3]
	buf[offset + 1] = 0x04;
   25950:	1c59      	adds	r1, r3, #1
   25952:	2204      	movs	r2, #4
   25954:	546a      	strb	r2, [r5, r1]
	buf[offset + 2] = 'M';
   25956:	1c99      	adds	r1, r3, #2
   25958:	274d      	movs	r7, #77	; 0x4d
   2595a:	546f      	strb	r7, [r5, r1]
	buf[offset + 3] = 'Q';
   2595c:	1cd9      	adds	r1, r3, #3
   2595e:	2751      	movs	r7, #81	; 0x51
   25960:	546f      	strb	r7, [r5, r1]
	buf[offset + 4] = 'T';
   25962:	189f      	adds	r7, r3, r2
   25964:	2154      	movs	r1, #84	; 0x54
   25966:	55e9      	strb	r1, [r5, r7]
	buf[offset + 5] = 'T';
   25968:	1d5f      	adds	r7, r3, #5
   2596a:	55e9      	strb	r1, [r5, r7]
	buf[offset + 6] = 0x04;
   2596c:	1d99      	adds	r1, r3, #6
   2596e:	546a      	strb	r2, [r5, r1]
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   25970:	1ddf      	adds	r7, r3, #7
   25972:	6a22      	ldr	r2, [r4, #32]
   25974:	2a00      	cmp	r2, #0
   25976:	d05f      	beq.n	25a38 <mqtt_pack_connect+0x17e>
   25978:	f06f 017f 	mvn.w	r1, #127	; 0x7f
			  (msg->password_len ? 1 << 6 : 0) |
   2597c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   2597e:	2a00      	cmp	r2, #0
   25980:	d05c      	beq.n	25a3c <mqtt_pack_connect+0x182>
   25982:	2240      	movs	r2, #64	; 0x40
   25984:	4311      	orrs	r1, r2
			  (msg->will_retain ? 1 << 5 : 0) |
   25986:	7b22      	ldrb	r2, [r4, #12]
			  (msg->password_len ? 1 << 6 : 0) |
   25988:	f012 0f01 	tst.w	r2, #1
   2598c:	d058      	beq.n	25a40 <mqtt_pack_connect+0x186>
   2598e:	2220      	movs	r2, #32
   25990:	4311      	orrs	r1, r2
			  ((msg->will_qos & 0x03) << 3) |
   25992:	7ae2      	ldrb	r2, [r4, #11]
   25994:	00d2      	lsls	r2, r2, #3
   25996:	f002 0218 	and.w	r2, r2, #24
			  (msg->will_retain ? 1 << 5 : 0) |
   2599a:	430a      	orrs	r2, r1
			  (msg->will_flag ? 1 << 2 : 0) |
   2599c:	7aa1      	ldrb	r1, [r4, #10]
			  ((msg->will_qos & 0x03) << 3) |
   2599e:	f011 0f01 	tst.w	r1, #1
   259a2:	d04f      	beq.n	25a44 <mqtt_pack_connect+0x18a>
   259a4:	2104      	movs	r1, #4
   259a6:	4311      	orrs	r1, r2
			  (msg->clean_session ? 1 << 1 : 0);
   259a8:	7822      	ldrb	r2, [r4, #0]
			  (msg->will_flag ? 1 << 2 : 0) |
   259aa:	f012 0f01 	tst.w	r2, #1
   259ae:	d04b      	beq.n	25a48 <mqtt_pack_connect+0x18e>
   259b0:	2202      	movs	r2, #2
   259b2:	430a      	orrs	r2, r1
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   259b4:	55ea      	strb	r2, [r5, r7]
	UNALIGNED_PUT(htons(msg->keep_alive), (u16_t *)(buf + offset + 8));
   259b6:	3308      	adds	r3, #8
   259b8:	8be1      	ldrh	r1, [r4, #30]
   259ba:	0a0a      	lsrs	r2, r1, #8
   259bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   259c0:	52ea      	strh	r2, [r5, r3]
	offset += 8 + INT_SIZE;
   259c2:	f100 030b 	add.w	r3, r0, #11
   259c6:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->client_id_len),
   259c8:	8921      	ldrh	r1, [r4, #8]
   259ca:	0a0a      	lsrs	r2, r1, #8
   259cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   259d0:	52ea      	strh	r2, [r5, r3]
	offset += INT_SIZE;
   259d2:	300d      	adds	r0, #13
   259d4:	b287      	uxth	r7, r0
	memcpy(buf + offset, msg->client_id, msg->client_id_len);
   259d6:	8922      	ldrh	r2, [r4, #8]
   259d8:	6861      	ldr	r1, [r4, #4]
   259da:	19e8      	adds	r0, r5, r7
   259dc:	f7da fc70 	bl	2c0 <memcpy>
	offset += msg->client_id_len;
   259e0:	8920      	ldrh	r0, [r4, #8]
   259e2:	4438      	add	r0, r7
   259e4:	b280      	uxth	r0, r0
	if (msg->will_flag) {
   259e6:	7aa3      	ldrb	r3, [r4, #10]
   259e8:	f013 0f01 	tst.w	r3, #1
   259ec:	d12e      	bne.n	25a4c <mqtt_pack_connect+0x192>
	if (msg->user_name) {
   259ee:	6a23      	ldr	r3, [r4, #32]
   259f0:	b173      	cbz	r3, 25a10 <mqtt_pack_connect+0x156>
		UNALIGNED_PUT(htons(msg->user_name_len),
   259f2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   259f4:	0a13      	lsrs	r3, r2, #8
   259f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   259fa:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   259fc:	3002      	adds	r0, #2
   259fe:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->user_name, msg->user_name_len);
   25a00:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   25a02:	6a21      	ldr	r1, [r4, #32]
   25a04:	19e8      	adds	r0, r5, r7
   25a06:	f7da fc5b 	bl	2c0 <memcpy>
		offset += msg->user_name_len;
   25a0a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   25a0c:	4438      	add	r0, r7
   25a0e:	b280      	uxth	r0, r0
	if (msg->password) {
   25a10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25a12:	b15b      	cbz	r3, 25a2c <mqtt_pack_connect+0x172>
		UNALIGNED_PUT(htons(msg->password_len),
   25a14:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   25a16:	0a13      	lsrs	r3, r2, #8
   25a18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25a1c:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   25a1e:	3002      	adds	r0, #2
		memcpy(buf + offset, msg->password, msg->password_len);
   25a20:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   25a22:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   25a24:	fa15 f080 	uxtah	r0, r5, r0
   25a28:	f7da fc4a 	bl	2c0 <memcpy>
	*length = total_buf_size;
   25a2c:	f8a6 8000 	strh.w	r8, [r6]
}
   25a30:	4648      	mov	r0, r9
   25a32:	b002      	add	sp, #8
   25a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   25a38:	2100      	movs	r1, #0
   25a3a:	e79f      	b.n	2597c <mqtt_pack_connect+0xc2>
   25a3c:	2200      	movs	r2, #0
   25a3e:	e7a1      	b.n	25984 <mqtt_pack_connect+0xca>
			  (msg->password_len ? 1 << 6 : 0) |
   25a40:	2200      	movs	r2, #0
   25a42:	e7a5      	b.n	25990 <mqtt_pack_connect+0xd6>
			  ((msg->will_qos & 0x03) << 3) |
   25a44:	2100      	movs	r1, #0
   25a46:	e7ae      	b.n	259a6 <mqtt_pack_connect+0xec>
			  (msg->will_flag ? 1 << 2 : 0) |
   25a48:	2200      	movs	r2, #0
   25a4a:	e7b2      	b.n	259b2 <mqtt_pack_connect+0xf8>
		UNALIGNED_PUT(htons(msg->will_topic_len),
   25a4c:	8aa2      	ldrh	r2, [r4, #20]
   25a4e:	0a13      	lsrs	r3, r2, #8
   25a50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25a54:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   25a56:	3002      	adds	r0, #2
   25a58:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->will_topic,
   25a5a:	8aa2      	ldrh	r2, [r4, #20]
   25a5c:	6921      	ldr	r1, [r4, #16]
   25a5e:	19e8      	adds	r0, r5, r7
   25a60:	f7da fc2e 	bl	2c0 <memcpy>
		offset += msg->will_topic_len;
   25a64:	8aa0      	ldrh	r0, [r4, #20]
   25a66:	4407      	add	r7, r0
   25a68:	b2bf      	uxth	r7, r7
		UNALIGNED_PUT(htons(msg->will_msg_len),
   25a6a:	8ba2      	ldrh	r2, [r4, #28]
   25a6c:	0a13      	lsrs	r3, r2, #8
   25a6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25a72:	53eb      	strh	r3, [r5, r7]
		offset += INT_SIZE;
   25a74:	3702      	adds	r7, #2
   25a76:	b2bf      	uxth	r7, r7
		memcpy(buf + offset, msg->will_msg, msg->will_msg_len);
   25a78:	8ba2      	ldrh	r2, [r4, #28]
   25a7a:	69a1      	ldr	r1, [r4, #24]
   25a7c:	19e8      	adds	r0, r5, r7
   25a7e:	f7da fc1f 	bl	2c0 <memcpy>
		offset += msg->will_msg_len;
   25a82:	8ba0      	ldrh	r0, [r4, #28]
   25a84:	4438      	add	r0, r7
   25a86:	b280      	uxth	r0, r0
   25a88:	e7b1      	b.n	259ee <mqtt_pack_connect+0x134>
		return -EINVAL;
   25a8a:	f06f 0915 	mvn.w	r9, #21
   25a8e:	e7cf      	b.n	25a30 <mqtt_pack_connect+0x176>
		return -ENOMEM;
   25a90:	f06f 090b 	mvn.w	r9, #11
   25a94:	e7cc      	b.n	25a30 <mqtt_pack_connect+0x176>
	...

00025a98 <mqtt_unpack_suback>:
{
   25a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25a9c:	b087      	sub	sp, #28
   25a9e:	461d      	mov	r5, r3
   25aa0:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   25aa4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	*pkt_id = 0;
   25aa6:	2300      	movs	r3, #0
   25aa8:	8013      	strh	r3, [r2, #0]
	*items = 0;
   25aaa:	702b      	strb	r3, [r5, #0]
	if (elements <= 0) {
   25aac:	2f00      	cmp	r7, #0
   25aae:	d037      	beq.n	25b20 <mqtt_unpack_suback+0x88>
   25ab0:	4604      	mov	r4, r0
   25ab2:	4689      	mov	r9, r1
   25ab4:	4690      	mov	r8, r2
	if ((buf[0] & 0xF0) != (MQTT_SUBACK << 4)) {
   25ab6:	7803      	ldrb	r3, [r0, #0]
   25ab8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   25abc:	2a90      	cmp	r2, #144	; 0x90
   25abe:	d138      	bne.n	25b32 <mqtt_unpack_suback+0x9a>
	rc = rlen_decode(&rlen, &rlen_size, buf + PACKET_TYPE_SIZE,
   25ac0:	1e4b      	subs	r3, r1, #1
   25ac2:	b29b      	uxth	r3, r3
   25ac4:	1c42      	adds	r2, r0, #1
   25ac6:	f10d 0116 	add.w	r1, sp, #22
   25aca:	a804      	add	r0, sp, #16
   25acc:	f7ff fe13 	bl	256f6 <rlen_decode>
	if (rc != 0) {
   25ad0:	4603      	mov	r3, r0
   25ad2:	2800      	cmp	r0, #0
   25ad4:	d136      	bne.n	25b44 <mqtt_unpack_suback+0xac>
	if (PACKET_TYPE_SIZE + rlen + rlen_size > length) {
   25ad6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   25ada:	9804      	ldr	r0, [sp, #16]
   25adc:	180a      	adds	r2, r1, r0
   25ade:	3201      	adds	r2, #1
   25ae0:	454a      	cmp	r2, r9
   25ae2:	d838      	bhi.n	25b56 <mqtt_unpack_suback+0xbe>
	offset = PACKET_TYPE_SIZE + rlen_size;
   25ae4:	1c4a      	adds	r2, r1, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25ae6:	fa14 f282 	uxtah	r2, r4, r2
   25aea:	8810      	ldrh	r0, [r2, #0]
	*pkt_id = ntohs(val_u16);
   25aec:	0a02      	lsrs	r2, r0, #8
   25aee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   25af2:	f8a8 2000 	strh.w	r2, [r8]
	offset += PACKET_ID_SIZE;
   25af6:	3103      	adds	r1, #3
   25af8:	b289      	uxth	r1, r1
	*items = rlen - PACKET_ID_SIZE;
   25afa:	9a04      	ldr	r2, [sp, #16]
   25afc:	3a02      	subs	r2, #2
   25afe:	b2d2      	uxtb	r2, r2
   25b00:	702a      	strb	r2, [r5, #0]
	if (*items > elements) {
   25b02:	4297      	cmp	r7, r2
   25b04:	d335      	bcc.n	25b72 <mqtt_unpack_suback+0xda>
   25b06:	2200      	movs	r2, #0
	for (i = 0; i < *items; i++) {
   25b08:	7828      	ldrb	r0, [r5, #0]
   25b0a:	4282      	cmp	r2, r0
   25b0c:	d242      	bcs.n	25b94 <mqtt_unpack_suback+0xfc>
		qos = *(buf + offset);
   25b0e:	5c60      	ldrb	r0, [r4, r1]
		if (qos < MQTT_QoS0 || qos > MQTT_QoS2) {
   25b10:	2802      	cmp	r0, #2
   25b12:	d837      	bhi.n	25b84 <mqtt_unpack_suback+0xec>
		granted_qos[i] = qos;
   25b14:	54b0      	strb	r0, [r6, r2]
		offset += QoS_SIZE;
   25b16:	3101      	adds	r1, #1
   25b18:	b289      	uxth	r1, r1
	for (i = 0; i < *items; i++) {
   25b1a:	3201      	adds	r2, #1
   25b1c:	b2d2      	uxtb	r2, r2
   25b1e:	e7f3      	b.n	25b08 <mqtt_unpack_suback+0x70>
		printk("[%s:%d] elements <= 0\n", __func__, __LINE__);
   25b20:	f240 321a 	movw	r2, #794	; 0x31a
   25b24:	491d      	ldr	r1, [pc, #116]	; (25b9c <mqtt_unpack_suback+0x104>)
   25b26:	481e      	ldr	r0, [pc, #120]	; (25ba0 <mqtt_unpack_suback+0x108>)
   25b28:	f7dd fa46 	bl	2fb8 <printk>
		return -EINVAL;
   25b2c:	f06f 0315 	mvn.w	r3, #21
   25b30:	e030      	b.n	25b94 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] buf[0](%x) != MQTT_SUBACK << 4\n", __func__, __LINE__, buf[0]);
   25b32:	f240 321f 	movw	r2, #799	; 0x31f
   25b36:	4919      	ldr	r1, [pc, #100]	; (25b9c <mqtt_unpack_suback+0x104>)
   25b38:	481a      	ldr	r0, [pc, #104]	; (25ba4 <mqtt_unpack_suback+0x10c>)
   25b3a:	f7dd fa3d 	bl	2fb8 <printk>
		return -EINVAL;
   25b3e:	f06f 0315 	mvn.w	r3, #21
   25b42:	e027      	b.n	25b94 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] rlen_decode returned %d\n", __func__, __LINE__, rc);
   25b44:	f240 3226 	movw	r2, #806	; 0x326
   25b48:	4914      	ldr	r1, [pc, #80]	; (25b9c <mqtt_unpack_suback+0x104>)
   25b4a:	4817      	ldr	r0, [pc, #92]	; (25ba8 <mqtt_unpack_suback+0x110>)
   25b4c:	f7dd fa34 	bl	2fb8 <printk>
		return -EINVAL;
   25b50:	f06f 0315 	mvn.w	r3, #21
   25b54:	e01e      	b.n	25b94 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] PACKET_TYPE_SIZE(%d) + rlen(%d) + rlen_size(%d) > length(%d)\n"
   25b56:	f8cd 9008 	str.w	r9, [sp, #8]
   25b5a:	9101      	str	r1, [sp, #4]
   25b5c:	9000      	str	r0, [sp, #0]
   25b5e:	2301      	movs	r3, #1
   25b60:	f240 322d 	movw	r2, #813	; 0x32d
   25b64:	490d      	ldr	r1, [pc, #52]	; (25b9c <mqtt_unpack_suback+0x104>)
   25b66:	4811      	ldr	r0, [pc, #68]	; (25bac <mqtt_unpack_suback+0x114>)
   25b68:	f7dd fa26 	bl	2fb8 <printk>
		return -EINVAL;
   25b6c:	f06f 0315 	mvn.w	r3, #21
   25b70:	e010      	b.n	25b94 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] not enough space to store elements\n", __func__, __LINE__);
   25b72:	f240 323b 	movw	r2, #827	; 0x33b
   25b76:	4909      	ldr	r1, [pc, #36]	; (25b9c <mqtt_unpack_suback+0x104>)
   25b78:	480d      	ldr	r0, [pc, #52]	; (25bb0 <mqtt_unpack_suback+0x118>)
   25b7a:	f7dd fa1d 	bl	2fb8 <printk>
		return -EINVAL;
   25b7e:	f06f 0315 	mvn.w	r3, #21
   25b82:	e007      	b.n	25b94 <mqtt_unpack_suback+0xfc>
			printk("[%s:%d] invalid qos\n", __func__, __LINE__);
   25b84:	f240 3242 	movw	r2, #834	; 0x342
   25b88:	4904      	ldr	r1, [pc, #16]	; (25b9c <mqtt_unpack_suback+0x104>)
   25b8a:	480a      	ldr	r0, [pc, #40]	; (25bb4 <mqtt_unpack_suback+0x11c>)
   25b8c:	f7dd fa14 	bl	2fb8 <printk>
			return -EINVAL;
   25b90:	f06f 0315 	mvn.w	r3, #21
}
   25b94:	4618      	mov	r0, r3
   25b96:	b007      	add	sp, #28
   25b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25b9c:	00032a50 	.word	0x00032a50
   25ba0:	00032a64 	.word	0x00032a64
   25ba4:	00032a7c 	.word	0x00032a7c
   25ba8:	00032aa4 	.word	0x00032aa4
   25bac:	00032ac8 	.word	0x00032ac8
   25bb0:	00032b10 	.word	0x00032b10
   25bb4:	00032b3c 	.word	0x00032b3c

00025bb8 <mqtt_pack_publish>:
{
   25bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25bbc:	b083      	sub	sp, #12
	if (msg->qos < MQTT_QoS0 || msg->qos > MQTT_QoS2) {
   25bbe:	785c      	ldrb	r4, [r3, #1]
   25bc0:	2c02      	cmp	r4, #2
   25bc2:	d860      	bhi.n	25c86 <mqtt_pack_publish+0xce>
	payload = INT_SIZE + msg->topic_len +
   25bc4:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   25bc8:	2c00      	cmp	r4, #0
   25bca:	d057      	beq.n	25c7c <mqtt_pack_publish+0xc4>
   25bcc:	f04f 0e02 	mov.w	lr, #2
   25bd0:	461c      	mov	r4, r3
   25bd2:	4615      	mov	r5, r2
   25bd4:	460f      	mov	r7, r1
   25bd6:	4606      	mov	r6, r0
   25bd8:	eb0e 030c 	add.w	r3, lr, ip
		  (msg->qos > MQTT_QoS0 ? PACKET_ID_SIZE : 0) + msg->msg_len;
   25bdc:	8aa2      	ldrh	r2, [r4, #20]
   25bde:	fa12 f383 	uxtah	r3, r2, r3
   25be2:	b29b      	uxth	r3, r3
	payload = INT_SIZE + msg->topic_len +
   25be4:	3302      	adds	r3, #2
   25be6:	fa1f f983 	uxth.w	r9, r3
	rc = compute_rlen_size(&rlen_size, payload);
   25bea:	4649      	mov	r1, r9
   25bec:	f10d 0006 	add.w	r0, sp, #6
   25bf0:	f7ff fd4b 	bl	2568a <compute_rlen_size>
	if (rc != 0) {
   25bf4:	4680      	mov	r8, r0
   25bf6:	2800      	cmp	r0, #0
   25bf8:	d148      	bne.n	25c8c <mqtt_pack_publish+0xd4>
	if (PACKET_TYPE_SIZE + rlen_size + payload > size) {
   25bfa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   25bfe:	3301      	adds	r3, #1
   25c00:	444b      	add	r3, r9
   25c02:	42ab      	cmp	r3, r5
   25c04:	dc45      	bgt.n	25c92 <mqtt_pack_publish+0xda>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25c06:	7823      	ldrb	r3, [r4, #0]
   25c08:	2b00      	cmp	r3, #0
   25c0a:	d03a      	beq.n	25c82 <mqtt_pack_publish+0xca>
   25c0c:	2338      	movs	r3, #56	; 0x38
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   25c0e:	7862      	ldrb	r2, [r4, #1]
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25c10:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   25c14:	b25b      	sxtb	r3, r3
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   25c16:	78a2      	ldrb	r2, [r4, #2]
   25c18:	2a00      	cmp	r2, #0
   25c1a:	bf18      	it	ne
   25c1c:	f043 0301 	orrne.w	r3, r3, #1
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25c20:	4630      	mov	r0, r6
   25c22:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   25c26:	4649      	mov	r1, r9
   25c28:	f7ff fd53 	bl	256d2 <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   25c2c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   25c30:	1c6b      	adds	r3, r5, #1
   25c32:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->topic_len), (u16_t *)(buf + offset));
   25c34:	89a1      	ldrh	r1, [r4, #12]
   25c36:	0a0a      	lsrs	r2, r1, #8
   25c38:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   25c3c:	52f2      	strh	r2, [r6, r3]
	offset += INT_SIZE;
   25c3e:	3503      	adds	r5, #3
   25c40:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->topic, msg->topic_len);
   25c42:	89a2      	ldrh	r2, [r4, #12]
   25c44:	68a1      	ldr	r1, [r4, #8]
   25c46:	1970      	adds	r0, r6, r5
   25c48:	f7da fb3a 	bl	2c0 <memcpy>
	offset += msg->topic_len;
   25c4c:	89a3      	ldrh	r3, [r4, #12]
   25c4e:	441d      	add	r5, r3
   25c50:	b2ad      	uxth	r5, r5
	if (msg->qos > MQTT_QoS0) {
   25c52:	7863      	ldrb	r3, [r4, #1]
   25c54:	b133      	cbz	r3, 25c64 <mqtt_pack_publish+0xac>
		UNALIGNED_PUT(htons(msg->pkt_id), (u16_t *)(buf + offset));
   25c56:	88a2      	ldrh	r2, [r4, #4]
   25c58:	0a13      	lsrs	r3, r2, #8
   25c5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25c5e:	5373      	strh	r3, [r6, r5]
		offset += PACKET_ID_SIZE;
   25c60:	3502      	adds	r5, #2
   25c62:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->msg, msg->msg_len);
   25c64:	8aa2      	ldrh	r2, [r4, #20]
   25c66:	6921      	ldr	r1, [r4, #16]
   25c68:	1970      	adds	r0, r6, r5
   25c6a:	f7da fb29 	bl	2c0 <memcpy>
	offset += msg->msg_len;
   25c6e:	8aa3      	ldrh	r3, [r4, #20]
   25c70:	441d      	add	r5, r3
	*length = offset;
   25c72:	803d      	strh	r5, [r7, #0]
}
   25c74:	4640      	mov	r0, r8
   25c76:	b003      	add	sp, #12
   25c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	payload = INT_SIZE + msg->topic_len +
   25c7c:	f04f 0e00 	mov.w	lr, #0
   25c80:	e7a6      	b.n	25bd0 <mqtt_pack_publish+0x18>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25c82:	2330      	movs	r3, #48	; 0x30
   25c84:	e7c3      	b.n	25c0e <mqtt_pack_publish+0x56>
		return -EINVAL;
   25c86:	f06f 0815 	mvn.w	r8, #21
   25c8a:	e7f3      	b.n	25c74 <mqtt_pack_publish+0xbc>
		return -EINVAL;
   25c8c:	f06f 0815 	mvn.w	r8, #21
   25c90:	e7f0      	b.n	25c74 <mqtt_pack_publish+0xbc>
		return -ENOMEM;
   25c92:	f06f 080b 	mvn.w	r8, #11
   25c96:	e7ed      	b.n	25c74 <mqtt_pack_publish+0xbc>

00025c98 <mqtt_unpack_publish>:
{
   25c98:	b5f0      	push	{r4, r5, r6, r7, lr}
   25c9a:	b083      	sub	sp, #12
	if (buf[0] >> 4 != MQTT_PUBLISH) {
   25c9c:	7807      	ldrb	r7, [r0, #0]
   25c9e:	093b      	lsrs	r3, r7, #4
   25ca0:	2b03      	cmp	r3, #3
   25ca2:	d148      	bne.n	25d36 <mqtt_unpack_publish+0x9e>
   25ca4:	4615      	mov	r5, r2
   25ca6:	460e      	mov	r6, r1
   25ca8:	4604      	mov	r4, r0
	msg->dup = (buf[0] & 0x08) >> 3;
   25caa:	f3c7 07c0 	ubfx	r7, r7, #3, #1
   25cae:	7017      	strb	r7, [r2, #0]
	msg->qos = (buf[0] & 0x06) >> 1;
   25cb0:	7803      	ldrb	r3, [r0, #0]
   25cb2:	f3c3 0341 	ubfx	r3, r3, #1, #2
   25cb6:	7053      	strb	r3, [r2, #1]
	msg->retain = buf[0] & 0x01;
   25cb8:	4602      	mov	r2, r0
   25cba:	f812 3b01 	ldrb.w	r3, [r2], #1
   25cbe:	f003 0301 	and.w	r3, r3, #1
   25cc2:	70ab      	strb	r3, [r5, #2]
	rc = rlen_decode(&rmlen, &rmlen_size, buf + PACKET_TYPE_SIZE,
   25cc4:	1e4b      	subs	r3, r1, #1
   25cc6:	b29b      	uxth	r3, r3
   25cc8:	f10d 0106 	add.w	r1, sp, #6
   25ccc:	4668      	mov	r0, sp
   25cce:	f7ff fd12 	bl	256f6 <rlen_decode>
	if (rc != 0) {
   25cd2:	4607      	mov	r7, r0
   25cd4:	2800      	cmp	r0, #0
   25cd6:	d131      	bne.n	25d3c <mqtt_unpack_publish+0xa4>
	if ((PACKET_TYPE_SIZE + rmlen_size + rmlen) > length) {
   25cd8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   25cdc:	9b00      	ldr	r3, [sp, #0]
   25cde:	4413      	add	r3, r2
   25ce0:	3301      	adds	r3, #1
   25ce2:	42b3      	cmp	r3, r6
   25ce4:	d82d      	bhi.n	25d42 <mqtt_unpack_publish+0xaa>
	offset = PACKET_TYPE_SIZE + rmlen_size;
   25ce6:	1c53      	adds	r3, r2, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25ce8:	fa14 f383 	uxtah	r3, r4, r3
   25cec:	8819      	ldrh	r1, [r3, #0]
	msg->topic_len = ntohs(val_u16);
   25cee:	0a0b      	lsrs	r3, r1, #8
   25cf0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   25cf4:	b29b      	uxth	r3, r3
   25cf6:	81ab      	strh	r3, [r5, #12]
	offset += INT_SIZE;
   25cf8:	3203      	adds	r2, #3
   25cfa:	b292      	uxth	r2, r2
	if (offset + msg->topic_len > length) {
   25cfc:	18d1      	adds	r1, r2, r3
   25cfe:	42b1      	cmp	r1, r6
   25d00:	dc22      	bgt.n	25d48 <mqtt_unpack_publish+0xb0>
	msg->topic = (char *)(buf + offset);
   25d02:	18a1      	adds	r1, r4, r2
   25d04:	60a9      	str	r1, [r5, #8]
	offset += msg->topic_len;
   25d06:	4413      	add	r3, r2
   25d08:	b29b      	uxth	r3, r3
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25d0a:	5ae1      	ldrh	r1, [r4, r3]
	if (msg->qos == MQTT_QoS1 || msg->qos == MQTT_QoS2) {
   25d0c:	786a      	ldrb	r2, [r5, #1]
   25d0e:	3a01      	subs	r2, #1
   25d10:	b2d2      	uxtb	r2, r2
   25d12:	2a01      	cmp	r2, #1
   25d14:	d908      	bls.n	25d28 <mqtt_unpack_publish+0x90>
		msg->pkt_id = 0;
   25d16:	2200      	movs	r2, #0
   25d18:	80aa      	strh	r2, [r5, #4]
	msg->msg_len = length - offset;
   25d1a:	1af6      	subs	r6, r6, r3
   25d1c:	82ae      	strh	r6, [r5, #20]
	msg->msg = buf + offset;
   25d1e:	4423      	add	r3, r4
   25d20:	612b      	str	r3, [r5, #16]
}
   25d22:	4638      	mov	r0, r7
   25d24:	b003      	add	sp, #12
   25d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg->pkt_id = ntohs(val_u16);
   25d28:	0a0a      	lsrs	r2, r1, #8
   25d2a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   25d2e:	80a9      	strh	r1, [r5, #4]
		offset += PACKET_ID_SIZE;
   25d30:	3302      	adds	r3, #2
   25d32:	b29b      	uxth	r3, r3
   25d34:	e7f1      	b.n	25d1a <mqtt_unpack_publish+0x82>
		return -EINVAL;
   25d36:	f06f 0715 	mvn.w	r7, #21
   25d3a:	e7f2      	b.n	25d22 <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25d3c:	f06f 0715 	mvn.w	r7, #21
   25d40:	e7ef      	b.n	25d22 <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25d42:	f06f 0715 	mvn.w	r7, #21
   25d46:	e7ec      	b.n	25d22 <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25d48:	f06f 0715 	mvn.w	r7, #21
   25d4c:	e7e9      	b.n	25d22 <mqtt_unpack_publish+0x8a>

00025d4e <mqtt_unpack_connack>:
	if (length < CONNACK_SIZE) {
   25d4e:	2903      	cmp	r1, #3
   25d50:	d90d      	bls.n	25d6e <mqtt_unpack_connack+0x20>
	if (buf[0] != (MQTT_CONNACK << 4) || buf[1] != 2) {
   25d52:	7801      	ldrb	r1, [r0, #0]
   25d54:	2920      	cmp	r1, #32
   25d56:	d10d      	bne.n	25d74 <mqtt_unpack_connack+0x26>
   25d58:	7841      	ldrb	r1, [r0, #1]
   25d5a:	2902      	cmp	r1, #2
   25d5c:	d10d      	bne.n	25d7a <mqtt_unpack_connack+0x2c>
	if (buf[2] > 1) {
   25d5e:	7881      	ldrb	r1, [r0, #2]
   25d60:	2901      	cmp	r1, #1
   25d62:	d80d      	bhi.n	25d80 <mqtt_unpack_connack+0x32>
	*session = buf[2];
   25d64:	7011      	strb	r1, [r2, #0]
	*connect_rc = buf[3];
   25d66:	78c2      	ldrb	r2, [r0, #3]
   25d68:	701a      	strb	r2, [r3, #0]
	return 0;
   25d6a:	2000      	movs	r0, #0
   25d6c:	4770      	bx	lr
		return -EINVAL;
   25d6e:	f06f 0015 	mvn.w	r0, #21
   25d72:	4770      	bx	lr
		return -EINVAL;
   25d74:	f06f 0015 	mvn.w	r0, #21
   25d78:	4770      	bx	lr
   25d7a:	f06f 0015 	mvn.w	r0, #21
   25d7e:	4770      	bx	lr
		return -EINVAL;
   25d80:	f06f 0015 	mvn.w	r0, #21
}
   25d84:	4770      	bx	lr

00025d86 <mqtt_pack_disconnect>:
{
   25d86:	b500      	push	{lr}
   25d88:	b083      	sub	sp, #12
	return pack_zerolen(buf, length, size, MQTT_DISCONNECT, 0x00);
   25d8a:	2300      	movs	r3, #0
   25d8c:	9300      	str	r3, [sp, #0]
   25d8e:	230e      	movs	r3, #14
   25d90:	f7ff fceb 	bl	2576a <pack_zerolen>
}
   25d94:	b003      	add	sp, #12
   25d96:	f85d fb04 	ldr.w	pc, [sp], #4

00025d9a <mqtt_unpack_puback>:
{
   25d9a:	b500      	push	{lr}
   25d9c:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBACK,
   25d9e:	2300      	movs	r3, #0
   25da0:	9300      	str	r3, [sp, #0]
   25da2:	2304      	movs	r3, #4
   25da4:	f7ff fd0e 	bl	257c4 <unpack_pktid_validate>
}
   25da8:	b003      	add	sp, #12
   25daa:	f85d fb04 	ldr.w	pc, [sp], #4

00025dae <mqtt_unpack_pubrec>:
{
   25dae:	b500      	push	{lr}
   25db0:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREC,
   25db2:	2300      	movs	r3, #0
   25db4:	9300      	str	r3, [sp, #0]
   25db6:	2305      	movs	r3, #5
   25db8:	f7ff fd04 	bl	257c4 <unpack_pktid_validate>
}
   25dbc:	b003      	add	sp, #12
   25dbe:	f85d fb04 	ldr.w	pc, [sp], #4

00025dc2 <mqtt_unpack_pubrel>:
{
   25dc2:	b500      	push	{lr}
   25dc4:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREL,
   25dc6:	2302      	movs	r3, #2
   25dc8:	9300      	str	r3, [sp, #0]
   25dca:	2306      	movs	r3, #6
   25dcc:	f7ff fcfa 	bl	257c4 <unpack_pktid_validate>
}
   25dd0:	b003      	add	sp, #12
   25dd2:	f85d fb04 	ldr.w	pc, [sp], #4

00025dd6 <mqtt_unpack_pubcomp>:
{
   25dd6:	b500      	push	{lr}
   25dd8:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBCOMP,
   25dda:	2300      	movs	r3, #0
   25ddc:	9300      	str	r3, [sp, #0]
   25dde:	2307      	movs	r3, #7
   25de0:	f7ff fcf0 	bl	257c4 <unpack_pktid_validate>
}
   25de4:	b003      	add	sp, #12
   25de6:	f85d fb04 	ldr.w	pc, [sp], #4

00025dea <mqtt_unpack_pingresp>:
{
	return unpack_zerolen_validate(buf, length, MQTT_PINGREQ, 0x00);
}

int mqtt_unpack_pingresp(u8_t *buf, u16_t length)
{
   25dea:	b508      	push	{r3, lr}
	return unpack_zerolen_validate(buf, length, MQTT_PINGRESP, 0x00);
   25dec:	2300      	movs	r3, #0
   25dee:	220d      	movs	r2, #13
   25df0:	f7ff fd1a 	bl	25828 <unpack_zerolen_validate>
}
   25df4:	bd08      	pop	{r3, pc}
	...

00025df8 <mqtt_rx_pub_msgs>:
 * @retval -EINVAL on error
 */
static
int mqtt_rx_pub_msgs(struct mqtt_ctx *ctx, struct net_buf *rx,
		     enum mqtt_packet type)
{
   25df8:	b5f0      	push	{r4, r5, r6, r7, lr}
   25dfa:	b083      	sub	sp, #12
	u16_t pkt_id;
	u16_t len;
	u8_t *data;
	int rc;

	switch (type) {
   25dfc:	1f13      	subs	r3, r2, #4
   25dfe:	2b03      	cmp	r3, #3
   25e00:	d840      	bhi.n	25e84 <mqtt_rx_pub_msgs+0x8c>
   25e02:	e8df f003 	tbb	[pc, r3]
   25e06:	0502      	.short	0x0502
   25e08:	0b08      	.short	0x0b08
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   25e0a:	2600      	movs	r6, #0
	case MQTT_PUBACK:
		unpack = mqtt_unpack_puback;
   25e0c:	4f22      	ldr	r7, [pc, #136]	; (25e98 <mqtt_rx_pub_msgs+0xa0>)
   25e0e:	e007      	b.n	25e20 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBCOMP:
		unpack = mqtt_unpack_pubcomp;
		break;
	case MQTT_PUBREC:
		unpack = mqtt_unpack_pubrec;
		response = mqtt_tx_pubrel;
   25e10:	4e22      	ldr	r6, [pc, #136]	; (25e9c <mqtt_rx_pub_msgs+0xa4>)
		unpack = mqtt_unpack_pubrec;
   25e12:	4f23      	ldr	r7, [pc, #140]	; (25ea0 <mqtt_rx_pub_msgs+0xa8>)
		break;
   25e14:	e004      	b.n	25e20 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBREL:
		unpack = mqtt_unpack_pubrel;
		response = mqtt_tx_pubcomp;
   25e16:	4e23      	ldr	r6, [pc, #140]	; (25ea4 <mqtt_rx_pub_msgs+0xac>)
		unpack = mqtt_unpack_pubrel;
   25e18:	4f23      	ldr	r7, [pc, #140]	; (25ea8 <mqtt_rx_pub_msgs+0xb0>)
		break;
   25e1a:	e001      	b.n	25e20 <mqtt_rx_pub_msgs+0x28>
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   25e1c:	2600      	movs	r6, #0
		unpack = mqtt_unpack_pubcomp;
   25e1e:	4f23      	ldr	r7, [pc, #140]	; (25eac <mqtt_rx_pub_msgs+0xb4>)
   25e20:	4614      	mov	r4, r2
   25e22:	460b      	mov	r3, r1
   25e24:	4605      	mov	r5, r0

	data = rx->data;
	len = rx->len;

	/* 4 bytes message */
	rc = unpack(data, len, &pkt_id);
   25e26:	f10d 0206 	add.w	r2, sp, #6
   25e2a:	8989      	ldrh	r1, [r1, #12]
   25e2c:	6898      	ldr	r0, [r3, #8]
   25e2e:	47b8      	blx	r7
	if (rc != 0) {
   25e30:	bb58      	cbnz	r0, 25e8a <mqtt_rx_pub_msgs+0x92>
	}

	/* Only MQTT_APP_SUBSCRIBER, MQTT_APP_PUBLISHER_SUBSCRIBER and
	 * MQTT_APP_SERVER apps must receive the MQTT_PUBREL msg.
	 */
	if (type == MQTT_PUBREL) {
   25e32:	2c06      	cmp	r4, #6
   25e34:	d012      	beq.n	25e5c <mqtt_rx_pub_msgs+0x64>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
		} else {
			rc = -EINVAL;
		}
	} else {
		rc = ctx->publish_tx(ctx, pkt_id, type);
   25e36:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   25e3a:	4622      	mov	r2, r4
   25e3c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   25e40:	4628      	mov	r0, r5
   25e42:	4798      	blx	r3
   25e44:	4603      	mov	r3, r0
	}

	if (rc != 0) {
   25e46:	bb1b      	cbnz	r3, 25e90 <mqtt_rx_pub_msgs+0x98>
		return -EINVAL;
	}

	if (!response)  {
   25e48:	b12e      	cbz	r6, 25e56 <mqtt_rx_pub_msgs+0x5e>
		return 0;
	}

	rc = response(ctx, pkt_id);
   25e4a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   25e4e:	4628      	mov	r0, r5
   25e50:	47b0      	blx	r6
	if (rc != 0) {
   25e52:	4603      	mov	r3, r0
   25e54:	b998      	cbnz	r0, 25e7e <mqtt_rx_pub_msgs+0x86>
		return -EINVAL;
	}

	return 0;
}
   25e56:	4618      	mov	r0, r3
   25e58:	b003      	add	sp, #12
   25e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctx->app_type != MQTT_APP_PUBLISHER) {
   25e5c:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   25e60:	2b01      	cmp	r3, #1
   25e62:	d009      	beq.n	25e78 <mqtt_rx_pub_msgs+0x80>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
   25e64:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
   25e68:	2306      	movs	r3, #6
   25e6a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   25e6e:	2100      	movs	r1, #0
   25e70:	4628      	mov	r0, r5
   25e72:	47a0      	blx	r4
   25e74:	4603      	mov	r3, r0
   25e76:	e7e6      	b.n	25e46 <mqtt_rx_pub_msgs+0x4e>
			rc = -EINVAL;
   25e78:	f06f 0315 	mvn.w	r3, #21
   25e7c:	e7e3      	b.n	25e46 <mqtt_rx_pub_msgs+0x4e>
		return -EINVAL;
   25e7e:	f06f 0315 	mvn.w	r3, #21
   25e82:	e7e8      	b.n	25e56 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25e84:	f06f 0315 	mvn.w	r3, #21
   25e88:	e7e5      	b.n	25e56 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25e8a:	f06f 0315 	mvn.w	r3, #21
   25e8e:	e7e2      	b.n	25e56 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25e90:	f06f 0315 	mvn.w	r3, #21
   25e94:	e7df      	b.n	25e56 <mqtt_rx_pub_msgs+0x5e>
   25e96:	bf00      	nop
   25e98:	00025d9b 	.word	0x00025d9b
   25e9c:	00025f8f 	.word	0x00025f8f
   25ea0:	00025daf 	.word	0x00025daf
   25ea4:	00025f85 	.word	0x00025f85
   25ea8:	00025dc3 	.word	0x00025dc3
   25eac:	00025dd7 	.word	0x00025dd7

00025eb0 <app_connected>:
	return rc;
}

static
void app_connected(struct net_app_ctx *ctx, int status, void *data)
{
   25eb0:	4770      	bx	lr

00025eb2 <app_recv>:
	struct mqtt_ctx *mqtt = (struct mqtt_ctx *)data;

	/* net_app_ctx is already referenced to by the mqtt_ctx struct */
	ARG_UNUSED(ctx);

	if (status || !pkt) {
   25eb2:	b96a      	cbnz	r2, 25ed0 <app_recv+0x1e>
   25eb4:	b161      	cbz	r1, 25ed0 <app_recv+0x1e>
{
   25eb6:	b510      	push	{r4, lr}
   25eb8:	460c      	mov	r4, r1
	return pkt->appdatalen;
   25eba:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
		return;
	}

	if (net_pkt_appdatalen(pkt) == 0) {
   25ebc:	b91a      	cbnz	r2, 25ec6 <app_recv+0x14>
	}

	mqtt->rcv(mqtt, pkt);

lb_exit:
	net_pkt_unref(pkt);
   25ebe:	4620      	mov	r0, r4
   25ec0:	f7f7 fc9b 	bl	1d7fa <net_pkt_unref>
   25ec4:	bd10      	pop	{r4, pc}
	mqtt->rcv(mqtt, pkt);
   25ec6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   25eca:	4618      	mov	r0, r3
   25ecc:	4790      	blx	r2
   25ece:	e7f6      	b.n	25ebe <app_recv+0xc>
   25ed0:	4770      	bx	lr

00025ed2 <mqtt_tx_pub_msgs>:
{
   25ed2:	b570      	push	{r4, r5, r6, lr}
   25ed4:	b084      	sub	sp, #16
   25ed6:	4604      	mov	r4, r0
	switch (pkt_type) {
   25ed8:	3a04      	subs	r2, #4
   25eda:	2a03      	cmp	r2, #3
   25edc:	d849      	bhi.n	25f72 <mqtt_tx_pub_msgs+0xa0>
   25ede:	e8df f002 	tbb	[pc, r2]
   25ee2:	2c02      	.short	0x2c02
   25ee4:	2434      	.short	0x2434
		rc = mqtt_pack_puback(msg, &len, sizeof(msg), id);
   25ee6:	460b      	mov	r3, r1
   25ee8:	2204      	movs	r2, #4
   25eea:	f10d 010a 	add.w	r1, sp, #10
   25eee:	a803      	add	r0, sp, #12
   25ef0:	f7ff fcb7 	bl	25862 <mqtt_pack_puback>
	if (rc != 0) {
   25ef4:	2800      	cmp	r0, #0
   25ef6:	d13f      	bne.n	25f78 <mqtt_tx_pub_msgs+0xa6>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25ef8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   25efa:	2100      	movs	r1, #0
   25efc:	4620      	mov	r0, r4
   25efe:	f000 fe09 	bl	26b14 <net_app_get_net_pkt>
	if (tx == NULL) {
   25f02:	4605      	mov	r5, r0
   25f04:	2800      	cmp	r0, #0
   25f06:	d03a      	beq.n	25f7e <mqtt_tx_pub_msgs+0xac>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   25f08:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   25f0c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25f0e:	aa03      	add	r2, sp, #12
   25f10:	4631      	mov	r1, r6
   25f12:	f7f7 fdaa 	bl	1da6a <net_pkt_append>
	if (rc != true) {
   25f16:	4286      	cmp	r6, r0
   25f18:	d01f      	beq.n	25f5a <mqtt_tx_pub_msgs+0x88>
		rc = -ENOMEM;
   25f1a:	f06f 040b 	mvn.w	r4, #11
	net_pkt_unref(tx);
   25f1e:	4628      	mov	r0, r5
   25f20:	f7f7 fc6b 	bl	1d7fa <net_pkt_unref>
}
   25f24:	4620      	mov	r0, r4
   25f26:	b004      	add	sp, #16
   25f28:	bd70      	pop	{r4, r5, r6, pc}
		rc = mqtt_pack_pubcomp(msg, &len, sizeof(msg), id);
   25f2a:	460b      	mov	r3, r1
   25f2c:	2204      	movs	r2, #4
   25f2e:	f10d 010a 	add.w	r1, sp, #10
   25f32:	a803      	add	r0, sp, #12
   25f34:	f7ff fcb6 	bl	258a4 <mqtt_pack_pubcomp>
		break;
   25f38:	e7dc      	b.n	25ef4 <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrec(msg, &len, sizeof(msg), id);
   25f3a:	460b      	mov	r3, r1
   25f3c:	2204      	movs	r2, #4
   25f3e:	f10d 010a 	add.w	r1, sp, #10
   25f42:	a803      	add	r0, sp, #12
   25f44:	f7ff fc98 	bl	25878 <mqtt_pack_pubrec>
		break;
   25f48:	e7d4      	b.n	25ef4 <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrel(msg, &len, sizeof(msg), id);
   25f4a:	460b      	mov	r3, r1
   25f4c:	2204      	movs	r2, #4
   25f4e:	f10d 010a 	add.w	r1, sp, #10
   25f52:	a803      	add	r0, sp, #12
   25f54:	f7ff fc9b 	bl	2588e <mqtt_pack_pubrel>
		break;
   25f58:	e7cc      	b.n	25ef4 <mqtt_tx_pub_msgs+0x22>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25f5a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25f5c:	2200      	movs	r2, #0
   25f5e:	9201      	str	r2, [sp, #4]
   25f60:	9300      	str	r3, [sp, #0]
   25f62:	4613      	mov	r3, r2
   25f64:	4629      	mov	r1, r5
   25f66:	4620      	mov	r0, r4
   25f68:	f000 fd58 	bl	26a1c <net_app_send_pkt>
	if (rc < 0) {
   25f6c:	1e04      	subs	r4, r0, #0
   25f6e:	dad9      	bge.n	25f24 <mqtt_tx_pub_msgs+0x52>
   25f70:	e7d5      	b.n	25f1e <mqtt_tx_pub_msgs+0x4c>
		return -EINVAL;
   25f72:	f06f 0415 	mvn.w	r4, #21
   25f76:	e7d5      	b.n	25f24 <mqtt_tx_pub_msgs+0x52>
		return -EINVAL;
   25f78:	f06f 0415 	mvn.w	r4, #21
   25f7c:	e7d2      	b.n	25f24 <mqtt_tx_pub_msgs+0x52>
		return -ENOMEM;
   25f7e:	f06f 040b 	mvn.w	r4, #11
   25f82:	e7cf      	b.n	25f24 <mqtt_tx_pub_msgs+0x52>

00025f84 <mqtt_tx_pubcomp>:
{
   25f84:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBCOMP);
   25f86:	2207      	movs	r2, #7
   25f88:	f7ff ffa3 	bl	25ed2 <mqtt_tx_pub_msgs>
}
   25f8c:	bd08      	pop	{r3, pc}

00025f8e <mqtt_tx_pubrel>:
{
   25f8e:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREL);
   25f90:	2206      	movs	r2, #6
   25f92:	f7ff ff9e 	bl	25ed2 <mqtt_tx_pub_msgs>
}
   25f96:	bd08      	pop	{r3, pc}

00025f98 <mqtt_linearize_packet>:
{
   25f98:	b570      	push	{r4, r5, r6, lr}
	return pkt->appdatalen;
   25f9a:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
	if (data_len < min_size || data_len > CONFIG_MQTT_MSG_MAX_SIZE) {
   25f9c:	42aa      	cmp	r2, r5
   25f9e:	d820      	bhi.n	25fe2 <mqtt_linearize_packet+0x4a>
   25fa0:	2d80      	cmp	r5, #128	; 0x80
   25fa2:	d820      	bhi.n	25fe6 <mqtt_linearize_packet+0x4e>
   25fa4:	460c      	mov	r4, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25fa6:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   25fa8:	4810      	ldr	r0, [pc, #64]	; (25fec <mqtt_linearize_packet+0x54>)
   25faa:	f7f4 fe49 	bl	1ac40 <net_buf_alloc>
	if (data == NULL) {
   25fae:	4606      	mov	r6, r0
   25fb0:	b180      	cbz	r0, 25fd4 <mqtt_linearize_packet+0x3c>
	return net_buf_frags_len(pkt->frags);
   25fb2:	68a1      	ldr	r1, [r4, #8]
   25fb4:	460c      	mov	r4, r1
	size_t bytes = 0;
   25fb6:	2200      	movs	r2, #0
   25fb8:	e002      	b.n	25fc0 <mqtt_linearize_packet+0x28>
		bytes += buf->len;
   25fba:	89a3      	ldrh	r3, [r4, #12]
   25fbc:	441a      	add	r2, r3
		buf = buf->frags;
   25fbe:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   25fc0:	2c00      	cmp	r4, #0
   25fc2:	d1fa      	bne.n	25fba <mqtt_linearize_packet+0x22>
	offset = net_pkt_get_len(rx) - data_len;
   25fc4:	b292      	uxth	r2, r2
   25fc6:	1b52      	subs	r2, r2, r5
	rc = net_frag_linear_copy(data, rx->frags, offset, data_len);
   25fc8:	462b      	mov	r3, r5
   25fca:	b292      	uxth	r2, r2
   25fcc:	4630      	mov	r0, r6
   25fce:	f7f7 fcc7 	bl	1d960 <net_frag_linear_copy>
	if (rc != 0) {
   25fd2:	b908      	cbnz	r0, 25fd8 <mqtt_linearize_packet+0x40>
}
   25fd4:	4630      	mov	r0, r6
   25fd6:	bd70      	pop	{r4, r5, r6, pc}
	net_pkt_frag_unref(data);
   25fd8:	4630      	mov	r0, r6
   25fda:	f7f7 fc08 	bl	1d7ee <net_pkt_frag_unref>
	return NULL;
   25fde:	4626      	mov	r6, r4
   25fe0:	e7f8      	b.n	25fd4 <mqtt_linearize_packet+0x3c>
		return NULL;
   25fe2:	2600      	movs	r6, #0
   25fe4:	e7f6      	b.n	25fd4 <mqtt_linearize_packet+0x3c>
   25fe6:	2600      	movs	r6, #0
   25fe8:	e7f4      	b.n	25fd4 <mqtt_linearize_packet+0x3c>
   25fea:	bf00      	nop
   25fec:	2000d260 	.word	0x2000d260

00025ff0 <mqtt_tx_connect>:
{
   25ff0:	b570      	push	{r4, r5, r6, lr}
   25ff2:	b082      	sub	sp, #8
   25ff4:	4604      	mov	r4, r0
   25ff6:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25ff8:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   25ffa:	481d      	ldr	r0, [pc, #116]	; (26070 <mqtt_tx_connect+0x80>)
   25ffc:	f7f4 fe20 	bl	1ac40 <net_buf_alloc>
	if (data == NULL) {
   26000:	b398      	cbz	r0, 2606a <mqtt_tx_connect+0x7a>
   26002:	4605      	mov	r5, r0
	ctx->clean_session = msg->clean_session ? 1 : 0;
   26004:	7832      	ldrb	r2, [r6, #0]
   26006:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   2600a:	f362 0300 	bfi	r3, r2, #0, #1
   2600e:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	rc = mqtt_pack_connect(data->data, &data->len, MSG_SIZE, msg);
   26012:	4633      	mov	r3, r6
   26014:	2280      	movs	r2, #128	; 0x80
   26016:	f100 010c 	add.w	r1, r0, #12
   2601a:	6880      	ldr	r0, [r0, #8]
   2601c:	f7ff fc4d 	bl	258ba <mqtt_pack_connect>
	if (rc != 0) {
   26020:	b9c0      	cbnz	r0, 26054 <mqtt_tx_connect+0x64>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   26022:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   26024:	2100      	movs	r1, #0
   26026:	4620      	mov	r0, r4
   26028:	f000 fd74 	bl	26b14 <net_app_get_net_pkt>
	if (tx == NULL) {
   2602c:	4606      	mov	r6, r0
   2602e:	b1c8      	cbz	r0, 26064 <mqtt_tx_connect+0x74>
	net_pkt_frag_add(tx, data);
   26030:	4629      	mov	r1, r5
   26032:	f7f7 fc0c 	bl	1d84e <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   26036:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   26038:	2200      	movs	r2, #0
   2603a:	9201      	str	r2, [sp, #4]
   2603c:	9300      	str	r3, [sp, #0]
   2603e:	4613      	mov	r3, r2
   26040:	4631      	mov	r1, r6
   26042:	4620      	mov	r0, r4
   26044:	f000 fcea 	bl	26a1c <net_app_send_pkt>
	if (rc < 0) {
   26048:	1e04      	subs	r4, r0, #0
   2604a:	da08      	bge.n	2605e <mqtt_tx_connect+0x6e>
		net_pkt_unref(tx);
   2604c:	4630      	mov	r0, r6
   2604e:	f7f7 fbd4 	bl	1d7fa <net_pkt_unref>
   26052:	e004      	b.n	2605e <mqtt_tx_connect+0x6e>
		rc = -EINVAL;
   26054:	f06f 0415 	mvn.w	r4, #21
	net_pkt_frag_unref(data);
   26058:	4628      	mov	r0, r5
   2605a:	f7f7 fbc8 	bl	1d7ee <net_pkt_frag_unref>
}
   2605e:	4620      	mov	r0, r4
   26060:	b002      	add	sp, #8
   26062:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   26064:	f06f 040b 	mvn.w	r4, #11
   26068:	e7f6      	b.n	26058 <mqtt_tx_connect+0x68>
		return -ENOMEM;
   2606a:	f06f 040b 	mvn.w	r4, #11
   2606e:	e7f6      	b.n	2605e <mqtt_tx_connect+0x6e>
   26070:	2000d260 	.word	0x2000d260

00026074 <mqtt_tx_disconnect>:
{
   26074:	b570      	push	{r4, r5, r6, lr}
   26076:	b084      	sub	sp, #16
   26078:	4604      	mov	r4, r0
	rc = mqtt_pack_disconnect(msg, &len, sizeof(msg));
   2607a:	2202      	movs	r2, #2
   2607c:	f10d 010a 	add.w	r1, sp, #10
   26080:	a803      	add	r0, sp, #12
   26082:	f7ff fe80 	bl	25d86 <mqtt_pack_disconnect>
	if (rc != 0) {
   26086:	bb78      	cbnz	r0, 260e8 <mqtt_tx_disconnect+0x74>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   26088:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   2608a:	2100      	movs	r1, #0
   2608c:	4620      	mov	r0, r4
   2608e:	f000 fd41 	bl	26b14 <net_app_get_net_pkt>
	if (tx == NULL) {
   26092:	4605      	mov	r5, r0
   26094:	b358      	cbz	r0, 260ee <mqtt_tx_disconnect+0x7a>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   26096:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   2609a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   2609c:	aa03      	add	r2, sp, #12
   2609e:	4631      	mov	r1, r6
   260a0:	f7f7 fce3 	bl	1da6a <net_pkt_append>
	if (rc != true) {
   260a4:	4286      	cmp	r6, r0
   260a6:	d007      	beq.n	260b8 <mqtt_tx_disconnect+0x44>
		rc = -ENOMEM;
   260a8:	f06f 060b 	mvn.w	r6, #11
	net_pkt_unref(tx);
   260ac:	4628      	mov	r0, r5
   260ae:	f7f7 fba4 	bl	1d7fa <net_pkt_unref>
}
   260b2:	4630      	mov	r0, r6
   260b4:	b004      	add	sp, #16
   260b6:	bd70      	pop	{r4, r5, r6, pc}
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   260b8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   260ba:	2200      	movs	r2, #0
   260bc:	9201      	str	r2, [sp, #4]
   260be:	9300      	str	r3, [sp, #0]
   260c0:	4613      	mov	r3, r2
   260c2:	4629      	mov	r1, r5
   260c4:	4620      	mov	r0, r4
   260c6:	f000 fca9 	bl	26a1c <net_app_send_pkt>
	if (rc < 0) {
   260ca:	1e06      	subs	r6, r0, #0
   260cc:	dbee      	blt.n	260ac <mqtt_tx_disconnect+0x38>
	ctx->connected = 0;
   260ce:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   260d2:	f36f 0341 	bfc	r3, #1, #1
   260d6:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->disconnect) {
   260da:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   260de:	2b00      	cmp	r3, #0
   260e0:	d0e7      	beq.n	260b2 <mqtt_tx_disconnect+0x3e>
		ctx->disconnect(ctx);
   260e2:	4620      	mov	r0, r4
   260e4:	4798      	blx	r3
   260e6:	e7e4      	b.n	260b2 <mqtt_tx_disconnect+0x3e>
		return -EINVAL;
   260e8:	f06f 0615 	mvn.w	r6, #21
   260ec:	e7e1      	b.n	260b2 <mqtt_tx_disconnect+0x3e>
		return -ENOMEM;
   260ee:	f06f 060b 	mvn.w	r6, #11
   260f2:	e7de      	b.n	260b2 <mqtt_tx_disconnect+0x3e>

000260f4 <mqtt_tx_puback>:
{
   260f4:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBACK);
   260f6:	2204      	movs	r2, #4
   260f8:	f7ff feeb 	bl	25ed2 <mqtt_tx_pub_msgs>
}
   260fc:	bd08      	pop	{r3, pc}

000260fe <mqtt_tx_pubrec>:
{
   260fe:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREC);
   26100:	2205      	movs	r2, #5
   26102:	f7ff fee6 	bl	25ed2 <mqtt_tx_pub_msgs>
}
   26106:	bd08      	pop	{r3, pc}

00026108 <mqtt_tx_publish>:
{
   26108:	b570      	push	{r4, r5, r6, lr}
   2610a:	b082      	sub	sp, #8
   2610c:	4605      	mov	r5, r0
   2610e:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   26110:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   26112:	481a      	ldr	r0, [pc, #104]	; (2617c <mqtt_tx_publish+0x74>)
   26114:	f7f4 fd94 	bl	1ac40 <net_buf_alloc>
	if (data == NULL) {
   26118:	b360      	cbz	r0, 26174 <mqtt_tx_publish+0x6c>
   2611a:	4604      	mov	r4, r0
	rc = mqtt_pack_publish(data->data, &data->len, data->size, msg);
   2611c:	4633      	mov	r3, r6
   2611e:	89c2      	ldrh	r2, [r0, #14]
   26120:	f100 010c 	add.w	r1, r0, #12
   26124:	6880      	ldr	r0, [r0, #8]
   26126:	f7ff fd47 	bl	25bb8 <mqtt_pack_publish>
	if (rc != 0) {
   2612a:	b9c0      	cbnz	r0, 2615e <mqtt_tx_publish+0x56>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   2612c:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   2612e:	2100      	movs	r1, #0
   26130:	4628      	mov	r0, r5
   26132:	f000 fcef 	bl	26b14 <net_app_get_net_pkt>
	if (tx == NULL) {
   26136:	4606      	mov	r6, r0
   26138:	b1c8      	cbz	r0, 2616e <mqtt_tx_publish+0x66>
	net_pkt_frag_add(tx, data);
   2613a:	4621      	mov	r1, r4
   2613c:	f7f7 fb87 	bl	1d84e <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   26140:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   26142:	2200      	movs	r2, #0
   26144:	9201      	str	r2, [sp, #4]
   26146:	9300      	str	r3, [sp, #0]
   26148:	4613      	mov	r3, r2
   2614a:	4631      	mov	r1, r6
   2614c:	4628      	mov	r0, r5
   2614e:	f000 fc65 	bl	26a1c <net_app_send_pkt>
	if (rc < 0) {
   26152:	1e05      	subs	r5, r0, #0
   26154:	da08      	bge.n	26168 <mqtt_tx_publish+0x60>
		net_pkt_unref(tx);
   26156:	4630      	mov	r0, r6
   26158:	f7f7 fb4f 	bl	1d7fa <net_pkt_unref>
   2615c:	e004      	b.n	26168 <mqtt_tx_publish+0x60>
		rc = -EINVAL;
   2615e:	f06f 0515 	mvn.w	r5, #21
	net_pkt_frag_unref(data);
   26162:	4620      	mov	r0, r4
   26164:	f7f7 fb43 	bl	1d7ee <net_pkt_frag_unref>
}
   26168:	4628      	mov	r0, r5
   2616a:	b002      	add	sp, #8
   2616c:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   2616e:	f06f 050b 	mvn.w	r5, #11
   26172:	e7f6      	b.n	26162 <mqtt_tx_publish+0x5a>
		return -ENOMEM;
   26174:	f06f 050b 	mvn.w	r5, #11
   26178:	e7f6      	b.n	26168 <mqtt_tx_publish+0x60>
   2617a:	bf00      	nop
   2617c:	2000d260 	.word	0x2000d260

00026180 <mqtt_rx_connack>:
{
   26180:	b570      	push	{r4, r5, r6, lr}
   26182:	b082      	sub	sp, #8
   26184:	4604      	mov	r4, r0
   26186:	4608      	mov	r0, r1
   26188:	4616      	mov	r6, r2
	rc = mqtt_unpack_connack(data, len, &session, &connect_rc);
   2618a:	f10d 0307 	add.w	r3, sp, #7
   2618e:	f10d 0206 	add.w	r2, sp, #6
   26192:	8989      	ldrh	r1, [r1, #12]
   26194:	6880      	ldr	r0, [r0, #8]
   26196:	f7ff fdda 	bl	25d4e <mqtt_unpack_connack>
	if (rc != 0) {
   2619a:	b998      	cbnz	r0, 261c4 <mqtt_rx_connack+0x44>
   2619c:	4605      	mov	r5, r0
	switch (clean_session) {
   2619e:	2e01      	cmp	r6, #1
   261a0:	d113      	bne.n	261ca <mqtt_rx_connack+0x4a>
		if (/*session == 0 && */connect_rc == 0) {
   261a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   261a6:	b99b      	cbnz	r3, 261d0 <mqtt_rx_connack+0x50>
	ctx->connected = 1;
   261a8:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   261ac:	f043 0302 	orr.w	r3, r3, #2
   261b0:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->connect) {
   261b4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   261b8:	b10b      	cbz	r3, 261be <mqtt_rx_connack+0x3e>
		ctx->connect(ctx);
   261ba:	4620      	mov	r0, r4
   261bc:	4798      	blx	r3
}
   261be:	4628      	mov	r0, r5
   261c0:	b002      	add	sp, #8
   261c2:	bd70      	pop	{r4, r5, r6, pc}
		rc = -EINVAL;
   261c4:	f06f 0515 	mvn.w	r5, #21
   261c8:	e7f9      	b.n	261be <mqtt_rx_connack+0x3e>
		rc = -EINVAL;
   261ca:	f06f 0515 	mvn.w	r5, #21
   261ce:	e7f6      	b.n	261be <mqtt_rx_connack+0x3e>
			rc = -EINVAL;
   261d0:	f06f 0515 	mvn.w	r5, #21
	return rc;
   261d4:	e7f3      	b.n	261be <mqtt_rx_connack+0x3e>

000261d6 <mqtt_rx_puback>:
{
   261d6:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBACK);
   261d8:	2204      	movs	r2, #4
   261da:	f7ff fe0d 	bl	25df8 <mqtt_rx_pub_msgs>
}
   261de:	bd08      	pop	{r3, pc}

000261e0 <mqtt_rx_pubcomp>:
{
   261e0:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBCOMP);
   261e2:	2207      	movs	r2, #7
   261e4:	f7ff fe08 	bl	25df8 <mqtt_rx_pub_msgs>
}
   261e8:	bd08      	pop	{r3, pc}

000261ea <mqtt_rx_pubrec>:
{
   261ea:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREC);
   261ec:	2205      	movs	r2, #5
   261ee:	f7ff fe03 	bl	25df8 <mqtt_rx_pub_msgs>
}
   261f2:	bd08      	pop	{r3, pc}

000261f4 <mqtt_rx_pubrel>:
{
   261f4:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREL);
   261f6:	2206      	movs	r2, #6
   261f8:	f7ff fdfe 	bl	25df8 <mqtt_rx_pub_msgs>
}
   261fc:	bd08      	pop	{r3, pc}

000261fe <mqtt_rx_pingresp>:
{
   261fe:	b508      	push	{r3, lr}
   26200:	460b      	mov	r3, r1
	rc = mqtt_unpack_pingresp(rx->data, rx->len);
   26202:	8989      	ldrh	r1, [r1, #12]
   26204:	6898      	ldr	r0, [r3, #8]
   26206:	f7ff fdf0 	bl	25dea <mqtt_unpack_pingresp>
	if (rc != 0) {
   2620a:	4603      	mov	r3, r0
   2620c:	b908      	cbnz	r0, 26212 <mqtt_rx_pingresp+0x14>
}
   2620e:	4618      	mov	r0, r3
   26210:	bd08      	pop	{r3, pc}
		return -EINVAL;
   26212:	f06f 0315 	mvn.w	r3, #21
   26216:	e7fa      	b.n	2620e <mqtt_rx_pingresp+0x10>

00026218 <mqtt_rx_suback>:
{
   26218:	b530      	push	{r4, r5, lr}
   2621a:	b085      	sub	sp, #20
   2621c:	4604      	mov	r4, r0
	data = rx->data;
   2621e:	6888      	ldr	r0, [r1, #8]
	len = rx->len;
   26220:	8989      	ldrh	r1, [r1, #12]
	rc = mqtt_unpack_suback(data, len, &pkt_id, &items,
   26222:	ab03      	add	r3, sp, #12
   26224:	9301      	str	r3, [sp, #4]
   26226:	2301      	movs	r3, #1
   26228:	9300      	str	r3, [sp, #0]
   2622a:	f10d 0309 	add.w	r3, sp, #9
   2622e:	f10d 020a 	add.w	r2, sp, #10
   26232:	f7ff fc31 	bl	25a98 <mqtt_unpack_suback>
	if (rc != 0) {
   26236:	b988      	cbnz	r0, 2625c <mqtt_rx_suback+0x44>
	if (!ctx->subscribe) {
   26238:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   2623c:	b18d      	cbz	r5, 26262 <mqtt_rx_suback+0x4a>
	rc = ctx->subscribe(ctx, pkt_id, items, suback_qos);
   2623e:	ab03      	add	r3, sp, #12
   26240:	f89d 2009 	ldrb.w	r2, [sp, #9]
   26244:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   26248:	4620      	mov	r0, r4
   2624a:	47a8      	blx	r5
	if (rc != 0) {
   2624c:	4603      	mov	r3, r0
   2624e:	b910      	cbnz	r0, 26256 <mqtt_rx_suback+0x3e>
}
   26250:	4618      	mov	r0, r3
   26252:	b005      	add	sp, #20
   26254:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   26256:	f06f 0315 	mvn.w	r3, #21
   2625a:	e7f9      	b.n	26250 <mqtt_rx_suback+0x38>
		return -EINVAL;
   2625c:	f06f 0315 	mvn.w	r3, #21
   26260:	e7f6      	b.n	26250 <mqtt_rx_suback+0x38>
		return -EINVAL;
   26262:	f06f 0315 	mvn.w	r3, #21
   26266:	e7f3      	b.n	26250 <mqtt_rx_suback+0x38>

00026268 <mqtt_rx_publish>:
{
   26268:	b530      	push	{r4, r5, lr}
   2626a:	b087      	sub	sp, #28
   2626c:	4604      	mov	r4, r0
   2626e:	460b      	mov	r3, r1
	rc = mqtt_unpack_publish(rx->data, rx->len, &msg);
   26270:	466a      	mov	r2, sp
   26272:	8989      	ldrh	r1, [r1, #12]
   26274:	6898      	ldr	r0, [r3, #8]
   26276:	f7ff fd0f 	bl	25c98 <mqtt_unpack_publish>
	if (rc != 0) {
   2627a:	bb00      	cbnz	r0, 262be <mqtt_rx_publish+0x56>
	rc = ctx->publish_rx(ctx, &msg, msg.pkt_id, MQTT_PUBLISH);
   2627c:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   26280:	2303      	movs	r3, #3
   26282:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   26286:	4669      	mov	r1, sp
   26288:	4620      	mov	r0, r4
   2628a:	47a8      	blx	r5
	if (rc != 0) {
   2628c:	4602      	mov	r2, r0
   2628e:	b9c8      	cbnz	r0, 262c4 <mqtt_rx_publish+0x5c>
	switch (msg.qos) {
   26290:	f89d 3001 	ldrb.w	r3, [sp, #1]
   26294:	2b01      	cmp	r3, #1
   26296:	d00b      	beq.n	262b0 <mqtt_rx_publish+0x48>
   26298:	b13b      	cbz	r3, 262aa <mqtt_rx_publish+0x42>
   2629a:	2b02      	cmp	r3, #2
   2629c:	d115      	bne.n	262ca <mqtt_rx_publish+0x62>
		rc = mqtt_tx_pubrec(ctx, msg.pkt_id);
   2629e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   262a2:	4620      	mov	r0, r4
   262a4:	f7ff ff2b 	bl	260fe <mqtt_tx_pubrec>
   262a8:	4602      	mov	r2, r0
}
   262aa:	4610      	mov	r0, r2
   262ac:	b007      	add	sp, #28
   262ae:	bd30      	pop	{r4, r5, pc}
		rc = mqtt_tx_puback(ctx, msg.pkt_id);
   262b0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   262b4:	4620      	mov	r0, r4
   262b6:	f7ff ff1d 	bl	260f4 <mqtt_tx_puback>
   262ba:	4602      	mov	r2, r0
		break;
   262bc:	e7f5      	b.n	262aa <mqtt_rx_publish+0x42>
		return -EINVAL;
   262be:	f06f 0215 	mvn.w	r2, #21
   262c2:	e7f2      	b.n	262aa <mqtt_rx_publish+0x42>
		return -EINVAL;
   262c4:	f06f 0215 	mvn.w	r2, #21
   262c8:	e7ef      	b.n	262aa <mqtt_rx_publish+0x42>
		rc = -EINVAL;
   262ca:	f06f 0215 	mvn.w	r2, #21
   262ce:	e7ec      	b.n	262aa <mqtt_rx_publish+0x42>

000262d0 <mqtt_parser>:
{
   262d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   262d2:	4606      	mov	r6, r0
	data = mqtt_linearize_packet(ctx, rx, MQTT_PUBLISHER_MIN_MSG_SIZE);
   262d4:	2202      	movs	r2, #2
   262d6:	f7ff fe5f 	bl	25f98 <mqtt_linearize_packet>
	if (!data) {
   262da:	2800      	cmp	r0, #0
   262dc:	d057      	beq.n	2638e <mqtt_parser+0xbe>
   262de:	4604      	mov	r4, r0
	pkt_type = MQTT_PACKET_TYPE(data->data[0]);
   262e0:	6883      	ldr	r3, [r0, #8]
   262e2:	781b      	ldrb	r3, [r3, #0]
   262e4:	091b      	lsrs	r3, r3, #4
   262e6:	b29f      	uxth	r7, r3
	switch (pkt_type) {
   262e8:	3b02      	subs	r3, #2
   262ea:	2b0b      	cmp	r3, #11
   262ec:	d84c      	bhi.n	26388 <mqtt_parser+0xb8>
   262ee:	e8df f003 	tbb	[pc, r3]
   262f2:	3906      	.short	0x3906
   262f4:	2d3f2716 	.word	0x2d3f2716
   262f8:	4b4b454b 	.word	0x4b4b454b
   262fc:	334b      	.short	0x334b
		if (!ctx->connected) {
   262fe:	f896 30a9 	ldrb.w	r3, [r6, #169]	; 0xa9
   26302:	f013 0f02 	tst.w	r3, #2
   26306:	d002      	beq.n	2630e <mqtt_parser+0x3e>
			rc = -EINVAL;
   26308:	f06f 0515 	mvn.w	r5, #21
   2630c:	e00c      	b.n	26328 <mqtt_parser+0x58>
			rc = mqtt_rx_connack(ctx, data, ctx->clean_session);
   2630e:	f003 0201 	and.w	r2, r3, #1
   26312:	4601      	mov	r1, r0
   26314:	4630      	mov	r0, r6
   26316:	f7ff ff33 	bl	26180 <mqtt_rx_connack>
   2631a:	4605      	mov	r5, r0
   2631c:	e004      	b.n	26328 <mqtt_parser+0x58>
		rc = mqtt_rx_puback(ctx, data);
   2631e:	4601      	mov	r1, r0
   26320:	4630      	mov	r0, r6
   26322:	f7ff ff58 	bl	261d6 <mqtt_rx_puback>
   26326:	4605      	mov	r5, r0
	if (rc != 0 && ctx->malformed) {
   26328:	b12d      	cbz	r5, 26336 <mqtt_parser+0x66>
   2632a:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   2632e:	b113      	cbz	r3, 26336 <mqtt_parser+0x66>
		ctx->malformed(ctx, pkt_type);
   26330:	4639      	mov	r1, r7
   26332:	4630      	mov	r0, r6
   26334:	4798      	blx	r3
	net_pkt_frag_unref(data);
   26336:	4620      	mov	r0, r4
   26338:	f7f7 fa59 	bl	1d7ee <net_pkt_frag_unref>
}
   2633c:	4628      	mov	r0, r5
   2633e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = mqtt_rx_pubrec(ctx, data);
   26340:	4601      	mov	r1, r0
   26342:	4630      	mov	r0, r6
   26344:	f7ff ff51 	bl	261ea <mqtt_rx_pubrec>
   26348:	4605      	mov	r5, r0
		break;
   2634a:	e7ed      	b.n	26328 <mqtt_parser+0x58>
		rc = mqtt_rx_pubcomp(ctx, data);
   2634c:	4601      	mov	r1, r0
   2634e:	4630      	mov	r0, r6
   26350:	f7ff ff46 	bl	261e0 <mqtt_rx_pubcomp>
   26354:	4605      	mov	r5, r0
		break;
   26356:	e7e7      	b.n	26328 <mqtt_parser+0x58>
		rc = mqtt_rx_pingresp(ctx, data);
   26358:	4601      	mov	r1, r0
   2635a:	4630      	mov	r0, r6
   2635c:	f7ff ff4f 	bl	261fe <mqtt_rx_pingresp>
   26360:	4605      	mov	r5, r0
		break;
   26362:	e7e1      	b.n	26328 <mqtt_parser+0x58>
		rc = mqtt_rx_publish(ctx, data);
   26364:	4601      	mov	r1, r0
   26366:	4630      	mov	r0, r6
   26368:	f7ff ff7e 	bl	26268 <mqtt_rx_publish>
   2636c:	4605      	mov	r5, r0
		break;
   2636e:	e7db      	b.n	26328 <mqtt_parser+0x58>
		rc = mqtt_rx_pubrel(ctx, data);
   26370:	4601      	mov	r1, r0
   26372:	4630      	mov	r0, r6
   26374:	f7ff ff3e 	bl	261f4 <mqtt_rx_pubrel>
   26378:	4605      	mov	r5, r0
		break;
   2637a:	e7d5      	b.n	26328 <mqtt_parser+0x58>
		rc = mqtt_rx_suback(ctx, data);
   2637c:	4601      	mov	r1, r0
   2637e:	4630      	mov	r0, r6
   26380:	f7ff ff4a 	bl	26218 <mqtt_rx_suback>
   26384:	4605      	mov	r5, r0
		break;
   26386:	e7cf      	b.n	26328 <mqtt_parser+0x58>
		rc = -EINVAL;
   26388:	f06f 0515 	mvn.w	r5, #21
   2638c:	e7cc      	b.n	26328 <mqtt_parser+0x58>
		return -ENOMEM;
   2638e:	f06f 050b 	mvn.w	r5, #11
   26392:	e7d3      	b.n	2633c <mqtt_parser+0x6c>

00026394 <mqtt_connect>:
}

int mqtt_connect(struct mqtt_ctx *ctx)
{
   26394:	b530      	push	{r4, r5, lr}
   26396:	b087      	sub	sp, #28
	int rc = 0;

	if (!ctx) {
   26398:	b348      	cbz	r0, 263ee <mqtt_connect+0x5a>
   2639a:	4604      	mov	r4, r0
	}

	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
			NULL,
			NULL,
			ctx->peer_addr_str,
   2639c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
   263a0:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
   263a4:	6f81      	ldr	r1, [r0, #120]	; 0x78
					  const char *peer_addr_str,
					  u16_t peer_port,
					  s32_t timeout,
					  void *user_data)
{
	return net_app_init_client(ctx,
   263a6:	9004      	str	r0, [sp, #16]
   263a8:	9103      	str	r1, [sp, #12]
   263aa:	9202      	str	r2, [sp, #8]
   263ac:	9301      	str	r3, [sp, #4]
   263ae:	2300      	movs	r3, #0
   263b0:	9300      	str	r3, [sp, #0]
   263b2:	2206      	movs	r2, #6
   263b4:	2101      	movs	r1, #1
   263b6:	f000 f913 	bl	265e0 <net_app_init_client>
			ctx->peer_port,
			ctx->net_init_timeout,
			ctx);
	if (rc < 0) {
   263ba:	1e05      	subs	r5, r0, #0
   263bc:	db0e      	blt.n	263dc <mqtt_connect+0x48>
		goto error_connect;
	}

	rc = net_app_set_cb(&ctx->net_app_ctx,
   263be:	2300      	movs	r3, #0
   263c0:	9300      	str	r3, [sp, #0]
   263c2:	4a0c      	ldr	r2, [pc, #48]	; (263f4 <mqtt_connect+0x60>)
   263c4:	490c      	ldr	r1, [pc, #48]	; (263f8 <mqtt_connect+0x64>)
   263c6:	4620      	mov	r0, r4
   263c8:	f000 fb11 	bl	269ee <net_app_set_cb>
			app_connected,
			app_recv,
			NULL,
			NULL);
	if (rc < 0) {
   263cc:	1e05      	subs	r5, r0, #0
   263ce:	db05      	blt.n	263dc <mqtt_connect+0x48>
	if (rc < 0) {
		goto error_connect;
	}
#endif

	rc = net_app_connect(&ctx->net_app_ctx, ctx->net_timeout);
   263d0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   263d2:	4620      	mov	r0, r4
   263d4:	f000 f9ec 	bl	267b0 <net_app_connect>
	if (rc < 0) {
   263d8:	1e05      	subs	r5, r0, #0
   263da:	da05      	bge.n	263e8 <mqtt_connect+0x54>

	return rc;

error_connect:
	/* clean net app context, so mqtt_connect() can be called repeatedly */
	net_app_close(&ctx->net_app_ctx);
   263dc:	4620      	mov	r0, r4
   263de:	f000 fbbd 	bl	26b5c <net_app_close>
	net_app_release(&ctx->net_app_ctx);
   263e2:	4620      	mov	r0, r4
   263e4:	f000 fab8 	bl	26958 <net_app_release>

	return rc;
}
   263e8:	4628      	mov	r0, r5
   263ea:	b007      	add	sp, #28
   263ec:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   263ee:	f06f 050d 	mvn.w	r5, #13
   263f2:	e7f9      	b.n	263e8 <mqtt_connect+0x54>
   263f4:	00025eb3 	.word	0x00025eb3
   263f8:	00025eb1 	.word	0x00025eb1

000263fc <mqtt_init>:

int mqtt_init(struct mqtt_ctx *ctx, enum mqtt_app app_type)
{
	/* So far, only clean session = 1 is supported */
	ctx->clean_session = 1;
   263fc:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
	ctx->connected = 0;
   26400:	f043 0301 	orr.w	r3, r3, #1
   26404:	f36f 0341 	bfc	r3, #1, #1
   26408:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9

	ctx->app_type = app_type;
   2640c:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
	ctx->rcv = mqtt_parser;
   26410:	4b02      	ldr	r3, [pc, #8]	; (2641c <mqtt_init+0x20>)
   26412:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	k_sem_init(&ctx->tls_hs_wait, 0, 1);
#endif

	return 0;
}
   26416:	2000      	movs	r0, #0
   26418:	4770      	bx	lr
   2641a:	bf00      	nop
   2641c:	000262d1 	.word	0x000262d1

00026420 <mqtt_close>:

int mqtt_close(struct mqtt_ctx *ctx)
{
	if (!ctx) {
   26420:	b178      	cbz	r0, 26442 <mqtt_close+0x22>
{
   26422:	b510      	push	{r4, lr}
   26424:	4604      	mov	r4, r0
		return -EFAULT;
	}

	if (ctx->net_app_ctx.is_init) {
   26426:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   2642a:	f012 0f01 	tst.w	r2, #1
   2642e:	d101      	bne.n	26434 <mqtt_close+0x14>
		net_app_close(&ctx->net_app_ctx);
		net_app_release(&ctx->net_app_ctx);
	}

	return 0;
   26430:	2000      	movs	r0, #0
}
   26432:	bd10      	pop	{r4, pc}
		net_app_close(&ctx->net_app_ctx);
   26434:	f000 fb92 	bl	26b5c <net_app_close>
		net_app_release(&ctx->net_app_ctx);
   26438:	4620      	mov	r0, r4
   2643a:	f000 fa8d 	bl	26958 <net_app_release>
	return 0;
   2643e:	2000      	movs	r0, #0
   26440:	bd10      	pop	{r4, pc}
		return -EFAULT;
   26442:	f06f 000d 	mvn.w	r0, #13
   26446:	4770      	bx	lr

00026448 <net_app_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_app_init(const char *app_info, u32_t flags, s32_t timeout)
{
   26448:	b570      	push	{r4, r5, r6, lr}
   2644a:	460c      	mov	r4, r1
   2644c:	4616      	mov	r6, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   2644e:	f7f4 fff5 	bl	1b43c <net_if_get_default>
	int loop = timeout / LOOP_DIVIDER;
   26452:	4b20      	ldr	r3, [pc, #128]	; (264d4 <net_app_init+0x8c>)
   26454:	fb83 2306 	smull	r2, r3, r3, r6
   26458:	17f5      	asrs	r5, r6, #31
   2645a:	ebc5 05a3 	rsb	r5, r5, r3, asr #2

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
   2645e:	b380      	cbz	r0, 264c2 <net_app_init+0x7a>
		NET_ERR("No network interfaces");
		return -ENODEV;
	}

	if (flags & NET_APP_NEED_IPV6) {
   26460:	f014 0f02 	tst.w	r4, #2
   26464:	d114      	bne.n	26490 <net_app_init+0x48>
	int count = 0;
   26466:	2100      	movs	r1, #0
		count++;
	}

	if (flags & NET_APP_NEED_IPV4) {
   26468:	f014 0f04 	tst.w	r4, #4
   2646c:	d000      	beq.n	26470 <net_app_init+0x28>
		count++;
   2646e:	3101      	adds	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   26470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26474:	4818      	ldr	r0, [pc, #96]	; (264d8 <net_app_init+0x90>)
   26476:	f002 ff93 	bl	293a0 <_impl_k_sem_init>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   2647a:	2e00      	cmp	r6, #0
   2647c:	db0a      	blt.n	26494 <net_app_init+0x4c>
		count = -1;
	} else if (timeout == 0) {
   2647e:	b166      	cbz	r6, 2649a <net_app_init+0x52>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
   26480:	4a16      	ldr	r2, [pc, #88]	; (264dc <net_app_init+0x94>)
   26482:	fb82 3206 	smull	r3, r2, r2, r6
   26486:	17f3      	asrs	r3, r6, #31
   26488:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   2648c:	3301      	adds	r3, #1
   2648e:	e007      	b.n	264a0 <net_app_init+0x58>
		count++;
   26490:	2101      	movs	r1, #1
   26492:	e7e9      	b.n	26468 <net_app_init+0x20>
		count = -1;
   26494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26498:	e002      	b.n	264a0 <net_app_init+0x58>
		count = 0;
   2649a:	2300      	movs	r3, #0
   2649c:	e000      	b.n	264a0 <net_app_init+0x58>
   2649e:	4623      	mov	r3, r4
	}

	/* Loop here until until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
   264a0:	1e5c      	subs	r4, r3, #1
   264a2:	b153      	cbz	r3, 264ba <net_app_init+0x72>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   264a4:	4629      	mov	r1, r5
   264a6:	480e      	ldr	r0, [pc, #56]	; (264e0 <net_app_init+0x98>)
   264a8:	f002 ff96 	bl	293d8 <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   264ac:	2800      	cmp	r0, #0
   264ae:	d0f6      	beq.n	2649e <net_app_init+0x56>
	return sem->count;
   264b0:	4b09      	ldr	r3, [pc, #36]	; (264d8 <net_app_init+0x90>)
   264b2:	689a      	ldr	r2, [r3, #8]
   264b4:	4623      	mov	r3, r4
			if (!k_sem_count_get(&counter)) {
   264b6:	2a00      	cmp	r2, #0
   264b8:	d1f2      	bne.n	264a0 <net_app_init+0x58>
				break;
			}
		}
	}

	if (!count && timeout) {
   264ba:	b92c      	cbnz	r4, 264c8 <net_app_init+0x80>
   264bc:	b936      	cbnz	r6, 264cc <net_app_init+0x84>
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   264be:	2000      	movs	r0, #0
   264c0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   264c2:	f06f 0012 	mvn.w	r0, #18
   264c6:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   264c8:	2000      	movs	r0, #0
   264ca:	bd70      	pop	{r4, r5, r6, pc}
		return -ETIMEDOUT;
   264cc:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
   264d0:	bd70      	pop	{r4, r5, r6, pc}
   264d2:	bf00      	nop
   264d4:	66666667 	.word	0x66666667
   264d8:	2000255c 	.word	0x2000255c
   264dc:	10624dd3 	.word	0x10624dd3
   264e0:	2000d1b0 	.word	0x2000d1b0

000264e4 <init_net_app>:

#if defined(CONFIG_NET_APP_AUTO_INIT)
static int init_net_app(struct device *device)
{
   264e4:	b508      	push	{r3, lr}
	ret = _net_app_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_app_bt_setup();
   264e6:	f000 fb5b 	bl	26ba0 <_net_app_bt_setup>
	if (IS_ENABLED(CONFIG_NET_APP_NEED_IPV4)) {
		flags |= NET_APP_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_app_init("Initializing network", flags,
   264ea:	f247 5230 	movw	r2, #30000	; 0x7530
   264ee:	2100      	movs	r1, #0
   264f0:	4801      	ldr	r0, [pc, #4]	; (264f8 <init_net_app+0x14>)
   264f2:	f7ff ffa9 	bl	26448 <net_app_init>
	if (ret < 0) {
		NET_ERR("Network initialization failed (%d)", ret);
	}

	return ret;
}
   264f6:	bd08      	pop	{r3, pc}
   264f8:	00032b54 	.word	0x00032b54

000264fc <try_resolve>:
		NET_ERR("Cannot resolve %s (%d)", peer_addr_str, ret);
	}

	return ret;
#endif
}
   264fc:	f06f 0015 	mvn.w	r0, #21
   26500:	4770      	bx	lr

00026502 <set_remote_addr>:
static int set_remote_addr(struct net_app_ctx *ctx,
			   struct sockaddr *remote_addr,
			   const char *peer_addr_str,
			   bool peer_addr_ok,
			   s32_t timeout)
{
   26502:	b510      	push	{r4, lr}
   26504:	4604      	mov	r4, r0
   26506:	4610      	mov	r0, r2
	int ret;

	if (peer_addr_ok && remote_addr->sa_family == AF_INET6) {
   26508:	461a      	mov	r2, r3
   2650a:	b113      	cbz	r3, 26512 <set_remote_addr+0x10>
   2650c:	880b      	ldrh	r3, [r1, #0]
   2650e:	2b0a      	cmp	r3, #10
   26510:	d00e      	beq.n	26530 <set_remote_addr+0x2e>
#else
		return -EAFNOSUPPORT;
#endif
	}

	if (peer_addr_ok && remote_addr->sa_family == AF_INET) {
   26512:	b112      	cbz	r2, 2651a <set_remote_addr+0x18>
   26514:	880b      	ldrh	r3, [r1, #0]
   26516:	2b02      	cmp	r3, #2
   26518:	d012      	beq.n	26540 <set_remote_addr+0x3e>
#endif
	}

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	/* Could be hostname, try DNS if configured. */
	ret = try_resolve(ctx, peer_addr_str, DNS_QUERY_TYPE_AAAA, timeout);
   2651a:	9b02      	ldr	r3, [sp, #8]
   2651c:	221c      	movs	r2, #28
   2651e:	4601      	mov	r1, r0
   26520:	4620      	mov	r0, r4
   26522:	f7ff ffeb 	bl	264fc <try_resolve>
	if (ret < 0) {
   26526:	2800      	cmp	r0, #0
   26528:	db0c      	blt.n	26544 <set_remote_addr+0x42>
		return ret;
	}

	ctx->default_ctx = &ctx->ipv6;
   2652a:	6364      	str	r4, [r4, #52]	; 0x34
	return 0;
   2652c:	2000      	movs	r0, #0
   2652e:	bd10      	pop	{r4, pc}
		memcpy(&ctx->ipv6.remote, remote_addr,
   26530:	2218      	movs	r2, #24
   26532:	f104 001c 	add.w	r0, r4, #28
   26536:	f7d9 fec3 	bl	2c0 <memcpy>
		ctx->default_ctx = &ctx->ipv6;
   2653a:	6364      	str	r4, [r4, #52]	; 0x34
		return 0;
   2653c:	2000      	movs	r0, #0
   2653e:	bd10      	pop	{r4, pc}
		return -EAFNOSUPPORT;
   26540:	f06f 0069 	mvn.w	r0, #105	; 0x69
	}

	ctx->default_ctx = &ctx->ipv4;
	return 0;
#endif /* IPV4 && IPV6 */
}
   26544:	bd10      	pop	{r4, pc}

00026546 <close_net_ctx>:
}

static void close_net_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	if (ctx->ipv6.ctx) {
   26546:	6803      	ldr	r3, [r0, #0]
   26548:	b13b      	cbz	r3, 2655a <close_net_ctx+0x14>
{
   2654a:	b510      	push	{r4, lr}
   2654c:	4604      	mov	r4, r0
		net_context_put(ctx->ipv6.ctx);
   2654e:	4618      	mov	r0, r3
   26550:	f7f6 fcbe 	bl	1ced0 <net_context_put>
		ctx->ipv6.ctx = NULL;
   26554:	2300      	movs	r3, #0
   26556:	6023      	str	r3, [r4, #0]
   26558:	bd10      	pop	{r4, pc}
   2655a:	4770      	bx	lr

0002655c <get_port_number>:
	if (peer_addr_str[0] == '[') {
   2655c:	7803      	ldrb	r3, [r0, #0]
   2655e:	2b5b      	cmp	r3, #91	; 0x5b
   26560:	d002      	beq.n	26568 <get_port_number+0xc>
   26562:	2300      	movs	r3, #0
   26564:	4619      	mov	r1, r3
   26566:	e019      	b.n	2659c <get_port_number+0x40>
{
   26568:	b570      	push	{r4, r5, r6, lr}
   2656a:	460d      	mov	r5, r1
   2656c:	4604      	mov	r4, r0
		ptr = strstr(peer_addr_str, "]:");
   2656e:	4913      	ldr	r1, [pc, #76]	; (265bc <get_port_number+0x60>)
   26570:	f004 fd8a 	bl	2b088 <strstr>
		if (!ptr) {
   26574:	4606      	mov	r6, r0
   26576:	b1f0      	cbz	r0, 265b6 <get_port_number+0x5a>
		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
   26578:	1c61      	adds	r1, r4, #1
   2657a:	1a44      	subs	r4, r0, r1
   2657c:	2c2e      	cmp	r4, #46	; 0x2e
   2657e:	bfa8      	it	ge
   26580:	242e      	movge	r4, #46	; 0x2e
		memcpy(buf, peer_addr_str + 1, end);
   26582:	4622      	mov	r2, r4
   26584:	4628      	mov	r0, r5
   26586:	f7d9 fe9b 	bl	2c0 <memcpy>
		buf[end] = '\0';
   2658a:	2100      	movs	r1, #0
   2658c:	5529      	strb	r1, [r5, r4]
		port = strtol(ptr + 2, NULL, 10);
   2658e:	220a      	movs	r2, #10
   26590:	1cb0      	adds	r0, r6, #2
   26592:	f004 ff19 	bl	2b3c8 <strtol>
   26596:	b280      	uxth	r0, r0
		return port;
   26598:	bd70      	pop	{r4, r5, r6, pc}
		i++;
   2659a:	3301      	adds	r3, #1
	while (peer_addr_str[i]) {
   2659c:	5cc2      	ldrb	r2, [r0, r3]
   2659e:	b11a      	cbz	r2, 265a8 <get_port_number+0x4c>
		if (peer_addr_str[i] == ':') {
   265a0:	2a3a      	cmp	r2, #58	; 0x3a
   265a2:	d1fa      	bne.n	2659a <get_port_number+0x3e>
			count++;
   265a4:	3101      	adds	r1, #1
   265a6:	e7f8      	b.n	2659a <get_port_number+0x3e>
	if (count == 1) {
   265a8:	2901      	cmp	r1, #1
   265aa:	d001      	beq.n	265b0 <get_port_number+0x54>
	return 0;
   265ac:	2000      	movs	r0, #0
   265ae:	4770      	bx	lr
		return -EAFNOSUPPORT;
   265b0:	f06f 0069 	mvn.w	r0, #105	; 0x69
   265b4:	4770      	bx	lr
			return -EINVAL;
   265b6:	f06f 0015 	mvn.w	r0, #21
   265ba:	bd70      	pop	{r4, r5, r6, pc}
   265bc:	00032b6c 	.word	0x00032b6c

000265c0 <_app_connected>:
}

static void _app_connected(struct net_context *net_ctx,
			   int status,
			   void *user_data)
{
   265c0:	b538      	push	{r3, r4, r5, lr}
   265c2:	460d      	mov	r5, r1
   265c4:	4614      	mov	r4, r2
	if (ctx->is_tls) {
		k_sem_give(&ctx->client.connect_wait);
	}
#endif

	net_context_recv(net_ctx, ctx->recv_cb, K_NO_WAIT, ctx);
   265c6:	4613      	mov	r3, r2
   265c8:	2200      	movs	r2, #0
   265ca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   265cc:	f7f6 ff88 	bl	1d4e0 <net_context_recv>
		 */
		NET_DBG("Postponing TLS connection cb for ctx %p", ctx);
	} else
#endif
	{
		if (ctx->cb.connect) {
   265d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   265d2:	b11b      	cbz	r3, 265dc <_app_connected+0x1c>
			ctx->cb.connect(ctx, status, ctx->user_data);
   265d4:	6f22      	ldr	r2, [r4, #112]	; 0x70
   265d6:	4629      	mov	r1, r5
   265d8:	4620      	mov	r0, r4
   265da:	4798      	blx	r3
   265dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000265e0 <net_app_init_client>:
{
   265e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   265e4:	b09a      	sub	sp, #104	; 0x68
   265e6:	9e22      	ldr	r6, [sp, #136]	; 0x88
   265e8:	f8bd 8090 	ldrh.w	r8, [sp, #144]	; 0x90
	if (!ctx) {
   265ec:	2800      	cmp	r0, #0
   265ee:	f000 80c9 	beq.w	26784 <net_app_init_client+0x1a4>
   265f2:	4604      	mov	r4, r0
	if (ctx->is_init) {
   265f4:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   265f8:	f010 0f01 	tst.w	r0, #1
   265fc:	f040 80c5 	bne.w	2678a <net_app_init_client+0x1aa>
   26600:	4699      	mov	r9, r3
   26602:	4617      	mov	r7, r2
   26604:	460d      	mov	r5, r1
	memset(&addr, 0, sizeof(addr));
   26606:	2218      	movs	r2, #24
   26608:	2100      	movs	r1, #0
   2660a:	a802      	add	r0, sp, #8
   2660c:	f004 f984 	bl	2a918 <memset>
	memset(&remote_addr, 0, sizeof(remote_addr));
   26610:	2218      	movs	r2, #24
   26612:	2100      	movs	r1, #0
   26614:	a808      	add	r0, sp, #32
   26616:	f004 f97f 	bl	2a918 <memset>
	if (peer_addr) {
   2661a:	2e00      	cmp	r6, #0
   2661c:	d03c      	beq.n	26698 <net_app_init_client+0xb8>
		memcpy(&remote_addr, peer_addr, sizeof(remote_addr));
   2661e:	2218      	movs	r2, #24
   26620:	4631      	mov	r1, r6
   26622:	a808      	add	r0, sp, #32
   26624:	f7d9 fe4c 	bl	2c0 <memcpy>
	int ret, addr_ok = false;
   26628:	f04f 0a00 	mov.w	sl, #0
	if (client_addr) {
   2662c:	f1b9 0f00 	cmp.w	r9, #0
   26630:	d05e      	beq.n	266f0 <net_app_init_client+0x110>
		memcpy(&addr, client_addr, sizeof(addr));
   26632:	2218      	movs	r2, #24
   26634:	4649      	mov	r1, r9
   26636:	a802      	add	r0, sp, #8
   26638:	f7d9 fe42 	bl	2c0 <memcpy>
		if (addr.sa_family != remote_addr.sa_family) {
   2663c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   26640:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   26644:	429a      	cmp	r2, r3
   26646:	f040 80a3 	bne.w	26790 <net_app_init_client+0x1b0>
	ctx->app_type = NET_APP_CLIENT;
   2664a:	2302      	movs	r3, #2
   2664c:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	ctx->user_data = user_data;
   26650:	9b26      	ldr	r3, [sp, #152]	; 0x98
   26652:	6723      	str	r3, [r4, #112]	; 0x70
	ctx->send_data = net_context_sendto;
   26654:	4b54      	ldr	r3, [pc, #336]	; (267a8 <net_app_init_client+0x1c8>)
   26656:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->recv_cb = _net_app_received;
   26658:	4b54      	ldr	r3, [pc, #336]	; (267ac <net_app_init_client+0x1cc>)
   2665a:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->proto = proto;
   2665c:	f884 7075 	strb.w	r7, [r4, #117]	; 0x75
	ctx->sock_type = sock_type;
   26660:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
	ret = _net_app_config_local_ctx(ctx, sock_type, proto, &addr);
   26664:	ab02      	add	r3, sp, #8
   26666:	463a      	mov	r2, r7
   26668:	4629      	mov	r1, r5
   2666a:	4620      	mov	r0, r4
   2666c:	f000 f949 	bl	26902 <_net_app_config_local_ctx>
	if (ret < 0) {
   26670:	1e05      	subs	r5, r0, #0
   26672:	db42      	blt.n	266fa <net_app_init_client+0x11a>
	if (peer_addr) {
   26674:	2e00      	cmp	r6, #0
   26676:	d04c      	beq.n	26712 <net_app_init_client+0x132>
		if (peer_addr->sa_family == AF_INET) {
   26678:	8833      	ldrh	r3, [r6, #0]
   2667a:	2b02      	cmp	r3, #2
   2667c:	f000 808b 	beq.w	26796 <net_app_init_client+0x1b6>
		} else if (peer_addr->sa_family == AF_INET6) {
   26680:	2b0a      	cmp	r3, #10
   26682:	d03e      	beq.n	26702 <net_app_init_client+0x122>
	ctx->is_init = true;
   26684:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   26688:	f043 0301 	orr.w	r3, r3, #1
   2668c:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
}
   26690:	4628      	mov	r0, r5
   26692:	b01a      	add	sp, #104	; 0x68
   26694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (peer_addr_str) {
   26698:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2669a:	b333      	cbz	r3, 266ea <net_app_init_client+0x10a>
		ret = get_port_number(peer_addr_str, base_addr_str,
   2669c:	222f      	movs	r2, #47	; 0x2f
   2669e:	a90e      	add	r1, sp, #56	; 0x38
   266a0:	4618      	mov	r0, r3
   266a2:	f7ff ff5b 	bl	2655c <get_port_number>
		if (ret > 0) {
   266a6:	2800      	cmp	r0, #0
   266a8:	dd17      	ble.n	266da <net_app_init_client+0xfa>
			peer_port = ret;
   266aa:	fa1f f880 	uxth.w	r8, r0
			base_peer_addr = base_addr_str;
   266ae:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
		addr_ok = net_ipaddr_parse(base_peer_addr,
   266b2:	4650      	mov	r0, sl
   266b4:	f7da f824 	bl	700 <strlen>
   266b8:	aa08      	add	r2, sp, #32
   266ba:	4601      	mov	r1, r0
   266bc:	4650      	mov	r0, sl
   266be:	f7f7 ff72 	bl	1e5a6 <net_ipaddr_parse>
   266c2:	4682      	mov	sl, r0
		if (remote_addr.sa_family == AF_INET6) {
   266c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   266c8:	2b0a      	cmp	r3, #10
   266ca:	d1af      	bne.n	2662c <net_app_init_client+0x4c>
			net_sin6(&remote_addr)->sin6_port = htons(peer_port);
   266cc:	ea4f 2318 	mov.w	r3, r8, lsr #8
   266d0:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
   266d4:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
   266d8:	e7a8      	b.n	2662c <net_app_init_client+0x4c>
			strncpy(base_addr_str, peer_addr_str,
   266da:	222e      	movs	r2, #46	; 0x2e
   266dc:	9923      	ldr	r1, [sp, #140]	; 0x8c
   266de:	a80e      	add	r0, sp, #56	; 0x38
   266e0:	f004 fb36 	bl	2ad50 <strncpy>
	const char *base_peer_addr = peer_addr_str;
   266e4:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
   266e8:	e7e3      	b.n	266b2 <net_app_init_client+0xd2>
	int ret, addr_ok = false;
   266ea:	f04f 0a00 	mov.w	sl, #0
   266ee:	e79d      	b.n	2662c <net_app_init_client+0x4c>
		addr.sa_family = remote_addr.sa_family;
   266f0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   266f4:	f8ad 3008 	strh.w	r3, [sp, #8]
   266f8:	e7a7      	b.n	2664a <net_app_init_client+0x6a>
		close_net_ctx(ctx);
   266fa:	4620      	mov	r0, r4
   266fc:	f7ff ff23 	bl	26546 <close_net_ctx>
		goto fail;
   26700:	e7c6      	b.n	26690 <net_app_init_client+0xb0>
			memcpy(&ctx->ipv6.remote, peer_addr,
   26702:	2218      	movs	r2, #24
   26704:	4631      	mov	r1, r6
   26706:	f104 001c 	add.w	r0, r4, #28
   2670a:	f7d9 fdd9 	bl	2c0 <memcpy>
			ctx->default_ctx = &ctx->ipv6;
   2670e:	6364      	str	r4, [r4, #52]	; 0x34
   26710:	e7b8      	b.n	26684 <net_app_init_client+0xa4>
	if (!peer_addr_str) {
   26712:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   26714:	b363      	cbz	r3, 26770 <net_app_init_client+0x190>
	ret = set_remote_addr(ctx, &remote_addr, base_addr_str,
   26716:	9b25      	ldr	r3, [sp, #148]	; 0x94
   26718:	9300      	str	r3, [sp, #0]
   2671a:	f11a 0300 	adds.w	r3, sl, #0
   2671e:	bf18      	it	ne
   26720:	2301      	movne	r3, #1
   26722:	aa0e      	add	r2, sp, #56	; 0x38
   26724:	a908      	add	r1, sp, #32
   26726:	4620      	mov	r0, r4
   26728:	f7ff feeb 	bl	26502 <set_remote_addr>
	if (ret < 0) {
   2672c:	1e05      	subs	r5, r0, #0
   2672e:	db25      	blt.n	2677c <net_app_init_client+0x19c>
	if (!ctx->default_ctx ||
   26730:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26732:	b39b      	cbz	r3, 2679c <net_app_init_client+0x1bc>
	    ctx->default_ctx->remote.sa_family == AF_UNSPEC) {
   26734:	8b9b      	ldrh	r3, [r3, #28]
	if (!ctx->default_ctx ||
   26736:	b3a3      	cbz	r3, 267a2 <net_app_init_client+0x1c2>
	if (ctx->ipv6.remote.sa_family == AF_INET6) {
   26738:	8ba3      	ldrh	r3, [r4, #28]
   2673a:	2b0a      	cmp	r3, #10
   2673c:	d1a2      	bne.n	26684 <net_app_init_client+0xa4>
		ctx->ipv6.local.sa_family = AF_INET6;
   2673e:	4625      	mov	r5, r4
   26740:	f825 3f04 	strh.w	r3, [r5, #4]!
		_net_app_set_local_addr(&ctx->ipv6.local, NULL,
   26744:	88e2      	ldrh	r2, [r4, #6]
   26746:	2100      	movs	r1, #0
   26748:	4628      	mov	r0, r5
   2674a:	f000 f8a3 	bl	26894 <_net_app_set_local_addr>
		ret = _net_app_set_net_ctx(ctx, ctx->ipv6.ctx,
   2674e:	6821      	ldr	r1, [r4, #0]
   26750:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   26754:	9300      	str	r3, [sp, #0]
   26756:	2318      	movs	r3, #24
   26758:	462a      	mov	r2, r5
   2675a:	4620      	mov	r0, r4
   2675c:	f000 f886 	bl	2686c <_net_app_set_net_ctx>
		if (ret < 0) {
   26760:	1e05      	subs	r5, r0, #0
   26762:	da8f      	bge.n	26684 <net_app_init_client+0xa4>
			net_context_put(ctx->ipv6.ctx);
   26764:	6820      	ldr	r0, [r4, #0]
   26766:	f7f6 fbb3 	bl	1ced0 <net_context_put>
			ctx->ipv6.ctx = NULL;
   2676a:	2300      	movs	r3, #0
   2676c:	6023      	str	r3, [r4, #0]
   2676e:	e789      	b.n	26684 <net_app_init_client+0xa4>
		close_net_ctx(ctx);
   26770:	4620      	mov	r0, r4
   26772:	f7ff fee8 	bl	26546 <close_net_ctx>
		ret = -EINVAL;
   26776:	f06f 0515 	mvn.w	r5, #21
		goto fail;
   2677a:	e789      	b.n	26690 <net_app_init_client+0xb0>
		close_net_ctx(ctx);
   2677c:	4620      	mov	r0, r4
   2677e:	f7ff fee2 	bl	26546 <close_net_ctx>
		goto fail;
   26782:	e785      	b.n	26690 <net_app_init_client+0xb0>
		return -EINVAL;
   26784:	f06f 0515 	mvn.w	r5, #21
   26788:	e782      	b.n	26690 <net_app_init_client+0xb0>
		return -EALREADY;
   2678a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2678e:	e77f      	b.n	26690 <net_app_init_client+0xb0>
			return -EINVAL;
   26790:	f06f 0515 	mvn.w	r5, #21
   26794:	e77c      	b.n	26690 <net_app_init_client+0xb0>
			return -EPROTONOSUPPORT;
   26796:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   2679a:	e779      	b.n	26690 <net_app_init_client+0xb0>
		return -EPFNOSUPPORT;
   2679c:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   267a0:	e776      	b.n	26690 <net_app_init_client+0xb0>
   267a2:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   267a6:	e773      	b.n	26690 <net_app_init_client+0xb0>
   267a8:	0001d49f 	.word	0x0001d49f
   267ac:	00026843 	.word	0x00026843

000267b0 <net_app_connect>:
{
	struct net_context *net_ctx;
	bool started = false;
	int ret;

	if (!ctx) {
   267b0:	b1d0      	cbz	r0, 267e8 <net_app_connect+0x38>
{
   267b2:	b570      	push	{r4, r5, r6, lr}
   267b4:	b082      	sub	sp, #8
   267b6:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   267b8:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   267bc:	f012 0f01 	tst.w	r2, #1
   267c0:	d015      	beq.n	267ee <net_app_connect+0x3e>
		return -ENOENT;
	}

	if (ctx->app_type != NET_APP_CLIENT) {
   267c2:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   267c6:	2a02      	cmp	r2, #2
   267c8:	d114      	bne.n	267f4 <net_app_connect+0x44>
   267ca:	460d      	mov	r5, r1
		return -EINVAL;
	}

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   267cc:	2100      	movs	r1, #0
   267ce:	f000 f8df 	bl	26990 <_net_app_select_net_ctx>
	if (!net_ctx) {
   267d2:	b190      	cbz	r0, 267fa <net_app_connect+0x4a>
		}
	} else
#endif /* CONFIG_NET_APP_DTLS */
	{
		ret = net_context_connect(net_ctx,
					  &ctx->default_ctx->remote,
   267d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
		ret = net_context_connect(net_ctx,
   267d6:	9401      	str	r4, [sp, #4]
   267d8:	9500      	str	r5, [sp, #0]
   267da:	4b09      	ldr	r3, [pc, #36]	; (26800 <net_app_connect+0x50>)
   267dc:	2218      	movs	r2, #24
   267de:	311c      	adds	r1, #28
   267e0:	f7f6 fd4a 	bl	1d278 <net_context_connect>
		}
#endif
	}

	return ret;
}
   267e4:	b002      	add	sp, #8
   267e6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   267e8:	f06f 0015 	mvn.w	r0, #21
   267ec:	4770      	bx	lr
		return -ENOENT;
   267ee:	f06f 0001 	mvn.w	r0, #1
   267f2:	e7f7      	b.n	267e4 <net_app_connect+0x34>
		return -EINVAL;
   267f4:	f06f 0015 	mvn.w	r0, #21
   267f8:	e7f4      	b.n	267e4 <net_app_connect+0x34>
		return -EAFNOSUPPORT;
   267fa:	f06f 0069 	mvn.w	r0, #105	; 0x69
   267fe:	e7f1      	b.n	267e4 <net_app_connect+0x34>
   26800:	000265c1 	.word	0x000265c1

00026804 <select_default_ctx>:

#if defined(CONFIG_NET_APP_SERVER) || defined(CONFIG_NET_APP_CLIENT)
static void select_default_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	ctx->default_ctx = &ctx->ipv6;
   26804:	6340      	str	r0, [r0, #52]	; 0x34
   26806:	4770      	bx	lr

00026808 <_app_send>:
	struct net_app_ctx *ctx = user_data;

	ARG_UNUSED(ctx);

#if defined(CONFIG_NET_APP_CLIENT)
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   26808:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   2680c:	2802      	cmp	r0, #2
   2680e:	d000      	beq.n	26812 <_app_send+0xa>
   26810:	4770      	bx	lr
{
   26812:	b510      	push	{r4, lr}
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   26814:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   26816:	b114      	cbz	r4, 2681e <_app_send+0x16>
   26818:	4618      	mov	r0, r3
		ctx->cb.send(ctx, status, token, ctx->user_data);
   2681a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   2681c:	47a0      	blx	r4
   2681e:	bd10      	pop	{r4, pc}

00026820 <setup_ipv6_ctx>:
{
   26820:	b510      	push	{r4, lr}
   26822:	4604      	mov	r4, r0
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   26824:	4603      	mov	r3, r0
   26826:	200a      	movs	r0, #10
   26828:	f7f6 f8e6 	bl	1c9f8 <net_context_get>
	if (ret < 0) {
   2682c:	2800      	cmp	r0, #0
   2682e:	db05      	blt.n	2683c <setup_ipv6_ctx+0x1c>
	net_context_setup_pools(ctx->ipv6.ctx, ctx->tx_slab,
   26830:	6823      	ldr	r3, [r4, #0]
   26832:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   26834:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
					   net_pkt_get_slab_func_t tx_slab,
					   net_pkt_get_pool_func_t data_pool)
{
	NET_ASSERT(context);

	context->tx_slab = tx_slab;
   26836:	63d9      	str	r1, [r3, #60]	; 0x3c
	context->data_pool = data_pool;
   26838:	641a      	str	r2, [r3, #64]	; 0x40
}
   2683a:	bd10      	pop	{r4, pc}
		ctx->ipv6.ctx = NULL;
   2683c:	2300      	movs	r3, #0
   2683e:	6023      	str	r3, [r4, #0]
		return ret;
   26840:	bd10      	pop	{r4, pc}

00026842 <_net_app_received>:
	if (ctx->app_type == NET_APP_CLIENT) {
   26842:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   26846:	2802      	cmp	r0, #2
   26848:	d000      	beq.n	2684c <_net_app_received+0xa>
   2684a:	4770      	bx	lr
{
   2684c:	b538      	push	{r3, r4, r5, lr}
   2684e:	4618      	mov	r0, r3
   26850:	4614      	mov	r4, r2
		if (!pkt) {
   26852:	b121      	cbz	r1, 2685e <_net_app_received+0x1c>
		if (ctx->cb.recv) {
   26854:	6c1d      	ldr	r5, [r3, #64]	; 0x40
   26856:	b10d      	cbz	r5, 2685c <_net_app_received+0x1a>
			ctx->cb.recv(ctx, pkt, status, ctx->user_data);
   26858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   2685a:	47a8      	blx	r5
   2685c:	bd38      	pop	{r3, r4, r5, pc}
			if (ctx->cb.close) {
   2685e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   26860:	2b00      	cmp	r3, #0
   26862:	d0fb      	beq.n	2685c <_net_app_received+0x1a>
				ctx->cb.close(ctx, status, ctx->user_data);
   26864:	6f02      	ldr	r2, [r0, #112]	; 0x70
   26866:	4621      	mov	r1, r4
   26868:	4798      	blx	r3
   2686a:	bd38      	pop	{r3, r4, r5, pc}

0002686c <_net_app_set_net_ctx>:
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   2686c:	b161      	cbz	r1, 26888 <_net_app_set_net_ctx+0x1c>
{
   2686e:	b510      	push	{r4, lr}
   26870:	4614      	mov	r4, r2
   26872:	4608      	mov	r0, r1
	return context->flags & NET_CONTEXT_IN_USE;
   26874:	f891 205d 	ldrb.w	r2, [r1, #93]	; 0x5d
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   26878:	f012 0f01 	tst.w	r2, #1
   2687c:	d007      	beq.n	2688e <_net_app_set_net_ctx+0x22>
   2687e:	461a      	mov	r2, r3
   26880:	4621      	mov	r1, r4
	ret = net_context_bind(net_ctx, addr, socklen);
   26882:	f7f6 fb67 	bl	1cf54 <net_context_bind>
	return ret;
   26886:	bd10      	pop	{r4, pc}
		return -ENOENT;
   26888:	f06f 0001 	mvn.w	r0, #1
   2688c:	4770      	bx	lr
   2688e:	f06f 0001 	mvn.w	r0, #1
}
   26892:	bd10      	pop	{r4, pc}

00026894 <_net_app_set_local_addr>:
{
   26894:	b570      	push	{r4, r5, r6, lr}
   26896:	b084      	sub	sp, #16
   26898:	4604      	mov	r4, r0
	if (myaddr) {
   2689a:	b169      	cbz	r1, 268b8 <_net_app_set_local_addr+0x24>
		if (addr->sa_family == AF_INET) {
   2689c:	8800      	ldrh	r0, [r0, #0]
   2689e:	2802      	cmp	r0, #2
   268a0:	d029      	beq.n	268f6 <_net_app_set_local_addr+0x62>
		} else if (addr->sa_family == AF_INET6) {
   268a2:	280a      	cmp	r0, #10
   268a4:	d12a      	bne.n	268fc <_net_app_set_local_addr+0x68>
			net_sin6(addr)->sin6_port = htons(port);
   268a6:	0a13      	lsrs	r3, r2, #8
   268a8:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   268ac:	8062      	strh	r2, [r4, #2]
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
   268ae:	1d22      	adds	r2, r4, #4
   268b0:	f7f7 fcc3 	bl	1e23a <net_addr_pton>
}
   268b4:	b004      	add	sp, #16
   268b6:	bd70      	pop	{r4, r5, r6, pc}
	if (addr->sa_family == AF_INET6) {
   268b8:	8803      	ldrh	r3, [r0, #0]
   268ba:	2b0a      	cmp	r3, #10
   268bc:	d003      	beq.n	268c6 <_net_app_set_local_addr+0x32>
	} else if (addr->sa_family == AF_INET) {
   268be:	2b02      	cmp	r3, #2
   268c0:	d016      	beq.n	268f0 <_net_app_set_local_addr+0x5c>
	return 0;
   268c2:	2000      	movs	r0, #0
   268c4:	e7f6      	b.n	268b4 <_net_app_set_local_addr+0x20>
		net_ipaddr_copy(&net_sin6(addr)->sin6_addr,
   268c6:	f7f9 f959 	bl	1fb7c <net_ipv6_unspecified_address>
   268ca:	4601      	mov	r1, r0
   268cc:	2000      	movs	r0, #0
   268ce:	f7f5 faf9 	bl	1bec4 <net_if_ipv6_select_src_addr>
   268d2:	4603      	mov	r3, r0
   268d4:	466d      	mov	r5, sp
   268d6:	6800      	ldr	r0, [r0, #0]
   268d8:	6859      	ldr	r1, [r3, #4]
   268da:	689a      	ldr	r2, [r3, #8]
   268dc:	68db      	ldr	r3, [r3, #12]
   268de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   268e0:	466d      	mov	r5, sp
   268e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   268e4:	6060      	str	r0, [r4, #4]
   268e6:	60a1      	str	r1, [r4, #8]
   268e8:	60e2      	str	r2, [r4, #12]
   268ea:	6123      	str	r3, [r4, #16]
	return 0;
   268ec:	2000      	movs	r0, #0
   268ee:	e7e1      	b.n	268b4 <_net_app_set_local_addr+0x20>
		return -EPFNOSUPPORT;
   268f0:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   268f4:	e7de      	b.n	268b4 <_net_app_set_local_addr+0x20>
			return -EPFNOSUPPORT;
   268f6:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   268fa:	e7db      	b.n	268b4 <_net_app_set_local_addr+0x20>
			return -EAFNOSUPPORT;
   268fc:	f06f 0069 	mvn.w	r0, #105	; 0x69
   26900:	e7d8      	b.n	268b4 <_net_app_set_local_addr+0x20>

00026902 <_net_app_config_local_ctx>:
{
   26902:	b538      	push	{r3, r4, r5, lr}
   26904:	4604      	mov	r4, r0
	if (!addr) {
   26906:	b163      	cbz	r3, 26922 <_net_app_config_local_ctx+0x20>
		if (addr->sa_family == AF_INET6) {
   26908:	881b      	ldrh	r3, [r3, #0]
   2690a:	2b0a      	cmp	r3, #10
   2690c:	d015      	beq.n	2693a <_net_app_config_local_ctx+0x38>
		} else if (addr->sa_family == AF_INET) {
   2690e:	2b02      	cmp	r3, #2
   26910:	d01c      	beq.n	2694c <_net_app_config_local_ctx+0x4a>
		} else if (addr->sa_family == AF_UNSPEC) {
   26912:	b9f3      	cbnz	r3, 26952 <_net_app_config_local_ctx+0x50>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   26914:	4620      	mov	r0, r4
   26916:	f7ff ff83 	bl	26820 <setup_ipv6_ctx>
   2691a:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   2691c:	6364      	str	r4, [r4, #52]	; 0x34
}
   2691e:	4628      	mov	r0, r5
   26920:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->ipv6.local.sa_family == AF_INET6 ||
   26922:	8883      	ldrh	r3, [r0, #4]
   26924:	2b0a      	cmp	r3, #10
   26926:	d000      	beq.n	2692a <_net_app_config_local_ctx+0x28>
   26928:	b96b      	cbnz	r3, 26946 <_net_app_config_local_ctx+0x44>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   2692a:	4620      	mov	r0, r4
   2692c:	f7ff ff78 	bl	26820 <setup_ipv6_ctx>
   26930:	4605      	mov	r5, r0
		select_default_ctx(ctx);
   26932:	4620      	mov	r0, r4
   26934:	f7ff ff66 	bl	26804 <select_default_ctx>
   26938:	e7f1      	b.n	2691e <_net_app_config_local_ctx+0x1c>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   2693a:	4620      	mov	r0, r4
   2693c:	f7ff ff70 	bl	26820 <setup_ipv6_ctx>
   26940:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   26942:	6364      	str	r4, [r4, #52]	; 0x34
   26944:	e7eb      	b.n	2691e <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   26946:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   2694a:	e7e8      	b.n	2691e <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   2694c:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   26950:	e7e5      	b.n	2691e <_net_app_config_local_ctx+0x1c>
			ret = -EINVAL;
   26952:	f06f 0515 	mvn.w	r5, #21
	return ret;
   26956:	e7e2      	b.n	2691e <_net_app_config_local_ctx+0x1c>

00026958 <net_app_release>:
	if (!ctx) {
   26958:	b1a0      	cbz	r0, 26984 <net_app_release+0x2c>
{
   2695a:	b510      	push	{r4, lr}
   2695c:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   2695e:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   26962:	f013 0f01 	tst.w	r3, #1
   26966:	d010      	beq.n	2698a <net_app_release+0x32>
	if (ctx->ipv6.ctx) {
   26968:	6800      	ldr	r0, [r0, #0]
   2696a:	b118      	cbz	r0, 26974 <net_app_release+0x1c>
		net_context_put(ctx->ipv6.ctx);
   2696c:	f7f6 fab0 	bl	1ced0 <net_context_put>
		ctx->ipv6.ctx = NULL;
   26970:	2300      	movs	r3, #0
   26972:	6023      	str	r3, [r4, #0]
	ctx->is_init = false;
   26974:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   26978:	f36f 0300 	bfc	r3, #0, #1
   2697c:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	return 0;
   26980:	2000      	movs	r0, #0
   26982:	bd10      	pop	{r4, pc}
		return -EINVAL;
   26984:	f06f 0015 	mvn.w	r0, #21
   26988:	4770      	bx	lr
		return -ENOENT;
   2698a:	f06f 0001 	mvn.w	r0, #1
}
   2698e:	bd10      	pop	{r4, pc}

00026990 <_net_app_select_net_ctx>:
	if (ctx->app_type == NET_APP_CLIENT) {
   26990:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   26994:	2b02      	cmp	r3, #2
   26996:	d128      	bne.n	269ea <_net_app_select_net_ctx+0x5a>
	if (ctx->proto == IPPROTO_UDP) {
   26998:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   2699c:	2b11      	cmp	r3, #17
   2699e:	d009      	beq.n	269b4 <_net_app_select_net_ctx+0x24>
		if (!dst) {
   269a0:	b1c1      	cbz	r1, 269d4 <_net_app_select_net_ctx+0x44>
			if (dst->sa_family == AF_INET) {
   269a2:	880b      	ldrh	r3, [r1, #0]
   269a4:	2b02      	cmp	r3, #2
   269a6:	d01c      	beq.n	269e2 <_net_app_select_net_ctx+0x52>
			if (dst->sa_family == AF_INET6) {
   269a8:	2b0a      	cmp	r3, #10
   269aa:	d016      	beq.n	269da <_net_app_select_net_ctx+0x4a>
			if (dst->sa_family == AF_UNSPEC) {
   269ac:	b9db      	cbnz	r3, 269e6 <_net_app_select_net_ctx+0x56>
				return ctx->default_ctx->ctx;
   269ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
   269b0:	6818      	ldr	r0, [r3, #0]
   269b2:	4770      	bx	lr
		if (!dst) {
   269b4:	b131      	cbz	r1, 269c4 <_net_app_select_net_ctx+0x34>
			if (ctx->is_tls) {
   269b6:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   269ba:	f013 0f02 	tst.w	r3, #2
   269be:	d0f0      	beq.n	269a2 <_net_app_select_net_ctx+0x12>
				return NULL;
   269c0:	2000      	movs	r0, #0
   269c2:	4770      	bx	lr
			if (ctx->is_tls) {
   269c4:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   269c8:	f013 0f02 	tst.w	r3, #2
   269cc:	d107      	bne.n	269de <_net_app_select_net_ctx+0x4e>
				return ctx->default_ctx->ctx;
   269ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
   269d0:	6818      	ldr	r0, [r3, #0]
   269d2:	4770      	bx	lr
			return ctx->default_ctx->ctx;
   269d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   269d6:	6818      	ldr	r0, [r3, #0]
   269d8:	4770      	bx	lr
				return ctx->ipv6.ctx;
   269da:	6800      	ldr	r0, [r0, #0]
   269dc:	4770      	bx	lr
				return NULL;
   269de:	2000      	movs	r0, #0
   269e0:	4770      	bx	lr
				return NULL;
   269e2:	2000      	movs	r0, #0
   269e4:	4770      	bx	lr
	return NULL;
   269e6:	2000      	movs	r0, #0
   269e8:	4770      	bx	lr
	struct net_context *net_ctx = NULL;
   269ea:	2000      	movs	r0, #0
}
   269ec:	4770      	bx	lr

000269ee <net_app_set_cb>:
	if (!ctx) {
   269ee:	b170      	cbz	r0, 26a0e <net_app_set_cb+0x20>
{
   269f0:	b410      	push	{r4}
   269f2:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   269f4:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   269f8:	f010 0f01 	tst.w	r0, #1
   269fc:	d00a      	beq.n	26a14 <net_app_set_cb+0x26>
	ctx->cb.connect = connect_cb;
   269fe:	63e1      	str	r1, [r4, #60]	; 0x3c
	ctx->cb.recv = recv_cb;
   26a00:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->cb.send = send_cb;
   26a02:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->cb.close = close_cb;
   26a04:	9b01      	ldr	r3, [sp, #4]
   26a06:	64a3      	str	r3, [r4, #72]	; 0x48
	return 0;
   26a08:	2000      	movs	r0, #0
}
   26a0a:	bc10      	pop	{r4}
   26a0c:	4770      	bx	lr
		return -EINVAL;
   26a0e:	f06f 0015 	mvn.w	r0, #21
   26a12:	4770      	bx	lr
		return -ENOENT;
   26a14:	f06f 0001 	mvn.w	r0, #1
   26a18:	e7f7      	b.n	26a0a <net_app_set_cb+0x1c>
	...

00026a1c <net_app_send_pkt>:
		     s32_t timeout,
		     void *user_data_send)
{
	int ret;

	if (!ctx) {
   26a1c:	2800      	cmp	r0, #0
   26a1e:	d064      	beq.n	26aea <net_app_send_pkt+0xce>
{
   26a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a24:	b08a      	sub	sp, #40	; 0x28
   26a26:	460d      	mov	r5, r1
   26a28:	4616      	mov	r6, r2
   26a2a:	461f      	mov	r7, r3
   26a2c:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   26a2e:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   26a32:	f013 0f01 	tst.w	r3, #1
   26a36:	d05b      	beq.n	26af0 <net_app_send_pkt+0xd4>
	return pkt->appdatalen;
   26a38:	8e08      	ldrh	r0, [r1, #48]	; 0x30
	 * will be put back just before sending the packet. Normally the
	 * data that is sent does not contain IP header, but if the caller
	 * replies the packet directly back, the IP header could be there
	 * at this point.
	 */
	if (net_pkt_appdatalen(pkt) > 0) {
   26a3a:	b188      	cbz	r0, 26a60 <net_app_send_pkt+0x44>
		int header_len;

		header_len = net_buf_frags_len(pkt->frags) -
   26a3c:	f8d1 e008 	ldr.w	lr, [r1, #8]
   26a40:	4673      	mov	r3, lr
	size_t bytes = 0;
   26a42:	2100      	movs	r1, #0
   26a44:	e002      	b.n	26a4c <net_app_send_pkt+0x30>
		bytes += buf->len;
   26a46:	899a      	ldrh	r2, [r3, #12]
   26a48:	4411      	add	r1, r2
		buf = buf->frags;
   26a4a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   26a4c:	2b00      	cmp	r3, #0
   26a4e:	d1fa      	bne.n	26a46 <net_app_send_pkt+0x2a>
   26a50:	1a09      	subs	r1, r1, r0
			net_pkt_appdatalen(pkt);
		if (header_len > 0) {
   26a52:	2900      	cmp	r1, #0
   26a54:	dd0d      	ble.n	26a72 <net_app_send_pkt+0x56>
			net_buf_pull(pkt->frags, header_len);
   26a56:	f10e 0008 	add.w	r0, lr, #8
   26a5a:	f7f4 f9f8 	bl	1ae4e <net_buf_simple_pull>
   26a5e:	e008      	b.n	26a72 <net_app_send_pkt+0x56>
		}
	} else {
		net_pkt_set_appdatalen(pkt, net_buf_frags_len(pkt->frags));
   26a60:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   26a62:	2200      	movs	r2, #0
   26a64:	e002      	b.n	26a6c <net_app_send_pkt+0x50>
		bytes += buf->len;
   26a66:	8999      	ldrh	r1, [r3, #12]
   26a68:	440a      	add	r2, r1
		buf = buf->frags;
   26a6a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   26a6c:	2b00      	cmp	r3, #0
   26a6e:	d1fa      	bne.n	26a66 <net_app_send_pkt+0x4a>
	pkt->appdatalen = len;
   26a70:	862a      	strh	r2, [r5, #48]	; 0x30
	}

	if (ctx->proto == IPPROTO_UDP) {
   26a72:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   26a76:	2b11      	cmp	r3, #17
   26a78:	d00e      	beq.n	26a98 <net_app_send_pkt+0x7c>
				}
			}
		}
	}

	ret = ctx->send_data(pkt, dst, dst_len, _app_send, timeout,
   26a7a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
   26a7e:	9402      	str	r4, [sp, #8]
   26a80:	9b11      	ldr	r3, [sp, #68]	; 0x44
   26a82:	9301      	str	r3, [sp, #4]
   26a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
   26a86:	9300      	str	r3, [sp, #0]
   26a88:	4b21      	ldr	r3, [pc, #132]	; (26b10 <net_app_send_pkt+0xf4>)
   26a8a:	463a      	mov	r2, r7
   26a8c:	4631      	mov	r1, r6
   26a8e:	4628      	mov	r0, r5
   26a90:	47c0      	blx	r8
	if (ret < 0) {
		NET_DBG("Cannot send to peer (%d)", ret);
	}

	return ret;
}
   26a92:	b00a      	add	sp, #40	; 0x28
   26a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!dst) {
   26a98:	b1de      	cbz	r6, 26ad2 <net_app_send_pkt+0xb6>
	return pkt->family;
   26a9a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   26a9e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   26aa2:	2b02      	cmp	r3, #2
   26aa4:	d02d      	beq.n	26b02 <net_app_send_pkt+0xe6>
				if (net_pkt_family(pkt) == AF_INET6) {
   26aa6:	2b0a      	cmp	r3, #10
   26aa8:	d12e      	bne.n	26b08 <net_app_send_pkt+0xec>
					net_ipaddr_copy(
   26aaa:	af04      	add	r7, sp, #16
   26aac:	6830      	ldr	r0, [r6, #0]
   26aae:	6871      	ldr	r1, [r6, #4]
   26ab0:	68b2      	ldr	r2, [r6, #8]
   26ab2:	68f3      	ldr	r3, [r6, #12]
   26ab4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   26ab6:	6930      	ldr	r0, [r6, #16]
   26ab8:	6971      	ldr	r1, [r6, #20]
   26aba:	c703      	stmia	r7!, {r0, r1}
   26abc:	af04      	add	r7, sp, #16
   26abe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   26ac0:	61e0      	str	r0, [r4, #28]
   26ac2:	6221      	str	r1, [r4, #32]
   26ac4:	6262      	str	r2, [r4, #36]	; 0x24
   26ac6:	62a3      	str	r3, [r4, #40]	; 0x28
   26ac8:	cf03      	ldmia	r7!, {r0, r1}
   26aca:	62e0      	str	r0, [r4, #44]	; 0x2c
   26acc:	6321      	str	r1, [r4, #48]	; 0x30
					dst_len = sizeof(struct sockaddr_in6);
   26ace:	2718      	movs	r7, #24
   26ad0:	e7d3      	b.n	26a7a <net_app_send_pkt+0x5e>
   26ad2:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   26ad6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   26ada:	2b02      	cmp	r3, #2
   26adc:	d00b      	beq.n	26af6 <net_app_send_pkt+0xda>
				if (net_pkt_family(pkt) == AF_INET6) {
   26ade:	2b0a      	cmp	r3, #10
   26ae0:	d10c      	bne.n	26afc <net_app_send_pkt+0xe0>
					dst = &ctx->ipv6.remote;
   26ae2:	f104 061c 	add.w	r6, r4, #28
					dst_len = sizeof(struct sockaddr_in6);
   26ae6:	2718      	movs	r7, #24
   26ae8:	e7c7      	b.n	26a7a <net_app_send_pkt+0x5e>
		return -EINVAL;
   26aea:	f06f 0015 	mvn.w	r0, #21
   26aee:	4770      	bx	lr
		return -ENOENT;
   26af0:	f06f 0001 	mvn.w	r0, #1
   26af4:	e7cd      	b.n	26a92 <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   26af6:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26afa:	e7ca      	b.n	26a92 <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   26afc:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26b00:	e7c7      	b.n	26a92 <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   26b02:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26b06:	e7c4      	b.n	26a92 <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   26b08:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26b0c:	e7c1      	b.n	26a92 <net_app_send_pkt+0x76>
   26b0e:	bf00      	nop
   26b10:	00026809 	.word	0x00026809

00026b14 <net_app_get_net_pkt>:
}

struct net_pkt *net_app_get_net_pkt(struct net_app_ctx *ctx,
				    sa_family_t family,
				    s32_t timeout)
{
   26b14:	b510      	push	{r4, lr}
   26b16:	b086      	sub	sp, #24
	struct net_context *net_ctx;
	struct sockaddr dst = { 0 };
   26b18:	2300      	movs	r3, #0
   26b1a:	9300      	str	r3, [sp, #0]
   26b1c:	9301      	str	r3, [sp, #4]
   26b1e:	9302      	str	r3, [sp, #8]
   26b20:	9303      	str	r3, [sp, #12]
   26b22:	9304      	str	r3, [sp, #16]
   26b24:	9305      	str	r3, [sp, #20]

	if (!ctx) {
   26b26:	b198      	cbz	r0, 26b50 <net_app_get_net_pkt+0x3c>
   26b28:	4603      	mov	r3, r0
		return NULL;
	}

	if (!ctx->is_init) {
   26b2a:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   26b2e:	f010 0f01 	tst.w	r0, #1
   26b32:	d00f      	beq.n	26b54 <net_app_get_net_pkt+0x40>
   26b34:	4618      	mov	r0, r3
   26b36:	4614      	mov	r4, r2
   26b38:	460b      	mov	r3, r1
		return NULL;
	}

	dst.sa_family = family;
   26b3a:	a906      	add	r1, sp, #24
   26b3c:	f821 3d18 	strh.w	r3, [r1, #-24]!

	net_ctx = _net_app_select_net_ctx(ctx, &dst);
   26b40:	f7ff ff26 	bl	26990 <_net_app_select_net_ctx>
	if (!net_ctx) {
   26b44:	b140      	cbz	r0, 26b58 <net_app_get_net_pkt+0x44>
		return NULL;
	}

	return net_pkt_get_tx(net_ctx, timeout);
   26b46:	4621      	mov	r1, r4
   26b48:	f7f6 fe24 	bl	1d794 <net_pkt_get_tx>
}
   26b4c:	b006      	add	sp, #24
   26b4e:	bd10      	pop	{r4, pc}
		return NULL;
   26b50:	2000      	movs	r0, #0
   26b52:	e7fb      	b.n	26b4c <net_app_get_net_pkt+0x38>
		return NULL;
   26b54:	2000      	movs	r0, #0
   26b56:	e7f9      	b.n	26b4c <net_app_get_net_pkt+0x38>
		return NULL;
   26b58:	2000      	movs	r0, #0
   26b5a:	e7f7      	b.n	26b4c <net_app_get_net_pkt+0x38>

00026b5c <net_app_close>:

int net_app_close(struct net_app_ctx *ctx)
{
	struct net_context *net_ctx;

	if (!ctx) {
   26b5c:	b1c0      	cbz	r0, 26b90 <net_app_close+0x34>
{
   26b5e:	b538      	push	{r3, r4, r5, lr}
   26b60:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   26b62:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   26b66:	f013 0f01 	tst.w	r3, #1
   26b6a:	d014      	beq.n	26b96 <net_app_close+0x3a>
		ctx->tls.close_requested = true;
		return -EINPROGRESS;
	}
#endif

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   26b6c:	2100      	movs	r1, #0
   26b6e:	f7ff ff0f 	bl	26990 <_net_app_select_net_ctx>
   26b72:	4605      	mov	r5, r0

	if (ctx->cb.close) {
   26b74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   26b76:	b11b      	cbz	r3, 26b80 <net_app_close+0x24>
		ctx->cb.close(ctx, 0, ctx->user_data);
   26b78:	6f22      	ldr	r2, [r4, #112]	; 0x70
   26b7a:	2100      	movs	r1, #0
   26b7c:	4620      	mov	r0, r4
   26b7e:	4798      	blx	r3
			}
		}
	}
#endif

	if (net_ctx) {
   26b80:	b165      	cbz	r5, 26b9c <net_app_close+0x40>
		net_ctx->net_app = NULL;
   26b82:	2400      	movs	r4, #0
   26b84:	666c      	str	r4, [r5, #100]	; 0x64
		net_context_put(net_ctx);
   26b86:	4628      	mov	r0, r5
   26b88:	f7f6 f9a2 	bl	1ced0 <net_context_put>
	}

	return 0;
   26b8c:	4620      	mov	r0, r4
   26b8e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   26b90:	f06f 0015 	mvn.w	r0, #21
   26b94:	4770      	bx	lr
		return -ENOENT;
   26b96:	f06f 0001 	mvn.w	r0, #1
   26b9a:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   26b9c:	2000      	movs	r0, #0
}
   26b9e:	bd38      	pop	{r3, r4, r5, pc}

00026ba0 <_net_app_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_app_bt_setup(void)
{
   26ba0:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   26ba2:	2000      	movs	r0, #0
   26ba4:	f7df fdec 	bl	6780 <bt_enable>
	if (err < 0 && err != -EALREADY) {
   26ba8:	1e03      	subs	r3, r0, #0
   26baa:	db14      	blt.n	26bd6 <_net_app_bt_setup+0x36>
		return err;
	}

	dev = device_get_binding("net_bt");
   26bac:	4810      	ldr	r0, [pc, #64]	; (26bf0 <_net_app_bt_setup+0x50>)
   26bae:	f001 f939 	bl	27e24 <device_get_binding>
	if (!dev) {
   26bb2:	b1b8      	cbz	r0, 26be4 <_net_app_bt_setup+0x44>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   26bb4:	f7f4 fc30 	bl	1b418 <net_if_lookup_by_dev>
	if (!iface) {
   26bb8:	4604      	mov	r4, r0
   26bba:	b1b0      	cbz	r0, 26bea <_net_app_bt_setup+0x4a>
		return -EINVAL;
	}

#if defined(CONFIG_NET_APP_BT_NODE)
	bt_gatt_service_register(&ipss_svc);
   26bbc:	480d      	ldr	r0, [pc, #52]	; (26bf4 <_net_app_bt_setup+0x54>)
   26bbe:	f7e3 fcf9 	bl	a5b4 <bt_gatt_service_register>

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   26bc2:	2303      	movs	r3, #3
   26bc4:	4a0c      	ldr	r2, [pc, #48]	; (26bf8 <_net_app_bt_setup+0x58>)
   26bc6:	4621      	mov	r1, r4
   26bc8:	480c      	ldr	r0, [pc, #48]	; (26bfc <_net_app_bt_setup+0x5c>)
   26bca:	f7f7 fe6b 	bl	1e8a4 <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   26bce:	4603      	mov	r3, r0
   26bd0:	b928      	cbnz	r0, 26bde <_net_app_bt_setup+0x3e>
		return -EINVAL;
	}
#endif

	return 0;
}
   26bd2:	4618      	mov	r0, r3
   26bd4:	bd10      	pop	{r4, pc}
	if (err < 0 && err != -EALREADY) {
   26bd6:	f113 0f78 	cmn.w	r3, #120	; 0x78
   26bda:	d1fa      	bne.n	26bd2 <_net_app_bt_setup+0x32>
   26bdc:	e7e6      	b.n	26bac <_net_app_bt_setup+0xc>
		return -EINVAL;
   26bde:	f06f 0315 	mvn.w	r3, #21
   26be2:	e7f6      	b.n	26bd2 <_net_app_bt_setup+0x32>
		return -ENODEV;
   26be4:	f06f 0312 	mvn.w	r3, #18
   26be8:	e7f3      	b.n	26bd2 <_net_app_bt_setup+0x32>
		return -EINVAL;
   26bea:	f06f 0315 	mvn.w	r3, #21
   26bee:	e7f0      	b.n	26bd2 <_net_app_bt_setup+0x32>
   26bf0:	00031848 	.word	0x00031848
   26bf4:	2000c624 	.word	0x2000c624
   26bf8:	00031c70 	.word	0x00031c70
   26bfc:	61550001 	.word	0x61550001

00026c00 <shell_run>:
#include <init.h>

#define SHELL_PROMPT "shell> "

int shell_run(struct device *dev)
{
   26c00:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	shell_init(SHELL_PROMPT);
   26c02:	4802      	ldr	r0, [pc, #8]	; (26c0c <shell_run+0xc>)
   26c04:	f000 fbbe 	bl	27384 <shell_init>
	return 0;
}
   26c08:	2000      	movs	r0, #0
   26c0a:	bd08      	pop	{r3, pc}
   26c0c:	00032b70 	.word	0x00032b70

00026c10 <get_prompt>:

static shell_cmd_function_t app_cmd_handler;
static shell_prompt_function_t app_prompt_handler;

static const char *get_prompt(void)
{
   26c10:	b508      	push	{r3, lr}
	if (app_prompt_handler) {
   26c12:	4b0f      	ldr	r3, [pc, #60]	; (26c50 <get_prompt+0x40>)
   26c14:	681b      	ldr	r3, [r3, #0]
   26c16:	b123      	cbz	r3, 26c22 <get_prompt+0x12>
		const char *str;

		str = app_prompt_handler();
   26c18:	4798      	blx	r3
		if (str) {
   26c1a:	4603      	mov	r3, r0
   26c1c:	b108      	cbz	r0, 26c22 <get_prompt+0x12>

		return default_module_prompt;
	}

	return prompt;
}
   26c1e:	4618      	mov	r0, r3
   26c20:	bd08      	pop	{r3, pc}
	if (default_module != -1) {
   26c22:	4b0c      	ldr	r3, [pc, #48]	; (26c54 <get_prompt+0x44>)
   26c24:	681b      	ldr	r3, [r3, #0]
   26c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26c2a:	d00c      	beq.n	26c46 <get_prompt+0x36>
		if (__shell_cmd_start[default_module].prompt) {
   26c2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26c30:	009a      	lsls	r2, r3, #2
   26c32:	4b09      	ldr	r3, [pc, #36]	; (26c58 <get_prompt+0x48>)
   26c34:	4413      	add	r3, r2
   26c36:	689b      	ldr	r3, [r3, #8]
   26c38:	b143      	cbz	r3, 26c4c <get_prompt+0x3c>
			ret = __shell_cmd_start[default_module].prompt();
   26c3a:	4798      	blx	r3
			if (ret) {
   26c3c:	4603      	mov	r3, r0
   26c3e:	2800      	cmp	r0, #0
   26c40:	d1ed      	bne.n	26c1e <get_prompt+0xe>
		return default_module_prompt;
   26c42:	4b06      	ldr	r3, [pc, #24]	; (26c5c <get_prompt+0x4c>)
   26c44:	e7eb      	b.n	26c1e <get_prompt+0xe>
	return prompt;
   26c46:	4b06      	ldr	r3, [pc, #24]	; (26c60 <get_prompt+0x50>)
   26c48:	681b      	ldr	r3, [r3, #0]
   26c4a:	e7e8      	b.n	26c1e <get_prompt+0xe>
		return default_module_prompt;
   26c4c:	4b03      	ldr	r3, [pc, #12]	; (26c5c <get_prompt+0x4c>)
   26c4e:	e7e6      	b.n	26c1e <get_prompt+0xe>
   26c50:	20002578 	.word	0x20002578
   26c54:	2000c630 	.word	0x2000c630
   26c58:	2000d0f4 	.word	0x2000d0f4
   26c5c:	20002728 	.word	0x20002728
   26c60:	20002740 	.word	0x20002740

00026c64 <exit_module>:
	return set_default_module(argv[1]);
}

static int exit_module(int argc, char *argv[])
{
	if (argc == 1) {
   26c64:	2801      	cmp	r0, #1
   26c66:	d001      	beq.n	26c6c <exit_module+0x8>
		default_module = -1;
	}

	return 0;
}
   26c68:	2000      	movs	r0, #0
   26c6a:	4770      	bx	lr
		default_module = -1;
   26c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26c70:	4b01      	ldr	r3, [pc, #4]	; (26c78 <exit_module+0x14>)
   26c72:	601a      	str	r2, [r3, #0]
   26c74:	e7f8      	b.n	26c68 <exit_module+0x4>
   26c76:	bf00      	nop
   26c78:	2000c630 	.word	0x2000c630

00026c7c <print_module_commands>:
{
   26c7c:	b538      	push	{r3, r4, r5, lr}
   26c7e:	4605      	mov	r5, r0
	printk("help\n");
   26c80:	480a      	ldr	r0, [pc, #40]	; (26cac <print_module_commands+0x30>)
   26c82:	f7dc f999 	bl	2fb8 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26c86:	2400      	movs	r4, #0
   26c88:	e003      	b.n	26c92 <print_module_commands+0x16>
		printk("%s\n", shell_module->commands[i].cmd_name);
   26c8a:	4809      	ldr	r0, [pc, #36]	; (26cb0 <print_module_commands+0x34>)
   26c8c:	f7dc f994 	bl	2fb8 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26c90:	3401      	adds	r4, #1
   26c92:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26c96:	009a      	lsls	r2, r3, #2
   26c98:	4b06      	ldr	r3, [pc, #24]	; (26cb4 <print_module_commands+0x38>)
   26c9a:	4413      	add	r3, r2
   26c9c:	6859      	ldr	r1, [r3, #4]
   26c9e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26ca2:	0093      	lsls	r3, r2, #2
   26ca4:	58c9      	ldr	r1, [r1, r3]
   26ca6:	2900      	cmp	r1, #0
   26ca8:	d1ef      	bne.n	26c8a <print_module_commands+0xe>
}
   26caa:	bd38      	pop	{r3, r4, r5, pc}
   26cac:	00032c2c 	.word	0x00032c2c
   26cb0:	00031e48 	.word	0x00031e48
   26cb4:	2000d0f4 	.word	0x2000d0f4

00026cb8 <line2argv>:
{
   26cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26cba:	4604      	mov	r4, r0
   26cbc:	460e      	mov	r6, r1
   26cbe:	4617      	mov	r7, r2
	if (!strlen(str)) {
   26cc0:	f7d9 fd1e 	bl	700 <strlen>
   26cc4:	b918      	cbnz	r0, 26cce <line2argv+0x16>
   26cc6:	4605      	mov	r5, r0
}
   26cc8:	4628      	mov	r0, r5
   26cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		str++;
   26ccc:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   26cce:	7823      	ldrb	r3, [r4, #0]
   26cd0:	2b20      	cmp	r3, #32
   26cd2:	d0fb      	beq.n	26ccc <line2argv+0x14>
	if (!*str) {
   26cd4:	b30b      	cbz	r3, 26d1a <line2argv+0x62>
	argv[argc++] = str;
   26cd6:	6034      	str	r4, [r6, #0]
   26cd8:	2501      	movs	r5, #1
	while ((str = strchr(str, ' '))) {
   26cda:	e00a      	b.n	26cf2 <line2argv+0x3a>
			str++;
   26cdc:	3401      	adds	r4, #1
		while (*str && *str == ' ') {
   26cde:	7823      	ldrb	r3, [r4, #0]
   26ce0:	2b20      	cmp	r3, #32
   26ce2:	d0fb      	beq.n	26cdc <line2argv+0x24>
		if (!*str) {
   26ce4:	b1ab      	cbz	r3, 26d12 <line2argv+0x5a>
		argv[argc++] = str;
   26ce6:	1c6b      	adds	r3, r5, #1
   26ce8:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
		if (argc == size) {
   26cec:	42bb      	cmp	r3, r7
   26cee:	d00a      	beq.n	26d06 <line2argv+0x4e>
		argv[argc++] = str;
   26cf0:	461d      	mov	r5, r3
	while ((str = strchr(str, ' '))) {
   26cf2:	2120      	movs	r1, #32
   26cf4:	4620      	mov	r0, r4
   26cf6:	f003 ff07 	bl	2ab08 <strchr>
   26cfa:	4603      	mov	r3, r0
   26cfc:	b148      	cbz	r0, 26d12 <line2argv+0x5a>
		*str++ = '\0';
   26cfe:	1c5c      	adds	r4, r3, #1
   26d00:	2200      	movs	r2, #0
   26d02:	701a      	strb	r2, [r3, #0]
		while (*str && *str == ' ') {
   26d04:	e7eb      	b.n	26cde <line2argv+0x26>
			printk("Too many parameters (max %zu)\n", size - 1);
   26d06:	1e79      	subs	r1, r7, #1
   26d08:	4805      	ldr	r0, [pc, #20]	; (26d20 <line2argv+0x68>)
   26d0a:	f7dc f955 	bl	2fb8 <printk>
			return 0;
   26d0e:	2500      	movs	r5, #0
   26d10:	e7da      	b.n	26cc8 <line2argv+0x10>
	argv[argc] = NULL;
   26d12:	2300      	movs	r3, #0
   26d14:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	return argc;
   26d18:	e7d6      	b.n	26cc8 <line2argv+0x10>
		return 0;
   26d1a:	2500      	movs	r5, #0
   26d1c:	e7d4      	b.n	26cc8 <line2argv+0x10>
   26d1e:	bf00      	nop
   26d20:	00032c0c 	.word	0x00032c0c

00026d24 <get_destination_module>:
{
   26d24:	b538      	push	{r3, r4, r5, lr}
   26d26:	4605      	mov	r5, r0
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26d28:	2400      	movs	r4, #0
   26d2a:	4a0c      	ldr	r2, [pc, #48]	; (26d5c <get_destination_module+0x38>)
   26d2c:	4b0c      	ldr	r3, [pc, #48]	; (26d60 <get_destination_module+0x3c>)
   26d2e:	1a9b      	subs	r3, r3, r2
   26d30:	109b      	asrs	r3, r3, #2
   26d32:	4a0c      	ldr	r2, [pc, #48]	; (26d64 <get_destination_module+0x40>)
   26d34:	fb02 f303 	mul.w	r3, r2, r3
   26d38:	429c      	cmp	r4, r3
   26d3a:	da0b      	bge.n	26d54 <get_destination_module+0x30>
		if (!strncmp(module_str,
   26d3c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26d40:	0093      	lsls	r3, r2, #2
   26d42:	2214      	movs	r2, #20
   26d44:	4905      	ldr	r1, [pc, #20]	; (26d5c <get_destination_module+0x38>)
   26d46:	58c9      	ldr	r1, [r1, r3]
   26d48:	4628      	mov	r0, r5
   26d4a:	f003 ffaf 	bl	2acac <strncmp>
   26d4e:	b118      	cbz	r0, 26d58 <get_destination_module+0x34>
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26d50:	3401      	adds	r4, #1
   26d52:	e7ea      	b.n	26d2a <get_destination_module+0x6>
	return -1;
   26d54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   26d58:	4620      	mov	r0, r4
   26d5a:	bd38      	pop	{r3, r4, r5, pc}
   26d5c:	2000d0f4 	.word	0x2000d0f4
   26d60:	2000d100 	.word	0x2000d100
   26d64:	aaaaaaab 	.word	0xaaaaaaab

00026d68 <set_default_module>:
{
   26d68:	b538      	push	{r3, r4, r5, lr}
   26d6a:	4604      	mov	r4, r0
	if (strlen(name) > MODULE_NAME_MAX_LEN) {
   26d6c:	f7d9 fcc8 	bl	700 <strlen>
   26d70:	2814      	cmp	r0, #20
   26d72:	d813      	bhi.n	26d9c <set_default_module+0x34>
	module = get_destination_module(name);
   26d74:	4620      	mov	r0, r4
   26d76:	f7ff ffd5 	bl	26d24 <get_destination_module>
	if (module == -1) {
   26d7a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26d7e:	d014      	beq.n	26daa <set_default_module+0x42>
	default_module = module;
   26d80:	4b0d      	ldr	r3, [pc, #52]	; (26db8 <set_default_module+0x50>)
   26d82:	6018      	str	r0, [r3, #0]
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
   26d84:	4d0d      	ldr	r5, [pc, #52]	; (26dbc <set_default_module+0x54>)
   26d86:	2214      	movs	r2, #20
   26d88:	4621      	mov	r1, r4
   26d8a:	4628      	mov	r0, r5
   26d8c:	f003 ffe0 	bl	2ad50 <strncpy>
	strcat(default_module_prompt, "> ");
   26d90:	490b      	ldr	r1, [pc, #44]	; (26dc0 <set_default_module+0x58>)
   26d92:	4628      	mov	r0, r5
   26d94:	f003 fe98 	bl	2aac8 <strcat>
	return 0;
   26d98:	2000      	movs	r0, #0
}
   26d9a:	bd38      	pop	{r3, r4, r5, pc}
		printk("Module name %s is too long, default is not changed\n",
   26d9c:	4621      	mov	r1, r4
   26d9e:	4809      	ldr	r0, [pc, #36]	; (26dc4 <set_default_module+0x5c>)
   26da0:	f7dc f90a 	bl	2fb8 <printk>
		return -EINVAL;
   26da4:	f06f 0015 	mvn.w	r0, #21
   26da8:	bd38      	pop	{r3, r4, r5, pc}
		printk("Illegal module %s, default is not changed\n", name);
   26daa:	4621      	mov	r1, r4
   26dac:	4806      	ldr	r0, [pc, #24]	; (26dc8 <set_default_module+0x60>)
   26dae:	f7dc f903 	bl	2fb8 <printk>
		return -EINVAL;
   26db2:	f06f 0015 	mvn.w	r0, #21
   26db6:	bd38      	pop	{r3, r4, r5, pc}
   26db8:	2000c630 	.word	0x2000c630
   26dbc:	20002728 	.word	0x20002728
   26dc0:	00032c94 	.word	0x00032c94
   26dc4:	00032c34 	.word	0x00032c34
   26dc8:	00032c68 	.word	0x00032c68

00026dcc <select_module>:
{
   26dcc:	b508      	push	{r3, lr}
	if (argc == 1) {
   26dce:	2801      	cmp	r0, #1
   26dd0:	d003      	beq.n	26dda <select_module+0xe>
	return set_default_module(argv[1]);
   26dd2:	6848      	ldr	r0, [r1, #4]
   26dd4:	f7ff ffc8 	bl	26d68 <set_default_module>
}
   26dd8:	bd08      	pop	{r3, pc}
		default_module = -1;
   26dda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26dde:	4b02      	ldr	r3, [pc, #8]	; (26de8 <select_module+0x1c>)
   26de0:	601a      	str	r2, [r3, #0]
		return 0;
   26de2:	2000      	movs	r0, #0
   26de4:	bd08      	pop	{r3, pc}
   26de6:	bf00      	nop
   26de8:	2000c630 	.word	0x2000c630

00026dec <get_command_and_module>:
{
   26dec:	b538      	push	{r3, r4, r5, lr}
   26dee:	4604      	mov	r4, r0
	*module = -1;
   26df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26df4:	600b      	str	r3, [r1, #0]
	if (!argv[0]) {
   26df6:	6800      	ldr	r0, [r0, #0]
   26df8:	b140      	cbz	r0, 26e0c <get_command_and_module+0x20>
   26dfa:	460d      	mov	r5, r1
	if (default_module == -1) {
   26dfc:	4b12      	ldr	r3, [pc, #72]	; (26e48 <get_command_and_module+0x5c>)
   26dfe:	681b      	ldr	r3, [r3, #0]
   26e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26e04:	d007      	beq.n	26e16 <get_command_and_module+0x2a>
	*module = default_module;
   26e06:	600b      	str	r3, [r1, #0]
	return argv[0];
   26e08:	6820      	ldr	r0, [r4, #0]
}
   26e0a:	bd38      	pop	{r3, r4, r5, pc}
		printk("Unrecognized command\n");
   26e0c:	480f      	ldr	r0, [pc, #60]	; (26e4c <get_command_and_module+0x60>)
   26e0e:	f7dc f8d3 	bl	2fb8 <printk>
		return NULL;
   26e12:	2000      	movs	r0, #0
   26e14:	bd38      	pop	{r3, r4, r5, pc}
		if (!argv[1] || argv[1][0] == '\0') {
   26e16:	6863      	ldr	r3, [r4, #4]
   26e18:	b14b      	cbz	r3, 26e2e <get_command_and_module+0x42>
   26e1a:	781b      	ldrb	r3, [r3, #0]
   26e1c:	b13b      	cbz	r3, 26e2e <get_command_and_module+0x42>
		*module = get_destination_module(argv[0]);
   26e1e:	f7ff ff81 	bl	26d24 <get_destination_module>
   26e22:	6028      	str	r0, [r5, #0]
		if (*module == -1) {
   26e24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26e28:	d007      	beq.n	26e3a <get_command_and_module+0x4e>
		return argv[1];
   26e2a:	6860      	ldr	r0, [r4, #4]
   26e2c:	bd38      	pop	{r3, r4, r5, pc}
			printk("Unrecognized command: %s\n", argv[0]);
   26e2e:	4601      	mov	r1, r0
   26e30:	4807      	ldr	r0, [pc, #28]	; (26e50 <get_command_and_module+0x64>)
   26e32:	f7dc f8c1 	bl	2fb8 <printk>
			return NULL;
   26e36:	2000      	movs	r0, #0
   26e38:	bd38      	pop	{r3, r4, r5, pc}
			printk("Illegal module %s\n", argv[0]);
   26e3a:	6821      	ldr	r1, [r4, #0]
   26e3c:	4805      	ldr	r0, [pc, #20]	; (26e54 <get_command_and_module+0x68>)
   26e3e:	f7dc f8bb 	bl	2fb8 <printk>
			return NULL;
   26e42:	2000      	movs	r0, #0
   26e44:	bd38      	pop	{r3, r4, r5, pc}
   26e46:	bf00      	nop
   26e48:	2000c630 	.word	0x2000c630
   26e4c:	00032bc4 	.word	0x00032bc4
   26e50:	00032bdc 	.word	0x00032bdc
   26e54:	00032bf8 	.word	0x00032bf8

00026e58 <get_cb>:

static shell_cmd_function_t get_cb(int *argc, char *argv[], int *module)
{
   26e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const char *first_string = argv[0];
   26e5a:	680c      	ldr	r4, [r1, #0]
	const struct shell_module *shell_module;
	const char *command;
	int i;

	if (!first_string || first_string[0] == '\0') {
   26e5c:	b15c      	cbz	r4, 26e76 <get_cb+0x1e>
   26e5e:	4606      	mov	r6, r0
   26e60:	460d      	mov	r5, r1
   26e62:	4617      	mov	r7, r2
   26e64:	7823      	ldrb	r3, [r4, #0]
   26e66:	b133      	cbz	r3, 26e76 <get_cb+0x1e>
		printk("Illegal parameter\n");
		return NULL;
	}

	if (!strcmp(first_string, "help")) {
   26e68:	4929      	ldr	r1, [pc, #164]	; (26f10 <get_cb+0xb8>)
   26e6a:	4620      	mov	r0, r4
   26e6c:	f7d9 facc 	bl	408 <strcmp>
   26e70:	b930      	cbnz	r0, 26e80 <get_cb+0x28>
		return show_help;
   26e72:	4828      	ldr	r0, [pc, #160]	; (26f14 <get_cb+0xbc>)
   26e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printk("Illegal parameter\n");
   26e76:	4828      	ldr	r0, [pc, #160]	; (26f18 <get_cb+0xc0>)
   26e78:	f7dc f89e 	bl	2fb8 <printk>
		return NULL;
   26e7c:	2000      	movs	r0, #0
   26e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "select")) {
   26e80:	4926      	ldr	r1, [pc, #152]	; (26f1c <get_cb+0xc4>)
   26e82:	4620      	mov	r0, r4
   26e84:	f7d9 fac0 	bl	408 <strcmp>
   26e88:	b908      	cbnz	r0, 26e8e <get_cb+0x36>
		return select_module;
   26e8a:	4825      	ldr	r0, [pc, #148]	; (26f20 <get_cb+0xc8>)
   26e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "exit")) {
   26e8e:	4925      	ldr	r1, [pc, #148]	; (26f24 <get_cb+0xcc>)
   26e90:	4620      	mov	r0, r4
   26e92:	f7d9 fab9 	bl	408 <strcmp>
   26e96:	2800      	cmp	r0, #0
   26e98:	d034      	beq.n	26f04 <get_cb+0xac>
		return exit_module;
	}

	if ((*argc == 1) && (default_module == -1)) {
   26e9a:	6833      	ldr	r3, [r6, #0]
   26e9c:	2b01      	cmp	r3, #1
   26e9e:	d01c      	beq.n	26eda <get_cb+0x82>
		printk("Missing parameter\n");
		return NULL;
	}

	command = get_command_and_module(argv, module);
   26ea0:	4639      	mov	r1, r7
   26ea2:	4628      	mov	r0, r5
   26ea4:	f7ff ffa2 	bl	26dec <get_command_and_module>
   26ea8:	4606      	mov	r6, r0
	if ((*module == -1) || (command == NULL)) {
   26eaa:	683d      	ldr	r5, [r7, #0]
   26eac:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26eb0:	d02a      	beq.n	26f08 <get_cb+0xb0>
   26eb2:	b358      	cbz	r0, 26f0c <get_cb+0xb4>
   26eb4:	2400      	movs	r4, #0
		return NULL;
	}

	shell_module = &__shell_cmd_start[*module];
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26eb6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26eba:	009a      	lsls	r2, r3, #2
   26ebc:	4b1a      	ldr	r3, [pc, #104]	; (26f28 <get_cb+0xd0>)
   26ebe:	4413      	add	r3, r2
   26ec0:	6859      	ldr	r1, [r3, #4]
   26ec2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26ec6:	0093      	lsls	r3, r2, #2
   26ec8:	461f      	mov	r7, r3
   26eca:	58c9      	ldr	r1, [r1, r3]
   26ecc:	b1c1      	cbz	r1, 26f00 <get_cb+0xa8>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   26ece:	4630      	mov	r0, r6
   26ed0:	f7d9 fa9a 	bl	408 <strcmp>
   26ed4:	b158      	cbz	r0, 26eee <get_cb+0x96>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26ed6:	3401      	adds	r4, #1
   26ed8:	e7ed      	b.n	26eb6 <get_cb+0x5e>
	if ((*argc == 1) && (default_module == -1)) {
   26eda:	4b14      	ldr	r3, [pc, #80]	; (26f2c <get_cb+0xd4>)
   26edc:	681b      	ldr	r3, [r3, #0]
   26ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26ee2:	d1dd      	bne.n	26ea0 <get_cb+0x48>
		printk("Missing parameter\n");
   26ee4:	4812      	ldr	r0, [pc, #72]	; (26f30 <get_cb+0xd8>)
   26ee6:	f7dc f867 	bl	2fb8 <printk>
		return NULL;
   26eea:	2000      	movs	r0, #0
   26eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return shell_module->commands[i].cb;
   26eee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26ef2:	00aa      	lsls	r2, r5, #2
   26ef4:	4b0c      	ldr	r3, [pc, #48]	; (26f28 <get_cb+0xd0>)
   26ef6:	4413      	add	r3, r2
   26ef8:	685b      	ldr	r3, [r3, #4]
   26efa:	441f      	add	r7, r3
   26efc:	6878      	ldr	r0, [r7, #4]
   26efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	return NULL;
   26f00:	2000      	movs	r0, #0
   26f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return exit_module;
   26f04:	480b      	ldr	r0, [pc, #44]	; (26f34 <get_cb+0xdc>)
   26f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   26f08:	2000      	movs	r0, #0
   26f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26f0c:	2000      	movs	r0, #0
}
   26f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26f10:	00032b98 	.word	0x00032b98
   26f14:	00026fd9 	.word	0x00026fd9
   26f18:	00032b84 	.word	0x00032b84
   26f1c:	00032ba0 	.word	0x00032ba0
   26f20:	00026dcd 	.word	0x00026dcd
   26f24:	00032ba8 	.word	0x00032ba8
   26f28:	2000d0f4 	.word	0x2000d0f4
   26f2c:	2000c630 	.word	0x2000c630
   26f30:	00032bb0 	.word	0x00032bb0
   26f34:	00026c65 	.word	0x00026c65

00026f38 <show_cmd_help>:
{
   26f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26f3c:	b083      	sub	sp, #12
   26f3e:	4607      	mov	r7, r0
	int module = -1;
   26f40:	a902      	add	r1, sp, #8
   26f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26f46:	f841 3d04 	str.w	r3, [r1, #-4]!
	command = get_command_and_module(argv, &module);
   26f4a:	f7ff ff4f 	bl	26dec <get_command_and_module>
	if ((module == -1) || (command == NULL)) {
   26f4e:	9d01      	ldr	r5, [sp, #4]
   26f50:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26f54:	d031      	beq.n	26fba <show_cmd_help+0x82>
   26f56:	4606      	mov	r6, r0
   26f58:	b390      	cbz	r0, 26fc0 <show_cmd_help+0x88>
   26f5a:	2400      	movs	r4, #0
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26f5c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26f60:	009a      	lsls	r2, r3, #2
   26f62:	4b19      	ldr	r3, [pc, #100]	; (26fc8 <show_cmd_help+0x90>)
   26f64:	4413      	add	r3, r2
   26f66:	6859      	ldr	r1, [r3, #4]
   26f68:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26f6c:	0093      	lsls	r3, r2, #2
   26f6e:	4698      	mov	r8, r3
   26f70:	58c9      	ldr	r1, [r1, r3]
   26f72:	b1c1      	cbz	r1, 26fa6 <show_cmd_help+0x6e>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   26f74:	4630      	mov	r0, r6
   26f76:	f7d9 fa47 	bl	408 <strcmp>
   26f7a:	4681      	mov	r9, r0
   26f7c:	b108      	cbz	r0, 26f82 <show_cmd_help+0x4a>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26f7e:	3401      	adds	r4, #1
   26f80:	e7ec      	b.n	26f5c <show_cmd_help+0x24>
			       shell_module->commands[i].cmd_name,
   26f82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26f86:	00aa      	lsls	r2, r5, #2
   26f88:	4b0f      	ldr	r3, [pc, #60]	; (26fc8 <show_cmd_help+0x90>)
   26f8a:	4413      	add	r3, r2
   26f8c:	685b      	ldr	r3, [r3, #4]
   26f8e:	eb03 0208 	add.w	r2, r3, r8
			printk("%s %s\n",
   26f92:	f853 1008 	ldr.w	r1, [r3, r8]
			       shell_module->commands[i].help ?
   26f96:	6892      	ldr	r2, [r2, #8]
			printk("%s %s\n",
   26f98:	b11a      	cbz	r2, 26fa2 <show_cmd_help+0x6a>
   26f9a:	480c      	ldr	r0, [pc, #48]	; (26fcc <show_cmd_help+0x94>)
   26f9c:	f7dc f80c 	bl	2fb8 <printk>
			return 0;
   26fa0:	e007      	b.n	26fb2 <show_cmd_help+0x7a>
			printk("%s %s\n",
   26fa2:	4a0b      	ldr	r2, [pc, #44]	; (26fd0 <show_cmd_help+0x98>)
   26fa4:	e7f9      	b.n	26f9a <show_cmd_help+0x62>
	printk("Unrecognized command: %s\n", argv[0]);
   26fa6:	6839      	ldr	r1, [r7, #0]
   26fa8:	480a      	ldr	r0, [pc, #40]	; (26fd4 <show_cmd_help+0x9c>)
   26faa:	f7dc f805 	bl	2fb8 <printk>
	return -EINVAL;
   26fae:	f06f 0915 	mvn.w	r9, #21
}
   26fb2:	4648      	mov	r0, r9
   26fb4:	b003      	add	sp, #12
   26fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 0;
   26fba:	f04f 0900 	mov.w	r9, #0
   26fbe:	e7f8      	b.n	26fb2 <show_cmd_help+0x7a>
   26fc0:	f04f 0900 	mov.w	r9, #0
   26fc4:	e7f5      	b.n	26fb2 <show_cmd_help+0x7a>
   26fc6:	bf00      	nop
   26fc8:	2000d0f4 	.word	0x2000d0f4
   26fcc:	00032cc4 	.word	0x00032cc4
   26fd0:	0002f114 	.word	0x0002f114
   26fd4:	00032bdc 	.word	0x00032bdc

00026fd8 <show_help>:
{
   26fd8:	b510      	push	{r4, lr}
   26fda:	460c      	mov	r4, r1
	if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   26fdc:	2802      	cmp	r0, #2
   26fde:	dc12      	bgt.n	27006 <show_help+0x2e>
   26fe0:	4b23      	ldr	r3, [pc, #140]	; (27070 <show_help+0x98>)
   26fe2:	681b      	ldr	r3, [r3, #0]
   26fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26fe8:	d001      	beq.n	26fee <show_help+0x16>
   26fea:	2802      	cmp	r0, #2
   26fec:	d00b      	beq.n	27006 <show_help+0x2e>
	if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   26fee:	2802      	cmp	r0, #2
   26ff0:	d00d      	beq.n	2700e <show_help+0x36>
   26ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26ff6:	d001      	beq.n	26ffc <show_help+0x24>
   26ff8:	2801      	cmp	r0, #1
   26ffa:	d008      	beq.n	2700e <show_help+0x36>
		printk("Available modules:\n");
   26ffc:	481d      	ldr	r0, [pc, #116]	; (27074 <show_help+0x9c>)
   26ffe:	f7db ffdb 	bl	2fb8 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   27002:	2400      	movs	r4, #0
   27004:	e025      	b.n	27052 <show_help+0x7a>
		return show_cmd_help(&argv[1]);
   27006:	1d20      	adds	r0, r4, #4
   27008:	f7ff ff96 	bl	26f38 <show_cmd_help>
   2700c:	bd10      	pop	{r4, pc}
		if (default_module == -1) {
   2700e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27012:	d007      	beq.n	27024 <show_help+0x4c>
		print_module_commands(module);
   27014:	4618      	mov	r0, r3
   27016:	f7ff fe31 	bl	26c7c <print_module_commands>
		printk("\nEnter 'exit' to leave current module.\n");
   2701a:	4817      	ldr	r0, [pc, #92]	; (27078 <show_help+0xa0>)
   2701c:	f7db ffcc 	bl	2fb8 <printk>
	return 0;
   27020:	2000      	movs	r0, #0
		printk("\nEnter 'exit' to leave current module.\n");
   27022:	bd10      	pop	{r4, pc}
			module = get_destination_module(argv[1]);
   27024:	6860      	ldr	r0, [r4, #4]
   27026:	f7ff fe7d 	bl	26d24 <get_destination_module>
   2702a:	4603      	mov	r3, r0
			if (module == -1) {
   2702c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27030:	d1f0      	bne.n	27014 <show_help+0x3c>
				printk("Illegal module %s\n", argv[1]);
   27032:	6861      	ldr	r1, [r4, #4]
   27034:	4811      	ldr	r0, [pc, #68]	; (2707c <show_help+0xa4>)
   27036:	f7db ffbf 	bl	2fb8 <printk>
				return -EINVAL;
   2703a:	f06f 0015 	mvn.w	r0, #21
   2703e:	bd10      	pop	{r4, pc}
			printk("%s\n", __shell_cmd_start[module].module_name);
   27040:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   27044:	0093      	lsls	r3, r2, #2
   27046:	4a0e      	ldr	r2, [pc, #56]	; (27080 <show_help+0xa8>)
   27048:	58d1      	ldr	r1, [r2, r3]
   2704a:	480e      	ldr	r0, [pc, #56]	; (27084 <show_help+0xac>)
   2704c:	f7db ffb4 	bl	2fb8 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   27050:	3401      	adds	r4, #1
   27052:	4a0b      	ldr	r2, [pc, #44]	; (27080 <show_help+0xa8>)
   27054:	4b0c      	ldr	r3, [pc, #48]	; (27088 <show_help+0xb0>)
   27056:	1a9b      	subs	r3, r3, r2
   27058:	109b      	asrs	r3, r3, #2
   2705a:	4a0c      	ldr	r2, [pc, #48]	; (2708c <show_help+0xb4>)
   2705c:	fb02 f303 	mul.w	r3, r2, r3
   27060:	429c      	cmp	r4, r3
   27062:	dbed      	blt.n	27040 <show_help+0x68>
		printk("\nTo select a module, enter 'select <module name>'.\n");
   27064:	480a      	ldr	r0, [pc, #40]	; (27090 <show_help+0xb8>)
   27066:	f7db ffa7 	bl	2fb8 <printk>
	return 0;
   2706a:	2000      	movs	r0, #0
}
   2706c:	bd10      	pop	{r4, pc}
   2706e:	bf00      	nop
   27070:	2000c630 	.word	0x2000c630
   27074:	00032cf4 	.word	0x00032cf4
   27078:	00032ccc 	.word	0x00032ccc
   2707c:	00032bf8 	.word	0x00032bf8
   27080:	2000d0f4 	.word	0x2000d0f4
   27084:	00031e48 	.word	0x00031e48
   27088:	2000d100 	.word	0x2000d100
   2708c:	aaaaaaab 	.word	0xaaaaaaab
   27090:	00032d08 	.word	0x00032d08

00027094 <get_command_to_complete>:
		k_fifo_put(&avail_queue, cmd);
	}
}

static int get_command_to_complete(char *str, char **command_prefix)
{
   27094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27098:	b086      	sub	sp, #24
   2709a:	4604      	mov	r4, r0
   2709c:	4688      	mov	r8, r1
	char dest_str[MODULE_NAME_MAX_LEN];
	int dest = -1;
	char *start;

	/* remove ' ' at the beginning of the line */
	while (*str && *str == ' ') {
   2709e:	e000      	b.n	270a2 <get_command_to_complete+0xe>
		str++;
   270a0:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   270a2:	7823      	ldrb	r3, [r4, #0]
   270a4:	2b20      	cmp	r3, #32
   270a6:	d0fb      	beq.n	270a0 <get_command_to_complete+0xc>
	}

	if (!*str) {
   270a8:	b3a3      	cbz	r3, 27114 <get_command_to_complete+0x80>
		return -1;
	}

	start = str;

	if (default_module != -1) {
   270aa:	4b1f      	ldr	r3, [pc, #124]	; (27128 <get_command_to_complete+0x94>)
   270ac:	681d      	ldr	r5, [r3, #0]
   270ae:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   270b2:	d001      	beq.n	270b8 <get_command_to_complete+0x24>
		dest = default_module;
		/* caller function already checks str len and put '\0' */
		*command_prefix = str;
   270b4:	f8c8 4000 	str.w	r4, [r8]

	/*
	 * In case of a default module: only one parameter is possible.
	 * Otherwise, only two parameters are possibles.
	 */
	str = strchr(str, ' ');
   270b8:	2120      	movs	r1, #32
   270ba:	4620      	mov	r0, r4
   270bc:	f003 fd24 	bl	2ab08 <strchr>
   270c0:	4606      	mov	r6, r0
	if (default_module != -1) {
   270c2:	4b19      	ldr	r3, [pc, #100]	; (27128 <get_command_to_complete+0x94>)
   270c4:	681f      	ldr	r7, [r3, #0]
   270c6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   270ca:	d004      	beq.n	270d6 <get_command_to_complete+0x42>
		return (str == NULL) ? dest : -1;
   270cc:	bb28      	cbnz	r0, 2711a <get_command_to_complete+0x86>
	*command_prefix = str;
	str = strchr(str, ' ');

	/* only two parameters are possibles in case of no default module */
	return (str == NULL) ? dest : -1;
}
   270ce:	4628      	mov	r0, r5
   270d0:	b006      	add	sp, #24
   270d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (str == NULL) {
   270d6:	b318      	cbz	r0, 27120 <get_command_to_complete+0x8c>
	if ((str - start + 1) >= MODULE_NAME_MAX_LEN) {
   270d8:	1b05      	subs	r5, r0, r4
   270da:	1c6a      	adds	r2, r5, #1
   270dc:	2a13      	cmp	r2, #19
   270de:	dc21      	bgt.n	27124 <get_command_to_complete+0x90>
	strncpy(dest_str, start, (str - start + 1));
   270e0:	4621      	mov	r1, r4
   270e2:	a801      	add	r0, sp, #4
   270e4:	f003 fe34 	bl	2ad50 <strncpy>
	dest_str[str - start] = '\0';
   270e8:	ab06      	add	r3, sp, #24
   270ea:	441d      	add	r5, r3
   270ec:	2300      	movs	r3, #0
   270ee:	f805 3c14 	strb.w	r3, [r5, #-20]
	dest = get_destination_module(dest_str);
   270f2:	a801      	add	r0, sp, #4
   270f4:	f7ff fe16 	bl	26d24 <get_destination_module>
   270f8:	4605      	mov	r5, r0
	if (dest == -1) {
   270fa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   270fe:	d0e6      	beq.n	270ce <get_command_to_complete+0x3a>
	str++;
   27100:	1c70      	adds	r0, r6, #1
	*command_prefix = str;
   27102:	f8c8 0000 	str.w	r0, [r8]
	str = strchr(str, ' ');
   27106:	2120      	movs	r1, #32
   27108:	f003 fcfe 	bl	2ab08 <strchr>
	return (str == NULL) ? dest : -1;
   2710c:	2800      	cmp	r0, #0
   2710e:	d0de      	beq.n	270ce <get_command_to_complete+0x3a>
   27110:	463d      	mov	r5, r7
   27112:	e7dc      	b.n	270ce <get_command_to_complete+0x3a>
		return -1;
   27114:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   27118:	e7d9      	b.n	270ce <get_command_to_complete+0x3a>
		return (str == NULL) ? dest : -1;
   2711a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2711e:	e7d6      	b.n	270ce <get_command_to_complete+0x3a>
		return -1;
   27120:	463d      	mov	r5, r7
   27122:	e7d4      	b.n	270ce <get_command_to_complete+0x3a>
		return -1;
   27124:	463d      	mov	r5, r7
   27126:	e7d2      	b.n	270ce <get_command_to_complete+0x3a>
   27128:	2000c630 	.word	0x2000c630

0002712c <completion>:

static u8_t completion(char *line, u8_t len)
{
   2712c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27130:	b087      	sub	sp, #28
   27132:	9002      	str	r0, [sp, #8]
	int common_chars = -1, space = 0;
	int i, dest, command_len;
	const struct shell_module *module;
	char *command_prefix;

	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
   27134:	2944      	cmp	r1, #68	; 0x44
   27136:	d903      	bls.n	27140 <completion+0x14>
		return 0;
   27138:	2000      	movs	r0, #0
		printk(" ");
		line[len] = ' ';
	}

	return common_chars - command_len + space;
}
   2713a:	b007      	add	sp, #28
   2713c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27140:	4689      	mov	r9, r1
	line[len] = '\0';
   27142:	2300      	movs	r3, #0
   27144:	5443      	strb	r3, [r0, r1]
	dest = get_command_to_complete(line, &command_prefix);
   27146:	a905      	add	r1, sp, #20
   27148:	f7ff ffa4 	bl	27094 <get_command_to_complete>
   2714c:	4605      	mov	r5, r0
	if (dest == -1) {
   2714e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27152:	f000 808f 	beq.w	27274 <completion+0x148>
	command_len = strlen(command_prefix);
   27156:	9805      	ldr	r0, [sp, #20]
   27158:	f7d9 fad2 	bl	700 <strlen>
   2715c:	9001      	str	r0, [sp, #4]
	for (i = 0; module->commands[i].cmd_name; i++) {
   2715e:	f04f 0b00 	mov.w	fp, #0
	int common_chars = -1, space = 0;
   27162:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	const char *first_match = NULL;
   27166:	465f      	mov	r7, fp
   27168:	9003      	str	r0, [sp, #12]
	for (i = 0; module->commands[i].cmd_name; i++) {
   2716a:	e01f      	b.n	271ac <completion+0x80>
			first_match = module->commands[i].cmd_name;
   2716c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   27170:	009a      	lsls	r2, r3, #2
   27172:	4b42      	ldr	r3, [pc, #264]	; (2727c <completion+0x150>)
   27174:	4413      	add	r3, r2
   27176:	685b      	ldr	r3, [r3, #4]
   27178:	f853 700a 	ldr.w	r7, [r3, sl]
			continue;
   2717c:	e014      	b.n	271a8 <completion+0x7c>
			printk("\n%s\n", first_match);
   2717e:	4639      	mov	r1, r7
   27180:	483f      	ldr	r0, [pc, #252]	; (27280 <completion+0x154>)
   27182:	f7db ff19 	bl	2fb8 <printk>
			common_chars = strlen(first_match);
   27186:	4638      	mov	r0, r7
   27188:	f7d9 faba 	bl	700 <strlen>
   2718c:	4606      	mov	r6, r0
		for (j = 0; j < common_chars; j++) {
   2718e:	e026      	b.n	271de <completion+0xb2>
		printk("%s\n", module->commands[i].cmd_name);
   27190:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   27194:	009a      	lsls	r2, r3, #2
   27196:	4b39      	ldr	r3, [pc, #228]	; (2727c <completion+0x150>)
   27198:	4413      	add	r3, r2
   2719a:	685b      	ldr	r3, [r3, #4]
   2719c:	f853 100a 	ldr.w	r1, [r3, sl]
   271a0:	4838      	ldr	r0, [pc, #224]	; (27284 <completion+0x158>)
   271a2:	f7db ff09 	bl	2fb8 <printk>
		common_chars = j;
   271a6:	4626      	mov	r6, r4
	for (i = 0; module->commands[i].cmd_name; i++) {
   271a8:	f10b 0b01 	add.w	fp, fp, #1
   271ac:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   271b0:	009a      	lsls	r2, r3, #2
   271b2:	4b32      	ldr	r3, [pc, #200]	; (2727c <completion+0x150>)
   271b4:	4413      	add	r3, r2
   271b6:	685a      	ldr	r2, [r3, #4]
   271b8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   271bc:	ea4f 0a83 	mov.w	sl, r3, lsl #2
   271c0:	46d0      	mov	r8, sl
   271c2:	f852 100a 	ldr.w	r1, [r2, sl]
   271c6:	b1d1      	cbz	r1, 271fe <completion+0xd2>
		if (strncmp(command_prefix,
   271c8:	9a01      	ldr	r2, [sp, #4]
   271ca:	9805      	ldr	r0, [sp, #20]
   271cc:	f003 fd6e 	bl	2acac <strncmp>
   271d0:	4604      	mov	r4, r0
   271d2:	2800      	cmp	r0, #0
   271d4:	d1e8      	bne.n	271a8 <completion+0x7c>
		if (!first_match) {
   271d6:	2f00      	cmp	r7, #0
   271d8:	d0c8      	beq.n	2716c <completion+0x40>
		if (first_match && (common_chars < 0)) {
   271da:	2e00      	cmp	r6, #0
   271dc:	dbcf      	blt.n	2717e <completion+0x52>
		for (j = 0; j < common_chars; j++) {
   271de:	42a6      	cmp	r6, r4
   271e0:	ddd6      	ble.n	27190 <completion+0x64>
			if (first_match[j] != module->commands[i].cmd_name[j]) {
   271e2:	5d39      	ldrb	r1, [r7, r4]
   271e4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   271e8:	009a      	lsls	r2, r3, #2
   271ea:	4b24      	ldr	r3, [pc, #144]	; (2727c <completion+0x150>)
   271ec:	4413      	add	r3, r2
   271ee:	685b      	ldr	r3, [r3, #4]
   271f0:	f853 3008 	ldr.w	r3, [r3, r8]
   271f4:	5d1b      	ldrb	r3, [r3, r4]
   271f6:	4299      	cmp	r1, r3
   271f8:	d1ca      	bne.n	27190 <completion+0x64>
		for (j = 0; j < common_chars; j++) {
   271fa:	3401      	adds	r4, #1
   271fc:	e7ef      	b.n	271de <completion+0xb2>
   271fe:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (!first_match) {
   27202:	2f00      	cmp	r7, #0
   27204:	d038      	beq.n	27278 <completion+0x14c>
	if (common_chars >= 0) {
   27206:	2e00      	cmp	r6, #0
   27208:	db0d      	blt.n	27226 <completion+0xfa>
		printk("%s", get_prompt());
   2720a:	f7ff fd01 	bl	26c10 <get_prompt>
   2720e:	4c1e      	ldr	r4, [pc, #120]	; (27288 <completion+0x15c>)
   27210:	4601      	mov	r1, r0
   27212:	4620      	mov	r0, r4
   27214:	f7db fed0 	bl	2fb8 <printk>
		printk("%s", line);
   27218:	9d02      	ldr	r5, [sp, #8]
   2721a:	4629      	mov	r1, r5
   2721c:	4620      	mov	r0, r4
   2721e:	f7db fecb 	bl	2fb8 <printk>
	int common_chars = -1, space = 0;
   27222:	2400      	movs	r4, #0
   27224:	e015      	b.n	27252 <completion+0x126>
		common_chars = strlen(first_match);
   27226:	4638      	mov	r0, r7
   27228:	f7d9 fa6a 	bl	700 <strlen>
   2722c:	4606      	mov	r6, r0
		space = 1;
   2722e:	2401      	movs	r4, #1
   27230:	9d02      	ldr	r5, [sp, #8]
	for (i = command_len; i < common_chars; i++) {
   27232:	e00e      	b.n	27252 <completion+0x126>
		printk("%c", first_match[i]);
   27234:	f817 100a 	ldrb.w	r1, [r7, sl]
   27238:	4814      	ldr	r0, [pc, #80]	; (2728c <completion+0x160>)
   2723a:	f7db febd 	bl	2fb8 <printk>
		line[len++] = first_match[i];
   2723e:	f109 0301 	add.w	r3, r9, #1
   27242:	f817 200a 	ldrb.w	r2, [r7, sl]
   27246:	f805 2009 	strb.w	r2, [r5, r9]
	for (i = command_len; i < common_chars; i++) {
   2724a:	f10a 0a01 	add.w	sl, sl, #1
		line[len++] = first_match[i];
   2724e:	fa5f f983 	uxtb.w	r9, r3
	for (i = command_len; i < common_chars; i++) {
   27252:	4556      	cmp	r6, sl
   27254:	dcee      	bgt.n	27234 <completion+0x108>
	if (space) {
   27256:	b92c      	cbnz	r4, 27264 <completion+0x138>
	return common_chars - command_len + space;
   27258:	9b01      	ldr	r3, [sp, #4]
   2725a:	1af0      	subs	r0, r6, r3
   2725c:	fa54 f080 	uxtab	r0, r4, r0
   27260:	b2c0      	uxtb	r0, r0
   27262:	e76a      	b.n	2713a <completion+0xe>
		printk(" ");
   27264:	480a      	ldr	r0, [pc, #40]	; (27290 <completion+0x164>)
   27266:	f7db fea7 	bl	2fb8 <printk>
		line[len] = ' ';
   2726a:	2320      	movs	r3, #32
   2726c:	9a02      	ldr	r2, [sp, #8]
   2726e:	f802 3009 	strb.w	r3, [r2, r9]
   27272:	e7f1      	b.n	27258 <completion+0x12c>
		return 0;
   27274:	2000      	movs	r0, #0
   27276:	e760      	b.n	2713a <completion+0xe>
		return 0;
   27278:	2000      	movs	r0, #0
   2727a:	e75e      	b.n	2713a <completion+0xe>
   2727c:	2000d0f4 	.word	0x2000d0f4
   27280:	00032b78 	.word	0x00032b78
   27284:	00031e48 	.word	0x00031e48
   27288:	0002e7ec 	.word	0x0002e7ec
   2728c:	00032b80 	.word	0x00032b80
   27290:	000331cc 	.word	0x000331cc

00027294 <line_queue_init>:
{
   27294:	b510      	push	{r4, lr}
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   27296:	2400      	movs	r4, #0
   27298:	e008      	b.n	272ac <line_queue_init+0x18>
		k_fifo_put(&avail_queue, &buf[i]);
   2729a:	eb04 1244 	add.w	r2, r4, r4, lsl #5
   2729e:	0093      	lsls	r3, r2, #2
   272a0:	4904      	ldr	r1, [pc, #16]	; (272b4 <line_queue_init+0x20>)
   272a2:	4419      	add	r1, r3
   272a4:	4804      	ldr	r0, [pc, #16]	; (272b8 <line_queue_init+0x24>)
   272a6:	f001 fced 	bl	28c84 <k_queue_append>
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   272aa:	3401      	adds	r4, #1
   272ac:	2c02      	cmp	r4, #2
   272ae:	ddf4      	ble.n	2729a <line_queue_init+0x6>
}
   272b0:	bd10      	pop	{r4, pc}
   272b2:	bf00      	nop
   272b4:	2000258c 	.word	0x2000258c
   272b8:	2000257c 	.word	0x2000257c

000272bc <shell_exec>:
{
   272bc:	b510      	push	{r4, lr}
   272be:	b08e      	sub	sp, #56	; 0x38
	int module = default_module;
   272c0:	4b1e      	ldr	r3, [pc, #120]	; (2733c <shell_exec+0x80>)
   272c2:	681b      	ldr	r3, [r3, #0]
   272c4:	9301      	str	r3, [sp, #4]
	argc = line2argv(line, argv, ARRAY_SIZE(argv));
   272c6:	220b      	movs	r2, #11
   272c8:	a903      	add	r1, sp, #12
   272ca:	f7ff fcf5 	bl	26cb8 <line2argv>
   272ce:	9002      	str	r0, [sp, #8]
	if (!argc) {
   272d0:	2800      	cmp	r0, #0
   272d2:	d02f      	beq.n	27334 <shell_exec+0x78>
	cb = get_cb(&argc, argv, &module);
   272d4:	aa01      	add	r2, sp, #4
   272d6:	a903      	add	r1, sp, #12
   272d8:	a802      	add	r0, sp, #8
   272da:	f7ff fdbd 	bl	26e58 <get_cb>
	if (!cb) {
   272de:	4602      	mov	r2, r0
   272e0:	b168      	cbz	r0, 272fe <shell_exec+0x42>
	if (module != -1 && module != default_module) {
   272e2:	9b01      	ldr	r3, [sp, #4]
   272e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   272e8:	d017      	beq.n	2731a <shell_exec+0x5e>
   272ea:	4914      	ldr	r1, [pc, #80]	; (2733c <shell_exec+0x80>)
   272ec:	6809      	ldr	r1, [r1, #0]
   272ee:	428b      	cmp	r3, r1
   272f0:	d013      	beq.n	2731a <shell_exec+0x5e>
		err = cb(argc - 1, &argv[1]);
   272f2:	a904      	add	r1, sp, #16
   272f4:	9802      	ldr	r0, [sp, #8]
   272f6:	3801      	subs	r0, #1
   272f8:	4790      	blx	r2
   272fa:	4604      	mov	r4, r0
   272fc:	e011      	b.n	27322 <shell_exec+0x66>
		if (app_cmd_handler != NULL) {
   272fe:	4b10      	ldr	r3, [pc, #64]	; (27340 <shell_exec+0x84>)
   27300:	681a      	ldr	r2, [r3, #0]
   27302:	2a00      	cmp	r2, #0
   27304:	d1ed      	bne.n	272e2 <shell_exec+0x26>
	printk("Unrecognized command: %s\n", argv);
   27306:	9903      	ldr	r1, [sp, #12]
   27308:	480e      	ldr	r0, [pc, #56]	; (27344 <shell_exec+0x88>)
   2730a:	f7db fe55 	bl	2fb8 <printk>
	printk("Type 'help' for list of available commands\n");
   2730e:	480e      	ldr	r0, [pc, #56]	; (27348 <shell_exec+0x8c>)
   27310:	f7db fe52 	bl	2fb8 <printk>
			return -EINVAL;
   27314:	f06f 0415 	mvn.w	r4, #21
   27318:	e005      	b.n	27326 <shell_exec+0x6a>
		err = cb(argc, argv);
   2731a:	a903      	add	r1, sp, #12
   2731c:	9802      	ldr	r0, [sp, #8]
   2731e:	4790      	blx	r2
   27320:	4604      	mov	r4, r0
	if (err < 0) {
   27322:	2c00      	cmp	r4, #0
   27324:	db02      	blt.n	2732c <shell_exec+0x70>
}
   27326:	4620      	mov	r0, r4
   27328:	b00e      	add	sp, #56	; 0x38
   2732a:	bd10      	pop	{r4, pc}
		show_cmd_help(argv);
   2732c:	a803      	add	r0, sp, #12
   2732e:	f7ff fe03 	bl	26f38 <show_cmd_help>
   27332:	e7f8      	b.n	27326 <shell_exec+0x6a>
		return -EINVAL;
   27334:	f06f 0415 	mvn.w	r4, #21
   27338:	e7f5      	b.n	27326 <shell_exec+0x6a>
   2733a:	bf00      	nop
   2733c:	2000c630 	.word	0x2000c630
   27340:	20002574 	.word	0x20002574
   27344:	00032bdc 	.word	0x00032bdc
   27348:	00032c98 	.word	0x00032c98

0002734c <shell>:
{
   2734c:	b510      	push	{r4, lr}
		printk("%s", get_prompt());
   2734e:	f7ff fc5f 	bl	26c10 <get_prompt>
   27352:	4601      	mov	r1, r0
   27354:	4808      	ldr	r0, [pc, #32]	; (27378 <shell+0x2c>)
   27356:	f7db fe2f 	bl	2fb8 <printk>
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
   2735a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2735e:	4807      	ldr	r0, [pc, #28]	; (2737c <shell+0x30>)
   27360:	f001 fcb8 	bl	28cd4 <k_queue_get>
   27364:	4604      	mov	r4, r0
		shell_exec(cmd->line);
   27366:	3004      	adds	r0, #4
   27368:	f7ff ffa8 	bl	272bc <shell_exec>
		k_fifo_put(&avail_queue, cmd);
   2736c:	4621      	mov	r1, r4
   2736e:	4804      	ldr	r0, [pc, #16]	; (27380 <shell+0x34>)
   27370:	f001 fc88 	bl	28c84 <k_queue_append>
   27374:	e7eb      	b.n	2734e <shell+0x2>
   27376:	bf00      	nop
   27378:	0002e7ec 	.word	0x0002e7ec
   2737c:	20002718 	.word	0x20002718
   27380:	2000257c 	.word	0x2000257c

00027384 <shell_init>:


void shell_init(const char *str)
{
   27384:	b510      	push	{r4, lr}
   27386:	b086      	sub	sp, #24
   27388:	4604      	mov	r4, r0
	k_fifo_init(&cmds_queue);
   2738a:	4812      	ldr	r0, [pc, #72]	; (273d4 <shell_init+0x50>)
   2738c:	f001 fc47 	bl	28c1e <k_queue_init>
	k_fifo_init(&avail_queue);
   27390:	4811      	ldr	r0, [pc, #68]	; (273d8 <shell_init+0x54>)
   27392:	f001 fc44 	bl	28c1e <k_queue_init>

	line_queue_init();
   27396:	f7ff ff7d 	bl	27294 <line_queue_init>

	prompt = str ? str : "";
   2739a:	b1c4      	cbz	r4, 273ce <shell_init+0x4a>
   2739c:	4b0f      	ldr	r3, [pc, #60]	; (273dc <shell_init+0x58>)
   2739e:	601c      	str	r4, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   273a0:	2300      	movs	r3, #0
   273a2:	9305      	str	r3, [sp, #20]
   273a4:	9304      	str	r3, [sp, #16]
   273a6:	f06f 0208 	mvn.w	r2, #8
   273aa:	9203      	str	r2, [sp, #12]
   273ac:	9302      	str	r3, [sp, #8]
   273ae:	9301      	str	r3, [sp, #4]
   273b0:	9300      	str	r3, [sp, #0]
   273b2:	4b0b      	ldr	r3, [pc, #44]	; (273e0 <shell_init+0x5c>)
   273b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   273b8:	490a      	ldr	r1, [pc, #40]	; (273e4 <shell_init+0x60>)
   273ba:	480b      	ldr	r0, [pc, #44]	; (273e8 <shell_init+0x64>)
   273bc:	f002 fa78 	bl	298b0 <_impl_k_thread_create>
	k_thread_create(&shell_thread, stack, STACKSIZE, shell, NULL, NULL,
			NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	/* Register serial console handler */
#ifdef CONFIG_UART_CONSOLE
	uart_register_input(&avail_queue, &cmds_queue, completion);
   273c0:	4a0a      	ldr	r2, [pc, #40]	; (273ec <shell_init+0x68>)
   273c2:	4904      	ldr	r1, [pc, #16]	; (273d4 <shell_init+0x50>)
   273c4:	4804      	ldr	r0, [pc, #16]	; (273d8 <shell_init+0x54>)
   273c6:	f7da fe37 	bl	2038 <uart_register_input>
#endif
#ifdef CONFIG_TELNET_CONSOLE
	telnet_register_input(&avail_queue, &cmds_queue, completion);
#endif
}
   273ca:	b006      	add	sp, #24
   273cc:	bd10      	pop	{r4, pc}
	prompt = str ? str : "";
   273ce:	4c08      	ldr	r4, [pc, #32]	; (273f0 <shell_init+0x6c>)
   273d0:	e7e4      	b.n	2739c <shell_init+0x18>
   273d2:	bf00      	nop
   273d4:	20002718 	.word	0x20002718
   273d8:	2000257c 	.word	0x2000257c
   273dc:	20002740 	.word	0x20002740
   273e0:	0002734d 	.word	0x0002734d
   273e4:	20009c58 	.word	0x20009c58
   273e8:	20002744 	.word	0x20002744
   273ec:	0002712d 	.word	0x0002712d
   273f0:	0002f114 	.word	0x0002f114

000273f4 <ftpan_32>:
#define __SYSTEM_CLOCK_64M (64000000UL)

#ifdef CONFIG_SOC_NRF52832
static bool ftpan_32(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   273f4:	4b0e      	ldr	r3, [pc, #56]	; (27430 <ftpan_32+0x3c>)
   273f6:	781b      	ldrb	r3, [r3, #0]
   273f8:	2b06      	cmp	r3, #6
   273fa:	d001      	beq.n	27400 <ftpan_32+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   273fc:	2000      	movs	r0, #0
   273fe:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   27400:	4b0c      	ldr	r3, [pc, #48]	; (27434 <ftpan_32+0x40>)
   27402:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27404:	f013 0f0f 	tst.w	r3, #15
   27408:	d10e      	bne.n	27428 <ftpan_32+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2740a:	4b0b      	ldr	r3, [pc, #44]	; (27438 <ftpan_32+0x44>)
   2740c:	681b      	ldr	r3, [r3, #0]
   2740e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   27412:	2b30      	cmp	r3, #48	; 0x30
   27414:	d001      	beq.n	2741a <ftpan_32+0x26>
	return false;
   27416:	2000      	movs	r0, #0
   27418:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   2741a:	4b08      	ldr	r3, [pc, #32]	; (2743c <ftpan_32+0x48>)
   2741c:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2741e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   27422:	d003      	beq.n	2742c <ftpan_32+0x38>
	return false;
   27424:	2000      	movs	r0, #0
   27426:	4770      	bx	lr
   27428:	2000      	movs	r0, #0
   2742a:	4770      	bx	lr
			return true;
   2742c:	2001      	movs	r0, #1
}
   2742e:	4770      	bx	lr
   27430:	f0000fe0 	.word	0xf0000fe0
   27434:	f0000fe4 	.word	0xf0000fe4
   27438:	f0000fe8 	.word	0xf0000fe8
   2743c:	f0000fec 	.word	0xf0000fec

00027440 <ftpan_37>:

static bool ftpan_37(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27440:	4b0e      	ldr	r3, [pc, #56]	; (2747c <ftpan_37+0x3c>)
   27442:	781b      	ldrb	r3, [r3, #0]
   27444:	2b06      	cmp	r3, #6
   27446:	d001      	beq.n	2744c <ftpan_37+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   27448:	2000      	movs	r0, #0
   2744a:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   2744c:	4b0c      	ldr	r3, [pc, #48]	; (27480 <ftpan_37+0x40>)
   2744e:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27450:	f013 0f0f 	tst.w	r3, #15
   27454:	d10e      	bne.n	27474 <ftpan_37+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27456:	4b0b      	ldr	r3, [pc, #44]	; (27484 <ftpan_37+0x44>)
   27458:	681b      	ldr	r3, [r3, #0]
   2745a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2745e:	2b30      	cmp	r3, #48	; 0x30
   27460:	d001      	beq.n	27466 <ftpan_37+0x26>
	return false;
   27462:	2000      	movs	r0, #0
   27464:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   27466:	4b08      	ldr	r3, [pc, #32]	; (27488 <ftpan_37+0x48>)
   27468:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2746a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   2746e:	d003      	beq.n	27478 <ftpan_37+0x38>
	return false;
   27470:	2000      	movs	r0, #0
   27472:	4770      	bx	lr
   27474:	2000      	movs	r0, #0
   27476:	4770      	bx	lr
			return true;
   27478:	2001      	movs	r0, #1
}
   2747a:	4770      	bx	lr
   2747c:	f0000fe0 	.word	0xf0000fe0
   27480:	f0000fe4 	.word	0xf0000fe4
   27484:	f0000fe8 	.word	0xf0000fe8
   27488:	f0000fec 	.word	0xf0000fec

0002748c <ftpan_36>:

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   2748c:	4b0e      	ldr	r3, [pc, #56]	; (274c8 <ftpan_36+0x3c>)
   2748e:	781b      	ldrb	r3, [r3, #0]
   27490:	2b06      	cmp	r3, #6
   27492:	d001      	beq.n	27498 <ftpan_36+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   27494:	2000      	movs	r0, #0
   27496:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   27498:	4b0c      	ldr	r3, [pc, #48]	; (274cc <ftpan_36+0x40>)
   2749a:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   2749c:	f013 0f0f 	tst.w	r3, #15
   274a0:	d10e      	bne.n	274c0 <ftpan_36+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   274a2:	4b0b      	ldr	r3, [pc, #44]	; (274d0 <ftpan_36+0x44>)
   274a4:	681b      	ldr	r3, [r3, #0]
   274a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   274aa:	2b30      	cmp	r3, #48	; 0x30
   274ac:	d001      	beq.n	274b2 <ftpan_36+0x26>
	return false;
   274ae:	2000      	movs	r0, #0
   274b0:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   274b2:	4b08      	ldr	r3, [pc, #32]	; (274d4 <ftpan_36+0x48>)
   274b4:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   274b6:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   274ba:	d003      	beq.n	274c4 <ftpan_36+0x38>
	return false;
   274bc:	2000      	movs	r0, #0
   274be:	4770      	bx	lr
   274c0:	2000      	movs	r0, #0
   274c2:	4770      	bx	lr
			return true;
   274c4:	2001      	movs	r0, #1
}
   274c6:	4770      	bx	lr
   274c8:	f0000fe0 	.word	0xf0000fe0
   274cc:	f0000fe4 	.word	0xf0000fe4
   274d0:	f0000fe8 	.word	0xf0000fe8
   274d4:	f0000fec 	.word	0xf0000fec

000274d8 <errata_136_nrf52832>:

static bool errata_136_nrf52832(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   274d8:	4b0f      	ldr	r3, [pc, #60]	; (27518 <errata_136_nrf52832+0x40>)
   274da:	781b      	ldrb	r3, [r3, #0]
   274dc:	2b06      	cmp	r3, #6
   274de:	d001      	beq.n	274e4 <errata_136_nrf52832+0xc>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
			return true;
		}
	}

	return false;
   274e0:	2000      	movs	r0, #0
   274e2:	4770      	bx	lr
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   274e4:	4b0d      	ldr	r3, [pc, #52]	; (2751c <errata_136_nrf52832+0x44>)
   274e6:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   274e8:	f013 0f0f 	tst.w	r3, #15
   274ec:	d10b      	bne.n	27506 <errata_136_nrf52832+0x2e>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
   274ee:	4b0c      	ldr	r3, [pc, #48]	; (27520 <errata_136_nrf52832+0x48>)
   274f0:	681b      	ldr	r3, [r3, #0]
   274f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   274f6:	2b30      	cmp	r3, #48	; 0x30
   274f8:	d007      	beq.n	2750a <errata_136_nrf52832+0x32>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
   274fa:	2b40      	cmp	r3, #64	; 0x40
   274fc:	d007      	beq.n	2750e <errata_136_nrf52832+0x36>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
   274fe:	2b50      	cmp	r3, #80	; 0x50
   27500:	d007      	beq.n	27512 <errata_136_nrf52832+0x3a>
	return false;
   27502:	2000      	movs	r0, #0
   27504:	4770      	bx	lr
   27506:	2000      	movs	r0, #0
   27508:	4770      	bx	lr
			return true;
   2750a:	2001      	movs	r0, #1
   2750c:	4770      	bx	lr
			return true;
   2750e:	2001      	movs	r0, #1
   27510:	4770      	bx	lr
			return true;
   27512:	2001      	movs	r0, #1
}
   27514:	4770      	bx	lr
   27516:	bf00      	nop
   27518:	f0000fe0 	.word	0xf0000fe0
   2751c:	f0000fe4 	.word	0xf0000fe4
   27520:	f0000fe8 	.word	0xf0000fe8

00027524 <nordicsemi_nrf52832_init>:

static void nordicsemi_nrf52832_init(void)
{
   27524:	b508      	push	{r3, lr}
	/* Workaround for FTPAN-32 "DIF: Debug session automatically
	* enables TracePort pins" found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_32()) {
   27526:	f7ff ff65 	bl	273f4 <ftpan_32>
   2752a:	b120      	cbz	r0, 27536 <nordicsemi_nrf52832_init+0x12>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   2752c:	4a32      	ldr	r2, [pc, #200]	; (275f8 <nordicsemi_nrf52832_init+0xd4>)
   2752e:	68d3      	ldr	r3, [r2, #12]
   27530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   27534:	60d3      	str	r3, [r2, #12]

	/* Workaround for FTPAN-37 "AMLI: EasyDMA is slow with Radio,
	* ECB, AAR and CCM." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_37()) {
   27536:	f7ff ff83 	bl	27440 <ftpan_37>
   2753a:	b110      	cbz	r0, 27542 <nordicsemi_nrf52832_init+0x1e>
		*(volatile u32_t *)0x400005A0 = 0x3;
   2753c:	2203      	movs	r2, #3
   2753e:	4b2f      	ldr	r3, [pc, #188]	; (275fc <nordicsemi_nrf52832_init+0xd8>)
   27540:	601a      	str	r2, [r3, #0]

	/* Workaround for FTPAN-36 "CLOCK: Some registers are not
	* reset when expected." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_36()) {
   27542:	f7ff ffa3 	bl	2748c <ftpan_36>
   27546:	b130      	cbz	r0, 27556 <nordicsemi_nrf52832_init+0x32>
		NRF_CLOCK->EVENTS_DONE = 0;
   27548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2754c:	2200      	movs	r2, #0
   2754e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
   27552:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	/* Workaround for Errata 136 "System: Bits in RESETREAS are set when
	 * they should not be" found at the Errata document for your device
	 * located at https://infocenter.nordicsemi.com/
	 */
	if (errata_136_nrf52832()) {
   27556:	f7ff ffbf 	bl	274d8 <errata_136_nrf52832>
   2755a:	b160      	cbz	r0, 27576 <nordicsemi_nrf52832_init+0x52>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
   2755c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27560:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   27564:	f013 0f01 	tst.w	r3, #1
   27568:	d005      	beq.n	27576 <nordicsemi_nrf52832_init+0x52>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
   2756a:	f06f 0201 	mvn.w	r2, #1
   2756e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27572:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	* defined, pin reset will not be available. One GPIO (see
	* Product Specification to see which one) will then be
	* reserved for PinReset and not available as normal GPIO.
	*/
#if defined(CONFIG_GPIO_AS_PINRESET)
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   27576:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2757a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   2757e:	2b00      	cmp	r3, #0
   27580:	db06      	blt.n	27590 <nordicsemi_nrf52832_init+0x6c>
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   27582:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   27586:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2758a:	2b00      	cmp	r3, #0
   2758c:	db00      	blt.n	27590 <nordicsemi_nrf52832_init+0x6c>
   2758e:	bd08      	pop	{r3, pc}
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   27590:	2201      	movs	r2, #1
   27592:	4b1b      	ldr	r3, [pc, #108]	; (27600 <nordicsemi_nrf52832_init+0xdc>)
   27594:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   27598:	4b19      	ldr	r3, [pc, #100]	; (27600 <nordicsemi_nrf52832_init+0xdc>)
   2759a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2759e:	2b00      	cmp	r3, #0
   275a0:	d0fa      	beq.n	27598 <nordicsemi_nrf52832_init+0x74>
			;
		}
		NRF_UICR->PSELRESET[0] = 21;
   275a2:	2215      	movs	r2, #21
   275a4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   275a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   275ac:	4b14      	ldr	r3, [pc, #80]	; (27600 <nordicsemi_nrf52832_init+0xdc>)
   275ae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   275b2:	2b00      	cmp	r3, #0
   275b4:	d0fa      	beq.n	275ac <nordicsemi_nrf52832_init+0x88>
			;
		}
		NRF_UICR->PSELRESET[1] = 21;
   275b6:	2215      	movs	r2, #21
   275b8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   275bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   275c0:	4b0f      	ldr	r3, [pc, #60]	; (27600 <nordicsemi_nrf52832_init+0xdc>)
   275c2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   275c6:	2b00      	cmp	r3, #0
   275c8:	d0fa      	beq.n	275c0 <nordicsemi_nrf52832_init+0x9c>
			;
		}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   275ca:	2200      	movs	r2, #0
   275cc:	4b0c      	ldr	r3, [pc, #48]	; (27600 <nordicsemi_nrf52832_init+0xdc>)
   275ce:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   275d2:	4b0b      	ldr	r3, [pc, #44]	; (27600 <nordicsemi_nrf52832_init+0xdc>)
   275d4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   275d8:	2b00      	cmp	r3, #0
   275da:	d0fa      	beq.n	275d2 <nordicsemi_nrf52832_init+0xae>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   275dc:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   275e0:	4908      	ldr	r1, [pc, #32]	; (27604 <nordicsemi_nrf52832_init+0xe0>)
   275e2:	68ca      	ldr	r2, [r1, #12]
   275e4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   275e8:	4b07      	ldr	r3, [pc, #28]	; (27608 <nordicsemi_nrf52832_init+0xe4>)
   275ea:	4313      	orrs	r3, r2
   275ec:	60cb      	str	r3, [r1, #12]
   275ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   275f2:	bf00      	nop
   275f4:	e7fd      	b.n	275f2 <nordicsemi_nrf52832_init+0xce>
   275f6:	bf00      	nop
   275f8:	e000edf0 	.word	0xe000edf0
   275fc:	400005a0 	.word	0x400005a0
   27600:	4001e000 	.word	0x4001e000
   27604:	e000ed00 	.word	0xe000ed00
   27608:	05fa0004 	.word	0x05fa0004

0002760c <clock_init>:

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK_64M;

static void clock_init(void)
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
   2760c:	4a01      	ldr	r2, [pc, #4]	; (27614 <clock_init+0x8>)
   2760e:	4b02      	ldr	r3, [pc, #8]	; (27618 <clock_init+0xc>)
   27610:	601a      	str	r2, [r3, #0]
   27612:	4770      	bx	lr
   27614:	03d09000 	.word	0x03d09000
   27618:	2000c634 	.word	0x2000c634

0002761c <nordicsemi_nrf52_init>:
}

static int nordicsemi_nrf52_init(struct device *arg)
{
   2761c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2761e:	f04f 0320 	mov.w	r3, #32
   27622:	f3ef 8411 	mrs	r4, BASEPRI
   27626:	f383 8811 	msr	BASEPRI, r3
	ARG_UNUSED(arg);

	key = irq_lock();

#ifdef CONFIG_SOC_NRF52832
	nordicsemi_nrf52832_init();
   2762a:	f7ff ff7b 	bl	27524 <nordicsemi_nrf52832_init>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2762e:	4b05      	ldr	r3, [pc, #20]	; (27644 <nordicsemi_nrf52_init+0x28>)
   27630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27634:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   27636:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

	_ClearFaults();

	/* Setup master clock */
	clock_init();
   27638:	f7ff ffe8 	bl	2760c <clock_init>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2763c:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   27640:	2000      	movs	r0, #0
   27642:	bd10      	pop	{r4, pc}
   27644:	e000ed00 	.word	0xe000ed00

00027648 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   27648:	4808      	ldr	r0, [pc, #32]	; (2766c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   2764a:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
   2764c:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
   2764e:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
   27650:	d80b      	bhi.n	2766a <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
   27652:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
   27654:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   27656:	d008      	beq.n	2766a <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
   27658:	b500      	push	{lr}
    bl _update_time_slice_before_swap
   2765a:	f001 fd1f 	bl	2909c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
   2765e:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   27662:	4903      	ldr	r1, [pc, #12]	; (27670 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   27664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   27668:	600a      	str	r2, [r1, #0]

0002766a <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
   2766a:	4770      	bx	lr
    ldr r0, =_kernel
   2766c:	20002880 	.word	0x20002880
    ldr r1, =_SCS_ICSR
   27670:	e000ed04 	.word	0xe000ed04

00027674 <_IntLibInit>:
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
   27674:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   27676:	e00a      	b.n	2768e <_IntLibInit+0x1a>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   27678:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) < 0)
   2767a:	2b00      	cmp	r3, #0
   2767c:	db0a      	blt.n	27694 <_IntLibInit+0x20>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2767e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   27682:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   27686:	2120      	movs	r1, #32
   27688:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2768c:	3201      	adds	r2, #1
   2768e:	2a26      	cmp	r2, #38	; 0x26
   27690:	ddf2      	ble.n	27678 <_IntLibInit+0x4>
	}
}
   27692:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27694:	f002 010f 	and.w	r1, r2, #15
   27698:	4b02      	ldr	r3, [pc, #8]	; (276a4 <_IntLibInit+0x30>)
   2769a:	440b      	add	r3, r1
   2769c:	2120      	movs	r1, #32
   2769e:	7619      	strb	r1, [r3, #24]
   276a0:	e7f4      	b.n	2768c <_IntLibInit+0x18>
   276a2:	bf00      	nop
   276a4:	e000ecfc 	.word	0xe000ecfc

000276a8 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   276a8:	490e      	ldr	r1, [pc, #56]	; (276e4 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   276aa:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   276ac:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   276b0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   276b2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
   276b6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   276ba:	4f0b      	ldr	r7, [pc, #44]	; (276e8 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   276bc:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   276c0:	2020      	movs	r0, #32
    msr BASEPRI, r0
   276c2:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
   276c6:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   276c8:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   276ca:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
   276cc:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
   276ce:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   276d0:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   276d2:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_mem_domain
    pop {r2, lr}
#endif /* CONFIG_USERSPACE */

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   276d6:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   276da:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
   276de:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
   276e2:	4770      	bx	lr
    ldr r1, =_kernel
   276e4:	20002880 	.word	0x20002880
    ldr v4, =_SCS_ICSR
   276e8:	e000ed04 	.word	0xe000ed04

000276ec <__svc>:
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)

    tst lr, #0x4    /* did we come from thread mode ? */
   276ec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   276f0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   276f2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   276f6:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   276fa:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
   276fc:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
   27700:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    beq _context_switch
   27704:	d001      	beq.n	2770a <_context_switch>

    cmp r1, #2
   27706:	2902      	cmp	r1, #2
    beq _oops
   27708:	d007      	beq.n	2771a <_oops>

0002770a <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
   2770a:	4040      	eors	r0, r0
    msr BASEPRI, r0
   2770c:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
   27710:	4904      	ldr	r1, [pc, #16]	; (27724 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
   27712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
   27716:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
   27718:	4770      	bx	lr

0002771a <_oops>:

_oops:
    push {lr}
   2771a:	b500      	push	{lr}
    blx _do_kernel_oops
   2771c:	f000 fa82 	bl	27c24 <_do_kernel_oops>
    pop {pc}
   27720:	bd00      	pop	{pc}
   27722:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
   27724:	e000ed04 	.word	0xe000ed04

00027728 <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
   27728:	4904      	ldr	r1, [pc, #16]	; (2773c <__swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2772a:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
   2772c:	6610      	str	r0, [r2, #96]	; 0x60

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   2772e:	4904      	ldr	r1, [pc, #16]	; (27740 <__swap+0x18>)
    ldr r1, [r1]
   27730:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
   27732:	6651      	str	r1, [r2, #100]	; 0x64
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
   27734:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
   27736:	6e50      	ldr	r0, [r2, #100]	; 0x64
    bx lr
   27738:	4770      	bx	lr
   2773a:	0000      	.short	0x0000
    ldr r1, =_kernel
   2773c:	20002880 	.word	0x20002880
    ldr r1, =_k_neg_eagain
   27740:	000331a0 	.word	0x000331a0

00027744 <_DebugMonitor>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _DebugMonitor(const NANO_ESF *esf)
{
   27744:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
   27746:	4802      	ldr	r0, [pc, #8]	; (27750 <_DebugMonitor+0xc>)
   27748:	f7db fc36 	bl	2fb8 <printk>
   2774c:	bd08      	pop	{r3, pc}
   2774e:	bf00      	nop
   27750:	00032ddc 	.word	0x00032ddc

00027754 <_ReservedException>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
   27754:	b508      	push	{r3, lr}
   27756:	460a      	mov	r2, r1
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
   27758:	290f      	cmp	r1, #15
   2775a:	dd05      	ble.n	27768 <_ReservedException+0x14>
   2775c:	4903      	ldr	r1, [pc, #12]	; (2776c <_ReservedException+0x18>)
   2775e:	3a10      	subs	r2, #16
   27760:	4803      	ldr	r0, [pc, #12]	; (27770 <_ReservedException+0x1c>)
   27762:	f7db fc29 	bl	2fb8 <printk>
   27766:	bd08      	pop	{r3, pc}
   27768:	4902      	ldr	r1, [pc, #8]	; (27774 <_ReservedException+0x20>)
   2776a:	e7f8      	b.n	2775e <_ReservedException+0xa>
   2776c:	00032f64 	.word	0x00032f64
   27770:	00032f80 	.word	0x00032f80
   27774:	00032f4c 	.word	0x00032f4c

00027778 <_FaultThreadShow>:
{
   27778:	b510      	push	{r4, lr}
   2777a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   2777c:	f001 fc60 	bl	29040 <_impl_k_current_get>
	PR_EXC("  Executing thread ID (thread): %p\n"
   27780:	69a2      	ldr	r2, [r4, #24]
   27782:	4601      	mov	r1, r0
   27784:	4801      	ldr	r0, [pc, #4]	; (2778c <_FaultThreadShow+0x14>)
   27786:	f7db fc17 	bl	2fb8 <printk>
   2778a:	bd10      	pop	{r4, pc}
   2778c:	00032e14 	.word	0x00032e14

00027790 <_MpuFault>:
{
   27790:	b538      	push	{r3, r4, r5, lr}
   27792:	4604      	mov	r4, r0
   27794:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
   27796:	481e      	ldr	r0, [pc, #120]	; (27810 <_MpuFault+0x80>)
   27798:	f7db fc0e 	bl	2fb8 <printk>
	_FaultThreadShow(esf);
   2779c:	4620      	mov	r0, r4
   2779e:	f7ff ffeb 	bl	27778 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
   277a2:	4b1c      	ldr	r3, [pc, #112]	; (27814 <_MpuFault+0x84>)
   277a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   277a6:	f013 0f10 	tst.w	r3, #16
   277aa:	d10f      	bne.n	277cc <_MpuFault+0x3c>
	} else if (SCB->CFSR & CFSR_MUNSTKERR_Msk) {
   277ac:	4b19      	ldr	r3, [pc, #100]	; (27814 <_MpuFault+0x84>)
   277ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   277b0:	f013 0f08 	tst.w	r3, #8
   277b4:	d10e      	bne.n	277d4 <_MpuFault+0x44>
	} else if (SCB->CFSR & CFSR_DACCVIOL_Msk) {
   277b6:	4b17      	ldr	r3, [pc, #92]	; (27814 <_MpuFault+0x84>)
   277b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   277ba:	f013 0f02 	tst.w	r3, #2
   277be:	d10d      	bne.n	277dc <_MpuFault+0x4c>
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
   277c0:	4b14      	ldr	r3, [pc, #80]	; (27814 <_MpuFault+0x84>)
   277c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   277c4:	f013 0f01 	tst.w	r3, #1
   277c8:	d11d      	bne.n	27806 <_MpuFault+0x76>
   277ca:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   277cc:	4812      	ldr	r0, [pc, #72]	; (27818 <_MpuFault+0x88>)
   277ce:	f7db fbf3 	bl	2fb8 <printk>
   277d2:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   277d4:	4811      	ldr	r0, [pc, #68]	; (2781c <_MpuFault+0x8c>)
   277d6:	f7db fbef 	bl	2fb8 <printk>
   277da:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Data Access Violation\n");
   277dc:	4810      	ldr	r0, [pc, #64]	; (27820 <_MpuFault+0x90>)
   277de:	f7db fbeb 	bl	2fb8 <printk>
		if (SCB->CFSR & CFSR_MMARVALID_Msk) {
   277e2:	4b0c      	ldr	r3, [pc, #48]	; (27814 <_MpuFault+0x84>)
   277e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   277e6:	f013 0f80 	tst.w	r3, #128	; 0x80
   277ea:	d0ee      	beq.n	277ca <_MpuFault+0x3a>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->MMFAR);
   277ec:	4b09      	ldr	r3, [pc, #36]	; (27814 <_MpuFault+0x84>)
   277ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
   277f0:	480c      	ldr	r0, [pc, #48]	; (27824 <_MpuFault+0x94>)
   277f2:	f7db fbe1 	bl	2fb8 <printk>
			if (fromHardFault) {
   277f6:	2d00      	cmp	r5, #0
   277f8:	d0e7      	beq.n	277ca <_MpuFault+0x3a>
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
   277fa:	4a06      	ldr	r2, [pc, #24]	; (27814 <_MpuFault+0x84>)
   277fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   277fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   27802:	6293      	str	r3, [r2, #40]	; 0x28
   27804:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction Access Violation\n");
   27806:	4808      	ldr	r0, [pc, #32]	; (27828 <_MpuFault+0x98>)
   27808:	f7db fbd6 	bl	2fb8 <printk>
}
   2780c:	e7dd      	b.n	277ca <_MpuFault+0x3a>
   2780e:	bf00      	nop
   27810:	00032ebc 	.word	0x00032ebc
   27814:	e000ed00 	.word	0xe000ed00
   27818:	00032ed4 	.word	0x00032ed4
   2781c:	00032ee8 	.word	0x00032ee8
   27820:	00032efc 	.word	0x00032efc
   27824:	00032f18 	.word	0x00032f18
   27828:	00032f2c 	.word	0x00032f2c

0002782c <_BusFault>:
{
   2782c:	b538      	push	{r3, r4, r5, lr}
   2782e:	4604      	mov	r4, r0
   27830:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
   27832:	4827      	ldr	r0, [pc, #156]	; (278d0 <_BusFault+0xa4>)
   27834:	f7db fbc0 	bl	2fb8 <printk>
	_FaultThreadShow(esf);
   27838:	4620      	mov	r0, r4
   2783a:	f7ff ff9d 	bl	27778 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_STKERR_Msk) {
   2783e:	4b25      	ldr	r3, [pc, #148]	; (278d4 <_BusFault+0xa8>)
   27840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27842:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   27846:	d114      	bne.n	27872 <_BusFault+0x46>
	} else if (SCB->CFSR & CFSR_UNSTKERR_Msk) {
   27848:	4b22      	ldr	r3, [pc, #136]	; (278d4 <_BusFault+0xa8>)
   2784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2784c:	f413 6f00 	tst.w	r3, #2048	; 0x800
   27850:	d113      	bne.n	2787a <_BusFault+0x4e>
	} else if (SCB->CFSR & CFSR_PRECISERR_Msk) {
   27852:	4b20      	ldr	r3, [pc, #128]	; (278d4 <_BusFault+0xa8>)
   27854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27856:	f413 7f00 	tst.w	r3, #512	; 0x200
   2785a:	d112      	bne.n	27882 <_BusFault+0x56>
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   2785c:	4b1d      	ldr	r3, [pc, #116]	; (278d4 <_BusFault+0xa8>)
   2785e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27860:	f413 6f80 	tst.w	r3, #1024	; 0x400
   27864:	d12b      	bne.n	278be <_BusFault+0x92>
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
   27866:	4b1b      	ldr	r3, [pc, #108]	; (278d4 <_BusFault+0xa8>)
   27868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2786a:	f413 7f80 	tst.w	r3, #256	; 0x100
   2786e:	d12a      	bne.n	278c6 <_BusFault+0x9a>
   27870:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   27872:	4819      	ldr	r0, [pc, #100]	; (278d8 <_BusFault+0xac>)
   27874:	f7db fba0 	bl	2fb8 <printk>
   27878:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   2787a:	4818      	ldr	r0, [pc, #96]	; (278dc <_BusFault+0xb0>)
   2787c:	f7db fb9c 	bl	2fb8 <printk>
   27880:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Precise data bus error\n");
   27882:	4817      	ldr	r0, [pc, #92]	; (278e0 <_BusFault+0xb4>)
   27884:	f7db fb98 	bl	2fb8 <printk>
		if (SCB->CFSR & CFSR_BFARVALID_Msk) {
   27888:	4b12      	ldr	r3, [pc, #72]	; (278d4 <_BusFault+0xa8>)
   2788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2788c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   27890:	d108      	bne.n	278a4 <_BusFault+0x78>
		if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   27892:	4b10      	ldr	r3, [pc, #64]	; (278d4 <_BusFault+0xa8>)
   27894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27896:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2789a:	d0e9      	beq.n	27870 <_BusFault+0x44>
			PR_EXC("  Imprecise data bus error\n");
   2789c:	4811      	ldr	r0, [pc, #68]	; (278e4 <_BusFault+0xb8>)
   2789e:	f7db fb8b 	bl	2fb8 <printk>
   278a2:	bd38      	pop	{r3, r4, r5, pc}
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->BFAR);
   278a4:	4b0b      	ldr	r3, [pc, #44]	; (278d4 <_BusFault+0xa8>)
   278a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
   278a8:	480f      	ldr	r0, [pc, #60]	; (278e8 <_BusFault+0xbc>)
   278aa:	f7db fb85 	bl	2fb8 <printk>
			if (fromHardFault) {
   278ae:	2d00      	cmp	r5, #0
   278b0:	d0ef      	beq.n	27892 <_BusFault+0x66>
				SCB->CFSR &= ~CFSR_BFARVALID_Msk;
   278b2:	4a08      	ldr	r2, [pc, #32]	; (278d4 <_BusFault+0xa8>)
   278b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   278b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   278ba:	6293      	str	r3, [r2, #40]	; 0x28
   278bc:	e7e9      	b.n	27892 <_BusFault+0x66>
		PR_EXC("  Imprecise data bus error\n");
   278be:	4809      	ldr	r0, [pc, #36]	; (278e4 <_BusFault+0xb8>)
   278c0:	f7db fb7a 	bl	2fb8 <printk>
   278c4:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction bus error\n");
   278c6:	4809      	ldr	r0, [pc, #36]	; (278ec <_BusFault+0xc0>)
   278c8:	f7db fb76 	bl	2fb8 <printk>
}
   278cc:	e7d0      	b.n	27870 <_BusFault+0x44>
   278ce:	bf00      	nop
   278d0:	00032d70 	.word	0x00032d70
   278d4:	e000ed00 	.word	0xe000ed00
   278d8:	00032ed4 	.word	0x00032ed4
   278dc:	00032ee8 	.word	0x00032ee8
   278e0:	00032d88 	.word	0x00032d88
   278e4:	00032da4 	.word	0x00032da4
   278e8:	00032f18 	.word	0x00032f18
   278ec:	00032dc0 	.word	0x00032dc0

000278f0 <_UsageFault>:
{
   278f0:	b510      	push	{r4, lr}
   278f2:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
   278f4:	4821      	ldr	r0, [pc, #132]	; (2797c <_UsageFault+0x8c>)
   278f6:	f7db fb5f 	bl	2fb8 <printk>
	_FaultThreadShow(esf);
   278fa:	4620      	mov	r0, r4
   278fc:	f7ff ff3c 	bl	27778 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
   27900:	4b1f      	ldr	r3, [pc, #124]	; (27980 <_UsageFault+0x90>)
   27902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27904:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   27908:	d120      	bne.n	2794c <_UsageFault+0x5c>
	if (SCB->CFSR & CFSR_UNALIGNED_Msk) {
   2790a:	4b1d      	ldr	r3, [pc, #116]	; (27980 <_UsageFault+0x90>)
   2790c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2790e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   27912:	d11f      	bne.n	27954 <_UsageFault+0x64>
	if (SCB->CFSR & CFSR_NOCP_Msk) {
   27914:	4b1a      	ldr	r3, [pc, #104]	; (27980 <_UsageFault+0x90>)
   27916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27918:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   2791c:	d11e      	bne.n	2795c <_UsageFault+0x6c>
	if (SCB->CFSR & CFSR_INVPC_Msk) {
   2791e:	4b18      	ldr	r3, [pc, #96]	; (27980 <_UsageFault+0x90>)
   27920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27922:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   27926:	d11d      	bne.n	27964 <_UsageFault+0x74>
	if (SCB->CFSR & CFSR_INVSTATE_Msk) {
   27928:	4b15      	ldr	r3, [pc, #84]	; (27980 <_UsageFault+0x90>)
   2792a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2792c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   27930:	d11c      	bne.n	2796c <_UsageFault+0x7c>
	if (SCB->CFSR & CFSR_UNDEFINSTR_Msk) {
   27932:	4b13      	ldr	r3, [pc, #76]	; (27980 <_UsageFault+0x90>)
   27934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27936:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2793a:	d11b      	bne.n	27974 <_UsageFault+0x84>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2793c:	4a10      	ldr	r2, [pc, #64]	; (27980 <_UsageFault+0x90>)
   2793e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27940:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   27944:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   27948:	6293      	str	r3, [r2, #40]	; 0x28
   2794a:	bd10      	pop	{r4, pc}
		PR_EXC("  Division by zero\n");
   2794c:	480d      	ldr	r0, [pc, #52]	; (27984 <_UsageFault+0x94>)
   2794e:	f7db fb33 	bl	2fb8 <printk>
   27952:	e7da      	b.n	2790a <_UsageFault+0x1a>
		PR_EXC("  Unaligned memory access\n");
   27954:	480c      	ldr	r0, [pc, #48]	; (27988 <_UsageFault+0x98>)
   27956:	f7db fb2f 	bl	2fb8 <printk>
   2795a:	e7db      	b.n	27914 <_UsageFault+0x24>
		PR_EXC("  No coprocessor instructions\n");
   2795c:	480b      	ldr	r0, [pc, #44]	; (2798c <_UsageFault+0x9c>)
   2795e:	f7db fb2b 	bl	2fb8 <printk>
   27962:	e7dc      	b.n	2791e <_UsageFault+0x2e>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
   27964:	480a      	ldr	r0, [pc, #40]	; (27990 <_UsageFault+0xa0>)
   27966:	f7db fb27 	bl	2fb8 <printk>
   2796a:	e7dd      	b.n	27928 <_UsageFault+0x38>
		PR_EXC("  Illegal use of the EPSR\n");
   2796c:	4809      	ldr	r0, [pc, #36]	; (27994 <_UsageFault+0xa4>)
   2796e:	f7db fb23 	bl	2fb8 <printk>
   27972:	e7de      	b.n	27932 <_UsageFault+0x42>
		PR_EXC("  Attempt to execute undefined instruction\n");
   27974:	4808      	ldr	r0, [pc, #32]	; (27998 <_UsageFault+0xa8>)
   27976:	f7db fb1f 	bl	2fb8 <printk>
   2797a:	e7df      	b.n	2793c <_UsageFault+0x4c>
   2797c:	00032f94 	.word	0x00032f94
   27980:	e000ed00 	.word	0xe000ed00
   27984:	00032fb0 	.word	0x00032fb0
   27988:	00032fc4 	.word	0x00032fc4
   2798c:	00032fe0 	.word	0x00032fe0
   27990:	00033000 	.word	0x00033000
   27994:	00033028 	.word	0x00033028
   27998:	00033044 	.word	0x00033044

0002799c <_HardFault>:
{
   2799c:	b510      	push	{r4, lr}
   2799e:	4604      	mov	r4, r0
	PR_EXC("***** HARD FAULT *****\n");
   279a0:	4816      	ldr	r0, [pc, #88]	; (279fc <_HardFault+0x60>)
   279a2:	f7db fb09 	bl	2fb8 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
   279a6:	4b16      	ldr	r3, [pc, #88]	; (27a00 <_HardFault+0x64>)
   279a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   279aa:	f013 0f02 	tst.w	r3, #2
   279ae:	d105      	bne.n	279bc <_HardFault+0x20>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
   279b0:	4b13      	ldr	r3, [pc, #76]	; (27a00 <_HardFault+0x64>)
   279b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   279b4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   279b8:	d104      	bne.n	279c4 <_HardFault+0x28>
   279ba:	bd10      	pop	{r4, pc}
		PR_EXC("  Bus fault on vector table read\n");
   279bc:	4811      	ldr	r0, [pc, #68]	; (27a04 <_HardFault+0x68>)
   279be:	f7db fafb 	bl	2fb8 <printk>
   279c2:	bd10      	pop	{r4, pc}
		PR_EXC("  Fault escalation (see below)\n");
   279c4:	4810      	ldr	r0, [pc, #64]	; (27a08 <_HardFault+0x6c>)
   279c6:	f7db faf7 	bl	2fb8 <printk>
		if (SCB_MMFSR) {
   279ca:	4b10      	ldr	r3, [pc, #64]	; (27a0c <_HardFault+0x70>)
   279cc:	781b      	ldrb	r3, [r3, #0]
   279ce:	b95b      	cbnz	r3, 279e8 <_HardFault+0x4c>
		} else if (SCB_BFSR) {
   279d0:	4b0f      	ldr	r3, [pc, #60]	; (27a10 <_HardFault+0x74>)
   279d2:	781b      	ldrb	r3, [r3, #0]
   279d4:	b96b      	cbnz	r3, 279f2 <_HardFault+0x56>
		} else if (SCB_UFSR) {
   279d6:	4b0f      	ldr	r3, [pc, #60]	; (27a14 <_HardFault+0x78>)
   279d8:	881b      	ldrh	r3, [r3, #0]
   279da:	b29b      	uxth	r3, r3
   279dc:	2b00      	cmp	r3, #0
   279de:	d0ec      	beq.n	279ba <_HardFault+0x1e>
			_UsageFault(esf);
   279e0:	4620      	mov	r0, r4
   279e2:	f7ff ff85 	bl	278f0 <_UsageFault>
}
   279e6:	e7e8      	b.n	279ba <_HardFault+0x1e>
			_MpuFault(esf, 1);
   279e8:	2101      	movs	r1, #1
   279ea:	4620      	mov	r0, r4
   279ec:	f7ff fed0 	bl	27790 <_MpuFault>
   279f0:	bd10      	pop	{r4, pc}
			_BusFault(esf, 1);
   279f2:	2101      	movs	r1, #1
   279f4:	4620      	mov	r0, r4
   279f6:	f7ff ff19 	bl	2782c <_BusFault>
   279fa:	bd10      	pop	{r4, pc}
   279fc:	00032e60 	.word	0x00032e60
   27a00:	e000ed00 	.word	0xe000ed00
   27a04:	00032e78 	.word	0x00032e78
   27a08:	00032e9c 	.word	0x00032e9c
   27a0c:	e000ed28 	.word	0xe000ed28
   27a10:	e000ed29 	.word	0xe000ed29
   27a14:	e000ed2c 	.word	0xe000ed2c

00027a18 <_FaultDump>:
 *   Address: 0xff001234
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
   27a18:	b508      	push	{r3, lr}
	switch (fault) {
   27a1a:	1ecb      	subs	r3, r1, #3
   27a1c:	2b09      	cmp	r3, #9
   27a1e:	d817      	bhi.n	27a50 <_FaultDump+0x38>
   27a20:	e8df f003 	tbb	[pc, r3]
   27a24:	100c0805 	.word	0x100c0805
   27a28:	16161616 	.word	0x16161616
   27a2c:	1316      	.short	0x1316
	case 3:
		_HardFault(esf);
   27a2e:	f7ff ffb5 	bl	2799c <_HardFault>
		break;
   27a32:	bd08      	pop	{r3, pc}
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	case 4:
		_MpuFault(esf, 0);
   27a34:	2100      	movs	r1, #0
   27a36:	f7ff feab 	bl	27790 <_MpuFault>
		break;
   27a3a:	bd08      	pop	{r3, pc}
	case 5:
		_BusFault(esf, 0);
   27a3c:	2100      	movs	r1, #0
   27a3e:	f7ff fef5 	bl	2782c <_BusFault>
		break;
   27a42:	bd08      	pop	{r3, pc}
	case 6:
		_UsageFault(esf);
   27a44:	f7ff ff54 	bl	278f0 <_UsageFault>
		break;
   27a48:	bd08      	pop	{r3, pc}
	case 12:
		_DebugMonitor(esf);
   27a4a:	f7ff fe7b 	bl	27744 <_DebugMonitor>
		break;
   27a4e:	bd08      	pop	{r3, pc}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	default:
		_ReservedException(esf, fault);
   27a50:	f7ff fe80 	bl	27754 <_ReservedException>
   27a54:	bd08      	pop	{r3, pc}
	...

00027a58 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   27a58:	b510      	push	{r4, lr}
   27a5a:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   27a5c:	4b05      	ldr	r3, [pc, #20]	; (27a74 <_Fault+0x1c>)
   27a5e:	6859      	ldr	r1, [r3, #4]

	FAULT_DUMP(esf, fault);
   27a60:	f3c1 0108 	ubfx	r1, r1, #0, #9
   27a64:	f7ff ffd8 	bl	27a18 <_FaultDump>

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   27a68:	4621      	mov	r1, r4
   27a6a:	2000      	movs	r0, #0
   27a6c:	f000 f8e0 	bl	27c30 <_SysFatalErrorHandler>
   27a70:	bd10      	pop	{r4, pc}
   27a72:	bf00      	nop
   27a74:	e000ed00 	.word	0xe000ed00

00027a78 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   27a78:	4a02      	ldr	r2, [pc, #8]	; (27a84 <_FaultInit+0xc>)
   27a7a:	6953      	ldr	r3, [r2, #20]
   27a7c:	f043 0310 	orr.w	r3, r3, #16
   27a80:	6153      	str	r3, [r2, #20]
   27a82:	4770      	bx	lr
   27a84:	e000ed00 	.word	0xe000ed00

00027a88 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   27a88:	b243      	sxtb	r3, r0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   27a8a:	095b      	lsrs	r3, r3, #5
   27a8c:	f000 001f 	and.w	r0, r0, #31
   27a90:	2201      	movs	r2, #1
   27a92:	fa02 f000 	lsl.w	r0, r2, r0
   27a96:	4a02      	ldr	r2, [pc, #8]	; (27aa0 <_arch_irq_enable+0x18>)
   27a98:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   27a9c:	4770      	bx	lr
   27a9e:	bf00      	nop
   27aa0:	e000e100 	.word	0xe000e100

00027aa4 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   27aa4:	b243      	sxtb	r3, r0
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   27aa6:	095b      	lsrs	r3, r3, #5
   27aa8:	f000 001f 	and.w	r0, r0, #31
   27aac:	2201      	movs	r2, #1
   27aae:	fa02 f000 	lsl.w	r0, r2, r0
   27ab2:	3320      	adds	r3, #32
   27ab4:	4a01      	ldr	r2, [pc, #4]	; (27abc <_arch_irq_disable+0x18>)
   27ab6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   27aba:	4770      	bx	lr
   27abc:	e000e100 	.word	0xe000e100

00027ac0 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
   27ac0:	0942      	lsrs	r2, r0, #5
   27ac2:	4b05      	ldr	r3, [pc, #20]	; (27ad8 <_arch_irq_is_enabled+0x18>)
   27ac4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   27ac8:	f000 001f 	and.w	r0, r0, #31
   27acc:	2301      	movs	r3, #1
   27ace:	fa03 f000 	lsl.w	r0, r3, r0
}
   27ad2:	4010      	ands	r0, r2
   27ad4:	4770      	bx	lr
   27ad6:	bf00      	nop
   27ad8:	e000e100 	.word	0xe000e100

00027adc <_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   27adc:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   27ade:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) < 0)
   27ae0:	2b00      	cmp	r3, #0
   27ae2:	db08      	blt.n	27af6 <_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27ae4:	0149      	lsls	r1, r1, #5
   27ae6:	b2c9      	uxtb	r1, r1
   27ae8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   27aec:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   27af0:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   27af4:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27af6:	f000 000f 	and.w	r0, r0, #15
   27afa:	0149      	lsls	r1, r1, #5
   27afc:	b2c9      	uxtb	r1, r1
   27afe:	4b01      	ldr	r3, [pc, #4]	; (27b04 <_irq_priority_set+0x28>)
   27b00:	5419      	strb	r1, [r3, r0]
   27b02:	4770      	bx	lr
   27b04:	e000ed14 	.word	0xe000ed14

00027b08 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
   27b08:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	__reserved();
   27b0a:	f000 f847 	bl	27b9c <__bus_fault>
   27b0e:	bd08      	pop	{r3, pc}

00027b10 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   27b10:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   27b12:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
   27b14:	4b04      	ldr	r3, [pc, #16]	; (27b28 <_arch_isr_direct_pm+0x18>)
   27b16:	6958      	ldr	r0, [r3, #20]
   27b18:	b908      	cbnz	r0, 27b1e <_arch_isr_direct_pm+0xe>
	}

#if defined(CONFIG_ARMV6_M)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("cpsie i" : : : "memory");
   27b1a:	b662      	cpsie	i
   27b1c:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   27b1e:	2200      	movs	r2, #0
   27b20:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
   27b22:	f000 f9b5 	bl	27e90 <_sys_power_save_idle_exit>
   27b26:	e7f8      	b.n	27b1a <_arch_isr_direct_pm+0xa>
   27b28:	20002880 	.word	0x20002880

00027b2c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   27b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b2e:	4605      	mov	r5, r0
   27b30:	460c      	mov	r4, r1
   27b32:	4616      	mov	r6, r2
   27b34:	461f      	mov	r7, r3
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
   27b36:	21aa      	movs	r1, #170	; 0xaa
   27b38:	4620      	mov	r0, r4
   27b3a:	f002 feed 	bl	2a918 <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   27b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27b40:	2204      	movs	r2, #4
   27b42:	9909      	ldr	r1, [sp, #36]	; 0x24
   27b44:	4628      	mov	r0, r5
   27b46:	f001 ff51 	bl	299ec <_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   27b4a:	2300      	movs	r3, #0
   27b4c:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
   27b4e:	652b      	str	r3, [r5, #80]	; 0x50
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
   27b50:	65ac      	str	r4, [r5, #88]	; 0x58
	thread->stack_info.size = (u32_t)stackSize;
   27b52:	65ee      	str	r6, [r5, #92]	; 0x5c
	struct __esf *pInitCtx;
	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   27b54:	f1a6 0120 	sub.w	r1, r6, #32
   27b58:	4421      	add	r1, r4
   27b5a:	f021 0107 	bic.w	r1, r1, #7
						     sizeof(struct __esf)));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   27b5e:	4a08      	ldr	r2, [pc, #32]	; (27b80 <_new_thread+0x54>)
   27b60:	f022 0201 	bic.w	r2, r2, #1
   27b64:	618a      	str	r2, [r1, #24]
	pInitCtx->a1 = (u32_t)pEntry;
   27b66:	600f      	str	r7, [r1, #0]
	pInitCtx->a2 = (u32_t)parameter1;
   27b68:	9a06      	ldr	r2, [sp, #24]
   27b6a:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   27b6c:	9a07      	ldr	r2, [sp, #28]
   27b6e:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   27b70:	9a08      	ldr	r2, [sp, #32]
   27b72:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
   27b74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   27b78:	61ca      	str	r2, [r1, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   27b7a:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   27b7c:	662b      	str	r3, [r5, #96]	; 0x60
   27b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27b80:	000296d5 	.word	0x000296d5

00027b84 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   27b84:	4901      	ldr	r1, [pc, #4]	; (27b8c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   27b86:	2210      	movs	r2, #16
	str r2, [r1]
   27b88:	600a      	str	r2, [r1, #0]
	bx lr
   27b8a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   27b8c:	e000ed10 	.word	0xe000ed10

00027b90 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   27b90:	4040      	eors	r0, r0
	msr BASEPRI, r0
   27b92:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
   27b96:	bf30      	wfi

	bx lr
   27b98:	4770      	bx	lr
   27b9a:	bf00      	nop

00027b9c <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
   27b9c:	4040      	eors	r0, r0
	msr BASEPRI, r0
   27b9e:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
   27ba2:	f8df c01c 	ldr.w	ip, [pc, #28]	; 27bc0 <__bus_fault+0x24>
	ldr ip, [ip]
   27ba6:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
   27baa:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
   27bae:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
   27bb0:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
   27bb4:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
   27bb8:	b500      	push	{lr}
	bl _Fault
   27bba:	f7ff ff4d 	bl	27a58 <_Fault>

	pop {pc}
   27bbe:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
   27bc0:	e000ed04 	.word	0xe000ed04

00027bc4 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   27bc4:	b538      	push	{r3, r4, r5, lr}
   27bc6:	4604      	mov	r4, r0
   27bc8:	460d      	mov	r5, r1
	switch (reason) {
   27bca:	2804      	cmp	r0, #4
   27bcc:	d017      	beq.n	27bfe <_NanoFatalErrorHandler+0x3a>
   27bce:	2805      	cmp	r0, #5
   27bd0:	d019      	beq.n	27c06 <_NanoFatalErrorHandler+0x42>
   27bd2:	2803      	cmp	r0, #3
   27bd4:	d004      	beq.n	27be0 <_NanoFatalErrorHandler+0x1c>
	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   27bd6:	4601      	mov	r1, r0
   27bd8:	480d      	ldr	r0, [pc, #52]	; (27c10 <_NanoFatalErrorHandler+0x4c>)
   27bda:	f7db f9ed 	bl	2fb8 <printk>
		break;
   27bde:	e002      	b.n	27be6 <_NanoFatalErrorHandler+0x22>
		printk("**** Kernel Allocation Failure! ****\n");
   27be0:	480c      	ldr	r0, [pc, #48]	; (27c14 <_NanoFatalErrorHandler+0x50>)
   27be2:	f7db f9e9 	bl	2fb8 <printk>
   27be6:	f001 fa2b 	bl	29040 <_impl_k_current_get>
	}
	printk("Current thread ID = %p\n"
   27bea:	69aa      	ldr	r2, [r5, #24]
   27bec:	4601      	mov	r1, r0
   27bee:	480a      	ldr	r0, [pc, #40]	; (27c18 <_NanoFatalErrorHandler+0x54>)
   27bf0:	f7db f9e2 	bl	2fb8 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   27bf4:	4629      	mov	r1, r5
   27bf6:	4620      	mov	r0, r4
   27bf8:	f000 f81a 	bl	27c30 <_SysFatalErrorHandler>
   27bfc:	bd38      	pop	{r3, r4, r5, pc}
		printk("***** Kernel OOPS! *****\n");
   27bfe:	4807      	ldr	r0, [pc, #28]	; (27c1c <_NanoFatalErrorHandler+0x58>)
   27c00:	f7db f9da 	bl	2fb8 <printk>
		break;
   27c04:	e7ef      	b.n	27be6 <_NanoFatalErrorHandler+0x22>
		printk("***** Kernel Panic! *****\n");
   27c06:	4806      	ldr	r0, [pc, #24]	; (27c20 <_NanoFatalErrorHandler+0x5c>)
   27c08:	f7db f9d6 	bl	2fb8 <printk>
		break;
   27c0c:	e7eb      	b.n	27be6 <_NanoFatalErrorHandler+0x22>
   27c0e:	bf00      	nop
   27c10:	000330d0 	.word	0x000330d0
   27c14:	00033070 	.word	0x00033070
   27c18:	000330f4 	.word	0x000330f4
   27c1c:	00033098 	.word	0x00033098
   27c20:	000330b4 	.word	0x000330b4

00027c24 <_do_kernel_oops>:
}

void _do_kernel_oops(const NANO_ESF *esf)
{
   27c24:	b508      	push	{r3, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
   27c26:	4601      	mov	r1, r0
   27c28:	6800      	ldr	r0, [r0, #0]
   27c2a:	f7ff ffcb 	bl	27bc4 <_NanoFatalErrorHandler>
   27c2e:	bd08      	pop	{r3, pc}

00027c30 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   27c30:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   27c32:	2805      	cmp	r0, #5
   27c34:	d00c      	beq.n	27c50 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   27c36:	f001 fd31 	bl	2969c <k_is_in_isr>
   27c3a:	b910      	cbnz	r0, 27c42 <_SysFatalErrorHandler+0x12>
   27c3c:	f001 fd42 	bl	296c4 <_is_thread_essential>
   27c40:	b158      	cbz	r0, 27c5a <_SysFatalErrorHandler+0x2a>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   27c42:	f001 fd2b 	bl	2969c <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
   27c46:	b130      	cbz	r0, 27c56 <_SysFatalErrorHandler+0x26>
   27c48:	4908      	ldr	r1, [pc, #32]	; (27c6c <_SysFatalErrorHandler+0x3c>)
   27c4a:	4809      	ldr	r0, [pc, #36]	; (27c70 <_SysFatalErrorHandler+0x40>)
   27c4c:	f7db f9b4 	bl	2fb8 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   27c50:	f7ff ff9e 	bl	27b90 <k_cpu_idle>
   27c54:	e7fc      	b.n	27c50 <_SysFatalErrorHandler+0x20>
		printk("Fatal fault in %s! Spinning...\n",
   27c56:	4907      	ldr	r1, [pc, #28]	; (27c74 <_SysFatalErrorHandler+0x44>)
   27c58:	e7f7      	b.n	27c4a <_SysFatalErrorHandler+0x1a>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   27c5a:	4c07      	ldr	r4, [pc, #28]	; (27c78 <_SysFatalErrorHandler+0x48>)
   27c5c:	68a1      	ldr	r1, [r4, #8]
   27c5e:	4807      	ldr	r0, [pc, #28]	; (27c7c <_SysFatalErrorHandler+0x4c>)
   27c60:	f7db f9aa 	bl	2fb8 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   27c64:	68a0      	ldr	r0, [r4, #8]
   27c66:	f000 f80b 	bl	27c80 <_impl_k_thread_abort>
	return;
   27c6a:	bd10      	pop	{r4, pc}
   27c6c:	00032540 	.word	0x00032540
   27c70:	00033144 	.word	0x00033144
   27c74:	00033130 	.word	0x00033130
   27c78:	20002880 	.word	0x20002880
   27c7c:	00033164 	.word	0x00033164

00027c80 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
   27c80:	b538      	push	{r3, r4, r5, lr}
   27c82:	4605      	mov	r5, r0
	__asm__ volatile(
   27c84:	f04f 0320 	mov.w	r3, #32
   27c88:	f3ef 8411 	mrs	r4, BASEPRI
   27c8c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
   27c90:	f001 fe28 	bl	298e4 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
   27c94:	4b0b      	ldr	r3, [pc, #44]	; (27cc4 <_impl_k_thread_abort+0x44>)
   27c96:	689b      	ldr	r3, [r3, #8]
   27c98:	429d      	cmp	r5, r3
   27c9a:	d003      	beq.n	27ca4 <_impl_k_thread_abort+0x24>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   27c9c:	4620      	mov	r0, r4
   27c9e:	f001 fa03 	bl	290a8 <_reschedule_threads>
   27ca2:	bd38      	pop	{r3, r4, r5, pc}
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   27ca4:	4b08      	ldr	r3, [pc, #32]	; (27cc8 <_impl_k_thread_abort+0x48>)
   27ca6:	685b      	ldr	r3, [r3, #4]
   27ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   27cac:	b12b      	cbz	r3, 27cba <_impl_k_thread_abort+0x3a>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   27cae:	4a06      	ldr	r2, [pc, #24]	; (27cc8 <_impl_k_thread_abort+0x48>)
   27cb0:	6853      	ldr	r3, [r2, #4]
   27cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   27cb6:	6053      	str	r3, [r2, #4]
   27cb8:	e7f0      	b.n	27c9c <_impl_k_thread_abort+0x1c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   27cba:	f001 f9ef 	bl	2909c <_update_time_slice_before_swap>
#endif

	return __swap(key);
   27cbe:	4620      	mov	r0, r4
   27cc0:	f7ff fd32 	bl	27728 <__swap>
   27cc4:	20002880 	.word	0x20002880
   27cc8:	e000ed00 	.word	0xe000ed00

00027ccc <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
   27ccc:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   27cce:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   27cd0:	4a0b      	ldr	r2, [pc, #44]	; (27d00 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   27cd2:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   27cd4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M)
	ittt ne
   27cd6:	bf1e      	ittt	ne
	movne	r1, #0
   27cd8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   27cda:	6151      	strne	r1, [r2, #20]
		blxne	_sys_power_save_idle_exit
   27cdc:	f000 f8d8 	blne	27e90 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   27ce0:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   27ce2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
   27ce6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   27cea:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   27cee:	4905      	ldr	r1, [pc, #20]	; (27d04 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   27cf0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   27cf2:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
   27cf4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
   27cf6:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
   27cfa:	f7ff bca5 	b.w	27648 <_ExcExit>
   27cfe:	0000      	.short	0x0000
	ldr r2, =_kernel
   27d00:	20002880 	.word	0x20002880
	ldr r1, =_sw_isr_table
   27d04:	000000dc 	.word	0x000000dc

00027d08 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   27d08:	2020      	movs	r0, #32
    msr BASEPRI, r0
   27d0a:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
   27d0e:	4809      	ldr	r0, [pc, #36]	; (27d34 <__reset+0x2c>)
    ldr r1, =0xaa
   27d10:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
   27d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
   27d18:	f002 fdfe 	bl	2a918 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   27d1c:	4805      	ldr	r0, [pc, #20]	; (27d34 <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   27d1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   27d22:	1840      	adds	r0, r0, r1
    msr PSP, r0
   27d24:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
   27d28:	2002      	movs	r0, #2
    msr CONTROL, r0
   27d2a:	f380 8814 	msr	CONTROL, r0

    b _PrepC
   27d2e:	f000 b807 	b.w	27d40 <_PrepC>
   27d32:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   27d34:	2000ad68 	.word	0x2000ad68

00027d38 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
   27d38:	bf30      	wfi
    b _SysNmiOnReset
   27d3a:	f7ff bffd 	b.w	27d38 <_SysNmiOnReset>
   27d3e:	bf00      	nop

00027d40 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   27d40:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   27d42:	4a07      	ldr	r2, [pc, #28]	; (27d60 <_PrepC+0x20>)
   27d44:	4b07      	ldr	r3, [pc, #28]	; (27d64 <_PrepC+0x24>)
   27d46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   27d4a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   27d4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27d50:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
   27d54:	f000 f9d6 	bl	28104 <_bss_zero>
	_data_copy();
   27d58:	f000 f9e0 	bl	2811c <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
   27d5c:	f000 fa00 	bl	28160 <_Cstart>
   27d60:	e000ed00 	.word	0xe000ed00
   27d64:	00000000 	.word	0x00000000

00027d68 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   27d68:	b508      	push	{r3, lr}
	handler();
   27d6a:	f7ff ffe5 	bl	27d38 <_SysNmiOnReset>
	_ExcExit();
   27d6e:	f7ff fc6b 	bl	27648 <_ExcExit>
   27d72:	bd08      	pop	{r3, pc}

00027d74 <_region_init>:

static void _region_init(u32_t index, u32_t region_addr,
			 u32_t region_attr)
{
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
   27d74:	4b05      	ldr	r3, [pc, #20]	; (27d8c <_region_init+0x18>)
   27d76:	6098      	str	r0, [r3, #8]
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   27d78:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
   27d7c:	4308      	orrs	r0, r1
   27d7e:	f040 0010 	orr.w	r0, r0, #16
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   27d82:	60d8      	str	r0, [r3, #12]
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
   27d84:	f042 0201 	orr.w	r2, r2, #1
   27d88:	611a      	str	r2, [r3, #16]
   27d8a:	4770      	bx	lr
   27d8c:	e000ed90 	.word	0xe000ed90

00027d90 <_arm_mpu_config>:
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
   27d90:	4b14      	ldr	r3, [pc, #80]	; (27de4 <_arm_mpu_config+0x54>)
   27d92:	681a      	ldr	r2, [r3, #0]
	u32_t type = ARM_MPU_DEV->type;
   27d94:	4b14      	ldr	r3, [pc, #80]	; (27de8 <_arm_mpu_config+0x58>)
   27d96:	681b      	ldr	r3, [r3, #0]
	if (mpu_config.num_regions > _get_num_regions()) {
   27d98:	f3c3 2307 	ubfx	r3, r3, #8, #8
   27d9c:	429a      	cmp	r2, r3
   27d9e:	d81f      	bhi.n	27de0 <_arm_mpu_config+0x50>
{
   27da0:	b510      	push	{r4, lr}
		return;
	}

	/* Disable MPU */
	ARM_MPU_DEV->ctrl = 0;
   27da2:	2400      	movs	r4, #0
   27da4:	4b10      	ldr	r3, [pc, #64]	; (27de8 <_arm_mpu_config+0x58>)
   27da6:	605c      	str	r4, [r3, #4]

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   27da8:	e00b      	b.n	27dc2 <_arm_mpu_config+0x32>
		_region_init(r_index,
			     mpu_config.mpu_regions[r_index].base,
   27daa:	4b0e      	ldr	r3, [pc, #56]	; (27de4 <_arm_mpu_config+0x54>)
   27dac:	6859      	ldr	r1, [r3, #4]
   27dae:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   27db2:	0093      	lsls	r3, r2, #2
   27db4:	18ca      	adds	r2, r1, r3
		_region_init(r_index,
   27db6:	6892      	ldr	r2, [r2, #8]
   27db8:	58c9      	ldr	r1, [r1, r3]
   27dba:	4620      	mov	r0, r4
   27dbc:	f7ff ffda 	bl	27d74 <_region_init>
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   27dc0:	3401      	adds	r4, #1
   27dc2:	4b08      	ldr	r3, [pc, #32]	; (27de4 <_arm_mpu_config+0x54>)
   27dc4:	681b      	ldr	r3, [r3, #0]
   27dc6:	429c      	cmp	r4, r3
   27dc8:	d3ef      	bcc.n	27daa <_arm_mpu_config+0x1a>
			     mpu_config.mpu_regions[r_index].attr);
	}

	/* Enable MPU */
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
   27dca:	2205      	movs	r2, #5
   27dcc:	4b06      	ldr	r3, [pc, #24]	; (27de8 <_arm_mpu_config+0x58>)
   27dce:	605a      	str	r2, [r3, #4]

	arm_mpu_enabled = 1;
   27dd0:	2201      	movs	r2, #1
   27dd2:	4b06      	ldr	r3, [pc, #24]	; (27dec <_arm_mpu_config+0x5c>)
   27dd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
   27dd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27dda:	f3bf 8f6f 	isb	sy
   27dde:	bd10      	pop	{r4, pc}
   27de0:	4770      	bx	lr
   27de2:	bf00      	nop
   27de4:	2000c638 	.word	0x2000c638
   27de8:	e000ed90 	.word	0xe000ed90
   27dec:	200027ac 	.word	0x200027ac

00027df0 <arm_mpu_init>:
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
   27df0:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);

	_arm_mpu_config();
   27df2:	f7ff ffcd 	bl	27d90 <_arm_mpu_config>

	return 0;
}
   27df6:	2000      	movs	r0, #0
   27df8:	bd08      	pop	{r3, pc}
	...

00027dfc <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   27dfc:	b538      	push	{r3, r4, r5, lr}
   27dfe:	4605      	mov	r5, r0
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   27e00:	4b07      	ldr	r3, [pc, #28]	; (27e20 <_sys_device_do_config_level+0x24>)
   27e02:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   27e06:	e004      	b.n	27e12 <_sys_device_do_config_level+0x16>
								info++) {
		struct device_config *device = info->config;
   27e08:	6823      	ldr	r3, [r4, #0]

		device->init(info);
   27e0a:	685b      	ldr	r3, [r3, #4]
   27e0c:	4620      	mov	r0, r4
   27e0e:	4798      	blx	r3
								info++) {
   27e10:	340c      	adds	r4, #12
	for (info = config_levels[level]; info < config_levels[level+1];
   27e12:	1c6b      	adds	r3, r5, #1
   27e14:	4a02      	ldr	r2, [pc, #8]	; (27e20 <_sys_device_do_config_level+0x24>)
   27e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   27e1a:	429c      	cmp	r4, r3
   27e1c:	d3f4      	bcc.n	27e08 <_sys_device_do_config_level+0xc>
		_k_object_init(info);
	}
}
   27e1e:	bd38      	pop	{r3, r4, r5, pc}
   27e20:	0003318c 	.word	0x0003318c

00027e24 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   27e24:	b538      	push	{r3, r4, r5, lr}
   27e26:	4605      	mov	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   27e28:	4c0a      	ldr	r4, [pc, #40]	; (27e54 <device_get_binding+0x30>)
   27e2a:	e000      	b.n	27e2e <device_get_binding+0xa>
   27e2c:	340c      	adds	r4, #12
   27e2e:	4b0a      	ldr	r3, [pc, #40]	; (27e58 <device_get_binding+0x34>)
   27e30:	429c      	cmp	r4, r3
   27e32:	d00c      	beq.n	27e4e <device_get_binding+0x2a>
		if (!info->driver_api) {
   27e34:	6863      	ldr	r3, [r4, #4]
   27e36:	2b00      	cmp	r3, #0
   27e38:	d0f8      	beq.n	27e2c <device_get_binding+0x8>
			continue;
		}

		if (name == info->config->name) {
   27e3a:	6823      	ldr	r3, [r4, #0]
   27e3c:	6819      	ldr	r1, [r3, #0]
   27e3e:	42a9      	cmp	r1, r5
   27e40:	d006      	beq.n	27e50 <device_get_binding+0x2c>
			return info;
		}

		if (!strcmp(name, info->config->name)) {
   27e42:	4628      	mov	r0, r5
   27e44:	f7d8 fae0 	bl	408 <strcmp>
   27e48:	2800      	cmp	r0, #0
   27e4a:	d1ef      	bne.n	27e2c <device_get_binding+0x8>
   27e4c:	e000      	b.n	27e50 <device_get_binding+0x2c>
			return info;
		}
	}

	return NULL;
   27e4e:	2400      	movs	r4, #0
}
   27e50:	4620      	mov	r0, r4
   27e52:	bd38      	pop	{r3, r4, r5, pc}
   27e54:	2000d034 	.word	0x2000d034
   27e58:	2000d0f4 	.word	0x2000d0f4

00027e5c <set_kernel_idle_time_in_ticks>:
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
   27e5c:	4b01      	ldr	r3, [pc, #4]	; (27e64 <set_kernel_idle_time_in_ticks+0x8>)
   27e5e:	6158      	str	r0, [r3, #20]
   27e60:	4770      	bx	lr
   27e62:	bf00      	nop
   27e64:	20002880 	.word	0x20002880

00027e68 <_sys_power_save_idle>:
#else
#define set_kernel_idle_time_in_ticks(x) do { } while (0)
#endif

static void _sys_power_save_idle(s32_t ticks)
{
   27e68:	b510      	push	{r4, lr}
   27e6a:	4604      	mov	r4, r0
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
   27e6c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27e70:	d003      	beq.n	27e7a <_sys_power_save_idle+0x12>
   27e72:	4b06      	ldr	r3, [pc, #24]	; (27e8c <_sys_power_save_idle+0x24>)
   27e74:	681b      	ldr	r3, [r3, #0]
   27e76:	4298      	cmp	r0, r3
   27e78:	db02      	blt.n	27e80 <_sys_power_save_idle+0x18>
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
   27e7a:	4620      	mov	r0, r4
   27e7c:	f7da fb10 	bl	24a0 <_timer_idle_enter>
	}

	set_kernel_idle_time_in_ticks(ticks);
   27e80:	4620      	mov	r0, r4
   27e82:	f7ff ffeb 	bl	27e5c <set_kernel_idle_time_in_ticks>
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   27e86:	f7ff fe83 	bl	27b90 <k_cpu_idle>
   27e8a:	bd10      	pop	{r4, pc}
   27e8c:	2000c67c 	.word	0x2000c67c

00027e90 <_sys_power_save_idle_exit>:
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
   27e90:	b508      	push	{r3, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   27e92:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27e96:	d003      	beq.n	27ea0 <_sys_power_save_idle_exit+0x10>
   27e98:	4b03      	ldr	r3, [pc, #12]	; (27ea8 <_sys_power_save_idle_exit+0x18>)
   27e9a:	681b      	ldr	r3, [r3, #0]
   27e9c:	4298      	cmp	r0, r3
   27e9e:	db01      	blt.n	27ea4 <_sys_power_save_idle_exit+0x14>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   27ea0:	f7da fb14 	bl	24cc <_timer_idle_exit>
   27ea4:	bd08      	pop	{r3, pc}
   27ea6:	bf00      	nop
   27ea8:	2000c67c 	.word	0x2000c67c

00027eac <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   27eac:	b508      	push	{r3, lr}
   27eae:	e005      	b.n	27ebc <idle+0x10>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27eb0:	2300      	movs	r3, #0
   27eb2:	e00e      	b.n	27ed2 <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   27eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__idle_time_stamp = (u64_t)k_cycle_get_32();
#endif

	for (;;) {
		(void)irq_lock();
		_sys_power_save_idle(_get_next_timeout_expiry());
   27eb8:	f7ff ffd6 	bl	27e68 <_sys_power_save_idle>
   27ebc:	f04f 0220 	mov.w	r2, #32
   27ec0:	f3ef 8311 	mrs	r3, BASEPRI
   27ec4:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   27ec8:	4a04      	ldr	r2, [pc, #16]	; (27edc <idle+0x30>)
   27eca:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27ece:	4293      	cmp	r3, r2
   27ed0:	d0ee      	beq.n	27eb0 <idle+0x4>
   27ed2:	2b00      	cmp	r3, #0
   27ed4:	d0ee      	beq.n	27eb4 <idle+0x8>
   27ed6:	6918      	ldr	r0, [r3, #16]
   27ed8:	e7ee      	b.n	27eb8 <idle+0xc>
   27eda:	bf00      	nop
   27edc:	20002880 	.word	0x20002880

00027ee0 <switch_to_main_thread>:

	kernel_arch_init();
}

static void switch_to_main_thread(void)
{
   27ee0:	b480      	push	{r7}
   27ee2:	af00      	add	r7, sp, #0
	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   27ee4:	4b07      	ldr	r3, [pc, #28]	; (27f04 <switch_to_main_thread+0x24>)
   27ee6:	f023 0307 	bic.w	r3, r3, #7

	_current = main_thread;
   27eea:	4907      	ldr	r1, [pc, #28]	; (27f08 <switch_to_main_thread+0x28>)
   27eec:	4a07      	ldr	r2, [pc, #28]	; (27f0c <switch_to_main_thread+0x2c>)
   27eee:	6091      	str	r1, [r2, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   27ef0:	4c07      	ldr	r4, [pc, #28]	; (27f10 <switch_to_main_thread+0x30>)
   27ef2:	4a08      	ldr	r2, [pc, #32]	; (27f14 <switch_to_main_thread+0x34>)
   27ef4:	f383 8809 	msr	PSP, r3
   27ef8:	2100      	movs	r1, #0
   27efa:	f381 8811 	msr	BASEPRI, r1
   27efe:	4610      	mov	r0, r2
   27f00:	4720      	bx	r4
   27f02:	bf00      	nop
   27f04:	2000ac28 	.word	0x2000ac28
   27f08:	20002818 	.word	0x20002818
   27f0c:	20002880 	.word	0x20002880
   27f10:	000296d5 	.word	0x000296d5
   27f14:	00028139 	.word	0x00028139

00027f18 <prepare_multithreading>:
{
   27f18:	b5f0      	push	{r4, r5, r6, r7, lr}
   27f1a:	b087      	sub	sp, #28
	_IntLibInit();
   27f1c:	f7ff fbaa 	bl	27674 <_IntLibInit>
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   27f20:	2300      	movs	r3, #0
   27f22:	e007      	b.n	27f34 <prepare_multithreading+0x1c>
		sys_dlist_init(&_ready_q.q[ii]);
   27f24:	1d18      	adds	r0, r3, #4
   27f26:	4927      	ldr	r1, [pc, #156]	; (27fc4 <prepare_multithreading+0xac>)
   27f28:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
	list->head = (sys_dnode_t *)list;
   27f2c:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
	list->tail = (sys_dnode_t *)list;
   27f30:	6052      	str	r2, [r2, #4]
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   27f32:	3301      	adds	r3, #1
   27f34:	2b1f      	cmp	r3, #31
   27f36:	ddf5      	ble.n	27f24 <prepare_multithreading+0xc>
	_ready_q.cache = _main_thread;
   27f38:	4e22      	ldr	r6, [pc, #136]	; (27fc4 <prepare_multithreading+0xac>)
   27f3a:	4d23      	ldr	r5, [pc, #140]	; (27fc8 <prepare_multithreading+0xb0>)
   27f3c:	61b5      	str	r5, [r6, #24]
	_setup_new_thread(_main_thread, _main_stack,
   27f3e:	2701      	movs	r7, #1
   27f40:	9704      	str	r7, [sp, #16]
   27f42:	2400      	movs	r4, #0
   27f44:	9403      	str	r4, [sp, #12]
   27f46:	9402      	str	r4, [sp, #8]
   27f48:	9401      	str	r4, [sp, #4]
   27f4a:	9400      	str	r4, [sp, #0]
   27f4c:	4b1f      	ldr	r3, [pc, #124]	; (27fcc <prepare_multithreading+0xb4>)
   27f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   27f52:	491f      	ldr	r1, [pc, #124]	; (27fd0 <prepare_multithreading+0xb8>)
   27f54:	4628      	mov	r0, r5
   27f56:	f001 fc9b 	bl	29890 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   27f5a:	7a6b      	ldrb	r3, [r5, #9]
   27f5c:	f023 0304 	bic.w	r3, r3, #4
   27f60:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   27f62:	4628      	mov	r0, r5
   27f64:	f000 ff08 	bl	28d78 <_add_thread_to_ready_q>
	_setup_new_thread(_idle_thread, _idle_stack,
   27f68:	4d1a      	ldr	r5, [pc, #104]	; (27fd4 <prepare_multithreading+0xbc>)
   27f6a:	9704      	str	r7, [sp, #16]
   27f6c:	230f      	movs	r3, #15
   27f6e:	9303      	str	r3, [sp, #12]
   27f70:	9402      	str	r4, [sp, #8]
   27f72:	9401      	str	r4, [sp, #4]
   27f74:	9400      	str	r4, [sp, #0]
   27f76:	4b18      	ldr	r3, [pc, #96]	; (27fd8 <prepare_multithreading+0xc0>)
   27f78:	f44f 72a0 	mov.w	r2, #320	; 0x140
   27f7c:	4917      	ldr	r1, [pc, #92]	; (27fdc <prepare_multithreading+0xc4>)
   27f7e:	4628      	mov	r0, r5
   27f80:	f001 fc86 	bl	29890 <_setup_new_thread>
   27f84:	7a6b      	ldrb	r3, [r5, #9]
   27f86:	f023 0304 	bic.w	r3, r3, #4
   27f8a:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_idle_thread);
   27f8c:	4628      	mov	r0, r5
   27f8e:	f000 fef3 	bl	28d78 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   27f92:	f106 030c 	add.w	r3, r6, #12
   27f96:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
   27f98:	6133      	str	r3, [r6, #16]
 *
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   27f9a:	4b11      	ldr	r3, [pc, #68]	; (27fe0 <prepare_multithreading+0xc8>)
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   27f9c:	f383 8808 	msr	MSP, r3
   27fa0:	4b10      	ldr	r3, [pc, #64]	; (27fe4 <prepare_multithreading+0xcc>)
   27fa2:	22e0      	movs	r2, #224	; 0xe0
   27fa4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   27fa8:	77dc      	strb	r4, [r3, #31]
   27faa:	761c      	strb	r4, [r3, #24]
   27fac:	765c      	strb	r4, [r3, #25]
   27fae:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   27fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   27fb2:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   27fb6:	625a      	str	r2, [r3, #36]	; 0x24
	_FaultInit();
   27fb8:	f7ff fd5e 	bl	27a78 <_FaultInit>
	_CpuIdleInit();
   27fbc:	f7ff fde2 	bl	27b84 <_CpuIdleInit>
}
   27fc0:	b007      	add	sp, #28
   27fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27fc4:	20002880 	.word	0x20002880
   27fc8:	20002818 	.word	0x20002818
   27fcc:	00028139 	.word	0x00028139
   27fd0:	2000a428 	.word	0x2000a428
   27fd4:	200027b0 	.word	0x200027b0
   27fd8:	00027ead 	.word	0x00027ead
   27fdc:	2000ac28 	.word	0x2000ac28
   27fe0:	2000b568 	.word	0x2000b568
   27fe4:	e000ed00 	.word	0xe000ed00

00027fe8 <k_call_stacks_analyze>:
{
   27fe8:	b500      	push	{lr}
   27fea:	b085      	sub	sp, #20
	printk("Kernel stacks:\n");
   27fec:	483a      	ldr	r0, [pc, #232]	; (280d8 <k_call_stacks_analyze+0xf0>)
   27fee:	f7da ffe3 	bl	2fb8 <printk>
   27ff2:	2200      	movs	r2, #0
	size_t unused = 0;
   27ff4:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27ff6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   27ffa:	d206      	bcs.n	2800a <k_call_stacks_analyze+0x22>
		if ((unsigned char)stack[i] == 0xaa) {
   27ffc:	4937      	ldr	r1, [pc, #220]	; (280dc <k_call_stacks_analyze+0xf4>)
   27ffe:	5c89      	ldrb	r1, [r1, r2]
   28000:	29aa      	cmp	r1, #170	; 0xaa
   28002:	d102      	bne.n	2800a <k_call_stacks_analyze+0x22>
			unused++;
   28004:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   28006:	3201      	adds	r2, #1
   28008:	e7f5      	b.n	27ff6 <k_call_stacks_analyze+0xe>
	pcnt = ((size - unused) * 100) / size;
   2800a:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   2800e:	2264      	movs	r2, #100	; 0x64
   28010:	fb02 f201 	mul.w	r2, r2, r1
   28014:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   28016:	9202      	str	r2, [sp, #8]
   28018:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2801c:	9201      	str	r2, [sp, #4]
   2801e:	9100      	str	r1, [sp, #0]
   28020:	492f      	ldr	r1, [pc, #188]	; (280e0 <k_call_stacks_analyze+0xf8>)
   28022:	4830      	ldr	r0, [pc, #192]	; (280e4 <k_call_stacks_analyze+0xfc>)
   28024:	f7da ffc8 	bl	2fb8 <printk>
	for (i = 0; i < size; i++) {
   28028:	2200      	movs	r2, #0
	size_t unused = 0;
   2802a:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   2802c:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
   28030:	d206      	bcs.n	28040 <k_call_stacks_analyze+0x58>
		if ((unsigned char)stack[i] == 0xaa) {
   28032:	492d      	ldr	r1, [pc, #180]	; (280e8 <k_call_stacks_analyze+0x100>)
   28034:	5c89      	ldrb	r1, [r1, r2]
   28036:	29aa      	cmp	r1, #170	; 0xaa
   28038:	d102      	bne.n	28040 <k_call_stacks_analyze+0x58>
			unused++;
   2803a:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   2803c:	3201      	adds	r2, #1
   2803e:	e7f5      	b.n	2802c <k_call_stacks_analyze+0x44>
	pcnt = ((size - unused) * 100) / size;
   28040:	f5c3 71a0 	rsb	r1, r3, #320	; 0x140
   28044:	2264      	movs	r2, #100	; 0x64
   28046:	fb02 f201 	mul.w	r2, r2, r1
   2804a:	4828      	ldr	r0, [pc, #160]	; (280ec <k_call_stacks_analyze+0x104>)
   2804c:	fba0 0202 	umull	r0, r2, r0, r2
   28050:	0a12      	lsrs	r2, r2, #8
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   28052:	9202      	str	r2, [sp, #8]
   28054:	f44f 72a0 	mov.w	r2, #320	; 0x140
   28058:	9201      	str	r2, [sp, #4]
   2805a:	9100      	str	r1, [sp, #0]
   2805c:	4924      	ldr	r1, [pc, #144]	; (280f0 <k_call_stacks_analyze+0x108>)
   2805e:	4821      	ldr	r0, [pc, #132]	; (280e4 <k_call_stacks_analyze+0xfc>)
   28060:	f7da ffaa 	bl	2fb8 <printk>
	for (i = 0; i < size; i++) {
   28064:	2200      	movs	r2, #0
	size_t unused = 0;
   28066:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   28068:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2806c:	d206      	bcs.n	2807c <k_call_stacks_analyze+0x94>
		if ((unsigned char)stack[i] == 0xaa) {
   2806e:	4921      	ldr	r1, [pc, #132]	; (280f4 <k_call_stacks_analyze+0x10c>)
   28070:	5c89      	ldrb	r1, [r1, r2]
   28072:	29aa      	cmp	r1, #170	; 0xaa
   28074:	d102      	bne.n	2807c <k_call_stacks_analyze+0x94>
			unused++;
   28076:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   28078:	3201      	adds	r2, #1
   2807a:	e7f5      	b.n	28068 <k_call_stacks_analyze+0x80>
	pcnt = ((size - unused) * 100) / size;
   2807c:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   28080:	2264      	movs	r2, #100	; 0x64
   28082:	fb02 f201 	mul.w	r2, r2, r1
   28086:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   28088:	9202      	str	r2, [sp, #8]
   2808a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2808e:	9201      	str	r2, [sp, #4]
   28090:	9100      	str	r1, [sp, #0]
   28092:	4919      	ldr	r1, [pc, #100]	; (280f8 <k_call_stacks_analyze+0x110>)
   28094:	4813      	ldr	r0, [pc, #76]	; (280e4 <k_call_stacks_analyze+0xfc>)
   28096:	f7da ff8f 	bl	2fb8 <printk>
	for (i = 0; i < size; i++) {
   2809a:	2200      	movs	r2, #0
	size_t unused = 0;
   2809c:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   2809e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   280a2:	d206      	bcs.n	280b2 <k_call_stacks_analyze+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
   280a4:	4915      	ldr	r1, [pc, #84]	; (280fc <k_call_stacks_analyze+0x114>)
   280a6:	5c89      	ldrb	r1, [r1, r2]
   280a8:	29aa      	cmp	r1, #170	; 0xaa
   280aa:	d102      	bne.n	280b2 <k_call_stacks_analyze+0xca>
			unused++;
   280ac:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   280ae:	3201      	adds	r2, #1
   280b0:	e7f5      	b.n	2809e <k_call_stacks_analyze+0xb6>
	pcnt = ((size - unused) * 100) / size;
   280b2:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
   280b6:	2264      	movs	r2, #100	; 0x64
   280b8:	fb02 f201 	mul.w	r2, r2, r1
   280bc:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   280be:	9202      	str	r2, [sp, #8]
   280c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   280c4:	9201      	str	r2, [sp, #4]
   280c6:	9100      	str	r1, [sp, #0]
   280c8:	490d      	ldr	r1, [pc, #52]	; (28100 <k_call_stacks_analyze+0x118>)
   280ca:	4806      	ldr	r0, [pc, #24]	; (280e4 <k_call_stacks_analyze+0xfc>)
   280cc:	f7da ff74 	bl	2fb8 <printk>
}
   280d0:	b005      	add	sp, #20
   280d2:	f85d fb04 	ldr.w	pc, [sp], #4
   280d6:	bf00      	nop
   280d8:	000331a8 	.word	0x000331a8
   280dc:	2000a428 	.word	0x2000a428
   280e0:	000331b8 	.word	0x000331b8
   280e4:	00031558 	.word	0x00031558
   280e8:	2000ac28 	.word	0x2000ac28
   280ec:	cccccccd 	.word	0xcccccccd
   280f0:	000331c4 	.word	0x000331c4
   280f4:	2000ad68 	.word	0x2000ad68
   280f8:	000331d0 	.word	0x000331d0
   280fc:	2000b568 	.word	0x2000b568
   28100:	000331dc 	.word	0x000331dc

00028104 <_bss_zero>:
{
   28104:	b508      	push	{r3, lr}
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
   28106:	4803      	ldr	r0, [pc, #12]	; (28114 <_bss_zero+0x10>)
	memset(&__bss_start, 0,
   28108:	4a03      	ldr	r2, [pc, #12]	; (28118 <_bss_zero+0x14>)
   2810a:	1a12      	subs	r2, r2, r0
   2810c:	2100      	movs	r1, #0
   2810e:	f002 fc03 	bl	2a918 <memset>
   28112:	bd08      	pop	{r3, pc}
   28114:	20000000 	.word	0x20000000
   28118:	20002d18 	.word	0x20002d18

0002811c <_data_copy>:
{
   2811c:	b508      	push	{r3, lr}
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
   2811e:	4803      	ldr	r0, [pc, #12]	; (2812c <_data_copy+0x10>)
	memcpy(&__data_ram_start, &__data_rom_start,
   28120:	4a03      	ldr	r2, [pc, #12]	; (28130 <_data_copy+0x14>)
   28122:	1a12      	subs	r2, r2, r0
   28124:	4903      	ldr	r1, [pc, #12]	; (28134 <_data_copy+0x18>)
   28126:	f7d8 f8cb 	bl	2c0 <memcpy>
   2812a:	bd08      	pop	{r3, pc}
   2812c:	2000b968 	.word	0x2000b968
   28130:	2000d5b4 	.word	0x2000d5b4
   28134:	00033464 	.word	0x00033464

00028138 <_main>:
{
   28138:	b508      	push	{r3, lr}
	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2813a:	2002      	movs	r0, #2
   2813c:	f7ff fe5e 	bl	27dfc <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   28140:	2003      	movs	r0, #3
   28142:	f7ff fe5b 	bl	27dfc <_sys_device_do_config_level>
	_init_static_threads();
   28146:	f001 fc11 	bl	2996c <_init_static_threads>
	main();
   2814a:	f7d9 fc5b 	bl	1a04 <main>
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   2814e:	4a03      	ldr	r2, [pc, #12]	; (2815c <_main+0x24>)
   28150:	7a13      	ldrb	r3, [r2, #8]
   28152:	f023 0301 	bic.w	r3, r3, #1
   28156:	7213      	strb	r3, [r2, #8]
   28158:	bd08      	pop	{r3, pc}
   2815a:	bf00      	nop
   2815c:	20002818 	.word	0x20002818

00028160 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   28160:	b508      	push	{r3, lr}
	 * Initialize kernel data structures. This step includes
	 * initializing the interrupt subsystem, which must be performed
	 * before the hardware initialization phase.
	 */

	prepare_multithreading(dummy_thread);
   28162:	2000      	movs	r0, #0
   28164:	f7ff fed8 	bl	27f18 <prepare_multithreading>

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   28168:	2000      	movs	r0, #0
   2816a:	f7ff fe47 	bl	27dfc <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2816e:	2001      	movs	r0, #1
   28170:	f7ff fe44 	bl	27dfc <_sys_device_do_config_level>
	__stack_chk_guard = (void *)sys_rand32_get();
#endif

	/* display boot banner */

	switch_to_main_thread();
   28174:	f7ff feb4 	bl	27ee0 <switch_to_main_thread>

00028178 <create_free_list>:
static void create_free_list(struct k_mem_slab *slab)
{
	u32_t j;
	char *p;

	slab->free_list = NULL;
   28178:	2200      	movs	r2, #0
   2817a:	6142      	str	r2, [r0, #20]
	p = slab->buffer;
   2817c:	6903      	ldr	r3, [r0, #16]

	for (j = 0; j < slab->num_blocks; j++) {
   2817e:	e005      	b.n	2818c <create_free_list+0x14>
		*(char **)p = slab->free_list;
   28180:	6941      	ldr	r1, [r0, #20]
   28182:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   28184:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   28186:	68c1      	ldr	r1, [r0, #12]
   28188:	440b      	add	r3, r1
	for (j = 0; j < slab->num_blocks; j++) {
   2818a:	3201      	adds	r2, #1
   2818c:	6881      	ldr	r1, [r0, #8]
   2818e:	428a      	cmp	r2, r1
   28190:	d3f6      	bcc.n	28180 <create_free_list+0x8>
	}
}
   28192:	4770      	bx	lr

00028194 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   28194:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   28196:	4c05      	ldr	r4, [pc, #20]	; (281ac <init_mem_slab_module+0x18>)
   28198:	e003      	b.n	281a2 <init_mem_slab_module+0xe>
	     slab < _k_mem_slab_list_end;
	     slab++) {
		create_free_list(slab);
   2819a:	4620      	mov	r0, r4
   2819c:	f7ff ffec 	bl	28178 <create_free_list>
	     slab++) {
   281a0:	341c      	adds	r4, #28
	for (slab = _k_mem_slab_list_start;
   281a2:	4b03      	ldr	r3, [pc, #12]	; (281b0 <init_mem_slab_module+0x1c>)
   281a4:	429c      	cmp	r4, r3
   281a6:	d3f8      	bcc.n	2819a <init_mem_slab_module+0x6>
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   281a8:	2000      	movs	r0, #0
   281aa:	bd10      	pop	{r4, pc}
   281ac:	2000d100 	.word	0x2000d100
   281b0:	2000d138 	.word	0x2000d138

000281b4 <k_mem_slab_alloc>:

	_k_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   281b4:	b538      	push	{r3, r4, r5, lr}
   281b6:	f04f 0320 	mov.w	r3, #32
   281ba:	f3ef 8411 	mrs	r4, BASEPRI
   281be:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   281c2:	6943      	ldr	r3, [r0, #20]
   281c4:	b15b      	cbz	r3, 281de <k_mem_slab_alloc+0x2a>
		/* take a free block */
		*mem = slab->free_list;
   281c6:	600b      	str	r3, [r1, #0]
		slab->free_list = *(char **)(slab->free_list);
   281c8:	6943      	ldr	r3, [r0, #20]
   281ca:	681b      	ldr	r3, [r3, #0]
   281cc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   281ce:	6983      	ldr	r3, [r0, #24]
   281d0:	3301      	adds	r3, #1
   281d2:	6183      	str	r3, [r0, #24]
		result = 0;
   281d4:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   281d6:	f384 8811 	msr	BASEPRI, r4
	}

	irq_unlock(key);

	return result;
}
   281da:	4618      	mov	r0, r3
   281dc:	bd38      	pop	{r3, r4, r5, pc}
	} else if (timeout == K_NO_WAIT) {
   281de:	b922      	cbnz	r2, 281ea <k_mem_slab_alloc+0x36>
		*mem = NULL;
   281e0:	2300      	movs	r3, #0
   281e2:	600b      	str	r3, [r1, #0]
		result = -ENOMEM;
   281e4:	f06f 030b 	mvn.w	r3, #11
   281e8:	e7f5      	b.n	281d6 <k_mem_slab_alloc+0x22>
   281ea:	460d      	mov	r5, r1
		_pend_current_thread(&slab->wait_q, timeout);
   281ec:	4611      	mov	r1, r2
   281ee:	f000 fed7 	bl	28fa0 <_pend_current_thread>
	_update_time_slice_before_swap();
   281f2:	f000 ff53 	bl	2909c <_update_time_slice_before_swap>
	return __swap(key);
   281f6:	4620      	mov	r0, r4
   281f8:	f7ff fa96 	bl	27728 <__swap>
		if (result == 0) {
   281fc:	4603      	mov	r3, r0
   281fe:	2800      	cmp	r0, #0
   28200:	d1eb      	bne.n	281da <k_mem_slab_alloc+0x26>
			*mem = _current->base.swap_data;
   28202:	4a02      	ldr	r2, [pc, #8]	; (2820c <k_mem_slab_alloc+0x58>)
   28204:	6892      	ldr	r2, [r2, #8]
   28206:	68d2      	ldr	r2, [r2, #12]
   28208:	602a      	str	r2, [r5, #0]
   2820a:	e7e6      	b.n	281da <k_mem_slab_alloc+0x26>
   2820c:	20002880 	.word	0x20002880

00028210 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   28210:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   28212:	f04f 0320 	mov.w	r3, #32
   28216:	f3ef 8411 	mrs	r4, BASEPRI
   2821a:	f383 8811 	msr	BASEPRI, r3
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   2821e:	4b3d      	ldr	r3, [pc, #244]	; (28314 <k_mem_slab_free+0x104>)
   28220:	681b      	ldr	r3, [r3, #0]
   28222:	2b00      	cmp	r3, #0
   28224:	d13a      	bne.n	2829c <k_mem_slab_free+0x8c>
	return list->head == list;
   28226:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28228:	4298      	cmp	r0, r3
   2822a:	d048      	beq.n	282be <k_mem_slab_free+0xae>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   2822c:	b14b      	cbz	r3, 28242 <k_mem_slab_free+0x32>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   2822e:	685a      	ldr	r2, [r3, #4]
   28230:	681d      	ldr	r5, [r3, #0]
   28232:	6015      	str	r5, [r2, #0]
	node->next->prev = node->prev;
   28234:	681a      	ldr	r2, [r3, #0]
   28236:	685d      	ldr	r5, [r3, #4]
   28238:	6055      	str	r5, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2823a:	7a5a      	ldrb	r2, [r3, #9]
   2823c:	f022 0202 	bic.w	r2, r2, #2
   28240:	725a      	strb	r2, [r3, #9]
	int key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&slab->wait_q);

	if (pending_thread) {
   28242:	2b00      	cmp	r3, #0
   28244:	d05c      	beq.n	28300 <k_mem_slab_free+0xf0>
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   28246:	680a      	ldr	r2, [r1, #0]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   28248:	2100      	movs	r1, #0
   2824a:	6659      	str	r1, [r3, #100]	; 0x64
	thread->base.swap_data = data;
   2824c:	60da      	str	r2, [r3, #12]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2824e:	6a19      	ldr	r1, [r3, #32]
   28250:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   28254:	d013      	beq.n	2827e <k_mem_slab_free+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   28256:	f103 0210 	add.w	r2, r3, #16
	return list->tail == node;
   2825a:	482f      	ldr	r0, [pc, #188]	; (28318 <k_mem_slab_free+0x108>)
   2825c:	6900      	ldr	r0, [r0, #16]
   2825e:	4282      	cmp	r2, r0
   28260:	d004      	beq.n	2826c <k_mem_slab_free+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28262:	b102      	cbz	r2, 28266 <k_mem_slab_free+0x56>
	return (node == list->tail) ? NULL : node->next;
   28264:	691a      	ldr	r2, [r3, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   28266:	6910      	ldr	r0, [r2, #16]
   28268:	4401      	add	r1, r0
   2826a:	6111      	str	r1, [r2, #16]
	node->prev->next = node->next;
   2826c:	695a      	ldr	r2, [r3, #20]
   2826e:	6919      	ldr	r1, [r3, #16]
   28270:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   28272:	691a      	ldr	r2, [r3, #16]
   28274:	6959      	ldr	r1, [r3, #20]
   28276:	6051      	str	r1, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2827c:	621a      	str	r2, [r3, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2827e:	7a5a      	ldrb	r2, [r3, #9]
   28280:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   28284:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28286:	f012 0f1b 	tst.w	r2, #27
   2828a:	d11c      	bne.n	282c6 <k_mem_slab_free+0xb6>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2828c:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2828e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28292:	d016      	beq.n	282c2 <k_mem_slab_free+0xb2>
   28294:	2200      	movs	r2, #0
   28296:	e017      	b.n	282c8 <k_mem_slab_free+0xb8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28298:	2300      	movs	r3, #0
   2829a:	e003      	b.n	282a4 <k_mem_slab_free+0x94>
   2829c:	4605      	mov	r5, r0
	return list->head == list;
   2829e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   282a0:	4298      	cmp	r0, r3
   282a2:	d0f9      	beq.n	28298 <k_mem_slab_free+0x88>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   282a4:	2b00      	cmp	r3, #0
   282a6:	d0c1      	beq.n	2822c <k_mem_slab_free+0x1c>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   282a8:	6a1a      	ldr	r2, [r3, #32]
			if (_is_thread_timeout_expired(thread)) {
   282aa:	f112 0f02 	cmn.w	r2, #2
   282ae:	d1bd      	bne.n	2822c <k_mem_slab_free+0x1c>
	return (node == list->tail) ? NULL : node->next;
   282b0:	686a      	ldr	r2, [r5, #4]
   282b2:	4293      	cmp	r3, r2
   282b4:	d001      	beq.n	282ba <k_mem_slab_free+0xaa>
   282b6:	681b      	ldr	r3, [r3, #0]
   282b8:	e7f4      	b.n	282a4 <k_mem_slab_free+0x94>
   282ba:	2300      	movs	r3, #0
   282bc:	e7f2      	b.n	282a4 <k_mem_slab_free+0x94>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   282be:	2300      	movs	r3, #0
   282c0:	e7b4      	b.n	2822c <k_mem_slab_free+0x1c>
	return !(_is_thread_prevented_from_running(thread) ||
   282c2:	2201      	movs	r2, #1
   282c4:	e000      	b.n	282c8 <k_mem_slab_free+0xb8>
   282c6:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   282c8:	b94a      	cbnz	r2, 282de <k_mem_slab_free+0xce>
	return _is_preempt(_current) && __must_switch_threads();
   282ca:	4b13      	ldr	r3, [pc, #76]	; (28318 <k_mem_slab_free+0x108>)
   282cc:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   282ce:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   282d0:	2b7f      	cmp	r3, #127	; 0x7f
   282d2:	d908      	bls.n	282e6 <k_mem_slab_free+0xd6>
   282d4:	2300      	movs	r3, #0
		_abort_thread_timeout(pending_thread);
		_ready_thread(pending_thread);
		if (_must_switch_threads()) {
   282d6:	b96b      	cbnz	r3, 282f4 <k_mem_slab_free+0xe4>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   282d8:	f384 8811 	msr	BASEPRI, r4
   282dc:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   282de:	4618      	mov	r0, r3
   282e0:	f000 fd4a 	bl	28d78 <_add_thread_to_ready_q>
   282e4:	e7f1      	b.n	282ca <k_mem_slab_free+0xba>
	return _is_preempt(_current) && __must_switch_threads();
   282e6:	f000 fe6b 	bl	28fc0 <__must_switch_threads>
   282ea:	4603      	mov	r3, r0
   282ec:	2800      	cmp	r0, #0
   282ee:	d0f2      	beq.n	282d6 <k_mem_slab_free+0xc6>
   282f0:	2301      	movs	r3, #1
   282f2:	e7f0      	b.n	282d6 <k_mem_slab_free+0xc6>
	_update_time_slice_before_swap();
   282f4:	f000 fed2 	bl	2909c <_update_time_slice_before_swap>
	return __swap(key);
   282f8:	4620      	mov	r0, r4
   282fa:	f7ff fa15 	bl	27728 <__swap>
   282fe:	bd38      	pop	{r3, r4, r5, pc}
			_Swap(key);
			return;
		}
	} else {
		**(char ***)mem = slab->free_list;
   28300:	680b      	ldr	r3, [r1, #0]
   28302:	6942      	ldr	r2, [r0, #20]
   28304:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   28306:	680b      	ldr	r3, [r1, #0]
   28308:	6143      	str	r3, [r0, #20]
		slab->num_used--;
   2830a:	6983      	ldr	r3, [r0, #24]
   2830c:	3b01      	subs	r3, #1
   2830e:	6183      	str	r3, [r0, #24]
   28310:	e7e2      	b.n	282d8 <k_mem_slab_free+0xc8>
   28312:	bf00      	nop
   28314:	20002c68 	.word	0x20002c68
   28318:	20002880 	.word	0x20002880

0002831c <new_prio_for_inheritance>:
}
#endif

static int new_prio_for_inheritance(int target, int limit)
{
	int new_prio = _is_prio_higher(target, limit) ? target : limit;
   2831c:	4288      	cmp	r0, r1
   2831e:	da00      	bge.n	28322 <new_prio_for_inheritance+0x6>
   28320:	4601      	mov	r1, r0
	return _is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   28322:	2900      	cmp	r1, #0
   28324:	db01      	blt.n	2832a <new_prio_for_inheritance+0xe>
   28326:	4608      	mov	r0, r1
   28328:	4770      	bx	lr
   2832a:	2000      	movs	r0, #0

	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}
   2832c:	4770      	bx	lr

0002832e <adjust_owner_prio>:

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
   2832e:	b538      	push	{r3, r4, r5, lr}
	if (mutex->owner->base.prio != new_prio) {
   28330:	6884      	ldr	r4, [r0, #8]
   28332:	f994 300a 	ldrsb.w	r3, [r4, #10]
   28336:	428b      	cmp	r3, r1
   28338:	d00e      	beq.n	28358 <adjust_owner_prio+0x2a>
	u8_t state = thread->base.thread_state;
   2833a:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2833c:	f013 0f1f 	tst.w	r3, #31
   28340:	d107      	bne.n	28352 <adjust_owner_prio+0x24>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28342:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28348:	d001      	beq.n	2834e <adjust_owner_prio+0x20>
   2834a:	2300      	movs	r3, #0
   2834c:	e002      	b.n	28354 <adjust_owner_prio+0x26>
   2834e:	2301      	movs	r3, #1
   28350:	e000      	b.n	28354 <adjust_owner_prio+0x26>
   28352:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28354:	b90b      	cbnz	r3, 2835a <adjust_owner_prio+0x2c>
		thread->base.prio = prio;
   28356:	72a1      	strb	r1, [r4, #10]
   28358:	bd38      	pop	{r3, r4, r5, pc}
   2835a:	460d      	mov	r5, r1
		_remove_thread_from_ready_q(thread);
   2835c:	4620      	mov	r0, r4
   2835e:	f000 fd2b 	bl	28db8 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   28362:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   28364:	4620      	mov	r0, r4
   28366:	f000 fd07 	bl	28d78 <_add_thread_to_ready_q>
   2836a:	bd38      	pop	{r3, r4, r5, pc}

0002836c <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   2836c:	b570      	push	{r4, r5, r6, lr}
   2836e:	4604      	mov	r4, r0
	--_current->base.sched_locked;
   28370:	4b32      	ldr	r3, [pc, #200]	; (2843c <_impl_k_mutex_lock+0xd0>)
   28372:	689a      	ldr	r2, [r3, #8]
   28374:	7ad3      	ldrb	r3, [r2, #11]
   28376:	3b01      	subs	r3, #1
   28378:	72d3      	strb	r3, [r2, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   2837a:	68c3      	ldr	r3, [r0, #12]
   2837c:	b97b      	cbnz	r3, 2839e <_impl_k_mutex_lock+0x32>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
   2837e:	2b00      	cmp	r3, #0
   28380:	d133      	bne.n	283ea <_impl_k_mutex_lock+0x7e>
   28382:	4a2e      	ldr	r2, [pc, #184]	; (2843c <_impl_k_mutex_lock+0xd0>)
   28384:	6892      	ldr	r2, [r2, #8]
   28386:	f992 200a 	ldrsb.w	r2, [r2, #10]
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   2838a:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   2838c:	3301      	adds	r3, #1
   2838e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   28390:	4b2a      	ldr	r3, [pc, #168]	; (2843c <_impl_k_mutex_lock+0xd0>)
   28392:	689b      	ldr	r3, [r3, #8]
   28394:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   28396:	f000 fea1 	bl	290dc <k_sched_unlock>

		return 0;
   2839a:	2000      	movs	r0, #0
   2839c:	bd70      	pop	{r4, r5, r6, pc}
   2839e:	460d      	mov	r5, r1
	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   283a0:	6881      	ldr	r1, [r0, #8]
   283a2:	4a26      	ldr	r2, [pc, #152]	; (2843c <_impl_k_mutex_lock+0xd0>)
   283a4:	6892      	ldr	r2, [r2, #8]
   283a6:	4291      	cmp	r1, r2
   283a8:	d0e9      	beq.n	2837e <_impl_k_mutex_lock+0x12>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   283aa:	b305      	cbz	r5, 283ee <_impl_k_mutex_lock+0x82>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
   283ac:	f991 100a 	ldrsb.w	r1, [r1, #10]
   283b0:	f992 000a 	ldrsb.w	r0, [r2, #10]
   283b4:	f7ff ffb2 	bl	2831c <new_prio_for_inheritance>
	__asm__ volatile(
   283b8:	f04f 0320 	mov.w	r3, #32
   283bc:	f3ef 8611 	mrs	r6, BASEPRI
   283c0:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   283c4:	68a3      	ldr	r3, [r4, #8]
   283c6:	f993 300a 	ldrsb.w	r3, [r3, #10]
   283ca:	4298      	cmp	r0, r3
   283cc:	db14      	blt.n	283f8 <_impl_k_mutex_lock+0x8c>
		adjust_owner_prio(mutex, new_prio);
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   283ce:	4629      	mov	r1, r5
   283d0:	4620      	mov	r0, r4
   283d2:	f000 fde5 	bl	28fa0 <_pend_current_thread>
	_update_time_slice_before_swap();
   283d6:	f000 fe61 	bl	2909c <_update_time_slice_before_swap>
	return __swap(key);
   283da:	4630      	mov	r0, r6
   283dc:	f7ff f9a4 	bl	27728 <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   283e0:	b978      	cbnz	r0, 28402 <_impl_k_mutex_lock+0x96>
		k_sched_unlock();
   283e2:	f000 fe7b 	bl	290dc <k_sched_unlock>
		return 0;
   283e6:	2000      	movs	r0, #0
   283e8:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   283ea:	6922      	ldr	r2, [r4, #16]
   283ec:	e7cd      	b.n	2838a <_impl_k_mutex_lock+0x1e>
		k_sched_unlock();
   283ee:	f000 fe75 	bl	290dc <k_sched_unlock>
		return -EBUSY;
   283f2:	f06f 000f 	mvn.w	r0, #15
   283f6:	bd70      	pop	{r4, r5, r6, pc}
		adjust_owner_prio(mutex, new_prio);
   283f8:	4601      	mov	r1, r0
   283fa:	4620      	mov	r0, r4
   283fc:	f7ff ff97 	bl	2832e <adjust_owner_prio>
   28400:	e7e5      	b.n	283ce <_impl_k_mutex_lock+0x62>
	return list->head == list;
   28402:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28404:	429c      	cmp	r4, r3
   28406:	d016      	beq.n	28436 <_impl_k_mutex_lock+0xca>
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   28408:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   2840a:	b123      	cbz	r3, 28416 <_impl_k_mutex_lock+0xaa>
   2840c:	f993 000a 	ldrsb.w	r0, [r3, #10]
   28410:	f7ff ff84 	bl	2831c <new_prio_for_inheritance>
   28414:	4601      	mov	r1, r0
   28416:	f04f 0320 	mov.w	r3, #32
   2841a:	f3ef 8511 	mrs	r5, BASEPRI
   2841e:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   28422:	4620      	mov	r0, r4
   28424:	f7ff ff83 	bl	2832e <adjust_owner_prio>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28428:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);

	k_sched_unlock();
   2842c:	f000 fe56 	bl	290dc <k_sched_unlock>

	return -EAGAIN;
   28430:	f06f 000a 	mvn.w	r0, #10
}
   28434:	bd70      	pop	{r4, r5, r6, pc}
   28436:	2300      	movs	r3, #0
   28438:	e7e6      	b.n	28408 <_impl_k_mutex_lock+0x9c>
   2843a:	bf00      	nop
   2843c:	20002880 	.word	0x20002880

00028440 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
   28440:	b570      	push	{r4, r5, r6, lr}
   28442:	4b40      	ldr	r3, [pc, #256]	; (28544 <_impl_k_mutex_unlock+0x104>)
   28444:	689a      	ldr	r2, [r3, #8]
   28446:	7ad3      	ldrb	r3, [r2, #11]
   28448:	3b01      	subs	r3, #1
   2844a:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   2844c:	68c3      	ldr	r3, [r0, #12]
   2844e:	3b01      	subs	r3, #1
   28450:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   28452:	2b00      	cmp	r3, #0
   28454:	d143      	bne.n	284de <_impl_k_mutex_unlock+0x9e>
   28456:	4605      	mov	r5, r0
	__asm__ volatile(
   28458:	f04f 0320 	mov.w	r3, #32
   2845c:	f3ef 8611 	mrs	r6, BASEPRI
   28460:	f383 8811 	msr	BASEPRI, r3
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   28464:	6901      	ldr	r1, [r0, #16]
   28466:	f7ff ff62 	bl	2832e <adjust_owner_prio>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
   2846a:	462a      	mov	r2, r5
	if (_handling_timeouts) {
   2846c:	4b36      	ldr	r3, [pc, #216]	; (28548 <_impl_k_mutex_unlock+0x108>)
   2846e:	681b      	ldr	r3, [r3, #0]
   28470:	2b00      	cmp	r3, #0
   28472:	d139      	bne.n	284e8 <_impl_k_mutex_unlock+0xa8>
	return list->head == list;
   28474:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28476:	42a5      	cmp	r5, r4
   28478:	d046      	beq.n	28508 <_impl_k_mutex_unlock+0xc8>
	if (thread) {
   2847a:	b14c      	cbz	r4, 28490 <_impl_k_mutex_unlock+0x50>
	node->prev->next = node->next;
   2847c:	6863      	ldr	r3, [r4, #4]
   2847e:	6822      	ldr	r2, [r4, #0]
   28480:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28482:	6823      	ldr	r3, [r4, #0]
   28484:	6862      	ldr	r2, [r4, #4]
   28486:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28488:	7a63      	ldrb	r3, [r4, #9]
   2848a:	f023 0302 	bic.w	r3, r3, #2
   2848e:	7263      	strb	r3, [r4, #9]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner) {
   28490:	2c00      	cmp	r4, #0
   28492:	d051      	beq.n	28538 <_impl_k_mutex_unlock+0xf8>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   28494:	6a22      	ldr	r2, [r4, #32]
   28496:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2849a:	d013      	beq.n	284c4 <_impl_k_mutex_unlock+0x84>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2849c:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   284a0:	4928      	ldr	r1, [pc, #160]	; (28544 <_impl_k_mutex_unlock+0x104>)
   284a2:	6909      	ldr	r1, [r1, #16]
   284a4:	428b      	cmp	r3, r1
   284a6:	d004      	beq.n	284b2 <_impl_k_mutex_unlock+0x72>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   284a8:	b103      	cbz	r3, 284ac <_impl_k_mutex_unlock+0x6c>
	return (node == list->tail) ? NULL : node->next;
   284aa:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   284ac:	6919      	ldr	r1, [r3, #16]
   284ae:	440a      	add	r2, r1
   284b0:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   284b2:	6963      	ldr	r3, [r4, #20]
   284b4:	6922      	ldr	r2, [r4, #16]
   284b6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   284b8:	6923      	ldr	r3, [r4, #16]
   284ba:	6962      	ldr	r2, [r4, #20]
   284bc:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   284be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   284c2:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   284c4:	7a63      	ldrb	r3, [r4, #9]
   284c6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   284ca:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   284cc:	f013 0f1b 	tst.w	r3, #27
   284d0:	d11e      	bne.n	28510 <_impl_k_mutex_unlock+0xd0>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   284d2:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   284d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   284d8:	d018      	beq.n	2850c <_impl_k_mutex_unlock+0xcc>
   284da:	2300      	movs	r3, #0
   284dc:	e019      	b.n	28512 <_impl_k_mutex_unlock+0xd2>
		k_sched_unlock();
   284de:	f000 fdfd 	bl	290dc <k_sched_unlock>
		return;
   284e2:	bd70      	pop	{r4, r5, r6, pc}
	return sys_dlist_is_empty(list) ? NULL : list->head;
   284e4:	2400      	movs	r4, #0
   284e6:	e002      	b.n	284ee <_impl_k_mutex_unlock+0xae>
	return list->head == list;
   284e8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   284ea:	42a5      	cmp	r5, r4
   284ec:	d0fa      	beq.n	284e4 <_impl_k_mutex_unlock+0xa4>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   284ee:	2c00      	cmp	r4, #0
   284f0:	d0c3      	beq.n	2847a <_impl_k_mutex_unlock+0x3a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   284f2:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   284f4:	f113 0f02 	cmn.w	r3, #2
   284f8:	d1bf      	bne.n	2847a <_impl_k_mutex_unlock+0x3a>
	return (node == list->tail) ? NULL : node->next;
   284fa:	6853      	ldr	r3, [r2, #4]
   284fc:	429c      	cmp	r4, r3
   284fe:	d001      	beq.n	28504 <_impl_k_mutex_unlock+0xc4>
   28500:	6824      	ldr	r4, [r4, #0]
   28502:	e7f4      	b.n	284ee <_impl_k_mutex_unlock+0xae>
   28504:	2400      	movs	r4, #0
   28506:	e7f2      	b.n	284ee <_impl_k_mutex_unlock+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28508:	2400      	movs	r4, #0
   2850a:	e7b6      	b.n	2847a <_impl_k_mutex_unlock+0x3a>
	return !(_is_thread_prevented_from_running(thread) ||
   2850c:	2301      	movs	r3, #1
   2850e:	e000      	b.n	28512 <_impl_k_mutex_unlock+0xd2>
   28510:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28512:	b96b      	cbnz	r3, 28530 <_impl_k_mutex_unlock+0xf0>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28514:	f386 8811 	msr	BASEPRI, r6
   28518:	2300      	movs	r3, #0
   2851a:	6663      	str	r3, [r4, #100]	; 0x64
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
   2851c:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   2851e:	68eb      	ldr	r3, [r5, #12]
   28520:	3301      	adds	r3, #1
   28522:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   28524:	f994 300a 	ldrsb.w	r3, [r4, #10]
   28528:	612b      	str	r3, [r5, #16]
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
   2852a:	f000 fdd7 	bl	290dc <k_sched_unlock>
   2852e:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   28530:	4620      	mov	r0, r4
   28532:	f000 fc21 	bl	28d78 <_add_thread_to_ready_q>
   28536:	e7ed      	b.n	28514 <_impl_k_mutex_unlock+0xd4>
   28538:	f386 8811 	msr	BASEPRI, r6
		mutex->owner = NULL;
   2853c:	2300      	movs	r3, #0
   2853e:	60ab      	str	r3, [r5, #8]
   28540:	e7f3      	b.n	2852a <_impl_k_mutex_unlock+0xea>
   28542:	bf00      	nop
   28544:	20002880 	.word	0x20002880
   28548:	20002c68 	.word	0x20002c68

0002854c <_signal_poll_event>:
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   2854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2854e:	4604      	mov	r4, r0
   28550:	460d      	mov	r5, r1
	*must_reschedule = 0;
   28552:	2300      	movs	r3, #0
   28554:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   28556:	6883      	ldr	r3, [r0, #8]
   28558:	2b00      	cmp	r3, #0
   2855a:	d042      	beq.n	285e2 <_signal_poll_event+0x96>
   2855c:	4616      	mov	r6, r2
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   2855e:	6818      	ldr	r0, [r3, #0]
	thread->base.thread_state &= ~states;
   28560:	7a43      	ldrb	r3, [r0, #9]
   28562:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   28566:	7243      	strb	r3, [r0, #9]

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   28568:	f013 0f02 	tst.w	r3, #2
   2856c:	d039      	beq.n	285e2 <_signal_poll_event+0x96>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   2856e:	6a03      	ldr	r3, [r0, #32]
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   28570:	f113 0f02 	cmn.w	r3, #2
   28574:	d060      	beq.n	28638 <_signal_poll_event+0xec>
	node->prev->next = node->next;
   28576:	6843      	ldr	r3, [r0, #4]
   28578:	6802      	ldr	r2, [r0, #0]
   2857a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2857c:	6803      	ldr	r3, [r0, #0]
   2857e:	6842      	ldr	r2, [r0, #4]
   28580:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28582:	7a43      	ldrb	r3, [r0, #9]
   28584:	f023 0302 	bic.w	r3, r3, #2
   28588:	7243      	strb	r3, [r0, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2858a:	6a02      	ldr	r2, [r0, #32]
   2858c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28590:	d013      	beq.n	285ba <_signal_poll_event+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   28592:	f100 0310 	add.w	r3, r0, #16
	return list->tail == node;
   28596:	492a      	ldr	r1, [pc, #168]	; (28640 <_signal_poll_event+0xf4>)
   28598:	6909      	ldr	r1, [r1, #16]
   2859a:	428b      	cmp	r3, r1
   2859c:	d004      	beq.n	285a8 <_signal_poll_event+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2859e:	b103      	cbz	r3, 285a2 <_signal_poll_event+0x56>
	return (node == list->tail) ? NULL : node->next;
   285a0:	6903      	ldr	r3, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   285a2:	6919      	ldr	r1, [r3, #16]
   285a4:	440a      	add	r2, r1
   285a6:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   285a8:	6943      	ldr	r3, [r0, #20]
   285aa:	6902      	ldr	r2, [r0, #16]
   285ac:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   285ae:	6903      	ldr	r3, [r0, #16]
   285b0:	6942      	ldr	r2, [r0, #20]
   285b2:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   285b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   285b8:	6203      	str	r3, [r0, #32]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   285ba:	b965      	cbnz	r5, 285d6 <_signal_poll_event+0x8a>
   285bc:	f06f 0303 	mvn.w	r3, #3
   285c0:	6643      	str	r3, [r0, #100]	; 0x64
	u8_t state = thread->base.thread_state;
   285c2:	7a43      	ldrb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   285c4:	f013 0f1f 	tst.w	r3, #31
   285c8:	d109      	bne.n	285de <_signal_poll_event+0x92>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   285ca:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   285cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   285d0:	d003      	beq.n	285da <_signal_poll_event+0x8e>
   285d2:	2700      	movs	r7, #0
   285d4:	e004      	b.n	285e0 <_signal_poll_event+0x94>
   285d6:	2300      	movs	r3, #0
   285d8:	e7f2      	b.n	285c0 <_signal_poll_event+0x74>
   285da:	2701      	movs	r7, #1
   285dc:	e000      	b.n	285e0 <_signal_poll_event+0x94>
   285de:	2700      	movs	r7, #0
				 state == K_POLL_STATE_NOT_READY ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
   285e0:	b947      	cbnz	r7, 285f4 <_signal_poll_event+0xa8>
	event->poller = NULL;
   285e2:	2000      	movs	r0, #0
   285e4:	60a0      	str	r0, [r4, #8]
	event->state |= state;
   285e6:	7b63      	ldrb	r3, [r4, #13]
   285e8:	ea45 1513 	orr.w	r5, r5, r3, lsr #4
   285ec:	f365 1307 	bfi	r3, r5, #4, #4
   285f0:	7363      	strb	r3, [r4, #13]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
   285f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_add_thread_to_ready_q(thread);
   285f4:	f000 fbc0 	bl	28d78 <_add_thread_to_ready_q>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   285f8:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   285fc:	2b0d      	cmp	r3, #13
   285fe:	d807      	bhi.n	28610 <_signal_poll_event+0xc4>
   28600:	b19b      	cbz	r3, 2862a <_signal_poll_event+0xde>
   28602:	4b10      	ldr	r3, [pc, #64]	; (28644 <_signal_poll_event+0xf8>)
   28604:	685b      	ldr	r3, [r3, #4]
   28606:	f413 6f00 	tst.w	r3, #2048	; 0x800
   2860a:	d010      	beq.n	2862e <_signal_poll_event+0xe2>
   2860c:	2300      	movs	r3, #0
   2860e:	e000      	b.n	28612 <_signal_poll_event+0xc6>
   28610:	463b      	mov	r3, r7
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   28612:	b973      	cbnz	r3, 28632 <_signal_poll_event+0xe6>
	return _is_preempt(_current) && __must_switch_threads();
   28614:	4a0a      	ldr	r2, [pc, #40]	; (28640 <_signal_poll_event+0xf4>)
   28616:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28618:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   2861a:	2a7f      	cmp	r2, #127	; 0x7f
   2861c:	d80a      	bhi.n	28634 <_signal_poll_event+0xe8>
   2861e:	f000 fccf 	bl	28fc0 <__must_switch_threads>
   28622:	4603      	mov	r3, r0
   28624:	b130      	cbz	r0, 28634 <_signal_poll_event+0xe8>
   28626:	463b      	mov	r3, r7
   28628:	e004      	b.n	28634 <_signal_poll_event+0xe8>
   2862a:	2300      	movs	r3, #0
   2862c:	e7f1      	b.n	28612 <_signal_poll_event+0xc6>
   2862e:	463b      	mov	r3, r7
   28630:	e7ef      	b.n	28612 <_signal_poll_event+0xc6>
   28632:	2300      	movs	r3, #0
   28634:	6033      	str	r3, [r6, #0]
   28636:	e7d4      	b.n	285e2 <_signal_poll_event+0x96>
		return -EAGAIN;
   28638:	f06f 000a 	mvn.w	r0, #10
}
   2863c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2863e:	bf00      	nop
   28640:	20002880 	.word	0x20002880
   28644:	e000ed00 	.word	0xe000ed00

00028648 <k_poll_event_init>:
{
   28648:	b430      	push	{r4, r5}
	event->poller = NULL;
   2864a:	2500      	movs	r5, #0
   2864c:	6085      	str	r5, [r0, #8]
	event->type = type;
   2864e:	7b44      	ldrb	r4, [r0, #13]
   28650:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
   28654:	f365 1407 	bfi	r4, r5, #4, #4
   28658:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   2865a:	7b81      	ldrb	r1, [r0, #14]
   2865c:	f362 0100 	bfi	r1, r2, #0, #1
   28660:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   28662:	89c2      	ldrh	r2, [r0, #14]
   28664:	f365 024f 	bfi	r2, r5, #1, #15
   28668:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   2866a:	6103      	str	r3, [r0, #16]
}
   2866c:	bc30      	pop	{r4, r5}
   2866e:	4770      	bx	lr

00028670 <k_poll>:
{
   28670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28674:	b085      	sub	sp, #20
   28676:	4691      	mov	r9, r2
	__asm__ volatile(
   28678:	f04f 0320 	mov.w	r3, #32
   2867c:	f3ef 8511 	mrs	r5, BASEPRI
   28680:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   28684:	4ab7      	ldr	r2, [pc, #732]	; (28964 <k_poll+0x2f4>)
   28686:	6894      	ldr	r4, [r2, #8]
	thread->base.thread_state |= states;
   28688:	7a63      	ldrb	r3, [r4, #9]
   2868a:	f043 0320 	orr.w	r3, r3, #32
   2868e:	7263      	strb	r3, [r4, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28690:	f385 8811 	msr	BASEPRI, r5
	struct _poller poller = { .thread = _current };
   28694:	6893      	ldr	r3, [r2, #8]
   28696:	9303      	str	r3, [sp, #12]
	for (int ii = 0; ii < num_events; ii++) {
   28698:	2300      	movs	r3, #0
	int last_registered = -1, rc;
   2869a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   2869e:	e01e      	b.n	286de <k_poll+0x6e>
		if (k_sem_count_get(event->sem) > 0) {
   286a0:	6917      	ldr	r7, [r2, #16]
   286a2:	68bf      	ldr	r7, [r7, #8]
   286a4:	b14f      	cbz	r7, 286ba <k_poll+0x4a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   286a6:	f04f 0e02 	mov.w	lr, #2
			return 1;
   286aa:	2701      	movs	r7, #1
   286ac:	e005      	b.n	286ba <k_poll+0x4a>
		if (!k_queue_is_empty(event->queue)) {
   286ae:	6917      	ldr	r7, [r2, #16]
	return (!list->head);
   286b0:	683f      	ldr	r7, [r7, #0]
   286b2:	b117      	cbz	r7, 286ba <k_poll+0x4a>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   286b4:	f04f 0e04 	mov.w	lr, #4
			return 1;
   286b8:	2701      	movs	r7, #1
		if (is_condition_met(&events[ii], &state)) {
   286ba:	b387      	cbz	r7, 2871e <k_poll+0xae>
	event->poller = NULL;
   286bc:	2500      	movs	r5, #0
   286be:	6095      	str	r5, [r2, #8]
	event->state |= state;
   286c0:	7b55      	ldrb	r5, [r2, #13]
   286c2:	ea4e 1715 	orr.w	r7, lr, r5, lsr #4
   286c6:	f367 1507 	bfi	r5, r7, #4, #4
   286ca:	7355      	strb	r5, [r2, #13]
			clear_polling_state(_current);
   286cc:	4aa5      	ldr	r2, [pc, #660]	; (28964 <k_poll+0x2f4>)
   286ce:	6895      	ldr	r5, [r2, #8]
	thread->base.thread_state &= ~states;
   286d0:	7a6a      	ldrb	r2, [r5, #9]
   286d2:	f022 0220 	bic.w	r2, r2, #32
   286d6:	726a      	strb	r2, [r5, #9]
   286d8:	f386 8811 	msr	BASEPRI, r6
	for (int ii = 0; ii < num_events; ii++) {
   286dc:	3301      	adds	r3, #1
   286de:	428b      	cmp	r3, r1
   286e0:	f280 8191 	bge.w	28a06 <k_poll+0x396>
	__asm__ volatile(
   286e4:	f04f 0220 	mov.w	r2, #32
   286e8:	f3ef 8611 	mrs	r6, BASEPRI
   286ec:	f382 8811 	msr	BASEPRI, r2
		if (is_condition_met(&events[ii], &state)) {
   286f0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   286f4:	0095      	lsls	r5, r2, #2
   286f6:	1942      	adds	r2, r0, r5
	switch (event->type) {
   286f8:	7b57      	ldrb	r7, [r2, #13]
   286fa:	f007 070f 	and.w	r7, r7, #15
   286fe:	2f02      	cmp	r7, #2
   28700:	d0ce      	beq.n	286a0 <k_poll+0x30>
   28702:	2f04      	cmp	r7, #4
   28704:	d0d3      	beq.n	286ae <k_poll+0x3e>
   28706:	2f01      	cmp	r7, #1
   28708:	d001      	beq.n	2870e <k_poll+0x9e>
		return 0;
   2870a:	2700      	movs	r7, #0
   2870c:	e7d5      	b.n	286ba <k_poll+0x4a>
		if (event->signal->signaled) {
   2870e:	6917      	ldr	r7, [r2, #16]
   28710:	68bf      	ldr	r7, [r7, #8]
   28712:	2f00      	cmp	r7, #0
   28714:	d0d1      	beq.n	286ba <k_poll+0x4a>
			*state = K_POLL_STATE_SIGNALED;
   28716:	f04f 0e01 	mov.w	lr, #1
			return 1;
   2871a:	4677      	mov	r7, lr
   2871c:	e7cd      	b.n	286ba <k_poll+0x4a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   2871e:	f1b9 0f00 	cmp.w	r9, #0
   28722:	d0d9      	beq.n	286d8 <k_poll+0x68>
	return _is_thread_polling(_current);
   28724:	4f8f      	ldr	r7, [pc, #572]	; (28964 <k_poll+0x2f4>)
   28726:	68bf      	ldr	r7, [r7, #8]
	return !!(thread->base.thread_state & state);
   28728:	7a7f      	ldrb	r7, [r7, #9]
		} else if (timeout != K_NO_WAIT && is_polling()) {
   2872a:	f017 0f20 	tst.w	r7, #32
   2872e:	d0d3      	beq.n	286d8 <k_poll+0x68>
	switch (event->type) {
   28730:	7b57      	ldrb	r7, [r2, #13]
   28732:	f007 070f 	and.w	r7, r7, #15
   28736:	2f02      	cmp	r7, #2
   28738:	d008      	beq.n	2874c <k_poll+0xdc>
   2873a:	2f04      	cmp	r7, #4
   2873c:	d07a      	beq.n	28834 <k_poll+0x1c4>
   2873e:	2f01      	cmp	r7, #1
   28740:	f000 80ec 	beq.w	2891c <k_poll+0x2ac>
	event->poller = poller;
   28744:	ad03      	add	r5, sp, #12
   28746:	6095      	str	r5, [r2, #8]
				++last_registered;
   28748:	3401      	adds	r4, #1
   2874a:	e7c5      	b.n	286d8 <k_poll+0x68>
		add_event(&event->sem->poll_events, event, poller);
   2874c:	6917      	ldr	r7, [r2, #16]
   2874e:	f107 0c10 	add.w	ip, r7, #16
	return list->head == list;
   28752:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   28756:	45c4      	cmp	ip, r8
   28758:	d010      	beq.n	2877c <k_poll+0x10c>
   2875a:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   2875e:	b17f      	cbz	r7, 28780 <k_poll+0x110>
   28760:	68bf      	ldr	r7, [r7, #8]
   28762:	683f      	ldr	r7, [r7, #0]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   28764:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   28768:	9f03      	ldr	r7, [sp, #12]
   2876a:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   2876e:	45da      	cmp	sl, fp
   28770:	db06      	blt.n	28780 <k_poll+0x110>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28772:	45c4      	cmp	ip, r8
   28774:	d12e      	bne.n	287d4 <k_poll+0x164>
   28776:	f04f 0800 	mov.w	r8, #0
   2877a:	e02b      	b.n	287d4 <k_poll+0x164>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2877c:	2700      	movs	r7, #0
   2877e:	e7ee      	b.n	2875e <k_poll+0xee>
	node->next = list;
   28780:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28784:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28788:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   2878a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2878e:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28790:	f8cc 2004 	str.w	r2, [ip, #4]
   28794:	e7d6      	b.n	28744 <k_poll+0xd4>
	if (!insert_point) {
   28796:	f1b8 0f00 	cmp.w	r8, #0
   2879a:	d00a      	beq.n	287b2 <k_poll+0x142>
		node->prev = insert_point->prev;
   2879c:	f8d8 7004 	ldr.w	r7, [r8, #4]
   287a0:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   287a2:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   287a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   287aa:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   287ac:	f8c8 2004 	str.w	r2, [r8, #4]
   287b0:	e7c8      	b.n	28744 <k_poll+0xd4>
	node->next = list;
   287b2:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   287b6:	f8dc 5004 	ldr.w	r5, [ip, #4]
   287ba:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   287bc:	f8dc 5004 	ldr.w	r5, [ip, #4]
   287c0:	602a      	str	r2, [r5, #0]
	list->tail = node;
   287c2:	f8cc 2004 	str.w	r2, [ip, #4]
   287c6:	e7bd      	b.n	28744 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   287c8:	4647      	mov	r7, r8
   287ca:	e017      	b.n	287fc <k_poll+0x18c>
	return (node == list->tail) ? NULL : node->next;
   287cc:	2700      	movs	r7, #0
   287ce:	e015      	b.n	287fc <k_poll+0x18c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   287d0:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   287d4:	f1b8 0f00 	cmp.w	r8, #0
   287d8:	d021      	beq.n	2881e <k_poll+0x1ae>
					       pending->poller->thread)) {
   287da:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   287de:	683f      	ldr	r7, [r7, #0]
   287e0:	f997 700a 	ldrsb.w	r7, [r7, #10]
   287e4:	45bb      	cmp	fp, r7
   287e6:	dbd6      	blt.n	28796 <k_poll+0x126>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   287e8:	46c2      	mov	sl, r8
   287ea:	f1b8 0f00 	cmp.w	r8, #0
   287ee:	d0eb      	beq.n	287c8 <k_poll+0x158>
	return (node == list->tail) ? NULL : node->next;
   287f0:	f8dc 7004 	ldr.w	r7, [ip, #4]
   287f4:	45b8      	cmp	r8, r7
   287f6:	d0e9      	beq.n	287cc <k_poll+0x15c>
   287f8:	f8d8 7000 	ldr.w	r7, [r8]
   287fc:	b167      	cbz	r7, 28818 <k_poll+0x1a8>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   287fe:	f1ba 0f00 	cmp.w	sl, #0
   28802:	d0e5      	beq.n	287d0 <k_poll+0x160>
	return (node == list->tail) ? NULL : node->next;
   28804:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28808:	45ba      	cmp	sl, r7
   2880a:	d002      	beq.n	28812 <k_poll+0x1a2>
   2880c:	f8d8 8000 	ldr.w	r8, [r8]
   28810:	e7e0      	b.n	287d4 <k_poll+0x164>
   28812:	f04f 0800 	mov.w	r8, #0
   28816:	e7dd      	b.n	287d4 <k_poll+0x164>
   28818:	f04f 0800 	mov.w	r8, #0
   2881c:	e7da      	b.n	287d4 <k_poll+0x164>
	node->next = list;
   2881e:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28822:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28826:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28828:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2882c:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2882e:	f8cc 2004 	str.w	r2, [ip, #4]
   28832:	e787      	b.n	28744 <k_poll+0xd4>
		add_event(&event->queue->poll_events, event, poller);
   28834:	6917      	ldr	r7, [r2, #16]
   28836:	f107 0c08 	add.w	ip, r7, #8
	return list->head == list;
   2883a:	f8d7 8008 	ldr.w	r8, [r7, #8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2883e:	45c4      	cmp	ip, r8
   28840:	d010      	beq.n	28864 <k_poll+0x1f4>
   28842:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   28846:	b17f      	cbz	r7, 28868 <k_poll+0x1f8>
   28848:	68bf      	ldr	r7, [r7, #8]
   2884a:	683f      	ldr	r7, [r7, #0]
   2884c:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   28850:	9f03      	ldr	r7, [sp, #12]
   28852:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   28856:	45da      	cmp	sl, fp
   28858:	db06      	blt.n	28868 <k_poll+0x1f8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2885a:	45c4      	cmp	ip, r8
   2885c:	d12e      	bne.n	288bc <k_poll+0x24c>
   2885e:	f04f 0800 	mov.w	r8, #0
   28862:	e02b      	b.n	288bc <k_poll+0x24c>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   28864:	2700      	movs	r7, #0
   28866:	e7ee      	b.n	28846 <k_poll+0x1d6>
	node->next = list;
   28868:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2886c:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28870:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28872:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28876:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28878:	f8cc 2004 	str.w	r2, [ip, #4]
   2887c:	e762      	b.n	28744 <k_poll+0xd4>
	if (!insert_point) {
   2887e:	f1b8 0f00 	cmp.w	r8, #0
   28882:	d00a      	beq.n	2889a <k_poll+0x22a>
		node->prev = insert_point->prev;
   28884:	f8d8 7004 	ldr.w	r7, [r8, #4]
   28888:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   2888a:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   2888e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   28892:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   28894:	f8c8 2004 	str.w	r2, [r8, #4]
   28898:	e754      	b.n	28744 <k_poll+0xd4>
	node->next = list;
   2889a:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2889e:	f8dc 5004 	ldr.w	r5, [ip, #4]
   288a2:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   288a4:	f8dc 5004 	ldr.w	r5, [ip, #4]
   288a8:	602a      	str	r2, [r5, #0]
	list->tail = node;
   288aa:	f8cc 2004 	str.w	r2, [ip, #4]
   288ae:	e749      	b.n	28744 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   288b0:	4647      	mov	r7, r8
   288b2:	e017      	b.n	288e4 <k_poll+0x274>
	return (node == list->tail) ? NULL : node->next;
   288b4:	2700      	movs	r7, #0
   288b6:	e015      	b.n	288e4 <k_poll+0x274>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   288b8:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   288bc:	f1b8 0f00 	cmp.w	r8, #0
   288c0:	d021      	beq.n	28906 <k_poll+0x296>
					       pending->poller->thread)) {
   288c2:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   288c6:	683f      	ldr	r7, [r7, #0]
   288c8:	f997 700a 	ldrsb.w	r7, [r7, #10]
   288cc:	45bb      	cmp	fp, r7
   288ce:	dbd6      	blt.n	2887e <k_poll+0x20e>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   288d0:	46c2      	mov	sl, r8
   288d2:	f1b8 0f00 	cmp.w	r8, #0
   288d6:	d0eb      	beq.n	288b0 <k_poll+0x240>
	return (node == list->tail) ? NULL : node->next;
   288d8:	f8dc 7004 	ldr.w	r7, [ip, #4]
   288dc:	45b8      	cmp	r8, r7
   288de:	d0e9      	beq.n	288b4 <k_poll+0x244>
   288e0:	f8d8 7000 	ldr.w	r7, [r8]
   288e4:	b167      	cbz	r7, 28900 <k_poll+0x290>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   288e6:	f1ba 0f00 	cmp.w	sl, #0
   288ea:	d0e5      	beq.n	288b8 <k_poll+0x248>
	return (node == list->tail) ? NULL : node->next;
   288ec:	f8dc 7004 	ldr.w	r7, [ip, #4]
   288f0:	45ba      	cmp	sl, r7
   288f2:	d002      	beq.n	288fa <k_poll+0x28a>
   288f4:	f8d8 8000 	ldr.w	r8, [r8]
   288f8:	e7e0      	b.n	288bc <k_poll+0x24c>
   288fa:	f04f 0800 	mov.w	r8, #0
   288fe:	e7dd      	b.n	288bc <k_poll+0x24c>
   28900:	f04f 0800 	mov.w	r8, #0
   28904:	e7da      	b.n	288bc <k_poll+0x24c>
	node->next = list;
   28906:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2890a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2890e:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28910:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28914:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28916:	f8cc 2004 	str.w	r2, [ip, #4]
   2891a:	e713      	b.n	28744 <k_poll+0xd4>
		add_event(&event->signal->poll_events, event, poller);
   2891c:	f8d2 c010 	ldr.w	ip, [r2, #16]
	return list->head == list;
   28920:	f8dc 8000 	ldr.w	r8, [ip]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   28924:	45c4      	cmp	ip, r8
   28926:	d010      	beq.n	2894a <k_poll+0x2da>
   28928:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   2892c:	b17f      	cbz	r7, 2894e <k_poll+0x2de>
   2892e:	68bf      	ldr	r7, [r7, #8]
   28930:	683f      	ldr	r7, [r7, #0]
   28932:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   28936:	9f03      	ldr	r7, [sp, #12]
   28938:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   2893c:	45da      	cmp	sl, fp
   2893e:	db06      	blt.n	2894e <k_poll+0x2de>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28940:	45c4      	cmp	ip, r8
   28942:	d130      	bne.n	289a6 <k_poll+0x336>
   28944:	f04f 0800 	mov.w	r8, #0
   28948:	e02d      	b.n	289a6 <k_poll+0x336>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2894a:	2700      	movs	r7, #0
   2894c:	e7ee      	b.n	2892c <k_poll+0x2bc>
	node->next = list;
   2894e:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28952:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28956:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28958:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2895c:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2895e:	f8cc 2004 	str.w	r2, [ip, #4]
   28962:	e6ef      	b.n	28744 <k_poll+0xd4>
   28964:	20002880 	.word	0x20002880
	if (!insert_point) {
   28968:	f1b8 0f00 	cmp.w	r8, #0
   2896c:	d00a      	beq.n	28984 <k_poll+0x314>
		node->prev = insert_point->prev;
   2896e:	f8d8 7004 	ldr.w	r7, [r8, #4]
   28972:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   28974:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   28978:	f8d8 5004 	ldr.w	r5, [r8, #4]
   2897c:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   2897e:	f8c8 2004 	str.w	r2, [r8, #4]
   28982:	e6df      	b.n	28744 <k_poll+0xd4>
	node->next = list;
   28984:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28988:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2898c:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   2898e:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28992:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28994:	f8cc 2004 	str.w	r2, [ip, #4]
   28998:	e6d4      	b.n	28744 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2899a:	4647      	mov	r7, r8
   2899c:	e017      	b.n	289ce <k_poll+0x35e>
	return (node == list->tail) ? NULL : node->next;
   2899e:	2700      	movs	r7, #0
   289a0:	e015      	b.n	289ce <k_poll+0x35e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   289a2:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   289a6:	f1b8 0f00 	cmp.w	r8, #0
   289aa:	d021      	beq.n	289f0 <k_poll+0x380>
					       pending->poller->thread)) {
   289ac:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   289b0:	683f      	ldr	r7, [r7, #0]
   289b2:	f997 700a 	ldrsb.w	r7, [r7, #10]
   289b6:	45bb      	cmp	fp, r7
   289b8:	dbd6      	blt.n	28968 <k_poll+0x2f8>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   289ba:	46c2      	mov	sl, r8
   289bc:	f1b8 0f00 	cmp.w	r8, #0
   289c0:	d0eb      	beq.n	2899a <k_poll+0x32a>
	return (node == list->tail) ? NULL : node->next;
   289c2:	f8dc 7004 	ldr.w	r7, [ip, #4]
   289c6:	45b8      	cmp	r8, r7
   289c8:	d0e9      	beq.n	2899e <k_poll+0x32e>
   289ca:	f8d8 7000 	ldr.w	r7, [r8]
   289ce:	b167      	cbz	r7, 289ea <k_poll+0x37a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   289d0:	f1ba 0f00 	cmp.w	sl, #0
   289d4:	d0e5      	beq.n	289a2 <k_poll+0x332>
	return (node == list->tail) ? NULL : node->next;
   289d6:	f8dc 7004 	ldr.w	r7, [ip, #4]
   289da:	45ba      	cmp	sl, r7
   289dc:	d002      	beq.n	289e4 <k_poll+0x374>
   289de:	f8d8 8000 	ldr.w	r8, [r8]
   289e2:	e7e0      	b.n	289a6 <k_poll+0x336>
   289e4:	f04f 0800 	mov.w	r8, #0
   289e8:	e7dd      	b.n	289a6 <k_poll+0x336>
   289ea:	f04f 0800 	mov.w	r8, #0
   289ee:	e7da      	b.n	289a6 <k_poll+0x336>
	node->next = list;
   289f0:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   289f4:	f8dc 5004 	ldr.w	r5, [ip, #4]
   289f8:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   289fa:	f8dc 5004 	ldr.w	r5, [ip, #4]
   289fe:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28a00:	f8cc 2004 	str.w	r2, [ip, #4]
   28a04:	e69e      	b.n	28744 <k_poll+0xd4>
   28a06:	f04f 0320 	mov.w	r3, #32
   28a0a:	f3ef 8511 	mrs	r5, BASEPRI
   28a0e:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   28a12:	4b46      	ldr	r3, [pc, #280]	; (28b2c <k_poll+0x4bc>)
   28a14:	689a      	ldr	r2, [r3, #8]
	return !!(thread->base.thread_state & state);
   28a16:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   28a18:	f013 0f20 	tst.w	r3, #32
   28a1c:	d047      	beq.n	28aae <k_poll+0x43e>
	thread->base.thread_state &= ~states;
   28a1e:	f023 0320 	bic.w	r3, r3, #32
   28a22:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   28a24:	f1b9 0f00 	cmp.w	r9, #0
   28a28:	d049      	beq.n	28abe <k_poll+0x44e>
   28a2a:	4649      	mov	r1, r9
   28a2c:	4606      	mov	r6, r0
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   28a2e:	a801      	add	r0, sp, #4
   28a30:	9001      	str	r0, [sp, #4]
   28a32:	9002      	str	r0, [sp, #8]
	_pend_current_thread(&wait_q, timeout);
   28a34:	f000 fab4 	bl	28fa0 <_pend_current_thread>
	_update_time_slice_before_swap();
   28a38:	f000 fb30 	bl	2909c <_update_time_slice_before_swap>
	return __swap(key);
   28a3c:	4628      	mov	r0, r5
   28a3e:	f7fe fe73 	bl	27728 <__swap>
   28a42:	f04f 0320 	mov.w	r3, #32
   28a46:	f3ef 8e11 	mrs	lr, BASEPRI
   28a4a:	f383 8811 	msr	BASEPRI, r3
   28a4e:	4675      	mov	r5, lr
   28a50:	e049      	b.n	28ae6 <k_poll+0x476>
	node->prev->next = node->next;
   28a52:	6853      	ldr	r3, [r2, #4]
   28a54:	5847      	ldr	r7, [r0, r1]
   28a56:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28a58:	5843      	ldr	r3, [r0, r1]
   28a5a:	6852      	ldr	r2, [r2, #4]
   28a5c:	605a      	str	r2, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28a5e:	f386 8811 	msr	BASEPRI, r6
	__asm__ volatile(
   28a62:	f04f 0320 	mov.w	r3, #32
   28a66:	f3ef 8611 	mrs	r6, BASEPRI
   28a6a:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   28a6e:	3c01      	subs	r4, #1
   28a70:	2c00      	cmp	r4, #0
   28a72:	db1e      	blt.n	28ab2 <k_poll+0x442>
		clear_event_registration(&events[last_registered]);
   28a74:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   28a78:	0099      	lsls	r1, r3, #2
   28a7a:	1842      	adds	r2, r0, r1
	event->poller = NULL;
   28a7c:	2300      	movs	r3, #0
   28a7e:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   28a80:	7b53      	ldrb	r3, [r2, #13]
   28a82:	f003 030f 	and.w	r3, r3, #15
   28a86:	2b02      	cmp	r3, #2
   28a88:	d0e3      	beq.n	28a52 <k_poll+0x3e2>
   28a8a:	2b04      	cmp	r3, #4
   28a8c:	d008      	beq.n	28aa0 <k_poll+0x430>
   28a8e:	2b01      	cmp	r3, #1
   28a90:	d1e5      	bne.n	28a5e <k_poll+0x3ee>
	node->prev->next = node->next;
   28a92:	6853      	ldr	r3, [r2, #4]
   28a94:	5847      	ldr	r7, [r0, r1]
   28a96:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28a98:	5843      	ldr	r3, [r0, r1]
   28a9a:	6852      	ldr	r2, [r2, #4]
   28a9c:	605a      	str	r2, [r3, #4]
   28a9e:	e7de      	b.n	28a5e <k_poll+0x3ee>
	node->prev->next = node->next;
   28aa0:	6853      	ldr	r3, [r2, #4]
   28aa2:	5847      	ldr	r7, [r0, r1]
   28aa4:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28aa6:	5843      	ldr	r3, [r0, r1]
   28aa8:	6852      	ldr	r2, [r2, #4]
   28aaa:	605a      	str	r2, [r3, #4]
   28aac:	e7d7      	b.n	28a5e <k_poll+0x3ee>
   28aae:	462e      	mov	r6, r5
   28ab0:	e7de      	b.n	28a70 <k_poll+0x400>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28ab2:	f385 8811 	msr	BASEPRI, r5
		return 0;
   28ab6:	2000      	movs	r0, #0
}
   28ab8:	b005      	add	sp, #20
   28aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28abe:	f385 8811 	msr	BASEPRI, r5
		return -EAGAIN;
   28ac2:	f06f 000a 	mvn.w	r0, #10
   28ac6:	e7f7      	b.n	28ab8 <k_poll+0x448>
	node->prev->next = node->next;
   28ac8:	6853      	ldr	r3, [r2, #4]
   28aca:	5877      	ldr	r7, [r6, r1]
   28acc:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28ace:	5873      	ldr	r3, [r6, r1]
   28ad0:	6852      	ldr	r2, [r2, #4]
   28ad2:	605a      	str	r2, [r3, #4]
   28ad4:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   28ad8:	f04f 0320 	mov.w	r3, #32
   28adc:	f3ef 8511 	mrs	r5, BASEPRI
   28ae0:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   28ae4:	3c01      	subs	r4, #1
   28ae6:	2c00      	cmp	r4, #0
   28ae8:	db1c      	blt.n	28b24 <k_poll+0x4b4>
		clear_event_registration(&events[last_registered]);
   28aea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   28aee:	0099      	lsls	r1, r3, #2
   28af0:	1872      	adds	r2, r6, r1
	event->poller = NULL;
   28af2:	2300      	movs	r3, #0
   28af4:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   28af6:	7b53      	ldrb	r3, [r2, #13]
   28af8:	f003 030f 	and.w	r3, r3, #15
   28afc:	2b02      	cmp	r3, #2
   28afe:	d0e3      	beq.n	28ac8 <k_poll+0x458>
   28b00:	2b04      	cmp	r3, #4
   28b02:	d008      	beq.n	28b16 <k_poll+0x4a6>
   28b04:	2b01      	cmp	r3, #1
   28b06:	d1e5      	bne.n	28ad4 <k_poll+0x464>
	node->prev->next = node->next;
   28b08:	6853      	ldr	r3, [r2, #4]
   28b0a:	5877      	ldr	r7, [r6, r1]
   28b0c:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28b0e:	5873      	ldr	r3, [r6, r1]
   28b10:	6852      	ldr	r2, [r2, #4]
   28b12:	605a      	str	r2, [r3, #4]
   28b14:	e7de      	b.n	28ad4 <k_poll+0x464>
	node->prev->next = node->next;
   28b16:	6853      	ldr	r3, [r2, #4]
   28b18:	5877      	ldr	r7, [r6, r1]
   28b1a:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28b1c:	5873      	ldr	r3, [r6, r1]
   28b1e:	6852      	ldr	r2, [r2, #4]
   28b20:	605a      	str	r2, [r3, #4]
   28b22:	e7d7      	b.n	28ad4 <k_poll+0x464>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28b24:	f38e 8811 	msr	BASEPRI, lr
	return swap_rc;
   28b28:	e7c6      	b.n	28ab8 <k_poll+0x448>
   28b2a:	bf00      	nop
   28b2c:	20002880 	.word	0x20002880

00028b30 <_handle_obj_poll_events>:
	return list->head == list;
   28b30:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   28b32:	4298      	cmp	r0, r3
   28b34:	d010      	beq.n	28b58 <_handle_obj_poll_events+0x28>
	node->prev->next = node->next;
   28b36:	685a      	ldr	r2, [r3, #4]
   28b38:	6818      	ldr	r0, [r3, #0]
   28b3a:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   28b3c:	681a      	ldr	r2, [r3, #0]
   28b3e:	6858      	ldr	r0, [r3, #4]
   28b40:	6050      	str	r0, [r2, #4]
{
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
   28b42:	b15b      	cbz	r3, 28b5c <_handle_obj_poll_events+0x2c>
{
   28b44:	b500      	push	{lr}
   28b46:	b083      	sub	sp, #12
		return 0;
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   28b48:	aa01      	add	r2, sp, #4
   28b4a:	4618      	mov	r0, r3
   28b4c:	f7ff fcfe 	bl	2854c <_signal_poll_event>
	return must_reschedule;
   28b50:	9801      	ldr	r0, [sp, #4]
}
   28b52:	b003      	add	sp, #12
   28b54:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   28b58:	2300      	movs	r3, #0
   28b5a:	e7f2      	b.n	28b42 <_handle_obj_poll_events+0x12>
		return 0;
   28b5c:	2000      	movs	r0, #0
   28b5e:	4770      	bx	lr

00028b60 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   28b60:	b530      	push	{r4, r5, lr}
   28b62:	b083      	sub	sp, #12
	__asm__ volatile(
   28b64:	f04f 0320 	mov.w	r3, #32
   28b68:	f3ef 8511 	mrs	r5, BASEPRI
   28b6c:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   28b70:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1;
   28b72:	2301      	movs	r3, #1
   28b74:	6083      	str	r3, [r0, #8]
	return list->head == list;
   28b76:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   28b78:	4298      	cmp	r0, r3
   28b7a:	d013      	beq.n	28ba4 <k_poll_signal+0x44>
	node->prev->next = node->next;
   28b7c:	685a      	ldr	r2, [r3, #4]
   28b7e:	6819      	ldr	r1, [r3, #0]
   28b80:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   28b82:	681a      	ldr	r2, [r3, #0]
   28b84:	6859      	ldr	r1, [r3, #4]
   28b86:	6051      	str	r1, [r2, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
   28b88:	b173      	cbz	r3, 28ba8 <k_poll_signal+0x48>
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   28b8a:	aa01      	add	r2, sp, #4
   28b8c:	2101      	movs	r1, #1
   28b8e:	4618      	mov	r0, r3
   28b90:	f7ff fcdc 	bl	2854c <_signal_poll_event>
   28b94:	4604      	mov	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
   28b96:	9b01      	ldr	r3, [sp, #4]
   28b98:	b953      	cbnz	r3, 28bb0 <k_poll_signal+0x50>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28b9a:	f385 8811 	msr	BASEPRI, r5
	} else {
		irq_unlock(key);
	}

	return rc;
}
   28b9e:	4620      	mov	r0, r4
   28ba0:	b003      	add	sp, #12
   28ba2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   28ba4:	2300      	movs	r3, #0
   28ba6:	e7ef      	b.n	28b88 <k_poll_signal+0x28>
   28ba8:	f385 8811 	msr	BASEPRI, r5
		return 0;
   28bac:	2400      	movs	r4, #0
   28bae:	e7f6      	b.n	28b9e <k_poll_signal+0x3e>
	_update_time_slice_before_swap();
   28bb0:	f000 fa74 	bl	2909c <_update_time_slice_before_swap>
	return __swap(key);
   28bb4:	4628      	mov	r0, r5
   28bb6:	f7fe fdb7 	bl	27728 <__swap>
   28bba:	e7f0      	b.n	28b9e <k_poll_signal+0x3e>

00028bbc <k_queue_poll>:
	sys_slist_init(list);
}

#if defined(CONFIG_POLL)
static void *k_queue_poll(struct k_queue *queue, s32_t timeout)
{
   28bbc:	b530      	push	{r4, r5, lr}
   28bbe:	b087      	sub	sp, #28
   28bc0:	4604      	mov	r4, r0
   28bc2:	460d      	mov	r5, r1
	struct k_poll_event event;
	int err;
	unsigned int key;
	void *val;

	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   28bc4:	4603      	mov	r3, r0
   28bc6:	2200      	movs	r2, #0
   28bc8:	2104      	movs	r1, #4
   28bca:	eb0d 0001 	add.w	r0, sp, r1
   28bce:	f7ff fd3b 	bl	28648 <k_poll_event_init>
   28bd2:	e005      	b.n	28be0 <k_queue_poll+0x24>
   28bd4:	f383 8811 	msr	BASEPRI, r3
		 * irq_lock.
		 */
		key = irq_lock();
		val = sys_slist_get(&queue->data_q);
		irq_unlock(key);
	} while (!val && timeout == K_FOREVER);
   28bd8:	b9f8      	cbnz	r0, 28c1a <k_queue_poll+0x5e>
   28bda:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   28bde:	d11c      	bne.n	28c1a <k_queue_poll+0x5e>
		event.state = K_POLL_STATE_NOT_READY;
   28be0:	f89d 3011 	ldrb.w	r3, [sp, #17]
   28be4:	f36f 1307 	bfc	r3, #4, #4
   28be8:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   28bec:	462a      	mov	r2, r5
   28bee:	2101      	movs	r1, #1
   28bf0:	a801      	add	r0, sp, #4
   28bf2:	f7ff fd3d 	bl	28670 <k_poll>
		if (err) {
   28bf6:	b978      	cbnz	r0, 28c18 <k_queue_poll+0x5c>
	__asm__ volatile(
   28bf8:	f04f 0220 	mov.w	r2, #32
   28bfc:	f3ef 8311 	mrs	r3, BASEPRI
   28c00:	f382 8811 	msr	BASEPRI, r2
   28c04:	6820      	ldr	r0, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   28c06:	2800      	cmp	r0, #0
   28c08:	d0e4      	beq.n	28bd4 <k_queue_poll+0x18>
	list->head = node->next;
   28c0a:	6802      	ldr	r2, [r0, #0]
   28c0c:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
   28c0e:	6861      	ldr	r1, [r4, #4]
   28c10:	4288      	cmp	r0, r1
   28c12:	d1df      	bne.n	28bd4 <k_queue_poll+0x18>
		list->tail = list->head;
   28c14:	6062      	str	r2, [r4, #4]
   28c16:	e7dd      	b.n	28bd4 <k_queue_poll+0x18>
			return NULL;
   28c18:	2000      	movs	r0, #0

	return val;
}
   28c1a:	b007      	add	sp, #28
   28c1c:	bd30      	pop	{r4, r5, pc}

00028c1e <k_queue_init>:
	list->head = NULL;
   28c1e:	2300      	movs	r3, #0
   28c20:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   28c22:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   28c24:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   28c28:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   28c2a:	60c3      	str	r3, [r0, #12]
   28c2c:	4770      	bx	lr

00028c2e <k_queue_insert>:
{
   28c2e:	b510      	push	{r4, lr}
   28c30:	f04f 0320 	mov.w	r3, #32
   28c34:	f3ef 8411 	mrs	r4, BASEPRI
   28c38:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   28c3c:	b159      	cbz	r1, 28c56 <k_queue_insert+0x28>
	} else if (!prev->next) {
   28c3e:	680b      	ldr	r3, [r1, #0]
   28c40:	b18b      	cbz	r3, 28c66 <k_queue_insert+0x38>
		node->next = prev->next;
   28c42:	6013      	str	r3, [r2, #0]
		prev->next = node;
   28c44:	600a      	str	r2, [r1, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   28c46:	2104      	movs	r1, #4
   28c48:	3008      	adds	r0, #8
   28c4a:	f7ff ff71 	bl	28b30 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   28c4e:	b998      	cbnz	r0, 28c78 <k_queue_insert+0x4a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28c50:	f384 8811 	msr	BASEPRI, r4
   28c54:	bd10      	pop	{r4, pc}
	node->next = list->head;
   28c56:	6803      	ldr	r3, [r0, #0]
   28c58:	6013      	str	r3, [r2, #0]
	list->head = node;
   28c5a:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   28c5c:	6843      	ldr	r3, [r0, #4]
   28c5e:	2b00      	cmp	r3, #0
   28c60:	d1f1      	bne.n	28c46 <k_queue_insert+0x18>
		list->tail = list->head;
   28c62:	6042      	str	r2, [r0, #4]
   28c64:	e7ef      	b.n	28c46 <k_queue_insert+0x18>
	node->next = NULL;
   28c66:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   28c68:	6843      	ldr	r3, [r0, #4]
   28c6a:	b113      	cbz	r3, 28c72 <k_queue_insert+0x44>
		list->tail->next = node;
   28c6c:	601a      	str	r2, [r3, #0]
		list->tail = node;
   28c6e:	6042      	str	r2, [r0, #4]
   28c70:	e7e9      	b.n	28c46 <k_queue_insert+0x18>
		list->tail = node;
   28c72:	6042      	str	r2, [r0, #4]
		list->head = node;
   28c74:	6002      	str	r2, [r0, #0]
   28c76:	e7e6      	b.n	28c46 <k_queue_insert+0x18>
	_update_time_slice_before_swap();
   28c78:	f000 fa10 	bl	2909c <_update_time_slice_before_swap>
	return __swap(key);
   28c7c:	4620      	mov	r0, r4
   28c7e:	f7fe fd53 	bl	27728 <__swap>
   28c82:	bd10      	pop	{r4, pc}

00028c84 <k_queue_append>:
{
   28c84:	b508      	push	{r3, lr}
	return k_queue_insert(queue, queue->data_q.tail, data);
   28c86:	460a      	mov	r2, r1
   28c88:	6841      	ldr	r1, [r0, #4]
   28c8a:	f7ff ffd0 	bl	28c2e <k_queue_insert>
   28c8e:	bd08      	pop	{r3, pc}

00028c90 <k_queue_prepend>:
{
   28c90:	b508      	push	{r3, lr}
	return k_queue_insert(queue, NULL, data);
   28c92:	460a      	mov	r2, r1
   28c94:	2100      	movs	r1, #0
   28c96:	f7ff ffca 	bl	28c2e <k_queue_insert>
   28c9a:	bd08      	pop	{r3, pc}

00028c9c <k_queue_append_list>:
{
   28c9c:	b510      	push	{r4, lr}
	__asm__ volatile(
   28c9e:	f04f 0320 	mov.w	r3, #32
   28ca2:	f3ef 8411 	mrs	r4, BASEPRI
   28ca6:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   28caa:	6843      	ldr	r3, [r0, #4]
   28cac:	b14b      	cbz	r3, 28cc2 <k_queue_append_list+0x26>
		list->tail->next = (sys_snode_t *)head;
   28cae:	6019      	str	r1, [r3, #0]
		list->tail = (sys_snode_t *)tail;
   28cb0:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   28cb2:	2104      	movs	r1, #4
   28cb4:	3008      	adds	r0, #8
   28cb6:	f7ff ff3b 	bl	28b30 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   28cba:	b928      	cbnz	r0, 28cc8 <k_queue_append_list+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28cbc:	f384 8811 	msr	BASEPRI, r4
   28cc0:	bd10      	pop	{r4, pc}
		list->head = (sys_snode_t *)head;
   28cc2:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   28cc4:	6042      	str	r2, [r0, #4]
   28cc6:	e7f4      	b.n	28cb2 <k_queue_append_list+0x16>
	_update_time_slice_before_swap();
   28cc8:	f000 f9e8 	bl	2909c <_update_time_slice_before_swap>
	return __swap(key);
   28ccc:	4620      	mov	r0, r4
   28cce:	f7fe fd2b 	bl	27728 <__swap>
   28cd2:	bd10      	pop	{r4, pc}

00028cd4 <k_queue_get>:
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   28cd4:	b510      	push	{r4, lr}
	__asm__ volatile(
   28cd6:	f04f 0320 	mov.w	r3, #32
   28cda:	f3ef 8211 	mrs	r2, BASEPRI
   28cde:	f383 8811 	msr	BASEPRI, r3
	return (!list->head);
   28ce2:	6803      	ldr	r3, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   28ce4:	b153      	cbz	r3, 28cfc <k_queue_get+0x28>
	list->head = node->next;
   28ce6:	6819      	ldr	r1, [r3, #0]
   28ce8:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   28cea:	6844      	ldr	r4, [r0, #4]
   28cec:	42a3      	cmp	r3, r4
   28cee:	d003      	beq.n	28cf8 <k_queue_get+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28cf0:	f382 8811 	msr	BASEPRI, r2
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
   28cf4:	4618      	mov	r0, r3
   28cf6:	bd10      	pop	{r4, pc}
		list->tail = list->head;
   28cf8:	6041      	str	r1, [r0, #4]
   28cfa:	e7f9      	b.n	28cf0 <k_queue_get+0x1c>
	}

	if (timeout == K_NO_WAIT) {
   28cfc:	b121      	cbz	r1, 28d08 <k_queue_get+0x34>
   28cfe:	f382 8811 	msr	BASEPRI, r2
	}

#if defined(CONFIG_POLL)
	irq_unlock(key);

	return k_queue_poll(queue, timeout);
   28d02:	f7ff ff5b 	bl	28bbc <k_queue_poll>
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   28d06:	bd10      	pop	{r4, pc}
   28d08:	f382 8811 	msr	BASEPRI, r2
		return NULL;
   28d0c:	2000      	movs	r0, #0
   28d0e:	bd10      	pop	{r4, pc}

00028d10 <_set_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   28d10:	3010      	adds	r0, #16
   28d12:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28d14:	f000 001f 	and.w	r0, r0, #31
   28d18:	2201      	movs	r2, #1
   28d1a:	fa02 f000 	lsl.w	r0, r2, r0
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   28d1e:	1d9a      	adds	r2, r3, #6
   28d20:	4b03      	ldr	r3, [pc, #12]	; (28d30 <_set_ready_q_prio_bit+0x20>)
   28d22:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   28d26:	685a      	ldr	r2, [r3, #4]
   28d28:	4302      	orrs	r2, r0
   28d2a:	605a      	str	r2, [r3, #4]
   28d2c:	4770      	bx	lr
   28d2e:	bf00      	nop
   28d30:	20002880 	.word	0x20002880

00028d34 <_clear_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   28d34:	3010      	adds	r0, #16
   28d36:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28d38:	f000 001f 	and.w	r0, r0, #31
   28d3c:	2201      	movs	r2, #1
   28d3e:	fa02 f000 	lsl.w	r0, r2, r0
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
   28d42:	1d9a      	adds	r2, r3, #6
   28d44:	4b03      	ldr	r3, [pc, #12]	; (28d54 <_clear_ready_q_prio_bit+0x20>)
   28d46:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   28d4a:	685a      	ldr	r2, [r3, #4]
   28d4c:	ea22 0200 	bic.w	r2, r2, r0
   28d50:	605a      	str	r2, [r3, #4]
   28d52:	4770      	bx	lr
   28d54:	20002880 	.word	0x20002880

00028d58 <_get_ready_q_head>:
	ready_range = _ready_q.prio_bmap[0];
   28d58:	4b06      	ldr	r3, [pc, #24]	; (28d74 <_get_ready_q_head+0x1c>)
   28d5a:	69da      	ldr	r2, [r3, #28]
	return __builtin_ffs(op);
   28d5c:	fa92 f3a2 	rbit	r3, r2
   28d60:	fab3 f383 	clz	r3, r3
   28d64:	b90a      	cbnz	r2, 28d6a <_get_ready_q_head+0x12>
   28d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return list->head;
   28d6a:	3304      	adds	r3, #4

	struct k_thread *thread =
		(struct k_thread *)sys_dlist_peek_head_not_empty(list);

	return thread;
}
   28d6c:	4a01      	ldr	r2, [pc, #4]	; (28d74 <_get_ready_q_head+0x1c>)
   28d6e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   28d72:	4770      	bx	lr
   28d74:	20002880 	.word	0x20002880

00028d78 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   28d78:	b570      	push	{r4, r5, r6, lr}
   28d7a:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   28d7c:	f990 000a 	ldrsb.w	r0, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   28d80:	4e0c      	ldr	r6, [pc, #48]	; (28db4 <_add_thread_to_ready_q+0x3c>)
   28d82:	f100 0514 	add.w	r5, r0, #20
   28d86:	eb06 05c5 	add.w	r5, r6, r5, lsl #3

	_set_ready_q_prio_bit(thread->base.prio);
   28d8a:	f7ff ffc1 	bl	28d10 <_set_ready_q_prio_bit>
	node->next = list;
   28d8e:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   28d90:	686b      	ldr	r3, [r5, #4]
   28d92:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   28d94:	686b      	ldr	r3, [r5, #4]
   28d96:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28d98:	606c      	str	r4, [r5, #4]
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   28d9a:	69b3      	ldr	r3, [r6, #24]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   28d9c:	f994 200a 	ldrsb.w	r2, [r4, #10]
   28da0:	f993 100a 	ldrsb.w	r1, [r3, #10]
   28da4:	4291      	cmp	r1, r2
   28da6:	dc02      	bgt.n	28dae <_add_thread_to_ready_q+0x36>
   28da8:	4a02      	ldr	r2, [pc, #8]	; (28db4 <_add_thread_to_ready_q+0x3c>)
   28daa:	6193      	str	r3, [r2, #24]
   28dac:	bd70      	pop	{r4, r5, r6, pc}
   28dae:	4623      	mov	r3, r4
   28db0:	e7fa      	b.n	28da8 <_add_thread_to_ready_q+0x30>
   28db2:	bf00      	nop
   28db4:	20002880 	.word	0x20002880

00028db8 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   28db8:	b538      	push	{r3, r4, r5, lr}
   28dba:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   28dbc:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   28dc0:	4a0e      	ldr	r2, [pc, #56]	; (28dfc <_remove_thread_from_ready_q+0x44>)
   28dc2:	3314      	adds	r3, #20
   28dc4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
	node->prev->next = node->next;
   28dc8:	6840      	ldr	r0, [r0, #4]
   28dca:	6825      	ldr	r5, [r4, #0]
   28dcc:	6005      	str	r5, [r0, #0]
	node->next->prev = node->prev;
   28dce:	6820      	ldr	r0, [r4, #0]
   28dd0:	6865      	ldr	r5, [r4, #4]
   28dd2:	6045      	str	r5, [r0, #4]
	return list->head == list;
   28dd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   28dd8:	4299      	cmp	r1, r3
   28dda:	d006      	beq.n	28dea <_remove_thread_from_ready_q+0x32>
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28ddc:	4b07      	ldr	r3, [pc, #28]	; (28dfc <_remove_thread_from_ready_q+0x44>)
   28dde:	6998      	ldr	r0, [r3, #24]
   28de0:	4284      	cmp	r4, r0
   28de2:	d007      	beq.n	28df4 <_remove_thread_from_ready_q+0x3c>
   28de4:	4b05      	ldr	r3, [pc, #20]	; (28dfc <_remove_thread_from_ready_q+0x44>)
   28de6:	6198      	str	r0, [r3, #24]
   28de8:	bd38      	pop	{r3, r4, r5, pc}
		_clear_ready_q_prio_bit(thread->base.prio);
   28dea:	f994 000a 	ldrsb.w	r0, [r4, #10]
   28dee:	f7ff ffa1 	bl	28d34 <_clear_ready_q_prio_bit>
   28df2:	e7f3      	b.n	28ddc <_remove_thread_from_ready_q+0x24>
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28df4:	f7ff ffb0 	bl	28d58 <_get_ready_q_head>
   28df8:	e7f4      	b.n	28de4 <_remove_thread_from_ready_q+0x2c>
   28dfa:	bf00      	nop
   28dfc:	20002880 	.word	0x20002880

00028e00 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   28e00:	b538      	push	{r3, r4, r5, lr}
   28e02:	680b      	ldr	r3, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28e04:	4299      	cmp	r1, r3
   28e06:	d115      	bne.n	28e34 <_pend_thread+0x34>
   28e08:	2300      	movs	r3, #0
   28e0a:	e013      	b.n	28e34 <_pend_thread+0x34>
	if (!insert_point) {
   28e0c:	b133      	cbz	r3, 28e1c <_pend_thread+0x1c>
		node->prev = insert_point->prev;
   28e0e:	685c      	ldr	r4, [r3, #4]
   28e10:	6044      	str	r4, [r0, #4]
		node->next = insert_point;
   28e12:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   28e14:	685c      	ldr	r4, [r3, #4]
   28e16:	6020      	str	r0, [r4, #0]
		insert_point->prev = node;
   28e18:	6058      	str	r0, [r3, #4]
   28e1a:	e02b      	b.n	28e74 <_pend_thread+0x74>
	node->next = list;
   28e1c:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   28e1e:	684b      	ldr	r3, [r1, #4]
   28e20:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   28e22:	684b      	ldr	r3, [r1, #4]
   28e24:	6018      	str	r0, [r3, #0]
	list->tail = node;
   28e26:	6048      	str	r0, [r1, #4]
   28e28:	e024      	b.n	28e74 <_pend_thread+0x74>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28e2a:	461d      	mov	r5, r3
   28e2c:	e010      	b.n	28e50 <_pend_thread+0x50>
	return (node == list->tail) ? NULL : node->next;
   28e2e:	2500      	movs	r5, #0
   28e30:	e00e      	b.n	28e50 <_pend_thread+0x50>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28e32:	2300      	movs	r3, #0
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   28e34:	b1c3      	cbz	r3, 28e68 <_pend_thread+0x68>
   28e36:	f990 500a 	ldrsb.w	r5, [r0, #10]
   28e3a:	f993 400a 	ldrsb.w	r4, [r3, #10]
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   28e3e:	42a5      	cmp	r5, r4
   28e40:	dbe4      	blt.n	28e0c <_pend_thread+0xc>
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   28e42:	461c      	mov	r4, r3
   28e44:	2b00      	cmp	r3, #0
   28e46:	d0f0      	beq.n	28e2a <_pend_thread+0x2a>
	return (node == list->tail) ? NULL : node->next;
   28e48:	684d      	ldr	r5, [r1, #4]
   28e4a:	42ab      	cmp	r3, r5
   28e4c:	d0ef      	beq.n	28e2e <_pend_thread+0x2e>
   28e4e:	681d      	ldr	r5, [r3, #0]
   28e50:	b145      	cbz	r5, 28e64 <_pend_thread+0x64>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28e52:	2c00      	cmp	r4, #0
   28e54:	d0ed      	beq.n	28e32 <_pend_thread+0x32>
	return (node == list->tail) ? NULL : node->next;
   28e56:	684d      	ldr	r5, [r1, #4]
   28e58:	42ac      	cmp	r4, r5
   28e5a:	d001      	beq.n	28e60 <_pend_thread+0x60>
   28e5c:	681b      	ldr	r3, [r3, #0]
   28e5e:	e7e9      	b.n	28e34 <_pend_thread+0x34>
   28e60:	2300      	movs	r3, #0
   28e62:	e7e7      	b.n	28e34 <_pend_thread+0x34>
   28e64:	2300      	movs	r3, #0
   28e66:	e7e5      	b.n	28e34 <_pend_thread+0x34>
	node->next = list;
   28e68:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   28e6a:	684b      	ldr	r3, [r1, #4]
   28e6c:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   28e6e:	684b      	ldr	r3, [r1, #4]
   28e70:	6018      	str	r0, [r3, #0]
	list->tail = node;
   28e72:	6048      	str	r0, [r1, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   28e74:	7a44      	ldrb	r4, [r0, #9]
   28e76:	f044 0402 	orr.w	r4, r4, #2
   28e7a:	7244      	strb	r4, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   28e7c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28e80:	f000 8089 	beq.w	28f96 <_pend_thread+0x196>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   28e84:	f102 0309 	add.w	r3, r2, #9
   28e88:	4a43      	ldr	r2, [pc, #268]	; (28f98 <_pend_thread+0x198>)
   28e8a:	fba2 2303 	umull	r2, r3, r2, r3
   28e8e:	08db      	lsrs	r3, r3, #3
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
   28e90:	3301      	adds	r3, #1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   28e92:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28e96:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   28e98:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28e9a:	60e1      	str	r1, [r4, #12]
	if (!timeout_in_ticks) {
   28e9c:	b133      	cbz	r3, 28eac <_pend_thread+0xac>
	return list->head == list;
   28e9e:	4a3f      	ldr	r2, [pc, #252]	; (28f9c <_pend_thread+0x19c>)
   28ea0:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28ea4:	4293      	cmp	r3, r2
   28ea6:	d151      	bne.n	28f4c <_pend_thread+0x14c>
   28ea8:	2300      	movs	r3, #0
   28eaa:	e04f      	b.n	28f4c <_pend_thread+0x14c>
	__asm__ volatile(
   28eac:	f04f 0320 	mov.w	r3, #32
   28eb0:	f3ef 8511 	mrs	r5, BASEPRI
   28eb4:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28ebc:	6123      	str	r3, [r4, #16]
	if (thread) {
   28ebe:	b320      	cbz	r0, 28f0a <_pend_thread+0x10a>
	if (timeout_obj->wait_q) {
   28ec0:	68e3      	ldr	r3, [r4, #12]
   28ec2:	b15b      	cbz	r3, 28edc <_pend_thread+0xdc>
	node->prev->next = node->next;
   28ec4:	6843      	ldr	r3, [r0, #4]
   28ec6:	6802      	ldr	r2, [r0, #0]
   28ec8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28eca:	6803      	ldr	r3, [r0, #0]
   28ecc:	6842      	ldr	r2, [r0, #4]
   28ece:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28ed0:	7a43      	ldrb	r3, [r0, #9]
   28ed2:	f023 0302 	bic.w	r3, r3, #2
   28ed6:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28ed8:	2300      	movs	r3, #0
   28eda:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28edc:	7a43      	ldrb	r3, [r0, #9]
   28ede:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28ee2:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28ee4:	f013 0f1b 	tst.w	r3, #27
   28ee8:	d107      	bne.n	28efa <_pend_thread+0xfa>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28eea:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28ef0:	d001      	beq.n	28ef6 <_pend_thread+0xf6>
   28ef2:	2300      	movs	r3, #0
   28ef4:	e002      	b.n	28efc <_pend_thread+0xfc>
   28ef6:	2301      	movs	r3, #1
   28ef8:	e000      	b.n	28efc <_pend_thread+0xfc>
   28efa:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28efc:	b913      	cbnz	r3, 28f04 <_pend_thread+0x104>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28efe:	f385 8811 	msr	BASEPRI, r5
   28f02:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   28f04:	f7ff ff38 	bl	28d78 <_add_thread_to_ready_q>
   28f08:	e7f9      	b.n	28efe <_pend_thread+0xfe>
   28f0a:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   28f0e:	6963      	ldr	r3, [r4, #20]
   28f10:	2b00      	cmp	r3, #0
   28f12:	d040      	beq.n	28f96 <_pend_thread+0x196>
			timeout->func(timeout);
   28f14:	4620      	mov	r0, r4
   28f16:	4798      	blx	r3
   28f18:	bd38      	pop	{r3, r4, r5, pc}
			in_q->delta_ticks_from_prev -= *delta;
   28f1a:	1a8a      	subs	r2, r1, r2
   28f1c:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28f1e:	b133      	cbz	r3, 28f2e <_pend_thread+0x12e>
		node->prev = insert_point->prev;
   28f20:	685a      	ldr	r2, [r3, #4]
   28f22:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   28f24:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   28f26:	685a      	ldr	r2, [r3, #4]
   28f28:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28f2a:	605c      	str	r4, [r3, #4]
   28f2c:	bd38      	pop	{r3, r4, r5, pc}
	node->next = list;
   28f2e:	4b1b      	ldr	r3, [pc, #108]	; (28f9c <_pend_thread+0x19c>)
   28f30:	f103 020c 	add.w	r2, r3, #12
   28f34:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   28f36:	691a      	ldr	r2, [r3, #16]
   28f38:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28f3a:	691a      	ldr	r2, [r3, #16]
   28f3c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28f3e:	611c      	str	r4, [r3, #16]
   28f40:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28f42:	4619      	mov	r1, r3
   28f44:	e011      	b.n	28f6a <_pend_thread+0x16a>
	return (node == list->tail) ? NULL : node->next;
   28f46:	2100      	movs	r1, #0
   28f48:	e00f      	b.n	28f6a <_pend_thread+0x16a>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28f4a:	2300      	movs	r3, #0
   28f4c:	b1d3      	cbz	r3, 28f84 <_pend_thread+0x184>
		if (*delta <= in_q->delta_ticks_from_prev) {
   28f4e:	6922      	ldr	r2, [r4, #16]
   28f50:	6919      	ldr	r1, [r3, #16]
   28f52:	428a      	cmp	r2, r1
   28f54:	dde1      	ble.n	28f1a <_pend_thread+0x11a>
		*delta -= in_q->delta_ticks_from_prev;
   28f56:	1a52      	subs	r2, r2, r1
   28f58:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28f5a:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28f5c:	2b00      	cmp	r3, #0
   28f5e:	d0f0      	beq.n	28f42 <_pend_thread+0x142>
	return (node == list->tail) ? NULL : node->next;
   28f60:	490e      	ldr	r1, [pc, #56]	; (28f9c <_pend_thread+0x19c>)
   28f62:	6909      	ldr	r1, [r1, #16]
   28f64:	428b      	cmp	r3, r1
   28f66:	d0ee      	beq.n	28f46 <_pend_thread+0x146>
   28f68:	6819      	ldr	r1, [r3, #0]
   28f6a:	2900      	cmp	r1, #0
   28f6c:	d0ed      	beq.n	28f4a <_pend_thread+0x14a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28f6e:	b12a      	cbz	r2, 28f7c <_pend_thread+0x17c>
	return (node == list->tail) ? NULL : node->next;
   28f70:	490a      	ldr	r1, [pc, #40]	; (28f9c <_pend_thread+0x19c>)
   28f72:	6909      	ldr	r1, [r1, #16]
   28f74:	428a      	cmp	r2, r1
   28f76:	d003      	beq.n	28f80 <_pend_thread+0x180>
   28f78:	681b      	ldr	r3, [r3, #0]
   28f7a:	e7e7      	b.n	28f4c <_pend_thread+0x14c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28f7c:	2300      	movs	r3, #0
   28f7e:	e7e5      	b.n	28f4c <_pend_thread+0x14c>
	return (node == list->tail) ? NULL : node->next;
   28f80:	2300      	movs	r3, #0
   28f82:	e7e3      	b.n	28f4c <_pend_thread+0x14c>
	node->next = list;
   28f84:	4b05      	ldr	r3, [pc, #20]	; (28f9c <_pend_thread+0x19c>)
   28f86:	f103 020c 	add.w	r2, r3, #12
   28f8a:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   28f8c:	691a      	ldr	r2, [r3, #16]
   28f8e:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28f90:	691a      	ldr	r2, [r3, #16]
   28f92:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28f94:	611c      	str	r4, [r3, #16]
   28f96:	bd38      	pop	{r3, r4, r5, pc}
   28f98:	cccccccd 	.word	0xcccccccd
   28f9c:	20002880 	.word	0x20002880

00028fa0 <_pend_current_thread>:
}

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   28fa0:	b570      	push	{r4, r5, r6, lr}
   28fa2:	4605      	mov	r5, r0
   28fa4:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(_current);
   28fa6:	4c05      	ldr	r4, [pc, #20]	; (28fbc <_pend_current_thread+0x1c>)
   28fa8:	68a0      	ldr	r0, [r4, #8]
   28faa:	f7ff ff05 	bl	28db8 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   28fae:	4632      	mov	r2, r6
   28fb0:	4629      	mov	r1, r5
   28fb2:	68a0      	ldr	r0, [r4, #8]
   28fb4:	f7ff ff24 	bl	28e00 <_pend_thread>
   28fb8:	bd70      	pop	{r4, r5, r6, pc}
   28fba:	bf00      	nop
   28fbc:	20002880 	.word	0x20002880

00028fc0 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   28fc0:	4b09      	ldr	r3, [pc, #36]	; (28fe8 <__must_switch_threads+0x28>)
   28fc2:	69db      	ldr	r3, [r3, #28]
	return __builtin_ffs(op);
   28fc4:	fa93 f0a3 	rbit	r0, r3
   28fc8:	fab0 f080 	clz	r0, r0
   28fcc:	b90b      	cbnz	r3, 28fd2 <__must_switch_threads+0x12>
   28fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   28fd2:	3810      	subs	r0, #16

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   28fd4:	4b04      	ldr	r3, [pc, #16]	; (28fe8 <__must_switch_threads+0x28>)
   28fd6:	689b      	ldr	r3, [r3, #8]
   28fd8:	f993 300a 	ldrsb.w	r3, [r3, #10]
#else
	return 0;
#endif
}
   28fdc:	4283      	cmp	r3, r0
   28fde:	bfd4      	ite	le
   28fe0:	2000      	movle	r0, #0
   28fe2:	2001      	movgt	r0, #1
   28fe4:	4770      	bx	lr
   28fe6:	bf00      	nop
   28fe8:	20002880 	.word	0x20002880

00028fec <_move_thread_to_end_of_prio_q>:
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   28fec:	f990 200a 	ldrsb.w	r2, [r0, #10]
	return prio + _NUM_COOP_PRIO;
   28ff0:	f102 0310 	add.w	r3, r2, #16
	sys_dlist_t *q = &_ready_q.q[q_index];
   28ff4:	3214      	adds	r2, #20
   28ff6:	4911      	ldr	r1, [pc, #68]	; (2903c <_move_thread_to_end_of_prio_q+0x50>)
   28ff8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	return list->tail == node;
   28ffc:	6851      	ldr	r1, [r2, #4]

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   28ffe:	4288      	cmp	r0, r1
   29000:	d01a      	beq.n	29038 <_move_thread_to_end_of_prio_q+0x4c>
{
   29002:	b510      	push	{r4, lr}
	node->prev->next = node->next;
   29004:	6841      	ldr	r1, [r0, #4]
   29006:	6804      	ldr	r4, [r0, #0]
   29008:	600c      	str	r4, [r1, #0]
	node->next->prev = node->prev;
   2900a:	6801      	ldr	r1, [r0, #0]
   2900c:	6844      	ldr	r4, [r0, #4]
   2900e:	604c      	str	r4, [r1, #4]
	node->next = list;
   29010:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   29012:	4a0a      	ldr	r2, [pc, #40]	; (2903c <_move_thread_to_end_of_prio_q+0x50>)
   29014:	3304      	adds	r3, #4
   29016:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2901a:	6859      	ldr	r1, [r3, #4]
   2901c:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   2901e:	6859      	ldr	r1, [r3, #4]
   29020:	6008      	str	r0, [r1, #0]
	list->tail = node;
   29022:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   29024:	6993      	ldr	r3, [r2, #24]
   29026:	4298      	cmp	r0, r3
   29028:	d002      	beq.n	29030 <_move_thread_to_end_of_prio_q+0x44>
   2902a:	4a04      	ldr	r2, [pc, #16]	; (2903c <_move_thread_to_end_of_prio_q+0x50>)
   2902c:	6193      	str	r3, [r2, #24]
   2902e:	bd10      	pop	{r4, pc}
   29030:	f7ff fe92 	bl	28d58 <_get_ready_q_head>
   29034:	4603      	mov	r3, r0
   29036:	e7f8      	b.n	2902a <_move_thread_to_end_of_prio_q+0x3e>
   29038:	4770      	bx	lr
   2903a:	bf00      	nop
   2903c:	20002880 	.word	0x20002880

00029040 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   29040:	4b01      	ldr	r3, [pc, #4]	; (29048 <_impl_k_current_get+0x8>)
   29042:	6898      	ldr	r0, [r3, #8]
   29044:	4770      	bx	lr
   29046:	bf00      	nop
   29048:	20002880 	.word	0x20002880

0002904c <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   2904c:	4b0f      	ldr	r3, [pc, #60]	; (2908c <_is_thread_time_slicing+0x40>)
   2904e:	681b      	ldr	r3, [r3, #0]
   29050:	2b00      	cmp	r3, #0
   29052:	dd14      	ble.n	2907e <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   29054:	4b0e      	ldr	r3, [pc, #56]	; (29090 <_is_thread_time_slicing+0x44>)
   29056:	681b      	ldr	r3, [r3, #0]
   29058:	4298      	cmp	r0, r3
   2905a:	d012      	beq.n	29082 <_is_thread_time_slicing+0x36>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   2905c:	f990 300a 	ldrsb.w	r3, [r0, #10]
   29060:	4a0c      	ldr	r2, [pc, #48]	; (29094 <_is_thread_time_slicing+0x48>)
   29062:	6812      	ldr	r2, [r2, #0]
   29064:	4293      	cmp	r3, r2
   29066:	db0e      	blt.n	29086 <_is_thread_time_slicing+0x3a>
	return list->head != list->tail;
   29068:	4a0b      	ldr	r2, [pc, #44]	; (29098 <_is_thread_time_slicing+0x4c>)
   2906a:	3314      	adds	r3, #20
   2906c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   29070:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   29074:	685b      	ldr	r3, [r3, #4]
   29076:	1ac0      	subs	r0, r0, r3
   29078:	bf18      	it	ne
   2907a:	2001      	movne	r0, #1
	}

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
   2907c:	4770      	bx	lr
		return 0;
   2907e:	2000      	movs	r0, #0
   29080:	4770      	bx	lr
   29082:	2000      	movs	r0, #0
   29084:	4770      	bx	lr
   29086:	2000      	movs	r0, #0
}
   29088:	4770      	bx	lr
   2908a:	bf00      	nop
   2908c:	200029a0 	.word	0x200029a0
   29090:	000331a4 	.word	0x000331a4
   29094:	200029a4 	.word	0x200029a4
   29098:	20002880 	.word	0x20002880

0002909c <_update_time_slice_before_swap>:
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   2909c:	2200      	movs	r2, #0
   2909e:	4b01      	ldr	r3, [pc, #4]	; (290a4 <_update_time_slice_before_swap+0x8>)
   290a0:	601a      	str	r2, [r3, #0]
   290a2:	4770      	bx	lr
   290a4:	20002c6c 	.word	0x20002c6c

000290a8 <_reschedule_threads>:
{
   290a8:	b510      	push	{r4, lr}
   290aa:	4604      	mov	r4, r0
	return _is_preempt(_current) && __must_switch_threads();
   290ac:	4b0a      	ldr	r3, [pc, #40]	; (290d8 <_reschedule_threads+0x30>)
   290ae:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   290b0:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   290b2:	2b7f      	cmp	r3, #127	; 0x7f
   290b4:	d805      	bhi.n	290c2 <_reschedule_threads+0x1a>
   290b6:	f7ff ff83 	bl	28fc0 <__must_switch_threads>
   290ba:	4603      	mov	r3, r0
   290bc:	b110      	cbz	r0, 290c4 <_reschedule_threads+0x1c>
   290be:	2301      	movs	r3, #1
   290c0:	e000      	b.n	290c4 <_reschedule_threads+0x1c>
   290c2:	2300      	movs	r3, #0
	if (_must_switch_threads()) {
   290c4:	b913      	cbnz	r3, 290cc <_reschedule_threads+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   290c6:	f384 8811 	msr	BASEPRI, r4
   290ca:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   290cc:	f7ff ffe6 	bl	2909c <_update_time_slice_before_swap>
	return __swap(key);
   290d0:	4620      	mov	r0, r4
   290d2:	f7fe fb29 	bl	27728 <__swap>
   290d6:	bd10      	pop	{r4, pc}
   290d8:	20002880 	.word	0x20002880

000290dc <k_sched_unlock>:
{
   290dc:	b508      	push	{r3, lr}
	__asm__ volatile(
   290de:	f04f 0320 	mov.w	r3, #32
   290e2:	f3ef 8011 	mrs	r0, BASEPRI
   290e6:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   290ea:	4b04      	ldr	r3, [pc, #16]	; (290fc <k_sched_unlock+0x20>)
   290ec:	689a      	ldr	r2, [r3, #8]
   290ee:	7ad3      	ldrb	r3, [r2, #11]
   290f0:	3301      	adds	r3, #1
   290f2:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   290f4:	f7ff ffd8 	bl	290a8 <_reschedule_threads>
   290f8:	bd08      	pop	{r3, pc}
   290fa:	bf00      	nop
   290fc:	20002880 	.word	0x20002880

00029100 <_impl_k_yield>:
{
   29100:	b538      	push	{r3, r4, r5, lr}
   29102:	f04f 0320 	mov.w	r3, #32
   29106:	f3ef 8511 	mrs	r5, BASEPRI
   2910a:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   2910e:	4c08      	ldr	r4, [pc, #32]	; (29130 <_impl_k_yield+0x30>)
   29110:	68a0      	ldr	r0, [r4, #8]
   29112:	f7ff ff6b 	bl	28fec <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   29116:	68a2      	ldr	r2, [r4, #8]
	return _ready_q.cache;
   29118:	69a3      	ldr	r3, [r4, #24]
   2911a:	429a      	cmp	r2, r3
   2911c:	d005      	beq.n	2912a <_impl_k_yield+0x2a>
	_update_time_slice_before_swap();
   2911e:	f7ff ffbd 	bl	2909c <_update_time_slice_before_swap>
	return __swap(key);
   29122:	4628      	mov	r0, r5
   29124:	f7fe fb00 	bl	27728 <__swap>
   29128:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2912a:	f385 8811 	msr	BASEPRI, r5
   2912e:	bd38      	pop	{r3, r4, r5, pc}
   29130:	20002880 	.word	0x20002880

00029134 <_impl_k_sleep>:
{
   29134:	b570      	push	{r4, r5, r6, lr}
   29136:	b082      	sub	sp, #8
	if (duration == 0) {
   29138:	b308      	cbz	r0, 2917e <_impl_k_sleep+0x4a>
   2913a:	4603      	mov	r3, r0
   2913c:	3309      	adds	r3, #9
   2913e:	4a4f      	ldr	r2, [pc, #316]	; (2927c <_impl_k_sleep+0x148>)
   29140:	fba2 2303 	umull	r2, r3, r2, r3
   29144:	08db      	lsrs	r3, r3, #3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   29146:	3301      	adds	r3, #1
   29148:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
   2914a:	f04f 0320 	mov.w	r3, #32
   2914e:	f3ef 8511 	mrs	r5, BASEPRI
   29152:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
   29156:	4c4a      	ldr	r4, [pc, #296]	; (29280 <_impl_k_sleep+0x14c>)
   29158:	68a0      	ldr	r0, [r4, #8]
   2915a:	f7ff fe2d 	bl	28db8 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   2915e:	68a0      	ldr	r0, [r4, #8]
   29160:	9b01      	ldr	r3, [sp, #4]
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   29162:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29166:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   29168:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2916a:	2200      	movs	r2, #0
   2916c:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   2916e:	b14b      	cbz	r3, 29184 <_impl_k_sleep+0x50>
	return list->head == list;
   29170:	4a43      	ldr	r2, [pc, #268]	; (29280 <_impl_k_sleep+0x14c>)
   29172:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29176:	4293      	cmp	r3, r2
   29178:	d154      	bne.n	29224 <_impl_k_sleep+0xf0>
   2917a:	2300      	movs	r3, #0
   2917c:	e052      	b.n	29224 <_impl_k_sleep+0xf0>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   2917e:	f7ff ffbf 	bl	29100 <_impl_k_yield>
   29182:	e079      	b.n	29278 <_impl_k_sleep+0x144>
   29184:	f04f 0320 	mov.w	r3, #32
   29188:	f3ef 8611 	mrs	r6, BASEPRI
   2918c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29194:	6123      	str	r3, [r4, #16]
	if (thread) {
   29196:	b320      	cbz	r0, 291e2 <_impl_k_sleep+0xae>
	if (timeout_obj->wait_q) {
   29198:	68e3      	ldr	r3, [r4, #12]
   2919a:	b15b      	cbz	r3, 291b4 <_impl_k_sleep+0x80>
	node->prev->next = node->next;
   2919c:	6843      	ldr	r3, [r0, #4]
   2919e:	6802      	ldr	r2, [r0, #0]
   291a0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   291a2:	6803      	ldr	r3, [r0, #0]
   291a4:	6842      	ldr	r2, [r0, #4]
   291a6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   291a8:	7a43      	ldrb	r3, [r0, #9]
   291aa:	f023 0302 	bic.w	r3, r3, #2
   291ae:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   291b0:	2300      	movs	r3, #0
   291b2:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   291b4:	7a43      	ldrb	r3, [r0, #9]
   291b6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   291ba:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   291bc:	f013 0f1b 	tst.w	r3, #27
   291c0:	d107      	bne.n	291d2 <_impl_k_sleep+0x9e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   291c2:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   291c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   291c8:	d001      	beq.n	291ce <_impl_k_sleep+0x9a>
   291ca:	2300      	movs	r3, #0
   291cc:	e002      	b.n	291d4 <_impl_k_sleep+0xa0>
   291ce:	2301      	movs	r3, #1
   291d0:	e000      	b.n	291d4 <_impl_k_sleep+0xa0>
   291d2:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   291d4:	b913      	cbnz	r3, 291dc <_impl_k_sleep+0xa8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   291d6:	f386 8811 	msr	BASEPRI, r6
   291da:	e048      	b.n	2926e <_impl_k_sleep+0x13a>
		_add_thread_to_ready_q(thread);
   291dc:	f7ff fdcc 	bl	28d78 <_add_thread_to_ready_q>
   291e0:	e7f9      	b.n	291d6 <_impl_k_sleep+0xa2>
   291e2:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   291e6:	6963      	ldr	r3, [r4, #20]
   291e8:	2b00      	cmp	r3, #0
   291ea:	d040      	beq.n	2926e <_impl_k_sleep+0x13a>
			timeout->func(timeout);
   291ec:	4620      	mov	r0, r4
   291ee:	4798      	blx	r3
   291f0:	e03d      	b.n	2926e <_impl_k_sleep+0x13a>
			in_q->delta_ticks_from_prev -= *delta;
   291f2:	1a8a      	subs	r2, r1, r2
   291f4:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   291f6:	b133      	cbz	r3, 29206 <_impl_k_sleep+0xd2>
		node->prev = insert_point->prev;
   291f8:	685a      	ldr	r2, [r3, #4]
   291fa:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   291fc:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   291fe:	685a      	ldr	r2, [r3, #4]
   29200:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   29202:	605c      	str	r4, [r3, #4]
   29204:	e033      	b.n	2926e <_impl_k_sleep+0x13a>
	node->next = list;
   29206:	4b1e      	ldr	r3, [pc, #120]	; (29280 <_impl_k_sleep+0x14c>)
   29208:	f103 020c 	add.w	r2, r3, #12
   2920c:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   2920e:	691a      	ldr	r2, [r3, #16]
   29210:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29212:	691a      	ldr	r2, [r3, #16]
   29214:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29216:	611c      	str	r4, [r3, #16]
   29218:	e029      	b.n	2926e <_impl_k_sleep+0x13a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2921a:	4619      	mov	r1, r3
   2921c:	e011      	b.n	29242 <_impl_k_sleep+0x10e>
	return (node == list->tail) ? NULL : node->next;
   2921e:	2100      	movs	r1, #0
   29220:	e00f      	b.n	29242 <_impl_k_sleep+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29222:	2300      	movs	r3, #0
   29224:	b1d3      	cbz	r3, 2925c <_impl_k_sleep+0x128>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29226:	6922      	ldr	r2, [r4, #16]
   29228:	6919      	ldr	r1, [r3, #16]
   2922a:	428a      	cmp	r2, r1
   2922c:	dde1      	ble.n	291f2 <_impl_k_sleep+0xbe>
		*delta -= in_q->delta_ticks_from_prev;
   2922e:	1a52      	subs	r2, r2, r1
   29230:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29232:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29234:	2b00      	cmp	r3, #0
   29236:	d0f0      	beq.n	2921a <_impl_k_sleep+0xe6>
	return (node == list->tail) ? NULL : node->next;
   29238:	4911      	ldr	r1, [pc, #68]	; (29280 <_impl_k_sleep+0x14c>)
   2923a:	6909      	ldr	r1, [r1, #16]
   2923c:	428b      	cmp	r3, r1
   2923e:	d0ee      	beq.n	2921e <_impl_k_sleep+0xea>
   29240:	6819      	ldr	r1, [r3, #0]
   29242:	2900      	cmp	r1, #0
   29244:	d0ed      	beq.n	29222 <_impl_k_sleep+0xee>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29246:	b12a      	cbz	r2, 29254 <_impl_k_sleep+0x120>
	return (node == list->tail) ? NULL : node->next;
   29248:	490d      	ldr	r1, [pc, #52]	; (29280 <_impl_k_sleep+0x14c>)
   2924a:	6909      	ldr	r1, [r1, #16]
   2924c:	428a      	cmp	r2, r1
   2924e:	d003      	beq.n	29258 <_impl_k_sleep+0x124>
   29250:	681b      	ldr	r3, [r3, #0]
   29252:	e7e7      	b.n	29224 <_impl_k_sleep+0xf0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29254:	2300      	movs	r3, #0
   29256:	e7e5      	b.n	29224 <_impl_k_sleep+0xf0>
	return (node == list->tail) ? NULL : node->next;
   29258:	2300      	movs	r3, #0
   2925a:	e7e3      	b.n	29224 <_impl_k_sleep+0xf0>
	node->next = list;
   2925c:	4b08      	ldr	r3, [pc, #32]	; (29280 <_impl_k_sleep+0x14c>)
   2925e:	f103 020c 	add.w	r2, r3, #12
   29262:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   29264:	691a      	ldr	r2, [r3, #16]
   29266:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29268:	691a      	ldr	r2, [r3, #16]
   2926a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2926c:	611c      	str	r4, [r3, #16]
	_update_time_slice_before_swap();
   2926e:	f7ff ff15 	bl	2909c <_update_time_slice_before_swap>
	return __swap(key);
   29272:	4628      	mov	r0, r5
   29274:	f7fe fa58 	bl	27728 <__swap>
}
   29278:	b002      	add	sp, #8
   2927a:	bd70      	pop	{r4, r5, r6, pc}
   2927c:	cccccccd 	.word	0xcccccccd
   29280:	20002880 	.word	0x20002880

00029284 <do_sem_give>:
	sem->count += (sem->count != sem->limit);
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
   29284:	b510      	push	{r4, lr}
	if (_handling_timeouts) {
   29286:	4b43      	ldr	r3, [pc, #268]	; (29394 <do_sem_give+0x110>)
   29288:	681b      	ldr	r3, [r3, #0]
   2928a:	2b00      	cmp	r3, #0
   2928c:	d136      	bne.n	292fc <do_sem_give+0x78>
	return list->head == list;
   2928e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29290:	42a0      	cmp	r0, r4
   29292:	d044      	beq.n	2931e <do_sem_give+0x9a>
	if (thread) {
   29294:	b14c      	cbz	r4, 292aa <do_sem_give+0x26>
	node->prev->next = node->next;
   29296:	6863      	ldr	r3, [r4, #4]
   29298:	6822      	ldr	r2, [r4, #0]
   2929a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2929c:	6823      	ldr	r3, [r4, #0]
   2929e:	6862      	ldr	r2, [r4, #4]
   292a0:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   292a2:	7a63      	ldrb	r3, [r4, #9]
   292a4:	f023 0302 	bic.w	r3, r3, #2
   292a8:	7263      	strb	r3, [r4, #9]
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);

	if (!thread) {
   292aa:	2c00      	cmp	r4, #0
   292ac:	d039      	beq.n	29322 <do_sem_give+0x9e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   292ae:	6a22      	ldr	r2, [r4, #32]
   292b0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   292b4:	d013      	beq.n	292de <do_sem_give+0x5a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   292b6:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   292ba:	4937      	ldr	r1, [pc, #220]	; (29398 <do_sem_give+0x114>)
   292bc:	6909      	ldr	r1, [r1, #16]
   292be:	428b      	cmp	r3, r1
   292c0:	d004      	beq.n	292cc <do_sem_give+0x48>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   292c2:	b103      	cbz	r3, 292c6 <do_sem_give+0x42>
	return (node == list->tail) ? NULL : node->next;
   292c4:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   292c6:	6919      	ldr	r1, [r3, #16]
   292c8:	440a      	add	r2, r1
   292ca:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   292cc:	6963      	ldr	r3, [r4, #20]
   292ce:	6922      	ldr	r2, [r4, #16]
   292d0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   292d2:	6923      	ldr	r3, [r4, #16]
   292d4:	6962      	ldr	r2, [r4, #20]
   292d6:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   292d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   292dc:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   292de:	7a63      	ldrb	r3, [r4, #9]
   292e0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   292e4:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   292e6:	f013 0f1b 	tst.w	r3, #27
   292ea:	d128      	bne.n	2933e <do_sem_give+0xba>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   292ec:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   292ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   292f2:	d022      	beq.n	2933a <do_sem_give+0xb6>
   292f4:	2300      	movs	r3, #0
   292f6:	e023      	b.n	29340 <do_sem_give+0xbc>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   292f8:	2400      	movs	r4, #0
   292fa:	e003      	b.n	29304 <do_sem_give+0x80>
   292fc:	4602      	mov	r2, r0
	return list->head == list;
   292fe:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29300:	42a0      	cmp	r0, r4
   29302:	d0f9      	beq.n	292f8 <do_sem_give+0x74>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   29304:	2c00      	cmp	r4, #0
   29306:	d0c5      	beq.n	29294 <do_sem_give+0x10>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   29308:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   2930a:	f113 0f02 	cmn.w	r3, #2
   2930e:	d1c1      	bne.n	29294 <do_sem_give+0x10>
	return (node == list->tail) ? NULL : node->next;
   29310:	6853      	ldr	r3, [r2, #4]
   29312:	429c      	cmp	r4, r3
   29314:	d001      	beq.n	2931a <do_sem_give+0x96>
   29316:	6824      	ldr	r4, [r4, #0]
   29318:	e7f4      	b.n	29304 <do_sem_give+0x80>
   2931a:	2400      	movs	r4, #0
   2931c:	e7f2      	b.n	29304 <do_sem_give+0x80>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2931e:	2400      	movs	r4, #0
   29320:	e7b8      	b.n	29294 <do_sem_give+0x10>
	sem->count += (sem->count != sem->limit);
   29322:	6883      	ldr	r3, [r0, #8]
   29324:	68c2      	ldr	r2, [r0, #12]
   29326:	4293      	cmp	r3, r2
   29328:	bf18      	it	ne
   2932a:	3301      	addne	r3, #1
   2932c:	6083      	str	r3, [r0, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   2932e:	2102      	movs	r1, #2
   29330:	3010      	adds	r0, #16
   29332:	f7ff fbfd 	bl	28b30 <_handle_obj_poll_events>
   29336:	4603      	mov	r3, r0
		increment_count_up_to_limit(sem);
		return handle_poll_events(sem);
   29338:	e01c      	b.n	29374 <do_sem_give+0xf0>
	return !(_is_thread_prevented_from_running(thread) ||
   2933a:	2301      	movs	r3, #1
   2933c:	e000      	b.n	29340 <do_sem_give+0xbc>
   2933e:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29340:	b96b      	cbnz	r3, 2935e <do_sem_give+0xda>
   29342:	2300      	movs	r3, #0
   29344:	6663      	str	r3, [r4, #100]	; 0x64
   29346:	f3ef 8305 	mrs	r3, IPSR
   2934a:	2b0d      	cmp	r3, #13
   2934c:	d80b      	bhi.n	29366 <do_sem_give+0xe2>
   2934e:	b19b      	cbz	r3, 29378 <do_sem_give+0xf4>
   29350:	4b12      	ldr	r3, [pc, #72]	; (2939c <do_sem_give+0x118>)
   29352:	685b      	ldr	r3, [r3, #4]
   29354:	f413 6f00 	tst.w	r3, #2048	; 0x800
   29358:	d010      	beq.n	2937c <do_sem_give+0xf8>
   2935a:	2300      	movs	r3, #0
   2935c:	e004      	b.n	29368 <do_sem_give+0xe4>
		_add_thread_to_ready_q(thread);
   2935e:	4620      	mov	r0, r4
   29360:	f7ff fd0a 	bl	28d78 <_add_thread_to_ready_q>
   29364:	e7ed      	b.n	29342 <do_sem_give+0xbe>
   29366:	2301      	movs	r3, #1
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);

	return !_is_in_isr() && _must_switch_threads();
   29368:	b98b      	cbnz	r3, 2938e <do_sem_give+0x10a>
	return _is_preempt(_current) && __must_switch_threads();
   2936a:	4a0b      	ldr	r2, [pc, #44]	; (29398 <do_sem_give+0x114>)
   2936c:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2936e:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   29370:	2a7f      	cmp	r2, #127	; 0x7f
   29372:	d905      	bls.n	29380 <do_sem_give+0xfc>
}
   29374:	4618      	mov	r0, r3
   29376:	bd10      	pop	{r4, pc}
   29378:	2300      	movs	r3, #0
   2937a:	e7f5      	b.n	29368 <do_sem_give+0xe4>
   2937c:	2301      	movs	r3, #1
   2937e:	e7f3      	b.n	29368 <do_sem_give+0xe4>
   29380:	f7ff fe1e 	bl	28fc0 <__must_switch_threads>
   29384:	4603      	mov	r3, r0
   29386:	2800      	cmp	r0, #0
   29388:	d0f4      	beq.n	29374 <do_sem_give+0xf0>
   2938a:	2301      	movs	r3, #1
   2938c:	e7f2      	b.n	29374 <do_sem_give+0xf0>
	return !_is_in_isr() && _must_switch_threads();
   2938e:	2300      	movs	r3, #0
   29390:	e7f0      	b.n	29374 <do_sem_give+0xf0>
   29392:	bf00      	nop
   29394:	20002c68 	.word	0x20002c68
   29398:	20002880 	.word	0x20002880
   2939c:	e000ed00 	.word	0xe000ed00

000293a0 <_impl_k_sem_init>:
	sem->count = initial_count;
   293a0:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   293a2:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   293a4:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   293a6:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   293a8:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   293ac:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   293ae:	6143      	str	r3, [r0, #20]
   293b0:	4770      	bx	lr

000293b2 <_impl_k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   293b2:	b510      	push	{r4, lr}
	__asm__ volatile(
   293b4:	f04f 0320 	mov.w	r3, #32
   293b8:	f3ef 8411 	mrs	r4, BASEPRI
   293bc:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   293c0:	f7ff ff60 	bl	29284 <do_sem_give>
   293c4:	b910      	cbnz	r0, 293cc <_impl_k_sem_give+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   293c6:	f384 8811 	msr	BASEPRI, r4
   293ca:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   293cc:	f7ff fe66 	bl	2909c <_update_time_slice_before_swap>
	return __swap(key);
   293d0:	4620      	mov	r0, r4
   293d2:	f7fe f9a9 	bl	27728 <__swap>
   293d6:	bd10      	pop	{r4, pc}

000293d8 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   293d8:	b510      	push	{r4, lr}
	__asm__ volatile(
   293da:	f04f 0320 	mov.w	r3, #32
   293de:	f3ef 8411 	mrs	r4, BASEPRI
   293e2:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   293e6:	6883      	ldr	r3, [r0, #8]
   293e8:	b12b      	cbz	r3, 293f6 <_impl_k_sem_take+0x1e>
		sem->count--;
   293ea:	3b01      	subs	r3, #1
   293ec:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   293ee:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   293f2:	2000      	movs	r0, #0
   293f4:	bd10      	pop	{r4, pc}
	}

	if (timeout == K_NO_WAIT) {
   293f6:	b139      	cbz	r1, 29408 <_impl_k_sem_take+0x30>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
   293f8:	f7ff fdd2 	bl	28fa0 <_pend_current_thread>
	_update_time_slice_before_swap();
   293fc:	f7ff fe4e 	bl	2909c <_update_time_slice_before_swap>
	return __swap(key);
   29400:	4620      	mov	r0, r4
   29402:	f7fe f991 	bl	27728 <__swap>

	return _Swap(key);
}
   29406:	bd10      	pop	{r4, pc}
   29408:	f384 8811 	msr	BASEPRI, r4
		return -EBUSY;
   2940c:	f06f 000f 	mvn.w	r0, #15
   29410:	bd10      	pop	{r4, pc}
	...

00029414 <handle_time_slicing>:
 *   in this function and at thread level
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(s32_t ticks)
{
   29414:	b538      	push	{r3, r4, r5, lr}
   29416:	4604      	mov	r4, r0
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
   29418:	4b0f      	ldr	r3, [pc, #60]	; (29458 <handle_time_slicing+0x44>)
   2941a:	6898      	ldr	r0, [r3, #8]
   2941c:	f7ff fe16 	bl	2904c <_is_thread_time_slicing>
   29420:	b150      	cbz	r0, 29438 <handle_time_slicing+0x24>
	return (u64_t)ticks * _ms_per_tick;
   29422:	00a2      	lsls	r2, r4, #2
   29424:	1912      	adds	r2, r2, r4
   29426:	1892      	adds	r2, r2, r2
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   29428:	490c      	ldr	r1, [pc, #48]	; (2945c <handle_time_slicing+0x48>)
   2942a:	680b      	ldr	r3, [r1, #0]
   2942c:	441a      	add	r2, r3
   2942e:	600a      	str	r2, [r1, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   29430:	4b0b      	ldr	r3, [pc, #44]	; (29460 <handle_time_slicing+0x4c>)
   29432:	681b      	ldr	r3, [r3, #0]
   29434:	429a      	cmp	r2, r3
   29436:	da00      	bge.n	2943a <handle_time_slicing+0x26>
   29438:	bd38      	pop	{r3, r4, r5, pc}

		unsigned int key;

		_time_slice_elapsed = 0;
   2943a:	2200      	movs	r2, #0
   2943c:	600a      	str	r2, [r1, #0]
	__asm__ volatile(
   2943e:	f04f 0320 	mov.w	r3, #32
   29442:	f3ef 8411 	mrs	r4, BASEPRI
   29446:	f383 8811 	msr	BASEPRI, r3

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
   2944a:	4b03      	ldr	r3, [pc, #12]	; (29458 <handle_time_slicing+0x44>)
   2944c:	6898      	ldr	r0, [r3, #8]
   2944e:	f7ff fdcd 	bl	28fec <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29452:	f384 8811 	msr	BASEPRI, r4
   29456:	e7ef      	b.n	29438 <handle_time_slicing+0x24>
   29458:	20002880 	.word	0x20002880
   2945c:	20002c6c 	.word	0x20002c6c
   29460:	200029a0 	.word	0x200029a0

00029464 <_tick_get_32>:
	return (u32_t)_sys_clock_tick_count;
   29464:	4b01      	ldr	r3, [pc, #4]	; (2946c <_tick_get_32+0x8>)
   29466:	e9d3 0100 	ldrd	r0, r1, [r3]
}
   2946a:	4770      	bx	lr
   2946c:	20002c70 	.word	0x20002c70

00029470 <_impl_k_uptime_get_32>:
{
   29470:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(_tick_get_32());
   29472:	f7ff fff7 	bl	29464 <_tick_get_32>
   29476:	0082      	lsls	r2, r0, #2
   29478:	1810      	adds	r0, r2, r0
   2947a:	1800      	adds	r0, r0, r0
}
   2947c:	bd38      	pop	{r3, r4, r5, pc}
	...

00029480 <_tick_get>:
	__asm__ volatile(
   29480:	f04f 0220 	mov.w	r2, #32
   29484:	f3ef 8311 	mrs	r3, BASEPRI
   29488:	f382 8811 	msr	BASEPRI, r2
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   2948c:	4a02      	ldr	r2, [pc, #8]	; (29498 <_tick_get+0x18>)
   2948e:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29492:	f383 8811 	msr	BASEPRI, r3
}
   29496:	4770      	bx	lr
   29498:	20002c70 	.word	0x20002c70

0002949c <_impl_k_uptime_get>:
{
   2949c:	b510      	push	{r4, lr}
	return __ticks_to_ms(_tick_get());
   2949e:	f7ff ffef 	bl	29480 <_tick_get>
   294a2:	008c      	lsls	r4, r1, #2
   294a4:	0082      	lsls	r2, r0, #2
   294a6:	ea44 7390 	orr.w	r3, r4, r0, lsr #30
   294aa:	1880      	adds	r0, r0, r2
   294ac:	4159      	adcs	r1, r3
   294ae:	1800      	adds	r0, r0, r0
   294b0:	4149      	adcs	r1, r1
}
   294b2:	bd10      	pop	{r4, pc}

000294b4 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   294b4:	b570      	push	{r4, r5, r6, lr}
   294b6:	b082      	sub	sp, #8
   294b8:	4605      	mov	r5, r0
	__asm__ volatile(
   294ba:	f04f 0320 	mov.w	r3, #32
   294be:	f3ef 8011 	mrs	r0, BASEPRI
   294c2:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   294c6:	496a      	ldr	r1, [pc, #424]	; (29670 <_nano_sys_clock_tick_announce+0x1bc>)
   294c8:	e9d1 2300 	ldrd	r2, r3, [r1]
   294cc:	1952      	adds	r2, r2, r5
   294ce:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   294d2:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   294d6:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   294da:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   294de:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   294e2:	f04f 0320 	mov.w	r3, #32
   294e6:	f3ef 8111 	mrs	r1, BASEPRI
   294ea:	f383 8811 	msr	BASEPRI, r3
   294ee:	4608      	mov	r0, r1
	return list->head == list;
   294f0:	4b60      	ldr	r3, [pc, #384]	; (29674 <_nano_sys_clock_tick_announce+0x1c0>)
   294f2:	f853 2f0c 	ldr.w	r2, [r3, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   294f6:	429a      	cmp	r2, r3
   294f8:	d02b      	beq.n	29552 <_nano_sys_clock_tick_announce+0x9e>
	if (!head) {
   294fa:	b362      	cbz	r2, 29556 <_nano_sys_clock_tick_announce+0xa2>
	head->delta_ticks_from_prev -= ticks;
   294fc:	6913      	ldr	r3, [r2, #16]
   294fe:	1b5b      	subs	r3, r3, r5
   29500:	6113      	str	r3, [r2, #16]
	sys_dnode_t *next = &head->node;
   29502:	4613      	mov	r3, r2
	_handling_timeouts = 1;
   29504:	2101      	movs	r1, #1
   29506:	4a5c      	ldr	r2, [pc, #368]	; (29678 <_nano_sys_clock_tick_announce+0x1c4>)
   29508:	6011      	str	r1, [r2, #0]
	while (timeout && timeout->delta_ticks_from_prev == 0) {
   2950a:	b33b      	cbz	r3, 2955c <_nano_sys_clock_tick_announce+0xa8>
   2950c:	691a      	ldr	r2, [r3, #16]
   2950e:	bb2a      	cbnz	r2, 2955c <_nano_sys_clock_tick_announce+0xa8>
	node->prev->next = node->next;
   29510:	685a      	ldr	r2, [r3, #4]
   29512:	6819      	ldr	r1, [r3, #0]
   29514:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   29516:	681a      	ldr	r2, [r3, #0]
   29518:	6859      	ldr	r1, [r3, #4]
   2951a:	6051      	str	r1, [r2, #4]
	node->next = list->head;
   2951c:	aa02      	add	r2, sp, #8
   2951e:	f852 1d08 	ldr.w	r1, [r2, #-8]!
   29522:	6019      	str	r1, [r3, #0]
	node->prev = list;
   29524:	605a      	str	r2, [r3, #4]
	list->head->prev = node;
   29526:	9a00      	ldr	r2, [sp, #0]
   29528:	6053      	str	r3, [r2, #4]
	list->head = node;
   2952a:	9300      	str	r3, [sp, #0]
		timeout->delta_ticks_from_prev = _EXPIRED;
   2952c:	f06f 0201 	mvn.w	r2, #1
   29530:	611a      	str	r2, [r3, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29532:	f380 8811 	msr	BASEPRI, r0
	__asm__ volatile(
   29536:	f04f 0220 	mov.w	r2, #32
   2953a:	f3ef 8311 	mrs	r3, BASEPRI
   2953e:	f382 8811 	msr	BASEPRI, r2
   29542:	4618      	mov	r0, r3
	return list->head == list;
   29544:	4a4b      	ldr	r2, [pc, #300]	; (29674 <_nano_sys_clock_tick_announce+0x1c0>)
   29546:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2954a:	4293      	cmp	r3, r2
   2954c:	d1dd      	bne.n	2950a <_nano_sys_clock_tick_announce+0x56>
   2954e:	2300      	movs	r3, #0
   29550:	e7db      	b.n	2950a <_nano_sys_clock_tick_announce+0x56>
   29552:	2200      	movs	r2, #0
   29554:	e7d1      	b.n	294fa <_nano_sys_clock_tick_announce+0x46>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29556:	f381 8811 	msr	BASEPRI, r1
   2955a:	e084      	b.n	29666 <_nano_sys_clock_tick_announce+0x1b2>
   2955c:	f380 8811 	msr	BASEPRI, r0
	return list->head == list;
   29560:	aa02      	add	r2, sp, #8
   29562:	f852 3d08 	ldr.w	r3, [r2, #-8]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29566:	4293      	cmp	r3, r2
   29568:	d00d      	beq.n	29586 <_nano_sys_clock_tick_announce+0xd2>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   2956a:	b193      	cbz	r3, 29592 <_nano_sys_clock_tick_announce+0xde>
   2956c:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2956e:	b163      	cbz	r3, 2958a <_nano_sys_clock_tick_announce+0xd6>
	return (node == list->tail) ? NULL : node->next;
   29570:	9901      	ldr	r1, [sp, #4]
   29572:	428b      	cmp	r3, r1
   29574:	d00b      	beq.n	2958e <_nano_sys_clock_tick_announce+0xda>
   29576:	6819      	ldr	r1, [r3, #0]
   29578:	b169      	cbz	r1, 29596 <_nano_sys_clock_tick_announce+0xe2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2957a:	b172      	cbz	r2, 2959a <_nano_sys_clock_tick_announce+0xe6>
	return (node == list->tail) ? NULL : node->next;
   2957c:	9901      	ldr	r1, [sp, #4]
   2957e:	428a      	cmp	r2, r1
   29580:	d00d      	beq.n	2959e <_nano_sys_clock_tick_announce+0xea>
   29582:	681c      	ldr	r4, [r3, #0]
   29584:	e027      	b.n	295d6 <_nano_sys_clock_tick_announce+0x122>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29586:	2300      	movs	r3, #0
   29588:	e7ef      	b.n	2956a <_nano_sys_clock_tick_announce+0xb6>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2958a:	4619      	mov	r1, r3
   2958c:	e7f4      	b.n	29578 <_nano_sys_clock_tick_announce+0xc4>
	return (node == list->tail) ? NULL : node->next;
   2958e:	2100      	movs	r1, #0
   29590:	e7f2      	b.n	29578 <_nano_sys_clock_tick_announce+0xc4>
   29592:	461c      	mov	r4, r3
   29594:	e01f      	b.n	295d6 <_nano_sys_clock_tick_announce+0x122>
   29596:	2400      	movs	r4, #0
   29598:	e01d      	b.n	295d6 <_nano_sys_clock_tick_announce+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2959a:	2400      	movs	r4, #0
   2959c:	e01b      	b.n	295d6 <_nano_sys_clock_tick_announce+0x122>
	return (node == list->tail) ? NULL : node->next;
   2959e:	2400      	movs	r4, #0
   295a0:	e019      	b.n	295d6 <_nano_sys_clock_tick_announce+0x122>
	return !(_is_thread_prevented_from_running(thread) ||
   295a2:	2301      	movs	r3, #1
   295a4:	e000      	b.n	295a8 <_nano_sys_clock_tick_announce+0xf4>
   295a6:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   295a8:	2b00      	cmp	r3, #0
   295aa:	d142      	bne.n	29632 <_nano_sys_clock_tick_announce+0x17e>
   295ac:	f386 8811 	msr	BASEPRI, r6
   295b0:	2c00      	cmp	r4, #0
   295b2:	d04d      	beq.n	29650 <_nano_sys_clock_tick_announce+0x19c>
   295b4:	4623      	mov	r3, r4
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   295b6:	2c00      	cmp	r4, #0
   295b8:	d046      	beq.n	29648 <_nano_sys_clock_tick_announce+0x194>
	return (node == list->tail) ? NULL : node->next;
   295ba:	9a01      	ldr	r2, [sp, #4]
   295bc:	4294      	cmp	r4, r2
   295be:	d045      	beq.n	2964c <_nano_sys_clock_tick_announce+0x198>
   295c0:	6822      	ldr	r2, [r4, #0]
   295c2:	2a00      	cmp	r2, #0
   295c4:	d046      	beq.n	29654 <_nano_sys_clock_tick_announce+0x1a0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   295c6:	2b00      	cmp	r3, #0
   295c8:	d046      	beq.n	29658 <_nano_sys_clock_tick_announce+0x1a4>
	return (node == list->tail) ? NULL : node->next;
   295ca:	9a01      	ldr	r2, [sp, #4]
   295cc:	4293      	cmp	r3, r2
   295ce:	d045      	beq.n	2965c <_nano_sys_clock_tick_announce+0x1a8>
   295d0:	6822      	ldr	r2, [r4, #0]
   295d2:	4623      	mov	r3, r4
   295d4:	4614      	mov	r4, r2
   295d6:	2b00      	cmp	r3, #0
   295d8:	d042      	beq.n	29660 <_nano_sys_clock_tick_announce+0x1ac>
	node->prev->next = node->next;
   295da:	685a      	ldr	r2, [r3, #4]
   295dc:	6819      	ldr	r1, [r3, #0]
   295de:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   295e0:	681a      	ldr	r2, [r3, #0]
   295e2:	6859      	ldr	r1, [r3, #4]
   295e4:	6051      	str	r1, [r2, #4]
	struct k_thread *thread = timeout->thread;
   295e6:	6898      	ldr	r0, [r3, #8]
	__asm__ volatile(
   295e8:	f04f 0220 	mov.w	r2, #32
   295ec:	f3ef 8611 	mrs	r6, BASEPRI
   295f0:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   295f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   295f8:	611a      	str	r2, [r3, #16]
	if (thread) {
   295fa:	b1e8      	cbz	r0, 29638 <_nano_sys_clock_tick_announce+0x184>
	if (timeout_obj->wait_q) {
   295fc:	68db      	ldr	r3, [r3, #12]
   295fe:	b15b      	cbz	r3, 29618 <_nano_sys_clock_tick_announce+0x164>
	node->prev->next = node->next;
   29600:	6843      	ldr	r3, [r0, #4]
   29602:	6802      	ldr	r2, [r0, #0]
   29604:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29606:	6803      	ldr	r3, [r0, #0]
   29608:	6842      	ldr	r2, [r0, #4]
   2960a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2960c:	7a43      	ldrb	r3, [r0, #9]
   2960e:	f023 0302 	bic.w	r3, r3, #2
   29612:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   29614:	2300      	movs	r3, #0
   29616:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29618:	7a43      	ldrb	r3, [r0, #9]
   2961a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2961e:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29620:	f013 0f1b 	tst.w	r3, #27
   29624:	d1bf      	bne.n	295a6 <_nano_sys_clock_tick_announce+0xf2>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29626:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2962c:	d0b9      	beq.n	295a2 <_nano_sys_clock_tick_announce+0xee>
   2962e:	2300      	movs	r3, #0
   29630:	e7ba      	b.n	295a8 <_nano_sys_clock_tick_announce+0xf4>
		_add_thread_to_ready_q(thread);
   29632:	f7ff fba1 	bl	28d78 <_add_thread_to_ready_q>
   29636:	e7b9      	b.n	295ac <_nano_sys_clock_tick_announce+0xf8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29638:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   2963c:	695a      	ldr	r2, [r3, #20]
   2963e:	2a00      	cmp	r2, #0
   29640:	d0b6      	beq.n	295b0 <_nano_sys_clock_tick_announce+0xfc>
			timeout->func(timeout);
   29642:	4618      	mov	r0, r3
   29644:	4790      	blx	r2
   29646:	e7b3      	b.n	295b0 <_nano_sys_clock_tick_announce+0xfc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29648:	4622      	mov	r2, r4
   2964a:	e7ba      	b.n	295c2 <_nano_sys_clock_tick_announce+0x10e>
	return (node == list->tail) ? NULL : node->next;
   2964c:	2200      	movs	r2, #0
   2964e:	e7b8      	b.n	295c2 <_nano_sys_clock_tick_announce+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   29650:	4622      	mov	r2, r4
   29652:	e7be      	b.n	295d2 <_nano_sys_clock_tick_announce+0x11e>
   29654:	2200      	movs	r2, #0
   29656:	e7bc      	b.n	295d2 <_nano_sys_clock_tick_announce+0x11e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29658:	2200      	movs	r2, #0
   2965a:	e7ba      	b.n	295d2 <_nano_sys_clock_tick_announce+0x11e>
	return (node == list->tail) ? NULL : node->next;
   2965c:	2200      	movs	r2, #0
   2965e:	e7b8      	b.n	295d2 <_nano_sys_clock_tick_announce+0x11e>
	_handling_timeouts = 0;
   29660:	2200      	movs	r2, #0
   29662:	4b05      	ldr	r3, [pc, #20]	; (29678 <_nano_sys_clock_tick_announce+0x1c4>)
   29664:	601a      	str	r2, [r3, #0]
	irq_unlock(key);
#endif
	handle_timeouts(ticks);

	/* time slicing is basically handled like just yet another timeout */
	handle_time_slicing(ticks);
   29666:	4628      	mov	r0, r5
   29668:	f7ff fed4 	bl	29414 <handle_time_slicing>
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   2966c:	b002      	add	sp, #8
   2966e:	bd70      	pop	{r4, r5, r6, pc}
   29670:	20002c70 	.word	0x20002c70
   29674:	20002880 	.word	0x20002880
   29678:	20002c68 	.word	0x20002c68

0002967c <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   2967c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   2967e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29682:	f44f 6280 	mov.w	r2, #1024	; 0x400
   29686:	4903      	ldr	r1, [pc, #12]	; (29694 <k_sys_work_q_init+0x18>)
   29688:	4803      	ldr	r0, [pc, #12]	; (29698 <k_sys_work_q_init+0x1c>)
   2968a:	f000 fc49 	bl	29f20 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   2968e:	2000      	movs	r0, #0
   29690:	bd08      	pop	{r3, pc}
   29692:	bf00      	nop
   29694:	2000b568 	.word	0x2000b568
   29698:	20002c78 	.word	0x20002c78

0002969c <k_is_in_isr>:
   2969c:	f3ef 8305 	mrs	r3, IPSR
   296a0:	2b0d      	cmp	r3, #13
   296a2:	d807      	bhi.n	296b4 <k_is_in_isr+0x18>
   296a4:	b143      	cbz	r3, 296b8 <k_is_in_isr+0x1c>
   296a6:	4b06      	ldr	r3, [pc, #24]	; (296c0 <k_is_in_isr+0x24>)
   296a8:	685b      	ldr	r3, [r3, #4]
   296aa:	f413 6f00 	tst.w	r3, #2048	; 0x800
   296ae:	d005      	beq.n	296bc <k_is_in_isr+0x20>
   296b0:	2000      	movs	r0, #0
   296b2:	4770      	bx	lr
   296b4:	2001      	movs	r0, #1
   296b6:	4770      	bx	lr
   296b8:	2000      	movs	r0, #0
   296ba:	4770      	bx	lr
   296bc:	2001      	movs	r0, #1


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   296be:	4770      	bx	lr
   296c0:	e000ed00 	.word	0xe000ed00

000296c4 <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   296c4:	4b02      	ldr	r3, [pc, #8]	; (296d0 <_is_thread_essential+0xc>)
   296c6:	689b      	ldr	r3, [r3, #8]
   296c8:	7a18      	ldrb	r0, [r3, #8]
}
   296ca:	f000 0001 	and.w	r0, r0, #1
   296ce:	4770      	bx	lr
   296d0:	20002880 	.word	0x20002880

000296d4 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   296d4:	b508      	push	{r3, lr}
   296d6:	4604      	mov	r4, r0
   296d8:	4608      	mov	r0, r1
   296da:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   296dc:	461a      	mov	r2, r3
   296de:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   296e0:	f7ff fcae 	bl	29040 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   296e4:	f7fe facc 	bl	27c80 <_impl_k_thread_abort>

000296e8 <_impl_k_thread_start>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
void _impl_k_thread_start(struct k_thread *thread)
{
   296e8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   296ea:	f04f 0320 	mov.w	r3, #32
   296ee:	f3ef 8411 	mrs	r4, BASEPRI
   296f2:	f383 8811 	msr	BASEPRI, r3
	return !(thread->base.thread_state & _THREAD_PRESTART);
   296f6:	7a43      	ldrb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	if (_has_thread_started(thread)) {
   296f8:	f013 0f04 	tst.w	r3, #4
   296fc:	d00b      	beq.n	29716 <_impl_k_thread_start+0x2e>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   296fe:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29702:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29704:	f013 0f1b 	tst.w	r3, #27
   29708:	d10a      	bne.n	29720 <_impl_k_thread_start+0x38>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2970a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2970c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29710:	d004      	beq.n	2971c <_impl_k_thread_start+0x34>
   29712:	2500      	movs	r5, #0
   29714:	e005      	b.n	29722 <_impl_k_thread_start+0x3a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29716:	f384 8811 	msr	BASEPRI, r4
   2971a:	bd38      	pop	{r3, r4, r5, pc}
   2971c:	2501      	movs	r5, #1
   2971e:	e000      	b.n	29722 <_impl_k_thread_start+0x3a>
   29720:	2500      	movs	r5, #0
		return;
	}

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   29722:	b915      	cbnz	r5, 2972a <_impl_k_thread_start+0x42>
   29724:	f384 8811 	msr	BASEPRI, r4
   29728:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   2972a:	f7ff fb25 	bl	28d78 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   2972e:	4b0a      	ldr	r3, [pc, #40]	; (29758 <_impl_k_thread_start+0x70>)
   29730:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   29732:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   29734:	2b7f      	cmp	r3, #127	; 0x7f
   29736:	d908      	bls.n	2974a <_impl_k_thread_start+0x62>
   29738:	2300      	movs	r3, #0
		if (_must_switch_threads()) {
   2973a:	2b00      	cmp	r3, #0
   2973c:	d0f2      	beq.n	29724 <_impl_k_thread_start+0x3c>
	_update_time_slice_before_swap();
   2973e:	f7ff fcad 	bl	2909c <_update_time_slice_before_swap>
	return __swap(key);
   29742:	4620      	mov	r0, r4
   29744:	f7fd fff0 	bl	27728 <__swap>
   29748:	bd38      	pop	{r3, r4, r5, pc}
   2974a:	f7ff fc39 	bl	28fc0 <__must_switch_threads>
   2974e:	4603      	mov	r3, r0
   29750:	2800      	cmp	r0, #0
   29752:	d0f2      	beq.n	2973a <_impl_k_thread_start+0x52>
   29754:	462b      	mov	r3, r5
   29756:	e7f0      	b.n	2973a <_impl_k_thread_start+0x52>
   29758:	20002880 	.word	0x20002880

0002975c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
   2975c:	b570      	push	{r4, r5, r6, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   2975e:	b1d1      	cbz	r1, 29796 <schedule_new_thread+0x3a>
   29760:	460b      	mov	r3, r1
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   29762:	3309      	adds	r3, #9
   29764:	4a47      	ldr	r2, [pc, #284]	; (29884 <schedule_new_thread+0x128>)
   29766:	fba2 2303 	umull	r2, r3, r2, r3
   2976a:	08db      	lsrs	r3, r3, #3
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   2976c:	3301      	adds	r3, #1
	__asm__ volatile(
   2976e:	f04f 0220 	mov.w	r2, #32
   29772:	f3ef 8511 	mrs	r5, BASEPRI
   29776:	f382 8811 	msr	BASEPRI, r2
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   2977a:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2977e:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   29780:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29782:	2200      	movs	r2, #0
   29784:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   29786:	b14b      	cbz	r3, 2979c <schedule_new_thread+0x40>
	return list->head == list;
   29788:	4a3f      	ldr	r2, [pc, #252]	; (29888 <schedule_new_thread+0x12c>)
   2978a:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2978e:	4293      	cmp	r3, r2
   29790:	d152      	bne.n	29838 <schedule_new_thread+0xdc>
   29792:	2300      	movs	r3, #0
   29794:	e050      	b.n	29838 <schedule_new_thread+0xdc>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   29796:	f7ff ffa7 	bl	296e8 <_impl_k_thread_start>
   2979a:	bd70      	pop	{r4, r5, r6, pc}
   2979c:	f04f 0320 	mov.w	r3, #32
   297a0:	f3ef 8611 	mrs	r6, BASEPRI
   297a4:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   297a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   297ac:	6123      	str	r3, [r4, #16]
	if (thread) {
   297ae:	b320      	cbz	r0, 297fa <schedule_new_thread+0x9e>
	if (timeout_obj->wait_q) {
   297b0:	68e3      	ldr	r3, [r4, #12]
   297b2:	b15b      	cbz	r3, 297cc <schedule_new_thread+0x70>
	node->prev->next = node->next;
   297b4:	6843      	ldr	r3, [r0, #4]
   297b6:	6802      	ldr	r2, [r0, #0]
   297b8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   297ba:	6803      	ldr	r3, [r0, #0]
   297bc:	6842      	ldr	r2, [r0, #4]
   297be:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   297c0:	7a43      	ldrb	r3, [r0, #9]
   297c2:	f023 0302 	bic.w	r3, r3, #2
   297c6:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   297c8:	2300      	movs	r3, #0
   297ca:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   297cc:	7a43      	ldrb	r3, [r0, #9]
   297ce:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   297d2:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   297d4:	f013 0f1b 	tst.w	r3, #27
   297d8:	d107      	bne.n	297ea <schedule_new_thread+0x8e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   297da:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   297dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   297e0:	d001      	beq.n	297e6 <schedule_new_thread+0x8a>
   297e2:	2300      	movs	r3, #0
   297e4:	e002      	b.n	297ec <schedule_new_thread+0x90>
   297e6:	2301      	movs	r3, #1
   297e8:	e000      	b.n	297ec <schedule_new_thread+0x90>
   297ea:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   297ec:	b913      	cbnz	r3, 297f4 <schedule_new_thread+0x98>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   297ee:	f386 8811 	msr	BASEPRI, r6
   297f2:	e044      	b.n	2987e <schedule_new_thread+0x122>
		_add_thread_to_ready_q(thread);
   297f4:	f7ff fac0 	bl	28d78 <_add_thread_to_ready_q>
   297f8:	e7f9      	b.n	297ee <schedule_new_thread+0x92>
   297fa:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   297fe:	6963      	ldr	r3, [r4, #20]
   29800:	2b00      	cmp	r3, #0
   29802:	d03c      	beq.n	2987e <schedule_new_thread+0x122>
			timeout->func(timeout);
   29804:	4620      	mov	r0, r4
   29806:	4798      	blx	r3
   29808:	e039      	b.n	2987e <schedule_new_thread+0x122>
			in_q->delta_ticks_from_prev -= *delta;
   2980a:	1a8a      	subs	r2, r1, r2
   2980c:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2980e:	b133      	cbz	r3, 2981e <schedule_new_thread+0xc2>
		node->prev = insert_point->prev;
   29810:	685a      	ldr	r2, [r3, #4]
   29812:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   29814:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   29816:	685a      	ldr	r2, [r3, #4]
   29818:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   2981a:	605c      	str	r4, [r3, #4]
   2981c:	e02f      	b.n	2987e <schedule_new_thread+0x122>
	node->next = list;
   2981e:	4b1b      	ldr	r3, [pc, #108]	; (2988c <schedule_new_thread+0x130>)
   29820:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   29822:	685a      	ldr	r2, [r3, #4]
   29824:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29826:	685a      	ldr	r2, [r3, #4]
   29828:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2982a:	605c      	str	r4, [r3, #4]
   2982c:	e027      	b.n	2987e <schedule_new_thread+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2982e:	4619      	mov	r1, r3
   29830:	e011      	b.n	29856 <schedule_new_thread+0xfa>
	return (node == list->tail) ? NULL : node->next;
   29832:	2100      	movs	r1, #0
   29834:	e00f      	b.n	29856 <schedule_new_thread+0xfa>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29836:	2300      	movs	r3, #0
   29838:	b1d3      	cbz	r3, 29870 <schedule_new_thread+0x114>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2983a:	6922      	ldr	r2, [r4, #16]
   2983c:	6919      	ldr	r1, [r3, #16]
   2983e:	428a      	cmp	r2, r1
   29840:	dde3      	ble.n	2980a <schedule_new_thread+0xae>
		*delta -= in_q->delta_ticks_from_prev;
   29842:	1a52      	subs	r2, r2, r1
   29844:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29846:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29848:	2b00      	cmp	r3, #0
   2984a:	d0f0      	beq.n	2982e <schedule_new_thread+0xd2>
	return (node == list->tail) ? NULL : node->next;
   2984c:	490e      	ldr	r1, [pc, #56]	; (29888 <schedule_new_thread+0x12c>)
   2984e:	6909      	ldr	r1, [r1, #16]
   29850:	428b      	cmp	r3, r1
   29852:	d0ee      	beq.n	29832 <schedule_new_thread+0xd6>
   29854:	6819      	ldr	r1, [r3, #0]
   29856:	2900      	cmp	r1, #0
   29858:	d0ed      	beq.n	29836 <schedule_new_thread+0xda>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2985a:	b12a      	cbz	r2, 29868 <schedule_new_thread+0x10c>
	return (node == list->tail) ? NULL : node->next;
   2985c:	490a      	ldr	r1, [pc, #40]	; (29888 <schedule_new_thread+0x12c>)
   2985e:	6909      	ldr	r1, [r1, #16]
   29860:	428a      	cmp	r2, r1
   29862:	d003      	beq.n	2986c <schedule_new_thread+0x110>
   29864:	681b      	ldr	r3, [r3, #0]
   29866:	e7e7      	b.n	29838 <schedule_new_thread+0xdc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29868:	2300      	movs	r3, #0
   2986a:	e7e5      	b.n	29838 <schedule_new_thread+0xdc>
	return (node == list->tail) ? NULL : node->next;
   2986c:	2300      	movs	r3, #0
   2986e:	e7e3      	b.n	29838 <schedule_new_thread+0xdc>
	node->next = list;
   29870:	4b06      	ldr	r3, [pc, #24]	; (2988c <schedule_new_thread+0x130>)
   29872:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   29874:	685a      	ldr	r2, [r3, #4]
   29876:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29878:	685a      	ldr	r2, [r3, #4]
   2987a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2987c:	605c      	str	r4, [r3, #4]
   2987e:	f385 8811 	msr	BASEPRI, r5
   29882:	bd70      	pop	{r4, r5, r6, pc}
   29884:	cccccccd 	.word	0xcccccccd
   29888:	20002880 	.word	0x20002880
   2988c:	2000288c 	.word	0x2000288c

00029890 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   29890:	b510      	push	{r4, lr}
   29892:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   29894:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   29896:	9404      	str	r4, [sp, #16]
   29898:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2989a:	9403      	str	r4, [sp, #12]
   2989c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2989e:	9402      	str	r4, [sp, #8]
   298a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   298a2:	9401      	str	r4, [sp, #4]
   298a4:	9c08      	ldr	r4, [sp, #32]
   298a6:	9400      	str	r4, [sp, #0]
   298a8:	f7fe f940 	bl	27b2c <_new_thread>

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   298ac:	b006      	add	sp, #24
   298ae:	bd10      	pop	{r4, pc}

000298b0 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   298b0:	b570      	push	{r4, r5, r6, lr}
   298b2:	b086      	sub	sp, #24
   298b4:	4604      	mov	r4, r0
   298b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   298b8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   298ba:	9604      	str	r6, [sp, #16]
   298bc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   298be:	9603      	str	r6, [sp, #12]
   298c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   298c2:	9602      	str	r6, [sp, #8]
   298c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   298c6:	9601      	str	r6, [sp, #4]
   298c8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   298ca:	9600      	str	r6, [sp, #0]
   298cc:	f7ff ffe0 	bl	29890 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   298d0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   298d4:	d003      	beq.n	298de <_impl_k_thread_create+0x2e>
		schedule_new_thread(new_thread, delay);
   298d6:	4629      	mov	r1, r5
   298d8:	4620      	mov	r0, r4
   298da:	f7ff ff3f 	bl	2975c <schedule_new_thread>
	}
	return new_thread;
}
   298de:	4620      	mov	r0, r4
   298e0:	b006      	add	sp, #24
   298e2:	bd70      	pop	{r4, r5, r6, pc}

000298e4 <_k_thread_single_abort>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
   298e4:	b510      	push	{r4, lr}
   298e6:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   298e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
   298ea:	b103      	cbz	r3, 298ee <_k_thread_single_abort+0xa>
		thread->fn_abort();
   298ec:	4798      	blx	r3
	u8_t state = thread->base.thread_state;
   298ee:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   298f0:	f013 0f1f 	tst.w	r3, #31
   298f4:	d107      	bne.n	29906 <_k_thread_single_abort+0x22>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   298f6:	6a22      	ldr	r2, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   298f8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   298fc:	d001      	beq.n	29902 <_k_thread_single_abort+0x1e>
   298fe:	2200      	movs	r2, #0
   29900:	e002      	b.n	29908 <_k_thread_single_abort+0x24>
   29902:	2201      	movs	r2, #1
   29904:	e000      	b.n	29908 <_k_thread_single_abort+0x24>
   29906:	2200      	movs	r2, #0
	}

	if (_is_thread_ready(thread)) {
   29908:	bb4a      	cbnz	r2, 2995e <_k_thread_single_abort+0x7a>
		_remove_thread_from_ready_q(thread);
	} else {
		if (_is_thread_pending(thread)) {
   2990a:	f013 0f02 	tst.w	r3, #2
   2990e:	d009      	beq.n	29924 <_k_thread_single_abort+0x40>
	node->prev->next = node->next;
   29910:	6863      	ldr	r3, [r4, #4]
   29912:	6822      	ldr	r2, [r4, #0]
   29914:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29916:	6823      	ldr	r3, [r4, #0]
   29918:	6862      	ldr	r2, [r4, #4]
   2991a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2991c:	7a63      	ldrb	r3, [r4, #9]
   2991e:	f023 0302 	bic.w	r3, r3, #2
   29922:	7263      	strb	r3, [r4, #9]
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29924:	6a21      	ldr	r1, [r4, #32]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
   29926:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2992a:	d013      	beq.n	29954 <_k_thread_single_abort+0x70>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2992c:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   29930:	4a0d      	ldr	r2, [pc, #52]	; (29968 <_k_thread_single_abort+0x84>)
   29932:	6912      	ldr	r2, [r2, #16]
   29934:	4293      	cmp	r3, r2
   29936:	d004      	beq.n	29942 <_k_thread_single_abort+0x5e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29938:	b103      	cbz	r3, 2993c <_k_thread_single_abort+0x58>
	return (node == list->tail) ? NULL : node->next;
   2993a:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2993c:	691a      	ldr	r2, [r3, #16]
   2993e:	440a      	add	r2, r1
   29940:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29942:	6963      	ldr	r3, [r4, #20]
   29944:	6922      	ldr	r2, [r4, #16]
   29946:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29948:	6923      	ldr	r3, [r4, #16]
   2994a:	6962      	ldr	r2, [r4, #20]
   2994c:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2994e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29952:	6223      	str	r3, [r4, #32]
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   29954:	7a63      	ldrb	r3, [r4, #9]
   29956:	f043 0308 	orr.w	r3, r3, #8
   2995a:	7263      	strb	r3, [r4, #9]
   2995c:	bd10      	pop	{r4, pc}
		_remove_thread_from_ready_q(thread);
   2995e:	4620      	mov	r0, r4
   29960:	f7ff fa2a 	bl	28db8 <_remove_thread_from_ready_q>
   29964:	e7f6      	b.n	29954 <_k_thread_single_abort+0x70>
   29966:	bf00      	nop
   29968:	20002880 	.word	0x20002880

0002996c <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   2996c:	b530      	push	{r4, r5, lr}
   2996e:	b087      	sub	sp, #28
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   29970:	4c1b      	ldr	r4, [pc, #108]	; (299e0 <_init_static_threads+0x74>)
   29972:	e012      	b.n	2999a <_init_static_threads+0x2e>
		_setup_new_thread(
   29974:	6a23      	ldr	r3, [r4, #32]
   29976:	9304      	str	r3, [sp, #16]
   29978:	69e3      	ldr	r3, [r4, #28]
   2997a:	9303      	str	r3, [sp, #12]
   2997c:	69a3      	ldr	r3, [r4, #24]
   2997e:	9302      	str	r3, [sp, #8]
   29980:	6963      	ldr	r3, [r4, #20]
   29982:	9301      	str	r3, [sp, #4]
   29984:	6923      	ldr	r3, [r4, #16]
   29986:	9300      	str	r3, [sp, #0]
   29988:	68e3      	ldr	r3, [r4, #12]
   2998a:	68a2      	ldr	r2, [r4, #8]
   2998c:	6861      	ldr	r1, [r4, #4]
   2998e:	6820      	ldr	r0, [r4, #0]
   29990:	f7ff ff7e 	bl	29890 <_setup_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   29994:	6823      	ldr	r3, [r4, #0]
   29996:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
   29998:	3430      	adds	r4, #48	; 0x30
   2999a:	4b12      	ldr	r3, [pc, #72]	; (299e4 <_init_static_threads+0x78>)
   2999c:	429c      	cmp	r4, r3
   2999e:	d3e9      	bcc.n	29974 <_init_static_threads+0x8>
	--_current->base.sched_locked;
   299a0:	4b11      	ldr	r3, [pc, #68]	; (299e8 <_init_static_threads+0x7c>)
   299a2:	689a      	ldr	r2, [r3, #8]
   299a4:	7ad3      	ldrb	r3, [r2, #11]
   299a6:	3b01      	subs	r3, #1
   299a8:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   299aa:	f04f 0320 	mov.w	r3, #32
   299ae:	f3ef 8511 	mrs	r5, BASEPRI
   299b2:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   299b6:	4c0a      	ldr	r4, [pc, #40]	; (299e0 <_init_static_threads+0x74>)
   299b8:	e000      	b.n	299bc <_init_static_threads+0x50>
   299ba:	3430      	adds	r4, #48	; 0x30
   299bc:	4b09      	ldr	r3, [pc, #36]	; (299e4 <_init_static_threads+0x78>)
   299be:	429c      	cmp	r4, r3
   299c0:	d207      	bcs.n	299d2 <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
   299c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   299c4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   299c8:	d0f7      	beq.n	299ba <_init_static_threads+0x4e>
			schedule_new_thread(thread_data->init_thread,
   299ca:	6820      	ldr	r0, [r4, #0]
   299cc:	f7ff fec6 	bl	2975c <schedule_new_thread>
   299d0:	e7f3      	b.n	299ba <_init_static_threads+0x4e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   299d2:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
   299d6:	f7ff fb81 	bl	290dc <k_sched_unlock>
}
   299da:	b007      	add	sp, #28
   299dc:	bd30      	pop	{r4, r5, pc}
   299de:	bf00      	nop
   299e0:	2000d100 	.word	0x2000d100
   299e4:	2000d100 	.word	0x2000d100
   299e8:	20002880 	.word	0x20002880

000299ec <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   299ec:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   299ee:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;
   299f0:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
   299f2:	2300      	movs	r3, #0
   299f4:	72c3      	strb	r3, [r0, #11]
	t->delta_ticks_from_prev = _INACTIVE;
   299f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   299fa:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   299fc:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   299fe:	6183      	str	r3, [r0, #24]
	t->func = func;
   29a00:	6243      	str	r3, [r0, #36]	; 0x24
   29a02:	4770      	bx	lr

00029a04 <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
   29a04:	b570      	push	{r4, r5, r6, lr}
   29a06:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   29a08:	6a83      	ldr	r3, [r0, #40]	; 0x28
   29a0a:	2b00      	cmp	r3, #0
   29a0c:	f340 8088 	ble.w	29b20 <_timer_expiration_handler+0x11c>
	__asm__ volatile(
   29a10:	f04f 0320 	mov.w	r3, #32
   29a14:	f3ef 8511 	mrs	r5, BASEPRI
   29a18:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   29a1c:	f100 0218 	add.w	r2, r0, #24
   29a20:	6a83      	ldr	r3, [r0, #40]	; 0x28
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29a22:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   29a24:	2100      	movs	r1, #0
   29a26:	6081      	str	r1, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29a28:	60c2      	str	r2, [r0, #12]
	if (!timeout_in_ticks) {
   29a2a:	b133      	cbz	r3, 29a3a <_timer_expiration_handler+0x36>
	return list->head == list;
   29a2c:	4a59      	ldr	r2, [pc, #356]	; (29b94 <_timer_expiration_handler+0x190>)
   29a2e:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29a32:	4293      	cmp	r3, r2
   29a34:	d14f      	bne.n	29ad6 <_timer_expiration_handler+0xd2>
   29a36:	2300      	movs	r3, #0
   29a38:	e04d      	b.n	29ad6 <_timer_expiration_handler+0xd2>
	struct k_thread *thread = timeout->thread;
   29a3a:	4608      	mov	r0, r1
   29a3c:	f04f 0320 	mov.w	r3, #32
   29a40:	f3ef 8611 	mrs	r6, BASEPRI
   29a44:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29a4c:	6123      	str	r3, [r4, #16]
	if (thread) {
   29a4e:	b319      	cbz	r1, 29a98 <_timer_expiration_handler+0x94>
	if (timeout_obj->wait_q) {
   29a50:	68e3      	ldr	r3, [r4, #12]
   29a52:	b153      	cbz	r3, 29a6a <_timer_expiration_handler+0x66>
	node->prev->next = node->next;
   29a54:	684b      	ldr	r3, [r1, #4]
   29a56:	680a      	ldr	r2, [r1, #0]
   29a58:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29a5a:	680b      	ldr	r3, [r1, #0]
   29a5c:	684a      	ldr	r2, [r1, #4]
   29a5e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29a60:	7a4b      	ldrb	r3, [r1, #9]
   29a62:	f023 0302 	bic.w	r3, r3, #2
   29a66:	724b      	strb	r3, [r1, #9]
		thread->base.timeout.wait_q = NULL;
   29a68:	61c1      	str	r1, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29a6a:	7a43      	ldrb	r3, [r0, #9]
   29a6c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29a70:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29a72:	f013 0f1b 	tst.w	r3, #27
   29a76:	d107      	bne.n	29a88 <_timer_expiration_handler+0x84>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29a78:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29a7e:	d001      	beq.n	29a84 <_timer_expiration_handler+0x80>
   29a80:	2300      	movs	r3, #0
   29a82:	e002      	b.n	29a8a <_timer_expiration_handler+0x86>
   29a84:	2301      	movs	r3, #1
   29a86:	e000      	b.n	29a8a <_timer_expiration_handler+0x86>
   29a88:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29a8a:	b913      	cbnz	r3, 29a92 <_timer_expiration_handler+0x8e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29a8c:	f386 8811 	msr	BASEPRI, r6
   29a90:	e044      	b.n	29b1c <_timer_expiration_handler+0x118>
		_add_thread_to_ready_q(thread);
   29a92:	f7ff f971 	bl	28d78 <_add_thread_to_ready_q>
   29a96:	e7f9      	b.n	29a8c <_timer_expiration_handler+0x88>
   29a98:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   29a9c:	6963      	ldr	r3, [r4, #20]
   29a9e:	2b00      	cmp	r3, #0
   29aa0:	d03c      	beq.n	29b1c <_timer_expiration_handler+0x118>
			timeout->func(timeout);
   29aa2:	4620      	mov	r0, r4
   29aa4:	4798      	blx	r3
   29aa6:	e039      	b.n	29b1c <_timer_expiration_handler+0x118>
			in_q->delta_ticks_from_prev -= *delta;
   29aa8:	1a8a      	subs	r2, r1, r2
   29aaa:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29aac:	b133      	cbz	r3, 29abc <_timer_expiration_handler+0xb8>
		node->prev = insert_point->prev;
   29aae:	685a      	ldr	r2, [r3, #4]
   29ab0:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   29ab2:	6023      	str	r3, [r4, #0]
		insert_point->prev->next = node;
   29ab4:	685a      	ldr	r2, [r3, #4]
   29ab6:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   29ab8:	605c      	str	r4, [r3, #4]
   29aba:	e02f      	b.n	29b1c <_timer_expiration_handler+0x118>
	node->next = list;
   29abc:	4b36      	ldr	r3, [pc, #216]	; (29b98 <_timer_expiration_handler+0x194>)
   29abe:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   29ac0:	685a      	ldr	r2, [r3, #4]
   29ac2:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29ac4:	685a      	ldr	r2, [r3, #4]
   29ac6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29ac8:	605c      	str	r4, [r3, #4]
   29aca:	e027      	b.n	29b1c <_timer_expiration_handler+0x118>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29acc:	4619      	mov	r1, r3
   29ace:	e011      	b.n	29af4 <_timer_expiration_handler+0xf0>
	return (node == list->tail) ? NULL : node->next;
   29ad0:	2100      	movs	r1, #0
   29ad2:	e00f      	b.n	29af4 <_timer_expiration_handler+0xf0>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29ad4:	2300      	movs	r3, #0
   29ad6:	b1d3      	cbz	r3, 29b0e <_timer_expiration_handler+0x10a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29ad8:	6902      	ldr	r2, [r0, #16]
   29ada:	6919      	ldr	r1, [r3, #16]
   29adc:	428a      	cmp	r2, r1
   29ade:	dde3      	ble.n	29aa8 <_timer_expiration_handler+0xa4>
		*delta -= in_q->delta_ticks_from_prev;
   29ae0:	1a52      	subs	r2, r2, r1
   29ae2:	6102      	str	r2, [r0, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29ae4:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29ae6:	2b00      	cmp	r3, #0
   29ae8:	d0f0      	beq.n	29acc <_timer_expiration_handler+0xc8>
	return (node == list->tail) ? NULL : node->next;
   29aea:	492a      	ldr	r1, [pc, #168]	; (29b94 <_timer_expiration_handler+0x190>)
   29aec:	6909      	ldr	r1, [r1, #16]
   29aee:	428b      	cmp	r3, r1
   29af0:	d0ee      	beq.n	29ad0 <_timer_expiration_handler+0xcc>
   29af2:	6819      	ldr	r1, [r3, #0]
   29af4:	2900      	cmp	r1, #0
   29af6:	d0ed      	beq.n	29ad4 <_timer_expiration_handler+0xd0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29af8:	b12a      	cbz	r2, 29b06 <_timer_expiration_handler+0x102>
	return (node == list->tail) ? NULL : node->next;
   29afa:	4926      	ldr	r1, [pc, #152]	; (29b94 <_timer_expiration_handler+0x190>)
   29afc:	6909      	ldr	r1, [r1, #16]
   29afe:	428a      	cmp	r2, r1
   29b00:	d003      	beq.n	29b0a <_timer_expiration_handler+0x106>
   29b02:	681b      	ldr	r3, [r3, #0]
   29b04:	e7e7      	b.n	29ad6 <_timer_expiration_handler+0xd2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29b06:	2300      	movs	r3, #0
   29b08:	e7e5      	b.n	29ad6 <_timer_expiration_handler+0xd2>
	return (node == list->tail) ? NULL : node->next;
   29b0a:	2300      	movs	r3, #0
   29b0c:	e7e3      	b.n	29ad6 <_timer_expiration_handler+0xd2>
	node->next = list;
   29b0e:	4b22      	ldr	r3, [pc, #136]	; (29b98 <_timer_expiration_handler+0x194>)
   29b10:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   29b12:	685a      	ldr	r2, [r3, #4]
   29b14:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29b16:	685a      	ldr	r2, [r3, #4]
   29b18:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29b1a:	605c      	str	r4, [r3, #4]
   29b1c:	f385 8811 	msr	BASEPRI, r5
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   29b20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29b22:	3301      	adds	r3, #1
   29b24:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   29b26:	6a23      	ldr	r3, [r4, #32]
   29b28:	b10b      	cbz	r3, 29b2e <_timer_expiration_handler+0x12a>
		timer->expiry_fn(timer);
   29b2a:	4620      	mov	r0, r4
   29b2c:	4798      	blx	r3
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);
   29b2e:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   29b32:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29b34:	42a3      	cmp	r3, r4
   29b36:	d01d      	beq.n	29b74 <_timer_expiration_handler+0x170>

	if (!thread) {
   29b38:	b334      	cbz	r4, 29b88 <_timer_expiration_handler+0x184>
	node->prev->next = node->next;
   29b3a:	6863      	ldr	r3, [r4, #4]
   29b3c:	6822      	ldr	r2, [r4, #0]
   29b3e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29b40:	6823      	ldr	r3, [r4, #0]
   29b42:	6862      	ldr	r2, [r4, #4]
   29b44:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29b46:	7a63      	ldrb	r3, [r4, #9]
   29b48:	f023 0302 	bic.w	r3, r3, #2
   29b4c:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   29b4e:	f04f 0320 	mov.w	r3, #32
   29b52:	f3ef 8511 	mrs	r5, BASEPRI
   29b56:	f383 8811 	msr	BASEPRI, r3
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29b5a:	7a63      	ldrb	r3, [r4, #9]
   29b5c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29b60:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29b62:	f013 0f1b 	tst.w	r3, #27
   29b66:	d109      	bne.n	29b7c <_timer_expiration_handler+0x178>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29b68:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29b6e:	d003      	beq.n	29b78 <_timer_expiration_handler+0x174>
   29b70:	2300      	movs	r3, #0
   29b72:	e004      	b.n	29b7e <_timer_expiration_handler+0x17a>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29b74:	2400      	movs	r4, #0
   29b76:	e7df      	b.n	29b38 <_timer_expiration_handler+0x134>
   29b78:	2301      	movs	r3, #1
   29b7a:	e000      	b.n	29b7e <_timer_expiration_handler+0x17a>
   29b7c:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29b7e:	b923      	cbnz	r3, 29b8a <_timer_expiration_handler+0x186>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29b80:	f385 8811 	msr	BASEPRI, r5
   29b84:	2300      	movs	r3, #0
   29b86:	6663      	str	r3, [r4, #100]	; 0x64
   29b88:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   29b8a:	4620      	mov	r0, r4
   29b8c:	f7ff f8f4 	bl	28d78 <_add_thread_to_ready_q>
   29b90:	e7f6      	b.n	29b80 <_timer_expiration_handler+0x17c>
   29b92:	bf00      	nop
   29b94:	20002880 	.word	0x20002880
   29b98:	2000288c 	.word	0x2000288c

00029b9c <k_timer_init>:

void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
	timer->expiry_fn = expiry_fn;
   29b9c:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   29b9e:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0;
   29ba0:	2300      	movs	r3, #0
   29ba2:	62c3      	str	r3, [r0, #44]	; 0x2c

	sys_dlist_init(&timer->wait_q);
   29ba4:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   29ba8:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   29baa:	61c2      	str	r2, [r0, #28]
	t->delta_ticks_from_prev = _INACTIVE;
   29bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29bb0:	6102      	str	r2, [r0, #16]
	t->wait_q = NULL;
   29bb2:	60c3      	str	r3, [r0, #12]
	t->thread = NULL;
   29bb4:	6083      	str	r3, [r0, #8]
	t->func = func;
   29bb6:	4a02      	ldr	r2, [pc, #8]	; (29bc0 <k_timer_init+0x24>)
   29bb8:	6142      	str	r2, [r0, #20]
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
   29bba:	6303      	str	r3, [r0, #48]	; 0x30
   29bbc:	4770      	bx	lr
   29bbe:	bf00      	nop
   29bc0:	00029a05 	.word	0x00029a05

00029bc4 <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   29bc4:	b530      	push	{r4, r5, lr}
   29bc6:	b083      	sub	sp, #12
   29bc8:	3209      	adds	r2, #9
   29bca:	4b57      	ldr	r3, [pc, #348]	; (29d28 <_impl_k_timer_start+0x164>)
   29bcc:	fba3 4202 	umull	r4, r2, r3, r2
   29bd0:	08d2      	lsrs	r2, r2, #3
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
   29bd2:	9201      	str	r2, [sp, #4]
   29bd4:	3109      	adds	r1, #9
   29bd6:	fba3 3101 	umull	r3, r1, r3, r1
   29bda:	08c9      	lsrs	r1, r1, #3
	duration_in_ticks = _ms_to_ticks(duration);
   29bdc:	9100      	str	r1, [sp, #0]
	__asm__ volatile(
   29bde:	f04f 0320 	mov.w	r3, #32
   29be2:	f3ef 8411 	mrs	r4, BASEPRI
   29be6:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
   29bea:	6901      	ldr	r1, [r0, #16]
   29bec:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   29bf0:	d012      	beq.n	29c18 <_impl_k_timer_start+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29bf2:	4603      	mov	r3, r0
	return list->tail == node;
   29bf4:	4a4d      	ldr	r2, [pc, #308]	; (29d2c <_impl_k_timer_start+0x168>)
   29bf6:	6912      	ldr	r2, [r2, #16]
   29bf8:	4290      	cmp	r0, r2
   29bfa:	d004      	beq.n	29c06 <_impl_k_timer_start+0x42>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29bfc:	b100      	cbz	r0, 29c00 <_impl_k_timer_start+0x3c>
	return (node == list->tail) ? NULL : node->next;
   29bfe:	6803      	ldr	r3, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29c00:	691a      	ldr	r2, [r3, #16]
   29c02:	440a      	add	r2, r1
   29c04:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29c06:	6843      	ldr	r3, [r0, #4]
   29c08:	6802      	ldr	r2, [r0, #0]
   29c0a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29c0c:	6803      	ldr	r3, [r0, #0]
   29c0e:	6842      	ldr	r2, [r0, #4]
   29c10:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29c16:	6103      	str	r3, [r0, #16]
		_abort_timeout(&timer->timeout);
	}

	timer->period = period_in_ticks;
   29c18:	9b01      	ldr	r3, [sp, #4]
   29c1a:	6283      	str	r3, [r0, #40]	; 0x28
	timer->status = 0;
   29c1c:	2200      	movs	r2, #0
   29c1e:	62c2      	str	r2, [r0, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
   29c20:	4605      	mov	r5, r0
   29c22:	f100 0118 	add.w	r1, r0, #24
   29c26:	9b00      	ldr	r3, [sp, #0]
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29c28:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   29c2a:	6082      	str	r2, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29c2c:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   29c2e:	b133      	cbz	r3, 29c3e <_impl_k_timer_start+0x7a>
	return list->head == list;
   29c30:	4a3e      	ldr	r2, [pc, #248]	; (29d2c <_impl_k_timer_start+0x168>)
   29c32:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29c36:	4293      	cmp	r3, r2
   29c38:	d14f      	bne.n	29cda <_impl_k_timer_start+0x116>
   29c3a:	2300      	movs	r3, #0
   29c3c:	e04d      	b.n	29cda <_impl_k_timer_start+0x116>
	struct k_thread *thread = timeout->thread;
   29c3e:	4613      	mov	r3, r2
   29c40:	f04f 0220 	mov.w	r2, #32
   29c44:	f3ef 8511 	mrs	r5, BASEPRI
   29c48:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   29c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29c50:	6102      	str	r2, [r0, #16]
	if (thread) {
   29c52:	b323      	cbz	r3, 29c9e <_impl_k_timer_start+0xda>
	if (timeout_obj->wait_q) {
   29c54:	68c2      	ldr	r2, [r0, #12]
   29c56:	b152      	cbz	r2, 29c6e <_impl_k_timer_start+0xaa>
	node->prev->next = node->next;
   29c58:	685a      	ldr	r2, [r3, #4]
   29c5a:	6819      	ldr	r1, [r3, #0]
   29c5c:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   29c5e:	681a      	ldr	r2, [r3, #0]
   29c60:	6859      	ldr	r1, [r3, #4]
   29c62:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29c64:	7a5a      	ldrb	r2, [r3, #9]
   29c66:	f022 0202 	bic.w	r2, r2, #2
   29c6a:	725a      	strb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   29c6c:	61db      	str	r3, [r3, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29c6e:	7a5a      	ldrb	r2, [r3, #9]
   29c70:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   29c74:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29c76:	f012 0f1b 	tst.w	r2, #27
   29c7a:	d107      	bne.n	29c8c <_impl_k_timer_start+0xc8>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29c7c:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29c7e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29c82:	d001      	beq.n	29c88 <_impl_k_timer_start+0xc4>
   29c84:	2200      	movs	r2, #0
   29c86:	e002      	b.n	29c8e <_impl_k_timer_start+0xca>
   29c88:	2201      	movs	r2, #1
   29c8a:	e000      	b.n	29c8e <_impl_k_timer_start+0xca>
   29c8c:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   29c8e:	b912      	cbnz	r2, 29c96 <_impl_k_timer_start+0xd2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29c90:	f385 8811 	msr	BASEPRI, r5
   29c94:	e044      	b.n	29d20 <_impl_k_timer_start+0x15c>
		_add_thread_to_ready_q(thread);
   29c96:	4618      	mov	r0, r3
   29c98:	f7ff f86e 	bl	28d78 <_add_thread_to_ready_q>
   29c9c:	e7f8      	b.n	29c90 <_impl_k_timer_start+0xcc>
   29c9e:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   29ca2:	6943      	ldr	r3, [r0, #20]
   29ca4:	2b00      	cmp	r3, #0
   29ca6:	d03b      	beq.n	29d20 <_impl_k_timer_start+0x15c>
			timeout->func(timeout);
   29ca8:	4798      	blx	r3
   29caa:	e039      	b.n	29d20 <_impl_k_timer_start+0x15c>
			in_q->delta_ticks_from_prev -= *delta;
   29cac:	1a8a      	subs	r2, r1, r2
   29cae:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29cb0:	b133      	cbz	r3, 29cc0 <_impl_k_timer_start+0xfc>
		node->prev = insert_point->prev;
   29cb2:	685a      	ldr	r2, [r3, #4]
   29cb4:	6042      	str	r2, [r0, #4]
		node->next = insert_point;
   29cb6:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   29cb8:	685a      	ldr	r2, [r3, #4]
   29cba:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
   29cbc:	6058      	str	r0, [r3, #4]
   29cbe:	e02f      	b.n	29d20 <_impl_k_timer_start+0x15c>
	node->next = list;
   29cc0:	4b1b      	ldr	r3, [pc, #108]	; (29d30 <_impl_k_timer_start+0x16c>)
   29cc2:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   29cc4:	685a      	ldr	r2, [r3, #4]
   29cc6:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   29cc8:	685a      	ldr	r2, [r3, #4]
   29cca:	6010      	str	r0, [r2, #0]
	list->tail = node;
   29ccc:	6058      	str	r0, [r3, #4]
   29cce:	e027      	b.n	29d20 <_impl_k_timer_start+0x15c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29cd0:	4619      	mov	r1, r3
   29cd2:	e011      	b.n	29cf8 <_impl_k_timer_start+0x134>
	return (node == list->tail) ? NULL : node->next;
   29cd4:	2100      	movs	r1, #0
   29cd6:	e00f      	b.n	29cf8 <_impl_k_timer_start+0x134>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29cd8:	2300      	movs	r3, #0
   29cda:	b1d3      	cbz	r3, 29d12 <_impl_k_timer_start+0x14e>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29cdc:	692a      	ldr	r2, [r5, #16]
   29cde:	6919      	ldr	r1, [r3, #16]
   29ce0:	428a      	cmp	r2, r1
   29ce2:	dde3      	ble.n	29cac <_impl_k_timer_start+0xe8>
		*delta -= in_q->delta_ticks_from_prev;
   29ce4:	1a52      	subs	r2, r2, r1
   29ce6:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29ce8:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29cea:	2b00      	cmp	r3, #0
   29cec:	d0f0      	beq.n	29cd0 <_impl_k_timer_start+0x10c>
	return (node == list->tail) ? NULL : node->next;
   29cee:	490f      	ldr	r1, [pc, #60]	; (29d2c <_impl_k_timer_start+0x168>)
   29cf0:	6909      	ldr	r1, [r1, #16]
   29cf2:	428b      	cmp	r3, r1
   29cf4:	d0ee      	beq.n	29cd4 <_impl_k_timer_start+0x110>
   29cf6:	6819      	ldr	r1, [r3, #0]
   29cf8:	2900      	cmp	r1, #0
   29cfa:	d0ed      	beq.n	29cd8 <_impl_k_timer_start+0x114>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29cfc:	b12a      	cbz	r2, 29d0a <_impl_k_timer_start+0x146>
	return (node == list->tail) ? NULL : node->next;
   29cfe:	490b      	ldr	r1, [pc, #44]	; (29d2c <_impl_k_timer_start+0x168>)
   29d00:	6909      	ldr	r1, [r1, #16]
   29d02:	428a      	cmp	r2, r1
   29d04:	d003      	beq.n	29d0e <_impl_k_timer_start+0x14a>
   29d06:	681b      	ldr	r3, [r3, #0]
   29d08:	e7e7      	b.n	29cda <_impl_k_timer_start+0x116>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29d0a:	2300      	movs	r3, #0
   29d0c:	e7e5      	b.n	29cda <_impl_k_timer_start+0x116>
	return (node == list->tail) ? NULL : node->next;
   29d0e:	2300      	movs	r3, #0
   29d10:	e7e3      	b.n	29cda <_impl_k_timer_start+0x116>
	node->next = list;
   29d12:	4b07      	ldr	r3, [pc, #28]	; (29d30 <_impl_k_timer_start+0x16c>)
   29d14:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   29d16:	685a      	ldr	r2, [r3, #4]
   29d18:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   29d1a:	685a      	ldr	r2, [r3, #4]
   29d1c:	6010      	str	r0, [r2, #0]
	list->tail = node;
   29d1e:	6058      	str	r0, [r3, #4]
   29d20:	f384 8811 	msr	BASEPRI, r4
	irq_unlock(key);
}
   29d24:	b003      	add	sp, #12
   29d26:	bd30      	pop	{r4, r5, pc}
   29d28:	cccccccd 	.word	0xcccccccd
   29d2c:	20002880 	.word	0x20002880
   29d30:	2000288c 	.word	0x2000288c

00029d34 <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
   29d34:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29d36:	f04f 0320 	mov.w	r3, #32
   29d3a:	f3ef 8411 	mrs	r4, BASEPRI
   29d3e:	f383 8811 	msr	BASEPRI, r3
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29d42:	6903      	ldr	r3, [r0, #16]
   29d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29d48:	d042      	beq.n	29dd0 <_impl_k_timer_stop+0x9c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29d4a:	4602      	mov	r2, r0
	return list->tail == node;
   29d4c:	493b      	ldr	r1, [pc, #236]	; (29e3c <_impl_k_timer_stop+0x108>)
   29d4e:	6909      	ldr	r1, [r1, #16]
   29d50:	4288      	cmp	r0, r1
   29d52:	d004      	beq.n	29d5e <_impl_k_timer_stop+0x2a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29d54:	b100      	cbz	r0, 29d58 <_impl_k_timer_stop+0x24>
	return (node == list->tail) ? NULL : node->next;
   29d56:	6802      	ldr	r2, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29d58:	6911      	ldr	r1, [r2, #16]
   29d5a:	440b      	add	r3, r1
   29d5c:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
   29d5e:	6843      	ldr	r3, [r0, #4]
   29d60:	6802      	ldr	r2, [r0, #0]
   29d62:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29d64:	6803      	ldr	r3, [r0, #0]
   29d66:	6842      	ldr	r2, [r0, #4]
   29d68:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29d6e:	6103      	str	r3, [r0, #16]
	return 0;
   29d70:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29d72:	f384 8811 	msr	BASEPRI, r4
	int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);

	irq_unlock(key);

	if (inactive) {
   29d76:	2b00      	cmp	r3, #0
   29d78:	d15f      	bne.n	29e3a <_impl_k_timer_stop+0x106>
   29d7a:	4604      	mov	r4, r0
		return;
	}

	if (timer->stop_fn) {
   29d7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29d7e:	b103      	cbz	r3, 29d82 <_impl_k_timer_stop+0x4e>
		timer->stop_fn(timer);
   29d80:	4798      	blx	r3
	__asm__ volatile(
   29d82:	f04f 0320 	mov.w	r3, #32
   29d86:	f3ef 8511 	mrs	r5, BASEPRI
   29d8a:	f383 8811 	msr	BASEPRI, r3
	}

	key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&timer->wait_q);
   29d8e:	f104 0218 	add.w	r2, r4, #24
	if (_handling_timeouts) {
   29d92:	4b2b      	ldr	r3, [pc, #172]	; (29e40 <_impl_k_timer_stop+0x10c>)
   29d94:	681b      	ldr	r3, [r3, #0]
   29d96:	b9f3      	cbnz	r3, 29dd6 <_impl_k_timer_stop+0xa2>
	return list->head == list;
   29d98:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29d9a:	4282      	cmp	r2, r0
   29d9c:	d02c      	beq.n	29df8 <_impl_k_timer_stop+0xc4>
	if (thread) {
   29d9e:	b148      	cbz	r0, 29db4 <_impl_k_timer_stop+0x80>
	node->prev->next = node->next;
   29da0:	6843      	ldr	r3, [r0, #4]
   29da2:	6802      	ldr	r2, [r0, #0]
   29da4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29da6:	6803      	ldr	r3, [r0, #0]
   29da8:	6842      	ldr	r2, [r0, #4]
   29daa:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29dac:	7a43      	ldrb	r3, [r0, #9]
   29dae:	f023 0302 	bic.w	r3, r3, #2
   29db2:	7243      	strb	r3, [r0, #9]

	if (pending_thread) {
   29db4:	b330      	cbz	r0, 29e04 <_impl_k_timer_stop+0xd0>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29db6:	7a43      	ldrb	r3, [r0, #9]
   29db8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29dbc:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29dbe:	f013 0f1b 	tst.w	r3, #27
   29dc2:	d11d      	bne.n	29e00 <_impl_k_timer_stop+0xcc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29dc4:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29dca:	d017      	beq.n	29dfc <_impl_k_timer_stop+0xc8>
   29dcc:	2300      	movs	r3, #0
   29dce:	e018      	b.n	29e02 <_impl_k_timer_stop+0xce>
		return _INACTIVE;
   29dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29dd4:	e7cd      	b.n	29d72 <_impl_k_timer_stop+0x3e>
	return list->head == list;
   29dd6:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29dd8:	4282      	cmp	r2, r0
   29dda:	d102      	bne.n	29de2 <_impl_k_timer_stop+0xae>
   29ddc:	2000      	movs	r0, #0
   29dde:	e000      	b.n	29de2 <_impl_k_timer_stop+0xae>
	return (node == list->tail) ? NULL : node->next;
   29de0:	6800      	ldr	r0, [r0, #0]
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   29de2:	2800      	cmp	r0, #0
   29de4:	d0db      	beq.n	29d9e <_impl_k_timer_stop+0x6a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   29de6:	6a03      	ldr	r3, [r0, #32]
			if (_is_thread_timeout_expired(thread)) {
   29de8:	f113 0f02 	cmn.w	r3, #2
   29dec:	d1d7      	bne.n	29d9e <_impl_k_timer_stop+0x6a>
   29dee:	6853      	ldr	r3, [r2, #4]
   29df0:	4298      	cmp	r0, r3
   29df2:	d1f5      	bne.n	29de0 <_impl_k_timer_stop+0xac>
   29df4:	2000      	movs	r0, #0
   29df6:	e7f4      	b.n	29de2 <_impl_k_timer_stop+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29df8:	2000      	movs	r0, #0
   29dfa:	e7d0      	b.n	29d9e <_impl_k_timer_stop+0x6a>
	return !(_is_thread_prevented_from_running(thread) ||
   29dfc:	2301      	movs	r3, #1
   29dfe:	e000      	b.n	29e02 <_impl_k_timer_stop+0xce>
   29e00:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29e02:	b95b      	cbnz	r3, 29e1c <_impl_k_timer_stop+0xe8>
   29e04:	f3ef 8305 	mrs	r3, IPSR
   29e08:	2b0d      	cmp	r3, #13
   29e0a:	d80a      	bhi.n	29e22 <_impl_k_timer_stop+0xee>
   29e0c:	b173      	cbz	r3, 29e2c <_impl_k_timer_stop+0xf8>
   29e0e:	4b0d      	ldr	r3, [pc, #52]	; (29e44 <_impl_k_timer_stop+0x110>)
   29e10:	685b      	ldr	r3, [r3, #4]
   29e12:	f413 6f00 	tst.w	r3, #2048	; 0x800
   29e16:	d00b      	beq.n	29e30 <_impl_k_timer_stop+0xfc>
   29e18:	2300      	movs	r3, #0
   29e1a:	e003      	b.n	29e24 <_impl_k_timer_stop+0xf0>
		_add_thread_to_ready_q(thread);
   29e1c:	f7fe ffac 	bl	28d78 <_add_thread_to_ready_q>
   29e20:	e7f0      	b.n	29e04 <_impl_k_timer_stop+0xd0>
   29e22:	2301      	movs	r3, #1
		_ready_thread(pending_thread);
	}

	if (_is_in_isr()) {
   29e24:	b133      	cbz	r3, 29e34 <_impl_k_timer_stop+0x100>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29e26:	f385 8811 	msr	BASEPRI, r5
   29e2a:	bd38      	pop	{r3, r4, r5, pc}
   29e2c:	2300      	movs	r3, #0
   29e2e:	e7f9      	b.n	29e24 <_impl_k_timer_stop+0xf0>
   29e30:	2301      	movs	r3, #1
   29e32:	e7f7      	b.n	29e24 <_impl_k_timer_stop+0xf0>
		irq_unlock(key);
	} else {
		_reschedule_threads(key);
   29e34:	4628      	mov	r0, r5
   29e36:	f7ff f937 	bl	290a8 <_reschedule_threads>
   29e3a:	bd38      	pop	{r3, r4, r5, pc}
   29e3c:	20002880 	.word	0x20002880
   29e40:	20002c68 	.word	0x20002c68
   29e44:	e000ed00 	.word	0xe000ed00

00029e48 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   29e48:	b430      	push	{r4, r5}
	__asm__ volatile(
   29e4a:	f04f 0320 	mov.w	r3, #32
   29e4e:	f3ef 8411 	mrs	r4, BASEPRI
   29e52:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29e56:	6903      	ldr	r3, [r0, #16]
   29e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29e5c:	d017      	beq.n	29e8e <_timeout_remaining_get+0x46>
	return list->head == list;
   29e5e:	4a10      	ldr	r2, [pc, #64]	; (29ea0 <_timeout_remaining_get+0x58>)
   29e60:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29e64:	4293      	cmp	r3, r2
   29e66:	d001      	beq.n	29e6c <_timeout_remaining_get+0x24>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   29e68:	6919      	ldr	r1, [r3, #16]
		while (t != timeout) {
   29e6a:	e005      	b.n	29e78 <_timeout_remaining_get+0x30>
   29e6c:	2300      	movs	r3, #0
   29e6e:	e7fb      	b.n	29e68 <_timeout_remaining_get+0x20>
	return (node == list->tail) ? NULL : node->next;
   29e70:	2200      	movs	r2, #0
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
								   &t->node);
			remaining_ticks += t->delta_ticks_from_prev;
   29e72:	6913      	ldr	r3, [r2, #16]
   29e74:	4419      	add	r1, r3
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   29e76:	4613      	mov	r3, r2
		while (t != timeout) {
   29e78:	4283      	cmp	r3, r0
   29e7a:	d009      	beq.n	29e90 <_timeout_remaining_get+0x48>
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   29e7c:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29e7e:	2b00      	cmp	r3, #0
   29e80:	d0f7      	beq.n	29e72 <_timeout_remaining_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   29e82:	4a07      	ldr	r2, [pc, #28]	; (29ea0 <_timeout_remaining_get+0x58>)
   29e84:	6912      	ldr	r2, [r2, #16]
   29e86:	4293      	cmp	r3, r2
   29e88:	d0f2      	beq.n	29e70 <_timeout_remaining_get+0x28>
   29e8a:	681a      	ldr	r2, [r3, #0]
   29e8c:	e7f1      	b.n	29e72 <_timeout_remaining_get+0x2a>
		remaining_ticks = 0;
   29e8e:	2100      	movs	r1, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29e90:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   29e94:	008a      	lsls	r2, r1, #2
   29e96:	1850      	adds	r0, r2, r1
   29e98:	1800      	adds	r0, r0, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   29e9a:	bc30      	pop	{r4, r5}
   29e9c:	4770      	bx	lr
   29e9e:	bf00      	nop
   29ea0:	20002880 	.word	0x20002880

00029ea4 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   29ea4:	b538      	push	{r3, r4, r5, lr}
   29ea6:	4604      	mov	r4, r0
   29ea8:	e003      	b.n	29eb2 <work_q_main+0xe>
		handler = work->handler;

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
					      K_WORK_STATE_PENDING)) {
			handler(work);
   29eaa:	4610      	mov	r0, r2
   29eac:	47a8      	blx	r5
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   29eae:	f7ff f927 	bl	29100 <_impl_k_yield>
		work = k_queue_get(&work_q->queue, K_FOREVER);
   29eb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29eb6:	4620      	mov	r0, r4
   29eb8:	f7fe ff0c 	bl	28cd4 <k_queue_get>
		if (!work) {
   29ebc:	4602      	mov	r2, r0
   29ebe:	2800      	cmp	r0, #0
   29ec0:	d0f7      	beq.n	29eb2 <work_q_main+0xe>
		handler = work->handler;
   29ec2:	6845      	ldr	r5, [r0, #4]
		if (atomic_test_and_clear_bit(work->flags,
   29ec4:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29ec8:	f3bf 8f5b 	dmb	ish
   29ecc:	e853 1f00 	ldrex	r1, [r3]
   29ed0:	f021 0001 	bic.w	r0, r1, #1
   29ed4:	e843 0e00 	strex	lr, r0, [r3]
   29ed8:	f1be 0f00 	cmp.w	lr, #0
   29edc:	d1f6      	bne.n	29ecc <work_q_main+0x28>
   29ede:	f3bf 8f5b 	dmb	ish
   29ee2:	f011 0f01 	tst.w	r1, #1
   29ee6:	d0e2      	beq.n	29eae <work_q_main+0xa>
   29ee8:	e7df      	b.n	29eaa <work_q_main+0x6>

00029eea <work_timeout>:
	_k_object_init(work_q);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   29eea:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   29eec:	6984      	ldr	r4, [r0, #24]
   29eee:	f1a0 010c 	sub.w	r1, r0, #12
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   29ef2:	1f03      	subs	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29ef4:	f3bf 8f5b 	dmb	ish
   29ef8:	e853 2f00 	ldrex	r2, [r3]
   29efc:	f042 0001 	orr.w	r0, r2, #1
   29f00:	e843 0e00 	strex	lr, r0, [r3]
   29f04:	f1be 0f00 	cmp.w	lr, #0
   29f08:	d1f6      	bne.n	29ef8 <work_timeout+0xe>
   29f0a:	f3bf 8f5b 	dmb	ish
   29f0e:	f012 0f01 	tst.w	r2, #1
   29f12:	d000      	beq.n	29f16 <work_timeout+0x2c>
   29f14:	bd10      	pop	{r4, pc}
		k_queue_append(&work_q->queue, work);
   29f16:	4620      	mov	r0, r4
   29f18:	f7fe feb4 	bl	28c84 <k_queue_append>
}
   29f1c:	e7fa      	b.n	29f14 <work_timeout+0x2a>
	...

00029f20 <k_work_q_start>:
{
   29f20:	b5f0      	push	{r4, r5, r6, r7, lr}
   29f22:	b087      	sub	sp, #28
   29f24:	4604      	mov	r4, r0
   29f26:	460d      	mov	r5, r1
   29f28:	4616      	mov	r6, r2
   29f2a:	461f      	mov	r7, r3
	k_queue_init(&work_q->queue);
   29f2c:	f7fe fe77 	bl	28c1e <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   29f30:	2300      	movs	r3, #0
   29f32:	9305      	str	r3, [sp, #20]
   29f34:	9304      	str	r3, [sp, #16]
   29f36:	9703      	str	r7, [sp, #12]
   29f38:	9302      	str	r3, [sp, #8]
   29f3a:	9301      	str	r3, [sp, #4]
   29f3c:	9400      	str	r4, [sp, #0]
   29f3e:	4b04      	ldr	r3, [pc, #16]	; (29f50 <k_work_q_start+0x30>)
   29f40:	4632      	mov	r2, r6
   29f42:	4629      	mov	r1, r5
   29f44:	f104 0010 	add.w	r0, r4, #16
   29f48:	f7ff fcb2 	bl	298b0 <_impl_k_thread_create>
}
   29f4c:	b007      	add	sp, #28
   29f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29f50:	00029ea5 	.word	0x00029ea5

00029f54 <k_delayed_work_init>:

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   29f54:	b500      	push	{lr}
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
   29f56:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29f5a:	f3bf 8f5b 	dmb	ish
   29f5e:	e853 2f00 	ldrex	r2, [r3]
   29f62:	f022 0201 	bic.w	r2, r2, #1
   29f66:	e843 2e00 	strex	lr, r2, [r3]
   29f6a:	f1be 0f00 	cmp.w	lr, #0
   29f6e:	d1f6      	bne.n	29f5e <k_delayed_work_init+0xa>
   29f70:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   29f74:	6041      	str	r1, [r0, #4]
	t->delta_ticks_from_prev = _INACTIVE;
   29f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29f7a:	61c3      	str	r3, [r0, #28]
	t->wait_q = NULL;
   29f7c:	2300      	movs	r3, #0
   29f7e:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   29f80:	6143      	str	r3, [r0, #20]
	t->func = func;
   29f82:	4a02      	ldr	r2, [pc, #8]	; (29f8c <k_delayed_work_init+0x38>)
   29f84:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   29f86:	6243      	str	r3, [r0, #36]	; 0x24
   29f88:	f85d fb04 	ldr.w	pc, [sp], #4
   29f8c:	00029eeb 	.word	0x00029eeb

00029f90 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   29f90:	b430      	push	{r4, r5}
	__asm__ volatile(
   29f92:	f04f 0320 	mov.w	r3, #32
   29f96:	f3ef 8411 	mrs	r4, BASEPRI
   29f9a:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   29f9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29fa0:	b18b      	cbz	r3, 29fc6 <k_delayed_work_cancel+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29fa2:	f3bf 8f5b 	dmb	ish
   29fa6:	6883      	ldr	r3, [r0, #8]
   29fa8:	f3bf 8f5b 	dmb	ish
		irq_unlock(key);
		return -EINVAL;
	}

	if (k_work_pending(&work->work)) {
   29fac:	f013 0f01 	tst.w	r3, #1
   29fb0:	d02d      	beq.n	2a00e <k_delayed_work_cancel+0x7e>
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   29fb2:	6a45      	ldr	r5, [r0, #36]	; 0x24
   29fb4:	4601      	mov	r1, r0
	return list->head;
   29fb6:	682b      	ldr	r3, [r5, #0]
	sys_snode_t *prev = NULL;
   29fb8:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   29fba:	b193      	cbz	r3, 29fe2 <k_delayed_work_cancel+0x52>
		if (test == node) {
   29fbc:	4299      	cmp	r1, r3
   29fbe:	d007      	beq.n	29fd0 <k_delayed_work_cancel+0x40>
		prev = test;
   29fc0:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   29fc2:	681b      	ldr	r3, [r3, #0]
   29fc4:	e7f9      	b.n	29fba <k_delayed_work_cancel+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29fc6:	f384 8811 	msr	BASEPRI, r4
		return -EINVAL;
   29fca:	f06f 0015 	mvn.w	r0, #21
   29fce:	e00e      	b.n	29fee <k_delayed_work_cancel+0x5e>
	if (!prev_node) {
   29fd0:	b17a      	cbz	r2, 29ff2 <k_delayed_work_cancel+0x62>
		prev_node->next = node->next;
   29fd2:	6803      	ldr	r3, [r0, #0]
   29fd4:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   29fd6:	686b      	ldr	r3, [r5, #4]
   29fd8:	4298      	cmp	r0, r3
   29fda:	d011      	beq.n	2a000 <k_delayed_work_cancel+0x70>
	node->next = NULL;
   29fdc:	2300      	movs	r3, #0
   29fde:	6003      	str	r3, [r0, #0]
			return true;
   29fe0:	2301      	movs	r3, #1
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   29fe2:	b17b      	cbz	r3, 2a004 <k_delayed_work_cancel+0x74>
	} else {
		_abort_timeout(&work->timeout);
	}

	/* Detach from workqueue */
	work->work_q = NULL;
   29fe4:	2300      	movs	r3, #0
   29fe6:	6243      	str	r3, [r0, #36]	; 0x24
   29fe8:	f384 8811 	msr	BASEPRI, r4

	irq_unlock(key);

	return 0;
   29fec:	4618      	mov	r0, r3
}
   29fee:	bc30      	pop	{r4, r5}
   29ff0:	4770      	bx	lr
		list->head = node->next;
   29ff2:	6803      	ldr	r3, [r0, #0]
   29ff4:	602b      	str	r3, [r5, #0]
		if (list->tail == node) {
   29ff6:	686a      	ldr	r2, [r5, #4]
   29ff8:	4290      	cmp	r0, r2
   29ffa:	d1ef      	bne.n	29fdc <k_delayed_work_cancel+0x4c>
			list->tail = list->head;
   29ffc:	606b      	str	r3, [r5, #4]
   29ffe:	e7ed      	b.n	29fdc <k_delayed_work_cancel+0x4c>
			list->tail = prev_node;
   2a000:	606a      	str	r2, [r5, #4]
   2a002:	e7eb      	b.n	29fdc <k_delayed_work_cancel+0x4c>
   2a004:	f384 8811 	msr	BASEPRI, r4
			return -EINVAL;
   2a008:	f06f 0015 	mvn.w	r0, #21
   2a00c:	e7ef      	b.n	29fee <k_delayed_work_cancel+0x5e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2a00e:	69c2      	ldr	r2, [r0, #28]
   2a010:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2a014:	d0e6      	beq.n	29fe4 <k_delayed_work_cancel+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2a016:	f100 030c 	add.w	r3, r0, #12
	return list->tail == node;
   2a01a:	4909      	ldr	r1, [pc, #36]	; (2a040 <k_delayed_work_cancel+0xb0>)
   2a01c:	6909      	ldr	r1, [r1, #16]
   2a01e:	428b      	cmp	r3, r1
   2a020:	d004      	beq.n	2a02c <k_delayed_work_cancel+0x9c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a022:	b103      	cbz	r3, 2a026 <k_delayed_work_cancel+0x96>
	return (node == list->tail) ? NULL : node->next;
   2a024:	68c3      	ldr	r3, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2a026:	6919      	ldr	r1, [r3, #16]
   2a028:	440a      	add	r2, r1
   2a02a:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2a02c:	6903      	ldr	r3, [r0, #16]
   2a02e:	68c2      	ldr	r2, [r0, #12]
   2a030:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2a032:	68c3      	ldr	r3, [r0, #12]
   2a034:	6902      	ldr	r2, [r0, #16]
   2a036:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2a038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a03c:	61c3      	str	r3, [r0, #28]
   2a03e:	e7d1      	b.n	29fe4 <k_delayed_work_cancel+0x54>
   2a040:	20002880 	.word	0x20002880

0002a044 <k_delayed_work_submit_to_queue>:
{
   2a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2a046:	f04f 0320 	mov.w	r3, #32
   2a04a:	f3ef 8711 	mrs	r7, BASEPRI
   2a04e:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   2a052:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   2a054:	b113      	cbz	r3, 2a05c <k_delayed_work_submit_to_queue+0x18>
   2a056:	4283      	cmp	r3, r0
   2a058:	f040 80b4 	bne.w	2a1c4 <k_delayed_work_submit_to_queue+0x180>
   2a05c:	4614      	mov	r4, r2
   2a05e:	460e      	mov	r6, r1
   2a060:	4605      	mov	r5, r0
	if (work->work_q == work_q) {
   2a062:	4283      	cmp	r3, r0
   2a064:	d016      	beq.n	2a094 <k_delayed_work_submit_to_queue+0x50>
	work->work_q = work_q;
   2a066:	6275      	str	r5, [r6, #36]	; 0x24
	if (!delay) {
   2a068:	b1d4      	cbz	r4, 2a0a0 <k_delayed_work_submit_to_queue+0x5c>
		_add_timeout(NULL, &work->timeout, NULL,
   2a06a:	f106 050c 	add.w	r5, r6, #12
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   2a06e:	f104 0309 	add.w	r3, r4, #9
   2a072:	4c57      	ldr	r4, [pc, #348]	; (2a1d0 <k_delayed_work_submit_to_queue+0x18c>)
   2a074:	fba4 2303 	umull	r2, r3, r4, r3
   2a078:	08db      	lsrs	r3, r3, #3
   2a07a:	3301      	adds	r3, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2a07c:	612b      	str	r3, [r5, #16]
	timeout->thread = thread;
   2a07e:	2200      	movs	r2, #0
   2a080:	60aa      	str	r2, [r5, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2a082:	60ea      	str	r2, [r5, #12]
	if (!timeout_in_ticks) {
   2a084:	b32b      	cbz	r3, 2a0d2 <k_delayed_work_submit_to_queue+0x8e>
	return list->head == list;
   2a086:	4a53      	ldr	r2, [pc, #332]	; (2a1d4 <k_delayed_work_submit_to_queue+0x190>)
   2a088:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a08c:	4293      	cmp	r3, r2
   2a08e:	d172      	bne.n	2a176 <k_delayed_work_submit_to_queue+0x132>
   2a090:	2300      	movs	r3, #0
   2a092:	e070      	b.n	2a176 <k_delayed_work_submit_to_queue+0x132>
		err = k_delayed_work_cancel(work);
   2a094:	4608      	mov	r0, r1
   2a096:	f7ff ff7b 	bl	29f90 <k_delayed_work_cancel>
		if (err < 0) {
   2a09a:	2800      	cmp	r0, #0
   2a09c:	dae3      	bge.n	2a066 <k_delayed_work_submit_to_queue+0x22>
   2a09e:	e08e      	b.n	2a1be <k_delayed_work_submit_to_queue+0x17a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2a0a0:	f106 0308 	add.w	r3, r6, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a0a4:	f3bf 8f5b 	dmb	ish
   2a0a8:	e853 2f00 	ldrex	r2, [r3]
   2a0ac:	f042 0101 	orr.w	r1, r2, #1
   2a0b0:	e843 1000 	strex	r0, r1, [r3]
   2a0b4:	2800      	cmp	r0, #0
   2a0b6:	d1f7      	bne.n	2a0a8 <k_delayed_work_submit_to_queue+0x64>
   2a0b8:	f3bf 8f5b 	dmb	ish
   2a0bc:	f012 0f01 	tst.w	r2, #1
   2a0c0:	d001      	beq.n	2a0c6 <k_delayed_work_submit_to_queue+0x82>
	err = 0;
   2a0c2:	2000      	movs	r0, #0
   2a0c4:	e07b      	b.n	2a1be <k_delayed_work_submit_to_queue+0x17a>
		k_queue_append(&work_q->queue, work);
   2a0c6:	4631      	mov	r1, r6
   2a0c8:	4628      	mov	r0, r5
   2a0ca:	f7fe fddb 	bl	28c84 <k_queue_append>
   2a0ce:	2000      	movs	r0, #0
   2a0d0:	e075      	b.n	2a1be <k_delayed_work_submit_to_queue+0x17a>
	struct k_thread *thread = timeout->thread;
   2a0d2:	4610      	mov	r0, r2
   2a0d4:	f04f 0320 	mov.w	r3, #32
   2a0d8:	f3ef 8411 	mrs	r4, BASEPRI
   2a0dc:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   2a0e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a0e4:	612b      	str	r3, [r5, #16]
	if (thread) {
   2a0e6:	b322      	cbz	r2, 2a132 <k_delayed_work_submit_to_queue+0xee>
	if (timeout_obj->wait_q) {
   2a0e8:	68eb      	ldr	r3, [r5, #12]
   2a0ea:	b153      	cbz	r3, 2a102 <k_delayed_work_submit_to_queue+0xbe>
	node->prev->next = node->next;
   2a0ec:	6853      	ldr	r3, [r2, #4]
   2a0ee:	6812      	ldr	r2, [r2, #0]
   2a0f0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2a0f2:	6803      	ldr	r3, [r0, #0]
   2a0f4:	6842      	ldr	r2, [r0, #4]
   2a0f6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a0f8:	7a43      	ldrb	r3, [r0, #9]
   2a0fa:	f023 0302 	bic.w	r3, r3, #2
   2a0fe:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   2a100:	61c0      	str	r0, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a102:	7a43      	ldrb	r3, [r0, #9]
   2a104:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2a108:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2a10a:	f013 0f1b 	tst.w	r3, #27
   2a10e:	d107      	bne.n	2a120 <k_delayed_work_submit_to_queue+0xdc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2a110:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2a112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a116:	d001      	beq.n	2a11c <k_delayed_work_submit_to_queue+0xd8>
   2a118:	2300      	movs	r3, #0
   2a11a:	e002      	b.n	2a122 <k_delayed_work_submit_to_queue+0xde>
   2a11c:	2301      	movs	r3, #1
   2a11e:	e000      	b.n	2a122 <k_delayed_work_submit_to_queue+0xde>
   2a120:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2a122:	b91b      	cbnz	r3, 2a12c <k_delayed_work_submit_to_queue+0xe8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a124:	f384 8811 	msr	BASEPRI, r4
   2a128:	2000      	movs	r0, #0
   2a12a:	e048      	b.n	2a1be <k_delayed_work_submit_to_queue+0x17a>
		_add_thread_to_ready_q(thread);
   2a12c:	f7fe fe24 	bl	28d78 <_add_thread_to_ready_q>
   2a130:	e7f8      	b.n	2a124 <k_delayed_work_submit_to_queue+0xe0>
   2a132:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   2a136:	696b      	ldr	r3, [r5, #20]
   2a138:	2b00      	cmp	r3, #0
   2a13a:	d046      	beq.n	2a1ca <k_delayed_work_submit_to_queue+0x186>
			timeout->func(timeout);
   2a13c:	4628      	mov	r0, r5
   2a13e:	4798      	blx	r3
   2a140:	2000      	movs	r0, #0
   2a142:	e03c      	b.n	2a1be <k_delayed_work_submit_to_queue+0x17a>
			in_q->delta_ticks_from_prev -= *delta;
   2a144:	1aa2      	subs	r2, r4, r2
   2a146:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2a148:	b13b      	cbz	r3, 2a15a <k_delayed_work_submit_to_queue+0x116>
		node->prev = insert_point->prev;
   2a14a:	685a      	ldr	r2, [r3, #4]
   2a14c:	606a      	str	r2, [r5, #4]
		node->next = insert_point;
   2a14e:	60f3      	str	r3, [r6, #12]
		insert_point->prev->next = node;
   2a150:	685a      	ldr	r2, [r3, #4]
   2a152:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   2a154:	605d      	str	r5, [r3, #4]
   2a156:	2000      	movs	r0, #0
   2a158:	e031      	b.n	2a1be <k_delayed_work_submit_to_queue+0x17a>
	node->next = list;
   2a15a:	4b1f      	ldr	r3, [pc, #124]	; (2a1d8 <k_delayed_work_submit_to_queue+0x194>)
   2a15c:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   2a15e:	685a      	ldr	r2, [r3, #4]
   2a160:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   2a162:	685a      	ldr	r2, [r3, #4]
   2a164:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2a166:	605d      	str	r5, [r3, #4]
   2a168:	2000      	movs	r0, #0
   2a16a:	e028      	b.n	2a1be <k_delayed_work_submit_to_queue+0x17a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a16c:	4619      	mov	r1, r3
   2a16e:	e011      	b.n	2a194 <k_delayed_work_submit_to_queue+0x150>
	return (node == list->tail) ? NULL : node->next;
   2a170:	2100      	movs	r1, #0
   2a172:	e00f      	b.n	2a194 <k_delayed_work_submit_to_queue+0x150>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a174:	2300      	movs	r3, #0
   2a176:	b1d3      	cbz	r3, 2a1ae <k_delayed_work_submit_to_queue+0x16a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2a178:	692a      	ldr	r2, [r5, #16]
   2a17a:	691c      	ldr	r4, [r3, #16]
   2a17c:	42a2      	cmp	r2, r4
   2a17e:	dde1      	ble.n	2a144 <k_delayed_work_submit_to_queue+0x100>
		*delta -= in_q->delta_ticks_from_prev;
   2a180:	1b12      	subs	r2, r2, r4
   2a182:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a184:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a186:	2b00      	cmp	r3, #0
   2a188:	d0f0      	beq.n	2a16c <k_delayed_work_submit_to_queue+0x128>
	return (node == list->tail) ? NULL : node->next;
   2a18a:	4912      	ldr	r1, [pc, #72]	; (2a1d4 <k_delayed_work_submit_to_queue+0x190>)
   2a18c:	6909      	ldr	r1, [r1, #16]
   2a18e:	428b      	cmp	r3, r1
   2a190:	d0ee      	beq.n	2a170 <k_delayed_work_submit_to_queue+0x12c>
   2a192:	6819      	ldr	r1, [r3, #0]
   2a194:	2900      	cmp	r1, #0
   2a196:	d0ed      	beq.n	2a174 <k_delayed_work_submit_to_queue+0x130>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a198:	b12a      	cbz	r2, 2a1a6 <k_delayed_work_submit_to_queue+0x162>
	return (node == list->tail) ? NULL : node->next;
   2a19a:	490e      	ldr	r1, [pc, #56]	; (2a1d4 <k_delayed_work_submit_to_queue+0x190>)
   2a19c:	6909      	ldr	r1, [r1, #16]
   2a19e:	428a      	cmp	r2, r1
   2a1a0:	d003      	beq.n	2a1aa <k_delayed_work_submit_to_queue+0x166>
   2a1a2:	681b      	ldr	r3, [r3, #0]
   2a1a4:	e7e7      	b.n	2a176 <k_delayed_work_submit_to_queue+0x132>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a1a6:	2300      	movs	r3, #0
   2a1a8:	e7e5      	b.n	2a176 <k_delayed_work_submit_to_queue+0x132>
	return (node == list->tail) ? NULL : node->next;
   2a1aa:	2300      	movs	r3, #0
   2a1ac:	e7e3      	b.n	2a176 <k_delayed_work_submit_to_queue+0x132>
	node->next = list;
   2a1ae:	4b0a      	ldr	r3, [pc, #40]	; (2a1d8 <k_delayed_work_submit_to_queue+0x194>)
   2a1b0:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   2a1b2:	685a      	ldr	r2, [r3, #4]
   2a1b4:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   2a1b6:	685a      	ldr	r2, [r3, #4]
   2a1b8:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2a1ba:	605d      	str	r5, [r3, #4]
   2a1bc:	2000      	movs	r0, #0
   2a1be:	f387 8811 	msr	BASEPRI, r7
}
   2a1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EADDRINUSE;
   2a1c4:	f06f 006f 	mvn.w	r0, #111	; 0x6f
   2a1c8:	e7f9      	b.n	2a1be <k_delayed_work_submit_to_queue+0x17a>
	err = 0;
   2a1ca:	2000      	movs	r0, #0
   2a1cc:	e7f7      	b.n	2a1be <k_delayed_work_submit_to_queue+0x17a>
   2a1ce:	bf00      	nop
   2a1d0:	cccccccd 	.word	0xcccccccd
   2a1d4:	20002880 	.word	0x20002880
   2a1d8:	2000288c 	.word	0x2000288c

0002a1dc <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   2a1dc:	4770      	bx	lr
	...

0002a1e0 <_calloc_r>:
   2a1e0:	b510      	push	{r4, lr}
   2a1e2:	fb02 f101 	mul.w	r1, r2, r1
   2a1e6:	f000 f83d 	bl	2a264 <_malloc_r>
   2a1ea:	4604      	mov	r4, r0
   2a1ec:	b1d8      	cbz	r0, 2a226 <_calloc_r+0x46>
   2a1ee:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2a1f2:	f022 0203 	bic.w	r2, r2, #3
   2a1f6:	3a04      	subs	r2, #4
   2a1f8:	2a24      	cmp	r2, #36	; 0x24
   2a1fa:	d818      	bhi.n	2a22e <_calloc_r+0x4e>
   2a1fc:	2a13      	cmp	r2, #19
   2a1fe:	d914      	bls.n	2a22a <_calloc_r+0x4a>
   2a200:	2300      	movs	r3, #0
   2a202:	2a1b      	cmp	r2, #27
   2a204:	6003      	str	r3, [r0, #0]
   2a206:	6043      	str	r3, [r0, #4]
   2a208:	d916      	bls.n	2a238 <_calloc_r+0x58>
   2a20a:	2a24      	cmp	r2, #36	; 0x24
   2a20c:	6083      	str	r3, [r0, #8]
   2a20e:	60c3      	str	r3, [r0, #12]
   2a210:	bf11      	iteee	ne
   2a212:	f100 0210 	addne.w	r2, r0, #16
   2a216:	6103      	streq	r3, [r0, #16]
   2a218:	6143      	streq	r3, [r0, #20]
   2a21a:	f100 0218 	addeq.w	r2, r0, #24
   2a21e:	2300      	movs	r3, #0
   2a220:	6013      	str	r3, [r2, #0]
   2a222:	6053      	str	r3, [r2, #4]
   2a224:	6093      	str	r3, [r2, #8]
   2a226:	4620      	mov	r0, r4
   2a228:	bd10      	pop	{r4, pc}
   2a22a:	4602      	mov	r2, r0
   2a22c:	e7f7      	b.n	2a21e <_calloc_r+0x3e>
   2a22e:	2100      	movs	r1, #0
   2a230:	f000 fb72 	bl	2a918 <memset>
   2a234:	4620      	mov	r0, r4
   2a236:	bd10      	pop	{r4, pc}
   2a238:	f100 0208 	add.w	r2, r0, #8
   2a23c:	e7ef      	b.n	2a21e <_calloc_r+0x3e>
   2a23e:	bf00      	nop

0002a240 <__locale_ctype_ptr_l>:
   2a240:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2a244:	4770      	bx	lr
   2a246:	bf00      	nop

0002a248 <__locale_ctype_ptr>:
   2a248:	4b04      	ldr	r3, [pc, #16]	; (2a25c <__locale_ctype_ptr+0x14>)
   2a24a:	4a05      	ldr	r2, [pc, #20]	; (2a260 <__locale_ctype_ptr+0x18>)
   2a24c:	681b      	ldr	r3, [r3, #0]
   2a24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2a250:	2b00      	cmp	r3, #0
   2a252:	bf08      	it	eq
   2a254:	4613      	moveq	r3, r2
   2a256:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   2a25a:	4770      	bx	lr
   2a25c:	2000c688 	.word	0x2000c688
   2a260:	2000cab8 	.word	0x2000cab8

0002a264 <_malloc_r>:
   2a264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a268:	f101 060b 	add.w	r6, r1, #11
   2a26c:	2e16      	cmp	r6, #22
   2a26e:	b083      	sub	sp, #12
   2a270:	4605      	mov	r5, r0
   2a272:	f240 809e 	bls.w	2a3b2 <_malloc_r+0x14e>
   2a276:	f036 0607 	bics.w	r6, r6, #7
   2a27a:	f100 80bd 	bmi.w	2a3f8 <_malloc_r+0x194>
   2a27e:	42b1      	cmp	r1, r6
   2a280:	f200 80ba 	bhi.w	2a3f8 <_malloc_r+0x194>
   2a284:	f000 fb96 	bl	2a9b4 <__malloc_lock>
   2a288:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   2a28c:	f0c0 8293 	bcc.w	2a7b6 <_malloc_r+0x552>
   2a290:	0a73      	lsrs	r3, r6, #9
   2a292:	f000 80b8 	beq.w	2a406 <_malloc_r+0x1a2>
   2a296:	2b04      	cmp	r3, #4
   2a298:	f200 8179 	bhi.w	2a58e <_malloc_r+0x32a>
   2a29c:	09b3      	lsrs	r3, r6, #6
   2a29e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   2a2a2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   2a2a6:	00c3      	lsls	r3, r0, #3
   2a2a8:	4fbf      	ldr	r7, [pc, #764]	; (2a5a8 <_malloc_r+0x344>)
   2a2aa:	443b      	add	r3, r7
   2a2ac:	f1a3 0108 	sub.w	r1, r3, #8
   2a2b0:	685c      	ldr	r4, [r3, #4]
   2a2b2:	42a1      	cmp	r1, r4
   2a2b4:	d106      	bne.n	2a2c4 <_malloc_r+0x60>
   2a2b6:	e00c      	b.n	2a2d2 <_malloc_r+0x6e>
   2a2b8:	2a00      	cmp	r2, #0
   2a2ba:	f280 80aa 	bge.w	2a412 <_malloc_r+0x1ae>
   2a2be:	68e4      	ldr	r4, [r4, #12]
   2a2c0:	42a1      	cmp	r1, r4
   2a2c2:	d006      	beq.n	2a2d2 <_malloc_r+0x6e>
   2a2c4:	6863      	ldr	r3, [r4, #4]
   2a2c6:	f023 0303 	bic.w	r3, r3, #3
   2a2ca:	1b9a      	subs	r2, r3, r6
   2a2cc:	2a0f      	cmp	r2, #15
   2a2ce:	ddf3      	ble.n	2a2b8 <_malloc_r+0x54>
   2a2d0:	4670      	mov	r0, lr
   2a2d2:	693c      	ldr	r4, [r7, #16]
   2a2d4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 2a5bc <_malloc_r+0x358>
   2a2d8:	4574      	cmp	r4, lr
   2a2da:	f000 81ab 	beq.w	2a634 <_malloc_r+0x3d0>
   2a2de:	6863      	ldr	r3, [r4, #4]
   2a2e0:	f023 0303 	bic.w	r3, r3, #3
   2a2e4:	1b9a      	subs	r2, r3, r6
   2a2e6:	2a0f      	cmp	r2, #15
   2a2e8:	f300 8190 	bgt.w	2a60c <_malloc_r+0x3a8>
   2a2ec:	2a00      	cmp	r2, #0
   2a2ee:	f8c7 e014 	str.w	lr, [r7, #20]
   2a2f2:	f8c7 e010 	str.w	lr, [r7, #16]
   2a2f6:	f280 809d 	bge.w	2a434 <_malloc_r+0x1d0>
   2a2fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2a2fe:	f080 8161 	bcs.w	2a5c4 <_malloc_r+0x360>
   2a302:	08db      	lsrs	r3, r3, #3
   2a304:	f103 0c01 	add.w	ip, r3, #1
   2a308:	1099      	asrs	r1, r3, #2
   2a30a:	687a      	ldr	r2, [r7, #4]
   2a30c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   2a310:	f8c4 8008 	str.w	r8, [r4, #8]
   2a314:	2301      	movs	r3, #1
   2a316:	408b      	lsls	r3, r1
   2a318:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   2a31c:	4313      	orrs	r3, r2
   2a31e:	3908      	subs	r1, #8
   2a320:	60e1      	str	r1, [r4, #12]
   2a322:	607b      	str	r3, [r7, #4]
   2a324:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   2a328:	f8c8 400c 	str.w	r4, [r8, #12]
   2a32c:	1082      	asrs	r2, r0, #2
   2a32e:	2401      	movs	r4, #1
   2a330:	4094      	lsls	r4, r2
   2a332:	429c      	cmp	r4, r3
   2a334:	f200 808b 	bhi.w	2a44e <_malloc_r+0x1ea>
   2a338:	421c      	tst	r4, r3
   2a33a:	d106      	bne.n	2a34a <_malloc_r+0xe6>
   2a33c:	f020 0003 	bic.w	r0, r0, #3
   2a340:	0064      	lsls	r4, r4, #1
   2a342:	421c      	tst	r4, r3
   2a344:	f100 0004 	add.w	r0, r0, #4
   2a348:	d0fa      	beq.n	2a340 <_malloc_r+0xdc>
   2a34a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   2a34e:	46cc      	mov	ip, r9
   2a350:	4680      	mov	r8, r0
   2a352:	f8dc 300c 	ldr.w	r3, [ip, #12]
   2a356:	459c      	cmp	ip, r3
   2a358:	d107      	bne.n	2a36a <_malloc_r+0x106>
   2a35a:	e16d      	b.n	2a638 <_malloc_r+0x3d4>
   2a35c:	2a00      	cmp	r2, #0
   2a35e:	f280 817b 	bge.w	2a658 <_malloc_r+0x3f4>
   2a362:	68db      	ldr	r3, [r3, #12]
   2a364:	459c      	cmp	ip, r3
   2a366:	f000 8167 	beq.w	2a638 <_malloc_r+0x3d4>
   2a36a:	6859      	ldr	r1, [r3, #4]
   2a36c:	f021 0103 	bic.w	r1, r1, #3
   2a370:	1b8a      	subs	r2, r1, r6
   2a372:	2a0f      	cmp	r2, #15
   2a374:	ddf2      	ble.n	2a35c <_malloc_r+0xf8>
   2a376:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   2a37a:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2a37e:	9300      	str	r3, [sp, #0]
   2a380:	199c      	adds	r4, r3, r6
   2a382:	4628      	mov	r0, r5
   2a384:	f046 0601 	orr.w	r6, r6, #1
   2a388:	f042 0501 	orr.w	r5, r2, #1
   2a38c:	605e      	str	r6, [r3, #4]
   2a38e:	f8c8 c00c 	str.w	ip, [r8, #12]
   2a392:	f8cc 8008 	str.w	r8, [ip, #8]
   2a396:	617c      	str	r4, [r7, #20]
   2a398:	613c      	str	r4, [r7, #16]
   2a39a:	f8c4 e00c 	str.w	lr, [r4, #12]
   2a39e:	f8c4 e008 	str.w	lr, [r4, #8]
   2a3a2:	6065      	str	r5, [r4, #4]
   2a3a4:	505a      	str	r2, [r3, r1]
   2a3a6:	f000 fb0b 	bl	2a9c0 <__malloc_unlock>
   2a3aa:	9b00      	ldr	r3, [sp, #0]
   2a3ac:	f103 0408 	add.w	r4, r3, #8
   2a3b0:	e01e      	b.n	2a3f0 <_malloc_r+0x18c>
   2a3b2:	2910      	cmp	r1, #16
   2a3b4:	d820      	bhi.n	2a3f8 <_malloc_r+0x194>
   2a3b6:	f000 fafd 	bl	2a9b4 <__malloc_lock>
   2a3ba:	2610      	movs	r6, #16
   2a3bc:	2318      	movs	r3, #24
   2a3be:	2002      	movs	r0, #2
   2a3c0:	4f79      	ldr	r7, [pc, #484]	; (2a5a8 <_malloc_r+0x344>)
   2a3c2:	443b      	add	r3, r7
   2a3c4:	f1a3 0208 	sub.w	r2, r3, #8
   2a3c8:	685c      	ldr	r4, [r3, #4]
   2a3ca:	4294      	cmp	r4, r2
   2a3cc:	f000 813d 	beq.w	2a64a <_malloc_r+0x3e6>
   2a3d0:	6863      	ldr	r3, [r4, #4]
   2a3d2:	68e1      	ldr	r1, [r4, #12]
   2a3d4:	68a6      	ldr	r6, [r4, #8]
   2a3d6:	f023 0303 	bic.w	r3, r3, #3
   2a3da:	4423      	add	r3, r4
   2a3dc:	4628      	mov	r0, r5
   2a3de:	685a      	ldr	r2, [r3, #4]
   2a3e0:	60f1      	str	r1, [r6, #12]
   2a3e2:	f042 0201 	orr.w	r2, r2, #1
   2a3e6:	608e      	str	r6, [r1, #8]
   2a3e8:	605a      	str	r2, [r3, #4]
   2a3ea:	f000 fae9 	bl	2a9c0 <__malloc_unlock>
   2a3ee:	3408      	adds	r4, #8
   2a3f0:	4620      	mov	r0, r4
   2a3f2:	b003      	add	sp, #12
   2a3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3f8:	2400      	movs	r4, #0
   2a3fa:	230c      	movs	r3, #12
   2a3fc:	4620      	mov	r0, r4
   2a3fe:	602b      	str	r3, [r5, #0]
   2a400:	b003      	add	sp, #12
   2a402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a406:	2040      	movs	r0, #64	; 0x40
   2a408:	f44f 7300 	mov.w	r3, #512	; 0x200
   2a40c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   2a410:	e74a      	b.n	2a2a8 <_malloc_r+0x44>
   2a412:	4423      	add	r3, r4
   2a414:	68e1      	ldr	r1, [r4, #12]
   2a416:	685a      	ldr	r2, [r3, #4]
   2a418:	68a6      	ldr	r6, [r4, #8]
   2a41a:	f042 0201 	orr.w	r2, r2, #1
   2a41e:	60f1      	str	r1, [r6, #12]
   2a420:	4628      	mov	r0, r5
   2a422:	608e      	str	r6, [r1, #8]
   2a424:	605a      	str	r2, [r3, #4]
   2a426:	f000 facb 	bl	2a9c0 <__malloc_unlock>
   2a42a:	3408      	adds	r4, #8
   2a42c:	4620      	mov	r0, r4
   2a42e:	b003      	add	sp, #12
   2a430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a434:	4423      	add	r3, r4
   2a436:	4628      	mov	r0, r5
   2a438:	685a      	ldr	r2, [r3, #4]
   2a43a:	f042 0201 	orr.w	r2, r2, #1
   2a43e:	605a      	str	r2, [r3, #4]
   2a440:	f000 fabe 	bl	2a9c0 <__malloc_unlock>
   2a444:	3408      	adds	r4, #8
   2a446:	4620      	mov	r0, r4
   2a448:	b003      	add	sp, #12
   2a44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a44e:	68bc      	ldr	r4, [r7, #8]
   2a450:	6863      	ldr	r3, [r4, #4]
   2a452:	f023 0803 	bic.w	r8, r3, #3
   2a456:	45b0      	cmp	r8, r6
   2a458:	d304      	bcc.n	2a464 <_malloc_r+0x200>
   2a45a:	eba8 0306 	sub.w	r3, r8, r6
   2a45e:	2b0f      	cmp	r3, #15
   2a460:	f300 8085 	bgt.w	2a56e <_malloc_r+0x30a>
   2a464:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2a5c0 <_malloc_r+0x35c>
   2a468:	4b50      	ldr	r3, [pc, #320]	; (2a5ac <_malloc_r+0x348>)
   2a46a:	f8d9 2000 	ldr.w	r2, [r9]
   2a46e:	681b      	ldr	r3, [r3, #0]
   2a470:	3201      	adds	r2, #1
   2a472:	4433      	add	r3, r6
   2a474:	eb04 0a08 	add.w	sl, r4, r8
   2a478:	f000 8155 	beq.w	2a726 <_malloc_r+0x4c2>
   2a47c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   2a480:	330f      	adds	r3, #15
   2a482:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   2a486:	f02b 0b0f 	bic.w	fp, fp, #15
   2a48a:	4659      	mov	r1, fp
   2a48c:	4628      	mov	r0, r5
   2a48e:	f000 fabd 	bl	2aa0c <_sbrk_r>
   2a492:	1c41      	adds	r1, r0, #1
   2a494:	4602      	mov	r2, r0
   2a496:	f000 80fc 	beq.w	2a692 <_malloc_r+0x42e>
   2a49a:	4582      	cmp	sl, r0
   2a49c:	f200 80f7 	bhi.w	2a68e <_malloc_r+0x42a>
   2a4a0:	4b43      	ldr	r3, [pc, #268]	; (2a5b0 <_malloc_r+0x34c>)
   2a4a2:	6819      	ldr	r1, [r3, #0]
   2a4a4:	4459      	add	r1, fp
   2a4a6:	6019      	str	r1, [r3, #0]
   2a4a8:	f000 814d 	beq.w	2a746 <_malloc_r+0x4e2>
   2a4ac:	f8d9 0000 	ldr.w	r0, [r9]
   2a4b0:	3001      	adds	r0, #1
   2a4b2:	bf1b      	ittet	ne
   2a4b4:	eba2 0a0a 	subne.w	sl, r2, sl
   2a4b8:	4451      	addne	r1, sl
   2a4ba:	f8c9 2000 	streq.w	r2, [r9]
   2a4be:	6019      	strne	r1, [r3, #0]
   2a4c0:	f012 0107 	ands.w	r1, r2, #7
   2a4c4:	f000 8115 	beq.w	2a6f2 <_malloc_r+0x48e>
   2a4c8:	f1c1 0008 	rsb	r0, r1, #8
   2a4cc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   2a4d0:	4402      	add	r2, r0
   2a4d2:	3108      	adds	r1, #8
   2a4d4:	eb02 090b 	add.w	r9, r2, fp
   2a4d8:	f3c9 090b 	ubfx	r9, r9, #0, #12
   2a4dc:	eba1 0909 	sub.w	r9, r1, r9
   2a4e0:	4649      	mov	r1, r9
   2a4e2:	4628      	mov	r0, r5
   2a4e4:	9301      	str	r3, [sp, #4]
   2a4e6:	9200      	str	r2, [sp, #0]
   2a4e8:	f000 fa90 	bl	2aa0c <_sbrk_r>
   2a4ec:	1c43      	adds	r3, r0, #1
   2a4ee:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2a4f2:	f000 8143 	beq.w	2a77c <_malloc_r+0x518>
   2a4f6:	1a80      	subs	r0, r0, r2
   2a4f8:	4448      	add	r0, r9
   2a4fa:	f040 0001 	orr.w	r0, r0, #1
   2a4fe:	6819      	ldr	r1, [r3, #0]
   2a500:	60ba      	str	r2, [r7, #8]
   2a502:	4449      	add	r1, r9
   2a504:	42bc      	cmp	r4, r7
   2a506:	6050      	str	r0, [r2, #4]
   2a508:	6019      	str	r1, [r3, #0]
   2a50a:	d017      	beq.n	2a53c <_malloc_r+0x2d8>
   2a50c:	f1b8 0f0f 	cmp.w	r8, #15
   2a510:	f240 80fb 	bls.w	2a70a <_malloc_r+0x4a6>
   2a514:	6860      	ldr	r0, [r4, #4]
   2a516:	f1a8 020c 	sub.w	r2, r8, #12
   2a51a:	f022 0207 	bic.w	r2, r2, #7
   2a51e:	eb04 0e02 	add.w	lr, r4, r2
   2a522:	f000 0001 	and.w	r0, r0, #1
   2a526:	f04f 0c05 	mov.w	ip, #5
   2a52a:	4310      	orrs	r0, r2
   2a52c:	2a0f      	cmp	r2, #15
   2a52e:	6060      	str	r0, [r4, #4]
   2a530:	f8ce c004 	str.w	ip, [lr, #4]
   2a534:	f8ce c008 	str.w	ip, [lr, #8]
   2a538:	f200 8117 	bhi.w	2a76a <_malloc_r+0x506>
   2a53c:	4b1d      	ldr	r3, [pc, #116]	; (2a5b4 <_malloc_r+0x350>)
   2a53e:	68bc      	ldr	r4, [r7, #8]
   2a540:	681a      	ldr	r2, [r3, #0]
   2a542:	4291      	cmp	r1, r2
   2a544:	bf88      	it	hi
   2a546:	6019      	strhi	r1, [r3, #0]
   2a548:	4b1b      	ldr	r3, [pc, #108]	; (2a5b8 <_malloc_r+0x354>)
   2a54a:	681a      	ldr	r2, [r3, #0]
   2a54c:	4291      	cmp	r1, r2
   2a54e:	6862      	ldr	r2, [r4, #4]
   2a550:	bf88      	it	hi
   2a552:	6019      	strhi	r1, [r3, #0]
   2a554:	f022 0203 	bic.w	r2, r2, #3
   2a558:	4296      	cmp	r6, r2
   2a55a:	eba2 0306 	sub.w	r3, r2, r6
   2a55e:	d801      	bhi.n	2a564 <_malloc_r+0x300>
   2a560:	2b0f      	cmp	r3, #15
   2a562:	dc04      	bgt.n	2a56e <_malloc_r+0x30a>
   2a564:	4628      	mov	r0, r5
   2a566:	f000 fa2b 	bl	2a9c0 <__malloc_unlock>
   2a56a:	2400      	movs	r4, #0
   2a56c:	e740      	b.n	2a3f0 <_malloc_r+0x18c>
   2a56e:	19a2      	adds	r2, r4, r6
   2a570:	f043 0301 	orr.w	r3, r3, #1
   2a574:	f046 0601 	orr.w	r6, r6, #1
   2a578:	6066      	str	r6, [r4, #4]
   2a57a:	4628      	mov	r0, r5
   2a57c:	60ba      	str	r2, [r7, #8]
   2a57e:	6053      	str	r3, [r2, #4]
   2a580:	f000 fa1e 	bl	2a9c0 <__malloc_unlock>
   2a584:	3408      	adds	r4, #8
   2a586:	4620      	mov	r0, r4
   2a588:	b003      	add	sp, #12
   2a58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a58e:	2b14      	cmp	r3, #20
   2a590:	d971      	bls.n	2a676 <_malloc_r+0x412>
   2a592:	2b54      	cmp	r3, #84	; 0x54
   2a594:	f200 80a3 	bhi.w	2a6de <_malloc_r+0x47a>
   2a598:	0b33      	lsrs	r3, r6, #12
   2a59a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   2a59e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   2a5a2:	00c3      	lsls	r3, r0, #3
   2a5a4:	e680      	b.n	2a2a8 <_malloc_r+0x44>
   2a5a6:	bf00      	nop
   2a5a8:	2000cc24 	.word	0x2000cc24
   2a5ac:	200029d8 	.word	0x200029d8
   2a5b0:	200029a8 	.word	0x200029a8
   2a5b4:	200029d0 	.word	0x200029d0
   2a5b8:	200029d4 	.word	0x200029d4
   2a5bc:	2000cc2c 	.word	0x2000cc2c
   2a5c0:	2000d02c 	.word	0x2000d02c
   2a5c4:	0a5a      	lsrs	r2, r3, #9
   2a5c6:	2a04      	cmp	r2, #4
   2a5c8:	d95b      	bls.n	2a682 <_malloc_r+0x41e>
   2a5ca:	2a14      	cmp	r2, #20
   2a5cc:	f200 80ae 	bhi.w	2a72c <_malloc_r+0x4c8>
   2a5d0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   2a5d4:	00c9      	lsls	r1, r1, #3
   2a5d6:	325b      	adds	r2, #91	; 0x5b
   2a5d8:	eb07 0c01 	add.w	ip, r7, r1
   2a5dc:	5879      	ldr	r1, [r7, r1]
   2a5de:	f1ac 0c08 	sub.w	ip, ip, #8
   2a5e2:	458c      	cmp	ip, r1
   2a5e4:	f000 8088 	beq.w	2a6f8 <_malloc_r+0x494>
   2a5e8:	684a      	ldr	r2, [r1, #4]
   2a5ea:	f022 0203 	bic.w	r2, r2, #3
   2a5ee:	4293      	cmp	r3, r2
   2a5f0:	d273      	bcs.n	2a6da <_malloc_r+0x476>
   2a5f2:	6889      	ldr	r1, [r1, #8]
   2a5f4:	458c      	cmp	ip, r1
   2a5f6:	d1f7      	bne.n	2a5e8 <_malloc_r+0x384>
   2a5f8:	f8dc 200c 	ldr.w	r2, [ip, #12]
   2a5fc:	687b      	ldr	r3, [r7, #4]
   2a5fe:	60e2      	str	r2, [r4, #12]
   2a600:	f8c4 c008 	str.w	ip, [r4, #8]
   2a604:	6094      	str	r4, [r2, #8]
   2a606:	f8cc 400c 	str.w	r4, [ip, #12]
   2a60a:	e68f      	b.n	2a32c <_malloc_r+0xc8>
   2a60c:	19a1      	adds	r1, r4, r6
   2a60e:	f046 0c01 	orr.w	ip, r6, #1
   2a612:	f042 0601 	orr.w	r6, r2, #1
   2a616:	f8c4 c004 	str.w	ip, [r4, #4]
   2a61a:	4628      	mov	r0, r5
   2a61c:	6179      	str	r1, [r7, #20]
   2a61e:	6139      	str	r1, [r7, #16]
   2a620:	f8c1 e00c 	str.w	lr, [r1, #12]
   2a624:	f8c1 e008 	str.w	lr, [r1, #8]
   2a628:	604e      	str	r6, [r1, #4]
   2a62a:	50e2      	str	r2, [r4, r3]
   2a62c:	f000 f9c8 	bl	2a9c0 <__malloc_unlock>
   2a630:	3408      	adds	r4, #8
   2a632:	e6dd      	b.n	2a3f0 <_malloc_r+0x18c>
   2a634:	687b      	ldr	r3, [r7, #4]
   2a636:	e679      	b.n	2a32c <_malloc_r+0xc8>
   2a638:	f108 0801 	add.w	r8, r8, #1
   2a63c:	f018 0f03 	tst.w	r8, #3
   2a640:	f10c 0c08 	add.w	ip, ip, #8
   2a644:	f47f ae85 	bne.w	2a352 <_malloc_r+0xee>
   2a648:	e02d      	b.n	2a6a6 <_malloc_r+0x442>
   2a64a:	68dc      	ldr	r4, [r3, #12]
   2a64c:	42a3      	cmp	r3, r4
   2a64e:	bf08      	it	eq
   2a650:	3002      	addeq	r0, #2
   2a652:	f43f ae3e 	beq.w	2a2d2 <_malloc_r+0x6e>
   2a656:	e6bb      	b.n	2a3d0 <_malloc_r+0x16c>
   2a658:	4419      	add	r1, r3
   2a65a:	461c      	mov	r4, r3
   2a65c:	684a      	ldr	r2, [r1, #4]
   2a65e:	68db      	ldr	r3, [r3, #12]
   2a660:	f854 6f08 	ldr.w	r6, [r4, #8]!
   2a664:	f042 0201 	orr.w	r2, r2, #1
   2a668:	604a      	str	r2, [r1, #4]
   2a66a:	4628      	mov	r0, r5
   2a66c:	60f3      	str	r3, [r6, #12]
   2a66e:	609e      	str	r6, [r3, #8]
   2a670:	f000 f9a6 	bl	2a9c0 <__malloc_unlock>
   2a674:	e6bc      	b.n	2a3f0 <_malloc_r+0x18c>
   2a676:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2a67a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   2a67e:	00c3      	lsls	r3, r0, #3
   2a680:	e612      	b.n	2a2a8 <_malloc_r+0x44>
   2a682:	099a      	lsrs	r2, r3, #6
   2a684:	f102 0139 	add.w	r1, r2, #57	; 0x39
   2a688:	00c9      	lsls	r1, r1, #3
   2a68a:	3238      	adds	r2, #56	; 0x38
   2a68c:	e7a4      	b.n	2a5d8 <_malloc_r+0x374>
   2a68e:	42bc      	cmp	r4, r7
   2a690:	d054      	beq.n	2a73c <_malloc_r+0x4d8>
   2a692:	68bc      	ldr	r4, [r7, #8]
   2a694:	6862      	ldr	r2, [r4, #4]
   2a696:	f022 0203 	bic.w	r2, r2, #3
   2a69a:	e75d      	b.n	2a558 <_malloc_r+0x2f4>
   2a69c:	f859 3908 	ldr.w	r3, [r9], #-8
   2a6a0:	4599      	cmp	r9, r3
   2a6a2:	f040 8086 	bne.w	2a7b2 <_malloc_r+0x54e>
   2a6a6:	f010 0f03 	tst.w	r0, #3
   2a6aa:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   2a6ae:	d1f5      	bne.n	2a69c <_malloc_r+0x438>
   2a6b0:	687b      	ldr	r3, [r7, #4]
   2a6b2:	ea23 0304 	bic.w	r3, r3, r4
   2a6b6:	607b      	str	r3, [r7, #4]
   2a6b8:	0064      	lsls	r4, r4, #1
   2a6ba:	429c      	cmp	r4, r3
   2a6bc:	f63f aec7 	bhi.w	2a44e <_malloc_r+0x1ea>
   2a6c0:	2c00      	cmp	r4, #0
   2a6c2:	f43f aec4 	beq.w	2a44e <_malloc_r+0x1ea>
   2a6c6:	421c      	tst	r4, r3
   2a6c8:	4640      	mov	r0, r8
   2a6ca:	f47f ae3e 	bne.w	2a34a <_malloc_r+0xe6>
   2a6ce:	0064      	lsls	r4, r4, #1
   2a6d0:	421c      	tst	r4, r3
   2a6d2:	f100 0004 	add.w	r0, r0, #4
   2a6d6:	d0fa      	beq.n	2a6ce <_malloc_r+0x46a>
   2a6d8:	e637      	b.n	2a34a <_malloc_r+0xe6>
   2a6da:	468c      	mov	ip, r1
   2a6dc:	e78c      	b.n	2a5f8 <_malloc_r+0x394>
   2a6de:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2a6e2:	d815      	bhi.n	2a710 <_malloc_r+0x4ac>
   2a6e4:	0bf3      	lsrs	r3, r6, #15
   2a6e6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   2a6ea:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   2a6ee:	00c3      	lsls	r3, r0, #3
   2a6f0:	e5da      	b.n	2a2a8 <_malloc_r+0x44>
   2a6f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2a6f6:	e6ed      	b.n	2a4d4 <_malloc_r+0x270>
   2a6f8:	687b      	ldr	r3, [r7, #4]
   2a6fa:	1092      	asrs	r2, r2, #2
   2a6fc:	2101      	movs	r1, #1
   2a6fe:	fa01 f202 	lsl.w	r2, r1, r2
   2a702:	4313      	orrs	r3, r2
   2a704:	607b      	str	r3, [r7, #4]
   2a706:	4662      	mov	r2, ip
   2a708:	e779      	b.n	2a5fe <_malloc_r+0x39a>
   2a70a:	2301      	movs	r3, #1
   2a70c:	6053      	str	r3, [r2, #4]
   2a70e:	e729      	b.n	2a564 <_malloc_r+0x300>
   2a710:	f240 5254 	movw	r2, #1364	; 0x554
   2a714:	4293      	cmp	r3, r2
   2a716:	d822      	bhi.n	2a75e <_malloc_r+0x4fa>
   2a718:	0cb3      	lsrs	r3, r6, #18
   2a71a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   2a71e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   2a722:	00c3      	lsls	r3, r0, #3
   2a724:	e5c0      	b.n	2a2a8 <_malloc_r+0x44>
   2a726:	f103 0b10 	add.w	fp, r3, #16
   2a72a:	e6ae      	b.n	2a48a <_malloc_r+0x226>
   2a72c:	2a54      	cmp	r2, #84	; 0x54
   2a72e:	d829      	bhi.n	2a784 <_malloc_r+0x520>
   2a730:	0b1a      	lsrs	r2, r3, #12
   2a732:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   2a736:	00c9      	lsls	r1, r1, #3
   2a738:	326e      	adds	r2, #110	; 0x6e
   2a73a:	e74d      	b.n	2a5d8 <_malloc_r+0x374>
   2a73c:	4b20      	ldr	r3, [pc, #128]	; (2a7c0 <_malloc_r+0x55c>)
   2a73e:	6819      	ldr	r1, [r3, #0]
   2a740:	4459      	add	r1, fp
   2a742:	6019      	str	r1, [r3, #0]
   2a744:	e6b2      	b.n	2a4ac <_malloc_r+0x248>
   2a746:	f3ca 000b 	ubfx	r0, sl, #0, #12
   2a74a:	2800      	cmp	r0, #0
   2a74c:	f47f aeae 	bne.w	2a4ac <_malloc_r+0x248>
   2a750:	eb08 030b 	add.w	r3, r8, fp
   2a754:	68ba      	ldr	r2, [r7, #8]
   2a756:	f043 0301 	orr.w	r3, r3, #1
   2a75a:	6053      	str	r3, [r2, #4]
   2a75c:	e6ee      	b.n	2a53c <_malloc_r+0x2d8>
   2a75e:	207f      	movs	r0, #127	; 0x7f
   2a760:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2a764:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   2a768:	e59e      	b.n	2a2a8 <_malloc_r+0x44>
   2a76a:	f104 0108 	add.w	r1, r4, #8
   2a76e:	4628      	mov	r0, r5
   2a770:	9300      	str	r3, [sp, #0]
   2a772:	f003 f943 	bl	2d9fc <_free_r>
   2a776:	9b00      	ldr	r3, [sp, #0]
   2a778:	6819      	ldr	r1, [r3, #0]
   2a77a:	e6df      	b.n	2a53c <_malloc_r+0x2d8>
   2a77c:	2001      	movs	r0, #1
   2a77e:	f04f 0900 	mov.w	r9, #0
   2a782:	e6bc      	b.n	2a4fe <_malloc_r+0x29a>
   2a784:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2a788:	d805      	bhi.n	2a796 <_malloc_r+0x532>
   2a78a:	0bda      	lsrs	r2, r3, #15
   2a78c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   2a790:	00c9      	lsls	r1, r1, #3
   2a792:	3277      	adds	r2, #119	; 0x77
   2a794:	e720      	b.n	2a5d8 <_malloc_r+0x374>
   2a796:	f240 5154 	movw	r1, #1364	; 0x554
   2a79a:	428a      	cmp	r2, r1
   2a79c:	d805      	bhi.n	2a7aa <_malloc_r+0x546>
   2a79e:	0c9a      	lsrs	r2, r3, #18
   2a7a0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   2a7a4:	00c9      	lsls	r1, r1, #3
   2a7a6:	327c      	adds	r2, #124	; 0x7c
   2a7a8:	e716      	b.n	2a5d8 <_malloc_r+0x374>
   2a7aa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   2a7ae:	227e      	movs	r2, #126	; 0x7e
   2a7b0:	e712      	b.n	2a5d8 <_malloc_r+0x374>
   2a7b2:	687b      	ldr	r3, [r7, #4]
   2a7b4:	e780      	b.n	2a6b8 <_malloc_r+0x454>
   2a7b6:	08f0      	lsrs	r0, r6, #3
   2a7b8:	f106 0308 	add.w	r3, r6, #8
   2a7bc:	e600      	b.n	2a3c0 <_malloc_r+0x15c>
   2a7be:	bf00      	nop
   2a7c0:	200029a8 	.word	0x200029a8

0002a7c4 <__ascii_mbtowc>:
   2a7c4:	b082      	sub	sp, #8
   2a7c6:	b149      	cbz	r1, 2a7dc <__ascii_mbtowc+0x18>
   2a7c8:	b15a      	cbz	r2, 2a7e2 <__ascii_mbtowc+0x1e>
   2a7ca:	b16b      	cbz	r3, 2a7e8 <__ascii_mbtowc+0x24>
   2a7cc:	7813      	ldrb	r3, [r2, #0]
   2a7ce:	600b      	str	r3, [r1, #0]
   2a7d0:	7812      	ldrb	r2, [r2, #0]
   2a7d2:	1c10      	adds	r0, r2, #0
   2a7d4:	bf18      	it	ne
   2a7d6:	2001      	movne	r0, #1
   2a7d8:	b002      	add	sp, #8
   2a7da:	4770      	bx	lr
   2a7dc:	a901      	add	r1, sp, #4
   2a7de:	2a00      	cmp	r2, #0
   2a7e0:	d1f3      	bne.n	2a7ca <__ascii_mbtowc+0x6>
   2a7e2:	4610      	mov	r0, r2
   2a7e4:	b002      	add	sp, #8
   2a7e6:	4770      	bx	lr
   2a7e8:	f06f 0001 	mvn.w	r0, #1
   2a7ec:	e7f4      	b.n	2a7d8 <__ascii_mbtowc+0x14>
   2a7ee:	bf00      	nop

0002a7f0 <memcmp>:
   2a7f0:	2a03      	cmp	r2, #3
   2a7f2:	b470      	push	{r4, r5, r6}
   2a7f4:	d922      	bls.n	2a83c <memcmp+0x4c>
   2a7f6:	ea40 0301 	orr.w	r3, r0, r1
   2a7fa:	079b      	lsls	r3, r3, #30
   2a7fc:	d011      	beq.n	2a822 <memcmp+0x32>
   2a7fe:	7803      	ldrb	r3, [r0, #0]
   2a800:	780c      	ldrb	r4, [r1, #0]
   2a802:	42a3      	cmp	r3, r4
   2a804:	d11d      	bne.n	2a842 <memcmp+0x52>
   2a806:	440a      	add	r2, r1
   2a808:	3101      	adds	r1, #1
   2a80a:	e005      	b.n	2a818 <memcmp+0x28>
   2a80c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2a810:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a814:	42a3      	cmp	r3, r4
   2a816:	d114      	bne.n	2a842 <memcmp+0x52>
   2a818:	4291      	cmp	r1, r2
   2a81a:	d1f7      	bne.n	2a80c <memcmp+0x1c>
   2a81c:	2000      	movs	r0, #0
   2a81e:	bc70      	pop	{r4, r5, r6}
   2a820:	4770      	bx	lr
   2a822:	680d      	ldr	r5, [r1, #0]
   2a824:	6806      	ldr	r6, [r0, #0]
   2a826:	42ae      	cmp	r6, r5
   2a828:	460c      	mov	r4, r1
   2a82a:	4603      	mov	r3, r0
   2a82c:	f101 0104 	add.w	r1, r1, #4
   2a830:	f100 0004 	add.w	r0, r0, #4
   2a834:	d108      	bne.n	2a848 <memcmp+0x58>
   2a836:	3a04      	subs	r2, #4
   2a838:	2a03      	cmp	r2, #3
   2a83a:	d8f2      	bhi.n	2a822 <memcmp+0x32>
   2a83c:	2a00      	cmp	r2, #0
   2a83e:	d1de      	bne.n	2a7fe <memcmp+0xe>
   2a840:	e7ec      	b.n	2a81c <memcmp+0x2c>
   2a842:	1b18      	subs	r0, r3, r4
   2a844:	bc70      	pop	{r4, r5, r6}
   2a846:	4770      	bx	lr
   2a848:	4621      	mov	r1, r4
   2a84a:	4618      	mov	r0, r3
   2a84c:	e7d7      	b.n	2a7fe <memcmp+0xe>
   2a84e:	bf00      	nop

0002a850 <memmove>:
   2a850:	4288      	cmp	r0, r1
   2a852:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a854:	d90d      	bls.n	2a872 <memmove+0x22>
   2a856:	188b      	adds	r3, r1, r2
   2a858:	4298      	cmp	r0, r3
   2a85a:	d20a      	bcs.n	2a872 <memmove+0x22>
   2a85c:	1884      	adds	r4, r0, r2
   2a85e:	2a00      	cmp	r2, #0
   2a860:	d051      	beq.n	2a906 <memmove+0xb6>
   2a862:	4622      	mov	r2, r4
   2a864:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2a868:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2a86c:	4299      	cmp	r1, r3
   2a86e:	d1f9      	bne.n	2a864 <memmove+0x14>
   2a870:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a872:	2a0f      	cmp	r2, #15
   2a874:	d948      	bls.n	2a908 <memmove+0xb8>
   2a876:	ea41 0300 	orr.w	r3, r1, r0
   2a87a:	079b      	lsls	r3, r3, #30
   2a87c:	d146      	bne.n	2a90c <memmove+0xbc>
   2a87e:	f100 0410 	add.w	r4, r0, #16
   2a882:	f101 0310 	add.w	r3, r1, #16
   2a886:	4615      	mov	r5, r2
   2a888:	f853 6c10 	ldr.w	r6, [r3, #-16]
   2a88c:	f844 6c10 	str.w	r6, [r4, #-16]
   2a890:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   2a894:	f844 6c0c 	str.w	r6, [r4, #-12]
   2a898:	f853 6c08 	ldr.w	r6, [r3, #-8]
   2a89c:	f844 6c08 	str.w	r6, [r4, #-8]
   2a8a0:	3d10      	subs	r5, #16
   2a8a2:	f853 6c04 	ldr.w	r6, [r3, #-4]
   2a8a6:	f844 6c04 	str.w	r6, [r4, #-4]
   2a8aa:	2d0f      	cmp	r5, #15
   2a8ac:	f103 0310 	add.w	r3, r3, #16
   2a8b0:	f104 0410 	add.w	r4, r4, #16
   2a8b4:	d8e8      	bhi.n	2a888 <memmove+0x38>
   2a8b6:	f1a2 0310 	sub.w	r3, r2, #16
   2a8ba:	f023 030f 	bic.w	r3, r3, #15
   2a8be:	f002 0e0f 	and.w	lr, r2, #15
   2a8c2:	3310      	adds	r3, #16
   2a8c4:	f1be 0f03 	cmp.w	lr, #3
   2a8c8:	4419      	add	r1, r3
   2a8ca:	4403      	add	r3, r0
   2a8cc:	d921      	bls.n	2a912 <memmove+0xc2>
   2a8ce:	1f1e      	subs	r6, r3, #4
   2a8d0:	460d      	mov	r5, r1
   2a8d2:	4674      	mov	r4, lr
   2a8d4:	3c04      	subs	r4, #4
   2a8d6:	f855 7b04 	ldr.w	r7, [r5], #4
   2a8da:	f846 7f04 	str.w	r7, [r6, #4]!
   2a8de:	2c03      	cmp	r4, #3
   2a8e0:	d8f8      	bhi.n	2a8d4 <memmove+0x84>
   2a8e2:	f1ae 0404 	sub.w	r4, lr, #4
   2a8e6:	f024 0403 	bic.w	r4, r4, #3
   2a8ea:	3404      	adds	r4, #4
   2a8ec:	4421      	add	r1, r4
   2a8ee:	4423      	add	r3, r4
   2a8f0:	f002 0203 	and.w	r2, r2, #3
   2a8f4:	b162      	cbz	r2, 2a910 <memmove+0xc0>
   2a8f6:	3b01      	subs	r3, #1
   2a8f8:	440a      	add	r2, r1
   2a8fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a8fe:	f803 4f01 	strb.w	r4, [r3, #1]!
   2a902:	428a      	cmp	r2, r1
   2a904:	d1f9      	bne.n	2a8fa <memmove+0xaa>
   2a906:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a908:	4603      	mov	r3, r0
   2a90a:	e7f3      	b.n	2a8f4 <memmove+0xa4>
   2a90c:	4603      	mov	r3, r0
   2a90e:	e7f2      	b.n	2a8f6 <memmove+0xa6>
   2a910:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a912:	4672      	mov	r2, lr
   2a914:	e7ee      	b.n	2a8f4 <memmove+0xa4>
   2a916:	bf00      	nop

0002a918 <memset>:
   2a918:	b470      	push	{r4, r5, r6}
   2a91a:	0786      	lsls	r6, r0, #30
   2a91c:	d046      	beq.n	2a9ac <memset+0x94>
   2a91e:	1e54      	subs	r4, r2, #1
   2a920:	2a00      	cmp	r2, #0
   2a922:	d041      	beq.n	2a9a8 <memset+0x90>
   2a924:	b2ca      	uxtb	r2, r1
   2a926:	4603      	mov	r3, r0
   2a928:	e002      	b.n	2a930 <memset+0x18>
   2a92a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   2a92e:	d33b      	bcc.n	2a9a8 <memset+0x90>
   2a930:	f803 2b01 	strb.w	r2, [r3], #1
   2a934:	079d      	lsls	r5, r3, #30
   2a936:	d1f8      	bne.n	2a92a <memset+0x12>
   2a938:	2c03      	cmp	r4, #3
   2a93a:	d92e      	bls.n	2a99a <memset+0x82>
   2a93c:	b2cd      	uxtb	r5, r1
   2a93e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   2a942:	2c0f      	cmp	r4, #15
   2a944:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2a948:	d919      	bls.n	2a97e <memset+0x66>
   2a94a:	f103 0210 	add.w	r2, r3, #16
   2a94e:	4626      	mov	r6, r4
   2a950:	3e10      	subs	r6, #16
   2a952:	2e0f      	cmp	r6, #15
   2a954:	f842 5c10 	str.w	r5, [r2, #-16]
   2a958:	f842 5c0c 	str.w	r5, [r2, #-12]
   2a95c:	f842 5c08 	str.w	r5, [r2, #-8]
   2a960:	f842 5c04 	str.w	r5, [r2, #-4]
   2a964:	f102 0210 	add.w	r2, r2, #16
   2a968:	d8f2      	bhi.n	2a950 <memset+0x38>
   2a96a:	f1a4 0210 	sub.w	r2, r4, #16
   2a96e:	f022 020f 	bic.w	r2, r2, #15
   2a972:	f004 040f 	and.w	r4, r4, #15
   2a976:	3210      	adds	r2, #16
   2a978:	2c03      	cmp	r4, #3
   2a97a:	4413      	add	r3, r2
   2a97c:	d90d      	bls.n	2a99a <memset+0x82>
   2a97e:	461e      	mov	r6, r3
   2a980:	4622      	mov	r2, r4
   2a982:	3a04      	subs	r2, #4
   2a984:	2a03      	cmp	r2, #3
   2a986:	f846 5b04 	str.w	r5, [r6], #4
   2a98a:	d8fa      	bhi.n	2a982 <memset+0x6a>
   2a98c:	1f22      	subs	r2, r4, #4
   2a98e:	f022 0203 	bic.w	r2, r2, #3
   2a992:	3204      	adds	r2, #4
   2a994:	4413      	add	r3, r2
   2a996:	f004 0403 	and.w	r4, r4, #3
   2a99a:	b12c      	cbz	r4, 2a9a8 <memset+0x90>
   2a99c:	b2c9      	uxtb	r1, r1
   2a99e:	441c      	add	r4, r3
   2a9a0:	f803 1b01 	strb.w	r1, [r3], #1
   2a9a4:	429c      	cmp	r4, r3
   2a9a6:	d1fb      	bne.n	2a9a0 <memset+0x88>
   2a9a8:	bc70      	pop	{r4, r5, r6}
   2a9aa:	4770      	bx	lr
   2a9ac:	4614      	mov	r4, r2
   2a9ae:	4603      	mov	r3, r0
   2a9b0:	e7c2      	b.n	2a938 <memset+0x20>
   2a9b2:	bf00      	nop

0002a9b4 <__malloc_lock>:
   2a9b4:	4801      	ldr	r0, [pc, #4]	; (2a9bc <__malloc_lock+0x8>)
   2a9b6:	f003 b915 	b.w	2dbe4 <__retarget_lock_acquire_recursive>
   2a9ba:	bf00      	nop
   2a9bc:	20002d00 	.word	0x20002d00

0002a9c0 <__malloc_unlock>:
   2a9c0:	4801      	ldr	r0, [pc, #4]	; (2a9c8 <__malloc_unlock+0x8>)
   2a9c2:	f003 b911 	b.w	2dbe8 <__retarget_lock_release_recursive>
   2a9c6:	bf00      	nop
   2a9c8:	20002d00 	.word	0x20002d00

0002a9cc <rand>:
   2a9cc:	b410      	push	{r4}
   2a9ce:	4b0c      	ldr	r3, [pc, #48]	; (2aa00 <rand+0x34>)
   2a9d0:	480c      	ldr	r0, [pc, #48]	; (2aa04 <rand+0x38>)
   2a9d2:	6819      	ldr	r1, [r3, #0]
   2a9d4:	4c0c      	ldr	r4, [pc, #48]	; (2aa08 <rand+0x3c>)
   2a9d6:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   2a9da:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   2a9de:	fb00 f002 	mul.w	r0, r0, r2
   2a9e2:	fb04 0003 	mla	r0, r4, r3, r0
   2a9e6:	fba2 2304 	umull	r2, r3, r2, r4
   2a9ea:	4403      	add	r3, r0
   2a9ec:	3201      	adds	r2, #1
   2a9ee:	f143 0300 	adc.w	r3, r3, #0
   2a9f2:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   2a9f6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   2a9fa:	bc10      	pop	{r4}
   2a9fc:	4770      	bx	lr
   2a9fe:	bf00      	nop
   2aa00:	2000c688 	.word	0x2000c688
   2aa04:	5851f42d 	.word	0x5851f42d
   2aa08:	4c957f2d 	.word	0x4c957f2d

0002aa0c <_sbrk_r>:
   2aa0c:	b538      	push	{r3, r4, r5, lr}
   2aa0e:	4c07      	ldr	r4, [pc, #28]	; (2aa2c <_sbrk_r+0x20>)
   2aa10:	2300      	movs	r3, #0
   2aa12:	4605      	mov	r5, r0
   2aa14:	4608      	mov	r0, r1
   2aa16:	6023      	str	r3, [r4, #0]
   2aa18:	f7d7 f80e 	bl	1a38 <_sbrk>
   2aa1c:	1c43      	adds	r3, r0, #1
   2aa1e:	d000      	beq.n	2aa22 <_sbrk_r+0x16>
   2aa20:	bd38      	pop	{r3, r4, r5, pc}
   2aa22:	6823      	ldr	r3, [r4, #0]
   2aa24:	2b00      	cmp	r3, #0
   2aa26:	d0fb      	beq.n	2aa20 <_sbrk_r+0x14>
   2aa28:	602b      	str	r3, [r5, #0]
   2aa2a:	bd38      	pop	{r3, r4, r5, pc}
   2aa2c:	20002d14 	.word	0x20002d14

0002aa30 <snprintf>:
   2aa30:	b40c      	push	{r2, r3}
   2aa32:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aa34:	4b23      	ldr	r3, [pc, #140]	; (2aac4 <snprintf+0x94>)
   2aa36:	1e0c      	subs	r4, r1, #0
   2aa38:	b09d      	sub	sp, #116	; 0x74
   2aa3a:	681d      	ldr	r5, [r3, #0]
   2aa3c:	db3d      	blt.n	2aaba <snprintf+0x8a>
   2aa3e:	f44f 7302 	mov.w	r3, #520	; 0x208
   2aa42:	9002      	str	r0, [sp, #8]
   2aa44:	9006      	str	r0, [sp, #24]
   2aa46:	f8ad 3014 	strh.w	r3, [sp, #20]
   2aa4a:	ae23      	add	r6, sp, #140	; 0x8c
   2aa4c:	d017      	beq.n	2aa7e <snprintf+0x4e>
   2aa4e:	3c01      	subs	r4, #1
   2aa50:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2aa52:	9404      	str	r4, [sp, #16]
   2aa54:	4633      	mov	r3, r6
   2aa56:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2aa5a:	a902      	add	r1, sp, #8
   2aa5c:	4628      	mov	r0, r5
   2aa5e:	9407      	str	r4, [sp, #28]
   2aa60:	9601      	str	r6, [sp, #4]
   2aa62:	f8ad 7016 	strh.w	r7, [sp, #22]
   2aa66:	f000 fd7f 	bl	2b568 <_svfprintf_r>
   2aa6a:	1c42      	adds	r2, r0, #1
   2aa6c:	db1b      	blt.n	2aaa6 <snprintf+0x76>
   2aa6e:	9b02      	ldr	r3, [sp, #8]
   2aa70:	2200      	movs	r2, #0
   2aa72:	701a      	strb	r2, [r3, #0]
   2aa74:	b01d      	add	sp, #116	; 0x74
   2aa76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2aa7a:	b002      	add	sp, #8
   2aa7c:	4770      	bx	lr
   2aa7e:	4633      	mov	r3, r6
   2aa80:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2aa84:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2aa86:	9404      	str	r4, [sp, #16]
   2aa88:	a902      	add	r1, sp, #8
   2aa8a:	4628      	mov	r0, r5
   2aa8c:	9407      	str	r4, [sp, #28]
   2aa8e:	9601      	str	r6, [sp, #4]
   2aa90:	f8ad 7016 	strh.w	r7, [sp, #22]
   2aa94:	f000 fd68 	bl	2b568 <_svfprintf_r>
   2aa98:	1c43      	adds	r3, r0, #1
   2aa9a:	db07      	blt.n	2aaac <snprintf+0x7c>
   2aa9c:	b01d      	add	sp, #116	; 0x74
   2aa9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2aaa2:	b002      	add	sp, #8
   2aaa4:	4770      	bx	lr
   2aaa6:	238b      	movs	r3, #139	; 0x8b
   2aaa8:	602b      	str	r3, [r5, #0]
   2aaaa:	e7e0      	b.n	2aa6e <snprintf+0x3e>
   2aaac:	238b      	movs	r3, #139	; 0x8b
   2aaae:	602b      	str	r3, [r5, #0]
   2aab0:	b01d      	add	sp, #116	; 0x74
   2aab2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2aab6:	b002      	add	sp, #8
   2aab8:	4770      	bx	lr
   2aaba:	238b      	movs	r3, #139	; 0x8b
   2aabc:	602b      	str	r3, [r5, #0]
   2aabe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2aac2:	e7eb      	b.n	2aa9c <snprintf+0x6c>
   2aac4:	2000c688 	.word	0x2000c688

0002aac8 <strcat>:
   2aac8:	0783      	lsls	r3, r0, #30
   2aaca:	b510      	push	{r4, lr}
   2aacc:	4604      	mov	r4, r0
   2aace:	d110      	bne.n	2aaf2 <strcat+0x2a>
   2aad0:	6802      	ldr	r2, [r0, #0]
   2aad2:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2aad6:	ea23 0302 	bic.w	r3, r3, r2
   2aada:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2aade:	d108      	bne.n	2aaf2 <strcat+0x2a>
   2aae0:	f850 2f04 	ldr.w	r2, [r0, #4]!
   2aae4:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2aae8:	ea23 0302 	bic.w	r3, r3, r2
   2aaec:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2aaf0:	d0f6      	beq.n	2aae0 <strcat+0x18>
   2aaf2:	7803      	ldrb	r3, [r0, #0]
   2aaf4:	b11b      	cbz	r3, 2aafe <strcat+0x36>
   2aaf6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2aafa:	2b00      	cmp	r3, #0
   2aafc:	d1fb      	bne.n	2aaf6 <strcat+0x2e>
   2aafe:	f000 f877 	bl	2abf0 <strcpy>
   2ab02:	4620      	mov	r0, r4
   2ab04:	bd10      	pop	{r4, pc}
   2ab06:	bf00      	nop

0002ab08 <strchr>:
   2ab08:	b2c9      	uxtb	r1, r1
   2ab0a:	2900      	cmp	r1, #0
   2ab0c:	d041      	beq.n	2ab92 <strchr+0x8a>
   2ab0e:	0782      	lsls	r2, r0, #30
   2ab10:	b4f0      	push	{r4, r5, r6, r7}
   2ab12:	d067      	beq.n	2abe4 <strchr+0xdc>
   2ab14:	7803      	ldrb	r3, [r0, #0]
   2ab16:	2b00      	cmp	r3, #0
   2ab18:	d068      	beq.n	2abec <strchr+0xe4>
   2ab1a:	4299      	cmp	r1, r3
   2ab1c:	d037      	beq.n	2ab8e <strchr+0x86>
   2ab1e:	1c43      	adds	r3, r0, #1
   2ab20:	e004      	b.n	2ab2c <strchr+0x24>
   2ab22:	f813 0b01 	ldrb.w	r0, [r3], #1
   2ab26:	b390      	cbz	r0, 2ab8e <strchr+0x86>
   2ab28:	4281      	cmp	r1, r0
   2ab2a:	d02f      	beq.n	2ab8c <strchr+0x84>
   2ab2c:	079a      	lsls	r2, r3, #30
   2ab2e:	461c      	mov	r4, r3
   2ab30:	d1f7      	bne.n	2ab22 <strchr+0x1a>
   2ab32:	6825      	ldr	r5, [r4, #0]
   2ab34:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
   2ab38:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
   2ab3c:	ea83 0605 	eor.w	r6, r3, r5
   2ab40:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
   2ab44:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   2ab48:	ea20 0006 	bic.w	r0, r0, r6
   2ab4c:	ea22 0205 	bic.w	r2, r2, r5
   2ab50:	4302      	orrs	r2, r0
   2ab52:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ab56:	d111      	bne.n	2ab7c <strchr+0x74>
   2ab58:	4620      	mov	r0, r4
   2ab5a:	f850 6f04 	ldr.w	r6, [r0, #4]!
   2ab5e:	ea83 0706 	eor.w	r7, r3, r6
   2ab62:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
   2ab66:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
   2ab6a:	ea25 0507 	bic.w	r5, r5, r7
   2ab6e:	ea22 0206 	bic.w	r2, r2, r6
   2ab72:	432a      	orrs	r2, r5
   2ab74:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ab78:	d0ef      	beq.n	2ab5a <strchr+0x52>
   2ab7a:	4604      	mov	r4, r0
   2ab7c:	7820      	ldrb	r0, [r4, #0]
   2ab7e:	b918      	cbnz	r0, 2ab88 <strchr+0x80>
   2ab80:	e005      	b.n	2ab8e <strchr+0x86>
   2ab82:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2ab86:	b110      	cbz	r0, 2ab8e <strchr+0x86>
   2ab88:	4281      	cmp	r1, r0
   2ab8a:	d1fa      	bne.n	2ab82 <strchr+0x7a>
   2ab8c:	4620      	mov	r0, r4
   2ab8e:	bcf0      	pop	{r4, r5, r6, r7}
   2ab90:	4770      	bx	lr
   2ab92:	0783      	lsls	r3, r0, #30
   2ab94:	d024      	beq.n	2abe0 <strchr+0xd8>
   2ab96:	7803      	ldrb	r3, [r0, #0]
   2ab98:	2b00      	cmp	r3, #0
   2ab9a:	d0f9      	beq.n	2ab90 <strchr+0x88>
   2ab9c:	1c43      	adds	r3, r0, #1
   2ab9e:	e003      	b.n	2aba8 <strchr+0xa0>
   2aba0:	7802      	ldrb	r2, [r0, #0]
   2aba2:	3301      	adds	r3, #1
   2aba4:	2a00      	cmp	r2, #0
   2aba6:	d0f3      	beq.n	2ab90 <strchr+0x88>
   2aba8:	0799      	lsls	r1, r3, #30
   2abaa:	4618      	mov	r0, r3
   2abac:	d1f8      	bne.n	2aba0 <strchr+0x98>
   2abae:	6819      	ldr	r1, [r3, #0]
   2abb0:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2abb4:	ea22 0201 	bic.w	r2, r2, r1
   2abb8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2abbc:	d108      	bne.n	2abd0 <strchr+0xc8>
   2abbe:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2abc2:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2abc6:	ea22 0201 	bic.w	r2, r2, r1
   2abca:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2abce:	d0f6      	beq.n	2abbe <strchr+0xb6>
   2abd0:	781a      	ldrb	r2, [r3, #0]
   2abd2:	4618      	mov	r0, r3
   2abd4:	b142      	cbz	r2, 2abe8 <strchr+0xe0>
   2abd6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2abda:	2b00      	cmp	r3, #0
   2abdc:	d1fb      	bne.n	2abd6 <strchr+0xce>
   2abde:	4770      	bx	lr
   2abe0:	4603      	mov	r3, r0
   2abe2:	e7e4      	b.n	2abae <strchr+0xa6>
   2abe4:	4604      	mov	r4, r0
   2abe6:	e7a4      	b.n	2ab32 <strchr+0x2a>
   2abe8:	4618      	mov	r0, r3
   2abea:	4770      	bx	lr
   2abec:	4618      	mov	r0, r3
   2abee:	e7ce      	b.n	2ab8e <strchr+0x86>

0002abf0 <strcpy>:
   2abf0:	ea80 0201 	eor.w	r2, r0, r1
   2abf4:	4684      	mov	ip, r0
   2abf6:	f012 0f03 	tst.w	r2, #3
   2abfa:	d14f      	bne.n	2ac9c <strcpy+0xac>
   2abfc:	f011 0f03 	tst.w	r1, #3
   2ac00:	d132      	bne.n	2ac68 <strcpy+0x78>
   2ac02:	f84d 4d04 	str.w	r4, [sp, #-4]!
   2ac06:	f011 0f04 	tst.w	r1, #4
   2ac0a:	f851 3b04 	ldr.w	r3, [r1], #4
   2ac0e:	d00b      	beq.n	2ac28 <strcpy+0x38>
   2ac10:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2ac14:	439a      	bics	r2, r3
   2ac16:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac1a:	bf04      	itt	eq
   2ac1c:	f84c 3b04 	streq.w	r3, [ip], #4
   2ac20:	f851 3b04 	ldreq.w	r3, [r1], #4
   2ac24:	d116      	bne.n	2ac54 <strcpy+0x64>
   2ac26:	bf00      	nop
   2ac28:	f851 4b04 	ldr.w	r4, [r1], #4
   2ac2c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2ac30:	439a      	bics	r2, r3
   2ac32:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac36:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   2ac3a:	d10b      	bne.n	2ac54 <strcpy+0x64>
   2ac3c:	f84c 3b04 	str.w	r3, [ip], #4
   2ac40:	43a2      	bics	r2, r4
   2ac42:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac46:	bf04      	itt	eq
   2ac48:	f851 3b04 	ldreq.w	r3, [r1], #4
   2ac4c:	f84c 4b04 	streq.w	r4, [ip], #4
   2ac50:	d0ea      	beq.n	2ac28 <strcpy+0x38>
   2ac52:	4623      	mov	r3, r4
   2ac54:	f80c 3b01 	strb.w	r3, [ip], #1
   2ac58:	f013 0fff 	tst.w	r3, #255	; 0xff
   2ac5c:	ea4f 2333 	mov.w	r3, r3, ror #8
   2ac60:	d1f8      	bne.n	2ac54 <strcpy+0x64>
   2ac62:	f85d 4b04 	ldr.w	r4, [sp], #4
   2ac66:	4770      	bx	lr
   2ac68:	f011 0f01 	tst.w	r1, #1
   2ac6c:	d006      	beq.n	2ac7c <strcpy+0x8c>
   2ac6e:	f811 2b01 	ldrb.w	r2, [r1], #1
   2ac72:	f80c 2b01 	strb.w	r2, [ip], #1
   2ac76:	2a00      	cmp	r2, #0
   2ac78:	bf08      	it	eq
   2ac7a:	4770      	bxeq	lr
   2ac7c:	f011 0f02 	tst.w	r1, #2
   2ac80:	d0bf      	beq.n	2ac02 <strcpy+0x12>
   2ac82:	f831 2b02 	ldrh.w	r2, [r1], #2
   2ac86:	f012 0fff 	tst.w	r2, #255	; 0xff
   2ac8a:	bf16      	itet	ne
   2ac8c:	f82c 2b02 	strhne.w	r2, [ip], #2
   2ac90:	f88c 2000 	strbeq.w	r2, [ip]
   2ac94:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   2ac98:	d1b3      	bne.n	2ac02 <strcpy+0x12>
   2ac9a:	4770      	bx	lr
   2ac9c:	f811 2b01 	ldrb.w	r2, [r1], #1
   2aca0:	f80c 2b01 	strb.w	r2, [ip], #1
   2aca4:	2a00      	cmp	r2, #0
   2aca6:	d1f9      	bne.n	2ac9c <strcpy+0xac>
   2aca8:	4770      	bx	lr
   2acaa:	bf00      	nop

0002acac <strncmp>:
   2acac:	2a00      	cmp	r2, #0
   2acae:	d041      	beq.n	2ad34 <strncmp+0x88>
   2acb0:	ea40 0301 	orr.w	r3, r0, r1
   2acb4:	f013 0303 	ands.w	r3, r3, #3
   2acb8:	b4f0      	push	{r4, r5, r6, r7}
   2acba:	d125      	bne.n	2ad08 <strncmp+0x5c>
   2acbc:	2a03      	cmp	r2, #3
   2acbe:	d923      	bls.n	2ad08 <strncmp+0x5c>
   2acc0:	6804      	ldr	r4, [r0, #0]
   2acc2:	680d      	ldr	r5, [r1, #0]
   2acc4:	42ac      	cmp	r4, r5
   2acc6:	d11f      	bne.n	2ad08 <strncmp+0x5c>
   2acc8:	3a04      	subs	r2, #4
   2acca:	d038      	beq.n	2ad3e <strncmp+0x92>
   2accc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   2acd0:	ea25 0404 	bic.w	r4, r5, r4
   2acd4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2acd8:	d12e      	bne.n	2ad38 <strncmp+0x8c>
   2acda:	3004      	adds	r0, #4
   2acdc:	3104      	adds	r1, #4
   2acde:	e00f      	b.n	2ad00 <strncmp+0x54>
   2ace0:	f850 3b04 	ldr.w	r3, [r0], #4
   2ace4:	680e      	ldr	r6, [r1, #0]
   2ace6:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   2acea:	42b3      	cmp	r3, r6
   2acec:	ea24 0403 	bic.w	r4, r4, r3
   2acf0:	f101 0104 	add.w	r1, r1, #4
   2acf4:	d126      	bne.n	2ad44 <strncmp+0x98>
   2acf6:	3a04      	subs	r2, #4
   2acf8:	d021      	beq.n	2ad3e <strncmp+0x92>
   2acfa:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2acfe:	d11b      	bne.n	2ad38 <strncmp+0x8c>
   2ad00:	2a03      	cmp	r2, #3
   2ad02:	4607      	mov	r7, r0
   2ad04:	460d      	mov	r5, r1
   2ad06:	d8eb      	bhi.n	2ace0 <strncmp+0x34>
   2ad08:	7805      	ldrb	r5, [r0, #0]
   2ad0a:	780c      	ldrb	r4, [r1, #0]
   2ad0c:	42ac      	cmp	r4, r5
   2ad0e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   2ad12:	d11a      	bne.n	2ad4a <strncmp+0x9e>
   2ad14:	b183      	cbz	r3, 2ad38 <strncmp+0x8c>
   2ad16:	b914      	cbnz	r4, 2ad1e <strncmp+0x72>
   2ad18:	e00e      	b.n	2ad38 <strncmp+0x8c>
   2ad1a:	b16b      	cbz	r3, 2ad38 <strncmp+0x8c>
   2ad1c:	b17a      	cbz	r2, 2ad3e <strncmp+0x92>
   2ad1e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   2ad22:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2ad26:	42a2      	cmp	r2, r4
   2ad28:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2ad2c:	d0f5      	beq.n	2ad1a <strncmp+0x6e>
   2ad2e:	1b10      	subs	r0, r2, r4
   2ad30:	bcf0      	pop	{r4, r5, r6, r7}
   2ad32:	4770      	bx	lr
   2ad34:	4610      	mov	r0, r2
   2ad36:	4770      	bx	lr
   2ad38:	2000      	movs	r0, #0
   2ad3a:	bcf0      	pop	{r4, r5, r6, r7}
   2ad3c:	4770      	bx	lr
   2ad3e:	4610      	mov	r0, r2
   2ad40:	bcf0      	pop	{r4, r5, r6, r7}
   2ad42:	4770      	bx	lr
   2ad44:	4629      	mov	r1, r5
   2ad46:	4638      	mov	r0, r7
   2ad48:	e7de      	b.n	2ad08 <strncmp+0x5c>
   2ad4a:	462a      	mov	r2, r5
   2ad4c:	e7ef      	b.n	2ad2e <strncmp+0x82>
   2ad4e:	bf00      	nop

0002ad50 <strncpy>:
   2ad50:	ea40 0301 	orr.w	r3, r0, r1
   2ad54:	f013 0f03 	tst.w	r3, #3
   2ad58:	b470      	push	{r4, r5, r6}
   2ad5a:	4603      	mov	r3, r0
   2ad5c:	d024      	beq.n	2ada8 <strncpy+0x58>
   2ad5e:	b1a2      	cbz	r2, 2ad8a <strncpy+0x3a>
   2ad60:	780c      	ldrb	r4, [r1, #0]
   2ad62:	701c      	strb	r4, [r3, #0]
   2ad64:	3a01      	subs	r2, #1
   2ad66:	3301      	adds	r3, #1
   2ad68:	3101      	adds	r1, #1
   2ad6a:	b13c      	cbz	r4, 2ad7c <strncpy+0x2c>
   2ad6c:	b16a      	cbz	r2, 2ad8a <strncpy+0x3a>
   2ad6e:	f811 4b01 	ldrb.w	r4, [r1], #1
   2ad72:	f803 4b01 	strb.w	r4, [r3], #1
   2ad76:	3a01      	subs	r2, #1
   2ad78:	2c00      	cmp	r4, #0
   2ad7a:	d1f7      	bne.n	2ad6c <strncpy+0x1c>
   2ad7c:	b12a      	cbz	r2, 2ad8a <strncpy+0x3a>
   2ad7e:	441a      	add	r2, r3
   2ad80:	2100      	movs	r1, #0
   2ad82:	f803 1b01 	strb.w	r1, [r3], #1
   2ad86:	429a      	cmp	r2, r3
   2ad88:	d1fb      	bne.n	2ad82 <strncpy+0x32>
   2ad8a:	bc70      	pop	{r4, r5, r6}
   2ad8c:	4770      	bx	lr
   2ad8e:	460e      	mov	r6, r1
   2ad90:	f851 5b04 	ldr.w	r5, [r1], #4
   2ad94:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   2ad98:	ea24 0405 	bic.w	r4, r4, r5
   2ad9c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2ada0:	d105      	bne.n	2adae <strncpy+0x5e>
   2ada2:	f843 5b04 	str.w	r5, [r3], #4
   2ada6:	3a04      	subs	r2, #4
   2ada8:	2a03      	cmp	r2, #3
   2adaa:	d8f0      	bhi.n	2ad8e <strncpy+0x3e>
   2adac:	e7d7      	b.n	2ad5e <strncpy+0xe>
   2adae:	4631      	mov	r1, r6
   2adb0:	e7d6      	b.n	2ad60 <strncpy+0x10>
   2adb2:	bf00      	nop

0002adb4 <strrchr>:
   2adb4:	b171      	cbz	r1, 2add4 <strrchr+0x20>
   2adb6:	b538      	push	{r3, r4, r5, lr}
   2adb8:	4603      	mov	r3, r0
   2adba:	460c      	mov	r4, r1
   2adbc:	2500      	movs	r5, #0
   2adbe:	e001      	b.n	2adc4 <strrchr+0x10>
   2adc0:	1c43      	adds	r3, r0, #1
   2adc2:	4605      	mov	r5, r0
   2adc4:	4618      	mov	r0, r3
   2adc6:	4621      	mov	r1, r4
   2adc8:	f7ff fe9e 	bl	2ab08 <strchr>
   2adcc:	2800      	cmp	r0, #0
   2adce:	d1f7      	bne.n	2adc0 <strrchr+0xc>
   2add0:	4628      	mov	r0, r5
   2add2:	bd38      	pop	{r3, r4, r5, pc}
   2add4:	f7ff be98 	b.w	2ab08 <strchr>

0002add8 <critical_factorization>:
   2add8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2addc:	f04f 0e01 	mov.w	lr, #1
   2ade0:	4674      	mov	r4, lr
   2ade2:	2500      	movs	r5, #0
   2ade4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2ade8:	192b      	adds	r3, r5, r4
   2adea:	428b      	cmp	r3, r1
   2adec:	eb00 0706 	add.w	r7, r0, r6
   2adf0:	d20d      	bcs.n	2ae0e <critical_factorization+0x36>
   2adf2:	5d3f      	ldrb	r7, [r7, r4]
   2adf4:	f810 c003 	ldrb.w	ip, [r0, r3]
   2adf8:	45bc      	cmp	ip, r7
   2adfa:	d22d      	bcs.n	2ae58 <critical_factorization+0x80>
   2adfc:	461d      	mov	r5, r3
   2adfe:	2401      	movs	r4, #1
   2ae00:	eba3 0e06 	sub.w	lr, r3, r6
   2ae04:	192b      	adds	r3, r5, r4
   2ae06:	428b      	cmp	r3, r1
   2ae08:	eb00 0706 	add.w	r7, r0, r6
   2ae0c:	d3f1      	bcc.n	2adf2 <critical_factorization+0x1a>
   2ae0e:	f04f 0801 	mov.w	r8, #1
   2ae12:	f8c2 e000 	str.w	lr, [r2]
   2ae16:	4644      	mov	r4, r8
   2ae18:	2500      	movs	r5, #0
   2ae1a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2ae1e:	192b      	adds	r3, r5, r4
   2ae20:	4299      	cmp	r1, r3
   2ae22:	eb00 0e07 	add.w	lr, r0, r7
   2ae26:	d90e      	bls.n	2ae46 <critical_factorization+0x6e>
   2ae28:	f81e e004 	ldrb.w	lr, [lr, r4]
   2ae2c:	f810 c003 	ldrb.w	ip, [r0, r3]
   2ae30:	45f4      	cmp	ip, lr
   2ae32:	d918      	bls.n	2ae66 <critical_factorization+0x8e>
   2ae34:	461d      	mov	r5, r3
   2ae36:	2401      	movs	r4, #1
   2ae38:	eba3 0807 	sub.w	r8, r3, r7
   2ae3c:	192b      	adds	r3, r5, r4
   2ae3e:	4299      	cmp	r1, r3
   2ae40:	eb00 0e07 	add.w	lr, r0, r7
   2ae44:	d8f0      	bhi.n	2ae28 <critical_factorization+0x50>
   2ae46:	3701      	adds	r7, #1
   2ae48:	1c70      	adds	r0, r6, #1
   2ae4a:	4287      	cmp	r7, r0
   2ae4c:	bf24      	itt	cs
   2ae4e:	f8c2 8000 	strcs.w	r8, [r2]
   2ae52:	4638      	movcs	r0, r7
   2ae54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ae58:	d00c      	beq.n	2ae74 <critical_factorization+0x9c>
   2ae5a:	f04f 0e01 	mov.w	lr, #1
   2ae5e:	462e      	mov	r6, r5
   2ae60:	4674      	mov	r4, lr
   2ae62:	4475      	add	r5, lr
   2ae64:	e7c0      	b.n	2ade8 <critical_factorization+0x10>
   2ae66:	d00b      	beq.n	2ae80 <critical_factorization+0xa8>
   2ae68:	f04f 0801 	mov.w	r8, #1
   2ae6c:	462f      	mov	r7, r5
   2ae6e:	4644      	mov	r4, r8
   2ae70:	4445      	add	r5, r8
   2ae72:	e7d4      	b.n	2ae1e <critical_factorization+0x46>
   2ae74:	4574      	cmp	r4, lr
   2ae76:	bf12      	itee	ne
   2ae78:	3401      	addne	r4, #1
   2ae7a:	461d      	moveq	r5, r3
   2ae7c:	2401      	moveq	r4, #1
   2ae7e:	e7b3      	b.n	2ade8 <critical_factorization+0x10>
   2ae80:	4544      	cmp	r4, r8
   2ae82:	bf12      	itee	ne
   2ae84:	3401      	addne	r4, #1
   2ae86:	461d      	moveq	r5, r3
   2ae88:	2401      	moveq	r4, #1
   2ae8a:	e7c8      	b.n	2ae1e <critical_factorization+0x46>

0002ae8c <two_way_long_needle>:
   2ae8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ae90:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   2ae94:	4616      	mov	r6, r2
   2ae96:	4605      	mov	r5, r0
   2ae98:	468b      	mov	fp, r1
   2ae9a:	4610      	mov	r0, r2
   2ae9c:	4619      	mov	r1, r3
   2ae9e:	aa03      	add	r2, sp, #12
   2aea0:	461c      	mov	r4, r3
   2aea2:	f7ff ff99 	bl	2add8 <critical_factorization>
   2aea6:	ab03      	add	r3, sp, #12
   2aea8:	4681      	mov	r9, r0
   2aeaa:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
   2aeae:	f843 4f04 	str.w	r4, [r3, #4]!
   2aeb2:	4293      	cmp	r3, r2
   2aeb4:	d1fb      	bne.n	2aeae <two_way_long_needle+0x22>
   2aeb6:	b14c      	cbz	r4, 2aecc <two_way_long_needle+0x40>
   2aeb8:	1e63      	subs	r3, r4, #1
   2aeba:	1e72      	subs	r2, r6, #1
   2aebc:	a804      	add	r0, sp, #16
   2aebe:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2aec2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   2aec6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   2aeca:	d2f8      	bcs.n	2aebe <two_way_long_needle+0x32>
   2aecc:	9903      	ldr	r1, [sp, #12]
   2aece:	464a      	mov	r2, r9
   2aed0:	4431      	add	r1, r6
   2aed2:	4630      	mov	r0, r6
   2aed4:	f7ff fc8c 	bl	2a7f0 <memcmp>
   2aed8:	2800      	cmp	r0, #0
   2aeda:	d16f      	bne.n	2afbc <two_way_long_needle+0x130>
   2aedc:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   2aee0:	9300      	str	r3, [sp, #0]
   2aee2:	18f3      	adds	r3, r6, r3
   2aee4:	4682      	mov	sl, r0
   2aee6:	9301      	str	r3, [sp, #4]
   2aee8:	4623      	mov	r3, r4
   2aeea:	4680      	mov	r8, r0
   2aeec:	4654      	mov	r4, sl
   2aeee:	4658      	mov	r0, fp
   2aef0:	469a      	mov	sl, r3
   2aef2:	eb08 070a 	add.w	r7, r8, sl
   2aef6:	1a3a      	subs	r2, r7, r0
   2aef8:	2100      	movs	r1, #0
   2aefa:	4428      	add	r0, r5
   2aefc:	f7d5 f990 	bl	220 <memchr>
   2af00:	2800      	cmp	r0, #0
   2af02:	d156      	bne.n	2afb2 <two_way_long_needle+0x126>
   2af04:	2f00      	cmp	r7, #0
   2af06:	d054      	beq.n	2afb2 <two_way_long_needle+0x126>
   2af08:	19eb      	adds	r3, r5, r7
   2af0a:	aa04      	add	r2, sp, #16
   2af0c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2af10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2af14:	b14b      	cbz	r3, 2af2a <two_way_long_needle+0x9e>
   2af16:	b124      	cbz	r4, 2af22 <two_way_long_needle+0x96>
   2af18:	9a03      	ldr	r2, [sp, #12]
   2af1a:	4293      	cmp	r3, r2
   2af1c:	d201      	bcs.n	2af22 <two_way_long_needle+0x96>
   2af1e:	ebaa 0302 	sub.w	r3, sl, r2
   2af22:	4498      	add	r8, r3
   2af24:	2400      	movs	r4, #0
   2af26:	4638      	mov	r0, r7
   2af28:	e7e3      	b.n	2aef2 <two_way_long_needle+0x66>
   2af2a:	454c      	cmp	r4, r9
   2af2c:	4623      	mov	r3, r4
   2af2e:	f10a 3eff 	add.w	lr, sl, #4294967295	; 0xffffffff
   2af32:	bf38      	it	cc
   2af34:	464b      	movcc	r3, r9
   2af36:	4573      	cmp	r3, lr
   2af38:	d213      	bcs.n	2af62 <two_way_long_needle+0xd6>
   2af3a:	eb08 0203 	add.w	r2, r8, r3
   2af3e:	f816 c003 	ldrb.w	ip, [r6, r3]
   2af42:	5ca8      	ldrb	r0, [r5, r2]
   2af44:	4584      	cmp	ip, r0
   2af46:	442a      	add	r2, r5
   2af48:	eb06 0103 	add.w	r1, r6, r3
   2af4c:	d006      	beq.n	2af5c <two_way_long_needle+0xd0>
   2af4e:	e02c      	b.n	2afaa <two_way_long_needle+0x11e>
   2af50:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   2af54:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2af58:	4584      	cmp	ip, r0
   2af5a:	d126      	bne.n	2afaa <two_way_long_needle+0x11e>
   2af5c:	3301      	adds	r3, #1
   2af5e:	4573      	cmp	r3, lr
   2af60:	d3f6      	bcc.n	2af50 <two_way_long_needle+0xc4>
   2af62:	454c      	cmp	r4, r9
   2af64:	9900      	ldr	r1, [sp, #0]
   2af66:	f080 8089 	bcs.w	2b07c <two_way_long_needle+0x1f0>
   2af6a:	9b00      	ldr	r3, [sp, #0]
   2af6c:	eb08 0203 	add.w	r2, r8, r3
   2af70:	9b01      	ldr	r3, [sp, #4]
   2af72:	5ca8      	ldrb	r0, [r5, r2]
   2af74:	781b      	ldrb	r3, [r3, #0]
   2af76:	4298      	cmp	r0, r3
   2af78:	442a      	add	r2, r5
   2af7a:	d17f      	bne.n	2b07c <two_way_long_needle+0x1f0>
   2af7c:	9801      	ldr	r0, [sp, #4]
   2af7e:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   2af82:	e006      	b.n	2af92 <two_way_long_needle+0x106>
   2af84:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2af88:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2af8c:	45f4      	cmp	ip, lr
   2af8e:	d103      	bne.n	2af98 <two_way_long_needle+0x10c>
   2af90:	4619      	mov	r1, r3
   2af92:	1e4b      	subs	r3, r1, #1
   2af94:	459b      	cmp	fp, r3
   2af96:	d1f5      	bne.n	2af84 <two_way_long_needle+0xf8>
   2af98:	3401      	adds	r4, #1
   2af9a:	428c      	cmp	r4, r1
   2af9c:	d870      	bhi.n	2b080 <two_way_long_needle+0x1f4>
   2af9e:	9c03      	ldr	r4, [sp, #12]
   2afa0:	4638      	mov	r0, r7
   2afa2:	44a0      	add	r8, r4
   2afa4:	ebaa 0404 	sub.w	r4, sl, r4
   2afa8:	e7a3      	b.n	2aef2 <two_way_long_needle+0x66>
   2afaa:	f1c9 0201 	rsb	r2, r9, #1
   2afae:	4490      	add	r8, r2
   2afb0:	e7b7      	b.n	2af22 <two_way_long_needle+0x96>
   2afb2:	2000      	movs	r0, #0
   2afb4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2afb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2afbc:	eba4 0309 	sub.w	r3, r4, r9
   2afc0:	454b      	cmp	r3, r9
   2afc2:	bf38      	it	cc
   2afc4:	464b      	movcc	r3, r9
   2afc6:	3301      	adds	r3, #1
   2afc8:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   2afcc:	9303      	str	r3, [sp, #12]
   2afce:	eb06 0308 	add.w	r3, r6, r8
   2afd2:	4658      	mov	r0, fp
   2afd4:	f04f 0a00 	mov.w	sl, #0
   2afd8:	46cb      	mov	fp, r9
   2afda:	4699      	mov	r9, r3
   2afdc:	eb0a 0704 	add.w	r7, sl, r4
   2afe0:	1a3a      	subs	r2, r7, r0
   2afe2:	2100      	movs	r1, #0
   2afe4:	4428      	add	r0, r5
   2afe6:	f7d5 f91b 	bl	220 <memchr>
   2afea:	2800      	cmp	r0, #0
   2afec:	d1e1      	bne.n	2afb2 <two_way_long_needle+0x126>
   2afee:	2f00      	cmp	r7, #0
   2aff0:	d0df      	beq.n	2afb2 <two_way_long_needle+0x126>
   2aff2:	19eb      	adds	r3, r5, r7
   2aff4:	aa04      	add	r2, sp, #16
   2aff6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2affa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2affe:	bba3      	cbnz	r3, 2b06a <two_way_long_needle+0x1de>
   2b000:	1e61      	subs	r1, r4, #1
   2b002:	458b      	cmp	fp, r1
   2b004:	d215      	bcs.n	2b032 <two_way_long_needle+0x1a6>
   2b006:	eb0a 020b 	add.w	r2, sl, fp
   2b00a:	f816 300b 	ldrb.w	r3, [r6, fp]
   2b00e:	f815 e002 	ldrb.w	lr, [r5, r2]
   2b012:	459e      	cmp	lr, r3
   2b014:	442a      	add	r2, r5
   2b016:	eb06 000b 	add.w	r0, r6, fp
   2b01a:	465b      	mov	r3, fp
   2b01c:	d006      	beq.n	2b02c <two_way_long_needle+0x1a0>
   2b01e:	e027      	b.n	2b070 <two_way_long_needle+0x1e4>
   2b020:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   2b024:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   2b028:	45f4      	cmp	ip, lr
   2b02a:	d121      	bne.n	2b070 <two_way_long_needle+0x1e4>
   2b02c:	3301      	adds	r3, #1
   2b02e:	428b      	cmp	r3, r1
   2b030:	d3f6      	bcc.n	2b020 <two_way_long_needle+0x194>
   2b032:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2b036:	d011      	beq.n	2b05c <two_way_long_needle+0x1d0>
   2b038:	eb0a 0208 	add.w	r2, sl, r8
   2b03c:	f899 1000 	ldrb.w	r1, [r9]
   2b040:	5cab      	ldrb	r3, [r5, r2]
   2b042:	4299      	cmp	r1, r3
   2b044:	442a      	add	r2, r5
   2b046:	d10f      	bne.n	2b068 <two_way_long_needle+0x1dc>
   2b048:	464b      	mov	r3, r9
   2b04a:	e005      	b.n	2b058 <two_way_long_needle+0x1cc>
   2b04c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2b050:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2b054:	4288      	cmp	r0, r1
   2b056:	d107      	bne.n	2b068 <two_way_long_needle+0x1dc>
   2b058:	42b3      	cmp	r3, r6
   2b05a:	d1f7      	bne.n	2b04c <two_way_long_needle+0x1c0>
   2b05c:	eb05 000a 	add.w	r0, r5, sl
   2b060:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2b064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b068:	9b03      	ldr	r3, [sp, #12]
   2b06a:	449a      	add	sl, r3
   2b06c:	4638      	mov	r0, r7
   2b06e:	e7b5      	b.n	2afdc <two_way_long_needle+0x150>
   2b070:	f1cb 0201 	rsb	r2, fp, #1
   2b074:	4492      	add	sl, r2
   2b076:	449a      	add	sl, r3
   2b078:	4638      	mov	r0, r7
   2b07a:	e7af      	b.n	2afdc <two_way_long_needle+0x150>
   2b07c:	4649      	mov	r1, r9
   2b07e:	e78b      	b.n	2af98 <two_way_long_needle+0x10c>
   2b080:	eb05 0008 	add.w	r0, r5, r8
   2b084:	e796      	b.n	2afb4 <two_way_long_needle+0x128>
   2b086:	bf00      	nop

0002b088 <strstr>:
   2b088:	7802      	ldrb	r2, [r0, #0]
   2b08a:	2a00      	cmp	r2, #0
   2b08c:	f000 8101 	beq.w	2b292 <strstr+0x20a>
   2b090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b094:	f891 8000 	ldrb.w	r8, [r1]
   2b098:	b085      	sub	sp, #20
   2b09a:	4644      	mov	r4, r8
   2b09c:	f1b8 0f00 	cmp.w	r8, #0
   2b0a0:	d016      	beq.n	2b0d0 <strstr+0x48>
   2b0a2:	4686      	mov	lr, r0
   2b0a4:	f101 0c01 	add.w	ip, r1, #1
   2b0a8:	2701      	movs	r7, #1
   2b0aa:	e003      	b.n	2b0b4 <strstr+0x2c>
   2b0ac:	f813 4b01 	ldrb.w	r4, [r3], #1
   2b0b0:	b16c      	cbz	r4, 2b0ce <strstr+0x46>
   2b0b2:	469c      	mov	ip, r3
   2b0b4:	42a2      	cmp	r2, r4
   2b0b6:	bf14      	ite	ne
   2b0b8:	2700      	movne	r7, #0
   2b0ba:	f007 0701 	andeq.w	r7, r7, #1
   2b0be:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
   2b0c2:	4663      	mov	r3, ip
   2b0c4:	2a00      	cmp	r2, #0
   2b0c6:	d1f1      	bne.n	2b0ac <strstr+0x24>
   2b0c8:	f89c 3000 	ldrb.w	r3, [ip]
   2b0cc:	b9fb      	cbnz	r3, 2b10e <strstr+0x86>
   2b0ce:	b117      	cbz	r7, 2b0d6 <strstr+0x4e>
   2b0d0:	b005      	add	sp, #20
   2b0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0d6:	460e      	mov	r6, r1
   2b0d8:	4605      	mov	r5, r0
   2b0da:	4641      	mov	r1, r8
   2b0dc:	3001      	adds	r0, #1
   2b0de:	ebac 0406 	sub.w	r4, ip, r6
   2b0e2:	f7ff fd11 	bl	2ab08 <strchr>
   2b0e6:	4607      	mov	r7, r0
   2b0e8:	b188      	cbz	r0, 2b10e <strstr+0x86>
   2b0ea:	2c01      	cmp	r4, #1
   2b0ec:	d0f0      	beq.n	2b0d0 <strstr+0x48>
   2b0ee:	1928      	adds	r0, r5, r4
   2b0f0:	4287      	cmp	r7, r0
   2b0f2:	bf94      	ite	ls
   2b0f4:	1bc1      	subls	r1, r0, r7
   2b0f6:	2101      	movhi	r1, #1
   2b0f8:	2c1f      	cmp	r4, #31
   2b0fa:	468b      	mov	fp, r1
   2b0fc:	d90b      	bls.n	2b116 <strstr+0x8e>
   2b0fe:	4623      	mov	r3, r4
   2b100:	4632      	mov	r2, r6
   2b102:	4638      	mov	r0, r7
   2b104:	f7ff fec2 	bl	2ae8c <two_way_long_needle>
   2b108:	b005      	add	sp, #20
   2b10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b10e:	2000      	movs	r0, #0
   2b110:	b005      	add	sp, #20
   2b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b116:	aa03      	add	r2, sp, #12
   2b118:	4621      	mov	r1, r4
   2b11a:	4630      	mov	r0, r6
   2b11c:	f7ff fe5c 	bl	2add8 <critical_factorization>
   2b120:	9903      	ldr	r1, [sp, #12]
   2b122:	4680      	mov	r8, r0
   2b124:	4602      	mov	r2, r0
   2b126:	4431      	add	r1, r6
   2b128:	4630      	mov	r0, r6
   2b12a:	f7ff fb61 	bl	2a7f0 <memcmp>
   2b12e:	2800      	cmp	r0, #0
   2b130:	d157      	bne.n	2b1e2 <strstr+0x15a>
   2b132:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2b136:	9300      	str	r3, [sp, #0]
   2b138:	18f3      	adds	r3, r6, r3
   2b13a:	4681      	mov	r9, r0
   2b13c:	4605      	mov	r5, r0
   2b13e:	9301      	str	r3, [sp, #4]
   2b140:	4658      	mov	r0, fp
   2b142:	46b2      	mov	sl, r6
   2b144:	1966      	adds	r6, r4, r5
   2b146:	1a32      	subs	r2, r6, r0
   2b148:	2100      	movs	r1, #0
   2b14a:	4438      	add	r0, r7
   2b14c:	f7d5 f868 	bl	220 <memchr>
   2b150:	2800      	cmp	r0, #0
   2b152:	d1dc      	bne.n	2b10e <strstr+0x86>
   2b154:	2e00      	cmp	r6, #0
   2b156:	d0da      	beq.n	2b10e <strstr+0x86>
   2b158:	45c8      	cmp	r8, r9
   2b15a:	4643      	mov	r3, r8
   2b15c:	bf38      	it	cc
   2b15e:	464b      	movcc	r3, r9
   2b160:	429c      	cmp	r4, r3
   2b162:	d912      	bls.n	2b18a <strstr+0x102>
   2b164:	195a      	adds	r2, r3, r5
   2b166:	f81a 1003 	ldrb.w	r1, [sl, r3]
   2b16a:	5cb8      	ldrb	r0, [r7, r2]
   2b16c:	4281      	cmp	r1, r0
   2b16e:	443a      	add	r2, r7
   2b170:	eb0a 0e03 	add.w	lr, sl, r3
   2b174:	d006      	beq.n	2b184 <strstr+0xfc>
   2b176:	e02c      	b.n	2b1d2 <strstr+0x14a>
   2b178:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   2b17c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2b180:	4288      	cmp	r0, r1
   2b182:	d126      	bne.n	2b1d2 <strstr+0x14a>
   2b184:	3301      	adds	r3, #1
   2b186:	429c      	cmp	r4, r3
   2b188:	d1f6      	bne.n	2b178 <strstr+0xf0>
   2b18a:	45c8      	cmp	r8, r9
   2b18c:	9900      	ldr	r1, [sp, #0]
   2b18e:	f240 8083 	bls.w	2b298 <strstr+0x210>
   2b192:	9b00      	ldr	r3, [sp, #0]
   2b194:	18ea      	adds	r2, r5, r3
   2b196:	9b01      	ldr	r3, [sp, #4]
   2b198:	5cb8      	ldrb	r0, [r7, r2]
   2b19a:	781b      	ldrb	r3, [r3, #0]
   2b19c:	4298      	cmp	r0, r3
   2b19e:	443a      	add	r2, r7
   2b1a0:	d17a      	bne.n	2b298 <strstr+0x210>
   2b1a2:	9801      	ldr	r0, [sp, #4]
   2b1a4:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   2b1a8:	e006      	b.n	2b1b8 <strstr+0x130>
   2b1aa:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2b1ae:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2b1b2:	45f4      	cmp	ip, lr
   2b1b4:	d103      	bne.n	2b1be <strstr+0x136>
   2b1b6:	4619      	mov	r1, r3
   2b1b8:	1e4b      	subs	r3, r1, #1
   2b1ba:	455b      	cmp	r3, fp
   2b1bc:	d1f5      	bne.n	2b1aa <strstr+0x122>
   2b1be:	f109 0901 	add.w	r9, r9, #1
   2b1c2:	4589      	cmp	r9, r1
   2b1c4:	d857      	bhi.n	2b276 <strstr+0x1ee>
   2b1c6:	9b03      	ldr	r3, [sp, #12]
   2b1c8:	4630      	mov	r0, r6
   2b1ca:	441d      	add	r5, r3
   2b1cc:	eba4 0903 	sub.w	r9, r4, r3
   2b1d0:	e7b8      	b.n	2b144 <strstr+0xbc>
   2b1d2:	f1c8 0201 	rsb	r2, r8, #1
   2b1d6:	4415      	add	r5, r2
   2b1d8:	441d      	add	r5, r3
   2b1da:	f04f 0900 	mov.w	r9, #0
   2b1de:	4630      	mov	r0, r6
   2b1e0:	e7b0      	b.n	2b144 <strstr+0xbc>
   2b1e2:	eba4 0308 	sub.w	r3, r4, r8
   2b1e6:	4543      	cmp	r3, r8
   2b1e8:	bf38      	it	cc
   2b1ea:	4643      	movcc	r3, r8
   2b1ec:	3301      	adds	r3, #1
   2b1ee:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
   2b1f2:	9303      	str	r3, [sp, #12]
   2b1f4:	eb06 0309 	add.w	r3, r6, r9
   2b1f8:	4658      	mov	r0, fp
   2b1fa:	2500      	movs	r5, #0
   2b1fc:	46bb      	mov	fp, r7
   2b1fe:	469a      	mov	sl, r3
   2b200:	1967      	adds	r7, r4, r5
   2b202:	1a3a      	subs	r2, r7, r0
   2b204:	2100      	movs	r1, #0
   2b206:	4458      	add	r0, fp
   2b208:	f7d5 f80a 	bl	220 <memchr>
   2b20c:	2800      	cmp	r0, #0
   2b20e:	f47f af7e 	bne.w	2b10e <strstr+0x86>
   2b212:	2f00      	cmp	r7, #0
   2b214:	f43f af7b 	beq.w	2b10e <strstr+0x86>
   2b218:	4544      	cmp	r4, r8
   2b21a:	d915      	bls.n	2b248 <strstr+0x1c0>
   2b21c:	eb08 0205 	add.w	r2, r8, r5
   2b220:	f816 3008 	ldrb.w	r3, [r6, r8]
   2b224:	f81b 0002 	ldrb.w	r0, [fp, r2]
   2b228:	4298      	cmp	r0, r3
   2b22a:	445a      	add	r2, fp
   2b22c:	eb06 0108 	add.w	r1, r6, r8
   2b230:	4643      	mov	r3, r8
   2b232:	d006      	beq.n	2b242 <strstr+0x1ba>
   2b234:	e023      	b.n	2b27e <strstr+0x1f6>
   2b236:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   2b23a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2b23e:	4586      	cmp	lr, r0
   2b240:	d11d      	bne.n	2b27e <strstr+0x1f6>
   2b242:	3301      	adds	r3, #1
   2b244:	429c      	cmp	r4, r3
   2b246:	d1f6      	bne.n	2b236 <strstr+0x1ae>
   2b248:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2b24c:	d012      	beq.n	2b274 <strstr+0x1ec>
   2b24e:	eb05 0209 	add.w	r2, r5, r9
   2b252:	f89a 3000 	ldrb.w	r3, [sl]
   2b256:	f81b 1002 	ldrb.w	r1, [fp, r2]
   2b25a:	4299      	cmp	r1, r3
   2b25c:	445a      	add	r2, fp
   2b25e:	d114      	bne.n	2b28a <strstr+0x202>
   2b260:	4653      	mov	r3, sl
   2b262:	e005      	b.n	2b270 <strstr+0x1e8>
   2b264:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2b268:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2b26c:	4288      	cmp	r0, r1
   2b26e:	d10c      	bne.n	2b28a <strstr+0x202>
   2b270:	42b3      	cmp	r3, r6
   2b272:	d1f7      	bne.n	2b264 <strstr+0x1dc>
   2b274:	465f      	mov	r7, fp
   2b276:	1978      	adds	r0, r7, r5
   2b278:	b005      	add	sp, #20
   2b27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b27e:	f1c8 0201 	rsb	r2, r8, #1
   2b282:	4415      	add	r5, r2
   2b284:	441d      	add	r5, r3
   2b286:	4638      	mov	r0, r7
   2b288:	e7ba      	b.n	2b200 <strstr+0x178>
   2b28a:	9b03      	ldr	r3, [sp, #12]
   2b28c:	4638      	mov	r0, r7
   2b28e:	441d      	add	r5, r3
   2b290:	e7b6      	b.n	2b200 <strstr+0x178>
   2b292:	780b      	ldrb	r3, [r1, #0]
   2b294:	b913      	cbnz	r3, 2b29c <strstr+0x214>
   2b296:	4770      	bx	lr
   2b298:	4641      	mov	r1, r8
   2b29a:	e790      	b.n	2b1be <strstr+0x136>
   2b29c:	2000      	movs	r0, #0
   2b29e:	4770      	bx	lr

0002b2a0 <_strtol_l.isra.0>:
   2b2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b2a4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2b2a8:	460f      	mov	r7, r1
   2b2aa:	4680      	mov	r8, r0
   2b2ac:	4616      	mov	r6, r2
   2b2ae:	461d      	mov	r5, r3
   2b2b0:	468a      	mov	sl, r1
   2b2b2:	e000      	b.n	2b2b6 <_strtol_l.isra.0+0x16>
   2b2b4:	46a2      	mov	sl, r4
   2b2b6:	4654      	mov	r4, sl
   2b2b8:	4648      	mov	r0, r9
   2b2ba:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b2be:	f7fe ffbf 	bl	2a240 <__locale_ctype_ptr_l>
   2b2c2:	4458      	add	r0, fp
   2b2c4:	7842      	ldrb	r2, [r0, #1]
   2b2c6:	f012 0208 	ands.w	r2, r2, #8
   2b2ca:	d1f3      	bne.n	2b2b4 <_strtol_l.isra.0+0x14>
   2b2cc:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   2b2d0:	d04f      	beq.n	2b372 <_strtol_l.isra.0+0xd2>
   2b2d2:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   2b2d6:	bf04      	itt	eq
   2b2d8:	f894 b000 	ldrbeq.w	fp, [r4]
   2b2dc:	f10a 0402 	addeq.w	r4, sl, #2
   2b2e0:	b11d      	cbz	r5, 2b2ea <_strtol_l.isra.0+0x4a>
   2b2e2:	2d10      	cmp	r5, #16
   2b2e4:	d056      	beq.n	2b394 <_strtol_l.isra.0+0xf4>
   2b2e6:	46ac      	mov	ip, r5
   2b2e8:	e004      	b.n	2b2f4 <_strtol_l.isra.0+0x54>
   2b2ea:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2b2ee:	d060      	beq.n	2b3b2 <_strtol_l.isra.0+0x112>
   2b2f0:	250a      	movs	r5, #10
   2b2f2:	46ac      	mov	ip, r5
   2b2f4:	2a00      	cmp	r2, #0
   2b2f6:	bf0c      	ite	eq
   2b2f8:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   2b2fc:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   2b300:	2100      	movs	r1, #0
   2b302:	fbb9 fefc 	udiv	lr, r9, ip
   2b306:	4608      	mov	r0, r1
   2b308:	fb0c 9a1e 	mls	sl, ip, lr, r9
   2b30c:	e005      	b.n	2b31a <_strtol_l.isra.0+0x7a>
   2b30e:	d029      	beq.n	2b364 <_strtol_l.isra.0+0xc4>
   2b310:	fb0c 3000 	mla	r0, ip, r0, r3
   2b314:	2101      	movs	r1, #1
   2b316:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b31a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   2b31e:	2b09      	cmp	r3, #9
   2b320:	d905      	bls.n	2b32e <_strtol_l.isra.0+0x8e>
   2b322:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   2b326:	2b19      	cmp	r3, #25
   2b328:	d80b      	bhi.n	2b342 <_strtol_l.isra.0+0xa2>
   2b32a:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   2b32e:	429d      	cmp	r5, r3
   2b330:	dd0f      	ble.n	2b352 <_strtol_l.isra.0+0xb2>
   2b332:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2b336:	d0ee      	beq.n	2b316 <_strtol_l.isra.0+0x76>
   2b338:	4586      	cmp	lr, r0
   2b33a:	d2e8      	bcs.n	2b30e <_strtol_l.isra.0+0x6e>
   2b33c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b340:	e7e9      	b.n	2b316 <_strtol_l.isra.0+0x76>
   2b342:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   2b346:	2b19      	cmp	r3, #25
   2b348:	d803      	bhi.n	2b352 <_strtol_l.isra.0+0xb2>
   2b34a:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   2b34e:	429d      	cmp	r5, r3
   2b350:	dcef      	bgt.n	2b332 <_strtol_l.isra.0+0x92>
   2b352:	1c4b      	adds	r3, r1, #1
   2b354:	d013      	beq.n	2b37e <_strtol_l.isra.0+0xde>
   2b356:	b102      	cbz	r2, 2b35a <_strtol_l.isra.0+0xba>
   2b358:	4240      	negs	r0, r0
   2b35a:	b146      	cbz	r6, 2b36e <_strtol_l.isra.0+0xce>
   2b35c:	b9c1      	cbnz	r1, 2b390 <_strtol_l.isra.0+0xf0>
   2b35e:	6037      	str	r7, [r6, #0]
   2b360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b364:	459a      	cmp	sl, r3
   2b366:	dad3      	bge.n	2b310 <_strtol_l.isra.0+0x70>
   2b368:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b36c:	e7d3      	b.n	2b316 <_strtol_l.isra.0+0x76>
   2b36e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b372:	f894 b000 	ldrb.w	fp, [r4]
   2b376:	2201      	movs	r2, #1
   2b378:	f10a 0402 	add.w	r4, sl, #2
   2b37c:	e7b0      	b.n	2b2e0 <_strtol_l.isra.0+0x40>
   2b37e:	2322      	movs	r3, #34	; 0x22
   2b380:	f8c8 3000 	str.w	r3, [r8]
   2b384:	b1ee      	cbz	r6, 2b3c2 <_strtol_l.isra.0+0x122>
   2b386:	1e67      	subs	r7, r4, #1
   2b388:	4648      	mov	r0, r9
   2b38a:	6037      	str	r7, [r6, #0]
   2b38c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b390:	4681      	mov	r9, r0
   2b392:	e7f8      	b.n	2b386 <_strtol_l.isra.0+0xe6>
   2b394:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2b398:	d1a5      	bne.n	2b2e6 <_strtol_l.isra.0+0x46>
   2b39a:	7823      	ldrb	r3, [r4, #0]
   2b39c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b3a0:	2b58      	cmp	r3, #88	; 0x58
   2b3a2:	d1a0      	bne.n	2b2e6 <_strtol_l.isra.0+0x46>
   2b3a4:	f04f 0c10 	mov.w	ip, #16
   2b3a8:	f894 b001 	ldrb.w	fp, [r4, #1]
   2b3ac:	4665      	mov	r5, ip
   2b3ae:	3402      	adds	r4, #2
   2b3b0:	e7a0      	b.n	2b2f4 <_strtol_l.isra.0+0x54>
   2b3b2:	7823      	ldrb	r3, [r4, #0]
   2b3b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b3b8:	2b58      	cmp	r3, #88	; 0x58
   2b3ba:	d0f3      	beq.n	2b3a4 <_strtol_l.isra.0+0x104>
   2b3bc:	2508      	movs	r5, #8
   2b3be:	46ac      	mov	ip, r5
   2b3c0:	e798      	b.n	2b2f4 <_strtol_l.isra.0+0x54>
   2b3c2:	4648      	mov	r0, r9
   2b3c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b3c8 <strtol>:
   2b3c8:	b530      	push	{r4, r5, lr}
   2b3ca:	4c08      	ldr	r4, [pc, #32]	; (2b3ec <strtol+0x24>)
   2b3cc:	4b08      	ldr	r3, [pc, #32]	; (2b3f0 <strtol+0x28>)
   2b3ce:	6825      	ldr	r5, [r4, #0]
   2b3d0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2b3d2:	b083      	sub	sp, #12
   2b3d4:	2c00      	cmp	r4, #0
   2b3d6:	bf08      	it	eq
   2b3d8:	461c      	moveq	r4, r3
   2b3da:	9400      	str	r4, [sp, #0]
   2b3dc:	4613      	mov	r3, r2
   2b3de:	460a      	mov	r2, r1
   2b3e0:	4601      	mov	r1, r0
   2b3e2:	4628      	mov	r0, r5
   2b3e4:	f7ff ff5c 	bl	2b2a0 <_strtol_l.isra.0>
   2b3e8:	b003      	add	sp, #12
   2b3ea:	bd30      	pop	{r4, r5, pc}
   2b3ec:	2000c688 	.word	0x2000c688
   2b3f0:	2000cab8 	.word	0x2000cab8

0002b3f4 <_strtoul_l.isra.0>:
   2b3f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3f8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2b3fc:	460e      	mov	r6, r1
   2b3fe:	4607      	mov	r7, r0
   2b400:	4615      	mov	r5, r2
   2b402:	4698      	mov	r8, r3
   2b404:	468a      	mov	sl, r1
   2b406:	e000      	b.n	2b40a <_strtoul_l.isra.0+0x16>
   2b408:	46a2      	mov	sl, r4
   2b40a:	4654      	mov	r4, sl
   2b40c:	4648      	mov	r0, r9
   2b40e:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b412:	f7fe ff15 	bl	2a240 <__locale_ctype_ptr_l>
   2b416:	4458      	add	r0, fp
   2b418:	7840      	ldrb	r0, [r0, #1]
   2b41a:	f010 0008 	ands.w	r0, r0, #8
   2b41e:	d1f3      	bne.n	2b408 <_strtoul_l.isra.0+0x14>
   2b420:	4659      	mov	r1, fp
   2b422:	292d      	cmp	r1, #45	; 0x2d
   2b424:	d059      	beq.n	2b4da <_strtoul_l.isra.0+0xe6>
   2b426:	292b      	cmp	r1, #43	; 0x2b
   2b428:	bf04      	itt	eq
   2b42a:	7821      	ldrbeq	r1, [r4, #0]
   2b42c:	f10a 0402 	addeq.w	r4, sl, #2
   2b430:	f1b8 0f00 	cmp.w	r8, #0
   2b434:	d00c      	beq.n	2b450 <_strtoul_l.isra.0+0x5c>
   2b436:	f1b8 0f10 	cmp.w	r8, #16
   2b43a:	d053      	beq.n	2b4e4 <_strtoul_l.isra.0+0xf0>
   2b43c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2b440:	fbbc fcf8 	udiv	ip, ip, r8
   2b444:	fb08 fa0c 	mul.w	sl, r8, ip
   2b448:	ea6f 0a0a 	mvn.w	sl, sl
   2b44c:	46c1      	mov	r9, r8
   2b44e:	e008      	b.n	2b462 <_strtoul_l.isra.0+0x6e>
   2b450:	2930      	cmp	r1, #48	; 0x30
   2b452:	d058      	beq.n	2b506 <_strtoul_l.isra.0+0x112>
   2b454:	f04f 080a 	mov.w	r8, #10
   2b458:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 2b538 <_strtoul_l.isra.0+0x144>
   2b45c:	46c1      	mov	r9, r8
   2b45e:	f04f 0a05 	mov.w	sl, #5
   2b462:	2300      	movs	r3, #0
   2b464:	469e      	mov	lr, r3
   2b466:	e005      	b.n	2b474 <_strtoul_l.isra.0+0x80>
   2b468:	d02a      	beq.n	2b4c0 <_strtoul_l.isra.0+0xcc>
   2b46a:	fb09 2e0e 	mla	lr, r9, lr, r2
   2b46e:	2301      	movs	r3, #1
   2b470:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b474:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   2b478:	2a09      	cmp	r2, #9
   2b47a:	d905      	bls.n	2b488 <_strtoul_l.isra.0+0x94>
   2b47c:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   2b480:	2a19      	cmp	r2, #25
   2b482:	d80a      	bhi.n	2b49a <_strtoul_l.isra.0+0xa6>
   2b484:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   2b488:	4590      	cmp	r8, r2
   2b48a:	dd0e      	ble.n	2b4aa <_strtoul_l.isra.0+0xb6>
   2b48c:	2b00      	cmp	r3, #0
   2b48e:	db01      	blt.n	2b494 <_strtoul_l.isra.0+0xa0>
   2b490:	45e6      	cmp	lr, ip
   2b492:	d9e9      	bls.n	2b468 <_strtoul_l.isra.0+0x74>
   2b494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b498:	e7ea      	b.n	2b470 <_strtoul_l.isra.0+0x7c>
   2b49a:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   2b49e:	2a19      	cmp	r2, #25
   2b4a0:	d803      	bhi.n	2b4aa <_strtoul_l.isra.0+0xb6>
   2b4a2:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   2b4a6:	4590      	cmp	r8, r2
   2b4a8:	dcf0      	bgt.n	2b48c <_strtoul_l.isra.0+0x98>
   2b4aa:	2b00      	cmp	r3, #0
   2b4ac:	db0d      	blt.n	2b4ca <_strtoul_l.isra.0+0xd6>
   2b4ae:	b108      	cbz	r0, 2b4b4 <_strtoul_l.isra.0+0xc0>
   2b4b0:	f1ce 0e00 	rsb	lr, lr, #0
   2b4b4:	b10d      	cbz	r5, 2b4ba <_strtoul_l.isra.0+0xc6>
   2b4b6:	b973      	cbnz	r3, 2b4d6 <_strtoul_l.isra.0+0xe2>
   2b4b8:	602e      	str	r6, [r5, #0]
   2b4ba:	4670      	mov	r0, lr
   2b4bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b4c0:	4552      	cmp	r2, sl
   2b4c2:	ddd2      	ble.n	2b46a <_strtoul_l.isra.0+0x76>
   2b4c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b4c8:	e7d2      	b.n	2b470 <_strtoul_l.isra.0+0x7c>
   2b4ca:	2322      	movs	r3, #34	; 0x22
   2b4cc:	603b      	str	r3, [r7, #0]
   2b4ce:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   2b4d2:	2d00      	cmp	r5, #0
   2b4d4:	d0f1      	beq.n	2b4ba <_strtoul_l.isra.0+0xc6>
   2b4d6:	1e66      	subs	r6, r4, #1
   2b4d8:	e7ee      	b.n	2b4b8 <_strtoul_l.isra.0+0xc4>
   2b4da:	7821      	ldrb	r1, [r4, #0]
   2b4dc:	2001      	movs	r0, #1
   2b4de:	f10a 0402 	add.w	r4, sl, #2
   2b4e2:	e7a5      	b.n	2b430 <_strtoul_l.isra.0+0x3c>
   2b4e4:	2930      	cmp	r1, #48	; 0x30
   2b4e6:	d11b      	bne.n	2b520 <_strtoul_l.isra.0+0x12c>
   2b4e8:	7823      	ldrb	r3, [r4, #0]
   2b4ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b4ee:	2b58      	cmp	r3, #88	; 0x58
   2b4f0:	d11c      	bne.n	2b52c <_strtoul_l.isra.0+0x138>
   2b4f2:	f04f 0910 	mov.w	r9, #16
   2b4f6:	7861      	ldrb	r1, [r4, #1]
   2b4f8:	46c8      	mov	r8, r9
   2b4fa:	f04f 0a0f 	mov.w	sl, #15
   2b4fe:	3402      	adds	r4, #2
   2b500:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b504:	e7ad      	b.n	2b462 <_strtoul_l.isra.0+0x6e>
   2b506:	7823      	ldrb	r3, [r4, #0]
   2b508:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b50c:	2b58      	cmp	r3, #88	; 0x58
   2b50e:	d0f0      	beq.n	2b4f2 <_strtoul_l.isra.0+0xfe>
   2b510:	f04f 0808 	mov.w	r8, #8
   2b514:	46c1      	mov	r9, r8
   2b516:	f04f 0a07 	mov.w	sl, #7
   2b51a:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   2b51e:	e7a0      	b.n	2b462 <_strtoul_l.isra.0+0x6e>
   2b520:	f04f 0a0f 	mov.w	sl, #15
   2b524:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b528:	46c1      	mov	r9, r8
   2b52a:	e79a      	b.n	2b462 <_strtoul_l.isra.0+0x6e>
   2b52c:	46c1      	mov	r9, r8
   2b52e:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b532:	f04f 0a0f 	mov.w	sl, #15
   2b536:	e794      	b.n	2b462 <_strtoul_l.isra.0+0x6e>
   2b538:	19999999 	.word	0x19999999

0002b53c <strtoul>:
   2b53c:	b530      	push	{r4, r5, lr}
   2b53e:	4c08      	ldr	r4, [pc, #32]	; (2b560 <strtoul+0x24>)
   2b540:	4b08      	ldr	r3, [pc, #32]	; (2b564 <strtoul+0x28>)
   2b542:	6825      	ldr	r5, [r4, #0]
   2b544:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2b546:	b083      	sub	sp, #12
   2b548:	2c00      	cmp	r4, #0
   2b54a:	bf08      	it	eq
   2b54c:	461c      	moveq	r4, r3
   2b54e:	9400      	str	r4, [sp, #0]
   2b550:	4613      	mov	r3, r2
   2b552:	460a      	mov	r2, r1
   2b554:	4601      	mov	r1, r0
   2b556:	4628      	mov	r0, r5
   2b558:	f7ff ff4c 	bl	2b3f4 <_strtoul_l.isra.0>
   2b55c:	b003      	add	sp, #12
   2b55e:	bd30      	pop	{r4, r5, pc}
   2b560:	2000c688 	.word	0x2000c688
   2b564:	2000cab8 	.word	0x2000cab8

0002b568 <_svfprintf_r>:
   2b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b56c:	b0c3      	sub	sp, #268	; 0x10c
   2b56e:	460c      	mov	r4, r1
   2b570:	910b      	str	r1, [sp, #44]	; 0x2c
   2b572:	4692      	mov	sl, r2
   2b574:	930f      	str	r3, [sp, #60]	; 0x3c
   2b576:	900c      	str	r0, [sp, #48]	; 0x30
   2b578:	f002 fb26 	bl	2dbc8 <_localeconv_r>
   2b57c:	6803      	ldr	r3, [r0, #0]
   2b57e:	931a      	str	r3, [sp, #104]	; 0x68
   2b580:	4618      	mov	r0, r3
   2b582:	f7d5 f8bd 	bl	700 <strlen>
   2b586:	89a3      	ldrh	r3, [r4, #12]
   2b588:	9019      	str	r0, [sp, #100]	; 0x64
   2b58a:	0619      	lsls	r1, r3, #24
   2b58c:	d503      	bpl.n	2b596 <_svfprintf_r+0x2e>
   2b58e:	6923      	ldr	r3, [r4, #16]
   2b590:	2b00      	cmp	r3, #0
   2b592:	f001 8003 	beq.w	2c59c <_svfprintf_r+0x1034>
   2b596:	2300      	movs	r3, #0
   2b598:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   2b59c:	9313      	str	r3, [sp, #76]	; 0x4c
   2b59e:	9315      	str	r3, [sp, #84]	; 0x54
   2b5a0:	9314      	str	r3, [sp, #80]	; 0x50
   2b5a2:	9327      	str	r3, [sp, #156]	; 0x9c
   2b5a4:	9326      	str	r3, [sp, #152]	; 0x98
   2b5a6:	9318      	str	r3, [sp, #96]	; 0x60
   2b5a8:	931b      	str	r3, [sp, #108]	; 0x6c
   2b5aa:	9309      	str	r3, [sp, #36]	; 0x24
   2b5ac:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   2b5b0:	46c8      	mov	r8, r9
   2b5b2:	9316      	str	r3, [sp, #88]	; 0x58
   2b5b4:	9317      	str	r3, [sp, #92]	; 0x5c
   2b5b6:	f89a 3000 	ldrb.w	r3, [sl]
   2b5ba:	4654      	mov	r4, sl
   2b5bc:	b1e3      	cbz	r3, 2b5f8 <_svfprintf_r+0x90>
   2b5be:	2b25      	cmp	r3, #37	; 0x25
   2b5c0:	d102      	bne.n	2b5c8 <_svfprintf_r+0x60>
   2b5c2:	e019      	b.n	2b5f8 <_svfprintf_r+0x90>
   2b5c4:	2b25      	cmp	r3, #37	; 0x25
   2b5c6:	d003      	beq.n	2b5d0 <_svfprintf_r+0x68>
   2b5c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2b5cc:	2b00      	cmp	r3, #0
   2b5ce:	d1f9      	bne.n	2b5c4 <_svfprintf_r+0x5c>
   2b5d0:	eba4 050a 	sub.w	r5, r4, sl
   2b5d4:	b185      	cbz	r5, 2b5f8 <_svfprintf_r+0x90>
   2b5d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b5d8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2b5da:	f8c8 a000 	str.w	sl, [r8]
   2b5de:	3301      	adds	r3, #1
   2b5e0:	442a      	add	r2, r5
   2b5e2:	2b07      	cmp	r3, #7
   2b5e4:	f8c8 5004 	str.w	r5, [r8, #4]
   2b5e8:	9227      	str	r2, [sp, #156]	; 0x9c
   2b5ea:	9326      	str	r3, [sp, #152]	; 0x98
   2b5ec:	dc7f      	bgt.n	2b6ee <_svfprintf_r+0x186>
   2b5ee:	f108 0808 	add.w	r8, r8, #8
   2b5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b5f4:	442b      	add	r3, r5
   2b5f6:	9309      	str	r3, [sp, #36]	; 0x24
   2b5f8:	7823      	ldrb	r3, [r4, #0]
   2b5fa:	2b00      	cmp	r3, #0
   2b5fc:	d07f      	beq.n	2b6fe <_svfprintf_r+0x196>
   2b5fe:	2300      	movs	r3, #0
   2b600:	461a      	mov	r2, r3
   2b602:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2b606:	4619      	mov	r1, r3
   2b608:	930d      	str	r3, [sp, #52]	; 0x34
   2b60a:	469b      	mov	fp, r3
   2b60c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b610:	7863      	ldrb	r3, [r4, #1]
   2b612:	900a      	str	r0, [sp, #40]	; 0x28
   2b614:	f104 0a01 	add.w	sl, r4, #1
   2b618:	f10a 0a01 	add.w	sl, sl, #1
   2b61c:	f1a3 0020 	sub.w	r0, r3, #32
   2b620:	2858      	cmp	r0, #88	; 0x58
   2b622:	f200 83c1 	bhi.w	2bda8 <_svfprintf_r+0x840>
   2b626:	e8df f010 	tbh	[pc, r0, lsl #1]
   2b62a:	0238      	.short	0x0238
   2b62c:	03bf03bf 	.word	0x03bf03bf
   2b630:	03bf0240 	.word	0x03bf0240
   2b634:	03bf03bf 	.word	0x03bf03bf
   2b638:	03bf03bf 	.word	0x03bf03bf
   2b63c:	024503bf 	.word	0x024503bf
   2b640:	03bf0203 	.word	0x03bf0203
   2b644:	026b005d 	.word	0x026b005d
   2b648:	028603bf 	.word	0x028603bf
   2b64c:	039d039d 	.word	0x039d039d
   2b650:	039d039d 	.word	0x039d039d
   2b654:	039d039d 	.word	0x039d039d
   2b658:	039d039d 	.word	0x039d039d
   2b65c:	03bf039d 	.word	0x03bf039d
   2b660:	03bf03bf 	.word	0x03bf03bf
   2b664:	03bf03bf 	.word	0x03bf03bf
   2b668:	03bf03bf 	.word	0x03bf03bf
   2b66c:	03bf03bf 	.word	0x03bf03bf
   2b670:	033703bf 	.word	0x033703bf
   2b674:	03bf0357 	.word	0x03bf0357
   2b678:	03bf0357 	.word	0x03bf0357
   2b67c:	03bf03bf 	.word	0x03bf03bf
   2b680:	039803bf 	.word	0x039803bf
   2b684:	03bf03bf 	.word	0x03bf03bf
   2b688:	03bf03ad 	.word	0x03bf03ad
   2b68c:	03bf03bf 	.word	0x03bf03bf
   2b690:	03bf03bf 	.word	0x03bf03bf
   2b694:	03bf0259 	.word	0x03bf0259
   2b698:	031e03bf 	.word	0x031e03bf
   2b69c:	03bf03bf 	.word	0x03bf03bf
   2b6a0:	03bf03bf 	.word	0x03bf03bf
   2b6a4:	03bf03bf 	.word	0x03bf03bf
   2b6a8:	03bf03bf 	.word	0x03bf03bf
   2b6ac:	03bf03bf 	.word	0x03bf03bf
   2b6b0:	02db02c6 	.word	0x02db02c6
   2b6b4:	03570357 	.word	0x03570357
   2b6b8:	028b0357 	.word	0x028b0357
   2b6bc:	03bf02db 	.word	0x03bf02db
   2b6c0:	029003bf 	.word	0x029003bf
   2b6c4:	029d03bf 	.word	0x029d03bf
   2b6c8:	02b401cc 	.word	0x02b401cc
   2b6cc:	03bf0208 	.word	0x03bf0208
   2b6d0:	03bf01e1 	.word	0x03bf01e1
   2b6d4:	03bf007e 	.word	0x03bf007e
   2b6d8:	020d03bf 	.word	0x020d03bf
   2b6dc:	980d      	ldr	r0, [sp, #52]	; 0x34
   2b6de:	930f      	str	r3, [sp, #60]	; 0x3c
   2b6e0:	4240      	negs	r0, r0
   2b6e2:	900d      	str	r0, [sp, #52]	; 0x34
   2b6e4:	f04b 0b04 	orr.w	fp, fp, #4
   2b6e8:	f89a 3000 	ldrb.w	r3, [sl]
   2b6ec:	e794      	b.n	2b618 <_svfprintf_r+0xb0>
   2b6ee:	aa25      	add	r2, sp, #148	; 0x94
   2b6f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b6f2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b6f4:	f002 fd74 	bl	2e1e0 <__ssprint_r>
   2b6f8:	b940      	cbnz	r0, 2b70c <_svfprintf_r+0x1a4>
   2b6fa:	46c8      	mov	r8, r9
   2b6fc:	e779      	b.n	2b5f2 <_svfprintf_r+0x8a>
   2b6fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2b700:	b123      	cbz	r3, 2b70c <_svfprintf_r+0x1a4>
   2b702:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b704:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b706:	aa25      	add	r2, sp, #148	; 0x94
   2b708:	f002 fd6a 	bl	2e1e0 <__ssprint_r>
   2b70c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b70e:	899b      	ldrh	r3, [r3, #12]
   2b710:	f013 0f40 	tst.w	r3, #64	; 0x40
   2b714:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b716:	bf18      	it	ne
   2b718:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2b71c:	9309      	str	r3, [sp, #36]	; 0x24
   2b71e:	9809      	ldr	r0, [sp, #36]	; 0x24
   2b720:	b043      	add	sp, #268	; 0x10c
   2b722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b726:	f01b 0f20 	tst.w	fp, #32
   2b72a:	9311      	str	r3, [sp, #68]	; 0x44
   2b72c:	f040 81dd 	bne.w	2baea <_svfprintf_r+0x582>
   2b730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b732:	f01b 0f10 	tst.w	fp, #16
   2b736:	4613      	mov	r3, r2
   2b738:	f040 856e 	bne.w	2c218 <_svfprintf_r+0xcb0>
   2b73c:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2b740:	f000 856a 	beq.w	2c218 <_svfprintf_r+0xcb0>
   2b744:	8814      	ldrh	r4, [r2, #0]
   2b746:	3204      	adds	r2, #4
   2b748:	2500      	movs	r5, #0
   2b74a:	2301      	movs	r3, #1
   2b74c:	920f      	str	r2, [sp, #60]	; 0x3c
   2b74e:	2700      	movs	r7, #0
   2b750:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2b754:	990a      	ldr	r1, [sp, #40]	; 0x28
   2b756:	1c4a      	adds	r2, r1, #1
   2b758:	f000 8265 	beq.w	2bc26 <_svfprintf_r+0x6be>
   2b75c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   2b760:	9207      	str	r2, [sp, #28]
   2b762:	ea54 0205 	orrs.w	r2, r4, r5
   2b766:	f040 8264 	bne.w	2bc32 <_svfprintf_r+0x6ca>
   2b76a:	2900      	cmp	r1, #0
   2b76c:	f040 843c 	bne.w	2bfe8 <_svfprintf_r+0xa80>
   2b770:	2b00      	cmp	r3, #0
   2b772:	f040 84d7 	bne.w	2c124 <_svfprintf_r+0xbbc>
   2b776:	f01b 0301 	ands.w	r3, fp, #1
   2b77a:	930e      	str	r3, [sp, #56]	; 0x38
   2b77c:	f000 8604 	beq.w	2c388 <_svfprintf_r+0xe20>
   2b780:	ae42      	add	r6, sp, #264	; 0x108
   2b782:	2330      	movs	r3, #48	; 0x30
   2b784:	f806 3d41 	strb.w	r3, [r6, #-65]!
   2b788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b78a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b78c:	4293      	cmp	r3, r2
   2b78e:	bfb8      	it	lt
   2b790:	4613      	movlt	r3, r2
   2b792:	9308      	str	r3, [sp, #32]
   2b794:	2300      	movs	r3, #0
   2b796:	9312      	str	r3, [sp, #72]	; 0x48
   2b798:	b117      	cbz	r7, 2b7a0 <_svfprintf_r+0x238>
   2b79a:	9b08      	ldr	r3, [sp, #32]
   2b79c:	3301      	adds	r3, #1
   2b79e:	9308      	str	r3, [sp, #32]
   2b7a0:	9b07      	ldr	r3, [sp, #28]
   2b7a2:	f013 0302 	ands.w	r3, r3, #2
   2b7a6:	9310      	str	r3, [sp, #64]	; 0x40
   2b7a8:	d002      	beq.n	2b7b0 <_svfprintf_r+0x248>
   2b7aa:	9b08      	ldr	r3, [sp, #32]
   2b7ac:	3302      	adds	r3, #2
   2b7ae:	9308      	str	r3, [sp, #32]
   2b7b0:	9b07      	ldr	r3, [sp, #28]
   2b7b2:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   2b7b6:	f040 830e 	bne.w	2bdd6 <_svfprintf_r+0x86e>
   2b7ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b7bc:	9a08      	ldr	r2, [sp, #32]
   2b7be:	eba3 0b02 	sub.w	fp, r3, r2
   2b7c2:	f1bb 0f00 	cmp.w	fp, #0
   2b7c6:	f340 8306 	ble.w	2bdd6 <_svfprintf_r+0x86e>
   2b7ca:	f1bb 0f10 	cmp.w	fp, #16
   2b7ce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b7d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b7d2:	dd29      	ble.n	2b828 <_svfprintf_r+0x2c0>
   2b7d4:	4643      	mov	r3, r8
   2b7d6:	4621      	mov	r1, r4
   2b7d8:	46a8      	mov	r8, r5
   2b7da:	2710      	movs	r7, #16
   2b7dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b7de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b7e0:	e006      	b.n	2b7f0 <_svfprintf_r+0x288>
   2b7e2:	f1ab 0b10 	sub.w	fp, fp, #16
   2b7e6:	f1bb 0f10 	cmp.w	fp, #16
   2b7ea:	f103 0308 	add.w	r3, r3, #8
   2b7ee:	dd18      	ble.n	2b822 <_svfprintf_r+0x2ba>
   2b7f0:	3201      	adds	r2, #1
   2b7f2:	48b7      	ldr	r0, [pc, #732]	; (2bad0 <_svfprintf_r+0x568>)
   2b7f4:	9226      	str	r2, [sp, #152]	; 0x98
   2b7f6:	3110      	adds	r1, #16
   2b7f8:	2a07      	cmp	r2, #7
   2b7fa:	9127      	str	r1, [sp, #156]	; 0x9c
   2b7fc:	e883 0081 	stmia.w	r3, {r0, r7}
   2b800:	ddef      	ble.n	2b7e2 <_svfprintf_r+0x27a>
   2b802:	aa25      	add	r2, sp, #148	; 0x94
   2b804:	4629      	mov	r1, r5
   2b806:	4620      	mov	r0, r4
   2b808:	f002 fcea 	bl	2e1e0 <__ssprint_r>
   2b80c:	2800      	cmp	r0, #0
   2b80e:	f47f af7d 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2b812:	f1ab 0b10 	sub.w	fp, fp, #16
   2b816:	f1bb 0f10 	cmp.w	fp, #16
   2b81a:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b81c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b81e:	464b      	mov	r3, r9
   2b820:	dce6      	bgt.n	2b7f0 <_svfprintf_r+0x288>
   2b822:	4645      	mov	r5, r8
   2b824:	460c      	mov	r4, r1
   2b826:	4698      	mov	r8, r3
   2b828:	3201      	adds	r2, #1
   2b82a:	4ba9      	ldr	r3, [pc, #676]	; (2bad0 <_svfprintf_r+0x568>)
   2b82c:	9226      	str	r2, [sp, #152]	; 0x98
   2b82e:	445c      	add	r4, fp
   2b830:	2a07      	cmp	r2, #7
   2b832:	9427      	str	r4, [sp, #156]	; 0x9c
   2b834:	e888 0808 	stmia.w	r8, {r3, fp}
   2b838:	f300 8498 	bgt.w	2c16c <_svfprintf_r+0xc04>
   2b83c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b840:	f108 0808 	add.w	r8, r8, #8
   2b844:	b177      	cbz	r7, 2b864 <_svfprintf_r+0x2fc>
   2b846:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b848:	3301      	adds	r3, #1
   2b84a:	3401      	adds	r4, #1
   2b84c:	f10d 0177 	add.w	r1, sp, #119	; 0x77
   2b850:	2201      	movs	r2, #1
   2b852:	2b07      	cmp	r3, #7
   2b854:	9427      	str	r4, [sp, #156]	; 0x9c
   2b856:	9326      	str	r3, [sp, #152]	; 0x98
   2b858:	e888 0006 	stmia.w	r8, {r1, r2}
   2b85c:	f300 83db 	bgt.w	2c016 <_svfprintf_r+0xaae>
   2b860:	f108 0808 	add.w	r8, r8, #8
   2b864:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b866:	b16b      	cbz	r3, 2b884 <_svfprintf_r+0x31c>
   2b868:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b86a:	3301      	adds	r3, #1
   2b86c:	3402      	adds	r4, #2
   2b86e:	a91e      	add	r1, sp, #120	; 0x78
   2b870:	2202      	movs	r2, #2
   2b872:	2b07      	cmp	r3, #7
   2b874:	9427      	str	r4, [sp, #156]	; 0x9c
   2b876:	9326      	str	r3, [sp, #152]	; 0x98
   2b878:	e888 0006 	stmia.w	r8, {r1, r2}
   2b87c:	f300 83d6 	bgt.w	2c02c <_svfprintf_r+0xac4>
   2b880:	f108 0808 	add.w	r8, r8, #8
   2b884:	2d80      	cmp	r5, #128	; 0x80
   2b886:	f000 8315 	beq.w	2beb4 <_svfprintf_r+0x94c>
   2b88a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b88c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b88e:	1a9f      	subs	r7, r3, r2
   2b890:	2f00      	cmp	r7, #0
   2b892:	dd36      	ble.n	2b902 <_svfprintf_r+0x39a>
   2b894:	2f10      	cmp	r7, #16
   2b896:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b898:	4d8e      	ldr	r5, [pc, #568]	; (2bad4 <_svfprintf_r+0x56c>)
   2b89a:	dd27      	ble.n	2b8ec <_svfprintf_r+0x384>
   2b89c:	4642      	mov	r2, r8
   2b89e:	4621      	mov	r1, r4
   2b8a0:	46b0      	mov	r8, r6
   2b8a2:	f04f 0b10 	mov.w	fp, #16
   2b8a6:	462e      	mov	r6, r5
   2b8a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b8aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b8ac:	e004      	b.n	2b8b8 <_svfprintf_r+0x350>
   2b8ae:	3f10      	subs	r7, #16
   2b8b0:	2f10      	cmp	r7, #16
   2b8b2:	f102 0208 	add.w	r2, r2, #8
   2b8b6:	dd15      	ble.n	2b8e4 <_svfprintf_r+0x37c>
   2b8b8:	3301      	adds	r3, #1
   2b8ba:	3110      	adds	r1, #16
   2b8bc:	2b07      	cmp	r3, #7
   2b8be:	9127      	str	r1, [sp, #156]	; 0x9c
   2b8c0:	9326      	str	r3, [sp, #152]	; 0x98
   2b8c2:	e882 0840 	stmia.w	r2, {r6, fp}
   2b8c6:	ddf2      	ble.n	2b8ae <_svfprintf_r+0x346>
   2b8c8:	aa25      	add	r2, sp, #148	; 0x94
   2b8ca:	4629      	mov	r1, r5
   2b8cc:	4620      	mov	r0, r4
   2b8ce:	f002 fc87 	bl	2e1e0 <__ssprint_r>
   2b8d2:	2800      	cmp	r0, #0
   2b8d4:	f47f af1a 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2b8d8:	3f10      	subs	r7, #16
   2b8da:	2f10      	cmp	r7, #16
   2b8dc:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b8de:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b8e0:	464a      	mov	r2, r9
   2b8e2:	dce9      	bgt.n	2b8b8 <_svfprintf_r+0x350>
   2b8e4:	4635      	mov	r5, r6
   2b8e6:	460c      	mov	r4, r1
   2b8e8:	4646      	mov	r6, r8
   2b8ea:	4690      	mov	r8, r2
   2b8ec:	3301      	adds	r3, #1
   2b8ee:	443c      	add	r4, r7
   2b8f0:	2b07      	cmp	r3, #7
   2b8f2:	9427      	str	r4, [sp, #156]	; 0x9c
   2b8f4:	9326      	str	r3, [sp, #152]	; 0x98
   2b8f6:	e888 00a0 	stmia.w	r8, {r5, r7}
   2b8fa:	f300 8381 	bgt.w	2c000 <_svfprintf_r+0xa98>
   2b8fe:	f108 0808 	add.w	r8, r8, #8
   2b902:	9b07      	ldr	r3, [sp, #28]
   2b904:	05df      	lsls	r7, r3, #23
   2b906:	f100 8268 	bmi.w	2bdda <_svfprintf_r+0x872>
   2b90a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b90c:	990e      	ldr	r1, [sp, #56]	; 0x38
   2b90e:	f8c8 6000 	str.w	r6, [r8]
   2b912:	3301      	adds	r3, #1
   2b914:	440c      	add	r4, r1
   2b916:	2b07      	cmp	r3, #7
   2b918:	9427      	str	r4, [sp, #156]	; 0x9c
   2b91a:	f8c8 1004 	str.w	r1, [r8, #4]
   2b91e:	9326      	str	r3, [sp, #152]	; 0x98
   2b920:	f300 834d 	bgt.w	2bfbe <_svfprintf_r+0xa56>
   2b924:	f108 0808 	add.w	r8, r8, #8
   2b928:	9b07      	ldr	r3, [sp, #28]
   2b92a:	075b      	lsls	r3, r3, #29
   2b92c:	d53a      	bpl.n	2b9a4 <_svfprintf_r+0x43c>
   2b92e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b930:	9a08      	ldr	r2, [sp, #32]
   2b932:	1a9d      	subs	r5, r3, r2
   2b934:	2d00      	cmp	r5, #0
   2b936:	dd35      	ble.n	2b9a4 <_svfprintf_r+0x43c>
   2b938:	2d10      	cmp	r5, #16
   2b93a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b93c:	dd20      	ble.n	2b980 <_svfprintf_r+0x418>
   2b93e:	2610      	movs	r6, #16
   2b940:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2b942:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   2b946:	e004      	b.n	2b952 <_svfprintf_r+0x3ea>
   2b948:	3d10      	subs	r5, #16
   2b94a:	2d10      	cmp	r5, #16
   2b94c:	f108 0808 	add.w	r8, r8, #8
   2b950:	dd16      	ble.n	2b980 <_svfprintf_r+0x418>
   2b952:	3301      	adds	r3, #1
   2b954:	4a5e      	ldr	r2, [pc, #376]	; (2bad0 <_svfprintf_r+0x568>)
   2b956:	9326      	str	r3, [sp, #152]	; 0x98
   2b958:	3410      	adds	r4, #16
   2b95a:	2b07      	cmp	r3, #7
   2b95c:	9427      	str	r4, [sp, #156]	; 0x9c
   2b95e:	e888 0044 	stmia.w	r8, {r2, r6}
   2b962:	ddf1      	ble.n	2b948 <_svfprintf_r+0x3e0>
   2b964:	aa25      	add	r2, sp, #148	; 0x94
   2b966:	4659      	mov	r1, fp
   2b968:	4638      	mov	r0, r7
   2b96a:	f002 fc39 	bl	2e1e0 <__ssprint_r>
   2b96e:	2800      	cmp	r0, #0
   2b970:	f47f aecc 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2b974:	3d10      	subs	r5, #16
   2b976:	2d10      	cmp	r5, #16
   2b978:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b97a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b97c:	46c8      	mov	r8, r9
   2b97e:	dce8      	bgt.n	2b952 <_svfprintf_r+0x3ea>
   2b980:	3301      	adds	r3, #1
   2b982:	4a53      	ldr	r2, [pc, #332]	; (2bad0 <_svfprintf_r+0x568>)
   2b984:	9326      	str	r3, [sp, #152]	; 0x98
   2b986:	442c      	add	r4, r5
   2b988:	2b07      	cmp	r3, #7
   2b98a:	9427      	str	r4, [sp, #156]	; 0x9c
   2b98c:	e888 0024 	stmia.w	r8, {r2, r5}
   2b990:	dd08      	ble.n	2b9a4 <_svfprintf_r+0x43c>
   2b992:	aa25      	add	r2, sp, #148	; 0x94
   2b994:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b996:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b998:	f002 fc22 	bl	2e1e0 <__ssprint_r>
   2b99c:	2800      	cmp	r0, #0
   2b99e:	f47f aeb5 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2b9a2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b9a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2b9a8:	9908      	ldr	r1, [sp, #32]
   2b9aa:	428a      	cmp	r2, r1
   2b9ac:	bfac      	ite	ge
   2b9ae:	189b      	addge	r3, r3, r2
   2b9b0:	185b      	addlt	r3, r3, r1
   2b9b2:	9309      	str	r3, [sp, #36]	; 0x24
   2b9b4:	2c00      	cmp	r4, #0
   2b9b6:	f040 830d 	bne.w	2bfd4 <_svfprintf_r+0xa6c>
   2b9ba:	2300      	movs	r3, #0
   2b9bc:	9326      	str	r3, [sp, #152]	; 0x98
   2b9be:	46c8      	mov	r8, r9
   2b9c0:	e5f9      	b.n	2b5b6 <_svfprintf_r+0x4e>
   2b9c2:	9311      	str	r3, [sp, #68]	; 0x44
   2b9c4:	f01b 0320 	ands.w	r3, fp, #32
   2b9c8:	f040 81e3 	bne.w	2bd92 <_svfprintf_r+0x82a>
   2b9cc:	f01b 0210 	ands.w	r2, fp, #16
   2b9d0:	f040 842e 	bne.w	2c230 <_svfprintf_r+0xcc8>
   2b9d4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   2b9d8:	f000 842a 	beq.w	2c230 <_svfprintf_r+0xcc8>
   2b9dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2b9de:	4613      	mov	r3, r2
   2b9e0:	460a      	mov	r2, r1
   2b9e2:	3204      	adds	r2, #4
   2b9e4:	880c      	ldrh	r4, [r1, #0]
   2b9e6:	920f      	str	r2, [sp, #60]	; 0x3c
   2b9e8:	2500      	movs	r5, #0
   2b9ea:	e6b0      	b.n	2b74e <_svfprintf_r+0x1e6>
   2b9ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b9ee:	9311      	str	r3, [sp, #68]	; 0x44
   2b9f0:	6816      	ldr	r6, [r2, #0]
   2b9f2:	2400      	movs	r4, #0
   2b9f4:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
   2b9f8:	1d15      	adds	r5, r2, #4
   2b9fa:	2e00      	cmp	r6, #0
   2b9fc:	f000 86a7 	beq.w	2c74e <_svfprintf_r+0x11e6>
   2ba00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2ba02:	1c53      	adds	r3, r2, #1
   2ba04:	f000 8609 	beq.w	2c61a <_svfprintf_r+0x10b2>
   2ba08:	4621      	mov	r1, r4
   2ba0a:	4630      	mov	r0, r6
   2ba0c:	f7d4 fc08 	bl	220 <memchr>
   2ba10:	2800      	cmp	r0, #0
   2ba12:	f000 86e1 	beq.w	2c7d8 <_svfprintf_r+0x1270>
   2ba16:	1b83      	subs	r3, r0, r6
   2ba18:	930e      	str	r3, [sp, #56]	; 0x38
   2ba1a:	940a      	str	r4, [sp, #40]	; 0x28
   2ba1c:	950f      	str	r5, [sp, #60]	; 0x3c
   2ba1e:	f8cd b01c 	str.w	fp, [sp, #28]
   2ba22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2ba26:	9308      	str	r3, [sp, #32]
   2ba28:	9412      	str	r4, [sp, #72]	; 0x48
   2ba2a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2ba2e:	e6b3      	b.n	2b798 <_svfprintf_r+0x230>
   2ba30:	f89a 3000 	ldrb.w	r3, [sl]
   2ba34:	2201      	movs	r2, #1
   2ba36:	212b      	movs	r1, #43	; 0x2b
   2ba38:	e5ee      	b.n	2b618 <_svfprintf_r+0xb0>
   2ba3a:	f04b 0b20 	orr.w	fp, fp, #32
   2ba3e:	f89a 3000 	ldrb.w	r3, [sl]
   2ba42:	e5e9      	b.n	2b618 <_svfprintf_r+0xb0>
   2ba44:	9311      	str	r3, [sp, #68]	; 0x44
   2ba46:	2a00      	cmp	r2, #0
   2ba48:	f040 8795 	bne.w	2c976 <_svfprintf_r+0x140e>
   2ba4c:	4b22      	ldr	r3, [pc, #136]	; (2bad8 <_svfprintf_r+0x570>)
   2ba4e:	9318      	str	r3, [sp, #96]	; 0x60
   2ba50:	f01b 0f20 	tst.w	fp, #32
   2ba54:	f040 8111 	bne.w	2bc7a <_svfprintf_r+0x712>
   2ba58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2ba5a:	f01b 0f10 	tst.w	fp, #16
   2ba5e:	4613      	mov	r3, r2
   2ba60:	f040 83e1 	bne.w	2c226 <_svfprintf_r+0xcbe>
   2ba64:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2ba68:	f000 83dd 	beq.w	2c226 <_svfprintf_r+0xcbe>
   2ba6c:	3304      	adds	r3, #4
   2ba6e:	8814      	ldrh	r4, [r2, #0]
   2ba70:	930f      	str	r3, [sp, #60]	; 0x3c
   2ba72:	2500      	movs	r5, #0
   2ba74:	f01b 0f01 	tst.w	fp, #1
   2ba78:	f000 810c 	beq.w	2bc94 <_svfprintf_r+0x72c>
   2ba7c:	ea54 0305 	orrs.w	r3, r4, r5
   2ba80:	f000 8108 	beq.w	2bc94 <_svfprintf_r+0x72c>
   2ba84:	2330      	movs	r3, #48	; 0x30
   2ba86:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   2ba8a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   2ba8e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   2ba92:	f04b 0b02 	orr.w	fp, fp, #2
   2ba96:	2302      	movs	r3, #2
   2ba98:	e659      	b.n	2b74e <_svfprintf_r+0x1e6>
   2ba9a:	f89a 3000 	ldrb.w	r3, [sl]
   2ba9e:	2900      	cmp	r1, #0
   2baa0:	f47f adba 	bne.w	2b618 <_svfprintf_r+0xb0>
   2baa4:	2201      	movs	r2, #1
   2baa6:	2120      	movs	r1, #32
   2baa8:	e5b6      	b.n	2b618 <_svfprintf_r+0xb0>
   2baaa:	f04b 0b01 	orr.w	fp, fp, #1
   2baae:	f89a 3000 	ldrb.w	r3, [sl]
   2bab2:	e5b1      	b.n	2b618 <_svfprintf_r+0xb0>
   2bab4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2bab6:	6823      	ldr	r3, [r4, #0]
   2bab8:	930d      	str	r3, [sp, #52]	; 0x34
   2baba:	4618      	mov	r0, r3
   2babc:	2800      	cmp	r0, #0
   2babe:	4623      	mov	r3, r4
   2bac0:	f103 0304 	add.w	r3, r3, #4
   2bac4:	f6ff ae0a 	blt.w	2b6dc <_svfprintf_r+0x174>
   2bac8:	930f      	str	r3, [sp, #60]	; 0x3c
   2baca:	f89a 3000 	ldrb.w	r3, [sl]
   2bace:	e5a3      	b.n	2b618 <_svfprintf_r+0xb0>
   2bad0:	00033234 	.word	0x00033234
   2bad4:	00033244 	.word	0x00033244
   2bad8:	00033218 	.word	0x00033218
   2badc:	f04b 0b10 	orr.w	fp, fp, #16
   2bae0:	f01b 0f20 	tst.w	fp, #32
   2bae4:	9311      	str	r3, [sp, #68]	; 0x44
   2bae6:	f43f ae23 	beq.w	2b730 <_svfprintf_r+0x1c8>
   2baea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2baec:	3507      	adds	r5, #7
   2baee:	f025 0307 	bic.w	r3, r5, #7
   2baf2:	f103 0208 	add.w	r2, r3, #8
   2baf6:	e9d3 4500 	ldrd	r4, r5, [r3]
   2bafa:	920f      	str	r2, [sp, #60]	; 0x3c
   2bafc:	2301      	movs	r3, #1
   2bafe:	e626      	b.n	2b74e <_svfprintf_r+0x1e6>
   2bb00:	f89a 3000 	ldrb.w	r3, [sl]
   2bb04:	2b2a      	cmp	r3, #42	; 0x2a
   2bb06:	f10a 0401 	add.w	r4, sl, #1
   2bb0a:	f000 8727 	beq.w	2c95c <_svfprintf_r+0x13f4>
   2bb0e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bb12:	2809      	cmp	r0, #9
   2bb14:	46a2      	mov	sl, r4
   2bb16:	f200 86ad 	bhi.w	2c874 <_svfprintf_r+0x130c>
   2bb1a:	2300      	movs	r3, #0
   2bb1c:	461c      	mov	r4, r3
   2bb1e:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2bb22:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2bb26:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2bb2a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bb2e:	2809      	cmp	r0, #9
   2bb30:	d9f5      	bls.n	2bb1e <_svfprintf_r+0x5b6>
   2bb32:	940a      	str	r4, [sp, #40]	; 0x28
   2bb34:	e572      	b.n	2b61c <_svfprintf_r+0xb4>
   2bb36:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   2bb3a:	f89a 3000 	ldrb.w	r3, [sl]
   2bb3e:	e56b      	b.n	2b618 <_svfprintf_r+0xb0>
   2bb40:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   2bb44:	f89a 3000 	ldrb.w	r3, [sl]
   2bb48:	e566      	b.n	2b618 <_svfprintf_r+0xb0>
   2bb4a:	f89a 3000 	ldrb.w	r3, [sl]
   2bb4e:	2b6c      	cmp	r3, #108	; 0x6c
   2bb50:	bf03      	ittte	eq
   2bb52:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   2bb56:	f04b 0b20 	orreq.w	fp, fp, #32
   2bb5a:	f10a 0a01 	addeq.w	sl, sl, #1
   2bb5e:	f04b 0b10 	orrne.w	fp, fp, #16
   2bb62:	e559      	b.n	2b618 <_svfprintf_r+0xb0>
   2bb64:	2a00      	cmp	r2, #0
   2bb66:	f040 8711 	bne.w	2c98c <_svfprintf_r+0x1424>
   2bb6a:	f01b 0f20 	tst.w	fp, #32
   2bb6e:	f040 84f9 	bne.w	2c564 <_svfprintf_r+0xffc>
   2bb72:	f01b 0f10 	tst.w	fp, #16
   2bb76:	f040 84ac 	bne.w	2c4d2 <_svfprintf_r+0xf6a>
   2bb7a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bb7e:	f000 84a8 	beq.w	2c4d2 <_svfprintf_r+0xf6a>
   2bb82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bb84:	6813      	ldr	r3, [r2, #0]
   2bb86:	3204      	adds	r2, #4
   2bb88:	920f      	str	r2, [sp, #60]	; 0x3c
   2bb8a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2bb8e:	801a      	strh	r2, [r3, #0]
   2bb90:	e511      	b.n	2b5b6 <_svfprintf_r+0x4e>
   2bb92:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bb94:	4bb3      	ldr	r3, [pc, #716]	; (2be64 <_svfprintf_r+0x8fc>)
   2bb96:	680c      	ldr	r4, [r1, #0]
   2bb98:	9318      	str	r3, [sp, #96]	; 0x60
   2bb9a:	2230      	movs	r2, #48	; 0x30
   2bb9c:	2378      	movs	r3, #120	; 0x78
   2bb9e:	3104      	adds	r1, #4
   2bba0:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   2bba4:	9311      	str	r3, [sp, #68]	; 0x44
   2bba6:	f04b 0b02 	orr.w	fp, fp, #2
   2bbaa:	910f      	str	r1, [sp, #60]	; 0x3c
   2bbac:	2500      	movs	r5, #0
   2bbae:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   2bbb2:	2302      	movs	r3, #2
   2bbb4:	e5cb      	b.n	2b74e <_svfprintf_r+0x1e6>
   2bbb6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bbb8:	9311      	str	r3, [sp, #68]	; 0x44
   2bbba:	680a      	ldr	r2, [r1, #0]
   2bbbc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2bbc0:	2300      	movs	r3, #0
   2bbc2:	460a      	mov	r2, r1
   2bbc4:	461f      	mov	r7, r3
   2bbc6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2bbca:	3204      	adds	r2, #4
   2bbcc:	2301      	movs	r3, #1
   2bbce:	9308      	str	r3, [sp, #32]
   2bbd0:	f8cd b01c 	str.w	fp, [sp, #28]
   2bbd4:	970a      	str	r7, [sp, #40]	; 0x28
   2bbd6:	9712      	str	r7, [sp, #72]	; 0x48
   2bbd8:	920f      	str	r2, [sp, #60]	; 0x3c
   2bbda:	930e      	str	r3, [sp, #56]	; 0x38
   2bbdc:	ae28      	add	r6, sp, #160	; 0xa0
   2bbde:	e5df      	b.n	2b7a0 <_svfprintf_r+0x238>
   2bbe0:	9311      	str	r3, [sp, #68]	; 0x44
   2bbe2:	2a00      	cmp	r2, #0
   2bbe4:	f040 86ea 	bne.w	2c9bc <_svfprintf_r+0x1454>
   2bbe8:	f01b 0f20 	tst.w	fp, #32
   2bbec:	d15d      	bne.n	2bcaa <_svfprintf_r+0x742>
   2bbee:	f01b 0f10 	tst.w	fp, #16
   2bbf2:	f040 8308 	bne.w	2c206 <_svfprintf_r+0xc9e>
   2bbf6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bbfa:	f000 8304 	beq.w	2c206 <_svfprintf_r+0xc9e>
   2bbfe:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bc00:	f9b1 4000 	ldrsh.w	r4, [r1]
   2bc04:	3104      	adds	r1, #4
   2bc06:	17e5      	asrs	r5, r4, #31
   2bc08:	4622      	mov	r2, r4
   2bc0a:	462b      	mov	r3, r5
   2bc0c:	910f      	str	r1, [sp, #60]	; 0x3c
   2bc0e:	2a00      	cmp	r2, #0
   2bc10:	f173 0300 	sbcs.w	r3, r3, #0
   2bc14:	db58      	blt.n	2bcc8 <_svfprintf_r+0x760>
   2bc16:	990a      	ldr	r1, [sp, #40]	; 0x28
   2bc18:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bc1c:	1c4a      	adds	r2, r1, #1
   2bc1e:	f04f 0301 	mov.w	r3, #1
   2bc22:	f47f ad9b 	bne.w	2b75c <_svfprintf_r+0x1f4>
   2bc26:	ea54 0205 	orrs.w	r2, r4, r5
   2bc2a:	f000 81df 	beq.w	2bfec <_svfprintf_r+0xa84>
   2bc2e:	f8cd b01c 	str.w	fp, [sp, #28]
   2bc32:	2b01      	cmp	r3, #1
   2bc34:	f000 827b 	beq.w	2c12e <_svfprintf_r+0xbc6>
   2bc38:	2b02      	cmp	r3, #2
   2bc3a:	f040 8206 	bne.w	2c04a <_svfprintf_r+0xae2>
   2bc3e:	9818      	ldr	r0, [sp, #96]	; 0x60
   2bc40:	464e      	mov	r6, r9
   2bc42:	0923      	lsrs	r3, r4, #4
   2bc44:	f004 010f 	and.w	r1, r4, #15
   2bc48:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   2bc4c:	092a      	lsrs	r2, r5, #4
   2bc4e:	461c      	mov	r4, r3
   2bc50:	4615      	mov	r5, r2
   2bc52:	5c43      	ldrb	r3, [r0, r1]
   2bc54:	f806 3d01 	strb.w	r3, [r6, #-1]!
   2bc58:	ea54 0305 	orrs.w	r3, r4, r5
   2bc5c:	d1f1      	bne.n	2bc42 <_svfprintf_r+0x6da>
   2bc5e:	eba9 0306 	sub.w	r3, r9, r6
   2bc62:	930e      	str	r3, [sp, #56]	; 0x38
   2bc64:	e590      	b.n	2b788 <_svfprintf_r+0x220>
   2bc66:	9311      	str	r3, [sp, #68]	; 0x44
   2bc68:	2a00      	cmp	r2, #0
   2bc6a:	f040 86a3 	bne.w	2c9b4 <_svfprintf_r+0x144c>
   2bc6e:	4b7e      	ldr	r3, [pc, #504]	; (2be68 <_svfprintf_r+0x900>)
   2bc70:	9318      	str	r3, [sp, #96]	; 0x60
   2bc72:	f01b 0f20 	tst.w	fp, #32
   2bc76:	f43f aeef 	beq.w	2ba58 <_svfprintf_r+0x4f0>
   2bc7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bc7c:	3507      	adds	r5, #7
   2bc7e:	f025 0307 	bic.w	r3, r5, #7
   2bc82:	f103 0208 	add.w	r2, r3, #8
   2bc86:	f01b 0f01 	tst.w	fp, #1
   2bc8a:	920f      	str	r2, [sp, #60]	; 0x3c
   2bc8c:	e9d3 4500 	ldrd	r4, r5, [r3]
   2bc90:	f47f aef4 	bne.w	2ba7c <_svfprintf_r+0x514>
   2bc94:	2302      	movs	r3, #2
   2bc96:	e55a      	b.n	2b74e <_svfprintf_r+0x1e6>
   2bc98:	9311      	str	r3, [sp, #68]	; 0x44
   2bc9a:	2a00      	cmp	r2, #0
   2bc9c:	f040 8686 	bne.w	2c9ac <_svfprintf_r+0x1444>
   2bca0:	f04b 0b10 	orr.w	fp, fp, #16
   2bca4:	f01b 0f20 	tst.w	fp, #32
   2bca8:	d0a1      	beq.n	2bbee <_svfprintf_r+0x686>
   2bcaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bcac:	3507      	adds	r5, #7
   2bcae:	f025 0507 	bic.w	r5, r5, #7
   2bcb2:	e9d5 2300 	ldrd	r2, r3, [r5]
   2bcb6:	2a00      	cmp	r2, #0
   2bcb8:	f105 0108 	add.w	r1, r5, #8
   2bcbc:	461d      	mov	r5, r3
   2bcbe:	f173 0300 	sbcs.w	r3, r3, #0
   2bcc2:	910f      	str	r1, [sp, #60]	; 0x3c
   2bcc4:	4614      	mov	r4, r2
   2bcc6:	daa6      	bge.n	2bc16 <_svfprintf_r+0x6ae>
   2bcc8:	272d      	movs	r7, #45	; 0x2d
   2bcca:	4264      	negs	r4, r4
   2bccc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   2bcd0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2bcd4:	2301      	movs	r3, #1
   2bcd6:	e53d      	b.n	2b754 <_svfprintf_r+0x1ec>
   2bcd8:	9311      	str	r3, [sp, #68]	; 0x44
   2bcda:	2a00      	cmp	r2, #0
   2bcdc:	f040 8662 	bne.w	2c9a4 <_svfprintf_r+0x143c>
   2bce0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bce2:	3507      	adds	r5, #7
   2bce4:	f025 0307 	bic.w	r3, r5, #7
   2bce8:	f103 0208 	add.w	r2, r3, #8
   2bcec:	920f      	str	r2, [sp, #60]	; 0x3c
   2bcee:	681a      	ldr	r2, [r3, #0]
   2bcf0:	9215      	str	r2, [sp, #84]	; 0x54
   2bcf2:	685b      	ldr	r3, [r3, #4]
   2bcf4:	9314      	str	r3, [sp, #80]	; 0x50
   2bcf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2bcf8:	9d15      	ldr	r5, [sp, #84]	; 0x54
   2bcfa:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   2bcfe:	4628      	mov	r0, r5
   2bd00:	4621      	mov	r1, r4
   2bd02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bd06:	4b59      	ldr	r3, [pc, #356]	; (2be6c <_svfprintf_r+0x904>)
   2bd08:	f7d5 f9ba 	bl	1080 <__aeabi_dcmpun>
   2bd0c:	2800      	cmp	r0, #0
   2bd0e:	f040 834a 	bne.w	2c3a6 <_svfprintf_r+0xe3e>
   2bd12:	4628      	mov	r0, r5
   2bd14:	4621      	mov	r1, r4
   2bd16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bd1a:	4b54      	ldr	r3, [pc, #336]	; (2be6c <_svfprintf_r+0x904>)
   2bd1c:	f7d5 f992 	bl	1044 <__aeabi_dcmple>
   2bd20:	2800      	cmp	r0, #0
   2bd22:	f040 8340 	bne.w	2c3a6 <_svfprintf_r+0xe3e>
   2bd26:	a815      	add	r0, sp, #84	; 0x54
   2bd28:	c80d      	ldmia	r0, {r0, r2, r3}
   2bd2a:	9914      	ldr	r1, [sp, #80]	; 0x50
   2bd2c:	f7d5 f980 	bl	1030 <__aeabi_dcmplt>
   2bd30:	2800      	cmp	r0, #0
   2bd32:	f040 8530 	bne.w	2c796 <_svfprintf_r+0x122e>
   2bd36:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bd3a:	4e4d      	ldr	r6, [pc, #308]	; (2be70 <_svfprintf_r+0x908>)
   2bd3c:	4b4d      	ldr	r3, [pc, #308]	; (2be74 <_svfprintf_r+0x90c>)
   2bd3e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   2bd42:	9007      	str	r0, [sp, #28]
   2bd44:	9811      	ldr	r0, [sp, #68]	; 0x44
   2bd46:	2203      	movs	r2, #3
   2bd48:	2100      	movs	r1, #0
   2bd4a:	9208      	str	r2, [sp, #32]
   2bd4c:	910a      	str	r1, [sp, #40]	; 0x28
   2bd4e:	2847      	cmp	r0, #71	; 0x47
   2bd50:	bfd8      	it	le
   2bd52:	461e      	movle	r6, r3
   2bd54:	920e      	str	r2, [sp, #56]	; 0x38
   2bd56:	9112      	str	r1, [sp, #72]	; 0x48
   2bd58:	e51e      	b.n	2b798 <_svfprintf_r+0x230>
   2bd5a:	f04b 0b08 	orr.w	fp, fp, #8
   2bd5e:	f89a 3000 	ldrb.w	r3, [sl]
   2bd62:	e459      	b.n	2b618 <_svfprintf_r+0xb0>
   2bd64:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bd68:	2300      	movs	r3, #0
   2bd6a:	461c      	mov	r4, r3
   2bd6c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2bd70:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2bd74:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2bd78:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bd7c:	2809      	cmp	r0, #9
   2bd7e:	d9f5      	bls.n	2bd6c <_svfprintf_r+0x804>
   2bd80:	940d      	str	r4, [sp, #52]	; 0x34
   2bd82:	e44b      	b.n	2b61c <_svfprintf_r+0xb4>
   2bd84:	f04b 0b10 	orr.w	fp, fp, #16
   2bd88:	9311      	str	r3, [sp, #68]	; 0x44
   2bd8a:	f01b 0320 	ands.w	r3, fp, #32
   2bd8e:	f43f ae1d 	beq.w	2b9cc <_svfprintf_r+0x464>
   2bd92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bd94:	3507      	adds	r5, #7
   2bd96:	f025 0307 	bic.w	r3, r5, #7
   2bd9a:	f103 0208 	add.w	r2, r3, #8
   2bd9e:	e9d3 4500 	ldrd	r4, r5, [r3]
   2bda2:	920f      	str	r2, [sp, #60]	; 0x3c
   2bda4:	2300      	movs	r3, #0
   2bda6:	e4d2      	b.n	2b74e <_svfprintf_r+0x1e6>
   2bda8:	9311      	str	r3, [sp, #68]	; 0x44
   2bdaa:	2a00      	cmp	r2, #0
   2bdac:	f040 85e7 	bne.w	2c97e <_svfprintf_r+0x1416>
   2bdb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2bdb2:	2a00      	cmp	r2, #0
   2bdb4:	f43f aca3 	beq.w	2b6fe <_svfprintf_r+0x196>
   2bdb8:	2300      	movs	r3, #0
   2bdba:	2101      	movs	r1, #1
   2bdbc:	461f      	mov	r7, r3
   2bdbe:	9108      	str	r1, [sp, #32]
   2bdc0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2bdc4:	f8cd b01c 	str.w	fp, [sp, #28]
   2bdc8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2bdcc:	930a      	str	r3, [sp, #40]	; 0x28
   2bdce:	9312      	str	r3, [sp, #72]	; 0x48
   2bdd0:	910e      	str	r1, [sp, #56]	; 0x38
   2bdd2:	ae28      	add	r6, sp, #160	; 0xa0
   2bdd4:	e4e4      	b.n	2b7a0 <_svfprintf_r+0x238>
   2bdd6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bdd8:	e534      	b.n	2b844 <_svfprintf_r+0x2dc>
   2bdda:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bddc:	2b65      	cmp	r3, #101	; 0x65
   2bdde:	f340 80a7 	ble.w	2bf30 <_svfprintf_r+0x9c8>
   2bde2:	a815      	add	r0, sp, #84	; 0x54
   2bde4:	c80d      	ldmia	r0, {r0, r2, r3}
   2bde6:	9914      	ldr	r1, [sp, #80]	; 0x50
   2bde8:	f7d5 f918 	bl	101c <__aeabi_dcmpeq>
   2bdec:	2800      	cmp	r0, #0
   2bdee:	f000 8150 	beq.w	2c092 <_svfprintf_r+0xb2a>
   2bdf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bdf4:	4a20      	ldr	r2, [pc, #128]	; (2be78 <_svfprintf_r+0x910>)
   2bdf6:	f8c8 2000 	str.w	r2, [r8]
   2bdfa:	3301      	adds	r3, #1
   2bdfc:	3401      	adds	r4, #1
   2bdfe:	2201      	movs	r2, #1
   2be00:	2b07      	cmp	r3, #7
   2be02:	9427      	str	r4, [sp, #156]	; 0x9c
   2be04:	9326      	str	r3, [sp, #152]	; 0x98
   2be06:	f8c8 2004 	str.w	r2, [r8, #4]
   2be0a:	f300 836a 	bgt.w	2c4e2 <_svfprintf_r+0xf7a>
   2be0e:	f108 0808 	add.w	r8, r8, #8
   2be12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2be14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2be16:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2be18:	4293      	cmp	r3, r2
   2be1a:	db03      	blt.n	2be24 <_svfprintf_r+0x8bc>
   2be1c:	9b07      	ldr	r3, [sp, #28]
   2be1e:	07dd      	lsls	r5, r3, #31
   2be20:	f57f ad82 	bpl.w	2b928 <_svfprintf_r+0x3c0>
   2be24:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2be26:	9919      	ldr	r1, [sp, #100]	; 0x64
   2be28:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2be2a:	f8c8 2000 	str.w	r2, [r8]
   2be2e:	3301      	adds	r3, #1
   2be30:	440c      	add	r4, r1
   2be32:	2b07      	cmp	r3, #7
   2be34:	f8c8 1004 	str.w	r1, [r8, #4]
   2be38:	9427      	str	r4, [sp, #156]	; 0x9c
   2be3a:	9326      	str	r3, [sp, #152]	; 0x98
   2be3c:	f300 839e 	bgt.w	2c57c <_svfprintf_r+0x1014>
   2be40:	f108 0808 	add.w	r8, r8, #8
   2be44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2be46:	1e5e      	subs	r6, r3, #1
   2be48:	2e00      	cmp	r6, #0
   2be4a:	f77f ad6d 	ble.w	2b928 <_svfprintf_r+0x3c0>
   2be4e:	2e10      	cmp	r6, #16
   2be50:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2be52:	4d0a      	ldr	r5, [pc, #40]	; (2be7c <_svfprintf_r+0x914>)
   2be54:	f340 81f5 	ble.w	2c242 <_svfprintf_r+0xcda>
   2be58:	4622      	mov	r2, r4
   2be5a:	2710      	movs	r7, #16
   2be5c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2be60:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2be62:	e013      	b.n	2be8c <_svfprintf_r+0x924>
   2be64:	00033218 	.word	0x00033218
   2be68:	00033204 	.word	0x00033204
   2be6c:	7fefffff 	.word	0x7fefffff
   2be70:	000331f8 	.word	0x000331f8
   2be74:	000331f4 	.word	0x000331f4
   2be78:	00032d6c 	.word	0x00032d6c
   2be7c:	00033244 	.word	0x00033244
   2be80:	f108 0808 	add.w	r8, r8, #8
   2be84:	3e10      	subs	r6, #16
   2be86:	2e10      	cmp	r6, #16
   2be88:	f340 81da 	ble.w	2c240 <_svfprintf_r+0xcd8>
   2be8c:	3301      	adds	r3, #1
   2be8e:	3210      	adds	r2, #16
   2be90:	2b07      	cmp	r3, #7
   2be92:	9227      	str	r2, [sp, #156]	; 0x9c
   2be94:	9326      	str	r3, [sp, #152]	; 0x98
   2be96:	e888 00a0 	stmia.w	r8, {r5, r7}
   2be9a:	ddf1      	ble.n	2be80 <_svfprintf_r+0x918>
   2be9c:	aa25      	add	r2, sp, #148	; 0x94
   2be9e:	4621      	mov	r1, r4
   2bea0:	4658      	mov	r0, fp
   2bea2:	f002 f99d 	bl	2e1e0 <__ssprint_r>
   2bea6:	2800      	cmp	r0, #0
   2bea8:	f47f ac30 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2beac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2beae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2beb0:	46c8      	mov	r8, r9
   2beb2:	e7e7      	b.n	2be84 <_svfprintf_r+0x91c>
   2beb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2beb6:	9a08      	ldr	r2, [sp, #32]
   2beb8:	1a9f      	subs	r7, r3, r2
   2beba:	2f00      	cmp	r7, #0
   2bebc:	f77f ace5 	ble.w	2b88a <_svfprintf_r+0x322>
   2bec0:	2f10      	cmp	r7, #16
   2bec2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bec4:	4db6      	ldr	r5, [pc, #728]	; (2c1a0 <_svfprintf_r+0xc38>)
   2bec6:	dd27      	ble.n	2bf18 <_svfprintf_r+0x9b0>
   2bec8:	4642      	mov	r2, r8
   2beca:	4621      	mov	r1, r4
   2becc:	46b0      	mov	r8, r6
   2bece:	f04f 0b10 	mov.w	fp, #16
   2bed2:	462e      	mov	r6, r5
   2bed4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2bed6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2bed8:	e004      	b.n	2bee4 <_svfprintf_r+0x97c>
   2beda:	3f10      	subs	r7, #16
   2bedc:	2f10      	cmp	r7, #16
   2bede:	f102 0208 	add.w	r2, r2, #8
   2bee2:	dd15      	ble.n	2bf10 <_svfprintf_r+0x9a8>
   2bee4:	3301      	adds	r3, #1
   2bee6:	3110      	adds	r1, #16
   2bee8:	2b07      	cmp	r3, #7
   2beea:	9127      	str	r1, [sp, #156]	; 0x9c
   2beec:	9326      	str	r3, [sp, #152]	; 0x98
   2beee:	e882 0840 	stmia.w	r2, {r6, fp}
   2bef2:	ddf2      	ble.n	2beda <_svfprintf_r+0x972>
   2bef4:	aa25      	add	r2, sp, #148	; 0x94
   2bef6:	4629      	mov	r1, r5
   2bef8:	4620      	mov	r0, r4
   2befa:	f002 f971 	bl	2e1e0 <__ssprint_r>
   2befe:	2800      	cmp	r0, #0
   2bf00:	f47f ac04 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2bf04:	3f10      	subs	r7, #16
   2bf06:	2f10      	cmp	r7, #16
   2bf08:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2bf0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bf0c:	464a      	mov	r2, r9
   2bf0e:	dce9      	bgt.n	2bee4 <_svfprintf_r+0x97c>
   2bf10:	4635      	mov	r5, r6
   2bf12:	460c      	mov	r4, r1
   2bf14:	4646      	mov	r6, r8
   2bf16:	4690      	mov	r8, r2
   2bf18:	3301      	adds	r3, #1
   2bf1a:	443c      	add	r4, r7
   2bf1c:	2b07      	cmp	r3, #7
   2bf1e:	9427      	str	r4, [sp, #156]	; 0x9c
   2bf20:	9326      	str	r3, [sp, #152]	; 0x98
   2bf22:	e888 00a0 	stmia.w	r8, {r5, r7}
   2bf26:	f300 8232 	bgt.w	2c38e <_svfprintf_r+0xe26>
   2bf2a:	f108 0808 	add.w	r8, r8, #8
   2bf2e:	e4ac      	b.n	2b88a <_svfprintf_r+0x322>
   2bf30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bf32:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2bf34:	2b01      	cmp	r3, #1
   2bf36:	f340 81fe 	ble.w	2c336 <_svfprintf_r+0xdce>
   2bf3a:	3701      	adds	r7, #1
   2bf3c:	3401      	adds	r4, #1
   2bf3e:	2301      	movs	r3, #1
   2bf40:	2f07      	cmp	r7, #7
   2bf42:	9427      	str	r4, [sp, #156]	; 0x9c
   2bf44:	9726      	str	r7, [sp, #152]	; 0x98
   2bf46:	f8c8 6000 	str.w	r6, [r8]
   2bf4a:	f8c8 3004 	str.w	r3, [r8, #4]
   2bf4e:	f300 8203 	bgt.w	2c358 <_svfprintf_r+0xdf0>
   2bf52:	f108 0808 	add.w	r8, r8, #8
   2bf56:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2bf58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2bf5a:	f8c8 3000 	str.w	r3, [r8]
   2bf5e:	3701      	adds	r7, #1
   2bf60:	4414      	add	r4, r2
   2bf62:	2f07      	cmp	r7, #7
   2bf64:	9427      	str	r4, [sp, #156]	; 0x9c
   2bf66:	9726      	str	r7, [sp, #152]	; 0x98
   2bf68:	f8c8 2004 	str.w	r2, [r8, #4]
   2bf6c:	f300 8200 	bgt.w	2c370 <_svfprintf_r+0xe08>
   2bf70:	f108 0808 	add.w	r8, r8, #8
   2bf74:	a815      	add	r0, sp, #84	; 0x54
   2bf76:	c80d      	ldmia	r0, {r0, r2, r3}
   2bf78:	9914      	ldr	r1, [sp, #80]	; 0x50
   2bf7a:	f7d5 f84f 	bl	101c <__aeabi_dcmpeq>
   2bf7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bf80:	2800      	cmp	r0, #0
   2bf82:	f040 8101 	bne.w	2c188 <_svfprintf_r+0xc20>
   2bf86:	3b01      	subs	r3, #1
   2bf88:	3701      	adds	r7, #1
   2bf8a:	3601      	adds	r6, #1
   2bf8c:	441c      	add	r4, r3
   2bf8e:	2f07      	cmp	r7, #7
   2bf90:	9726      	str	r7, [sp, #152]	; 0x98
   2bf92:	9427      	str	r4, [sp, #156]	; 0x9c
   2bf94:	f8c8 6000 	str.w	r6, [r8]
   2bf98:	f8c8 3004 	str.w	r3, [r8, #4]
   2bf9c:	f300 8127 	bgt.w	2c1ee <_svfprintf_r+0xc86>
   2bfa0:	f108 0808 	add.w	r8, r8, #8
   2bfa4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2bfa6:	f8c8 2004 	str.w	r2, [r8, #4]
   2bfaa:	3701      	adds	r7, #1
   2bfac:	4414      	add	r4, r2
   2bfae:	ab21      	add	r3, sp, #132	; 0x84
   2bfb0:	2f07      	cmp	r7, #7
   2bfb2:	9427      	str	r4, [sp, #156]	; 0x9c
   2bfb4:	9726      	str	r7, [sp, #152]	; 0x98
   2bfb6:	f8c8 3000 	str.w	r3, [r8]
   2bfba:	f77f acb3 	ble.w	2b924 <_svfprintf_r+0x3bc>
   2bfbe:	aa25      	add	r2, sp, #148	; 0x94
   2bfc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bfc2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bfc4:	f002 f90c 	bl	2e1e0 <__ssprint_r>
   2bfc8:	2800      	cmp	r0, #0
   2bfca:	f47f ab9f 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2bfce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bfd0:	46c8      	mov	r8, r9
   2bfd2:	e4a9      	b.n	2b928 <_svfprintf_r+0x3c0>
   2bfd4:	aa25      	add	r2, sp, #148	; 0x94
   2bfd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bfd8:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bfda:	f002 f901 	bl	2e1e0 <__ssprint_r>
   2bfde:	2800      	cmp	r0, #0
   2bfe0:	f43f aceb 	beq.w	2b9ba <_svfprintf_r+0x452>
   2bfe4:	f7ff bb92 	b.w	2b70c <_svfprintf_r+0x1a4>
   2bfe8:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2bfec:	2b01      	cmp	r3, #1
   2bfee:	f000 8134 	beq.w	2c25a <_svfprintf_r+0xcf2>
   2bff2:	2b02      	cmp	r3, #2
   2bff4:	d125      	bne.n	2c042 <_svfprintf_r+0xada>
   2bff6:	f8cd b01c 	str.w	fp, [sp, #28]
   2bffa:	2400      	movs	r4, #0
   2bffc:	2500      	movs	r5, #0
   2bffe:	e61e      	b.n	2bc3e <_svfprintf_r+0x6d6>
   2c000:	aa25      	add	r2, sp, #148	; 0x94
   2c002:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c004:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c006:	f002 f8eb 	bl	2e1e0 <__ssprint_r>
   2c00a:	2800      	cmp	r0, #0
   2c00c:	f47f ab7e 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c010:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c012:	46c8      	mov	r8, r9
   2c014:	e475      	b.n	2b902 <_svfprintf_r+0x39a>
   2c016:	aa25      	add	r2, sp, #148	; 0x94
   2c018:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c01a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c01c:	f002 f8e0 	bl	2e1e0 <__ssprint_r>
   2c020:	2800      	cmp	r0, #0
   2c022:	f47f ab73 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c026:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c028:	46c8      	mov	r8, r9
   2c02a:	e41b      	b.n	2b864 <_svfprintf_r+0x2fc>
   2c02c:	aa25      	add	r2, sp, #148	; 0x94
   2c02e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c030:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c032:	f002 f8d5 	bl	2e1e0 <__ssprint_r>
   2c036:	2800      	cmp	r0, #0
   2c038:	f47f ab68 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c03c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c03e:	46c8      	mov	r8, r9
   2c040:	e420      	b.n	2b884 <_svfprintf_r+0x31c>
   2c042:	f8cd b01c 	str.w	fp, [sp, #28]
   2c046:	2400      	movs	r4, #0
   2c048:	2500      	movs	r5, #0
   2c04a:	4649      	mov	r1, r9
   2c04c:	e000      	b.n	2c050 <_svfprintf_r+0xae8>
   2c04e:	4631      	mov	r1, r6
   2c050:	08e2      	lsrs	r2, r4, #3
   2c052:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   2c056:	08e8      	lsrs	r0, r5, #3
   2c058:	f004 0307 	and.w	r3, r4, #7
   2c05c:	4605      	mov	r5, r0
   2c05e:	4614      	mov	r4, r2
   2c060:	3330      	adds	r3, #48	; 0x30
   2c062:	ea54 0205 	orrs.w	r2, r4, r5
   2c066:	f801 3c01 	strb.w	r3, [r1, #-1]
   2c06a:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
   2c06e:	d1ee      	bne.n	2c04e <_svfprintf_r+0xae6>
   2c070:	9a07      	ldr	r2, [sp, #28]
   2c072:	07d2      	lsls	r2, r2, #31
   2c074:	f57f adf3 	bpl.w	2bc5e <_svfprintf_r+0x6f6>
   2c078:	2b30      	cmp	r3, #48	; 0x30
   2c07a:	f43f adf0 	beq.w	2bc5e <_svfprintf_r+0x6f6>
   2c07e:	3902      	subs	r1, #2
   2c080:	2330      	movs	r3, #48	; 0x30
   2c082:	f806 3c01 	strb.w	r3, [r6, #-1]
   2c086:	eba9 0301 	sub.w	r3, r9, r1
   2c08a:	930e      	str	r3, [sp, #56]	; 0x38
   2c08c:	460e      	mov	r6, r1
   2c08e:	f7ff bb7b 	b.w	2b788 <_svfprintf_r+0x220>
   2c092:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c094:	2900      	cmp	r1, #0
   2c096:	f340 822e 	ble.w	2c4f6 <_svfprintf_r+0xf8e>
   2c09a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c09c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2c09e:	4293      	cmp	r3, r2
   2c0a0:	bfa8      	it	ge
   2c0a2:	4613      	movge	r3, r2
   2c0a4:	2b00      	cmp	r3, #0
   2c0a6:	461f      	mov	r7, r3
   2c0a8:	dd0d      	ble.n	2c0c6 <_svfprintf_r+0xb5e>
   2c0aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c0ac:	f8c8 6000 	str.w	r6, [r8]
   2c0b0:	3301      	adds	r3, #1
   2c0b2:	443c      	add	r4, r7
   2c0b4:	2b07      	cmp	r3, #7
   2c0b6:	9427      	str	r4, [sp, #156]	; 0x9c
   2c0b8:	f8c8 7004 	str.w	r7, [r8, #4]
   2c0bc:	9326      	str	r3, [sp, #152]	; 0x98
   2c0be:	f300 831f 	bgt.w	2c700 <_svfprintf_r+0x1198>
   2c0c2:	f108 0808 	add.w	r8, r8, #8
   2c0c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c0c8:	2f00      	cmp	r7, #0
   2c0ca:	bfa8      	it	ge
   2c0cc:	1bdb      	subge	r3, r3, r7
   2c0ce:	2b00      	cmp	r3, #0
   2c0d0:	461f      	mov	r7, r3
   2c0d2:	f340 80d6 	ble.w	2c282 <_svfprintf_r+0xd1a>
   2c0d6:	2f10      	cmp	r7, #16
   2c0d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c0da:	4d31      	ldr	r5, [pc, #196]	; (2c1a0 <_svfprintf_r+0xc38>)
   2c0dc:	f340 81ed 	ble.w	2c4ba <_svfprintf_r+0xf52>
   2c0e0:	4642      	mov	r2, r8
   2c0e2:	4621      	mov	r1, r4
   2c0e4:	46b0      	mov	r8, r6
   2c0e6:	f04f 0b10 	mov.w	fp, #16
   2c0ea:	462e      	mov	r6, r5
   2c0ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c0ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2c0f0:	e004      	b.n	2c0fc <_svfprintf_r+0xb94>
   2c0f2:	3208      	adds	r2, #8
   2c0f4:	3f10      	subs	r7, #16
   2c0f6:	2f10      	cmp	r7, #16
   2c0f8:	f340 81db 	ble.w	2c4b2 <_svfprintf_r+0xf4a>
   2c0fc:	3301      	adds	r3, #1
   2c0fe:	3110      	adds	r1, #16
   2c100:	2b07      	cmp	r3, #7
   2c102:	9127      	str	r1, [sp, #156]	; 0x9c
   2c104:	9326      	str	r3, [sp, #152]	; 0x98
   2c106:	e882 0840 	stmia.w	r2, {r6, fp}
   2c10a:	ddf2      	ble.n	2c0f2 <_svfprintf_r+0xb8a>
   2c10c:	aa25      	add	r2, sp, #148	; 0x94
   2c10e:	4629      	mov	r1, r5
   2c110:	4620      	mov	r0, r4
   2c112:	f002 f865 	bl	2e1e0 <__ssprint_r>
   2c116:	2800      	cmp	r0, #0
   2c118:	f47f aaf8 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c11c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2c11e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c120:	464a      	mov	r2, r9
   2c122:	e7e7      	b.n	2c0f4 <_svfprintf_r+0xb8c>
   2c124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c126:	930e      	str	r3, [sp, #56]	; 0x38
   2c128:	464e      	mov	r6, r9
   2c12a:	f7ff bb2d 	b.w	2b788 <_svfprintf_r+0x220>
   2c12e:	2d00      	cmp	r5, #0
   2c130:	bf08      	it	eq
   2c132:	2c0a      	cmpeq	r4, #10
   2c134:	f0c0 808f 	bcc.w	2c256 <_svfprintf_r+0xcee>
   2c138:	464e      	mov	r6, r9
   2c13a:	4620      	mov	r0, r4
   2c13c:	4629      	mov	r1, r5
   2c13e:	220a      	movs	r2, #10
   2c140:	2300      	movs	r3, #0
   2c142:	f7d4 ffdb 	bl	10fc <__aeabi_uldivmod>
   2c146:	3230      	adds	r2, #48	; 0x30
   2c148:	f806 2d01 	strb.w	r2, [r6, #-1]!
   2c14c:	4620      	mov	r0, r4
   2c14e:	4629      	mov	r1, r5
   2c150:	2300      	movs	r3, #0
   2c152:	220a      	movs	r2, #10
   2c154:	f7d4 ffd2 	bl	10fc <__aeabi_uldivmod>
   2c158:	4604      	mov	r4, r0
   2c15a:	460d      	mov	r5, r1
   2c15c:	ea54 0305 	orrs.w	r3, r4, r5
   2c160:	d1eb      	bne.n	2c13a <_svfprintf_r+0xbd2>
   2c162:	eba9 0306 	sub.w	r3, r9, r6
   2c166:	930e      	str	r3, [sp, #56]	; 0x38
   2c168:	f7ff bb0e 	b.w	2b788 <_svfprintf_r+0x220>
   2c16c:	aa25      	add	r2, sp, #148	; 0x94
   2c16e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c170:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c172:	f002 f835 	bl	2e1e0 <__ssprint_r>
   2c176:	2800      	cmp	r0, #0
   2c178:	f47f aac8 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c17c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c180:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c182:	46c8      	mov	r8, r9
   2c184:	f7ff bb5e 	b.w	2b844 <_svfprintf_r+0x2dc>
   2c188:	1e5e      	subs	r6, r3, #1
   2c18a:	2e00      	cmp	r6, #0
   2c18c:	f77f af0a 	ble.w	2bfa4 <_svfprintf_r+0xa3c>
   2c190:	2e10      	cmp	r6, #16
   2c192:	4d03      	ldr	r5, [pc, #12]	; (2c1a0 <_svfprintf_r+0xc38>)
   2c194:	dd22      	ble.n	2c1dc <_svfprintf_r+0xc74>
   2c196:	4622      	mov	r2, r4
   2c198:	f04f 0b10 	mov.w	fp, #16
   2c19c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c19e:	e006      	b.n	2c1ae <_svfprintf_r+0xc46>
   2c1a0:	00033244 	.word	0x00033244
   2c1a4:	3e10      	subs	r6, #16
   2c1a6:	2e10      	cmp	r6, #16
   2c1a8:	f108 0808 	add.w	r8, r8, #8
   2c1ac:	dd15      	ble.n	2c1da <_svfprintf_r+0xc72>
   2c1ae:	3701      	adds	r7, #1
   2c1b0:	3210      	adds	r2, #16
   2c1b2:	2f07      	cmp	r7, #7
   2c1b4:	9227      	str	r2, [sp, #156]	; 0x9c
   2c1b6:	9726      	str	r7, [sp, #152]	; 0x98
   2c1b8:	e888 0820 	stmia.w	r8, {r5, fp}
   2c1bc:	ddf2      	ble.n	2c1a4 <_svfprintf_r+0xc3c>
   2c1be:	aa25      	add	r2, sp, #148	; 0x94
   2c1c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c1c2:	4620      	mov	r0, r4
   2c1c4:	f002 f80c 	bl	2e1e0 <__ssprint_r>
   2c1c8:	2800      	cmp	r0, #0
   2c1ca:	f47f aa9f 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c1ce:	3e10      	subs	r6, #16
   2c1d0:	2e10      	cmp	r6, #16
   2c1d2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c1d4:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c1d6:	46c8      	mov	r8, r9
   2c1d8:	dce9      	bgt.n	2c1ae <_svfprintf_r+0xc46>
   2c1da:	4614      	mov	r4, r2
   2c1dc:	3701      	adds	r7, #1
   2c1de:	4434      	add	r4, r6
   2c1e0:	2f07      	cmp	r7, #7
   2c1e2:	9427      	str	r4, [sp, #156]	; 0x9c
   2c1e4:	9726      	str	r7, [sp, #152]	; 0x98
   2c1e6:	e888 0060 	stmia.w	r8, {r5, r6}
   2c1ea:	f77f aed9 	ble.w	2bfa0 <_svfprintf_r+0xa38>
   2c1ee:	aa25      	add	r2, sp, #148	; 0x94
   2c1f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c1f2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c1f4:	f001 fff4 	bl	2e1e0 <__ssprint_r>
   2c1f8:	2800      	cmp	r0, #0
   2c1fa:	f47f aa87 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c1fe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c200:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c202:	46c8      	mov	r8, r9
   2c204:	e6ce      	b.n	2bfa4 <_svfprintf_r+0xa3c>
   2c206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c208:	6814      	ldr	r4, [r2, #0]
   2c20a:	4613      	mov	r3, r2
   2c20c:	3304      	adds	r3, #4
   2c20e:	17e5      	asrs	r5, r4, #31
   2c210:	930f      	str	r3, [sp, #60]	; 0x3c
   2c212:	4622      	mov	r2, r4
   2c214:	462b      	mov	r3, r5
   2c216:	e4fa      	b.n	2bc0e <_svfprintf_r+0x6a6>
   2c218:	3204      	adds	r2, #4
   2c21a:	681c      	ldr	r4, [r3, #0]
   2c21c:	920f      	str	r2, [sp, #60]	; 0x3c
   2c21e:	2301      	movs	r3, #1
   2c220:	2500      	movs	r5, #0
   2c222:	f7ff ba94 	b.w	2b74e <_svfprintf_r+0x1e6>
   2c226:	681c      	ldr	r4, [r3, #0]
   2c228:	3304      	adds	r3, #4
   2c22a:	930f      	str	r3, [sp, #60]	; 0x3c
   2c22c:	2500      	movs	r5, #0
   2c22e:	e421      	b.n	2ba74 <_svfprintf_r+0x50c>
   2c230:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2c232:	460a      	mov	r2, r1
   2c234:	3204      	adds	r2, #4
   2c236:	680c      	ldr	r4, [r1, #0]
   2c238:	920f      	str	r2, [sp, #60]	; 0x3c
   2c23a:	2500      	movs	r5, #0
   2c23c:	f7ff ba87 	b.w	2b74e <_svfprintf_r+0x1e6>
   2c240:	4614      	mov	r4, r2
   2c242:	3301      	adds	r3, #1
   2c244:	4434      	add	r4, r6
   2c246:	2b07      	cmp	r3, #7
   2c248:	9427      	str	r4, [sp, #156]	; 0x9c
   2c24a:	9326      	str	r3, [sp, #152]	; 0x98
   2c24c:	e888 0060 	stmia.w	r8, {r5, r6}
   2c250:	f77f ab68 	ble.w	2b924 <_svfprintf_r+0x3bc>
   2c254:	e6b3      	b.n	2bfbe <_svfprintf_r+0xa56>
   2c256:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2c25a:	f8cd b01c 	str.w	fp, [sp, #28]
   2c25e:	ae42      	add	r6, sp, #264	; 0x108
   2c260:	3430      	adds	r4, #48	; 0x30
   2c262:	2301      	movs	r3, #1
   2c264:	f806 4d41 	strb.w	r4, [r6, #-65]!
   2c268:	930e      	str	r3, [sp, #56]	; 0x38
   2c26a:	f7ff ba8d 	b.w	2b788 <_svfprintf_r+0x220>
   2c26e:	aa25      	add	r2, sp, #148	; 0x94
   2c270:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c272:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c274:	f001 ffb4 	bl	2e1e0 <__ssprint_r>
   2c278:	2800      	cmp	r0, #0
   2c27a:	f47f aa47 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c27e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c280:	46c8      	mov	r8, r9
   2c282:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c284:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c286:	429a      	cmp	r2, r3
   2c288:	db44      	blt.n	2c314 <_svfprintf_r+0xdac>
   2c28a:	9b07      	ldr	r3, [sp, #28]
   2c28c:	07d9      	lsls	r1, r3, #31
   2c28e:	d441      	bmi.n	2c314 <_svfprintf_r+0xdac>
   2c290:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c292:	9812      	ldr	r0, [sp, #72]	; 0x48
   2c294:	1a9a      	subs	r2, r3, r2
   2c296:	1a1d      	subs	r5, r3, r0
   2c298:	4295      	cmp	r5, r2
   2c29a:	bfa8      	it	ge
   2c29c:	4615      	movge	r5, r2
   2c29e:	2d00      	cmp	r5, #0
   2c2a0:	dd0e      	ble.n	2c2c0 <_svfprintf_r+0xd58>
   2c2a2:	9926      	ldr	r1, [sp, #152]	; 0x98
   2c2a4:	f8c8 5004 	str.w	r5, [r8, #4]
   2c2a8:	3101      	adds	r1, #1
   2c2aa:	4406      	add	r6, r0
   2c2ac:	442c      	add	r4, r5
   2c2ae:	2907      	cmp	r1, #7
   2c2b0:	f8c8 6000 	str.w	r6, [r8]
   2c2b4:	9427      	str	r4, [sp, #156]	; 0x9c
   2c2b6:	9126      	str	r1, [sp, #152]	; 0x98
   2c2b8:	f300 823b 	bgt.w	2c732 <_svfprintf_r+0x11ca>
   2c2bc:	f108 0808 	add.w	r8, r8, #8
   2c2c0:	2d00      	cmp	r5, #0
   2c2c2:	bfac      	ite	ge
   2c2c4:	1b56      	subge	r6, r2, r5
   2c2c6:	4616      	movlt	r6, r2
   2c2c8:	2e00      	cmp	r6, #0
   2c2ca:	f77f ab2d 	ble.w	2b928 <_svfprintf_r+0x3c0>
   2c2ce:	2e10      	cmp	r6, #16
   2c2d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c2d2:	4db0      	ldr	r5, [pc, #704]	; (2c594 <_svfprintf_r+0x102c>)
   2c2d4:	ddb5      	ble.n	2c242 <_svfprintf_r+0xcda>
   2c2d6:	4622      	mov	r2, r4
   2c2d8:	2710      	movs	r7, #16
   2c2da:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2c2de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2c2e0:	e004      	b.n	2c2ec <_svfprintf_r+0xd84>
   2c2e2:	f108 0808 	add.w	r8, r8, #8
   2c2e6:	3e10      	subs	r6, #16
   2c2e8:	2e10      	cmp	r6, #16
   2c2ea:	dda9      	ble.n	2c240 <_svfprintf_r+0xcd8>
   2c2ec:	3301      	adds	r3, #1
   2c2ee:	3210      	adds	r2, #16
   2c2f0:	2b07      	cmp	r3, #7
   2c2f2:	9227      	str	r2, [sp, #156]	; 0x9c
   2c2f4:	9326      	str	r3, [sp, #152]	; 0x98
   2c2f6:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c2fa:	ddf2      	ble.n	2c2e2 <_svfprintf_r+0xd7a>
   2c2fc:	aa25      	add	r2, sp, #148	; 0x94
   2c2fe:	4621      	mov	r1, r4
   2c300:	4658      	mov	r0, fp
   2c302:	f001 ff6d 	bl	2e1e0 <__ssprint_r>
   2c306:	2800      	cmp	r0, #0
   2c308:	f47f aa00 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c30c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c30e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c310:	46c8      	mov	r8, r9
   2c312:	e7e8      	b.n	2c2e6 <_svfprintf_r+0xd7e>
   2c314:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c316:	9819      	ldr	r0, [sp, #100]	; 0x64
   2c318:	991a      	ldr	r1, [sp, #104]	; 0x68
   2c31a:	f8c8 1000 	str.w	r1, [r8]
   2c31e:	3301      	adds	r3, #1
   2c320:	4404      	add	r4, r0
   2c322:	2b07      	cmp	r3, #7
   2c324:	9427      	str	r4, [sp, #156]	; 0x9c
   2c326:	f8c8 0004 	str.w	r0, [r8, #4]
   2c32a:	9326      	str	r3, [sp, #152]	; 0x98
   2c32c:	f300 81f5 	bgt.w	2c71a <_svfprintf_r+0x11b2>
   2c330:	f108 0808 	add.w	r8, r8, #8
   2c334:	e7ac      	b.n	2c290 <_svfprintf_r+0xd28>
   2c336:	9b07      	ldr	r3, [sp, #28]
   2c338:	07da      	lsls	r2, r3, #31
   2c33a:	f53f adfe 	bmi.w	2bf3a <_svfprintf_r+0x9d2>
   2c33e:	3701      	adds	r7, #1
   2c340:	3401      	adds	r4, #1
   2c342:	2301      	movs	r3, #1
   2c344:	2f07      	cmp	r7, #7
   2c346:	9427      	str	r4, [sp, #156]	; 0x9c
   2c348:	9726      	str	r7, [sp, #152]	; 0x98
   2c34a:	f8c8 6000 	str.w	r6, [r8]
   2c34e:	f8c8 3004 	str.w	r3, [r8, #4]
   2c352:	f77f ae25 	ble.w	2bfa0 <_svfprintf_r+0xa38>
   2c356:	e74a      	b.n	2c1ee <_svfprintf_r+0xc86>
   2c358:	aa25      	add	r2, sp, #148	; 0x94
   2c35a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c35c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c35e:	f001 ff3f 	bl	2e1e0 <__ssprint_r>
   2c362:	2800      	cmp	r0, #0
   2c364:	f47f a9d2 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c368:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c36a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c36c:	46c8      	mov	r8, r9
   2c36e:	e5f2      	b.n	2bf56 <_svfprintf_r+0x9ee>
   2c370:	aa25      	add	r2, sp, #148	; 0x94
   2c372:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c374:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c376:	f001 ff33 	bl	2e1e0 <__ssprint_r>
   2c37a:	2800      	cmp	r0, #0
   2c37c:	f47f a9c6 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c380:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c382:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c384:	46c8      	mov	r8, r9
   2c386:	e5f5      	b.n	2bf74 <_svfprintf_r+0xa0c>
   2c388:	464e      	mov	r6, r9
   2c38a:	f7ff b9fd 	b.w	2b788 <_svfprintf_r+0x220>
   2c38e:	aa25      	add	r2, sp, #148	; 0x94
   2c390:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c392:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c394:	f001 ff24 	bl	2e1e0 <__ssprint_r>
   2c398:	2800      	cmp	r0, #0
   2c39a:	f47f a9b7 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c39e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c3a0:	46c8      	mov	r8, r9
   2c3a2:	f7ff ba72 	b.w	2b88a <_svfprintf_r+0x322>
   2c3a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
   2c3a8:	4622      	mov	r2, r4
   2c3aa:	4620      	mov	r0, r4
   2c3ac:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2c3ae:	4623      	mov	r3, r4
   2c3b0:	4621      	mov	r1, r4
   2c3b2:	f7d4 fe65 	bl	1080 <__aeabi_dcmpun>
   2c3b6:	2800      	cmp	r0, #0
   2c3b8:	f040 8286 	bne.w	2c8c8 <_svfprintf_r+0x1360>
   2c3bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c3be:	3301      	adds	r3, #1
   2c3c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c3c2:	f023 0320 	bic.w	r3, r3, #32
   2c3c6:	930e      	str	r3, [sp, #56]	; 0x38
   2c3c8:	f000 81e2 	beq.w	2c790 <_svfprintf_r+0x1228>
   2c3cc:	2b47      	cmp	r3, #71	; 0x47
   2c3ce:	f000 811e 	beq.w	2c60e <_svfprintf_r+0x10a6>
   2c3d2:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   2c3d6:	9307      	str	r3, [sp, #28]
   2c3d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2c3da:	1e1f      	subs	r7, r3, #0
   2c3dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2c3de:	9308      	str	r3, [sp, #32]
   2c3e0:	bfbb      	ittet	lt
   2c3e2:	463b      	movlt	r3, r7
   2c3e4:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   2c3e8:	2300      	movge	r3, #0
   2c3ea:	232d      	movlt	r3, #45	; 0x2d
   2c3ec:	9310      	str	r3, [sp, #64]	; 0x40
   2c3ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c3f0:	2b66      	cmp	r3, #102	; 0x66
   2c3f2:	f000 81bb 	beq.w	2c76c <_svfprintf_r+0x1204>
   2c3f6:	2b46      	cmp	r3, #70	; 0x46
   2c3f8:	f000 80df 	beq.w	2c5ba <_svfprintf_r+0x1052>
   2c3fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c3fe:	9a08      	ldr	r2, [sp, #32]
   2c400:	2b45      	cmp	r3, #69	; 0x45
   2c402:	bf0c      	ite	eq
   2c404:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   2c406:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   2c408:	a823      	add	r0, sp, #140	; 0x8c
   2c40a:	a920      	add	r1, sp, #128	; 0x80
   2c40c:	bf08      	it	eq
   2c40e:	1c5d      	addeq	r5, r3, #1
   2c410:	9004      	str	r0, [sp, #16]
   2c412:	9103      	str	r1, [sp, #12]
   2c414:	a81f      	add	r0, sp, #124	; 0x7c
   2c416:	2102      	movs	r1, #2
   2c418:	463b      	mov	r3, r7
   2c41a:	9002      	str	r0, [sp, #8]
   2c41c:	9501      	str	r5, [sp, #4]
   2c41e:	9100      	str	r1, [sp, #0]
   2c420:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c422:	f000 fb71 	bl	2cb08 <_dtoa_r>
   2c426:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c428:	2b67      	cmp	r3, #103	; 0x67
   2c42a:	4606      	mov	r6, r0
   2c42c:	f040 81e0 	bne.w	2c7f0 <_svfprintf_r+0x1288>
   2c430:	f01b 0f01 	tst.w	fp, #1
   2c434:	f000 8246 	beq.w	2c8c4 <_svfprintf_r+0x135c>
   2c438:	1974      	adds	r4, r6, r5
   2c43a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2c43c:	9808      	ldr	r0, [sp, #32]
   2c43e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2c440:	4639      	mov	r1, r7
   2c442:	f7d4 fdeb 	bl	101c <__aeabi_dcmpeq>
   2c446:	2800      	cmp	r0, #0
   2c448:	f040 8165 	bne.w	2c716 <_svfprintf_r+0x11ae>
   2c44c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c44e:	42a3      	cmp	r3, r4
   2c450:	d206      	bcs.n	2c460 <_svfprintf_r+0xef8>
   2c452:	2130      	movs	r1, #48	; 0x30
   2c454:	1c5a      	adds	r2, r3, #1
   2c456:	9223      	str	r2, [sp, #140]	; 0x8c
   2c458:	7019      	strb	r1, [r3, #0]
   2c45a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c45c:	429c      	cmp	r4, r3
   2c45e:	d8f9      	bhi.n	2c454 <_svfprintf_r+0xeec>
   2c460:	1b9b      	subs	r3, r3, r6
   2c462:	9313      	str	r3, [sp, #76]	; 0x4c
   2c464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c466:	2b47      	cmp	r3, #71	; 0x47
   2c468:	f000 80e9 	beq.w	2c63e <_svfprintf_r+0x10d6>
   2c46c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c46e:	2b65      	cmp	r3, #101	; 0x65
   2c470:	f340 81cd 	ble.w	2c80e <_svfprintf_r+0x12a6>
   2c474:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c476:	2b66      	cmp	r3, #102	; 0x66
   2c478:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c47a:	9312      	str	r3, [sp, #72]	; 0x48
   2c47c:	f000 819e 	beq.w	2c7bc <_svfprintf_r+0x1254>
   2c480:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c482:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2c484:	4619      	mov	r1, r3
   2c486:	4291      	cmp	r1, r2
   2c488:	f300 818a 	bgt.w	2c7a0 <_svfprintf_r+0x1238>
   2c48c:	f01b 0f01 	tst.w	fp, #1
   2c490:	f040 8213 	bne.w	2c8ba <_svfprintf_r+0x1352>
   2c494:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2c498:	9308      	str	r3, [sp, #32]
   2c49a:	2367      	movs	r3, #103	; 0x67
   2c49c:	920e      	str	r2, [sp, #56]	; 0x38
   2c49e:	9311      	str	r3, [sp, #68]	; 0x44
   2c4a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2c4a2:	2b00      	cmp	r3, #0
   2c4a4:	f040 80c4 	bne.w	2c630 <_svfprintf_r+0x10c8>
   2c4a8:	930a      	str	r3, [sp, #40]	; 0x28
   2c4aa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c4ae:	f7ff b973 	b.w	2b798 <_svfprintf_r+0x230>
   2c4b2:	4635      	mov	r5, r6
   2c4b4:	460c      	mov	r4, r1
   2c4b6:	4646      	mov	r6, r8
   2c4b8:	4690      	mov	r8, r2
   2c4ba:	3301      	adds	r3, #1
   2c4bc:	443c      	add	r4, r7
   2c4be:	2b07      	cmp	r3, #7
   2c4c0:	9427      	str	r4, [sp, #156]	; 0x9c
   2c4c2:	9326      	str	r3, [sp, #152]	; 0x98
   2c4c4:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c4c8:	f73f aed1 	bgt.w	2c26e <_svfprintf_r+0xd06>
   2c4cc:	f108 0808 	add.w	r8, r8, #8
   2c4d0:	e6d7      	b.n	2c282 <_svfprintf_r+0xd1a>
   2c4d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c4d4:	6813      	ldr	r3, [r2, #0]
   2c4d6:	3204      	adds	r2, #4
   2c4d8:	920f      	str	r2, [sp, #60]	; 0x3c
   2c4da:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2c4dc:	601a      	str	r2, [r3, #0]
   2c4de:	f7ff b86a 	b.w	2b5b6 <_svfprintf_r+0x4e>
   2c4e2:	aa25      	add	r2, sp, #148	; 0x94
   2c4e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c4e6:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c4e8:	f001 fe7a 	bl	2e1e0 <__ssprint_r>
   2c4ec:	2800      	cmp	r0, #0
   2c4ee:	f47f a90d 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c4f2:	46c8      	mov	r8, r9
   2c4f4:	e48d      	b.n	2be12 <_svfprintf_r+0x8aa>
   2c4f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c4f8:	4a27      	ldr	r2, [pc, #156]	; (2c598 <_svfprintf_r+0x1030>)
   2c4fa:	f8c8 2000 	str.w	r2, [r8]
   2c4fe:	3301      	adds	r3, #1
   2c500:	3401      	adds	r4, #1
   2c502:	2201      	movs	r2, #1
   2c504:	2b07      	cmp	r3, #7
   2c506:	9427      	str	r4, [sp, #156]	; 0x9c
   2c508:	9326      	str	r3, [sp, #152]	; 0x98
   2c50a:	f8c8 2004 	str.w	r2, [r8, #4]
   2c50e:	dc72      	bgt.n	2c5f6 <_svfprintf_r+0x108e>
   2c510:	f108 0808 	add.w	r8, r8, #8
   2c514:	b929      	cbnz	r1, 2c522 <_svfprintf_r+0xfba>
   2c516:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c518:	b91b      	cbnz	r3, 2c522 <_svfprintf_r+0xfba>
   2c51a:	9b07      	ldr	r3, [sp, #28]
   2c51c:	07d8      	lsls	r0, r3, #31
   2c51e:	f57f aa03 	bpl.w	2b928 <_svfprintf_r+0x3c0>
   2c522:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c524:	9819      	ldr	r0, [sp, #100]	; 0x64
   2c526:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2c528:	f8c8 2000 	str.w	r2, [r8]
   2c52c:	3301      	adds	r3, #1
   2c52e:	4602      	mov	r2, r0
   2c530:	4422      	add	r2, r4
   2c532:	2b07      	cmp	r3, #7
   2c534:	9227      	str	r2, [sp, #156]	; 0x9c
   2c536:	f8c8 0004 	str.w	r0, [r8, #4]
   2c53a:	9326      	str	r3, [sp, #152]	; 0x98
   2c53c:	f300 818d 	bgt.w	2c85a <_svfprintf_r+0x12f2>
   2c540:	f108 0808 	add.w	r8, r8, #8
   2c544:	2900      	cmp	r1, #0
   2c546:	f2c0 8165 	blt.w	2c814 <_svfprintf_r+0x12ac>
   2c54a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2c54c:	f8c8 6000 	str.w	r6, [r8]
   2c550:	3301      	adds	r3, #1
   2c552:	188c      	adds	r4, r1, r2
   2c554:	2b07      	cmp	r3, #7
   2c556:	9427      	str	r4, [sp, #156]	; 0x9c
   2c558:	9326      	str	r3, [sp, #152]	; 0x98
   2c55a:	f8c8 1004 	str.w	r1, [r8, #4]
   2c55e:	f77f a9e1 	ble.w	2b924 <_svfprintf_r+0x3bc>
   2c562:	e52c      	b.n	2bfbe <_svfprintf_r+0xa56>
   2c564:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c566:	9909      	ldr	r1, [sp, #36]	; 0x24
   2c568:	6813      	ldr	r3, [r2, #0]
   2c56a:	17cd      	asrs	r5, r1, #31
   2c56c:	4608      	mov	r0, r1
   2c56e:	3204      	adds	r2, #4
   2c570:	4629      	mov	r1, r5
   2c572:	920f      	str	r2, [sp, #60]	; 0x3c
   2c574:	e9c3 0100 	strd	r0, r1, [r3]
   2c578:	f7ff b81d 	b.w	2b5b6 <_svfprintf_r+0x4e>
   2c57c:	aa25      	add	r2, sp, #148	; 0x94
   2c57e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c580:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c582:	f001 fe2d 	bl	2e1e0 <__ssprint_r>
   2c586:	2800      	cmp	r0, #0
   2c588:	f47f a8c0 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c58c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c58e:	46c8      	mov	r8, r9
   2c590:	e458      	b.n	2be44 <_svfprintf_r+0x8dc>
   2c592:	bf00      	nop
   2c594:	00033244 	.word	0x00033244
   2c598:	00032d6c 	.word	0x00032d6c
   2c59c:	2140      	movs	r1, #64	; 0x40
   2c59e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c5a0:	f7fd fe60 	bl	2a264 <_malloc_r>
   2c5a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c5a6:	6010      	str	r0, [r2, #0]
   2c5a8:	6110      	str	r0, [r2, #16]
   2c5aa:	2800      	cmp	r0, #0
   2c5ac:	f000 81f2 	beq.w	2c994 <_svfprintf_r+0x142c>
   2c5b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c5b2:	2340      	movs	r3, #64	; 0x40
   2c5b4:	6153      	str	r3, [r2, #20]
   2c5b6:	f7fe bfee 	b.w	2b596 <_svfprintf_r+0x2e>
   2c5ba:	a823      	add	r0, sp, #140	; 0x8c
   2c5bc:	a920      	add	r1, sp, #128	; 0x80
   2c5be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2c5c0:	9004      	str	r0, [sp, #16]
   2c5c2:	9103      	str	r1, [sp, #12]
   2c5c4:	a81f      	add	r0, sp, #124	; 0x7c
   2c5c6:	2103      	movs	r1, #3
   2c5c8:	9002      	str	r0, [sp, #8]
   2c5ca:	9a08      	ldr	r2, [sp, #32]
   2c5cc:	9401      	str	r4, [sp, #4]
   2c5ce:	463b      	mov	r3, r7
   2c5d0:	9100      	str	r1, [sp, #0]
   2c5d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c5d4:	f000 fa98 	bl	2cb08 <_dtoa_r>
   2c5d8:	4625      	mov	r5, r4
   2c5da:	4606      	mov	r6, r0
   2c5dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c5de:	2b46      	cmp	r3, #70	; 0x46
   2c5e0:	eb06 0405 	add.w	r4, r6, r5
   2c5e4:	f47f af29 	bne.w	2c43a <_svfprintf_r+0xed2>
   2c5e8:	7833      	ldrb	r3, [r6, #0]
   2c5ea:	2b30      	cmp	r3, #48	; 0x30
   2c5ec:	f000 8178 	beq.w	2c8e0 <_svfprintf_r+0x1378>
   2c5f0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   2c5f2:	442c      	add	r4, r5
   2c5f4:	e721      	b.n	2c43a <_svfprintf_r+0xed2>
   2c5f6:	aa25      	add	r2, sp, #148	; 0x94
   2c5f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c5fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c5fc:	f001 fdf0 	bl	2e1e0 <__ssprint_r>
   2c600:	2800      	cmp	r0, #0
   2c602:	f47f a883 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c606:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c608:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c60a:	46c8      	mov	r8, r9
   2c60c:	e782      	b.n	2c514 <_svfprintf_r+0xfac>
   2c60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c610:	2b00      	cmp	r3, #0
   2c612:	bf08      	it	eq
   2c614:	2301      	moveq	r3, #1
   2c616:	930a      	str	r3, [sp, #40]	; 0x28
   2c618:	e6db      	b.n	2c3d2 <_svfprintf_r+0xe6a>
   2c61a:	4630      	mov	r0, r6
   2c61c:	940a      	str	r4, [sp, #40]	; 0x28
   2c61e:	f7d4 f86f 	bl	700 <strlen>
   2c622:	950f      	str	r5, [sp, #60]	; 0x3c
   2c624:	900e      	str	r0, [sp, #56]	; 0x38
   2c626:	f8cd b01c 	str.w	fp, [sp, #28]
   2c62a:	4603      	mov	r3, r0
   2c62c:	f7ff b9f9 	b.w	2ba22 <_svfprintf_r+0x4ba>
   2c630:	272d      	movs	r7, #45	; 0x2d
   2c632:	2300      	movs	r3, #0
   2c634:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2c638:	930a      	str	r3, [sp, #40]	; 0x28
   2c63a:	f7ff b8ae 	b.w	2b79a <_svfprintf_r+0x232>
   2c63e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c640:	9312      	str	r3, [sp, #72]	; 0x48
   2c642:	461a      	mov	r2, r3
   2c644:	3303      	adds	r3, #3
   2c646:	db04      	blt.n	2c652 <_svfprintf_r+0x10ea>
   2c648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c64a:	4619      	mov	r1, r3
   2c64c:	4291      	cmp	r1, r2
   2c64e:	f6bf af17 	bge.w	2c480 <_svfprintf_r+0xf18>
   2c652:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c654:	3b02      	subs	r3, #2
   2c656:	9311      	str	r3, [sp, #68]	; 0x44
   2c658:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   2c65c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   2c660:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c662:	3b01      	subs	r3, #1
   2c664:	2b00      	cmp	r3, #0
   2c666:	931f      	str	r3, [sp, #124]	; 0x7c
   2c668:	bfbd      	ittte	lt
   2c66a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   2c66c:	f1c3 0301 	rsblt	r3, r3, #1
   2c670:	222d      	movlt	r2, #45	; 0x2d
   2c672:	222b      	movge	r2, #43	; 0x2b
   2c674:	2b09      	cmp	r3, #9
   2c676:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   2c67a:	f340 8116 	ble.w	2c8aa <_svfprintf_r+0x1342>
   2c67e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
   2c682:	4620      	mov	r0, r4
   2c684:	4dab      	ldr	r5, [pc, #684]	; (2c934 <_svfprintf_r+0x13cc>)
   2c686:	e000      	b.n	2c68a <_svfprintf_r+0x1122>
   2c688:	4610      	mov	r0, r2
   2c68a:	fb85 1203 	smull	r1, r2, r5, r3
   2c68e:	17d9      	asrs	r1, r3, #31
   2c690:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   2c694:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   2c698:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   2c69c:	3230      	adds	r2, #48	; 0x30
   2c69e:	2909      	cmp	r1, #9
   2c6a0:	f800 2c01 	strb.w	r2, [r0, #-1]
   2c6a4:	460b      	mov	r3, r1
   2c6a6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   2c6aa:	dced      	bgt.n	2c688 <_svfprintf_r+0x1120>
   2c6ac:	3330      	adds	r3, #48	; 0x30
   2c6ae:	3802      	subs	r0, #2
   2c6b0:	b2d9      	uxtb	r1, r3
   2c6b2:	4284      	cmp	r4, r0
   2c6b4:	f802 1c01 	strb.w	r1, [r2, #-1]
   2c6b8:	f240 8165 	bls.w	2c986 <_svfprintf_r+0x141e>
   2c6bc:	f10d 0086 	add.w	r0, sp, #134	; 0x86
   2c6c0:	4613      	mov	r3, r2
   2c6c2:	e001      	b.n	2c6c8 <_svfprintf_r+0x1160>
   2c6c4:	f813 1b01 	ldrb.w	r1, [r3], #1
   2c6c8:	f800 1b01 	strb.w	r1, [r0], #1
   2c6cc:	42a3      	cmp	r3, r4
   2c6ce:	d1f9      	bne.n	2c6c4 <_svfprintf_r+0x115c>
   2c6d0:	3301      	adds	r3, #1
   2c6d2:	1a9b      	subs	r3, r3, r2
   2c6d4:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   2c6d8:	4413      	add	r3, r2
   2c6da:	aa21      	add	r2, sp, #132	; 0x84
   2c6dc:	1a9b      	subs	r3, r3, r2
   2c6de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2c6e0:	931b      	str	r3, [sp, #108]	; 0x6c
   2c6e2:	2a01      	cmp	r2, #1
   2c6e4:	4413      	add	r3, r2
   2c6e6:	930e      	str	r3, [sp, #56]	; 0x38
   2c6e8:	f340 8119 	ble.w	2c91e <_svfprintf_r+0x13b6>
   2c6ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c6ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c6f0:	4413      	add	r3, r2
   2c6f2:	930e      	str	r3, [sp, #56]	; 0x38
   2c6f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c6f8:	9308      	str	r3, [sp, #32]
   2c6fa:	2300      	movs	r3, #0
   2c6fc:	9312      	str	r3, [sp, #72]	; 0x48
   2c6fe:	e6cf      	b.n	2c4a0 <_svfprintf_r+0xf38>
   2c700:	aa25      	add	r2, sp, #148	; 0x94
   2c702:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c704:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c706:	f001 fd6b 	bl	2e1e0 <__ssprint_r>
   2c70a:	2800      	cmp	r0, #0
   2c70c:	f47e affe 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c710:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c712:	46c8      	mov	r8, r9
   2c714:	e4d7      	b.n	2c0c6 <_svfprintf_r+0xb5e>
   2c716:	4623      	mov	r3, r4
   2c718:	e6a2      	b.n	2c460 <_svfprintf_r+0xef8>
   2c71a:	aa25      	add	r2, sp, #148	; 0x94
   2c71c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c71e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c720:	f001 fd5e 	bl	2e1e0 <__ssprint_r>
   2c724:	2800      	cmp	r0, #0
   2c726:	f47e aff1 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c72a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c72c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c72e:	46c8      	mov	r8, r9
   2c730:	e5ae      	b.n	2c290 <_svfprintf_r+0xd28>
   2c732:	aa25      	add	r2, sp, #148	; 0x94
   2c734:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c736:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c738:	f001 fd52 	bl	2e1e0 <__ssprint_r>
   2c73c:	2800      	cmp	r0, #0
   2c73e:	f47e afe5 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c742:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c744:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c746:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c748:	1a9a      	subs	r2, r3, r2
   2c74a:	46c8      	mov	r8, r9
   2c74c:	e5b8      	b.n	2c2c0 <_svfprintf_r+0xd58>
   2c74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c750:	9612      	str	r6, [sp, #72]	; 0x48
   2c752:	2b06      	cmp	r3, #6
   2c754:	bf28      	it	cs
   2c756:	2306      	movcs	r3, #6
   2c758:	960a      	str	r6, [sp, #40]	; 0x28
   2c75a:	4637      	mov	r7, r6
   2c75c:	9308      	str	r3, [sp, #32]
   2c75e:	950f      	str	r5, [sp, #60]	; 0x3c
   2c760:	f8cd b01c 	str.w	fp, [sp, #28]
   2c764:	930e      	str	r3, [sp, #56]	; 0x38
   2c766:	4e74      	ldr	r6, [pc, #464]	; (2c938 <_svfprintf_r+0x13d0>)
   2c768:	f7ff b816 	b.w	2b798 <_svfprintf_r+0x230>
   2c76c:	a823      	add	r0, sp, #140	; 0x8c
   2c76e:	a920      	add	r1, sp, #128	; 0x80
   2c770:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2c772:	9004      	str	r0, [sp, #16]
   2c774:	9103      	str	r1, [sp, #12]
   2c776:	a81f      	add	r0, sp, #124	; 0x7c
   2c778:	2103      	movs	r1, #3
   2c77a:	9002      	str	r0, [sp, #8]
   2c77c:	9a08      	ldr	r2, [sp, #32]
   2c77e:	9501      	str	r5, [sp, #4]
   2c780:	463b      	mov	r3, r7
   2c782:	9100      	str	r1, [sp, #0]
   2c784:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c786:	f000 f9bf 	bl	2cb08 <_dtoa_r>
   2c78a:	4606      	mov	r6, r0
   2c78c:	1944      	adds	r4, r0, r5
   2c78e:	e72b      	b.n	2c5e8 <_svfprintf_r+0x1080>
   2c790:	2306      	movs	r3, #6
   2c792:	930a      	str	r3, [sp, #40]	; 0x28
   2c794:	e61d      	b.n	2c3d2 <_svfprintf_r+0xe6a>
   2c796:	272d      	movs	r7, #45	; 0x2d
   2c798:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2c79c:	f7ff bacd 	b.w	2bd3a <_svfprintf_r+0x7d2>
   2c7a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c7a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c7a4:	4413      	add	r3, r2
   2c7a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2c7a8:	930e      	str	r3, [sp, #56]	; 0x38
   2c7aa:	2a00      	cmp	r2, #0
   2c7ac:	f340 80b0 	ble.w	2c910 <_svfprintf_r+0x13a8>
   2c7b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c7b4:	9308      	str	r3, [sp, #32]
   2c7b6:	2367      	movs	r3, #103	; 0x67
   2c7b8:	9311      	str	r3, [sp, #68]	; 0x44
   2c7ba:	e671      	b.n	2c4a0 <_svfprintf_r+0xf38>
   2c7bc:	2b00      	cmp	r3, #0
   2c7be:	f340 80c3 	ble.w	2c948 <_svfprintf_r+0x13e0>
   2c7c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c7c4:	2a00      	cmp	r2, #0
   2c7c6:	f040 8099 	bne.w	2c8fc <_svfprintf_r+0x1394>
   2c7ca:	f01b 0f01 	tst.w	fp, #1
   2c7ce:	f040 8095 	bne.w	2c8fc <_svfprintf_r+0x1394>
   2c7d2:	9308      	str	r3, [sp, #32]
   2c7d4:	930e      	str	r3, [sp, #56]	; 0x38
   2c7d6:	e663      	b.n	2c4a0 <_svfprintf_r+0xf38>
   2c7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c7da:	9308      	str	r3, [sp, #32]
   2c7dc:	930e      	str	r3, [sp, #56]	; 0x38
   2c7de:	900a      	str	r0, [sp, #40]	; 0x28
   2c7e0:	950f      	str	r5, [sp, #60]	; 0x3c
   2c7e2:	f8cd b01c 	str.w	fp, [sp, #28]
   2c7e6:	9012      	str	r0, [sp, #72]	; 0x48
   2c7e8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c7ec:	f7fe bfd4 	b.w	2b798 <_svfprintf_r+0x230>
   2c7f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c7f2:	2b47      	cmp	r3, #71	; 0x47
   2c7f4:	f47f ae20 	bne.w	2c438 <_svfprintf_r+0xed0>
   2c7f8:	f01b 0f01 	tst.w	fp, #1
   2c7fc:	f47f aeee 	bne.w	2c5dc <_svfprintf_r+0x1074>
   2c800:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c802:	1b9b      	subs	r3, r3, r6
   2c804:	9313      	str	r3, [sp, #76]	; 0x4c
   2c806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c808:	2b47      	cmp	r3, #71	; 0x47
   2c80a:	f43f af18 	beq.w	2c63e <_svfprintf_r+0x10d6>
   2c80e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c810:	9312      	str	r3, [sp, #72]	; 0x48
   2c812:	e721      	b.n	2c658 <_svfprintf_r+0x10f0>
   2c814:	424f      	negs	r7, r1
   2c816:	3110      	adds	r1, #16
   2c818:	4d48      	ldr	r5, [pc, #288]	; (2c93c <_svfprintf_r+0x13d4>)
   2c81a:	da2f      	bge.n	2c87c <_svfprintf_r+0x1314>
   2c81c:	2410      	movs	r4, #16
   2c81e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2c822:	e004      	b.n	2c82e <_svfprintf_r+0x12c6>
   2c824:	f108 0808 	add.w	r8, r8, #8
   2c828:	3f10      	subs	r7, #16
   2c82a:	2f10      	cmp	r7, #16
   2c82c:	dd26      	ble.n	2c87c <_svfprintf_r+0x1314>
   2c82e:	3301      	adds	r3, #1
   2c830:	3210      	adds	r2, #16
   2c832:	2b07      	cmp	r3, #7
   2c834:	9227      	str	r2, [sp, #156]	; 0x9c
   2c836:	9326      	str	r3, [sp, #152]	; 0x98
   2c838:	f8c8 5000 	str.w	r5, [r8]
   2c83c:	f8c8 4004 	str.w	r4, [r8, #4]
   2c840:	ddf0      	ble.n	2c824 <_svfprintf_r+0x12bc>
   2c842:	aa25      	add	r2, sp, #148	; 0x94
   2c844:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c846:	4658      	mov	r0, fp
   2c848:	f001 fcca 	bl	2e1e0 <__ssprint_r>
   2c84c:	2800      	cmp	r0, #0
   2c84e:	f47e af5d 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c852:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c854:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c856:	46c8      	mov	r8, r9
   2c858:	e7e6      	b.n	2c828 <_svfprintf_r+0x12c0>
   2c85a:	aa25      	add	r2, sp, #148	; 0x94
   2c85c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c85e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c860:	f001 fcbe 	bl	2e1e0 <__ssprint_r>
   2c864:	2800      	cmp	r0, #0
   2c866:	f47e af51 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c86a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c86c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c86e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c870:	46c8      	mov	r8, r9
   2c872:	e667      	b.n	2c544 <_svfprintf_r+0xfdc>
   2c874:	2000      	movs	r0, #0
   2c876:	900a      	str	r0, [sp, #40]	; 0x28
   2c878:	f7fe bed0 	b.w	2b61c <_svfprintf_r+0xb4>
   2c87c:	3301      	adds	r3, #1
   2c87e:	443a      	add	r2, r7
   2c880:	2b07      	cmp	r3, #7
   2c882:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c886:	9227      	str	r2, [sp, #156]	; 0x9c
   2c888:	9326      	str	r3, [sp, #152]	; 0x98
   2c88a:	f108 0808 	add.w	r8, r8, #8
   2c88e:	f77f ae5c 	ble.w	2c54a <_svfprintf_r+0xfe2>
   2c892:	aa25      	add	r2, sp, #148	; 0x94
   2c894:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c896:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c898:	f001 fca2 	bl	2e1e0 <__ssprint_r>
   2c89c:	2800      	cmp	r0, #0
   2c89e:	f47e af35 	bne.w	2b70c <_svfprintf_r+0x1a4>
   2c8a2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c8a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c8a6:	46c8      	mov	r8, r9
   2c8a8:	e64f      	b.n	2c54a <_svfprintf_r+0xfe2>
   2c8aa:	3330      	adds	r3, #48	; 0x30
   2c8ac:	2230      	movs	r2, #48	; 0x30
   2c8ae:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   2c8b2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   2c8b6:	ab22      	add	r3, sp, #136	; 0x88
   2c8b8:	e70f      	b.n	2c6da <_svfprintf_r+0x1172>
   2c8ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c8bc:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c8be:	4413      	add	r3, r2
   2c8c0:	930e      	str	r3, [sp, #56]	; 0x38
   2c8c2:	e775      	b.n	2c7b0 <_svfprintf_r+0x1248>
   2c8c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c8c6:	e5cb      	b.n	2c460 <_svfprintf_r+0xef8>
   2c8c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2c8ca:	4e1d      	ldr	r6, [pc, #116]	; (2c940 <_svfprintf_r+0x13d8>)
   2c8cc:	2b00      	cmp	r3, #0
   2c8ce:	bfb6      	itet	lt
   2c8d0:	272d      	movlt	r7, #45	; 0x2d
   2c8d2:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   2c8d6:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
   2c8da:	4b1a      	ldr	r3, [pc, #104]	; (2c944 <_svfprintf_r+0x13dc>)
   2c8dc:	f7ff ba2f 	b.w	2bd3e <_svfprintf_r+0x7d6>
   2c8e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2c8e2:	9808      	ldr	r0, [sp, #32]
   2c8e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2c8e6:	4639      	mov	r1, r7
   2c8e8:	f7d4 fb98 	bl	101c <__aeabi_dcmpeq>
   2c8ec:	2800      	cmp	r0, #0
   2c8ee:	f47f ae7f 	bne.w	2c5f0 <_svfprintf_r+0x1088>
   2c8f2:	f1c5 0501 	rsb	r5, r5, #1
   2c8f6:	951f      	str	r5, [sp, #124]	; 0x7c
   2c8f8:	442c      	add	r4, r5
   2c8fa:	e59e      	b.n	2c43a <_svfprintf_r+0xed2>
   2c8fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c8fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c900:	4413      	add	r3, r2
   2c902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c904:	441a      	add	r2, r3
   2c906:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2c90a:	920e      	str	r2, [sp, #56]	; 0x38
   2c90c:	9308      	str	r3, [sp, #32]
   2c90e:	e5c7      	b.n	2c4a0 <_svfprintf_r+0xf38>
   2c910:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c912:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2c914:	f1c3 0301 	rsb	r3, r3, #1
   2c918:	441a      	add	r2, r3
   2c91a:	4613      	mov	r3, r2
   2c91c:	e7d0      	b.n	2c8c0 <_svfprintf_r+0x1358>
   2c91e:	f01b 0301 	ands.w	r3, fp, #1
   2c922:	9312      	str	r3, [sp, #72]	; 0x48
   2c924:	f47f aee2 	bne.w	2c6ec <_svfprintf_r+0x1184>
   2c928:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c92a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c92e:	9308      	str	r3, [sp, #32]
   2c930:	e5b6      	b.n	2c4a0 <_svfprintf_r+0xf38>
   2c932:	bf00      	nop
   2c934:	66666667 	.word	0x66666667
   2c938:	0003322c 	.word	0x0003322c
   2c93c:	00033244 	.word	0x00033244
   2c940:	00033200 	.word	0x00033200
   2c944:	000331fc 	.word	0x000331fc
   2c948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c94a:	b913      	cbnz	r3, 2c952 <_svfprintf_r+0x13ea>
   2c94c:	f01b 0f01 	tst.w	fp, #1
   2c950:	d002      	beq.n	2c958 <_svfprintf_r+0x13f0>
   2c952:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2c954:	3301      	adds	r3, #1
   2c956:	e7d4      	b.n	2c902 <_svfprintf_r+0x139a>
   2c958:	2301      	movs	r3, #1
   2c95a:	e73a      	b.n	2c7d2 <_svfprintf_r+0x126a>
   2c95c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2c95e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2c962:	6828      	ldr	r0, [r5, #0]
   2c964:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   2c968:	900a      	str	r0, [sp, #40]	; 0x28
   2c96a:	4628      	mov	r0, r5
   2c96c:	3004      	adds	r0, #4
   2c96e:	46a2      	mov	sl, r4
   2c970:	900f      	str	r0, [sp, #60]	; 0x3c
   2c972:	f7fe be51 	b.w	2b618 <_svfprintf_r+0xb0>
   2c976:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c97a:	f7ff b867 	b.w	2ba4c <_svfprintf_r+0x4e4>
   2c97e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c982:	f7ff ba15 	b.w	2bdb0 <_svfprintf_r+0x848>
   2c986:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   2c98a:	e6a6      	b.n	2c6da <_svfprintf_r+0x1172>
   2c98c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c990:	f7ff b8eb 	b.w	2bb6a <_svfprintf_r+0x602>
   2c994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2c996:	230c      	movs	r3, #12
   2c998:	6013      	str	r3, [r2, #0]
   2c99a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c99e:	9309      	str	r3, [sp, #36]	; 0x24
   2c9a0:	f7fe bebd 	b.w	2b71e <_svfprintf_r+0x1b6>
   2c9a4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c9a8:	f7ff b99a 	b.w	2bce0 <_svfprintf_r+0x778>
   2c9ac:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c9b0:	f7ff b976 	b.w	2bca0 <_svfprintf_r+0x738>
   2c9b4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c9b8:	f7ff b959 	b.w	2bc6e <_svfprintf_r+0x706>
   2c9bc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c9c0:	f7ff b912 	b.w	2bbe8 <_svfprintf_r+0x680>

0002c9c4 <__ascii_wctomb>:
   2c9c4:	b121      	cbz	r1, 2c9d0 <__ascii_wctomb+0xc>
   2c9c6:	2aff      	cmp	r2, #255	; 0xff
   2c9c8:	d804      	bhi.n	2c9d4 <__ascii_wctomb+0x10>
   2c9ca:	700a      	strb	r2, [r1, #0]
   2c9cc:	2001      	movs	r0, #1
   2c9ce:	4770      	bx	lr
   2c9d0:	4608      	mov	r0, r1
   2c9d2:	4770      	bx	lr
   2c9d4:	238a      	movs	r3, #138	; 0x8a
   2c9d6:	6003      	str	r3, [r0, #0]
   2c9d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c9dc:	4770      	bx	lr
   2c9de:	bf00      	nop

0002c9e0 <quorem>:
   2c9e0:	6902      	ldr	r2, [r0, #16]
   2c9e2:	690b      	ldr	r3, [r1, #16]
   2c9e4:	4293      	cmp	r3, r2
   2c9e6:	f300 808d 	bgt.w	2cb04 <quorem+0x124>
   2c9ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c9ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   2c9f2:	f101 0714 	add.w	r7, r1, #20
   2c9f6:	f100 0b14 	add.w	fp, r0, #20
   2c9fa:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2c9fe:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   2ca02:	ea4f 0488 	mov.w	r4, r8, lsl #2
   2ca06:	b083      	sub	sp, #12
   2ca08:	3201      	adds	r2, #1
   2ca0a:	fbb3 f9f2 	udiv	r9, r3, r2
   2ca0e:	eb0b 0304 	add.w	r3, fp, r4
   2ca12:	9400      	str	r4, [sp, #0]
   2ca14:	eb07 0a04 	add.w	sl, r7, r4
   2ca18:	9301      	str	r3, [sp, #4]
   2ca1a:	f1b9 0f00 	cmp.w	r9, #0
   2ca1e:	d039      	beq.n	2ca94 <quorem+0xb4>
   2ca20:	2500      	movs	r5, #0
   2ca22:	462e      	mov	r6, r5
   2ca24:	46bc      	mov	ip, r7
   2ca26:	46de      	mov	lr, fp
   2ca28:	f85c 4b04 	ldr.w	r4, [ip], #4
   2ca2c:	f8de 3000 	ldr.w	r3, [lr]
   2ca30:	b2a2      	uxth	r2, r4
   2ca32:	fb09 5502 	mla	r5, r9, r2, r5
   2ca36:	0c22      	lsrs	r2, r4, #16
   2ca38:	0c2c      	lsrs	r4, r5, #16
   2ca3a:	fb09 4202 	mla	r2, r9, r2, r4
   2ca3e:	b2ad      	uxth	r5, r5
   2ca40:	1b75      	subs	r5, r6, r5
   2ca42:	b296      	uxth	r6, r2
   2ca44:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   2ca48:	fa15 f383 	uxtah	r3, r5, r3
   2ca4c:	eb06 4623 	add.w	r6, r6, r3, asr #16
   2ca50:	b29b      	uxth	r3, r3
   2ca52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2ca56:	45e2      	cmp	sl, ip
   2ca58:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2ca5c:	f84e 3b04 	str.w	r3, [lr], #4
   2ca60:	ea4f 4626 	mov.w	r6, r6, asr #16
   2ca64:	d2e0      	bcs.n	2ca28 <quorem+0x48>
   2ca66:	9b00      	ldr	r3, [sp, #0]
   2ca68:	f85b 3003 	ldr.w	r3, [fp, r3]
   2ca6c:	b993      	cbnz	r3, 2ca94 <quorem+0xb4>
   2ca6e:	9c01      	ldr	r4, [sp, #4]
   2ca70:	1f23      	subs	r3, r4, #4
   2ca72:	459b      	cmp	fp, r3
   2ca74:	d20c      	bcs.n	2ca90 <quorem+0xb0>
   2ca76:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2ca7a:	b94b      	cbnz	r3, 2ca90 <quorem+0xb0>
   2ca7c:	f1a4 0308 	sub.w	r3, r4, #8
   2ca80:	e002      	b.n	2ca88 <quorem+0xa8>
   2ca82:	681a      	ldr	r2, [r3, #0]
   2ca84:	3b04      	subs	r3, #4
   2ca86:	b91a      	cbnz	r2, 2ca90 <quorem+0xb0>
   2ca88:	459b      	cmp	fp, r3
   2ca8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2ca8e:	d3f8      	bcc.n	2ca82 <quorem+0xa2>
   2ca90:	f8c0 8010 	str.w	r8, [r0, #16]
   2ca94:	4604      	mov	r4, r0
   2ca96:	f001 faa7 	bl	2dfe8 <__mcmp>
   2ca9a:	2800      	cmp	r0, #0
   2ca9c:	db2e      	blt.n	2cafc <quorem+0x11c>
   2ca9e:	f109 0901 	add.w	r9, r9, #1
   2caa2:	465d      	mov	r5, fp
   2caa4:	2300      	movs	r3, #0
   2caa6:	f857 1b04 	ldr.w	r1, [r7], #4
   2caaa:	6828      	ldr	r0, [r5, #0]
   2caac:	b28a      	uxth	r2, r1
   2caae:	1a9a      	subs	r2, r3, r2
   2cab0:	0c0b      	lsrs	r3, r1, #16
   2cab2:	fa12 f280 	uxtah	r2, r2, r0
   2cab6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   2caba:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2cabe:	b292      	uxth	r2, r2
   2cac0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2cac4:	45ba      	cmp	sl, r7
   2cac6:	f845 2b04 	str.w	r2, [r5], #4
   2caca:	ea4f 4323 	mov.w	r3, r3, asr #16
   2cace:	d2ea      	bcs.n	2caa6 <quorem+0xc6>
   2cad0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   2cad4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   2cad8:	b982      	cbnz	r2, 2cafc <quorem+0x11c>
   2cada:	1f1a      	subs	r2, r3, #4
   2cadc:	4593      	cmp	fp, r2
   2cade:	d20b      	bcs.n	2caf8 <quorem+0x118>
   2cae0:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2cae4:	b942      	cbnz	r2, 2caf8 <quorem+0x118>
   2cae6:	3b08      	subs	r3, #8
   2cae8:	e002      	b.n	2caf0 <quorem+0x110>
   2caea:	681a      	ldr	r2, [r3, #0]
   2caec:	3b04      	subs	r3, #4
   2caee:	b91a      	cbnz	r2, 2caf8 <quorem+0x118>
   2caf0:	459b      	cmp	fp, r3
   2caf2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2caf6:	d3f8      	bcc.n	2caea <quorem+0x10a>
   2caf8:	f8c4 8010 	str.w	r8, [r4, #16]
   2cafc:	4648      	mov	r0, r9
   2cafe:	b003      	add	sp, #12
   2cb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb04:	2000      	movs	r0, #0
   2cb06:	4770      	bx	lr

0002cb08 <_dtoa_r>:
   2cb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cb0c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   2cb0e:	b09b      	sub	sp, #108	; 0x6c
   2cb10:	4604      	mov	r4, r0
   2cb12:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   2cb14:	4692      	mov	sl, r2
   2cb16:	469b      	mov	fp, r3
   2cb18:	b141      	cbz	r1, 2cb2c <_dtoa_r+0x24>
   2cb1a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2cb1c:	604a      	str	r2, [r1, #4]
   2cb1e:	2301      	movs	r3, #1
   2cb20:	4093      	lsls	r3, r2
   2cb22:	608b      	str	r3, [r1, #8]
   2cb24:	f001 f888 	bl	2dc38 <_Bfree>
   2cb28:	2300      	movs	r3, #0
   2cb2a:	6423      	str	r3, [r4, #64]	; 0x40
   2cb2c:	f1bb 0f00 	cmp.w	fp, #0
   2cb30:	465d      	mov	r5, fp
   2cb32:	db35      	blt.n	2cba0 <_dtoa_r+0x98>
   2cb34:	2300      	movs	r3, #0
   2cb36:	6033      	str	r3, [r6, #0]
   2cb38:	4b9d      	ldr	r3, [pc, #628]	; (2cdb0 <_dtoa_r+0x2a8>)
   2cb3a:	43ab      	bics	r3, r5
   2cb3c:	d015      	beq.n	2cb6a <_dtoa_r+0x62>
   2cb3e:	4650      	mov	r0, sl
   2cb40:	4659      	mov	r1, fp
   2cb42:	2200      	movs	r2, #0
   2cb44:	2300      	movs	r3, #0
   2cb46:	f7d4 fa69 	bl	101c <__aeabi_dcmpeq>
   2cb4a:	4680      	mov	r8, r0
   2cb4c:	2800      	cmp	r0, #0
   2cb4e:	d02d      	beq.n	2cbac <_dtoa_r+0xa4>
   2cb50:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cb52:	2301      	movs	r3, #1
   2cb54:	6013      	str	r3, [r2, #0]
   2cb56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cb58:	2b00      	cmp	r3, #0
   2cb5a:	f000 80bd 	beq.w	2ccd8 <_dtoa_r+0x1d0>
   2cb5e:	4895      	ldr	r0, [pc, #596]	; (2cdb4 <_dtoa_r+0x2ac>)
   2cb60:	6018      	str	r0, [r3, #0]
   2cb62:	3801      	subs	r0, #1
   2cb64:	b01b      	add	sp, #108	; 0x6c
   2cb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb6a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cb6c:	f242 730f 	movw	r3, #9999	; 0x270f
   2cb70:	6013      	str	r3, [r2, #0]
   2cb72:	f1ba 0f00 	cmp.w	sl, #0
   2cb76:	d10d      	bne.n	2cb94 <_dtoa_r+0x8c>
   2cb78:	f3c5 0513 	ubfx	r5, r5, #0, #20
   2cb7c:	b955      	cbnz	r5, 2cb94 <_dtoa_r+0x8c>
   2cb7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cb80:	488d      	ldr	r0, [pc, #564]	; (2cdb8 <_dtoa_r+0x2b0>)
   2cb82:	2b00      	cmp	r3, #0
   2cb84:	d0ee      	beq.n	2cb64 <_dtoa_r+0x5c>
   2cb86:	f100 0308 	add.w	r3, r0, #8
   2cb8a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2cb8c:	6013      	str	r3, [r2, #0]
   2cb8e:	b01b      	add	sp, #108	; 0x6c
   2cb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cb96:	4889      	ldr	r0, [pc, #548]	; (2cdbc <_dtoa_r+0x2b4>)
   2cb98:	2b00      	cmp	r3, #0
   2cb9a:	d0e3      	beq.n	2cb64 <_dtoa_r+0x5c>
   2cb9c:	1cc3      	adds	r3, r0, #3
   2cb9e:	e7f4      	b.n	2cb8a <_dtoa_r+0x82>
   2cba0:	2301      	movs	r3, #1
   2cba2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   2cba6:	6033      	str	r3, [r6, #0]
   2cba8:	46ab      	mov	fp, r5
   2cbaa:	e7c5      	b.n	2cb38 <_dtoa_r+0x30>
   2cbac:	aa18      	add	r2, sp, #96	; 0x60
   2cbae:	ab19      	add	r3, sp, #100	; 0x64
   2cbb0:	9201      	str	r2, [sp, #4]
   2cbb2:	9300      	str	r3, [sp, #0]
   2cbb4:	4652      	mov	r2, sl
   2cbb6:	465b      	mov	r3, fp
   2cbb8:	4620      	mov	r0, r4
   2cbba:	f001 fab5 	bl	2e128 <__d2b>
   2cbbe:	0d2b      	lsrs	r3, r5, #20
   2cbc0:	4681      	mov	r9, r0
   2cbc2:	d071      	beq.n	2cca8 <_dtoa_r+0x1a0>
   2cbc4:	f3cb 0213 	ubfx	r2, fp, #0, #20
   2cbc8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   2cbcc:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2cbce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   2cbd2:	4650      	mov	r0, sl
   2cbd4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   2cbd8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   2cbdc:	2200      	movs	r2, #0
   2cbde:	4b78      	ldr	r3, [pc, #480]	; (2cdc0 <_dtoa_r+0x2b8>)
   2cbe0:	f7d3 fe00 	bl	7e4 <__aeabi_dsub>
   2cbe4:	a36c      	add	r3, pc, #432	; (adr r3, 2cd98 <_dtoa_r+0x290>)
   2cbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cbea:	f7d3 ffaf 	bl	b4c <__aeabi_dmul>
   2cbee:	a36c      	add	r3, pc, #432	; (adr r3, 2cda0 <_dtoa_r+0x298>)
   2cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cbf4:	f7d3 fdf8 	bl	7e8 <__adddf3>
   2cbf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2cbfc:	4630      	mov	r0, r6
   2cbfe:	f7d3 ff3f 	bl	a80 <__aeabi_i2d>
   2cc02:	a369      	add	r3, pc, #420	; (adr r3, 2cda8 <_dtoa_r+0x2a0>)
   2cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cc08:	f7d3 ffa0 	bl	b4c <__aeabi_dmul>
   2cc0c:	4602      	mov	r2, r0
   2cc0e:	460b      	mov	r3, r1
   2cc10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2cc14:	f7d3 fde8 	bl	7e8 <__adddf3>
   2cc18:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2cc1c:	f7d4 fa46 	bl	10ac <__aeabi_d2iz>
   2cc20:	2200      	movs	r2, #0
   2cc22:	9002      	str	r0, [sp, #8]
   2cc24:	2300      	movs	r3, #0
   2cc26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2cc2a:	f7d4 fa01 	bl	1030 <__aeabi_dcmplt>
   2cc2e:	2800      	cmp	r0, #0
   2cc30:	f040 8173 	bne.w	2cf1a <_dtoa_r+0x412>
   2cc34:	9d02      	ldr	r5, [sp, #8]
   2cc36:	2d16      	cmp	r5, #22
   2cc38:	f200 815d 	bhi.w	2cef6 <_dtoa_r+0x3ee>
   2cc3c:	4b61      	ldr	r3, [pc, #388]	; (2cdc4 <_dtoa_r+0x2bc>)
   2cc3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   2cc42:	e9d3 0100 	ldrd	r0, r1, [r3]
   2cc46:	4652      	mov	r2, sl
   2cc48:	465b      	mov	r3, fp
   2cc4a:	f7d4 fa0f 	bl	106c <__aeabi_dcmpgt>
   2cc4e:	2800      	cmp	r0, #0
   2cc50:	f000 81c5 	beq.w	2cfde <_dtoa_r+0x4d6>
   2cc54:	1e6b      	subs	r3, r5, #1
   2cc56:	9302      	str	r3, [sp, #8]
   2cc58:	2300      	movs	r3, #0
   2cc5a:	930e      	str	r3, [sp, #56]	; 0x38
   2cc5c:	1bbf      	subs	r7, r7, r6
   2cc5e:	1e7b      	subs	r3, r7, #1
   2cc60:	9306      	str	r3, [sp, #24]
   2cc62:	f100 8154 	bmi.w	2cf0e <_dtoa_r+0x406>
   2cc66:	2300      	movs	r3, #0
   2cc68:	9308      	str	r3, [sp, #32]
   2cc6a:	9b02      	ldr	r3, [sp, #8]
   2cc6c:	2b00      	cmp	r3, #0
   2cc6e:	f2c0 8145 	blt.w	2cefc <_dtoa_r+0x3f4>
   2cc72:	9a06      	ldr	r2, [sp, #24]
   2cc74:	930d      	str	r3, [sp, #52]	; 0x34
   2cc76:	4611      	mov	r1, r2
   2cc78:	4419      	add	r1, r3
   2cc7a:	2300      	movs	r3, #0
   2cc7c:	9106      	str	r1, [sp, #24]
   2cc7e:	930c      	str	r3, [sp, #48]	; 0x30
   2cc80:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cc82:	2b09      	cmp	r3, #9
   2cc84:	d82a      	bhi.n	2ccdc <_dtoa_r+0x1d4>
   2cc86:	2b05      	cmp	r3, #5
   2cc88:	f340 865b 	ble.w	2d942 <_dtoa_r+0xe3a>
   2cc8c:	3b04      	subs	r3, #4
   2cc8e:	9324      	str	r3, [sp, #144]	; 0x90
   2cc90:	2500      	movs	r5, #0
   2cc92:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cc94:	3b02      	subs	r3, #2
   2cc96:	2b03      	cmp	r3, #3
   2cc98:	f200 8642 	bhi.w	2d920 <_dtoa_r+0xe18>
   2cc9c:	e8df f013 	tbh	[pc, r3, lsl #1]
   2cca0:	02c903d4 	.word	0x02c903d4
   2cca4:	046103df 	.word	0x046103df
   2cca8:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2ccaa:	9e19      	ldr	r6, [sp, #100]	; 0x64
   2ccac:	443e      	add	r6, r7
   2ccae:	f206 4332 	addw	r3, r6, #1074	; 0x432
   2ccb2:	2b20      	cmp	r3, #32
   2ccb4:	f340 818e 	ble.w	2cfd4 <_dtoa_r+0x4cc>
   2ccb8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   2ccbc:	f206 4012 	addw	r0, r6, #1042	; 0x412
   2ccc0:	409d      	lsls	r5, r3
   2ccc2:	fa2a f000 	lsr.w	r0, sl, r0
   2ccc6:	4328      	orrs	r0, r5
   2ccc8:	f7d3 feca 	bl	a60 <__aeabi_ui2d>
   2cccc:	2301      	movs	r3, #1
   2ccce:	3e01      	subs	r6, #1
   2ccd0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   2ccd4:	9314      	str	r3, [sp, #80]	; 0x50
   2ccd6:	e781      	b.n	2cbdc <_dtoa_r+0xd4>
   2ccd8:	483b      	ldr	r0, [pc, #236]	; (2cdc8 <_dtoa_r+0x2c0>)
   2ccda:	e743      	b.n	2cb64 <_dtoa_r+0x5c>
   2ccdc:	2100      	movs	r1, #0
   2ccde:	6461      	str	r1, [r4, #68]	; 0x44
   2cce0:	4620      	mov	r0, r4
   2cce2:	9125      	str	r1, [sp, #148]	; 0x94
   2cce4:	f000 ff82 	bl	2dbec <_Balloc>
   2cce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ccec:	930a      	str	r3, [sp, #40]	; 0x28
   2ccee:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2ccf0:	930f      	str	r3, [sp, #60]	; 0x3c
   2ccf2:	2301      	movs	r3, #1
   2ccf4:	9004      	str	r0, [sp, #16]
   2ccf6:	6420      	str	r0, [r4, #64]	; 0x40
   2ccf8:	9224      	str	r2, [sp, #144]	; 0x90
   2ccfa:	930b      	str	r3, [sp, #44]	; 0x2c
   2ccfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2ccfe:	2b00      	cmp	r3, #0
   2cd00:	f2c0 80d9 	blt.w	2ceb6 <_dtoa_r+0x3ae>
   2cd04:	9a02      	ldr	r2, [sp, #8]
   2cd06:	2a0e      	cmp	r2, #14
   2cd08:	f300 80d5 	bgt.w	2ceb6 <_dtoa_r+0x3ae>
   2cd0c:	4b2d      	ldr	r3, [pc, #180]	; (2cdc4 <_dtoa_r+0x2bc>)
   2cd0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2cd12:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cd16:	e9cd 2308 	strd	r2, r3, [sp, #32]
   2cd1a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2cd1c:	2b00      	cmp	r3, #0
   2cd1e:	f2c0 83ba 	blt.w	2d496 <_dtoa_r+0x98e>
   2cd22:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   2cd26:	4650      	mov	r0, sl
   2cd28:	462a      	mov	r2, r5
   2cd2a:	4633      	mov	r3, r6
   2cd2c:	4659      	mov	r1, fp
   2cd2e:	f7d4 f837 	bl	da0 <__aeabi_ddiv>
   2cd32:	f7d4 f9bb 	bl	10ac <__aeabi_d2iz>
   2cd36:	4680      	mov	r8, r0
   2cd38:	f7d3 fea2 	bl	a80 <__aeabi_i2d>
   2cd3c:	462a      	mov	r2, r5
   2cd3e:	4633      	mov	r3, r6
   2cd40:	f7d3 ff04 	bl	b4c <__aeabi_dmul>
   2cd44:	460b      	mov	r3, r1
   2cd46:	4602      	mov	r2, r0
   2cd48:	4659      	mov	r1, fp
   2cd4a:	4650      	mov	r0, sl
   2cd4c:	f7d3 fd4a 	bl	7e4 <__aeabi_dsub>
   2cd50:	9d04      	ldr	r5, [sp, #16]
   2cd52:	f108 0330 	add.w	r3, r8, #48	; 0x30
   2cd56:	702b      	strb	r3, [r5, #0]
   2cd58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cd5a:	2b01      	cmp	r3, #1
   2cd5c:	4606      	mov	r6, r0
   2cd5e:	460f      	mov	r7, r1
   2cd60:	f105 0501 	add.w	r5, r5, #1
   2cd64:	d068      	beq.n	2ce38 <_dtoa_r+0x330>
   2cd66:	2200      	movs	r2, #0
   2cd68:	4b18      	ldr	r3, [pc, #96]	; (2cdcc <_dtoa_r+0x2c4>)
   2cd6a:	f7d3 feef 	bl	b4c <__aeabi_dmul>
   2cd6e:	2200      	movs	r2, #0
   2cd70:	2300      	movs	r3, #0
   2cd72:	4606      	mov	r6, r0
   2cd74:	460f      	mov	r7, r1
   2cd76:	f7d4 f951 	bl	101c <__aeabi_dcmpeq>
   2cd7a:	2800      	cmp	r0, #0
   2cd7c:	f040 8088 	bne.w	2ce90 <_dtoa_r+0x388>
   2cd80:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   2cd84:	f04f 0a00 	mov.w	sl, #0
   2cd88:	f8df b040 	ldr.w	fp, [pc, #64]	; 2cdcc <_dtoa_r+0x2c4>
   2cd8c:	940c      	str	r4, [sp, #48]	; 0x30
   2cd8e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2cd92:	e028      	b.n	2cde6 <_dtoa_r+0x2de>
   2cd94:	f3af 8000 	nop.w
   2cd98:	636f4361 	.word	0x636f4361
   2cd9c:	3fd287a7 	.word	0x3fd287a7
   2cda0:	8b60c8b3 	.word	0x8b60c8b3
   2cda4:	3fc68a28 	.word	0x3fc68a28
   2cda8:	509f79fb 	.word	0x509f79fb
   2cdac:	3fd34413 	.word	0x3fd34413
   2cdb0:	7ff00000 	.word	0x7ff00000
   2cdb4:	00032d6d 	.word	0x00032d6d
   2cdb8:	00033358 	.word	0x00033358
   2cdbc:	00033364 	.word	0x00033364
   2cdc0:	3ff80000 	.word	0x3ff80000
   2cdc4:	00033390 	.word	0x00033390
   2cdc8:	00032d6c 	.word	0x00032d6c
   2cdcc:	40240000 	.word	0x40240000
   2cdd0:	f7d3 febc 	bl	b4c <__aeabi_dmul>
   2cdd4:	2200      	movs	r2, #0
   2cdd6:	2300      	movs	r3, #0
   2cdd8:	4606      	mov	r6, r0
   2cdda:	460f      	mov	r7, r1
   2cddc:	f7d4 f91e 	bl	101c <__aeabi_dcmpeq>
   2cde0:	2800      	cmp	r0, #0
   2cde2:	f040 83c1 	bne.w	2d568 <_dtoa_r+0xa60>
   2cde6:	4642      	mov	r2, r8
   2cde8:	464b      	mov	r3, r9
   2cdea:	4630      	mov	r0, r6
   2cdec:	4639      	mov	r1, r7
   2cdee:	f7d3 ffd7 	bl	da0 <__aeabi_ddiv>
   2cdf2:	f7d4 f95b 	bl	10ac <__aeabi_d2iz>
   2cdf6:	4604      	mov	r4, r0
   2cdf8:	f7d3 fe42 	bl	a80 <__aeabi_i2d>
   2cdfc:	4642      	mov	r2, r8
   2cdfe:	464b      	mov	r3, r9
   2ce00:	f7d3 fea4 	bl	b4c <__aeabi_dmul>
   2ce04:	4602      	mov	r2, r0
   2ce06:	460b      	mov	r3, r1
   2ce08:	4630      	mov	r0, r6
   2ce0a:	4639      	mov	r1, r7
   2ce0c:	f7d3 fcea 	bl	7e4 <__aeabi_dsub>
   2ce10:	f104 0e30 	add.w	lr, r4, #48	; 0x30
   2ce14:	9e04      	ldr	r6, [sp, #16]
   2ce16:	f805 eb01 	strb.w	lr, [r5], #1
   2ce1a:	eba5 0e06 	sub.w	lr, r5, r6
   2ce1e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2ce20:	45b6      	cmp	lr, r6
   2ce22:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2ce26:	4652      	mov	r2, sl
   2ce28:	465b      	mov	r3, fp
   2ce2a:	d1d1      	bne.n	2cdd0 <_dtoa_r+0x2c8>
   2ce2c:	46a0      	mov	r8, r4
   2ce2e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2ce32:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2ce34:	4606      	mov	r6, r0
   2ce36:	460f      	mov	r7, r1
   2ce38:	4632      	mov	r2, r6
   2ce3a:	463b      	mov	r3, r7
   2ce3c:	4630      	mov	r0, r6
   2ce3e:	4639      	mov	r1, r7
   2ce40:	f7d3 fcd2 	bl	7e8 <__adddf3>
   2ce44:	4606      	mov	r6, r0
   2ce46:	460f      	mov	r7, r1
   2ce48:	4602      	mov	r2, r0
   2ce4a:	460b      	mov	r3, r1
   2ce4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2ce50:	f7d4 f8ee 	bl	1030 <__aeabi_dcmplt>
   2ce54:	b948      	cbnz	r0, 2ce6a <_dtoa_r+0x362>
   2ce56:	4632      	mov	r2, r6
   2ce58:	463b      	mov	r3, r7
   2ce5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2ce5e:	f7d4 f8dd 	bl	101c <__aeabi_dcmpeq>
   2ce62:	b1a8      	cbz	r0, 2ce90 <_dtoa_r+0x388>
   2ce64:	f018 0f01 	tst.w	r8, #1
   2ce68:	d012      	beq.n	2ce90 <_dtoa_r+0x388>
   2ce6a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2ce6e:	9a04      	ldr	r2, [sp, #16]
   2ce70:	1e6b      	subs	r3, r5, #1
   2ce72:	e004      	b.n	2ce7e <_dtoa_r+0x376>
   2ce74:	429a      	cmp	r2, r3
   2ce76:	f000 8401 	beq.w	2d67c <_dtoa_r+0xb74>
   2ce7a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   2ce7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   2ce82:	f103 0501 	add.w	r5, r3, #1
   2ce86:	d0f5      	beq.n	2ce74 <_dtoa_r+0x36c>
   2ce88:	f108 0801 	add.w	r8, r8, #1
   2ce8c:	f883 8000 	strb.w	r8, [r3]
   2ce90:	4649      	mov	r1, r9
   2ce92:	4620      	mov	r0, r4
   2ce94:	f000 fed0 	bl	2dc38 <_Bfree>
   2ce98:	2200      	movs	r2, #0
   2ce9a:	9b02      	ldr	r3, [sp, #8]
   2ce9c:	702a      	strb	r2, [r5, #0]
   2ce9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cea0:	3301      	adds	r3, #1
   2cea2:	6013      	str	r3, [r2, #0]
   2cea4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cea6:	2b00      	cmp	r3, #0
   2cea8:	f000 839e 	beq.w	2d5e8 <_dtoa_r+0xae0>
   2ceac:	9804      	ldr	r0, [sp, #16]
   2ceae:	601d      	str	r5, [r3, #0]
   2ceb0:	b01b      	add	sp, #108	; 0x6c
   2ceb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ceb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2ceb8:	2a00      	cmp	r2, #0
   2ceba:	d03e      	beq.n	2cf3a <_dtoa_r+0x432>
   2cebc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2cebe:	2a01      	cmp	r2, #1
   2cec0:	f340 8311 	ble.w	2d4e6 <_dtoa_r+0x9de>
   2cec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cec6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2cec8:	1e5f      	subs	r7, r3, #1
   2ceca:	42ba      	cmp	r2, r7
   2cecc:	f2c0 838f 	blt.w	2d5ee <_dtoa_r+0xae6>
   2ced0:	1bd7      	subs	r7, r2, r7
   2ced2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ced4:	2b00      	cmp	r3, #0
   2ced6:	f2c0 848b 	blt.w	2d7f0 <_dtoa_r+0xce8>
   2ceda:	9d08      	ldr	r5, [sp, #32]
   2cedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cede:	9a08      	ldr	r2, [sp, #32]
   2cee0:	441a      	add	r2, r3
   2cee2:	9208      	str	r2, [sp, #32]
   2cee4:	9a06      	ldr	r2, [sp, #24]
   2cee6:	2101      	movs	r1, #1
   2cee8:	441a      	add	r2, r3
   2ceea:	4620      	mov	r0, r4
   2ceec:	9206      	str	r2, [sp, #24]
   2ceee:	f000 ff3d 	bl	2dd6c <__i2b>
   2cef2:	4606      	mov	r6, r0
   2cef4:	e024      	b.n	2cf40 <_dtoa_r+0x438>
   2cef6:	2301      	movs	r3, #1
   2cef8:	930e      	str	r3, [sp, #56]	; 0x38
   2cefa:	e6af      	b.n	2cc5c <_dtoa_r+0x154>
   2cefc:	9a08      	ldr	r2, [sp, #32]
   2cefe:	9b02      	ldr	r3, [sp, #8]
   2cf00:	1ad2      	subs	r2, r2, r3
   2cf02:	425b      	negs	r3, r3
   2cf04:	930c      	str	r3, [sp, #48]	; 0x30
   2cf06:	2300      	movs	r3, #0
   2cf08:	9208      	str	r2, [sp, #32]
   2cf0a:	930d      	str	r3, [sp, #52]	; 0x34
   2cf0c:	e6b8      	b.n	2cc80 <_dtoa_r+0x178>
   2cf0e:	f1c7 0301 	rsb	r3, r7, #1
   2cf12:	9308      	str	r3, [sp, #32]
   2cf14:	2300      	movs	r3, #0
   2cf16:	9306      	str	r3, [sp, #24]
   2cf18:	e6a7      	b.n	2cc6a <_dtoa_r+0x162>
   2cf1a:	9d02      	ldr	r5, [sp, #8]
   2cf1c:	4628      	mov	r0, r5
   2cf1e:	f7d3 fdaf 	bl	a80 <__aeabi_i2d>
   2cf22:	4602      	mov	r2, r0
   2cf24:	460b      	mov	r3, r1
   2cf26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2cf2a:	f7d4 f877 	bl	101c <__aeabi_dcmpeq>
   2cf2e:	2800      	cmp	r0, #0
   2cf30:	f47f ae80 	bne.w	2cc34 <_dtoa_r+0x12c>
   2cf34:	1e6b      	subs	r3, r5, #1
   2cf36:	9302      	str	r3, [sp, #8]
   2cf38:	e67c      	b.n	2cc34 <_dtoa_r+0x12c>
   2cf3a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2cf3c:	9d08      	ldr	r5, [sp, #32]
   2cf3e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2cf40:	2d00      	cmp	r5, #0
   2cf42:	dd0c      	ble.n	2cf5e <_dtoa_r+0x456>
   2cf44:	9906      	ldr	r1, [sp, #24]
   2cf46:	2900      	cmp	r1, #0
   2cf48:	460b      	mov	r3, r1
   2cf4a:	dd08      	ble.n	2cf5e <_dtoa_r+0x456>
   2cf4c:	42a9      	cmp	r1, r5
   2cf4e:	9a08      	ldr	r2, [sp, #32]
   2cf50:	bfa8      	it	ge
   2cf52:	462b      	movge	r3, r5
   2cf54:	1ad2      	subs	r2, r2, r3
   2cf56:	1aed      	subs	r5, r5, r3
   2cf58:	1acb      	subs	r3, r1, r3
   2cf5a:	9208      	str	r2, [sp, #32]
   2cf5c:	9306      	str	r3, [sp, #24]
   2cf5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2cf60:	b1d3      	cbz	r3, 2cf98 <_dtoa_r+0x490>
   2cf62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2cf64:	2b00      	cmp	r3, #0
   2cf66:	f000 82b7 	beq.w	2d4d8 <_dtoa_r+0x9d0>
   2cf6a:	2f00      	cmp	r7, #0
   2cf6c:	dd10      	ble.n	2cf90 <_dtoa_r+0x488>
   2cf6e:	4631      	mov	r1, r6
   2cf70:	463a      	mov	r2, r7
   2cf72:	4620      	mov	r0, r4
   2cf74:	f000 ff96 	bl	2dea4 <__pow5mult>
   2cf78:	464a      	mov	r2, r9
   2cf7a:	4601      	mov	r1, r0
   2cf7c:	4606      	mov	r6, r0
   2cf7e:	4620      	mov	r0, r4
   2cf80:	f000 fefe 	bl	2dd80 <__multiply>
   2cf84:	4649      	mov	r1, r9
   2cf86:	4680      	mov	r8, r0
   2cf88:	4620      	mov	r0, r4
   2cf8a:	f000 fe55 	bl	2dc38 <_Bfree>
   2cf8e:	46c1      	mov	r9, r8
   2cf90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2cf92:	1bda      	subs	r2, r3, r7
   2cf94:	f040 82a1 	bne.w	2d4da <_dtoa_r+0x9d2>
   2cf98:	2101      	movs	r1, #1
   2cf9a:	4620      	mov	r0, r4
   2cf9c:	f000 fee6 	bl	2dd6c <__i2b>
   2cfa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2cfa2:	2b00      	cmp	r3, #0
   2cfa4:	4680      	mov	r8, r0
   2cfa6:	dd1c      	ble.n	2cfe2 <_dtoa_r+0x4da>
   2cfa8:	4601      	mov	r1, r0
   2cfaa:	461a      	mov	r2, r3
   2cfac:	4620      	mov	r0, r4
   2cfae:	f000 ff79 	bl	2dea4 <__pow5mult>
   2cfb2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cfb4:	2b01      	cmp	r3, #1
   2cfb6:	4680      	mov	r8, r0
   2cfb8:	f340 8254 	ble.w	2d464 <_dtoa_r+0x95c>
   2cfbc:	2300      	movs	r3, #0
   2cfbe:	930c      	str	r3, [sp, #48]	; 0x30
   2cfc0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2cfc4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   2cfc8:	6918      	ldr	r0, [r3, #16]
   2cfca:	f000 fe7f 	bl	2dccc <__hi0bits>
   2cfce:	f1c0 0020 	rsb	r0, r0, #32
   2cfd2:	e010      	b.n	2cff6 <_dtoa_r+0x4ee>
   2cfd4:	f1c3 0520 	rsb	r5, r3, #32
   2cfd8:	fa0a f005 	lsl.w	r0, sl, r5
   2cfdc:	e674      	b.n	2ccc8 <_dtoa_r+0x1c0>
   2cfde:	900e      	str	r0, [sp, #56]	; 0x38
   2cfe0:	e63c      	b.n	2cc5c <_dtoa_r+0x154>
   2cfe2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cfe4:	2b01      	cmp	r3, #1
   2cfe6:	f340 8287 	ble.w	2d4f8 <_dtoa_r+0x9f0>
   2cfea:	2300      	movs	r3, #0
   2cfec:	930c      	str	r3, [sp, #48]	; 0x30
   2cfee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2cff0:	2001      	movs	r0, #1
   2cff2:	2b00      	cmp	r3, #0
   2cff4:	d1e4      	bne.n	2cfc0 <_dtoa_r+0x4b8>
   2cff6:	9a06      	ldr	r2, [sp, #24]
   2cff8:	4410      	add	r0, r2
   2cffa:	f010 001f 	ands.w	r0, r0, #31
   2cffe:	f000 80a1 	beq.w	2d144 <_dtoa_r+0x63c>
   2d002:	f1c0 0320 	rsb	r3, r0, #32
   2d006:	2b04      	cmp	r3, #4
   2d008:	f340 849e 	ble.w	2d948 <_dtoa_r+0xe40>
   2d00c:	9b08      	ldr	r3, [sp, #32]
   2d00e:	f1c0 001c 	rsb	r0, r0, #28
   2d012:	4403      	add	r3, r0
   2d014:	9308      	str	r3, [sp, #32]
   2d016:	4613      	mov	r3, r2
   2d018:	4403      	add	r3, r0
   2d01a:	4405      	add	r5, r0
   2d01c:	9306      	str	r3, [sp, #24]
   2d01e:	9b08      	ldr	r3, [sp, #32]
   2d020:	2b00      	cmp	r3, #0
   2d022:	dd05      	ble.n	2d030 <_dtoa_r+0x528>
   2d024:	4649      	mov	r1, r9
   2d026:	461a      	mov	r2, r3
   2d028:	4620      	mov	r0, r4
   2d02a:	f000 ff8b 	bl	2df44 <__lshift>
   2d02e:	4681      	mov	r9, r0
   2d030:	9b06      	ldr	r3, [sp, #24]
   2d032:	2b00      	cmp	r3, #0
   2d034:	dd05      	ble.n	2d042 <_dtoa_r+0x53a>
   2d036:	4641      	mov	r1, r8
   2d038:	461a      	mov	r2, r3
   2d03a:	4620      	mov	r0, r4
   2d03c:	f000 ff82 	bl	2df44 <__lshift>
   2d040:	4680      	mov	r8, r0
   2d042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d044:	2b00      	cmp	r3, #0
   2d046:	f040 8086 	bne.w	2d156 <_dtoa_r+0x64e>
   2d04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d04c:	2b00      	cmp	r3, #0
   2d04e:	f340 8266 	ble.w	2d51e <_dtoa_r+0xa16>
   2d052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d054:	2b00      	cmp	r3, #0
   2d056:	f000 8098 	beq.w	2d18a <_dtoa_r+0x682>
   2d05a:	2d00      	cmp	r5, #0
   2d05c:	dd05      	ble.n	2d06a <_dtoa_r+0x562>
   2d05e:	4631      	mov	r1, r6
   2d060:	462a      	mov	r2, r5
   2d062:	4620      	mov	r0, r4
   2d064:	f000 ff6e 	bl	2df44 <__lshift>
   2d068:	4606      	mov	r6, r0
   2d06a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d06c:	2b00      	cmp	r3, #0
   2d06e:	f040 8337 	bne.w	2d6e0 <_dtoa_r+0xbd8>
   2d072:	9606      	str	r6, [sp, #24]
   2d074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d076:	9a04      	ldr	r2, [sp, #16]
   2d078:	f8dd b018 	ldr.w	fp, [sp, #24]
   2d07c:	3b01      	subs	r3, #1
   2d07e:	18d3      	adds	r3, r2, r3
   2d080:	930b      	str	r3, [sp, #44]	; 0x2c
   2d082:	f00a 0301 	and.w	r3, sl, #1
   2d086:	930c      	str	r3, [sp, #48]	; 0x30
   2d088:	4617      	mov	r7, r2
   2d08a:	46c2      	mov	sl, r8
   2d08c:	4651      	mov	r1, sl
   2d08e:	4648      	mov	r0, r9
   2d090:	f7ff fca6 	bl	2c9e0 <quorem>
   2d094:	4631      	mov	r1, r6
   2d096:	4605      	mov	r5, r0
   2d098:	4648      	mov	r0, r9
   2d09a:	f000 ffa5 	bl	2dfe8 <__mcmp>
   2d09e:	465a      	mov	r2, fp
   2d0a0:	900a      	str	r0, [sp, #40]	; 0x28
   2d0a2:	4651      	mov	r1, sl
   2d0a4:	4620      	mov	r0, r4
   2d0a6:	f000 ffbb 	bl	2e020 <__mdiff>
   2d0aa:	68c2      	ldr	r2, [r0, #12]
   2d0ac:	4680      	mov	r8, r0
   2d0ae:	f105 0330 	add.w	r3, r5, #48	; 0x30
   2d0b2:	2a00      	cmp	r2, #0
   2d0b4:	f040 822b 	bne.w	2d50e <_dtoa_r+0xa06>
   2d0b8:	4601      	mov	r1, r0
   2d0ba:	4648      	mov	r0, r9
   2d0bc:	9308      	str	r3, [sp, #32]
   2d0be:	f000 ff93 	bl	2dfe8 <__mcmp>
   2d0c2:	4641      	mov	r1, r8
   2d0c4:	9006      	str	r0, [sp, #24]
   2d0c6:	4620      	mov	r0, r4
   2d0c8:	f000 fdb6 	bl	2dc38 <_Bfree>
   2d0cc:	9a06      	ldr	r2, [sp, #24]
   2d0ce:	9b08      	ldr	r3, [sp, #32]
   2d0d0:	b932      	cbnz	r2, 2d0e0 <_dtoa_r+0x5d8>
   2d0d2:	9924      	ldr	r1, [sp, #144]	; 0x90
   2d0d4:	b921      	cbnz	r1, 2d0e0 <_dtoa_r+0x5d8>
   2d0d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2d0d8:	2a00      	cmp	r2, #0
   2d0da:	f000 83ef 	beq.w	2d8bc <_dtoa_r+0xdb4>
   2d0de:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2d0e0:	990a      	ldr	r1, [sp, #40]	; 0x28
   2d0e2:	2900      	cmp	r1, #0
   2d0e4:	f2c0 829f 	blt.w	2d626 <_dtoa_r+0xb1e>
   2d0e8:	d105      	bne.n	2d0f6 <_dtoa_r+0x5ee>
   2d0ea:	9924      	ldr	r1, [sp, #144]	; 0x90
   2d0ec:	b919      	cbnz	r1, 2d0f6 <_dtoa_r+0x5ee>
   2d0ee:	990c      	ldr	r1, [sp, #48]	; 0x30
   2d0f0:	2900      	cmp	r1, #0
   2d0f2:	f000 8298 	beq.w	2d626 <_dtoa_r+0xb1e>
   2d0f6:	2a00      	cmp	r2, #0
   2d0f8:	f300 8306 	bgt.w	2d708 <_dtoa_r+0xc00>
   2d0fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2d0fe:	703b      	strb	r3, [r7, #0]
   2d100:	f107 0801 	add.w	r8, r7, #1
   2d104:	4297      	cmp	r7, r2
   2d106:	4645      	mov	r5, r8
   2d108:	f000 830c 	beq.w	2d724 <_dtoa_r+0xc1c>
   2d10c:	4649      	mov	r1, r9
   2d10e:	2300      	movs	r3, #0
   2d110:	220a      	movs	r2, #10
   2d112:	4620      	mov	r0, r4
   2d114:	f000 fd9a 	bl	2dc4c <__multadd>
   2d118:	455e      	cmp	r6, fp
   2d11a:	4681      	mov	r9, r0
   2d11c:	4631      	mov	r1, r6
   2d11e:	f04f 0300 	mov.w	r3, #0
   2d122:	f04f 020a 	mov.w	r2, #10
   2d126:	4620      	mov	r0, r4
   2d128:	f000 81eb 	beq.w	2d502 <_dtoa_r+0x9fa>
   2d12c:	f000 fd8e 	bl	2dc4c <__multadd>
   2d130:	4659      	mov	r1, fp
   2d132:	4606      	mov	r6, r0
   2d134:	2300      	movs	r3, #0
   2d136:	220a      	movs	r2, #10
   2d138:	4620      	mov	r0, r4
   2d13a:	f000 fd87 	bl	2dc4c <__multadd>
   2d13e:	4647      	mov	r7, r8
   2d140:	4683      	mov	fp, r0
   2d142:	e7a3      	b.n	2d08c <_dtoa_r+0x584>
   2d144:	201c      	movs	r0, #28
   2d146:	9b08      	ldr	r3, [sp, #32]
   2d148:	4403      	add	r3, r0
   2d14a:	9308      	str	r3, [sp, #32]
   2d14c:	9b06      	ldr	r3, [sp, #24]
   2d14e:	4403      	add	r3, r0
   2d150:	4405      	add	r5, r0
   2d152:	9306      	str	r3, [sp, #24]
   2d154:	e763      	b.n	2d01e <_dtoa_r+0x516>
   2d156:	4641      	mov	r1, r8
   2d158:	4648      	mov	r0, r9
   2d15a:	f000 ff45 	bl	2dfe8 <__mcmp>
   2d15e:	2800      	cmp	r0, #0
   2d160:	f6bf af73 	bge.w	2d04a <_dtoa_r+0x542>
   2d164:	9f02      	ldr	r7, [sp, #8]
   2d166:	4649      	mov	r1, r9
   2d168:	2300      	movs	r3, #0
   2d16a:	220a      	movs	r2, #10
   2d16c:	4620      	mov	r0, r4
   2d16e:	3f01      	subs	r7, #1
   2d170:	9702      	str	r7, [sp, #8]
   2d172:	f000 fd6b 	bl	2dc4c <__multadd>
   2d176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d178:	4681      	mov	r9, r0
   2d17a:	2b00      	cmp	r3, #0
   2d17c:	f040 83b6 	bne.w	2d8ec <_dtoa_r+0xde4>
   2d180:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d182:	2b00      	cmp	r3, #0
   2d184:	f340 83bf 	ble.w	2d906 <_dtoa_r+0xdfe>
   2d188:	930a      	str	r3, [sp, #40]	; 0x28
   2d18a:	f8dd b010 	ldr.w	fp, [sp, #16]
   2d18e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2d190:	465d      	mov	r5, fp
   2d192:	e002      	b.n	2d19a <_dtoa_r+0x692>
   2d194:	f000 fd5a 	bl	2dc4c <__multadd>
   2d198:	4681      	mov	r9, r0
   2d19a:	4641      	mov	r1, r8
   2d19c:	4648      	mov	r0, r9
   2d19e:	f7ff fc1f 	bl	2c9e0 <quorem>
   2d1a2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   2d1a6:	f805 ab01 	strb.w	sl, [r5], #1
   2d1aa:	eba5 030b 	sub.w	r3, r5, fp
   2d1ae:	42bb      	cmp	r3, r7
   2d1b0:	f04f 020a 	mov.w	r2, #10
   2d1b4:	f04f 0300 	mov.w	r3, #0
   2d1b8:	4649      	mov	r1, r9
   2d1ba:	4620      	mov	r0, r4
   2d1bc:	dbea      	blt.n	2d194 <_dtoa_r+0x68c>
   2d1be:	9b04      	ldr	r3, [sp, #16]
   2d1c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d1c2:	2a01      	cmp	r2, #1
   2d1c4:	bfac      	ite	ge
   2d1c6:	189b      	addge	r3, r3, r2
   2d1c8:	3301      	addlt	r3, #1
   2d1ca:	461d      	mov	r5, r3
   2d1cc:	f04f 0b00 	mov.w	fp, #0
   2d1d0:	4649      	mov	r1, r9
   2d1d2:	2201      	movs	r2, #1
   2d1d4:	4620      	mov	r0, r4
   2d1d6:	f000 feb5 	bl	2df44 <__lshift>
   2d1da:	4641      	mov	r1, r8
   2d1dc:	4681      	mov	r9, r0
   2d1de:	f000 ff03 	bl	2dfe8 <__mcmp>
   2d1e2:	2800      	cmp	r0, #0
   2d1e4:	f340 823d 	ble.w	2d662 <_dtoa_r+0xb5a>
   2d1e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   2d1ec:	9904      	ldr	r1, [sp, #16]
   2d1ee:	1e6b      	subs	r3, r5, #1
   2d1f0:	e004      	b.n	2d1fc <_dtoa_r+0x6f4>
   2d1f2:	428b      	cmp	r3, r1
   2d1f4:	f000 81ae 	beq.w	2d554 <_dtoa_r+0xa4c>
   2d1f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2d1fc:	2a39      	cmp	r2, #57	; 0x39
   2d1fe:	f103 0501 	add.w	r5, r3, #1
   2d202:	d0f6      	beq.n	2d1f2 <_dtoa_r+0x6ea>
   2d204:	3201      	adds	r2, #1
   2d206:	701a      	strb	r2, [r3, #0]
   2d208:	4641      	mov	r1, r8
   2d20a:	4620      	mov	r0, r4
   2d20c:	f000 fd14 	bl	2dc38 <_Bfree>
   2d210:	2e00      	cmp	r6, #0
   2d212:	f43f ae3d 	beq.w	2ce90 <_dtoa_r+0x388>
   2d216:	f1bb 0f00 	cmp.w	fp, #0
   2d21a:	d005      	beq.n	2d228 <_dtoa_r+0x720>
   2d21c:	45b3      	cmp	fp, r6
   2d21e:	d003      	beq.n	2d228 <_dtoa_r+0x720>
   2d220:	4659      	mov	r1, fp
   2d222:	4620      	mov	r0, r4
   2d224:	f000 fd08 	bl	2dc38 <_Bfree>
   2d228:	4631      	mov	r1, r6
   2d22a:	4620      	mov	r0, r4
   2d22c:	f000 fd04 	bl	2dc38 <_Bfree>
   2d230:	e62e      	b.n	2ce90 <_dtoa_r+0x388>
   2d232:	2300      	movs	r3, #0
   2d234:	930b      	str	r3, [sp, #44]	; 0x2c
   2d236:	9b02      	ldr	r3, [sp, #8]
   2d238:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2d23a:	4413      	add	r3, r2
   2d23c:	930f      	str	r3, [sp, #60]	; 0x3c
   2d23e:	3301      	adds	r3, #1
   2d240:	2b01      	cmp	r3, #1
   2d242:	461f      	mov	r7, r3
   2d244:	461e      	mov	r6, r3
   2d246:	930a      	str	r3, [sp, #40]	; 0x28
   2d248:	bfb8      	it	lt
   2d24a:	2701      	movlt	r7, #1
   2d24c:	2100      	movs	r1, #0
   2d24e:	2f17      	cmp	r7, #23
   2d250:	6461      	str	r1, [r4, #68]	; 0x44
   2d252:	d90a      	bls.n	2d26a <_dtoa_r+0x762>
   2d254:	2201      	movs	r2, #1
   2d256:	2304      	movs	r3, #4
   2d258:	005b      	lsls	r3, r3, #1
   2d25a:	f103 0014 	add.w	r0, r3, #20
   2d25e:	4287      	cmp	r7, r0
   2d260:	4611      	mov	r1, r2
   2d262:	f102 0201 	add.w	r2, r2, #1
   2d266:	d2f7      	bcs.n	2d258 <_dtoa_r+0x750>
   2d268:	6461      	str	r1, [r4, #68]	; 0x44
   2d26a:	4620      	mov	r0, r4
   2d26c:	f000 fcbe 	bl	2dbec <_Balloc>
   2d270:	2e0e      	cmp	r6, #14
   2d272:	9004      	str	r0, [sp, #16]
   2d274:	6420      	str	r0, [r4, #64]	; 0x40
   2d276:	f63f ad41 	bhi.w	2ccfc <_dtoa_r+0x1f4>
   2d27a:	2d00      	cmp	r5, #0
   2d27c:	f43f ad3e 	beq.w	2ccfc <_dtoa_r+0x1f4>
   2d280:	9902      	ldr	r1, [sp, #8]
   2d282:	2900      	cmp	r1, #0
   2d284:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   2d288:	f340 8202 	ble.w	2d690 <_dtoa_r+0xb88>
   2d28c:	4bb8      	ldr	r3, [pc, #736]	; (2d570 <_dtoa_r+0xa68>)
   2d28e:	f001 020f 	and.w	r2, r1, #15
   2d292:	110d      	asrs	r5, r1, #4
   2d294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d298:	06e9      	lsls	r1, r5, #27
   2d29a:	e9d3 6700 	ldrd	r6, r7, [r3]
   2d29e:	f140 81ae 	bpl.w	2d5fe <_dtoa_r+0xaf6>
   2d2a2:	4bb4      	ldr	r3, [pc, #720]	; (2d574 <_dtoa_r+0xa6c>)
   2d2a4:	4650      	mov	r0, sl
   2d2a6:	4659      	mov	r1, fp
   2d2a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   2d2ac:	f7d3 fd78 	bl	da0 <__aeabi_ddiv>
   2d2b0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   2d2b4:	f005 050f 	and.w	r5, r5, #15
   2d2b8:	f04f 0a03 	mov.w	sl, #3
   2d2bc:	b18d      	cbz	r5, 2d2e2 <_dtoa_r+0x7da>
   2d2be:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 2d574 <_dtoa_r+0xa6c>
   2d2c2:	07ea      	lsls	r2, r5, #31
   2d2c4:	d509      	bpl.n	2d2da <_dtoa_r+0x7d2>
   2d2c6:	4630      	mov	r0, r6
   2d2c8:	4639      	mov	r1, r7
   2d2ca:	e9d8 2300 	ldrd	r2, r3, [r8]
   2d2ce:	f7d3 fc3d 	bl	b4c <__aeabi_dmul>
   2d2d2:	f10a 0a01 	add.w	sl, sl, #1
   2d2d6:	4606      	mov	r6, r0
   2d2d8:	460f      	mov	r7, r1
   2d2da:	106d      	asrs	r5, r5, #1
   2d2dc:	f108 0808 	add.w	r8, r8, #8
   2d2e0:	d1ef      	bne.n	2d2c2 <_dtoa_r+0x7ba>
   2d2e2:	463b      	mov	r3, r7
   2d2e4:	4632      	mov	r2, r6
   2d2e6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   2d2ea:	f7d3 fd59 	bl	da0 <__aeabi_ddiv>
   2d2ee:	4607      	mov	r7, r0
   2d2f0:	4688      	mov	r8, r1
   2d2f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d2f4:	b143      	cbz	r3, 2d308 <_dtoa_r+0x800>
   2d2f6:	2200      	movs	r2, #0
   2d2f8:	4b9f      	ldr	r3, [pc, #636]	; (2d578 <_dtoa_r+0xa70>)
   2d2fa:	4638      	mov	r0, r7
   2d2fc:	4641      	mov	r1, r8
   2d2fe:	f7d3 fe97 	bl	1030 <__aeabi_dcmplt>
   2d302:	2800      	cmp	r0, #0
   2d304:	f040 8286 	bne.w	2d814 <_dtoa_r+0xd0c>
   2d308:	4650      	mov	r0, sl
   2d30a:	f7d3 fbb9 	bl	a80 <__aeabi_i2d>
   2d30e:	463a      	mov	r2, r7
   2d310:	4643      	mov	r3, r8
   2d312:	f7d3 fc1b 	bl	b4c <__aeabi_dmul>
   2d316:	4b99      	ldr	r3, [pc, #612]	; (2d57c <_dtoa_r+0xa74>)
   2d318:	2200      	movs	r2, #0
   2d31a:	f7d3 fa65 	bl	7e8 <__adddf3>
   2d31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d320:	4605      	mov	r5, r0
   2d322:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d326:	2b00      	cmp	r3, #0
   2d328:	f000 813e 	beq.w	2d5a8 <_dtoa_r+0xaa0>
   2d32c:	9b02      	ldr	r3, [sp, #8]
   2d32e:	9315      	str	r3, [sp, #84]	; 0x54
   2d330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d332:	9312      	str	r3, [sp, #72]	; 0x48
   2d334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d336:	2b00      	cmp	r3, #0
   2d338:	f000 81fa 	beq.w	2d730 <_dtoa_r+0xc28>
   2d33c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2d33e:	4b8c      	ldr	r3, [pc, #560]	; (2d570 <_dtoa_r+0xa68>)
   2d340:	498f      	ldr	r1, [pc, #572]	; (2d580 <_dtoa_r+0xa78>)
   2d342:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d346:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   2d34a:	2000      	movs	r0, #0
   2d34c:	f7d3 fd28 	bl	da0 <__aeabi_ddiv>
   2d350:	462a      	mov	r2, r5
   2d352:	4633      	mov	r3, r6
   2d354:	f7d3 fa46 	bl	7e4 <__aeabi_dsub>
   2d358:	4682      	mov	sl, r0
   2d35a:	468b      	mov	fp, r1
   2d35c:	4638      	mov	r0, r7
   2d35e:	4641      	mov	r1, r8
   2d360:	f7d3 fea4 	bl	10ac <__aeabi_d2iz>
   2d364:	4605      	mov	r5, r0
   2d366:	f7d3 fb8b 	bl	a80 <__aeabi_i2d>
   2d36a:	4602      	mov	r2, r0
   2d36c:	460b      	mov	r3, r1
   2d36e:	4638      	mov	r0, r7
   2d370:	4641      	mov	r1, r8
   2d372:	f7d3 fa37 	bl	7e4 <__aeabi_dsub>
   2d376:	3530      	adds	r5, #48	; 0x30
   2d378:	fa5f f885 	uxtb.w	r8, r5
   2d37c:	9d04      	ldr	r5, [sp, #16]
   2d37e:	4606      	mov	r6, r0
   2d380:	460f      	mov	r7, r1
   2d382:	f885 8000 	strb.w	r8, [r5]
   2d386:	4602      	mov	r2, r0
   2d388:	460b      	mov	r3, r1
   2d38a:	4650      	mov	r0, sl
   2d38c:	4659      	mov	r1, fp
   2d38e:	3501      	adds	r5, #1
   2d390:	f7d3 fe6c 	bl	106c <__aeabi_dcmpgt>
   2d394:	2800      	cmp	r0, #0
   2d396:	d154      	bne.n	2d442 <_dtoa_r+0x93a>
   2d398:	4632      	mov	r2, r6
   2d39a:	463b      	mov	r3, r7
   2d39c:	2000      	movs	r0, #0
   2d39e:	4976      	ldr	r1, [pc, #472]	; (2d578 <_dtoa_r+0xa70>)
   2d3a0:	f7d3 fa20 	bl	7e4 <__aeabi_dsub>
   2d3a4:	4602      	mov	r2, r0
   2d3a6:	460b      	mov	r3, r1
   2d3a8:	4650      	mov	r0, sl
   2d3aa:	4659      	mov	r1, fp
   2d3ac:	f7d3 fe5e 	bl	106c <__aeabi_dcmpgt>
   2d3b0:	2800      	cmp	r0, #0
   2d3b2:	f040 8270 	bne.w	2d896 <_dtoa_r+0xd8e>
   2d3b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2d3b8:	2a01      	cmp	r2, #1
   2d3ba:	f000 8111 	beq.w	2d5e0 <_dtoa_r+0xad8>
   2d3be:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d3c0:	9a04      	ldr	r2, [sp, #16]
   2d3c2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2d3c6:	4413      	add	r3, r2
   2d3c8:	4699      	mov	r9, r3
   2d3ca:	e00d      	b.n	2d3e8 <_dtoa_r+0x8e0>
   2d3cc:	2000      	movs	r0, #0
   2d3ce:	496a      	ldr	r1, [pc, #424]	; (2d578 <_dtoa_r+0xa70>)
   2d3d0:	f7d3 fa08 	bl	7e4 <__aeabi_dsub>
   2d3d4:	4652      	mov	r2, sl
   2d3d6:	465b      	mov	r3, fp
   2d3d8:	f7d3 fe2a 	bl	1030 <__aeabi_dcmplt>
   2d3dc:	2800      	cmp	r0, #0
   2d3de:	f040 8258 	bne.w	2d892 <_dtoa_r+0xd8a>
   2d3e2:	454d      	cmp	r5, r9
   2d3e4:	f000 80fa 	beq.w	2d5dc <_dtoa_r+0xad4>
   2d3e8:	4650      	mov	r0, sl
   2d3ea:	4659      	mov	r1, fp
   2d3ec:	2200      	movs	r2, #0
   2d3ee:	4b65      	ldr	r3, [pc, #404]	; (2d584 <_dtoa_r+0xa7c>)
   2d3f0:	f7d3 fbac 	bl	b4c <__aeabi_dmul>
   2d3f4:	2200      	movs	r2, #0
   2d3f6:	4b63      	ldr	r3, [pc, #396]	; (2d584 <_dtoa_r+0xa7c>)
   2d3f8:	4682      	mov	sl, r0
   2d3fa:	468b      	mov	fp, r1
   2d3fc:	4630      	mov	r0, r6
   2d3fe:	4639      	mov	r1, r7
   2d400:	f7d3 fba4 	bl	b4c <__aeabi_dmul>
   2d404:	460f      	mov	r7, r1
   2d406:	4606      	mov	r6, r0
   2d408:	f7d3 fe50 	bl	10ac <__aeabi_d2iz>
   2d40c:	4680      	mov	r8, r0
   2d40e:	f7d3 fb37 	bl	a80 <__aeabi_i2d>
   2d412:	4602      	mov	r2, r0
   2d414:	460b      	mov	r3, r1
   2d416:	4630      	mov	r0, r6
   2d418:	4639      	mov	r1, r7
   2d41a:	f7d3 f9e3 	bl	7e4 <__aeabi_dsub>
   2d41e:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2d422:	fa5f f888 	uxtb.w	r8, r8
   2d426:	4652      	mov	r2, sl
   2d428:	465b      	mov	r3, fp
   2d42a:	f805 8b01 	strb.w	r8, [r5], #1
   2d42e:	4606      	mov	r6, r0
   2d430:	460f      	mov	r7, r1
   2d432:	f7d3 fdfd 	bl	1030 <__aeabi_dcmplt>
   2d436:	4632      	mov	r2, r6
   2d438:	463b      	mov	r3, r7
   2d43a:	2800      	cmp	r0, #0
   2d43c:	d0c6      	beq.n	2d3cc <_dtoa_r+0x8c4>
   2d43e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d442:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d444:	9302      	str	r3, [sp, #8]
   2d446:	e523      	b.n	2ce90 <_dtoa_r+0x388>
   2d448:	2300      	movs	r3, #0
   2d44a:	930b      	str	r3, [sp, #44]	; 0x2c
   2d44c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d44e:	2b00      	cmp	r3, #0
   2d450:	f340 80dc 	ble.w	2d60c <_dtoa_r+0xb04>
   2d454:	461f      	mov	r7, r3
   2d456:	461e      	mov	r6, r3
   2d458:	930f      	str	r3, [sp, #60]	; 0x3c
   2d45a:	930a      	str	r3, [sp, #40]	; 0x28
   2d45c:	e6f6      	b.n	2d24c <_dtoa_r+0x744>
   2d45e:	2301      	movs	r3, #1
   2d460:	930b      	str	r3, [sp, #44]	; 0x2c
   2d462:	e7f3      	b.n	2d44c <_dtoa_r+0x944>
   2d464:	f1ba 0f00 	cmp.w	sl, #0
   2d468:	f47f ada8 	bne.w	2cfbc <_dtoa_r+0x4b4>
   2d46c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   2d470:	2b00      	cmp	r3, #0
   2d472:	f47f adba 	bne.w	2cfea <_dtoa_r+0x4e2>
   2d476:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   2d47a:	0d3f      	lsrs	r7, r7, #20
   2d47c:	053f      	lsls	r7, r7, #20
   2d47e:	2f00      	cmp	r7, #0
   2d480:	f000 820d 	beq.w	2d89e <_dtoa_r+0xd96>
   2d484:	9b08      	ldr	r3, [sp, #32]
   2d486:	3301      	adds	r3, #1
   2d488:	9308      	str	r3, [sp, #32]
   2d48a:	9b06      	ldr	r3, [sp, #24]
   2d48c:	3301      	adds	r3, #1
   2d48e:	9306      	str	r3, [sp, #24]
   2d490:	2301      	movs	r3, #1
   2d492:	930c      	str	r3, [sp, #48]	; 0x30
   2d494:	e5ab      	b.n	2cfee <_dtoa_r+0x4e6>
   2d496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d498:	2b00      	cmp	r3, #0
   2d49a:	f73f ac42 	bgt.w	2cd22 <_dtoa_r+0x21a>
   2d49e:	f040 8221 	bne.w	2d8e4 <_dtoa_r+0xddc>
   2d4a2:	2200      	movs	r2, #0
   2d4a4:	4b38      	ldr	r3, [pc, #224]	; (2d588 <_dtoa_r+0xa80>)
   2d4a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2d4aa:	f7d3 fb4f 	bl	b4c <__aeabi_dmul>
   2d4ae:	4652      	mov	r2, sl
   2d4b0:	465b      	mov	r3, fp
   2d4b2:	f7d3 fdd1 	bl	1058 <__aeabi_dcmpge>
   2d4b6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   2d4ba:	4646      	mov	r6, r8
   2d4bc:	2800      	cmp	r0, #0
   2d4be:	d041      	beq.n	2d544 <_dtoa_r+0xa3c>
   2d4c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d4c2:	9d04      	ldr	r5, [sp, #16]
   2d4c4:	43db      	mvns	r3, r3
   2d4c6:	9302      	str	r3, [sp, #8]
   2d4c8:	4641      	mov	r1, r8
   2d4ca:	4620      	mov	r0, r4
   2d4cc:	f000 fbb4 	bl	2dc38 <_Bfree>
   2d4d0:	2e00      	cmp	r6, #0
   2d4d2:	f43f acdd 	beq.w	2ce90 <_dtoa_r+0x388>
   2d4d6:	e6a7      	b.n	2d228 <_dtoa_r+0x720>
   2d4d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2d4da:	4649      	mov	r1, r9
   2d4dc:	4620      	mov	r0, r4
   2d4de:	f000 fce1 	bl	2dea4 <__pow5mult>
   2d4e2:	4681      	mov	r9, r0
   2d4e4:	e558      	b.n	2cf98 <_dtoa_r+0x490>
   2d4e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2d4e8:	2a00      	cmp	r2, #0
   2d4ea:	f000 8187 	beq.w	2d7fc <_dtoa_r+0xcf4>
   2d4ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
   2d4f2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d4f4:	9d08      	ldr	r5, [sp, #32]
   2d4f6:	e4f2      	b.n	2cede <_dtoa_r+0x3d6>
   2d4f8:	f1ba 0f00 	cmp.w	sl, #0
   2d4fc:	f47f ad75 	bne.w	2cfea <_dtoa_r+0x4e2>
   2d500:	e7b4      	b.n	2d46c <_dtoa_r+0x964>
   2d502:	f000 fba3 	bl	2dc4c <__multadd>
   2d506:	4647      	mov	r7, r8
   2d508:	4606      	mov	r6, r0
   2d50a:	4683      	mov	fp, r0
   2d50c:	e5be      	b.n	2d08c <_dtoa_r+0x584>
   2d50e:	4601      	mov	r1, r0
   2d510:	4620      	mov	r0, r4
   2d512:	9306      	str	r3, [sp, #24]
   2d514:	f000 fb90 	bl	2dc38 <_Bfree>
   2d518:	2201      	movs	r2, #1
   2d51a:	9b06      	ldr	r3, [sp, #24]
   2d51c:	e5e0      	b.n	2d0e0 <_dtoa_r+0x5d8>
   2d51e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d520:	2b02      	cmp	r3, #2
   2d522:	f77f ad96 	ble.w	2d052 <_dtoa_r+0x54a>
   2d526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d528:	2b00      	cmp	r3, #0
   2d52a:	d1c9      	bne.n	2d4c0 <_dtoa_r+0x9b8>
   2d52c:	4641      	mov	r1, r8
   2d52e:	2205      	movs	r2, #5
   2d530:	4620      	mov	r0, r4
   2d532:	f000 fb8b 	bl	2dc4c <__multadd>
   2d536:	4601      	mov	r1, r0
   2d538:	4680      	mov	r8, r0
   2d53a:	4648      	mov	r0, r9
   2d53c:	f000 fd54 	bl	2dfe8 <__mcmp>
   2d540:	2800      	cmp	r0, #0
   2d542:	ddbd      	ble.n	2d4c0 <_dtoa_r+0x9b8>
   2d544:	9a02      	ldr	r2, [sp, #8]
   2d546:	9904      	ldr	r1, [sp, #16]
   2d548:	2331      	movs	r3, #49	; 0x31
   2d54a:	3201      	adds	r2, #1
   2d54c:	9202      	str	r2, [sp, #8]
   2d54e:	700b      	strb	r3, [r1, #0]
   2d550:	1c4d      	adds	r5, r1, #1
   2d552:	e7b9      	b.n	2d4c8 <_dtoa_r+0x9c0>
   2d554:	9a02      	ldr	r2, [sp, #8]
   2d556:	3201      	adds	r2, #1
   2d558:	9202      	str	r2, [sp, #8]
   2d55a:	9a04      	ldr	r2, [sp, #16]
   2d55c:	2331      	movs	r3, #49	; 0x31
   2d55e:	7013      	strb	r3, [r2, #0]
   2d560:	e652      	b.n	2d208 <_dtoa_r+0x700>
   2d562:	2301      	movs	r3, #1
   2d564:	930b      	str	r3, [sp, #44]	; 0x2c
   2d566:	e666      	b.n	2d236 <_dtoa_r+0x72e>
   2d568:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2d56c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2d56e:	e48f      	b.n	2ce90 <_dtoa_r+0x388>
   2d570:	00033390 	.word	0x00033390
   2d574:	00033368 	.word	0x00033368
   2d578:	3ff00000 	.word	0x3ff00000
   2d57c:	401c0000 	.word	0x401c0000
   2d580:	3fe00000 	.word	0x3fe00000
   2d584:	40240000 	.word	0x40240000
   2d588:	40140000 	.word	0x40140000
   2d58c:	4650      	mov	r0, sl
   2d58e:	f7d3 fa77 	bl	a80 <__aeabi_i2d>
   2d592:	463a      	mov	r2, r7
   2d594:	4643      	mov	r3, r8
   2d596:	f7d3 fad9 	bl	b4c <__aeabi_dmul>
   2d59a:	2200      	movs	r2, #0
   2d59c:	4bc1      	ldr	r3, [pc, #772]	; (2d8a4 <_dtoa_r+0xd9c>)
   2d59e:	f7d3 f923 	bl	7e8 <__adddf3>
   2d5a2:	4605      	mov	r5, r0
   2d5a4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d5a8:	4641      	mov	r1, r8
   2d5aa:	2200      	movs	r2, #0
   2d5ac:	4bbe      	ldr	r3, [pc, #760]	; (2d8a8 <_dtoa_r+0xda0>)
   2d5ae:	4638      	mov	r0, r7
   2d5b0:	f7d3 f918 	bl	7e4 <__aeabi_dsub>
   2d5b4:	462a      	mov	r2, r5
   2d5b6:	4633      	mov	r3, r6
   2d5b8:	4682      	mov	sl, r0
   2d5ba:	468b      	mov	fp, r1
   2d5bc:	f7d3 fd56 	bl	106c <__aeabi_dcmpgt>
   2d5c0:	4680      	mov	r8, r0
   2d5c2:	2800      	cmp	r0, #0
   2d5c4:	f040 8110 	bne.w	2d7e8 <_dtoa_r+0xce0>
   2d5c8:	462a      	mov	r2, r5
   2d5ca:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2d5ce:	4650      	mov	r0, sl
   2d5d0:	4659      	mov	r1, fp
   2d5d2:	f7d3 fd2d 	bl	1030 <__aeabi_dcmplt>
   2d5d6:	b118      	cbz	r0, 2d5e0 <_dtoa_r+0xad8>
   2d5d8:	4646      	mov	r6, r8
   2d5da:	e771      	b.n	2d4c0 <_dtoa_r+0x9b8>
   2d5dc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d5e0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   2d5e4:	f7ff bb8a 	b.w	2ccfc <_dtoa_r+0x1f4>
   2d5e8:	9804      	ldr	r0, [sp, #16]
   2d5ea:	f7ff babb 	b.w	2cb64 <_dtoa_r+0x5c>
   2d5ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d5f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2d5f2:	970c      	str	r7, [sp, #48]	; 0x30
   2d5f4:	1afb      	subs	r3, r7, r3
   2d5f6:	441a      	add	r2, r3
   2d5f8:	920d      	str	r2, [sp, #52]	; 0x34
   2d5fa:	2700      	movs	r7, #0
   2d5fc:	e469      	b.n	2ced2 <_dtoa_r+0x3ca>
   2d5fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   2d602:	f04f 0a02 	mov.w	sl, #2
   2d606:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   2d60a:	e657      	b.n	2d2bc <_dtoa_r+0x7b4>
   2d60c:	2100      	movs	r1, #0
   2d60e:	2301      	movs	r3, #1
   2d610:	6461      	str	r1, [r4, #68]	; 0x44
   2d612:	4620      	mov	r0, r4
   2d614:	9325      	str	r3, [sp, #148]	; 0x94
   2d616:	f000 fae9 	bl	2dbec <_Balloc>
   2d61a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d61c:	9004      	str	r0, [sp, #16]
   2d61e:	6420      	str	r0, [r4, #64]	; 0x40
   2d620:	930a      	str	r3, [sp, #40]	; 0x28
   2d622:	930f      	str	r3, [sp, #60]	; 0x3c
   2d624:	e629      	b.n	2d27a <_dtoa_r+0x772>
   2d626:	2a00      	cmp	r2, #0
   2d628:	46d0      	mov	r8, sl
   2d62a:	f8cd b018 	str.w	fp, [sp, #24]
   2d62e:	469a      	mov	sl, r3
   2d630:	dd11      	ble.n	2d656 <_dtoa_r+0xb4e>
   2d632:	4649      	mov	r1, r9
   2d634:	2201      	movs	r2, #1
   2d636:	4620      	mov	r0, r4
   2d638:	f000 fc84 	bl	2df44 <__lshift>
   2d63c:	4641      	mov	r1, r8
   2d63e:	4681      	mov	r9, r0
   2d640:	f000 fcd2 	bl	2dfe8 <__mcmp>
   2d644:	2800      	cmp	r0, #0
   2d646:	f340 8146 	ble.w	2d8d6 <_dtoa_r+0xdce>
   2d64a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   2d64e:	f000 8106 	beq.w	2d85e <_dtoa_r+0xd56>
   2d652:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   2d656:	46b3      	mov	fp, r6
   2d658:	f887 a000 	strb.w	sl, [r7]
   2d65c:	1c7d      	adds	r5, r7, #1
   2d65e:	9e06      	ldr	r6, [sp, #24]
   2d660:	e5d2      	b.n	2d208 <_dtoa_r+0x700>
   2d662:	d104      	bne.n	2d66e <_dtoa_r+0xb66>
   2d664:	f01a 0f01 	tst.w	sl, #1
   2d668:	d001      	beq.n	2d66e <_dtoa_r+0xb66>
   2d66a:	e5bd      	b.n	2d1e8 <_dtoa_r+0x6e0>
   2d66c:	4615      	mov	r5, r2
   2d66e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2d672:	2b30      	cmp	r3, #48	; 0x30
   2d674:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2d678:	d0f8      	beq.n	2d66c <_dtoa_r+0xb64>
   2d67a:	e5c5      	b.n	2d208 <_dtoa_r+0x700>
   2d67c:	9904      	ldr	r1, [sp, #16]
   2d67e:	2230      	movs	r2, #48	; 0x30
   2d680:	700a      	strb	r2, [r1, #0]
   2d682:	9a02      	ldr	r2, [sp, #8]
   2d684:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2d688:	3201      	adds	r2, #1
   2d68a:	9202      	str	r2, [sp, #8]
   2d68c:	f7ff bbfc 	b.w	2ce88 <_dtoa_r+0x380>
   2d690:	f000 80bb 	beq.w	2d80a <_dtoa_r+0xd02>
   2d694:	9b02      	ldr	r3, [sp, #8]
   2d696:	425d      	negs	r5, r3
   2d698:	4b84      	ldr	r3, [pc, #528]	; (2d8ac <_dtoa_r+0xda4>)
   2d69a:	f005 020f 	and.w	r2, r5, #15
   2d69e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   2d6a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2d6aa:	f7d3 fa4f 	bl	b4c <__aeabi_dmul>
   2d6ae:	112d      	asrs	r5, r5, #4
   2d6b0:	4607      	mov	r7, r0
   2d6b2:	4688      	mov	r8, r1
   2d6b4:	f000 812c 	beq.w	2d910 <_dtoa_r+0xe08>
   2d6b8:	4e7d      	ldr	r6, [pc, #500]	; (2d8b0 <_dtoa_r+0xda8>)
   2d6ba:	f04f 0a02 	mov.w	sl, #2
   2d6be:	07eb      	lsls	r3, r5, #31
   2d6c0:	d509      	bpl.n	2d6d6 <_dtoa_r+0xbce>
   2d6c2:	4638      	mov	r0, r7
   2d6c4:	4641      	mov	r1, r8
   2d6c6:	e9d6 2300 	ldrd	r2, r3, [r6]
   2d6ca:	f7d3 fa3f 	bl	b4c <__aeabi_dmul>
   2d6ce:	f10a 0a01 	add.w	sl, sl, #1
   2d6d2:	4607      	mov	r7, r0
   2d6d4:	4688      	mov	r8, r1
   2d6d6:	106d      	asrs	r5, r5, #1
   2d6d8:	f106 0608 	add.w	r6, r6, #8
   2d6dc:	d1ef      	bne.n	2d6be <_dtoa_r+0xbb6>
   2d6de:	e608      	b.n	2d2f2 <_dtoa_r+0x7ea>
   2d6e0:	6871      	ldr	r1, [r6, #4]
   2d6e2:	4620      	mov	r0, r4
   2d6e4:	f000 fa82 	bl	2dbec <_Balloc>
   2d6e8:	6933      	ldr	r3, [r6, #16]
   2d6ea:	3302      	adds	r3, #2
   2d6ec:	009a      	lsls	r2, r3, #2
   2d6ee:	4605      	mov	r5, r0
   2d6f0:	f106 010c 	add.w	r1, r6, #12
   2d6f4:	300c      	adds	r0, #12
   2d6f6:	f7d2 fde3 	bl	2c0 <memcpy>
   2d6fa:	4629      	mov	r1, r5
   2d6fc:	2201      	movs	r2, #1
   2d6fe:	4620      	mov	r0, r4
   2d700:	f000 fc20 	bl	2df44 <__lshift>
   2d704:	9006      	str	r0, [sp, #24]
   2d706:	e4b5      	b.n	2d074 <_dtoa_r+0x56c>
   2d708:	2b39      	cmp	r3, #57	; 0x39
   2d70a:	f8cd b018 	str.w	fp, [sp, #24]
   2d70e:	46d0      	mov	r8, sl
   2d710:	f000 80a5 	beq.w	2d85e <_dtoa_r+0xd56>
   2d714:	f103 0a01 	add.w	sl, r3, #1
   2d718:	46b3      	mov	fp, r6
   2d71a:	f887 a000 	strb.w	sl, [r7]
   2d71e:	1c7d      	adds	r5, r7, #1
   2d720:	9e06      	ldr	r6, [sp, #24]
   2d722:	e571      	b.n	2d208 <_dtoa_r+0x700>
   2d724:	465a      	mov	r2, fp
   2d726:	46d0      	mov	r8, sl
   2d728:	46b3      	mov	fp, r6
   2d72a:	469a      	mov	sl, r3
   2d72c:	4616      	mov	r6, r2
   2d72e:	e54f      	b.n	2d1d0 <_dtoa_r+0x6c8>
   2d730:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d732:	495e      	ldr	r1, [pc, #376]	; (2d8ac <_dtoa_r+0xda4>)
   2d734:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2d738:	462a      	mov	r2, r5
   2d73a:	4633      	mov	r3, r6
   2d73c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   2d740:	f7d3 fa04 	bl	b4c <__aeabi_dmul>
   2d744:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   2d748:	4638      	mov	r0, r7
   2d74a:	4641      	mov	r1, r8
   2d74c:	f7d3 fcae 	bl	10ac <__aeabi_d2iz>
   2d750:	4605      	mov	r5, r0
   2d752:	f7d3 f995 	bl	a80 <__aeabi_i2d>
   2d756:	460b      	mov	r3, r1
   2d758:	4602      	mov	r2, r0
   2d75a:	4641      	mov	r1, r8
   2d75c:	4638      	mov	r0, r7
   2d75e:	f7d3 f841 	bl	7e4 <__aeabi_dsub>
   2d762:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d764:	460f      	mov	r7, r1
   2d766:	9904      	ldr	r1, [sp, #16]
   2d768:	3530      	adds	r5, #48	; 0x30
   2d76a:	2b01      	cmp	r3, #1
   2d76c:	700d      	strb	r5, [r1, #0]
   2d76e:	4606      	mov	r6, r0
   2d770:	f101 0501 	add.w	r5, r1, #1
   2d774:	d026      	beq.n	2d7c4 <_dtoa_r+0xcbc>
   2d776:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d778:	9a04      	ldr	r2, [sp, #16]
   2d77a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 2d8b8 <_dtoa_r+0xdb0>
   2d77e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2d782:	4413      	add	r3, r2
   2d784:	f04f 0a00 	mov.w	sl, #0
   2d788:	4699      	mov	r9, r3
   2d78a:	4652      	mov	r2, sl
   2d78c:	465b      	mov	r3, fp
   2d78e:	4630      	mov	r0, r6
   2d790:	4639      	mov	r1, r7
   2d792:	f7d3 f9db 	bl	b4c <__aeabi_dmul>
   2d796:	460f      	mov	r7, r1
   2d798:	4606      	mov	r6, r0
   2d79a:	f7d3 fc87 	bl	10ac <__aeabi_d2iz>
   2d79e:	4680      	mov	r8, r0
   2d7a0:	f7d3 f96e 	bl	a80 <__aeabi_i2d>
   2d7a4:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2d7a8:	4602      	mov	r2, r0
   2d7aa:	460b      	mov	r3, r1
   2d7ac:	4630      	mov	r0, r6
   2d7ae:	4639      	mov	r1, r7
   2d7b0:	f7d3 f818 	bl	7e4 <__aeabi_dsub>
   2d7b4:	f805 8b01 	strb.w	r8, [r5], #1
   2d7b8:	454d      	cmp	r5, r9
   2d7ba:	4606      	mov	r6, r0
   2d7bc:	460f      	mov	r7, r1
   2d7be:	d1e4      	bne.n	2d78a <_dtoa_r+0xc82>
   2d7c0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d7c4:	4b3b      	ldr	r3, [pc, #236]	; (2d8b4 <_dtoa_r+0xdac>)
   2d7c6:	2200      	movs	r2, #0
   2d7c8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   2d7cc:	f7d3 f80c 	bl	7e8 <__adddf3>
   2d7d0:	4632      	mov	r2, r6
   2d7d2:	463b      	mov	r3, r7
   2d7d4:	f7d3 fc2c 	bl	1030 <__aeabi_dcmplt>
   2d7d8:	2800      	cmp	r0, #0
   2d7da:	d046      	beq.n	2d86a <_dtoa_r+0xd62>
   2d7dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d7de:	9302      	str	r3, [sp, #8]
   2d7e0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2d7e4:	f7ff bb43 	b.w	2ce6e <_dtoa_r+0x366>
   2d7e8:	f04f 0800 	mov.w	r8, #0
   2d7ec:	4646      	mov	r6, r8
   2d7ee:	e6a9      	b.n	2d544 <_dtoa_r+0xa3c>
   2d7f0:	9b08      	ldr	r3, [sp, #32]
   2d7f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d7f4:	1a9d      	subs	r5, r3, r2
   2d7f6:	2300      	movs	r3, #0
   2d7f8:	f7ff bb71 	b.w	2cede <_dtoa_r+0x3d6>
   2d7fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2d7fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d800:	9d08      	ldr	r5, [sp, #32]
   2d802:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2d806:	f7ff bb6a 	b.w	2cede <_dtoa_r+0x3d6>
   2d80a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2d80e:	f04f 0a02 	mov.w	sl, #2
   2d812:	e56e      	b.n	2d2f2 <_dtoa_r+0x7ea>
   2d814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d816:	2b00      	cmp	r3, #0
   2d818:	f43f aeb8 	beq.w	2d58c <_dtoa_r+0xa84>
   2d81c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d81e:	2b00      	cmp	r3, #0
   2d820:	f77f aede 	ble.w	2d5e0 <_dtoa_r+0xad8>
   2d824:	2200      	movs	r2, #0
   2d826:	4b24      	ldr	r3, [pc, #144]	; (2d8b8 <_dtoa_r+0xdb0>)
   2d828:	4638      	mov	r0, r7
   2d82a:	4641      	mov	r1, r8
   2d82c:	f7d3 f98e 	bl	b4c <__aeabi_dmul>
   2d830:	4607      	mov	r7, r0
   2d832:	4688      	mov	r8, r1
   2d834:	f10a 0001 	add.w	r0, sl, #1
   2d838:	f7d3 f922 	bl	a80 <__aeabi_i2d>
   2d83c:	463a      	mov	r2, r7
   2d83e:	4643      	mov	r3, r8
   2d840:	f7d3 f984 	bl	b4c <__aeabi_dmul>
   2d844:	2200      	movs	r2, #0
   2d846:	4b17      	ldr	r3, [pc, #92]	; (2d8a4 <_dtoa_r+0xd9c>)
   2d848:	f7d2 ffce 	bl	7e8 <__adddf3>
   2d84c:	9a02      	ldr	r2, [sp, #8]
   2d84e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d850:	9312      	str	r3, [sp, #72]	; 0x48
   2d852:	3a01      	subs	r2, #1
   2d854:	4605      	mov	r5, r0
   2d856:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d85a:	9215      	str	r2, [sp, #84]	; 0x54
   2d85c:	e56a      	b.n	2d334 <_dtoa_r+0x82c>
   2d85e:	2239      	movs	r2, #57	; 0x39
   2d860:	46b3      	mov	fp, r6
   2d862:	703a      	strb	r2, [r7, #0]
   2d864:	9e06      	ldr	r6, [sp, #24]
   2d866:	1c7d      	adds	r5, r7, #1
   2d868:	e4c0      	b.n	2d1ec <_dtoa_r+0x6e4>
   2d86a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   2d86e:	2000      	movs	r0, #0
   2d870:	4910      	ldr	r1, [pc, #64]	; (2d8b4 <_dtoa_r+0xdac>)
   2d872:	f7d2 ffb7 	bl	7e4 <__aeabi_dsub>
   2d876:	4632      	mov	r2, r6
   2d878:	463b      	mov	r3, r7
   2d87a:	f7d3 fbf7 	bl	106c <__aeabi_dcmpgt>
   2d87e:	b908      	cbnz	r0, 2d884 <_dtoa_r+0xd7c>
   2d880:	e6ae      	b.n	2d5e0 <_dtoa_r+0xad8>
   2d882:	4615      	mov	r5, r2
   2d884:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2d888:	2b30      	cmp	r3, #48	; 0x30
   2d88a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2d88e:	d0f8      	beq.n	2d882 <_dtoa_r+0xd7a>
   2d890:	e5d7      	b.n	2d442 <_dtoa_r+0x93a>
   2d892:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d896:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d898:	9302      	str	r3, [sp, #8]
   2d89a:	f7ff bae8 	b.w	2ce6e <_dtoa_r+0x366>
   2d89e:	970c      	str	r7, [sp, #48]	; 0x30
   2d8a0:	f7ff bba5 	b.w	2cfee <_dtoa_r+0x4e6>
   2d8a4:	401c0000 	.word	0x401c0000
   2d8a8:	40140000 	.word	0x40140000
   2d8ac:	00033390 	.word	0x00033390
   2d8b0:	00033368 	.word	0x00033368
   2d8b4:	3fe00000 	.word	0x3fe00000
   2d8b8:	40240000 	.word	0x40240000
   2d8bc:	2b39      	cmp	r3, #57	; 0x39
   2d8be:	f8cd b018 	str.w	fp, [sp, #24]
   2d8c2:	46d0      	mov	r8, sl
   2d8c4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   2d8c8:	469a      	mov	sl, r3
   2d8ca:	d0c8      	beq.n	2d85e <_dtoa_r+0xd56>
   2d8cc:	f1bb 0f00 	cmp.w	fp, #0
   2d8d0:	f73f aebf 	bgt.w	2d652 <_dtoa_r+0xb4a>
   2d8d4:	e6bf      	b.n	2d656 <_dtoa_r+0xb4e>
   2d8d6:	f47f aebe 	bne.w	2d656 <_dtoa_r+0xb4e>
   2d8da:	f01a 0f01 	tst.w	sl, #1
   2d8de:	f43f aeba 	beq.w	2d656 <_dtoa_r+0xb4e>
   2d8e2:	e6b2      	b.n	2d64a <_dtoa_r+0xb42>
   2d8e4:	f04f 0800 	mov.w	r8, #0
   2d8e8:	4646      	mov	r6, r8
   2d8ea:	e5e9      	b.n	2d4c0 <_dtoa_r+0x9b8>
   2d8ec:	4631      	mov	r1, r6
   2d8ee:	2300      	movs	r3, #0
   2d8f0:	220a      	movs	r2, #10
   2d8f2:	4620      	mov	r0, r4
   2d8f4:	f000 f9aa 	bl	2dc4c <__multadd>
   2d8f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d8fa:	2b00      	cmp	r3, #0
   2d8fc:	4606      	mov	r6, r0
   2d8fe:	dd0a      	ble.n	2d916 <_dtoa_r+0xe0e>
   2d900:	930a      	str	r3, [sp, #40]	; 0x28
   2d902:	f7ff bbaa 	b.w	2d05a <_dtoa_r+0x552>
   2d906:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d908:	2b02      	cmp	r3, #2
   2d90a:	dc23      	bgt.n	2d954 <_dtoa_r+0xe4c>
   2d90c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d90e:	e43b      	b.n	2d188 <_dtoa_r+0x680>
   2d910:	f04f 0a02 	mov.w	sl, #2
   2d914:	e4ed      	b.n	2d2f2 <_dtoa_r+0x7ea>
   2d916:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d918:	2b02      	cmp	r3, #2
   2d91a:	dc1b      	bgt.n	2d954 <_dtoa_r+0xe4c>
   2d91c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d91e:	e7ef      	b.n	2d900 <_dtoa_r+0xdf8>
   2d920:	2500      	movs	r5, #0
   2d922:	6465      	str	r5, [r4, #68]	; 0x44
   2d924:	4629      	mov	r1, r5
   2d926:	4620      	mov	r0, r4
   2d928:	f000 f960 	bl	2dbec <_Balloc>
   2d92c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d930:	930a      	str	r3, [sp, #40]	; 0x28
   2d932:	930f      	str	r3, [sp, #60]	; 0x3c
   2d934:	2301      	movs	r3, #1
   2d936:	9004      	str	r0, [sp, #16]
   2d938:	9525      	str	r5, [sp, #148]	; 0x94
   2d93a:	6420      	str	r0, [r4, #64]	; 0x40
   2d93c:	930b      	str	r3, [sp, #44]	; 0x2c
   2d93e:	f7ff b9dd 	b.w	2ccfc <_dtoa_r+0x1f4>
   2d942:	2501      	movs	r5, #1
   2d944:	f7ff b9a5 	b.w	2cc92 <_dtoa_r+0x18a>
   2d948:	f43f ab69 	beq.w	2d01e <_dtoa_r+0x516>
   2d94c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   2d950:	f7ff bbf9 	b.w	2d146 <_dtoa_r+0x63e>
   2d954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d956:	930a      	str	r3, [sp, #40]	; 0x28
   2d958:	e5e5      	b.n	2d526 <_dtoa_r+0xa1e>
   2d95a:	bf00      	nop

0002d95c <_malloc_trim_r>:
   2d95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d95e:	4f24      	ldr	r7, [pc, #144]	; (2d9f0 <_malloc_trim_r+0x94>)
   2d960:	460c      	mov	r4, r1
   2d962:	4606      	mov	r6, r0
   2d964:	f7fd f826 	bl	2a9b4 <__malloc_lock>
   2d968:	68bb      	ldr	r3, [r7, #8]
   2d96a:	685d      	ldr	r5, [r3, #4]
   2d96c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2d970:	310f      	adds	r1, #15
   2d972:	f025 0503 	bic.w	r5, r5, #3
   2d976:	4429      	add	r1, r5
   2d978:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   2d97c:	f021 010f 	bic.w	r1, r1, #15
   2d980:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   2d984:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2d988:	db07      	blt.n	2d99a <_malloc_trim_r+0x3e>
   2d98a:	2100      	movs	r1, #0
   2d98c:	4630      	mov	r0, r6
   2d98e:	f7fd f83d 	bl	2aa0c <_sbrk_r>
   2d992:	68bb      	ldr	r3, [r7, #8]
   2d994:	442b      	add	r3, r5
   2d996:	4298      	cmp	r0, r3
   2d998:	d004      	beq.n	2d9a4 <_malloc_trim_r+0x48>
   2d99a:	4630      	mov	r0, r6
   2d99c:	f7fd f810 	bl	2a9c0 <__malloc_unlock>
   2d9a0:	2000      	movs	r0, #0
   2d9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d9a4:	4261      	negs	r1, r4
   2d9a6:	4630      	mov	r0, r6
   2d9a8:	f7fd f830 	bl	2aa0c <_sbrk_r>
   2d9ac:	3001      	adds	r0, #1
   2d9ae:	d00d      	beq.n	2d9cc <_malloc_trim_r+0x70>
   2d9b0:	4b10      	ldr	r3, [pc, #64]	; (2d9f4 <_malloc_trim_r+0x98>)
   2d9b2:	68ba      	ldr	r2, [r7, #8]
   2d9b4:	6819      	ldr	r1, [r3, #0]
   2d9b6:	1b2d      	subs	r5, r5, r4
   2d9b8:	f045 0501 	orr.w	r5, r5, #1
   2d9bc:	4630      	mov	r0, r6
   2d9be:	1b09      	subs	r1, r1, r4
   2d9c0:	6055      	str	r5, [r2, #4]
   2d9c2:	6019      	str	r1, [r3, #0]
   2d9c4:	f7fc fffc 	bl	2a9c0 <__malloc_unlock>
   2d9c8:	2001      	movs	r0, #1
   2d9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d9cc:	2100      	movs	r1, #0
   2d9ce:	4630      	mov	r0, r6
   2d9d0:	f7fd f81c 	bl	2aa0c <_sbrk_r>
   2d9d4:	68ba      	ldr	r2, [r7, #8]
   2d9d6:	1a83      	subs	r3, r0, r2
   2d9d8:	2b0f      	cmp	r3, #15
   2d9da:	ddde      	ble.n	2d99a <_malloc_trim_r+0x3e>
   2d9dc:	4c06      	ldr	r4, [pc, #24]	; (2d9f8 <_malloc_trim_r+0x9c>)
   2d9de:	4905      	ldr	r1, [pc, #20]	; (2d9f4 <_malloc_trim_r+0x98>)
   2d9e0:	6824      	ldr	r4, [r4, #0]
   2d9e2:	f043 0301 	orr.w	r3, r3, #1
   2d9e6:	1b00      	subs	r0, r0, r4
   2d9e8:	6053      	str	r3, [r2, #4]
   2d9ea:	6008      	str	r0, [r1, #0]
   2d9ec:	e7d5      	b.n	2d99a <_malloc_trim_r+0x3e>
   2d9ee:	bf00      	nop
   2d9f0:	2000cc24 	.word	0x2000cc24
   2d9f4:	200029a8 	.word	0x200029a8
   2d9f8:	2000d02c 	.word	0x2000d02c

0002d9fc <_free_r>:
   2d9fc:	2900      	cmp	r1, #0
   2d9fe:	d044      	beq.n	2da8a <_free_r+0x8e>
   2da00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2da04:	460d      	mov	r5, r1
   2da06:	4680      	mov	r8, r0
   2da08:	f7fc ffd4 	bl	2a9b4 <__malloc_lock>
   2da0c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2da10:	4969      	ldr	r1, [pc, #420]	; (2dbb8 <_free_r+0x1bc>)
   2da12:	f027 0301 	bic.w	r3, r7, #1
   2da16:	f1a5 0408 	sub.w	r4, r5, #8
   2da1a:	18e2      	adds	r2, r4, r3
   2da1c:	688e      	ldr	r6, [r1, #8]
   2da1e:	6850      	ldr	r0, [r2, #4]
   2da20:	42b2      	cmp	r2, r6
   2da22:	f020 0003 	bic.w	r0, r0, #3
   2da26:	d05e      	beq.n	2dae6 <_free_r+0xea>
   2da28:	07fe      	lsls	r6, r7, #31
   2da2a:	6050      	str	r0, [r2, #4]
   2da2c:	d40b      	bmi.n	2da46 <_free_r+0x4a>
   2da2e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   2da32:	1be4      	subs	r4, r4, r7
   2da34:	f101 0e08 	add.w	lr, r1, #8
   2da38:	68a5      	ldr	r5, [r4, #8]
   2da3a:	4575      	cmp	r5, lr
   2da3c:	443b      	add	r3, r7
   2da3e:	d06d      	beq.n	2db1c <_free_r+0x120>
   2da40:	68e7      	ldr	r7, [r4, #12]
   2da42:	60ef      	str	r7, [r5, #12]
   2da44:	60bd      	str	r5, [r7, #8]
   2da46:	1815      	adds	r5, r2, r0
   2da48:	686d      	ldr	r5, [r5, #4]
   2da4a:	07ed      	lsls	r5, r5, #31
   2da4c:	d53e      	bpl.n	2dacc <_free_r+0xd0>
   2da4e:	f043 0201 	orr.w	r2, r3, #1
   2da52:	6062      	str	r2, [r4, #4]
   2da54:	50e3      	str	r3, [r4, r3]
   2da56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2da5a:	d217      	bcs.n	2da8c <_free_r+0x90>
   2da5c:	08db      	lsrs	r3, r3, #3
   2da5e:	1c58      	adds	r0, r3, #1
   2da60:	109a      	asrs	r2, r3, #2
   2da62:	684d      	ldr	r5, [r1, #4]
   2da64:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   2da68:	60a7      	str	r7, [r4, #8]
   2da6a:	2301      	movs	r3, #1
   2da6c:	4093      	lsls	r3, r2
   2da6e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   2da72:	432b      	orrs	r3, r5
   2da74:	3a08      	subs	r2, #8
   2da76:	60e2      	str	r2, [r4, #12]
   2da78:	604b      	str	r3, [r1, #4]
   2da7a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   2da7e:	60fc      	str	r4, [r7, #12]
   2da80:	4640      	mov	r0, r8
   2da82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2da86:	f7fc bf9b 	b.w	2a9c0 <__malloc_unlock>
   2da8a:	4770      	bx	lr
   2da8c:	0a5a      	lsrs	r2, r3, #9
   2da8e:	2a04      	cmp	r2, #4
   2da90:	d852      	bhi.n	2db38 <_free_r+0x13c>
   2da92:	099a      	lsrs	r2, r3, #6
   2da94:	f102 0739 	add.w	r7, r2, #57	; 0x39
   2da98:	00ff      	lsls	r7, r7, #3
   2da9a:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2da9e:	19c8      	adds	r0, r1, r7
   2daa0:	59ca      	ldr	r2, [r1, r7]
   2daa2:	3808      	subs	r0, #8
   2daa4:	4290      	cmp	r0, r2
   2daa6:	d04f      	beq.n	2db48 <_free_r+0x14c>
   2daa8:	6851      	ldr	r1, [r2, #4]
   2daaa:	f021 0103 	bic.w	r1, r1, #3
   2daae:	428b      	cmp	r3, r1
   2dab0:	d232      	bcs.n	2db18 <_free_r+0x11c>
   2dab2:	6892      	ldr	r2, [r2, #8]
   2dab4:	4290      	cmp	r0, r2
   2dab6:	d1f7      	bne.n	2daa8 <_free_r+0xac>
   2dab8:	68c3      	ldr	r3, [r0, #12]
   2daba:	60a0      	str	r0, [r4, #8]
   2dabc:	60e3      	str	r3, [r4, #12]
   2dabe:	609c      	str	r4, [r3, #8]
   2dac0:	60c4      	str	r4, [r0, #12]
   2dac2:	4640      	mov	r0, r8
   2dac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2dac8:	f7fc bf7a 	b.w	2a9c0 <__malloc_unlock>
   2dacc:	6895      	ldr	r5, [r2, #8]
   2dace:	4f3b      	ldr	r7, [pc, #236]	; (2dbbc <_free_r+0x1c0>)
   2dad0:	42bd      	cmp	r5, r7
   2dad2:	4403      	add	r3, r0
   2dad4:	d040      	beq.n	2db58 <_free_r+0x15c>
   2dad6:	68d0      	ldr	r0, [r2, #12]
   2dad8:	60e8      	str	r0, [r5, #12]
   2dada:	f043 0201 	orr.w	r2, r3, #1
   2dade:	6085      	str	r5, [r0, #8]
   2dae0:	6062      	str	r2, [r4, #4]
   2dae2:	50e3      	str	r3, [r4, r3]
   2dae4:	e7b7      	b.n	2da56 <_free_r+0x5a>
   2dae6:	07ff      	lsls	r7, r7, #31
   2dae8:	4403      	add	r3, r0
   2daea:	d407      	bmi.n	2dafc <_free_r+0x100>
   2daec:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2daf0:	1aa4      	subs	r4, r4, r2
   2daf2:	4413      	add	r3, r2
   2daf4:	68a0      	ldr	r0, [r4, #8]
   2daf6:	68e2      	ldr	r2, [r4, #12]
   2daf8:	60c2      	str	r2, [r0, #12]
   2dafa:	6090      	str	r0, [r2, #8]
   2dafc:	4a30      	ldr	r2, [pc, #192]	; (2dbc0 <_free_r+0x1c4>)
   2dafe:	6812      	ldr	r2, [r2, #0]
   2db00:	f043 0001 	orr.w	r0, r3, #1
   2db04:	4293      	cmp	r3, r2
   2db06:	6060      	str	r0, [r4, #4]
   2db08:	608c      	str	r4, [r1, #8]
   2db0a:	d3b9      	bcc.n	2da80 <_free_r+0x84>
   2db0c:	4b2d      	ldr	r3, [pc, #180]	; (2dbc4 <_free_r+0x1c8>)
   2db0e:	4640      	mov	r0, r8
   2db10:	6819      	ldr	r1, [r3, #0]
   2db12:	f7ff ff23 	bl	2d95c <_malloc_trim_r>
   2db16:	e7b3      	b.n	2da80 <_free_r+0x84>
   2db18:	4610      	mov	r0, r2
   2db1a:	e7cd      	b.n	2dab8 <_free_r+0xbc>
   2db1c:	1811      	adds	r1, r2, r0
   2db1e:	6849      	ldr	r1, [r1, #4]
   2db20:	07c9      	lsls	r1, r1, #31
   2db22:	d444      	bmi.n	2dbae <_free_r+0x1b2>
   2db24:	6891      	ldr	r1, [r2, #8]
   2db26:	68d2      	ldr	r2, [r2, #12]
   2db28:	60ca      	str	r2, [r1, #12]
   2db2a:	4403      	add	r3, r0
   2db2c:	f043 0001 	orr.w	r0, r3, #1
   2db30:	6091      	str	r1, [r2, #8]
   2db32:	6060      	str	r0, [r4, #4]
   2db34:	50e3      	str	r3, [r4, r3]
   2db36:	e7a3      	b.n	2da80 <_free_r+0x84>
   2db38:	2a14      	cmp	r2, #20
   2db3a:	d816      	bhi.n	2db6a <_free_r+0x16e>
   2db3c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   2db40:	00ff      	lsls	r7, r7, #3
   2db42:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   2db46:	e7aa      	b.n	2da9e <_free_r+0xa2>
   2db48:	10aa      	asrs	r2, r5, #2
   2db4a:	2301      	movs	r3, #1
   2db4c:	684d      	ldr	r5, [r1, #4]
   2db4e:	4093      	lsls	r3, r2
   2db50:	432b      	orrs	r3, r5
   2db52:	604b      	str	r3, [r1, #4]
   2db54:	4603      	mov	r3, r0
   2db56:	e7b0      	b.n	2daba <_free_r+0xbe>
   2db58:	f043 0201 	orr.w	r2, r3, #1
   2db5c:	614c      	str	r4, [r1, #20]
   2db5e:	610c      	str	r4, [r1, #16]
   2db60:	60e5      	str	r5, [r4, #12]
   2db62:	60a5      	str	r5, [r4, #8]
   2db64:	6062      	str	r2, [r4, #4]
   2db66:	50e3      	str	r3, [r4, r3]
   2db68:	e78a      	b.n	2da80 <_free_r+0x84>
   2db6a:	2a54      	cmp	r2, #84	; 0x54
   2db6c:	d806      	bhi.n	2db7c <_free_r+0x180>
   2db6e:	0b1a      	lsrs	r2, r3, #12
   2db70:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   2db74:	00ff      	lsls	r7, r7, #3
   2db76:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   2db7a:	e790      	b.n	2da9e <_free_r+0xa2>
   2db7c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2db80:	d806      	bhi.n	2db90 <_free_r+0x194>
   2db82:	0bda      	lsrs	r2, r3, #15
   2db84:	f102 0778 	add.w	r7, r2, #120	; 0x78
   2db88:	00ff      	lsls	r7, r7, #3
   2db8a:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2db8e:	e786      	b.n	2da9e <_free_r+0xa2>
   2db90:	f240 5054 	movw	r0, #1364	; 0x554
   2db94:	4282      	cmp	r2, r0
   2db96:	d806      	bhi.n	2dba6 <_free_r+0x1aa>
   2db98:	0c9a      	lsrs	r2, r3, #18
   2db9a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2db9e:	00ff      	lsls	r7, r7, #3
   2dba0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   2dba4:	e77b      	b.n	2da9e <_free_r+0xa2>
   2dba6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   2dbaa:	257e      	movs	r5, #126	; 0x7e
   2dbac:	e777      	b.n	2da9e <_free_r+0xa2>
   2dbae:	f043 0101 	orr.w	r1, r3, #1
   2dbb2:	6061      	str	r1, [r4, #4]
   2dbb4:	6013      	str	r3, [r2, #0]
   2dbb6:	e763      	b.n	2da80 <_free_r+0x84>
   2dbb8:	2000cc24 	.word	0x2000cc24
   2dbbc:	2000cc2c 	.word	0x2000cc2c
   2dbc0:	2000d030 	.word	0x2000d030
   2dbc4:	200029d8 	.word	0x200029d8

0002dbc8 <_localeconv_r>:
   2dbc8:	4a04      	ldr	r2, [pc, #16]	; (2dbdc <_localeconv_r+0x14>)
   2dbca:	4b05      	ldr	r3, [pc, #20]	; (2dbe0 <_localeconv_r+0x18>)
   2dbcc:	6812      	ldr	r2, [r2, #0]
   2dbce:	6b50      	ldr	r0, [r2, #52]	; 0x34
   2dbd0:	2800      	cmp	r0, #0
   2dbd2:	bf08      	it	eq
   2dbd4:	4618      	moveq	r0, r3
   2dbd6:	30f0      	adds	r0, #240	; 0xf0
   2dbd8:	4770      	bx	lr
   2dbda:	bf00      	nop
   2dbdc:	2000c688 	.word	0x2000c688
   2dbe0:	2000cab8 	.word	0x2000cab8

0002dbe4 <__retarget_lock_acquire_recursive>:
   2dbe4:	4770      	bx	lr
   2dbe6:	bf00      	nop

0002dbe8 <__retarget_lock_release_recursive>:
   2dbe8:	4770      	bx	lr
   2dbea:	bf00      	nop

0002dbec <_Balloc>:
   2dbec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2dbee:	b570      	push	{r4, r5, r6, lr}
   2dbf0:	4605      	mov	r5, r0
   2dbf2:	460c      	mov	r4, r1
   2dbf4:	b14b      	cbz	r3, 2dc0a <_Balloc+0x1e>
   2dbf6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2dbfa:	b180      	cbz	r0, 2dc1e <_Balloc+0x32>
   2dbfc:	6802      	ldr	r2, [r0, #0]
   2dbfe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2dc02:	2300      	movs	r3, #0
   2dc04:	6103      	str	r3, [r0, #16]
   2dc06:	60c3      	str	r3, [r0, #12]
   2dc08:	bd70      	pop	{r4, r5, r6, pc}
   2dc0a:	2221      	movs	r2, #33	; 0x21
   2dc0c:	2104      	movs	r1, #4
   2dc0e:	f7fc fae7 	bl	2a1e0 <_calloc_r>
   2dc12:	64e8      	str	r0, [r5, #76]	; 0x4c
   2dc14:	4603      	mov	r3, r0
   2dc16:	2800      	cmp	r0, #0
   2dc18:	d1ed      	bne.n	2dbf6 <_Balloc+0xa>
   2dc1a:	2000      	movs	r0, #0
   2dc1c:	bd70      	pop	{r4, r5, r6, pc}
   2dc1e:	2101      	movs	r1, #1
   2dc20:	fa01 f604 	lsl.w	r6, r1, r4
   2dc24:	1d72      	adds	r2, r6, #5
   2dc26:	4628      	mov	r0, r5
   2dc28:	0092      	lsls	r2, r2, #2
   2dc2a:	f7fc fad9 	bl	2a1e0 <_calloc_r>
   2dc2e:	2800      	cmp	r0, #0
   2dc30:	d0f3      	beq.n	2dc1a <_Balloc+0x2e>
   2dc32:	6044      	str	r4, [r0, #4]
   2dc34:	6086      	str	r6, [r0, #8]
   2dc36:	e7e4      	b.n	2dc02 <_Balloc+0x16>

0002dc38 <_Bfree>:
   2dc38:	b131      	cbz	r1, 2dc48 <_Bfree+0x10>
   2dc3a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2dc3c:	684a      	ldr	r2, [r1, #4]
   2dc3e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2dc42:	6008      	str	r0, [r1, #0]
   2dc44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2dc48:	4770      	bx	lr
   2dc4a:	bf00      	nop

0002dc4c <__multadd>:
   2dc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dc4e:	690c      	ldr	r4, [r1, #16]
   2dc50:	b083      	sub	sp, #12
   2dc52:	460d      	mov	r5, r1
   2dc54:	4606      	mov	r6, r0
   2dc56:	f101 0e14 	add.w	lr, r1, #20
   2dc5a:	2700      	movs	r7, #0
   2dc5c:	f8de 0000 	ldr.w	r0, [lr]
   2dc60:	b281      	uxth	r1, r0
   2dc62:	fb02 3301 	mla	r3, r2, r1, r3
   2dc66:	0c01      	lsrs	r1, r0, #16
   2dc68:	0c18      	lsrs	r0, r3, #16
   2dc6a:	fb02 0101 	mla	r1, r2, r1, r0
   2dc6e:	b29b      	uxth	r3, r3
   2dc70:	3701      	adds	r7, #1
   2dc72:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   2dc76:	42bc      	cmp	r4, r7
   2dc78:	f84e 3b04 	str.w	r3, [lr], #4
   2dc7c:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2dc80:	dcec      	bgt.n	2dc5c <__multadd+0x10>
   2dc82:	b13b      	cbz	r3, 2dc94 <__multadd+0x48>
   2dc84:	68aa      	ldr	r2, [r5, #8]
   2dc86:	4294      	cmp	r4, r2
   2dc88:	da07      	bge.n	2dc9a <__multadd+0x4e>
   2dc8a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   2dc8e:	3401      	adds	r4, #1
   2dc90:	6153      	str	r3, [r2, #20]
   2dc92:	612c      	str	r4, [r5, #16]
   2dc94:	4628      	mov	r0, r5
   2dc96:	b003      	add	sp, #12
   2dc98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2dc9a:	6869      	ldr	r1, [r5, #4]
   2dc9c:	9301      	str	r3, [sp, #4]
   2dc9e:	3101      	adds	r1, #1
   2dca0:	4630      	mov	r0, r6
   2dca2:	f7ff ffa3 	bl	2dbec <_Balloc>
   2dca6:	692a      	ldr	r2, [r5, #16]
   2dca8:	3202      	adds	r2, #2
   2dcaa:	f105 010c 	add.w	r1, r5, #12
   2dcae:	4607      	mov	r7, r0
   2dcb0:	0092      	lsls	r2, r2, #2
   2dcb2:	300c      	adds	r0, #12
   2dcb4:	f7d2 fb04 	bl	2c0 <memcpy>
   2dcb8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   2dcba:	6869      	ldr	r1, [r5, #4]
   2dcbc:	9b01      	ldr	r3, [sp, #4]
   2dcbe:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2dcc2:	6028      	str	r0, [r5, #0]
   2dcc4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   2dcc8:	463d      	mov	r5, r7
   2dcca:	e7de      	b.n	2dc8a <__multadd+0x3e>

0002dccc <__hi0bits>:
   2dccc:	0c02      	lsrs	r2, r0, #16
   2dcce:	0412      	lsls	r2, r2, #16
   2dcd0:	4603      	mov	r3, r0
   2dcd2:	b9b2      	cbnz	r2, 2dd02 <__hi0bits+0x36>
   2dcd4:	0403      	lsls	r3, r0, #16
   2dcd6:	2010      	movs	r0, #16
   2dcd8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2dcdc:	bf04      	itt	eq
   2dcde:	021b      	lsleq	r3, r3, #8
   2dce0:	3008      	addeq	r0, #8
   2dce2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2dce6:	bf04      	itt	eq
   2dce8:	011b      	lsleq	r3, r3, #4
   2dcea:	3004      	addeq	r0, #4
   2dcec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2dcf0:	bf04      	itt	eq
   2dcf2:	009b      	lsleq	r3, r3, #2
   2dcf4:	3002      	addeq	r0, #2
   2dcf6:	2b00      	cmp	r3, #0
   2dcf8:	db02      	blt.n	2dd00 <__hi0bits+0x34>
   2dcfa:	005b      	lsls	r3, r3, #1
   2dcfc:	d403      	bmi.n	2dd06 <__hi0bits+0x3a>
   2dcfe:	2020      	movs	r0, #32
   2dd00:	4770      	bx	lr
   2dd02:	2000      	movs	r0, #0
   2dd04:	e7e8      	b.n	2dcd8 <__hi0bits+0xc>
   2dd06:	3001      	adds	r0, #1
   2dd08:	4770      	bx	lr
   2dd0a:	bf00      	nop

0002dd0c <__lo0bits>:
   2dd0c:	6803      	ldr	r3, [r0, #0]
   2dd0e:	f013 0207 	ands.w	r2, r3, #7
   2dd12:	4601      	mov	r1, r0
   2dd14:	d007      	beq.n	2dd26 <__lo0bits+0x1a>
   2dd16:	07da      	lsls	r2, r3, #31
   2dd18:	d421      	bmi.n	2dd5e <__lo0bits+0x52>
   2dd1a:	0798      	lsls	r0, r3, #30
   2dd1c:	d421      	bmi.n	2dd62 <__lo0bits+0x56>
   2dd1e:	089b      	lsrs	r3, r3, #2
   2dd20:	600b      	str	r3, [r1, #0]
   2dd22:	2002      	movs	r0, #2
   2dd24:	4770      	bx	lr
   2dd26:	b298      	uxth	r0, r3
   2dd28:	b198      	cbz	r0, 2dd52 <__lo0bits+0x46>
   2dd2a:	4610      	mov	r0, r2
   2dd2c:	f013 0fff 	tst.w	r3, #255	; 0xff
   2dd30:	bf04      	itt	eq
   2dd32:	0a1b      	lsreq	r3, r3, #8
   2dd34:	3008      	addeq	r0, #8
   2dd36:	071a      	lsls	r2, r3, #28
   2dd38:	bf04      	itt	eq
   2dd3a:	091b      	lsreq	r3, r3, #4
   2dd3c:	3004      	addeq	r0, #4
   2dd3e:	079a      	lsls	r2, r3, #30
   2dd40:	bf04      	itt	eq
   2dd42:	089b      	lsreq	r3, r3, #2
   2dd44:	3002      	addeq	r0, #2
   2dd46:	07da      	lsls	r2, r3, #31
   2dd48:	d407      	bmi.n	2dd5a <__lo0bits+0x4e>
   2dd4a:	085b      	lsrs	r3, r3, #1
   2dd4c:	d104      	bne.n	2dd58 <__lo0bits+0x4c>
   2dd4e:	2020      	movs	r0, #32
   2dd50:	4770      	bx	lr
   2dd52:	0c1b      	lsrs	r3, r3, #16
   2dd54:	2010      	movs	r0, #16
   2dd56:	e7e9      	b.n	2dd2c <__lo0bits+0x20>
   2dd58:	3001      	adds	r0, #1
   2dd5a:	600b      	str	r3, [r1, #0]
   2dd5c:	4770      	bx	lr
   2dd5e:	2000      	movs	r0, #0
   2dd60:	4770      	bx	lr
   2dd62:	085b      	lsrs	r3, r3, #1
   2dd64:	600b      	str	r3, [r1, #0]
   2dd66:	2001      	movs	r0, #1
   2dd68:	4770      	bx	lr
   2dd6a:	bf00      	nop

0002dd6c <__i2b>:
   2dd6c:	b510      	push	{r4, lr}
   2dd6e:	460c      	mov	r4, r1
   2dd70:	2101      	movs	r1, #1
   2dd72:	f7ff ff3b 	bl	2dbec <_Balloc>
   2dd76:	2201      	movs	r2, #1
   2dd78:	6144      	str	r4, [r0, #20]
   2dd7a:	6102      	str	r2, [r0, #16]
   2dd7c:	bd10      	pop	{r4, pc}
   2dd7e:	bf00      	nop

0002dd80 <__multiply>:
   2dd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dd84:	690c      	ldr	r4, [r1, #16]
   2dd86:	6915      	ldr	r5, [r2, #16]
   2dd88:	42ac      	cmp	r4, r5
   2dd8a:	b083      	sub	sp, #12
   2dd8c:	468b      	mov	fp, r1
   2dd8e:	4616      	mov	r6, r2
   2dd90:	da04      	bge.n	2dd9c <__multiply+0x1c>
   2dd92:	4622      	mov	r2, r4
   2dd94:	46b3      	mov	fp, r6
   2dd96:	462c      	mov	r4, r5
   2dd98:	460e      	mov	r6, r1
   2dd9a:	4615      	mov	r5, r2
   2dd9c:	f8db 3008 	ldr.w	r3, [fp, #8]
   2dda0:	f8db 1004 	ldr.w	r1, [fp, #4]
   2dda4:	eb04 0805 	add.w	r8, r4, r5
   2dda8:	4598      	cmp	r8, r3
   2ddaa:	bfc8      	it	gt
   2ddac:	3101      	addgt	r1, #1
   2ddae:	f7ff ff1d 	bl	2dbec <_Balloc>
   2ddb2:	f100 0914 	add.w	r9, r0, #20
   2ddb6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   2ddba:	45d1      	cmp	r9, sl
   2ddbc:	9000      	str	r0, [sp, #0]
   2ddbe:	d205      	bcs.n	2ddcc <__multiply+0x4c>
   2ddc0:	464b      	mov	r3, r9
   2ddc2:	2100      	movs	r1, #0
   2ddc4:	f843 1b04 	str.w	r1, [r3], #4
   2ddc8:	459a      	cmp	sl, r3
   2ddca:	d8fb      	bhi.n	2ddc4 <__multiply+0x44>
   2ddcc:	f106 0c14 	add.w	ip, r6, #20
   2ddd0:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   2ddd4:	f10b 0b14 	add.w	fp, fp, #20
   2ddd8:	459c      	cmp	ip, r3
   2ddda:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   2ddde:	d24c      	bcs.n	2de7a <__multiply+0xfa>
   2dde0:	f8cd a004 	str.w	sl, [sp, #4]
   2dde4:	469a      	mov	sl, r3
   2dde6:	f8dc 5000 	ldr.w	r5, [ip]
   2ddea:	b2af      	uxth	r7, r5
   2ddec:	b1ef      	cbz	r7, 2de2a <__multiply+0xaa>
   2ddee:	2100      	movs	r1, #0
   2ddf0:	464d      	mov	r5, r9
   2ddf2:	465e      	mov	r6, fp
   2ddf4:	460c      	mov	r4, r1
   2ddf6:	f856 2b04 	ldr.w	r2, [r6], #4
   2ddfa:	6828      	ldr	r0, [r5, #0]
   2ddfc:	b293      	uxth	r3, r2
   2ddfe:	b281      	uxth	r1, r0
   2de00:	fb07 1303 	mla	r3, r7, r3, r1
   2de04:	0c12      	lsrs	r2, r2, #16
   2de06:	0c01      	lsrs	r1, r0, #16
   2de08:	4423      	add	r3, r4
   2de0a:	fb07 1102 	mla	r1, r7, r2, r1
   2de0e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2de12:	b29b      	uxth	r3, r3
   2de14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2de18:	45b6      	cmp	lr, r6
   2de1a:	f845 3b04 	str.w	r3, [r5], #4
   2de1e:	ea4f 4411 	mov.w	r4, r1, lsr #16
   2de22:	d8e8      	bhi.n	2ddf6 <__multiply+0x76>
   2de24:	602c      	str	r4, [r5, #0]
   2de26:	f8dc 5000 	ldr.w	r5, [ip]
   2de2a:	0c2d      	lsrs	r5, r5, #16
   2de2c:	d01d      	beq.n	2de6a <__multiply+0xea>
   2de2e:	f8d9 3000 	ldr.w	r3, [r9]
   2de32:	4648      	mov	r0, r9
   2de34:	461c      	mov	r4, r3
   2de36:	4659      	mov	r1, fp
   2de38:	2200      	movs	r2, #0
   2de3a:	880e      	ldrh	r6, [r1, #0]
   2de3c:	0c24      	lsrs	r4, r4, #16
   2de3e:	fb05 4406 	mla	r4, r5, r6, r4
   2de42:	4422      	add	r2, r4
   2de44:	b29b      	uxth	r3, r3
   2de46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2de4a:	f840 3b04 	str.w	r3, [r0], #4
   2de4e:	f851 3b04 	ldr.w	r3, [r1], #4
   2de52:	6804      	ldr	r4, [r0, #0]
   2de54:	0c1b      	lsrs	r3, r3, #16
   2de56:	b2a6      	uxth	r6, r4
   2de58:	fb05 6303 	mla	r3, r5, r3, r6
   2de5c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2de60:	458e      	cmp	lr, r1
   2de62:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2de66:	d8e8      	bhi.n	2de3a <__multiply+0xba>
   2de68:	6003      	str	r3, [r0, #0]
   2de6a:	f10c 0c04 	add.w	ip, ip, #4
   2de6e:	45e2      	cmp	sl, ip
   2de70:	f109 0904 	add.w	r9, r9, #4
   2de74:	d8b7      	bhi.n	2dde6 <__multiply+0x66>
   2de76:	f8dd a004 	ldr.w	sl, [sp, #4]
   2de7a:	f1b8 0f00 	cmp.w	r8, #0
   2de7e:	dd0b      	ble.n	2de98 <__multiply+0x118>
   2de80:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   2de84:	f1aa 0a04 	sub.w	sl, sl, #4
   2de88:	b11b      	cbz	r3, 2de92 <__multiply+0x112>
   2de8a:	e005      	b.n	2de98 <__multiply+0x118>
   2de8c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2de90:	b913      	cbnz	r3, 2de98 <__multiply+0x118>
   2de92:	f1b8 0801 	subs.w	r8, r8, #1
   2de96:	d1f9      	bne.n	2de8c <__multiply+0x10c>
   2de98:	9800      	ldr	r0, [sp, #0]
   2de9a:	f8c0 8010 	str.w	r8, [r0, #16]
   2de9e:	b003      	add	sp, #12
   2dea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002dea4 <__pow5mult>:
   2dea4:	f012 0303 	ands.w	r3, r2, #3
   2dea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2deac:	4614      	mov	r4, r2
   2deae:	4607      	mov	r7, r0
   2deb0:	d12e      	bne.n	2df10 <__pow5mult+0x6c>
   2deb2:	460d      	mov	r5, r1
   2deb4:	10a4      	asrs	r4, r4, #2
   2deb6:	d01c      	beq.n	2def2 <__pow5mult+0x4e>
   2deb8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   2deba:	b396      	cbz	r6, 2df22 <__pow5mult+0x7e>
   2debc:	07e3      	lsls	r3, r4, #31
   2debe:	f04f 0800 	mov.w	r8, #0
   2dec2:	d406      	bmi.n	2ded2 <__pow5mult+0x2e>
   2dec4:	1064      	asrs	r4, r4, #1
   2dec6:	d014      	beq.n	2def2 <__pow5mult+0x4e>
   2dec8:	6830      	ldr	r0, [r6, #0]
   2deca:	b1a8      	cbz	r0, 2def8 <__pow5mult+0x54>
   2decc:	4606      	mov	r6, r0
   2dece:	07e3      	lsls	r3, r4, #31
   2ded0:	d5f8      	bpl.n	2dec4 <__pow5mult+0x20>
   2ded2:	4632      	mov	r2, r6
   2ded4:	4629      	mov	r1, r5
   2ded6:	4638      	mov	r0, r7
   2ded8:	f7ff ff52 	bl	2dd80 <__multiply>
   2dedc:	b1b5      	cbz	r5, 2df0c <__pow5mult+0x68>
   2dede:	686a      	ldr	r2, [r5, #4]
   2dee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2dee2:	1064      	asrs	r4, r4, #1
   2dee4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2dee8:	6029      	str	r1, [r5, #0]
   2deea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   2deee:	4605      	mov	r5, r0
   2def0:	d1ea      	bne.n	2dec8 <__pow5mult+0x24>
   2def2:	4628      	mov	r0, r5
   2def4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2def8:	4632      	mov	r2, r6
   2defa:	4631      	mov	r1, r6
   2defc:	4638      	mov	r0, r7
   2defe:	f7ff ff3f 	bl	2dd80 <__multiply>
   2df02:	6030      	str	r0, [r6, #0]
   2df04:	f8c0 8000 	str.w	r8, [r0]
   2df08:	4606      	mov	r6, r0
   2df0a:	e7e0      	b.n	2dece <__pow5mult+0x2a>
   2df0c:	4605      	mov	r5, r0
   2df0e:	e7d9      	b.n	2dec4 <__pow5mult+0x20>
   2df10:	1e5a      	subs	r2, r3, #1
   2df12:	4d0b      	ldr	r5, [pc, #44]	; (2df40 <__pow5mult+0x9c>)
   2df14:	2300      	movs	r3, #0
   2df16:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2df1a:	f7ff fe97 	bl	2dc4c <__multadd>
   2df1e:	4605      	mov	r5, r0
   2df20:	e7c8      	b.n	2deb4 <__pow5mult+0x10>
   2df22:	2101      	movs	r1, #1
   2df24:	4638      	mov	r0, r7
   2df26:	f7ff fe61 	bl	2dbec <_Balloc>
   2df2a:	f240 2171 	movw	r1, #625	; 0x271
   2df2e:	2201      	movs	r2, #1
   2df30:	2300      	movs	r3, #0
   2df32:	6141      	str	r1, [r0, #20]
   2df34:	6102      	str	r2, [r0, #16]
   2df36:	4606      	mov	r6, r0
   2df38:	64b8      	str	r0, [r7, #72]	; 0x48
   2df3a:	6003      	str	r3, [r0, #0]
   2df3c:	e7be      	b.n	2debc <__pow5mult+0x18>
   2df3e:	bf00      	nop
   2df40:	00033458 	.word	0x00033458

0002df44 <__lshift>:
   2df44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2df48:	4691      	mov	r9, r2
   2df4a:	690a      	ldr	r2, [r1, #16]
   2df4c:	688b      	ldr	r3, [r1, #8]
   2df4e:	ea4f 1469 	mov.w	r4, r9, asr #5
   2df52:	eb04 0802 	add.w	r8, r4, r2
   2df56:	f108 0501 	add.w	r5, r8, #1
   2df5a:	429d      	cmp	r5, r3
   2df5c:	460e      	mov	r6, r1
   2df5e:	4607      	mov	r7, r0
   2df60:	6849      	ldr	r1, [r1, #4]
   2df62:	dd04      	ble.n	2df6e <__lshift+0x2a>
   2df64:	005b      	lsls	r3, r3, #1
   2df66:	429d      	cmp	r5, r3
   2df68:	f101 0101 	add.w	r1, r1, #1
   2df6c:	dcfa      	bgt.n	2df64 <__lshift+0x20>
   2df6e:	4638      	mov	r0, r7
   2df70:	f7ff fe3c 	bl	2dbec <_Balloc>
   2df74:	2c00      	cmp	r4, #0
   2df76:	f100 0314 	add.w	r3, r0, #20
   2df7a:	dd06      	ble.n	2df8a <__lshift+0x46>
   2df7c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   2df80:	2100      	movs	r1, #0
   2df82:	f843 1b04 	str.w	r1, [r3], #4
   2df86:	429a      	cmp	r2, r3
   2df88:	d1fb      	bne.n	2df82 <__lshift+0x3e>
   2df8a:	6934      	ldr	r4, [r6, #16]
   2df8c:	f106 0114 	add.w	r1, r6, #20
   2df90:	f019 091f 	ands.w	r9, r9, #31
   2df94:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   2df98:	d01d      	beq.n	2dfd6 <__lshift+0x92>
   2df9a:	f1c9 0c20 	rsb	ip, r9, #32
   2df9e:	2200      	movs	r2, #0
   2dfa0:	680c      	ldr	r4, [r1, #0]
   2dfa2:	fa04 f409 	lsl.w	r4, r4, r9
   2dfa6:	4314      	orrs	r4, r2
   2dfa8:	f843 4b04 	str.w	r4, [r3], #4
   2dfac:	f851 2b04 	ldr.w	r2, [r1], #4
   2dfb0:	458e      	cmp	lr, r1
   2dfb2:	fa22 f20c 	lsr.w	r2, r2, ip
   2dfb6:	d8f3      	bhi.n	2dfa0 <__lshift+0x5c>
   2dfb8:	601a      	str	r2, [r3, #0]
   2dfba:	b10a      	cbz	r2, 2dfc0 <__lshift+0x7c>
   2dfbc:	f108 0502 	add.w	r5, r8, #2
   2dfc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2dfc2:	6872      	ldr	r2, [r6, #4]
   2dfc4:	3d01      	subs	r5, #1
   2dfc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2dfca:	6105      	str	r5, [r0, #16]
   2dfcc:	6031      	str	r1, [r6, #0]
   2dfce:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2dfd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2dfd6:	3b04      	subs	r3, #4
   2dfd8:	f851 2b04 	ldr.w	r2, [r1], #4
   2dfdc:	f843 2f04 	str.w	r2, [r3, #4]!
   2dfe0:	458e      	cmp	lr, r1
   2dfe2:	d8f9      	bhi.n	2dfd8 <__lshift+0x94>
   2dfe4:	e7ec      	b.n	2dfc0 <__lshift+0x7c>
   2dfe6:	bf00      	nop

0002dfe8 <__mcmp>:
   2dfe8:	b430      	push	{r4, r5}
   2dfea:	690b      	ldr	r3, [r1, #16]
   2dfec:	4605      	mov	r5, r0
   2dfee:	6900      	ldr	r0, [r0, #16]
   2dff0:	1ac0      	subs	r0, r0, r3
   2dff2:	d10f      	bne.n	2e014 <__mcmp+0x2c>
   2dff4:	009b      	lsls	r3, r3, #2
   2dff6:	3514      	adds	r5, #20
   2dff8:	3114      	adds	r1, #20
   2dffa:	4419      	add	r1, r3
   2dffc:	442b      	add	r3, r5
   2dffe:	e001      	b.n	2e004 <__mcmp+0x1c>
   2e000:	429d      	cmp	r5, r3
   2e002:	d207      	bcs.n	2e014 <__mcmp+0x2c>
   2e004:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   2e008:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2e00c:	4294      	cmp	r4, r2
   2e00e:	d0f7      	beq.n	2e000 <__mcmp+0x18>
   2e010:	d302      	bcc.n	2e018 <__mcmp+0x30>
   2e012:	2001      	movs	r0, #1
   2e014:	bc30      	pop	{r4, r5}
   2e016:	4770      	bx	lr
   2e018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e01c:	e7fa      	b.n	2e014 <__mcmp+0x2c>
   2e01e:	bf00      	nop

0002e020 <__mdiff>:
   2e020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e024:	690f      	ldr	r7, [r1, #16]
   2e026:	460e      	mov	r6, r1
   2e028:	6911      	ldr	r1, [r2, #16]
   2e02a:	1a7f      	subs	r7, r7, r1
   2e02c:	2f00      	cmp	r7, #0
   2e02e:	4690      	mov	r8, r2
   2e030:	d117      	bne.n	2e062 <__mdiff+0x42>
   2e032:	0089      	lsls	r1, r1, #2
   2e034:	f106 0514 	add.w	r5, r6, #20
   2e038:	f102 0e14 	add.w	lr, r2, #20
   2e03c:	186b      	adds	r3, r5, r1
   2e03e:	4471      	add	r1, lr
   2e040:	e001      	b.n	2e046 <__mdiff+0x26>
   2e042:	429d      	cmp	r5, r3
   2e044:	d25c      	bcs.n	2e100 <__mdiff+0xe0>
   2e046:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2e04a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   2e04e:	42a2      	cmp	r2, r4
   2e050:	d0f7      	beq.n	2e042 <__mdiff+0x22>
   2e052:	d25e      	bcs.n	2e112 <__mdiff+0xf2>
   2e054:	4633      	mov	r3, r6
   2e056:	462c      	mov	r4, r5
   2e058:	4646      	mov	r6, r8
   2e05a:	4675      	mov	r5, lr
   2e05c:	4698      	mov	r8, r3
   2e05e:	2701      	movs	r7, #1
   2e060:	e005      	b.n	2e06e <__mdiff+0x4e>
   2e062:	db58      	blt.n	2e116 <__mdiff+0xf6>
   2e064:	f106 0514 	add.w	r5, r6, #20
   2e068:	f108 0414 	add.w	r4, r8, #20
   2e06c:	2700      	movs	r7, #0
   2e06e:	6871      	ldr	r1, [r6, #4]
   2e070:	f7ff fdbc 	bl	2dbec <_Balloc>
   2e074:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2e078:	6936      	ldr	r6, [r6, #16]
   2e07a:	60c7      	str	r7, [r0, #12]
   2e07c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   2e080:	46a6      	mov	lr, r4
   2e082:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   2e086:	f100 0414 	add.w	r4, r0, #20
   2e08a:	2300      	movs	r3, #0
   2e08c:	f85e 1b04 	ldr.w	r1, [lr], #4
   2e090:	f855 8b04 	ldr.w	r8, [r5], #4
   2e094:	b28a      	uxth	r2, r1
   2e096:	fa13 f388 	uxtah	r3, r3, r8
   2e09a:	0c09      	lsrs	r1, r1, #16
   2e09c:	1a9a      	subs	r2, r3, r2
   2e09e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2e0a2:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2e0a6:	b292      	uxth	r2, r2
   2e0a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2e0ac:	45f4      	cmp	ip, lr
   2e0ae:	f844 2b04 	str.w	r2, [r4], #4
   2e0b2:	ea4f 4323 	mov.w	r3, r3, asr #16
   2e0b6:	d8e9      	bhi.n	2e08c <__mdiff+0x6c>
   2e0b8:	42af      	cmp	r7, r5
   2e0ba:	d917      	bls.n	2e0ec <__mdiff+0xcc>
   2e0bc:	46a4      	mov	ip, r4
   2e0be:	46ae      	mov	lr, r5
   2e0c0:	f85e 2b04 	ldr.w	r2, [lr], #4
   2e0c4:	fa13 f382 	uxtah	r3, r3, r2
   2e0c8:	1419      	asrs	r1, r3, #16
   2e0ca:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   2e0ce:	b29b      	uxth	r3, r3
   2e0d0:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   2e0d4:	4577      	cmp	r7, lr
   2e0d6:	f84c 2b04 	str.w	r2, [ip], #4
   2e0da:	ea4f 4321 	mov.w	r3, r1, asr #16
   2e0de:	d8ef      	bhi.n	2e0c0 <__mdiff+0xa0>
   2e0e0:	43ed      	mvns	r5, r5
   2e0e2:	442f      	add	r7, r5
   2e0e4:	f027 0703 	bic.w	r7, r7, #3
   2e0e8:	3704      	adds	r7, #4
   2e0ea:	443c      	add	r4, r7
   2e0ec:	3c04      	subs	r4, #4
   2e0ee:	b922      	cbnz	r2, 2e0fa <__mdiff+0xda>
   2e0f0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2e0f4:	3e01      	subs	r6, #1
   2e0f6:	2b00      	cmp	r3, #0
   2e0f8:	d0fa      	beq.n	2e0f0 <__mdiff+0xd0>
   2e0fa:	6106      	str	r6, [r0, #16]
   2e0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e100:	2100      	movs	r1, #0
   2e102:	f7ff fd73 	bl	2dbec <_Balloc>
   2e106:	2201      	movs	r2, #1
   2e108:	2300      	movs	r3, #0
   2e10a:	6102      	str	r2, [r0, #16]
   2e10c:	6143      	str	r3, [r0, #20]
   2e10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e112:	4674      	mov	r4, lr
   2e114:	e7ab      	b.n	2e06e <__mdiff+0x4e>
   2e116:	4633      	mov	r3, r6
   2e118:	f106 0414 	add.w	r4, r6, #20
   2e11c:	f102 0514 	add.w	r5, r2, #20
   2e120:	4616      	mov	r6, r2
   2e122:	2701      	movs	r7, #1
   2e124:	4698      	mov	r8, r3
   2e126:	e7a2      	b.n	2e06e <__mdiff+0x4e>

0002e128 <__d2b>:
   2e128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e12c:	b082      	sub	sp, #8
   2e12e:	2101      	movs	r1, #1
   2e130:	461c      	mov	r4, r3
   2e132:	f3c3 570a 	ubfx	r7, r3, #20, #11
   2e136:	4615      	mov	r5, r2
   2e138:	9e08      	ldr	r6, [sp, #32]
   2e13a:	f7ff fd57 	bl	2dbec <_Balloc>
   2e13e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2e142:	4680      	mov	r8, r0
   2e144:	b10f      	cbz	r7, 2e14a <__d2b+0x22>
   2e146:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   2e14a:	9401      	str	r4, [sp, #4]
   2e14c:	b31d      	cbz	r5, 2e196 <__d2b+0x6e>
   2e14e:	a802      	add	r0, sp, #8
   2e150:	f840 5d08 	str.w	r5, [r0, #-8]!
   2e154:	f7ff fdda 	bl	2dd0c <__lo0bits>
   2e158:	2800      	cmp	r0, #0
   2e15a:	d134      	bne.n	2e1c6 <__d2b+0x9e>
   2e15c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2e160:	f8c8 2014 	str.w	r2, [r8, #20]
   2e164:	2b00      	cmp	r3, #0
   2e166:	bf0c      	ite	eq
   2e168:	2101      	moveq	r1, #1
   2e16a:	2102      	movne	r1, #2
   2e16c:	f8c8 3018 	str.w	r3, [r8, #24]
   2e170:	f8c8 1010 	str.w	r1, [r8, #16]
   2e174:	b9df      	cbnz	r7, 2e1ae <__d2b+0x86>
   2e176:	eb08 0381 	add.w	r3, r8, r1, lsl #2
   2e17a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2e17e:	6030      	str	r0, [r6, #0]
   2e180:	6918      	ldr	r0, [r3, #16]
   2e182:	f7ff fda3 	bl	2dccc <__hi0bits>
   2e186:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e188:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   2e18c:	6018      	str	r0, [r3, #0]
   2e18e:	4640      	mov	r0, r8
   2e190:	b002      	add	sp, #8
   2e192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e196:	a801      	add	r0, sp, #4
   2e198:	f7ff fdb8 	bl	2dd0c <__lo0bits>
   2e19c:	9b01      	ldr	r3, [sp, #4]
   2e19e:	f8c8 3014 	str.w	r3, [r8, #20]
   2e1a2:	2101      	movs	r1, #1
   2e1a4:	3020      	adds	r0, #32
   2e1a6:	f8c8 1010 	str.w	r1, [r8, #16]
   2e1aa:	2f00      	cmp	r7, #0
   2e1ac:	d0e3      	beq.n	2e176 <__d2b+0x4e>
   2e1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e1b0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   2e1b4:	4407      	add	r7, r0
   2e1b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2e1ba:	6037      	str	r7, [r6, #0]
   2e1bc:	6018      	str	r0, [r3, #0]
   2e1be:	4640      	mov	r0, r8
   2e1c0:	b002      	add	sp, #8
   2e1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e1c6:	e89d 000a 	ldmia.w	sp, {r1, r3}
   2e1ca:	f1c0 0220 	rsb	r2, r0, #32
   2e1ce:	fa03 f202 	lsl.w	r2, r3, r2
   2e1d2:	430a      	orrs	r2, r1
   2e1d4:	40c3      	lsrs	r3, r0
   2e1d6:	9301      	str	r3, [sp, #4]
   2e1d8:	f8c8 2014 	str.w	r2, [r8, #20]
   2e1dc:	e7c2      	b.n	2e164 <__d2b+0x3c>
   2e1de:	bf00      	nop

0002e1e0 <__ssprint_r>:
   2e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e1e4:	6893      	ldr	r3, [r2, #8]
   2e1e6:	b083      	sub	sp, #12
   2e1e8:	4690      	mov	r8, r2
   2e1ea:	2b00      	cmp	r3, #0
   2e1ec:	d070      	beq.n	2e2d0 <__ssprint_r+0xf0>
   2e1ee:	4682      	mov	sl, r0
   2e1f0:	460c      	mov	r4, r1
   2e1f2:	6817      	ldr	r7, [r2, #0]
   2e1f4:	688d      	ldr	r5, [r1, #8]
   2e1f6:	6808      	ldr	r0, [r1, #0]
   2e1f8:	e042      	b.n	2e280 <__ssprint_r+0xa0>
   2e1fa:	89a3      	ldrh	r3, [r4, #12]
   2e1fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2e200:	d02e      	beq.n	2e260 <__ssprint_r+0x80>
   2e202:	6965      	ldr	r5, [r4, #20]
   2e204:	6921      	ldr	r1, [r4, #16]
   2e206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2e20a:	eba0 0b01 	sub.w	fp, r0, r1
   2e20e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2e212:	f10b 0001 	add.w	r0, fp, #1
   2e216:	106d      	asrs	r5, r5, #1
   2e218:	4430      	add	r0, r6
   2e21a:	42a8      	cmp	r0, r5
   2e21c:	462a      	mov	r2, r5
   2e21e:	bf84      	itt	hi
   2e220:	4605      	movhi	r5, r0
   2e222:	462a      	movhi	r2, r5
   2e224:	055b      	lsls	r3, r3, #21
   2e226:	d538      	bpl.n	2e29a <__ssprint_r+0xba>
   2e228:	4611      	mov	r1, r2
   2e22a:	4650      	mov	r0, sl
   2e22c:	f7fc f81a 	bl	2a264 <_malloc_r>
   2e230:	2800      	cmp	r0, #0
   2e232:	d03c      	beq.n	2e2ae <__ssprint_r+0xce>
   2e234:	465a      	mov	r2, fp
   2e236:	6921      	ldr	r1, [r4, #16]
   2e238:	9001      	str	r0, [sp, #4]
   2e23a:	f7d2 f841 	bl	2c0 <memcpy>
   2e23e:	89a2      	ldrh	r2, [r4, #12]
   2e240:	9b01      	ldr	r3, [sp, #4]
   2e242:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2e246:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2e24a:	81a2      	strh	r2, [r4, #12]
   2e24c:	eba5 020b 	sub.w	r2, r5, fp
   2e250:	eb03 000b 	add.w	r0, r3, fp
   2e254:	6165      	str	r5, [r4, #20]
   2e256:	6123      	str	r3, [r4, #16]
   2e258:	6020      	str	r0, [r4, #0]
   2e25a:	60a2      	str	r2, [r4, #8]
   2e25c:	4635      	mov	r5, r6
   2e25e:	46b3      	mov	fp, r6
   2e260:	465a      	mov	r2, fp
   2e262:	4649      	mov	r1, r9
   2e264:	f7fc faf4 	bl	2a850 <memmove>
   2e268:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2e26c:	68a2      	ldr	r2, [r4, #8]
   2e26e:	6820      	ldr	r0, [r4, #0]
   2e270:	1b55      	subs	r5, r2, r5
   2e272:	4458      	add	r0, fp
   2e274:	1b9e      	subs	r6, r3, r6
   2e276:	60a5      	str	r5, [r4, #8]
   2e278:	6020      	str	r0, [r4, #0]
   2e27a:	f8c8 6008 	str.w	r6, [r8, #8]
   2e27e:	b33e      	cbz	r6, 2e2d0 <__ssprint_r+0xf0>
   2e280:	687e      	ldr	r6, [r7, #4]
   2e282:	463b      	mov	r3, r7
   2e284:	3708      	adds	r7, #8
   2e286:	2e00      	cmp	r6, #0
   2e288:	d0fa      	beq.n	2e280 <__ssprint_r+0xa0>
   2e28a:	42ae      	cmp	r6, r5
   2e28c:	f8d3 9000 	ldr.w	r9, [r3]
   2e290:	46ab      	mov	fp, r5
   2e292:	d2b2      	bcs.n	2e1fa <__ssprint_r+0x1a>
   2e294:	4635      	mov	r5, r6
   2e296:	46b3      	mov	fp, r6
   2e298:	e7e2      	b.n	2e260 <__ssprint_r+0x80>
   2e29a:	4650      	mov	r0, sl
   2e29c:	f000 f81e 	bl	2e2dc <_realloc_r>
   2e2a0:	4603      	mov	r3, r0
   2e2a2:	2800      	cmp	r0, #0
   2e2a4:	d1d2      	bne.n	2e24c <__ssprint_r+0x6c>
   2e2a6:	6921      	ldr	r1, [r4, #16]
   2e2a8:	4650      	mov	r0, sl
   2e2aa:	f7ff fba7 	bl	2d9fc <_free_r>
   2e2ae:	230c      	movs	r3, #12
   2e2b0:	f8ca 3000 	str.w	r3, [sl]
   2e2b4:	89a3      	ldrh	r3, [r4, #12]
   2e2b6:	2200      	movs	r2, #0
   2e2b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e2bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e2c0:	81a3      	strh	r3, [r4, #12]
   2e2c2:	f8c8 2008 	str.w	r2, [r8, #8]
   2e2c6:	f8c8 2004 	str.w	r2, [r8, #4]
   2e2ca:	b003      	add	sp, #12
   2e2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e2d0:	2000      	movs	r0, #0
   2e2d2:	f8c8 0004 	str.w	r0, [r8, #4]
   2e2d6:	b003      	add	sp, #12
   2e2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e2dc <_realloc_r>:
   2e2dc:	2900      	cmp	r1, #0
   2e2de:	f000 8095 	beq.w	2e40c <_realloc_r+0x130>
   2e2e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e2e6:	460d      	mov	r5, r1
   2e2e8:	4616      	mov	r6, r2
   2e2ea:	b083      	sub	sp, #12
   2e2ec:	4680      	mov	r8, r0
   2e2ee:	f106 070b 	add.w	r7, r6, #11
   2e2f2:	f7fc fb5f 	bl	2a9b4 <__malloc_lock>
   2e2f6:	f855 ec04 	ldr.w	lr, [r5, #-4]
   2e2fa:	2f16      	cmp	r7, #22
   2e2fc:	f02e 0403 	bic.w	r4, lr, #3
   2e300:	f1a5 0908 	sub.w	r9, r5, #8
   2e304:	d83c      	bhi.n	2e380 <_realloc_r+0xa4>
   2e306:	2210      	movs	r2, #16
   2e308:	4617      	mov	r7, r2
   2e30a:	42be      	cmp	r6, r7
   2e30c:	d83d      	bhi.n	2e38a <_realloc_r+0xae>
   2e30e:	4294      	cmp	r4, r2
   2e310:	da43      	bge.n	2e39a <_realloc_r+0xbe>
   2e312:	4bc4      	ldr	r3, [pc, #784]	; (2e624 <_realloc_r+0x348>)
   2e314:	6899      	ldr	r1, [r3, #8]
   2e316:	eb09 0004 	add.w	r0, r9, r4
   2e31a:	4288      	cmp	r0, r1
   2e31c:	f000 80b4 	beq.w	2e488 <_realloc_r+0x1ac>
   2e320:	6843      	ldr	r3, [r0, #4]
   2e322:	f023 0101 	bic.w	r1, r3, #1
   2e326:	4401      	add	r1, r0
   2e328:	6849      	ldr	r1, [r1, #4]
   2e32a:	07c9      	lsls	r1, r1, #31
   2e32c:	d54c      	bpl.n	2e3c8 <_realloc_r+0xec>
   2e32e:	f01e 0f01 	tst.w	lr, #1
   2e332:	f000 809b 	beq.w	2e46c <_realloc_r+0x190>
   2e336:	4631      	mov	r1, r6
   2e338:	4640      	mov	r0, r8
   2e33a:	f7fb ff93 	bl	2a264 <_malloc_r>
   2e33e:	4606      	mov	r6, r0
   2e340:	2800      	cmp	r0, #0
   2e342:	d03a      	beq.n	2e3ba <_realloc_r+0xde>
   2e344:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2e348:	f023 0301 	bic.w	r3, r3, #1
   2e34c:	444b      	add	r3, r9
   2e34e:	f1a0 0208 	sub.w	r2, r0, #8
   2e352:	429a      	cmp	r2, r3
   2e354:	f000 8121 	beq.w	2e59a <_realloc_r+0x2be>
   2e358:	1f22      	subs	r2, r4, #4
   2e35a:	2a24      	cmp	r2, #36	; 0x24
   2e35c:	f200 8107 	bhi.w	2e56e <_realloc_r+0x292>
   2e360:	2a13      	cmp	r2, #19
   2e362:	f200 80db 	bhi.w	2e51c <_realloc_r+0x240>
   2e366:	4603      	mov	r3, r0
   2e368:	462a      	mov	r2, r5
   2e36a:	6811      	ldr	r1, [r2, #0]
   2e36c:	6019      	str	r1, [r3, #0]
   2e36e:	6851      	ldr	r1, [r2, #4]
   2e370:	6059      	str	r1, [r3, #4]
   2e372:	6892      	ldr	r2, [r2, #8]
   2e374:	609a      	str	r2, [r3, #8]
   2e376:	4629      	mov	r1, r5
   2e378:	4640      	mov	r0, r8
   2e37a:	f7ff fb3f 	bl	2d9fc <_free_r>
   2e37e:	e01c      	b.n	2e3ba <_realloc_r+0xde>
   2e380:	f027 0707 	bic.w	r7, r7, #7
   2e384:	2f00      	cmp	r7, #0
   2e386:	463a      	mov	r2, r7
   2e388:	dabf      	bge.n	2e30a <_realloc_r+0x2e>
   2e38a:	2600      	movs	r6, #0
   2e38c:	230c      	movs	r3, #12
   2e38e:	4630      	mov	r0, r6
   2e390:	f8c8 3000 	str.w	r3, [r8]
   2e394:	b003      	add	sp, #12
   2e396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e39a:	462e      	mov	r6, r5
   2e39c:	1be3      	subs	r3, r4, r7
   2e39e:	2b0f      	cmp	r3, #15
   2e3a0:	d81e      	bhi.n	2e3e0 <_realloc_r+0x104>
   2e3a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2e3a6:	f003 0301 	and.w	r3, r3, #1
   2e3aa:	4323      	orrs	r3, r4
   2e3ac:	444c      	add	r4, r9
   2e3ae:	f8c9 3004 	str.w	r3, [r9, #4]
   2e3b2:	6863      	ldr	r3, [r4, #4]
   2e3b4:	f043 0301 	orr.w	r3, r3, #1
   2e3b8:	6063      	str	r3, [r4, #4]
   2e3ba:	4640      	mov	r0, r8
   2e3bc:	f7fc fb00 	bl	2a9c0 <__malloc_unlock>
   2e3c0:	4630      	mov	r0, r6
   2e3c2:	b003      	add	sp, #12
   2e3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e3c8:	f023 0303 	bic.w	r3, r3, #3
   2e3cc:	18e1      	adds	r1, r4, r3
   2e3ce:	4291      	cmp	r1, r2
   2e3d0:	db1f      	blt.n	2e412 <_realloc_r+0x136>
   2e3d2:	68c3      	ldr	r3, [r0, #12]
   2e3d4:	6882      	ldr	r2, [r0, #8]
   2e3d6:	462e      	mov	r6, r5
   2e3d8:	60d3      	str	r3, [r2, #12]
   2e3da:	460c      	mov	r4, r1
   2e3dc:	609a      	str	r2, [r3, #8]
   2e3de:	e7dd      	b.n	2e39c <_realloc_r+0xc0>
   2e3e0:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2e3e4:	eb09 0107 	add.w	r1, r9, r7
   2e3e8:	f002 0201 	and.w	r2, r2, #1
   2e3ec:	444c      	add	r4, r9
   2e3ee:	f043 0301 	orr.w	r3, r3, #1
   2e3f2:	4317      	orrs	r7, r2
   2e3f4:	f8c9 7004 	str.w	r7, [r9, #4]
   2e3f8:	604b      	str	r3, [r1, #4]
   2e3fa:	6863      	ldr	r3, [r4, #4]
   2e3fc:	f043 0301 	orr.w	r3, r3, #1
   2e400:	3108      	adds	r1, #8
   2e402:	6063      	str	r3, [r4, #4]
   2e404:	4640      	mov	r0, r8
   2e406:	f7ff faf9 	bl	2d9fc <_free_r>
   2e40a:	e7d6      	b.n	2e3ba <_realloc_r+0xde>
   2e40c:	4611      	mov	r1, r2
   2e40e:	f7fb bf29 	b.w	2a264 <_malloc_r>
   2e412:	f01e 0f01 	tst.w	lr, #1
   2e416:	d18e      	bne.n	2e336 <_realloc_r+0x5a>
   2e418:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2e41c:	eba9 0a01 	sub.w	sl, r9, r1
   2e420:	f8da 1004 	ldr.w	r1, [sl, #4]
   2e424:	f021 0103 	bic.w	r1, r1, #3
   2e428:	440b      	add	r3, r1
   2e42a:	4423      	add	r3, r4
   2e42c:	4293      	cmp	r3, r2
   2e42e:	db25      	blt.n	2e47c <_realloc_r+0x1a0>
   2e430:	68c2      	ldr	r2, [r0, #12]
   2e432:	6881      	ldr	r1, [r0, #8]
   2e434:	4656      	mov	r6, sl
   2e436:	60ca      	str	r2, [r1, #12]
   2e438:	6091      	str	r1, [r2, #8]
   2e43a:	f8da 100c 	ldr.w	r1, [sl, #12]
   2e43e:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2e442:	1f22      	subs	r2, r4, #4
   2e444:	2a24      	cmp	r2, #36	; 0x24
   2e446:	60c1      	str	r1, [r0, #12]
   2e448:	6088      	str	r0, [r1, #8]
   2e44a:	f200 8094 	bhi.w	2e576 <_realloc_r+0x29a>
   2e44e:	2a13      	cmp	r2, #19
   2e450:	d96f      	bls.n	2e532 <_realloc_r+0x256>
   2e452:	6829      	ldr	r1, [r5, #0]
   2e454:	f8ca 1008 	str.w	r1, [sl, #8]
   2e458:	6869      	ldr	r1, [r5, #4]
   2e45a:	f8ca 100c 	str.w	r1, [sl, #12]
   2e45e:	2a1b      	cmp	r2, #27
   2e460:	f200 80a2 	bhi.w	2e5a8 <_realloc_r+0x2cc>
   2e464:	3508      	adds	r5, #8
   2e466:	f10a 0210 	add.w	r2, sl, #16
   2e46a:	e063      	b.n	2e534 <_realloc_r+0x258>
   2e46c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2e470:	eba9 0a03 	sub.w	sl, r9, r3
   2e474:	f8da 1004 	ldr.w	r1, [sl, #4]
   2e478:	f021 0103 	bic.w	r1, r1, #3
   2e47c:	1863      	adds	r3, r4, r1
   2e47e:	4293      	cmp	r3, r2
   2e480:	f6ff af59 	blt.w	2e336 <_realloc_r+0x5a>
   2e484:	4656      	mov	r6, sl
   2e486:	e7d8      	b.n	2e43a <_realloc_r+0x15e>
   2e488:	6841      	ldr	r1, [r0, #4]
   2e48a:	f021 0b03 	bic.w	fp, r1, #3
   2e48e:	44a3      	add	fp, r4
   2e490:	f107 0010 	add.w	r0, r7, #16
   2e494:	4583      	cmp	fp, r0
   2e496:	da56      	bge.n	2e546 <_realloc_r+0x26a>
   2e498:	f01e 0f01 	tst.w	lr, #1
   2e49c:	f47f af4b 	bne.w	2e336 <_realloc_r+0x5a>
   2e4a0:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2e4a4:	eba9 0a01 	sub.w	sl, r9, r1
   2e4a8:	f8da 1004 	ldr.w	r1, [sl, #4]
   2e4ac:	f021 0103 	bic.w	r1, r1, #3
   2e4b0:	448b      	add	fp, r1
   2e4b2:	4558      	cmp	r0, fp
   2e4b4:	dce2      	bgt.n	2e47c <_realloc_r+0x1a0>
   2e4b6:	4656      	mov	r6, sl
   2e4b8:	f8da 100c 	ldr.w	r1, [sl, #12]
   2e4bc:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2e4c0:	1f22      	subs	r2, r4, #4
   2e4c2:	2a24      	cmp	r2, #36	; 0x24
   2e4c4:	60c1      	str	r1, [r0, #12]
   2e4c6:	6088      	str	r0, [r1, #8]
   2e4c8:	f200 808f 	bhi.w	2e5ea <_realloc_r+0x30e>
   2e4cc:	2a13      	cmp	r2, #19
   2e4ce:	f240 808a 	bls.w	2e5e6 <_realloc_r+0x30a>
   2e4d2:	6829      	ldr	r1, [r5, #0]
   2e4d4:	f8ca 1008 	str.w	r1, [sl, #8]
   2e4d8:	6869      	ldr	r1, [r5, #4]
   2e4da:	f8ca 100c 	str.w	r1, [sl, #12]
   2e4de:	2a1b      	cmp	r2, #27
   2e4e0:	f200 808a 	bhi.w	2e5f8 <_realloc_r+0x31c>
   2e4e4:	3508      	adds	r5, #8
   2e4e6:	f10a 0210 	add.w	r2, sl, #16
   2e4ea:	6829      	ldr	r1, [r5, #0]
   2e4ec:	6011      	str	r1, [r2, #0]
   2e4ee:	6869      	ldr	r1, [r5, #4]
   2e4f0:	6051      	str	r1, [r2, #4]
   2e4f2:	68a9      	ldr	r1, [r5, #8]
   2e4f4:	6091      	str	r1, [r2, #8]
   2e4f6:	eb0a 0107 	add.w	r1, sl, r7
   2e4fa:	ebab 0207 	sub.w	r2, fp, r7
   2e4fe:	f042 0201 	orr.w	r2, r2, #1
   2e502:	6099      	str	r1, [r3, #8]
   2e504:	604a      	str	r2, [r1, #4]
   2e506:	f8da 3004 	ldr.w	r3, [sl, #4]
   2e50a:	f003 0301 	and.w	r3, r3, #1
   2e50e:	431f      	orrs	r7, r3
   2e510:	4640      	mov	r0, r8
   2e512:	f8ca 7004 	str.w	r7, [sl, #4]
   2e516:	f7fc fa53 	bl	2a9c0 <__malloc_unlock>
   2e51a:	e751      	b.n	2e3c0 <_realloc_r+0xe4>
   2e51c:	682b      	ldr	r3, [r5, #0]
   2e51e:	6003      	str	r3, [r0, #0]
   2e520:	686b      	ldr	r3, [r5, #4]
   2e522:	6043      	str	r3, [r0, #4]
   2e524:	2a1b      	cmp	r2, #27
   2e526:	d82d      	bhi.n	2e584 <_realloc_r+0x2a8>
   2e528:	f100 0308 	add.w	r3, r0, #8
   2e52c:	f105 0208 	add.w	r2, r5, #8
   2e530:	e71b      	b.n	2e36a <_realloc_r+0x8e>
   2e532:	4632      	mov	r2, r6
   2e534:	6829      	ldr	r1, [r5, #0]
   2e536:	6011      	str	r1, [r2, #0]
   2e538:	6869      	ldr	r1, [r5, #4]
   2e53a:	6051      	str	r1, [r2, #4]
   2e53c:	68a9      	ldr	r1, [r5, #8]
   2e53e:	6091      	str	r1, [r2, #8]
   2e540:	461c      	mov	r4, r3
   2e542:	46d1      	mov	r9, sl
   2e544:	e72a      	b.n	2e39c <_realloc_r+0xc0>
   2e546:	eb09 0107 	add.w	r1, r9, r7
   2e54a:	ebab 0b07 	sub.w	fp, fp, r7
   2e54e:	f04b 0201 	orr.w	r2, fp, #1
   2e552:	6099      	str	r1, [r3, #8]
   2e554:	604a      	str	r2, [r1, #4]
   2e556:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2e55a:	f003 0301 	and.w	r3, r3, #1
   2e55e:	431f      	orrs	r7, r3
   2e560:	4640      	mov	r0, r8
   2e562:	f845 7c04 	str.w	r7, [r5, #-4]
   2e566:	f7fc fa2b 	bl	2a9c0 <__malloc_unlock>
   2e56a:	462e      	mov	r6, r5
   2e56c:	e728      	b.n	2e3c0 <_realloc_r+0xe4>
   2e56e:	4629      	mov	r1, r5
   2e570:	f7fc f96e 	bl	2a850 <memmove>
   2e574:	e6ff      	b.n	2e376 <_realloc_r+0x9a>
   2e576:	4629      	mov	r1, r5
   2e578:	4630      	mov	r0, r6
   2e57a:	461c      	mov	r4, r3
   2e57c:	46d1      	mov	r9, sl
   2e57e:	f7fc f967 	bl	2a850 <memmove>
   2e582:	e70b      	b.n	2e39c <_realloc_r+0xc0>
   2e584:	68ab      	ldr	r3, [r5, #8]
   2e586:	6083      	str	r3, [r0, #8]
   2e588:	68eb      	ldr	r3, [r5, #12]
   2e58a:	60c3      	str	r3, [r0, #12]
   2e58c:	2a24      	cmp	r2, #36	; 0x24
   2e58e:	d017      	beq.n	2e5c0 <_realloc_r+0x2e4>
   2e590:	f100 0310 	add.w	r3, r0, #16
   2e594:	f105 0210 	add.w	r2, r5, #16
   2e598:	e6e7      	b.n	2e36a <_realloc_r+0x8e>
   2e59a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2e59e:	f023 0303 	bic.w	r3, r3, #3
   2e5a2:	441c      	add	r4, r3
   2e5a4:	462e      	mov	r6, r5
   2e5a6:	e6f9      	b.n	2e39c <_realloc_r+0xc0>
   2e5a8:	68a9      	ldr	r1, [r5, #8]
   2e5aa:	f8ca 1010 	str.w	r1, [sl, #16]
   2e5ae:	68e9      	ldr	r1, [r5, #12]
   2e5b0:	f8ca 1014 	str.w	r1, [sl, #20]
   2e5b4:	2a24      	cmp	r2, #36	; 0x24
   2e5b6:	d00c      	beq.n	2e5d2 <_realloc_r+0x2f6>
   2e5b8:	3510      	adds	r5, #16
   2e5ba:	f10a 0218 	add.w	r2, sl, #24
   2e5be:	e7b9      	b.n	2e534 <_realloc_r+0x258>
   2e5c0:	692b      	ldr	r3, [r5, #16]
   2e5c2:	6103      	str	r3, [r0, #16]
   2e5c4:	696b      	ldr	r3, [r5, #20]
   2e5c6:	6143      	str	r3, [r0, #20]
   2e5c8:	f105 0218 	add.w	r2, r5, #24
   2e5cc:	f100 0318 	add.w	r3, r0, #24
   2e5d0:	e6cb      	b.n	2e36a <_realloc_r+0x8e>
   2e5d2:	692a      	ldr	r2, [r5, #16]
   2e5d4:	f8ca 2018 	str.w	r2, [sl, #24]
   2e5d8:	696a      	ldr	r2, [r5, #20]
   2e5da:	f8ca 201c 	str.w	r2, [sl, #28]
   2e5de:	3518      	adds	r5, #24
   2e5e0:	f10a 0220 	add.w	r2, sl, #32
   2e5e4:	e7a6      	b.n	2e534 <_realloc_r+0x258>
   2e5e6:	4632      	mov	r2, r6
   2e5e8:	e77f      	b.n	2e4ea <_realloc_r+0x20e>
   2e5ea:	4629      	mov	r1, r5
   2e5ec:	4630      	mov	r0, r6
   2e5ee:	9301      	str	r3, [sp, #4]
   2e5f0:	f7fc f92e 	bl	2a850 <memmove>
   2e5f4:	9b01      	ldr	r3, [sp, #4]
   2e5f6:	e77e      	b.n	2e4f6 <_realloc_r+0x21a>
   2e5f8:	68a9      	ldr	r1, [r5, #8]
   2e5fa:	f8ca 1010 	str.w	r1, [sl, #16]
   2e5fe:	68e9      	ldr	r1, [r5, #12]
   2e600:	f8ca 1014 	str.w	r1, [sl, #20]
   2e604:	2a24      	cmp	r2, #36	; 0x24
   2e606:	d003      	beq.n	2e610 <_realloc_r+0x334>
   2e608:	3510      	adds	r5, #16
   2e60a:	f10a 0218 	add.w	r2, sl, #24
   2e60e:	e76c      	b.n	2e4ea <_realloc_r+0x20e>
   2e610:	692a      	ldr	r2, [r5, #16]
   2e612:	f8ca 2018 	str.w	r2, [sl, #24]
   2e616:	696a      	ldr	r2, [r5, #20]
   2e618:	f8ca 201c 	str.w	r2, [sl, #28]
   2e61c:	3518      	adds	r5, #24
   2e61e:	f10a 0220 	add.w	r2, sl, #32
   2e622:	e762      	b.n	2e4ea <_realloc_r+0x20e>
   2e624:	2000cc24 	.word	0x2000cc24
